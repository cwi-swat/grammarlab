--------------------ada::kellogg.bgf--------------------
relation ::= simple_expression ((IN range_or_mark) | (n::NOT IN range_or_mark) | (EQ simple_expression) | (NE simple_expression) | (LT_ simple_expression) | (LE simple_expression) | (GT simple_expression) | (GE simple_expression))? ;
package_body ::= p::PACKAGE body_is pkg_body_part end_id_opt SEMI ;
discriminant_constraint ::= p::LPAREN discriminant_association (COMMA discriminant_association)* RPAREN ;
derived_or_private_or_record ::= (abstract_opt NEW subtype_ind WITH) | (NEW subtype_ind) | (abstract_tagged_limited_opt PRIVATE | record_definition) ;
accept_alternative ::= accept_stmt stmts_opt ;
c_name_list ::= compound_name (COMMA compound_name)* ;
renames ::= RENAMES name | (dummy::definable_operator_symbol) ;
pragma_args_opt ::= (LPAREN pragma_arg (COMMA pragma_arg)* RPAREN)? ;
delay_alternative ::= delay_stmt stmts_opt ;
discriminant_specifications ::= discriminant_specification (SEMI discriminant_specification)* ;
parameter_specification ::= def_ids_colon mode_opt subtype_mark init_opt ;
defining_identifier_list ::= IDENTIFIER (COMMA IDENTIFIER)* ;
select_alternative ::= accept_alternative | delay_alternative | (t::TERMINATE SEMI) ;
entry_barrier ::= WHEN condition ;
declarative_item ::= (pkg::PACKAGE (body_is separate | (pkg_body_part end_id_opt) SEMI) | (def_id spec_decl_part)) | (tsk::TASK (body_is separate | body_part SEMI) | task_type_or_single_decl) | (pro::PROTECTED (body_is separate | (prot_op_bodies_opt end_id_opt)) | prot_type_or_single_decl SEMI) | subprog_decl_or_rename_or_inst_or_body | decl_common ;
aliased_constant_opt ::= ALIASED? CONSTANT? ;
body_is ::= BODY def_id IS ;
spec_decl_part ::= (IS generic_inst | pkg_spec_part) | renames SEMI ;
range_attrib_ref ::= prefix TIC r::RANGE (LPAREN expression RPAREN)? ;
association_head ::= selector_name (PIPE selector_name)* RIGHT_SHAFT ;
comp_decl ::= def_ids_colon component_subtype_def init_opt SEMI ;
discriminable_type_definition ::= (abstract_opt NEW subtype_ind WITH) | (NEW subtype_ind) | (abstract_tagged_limited_opt PRIVATE) ;
digits_constraint ::= d::DIGITS expression range_constraint_opt ;
rep_spec_part ::= (RECORD align_opt comp_loc_s END RECORD) | (AT expression) | expression ;
pragma_arg ::= (IDENTIFIER RIGHT_SHAFT)? expression ;
task_type_or_single_decl ::= (TYPE def_id discrim_part_opt task_definition_opt) | (def_id task_definition_opt) ;
enum_id_s ::= enumeration_literal_specification (COMMA enumeration_literal_specification)* ;
or_select_opt ::= (OR guard_opt select_alternative)* ;
subunit ::= sep::SEPARATE LPAREN compound_name RPAREN subprogram_body | package_body | task_body | protected_body ;
delta_constraint ::= d::DELTA expression range_constraint_opt ;
generic_formal_parameter ::= (t::TYPE def_id (IS (LPAREN BOX RPAREN) | (RANGE BOX) | (MOD BOX) | (DELTA BOX (DIGITS BOX) | ε) | (DIGITS BOX) | array_type_definition | access_type_definition | (empty_discrim_opt discriminable_type_definition)) | (discrim_part IS discriminable_type_definition)) | (w::WITH (PROCEDURE def_id formal_part_opt subprogram_default_opt) | (FUNCTION def_designator function_tail subprogram_default_opt) | (PACKAGE def_id IS NEW compound_name formal_package_actual_part_opt)) | parameter_specification SEMI ;
task_definition_opt ::= (IS task_items_opt private_task_items_opt end_id_opt SEMI) | SEMI ;
elsifs_opt ::= (ELSIF cond_clause)* ;
subprogram_body ::= (p::PROCEDURE def_id formal_part_opt IS body_part SEMI) | (f::FUNCTION function_tail IS body_part SEMI) ;
identifier_colon_opt ::= (IDENTIFIER COLON)? ;
pkg_body_part ::= declarative_part block_body_opt ;
except_choice_s ::= exception_choice (PIPE exception_choice)* ;
iteration_scheme_opt ::= ((WHILE condition) | (FOR IDENTIFIER IN reverse_opt discrete_subtype_definition))? ;
basic_decl_item ::= (pkg::PACKAGE def_id spec_decl_part) | (tsk::TASK task_type_or_single_decl) | (pro::PROTECTED prot_type_or_single_decl SEMI) | subprog_decl | decl_common ;
formal_part_opt ::= (LPAREN parameter_specification (SEMI parameter_specification)* RPAREN)? ;
operator_call_tail ::= LPAREN value_s RPAREN ;
private_task_items_opt ::= (PRIVATE pragma* entrydecls_repspecs_opt)? ;
extension_opt ::= (WITH (NuLL RECORD) | value_s)? ;
prot_type_or_single_decl ::= (TYPE def_id discrim_part_opt protected_definition) | (def_id protected_definition) ;
EXPONENT ::= "e" ("+" | "-")? DIGIT+ ;
signed_term ::= (p::PLUS term) | (m::MINUS term) | term ;
formal_package_actual_part_opt ::= (LPAREN BOX | defining_identifier_list RPAREN)? ;
generic_inst ::= NEW compound_name (LPAREN value_s RPAREN)? ;
else_opt ::= (ELSE statements)? ;
if_stmt ::= s::IF cond_clause elsifs_opt else_opt END IF SEMI ;
IDENTIFIER ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" ("_"? "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ;
requeue_stmt ::= r::REQUEUE name (WITH ABORT)? SEMI ;
component_list ::= (NuLL SEMI) | (component_items variant_part?) | (empty_component_items variant_part) ;
accept_stmt ::= a::ACCEPT def_id entry_index_opt formal_part_opt (DO handled_stmt_s end_id_opt SEMI) | SEMI ;
compound_name ::= IDENTIFIER (DOT IDENTIFIER)* ;
access_type_definition ::= ACCESS (protected_opt (PROCEDURE formal_part_opt) | (FUNCTION func_formal_part_opt RETURN subtype_mark)) | (constant_all_opt subtype_ind) ;
discrim_part_text ::= LPAREN BOX | discriminant_specifications RPAREN ;
subtype_ind ::= subtype_mark constraint_opt ;
index_or_discrete_range_s ::= index_or_discrete_range (COMMA index_or_discrete_range)* ;
expression ::= relation ((a::AND THEN? relation) | (o::OR ELSE? relation) | (XOR relation))* ;
protected_body ::= p::PROTECTED body_is prot_op_bodies_opt end_id_opt SEMI ;
array_type_definition ::= ARRAY LPAREN index_or_discrete_range_s RPAREN OF component_subtype_def ;
prefix ::= IDENTIFIER ((DOT ALL | IDENTIFIER) | (p::LPAREN value_s RPAREN))* ;
block ::= declare_opt block_body ;
known_discrim_part ::= LPAREN discriminant_specifications RPAREN ;
generic_subp_inst ::= IS generic_inst SEMI ;
name ::= IDENTIFIER ((DOT ALL | IDENTIFIER | CHARACTER_LITERAL | (dummy::is_operator)) | (p::LPAREN value_s RPAREN) | (TIC attribute_id))* ;
call_or_assignment ::= name (ASSIGN expression) | ε SEMI ;
variant ::= w::WHEN choice_s RIGHT_SHAFT component_list ;
mark_with_constraint ::= subtype_mark range_constraint ;
protected_definition ::= IS prot_op_decl_s (PRIVATE prot_member_decl_s)? end_id_opt ;
loop_stmt ::= iteration_scheme_opt LOOP statements END LOOP ;
parenth_values ::= LPAREN value (COMMA value)* RPAREN ;
null_stmt ::= s::NuLL SEMI ;
type_def ::= (LPAREN enum_id_s RPAREN) | (RANGE range) | (MOD expression) | (DIGITS expression range_constraint_opt) | (DELTA expression (RANGE range) | (DIGITS expression range_constraint_opt)) | array_type_definition | access_type_definition | (empty_discrim_opt derived_or_private_or_record) ;
compilation_unit ::= context_items_opt library_item | subunit pragma* ;
parenthesized_primary ::= pp::LPAREN (NuLL RECORD) | (value_s extension_opt) RPAREN ;
component_subtype_def ::= aliased_opt subtype_ind ;
entry_call_stmt ::= name SEMI ;
task_items_opt ::= pragma* entrydecls_repspecs_opt ;
entry_call_alternative ::= entry_call_stmt stmts_opt ;
statement_identifier ::= n::IDENTIFIER COLON ;
align_opt ::= (AT MOD expression SEMI)? ;
abstract_tagged_limited_opt ::= ((ABSTRACT TAGGED) | TAGGED)? LIMITED? ;
abort_stmt ::= a::ABORT name (COMMA name)* SEMI ;
case_stmt ::= s::CASE expression IS alternative_s END CASE SEMI ;
return_stmt ::= s::RETURN expression? SEMI ;
entrydecls_repspecs_opt ::= (entry_declaration (pragma | rep_spec)*)* ;
name_or_qualified ::= IDENTIFIER ((DOT ALL | IDENTIFIER | CHARACTER_LITERAL | (dummy::is_operator)) | (p::LPAREN value_s RPAREN) | (TIC parenthesized_primary | attribute_id))* ;
end_id_opt ::= END id_opt ;
BASED_INTEGER ::= EXTENDED_DIGIT ("_"? EXTENDED_DIGIT)* ;
subtype_mark ::= compound_name (TIC attribute_id)? ;
value ::= (OTHERS RIGHT_SHAFT expression) | (ranged_expr_s (RIGHT_SHAFT expression)?) ;
body_part ::= declarative_part block_body end_id_opt ;
prot_op_decl ::= entry_declaration | (p::PROCEDURE def_id formal_part_opt SEMI) | (f::FUNCTION def_designator function_tail SEMI) | rep_spec | pragma ;
statement ::= def_label_opt null_stmt | exit_stmt | return_stmt | goto_stmt | delay_stmt | abort_stmt | raise_stmt | requeue_stmt | accept_stmt | select_stmt | if_stmt | case_stmt | (loop_stmt SEMI) | (block END SEMI) | (statement_identifier (loop_stmt id_opt SEMI) | (block end_id_opt SEMI)) | call_or_assignment ;
subprog_decl_or_body ::= (p::PROCEDURE def_id formal_part_opt (IS body_part) | ε SEMI) | (f::FUNCTION def_designator function_tail (IS body_part) | ε SEMI) ;
discrete_subtype_def_opt ::= (LPAREN discrete_subtype_definition) | ε ;
ranged_expr ::= expression ((DOT_DOT simple_expression) | (RANGE range))? ;
variant_part ::= c::CASE discriminant_direct_name IS variant_s END CASE SEMI ;
term ::= factor ((STAR factor) | (DIV factor) | (MOD factor) | (REM factor))* ;
index_constraint ::= p::LPAREN discrete_range (COMMA discrete_range)* RPAREN ;
entry_index_spec_opt ::= (LPAREN FOR def_id IN discrete_subtype_definition) | ε ;
declare_opt ::= (DECLARE declarative_part)? ;
def_ids_colon ::= defining_identifier_list COLON ;
exception_handler ::= w::WHEN identifier_colon_opt except_choice_s RIGHT_SHAFT statements ;
CHARACTER_LITERAL ::= "'" α "'" ;
function_tail ::= func_formal_part_opt RETURN subtype_mark ;
choice_s ::= choice (PIPE choice)* ;
entry_body_formal_part ::= entry_index_spec_opt formal_part_opt ;
func_param ::= def_ids_colon in_access_opt subtype_mark init_opt ;
factor ::= (NOT primary) | (ABS primary) | (primary (EXPON primary)?) ;
entry_body ::= e::ENTRY def_id entry_body_formal_part entry_barrier IS body_part SEMI ;
selective_accept ::= guard_opt select_alternative or_select_opt else_opt ;
exit_stmt ::= s::EXIT label_name? (WHEN condition)? SEMI ;
simple_expression ::= signed_term ((PLUS signed_term) | (MINUS signed_term) | (CONCAT signed_term))* ;
pkg_spec_part ::= basic_declarative_items_opt (PRIVATE basic_declarative_items_opt)? end_id_opt ;
COMMENT ::= COMMENT_INTRO α* "\n" | ("\r" "\n"?) ;
func_formal_part_opt ::= (LPAREN func_param (SEMI func_param)* RPAREN)? ;
pragma ::= PRAGMA IDENTIFIER pragma_args_opt SEMI ;
raise_stmt ::= r::RAISE compound_name? SEMI ;
subprogram_default_opt ::= (IS BOX | name)? ;
entry_index_opt ::= (LPAREN expression) | ε ;
subprog_decl ::= (p::PROCEDURE def_id generic_subp_inst | (formal_part_opt renames | is_separate_or_abstract_or_decl SEMI)) | (f::FUNCTION def_designator generic_subp_inst | (function_tail renames | is_separate_or_abstract_or_decl SEMI)) ;
def_label_opt ::= (LT_LT IDENTIFIER GT_GT)? ;
entry_declaration ::= e::ENTRY IDENTIFIER discrete_subtype_def_opt formal_part_opt SEMI ;
cond_clause ::= condition c::THEN statements ;
subprog_decl_or_rename_or_inst_or_body ::= (p::PROCEDURE def_id generic_subp_inst | (formal_part_opt renames | (IS separate_or_abstract | body_part) | ε SEMI)) | (f::FUNCTION def_designator generic_subp_inst | (function_tail renames | (IS separate_or_abstract | body_part) | ε SEMI)) ;
select_stmt ::= s::SELECT (triggering_alternative THEN ABORT) | selective_accept | (entry_call_alternative (OR delay_alternative) | (ELSE statements)) END SELECT SEMI ;
use_clause ::= u::USE (TYPE subtype_mark (COMMA subtype_mark)*) | c_name_list SEMI ;
index_or_discrete_range ::= simple_expression ((DOT_DOT simple_expression) | (RANGE BOX | range))? ;
NUMERIC_LIT ::= DIGIT+ (("#" BASED_INTEGER ("." BASED_INTEGER)? "#") | (("_" DIGIT+)+))? (("." DIGIT+ ("_" DIGIT+)* EXPONENT?) | EXPONENT)? ;
value_s ::= value (COMMA value)* ;
discriminant_specification ::= def_ids_colon access_opt subtype_mark init_opt ;
goto_stmt ::= s::GOTO label_name SEMI ;
context_items_opt ::= pragma* (with_clause (use_clause | pragma)*)* ;
discriminant_association ::= selector_names_opt expression ;
except_handler_part_opt ::= (EXCEPTION exception_handler+)? ;
ranged_expr_s ::= ranged_expr (PIPE ranged_expr)* ;
decl_common ::= (t::TYPE IDENTIFIER (IS type_def) | (discrim_part (IS derived_or_private_or_record) | ε) | empty_discrim_opt SEMI) | (s::SUBTYPE IDENTIFIER IS subtype_ind SEMI) | generic_decl | use_clause | (r::FOR (local_enum_name USE) | (subtype_mark USE rep_spec_part) SEMI) | (IDENTIFIER erd::COLON EXCEPTION RENAMES compound_name) | (IDENTIFIER ord::COLON subtype_mark RENAMES name) | (defining_identifier_list od::COLON EXCEPTION | (CONSTANT ASSIGN) | (aliased_constant_opt (array_type_definition init_opt) | (subtype_ind init_opt)) SEMI) ;
range_constraint ::= RANGE range ;
handled_stmt_s ::= statements except_handler_part_opt ;
is_separate_or_abstract_or_decl ::= (IS separate_or_abstract) | ε ;
rep_spec ::= r::FOR subtype_mark USE rep_spec_part SEMI ;
task_body ::= t::TASK body_is body_part SEMI ;
CHAR_STRING ::= """ α* """ ;
operator_call ::= cs::CHAR_STRING operator_call_tail ;
guard_opt ::= (WHEN condition RIGHT_SHAFT pragma*)? ;
triggering_alternative ::= delay_stmt | entry_call_stmt stmts_opt ;
mode_opt ::= ((IN OUT?) | OUT | ACCESS)? ;
library_item ::= private_opt lib_pkg_spec_or_body | subprog_decl_or_rename_or_inst_or_body | generic_decl ;
block_body ::= b::BEGIN handled_stmt_s ;
generic_decl ::= g::GENERIC generic_formal_part_opt (PACKAGE def_id renames | (IS pkg_spec_part)) | (PROCEDURE def_id formal_part_opt renames | ε) | (FUNCTION def_designator function_tail renames | ε) SEMI ;
case_statement_alternative ::= s::WHEN choice_s RIGHT_SHAFT statements ;
range_dots ::= simple_expression DOT_DOT simple_expression ;
allocator ::= n::NEW name_or_qualified ;
block_body_opt ::= (BEGIN handled_stmt_s)? ;
with_clause ::= w::WITH c_name_list SEMI ;
lib_pkg_spec_or_body ::= pkg::PACKAGE (BODY def_id IS pkg_body_part end_id_opt SEMI) | (def_id spec_decl_part) ;
comp_loc_s ::= (pragma | (subtype_mark AT expression RANGE range SEMI))* ;
init_opt ::= (ASSIGN expression)? ;
delay_stmt ::= d::DELAY until_opt expression SEMI ;
primary ::= name_or_qualified | parenthesized_primary | allocator | NuLL | NUMERIC_LIT | CHARACTER_LITERAL | (cs::CHAR_STRING operator_call_tail?) ;
record_definition ::= (RECORD component_list END RECORD) | (NuLL RECORD) ;
--------------------ada::kempe.bgf--------------------
subprogram_declaration ::= subprogram_specification ";" ;
relation ::= (simple_expression (relational_operator simple_expression)?) | (simple_expression "not"? "in" range) | (simple_expression "not"? "in" subtype_mark) ;
at_clause ::= "for" direct_name "use" "at" expression ";" ;
discriminant_constraint ::= "(" discriminant_association ("," discriminant_association)* ")" ;
package_body ::= "package" body defining_program_unit_name "is" declarative_part ("begin" handled_sequence_of_statements)? "end" ((parent_unit_name ".")? identifier)? ";" ;
attribute_definition_clause ::= ("for" local_name "'" attribute_designator "use" expression ";") | ("for" local_name "'" attribute_designator "use" name ";") ;
delay_relative_statement ::= "delay" delay_expression ";" ;
accept_statement ::= "accept" entry_direct_name ("(" entry_index ")")? parameter_profile ("do" handled_sequence_of_statements "end" entry_identifier?)? ";" ;
accept_alternative ::= accept_statement sequence_of_statements? ;
label ::= "<<" label_statement_identifier ">>" ;
formal_modular_type_definition ::= "mod" "<>" ;
component_clause ::= component_local_name "at" position "range" first_bit ".." last_bit ";" ;
task_body_stub ::= "task" body defining_identifier "is" "separate" ";" ;
delay_alternative ::= delay_statement sequence_of_statements? ;
subprogram_body_stub ::= subprogram_specification "is" "separate" ";" ;
parameter_specification ::= (defining_identifier_list ":" mode subtype_mark (":=" default_expression)?) | (defining_identifier_list ":" access_definition (":=" default_expression)?) ;
defining_identifier_list ::= defining_identifier ("," defining_identifier)* ;
parameter_association ::= (formal_parameter_selector_name "=>")? explicit_actual_parameter ;
entry_barrier ::= "when" condition ;
generic_instantiation ::= ("package" defining_program_unit_name "is" "new" generic_package_name generic_actual_part? ";") | ("procedure" defining_program_unit_name "is" "new" generic_procedure_name generic_actual_part? ";") | ("function" defining_designator "is" "new" generic_function_name generic_actual_part? ";") ;
access_to_subprogram_definition ::= ("access" "protected"? "procedure" parameter_profile) | ("access" "protected"? "function" parameter_and_result_profile) ;
local_name ::= direct_name | (direct_name "'" attribute_designator) | library_unit_name ;
raise_statement ::= "raise" exception_name? ";" ;
generic_formal_part ::= "generic" (generic_formal_parameter_declaration | use_clause)* ;
unconstrained_array_definition ::= "array" "(" index_subtype_definition ("," index_subtype_definition)* ")" "of" component_definition ;
protected_body_stub ::= "protected" body defining_identifier "is" "separate" ";" ;
array_component_association ::= discrete_choice_list "=>" expression ;
single_task_declaration ::= "task" defining_identifier ("is" task_definition)? ";" ;
digits_constraint ::= "digits" static_expression range_constraint? ;
component_definition ::= "aliased"? subtype_indication ;
asynchronous_select ::= "select" triggering_alternative "then" "abort" abortable_part "end" "select" ";" ;
record_component_association ::= (component_choice_list "=>")? expression ;
subprogram_renaming_declaration ::= subprogram_specification "renames" callable_entity_name ";" ;
terminate_alternative ::= "terminate" ";" ;
if_statement ::= "if" condition "then" sequence_of_statements ("elsif" condition "then" sequence_of_statements)* ("else" sequence_of_statements)? "end" "if" ";" ;
restriction ::= restriction_identifier | (restriction_parameter_identifier "=>" expression) ;
formal_decimal_fixed_point_definition ::= "delta" "<>" "digits" "<>" ;
formal_object_declaration ::= defining_identifier_list ":" mode subtype_mark (":=" default_expression)? ";" ;
package_specification ::= "package" defining_program_unit_name "is" basic_declarative_item* ("private" basic_declarative_item*)? "end" ((parent_unit_name ".")? identifier)? ;
ordinary_fixed_point_definition ::= "delta" static_expression real_range_specification ;
index_subtype_definition ::= subtype_mark "range" "<>" ;
delta_constraint ::= "delta" static_expression range_constraint? ;
subunit ::= "separate" "(" parent_unit_name ")" proper_body ;
constrained_array_definition ::= "array" "(" discrete_subtype_definition ("," discrete_subtype_definition)* ")" "of" component_definition ;
decimal_literal ::= numeral ("." numeral)? exponent? ;
extension_aggregate ::= "(" ancestor_part "with" record_component_association_list ")" ;
private_extension_declaration ::= "type" defining_identifier discriminant_part? "is" "abstract"? "new" ancestor_subtype_indication "with" "private" ";" ;
subprogram_body ::= subprogram_specification "is" declarative_part "begin" handled_sequence_of_statements "end" designator? ";" ;
abstract_subprogram_declaration ::= subprogram_specification "is" "abstract" ";" ;
procedure_call_statement ::= (procedure_name ";") | (procedure_prefix actual_parameter_part ";") ;
null_statement ::= "null" ";" ;
incomplete_type_declaration ::= "type" defining_identifier discriminant_part? ";" ;
object_renaming_declaration ::= defining_identifier ":" subtype_mark "renames" object_name ";" ;
record_representation_clause ::= "for" first_subtype_local_name "use" "record" mod_clause? component_clause* "end" "record" ";" ;
single_protected_declaration ::= "protected" defining_identifier "is" protected_definition ";" ;
formal_package_declaration ::= "with" "package" defining_identifier "is" "new" generic_package_name formal_package_actual_part ";" ;
handled_sequence_of_statements ::= sequence_of_statements ("exception" exception_handler exception_handler*)? ;
exponent ::= ("E" "+"? numeral) | ("E" "-" numeral) ;
identifier ::= identifier_letter (underline? letter_or_digit)* ;
exception_renaming_declaration ::= defining_identifier ":" "exception" "renames" exception_name ";" ;
guard ::= "when" condition "=>" ;
full_type_declaration ::= ("type" defining_identifier known_discriminant_part? "is" type_definition ";") | task_type_declaration | protected_type_declaration ;
formal_signed_integer_type_definition ::= "range" "<>" ;
defining_program_unit_name ::= (parent_unit_name ".")? defining_identifier ;
mode ::= ("in"?) | ("in" "out") | "out" ;
record_extension_part ::= "with" record_definition ;
component_list ::= (component_item component_item*) | (component_item* variant_part) | ("null" ";") ;
code_statement ::= qualified_expression ";" ;
generic_actual_part ::= "(" generic_association ("," generic_association)* ")" ;
actual_parameter_part ::= "(" parameter_association ("," parameter_association)* ")" ;
generic_package_declaration ::= generic_formal_part package_specification ";" ;
character_literal ::= "'" graphic_character "'" ;
expression ::= (relation ("and" relation)*) | (relation ("and" "then" relation)*) | (relation ("or" relation)*) | (relation ("or" "else" relation)*) | (relation ("xor" relation)*) ;
attribute_designator ::= (identifier ("(" static_expression ")")?) | "Access" | "Delta" | "Digits" ;
known_discriminant_part ::= "(" discriminant_specification (";" discriminant_specification)* ")" ;
loop_statement ::= (loop_statement_identifier ":")? iteration_scheme? "loop" sequence_of_statements "end" "loop" loop_identifier? ";" ;
protected_body ::= "protected" body defining_identifier "is" protected_operation_item* "end" protected_identifier? ";" ;
goto_statement ::= "goto" label_name ";" ;
slice ::= prefix "(" discrete_range ")" ;
based_numeral ::= extended_digit (underline? extended_digit)* ;
exit_statement ::= "exit" loop_name? ("when" condition)? ";" ;
exception_declaration ::= defining_identifier_list ":" "exception" ";" ;
record_type_definition ::= ("abstract"? "tagged")? "limited"? record_definition ;
access_to_object_definition ::= "access" general_access_modifier? subtype_indication ;
variant ::= "when" discrete_choice_list "=>" component_list ;
protected_definition ::= protected_operation_declaration* ("private" protected_element_declaration*)? "end" protected_identifier? ;
number_declaration ::= defining_identifier_list ":" "constant" ":=" static_expression ";" ;
string_literal ::= """ string_element* """ ;
compilation_unit ::= (context_clause library_item) | (context_clause subunit) ;
enumeration_type_definition ::= "(" enumeration_literal_specification ("," enumeration_literal_specification)* ")" ;
assignment_statement ::= variable_name ":=" expression ";" ;
decimal_fixed_point_definition ::= "delta" static_expression "digits" static_expression real_range_specification? ;
floating_point_definition ::= "digits" static_expression real_range_specification? ;
formal_ordinary_fixed_point_definition ::= "delta" "<>" ;
object_declaration ::= (defining_identifier_list ":" "aliased"? "constant"? subtype_indication (":=" expression)? ";") | (defining_identifier_list ":" "aliased"? "constant"? array_type_definition (":=" expression)? ";") | single_task_declaration | single_protected_declaration ;
entry_call_alternative ::= entry_call_statement sequence_of_statements? ;
package_body_stub ::= "package" body defining_identifier "is" "separate" ";" ;
task_type_declaration ::= "task" "type" defining_identifier known_discriminant_part? ("is" task_definition)? ";" ;
statement ::= (label* simple_statement) | (label* compound_statement) ;
variant_part ::= "case" discriminant_direct_name "is" variant variant* "end" "case" ";" ;
formal_private_type_definition ::= ("abstract"? "tagged")? "limited"? "private" ;
term ::= factor (multiplying_operator factor)* ;
index_constraint ::= "(" discrete_range ("," discrete_range)* ")" ;
attribute_reference ::= prefix "'" attribute_designator ;
generic_subprogram_declaration ::= generic_formal_part subprogram_specification ";" ;
protected_type_declaration ::= "protected" "type" defining_identifier known_discriminant_part? "is" protected_definition ";" ;
range_attribute_reference ::= prefix "'" range_attribute_designator ;
function_call ::= function_name | (function_prefix actual_parameter_part) ;
conditional_entry_call ::= "select" entry_call_alternative "else" sequence_of_statements "end" "select" ";" ;
real_range_specification ::= "range" static_simple_expression ".." static_simple_expression ;
explicit_dereference ::= name "." "all" ;
comment ::= "-" "-" non_end_of_line_character* ;
use_type_clause ::= "use" "type" subtype_mark ("," subtype_mark)* ";" ;
exception_handler ::= "when" (choice_parameter_specification ":")? exception_choice ("|" exception_choice)* "=>" sequence_of_statements ;
range_attribute_designator ::= "Range" ("(" static_expression ")")? ;
selected_component ::= prefix "." selector_name ;
derived_type_definition ::= "abstract"? "new" parent_subtype_indication record_extension_part? ;
signed_integer_type_definition ::= "range" static_simple_expression ".." static_simple_expression ;
entry_body_formal_part ::= ("(" entry_index_specification ")")? parameter_profile ;
named_array_aggregate ::= "(" array_component_association ("," array_component_association)* ")" ;
loop_parameter_specification ::= defining_identifier "in" "reverse"? discrete_subtype_definition ;
record_aggregate ::= "(" record_component_association_list ")" ;
formal_subprogram_declaration ::= "with" subprogram_specification ("is" subprogram_default)? ";" ;
entry_body ::= "entry" defining_identifier entry_body_formal_part entry_barrier "is" declarative_part "begin" handled_sequence_of_statements "end" entry_identifier? ";" ;
factor ::= (primary ("**" primary)?) | ("abs" primary) | ("not" primary) ;
sequence_of_statements ::= statement statement* ;
task_definition ::= task_item* ("private" task_item*)? "end" task_identifier? ;
mod_clause ::= "at" "mod" static_expression ";" ;
record_component_association_list ::= (record_component_association ("," record_component_association)*) | ("null" "record") ;
selective_accept ::= "select" guard? select_alternative ("or" guard? select_alternative)* ("else" sequence_of_statements)? "end" "select" ";" ;
subprogram_specification ::= ("procedure" defining_program_unit_name parameter_profile) | ("function" defining_designator parameter_and_result_profile) ;
iteration_scheme ::= ("while" condition) | ("for" loop_parameter_specification) ;
formal_type_declaration ::= "type" defining_identifier discriminant_part? "is" formal_type_definition ";" ;
simple_expression ::= unary_adding_operator? term (binary_adding_operator term)* ;
parameter_and_result_profile ::= formal_part? "return" subtype_mark ;
formal_part ::= "(" parameter_specification (";" parameter_specification)* ")" ;
modular_type_definition ::= "mod" static_expression ;
subtype_indication ::= subtype_mark constraint? ;
use_package_clause ::= "use" package_name ("," package_name)* ";" ;
block_statement ::= (block_statement_identifier ":")? ("declare" declarative_part)? "begin" handled_sequence_of_statements "end" block_identifier? ";" ;
range ::= range_attribute_reference | (simple_expression ".." simple_expression) ;
pragma ::= "pragma" identifier ("(" pragma_argument_association ("," pragma_argument_association)* ")")? ";" ;
entry_call_statement ::= entry_name actual_parameter_part? ";" ;
type_conversion ::= (subtype_mark "(" expression ")") | (subtype_mark "(" name ")") ;
component_choice_list ::= (component_selector_name ("|" component_selector_name)*) | "others" ;
component_declaration ::= defining_identifier_list ":" component_definition (":=" default_expression)? ";" ;
discrete_choice_list ::= discrete_choice ("|" discrete_choice)* ;
subtype_declaration ::= "subtype" defining_identifier "is" subtype_indication ";" ;
private_type_declaration ::= "type" defining_identifier discriminant_part? "is" ("abstract"? "tagged")? "limited"? "private" ";" ;
indexed_component ::= prefix "(" expression ("," expression)* ")" ;
requeue_statement ::= "requeue" entry_name ("with" "abort")? ";" ;
positional_array_aggregate ::= ("(" expression "," expression ("," expression)* ")") | ("(" expression ("," expression)* "," "others" "=>" expression ")") ;
entry_declaration ::= "entry" defining_identifier ("(" discrete_subtype_definition ")")? parameter_profile ";" ;
formal_floating_point_definition ::= "digits" "<>" ;
enumeration_representation_clause ::= "for" first_subtype_local_name "use" enumeration_aggregate ";" ;
discriminant_specification ::= (defining_identifier_list ":" subtype_mark (":=" default_expression)?) | (defining_identifier_list ":" access_definition (":=" default_expression)?) ;
discriminant_association ::= (discriminant_selector_name ("|" discriminant_selector_name)* "=>")? expression ;
based_literal ::= base "#" based_numeral ("." based_numeral)? "#" exponent? ;
pragma_argument_association ::= ((pragma_argument_identifier "=>")? name) | ((pragma_argument_identifier "=>")? expression) ;
abort_statement ::= "abort" task_name ("," task_name)* ";" ;
case_statement ::= "case" expression "is" case_statement_alternative case_statement_alternative* "end" "case" ";" ;
return_statement ::= "return" expression? ";" ;
range_constraint ::= "range" range ;
generic_renaming_declaration ::= ("generic" "package" defining_program_unit_name "renames" generic_package_name ";") | ("generic" "procedure" defining_program_unit_name "renames" generic_procedure_name ";") | ("generic" "function" defining_program_unit_name "renames" generic_function_name ";") ;
numeral ::= digit (underline? digit)* ;
task_body ::= "task" body defining_identifier "is" declarative_part "begin" handled_sequence_of_statements "end" task_identifier? ";" ;
qualified_expression ::= (subtype_mark "'(" expression ")") | (subtype_mark "'" aggregate) ;
generic_association ::= (generic_formal_parameter_selector_name "=>")? explicit_generic_actual_parameter ;
triggering_alternative ::= triggering_statement sequence_of_statements? ;
library_item ::= ("private"? library_unit_declaration) | library_unit_body | ("private"? library_unit_renaming_declaration) ;
designator ::= ((parent_unit_name ".")? identifier) | operator_symbol ;
timed_entry_call ::= "select" entry_call_alternative "or" delay_alternative "end" "select" ";" ;
delay_until_statement ::= "delay" "until" delay_expression ";" ;
package_renaming_declaration ::= "package" defining_program_unit_name renamespackage_name ";" ;
case_statement_alternative ::= "when" discrete_choice_list "=>" sequence_of_statements ;
access_definition ::= "access" subtype_mark ;
allocator ::= ("new" subtype_indication) | ("new" qualified_expression) ;
entry_index_specification ::= "for" defining_identifier "in" discrete_subtype_definition ;
with_clause ::= "with" library_unit_name ("," library_unit_name)* ";" ;
formal_derived_type_definition ::= "abstract"? "new" subtype_mark ("with" "private")? ;
primary ::= numeric_literal | "null" | string_literal | aggregate | name | qualified_expression | allocator | ("(" expression ")") ;
package_declaration ::= package_specification ";" ;
record_definition ::= ("record" component_list "end" "record") | ("null" "record") ;
--------------------ada::laemmel-verhoef.bgf--------------------
subprogram_declaration ::= subprogram_specification ";" ;
relation ::= (simple_expression (relational_operator simple_expression)?) | (simple_expression "not"? "in" range_definition) | (simple_expression "not"? "in" subtype_mark) ;
at_clause ::= "for" direct_name "use" "at" expression ";" ;
discriminant_constraint ::= "(" discriminant_association ("," discriminant_association)* ")" ;
package_body ::= "package" body defining_program_unit_name "is" declarative_part ("begin" handled_sequence_of_statements)? "end" ((parent_unit_name ".")? identifier)? ";" ;
attribute_definition_clause ::= ("for" local_name "'" attribute_designator "use" expression ";") | ("for" local_name "'" attribute_designator "use" name ";") ;
delay_relative_statement ::= "delay" delay_expression ";" ;
accept_statement ::= "accept" entry_direct_name ("(" entry_index ")")? parameter_profile ("do" handled_sequence_of_statements "end" entry_identifier?)? ";" ;
accept_alternative ::= accept_statement sequence_of_statements? ;
label ::= "<<" label_statement_identifier ">>" ;
formal_modular_type_definition ::= "mod" "<>" ;
component_clause ::= component_local_name "at" position "range" first_bit ".." last_bit ";" ;
task_body_stub ::= "task" body defining_identifier "is" "separate" ";" ;
delay_alternative ::= delay_statement sequence_of_statements? ;
subprogram_body_stub ::= subprogram_specification "is" "separate" ";" ;
parameter_specification ::= (defining_identifier_list ":" mode subtype_mark (":=" default_expression)?) | (defining_identifier_list ":" access_definition (":=" default_expression)?) ;
defining_identifier_list ::= defining_identifier ("," defining_identifier)* ;
parameter_association ::= (formal_parameter_selector_name "=>")? explicit_actual_parameter ;
entry_barrier ::= "when" condition ;
generic_instantiation ::= ("package" defining_program_unit_name "is" "new" generic_package_name generic_actual_part? ";") | ("procedure" defining_program_unit_name "is" "new" generic_procedure_name generic_actual_part? ";") | ("function" defining_designator "is" "new" generic_function_name generic_actual_part? ";") ;
access_to_subprogram_definition ::= ("access" "protected"? "procedure" parameter_profile) | ("access" "protected"? "function" parameter_and_result_profile) ;
local_name ::= direct_name | (direct_name "'" attribute_designator) | library_unit_name ;
raise_statement ::= "raise" exception_name? ";" ;
unknown_discriminant_part ::= "(" "<>" ")" ;
generic_formal_part ::= "generic" (generic_formal_parameter_declaration | use_clause)* ;
unconstrained_array_definition ::= "array" "(" index_subtype_definition ("," index_subtype_definition)* ")" "of" component_definition ;
protected_body_stub ::= "protected" body defining_identifier "is" "separate" ";" ;
array_component_association ::= discrete_choice_list "=>" expression ;
single_task_declaration ::= "task" defining_identifier ("is" task_definition)? ";" ;
digits_constraint ::= "digits" static_expression range_constraint? ;
component_definition ::= "aliased"? subtype_indication ;
asynchronous_select ::= "select" triggering_alternative "then" "abort" abortable_part "end" "select" ";" ;
record_component_association ::= (component_choice_list "=>")? expression ;
subprogram_renaming_declaration ::= subprogram_specification "renames" callable_entity_name ";" ;
terminate_alternative ::= "terminate" ";" ;
if_statement ::= "if" condition "then" sequence_of_statements ("elsif" condition "then" sequence_of_statements)* ("else" sequence_of_statements)? "end" "if" ";" ;
restriction ::= restriction_identifier | (restriction_parameter_identifier "=>" expression) ;
formal_decimal_fixed_point_definition ::= "delta" "<>" "digits" "<>" ;
formal_object_declaration ::= defining_identifier_list ":" mode subtype_mark (":=" default_expression)? ";" ;
package_specification ::= "package" defining_program_unit_name "is" basic_declarative_item* ("private" basic_declarative_item*)? "end" ((parent_unit_name ".")? identifier)? ;
ordinary_fixed_point_definition ::= "delta" static_expression real_range_specification ;
index_subtype_definition ::= subtype_mark "range" "<>" ;
delta_constraint ::= "delta" static_expression range_constraint? ;
subunit ::= "separate" "(" parent_unit_name ")" proper_body ;
constrained_array_definition ::= "array" "(" discrete_subtype_definition ("," discrete_subtype_definition)* ")" "of" component_definition ;
extension_aggregate ::= "(" ancestor_part "with" record_component_association_list ")" ;
private_extension_declaration ::= "type" defining_identifier discriminant_part? "is" "abstract"? "new" ancestor_subtype_indication "with" "private" ";" ;
subprogram_body ::= subprogram_specification "is" declarative_part "begin" handled_sequence_of_statements "end" designator? ";" ;
abstract_subprogram_declaration ::= subprogram_specification "is" "abstract" ";" ;
procedure_call_statement ::= (procedure_name ";") | (procedure_prefix actual_parameter_part ";") ;
null_statement ::= "null" ";" ;
incomplete_type_declaration ::= "type" defining_identifier discriminant_part? ";" ;
object_renaming_declaration ::= defining_identifier ":" subtype_mark "renames" object_name ";" ;
record_representation_clause ::= "for" first_subtype_local_name "use" "record" mod_clause? component_clause* "end" "record" ";" ;
single_protected_declaration ::= "protected" defining_identifier "is" protected_definition ";" ;
formal_package_declaration ::= "with" "package" defining_identifier "is" "new" generic_package_name formal_package_actual_part ";" ;
handled_sequence_of_statements ::= sequence_of_statements ("exception" exception_handler exception_handler*)? ;
exception_renaming_declaration ::= defining_identifier ":" "exception" "renames" exception_name ";" ;
guard ::= "when" condition "=>" ;
full_type_declaration ::= ("type" defining_identifier known_discriminant_part? "is" type_definition ";") | task_type_declaration | protected_type_declaration ;
formal_signed_integer_type_definition ::= "range" "<>" ;
defining_program_unit_name ::= (parent_unit_name ".")? defining_identifier ;
mode ::= ("in"?) | ("in" "out") | "out" ;
record_extension_part ::= "with" record_definition ;
component_list ::= (component_item component_item*) | (component_item* variant_part) | ("null" ";") ;
code_statement ::= qualified_expression ";" ;
generic_actual_part ::= "(" generic_association ("," generic_association)* ")" ;
actual_parameter_part ::= "(" parameter_association ("," parameter_association)* ")" ;
generic_package_declaration ::= generic_formal_part package_specification ";" ;
expression ::= (relation ("and" relation)*) | (relation ("and" "then" relation)*) | (relation ("or" relation)*) | (relation ("or" "else" relation)*) | (relation ("xor" relation)*) ;
attribute_designator ::= (identifier ("(" static_expression ")")?) | "Access" | "Delta" | "Digits" ;
known_discriminant_part ::= "(" discriminant_specification (";" discriminant_specification)* ")" ;
range_definition ::= range_attribute_reference | (simple_expression ".." simple_expression) ;
loop_statement ::= (loop_statement_identifier ":")? iteration_scheme? "loop" sequence_of_statements "end" "loop" loop_identifier? ";" ;
protected_body ::= "protected" body defining_identifier "is" protected_operation_item* "end" protected_identifier? ";" ;
goto_statement ::= "goto" label_name ";" ;
slice ::= prefix "(" discrete_range ")" ;
exit_statement ::= "exit" loop_name? ("when" condition)? ";" ;
exception_declaration ::= defining_identifier_list ":" "exception" ";" ;
record_type_definition ::= ("abstract"? "tagged")? "limited"? record_definition ;
access_to_object_definition ::= "access" general_access_modifier? subtype_indication ;
variant ::= "when" discrete_choice_list "=>" component_list ;
protected_definition ::= protected_operation_declaration* ("private" protected_element_declaration*)? "end" protected_identifier? ;
number_declaration ::= defining_identifier_list ":" "constant" ":=" static_expression ";" ;
formal_discrete_type_definition ::= "(" "<>" ")" ;
compilation_unit ::= (context_clause library_item) | (context_clause subunit) ;
enumeration_type_definition ::= "(" enumeration_literal_specification ("," enumeration_literal_specification)* ")" ;
assignment_statement ::= variable_name ":=" expression ";" ;
decimal_fixed_point_definition ::= "delta" static_expression "digits" static_expression real_range_specification? ;
floating_point_definition ::= "digits" static_expression real_range_specification? ;
formal_ordinary_fixed_point_definition ::= "delta" "<>" ;
object_declaration ::= (defining_identifier_list ":" "aliased"? "constant"? subtype_indication (":=" expression)? ";") | (defining_identifier_list ":" "aliased"? "constant"? array_type_definition (":=" expression)? ";") | single_task_declaration | single_protected_declaration ;
entry_call_alternative ::= entry_call_statement sequence_of_statements? ;
package_body_stub ::= "package" body defining_identifier "is" "separate" ";" ;
task_type_declaration ::= "task" "type" defining_identifier known_discriminant_part? ("is" task_definition)? ";" ;
statement ::= (label* simple_statement) | (label* compound_statement) ;
variant_part ::= "case" discriminant_direct_name "is" variant variant* "end" "case" ";" ;
formal_private_type_definition ::= ("abstract"? "tagged")? "limited"? "private" ;
term ::= factor (multiplying_operator factor)* ;
index_constraint ::= "(" discrete_range ("," discrete_range)* ")" ;
attribute_reference ::= prefix "'" attribute_designator ;
generic_subprogram_declaration ::= generic_formal_part subprogram_specification ";" ;
protected_type_declaration ::= "protected" "type" defining_identifier known_discriminant_part? "is" protected_definition ";" ;
range_attribute_reference ::= prefix "'" range_attribute_designator ;
function_call ::= function_name | (function_prefix actual_parameter_part) ;
conditional_entry_call ::= "select" entry_call_alternative "else" sequence_of_statements "end" "select" ";" ;
real_range_specification ::= "range" static_simple_expression ".." static_simple_expression ;
explicit_dereference ::= name "." "all" ;
use_type_clause ::= "use" "type" subtype_mark ("," subtype_mark)* ";" ;
exception_handler ::= "when" (choice_parameter_specification ":")? exception_choice ("|" exception_choice)* "=>" sequence_of_statements ;
range_attribute_designator ::= "Range" ("(" static_expression ")")? ;
selected_component ::= prefix "." selector_name ;
derived_type_definition ::= "abstract"? "new" parent_subtype_indication record_extension_part? ;
signed_integer_type_definition ::= "range" static_simple_expression ".." static_simple_expression ;
entry_body_formal_part ::= ("(" entry_index_specification ")")? parameter_profile ;
named_array_aggregate ::= "(" array_component_association ("," array_component_association)* ")" ;
loop_parameter_specification ::= defining_identifier "in" "reverse"? discrete_subtype_definition ;
record_aggregate ::= "(" record_component_association_list ")" ;
formal_subprogram_declaration ::= "with" subprogram_specification ("is" subprogram_default)? ";" ;
entry_body ::= "entry" defining_identifier entry_body_formal_part entry_barrier "is" declarative_part "begin" handled_sequence_of_statements "end" entry_identifier? ";" ;
factor ::= (primary ("**" primary)?) | ("abs" primary) | ("not" primary) ;
sequence_of_statements ::= statement statement* ;
task_definition ::= task_item* ("private" task_item*)? "end" task_identifier? ;
mod_clause ::= "at" "mod" static_expression ";" ;
record_component_association_list ::= (record_component_association ("," record_component_association)*) | ("null" "record") ;
selective_accept ::= "select" guard? select_alternative ("or" guard? select_alternative)* ("else" sequence_of_statements)? "end" "select" ";" ;
subprogram_specification ::= ("procedure" defining_program_unit_name parameter_profile) | ("function" defining_designator parameter_and_result_profile) ;
iteration_scheme ::= ("while" condition) | ("for" loop_parameter_specification) ;
formal_type_declaration ::= "type" defining_identifier discriminant_part? "is" formal_type_definition ";" ;
simple_expression ::= unary_adding_operator? term (binary_adding_operator term)* ;
parameter_and_result_profile ::= formal_part? "return" subtype_mark ;
formal_part ::= "(" parameter_specification (";" parameter_specification)* ")" ;
modular_type_definition ::= "mod" static_expression ;
subtype_indication ::= subtype_mark constraint? ;
use_package_clause ::= "use" package_name ("," package_name)* ";" ;
block_statement ::= (block_statement_identifier ":")? ("declare" declarative_part)? "begin" handled_sequence_of_statements "end" block_identifier? ";" ;
pragma ::= "pragma" identifier ("(" pragma_argument_association ("," pragma_argument_association)* ")")? ";" ;
formal_package_actual_part ::= ("(" "<>" ")") | (generic_actual_part?) ;
entry_call_statement ::= entry_name actual_parameter_part? ";" ;
type_conversion ::= (subtype_mark "(" expression ")") | (subtype_mark "(" name ")") ;
component_choice_list ::= (component_selector_name ("|" component_selector_name)*) | "others" ;
component_declaration ::= defining_identifier_list ":" component_definition (":=" default_expression)? ";" ;
discrete_choice_list ::= discrete_choice ("|" discrete_choice)* ;
subtype_declaration ::= "subtype" defining_identifier "is" subtype_indication ";" ;
private_type_declaration ::= "type" defining_identifier discriminant_part? "is" ("abstract"? "tagged")? "limited"? "private" ";" ;
indexed_component ::= prefix "(" expression ("," expression)* ")" ;
requeue_statement ::= "requeue" entry_name ("with" "abort")? ";" ;
positional_array_aggregate ::= ("(" expression "," expression ("," expression)* ")") | ("(" expression ("," expression)* "," "others" "=>" expression ")") ;
entry_declaration ::= "entry" defining_identifier ("(" discrete_subtype_definition ")")? parameter_profile ";" ;
formal_floating_point_definition ::= "digits" "<>" ;
enumeration_representation_clause ::= "for" first_subtype_local_name "use" enumeration_aggregate ";" ;
discriminant_specification ::= (defining_identifier_list ":" subtype_mark (":=" default_expression)?) | (defining_identifier_list ":" access_definition (":=" default_expression)?) ;
discriminant_association ::= (discriminant_selector_name ("|" discriminant_selector_name)* "=>")? expression ;
pragma_argument_association ::= ((pragma_argument_identifier "=>")? name) | ((pragma_argument_identifier "=>")? expression) ;
abort_statement ::= "abort" task_name ("," task_name)* ";" ;
case_statement ::= "case" expression "is" case_statement_alternative case_statement_alternative* "end" "case" ";" ;
return_statement ::= "return" expression? ";" ;
range_constraint ::= "range" range_definition ;
generic_renaming_declaration ::= ("generic" "package" defining_program_unit_name "renames" generic_package_name ";") | ("generic" "procedure" defining_program_unit_name "renames" generic_procedure_name ";") | ("generic" "function" defining_program_unit_name "renames" generic_function_name ";") ;
task_body ::= "task" body defining_identifier "is" declarative_part "begin" handled_sequence_of_statements "end" task_identifier? ";" ;
qualified_expression ::= (subtype_mark "'" "(" expression ")") | (subtype_mark "'" aggregate) ;
generic_association ::= (generic_formal_parameter_selector_name "=>")? explicit_generic_actual_parameter ;
triggering_alternative ::= triggering_statement sequence_of_statements? ;
library_item ::= ("private"? library_unit_declaration) | library_unit_body | ("private"? library_unit_renaming_declaration) ;
designator ::= ((parent_unit_name ".")? identifier) | operator_symbol ;
timed_entry_call ::= "select" entry_call_alternative "or" delay_alternative "end" "select" ";" ;
delay_until_statement ::= "delay" "until" delay_expression ";" ;
package_renaming_declaration ::= "package" defining_program_unit_name renamespackage_name ";" ;
case_statement_alternative ::= "when" discrete_choice_list "=>" sequence_of_statements ;
access_definition ::= "access" subtype_mark ;
allocator ::= ("new" subtype_indication) | ("new" qualified_expression) ;
entry_index_specification ::= "for" defining_identifier "in" discrete_subtype_definition ;
with_clause ::= "with" library_unit_name ("," library_unit_name)* ";" ;
formal_derived_type_definition ::= "abstract"? "new" subtype_mark ("with" "private")? ;
primary ::= numeric_literal | "null" | string_literal | aggregate | name | qualified_expression | allocator | ("(" expression ")") ;
package_declaration ::= package_specification ";" ;
record_definition ::= ("record" component_list "end" "record") | ("null" "record") ;
--------------------ada::lncs-2219.bgf--------------------
subprogram_declaration ::= subprogram_specification ";" ;
relation ::= (simple_expression (relational_operator simple_expression)?) | (simple_expression "not"? "in" range) | (simple_expression "not"? "in" subtype_mark) ;
at_clause ::= "for" direct_name "use" "at" expression ";" ;
discriminant_constraint ::= "(" discriminant_association ("," discriminant_association)* ")" ;
package_body ::= "package" "body" defining_program_unit_name "is" declarative_part ("begin" handled_sequence_of_statements)? "end" ((parent_unit_name ".")? identifier)? ";" ;
attribute_definition_clause ::= ("for" local_name "'" attribute_designator "use" expression ";") | ("for" local_name "'" attribute_designator "use" name ";") ;
delay_relative_statement ::= "delay" delay_expression ";" ;
accept_statement ::= "accept" entry_direct_name ("(" entry_index ")")? parameter_profile ("do" handled_sequence_of_statements "end" entry_identifier?)? ";" ;
accept_alternative ::= accept_statement sequence_of_statements? ;
label ::= "<<" label_statement_identifier ">>" ;
formal_modular_type_definition ::= "mod" "<>" ;
component_clause ::= component_local_name "at" position "range" first_bit ".." last_bit ";" ;
task_body_stub ::= "task" "body" defining_identifier "is" "separate" ";" ;
delay_alternative ::= delay_statement sequence_of_statements? ;
subprogram_body_stub ::= subprogram_specification "is" "separate" ";" ;
parameter_specification ::= (defining_identifier_list ":" mode subtype_mark (":=" default_expression)?) | (defining_identifier_list ":" access_definition (":=" default_expression)?) ;
defining_identifier_list ::= defining_identifier ("," defining_identifier)* ;
parameter_association ::= (formal_parameter_selector_name "=>")? explicit_actual_parameter ;
entry_barrier ::= "when" condition ;
generic_instantiation ::= ("package" defining_program_unit_name "is" "new" generic_package_name generic_actual_part? ";") | ("procedure" defining_program_unit_name "is" "new" generic_procedure_name generic_actual_part? ";") | ("function" defining_designator "is" "new" generic_function_name generic_actual_part? ";") ;
access_to_subprogram_definition ::= ("access" "protected"? "procedure" parameter_profile) | ("access" "protected"? "function" parameter_and_result_profile) ;
local_name ::= direct_name | (direct_name "'" attribute_designator) | library_unit_name ;
raise_statement ::= "raise" exception_name? ";" ;
generic_formal_part ::= "generic" (generic_formal_parameter_declaration | use_clause)* ;
unconstrained_array_definition ::= "array" "(" index_subtype_definition ("," index_subtype_definition)* ")" "of" component_definition ;
protected_body_stub ::= "protected" "body" defining_identifier "is" "separate" ";" ;
array_component_association ::= discrete_choice_list "=>" expression ;
single_task_declaration ::= "task" defining_identifier ("is" task_definition)? ";" ;
digits_constraint ::= "digits" static_expression range_constraint? ;
component_definition ::= "aliased"? subtype_indication ;
asynchronous_select ::= "select" triggering_alternative "then" "abort" abortable_part "end" "select" ";" ;
record_component_association ::= (component_choice_list "=>")? expression ;
subprogram_renaming_declaration ::= subprogram_specification "renames" callable_entity_name ";" ;
terminate_alternative ::= "terminate" ";" ;
if_statement ::= "if" condition "then" sequence_of_statements ("elsif" condition "then" sequence_of_statements)* ("else" sequence_of_statements)? "end" "if" ";" ;
restriction ::= restriction_identifier | (restriction_parameter_identifier "=>" expression) ;
formal_decimal_fixed_point_definition ::= "delta" "<>" "digits" "<>" ;
formal_object_declaration ::= defining_identifier_list ":" mode subtype_mark (":=" default_expression)? ";" ;
package_specification ::= "package" defining_program_unit_name "is" basic_declarative_item* ("private" basic_declarative_item*)? "end" ((parent_unit_name ".")? identifier)? ;
ordinary_fixed_point_definition ::= "delta" static_expression real_range_specification ;
index_subtype_definition ::= subtype_mark "range" "<>" ;
delta_constraint ::= "delta" static_expression range_constraint? ;
subunit ::= "separate" "(" parent_unit_name ")" proper_body ;
constrained_array_definition ::= "array" "(" discrete_subtype_definition ("," discrete_subtype_definition)* ")" "of" component_definition ;
decimal_literal ::= numeral ("." numeral)? exponent? ;
extension_aggregate ::= "(" ancestor_part "with" record_component_association_list ")" ;
private_extension_declaration ::= "type" defining_identifier discriminant_part? "is" "abstract"? "new" ancestor_subtype_indication "with" "private" ";" ;
subprogram_body ::= subprogram_specification "is" declarative_part "begin" handled_sequence_of_statements "end" designator? ";" ;
abstract_subprogram_declaration ::= subprogram_specification "is" "abstract" ";" ;
procedure_call_statement ::= (procedure_name ";") | (procedure_prefix actual_parameter_part ";") ;
null_statement ::= "null" ";" ;
incomplete_type_declaration ::= "type" defining_identifier discriminant_part? ";" ;
object_renaming_declaration ::= defining_identifier ":" subtype_mark "renames" object_name ";" ;
record_representation_clause ::= "for" first_subtype_local_name "use" "record" mod_clause? component_clause* "end" "record" ";" ;
single_protected_declaration ::= "protected" defining_identifier "is" protected_definition ";" ;
formal_package_declaration ::= "with" "package" defining_identifier "is" "new" generic_package_name formal_package_actual_part ";" ;
handled_sequence_of_statements ::= sequence_of_statements ("exception" exception_handler exception_handler*)? ;
exponent ::= ("E" "+"? numeral) | ("E" "-" numeral) ;
identifier ::= identifier_letter (underline? letter_or_digit)* ;
exception_renaming_declaration ::= defining_identifier ":" "exception" "renames" exception_name ";" ;
guard ::= "when" condition "=>" ;
full_type_declaration ::= ("type" defining_identifier known_discriminant_part? "is" type_definition ";") | task_type_declaration | protected_type_declaration ;
formal_signed_integer_type_definition ::= "range" "<>" ;
defining_program_unit_name ::= (parent_unit_name ".")? defining_identifier ;
mode ::= ("in"?) | ("in" "out") | "out" ;
record_extension_part ::= "with" record_definition ;
component_list ::= (component_item component_item*) | (component_item* variant_part) | ("null" ";") ;
code_statement ::= qualified_expression ";" ;
generic_actual_part ::= "(" generic_association ("," generic_association)* ")" ;
actual_parameter_part ::= "(" parameter_association ("," parameter_association)* ")" ;
generic_package_declaration ::= generic_formal_part package_specification ";" ;
character_literal ::= "'" graphic_character "'" ;
expression ::= (relation ("and" relation)*) | (relation ("or" relation)*) | (relation ("xor" relation)*) | (relation ("and" "then" relation)*) | (relation ("or" "else" relation)*) ;
attribute_designator ::= (identifier ("(" static_expression ")")?) | "Access" | "Delta" | "Digits" ;
known_discriminant_part ::= "(" discriminant_specification (";" discriminant_specification)* ")" ;
loop_statement ::= (loop_statement_identifier ":")? iteration_scheme? "loop" sequence_of_statements "end" "loop" loop_identifier? ";" ;
protected_body ::= "protected" "body" defining_identifier "is" protected_operation_item* "end" protected_identifier? ";" ;
goto_statement ::= "goto" label_name ";" ;
slice ::= prefix "(" discrete_range ")" ;
based_numeral ::= extended_digit (underline? extended_digit)* ;
exit_statement ::= "exit" loop_name? ("when" condition)? ";" ;
exception_declaration ::= defining_identifier_list ":" "exception" ";" ;
record_type_definition ::= ("abstract"? "tagged")? "limited"? record_definition ;
access_to_object_definition ::= "access" general_access_modifier? subtype_indication ;
variant ::= "when" discrete_choice_list "=>" component_list ;
protected_definition ::= protected_operation_declaration* ("private" protected_element_declaration*)? "end" protected_identifier? ;
number_declaration ::= defining_identifier_list ":" "constant" ":=" static_expression ";" ;
string_literal ::= """ string_element* """ ;
compilation_unit ::= (context_clause library_item) | (context_clause subunit) ;
enumeration_type_definition ::= "(" enumeration_literal_specification ("," enumeration_literal_specification)* ")" ;
assignment_statement ::= variable_name ":=" expression ";" ;
decimal_fixed_point_definition ::= "delta" static_expression "digits" static_expression real_range_specification? ;
floating_point_definition ::= "digits" static_expression real_range_specification? ;
formal_ordinary_fixed_point_definition ::= "delta" "<>" ;
object_declaration ::= (defining_identifier_list ":" "aliased"? "constant"? subtype_indication (":=" expression)? ";") | (defining_identifier_list ":" "aliased"? "constant"? array_type_definition (":=" expression)? ";") | single_task_declaration | single_protected_declaration ;
entry_call_alternative ::= entry_call_statement sequence_of_statements? ;
package_body_stub ::= "package" "body" defining_identifier "is" "separate" ";" ;
task_type_declaration ::= "task" "type" defining_identifier known_discriminant_part? ("is" task_definition)? ";" ;
statement ::= (label* simple_statement) | (label* compound_statement) ;
variant_part ::= "case" discriminant_direct_name "is" variant+ "end" "case" ";" ;
formal_private_type_definition ::= ("abstract"? "tagged")? "limited"? "private" ;
term ::= factor (multiplying_operator factor)* ;
index_constraint ::= "(" discrete_range ("," discrete_range)* ")" ;
attribute_reference ::= prefix "'" attribute_designator ;
generic_subprogram_declaration ::= generic_formal_part subprogram_specification ";" ;
protected_type_declaration ::= "protected" "type" defining_identifier known_discriminant_part? "is" protected_definition ";" ;
range_attribute_reference ::= prefix "'" range_attribute_designator ;
function_call ::= function_name | (function_prefix actual_parameter_part) ;
conditional_entry_call ::= "select" entry_call_alternative "else" sequence_of_statements "end" "select" ";" ;
real_range_specification ::= "range" static_simple_expression ".." static_simple_expression ;
explicit_dereference ::= name "." "all" ;
comment ::= "-" "-" non_end_of_line_character* ;
use_type_clause ::= "use" "type" subtype_mark ("," subtype_mark)* ";" ;
exception_handler ::= "when" (choice_parameter_specification ":")? exception_choice ("|" exception_choice)* "=>" sequence_of_statements ;
range_attribute_designator ::= "Range" ("(" static_expression ")")? ;
selected_component ::= prefix "." selector_name ;
derived_type_definition ::= "abstract"? "new" parent_subtype_indication record_extension_part? ;
signed_integer_type_definition ::= "range" static_simple_expression ".." static_simple_expression ;
entry_body_formal_part ::= ("(" entry_index_specification ")")? parameter_profile ;
named_array_aggregate ::= "(" array_component_association ("," array_component_association)* ")" ;
loop_parameter_specification ::= defining_identifier "in" "reverse"? discrete_subtype_definition ;
record_aggregate ::= "(" record_component_association_list ")" ;
formal_subprogram_declaration ::= "with" subprogram_specification ("is" subprogram_default)? ";" ;
entry_body ::= "entry" defining_identifier entry_body_formal_part entry_barrier "is" declarative_part "begin" handled_sequence_of_statements "end" entry_identifier? ";" ;
factor ::= (primary ("**" primary)?) | ("abs" primary) | ("not" primary) ;
sequence_of_statements ::= statement statement* ;
task_definition ::= task_item* ("private" task_item*)? "end" task_identifier? ;
mod_clause ::= "at" "mod" static_expression ";" ;
record_component_association_list ::= (record_component_association ("," record_component_association)*) | ("null" "record") ;
selective_accept ::= "select" guard? select_alternative ("or" guard? select_alternative)* ("else" sequence_of_statements)? "end" "select" ";" ;
subprogram_specification ::= ("procedure" defining_program_unit_name parameter_profile) | ("function" defining_designator parameter_and_result_profile) ;
iteration_scheme ::= ("while" condition) | ("for" loop_parameter_specification) ;
formal_type_declaration ::= "type" defining_identifier discriminant_part? "is" formal_type_definition ";" ;
simple_expression ::= unary_adding_operator? term (binary_adding_operator term)* ;
parameter_and_result_profile ::= formal_part? "return" subtype_mark ;
formal_part ::= "(" parameter_specification (";" parameter_specification)* ")" ;
modular_type_definition ::= "mod" static_expression ;
subtype_indication ::= subtype_mark constraint? ;
use_package_clause ::= "use" package_name ("," package_name)* ";" ;
block_statement ::= (block_statement_identifier ":")? ("declare" declarative_part)? "begin" handled_sequence_of_statements "end" block_identifier? ";" ;
range ::= range_attribute_reference | (simple_expression ".." simple_expression) ;
pragma ::= "pragma" identifier ("(" pragma_argument_association ("," pragma_argument_association)* ")")? ";" ;
entry_call_statement ::= entry_name actual_parameter_part? ";" ;
type_conversion ::= (subtype_mark "(" expression ")") | (subtype_mark "(" name ")") ;
component_choice_list ::= (component_selector_name ("|" component_selector_name)*) | "others" ;
component_declaration ::= defining_identifier_list ":" component_definition (":=" default_expression)? ";" ;
discrete_choice_list ::= discrete_choice ("|" discrete_choice)* ;
subtype_declaration ::= "subtype" defining_identifier "is" subtype_indication ";" ;
private_type_declaration ::= "type" defining_identifier discriminant_part? "is" ("abstract"? "tagged")? "limited"? "private" ";" ;
indexed_component ::= prefix "(" expression ("," expression)* ")" ;
requeue_statement ::= "requeue" entry_name ("with" "abort")? ";" ;
positional_array_aggregate ::= ("(" expression "," expression ("," expression)* ")") | ("(" expression ("," expression)* "," "others" "=>" expression ")") ;
entry_declaration ::= "entry" defining_identifier ("(" discrete_subtype_definition ")")? parameter_profile ";" ;
formal_floating_point_definition ::= "digits" "<>" ;
enumeration_representation_clause ::= "for" first_subtype_local_name "use" enumeration_aggregate ";" ;
discriminant_specification ::= (defining_identifier_list ":" subtype_mark (":=" default_expression)?) | (defining_identifier_list ":" access_definition (":=" default_expression)?) ;
discriminant_association ::= (discriminant_selector_name ("|" discriminant_selector_name)* "=>")? expression ;
based_literal ::= base "#" based_numeral ("." based_numeral)? "#" exponent? ;
pragma_argument_association ::= ((pragma_argument_identifier "=>")? name) | ((pragma_argument_identifier "=>")? expression) ;
abort_statement ::= "abort" task_name ("," task_name)* ";" ;
case_statement ::= "case" expression "is" case_statement_alternative case_statement_alternative* "end" "case" ";" ;
return_statement ::= "return" expression? ";" ;
range_constraint ::= "range" range ;
generic_renaming_declaration ::= ("generic" "package" defining_program_unit_name "renames" generic_package_name ";") | ("generic" "procedure" defining_program_unit_name "renames" generic_procedure_name ";") | ("generic" "function" defining_program_unit_name "renames" generic_function_name ";") ;
numeral ::= digit (underline? digit)* ;
task_body ::= "task" "body" defining_identifier "is" declarative_part "begin" handled_sequence_of_statements "end" task_identifier? ";" ;
qualified_expression ::= (subtype_mark "'(" expression ")") | (subtype_mark "'" aggregate) ;
generic_association ::= (generic_formal_parameter_selector_name "=>")? explicit_generic_actual_parameter ;
triggering_alternative ::= triggering_statement sequence_of_statements? ;
library_item ::= ("private"? library_unit_declaration) | library_unit_body | ("private"? library_unit_renaming_declaration) ;
designator ::= ((parent_unit_name ".")? identifier) | operator_symbol ;
timed_entry_call ::= "select" entry_call_alternative "or" delay_alternative "end" "select" ";" ;
delay_until_statement ::= "delay" "until" delay_expression ";" ;
package_renaming_declaration ::= "package" defining_program_unit_name "renames" package_name ";" ;
case_statement_alternative ::= "when" discrete_choice_list "=>" sequence_of_statements ;
access_definition ::= "access" subtype_mark ;
allocator ::= ("new" subtype_indication) | ("new" qualified_expression) ;
entry_index_specification ::= "for" defining_identifier "in" discrete_subtype_definition ;
with_clause ::= "with" library_unit_name ("," library_unit_name)* ";" ;
formal_derived_type_definition ::= "abstract"? "new" subtype_mark ("with" "private")? ;
primary ::= numeric_literal | "null" | string_literal | aggregate | name | qualified_expression | allocator | ("(" expression ")") ;
package_declaration ::= package_specification ";" ;
record_definition ::= ("record" component_list "end" "record") | ("null" "record") ;
--------------------ada::lncs-4348.bgf--------------------
subprogram_declaration ::= overriding_indicator? subprogram_specification ";" ;
relation ::= (simple_expression (relational_operator simple_expression)?) | (simple_expression "not"? "in" range) | (simple_expression "not"? "in" subtype_mark) ;
at_clause ::= "for" direct_name "use" "at" expression ";" ;
discriminant_constraint ::= "(" discriminant_association ("," discriminant_association)* ")" ;
package_body ::= "package" "body" defining_program_unit_name "is" declarative_part ("begin" handled_sequence_of_statements)? "end" ((parent_unit_name ".")? identifier)? ";" ;
attribute_definition_clause ::= ("for" local_name "'" attribute_designator "use" expression ";") | ("for" local_name "'" attribute_designator "use" name ";") ;
delay_relative_statement ::= "delay" delay_expression ";" ;
accept_statement ::= "accept" entry_direct_name ("(" entry_index ")")? parameter_profile ("do" handled_sequence_of_statements "end" entry_identifier?)? ";" ;
nonlimited_with_clause ::= "private"? "with" library_unit_name ("," library_unit_name)* ";" ;
accept_alternative ::= accept_statement sequence_of_statements? ;
label ::= "<<" label_statement_identifier ">>" ;
formal_modular_type_definition ::= "mod" "<>" ;
component_clause ::= component_local_name "at" position "range" first_bit ".." last_bit ";" ;
task_body_stub ::= "task" "body" defining_identifier "is" "separate" ";" ;
delay_alternative ::= delay_statement sequence_of_statements? ;
subprogram_body_stub ::= overriding_indicator? subprogram_specification "is" "separate" ";" ;
parameter_specification ::= (defining_identifier_list ":" mode null_exclusion? subtype_mark (":=" default_expression)?) | (defining_identifier_list ":" access_definition (":=" default_expression)?) ;
defining_identifier_list ::= defining_identifier ("," defining_identifier)* ;
parameter_association ::= (formal_parameter_selector_name "=>")? explicit_actual_parameter ;
entry_barrier ::= "when" condition ;
generic_instantiation ::= ("package" defining_program_unit_name "is" "new" generic_package_name generic_actual_part? ";") | (overriding_indicator? "procedure" defining_program_unit_name "is" "new" generic_procedure_name generic_actual_part? ";") | (overriding_indicator? "function" defining_designator "is" "new" generic_function_name generic_actual_part? ";") ;
access_to_subprogram_definition ::= ("access" "protected"? "procedure" parameter_profile) | ("access" "protected"? "function" parameter_and_result_profile) ;
interface_list ::= interface_subtype_mark ("and" interface_subtype_mark)* ;
limited_with_clause ::= "limited" "private"? "with" library_unit_name ("," library_unit_name)* ";" ;
local_name ::= direct_name | (direct_name "'" attribute_designator) | library_unit_name ;
raise_statement ::= ("raise" ";") | ("raise" exception_name ("with" string_expression)? ";") ;
function_specification ::= "function" defining_designator parameter_and_result_profile ;
generic_formal_part ::= "generic" (generic_formal_parameter_declaration | use_clause)* ;
unconstrained_array_definition ::= "array" "(" index_subtype_definition ("," index_subtype_definition)* ")" "of" component_definition ;
protected_body_stub ::= "protected" "body" defining_identifier "is" "separate" ";" ;
array_component_association ::= (discrete_choice_list "=>" expression) | (discrete_choice_list "=><>") ;
overriding_indicator ::= "not"? "overriding" ;
single_task_declaration ::= "task" defining_identifier ("is" ("new" interface_list "with")? task_definition)? ";" ;
digits_constraint ::= "digits" static_expression range_constraint? ;
component_definition ::= ("aliased"? subtype_indication) | ("aliased"? access_definition) ;
asynchronous_select ::= "select" triggering_alternative "then" "abort" abortable_part "end" "select" ";" ;
record_component_association ::= ((component_choice_list "=>")? expression) | (component_choice_list "=><>") ;
subprogram_renaming_declaration ::= overriding_indicator? subprogram_specification "renames" callable_entity_name ";" ;
terminate_alternative ::= "terminate" ";" ;
if_statement ::= "if" condition "then" sequence_of_statements ("elsif" condition "then" sequence_of_statements)* ("else" sequence_of_statements)? "end" "if" ";" ;
restriction ::= restriction_identifier | (restriction_parameter_identifier "=>" restriction_parameter_argument) ;
formal_decimal_fixed_point_definition ::= "delta" "<>" "digits" "<>" ;
formal_object_declaration ::= defining_identifier_list ":" mode null_exclusion? subtype_mark (":=" default_expression)? ";" defining_identifier_list ":" mode access_definition (":=" default_expression)? ";" ;
package_specification ::= "package" defining_program_unit_name "is" basic_declarative_item* ("private" basic_declarative_item*)? "end" ((parent_unit_name ".")? identifier)? ;
ordinary_fixed_point_definition ::= "delta" static_expression real_range_specification ;
index_subtype_definition ::= subtype_mark "range" "<>" ;
delta_constraint ::= "delta" static_expression range_constraint? ;
subunit ::= "separate" "(" parent_unit_name ")" proper_body ;
constrained_array_definition ::= "array" "(" discrete_subtype_definition ("," discrete_subtype_definition)* ")" "of" component_definition ;
decimal_literal ::= numeral ("." numeral)? exponent? ;
extension_aggregate ::= "(" ancestor_part "with" record_component_association_list ")" ;
private_extension_declaration ::= "type" defining_identifier discriminant_part? "is" "abstract"? ("limited" | "synchronized")? "new" ancestor_subtype_indication ("and" interface_list)? "with" "private" ";" ;
subprogram_body ::= overriding_indicator? subprogram_specification "is" declarative_part "begin" handled_sequence_of_statements "end" designator? ";" ;
abstract_subprogram_declaration ::= overriding_indicator? subprogram_specification "is" "abstract" ";" ;
procedure_call_statement ::= (procedure_name ";") | (procedure_prefix actual_parameter_part ";") ;
formal_package_association ::= generic_association | (generic_formal_parameter_selector_name "=><>") ;
null_statement ::= "null" ";" ;
incomplete_type_declaration ::= "type" defining_identifier discriminant_part? ("is" "tagged")? ";" ;
object_renaming_declaration ::= (defining_identifier ":" null_exclusion? subtype_mark "renames" object_name ";") | (defining_identifier ":" access_definition "renames" object_name ";") ;
record_representation_clause ::= "for" first_subtype_local_name "use" "record" mod_clause? component_clause* "end" "record" ";" ;
single_protected_declaration ::= "protected" defining_identifier "is" ("new" interface_list "with")? protected_definition ";" ;
formal_package_declaration ::= "with" "package" defining_identifier "is" "new" generic_package_name formal_package_actual_part ";" ;
handled_sequence_of_statements ::= sequence_of_statements ("exception" exception_handler exception_handler*)? ;
exponent ::= ("E" "+"? numeral) | ("E" "-" numeral) ;
formal_concrete_subprogram_declaration ::= "with" subprogram_specification ("is" subprogram_default)? ";" ;
identifier ::= identifier_start (identifier_start | identifier_extend)* ;
exception_renaming_declaration ::= defining_identifier ":" "exception" "renames" exception_name ";" ;
guard ::= "when" condition "=>" ;
full_type_declaration ::= ("type" defining_identifier known_discriminant_part? "is" type_definition ";") | task_type_declaration | protected_type_declaration ;
formal_signed_integer_type_definition ::= "range" "<>" ;
defining_program_unit_name ::= (parent_unit_name ".")? defining_identifier ;
mode ::= ("in"?) | ("in" "out") | "out" ;
record_extension_part ::= "with" record_definition ;
component_list ::= (component_item component_item*) | (component_item* variant_part) | ("null" ";") ;
code_statement ::= qualified_expression ";" ;
access_type_definition ::= (null_exclusion? access_to_object_definition) | (null_exclusion? access_to_subprogram_definition) ;
generic_actual_part ::= "(" generic_association ("," generic_association)* ")" ;
actual_parameter_part ::= "(" parameter_association ("," parameter_association)* ")" ;
generic_package_declaration ::= generic_formal_part package_specification ";" ;
character_literal ::= "'" graphic_character "'" ;
expression ::= (relation ("and" relation)*) | (relation ("or" relation)*) | (relation ("xor" relation)*) | (relation ("and" "then" relation)*) | (relation ("or" "else" relation)*) ;
procedure_specification ::= "procedure" defining_program_unit_name parameter_profile ;
attribute_designator ::= (identifier ("(" static_expression ")")?) | "Access" | "Delta" | "Digits" ;
known_discriminant_part ::= "(" discriminant_specification (";" discriminant_specification)* ")" ;
loop_statement ::= (loop_statement_identifier ":")? iteration_scheme? "loop" sequence_of_statements "end" "loop" loop_identifier? ";" ;
protected_body ::= "protected" "body" defining_identifier "is" protected_operation_item* "end" protected_identifier? ";" ;
goto_statement ::= "goto" label_name ";" ;
slice ::= prefix "(" discrete_range ")" ;
based_numeral ::= extended_digit (underline? extended_digit)* ;
exit_statement ::= "exit" loop_name? ("when" condition)? ";" ;
exception_declaration ::= defining_identifier_list ":" "exception" ";" ;
record_type_definition ::= ("abstract"? "tagged")? "limited"? record_definition ;
access_to_object_definition ::= "access" general_access_modifier? subtype_indication ;
variant ::= "when" discrete_choice_list "=>" component_list ;
protected_definition ::= protected_operation_declaration* ("private" protected_element_declaration*)? "end" protected_identifier? ;
number_declaration ::= defining_identifier_list ":" "constant" ":=" static_expression ";" ;
string_literal ::= """ string_element* """ ;
compilation_unit ::= (context_clause library_item) | (context_clause subunit) ;
enumeration_type_definition ::= "(" enumeration_literal_specification ("," enumeration_literal_specification)* ")" ;
assignment_statement ::= variable_name ":=" expression ";" ;
decimal_fixed_point_definition ::= "delta" static_expression "digits" static_expression real_range_specification? ;
floating_point_definition ::= "digits" static_expression real_range_specification? ;
formal_ordinary_fixed_point_definition ::= "delta" "<>" ;
object_declaration ::= (defining_identifier_list ":" "aliased"? "constant"? subtype_indication (":=" expression)? ";") | (defining_identifier_list ":" "aliased"? "constant"? access_definition (":=" expression)? ";") | (defining_identifier_list ":" "aliased"? "constant"? array_type_definition (":=" expression)? ";") | single_task_declaration | single_protected_declaration ;
entry_call_alternative ::= procedure_or_entry_call sequence_of_statements? ;
package_body_stub ::= "package" "body" defining_identifier "is" "separate" ";" ;
interface_type_definition ::= ("limited" | "task" | "protected" | "synchronized")? "interface" ("and" interface_list)? ;
task_type_declaration ::= "task" "type" defining_identifier known_discriminant_part? ("is" ("new" interface_list "with")? task_definition)? ";" ;
statement ::= (label* simple_statement) | (label* compound_statement) ;
variant_part ::= "case" discriminant_direct_name "is" variant+ "end" "case" ";" ;
formal_abstract_subprogram_declaration ::= "with" subprogram_specification "is" "abstract" subprogram_default? ";" ;
formal_private_type_definition ::= ("abstract"? "tagged")? "limited"? "private" ;
term ::= factor (multiplying_operator factor)* ;
index_constraint ::= "(" discrete_range ("," discrete_range)* ")" ;
attribute_reference ::= prefix "'" attribute_designator ;
generic_subprogram_declaration ::= generic_formal_part subprogram_specification ";" ;
protected_type_declaration ::= "protected" "type" defining_identifier known_discriminant_part? "is" ("new" interface_list "with")? protected_definition ";" ;
extended_return_statement ::= "return" defining_identifier ":" "aliased"? return_subtype_indication (":=" expression)? ("do" handled_sequence_of_statements "end" "return")? ";" ;
range_attribute_reference ::= prefix "'" range_attribute_designator ;
function_call ::= function_name | (function_prefix actual_parameter_part) ;
conditional_entry_call ::= "select" entry_call_alternative "else" sequence_of_statements "end" "select" ";" ;
real_range_specification ::= "range" static_simple_expression ".." static_simple_expression ;
explicit_dereference ::= name "." "all" ;
comment ::= "-" "-" non_end_of_line_character* ;
use_type_clause ::= "use" "type" subtype_mark ("," subtype_mark)* ";" ;
exception_handler ::= "when" (choice_parameter_specification ":")? exception_choice ("|" exception_choice)* "=>" sequence_of_statements ;
selected_component ::= prefix "." selector_name ;
range_attribute_designator ::= "Range" ("(" static_expression ")")? ;
null_procedure_declaration ::= overriding_indicator? procedure_specification "is" "null" ";" ;
derived_type_definition ::= "abstract"? "limited"? "new" parent_subtype_indication (("and" interface_list)? record_extension_part)? ;
signed_integer_type_definition ::= "range" static_simple_expression ".." static_simple_expression ;
entry_body_formal_part ::= ("(" entry_index_specification ")")? parameter_profile ;
named_array_aggregate ::= "(" array_component_association ("," array_component_association)* ")" ;
loop_parameter_specification ::= defining_identifier "in" "reverse"? discrete_subtype_definition ;
record_aggregate ::= "(" record_component_association_list ")" ;
entry_body ::= "entry" defining_identifier entry_body_formal_part entry_barrier "is" declarative_part "begin" handled_sequence_of_statements "end" entry_identifier? ";" ;
factor ::= (primary ("**" primary)?) | ("abs" primary) | ("not" primary) ;
sequence_of_statements ::= statement statement* ;
task_definition ::= task_item* ("private" task_item*)? "end" task_identifier? ;
mod_clause ::= "at" "mod" static_expression ";" ;
record_component_association_list ::= (record_component_association ("," record_component_association)*) | ("null" "record") ;
selective_accept ::= "select" guard? select_alternative ("or" guard? select_alternative)* ("else" sequence_of_statements)? "end" "select" ";" ;
iteration_scheme ::= ("while" condition) | ("for" loop_parameter_specification) ;
formal_type_declaration ::= "type" defining_identifier discriminant_part? "is" formal_type_definition ";" ;
simple_expression ::= unary_adding_operator? term (binary_adding_operator term)* ;
parameter_and_result_profile ::= (formal_part? "return" null_exclusion? subtype_mark) | (formal_part? "return" access_definition) ;
formal_part ::= "(" parameter_specification (";" parameter_specification)* ")" ;
modular_type_definition ::= "mod" static_expression ;
subtype_indication ::= null_exclusion? subtype_mark constraint? ;
use_package_clause ::= "use" package_name ("," package_name)* ";" ;
block_statement ::= (block_statement_identifier ":")? ("declare" declarative_part)? "begin" handled_sequence_of_statements "end" block_identifier? ";" ;
range ::= range_attribute_reference | (simple_expression ".." simple_expression) ;
pragma ::= "pragma" identifier ("(" pragma_argument_association ("," pragma_argument_association)* ")")? ";" ;
formal_package_actual_part ::= ("(" ("others" "=>")? "<>)") | (generic_actual_part?) | ("(" formal_package_association ("," formal_package_association)* ("," "others" "=><>")? ")") ;
entry_call_statement ::= entry_name actual_parameter_part? ";" ;
type_conversion ::= (subtype_mark "(" expression ")") | (subtype_mark "(" name ")") ;
component_choice_list ::= (component_selector_name ("|" component_selector_name)*) | "others" ;
component_declaration ::= defining_identifier_list ":" component_definition (":=" default_expression)? ";" ;
discrete_choice_list ::= discrete_choice ("|" discrete_choice)* ;
subtype_declaration ::= "subtype" defining_identifier "is" subtype_indication ";" ;
private_type_declaration ::= "type" defining_identifier discriminant_part? "is" ("abstract"? "tagged")? "limited"? "private" ";" ;
indexed_component ::= prefix "(" expression ("," expression)* ")" ;
requeue_statement ::= "requeue" entry_name ("with" "abort")? ";" ;
positional_array_aggregate ::= ("(" expression "," expression ("," expression)* ")") | ("(" expression ("," expression)* "," "others" "=>" expression ")") | ("(" expression ("," expression)* "," "others" "=><>)") ;
entry_declaration ::= overriding_indicator? "entry" defining_identifier ("(" discrete_subtype_definition ")")? parameter_profile ";" ;
formal_floating_point_definition ::= "digits" "<>" ;
enumeration_representation_clause ::= "for" first_subtype_local_name "use" enumeration_aggregate ";" ;
discriminant_specification ::= (defining_identifier_list ":" null_exclusion? subtype_mark (":=" default_expression)?) | (defining_identifier_list ":" access_definition (":=" default_expression)?) ;
discriminant_association ::= (discriminant_selector_name ("|" discriminant_selector_name)* "=>")? expression ;
based_literal ::= base "#" based_numeral ("." based_numeral)? "#" exponent? ;
pragma_argument_association ::= ((pragma_argument_identifier "=>")? name) | ((pragma_argument_identifier "=>")? expression) ;
abort_statement ::= "abort" task_name ("," task_name)* ";" ;
case_statement ::= "case" expression "is" case_statement_alternative case_statement_alternative* "end" "case" ";" ;
range_constraint ::= "range" range ;
generic_renaming_declaration ::= ("generic" "package" defining_program_unit_name "renames" generic_package_name ";") | ("generic" "procedure" defining_program_unit_name "renames" generic_procedure_name ";") | ("generic" "function" defining_program_unit_name "renames" generic_function_name ";") ;
numeral ::= digit (underline? digit)* ;
task_body ::= "task" "body" defining_identifier "is" declarative_part "begin" handled_sequence_of_statements "end" task_identifier? ";" ;
qualified_expression ::= (subtype_mark "'(" expression ")") | (subtype_mark "'" aggregate) ;
generic_association ::= (generic_formal_parameter_selector_name "=>")? explicit_generic_actual_parameter ;
triggering_alternative ::= triggering_statement sequence_of_statements? ;
library_item ::= ("private"? library_unit_declaration) | library_unit_body | ("private"? library_unit_renaming_declaration) ;
null_exclusion ::= "not" "null" ;
designator ::= ((parent_unit_name ".")? identifier) | operator_symbol ;
timed_entry_call ::= "select" entry_call_alternative "or" delay_alternative "end" "select" ";" ;
delay_until_statement ::= "delay" "until" delay_expression ";" ;
package_renaming_declaration ::= "package" defining_program_unit_name "renames" package_name ";" ;
case_statement_alternative ::= "when" discrete_choice_list "=>" sequence_of_statements ;
access_definition ::= (null_exclusion? "access" "constant"? subtype_mark) | (null_exclusion? "access" "protected"? "procedure" parameter_profile) | (null_exclusion? "access" "protected"? "function" parameter_and_result_profile) ;
simple_return_statement ::= "return" expression? ";" ;
allocator ::= ("new" subtype_indication) | ("new" qualified_expression) ;
entry_index_specification ::= "for" defining_identifier "in" discrete_subtype_definition ;
formal_derived_type_definition ::= "abstract"? ("limited" | "synchronized")? "new" subtype_mark (("and" interface_list)? "with" "private")? ;
primary ::= numeric_literal | "null" | string_literal | aggregate | name | qualified_expression | allocator | ("(" expression ")") ;
package_declaration ::= package_specification ";" ;
record_definition ::= ("record" component_list "end" "record") | ("null" "record") ;
--------------------ada::cordy-hyaric.bgf--------------------
subprogram_declaration ::= overriding_indicator? subprogram_specification blocksemi ;
accept_statement_entry_index ::= "(" entry_index ")" ;
relation ::= (simple_expression relational_operator_simple_expression?) | (simple_expression "not"? "in" range) | (simple_expression "not"? "in" subtype_mark) ;
package_body ::= NL "package" "body" defining_program_unit_name "is" IN blockeol declarative_part EX package_body_statements? "end" package_body_identifier? unitsemi ;
delay_relative_statement ::= "delay" expression semi ;
nonlimited_with_clause ::= "private"? "with" {with_name ","}+ semi ;
formal_modular_type_definition ::= "mod" "<>" ;
indexed_component_component ::= "(" {index_expression ","}+ ")" ;
access_to_subprogram_definition ::= ("access" "protected"? "procedure" parameter_profile) | ("access" "protected"? "function" parameter_and_result_profile) ;
interface_list ::= subtype_mark | (subtype_mark "and" interface_list) ;
limited_with_clause ::= "limited" "private"? "with" {with_name ","}+ semi ;
designator_parent_unit_name ::= parent_unit_name "." ;
raise_statement_expression ::= "with" expression ;
generic_formal_part ::= "generic" generic_formal_parameter_declaration_or_use_clause* ;
protected_body_stub ::= "protected" "body" defining_identifier "is" "separate" blocksemi ;
component_definition ::= ("aliased"? subtype_indication) | ("aliased"? access_definition) ;
and_or_xor_relation ::= and_or_xor relation ;
elsif_expression ::= "elsif" expression "then" expression ;
restriction ::= identifier arrow_restriction_parameter_argument? ;
formal_object_declaration_default ::= colon_equals default_expression ;
formal_decimal_fixed_point_definition ::= "delta" "<>" "digits" "<>" ;
selective_accept_or_alternative ::= EX "or" IN eol guard? select_alternative ;
index_subtype_definition ::= subtype_mark "range" "<>" ;
subunit ::= "separate" "(" parent_unit_name ")" proper_body ;
constrained_array_definition ::= "array" "(" {discrete_subtype_definition ","}+ ")" "of" component_definition ;
record_type_definition_tagged ::= "abstract"? "tagged" ;
extension_aggregate ::= "(" ancestor_part "with" record_component_association_list ")" ;
private_extension_declaration ::= "type" defining_identifier discriminant_part? "is" blockeol "abstract"? private_extension_declaration_modifier? "new" subtype_indication private_extension_declaration_interface_list? "with" "private" blocksemi ;
single_task_declaration_definition ::= "is" IN blockeol single_task_declaration_definition_interface_list? EX task_definition ;
procedure_call_statement ::= prefix actual_parameter_part? semi ;
formal_package_association ::= generic_association | (selector_name arrow "<>") ;
record_representation_clause ::= "for" local_name "use" IN eol "record" mod_clause? IN eol component_clause* EX "end" "record" blocksemi EX ;
single_protected_declaration ::= "protected" defining_identifier "is" blockeol single_protected_declaration_interface_list? protected_definition unitsemi ;
package_body_statements ::= "begin" IN eol handled_sequence_of_statements EX ;
exception_renaming_declaration ::= defining_identifier colon "exception" "renames" name semi ;
defining_program_unit_name_parent ::= parent_unit_name "." ;
full_type_declaration ::= ("type" defining_identifier known_discriminant_part? "is" type_definition blocksemi) | task_type_declaration | protected_type_declaration ;
defining_program_unit_name ::= defining_program_unit_name_parent? defining_identifier ;
mode ::= ("in"?) | ("in" "out") | "out" ;
record_extension_part ::= "with" record_definition ;
code_statement ::= qualified_expression semi ;
generic_actual_part ::= "(" {generic_association ","}+ ")" ;
actual_parameter_part ::= "(" {parameter_association ","}+ ")" ;
attribute_designator ::= (identifier attribute_designator_expression?) | "access" | "delta" | "digits" ;
known_discriminant_part ::= "(" discriminant_specification_list ")" ;
wide_identifier ::= "[" stringlit "]" ;
loop_statement ::= loop_statement_identifier? iteration_scheme? "loop" IN eol sequence_of_statements EX "end" "loop" identifier? blocksemi ;
protected_body ::= "protected" "body" defining_identifier "is" IN blockeol protected_operation_item* EX "end" identifier? unitsemi ;
goto_statement ::= "goto" name semi ;
slice ::= prefix slice_component ;
task_definition_private ::= "private" IN eol task_item* EX ;
or_selector_name ::= orbar selector_name ;
exit_statement ::= "exit" name? exit_statement_when_condition? semi ;
exception_declaration ::= defining_identifier_list colon "exception" semi ;
parent_name_dot ::= parent_unit_name "." ;
record_type_definition ::= record_type_definition_tagged? "limited"? record_definition ;
access_to_object_definition ::= "access" general_access_modifier? subtype_indication ;
number_declaration ::= defining_identifier_list colon "constant" colon_equals expression semi ;
task_type_declaration_definition_interface_list ::= "new" interface_list "with" ;
enumeration_type_definition ::= "(" {enumeration_literal_specification ","}+ ")" ;
object_declaration_expression ::= colon_equals expression ;
decimal_fixed_point_definition ::= "delta" expression "digits" expression real_range_specification? ;
blocksemi ::= ";" NL ;
entry_call_alternative ::= procedure_or_entry_call sequence_of_statements? ;
discriminant_specification_list ::= discriminant_specification semi_discriminant_specification* ;
comma_others_arrow_null ::= "," "others" arrow "<>" ;
task_type_declaration ::= "task" "type" defining_identifier known_discriminant_part? task_type_declaration_definition? blocksemi ;
statement ::= label* unlabeled_statement ;
semi ::= ";" NL ;
package_body_identifier ::= parent_name_dot? identifier ;
variant_part ::= "case" direct_name "is" IN blockeol variant+ EX "end" "case" blocksemi ;
if_statement_else ::= EX "else" IN eol sequence_of_statements ;
index_constraint ::= "(" {discrete_range ","}+ ")" ;
attribute_reference ::= prefix attribute_reference_component ;
generic_subprogram_declaration ::= generic_formal_part subprogram_specification blocksemi ;
and_or_xor ::= ("and" "then"?) | ("or" "else"?) | "xor" ;
extended_return_statement ::= "return" defining_identifier colon "aliased"? return_subtype_indication extended_return_statement_expression? extended_return_statement_do? unitsemi ;
range_attribute_reference ::= prefix SPOFF "'" range_attribute_designator ;
conditional_entry_call ::= "select" IN eol entry_call_alternative EX "else" IN eol sequence_of_statements EX "end" "select" unitsemi ;
real_range_specification ::= "range" simple_expression SP ".." SP simple_expression ;
else_expression ::= "else" expression ;
use_type_clause ::= "use" "type" {used_subtype_mark ","}+ semi ;
exception_handler ::= "when" exception_handler_specification? exception_choice or_exception_choice* arrow sequence_of_statements ;
range_attribute_designator ::= "range" SPON range_attribute_designator_expression? ;
subtype_or_access_definition ::= (null_exclusion? subtype_mark) | access_definition ;
null_procedure_declaration ::= overriding_indicator? procedure_specification "is" "null" blocksemi ;
derived_type_definition ::= "abstract"? "limited"? "new" subtype_indication interface_and_record_extension_specification? ;
entry_body_formal_part ::= entry_body_formal_part_specification? parameter_profile ;
record_aggregate ::= "(" record_component_association_list ")" ;
entry_body ::= NL "entry" defining_identifier entry_body_formal_part entry_barrier "is" IN blockeol declarative_part EX "begin" IN eol handled_sequence_of_statements EX "end" identifier? unitsemi ;
factor ::= (primary starstar_primary?) | ("abs" primary) | ("not" primary) ;
mod_clause ::= "at" "mod" expression semi ;
and_interface_list ::= "and" interface_list ;
record_component_association_list ::= ({record_component_association ","}+) | ("null" "record") ;
or_discrete_choice ::= orbar discrete_choice ;
iteration_scheme ::= ("while" condition) | ("for" loop_parameter_specification) ;
generic_association_selector_name ::= selector_name arrow ;
parameter_and_result_profile ::= formal_part? "return" subtype_or_access_definition ;
simple_expression ::= unary_adding_operator? term binary_adding_operator_term* ;
binary_adding_operator ::= "+" | "-" | (IN NL "&" EX) ;
interface_and_record_extension_specification ::= ("and" interface_list record_extension_part?) | record_extension_part ;
subtype_indication ::= null_exclusion? subtype_mark constraint? ;
use_package_clause ::= "use" {used_name ","}+ semi ;
package_specification_identifier ::= parent_name_dot? identifier ;
range_attribute_designator_expression ::= "(" expression ")" ;
range ::= range_attribute_reference | (simple_expression SP ".." SP simple_expression) ;
pragma ::= ("pragma" id blocksemi) | ("pragma" id pragma_arguments blocksemi) ;
formal_package_actual_part ::= ("(" others_arrow? "<>" ")") | (generic_actual_part?) | ("(" {formal_package_association ","}+ comma_others_arrow_null? ")") ;
type_conversion ::= subtype_mark "(" expression ")" ;
component_declaration ::= defining_identifier_list colon component_definition component_declaration_default? semi ;
private_type_declaration ::= "type" defining_identifier discriminant_part? "is" blockeol private_type_declaration_tagged? "limited"? "private" blocksemi ;
indexed_component ::= prefix indexed_component_component ;
requeue_statement ::= "requeue" name requeue_statement_with_abort? semi ;
entry_declaration ::= overriding_indicator? "entry" defining_identifier entry_declaration_subtype? parameter_profile blocksemi ;
enumeration_representation_clause ::= "for" local_name "use" enumeration_aggregate blocksemi ;
exit_statement_when_condition ::= "when" condition ;
discriminant_specification_default ::= colon_equals default_expression ;
discriminant_specification ::= (defining_identifier_list colon null_exclusion? subtype_mark discriminant_specification_default?) | (defining_identifier_list colon access_definition discriminant_specification_default?) ;
discriminant_association ::= discriminant_selector_name_arrow? expression ;
pragma_argument_association ::= identifier_arrow? expression ;
abort_statement ::= "abort" {abort_name ","}+ semi ;
case_statement ::= "case" expression "is" IN blockeol case_statement_alternative+ EX "end" "case" blocksemi ;
generic_renaming_declaration ::= ("generic" "package" defining_program_unit_name "renames" name blocksemi) | ("generic" "procedure" defining_program_unit_name "renames" name blocksemi) | ("generic" "function" defining_program_unit_name "renames" name blocksemi) ;
explicit_dereference_component ::= "." "all" ;
semi_parameter_specification ::= ";" parameter_specification ;
selective_accept_else_alternative ::= "else" sequence_of_statements ;
entry_body_formal_part_specification ::= "(" entry_index_specification ")" ;
null_exclusion ::= "not" "null" ;
parameter_type_specification ::= (mode null_exclusion? subtype_mark parameter_specification_default?) | (access_definition parameter_specification_default?) ;
delay_until_statement ::= "delay" "until" expression semi ;
extended_return_statement_expression ::= colon_equals expression ;
package_specification_private ::= "private" IN eol basic_declarative_item* EX ;
case_statement_alternative ::= "when" discrete_choice_list arrow sequence_of_statements ;
access_definition ::= (null_exclusion? "access" "constant"? subtype_mark) | (null_exclusion? "access" "protected"? "procedure" parameter_profile) | (null_exclusion? "access" "protected"? "function" parameter_and_result_profile) ;
entry_index_specification ::= "for" defining_identifier "in" discrete_subtype_definition ;
formal_derived_type_definition ::= "abstract"? formal_derived_type_definition_modifier? "new" subtype_mark formal_derived_type_definition_interface_list? ;
package_declaration ::= package_specification unitsemi ;
declare_declarative_part ::= "declare" IN eol declarative_part EX ;
at_clause ::= "for" direct_name "use" "at" expression semi ;
discriminant_constraint ::= "(" {discriminant_association ","}* ")" ;
if_expression ::= "if" expression "then" expression elsif_expression* else_expression? ;
attribute_definition_clause ::= "for" local_name SPOFF "'" attribute_designator SPON "use" expression blocksemi ;
accept_statement ::= "accept" direct_name accept_statement_entry_index? parameter_profile accept_statement_statements? unitsemi ;
accept_alternative ::= accept_statement sequence_of_statements? ;
label ::= "<<" statement_identifier ">>" ;
identifier_arrow ::= identifier arrow ;
unitsemi ::= ";" NL NL ;
component_clause ::= local_name "at" position "range" first_bit SP ".." SP last_bit semi ;
task_body_stub ::= "task" "body" defining_identifier "is" "separate" blocksemi ;
delay_alternative ::= delay_statement sequence_of_statements? ;
subprogram_body_stub ::= overriding_indicator? subprogram_specification "is" "separate" blocksemi ;
parameter_specification_default ::= colon_equals default_expression ;
parameter_specification ::= defining_identifier_list colon parameter_type_specification ;
parameter_association ::= parameter_association_selector_name explicit_actual_parameter ;
entry_barrier ::= "when" condition ;
single_task_declaration_definition_interface_list ::= "new" interface_list "with" ;
attribute_reference_component ::= SPOFF "'" attribute_designator SPON ;
generic_instantiation ::= ("package" defining_program_unit_name "is" generic_instantiation_clause) | (overriding_indicator? "procedure" defining_program_unit_name "is" generic_instantiation_clause) | (overriding_indicator? "function" defining_designator "is" generic_instantiation_clause) ;
local_name ::= direct_name | (direct_name SPOFF "'" attribute_designator SPON) ;
exception_handler_specification ::= choice_parameter_specification colon ;
protected_type_declaration_interface_list ::= "new" interface_list "with" ;
arrow_restriction_parameter_argument ::= arrow restriction_parameter_argument ;
raise_statement ::= ("raise" semi) | ("raise" name raise_statement_expression? semi) ;
function_specification ::= "function" defining_designator parameter_and_result_profile ;
unknown_discriminant_part ::= "(" "<>" ")" ;
unconstrained_array_definition ::= "array" "(" {index_subtype_definition ","}+ ")" "of" component_definition ;
overriding_indicator ::= "not"? "overriding" ;
array_component_association ::= discrete_choice_list arrow expression_or_null ;
single_task_declaration ::= "task" defining_identifier single_task_declaration_definition? unitsemi ;
if_statement_elsif ::= EX "elsif" condition "then" IN eol sequence_of_statements ;
digits_constraint ::= "digits" expression range_constraint? ;
asynchronous_select ::= "select" IN eol triggering_alternative EX EX "then" "abort" IN eol abortable_part EX "end" "select" unitsemi ;
subprogram_renaming_declaration ::= overriding_indicator? subprogram_specification "renames" name blocksemi ;
record_component_association ::= expression | (component_choice_list arrow expression_or_null) ;
terminate_alternative ::= "terminate" semi ;
if_statement ::= "if" condition "then" IN eol sequence_of_statements if_statement_elsif* if_statement_else? EX "end" "if" semi ;
formal_object_declaration ::= (defining_identifier_list colon mode null_exclusion? subtype_mark formal_object_declaration_default? semi) | (defining_identifier_list colon mode access_definition formal_object_declaration_default? semi) ;
package_specification ::= NL "package" defining_program_unit_name "is" IN blockeol basic_declarative_item* EX package_specification_private? "end" package_specification_identifier? ;
ordinary_fixed_point_definition ::= "delta" expression real_range_specification ;
protected_definition_private ::= EX "private" IN eol protected_element_declaration* ;
indexed_slice_type_conv_or_function_call_component ::= "(" {index_or_parameter_value ","}+ ")" ;
delta_constraint ::= "delta" expression range_constraint? ;
subprogram_body ::= NL overriding_indicator? subprogram_specification "is" IN blockeol declarative_part EX "begin" IN eol handled_sequence_of_statements EX "end" designator? unitsemi ;
abstract_subprogram_declaration ::= overriding_indicator? subprogram_specification "is" "abstract" blocksemi ;
null_statement ::= "null" semi ;
object_renaming_declaration ::= (defining_identifier colon null_exclusion? subtype_mark "renames" name semi) | (defining_identifier colon access_definition "renames" name semi) ;
incomplete_type_declaration ::= "type" defining_identifier discriminant_part? incomplete_type_declaration_modifier? blocksemi ;
formal_package_declaration ::= "with" "package" defining_identifier "is" "new" name formal_package_actual_part semi ;
handled_sequence_of_statements ::= sequence_of_statements handled_sequence_of_statements_exception? ;
formal_concrete_subprogram_declaration_default ::= "is" subprogram_default ;
expression_or_aggregate ::= ("(" SPON expression ")") | (SPON aggregate) ;
formal_concrete_subprogram_declaration ::= "with" subprogram_specification formal_concrete_subprogram_declaration_default? semi ;
guard ::= "when" condition arrow ;
formal_signed_integer_type_definition ::= "range" "<>" ;
component_list ::= (component_item+) | (component_item* variant_part) | ("null" semi) ;
formal_private_type_definition_tagged ::= "abstract"? "tagged" ;
access_type_definition ::= (null_exclusion? access_to_object_definition) | (null_exclusion? access_to_subprogram_definition) ;
generic_package_declaration ::= generic_formal_part package_specification blocksemi ;
expression ::= relation and_or_xor_relation* ;
procedure_specification ::= "procedure" defining_program_unit_name parameter_profile ;
parameter_association_selector_name ::= selector_name arrow ;
selected_component_component ::= "." selector_name ;
semi_discriminant_specification ::= ";" discriminant_specification ;
slice_component ::= "(" discrete_range ")" ;
accept_statement_statements ::= "do" IN eol handled_sequence_of_statements EX "end" identifier? ;
name ::= (direct_name name_component*) | character_literal ;
binary_adding_operator_term ::= binary_adding_operator term ;
private_extension_declaration_interface_list ::= "and" interface_list ;
variant ::= "when" discrete_choice_list arrow component_list ;
protected_definition ::= IN protected_operation_declaration* protected_definition_private? EX "end" identifier? ;
formal_discrete_type_definition ::= "(" "<>" ")" ;
relational_operator_simple_expression ::= relational_operator simple_expression ;
compilation_unit ::= (context_clause library_item) | (context_clause subunit) | pragma ;
assignment_statement ::= name colon_equals expression semi ;
floating_point_definition ::= "digits" expression real_range_specification? ;
formal_ordinary_fixed_point_definition ::= "delta" "<>" ;
object_declaration ::= (defining_identifier_list colon "aliased"? "constant"? subtype_access_or_array_type_definition object_declaration_expression? semi) | single_task_declaration | single_protected_declaration ;
package_body_stub ::= NL "package" "body" defining_identifier "is" "separate" blocksemi ;
interface_type_definition ::= interface_type_definition_modifier? "interface" interface_type_definition_list? ;
or_exception_choice ::= orbar exception_choice ;
formal_abstract_subprogram_declaration ::= "with" subprogram_specification "is" "abstract" subprogram_default? semi ;
formal_private_type_definition ::= formal_private_type_definition_tagged? "limited"? "private" ;
term ::= factor multiplying_operator_factor* ;
entry_declaration_subtype ::= "(" discrete_subtype_definition ")" ;
starstar_primary ::= "**" primary ;
protected_type_declaration ::= NL "protected" "type" defining_identifier known_discriminant_part? "is" protected_type_declaration_interface_list? eol protected_definition unitsemi ;
function_call ::= prefix function_call_component ;
explicit_dereference ::= name explicit_dereference_component ;
selected_component ::= prefix selected_component_component ;
discriminant_selector_name_arrow ::= selector_name or_selector_name* arrow ;
signed_integer_type_definition ::= "range" simple_expression SP ".." SP simple_expression ;
named_array_aggregate ::= "(" {array_component_association ","}+ ")" ;
loop_parameter_specification ::= defining_identifier "in" "reverse"? discrete_subtype_definition ;
task_definition ::= IN task_item* task_definition_private? EX "end" identifier? ;
interface_type_definition_list ::= "and" interface_list ;
selective_accept ::= "select" IN eol guard? select_alternative selective_accept_or_alternative* selective_accept_else_alternative? EX "end" "select" unitsemi ;
multiplying_operator_factor ::= multiplying_operator factor ;
formal_type_declaration ::= "type" defining_identifier discriminant_part? "is" formal_type_definition blocksemi ;
modular_type_definition ::= "mod" expression ;
formal_part ::= "(" parameter_specification semi_parameter_specification* ")" ;
handled_sequence_of_statements_exception ::= "exception" IN eol exception_handler+ EX ;
attribute_designator_expression ::= "(" expression ")" ;
incomplete_type_declaration_modifier ::= "is" "tagged" ;
block_statement ::= block_statement_identifier_colon? declare_declarative_part? "begin" IN eol handled_sequence_of_statements EX "end" identifier? unitsemi ;
formal_derived_type_definition_interface_list ::= and_interface_list? "with" "private" ;
entry_call_statement ::= name actual_parameter_part? semi ;
private_type_declaration_tagged ::= "abstract"? "tagged" ;
component_choice_list ::= (selector_name or_selector_name*) | "others" ;
component_declaration_default ::= colon_equals default_expression ;
discrete_choice_list ::= discrete_choice or_discrete_choice* ;
subtype_declaration ::= "subtype" defining_identifier "is" subtype_indication semi ;
loop_statement_identifier ::= statement_identifier colon ;
positional_array_aggregate ::= "(" {index_expression ","}+ comma_others* ")" ;
others_arrow ::= "others" arrow ;
formal_floating_point_definition ::= "digits" "<>" ;
requeue_statement_with_abort ::= "with" "abort" ;
task_type_declaration_definition ::= "is" IN blockeol task_type_declaration_definition_interface_list? task_definition EX ;
range_constraint ::= "range" range ;
task_body ::= NL "task" "body" defining_identifier "is" IN blockeol declarative_part EX "begin" IN eol handled_sequence_of_statements EX "end" identifier? unitsemi ;
qualified_expression ::= subtype_mark SPOFF "'" expression_or_aggregate ;
generic_association ::= generic_association_selector_name? explicit_generic_actual_parameter ;
triggering_alternative ::= triggering_statement sequence_of_statements? ;
library_item ::= ("private"? library_unit_declaration) | library_unit_body | ("private"? library_unit_renaming_declaration) ;
designator ::= (designator_parent_unit_name? identifier) | operator_symbol ;
timed_entry_call ::= "select" IN eol entry_call_alternative EX "or" IN eol delay_alternative EX "end" "select" unitsemi ;
pragma_arguments ::= "(" {pragma_argument_association ","}+ ")" ;
single_protected_declaration_interface_list ::= "new" interface_list "with" ;
package_renaming_declaration ::= NL "package" defining_program_unit_name "renames" name blocksemi ;
simple_return_statement ::= "return" expression? semi ;
comma_others ::= "," "others" arrow expression_or_null ;
allocator ::= ("new" subtype_indication) | ("new" qualified_expression) ;
block_statement_identifier_colon ::= statement_identifier colon ;
generic_instantiation_clause ::= "new" name generic_actual_part? blocksemi ;
extended_return_statement_do ::= "do" IN eol handled_sequence_of_statements EX "end" "return" ;
primary ::= numeric_literal | "null" | string_literal | aggregate | name | qualified_expression | allocator | ("(" expression ")") | if_expression ;
record_definition ::= (IN eol "record" IN eol component_list EX "end" "record" EX) | ("null" "record") ;
--------------------c::iso-9899-1999.bgf--------------------
iteration-statement ::= ("while" "(" expression ")" statement) | ("do" statement "while" "(" expression ")" ";") | ("for" "(" expression? ";" expression? ";" expression? ")" statement) | ("for" "(" declaration expression? ";" expression? ")" statement) ;
conditional-expression ::= logical-OR-expression | (logical-OR-expression "?" expression ":" conditional-expression) ;
type-name ::= specifier-qualifier-list abstract-declarator? ;
relational-expression ::= shift-expression | (relational-expression "<" shift-expression) | (relational-expression ">" shift-expression) | (relational-expression "<=" shift-expression) | (relational-expression ">=" shift-expression) ;
logical-OR-expression ::= logical-AND-expression | (logical-OR-expression "||" logical-AND-expression) ;
init-declarator-list ::= init-declarator | (init-declarator-list "," init-declarator) ;
pointer ::= ("*" type-qualifier-list?) | ("*" type-qualifier-list? pointer) ;
abstract-declarator ::= pointer | (pointer? direct-abstract-declarator) ;
expression-statement ::= expression? ";" ;
declaration ::= declaration-specifiers init-declarator-list? ";" ;
additive-expression ::= multiplicative-expression | (additive-expression "+" multiplicative-expression) | (additive-expression "-" multiplicative-expression) ;
designator-list ::= designator | (designator-list designator) ;
designation ::= designator-list "=" ;
unary-expression ::= postfix-expression | ("++" unary-expression) | ("--" unary-expression) | (unary-operator cast-expression) | ("sizeof" unary-expression) | ("sizeof" "(" type-name ")") ;
labeled-statement ::= (identifier ":" statement) | ("case" constant-expression ":" statement) | ("default" ":" statement) ;
enum-specifier ::= ("enum" identifier? "{" enumerator-list "}") | ("enum" identifier? "{" enumerator-list "," "}") | ("enum" identifier) ;
logical-AND-expression ::= inclusive-OR-expression | (logical-AND-expression "&&" inclusive-OR-expression) ;
declarator ::= pointer? direct-declarator ;
postfix-expression ::= primary-expression | (postfix-expression "[" expression "]") | (postfix-expression "(" argument-expression-list? ")") | (postfix-expression "." identifier) | (postfix-expression "->" identifier) | (postfix-expression "++") | (postfix-expression "--") | ("(" type-name ")" "{" initializer-list "}") | ("(" type-name ")" "{" initializer-list "," "}") ;
multiplicative-expression ::= cast-expression | (multiplicative-expression "*" cast-expression) | (multiplicative-expression "/" cast-expression) | (multiplicative-expression "%" cast-expression) ;
selection-statement ::= ("if" "(" expression ")" statement) | ("if" "(" expression ")" statement "else" statement) | ("switch" "(" expression ")" statement) ;
AND-expression ::= equality-expression | (AND-expression "&" equality-expression) ;
parameter-type-list ::= parameter-list | (parameter-list "," "...") ;
initializer-list ::= (designation? initializer) | (initializer-list "," designation? initializer) ;
struct-declarator ::= declarator | (declarator? ":" constant-expression) ;
declaration-specifiers ::= (storage-class-specifier declaration-specifiers?) | (type-specifier declaration-specifiers?) | (type-qualifier declaration-specifiers?) | (function-specifier declaration-specifiers?) ;
function-definition ::= declaration-specifiers declarator declaration-list? compound-statement ;
cast-expression ::= unary-expression | ("(" type-name ")" cast-expression) ;
argument-expression-list ::= assignment-expression | (argument-expression-list "," assignment-expression) ;
initializer ::= assignment-expression | ("{" initializer-list "}") | ("{" initializer-list "," "}") ;
inclusive-OR-expression ::= exclusive-OR-expression | (inclusive-OR-expression "|" exclusive-OR-expression) ;
translation-unit ::= external-declaration | (translation-unit external-declaration) ;
block-item-list ::= block-item | (block-item-list block-item) ;
direct-abstract-declarator ::= ("(" abstract-declarator ")") | (direct-abstract-declarator? "[" assignment-expression? "]") | (direct-abstract-declarator? "[" "*" "]") | (direct-abstract-declarator? "(" parameter-type-list? ")") ;
expression ::= assignment-expression | (expression "," assignment-expression) ;
assignment-expression ::= conditional-expression | (unary-expression assignment-operator assignment-expression) ;
parameter-declaration ::= (declaration-specifiers declarator) | (declaration-specifiers abstract-declarator?) ;
direct-declarator ::= identifier | ("(" declarator ")") | (direct-declarator "[" type-qualifier-list? assignment-expression? "]") | (direct-declarator "[" "static" type-qualifier-list? assignment-expression "]") | (direct-declarator "[" type-qualifier-list "static" assignment-expression "]") | (direct-declarator "[" type-qualifier-list? "*" "]") | (direct-declarator "(" parameter-type-list ")") | (direct-declarator "(" identifier-list? ")") ;
designator ::= ("[" constant-expression "]") | ("." identifier) ;
type-qualifier-list ::= type-qualifier | (type-qualifier-list type-qualifier) ;
exclusive-OR-expression ::= AND-expression | (exclusive-OR-expression "^" AND-expression) ;
declaration-list ::= declaration | (declaration-list declaration) ;
jump-statement ::= ("goto" identifier ";") | ("continue" ";") | ("break" ";") | ("return" expression? ";") ;
specifier-qualifier-list ::= (type-specifier specifier-qualifier-list?) | (type-qualifier specifier-qualifier-list?) ;
init-declarator ::= declarator | (declarator "=" initializer) ;
struct-or-union-specifier ::= (struct-or-union identifier? "{" struct-declaration-list "}") | (struct-or-union identifier) ;
compound-statement ::= "{" block-item-list? "}" ;
equality-expression ::= relational-expression | (equality-expression "==" relational-expression) | (equality-expression "!=" relational-expression) ;
struct-declaration-list ::= struct-declaration | (struct-declaration-list struct-declaration) ;
enumerator-list ::= enumerator | (enumerator-list "," enumerator) ;
enumerator ::= enumeration-constant | (enumeration-constant "=" constant-expression) ;
primary-expression ::= identifier | constant | string-literal | ("(" expression ")") ;
shift-expression ::= additive-expression | (shift-expression "<<" additive-expression) | (shift-expression ">>" additive-expression) ;
identifier-list ::= identifier | (identifier-list "," identifier) ;
parameter-list ::= parameter-declaration | (parameter-list "," parameter-declaration) ;
struct-declarator-list ::= struct-declarator | (struct-declarator-list "," struct-declarator) ;
struct-declaration ::= specifier-qualifier-list struct-declarator-list ";" ;
--------------------c::iso-9899-tc2.bgf--------------------
iteration-statement ::= ("while" "(" expression ")" statement) | ("do" statement "while" "(" expression ")" ";") | ("for" "(" expression? ";" expression? ";" expression? ")" statement) | ("for" "(" declaration expression? ";" expression? ")" statement) ;
conditional-expression ::= logical-OR-expression | (logical-OR-expression "?" expression ":" conditional-expression) ;
type-name ::= specifier-qualifier-list abstract-declarator? ;
relational-expression ::= shift-expression | (relational-expression "<" shift-expression) | (relational-expression ">" shift-expression) | (relational-expression "<=" shift-expression) | (relational-expression ">=" shift-expression) ;
logical-OR-expression ::= logical-AND-expression | (logical-OR-expression "||" logical-AND-expression) ;
init-declarator-list ::= init-declarator | (init-declarator-list "," init-declarator) ;
pointer ::= ("*" type-qualifier-list?) | ("*" type-qualifier-list? pointer) ;
abstract-declarator ::= pointer | (pointer? direct-abstract-declarator) ;
expression-statement ::= expression? ";" ;
declaration ::= declaration-specifiers init-declarator-list? ";" ;
additive-expression ::= multiplicative-expression | (additive-expression "+" multiplicative-expression) | (additive-expression "-" multiplicative-expression) ;
designator-list ::= designator | (designator-list designator) ;
designation ::= designator-list "=" ;
unary-expression ::= postfix-expression | ("++" unary-expression) | ("--" unary-expression) | (unary-operator cast-expression) | ("sizeof" unary-expression) | ("sizeof" "(" type-name ")") ;
labeled-statement ::= (identifier ":" statement) | ("case" constant-expression ":" statement) | ("default" ":" statement) ;
enum-specifier ::= ("enum" identifier? "{" enumerator-list "}") | ("enum" identifier? "{" enumerator-list "," "}") | ("enum" identifier) ;
logical-AND-expression ::= inclusive-OR-expression | (logical-AND-expression "&&" inclusive-OR-expression) ;
declarator ::= pointer? direct-declarator ;
postfix-expression ::= primary-expression | (postfix-expression "[" expression "]") | (postfix-expression "(" argument-expression-list? ")") | (postfix-expression "." identifier) | (postfix-expression "->" identifier) | (postfix-expression "++") | (postfix-expression "--") | ("(" type-name ")" "{" initializer-list "}") | ("(" type-name ")" "{" initializer-list "," "}") ;
multiplicative-expression ::= cast-expression | (multiplicative-expression "*" cast-expression) | (multiplicative-expression "/" cast-expression) | (multiplicative-expression "%" cast-expression) ;
selection-statement ::= ("if" "(" expression ")" statement) | ("if" "(" expression ")" statement "else" statement) | ("switch" "(" expression ")" statement) ;
AND-expression ::= equality-expression | (AND-expression "&" equality-expression) ;
parameter-type-list ::= parameter-list | (parameter-list "," "...") ;
initializer-list ::= (designation? initializer) | (initializer-list "," designation? initializer) ;
struct-declarator ::= declarator | (declarator? ":" constant-expression) ;
declaration-specifiers ::= (storage-class-specifier declaration-specifiers?) | (type-specifier declaration-specifiers?) | (type-qualifier declaration-specifiers?) | (function-specifier declaration-specifiers?) ;
function-definition ::= declaration-specifiers declarator declaration-list? compound-statement ;
cast-expression ::= unary-expression | ("(" type-name ")" cast-expression) ;
argument-expression-list ::= assignment-expression | (argument-expression-list "," assignment-expression) ;
initializer ::= assignment-expression | ("{" initializer-list "}") | ("{" initializer-list "," "}") ;
inclusive-OR-expression ::= exclusive-OR-expression | (inclusive-OR-expression "|" exclusive-OR-expression) ;
translation-unit ::= external-declaration | (translation-unit external-declaration) ;
block-item-list ::= block-item | (block-item-list block-item) ;
direct-abstract-declarator ::= ("(" abstract-declarator ")") | (direct-abstract-declarator? "[" assignment-expression? "]") | (direct-abstract-declarator? "[" "*" "]") | (direct-abstract-declarator? "(" parameter-type-list? ")") ;
expression ::= assignment-expression | (expression "," assignment-expression) ;
assignment-expression ::= conditional-expression | (unary-expression assignment-operator assignment-expression) ;
parameter-declaration ::= (declaration-specifiers declarator) | (declaration-specifiers abstract-declarator?) ;
direct-declarator ::= identifier | ("(" declarator ")") | (direct-declarator "[" type-qualifier-list? assignment-expression? "]") | (direct-declarator "[" "static" type-qualifier-list? assignment-expression "]") | (direct-declarator "[" type-qualifier-list "static" assignment-expression "]") | (direct-declarator "[" type-qualifier-list? "*" "]") | (direct-declarator "(" parameter-type-list ")") | (direct-declarator "(" identifier-list? ")") ;
designator ::= ("[" constant-expression "]") | ("." identifier) ;
type-qualifier-list ::= type-qualifier | (type-qualifier-list type-qualifier) ;
exclusive-OR-expression ::= AND-expression | (exclusive-OR-expression "^" AND-expression) ;
declaration-list ::= declaration | (declaration-list declaration) ;
jump-statement ::= ("goto" identifier ";") | ("continue" ";") | ("break" ";") | ("return" expression? ";") ;
specifier-qualifier-list ::= (type-specifier specifier-qualifier-list?) | (type-qualifier specifier-qualifier-list?) ;
init-declarator ::= declarator | (declarator "=" initializer) ;
struct-or-union-specifier ::= (struct-or-union identifier? "{" struct-declaration-list "}") | (struct-or-union identifier) ;
compound-statement ::= "{" block-item-list? "}" ;
equality-expression ::= relational-expression | (equality-expression "==" relational-expression) | (equality-expression "!=" relational-expression) ;
struct-declaration-list ::= struct-declaration | (struct-declaration-list struct-declaration) ;
enumerator-list ::= enumerator | (enumerator-list "," enumerator) ;
enumerator ::= enumeration-constant | (enumeration-constant "=" constant-expression) ;
primary-expression ::= identifier | constant | string-literal | ("(" expression ")") ;
shift-expression ::= additive-expression | (shift-expression "<<" additive-expression) | (shift-expression ">>" additive-expression) ;
identifier-list ::= identifier | (identifier-list "," identifier) ;
parameter-list ::= parameter-declaration | (parameter-list "," parameter-declaration) ;
struct-declarator-list ::= struct-declarator | (struct-declarator-list "," struct-declarator) ;
struct-declaration ::= specifier-qualifier-list struct-declarator-list ";" ;
--------------------c::iso-9899-tc3.bgf--------------------
iteration-statement ::= ("while" "(" expression ")" statement) | ("do" statement "while" "(" expression ")" ";") | ("for" "(" expression? ";" expression? ";" expression? ")" statement) | ("for" "(" declaration expression? ";" expression? ")" statement) ;
conditional-expression ::= logical-OR-expression | (logical-OR-expression "?" expression ":" conditional-expression) ;
type-name ::= specifier-qualifier-list abstract-declarator? ;
relational-expression ::= shift-expression | (relational-expression "<" shift-expression) | (relational-expression ">" shift-expression) | (relational-expression "<=" shift-expression) | (relational-expression ">=" shift-expression) ;
logical-OR-expression ::= logical-AND-expression | (logical-OR-expression "||" logical-AND-expression) ;
init-declarator-list ::= init-declarator | (init-declarator-list "," init-declarator) ;
pointer ::= ("*" type-qualifier-list?) | ("*" type-qualifier-list? pointer) ;
abstract-declarator ::= pointer | (pointer? direct-abstract-declarator) ;
expression-statement ::= expression? ";" ;
declaration ::= declaration-specifiers init-declarator-list? ";" ;
additive-expression ::= multiplicative-expression | (additive-expression "+" multiplicative-expression) | (additive-expression "-" multiplicative-expression) ;
designator-list ::= designator | (designator-list designator) ;
designation ::= designator-list "=" ;
unary-expression ::= postfix-expression | ("++" unary-expression) | ("--" unary-expression) | (unary-operator cast-expression) | ("sizeof" unary-expression) | ("sizeof" "(" type-name ")") ;
labeled-statement ::= (identifier ":" statement) | ("case" constant-expression ":" statement) | ("default" ":" statement) ;
enum-specifier ::= ("enum" identifier? "{" enumerator-list "}") | ("enum" identifier? "{" enumerator-list "," "}") | ("enum" identifier) ;
logical-AND-expression ::= inclusive-OR-expression | (logical-AND-expression "&&" inclusive-OR-expression) ;
declarator ::= pointer? direct-declarator ;
postfix-expression ::= primary-expression | (postfix-expression "[" expression "]") | (postfix-expression "(" argument-expression-list? ")") | (postfix-expression "." identifier) | (postfix-expression "->" identifier) | (postfix-expression "++") | (postfix-expression "--") | ("(" type-name ")" "{" initializer-list "}") | ("(" type-name ")" "{" initializer-list "," "}") ;
multiplicative-expression ::= cast-expression | (multiplicative-expression "*" cast-expression) | (multiplicative-expression "/" cast-expression) | (multiplicative-expression "%" cast-expression) ;
selection-statement ::= ("if" "(" expression ")" statement) | ("if" "(" expression ")" statement "else" statement) | ("switch" "(" expression ")" statement) ;
AND-expression ::= equality-expression | (AND-expression "&" equality-expression) ;
parameter-type-list ::= parameter-list | (parameter-list "," "...") ;
initializer-list ::= (designation? initializer) | (initializer-list "," designation? initializer) ;
struct-declarator ::= declarator | (declarator? ":" constant-expression) ;
declaration-specifiers ::= (storage-class-specifier declaration-specifiers?) | (type-specifier declaration-specifiers?) | (type-qualifier declaration-specifiers?) | (function-specifier declaration-specifiers?) ;
function-definition ::= declaration-specifiers declarator declaration-list? compound-statement ;
cast-expression ::= unary-expression | ("(" type-name ")" cast-expression) ;
argument-expression-list ::= assignment-expression | (argument-expression-list "," assignment-expression) ;
initializer ::= assignment-expression | ("{" initializer-list "}") | ("{" initializer-list "," "}") ;
inclusive-OR-expression ::= exclusive-OR-expression | (inclusive-OR-expression "|" exclusive-OR-expression) ;
translation-unit ::= external-declaration | (translation-unit external-declaration) ;
block-item-list ::= block-item | (block-item-list block-item) ;
direct-abstract-declarator ::= ("(" abstract-declarator ")") | (direct-abstract-declarator? "[" type-qualifier-list? assignment-expression? "]") | (direct-abstract-declarator? "[" "static" type-qualifier-list? assignment-expression "]") | (direct-abstract-declarator? "[" type-qualifier-list "static" assignment-expression "]") | (direct-abstract-declarator? "[" "*" "]") | (direct-abstract-declarator? "(" parameter-type-list? ")") ;
expression ::= assignment-expression | (expression "," assignment-expression) ;
assignment-expression ::= conditional-expression | (unary-expression assignment-operator assignment-expression) ;
parameter-declaration ::= (declaration-specifiers declarator) | (declaration-specifiers abstract-declarator?) ;
direct-declarator ::= identifier | ("(" declarator ")") | (direct-declarator "[" type-qualifier-list? assignment-expression? "]") | (direct-declarator "[" "static" type-qualifier-list? assignment-expression "]") | (direct-declarator "[" type-qualifier-list "static" assignment-expression "]") | (direct-declarator "[" type-qualifier-list? "*" "]") | (direct-declarator "(" parameter-type-list ")") | (direct-declarator "(" identifier-list? ")") ;
designator ::= ("[" constant-expression "]") | ("." identifier) ;
type-qualifier-list ::= type-qualifier | (type-qualifier-list type-qualifier) ;
exclusive-OR-expression ::= AND-expression | (exclusive-OR-expression "^" AND-expression) ;
declaration-list ::= declaration | (declaration-list declaration) ;
jump-statement ::= ("goto" identifier ";") | ("continue" ";") | ("break" ";") | ("return" expression? ";") ;
specifier-qualifier-list ::= (type-specifier specifier-qualifier-list?) | (type-qualifier specifier-qualifier-list?) ;
init-declarator ::= declarator | (declarator "=" initializer) ;
struct-or-union-specifier ::= (struct-or-union identifier? "{" struct-declaration-list "}") | (struct-or-union identifier) ;
compound-statement ::= "{" block-item-list? "}" ;
equality-expression ::= relational-expression | (equality-expression "==" relational-expression) | (equality-expression "!=" relational-expression) ;
struct-declaration-list ::= struct-declaration | (struct-declaration-list struct-declaration) ;
enumerator-list ::= enumerator | (enumerator-list "," enumerator) ;
enumerator ::= enumeration-constant | (enumeration-constant "=" constant-expression) ;
primary-expression ::= identifier | constant | string-literal | ("(" expression ")") ;
shift-expression ::= additive-expression | (shift-expression "<<" additive-expression) | (shift-expression ">>" additive-expression) ;
identifier-list ::= identifier | (identifier-list "," identifier) ;
parameter-list ::= parameter-declaration | (parameter-list "," parameter-declaration) ;
struct-declarator-list ::= struct-declarator | (struct-declarator-list "," struct-declarator) ;
struct-declaration ::= specifier-qualifier-list struct-declarator-list ";" ;
--------------------c::antoniol.bgf--------------------
else_part ::= "//"? elsedef_line newline line* ;
elsif_part ::= "//"? elsifdef_line newline line* ;
not_newline ::= long_comment | (token) ;
ifdef ::= "//"? ifdef_line newline line* elsif_part* else_part? "//"? endifdef_line newline ;
line ::= ifdef | ("//"? other_preprocessor_line newline) | ("//"? any_other_line newline) ;
--------------------c::malton-dahn.bgf--------------------
asm_spec ::= asm_or_cv+ "(" asm_template asm_output_operands? asm_input_operands? asm_clobbered_registers? ")" ;
attribute_spec ::= "__attribute__" "('(" {attribute_extension ","}* ")')" ;
compound_statement_expression ::= "(" compound_statement ")" ;
compound_literal_array_declarator ::= (ptr_operator* array_declarator_extension*) | ("(" compound_literal_array_declarator ")" array_declarator_extension*) ;
declaration ::= (declaration_body semi) | preprocessor ;
 declaration ::= comment_NL ;
 declaration ::= null_declaration | (declaration_body semi) | preprocessor ;
for_statement ::= "for" "(" expression? ";" expression? ";" expression? ")" statement ;
 for_statement ::= "for" "(" declaration_body ";" expression? ";" expression? ")" statement ;
argument_declaration ::= (decl_specifiers argument_declarator?) | "..." ;
 argument_declaration ::= comment_NL* "..." ;
 argument_declaration ::= "..." comment_NL* ;
member_declarator ::= (declarator bitfieldsize?) | bitfieldsize ;
 member_declarator ::= (declarator bitfieldsize? attributes_or_asm*) | bitfieldsize ;
struct_or_union_designator ::= "."? id postfix_extension* ;
postfix_extension ::= ("[" expression "]") | ("(" expression? ")") | ("." id) | ("->" id) | "++" | "--" ;
 postfix_extension ::= ("[" expression "]") | ("(" {argument_expression ","}* ")") | ("." id) | ("->" id) | "++" | "--" ;
assignment_operation ::= assignment_operator assignment_expression ;
label ::= (label_id ":") | (EX SP SP "case" constant_expression ":" IN NL) | (EX SP SP "default" ":" IN NL) ;
 label ::= (label_id ":" attribute_spec*) | (EX SP SP "case" constant_expression ":" IN NL) | (EX SP SP "case" constant_expression SP "..." SP constant_expression ":" IN NL) | (EX SP SP "default" ":" IN NL) ;
designated_initializer ::= assignment_expression | (designator* designator_assignment? assignment_expression) | (designator* designator_assignment? NL "{" IN {designated_initializer ","}* ","? EX "}") ;
conditional_expression ::= binary_expression conditional_operation? ;
 conditional_expression ::= binary_expression conditional_operation* ;
type_name ::= type_specifiers abstract_declarator? ;
complex_specifier ::= "_Complex" simple_type_or_qualifier* ;
statement ::= (label* unlabeled_statement) | preprocessor ;
 statement ::= comment_NL ;
 statement ::= label ;
semi ::= ";" NL ;
abstract_declarator ::= (ptr_operator+ declarator_extension*) | ("(" abstract_declarator ")" declarator_extension*) ;
 abstract_declarator ::= (ptr_operator+ declarator_extension*) | (array_declarator_extension*) | ("(" abstract_declarator ")" declarator_extension*) ;
conditional_operation ::= "?" expression ":" conditional_expression ;
 conditional_operation ::= "?" expression? ":" binary_expression ;
else_statement ::= "else" statement ;
exception_arg ::= (stringlit* stringlit) | tagged_attribute_id ;
asm_input_operands ::= ":" {asm_operand ","}* ;
initializer ::= expression | (NL "{" IN {initializer ","}* ","? EX "}") ;
 initializer ::= comment_NL* "..." ;
 initializer ::= assignment_expression | (NL "{" IN {designated_initializer ","}* ","? EX "}") ;
while_statement ::= "while" "(" expression ")" statement ;
asm_clobbered_registers ::= ":" {string ","}* ;
nonreferential_primary ::= constant | string | ("(" expression ")") ;
 nonreferential_primary ::= constant | string | ("(" expression ")") | compound_statement_expression | compound_literal | (extension_specifier compound_statement_expression) | (extension_specifier "(" expression ")") ;
base_declarator ::= reference_id | ("(" declarator ")") ;
 base_declarator ::= (attribute_spec* reference_id) | (attribute_spec* "(" declarator ")") ;
attribute_extension ::= (attribute_alias "(" string ")") | attribute_aligned | (attribute_aligned "(" tagged_attribute_number ")") | (attribute_aligned "(" alignof_expression ")") | attribute_always_inline | attribute_cdecl | (attribute_cleanup "(" tagged_attribute_id ")") | attribute_const | attribute_constructor | attribute_deprecated | attribute_destructor | attribute_dllexport | attribute_dllimport | attribute_eightbit | (attribute_exception "(" exception_function {exception_arg ","}* ")") | attribute_far | attribute_funvector | (attribute_format "(" format_archetype "," tagged_attribute_number "," tagged_attribute_number ")") | (attribute_format_arg "(" tagged_attribute_number ")") | attribute_interrupt | (attribute_interrupt "(" string ")") | attribute_interrupt_handler | (attribute_interrupt_handler "(" string ")") | attribute_longcall | attribute_long_call | attribute_malloc | attribute_may_alias | (attribute_mode "(" tagged_attribute_id ")") | (attribute_model "(" attribute_model_name ")") | attribute_naked | attribute_near | attribute_no_check_mem | attribute_no_instrument | attribute_nocommon | attribute_noinline | attribute_nonnull | (attribute_nonnull "(" tagged_attribute_number+ ")") | attribute_noreturn | attribute_nothrow | attribute_packed | attribute_pure | (attribute_regparm "(" tagged_attribute_number ")") | (attribute_section "(" string ")") | attribute_shared | attribute_short_call | (attribute_signal "(" string ")") | (attribute_sp_switch "(" string ")") | attribute_stdcall | attribute_tiny | (attribute_tls_model "(" tls_model_type ")") | attribute_trans_union | (attribute_trap_exit "(" tagged_attribute_number ")") | attribute_used | attribute_unused | (attribute_vector_size "(" tagged_attribute_number ")") | (attribute_visibility "(" visibility_type ")") | attribute_weak ;
compound_statement ::= "{" IN NL compound_statement_body "}" ";"? NL ;
 compound_statement ::= comment_NL* "..." ;
 compound_statement ::= "{" NL compound_statement_body* "}" ";"? NL ;
array_declarator_extension ::= "[" constant_expression? "]" ;
member_declaration ::= (decl_specifiers member_declarator+ semi) | preprocessor ;
 member_declaration ::= comment_NL ;
 member_declaration ::= (decl_specifiers member_declarator+ semi) | (decl_qualifier* struct_or_union_specifier semi) | semi | preprocessor ;
ptr_operator ::= "*" cv_qualifier* SPOFF ;
 ptr_operator ::= "*" ptr_qualifier* ;
preprocessor ::= ("#define" id "(" id+ ")" expression NL) | ("#define" id expression NL) | (EX "#else" IN NL) | (EX "#endif" NL NL) | (NL "#if" expression IN NL) | (NL "#ifdef" id IN NL) | (NL "#ifndef" id IN NL) | ("#ident" stringlit NL) | ("#include" stringlit NL) | ("#include" "<" SPOFF filepath ">" SPON NL) | ("#line" integernumber stringlit? NL) | ("#undef" id NL) | ("#LINK" stringlit NL) ;
 preprocessor ::= (EX "#endif" comment_NL? NL) | "..." ;
 preprocessor ::= "..." comment_NL? ;
 preprocessor ::= ("#" integernumber string integernumber* NL) | ("#pragma" SPON id* "(" {id ","}* ")" NL) ;
if_statement ::= "if" "(" expression ")" statement else_statement? ;
 if_statement ::= "if" "(" expression ")" comment_NL* statement else_statement? ;
assignment_expression ::= conditional_expression assignment_operation? ;
 assignment_expression ::= conditional_expression | (conditional_expression assignment_operation) ;
exception_function ::= (stringlit* stringlit) | tagged_attribute_id ;
declaration_body ::= (decl_specifiers init_declarator+) | enum_specifier | struct_or_union_specifier ;
 declaration_body ::= (decl_specifiers init_declarator+) | (decl_qualifier* struct_or_union_specifier) | (decl_qualifier* enum_specifier attribute_spec*) | (local_label declarator+) | asm_spec ;
enumerator ::= reference_id enumerator_value? ;
init_declarator ::= declarator initialization? ;
 init_declarator ::= declarator initialization? attributes_or_asm* ;
do_statement ::= "do" statement "while" "(" expression ")" semi ;
array_designator ::= ("[" constant_expression "]" postfix_extension*) | ("[" constant_expression SP "..." SP constant_expression "]" postfix_extension*) ;
function_declarator_extension ::= "(" argument_declaration_list ")" cv_qualifier* ;
enumerator_value ::= "=" constant_expression ;
gnu_long_int_string ::= "L" SPOFF string SPON ;
declarator ::= ptr_operator* base_declarator SPON declarator_extension* ;
 declarator ::= attribute_spec* ptr_operator* base_declarator declarator_extension* attribute_spec* ;
asm_statement ::= asm_spec semi ;
decl_specifiers ::= decl_qualifier* type_specifier? decl_qualifier* ;
 decl_specifiers ::= (decl_qualifier* type_specifier decl_qualifier*) | (decl_qualifier*) ;
unary_expression ::= postfix_expression | (unary_operator SPOFF unary_expression SPON) | ("(" type_name ")" unary_expression) | sizeof_expression ;
 unary_expression ::= alignof_expression ;
switch_statement ::= "switch" "(" expression ")" statement ;
 switch_statement ::= "switch" "(" expression ")" comment_NL* statement ;
constant ::= number | float | hex | long | (SP dotfloat) | charlit | string ;
 constant ::= gnu_long_int | (gnu_long_int_string+) | hexfloat ;
hexfloat ::= extension_specifier hex ;
filepath ::= file_id slash_fileid* ;
initialization ::= ("=" initializer) | ("(" constant_expression ")") ;
 initialization ::= comment_NL* "..." ;
gnu_long_int_charlit ::= "L" SPOFF charlit SPON ;
sizeof_expression ::= ("sizeof" "(" type_name ")") | ("sizeof" unary_expression) ;
 sizeof_expression ::= ("sizeof" unary_expression) | ("sizeof" "(" type_name ")") ;
comment_NL ::= comment NL ;
jump_statement ::= ("goto" label_id semi) | ("continue" semi) | ("break" semi) | ("return" expression? semi) ;
 jump_statement ::= "goto" ptr_operator expression semi ;
nonreference ::= nonreferential_primary postfix_extension* ;
struct_or_union_specifier ::= (struct_or_union tagged_reference_id? "{" IN NL member_declaration* EX "}") | (struct_or_union tagged_reference_id) ;
 struct_or_union_specifier ::= (struct_or_union attribute_spec* tagged_reference_id? "{" IN NL member_declaration* EX "}" attribute_spec*) | (struct_or_union attribute_spec* tagged_reference_id) ;
alignof_expression ::= ("__alignof__" "(" unary_expression ")") | ("__alignof" "(" unary_expression ")") | ("__alignof__" "(" type_name ")") | ("__alignof" "(" type_name ")") ;
compound_literal ::= ("(" struct_or_union_specifier ")" "{" {designated_initializer ","}* ","? "}") | ("(" compound_literal_array_type ")" "{" {designated_initializer ","}* ","? "}") | ("(" compound_literal ")") ;
KR_parameter_decls ::= NL IN declaration+ EX ;
function_definition ::= NL decl_specifiers declarator KR_parameter_decls? compound_statement NL ;
type_specifiers ::= (type_qualifier+ type_specifier? type_qualifier*) | (type_specifier type_qualifier*) ;
 type_specifiers ::= (type_qualifier* type_specifier type_qualifier*) | (type_qualifier*) ;
slash_fileid ::= slash file_id ;
expression ::= assignment_expression+ ;
 expression ::= comment_NL* "..." ;
binary_expression ::= unary_expression | (binary_expression binary_operator unary_expression) ;
bitfieldsize ::= ":" constant_expression ;
reference_expression ::= unannotated_reference_base postfix_extension* ;
expression_statement ::= expression semi ;
typeof_expression ::= (typeof_specifier "(" simple_type_name ")") | (typeof_specifier "(" expression ")") ;
compound_statement_body ::= (statement* EX) | (declaration compound_statement_body) ;
 compound_statement_body ::= (IN declaration EX) | (IN function_definition EX) | (IN statement EX) ;
asm_operand ::= string "(" expression ")" ;
argument_declaration_list ::= {argument_declaration ","}* ;
 argument_declaration_list ::= "..." comment_NL* ;
compound_literal_array_type ::= type_specifiers compound_literal_array_declarator ;
asm_output_operands ::= ":" {asm_operand ","}* ;
enum_specifier ::= ("enum" tagged_reference_id? "{" {enumerator ","}* "}") | ("enum" tagged_reference_id) ;
 enum_specifier ::= ("enum" tagged_reference_id) | ("enum" tagged_reference_id? "{" {enumerator ","}* ","? "}") ;
--------------------c::bruneliere.bgf--------------------
CSourceText ::= source::String fileName::String ;
CTypedElement ::= CParameter ;
 CTypedElement ::= CStructuralFeature ;
 CTypedElement ::= type::CClassifier source::CSourceText ;
--------------------c::cordy-malton-dahn.bgf--------------------
asm_spec ::= (asm cv_qualifier* "(" IN asm_template asm_output_operands? asm_input_operands? asm_clobbered_registers? EX ")") | (asm cv_qualifier* "{" IN asm_instruction_semi* asm_instruction semi? EX "}") ;
comma_dotdotdot ::= "," SP "..." SP ;
constructor_expression ::= ("(" constructor_type ")" "{" {initializer ","}* ","? "}") | ("(" constructor_expression ")") ;
equality_expression ::= relational_expression equality_relational_expression* ;
KR_simple_type_name ::= simple_type_name | (struct_or_union id) | enum_specifier | bit_qualifier ;
assign_assignment_expression ::= assignment_operator assignment_expression ;
extern_langauge_declaration ::= "extern" stringlit "{" IN NL declaration* EX "}" ";"? NL ;
argument_declaration ::= (decl_specifiers argument_declarator?) | ("(" argument_declaration ")") ;
error_statement ::= "error" ":"? id+ "+"? id* semi? ;
simple_statement_opt_semi ::= simple_statement semi? ;
member_declarator ::= (declarator bitfieldsize? sub_member_declarators? attributes_or_asm*) | bitfieldsize ;
postfix_extension ::= ("[" SPON assignment_expression SPOFF "]") | (SP "(" SPON {argument_expression ","}* dotdot? SPOFF ")") | ("." id) | ("->" id macro_call?) | "++" | "--" ;
label ::= (EX label_id ":" IN NL) | (EX SP SP "case" constant_expression ":" IN NL) | (EX SP SP "default" ":" IN NL) | (EX SP SP "case" constant_expression SP "..." SP constant_expression ":" IN NL) ;
argument_declarator ::= (declarator attributes_or_asm*) | (abstract_declarator attributes_or_asm*) ;
OR_logical_AND_expression ::= logical_OR_operator logical_AND_expression ;
macro_call ::= macro_name "(" macro_arguments ")" ;
conditional_expression ::= logical_OR_expression conditional_operation? ;
element_label ::= "."? element_name element_name_extension* ;
complex_specifier ::= complex simple_type_or_qualifier* ;
conditional_operation ::= "?" expression? ":" conditional_expression ;
additive_expression ::= multiplicative_expression add_subtract_multiplicative_expression* ;
else_statement ::= preprocessor* "else" else_sub_statement ;
dotdotdot ::= SP "..." SP ;
unknown_item ::= ("{" unknown_item* "}") | token | key ;
preprocessor_function_header ::= (NL preprocessor function_header) | (NL function_header) ;
asm_input_operands ::= ":" {asm_operand ","}* NL ;
function_definition_or_declaration ::= function_definition | declaration | preprocessor | (compound_statement NL) | macro_declaration_or_statement | unknown_declaration_or_statement ;
initializer ::= (preprocessor* initializer_unit+) | (ε initializer_unit) ;
while_statement ::= ("while" "(" expression_list ")" sub_statement else_statement?) | (whileeachid "(" expression_list ")" sub_statement else_statement?) ;
compound_statement ::= "{" IN NL compound_statement_body EX "}" ";"? NL preprocessor* ;
AND_inclusive_OR_expression ::= preprocessor* logical_AND_operator inclusive_OR_expression ;
register_spec ::= ("%" SPOFF "%"? id SPON) | ("%" SPOFF "%"? integernumber id? SPON) ;
array_declarator_extension ::= "[" constant_expression? "]" ;
ptr_operator ::= (nf_qualifier? "*" SPOFF ptr_qualifier*) | (nf_qualifier? "(" "*" ")" SPOFF ptr_qualifier*) ;
function_header ::= (decl_specifiers? declarator function_declarator_extension attribute_spec*) | ("YY_DECL" NL) ;
macro_argument ::= ("(" macro_arguments ")") | token | key ;
if_statement ::= ("if" "(" expression_list preprocessor* ")" sub_statement else_statement?) | ("if" postfix_expression sub_statement else_statement?) ;
macro_declaration_or_statement ::= (reference_id_equals? macro_call equals_initializer? ";"? NL) | (upper_macro_name ";"? NL) ;
asm_instruction ::= asm_unit+ NL ;
sub_unary_expression ::= postfix_expression | (unary_operator SPOFF cast_expression SPON) | (SPON sizeof_expression) | (SPON alignof_expression) ;
enumerator ::= preprocessor* reference_id enumerator_value? ;
asm_instruction_semi ::= asm_unit+ ";" NL ;
initializer_unit ::= assignment_expression | compound_initializer | (NL element_label colon_equals_or_equals? initializer ";"?) | (NL "[" constant_expression dotdotdot? constant_expression? "]" "="? initializer ";"?) | macro_call ;
init_declarator ::= declarator attributes_or_asm* initialization? ;
logical_OR_expression ::= logical_AND_expression OR_logical_AND_expression* ;
do_statement ::= ("do" sub_statement "while" "(" expression_list ")" semi) | ("do" sub_statement "while" macro_call semi) | ("do" sub_statement whileeachid "(" expression_list ")" semi) ;
function_declarator_extension ::= "(" argument_declaration_list ")" cv_qualifier* ;
machinestart_declaration ::= "MACHINE_START" "(" expression_list ")" IN {initializer ","}* ","? EX NL "MACHINE_END" ";"? NL ;
pseudo_string ::= ps_name ps_arguments? ;
comma_expression_statement ::= "," expression_statement ;
preprocessor_list_initializer ::= preprocessor {initializer ","}* ","? ;
relational_expression ::= shift_expression relational_shift_expression* ;
multipy_divide_cast_expression ::= multiplicative_operator cast_expression ;
shift_additive_expression ::= shift_operator additive_expression ;
unary_expression ::= pre_increment_operator* sub_unary_expression SPON ;
cast_operator ::= "(" type_name ")" ;
constant ::= number | float | hex | long | (SP dotfloat) | charlit | string | gnu_long_int | gnu_long_int_string | hexfloat ;
postfix_expression ::= primary SPOFF postfix_extension* SPON ;
initialization ::= (initdata? "=" initializer) | ("(" constant_expression ")") | macro_call ;
gnu_long_int_charlit ::= "L" SPOFF charlit SPON ;
sizeof_expression ::= ("sizeof" "(" type_name ")") | ("sizeof" unary_expression) ;
jump_statement ::= ("goto" label_id) | "continue" | "break" | ("return" expression?) | ("goto" ptr_operator expression) | ("return" expression attribute_spec?) ;
sub_member_declarators ::= "(" {member_declarator ","}* ")" ;
struct_or_union_specifier ::= (struct_or_union attribute_spec* reference_id? struct_or_union_body attribute_spec*) | (struct_or_union attribute_spec* reference_id attribute_spec*) ;
exclusive_OR_AND_expression ::= bit_XOR_operator AND_expression ;
type_specifiers ::= (type_qualifier* type_specifier type_qualifier*) | (type_qualifier+) ;
ptr_qualifier ::= (SPON cv_qualifier) | (SPON inline_qualifier) | (SPON restrict_qualifier) | (SPON init_qualifier) | (SPON exit_qualifier) | (SPON user_qualifier) | (SPON zexport_qualifier) ;
cast_expression ::= cast_operator* unary_expression ;
exclusive_OR_expression ::= AND_expression exclusive_OR_AND_expression* ;
pre_increment_operator ::= ("++" SPOFF) | ("--" SPOFF) ;
bitfieldsize ::= ":" constant_expression ;
relational_shift_expression ::= relational_operator shift_expression ;
expression_statement ::= pre_increment_operator* assignment_expression assign_assignment_expression* comma_expression_statement? ;
argument_declaration_list ::= {argument_declaration ","}* comma_dotdotdot? ;
asm_output_operands ::= ":" {asm_operand ","}* NL ;
attribute_spec ::= (attribute_specifier "('(" {attribute_extension ","}* ")')") | (IN NL acquires_releases "(" expression ")" EX) | upper_macro_name ;
compound_statement_expression ::= "(" compound_statement ")" ;
declaration ::= (decl_specifiers {init_declarator ","}* semi) | (decl_specifiers declarator "=" compound_initializer NL) | extern_langauge_declaration | null_declaration | (local_label declarator+) | asm_spec | machinestart_declaration | preprocessor ;
for_statement ::= ("for" "(" expression_list? ";" expression_list? ";" expression_list? ")" sub_statement) | ("for" "(" decl_specifiers init_declarator+ ";" expression_list? ";" expression_list? ")" sub_statement) | ("for" "(" expression_list? ";" expression_list? ")" sub_statement) | (foreachid "(" expression_list ")" sub_statement) ;
shift_expression ::= additive_expression shift_additive_expression* ;
AND_equality_expression ::= bit_AND_operator equality_expression ;
attribute_arguments ::= "(" attribute_argument+ ")" ;
type_name ::= type_specifiers abstract_declarator* ;
statement ::= (preprocessor* label* unlabeled_statement) | label | preprocessor ;
reference_id_equals ::= reference_id "=" ;
c_unlabeled_statement ::= (simple_statement semi) | structured_statement ;
abstract_declarator ::= (ptr_operator+ declarator_extension* SPON) | array_declarator_extension | ("(" abstract_declarator+ ")" declarator_extension*) | ("(" type_name+ ")") | "static" ;
semi ::= ";" NL ;
decl_qualifier_or_type_specifier ::= decl_qualifier | type_specifier | (macro_specifier nosemiNL?) ;
unary_expression_assign ::= unary_expression assignment_operator ;
macro_type_arguments ::= "(" {macro_type_argument ","}* ")" ;
declspec_specifier ::= "__declspec" "(" decl_specifiers ")" ;
equals_initializer ::= ("=" initializer) | initializer ;
inclusive_OR_expression ::= exclusive_OR_expression OR_exclusive_OR_expression* ;
dotdot ::= SP ".." SP ;
constructor_type ::= struct_or_union_specifier | (type_specifiers ptr_operator* array_declarator_extension*) ;
asm_clobbered_registers ::= ":" {asm_register ","}* NL ;
base_declarator ::= reference_id | (SPON "(" decl_specifiers? declarator ")") ;
attribute_extension ::= attribute_name attribute_arguments? ;
argument_expression ::= (preprocessor* id? assignment_expression id? colon_number? preprocessor*) | type_name | structured_statement | equality_operator | relational_operator | (assignment_operator assignment_expression) | "do" | "extern" | "continue" | ε ;
member_declaration ::= (decl_specifiers {member_declarator ","}* semi) | null_declaration | preprocessor ;
preprocessor ::= TAB_1 preprocessor_line NL ;
compound_initializer ::= ("{" "}") | ("{" IN {initializer ","}* ","? ";"? preprocessor_list_initializer* EX NL "}") ;
assignment_expression ::= conditional_expression | (unary_expression_assign assignment_expression) ;
KR_simple_declaration ::= decl_specifiers? KR_simple_type_name decl_specifiers? declarator+ semi ;
OR_exclusive_OR_expression ::= bit_OR_operator exclusive_OR_expression ;
enumerator_value ::= "=" constant_expression ;
gnu_long_int_string ::= "L" SPOFF string SPON ;
declarator ::= attribute_spec* ptr_operator* base_declarator SPON declarator_extension* attribute_spec* ;
sub_statement ::= compound_statement | (IN NL statement EX) | (IN NL macro_declaration_or_statement EX) ;
element_name_extension ::= ("." element_name) | ("[" constant_expression "]") ;
equality_relational_expression ::= equality_operator relational_expression ;
string_unit_NL ::= string_unit NL ;
colon_number ::= ":" number ;
switch_statement ::= ("switch" "(" expression_list ")" sub_statement) | ("switch" macro_call sub_statement) ;
hexfloat ::= extension_specifier hex ;
multiplicative_expression ::= cast_expression multipy_divide_cast_expression* ;
AND_expression ::= equality_expression AND_equality_expression* ;
alignof_expression ::= alignof_specifier "(" expression_or_type_name ")" ;
KR_parameter_decls ::= NL IN KR_simple_declaration+ EX ;
ps_arguments ::= "(" ps_argument_list ")" ;
function_definition ::= NL function_header preprocessor_function_header* KR_parameter_decls? compound_statement NL ;
logical_AND_expression ::= inclusive_OR_expression AND_inclusive_OR_expression* ;
add_subtract_multiplicative_expression ::= additive_operator multiplicative_expression ;
bracketed_id ::= "[" id "]" ;
string ::= (stringlit string_unit*) | (pseudo_string stringlit string_unit*) ;
unknown_declaration_or_statement ::= (unknown_item+ ";" NL) | (unknown_item+ NL) ;
typeof_expression ::= typeof_specifier "(" expression_or_type_name ")" ;
asm_operand ::= (bracketed_id? string "(" expression ")") | (pseudo_string "(" expression ")") ;
struct_or_union_body ::= "{" IN NL member_declaration* EX "}" ;
primary ::= reference_id | constant | string | ("(" SPON expression_list ","? ")") | ("{" SPON expression_list ","? "}") | (SPON extension_specifier "(" expression_list ")") | (SPON constructor_expression) | (SPON asm_spec) ;
enum_specifier ::= ("enum" reference_id) | ("enum" reference_id? "{" {enumerator ","}* ","? preprocessor* "}") ;
attribute_argument ::= ("(" attribute_argument* ")") | token_or_key ;
--------------------c::cordy-malton.bgf--------------------
do_statement ::= "do" statement "while" "(" expression ")" semi ;
declaration ::= (declaration_body semi) | preprocessor ;
for_statement ::= "for" "(" expression? ";" expression? ";" expression? ")" statement ;
argument_declaration ::= (decl_specifiers argument_declarator?) | "..." ;
function_declarator_extension ::= "(" argument_declaration_list ")" cv_qualifier* ;
member_declarator ::= (declarator bitfieldsize?) | bitfieldsize ;
enumerator_value ::= "=" constant_expression ;
postfix_extension ::= ("[" expression "]") | ("(" expression? ")") | ("." id) | ("->" id) | "++" | "--" ;
assignment_operation ::= assignment_operator assignment_expression ;
label ::= (label_id ":") | (EX SP SP "case" constant_expression ":" IN NL) | (EX SP SP "default" ":" IN NL) ;
declarator ::= ptr_operator* base_declarator SPON declarator_extension* ;
conditional_expression ::= binary_expression conditional_operation? ;
type_name ::= type_specifiers abstract_declarator? ;
statement ::= (label* unlabeled_statement) | preprocessor ;
semi ::= ";" NL ;
abstract_declarator ::= (ptr_operator+ declarator_extension*) | ("(" abstract_declarator ")" declarator_extension*) ;
conditional_operation ::= "?" expression ":" conditional_expression ;
decl_specifiers ::= decl_qualifier* type_specifier? decl_qualifier* ;
else_statement ::= "else" statement ;
unary_expression ::= postfix_expression | (unary_operator SPOFF unary_expression SPON) | ("(" type_name ")" unary_expression) | sizeof_expression ;
switch_statement ::= "switch" "(" expression ")" statement ;
constant ::= number | float | hex | long | (SP dotfloat) | charlit | string ;
initializer ::= expression | (NL "{" IN {initializer ","}* ","? EX "}") ;
filepath ::= file_id slash_fileid* ;
while_statement ::= "while" "(" expression ")" statement ;
initialization ::= ("=" initializer) | ("(" constant_expression ")") ;
base_declarator ::= reference_id | ("(" declarator ")") ;
nonreferential_primary ::= constant | string | ("(" expression ")") ;
sizeof_expression ::= ("sizeof" "(" type_name ")") | ("sizeof" unary_expression) ;
jump_statement ::= ("goto" label_id semi) | ("continue" semi) | ("break" semi) | ("return" expression? semi) ;
nonreference ::= nonreferential_primary postfix_extension* ;
struct_or_union_specifier ::= (struct_or_union tagged_reference_id? "{" IN NL member_declaration* EX "}") | (struct_or_union tagged_reference_id) ;
KR_parameter_decls ::= NL IN declaration+ EX ;
compound_statement ::= "{" IN NL compound_statement_body "}" ";"? NL ;
function_definition ::= NL decl_specifiers declarator KR_parameter_decls? compound_statement NL ;
type_specifiers ::= (type_qualifier+ type_specifier? type_qualifier*) | (type_specifier type_qualifier*) ;
slash_fileid ::= slash file_id ;
array_declarator_extension ::= "[" constant_expression? "]" ;
binary_expression ::= unary_expression | (binary_expression binary_operator unary_expression) ;
member_declaration ::= (decl_specifiers member_declarator+ semi) | preprocessor ;
ptr_operator ::= "*" cv_qualifier* SPOFF ;
preprocessor ::= ("#define" id "(" id+ ")" expression NL) | ("#define" id expression NL) | (EX "#else" IN NL) | (EX "#endif" NL NL) | (NL "#if" expression IN NL) | (NL "#ifdef" id IN NL) | (NL "#ifndef" id IN NL) | ("#ident" stringlit NL) | ("#include" stringlit NL) | ("#include" "<" SPOFF filepath ">" SPON NL) | ("#line" integernumber stringlit? NL) | ("#undef" id NL) | ("#LINK" stringlit NL) ;
bitfieldsize ::= ":" constant_expression ;
if_statement ::= "if" "(" expression ")" statement else_statement? ;
reference_expression ::= unannotated_reference_base postfix_extension* ;
assignment_expression ::= conditional_expression assignment_operation? ;
expression_statement ::= expression semi ;
declaration_body ::= (decl_specifiers init_declarator+) | enum_specifier | struct_or_union_specifier ;
compound_statement_body ::= (statement* EX) | (declaration compound_statement_body) ;
enumerator ::= reference_id enumerator_value? ;
init_declarator ::= declarator initialization? ;
enum_specifier ::= ("enum" tagged_reference_id? "{" {enumerator ","}* "}") | ("enum" tagged_reference_id) ;
--------------------c::lankamp.bgf--------------------
MoreParameters ::= "," "..." ;
Declaration ::= [DeclarationWithoutInitDecls] specs::(Specifier+) ";" ;
 Declaration ::= [DeclarationWithInitDecls] specs::(Specifier+) initDeclarators::({InitDeclarator ","}+) ";" ;
Expression ::= CharacterConstant ;
 Expression ::= Expression "--" ;
 Expression ::= [Variable] Identifier ;
 Expression ::= Expression "[" Expression "]" ;
 Expression ::= [Bracket] "(" Expression ")" ;
 Expression ::= "sizeof" "(" TypeName ")" ;
 Expression ::= Expression "++" ;
 Expression ::= FloatingPointConstant ;
 Expression ::= Expression "." Identifier ;
 Expression ::= StringConstant ;
 Expression ::= IntegerConstant ;
 Expression ::= HexadecimalConstant ;
 Expression ::= Expression "->" Identifier ;
 Expression ::= Expression "(" {NonCommaExpression ","}* ")" ;
 Expression ::= Expression ;
 Expression ::= [SizeOfExpression] "sizeof" exp::Expression ;
 Expression ::= "&" Expression ;
 Expression ::= "!" Expression ;
 Expression ::= "(" TypeName ")" Expression ;
 Expression ::= "*" Expression ;
 Expression ::= "+" Expression ;
 Expression ::= "-" Expression ;
 Expression ::= "~" Expression ;
 Expression ::= [MultiplicationExpression] lexp::Expression "*" rexp::Expression ;
 Expression ::= Expression "/" Expression ;
 Expression ::= Expression "%" Expression ;
 Expression ::= Expression "+" Expression ;
 Expression ::= Expression "-" Expression ;
 Expression ::= Expression ">>" Expression ;
 Expression ::= Expression "<<" Expression ;
 Expression ::= Expression "<=" Expression ;
 Expression ::= Expression ">=" Expression ;
 Expression ::= Expression ">" Expression ;
 Expression ::= Expression "<" Expression ;
 Expression ::= Expression "==" Expression ;
 Expression ::= Expression "!=" Expression ;
 Expression ::= Expression "&" Expression ;
 Expression ::= Expression "^" Expression ;
 Expression ::= Expression "|" Expression ;
 Expression ::= Expression "&&" Expression ;
 Expression ::= Expression "||" Expression ;
 Expression ::= Expression "?" Expression ":" Expression ;
 Expression ::= Expression "|=" Expression ;
 Expression ::= Expression "&=" Expression ;
 Expression ::= Expression "*=" Expression ;
 Expression ::= Expression "/=" Expression ;
 Expression ::= Expression "+=" Expression ;
 Expression ::= Expression ">>=" Expression ;
 Expression ::= Expression "^=" Expression ;
 Expression ::= Expression "-=" Expression ;
 Expression ::= Expression "<<=" Expression ;
 Expression ::= Expression "%=" Expression ;
 Expression ::= Expression "=" Expression ;
 Expression ::= [CommaExpression] Expression "," Expression ;
GlobalDeclaration ::= [GlobalDeclarationWithoutInitDecls] specs::(Specifier+) ";" ;
 GlobalDeclaration ::= [GlobalDeclarationWithInitDecls] specs::(Specifier*) initDeclarators::({InitDeclarator ","}+) ";" ;
AbstractDeclarator ::= [Identifier] AnonymousIdentifier ;
 AbstractDeclarator ::= [ArrayDeclarator] decl::AbstractDeclarator "[" exp::(Expression?) "]" ;
 AbstractDeclarator ::= [Bracket] "(" decl::AbstractDeclarator ")" ;
 AbstractDeclarator ::= [FunctionDeclarator] decl::AbstractDeclarator "(" params::(Parameters?) ")" ;
 AbstractDeclarator ::= [PointerDeclarator] "*" qualifiers::(TypeQualifier*) decl::AbstractDeclarator ;
PrototypeDeclarator ::= [FunctionDeclarator] decl::PrototypeDeclarator "(" params::(PrototypeParameters?) ")" ;
 PrototypeDeclarator ::= [Identifier] Identifier ;
 PrototypeDeclarator ::= [Bracket] "(" decl::AbstractDeclarator ")" ;
 PrototypeDeclarator ::= [ArrayDeclarator] decl::PrototypeDeclarator "[" exp::(Expression?) "]" ;
 PrototypeDeclarator ::= [PointerDeclarator] "*" qualifiers::(TypeQualifier*) decl::PrototypeDeclarator ;
Declarator ::= [ArrayDeclarator] decl::Declarator "[" exp::(Expression?) "]" ;
 Declarator ::= [Identifier] Identifier ;
 Declarator ::= [FunctionDeclarator] decl::Declarator "(" params::(Parameters?) ")" ;
 Declarator ::= [Bracket] "(" decl::Declarator ")" ;
 Declarator ::= [PointerDeclarator] "*" qualifiers::(TypeQualifier*) decl::Declarator ;
Statement ::= "default" ":" Statement ;
 Statement ::= "switch" "(" Expression ")" Statement ;
 Statement ::= "return" ";" ;
 Statement ::= "for" "(" Expression? ";" Expression? ";" Expression? ")" Statement ;
 Statement ::= "case" Expression ":" Statement ;
 Statement ::= "continue" ";" ;
 Statement ::= ";" ;
 Statement ::= "goto" Identifier ";" ;
 Statement ::= "do" Statement "while" "(" Expression ")" ";" ;
 Statement ::= "{" Declaration* Statement* "}" ;
 Statement ::= "while" "(" Expression ")" Statement ;
 Statement ::= "break" ";" ;
 Statement ::= "if" "(" Expression ")" Statement ;
 Statement ::= Identifier ":" Statement ;
 Statement ::= Expression ";" ;
 Statement ::= "if" "(" Expression ")" Statement "else" Statement ;
 Statement ::= "return" Expression ";" ;
PrototypeParameters ::= "void" ;
 PrototypeParameters ::= {PrototypeParameter ","}+ MoreParameters? ;
FunctionDefinition ::= [DefaultFunctionDefinition] specs::(Specifier*) Declarator Declaration* "{" Declaration* Statement* "}" ;
FunctionPrototype ::= [DefaultFunctionPrototype] specs::(Specifier*) decl::PrototypeDeclarator ";" ;
Parameters ::= {Parameter ","}+ MoreParameters? ;
 Parameters ::= "void" ;
Parameter ::= Specifier* Declarator ;
PrototypeParameter ::= Specifier* AbstractDeclarator ;
StructDeclarator ::= Declarator ;
 StructDeclarator ::= Declarator? ":" Expression ;
TypeName ::= Specifier+ AbstractDeclarator ;
StructDeclaration ::= [StructDeclWithoutDecl] specs::(Specifier+) ";" ;
 StructDeclaration ::= [StructDeclWithDecl] specs::(Specifier+) {StructDeclarator ","}+ ";" ;
Enumerator ::= Identifier ;
 Enumerator ::= Identifier "=" NonCommaExpression ;
TypeSpecifier ::= [StructDecl] "struct" Identifier "{" StructDeclaration* "}" ;
 TypeSpecifier ::= [Union] "union" Identifier ;
 TypeSpecifier ::= [Int] "int" ;
 TypeSpecifier ::= [Void] "void" ;
 TypeSpecifier ::= [StructAnonDecl] "struct" "{" StructDeclaration* "}" ;
 TypeSpecifier ::= [Short] "short" ;
 TypeSpecifier ::= [Identifier] Identifier ;
 TypeSpecifier ::= [EnumDecl] "enum" Identifier "{" {Enumerator ","}+ "}" ;
 TypeSpecifier ::= "signed" ;
 TypeSpecifier ::= [UnionDecl] "union" Identifier "{" StructDeclaration* "}" ;
 TypeSpecifier ::= [UnionAnonDecl] "union" "{" StructDeclaration* "}" ;
 TypeSpecifier ::= [Enum] "enum" Identifier ;
 TypeSpecifier ::= [Struct] "struct" Identifier ;
 TypeSpecifier ::= "unsigned" ;
 TypeSpecifier ::= [Long] "long" ;
 TypeSpecifier ::= [Double] "double" ;
 TypeSpecifier ::= [Float] "float" ;
 TypeSpecifier ::= [EnumAnonDecl] "enum" "{" {Enumerator ","}+ "}" ;
 TypeSpecifier ::= [Char] "char" ;
Initializer ::= "{" {Initializer ","}+ ","? "}" ;
 Initializer ::= NonCommaExpression ;
InitDeclarator ::= decl::Declarator "=" Initializer ;
 InitDeclarator ::= [decl] Declarator ;
--------------------cpp::iso-n2723.bgf--------------------
iteration-statement ::= ("while" "(" condition ")" statement) | ("do" statement "while" "(" expression ")" ";") | ("for" "(" for-init-statement condition? ";" expression? ")" statement) ;
braced-init-list ::= ("{" initializer-list ","? "}") | ("{" "}") ;
new-declarator ::= (ptr-operator new-declarator?) | direct-new-declarator ;
relational-expression ::= shift-expression | (relational-expression "<" shift-expression) | (relational-expression ">" shift-expression) | (relational-expression "<=" shift-expression) | (relational-expression ">=" shift-expression) ;
logical-or-expression ::= logical-and-expression | (logical-or-expression "||" logical-and-expression) ;
alias-declaration ::= "using" identifier "=" type-id ";" ;
init-declarator-list ::= init-declarator | (init-declarator-list "," init-declarator) ;
type-id-list ::= (type-id "..."?) | (type-id-list "," type-id "..."?) ;
type-specifier-seq ::= type-specifier type-specifier-seq? ;
enumerator-definition ::= enumerator | (enumerator "=" constant-expression) ;
exception-declaration ::= (type-specifier-seq declarator) | (type-specifier-seq abstract-declarator) | type-specifier-seq | "..." ;
linkage-specification ::= ("extern" string-literal "{" declaration-seq? "}") | ("extern" string-literal declaration) ;
try-block ::= "try" compound-statement handler-seq ;
lambda-parameter-declaration-list ::= lambda-parameter | (lambda-parameter "," lambda-parameter-declaration-list) ;
delete-expression ::= ("::"? "delete" cast-expression) | ("::"? "delete" "[" "]" cast-expression) ;
expression-statement ::= expression? ";" ;
conversion-function-id ::= "operator" conversion-type-id ;
lambda-introducer ::= "[" lambda-capture? "]" ;
new-placement ::= "(" expression-list ")" ;
function-body ::= (ctor-initializer? compound-statement) | function-try-block ;
unary-expression ::= postfix-expression | ("++" cast-expression) | ("--" cast-expression) | (unary-operator cast-expression) | ("sizeof" unary-expression) | ("sizeof" "(" type-id ")") | ("sizeof" "..." "(" identifier ")") | ("alignof" "(" type-id ")") | new-expression | delete-expression ;
template-parameter-list ::= template-parameter | (template-parameter-list "," template-parameter) ;
explicit-instantiation ::= "extern"? "template" declaration ;
unnamed-namespace-definition ::= "inline"? "namespace" "{" namespace-body "}" ;
enum-specifier ::= (enum-key identifier? enum-base? "{" enumerator-list? "}") | (enum-key identifier? enum-base? "{" enumerator-list "," "}") ;
postfix-expression ::= primary-expression | (postfix-expression "[" expression "]") | (postfix-expression "[" braced-init-list "]") | (postfix-expression "(" expression-list? ")") | (simple-type-specifier "(" expression-list? ")") | (typename-specifier "(" expression-list? ")") | (simple-type-specifier braced-init-list) | (typename-specifier braced-init-list) | (postfix-expression "." "template"? id-expression) | (postfix-expression "->" "template"? id-expression) | (postfix-expression "." pseudo-destructor-name) | (postfix-expression "->" pseudo-destructor-name) | (postfix-expression "++") | (postfix-expression "--") | ("dynamic_cast" "<" type-id ">" "(" expression ")") | ("static_cast" "<" type-id ">" "(" expression ")") | ("reinterpret_cast" "<" type-id ">" "(" expression ")") | ("const_cast" "<" type-id ">" "(" expression ")") | ("typeid" "(" expression ")") | ("typeid" "(" type-id ")") ;
multiplicative-expression ::= pm-expression | (multiplicative-expression "*" pm-expression) | (multiplicative-expression "/" pm-expression) | (multiplicative-expression "%" pm-expression) ;
selection-statement ::= ("if" "(" condition ")" statement) | ("if" "(" condition ")" statement "else" statement) | ("switch" "(" condition ")" statement) ;
decl-specifier-seq ::= decl-specifier-seq? decl-specifier ;
qualified-id ::= ("::"? nested-name-specifier "template"? unqualified-id) | ("::" identifier) | ("::" operator-function-id) | ("::" template-id) ;
base-clause ::= ":" base-specifier-list ;
mem-initializer ::= (mem-initializer-id "(" expression-list? ")") | (mem-initializer-id braced-init-list) ;
function-definition ::= (decl-specifier-seq? declarator function-body) | (decl-specifier-seq? declarator "=" "default" ";") | (decl-specifier-seq? declarator "=" "delete" ";") ;
pm-expression ::= cast-expression | (pm-expression ".*" cast-expression) | (pm-expression "->*" cast-expression) ;
cast-expression ::= unary-expression | ("(" type-id ")" cast-expression) ;
simple-type-specifier ::= ("::"? nested-name-specifier? type-name) | ("::"? nested-name-specifier "template" simple-template-id) | "char" | "char16_t" | "char32_t" | "wchar_t" | "bool" | "short" | "int" | "long" | "signed" | "unsigned" | "float" | "double" | "void" | "auto" | ("decltype" "(" expression ")") ;
asm-definition ::= "asm" "(" string-literal ")" ";" ;
new-expression ::= ("::"? "new" new-placement? new-type-id new-initializer?) | ("::"? "new" new-placement? "(" type-id ")" new-initializer?) ;
static_assert-declaration ::= "static_assert" "(" constant-expression "," string-literal ")" ";" ;
initializer ::= ("=" initializer-clause) | ("(" expression-list ")") | braced-init-list ;
direct-new-declarator ::= ("[" expression "]") | (direct-new-declarator "[" constant-expression "]") ;
cv-qualifier-seq ::= cv-qualifier cv-qualifier-seq? ;
new-type-id ::= type-specifier-seq new-declarator? ;
throw-expression ::= "throw" assignment-expression? ;
simple-declaration ::= decl-specifier-seq? init-declarator-list? ";" ;
mem-initializer-id ::= ("::"? nested-name-specifier? class-name) | identifier ;
lambda-expression ::= lambda-introducer lambda-parameter-declaration? compound-statement ;
handler-seq ::= handler handler-seq? ;
direct-abstract-declarator ::= (direct-abstract-declarator? "(" parameter-declaration-clause ")" cv-qualifier-seq? ref-qualifier? exception-specification?) | (direct-abstract-declarator? "(" parameter-declaration-clause ")" cv-qualifier-seq? ref-qualifier? exception-specification? "->" type-id) | (direct-abstract-declarator? "[" constant-expression? "]") | ("(" abstract-declarator ")") ;
conversion-type-id ::= type-specifier-seq conversion-declarator? ;
type-parameter ::= ("class" "..."? identifier?) | ("class" identifier? "=" type-id) | ("typename" "..."? identifier?) | ("typename" identifier? "=" type-id) | ("template" "<" template-parameter-list ">" "class" "..."? identifier?) | ("template" "<" template-parameter-list ">" "class" identifier? "=" id-expression) ;
parameter-declaration ::= (decl-specifier-seq declarator) | (decl-specifier-seq declarator "=" assignment-expression) | (decl-specifier-seq abstract-declarator?) | (decl-specifier-seq abstract-declarator? "=" assignment-expression) ;
alignment-specifier ::= ("alignas" "(" constant-expression ")") | ("alignas" "(" type-id ")") ;
extension-namespace-definition ::= "inline"? "namespace" original-namespace-name "{" namespace-body "}" ;
exclusive-or-expression ::= and-expression | (exclusive-or-expression "^" and-expression) ;
pseudo-destructor-name ::= ("::"? nested-name-specifier? type-name "::" "~" type-name) | ("::"? nested-name-specifier "template" simple-template-id "::" "~" type-name) | ("::"? nested-name-specifier? "~" type-name) ;
lambda-parameter-declaration ::= "(" lambda-parameter-declaration-list? ")" "mutable"? exception-specification? lambda-return-type-clause? ;
template-id ::= simple-template-id | (operator-function-id "<" template-argument-list? ">") ;
and-expression ::= equality-expression | (and-expression "&" equality-expression) ;
compound-statement ::= "{" statement-seq? "}" ;
equality-expression ::= relational-expression | (equality-expression "==" relational-expression) | (equality-expression "!=" relational-expression) ;
handler ::= "catch" "(" exception-declaration ")" compound-statement ;
base-specifier-list ::= (base-specifier "..."?) | (base-specifier-list "," base-specifier "..."?) ;
conversion-declarator ::= ptr-operator conversion-declarator? ;
member-declaration ::= (decl-specifier-seq? member-declarator-list? ";") | (function-definition ";"?) | ("::"? nested-name-specifier "template"? unqualified-id ";") | using-declaration | static_assert-declaration | template-declaration ;
using-directive ::= "using" "namespace" "::"? nested-name-specifier? namespace-name ";" ;
function-try-block ::= "try" ctor-initializer? compound-statement handler-seq ;
parameter-declaration-clause ::= (parameter-declaration-list? "..."?) | (parameter-declaration-list "," "...") ;
capture ::= identifier | ("&" identifier) | "this" ;
capture-list ::= capture | (capture-list "," capture) ;
explicit-specialization ::= "template" "<" ">" declaration ;
member-declarator ::= (declarator pure-specifier?) | (declarator constant-initializer?) | (identifier? ":" constant-expression) ;
primary-expression ::= literal | "this" | ("(" expression ")") | id-expression | lambda-expression ;
shift-expression ::= additive-expression | (shift-expression "<<" additive-expression) | (shift-expression ">>" additive-expression) ;
base-specifier ::= ("::"? nested-name-specifier? class-name) | ("virtual" access-specifier? "::"? nested-name-specifier? class-name) | (access-specifier "virtual"? "::"? nested-name-specifier? class-name) ;
lambda-capture ::= capture-default | capture-list | (capture-default "," capture-list) ;
conditional-expression ::= logical-or-expression | (logical-or-expression "?" expression ":" assignment-expression) ;
abstract-declarator ::= (ptr-operator abstract-declarator?) | direct-abstract-declarator | "..." ;
elaborated-type-specifier ::= (class-key "::"? nested-name-specifier? identifier) | (class-key "::"? nested-name-specifier? "template"? simple-template-id) | (enum-key "::"? nested-name-specifier? identifier) ;
constant-initializer ::= "=" constant-expression ;
additive-expression ::= multiplicative-expression | (additive-expression "+" multiplicative-expression) | (additive-expression "-" multiplicative-expression) ;
declarator-id ::= ("..."? id-expression) | ("::"? nested-name-specifier? class-name) ;
typename-specifier ::= ("typename" "::"? nested-name-specifier identifier) | ("typename" "::"? nested-name-specifier "template"? simple-template-id) ;
new-initializer ::= ("(" expression-list? ")") | braced-init-list ;
labeled-statement ::= (identifier ":" statement) | ("case" constant-expression ":" statement) | ("default" ":" statement) ;
parameter-declaration-list ::= parameter-declaration | (parameter-declaration-list "," parameter-declaration) ;
simple-template-id ::= template-name "<" template-argument-list? ">" ;
using-declaration ::= ("using" "typename"? "::"? nested-name-specifier unqualified-id ";") | ("using" "::" unqualified-id ";") ;
declarator ::= direct-declarator | (ptr-operator declarator) ;
ctor-initializer ::= ":" mem-initializer-list ;
pure-specifier ::= "=" "0" ;
class-specifier ::= class-head "{" member-specification? "}" ;
initializer-list ::= (initializer-clause "..."?) | (initializer-list "," initializer-clause "..."?) ;
template-declaration ::= "export"? "template" "<" template-parameter-list ">" declaration ;
operator ::= "new" | "delete" | ("new" "[" "]") | ("delete" "[" "]") | "+" | "-" | "*" | "/" | "%" | "^" | "&" | "|" | "~" | "!" | "=" | "<" | ">" | "+=" | "-=" | "*=" | "/=" | "%=" | "^=" | "&=" | "|=" | "<<" | ">>" | ">>=" | "<<=" | "==" | "!=" | "<=" | ">=" | "&&" | "||" | "++" | "--" | "," | "->*" | "->" | "(" | ")" | "[" | "]" ;
lambda-parameter ::= decl-specifier-seq declarator ;
ptr-operator ::= ("*" cv-qualifier-seq?) | "&" | "&&" | ("::"? nested-name-specifier "*" cv-qualifier-seq?) ;
namespace-alias-definition ::= "namespace" identifier "=" qualified-namespace-specifier ";" ;
mem-initializer-list ::= (mem-initializer "..."?) | (mem-initializer "," mem-initializer-list "..."?) ;
inclusive-or-expression ::= exclusive-or-expression | (inclusive-or-expression "|" exclusive-or-expression) ;
enum-base ::= ":" type-specifier-seq ;
qualified-namespace-specifier ::= "::"? nested-name-specifier? namespace-name ;
condition ::= expression | (type-specifier-seq declarator "=" initializer-clause) | (type-specifier-seq declarator braced-init-list) ;
template-argument-list ::= (template-argument "..."?) | (template-argument-list "," template-argument "..."?) ;
assignment-expression ::= conditional-expression | (logical-or-expression assignment-operator initializer-clause) | throw-expression ;
expression ::= assignment-expression | (expression "," assignment-expression) ;
class-head ::= (class-key identifier? base-clause?) | (class-key nested-name-specifier identifier base-clause?) | (class-key nested-name-specifier? simple-template-id base-clause?) ;
direct-declarator ::= declarator-id | (direct-declarator "(" parameter-declaration-clause ")" cv-qualifier-seq? ref-qualifier? exception-specification?) | (direct-declarator "(" parameter-declaration-clause ")" cv-qualifier-seq? ref-qualifier? exception-specification? "->" type-id) | (direct-declarator "[" constant-expression? "]") | ("(" declarator ")") ;
enum-key ::= "enum" | ("enum" "class") | ("enum" "struct") ;
logical-and-expression ::= inclusive-or-expression | (logical-and-expression "&&" inclusive-or-expression) ;
nested-name-specifier ::= (type-name "::") | (namespace-name "::") | (nested-name-specifier identifier "::") | (nested-name-specifier "template"? simple-template-id "::") ;
member-specification ::= (member-declaration member-specification?) | (access-specifier ":" member-specification?) ;
jump-statement ::= ("break" ";") | ("continue" ";") | ("return" expression? ";") | ("return" braced-init-list ";") | ("goto" identifier ";") ;
init-declarator ::= declarator initializer? ;
type-id ::= type-specifier-seq abstract-declarator? ;
declaration-seq ::= declaration | (declaration-seq declaration) ;
lambda-return-type-clause ::= "->" type-id ;
enumerator-list ::= enumerator-definition | (enumerator-list "," enumerator-definition) ;
member-declarator-list ::= member-declarator | (member-declarator-list "," member-declarator) ;
operator-function-id ::= "operator" operator ;
exception-specification ::= "throw" "(" type-id-list? ")" ;
unqualified-id ::= identifier | operator-function-id | conversion-function-id | ("~" class-name) | template-id ;
original-namespace-definition ::= "inline"? "namespace" identifier "{" namespace-body "}" ;
statement-seq ::= statement | (statement-seq statement) ;
--------------------cpp::bruneliere.bgf--------------------
CPPGeneralization ::= visibility::VisibilityKind isVirtual::Boolean supertype::CPPClass ;
CPPMember ::= isStatic::Boolean isVolatile::Boolean isRegister::Boolean visibility::VisibilityKind ;
CPPOperator ::= isInline::Boolean visibility::VisibilityKind ;
CPPClass ::= isAbstract::Boolean isVolatile::Boolean visibility::VisibilityKind (templates::CPPTemplate)+ (generalizations::CPPGeneralization)+ ;
CPPOperation ::= isStatic::Boolean isExtern::Boolean isInline::Boolean isVirtual::Boolean isPure::Boolean visibility::VisibilityKind isCtor::Boolean isDtor::Boolean (throws::CPPClass)+ ;
--------------------cpp::elges-cordy.bgf--------------------
comma_dotdotdot ::= ","? "..." ;
selection_statement ::= ("if" "(" expression ")" statement else_statement?) | ("switch" "(" expression ")" statement) ;
parenthesized_parameter_declaration_list ::= ("(" parameter_declaration_list ")") | ("(" parenthesized_parameter_declaration_list ")") ;
elaborated_type_specifier ::= (class_key "::"? nested_name_spec? class_name) | ("enum" "::"? nested_name_spec? id) ;
class_definition ::= NL storage_class_specifier* class_specifier declarator_list? ";" NL NL ;
declaration ::= asm_declaration | class_definition | function_definition | namespace_definition | template_declaration | linkage_specification | exception_specification | using_declaration | (decl_specifiers? declarator_list ";" NL) | (decl_specifiers ";" NL) | (";" NL) | (preprocessor NL) ;
declared_item ::= declared_name | ("(" declarator ")") ;
mem_initializer ::= "::"? nested_name_spec? class_name "(" expression_list? ")" ;
function_declarator ::= pointer_operator* declared_item declarator_extension+ ;
class_component ::= class_name | ("~" SPOFF class_name SPON) | operator_function_name | conversion_function_name | qualified_name ;
deallocation_expression ::= ("::"? "delete" cast_expression) | ("::"? "delete" "[" expression? "]" cast_expression) ;
member_declarator ::= (declarator initializer?) | (id? SPOFF ":" SPON constant_expression) ;
non_gt_binary_expression ::= cast_expression non_gt_binary_operation* ;
primary_expression ::= literal | "this" | ("::" id) | ("::" operator_function_name) | ("(" expression ")") | name ;
postfix_extension ::= ("[" expression? "]") | ("(" expression_list? ")") | ("." name) | ("->" name) | "++" | "--" ;
label ::= (id SPOFF ":" SPON) | (EX "case" constant_expression SPOFF ":" SPON NL IN) | (EX "default" SPOFF ":" SPON NL IN) ;
handler_list ::= handler handler_list? ;
class_name ::= id template_arguments? ;
conditional_expression ::= binary_expression conditional_operation? ;
allocation_declarator ::= allocation_array_declarator | ("*" const_volatile_qualifier_list? allocation_declarator?) | ("::"? nested_name_spec "*" const_volatile_qualifier_list? allocation_declarator?) | (qualified_name "::" "*" const_volatile_qualifier_list? allocation_declarator?) ;
type_name ::= type_specifiers abstract_declarator? ;
declared_name ::= (nested_name_spec? name) | ("~" SPOFF id SPON) ;
statement ::= label* unlabeled_statement ;
conditional_operation ::= "?" expression ":" conditional_expression ;
abstract_declarator ::= (abstract_extension+) | ("(" abstract_declarator ")" abstract_extension*) ;
else_statement ::= "else" statement ;
base_spec ::= ":" base_list ;
pointer_operator ::= (stars const_volatile_qualifier_list?) | ("&" const_volatile_qualifier_list?) | (id "::" stars const_volatile_qualifier_list?) | ("::"? nested_name_spec "*" const_volatile_qualifier_list) ;
placement ::= "(" expression_list ")" ;
parameter_declaration ::= decl_specifiers parameter_declarator equal_expression? ;
type_parameter ::= "class" id ;
abstract_extension ::= ("(" parameter_declaration_list ")" const_volatile_qualifier_list?) | ("[" constant_expression? "]") | pointer_operator | ("(" abstract_declarator ")") ;
initializer ::= ("=" initial_value) | ("(" expression_list? ")") ;
dot_slash_identifier ::= "."? "/"? file_identifier ;
compound_statement ::= "{" NL IN statement_list? EX "}" NL ;
template_argument_list ::= template_argument | (template_argument_list "," template_argument) ;
number_constant ::= ("-"? number) | hexnumber ;
template_parameter_list ::= template_parameter | (template_parameter_list "," template_parameter) ;
for_body ::= compound_statement | (IN NL statement EX) ;
allocation_expression ::= "::"? "new" placement? allocation_type_name initializer? ;
template_class_name ::= id template_arguments ;
allocation_array_declarator ::= ("[" expression? "]") | (allocation_array_declarator "[" expression? "]") ;
member_declaration ::= (function_definition ";"?) | (qualified_name ";" NL) | using_declaration | (decl_specifiers? member_declarator_list ";" NL) | (decl_specifiers ";" NL) | (";" NL) | (preprocessor NL) ;
allocation_type_name ::= (type_specifiers allocation_declarator?) | ("(" type_name ")" allocation_declarator?) ;
template_arguments ::= "<" template_argument_list ">" ;
base_specifier ::= ("::"? nested_name_spec? class_name) | ("virtual" access_specifier? "::"? nested_name_spec? class_name) | (access_specifier "virtual"? "::"? nested_name_spec? class_name) ;
preprocessor ::= ("#define" id "(" id+ ")" expression) | ("#define" id expression) | (EX "#else" IN) | (EX "#endif" NL) | (NL "#if" expression IN) | (NL "#ifdef" id IN) | (NL "#ifndef" id IN) | ("#ident" stringlit) | ("#include" stringlit) | ("#include" "<" SPOFF filename ">" SPON) | ("#line" integernumber stringlit?) | ("#undef" id) | ("#LINK" stringlit) ;
qualified_name ::= class_name "::" class_component ;
base_list ::= base_specifier ","? {base_specifier ","}* ;
assignment_expression ::= conditional_expression | (unary_expression assignment_operator assignment_expression) ;
handler ::= "catch" "(" exception_declaration ")" compound_statement ;
non_gt_binary_operation ::= non_gt_binary_operator cast_expression ;
class_head ::= (class_key id? base_spec?) | (class_key nested_name_spec id base_spec?) | (class_key class_name base_spec?) ;
enumerator ::= id equal_constant_expression? ;
access_specifier_colon ::= EX_2 NL access_specifier SPOFF ":" SPON IN_2 NL ;
init_declarator ::= declarator initializer? ;
using_declaration ::= ("using" "::"? nested_name_spec? name ";") | ("using" "namespace" "::"? nested_name_spec? id ";") ;
null_statement ::= ";" NL ;
operator_function_name ::= "operator" operator ;
namespace_definition ::= ("namespace" id? "{" NL IN declaration_list? EX "}" NL NL) | ("namespace" id "=" qualified_namespace_spec) ;
ctor_initializer ::= SPOFF ":" SPON mem_initializer_list ;
class_specifier ::= class_head "{" NL IN member* EX "}" ;
for_init_statement ::= (expression ";") | (decl_specifiers? declarator_list ";") | (decl_specifiers ";") | ";" ;
initial_value ::= assignment_expression | ("{" IN initializer_list ","? EX "}") ;
asm_declaration ::= "asm" "(" string_constant ")" ";" NL ;
template_declaration ::= "template" "<" template_parameter_list ">" declaration ;
declarator_extension ::= (parenthesized_parameter_declaration_list const_volatile_qualifier_list?) | ("[" constant_expression? "]") ;
declarator ::= pointer_operator* declared_item declarator_extension* ;
binary_operation ::= binary_operator cast_expression ;
function_body ::= (NL compound_statement ";"? NL) | ("try" ctor_initializer? NL compound_statement ";"? NL handler_list) ;
conversion_function_name ::= "operator" conversion_type_name ;
unary_expression ::= postfix_expression | ("++" unary_expression) | ("--" unary_expression) | (unary_operator cast_expression) | ("sizeof" unary_expression) | ("sizeof" "(" type_name ")") | allocation_expression | deallocation_expression | throw_expression ;
nested_name_spec ::= class_or_namespace_name "::" nested_name_spec? ;
NL_stringlit ::= NL stringlit ;
operator ::= "new" | "delete" | "+" | "-" | "*" | "/" | "%" | "^" | "&" | "|" | "~" | "!" | "=" | "<" | ">" | "+=" | "-=" | "-+" | "*=" | "/=" | "%=" | "^=" | "&=" | "|=" | "<<" | ">>" | ">>=" | "<<=" | "==" | "!=" | "<=" | ">=" | "&&" | "||" | "++" | "--" | "," | "->*" | "->" | ("(" type_specifier? ")") | ("[" "]") ;
simple_type_name ::= "char" | "bool" | "short" | "int" | "long" | "signed" | "unsigned" | "float" | "double" | "void" | ("::"? nested_name_spec? id) | ("::"? nested_name_spec? template_class_name) ;
postfix_expression ::= (primary_expression postfix_extension*) | (simple_type_name "(" expression_list? ")" postfix_extension*) ;
qualified_namespace_spec ::= "::"? nested_name_spec? class_or_namespace_name ;
initializer_element ::= assignment_expression | (NL "{" IN initializer_list ","? EX "}") ;
jump_statement ::= ("break" ";" NL) | ("continue" ";" NL) | ("return" expression? ";" NL) | ("goto" id ";" NL) ;
enum_list ::= enumerator+ ","? ;
member ::= access_specifier_colon? member_declaration ;
function_definition ::= NL decl_specifiers? function_declarator ctor_initializer? exception_specification? function_body ;
parameter_declaration_list ::= {parameter_declaration ","}* comma_dotdotdot? ;
cast_expression ::= unary_expression | ("(" type_name ")" cast_expression) ;
expression ::= assignment_expression | (expression "," assignment_expression) ;
binary_expression ::= cast_expression binary_operation* ;
exception_specification ::= "throw" "(" type_list? ")" ;
string_constant ::= stringlit IN NL_stringlit* EX ;
throw_expression ::= "throw" assignment_expression? ;
iteration_statement ::= ("while" "(" expression ")" statement) | ("do" statement "while" "(" expression ")" ";" NL) | ("for" "(" for_init_statement expression? ";" expression? ")" for_body) ;
exception_declaration ::= (type_specifiers exception_declarator?) | "..." ;
try_block ::= "try" compound_statement handler_list ;
linkage_specification ::= (NL "extern" stringlit "{" NL IN declaration_list EX "}" ";"? NL NL) | ("extern" stringlit declaration) ;
expression_statement ::= expression ";" NL ;
equal_constant_expression ::= "=" constant_expression ;
filename ::= file_identifier dot_slash_identifier* ;
conversion_type_name ::= type_specifiers pointer_operator? ;
type_list ::= type_name | (type_list "," type_name) ;
equal_expression ::= "=" expression ;
enum_specifier ::= "enum" id? "{" enum_list? "}" ;
--------------------cpp::iso-14882-1998.bgf--------------------
iteration-statement ::= ("while" "(" condition ")" statement) | ("do" statement "while" "(" expression ")" ";") | ("for" "(" for-init-statement condition? ";" expression? ")" statement) ;
new-declarator ::= (ptr-operator new-declarator?) | direct-new-declarator ;
logical-or-expression ::= logical-and-expression | (logical-or-expression "||" logical-and-expression) ;
relational-expression ::= shift-expression | (relational-expression "<" shift-expression) | (relational-expression ">" shift-expression) | (relational-expression "<=" shift-expression) | (relational-expression ">=" shift-expression) ;
init-declarator-list ::= init-declarator | (init-declarator-list "," init-declarator) ;
type-id-list ::= type-id | (type-id-list "," type-id) ;
type-specifier-seq ::= type-specifier type-specifier-seq? ;
enumerator-definition ::= enumerator | (enumerator "=" constant-expression) ;
exception-declaration ::= (type-specifier-seq declarator) | (type-specifier-seq abstract-declarator) | type-specifier-seq | "..." ;
linkage-specification ::= ("extern" string-literal "{" declaration-seq? "}") | ("extern" string-literal declaration) ;
try-block ::= "try" compound-statement handler-seq ;
expression-statement ::= expression? ";" ;
delete-expression ::= ("::"? "delete" cast-expression) | ("::"? "delete" "[" "]" cast-expression) ;
conversion-function-id ::= "operator" conversion-type-id ;
new-placement ::= "(" expression-list ")" ;
unary-expression ::= postfix-expression | ("++" cast-expression) | ("--" cast-expression) | (unary-operator cast-expression) | ("sizeof" unary-expression) | ("sizeof" "(" type-id ")") | new-expression | delete-expression ;
template-parameter-list ::= template-parameter | (template-parameter-list "," template-parameter) ;
explicit-instantiation ::= "template" declaration ;
unnamed-namespace-definition ::= "namespace" "{" namespace-body "}" ;
enum-specifier ::= "enum" identifier? "{" enumerator-list? "}" ;
postfix-expression ::= primary-expression | (postfix-expression "[" expression "]") | (postfix-expression "(" expression-list? ")") | (simple-type-specifier "(" expression-list? ")") | ("typename" "::"? nested-name-specifier identifier "(" expression-list? ")") | ("typename" "::"? nested-name-specifier "template"? template-id "(" expression-list? ")") | (postfix-expression "." "template"? id-expression) | (postfix-expression "->" "template"? id-expression) | (postfix-expression "." pseudo-destructor-name) | (postfix-expression "->" pseudo-destructor-name) | (postfix-expression "++") | (postfix-expression "--") | ("dynamic_cast" "<" type-id ">" "(" expression ")") | ("static_cast" "<" type-id ">" "(" expression ")") | ("reinterpret_cast" "<" type-id ">" "(" expression ")") | ("const_cast" "<" type-id ">" "(" expression ")") | ("typeid" "(" expression ")") | ("typeid" "(" type-id ")") ;
multiplicative-expression ::= pm-expression | (multiplicative-expression "*" pm-expression) | (multiplicative-expression "/" pm-expression) | (multiplicative-expression "%" pm-expression) ;
selection-statement ::= ("if" "(" condition ")" statement) | ("if" "(" condition ")" statement "else" statement) | ("switch" "(" condition ")" statement) ;
decl-specifier-seq ::= decl-specifier-seq? decl-specifier ;
qualified-id ::= ("::"? nested-name-specifier "template"? unqualified-id) | ("::" identifier) | ("::" operator-function-id) | ("::" template-id) ;
base-clause ::= ":" base-specifier-list ;
mem-initializer ::= mem-initializer-id "(" expression-list? ")" ;
function-definition ::= (decl-specifier-seq? declarator ctor-initializer? function-body) | (decl-specifier-seq? declarator function-try-block) ;
pm-expression ::= cast-expression | (pm-expression ".*" cast-expression) | (pm-expression "->*" cast-expression) ;
cast-expression ::= unary-expression | ("(" type-id ")" cast-expression) ;
simple-type-specifier ::= ("::"? nested-name-specifier? type-name) | ("::"? nested-name-specifier "template" template-id) | "char" | "wchar_t" | "bool" | "short" | "int" | "long" | "signed" | "unsigned" | "float" | "double" | "void" ;
asm-definition ::= "asm" "(" string-literal ")" ";" ;
new-expression ::= ("::"? "new" new-placement? new-type-id new-initializer?) | ("::"? "new" new-placement? "(" type-id ")" new-initializer?) ;
initializer ::= ("=" initializer-clause) | ("(" expression-list ")") ;
direct-new-declarator ::= ("[" expression "]") | (direct-new-declarator "[" constant-expression "]") ;
cv-qualifier-seq ::= cv-qualifier cv-qualifier-seq? ;
new-type-id ::= type-specifier-seq new-declarator? ;
throw-expression ::= "throw" assignment-expression? ;
simple-declaration ::= decl-specifier-seq? init-declarator-list? ";" ;
mem-initializer-id ::= ("::"? nested-name-specifier? class-name) | identifier ;
handler-seq ::= handler handler-seq? ;
direct-abstract-declarator ::= (direct-abstract-declarator? "(" parameter-declaration-clause ")" cv-qualifier-seq? exception-specification?) | (direct-abstract-declarator? "[" constant-expression? "]") | ("(" abstract-declarator ")") ;
conversion-type-id ::= type-specifier-seq conversion-declarator? ;
type-parameter ::= ("class" identifier?) | ("class" identifier? "=" type-id) | ("typename" identifier?) | ("typename" identifier? "=" type-id) | ("template" "<" template-parameter-list ">" "class" identifier?) | ("template" "<" template-parameter-list ">" "class" identifier? "=" id-expression) ;
parameter-declaration ::= (decl-specifier-seq declarator) | (decl-specifier-seq declarator "=" assignment-expression) | (decl-specifier-seq abstract-declarator?) | (decl-specifier-seq abstract-declarator? "=" assignment-expression) ;
extension-namespace-definition ::= "namespace" original-namespace-name "{" namespace-body "}" ;
exclusive-or-expression ::= and-expression | (exclusive-or-expression "^" and-expression) ;
pseudo-destructor-name ::= ("::"? nested-name-specifier? type-name "::" "~" type-name) | ("::"? nested-name-specifier "template" template-id "::" "~" type-name) | ("::"? nested-name-specifier? "~" type-name) ;
and-expression ::= equality-expression | (and-expression "&" equality-expression) ;
template-id ::= template-name "<" template-argument-list? ">" ;
compound-statement ::= "{" statement-seq? "}" ;
equality-expression ::= relational-expression | (equality-expression "==" relational-expression) | (equality-expression "!=" relational-expression) ;
handler ::= "catch" "(" exception-declaration ")" compound-statement ;
base-specifier-list ::= base-specifier | (base-specifier-list "," base-specifier) ;
conversion-declarator ::= ptr-operator conversion-declarator? ;
member-declaration ::= (decl-specifier-seq? member-declarator-list? ";") | (function-definition ";"?) | ("::"? nested-name-specifier "template"? unqualified-id ";") | using-declaration | template-declaration ;
using-directive ::= "using" "namespace" "::"? nested-name-specifier? namespace-name ";" ;
function-try-block ::= "try" ctor-initializer? function-body handler-seq ;
parameter-declaration-clause ::= (parameter-declaration-list? "..."?) | (parameter-declaration-list "," "...") ;
explicit-specialization ::= "template" "<" ">" declaration ;
member-declarator ::= (declarator pure-specifier?) | (declarator constant-initializer?) | (identifier? ":" constant-expression) ;
primary-expression ::= literal | "this" | ("(" expression ")") | id-expression ;
shift-expression ::= additive-expression | (shift-expression "<<" additive-expression) | (shift-expression ">>" additive-expression) ;
base-specifier ::= ("::"? nested-name-specifier? class-name) | ("virtual" access-specifier? "::"? nested-name-specifier? class-name) | (access-specifier "virtual"? "::"? nested-name-specifier? class-name) ;
conditional-expression ::= logical-or-expression | (logical-or-expression "?" expression ":" assignment-expression) ;
abstract-declarator ::= (ptr-operator abstract-declarator?) | direct-abstract-declarator ;
elaborated-type-specifier ::= (class-key "::"? nested-name-specifier? identifier) | ("enum" "::"? nested-name-specifier? identifier) | ("typename" "::"? nested-name-specifier identifier) | ("typename" "::"? nested-name-specifier "template"? template-id) ;
initializer-clause ::= assignment-expression | ("{" initializer-list ","? "}") | ("{" "}") ;
constant-initializer ::= "=" constant-expression ;
additive-expression ::= multiplicative-expression | (additive-expression "+" multiplicative-expression) | (additive-expression "-" multiplicative-expression) ;
declarator-id ::= id-expression | ("::"? nested-name-specifier? type-name) ;
labeled-statement ::= (identifier ":" statement) | ("case" constant-expression ":" statement) | ("default" ":" statement) ;
new-initializer ::= "(" expression-list? ")" ;
parameter-declaration-list ::= parameter-declaration | (parameter-declaration-list "," parameter-declaration) ;
expression-list ::= assignment-expression | (expression-list "," assignment-expression) ;
using-declaration ::= ("using" "typename"? "::"? nested-name-specifier unqualified-id ";") | ("using" "::" unqualified-id ";") ;
declarator ::= direct-declarator | (ptr-operator declarator) ;
initializer-list ::= initializer-clause | (initializer-list "," initializer-clause) ;
ctor-initializer ::= ":" mem-initializer-list ;
pure-specifier ::= "=" "0" ;
class-specifier ::= class-head "{" member-specification? "}" ;
template-declaration ::= "export"? "template" "<" template-parameter-list ">" declaration ;
operator ::= "new" | "delete" | ("new" "[" "]") | ("delete" "[" "]") | "+" | "-" | "*" | "/" | "%" | "^" | "&" | "|" | "~" | "!" | "=" | "<" | ">" | "+=" | "-=" | "*=" | "/=" | "%=" | "^=" | "&=" | "|=" | "<<" | ">>" | ">>=" | "<<=" | "==" | "!=" | "<=" | ">=" | "&&" | "||" | "++" | "--" | "," | "->*" | "->" | ("(" ")") | ("[" "]") ;
ptr-operator ::= ("*" cv-qualifier-seq?) | "&" | ("::"? nested-name-specifier "*" cv-qualifier-seq?) ;
namespace-alias-definition ::= "namespace" identifier "=" qualified-namespace-specifier ";" ;
mem-initializer-list ::= mem-initializer | (mem-initializer "," mem-initializer-list) ;
inclusive-or-expression ::= exclusive-or-expression | (inclusive-or-expression "|" exclusive-or-expression) ;
qualified-namespace-specifier ::= "::"? nested-name-specifier? namespace-name ;
condition ::= expression | (type-specifier-seq declarator "=" assignment-expression) ;
template-argument-list ::= template-argument | (template-argument-list "," template-argument) ;
expression ::= assignment-expression | (expression "," assignment-expression) ;
assignment-expression ::= conditional-expression | (logical-or-expression assignment-operator assignment-expression) | throw-expression ;
class-head ::= (class-key identifier? base-clause?) | (class-key nested-name-specifier identifier base-clause?) | (class-key nested-name-specifier? template-id base-clause?) ;
direct-declarator ::= declarator-id | (direct-declarator "(" parameter-declaration-clause ")" cv-qualifier-seq? exception-specification?) | (direct-declarator "[" constant-expression? "]") | ("(" declarator ")") ;
logical-and-expression ::= inclusive-or-expression | (logical-and-expression "&&" inclusive-or-expression) ;
nested-name-specifier ::= (class-or-namespace-name "::" nested-name-specifier?) | (class-or-namespace-name "::" "template" nested-name-specifier) ;
jump-statement ::= ("break" ";") | ("continue" ";") | ("return" expression? ";") | ("goto" identifier ";") ;
member-specification ::= (member-declaration member-specification?) | (access-specifier ":" member-specification?) ;
init-declarator ::= declarator initializer? ;
type-id ::= type-specifier-seq abstract-declarator? ;
declaration-seq ::= declaration | (declaration-seq declaration) ;
enumerator-list ::= enumerator-definition | (enumerator-list "," enumerator-definition) ;
member-declarator-list ::= member-declarator | (member-declarator-list "," member-declarator) ;
operator-function-id ::= "operator" operator ;
exception-specification ::= "throw" "(" type-id-list? ")" ;
unqualified-id ::= identifier | operator-function-id | conversion-function-id | ("~" class-name) | template-id ;
original-namespace-definition ::= "namespace" identifier "{" namespace-body "}" ;
statement-seq ::= statement | (statement-seq statement) ;
--------------------cs::csharp-ecma-334-2.bgf--------------------
accessor-declarations ::= (get-accessor-declaration set-accessor-declaration?) | (set-accessor-declaration get-accessor-declaration?) ;
relational-expression ::= shift-expression | (relational-expression "<" shift-expression) | (relational-expression ">" shift-expression) | (relational-expression "<=" shift-expression) | (relational-expression ">=" shift-expression) | (relational-expression "is" type) | (relational-expression "as" type) ;
delegate-creation-expression ::= "new" delegate-type "(" expression ")" ;
global-attribute-target-specifier ::= global-attribute-target ":" ;
pre-decrement-expression ::= "--" unary-expression ;
constant-declarator ::= identifier "=" constant-expression ;
method-header ::= attributes? method-modifiers? return-type member-name "(" formal-parameter-list? ")" ;
finally-clause ::= "finally" block ;
interface-member-declarations ::= interface-member-declaration | (interface-member-declarations interface-member-declaration) ;
member-access ::= (primary-expression "." identifier) | (predefined-type "." identifier) ;
unary-expression ::= primary-expression | ("+" unary-expression) | ("-" unary-expression) | ("!" unary-expression) | ("~" unary-expression) | pre-increment-expression | pre-decrement-expression | cast-expression ;
invocation-expression ::= primary-expression "(" argument-list? ")" ;
local-constant-declaration ::= "const" type constant-declarators ;
enum-body ::= ("{" enum-member-declarations? "}") | ("{" enum-member-declarations "," "}") ;
using-directives ::= using-directive | (using-directives using-directive) ;
interface-modifiers ::= interface-modifier | (interface-modifiers interface-modifier) ;
interface-declaration ::= attributes? interface-modifiers? "interface" identifier interface-base? interface-body ";"? ;
cast-expression ::= "(" type ")" unary-expression ;
interface-base ::= ":" interface-type-list ;
constructor-declarator ::= identifier "(" formal-parameter-list? ")" constructor-initializer? ;
fixed-parameters ::= fixed-parameter | (fixed-parameters "," fixed-parameter) ;
formal-parameter-list ::= fixed-parameters | (fixed-parameters "," parameter-array) | parameter-array ;
base-access ::= ("base" "." identifier) | ("base" "[" expression-list "]") ;
member-name ::= identifier | (interface-type "." identifier) ;
try-statement ::= ("try" block catch-clauses) | ("try" block finally-clause) | ("try" block catch-clauses finally-clause) ;
declaration-statement ::= (local-variable-declaration ";") | (local-constant-declaration ";") ;
variable-initializer-list ::= variable-initializer | (variable-initializer-list "," variable-initializer) ;
class-body ::= "{" class-member-declarations? "}" ;
unchecked-expression ::= "unchecked" "(" expression ")" ;
namespace-body ::= "{" using-directives? namespace-member-declarations? "}" ;
exclusive-or-expression ::= and-expression | (exclusive-or-expression "^" and-expression) ;
while-statement ::= "while" "(" boolean-expression ")" embedded-statement ;
catch-clauses ::= (specific-catch-clauses general-catch-clause?) | (specific-catch-clauses? general-catch-clause) ;
array-creation-expression ::= ("new" non-array-type "[" expression-list "]" rank-specifiers? array-initializer?) | ("new" array-type array-initializer) ;
named-argument ::= identifier "=" attribute-argument-expression ;
operator-declaration ::= attributes? operator-modifiers operator-declarator operator-body ;
constant-declaration ::= attributes? constant-modifiers? "const" type constant-declarators ";" ;
assignment ::= unary-expression assignment-operator expression ;
local-variable-declaration ::= type local-variable-declarators ;
continue-statement ::= "continue" ";" ;
checked-statement ::= "checked" block ;
using-alias-directive ::= "using" identifier "=" namespace-or-type-name ";" ;
static-constructor-declaration ::= attributes? static-constructor-modifiers identifier "(" ")" static-constructor-body ;
event-declaration ::= (attributes? event-modifiers? "event" type variable-declarators ";") | (attributes? event-modifiers? "event" type member-name "{" event-accessor-declarations "}") ;
conversion-operator-declarator ::= ("implicit" "operator" type "(" type identifier ")") | ("explicit" "operator" type "(" type identifier ")") ;
shift-expression ::= additive-expression | (shift-expression "<<" additive-expression) | (shift-expression ">>" additive-expression) ;
post-increment-expression ::= primary-expression "++" ;
enum-member-declarations ::= enum-member-declaration | (enum-member-declarations "," enum-member-declaration) ;
local-variable-declarator ::= identifier | (identifier "=" local-variable-initializer) ;
if-statement ::= ("if" "(" boolean-expression ")" embedded-statement) | ("if" "(" boolean-expression ")" embedded-statement "else" embedded-statement) ;
indexer-declarator ::= (type "this" "[" formal-parameter-list "]") | (type interface-type "." "this" "[" formal-parameter-list "]") ;
interface-type-list ::= interface-type | (interface-type-list "," interface-type) ;
argument ::= expression | ("ref" variable-reference) | ("out" variable-reference) ;
conditional-or-expression ::= conditional-and-expression | (conditional-or-expression "||" conditional-and-expression) ;
constant-declarators ::= constant-declarator | (constant-declarators "," constant-declarator) ;
switch-labels ::= switch-label | (switch-labels switch-label) ;
object-creation-expression ::= "new" type "(" argument-list? ")" ;
class-member-declarations ::= class-member-declaration | (class-member-declarations class-member-declaration) ;
interface-body ::= "{" interface-member-declarations? "}" ;
rank-specifiers ::= rank-specifier | (rank-specifiers rank-specifier) ;
positional-argument-list ::= positional-argument | (positional-argument-list "," positional-argument) ;
labeled-statement ::= identifier ":" statement ;
attribute-section ::= ("[" attribute-target-specifier? attribute-list "]") | ("[" attribute-target-specifier? attribute-list "," "]") ;
switch-block ::= "{" switch-sections? "}" ;
local-variable-declarators ::= local-variable-declarator | (local-variable-declarators "," local-variable-declarator) ;
expression-list ::= expression | (expression-list "," expression) ;
enum-modifiers ::= enum-modifier | (enum-modifiers enum-modifier) ;
enum-declaration ::= attributes? enum-modifiers? "enum" identifier enum-base? enum-body ";"? ;
argument-list ::= argument | (argument-list "," argument) ;
do-statement ::= "do" embedded-statement "while" "(" boolean-expression ")" ";" ;
indexer-declaration ::= attributes? indexer-modifiers? indexer-declarator "{" accessor-declarations "}" ;
foreach-statement ::= "foreach" "(" type identifier "in" expression ")" embedded-statement ;
global-attribute-sections ::= global-attribute-section | (global-attribute-sections global-attribute-section) ;
switch-sections ::= switch-section | (switch-sections switch-section) ;
destructor-declaration ::= attributes? "extern"? "~" identifier "(" ")" destructor-body ;
class-declaration ::= attributes? class-modifiers? "class" identifier class-base? class-body ";"? ;
interface-method-declaration ::= attributes? "new"? return-type identifier "(" formal-parameter-list? ")" ";" ;
inclusive-or-expression ::= exclusive-or-expression | (inclusive-or-expression "|" exclusive-or-expression) ;
add-accessor-declaration ::= attributes? "add" block ;
pre-increment-expression ::= "++" unary-expression ;
remove-accessor-declaration ::= attributes? "remove" block ;
attribute ::= attribute-name attribute-arguments? ;
struct-body ::= "{" struct-member-declarations? "}" ;
interface-property-declaration ::= attributes? "new"? type identifier "{" interface-accessors "}" ;
struct-member-declarations ::= struct-member-declaration | (struct-member-declarations struct-member-declaration) ;
using-namespace-directive ::= "using" namespace-name ";" ;
attribute-target-specifier ::= attribute-target ":" ;
operator-modifiers ::= operator-modifier | (operator-modifiers operator-modifier) ;
constant-modifiers ::= constant-modifier | (constant-modifiers constant-modifier) ;
dim-separators ::= "," | (dim-separators ",") ;
variable-declarators ::= variable-declarator | (variable-declarators "," variable-declarator) ;
fixed-parameter ::= attributes? parameter-modifier? type identifier ;
method-modifiers ::= method-modifier | (method-modifiers method-modifier) ;
constructor-initializer ::= (":" "base" "(" argument-list? ")") | (":" "this" "(" argument-list? ")") ;
method-declaration ::= method-header method-body ;
block ::= "{" statement-list? "}" ;
general-catch-clause ::= "catch" block ;
goto-statement ::= ("goto" identifier ";") | ("goto" "case" constant-expression ";") | ("goto" "default" ";") ;
struct-modifiers ::= struct-modifier | (struct-modifiers struct-modifier) ;
property-modifiers ::= property-modifier | (property-modifiers property-modifier) ;
struct-declaration ::= attributes? struct-modifiers? "struct" identifier struct-interfaces? struct-body ";"? ;
property-declaration ::= attributes? property-modifiers? type member-name "{" accessor-declarations "}" ;
set-accessor-declaration ::= attributes? "set" accessor-body ;
checked-expression ::= "checked" "(" expression ")" ;
specific-catch-clause ::= "catch" "(" class-type identifier? ")" block ;
expression-statement ::= statement-expression ";" ;
qualified-identifier ::= identifier | (qualified-identifier "." identifier) ;
interface-accessors ::= (attributes? "get" ";") | (attributes? "set" ";") | (attributes? "get" ";" attributes? "set" ";") | (attributes? "set" ";" attributes? "get" ";") ;
specific-catch-clauses ::= specific-catch-clause | (specific-catch-clauses specific-catch-clause) ;
conditional-and-expression ::= inclusive-or-expression | (conditional-and-expression "&&" inclusive-or-expression) ;
multiplicative-expression ::= unary-expression | (multiplicative-expression "*" unary-expression) | (multiplicative-expression "/" unary-expression) | (multiplicative-expression "%" unary-expression) ;
array-initializer ::= ("{" variable-initializer-list? "}") | ("{" variable-initializer-list "," "}") ;
for-statement ::= "for" "(" for-initializer? ";" for-condition? ";" for-iterator? ")" embedded-statement ;
constructor-modifiers ::= constructor-modifier | (constructor-modifiers constructor-modifier) ;
field-modifiers ::= field-modifier | (field-modifiers field-modifier) ;
class-modifiers ::= class-modifier | (class-modifiers class-modifier) ;
using-statement ::= "using" "(" resource-acquisition ")" embedded-statement ;
attribute-arguments ::= ("(" positional-argument-list? ")") | ("(" positional-argument-list "," named-argument-list ")") | ("(" named-argument-list ")") ;
rank-specifier ::= "[" dim-separators? "]" ;
unary-operator-declarator ::= type "operator" overloadable-unary-operator "(" type identifier ")" ;
statement-expression-list ::= statement-expression | (statement-expression-list "," statement-expression) ;
element-access ::= primary-no-array-creation-expression "[" expression-list "]" ;
typeof-expression ::= ("typeof" "(" type ")") | ("typeof" "(" "void" ")") ;
struct-interfaces ::= ":" interface-type-list ;
unchecked-statement ::= "unchecked" block ;
and-expression ::= equality-expression | (and-expression "&" equality-expression) ;
compilation-unit ::= using-directives? global-attributes? namespace-member-declarations? ;
lock-statement ::= "lock" "(" expression ")" embedded-statement ;
switch-section ::= switch-labels statement-list ;
equality-expression ::= relational-expression | (equality-expression "==" relational-expression) | (equality-expression "!=" relational-expression) ;
static-constructor-modifiers ::= ("extern"? "static") | ("static" "extern"?) ;
parenthesized-expression ::= "(" expression ")" ;
throw-statement ::= "throw" expression? ";" ;
attribute-sections ::= attribute-section | (attribute-sections attribute-section) ;
conditional-expression ::= conditional-or-expression | (conditional-or-expression "?" expression ":" expression) ;
statement-list ::= statement | (statement-list statement) ;
additive-expression ::= multiplicative-expression | (additive-expression "+" multiplicative-expression) | (additive-expression "-" multiplicative-expression) ;
parameter-array ::= attributes? "params" array-type identifier ;
delegate-modifiers ::= delegate-modifier | (delegate-modifiers delegate-modifier) ;
interface-event-declaration ::= attributes? "new"? "event" type identifier ";" ;
delegate-declaration ::= attributes? delegate-modifiers? "delegate" type identifier "(" formal-parameter-list? ")" ";" ;
attribute-list ::= attribute | (attribute-list "," attribute) ;
array-type ::= non-array-type rank-specifiers ;
indexer-modifiers ::= indexer-modifier | (indexer-modifiers indexer-modifier) ;
binary-operator-declarator ::= type "operator" overloadable-binary-operator "(" type identifier "," type identifier ")" ;
field-declaration ::= attributes? field-modifiers? type variable-declarators ";" ;
constructor-declaration ::= attributes? constructor-modifiers? constructor-declarator constructor-body ;
variable-declarator ::= identifier | (identifier "=" variable-initializer) ;
break-statement ::= "break" ";" ;
post-decrement-expression ::= primary-expression "--" ;
enum-base ::= ":" integral-type ;
switch-label ::= ("case" constant-expression ":") | ("default" ":") ;
named-argument-list ::= named-argument | (named-argument-list "," named-argument) ;
namespace-member-declarations ::= namespace-member-declaration | (namespace-member-declarations namespace-member-declaration) ;
interface-indexer-declaration ::= attributes? "new"? type "this" "[" formal-parameter-list "]" "{" interface-accessors "}" ;
switch-statement ::= "switch" "(" expression ")" switch-block ;
enum-member-declaration ::= (attributes? identifier) | (attributes? identifier "=" constant-expression) ;
return-statement ::= "return" expression? ";" ;
event-accessor-declarations ::= (add-accessor-declaration remove-accessor-declaration) | (remove-accessor-declaration add-accessor-declaration) ;
get-accessor-declaration ::= attributes? "get" accessor-body ;
global-attribute-section ::= ("[" global-attribute-target-specifier attribute-list "]") | ("[" global-attribute-target-specifier attribute-list "," "]") ;
event-modifiers ::= event-modifier | (event-modifiers event-modifier) ;
namespace-declaration ::= "namespace" qualified-identifier namespace-body ";"? ;
class-base ::= (":" class-type) | (":" interface-type-list) | (":" class-type "," interface-type-list) ;
namespace-or-type-name ::= identifier | (namespace-or-type-name "." identifier) ;
--------------------cs::csharp-ecma-334-3.bgf--------------------
accessor-declarations ::= (get-accessor-declaration set-accessor-declaration?) | (set-accessor-declaration get-accessor-declaration?) ;
relational-expression ::= shift-expression | (relational-expression "<" shift-expression) | (relational-expression ">" shift-expression) | (relational-expression "<=" shift-expression) | (relational-expression ">=" shift-expression) | (relational-expression "is" type) | (relational-expression "as" type) ;
delegate-creation-expression ::= "new" delegate-type "(" expression ")" ;
global-attribute-target-specifier ::= global-attribute-target ":" ;
pre-decrement-expression ::= "--" unary-expression ;
constant-declarator ::= identifier "=" constant-expression ;
method-header ::= attributes? method-modifiers? return-type member-name type-parameter-list? "(" formal-parameter-list? ")" type-parameter-constraints-clauses? ;
finally-clause ::= "finally" block ;
interface-member-declarations ::= interface-member-declaration | (interface-member-declarations interface-member-declaration) ;
member-access ::= (primary-expression "." identifier type-argument-list?) | (predefined-type "." identifier type-argument-list?) | (qualified-alias-member "." identifier type-argument-list?) ;
unbound-type-name ::= (identifier generic-dimension-specifier?) | (identifier "::" identifier generic-dimension-specifier?) | (unbound-type-name "." identifier generic-dimension-specifier?) ;
unary-expression ::= primary-expression | ("+" unary-expression) | ("-" unary-expression) | ("!" unary-expression) | ("~" unary-expression) | pre-increment-expression | pre-decrement-expression | cast-expression ;
invocation-expression ::= primary-expression "(" argument-list? ")" ;
local-constant-declaration ::= "const" type constant-declarators ;
enum-body ::= ("{" enum-member-declarations? "}") | ("{" enum-member-declarations "," "}") ;
using-directives ::= using-directive | (using-directives using-directive) ;
interface-modifiers ::= interface-modifier | (interface-modifiers interface-modifier) ;
interface-declaration ::= attributes? interface-modifiers? "partial"? "interface" identifier type-parameter-list? interface-base? type-parameter-constraints-clauses? interface-body ";"? ;
cast-expression ::= "(" type ")" unary-expression ;
interface-base ::= ":" interface-type-list ;
extern-alias-directive ::= "extern" "alias" identifier ";" ;
constructor-declarator ::= identifier "(" formal-parameter-list? ")" constructor-initializer? ;
fixed-parameters ::= fixed-parameter | (fixed-parameters "," fixed-parameter) ;
formal-parameter-list ::= fixed-parameters | (fixed-parameters "," parameter-array) | parameter-array ;
base-access ::= ("base" "." identifier type-argument-list?) | ("base" "[" expression-list "]") ;
member-name ::= identifier | (interface-type "." identifier) ;
try-statement ::= ("try" block catch-clauses) | ("try" block catch-clauses? finally-clause) ;
declaration-statement ::= (local-variable-declaration ";") | (local-constant-declaration ";") ;
variable-initializer-list ::= variable-initializer | (variable-initializer-list "," variable-initializer) ;
class-body ::= "{" class-member-declarations? "}" ;
unchecked-expression ::= "unchecked" "(" expression ")" ;
type-parameter-constraints-clauses ::= type-parameter-constraints-clause | (type-parameter-constraints-clauses type-parameter-constraints-clause) ;
namespace-body ::= "{" extern-alias-directives? using-directives? namespace-member-declarations? "}" ;
while-statement ::= "while" "(" boolean-expression ")" embedded-statement ;
exclusive-or-expression ::= and-expression | (exclusive-or-expression "^" and-expression) ;
catch-clauses ::= specific-catch-clauses | (specific-catch-clauses? general-catch-clause) ;
array-creation-expression ::= ("new" non-array-type "[" expression-list "]" rank-specifiers? array-initializer?) | ("new" array-type array-initializer) ;
named-argument ::= identifier "=" attribute-argument-expression ;
operator-declaration ::= attributes? operator-modifiers operator-declarator operator-body ;
constant-declaration ::= attributes? constant-modifiers? "const" type constant-declarators ";" ;
assignment ::= unary-expression assignment-operator expression ;
local-variable-declaration ::= type local-variable-declarators ;
continue-statement ::= "continue" ";" ;
checked-statement ::= "checked" block ;
using-alias-directive ::= "using" identifier "=" namespace-or-type-name ";" ;
static-constructor-declaration ::= attributes? static-constructor-modifiers identifier "(" ")" static-constructor-body ;
event-declaration ::= (attributes? event-modifiers? "event" type variable-declarators ";") | (attributes? event-modifiers? "event" type member-name "{" event-accessor-declarations "}") ;
simple-name ::= identifier type-argument-list? ;
conversion-operator-declarator ::= ("implicit" "operator" type "(" type identifier ")") | ("explicit" "operator" type "(" type identifier ")") ;
shift-expression ::= additive-expression | (shift-expression "<<" additive-expression) | (shift-expression right-shift additive-expression) ;
post-increment-expression ::= primary-expression "++" ;
enum-member-declarations ::= enum-member-declaration | (enum-member-declarations "," enum-member-declaration) ;
local-variable-declarator ::= identifier | (identifier "=" local-variable-initializer) ;
type-parameter-constraints ::= primary-constraint | secondary-constraints | constructor-constraint | (primary-constraint "," secondary-constraints) | (primary-constraint "," constructor-constraint) | (secondary-constraints "," constructor-constraint) | (primary-constraint "," secondary-constraints "," constructor-constraint) ;
indexer-declarator ::= (type "this" "[" formal-parameter-list "]") | (type interface-type "." "this" "[" formal-parameter-list "]") ;
if-statement ::= ("if" "(" boolean-expression ")" embedded-statement) | ("if" "(" boolean-expression ")" embedded-statement "else" embedded-statement) ;
interface-type-list ::= interface-type | (interface-type-list "," interface-type) ;
argument ::= expression | ("ref" variable-reference) | ("out" variable-reference) ;
conditional-or-expression ::= conditional-and-expression | (conditional-or-expression "||" conditional-and-expression) ;
constant-declarators ::= constant-declarator | (constant-declarators "," constant-declarator) ;
switch-labels ::= switch-label | (switch-labels switch-label) ;
object-creation-expression ::= "new" type "(" argument-list? ")" ;
class-member-declarations ::= class-member-declaration | (class-member-declarations class-member-declaration) ;
interface-body ::= "{" interface-member-declarations? "}" ;
rank-specifiers ::= rank-specifier | (rank-specifiers rank-specifier) ;
positional-argument-list ::= positional-argument | (positional-argument-list "," positional-argument) ;
labeled-statement ::= identifier ":" statement ;
attribute-section ::= ("[" attribute-target-specifier? attribute-list "]") | ("[" attribute-target-specifier? attribute-list "," "]") ;
switch-block ::= "{" switch-sections? "}" ;
local-variable-declarators ::= local-variable-declarator | (local-variable-declarators "," local-variable-declarator) ;
expression-list ::= expression | (expression-list "," expression) ;
enum-modifiers ::= enum-modifier | (enum-modifiers enum-modifier) ;
enum-declaration ::= attributes? enum-modifiers? "enum" identifier enum-base? enum-body ";"? ;
argument-list ::= argument | (argument-list "," argument) ;
do-statement ::= "do" embedded-statement "while" "(" boolean-expression ")" ";" ;
indexer-declaration ::= attributes? indexer-modifiers? indexer-declarator "{" accessor-declarations "}" ;
foreach-statement ::= "foreach" "(" type identifier "in" expression ")" embedded-statement ;
global-attribute-sections ::= global-attribute-section | (global-attribute-sections global-attribute-section) ;
switch-sections ::= switch-section | (switch-sections switch-section) ;
class-declaration ::= attributes? class-modifiers? "partial"? "class" identifier type-parameter-list? class-base? type-parameter-constraints-clauses? class-body ";"? ;
anonymous-method-expression ::= "delegate" anonymous-method-signature? block ;
interface-method-declaration ::= attributes? "new"? return-type identifier type-parameter-list? "(" formal-parameter-list? ")" type-parameter-constraints-clauses? ";" ;
inclusive-or-expression ::= exclusive-or-expression | (inclusive-or-expression "|" exclusive-or-expression) ;
add-accessor-declaration ::= attributes? "add" block ;
pre-increment-expression ::= "++" unary-expression ;
accessor-modifier ::= "protected" | "internal" | "private" | ("protected" "internal") | ("internal" "protected") ;
remove-accessor-declaration ::= attributes? "remove" block ;
attribute ::= attribute-name attribute-arguments? ;
null-coalescing-expression ::= conditional-or-expression | (conditional-or-expression "??" null-coalescing-expression) ;
struct-body ::= "{" struct-member-declarations? "}" ;
interface-property-declaration ::= attributes? "new"? type identifier "{" interface-accessors "}" ;
struct-member-declarations ::= struct-member-declaration | (struct-member-declarations struct-member-declaration) ;
using-namespace-directive ::= "using" namespace-name ";" ;
attribute-target-specifier ::= attribute-target ":" ;
operator-modifiers ::= operator-modifier | (operator-modifiers operator-modifier) ;
constant-modifiers ::= constant-modifier | (constant-modifiers constant-modifier) ;
dim-separators ::= "," | (dim-separators ",") ;
variable-declarators ::= variable-declarator | (variable-declarators "," variable-declarator) ;
constructor-constraint ::= "new" "(" ")" ;
fixed-parameter ::= attributes? parameter-modifier? type identifier ;
method-modifiers ::= method-modifier | (method-modifiers method-modifier) ;
constructor-initializer ::= (":" "base" "(" argument-list? ")") | (":" "this" "(" argument-list? ")") ;
method-declaration ::= method-header method-body ;
block ::= "{" statement-list? "}" ;
general-catch-clause ::= "catch" block ;
goto-statement ::= ("goto" identifier ";") | ("goto" "case" constant-expression ";") | ("goto" "default" ";") ;
struct-modifiers ::= struct-modifier | (struct-modifiers struct-modifier) ;
property-modifiers ::= property-modifier | (property-modifiers property-modifier) ;
type-arguments ::= type-argument | (type-arguments "," type-argument) ;
struct-declaration ::= attributes? struct-modifiers? "partial"? "struct" identifier type-parameter-list? struct-interfaces? type-parameter-constraints-clauses? struct-body ";"? ;
property-declaration ::= attributes? property-modifiers? type member-name "{" accessor-declarations "}" ;
default-value-expression ::= "default" "(" type ")" ;
set-accessor-declaration ::= attributes? accessor-modifier? "set" accessor-body ;
checked-expression ::= "checked" "(" expression ")" ;
specific-catch-clause ::= "catch" "(" class-type identifier? ")" block ;
expression-statement ::= statement-expression ";" ;
qualified-identifier ::= identifier | (qualified-identifier "." identifier) ;
interface-accessors ::= (attributes? "get" ";") | (attributes? "set" ";") | (attributes? "get" ";" attributes? "set" ";") | (attributes? "set" ";" attributes? "get" ";") ;
specific-catch-clauses ::= specific-catch-clause | (specific-catch-clauses specific-catch-clause) ;
conditional-and-expression ::= inclusive-or-expression | (conditional-and-expression "&&" inclusive-or-expression) ;
multiplicative-expression ::= unary-expression | (multiplicative-expression "*" unary-expression) | (multiplicative-expression "/" unary-expression) | (multiplicative-expression "%" unary-expression) ;
array-initializer ::= ("{" variable-initializer-list? "}") | ("{" variable-initializer-list "," "}") ;
for-statement ::= "for" "(" for-initializer? ";" for-condition? ";" for-iterator? ")" embedded-statement ;
constructor-modifiers ::= constructor-modifier | (constructor-modifiers constructor-modifier) ;
field-modifiers ::= field-modifier | (field-modifiers field-modifier) ;
class-modifiers ::= class-modifier | (class-modifiers class-modifier) ;
using-statement ::= "using" "(" resource-acquisition ")" embedded-statement ;
attribute-arguments ::= ("(" positional-argument-list? ")") | ("(" positional-argument-list "," named-argument-list ")") | ("(" named-argument-list ")") ;
secondary-constraints ::= interface-type | type-parameter | (secondary-constraints "," interface-type) | (secondary-constraints "," type-parameter) ;
type-parameters ::= (attributes? type-parameter) | (type-parameters "," attributes? type-parameter) ;
rank-specifier ::= "[" dim-separators? "]" ;
unary-operator-declarator ::= type "operator" overloadable-unary-operator "(" type identifier ")" ;
type-argument-list ::= "<" type-arguments ">" ;
statement-expression-list ::= statement-expression | (statement-expression-list "," statement-expression) ;
element-access ::= primary-no-array-creation-expression "[" expression-list "]" ;
typeof-expression ::= ("typeof" "(" type ")") | ("typeof" "(" unbound-type-name ")") | ("typeof" "(" "void" ")") ;
struct-interfaces ::= ":" interface-type-list ;
unchecked-statement ::= "unchecked" block ;
and-expression ::= equality-expression | (and-expression "&" equality-expression) ;
anonymous-method-parameter-list ::= anonymous-method-parameter | (anonymous-method-parameter-list "," anonymous-method-parameter) ;
compilation-unit ::= extern-alias-directives? using-directives? global-attributes? namespace-member-declarations? ;
lock-statement ::= "lock" "(" expression ")" embedded-statement ;
switch-section ::= switch-labels statement-list ;
equality-expression ::= relational-expression | (equality-expression "==" relational-expression) | (equality-expression "!=" relational-expression) ;
static-constructor-modifiers ::= ("extern"? "static") | ("static" "extern"?) ;
parenthesized-expression ::= "(" expression ")" ;
qualified-alias-member ::= identifier "::" identifier type-argument-list? ;
throw-statement ::= "throw" expression? ";" ;
finalizer-declaration ::= attributes? "extern"? "~" identifier "(" ")" finalizer-body ;
attribute-sections ::= attribute-section | (attribute-sections attribute-section) ;
conditional-expression ::= null-coalescing-expression | (null-coalescing-expression "?" expression ":" expression) ;
commas ::= "," | (commas ",") ;
type-parameter-constraints-clause ::= "where" type-parameter ":" type-parameter-constraints ;
statement-list ::= statement | (statement-list statement) ;
additive-expression ::= multiplicative-expression | (additive-expression "+" multiplicative-expression) | (additive-expression "-" multiplicative-expression) ;
type-parameter-list ::= "<" type-parameters ">" ;
parameter-array ::= attributes? "params" array-type identifier ;
delegate-modifiers ::= delegate-modifier | (delegate-modifiers delegate-modifier) ;
interface-event-declaration ::= attributes? "new"? "event" type identifier ";" ;
delegate-declaration ::= attributes? delegate-modifiers? "delegate" return-type identifier type-parameter-list? "(" formal-parameter-list? ")" type-parameter-constraints-clauses? ";" ;
attribute-list ::= attribute | (attribute-list "," attribute) ;
yield-statement ::= ("yield" "return" expression ";") | ("yield" "break" ";") ;
binary-operator-declarator ::= type "operator" overloadable-binary-operator "(" type identifier "," type identifier ")" ;
indexer-modifiers ::= indexer-modifier | (indexer-modifiers indexer-modifier) ;
array-type ::= non-array-type rank-specifiers ;
extern-alias-directives ::= extern-alias-directive | (extern-alias-directives extern-alias-directive) ;
anonymous-method-signature ::= "(" anonymous-method-parameter-list? ")" ;
constructor-declaration ::= attributes? constructor-modifiers? constructor-declarator constructor-body ;
field-declaration ::= attributes? field-modifiers? type variable-declarators ";" ;
nullable-type ::= non-nullable-value-type "?" ;
variable-declarator ::= identifier | (identifier "=" variable-initializer) ;
break-statement ::= "break" ";" ;
generic-dimension-specifier ::= "<" commas? ">" ;
post-decrement-expression ::= primary-expression "--" ;
enum-base ::= ":" integral-type ;
anonymous-method-parameter ::= parameter-modifier? type identifier ;
switch-label ::= ("case" constant-expression ":") | ("default" ":") ;
named-argument-list ::= named-argument | (named-argument-list "," named-argument) ;
namespace-member-declarations ::= namespace-member-declaration | (namespace-member-declarations namespace-member-declaration) ;
interface-indexer-declaration ::= attributes? "new"? type "this" "[" formal-parameter-list "]" "{" interface-accessors "}" ;
switch-statement ::= "switch" "(" expression ")" switch-block ;
enum-member-declaration ::= (attributes? identifier) | (attributes? identifier "=" constant-expression) ;
return-statement ::= "return" expression? ";" ;
event-accessor-declarations ::= (add-accessor-declaration remove-accessor-declaration) | (remove-accessor-declaration add-accessor-declaration) ;
get-accessor-declaration ::= attributes? accessor-modifier? "get" accessor-body ;
global-attribute-section ::= ("[" global-attribute-target-specifier attribute-list "]") | ("[" global-attribute-target-specifier attribute-list "," "]") ;
event-modifiers ::= event-modifier | (event-modifiers event-modifier) ;
namespace-declaration ::= "namespace" qualified-identifier namespace-body ";"? ;
class-base ::= (":" class-type) | (":" interface-type-list) | (":" class-type "," interface-type-list) ;
namespace-or-type-name ::= (identifier type-argument-list?) | qualified-alias-member | (namespace-or-type-name "." identifier type-argument-list?) ;
--------------------cs::csharp-ecma-334-4.bgf--------------------
accessor-declarations ::= (get-accessor-declaration set-accessor-declaration?) | (set-accessor-declaration get-accessor-declaration?) ;
delegate-creation-expression ::= "new" delegate-type "(" expression ")" ;
relational-expression ::= shift-expression | (relational-expression "<" shift-expression) | (relational-expression ">" shift-expression) | (relational-expression "<=" shift-expression) | (relational-expression ">=" shift-expression) | (relational-expression "is" type) | (relational-expression "as" type) ;
global-attribute-target-specifier ::= global-attribute-target ":" ;
pre-decrement-expression ::= "--" unary-expression ;
constant-declarator ::= identifier "=" constant-expression ;
method-header ::= attributes? method-modifiers? return-type member-name type-parameter-list? "(" formal-parameter-list? ")" type-parameter-constraints-clauses? ;
finally-clause ::= "finally" block ;
interface-member-declarations ::= interface-member-declaration | (interface-member-declarations interface-member-declaration) ;
member-access ::= (primary-expression "." identifier type-argument-list?) | (predefined-type "." identifier type-argument-list?) | (qualified-alias-member "." identifier type-argument-list?) ;
unary-expression ::= primary-expression | ("+" unary-expression) | ("-" unary-expression) | ("!" unary-expression) | ("~" unary-expression) | pre-increment-expression | pre-decrement-expression | cast-expression ;
unbound-type-name ::= (identifier generic-dimension-specifier?) | (identifier "::" identifier generic-dimension-specifier?) | (unbound-type-name "." identifier generic-dimension-specifier?) ;
invocation-expression ::= primary-expression "(" argument-list? ")" ;
local-constant-declaration ::= "const" type constant-declarators ;
enum-body ::= ("{" enum-member-declarations? "}") | ("{" enum-member-declarations "," "}") ;
using-directives ::= using-directive | (using-directives using-directive) ;
interface-modifiers ::= interface-modifier | (interface-modifiers interface-modifier) ;
interface-declaration ::= attributes? interface-modifiers? "partial"? "interface" identifier type-parameter-list? interface-base? type-parameter-constraints-clauses? interface-body ";"? ;
cast-expression ::= "(" type ")" unary-expression ;
interface-base ::= ":" interface-type-list ;
extern-alias-directive ::= "extern" "alias" identifier ";" ;
constructor-declarator ::= identifier "(" formal-parameter-list? ")" constructor-initializer? ;
fixed-parameters ::= fixed-parameter | (fixed-parameters "," fixed-parameter) ;
formal-parameter-list ::= fixed-parameters | (fixed-parameters "," parameter-array) | parameter-array ;
base-access ::= ("base" "." identifier type-argument-list?) | ("base" "[" expression-list "]") ;
member-name ::= identifier | (interface-type "." identifier) ;
try-statement ::= ("try" block catch-clauses) | ("try" block catch-clauses? finally-clause) ;
declaration-statement ::= (local-variable-declaration ";") | (local-constant-declaration ";") ;
variable-initializer-list ::= variable-initializer | (variable-initializer-list "," variable-initializer) ;
class-body ::= "{" class-member-declarations? "}" ;
unchecked-expression ::= "unchecked" "(" expression ")" ;
type-parameter-constraints-clauses ::= type-parameter-constraints-clause | (type-parameter-constraints-clauses type-parameter-constraints-clause) ;
namespace-body ::= "{" extern-alias-directives? using-directives? namespace-member-declarations? "}" ;
while-statement ::= "while" "(" boolean-expression ")" embedded-statement ;
exclusive-or-expression ::= and-expression | (exclusive-or-expression "^" and-expression) ;
catch-clauses ::= specific-catch-clauses | (specific-catch-clauses? general-catch-clause) ;
array-creation-expression ::= ("new" non-array-type "[" expression-list "]" rank-specifiers? array-initializer?) | ("new" array-type array-initializer) ;
operator-declaration ::= attributes? operator-modifiers operator-declarator operator-body ;
constant-declaration ::= attributes? constant-modifiers? "const" type constant-declarators ";" ;
named-argument ::= identifier "=" attribute-argument-expression ;
assignment ::= unary-expression assignment-operator expression ;
local-variable-declaration ::= type local-variable-declarators ;
continue-statement ::= "continue" ";" ;
checked-statement ::= "checked" block ;
using-alias-directive ::= "using" identifier "=" namespace-or-type-name ";" ;
static-constructor-declaration ::= attributes? static-constructor-modifiers identifier "(" ")" static-constructor-body ;
event-declaration ::= (attributes? event-modifiers? "event" type variable-declarators ";") | (attributes? event-modifiers? "event" type member-name "{" event-accessor-declarations "}") ;
simple-name ::= identifier type-argument-list? ;
conversion-operator-declarator ::= ("implicit" "operator" type "(" type identifier ")") | ("explicit" "operator" type "(" type identifier ")") ;
shift-expression ::= additive-expression | (shift-expression "<<" additive-expression) | (shift-expression right-shift additive-expression) ;
post-increment-expression ::= primary-expression "++" ;
enum-member-declarations ::= enum-member-declaration | (enum-member-declarations "," enum-member-declaration) ;
local-variable-declarator ::= identifier | (identifier "=" local-variable-initializer) ;
indexer-declarator ::= (type "this" "[" formal-parameter-list "]") | (type interface-type "." "this" "[" formal-parameter-list "]") ;
if-statement ::= ("if" "(" boolean-expression ")" embedded-statement) | ("if" "(" boolean-expression ")" embedded-statement "else" embedded-statement) ;
type-parameter-constraints ::= primary-constraint | secondary-constraints | constructor-constraint | (primary-constraint "," secondary-constraints) | (primary-constraint "," constructor-constraint) | (secondary-constraints "," constructor-constraint) | (primary-constraint "," secondary-constraints "," constructor-constraint) ;
interface-type-list ::= interface-type | (interface-type-list "," interface-type) ;
argument ::= expression | ("ref" variable-reference) | ("out" variable-reference) ;
conditional-or-expression ::= conditional-and-expression | (conditional-or-expression "||" conditional-and-expression) ;
constant-declarators ::= constant-declarator | (constant-declarators "," constant-declarator) ;
switch-labels ::= switch-label | (switch-labels switch-label) ;
object-creation-expression ::= "new" type "(" argument-list? ")" ;
class-member-declarations ::= class-member-declaration | (class-member-declarations class-member-declaration) ;
interface-body ::= "{" interface-member-declarations? "}" ;
rank-specifiers ::= rank-specifier | (rank-specifiers rank-specifier) ;
labeled-statement ::= identifier ":" statement ;
positional-argument-list ::= positional-argument | (positional-argument-list "," positional-argument) ;
attribute-section ::= ("[" attribute-target-specifier? attribute-list "]") | ("[" attribute-target-specifier? attribute-list "," "]") ;
switch-block ::= "{" switch-sections? "}" ;
local-variable-declarators ::= local-variable-declarator | (local-variable-declarators "," local-variable-declarator) ;
expression-list ::= expression | (expression-list "," expression) ;
enum-modifiers ::= enum-modifier | (enum-modifiers enum-modifier) ;
enum-declaration ::= attributes? enum-modifiers? "enum" identifier enum-base? enum-body ";"? ;
argument-list ::= argument | (argument-list "," argument) ;
do-statement ::= "do" embedded-statement "while" "(" boolean-expression ")" ";" ;
indexer-declaration ::= attributes? indexer-modifiers? indexer-declarator "{" accessor-declarations "}" ;
foreach-statement ::= "foreach" "(" type identifier "in" expression ")" embedded-statement ;
global-attribute-sections ::= global-attribute-section | (global-attribute-sections global-attribute-section) ;
switch-sections ::= switch-section | (switch-sections switch-section) ;
class-declaration ::= attributes? class-modifiers? "partial"? "class" identifier type-parameter-list? class-base? type-parameter-constraints-clauses? class-body ";"? ;
anonymous-method-expression ::= "delegate" anonymous-method-signature? block ;
interface-method-declaration ::= attributes? "new"? return-type identifier type-parameter-list? "(" formal-parameter-list? ")" type-parameter-constraints-clauses? ";" ;
inclusive-or-expression ::= exclusive-or-expression | (inclusive-or-expression "|" exclusive-or-expression) ;
add-accessor-declaration ::= attributes? "add" block ;
pre-increment-expression ::= "++" unary-expression ;
remove-accessor-declaration ::= attributes? "remove" block ;
accessor-modifier ::= "protected" | "internal" | "private" | ("protected" "internal") | ("internal" "protected") ;
attribute ::= attribute-name attribute-arguments? ;
null-coalescing-expression ::= conditional-or-expression | (conditional-or-expression "??" null-coalescing-expression) ;
struct-body ::= "{" struct-member-declarations? "}" ;
interface-property-declaration ::= attributes? "new"? type identifier "{" interface-accessors "}" ;
struct-member-declarations ::= struct-member-declaration | (struct-member-declarations struct-member-declaration) ;
using-namespace-directive ::= "using" namespace-name ";" ;
operator-modifiers ::= operator-modifier | (operator-modifiers operator-modifier) ;
constant-modifiers ::= constant-modifier | (constant-modifiers constant-modifier) ;
attribute-target-specifier ::= attribute-target ":" ;
dim-separators ::= "," | (dim-separators ",") ;
variable-declarators ::= variable-declarator | (variable-declarators "," variable-declarator) ;
fixed-parameter ::= attributes? parameter-modifier? type identifier ;
method-modifiers ::= method-modifier | (method-modifiers method-modifier) ;
constructor-constraint ::= "new" "(" ")" ;
constructor-initializer ::= (":" "base" "(" argument-list? ")") | (":" "this" "(" argument-list? ")") ;
method-declaration ::= method-header method-body ;
block ::= "{" statement-list? "}" ;
general-catch-clause ::= "catch" block ;
goto-statement ::= ("goto" identifier ";") | ("goto" "case" constant-expression ";") | ("goto" "default" ";") ;
struct-modifiers ::= struct-modifier | (struct-modifiers struct-modifier) ;
property-modifiers ::= property-modifier | (property-modifiers property-modifier) ;
type-arguments ::= type-argument | (type-arguments "," type-argument) ;
struct-declaration ::= attributes? struct-modifiers? "partial"? "struct" identifier type-parameter-list? struct-interfaces? type-parameter-constraints-clauses? struct-body ";"? ;
property-declaration ::= attributes? property-modifiers? type member-name "{" accessor-declarations "}" ;
default-value-expression ::= "default" "(" type ")" ;
set-accessor-declaration ::= attributes? accessor-modifier? "set" accessor-body ;
checked-expression ::= "checked" "(" expression ")" ;
specific-catch-clause ::= "catch" "(" class-type identifier? ")" block ;
expression-statement ::= statement-expression ";" ;
qualified-identifier ::= identifier | (qualified-identifier "." identifier) ;
interface-accessors ::= (attributes? "get" ";") | (attributes? "set" ";") | (attributes? "get" ";" attributes? "set" ";") | (attributes? "set" ";" attributes? "get" ";") ;
specific-catch-clauses ::= specific-catch-clause | (specific-catch-clauses specific-catch-clause) ;
conditional-and-expression ::= inclusive-or-expression | (conditional-and-expression "&&" inclusive-or-expression) ;
multiplicative-expression ::= unary-expression | (multiplicative-expression "*" unary-expression) | (multiplicative-expression "/" unary-expression) | (multiplicative-expression "%" unary-expression) ;
array-initializer ::= ("{" variable-initializer-list? "}") | ("{" variable-initializer-list "," "}") ;
for-statement ::= "for" "(" for-initializer? ";" for-condition? ";" for-iterator? ")" embedded-statement ;
constructor-modifiers ::= constructor-modifier | (constructor-modifiers constructor-modifier) ;
field-modifiers ::= field-modifier | (field-modifiers field-modifier) ;
class-modifiers ::= class-modifier | (class-modifiers class-modifier) ;
using-statement ::= "using" "(" resource-acquisition ")" embedded-statement ;
attribute-arguments ::= ("(" positional-argument-list? ")") | ("(" positional-argument-list "," named-argument-list ")") | ("(" named-argument-list ")") ;
type-parameters ::= (attributes? type-parameter) | (type-parameters "," attributes? type-parameter) ;
secondary-constraints ::= interface-type | type-parameter | (secondary-constraints "," interface-type) | (secondary-constraints "," type-parameter) ;
rank-specifier ::= "[" dim-separators? "]" ;
unary-operator-declarator ::= type "operator" overloadable-unary-operator "(" type identifier ")" ;
type-argument-list ::= "<" type-arguments ">" ;
statement-expression-list ::= statement-expression | (statement-expression-list "," statement-expression) ;
element-access ::= primary-no-array-creation-expression "[" expression-list "]" ;
typeof-expression ::= ("typeof" "(" type ")") | ("typeof" "(" unbound-type-name ")") | ("typeof" "(" "void" ")") ;
struct-interfaces ::= ":" interface-type-list ;
unchecked-statement ::= "unchecked" block ;
anonymous-method-parameter-list ::= anonymous-method-parameter | (anonymous-method-parameter-list "," anonymous-method-parameter) ;
and-expression ::= equality-expression | (and-expression "&" equality-expression) ;
compilation-unit ::= extern-alias-directives? using-directives? global-attributes? namespace-member-declarations? ;
lock-statement ::= "lock" "(" expression ")" embedded-statement ;
switch-section ::= switch-labels statement-list ;
equality-expression ::= relational-expression | (equality-expression "==" relational-expression) | (equality-expression "!=" relational-expression) ;
static-constructor-modifiers ::= ("extern"? "static") | ("static" "extern"?) ;
parenthesized-expression ::= "(" expression ")" ;
throw-statement ::= "throw" expression? ";" ;
qualified-alias-member ::= identifier "::" identifier type-argument-list? ;
finalizer-declaration ::= attributes? "extern"? "~" identifier "(" ")" finalizer-body ;
attribute-sections ::= attribute-section | (attribute-sections attribute-section) ;
conditional-expression ::= null-coalescing-expression | (null-coalescing-expression "?" expression ":" expression) ;
commas ::= "," | (commas ",") ;
type-parameter-constraints-clause ::= "where" type-parameter ":" type-parameter-constraints ;
statement-list ::= statement | (statement-list statement) ;
additive-expression ::= multiplicative-expression | (additive-expression "+" multiplicative-expression) | (additive-expression "-" multiplicative-expression) ;
parameter-array ::= attributes? "params" array-type identifier ;
type-parameter-list ::= "<" type-parameters ">" ;
delegate-modifiers ::= delegate-modifier | (delegate-modifiers delegate-modifier) ;
interface-event-declaration ::= attributes? "new"? "event" type identifier ";" ;
delegate-declaration ::= attributes? delegate-modifiers? "delegate" return-type identifier type-parameter-list? "(" formal-parameter-list? ")" type-parameter-constraints-clauses? ";" ;
yield-statement ::= ("yield" "return" expression ";") | ("yield" "break" ";") ;
attribute-list ::= attribute | (attribute-list "," attribute) ;
binary-operator-declarator ::= type "operator" overloadable-binary-operator "(" type identifier "," type identifier ")" ;
indexer-modifiers ::= indexer-modifier | (indexer-modifiers indexer-modifier) ;
extern-alias-directives ::= extern-alias-directive | (extern-alias-directives extern-alias-directive) ;
array-type ::= non-array-type rank-specifiers ;
anonymous-method-signature ::= "(" anonymous-method-parameter-list? ")" ;
constructor-declaration ::= attributes? constructor-modifiers? constructor-declarator constructor-body ;
field-declaration ::= attributes? field-modifiers? type variable-declarators ";" ;
nullable-type ::= non-nullable-value-type "?" ;
variable-declarator ::= identifier | (identifier "=" variable-initializer) ;
generic-dimension-specifier ::= "<" commas? ">" ;
break-statement ::= "break" ";" ;
post-decrement-expression ::= primary-expression "--" ;
enum-base ::= ":" integral-type ;
anonymous-method-parameter ::= parameter-modifier? type identifier ;
switch-label ::= ("case" constant-expression ":") | ("default" ":") ;
namespace-member-declarations ::= namespace-member-declaration | (namespace-member-declarations namespace-member-declaration) ;
named-argument-list ::= named-argument | (named-argument-list "," named-argument) ;
interface-indexer-declaration ::= attributes? "new"? type "this" "[" formal-parameter-list "]" "{" interface-accessors "}" ;
switch-statement ::= "switch" "(" expression ")" switch-block ;
enum-member-declaration ::= (attributes? identifier) | (attributes? identifier "=" constant-expression) ;
return-statement ::= "return" expression? ";" ;
event-accessor-declarations ::= (add-accessor-declaration remove-accessor-declaration) | (remove-accessor-declaration add-accessor-declaration) ;
get-accessor-declaration ::= attributes? accessor-modifier? "get" accessor-body ;
global-attribute-section ::= ("[" global-attribute-target-specifier attribute-list "]") | ("[" global-attribute-target-specifier attribute-list "," "]") ;
event-modifiers ::= event-modifier | (event-modifiers event-modifier) ;
namespace-declaration ::= "namespace" qualified-identifier namespace-body ";"? ;
class-base ::= (":" class-type) | (":" interface-type-list) | (":" class-type "," interface-type-list) ;
namespace-or-type-name ::= (identifier type-argument-list?) | qualified-alias-member | (namespace-or-type-name "." identifier type-argument-list?) ;
--------------------cs::csharp-iso-23270-2003.bgf--------------------
accessor-declarations ::= (get-accessor-declaration set-accessor-declaration?) | (set-accessor-declaration get-accessor-declaration?) ;
delegate-creation-expression ::= "new" delegate-type "(" expression ")" ;
relational-expression ::= shift-expression | (relational-expression "<" shift-expression) | (relational-expression ">" shift-expression) | (relational-expression "<=" shift-expression) | (relational-expression ">=" shift-expression) | (relational-expression "is" type) | (relational-expression "as" type) ;
global-attribute-target-specifier ::= global-attribute-target ":" ;
pre-decrement-expression ::= "--" unary-expression ;
constant-declarator ::= identifier "=" constant-expression ;
method-header ::= attributes? method-modifiers? return-type member-name "(" formal-parameter-list? ")" ;
finally-clause ::= "finally" block ;
interface-member-declarations ::= interface-member-declaration | (interface-member-declarations interface-member-declaration) ;
member-access ::= (primary-expression "." identifier) | (predefined-type "." identifier) ;
unary-expression ::= primary-expression | ("+" unary-expression) | ("-" unary-expression) | ("!" unary-expression) | ("~" unary-expression) | ("*" unary-expression) | pre-increment-expression | pre-decrement-expression | cast-expression ;
invocation-expression ::= primary-expression "(" argument-list? ")" ;
local-constant-declaration ::= "const" type constant-declarators ;
enum-body ::= ("{" enum-member-declarations? "}") | ("{" enum-member-declarations "," "}") ;
using-directives ::= using-directive | (using-directives using-directive) ;
interface-modifiers ::= interface-modifier | (interface-modifiers interface-modifier) ;
interface-declaration ::= attributes? interface-modifiers? "interface" identifier interface-base? interface-body ";"? ;
cast-expression ::= "(" type ")" unary-expression ;
interface-base ::= ":" interface-type-list ;
constructor-declarator ::= identifier "(" formal-parameter-list? ")" constructor-initializer? ;
fixed-parameters ::= fixed-parameter | (fixed-parameters "," fixed-parameter) ;
formal-parameter-list ::= fixed-parameters | (fixed-parameters "," parameter-array) | parameter-array ;
base-access ::= ("base" "." identifier) | ("base" "[" expression-list "]") ;
member-name ::= identifier | (interface-type "." identifier) ;
try-statement ::= ("try" block catch-clauses) | ("try" block finally-clause) | ("try" block catch-clauses finally-clause) ;
declaration-statement ::= (local-variable-declaration ";") | (local-constant-declaration ";") ;
variable-initializer-list ::= variable-initializer | (variable-initializer-list "," variable-initializer) ;
class-body ::= "{" class-member-declarations? "}" ;
unchecked-expression ::= "unchecked" "(" expression ")" ;
namespace-body ::= "{" using-directives? namespace-member-declarations? "}" ;
while-statement ::= "while" "(" boolean-expression ")" embedded-statement ;
exclusive-or-expression ::= and-expression | (exclusive-or-expression "^" and-expression) ;
catch-clauses ::= (specific-catch-clauses general-catch-clause?) | (specific-catch-clauses? general-catch-clause) ;
array-creation-expression ::= ("new" non-array-type "[" expression-list "]" rank-specifiers? array-initializer?) | ("new" array-type array-initializer) ;
named-argument ::= identifier "=" attribute-argument-expression ;
operator-declaration ::= attributes? operator-modifiers operator-declarator operator-body ;
constant-declaration ::= attributes? constant-modifiers? "const" type constant-declarators ";" ;
assignment ::= unary-expression assignment-operator expression ;
local-variable-declaration ::= type local-variable-declarators ;
continue-statement ::= "continue" ";" ;
checked-statement ::= "checked" block ;
using-alias-directive ::= "using" identifier "=" namespace-or-type-name ";" ;
static-constructor-declaration ::= attributes? static-constructor-modifiers identifier "(" ")" static-constructor-body ;
event-declaration ::= (attributes? event-modifiers? "event" type variable-declarators ";") | (attributes? event-modifiers? "event" type member-name "{" event-accessor-declarations "}") ;
conversion-operator-declarator ::= ("implicit" "operator" type "(" type identifier ")") | ("explicit" "operator" type "(" type identifier ")") ;
shift-expression ::= additive-expression | (shift-expression "<<" additive-expression) | (shift-expression ">>" additive-expression) ;
post-increment-expression ::= primary-expression "++" ;
enum-member-declarations ::= enum-member-declaration | (enum-member-declarations "," enum-member-declaration) ;
local-variable-declarator ::= identifier | (identifier "=" local-variable-initializer) ;
if-statement ::= ("if" "(" boolean-expression ")" embedded-statement) | ("if" "(" boolean-expression ")" embedded-statement "else" embedded-statement) ;
indexer-declarator ::= (type "this" "[" formal-parameter-list "]") | (type interface-type "." "this" "[" formal-parameter-list "]") ;
interface-type-list ::= interface-type | (interface-type-list "," interface-type) ;
argument ::= expression | ("ref" variable-reference) | ("out" variable-reference) ;
conditional-or-expression ::= conditional-and-expression | (conditional-or-expression "||" conditional-and-expression) ;
constant-declarators ::= constant-declarator | (constant-declarators "," constant-declarator) ;
switch-labels ::= switch-label | (switch-labels switch-label) ;
object-creation-expression ::= "new" type "(" argument-list? ")" ;
class-member-declarations ::= class-member-declaration | (class-member-declarations class-member-declaration) ;
interface-body ::= "{" interface-member-declarations? "}" ;
rank-specifiers ::= rank-specifier | (rank-specifiers rank-specifier) ;
positional-argument-list ::= positional-argument | (positional-argument-list "," positional-argument) ;
labeled-statement ::= identifier ":" statement ;
attribute-section ::= ("[" attribute-target-specifier? attribute-list "]") | ("[" attribute-target-specifier? attribute-list "," "]") ;
switch-block ::= "{" switch-sections? "}" ;
local-variable-declarators ::= local-variable-declarator | (local-variable-declarators "," local-variable-declarator) ;
expression-list ::= expression | (expression-list "," expression) ;
enum-modifiers ::= enum-modifier | (enum-modifiers enum-modifier) ;
enum-declaration ::= attributes? enum-modifiers? "enum" identifier enum-base? enum-body ";"? ;
argument-list ::= argument | (argument-list "," argument) ;
do-statement ::= "do" embedded-statement "while" "(" boolean-expression ")" ";" ;
indexer-declaration ::= attributes? indexer-modifiers? indexer-declarator "{" accessor-declarations "}" ;
foreach-statement ::= "foreach" "(" type identifier "in" expression ")" embedded-statement ;
global-attribute-sections ::= global-attribute-section | (global-attribute-sections global-attribute-section) ;
switch-sections ::= switch-section | (switch-sections switch-section) ;
destructor-declaration ::= attributes? "extern"? "~" identifier "(" ")" destructor-body ;
class-declaration ::= attributes? class-modifiers? "class" identifier class-base? class-body ";"? ;
interface-method-declaration ::= attributes? "new"? return-type identifier "(" formal-parameter-list? ")" ";" ;
inclusive-or-expression ::= exclusive-or-expression | (inclusive-or-expression "|" exclusive-or-expression) ;
add-accessor-declaration ::= attributes? "add" block ;
pre-increment-expression ::= "++" unary-expression ;
remove-accessor-declaration ::= attributes? "remove" block ;
attribute ::= attribute-name attribute-arguments? ;
struct-body ::= "{" struct-member-declarations? "}" ;
interface-property-declaration ::= attributes? "new"? type identifier "{" interface-accessors "}" ;
struct-member-declarations ::= struct-member-declaration | (struct-member-declarations struct-member-declaration) ;
using-namespace-directive ::= "using" namespace-name ";" ;
attribute-target-specifier ::= attribute-target ":" ;
dim-separators ::= "," | (dim-separators ",") ;
operator-modifiers ::= operator-modifier | (operator-modifiers operator-modifier) ;
constant-modifiers ::= constant-modifier | (constant-modifiers constant-modifier) ;
variable-declarators ::= variable-declarator | (variable-declarators "," variable-declarator) ;
fixed-parameter ::= attributes? parameter-modifier? type identifier ;
method-modifiers ::= method-modifier | (method-modifiers method-modifier) ;
constructor-initializer ::= (":" "base" "(" argument-list? ")") | (":" "this" "(" argument-list? ")") ;
method-declaration ::= method-header method-body ;
block ::= "{" statement-list? "}" ;
general-catch-clause ::= "catch" block ;
goto-statement ::= ("goto" identifier ";") | ("goto" "case" constant-expression ";") | ("goto" "default" ";") ;
struct-modifiers ::= struct-modifier | (struct-modifiers struct-modifier) ;
property-modifiers ::= property-modifier | (property-modifiers property-modifier) ;
struct-declaration ::= attributes? struct-modifiers? "struct" identifier struct-interfaces? struct-body ";"? ;
property-declaration ::= attributes? property-modifiers? type member-name "{" accessor-declarations "}" ;
set-accessor-declaration ::= attributes? "set" accessor-body ;
checked-expression ::= "checked" "(" expression ")" ;
specific-catch-clause ::= "catch" "(" class-type identifier? ")" block ;
expression-statement ::= statement-expression ";" ;
qualified-identifier ::= identifier | (qualified-identifier "." identifier) ;
interface-accessors ::= (attributes? "get" ";") | (attributes? "set" ";") | (attributes? "get" ";" attributes? "set" ";") | (attributes? "set" ";" attributes? "get" ";") ;
specific-catch-clauses ::= specific-catch-clause | (specific-catch-clauses specific-catch-clause) ;
conditional-and-expression ::= inclusive-or-expression | (conditional-and-expression "&&" inclusive-or-expression) ;
multiplicative-expression ::= unary-expression | (multiplicative-expression "*" unary-expression) | (multiplicative-expression "/" unary-expression) | (multiplicative-expression "%" unary-expression) ;
array-initializer ::= ("{" variable-initializer-list? "}") | ("{" variable-initializer-list "," "}") ;
for-statement ::= "for" "(" for-initializer? ";" for-condition? ";" for-iterator? ")" embedded-statement ;
constructor-modifiers ::= constructor-modifier | (constructor-modifiers constructor-modifier) ;
field-modifiers ::= field-modifier | (field-modifiers field-modifier) ;
class-modifiers ::= class-modifier | (class-modifiers class-modifier) ;
using-statement ::= "using" "(" resource-acquisition ")" embedded-statement ;
attribute-arguments ::= ("(" positional-argument-list? ")") | ("(" positional-argument-list "," named-argument-list ")") | ("(" named-argument-list ")") ;
rank-specifier ::= "[" dim-separators? "]" ;
unary-operator-declarator ::= type "operator" overloadable-unary-operator "(" type identifier ")" ;
statement-expression-list ::= statement-expression | (statement-expression-list "," statement-expression) ;
element-access ::= primary-no-array-creation-expression "[" expression-list "]" ;
typeof-expression ::= ("typeof" "(" type ")") | ("typeof" "(" "void" ")") ;
struct-interfaces ::= ":" interface-type-list ;
unchecked-statement ::= "unchecked" block ;
and-expression ::= equality-expression | (and-expression "&" equality-expression) ;
compilation-unit ::= using-directives? global-attributes? namespace-member-declarations? ;
lock-statement ::= "lock" "(" expression ")" embedded-statement ;
switch-section ::= switch-labels statement-list ;
equality-expression ::= relational-expression | (equality-expression "==" relational-expression) | (equality-expression "!=" relational-expression) ;
static-constructor-modifiers ::= ("extern"? "static") | ("static" "extern"?) ;
parenthesized-expression ::= "(" expression ")" ;
throw-statement ::= "throw" expression? ";" ;
attribute-sections ::= attribute-section | (attribute-sections attribute-section) ;
conditional-expression ::= conditional-or-expression | (conditional-or-expression "?" expression ":" expression) ;
statement-list ::= statement | (statement-list statement) ;
additive-expression ::= multiplicative-expression | (additive-expression "+" multiplicative-expression) | (additive-expression "-" multiplicative-expression) ;
parameter-array ::= attributes? "params" array-type identifier ;
delegate-modifiers ::= delegate-modifier | (delegate-modifiers delegate-modifier) ;
interface-event-declaration ::= attributes "new"? "event" type identifier ";" ;
delegate-declaration ::= attributes? delegate-modifiers? "delegate" type identifier "(" formal-parameter-list? ")" ";" ;
attribute-list ::= attribute | (attribute-list "," attribute) ;
array-type ::= non-array-type rank-specifiers ;
indexer-modifiers ::= indexer-modifier | (indexer-modifiers indexer-modifier) ;
binary-operator-declarator ::= type "operator" overloadable-binary-operator "(" type identifier "," type identifier ")" ;
field-declaration ::= attributes? field-modifiers? type variable-declarators ";" ;
constructor-declaration ::= attributes? constructor-modifiers? constructor-declarator constructor-body ;
variable-declarator ::= identifier | (identifier "=" variable-initializer) ;
break-statement ::= "break" ";" ;
post-decrement-expression ::= primary-expression "--" ;
enum-base ::= ":" integral-type ;
switch-label ::= ("case" constant-expression ":") | ("default" ":") ;
named-argument-list ::= named-argument | (named-argument-list "," named-argument) ;
namespace-member-declarations ::= namespace-member-declaration | (namespace-member-declarations namespace-member-declaration) ;
interface-indexer-declaration ::= attributes "new"? type "this" "[" formal-parameter-list "]" "{" interface-accessors "}" ;
switch-statement ::= "switch" "(" expression ")" switch-block ;
enum-member-declaration ::= (attributes? identifier) | (attributes? identifier "=" constant-expression) ;
return-statement ::= "return" expression? ";" ;
event-accessor-declarations ::= (add-accessor-declaration remove-accessor-declaration) | (remove-accessor-declaration add-accessor-declaration) ;
get-accessor-declaration ::= attributes? "get" accessor-body ;
global-attribute-section ::= ("[" global-attribute-target-specifier attribute-list "]") | ("[" global-attribute-target-specifier attribute-list "," "]") ;
event-modifiers ::= event-modifier | (event-modifiers event-modifier) ;
namespace-declaration ::= "namespace" qualified-identifier namespace-body ";"? ;
class-base ::= (":" class-type) | (":" interface-type-list) | (":" class-type "," interface-type-list) ;
namespace-or-type-name ::= identifier | (namespace-or-type-name "." identifier) ;
--------------------cs::csharp-iso-23270-2006.bgf--------------------
accessor-declarations ::= (get-accessor-declaration set-accessor-declaration?) | (set-accessor-declaration get-accessor-declaration?) ;
relational-expression ::= shift-expression | (relational-expression "<" shift-expression) | (relational-expression ">" shift-expression) | (relational-expression "<=" shift-expression) | (relational-expression ">=" shift-expression) | (relational-expression "is" type) | (relational-expression "as" type) ;
delegate-creation-expression ::= "new" delegate-type "(" expression ")" ;
global-attribute-target-specifier ::= global-attribute-target ":" ;
pre-decrement-expression ::= "--" unary-expression ;
constant-declarator ::= identifier "=" constant-expression ;
method-header ::= attributes? method-modifiers? return-type member-name type-parameter-list? "(" formal-parameter-list? ")" type-parameter-constraints-clauses? ;
finally-clause ::= "finally" block ;
interface-member-declarations ::= interface-member-declaration | (interface-member-declarations interface-member-declaration) ;
member-access ::= (primary-expression "." identifier type-argument-list?) | (predefined-type "." identifier type-argument-list?) | (qualified-alias-member "." identifier type-argument-list?) ;
unbound-type-name ::= (identifier generic-dimension-specifier?) | (identifier "::" identifier generic-dimension-specifier?) | (unbound-type-name "." identifier generic-dimension-specifier?) ;
unary-expression ::= primary-expression | ("+" unary-expression) | ("-" unary-expression) | ("!" unary-expression) | ("~" unary-expression) | pre-increment-expression | pre-decrement-expression | cast-expression ;
invocation-expression ::= primary-expression "(" argument-list? ")" ;
local-constant-declaration ::= "const" type constant-declarators ;
enum-body ::= ("{" enum-member-declarations? "}") | ("{" enum-member-declarations "," "}") ;
using-directives ::= using-directive | (using-directives using-directive) ;
interface-modifiers ::= interface-modifier | (interface-modifiers interface-modifier) ;
interface-declaration ::= attributes? interface-modifiers? "partial"? "interface" identifier type-parameter-list? interface-base? type-parameter-constraints-clauses? interface-body ";"? ;
cast-expression ::= "(" type ")" unary-expression ;
interface-base ::= ":" interface-type-list ;
extern-alias-directive ::= "extern" "alias" identifier ";" ;
constructor-declarator ::= identifier "(" formal-parameter-list? ")" constructor-initializer? ;
fixed-parameters ::= fixed-parameter | (fixed-parameters "," fixed-parameter) ;
formal-parameter-list ::= fixed-parameters | (fixed-parameters "," parameter-array) | parameter-array ;
base-access ::= ("base" "." identifier type-argument-list?) | ("base" "[" expression-list "]") ;
member-name ::= identifier | (interface-type "." identifier) ;
try-statement ::= ("try" block catch-clauses) | ("try" block catch-clauses? finally-clause) ;
declaration-statement ::= (local-variable-declaration ";") | (local-constant-declaration ";") ;
variable-initializer-list ::= variable-initializer | (variable-initializer-list "," variable-initializer) ;
class-body ::= "{" class-member-declarations? "}" ;
unchecked-expression ::= "unchecked" "(" expression ")" ;
type-parameter-constraints-clauses ::= type-parameter-constraints-clause | (type-parameter-constraints-clauses type-parameter-constraints-clause) ;
namespace-body ::= "{" extern-alias-directives? using-directives? namespace-member-declarations? "}" ;
while-statement ::= "while" "(" boolean-expression ")" embedded-statement ;
exclusive-or-expression ::= and-expression | (exclusive-or-expression "^" and-expression) ;
catch-clauses ::= specific-catch-clauses | (specific-catch-clauses? general-catch-clause) ;
array-creation-expression ::= ("new" non-array-type "[" expression-list "]" rank-specifiers? array-initializer?) | ("new" array-type array-initializer) ;
named-argument ::= identifier "=" attribute-argument-expression ;
operator-declaration ::= attributes? operator-modifiers operator-declarator operator-body ;
constant-declaration ::= attributes? constant-modifiers? "const" type constant-declarators ";" ;
assignment ::= unary-expression assignment-operator expression ;
local-variable-declaration ::= type local-variable-declarators ;
continue-statement ::= "continue" ";" ;
checked-statement ::= "checked" block ;
using-alias-directive ::= "using" identifier "=" namespace-or-type-name ";" ;
static-constructor-declaration ::= attributes? static-constructor-modifiers identifier "(" ")" static-constructor-body ;
event-declaration ::= (attributes? event-modifiers? "event" type variable-declarators ";") | (attributes? event-modifiers? "event" type member-name "{" event-accessor-declarations "}") ;
simple-name ::= identifier type-argument-list? ;
conversion-operator-declarator ::= ("implicit" "operator" type "(" type identifier ")") | ("explicit" "operator" type "(" type identifier ")") ;
shift-expression ::= additive-expression | (shift-expression "<<" additive-expression) | (shift-expression right-shift additive-expression) ;
post-increment-expression ::= primary-expression "++" ;
enum-member-declarations ::= enum-member-declaration | (enum-member-declarations "," enum-member-declaration) ;
local-variable-declarator ::= identifier | (identifier "=" local-variable-initializer) ;
type-parameter-constraints ::= primary-constraint | secondary-constraints | constructor-constraint | (primary-constraint "," secondary-constraints) | (primary-constraint "," constructor-constraint) | (secondary-constraints "," constructor-constraint) | (primary-constraint "," secondary-constraints "," constructor-constraint) ;
indexer-declarator ::= (type "this" "[" formal-parameter-list "]") | (type interface-type "." "this" "[" formal-parameter-list "]") ;
if-statement ::= ("if" "(" boolean-expression ")" embedded-statement) | ("if" "(" boolean-expression ")" embedded-statement "else" embedded-statement) ;
interface-type-list ::= interface-type | (interface-type-list "," interface-type) ;
argument ::= expression | ("ref" variable-reference) | ("out" variable-reference) ;
conditional-or-expression ::= conditional-and-expression | (conditional-or-expression "||" conditional-and-expression) ;
constant-declarators ::= constant-declarator | (constant-declarators "," constant-declarator) ;
switch-labels ::= switch-label | (switch-labels switch-label) ;
object-creation-expression ::= "new" type "(" argument-list? ")" ;
class-member-declarations ::= class-member-declaration | (class-member-declarations class-member-declaration) ;
interface-body ::= "{" interface-member-declarations? "}" ;
rank-specifiers ::= rank-specifier | (rank-specifiers rank-specifier) ;
positional-argument-list ::= positional-argument | (positional-argument-list "," positional-argument) ;
labeled-statement ::= identifier ":" statement ;
attribute-section ::= ("[" attribute-target-specifier? attribute-list "]") | ("[" attribute-target-specifier? attribute-list "," "]") ;
switch-block ::= "{" switch-sections? "}" ;
local-variable-declarators ::= local-variable-declarator | (local-variable-declarators "," local-variable-declarator) ;
expression-list ::= expression | (expression-list "," expression) ;
enum-modifiers ::= enum-modifier | (enum-modifiers enum-modifier) ;
enum-declaration ::= attributes? enum-modifiers? "enum" identifier enum-base? enum-body ";"? ;
argument-list ::= argument | (argument-list "," argument) ;
do-statement ::= "do" embedded-statement "while" "(" boolean-expression ")" ";" ;
indexer-declaration ::= attributes? indexer-modifiers? indexer-declarator "{" accessor-declarations "}" ;
foreach-statement ::= "foreach" "(" type identifier "in" expression ")" embedded-statement ;
global-attribute-sections ::= global-attribute-section | (global-attribute-sections global-attribute-section) ;
switch-sections ::= switch-section | (switch-sections switch-section) ;
class-declaration ::= attributes? class-modifiers? "partial"? "class" identifier type-parameter-list? class-base? type-parameter-constraints-clauses? class-body ";"? ;
anonymous-method-expression ::= "delegate" anonymous-method-signature? block ;
interface-method-declaration ::= attributes? "new"? return-type identifier type-parameter-list? "(" formal-parameter-list? ")" type-parameter-constraints-clauses? ";" ;
inclusive-or-expression ::= exclusive-or-expression | (inclusive-or-expression "|" exclusive-or-expression) ;
add-accessor-declaration ::= attributes? "add" block ;
pre-increment-expression ::= "++" unary-expression ;
accessor-modifier ::= "protected" | "internal" | "private" | ("protected" "internal") | ("internal" "protected") ;
remove-accessor-declaration ::= attributes? "remove" block ;
attribute ::= attribute-name attribute-arguments? ;
null-coalescing-expression ::= conditional-or-expression | (conditional-or-expression "??" null-coalescing-expression) ;
struct-body ::= "{" struct-member-declarations? "}" ;
interface-property-declaration ::= attributes? "new"? type identifier "{" interface-accessors "}" ;
struct-member-declarations ::= struct-member-declaration | (struct-member-declarations struct-member-declaration) ;
using-namespace-directive ::= "using" namespace-name ";" ;
attribute-target-specifier ::= attribute-target ":" ;
operator-modifiers ::= operator-modifier | (operator-modifiers operator-modifier) ;
constant-modifiers ::= constant-modifier | (constant-modifiers constant-modifier) ;
dim-separators ::= "," | (dim-separators ",") ;
variable-declarators ::= variable-declarator | (variable-declarators "," variable-declarator) ;
constructor-constraint ::= "new" "(" ")" ;
fixed-parameter ::= attributes? parameter-modifier? type identifier ;
method-modifiers ::= method-modifier | (method-modifiers method-modifier) ;
constructor-initializer ::= (":" "base" "(" argument-list? ")") | (":" "this" "(" argument-list? ")") ;
method-declaration ::= method-header method-body ;
block ::= "{" statement-list? "}" ;
general-catch-clause ::= "catch" block ;
goto-statement ::= ("goto" identifier ";") | ("goto" "case" constant-expression ";") | ("goto" "default" ";") ;
struct-modifiers ::= struct-modifier | (struct-modifiers struct-modifier) ;
property-modifiers ::= property-modifier | (property-modifiers property-modifier) ;
type-arguments ::= type-argument | (type-arguments "," type-argument) ;
struct-declaration ::= attributes? struct-modifiers? "partial"? "struct" identifier type-parameter-list? struct-interfaces? type-parameter-constraints-clauses? struct-body ";"? ;
property-declaration ::= attributes? property-modifiers? type member-name "{" accessor-declarations "}" ;
default-value-expression ::= "default" "(" type ")" ;
set-accessor-declaration ::= attributes? accessor-modifier? "set" accessor-body ;
checked-expression ::= "checked" "(" expression ")" ;
specific-catch-clause ::= "catch" "(" class-type identifier? ")" block ;
expression-statement ::= statement-expression ";" ;
qualified-identifier ::= identifier | (qualified-identifier "." identifier) ;
interface-accessors ::= (attributes? "get" ";") | (attributes? "set" ";") | (attributes? "get" ";" attributes? "set" ";") | (attributes? "set" ";" attributes? "get" ";") ;
specific-catch-clauses ::= specific-catch-clause | (specific-catch-clauses specific-catch-clause) ;
conditional-and-expression ::= inclusive-or-expression | (conditional-and-expression "&&" inclusive-or-expression) ;
multiplicative-expression ::= unary-expression | (multiplicative-expression "*" unary-expression) | (multiplicative-expression "/" unary-expression) | (multiplicative-expression "%" unary-expression) ;
array-initializer ::= ("{" variable-initializer-list? "}") | ("{" variable-initializer-list "," "}") ;
for-statement ::= "for" "(" for-initializer? ";" for-condition? ";" for-iterator? ")" embedded-statement ;
constructor-modifiers ::= constructor-modifier | (constructor-modifiers constructor-modifier) ;
field-modifiers ::= field-modifier | (field-modifiers field-modifier) ;
class-modifiers ::= class-modifier | (class-modifiers class-modifier) ;
using-statement ::= "using" "(" resource-acquisition ")" embedded-statement ;
attribute-arguments ::= ("(" positional-argument-list? ")") | ("(" positional-argument-list "," named-argument-list ")") | ("(" named-argument-list ")") ;
secondary-constraints ::= interface-type | type-parameter | (secondary-constraints "," interface-type) | (secondary-constraints "," type-parameter) ;
type-parameters ::= (attributes? type-parameter) | (type-parameters "," attributes? type-parameter) ;
rank-specifier ::= "[" dim-separators? "]" ;
unary-operator-declarator ::= type "operator" overloadable-unary-operator "(" type identifier ")" ;
type-argument-list ::= "<" type-arguments ">" ;
statement-expression-list ::= statement-expression | (statement-expression-list "," statement-expression) ;
element-access ::= primary-no-array-creation-expression "[" expression-list "]" ;
typeof-expression ::= ("typeof" "(" type ")") | ("typeof" "(" unbound-type-name ")") | ("typeof" "(" "void" ")") ;
struct-interfaces ::= ":" interface-type-list ;
unchecked-statement ::= "unchecked" block ;
and-expression ::= equality-expression | (and-expression "&" equality-expression) ;
anonymous-method-parameter-list ::= anonymous-method-parameter | (anonymous-method-parameter-list "," anonymous-method-parameter) ;
compilation-unit ::= extern-alias-directives? using-directives? global-attributes? namespace-member-declarations? ;
lock-statement ::= "lock" "(" expression ")" embedded-statement ;
switch-section ::= switch-labels statement-list ;
equality-expression ::= relational-expression | (equality-expression "==" relational-expression) | (equality-expression "!=" relational-expression) ;
static-constructor-modifiers ::= ("extern"? "static") | ("static" "extern"?) ;
parenthesized-expression ::= "(" expression ")" ;
qualified-alias-member ::= identifier "::" identifier type-argument-list? ;
throw-statement ::= "throw" expression? ";" ;
finalizer-declaration ::= attributes? "extern"? "~" identifier "(" ")" finalizer-body ;
attribute-sections ::= attribute-section | (attribute-sections attribute-section) ;
conditional-expression ::= null-coalescing-expression | (null-coalescing-expression "?" expression ":" expression) ;
commas ::= "," | (commas ",") ;
type-parameter-constraints-clause ::= "where" type-parameter ":" type-parameter-constraints ;
statement-list ::= statement | (statement-list statement) ;
additive-expression ::= multiplicative-expression | (additive-expression "+" multiplicative-expression) | (additive-expression "-" multiplicative-expression) ;
type-parameter-list ::= "<" type-parameters ">" ;
parameter-array ::= attributes? "params" array-type identifier ;
delegate-modifiers ::= delegate-modifier | (delegate-modifiers delegate-modifier) ;
interface-event-declaration ::= attributes? "new"? "event" type identifier ";" ;
delegate-declaration ::= attributes? delegate-modifiers? "delegate" return-type identifier type-parameter-list? "(" formal-parameter-list? ")" type-parameter-constraints-clauses? ";" ;
attribute-list ::= attribute | (attribute-list "," attribute) ;
yield-statement ::= ("yield" "return" expression ";") | ("yield" "break" ";") ;
binary-operator-declarator ::= type "operator" overloadable-binary-operator "(" type identifier "," type identifier ")" ;
indexer-modifiers ::= indexer-modifier | (indexer-modifiers indexer-modifier) ;
array-type ::= non-array-type rank-specifiers ;
extern-alias-directives ::= extern-alias-directive | (extern-alias-directives extern-alias-directive) ;
anonymous-method-signature ::= "(" anonymous-method-parameter-list? ")" ;
constructor-declaration ::= attributes? constructor-modifiers? constructor-declarator constructor-body ;
field-declaration ::= attributes? field-modifiers? type variable-declarators ";" ;
nullable-type ::= non-nullable-value-type "?" ;
variable-declarator ::= identifier | (identifier "=" variable-initializer) ;
break-statement ::= "break" ";" ;
generic-dimension-specifier ::= "<" commas? ">" ;
post-decrement-expression ::= primary-expression "--" ;
enum-base ::= ":" integral-type ;
anonymous-method-parameter ::= parameter-modifier? type identifier ;
switch-label ::= ("case" constant-expression ":") | ("default" ":") ;
named-argument-list ::= named-argument | (named-argument-list "," named-argument) ;
namespace-member-declarations ::= namespace-member-declaration | (namespace-member-declarations namespace-member-declaration) ;
interface-indexer-declaration ::= attributes? "new"? type "this" "[" formal-parameter-list "]" "{" interface-accessors "}" ;
switch-statement ::= "switch" "(" expression ")" switch-block ;
enum-member-declaration ::= (attributes? identifier) | (attributes? identifier "=" constant-expression) ;
return-statement ::= "return" expression? ";" ;
event-accessor-declarations ::= (add-accessor-declaration remove-accessor-declaration) | (remove-accessor-declaration add-accessor-declaration) ;
get-accessor-declaration ::= attributes? accessor-modifier? "get" accessor-body ;
global-attribute-section ::= ("[" global-attribute-target-specifier attribute-list "]") | ("[" global-attribute-target-specifier attribute-list "," "]") ;
event-modifiers ::= event-modifier | (event-modifiers event-modifier) ;
namespace-declaration ::= "namespace" qualified-identifier namespace-body ";"? ;
class-base ::= (":" class-type) | (":" interface-type-list) | (":" class-type "," interface-type-list) ;
namespace-or-type-name ::= (identifier type-argument-list?) | qualified-alias-member | (namespace-or-type-name "." identifier type-argument-list?) ;
--------------------cs::csharp-msft-ls-1.0.bgf--------------------
accessor-declarations ::= (get-accessor-declaration set-accessor-declaration?) | (set-accessor-declaration get-accessor-declaration?) ;
delegate-creation-expression ::= "new" delegate-type "(" expression ")" ;
relational-expression ::= shift-expression | (relational-expression "<" shift-expression) | (relational-expression ">" shift-expression) | (relational-expression "<=" shift-expression) | (relational-expression ">=" shift-expression) | (relational-expression "is" type) | (relational-expression "as" type) ;
global-attribute-target-specifier ::= global-attribute-target ":" ;
pre-decrement-expression ::= "--" unary-expression ;
constant-declarator ::= identifier "=" constant-expression ;
finally-clause ::= "finally" block ;
method-header ::= attributes? method-modifiers? return-type member-name "(" formal-parameter-list? ")" ;
interface-member-declarations ::= interface-member-declaration | (interface-member-declarations interface-member-declaration) ;
member-access ::= (primary-expression "." identifier) | (predefined-type "." identifier) ;
unary-expression ::= primary-expression | ("+" unary-expression) | ("-" unary-expression) | ("!" unary-expression) | ("~" unary-expression) | pre-increment-expression | pre-decrement-expression | cast-expression ;
invocation-expression ::= primary-expression "(" argument-list? ")" ;
local-constant-declaration ::= "const" type constant-declarators ;
enum-body ::= ("{" enum-member-declarations? "}") | ("{" enum-member-declarations "," "}") ;
using-directives ::= using-directive | (using-directives using-directive) ;
interface-modifiers ::= interface-modifier | (interface-modifiers interface-modifier) ;
interface-declaration ::= attributes? interface-modifiers? "interface" identifier interface-base? interface-body ";"? ;
cast-expression ::= "(" type ")" unary-expression ;
interface-base ::= ":" interface-type-list ;
constructor-declarator ::= identifier "(" formal-parameter-list? ")" constructor-initializer? ;
fixed-parameters ::= fixed-parameter | (fixed-parameters "," fixed-parameter) ;
formal-parameter-list ::= fixed-parameters | (fixed-parameters "," parameter-array) | parameter-array ;
base-access ::= ("base" "." identifier) | ("base" "[" expression-list "]") ;
member-name ::= identifier | (interface-type "." identifier) ;
try-statement ::= ("try" block catch-clauses) | ("try" block finally-clause) | ("try" block catch-clauses finally-clause) ;
declaration-statement ::= (local-variable-declaration ";") | (local-constant-declaration ";") ;
variable-initializer-list ::= variable-initializer | (variable-initializer-list "," variable-initializer) ;
class-body ::= "{" class-member-declarations? "}" ;
unchecked-expression ::= "unchecked" "(" expression ")" ;
namespace-body ::= "{" using-directives? namespace-member-declarations? "}" ;
while-statement ::= "while" "(" boolean-expression ")" embedded-statement ;
exclusive-or-expression ::= and-expression | (exclusive-or-expression "^" and-expression) ;
catch-clauses ::= (specific-catch-clauses general-catch-clause?) | (specific-catch-clauses? general-catch-clause) ;
array-creation-expression ::= ("new" non-array-type "[" expression-list "]" rank-specifiers? array-initializer?) | ("new" array-type array-initializer) ;
operator-declaration ::= attributes? operator-modifiers operator-declarator operator-body ;
constant-declaration ::= attributes? constant-modifiers? "const" type constant-declarators ";" ;
named-argument ::= identifier "=" attribute-argument-expression ;
assignment ::= unary-expression assignment-operator expression ;
local-variable-declaration ::= type local-variable-declarators ;
continue-statement ::= "continue" ";" ;
checked-statement ::= "checked" block ;
using-alias-directive ::= "using" identifier "=" namespace-or-type-name ";" ;
static-constructor-declaration ::= attributes? static-constructor-modifiers identifier "(" ")" static-constructor-body ;
event-declaration ::= (attributes? event-modifiers? "event" type variable-declarators ";") | (attributes? event-modifiers? "event" type member-name "{" event-accessor-declarations "}") ;
conversion-operator-declarator ::= ("implicit" "operator" type "(" type identifier ")") | ("explicit" "operator" type "(" type identifier ")") ;
post-increment-expression ::= primary-expression "++" ;
shift-expression ::= additive-expression | (shift-expression "<<" additive-expression) | (shift-expression ">>" additive-expression) ;
enum-member-declarations ::= enum-member-declaration | (enum-member-declarations "," enum-member-declaration) ;
local-variable-declarator ::= identifier | (identifier "=" local-variable-initializer) ;
indexer-declarator ::= (type "this" "[" formal-parameter-list "]") | (type interface-type "." "this" "[" formal-parameter-list "]") ;
if-statement ::= ("if" "(" boolean-expression ")" embedded-statement) | ("if" "(" boolean-expression ")" embedded-statement "else" embedded-statement) ;
argument ::= expression | ("ref" variable-reference) | ("out" variable-reference) ;
interface-type-list ::= interface-type | (interface-type-list "," interface-type) ;
conditional-or-expression ::= conditional-and-expression | (conditional-or-expression "||" conditional-and-expression) ;
constant-declarators ::= constant-declarator | (constant-declarators "," constant-declarator) ;
switch-labels ::= switch-label | (switch-labels switch-label) ;
object-creation-expression ::= "new" type "(" argument-list? ")" ;
class-member-declarations ::= class-member-declaration | (class-member-declarations class-member-declaration) ;
interface-body ::= "{" interface-member-declarations? "}" ;
rank-specifiers ::= rank-specifier | (rank-specifiers rank-specifier) ;
labeled-statement ::= identifier ":" statement ;
positional-argument-list ::= positional-argument | (positional-argument-list "," positional-argument) ;
switch-block ::= "{" switch-sections? "}" ;
attribute-section ::= ("[" attribute-target-specifier? attribute-list "]") | ("[" attribute-target-specifier? attribute-list "," "]") ;
local-variable-declarators ::= local-variable-declarator | (local-variable-declarators "," local-variable-declarator) ;
expression-list ::= expression | (expression-list "," expression) ;
enum-modifiers ::= enum-modifier | (enum-modifiers enum-modifier) ;
enum-declaration ::= attributes? enum-modifiers? "enum" identifier enum-base? enum-body ";"? ;
argument-list ::= argument | (argument-list "," argument) ;
do-statement ::= "do" embedded-statement "while" "(" boolean-expression ")" ";" ;
indexer-declaration ::= attributes? indexer-modifiers? indexer-declarator "{" accessor-declarations "}" ;
foreach-statement ::= "foreach" "(" type identifier "in" expression ")" embedded-statement ;
global-attribute-sections ::= global-attribute-section | (global-attribute-sections global-attribute-section) ;
switch-sections ::= switch-section | (switch-sections switch-section) ;
destructor-declaration ::= attributes? "extern"? "~" identifier "(" ")" destructor-body ;
class-declaration ::= attributes? class-modifiers? "class" identifier class-base? class-body ";"? ;
interface-method-declaration ::= attributes? "new"? return-type identifier "(" formal-parameter-list? ")" ";" ;
inclusive-or-expression ::= exclusive-or-expression | (inclusive-or-expression "|" exclusive-or-expression) ;
add-accessor-declaration ::= attributes? "add" block ;
pre-increment-expression ::= "++" unary-expression ;
remove-accessor-declaration ::= attributes? "remove" block ;
attribute ::= attribute-name attribute-arguments? ;
struct-body ::= "{" struct-member-declarations? "}" ;
interface-property-declaration ::= attributes? "new"? type identifier "{" interface-accessors "}" ;
struct-member-declarations ::= struct-member-declaration | (struct-member-declarations struct-member-declaration) ;
using-namespace-directive ::= "using" namespace-name ";" ;
operator-modifiers ::= operator-modifier | (operator-modifiers operator-modifier) ;
constant-modifiers ::= constant-modifier | (constant-modifiers constant-modifier) ;
dim-separators ::= "," | (dim-separators ",") ;
attribute-target-specifier ::= attribute-target ":" ;
variable-declarators ::= variable-declarator | (variable-declarators "," variable-declarator) ;
fixed-parameter ::= attributes? parameter-modifier? type identifier ;
method-modifiers ::= method-modifier | (method-modifiers method-modifier) ;
constructor-initializer ::= (":" "base" "(" argument-list? ")") | (":" "this" "(" argument-list? ")") ;
method-declaration ::= method-header method-body ;
block ::= "{" statement-list? "}" ;
general-catch-clause ::= "catch" block ;
goto-statement ::= ("goto" identifier ";") | ("goto" "case" constant-expression ";") | ("goto" "default" ";") ;
struct-modifiers ::= struct-modifier | (struct-modifiers struct-modifier) ;
property-modifiers ::= property-modifier | (property-modifiers property-modifier) ;
struct-declaration ::= attributes? struct-modifiers? "struct" identifier struct-interfaces? struct-body ";"? ;
property-declaration ::= attributes? property-modifiers? type member-name "{" accessor-declarations "}" ;
set-accessor-declaration ::= attributes? "set" accessor-body ;
checked-expression ::= "checked" "(" expression ")" ;
specific-catch-clause ::= "catch" "(" class-type identifier? ")" block ;
expression-statement ::= statement-expression ";" ;
qualified-identifier ::= identifier | (qualified-identifier "." identifier) ;
interface-accessors ::= (attributes? "get" ";") | (attributes? "set" ";") | (attributes? "get" ";" attributes? "set" ";") | (attributes? "set" ";" attributes? "get" ";") ;
specific-catch-clauses ::= specific-catch-clause | (specific-catch-clauses specific-catch-clause) ;
conditional-and-expression ::= inclusive-or-expression | (conditional-and-expression "&&" inclusive-or-expression) ;
multiplicative-expression ::= unary-expression | (multiplicative-expression "*" unary-expression) | (multiplicative-expression "/" unary-expression) | (multiplicative-expression "%" unary-expression) ;
array-initializer ::= ("{" variable-initializer-list? "}") | ("{" variable-initializer-list "," "}") ;
for-statement ::= "for" "(" for-initializer? ";" for-condition? ";" for-iterator? ")" embedded-statement ;
constructor-modifiers ::= constructor-modifier | (constructor-modifiers constructor-modifier) ;
field-modifiers ::= field-modifier | (field-modifiers field-modifier) ;
class-modifiers ::= class-modifier | (class-modifiers class-modifier) ;
using-statement ::= "using" "(" resource-acquisition ")" embedded-statement ;
attribute-arguments ::= ("(" positional-argument-list? ")") | ("(" positional-argument-list "," named-argument-list ")") | ("(" named-argument-list ")") ;
rank-specifier ::= "[" dim-separators? "]" ;
unary-operator-declarator ::= type "operator" overloadable-unary-operator "(" type identifier ")" ;
statement-expression-list ::= statement-expression | (statement-expression-list "," statement-expression) ;
element-access ::= primary-no-array-creation-expression "[" expression-list "]" ;
typeof-expression ::= ("typeof" "(" type ")") | ("typeof" "(" "void" ")") ;
struct-interfaces ::= ":" interface-type-list ;
unchecked-statement ::= "unchecked" block ;
and-expression ::= equality-expression | (and-expression "&" equality-expression) ;
compilation-unit ::= using-directives? global-attributes? namespace-member-declarations? ;
lock-statement ::= "lock" "(" expression ")" embedded-statement ;
switch-section ::= switch-labels statement-list ;
equality-expression ::= relational-expression | (equality-expression "==" relational-expression) | (equality-expression "!=" relational-expression) ;
static-constructor-modifiers ::= ("extern"? "static") | ("static" "extern"?) ;
parenthesized-expression ::= "(" expression ")" ;
throw-statement ::= "throw" expression? ";" ;
attribute-sections ::= attribute-section | (attribute-sections attribute-section) ;
conditional-expression ::= conditional-or-expression | (conditional-or-expression "?" expression ":" expression) ;
statement-list ::= statement | (statement-list statement) ;
additive-expression ::= multiplicative-expression | (additive-expression "+" multiplicative-expression) | (additive-expression "-" multiplicative-expression) ;
parameter-array ::= attributes? "params" array-type identifier ;
delegate-modifiers ::= delegate-modifier | (delegate-modifiers delegate-modifier) ;
interface-event-declaration ::= attributes? "new"? "event" type identifier ";" ;
delegate-declaration ::= (attributes? delegate-modifiers? "delegate" return-type identifier) | ("(" formal-parameter-list? ")" ";") ;
attribute-list ::= attribute | (attribute-list "," attribute) ;
binary-operator-declarator ::= type "operator" overloadable-binary-operator "(" type identifier "," type identifier ")" ;
array-type ::= non-array-type rank-specifiers ;
indexer-modifiers ::= indexer-modifier | (indexer-modifiers indexer-modifier) ;
constructor-declaration ::= attributes? constructor-modifiers? constructor-declarator constructor-body ;
field-declaration ::= attributes? field-modifiers? type variable-declarators ";" ;
variable-declarator ::= identifier | (identifier "=" variable-initializer) ;
break-statement ::= "break" ";" ;
post-decrement-expression ::= primary-expression "--" ;
enum-base ::= ":" integral-type ;
switch-label ::= ("case" constant-expression ":") | ("default" ":") ;
named-argument-list ::= named-argument | (named-argument-list "," named-argument) ;
namespace-member-declarations ::= namespace-member-declaration | (namespace-member-declarations namespace-member-declaration) ;
interface-indexer-declaration ::= attributes? "new"? type "this" "[" formal-parameter-list "]" "{" interface-accessors "}" ;
switch-statement ::= "switch" "(" expression ")" switch-block ;
enum-member-declaration ::= (attributes? identifier) | (attributes? identifier "=" constant-expression) ;
return-statement ::= "return" expression? ";" ;
event-accessor-declarations ::= (add-accessor-declaration remove-accessor-declaration) | (remove-accessor-declaration add-accessor-declaration) ;
get-accessor-declaration ::= attributes? "get" accessor-body ;
global-attribute-section ::= ("[" global-attribute-target-specifier attribute-list "]") | ("[" global-attribute-target-specifier attribute-list "," "]") ;
event-modifiers ::= event-modifier | (event-modifiers event-modifier) ;
namespace-declaration ::= "namespace" qualified-identifier namespace-body ";"? ;
class-base ::= (":" class-type) | (":" interface-type-list) | (":" class-type "," interface-type-list) ;
namespace-or-type-name ::= identifier | (namespace-or-type-name "." identifier) ;
--------------------cs::csharp-msft-ls-1.2.bgf--------------------
accessor-declarations ::= (get-accessor-declaration set-accessor-declaration?) | (set-accessor-declaration get-accessor-declaration?) ;
delegate-creation-expression ::= "new" delegate-type "(" expression ")" ;
relational-expression ::= shift-expression | (relational-expression "<" shift-expression) | (relational-expression ">" shift-expression) | (relational-expression "<=" shift-expression) | (relational-expression ">=" shift-expression) | (relational-expression "is" type) | (relational-expression "as" type) ;
global-attribute-target-specifier ::= global-attribute-target ":" ;
pre-decrement-expression ::= "--" unary-expression ;
constant-declarator ::= identifier "=" constant-expression ;
finally-clause ::= "finally" block ;
method-header ::= attributes? method-modifiers? return-type member-name "(" formal-parameter-list? ")" ;
interface-member-declarations ::= interface-member-declaration | (interface-member-declarations interface-member-declaration) ;
member-access ::= (primary-expression "." identifier) | (predefined-type "." identifier) ;
unary-expression ::= primary-expression | ("+" unary-expression) | ("-" unary-expression) | ("!" unary-expression) | ("~" unary-expression) | pre-increment-expression | pre-decrement-expression | cast-expression ;
invocation-expression ::= primary-expression "(" argument-list? ")" ;
local-constant-declaration ::= "const" type constant-declarators ;
enum-body ::= ("{" enum-member-declarations? "}") | ("{" enum-member-declarations "," "}") ;
using-directives ::= using-directive | (using-directives using-directive) ;
interface-modifiers ::= interface-modifier | (interface-modifiers interface-modifier) ;
interface-declaration ::= attributes? interface-modifiers? "interface" identifier interface-base? interface-body ";"? ;
cast-expression ::= "(" type ")" unary-expression ;
interface-base ::= ":" interface-type-list ;
constructor-declarator ::= identifier "(" formal-parameter-list? ")" constructor-initializer? ;
fixed-parameters ::= fixed-parameter | (fixed-parameters "," fixed-parameter) ;
formal-parameter-list ::= fixed-parameters | (fixed-parameters "," parameter-array) | parameter-array ;
base-access ::= ("base" "." identifier) | ("base" "[" expression-list "]") ;
member-name ::= identifier | (interface-type "." identifier) ;
try-statement ::= ("try" block catch-clauses) | ("try" block finally-clause) | ("try" block catch-clauses finally-clause) ;
declaration-statement ::= (local-variable-declaration ";") | (local-constant-declaration ";") ;
variable-initializer-list ::= variable-initializer | (variable-initializer-list "," variable-initializer) ;
class-body ::= "{" class-member-declarations? "}" ;
unchecked-expression ::= "unchecked" "(" expression ")" ;
namespace-body ::= "{" using-directives? namespace-member-declarations? "}" ;
while-statement ::= "while" "(" boolean-expression ")" embedded-statement ;
exclusive-or-expression ::= and-expression | (exclusive-or-expression "^" and-expression) ;
catch-clauses ::= (specific-catch-clauses general-catch-clause?) | (specific-catch-clauses? general-catch-clause) ;
array-creation-expression ::= ("new" non-array-type "[" expression-list "]" rank-specifiers? array-initializer?) | ("new" array-type array-initializer) ;
operator-declaration ::= attributes? operator-modifiers operator-declarator operator-body ;
constant-declaration ::= attributes? constant-modifiers? "const" type constant-declarators ";" ;
named-argument ::= identifier "=" attribute-argument-expression ;
assignment ::= unary-expression assignment-operator expression ;
local-variable-declaration ::= type local-variable-declarators ;
continue-statement ::= "continue" ";" ;
checked-statement ::= "checked" block ;
using-alias-directive ::= "using" identifier "=" namespace-or-type-name ";" ;
static-constructor-declaration ::= attributes? static-constructor-modifiers identifier "(" ")" static-constructor-body ;
event-declaration ::= (attributes? event-modifiers? "event" type variable-declarators ";") | (attributes? event-modifiers? "event" type member-name "{" event-accessor-declarations "}") ;
conversion-operator-declarator ::= ("implicit" "operator" type "(" type identifier ")") | ("explicit" "operator" type "(" type identifier ")") ;
post-increment-expression ::= primary-expression "++" ;
shift-expression ::= additive-expression | (shift-expression "<<" additive-expression) | (shift-expression ">>" additive-expression) ;
enum-member-declarations ::= enum-member-declaration | (enum-member-declarations "," enum-member-declaration) ;
local-variable-declarator ::= identifier | (identifier "=" local-variable-initializer) ;
indexer-declarator ::= (type "this" "[" formal-parameter-list "]") | (type interface-type "." "this" "[" formal-parameter-list "]") ;
if-statement ::= ("if" "(" boolean-expression ")" embedded-statement) | ("if" "(" boolean-expression ")" embedded-statement "else" embedded-statement) ;
argument ::= expression | ("ref" variable-reference) | ("out" variable-reference) ;
interface-type-list ::= interface-type | (interface-type-list "," interface-type) ;
conditional-or-expression ::= conditional-and-expression | (conditional-or-expression "||" conditional-and-expression) ;
constant-declarators ::= constant-declarator | (constant-declarators "," constant-declarator) ;
switch-labels ::= switch-label | (switch-labels switch-label) ;
object-creation-expression ::= "new" type "(" argument-list? ")" ;
class-member-declarations ::= class-member-declaration | (class-member-declarations class-member-declaration) ;
interface-body ::= "{" interface-member-declarations? "}" ;
rank-specifiers ::= rank-specifier | (rank-specifiers rank-specifier) ;
labeled-statement ::= identifier ":" statement ;
positional-argument-list ::= positional-argument | (positional-argument-list "," positional-argument) ;
switch-block ::= "{" switch-sections? "}" ;
attribute-section ::= ("[" attribute-target-specifier? attribute-list "]") | ("[" attribute-target-specifier? attribute-list "," "]") ;
local-variable-declarators ::= local-variable-declarator | (local-variable-declarators "," local-variable-declarator) ;
expression-list ::= expression | (expression-list "," expression) ;
enum-modifiers ::= enum-modifier | (enum-modifiers enum-modifier) ;
enum-declaration ::= attributes? enum-modifiers? "enum" identifier enum-base? enum-body ";"? ;
argument-list ::= argument | (argument-list "," argument) ;
do-statement ::= "do" embedded-statement "while" "(" boolean-expression ")" ";" ;
indexer-declaration ::= attributes? indexer-modifiers? indexer-declarator "{" accessor-declarations "}" ;
foreach-statement ::= "foreach" "(" type identifier "in" expression ")" embedded-statement ;
global-attribute-sections ::= global-attribute-section | (global-attribute-sections global-attribute-section) ;
switch-sections ::= switch-section | (switch-sections switch-section) ;
destructor-declaration ::= attributes? "extern"? "~" identifier "(" ")" destructor-body ;
class-declaration ::= attributes? class-modifiers? "class" identifier class-base? class-body ";"? ;
interface-method-declaration ::= attributes? "new"? return-type identifier "(" formal-parameter-list? ")" ";" ;
inclusive-or-expression ::= exclusive-or-expression | (inclusive-or-expression "|" exclusive-or-expression) ;
add-accessor-declaration ::= attributes? "add" block ;
pre-increment-expression ::= "++" unary-expression ;
remove-accessor-declaration ::= attributes? "remove" block ;
attribute ::= attribute-name attribute-arguments? ;
struct-body ::= "{" struct-member-declarations? "}" ;
interface-property-declaration ::= attributes? "new"? type identifier "{" interface-accessors "}" ;
struct-member-declarations ::= struct-member-declaration | (struct-member-declarations struct-member-declaration) ;
using-namespace-directive ::= "using" namespace-name ";" ;
operator-modifiers ::= operator-modifier | (operator-modifiers operator-modifier) ;
constant-modifiers ::= constant-modifier | (constant-modifiers constant-modifier) ;
dim-separators ::= "," | (dim-separators ",") ;
attribute-target-specifier ::= attribute-target ":" ;
variable-declarators ::= variable-declarator | (variable-declarators "," variable-declarator) ;
fixed-parameter ::= attributes? parameter-modifier? type identifier ;
method-modifiers ::= method-modifier | (method-modifiers method-modifier) ;
constructor-initializer ::= (":" "base" "(" argument-list? ")") | (":" "this" "(" argument-list? ")") ;
method-declaration ::= method-header method-body ;
block ::= "{" statement-list? "}" ;
general-catch-clause ::= "catch" block ;
goto-statement ::= ("goto" identifier ";") | ("goto" "case" constant-expression ";") | ("goto" "default" ";") ;
struct-modifiers ::= struct-modifier | (struct-modifiers struct-modifier) ;
property-modifiers ::= property-modifier | (property-modifiers property-modifier) ;
struct-declaration ::= attributes? struct-modifiers? "struct" identifier struct-interfaces? struct-body ";"? ;
property-declaration ::= attributes? property-modifiers? type member-name "{" accessor-declarations "}" ;
set-accessor-declaration ::= attributes? "set" accessor-body ;
checked-expression ::= "checked" "(" expression ")" ;
specific-catch-clause ::= "catch" "(" class-type identifier? ")" block ;
expression-statement ::= statement-expression ";" ;
qualified-identifier ::= identifier | (qualified-identifier "." identifier) ;
interface-accessors ::= (attributes? "get" ";") | (attributes? "set" ";") | (attributes? "get" ";" attributes? "set" ";") | (attributes? "set" ";" attributes? "get" ";") ;
specific-catch-clauses ::= specific-catch-clause | (specific-catch-clauses specific-catch-clause) ;
conditional-and-expression ::= inclusive-or-expression | (conditional-and-expression "&&" inclusive-or-expression) ;
multiplicative-expression ::= unary-expression | (multiplicative-expression "*" unary-expression) | (multiplicative-expression "/" unary-expression) | (multiplicative-expression "%" unary-expression) ;
array-initializer ::= ("{" variable-initializer-list? "}") | ("{" variable-initializer-list "," "}") ;
for-statement ::= "for" "(" for-initializer? ";" for-condition? ";" for-iterator? ")" embedded-statement ;
constructor-modifiers ::= constructor-modifier | (constructor-modifiers constructor-modifier) ;
field-modifiers ::= field-modifier | (field-modifiers field-modifier) ;
class-modifiers ::= class-modifier | (class-modifiers class-modifier) ;
using-statement ::= "using" "(" resource-acquisition ")" embedded-statement ;
attribute-arguments ::= ("(" positional-argument-list? ")") | ("(" positional-argument-list "," named-argument-list ")") | ("(" named-argument-list ")") ;
rank-specifier ::= "[" dim-separators? "]" ;
unary-operator-declarator ::= type "operator" overloadable-unary-operator "(" type identifier ")" ;
statement-expression-list ::= statement-expression | (statement-expression-list "," statement-expression) ;
element-access ::= primary-no-array-creation-expression "[" expression-list "]" ;
typeof-expression ::= ("typeof" "(" type ")") | ("typeof" "(" "void" ")") ;
struct-interfaces ::= ":" interface-type-list ;
unchecked-statement ::= "unchecked" block ;
and-expression ::= equality-expression | (and-expression "&" equality-expression) ;
compilation-unit ::= using-directives? global-attributes? namespace-member-declarations? ;
lock-statement ::= "lock" "(" expression ")" embedded-statement ;
switch-section ::= switch-labels statement-list ;
equality-expression ::= relational-expression | (equality-expression "==" relational-expression) | (equality-expression "!=" relational-expression) ;
static-constructor-modifiers ::= ("extern"? "static") | ("static" "extern"?) ;
parenthesized-expression ::= "(" expression ")" ;
throw-statement ::= "throw" expression? ";" ;
attribute-sections ::= attribute-section | (attribute-sections attribute-section) ;
conditional-expression ::= conditional-or-expression | (conditional-or-expression "?" expression ":" expression) ;
statement-list ::= statement | (statement-list statement) ;
additive-expression ::= multiplicative-expression | (additive-expression "+" multiplicative-expression) | (additive-expression "-" multiplicative-expression) ;
parameter-array ::= attributes? "params" array-type identifier ;
delegate-modifiers ::= delegate-modifier | (delegate-modifiers delegate-modifier) ;
interface-event-declaration ::= attributes? "new"? "event" type identifier ";" ;
delegate-declaration ::= (attributes? delegate-modifiers? "delegate" return-type identifier) | ("(" formal-parameter-list? ")" ";") ;
attribute-list ::= attribute | (attribute-list "," attribute) ;
binary-operator-declarator ::= type "operator" overloadable-binary-operator "(" type identifier "," type identifier ")" ;
array-type ::= non-array-type rank-specifiers ;
indexer-modifiers ::= indexer-modifier | (indexer-modifiers indexer-modifier) ;
constructor-declaration ::= attributes? constructor-modifiers? constructor-declarator constructor-body ;
field-declaration ::= attributes? field-modifiers? type variable-declarators ";" ;
variable-declarator ::= identifier | (identifier "=" variable-initializer) ;
break-statement ::= "break" ";" ;
post-decrement-expression ::= primary-expression "--" ;
enum-base ::= ":" integral-type ;
switch-label ::= ("case" constant-expression ":") | ("default" ":") ;
named-argument-list ::= named-argument | (named-argument-list "," named-argument) ;
namespace-member-declarations ::= namespace-member-declaration | (namespace-member-declarations namespace-member-declaration) ;
interface-indexer-declaration ::= attributes? "new"? type "this" "[" formal-parameter-list "]" "{" interface-accessors "}" ;
switch-statement ::= "switch" "(" expression ")" switch-block ;
enum-member-declaration ::= (attributes? identifier) | (attributes? identifier "=" constant-expression) ;
return-statement ::= "return" expression? ";" ;
event-accessor-declarations ::= (add-accessor-declaration remove-accessor-declaration) | (remove-accessor-declaration add-accessor-declaration) ;
get-accessor-declaration ::= attributes? "get" accessor-body ;
global-attribute-section ::= ("[" global-attribute-target-specifier attribute-list "]") | ("[" global-attribute-target-specifier attribute-list "," "]") ;
event-modifiers ::= event-modifier | (event-modifiers event-modifier) ;
namespace-declaration ::= "namespace" qualified-identifier namespace-body ";"? ;
class-base ::= (":" class-type) | (":" interface-type-list) | (":" class-type "," interface-type-list) ;
namespace-or-type-name ::= identifier | (namespace-or-type-name "." identifier) ;
--------------------cs::csharp-msft-ls-3.0.bgf--------------------
accessor-declarations ::= (get-accessor-declaration set-accessor-declaration?) | (set-accessor-declaration get-accessor-declaration?) ;
delegate-creation-expression ::= "new" delegate-type "(" expression ")" ;
relational-expression ::= shift-expression | (relational-expression "<" shift-expression) | (relational-expression ">" shift-expression) | (relational-expression "<=" shift-expression) | (relational-expression ">=" shift-expression) | (relational-expression "is" type) | (relational-expression "as" type) ;
global-attribute-target-specifier ::= global-attribute-target ":" ;
pre-decrement-expression ::= "--" unary-expression ;
constant-declarator ::= identifier "=" constant-expression ;
method-header ::= (attributes? method-modifiers? "partial"? return-type member-name type-parameter-list?) | ("(" formal-parameter-list? ")" type-parameter-constraints-clauses?) ;
finally-clause ::= "finally" block ;
interface-member-declarations ::= interface-member-declaration | (interface-member-declarations interface-member-declaration) ;
member-access ::= (primary-expression "." identifier type-argument-list?) | (predefined-type "." identifier type-argument-list?) | (qualified-alias-member "." identifier) ;
unary-expression ::= primary-expression | ("+" unary-expression) | ("-" unary-expression) | ("!" unary-expression) | ("~" unary-expression) | pre-increment-expression | pre-decrement-expression | cast-expression ;
unbound-type-name ::= (identifier generic-dimension-specifier?) | (identifier "::" identifier generic-dimension-specifier?) | (unbound-type-name "." identifier generic-dimension-specifier?) ;
invocation-expression ::= primary-expression "(" argument-list? ")" ;
local-constant-declaration ::= "const" type constant-declarators ;
from-clause ::= "from" type? identifier "in" expression ;
enum-body ::= ("{" enum-member-declarations? "}") | ("{" enum-member-declarations "," "}") ;
using-directives ::= using-directive | (using-directives using-directive) ;
interface-modifiers ::= interface-modifier | (interface-modifiers interface-modifier) ;
interface-declaration ::= (attributes? interface-modifiers? "partial"? "interface" identifier type-parameter-list?) | (interface-base? type-parameter-constraints-clauses? interface-body ";"?) ;
cast-expression ::= "(" type ")" unary-expression ;
interface-base ::= ":" interface-type-list ;
extern-alias-directive ::= "extern" "alias" identifier ";" ;
constructor-declarator ::= identifier "(" formal-parameter-list? ")" constructor-initializer? ;
fixed-parameters ::= fixed-parameter | (fixed-parameters "," fixed-parameter) ;
formal-parameter-list ::= fixed-parameters | (fixed-parameters "," parameter-array) | parameter-array ;
base-access ::= ("base" "." identifier) | ("base" "[" expression-list "]") ;
member-name ::= identifier | (interface-type "." identifier) ;
try-statement ::= ("try" block catch-clauses) | ("try" block finally-clause) | ("try" block catch-clauses finally-clause) ;
declaration-statement ::= (local-variable-declaration ";") | (local-constant-declaration ";") ;
variable-initializer-list ::= variable-initializer | (variable-initializer-list "," variable-initializer) ;
class-body ::= "{" class-member-declarations? "}" ;
unchecked-expression ::= "unchecked" "(" expression ")" ;
type-parameter-constraints-clauses ::= type-parameter-constraints-clause | (type-parameter-constraints-clauses type-parameter-constraints-clause) ;
namespace-body ::= "{" extern-alias-directives? using-directives? namespace-member-declarations? "}" ;
ordering ::= expression ordering-direction? ;
while-statement ::= "while" "(" boolean-expression ")" embedded-statement ;
exclusive-or-expression ::= and-expression | (exclusive-or-expression "^" and-expression) ;
array-creation-expression ::= ("new" non-array-type "[" expression-list "]" rank-specifiers? array-initializer?) | ("new" array-type array-initializer) | ("new" rank-specifier array-initializer) ;
catch-clauses ::= (specific-catch-clauses general-catch-clause?) | (specific-catch-clauses? general-catch-clause) ;
operator-declaration ::= attributes? operator-modifiers operator-declarator operator-body ;
constant-declaration ::= attributes? constant-modifiers? "const" type constant-declarators ";" ;
named-argument ::= identifier "=" attribute-argument-expression ;
assignment ::= unary-expression assignment-operator expression ;
local-variable-declaration ::= local-variable-type local-variable-declarators ;
continue-statement ::= "continue" ";" ;
checked-statement ::= "checked" block ;
using-alias-directive ::= "using" identifier "=" namespace-or-type-name ";" ;
static-constructor-declaration ::= attributes? static-constructor-modifiers identifier "(" ")" static-constructor-body ;
event-declaration ::= (attributes? event-modifiers? "event" type variable-declarators ";") | (attributes? event-modifiers? "event" type member-name "{" event-accessor-declarations "}") ;
simple-name ::= identifier type-argument-list? ;
conversion-operator-declarator ::= ("implicit" "operator" type "(" type identifier ")") | ("explicit" "operator" type "(" type identifier ")") ;
shift-expression ::= additive-expression | (shift-expression "<<" additive-expression) | (shift-expression right-shift additive-expression) ;
post-increment-expression ::= primary-expression "++" ;
enum-member-declarations ::= enum-member-declaration | (enum-member-declarations "," enum-member-declaration) ;
local-variable-declarator ::= identifier | (identifier "=" local-variable-initializer) ;
indexer-declarator ::= (type "this" "[" formal-parameter-list "]") | (type interface-type "." "this" "[" formal-parameter-list "]") ;
type-parameter-constraints ::= primary-constraint | secondary-constraints | constructor-constraint | (primary-constraint "," secondary-constraints) | (primary-constraint "," constructor-constraint) | (secondary-constraints "," constructor-constraint) | (primary-constraint "," secondary-constraints "," constructor-constraint) ;
if-statement ::= ("if" "(" boolean-expression ")" embedded-statement) | ("if" "(" boolean-expression ")" embedded-statement "else" embedded-statement) ;
interface-type-list ::= interface-type | (interface-type-list "," interface-type) ;
query-expression ::= from-clause query-body ;
argument ::= expression | ("ref" variable-reference) | ("out" variable-reference) ;
conditional-or-expression ::= conditional-and-expression | (conditional-or-expression "||" conditional-and-expression) ;
constant-declarators ::= constant-declarator | (constant-declarators "," constant-declarator) ;
switch-labels ::= switch-label | (switch-labels switch-label) ;
object-creation-expression ::= ("new" type "(" argument-list? ")" object-or-collection-initializer?) | ("new" type object-or-collection-initializer) ;
class-member-declarations ::= class-member-declaration | (class-member-declarations class-member-declaration) ;
interface-body ::= "{" interface-member-declarations? "}" ;
rank-specifiers ::= rank-specifier | (rank-specifiers rank-specifier) ;
labeled-statement ::= identifier ":" statement ;
positional-argument-list ::= positional-argument | (positional-argument-list "," positional-argument) ;
attribute-section ::= ("[" attribute-target-specifier? attribute-list "]") | ("[" attribute-target-specifier? attribute-list "," "]") ;
switch-block ::= "{" switch-sections? "}" ;
anonymous-object-initializer ::= ("{" member-declarator-list? "}") | ("{" member-declarator-list "," "}") ;
local-variable-declarators ::= local-variable-declarator | (local-variable-declarators "," local-variable-declarator) ;
expression-list ::= expression | (expression-list "," expression) ;
enum-modifiers ::= enum-modifier | (enum-modifiers enum-modifier) ;
enum-declaration ::= attributes? enum-modifiers? "enum" identifier enum-base? enum-body ";"? ;
argument-list ::= argument | (argument-list "," argument) ;
do-statement ::= "do" embedded-statement "while" "(" boolean-expression ")" ";" ;
indexer-declaration ::= attributes? indexer-modifiers? indexer-declarator "{" accessor-declarations "}" ;
foreach-statement ::= "foreach" "(" local-variable-type identifier "in" expression ")" embedded-statement ;
global-attribute-sections ::= global-attribute-section | (global-attribute-sections global-attribute-section) ;
switch-sections ::= switch-section | (switch-sections switch-section) ;
destructor-declaration ::= attributes? "extern"? "~" identifier "(" ")" destructor-body ;
class-declaration ::= (attributes? class-modifiers? "partial"? "class" identifier type-parameter-list?) | (class-base? type-parameter-constraints-clauses? class-body ";"?) ;
anonymous-method-expression ::= "delegate" explicit-anonymous-function-signature? block ;
interface-method-declaration ::= (attributes? "new"? return-type identifier type-parameter-list) | ("(" formal-parameter-list? ")" type-parameter-constraints-clauses? ";") ;
inclusive-or-expression ::= exclusive-or-expression | (inclusive-or-expression "|" exclusive-or-expression) ;
add-accessor-declaration ::= attributes? "add" block ;
pre-increment-expression ::= "++" unary-expression ;
query-body-clauses ::= query-body-clause | (query-body-clauses query-body-clause) ;
remove-accessor-declaration ::= attributes? "remove" block ;
accessor-modifier ::= "protected" | "internal" | "private" | ("protected" "internal") | ("internal" "protected") ;
attribute ::= attribute-name attribute-arguments? ;
null-coalescing-expression ::= conditional-or-expression | (conditional-or-expression "??" null-coalescing-expression) ;
struct-body ::= "{" struct-member-declarations? "}" ;
interface-property-declaration ::= attributes? "new"? type identifier "{" interface-accessors "}" ;
struct-member-declarations ::= struct-member-declaration | (struct-member-declarations struct-member-declaration) ;
using-namespace-directive ::= "using" namespace-name ";" ;
operator-modifiers ::= operator-modifier | (operator-modifiers operator-modifier) ;
constant-modifiers ::= constant-modifier | (constant-modifiers constant-modifier) ;
attribute-target-specifier ::= attribute-target ":" ;
dim-separators ::= "," | (dim-separators ",") ;
variable-declarators ::= variable-declarator | (variable-declarators "," variable-declarator) ;
element-initializer ::= non-assignment-expression | ("{" expression-list "}") ;
fixed-parameter ::= attributes? parameter-modifier? type identifier ;
method-modifiers ::= method-modifier | (method-modifiers method-modifier) ;
constructor-constraint ::= "new" "(" ")" ;
constructor-initializer ::= (":" "base" "(" argument-list? ")") | (":" "this" "(" argument-list? ")") ;
implicit-anonymous-function-parameter-list ::= implicit-anonymous-function-parameter | (implicit-anonymous-function-parameter-list "," implicit-anonymous-function-parameter) ;
method-declaration ::= method-header method-body ;
block ::= "{" statement-list? "}" ;
query-body ::= query-body-clauses? select-or-group-clause query-continuation? ;
member-declarator-list ::= member-declarator | (member-declarator-list "," member-declarator) ;
general-catch-clause ::= "catch" block ;
goto-statement ::= ("goto" identifier ";") | ("goto" "case" constant-expression ";") | ("goto" "default" ";") ;
struct-modifiers ::= struct-modifier | (struct-modifiers struct-modifier) ;
property-modifiers ::= property-modifier | (property-modifiers property-modifier) ;
type-arguments ::= type-argument | (type-arguments "," type-argument) ;
struct-declaration ::= (attributes? struct-modifiers? "partial"? "struct" identifier type-parameter-list?) | (struct-interfaces? type-parameter-constraints-clauses? struct-body ";"?) ;
property-declaration ::= attributes? property-modifiers? type member-name "{" accessor-declarations "}" ;
default-value-expression ::= "default" "(" type ")" ;
set-accessor-declaration ::= attributes? accessor-modifier? "set" accessor-body ;
checked-expression ::= "checked" "(" expression ")" ;
group-clause ::= "group" expression "by" expression ;
specific-catch-clause ::= "catch" "(" class-type identifier? ")" block ;
member-initializer-list ::= member-initializer | (member-initializer-list "," member-initializer) ;
qualified-identifier ::= identifier | (qualified-identifier "." identifier) ;
expression-statement ::= statement-expression ";" ;
interface-accessors ::= (attributes? "get" ";") | (attributes? "set" ";") | (attributes? "get" ";" attributes? "set" ";") | (attributes? "set" ";" attributes? "get" ";") ;
specific-catch-clauses ::= specific-catch-clause | (specific-catch-clauses specific-catch-clause) ;
conditional-and-expression ::= inclusive-or-expression | (conditional-and-expression "&&" inclusive-or-expression) ;
join-clause ::= "join" type? identifier "in" expression "on" expression "equals" expression ;
multiplicative-expression ::= unary-expression | (multiplicative-expression "*" unary-expression) | (multiplicative-expression "/" unary-expression) | (multiplicative-expression "%" unary-expression) ;
array-initializer ::= ("{" variable-initializer-list? "}") | ("{" variable-initializer-list "," "}") ;
for-statement ::= "for" "(" for-initializer? ";" for-condition? ";" for-iterator? ")" embedded-statement ;
constructor-modifiers ::= constructor-modifier | (constructor-modifiers constructor-modifier) ;
field-modifiers ::= field-modifier | (field-modifiers field-modifier) ;
class-modifiers ::= class-modifier | (class-modifiers class-modifier) ;
using-statement ::= "using" "(" resource-acquisition ")" embedded-statement ;
attribute-arguments ::= ("(" positional-argument-list? ")") | ("(" positional-argument-list "," named-argument-list ")") | ("(" named-argument-list ")") ;
let-clause ::= "let" identifier "=" expression ;
select-clause ::= "select" expression ;
lambda-expression ::= anonymous-function-signature "=>" anonymous-function-body ;
secondary-constraints ::= interface-type | type-parameter | (secondary-constraints "," interface-type) | (secondary-constraints "," type-parameter) ;
type-parameters ::= (attributes? type-parameter) | (type-parameters "," attributes? type-parameter) ;
rank-specifier ::= "[" dim-separators? "]" ;
unary-operator-declarator ::= type "operator" overloadable-unary-operator "(" type identifier ")" ;
explicit-anonymous-function-signature ::= "(" explicit-anonymous-function-parameter-list? ")" ;
type-argument-list ::= "<" type-arguments ">" ;
element-initializer-list ::= element-initializer | (element-initializer-list "," element-initializer) ;
join-into-clause ::= "join" type? identifier "in" expression "on" expression "equals" expression "into" identifier ;
statement-expression-list ::= statement-expression | (statement-expression-list "," statement-expression) ;
element-access ::= primary-no-array-creation-expression "[" expression-list "]" ;
object-initializer ::= ("{" member-initializer-list? "}") | ("{" member-initializer-list "," "}") ;
typeof-expression ::= ("typeof" "(" type ")") | ("typeof" "(" unbound-type-name ")") | ("typeof" "(" "void" ")") ;
struct-interfaces ::= ":" interface-type-list ;
unchecked-statement ::= "unchecked" block ;
and-expression ::= equality-expression | (and-expression "&" equality-expression) ;
compilation-unit ::= (extern-alias-directives? using-directives? global-attributes?) | (namespace-member-declarations?) ;
lock-statement ::= "lock" "(" expression ")" embedded-statement ;
explicit-anonymous-function-parameter ::= anonymous-function-parameter-modifier? type identifier ;
switch-section ::= switch-labels statement-list ;
implicit-anonymous-function-signature ::= ("(" implicit-anonymous-function-parameter-list? ")") | implicit-anonymous-function-parameter ;
equality-expression ::= relational-expression | (equality-expression "==" relational-expression) | (equality-expression "!=" relational-expression) ;
static-constructor-modifiers ::= ("extern"? "static") | ("static" "extern"?) ;
parenthesized-expression ::= "(" expression ")" ;
throw-statement ::= "throw" expression? ";" ;
qualified-alias-member ::= identifier "::" identifier type-argument-list? ;
member-declarator ::= simple-name | member-access | (identifier "=" expression) ;
attribute-sections ::= attribute-section | (attribute-sections attribute-section) ;
conditional-expression ::= null-coalescing-expression | (null-coalescing-expression "?" expression ":" expression) ;
commas ::= "," | (commas ",") ;
type-parameter-constraints-clause ::= "where" type-parameter ":" type-parameter-constraints ;
statement-list ::= statement | (statement-list statement) ;
additive-expression ::= multiplicative-expression | (additive-expression "+" multiplicative-expression) | (additive-expression "-" multiplicative-expression) ;
parameter-array ::= attributes? "params" array-type identifier ;
type-parameter-list ::= "<" type-parameters ">" ;
delegate-modifiers ::= delegate-modifier | (delegate-modifiers delegate-modifier) ;
interface-event-declaration ::= attributes? "new"? "event" type identifier ";" ;
collection-initializer ::= ("{" element-initializer-list "}") | ("{" element-initializer-list "," "}") ;
delegate-declaration ::= (attributes? delegate-modifiers? "delegate" return-type identifier type-parameter-list?) | ("(" formal-parameter-list? ")" type-parameter-constraints-clauses? ";") ;
yield-statement ::= ("yield" "return" expression ";") | ("yield" "break" ";") ;
member-initializer ::= identifier "=" initializer-value ;
attribute-list ::= attribute | (attribute-list "," attribute) ;
binary-operator-declarator ::= type "operator" overloadable-binary-operator "(" type identifier "," type identifier ")" ;
indexer-modifiers ::= indexer-modifier | (indexer-modifiers indexer-modifier) ;
extern-alias-directives ::= extern-alias-directive | (extern-alias-directives extern-alias-directive) ;
array-type ::= non-array-type rank-specifiers ;
constructor-declaration ::= attributes? constructor-modifiers? constructor-declarator constructor-body ;
field-declaration ::= attributes? field-modifiers? type variable-declarators ";" ;
nullable-type ::= non-nullable-value-type "?" ;
variable-declarator ::= identifier | (identifier "=" variable-initializer) ;
generic-dimension-specifier ::= "<" commas? ">" ;
break-statement ::= "break" ";" ;
orderings ::= ordering | (orderings "," ordering) ;
post-decrement-expression ::= primary-expression "--" ;
explicit-anonymous-function-parameter-list ::= explicit-anonymous-function-parameter | (explicit-anonymous-function-parameter-list "," explicit-anonymous-function-parameter) ;
enum-base ::= ":" integral-type ;
query-continuation ::= "into" identifier query-body ;
switch-label ::= ("case" constant-expression ":") | ("default" ":") ;
namespace-member-declarations ::= namespace-member-declaration | (namespace-member-declarations namespace-member-declaration) ;
named-argument-list ::= named-argument | (named-argument-list "," named-argument) ;
interface-indexer-declaration ::= attributes? "new"? type "this" "[" formal-parameter-list "]" "{" interface-accessors "}" ;
anonymous-object-creation-expression ::= "new" anonymous-object-initializer ;
orderby-clause ::= "orderby" orderings ;
switch-statement ::= "switch" "(" expression ")" switch-block ;
where-clause ::= "where" boolean-expression ;
enum-member-declaration ::= (attributes? identifier) | (attributes? identifier "=" constant-expression) ;
return-statement ::= "return" expression? ";" ;
event-accessor-declarations ::= (add-accessor-declaration remove-accessor-declaration) | (remove-accessor-declaration add-accessor-declaration) ;
get-accessor-declaration ::= attributes? accessor-modifier? "get" accessor-body ;
global-attribute-section ::= ("[" global-attribute-target-specifier attribute-list "]") | ("[" global-attribute-target-specifier attribute-list "," "]") ;
event-modifiers ::= event-modifier | (event-modifiers event-modifier) ;
namespace-declaration ::= "namespace" qualified-identifier namespace-body ";"? ;
class-base ::= (":" class-type) | (":" interface-type-list) | (":" class-type "," interface-type-list) ;
namespace-or-type-name ::= (identifier type-argument-list?) | (namespace-or-type-name "." identifier type-argument-list?) | qualified-alias-member ;
--------------------cs::csharp-msft-ls-4.0.bgf--------------------
accessor-declarations ::= (get-accessor-declaration set-accessor-declaration?) | (set-accessor-declaration get-accessor-declaration?) ;
delegate-creation-expression ::= "new" delegate-type "(" expression ")" ;
relational-expression ::= shift-expression | (relational-expression "<" shift-expression) | (relational-expression ">" shift-expression) | (relational-expression "<=" shift-expression) | (relational-expression ">=" shift-expression) | (relational-expression "is" type) | (relational-expression "as" type) ;
global-attribute-target-specifier ::= global-attribute-target ":" ;
pre-decrement-expression ::= "--" unary-expression ;
constant-declarator ::= identifier "=" constant-expression ;
method-header ::= (attributes? method-modifiers? "partial"? return-type member-name type-parameter-list?) | ("(" formal-parameter-list? ")" type-parameter-constraints-clauses?) ;
finally-clause ::= "finally" block ;
interface-member-declarations ::= interface-member-declaration | (interface-member-declarations interface-member-declaration) ;
member-access ::= (primary-expression "." identifier type-argument-list?) | (predefined-type "." identifier type-argument-list?) | (qualified-alias-member "." identifier) ;
unary-expression ::= primary-expression | ("+" unary-expression) | ("-" unary-expression) | ("!" unary-expression) | ("~" unary-expression) | pre-increment-expression | pre-decrement-expression | cast-expression ;
unbound-type-name ::= (identifier generic-dimension-specifier?) | (identifier "::" identifier generic-dimension-specifier?) | (unbound-type-name "." identifier generic-dimension-specifier?) ;
invocation-expression ::= primary-expression "(" argument-list? ")" ;
local-constant-declaration ::= "const" type constant-declarators ;
from-clause ::= "from" type? identifier "in" expression ;
enum-body ::= ("{" enum-member-declarations? "}") | ("{" enum-member-declarations "," "}") ;
variant-type-parameter-list ::= "<" variant-type-parameters ">" ;
using-directives ::= using-directive | (using-directives using-directive) ;
interface-modifiers ::= interface-modifier | (interface-modifiers interface-modifier) ;
interface-declaration ::= (attributes? interface-modifiers? "partial"? "interface") | (identifier variant-type-parameter-list? interface-base?) | (type-parameter-constraints-clauses? interface-body ";"?) ;
cast-expression ::= "(" type ")" unary-expression ;
interface-base ::= ":" interface-type-list ;
extern-alias-directive ::= "extern" "alias" identifier ";" ;
constructor-declarator ::= identifier "(" formal-parameter-list? ")" constructor-initializer? ;
fixed-parameters ::= fixed-parameter | (fixed-parameters "," fixed-parameter) ;
formal-parameter-list ::= fixed-parameters | (fixed-parameters "," parameter-array) | parameter-array ;
base-access ::= ("base" "." identifier) | ("base" "[" argument-list "]") ;
member-name ::= identifier | (interface-type "." identifier) ;
try-statement ::= ("try" block catch-clauses) | ("try" block finally-clause) | ("try" block catch-clauses finally-clause) ;
declaration-statement ::= (local-variable-declaration ";") | (local-constant-declaration ";") ;
variable-initializer-list ::= variable-initializer | (variable-initializer-list "," variable-initializer) ;
class-body ::= "{" class-member-declarations? "}" ;
unchecked-expression ::= "unchecked" "(" expression ")" ;
type-parameter-constraints-clauses ::= type-parameter-constraints-clause | (type-parameter-constraints-clauses type-parameter-constraints-clause) ;
namespace-body ::= "{" extern-alias-directives? using-directives? namespace-member-declarations? "}" ;
ordering ::= expression ordering-direction? ;
while-statement ::= "while" "(" boolean-expression ")" embedded-statement ;
exclusive-or-expression ::= and-expression | (exclusive-or-expression "^" and-expression) ;
array-creation-expression ::= ("new" non-array-type "[" expression-list "]" rank-specifiers? array-initializer?) | ("new" array-type array-initializer) | ("new" rank-specifier array-initializer) ;
catch-clauses ::= (specific-catch-clauses general-catch-clause?) | (specific-catch-clauses? general-catch-clause) ;
operator-declaration ::= attributes? operator-modifiers operator-declarator operator-body ;
constant-declaration ::= attributes? constant-modifiers? "const" type constant-declarators ";" ;
named-argument ::= identifier "=" attribute-argument-expression ;
assignment ::= unary-expression assignment-operator expression ;
local-variable-declaration ::= local-variable-type local-variable-declarators ;
default-argument ::= "=" expression ;
continue-statement ::= "continue" ";" ;
checked-statement ::= "checked" block ;
using-alias-directive ::= "using" identifier "=" namespace-or-type-name ";" ;
static-constructor-declaration ::= attributes? static-constructor-modifiers identifier "(" ")" static-constructor-body ;
event-declaration ::= (attributes? event-modifiers? "event" type variable-declarators ";") | (attributes? event-modifiers? "event" type member-name "{" event-accessor-declarations "}") ;
simple-name ::= identifier type-argument-list? ;
conversion-operator-declarator ::= ("implicit" "operator" type "(" type identifier ")") | ("explicit" "operator" type "(" type identifier ")") ;
shift-expression ::= additive-expression | (shift-expression "<<" additive-expression) | (shift-expression right-shift additive-expression) ;
post-increment-expression ::= primary-expression "++" ;
enum-member-declarations ::= enum-member-declaration | (enum-member-declarations "," enum-member-declaration) ;
local-variable-declarator ::= identifier | (identifier "=" local-variable-initializer) ;
indexer-declarator ::= (type "this" "[" formal-parameter-list "]") | (type interface-type "." "this" "[" formal-parameter-list "]") ;
type-parameter-constraints ::= primary-constraint | secondary-constraints | constructor-constraint | (primary-constraint "," secondary-constraints) | (primary-constraint "," constructor-constraint) | (secondary-constraints "," constructor-constraint) | (primary-constraint "," secondary-constraints "," constructor-constraint) ;
if-statement ::= ("if" "(" boolean-expression ")" embedded-statement) | ("if" "(" boolean-expression ")" embedded-statement "else" embedded-statement) ;
interface-type-list ::= interface-type | (interface-type-list "," interface-type) ;
query-expression ::= from-clause query-body ;
argument ::= argument-name? argument-value ;
conditional-or-expression ::= conditional-and-expression | (conditional-or-expression "||" conditional-and-expression) ;
constant-declarators ::= constant-declarator | (constant-declarators "," constant-declarator) ;
switch-labels ::= switch-label | (switch-labels switch-label) ;
object-creation-expression ::= ("new" type "(" argument-list? ")" object-or-collection-initializer?) | ("new" type object-or-collection-initializer) ;
class-member-declarations ::= class-member-declaration | (class-member-declarations class-member-declaration) ;
interface-body ::= "{" interface-member-declarations? "}" ;
rank-specifiers ::= rank-specifier | (rank-specifiers rank-specifier) ;
labeled-statement ::= identifier ":" statement ;
positional-argument-list ::= positional-argument | (positional-argument-list "," positional-argument) ;
attribute-section ::= ("[" attribute-target-specifier? attribute-list "]") | ("[" attribute-target-specifier? attribute-list "," "]") ;
switch-block ::= "{" switch-sections? "}" ;
anonymous-object-initializer ::= ("{" member-declarator-list? "}") | ("{" member-declarator-list "," "}") ;
expression-list ::= expression | (expression-list "," expression) ;
local-variable-declarators ::= local-variable-declarator | (local-variable-declarators "," local-variable-declarator) ;
enum-modifiers ::= enum-modifier | (enum-modifiers enum-modifier) ;
enum-declaration ::= attributes? enum-modifiers? "enum" identifier enum-base? enum-body ";"? ;
argument-list ::= argument | (argument-list "," argument) ;
do-statement ::= "do" embedded-statement "while" "(" boolean-expression ")" ";" ;
indexer-declaration ::= attributes? indexer-modifiers? indexer-declarator "{" accessor-declarations "}" ;
foreach-statement ::= "foreach" "(" local-variable-type identifier "in" expression ")" embedded-statement ;
global-attribute-sections ::= global-attribute-section | (global-attribute-sections global-attribute-section) ;
switch-sections ::= switch-section | (switch-sections switch-section) ;
destructor-declaration ::= attributes? "extern"? "~" identifier "(" ")" destructor-body ;
class-declaration ::= (attributes? class-modifiers? "partial"? "class" identifier type-parameter-list?) | (class-base? type-parameter-constraints-clauses? class-body ";"?) ;
anonymous-method-expression ::= "delegate" explicit-anonymous-function-signature? block ;
interface-method-declaration ::= (attributes? "new"? return-type identifier type-parameter-list) | ("(" formal-parameter-list? ")" type-parameter-constraints-clauses? ";") ;
inclusive-or-expression ::= exclusive-or-expression | (inclusive-or-expression "|" exclusive-or-expression) ;
add-accessor-declaration ::= attributes? "add" block ;
pre-increment-expression ::= "++" unary-expression ;
query-body-clauses ::= query-body-clause | (query-body-clauses query-body-clause) ;
remove-accessor-declaration ::= attributes? "remove" block ;
accessor-modifier ::= "protected" | "internal" | "private" | ("protected" "internal") | ("internal" "protected") ;
attribute ::= attribute-name attribute-arguments? ;
argument-name ::= identifier ":" ;
null-coalescing-expression ::= conditional-or-expression | (conditional-or-expression "??" null-coalescing-expression) ;
struct-body ::= "{" struct-member-declarations? "}" ;
interface-property-declaration ::= attributes? "new"? type identifier "{" interface-accessors "}" ;
struct-member-declarations ::= struct-member-declaration | (struct-member-declarations struct-member-declaration) ;
using-namespace-directive ::= "using" namespace-name ";" ;
operator-modifiers ::= operator-modifier | (operator-modifiers operator-modifier) ;
constant-modifiers ::= constant-modifier | (constant-modifiers constant-modifier) ;
attribute-target-specifier ::= attribute-target ":" ;
dim-separators ::= "," | (dim-separators ",") ;
variable-declarators ::= variable-declarator | (variable-declarators "," variable-declarator) ;
element-initializer ::= non-assignment-expression | ("{" expression-list "}") ;
fixed-parameter ::= attributes? parameter-modifier? type identifier default-argument? ;
method-modifiers ::= method-modifier | (method-modifiers method-modifier) ;
constructor-constraint ::= "new" "(" ")" ;
constructor-initializer ::= (":" "base" "(" argument-list? ")") | (":" "this" "(" argument-list? ")") ;
implicit-anonymous-function-parameter-list ::= implicit-anonymous-function-parameter | (implicit-anonymous-function-parameter-list "," implicit-anonymous-function-parameter) ;
method-declaration ::= method-header method-body ;
block ::= "{" statement-list? "}" ;
query-body ::= query-body-clauses? select-or-group-clause query-continuation? ;
member-declarator-list ::= member-declarator | (member-declarator-list "," member-declarator) ;
general-catch-clause ::= "catch" block ;
goto-statement ::= ("goto" identifier ";") | ("goto" "case" constant-expression ";") | ("goto" "default" ";") ;
struct-modifiers ::= struct-modifier | (struct-modifiers struct-modifier) ;
property-modifiers ::= property-modifier | (property-modifiers property-modifier) ;
type-arguments ::= type-argument | (type-arguments "," type-argument) ;
struct-declaration ::= (attributes? struct-modifiers? "partial"? "struct" identifier type-parameter-list?) | (struct-interfaces? type-parameter-constraints-clauses? struct-body ";"?) ;
property-declaration ::= attributes? property-modifiers? type member-name "{" accessor-declarations "}" ;
default-value-expression ::= "default" "(" type ")" ;
set-accessor-declaration ::= attributes? accessor-modifier? "set" accessor-body ;
checked-expression ::= "checked" "(" expression ")" ;
group-clause ::= "group" expression "by" expression ;
specific-catch-clause ::= "catch" "(" class-type identifier? ")" block ;
member-initializer-list ::= member-initializer | (member-initializer-list "," member-initializer) ;
qualified-identifier ::= identifier | (qualified-identifier "." identifier) ;
expression-statement ::= statement-expression ";" ;
interface-accessors ::= (attributes? "get" ";") | (attributes? "set" ";") | (attributes? "get" ";" attributes? "set" ";") | (attributes? "set" ";" attributes? "get" ";") ;
specific-catch-clauses ::= specific-catch-clause | (specific-catch-clauses specific-catch-clause) ;
conditional-and-expression ::= inclusive-or-expression | (conditional-and-expression "&&" inclusive-or-expression) ;
join-clause ::= "join" type? identifier "in" expression "on" expression "equals" expression ;
multiplicative-expression ::= unary-expression | (multiplicative-expression "*" unary-expression) | (multiplicative-expression "/" unary-expression) | (multiplicative-expression "%" unary-expression) ;
array-initializer ::= ("{" variable-initializer-list? "}") | ("{" variable-initializer-list "," "}") ;
for-statement ::= "for" "(" for-initializer? ";" for-condition? ";" for-iterator? ")" embedded-statement ;
constructor-modifiers ::= constructor-modifier | (constructor-modifiers constructor-modifier) ;
field-modifiers ::= field-modifier | (field-modifiers field-modifier) ;
class-modifiers ::= class-modifier | (class-modifiers class-modifier) ;
using-statement ::= "using" "(" resource-acquisition ")" embedded-statement ;
attribute-arguments ::= ("(" positional-argument-list? ")") | ("(" positional-argument-list "," named-argument-list ")") | ("(" named-argument-list ")") ;
let-clause ::= "let" identifier "=" expression ;
argument-value ::= expression | ("ref" variable-reference) | ("out" variable-reference) ;
select-clause ::= "select" expression ;
lambda-expression ::= anonymous-function-signature "=>" anonymous-function-body ;
secondary-constraints ::= interface-type | type-parameter | (secondary-constraints "," interface-type) | (secondary-constraints "," type-parameter) ;
type-parameters ::= (attributes? type-parameter) | (type-parameters "," attributes? type-parameter) ;
rank-specifier ::= "[" dim-separators? "]" ;
unary-operator-declarator ::= type "operator" overloadable-unary-operator "(" type identifier ")" ;
explicit-anonymous-function-signature ::= "(" explicit-anonymous-function-parameter-list? ")" ;
type-argument-list ::= "<" type-arguments ">" ;
element-initializer-list ::= element-initializer | (element-initializer-list "," element-initializer) ;
join-into-clause ::= "join" type? identifier "in" expression "on" expression "equals" expression "into" identifier ;
positional-argument ::= argument-name? attribute-argument-expression ;
statement-expression-list ::= statement-expression | (statement-expression-list "," statement-expression) ;
element-access ::= primary-no-array-creation-expression "[" argument-list "]" ;
object-initializer ::= ("{" member-initializer-list? "}") | ("{" member-initializer-list "," "}") ;
typeof-expression ::= ("typeof" "(" type ")") | ("typeof" "(" unbound-type-name ")") | ("typeof" "(" "void" ")") ;
struct-interfaces ::= ":" interface-type-list ;
unchecked-statement ::= "unchecked" block ;
and-expression ::= equality-expression | (and-expression "&" equality-expression) ;
compilation-unit ::= (extern-alias-directives? using-directives? global-attributes?) | (namespace-member-declarations?) ;
lock-statement ::= "lock" "(" expression ")" embedded-statement ;
explicit-anonymous-function-parameter ::= anonymous-function-parameter-modifier? type identifier ;
switch-section ::= switch-labels statement-list ;
implicit-anonymous-function-signature ::= ("(" implicit-anonymous-function-parameter-list? ")") | implicit-anonymous-function-parameter ;
equality-expression ::= relational-expression | (equality-expression "==" relational-expression) | (equality-expression "!=" relational-expression) ;
static-constructor-modifiers ::= ("extern"? "static") | ("static" "extern"?) ;
parenthesized-expression ::= "(" expression ")" ;
throw-statement ::= "throw" expression? ";" ;
qualified-alias-member ::= identifier "::" identifier type-argument-list? ;
member-declarator ::= simple-name | member-access | (identifier "=" expression) ;
attribute-sections ::= attribute-section | (attribute-sections attribute-section) ;
conditional-expression ::= null-coalescing-expression | (null-coalescing-expression "?" expression ":" expression) ;
commas ::= "," | (commas ",") ;
type-parameter-constraints-clause ::= "where" type-parameter ":" type-parameter-constraints ;
statement-list ::= statement | (statement-list statement) ;
additive-expression ::= multiplicative-expression | (additive-expression "+" multiplicative-expression) | (additive-expression "-" multiplicative-expression) ;
parameter-array ::= attributes? "params" array-type identifier ;
type-parameter-list ::= "<" type-parameters ">" ;
delegate-modifiers ::= delegate-modifier | (delegate-modifiers delegate-modifier) ;
interface-event-declaration ::= attributes? "new"? "event" type identifier ";" ;
collection-initializer ::= ("{" element-initializer-list "}") | ("{" element-initializer-list "," "}") ;
delegate-declaration ::= (attributes? delegate-modifiers? "delegate" return-type) | (identifier variant-type-parameter-list?) | ("(" formal-parameter-list? ")" type-parameter-constraints-clauses? ";") ;
yield-statement ::= ("yield" "return" expression ";") | ("yield" "break" ";") ;
member-initializer ::= identifier "=" initializer-value ;
attribute-list ::= attribute | (attribute-list "," attribute) ;
binary-operator-declarator ::= type "operator" overloadable-binary-operator "(" type identifier "," type identifier ")" ;
indexer-modifiers ::= indexer-modifier | (indexer-modifiers indexer-modifier) ;
extern-alias-directives ::= extern-alias-directive | (extern-alias-directives extern-alias-directive) ;
array-type ::= non-array-type rank-specifiers ;
constructor-declaration ::= attributes? constructor-modifiers? constructor-declarator constructor-body ;
field-declaration ::= attributes? field-modifiers? type variable-declarators ";" ;
nullable-type ::= non-nullable-value-type "?" ;
variable-declarator ::= identifier | (identifier "=" variable-initializer) ;
generic-dimension-specifier ::= "<" commas? ">" ;
break-statement ::= "break" ";" ;
orderings ::= ordering | (orderings "," ordering) ;
post-decrement-expression ::= primary-expression "--" ;
explicit-anonymous-function-parameter-list ::= explicit-anonymous-function-parameter | (explicit-anonymous-function-parameter-list "," explicit-anonymous-function-parameter) ;
enum-base ::= ":" integral-type ;
query-continuation ::= "into" identifier query-body ;
switch-label ::= ("case" constant-expression ":") | ("default" ":") ;
namespace-member-declarations ::= namespace-member-declaration | (namespace-member-declarations namespace-member-declaration) ;
named-argument-list ::= named-argument | (named-argument-list "," named-argument) ;
interface-indexer-declaration ::= attributes? "new"? type "this" "[" formal-parameter-list "]" "{" interface-accessors "}" ;
anonymous-object-creation-expression ::= "new" anonymous-object-initializer ;
orderby-clause ::= "orderby" orderings ;
switch-statement ::= "switch" "(" expression ")" switch-block ;
variant-type-parameters ::= (attributes? variance-annotation? type-parameter) | (variant-type-parameters "," attributes? variance-annotation? type-parameter) ;
where-clause ::= "where" boolean-expression ;
enum-member-declaration ::= (attributes? identifier) | (attributes? identifier "=" constant-expression) ;
return-statement ::= "return" expression? ";" ;
event-accessor-declarations ::= (add-accessor-declaration remove-accessor-declaration) | (remove-accessor-declaration add-accessor-declaration) ;
get-accessor-declaration ::= attributes? accessor-modifier? "get" accessor-body ;
global-attribute-section ::= ("[" global-attribute-target-specifier attribute-list "]") | ("[" global-attribute-target-specifier attribute-list "," "]") ;
event-modifiers ::= event-modifier | (event-modifiers event-modifier) ;
namespace-declaration ::= "namespace" qualified-identifier namespace-body ";"? ;
class-base ::= (":" class-type) | (":" interface-type-list) | (":" class-type "," interface-type-list) ;
namespace-or-type-name ::= (identifier type-argument-list?) | (namespace-or-type-name "." identifier type-argument-list?) | qualified-alias-member ;
--------------------cs::csharp-zaytsev.bgf--------------------
accessor-declarations ::= (get-accessor-declaration set-accessor-declaration?) | (set-accessor-declaration get-accessor-declaration?) ;
set-accessor-declaration ::= attributes "set" maybe-empty-block ;
specific-catch-clause ::= ("catch" "(" built-in-class-type lex-csharp/identifier? ")" block) | ("catch" "(" qualified-identifier lex-csharp/identifier? ")" block) ;
constant-declarator ::= lex-csharp/identifier "=" expression ;
method-header ::= attributes method-modifier* type-or-void qualified-identifier "(" formal-parameter-list? ")" ;
finally-clause ::= "finally" block ;
interface-accessors ::= (attributes "get" ";" (attributes "set" ";")?) | (attributes "set" ";" (attributes "get" ";")?) ;
unary-expression ::= (expression-unary-operator unary-expression) | ("(" type ")" unary-expression) | primary-expression ;
local-constant-declaration ::= "const" type {constant-declarator ","}+ ;
enum-body ::= ("{" "}") | ("{" {enum-member-declaration ","}+ ","? "}") ;
array-initializer ::= ("{" "}") | ("{" {variable-initializer ","}+ ","? "}") ;
embedded-statement ::= maybe-empty-block | (statement-expression ";") | selection-statement | iteration-statement | jump-statement | try-statement | ("checked" block) | ("unchecked" block) | lock-statement | using-statement ;
for-statement ::= "for" "(" for-initializer? ";" expression? ";" statement-expression-list? ")" embedded-statement ;
interface-declaration ::= attributes interface-modifier* "interface" lex-csharp/identifier (":" qualified-identifier-list)? interface-body ";"? ;
using-statement ::= "using" "(" resource-acquisition ")" embedded-statement ;
attribute-arguments ::= "(" expression-list? ")" ;
constructor-declarator ::= lex-csharp/identifier "(" formal-parameter-list? ")" constructor-initializer? ;
formal-parameter-list ::= fixed-parameters | (fixed-parameters "," parameter-array) | parameter-array ;
rank-specifier ::= "[" ","* "]" ;
try-statement ::= ("try" block catch-clauses finally-clause?) | ("try" block finally-clause) ;
unary-operator-declarator ::= type "operator" overloadable-unary-operator "(" type lex-csharp/identifier ")" ;
declaration-statement ::= (local-variable-declaration ";") | (local-constant-declaration ";") ;
class-body ::= "{" class-member-declaration* "}" ;
namespace-body ::= "{" using-directive* namespace-member-declaration* "}" ;
while-statement ::= "while" "(" expression ")" embedded-statement ;
catch-clauses ::= (specific-catch-clause+ general-catch-clause?) | (specific-catch-clause* general-catch-clause) ;
operator-declaration ::= attributes operator-modifier+ operator-declarator maybe-empty-block ;
constant-declaration ::= attributes constant-modifier* "const" type {constant-declarator ","}+ ";" ;
compilation-unit ::= using-directive* global-attributes namespace-member-declaration* ;
lock-statement ::= "lock" "(" expression ")" embedded-statement ;
switch-section ::= switch-label+ statement+ ;
local-variable-declaration ::= type {variable-declarator ","}+ ;
static-constructor-modifiers ::= ("extern"? "static") | ("static" "extern") ;
continue-statement ::= "continue" ";" ;
static-constructor-declaration ::= attributes static-constructor-modifiers lex-csharp/identifier "(" ")" maybe-empty-block ;
throw-statement ::= "throw" expression? ";" ;
event-declaration ::= (attributes event-modifier* "event" type {variable-declarator ","}+ ";") | (attributes event-modifier* "event" type qualified-identifier "{" event-accessor-declarations "}") ;
using-directive ::= "using" (lex-csharp/identifier "=")? qualified-identifier ";" ;
conversion-operator-declarator ::= conversion-kind "operator" type "(" type lex-csharp/identifier ")" ;
primary-expression ::= ("new" non-array-type "[" expression-list "]" rank-specifier* array-initializer?) | ("new" array-type array-initializer) | lex-csharp/literal | lex-csharp/identifier | ("(" expression ")") | (primary-expression "." lex-csharp/identifier) | (predefined-type "." lex-csharp/identifier) | (primary-expression "(" argument-list ")") | (primary-expression "[" expression-list "]") | "this" | ("base" "." lex-csharp/identifier) | ("base" "[" expression-list "]") | (primary-expression increment-decrement) | ("new" type "(" argument-list ")") | ("typeof" "(" type-or-void ")") | ("checked" "(" expression ")") | ("unchecked" "(" expression ")") ;
indexer-declarator ::= (type "this" "[" formal-parameter-list "]") | (type qualified-identifier "." "this" "[" formal-parameter-list "]") ;
if-statement ::= "if" "(" expression ")" embedded-statement else-part? ;
argument ::= ref-or-out? expression ;
type ::= non-array-type rank-specifier* ;
interface-body ::= "{" interface-member-declaration* "}" ;
statement-expression ::= (primary-expression "(" argument-list ")") | ("new" type "(" argument-list ")") | (unary-expression assignment-operator expression) | (primary-expression increment-decrement) | (increment-decrement primary-expression) ;
parameter-array ::= attributes "params" array-type lex-csharp/identifier ;
labeled-statement ::= lex-csharp/identifier ":" statement ;
attribute-section ::= "[" (attribute-target ":")? attribute-list ","? "]" ;
interface-event-declaration ::= attributes "new"? "event" type lex-csharp/identifier ";" ;
delegate-declaration ::= attributes delegate-modifier* "delegate" type-or-void lex-csharp/identifier "(" formal-parameter-list? ")" ";" ;
enum-declaration ::= attributes enum-modifier* "enum" lex-csharp/identifier (":" integral-type)? enum-body ";"? ;
array-type ::= non-array-type rank-specifier+ ;
binary-operator-declarator ::= type "operator" overloadable-binary-operator "(" type lex-csharp/identifier "," type lex-csharp/identifier ")" ;
do-statement ::= "do" embedded-statement "while" "(" expression ")" ";" ;
foreach-statement ::= "foreach" "(" type lex-csharp/identifier "in" expression ")" embedded-statement ;
indexer-declaration ::= attributes indexer-modifier* indexer-declarator "{" accessor-declarations "}" ;
maybe-empty-block ::= ("{" statement* "}") | ";" ;
constructor-declaration ::= attributes constructor-modifier* constructor-declarator maybe-empty-block ;
field-declaration ::= attributes field-modifier* type {variable-declarator ","}+ ";" ;
destructor-declaration ::= attributes "extern"? "~" lex-csharp/identifier "(" ")" maybe-empty-block ;
class-declaration ::= attributes class-modifier* "class" lex-csharp/identifier class-base? class-body ";"? ;
interface-method-declaration ::= attributes "new"? type-or-void lex-csharp/identifier "(" formal-parameter-list? ")" ";" ;
variable-declarator ::= lex-csharp/identifier | (lex-csharp/identifier "=" variable-initializer) ;
break-statement ::= "break" ";" ;
add-accessor-declaration ::= attributes "add" block ;
remove-accessor-declaration ::= attributes "remove" block ;
attribute ::= attribute-name attribute-arguments? ;
switch-label ::= ("case" expression ":") | ("default" ":") ;
struct-body ::= "{" struct-member-declaration* "}" ;
interface-indexer-declaration ::= attributes "new"? type "this" "[" formal-parameter-list "]" "{" interface-accessors "}" ;
expression ::= (expression "?" expression ":" expression) | (expression "||" expression) | (expression "&&" expression) | (expression lex-csharp-extra/bar expression) | (expression "^" expression) | (expression lex-csharp-extra/ampersand expression) | (expression expression-equality-operator expression) | (expression expression-relational-operator expression) | (expression "is" built-in-type) | (expression expression-shift-operator expression) | (expression lex-csharp-extra/plus expression) | (expression lex-csharp-extra/minus expression) | (expression "*" expression) | (expression "/" expression) | (expression "%" expression) | unary-expression | (unary-expression assignment-operator expression) ;
interface-property-declaration ::= attributes "new"? type lex-csharp/identifier "{" interface-accessors "}" ;
switch-statement ::= "switch" "(" expression ")" "{" switch-section* "}" ;
struct-member-declarations ::= struct-member-declaration | (struct-member-declarations struct-member-declaration) ;
enum-member-declaration ::= attributes lex-csharp/identifier ("=" expression)? ;
return-statement ::= "return" expression? ";" ;
fixed-parameter ::= attributes parameter-modifier? type lex-csharp/identifier ;
constructor-initializer ::= (":" "base" "(" argument-list ")") | (":" "this" "(" argument-list ")") ;
method-declaration ::= method-header maybe-empty-block ;
block ::= "{" statement* "}" ;
event-accessor-declarations ::= (add-accessor-declaration remove-accessor-declaration) | (remove-accessor-declaration add-accessor-declaration) ;
get-accessor-declaration ::= attributes "get" maybe-empty-block ;
global-attribute-section ::= "[" "assembly" ":" attribute-list ","? "]" ;
namespace-declaration ::= "namespace" qualified-identifier namespace-body ";"? ;
else-part ::= "else" embedded-statement ;
class-base ::= (":" qualified-identifier-list) | (":" built-in-class-type ("," qualified-identifier-list)?) ;
general-catch-clause ::= "catch" block ;
goto-statement ::= ("goto" lex-csharp/identifier ";") | ("goto" "case" expression ";") | ("goto" "default" ";") ;
struct-declaration ::= attributes struct-modifier* "struct" lex-csharp/identifier (":" qualified-identifier-list)? struct-body ";"? ;
property-declaration ::= attributes property-modifier* type qualified-identifier "{" accessor-declarations "}" ;
--------------------cs::csharp-antoniol.bgf--------------------
else_part ::= "//"? elsedef_line newline line* ;
elsif_part ::= "//"? elsifdef_line newline line* ;
not_newline ::= long_comment | (token) ;
ifdef ::= "//"? ifdef_line newline line* elsif_part* else_part? "//"? endifdef_line newline ;
line ::= ifdef | ("//"? other_preprocessor_line newline) | ("//"? any_other_line newline) ;
--------------------cs::csharp-bruneliere.bgf--------------------
Type ::= qualifiedName::String isAbstract::Boolean visibility::String isSealed::Boolean nameSpace::String (members::Member)+ t_container::Assembly super::Type ;
Constructor ::= visibility::String isAbstract::Boolean isFinal::Boolean isStatic::Boolean (parameters::Parameter)+ ;
Field ::= type::Type ;
Member ::= TypedAttribute ;
 Member ::= MethodBase ;
 Member ::= Type ;
 Member ::= name::String owner::Type ;
Parameter ::= isIn::Boolean isOut::Boolean name::Boolean position::Integer method::MethodBase type::Type ;
Assembly ::= name::String (content::Type)+ ;
Property ::= isReadable::Boolean isWritable::Boolean ;
MethodBase ::= Constructor ;
 MethodBase ::= Method ;
 MethodBase ::= visibility::String isAbstract::Boolean isFinal::Boolean isStatic::Boolean (parameters::Parameter)+ ;
--------------------cs::csharp-cordy.bgf--------------------
equality_expression ::= relational_expression | (equality_expression "==" relational_expression) | (equality_expression "!=" relational_expression) ;
pointer_type ::= (unmanaged_type "*"*) | ("void" "*" "*"*) ;
array_initializer ::= "{" variable_initializer_list? ","? "}" ;
parenthesized_expression ::= "(" expression ")" ;
simple_name ::= id type_argument_list? ;
object_creation_expression ::= "new" type "(" argument_list? ")" ;
conditional_expression ::= null_coalescing_expression | (null_coalescing_expression "?" expression ":" expression) ;
global_attribute_target_specifier ::= global_attribute_target ":" ;
final_query_clause ::= (NL select_clause) | (NL groupby_clause) ;
finalizer_body ::= (block NL) | (";" NL) ;
additive_expression ::= multiplicative_expression | (additive_expression "+" multiplicative_expression) | (additive_expression "-" multiplicative_expression) ;
try_statement ::= "try" block NL catch_clauses? finally_clause? ;
declaration_statement ::= (local_variable_declaration ";" NL) | (local_constant_declaration ";" NL) ;
key_expr_ascending_descending ::= key_expr ascending_descending? ;
interface_body ::= "{" NL IN interface_member_declarations? EX "}" ";"? NL ;
static_constructor_declaration ::= attributes? static_constructor_modifiers id "(" ")" NL static_constructor_body NL ;
interface_method_declaration ::= attributes? "new"? return_type id type_parameter_list? "(" formal_parameter_list? ")" type_parameter_constraints_clauses? ";" NL ;
object_initializer ::= "{" member_initializer_list? ","? "}" ;
while_statement ::= "while" "(" boolean_expression ")" nested_statement NL ;
pre_decrement_expression ::= "--" unary_expression ;
element_access_operator ::= "[" expression+ "]" ;
colon_colon_id ::= "::" id ;
pointer_element_access_operator ::= "[" expression "]" ;
switch_section ::= switch_labels NL IN statement_list EX ;
comma_parameter_array ::= "," parameter_array ;
conditional_and_expression ::= inclusive_or_expression | (conditional_and_expression "&&" inclusive_or_expression) ;
checked_statement ::= "checked" block NL ;
continue_statement ::= "continue" ";" NL ;
variable_declarator ::= id equals_variable_initializer? ;
type_parameter_constraints_clause ::= "where" type_parameter ":" type_parameter_constraints ;
attribute_target_specifier ::= attribute_target ":" ;
dot_id ::= "." id ;
interface_event_declaration ::= attributes? "new"? "event" type id ";" NL ;
finalizer_declaration ::= attributes? "extern"? "~" id "(" ")" finalizer_body ;
 finalizer_declaration ::= (attributes? "extern"? "unsafe"? "~" id "(" ")" NL finalizer_body NL) | (attributes? "unsafe"? "extern"? "~" id "(" ")" NL finalizer_body NL) ;
accessor_modifier ::= "protected" | "internal" | "private" | ("protected" "internal") | ("internal" "protected") ;
member_name_equals ::= simple_name "=" ;
if_statement ::= "if" "(" boolean_expression ")" nested_statement else_if_clause* else_clause? NL ;
assignment ::= unary_expression assignment_operator expression ;
attributes_type_parameter ::= attributes? type_parameter ;
struct_body ::= "{" NL IN struct_member_declarations? EX "}" ";"? NL ;
get_accessor_declaration ::= attributes? accessor_modifier? "get" accessor_body ;
orderby_clause ::= "orderby" {key_expr_ascending_descending ","}* ;
constructor_body ::= (block NL) | (";" NL) ;
where_clause ::= "where" pred_expr ;
formal_parameter_list ::= fixed_parameters comma_parameter_array? ;
labeled_statement ::= id ":" statement ;
switch_block ::= "{" NL IN switch_sections EX "}" NL ;
delegate_declaration ::= attributes? delegate_modifiers? "delegate" return_type id type_parameter_list? "(" formal_parameter_list? ")" type_parameter_constraints_clauses? ";" NL ;
generic_dimension_specifier ::= "<" ","* ">" ;
member_initializer ::= (member_name_equals? expression) | (member_name_equals? array_initializer) ;
argument ::= expression | ("ref" variable_reference) | ("out" variable_reference) ;
pointer_member_access_operator ::= "->" id type_argument_list? ;
do_statement ::= "do" NL IN embedded_statement EX "while" "(" boolean_expression ")" ";" NL ;
foreach_statement ::= "foreach" "(" type id "in" expression ")" nested_statement NL ;
namespace_member_declaration ::= (namespace_declaration NL) | (type_declaration NL) ;
query_body ::= query_body_clause* final_query_clause query_continuation? ;
groupby_clause ::= "group" sel_expr "by" key_expr ;
constructor_declaration ::= attributes? constructor_modifiers? constructor_declarator NL constructor_body NL ;
field_declaration ::= attributes? field_modifiers? type variable_declarators ";" NL ;
query_body_clause ::= (NL from_clause) | (NL join_clause) | (NL let_clause) | (NL where_clause) | (NL orderby_clause) ;
local_constant_declaration ::= "const" type constant_declarators ;
relational_expression ::= shift_expression | (relational_expression "<" shift_expression) | (relational_expression ">" shift_expression) | (relational_expression "<=" shift_expression) | (relational_expression ">=" shift_expression) | (relational_expression "is" type) | (relational_expression "as" type) ;
constant_declarator ::= id "=" constant_expression ;
method_header ::= attributes? method_modifiers? return_type member_name type_parameter_list? "(" formal_parameter_list? ")" type_parameter_constraints_clauses? ;
finally_clause ::= "finally" block NL ;
unary_expression ::= primary_expression | ("+" unary_expression) | ("-" unary_expression) | ("!" unary_expression) | ("~" unary_expression) | pre_increment_expression | pre_decrement_expression | cast_expression ;
 unary_expression ::= pointer_indirection_expression | addressof_expression ;
global_attribute_section ::= "[" global_attribute_target_specifier attribute_list ","? "]" ;
from_clause ::= "from" item_name "in" src_expr ;
simple_primary_expression ::= literal | simple_name | parenthesized_expression | this_access | base_access | object_or_delegate_creation_expression | typeof_expression | checked_expression | unchecked_expression | default_value_expression | anonymous_method_expression | (predefined_type member_access_operator) | (qualified_alias_member member_access_operator) ;
sizeof_expression ::= "sizeof" "(" unmanaged_type ")" ;
using_directives ::= using_directive+ NL ;
fixed_parameter ::= (attributes? parameter_modifier? type id) | parameter_array ;
attribute ::= attribute_name attribute_arguments? ;
unary_operator_declarator ::= type "operator" overloadable_unary_operator "(" type id ")" ;
type_argument_list ::= "<" type_argument+ ">" ;
accessor_body ::= (block NL) | (";" NL) ;
cast_expression ::= "(" type ")" unary_expression ;
constructor_declarator ::= id "(" formal_parameter_list? ")" constructor_initializer? ;
namespace_declaration ::= "namespace" qualified_identifier NL namespace_body ;
fixed_pointer_initializer ::= ("&" variable_reference) | expression ;
equals_constant_expression ::= "=" constant_expression ;
goto_statement ::= ("goto" id ";" NL) | ("goto" "case" constant_expression ";" NL) | ("goto" "default" ";" NL) ;
exclusive_or_expression ::= and_expression | (exclusive_or_expression "^" and_expression) ;
base_access ::= ("base" "." id type_argument_list?) | ("base" "[" expression+ "]") ;
block ::= "{" NL IN statement_list? EX "}" ";"? ;
addressof_expression ::= "&" unary_expression ;
local_variable_declaration ::= type local_variable_declarators ;
unchecked_expression ::= "unchecked" "(" expression ")" ;
expression_statement ::= statement_expression ";" NL ;
interface_accessors ::= (attributes? "get" ";") | (attributes? "set" ";") | (attributes? "get" ";" attributes? "set" ";") | (attributes? "set" ";" attributes? "get" ";") ;
pre_increment_expression ::= "++" unary_expression ;
extern_alias_directive ::= "extern" id id ";" NL ;
compilation_unit ::= extern_alias_directives? using_directives? global_attributes? namespace_member_declarations? ;
input_parameters ::= input_parameter | ("(" {input_parameter ","}* ")") ;
conditional_or_expression ::= conditional_and_expression | (conditional_or_expression "||" conditional_and_expression) ;
member_access_operator ::= "." id type_argument_list? ;
for_statement ::= "for" "(" for_initializer? ";" for_condition? ";" for_iterator? ")" nested_statement NL ;
static_constructor_body ::= (block NL) | (";" NL) ;
namespace_or_type_name ::= "this"? id colon_colon_id? dot_id* type_argument_list? ;
shift_expression ::= additive_expression | (shift_expression "<<" additive_expression) | (shift_expression ">>" additive_expression) ;
interface_declaration ::= attributes? interface_modifiers? "partial"? "interface" id type_parameter_list? interface_base? type_parameter_constraints_clauses? NL interface_body NL ;
using_statement ::= "using" "(" resource_acquisition ")" NL embedded_statement ;
input_parameter ::= type? id ;
attribute_arguments ::= "(" attribute_argument_list ")" ;
equals_local_variable_initializer ::= "=" local_variable_initializer ;
invocation_operator ::= "(" {argument ","}* ")" ;
 invocation_operator ::= "((" argument_list_or_key* "))" ;
indexer_declarator ::= type interface_type_dot? "this" "[" formal_parameter_list "]" ;
query_expression ::= from_clause IN query_body EX ;
binary_operator_declarator ::= type "operator" overloadable_binary_operator "(" type id ")" ;
anonymous_method_signature ::= "(" anonymous_method_parameter_list? ")" ;
rank_specifier ::= "[" ","* "]" ;
general_catch_clause ::= "catch" block NL ;
static_constructor_modifiers ::= ("extern"? "static") | ("static" "extern"?) ;
 static_constructor_modifiers ::= ("extern"? "unsafe"? "static") | ("unsafe"? "extern"? "static") | ("extern"? "static" "unsafe"?) | ("unsafe"? "static" "extern"?) | ("static" "extern"? "unsafe"?) | ("static" "unsafe"? "extern"?) ;
using_alias_directive ::= "using" id "=" namespace_or_type_name ";" NL ;
fixed_statement ::= "fixed" "(" pointer_type fixed_pointer_declarators ")" embedded_statement ;
anonymous_method_expression ::= "delegate" anonymous_method_signature? block ;
default_value_expression ::= "default" "(" type ")" ;
object_formals ::= "(" formal_parameter_list? ")" ;
inclusive_or_expression ::= exclusive_or_expression | (inclusive_or_expression "|" exclusive_or_expression) ;
add_accessor_declaration ::= attributes? "add" block NL ;
catch_clauses ::= specific_catch_clauses? general_catch_clause? ;
specific_catch_clause ::= "catch" "(" class_type id? ")" block NL ;
array_type ::= non_array_type rank_specifiers ;
operator_declaration ::= attributes? operator_modifiers? operator_declarator operator_body ;
constant_declaration ::= attributes? constant_modifiers? "const" type constant_declarators ";" NL ;
unchecked_statement ::= "unchecked" block NL ;
operator_body ::= (block NL) | (";" NL) ;
remove_accessor_declaration ::= attributes? "remove" block NL ;
anonymous_method_parameter ::= parameter_modifier? type id ;
null_coalescing_expression ::= conditional_or_expression | (conditional_or_expression "??" null_coalescing_expression) ;
lock_statement ::= "lock" "(" expression ")" NL embedded_statement ;
nullable_type ::= non_nullable_value_type "?" ;
interface_property_declaration ::= attributes? "new"? type id NL "{" NL IN interface_accessors EX "}" NL ;
throw_statement ::= "throw" expression? ";" NL ;
event_declaration ::= (attributes? event_modifiers? "event" type variable_declarators ";" NL) | (attributes? event_modifiers? "event" type member_name "{" NL IN event_accessor_declarations EX "}" NL EX) ;
enum_member_declaration ::= attributes? id equals_constant_expression? ;
stackalloc_initializer ::= "stackalloc" unmanaged_type "[" expression "]" ;
enum_base ::= ":" integral_type ;
dot_id_generic_dimension_specifier ::= "." id generic_dimension_specifier? ;
query_continuation ::= "into" item_name query_body ;
event_accessor_declarations ::= (add_accessor_declaration remove_accessor_declaration) | (remove_accessor_declaration add_accessor_declaration) ;
else_if_clause ::= "else" "if" "(" boolean_expression ")" nested_statement ;
parameter_array ::= attributes? "params" array_type id ;
constructor_constraint ::= "new" "(" ")" ;
attribute_section ::= "[" attribute_target_specifier? attribute_list ","? "]" ;
method_body ::= (block NL) | (";" NL) ;
pointer_indirection_expression ::= "*" unary_expression ;
set_accessor_declaration ::= attributes? accessor_modifier? "set" accessor_body ;
yield_statement ::= ("yield" "return" expression ";" NL) | ("yield" "break" ";" NL) ;
enum_declaration ::= attributes? enum_modifiers? "enum" id enum_base? enum_body NL ;
indexer_declaration ::= attributes? indexer_modifiers? indexer_declarator "{" NL IN accessor_declarations EX "}" NL ;
class_base ::= ":" class_and_interface_type_ist ;
item_name ::= type? simple_name ;
unbound_type_name ::= id colon_colon_id? generic_dimension_specifier? dot_id_generic_dimension_specifier* ;
else_clause ::= "else" nested_statement ;
interface_indexer_declaration ::= attributes? "new"? type "this" "[" formal_parameter_list "]" "{" NL IN interface_accessors EX "}" NL ;
class_declaration ::= attributes? class_modifiers? "partial"? "class" id type_parameter_list? class_base? type_parameter_constraints_clauses? NL class_body ;
accessor_declarations ::= (get_accessor_declaration set_accessor_declaration?) | (set_accessor_declaration get_accessor_declaration?) ;
primary_no_array_creation_expression ::= simple_primary_expression primary_expression_modifier* ;
 primary_no_array_creation_expression ::= sizeof_expression ;
using_namespace_directive ::= "using" namespace_name ";" NL ;
checked_expression ::= "checked" "(" expression ")" ;
break_statement ::= "break" ";" NL ;
qualified_alias_member ::= id "::" id type_argument_list? ;
qualified_identifier ::= id dot_id* ;
switch_label ::= ("case" constant_expression ":") | ("default" ":") ;
nested_statement ::= block | (IN NL embedded_statement EX) ;
switch_statement ::= "switch" "(" expression ")" switch_block ;
join_clause ::= "join" item_name "in" src_expr "on" key_expr "equals" key_expr into_item_name? ;
multiplicative_expression ::= unary_expression | (multiplicative_expression "*" unary_expression) | (multiplicative_expression "/" unary_expression) | (multiplicative_expression "%" unary_expression) ;
enum_body ::= "{" NL IN enum_member_declarations? ","? EX "}" ";"? NL ;
return_statement ::= "return" expression? ";" NL ;
equals_variable_initializer ::= "=" variable_initializer ;
fixed_pointer_declarator ::= id "=" fixed_pointer_initializer ;
constructor_initializer ::= (":" "base" "(" argument_list? ")") | (":" "this" "(" argument_list? ")") ;
method_declaration ::= method_header NL method_body NL ;
object_or_delegate_creation_expression ::= "new" type "(" argument_list? ")" ;
type_parameter_list ::= "<" type_parameters ">" ;
into_item_name ::= "into" item_name ;
interface_base ::= ":" interface_type_list ;
unsafe_statement ::= "unsafe" block ;
object_initializer_expression ::= "new" array_type? object_formals? rank_specifiers? object_initializer ;
let_clause ::= "let" item_name "=" sel_expr ;
array_creation_expression ::= ("new" non_array_type "[" expression_list "]" rank_specifiers? array_initializer?) | ("new" array_type array_initializer) ;
select_clause ::= "select" sel_expr ;
extern_alias_directives ::= extern_alias_directive+ NL ;
struct_declaration ::= attributes? struct_modifiers? "partial"? "struct" id type_parameter_list? struct_interfaces? type_parameter_constraints_clauses? NL struct_body NL ;
property_declaration ::= NL attributes? property_modifiers? type member_name "{" NL IN accessor_declarations EX "}" NL ;
member_name ::= interface_type_dot? id ;
lambda_expression ::= (input_parameters "=>" expression) | (input_parameters "=>" block) ;
interface_type_dot ::= interface_type "." ;
class_body ::= "{" NL IN class_member_declarations? EX "}" ";"? NL ;
namespace_body ::= "{" NL IN extern_alias_directives? using_directives? namespace_member_declarations? EX "}" ";"? NL ;
typeof_expression ::= ("typeof" "(" type ")") | ("typeof" "(" unbound_type_name ")") | ("typeof" "(" "void" ")") | ("typeof" "(" ")") ;
struct_interfaces ::= ":" interface_type_list ;
named_argument ::= id "=" attribute_argument_expression ;
conversion_operator_declarator ::= ("implicit" "operator" type "(" type id ")") | ("explicit" "operator" type "(" type id ")") ;
and_expression ::= equality_expression | (and_expression "&" equality_expression) ;
local_variable_declarator ::= id equals_local_variable_initializer? ;
--------------------cs::csharp-ecma-334-1.bgf--------------------
accessor-declarations ::= (get-accessor-declaration set-accessor-declaration?) | (set-accessor-declaration get-accessor-declaration?) ;
relational-expression ::= shift-expression | (relational-expression "<" shift-expression) | (relational-expression ">" shift-expression) | (relational-expression "<=" shift-expression) | (relational-expression ">=" shift-expression) | (relational-expression "is" type) | (relational-expression "as" type) ;
delegate-creation-expression ::= "new" delegate-type "(" expression ")" ;
global-attribute-target-specifier ::= global-attribute-target ":" ;
pre-decrement-expression ::= "--" unary-expression ;
constant-declarator ::= identifier "=" constant-expression ;
method-header ::= attributes? method-modifiers? return-type member-name "(" formal-parameter-list? ")" ;
finally-clause ::= "finally" block ;
interface-member-declarations ::= interface-member-declaration | (interface-member-declarations interface-member-declaration) ;
member-access ::= (primary-expression "." identifier) | (predefined-type "." identifier) ;
unary-expression ::= primary-expression | ("+" unary-expression) | ("-" unary-expression) | ("!" unary-expression) | ("~" unary-expression) | ("*" unary-expression) | pre-increment-expression | pre-decrement-expression | cast-expression ;
invocation-expression ::= primary-expression "(" argument-list? ")" ;
local-constant-declaration ::= "const" type constant-declarators ;
enum-body ::= ("{" enum-member-declarations? "}") | ("{" enum-member-declarations "," "}") ;
using-directives ::= using-directive | (using-directives using-directive) ;
interface-modifiers ::= interface-modifier | (interface-modifiers interface-modifier) ;
interface-declaration ::= attributes? interface-modifiers? "interface" identifier interface-base? interface-body ";"? ;
cast-expression ::= "(" type ")" unary-expression ;
interface-base ::= ":" interface-type-list ;
constructor-declarator ::= identifier "(" formal-parameter-list? ")" constructor-initializer? ;
fixed-parameters ::= fixed-parameter | (fixed-parameters "," fixed-parameter) ;
formal-parameter-list ::= fixed-parameters | (fixed-parameters "," parameter-array) | parameter-array ;
base-access ::= ("base" "." identifier) | ("base" "[" expression-list "]") ;
member-name ::= identifier | (interface-type "." identifier) ;
try-statement ::= ("try" block catch-clauses) | ("try" block finally-clause) | ("try" block catch-clauses finally-clause) ;
declaration-statement ::= (local-variable-declaration ";") | (local-constant-declaration ";") ;
variable-initializer-list ::= variable-initializer | (variable-initializer-list "," variable-initializer) ;
class-body ::= "{" class-member-declarations? "}" ;
unchecked-expression ::= "unchecked" "(" expression ")" ;
namespace-body ::= "{" using-directives? namespace-member-declarations? "}" ;
exclusive-or-expression ::= and-expression | (exclusive-or-expression "^" and-expression) ;
while-statement ::= "while" "(" boolean-expression ")" embedded-statement ;
catch-clauses ::= (specific-catch-clauses general-catch-clause?) | (specific-catch-clauses? general-catch-clause) ;
array-creation-expression ::= ("new" non-array-type "[" expression-list "]" rank-specifiers? array-initializer?) | ("new" array-type array-initializer) ;
named-argument ::= identifier "=" attribute-argument-expression ;
operator-declaration ::= attributes? operator-modifiers operator-declarator operator-body ;
constant-declaration ::= attributes? constant-modifiers? "const" type constant-declarators ";" ;
assignment ::= unary-expression assignment-operator expression ;
local-variable-declaration ::= type local-variable-declarators ;
continue-statement ::= "continue" ";" ;
checked-statement ::= "checked" block ;
using-alias-directive ::= "using" identifier "=" namespace-or-type-name ";" ;
static-constructor-declaration ::= attributes? static-constructor-modifiers identifier "(" ")" static-constructor-body ;
event-declaration ::= (attributes? event-modifiers? "event" type variable-declarators ";") | (attributes? event-modifiers? "event" type member-name "{" event-accessor-declarations) | "}" ;
conversion-operator-declarator ::= ("implicit" "operator" type "(" type identifier ")") | ("explicit" "operator" type "(" type identifier ")") ;
shift-expression ::= additive-expression | (shift-expression "<<" additive-expression) | (shift-expression ">>" additive-expression) ;
post-increment-expression ::= primary-expression "++" ;
enum-member-declarations ::= enum-member-declaration | (enum-member-declarations "," enum-member-declaration) ;
local-variable-declarator ::= identifier | (identifier "=" local-variable-initializer) ;
if-statement ::= ("if" "(" boolean-expression ")" embedded-statement) | ("if" "(" boolean-expression ")" embedded-statement "else" embedded-statement) ;
indexer-declarator ::= (type "this" "[" formal-parameter-list "]") | (type interface-type "." "this" "[" formal-parameter-list "]") ;
interface-type-list ::= interface-type | (interface-type-list "," interface-type) ;
argument ::= expression | ("ref" variable-reference) | ("out" variable-reference) ;
conditional-or-expression ::= conditional-and-expression | (conditional-or-expression "||" conditional-and-expression) ;
constant-declarators ::= constant-declarator | (constant-declarators "," constant-declarator) ;
switch-labels ::= switch-label | (switch-labels switch-label) ;
object-creation-expression ::= "new" type "(" argument-list? ")" ;
class-member-declarations ::= class-member-declaration | (class-member-declarations class-member-declaration) ;
interface-body ::= "{" interface-member-declarations? "}" ;
rank-specifiers ::= rank-specifier | (rank-specifiers rank-specifier) ;
positional-argument-list ::= positional-argument | (positional-argument-list "," positional-argument) ;
labeled-statement ::= identifier ":" statement ;
attribute-section ::= ("[" attribute-target-specifier? attribute-list "]") | ("[" attribute-target-specifier? attribute-list "," "]") ;
switch-block ::= "{" switch-sections? "}" ;
local-variable-declarators ::= local-variable-declarator | (local-variable-declarators "," local-variable-declarator) ;
expression-list ::= expression | (expression-list "," expression) ;
enum-modifiers ::= enum-modifier | (enum-modifiers enum-modifier) ;
enum-declaration ::= attributes? enum-modifiers? "enum" identifier enum-base? enum-body ";"? ;
argument-list ::= argument | (argument-list "," argument) ;
do-statement ::= "do" embedded-statement "while" "(" boolean-expression ")" ";" ;
indexer-declaration ::= attributes? indexer-modifiers? indexer-declarator "{" accessor-declarations "}" ;
foreach-statement ::= "foreach" "(" type identifier "in" expression ")" embedded-statement ;
global-attribute-sections ::= global-attribute-section | (global-attribute-sections global-attribute-section) ;
switch-sections ::= switch-section | (switch-sections switch-section) ;
destructor-declaration ::= attributes? "extern"? "~" identifier "(" ")" destructor-body ;
class-declaration ::= attributes? class-modifiers? "class" identifier class-base? class-body ";"? ;
interface-method-declaration ::= attributes? "new"? return-type identifier "(" formal-parameter-list? ")" ";" ;
inclusive-or-expression ::= exclusive-or-expression | (inclusive-or-expression "|" exclusive-or-expression) ;
add-accessor-declaration ::= attributes? "add" block ;
pre-increment-expression ::= "++" unary-expression ;
remove-accessor-declaration ::= attributes? "remove" block ;
attribute ::= attribute-name attribute-arguments? ;
struct-body ::= "{" struct-member-declarations? "}" ;
interface-property-declaration ::= attributes? "new"? type identifier "{" interface-accessors "}" ;
struct-member-declarations ::= struct-member-declaration | (struct-member-declarations struct-member-declaration) ;
using-namespace-directive ::= "using" namespace-name ";" ;
attribute-target-specifier ::= attribute-target ":" ;
operator-modifiers ::= operator-modifier | (operator-modifiers operator-modifier) ;
constant-modifiers ::= constant-modifier | (constant-modifiers constant-modifier) ;
dim-separators ::= "," | (dim-separators ",") ;
variable-declarators ::= variable-declarator | (variable-declarators "," variable-declarator) ;
fixed-parameter ::= attributes? parameter-modifier? type identifier ;
method-modifiers ::= method-modifier | (method-modifiers method-modifier) ;
constructor-initializer ::= (":" "base" "(" argument-list? ")") | (":" "this" "(" argument-list? ")") ;
method-declaration ::= method-header method-body ;
block ::= "{" statement-list? "}" ;
general-catch-clause ::= "catch" block ;
goto-statement ::= ("goto" identifier ";") | ("goto" "case" constant-expression ";") | ("goto" "default" ";") ;
struct-modifiers ::= struct-modifier | (struct-modifiers struct-modifier) ;
property-modifiers ::= property-modifier | (property-modifiers property-modifier) ;
struct-declaration ::= attributes? struct-modifiers? "struct" identifier struct-interfaces? struct-body ";"? ;
property-declaration ::= attributes? property-modifiers? type member-name "{" accessor-declarations "}" ;
set-accessor-declaration ::= attributes? "set" accessor-body ;
checked-expression ::= "checked" "(" expression ")" ;
specific-catch-clause ::= "catch" "(" class-type identifier? ")" block ;
expression-statement ::= statement-expression ";" ;
qualified-identifier ::= identifier | (qualified-identifier "." identifier) ;
interface-accessors ::= (attributes? "get" ";") | (attributes? "set" ";") | (attributes? "get" ";" attributes? "set" ";") | (attributes? "set" ";" attributes? "get" ";") ;
specific-catch-clauses ::= specific-catch-clause | (specific-catch-clauses specific-catch-clause) ;
conditional-and-expression ::= inclusive-or-expression | (conditional-and-expression "&&" inclusive-or-expression) ;
multiplicative-expression ::= unary-expression | (multiplicative-expression "*" unary-expression) | (multiplicative-expression "/" unary-expression) | (multiplicative-expression "%" unary-expression) ;
array-initializer ::= ("{" variable-initializer-list? "}") | ("{" variable-initializer-list "," "}") ;
for-statement ::= "for" "(" for-initializer? ";" for-condition? ";" for-iterator? ")" embedded-statement ;
constructor-modifiers ::= constructor-modifier | (constructor-modifiers constructor-modifier) ;
field-modifiers ::= field-modifier | (field-modifiers field-modifier) ;
class-modifiers ::= class-modifier | (class-modifiers class-modifier) ;
using-statement ::= "using" "(" resource-acquisition ")" embedded-statement ;
attribute-arguments ::= ("(" positional-argument-list? ")") | ("(" positional-argument-list "," named-argument-list ")") | ("(" named-argument-list ")") ;
rank-specifier ::= "[" dim-separators? "]" ;
unary-operator-declarator ::= type "operator" overloadable-unary-operator "(" type identifier ")" ;
statement-expression-list ::= statement-expression | (statement-expression-list "," statement-expression) ;
element-access ::= primary-no-array-creation-expression "[" expression-list "]" ;
typeof-expression ::= ("typeof" "(" type ")") | ("typeof" "(" "void" ")") ;
struct-interfaces ::= ":" interface-type-list ;
unchecked-statement ::= "unchecked" block ;
compilation-unit ::= using-directives? global-attributes? namespace-member-declarations? ;
and-expression ::= equality-expression | (and-expression "&" equality-expression) ;
lock-statement ::= "lock" "(" expression ")" embedded-statement ;
switch-section ::= switch-labels statement-list ;
equality-expression ::= relational-expression | (equality-expression "==" relational-expression) | (equality-expression "!=" relational-expression) ;
static-constructor-modifiers ::= ("extern"? "static") | ("static" "extern"?) ;
parenthesized-expression ::= "(" expression ")" ;
throw-statement ::= "throw" expression? ";" ;
attribute-sections ::= attribute-section | (attribute-sections attribute-section) ;
conditional-expression ::= conditional-or-expression | (conditional-or-expression "?" expression ":" expression) ;
statement-list ::= statement | (statement-list statement) ;
additive-expression ::= multiplicative-expression | (additive-expression "+" multiplicative-expression) | (additive-expression "-" multiplicative-expression) ;
parameter-array ::= attributes? "params" array-type identifier ;
delegate-modifiers ::= delegate-modifier | (delegate-modifiers delegate-modifier) ;
interface-event-declaration ::= attributes? "new"? "event" type identifier ";" ;
delegate-declaration ::= attributes? delegate-modifiers? "delegate" type identifier "(" formal-parameter-list? ")" ";" ;
attribute-list ::= attribute | (attribute-list "," attribute) ;
indexer-modifiers ::= indexer-modifier | (indexer-modifiers indexer-modifier) ;
binary-operator-declarator ::= type "operator" overloadable-binary-operator "(" type identifier "," type identifier ")" ;
array-type ::= non-array-type rank-specifiers ;
field-declaration ::= attributes? field-modifiers? type variable-declarators ";" ;
constructor-declaration ::= attributes? constructor-modifiers? constructor-declarator constructor-body ;
variable-declarator ::= identifier | (identifier "=" variable-initializer) ;
break-statement ::= "break" ";" ;
post-decrement-expression ::= primary-expression "--" ;
enum-base ::= ":" integral-type ;
switch-label ::= ("case" constant-expression ":") | ("default" ":") ;
named-argument-list ::= named-argument | (named-argument-list "," named-argument) ;
namespace-member-declarations ::= namespace-member-declaration | (namespace-member-declarations namespace-member-declaration) ;
interface-indexer-declaration ::= attributes? "new"? type "this" "[" formal-parameter-list "]" "{" interface-accessors "}" ;
switch-statement ::= "switch" "(" expression ")" switch-block ;
enum-member-declaration ::= (attributes? identifier) | (attributes? identifier "=" constant-expression) ;
return-statement ::= "return" expression? ";" ;
event-accessor-declarations ::= (add-accessor-declaration remove-accessor-declaration) | (remove-accessor-declaration add-accessor-declaration) ;
get-accessor-declaration ::= attributes? "get" accessor-body ;
global-attribute-section ::= ("[" global-attribute-target-specifier attribute-list "]") | ("[" global-attribute-target-specifier attribute-list "," "]") ;
event-modifiers ::= event-modifier | (event-modifiers event-modifier) ;
namespace-declaration ::= "namespace" qualified-identifier namespace-body ";"? ;
class-base ::= (":" class-type) | (":" interface-type-list) | (":" class-type "," interface-type-list) ;
namespace-or-type-name ::= identifier | (namespace-or-type-name "." identifier) ;
--------------------dart::spec-0.01.bgf--------------------
mapLiteralEntry ::= (identifier ":" expression) | (stringLiteral ":" expression) ;
scriptDefinition ::= scriptTag? libraryName? libraryImport* include* resource* topLevelDefinition* ;
argumentList ::= (namedArgument ("," namedArgument)*) | (expressionList ("," namedArgument)*) ;
constantObjectExpression ::= "const" type ("." identifier)? arguments ;
declaration ::= (constantConstructorSignature (redirection | initializers)?) | (constructorSignature (redirection | initializers)?) | (functionSignature redirection) | (namedConstructorSignature redirection) | ("abstract" getterSignature) | ("abstract" setterSignature) | ("abstract" operatorSignature) | ("abstract" functionSignature) | ("static" "final" type? staticFinalDeclarationList) | ("static"? initializedVariableDeclaration) ;
setterSignature ::= "static"? returnType? "set" identifier formalParameterList ;
defaultFormalParameter ::= normalFormalParameter ("=" expression)? ;
typeList ::= type ("," type)* ;
HEX_DIGIT_SEQUENCE ::= HEX_DIGIT HEX_DIGIT? HEX_DIGIT? HEX_DIGIT? HEX_DIGIT? HEX_DIGIT? HEX_DIGIT? ;
label ::= identifier ":" ;
tryStatement ::= "try" block (catchPart+ finallyPart?) | finallyPart ;
operatorSignature ::= returnType? "operator" operator formalParameterList ;
STRING_CONTENT_SQ ::= α | ("\" α) | STRING_INTERPOLATION ;
staticFinalDeclarationList ::= staticFinalDeclaration ("," staticFinalDeclaration)* ;
statement ::= label* nonLabelledStatement ;
libraryDefinition ::= scriptTag? libraryName libraryImport* include* resource* topLevelDefinition* ;
isOperator ::= "is" "!"? ;
finalVarOrType ::= ("final" type?) | "var" | type ;
postfixExpression ::= (assignableExpression postfixOperator) | (primary selector*) ;
getterSignature ::= "static"? returnType? "get" identifier formalParameterList ;
interfaceDefinition ::= "interface" identifier typeParameters? superinterfaces? factorySpecification? "{" interfaceMemberDefinition* "}" ;
classDefinition ::= "class" identifier typeParameters? superclass? interfaces? "{" classMemberDefinition* "}" ;
initializedVariableDeclaration ::= declaredIdentifier ("=" expression)? ("," initializedIdentifier)* ;
compilationUnit ::= topLevelDefinition* EOF ;
libraryName ::= "#" "library" "(" stringLiteral ")" ";" ;
interfaceMemberDefinition ::= ("static" "final" type? initializedIdentifierList ";") | (functionSignature ";") | (constantConstructorSignature ";") | (namedConstructorSignature ";") | (getterSignature ";") | (setterSignature ";") | (operatorSignature ";") | (variableDeclaration ";") ;
IDENTIFIER_NO_DOLLAR ::= IDENTIFIER_START_NO_DOLLAR IDENTIFIER_PART_NO_DOLLAR* ;
superCallOrFieldInitializer ::= ("super" arguments) | ("super" "." identifier arguments) | fieldInitializer ;
topLevelDefinition ::= classDefinition | interfaceDefinition | functionTypeAlias | (functionSignature functionBody) | (returnType? getOrSet identifier formalParameterList functionBody) | ("final" type? staticFinalDeclarationList ";") | (variableDeclaration ";") ;
stringLiteral ::= ("@"? MULTI_LINE_STRING) | SINGLE_LINE_STRING ;
constructorSignature ::= (identifier formalParameterList) | namedConstructorSignature ;
variableDeclaration ::= declaredIdentifier ("," identifier)* ;
superclass ::= "extends" type ;
initializedIdentifierList ::= initializedIdentifier ("," initializedIdentifier)* ;
MULTI_LINE_COMMENT ::= "/*" α* ;
interfaces ::= "implements" typeList ;
newExpression ::= "new" type ("." identifier)? arguments ;
methodSignature ::= factoryConstructorSignature | ("static" functionSignature) | getterSignature | setterSignature | operatorSignature | (functionSignature initializers?) | (namedConstructorSignature initializers?) ;
STRING_INTERPOLATION ::= ("$" IDENTIFIER_NO_DOLLAR) | ("$" "{" expression "}") ;
arguments ::= "(" argumentList? ")" ;
expressionList ::= expression ("," expression)* ;
forLoopParts ::= (forInitializerStatement expression? ";" expressionList?) | (declaredIdentifier "in" expression) | (identifier "in" expression) ;
ifStatement ::= "if" "(" expression ")" statement ("else" statement)? ;
functionExpressionBody ::= ("=>" expression) | block ;
initializers ::= ":" superCallOrFieldInitializer ("," superCallOrFieldInitializer)* ;
scriptTag ::= "#!" α* NEWLINE ;
catchPart ::= "catch" "(" declaredIndentifier ("," declaredIndentifier)? ")" block ;
nonLabelledStatement ::= block | (initializedVariableDeclaration ";") | forStatement | whileStatement | doStatement | switchStatement | ifStatement | tryStatement | breakStatement | continueStatement | returnStatement | throwStatement | expressionStatement | assertStatement | (functionSignature functionBody) ;
prefixExpression ::= prefixOperator unaryExpression ;
assertStatement ::= "assert" "(" conditionalExpression ")" ";" ;
NUMBER ::= (DIGIT+ ("." DIGIT*)? EXPONENT?) | ("." DIGIT+ EXPONENT?) ;
assignableSelector ::= ("[" expression "]") | ("." identifier) ;
logicalAndExpression ::= bitwiseOrExpression ("&&" bitwiseOrExpression)* ;
SINGLE_LINE_STRING ::= (""" STRING_CONTENT_DQ* """) | ("'" STRING_CONTENT_SQ* "'") | ("@" "'" α* "'") | ("@" """ α* """) ;
typeParameters ::= "<" typeParameter ("," typeParameter)* ">" ;
assignableExpression ::= (primary (arguments* assignableSelector)+) | ("super" assignableSelector) | identifier ;
libraryImport ::= "#" "import" "(" stringLiteral ("," "prefix:" stringLiteral)? ")" ";" ;
normalFormalParameters ::= normalFormalParameter ("," normalFormalParameter)* ;
functionSignature ::= returnType? identifier formalParameterList ;
ESCAPE_SEQUENCE ::= ("\" "n") | ("\" "r") | ("\" "f") | ("\" "b") | ("\" "t") | ("\" "v") | ("\" "x" HEX_DIGIT HEX_DIGIT) | ("\" "u" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT) | ("\" "u") ;
functionTypeAlias ::= "typedef" functionPrefix typeParameters? formalParameterList ";" ;
whileStatement ::= "while" "(" expression ")" statement ;
conditionalExpression ::= logicalOrExpression ("?" expression ":" expression)? ;
typeArguments ::= "<" typeList ">" ;
type ::= qualified typeArguments? ;
shiftExpression ::= (additiveExpression (shiftOperator additiveExpression)*) | ("super" (shiftOperator additiveExpression)+) ;
formalParameterList ::= ("(" ")") | ("(" normalFormalParameters ("," namedFormalParameters)? ")") | namedFormalParameters ;
expressionStatement ::= expression? ";" ;
namedConstructorSignature ::= identifier "." identifier formalParameterList ;
mapLiteral ::= "const"? typeArguments? "{" (mapLiteralEntry ("," mapLiteralEntry)* ","?)? "}" ;
equalityExpression ::= (relationalExpression (equalityOperator relationalExpression)?) | ("super" equalityOperator relationalExpression) ;
staticFinalDeclaration ::= identifier "=" expression ;
listLiteral ::= "const"? typeArguments? "[" (expressionList ","?)? "]" ;
breakStatement ::= "break" identifier? ";" ;
EXPONENT ::= "e" | "E" ("+" | "-")? DIGIT+ ;
bitwiseOrExpression ::= (bitwiseXorExpression ("|" bitwiseXorExpression)*) | ("super" ("|" bitwiseXorExpression)+) ;
redirection ::= ":" "this" ("." identifier)? arguments ;
throwStatement ::= "throw" expression? ";" ;
IDENTIFIER ::= IDENTIFIER_START IDENTIFIER_PART* ;
include ::= "#" "source" "(" stringLiteral ")" ";" ;
unaryExpression ::= prefixExpression | postfixExpression | (unaryOperator "super") | ("-" "super") | (incrementOperator assignableExpression) ;
forStatement ::= "for" "(" forLoopParts ")" statement ;
classMemberDefinition ::= (declaration ";") | (methodSignature functionBody) ;
doStatement ::= "do" statement "while" "(" expression ")" ";" ;
bitwiseXorExpression ::= (bitwiseAndExpression ("^" bitwiseAndExpression)*) | ("super" ("^" bitwiseAndExpression)+) ;
constantConstructorSignature ::= "const" qualified formalParameterList ;
STRING_CONTENT_DQ ::= α | ("\" α) | STRING_INTERPOLATION ;
fieldFormalParameter ::= finalVarOrType? "this" "." identifier ;
returnStatement ::= "return" expression? ";" ;
relationalExpression ::= (shiftExpression ((isOperator type) | (relationalOperator shiftExpression))?) | ("super" relationalOperator shiftExpression) ;
bitwiseAndExpression ::= (equalityExpression ("&" equalityExpression)*) | ("super" ("&" equalityExpression)+) ;
initializedIdentifier ::= identifier ("=" expression)? ;
qualified ::= identifier ("." identifier)? ;
compoundAssignmentOperator ::= "*=" | "/=" | "~/=" | "%=" | "+=" | "-=" | "<<=" | (">" ">" ">" "="?) | ("<" "<" "="?) | "&=" | "^=" | "|=" ;
switchStatement ::= "switch" "(" expression ")" "{" switchCase* defaultCase? "}" ;
functionBody ::= ("=>" expression ";") | block ;
factorySpecification ::= "factory" identifier typeParameters? ;
expression ::= (assignableExpression assignmentOperator expression) | conditionalExpression ;
finallyPart ::= "finally" block ;
forInitializerStatement ::= (initializedVariableDeclaration ";") | (expression? ";") ;
MULTI_LINE_STRING ::= (""""" α* """"") | ("'''" α* "'''") ;
namedArgument ::= label expression ;
superinterfaces ::= "extends" typeList ;
namedFormalParameters ::= "[" defaultFormalParameter ("," defaultFormalParameter)* "]" ;
defaultCase ::= label? ("case" expression ":")* "default" ":" statements ;
functionExpression ::= (returnType? identifier)? formalParameterList functionExpressionBody ;
typeParameter ::= identifier ("extends" type)? ;
resource ::= "#" "resource" "(" stringLiteral ")" ";" ;
multiplicativeExpression ::= (unaryExpression (multiplicativeOperator unaryExpression)*) | ("super" (multiplicativeOperator unaryExpression)+) ;
HEX_NUMBER ::= ("0x" HEX_DIGIT+) | ("0X" HEX_DIGIT+) ;
block ::= "{" statements "}" ;
SINGLE_LINE_COMMENT ::= "//" α* NEWLINE? ;
functionPrefix ::= returnType? identifier ;
continueStatement ::= "continue" identifier? ";" ;
factoryConstructorSignature ::= "factory" qualified typeVariables? ("." identifier)? formalParameterList ;
fieldInitializer ::= ("this" ".")? identifier "=" conditionalExpression ;
switchCase ::= label? ("case" expression ":")+ statements ;
additiveExpression ::= (multiplicativeExpression (additiveOperator multiplicativeExpression)*) | ("super" (additiveOperator multiplicativeExpression)+) ;
logicalOrExpression ::= logicalAndExpression ("||" logicalAndExpression)* ;
declaredIdentifier ::= finalVarOrType identifier ;
primary ::= thisExpression | ("super" assignableSelector) | functionExpression | literal | identifier | (newExpression constantObjectExpression) | ("(" expression ")") ;
--------------------dart::google.bgf--------------------
mapLiteralEntry ::= STRING ":" expression ;
libraryBody ::= libraryImport? librarySource? ;
userDefinableOperator ::= multiplicativeOperator | additiveOperator | shiftOperator | relationalOperator | bitwiseOperator | "==" | "~" | NEGATE | ("[" "]") | ("[" "]" "=") ;
argumentList ::= (namedArgument ("," namedArgument)*) | (expressionList ("," namedArgument)*) ;
constInitializedIdentifier ::= identifier ("=" constantExpression)? ;
declaration ::= (constantConstructorDeclaration (redirection | initializers)?) | (functionDeclaration redirection) | (namedConstructorDeclaration redirection) | (ABSTRACT specialSignatureDefinition) | (ABSTRACT functionDeclaration) | (STATIC FINAL type? staticFinalDeclarationList) | (STATIC? constInitializedVariableDeclaration) ;
defaultFormalParameter ::= normalFormalParameter ("=" constantExpression)? ;
typeList ::= type ("," type)* ;
tryStatement ::= TRY block (catchPart+ finallyPart?) | finallyPart ;
label ::= identifier ":" ;
STRING_CONTENT_SQ ::= α | ("\\" α) ;
staticFinalDeclarationList ::= staticFinalDeclaration ("," staticFinalDeclaration)* ;
statement ::= label* nonLabelledStatement ;
libraryDefinition ::= LIBRARY "{" libraryBody "}" ;
isOperator ::= IS "!"? ;
finalVarOrType ::= (FINAL type?) | VAR | type ;
postfixExpression ::= (assignableExpression postfixOperator) | (primary selector*) ;
interfaceDefinition ::= INTERFACE identifier typeParameters? superinterfaces? factorySpecification? "{" interfaceMemberDefinition* "}" ;
classDefinition ::= (CLASS identifier typeParameters? superclass? interfaces? "{" classMemberDefinition* "}") | (CLASS identifier typeParameters? interfaces? NATIVE STRING "{" classMemberDefinition* "}") ;
initializedVariableDeclaration ::= declaredIdentifier ("=" expression)? ("," initializedIdentifier)* ;
compilationUnit ::= HASHBANG? directive* topLevelDefinition* EOF ;
interfaceMemberDefinition ::= (STATIC FINAL type? initializedIdentifierList ";") | (functionDeclaration ";") | (constantConstructorDeclaration ";") | (namedConstructorDeclaration ";") | (specialSignatureDefinition ";") | (variableDeclaration ";") ;
superCallOrFieldInitializer ::= (SUPER arguments) | (SUPER "." identifier arguments) | fieldInitializer ;
constantConstructorDeclaration ::= CONST qualified formalParameterList ;
IDENTIFIER_NO_DOLLAR ::= IDENTIFIER_START_NO_DOLLAR IDENTIFIER_PART_NO_DOLLAR* ;
topLevelDefinition ::= classDefinition | interfaceDefinition | functionTypeAlias | (functionDeclaration functionBodyOrNative) | (returnType? getOrSet identifier formalParameterList functionBodyOrNative) | (FINAL type? staticFinalDeclarationList ";") | (constInitializedVariableDeclaration ";") ;
primaryNoFE ::= THIS | (SUPER assignableSelector) | literal | identifier | (CONST? typeArguments? compoundLiteral) | (NEW | CONST type ("." identifier)? arguments) | expressionInParentheses ;
libraryUnit ::= libraryDefinition EOF ;
variableDeclaration ::= declaredIdentifier ("," identifier)* ;
superclass ::= EXTENDS type ;
initializedIdentifierList ::= initializedIdentifier ("," initializedIdentifier)* ;
interfaces ::= IMPLEMENTS typeList ;
methodDeclaration ::= factoryConstructorDeclaration | (STATIC functionDeclaration) | specialSignatureDefinition | (functionDeclaration initializers?) | (namedConstructorDeclaration initializers?) ;
arguments ::= "(" argumentList? ")" ;
expressionList ::= expression ("," expression)* ;
forLoopParts ::= (forInitializerStatement expression? ";" expressionList?) | (declaredIdentifier IN expression) | (identifier IN expression) ;
functionExpressionBody ::= ("=>" expression) | block ;
initializers ::= ":" superCallOrFieldInitializer ("," superCallOrFieldInitializer)* ;
directive ::= "#" identifier arguments ";" ;
catchPart ::= CATCH "(" declaredIdentifier ("," declaredIdentifier)? ")" block ;
nonLabelledStatement ::= block | (initializedVariableDeclaration ";") | iterationStatement | selectionStatement | tryStatement | (BREAK identifier? ";") | (CONTINUE identifier? ";") | (RETURN expression? ";") | (THROW expression? ";") | (expression? ";") | (ASSERT "(" conditionalExpression ")" ";") | (functionDeclaration functionBody) ;
factoryConstructorDeclaration ::= FACTORY qualified typeParameters? ("." identifier)? formalParameterList ;
NUMBER ::= (DIGIT+ NUMBER_OPT_FRACTIONAL_PART EXPONENT? NUMBER_OPT_ILLEGAL_END) | ("." DIGIT+ EXPONENT? NUMBER_OPT_ILLEGAL_END) ;
assignableSelector ::= ("[" expression "]") | ("." identifier) ;
logicalAndExpression ::= bitwiseOrExpression ("&&" bitwiseOrExpression)* ;
HASHBANG ::= "#!" α* NEWLINE? ;
SINGLE_LINE_STRING ::= (""" STRING_CONTENT_DQ* """) | ("\'" STRING_CONTENT_SQ* "\'") | ("@" "\'" α* "\'") | ("@" """ α* """) ;
typeParameters ::= "<" typeParameter ("," typeParameter)* ">" ;
selectionStatement ::= (IF "(" expression ")" statement (ELSE statement)?) | (SWITCH "(" expression ")" "{" switchCase* defaultCase? "}") ;
assignableExpression ::= (primary (arguments* assignableSelector)+) | (SUPER assignableSelector) | identifier ;
libraryImport ::= IMPORT "=" "[" importReferences? "]" ;
functionTypeAlias ::= TYPEDEF functionPrefix typeParameters? formalParameterList ";" ;
conditionalExpression ::= logicalOrExpression ("?" expression ":" expression)? ;
expressionInParentheses ::= "(" expression ")" ;
typeArguments ::= "<" typeList ">" ;
shiftExpression ::= (additiveExpression (shiftOperator additiveExpression)*) | (SUPER (shiftOperator additiveExpression)+) ;
type ::= qualified typeArguments? ;
namedConstructorDeclaration ::= identifier "." identifier formalParameterList ;
formalParameterList ::= ("(" namedFormalParameters? ")") | ("(" normalFormalParameter normalFormalParameterTail? ")") ;
librarySource ::= SOURCE "=" "[" sourceUrls? "]" ;
mapLiteral ::= "{" (mapLiteralEntry ("," mapLiteralEntry)* ","?)? "}" ;
staticFinalDeclaration ::= identifier "=" constantExpression ;
specialSignatureDefinition ::= (STATIC? returnType? getOrSet identifier formalParameterList) | (returnType? OPERATOR userDefinableOperator formalParameterList) ;
equalityExpression ::= (relationalExpression (equalityOperator relationalExpression)?) | (SUPER equalityOperator relationalExpression) ;
listLiteral ::= "[" (expressionList ","?)? "]" ;
EXPONENT ::= "e" | "E" ("+" | "-")? DIGIT+ ;
constInitializedVariableDeclaration ::= declaredIdentifier ("=" constantExpression)? ("," constInitializedIdentifier)* ;
redirection ::= ":" THIS ("." identifier)? arguments ;
bitwiseOrExpression ::= (bitwiseXorExpression ("|" bitwiseXorExpression)*) | (SUPER ("|" bitwiseXorExpression)+) ;
IDENTIFIER ::= IDENTIFIER_START IDENTIFIER_PART* ;
unaryExpression ::= postfixExpression | (prefixOperator unaryExpression) | (negateOperator SUPER) | ("-" SUPER) | (incrementOperator assignableExpression) ;
importReference ::= (IDENTIFIER ":")? STRING ;
classMemberDefinition ::= (declaration ";") | (constructorDeclaration ";") | (methodDeclaration functionBodyOrNative) | (CONST factoryConstructorDeclaration functionNative) ;
NUMBER_OPT_FRACTIONAL_PART ::= ("." DIGIT+) | ε ;
bitwiseXorExpression ::= (bitwiseAndExpression ("^" bitwiseAndExpression)*) | (SUPER ("^" bitwiseAndExpression)+) ;
STRING_CONTENT_DQ ::= α | ("\\" α) ;
constructorDeclaration ::= (identifier formalParameterList (redirection | initializers)?) | (namedConstructorDeclaration (redirection | initializers)?) ;
fieldFormalParameter ::= finalVarOrType? THIS "." identifier ;
sourceUrls ::= STRING ("," STRING)* ","? ;
relationalExpression ::= (shiftExpression ((isOperator type) | (relationalOperator shiftExpression))?) | (SUPER relationalOperator shiftExpression) ;
bitwiseAndExpression ::= (equalityExpression ("&" equalityExpression)*) | (SUPER ("&" equalityExpression)+) ;
initializedIdentifier ::= identifier ("=" expression)? ;
qualified ::= identifier ("." identifier)? ;
functionBody ::= ("=>" expression ";") | block ;
factorySpecification ::= FACTORY type ;
expression ::= (assignableExpression assignmentOperator expression) | conditionalExpression ;
MULTI_LINE_STRING ::= (""""" α* """"") | ("\'\'\'" α* "\'\'\'") ;
forInitializerStatement ::= (initializedVariableDeclaration ";") | (expression? ";") ;
finallyPart ::= FINALLY block ;
namedArgument ::= label expression ;
superinterfaces ::= EXTENDS typeList ;
functionBodyOrNative ::= (NATIVE functionBody) | functionNative | functionBody ;
iterationStatement ::= (WHILE "(" expression ")" statement) | (DO statement WHILE "(" expression ")" ";") | (FOR "(" forLoopParts ")" statement) ;
namedFormalParameters ::= "[" defaultFormalParameter ("," defaultFormalParameter)* "]" ;
defaultCase ::= label? (CASE expression ":")* DEFAULT ":" statements ;
STRING ::= ("@"? MULTI_LINE_STRING) | SINGLE_LINE_STRING ;
functionExpression ::= (returnType? identifier)? formalParameterList functionExpressionBody ;
functionNative ::= NATIVE STRING? ";" ;
typeParameter ::= identifier (EXTENDS type)? ;
multiplicativeExpression ::= (unaryExpression (multiplicativeOperator unaryExpression)*) | (SUPER (multiplicativeOperator unaryExpression)+) ;
importReferences ::= importReference ("," importReference)* ","? ;
block ::= "{" statements "}" ;
HEX_NUMBER ::= ("0x" HEX_DIGIT+) | ("0X" HEX_DIGIT+) ;
functionPrefix ::= returnType? identifier ;
fieldInitializer ::= (THIS ".")? identifier "=" conditionalExpression ;
additiveExpression ::= (multiplicativeExpression (additiveOperator multiplicativeExpression)*) | (SUPER (additiveOperator multiplicativeExpression)+) ;
logicalOrExpression ::= logicalAndExpression ("||" logicalAndExpression)* ;
switchCase ::= label? (CASE expression ":")+ statements ;
normalFormalParameterTail ::= ("," namedFormalParameters) | ("," normalFormalParameter normalFormalParameterTail?) ;
declaredIdentifier ::= (FINAL type? identifier) | (VAR identifier) | (type identifier) ;
functionDeclaration ::= returnType? identifier formalParameterList ;
--------------------dart::spec-0.05.bgf--------------------
mapLiteralEntry ::= (identifier ":" expression) | (stringLiteral ":" expression) ;
scriptDefinition ::= scriptTag? libraryName? import* include* resource* topLevelDefinition* ;
argumentList ::= (namedArgument ("," namedArgument)*) | (expressionList ("," namedArgument)*) ;
declaration ::= (constantConstructorSignature (redirection | initializers)?) | (functionSignature redirection) | (namedConstructorSignature redirection) | ("abstract" getterSignature) | ("abstract" setterSignature) | ("abstract" operatorSignature) | ("abstract" functionSignature) | ("static" "final" type? staticFinalDeclarationList) | ("static"? initializedVariableDeclaration) ;
setterSignature ::= "static"? returnType? "set" identifier formalParameterList ;
defaultFormalParameter ::= normalFormalParameter ("=" constantExpression)? ;
typeList ::= type ("," type)* ;
HEX_DIGIT_SEQUENCE ::= HEX_DIGIT HEX_DIGIT? HEX_DIGIT? HEX_DIGIT? HEX_DIGIT? HEX_DIGIT? HEX_DIGIT? ;
label ::= identifier ":" ;
tryStatement ::= "try" block (catchPart+ finallyPart?) | finallyPart ;
operatorSignature ::= returnType? operator operator formalParameterList ;
STRING_CONTENT_SQ ::= ("~" "\\" | "\'" | "$" | NEWLINE) | ("\\" "~" NEWLINE) | STRING_INTERPOLATION ;
staticFinalDeclarationList ::= staticFinalDeclaration ("," staticFinalDeclaration)* ;
statement ::= label* nonLabelledStatement ;
libraryDefinition ::= scriptTag? libraryName import* include* resource* topLevelDefinition* ;
isOperator ::= "is" "!"? ;
finalVarOrType ::= ("final" type?) | "var" | type ;
postfixExpression ::= (assignableExpression postfixOperator) | (primary selector*) ;
getterSignature ::= "static"? returnType? "get" identifier formalParameterList ;
interfaceDefinition ::= "interface" identifier typeParameters? superinterfaces? factorySpecification? "{" interfaceMemberDefinition* "}" ;
classDefinition ::= "class" identifier typeParameters? superclass? interfaces? "{" classMemberDefinition* "}" ;
initializedVariableDeclaration ::= declaredIdentifier ("=" expression)? ("," initializedIdentifier)* ;
compilationUnit ::= topLevelDefinition* EOF ;
libraryName ::= "#" "library" "(" stringLiteral ")" ";" ;
interfaceMemberDefinition ::= ("static" "final" type? initializedIdentifierList ";") | (functionSignature ";") | (constantConstructorSignature ";") | (namedConstructorSignature ";") | (getterSignature ";") | (setterSignature ";") | (operatorSignature ";") | (variableDeclaration ";") ;
IDENTIFIER_NO_DOLLAR ::= IDENTIFIER_START_NO_DOLLAR IDENTIFIER_PART_NO_DOLLAR* ;
superCallOrFieldInitializer ::= ("super" arguments) | ("super" "." identifier arguments) | fieldInitializer ;
topLevelDefinition ::= classDefinition | interfaceDefinition | functionTypeAlias | (functionSignature functionBody) | (returnType? getOrSet identifier formalParameterList functionBody) | ("final" type? staticFinalDeclarationList ";") | (variableDeclaration ";") ;
stringLiteral ::= ("@"? MULTI_LINE_STRING) | SINGLE_LINE_STRING ;
constructorSignature ::= (identifier formalParameterList) | namedConstructorSignature ;
variableDeclaration ::= declaredIdentifier ("," identifier)* ;
superclass ::= "extends" type ;
MULTI_LINE_COMMENT ::= "/*" (MULTI_LINE_COMMENT | ("~" "*/"))* "*/" ;
interfaces ::= "implements" typeList ;
newExpression ::= "new" type ("." identifier)? arguments ;
methodSignature ::= factoryConstructorSignature | ("static" functionSignature) | getterSignature | setterSignature | operatorSignature | (functionSignature initializers?) | (namedConstructorSignature initializers?) ;
STRING_INTERPOLATION ::= ("$" IDENTIFIER_NO_DOLLAR) | ("$" "{" "Expression" "}") ;
arguments ::= "(" argumentList? ")" ;
expressionList ::= expression ("," expression)* ;
forLoopParts ::= (forInitializerStatement expression? ";" expressionList?) | (declaredIdentifier "in" expression) | (identifier "in" expression) ;
ifStatement ::= "if" "(" expression ")" statement ("else" statement)? ;
functionExpressionBody ::= ("=>" expression) | block ;
initializers ::= ":" superCallOrFieldInitializer ("," superCallOrFieldInitializer)* ;
scriptTag ::= "#!" ("~" NEWLINE)* NEWLINE ;
catchPart ::= "catch" "(" simpleFormalParameter ("," simpleFormalParameter)? ")" block ;
nonLabelledStatement ::= block | (initializedVariableDeclaration ";") | forStatement | whileStatement | doStatement | switchStatement | ifStatement | tryStatement | breakStatement | continueStatement | returnStatement | throwStatement | expressionStatement | assertStatement | (functionSignature functionBody) ;
assertStatement ::= "assert" "(" conditionalExpression ")" ";" ;
HEX_DIGIT ::= ("a" "." "." "f") | ("A" "." "." "F") | DIGIT ;
NUMBER ::= ("+"? DIGIT+ ("." DIGIT+)? EXPONENT?) | ("+"? "." DIGIT+ EXPONENT?) ;
assignableSelector ::= ("[" expression "]") | ("." identifier) ;
logicalAndExpression ::= bitwiseOrExpression ("&&" bitwiseOrExpression)* ;
SINGLE_LINE_STRING ::= (""" STRING_CONTENT_DQ* """) | ("'" STRING_CONTENT_SQ* "'") | ("@' ' '" ("~" "'" | NEWLINE)* "'") | ("@" """ ("~" """ | NEWLINE)* """) ;
typeParameters ::= "<" typeParameter ("," typeParameter)* ">" ;
assignableExpression ::= (primary (arguments* assignableSelector)+) | ("super" assignableSelector) | identifier ;
normalFormalParameters ::= normalFormalParameter ("," normalFormalParameter)* ;
functionSignature ::= returnType? identifier formalParameterList ;
ESCAPE_SEQUENCE ::= "\n" | "\r" | "\f" | "\b" | "\t" | "\v" | ("\x" HEX_DIGIT HEX_DIGIT) | ("\u" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT) | ("\u{" HEX_DIGIT_SEQUENCE "}") ;
functionTypeAlias ::= "typedef" functionPrefix typeParameters? formalParameterList ";" ;
whileStatement ::= "while" "(" expression ")" statement ;
conditionalExpression ::= logicalOrExpression ("?" expression ":" expression)? ;
typeArguments ::= "<" typeList ">" ;
type ::= qualified typeArguments? ;
shiftExpression ::= (additiveExpression (shiftOperator additiveExpression)*) | ("super" (shiftOperator additiveExpression)+) ;
constObjectExpression ::= "const" type ("." identifier)? arguments ;
formalParameterList ::= ("(" ")") | ("(" normalFormalParameters ("," namedFormalParameters)? ")") | ("(" namedFormalParameters ")") ;
expressionStatement ::= expression? ";" ;
namedConstructorSignature ::= identifier "." identifier formalParameterList ;
mapLiteral ::= "const"? typeArguments? "{" (mapLiteralEntry ("," mapLiteralEntry)* ","?)? "}" ;
equalityExpression ::= (relationalExpression (equalityOperator relationalExpression)?) | ("super" equalityOperator relationalExpression) ;
listLiteral ::= "const"? typeArguments? "[" (expressionList ","?)? "]" ;
breakStatement ::= "break" identifier? ";" ;
EXPONENT ::= "e" | "E" ("+" | "-")? DIGIT+ ;
bitwiseOrExpression ::= (bitwiseXorExpression ("|" bitwiseXorExpression)*) | ("super" ("|" bitwiseXorExpression)+) ;
redirection ::= ":" "this" ("." identifier)? arguments ;
throwStatement ::= "throw" expression? ";" ;
IDENTIFIER ::= IDENTIFIER_START IDENTIFIER_PART* ;
include ::= "#" "source" "(" stringLiteral ")" ";" ;
unaryExpression ::= (prefixOperator unaryExpression) | postfixExpression | (unaryOperator "super") | ("-" "super") | (incrementOperator assignableExpression) ;
forStatement ::= "for" "(" forLoopParts ")" statement ;
import ::= "#" "import" "(" stringLiteral ("," "prefix:" stringLiteral)? ")" ";" ;
classMemberDefinition ::= (declaration ";") | (methodSignature functionBody) ;
doStatement ::= "do" statement "while" "(" expression ")" ";" ;
operator ::= unaryOperator | binaryOperator | ("[" "]") | ("[" "]" "=") | "negate" ;
bitwiseXorExpression ::= (bitwiseAndExpression ("^" bitwiseAndExpression)*) | ("super" ("^" bitwiseAndExpression)+) ;
constantConstructorSignature ::= "const" qualified formalParameterList ;
STRING_CONTENT_DQ ::= ("~" "\\" | """ | "$" | NEWLINE) | ("\\" "~" NEWLINE) | STRING_INTERPOLATION ;
fieldFormalParameter ::= finalVarOrType? "this" "." identifier ;
returnStatement ::= "return" expression? ";" ;
relationalExpression ::= (shiftExpression ((isOperator type) | (relationalOperator shiftExpression))?) | ("super" relationalOperator shiftExpression) ;
bitwiseAndExpression ::= (equalityExpression ("&" equalityExpression)*) | ("super" ("&" equalityExpression)+) ;
initializedIdentifier ::= identifier ("=" expression)? ;
qualified ::= identifier ("." identifier)? ;
switchStatement ::= "switch" "(" expression ")" "{" switchCase* defaultCase? "}" ;
functionBody ::= ("=>" expression ";") | block ;
factorySpecification ::= "factory" qualified typeParameters? ;
expression ::= (assignableExpression assignmentOperator expression) | conditionalExpression ;
finallyPart ::= "finally" block ;
forInitializerStatement ::= (initializedVariableDeclaration ";") | (expression? ";") ;
MULTI_LINE_STRING ::= (""""" ("~" """"")* """"") | ("'''" ("~" "'''")* "'''") ;
namedArgument ::= label expression ;
superinterfaces ::= "extends" typeList ;
namedFormalParameters ::= "[" defaultFormalParameter ("," defaultFormalParameter)* "]" ;
defaultCase ::= label? ("case" expression ":")* "default" ":" statements ;
functionExpression ::= (returnType? identifier)? formalParameterList functionExpressionBody ;
typeParameter ::= identifier ("extends" type)? ;
resource ::= "#" "resource" "(" stringLiteral ")" ";" ;
multiplicativeExpression ::= (unaryExpression (multiplicativeOperator unaryExpression)*) | ("super" (multiplicativeOperator unaryExpression)+) ;
HEX_NUMBER ::= ("0x" HEX_DIGIT+) | ("0X" HEX_DIGIT+) ;
block ::= "{" statements "}" ;
SINGLE_LINE_COMMENT ::= "//" "~" NEWLINE* NEWLINE? ;
functionPrefix ::= returnType? identifier ;
continueStatement ::= "continue" identifier? ";" ;
factoryConstructorSignature ::= "factory" qualified typeParameters? ("." identifier)? formalParameterList ;
fieldInitializer ::= ("this" ".")? identifier "=" conditionalExpression ;
switchCase ::= label? ("case" expression ":")+ statements ;
additiveExpression ::= (multiplicativeExpression (additiveOperator multiplicativeExpression)*) | ("super" (additiveOperator multiplicativeExpression)+) ;
logicalOrExpression ::= logicalAndExpression ("||" logicalAndExpression)* ;
declaredIdentifier ::= finalVarOrType identifier ;
primary ::= thisExpression | ("super" assignableSelector) | functionExpression | literal | identifier | newExpression | constantObjectExpression | ("(" expression ")") ;
--------------------eiffel::bezault.bgf--------------------
Creation ::= "!" Type? "!" Writable Creation_call? ;
Entity_declaration_list ::= (Entity_declaration_group ";")* ;
New_export_item ::= Clients Feature_set ;
Constraint ::= "-" ">" Class_type ;
Assignment_attempt ::= Writable "?=" Expression ;
Strip ::= "Strip" "(" Attribute_list ")" ;
Precondition ::= "require" "else"? Assertion ;
Feature_clause ::= Clients? Header_comment? Feature_declaration_list ;
Class_type_expanded ::= "expanded" Class_type ;
Binary_expression ::= Expression Infix_operator Expression ;
Parent_list ::= (Parent ";")* ;
Tag_mark ::= Tag ":" ;
Indexing ::= "indexing" Index_list ;
Assignment ::= Writable ":=" Expression ;
Assertion_clause ::= Tag_mark? Unlabeled_assertion_clause ;
External ::= "external" Language_name External_name? ;
Manifest_array ::= "<<" Expression_list ">>" ;
Check ::= "check" Assertion "end" ;
Then_part_list ::= (Then_part "elseif")+ ;
Clients ::= "{" Class_list "}" ;
Feature_list ::= (Feature_name ",")* ;
Creators ::= "creation" (Creation_clause "creation")+ ;
Declaration_body ::= Formal_arguments? Type_mark? Constant_or_routine? ;
Conditional ::= "if" Then_part_list Else_part? "end" ;
Variant ::= "variant" Tag_mark? Expression ;
Interval ::= Choice_constant ".." Choice_constant ;
Type_list ::= (Type ",")* ;
Assertion ::= (Assertion_clause ";")* ;
Class_type_separate ::= "separate" Class_type ;
External_name ::= "alias" Manifest_string ;
Rename_list ::= (Rename_pair ",")* ;
Rename ::= "rename" Rename_list ;
Internal ::= Routine_mark Compound ;
Features ::= "feature" (Feature_clause "feature")+ ;
Postcondition ::= "ensure" "then"? Assertion ;
Wide_manifest_string ::= "$" Manifest_string ;
Address ::= "$" Address_mark ;
Identifier_list ::= (Identifier ",")+ ;
Class_header ::= Header_mark? "class" Class_name ;
Choices ::= (Choice ",")* ;
Redefine ::= "redefine" Feature_list ;
Bit_type ::= "BIT" Bit_length ;
Compound ::= (Instruction ";")* ;
Parent ::= Class_type Feature_adaptation? ;
Identifier ::= Letter (Letter | Decimal_digit | "_")* ;
Unary_expression ::= Prefix_operator Expression ;
Wide_character_constant ::= "$" Character_constant ;
Expression_list ::= (Expression ",")* ;
When_part_list ::= "when" (When_part "when")+ ;
Loop ::= Initialization Invariant? Variant? Loop_body "end" ;
Constant_or_routine ::= "is" Feature_value ;
Qualified_call ::= Call_qualifier? Call_chain ;
Class_type ::= Class_name Actual_generics? ;
Call_chain ::= (Unqualified_call ".")+ ;
Initialization ::= "from" Compound ;
Exit ::= "until" Boolean_expression ;
Entity_declaration_group ::= Identifier_list Type_mark ;
Loop_body ::= Exit "loop" Compound ;
Parent_qualification ::= "{" Class_name "}" ;
Index_terms ::= (Index_value ",")+ ;
Obsolete ::= "obsolete" Message ;
When_part ::= Choices "then" Compound ;
New_feature ::= "frozen"? Feature_name ;
Formal_generic_list ::= (Formal_generic ",")* ;
Then_part ::= Boolean_expression "then" Compound ;
Anchored ::= "like" Anchor ;
Undefine ::= "undefine" Feature_list ;
Debug ::= "debug" Debug_keys? Compound "end" ;
Rescue ::= "rescue" Compound ;
Prefix ::= "prefix" """ Prefix_operator """ ;
Index ::= Identifier ":" ;
Infix ::= "infix" """ Infix_operator """ ;
Creation_clause ::= Clients? Header_comment? Procedure_list ;
Local_declarations ::= "local" Entity_declaration_list ;
Inheritance ::= "inherit" Parent_list ;
Procedure_list ::= (Procedure_name ",")* ;
Call_qualifier ::= Call_target "." ;
Formal_generic ::= Formal_generic_name Constraint? ;
Formal_arguments ::= "(" Entity_declaration_list ")" ;
New_feature_list ::= (New_feature ",")+ ;
Integer_constant ::= Sign? Integer ;
Class_list ::= (Class_name ",")* ;
Routine ::= Obsolete? Header_comment? Precondition? Local_declarations? Routine_body Postcondition? Rescue? "end" ("--" Feature_name)? ;
Binary ::= "+" | "-" | "*" | "/" | "<" | ">" | "<=" | ">=" | "//" | "\\" | "^" | "and" | "or" | "xor" | ("and" "then") | ("or" "else") | "implies" ;
Invariant ::= "invariant" Assertion ;
Integer ::= (Decimal_digit+) | (Decimal_digit (Decimal_digit Decimal_digit?)? ("_" Decimal_digit Decimal_digit Decimal_digit)+) ;
Creation_call ::= "." Procedure_name Actuals? ;
Parenthesized ::= "(" Expression ")" ;
Select ::= "select" Feature_list ;
Feature_adaptation ::= Rename? New_exports? Undefine? Redefine? Select? "end" ;
Index_clause ::= Index? Index_terms ;
Rename_pair ::= Feature_name "as" Feature_name ;
Equality ::= Expression Comparison Expression ;
Unqualified_call ::= Identifier Actuals? ;
Precursor ::= Parent_qualification? "Precursor" Actuals? ;
Else_part ::= "else" Compound ;
Class_declaration ::= Indexing? Class_header Formal_generics? Obsolete? Inheritance? Creators? Features? Invariant? "end" ("--" "class" Class_name)? ;
Type_mark ::= ":" Type ;
Feature_declaration ::= New_feature_list Declaration_body ;
Actual_list ::= (Actual ",")* ;
Feature_declaration_list ::= (Feature_declaration ";")* ;
Index_list ::= (Index_clause ";")* ;
Debug_key_list ::= (Debug_key ",")* ;
New_export_list ::= (New_export_item ";")* ;
Multi_branch ::= "inspect" Expression When_part_list? Else_part? "end" ;
Old ::= "old" Expression ;
Real_constant ::= Sign? Real ;
Actuals ::= "(" Actual_list ")" ;
Attribute_list ::= (Attribute ",")* ;
Debug_keys ::= "(" Debug_key_list ")" ;
New_exports ::= "export" New_export_list ;
--------------------eiffel::cordy.bgf--------------------
Creation ::= ("!!" Writable Creation_call?) | ("!" Type? "!" Writable Creation_call?) ;
Deferred ::= IN "deferred" NL EX ;
Entity_declaration_list ::= IN NL Entity_declaration_group_Separator* EX ;
New_export_item ::= Clients Feature_set ;
Call ::= Parenthesized_qualifier? Call_chain ;
Constraint ::= "->" Restricted_type ;
Assignment_attempt ::= Writable "?=" Expression ;
Strip ::= "strip" "(" Attribute_list ")" ;
Precondition ::= "require" "else"? Assertion ;
Feature_clause ::= Header_comment? Feature_declaration_list ;
Class_type_expanded ::= "expanded" Class_type ;
Binary_expression ::= Unary_expression Infix_operator_Unary_expression* ;
when_When_part ::= "when" When_part ;
Tag_mark ::= Tag ":" ;
Indexing ::= NL "indexing" Index_list ;
Assignment ::= Writable ":=" Expression ;
Actual_generics ::= "[" Type_list "]" ;
Assertion_clause ::= Tag_mark? Unlabeled_assertion_clause ;
External ::= "external" Language_name External_name? NL ;
Manifest_array ::= "<<" Expression_list ">>" ;
Then_part_list ::= Then_part elseif_Then_part* ;
Check ::= "check" Assertion "end" ;
Clients ::= "{" Class_list "}" ;
Declaration_body ::= Formal_arguments? Type_mark? is_Constant? ;
Feature_list ::= IN NL {Feature_name ","}* EX ;
Conditional ::= "if" Then_part_list Else_part? "end" ;
Interval ::= Constant ".." Constant ;
Restricted_class_type ::= Class_name Restricted_actual_generics? ;
Variant ::= "variant" Tag_mark? Expression ;
Assertion ::= NL IN Assertion_clause_Separator* EX ;
Index_clause_Separator ::= Index_clause Separator ;
feature_Feature_clause ::= NL "feature" Clients? Feature_clause ;
External_name ::= "alias" Manifest_string ;
Rename ::= "rename" Rename_list NL ;
Comparison_Operator_expression ::= Comparison Operator_expression ;
Internal ::= Routine_mark Compound ;
Postcondition ::= "ensure" "then"? Assertion ;
Address ::= "$" Address_mark ;
Class_header ::= Header_mark? "class" Class_name ;
dot_Unqualified_call ::= "." Unqualified_call ;
creation_Creation_clause ::= NL "creation" Creation_clause ;
Redefine ::= "redefine" Feature_list NL ;
elseif_Then_part ::= "elseif" Then_part ;
Bit_type ::= "BIT" Constant ;
Compound ::= IN NL Instruction_Separator* EX ;
Parent ::= Restricted_class_type Feature_adaptation? ;
Restricted_actual_generics ::= "[" Restricted_type_list "]" ;
Unary_expression ::= Prefix_operator* Primitive_expression ;
Parenthesized_qualifier ::= Parenthesized "." ;
Separator ::= ";"? NL ;
Loop ::= Initialization Invariant? Variant? Loop_body "end" ;
Class_type ::= Class_name Actual_generics? ;
Call_chain ::= Unqualified_call dot_Unqualified_call* ;
Initialization ::= "from" Compound ;
Exit ::= "until" Boolean_expression ;
Entity_declaration_group ::= Identifier_list Type_mark ;
Loop_body ::= Exit NL "loop" Compound ;
is_Constant ::= "is" Feature_value ;
Obsolete ::= "obsolete" Message NL ;
When_part ::= Choices "then" Compound ;
New_feature ::= "frozen"? Feature_name ;
Then_part ::= Boolean_expression "then" Compound ;
Infix_operator_Unary_expression ::= Infix_operator Unary_expression ;
Instruction_Separator ::= Instruction Separator ;
Anchored ::= "like" Anchor ;
Undefine ::= "undefine" Feature_list NL ;
Rescue ::= "rescue" Compound ;
Debug ::= "debug" Debug_keys? Compound "end" ;
Assertion_clause_Separator ::= Assertion_clause Separator ;
Prefix ::= "prefix" Prefix_name ;
Index ::= Identifier ":" ;
Infix ::= "infix" Infix_name ;
Creation_clause ::= Clients? Header_comment? Feature_list NL ;
Local_declarations ::= "local" Entity_declaration_list ;
Formal_generics ::= "[" Formal_generic_list "]" ;
Inheritance ::= "inherit" NL IN Parent_list EX ;
Null ::= ";" NL ;
Formal_generic ::= Formal_generic_name Constraint? ;
Formal_arguments ::= "(" Formal_entity_declaration_list ")" ;
Integer_constant ::= Sign? Integer ;
Routine ::= Obsolete? Header_comment? Precondition? Local_declarations? Routine_body Postcondition? Rescue? "end" ;
Binary ::= "+" | "-" | "*" | "/" | "<" | ">" | "<=" | ">=" | "//" | "\\" | "^" | "and" | "or" | "xor" | ("and" "then") | ("or" "else") | "implies" ;
Invariant ::= "invariant" Assertion ;
Creation_call ::= "." Unqualified_call ;
Parenthesized ::= "(" Expression ")" ;
Select ::= "select" Feature_list NL ;
Feature_adaptation ::= NL IN Rename? New_exports? Undefine? Redefine? Select? EX "end" ;
Index_clause ::= Index? Index_terms ;
Rename_pair ::= Feature_name "as" Feature_name ;
Equality ::= Operator_expression Comparison_Operator_expression* ;
Unqualified_call ::= Entity Actuals? ;
Else_part ::= "else" Compound ;
Feature_declaration_Separator ::= (Feature_declaration Separator) | (Routine_feature_declaration Separator) ;
Routine_feature_declaration ::= NL New_feature_list Routine_declaration_body ;
Formal_entity_declaration_group_Separator ::= Entity_declaration_group ";"? ;
Class_declaration ::= Indexing? NL Class_header Formal_generics? NL IN Obsolete? Inheritance? Creators? Features? Invariant? EX "end" ;
Type_mark ::= ":" Type ;
Feature_declaration ::= New_feature_list Declaration_body ;
Parent_Separator ::= Parent Separator ;
is_Routine ::= "is" NL Routine ;
Feature_declaration_list ::= IN NL Feature_declaration_Separator* EX ;
Index_list ::= NL IN Index_clause_Separator* EX ;
Multi_branch ::= "inspect" Expression When_part_list? Else_part? "end" ;
Old ::= "old" Expression ;
Real_constant ::= Sign? Real ;
Actuals ::= "(" Actual_list ")" ;
New_export_item_Separator ::= New_export_item Separator ;
Entity_declaration_group_Separator ::= Entity_declaration_group Separator ;
Routine_declaration_body ::= Formal_arguments? Type_mark? is_Routine? ;
Debug_keys ::= "(" Debug_key_list ")" ;
New_exports ::= "export" New_export_list NL ;
--------------------eiffel::iso-25436-2006.bgf--------------------
Comment_break ::= New_line Blanks_or_tabs? "--" ;
Inline_agent ::= "agent" Formal_arguments? Type_mark? Attribute_or_routine? Agent_actuals? ;
Conversion_query ::= Feature_name ":{" Type_list "}" ;
New_export_item ::= Clients Header_comment? Feature_set ;
Constraint ::= "->" Constraining_types Constraint_creators? ;
Attribute ::= "attribute" Compound ;
Precondition ::= "require" "else"? Assertion ;
Feature_clause ::= "feature" Clients? Header_comment? Feature_declaration_list ;
Binary_expression ::= Expression Binary Expression ;
Converters ::= "convert" Converter_list ;
Object_test ::= "{" Identifier ":" Type "}" Expression ;
Tag_mark ::= Tag ":" ;
Tuple_type ::= "TUPLE" Tuple_parameter_list? ;
Basic_manifest_string ::= """ String_content """ ;
Once_string ::= "once" Manifest_string ;
Explicit_creation_type ::= "{" Type "}" ;
Assignment ::= Variable ":=" Expression ;
Actual_generics ::= "[" Type_list "]" ;
Assertion_clause ::= Tag_mark? Unlabeled_assertion_clause ;
External ::= "external" External_language External_name? ;
Tuple_parameter_list ::= "[" Tuple_parameters "]" ;
Check ::= "check" Assertion Notes? "end" ;
Clients ::= "{" Class_list "}" ;
Declaration_body ::= Formal_arguments? Query_mark? Feature_value? ;
DLL_external ::= """ "dll" "windows"? DLL_identifier DLL_index? External_signature? External_file_use? """ ;
Conditional ::= "if" Then_part_list Else_part? "end" ;
Variant ::= "variant" Tag_mark? Expression ;
External_signature ::= "signature" External_argument_types? (":" External_type)? ;
Constant_interval ::= Constant ".." Constant ;
External_name ::= "alias" Manifest_string ;
Rename ::= "rename" Rename_list ;
Internal ::= Routine_mark Compound ;
Postcondition ::= "ensure" "then"? Assertion Only? ;
Exit_condition ::= "until" Boolean_expression ;
Extended_feature_name ::= Feature_name Alias? ;
Creation_expression ::= "create" Explicit_creation_type Explicit_creation_call? ;
Manifest_tuple ::= "[" Expression_list "]" ;
Address ::= "$" Variable ;
Class_header ::= Header_mark? "class" Class_name ;
Placeholder ::= Manifest_type? "?" ;
Inherit_clause ::= "inherit" Non_conformance? Parent_list ;
Integer_base ::= "0" Integer_base_letter ;
Creation_instruction ::= "create" Explicit_creation_type? Creation_call ;
Redefine ::= "redefine" Feature_list ;
Non_object_call ::= "{" Type "}." Unqualified_call ;
Multiple_constraint ::= "{" Constraint_list "}" ;
Only ::= "only" Feature_list? ;
External_argument_types ::= "(" External_type_list ")" ;
Agent_actuals ::= "(" Agent_actual_list ")" ;
Parent ::= Class_type Feature_adaptation? ;
Agent_unqualified ::= Feature_name Agent_actuals? ;
Constraint_creators ::= "create" Feature_list "end" ;
Unary_expression ::= Unary Expression ;
Feature_value ::= Explicit_value? Obsolete? Header_comment? Attribute_or_routine? ;
C_external ::= """ "C" "inline"? External_signature? External_file_use? """ ;
Explicit_value ::= "=" Manifest_constant ;
Loop ::= Initialization Invariant? Exit_condition Loop_body Variant? "end" ;
Agent_qualified ::= Agent_target "." Agent_unqualified ;
Assigner_call ::= Expression ":=" Expression ;
Class_type ::= Attachment_mark? Class_name Actual_generics? ;
Initialization ::= "from" Compound ;
Comment ::= "--" {Simple_string Comment_break}* ;
Verbatim_string_closer ::= Close_bracket Simple_string? """ ;
Object_call ::= (Target ".")? Unqualified_call ;
Entity_declaration_group ::= Identifier_list Type_mark ;
Loop_body ::= "loop" Compound ;
Verbatim_string_opener ::= """ Simple_string? Open_bracket ;
Parent_qualification ::= "{" Class_name "}" ;
Obsolete ::= "obsolete" Message ;
External_system_file ::= "<" Simple_string ">" ;
When_part ::= "when" Choices "then" Compound ;
New_feature ::= "frozen"? Extended_feature_name ;
Then_part ::= Boolean_expression "then" Compound ;
Anchored ::= Attachment_mark? "like" Anchor ;
Undefine ::= "undefine" Feature_list ;
Rescue ::= "rescue" Compound ;
Debug ::= "debug" ("(" Key_list ")")? Compound "end" ;
Assigner_mark ::= "assign" Feature_name ;
Alias ::= "alias" """ Alias_name """ "convert"? ;
Bracket_expression ::= Bracket_target "[" Actuals "]" ;
Creation_clause ::= "create" Clients? Header_comment? Creation_procedure_list ;
Local_declarations ::= "local" Entity_declaration_list? ;
Formal_generics ::= "[" Formal_generic_list "]" ;
Manifest_type ::= "{" Type "}" ;
Formal_generic ::= "frozen"? Formal_generic_name Constraint? ;
Formal_arguments ::= "(" Entity_declaration_list ")" ;
Integer_constant ::= Sign? Integer ;
Formal_generic_name ::= "?"? Identifier ;
Once ::= "once" ("(" Key_list ")")? ;
Binary ::= "+" | "-" | "*" | "/" | "//" | "\\" | "^" | ".." | "<" | ">" | "<=" | ">=" | "and" | "or" | "xor" | ("and" "then") | ("or" "else") | "implies" | Free_binary ;
Notes ::= "note" Note_list ;
Invariant ::= "invariant" Assertion ;
Integer ::= Integer_base? Digit_sequence ;
Creation_call ::= Variable Explicit_creation_call? ;
External_user_file ::= """ Simple_string """ ;
Parenthesized ::= "(" Expression ")" ;
Select ::= "select" Feature_list ;
Feature_adaptation ::= Undefine? Redefine? Rename? New_exports? Select? "end" ;
Renaming ::= Rename "end" ;
Rename_pair ::= Feature_name "as" Extended_feature_name ;
Verbatim_string ::= Verbatim_string_opener Line_sequence Verbatim_string_closer ;
Character_constant ::= "'" Character "'" ;
Unqualified_call ::= Feature_name Actuals? ;
Equality ::= Expression Comparison Expression ;
Else_part ::= "else" Compound ;
Precursor ::= Precursor Parent_qualification? Actuals? ;
External_file_use ::= "use" External_file_list ;
Note_name ::= Identifier ":" ;
Manifest_constant ::= Manifest_type? Manifest_value ;
Parenthesized_target ::= "(|" Expression "|)" ;
Single_constraint ::= Type Renaming? ;
Explicit_creation_call ::= "." Unqualified_call ;
Class_declaration ::= Notes? Class_header Formal_generics? Obsolete? Inheritance? Creators? Converters? Features? Invariant? Notes? "end" ;
Type_mark ::= ":" Type ;
Feature_declaration ::= New_feature_list Declaration_body ;
Attribute_or_routine ::= Precondition? Local_declarations? Feature_body Postcondition? Rescue? "end" ;
Type_interval ::= Manifest_type ".." Manifest_type ;
Conversion_procedure ::= Feature_name "({" Type_list "})" ;
Multi_branch ::= "inspect" Expression When_part_list? Else_part? "end" ;
CPP_external ::= """ "C++" "inline" External_signature? External_file_use? """ ;
Old ::= "old" Expression ;
Real_constant ::= Sign? Real ;
Actuals ::= "(" Actual_list ")" ;
Note_entry ::= Note_name Note_values ;
Call_agent ::= "agent" Call_agent_body ;
Query_mark ::= Type_mark Assigner_mark? ;
Non_conformance ::= "{" "NONE" "}" ;
New_exports ::= "export" New_export_list ;
--------------------fortran::derricks.bgf--------------------
EndSelectStmt ::= LblDef "end" "select" EndName? EOS ;
EndTypeStmt ::= LblDef "end" "type" TypeName? EOS ;
AccessIdList ::= AccessId ("," AccessId)* ;
RdIoCtlSpecList ::= (UnitIdentifier "," IoControlSpec) | (UnitIdentifier "," FormatIdentifier) | IoControlSpec | (RdIoCtlSpecList "," IoControlSpec) ;
AllocateObject ::= VariableName | (AllocateObject FieldSelector) ;
CharLength ::= ("(" TypeParamValue ")") | ScalarIntLiteralConstant ;
FunctionArgList ::= FunctionArg | (FunctionArgList "," FunctionArg) | (SectionSubscriptList "," FunctionArg) ;
InquireStmt ::= (LblDef "inquire" "(" InquireSpecList ")" EOS) | (LblDef "inquire" "(" "iolength" "=" ScalarVariable ")" OutputItemList EOS) ;
DeferredShapeSpecList ::= DeferredShapeSpec ("," DeferredShapeSpec)* ;
SubroutineRange ::= (SubroutineParList? EOS Body? EndSubroutineStmt) | (SubroutineParList EOS InternalSubProgPart EndSubroutineStmt) ;
LoopControl ::= ("while" "(" Expr ")") | (VariableName "=" Int-Real-Dp-Expression "," Int-Real-Dp-Expression ("," Int-Real-Dp-Expression)?) ;
ArrayAllocation ::= ArrayName ("(" DeferredShapeSpecList ")")? ;
PrintStmt ::= LblDef "print" FormatIdentifier ("," OutputItemList)? EOS ;
InterfaceBlock ::= InterfaceStmt InterfaceBlockPart+ EndInterfaceStmt ;
EquivalenceStmt ::= LblDef "equivalence" EquivalenceSetList EOS ;
CloseSpecList ::= CloseSpec ("," CloseSpec)* ;
ParameterStmt ::= LblDef "parameter" "(" NamedConstantDefList ")" EOS ;
ArithmeticIfStmt ::= LblDef "if" "(" ScalarNumericExpr ")" LblRef "," LblRef "," LblRef EOS ;
InquireSpec ::= ("unit" "=" UnitIdentifier) | ("file" "=" CExpr) | ("iostat" "=" ScalarVariable) | ("err" "=" LblRef) | ("exist" "=" ScalarVariable) | ("opened" "=" ScalarVariable) | ("number" "=" ScalarVariable) | ("named" "=" ScalarVariable) | ("name" "=" ScalarVariable) | ("access" "=" ScalarVariable) | ("sequential" "=" ScalarVariable) | ("direct" "=" ScalarVariable) | ("form" "=" ScalarVariable) | ("formatted" "=" ScalarVariable) | ("unformatted" "=" ScalarVariable) | ("recl" "=" Expr) | ("nextrec" "=" ScalarVariable) | ("blank" "=" ScalarVariable) | ("position" "=" ScalarVariable) | ("action" "=" ScalarVariable) | ("read" "=" ScalarVariable) | ("write" "=" ScalarVariable) | ("readwrite" "=" ScalarVariable) | ("delim" "=" ScalarVariable) | ("pad" "=" ScalarVariable) ;
GotoStmt ::= LblDef GoToKw LblRef EOS ;
SFDummyArgNameList ::= SFDummyArgName ("," SFDummyArgName)* ;
StructureComponent ::= (VariableName FieldSelector) | (StructureComponent FieldSelector) ;
SFExpr ::= SFTerm | (Sign AddOperand) | (SFExpr AddOp AddOperand) ;
SavedEntityList ::= SavedEntity ("," SavedEntity)* ;
NamedConstantDef ::= NamedConstant "=" Expr ;
LabelDoStmt ::= LblDef "do" LblRef ","? LoopControl EOS ;
Level5Expr ::= (Level5Expr EquivOp)? EquivOperand ;
Level3Expr ::= (Level3Expr ConcatOp)? Level2Expr ;
MainRange ::= (BodyConstruct+ EndProgramStmt) | (InternalSubProgPart EndProgramStmt) | EndProgramStmt ;
ConnectSpecList ::= ConnectSpec ("," ConnectSpec)* ;
IfThenStmt ::= LblDef (IfConstructName ":")? "if" "(" ScalarLogicalExpr ")" "then" EOS ;
PointerStmtObjectList ::= PointerStmtObject ("," PointerStmtObject)* ;
Primary ::= ArrayConstructor | UnsignedArithmeticConstant | Name | DataRef | FunctionReference | ("(" Expr ")") | Scon | LogicalConstant ;
Level1Expr ::= DefinedUnaryOp? Primary ;
BlockDoConstruct ::= (LblDef "do" LblRef EOS) | (LblDef "do" LoopControl EOS) | (LblDef "do" EOS) | (LblDef Name ":" "do" LblRef LoopControl EOS) | (LblDef Name ":" "do" LblRef EOS) | (LblDef Name ":" "do" LoopControl EOS) | (LblDef Name ":" "do" EOS) ;
DataStmtValue ::= Constant | (NamedConstantUse "*" Constant) ;
PointerField ::= (Name "(" SFExprList ")" "%" Name) | (Name "(" SFDummyArgNameList ")" "%" Name) | (Name "%" Name) | (PointerField FieldSelector) ;
AssignedGotoStmt ::= (LblDef GoToKw VariableName EOS) | (LblDef GoToKw VariableName ","? "(" LblRef ("," LblRef)* ")" EOS) ;
FieldSelector ::= ("(" SectionSubscriptList ")" "%" Name) | ("%" Name) ;
CExpr ::= (CExpr ConcatOp)? CPrimary ;
EndWhereStmt ::= LblDef "end" "where" EOS ;
EquivOperand ::= (EquivOperand OrOp)? OrOperand ;
WhereConstruct ::= WhereConstructStmt AssignmentStmt* (ElsewhereStmt AssignmentStmt*)? EndWhereStmt ;
ComponentDefStmt ::= (LblDef TypeSpec ("," ComponentAttrSpecList)? ":" ":" ComponentDeclList EOS) | (LblDef TypeSpec ComponentDeclList EOS) ;
UseStmt ::= (LblDef "use" Name ("," RenameList)? EOS) | (LblDef "use" Name "," "only" ":" OnlyList? EOS) ;
DataStmtObjectList ::= DataStmtObject ("," DataStmtObject)* ;
PositionEditDescr ::= ("T" Icon) | ("TL" Icon) | ("TR" Icon) | (Icon "X") ;
Only ::= GenericSpec | ((Ident "=>")? UseName) ;
Comblock ::= "/" CommonBlockName? "/" ;
FormatItem ::= (Icon? DataEditDescr) | ControlEditDescr | CharStringEditDescr | (Icon? "(" FormatItemList ")") | (FormatItem ":" FormatItem) ;
InputImpliedDo ::= ("(" InputItemList "," ImpliedDoVariable "=" Expr "," Expr ")") | ("(" InputItemList "," ImpliedDoVariable "=" Expr "," Expr "," Expr ")") ;
ActualArg ::= ((Name "=")? Expr) | ((Name "=")? "*" LblRef) ;
BackspaceStmt ::= (LblDef "backspace" UnitIdentifier EOS) | (LblDef "backspace" "(" PositionSpec ("," PositionSpec)* ")" EOS) ;
FunctionParList ::= "(" (FunctionPar ("," FunctionPar)*)? ")" ;
DataIDoObjectList ::= DataIDoObject ("," DataIDoObject)* ;
DeallocateStmt ::= (LblDef "deallocate" "(" AllocateObjectList "," "stat" "=" Variable ")" EOS) | (LblDef "deallocate" "(" AllocateObjectList ")" EOS) ;
ExplicitShapeSpecList ::= ExplicitShapeSpec ("," ExplicitShapeSpec)* ;
AllocateStmt ::= (LblDef "allocate" "(" AllocationList "," "stat" "=" Variable ")" EOS) | (LblDef "allocate" "(" AllocationList ")" EOS) ;
RdCtlSpec ::= RdUnitId | ("(" RdIoCtlSpecList ")") ;
Constant ::= NamedConstantUse | UnsignedArithmeticConstant | ("+" UnsignedArithmeticConstant) | ("-" UnsignedArithmeticConstant) | Scon | LogicalConstant | (Icon "_" Scon) | (NamedConstantUse "_" Scon) | StructureConstructor | BozLiteralConstant ;
AssumedShapeSpec ::= LowerBound? ":" ;
ElseStmt ::= LblDef "else" IfConstructName? EOS ;
CloseStmt ::= LblDef "close" "(" CloseSpecList ")" EOS ;
PauseStmt ::= LblDef "pause" (Icon | Scon)? EOS ;
AllocationList ::= Allocation ("," Allocation)* ;
CaseValueRange ::= Expr | (Expr ":") | (":" Expr) | (Expr ":" Expr) ;
AllocateObjectList ::= AllocateObject ("," AllocateObject)* ;
ExecutableProgram ::= StartCommentBlock? ProgramUnit+ ;
WhereConstructStmt ::= LblDef "where" "(" MaskExpr ")" EOS ;
EquivalenceSet ::= "(" EquivalenceObject "," EquivalenceObject ("," EquivalenceObject)* ")" ;
CloseSpec ::= UnitIdentifier | ("unit" "=" UnitIdentifier) | ("iostat" "=" ScalarVariable) | ("err" "=" LblRef) | ("status" "=" CExpr) ;
ComplexConst ::= "(" Expr "," Expr ")" ;
KindSelector ::= ("(" ("kind" "=")? Expr ")") | ("*" Icon) ;
PointerAssignmentStmt ::= (LblDef Name "=>" Target EOS) | (LblDef Name "%" Name "=>" Target EOS) | (LblDef Name "%" DataRef "=>" Target EOS) | (LblDef Name "(" SFExprList ")" "%" Name "=>" Target EOS) | (LblDef Name "(" SFExprList ")" "%" DataRef "=>" Target EOS) | (LblDef Name "(" SFDummyArgNameList ")" "%" Name "=>" Target EOS) | (LblDef Name "(" SFDummyArgNameList ")" "%" DataRef "=>" Target EOS) ;
DataStmt ::= LblDef "data" Datalist EOS ;
EndProgramStmt ::= (LblDef "end" EOS) | (LblDef "end" "program" EndName? EOS) ;
RdUnitId ::= ("(" UFExpr ")") | ("(" "*" ")") ;
InternalSubProgPart ::= (Body ContainsStmt InternalSubprogram) | (ContainsStmt InternalSubprogram) | (InternalSubProgPart InternalSubprogram) ;
CharStringEditDescr ::= Scon | (Icon "H" Character+) ;
CycleStmt ::= LblDef "cycle" EndName? EOS ;
DerivedTypeDef ::= DerivedTypeStmt DerivedTypeBody+ EndTypeStmt ;
LogicalConstant ::= (".true." "_" KindParam) | (".false." "_" KindParam) | ".true." | ".false." ;
InquireSpecList ::= (UnitIdentifier "," InquireSpec ("," InquireSpec)*) | (InquireSpec ("," InquireSpec)*) ;
FunctionPrefix ::= ("recursive" "function") | ("recursive" TypeSpec "function") | (TypeSpec "recursive" "function") | (TypeSpec? "function") ;
DataImpliedDo ::= "(" DataIDoObjectList "," ImpliedDoVariable "=" Expr "," Expr ("," Expr)? ")" ;
TypeDeclarationStmt ::= (LblDef TypeSpec ("," AttrSpec)* ":" ":" EntityDecl ("," EntityDecl)* EOS) | (LblDef TypeSpec EntityDecl ("," EntityDecl)* EOS) ;
ContainsStmt ::= LblDef "contains" EOS ;
StructureConstructor ::= TypeName "(" Expr ("," Expr)* ")" ;
SFExprList ::= (SFExpr ":" Expr ":" Expr) | (SFExpr ":" ":" Expr) | (":" Expr ":" Expr) | (":" ":" Expr) | ":" | (":" Expr) | SFExpr | (SFExpr ":") | (SFExpr ":" Expr) | (SFExprList "," SectionSubscript) | (SFDummyArgNameList "," ":") | (SFDummyArgNameList "," ":" Expr) | (SFDummyArgNameList "," SFExpr ":") | (SFDummyArgNameList "," SFExpr ":" Expr) ;
EndInterfaceStmt ::= LblDef "end" "interface" EOS ;
NamedConstantDefList ::= NamedConstantDef ("," NamedConstantDef)* ;
ConnectSpec ::= UnitIdentifier | ("unit" "=" UnitIdentifier) | ("iostat" "=" ScalarVariable) | ("err" "=" LblRef) | ("file" "=" CExpr) | ("status" "=" CExpr) | ("access" "=" CExpr) | ("form" "=" CExpr) | ("recl" "=" Expr) | ("blank" "=" CExpr) | ("position" "=" CExpr) | ("action" "=" CExpr) | ("delim" "=" CExpr) | ("pad" "=" CExpr) ;
IfStmt ::= LblDef "if" "(" ScalarLogicalExpr ")" ActionStmt ;
PositionSpec ::= ("unit="? UnitIdentifier) | ("iostat=" ScalarVariable) | ("err=" LblRef) ;
IntentStmt ::= (LblDef "intent" "(" IntentSpec ")" ":" ":" IntentParList EOS) | (LblDef "intent" "(" IntentSpec ")" IntentParList EOS) ;
ReadStmt ::= (LblDef "read" RdCtlSpec InputItemList? EOS) | (LblDef "read" RdFmtId EOS) | (LblDef "read" RdFmtId "," InputItemList EOS) ;
UFTerm ::= UFFactor | (UFTerm MultOp UFFactor) | (UFTerm ConcatOp UFPrimary) ;
ProcedureNameList ::= ProcedureName ("," ProcedureName)* ;
FunctionInterfaceRange ::= (FunctionParList EOS SubprogramInterfaceBody EndFunctionStmt) | (FunctionParList EOS EndFunctionStmt) ;
Variable ::= VariableName | (VariableName "(" Subscript ("," Subscript)* ")") | (VariableName SubstringRange) | (VariableName "(" Subscript ("," Subscript)* ")" SubstringRange) ;
SubroutineParList ::= "(" (SubroutinePar ("," SubroutinePar)*)? ")" ;
IntentSpec ::= "in" | "out" | ("in" "out") ;
AssumedSizeSpec ::= ((LowerBound ":")? "*") | (ExplicitShapeSpecList "," "*") | (ExplicitShapeSpecList "," LowerBound ":" "*") ;
IoControlSpec ::= ("unit" "=" UnitIdentifier) | ("fmt" "=" FormatIdentifier) | ("nml" "=" NamelistGroupName) | ("rec" "=" Expr) | ("iostat" "=" ScalarVariable) | ("err" "=" LblRef) | ("end" "=" LblRef) | ("advance" "=" CExpr) | ("size" "=" Variable) | ("eor" "=" LblRef) ;
OutputItemList ::= OutputItem ("," OutputItem)* ;
EndDoStmt ::= LblDef "end" "do" Name? EOS ;
AcValueList ::= AcValue ("," AcValue)* ;
Module ::= (ModuleStmt ModuleBody EndModuleStmt) | (ModuleStmt EndModuleStmt) ;
SubstringRange ::= "(" SubscriptTriplet ")" ;
OnlyList ::= Only ("," Only)* ;
FormatItemList ::= FormatItem ("," FormatItem)* ;
ComponentAttrSpecList ::= ComponentAttrSpec ("," ComponentAttrSpec)* ;
PointerStmt ::= (LblDef "pointer" ":" ":" PointerStmtObjectList EOS) | (LblDef "pointer" PointerStmtObjectList EOS) ;
SectionSubscriptList ::= SectionSubscript ("," SectionSubscript)* ;
IntentParList ::= IntentPar ("," IntentPar)* ;
ArrayElement ::= (StructureComponent "(" SectionSubscriptList ")") | (VariableName "(" SectionSubscriptList ")") ;
SFFactor ::= SFPrimary | (SFPrimary PowerOp MultOperand) ;
AssumedShapeSpecList ::= (LowerBound ":") | (DeferredShapeSpecList "," LowerBound ":") | (AssumedShapeSpecList "," AssumedShapeSpec) ;
InterfaceStmt ::= (LblDef "interface" GenericName EOS) | (LblDef "interface" GenericSpec EOS) | (LblDef "interface" EOS) ;
FormatStmt ::= LblDef "format" "(" FormatItemList? ")" EOS ;
PointerObjectList ::= PointerObject ("," PointerObject)* ;
AssignStmt ::= LblDef "assign" LblRef "to" VariableName EOS ;
SubprogramInterfaceBody ::= SpecificationPartConstruct | (SubprogramInterfaceBody SpecificationPartConstruct) ;
CharSelector ::= ("(" "len" "=" TypeParamValue "," "kind" "=" Expr ")") | ("(" "len" "=" TypeParamValue "," Expr ")") | ("(" "len" "=" TypeParamValue ")") | ("(" ("kind" "=")? Expr ")") ;
ModuleStmt ::= LblDef "module" ModuleName EOS ;
EquivalenceSetList ::= EquivalenceSet ("," EquivalenceSet)* ;
CommonStmt ::= LblDef "common" Comblock? CommonBlockObjectList (","? Comblock CommonBlockObjectList)* EOS ;
EndModuleStmt ::= (LblDef "end" EOS) | (LblDef "end" "module" EndName? EOS) ;
GoToKw ::= "go" "to" ;
DataEditDescr ::= ("I" Icon ("." Icon)?) | ("O" Icon ("." Icon)?) | ("B" Icon ("." Icon)?) | ("Z" Icon ("." Icon)?) | ("F" Icon "." Icon) | ("E" Icon "." Icon ("E" Icon)?) | ("EN" Icon "." Icon ("E" Icon)?) | ("ES" Icon "." Icon ("E" Icon)?) | ("G" Icon "." Icon ("E" Icon)?) | ("L" Icon) | ("A" Icon?) | ("D" Icon "." Icon) ;
ImplicitStmt ::= (LblDef "implicit" "none" EOS) | (LblDef "implicit" ImplicitSpec ("," ImplicitSpec)* EOS) ;
AccessStmt ::= (LblDef AccessSpec ":" ":" AccessIdList EOS) | (LblDef AccessSpec AccessIdList? EOS) ;
AttrSpec ::= "parameter" | AccessSpec | "allocatable" | ("dimension" "(" ArraySpec ")") | "external" | ("intent" "(" IntentSpec ")") | "intrinsic" | "optional" | "pointer" | "save" | "target" ;
RdFmtIdExpr ::= "(" UFExpr ")" ;
SubscriptTriplet ::= Expr? ":" Expr? (":" Expr)? ;
MainProgram ::= ProgramStmt? MainRange ;
DataRef ::= (Name "%" Name) | (DataRef "%" Name) | (Name "(" SectionSubscriptList ")") | (DataRef "(" SectionSubscriptList ")") ;
Datalist ::= DataStmtSet ("," DataStmtSet)* ;
OptionalStmt ::= (LblDef "optional" ":" ":" OptionalParList EOS) | (LblDef "optional" OptionalParList EOS) ;
CaseConstruct ::= (LblDef Name ":" "select" "case" "(" Expr ")" EOS SelectCaseRange) | (LblDef "select" "case" "(" Expr ")" EOS SelectCaseRange) ;
CallStmt ::= (LblDef "call" SubroutineNameUse EOS) | (LblDef "call" SubroutineNameUse "(" (ActualArg ("," ActualArg)*)? ")" EOS) ;
ComponentDeclList ::= ComponentDecl ("," ComponentDecl)* ;
Level4Expr ::= (Level3Expr RelOp)? Level3Expr ;
UnsignedArithmeticConstant ::= (Icon "_" KindParam) | (Rcon "_" KindParam) | Icon | Rcon | ComplexConst ;
Level2Expr ::= ((Level2Expr AddOp)? AddOperand) | (Sign AddOperand) ;
ImplicitSpec ::= TypeSpec "(" LetterSpec ("," LetterSpec)* ")" ;
SFTerm ::= SFFactor | (SFTerm MultOp MultOperand) ;
CommonBlockObjectList ::= CommonBlockObject ("," CommonBlockObject)* ;
Rename ::= Ident "=>" UseName ;
NullifyStmt ::= LblDef "nullify" "(" PointerObjectList ")" EOS ;
FunctionSubprogram ::= LblDef FunctionPrefix FunctionName FunctionRange ;
BlockDataSubprogram ::= (BlockDataStmt BlockDataBody EndBlockDataStmt) | (BlockDataStmt EndBlockDataStmt) ;
InterfaceBody ::= (LblDef FunctionPrefix FunctionName FunctionInterfaceRange) | (LblDef "subroutine" SubroutineName SubroutineInterfaceRange) ;
ControlEditDescr ::= PositionEditDescr | (Icon? "/") | ":" | SignEditDescr | (("-" | "+")? Icon "P" (Icon? DataEditDescr)?) | BlankInterpEditDescr ;
MultOperand ::= Level1Expr (PowerOp MultOperand)? ;
RdFmtId ::= LblRef | "*" | COperand | (COperand ConcatOp CPrimary) | (RdFmtIdExpr ConcatOp CPrimary) ;
AssignmentStmt ::= (LblDef Name "%" Name "=" Expr EOS) | (LblDef Name "%" DataRef "=" Expr EOS) | (LblDef Name "(" SFExprList ")" "%" Name "=" Expr EOS) | (LblDef Name "(" SFExprList ")" "%" DataRef "=" Expr EOS) | (LblDef Name "(" SFDummyArgNameList ")" "%" Name "=" Expr EOS) | (LblDef Name "(" SFDummyArgNameList ")" "%" DataRef "=" Expr EOS) | (LblDef Name "=" Expr EOS) | (LblDef Name "(" SFExprList ")" "=" Expr EOS) | (LblDef Name "(" SFExprList ")" SubstringRange "=" Expr EOS) ;
ExternalStmt ::= LblDef "external" ExternalName ("," ExternalName)* EOS ;
OpenStmt ::= LblDef "open" "(" ConnectSpecList ")" EOS ;
IoControlSpecList ::= (UnitIdentifier "," FormatIdentifier?) | (UnitIdentifier "," IoControlSpec) | IoControlSpec | (IoControlSpecList "," IoControlSpec) ;
TargetObject ::= ObjectName | (ObjectName "(" ArraySpec ")") ;
DataStmtSet ::= DataStmtObjectList "/" DataStmtValueList "/" ;
CaseSelector ::= ("(" CaseValueRange ("," CaseValueRange)* ")") | "default" ;
ModuleBody ::= SpecificationPartConstruct | ModuleSubprogramPartConstruct | (ModuleBody SpecificationPartConstruct) | (ModuleBody ModuleSubprogramPartConstruct) ;
IntrinsicStmt ::= LblDef "intrinsic" IntrinsicProcedureName ("," IntrinsicProcedureName)* EOS ;
EntityDecl ::= (ObjectName "=" Expr) | (ObjectName "(" ArraySpec ")" "=" Expr) | (ObjectName "*" CharLength "=" Expr) | (ObjectName "*" CharLength "(" ArraySpec ")" "=" Expr) | ObjectName | (ObjectName "*" CharLength) | (ObjectName "(" ArraySpec ")") | (ObjectName "(" ArraySpec ")" "*" CharLength) ;
ProgramStmt ::= LblDef "program" ProgramName EOS ;
AllocatableStmt ::= (LblDef "allocatable" ":" ":" ArrayAllocationList EOS) | (LblDef "allocatable" ArrayAllocationList EOS) ;
ArrayDeclarator ::= VariableName "(" ArraySpec ")" ;
ComponentAttrSpec ::= "pointer" | ("dimension" "(" ComponentArraySpec ")") ;
SubroutineInterfaceRange ::= (SubroutineParList EOS SubprogramInterfaceBody EndSubroutineStmt) | (SubroutineParList EOS EndSubroutineStmt) ;
OrOperand ::= (OrOperand AndOp)? AndOperand ;
EndBlockDataStmt ::= (LblDef "end" "block" "data" EndName? EOS) | (LblDef "end" EOS) ;
RewindStmt ::= (LblDef "rewind" UnitIdentifier EOS) | (LblDef "rewind" "(" PositionSpec ("," PositionSpec)* ")" EOS) ;
UFFactor ::= UFPrimary | (UFPrimary PowerOp UFFactor) ;
CPrimary ::= COperand | ("(" CExpr ")") ;
DerivedTypeStmt ::= (LblDef "type" TypeName EOS) | (LblDef "type" ":" ":" TypeName EOS) | (LblDef "type" "," AccessSpec ":" ":" TypeName EOS) ;
OptionalParList ::= OptionalPar ("," OptionalPar)* ;
ElseIfStmt ::= LblDef "else" "if" "(" ScalarLogicalExpr ")" "then" IfConstructName? EOS ;
FunctionArg ::= Name "=" Expr ;
AllocatedShape ::= "(" SectionSubscriptList ")" ;
EntryStmt ::= (LblDef "entry" EntryName SubroutineParList EOS) | (LblDef "entry" EntryName SubroutineParList "result" "(" Name ")" EOS) ;
CaseStmt ::= LblDef "case" CaseSelector Name? EOS ;
ReturnStmt ::= LblDef "return" Expr? EOS ;
ArrayAllocationList ::= ArrayAllocation ("," ArrayAllocation)* ;
NamelistGroup ::= "/" NamelistGroupName "/" NamelistGroupObject ("," NamelistGroupObject)* ;
TypeSpec ::= ("integer" KindSelector) | ("real" KindSelector) | ("double" "precision") | ("complex" KindSelector) | ("character" CharSelector) | ("logical" KindSelector) | ("type" "(" TypeName ")") | "integer" | "real" | "complex" | "logical" | "character" | ("character" LengthSelector) ;
FunctionReference ::= Name "(" FunctionArgList? ")" ;
OutputImpliedDo ::= ("(" OutputItemList "," ImpliedDoVariable "=" Expr "," Expr ")") | ("(" OutputItemList "," ImpliedDoVariable "=" Expr "," Expr "," Expr ")") ;
SelectCaseRange ::= (SelectCaseBody EndSelectStmt) | EndSelectStmt ;
UFPrimary ::= Icon | Scon | Name | FunctionReference | DataRef | ("(" UFExpr ")") ;
NamelistStmt ::= LblDef "namelist" NamelistGroup (","? NamelistGroup)* EOS ;
AcImpliedDo ::= ("(" Expr "," ImpliedDoVariable "=" Expr "," Expr ")") | ("(" Expr "," ImpliedDoVariable "=" Expr "," Expr "," Expr ")") | ("(" AcImpliedDo "," ImpliedDoVariable "=" Expr "," Expr ")") | ("(" AcImpliedDo "," ImpliedDoVariable "=" Expr "," Expr "," Expr ")") ;
ContinueStmt ::= LblDef "continue" EOS ;
WhereStmt ::= LblDef "where" "(" MaskExpr ")" AssignmentStmt ;
SFPrimary ::= ArrayConstructor | Icon | Name | DataRef | FunctionReference | ("(" Expr ")") ;
DimensionStmt ::= (LblDef "dimension" ":" ":" ArrayDeclaratorList EOS) | (LblDef "dimension" ArrayDeclaratorList EOS) ;
PrivateSequenceStmt ::= (LblDef "private" EOS) | (LblDef "sequence" EOS) ;
SavedEntity ::= VariableName | ("/" CommonBlockName "/") ;
WriteStmt ::= LblDef "write" "(" IoControlSpecList ")" OutputItemList? EOS ;
ComponentDecl ::= ComponentName ("(" ComponentArraySpec ")")? ("*" CharLength)? ;
UFExpr ::= UFTerm | (Sign UFTerm) | (UFExpr AddOp UFTerm) ;
ExitStmt ::= LblDef "exit" EndName? EOS ;
FunctionRange ::= (FunctionParList EOS Body? EndFunctionStmt) | (FunctionParList "result" "(" Name ")" EOS InternalSubProgPart EndFunctionStmt) | (FunctionParList "result" "(" Name ")" EOS Body EndFunctionStmt) | (FunctionParList "result" "(" Name ")" EOS EndFunctionStmt) | (FunctionParList EOS InternalSubProgPart EndFunctionStmt) ;
PointerStmtObject ::= ObjectName | (ObjectName "(" DeferredShapeSpecList ")") ;
LetterSpec ::= Letter ("-" Letter)? ;
EndIfStmt ::= LblDef "end" "if" IfConstructName? EOS ;
BlockDataStmt ::= LblDef "block" "data" BlockDataName? EOS ;
EndfileStmt ::= (LblDef "end" "file" UnitIdentifier EOS) | (LblDef "end" "file" "(" PositionSpec ("," PositionSpec)* ")" EOS) ;
DataStmtValueList ::= DataStmtValue ("," DataStmtValue)* ;
RenameList ::= Rename ("," Rename)* ;
InputItemList ::= InputItem ("," InputItem)* ;
EndFunctionStmt ::= (LblDef "end" EOS) | (LblDef "end" "function" EndName? EOS) ;
IfConstruct ::= IfThenStmt ExecutionPartConstruct* (ElseIfStmt ExecutionPartConstruct*)* (ElseStmt ExecutionPartConstruct*)? EndIfStmt ;
TargetStmt ::= (LblDef "target" ":" ":" TargetObjectList EOS) | (LblDef "target" TargetObjectList EOS) ;
ComputedGotoStmt ::= LblDef GoToKw "(" LblRef ("," LblRef)* ")" ","? ScalarIntExpr EOS ;
ElsewhereStmt ::= LblDef "elsewhere" EOS ;
Expr ::= (Expr DefinedBinaryOp)? Level5Expr ;
GenericSpec ::= ("operator" "(" DefinedOperator ")") | ("assignment" "(" "=" ")") ;
AndOperand ::= NotOp? Level4Expr ;
ModuleProcedureStmt ::= LblDef "module" "procedure" ProcedureNameList EOS ;
TargetObjectList ::= TargetObject ("," TargetObject)* ;
StopStmt ::= LblDef "stop" (Icon | Scon)? EOS ;
SubroutineSubprogram ::= LblDef "recursive"? "subroutine" SubroutineName SubroutineRange ;
ExplicitShapeSpec ::= (LowerBound ":")? UpperBound ;
ArrayDeclaratorList ::= ArrayDeclarator ("," ArrayDeclarator)* ;
AddOperand ::= (AddOperand MultOp)? MultOperand ;
EndSubroutineStmt ::= (LblDef "end" "subroutine" EndName? EOS) | (LblDef "end" EOS) ;
SaveStmt ::= (LblDef "save" ":" ":" SavedEntityList EOS) | (LblDef "save" SavedEntityList? EOS) ;
LengthSelector ::= ("(" TypeParamValue ")") | ("*" CharLength) ;
ArrayConstructor ::= "(/" AcValueList "/)" ;
Allocation ::= AllocateObject AllocatedShape? ;
--------------------fortran::waite-cordy.bgf--------------------
EndSelectStmt ::= (LblDef "endselect" EndName? EOS) | (LblDef "end" "select" EndName? EOS) ;
NamelistGroups ::= ("/" NamelistGroupName "/" NamelistGroupObject) | (NamelistGroups "/" NamelistGroupName "/" NamelistGroupObject) | (NamelistGroups "," "/" NamelistGroupName "/" NamelistGroupObject) | (NamelistGroups "," NamelistGroupObject) ;
EndTypeStmt ::= (LblDef "endtype" TypeName EOS) | (LblDef "endtype" EOS) | (LblDef "end" "type" TypeName EOS) | (LblDef "end" "type" EOS) ;
FunctionArgList ::= FunctionArg | (FunctionArgList "," FunctionArg) | (SectionSubscriptList "," FunctionArg) ;
AllocateObject ::= VariableName | (AllocateObject FieldSelector) ;
RdIoCtlSpecList ::= (UnitIdentifier "," IoControlSpec) | (UnitIdentifier "," FormatIdentifier) | IoControlSpec | (RdIoCtlSpecList "," IoControlSpec) ;
CharLength ::= ("(" TypeParamValue ")") | Constant ;
InquireStmt ::= LblDef "inquire" "(" InquireSpecList ")" EOS ;
 InquireStmt ::= LblDef "inquire" "(" "iolength=" ScalarVariable ")" OutputItemList EOS ;
DoLblDef ::= TAB_2 Icon TAB_9 ;
ArrayAllocation ::= ArrayName | (ArrayName "(" DeferredShapeSpecList ")") ;
PowerUpMultOperand ::= PowerOp MultOperand ;
LoopControl ::= VariableName "=" Expr "," Expr CommaExpr? ;
 LoopControl ::= "while" "(" Expr ")" ;
SubroutineRange ::= SubroutineParList EOS Body? EndSubroutineStmt ;
 SubroutineRange ::= SubroutineParList EOS BodyPlusInternals EndSubroutineStmt ;
BlockDataBody ::= BlockDataBodyConstruct | (BlockDataBody BlockDataBodyConstruct) ;
AndOp ::= SP ".and." SP ;
PrintStmt ::= (LblDef "print" FormatIdentifier "," OutputItemList EOS) | (LblDef "print" FormatIdentifier EOS) ;
InterfaceBlock ::= InterfaceStmt InterfaceBlockBody EndInterfaceStmt ;
NotOp ::= SP ".not." SP ;
EquivalenceStmt ::= LblDef "equivalence" EquivalenceSetList EOS ;
CloseSpecList ::= UnitIdentifierComma? {CloseSpec ","}* ;
ParameterStmt ::= LblDef "parameter" "(" NamedConstantDefList ")" EOS ;
ArithmeticIfStmt ::= LblDef "if" "(" Expr ")" LblRef "," LblRef "," LblRef EOS ;
InquireSpec ::= ("unit=" UnitIdentifier) | ("file=" CExpr) | ("err=" LblRef) | ("iostat=" ScalarVariable) | ("exist=" ScalarVariable) | ("opened=" ScalarVariable) | ("number=" ScalarVariable) | ("named=" ScalarVariable) | ("name=" ScalarVariable) | ("access=" ScalarVariable) | ("sequential=" ScalarVariable) | ("direct=" ScalarVariable) | ("form=" ScalarVariable) | ("formatted=" ScalarVariable) | ("unformatted=" ScalarVariable) | ("recl=" Expr) | ("nextrec=" ScalarVariable) | ("blank=" ScalarVariable) ;
 InquireSpec ::= ("position=" ScalarVariable) | ("action=" ScalarVariable) | ("read=" ScalarVariable) | ("write=" ScalarVariable) | ("readwrite=" ScalarVariable) | ("delim=" ScalarVariable) | ("pad=" ScalarVariable) ;
SectionSubscriptRef ::= "(" SectionSubscriptList ")" ;
GotoStmt ::= LblDef GoToKw LblRef EOS ;
StructureComponent ::= (VariableName FieldSelector) | (StructureComponent FieldSelector) ;
EquivOpEquivOperand ::= EquivOp EquivOperand ;
EOS ::= CommentOrNewline CommentOrNewline* ;
NamedConstantDef ::= NamedConstant "=" Expr ;
LabelDoStmt ::= LblDef "do" DoLblRef CommaLoopControl EOS IN_2 ExecutionPartConstruct* EX_2 DoLblDef DoLabelStmt ;
Level5Expr ::= EquivOperand EquivOpEquivOperand* ;
Level3Expr ::= Level2Expr ConcatOpLevel2Expr* ;
MainRange ::= Body? EndProgramStmt ;
 MainRange ::= BodyPlusInternals EndProgramStmt ;
ConnectSpecList ::= UnitIdentifierComma? {ConnectSpec ","}* ;
Primary ::= UnsignedArithmeticConstant | NameDataRef | FunctionReference | ("(" Expr ")") ;
 Primary ::= Scon ;
 Primary ::= LogicalConstant ;
 Primary ::= ArrayConstructor ;
Level1Expr ::= Primary ;
 Level1Expr ::= DefinedUnaryOp Primary ;
IfThenStmt ::= LblDef "if" "(" Expr ")" "then" EOS IN_2 ;
BlockDoConstruct ::= LblDef NameColon? "do" CommaLoopControl? EOS IN_2 ExecutionPartConstruct* EX_2 EndDoStmt ;
OutputItemList1 ::= (Expr "," Expr) | (Expr "," OutputImpliedDo) | OutputImpliedDo | (OutputItemList1 "," Expr) | (OutputItemList1 "," OutputImpliedDo) ;
DataStmtValue ::= Constant | (Constant "*" Constant) | (NamedConstantUse "*" Constant) ;
PointerField ::= (Name SFExprListRef? "%" Name) | (PointerField FieldSelector) ;
FieldSelector ::= ("(" SectionSubscriptList ")" "%" Name) | ("%" Name) ;
AssignedGotoStmt ::= (LblDef GoToKw VariableName EOS) | (LblDef GoToKw VariableName "(" LblRefList ")" EOS) | (LblDef GoToKw VariableComma "(" LblRefList ")" EOS) ;
CExpr ::= CPrimary CPrimaryConcatOp* ;
EndWhereStmt ::= (LblDef "endwhere" EOS) | (LblDef "end" "where" EOS) ;
EquivOperand ::= OrOperand OrUpOrOperand* ;
WhereConstruct ::= (Where EndWhereStmt) | (ElseWhere EndWhereStmt) ;
ComponentDefStmt ::= (LblDef TypeSpec "," ComponentAttrSpecList "::" ComponentDeclList EOS) | (LblDef TypeSpec "::" ComponentDeclList EOS) | (LblDef TypeSpec ComponentDeclList EOS) ;
UseStmt ::= (LblDef "use" Name EOS) | (LblDef "use" Name "," "only" ":" EOS) | (LblDef "use" Name "," RenameList EOS) | (LblDef "use" Name "," "only" ":" OnlyList EOS) ;
Only ::= GenericSpec | (Ident "=>" UseName) | UseName ;
Comblock ::= ("/" SPOFF "/" SPON) | ("/" CommonBlockName "/") ;
AddOpAddOperand ::= AddOp AddOperand ;
ComplexDataRefTail ::= SectionSubscriptRef ;
 ComplexDataRefTail ::= "%" Name ;
InputImpliedDo ::= "(" InputItemList "," ImpliedDoVariable "=" Expr "," Expr CommaExpr? ")" ;
StmtFunctionStmt ::= LblDef Name StmtFunctionRange ;
FmtSpec ::= Formatedit | Formatsep | (Formatsep Formatedit) | (FmtSpec Formatsep) | (FmtSpec Formatsep Formatedit) | (FmtSpec "," Formatedit) | (FmtSpec "," Formatsep) | (FmtSpec "," Formatsep Formatedit) ;
Where ::= WhereConstructStmt | (Where AssignmentStmt) ;
BackspaceStmt ::= (LblDef "backspace" UnitIdentifier EOS) | (LblDef "backspace" "(" PositionSpecList ")" EOS) ;
FunctionParList ::= ("(" FunctionPars ")") | ε ;
DeallocateStmt ::= (LblDef "deallocate" "(" AllocateObjectList "," "stat=" Variable ")" EOS) | (LblDef "deallocate" "(" AllocateObjectList ")" EOS) ;
SectionSubscript ::= (Expr SubscriptTripletTail?) | SubscriptTripletTail ;
AllocateStmt ::= (LblDef "allocate" "(" AllocationList "," "stat=" Variable ")" EOS) | (LblDef "allocate" "(" AllocationList ")" EOS) ;
AssumedShapeSpec ::= (LowerBound ":") | ":" ;
Constant ::= NamedConstantUse | (PlusMinus? UnsignedArithmeticConstant) | Scon | Hcon | LogicalConstant ;
 Constant ::= (Icon "_" Scon) | (NamedConstantUse "_" Scon) ;
 Constant ::= StructureConstructor | BozLiteralConstant ;
RdCtlSpec ::= RdUnitId | ("(" RdIoCtlSpecList ")") ;
ElseStmt ::= LblDef EX_2 "else" EOS IN_2 ;
CloseStmt ::= LblDef "close" "(" CloseSpecList ")" EOS ;
PauseStmt ::= LblDef "pause" IconOrScon? EOS ;
CaseValueRange ::= Expr | (Expr ":") | (":" Expr) | (Expr ":" Expr) ;
WhereConstructStmt ::= LblDef "where" "(" MaskExpr ")" EOS ;
InterfaceBlockBody ::= InterfaceBodyPartConstruct | (InterfaceBlockBody InterfaceBodyPartConstruct) ;
EquivalenceSet ::= "(" EquivalenceObject "," EquivalenceObjectList ")" ;
KindSelector ::= ("(" "kind=" Expr ")") | ("(" Expr ")") ;
ComplexConst ::= "(" ComplexComponent "," ComplexComponent ")" ;
CloseSpec ::= ("unit=" UnitIdentifier) | ("err=" LblRef) | ("status=" CExpr) | ("iostat=" ScalarVariable) ;
PointerAssignmentStmt ::= (LblDef Name "=>" Target EOS) | (LblDef Name SFExprListRef? "%" NameDataRef "=>" Target EOS) ;
DataStmt ::= LblDef "data" Datalist EOS ;
RdUnitId ::= ("(" UFExpr ")") | ("(" "*" ")") ;
EndProgramStmt ::= LblDef "end" EOS ;
 EndProgramStmt ::= (LblDef "endprogram" EndName? EOS) | (LblDef "end" "program" EndName? EOS) ;
CycleStmt ::= LblDef "cycle" EndName? EOS ;
DerivedTypeDef ::= DerivedTypeStmt DerivedTypeBody EndTypeStmt ;
LogicalConstant ::= (SP ".true." SP) | (SP ".false." SP) ;
 LogicalConstant ::= (SP ".true." SP "_" KindParam) | (SP ".false." SP "_" KindParam ".") ;
InquireSpecList ::= UnitIdentifier? {InquireSpec ","}* ;
SubscriptListRef ::= "(" SubscriptList ")" ;
FunctionPrefix ::= "function" | (TypeSpec "function") ;
 FunctionPrefix ::= ("recursive" "function") | ("recursive" TypeSpec "function") | (TypeSpec "recursive" "function") ;
DataImpliedDo ::= ("(" DataIDoObjectList "," ImpliedDoVariable "=" Expr "," Expr ")") | ("(" DataIDoObjectList "," ImpliedDoVariable "=" Expr "," Expr "," Expr ")") ;
TypeDeclarationStmt ::= LblDef TypeSpec EntityDeclList EOS ;
 TypeDeclarationStmt ::= LblDef TypeSpec AttrSpecSeq? "::" EntityDeclList EOS ;
ContainsStmt ::= LblDef "contains" EOS ;
StructureConstructor ::= TypeName "(" ExprList ")" ;
EndInterfaceStmt ::= (LblDef "endinterface" EOS) | (LblDef "end" "interface" EOS) ;
SFExprList ::= (Expr ":"? Expr?) | (":" Expr?) ;
 SFExprList ::= (Expr? ":" Expr ":" Expr) | (Expr? "::" Expr) ;
IfStmt ::= LblDef "if" "(" Expr ")" ActionStmt ;
ConnectSpec ::= ("unit=" UnitIdentifier) | ("err=" LblRef) | ("file=" CExpr) | ("status=" CExpr) | ("access=" CExpr) | ("form=" CExpr) | ("recl=" Expr) | ("blank=" CExpr) | ("iostat=" ScalarVariable) ;
 ConnectSpec ::= ("position=" CExpr) | ("action=" CExpr) | ("delim=" CExpr) | ("pad=" CExpr) ;
IntentStmt ::= LblDef "intent" "(" IntentSpec ")" ColonColon? IntentParList EOS ;
PositionSpec ::= ("unit=" UnitIdentifier) | ("err=" LblRef) | ("iostat=" ScalarVariable) ;
Formatedit ::= EditElement | (Icon EditElement) | Xcon | Pcon | (Pcon EditElement) | (Pcon Icon EditElement) ;
RelOpLevel3Expr ::= RelOp Level3Expr ;
ReadStmt ::= (LblDef "read" RdCtlSpec InputItemList? EOS) | (LblDef "read" RdFmtId CommaInputItemList? EOS) ;
UFTerm ::= UFFactor | (UFTerm MultOp UFFactor) | (UFTerm ConcatOp UFPrimary) ;
FunctionInterfaceRange ::= FunctionParList EOS SubprogramInterfaceBody? EndFunctionStmt ;
Variable ::= VariableName SubscriptListRef? SubstringRange? ;
SubroutineParList ::= ("(" SubroutinePars ")") | ε ;
VariableComma ::= VariableName "," ;
EquivOp ::= (SP ".eqv." SP) | (SP ".neqv." SP) ;
AssumedSizeSpec ::= "*" | (LowerBound ":" "*") | (ExplicitShapeSpecList "," "*") | (ExplicitShapeSpecList "," LowerBound ":" "*") ;
IoControlSpec ::= ("fmt=" FormatIdentifier) | ("unit=" UnitIdentifier) | ("rec=" Expr) | ("end=" LblRef) | ("err=" LblRef) | ("iostat=" ScalarVariable) ;
 IoControlSpec ::= ("nml=" NamelistGroupName) | ("advance=" CExpr) | ("size=" Variable) | ("eor=" LblRef) ;
LblDef ::= ε | (TAB_2 Label TAB_7) ;
EndDoStmt ::= (LblDef "enddo" EndName? EOS) | (LblDef "end" "do" EndName? EOS) ;
Module ::= (ModuleStmt ModuleBody EndModuleStmt) | (ModuleStmt EndModuleStmt) ;
SubstringRange ::= "(" Expr? SubscriptTripletTail ")" ;
DoLblRef ::= Icon ;
CommaInputItemList ::= "," InputItemList ;
PointerStmt ::= LblDef "pointer" ColonColon? PointerStmtObjectList EOS ;
program ::= IN_6 CommentOrNewline* ExecutableProgram CommentOrNewline* EX_6 ;
ArrayElement ::= VariableName "(" SectionSubscriptList ")" ;
 ArrayElement ::= StructureComponent "(" SectionSubscriptList ")" ;
AssumedShapeSpecList ::= (LowerBound ":") | (DeferredShapeSpecList "," LowerBound ":") | (AssumedShapeSpecList "," AssumedShapeSpec) ;
InterfaceStmt ::= (LblDef "interface" GenericName EOS) | (LblDef "interface" GenericSpec EOS) | (LblDef "interface" EOS) ;
FormatStmt ::= LblDef "format" "(" FmtSpec? ")" EOS ;
Comlist ::= (Comblock? CommonBlockObject) | (Comlist "," Comblock? CommonBlockObject) | (Comlist Comblock CommonBlockObject) ;
ElseConstruct ::= ElseStmt ConditionalBody ;
CommaSectionSubscript ::= "," SectionSubscript ;
SavedCommonBlock ::= "/" CommonBlockName "/" ;
SubprogramInterfaceBody ::= SpecificationPartConstruct | (SubprogramInterfaceBody SpecificationPartConstruct) ;
AssignStmt ::= LblDef "assign" LblRef "to" VariableName EOS ;
CharSelector ::= ("(" "len=" TypeParamValue "," "kind=" Expr ")") | ("(" "len=" TypeParamValue "," Expr ")") | ("(" "len=" TypeParamValue ")") | ("(" "kind=" Expr ")") | ("(" Expr ")") ;
ModuleStmt ::= LblDef "module" ModuleName EOS ;
NameColon ::= Name ":" ;
CPrimaryConcatOp ::= CPrimary ConcatOp ;
CommonStmt ::= LblDef "common" Comlist EOS ;
EditElement ::= Fcon | MislexedFcon | Scon | Hcon | Ident | ("(" FmtSpec ")") ;
IncludeStmt ::= "include" Scon EOS ;
EndModuleStmt ::= (LblDef "endmodule" EndName? EOS) | (LblDef "end" "module" EndName? EOS) | (LblDef "end" EOS) ;
GoToKw ::= "goto" ;
 GoToKw ::= "go" "to" ;
ImplicitStmt ::= LblDef "implicit" ImplicitSpecList EOS ;
 ImplicitStmt ::= LblDef "implicit" "none" EOS ;
AccessStmt ::= (LblDef AccessSpec ColonColon? AccessIdList EOS) | (LblDef AccessSpec EOS) ;
AttrSpec ::= "parameter" | AccessSpec | "allocatable" | ("dimension" "(" ArraySpec ")") | "external" | ("intent" "(" IntentSpec ")") | "intrinsic" | "optional" | "pointer" | "save" | "target" ;
RdFmtIdExpr ::= "(" UFExpr ")" ;
MainProgram ::= ProgramStmt? MainRange ;
OptionalStmt ::= LblDef "optional" ColonColon? OptionalParList EOS ;
MultOpMultOperand ::= MultOp MultOperand ;
UnitIdentifierComma ::= UnitIdentifier "," ;
Datalist ::= DataStmtSet | (Datalist? ","? DataStmtSet) ;
CaseConstruct ::= (LblDef Name ":" "selectcase" "(" Expr ")" EOS SelectCaseRange) | (LblDef "selectcase" "(" Expr ")" EOS SelectCaseRange) | (LblDef Name ":" "select" "case" "(" Expr ")" EOS SelectCaseRange) | (LblDef "select" "case" "(" Expr ")" EOS SelectCaseRange) ;
CallStmt ::= (LblDef "call" SubroutineNameUse EOS) | (LblDef "call" SubroutineNameUse "(" SubroutineArgList ")" EOS) ;
Level4Expr ::= Level3Expr RelOpLevel3Expr* ;
UnsignedArithmeticConstant ::= Icon | RDcon | ComplexConst ;
 UnsignedArithmeticConstant ::= Icon "_" KindParam ;
 UnsignedArithmeticConstant ::= RDcon "_" KindParam ;
Level2Expr ::= Sign? AddOperand AddOpAddOperand* ;
PositionSpecList ::= UnitIdentifierComma? PositionSpec+ ;
ImplicitSpec ::= (TypeSpec ImplicitRanges) | (TypeSpec "(" ImplicitRanges ")") ;
Rename ::= Ident "=>" UseName ;
NameDataRef ::= Name ComplexDataRefTail* ;
NullifyStmt ::= LblDef "nullify" "(" PointerObjectList ")" EOS ;
FunctionSubprogram ::= LblDef FunctionPrefix FunctionName FunctionRange ;
InterfaceBody ::= (LblDef FunctionPrefix FunctionName FunctionInterfaceRange) | (LblDef "subroutine" SubroutineName SubroutineInterfaceRange) ;
SubscriptTripletTail ::= ":" Expr? ;
 SubscriptTripletTail ::= (":" Expr ":" Expr) | ("::" Expr) ;
BlockDataSubprogram ::= (BlockDataStmt BlockDataBody EndBlockDataStmt) | (BlockDataStmt EndBlockDataStmt) ;
MultOperand ::= Level1Expr PowerUpMultOperand? ;
ConcatOpLevel2Expr ::= ConcatOp Level2Expr ;
RdFmtId ::= LblRef | "*" | COperand | (COperand ConcatOp CPrimary) | (RdFmtIdExpr ConcatOp CPrimary) ;
AssignmentStmt ::= LblDef Name SFExprListRef? SubstringRange? "=" Expr EOS ;
 AssignmentStmt ::= (LblDef Name SFExprListRef? "%" NameDataRef "=" Expr EOS) | (LblDef Name "(" SFDummyArgNameList ")" "%" NameDataRef "=" Expr EOS) ;
AttrSpecSeq ::= ("," AttrSpec) | (AttrSpecSeq "," AttrSpec) ;
ExternalStmt ::= LblDef "external" ExternalNameList EOS ;
OpenStmt ::= LblDef "open" "(" ConnectSpecList ")" EOS ;
TargetObject ::= ObjectName | (ObjectName "(" ArraySpec ")") ;
IoControlSpecList ::= (UnitIdentifier "$" ",") | (UnitIdentifier "," FormatIdentifier) | (UnitIdentifier "," IoControlSpec) | IoControlSpec | (IoControlSpecList "," IoControlSpec) ;
DataStmtSet ::= DataStmtObjectList "/" DataStmtValueList "/" ;
CaseSelector ::= ("(" CaseValueRangeList ")") | "default" ;
ModuleBody ::= SpecificationPartConstruct | ModuleSubprogramPartConstruct | (ModuleBody SpecificationPartConstruct) | (ModuleBody ModuleSubprogramPartConstruct) ;
ComplexComponent ::= (Sign? Icon) | RDcon | Name ;
IntrinsicStmt ::= LblDef "intrinsic" IntrinsicList EOS ;
EntityDecl ::= ObjectName | (ObjectName "(" ArraySpec ")") | (ObjectName "*" CharLength) | (ObjectName "(" ArraySpec ")" "*" CharLength) ;
 EntityDecl ::= (ObjectName "=" Expr) | (ObjectName "(" ArraySpec ")" "=" Expr) | (ObjectName "*" CharLength "=" Expr) | (ObjectName "*" CharLength "(" ArraySpec ")" "=" Expr) ;
ProgramStmt ::= LblDef "program" ProgramName EOS ;
AllocatableStmt ::= LblDef "allocatable" ColonColon? ArrayAllocationList EOS ;
CommaExpr ::= "," Expr ;
ArrayDeclarator ::= VariableName "(" ArraySpec ")" ;
ComponentAttrSpec ::= "pointer" | ("dimension" "(" ComponentArraySpec ")") ;
SubroutineInterfaceRange ::= SubroutineParList EOS SubprogramInterfaceBody? EndSubroutineStmt ;
OrOperand ::= AndOperand AndOpAndOperand* ;
AcValueList1 ::= (Expr "," Expr) | (Expr "," AcImpliedDo) | AcImpliedDo | (AcValueList1 "," Expr) | (AcValueList1 "," AcImpliedDo) ;
OrOp ::= SP ".or." SP ;
DoubleDoStmt ::= "do" LblRef CommaLoopControl EOS ;
EndBlockDataStmt ::= LblDef "end" EOS ;
 EndBlockDataStmt ::= (LblDef "endblockdata" EndName? EOS) | (LblDef "end" "blockdata" EndName? EOS) | (LblDef "endblock" "data" EndName? EOS) | (LblDef "end" "block" "data" EndName? EOS) ;
RewindStmt ::= (LblDef "rewind" UnitIdentifier EOS) | (LblDef "rewind" "(" PositionSpecList ")" EOS) ;
UFFactor ::= UFPrimary | (UFPrimary PowerOp UFFactor) ;
DerivedTypeStmt ::= (LblDef "type" TypeName EOS) | (LblDef "type" "::" TypeName EOS) | (LblDef "type" "," AccessSpec "::" TypeName EOS) ;
CPrimary ::= COperand | ("(" CExpr ")") ;
FunctionArg ::= Name "=" Expr ;
ElseIfStmt ::= LblDef EX_2 "elseif" "(" Expr ")" "then" EOS IN_2 ;
 ElseIfStmt ::= LblDef EX_2 "else" "if" "(" Expr ")" "then" EOS IN_2 ;
StmtFunctionRange ::= "(" SFDummyArgNameList? ")" "=" Expr EOS ;
AllocatedShape ::= "(" SectionSubscriptList ")" ;
BodyPlusInternals ::= (Body ContainsStmt InternalSubprogram) | (ContainsStmt InternalSubprogram) | (BodyPlusInternals InternalSubprogram) ;
RelOp ::= (SP ".eq." SP) | (SP ".ne." SP) | (SP ".lt." SP) | (SP ".le." SP) | (SP ".gt." SP) | (SP ".ge." SP) ;
 RelOp ::= "==" | "/=" | "<" | "<=" | ">" | ">=" ;
EntryStmt ::= LblDef "entry" EntryName SubroutineParList "result" "(" Name ")" EOS ;
CaseStmt ::= (LblDef "case" CaseSelector EOS) | (LblDef "case" CaseSelector Name EOS) ;
ReturnStmt ::= LblDef "return" Expr? EOS ;
ImplicitRange ::= Ident "-" Ident ;
ConcatOp ::= "/" SPOFF "/" SPON ;
TypeSpec ::= "integer" | "real" | "doubleprecision" | "complex" | "logical" | "character" | ("character" LengthSelector) ;
 TypeSpec ::= ("integer" KindSelector) | ("real" KindSelector) | ("double" "precision") | ("complex" KindSelector) | ("character" CharSelector) | ("logical" KindSelector) | ("type" "(" TypeName ")") ;
FunctionReference ::= Name "(" ")" ;
 FunctionReference ::= Name "(" FunctionArgList ")" ;
OutputImpliedDo ::= ("(" Expr "," ImpliedDoVariable "=" Expr "," Expr CommaExpr? ")") | ("(" OutputItemList1 "," ImpliedDoVariable "=" Expr "," Expr CommaExpr? ")") ;
SelectCaseRange ::= (SelectCaseBody EndSelectStmt) | EndSelectStmt ;
NamelistStmt ::= LblDef "namelist" NamelistGroups EOS ;
AcImpliedDo ::= ("(" Expr "," ImpliedDoVariable "=" Expr "," Expr ")") | ("(" Expr "," ImpliedDoVariable "=" Expr "," Expr "," Expr ")") | ("(" AcImpliedDo "," ImpliedDoVariable "=" Expr "," Expr ")") | ("(" AcImpliedDo "," ImpliedDoVariable "=" Expr "," Expr "," Expr ")") ;
UFPrimary ::= Icon | Scon | NameDataRef | FunctionReference | ("(" UFExpr ")") ;
WhereStmt ::= LblDef "where" "(" MaskExpr ")" AssignmentStmt ;
ContinueStmt ::= LblDef "continue" EOS ;
SelectCaseBody ::= CaseStmt | (SelectCaseBody CaseBodyConstruct) ;
DimensionStmt ::= LblDef "dimension" ArrayDeclaratorList EOS ;
 DimensionStmt ::= LblDef "dimension" "::" ArrayDeclaratorList EOS ;
PrivateSequenceStmt ::= (LblDef "private" EOS) | (LblDef "sequence" EOS) ;
ComponentDecl ::= (ComponentName "(" ComponentArraySpec ")" "*" CharLength) | (ComponentName "(" ComponentArraySpec ")") | (ComponentName "*" CharLength) | ComponentName ;
WriteStmt ::= LblDef "write" "(" IoControlSpecList ")" OutputItemList? EOS ;
ExitStmt ::= LblDef "exit" EndName? EOS ;
UFExpr ::= UFTerm | (Sign UFTerm) | (UFExpr AddOp UFTerm) ;
FunctionRange ::= FunctionParList EOS Body? EndFunctionStmt ;
 FunctionRange ::= (FunctionParList "result" "(" Name ")" EOS BodyPlusInternals EndFunctionStmt) | (FunctionParList "result" "(" Name ")" EOS Body EndFunctionStmt) | (FunctionParList "result" "(" Name ")" EOS EndFunctionStmt) | (FunctionParList EOS BodyPlusInternals EndFunctionStmt) ;
PointerStmtObject ::= ObjectName | (ObjectName "(" DeferredShapeSpecList ")") ;
CommaLoopControl ::= ","? LoopControl ;
MislexedFcon ::= (RDcon SPOFF RDcon SPON) | (Ident SPOFF RDcon SPON) ;
ElseIfConstruct ::= ElseIfStmt ConditionalBody ;
EndIfStmt ::= LblDef EX_2 "endif" EOS ;
 EndIfStmt ::= LblDef EX_2 "end" "if" EOS ;
EndfileStmt ::= (LblDef "endfile" UnitIdentifier EOS) | (LblDef "endfile" "(" PositionSpecList ")" EOS) ;
 EndfileStmt ::= (LblDef "end" "file" UnitIdentifier EOS) | (LblDef "end" "file" "(" PositionSpecList ")" EOS) ;
BlockDataStmt ::= LblDef "blockdata" BlockDataName? EOS ;
 BlockDataStmt ::= LblDef "block" "data" BlockDataName? EOS ;
EndFunctionStmt ::= LblDef "end" EOS ;
 EndFunctionStmt ::= (LblDef "endfunction" EndName? EOS) | (LblDef "end" "function" EndName? EOS) ;
IfConstruct ::= IfThenStmt ConditionalBody ElseIfConstruct* ElseConstruct? EndIfStmt ;
TargetStmt ::= LblDef "target" ColonColon? TargetObjectList EOS ;
DerivedTypeBody ::= DerivedTypeBodyConstruct | (DerivedTypeBody DerivedTypeBodyConstruct) ;
ComputedGotoStmt ::= LblDef GoToKw "(" LblRefList ")" ","? Expr EOS ;
ElsewhereStmt ::= LblDef "elsewhere" EOS ;
Expr ::= Level5Expr ;
 Expr ::= Expr DefinedBinaryOp Level5Expr ;
GenericSpec ::= ("operator" "(" DefinedOperator ")") | ("assignment" "(" "=" ")") ;
AndOperand ::= NotOp? Level4Expr ;
SubroutineArg ::= Expr | Hcon | ("*" LblRef) ;
 SubroutineArg ::= (Name "=" Expr) | (Name "=" Hcon) | (Name "=" "*" LblRef) ;
ModuleProcedureStmt ::= LblDef "module" "procedure" ProcedureNameList EOS ;
ElseWhere ::= (Where ElsewhereStmt) | (ElseWhere AssignmentStmt) ;
SFExprListRef ::= "(" SFExprList CommaSectionSubscript* ")" ;
ExecutionPartConstruct ::= ExecutableConstruct | FormatStmt | DataStmt | EntryStmt ;
 ExecutionPartConstruct ::= LblDef DoubleDoStmt ;
AndOpAndOperand ::= AndOp AndOperand ;
StopStmt ::= LblDef "stop" IconOrScon? EOS ;
OrUpOrOperand ::= OrOp OrOperand ;
AddOperand ::= MultOperand MultOpMultOperand* ;
ExplicitShapeSpec ::= (LowerBound ":" UpperBound) | UpperBound ;
SubroutineSubprogram ::= LblDef "subroutine" SubroutineName SubroutineRange ;
 SubroutineSubprogram ::= LblDef "recursive" "subroutine" SubroutineName SubroutineRange ;
EndSubroutineStmt ::= LblDef "end" EOS ;
 EndSubroutineStmt ::= (LblDef "endsubroutine" EndName? EOS) | (LblDef "end" "subroutine" EndName? EOS) ;
SaveStmt ::= (LblDef "save" EOS) | (LblDef "save" SavedEntityList EOS) ;
 SaveStmt ::= LblDef "save" "::" SavedEntityList EOS ;
LengthSelector ::= "*" CharLength ;
 LengthSelector ::= "(" TypeParamValue ")" ;
ArrayConstructor ::= "(/" AcValueList "/)" ;
Allocation ::= AllocateObject | (AllocateObject AllocatedShape) ;
--------------------java::java-1-jls-impl.bgf--------------------
ReturnStatement ::= "return" Expression? ";" ;
ArrayAccess ::= Name "[" Expression "]" ;
 ArrayAccess ::= PrimaryNoNewArray "[" Expression "]" ;
DimExpr ::= "[" Expression "]" ;
PrimaryNoNewArray ::= Literal ;
 PrimaryNoNewArray ::= "this" ;
 PrimaryNoNewArray ::= "(" Expression ")" ;
 PrimaryNoNewArray ::= ClassInstanceCreationExpression ;
 PrimaryNoNewArray ::= FieldAccess ;
 PrimaryNoNewArray ::= MethodInvocation ;
 PrimaryNoNewArray ::= ArrayAccess ;
SwitchStatement ::= "switch" "(" Expression ")" SwitchBlock ;
WhileStatementNoShortIf ::= "while" "(" Expression ")" StatementNoShortIf ;
Interfaces ::= "implements" InterfaceTypeList ;
ExclusiveOrExpression ::= AndExpression ;
 ExclusiveOrExpression ::= ExclusiveOrExpression "^" AndExpression ;
StaticInitializer ::= "static" Block ;
PackageDeclaration ::= "package" Name ";" ;
SwitchLabels ::= SwitchLabel ;
 SwitchLabels ::= SwitchLabels SwitchLabel ;
SingleTypeImportDeclaration ::= "import" Name ";" ;
ClassBodyDeclarations ::= ClassBodyDeclaration ;
 ClassBodyDeclarations ::= ClassBodyDeclarations ClassBodyDeclaration ;
MethodInvocation ::= Name "(" ArgumentList? ")" ;
 MethodInvocation ::= Primary "." Identifier "(" ArgumentList? ")" ;
 MethodInvocation ::= "super" "." Identifier "(" ArgumentList? ")" ;
TypeImportOnDemandDeclaration ::= "import" Name "." "*" ";" ;
ArrayCreationExpression ::= "new" PrimitiveType DimExprs Dims? ;
 ArrayCreationExpression ::= "new" ClassOrInterfaceType DimExprs Dims? ;
ClassTypeList ::= ClassType ;
 ClassTypeList ::= ClassTypeList "," ClassType ;
MethodHeader ::= Modifiers? Type MethodDeclarator Throws? ;
 MethodHeader ::= Modifiers? "void" MethodDeclarator Throws? ;
Block ::= "{" BlockStatements? "}" ;
Throws ::= "throws" ClassTypeList ;
VariableDeclarator ::= VariableDeclaratorId ;
 VariableDeclarator ::= VariableDeclaratorId "=" VariableInitializer ;
Assignment ::= LeftHandSide AssignmentOperator AssignmentExpression ;
InterfaceMemberDeclarations ::= InterfaceMemberDeclaration ;
 InterfaceMemberDeclarations ::= InterfaceMemberDeclarations InterfaceMemberDeclaration ;
CatchClause ::= "catch" "(" FormalParameter ")" Block ;
ArrayInitializer ::= "{" VariableInitializers? ","? "}" ;
VariableDeclaratorId ::= Identifier ;
 VariableDeclaratorId ::= VariableDeclaratorId "[" "]" ;
ContinueStatement ::= "continue" Identifier? ";" ;
PreIncrementExpression ::= "++" UnaryExpression ;
Finally ::= "finally" Block ;
ConditionalOrExpression ::= ConditionalAndExpression ;
 ConditionalOrExpression ::= ConditionalOrExpression "||" ConditionalAndExpression ;
FieldAccess ::= Primary "." Identifier ;
 FieldAccess ::= "super" "." Identifier ;
WhileStatement ::= "while" "(" Expression ")" Statement ;
LabeledStatementNoShortIf ::= Identifier ":" StatementNoShortIf ;
Modifiers ::= Modifier ;
 Modifiers ::= Modifiers Modifier ;
IfThenElseStatement ::= "if" "(" Expression ")" StatementNoShortIf "else" Statement ;
InterfaceBody ::= "{" InterfaceMemberDeclarations? "}" ;
Super ::= "extends" ClassType ;
FormalParameter ::= Type VariableDeclaratorId ;
CastExpression ::= "(" PrimitiveType Dims? ")" UnaryExpression ;
 CastExpression ::= "(" Expression ")" UnaryExpressionNotPlusMinus ;
 CastExpression ::= "(" Name Dims ")" UnaryExpressionNotPlusMinus ;
EqualityExpression ::= RelationalExpression ;
 EqualityExpression ::= EqualityExpression "==" RelationalExpression ;
 EqualityExpression ::= EqualityExpression "!=" RelationalExpression ;
BreakStatement ::= "break" Identifier? ";" ;
SwitchBlockStatementGroups ::= SwitchBlockStatementGroup ;
 SwitchBlockStatementGroups ::= SwitchBlockStatementGroups SwitchBlockStatementGroup ;
SwitchBlockStatementGroup ::= SwitchLabels BlockStatements ;
ThrowStatement ::= "throw" Expression ";" ;
CompilationUnit ::= PackageDeclaration? ImportDeclarations? TypeDeclarations? ;
InclusiveOrExpression ::= ExclusiveOrExpression ;
 InclusiveOrExpression ::= InclusiveOrExpression "|" ExclusiveOrExpression ;
ForStatement ::= "for" "(" ForInit? ";" Expression? ";" ForUpdate? ")" Statement ;
ClassInstanceCreationExpression ::= "new" ClassType "(" ArgumentList? ")" ;
FieldDeclaration ::= Modifiers? Type VariableDeclarators ";" ;
ConstructorDeclaration ::= Modifiers? ConstructorDeclarator Throws? ConstructorBody ;
RelationalExpression ::= ShiftExpression ;
 RelationalExpression ::= RelationalExpression "<" ShiftExpression ;
 RelationalExpression ::= RelationalExpression ">" ShiftExpression ;
 RelationalExpression ::= RelationalExpression "<=" ShiftExpression ;
 RelationalExpression ::= RelationalExpression ">=" ShiftExpression ;
 RelationalExpression ::= RelationalExpression "instanceof" ReferenceType ;
IfThenElseStatementNoShortIf ::= "if" "(" Expression ")" StatementNoShortIf "else" StatementNoShortIf ;
LabeledStatement ::= Identifier ":" Statement ;
MethodDeclaration ::= MethodHeader MethodBody ;
AbstractMethodDeclaration ::= MethodHeader ";" ;
ExplicitConstructorInvocation ::= "this" "(" ArgumentList? ")" ";" ;
 ExplicitConstructorInvocation ::= "super" "(" ArgumentList? ")" ";" ;
TypeDeclarations ::= TypeDeclaration ;
 TypeDeclarations ::= TypeDeclarations TypeDeclaration ;
ExtendsInterfaces ::= "extends" InterfaceType ;
 ExtendsInterfaces ::= ExtendsInterfaces "," InterfaceType ;
BlockStatements ::= BlockStatement ;
 BlockStatements ::= BlockStatements BlockStatement ;
InterfaceTypeList ::= InterfaceType ;
 InterfaceTypeList ::= InterfaceTypeList "," InterfaceType ;
AndExpression ::= EqualityExpression ;
 AndExpression ::= AndExpression "&" EqualityExpression ;
MultiplicativeExpression ::= UnaryExpression ;
 MultiplicativeExpression ::= MultiplicativeExpression "*" UnaryExpression ;
 MultiplicativeExpression ::= MultiplicativeExpression "/" UnaryExpression ;
 MultiplicativeExpression ::= MultiplicativeExpression "%" UnaryExpression ;
ConstructorDeclarator ::= SimpleName "(" FormalParameterList? ")" ;
PostDecrementExpression ::= PostfixExpression "--" ;
QualifiedName ::= Name "." Identifier ;
VariableDeclarators ::= VariableDeclarator ;
 VariableDeclarators ::= VariableDeclarators "," VariableDeclarator ;
AdditiveExpression ::= MultiplicativeExpression ;
 AdditiveExpression ::= AdditiveExpression "+" MultiplicativeExpression ;
 AdditiveExpression ::= AdditiveExpression "-" MultiplicativeExpression ;
InterfaceDeclaration ::= Modifiers? "interface" Identifier ExtendsInterfaces? InterfaceBody ;
ImportDeclarations ::= ImportDeclaration ;
 ImportDeclarations ::= ImportDeclarations ImportDeclaration ;
ConditionalExpression ::= ConditionalOrExpression ;
 ConditionalExpression ::= ConditionalOrExpression "?" Expression ":" ConditionalExpression ;
LocalVariableDeclarationStatement ::= LocalVariableDeclaration ";" ;
ConstructorBody ::= "{" ExplicitConstructorInvocation? BlockStatements? "}" ;
SynchronizedStatement ::= "synchronized" "(" Expression ")" Block ;
ArgumentList ::= Expression ;
 ArgumentList ::= ArgumentList "," Expression ;
ShiftExpression ::= AdditiveExpression ;
 ShiftExpression ::= ShiftExpression "<<" AdditiveExpression ;
 ShiftExpression ::= ShiftExpression ">>" AdditiveExpression ;
 ShiftExpression ::= ShiftExpression ">>>" AdditiveExpression ;
ClassBody ::= "{" ClassBodyDeclarations? "}" ;
SwitchBlock ::= "{" SwitchBlockStatementGroups? SwitchLabels? "}" ;
FormalParameterList ::= FormalParameter ;
 FormalParameterList ::= FormalParameterList "," FormalParameter ;
ExpressionStatement ::= StatementExpression ";" ;
DimExprs ::= DimExpr ;
 DimExprs ::= DimExprs DimExpr ;
IfThenStatement ::= "if" "(" Expression ")" Statement ;
TryStatement ::= "try" Block Catches ;
 TryStatement ::= "try" Block Catches? Finally ;
ArrayType ::= PrimitiveType "[" "]" ;
 ArrayType ::= Name "[" "]" ;
 ArrayType ::= ArrayType "[" "]" ;
LocalVariableDeclaration ::= Type VariableDeclarators ;
ForStatementNoShortIf ::= "for" "(" ForInit? ";" Expression? ";" ForUpdate? ")" StatementNoShortIf ;
MethodDeclarator ::= Identifier "(" FormalParameterList? ")" ;
 MethodDeclarator ::= MethodDeclarator "[" "]" ;
VariableInitializers ::= VariableInitializer ;
 VariableInitializers ::= VariableInitializers "," VariableInitializer ;
Dims ::= "[" "]" ;
 Dims ::= Dims "[" "]" ;
UnaryExpressionNotPlusMinus ::= PostfixExpression ;
 UnaryExpressionNotPlusMinus ::= "~" UnaryExpression ;
 UnaryExpressionNotPlusMinus ::= "!" UnaryExpression ;
 UnaryExpressionNotPlusMinus ::= CastExpression ;
Catches ::= CatchClause ;
 Catches ::= Catches CatchClause ;
ConditionalAndExpression ::= InclusiveOrExpression ;
 ConditionalAndExpression ::= ConditionalAndExpression "&&" InclusiveOrExpression ;
PreDecrementExpression ::= "--" UnaryExpression ;
UnaryExpression ::= PreIncrementExpression ;
 UnaryExpression ::= PreDecrementExpression ;
 UnaryExpression ::= "+" UnaryExpression ;
 UnaryExpression ::= "-" UnaryExpression ;
 UnaryExpression ::= UnaryExpressionNotPlusMinus ;
PostIncrementExpression ::= PostfixExpression "++" ;
StatementExpressionList ::= StatementExpression ;
 StatementExpressionList ::= StatementExpressionList "," StatementExpression ;
DoStatement ::= "do" Statement "while" "(" Expression ")" ";" ;
ClassDeclaration ::= Modifiers? "class" Identifier Super? Interfaces? ClassBody ;
SwitchLabel ::= "case" ConstantExpression ":" ;
 SwitchLabel ::= "default" ":" ;
--------------------java::java-1-jls-read.bgf--------------------
ReturnStatement ::= "return" Expression? ";" ;
ArrayAccess ::= ExpressionName "[" Expression "]" ;
 ArrayAccess ::= PrimaryNoNewArray "[" Expression "]" ;
DimExpr ::= "[" Expression "]" ;
PrimaryNoNewArray ::= Literal ;
 PrimaryNoNewArray ::= "this" ;
 PrimaryNoNewArray ::= "(" Expression ")" ;
 PrimaryNoNewArray ::= ClassInstanceCreationExpression ;
 PrimaryNoNewArray ::= FieldAccess ;
 PrimaryNoNewArray ::= MethodInvocation ;
 PrimaryNoNewArray ::= ArrayAccess ;
SwitchStatement ::= "switch" "(" Expression ")" SwitchBlock ;
MethodModifiers ::= MethodModifier ;
 MethodModifiers ::= MethodModifiers MethodModifier ;
WhileStatementNoShortIf ::= "while" "(" Expression ")" StatementNoShortIf ;
Interfaces ::= "implements" InterfaceTypeList ;
ExclusiveOrExpression ::= AndExpression ;
 ExclusiveOrExpression ::= ExclusiveOrExpression "^" AndExpression ;
AbstractMethodModifiers ::= AbstractMethodModifier ;
 AbstractMethodModifiers ::= AbstractMethodModifiers AbstractMethodModifier ;
StaticInitializer ::= "static" Block ;
PackageDeclaration ::= "package" PackageName ";" ;
SwitchLabels ::= SwitchLabel ;
 SwitchLabels ::= SwitchLabels SwitchLabel ;
SingleTypeImportDeclaration ::= "import" TypeName ";" ;
ClassBodyDeclarations ::= ClassBodyDeclaration ;
 ClassBodyDeclarations ::= ClassBodyDeclarations ClassBodyDeclaration ;
MethodInvocation ::= MethodName "(" ArgumentList? ")" ;
 MethodInvocation ::= Primary "." Identifier "(" ArgumentList? ")" ;
 MethodInvocation ::= "super" "." Identifier "(" ArgumentList? ")" ;
TypeImportOnDemandDeclaration ::= "import" PackageName "." "*" ";" ;
ArrayCreationExpression ::= "new" PrimitiveType DimExprs Dims? ;
 ArrayCreationExpression ::= "new" TypeName DimExprs Dims? ;
ClassTypeList ::= ClassType ;
 ClassTypeList ::= ClassTypeList "," ClassType ;
MethodHeader ::= MethodModifiers? ResultType MethodDeclarator Throws? ;
Block ::= "{" BlockStatements? "}" ;
Throws ::= "throws" ClassTypeList ;
VariableDeclarator ::= VariableDeclaratorId ;
 VariableDeclarator ::= VariableDeclaratorId "=" VariableInitializer ;
Assignment ::= LeftHandSide AssignmentOperator AssignmentExpression ;
InterfaceMemberDeclarations ::= InterfaceMemberDeclaration ;
 InterfaceMemberDeclarations ::= InterfaceMemberDeclarations InterfaceMemberDeclaration ;
CatchClause ::= "catch" "(" FormalParameter ")" Block ;
ArrayInitializer ::= "{" VariableInitializers? ","? "}" ;
VariableDeclaratorId ::= Identifier ;
 VariableDeclaratorId ::= VariableDeclaratorId "[" "]" ;
ContinueStatement ::= "continue" Identifier? ";" ;
PreIncrementExpression ::= "++" UnaryExpression ;
ExpressionName ::= Identifier ;
 ExpressionName ::= AmbiguousName "." Identifier ;
Finally ::= "finally" Block ;
InterfaceModifiers ::= InterfaceModifier ;
 InterfaceModifiers ::= InterfaceModifiers InterfaceModifier ;
ConditionalOrExpression ::= ConditionalAndExpression ;
 ConditionalOrExpression ::= ConditionalOrExpression "||" ConditionalAndExpression ;
FieldAccess ::= Primary "." Identifier ;
 FieldAccess ::= "super" "." Identifier ;
WhileStatement ::= "while" "(" Expression ")" Statement ;
LabeledStatementNoShortIf ::= Identifier ":" StatementNoShortIf ;
IfThenElseStatement ::= "if" "(" Expression ")" StatementNoShortIf "else" Statement ;
InterfaceBody ::= "{" InterfaceMemberDeclarations? "}" ;
Super ::= "extends" ClassType ;
FormalParameter ::= Type VariableDeclaratorId ;
CastExpression ::= "(" PrimitiveType Dims? ")" UnaryExpression ;
 CastExpression ::= "(" ReferenceType ")" UnaryExpressionNotPlusMinus ;
EqualityExpression ::= RelationalExpression ;
 EqualityExpression ::= EqualityExpression "==" RelationalExpression ;
 EqualityExpression ::= EqualityExpression "!=" RelationalExpression ;
PackageName ::= Identifier ;
 PackageName ::= PackageName "." Identifier ;
BreakStatement ::= "break" Identifier? ";" ;
SwitchBlockStatementGroups ::= SwitchBlockStatementGroup ;
 SwitchBlockStatementGroups ::= SwitchBlockStatementGroups SwitchBlockStatementGroup ;
SwitchBlockStatementGroup ::= SwitchLabels BlockStatements ;
ThrowStatement ::= "throw" Expression ";" ;
InclusiveOrExpression ::= ExclusiveOrExpression ;
 InclusiveOrExpression ::= InclusiveOrExpression "|" ExclusiveOrExpression ;
CompilationUnit ::= PackageDeclaration? ImportDeclarations? TypeDeclarations? ;
ForStatement ::= "for" "(" ForInit? ";" Expression? ";" ForUpdate? ")" Statement ;
ClassInstanceCreationExpression ::= "new" ClassType "(" ArgumentList? ")" ;
ConstructorModifiers ::= ConstructorModifier ;
 ConstructorModifiers ::= ConstructorModifiers ConstructorModifier ;
FieldModifiers ::= FieldModifier ;
 FieldModifiers ::= FieldModifiers FieldModifier ;
FieldDeclaration ::= FieldModifiers? Type VariableDeclarators ";" ;
ConstructorDeclaration ::= ConstructorModifiers? ConstructorDeclarator Throws? ConstructorBody ;
RelationalExpression ::= ShiftExpression ;
 RelationalExpression ::= RelationalExpression "<" ShiftExpression ;
 RelationalExpression ::= RelationalExpression ">" ShiftExpression ;
 RelationalExpression ::= RelationalExpression "<=" ShiftExpression ;
 RelationalExpression ::= RelationalExpression ">=" ShiftExpression ;
 RelationalExpression ::= RelationalExpression "instanceof" ReferenceType ;
IfThenElseStatementNoShortIf ::= "if" "(" Expression ")" StatementNoShortIf "else" StatementNoShortIf ;
LabeledStatement ::= Identifier ":" Statement ;
MethodDeclaration ::= MethodHeader MethodBody ;
AbstractMethodDeclaration ::= AbstractMethodModifiers? ResultType MethodDeclarator Throws? ";" ;
ExplicitConstructorInvocation ::= "this" "(" ArgumentList? ")" ";" ;
 ExplicitConstructorInvocation ::= "super" "(" ArgumentList? ")" ";" ;
TypeDeclarations ::= TypeDeclaration ;
 TypeDeclarations ::= TypeDeclarations TypeDeclaration ;
ExtendsInterfaces ::= "extends" InterfaceType ;
 ExtendsInterfaces ::= ExtendsInterfaces "," InterfaceType ;
BlockStatements ::= BlockStatement ;
 BlockStatements ::= BlockStatements BlockStatement ;
InterfaceTypeList ::= InterfaceType ;
 InterfaceTypeList ::= InterfaceTypeList "," InterfaceType ;
AndExpression ::= EqualityExpression ;
 AndExpression ::= AndExpression "&" EqualityExpression ;
MultiplicativeExpression ::= UnaryExpression ;
 MultiplicativeExpression ::= MultiplicativeExpression "*" UnaryExpression ;
 MultiplicativeExpression ::= MultiplicativeExpression "/" UnaryExpression ;
 MultiplicativeExpression ::= MultiplicativeExpression "%" UnaryExpression ;
MethodName ::= Identifier ;
 MethodName ::= AmbiguousName "." Identifier ;
ConstructorDeclarator ::= Identifier "(" FormalParameterList? ")" ;
PostDecrementExpression ::= PostfixExpression "--" ;
VariableDeclarators ::= VariableDeclarator ;
 VariableDeclarators ::= VariableDeclarators "," VariableDeclarator ;
AdditiveExpression ::= MultiplicativeExpression ;
 AdditiveExpression ::= AdditiveExpression "+" MultiplicativeExpression ;
 AdditiveExpression ::= AdditiveExpression "-" MultiplicativeExpression ;
InterfaceDeclaration ::= InterfaceModifiers? "interface" Identifier ExtendsInterfaces? InterfaceBody ;
ImportDeclarations ::= ImportDeclaration ;
 ImportDeclarations ::= ImportDeclarations ImportDeclaration ;
ConditionalExpression ::= ConditionalOrExpression ;
 ConditionalExpression ::= ConditionalOrExpression "?" Expression ":" ConditionalExpression ;
LocalVariableDeclarationStatement ::= LocalVariableDeclaration ";" ;
ConstructorBody ::= "{" ExplicitConstructorInvocation? BlockStatements? "}" ;
SynchronizedStatement ::= "synchronized" "(" Expression ")" Block ;
ArgumentList ::= Expression ;
 ArgumentList ::= ArgumentList "," Expression ;
ShiftExpression ::= AdditiveExpression ;
 ShiftExpression ::= ShiftExpression "<<" AdditiveExpression ;
 ShiftExpression ::= ShiftExpression ">>" AdditiveExpression ;
 ShiftExpression ::= ShiftExpression ">>>" AdditiveExpression ;
ClassBody ::= "{" ClassBodyDeclarations? "}" ;
SwitchBlock ::= "{" SwitchBlockStatementGroups? SwitchLabels? "}" ;
ConstantModifiers ::= ConstantModifier ;
 ConstantModifiers ::= ConstantModifiers ConstantModifier ;
FormalParameterList ::= FormalParameter ;
 FormalParameterList ::= FormalParameterList "," FormalParameter ;
AmbiguousName ::= Identifier ;
 AmbiguousName ::= AmbiguousName "." Identifier ;
ExpressionStatement ::= StatementExpression ";" ;
DimExprs ::= DimExpr ;
 DimExprs ::= DimExprs DimExpr ;
ConstantDeclaration ::= ConstantModifiers? Type VariableDeclarator ;
IfThenStatement ::= "if" "(" Expression ")" Statement ;
TryStatement ::= "try" Block Catches ;
 TryStatement ::= "try" Block Catches? Finally ;
ArrayType ::= Type "[" "]" ;
LocalVariableDeclaration ::= Type VariableDeclarators ;
ForStatementNoShortIf ::= "for" "(" ForInit? ";" Expression? ";" ForUpdate? ")" StatementNoShortIf ;
MethodDeclarator ::= Identifier "(" FormalParameterList? ")" ;
 MethodDeclarator ::= MethodDeclarator "[" "]" ;
VariableInitializers ::= VariableInitializer ;
 VariableInitializers ::= VariableInitializers "," VariableInitializer ;
Dims ::= "[" "]" ;
 Dims ::= Dims "[" "]" ;
UnaryExpressionNotPlusMinus ::= PostfixExpression ;
 UnaryExpressionNotPlusMinus ::= "~" UnaryExpression ;
 UnaryExpressionNotPlusMinus ::= "!" UnaryExpression ;
 UnaryExpressionNotPlusMinus ::= CastExpression ;
Catches ::= CatchClause ;
 Catches ::= Catches CatchClause ;
ConditionalAndExpression ::= InclusiveOrExpression ;
 ConditionalAndExpression ::= ConditionalAndExpression "&&" InclusiveOrExpression ;
PreDecrementExpression ::= "--" UnaryExpression ;
UnaryExpression ::= PreIncrementExpression ;
 UnaryExpression ::= PreDecrementExpression ;
 UnaryExpression ::= "+" UnaryExpression ;
 UnaryExpression ::= "-" UnaryExpression ;
 UnaryExpression ::= UnaryExpressionNotPlusMinus ;
PostIncrementExpression ::= PostfixExpression "++" ;
StatementExpressionList ::= StatementExpression ;
 StatementExpressionList ::= StatementExpressionList "," StatementExpression ;
TypeName ::= Identifier ;
 TypeName ::= PackageName "." Identifier ;
ClassModifiers ::= ClassModifier ;
 ClassModifiers ::= ClassModifiers ClassModifier ;
DoStatement ::= "do" Statement "while" "(" Expression ")" ";" ;
ClassDeclaration ::= ClassModifiers? "class" Identifier Super? Interfaces? ClassBody ;
SwitchLabel ::= "case" ConstantExpression ":" ;
 SwitchLabel ::= "default" ":" ;
--------------------java::java-2-jls-impl.bgf--------------------
Selector ::= "." Identifier Arguments? ;
 Selector ::= "." "this" ;
 Selector ::= "." "super" SuperSuffix ;
 Selector ::= "." "new" InnerCreator ;
 Selector ::= "[" Expression "]" ;
ClassOrInterfaceDeclaration ::= ModifiersOpt ClassDeclaration | InterfaceDeclaration ;
Expression3 ::= PrefixOp Expression3 ;
 Expression3 ::= "(" Expression | Type ")" Expression3 ;
 Expression3 ::= Primary Selector* PostfixOp* ;
IdentifierSuffix ::= "[" ("]" BracketsOpt "." "class") | (Expression "]") ;
 IdentifierSuffix ::= Arguments ;
 IdentifierSuffix ::= "." "class" | "this" | ("super" Arguments) | ("new" InnerCreator) ;
Expression2 ::= Expression3 Expression2Rest? ;
ParExpression ::= "(" Expression ")" ;
Expression1 ::= Expression2 Expression1Rest? ;
Expression ::= Expression1 (AssignmentOperator Expression1)? ;
Arguments ::= "(" (Expression ("," Expression)*)? ")" ;
ImportDeclaration ::= "import" Identifier ("." Identifier)* ("." "*")? ";" ;
ConstantDeclaratorsRest ::= ConstantDeclaratorRest ("," ConstantDeclarator)* ;
Expression2Rest ::= (Infixop Expression3)* ;
 Expression2Rest ::= "instanceof" Type ;
VariableDeclarator ::= Identifier VariableDeclaratorRest ;
Block ::= "{" BlockStatements "}" ;
Expression1Rest ::= ("?" Expression ":" Expression1)? ;
VoidInterfaceMethodDeclaratorRest ::= FormalParameters BracketsOpt ("throws" QualifiedIdentifierList)? ";" ;
CatchClause ::= "catch" "(" FormalParameter ")" Block ;
ArrayInitializer ::= "{" (VariableInitializer ("," VariableInitializer)* ","?)? "}" ;
ClassCreatorRest ::= Arguments ClassBody? ;
VariableDeclaratorId ::= Identifier BracketsOpt ;
InterfaceMethodOrFieldDecl ::= Type Identifier InterfaceMethodOrFieldRest ;
ArrayCreatorRest ::= "[" ("]" BracketsOpt ArrayInitializer) | (Expression "]" ("[" Expression "]")* BracketsOpt) ;
VariableDeclarators ::= VariableDeclarator ("," VariableDeclarator)* ;
Primary ::= "(" Expression ")" ;
 Primary ::= "this" Arguments? ;
 Primary ::= "super" SuperSuffix ;
 Primary ::= Literal ;
 Primary ::= "new" Creator ;
 Primary ::= Identifier ("." Identifier)* IdentifierSuffix? ;
 Primary ::= BasicType BracketsOpt "." "class" ;
 Primary ::= "void" "." "class" ;
VariableDeclaratorRest ::= BracketsOpt ("=" VariableInitializer)? ;
InterfaceDeclaration ::= "interface" Identifier ("extends" TypeList)? InterfaceBody ;
MethodOrFieldDecl ::= Type Identifier MethodOrFieldRest ;
ConstructorDeclaratorRest ::= FormalParameters ("throws" QualifiedIdentifierList)? MethodBody ;
InterfaceMethodDeclaratorRest ::= FormalParameters BracketsOpt ("throws" QualifiedIdentifierList)? ";" ;
InterfaceBodyDeclaration ::= ";" ;
 InterfaceBodyDeclaration ::= ModifiersOpt InterfaceMemberDecl ;
InterfaceMemberDecl ::= InterfaceMethodOrFieldDecl ;
 InterfaceMemberDecl ::= "void" Identifier VoidInterfaceMethodDeclaratorRest ;
 InterfaceMemberDecl ::= ClassOrInterfaceDeclaration ;
LocalVariableDeclarationStatement ::= "final"? Type VariableDeclarators ";" ;
InterfaceBody ::= "{" InterfaceBodyDeclaration* "}" ;
ClassBody ::= "{" ClassBodyDeclaration* "}" ;
Type ::= Identifier ("." Identifier)* BracketsOpt ;
 Type ::= BasicType ;
FormalParameter ::= "final"? Type VariableDeclaratorId ;
FormalParameters ::= "(" (FormalParameter ("," FormalParameter)*)? ")" ;
ForInit ::= StatementExpression MoreStatementExpressions ;
 ForInit ::= "final"? Type VariableDeclarators ;
TypeList ::= Type ("," Type)* ;
ExpressionStatement ::= StatementExpression ";" ;
InnerCreator ::= Identifier ClassCreatorRest ;
ConstantDeclarator ::= Identifier ConstantDeclaratorRest ;
ForUpdate ::= StatementExpression MoreStatementExpressions ;
InterfaceMethodOrFieldRest ::= ConstantDeclaratorsRest ";" ;
 InterfaceMethodOrFieldRest ::= InterfaceMethodDeclaratorRest ;
Statement ::= Block ;
 Statement ::= "if" ParExpression Statement ("else" Statement)? ;
 Statement ::= "for" "(" ForInit? ";" Expression? ";" ForUpdate? ")" Statement ;
 Statement ::= "while" ParExpression Statement ;
 Statement ::= "do" Statement "while" ParExpression ";" ;
 Statement ::= "try" Block Catches | (Catches? "finally" Block) ;
 Statement ::= "switch" ParExpression "{" SwitchBlockStatementGroups "}" ;
 Statement ::= "synchronized" ParExpression Block ;
 Statement ::= "return" Expression? ";" ;
 Statement ::= "throw" Expression ";" ;
 Statement ::= "break" Identifier? ";" ;
 Statement ::= "continue" Identifier? ";" ;
 Statement ::= ";" ;
 Statement ::= ExpressionStatement ;
 Statement ::= Identifier ":" Statement ;
Creator ::= QualifiedIdentifier ArrayCreatorRest | ClassCreatorRest ;
SuperSuffix ::= Arguments ;
 SuperSuffix ::= "." Identifier Arguments? ;
SwitchBlockStatementGroup ::= SwitchLabel BlockStatements ;
Catches ::= CatchClause CatchClause* ;
ConstantDeclaratorRest ::= BracketsOpt "=" VariableInitializer ;
BracketsOpt ::= ("[" "]")* ;
CompilationUnit ::= ("package" QualifiedIdentifier ";")? ImportDeclaration* TypeDeclaration* ;
MethodDeclaratorRest ::= FormalParameters BracketsOpt ("throws" QualifiedIdentifierList)? MethodBody | ";" ;
QualifiedIdentifier ::= Identifier ("." Identifier)* ;
MemberDecl ::= MethodOrFieldDecl ;
 MemberDecl ::= "void" Identifier MethodDeclaratorRest ;
 MemberDecl ::= Identifier ConstructorDeclaratorRest ;
 MemberDecl ::= ClassOrInterfaceDeclaration ;
QualifiedIdentifierList ::= QualifiedIdentifier ("," QualifiedIdentifier)* ;
ClassDeclaration ::= "class" Identifier ("extends" Type)? ("implements" TypeList)? ClassBody ;
BlockStatement ::= LocalVariableDeclarationStatement ;
 BlockStatement ::= ClassOrInterfaceDeclaration ;
 BlockStatement ::= (Identifier ":")? Statement ;
MoreStatementExpressions ::= ("," StatementExpression)* ;
ClassBodyDeclaration ::= ";" ;
 ClassBodyDeclaration ::= "static"? Block ;
 ClassBodyDeclaration ::= ModifiersOpt MemberDecl ;
SwitchLabel ::= "case" ConstantExpression ":" ;
 SwitchLabel ::= "default" ":" ;
--------------------java::jdt.bgf--------------------
StringLiteral ::= escapedValue::α literalValue::α ;
SimpleName ::= identifier::α declaration::α ;
ArrayAccess ::= array::α index::α ;
LabeledStatement ::= body::α label::α ;
SwitchStatement ::= expression::α (statements::α)+ ;
MethodDeclaration ::= body::α extraDimensions::α name::α returnType::α constructor::α varargs::α (parameters::α)+ (thrownExceptions::α)+ (typeParameters::α)+ ;
MemberRef ::= name::α qualifier::α ;
ArrayCreation ::= (dimensions::α)+ initializer::α type::α ;
Modifier ::= abstract::α final::α native::α none::α private::α protected::α public::α static::α strictfp::α synchronized::α transient::α volatile::α ;
MethodRefParameter ::= name::α type::α varargs::α ;
VariableDeclarationExpression ::= (fragments::α)+ (modifiers::α)+ type::α ;
ImportDeclaration ::= onDemand::α static::α name::α ;
PackageDeclaration ::= (annotations::α)+ javadoc::α name::α ;
ParameterizedType ::= type::α (typeArguments::α)+ ;
IfStatement ::= elseStatement::α expression::α thenStatement::α ;
BlockComment ::= alternateRoot::α ;
MethodInvocation ::= (arguments::α)+ expression::α name::α (typeArguments::α)+ ;
TypeParameter ::= name::α (typeBounds::α)+ ;
VariableDeclarationFragment ::= extraDimensions::α initializer::α name::α ;
Assignment ::= leftHandSide::α operator::α rightHandSide::α ;
LineComment ::= alternateRoot::α ;
PrefixExpression ::= operand::α operator::α ;
CatchClause ::= body::α exception::α ;
MarkerAnnotation ::= typeName::α ;
AssertStatement ::= expression::α message::α ;
InfixExpression ::= (extendedOperands::α)+ leftOperand::α operator::α rightOperand::α ;
QualifiedName ::= name::α qualifier::α ;
CharacterLiteral ::= charValue::α escapedValue::α ;
SwitchCase ::= expression::α default::α ;
SuperFieldAccess ::= name::α qualifier::α ;
TagElement ::= (fragments::α)+ tagName::α nested::α ;
WhileStatement ::= body::α expression::α ;
FieldAccess ::= expression::α name::α ;
ConditionalExpression ::= elseExpression::α expression::α thenExpression::α ;
EnhancedForStatement ::= body::α expression::α parameter::α ;
SynchronizedStatement ::= body::α expression::α ;
EnumDeclaration ::= (superInterfaceTypes::α)+ (enumConstants::α)+ ;
CastExpression ::= expression::α type::α ;
AnnotationTypeMemberDeclaration ::= default::α name::α type::α ;
SingleVariableDeclaration ::= type::α varargs::α (modifiers::α)+ ;
QualifiedType ::= name::α qualifier::α ;
EnumConstantDeclaration ::= (arguments::α)+ anonymousClassDeclaration::α name::α ;
WildcardType ::= bound::α upperBound::α ;
TryStatement ::= (catchClauses::α)+ body::α finally::α ;
ArrayType ::= componentType::α dimensions::α elementType::α ;
MethodRef ::= name::α qualifier::α (parameters::α)+ ;
VariableDeclarationStatement ::= (fragments::α)+ (modifiers::α)+ type::α ;
AnnotationTypeDeclaration ::= (bodyDeclarations::α)+ name::α localTypeDeclaration::α memberTypeDeclaration::α packageMemberTypeDeclaration::α ;
MemberValuePair ::= name::α value::α ;
SuperConstructorInvocation ::= (arguments::α)+ expression::α (typeArguments::α)+ ;
PostfixExpression ::= operand::α operator::α ;
SuperMethodInvocation ::= (arguments::α)+ name::α qualifier::α (typeArguments::α)+ ;
ClassInstanceCreation ::= (arguments::α)+ anonymousClassDeclaration::α expression::α type::α (typeArguments::α)+ ;
ConstructorInvocation ::= (arguments::α)+ (typeArguments::α)+ ;
NullLiteral ::= resolveBoxing::α resolveUnboxing::α ;
CompilationUnit ::= (comments::α)+ package::α (imports::α)+ (types::α)+ ;
ForStatement ::= body::α expression::α (initializers::α)+ (updaters::α)+ ;
DoStatement ::= body::α expression::α ;
InstanceofExpression ::= leftOperand::α rightOperand::α ;
TypeDeclaration ::= superclassType::α interface::α (superInterfaceTypes::α)+ (typeParameters::α)+ ;
FieldDeclaration ::= (fragments::α)+ type::α ;
--------------------java::java-2-jls-read.bgf--------------------
ReturnStatement ::= "return" Expression? ";" ;
ArrayAccess ::= ExpressionName "[" Expression "]" ;
 ArrayAccess ::= PrimaryNoNewArray "[" Expression "]" ;
DimExpr ::= "[" Expression "]" ;
PrimaryNoNewArray ::= Literal ;
 PrimaryNoNewArray ::= Type "." "class" ;
 PrimaryNoNewArray ::= "void" "." "class" ;
 PrimaryNoNewArray ::= "this" ;
 PrimaryNoNewArray ::= ClassName "." "this" ;
 PrimaryNoNewArray ::= "(" Expression ")" ;
 PrimaryNoNewArray ::= ClassInstanceCreationExpression ;
 PrimaryNoNewArray ::= FieldAccess ;
 PrimaryNoNewArray ::= MethodInvocation ;
 PrimaryNoNewArray ::= ArrayAccess ;
SwitchStatement ::= "switch" "(" Expression ")" SwitchBlock ;
MethodModifiers ::= MethodModifier ;
 MethodModifiers ::= MethodModifiers MethodModifier ;
WhileStatementNoShortIf ::= "while" "(" Expression ")" StatementNoShortIf ;
Interfaces ::= "implements" InterfaceTypeList ;
ExclusiveOrExpression ::= AndExpression ;
 ExclusiveOrExpression ::= ExclusiveOrExpression "^" AndExpression ;
AbstractMethodModifiers ::= AbstractMethodModifier ;
 AbstractMethodModifiers ::= AbstractMethodModifiers AbstractMethodModifier ;
StaticInitializer ::= "static" Block ;
PackageDeclaration ::= "package" PackageName ";" ;
SwitchLabels ::= SwitchLabel ;
 SwitchLabels ::= SwitchLabels SwitchLabel ;
SingleTypeImportDeclaration ::= "import" TypeName ";" ;
ClassBodyDeclarations ::= ClassBodyDeclaration ;
 ClassBodyDeclarations ::= ClassBodyDeclarations ClassBodyDeclaration ;
MethodInvocation ::= MethodName "(" ArgumentList? ")" ;
 MethodInvocation ::= Primary "." Identifier "(" ArgumentList? ")" ;
 MethodInvocation ::= "super" "." Identifier "(" ArgumentList? ")" ;
 MethodInvocation ::= ClassName "." "super" "." Identifier "(" ArgumentList? ")" ;
TypeImportOnDemandDeclaration ::= "import" PackageOrTypeName "." "*" ";" ;
ArrayCreationExpression ::= "new" PrimitiveType DimExprs Dims? ;
 ArrayCreationExpression ::= "new" TypeName DimExprs Dims? ;
 ArrayCreationExpression ::= "new" PrimitiveType Dims ArrayInitializer ;
 ArrayCreationExpression ::= "new" TypeName Dims ArrayInitializer ;
ClassTypeList ::= ClassType ;
 ClassTypeList ::= ClassTypeList "," ClassType ;
MethodHeader ::= MethodModifiers? ResultType MethodDeclarator Throws? ;
Block ::= "{" BlockStatements? "}" ;
Throws ::= "throws" ClassTypeList ;
VariableDeclarator ::= VariableDeclaratorId ;
 VariableDeclarator ::= VariableDeclaratorId "=" VariableInitializer ;
Assignment ::= LeftHandSide AssignmentOperator AssignmentExpression ;
InterfaceMemberDeclarations ::= InterfaceMemberDeclaration ;
 InterfaceMemberDeclarations ::= InterfaceMemberDeclarations InterfaceMemberDeclaration ;
CatchClause ::= "catch" "(" FormalParameter ")" Block ;
ArrayInitializer ::= "{" VariableInitializers? ","? "}" ;
VariableDeclaratorId ::= Identifier ;
 VariableDeclaratorId ::= VariableDeclaratorId "[" "]" ;
ContinueStatement ::= "continue" Identifier? ";" ;
PreIncrementExpression ::= "++" UnaryExpression ;
ExpressionName ::= Identifier ;
 ExpressionName ::= AmbiguousName "." Identifier ;
Finally ::= "finally" Block ;
InterfaceModifiers ::= InterfaceModifier ;
 InterfaceModifiers ::= InterfaceModifiers InterfaceModifier ;
ConditionalOrExpression ::= ConditionalAndExpression ;
 ConditionalOrExpression ::= ConditionalOrExpression "||" ConditionalAndExpression ;
FieldAccess ::= Primary "." Identifier ;
 FieldAccess ::= "super" "." Identifier ;
 FieldAccess ::= ClassName "." "super" "." Identifier ;
WhileStatement ::= "while" "(" Expression ")" Statement ;
LabeledStatementNoShortIf ::= Identifier ":" StatementNoShortIf ;
IfThenElseStatement ::= "if" "(" Expression ")" StatementNoShortIf "else" Statement ;
InterfaceBody ::= "{" InterfaceMemberDeclarations? "}" ;
Super ::= "extends" ClassType ;
FormalParameter ::= "final"? Type VariableDeclaratorId ;
CastExpression ::= "(" PrimitiveType Dims? ")" UnaryExpression ;
 CastExpression ::= "(" ReferenceType ")" UnaryExpressionNotPlusMinus ;
EqualityExpression ::= RelationalExpression ;
 EqualityExpression ::= EqualityExpression "==" RelationalExpression ;
 EqualityExpression ::= EqualityExpression "!=" RelationalExpression ;
PackageName ::= Identifier ;
 PackageName ::= PackageName "." Identifier ;
BreakStatement ::= "break" Identifier? ";" ;
SwitchBlockStatementGroups ::= SwitchBlockStatementGroup ;
 SwitchBlockStatementGroups ::= SwitchBlockStatementGroups SwitchBlockStatementGroup ;
SwitchBlockStatementGroup ::= SwitchLabels BlockStatements ;
ThrowStatement ::= "throw" Expression ";" ;
InclusiveOrExpression ::= ExclusiveOrExpression ;
 InclusiveOrExpression ::= InclusiveOrExpression "|" ExclusiveOrExpression ;
CompilationUnit ::= PackageDeclaration? ImportDeclarations? TypeDeclarations? ;
ForStatement ::= "for" "(" ForInit? ";" Expression? ";" ForUpdate? ")" Statement ;
ClassInstanceCreationExpression ::= "new" ClassOrInterfaceType "(" ArgumentList? ")" ClassBody? ;
 ClassInstanceCreationExpression ::= Primary "." "new" Identifier "(" ArgumentList? ")" ClassBody? ;
ConstructorModifiers ::= ConstructorModifier ;
 ConstructorModifiers ::= ConstructorModifiers ConstructorModifier ;
FieldModifiers ::= FieldModifier ;
 FieldModifiers ::= FieldModifiers FieldModifier ;
ConstructorDeclaration ::= ConstructorModifiers? ConstructorDeclarator Throws? ConstructorBody ;
FieldDeclaration ::= FieldModifiers? Type VariableDeclarators ";" ;
RelationalExpression ::= ShiftExpression ;
 RelationalExpression ::= RelationalExpression "<" ShiftExpression ;
 RelationalExpression ::= RelationalExpression ">" ShiftExpression ;
 RelationalExpression ::= RelationalExpression "<=" ShiftExpression ;
 RelationalExpression ::= RelationalExpression ">=" ShiftExpression ;
 RelationalExpression ::= RelationalExpression "instanceof" ReferenceType ;
IfThenElseStatementNoShortIf ::= "if" "(" Expression ")" StatementNoShortIf "else" StatementNoShortIf ;
LabeledStatement ::= Identifier ":" Statement ;
MethodDeclaration ::= MethodHeader MethodBody ;
AbstractMethodDeclaration ::= AbstractMethodModifiers? ResultType MethodDeclarator Throws? ";" ;
ExplicitConstructorInvocation ::= "this" "(" ArgumentList? ")" ";" ;
 ExplicitConstructorInvocation ::= "super" "(" ArgumentList? ")" ";" ;
 ExplicitConstructorInvocation ::= Primary "." "super" "(" ArgumentList? ")" ";" ;
TypeDeclarations ::= TypeDeclaration ;
 TypeDeclarations ::= TypeDeclarations TypeDeclaration ;
ExtendsInterfaces ::= "extends" InterfaceType ;
 ExtendsInterfaces ::= ExtendsInterfaces "," InterfaceType ;
BlockStatements ::= BlockStatement ;
 BlockStatements ::= BlockStatements BlockStatement ;
InterfaceTypeList ::= InterfaceType ;
 InterfaceTypeList ::= InterfaceTypeList "," InterfaceType ;
AndExpression ::= EqualityExpression ;
 AndExpression ::= AndExpression "&" EqualityExpression ;
PackageOrTypeName ::= Identifier ;
 PackageOrTypeName ::= PackageOrTypeName "." Identifier ;
MultiplicativeExpression ::= UnaryExpression ;
 MultiplicativeExpression ::= MultiplicativeExpression "*" UnaryExpression ;
 MultiplicativeExpression ::= MultiplicativeExpression "/" UnaryExpression ;
 MultiplicativeExpression ::= MultiplicativeExpression "%" UnaryExpression ;
MethodName ::= Identifier ;
 MethodName ::= AmbiguousName "." Identifier ;
ConstructorDeclarator ::= Identifier "(" FormalParameterList? ")" ;
PostDecrementExpression ::= PostfixExpression "--" ;
VariableDeclarators ::= VariableDeclarator ;
 VariableDeclarators ::= VariableDeclarators "," VariableDeclarator ;
AdditiveExpression ::= MultiplicativeExpression ;
 AdditiveExpression ::= AdditiveExpression "+" MultiplicativeExpression ;
 AdditiveExpression ::= AdditiveExpression "-" MultiplicativeExpression ;
InterfaceDeclaration ::= InterfaceModifiers? "interface" Identifier ExtendsInterfaces? InterfaceBody ;
ImportDeclarations ::= ImportDeclaration ;
 ImportDeclarations ::= ImportDeclarations ImportDeclaration ;
ConditionalExpression ::= ConditionalOrExpression ;
 ConditionalExpression ::= ConditionalOrExpression "?" Expression ":" ConditionalExpression ;
ConstructorBody ::= "{" ExplicitConstructorInvocation? BlockStatements? "}" ;
LocalVariableDeclarationStatement ::= LocalVariableDeclaration ";" ;
SynchronizedStatement ::= "synchronized" "(" Expression ")" Block ;
ArgumentList ::= Expression ;
 ArgumentList ::= ArgumentList "," Expression ;
ClassBody ::= "{" ClassBodyDeclarations? "}" ;
ShiftExpression ::= AdditiveExpression ;
 ShiftExpression ::= ShiftExpression "<<" AdditiveExpression ;
 ShiftExpression ::= ShiftExpression ">>" AdditiveExpression ;
 ShiftExpression ::= ShiftExpression ">>>" AdditiveExpression ;
SwitchBlock ::= "{" SwitchBlockStatementGroups? SwitchLabels? "}" ;
ConstantModifiers ::= ConstantModifier ;
 ConstantModifiers ::= ConstantModifiers ConstantModifier ;
FormalParameterList ::= FormalParameter ;
 FormalParameterList ::= FormalParameterList "," FormalParameter ;
AmbiguousName ::= Identifier ;
 AmbiguousName ::= AmbiguousName "." Identifier ;
ExpressionStatement ::= StatementExpression ";" ;
DimExprs ::= DimExpr ;
 DimExprs ::= DimExprs DimExpr ;
ConstantDeclaration ::= ConstantModifiers? Type VariableDeclarators ;
IfThenStatement ::= "if" "(" Expression ")" Statement ;
TryStatement ::= "try" Block Catches ;
 TryStatement ::= "try" Block Catches? Finally ;
ArrayType ::= Type "[" "]" ;
LocalVariableDeclaration ::= "final"? Type VariableDeclarators ;
ForStatementNoShortIf ::= "for" "(" ForInit? ";" Expression? ";" ForUpdate? ")" StatementNoShortIf ;
MethodDeclarator ::= Identifier "(" FormalParameterList? ")" ;
 MethodDeclarator ::= MethodDeclarator "[" "]" ;
VariableInitializers ::= VariableInitializer ;
 VariableInitializers ::= VariableInitializers "," VariableInitializer ;
Dims ::= "[" "]" ;
 Dims ::= Dims "[" "]" ;
UnaryExpressionNotPlusMinus ::= PostfixExpression ;
 UnaryExpressionNotPlusMinus ::= "~" UnaryExpression ;
 UnaryExpressionNotPlusMinus ::= "!" UnaryExpression ;
 UnaryExpressionNotPlusMinus ::= CastExpression ;
Catches ::= CatchClause ;
 Catches ::= Catches CatchClause ;
ConditionalAndExpression ::= InclusiveOrExpression ;
 ConditionalAndExpression ::= ConditionalAndExpression "&&" InclusiveOrExpression ;
PreDecrementExpression ::= "--" UnaryExpression ;
UnaryExpression ::= PreIncrementExpression ;
 UnaryExpression ::= PreDecrementExpression ;
 UnaryExpression ::= "+" UnaryExpression ;
 UnaryExpression ::= "-" UnaryExpression ;
 UnaryExpression ::= UnaryExpressionNotPlusMinus ;
PostIncrementExpression ::= PostfixExpression "++" ;
StatementExpressionList ::= StatementExpression ;
 StatementExpressionList ::= StatementExpressionList "," StatementExpression ;
TypeName ::= Identifier ;
 TypeName ::= PackageOrTypeName "." Identifier ;
ClassModifiers ::= ClassModifier ;
 ClassModifiers ::= ClassModifiers ClassModifier ;
DoStatement ::= "do" Statement "while" "(" Expression ")" ";" ;
ClassName ::= Identifier ;
 ClassName ::= AmbiguousName "." Identifier ;
ClassDeclaration ::= ClassModifiers? "class" Identifier Super? Interfaces? ClassBody ;
SwitchLabel ::= "case" ConstantExpression ":" ;
 SwitchLabel ::= "default" ":" ;
--------------------java::java-5-habelitz.bgf--------------------
annotationDefaultValue ::= DEFAULT annotationElementValue ;
bound ::= EXTENDS type (AND type)* ;
interfaceBody ::= LCURLY interfaceScopeDeclarations* RCURLY ;
OCTAL_LITERAL ::= "0" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7")+ INTEGER_TYPE_SUFFIX? ;
typeList ::= type (COMMA type)* ;
genericTypeParameter ::= IDENT bound? ;
enumClassScopeDeclarations ::= SEMI classScopeDeclarations* ;
interfaceScopeDeclarations ::= (modifierList (genericTypeParameterList? (type IDENT formalParameterList arrayDeclaratorList? throwsClause? SEMI) | (VOID IDENT formalParameterList throwsClause? SEMI)) | (type interfaceFieldDeclaratorList SEMI)) | typeDeclaration | SEMI ;
parenthesizedExpression ::= LPAREN expression RPAREN ;
localVariableDeclaration ::= localModifierList type classFieldDeclaratorList ;
qualifiedIdentList ::= qualifiedIdentifier (COMMA qualifiedIdentifier)* ;
annotationBody ::= LCURLY annotationScopeDeclarations* RCURLY ;
classFieldDeclaratorList ::= classFieldDeclarator (COMMA classFieldDeclarator)* ;
statement ::= block | (ASSERT expr1::expression (COLON expr2::expression SEMI) | SEMI) | (IF parenthesizedExpression ifStat::statement (ELSE elseStat::statement) | ε) | (FOR LPAREN (forInit SEMI forCondition SEMI forUpdater RPAREN statement) | (localModifierList type IDENT COLON expression RPAREN statement)) | (WHILE parenthesizedExpression statement) | (DO statement WHILE parenthesizedExpression SEMI) | (TRY block (catches finallyClause?) | finallyClause) | (SWITCH parenthesizedExpression LCURLY switchBlockLabels RCURLY) | (SYNCHRONIZED parenthesizedExpression block) | (RETURN expression? SEMI) | (THROW expression SEMI) | (BREAK IDENT? SEMI) | (CONTINUE IDENT? SEMI) | (IDENT COLON statement) | (expression SEMI) | SEMI ;
qualifiedIdentExpression ::= qualifiedIdentifier ((arrayDeclarator+ DOT CLASS) | arguments | (outerDot::DOT CLASS | (genericTypeArgumentListSimplified (Super::SUPER arguments) | (SUPER innerDot::DOT IDENT arguments) | (IDENT arguments)) | THIS | (Super::SUPER arguments) | innerNewExpression))? ;
arrayDeclarator ::= LBRACK RBRACK ;
interfaceTypeDeclaration ::= INTERFACE IDENT genericTypeParameterList? interfaceExtendsClause? interfaceBody ;
inclusiveOrExpression ::= exclusiveOrExpression (OR exclusiveOrExpression)* ;
compilationUnit ::= annotationList packageDeclaration? importDeclaration* typeDecls* ;
qualifiedIdentifier ::= IDENT (DOT ident::IDENT)* ;
blockStatement ::= (localVariableDeclaration SEMI) | typeDeclaration | statement ;
STRING_LITERAL ::= """ (ESCAPE_SEQUENCE | string())* """ ;
typeDeclaration ::= modifierList classTypeDeclaration | interfaceTypeDeclaration | enumTypeDeclaration | annotationTypeDeclaration ;
annotationInit ::= LPAREN annotationInitializers RPAREN ;
CHARACTER_LITERAL ::= "\'" ESCAPE_SEQUENCE | string() "\'" ;
newExpression ::= NEW (primitiveType newArrayConstruction) | (genericTypeArgumentListSimplified? qualifiedTypeIdentSimplified newArrayConstruction | (arguments classBody?)) ;
expressionList ::= expression (COMMA expression)* ;
arguments ::= LPAREN expressionList? RPAREN ;
typeIdent ::= IDENT genericTypeArgumentList? ;
packageDeclaration ::= PACKAGE qualifiedIdentifier SEMI ;
finallyClause ::= FINALLY block ;
interfaceFieldDeclarator ::= variableDeclaratorId ASSIGN variableInitializer ;
switchCaseLabel ::= CASE expression COLON blockStatement* ;
classExtendsClause ::= EXTENDS type ;
IDENT ::= JAVA_ID_START JAVA_ID_PART* ;
andExpression ::= equalityExpression (AND equalityExpression)* ;
enumConstants ::= enumConstant (COMMA enumConstant)* ;
typeIdentSimplified ::= IDENT genericTypeArgumentListSimplified? ;
genericTypeArgumentList ::= LESS_THAN genericTypeArgument (COMMA genericTypeArgument)* genericTypeListClosing ;
HEX_LITERAL ::= "0" "x" | "X" HEX_DIGIT+ INTEGER_TYPE_SUFFIX? ;
arrayInitializer ::= LCURLY (variableInitializer (COMMA variableInitializer)* COMMA?)? RCURLY ;
classTypeDeclaration ::= CLASS IDENT genericTypeParameterList? classExtendsClause? implementsClause? classBody ;
variableDeclaratorId ::= IDENT arrayDeclaratorList? ;
FLOATING_POINT_LITERAL ::= (("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ (DOT ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* EXPONENT? FLOAT_TYPE_SUFFIX?) | (EXPONENT FLOAT_TYPE_SUFFIX?) | FLOAT_TYPE_SUFFIX) | (DOT ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ EXPONENT? FLOAT_TYPE_SUFFIX?) ;
logicalAndExpression ::= inclusiveOrExpression (LOGICAL_AND inclusiveOrExpression)* ;
enumConstant ::= annotationList IDENT arguments? classBody? ;
assignmentExpression ::= conditionalExpression (ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | STAR_ASSIGN | DIV_ASSIGN | AND_ASSIGN | OR_ASSIGN | XOR_ASSIGN | MOD_ASSIGN | SHIFT_LEFT_ASSIGN | SHIFT_RIGHT_ASSIGN | BIT_SHIFT_RIGHT_ASSIGN assignmentExpression)? ;
genericTypeArgumentListSimplified ::= LESS_THAN genericTypeArgumentSimplified (COMMA genericTypeArgumentSimplified)* genericTypeListClosing ;
enumBody ::= LCURLY enumScopeDeclarations RCURLY ;
UNICODE_ESCAPE ::= "\\" "u" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT ;
implementsClause ::= IMPLEMENTS typeList ;
ESCAPE_SEQUENCE ::= ("\\" "b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | UNICODE_ESCAPE | OCTAL_ESCAPE ;
annotationScopeDeclarations ::= (modifierList type (IDENT LPAREN RPAREN annotationDefaultValue? SEMI) | (classFieldDeclaratorList SEMI)) | typeDeclaration ;
conditionalExpression ::= logicalOrExpression (QUESTION assignmentExpression COLON conditionalExpression)? ;
classBody ::= LCURLY classScopeDeclarations* RCURLY ;
primaryExpression ::= parenthesizedExpression | literal | newExpression | qualifiedIdentExpression | (genericTypeArgumentListSimplified (SUPER arguments | (DOT IDENT arguments)) | (IDENT arguments) | (THIS arguments)) | (THIS arguments?) | (SUPER arguments) | (SUPER DOT IDENT arguments | ε) | (primitiveType arrayDeclarator* DOT CLASS) | (VOID DOT CLASS) ;
shiftExpression ::= additiveExpression (BIT_SHIFT_RIGHT | SHIFT_RIGHT | SHIFT_LEFT additiveExpression)* ;
formalParameterList ::= LPAREN (formalParameterStandardDecl (COMMA formalParameterStandardDecl)* (COMMA formalParameterVarArgDecl)?) | formalParameterVarArgDecl | ε RPAREN ;
genericTypeParameterList ::= LESS_THAN genericTypeParameter (COMMA genericTypeParameter)* genericTypeListClosing ;
classFieldDeclarator ::= variableDeclaratorId (ASSIGN variableInitializer)? ;
annotationInitializer ::= IDENT ASSIGN annotationElementValue ;
equalityExpression ::= instanceOfExpression (EQUAL | NOT_EQUAL instanceOfExpression)* ;
annotationTypeDeclaration ::= AT INTERFACE IDENT annotationBody ;
interfaceExtendsClause ::= EXTENDS typeList ;
EXPONENT ::= "e" | "E" ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
annotation ::= AT qualifiedIdentifier annotationInit? ;
enumScopeDeclarations ::= enumConstants COMMA? enumClassScopeDeclarations? ;
unaryExpressionNotPlusMinus ::= (NOT unaryExpression) | (LOGICAL_NOT unaryExpression) | (LPAREN type RPAREN unaryExpression) | postfixedExpression ;
unaryExpression ::= (PLUS unaryExpression) | (MINUS unaryExpression) | (INC postfixedExpression) | (DEC postfixedExpression) | unaryExpressionNotPlusMinus ;
innerNewExpression ::= NEW genericTypeArgumentListSimplified? IDENT arguments classBody? ;
formalParameterStandardDecl ::= localModifierList type variableDeclaratorId ;
annotationInitializers ::= (annotationInitializer (COMMA annotationInitializer)*) | annotationElementValue ;
enumTypeDeclaration ::= ENUM IDENT implementsClause? enumBody ;
relationalExpression ::= shiftExpression (LESS_OR_EQUAL | GREATER_OR_EQUAL | LESS_THAN | GREATER_THAN shiftExpression)* ;
throwsClause ::= THROWS qualifiedIdentList ;
qualifiedTypeIdent ::= typeIdent (DOT typeIdent)* ;
objectType ::= qualifiedTypeIdent arrayDeclaratorList? ;
exclusiveOrExpression ::= andExpression (XOR andExpression)* ;
switchBlockLabels ::= switchCaseLabels switchDefaultLabel? switchCaseLabels ;
importDeclaration ::= IMPORT STATIC? qualifiedIdentifier DOTSTAR? SEMI ;
classScopeDeclarations ::= block | (STATIC block) | (modifierList (genericTypeParameterList? (type IDENT formalParameterList arrayDeclaratorList? throwsClause? block | SEMI) | (VOID IDENT formalParameterList throwsClause? block | SEMI) | (ident::IDENT formalParameterList throwsClause? block)) | (type classFieldDeclaratorList SEMI)) | typeDeclaration | SEMI ;
OCTAL_ESCAPE ::= ("0" | "1" | "2" | "3" "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7") | ("\\" "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7") | ("\\" "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7") ;
formalParameterVarArgDecl ::= localModifierList type ELLIPSIS variableDeclaratorId ;
qualifiedTypeIdentSimplified ::= typeIdentSimplified (DOT typeIdentSimplified)* ;
interfaceFieldDeclaratorList ::= interfaceFieldDeclarator (COMMA interfaceFieldDeclarator)* ;
genericTypeArgument ::= type | (QUESTION genericWildcardBoundType?) ;
multiplicativeExpression ::= unaryExpression (STAR | DIV | MOD unaryExpression)* ;
annotationElementValueArrayInitializer ::= LCURLY (annotationElementValue (COMMA annotationElementValue)*)? COMMA? RCURLY ;
block ::= LCURLY blockStatement* RCURLY ;
simpleType ::= primitiveType arrayDeclaratorList? ;
postfixedExpression ::= primaryExpression ((outerDot::DOT (genericTypeArgumentListSimplified? IDENT arguments?) | THIS | (Super::SUPER arguments) | (SUPER innerDot::DOT IDENT arguments?) | innerNewExpression) | (LBRACK expression RBRACK))* (INC | DEC)? ;
catchClause ::= CATCH LPAREN formalParameterStandardDecl RPAREN block ;
newArrayConstruction ::= (arrayDeclaratorList arrayInitializer) | (LBRACK expression RBRACK (LBRACK expression RBRACK)* arrayDeclaratorList?) ;
switchDefaultLabel ::= DEFAULT COLON blockStatement* ;
genericWildcardBoundType ::= EXTENDS | SUPER type ;
additiveExpression ::= multiplicativeExpression (PLUS | MINUS multiplicativeExpression)* ;
instanceOfExpression ::= relationalExpression (INSTANCEOF type)? ;
logicalOrExpression ::= logicalAndExpression (LOGICAL_OR logicalAndExpression)* ;
DECIMAL_LITERAL ::= "0" | ("1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")*) INTEGER_TYPE_SUFFIX? ;
--------------------java::java-5-jls-impl.bgf--------------------
Selector ::= "." Identifier Arguments? ;
 Selector ::= "." ExplicitGenericInvocation ;
 Selector ::= "." "this" ;
 Selector ::= "." "super" SuperSuffix ;
 Selector ::= "." "new" NonWildcardTypeArguments? InnerCreator ;
 Selector ::= Expression? ;
ClassOrInterfaceDeclaration ::= Modifier* ClassDeclaration | InterfaceDeclaration ;
Expression3 ::= PrefixOp Expression3 ;
 Expression3 ::= "(" Expression | Type ")" Expression3 ;
 Expression3 ::= Primary Selector* PostfixOp* ;
Expression2 ::= Expression3 Expression2Rest? ;
IdentifierSuffix ::= "[" ("]" ("[" "]")* "." "class") | (Expression "]") ;
 IdentifierSuffix ::= Arguments ;
 IdentifierSuffix ::= "." "class" | ExplicitGenericInvocation | "this" | ("super" Arguments) | ("new" NonWildcardTypeArguments? InnerCreator) ;
Expression1 ::= Expression2 Expression1Rest? ;
ParExpression ::= "(" Expression ")" ;
ImportDeclaration ::= "import" "static"? Identifier ("." Identifier)* ("." "*")? ";" ;
ForControl ::= ForVarControl ;
 ForControl ::= ForInit ";" Expression? ";" ForUpdate? ;
CreatedName ::= Identifier NonWildcardTypeArguments? ("." Identifier NonWildcardTypeArguments?)* ;
GenericMethodOrConstructorRest ::= Type | "void" Identifier MethodDeclaratorRest ;
 GenericMethodOrConstructorRest ::= Identifier ConstructorDeclaratorRest ;
ConstantDeclaratorsRest ::= ConstantDeclaratorRest ("," ConstantDeclarator)* ;
TypeParameter ::= Identifier ("extends" Bound)? ;
Expression2Rest ::= (InfixOp Expression3)* ;
 Expression2Rest ::= "instanceof" Type ;
Expression1Rest ::= "?" Expression ":" Expression1 ;
Block ::= "{" BlockStatements "}" ;
VariableDeclarator ::= Identifier VariableDeclaratorRest ;
AnnotationTypeElementDeclarations ::= AnnotationTypeElementDeclaration ;
 AnnotationTypeElementDeclarations ::= AnnotationTypeElementDeclarations AnnotationTypeElementDeclaration ;
AnnotationTypeBody ::= "{" AnnotationTypeElementDeclarations? "}" ;
VoidInterfaceMethodDeclaratorRest ::= FormalParameters ("throws" QualifiedIdentifierList)? ";" ;
CatchClause ::= "catch" "(" FormalParameter ")" Block ;
ArrayInitializer ::= "{" (VariableInitializer ("," VariableInitializer)* ","?)? "}" ;
VariableDeclaratorId ::= Identifier ("[" "]")* ;
AnnotationTypeElementDeclaration ::= Modifier* AnnotationTypeElementRest ;
InterfaceMethodOrFieldDecl ::= Type Identifier InterfaceMethodOrFieldRest ;
EnumConstant ::= Annotations Identifier Arguments? ClassBody? ;
TypeParameters ::= "<" TypeParameter ("," TypeParameter)* ">" ;
EnumBody ::= (EnumConstants? ","? EnumBodyDeclarations?)* ;
Primary ::= ParExpression ;
 Primary ::= NonWildcardTypeArguments ExplicitGenericInvocationSuffix | ("this" Arguments) ;
 Primary ::= "this" Arguments? ;
 Primary ::= "super" SuperSuffix ;
 Primary ::= Literal ;
 Primary ::= "new" Creator ;
 Primary ::= Identifier ("." Identifier)* IdentifierSuffix? ;
 Primary ::= BasicType ("[" "]")* "." "class" ;
 Primary ::= "void" "." "class" ;
VariableDeclaratorRest ::= ("[" "]")* ("=" VariableInitializer)? ;
MethodOrFieldDecl ::= Type Identifier MethodOrFieldRest ;
Bound ::= Type ("&" Type)* ;
ElementValueArrayInitializer ::= "{" ElementValues? ","? "}" ;
InterfaceMemberDecl ::= InterfaceMethodOrFieldDecl ;
 InterfaceMemberDecl ::= InterfaceGenericMethodDecl ;
 InterfaceMemberDecl ::= "void" Identifier VoidInterfaceMethodDeclaratorRest ;
 InterfaceMemberDecl ::= InterfaceDeclaration ;
 InterfaceMemberDecl ::= ClassDeclaration ;
InterfaceBody ::= "{" InterfaceBodyDeclaration* "}" ;
FormalParameter ::= "final"? Type VariableDeclaratorId ;
Type ::= Identifier TypeArguments? ("." Identifier TypeArguments?)* ("[" "]")* ;
 Type ::= BasicType ;
ForInit ::= StatementExpression Expressions ;
FormalParameters ::= "(" FormalParameterDecls? ")" ;
NonWildcardTypeArguments ::= "<" TypeList ">" ;
ExplicitGenericInvocation ::= NonWildcardTypeArguments ExplicitGenericInvocationSuffix ;
ForUpdate ::= StatementExpression Expressions ;
DefaultValue ::= "default" ElementValue ;
FormalParameterDecls ::= ("final" Annotations? Type FormalParameterDeclsRest)? ;
Annotation ::= "@" QualifiedIdentifier ("(" (Identifier "=")? ElementValue ")")? ;
Statement ::= Block ;
 Statement ::= "assert" Expression (":" Expression)? ";" ;
 Statement ::= "if" ParExpression Statement ("else" Statement)? ;
 Statement ::= "for" "(" ForControl ")" Statement ;
 Statement ::= "while" ParExpression Statement ;
 Statement ::= "do" Statement "while" ParExpression ";" ;
 Statement ::= "try" Block Catches | (Catches? "finally" Block) ;
 Statement ::= "switch" ParExpression "{" SwitchBlockStatementGroups "}" ;
 Statement ::= "synchronized" ParExpression Block ;
 Statement ::= "return" Expression? ";" ;
 Statement ::= "throw" Expression ";" ;
 Statement ::= "break" Identifier? ";" ;
 Statement ::= "continue" Identifier? ";" ;
 Statement ::= ";" ;
 Statement ::= StatementExpression ";" ;
 Statement ::= Identifier ":" Statement ;
AnnotationMethodOrConstantRest ::= Identifier AnnotationMethodRest ;
 AnnotationMethodOrConstantRest ::= AnnotationConstantRest ;
InterfaceGenericMethodDecl ::= TypeParameters Type | "void" Identifier InterfaceMethodDeclaratorRest ;
GenericMethodOrConstructorDecl ::= TypeParameters GenericMethodOrConstructorRest ;
SwitchBlockStatementGroup ::= SwitchLabel BlockStatements ;
CompilationUnit ::= (Annotations? "package" QualifiedIdentifier ";")? ImportDeclaration* TypeDeclaration* ;
QualifiedIdentifier ::= Identifier ("." Identifier)* ;
FormalParameterDeclsRest ::= VariableDeclaratorId ("," FormalParameterDecls)? ;
 FormalParameterDeclsRest ::= "..." VariableDeclaratorId ;
ForVarControl ::= "final"? Annotations? Type Identifier ForVarControlRest ;
EnumBodyDeclarations ::= ";" ClassBodyDeclaration* ;
Expressions ::= ("," StatementExpression)* ;
VoidMethodDeclaratorRest ::= FormalParameters ("throws" QualifiedIdentifierList)? MethodBody | ";" ;
Expression ::= Expression1 (AssignmentOperator Expression1)? ;
TypeArgument ::= Type ;
 TypeArgument ::= "?" ("extends" | "super" Type)? ;
Arguments ::= "(" (Expression ("," Expression)*)? ")" ;
ForVarControlRest ::= VariableDeclaratorsRest ";" Expression? ";" ForUpdate? ;
 ForVarControlRest ::= ":" Expression ;
EnumConstants ::= EnumConstant ;
 EnumConstants ::= EnumConstants "," EnumConstant ;
NormalInterfaceDeclaration ::= "interface" Identifier TypeParameters? ("extends" TypeList)? InterfaceBody ;
ClassCreatorRest ::= Arguments ClassBody? ;
ArrayCreatorRest ::= "[" ("]" ("[" "]")* ArrayInitializer) | (Expression "]" ("[" Expression "]")* ("[" "]")*) ;
VariableDeclarators ::= VariableDeclarator ("," VariableDeclarator)* ;
ConstructorDeclaratorRest ::= FormalParameters ("throws" QualifiedIdentifierList)? MethodBody ;
InterfaceBodyDeclaration ::= ";" ;
 InterfaceBodyDeclaration ::= Modifier* InterfaceMemberDecl ;
InterfaceMethodDeclaratorRest ::= FormalParameters ("[" "]")* ("throws" QualifiedIdentifierList)? ";" ;
ConditionalExpression ::= Expression2 Expression1Rest ;
ElementValues ::= ElementValue ("," ElementValues)? ;
LocalVariableDeclarationStatement ::= "final"? Type VariableDeclarators ";" ;
TypeArguments ::= "<" TypeArgument ("," TypeArgument)* ">" ;
VariableDeclaratorsRest ::= VariableDeclaratorRest ("," VariableDeclarator)* ;
ClassBody ::= "{" ClassBodyDeclaration* "}" ;
EnumDeclaration ::= "enum" Identifier ("implements" TypeList)? EnumBody ;
TypeList ::= Type ("," Type)* ;
InnerCreator ::= Identifier ClassCreatorRest ;
ConstantDeclarator ::= Identifier ConstantDeclaratorRest ;
InterfaceMethodOrFieldRest ::= ConstantDeclaratorsRest ";" ;
 InterfaceMethodOrFieldRest ::= InterfaceMethodDeclaratorRest ;
AnnotationTypeDeclaration ::= "@" "interface" Identifier AnnotationTypeBody ;
SuperSuffix ::= Arguments ;
 SuperSuffix ::= "." Identifier Arguments? ;
Creator ::= NonWildcardTypeArguments? CreatedName ArrayCreatorRest | ClassCreatorRest ;
ConstantDeclaratorRest ::= ("[" "]")* "=" VariableInitializer ;
Catches ::= CatchClause CatchClause* ;
NormalClassDeclaration ::= "class" Identifier TypeParameters? ("extends" Type)? ("implements" TypeList)? ClassBody ;
AnnotationTypeElementRest ::= Type AnnotationMethodOrConstantRest ";" ;
 AnnotationTypeElementRest ::= ClassDeclaration ;
 AnnotationTypeElementRest ::= InterfaceDeclaration ;
 AnnotationTypeElementRest ::= EnumDeclaration ;
 AnnotationTypeElementRest ::= AnnotationTypeDeclaration ;
MethodDeclaratorRest ::= FormalParameters ("[" "]")* ("throws" QualifiedIdentifierList)? MethodBody | ";" ;
AnnotationMethodRest ::= "(" ")" ("[" "]")* DefaultValue? ;
MemberDecl ::= GenericMethodOrConstructorDecl ;
 MemberDecl ::= MethodOrFieldDecl ;
 MemberDecl ::= "void" Identifier VoidMethodDeclaratorRest ;
 MemberDecl ::= Identifier ConstructorDeclaratorRest ;
 MemberDecl ::= InterfaceDeclaration ;
 MemberDecl ::= ClassDeclaration ;
ExplicitGenericInvocationSuffix ::= "super" SuperSuffix ;
 ExplicitGenericInvocationSuffix ::= Identifier Arguments ;
Annotations ::= Annotation Annotations? ;
QualifiedIdentifierList ::= QualifiedIdentifier ("," QualifiedIdentifier)* ;
BlockStatement ::= LocalVariableDeclarationStatement ;
 BlockStatement ::= ClassOrInterfaceDeclaration ;
 BlockStatement ::= (Identifier ":")? Statement ;
SwitchLabel ::= "case" ConstantExpression ":" ;
 SwitchLabel ::= "case" EnumConstantName ":" ;
 SwitchLabel ::= "default" ":" ;
ClassBodyDeclaration ::= ";" ;
 ClassBodyDeclaration ::= "static"? Block ;
 ClassBodyDeclaration ::= Modifier* MemberDecl ;
--------------------java::java-5-jls-read.bgf--------------------
ReturnStatement ::= "return" Expression? ";" ;
ArrayAccess ::= ExpressionName "[" Expression "]" ;
 ArrayAccess ::= PrimaryNoNewArray "[" Expression "]" ;
PrimaryNoNewArray ::= Literal ;
 PrimaryNoNewArray ::= Type "." "class" ;
 PrimaryNoNewArray ::= "void" "." "class" ;
 PrimaryNoNewArray ::= "this" ;
 PrimaryNoNewArray ::= ClassName "." "this" ;
 PrimaryNoNewArray ::= "(" Expression ")" ;
 PrimaryNoNewArray ::= ClassInstanceCreationExpression ;
 PrimaryNoNewArray ::= FieldAccess ;
 PrimaryNoNewArray ::= MethodInvocation ;
 PrimaryNoNewArray ::= ArrayAccess ;
WhileStatementNoShortIf ::= "while" "(" Expression ")" StatementNoShortIf ;
TypeDeclSpecifier ::= TypeName ;
 TypeDeclSpecifier ::= ClassOrInterfaceType "." Identifier ;
Wildcard ::= "?" WildcardBounds? ;
AbstractMethodModifiers ::= AbstractMethodModifier ;
 AbstractMethodModifiers ::= AbstractMethodModifiers AbstractMethodModifier ;
InterfaceType ::= TypeDeclSpecifier TypeArguments? ;
SingleTypeImportDeclaration ::= "import" TypeName ";" ;
TypeImportOnDemandDeclaration ::= "import" PackageOrTypeName "." "*" ";" ;
ArrayCreationExpression ::= "new" PrimitiveType DimExprs Dims? ;
 ArrayCreationExpression ::= "new" ClassOrInterfaceType DimExprs Dims? ;
 ArrayCreationExpression ::= "new" PrimitiveType Dims ArrayInitializer ;
 ArrayCreationExpression ::= "new" ClassOrInterfaceType Dims ArrayInitializer ;
MethodHeader ::= MethodModifiers? TypeParameters? ResultType MethodDeclarator Throws? ;
VariableDeclarator ::= VariableDeclaratorId ;
 VariableDeclarator ::= VariableDeclaratorId "=" VariableInitializer ;
Assignment ::= LeftHandSide AssignmentOperator AssignmentExpression ;
InterfaceMemberDeclarations ::= InterfaceMemberDeclaration ;
 InterfaceMemberDeclarations ::= InterfaceMemberDeclarations InterfaceMemberDeclaration ;
CatchClause ::= "catch" "(" FormalParameter ")" Block ;
ArrayInitializer ::= "{" VariableInitializers? ","? "}" ;
VariableDeclaratorId ::= Identifier ;
 VariableDeclaratorId ::= VariableDeclaratorId "[" "]" ;
AnnotationTypeElementDeclaration ::= AbstractMethodModifiers? Type Identifier "(" ")" Dims? DefaultValue? ";" ;
 AnnotationTypeElementDeclaration ::= ConstantDeclaration ;
 AnnotationTypeElementDeclaration ::= ClassDeclaration ;
 AnnotationTypeElementDeclaration ::= InterfaceDeclaration ;
 AnnotationTypeElementDeclaration ::= EnumDeclaration ;
 AnnotationTypeElementDeclaration ::= AnnotationTypeDeclaration ;
 AnnotationTypeElementDeclaration ::= ";" ;
EnumConstant ::= Annotations Identifier Arguments? ClassBody? ;
TypeParameters ::= "<" TypeParameterList ">" ;
LastFormalParameter ::= VariableModifiers? Type "..."? VariableDeclaratorId ;
 LastFormalParameter ::= FormalParameter ;
ElementValuePairs ::= ElementValuePair ;
 ElementValuePairs ::= ElementValuePairs "," ElementValuePair ;
PreIncrementExpression ::= "++" UnaryExpression ;
ElementValueArrayInitializer ::= "{" ElementValues? ","? "}" ;
FieldAccess ::= Primary "." Identifier ;
 FieldAccess ::= "super" "." Identifier ;
 FieldAccess ::= ClassName "." "super" "." Identifier ;
LabeledStatementNoShortIf ::= Identifier ":" StatementNoShortIf ;
BasicForStatement ::= "for" "(" ForInit? ";" Expression? ";" ForUpdate? ")" Statement ;
PackageName ::= Identifier ;
 PackageName ::= PackageName "." Identifier ;
DefaultValue ::= "default" ElementValue ;
CompilationUnit ::= PackageDeclaration? ImportDeclarations? TypeDeclarations? ;
InclusiveOrExpression ::= ExclusiveOrExpression ;
 InclusiveOrExpression ::= InclusiveOrExpression "|" ExclusiveOrExpression ;
ClassInstanceCreationExpression ::= "new" TypeArguments? ClassOrInterfaceType "(" ArgumentList? ")" ClassBody? ;
 ClassInstanceCreationExpression ::= Primary "." "new" TypeArguments? Identifier TypeArguments? "(" ArgumentList? ")" ClassBody? ;
SingleElementAnnotation ::= "@" TypeName "(" ElementValue ")" ;
ConstructorModifiers ::= ConstructorModifier ;
 ConstructorModifiers ::= ConstructorModifiers ConstructorModifier ;
FieldModifiers ::= FieldModifier ;
 FieldModifiers ::= FieldModifiers FieldModifier ;
IfThenElseStatementNoShortIf ::= "if" "(" Expression ")" StatementNoShortIf "else" StatementNoShortIf ;
MethodDeclaration ::= MethodHeader MethodBody ;
AbstractMethodDeclaration ::= AbstractMethodModifiers? TypeParameters? ResultType MethodDeclarator Throws? ";" ;
AdditionalBoundList ::= AdditionalBound AdditionalBoundList ;
 AdditionalBoundList ::= AdditionalBound ;
TypeDeclarations ::= TypeDeclaration ;
 TypeDeclarations ::= TypeDeclarations TypeDeclaration ;
ExtendsInterfaces ::= "extends" InterfaceType ;
 ExtendsInterfaces ::= ExtendsInterfaces "," InterfaceType ;
ClassType ::= TypeDeclSpecifier TypeArguments? ;
AndExpression ::= EqualityExpression ;
 AndExpression ::= AndExpression "&" EqualityExpression ;
PackageOrTypeName ::= Identifier ;
 PackageOrTypeName ::= PackageOrTypeName "." Identifier ;
MultiplicativeExpression ::= UnaryExpression ;
 MultiplicativeExpression ::= MultiplicativeExpression "*" UnaryExpression ;
 MultiplicativeExpression ::= MultiplicativeExpression "/" UnaryExpression ;
 MultiplicativeExpression ::= MultiplicativeExpression "%" UnaryExpression ;
TypeParameterList ::= TypeParameterList "," TypeParameter ;
 TypeParameterList ::= TypeParameter ;
ConstructorDeclarator ::= TypeParameters? Identifier "(" FormalParameterList? ")" ;
PostDecrementExpression ::= PostfixExpression "--" ;
AssertStatement ::= "assert" Expression ";" ;
 AssertStatement ::= "assert" Expression ":" Expression ";" ;
AdditiveExpression ::= MultiplicativeExpression ;
 AdditiveExpression ::= AdditiveExpression "+" MultiplicativeExpression ;
 AdditiveExpression ::= AdditiveExpression "-" MultiplicativeExpression ;
ConditionalExpression ::= ConditionalOrExpression ;
 ConditionalExpression ::= ConditionalOrExpression "?" Expression ":" ConditionalExpression ;
ImportDeclarations ::= ImportDeclaration ;
 ImportDeclarations ::= ImportDeclarations ImportDeclaration ;
LocalVariableDeclarationStatement ::= LocalVariableDeclaration ";" ;
ConstructorBody ::= "{" ExplicitConstructorInvocation? BlockStatements? "}" ;
SynchronizedStatement ::= "synchronized" "(" Expression ")" Block ;
ShiftExpression ::= AdditiveExpression ;
 ShiftExpression ::= ShiftExpression "<<" AdditiveExpression ;
 ShiftExpression ::= ShiftExpression ">>" AdditiveExpression ;
 ShiftExpression ::= ShiftExpression ">>>" AdditiveExpression ;
EnumDeclaration ::= ClassModifiers? "enum" Identifier Interfaces? EnumBody ;
SwitchBlock ::= "{" SwitchBlockStatementGroups? SwitchLabels? "}" ;
ExpressionStatement ::= StatementExpression ";" ;
AmbiguousName ::= Identifier ;
 AmbiguousName ::= AmbiguousName "." Identifier ;
DimExprs ::= DimExpr ;
 DimExprs ::= DimExprs DimExpr ;
NormalAnnotation ::= "@" TypeName "(" ElementValuePairs? ")" ;
IfThenStatement ::= "if" "(" Expression ")" Statement ;
ForStatementNoShortIf ::= "for" "(" ForInit? ";" Expression? ";" ForUpdate? ")" StatementNoShortIf ;
AnnotationTypeDeclaration ::= InterfaceModifiers? "@" "interface" Identifier AnnotationTypeBody ;
VariableInitializers ::= VariableInitializer ;
 VariableInitializers ::= VariableInitializers "," VariableInitializer ;
Catches ::= CatchClause ;
 Catches ::= Catches CatchClause ;
PostIncrementExpression ::= PostfixExpression "++" ;
StatementExpressionList ::= StatementExpression ;
 StatementExpressionList ::= StatementExpressionList "," StatementExpression ;
DimExpr ::= "[" Expression "]" ;
SwitchStatement ::= "switch" "(" Expression ")" SwitchBlock ;
MethodModifiers ::= MethodModifier ;
 MethodModifiers ::= MethodModifiers MethodModifier ;
Interfaces ::= "implements" InterfaceTypeList ;
ExclusiveOrExpression ::= AndExpression ;
 ExclusiveOrExpression ::= ExclusiveOrExpression "^" AndExpression ;
AdditionalBound ::= "&" InterfaceType ;
StaticInitializer ::= "static" Block ;
PackageDeclaration ::= Annotations? "package" PackageName ";" ;
SwitchLabels ::= SwitchLabel ;
 SwitchLabels ::= SwitchLabels SwitchLabel ;
ClassBodyDeclarations ::= ClassBodyDeclaration ;
 ClassBodyDeclarations ::= ClassBodyDeclarations ClassBodyDeclaration ;
MethodInvocation ::= MethodName "(" ArgumentList? ")" ;
 MethodInvocation ::= Primary "." NonWildTypeArguments? Identifier "(" ArgumentList? ")" ;
 MethodInvocation ::= "super" "." NonWildTypeArguments? Identifier "(" ArgumentList? ")" ;
 MethodInvocation ::= ClassName "." "super" "." NonWildTypeArguments? Identifier "(" ArgumentList? ")" ;
 MethodInvocation ::= TypeName "." NonWildTypeArguments Identifier "(" ArgumentList? ")" ;
ElementValuePair ::= Identifier "=" ElementValue ;
TypeParameter ::= TypeVariable TypeBound? ;
Throws ::= "throws" ExceptionTypeList ;
Block ::= "{" BlockStatements? "}" ;
AnnotationTypeElementDeclarations ::= AnnotationTypeElementDeclaration ;
 AnnotationTypeElementDeclarations ::= AnnotationTypeElementDeclarations AnnotationTypeElementDeclaration ;
AnnotationTypeBody ::= "{" AnnotationTypeElementDeclarations? "}" ;
ContinueStatement ::= "continue" Identifier? ";" ;
NonWildTypeArguments ::= "<" ReferenceTypeList ">" ;
EnumBody ::= (EnumConstants? ","? EnumBodyDeclarations?)* ;
ExpressionName ::= Identifier ;
 ExpressionName ::= AmbiguousName "." Identifier ;
Finally ::= "finally" Block ;
InterfaceModifiers ::= InterfaceModifier ;
 InterfaceModifiers ::= InterfaceModifiers InterfaceModifier ;
ConditionalOrExpression ::= ConditionalAndExpression ;
 ConditionalOrExpression ::= ConditionalOrExpression "||" ConditionalAndExpression ;
WhileStatement ::= "while" "(" Expression ")" Statement ;
IfThenElseStatement ::= "if" "(" Expression ")" StatementNoShortIf "else" Statement ;
EnhancedForStatement ::= "for" "(" VariableModifiers? Type Identifier ":" Expression ")" Statement ;
InterfaceBody ::= "{" InterfaceMemberDeclarations? "}" ;
Super ::= "extends" ClassType ;
FormalParameter ::= VariableModifiers? Type VariableDeclaratorId ;
FormalParameters ::= FormalParameter ;
 FormalParameters ::= FormalParameters "," FormalParameter ;
CastExpression ::= "(" PrimitiveType Dims? ")" UnaryExpression ;
 CastExpression ::= "(" ReferenceType ")" UnaryExpressionNotPlusMinus ;
EqualityExpression ::= RelationalExpression ;
 EqualityExpression ::= EqualityExpression "==" RelationalExpression ;
 EqualityExpression ::= EqualityExpression "!=" RelationalExpression ;
BreakStatement ::= "break" Identifier? ";" ;
WildcardBounds ::= "extends" ReferenceType ;
 WildcardBounds ::= "super" ReferenceType ;
SwitchBlockStatementGroups ::= SwitchBlockStatementGroup ;
 SwitchBlockStatementGroups ::= SwitchBlockStatementGroups SwitchBlockStatementGroup ;
SwitchBlockStatementGroup ::= SwitchLabels BlockStatements ;
ThrowStatement ::= "throw" Expression ";" ;
ExceptionTypeList ::= ExceptionType ;
 ExceptionTypeList ::= ExceptionTypeList "," ExceptionType ;
TypeBound ::= "extends" ClassOrInterfaceType AdditionalBoundList? ;
ReferenceTypeList ::= ReferenceType ;
 ReferenceTypeList ::= ReferenceTypeList "," ReferenceType ;
ConstructorDeclaration ::= ConstructorModifiers? ConstructorDeclarator Throws? ConstructorBody ;
VariableModifiers ::= VariableModifier ;
 VariableModifiers ::= VariableModifiers VariableModifier ;
FieldDeclaration ::= FieldModifiers? Type VariableDeclarators ";" ;
SingleStaticImportDeclaration ::= "import" "static" TypeName "." Identifier ";" ;
RelationalExpression ::= ShiftExpression ;
 RelationalExpression ::= RelationalExpression "<" ShiftExpression ;
 RelationalExpression ::= RelationalExpression ">" ShiftExpression ;
 RelationalExpression ::= RelationalExpression "<=" ShiftExpression ;
 RelationalExpression ::= RelationalExpression ">=" ShiftExpression ;
 RelationalExpression ::= RelationalExpression "instanceof" ReferenceType ;
StaticImportOnDemandDeclaration ::= "import" "static" TypeName "." "*" ";" ;
LabeledStatement ::= Identifier ":" Statement ;
EnumBodyDeclarations ::= ";" ClassBodyDeclarations? ;
Arguments ::= "(" ArgumentList? ")" ;
ExplicitConstructorInvocation ::= NonWildTypeArguments? "this" "(" ArgumentList? ")" ";" ;
 ExplicitConstructorInvocation ::= NonWildTypeArguments? "super" "(" ArgumentList? ")" ";" ;
 ExplicitConstructorInvocation ::= Primary "." NonWildTypeArguments? "super" "(" ArgumentList? ")" ";" ;
BlockStatements ::= BlockStatement ;
 BlockStatements ::= BlockStatements BlockStatement ;
InterfaceTypeList ::= InterfaceType ;
 InterfaceTypeList ::= InterfaceTypeList "," InterfaceType ;
EnumConstants ::= EnumConstant ;
 EnumConstants ::= EnumConstants "," EnumConstant ;
MethodName ::= Identifier ;
 MethodName ::= AmbiguousName "." Identifier ;
MarkerAnnotation ::= "@" TypeName ;
NormalInterfaceDeclaration ::= InterfaceModifiers? "interface" Identifier ExtendsInterfaces? InterfaceBody ;
VariableDeclarators ::= VariableDeclarator ;
 VariableDeclarators ::= VariableDeclarators "," VariableDeclarator ;
ActualTypeArgumentList ::= ActualTypeArgument ;
 ActualTypeArgumentList ::= ActualTypeArgumentList "," ActualTypeArgument ;
ElementValues ::= ElementValue ;
 ElementValues ::= ElementValues "," ElementValue ;
TypeArguments ::= "<" ActualTypeArgumentList ">" ;
ArgumentList ::= Expression ;
 ArgumentList ::= ArgumentList "," Expression ;
ClassBody ::= "{" ClassBodyDeclarations? "}" ;
ConstantModifiers ::= ConstantModifier ;
 ConstantModifiers ::= ConstantModifier ConstantModifiers ;
FormalParameterList ::= LastFormalParameter ;
 FormalParameterList ::= FormalParameters "," LastFormalParameter ;
ConstantDeclaration ::= ConstantModifiers? Type VariableDeclarators ";" ;
TryStatement ::= "try" Block Catches ;
 TryStatement ::= "try" Block Catches? Finally ;
ArrayType ::= Type "[" "]" ;
LocalVariableDeclaration ::= VariableModifiers? Type VariableDeclarators ;
MethodDeclarator ::= Identifier "(" FormalParameterList? ")" ;
 MethodDeclarator ::= MethodDeclarator "[" "]" ;
Dims ::= "[" "]" ;
 Dims ::= Dims "[" "]" ;
UnaryExpressionNotPlusMinus ::= PostfixExpression ;
 UnaryExpressionNotPlusMinus ::= "~" UnaryExpression ;
 UnaryExpressionNotPlusMinus ::= "!" UnaryExpression ;
 UnaryExpressionNotPlusMinus ::= CastExpression ;
ConditionalAndExpression ::= InclusiveOrExpression ;
 ConditionalAndExpression ::= ConditionalAndExpression "&&" InclusiveOrExpression ;
NormalClassDeclaration ::= ClassModifiers? "class" Identifier TypeParameters? Super? Interfaces? ClassBody ;
PreDecrementExpression ::= "--" UnaryExpression ;
UnaryExpression ::= PreIncrementExpression ;
 UnaryExpression ::= PreDecrementExpression ;
 UnaryExpression ::= "+" UnaryExpression ;
 UnaryExpression ::= "-" UnaryExpression ;
 UnaryExpression ::= UnaryExpressionNotPlusMinus ;
TypeName ::= Identifier ;
 TypeName ::= PackageOrTypeName "." Identifier ;
ClassModifiers ::= ClassModifier ;
 ClassModifiers ::= ClassModifiers ClassModifier ;
DoStatement ::= "do" Statement "while" "(" Expression ")" ";" ;
Annotations ::= Annotation ;
 Annotations ::= Annotations Annotation ;
ClassName ::= Identifier ;
 ClassName ::= AmbiguousName "." Identifier ;
SwitchLabel ::= "case" ConstantExpression ":" ;
 SwitchLabel ::= "case" EnumConstantName ":" ;
 SwitchLabel ::= "default" ":" ;
--------------------java::jvm-level0.bgf--------------------
Instruction ::= (fieldRef::(opcode::integer() owner::string() name::string() description::string())) | (increment::(index::integer() amount::integer())) | (instruction::(opcode::integer())) | (integer::(opcode::integer() operand::integer())) | (jump::(opcode::integer() labelIndex::integer())) | (label::(index::integer())) | (lineNumber::(line::integer() labelIndex::integer())) | (localVariable::(opcode::integer() index::integer())) | (loadConstantString::(stringValue::string())) | (loadConstantInteger::(integerValue::integer())) | (loadConstantLong::(longValue::integer())) | (loadConstantFloat::(floatValue::integer())) | (loadConstantDouble::(doubleValue::integer())) | (lookupSwitch::(defaultLabelIndex::integer() keys::(integer()*) cases::(integer()*))) | (method::(opcode::integer() owner::string() name::string() description::string())) | (multiANewArray::(description::string() dimensions::integer())) | (tableSwitch::(minIndex::integer() maxIndex::integer() defaultLabelIndex::integer() cases::(integer()*))) | (type::(opcode::integer() description::string())) ;
TryCatchBlock ::= (tryCatchBlock::(startLabelIndex::integer() endLabelIndex::integer() handlerLabelIndex::integer() type::string())) | (finallyBlock::(startLabelIndex::integer() endLabelIndex::integer() handlerLabelIndex::integer())) ;
Field ::= (field::(access::integer() name::string() description::string() signature::string() value::α)) | (field::(access::integer() name::string() description::string() signature::string())) ;
Class ::= (class::(version::integer() access::integer() name::string() signature::string() superName::string() interfaces::(string()*) sourceFile::string() sourceDebug::string() outerClass::string() outerMethod::string() outerMethodDescription::string() innerClasses::(InnerClass*) fields::(Field*) methods::(Method*))) | (class::(version::integer() access::integer() name::string() signature::string() superName::string() interfaces::(string()*) innerClasses::(InnerClass*) fields::(Field*) methods::(Method*))) ;
LocalVariable ::= localVariable::(name::string() description::string() signature::string() startLabelIndex::integer() endLabelIndex::integer() index::integer()) ;
InnerClass ::= (innerClass::(name::string() outerName::string() innerName::string() access::integer())) | (innerClass::(name::string() access::integer())) ;
Method ::= method::(access::integer() name::string() description::string() signature::string() exceptions::(string()*) instructions::(Instruction*) tryCatchBlocks::(TryCatchBlock*) localVariables::(LocalVariable*)) ;
--------------------java::java-5-parr.bgf--------------------
interfaceBodyDeclaration ::= (modifiers interfaceMemberDecl) | ";" ;
interfaceMemberDecl ::= interfaceMethodOrFieldDecl | interfaceGenericMethodDecl | ("void" Identifier voidInterfaceMethodDeclaratorRest) | interfaceDeclaration | classDeclaration ;
interfaceBody ::= "{" interfaceBodyDeclaration* "}" ;
formalParameter ::= variableModifiers type variableDeclaratorId ;
typeList ::= type ("," type)* ;
innerCreator ::= nonWildcardTypeArguments? Identifier classCreatorRest ;
constantDeclarator ::= Identifier constantDeclaratorRest ;
localVariableDeclaration ::= variableModifiers type variableDeclarators ;
explicitGenericInvocation ::= nonWildcardTypeArguments Identifier arguments ;
interfaceMethodOrFieldRest ::= (constantDeclaratorsRest ";") | interfaceMethodDeclaratorRest ;
statement ::= block | (ASSERT expression (":" expression)? ";") | ("if" parExpression statement ("else" statement)?) | ("for" "(" forControl ")" statement) | ("while" parExpression statement) | ("do" statement "while" parExpression ";") | ("try" block (catches "finally" block) | catches | ("finally" block)) | ("switch" parExpression "{" switchBlockStatementGroups "}") | ("synchronized" parExpression block) | ("return" expression? ";") | ("throw" expression ";") | ("break" Identifier? ";") | ("continue" Identifier? ";") | ";" | (statementExpression ";") | (Identifier ":" statement) ;
enhancedForControl ::= variableModifiers type Identifier ":" expression ;
switchBlockStatementGroup ::= switchLabel+ blockStatement* ;
constantDeclaratorRest ::= ("[" "]")* "=" variableInitializer ;
normalClassDeclaration ::= "class" Identifier typeParameters? ("extends" type)? ("implements" typeList)? classBody ;
conditionalAndExpression ::= inclusiveOrExpression ("&&" inclusiveOrExpression)* ;
relationalOp ::= (t1::"<" t2::("="?)) | (t1::">" t2::("="?)) | "<" | ">" ;
inclusiveOrExpression ::= exclusiveOrExpression ("|" exclusiveOrExpression)* ;
compilationUnit ::= (annotations (packageDeclaration importDeclaration* typeDeclaration*) | (classOrInterfaceDeclaration typeDeclaration*)) | (packageDeclaration? importDeclaration* typeDeclaration*) ;
CharacterLiteral ::= "\'" EscapeSequence | string() "\'" ;
methodDeclaratorRest ::= formalParameters ("[" "]")* ("throws" qualifiedNameList)? methodBody | ";" ;
memberDecl ::= genericMethodOrConstructorDecl | memberDeclaration | ("void" Identifier voidMethodDeclaratorRest) | (Identifier constructorDeclaratorRest) | interfaceDeclaration | classDeclaration ;
annotationMethodRest ::= Identifier "(" ")" defaultValue? ;
typeBound ::= type ("&" type)* ;
classBodyDeclaration ::= ";" | ("static"? block) | (modifiers memberDecl) ;
selector ::= ("." Identifier arguments?) | ("." "this") | ("." "super" superSuffix) | ("." "new" innerCreator) | ("[" expression "]") ;
identifierSuffix ::= (("[" "]")+ "." "class") | (("[" expression "]")+) | arguments | ("." "class") | ("." explicitGenericInvocation) | ("." "this") | ("." "super" arguments) | ("." "new" innerCreator) ;
annotationName ::= Identifier ("." Identifier)* ;
methodDeclaration ::= Identifier methodDeclaratorRest ;
classOrInterfaceType ::= Identifier typeArguments? ("." Identifier typeArguments?)* ;
explicitConstructorInvocation ::= (nonWildcardTypeArguments? "this" | "super" arguments ";") | (primary "." nonWildcardTypeArguments? "super" arguments ";") ;
expressionList ::= expression ("," expression)* ;
arguments ::= "(" expressionList? ")" ;
packageDeclaration ::= "package" qualifiedName ";" ;
forControl ::= enhancedForControl | (forInit? ";" expression? ";" forUpdate?) ;
genericMethodOrConstructorRest ::= (type | "void" Identifier methodDeclaratorRest) | (Identifier constructorDeclaratorRest) ;
Exponent ::= "e" | "E" ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
elementValuePair ::= Identifier "=" elementValue ;
andExpression ::= equalityExpression ("&" equalityExpression)* ;
enumConstants ::= enumConstant ("," enumConstant)* ;
variableDeclarator ::= variableDeclaratorId ("=" variableInitializer)? ;
annotationTypeBody ::= "{" annotationTypeElementDeclaration* "}" ;
arrayInitializer ::= "{" (variableInitializer ("," variableInitializer)* ","?)? "}" ;
Identifier ::= Letter (Letter | JavaIDDigit)* ;
variableDeclaratorId ::= Identifier ("[" "]")* ;
annotationTypeElementDeclaration ::= modifiers annotationTypeElementRest ;
qualifiedName ::= Identifier ("." Identifier)* ;
interfaceMethodOrFieldDecl ::= type Identifier interfaceMethodOrFieldRest ;
variableDeclarators ::= variableDeclarator ("," variableDeclarator)* ;
FloatingPointLiteral ::= (("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* Exponent? FloatTypeSuffix?) | ("." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ Exponent? FloatTypeSuffix?) | (("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ Exponent FloatTypeSuffix?) | (("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ FloatTypeSuffix) ;
enumConstant ::= annotations? Identifier arguments? classBody? ;
typeParameters ::= "<" typeParameter ("," typeParameter)* ">" ;
enumBody ::= "{" enumConstants? ","? enumBodyDeclarations? "}" ;
constructorDeclaratorRest ::= formalParameters ("throws" qualifiedNameList)? constructorBody ;
interfaceMethodDeclaratorRest ::= formalParameters ("[" "]")* ("throws" qualifiedNameList)? ";" ;
elementValueArrayInitializer ::= "{" (elementValue ("," elementValue)*)? ","? "}" ;
StringLiteral ::= """ (EscapeSequence | string())* """ ;
DecimalLiteral ::= "0" | ("1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")*) IntegerTypeSuffix? ;
conditionalExpression ::= conditionalOrExpression ("?" expression ":" expression)? ;
constructorBody ::= "{" explicitConstructorInvocation? blockStatement* "}" ;
localVariableDeclarationStatement ::= localVariableDeclaration ";" ;
typeArguments ::= "<" typeArgument ("," typeArgument)* ">" ;
classBody ::= "{" classBodyDeclaration* "}" ;
shiftExpression ::= additiveExpression (shiftOp additiveExpression)* ;
type ::= (classOrInterfaceType ("[" "]")*) | (primitiveType ("[" "]")*) ;
formalParameters ::= "(" formalParameterDecls? ")" ;
enumDeclaration ::= ENUM Identifier ("implements" typeList)? enumBody ;
castExpression ::= ("(" primitiveType ")" unaryExpression) | ("(" type | expression ")" unaryExpressionNotPlusMinus) ;
nonWildcardTypeArguments ::= "<" typeList ">" ;
HexLiteral ::= "0" "x" | "X" HexDigit+ IntegerTypeSuffix? ;
equalityExpression ::= instanceOfExpression ("==" | "!=" instanceOfExpression)* ;
annotationTypeDeclaration ::= "@" "interface" Identifier annotationTypeBody ;
defaultValue ::= "default" elementValue ;
formalParameterDecls ::= variableModifiers type formalParameterDeclsRest ;
annotation ::= "@" annotationName ("(" (elementValuePairs | elementValue)? ")")? ;
creator ::= (nonWildcardTypeArguments createdName classCreatorRest) | (createdName arrayCreatorRest | classCreatorRest) ;
superSuffix ::= arguments | ("." Identifier arguments?) ;
unaryExpressionNotPlusMinus ::= ("~" unaryExpression) | ("!" unaryExpression) | castExpression | (primary selector* ("++" | "--")?) ;
genericMethodOrConstructorDecl ::= typeParameters genericMethodOrConstructorRest ;
catches ::= catchClause catchClause* ;
interfaceGenericMethodDecl ::= typeParameters type | "void" Identifier interfaceMethodDeclaratorRest ;
annotationTypeElementRest ::= (type annotationMethodOrConstantRest ";") | (normalClassDeclaration ";"?) | (normalInterfaceDeclaration ";"?) | (enumDeclaration ";"?) | (annotationTypeDeclaration ";"?) ;
unaryExpression ::= ("+" unaryExpression) | ("-" unaryExpression) | ("++" unaryExpression) | ("--" unaryExpression) | unaryExpressionNotPlusMinus ;
formalParameterDeclsRest ::= (variableDeclaratorId ("," formalParameterDecls)?) | ("..." variableDeclaratorId) ;
fieldDeclaration ::= variableDeclarators ";" ;
switchLabel ::= ("case" constantExpression ":") | ("case" enumConstantName ":") | ("default" ":") ;
relationalExpression ::= shiftExpression (relationalOp shiftExpression)* ;
UnicodeEscape ::= "\\" "u" HexDigit HexDigit HexDigit HexDigit ;
enumBodyDeclarations ::= ";" classBodyDeclaration* ;
classOrInterfaceDeclaration ::= classOrInterfaceModifiers classDeclaration | interfaceDeclaration ;
voidMethodDeclaratorRest ::= formalParameters ("throws" qualifiedNameList)? methodBody | ";" ;
parExpression ::= "(" expression ")" ;
exclusiveOrExpression ::= andExpression ("^" andExpression)* ;
expression ::= conditionalExpression (assignmentOperator expression)? ;
typeArgument ::= type | ("?" ("extends" | "super" type)?) ;
importDeclaration ::= "import" "static"? qualifiedName ("." "*")? ";" ;
constantDeclaratorsRest ::= constantDeclaratorRest ("," constantDeclarator)* ;
assignmentOperator ::= "=" | "+=" | "-=" | "*=" | "/=" | "&=" | "|=" | "^=" | "%=" | (t1::"<" t2::"<" t3::"=") | (t1::">" t2::">" t3::">" t4::("="?)) | (t1::">" t2::">" t3::"=") ;
typeParameter ::= Identifier ("extends" typeBound)? ;
multiplicativeExpression ::= unaryExpression ("*" | "/" | "%" unaryExpression)* ;
block ::= "{" blockStatement* "}" ;
OctalEscape ::= ("\\" "0" | "1" | "2" | "3" "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7") | ("\\" "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7") | ("\\" "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7") ;
voidInterfaceMethodDeclaratorRest ::= formalParameters ("throws" qualifiedNameList)? ";" ;
catchClause ::= "catch" "(" formalParameter ")" block ;
normalInterfaceDeclaration ::= "interface" Identifier typeParameters? ("extends" typeList)? interfaceBody ;
classCreatorRest ::= arguments classBody? ;
arrayCreatorRest ::= "[" ("]" ("[" "]")* arrayInitializer) | (expression "]" ("[" expression "]")* ("[" "]")*) ;
qualifiedNameList ::= qualifiedName ("," qualifiedName)* ;
OctalLiteral ::= "0" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7")+ IntegerTypeSuffix? ;
additiveExpression ::= multiplicativeExpression ("+" | "-" multiplicativeExpression)* ;
instanceOfExpression ::= relationalExpression ("instanceof" type)? ;
elementValuePairs ::= elementValuePair ("," elementValuePair)* ;
shiftOp ::= (t1::"<" t2::("<"?)) | (t1::">" t2::">" t3::">") | (t1::">" t2::(">"?)) ;
EscapeSequence ::= ("\\" "b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | UnicodeEscape | OctalEscape ;
primary ::= parExpression | ("this" ("." Identifier)* identifierSuffix?) | ("super" superSuffix) | literal | ("new" creator) | (Identifier ("." Identifier)* identifierSuffix?) | (primitiveType ("[" "]")* "." "class") | ("void" "." "class") ;
conditionalOrExpression ::= conditionalAndExpression ("||" conditionalAndExpression)* ;
memberDeclaration ::= type methodDeclaration | fieldDeclaration ;
--------------------java::java-5-stahl.bgf--------------------
casesGroup ::= aCase+ caseSList ;
declaration ::= m::modifiers t::typeSpec v::variableDefinitions ;
builtInTypeSpec ::= builtInType (lb::LBRACK RBRACK)* ;
NUM_INT ::= ("." ("." ".") | ((("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ EXPONENT? (f1::FLOAT_SUFFIX)?)?)) | (("0" (("x" | "X" HEX_DIGIT+) | (("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+) | (("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7")+))?) | ("1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")*) ("l" | "L" | ("." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* EXPONENT? (f2::FLOAT_SUFFIX)?) | (EXPONENT (f3::FLOAT_SUFFIX)?) | (f4::FLOAT_SUFFIX))?) ;
classBlock ::= LCURLY (classField | SEMI)* RCURLY ;
identPrimary ::= ta1::typeArguments IDENT ((DOT ta2::typeArguments IDENT) | ε)* ((lp::LPAREN argList RPAREN) | ((lbc::LBRACK RBRACK)+))? ;
statement ::= compoundStatement | (declaration SEMI) | (expression SEMI) | (m::modifiers enumDefinition | classDefinition) | (IDENT c::COLON statement) | ("if" LPAREN expression RPAREN statement ("else" statement)?) | ("for" LPAREN (parameterDeclaration COLON expression) | (forInit SEMI forCond SEMI forIter) RPAREN statement) | ("while" LPAREN expression RPAREN statement) | ("do" statement "while" LPAREN expression RPAREN SEMI) | ("break" IDENT? SEMI) | ("continue" IDENT? SEMI) | ("return" expression? SEMI) | ("switch" LPAREN expression RPAREN LCURLY casesGroup* RCURLY) | tryBlock | ("throw" expression SEMI) | ("synchronized" LPAREN expression RPAREN compoundStatement) | (ASSERT expression (COLON expression)? SEMI) | (s::SEMI) ;
postfixExpression ::= primaryExpression ((DOT "this") | (DOT ta1::typeArguments (IDENT (lp::LPAREN argList RPAREN)?) | ("super" (lp3::LPAREN argList RPAREN) | (DOT ta2::typeArguments IDENT (lps::LPAREN argList RPAREN)?))) | (DOT newExpression) | (lb::LBRACK expression RBRACK))* ((in::INC) | (de::DEC))? ;
interfaceDefinition ::= "interface" IDENT tp::typeParameters ie::interfaceExtends ib::interfaceBlock ;
classDefinition ::= "class" IDENT tp::typeParameters sc::superClassClause ic::implementsClause cb::classBlock ;
inclusiveOrExpression ::= exclusiveOrExpression (BOR exclusiveOrExpression)* ;
compilationUnit ::= packageDefinition | ε importDefinition* typeDefinition* ;
variableDefinitions ::= variableDeclarator (COMMA variableDeclarator)* ;
enumConst ::= annotations IDENT enumConstInit classBlock? ;
classField ::= (mods::modifiers (it::innerTypeDef) | (tp::typeParameters (h::ctorHead s::constructorBody) | (md::memberDef))) | ("static" s3::compoundStatement) | (s4::compoundStatement) ;
STRING_LITERAL ::= """ (ESC | string())* """ ;
annotationInit ::= (lp::LPAREN (annotationMemberInit (COMMA annotationMemberInit)*) | annotationMemberValue | ε RPAREN) | ε ;
annotationMemberInit ::= IDENT ASSIGN annotationMemberValue ;
importDefinition ::= i::"import" "static"? identifierStar SEMI ;
newExpression ::= "new" typeArguments type (LPAREN argList RPAREN classBlock?) | (newArrayDeclarator arrayInitializer?) ;
classOrInterfaceType ::= IDENT typeArguments (DOT IDENT typeArguments)* ;
explicitConstructorInvocation ::= typeArguments ("this" lp1::LPAREN argList RPAREN SEMI) | ("super" lp2::LPAREN argList RPAREN SEMI) ;
expressionList ::= expression (COMMA expression)* ;
ESC ::= "\\" "n" | "r" | "t" | "b" | "f" | """ | "\'" | "\\" | ("u"+ HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT) | ("0" | "1" | "2" | "3" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7")?)?) | ("4" | "5" | "6" | "7" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7")?) ;
interfaceBlock ::= LCURLY (interfaceField | SEMI)* RCURLY ;
finallyClause ::= "finally" compoundStatement ;
IDENT ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "_" | "$" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "_" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "$")* ;
parameterDeclarationList ::= (parameterDeclaration (COMMA parameterDeclaration)*)? ;
andExpression ::= equalityExpression (BAND equalityExpression)* ;
variableDeclarator ::= id::IDENT d::declaratorBrackets v::varInitializer ;
handler ::= "catch" LPAREN parameterDeclaration RPAREN compoundStatement ;
NUM_DOUBLE ::= ("." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ EXPONENT? "d" | "D") | ("0" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ "." | EXPONENT | "d" | "D") | (("1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* (("." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")*)? EXPONENT? "d" | "D") | EXPONENT) ;
arrayInitializer ::= lc::LCURLY (initializer (COMMA initializer)*)? COMMA? RCURLY ;
logicalAndExpression ::= inclusiveOrExpression (LAND inclusiveOrExpression)* ;
assignmentExpression ::= conditionalExpression (ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | STAR_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | SR_ASSIGN | BSR_ASSIGN | SL_ASSIGN | BAND_ASSIGN | BXOR_ASSIGN | BOR_ASSIGN assignmentExpression)? ;
typeParameters ::= (lt::LT typeParameter (COMMA typeParameter)* typeArgumentsEnd?) | ε ;
interfaceField ::= mods::modifiers (it::innerTypeDef) | (tp::typeParameters md::memberDef) ;
implementsClause ::= (i::"implements" classOrInterfaceType (COMMA classOrInterfaceType)*)? ;
conditionalExpression ::= logicalOrExpression (QUESTION assignmentExpression COLON conditionalExpression)? ;
constructorBody ::= lc::LCURLY explicitConstructorInvocation? statement* RCURLY ;
annotationTypeDefinition ::= AT "interface" IDENT ab::annotationBlock ;
typeArguments ::= (lt::LT typeArgument (COMMA typeArgument)* typeArgumentsEnd?) | ε ;
varInitializer ::= (ASSIGN initializer)? ;
primaryExpression ::= (identPrimary (DOT "class")?) | constant | "true" | "false" | "null" | newExpression | "this" | "super" | (LPAREN assignmentExpression RPAREN) | (builtInType (lbt::LBRACK RBRACK)* DOT "class") ;
shiftExpression ::= additiveExpression (SL | SR | BSR additiveExpression)* ;
packageDefinition ::= annotations p::"package" identifier SEMI ;
NUM_LONG ::= ("1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* "l" | "L" ;
enumDefinition ::= ENUM IDENT ic::implementsClause eb::enumBlock ;
equalityExpression ::= relationalExpression (NOT_EQUAL | EQUAL relationalExpression)* ;
aCase ::= ("case" expression) | "default" COLON ;
defaultValue ::= ("default" annotationMemberValue)? ;
EXPONENT ::= "e" | "E" ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
annotation ::= AT identifier annotationInit ;
typeDefinition ::= (m::modifiers classDefinition | enumDefinition | interfaceDefinition | annotationTypeDefinition) | SEMI ;
classTypeSpec ::= classOrInterfaceType (lb::LBRACK RBRACK)* ;
newArrayDeclarator ::= (lb::LBRACK expression? RBRACK)+ ;
unaryExpressionNotPlusMinus ::= (BNOT unaryExpression) | (LNOT unaryExpression) | (lpb::LPAREN builtInTypeSpec RPAREN unaryExpression) | (lp::LPAREN classTypeSpec RPAREN unaryExpressionNotPlusMinus) | postfixExpression ;
identifier ::= IDENT (DOT IDENT)* ;
unaryExpression ::= (INC unaryExpression) | (DEC unaryExpression) | (MINUS unaryExpression) | (PLUS unaryExpression) | unaryExpressionNotPlusMinus ;
CHAR_LITERAL ::= "\'" ESC | string() "\'" ;
NUM_FLOAT ::= ("." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ EXPONENT? "f" | "F") | ("0" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ "." | EXPONENT | "f" | "F") | (("1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* (("." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")*)? EXPONENT? "f" | "F") | EXPONENT) ;
interfaceExtends ::= (e::"extends" classOrInterfaceType (COMMA classOrInterfaceType)*)? ;
relationalExpression ::= shiftExpression ((LT | GT | LE | GE shiftExpression)*) | ("instanceof" typeSpec) ;
annotationBlock ::= LCURLY (annotationField | SEMI)* RCURLY ;
throwsClause ::= "throws" identifier (COMMA identifier)* ;
declaratorBrackets ::= (lb::LBRACK RBRACK)* ;
identifierStar ::= IDENT (DOT IDENT)* (DOT STAR)? ;
exclusiveOrExpression ::= andExpression (BXOR andExpression)* ;
typeArgument ::= (q::QUESTION (("extends" referenceTypeSpec) | ("super" referenceTypeSpec))?) | referenceTypeSpec ;
ctorHead ::= IDENT LPAREN parameterDeclarationList RPAREN throwsClause? ;
annotationMemberArrayInitializer ::= lc::LCURLY (annotationMemberValue (COMMA annotationMemberValue)*)? COMMA? RCURLY ;
tryBlock ::= "try" compoundStatement handler* finallyClause? ;
enumConstInit ::= (lp::LPAREN argList RPAREN) | ε ;
parameterDeclaration ::= pm::parameterModifier t::typeSpec (el::ELLIPSIS)? id::IDENT pd::declaratorBrackets ;
typeParameter ::= IDENT ("extends" classOrInterfaceType (BAND classOrInterfaceType)*)? ;
arrayTypeSpec ::= builtInType (lb::LBRACK RBRACK)+ ;
multiplicativeExpression ::= unaryExpression (STAR | DIV | MOD unaryExpression)* ;
superClassClause ::= ("extends" classOrInterfaceType)? ;
enumBlock ::= LCURLY (enumConst (COMMA enumConst)*)? COMMA? (SEMI (classField | SEMI)*)? RCURLY ;
annotationField ::= mods::modifiers (it::innerTypeDef) | (ts::typeSpec (i::IDENT LPAREN RPAREN dv::defaultValue SEMI) | (v::variableDefinitions SEMI)) ;
memberDef ::= t::typeSpec (IDENT LPAREN param::parameterDeclarationList RPAREN rt::declaratorBrackets (tc::throwsClause)? SEMI | (s2::compoundStatement)) | (v::variableDefinitions SEMI) ;
compoundStatement ::= lc::LCURLY statement* RCURLY ;
additiveExpression ::= multiplicativeExpression (PLUS | MINUS multiplicativeExpression)* ;
logicalOrExpression ::= logicalAndExpression (LOR logicalAndExpression)* ;
--------------------java::java-5-studman.bgf--------------------
casesGroup ::= aCase+ caseSList ;
declaration ::= m::modifiers t::typeSpec v::variableDefinitions ;
forEachClause ::= p::parameterDeclaration COLON expression ;
builtInTypeSpec ::= builtInType (lb::LBRACK RBRACK)* ;
NUM_INT ::= ("." ((("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ EXPONENT? (f1::FLOAT_SUFFIX)?) | "..")?) | (("0" (("x" | "X" HEX_DIGIT+) | (("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+) | (("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7")+))?) | ("1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")*) ("l" | "L" | ("." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* EXPONENT? (f2::FLOAT_SUFFIX)?) | (EXPONENT (f3::FLOAT_SUFFIX)?) | (f4::FLOAT_SUFFIX))?) ;
classBlock ::= LCURLY (classField | SEMI)* RCURLY ;
identPrimary ::= (ta1::typeArguments)? IDENT ((DOT (ta2::typeArguments)? IDENT) | ε)* ((lp::LPAREN argList RPAREN) | ((lbc::LBRACK RBRACK)+))? ;
statement ::= compoundStatement | (declaration SEMI) | (expression SEMI) | (m::modifiers classDefinition) | (IDENT c::COLON statement) | ("if" LPAREN expression RPAREN statement ("else" statement)?) | forStatement | ("while" LPAREN expression RPAREN statement) | ("do" statement "while" LPAREN expression RPAREN SEMI) | ("break" IDENT? SEMI) | ("continue" IDENT? SEMI) | ("return" expression? SEMI) | ("switch" LPAREN expression RPAREN LCURLY casesGroup* RCURLY) | tryBlock | ("throw" expression SEMI) | ("synchronized" LPAREN expression RPAREN compoundStatement) | ("assert" expression (COLON expression)? SEMI) | (s::SEMI) ;
postfixExpression ::= primaryExpression ((DOT typeArguments? (IDENT (lp::LPAREN argList RPAREN)?) | ("super" (lp3::LPAREN argList RPAREN) | (DOT typeArguments? IDENT (lps::LPAREN argList RPAREN)?))) | (DOT "this") | (DOT newExpression) | (lb::LBRACK expression RBRACK))* ((in::INC) | (de::DEC))? ;
interfaceDefinition ::= "interface" IDENT (tp::typeParameters)? ie::interfaceExtends ib::interfaceBlock ;
classDefinition ::= "class" IDENT (tp::typeParameters)? sc::superClassClause ic::implementsClause cb::classBlock ;
inclusiveOrExpression ::= exclusiveOrExpression (BOR exclusiveOrExpression)* ;
compilationUnit ::= packageDefinition | ε importDefinition* typeDefinition* ;
variableDefinitions ::= variableDeclarator (COMMA variableDeclarator)* ;
annotationDefinition ::= AT "interface" IDENT ab::annotationBlock ;
classField ::= (mods::modifiers (td::typeDefinitionInternal) | ((tp::typeParameters)? (h::ctorHead s::constructorBody) | (t::typeSpec (IDENT LPAREN param::parameterDeclarationList RPAREN rt::declaratorBrackets (tc::throwsClause)? (s2::compoundStatement) | SEMI) | (v::variableDefinitions SEMI)))) | ("static" s3::compoundStatement) | (s4::compoundStatement) ;
STRING_LITERAL ::= """ (ESC | string())* """ ;
anntotationMemberValuePairs ::= annotationMemberValuePair (COMMA annotationMemberValuePair)* ;
importDefinition ::= i::"import" "static"? identifierStar SEMI ;
newExpression ::= "new" typeArguments? type (LPAREN argList RPAREN classBlock?) | (newArrayDeclarator arrayInitializer?) ;
classOrInterfaceType ::= IDENT typeArguments? (DOT IDENT typeArguments?)* ;
explicitConstructorInvocation ::= typeArguments? ("this" lp1::LPAREN argList RPAREN SEMI) | ("super" lp2::LPAREN argList RPAREN SEMI) ;
expressionList ::= expression (COMMA expression)* ;
ESC ::= "\\" "n" | "r" | "t" | "b" | "f" | """ | "\'" | "\\" | ("u"+ HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT) | ("0" | "1" | "2" | "3" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7")?)?) | ("4" | "5" | "6" | "7" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7")?) ;
interfaceBlock ::= LCURLY (interfaceField | SEMI)* RCURLY ;
finallyClause ::= "finally" compoundStatement ;
IDENT ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "_" | "$" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "_" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "$")* ;
parameterDeclarationList ::= ((parameterDeclaration (COMMA parameterDeclaration)* (COMMA variableLengthParameterDeclaration)?) | variableLengthParameterDeclaration)? ;
andExpression ::= equalityExpression (BAND equalityExpression)* ;
variableDeclarator ::= id::IDENT d::declaratorBrackets v::varInitializer ;
handler ::= "catch" LPAREN parameterDeclaration RPAREN compoundStatement ;
NUM_DOUBLE ::= ("." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ EXPONENT? "d" | "D") | ("0" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ "." | EXPONENT | "d" | "D") | (("1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* (("." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")*)? EXPONENT? "d" | "D") | EXPONENT) ;
arrayInitializer ::= lc::LCURLY (initializer (COMMA initializer)* COMMA?)? RCURLY ;
enumConstantBlock ::= LCURLY (enumConstantField | SEMI)* RCURLY ;
logicalAndExpression ::= inclusiveOrExpression (LAND inclusiveOrExpression)* ;
enumConstant ::= an::annotations i::IDENT (LPAREN a::argList RPAREN)? (b::enumConstantBlock)? ;
assignmentExpression ::= conditionalExpression (ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | STAR_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | SR_ASSIGN | BSR_ASSIGN | SL_ASSIGN | BAND_ASSIGN | BXOR_ASSIGN | BOR_ASSIGN assignmentExpression)? ;
typeParameters ::= LT typeParameter (COMMA typeParameter)* typeArgumentsOrParametersEnd? ;
annotationMemberValuePair ::= i::IDENT ASSIGN v::annotationMemberValueInitializer ;
interfaceField ::= mods::modifiers (td::typeDefinitionInternal) | ((tp::typeParameters)? t::typeSpec (IDENT LPAREN param::parameterDeclarationList RPAREN rt::declaratorBrackets (tc::throwsClause)? SEMI) | (v::variableDefinitions SEMI)) ;
implementsClause ::= (i::"implements" classOrInterfaceType (COMMA classOrInterfaceType)*)? ;
conditionalExpression ::= logicalOrExpression (QUESTION assignmentExpression COLON conditionalExpression)? ;
constructorBody ::= lc::LCURLY explicitConstructorInvocation? statement* RCURLY ;
typeArguments ::= LT typeArgument (COMMA typeArgument)* typeArgumentsOrParametersEnd? ;
varInitializer ::= (ASSIGN initializer)? ;
primaryExpression ::= (identPrimary (DOT "class")?) | constant | "true" | "false" | "null" | newExpression | "this" | "super" | (LPAREN assignmentExpression RPAREN) | (builtInType (lbt::LBRACK RBRACK)* DOT "class") ;
shiftExpression ::= additiveExpression (SL | SR | BSR additiveExpression)* ;
packageDefinition ::= annotations p::"package" identifier SEMI ;
enumConstantField ::= (mods::modifiers (td::typeDefinitionInternal) | ((tp::typeParameters)? t::typeSpec (IDENT LPAREN param::parameterDeclarationList RPAREN rt::declaratorBrackets (tc::throwsClause)? (s2::compoundStatement) | SEMI) | (v::variableDefinitions SEMI))) | (s4::compoundStatement) ;
NUM_LONG ::= ("1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* "l" | "L" ;
enumDefinition ::= "enum" IDENT ic::implementsClause eb::enumBlock ;
wildcardType ::= q::QUESTION typeArgumentBounds? ;
variableLengthParameterDeclaration ::= pm::parameterModifier t::typeSpec TRIPLE_DOT id::IDENT pd::declaratorBrackets ;
equalityExpression ::= relationalExpression (NOT_EQUAL | EQUAL relationalExpression)* ;
aCase ::= ("case" expression) | "default" COLON ;
traditionalForClause ::= forInit SEMI forCond SEMI forIter ;
EXPONENT ::= "e" | "E" ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
annotation ::= AT i::identifier (LPAREN (args::annotationArguments)? RPAREN)? ;
typeDefinition ::= (m::modifiers typeDefinitionInternal) | SEMI ;
classTypeSpec ::= classOrInterfaceType (lb::LBRACK RBRACK)* ;
typeArgumentBounds ::= "extends" | "super" classOrInterfaceType ;
newArrayDeclarator ::= (lb::LBRACK expression? RBRACK)+ ;
unaryExpressionNotPlusMinus ::= (BNOT unaryExpression) | (LNOT unaryExpression) | (lpb::LPAREN builtInTypeSpec RPAREN unaryExpression) | (lp::LPAREN classTypeSpec RPAREN unaryExpressionNotPlusMinus) | postfixExpression ;
identifier ::= IDENT (DOT IDENT)* ;
unaryExpression ::= (INC unaryExpression) | (DEC unaryExpression) | (MINUS unaryExpression) | (PLUS unaryExpression) | unaryExpressionNotPlusMinus ;
forStatement ::= f::"for" LPAREN traditionalForClause | forEachClause RPAREN statement ;
CHAR_LITERAL ::= "\'" ESC | string() "\'" ;
typeParameterBounds ::= "extends" classOrInterfaceType (BAND classOrInterfaceType)* ;
NUM_FLOAT ::= ("." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ EXPONENT? "f" | "F") | ("0" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ "." | EXPONENT | "f" | "F") | (("1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* (("." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")*)? EXPONENT? "f" | "F") | EXPONENT) ;
parameterModifier ::= annotation* (f::"final")? annotation* ;
interfaceExtends ::= (e::"extends" classOrInterfaceType (COMMA classOrInterfaceType)*)? ;
relationalExpression ::= shiftExpression ((LT | GT | LE | GE shiftExpression)*) | ("instanceof" typeSpec) ;
annotationBlock ::= LCURLY (annotationField | SEMI)* RCURLY ;
throwsClause ::= "throws" identifier (COMMA identifier)* ;
declaratorBrackets ::= (lb::LBRACK RBRACK)* ;
identifierStar ::= IDENT (DOT IDENT)* (DOT STAR)? ;
exclusiveOrExpression ::= andExpression (BXOR andExpression)* ;
builtInTypeArraySpec ::= builtInType (lb::LBRACK RBRACK)+ ;
ctorHead ::= IDENT LPAREN parameterDeclarationList RPAREN throwsClause? ;
annotationMemberArrayInitializer ::= lc::LCURLY (annotationMemberArrayValueInitializer (COMMA annotationMemberArrayValueInitializer)* COMMA?)? RCURLY ;
tryBlock ::= "try" compoundStatement handler* finallyClause? ;
parameterDeclaration ::= pm::parameterModifier t::typeSpec id::IDENT pd::declaratorBrackets ;
typeParameter ::= id::IDENT typeParameterBounds? ;
multiplicativeExpression ::= unaryExpression (STAR | DIV | MOD unaryExpression)* ;
enumBlock ::= LCURLY (enumConstant (COMMA enumConstant)* COMMA?)? (SEMI (classField | SEMI)*)? RCURLY ;
superClassClause ::= ("extends" c::classOrInterfaceType)? ;
annotationField ::= mods::modifiers (td::typeDefinitionInternal) | (t::typeSpec (i::IDENT LPAREN RPAREN rt::declaratorBrackets ("default" amvi::annotationMemberValueInitializer)? SEMI) | (v::variableDefinitions SEMI)) ;
compoundStatement ::= lc::LCURLY statement* RCURLY ;
additiveExpression ::= multiplicativeExpression (PLUS | MINUS multiplicativeExpression)* ;
logicalOrExpression ::= logicalAndExpression (LOR logicalAndExpression)* ;
--------------------java::java-1-cordy-guo.bgf--------------------
equality_expression ::= relational_expression equality_op_relational_expression* ;
empty_statement ::= ";" NL ;
array_initializer ::= "{" {variable_initializer ","}* ","? "}" ;
relational_op_shift_expression ::= (relational_op shift_expression) | ("instanceof" type_specifier) ;
conditional_or_expression ::= conditional_and_expression or_conditional_and_expression* ;
conditional_choice ::= "?" expression ":" conditional_expression ;
and_inclusive_or_expression ::= "&&" inclusive_or_expression ;
for_statement ::= "for" "(" for_init for_expression for_update ")" statement NL ;
equality_op_relational_expression ::= equality_op relational_expression ;
shift_expression ::= additive_expression shift_additive_expression* ;
type_declaration ::= (class_declaration NL NL) | (interface_declaration NL NL) ;
interface_declaration ::= interface_header interface_body ;
catch_clause ::= "catch" "(" type_specifier variable_name ")" block ;
conditional_expression ::= conditional_or_expression conditional_choice? ;
variable_name ::= declared_name dimension* ;
additive_expression ::= multiplicative_expression add_op_multiplicative_expression* ;
try_statement ::= "try" block catch_clause* finally_clause? NL ;
dimension ::= "[" expression? "]" ;
imported_name ::= package_or_type_name dot_star? ;
label_statement ::= label_name ":" NL ;
inclusive_or_expression ::= exclusive_or_expression or_exclusive_or_expression* ;
while_statement ::= "while" "(" expression ")" statement NL ;
import_declaration ::= "import" imported_name ";" NL NL ;
implements_clause ::= "implements" qualified_name+ ;
or_and_expression ::= "^" and_expression ;
method_argument ::= "(" {argument ","}* ")" ;
conditional_and_expression ::= inclusive_or_expression and_inclusive_or_expression* ;
formal_parameter ::= "final"? type_specifier formal_parameter_name ;
continue_statement ::= "continue" label_name? ";" NL ;
throw_statement ::= "throw" expression ";" NL ;
extends_clause ::= "extends" type_name+ ;
variable_declarator ::= variable_name equals_variable_initializer? ;
interface_header ::= modifier* "interface" interface_name extends_clause? implements_clause? ;
dot_id ::= "." id ;
method_declarator ::= method_name "(" {formal_parameter ","}* ")" dimension* ;
for_expression ::= expression? ";" ;
if_statement ::= "if" "(" expression ")" statement else_clause? NL ;
throws ::= "throws" qualified_name+ ;
reference ::= id component* ;
assignment_expression ::= conditional_expression | (unary_expression assignment_operator assignment_expression) ;
constructor_body ::= block NL ;
for_init ::= ({expression ","}* ";") | local_variable_declaration ;
switch_block ::= "{" IN NL switch_alternative* EX "}" ;
method_body ::= (block NL NL) | (";" NL NL) ;
class_or_interface_body ::= "{" NL IN class_body_declaration* EX "}" ";"? NL NL ;
do_statement ::= "do" statement "while" "(" expression ")" ";" NL ;
instance_initializer ::= NL block NL NL ;
mult_op_unary_expression ::= mult_op unary_expression ;
or_exclusive_or_expression ::= "|" exclusive_or_expression ;
variable_declaration ::= modifier* type_specifier variable_declarators ";" NL ;
class_instance_creation_expression ::= "new" class_or_interface_name "(" {argument ","}* ")" class_body? ;
constructor_declaration ::= NL modifier* constructor_declarator throws? constructor_body NL NL ;
else_clause ::= "else" statement ;
or_conditional_and_expression ::= "||" conditional_and_expression ;
class_header ::= modifier* "class" class_name extends_clause? implements_clause? ;
class_declaration ::= class_header class_body ;
relational_expression ::= shift_expression relational_op_shift_expression* ;
break_statement ::= "break" label_name? ";" NL ;
shift_additive_expression ::= shift_op additive_expression ;
finally_clause ::= "finally" block ;
switch_label ::= ("case" constant_expression ":") | ("default" ":") ;
unary_expression ::= (pre_inc_dec unary_expression) | (unary_op unary_expression) | postfix_expression | cast_expression ;
package_header ::= "package" package_name ";" NL NL ;
switch_statement ::= "switch" "(" expression ")" switch_block NL ;
postfix_expression ::= primary post_inc_dec* ;
switch_alternative ::= switch_label IN NL declaration_or_statement* EX ;
multiplicative_expression ::= unary_expression mult_op_unary_expression* ;
add_op_multiplicative_expression ::= add_op multiplicative_expression ;
return_statement ::= "return" expression? ";" NL ;
array_type_specifier ::= type_name dimension+ ;
equals_variable_initializer ::= "=" variable_initializer ;
method_declaration ::= NL modifier* type_specifier method_declarator throws? method_body ;
cast_expression ::= "(" type_specifier ")" unary_expression ;
constructor_declarator ::= class_name "(" {formal_parameter ","}* ")" ;
and_equality_expression ::= "&" equality_expression ;
exclusive_or_expression ::= and_expression or_and_expression* ;
array_creation_expression ::= "new" array_type_specifier array_initializer? ;
static_initializer ::= NL "static" block NL NL ;
block ::= "{" NL IN declaration_or_statement* EX "}" ;
subscript ::= "[" expression "]" ;
expression_statement ::= expression ";" NL ;
empty_declaration ::= ";" NL ;
dot_star ::= "." "*" ;
synchronized_statement ::= "synchronized" "(" expression ")" statement NL ;
primary ::= literal | reference | ("(" expression ")" component*) | class_instance_creation_expression | array_creation_expression ;
package_declaration ::= package_header? import_declaration* type_declaration* ;
and_expression ::= equality_expression and_equality_expression* ;
--------------------java::java-1-jouault.bgf--------------------
Field ::= owner::JavaClass type::JavaClass isStatic::Boolean isPublic::Boolean ;
JavaClass ::= PrimitiveType ;
 JavaClass ::= (members::ClassMember)+ package::Package (typedElements::ClassMember)+ (parameters::FeatureParameter)+ isAbstract::Boolean isStatic::Boolean isPublic::Boolean ;
FeatureParameter ::= type::JavaClass method::Method ;
PrimitiveType ::= (members::ClassMember)+ package::Package (typedElements::ClassMember)+ (parameters::FeatureParameter)+ isAbstract::Boolean isStatic::Boolean isPublic::Boolean ;
--------------------java::java-1-touzet.bgf--------------------
MethodDefinition ::= class::ClassDeclaration (invocations::MethodInvocation)+ ;
ClassDeclaration ::= superclass::ClassDeclaration (methods::MethodDefinition)+ ;
--------------------java::java-3-bruneliere.bgf--------------------
Field ::= share::Boolean class::Class interface::Interface value::Value typeOf::Type ;
Parameter ::= name::String typeOf::Type owner::Method ;
Interface ::= (superInterface::Interface)+ (implementedBy::Class)+ (abstractMethods::Method)+ (constants::Field)+ ;
Class ::= superClass::Class (implement::Interface)+ (methods::Method)+ (fields::Field)+ ;
Method ::= share::Boolean class::Class interface::Interface resultOf::Type (parameters::Parameter)+ ;
--------------------java::java-4-sdf.bgf--------------------
ReturnStatement ::= "return" Expression? ";" ;
DimExpr ::= "[" Expression "]" ;
ArrayAccess ::= Name "[" Expression "]" ;
 ArrayAccess ::= PrimaryNoNewArray "[" Expression "]" ;
PrimaryNoNewArray ::= Literal ;
 PrimaryNoNewArray ::= "this" ;
 PrimaryNoNewArray ::= Name "." "this" ;
 PrimaryNoNewArray ::= "(" Expression ")" ;
 PrimaryNoNewArray ::= ClassInstanceCreationExpression ;
 PrimaryNoNewArray ::= FieldAccess ;
 PrimaryNoNewArray ::= MethodInvocation ;
 PrimaryNoNewArray ::= ArrayAccess ;
SwitchStatement ::= "switch" "(" Expression ")" SwitchBlock ;
WhileStatementNoShortIf ::= "while" "(" Expression ")" StatementNoShortIf ;
Interfaces ::= "implements" InterfaceType ("," InterfaceType)* ;
StaticInitializer ::= "static" Block ;
PackageDeclaration ::= "package" Name ";" ;
SingleTypeImportDeclaration ::= "import" Name ";" ;
MethodInvocation ::= Name "(" (Expression ("," Expression)*)? ")" ;
 MethodInvocation ::= Primary "." Identifier "(" (Expression ("," Expression)*)? ")" ;
 MethodInvocation ::= Primary "." ClassInstanceCreationExpression ;
 MethodInvocation ::= "super" "." Identifier "(" (Expression ("," Expression)*)? ")" ;
TypeImportOnDemandDeclaration ::= "import" Name "." "*" ";" ;
ArrayCreationExpression ::= "new" PrimitiveType DimExpr+ Dim* ;
 ArrayCreationExpression ::= "new" ClassOrInterfaceType DimExpr+ Dim* ;
 ArrayCreationExpression ::= "new" PrimitiveType DimExprInitialized+ ArrayInitializer ;
 ArrayCreationExpression ::= "new" ClassOrInterfaceType DimExprInitialized+ ArrayInitializer ;
MethodHeader ::= Modifier* MethodRes MethodDeclarator Throws? ;
Block ::= "{" BlockStatement* "}" ;
Throws ::= "throws" ClassType ("," ClassType)* ;
Assignment ::= LeftHandSide AssignmentOperator Expression ;
VariableDeclarator ::= VariableDeclaratorId ;
 VariableDeclarator ::= VariableDeclaratorId "=" VariableInitializer ;
CatchClause ::= "catch" "(" FormalParameter ")" Block ;
ArrayInitializer ::= "{" (VariableInitializer ("," VariableInitializer)*)? ","? "}" ;
ContinueStatement ::= "continue" Identifier? ";" ;
Dim ::= "[" "]" ;
VariableDeclaratorId ::= Identifier ;
 VariableDeclaratorId ::= VariableDeclaratorId "[" "]" ;
Finally ::= "finally" Block ;
WhileStatement ::= "while" "(" Expression ")" Statement ;
FieldAccess ::= Name ;
 FieldAccess ::= Primary "." Identifier ;
 FieldAccess ::= "super" "." Identifier ;
IfThenElseStatement ::= "if" "(" Expression ")" StatementNoShortIf "else" Statement ;
LabeledStatementNoShortIf ::= Identifier ":" StatementNoShortIf ;
InterfaceBody ::= "{" InterfaceMemberDeclaration* "}" ;
Super ::= "extends" ClassType ;
FormalParameter ::= Modifier* Type VariableDeclaratorId ;
BreakStatement ::= "break" Identifier? ";" ;
ThrowStatement ::= "throw" Expression ";" ;
SwitchBlockStatementGroup ::= SwitchLabel+ BlockStatement+ ;
Identifier ::= "@" NatCon ;
StatementExpression ::= Expression "++" ;
 StatementExpression ::= Expression "--" ;
 StatementExpression ::= "++" Expression ;
 StatementExpression ::= "--" Expression ;
 StatementExpression ::= Assignment ;
 StatementExpression ::= Expression "++" ;
 StatementExpression ::= Expression "--" ;
 StatementExpression ::= "++" Expression ;
 StatementExpression ::= "--" Expression ;
 StatementExpression ::= MethodInvocation ;
 StatementExpression ::= ClassInstanceCreationExpression ;
CompilationUnit ::= PackageDeclaration? ImportDeclaration* TypeDeclaration+ ;
ForStatement ::= "for" "(" ForInit? ";" Expression? ";" ForUpdate? ")" Statement ;
ClassInstanceCreationExpression ::= "new" ClassType "(" (Expression ("," Expression)*)? ")" ;
 ClassInstanceCreationExpression ::= "new" ClassType "(" (Expression ("," Expression)*)? ")" ClassBody ;
ConstructorDeclaration ::= Modifier* ConstructorDeclarator Throws? ConstructorBody ;
FieldDeclaration ::= Modifier* Type VariableDeclarator ("," VariableDeclarator)* ";" ;
LabeledStatement ::= Identifier ":" Statement ;
MethodDeclaration ::= MethodHeader MethodBody ;
Expression ::= Primary ;
 Expression ::= "+" Expression ;
 Expression ::= "-" Expression ;
 Expression ::= "~" Expression ;
 Expression ::= "!" Expression ;
 Expression ::= "(" PrimitiveType Dim* ")" Expression ;
 Expression ::= "(" Type ")" Expression ;
 Expression ::= "(" Name Dim+ ")" Expression ;
 Expression ::= Expression "*" Expression ;
 Expression ::= Expression "/" Expression ;
 Expression ::= Expression "%" Expression ;
 Expression ::= Expression "+" Expression ;
 Expression ::= Expression "-" Expression ;
 Expression ::= Expression "<<" Expression ;
 Expression ::= Expression ">>" Expression ;
 Expression ::= Expression ">>>" Expression ;
 Expression ::= Expression "<" Expression ;
 Expression ::= Expression ">" Expression ;
 Expression ::= Expression "<=" Expression ;
 Expression ::= Expression ">=" Expression ;
 Expression ::= Expression "instanceof" ReferenceType ;
 Expression ::= Expression "==" Expression ;
 Expression ::= Expression "!=" Expression ;
 Expression ::= Expression "&" Expression ;
 Expression ::= Expression "^" Expression ;
 Expression ::= Expression "|" Expression ;
 Expression ::= Expression "&&" Expression ;
 Expression ::= Expression "||" Expression ;
 Expression ::= Expression "?" Expression ":" Expression ;
 Expression ::= StatementExpression ;
 Expression ::= Assignment ;
 Expression ::= "+" Expression ;
 Expression ::= "-" Expression ;
 Expression ::= "~" Expression ;
 Expression ::= "!" Expression ;
 Expression ::= Expression "<" Expression ;
 Expression ::= Expression ">" Expression ;
 Expression ::= Expression "<=" Expression ;
 Expression ::= Expression ">=" Expression ;
AbstractMethodDeclaration ::= MethodHeader ";" ;
ExplicitConstructorInvocation ::= "this" "(" (Expression ("," Expression)*)? ")" ";" ;
 ExplicitConstructorInvocation ::= "super" "(" (Expression ("," Expression)*)? ")" ";" ;
ExtendsInterfaces ::= "extends" InterfaceType ("," InterfaceType)* ;
ConstructorDeclarator ::= SimpleName "(" (FormalParameter ("," FormalParameter)*)? ")" ;
Name ::= Type "." "class" ;
 Name ::= Identifier ("." Identifier)* ;
AssertStatement ::= "assert" Expression ";" ;
InterfaceDeclaration ::= Modifier* "interface" Identifier ExtendsInterfaces? InterfaceBody ;
ConstructorBody ::= "{" ExplicitConstructorInvocation? BlockStatement* "}" ;
LocalVariableDeclarationStatement ::= LocalVariableDeclaration ";" ;
SynchronizedStatement ::= "synchronized" "(" Expression ")" Block ;
ClassBody ::= "{" ClassBodyDeclaration* "}" ;
SwitchBlock ::= "{" SwitchBlockStatementGroup* SwitchLabel* "}" ;
ExpressionStatement ::= StatementExpression ";" ;
DimExprInitialized ::= "[" Expression? "]" ;
IfThenStatement ::= "if" "(" Expression ")" Statement ;
TryStatement ::= "try" Block CatchClause+ ;
 TryStatement ::= "try" Block CatchClause* Finally ;
LocalVariableDeclaration ::= Type VariableDeclarator ("," VariableDeclarator)* ;
ArrayType ::= PrimitiveType "[" "]" ;
 ArrayType ::= Name "[" "]" ;
 ArrayType ::= ArrayType "[" "]" ;
MethodDeclarator ::= Identifier "(" (FormalParameter ("," FormalParameter)*)? ")" ;
 MethodDeclarator ::= MethodDeclarator "[" "]" ;
StatementExpressionList ::= StatementExpression ("," StatementExpression)* ;
DoStatement ::= "do" Statement "while" "(" Expression ")" ";" ;
BlockStatement ::= Modifier* LocalVariableDeclarationStatement ;
 BlockStatement ::= Statement ;
ClassDeclaration ::= Modifier* "class" Identifier Super? Interfaces? ClassBody ;
SwitchLabel ::= "case" Expression ":" ;
 SwitchLabel ::= "default" ":" ;
--------------------java::java-5-cordy-guo-dean.bgf--------------------
wildcard_type ::= ("?" wildcard_type_bound?) | (id wildcard_type_bound?) ;
component ::= dot_id | method_argument | subscript | (generic_argument) | (class_instance_creation_expression) | (dimension) ;
equality_expression ::= relational_expression equality_op_relational_expression* ;
var_arg_specifier ::= "..." ;
empty_statement ::= ";" NL ;
array_initializer ::= "{" {variable_initializer ","}* ","? "}" ;
relational_op_shift_expression ::= (relational_op shift_expression) | ("instanceof" type_specifier) ;
conditional_or_expression ::= conditional_and_expression or_conditional_and_expression* ;
conditional_choice ::= "?" expression ":" conditional_expression ;
and_inclusive_or_expression ::= "&&" inclusive_or_expression ;
for_statement ::= "for" "(" for_init for_expression for_update ")" statement NL ;
single_annotation_value ::= (expression) | nested_annotation | ("{" {expression_or_nested_annotation ","}* "}") ;
equality_op_relational_expression ::= equality_op relational_expression ;
shift_expression ::= additive_expression shift_additive_expression* ;
type_declaration ::= (class_declaration NL NL) | (interface_declaration NL NL) | (enum_declaration NL) ;
interface_declaration ::= interface_header interface_body ;
for_in_init ::= modifier* type_specifier variable_name ;
catch_clause ::= "catch" "(" modifier* type_specifier variable_name ")" block ;
conditional_expression ::= conditional_or_expression conditional_choice? ;
declared_name ::= id generic_parameter? ;
statement ::= label_statement | empty_statement | expression_statement | if_statement | switch_statement | while_statement | do_statement | for_statement | (for_in_statement) | break_statement | continue_statement | return_statement | throw_statement | synchronized_statement | try_statement | (assert_statement) | block ;
variable_name ::= declared_name dimension* ;
additive_expression ::= multiplicative_expression add_op_multiplicative_expression* ;
try_statement ::= "try" block catch_clause* finally_clause? NL ;
dimension ::= "[" expression? "]" ;
imported_name ::= package_or_type_name dot_star? ;
type_parameter ::= declared_name type_bound_clause? ;
label_statement ::= label_name ":" statement ;
inclusive_or_expression ::= exclusive_or_expression or_exclusive_or_expression* ;
while_statement ::= "while" "(" expression ")" statement NL ;
import_declaration ::= ("import" "static"? imported_name ";" NL NL) | (";" NL) ;
implements_clause ::= "implements" qualified_name+ ;
assert_error_code ::= ":" expression ;
or_and_expression ::= "^" and_expression ;
method_argument ::= "(" {argument ","}* ")" ;
conditional_and_expression ::= inclusive_or_expression and_inclusive_or_expression* ;
annotation_value_spec ::= "(" annotation_value_list ")" ;
formal_parameter ::= annotation* "final"? type_specifier var_arg_specifier? formal_parameter_name ;
continue_statement ::= "continue" label_name? ";" NL ;
modifier ::= "abstract" | "final" | "public" | "protected" | "private" | "static" | "transient" | "volatile" | "native" | "synchronized" | ("strictfp") | (annotation) ;
assignment_operator ::= "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | (SPOFF ">" ">=" SPON) | (SPOFF ">" ">" ">=" SPON) | "&=" | "^=" | "|=" ;
throw_statement ::= "throw" expression ";" NL ;
extends_clause ::= "extends" type_name+ ;
member_declaration ::= method_or_constructor_declaration | (type_declaration) ;
variable_declarator ::= variable_name equals_variable_initializer? ;
interface_header ::= modifier* annot_marker? "interface" interface_name extends_clause? implements_clause? ;
dot_id ::= ("." generic_argument? id) | ("." "class") | ("." class_instance_declaration) ;
method_declarator ::= method_name "(" {formal_parameter ","}* ")" dimension* ;
for_expression ::= expression? ";" ;
if_statement ::= "if" "(" expression ")" statement else_clause? NL ;
throws ::= "throws" qualified_name+ ;
reference ::= (id component*) | (primitive_type component*) ;
assignment_expression ::= conditional_expression | (unary_expression assignment_operator assignment_expression) ;
constructor_body ::= block NL ;
for_init ::= ({expression ","}* ";") | local_variable_declaration ;
class_or_interface_component ::= (dot_id) | generic_argument ;
switch_block ::= "{" IN NL switch_alternative* EX "}" ;
keyed_annotation_value ::= id "=" single_annotation_value ;
generic_parameter ::= "<" {type_parameter ","}* ">" ;
method_body ::= (block NL NL) | (annotation_default? ";" NL NL) ;
wildcard_type_bound ::= ("extends" type_specifier) | ("super" type_specifier) ;
shift_op ::= "<<" | (SPOFF ">" ">" SPON) | (SPOFF ">" ">" ">" SPON) ;
enum_element ::= NL id method_argument? ;
class_or_interface_body ::= "{" NL IN class_body_declaration* EX "}" ";"? NL NL ;
annotation_value_list ::= (single_annotation_value) | ({keyed_annotation_value ","}*) ;
enum_declaration ::= enum_header enum_body ;
do_statement ::= "do" statement "while" "(" expression ")" ";" NL ;
type_bound ::= type_specifier and_type_spec* ;
and_type_spec ::= "&" type_specifier ;
instance_initializer ::= NL block NL NL ;
mult_op_unary_expression ::= mult_op unary_expression ;
or_exclusive_or_expression ::= "|" exclusive_or_expression ;
variable_declaration ::= modifier* type_specifier variable_declarators ";" NL ;
assert_statement ::= "assert" expression assert_error_code? ";" NL ;
type_bound_clause ::= "extends" type_bound ;
class_instance_creation_expression ::= "new" class_or_interface_name "(" {argument ","}* ")" class_body? ;
or_conditional_and_expression ::= "||" conditional_and_expression ;
constructor_declaration ::= NL modifier* generic_parameter? constructor_declarator throws? constructor_body NL NL ;
else_clause ::= "else" statement ;
class_header ::= modifier* "class" class_name extends_clause? implements_clause? ;
class_declaration ::= class_header class_body ;
annotation_default ::= ("default" expression) | ("default" array_initializer) ;
relational_expression ::= shift_expression relational_op_shift_expression* ;
break_statement ::= "break" label_name? ";" NL ;
annotation ::= SPOFF "@" reference "@"? SPON annotation_value_spec? NL ;
shift_additive_expression ::= shift_op additive_expression ;
finally_clause ::= "finally" block ;
switch_label ::= ("case" constant_expression ":") | ("default" ":") ;
unary_expression ::= (pre_inc_dec unary_expression) | (unary_op unary_expression) | postfix_expression | cast_expression ;
class_or_interface_name ::= id class_or_interface_component* ;
package_header ::= annotation* "package" package_name ";" NL NL ;
generic_argument ::= "<" {type_argument ","}* ">" ;
switch_statement ::= "switch" "(" expression ")" switch_block NL ;
postfix_expression ::= primary post_inc_dec* ;
switch_alternative ::= switch_label IN NL declaration_or_statement* EX ;
multiplicative_expression ::= unary_expression mult_op_unary_expression* ;
add_op_multiplicative_expression ::= add_op multiplicative_expression ;
enum_body ::= "{" IN {enum_element ","}* ","? class_body_declaration* EX "}" ";"? NL NL ;
return_statement ::= "return" expression? ";" NL ;
array_type_specifier ::= type_name dimension+ ;
equals_variable_initializer ::= "=" variable_initializer ;
method_declaration ::= NL modifier* generic_parameter? type_specifier method_declarator throws? method_body ;
cast_expression ::= "(" type_specifier ")" unary_expression ;
constructor_declarator ::= class_name "(" {formal_parameter ","}* ")" ;
and_equality_expression ::= "&" equality_expression ;
exclusive_or_expression ::= and_expression or_and_expression* ;
constant_expression ::= expression ;
array_creation_expression ::= "new" array_type_specifier array_initializer? ;
static_initializer ::= NL "static" block NL NL ;
block ::= "{" NL IN declaration_or_statement* EX "}" ;
subscript ::= "[" expression "]" ;
for_in_statement ::= "for" "(" for_in_init ":" expression ")" statement NL ;
enum_header ::= modifier* id? "enum" declared_name? implements_clause? ;
expression_statement ::= expression ";" NL ;
empty_declaration ::= ";" NL ;
dot_star ::= "." "*" ;
synchronized_statement ::= "synchronized" "(" expression ")" statement NL ;
primary ::= (literal component*) | reference | ("(" expression ")" component*) | (class_instance_creation_expression component*) | (array_creation_expression component*) ;
package_declaration ::= package_header? import_declaration* type_declaration* ;
and_expression ::= equality_expression and_equality_expression* ;
--------------------java::java-5-giquel.bgf--------------------
ArrayAccess ::= index::Expression array::Expression ;
SwitchStatement ::= (statements::Statement)+ expression::Expression ;
MethodDeclaration ::= extraArrayDimensions::Integer constructor::Boolean varargs::Boolean body::Block (parameters::SingleVariableDeclaration)+ (typeParameters::TypeParameter)+ (thrownExceptions::NamedElementRef)+ returnType::NamedElementRef ;
MemberRef ::= qualifier::NamedElementRef member::NamedElementRef ;
ArrayCreation ::= (dimensions::Expression)+ initializer::ArrayInitializer type::NamedElementRef ;
MethodRefParameter ::= name::String isVarargs::Boolean type::NamedElementRef ;
VariableDeclarationExpression ::= modifiers::String type::NamedElementRef ;
ImportDeclaration ::= static::Boolean importedElement::NamedElementRef ;
WildCardType ::= isUpperBound::Boolean bound::NamedElementRef ;
PackageDeclaration ::= model::Model (ownedElements::AbstractTypeDeclaration)+ ;
ParameterizedType ::= (typeArguments::NamedElementRef)+ type::NamedElementRef ;
IfStatement ::= expression::Expression elseStatement::Statement thenStatement::Statement ;
BlockComment ::= content::String isEnclosedByParent::Boolean isPrefixOfParent::Boolean ;
MethodInvocation ::= method::NamedElementRef (arguments::Expression)+ expression::Expression ;
NamedElementRef ::= extraArrayDimensions::Integer element::NamedElement qualifier::NamedElementRef ;
Assignment ::= operator::String rightHandSide::Expression leftHandSide::Expression ;
LineComment ::= content::String isEnclosedByParent::Boolean isPrefixOfParent::Boolean ;
PrefixExpression ::= operator::String operand::Expression ;
CatchClause ::= exception::SingleVariableDeclaration body::Block ;
AssertStatement ::= message::Expression expression::Expression ;
InfixExpression ::= operator::String (extendedOperands::Expression)+ rightOperand::Expression leftOperand::Expression ;
UnresolvedItem ::= name::String proxy::Boolean (comments::Comment)+ ;
SwitchCase ::= expressionInitialized::Boolean expression::Expression ;
SuperFieldAccess ::= qualifier::NamedElementRef field::NamedElementRef ;
TagElement ::= tagName::String (fragments::ASTNode)+ ;
AnnotationMemberValuePair ::= member::NamedElementRef value::Expression ;
PrimitiveType ::= (comments::Comment)+ ;
WhileStatement ::= expression::Expression body::Statement ;
FieldAccess ::= field::NamedElementRef expression::Expression ;
ConditionalExpression ::= elseExpression::Expression thenExpression::Expression expression::Expression ;
EnhancedForStatement ::= parameter::SingleVariableDeclaration expression::Expression body::Statement ;
SynchronizedStatement ::= body::Block expression::Expression ;
CastExpression ::= type::NamedElementRef expression::Expression ;
AnnotationTypeMemberDeclaration ::= type::NamedElementRef default::Expression ;
SingleVariableDeclaration ::= modifiers::String isVarargs::Boolean type::NamedElementRef ;
EnumConstantDeclaration ::= (arguments::Expression)+ anonymousClassDeclaration::AnonymousClassDeclaration ;
TryStatement ::= finally::Block body::Block (catchClauses::CatchClause)+ ;
MethodRef ::= qualifier::NamedElementRef (parameters::MethodRefParameter)+ method::NamedElementRef ;
VariableDeclarationStatement ::= modifiers::String type::NamedElementRef ;
AnnotationTypeDeclaration ::= originalFileContent::String package::PackageDeclaration (bodyDeclarations::BodyDeclaration)+ (superInterfaces::NamedElementRef)+ (commentsAfterBody::Comment)+ (imports::ImportDeclaration)+ (commentsBeforeBody::Comment)+ ;
SuperConstructorInvocation ::= (arguments::Expression)+ expression::Expression ;
Annotation ::= type::NamedElementRef (values::AnnotationMemberValuePair)+ ;
PostfixExpression ::= operator::String operand::Expression ;
SuperMethodInvocation ::= (arguments::Expression)+ qualifier::NamedElementRef method::NamedElementRef ;
ClassInstanceCreation ::= (arguments::Expression)+ type::NamedElementRef expression::Expression anonymousClassDeclaration::AnonymousClassDeclaration ;
Model ::= name::String (ownedElements::PackageDeclaration)+ (orphanTypes::OrphanType)+ ;
ForStatement ::= body::Statement expression::Expression (initializers::Expression)+ (updaters::Expression)+ ;
InstanceofExpression ::= leftOperand::Expression rightOperand::NamedElementRef ;
DoStatement ::= expression::Expression body::Statement ;
OrphanType ::= WildCardType ;
 OrphanType ::= ParameterizedType ;
 OrphanType ::= PrimitiveType ;
 OrphanType ::= name::String proxy::Boolean ;
TypeDeclaration ::= isInterface::Boolean (typeParameters::TypeParameter)+ superclass::NamedElementRef ;
--------------------java::java-5-landman.bgf--------------------
DimExpr ::= [dim] "[" Expr "]" ;
ImportDec ::= [typeImportOnDemandDec] "import" PackageName "." "*" ";" ;
 ImportDec ::= [typeImportDec] "import" TypeName ";" ;
 ImportDec ::= [staticImportDec] "import" "static" TypeName "." Id ";" ;
 ImportDec ::= [staticImportOnDemandDec] "import" "static" TypeName "." "*" ";" ;
PackageDec ::= [packageDec] Anno* "package" PackageName ";" ;
VarDec ::= [varDec] VarDecId "=" VarInit ;
 VarDec ::= [varDec] VarDecId ;
Interfaces ::= [implementsDec] "implements" {InterfaceType ","}+ ;
ClassOrInterfaceType ::= [classOrInterfaceType] TypeDecSpec TypeArgs? ;
VarDecId ::= Id ;
 VarDecId ::= [arrayVarDecId] Id Dim+ ;
ConstrDec ::= [constrDec] ConstrHead ConstrBody ;
InterfaceType ::= [interfaceType] TypeDecSpec TypeArgs? ;
ElemVal ::= [elemValArrayInit] "{" {ElemVal ","}* "}" ;
 ElemVal ::= Expr ;
 ElemVal ::= Anno ;
 ElemVal ::= [elemValArrayInit] "{" {ElemVal ","}* "," "}" ;
Block ::= [block] "{" BlockStm* "}" ;
Throws ::= [throwsDec] "throws" {ExceptionType ","}+ ;
ElemValPair ::= [elemValPair] Id "=" ;
CatchClause ::= [catch] "catch" "(" FormalParam ")" Block ;
ArrayInit ::= [arrayInit] "{" {VarInit ","}* "," "}" ;
 ArrayInit ::= [arrayInit] "{" {VarInit ","}* "}" ;
Dim ::= [dim] "[" "]" ;
EnumBody ::= [enumBody] "{" {EnumConst ","}* EnumBodyDecs? "}" ;
 EnumBody ::= [enumBody] "{" {EnumConst ","}* "," EnumBodyDecs? "}" ;
ConstrInv ::= [qSuperConstrInv] Expr "." TypeArgs? "super" "(" {Expr ","}* ")" ";" ;
 ConstrInv ::= [superConstrInv] TypeArgs? "super" "(" {Expr ","}* ")" ";" ;
 ConstrInv ::= [altConstrInv] TypeArgs? "this" "(" {Expr ","}* ")" ";" ;
FieldAccess ::= [qSuperField] TypeName "." "super" "." Id ;
 FieldAccess ::= [field] "." Id ;
 FieldAccess ::= [superField] "super" "." Id ;
MethodSpec ::= [method] MethodName ;
 MethodSpec ::= [superMethod] "super" "." TypeArgs? Id ;
 MethodSpec ::= [genericMethod] AmbName "." TypeArgs Id ;
 MethodSpec ::= [qSuperMethod] TypeName "." "super" "." TypeArgs? Id ;
 MethodSpec ::= [method] "." TypeArgs? Id ;
Super ::= [superDec] "extends" ClassType ;
TypeArgs ::= [typeArgs] "<" {ActualTypeArg ","}+ ">" ;
AnnoDecHead ::= [annoDecHead] "@" "interface" Id ;
TypeParam ::= [typeParam] TypeVarId TypeBound? ;
ArraySubscript ::= "[" Expr "]" ;
ConstrBody ::= [constrBody] "{" ConstrInv? BlockStm* "}" ;
Anno ::= [singleElemAnno] "@" TypeName "(" ")" ;
 Anno ::= [anno] "@" TypeName "(" {ElemValPair ","}* ")" ;
 Anno ::= [markerAnno] "@" TypeName ;
ArrayCreationExpr ::= [newArray] "new" ArrayBaseType DimExpr+ ;
 ArrayCreationExpr ::= [newArray] "new" ArrayBaseType ArrayInit ;
FieldDec ::= [fieldDec] Type {VarDec ","}+ ";" ;
CompilationUnit ::= [compilationUnit] PackageDec? ImportDec* TypeDec* ;
LocalVarDecStm ::= [localVarDecStm] LocalVarDec ";" ;
AnnoElemDec ::= EnumDec ;
 AnnoElemDec ::= [semicolon] ";" ;
 AnnoElemDec ::= ClassDec ;
 AnnoElemDec ::= ConstantDec ;
 AnnoElemDec ::= InterfaceDec ;
 AnnoElemDec ::= [annoMethodDec] AbstractMethodMod* Type Id "(" ")" DefaultVal? ";" ;
TypeBound ::= [typeBound] "extends" {ClassOrInterfaceType "&"}+ ;
EnumConst ::= [enumConst] Id EnumConstArgs? ClassBody? ;
AmbName ::= [ambName] AmbName "." Id ;
 AmbName ::= [ambName] Id ;
MethodDec ::= [methodDec] MethodDecHead MethodBody ;
MethodDecHead ::= [deprMethodDecHead] TypeParams? ResultType Id "(" {FormalParam ","}* ")" Dim+ Throws? ;
 MethodDecHead ::= [methodDecHead] TypeParams? ResultType Id "(" {FormalParam ","}* ")" Throws? ;
ExprName ::= [exprName] Id ;
 ExprName ::= [exprName] AmbName "." Id ;
AbstractMethodDec ::= [abstractMethodDec] TypeParams? ResultType Id "(" {FormalParam ","}* ")" Throws? ";" ;
 AbstractMethodDec ::= [deprAbstractMethodDec] TypeParams? ResultType Id "(" {FormalParam ","}* ")" Dim+ Throws? ";" ;
EnumConstArgs ::= "(" {Expr ","}* ")" ;
FormalParam ::= [varArityParam] Type "..." VarDecId ;
 FormalParam ::= [param] Type VarDecId ;
StaticInit ::= [staticInit] "static" Block ;
ClassLiteral ::= [voidClass] "void" "." "class" ;
 ClassLiteral ::= [class] Type "." "class" ;
EnumBodyDecs ::= [enumBodyDecs] ";" ClassBodyDec* ;
ExtendsInterfaces ::= [extendsInterfaces] "extends" {InterfaceType ","}+ ;
ClassType ::= [classType] TypeDecSpec TypeArgs? ;
ActualTypeArg ::= Type ;
 ActualTypeArg ::= [wildcard] "?" WildcardBound? ;
PackageOrTypeName ::= [packageOrTypeName] Id ;
 PackageOrTypeName ::= [packageOrTypeName] PackageOrTypeName "." Id ;
MethodName ::= [methodName] AmbName "." Id ;
 MethodName ::= [methodName] Id ;
InterfaceDec ::= InterfaceDecHead "{" InterfaceMemberDec* "}" ;
 InterfaceDec ::= AnnoDecHead "{" AnnoElemDec* "}" ;
InterfaceDecHead ::= [interfaceDecHead] "interface" Id TypeParams? ExtendsInterfaces? ;
CondMid ::= "?" Expr ":" ;
WildcardBound ::= [wildcardUpperBound] "extends" RefType ;
 WildcardBound ::= [wildcardLowerBound] "super" RefType ;
TypeDecSpec ::= TypeName ;
 TypeDecSpec ::= [member] TypeDecSpec TypeArgs "." Id ;
EnumDec ::= [enumDec] EnumDecHead EnumBody ;
EnumDecHead ::= [enumDecHead] "enum" Id Interfaces? ;
ConstantDec ::= [constantDec] Type {VarDec ","}+ ";" ;
ClassBody ::= [classBody] "{" ClassBodyDec* "}" ;
SwitchBlock ::= [switchBlock] "{" SwitchGroup* SwitchLabel* "}" ;
Expr ::= [postDecr] Expr "--" ;
 Expr ::= [postIncr] Expr "++" ;
 Expr ::= [castPrim] "(" PrimType ")" Expr ;
 Expr ::= [castRef] "(" RefType ")" Expr ;
 Expr ::= [minus] Expr ;
 Expr ::= [preIncr] "++" Expr ;
 Expr ::= [plus] Expr ;
 Expr ::= [preDecr] "--" Expr ;
 Expr ::= [this] "this" ;
 Expr ::= [mul] Expr "*" Expr ;
 Expr ::= [div] Expr Expr ;
 Expr ::= [remain] Expr "%" Expr ;
 Expr ::= [qThis] TypeName "." "this" ;
 Expr ::= [complement] "~" Expr ;
 Expr ::= [not] "!" Expr ;
 Expr ::= [plus] Expr Expr ;
 Expr ::= [minus] Expr Expr ;
 Expr ::= [uRightShift] Expr ">>>" Expr ;
 Expr ::= [rightShift] Expr ">>" Expr ;
 Expr ::= [leftShift] Expr "<<" Expr ;
 Expr ::= [ltEq] Expr "<=" Expr ;
 Expr ::= [lt] Expr "<" Expr ;
 Expr ::= [gtEq] Expr ">=" Expr ;
 Expr ::= [instanceOf] Expr "instanceof" RefType ;
 Expr ::= [gt] Expr ">" Expr ;
 Expr ::= [eq] Expr "==" Expr ;
 Expr ::= [notEq] Expr "!=" Expr ;
 Expr ::= [and] Expr "&" Expr ;
 Expr ::= [excOr] Expr "^" Expr ;
 Expr ::= [or] Expr "|" Expr ;
 Expr ::= [lazyAnd] Expr "&&" Expr ;
 Expr ::= [lazyOr] Expr "||" Expr ;
 Expr ::= [cond] Expr CondMid Expr ;
 Expr ::= [assignMinus] LHS "-=" Expr ;
 Expr ::= [assignExcOr] LHS "^=" Expr ;
 Expr ::= [assignPlus] LHS "+=" Expr ;
 Expr ::= [assignURightShift] LHS ">>>=" Expr ;
 Expr ::= [assignAnd] LHS "&=" Expr ;
 Expr ::= [assignDiv] LHS "/=" Expr ;
 Expr ::= [assignMul] LHS "*=" Expr ;
 Expr ::= [assignRemain] LHS "%=" Expr ;
 Expr ::= [assignLeftShift] LHS "<<=" Expr ;
 Expr ::= [assignRightShift] LHS ">>=" Expr ;
 Expr ::= [assignOr] LHS "|=" Expr ;
 Expr ::= [assign] LHS "=" Expr ;
 Expr ::= [qNewInstance] Expr "." "new" TypeArgs? Id TypeArgs? "(" {Expr ","}* ")" ClassBody? ;
 Expr ::= [lit] Literal ;
 Expr ::= [newInstance] "new" TypeArgs? ClassOrInterfaceType "(" {Expr ","}* ")" ClassBody? ;
 Expr ::= [exprName] ExprName ;
 Expr ::= ArrayCreationExpr ;
 Expr ::= "(" Expr ")" ;
 Expr ::= ε ;
 Expr ::= [invoke] MethodSpec "(" {Expr ","}* ")" ;
ArrayType ::= [arrayType] Type "[" "]" ;
ConstrHead ::= [constrDecHead] TypeParams? Id "(" {FormalParam ","}* ")" Throws? ;
Stm ::= [synchronized] "synchronized" "(" Expr ")" Block ;
 Stm ::= [exprStm] Expr ";" ;
 Stm ::= [for] "for" "(" {Expr ","}* ";" Expr? ";" {Expr ","}* ")" Stm ;
 Stm ::= [for] "for" "(" LocalVarDec ";" Expr? ";" {Expr ","}* ")" Stm ;
 Stm ::= Block ;
 Stm ::= [continue] "continue" Id? ";" ;
 Stm ::= [try] "try" Block CatchClause+ ;
 Stm ::= [throw] "throw" Expr ";" ;
 Stm ::= [switch] "switch" "(" Expr ")" SwitchBlock ;
 Stm ::= [if] "if" "(" Expr ")" Stm ;
 Stm ::= [break] "break" Id? ";" ;
 Stm ::= [empty] ";" ;
 Stm ::= [labeled] Id ":" Stm ;
 Stm ::= [assertStm] "assert" Expr ":" Expr ";" ;
 Stm ::= [forEach] "for" "(" FormalParam ":" Expr ")" Stm ;
 Stm ::= [assertStm] "assert" Expr ";" ;
 Stm ::= [try] "try" Block CatchClause* "finally" Block ;
 Stm ::= [return] "return" Expr? ";" ;
 Stm ::= [doWhile] "do" Stm "while" "(" Expr ")" ";" ;
 Stm ::= [while] "while" "(" Expr ")" Stm ;
 Stm ::= [if] "if" "(" Expr ")" Stm "else" Stm ;
SwitchGroup ::= [switchGroup] SwitchLabel+ BlockStm+ ;
ClassDec ::= EnumDec ;
 ClassDec ::= [classDec] ClassDecHead ClassBody ;
ClassDecHead ::= [classDecHead] "class" Id TypeParams? Super? Interfaces? ;
LocalVarDec ::= [localVarDec] Type {VarDec ","}+ ;
TypeName ::= [typeName] PackageOrTypeName "." Id ;
 TypeName ::= [typeName] Id ;
ArrayBaseType ::= TypeName ;
 ArrayBaseType ::= PrimType ;
 ArrayBaseType ::= [unboundWld] TypeName "<" "?" ">" ;
SwitchLabel ::= [case] "case" Expr ":" ;
 SwitchLabel ::= [default] "default" ":" ;
TypeParams ::= [typeParams] "<" {TypeParam ","}+ ">" ;
--------------------java::jvm-level1.bgf--------------------
Instruction ::= (getStatic::(owner::string() name::string() description::string())) | (putStatic::(owner::string() name::string() description::string())) | (getField::(owner::string() name::string() description::string())) | (putField::(owner::string() name::string() description::string())) | (increment::(index::integer() amount::integer())) | (nop::ε) | (aConstNull::ε) | (iConstM1::ε) | (iConst0::ε) | (iConst1::ε) | (iConst2::ε) | (iConst3::ε) | (iConst4::ε) | (iConst5::ε) | (lConst0::ε) | (lConst1::ε) | (fConst0::ε) | (fConst1::ε) | (fConst2::ε) | (dConst0::ε) | (dConst1::ε) | (iaLoad::ε) | (laLoad::ε) | (faLoad::ε) | (daLoad::ε) | (aaLoad::ε) | (baLoad::ε) | (caLoad::ε) | (saLoad::ε) | (iaStore::ε) | (laStore::ε) | (faStore::ε) | (daStore::ε) | (aaStore::ε) | (baStore::ε) | (caStore::ε) | (saStore::ε) | (pop::ε) | (pop2::ε) | (dup::ε) | (dupX1::ε) | (dupX2::ε) | (dup2::ε) | (dup2X1::ε) | (dup2X2::ε) | (swap::ε) | (iAdd::ε) | (lAdd::ε) | (fAdd::ε) | (dAdd::ε) | (iSub::ε) | (lSub::ε) | (fSub::ε) | (dSub::ε) | (iMul::ε) | (lMul::ε) | (fMul::ε) | (dMul::ε) | (iDiv::ε) | (lDiv::ε) | (fDiv::ε) | (dDiv::ε) | (iRem::ε) | (lRem::ε) | (fRem::ε) | (dRem::ε) | (iNeg::ε) | (lNeg::ε) | (fNeg::ε) | (dNeg::ε) | (iShl::ε) | (lShl::ε) | (iShr::ε) | (lShr::ε) | (iuShr::ε) | (luShr::ε) | (iAnd::ε) | (lAnd::ε) | (iOr::ε) | (lOr::ε) | (iXor::ε) | (lXor::ε) | (i2l::ε) | (i2f::ε) | (i2d::ε) | (l2i::ε) | (l2f::ε) | (l2d::ε) | (f2i::ε) | (f2l::ε) | (f2d::ε) | (d2i::ε) | (d2l::ε) | (d2f::ε) | (i2b::ε) | (i2c::ε) | (i2s::ε) | (lCmp::ε) | (fCmpL::ε) | (fCmpG::ε) | (dCmpL::ε) | (dCmpH::ε) | (iReturn::ε) | (lReturn::ε) | (fReturn::ε) | (dReturn::ε) | (aReturn::ε) | (return::ε) | (arrayLength::ε) | (aThrow::ε) | (monitorEnter::ε) | (monitorExit::ε) | (biPush::(operand::integer())) | (siPush::(operand::integer())) | (newArray::(operand::integer())) | (ifEq::(label::integer())) | (ifNe::(label::integer())) | (ifLt::(label::integer())) | (ifGe::(label::integer())) | (ifGt::(label::integer())) | (ifLe::(label::integer())) | (ifICmpEq::(label::integer())) | (ifICmpNe::(label::integer())) | (ifICmpLt::(label::integer())) | (ifICmpGe::(label::integer())) | (ifICmpGt::(label::integer())) | (ifICmpLe::(label::integer())) | (ifACmpEq::(label::integer())) | (ifACmpNe::(label::integer())) | (goto::(label::integer())) | (jsr::(label::integer())) | (ifNull::(label::integer())) | (ifNonNull::(label::integer())) | (label::(index::integer())) | (lineNumber::(line::integer() labelIndex::integer())) | (localVariable::(opcode::integer() index::integer())) | (iLoad::(index::integer())) | (lLoad::(index::integer())) | (fLoad::(index::integer())) | (dLoad::(index::integer())) | (aLoad::(index::integer())) | (iStore::(index::integer())) | (lStore::(index::integer())) | (fStore::(index::integer())) | (dStore::(index::integer())) | (aStore::(index::integer())) | (ret::(index::integer())) | (ldcString::(string::string())) | (ldcInt::(int::integer())) | (ldcLong::(long::integer())) | (ldcFloat::(float::integer())) | (ldcDouble::(double::integer())) | (lookupSwitch::(defaultLabel::integer() keys::(integer()*) cases::(integer()*))) | (invokeVirtual::(owner::string() name::string() description::string())) | (invokeSpecial::(owner::string() name::string() description::string())) | (invokeStatic::(owner::string() name::string() description::string())) | (invokeInterface::(owner::string() name::string() description::string())) | (invokeDynamic::(owner::string() name::string() description::string())) | (multiANewArray::(description::string() dimensions::integer())) | (tableSwitch::(min::integer() max::integer() defaultLabel::integer() cases::(integer()*))) | (new::(internalName::string())) | (aNewArray::(internalName::string())) | (checkCast::(internalName::string())) | (instanceOf::(internalName::string())) ;
TryCatchBlock ::= (tryCatchBlock::(startLabelIndex::integer() endLabelIndex::integer() handlerLabelIndex::integer() type::string())) | (finallyBlock::(startLabelIndex::integer() endLabelIndex::integer() handlerLabelIndex::integer())) ;
MethodDescription ::= methodDescriptor::(arguments::(TypeDescriptor*) returnType::TypeDescriptor) ;
Field ::= (field::(modifiers::(FieldModifier*) name::string() description::string() signature::string() value::α)) | (field::(modifiers::(FieldModifier*) name::string() description::string() signature::string())) ;
Class ::= (class::(version::integer() modifiers::(ClassModifier*) name::string() signature::string() superName::string() interfaces::(string()*) sourceFile::string() sourceDebug::string() outerClass::string() outerMethod::string() outerMethodDescription::string() innerClasses::(InnerClass*) fields::(Field*) methods::(Method*))) | (class::(version::integer() modifiers::(ClassModifier*) name::string() signature::string() superName::string() interfaces::(string()*) innerClasses::(InnerClass*) fields::(Field*) methods::(Method*))) ;
LocalVariable ::= localVariable::(name::string() description::string() signature::string() startLabelIndex::integer() endLabelIndex::integer() index::integer()) ;
ClassTypeSignature ::= (topLevel::(internalName::string() args::(TypeArg*))) | (inner::(class::ClassTypeSignature name::string() args::(TypeArg*))) ;
InnerClass ::= (innerClass::(name::string() outerName::string() innerName::string() modifiers::(ClassModifier*))) | (innerClass::(name::string() modifiers::(ClassModifier*))) ;
Method ::= method::(modifiers::(MethodModifier*) name::string() description::string() signature::string() exceptions::(string()*) instructions::(Instruction*) tryCatchBlocks::(TryCatchBlock*) localVariables::(LocalVariable*)) ;
--------------------modula::sdf.bgf--------------------
Selector ::= "^" | ("." Id) | ("[" Expr ("," Expr)* "]") | ("(" (Actual ("," Actual)*)? ")") ;
EnumType ::= "{" IdList? "}" ;
IdList ::= Id ("," Id)* ;
ExceptionDecl ::= Id ("(" Type ")")? ;
WhileStmt ::= "WHILE" Expr "DO" Stmts "END" ;
ImportItem ::= Id | (Id "AS" Id) ;
AssignStmt ::= Expr ":=" Expr ;
SubrangeType ::= "[" Expr ".." Expr "]" ;
TypeLiteral ::= ArrayType | PackedType | EnumType | ObjectType | ProcedureType | RecordType | RefType | SetType | SubrangeType | ("(" Type ")") | TypeName ;
PackedType ::= "BITS" Expr "FOR" Type ;
Block ::= Decl* "BEGIN" Stmts "END" ;
Override ::= Id ":=" Expr ;
QualId ::= Id ("." Id)? ;
Brand ::= "BRANDED" TextLiteral? ;
CallStmt ::= Expr "(" (Actual ("," Actual)*)? ")" ;
VariableDecl ::= (IdList ":" Type ":=" Expr) | (IdList ":" Type) | (IdList ":=" Expr) ;
Binding ::= Id "=" Expr ;
GenFmls ::= "(" IdList? ")" ;
Field ::= (IdList ":" Type ":=" Expr) | (IdList ":" Type) | (IdList ":=" Expr) ;
Constructor ::= Type "{" AnyCons? "}" ;
Fields ::= (Field (";" Field)* ";"?)? ;
TryFinStmt ::= "TRY" Stmts "FINALLY" Stmts "END" ;
Label ::= Expr (".." Expr)? ;
Case ::= Label ("," Label)* "=>" Stmts ;
WithStmt ::= "WITH" Binding ("," Binding)* "DO" Stmts "END" ;
RefType ::= "UNTRACED"? Brand? "REF" Type ;
RecordType ::= "RECORD" Fields "END" ;
Decl ::= ("CONST" (ConstDecl ";")*) | ("TYPE" (TypeDecl ";")*) | ("EXCEPTION" (ExceptionDecl ";")*) | ("VAR" (VariableDecl ";")*) | (ProcedureHead ("=" Block Id)? ";") | ("REVEAL" (QualId "=" | "<:" Type ";")*) ;
GenActls ::= "(" IdList? ")" ;
TryXptStmt ::= "TRY" Stmts "EXCEPT" "|"? Handler ("|" Handler)* ("ELSE" Stmts)? "END" ;
Formals ::= (Formal (";" Formal)* ";"?)? ;
ObjectType ::= Ancestor? Brand? "OBJECT" Fields ("METHODS" Methods)? ("OVERRIDES" Overrides)? "END" ;
CaseStmt ::= "CASE" Expr "OF" "|"? Case ("|" Case)* ("ELSE" Stmts)? "END" ;
ReturnStmt ::= "RETURN" Expr? ;
RaiseStmt ::= "RAISE" QualId ("(" Expr ")")? ;
LockStmt ::= "LOCK" Expr "DO" Stmts "END" ;
ProcedureHead ::= "PROCEDURE" Id Signature ;
GenMod ::= "GENERIC" "MODULE" Id GenFmls ";" Import* Block Id "." ;
Actual ::= TypeLiteral | ((Id ":=")? Expr) ;
LoopStmt ::= "LOOP" Stmts "END" ;
Handler ::= QualId ("," QualId)* ("(" Id ")")? "=>" Stmts ;
Raises ::= ("{" (QualId ("," QualId)*)? "}") | "ANY" ;
IfStmt ::= "IF" Expr "THEN" Stmts ("ELSIF" Expr "THEN" Stmts)* ("ELSE" Stmts)? "END" ;
TCase ::= Type ("," Type)* ("(" Id ")")? "=>" Stmts ;
EvalStmt ::= "EVAL" Expr ;
TypeDecl ::= Id "=" | "<:" Type ;
RepeatStmt ::= "REPEAT" Stmts "UNTIL" Expr ;
Compilation ::= "UNSAFE"? Interface | Module | GenInf | GenMod ;
AnyCons ::= Elt ("," Elt)* ("," "..")? ;
SetType ::= "SET" "OF" Type ;
Interface ::= ("INTERFACE" Id ";" Import* Decl* "END" Id ".") | ("INTERFACE" Id "=" Id GenActls "END" Id ".") ;
Signature ::= "(" Formals ")" (":" Type)? ("RAISES" Raises)? ;
AsImport ::= "IMPORT" ImportItem ("," ImportItem)* ";" ;
Expr ::= (Expr "OR" Expr) | (Expr "AND" Expr) | ("NOT" Expr) | (Expr Relop Expr) | (Expr Addop Expr) | (Expr Mulop Expr) | ("+" Expr) | ("-" Expr) | (Expr Selector) | Id | Literal | Constructor | ("(" Expr ")") ;
ArrayType ::= "ARRAY" (Type ("," Type)*)? "OF" Type ;
Methods ::= (Method (";" Method)* ";"?)? ;
GenInf ::= "GENERIC" "INTERFACE" Id GenFmls ";" Import* Decl* "END" Id "." ;
ForStmt ::= "FOR" Id ":=" Expr "TO" Expr ("BY" Expr)? "DO" Stmts "END" ;
Formal ::= (Mode? IdList ":" Type ":=" Expr) | (Mode? IdList ":" Type) | (Mode? IdList ":=" Expr) ;
FromImport ::= "FROM" Id "IMPORT" IdList ";" ;
ProcedureType ::= "PROCEDURE" Signature ;
Elt ::= (Expr ".." Expr) | Expr | (Id ":=" Expr) ;
ConstDecl ::= Id (":" Type)? "=" Expr ;
Module ::= ("MODULE" Id ("EXPORTS" IdList)? ";" Import* Block Id ".") | ("MODULE" Id ("EXPORTS" IdList)? "=" Id GenActls "END" Id ".") ;
TCaseStmt ::= "TYPECASE" Expr "OF" "|"? TCase ("|" TCase)* ("ELSE" Stmts)? "END" ;
Stmts ::= (Stmt (";" Stmt)* ";"?)? ;
Overrides ::= (Override (";" Override)* ";"?)? ;
TypeName ::= "ROOT" | ("UNTRACED" "ROOT") ;
Method ::= Id Signature (":=" Expr)? ;
--------------------modula::src-052.bgf--------------------
Selector ::= "^" | ("." Ident) | ("[" Expr ("," Expr)* "]") | ("(" (Actual ("," Actual)*)? ")") ;
RecordElt ::= (Ident ":=")? Expr ;
EnumType ::= "{" IDList? "}" ;
ExceptionDecl ::= Ident ("(" Type ")")? ;
WhileStmt ::= "WHILE" Expt "DO" Stmts "END" ;
SubrangeType ::= "[" ConstExpr ".." ConstExpr "]" ;
AssignStmt ::= Expr ":=" Expr ;
PackedType ::= "BITS" ConstExpr "FOR" Type ;
Block ::= Declaration* "BEGIN" Stmts "END" ;
Number ::= (Digit+) | (Digit+ "_" HexDigit+) | (Digit+ "." Digit+ Exponent?) ;
Brand ::= "BRANDED" TextLiteral? ;
CallStmt ::= Expr "(" (Actual ("," Actual)*)? ")" ;
VariableDecl ::= IDList ":" Type "&" ":=" Expr ;
Binding ::= Ident "=" Expr ;
Constructor ::= Type "{" (SetCons | RecordCons | ArrayCons)? "}" ;
Field ::= IDList ":" Type "&" ":=" ConstExpr ;
Type ::= TypeName | ArrayType | PackedType | EnumType | ObjectType | ProcedureType | RecordType | RefType | SetType | SubrangeType | ("(" Type ")") ;
Declaration ::= ("CONST" (ConstDecl ";")*) | ("TYPE" (TypeDecl ";")*) | ("EXCEPTION" (ExceptionDecl ";")*) | ("VAR" (VariableDecl ";")*) | (ProcedureHead ("=" Block Ident)? ";") | ("REVEAL" (TypeID "=" | "<:" Type ";")*) ;
CharLiteral ::= "’" PrintingChar | Escape "’" ;
IDList ::= Ident ("," Ident)* ;
Fields ::= (Field (";" Field)* ";"?)? ;
TryFinStmt ::= "TRY" Stmts "FINALLY" Stmts "END" ;
Ident ::= Letter (Letter | Digit | "_")* ;
Case ::= Labels ("," Labels)* "=>" Stmts ;
Exponent ::= "E" | "e" | "D" | "d" ("+" | "-")? Digit+ ;
WithStmt ::= "WITH" Binding ("," Binding)* "DO" Stmts "END" ;
RefType ::= "UNTRACED"? Brand? "REF" Type ;
RecordType ::= "RECORD" Fields "END" ;
TryXptStmt ::= "TRY" Stmts "EXCEPT" Handler? ("|" Handler)* ("ELSE" Stmts)? "END" ;
Import ::= ("FROM" Ident)? "IMPORT" IDList ";" ;
Operator ::= "+" | "-" | "*" | "/" | "." | "^" | (":" "=") | "=" | "$" | "<" | ("<" "=") | (">" "=") | ">" | "&" | ("<" ":") | ("=" ">") | "," | ";" | "|" | ":" | ("." ".") | "(" | ")" | "{" | "}" | "[" | "]" ;
Formals ::= (Formal (";" Formal)* ";"?)? ;
RecordCons ::= RecordElt ("," RecordElt)* ;
ObjectType ::= Ancestor? Brand? "OBJECT" Fields ("METHODS" Methods)? "END" ;
CaseStmt ::= "CASE" Expr "OF" Case? ("|" Case)* ("ELSE" Stmts)? "END" ;
ReturnStmt ::= "RETURN" Expr? ;
RaiseStmt ::= "RAISE" ExceptionID ("(" Expr ")")? ;
LockStmt ::= "LOCK" Expr "DO" Stmts "END" ;
ProcedureHead ::= "PROCEDURE" Ident Signature ;
Actual ::= ((Ident ":=")? Expr) | Type ;
LoopStmt ::= "LOOP" Stmts "END" ;
Handler ::= ExceptionID ("," ExceptionID)* ("(" Ident ")")? "=>" Stmts ;
Raises ::= "{" (ExceptionID ("," ExceptionID)*)? "}" ;
IfStmt ::= "IF" Expr "THEN" Stmts ("ELSIF" Expt "THEN" Stmts)* ("ELSE" Stmts)? "END" ;
EvalStmt ::= "EVAL" Expr ;
TypeDecl ::= Ident "=" | "<:" Type ;
Compilation ::= "UNSAFE"? Interface | Module ;
TextLiteral ::= """ (PrintingChar | Escape)* """ ;
Escape ::= ("\" "n") | ("\" "t") | ("\" "r") | ("\" "f") | ("\" "\") | ("\" "’") | ("\" """) | ("\" OctalDigit OctalDigit OctalDigit) ;
Labels ::= ConstExpr (".." ConstExpr)? ;
SetType ::= "SET" "OF" Type ;
Interface ::= "INTERFACE" Ident ";" Import* Declaration* "END" Ident "." ;
Signature ::= "(" Formals ")" (":" Type)? ("RAISES" Raises)? ;
Expr ::= E1 ("OR" E1)* ;
SetCons ::= SetElt ("." SetElt)* ;
E8 ::= Ident | Number | CharLiteral | TextLiteral | Constructor | ("(" Expr ")") ;
ArrayType ::= "ARRAY" (Type ("," Type)*)? "OF" Type ;
E7 ::= E8 Selector* ;
Methods ::= (Method (";" Method)* ";"?)? ;
E6 ::= ("+" | "-")* E7 ;
ForStmt ::= "FOR" Ident ":=" Expt "TO" Expr ("BY" Expr)? "DO" Stmts "END" ;
E5 ::= E6 (Mulop E6)* ;
E4 ::= E5 (Addop E5)* ;
Formal ::= ("VALUE" | "VAR" | "READONLY")? IDList ":" Type "&" ":=" ConstExpr ;
ProcedureID ::= Ident ("." Ident)? ;
E3 ::= E4 (Relop E4)* ;
E2 ::= "NOT"* E3 ;
ProcedureType ::= "PROCEDURE" Signature ;
ConstDecl ::= Ident (":" Type)? "=" ConstExpr ;
E1 ::= E2 ("AND" E2)* ;
TCaseStmt ::= "TYPECASE" Expr "OF" Tcase? ("|" Tcase)* ("ELSE" Stmts)? "END" ;
Module ::= "MODULE" Ident ("EXPORTS" IDList)? ";" Import* Block Ident "." ;
SetElt ::= Expr (".." Expr)? ;
Stmts ::= (Stmt (";" Stmt)* ";"?)? ;
ExceptionID ::= Ident ("." Ident)? ;
ArrayCons ::= Expr ("," Expr)* ("," "..")? ;
TypeName ::= (Ident ("." Ident)?) | "ROOT" | ("UNTRACED" "ROOT") ;
Tcase ::= Type ("," Type)* ("(" Ident ")")? "=>" Stmts ;
Repeatstmt ::= "REPEAT" Stmts "UNTIL" Expr ;
Method ::= Ident Signature "&" ":=" ProcedureID ;
--------------------modula::dagenais-cordy.bgf--------------------
Selector ::= ("." id) | ("[" Expr ComaExpr* "]") | ("(" {Actual ","}* ")") | "^" ;
RecordElt ::= Expr EqualExpr? ;
WhileStmt ::= "WHILE" Expr "DO" Stmts "END" ;
ExceptionDecl ::= id ParenthesizedType? ";" NL ;
DotDotConstExpr ::= ".." ConstExpr ;
ImportItem ::= id AsId? ;
SubrangeType ::= "[" ConstExpr ".." ConstExpr "]" ;
AssignStmt ::= Expr ":=" Expr ;
MulOpE6 ::= MulOp E6 ;
ParenthesizedType ::= "(" Type ")" ;
DotDotExpr ::= ".." Expr ;
PackedType ::= "BITS" ConstExpr "FOR" Type ;
TypecaseStmt ::= "TYPECASE" Expr "OF" NL TCase? VerticalTCase* ElseStmts? "END" ;
IInterface ::= "UNSAFE"? "INTERFACE" id "=" id GenActls "END" id "." NL ;
Block ::= Decl* "BEGIN" Stmts "END" ;
Override ::= id ":=" ConstExpr ;
QualId ::= id DotId? ;
Brand ::= "BRANDED" ConstExpr? ;
ExceptOrFinally ::= ("EXCEPT" NL Handler? VerticalHandler* ElseStmts?) | ("FINALLY" Stmts) ;
VerticalCase ::= "|" Case ;
CallStmt ::= Expr "(" {Actual ","}* ")" ;
VariableDecl ::= IdList ColonType? EqualExpr? ";" NL ;
Binding ::= id "=" Expr ;
RaisesList ::= ("{" {QualId ","}* "}") | "ANY" ;
SemicolonFormal ::= ";" Formal ;
GenFmls ::= "(" IdList? ")" ;
SemiColonOverride ::= ";" NL Override ;
Constructor ::= Type "{" AnyCons "}" ;
Field ::= IdList ColonType? EqualConstExpr? ;
Type ::= TypeName | ArrayType | EnumerationType | RecordType | ObjectType | ProcedureType | RefType | SetType | SubrangeType | PackedType | ("(" Type ")") ;
EqualBlock ::= "=" IN NL Block id EX ;
SemiColonStmt ::= ";" NL Stmt ;
OptStmts ::= Stmt SemiColonStmt* ";"? NL ;
ParenthesizedId ::= "(" id ")" ;
TheOverrides ::= "OVERRIDES" NL Overrides ;
VerticalHandler ::= "|" Handler ;
AddOpE5 ::= AddOp E5 ;
ElseStmts ::= "ELSE" Stmts ;
Case ::= {Labels ","}* "=>" Stmts ;
OrE1 ::= "OR" E1 ;
WithStmt ::= "WITH" Binding+ "DO" Stmts "END" ;
VerticalTCase ::= "|" TCase ;
RefType ::= "UNTRACED"? Brand? "REF" Type ;
RecordType ::= "RECORD" IN NL Fields "END" EX ;
Decl ::= (ProcedureHead EqualBlock? ";" NL NL) | ("VAR" IN NL VariableDecl* EX) | ("TYPE" IN NL TypeDecl* EX NL) | ("CONST" IN NL ConstDecl* EX NL) | ("EXCEPTION" IN NL ExceptionDecl* EX NL) | ("REVEAL" IN NL RevealDecl* EX NL) ;
RelOpE4 ::= RelOp E4 ;
GenActls ::= "(" IdList? ")" ;
Import ::= AsImport | (FromImport NL NL) ;
Formals ::= Formal SemicolonFormal* ";"? ;
EqualConstExpr ::= ":=" ConstExpr ;
MethodList ::= IN Method SemiColonMethod* ";"? EX NL ;
ObjectType ::= ObjectOrTypeName? Brand? "OBJECT" IN NL Fields TheMethods? TheOverrides? "END" EX ;
CaseStmt ::= "CASE" Expr "OF" NL Case? VerticalCase* ElseStmts? "END" ;
ReturnStmt ::= "RETURN" Expr? ;
RevealDecl ::= (QualId "=" Type ";" NL) | (QualId "<:" Type ";" NL) ;
ComaExpr ::= "," Expr ;
RaiseStmt ::= "RAISE" QualId ParenthesizedExpr? ;
LockStmt ::= "LOCK" Expr "DO" Stmts "END" ;
ProcedureHead ::= "PROCEDURE" id Signature ;
SemiColonMethod ::= ";" NL Method ;
GInterface ::= "GENERIC" "INTERFACE" id GenFmls ";" Import* Decl* NL "END" id "." NL ;
ParenthesizedExpr ::= "(" Expr ")" ;
Actual ::= Type | Expr | (id ":=" Expr) ;
LoopStmt ::= "LOOP" Stmts "END" ;
OverrideList ::= IN Override SemiColonOverride* ";"? EX NL ;
Handler ::= {QualId ","}* ParenthesizedId? "=>" Stmts ;
Elsif ::= "ELSIF" Expr "THEN" Stmts ;
EqualExpr ::= ":=" Expr ;
Raises ::= "RAISES" RaisesList ;
IfStmt ::= "IF" Expr "THEN" Stmts Elsif* ElseStmts? "END" ;
DotId ::= "." id ;
TCase ::= {Type ","}* ParenthesizedId? "=>" Stmts ;
EvalStmt ::= "EVAL" Expr ;
TypeDecl ::= (id "=" Type ";" NL) | (id "<:" Type ";" NL) ;
RepeatStmt ::= "REPEAT" Stmts "UNTIL" Expr ;
TheMethods ::= "METHODS" NL Methods ;
Labels ::= ConstExpr DotDotConstExpr? ;
Exports ::= "EXPORTS" IdList ;
SetType ::= "SET" "OF" Type ;
ColonType ::= ":" Type ;
Interface ::= "UNSAFE"? "INTERFACE" id ";" NL NL Import* Decl* NL "END" id "." NL ;
FieldList ::= IN Field SemiColonField* ";"? EX NL ;
Signature ::= "(" Formals? ")" ColonType? Raises? ;
ComaImportItem ::= "," ImportItem ;
AsImport ::= "IMPORT" ImportItem ComaImportItem* ";" NL NL ;
Expr ::= E1 OrE1* ;
IModule ::= "UNSAFE"? "MODULE" id Exports? "=" id GenActls "END" id "." NL ;
E8 ::= id | Number | charlit | stringlit | ("(" Expr ")") | Constructor ;
ArrayType ::= "ARRAY" {Type ","}* "OF" Type ;
GModule ::= "GENERIC" "MODULE" id GenFmls ";" NL NL Import* Block id "." NL ;
E7 ::= E8 Selector* ;
E6 ::= SignOp* E7 ;
ForStmt ::= "FOR" id ":=" Expr "TO" Expr ByExpr? "DO" Stmts "END" ;
E5 ::= E6 MulOpE6* ;
E4 ::= E5 AddOpE5* ;
Formal ::= Mode? IdList ColonType? EqualConstExpr? ;
FromImport ::= "FROM" id "IMPORT" IdList ";" NL NL ;
E3 ::= E4 RelOpE4* ;
E2 ::= "NOT"* E3 ;
ProcedureType ::= "PROCEDURE" Signature ;
AsId ::= "AS" id ;
ConstDecl ::= id ColonType? "=" ConstExpr ";" NL ;
E1 ::= E2 AndE2* ;
ByExpr ::= "BY" Expr ;
Module ::= "UNSAFE"? "MODULE" id Exports? ";" NL NL Import* Block id "." NL ;
SetElt ::= Expr DotDotExpr? ;
Stmts ::= IN NL OptStmts? EX ;
ArrayCons ::= {Expr ","}* ComaDotDot? ;
SemiColonField ::= ";" NL Field ;
TypeName ::= QualId | "ROOT" | ("UNTRACED" "ROOT") ;
AndE2 ::= "AND" E2 ;
TryStmt ::= "TRY" Stmts ExceptOrFinally "END" ;
Method ::= id Signature EqualConstExpr? ;
EnumerationType ::= "{" IdList? "}" ;
ComaDotDot ::= "," ".." ;
--------------------xpath::w3c-xpath1.bgf--------------------
AbbreviatedRelativeLocationPath ::= [NT-AbbreviatedRelativeLocationPath] RelativeLocationPath "//" Step ;
NameTest ::= [NT-NameTest] "*" | (NCName ":" "*") | QName ;
AxisSpecifier ::= [NT-AxisSpecifier] (AxisName "::") | AbbreviatedAxisSpecifier ;
RelationalExpr ::= [NT-RelationalExpr] AdditiveExpr | (RelationalExpr "<" AdditiveExpr) | (RelationalExpr ">" AdditiveExpr) | (RelationalExpr "<=" AdditiveExpr) | (RelationalExpr ">=" AdditiveExpr) ;
PathExpr ::= [NT-PathExpr] LocationPath | FilterExpr | (FilterExpr "/" RelativeLocationPath) | (FilterExpr "//" RelativeLocationPath) ;
OrExpr ::= [NT-OrExpr] AndExpr | (OrExpr "or" AndExpr) ;
PrimaryExpr ::= [NT-PrimaryExpr] VariableReference | ("(" Expr ")") | Literal | Number | FunctionCall ;
Predicate ::= [NT-Predicate] "[" PredicateExpr "]" ;
FunctionCall ::= [NT-FunctionCall] FunctionName "(" (Argument ("," Argument)*)? ")" ;
NodeTest ::= [NT-NodeTest] NameTest | (NodeType "(" ")") | ("processing-instruction" "(" Literal ")") ;
AbsoluteLocationPath ::= [NT-AbsoluteLocationPath] ("/" RelativeLocationPath?) | AbbreviatedAbsoluteLocationPath ;
VariableReference ::= [NT-VariableReference] "$" QName ;
EqualityExpr ::= [NT-EqualityExpr] RelationalExpr | (EqualityExpr "=" RelationalExpr) | (EqualityExpr "!=" RelationalExpr) ;
FilterExpr ::= [NT-FilterExpr] PrimaryExpr | (FilterExpr Predicate) ;
AndExpr ::= [NT-AndExpr] EqualityExpr | (AndExpr "and" EqualityExpr) ;
Step ::= [NT-Step] (AxisSpecifier NodeTest Predicate*) | AbbreviatedStep ;
MultiplicativeExpr ::= [NT-MultiplicativeExpr] UnaryExpr | (MultiplicativeExpr MultiplyOperator UnaryExpr) | (MultiplicativeExpr "div" UnaryExpr) | (MultiplicativeExpr "mod" UnaryExpr) ;
AbbreviatedAbsoluteLocationPath ::= [NT-AbbreviatedAbsoluteLocationPath] "//" RelativeLocationPath ;
Number ::= [NT-Number] (Digits ("." Digits?)?) | ("." Digits) ;
RelativeLocationPath ::= [NT-RelativeLocationPath] Step | (RelativeLocationPath "/" Step) | AbbreviatedRelativeLocationPath ;
UnaryExpr ::= [NT-UnaryExpr] UnionExpr | ("-" UnaryExpr) ;
UnionExpr ::= [NT-UnionExpr] PathExpr | (UnionExpr "|" PathExpr) ;
AdditiveExpr ::= [NT-AdditiveExpr] MultiplicativeExpr | (AdditiveExpr "+" MultiplicativeExpr) | (AdditiveExpr "-" MultiplicativeExpr) ;
--------------------assembly::delphi.bgf--------------------
asm_opcode_prefix ::= "lock" space? ;
asm_primary ::= ("[" asm_expr "]") | ("(" asm_expr ")") | asm_register | id | anynumber | charlit | stringlit | asmhex | (SP asmlabel) ;
segmt_overr ::= SPOFF ":" asm_expr SPON ;
asm_expr ::= asm_term asm_infix_expr* ;
asmlabel ::= (SPOFF asmid+ SPON) | label_id ;
asmlabel_colon ::= asmlabel colon ;
asm_unlabeledstm_semi ::= asm_unlabeledstm ";"? NL ;
asm_unlabeledstm ::= (asm_directive {asm_directive_arg ","}*) | (asm_opcode_prefix? asm_opcode {asm_expr ","}*) ;
asmid ::= ("@"* asmlbl) | ("@+"* id) | ("@+"* anynumber) | ("@+"* key) ;
asm_postfixop ::= ("[" asm_expr "]") | ("." asm_expr) ;
asm_term ::= asm_prefixop* asm_primary asm_postfixop* ;
asm_infix_expr ::= asm_infixop asm_term ;
asm_stm ::= asmlabel_colon? asm_unlabeledstm_semi? ;
asm_register ::= ("ST" "(" integernumber ")") | ("ST") | "FS" | ("GS") | "EAX" | "EBX" | "ECX" | ("EDX") | "ESP" | "EBP" | "ESI" | ("EDI") | "AX" | "BX" | "CX" | ("DX") | "SP" | "BP" | "SI" | ("DI") | "AL" | "BL" | "CL" | ("DL") | "CS" | "DS" | "SS" | ("ES") | "AH" | "BH" | "CH" | ("DH") | ("CS" segmt_overr?) | ("DS" segmt_overr?) | ("SS" segmt_overr?) | ("FS" segmt_overr?) | ("GS" segmt_overr?) | ("ES" segmt_overr?) ;
asm_directive_arg ::= charlit | (sign? anynumber) | asm_expr ;
asm_stmtblock ::= "asm" asm_stm* end_struct ;
asmhex ::= number SPOFF id SPON ;
--------------------basic::vb6-cordy.bgf--------------------
subprogram_declaration ::= access_modifier? "static"? sub_or_function id lib_description? subprogram_argument_description? as_type? eol IN sub_scope EX "end" sub_or_function ;
short_for_next_statement ::= "for" id "=" expn to_or_downto expn step_clause? colon_declaration_or_statement* ":" "next" id? ;
event_argument_list ::= "(" event_argument+ ")" ;
error_statement ::= "error" expn ;
chdir_statement ::= "chdir" filepath ;
property_argument_list ::= "(" {property_argument ","}* ")" ;
deletesetting_statement ::= "deletesetting" expn+ ;
chdrive_statement ::= "chdrive" drive ;
type_declaration ::= access_modifier? "type" id eol IN type_member_definition* EX "end" "type" ;
short_else_clause ::= "else" single_declaration_or_statement ;
expn ::= primary operator_primary* ;
line_input_statement ::= "line" "input" filenumber "," reference ;
single_var_description ::= id initial_value? as_type? ;
optional_subscript ::= (expn to_expn?) | (SP ε) ;
close_statement ::= "close" {filenumber ","}* ;
property_argument ::= "optional"? byref_or_byval? "paramarray"? id parens? as_type? equals_expn? ;
lset_statement ::= "lset" reference "=" expn ;
label_statement ::= EX id ":" IN ;
rmdir_statement ::= "rmdir" filepath ;
while_statement ::= "while" expn eol IN sub_scope EX "wend" ;
component_selector ::= ("." id) | ("." key) | subscript ;
constant_description ::= id as_type? initial_value ;
subroutine_bracketless_params ::= expn {optional_expn ","}* ;
resume_statement ::= ("resume" "next") | ("resume" number?) ;
letterrange ::= id SPOFF "-" id SPON ;
attribute_definition ::= reference "=" expn+ ;
set_statement ::= "set" reference "=" set_object_expn ;
single_declaration_or_statement ::= (declaration colon_declaration_or_statement*) | (statement colon_declaration_or_statement*) ;
call_statement ::= "call"? reference subroutine_bracketless_params? ;
kill_statement ::= "kill" filepath ;
star_size ::= "*" expn ;
get_statement ::= "get" filenumber comma_recordnumber? "," reference ;
filenumber ::= "#" primary ;
select_case_statement ::= "select" "case" expn eol IN case_alternative* last_case_alternative? EX "end" "select" ;
event_argument ::= byref_or_byval? id parens? as_type? ;
preprocessor_if_statement ::= "#if" expn "then" eol IN sub_scope EX preprocessor_elsif_clause* preprocessor_else_clause? "#end" "if" ;
do_statement ::= "do" while_or_until_clause? eol IN sub_scope EX "loop" while_or_until_clause? ;
name_statement ::= "name" filepath "as" filepath ;
open_statement ::= "open" filepath "for" mode access_spec? lock? "as" filenumber length_spec? ;
declaration_or_statement ::= (declaration eol) | (statement eol) | eol ;
access_spec ::= "access" access_mode ;
initial_value ::= "=" expn ;
short_if_statement ::= "if" expn "then" single_declaration_or_statement short_else_clause? ;
on_error_action ::= ("resume" "next") | ("goto" expn) ;
parens ::= "(" ")" ;
last_case_alternative ::= eol* "case" "else" eol IN sub_scope EX ;
defletter_declaration ::= def_keyword letterrange+ ;
elsif_clause ::= "elseif" expn "then" eol IN sub_scope EX ;
subscript_expn ::= expn to_expn? ;
filecopy_statement ::= "filecopy" filepath "," filepath ;
filepath ::= (drive? id slash_id*) | stringlit ;
case_expn ::= expn to_expn? ;
rset_statement ::= "rset" reference "=" expn ;
access_mode ::= "read" | "write" | ("read" "write") ;
on_error_statement ::= "on" "local"? "error" on_error_action ;
colon_declaration_or_statement ::= ":" declaration_or_statement? ;
full_for_each_statement ::= "for" "each" id "in" expn eol IN sub_scope EX "next" id? ;
preprocessor_elsif_clause ::= "#elseif" expn "then" eol IN sub_scope EX ;
subprogram_argument_description ::= "(" {subprogram_argument ","}* ")" ;
set_object_expn ::= ("new"? expn) | "nothing" ;
goto_statement ::= on_expn? "goto" expn ;
savepicture_statement ::= "savepicture" expn "," expn ;
exit_statement ::= "exit" exit_what_indicator ;
to_number ::= "to" number ;
alias_description ::= "alias" stringlit ;
attribute_statement ::= "attribute" attribute_definition+ ;
short_for_each_statement ::= "for" "each" id "in" expn eol colon_declaration_or_statement* ":" "next" id? ;
drive ::= id ":" ;
property_statement ::= access_modifier? "static"? "property" get_let_set id property_argument_list? as_type? eol IN sub_scope EX "end" "property" ;
program ::= class_file_header? declaration_or_statement* ;
setattr_statement ::= "setattr" filepath "," expn ;
full_if_statement ::= "if" expn "then" eol IN sub_scope EX elsif_clause* else_clause? "end" "if" ;
time_statement ::= "time" "=" expn ;
assignment_statement ::= "let"? reference "=" expn ;
spc_tab ::= ("spc" "(" expn? ")") | ("tab" "(" expn? ")") ;
length_spec ::= "len" "=" expn ;
declare_subprogram_declaration ::= access_modifier? "declare" sub_or_function id lib_description alias_description? subprogram_argument_description? as_type? ;
equals_expn ::= "=" expn ;
optional_expn ::= expn | (ε SP) ;
until_clause ::= "until" expn ;
implements_declaration ::= "implements" id ;
class_file_header ::= "version" number "class" eol+ class_begin_block ;
seek_statement ::= "seek" filenumber "," expn ;
operator_primary ::= op primary ;
print_item ::= (spc_tab? expn charpos?) | spc_tab ;
savesetting_statement ::= "savesetting" {expn ","}* ;
randomize_statement ::= "randomize" number? ;
mkdir_statement ::= "mkdir" filepath ;
constant_declaration ::= access_modifier? "const" constant_description ;
print_statement ::= "print" filenumber "," {print_item ","}* ;
lock_statement ::= "lock" filenumber comma_recordrange? ;
enum_member_definition ::= (id "=" expn eol) | eol ;
subprogram_argument ::= "optional"? byref_or_byval? id? parens? as_type? equals_expn? ;
load_statement ::= "load" expn ;
type_member_definition ::= (id parens? as_type? eol) | eol ;
on_expn ::= "on" expn ;
reference ::= ("."? "!"? id component_selector*) | ("." key component_selector*) ;
gosub_statement ::= on_expn? "gosub" expn ;
preprocessor_else_clause ::= "#else" eol IN sub_scope EX ;
step_clause ::= "step" expn ;
lib_description ::= "lib" stringlit ;
put_statement ::= "put" filenumber comma_expn? "," reference ;
while_clause ::= "while" expn ;
enum_declaration ::= access_modifier? "enum" id eol IN enum_member_definition* EX "end" "enum" ;
input_statement ::= "input" filenumber "," {reference ","}* ;
mid_statement ::= "mid" reference "=" stringlit ;
variable_declaration ::= variable_declaration_keyword variable_description+ ;
width_statement ::= "width" filenumber "," expn ;
with_statement ::= "with" reference eol IN sub_scope EX "end" "with" ;
to_expn ::= "to" expn ;
else_clause ::= "else" eol IN sub_scope EX ;
unlock_statement ::= "unlock" filenumber comma_recordrange? ;
class_declaration ::= "class" id eol IN sub_scope EX "end" "class" ;
class_begin_block ::= "begin" reference? IN class_begin_item* EX "end" ;
unload_statement ::= "unload" expn ;
lock ::= "shared" | ("lock" "read") | ("lock" "write") | ("lock" "read" "write") ;
as_type ::= "as" "new"? reference star_size? ;
option_statement ::= ("option" "base" number) | ("option" "compare" compare_mode) | ("option" "explicit") | ("option" "private" "module") ;
comma_recordrange ::= "," number to_number? ;
date_statement ::= "date" "=" expn ;
case_alternative ::= eol* "case" is_operator? case_expn+ eol IN sub_scope EX ;
slash_id ::= ("\" id) | ("/" id) ;
comma_expn ::= "," expn ;
is_operator ::= "is" op? ;
erase_statement ::= "erase" {id ","}* ;
array_description ::= "withevents"? "preserve"? id "(" {subscript_expn ","}* ")" as_type? ;
write_statement ::= "write" filenumber "," {print_item ","}* ;
subscript ::= "(" {optional_subscript ","}* ")" ;
event_statement ::= "public"? "event" id event_argument_list? ;
full_for_next_statement ::= "for" id "=" expn to_or_downto expn step_clause? eol IN sub_scope EX "next" id? ;
tab_vbcomment ::= TAB vbcomment ;
comma_recordnumber ::= "," expn ;
eol ::= (tab_vbcomment? newline) | ":" ;
primary ::= reference | stringlit | number | hexnumber | octnumber | datelit | returncode | filenumber | (prefix_op primary) | ("(" {expn ","}* ")") ;
app_activate_statement ::= "appactivate" expn comma_expn? ;
--------------------basic::vb-glineur.bgf--------------------
obeo/psm/vb/projects/VB_1/features/VB_DeclareSub ::= hasVisibility::Boolean visibility::obeo/psm/vb/projects/VB_1/enumerations/VisibilityEnum isAuto::Boolean name::String lib::String isAlias::Boolean alias::String (parameters::obeo/psm/vb/projects/VB_1/features/VB_Parameter)+ ;
obeo/psm/vb/projects/VB_1/features/VB_Property ::= visibility::obeo/psm/vb/projects/VB_1/enumerations/VisibilityEnum isShared::Boolean isGetOnly::Boolean isSet::Boolean isLet::Boolean name::String (parameters::obeo/psm/vb/projects/VB_1/features/VB_Parameter)+ type::obeo/psm/vb/projects/VB_1/references/VB_FullTypeRef (modifiers::obeo/psm/vb/projects/VB_1/features/VB_Modifier)+ (statements::obeo/psm/vb/projects/VB_1/statements/VB_Statement)+ ;
obeo/psm/vb/projects/VB_1/features/VB_Region ::= name::String (features::obeo/psm/vb/projects/VB_1/features/VB_Feature)+ ;
obeo/psm/vb/projects/VB_1/expressions/VB_AssignmentExpression ::= variable::obeo/psm/vb/projects/VB_1/references/VB_FullDataRef expression::obeo/psm/vb/projects/VB_1/expressions/VB_Expression ;
obeo/psm/vb/projects/VB_1/graphicals/VB_GraphicalProperty ::= property::obeo/psm/vb/projects/VB_1/references/VB_FullDataRef value::obeo/psm/vb/projects/VB_1/expressions/VB_Expression ;
obeo/psm/vb/projects/VB_1/features/VB_Set ::= hasParameters::Boolean (parameters::obeo/psm/vb/projects/VB_1/features/VB_Parameter)+ (statements::obeo/psm/vb/projects/VB_1/statements/VB_Statement)+ ;
obeo/psm/vb/projects/VB_1/features/VB_DeclareFunction ::= hasVisibility::Boolean visibility::obeo/psm/vb/projects/VB_1/enumerations/VisibilityEnum isAuto::Boolean name::String lib::String isAlias::Boolean alias::String (parameters::obeo/psm/vb/projects/VB_1/features/VB_Parameter)+ return::obeo/psm/vb/projects/VB_1/references/VB_FullTypeRef ;
obeo/psm/vb/projects/VB_1/features/VB_Sub ::= hasAnnotation::Boolean annotation::obeo/psm/vb/projects/VB_1/statements/VB_Call isFriend::Boolean hasVisibility::Boolean visibility::obeo/psm/vb/projects/VB_1/enumerations/VisibilityEnum isOverloads::Boolean isOverrides::Boolean name::String (parameters::obeo/psm/vb/projects/VB_1/features/VB_Parameter)+ hasHandles::Boolean (handles::obeo/psm/vb/projects/VB_1/references/VB_FullTypeRef)+ (statements::obeo/psm/vb/projects/VB_1/statements/VB_Statement)+ ;
obeo/psm/vb/projects/VB_1/core/VB_SimpleType ::= visibility::obeo/psm/vb/projects/VB_1/enumerations/VisibilityEnum name::String (features::obeo/psm/vb/projects/VB_1/features/VB_Feature)+ ;
obeo/psm/vb/projects/VB_1/core/VB_Module ::= name::String (features::obeo/psm/vb/projects/VB_1/features/VB_Feature)+ ;
obeo/psm/vb/projects/VB_1/references/VB_DataRef ::= data::obeo/psm/vb/resources/VB_LangElement dataValue::String hasArguments::Boolean (arguments::obeo/psm/vb/projects/VB_1/statements/VB_CallArgument)+ hasRefMarker::Boolean hasSubMarker::Boolean ;
obeo/psm/vb/projects/VB_1/graphicals/VB_GraphicalElement ::= type::obeo/psm/vb/projects/VB_1/references/VB_FullTypeRef name::String (fields::obeo/psm/vb/projects/VB_1/graphicals/VB_GraphicalField)+ (children::obeo/psm/vb/projects/VB_1/graphicals/VB_GraphicalElement)+ ;
obeo/psm/vb/projects/VB_1/core/VB_FileAttribute ::= name::String (initialValue::obeo/psm/vb/projects/VB_1/expressions/VB_Expression)+ ;
obeo/psm/vb/projects/VB_1/references/VB_LabelRef ::= label::obeo/psm/vb/resources/VB_LangElement labelValue::String ;
obeo/psm/vb/projects/VB_1/expressions/VB_OperatorExpression ::= leftHand::obeo/psm/vb/projects/VB_1/expressions/VB_Expression rightHand::obeo/psm/vb/projects/VB_1/expressions/VB_Expression operatorName::String ;
obeo/psm/vb/projects/VB_1/features/VB_Attribute ::= hasVisibility::Boolean visibility::obeo/psm/vb/projects/VB_1/enumerations/VisibilityEnum hasQualifier::Boolean qualifier::obeo/psm/vb/projects/VB_1/enumerations/Qualifier_2Enum isFriend::Boolean isWithEvents::Boolean isShared::Boolean name::String isArray::Boolean (arrayExpressions::obeo/psm/vb/projects/VB_1/expressions/VB_Expression)+ hasType::Boolean type::obeo/psm/vb/projects/VB_1/expressions/VB_Expression hasInitialValue::Boolean initialValue::obeo/psm/vb/projects/VB_1/expressions/VB_Expression hasNext::Boolean ;
obeo/psm/vb/projects/VB_1/statements/VB_Call ::= expression::obeo/psm/vb/projects/VB_1/references/VB_FullDataRef (arguments::obeo/psm/vb/projects/VB_1/statements/VB_CallArgument)+ ;
obeo/psm/vb/projects/VB_1/core/VB_Content ::= hasVersion::Boolean version::String hasClass::Boolean hasBeginEnd::Boolean (beginEndGlobalVariables::obeo/psm/vb/projects/VB_1/core/VB_GlobalVariable)+ (globalVariables::obeo/psm/vb/projects/VB_1/core/VB_GlobalVariable)+ (elements::obeo/psm/vb/projects/VB_1/core/VB_ContentElement)+ ;
obeo/psm/vb/projects/VB_1/features/VB_Get ::= hasParameters::Boolean (parameters::obeo/psm/vb/projects/VB_1/features/VB_Parameter)+ (statements::obeo/psm/vb/projects/VB_1/statements/VB_Statement)+ ;
obeo/psm/vb/projects/VB_1/core/VB_Class ::= isFriend::Boolean hasVisibility::Boolean visibility::obeo/psm/vb/projects/VB_1/enumerations/VisibilityEnum name::String hasInherits::Boolean inherits::obeo/psm/vb/projects/VB_1/references/VB_FullTypeRef (features::obeo/psm/vb/projects/VB_1/features/VB_Feature)+ ;
obeo/psm/vb/projects/VB_1/core/VB_Enum ::= visibility::obeo/psm/vb/projects/VB_1/enumerations/VisibilityEnum name::String (features::obeo/psm/vb/projects/VB_1/features/VB_Feature)+ ;
obeo/psm/vb/projects/VB_1/core/VB_GlobalVariable ::= name::String (value::obeo/psm/vb/projects/VB_1/expressions/VB_Expression)+ ;
obeo/psm/vb/projects/VB_1/references/VB_FullDataRef ::= self::Boolean (members::obeo/psm/vb/projects/VB_1/references/VB_DataRef)+ hasRecSet::Boolean recSetMember::obeo/psm/vb/projects/VB_1/references/VB_DataRef ;
obeo/psm/vb/projects/VB_1/graphicals/VB_GraphicalPropertySet ::= name::String hasArguments::Boolean (arguments::obeo/psm/vb/projects/VB_1/expressions/VB_Expression)+ hasBrackets::Boolean (fields::obeo/psm/vb/projects/VB_1/graphicals/VB_GraphicalField)+ ;
obeo/psm/vb/projects/VB_1/references/VB_TypeRef ::= type::obeo/psm/vb/resources/VB_LangElement typeValue::String ;
obeo/psm/vb/projects/VB_1/preprocessing/VB_PreprocIf ::= condition::obeo/psm/vb/projects/VB_1/expressions/VB_Expression (features::obeo/psm/vb/projects/VB_1/features/VB_Feature)+ ;
obeo/psm/vb/projects/VB_1/statements/VB_CallExpressionArgument ::= expression::obeo/psm/vb/projects/VB_1/expressions/VB_Expression hasSeparator::Boolean ;
obeo/psm/vb/projects/VB_1/expressions/VB_NewExpression ::= type::obeo/psm/vb/projects/VB_1/references/VB_FullTypeRef hasArguments::Boolean (arguments::obeo/psm/vb/projects/VB_1/expressions/VB_Expression)+ hasInitialization::Boolean (initializations::obeo/psm/vb/projects/VB_1/expressions/VB_Expression)+ ;
obeo/psm/vb/projects/VB_1/features/VB_Function ::= isFriend::Boolean hasVisibility::Boolean visibility::obeo/psm/vb/projects/VB_1/enumerations/VisibilityEnum name::String (parameters::obeo/psm/vb/projects/VB_1/features/VB_Parameter)+ return::obeo/psm/vb/projects/VB_1/references/VB_FullTypeRef (statements::obeo/psm/vb/projects/VB_1/statements/VB_Statement)+ ;
obeo/psm/vb/projects/VB_1/expressions/VB_TypeOfExpression ::= variable::obeo/psm/vb/projects/VB_1/references/VB_FullDataRef type::obeo/psm/vb/projects/VB_1/references/VB_FullTypeRef ;
obeo/psm/vb/projects/VB_1/statements/VB_Case ::= (values::obeo/psm/vb/projects/VB_1/expressions/VB_Expression)+ hasSeparator::Boolean (statements::obeo/psm/vb/projects/VB_1/statements/VB_Statement)+ ;
obeo/psm/vb/projects/VB_1/features/VB_Parameter ::= isOptional::Boolean hasQualifier::Boolean qualifier::obeo/psm/vb/projects/VB_1/enumerations/QualifierEnum name::String isArray::Boolean arrayExpression::obeo/psm/vb/projects/VB_1/expressions/VB_Expression hasType::Boolean type::obeo/psm/vb/projects/VB_1/references/VB_FullTypeRef hasInitialValue::Boolean value::obeo/psm/vb/projects/VB_1/expressions/VB_Expression ;
obeo/psm/vb/projects/VB_1/core/VB_Option ::= name::String hasEnablement::Boolean enablement::obeo/psm/vb/projects/VB_1/enumerations/EnablementEnum ;
--------------------bibtex::bibtex-1.1.bgf--------------------
Proceedings ::= InProceedings ;
 Proceedings ::= year::String title::String ;
MasterThesis ::= school::String ;
Misc ::= id::String ;
TechReport ::= (authors::Author)+ ;
PhDThesis ::= school::String ;
Manual ::= title::String ;
InCollection ::= publisher::String booktitle::String ;
Booklet ::= year::String ;
--------------------bibtex::bibtex-1.2.bgf--------------------
Proceedings ::= editor::String volume::String number::String series::String address::String organization::String publisher::String note::String ;
InBook ::= chapter::String type::String ;
MastersThesis ::= type::String address::String note::String ;
Misc ::= (authors::Author)+ title::String howpublished::String month::String year::String note::String ;
Conference ::= pages::String ;
TechReport ::= type::String number::String address::String note::String ;
Book ::= InBook ;
 Book ::= InCollection ;
 Book ::= volume::String number::String series::String address::String edition::String note::String ;
PhdThesis ::= type::String address::String note::String ;
Manual ::= organization::String address::String edition::String note::String ;
Article ::= volume::String number::String pages::String note::String ;
Unpublished ::= (authors::Author)+ ;
InCollection ::= chapter::String type::String ;
Booklet ::= (authors::Author)+ howpublished::String address::String note::String ;
--------------------bibtex::bibtex-1.bgf--------------------
Howpublished ::= value::String ;
Day ::= value::String ;
Volume ::= value::String ;
Title ::= value::String ;
PhdThesis ::= key::String (fields::Field)+ ;
Booklet ::= key::String (fields::Field)+ ;
AuthorUrls ::= value::String ;
Inbook ::= key::String (fields::Field)+ ;
Chapter ::= value::String ;
Techreport ::= key::String (fields::Field)+ ;
Number ::= value::String ;
Authors ::= value::String ;
Manual ::= key::String (fields::Field)+ ;
Issn ::= value::String ;
Pages ::= value::String ;
Incollection ::= key::String (fields::Field)+ ;
Month ::= value::String ;
Proceedings ::= key::String (fields::Field)+ ;
Doi ::= value::String ;
Edition ::= value::String ;
Year ::= value::String ;
MastersThesis ::= key::String (fields::Field)+ ;
Publisher ::= value::String ;
Type ::= value::String ;
Inproceedings ::= key::String (fields::Field)+ ;
AbstractField ::= value::String ;
Institution ::= value::String ;
Series ::= value::String ;
Journal ::= value::String ;
Isbn ::= value::String ;
Article ::= key::String (fields::Field)+ ;
Address ::= value::String ;
School ::= value::String ;
Organization ::= value::String ;
Note ::= value::String ;
Url ::= value::String ;
BookTitle ::= value::String ;
Text ::= value::String ;
Editor ::= value::String ;
Misc ::= key::String (fields::Field)+ ;
Book ::= key::String (fields::Field)+ ;
--------------------bibtex::bql.bgf--------------------
Field ::= name::String entry::Entry ;
Expression ::= field::String value::String ;
Query ::= (entries::Entry)+ (predicates::Predicate)+ ;
Predicate ::= entry::Entry (expression::Expression)+ ;
Entry ::= name::String type::String allFields::Boolean (fields::Field)+ predicate::Predicate ;
--------------------dot::doux.bgf--------------------
SubGraph ::= type::String rankDir::String dim::Integer (contents::GraphElement)+ label::String color::String z::Integer graph::Graph ;
Graph ::= SubGraph ;
 Graph ::= type::String rankDir::String dim::Integer (contents::GraphElement)+ ;
Constraint ::= val::String (refers::String)+ ;
DirectedArc ::= sourceNode::String sourcePart::String targetNode::String targetPart::String shape::String ;
Node ::= shape::String style::String ;
--------------------dot::palies.bgf--------------------
SubGraph ::= (nodes::Nodelike)+ labelloc::String ;
Graph ::= type::String rankDir::String labeljust::String labelloc::String concentrate::Boolean (nodes::Nodelike)+ boundingBox::String compound::Boolean (layers::Layer)+ nodeSeparation::Double ordering::String size::String ratio::String center::Boolean ;
HorizontalCompartment ::= complexLabel::ComplexLabel compartments::Compartment anchor::Anchor ;
VerticalCompartment ::= complexLabel::ComplexLabel compartments::Compartment anchor::Anchor ;
DirectedArc ::= arrowHead::ArrowShape headlabel::Label taillabel::Label arrowTail::ArrowShape tail_lp::Double head_lp::Double ;
ArrowShape ::= clipping::String isPlain::Boolean size::Integer ;
PolygonNodeShape ::= sides::Integer skew::Integer distortion::Integer isRegular::Boolean orientation::Integer ;
Anchor ::= name::String source::Compartment ;
MNodeShape ::= toplabel::Label bottomlabel::Label ;
Node ::= fixedSize::Boolean fontname::String fontsize::Integer height::Integer width::Integer shape::NodeShape ;
UndirectedArc ::= fromNode::Nodelike toNode::Nodelike (layers::Layer)+ constraint::Boolean group::String minlen::Integer sameHead::String sameTail::String lhead::Nodelike ltail::Nodelike decorate::Boolean ;
Layer ::= (nodes::Nodelike)+ (arcs::Arc)+ graph::Graph layerSeparator::String ;
--------------------dot::rascal-abstract.bgf--------------------
Dotline ::= graph::DotGraph outline::Outline ;
NodeId ::= Id PortId ;
Stm ::= (N::(id::Id attrs::Attrs)) | (N::(id::Id)) | (N::(nid::NodeId attrs::Attrs)) | (N::(nid::NodeId)) | (E::(from::Id to::Id attrs::Attrs)) | (E::(from::Id to::Id)) | (E::(nfrom::NodeId to::Id attrs::Attrs)) | (E::(nfrom::NodeId to::Id)) | (E::(sfrom::Stm to::Id attrs::Attrs)) | (E::(sfrom::Stm to::Id)) | (E::(from::Id nto::NodeId attrs::Attrs)) | (E::(from::Id nto::NodeId)) | (E::(nfrom::NodeId nto::NodeId attrs::Attrs)) | (E::(nfrom::NodeId nto::NodeId)) | (E::(sfrom::Stm nto::NodeId attrs::Attrs)) | (E::(sfrom::Stm nto::NodeId)) | (E::(from::Id sto::Stm attrs::Attrs)) | (E::(from::Id sto::Stm)) | (E::(nfrom::NodeId sto::Stm attrs::Attrs)) | (E::(nfrom::NodeId sto::Stm)) | (E::(sfrom::Stm sto::Stm attrs::Attrs)) | (E::(sfrom::Stm sto::Stm)) | (S::(id::Id stms::Stms)) | (S::(stms::Stms)) | (A::(prop::Id val::Id)) | (GRAPH::(attrs::Attrs)) | (NODE::(attrs::Attrs)) | (EDGE::(attrs::Attrs)) ;
PortId ::= Id CompassPt ;
DotGraph ::= (graph::(id::Id stmts::Stms)) | (digraph::(id::Id stmts::Stms)) ;
Outline ::= (key::integer() args::(string()*))* ;
Attr ::= prop::string() val::Id ;
--------------------dot::rascal-concrete.bgf--------------------
StatementOptional ::= Statement ";"? ;
Statement ::= AttrStatement ;
 Statement ::= EdgeStatement ;
 Statement ::= NodeStatement ;
 Statement ::= Id "=" Id ;
AttrStatement ::= AttrTag AttrList ;
Subgraph ::= ("subgraph" Id?)? "{" StatementList "}" ;
NodeId ::= Id Port ;
 NodeId ::= Id ;
NodeStatement ::= Nod AttrList ;
DotAttr ::= Id "=" Id ;
 DotAttr ::= Id "=" Id "," ;
DOT ::= LAYOUT* Graph Id "{" StatementList "}" "\n"? ;
Edg ::= EdgeOp Nod ;
EdgeStatement ::= Nod EdgeRhs AttrList ;
AttrList0 ::= "[" DotAttr* "]" ;
Port ::= ":" Id Id? ;
--------------------html::allilaire.bgf--------------------
OBJECT ::= classid::String id::String data::String type::String standby::String ;
TR ::= valign::String align::String table::TABLE (tds::TD)+ ;
SELECT ::= multiple::String size::String name::String ;
MAP ::= body::BODY ;
TEXTAREA ::= name::String rows::String cols::String ;
LINK ::= rel::String title::String ahref::String type::String ;
EMBED ::= src::String width::String height::String align::String vspace::String hspace::String border::String ;
TITLE ::= head::HEAD ;
OPTION ::= selected::String optionValue::String ;
TH ::= colspan::String rowspan::String valign::String align::String width::String tr::TR ;
STRIKE ::= body::BODY ;
TD ::= TH ;
 TD ::= colspan::String rowspan::String valign::String align::String width::String tr::TR ;
TABLE ::= border::String width::String cellspacing::String cellpadding::String (trs::TR)+ ;
SUP ::= body::BODY ;
PARAM ::= name::String paramValue::String ;
H4 ::= body::BODY ;
H3 ::= body::BODY ;
HTML ::= head::HEAD body::BODY ;
INPUT ::= align::String maxlength::String size::String checked::String src::String inputValue::String name::String type::String ;
H2 ::= body::BODY ;
H1 ::= body::BODY ;
EM ::= body::BODY ;
SMALL ::= body::BODY ;
IFRAME ::= src::String name::String marginwidth::String marginheight::String scrolling::String noresize::String ;
IMG ::= src::String width::String height::String alt::String align::String vspace::String hspace::String ismap::String usemap::String border::String ;
BODY ::= background::String bgcolor::String text::String link::String alink::String vlink::String (bodyElements::BODYElement)+ html::HTML ;
BIG ::= body::BODY ;
SUB ::= body::BODY ;
HEAD ::= (headElements::HEADElement)+ html::HTML ;
APPLET ::= applet::String class::String src::String align::String width::String height::String ;
NOEMBED ::= body::BODY ;
UL ::= type::String ;
STRONG ::= body::BODY ;
FRAMESET ::= rows::String cols::String framespacing::String frameborder::String border::String ;
STYLE ::= body::BODY ;
HTMLElement ::= HEAD ;
 HTMLElement ::= HEADElement ;
 HTMLElement ::= BODY ;
 HTMLElement ::= BODYElement ;
 HTMLElement ::= value::String (children::HTMLElement)+ parent::HTMLElement ;
P ::= body::BODY ;
FONT ::= color::String face::String size::String ;
FRAME ::= IFRAME ;
 FRAME ::= src::String name::String marginwidth::String marginheight::String scrolling::String noresize::String ;
AREA ::= shape::String coords::String ahref::String ;
I ::= body::BODY ;
FORM ::= action::String method::String ;
PRE ::= body::BODY ;
B ::= body::BODY ;
A ::= ahref::String name::String id::String ;
TT ::= body::BODY ;
--------------------html::clark-basic.bgf--------------------
tr ::= tr::(tr.attlist (th | td)+) ;
li ::= li::(li.attlist Flow.model) ;
html.attlist ::= XHTML.version.attrib I18n.attrib ;
select ::= select::(select.attlist option+) ;
option ::= option::(Common.attrib (selected::"selected")? (value::string())? string()) ;
pre.attlist ::= Common.attrib (xml:space::"preserve")? ;
address ::= address::(address.attlist Inline.model) ;
th ::= th::(th.attlist Flow.model) ;
label ::= label::(label.attlist Inline.model) ;
q ::= q::(q.attlist Inline.model) ;
samp ::= samp::(samp.attlist Inline.model) ;
p ::= p::(p.attlist Inline.model) ;
td ::= td::(td.attlist Flow.model) ;
kbd ::= kbd::(kbd.attlist Inline.model) ;
code ::= code::(code.attlist Inline.model) ;
caption ::= caption::(caption.attlist Inline.model) ;
a ::= a::(a.attlist Inline.model) ;
blockquote.attlist ::= Common.attrib (cite::URI.datatype)? ;
head ::= head::(head.attlist head.content) ;
param.attlist ::= id.attrib name::string() (value::string())? (valuetype::("data" | "ref" | "object"))? (type::ContentType.datatype)? ;
ol ::= ol::(ol.attlist li+) ;
Core.attrib ::= id.attrib class.attrib title.attrib ;
title ::= title::(title.attlist string()) ;
cite ::= cite::(cite.attlist Inline.model) ;
meta.attlist ::= I18n.attrib (http-equiv::NMTOKEN.datatype)? (name::NMTOKEN.datatype)? (content::string())? (scheme::string())? ;
tr.attlist ::= Common.attrib CellHAlign.attrib CellVAlign.attrib ;
h6 ::= h6::(Heading.attrib Heading.content) ;
table ::= table::(table.attlist caption? tr+) ;
select.attlist ::= Common.attrib (name::string())? (size::Number.datatype)? (multiple::"multiple")? ;
h5 ::= h5::(Heading.attrib Heading.content) ;
h4 ::= h4::(Heading.attrib Heading.content) ;
h3 ::= h3::(Heading.attrib Heading.content) ;
link.attlist ::= Common.attrib (charset::Charset.datatype)? (href::URI.datatype)? (hreflang::LanguageCode.datatype)? (type::ContentType.datatype)? (rel::LinkTypes.datatype)? (rev::LinkTypes.datatype)? (media::MediaDesc.datatype)? ;
h2 ::= h2::(Heading.attrib Heading.content) ;
span ::= span::(span.attlist Inline.model) ;
h1 ::= h1::(Heading.attrib Heading.content) ;
label.attlist ::= Common.attrib (for::IDREF.datatype)? (accesskey::Character.datatype)? ;
form ::= form::(form.attlist Block.class+) ;
acronym ::= acronym::(acronym.attlist Inline.model) ;
q.attlist ::= Common.attrib (cite::URI.datatype)? ;
object ::= object::(object.attlist param* Flow.model) ;
Cell.attrib ::= Common.attrib (abbr::Text.datatype)? (axis::string())? (headers::IDREFS.datatype)? scope.attrib (rowspan::Number.datatype)? (colspan::Number.datatype)? CellHAlign.attrib CellVAlign.attrib ;
a.attlist ::= Common.attrib (href::URI.datatype)? (charset::Charset.datatype)? (type::ContentType.datatype)? (hreflang::LanguageCode.datatype)? (rel::LinkTypes.datatype)? (rev::LinkTypes.datatype)? (accesskey::Character.datatype)? (tabindex::Number.datatype)? ;
abbr ::= abbr::(abbr.attlist Inline.model) ;
head.attlist ::= I18n.attrib profile.attlist ;
dfn ::= dfn::(dfn.attlist Inline.model) ;
html ::= html::(html.attlist head body) ;
em ::= em::(em.attlist Inline.model) ;
var ::= var::(var.attlist Inline.model) ;
pre ::= pre::(pre.attlist Inline.model) ;
body ::= body::(body.attlist Block.model) ;
table.attlist ::= Common.attrib (summary::Text.datatype)? ;
input.attlist ::= Common.attrib (type::InputType.class)? (name::string())? (value::string())? (checked::"checked")? (size::string())? (maxlength::Number.datatype)? (src::URI.datatype)? (accesskey::Character.datatype)? ;
strong ::= strong::(strong.attlist Inline.model) ;
ul ::= ul::(ul.attlist li+) ;
form.attlist ::= Common.attrib action::URI.datatype (method::("get" | "post"))? (enctype::ContentType.datatype)? ;
img.attlist ::= Common.attrib src::URI.datatype alt::Text.datatype (longdesc::URI.datatype)? (height::Length.datatype)? (width::Length.datatype)? ;
CommonIdRequired.attrib ::= id::ID.datatype class.attrib title.attrib I18n.attrib ;
div ::= div::(div.attlist Flow.model) ;
object.attlist ::= Common.attrib (declare::"declare")? (classid::URI.datatype)? (codebase::URI.datatype)? (data::URI.datatype)? (type::ContentType.datatype)? (codetype::ContentType.datatype)? (archive::URIs.datatype)? (standby::Text.datatype)? (height::Length.datatype)? (width::Length.datatype)? (name::string())? (tabindex::Number.datatype)? ;
dt ::= dt::(dt.attlist Inline.model) ;
blockquote ::= blockquote::(blockquote.attlist Block.model) ;
Common.attrib ::= Core.attrib I18n.attrib ;
textarea.attlist ::= Common.attrib (name::string())? rows::Number.datatype cols::Number.datatype (accesskey::Character.datatype)? string() ;
dl ::= dl::(dl.attlist (dt | dd)+) ;
dd ::= dd::(dd.attlist Flow.model) ;
--------------------html::clark.bgf--------------------
colgroup ::= colgroup::(colgroup.attlist col*) ;
select ::= select::(select.attlist (option | optgroup)+) ;
 select ::= select::(select.attlist option+) ;
li.noblock ::= li::(li.attlist Inline.model) ;
CellHAlign.attrib ::= (align::("left" | "center" | "right" | "justify" | "char"))? (char::Character.datatype)? (charoff::Length.datatype)? ;
 CellHAlign.attrib ::= (align::("left" | "center" | "right"))? ;
address ::= address::(address.attlist Inline.model) ;
label ::= label::(label.attlist Inline.model) ;
ins ::= ins::(ins.attlist Inline.model) ;
code ::= code::(code.attlist Inline.model) ;
kbd ::= kbd::(kbd.attlist Inline.model) ;
tbody.attlist ::= Common.attrib CellHAlign.attrib CellVAlign.attrib ;
caption ::= caption::(caption.attlist Inline.model) ;
tfoot ::= tfoot::(tfoot.attlist tr+) ;
blockquote.attlist ::= Common.attrib (cite::URI.datatype)? ;
head ::= head::(head.attlist head.content) ;
legend.attlist ::= Common.attrib (accesskey::Character.datatype)? ;
 legend.attlist ::= (align::("top" | "bottom" | "left" | "right"))? ;
ol ::= ol::(ol.attlist li+) ;
hr.attlist ::= (align::("left" | "center" | "right"))? (noshade::"noshade")? (size::Pixels.datatype)? (width::Pixels.datatype)? ;
 hr.attlist ::= Common.attrib ;
Core.attrib ::= id.attrib class.attrib title.attrib ;
 Core.attrib ::= (style::string())? ;
meta.attlist ::= I18n.attrib (http-equiv::NMTOKEN.datatype)? (name::NMTOKEN.datatype)? (content::string())? (scheme::string())? ;
frameset ::= frameset::(frameset.attlist (frameset | frame)+ noframes?) ;
 frameset ::= body ;
colgroup.attlist ::= Common.attrib (span::Number.datatype)? (width::MultiLength.datatype)? CellHAlign.attrib CellVAlign.attrib ;
h6 ::= h6::(Heading.attrib Heading.content) ;
table ::= table::(table.attlist caption? (col*) | (colgroup*) (thead? tfoot? tbody+) | (tr+)) ;
 table ::= table::(table.attlist caption? tr+) ;
h5 ::= h5::(Heading.attrib Heading.content) ;
select.attlist ::= (onblur::Script.datatype)? (onchange::Script.datatype)? (onfocus::Script.datatype)? ;
 select.attlist ::= (disabled::"disabled")? (tabindex::Number.datatype)? ;
 select.attlist ::= Common.attrib (name::string())? (size::Number.datatype)? (multiple::"multiple")? ;
h4 ::= h4::(Heading.attrib Heading.content) ;
noscript ::= noscript::(noscript.attlist Block.model) ;
h3 ::= h3::(Heading.attrib Heading.content) ;
script ::= script::(script.attlist string()) ;
link.attlist ::= Common.attrib (charset::Charset.datatype)? (href::URI.datatype)? (hreflang::LanguageCode.datatype)? (type::ContentType.datatype)? (rel::LinkTypes.datatype)? (rev::LinkTypes.datatype)? (media::MediaDesc.datatype)? ;
h2 ::= h2::(Heading.attrib Heading.content) ;
h1 ::= h1::(Heading.attrib Heading.content) ;
label.attlist ::= (onblur::Script.datatype)? (onfocus::Script.datatype)? ;
 label.attlist ::= Common.attrib (for::IDREF.datatype)? (accesskey::Character.datatype)? ;
form ::= form::(form.attlist Block.class+) ;
acronym ::= acronym::(acronym.attlist Inline.model) ;
isindex.attlist ::= Core.attrib I18n.attrib (prompt::Text.datatype)? ;
Cell.attrib ::= (nowrap::"nowrap")? (bgcolor::Color.datatype)? (width::Pixels.datatype)? (height::Pixels.datatype)? ;
 Cell.attrib ::= Common.attrib (abbr::Text.datatype)? (axis::string())? (headers::IDREFS.datatype)? scope.attrib (rowspan::Number.datatype)? (colspan::Number.datatype)? CellHAlign.attrib CellVAlign.attrib ;
tfoot.attlist ::= Common.attrib CellHAlign.attrib CellVAlign.attrib ;
strike ::= strike::(strike.attlist Inline.model) ;
style ::= style::(style.attlist string()) ;
head.attlist ::= I18n.attrib profile.attlist ;
ol.attlist ::= (type::string())? (compact::"compact")? (start::string())? ;
 ol.attlist ::= Common.attrib ;
optgroup ::= optgroup::(optgroup.attlist option+) ;
html ::= html::(html.attlist head frameset) ;
 html ::= html::(html.attlist head body) ;
em ::= em::(em.attlist Inline.model) ;
noframes ::= noframes::(noframes.attlist body) ;
frameset.attlist ::= Core.attrib (cols::MultiLength.datatype)? (rows::MultiLength.datatype)? ;
iframe ::= iframe::(iframe.attlist Flow.model) ;
pre ::= pre::(pre.attlist Inline.model) ;
body ::= body::(body.attlist Block.model) ;
table.attlist ::= align.attrib (bgcolor::Color.datatype)? ;
 table.attlist ::= (width::Length.datatype)? (border::Pixels.datatype)? frame.attrib rules.attrib (cellspacing::Length.datatype)? (cellpadding::Length.datatype)? ;
 table.attlist ::= Common.attrib (summary::Text.datatype)? ;
script.attlist ::= (language::ContentType.datatype)? ;
 script.attlist ::= (charset::Charset.datatype)? type::ContentType.datatype (src::URI.datatype)? (defer::"defer")? (xml:space::"preserve")? ;
input.attlist ::= (onblur::Script.datatype)? (onchange::Script.datatype)? (onfocus::Script.datatype)? (onselect::Script.datatype)? ;
 input.attlist ::= (disabled::"disabled")? (readonly::"readonly")? (alt::string())? (tabindex::Number.datatype)? (accept::ContentTypes.datatype)? ;
 input.attlist ::= Common.attrib (type::InputType.class)? (name::string())? (value::string())? (checked::"checked")? (size::string())? (maxlength::Number.datatype)? (src::URI.datatype)? (accesskey::Character.datatype)? ;
 input.attlist ::= align.attrib ;
strong ::= strong::(strong.attlist Inline.model) ;
ul ::= ul::(ul.attlist li+) ;
form.attlist ::= (onreset::Script.datatype)? (onsubmit::Script.datatype)? ;
 form.attlist ::= (accept-charset::Charsets.datatype)? (accept::ContentTypes.datatype)? ;
 form.attlist ::= Common.attrib action::URI.datatype (method::("get" | "post"))? (enctype::ContentType.datatype)? ;
 form.attlist ::= name.attlist ;
 form.attlist ::= target.attrib ;
img.attlist ::= usemap.attlist ;
 img.attlist ::= Common.attrib src::URI.datatype alt::Text.datatype (longdesc::URI.datatype)? (height::Length.datatype)? (width::Length.datatype)? ;
 img.attlist ::= (align::("top" | "middle" | "bottom" | "left" | "right"))? (border::Pixels.datatype)? (hspace::Pixels.datatype)? (vspace::Pixels.datatype)? ;
 img.attlist ::= name.attlist ;
 img.attlist ::= (ismap::"ismap")? ;
CommonIdRequired.attrib ::= id::ID.datatype class.attrib title.attrib I18n.attrib ;
 CommonIdRequired.attrib ::= Events.attrib ;
div ::= div::(div.attlist Flow.model) ;
dt ::= dt::(dt.attlist Inline.model) ;
dir ::= dir::(dir.attlist li.noblock+) ;
dl ::= dl::(dl.attlist (dt | dd)+) ;
style.attlist ::= title.attrib I18n.attrib type::ContentType.datatype (media::MediaDesc.datatype)? (xml:space::"preserve")? ;
tt ::= tt::(tt.attlist Inline.model) ;
dd ::= dd::(dd.attlist Flow.model) ;
tr ::= tr::(tr.attlist (th | td)+) ;
li ::= li::(li.attlist Flow.model) ;
optgroup.attlist ::= Common.attrib (disabled::"disabled")? label::Text.datatype ;
html.attlist ::= XHTML.version.attrib I18n.attrib ;
u ::= u::(u.attlist Inline.model) ;
iframe.attlist ::= Core.attrib (longdesc::URI.datatype)? (src::URI.datatype)? (frameborder::("1" | "0"))? (width::Length.datatype)? (height::Length.datatype)? (marginwidth::Pixels.datatype)? (marginheight::Pixels.datatype)? (scrolling::("yes" | "no" | "auto"))? ;
 iframe.attlist ::= name.attlist ;
option ::= option::(Common.attrib (selected::"selected")? (value::string())? string()) ;
pre.attlist ::= (width::Length.datatype)? ;
 pre.attlist ::= Common.attrib (xml:space::"preserve")? ;
th ::= th::(th.attlist Flow.model) ;
s ::= s::(s.attlist Inline.model) ;
body.attlist ::= (onload::Script.datatype)? (onunload::Script.datatype)? ;
 body.attlist ::= (background::URI.datatype)? (bgcolor::Color.datatype)? (text::Color.datatype)? (link::Color.datatype)? (vlink::Color.datatype)? (alink::Color.datatype)? ;
 body.attlist ::= Common.attrib ;
samp ::= samp::(samp.attlist Inline.model) ;
q ::= q::(q.attlist Inline.model) ;
basefont.attlist ::= id.attrib Font.attrib ;
p ::= p::(p.attlist Inline.model) ;
td ::= td::(td.attlist Flow.model) ;
bdo ::= bdo::(bdo.attlist Inline.model) ;
i ::= i::(i.attlist Inline.model) ;
ul.attlist ::= (type::string())? (compact::"compact")? ;
 ul.attlist ::= Common.attrib ;
b ::= b::(b.attlist Inline.model) ;
a ::= a::(a.attlist Inline.model) ;
menu ::= menu::(menu.attlist li.noblock+) ;
area.attlist ::= Common.attrib (href::URI.datatype)? shape.attrib coords.attrib (nohref::"nohref")? alt::Text.datatype (tabindex::Number.datatype)? (accesskey::Character.datatype)? ;
 area.attlist ::= (onblur::Script.datatype)? (onfocus::Script.datatype)? ;
 area.attlist ::= target.attrib ;
dir.attlist ::= Common.attrib (compact::"compact")? ;
param.attlist ::= id.attrib name::string() (value::string())? (valuetype::("data" | "ref" | "object"))? (type::ContentType.datatype)? ;
map ::= map::(map.attlist (Block.class | area)+) ;
applet ::= applet::(applet.attlist param* Flow.model) ;
title ::= title::(title.attlist string()) ;
cite ::= cite::(cite.attlist Inline.model) ;
center ::= center::(center.attlist Flow.model) ;
thead ::= thead::(thead.attlist tr+) ;
col.attlist ::= Common.attrib (span::Number.datatype)? (width::MultiLength.datatype)? CellHAlign.attrib CellVAlign.attrib ;
tr.attlist ::= (bgcolor::Color.datatype)? ;
 tr.attlist ::= Common.attrib CellHAlign.attrib CellVAlign.attrib ;
font ::= font::(font.attlist Inline.model) ;
sup ::= sup::(sup.attlist Inline.model) ;
li.attlist ::= (type::string())? (value::string())? ;
 li.attlist ::= Common.attrib ;
span ::= span::(span.attlist Inline.model) ;
option.attlist ::= (disabled::"disabled")? (label::Text.datatype)? ;
q.attlist ::= Common.attrib (cite::URI.datatype)? ;
sub ::= sub::(sub.attlist Inline.model) ;
object ::= object::(object.attlist param* Flow.model) ;
frame.attlist ::= Core.attrib (longdesc::URI.datatype)? (src::URI.datatype)? (frameborder::("1" | "0"))? (marginwidth::Pixels.datatype)? (marginheight::Pixels.datatype)? (noresize::"noresize")? (scrolling::("yes" | "no" | "auto"))? ;
bdo.attlist ::= Core.attrib lang.attrib dir.attrib ;
button ::= button::(button.attlist Flow.model) ;
a.attlist ::= shape.attrib coords.attrib ;
 a.attlist ::= (onblur::Script.datatype)? (onfocus::Script.datatype)? ;
 a.attlist ::= Common.attrib (href::URI.datatype)? (charset::Charset.datatype)? (type::ContentType.datatype)? (hreflang::LanguageCode.datatype)? (rel::LinkTypes.datatype)? (rev::LinkTypes.datatype)? (accesskey::Character.datatype)? (tabindex::Number.datatype)? ;
 a.attlist ::= name.attlist ;
 a.attlist ::= target.attrib ;
abbr ::= abbr::(abbr.attlist Inline.model) ;
menu.attlist ::= Common.attrib (compact::"compact")? ;
dfn ::= dfn::(dfn.attlist Inline.model) ;
applet.attlist ::= Core.attrib alt::Text.datatype (archive::string())? (code::string())? (codebase::URI.datatype)? (object::string())? height::Length.datatype width::Length.datatype ;
 applet.attlist ::= (align::("top" | "middle" | "bottom" | "left" | "right"))? (hspace::Pixels.datatype)? (vspace::Pixels.datatype)? ;
 applet.attlist ::= name.attlist ;
Font.attrib ::= (size::string())? (color::Color.datatype)? (face::string())? ;
fieldset ::= fieldset::(fieldset.attlist legend Flow.model) ;
var ::= var::(var.attlist Inline.model) ;
thead.attlist ::= Common.attrib CellHAlign.attrib CellVAlign.attrib ;
font.attlist ::= Core.attrib I18n.attrib Font.attrib ;
Events.attrib ::= (onclick::Script.datatype)? (ondblclick::Script.datatype)? (onmousedown::Script.datatype)? (onmouseup::Script.datatype)? (onmouseover::Script.datatype)? (onmousemove::Script.datatype)? (onmouseout::Script.datatype)? (onkeypress::Script.datatype)? (onkeydown::Script.datatype)? (onkeyup::Script.datatype)? ;
tbody ::= tbody::(tbody.attlist tr+) ;
object.attlist ::= usemap.attlist ;
 object.attlist ::= (align::("top" | "middle" | "bottom" | "left" | "right"))? (border::Pixels.datatype)? (hspace::Pixels.datatype)? (vspace::Pixels.datatype)? ;
 object.attlist ::= Common.attrib (declare::"declare")? (classid::URI.datatype)? (codebase::URI.datatype)? (data::URI.datatype)? (type::ContentType.datatype)? (codetype::ContentType.datatype)? (archive::URIs.datatype)? (standby::Text.datatype)? (height::Length.datatype)? (width::Length.datatype)? (name::string())? (tabindex::Number.datatype)? ;
blockquote ::= blockquote::(blockquote.attlist Block.model) ;
Edit.attrib ::= (cite::URI.datatype)? (datetime::Datetime.datatype)? ;
legend ::= legend::(legend.attlist Inline.model) ;
Common.attrib ::= Core.attrib I18n.attrib ;
 Common.attrib ::= Events.attrib ;
del ::= del::(del.attlist Inline.model) ;
textarea.attlist ::= (onblur::Script.datatype)? (onchange::Script.datatype)? (onfocus::Script.datatype)? (onselect::Script.datatype)? ;
 textarea.attlist ::= (disabled::"disabled")? (readonly::"readonly")? (tabindex::Number.datatype)? ;
 textarea.attlist ::= Common.attrib (name::string())? rows::Number.datatype cols::Number.datatype (accesskey::Character.datatype)? string() ;
small ::= small::(small.attlist Inline.model) ;
button.attlist ::= (onblur::Script.datatype)? (onfocus::Script.datatype)? ;
 button.attlist ::= Common.attrib (name::string())? (value::string())? (type::("button" | "submit" | "reset"))? (disabled::"disabled")? (tabindex::Number.datatype)? (accesskey::Character.datatype)? ;
big ::= big::(big.attlist Inline.model) ;
--------------------html::cordy.bgf--------------------
tag_beg ::= "<" id attributes ">" NL ;
singleton_id ::= "br" | "hr" | ("|" "img") | "meta" | "base" | "basefont" | x_id | "dt" ;
equals_attribute_value ::= "=" attribute_value ;
text ::= text_unit+ NL ;
comment_text ::= (punctuation SP) | token ;
attribute ::= SP attribute_id equals_attribute_value? ;
comment_tag ::= "<!" comment_text* ">" NL ;
tag ::= "<" id attributes ">" NL IN tag_elements EX "</" id ">" NL ;
attributes ::= SPOFF attribute* SPON ;
text_unit ::= (punctuation SP) | (")" SP) | (SP "(") | token | ("<" number) ;
tag_end ::= "</" id ">" NL ;
singleton_tag ::= ("<" singleton_id attributes ">" singleton_tag_end? NL) | ("<" id attributes "/>" NL) ;
singleton_tag_end ::= "</" singleton_id ">" ;
--------------------html::guyard.bgf--------------------
ColElement ::= (cols::Col)+ (colgroup::Colgroup)+ ;
Map ::= mapelement::MapContent id::ID class::CDATA style::StyleSheet title::Text name::NMTOKEN ;
Title ::= i18n::I18n id::ID ;
Base ::= href::URI id::ID ;
Blockquote ::= (blockquoteElements::Block)+ cite::URI ;
TableElement ::= (tbody::Tbody)+ (tr::Tr)+ ;
Table ::= (caption::Caption)+ colelement::ColElement thead::Thead tfoot::Tfoot tableelement::TableElement summary::Text width::Length border::Pixels frame::TFrame rules::TRules cellspacing::Length cellpadding::Length ;
Param ::= id::ID name::CDATA value::CDATA valuetype::ValueType type::ContentType ;
Area ::= shape::Shape coords::Coords href::URI nohref::Boolean alt::Text ;
Legend ::= (legendelement::Inline)+ accesskey::Character ;
Script ::= id::ID charset::Charset type::ContentType src::URI defer::String xml:space::String ;
Del ::= (flowelement::Flow)+ cite::URI datetime::Datetime ;
Input ::= type::InputType name::CDATA value::CDATA checked::Boolean disabled::Boolean readonly::Boolean size::CDATA maxlength::Number src::URI alt::CDATA usemap::URI onselect::ScriptExpression onchange::ScriptExpression accept::ContentTypes ;
Meta ::= i18n::I18n id::ID httpequiv::CDATA name::CDATA content::CDATA scheme::CDATA ;
Form ::= (formelement::FormContent)+ action::URI method::FomeMethod enctype::ContentType onsubmit::ScriptExpression onreset::ScriptExpression accept::ContentTypes accept-charset::Charsets ;
TitleHeadElement ::= title::Title (headmisc::HeadMisc)+ (baseTitleHeadElement::BaseTitleHeadElement)+ ;
Img ::= src::URI alt::Text longdesc::URI height::Length width::Length usemap::URI ismap::Boolean ;
Col ::= span::Number width::MultiLength ;
Colgroup ::= (cols::Col)+ span::Number width::MultiLength ;
Object ::= (objectelement::ObjectElement)+ declare::Boolean classid::URI codebase::URI data::URI type::ContentType codetype::ContentType archive::UriList standby::Text height::Length width::Length usemap::URI name::NMTOKEN tabindex::Number ;
Select ::= (selectelement::SelectElement)+ name::CDATA size::Number multiple::Boolean disabled::Boolean tabindex::Number onfocus::ScriptExpression onblur::ScriptExpression onchange::ScriptExpression ;
Textarea ::= name::CDATA rows::Number cols::Number disabled::Boolean readonly::Boolean onselect::ScriptExpression onchange::ScriptExpression ;
Link ::= charset::Charset href::URI hreflang::LanguageCode type::ContentType rel::LinkTypes rev::LinkTypes media::MediaDesc ;
Option ::= selected::Boolean disabled::Boolean label::Text optionvalue::CDATA ;
BaseTitleHeadElement ::= base::Base (headmisc::HeadMisc)+ ;
Th ::= (thelement::Flow)+ abbr::Text axis::CDATA headers::IDREFS scope::Scope rowspan::Number colspan::Number ;
Label ::= (labelelements::Inline)+ for::IDREF accesskey::Character onfocus::ScriptExpression onblur::ScriptExpression ;
TitleBaseHeadElement ::= title::Title (headmisc::HeadMisc)+ ;
Button ::= (buttoncontent::ButtonContent)+ name::CDATA value::CDATA type::ButtonType disabled::Boolean ;
Style ::= i18n::I18n id::ID type::ContentType media::MediaDesc title::Text xml:space::String ;
Q ::= (qElements::Inline)+ cite::URI ;
Td ::= (tdelement::Flow)+ abbr::Text axis::CDATA headers::IDREFS scope::Scope rowspan::Number colspan::Number ;
Ins ::= (flowelement::Flow)+ cite::URI datetime::Datetime ;
Bdo ::= (bdoElements::Inline)+ lang::LanguageCode xml:lang::LanguageCode dir::Direction ;
Optgroup ::= (options::Option)+ disabled::Boolean label::Text ;
BaseHeadElement ::= base::Base (headmisc::HeadMisc)+ (titleBaseHeadElement::TitleBaseHeadElement)+ ;
Html ::= i18n::I18n id::ID xmlns::URI head::Head body::Body ;
Pre ::= (preElements::PreContent)+ xml:space::String ;
Body ::= (bodyElements::Block)+ onload::ScriptExpression onunload::ScriptExpression html::Html ;
A ::= (acontent::AContent)+ charset::Charset type::ContentType name::NMTOKEN href::URI hreflang::LanguageCode rel::LinkTypes rev::LinkTypes shape::Shape coords::Coords ;
Head ::= i18n::I18n id::ID profile::URI (headmisc::HeadMisc)+ headelement::HeadElement html::Html ;
--------------------html::clark-strict.bgf--------------------
colgroup ::= colgroup::(colgroup.attlist col*) ;
tr ::= tr::(tr.attlist (th | td)+) ;
li ::= li::(li.attlist Flow.model) ;
optgroup.attlist ::= Common.attrib (disabled::"disabled")? label::Text.datatype ;
html.attlist ::= XHTML.version.attrib I18n.attrib ;
select ::= select::(select.attlist (option | optgroup)+) ;
 select ::= select::(select.attlist option+) ;
CellHAlign.attrib ::= (align::("left" | "center" | "right" | "justify" | "char"))? (char::Character.datatype)? (charoff::Length.datatype)? ;
 CellHAlign.attrib ::= (align::("left" | "center" | "right"))? ;
iframe.attlist ::= Core.attrib (longdesc::URI.datatype)? (src::URI.datatype)? (frameborder::("1" | "0"))? (width::Length.datatype)? (height::Length.datatype)? (marginwidth::Pixels.datatype)? (marginheight::Pixels.datatype)? (scrolling::("yes" | "no" | "auto"))? ;
 iframe.attlist ::= name.attlist ;
option ::= option::(Common.attrib (selected::"selected")? (value::string())? string()) ;
pre.attlist ::= Common.attrib (xml:space::"preserve")? ;
address ::= address::(address.attlist Inline.model) ;
th ::= th::(th.attlist Flow.model) ;
label ::= label::(label.attlist Inline.model) ;
body.attlist ::= (onload::Script.datatype)? (onunload::Script.datatype)? ;
 body.attlist ::= Common.attrib ;
samp ::= samp::(samp.attlist Inline.model) ;
q ::= q::(q.attlist Inline.model) ;
p ::= p::(p.attlist Inline.model) ;
td ::= td::(td.attlist Flow.model) ;
ins ::= ins::(ins.attlist Inline.model) ;
kbd ::= kbd::(kbd.attlist Inline.model) ;
code ::= code::(code.attlist Inline.model) ;
bdo ::= bdo::(bdo.attlist Inline.model) ;
i ::= i::(i.attlist Inline.model) ;
tbody.attlist ::= Common.attrib CellHAlign.attrib CellVAlign.attrib ;
caption ::= caption::(caption.attlist Inline.model) ;
tfoot ::= tfoot::(tfoot.attlist tr+) ;
b ::= b::(b.attlist Inline.model) ;
a ::= a::(a.attlist Inline.model) ;
blockquote.attlist ::= Common.attrib (cite::URI.datatype)? ;
head ::= head::(head.attlist head.content) ;
param.attlist ::= id.attrib name::string() (value::string())? (valuetype::("data" | "ref" | "object"))? (type::ContentType.datatype)? ;
area.attlist ::= Common.attrib (href::URI.datatype)? shape.attrib coords.attrib (nohref::"nohref")? alt::Text.datatype (tabindex::Number.datatype)? (accesskey::Character.datatype)? ;
 area.attlist ::= (onblur::Script.datatype)? (onfocus::Script.datatype)? ;
 area.attlist ::= target.attrib ;
legend.attlist ::= Common.attrib (accesskey::Character.datatype)? ;
ol ::= ol::(ol.attlist li+) ;
map ::= map::(map.attlist (Block.class | area)+) ;
applet ::= applet::(applet.attlist param* Flow.model) ;
Core.attrib ::= id.attrib class.attrib title.attrib ;
 Core.attrib ::= (style::string())? ;
title ::= title::(title.attlist string()) ;
cite ::= cite::(cite.attlist Inline.model) ;
meta.attlist ::= I18n.attrib (http-equiv::NMTOKEN.datatype)? (name::NMTOKEN.datatype)? (content::string())? (scheme::string())? ;
thead ::= thead::(thead.attlist tr+) ;
col.attlist ::= Common.attrib (span::Number.datatype)? (width::MultiLength.datatype)? CellHAlign.attrib CellVAlign.attrib ;
colgroup.attlist ::= Common.attrib (span::Number.datatype)? (width::MultiLength.datatype)? CellHAlign.attrib CellVAlign.attrib ;
tr.attlist ::= Common.attrib CellHAlign.attrib CellVAlign.attrib ;
h6 ::= h6::(Heading.attrib Heading.content) ;
table ::= table::(table.attlist caption? (col*) | (colgroup*) (thead? tfoot? tbody+) | (tr+)) ;
 table ::= table::(table.attlist caption? tr+) ;
sup ::= sup::(sup.attlist Inline.model) ;
h5 ::= h5::(Heading.attrib Heading.content) ;
select.attlist ::= (onblur::Script.datatype)? (onchange::Script.datatype)? (onfocus::Script.datatype)? ;
 select.attlist ::= (disabled::"disabled")? (tabindex::Number.datatype)? ;
 select.attlist ::= Common.attrib (name::string())? (size::Number.datatype)? (multiple::"multiple")? ;
h4 ::= h4::(Heading.attrib Heading.content) ;
noscript ::= noscript::(noscript.attlist Block.model) ;
h3 ::= h3::(Heading.attrib Heading.content) ;
link.attlist ::= Common.attrib (charset::Charset.datatype)? (href::URI.datatype)? (hreflang::LanguageCode.datatype)? (type::ContentType.datatype)? (rel::LinkTypes.datatype)? (rev::LinkTypes.datatype)? (media::MediaDesc.datatype)? ;
script ::= script::(script.attlist string()) ;
h2 ::= h2::(Heading.attrib Heading.content) ;
span ::= span::(span.attlist Inline.model) ;
h1 ::= h1::(Heading.attrib Heading.content) ;
option.attlist ::= (disabled::"disabled")? (label::Text.datatype)? ;
label.attlist ::= (onblur::Script.datatype)? (onfocus::Script.datatype)? ;
 label.attlist ::= Common.attrib (for::IDREF.datatype)? (accesskey::Character.datatype)? ;
form ::= form::(form.attlist Block.class+) ;
acronym ::= acronym::(acronym.attlist Inline.model) ;
q.attlist ::= Common.attrib (cite::URI.datatype)? ;
sub ::= sub::(sub.attlist Inline.model) ;
object ::= object::(object.attlist param* Flow.model) ;
bdo.attlist ::= Core.attrib lang.attrib dir.attrib ;
Cell.attrib ::= Common.attrib (abbr::Text.datatype)? (axis::string())? (headers::IDREFS.datatype)? scope.attrib (rowspan::Number.datatype)? (colspan::Number.datatype)? CellHAlign.attrib CellVAlign.attrib ;
tfoot.attlist ::= Common.attrib CellHAlign.attrib CellVAlign.attrib ;
button ::= button::(button.attlist Flow.model) ;
a.attlist ::= shape.attrib coords.attrib ;
 a.attlist ::= (onblur::Script.datatype)? (onfocus::Script.datatype)? ;
 a.attlist ::= Common.attrib (href::URI.datatype)? (charset::Charset.datatype)? (type::ContentType.datatype)? (hreflang::LanguageCode.datatype)? (rel::LinkTypes.datatype)? (rev::LinkTypes.datatype)? (accesskey::Character.datatype)? (tabindex::Number.datatype)? ;
 a.attlist ::= name.attlist ;
 a.attlist ::= target.attrib ;
abbr ::= abbr::(abbr.attlist Inline.model) ;
style ::= style::(style.attlist string()) ;
head.attlist ::= I18n.attrib profile.attlist ;
dfn ::= dfn::(dfn.attlist Inline.model) ;
optgroup ::= optgroup::(optgroup.attlist option+) ;
html ::= html::(html.attlist head body) ;
applet.attlist ::= Core.attrib alt::Text.datatype (archive::string())? (code::string())? (codebase::URI.datatype)? (object::string())? height::Length.datatype width::Length.datatype ;
 applet.attlist ::= name.attlist ;
em ::= em::(em.attlist Inline.model) ;
fieldset ::= fieldset::(fieldset.attlist legend Flow.model) ;
var ::= var::(var.attlist Inline.model) ;
thead.attlist ::= Common.attrib CellHAlign.attrib CellVAlign.attrib ;
iframe ::= iframe::(iframe.attlist Flow.model) ;
pre ::= pre::(pre.attlist Inline.model) ;
body ::= body::(body.attlist Block.model) ;
table.attlist ::= (width::Length.datatype)? (border::Pixels.datatype)? frame.attrib rules.attrib (cellspacing::Length.datatype)? (cellpadding::Length.datatype)? ;
 table.attlist ::= Common.attrib (summary::Text.datatype)? ;
Events.attrib ::= (onclick::Script.datatype)? (ondblclick::Script.datatype)? (onmousedown::Script.datatype)? (onmouseup::Script.datatype)? (onmouseover::Script.datatype)? (onmousemove::Script.datatype)? (onmouseout::Script.datatype)? (onkeypress::Script.datatype)? (onkeydown::Script.datatype)? (onkeyup::Script.datatype)? ;
script.attlist ::= (charset::Charset.datatype)? type::ContentType.datatype (src::URI.datatype)? (defer::"defer")? (xml:space::"preserve")? ;
input.attlist ::= (onblur::Script.datatype)? (onchange::Script.datatype)? (onfocus::Script.datatype)? (onselect::Script.datatype)? ;
 input.attlist ::= (disabled::"disabled")? (readonly::"readonly")? (alt::string())? (tabindex::Number.datatype)? (accept::ContentTypes.datatype)? ;
 input.attlist ::= Common.attrib (type::InputType.class)? (name::string())? (value::string())? (checked::"checked")? (size::string())? (maxlength::Number.datatype)? (src::URI.datatype)? (accesskey::Character.datatype)? ;
strong ::= strong::(strong.attlist Inline.model) ;
ul ::= ul::(ul.attlist li+) ;
tbody ::= tbody::(tbody.attlist tr+) ;
form.attlist ::= (onreset::Script.datatype)? (onsubmit::Script.datatype)? ;
 form.attlist ::= (accept-charset::Charsets.datatype)? (accept::ContentTypes.datatype)? ;
 form.attlist ::= Common.attrib action::URI.datatype (method::("get" | "post"))? (enctype::ContentType.datatype)? ;
 form.attlist ::= name.attlist ;
 form.attlist ::= target.attrib ;
img.attlist ::= usemap.attlist ;
 img.attlist ::= Common.attrib src::URI.datatype alt::Text.datatype (longdesc::URI.datatype)? (height::Length.datatype)? (width::Length.datatype)? ;
 img.attlist ::= name.attlist ;
 img.attlist ::= (ismap::"ismap")? ;
CommonIdRequired.attrib ::= id::ID.datatype class.attrib title.attrib I18n.attrib ;
 CommonIdRequired.attrib ::= Events.attrib ;
div ::= div::(div.attlist Flow.model) ;
dt ::= dt::(dt.attlist Inline.model) ;
object.attlist ::= usemap.attlist ;
 object.attlist ::= Common.attrib (declare::"declare")? (classid::URI.datatype)? (codebase::URI.datatype)? (data::URI.datatype)? (type::ContentType.datatype)? (codetype::ContentType.datatype)? (archive::URIs.datatype)? (standby::Text.datatype)? (height::Length.datatype)? (width::Length.datatype)? (name::string())? (tabindex::Number.datatype)? ;
blockquote ::= blockquote::(blockquote.attlist Block.model) ;
Edit.attrib ::= (cite::URI.datatype)? (datetime::Datetime.datatype)? ;
legend ::= legend::(legend.attlist Inline.model) ;
Common.attrib ::= Core.attrib I18n.attrib ;
 Common.attrib ::= Events.attrib ;
del ::= del::(del.attlist Inline.model) ;
textarea.attlist ::= (onblur::Script.datatype)? (onchange::Script.datatype)? (onfocus::Script.datatype)? (onselect::Script.datatype)? ;
 textarea.attlist ::= (disabled::"disabled")? (readonly::"readonly")? (tabindex::Number.datatype)? ;
 textarea.attlist ::= Common.attrib (name::string())? rows::Number.datatype cols::Number.datatype (accesskey::Character.datatype)? string() ;
dl ::= dl::(dl.attlist (dt | dd)+) ;
small ::= small::(small.attlist Inline.model) ;
button.attlist ::= (onblur::Script.datatype)? (onfocus::Script.datatype)? ;
 button.attlist ::= Common.attrib (name::string())? (value::string())? (type::("button" | "submit" | "reset"))? (disabled::"disabled")? (tabindex::Number.datatype)? (accesskey::Character.datatype)? ;
style.attlist ::= title.attrib I18n.attrib type::ContentType.datatype (media::MediaDesc.datatype)? (xml:space::"preserve")? ;
tt ::= tt::(tt.attlist Inline.model) ;
big ::= big::(big.attlist Inline.model) ;
dd ::= dd::(dd.attlist Flow.model) ;
--------------------javascript::synytskyy-cordy.bgf--------------------
js_logical_or_logical_and_expn ::= "||" js_logical_and_expn ;
js_subscripts ::= "[" js_expn "]" ;
js_label ::= id ":" ;
js_conditional_clause ::= "?" js_assignment_expn ":" js_assignment_expn ;
js_bitwise_or_bitwise_xor_expn ::= "|" js_bitwise_xor_expn ;
js_shift_op_additive_expn ::= js_shift_op js_additive_expn ;
js_statement ::= (js_compound_statement ";"?) | (js_expression_statement ";"?) | (js_if_statement ";"?) | (js_for_statement ";"?) | (js_while_statement ";"?) | (js_break_statement ";"?) | (js_continue_statement ";"?) | (js_return_statement ";"?) | (js_with_statement ";"?) | (js_switch_statement ";"?) | (js_do_statement ";"?) | (js_try_catch_statement ";"?) | (js_throw_statement ";"?) | (js_debugger_statement ";"?) | js_empty_statement ;
js_do_statement ::= "do" js_statement "while" "(" js_expn ")" ;
js_try_catch_statement ::= "try" js_compound_statement js_catch_clause? js_finally_clause? ;
assign_js_conditional_expn ::= js_assignment_op js_conditional_expn ;
js_variable_description ::= id js_variable_initialization? ;
js_declaration_or_statement ::= (js_declaration NL) | (js_label? js_statement NL) | (comment NL) ;
js_variable_declaration ::= "var" {js_variable_description ","}* ;
js_with_statement ::= "with" "(" js_expn ")" js_statement ;
js_declaration_or_statement_no_nl ::= (js_declaration) | js_statement ;
js_while_statement ::= "while" "(" js_expn ")" js_statement ;
js_case_clause ::= js_case_clause_value NL IN js_subscope EX ;
js_object_literal ::= "{" {js_property_assignment ","}* ","? "}" ;
js_finally_clause ::= NL "finally" js_compound_statement ;
js_throw_statement ::= "throw" js_expn ;
js_arguments ::= "(" {js_assignment_expn ","}* ")" ;
js_bitwise_and_expn ::= js_equality_expn js_bitwise_and_equality_expn* ;
js_switch_statement ::= "switch" "(" js_expn ")" "{" NL js_case_clause* "}" ;
js_case_clause_value ::= ("case" js_expn ":") | ("default" ":") ;
js_bitwise_xor_expn ::= js_bitwise_and_expn js_bitwise_xor_bitwise_and_expn* ;
js_return_statement ::= "return" js_expn? ;
js_array_literal ::= "[" {js_array_element ","}* "]" ;
js_variable_initialization ::= "=" js_assignment_expn ;
js_relational_op_shift_expn ::= js_relational_op js_shift_expn ;
js_bitwise_or_expn ::= js_bitwise_xor_expn js_bitwise_or_bitwise_xor_expn* ;
js_function_declaration ::= NL "function" id "(" {js_formal_parameter ","}* ")" NL "{" NL IN js_subscope EX "}" NL ;
js_shift_expn ::= js_additive_expn js_shift_op_additive_expn* ;
js_multiplicative_expn ::= js_unary_expn js_multiplicative_op_unary_expn* ;
js_primary_expn ::= "this" | "class" | id | js_literal | js_array_literal | js_object_literal | js_function_expn | ("(" js_expn ")") ;
js_conditional_expn ::= js_logical_or_expn js_conditional_clause? ;
js_else_clause ::= "else" js_declaration_or_statement ;
js_expression_statement ::= js_expn ;
js_field_selector ::= "." id ;
js_break_statement ::= "break" id? ;
js_additive_op_multiplicative_expn ::= js_additive_op js_multiplicative_expn ;
js_unary_expn ::= js_unary_op* js_postfix_expn ;
js_postfix_expn ::= js_lefthand_side_expn js_postfix_op? ;
js_assignment_expn ::= js_conditional_expn assign_js_conditional_expn* ;
js_multiplicative_op_unary_expn ::= js_multiplicative_op js_unary_expn ;
js_logical_and_bitwise_or_expn ::= "&&" js_bitwise_or_expn ;
js_bitwise_and_equality_expn ::= "&" js_equality_expn ;
js_catch_clause ::= NL "catch" "(" id ")" js_compound_statement ;
js_logical_or_expn ::= js_logical_and_expn js_logical_or_logical_and_expn* ;
js_equality_expn ::= js_relational_expn js_equality_op_relational_expn* ;
js_assignment_op ::= "=" | "*=" | ("/" SPOFF "=" SPON) | "%=" | "+=" | "-=" | "<<=" | ">>=" | ">>>=" | "&=" | "^=" | "|=" ;
js_equality_op_relational_expn ::= js_equality_op js_relational_expn ;
js_constant_description ::= id js_variable_initialization ;
js_constant_declaration ::= "const" {js_constant_description ","}* ;
js_relational_expn ::= js_shift_expn js_relational_op_shift_expn* ;
js_compound_statement ::= "{" NL IN js_subscope EX "}" ;
js_bitwise_xor_bitwise_and_expn ::= "^" js_bitwise_and_expn ;
js_additive_expn ::= js_multiplicative_expn js_additive_op_multiplicative_expn* ;
js_continue_statement ::= "continue" id? ;
js_lefthand_side_expn ::= "new"? js_member_expn ;
js_logical_and_expn ::= js_bitwise_or_expn js_logical_and_bitwise_or_expn* ;
js_declaration ::= (js_variable_declaration ";"?) | (js_constant_declaration ";"?) | (js_function_declaration ";"?) ;
js_for_statement ::= ("for" "(" {js_declaration_or_statement_no_nl ","}* ";" js_expn? ";" js_expn? ")" js_statement) | ("for" "each"? "(" js_declaration_or_statement_no_nl "in" js_expn ")" js_statement) ;
js_if_statement ::= "if" "(" js_expn ")" js_declaration_or_statement js_else_clause? ;
js_function_expn ::= "function" id? "(" {js_formal_parameter ","}* ")" NL "{" NL IN js_subscope EX "}" ;
js_property_assignment ::= (js_property_name ":" js_expn) | ("get" js_property_name "(" ")" "{" js_subscope "}") | ("set" js_property_name "(" js_property_set_parameter ")" "{" js_subscope "}") ;
js_member_expn ::= js_primary_expn js_selector* ;
--------------------occam::mu-mitchell.bgf--------------------
iteration-statement ::= "while" "(" condition ")" statement "do" statement "while" "(" expression ")" ";" "for" "(" for-init-statement condition? ";" expression? ")" statement ;
logical-or-expression ::= logical-and-expression logical-or-expression "||" logical-and-expression ;
relational-expression ::= shift-expression relational-expression "<" shift-expression relational-expression ">" shift-expression relational-expression "<=" shift-expression relational-expression ">=" shift-expression ;
new-declarator ::= ptr-operator new-declarator? direct-new-declarator ;
type-id-list ::= type-id type-id-list "," type-id ;
type-specifier-seq ::= type-specifier type-specifier-seq? ;
init-declarator-list ::= init-declarator init-declarator-list "," init-declarator ;
exception-declaration ::= type-specifier-seq declarator type-specifier-seq abstract-declarator type-specifier-seq "..." ;
enumerator-definition ::= enumerator enumerator "=" constant-expression ;
try-block ::= "try" compound-statement handler-seq ;
linkage-specification ::= "extern" string-literal "{" declaration-seq? "}" "extern" string-literal declaration ;
declaration ::= block-declaration function-definition template-declaration explicit-instantiation explicit-specialization linkage-specification namespace-definition ;
expression-statement ::= expression? ";" ;
delete-expression ::= "::"? "delete" cast-expression "::"? "delete" "[" "]" cast-expression ;
conversion-function-id ::= "operator" conversion-type-id ;
new-placement ::= "(" expression-list ")" ;
for-init-statement ::= expression-statement simple-declaration ;
unary-expression ::= postfix-expression "++" cast-expression "--" cast-expression unary-operator cast-expression "sizeof" unary-expression "sizeof" "(" type-id ")" new-expression delete-expression ;
template-parameter-list ::= template-parameter template-parameter-list "," template-parameter ;
explicit-instantiation ::= "template" declaration ;
unnamed-namespace-definition ::= "namespace" "{" namespace-body "}" ;
enum-specifier ::= "enum" identifier? "{" enumerator-list? "}" ;
postfix-expression ::= primary-expression postfix-expression "[" expression "]" postfix-expression "(" expression-list? ")" simple-type-specifier "(" expression-list? ")" "typename" "::"? nested-name-specifier identifier "(" expression-list? ")" "typename" "::"? nested-name-specifier "template"? template-id "(" expression-list? ")" postfix-expression "." "template"? id-expression postfix-expression "->" "template"? id-expression postfix-expression "." pseudo-destructor-name postfix-expression "->" pseudo-destructor-name postfix-expression "++" postfix-expression "--" "dynamic_cast" "<" type-id ">" "(" expression ")" "static_cast" "<" type-id ">" "(" expression ")" "reinterpret_cast" "<" type-id ">" "(" expression ")" "const_cast" "<" type-id ">" "(" expression ")" "typeid" "(" expression ")" "typeid" "(" type-id ")" ;
statement ::= labeled-statement expression-statement compound-statement selection-statement iteration-statement jump-statement declaration-statement try-block ;
multiplicative-expression ::= pm-expression multiplicative-expression "*" pm-expression multiplicative-expression "/" pm-expression multiplicative-expression "%" pm-expression ;
selection-statement ::= "if" "(" condition ")" statement "if" "(" condition ")" statement "else" statement "switch" "(" condition ")" statement ;
decl-specifier-seq ::= decl-specifier-seq? decl-specifier ;
qualified-id ::= "::"? nested-name-specifier "template"? unqualified-id "::" identifier "::" operator-function-id "::" template-id ;
base-clause ::= ":" base-specifier-list ;
type-specifier ::= simple-type-specifier class-specifier enum-specifier elaborated-type-specifier cv-qualifier ;
mem-initializer ::= mem-initializer-id "(" expression-list? ")" ;
function-definition ::= decl-specifier-seq? declarator ctor-initializer? function-body decl-specifier-seq? declarator function-try-block ;
pm-expression ::= cast-expression pm-expression ".*" cast-expression pm-expression "->*" cast-expression ;
simple-type-specifier ::= "::"? nested-name-specifier? type-name "::"? nested-name-specifier "template" template-id "char" "wchar_t" "bool" "short" "int" "long" "signed" "unsigned" "float" "double" "void" ;
cast-expression ::= unary-expression "(" type-id ")" cast-expression ;
asm-definition ::= "asm" "(" string-literal ")" ";" ;
new-expression ::= "::"? "new" new-placement? new-type-id new-initializer? "::"? "new" new-placement? "(" type-id ")" new-initializer? ;
initializer ::= "=" initializer-clause "(" expression-list ")" ;
cv-qualifier-seq ::= cv-qualifier cv-qualifier-seq? ;
direct-new-declarator ::= "[" expression "]" direct-new-declarator "[" constant-expression "]" ;
new-type-id ::= type-specifier-seq new-declarator? ;
throw-expression ::= "throw" assignment-expression? ;
simple-declaration ::= decl-specifier-seq? init-declarator-list? ";" ;
mem-initializer-id ::= "::"? nested-name-specifier? class-name identifier ;
handler-seq ::= handler handler-seq? ;
decl-specifier ::= storage-class-specifier type-specifier function-specifier "friend" "typedef" ;
direct-abstract-declarator ::= direct-abstract-declarator? "(" parameter-declaration-clause ")" cv-qualifier-seq? exception-specification? direct-abstract-declarator? "[" constant-expression? "]" "(" abstract-declarator ")" ;
conversion-type-id ::= type-specifier-seq conversion-declarator? ;
storage-class-specifier ::= "auto" "register" "static" "extern" "mutable" ;
type-parameter ::= "class" identifier? "class" identifier? "=" type-id "typename" identifier? "typename" identifier? "=" type-id "template" "<" template-parameter-list ">" "class" identifier? "template" "<" template-parameter-list ">" "class" identifier? "=" id-expression ;
parameter-declaration ::= decl-specifier-seq declarator decl-specifier-seq declarator "=" assignment-expression decl-specifier-seq abstract-declarator? decl-specifier-seq abstract-declarator? "=" assignment-expression ;
extension-namespace-definition ::= "namespace" original-namespace-name "{" namespace-body "}" ;
exclusive-or-expression ::= and-expression exclusive-or-expression "^" and-expression ;
class-or-namespace-name ::= class-name namespace-name ;
cv-qualifier ::= "const" "volatile" ;
pseudo-destructor-name ::= "::"? nested-name-specifier? type-name "::" "~" type-name "::"? nested-name-specifier "template" template-id "::" "~" type-name "::"? nested-name-specifier? "~" type-name ;
template-id ::= template-name "<" template-argument-list? ">" ;
and-expression ::= equality-expression and-expression "&" equality-expression ;
compound-statement ::= "{" statement-seq? "}" ;
equality-expression ::= relational-expression equality-expression "==" relational-expression equality-expression "!=" relational-expression ;
handler ::= "catch" "(" exception-declaration ")" compound-statement ;
base-specifier-list ::= base-specifier base-specifier-list "," base-specifier ;
conversion-declarator ::= ptr-operator conversion-declarator? ;
member-declaration ::= decl-specifier-seq? member-declarator-list? ";" function-definition ";"? "::"? nested-name-specifier "template"? unqualified-id ";" using-declaration template-declaration ;
function-try-block ::= "try" ctor-initializer? function-body handler-seq ;
parameter-declaration-clause ::= parameter-declaration-list? "..."? parameter-declaration-list "," "..." ;
using-directive ::= "using" "namespace" "::"? nested-name-specifier? namespace-name ";" ;
explicit-specialization ::= "template" "<" ">" declaration ;
member-declarator ::= declarator pure-specifier? declarator constant-initializer? identifier? ":" constant-expression ;
shift-expression ::= additive-expression shift-expression "<<" additive-expression shift-expression ">>" additive-expression ;
primary-expression ::= literal "this" "(" expression ")" id-expression ;
base-specifier ::= "::"? nested-name-specifier? class-name "virtual" access-specifier? "::"? nested-name-specifier? class-name access-specifier "virtual"? "::"? nested-name-specifier? class-name ;
class-name ::= identifier template-id ;
conditional-expression ::= logical-or-expression logical-or-expression "?" expression ":" assignment-expression ;
type-name ::= class-name enum-name typedef-name ;
namespace-name ::= original-namespace-name namespace-alias ;
abstract-declarator ::= ptr-operator abstract-declarator? direct-abstract-declarator ;
elaborated-type-specifier ::= class-key "::"? nested-name-specifier? identifier "enum" "::"? nested-name-specifier? identifier "typename" "::"? nested-name-specifier identifier "typename" "::"? nested-name-specifier "template"? template-id ;
initializer-clause ::= assignment-expression "{" initializer-list ","? "}" "{" "}" ;
block-declaration ::= simple-declaration asm-definition namespace-alias-definition using-declaration using-directive ;
constant-initializer ::= "=" constant-expression ;
additive-expression ::= multiplicative-expression additive-expression "+" multiplicative-expression additive-expression "-" multiplicative-expression ;
declarator-id ::= id-expression "::"? nested-name-specifier? type-name ;
parameter-declaration-list ::= parameter-declaration parameter-declaration-list "," parameter-declaration ;
labeled-statement ::= identifier ":" statement "case" constant-expression ":" statement "default" ":" statement ;
new-initializer ::= "(" expression-list? ")" ;
expression-list ::= assignment-expression expression-list "," assignment-expression ;
declarator ::= direct-declarator ptr-operator declarator ;
using-declaration ::= "using" "typename"? "::"? nested-name-specifier unqualified-id ";" "using" "::" unqualified-id ";" ;
template-argument ::= assignment-expression type-id id-expression ;
ctor-initializer ::= ":" mem-initializer-list ;
pure-specifier ::= "=" "0" ;
class-specifier ::= class-head "{" member-specification? "}" ;
initializer-list ::= initializer-clause initializer-list "," initializer-clause ;
template-declaration ::= "export"? "template" "<" template-parameter-list ">" declaration ;
operator ::= "new" | "delete" | ("new" "[]") | ("delete" "[]") | "+" | "-" | "*" | "/" | "%" | "^" | "&" | "|" | "~" | "!" | "=" | "<" | ">" | "+=" | "-=" | "*=" | "/=" | "%=" | "^=" | "&=" | "|=" | "<<" | ">>" | ">>=" | "<<=" | "==" | "!=" | "<=" | ">=" | "&&" | "||" | "++" | "--" | "," | "->*" | "->" | "()" | "[]" ;
ptr-operator ::= "*" cv-qualifier-seq? "&" "::"? nested-name-specifier "*" cv-qualifier-seq? ;
namespace-alias-definition ::= "namespace" identifier "=" qualified-namespace-specifier ";" ;
mem-initializer-list ::= mem-initializer mem-initializer "," mem-initializer-list ;
inclusive-or-expression ::= exclusive-or-expression inclusive-or-expression "|" exclusive-or-expression ;
template-argument-list ::= template-argument template-argument-list "," template-argument ;
qualified-namespace-specifier ::= "::"? nested-name-specifier? namespace-name ;
condition ::= expression type-specifier-seq declarator "=" assignment-expression ;
named-namespace-definition ::= original-namespace-definition extension-namespace-definition ;
assignment-expression ::= conditional-expression logical-or-expression assignment-operator assignment-expression throw-expression ;
expression ::= assignment-expression expression "," assignment-expression ;
template-parameter ::= type-parameter parameter-declaration ;
access-specifier ::= "private" "protected" "public" ;
class-head ::= class-key identifier? base-clause? class-key nested-name-specifier identifier base-clause? class-key nested-name-specifier? template-id base-clause? ;
direct-declarator ::= declarator-id direct-declarator "(" parameter-declaration-clause ")" cv-qualifier-seq? exception-specification? direct-declarator "[" constant-expression? "]" "(" declarator ")" ;
logical-and-expression ::= inclusive-or-expression logical-and-expression "&&" inclusive-or-expression ;
nested-name-specifier ::= class-or-namespace-name "::" nested-name-specifier? class-or-namespace-name "::" "template" nested-name-specifier ;
member-specification ::= member-declaration member-specification? access-specifier ":" member-specification? ;
jump-statement ::= "break" ";" "continue" ";" "return" expression? ";" "goto" identifier ";" ;
type-id ::= type-specifier-seq abstract-declarator? ;
init-declarator ::= declarator initializer? ;
declaration-seq ::= declaration declaration-seq declaration ;
class-key ::= "class" "struct" "union" ;
id-expression ::= unqualified-id qualified-id ;
function-specifier ::= "inline" "virtual" "explicit" ;
operator-function-id ::= "operator" operator ;
member-declarator-list ::= member-declarator member-declarator-list "," member-declarator ;
enumerator-list ::= enumerator-definition enumerator-list "," enumerator-definition ;
exception-specification ::= "throw" "(" type-id-list? ")" ;
namespace-definition ::= named-namespace-definition unnamed-namespace-definition ;
unqualified-id ::= identifier operator-function-id conversion-function-id "~" class-name template-id ;
original-namespace-definition ::= "namespace" identifier "{" namespace-body "}" ;
statement-seq ::= statement statement-seq statement ;
--------------------occam::mu-srour.bgf--------------------
Replicator ::= name::String base::Base count::Count ;
NormalConditional ::= choice::Choice ;
Element ::= name::String subscript::Subscript ;
InputGuard ::= input::Input ;
Type ::= primitiveType::PrimitiveType expression::Expression ;
LiteralOperand ::= integer::Integer ;
ValDeclaration ::= name::String expression::Expression ;
DyadicOperator ::= plus::Boolean minus::Boolean star::Boolean slash::Boolean or::Boolean inverseSlash::Boolean and::Boolean eq::Boolean ne::Boolean lt::Boolean gt::Boolean le::Boolean ge::Boolean ;
NormalAlternation ::= process::Process ;
ProcedureBody ::= name::String process::Process ;
Definition ::= name::String procedureBody::ProcedureBody ;
ExpressionOperand ::= operand::Operand ;
Formal ::= name::String primitiveType::PrimitiveType ;
NormalParallel ::= process::Process ;
MonadicOperator ::= minus::Boolean not::Boolean ;
VariableOPerand ::= element::Element ;
Alternative ::= guard::Guard process::Process ;
Assignment ::= variable::Variable expression::Expression ;
IntDeclaration ::= name::String expression::Expression ;
SimpleExpression ::= operand::Operand ;
DyadicExpression ::= operandRight::Operand dyadicOperator::DyadicOperator ;
Input ::= channel::Channel variable::Variable ;
NormalSequence ::= process::Process ;
Loop ::= boolean::BooleanRef process::Process ;
PrimitiveType ::= isInt::Boolean isChan::Boolean ;
Choice ::= boolean::BooleanRef process::Process ;
Output ::= channel::Channel expression::Expression ;
--------------------occam::srour.bgf--------------------
Sequential ::= process::Process (actions::Action)+ (buckels::Buckel)+ (childrens::Constructor)+ ;
Process ::= declaration::Declaration (constructors::Constructor)+ (parameters::DataType)+ (libraries::Library)+ toChannel::Channel ;
Alternative ::= process::Process (actions::Action)+ (buckels::Buckel)+ (childrens::Constructor)+ ;
If ::= (conditions::Condition)+ (actions::Action)+ ;
Assignment ::= constructor::Constructor while::While if::If ;
Condition ::= elementRight::String elementLeft::String typeCondition::String if::If while::While ;
Declaration ::= name::String process::Process (elements::DataType)+ ;
Constructor ::= Sequential ;
 Constructor ::= Parallel ;
 Constructor ::= Alternative ;
 Constructor ::= process::Process (actions::Action)+ (buckels::Buckel)+ (childrens::Constructor)+ ;
Input ::= constructor::Constructor while::While if::If ;
Parallel ::= process::Process (actions::Action)+ (buckels::Buckel)+ (childrens::Constructor)+ ;
Action ::= Assignment ;
 Action ::= Input ;
 Action ::= Output ;
 Action ::= constructor::Constructor while::While if::If ;
Server ::= name::String toChannel::Channel ;
Channel ::= name::String type::String toServer::Server toProcess::Process ;
While ::= (conditions::Condition)+ (actions::Action)+ ;
Output ::= constructor::Constructor while::While if::If ;
OCCAM_Program ::= (occam_Elements::OCCAM_Element)+ (files::File)+ ;
--------------------odf::opendoc-1.0-manifest.bgf--------------------
encryption-data ::= manifest:encryption-data::(encryption-data-attlist algorithm key-derivation) ;
file-entry ::= manifest:file-entry::(file-entry-attlist encryption-data?) ;
--------------------odf::opendoc-1.0-strict.bgf--------------------
style-footnote-sep-attlist ::= (style:width::length)? (style:rel-width::percent)? (style:color::color)? (style:line-style::lineStyle)? (style:adjustment::("left" | "center" | "right"))? (style:distance-before-sep::length)? (style:distance-after-sep::length)? ;
style-font-face ::= style:font-face::(style-font-face-attlist svg-font-face-src? svg-definition-src?) ;
svg-linearGradient ::= svg:linearGradient::(common-svg-gradient-attlist (svg:x1::(coordinate | percent))? (svg:y1::(coordinate | percent))? (svg:x2::(coordinate | percent))? (svg:y2::(coordinate | percent))? svg-stop*) ;
number-currency-style ::= number:currency-style::(common-data-style-attlist common-auto-reorder-attlist style-text-properties? number-text? ((number-and-text currency-symbol-and-text?) | (currency-symbol-and-text number-and-text?))? style-map*) ;
table-covered-table-cell ::= table:covered-table-cell::(table-table-cell-attlist table-table-cell-content) ;
style-page-layout-properties-content-strict ::= style-page-layout-properties-attlist style-page-layout-properties-elements ;
text-notes-configuration-content ::= text-note-class ;
 text-notes-configuration-content ::= (text:citation-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:citation-body-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:default-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:master-page-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:start-value::nonNegativeInteger)? ;
 text-notes-configuration-content ::= common-num-format-prefix-suffix-attlist common-num-format-attlist? ;
 text-notes-configuration-content ::= (text:start-numbering-at::("document" | "chapter" | "page"))? ;
 text-notes-configuration-content ::= (text:footnotes-position::("text" | "page" | "section" | "document"))? ;
 text-notes-configuration-content ::= (text:note-continuation-notice-forward::string())? ;
 text-notes-configuration-content ::= (text:note-continuation-notice-backward::string())? ;
text-user-index-entry-template ::= text:user-index-entry-template::(text-user-index-entry-template-attrs (text-index-entry-chapter | text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop)*) ;
text-list-item-content ::= text-number? (text-p | text-h | text-list)* ;
table-table-cell-range-source-attlist ::= table:name::string ;
 table-table-cell-range-source-attlist ::= table:last-column-spanned::positiveInteger table:last-row-spanned::positiveInteger ;
style-header-footer-properties-content-strict ::= style-header-footer-properties-attlist style-header-footer-properties-elements ;
number-scientific-number ::= number:scientific-number::(number-scientific-number-attlist common-decimal-places-attlist common-number-attlist) ;
presentation-hide-shape ::= presentation:hide-shape::(common-presentation-effect-attlist presentation-sound?) ;
draw-object ::= draw:object::(draw-object-attlist common-draw-data-attlist | office-document | math-math) ;
common-svg-font-face-xlink-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? ;
presentation-hide-text ::= presentation:hide-text::(common-presentation-effect-attlist presentation-sound?) ;
style-drawing-page-properties-content-strict ::= style-graphic-fill-properties-attlist style-drawing-page-properties-attlist style-drawing-page-properties-elements ;
draw-area-polygon ::= draw:area-polygon::(common-draw-area-attlist svg:x::coordinate svg:y::coordinate svg:width::length svg:height::length common-draw-viewbox-attlist common-draw-points-attlist svg-desc? office-event-listeners?) ;
style-ruby-properties-content-strict ::= style-ruby-properties-attlist style-ruby-properties-elements ;
office-forms ::= (office:forms::(office-forms-attlist (form-form | xforms-model)*))? ;
draw-plugin ::= draw:plugin::(draw-plugin-attlist common-draw-data-attlist draw-param*) ;
office-drawing-content-prelude ::= text-decls table-decls ;
draw-area-rectangle ::= draw:area-rectangle::(common-draw-area-attlist svg:x::coordinate svg:y::coordinate svg:width::length svg:height::length svg-desc? office-event-listeners?) ;
form-file-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist ;
number-date-style ::= number:date-style::(common-data-style-attlist common-auto-reorder-attlist common-format-source-attlist style-text-properties? number-text? (any-date number-text?)+ style-map*) ;
draw-measure ::= draw:measure::(draw-measure-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
table-table-cell-attlist-extra ::= (table:number-columns-spanned::positiveInteger)? (table:number-rows-spanned::positiveInteger)? ;
 table-table-cell-attlist-extra ::= (table:number-matrix-columns-spanned::positiveInteger)? (table:number-matrix-rows-spanned::positiveInteger)? ;
common-text-spreadsheet-shape-attlist ::= (table:end-cell-address::cellAddress)? (table:end-x::coordinate)? (table:end-y::coordinate)? ;
 common-text-spreadsheet-shape-attlist ::= (table:table-background::boolean)? ;
 common-text-spreadsheet-shape-attlist ::= common-text-anchor-attlist ;
draw-control ::= draw:control::(draw-control-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist draw-glue-point*) ;
text-p ::= text:p::(paragraph-attrs paragraph-content*) ;
draw-line-attlist ::= svg:x1::coordinate svg:y1::coordinate ;
 draw-line-attlist ::= svg:x2::coordinate svg:y2::coordinate ;
table-movement ::= table:movement::(common-table-change-attlist table-source-range-address table-target-range-address office-change-info table-dependencies? table-deletions?) ;
svg-stop ::= svg:stop::(svg:offset::(double | percent) (svg:stop-color::color)? (svg:stop-opacity::double)?) ;
style-tab-stop-attlist ::= style:position::nonNegativeLength ;
 style-tab-stop-attlist ::= ((style:type::("left" | "center" | "right"))?) | (style:type::"char" style-tab-stop-char-attlist) ;
 style-tab-stop-attlist ::= (style:leader-type::lineType)? ;
 style-tab-stop-attlist ::= (style:leader-style::lineStyle)? ;
 style-tab-stop-attlist ::= (style:leader-width::lineWidth)? ;
 style-tab-stop-attlist ::= (style:leader-color::("font-color" | color))? ;
 style-tab-stop-attlist ::= (style:leader-text::string)? ;
 style-tab-stop-attlist ::= (style:leader-text-style::styleNameRef)? ;
text-h ::= text:h::(heading-attrs paragraph-attrs text-number? paragraph-content*) ;
text-table-of-content-source ::= text:table-of-content-source::(text-table-of-content-source-attlist text-index-title-template? text-table-of-content-entry-template* text-index-source-styles*) ;
form-hidden-attlist ::= form-control-attlist common-value-attlist ;
text-index-entry-tab-stop-attrs ::= (style:leader-char::character)? ;
 text-index-entry-tab-stop-attrs ::= (style:type::"right") | (style:type::"left" style:position::length) ;
table-source-cell-range ::= table:source-cell-range::(table-source-cell-range-attlist table-filter?) ;
office-document-settings ::= office:document-settings::(office-document-common-attrs office-settings) ;
style-columns ::= (style:columns::(style-columns-attlist style-column-sep? style-column*))? ;
dr3d-sphere ::= dr3d:sphere::(dr3d-sphere-attlist common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-dr3d-transform-attlist) ;
number-time-style ::= number:time-style::(number-time-style-attlist common-data-style-attlist common-format-source-attlist style-text-properties? number-text? (any-time number-text?)+ style-map*) ;
text-table-index-source ::= text:table-index-source::(text-illustration-index-source-attrs text-index-title-template? text-table-index-entry-template?) ;
office-automatic-styles ::= (office:automatic-styles::(styles style-page-layout*))? ;
animation-element ::= anim:animate::(common-anim-target-attlist common-anim-named-target-attlist common-anim-values-attlist common-anim-spline-mode-attlist common-spline-anim-value-attlist common-repeat-timing-attlist common-fill-timing-attlist common-anim-add-accum-attlist) ;
 animation-element ::= anim:set::(common-anim-target-attlist common-anim-named-target-attlist common-anim-set-values-attlist common-fill-timing-attlist common-anim-add-accum-attlist) ;
 animation-element ::= anim:animateMotion::(anim-animate-motion-attlist common-anim-target-attlist common-anim-named-target-attlist common-anim-add-accum-attlist common-anim-values-attlist common-fill-timing-attlist common-spline-anim-value-attlist) ;
 animation-element ::= anim:animateColor::(common-anim-target-attlist common-anim-named-target-attlist common-anim-add-accum-attlist common-anim-values-attlist common-anim-spline-mode-attlist common-spline-anim-value-attlist anim-animate-color-attlist common-fill-timing-attlist) ;
 animation-element ::= anim:animateTransform::(common-anim-target-attlist common-anim-named-target-attlist common-anim-add-accum-attlist common-anim-values-attlist anim-animate-transform-attlist common-fill-timing-attlist) ;
 animation-element ::= anim:transitionFilter::(common-anim-target-attlist common-anim-add-accum-attlist common-anim-values-attlist common-anim-spline-mode-attlist anim-transition-filter-attlist common-fill-timing-attlist) ;
 animation-element ::= anim:par::(common-anim-attlist common-timing-attlist common-endsync-timing-attlist animation-element*) ;
 animation-element ::= anim:seq::(common-anim-attlist common-endsync-timing-attlist common-timing-attlist) ;
 animation-element ::= anim:iterate::(common-anim-attlist anin-iterate-attlist common-timing-attlist common-endsync-timing-attlist animation-element*) ;
 animation-element ::= anim:audio::(common-anim-attlist anim-audio-attlist common-basic-timing-attlist) ;
 animation-element ::= anim:command::(common-anim-attlist anim-command-attlist common-begin-end-timing-attlist common-anim-target-attlist (anim:param::(anim:name::string() anim:value::string()))*) ;
text-dde-connection-decl ::= text:dde-connection-decl::(text-dde-connection-decl-attlist common-dde-connection-decl-attlist) ;
draw-polygon ::= draw:polygon::(common-draw-points-attlist common-draw-position-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
anyAttListOrElements ::= string()* anyElements ;
common-numeric-control-attlist ::= form-control-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-convert-empty-attlist common-data-field-attlist ;
chart-title ::= chart:title::(chart-title-attlist text-p?) ;
table-data-pilot-group ::= table:data-pilot-group::(table-data-pilot-group-attlist table-data-pilot-group-member+) ;
draw-frame ::= draw:frame::(common-draw-shape-with-text-and-styles-attlist common-draw-position-attlist common-draw-rel-size-attlist presentation-shape-attlist draw-frame-attlist (draw-text-box | draw-image | draw-object | draw-object-ole | draw-applet | draw-floating-frame | draw-plugin)* office-event-listeners? draw-glue-point* draw-image-map? svg-desc? (draw-contour-polygon | draw-contour-path)?) ;
form-radio-attlist ::= form-control-attlist current-selected common-disabled-attlist label common-printable-attlist selected common-tab-attlist common-title-attlist common-value-attlist common-data-field-attlist common-form-visual-effect-attlist common-form-relative-image-position-attlist ;
dr3d-cube ::= dr3d:cube::(dr3d-cube-attlist common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-dr3d-transform-attlist) ;
common-form-control-content ::= form-properties? office-event-listeners? ;
form-grid-attlist ::= form-control-attlist common-disabled-attlist common-printable-attlist common-tab-attlist common-title-attlist ;
form-option ::= form:option::(form-option-attlist string()) ;
table-iteration ::= table:iteration::((table:status::("enable" | "disable"))? (table:steps::positiveInteger)? (table:maximum-difference::double)?) ;
presentation-event-listener ::= presentation:event-listener::(presentation-event-listener-attlist presentation-sound?) ;
draw-gradient ::= draw:gradient::(common-draw-gradient-attlist draw-gradient-attlist) ;
text-user-index-source ::= text:user-index-source::(text-user-index-source-attr text-index-title-template? text-user-index-entry-template* text-index-source-styles*) ;
text-index-entry-chapter ::= text:index-entry-chapter::((text:style-name::styleNameRef)? text-index-entry-chapter-attrs) ;
draw-text-box ::= draw:text-box::(draw-text-box-attlist text-content*) ;
draw-image ::= draw:image::(draw-image-attlist common-draw-data-attlist | office-binary-data draw-text) ;
table-data-pilot-field-reference-attlist ::= table:field-name::string ;
 table-data-pilot-field-reference-attlist ::= (table:member-type::"named" table:member-name::string) | (table:member-type::("previous" | "next")) ;
 table-data-pilot-field-reference-attlist ::= table:type::("none" | "member-difference" | "member-percentage" | "member-percentage-difference" | "running-total" | "row-percentage" | "column-percentage" | "total-percentage" | "index") ;
form-option-attlist ::= current-selected selected label common-value-attlist ;
common-break-attlist ::= (fo:break-before::("auto" | "column" | "page"))? (fo:break-after::("auto" | "column" | "page"))? ;
table-table-row-group ::= table:table-row-group::(table-table-row-group-attlist table-rows-and-groups) ;
table-data-pilot-groups ::= table:data-pilot-groups::(table-data-pilot-groups-attlist table-data-pilot-group+) ;
presentation-event-listener-attlist ::= script:event-name::string ;
 presentation-event-listener-attlist ::= presentation:action::("none" | "previous-page" | "next-page" | "first-page" | "last-page" | "hide" | "stop" | "execute" | "show" | "verb" | "fade-out" | "sound") ;
 presentation-event-listener-attlist ::= (presentation:effect::presentationEffects)? ;
 presentation-event-listener-attlist ::= (presentation:direction::presentationEffectDirections)? ;
 presentation-event-listener-attlist ::= (presentation:speed::presentationSpeeds)? ;
 presentation-event-listener-attlist ::= (presentation:start-scale::percent)? ;
 presentation-event-listener-attlist ::= (xlink:href::anyURI)? (xlink:type::"simple")? (xlink:show::"embed")? (xlink:actuate::"onRequest")? ;
 presentation-event-listener-attlist ::= (presentation:verb::nonNegativeInteger)? ;
header-footer-content ::= (text-decls (text-h | text-p | text-list | table-table | text-section | text-table-of-content | text-illustration-index | text-table-index | text-object-index | text-user-index | text-alphabetical-index | text-bibliography | text-index-title | change-marks)*) | (style-region-left? style-region-center? style-region-right?) ;
style-page-layout-properties-attlist ::= (fo:page-width::length)? (fo:page-height::length)? ;
 style-page-layout-properties-attlist ::= common-num-format-attlist? common-num-format-prefix-suffix-attlist ;
 style-page-layout-properties-attlist ::= (style:paper-tray-name::("default" | string))? ;
 style-page-layout-properties-attlist ::= (style:print-orientation::("portrait" | "landscape"))? ;
 style-page-layout-properties-attlist ::= common-horizontal-margin-attlist common-vertical-margin-attlist common-margin-attlist ;
 style-page-layout-properties-attlist ::= common-border-attlist ;
 style-page-layout-properties-attlist ::= common-border-line-width-attlist ;
 style-page-layout-properties-attlist ::= common-padding-attlist ;
 style-page-layout-properties-attlist ::= common-shadow-attlist ;
 style-page-layout-properties-attlist ::= common-background-color-attlist ;
 style-page-layout-properties-attlist ::= (style:register-truth-ref-style-name::styleNameRef)? ;
 style-page-layout-properties-attlist ::= (style:print::(("headers" | "grid" | "annotations" | "objects" | "charts" | "drawings" | "formulas" | "zero-values")*))? ;
 style-page-layout-properties-attlist ::= (style:print-page-order::("ttb" | "ltr"))? ;
 style-page-layout-properties-attlist ::= (style:first-page-number::(positiveInteger | "continue"))? ;
 style-page-layout-properties-attlist ::= (style:scale-to::percent)? (style:scale-to-pages::positiveInteger)? ;
 style-page-layout-properties-attlist ::= (style:table-centering::("horizontal" | "vertical" | "both" | "none"))? ;
 style-page-layout-properties-attlist ::= (style:footnote-max-height::length)? ;
 style-page-layout-properties-attlist ::= common-writing-mode-attlist ;
 style-page-layout-properties-attlist ::= (style:layout-grid-mode::("none" | "line" | "both"))? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-base-height::length)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-ruby-height::length)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-lines::positiveInteger)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-color::color)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-ruby-below::boolean)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-print::boolean)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-display::boolean)? ;
draw-text-box-attlist ::= (draw:chain-next-name::string)? ;
 draw-text-box-attlist ::= (draw:corner-radius::nonNegativeLength)? ;
 draw-text-box-attlist ::= (fo:min-height::(length | percent))? (fo:min-width::(length | percent))? ;
 draw-text-box-attlist ::= (fo:max-height::(length | percent))? (fo:max-width::(length | percent))? ;
table-error-message ::= table:error-message::((table:title::string)? (table:display::boolean)? (table:message-type::("stop" | "warning" | "information"))? text-p*) ;
paragraph-attrs ::= (text:style-name::styleNameRef)? (text:class-names::styleNameRefs)? (text:cond-style-name::styleNameRef)? ;
 paragraph-attrs ::= text-id? ;
table-columns-no-group ::= (table-columns (table-table-header-columns table-columns?)?) | (table-table-header-columns table-columns?) ;
form-fixed-text-attlist ::= form-control-attlist for common-disabled-attlist label common-printable-attlist common-title-attlist ;
 form-fixed-text-attlist ::= (form:multi-line::boolean)? ;
draw-regular-polygon ::= draw:regular-polygon::(draw-regular-polygon-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
common-border-line-width-attlist ::= (style:border-line-width::borderWidths)? (style:border-line-width-top::borderWidths)? (style:border-line-width-bottom::borderWidths)? (style:border-line-width-left::borderWidths)? (style:border-line-width-right::borderWidths)? ;
presentation-decl ::= presentation:header-decl::(presentation-header-decl-attlist string()) ;
 presentation-decl ::= presentation:footer-decl::(presentation-footer-decl-attlist string()) ;
 presentation-decl ::= presentation:date-time-decl::(presentation-date-time-decl-attlist string()) ;
common-draw-size-attlist ::= (svg:width::length)? (svg:height::length)? ;
text-changed-region-content ::= text:insertion::office-change-info ;
 text-changed-region-content ::= text:deletion::(office-change-info text-content*) ;
 text-changed-region-content ::= text:format-change::office-change-info ;
draw-circle ::= draw:circle::(draw-circle-attlist common-draw-circle-ellipse-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
table-table-template ::= table:table-template::(table-table-template-attlist table-first-row? table-last-row? table-first-column? table-last-column? table-body | (table-even-rows table-odd-rows) | (table-even-columns table-odd-columns)) ;
draw-page ::= draw:page::(common-presentation-header-footer-attlist draw-page-attlist office-forms? shape* (presentation-animations | animation-element)? presentation-notes?) ;
dr3d-extrude ::= dr3d:extrude::(common-draw-path-data-attlist common-draw-viewbox-attlist common-draw-id-attlist common-draw-z-index-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-dr3d-transform-attlist) ;
form-password-attlist ::= form-control-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist ;
 form-password-attlist ::= (form:echo-char::character)? ;
presentation-settings ::= (presentation:settings::(presentation-settings-attlist presentation-show*))? ;
style-text-properties-content-strict ::= style-text-properties-attlist style-text-properties-elements ;
text-table-index ::= text:table-index::(sectionAttr text-table-index-source text-index-body) ;
draw-regular-polygon-attlist ::= (draw:concave::"false") | (draw:concave::"true" draw-regular-polygon-sharpness-attlist) ;
 draw-regular-polygon-attlist ::= draw:corners::positiveInteger ;
form-column-attlist ::= common-form-control-attlist label text-style-name ;
table-insertion ::= table:insertion::(table-insertion-attlist common-table-change-attlist office-change-info table-dependencies? table-deletions?) ;
text-outline-level-style-attlist ::= text:level::positiveInteger ;
 text-outline-level-style-attlist ::= (text:style-name::styleNameRef)? ;
 text-outline-level-style-attlist ::= common-num-format-attlist common-num-format-prefix-suffix-attlist ;
 text-outline-level-style-attlist ::= (text:display-levels::positiveInteger)? ;
 text-outline-level-style-attlist ::= (text:start-value::positiveInteger)? ;
common-anim-values-attlist ::= (smil:values::string)? ;
 common-anim-values-attlist ::= (anim:formula::string)? ;
 common-anim-values-attlist ::= common-anim-set-values-attlist (smil:from::string)? (smil:by::string)? ;
office-text-content-prelude ::= office-forms text-tracked-changes text-decls table-decls ;
common-draw-shape-with-styles-attlist ::= common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-draw-transform-attlist common-draw-name-attlist common-text-spreadsheet-shape-attlist ;
number-and-text ::= number-number number-text? ;
config-config-item-map-indexed ::= config:config-item-map-indexed::(config-config-item-map-indexed-attlist config-config-item-map-entry+) ;
presentation-show-shape ::= presentation:show-shape::(common-presentation-effect-attlist presentation-sound?) ;
text-object-index ::= text:object-index::(sectionAttr text-object-index-source text-index-body) ;
table-table-cell ::= table:table-cell::(table-table-cell-attlist table-table-cell-attlist-extra table-table-cell-content) ;
common-draw-style-name-attlist ::= ((draw:style-name::styleNameRef)? (draw:class-names::styleNameRefs)?) | ((presentation:style-name::styleNameRef)? (presentation:class-names::styleNameRefs)?) ;
text-bibliography-configuration-attlist ::= (text:prefix::string)? (text:suffix::string)? ;
 text-bibliography-configuration-attlist ::= (text:numbered-entries::boolean)? ;
 text-bibliography-configuration-attlist ::= (text:sort-by-position::boolean)? (fo:language::languageCode)? (fo:country::countryCode)? (text:sort-algorithm::string)? ;
office-master-styles ::= (office:master-styles::(style-master-page* style-handout-master? draw-layer-set?))? ;
office-chart-content-prelude ::= text-decls table-decls ;
table-movement-cut-off-attlist ::= (table:position::integer) | (table:start-position::integer table:end-position::integer) ;
presentation-dim ::= presentation:dim::(presentation-dim-attlist presentation-sound?) ;
draw-caption-attlist ::= (draw:caption-point-x::coordinate draw:caption-point-y::coordinate)? ;
 draw-caption-attlist ::= (draw:corner-radius::nonNegativeLength)? ;
form-button-attlist ::= form-control-attlist button-type common-disabled-attlist label image-data common-printable-attlist common-tab-attlist target-frame target-location common-title-attlist common-value-attlist common-form-relative-image-position-attlist ;
 form-button-attlist ::= (form:default-button::boolean)? ;
 form-button-attlist ::= (form:toggle::boolean)? ;
 form-button-attlist ::= (form:focus-on-click::boolean)? ;
 form-button-attlist ::= (form:xforms-submission::string)? ;
column-controls ::= form:text::(form-text-attlist common-form-control-content) ;
 column-controls ::= form:textarea::(form-textarea-attlist common-form-control-content text-p*) ;
 column-controls ::= form:formatted-text::(form-formatted-text-attlist common-form-control-content) ;
 column-controls ::= form:number::(form-number-attlist common-numeric-control-attlist common-form-control-content) ;
 column-controls ::= form:date::(form-date-attlist common-numeric-control-attlist common-form-control-content) ;
 column-controls ::= form:combobox::(form-combobox-attlist common-form-control-content form-item*) ;
 column-controls ::= form:listbox::(form-listbox-attlist common-form-control-content form-option*) ;
 column-controls ::= form:checkbox::(form-checkbox-attlist common-form-control-content) ;
text-index-title-template ::= text:index-title-template::((text:style-name::styleNameRef)? string()) ;
dr3d-rotate ::= dr3d:rotate::(common-draw-viewbox-attlist common-draw-path-data-attlist common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-dr3d-transform-attlist) ;
draw-ellipse-attlist ::= (svg:rx::length svg:ry::length)? ;
chart-series ::= chart:series::(chart-series-attlist chart-domain* chart-mean-value? chart-regression-curve? chart-error-indicator? chart-data-point*) ;
form-control-attlist ::= common-form-control-attlist common-control-id-attlist xforms-bind-attlist ;
table-table-column-group ::= table:table-column-group::(table-table-column-group-attlist table-columns-and-groups) ;
table-calculation-settings ::= table:calculation-settings::(table-calculation-setting-attlist table-null-date? table-iteration?) ;
style-style-content ::= style:family::"text" style-text-properties? ;
 style-style-content ::= style:family::"paragraph" style-paragraph-properties? style-text-properties? ;
 style-style-content ::= style:family::"section" style-section-properties? ;
 style-style-content ::= style:family::"ruby" style-ruby-properties? ;
 style-style-content ::= style:family::"table" style-table-properties? ;
 style-style-content ::= style:family::"table-column" style-table-column-properties? ;
 style-style-content ::= style:family::"table-row" style-table-row-properties? ;
 style-style-content ::= style:family::"table-cell" style-table-cell-properties? style-paragraph-properties? style-text-properties? ;
 style-style-content ::= style:family::("graphic" | "presentation") style-graphic-properties? style-paragraph-properties? style-text-properties? ;
 style-style-content ::= style:family::"drawing-page" style-drawing-page-properties? ;
 style-style-content ::= style:family::"chart" style-chart-properties? style-graphic-properties? style-paragraph-properties? style-text-properties? ;
table-change-track-table-cell ::= table:change-track-table-cell::(table-change-track-table-cell-attlist text-p*) ;
presentation-placeholder ::= presentation:placeholder::(presentation:object::presentation-classes svg:x::(coordinate | percent) svg:y::(coordinate | percent) svg:width::(length | percent) svg:height::(length | percent)) ;
text-list ::= text:list::(text-list-attr text-list-header? text-list-item*) ;
common-table-cell-address-attlist ::= table:column::integer table:row::integer table:table::integer ;
style-footer ::= style:footer::(common-style-header-footer-attlist header-footer-content) ;
common-num-format-attlist ::= (style:num-format::("1" | "i" | "I" | string | ε)) | (style:num-format::("a" | "A") style-num-letter-sync-attlist) | ε ;
text-index-entry-tab-stop ::= text:index-entry-tab-stop::((text:style-name::styleNameRef)? text-index-entry-tab-stop-attrs) ;
chart-chart ::= chart:chart::(chart-chart-attlist chart-title? chart-subtitle? chart-footer? chart-legend? chart-plot-area table-table?) ;
office-spreadsheet-attlist ::= (table:structure-protected::boolean)? (table:protection-key::string)? ;
style-chart-properties-content-strict ::= style-chart-properties-attlist style-chart-properties-elements ;
style-header-left ::= style:header-left::(common-style-header-footer-attlist header-footer-content) ;
table-rows-no-group ::= (table-rows (table-table-header-rows table-rows?)?) | (table-table-header-rows table-rows?) ;
chart-subtitle ::= chart:subtitle::(chart-title-attlist text-p?) ;
common-draw-position-attlist ::= (svg:x::coordinate)? (svg:y::coordinate)? ;
common-padding-attlist ::= (fo:padding::nonNegativeLength)? (fo:padding-top::nonNegativeLength)? (fo:padding-bottom::nonNegativeLength)? (fo:padding-left::nonNegativeLength)? (fo:padding-right::nonNegativeLength)? ;
draw-contour-path ::= draw:contour-path::(common-contour-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-path-data-attlist) ;
table-tracked-changes ::= table:tracked-changes::(table-tracked-changes-attlist (table-cell-content-change | table-insertion | table-deletion | table-movement)*) ;
style-table-properties-attlist ::= (style:width::positiveLength)? (style:rel-width::percent)? ;
 style-table-properties-attlist ::= (table:align::("left" | "center" | "right" | "margins"))? ;
 style-table-properties-attlist ::= common-horizontal-margin-attlist ;
 style-table-properties-attlist ::= common-vertical-margin-attlist ;
 style-table-properties-attlist ::= common-margin-attlist ;
 style-table-properties-attlist ::= common-page-number-attlist ;
 style-table-properties-attlist ::= common-break-attlist ;
 style-table-properties-attlist ::= common-background-color-attlist ;
 style-table-properties-attlist ::= common-shadow-attlist ;
 style-table-properties-attlist ::= common-keep-with-next-attlist ;
 style-table-properties-attlist ::= (style:may-break-between-rows::boolean)? ;
 style-table-properties-attlist ::= (table:border-model::("collapsing" | "separating"))? ;
 style-table-properties-attlist ::= common-writing-mode-attlist ;
 style-table-properties-attlist ::= (table:display::boolean)? ;
text-alphabetical-index-source-attrs ::= text-index-scope-attr text-relative-tab-stop-position-attr ;
 text-alphabetical-index-source-attrs ::= (text:ignore-case::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:main-entry-style-name::styleNameRef)? ;
 text-alphabetical-index-source-attrs ::= (text:alphabetical-separators::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:combine-entries::boolean)? (text:combine-entries-with-dash::boolean)? (text:combine-entries-with-pp::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:use-keys-as-entries::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:capitalize-entries::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:comma-separated::boolean)? ;
 text-alphabetical-index-source-attrs ::= (fo:language::languageCode)? ;
 text-alphabetical-index-source-attrs ::= (fo:country::countryCode)? ;
 text-alphabetical-index-source-attrs ::= (text:sort-algorithm::string)? ;
form-form-attlist ::= (xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")?)? ;
 form-form-attlist ::= (office:target-frame::targetFrameName)? ;
 form-form-attlist ::= (form:method::("get" | "post" | string))? ;
 form-form-attlist ::= (form:enctype::string)? ;
 form-form-attlist ::= (form:allow-deletes::boolean)? ;
 form-form-attlist ::= (form:allow-inserts::boolean)? ;
 form-form-attlist ::= (form:allow-updates::boolean)? ;
 form-form-attlist ::= (form:apply-filter::boolean)? ;
 form-form-attlist ::= (form:command-type::("table" | "query" | "command"))? ;
 form-form-attlist ::= (form:command::string())? ;
 form-form-attlist ::= (form:datasource::(anyURI | string))? ;
 form-form-attlist ::= (form:master-fields::string)? ;
 form-form-attlist ::= (form:detail-fields::string)? ;
 form-form-attlist ::= (form:escape-processing::boolean)? ;
 form-form-attlist ::= (form:filter::string)? ;
 form-form-attlist ::= (form:ignore-result::boolean)? ;
 form-form-attlist ::= (form:navigation-mode::navigation)? ;
 form-form-attlist ::= (form:order::string)? ;
 form-form-attlist ::= (form:tab-cycle::tab-cycles)? ;
text-alphabetical-index ::= text:alphabetical-index::(sectionAttr text-alphabetical-index-source text-index-body) ;
style-table-properties-content-strict ::= style-table-properties-attlist style-table-properties-elements ;
office-change-info ::= office:change-info::(dc-creator dc-date text-p*) ;
table-help-message ::= table:help-message::((table:title::string)? (table:display::boolean)? text-p*) ;
paragraph-content ::= string() ;
 paragraph-content ::= text:s::((text:c::nonNegativeInteger)?) ;
 paragraph-content ::= text:tab::text-tab-attr ;
 paragraph-content ::= text:line-break::ε ;
 paragraph-content ::= text:span::((text:style-name::styleNameRef)? (text:class-names::styleNameRefs)? paragraph-content*) ;
 paragraph-content ::= text:a::(text-a-attlist office-event-listeners? paragraph-content*) ;
 paragraph-content ::= (text:bookmark::(text:name::string)) | (text:bookmark-start::(text:name::string)) | (text:bookmark-end::(text:name::string)) ;
 paragraph-content ::= text:reference-mark::(text:name::string) ;
 paragraph-content ::= (text:reference-mark-start::(text:name::string)) | (text:reference-mark-end::(text:name::string)) ;
 paragraph-content ::= text:note::(text-note-class (text:id::string)? text:note-citation::((text:label::string)? string()) text:note-body::(text-content*)) ;
 paragraph-content ::= text:ruby::((text:style-name::styleNameRef)? text:ruby-base::paragraph-content text:ruby-text::((text:style-name::styleNameRef)? string())) ;
 paragraph-content ::= office-annotation ;
 paragraph-content ::= change-marks ;
 paragraph-content ::= shape | draw-a ;
 paragraph-content ::= text:date::(text-date-attlist string()) ;
 paragraph-content ::= text:time::(text-time-attlist string()) ;
 paragraph-content ::= text:page-number::(text-page-number-attlist string()) ;
 paragraph-content ::= text:page-continuation::(text-page-continuation-attlist string()) ;
 paragraph-content ::= text:sender-firstname::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-lastname::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-initials::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-title::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-position::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-email::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-phone-private::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-fax::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-company::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-phone-work::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-street::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-city::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-postal-code::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-country::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-state-or-province::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:author-name::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:author-initials::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:chapter::(text-chapter-attlist string()) ;
 paragraph-content ::= text:file-name::(text-file-name-attlist string()) ;
 paragraph-content ::= text:template-name::(text-template-name-attlist string()) ;
 paragraph-content ::= text:sheet-name::string() ;
 paragraph-content ::= text:variable-set::(common-field-name-attlist common-field-formula-attlist common-value-and-type-attlist common-field-display-value-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:variable-get::(common-field-name-attlist common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:variable-input::(common-field-name-attlist common-field-description-attlist common-value-type-attlist common-field-display-value-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:user-field-get::(common-field-name-attlist common-field-display-value-formula-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:user-field-input::(common-field-name-attlist common-field-description-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:sequence::(common-field-name-attlist common-field-formula-attlist common-field-num-format-attlist text-sequence-ref-name string()) ;
 paragraph-content ::= text:expression::(common-field-formula-attlist common-value-and-type-attlist? common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:text-input::(common-field-description-attlist string()) ;
 paragraph-content ::= text:initial-creator::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:creation-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::dateOrDateTime)? string()) ;
 paragraph-content ::= text:creation-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::timeOrDateTime)? string()) ;
 paragraph-content ::= text:description::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:user-defined::(common-field-fixed-attlist text:name::string common-field-data-style-name-attlist (office:value::double)? (office:date-value::dateOrDateTime)? (office:time-value::duration)? (office:boolean-value::boolean)? (office:string-value::string)? string()) ;
 paragraph-content ::= text:print-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::time)? string()) ;
 paragraph-content ::= text:print-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::date)? string()) ;
 paragraph-content ::= text:printed-by::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:title::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:subject::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:keywords::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:editing-cycles::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:editing-duration::(common-field-fixed-attlist common-field-data-style-name-attlist (text:duration::duration)? string()) ;
 paragraph-content ::= text:modification-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::time)? string()) ;
 paragraph-content ::= text:modification-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::date)? string()) ;
 paragraph-content ::= text:creator::(common-field-fixed-attlist string()) ;
 paragraph-content ::= (text:page-count::(common-field-num-format-attlist string())) | (text:paragraph-count::(common-field-num-format-attlist string())) | (text:word-count::(common-field-num-format-attlist string())) | (text:character-count::(common-field-num-format-attlist string())) | (text:table-count::(common-field-num-format-attlist string())) | (text:image-count::(common-field-num-format-attlist string())) | (text:object-count::(common-field-num-format-attlist string())) ;
 paragraph-content ::= text:database-display::(text-database-display-attlist string()) ;
 paragraph-content ::= text:database-next::text-database-next-attlist ;
 paragraph-content ::= text:database-row-select::text-database-row-select-attlist ;
 paragraph-content ::= text:database-row-number::(common-field-database-table common-field-num-format-attlist (text:value::nonNegativeInteger)? string()) ;
 paragraph-content ::= text:database-name::(common-field-database-table string()) ;
 paragraph-content ::= text:page-variable-set::(text-set-page-variable-attlist string()) ;
 paragraph-content ::= text:page-variable-get::(text-get-page-variable-attlist string()) ;
 paragraph-content ::= text:placeholder::(text-placeholder-attlist string()) ;
 paragraph-content ::= text:conditional-text::(text-conditional-text-attlist string()) ;
 paragraph-content ::= text:hidden-text::(text-hidden-text-attlist string()) ;
 paragraph-content ::= (text:reference-ref::(text-common-ref-content text-ref-content)) | (text:bookmark-ref::(text-common-ref-content text-ref-content)) ;
 paragraph-content ::= text:note-ref::(text-common-ref-content text-note-ref-content text-ref-content) ;
 paragraph-content ::= text:sequence-ref::(text-common-ref-content text-sequence-ref-content) ;
 paragraph-content ::= text:script::((xlink:href::anyURI (xlink:type::"simple")?) | string() (script:language::string)?) ;
 paragraph-content ::= text:execute-macro::((text:name::string)? office-event-listeners? string()) ;
 paragraph-content ::= text:hidden-paragraph::(text-hidden-paragraph-attlist string()) ;
 paragraph-content ::= text:dde-connection::(text:connection-name::string string()) ;
 paragraph-content ::= text:measure::(text:kind::("value" | "unit" | "gap") string()) ;
 paragraph-content ::= text:table-formula::(common-field-formula-attlist common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:toc-mark-start::text-toc-mark-start-attrs ;
 paragraph-content ::= text:toc-mark-end::text-id ;
 paragraph-content ::= text:toc-mark::(text:string-value::string text-outline-level) ;
 paragraph-content ::= text:user-index-mark-start::(text-id text-outline-level text-index-name) ;
 paragraph-content ::= text:user-index-mark-end::(text-id text-outline-level) ;
 paragraph-content ::= text:user-index-mark::(text:string-value::string text-outline-level text-index-name) ;
 paragraph-content ::= text:alphabetical-index-mark-start::(text-id text-alphabetical-index-mark-attrs) ;
 paragraph-content ::= text:alphabetical-index-mark-end::text-id ;
 paragraph-content ::= text:alphabetical-index-mark::(text:string-value::string text-alphabetical-index-mark-attrs) ;
 paragraph-content ::= text:bibliography-mark::(text:bibliography-type::text-bibliography-types ((text:identifier::string) | (text:address::string) | (text:annote::string) | (text:author::string) | (text:booktitle::string) | (text:chapter::string) | (text:edition::string) | (text:editor::string) | (text:howpublished::string) | (text:institution::string) | (text:journal::string) | (text:month::string) | (text:note::string) | (text:number::string) | (text:organizations::string) | (text:pages::string) | (text:publisher::string) | (text:school::string) | (text:series::string) | (text:title::string) | (text:report-type::string) | (text:volume::string) | (text:year::string) | (text:url::string) | (text:custom1::string) | (text:custom2::string) | (text:custom3::string) | (text:custom4::string) | (text:custom5::string) | (text:isbn::string) | (text:issn::string))* string()) ;
 paragraph-content ::= presentation:header::ε ;
 paragraph-content ::= presentation:footer::ε ;
 paragraph-content ::= presentation:date-time::ε ;
number-day ::= number:day::(number-day-attlist common-calendar-attlist) ;
table-data-pilot-sort-info-attlist ::= (table:sort-mode::"data" table:data-field::string) | (table:sort-mode::("none" | "manual" | "name")) ;
 table-data-pilot-sort-info-attlist ::= table:order::("ascending" | "descending") ;
form-frame-attlist ::= form-control-attlist common-disabled-attlist for label common-printable-attlist common-title-attlist ;
form-textarea-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist ;
draw-glue-point-attlist ::= draw:id::nonNegativeInteger ;
 draw-glue-point-attlist ::= svg:x::(distance | percent) svg:y::(distance | percent) ;
 draw-glue-point-attlist ::= draw:align::("top-left" | "top" | "top-right" | "left" | "center" | "right" | "bottom-left" | "bottom-right") ;
table-data-pilot-field-attlist ::= table:source-field-name::string ;
 table-data-pilot-field-attlist ::= (table:orientation::("row" | "column" | "data" | "hidden")) | (table:orientation::"page" table:selected-page::string) ;
 table-data-pilot-field-attlist ::= (table:is-data-layout-field::string)? ;
 table-data-pilot-field-attlist ::= (table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string))? ;
 table-data-pilot-field-attlist ::= (table:used-hierarchy::integer)? ;
office-styles ::= (office:styles::(styles style-default-style* text-outline-style? text-notes-configuration* text-bibliography-configuration? text-linenumbering-configuration? draw-gradient* svg-linearGradient* svg-radialGradient* draw-hatch* draw-fill-image* draw-marker* draw-stroke-dash* draw-opacity* style-presentation-page-layout*))? ;
common-vertical-pos-attlist ::= (style:vertical-pos::("top" | "middle" | "bottom" | "from-top" | "below"))? (svg:y::coordinate)? ;
common-draw-viewbox-attlist ::= svg:viewBox::(integer integer integer integer) ;
style-chart-properties-attlist ::= (chart:scale-text::boolean)? ;
 style-chart-properties-attlist ::= (chart:three-dimensional::boolean)? ;
 style-chart-properties-attlist ::= (chart:deep::boolean)? ;
 style-chart-properties-attlist ::= (chart:symbol-type::"none") | (chart:symbol-type::"automatic") | (chart:symbol-type::"named-symbol" chart:symbol-name::("square" | "diamond" | "arrow-down" | "arrow-up" | "arrow-right" | "arrow-left" | "bow-tie" | "hourglass" | "circle" | "star" | "x" | "plus" | "asterisk" | "horizontal-bar" | "vertical-bar")) | (chart:symbol-type::"image" chart:symbol-image::(xlink:href::anyURI)) | ε ;
 style-chart-properties-attlist ::= (chart:symbol-width::nonNegativeLength)? (chart:symbol-height::nonNegativeLength)? ;
 style-chart-properties-attlist ::= (chart:vertical::boolean)? ;
 style-chart-properties-attlist ::= (chart:connect-bars::boolean)? ;
 style-chart-properties-attlist ::= (chart:gap-width::integer)? (chart:overlap::integer)? ;
 style-chart-properties-attlist ::= (chart:japanese-candle-stick::boolean)? ;
 style-chart-properties-attlist ::= (chart:interpolation::("none" | "cubic-spline" | "b-spline"))? (chart:spline-order::positiveInteger)? (chart:spline-resolution::positiveInteger)? ;
 style-chart-properties-attlist ::= (chart:pie-offset::nonNegativeInteger)? ;
 style-chart-properties-attlist ::= (chart:lines::boolean)? ;
 style-chart-properties-attlist ::= (chart:solid-type::("cuboid" | "cylinder" | "cone" | "pyramid"))? ;
 style-chart-properties-attlist ::= (chart:stacked::boolean)? (chart:percentage::boolean)? ;
 style-chart-properties-attlist ::= (chart:link-data-style-to-source::boolean)? ;
 style-chart-properties-attlist ::= (chart:visible::boolean)? ;
 style-chart-properties-attlist ::= (chart:logarithmic::boolean)? ;
 style-chart-properties-attlist ::= (chart:maximum::double)? (chart:minimum::double)? (chart:origin::double)? (chart:interval-major::double)? (chart:interval-minor::positiveInteger)? ;
 style-chart-properties-attlist ::= (chart:tick-marks-major-inner::boolean)? (chart:tick-marks-major-outer::boolean)? (chart:tick-marks-minor-inner::boolean)? (chart:tick-marks-minor-outer::boolean)? ;
 style-chart-properties-attlist ::= (chart:display-label::boolean)? (chart:text-overlap::boolean)? (text:line-break::boolean)? (chart:label-arrangement::("side-by-side" | "stagger-even" | "stagger-odd"))? ;
 style-chart-properties-attlist ::= common-style-direction-attlist ;
 style-chart-properties-attlist ::= common-rotation-angle-attlist ;
 style-chart-properties-attlist ::= (chart:data-label-number::("none" | "value" | "percentage"))? ;
 style-chart-properties-attlist ::= (chart:data-label-text::boolean)? ;
 style-chart-properties-attlist ::= (chart:data-label-symbol::boolean)? ;
 style-chart-properties-attlist ::= (chart:mean-value::boolean)? ;
 style-chart-properties-attlist ::= (chart:error-category::("none" | "variance" | "standard-deviation" | "percentage" | "error-margin" | "constant"))? ;
 style-chart-properties-attlist ::= (chart:error-percentage::double)? ;
 style-chart-properties-attlist ::= (chart:error-margin::double)? ;
 style-chart-properties-attlist ::= (chart:error-lower-limit::double)? (chart:error-upper-limit::double)? ;
 style-chart-properties-attlist ::= (chart:error-upper-indicator::boolean)? (chart:error-lower-indicator::boolean)? ;
 style-chart-properties-attlist ::= (chart:series-source::("columns" | "rows"))? ;
 style-chart-properties-attlist ::= (chart:regression-type::("none" | "linear" | "logarithmic" | "exponential" | "power"))? ;
table-table ::= table:table::(table-table-attlist table-table-source? office-dde-source? table-scenario? office-forms? table-shapes? table-columns-and-groups table-rows-and-groups) ;
text-linenumbering-configuration ::= text:linenumbering-configuration::(text-linenumbering-configuration-attlist text-linenumbering-separator?) ;
draw-path ::= draw:path::(common-draw-path-data-attlist common-draw-position-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
number-embedded-text ::= number:embedded-text::(number-embedded-text-attlist string()) ;
style-handout-master ::= style:handout-master::(common-presentation-header-footer-attlist style-handout-master-attlist shape*) ;
table-table-cell-content ::= table-cell-range-source? office-annotation? table-detective? text-content* ;
office-document ::= office:document::(office-document-attrs office-document-common-attrs office-meta office-settings office-scripts office-font-face-decls office-styles office-automatic-styles office-master-styles office-body) ;
presentation-show-text ::= presentation:show-text::(common-presentation-effect-attlist presentation-sound?) ;
common-horizontal-margin-attlist ::= (fo:margin-left::(length | percent))? (fo:margin-right::(length | percent))? ;
draw-area-circle ::= draw:area-circle::(common-draw-area-attlist svg:cx::coordinate svg:cy::coordinate svg:r::length svg-desc? office-event-listeners?) ;
text-user-index-source-attr ::= text-index-scope-attr text-relative-tab-stop-position-attr text:index-name::string ;
 text-user-index-source-attr ::= (text:use-index-marks::boolean)? (text:use-graphics::boolean)? (text:use-tables::boolean)? (text:use-floating-frames::boolean)? (text:use-objects::boolean)? ;
 text-user-index-source-attr ::= (text:copy-outline-levels::boolean)? ;
text-illustration-index-entry-content ::= text-illustration-index-entry-template-attrs (text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop)* ;
form-image-attlist ::= form-control-attlist button-type common-disabled-attlist image-data common-printable-attlist common-tab-attlist target-frame target-location common-title-attlist common-value-attlist ;
draw-connector ::= draw:connector::(draw-connector-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
anyElements ::= (string()? anyAttListOrElements string()?)* ;
draw-applet ::= draw:applet::(draw-applet-attlist common-draw-data-attlist? draw-param*) ;
style-master-page ::= style:master-page::(style-master-page-attlist (style-header style-header-left?)? (style-footer style-footer-left?)? office-forms? style-style* shape* presentation-notes?) ;
text-linenumbering-separator ::= text:linenumbering-separator::((text:increment::nonNegativeInteger)? string()) ;
text-index-title ::= text:index-title::(sectionAttr index-content-main*) ;
number-month ::= number:month::(number-month-attlist common-calendar-attlist) ;
text-toc-mark-start-attrs ::= text-id text-outline-level ;
office-script ::= office:script::(office-script-attlist string()? anyElements string()?) ;
presentation-play-attlist ::= draw:shape-id::IDREF (presentation:speed::presentationSpeeds)? ;
svg-radialGradient ::= svg:radialGradient::(common-svg-gradient-attlist (svg:cx::(coordinate | percent))? (svg:cy::(coordinate | percent))? (svg:r::(coordinate | percent))? (svg:fx::(coordinate | percent))? (svg:fy::(coordinate | percent))? svg-stop*) ;
table-cell-range-source ::= table:cell-range-source::(table-table-cell-range-source-attlist table-linked-source-attlist) ;
office-scripts ::= (office:scripts::(office-script* office-event-listeners?))? ;
draw-connector-attlist ::= (draw:type::("standard" | "lines" | "line" | "curve"))? ;
 draw-connector-attlist ::= (svg:x1::coordinate svg:y1::coordinate)? ;
 draw-connector-attlist ::= (draw:start-shape::IDREF)? ;
 draw-connector-attlist ::= (draw:start-glue-point::nonNegativeInteger)? ;
 draw-connector-attlist ::= (svg:x2::coordinate svg:y2::coordinate)? ;
 draw-connector-attlist ::= (draw:end-shape::IDREF)? ;
 draw-connector-attlist ::= (draw:end-glue-point::nonNegativeInteger)? ;
 draw-connector-attlist ::= (draw:line-skew::(length (length length?)?))? ;
common-vertical-margin-attlist ::= (fo:margin-top::(nonNegativeLength | percent))? (fo:margin-bottom::(nonNegativeLength | percent))? ;
table-data-pilot-table ::= table:data-pilot-table::(table-data-pilot-table-attlist (table-database-source-sql | table-database-source-table | table-database-source-query | table-source-service | table-source-cell-range)? table-data-pilot-field+) ;
table-null-date ::= table:null-date::((table:value-type::valueType)? (table:date-value-type::date)?) ;
style-header-footer-properties-attlist ::= (svg:height::length)? (fo:min-height::length)? ;
 style-header-footer-properties-attlist ::= common-horizontal-margin-attlist common-vertical-margin-attlist common-margin-attlist ;
 style-header-footer-properties-attlist ::= common-border-attlist ;
 style-header-footer-properties-attlist ::= common-border-line-width-attlist ;
 style-header-footer-properties-attlist ::= common-padding-attlist ;
 style-header-footer-properties-attlist ::= common-background-color-attlist ;
 style-header-footer-properties-attlist ::= common-shadow-attlist ;
style-font-face-attlist ::= (svg:font-family::string)? (svg:font-style::fontStyle)? (svg:font-variant::fontVariant)? (svg:font-weight::fontWeight)? (svg:font-stretch::("normal" | "ultra-condensed" | "extra-condensed" | "condensed" | "semi-condensed" | "semi-expanded" | "expanded" | "extra-expanded" | "ultra-expanded"))? (svg:font-size::positiveLength)? (svg:unicode-range::string())? (svg:units-per-em::integer)? (svg:panose-1::string())? (svg:stemv::integer)? (svg:stemh::integer)? (svg:slope::integer)? (svg:cap-height::integer)? (svg:x-height::integer)? (svg:accent-height::integer)? (svg:ascent::integer)? (svg:descent::integer)? (svg:widths::string())? (svg:bbox::string())? (svg:ideographic::integer)? (svg:alphabetic::integer)? (svg:mathematical::integer)? (svg:hanging::integer)? (svg:v-ideographic::integer)? (svg:v-alphabetic::integer)? (svg:v-mathematical::integer)? (svg:v-hanging::integer)? (svg:underline-position::integer)? (svg:underline-thickness::integer)? (svg:strikethrough-position::integer)? (svg:strikethrough-thickness::integer)? (svg:overline-position::integer)? (svg:overline-thickness::integer)? ;
 style-font-face-attlist ::= style:name::string ;
 style-font-face-attlist ::= (style:font-adornments::string)? ;
 style-font-face-attlist ::= (style:font-family-generic::fontFamilyGeneric)? ;
 style-font-face-attlist ::= (style:font-pitch::fontPitch)? ;
 style-font-face-attlist ::= (style:font-charset::textEncoding)? ;
draw-stroke-dash-attlist ::= draw:name::styleName ;
 draw-stroke-dash-attlist ::= (draw:display-name::string)? ;
 draw-stroke-dash-attlist ::= (draw:style::("rect" | "round"))? ;
 draw-stroke-dash-attlist ::= (draw:dots1::integer)? (draw:dots1-length::length)? (draw:dots2::integer)? (draw:dots2-length::length)? ;
 draw-stroke-dash-attlist ::= (draw:distance::length)? ;
text-user-index ::= text:user-index::(sectionAttr text-user-index-source text-index-body) ;
table-cell-content-deletion ::= table:cell-content-deletion::((table:id::string)? table-cell-address? table-change-track-table-cell?) ;
config-config-item-map-named ::= config:config-item-map-named::(config-config-item-map-named-attlist config-config-item-map-entry+) ;
table-deletion ::= table:deletion::(table-deletion-attlist common-table-change-attlist office-change-info table-dependencies? table-deletions? table-cut-offs?) ;
form-image-frame-attlist ::= form-control-attlist common-disabled-attlist image-data common-printable-attlist common-readonly-attlist common-title-attlist common-data-field-attlist ;
draw-marker ::= draw:marker::(draw-marker-attlist common-draw-viewbox-attlist common-draw-path-data-attlist) ;
styles ::= style-style* text-list-style* number-number-style* number-currency-style* number-percentage-style* number-date-style* number-time-style* number-boolean-style* number-text-style* ;
office-annotation ::= office:annotation::(office-annotation-attlist draw-caption-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist dc-creator? dc-date? meta-date-string? (text-p | text-list)*) ;
dr3d-scene ::= dr3d:scene::(dr3d-scene-attlist common-draw-position-attlist common-draw-size-attlist common-draw-style-name-attlist common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-text-spreadsheet-shape-attlist common-dr3d-transform-attlist dr3d-light* shapes3d*) ;
style-footer-left ::= style:footer-left::(common-style-header-footer-attlist header-footer-content) ;
draw-line ::= draw:line::(draw-line-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
style-list-level-properties-content-strict ::= style-list-level-properties-attlist style-list-level-properties-elements ;
text-section-source-attr ::= (xlink:href::anyURI (xlink:type::"simple")? (xlink:show::"embed")?)? ;
 text-section-source-attr ::= (text:section-name::string)? ;
 text-section-source-attr ::= (text:filter-name::string)? ;
draw-page-thumbnail ::= draw:page-thumbnail::(draw-page-thumbnail-attlist common-draw-position-attlist common-draw-size-attlist presentation-shape-attlist common-draw-shape-with-styles-attlist) ;
common-field-database-table ::= common-field-database-table-attlist common-field-database-name ;
number-era ::= number:era::(number-era-attlist common-calendar-attlist) ;
table-cell-content-change ::= table:cell-content-change::(common-table-change-attlist table-cell-address office-change-info table-dependencies? table-deletions? table-previous) ;
dr3d-scene-attlist ::= (dr3d:vrp::vector3D)? (dr3d:vpn::vector3D)? (dr3d:vup::vector3D)? ;
 dr3d-scene-attlist ::= (dr3d:projection::("parallel" | "perspective"))? ;
 dr3d-scene-attlist ::= (dr3d:distance::length)? ;
 dr3d-scene-attlist ::= (dr3d:focal-length::length)? ;
 dr3d-scene-attlist ::= (dr3d:shadow-slant::nonNegativeInteger)? ;
 dr3d-scene-attlist ::= (dr3d:shade-mode::("flat" | "phong" | "gouraud" | "draft"))? ;
 dr3d-scene-attlist ::= (dr3d:ambient-color::color)? ;
 dr3d-scene-attlist ::= (dr3d:lighting-mode::boolean)? ;
chart-legend-attlist ::= (chart:legend-position::("start" | "end" | "top" | "bottom") (chart:legend-align::("start" | "center" | "end"))?) | (chart:legend-position::("top-start" | "bottom-start" | "top-end" | "bottom-end")) | ε ;
 chart-legend-attlist ::= common-draw-position-attlist ;
 chart-legend-attlist ::= (style:legend-expansion::("wide" | "high" | "balanced")) | (style:legend-expansion::"custom" style:legend-expansion-aspect-ratio::double) | ε ;
 chart-legend-attlist ::= (chart:style-name::styleNameRef)? ;
draw-rect ::= draw:rect::(draw-rect-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
table-subtotal-rules ::= table:subtotal-rules::(table-subtotal-rules-attlist table-sort-groups? table-subtotal-rule*) ;
text-changed-region ::= text:changed-region::(text-changed-region-attr text-changed-region-content) ;
text-alphabetical-index-source ::= text:alphabetical-index-source::(text-alphabetical-index-source-attrs text-index-title-template? text-alphabetical-index-entry-template*) ;
chart-plot-area ::= chart:plot-area::(chart-plot-area-attlist dr3d-light* chart-axis* chart-series* chart-stock-gain-marker? chart-stock-loss-marker? chart-stock-range-line? chart-wall? chart-floor?) ;
draw-measure-attlist ::= svg:x1::coordinate svg:y1::coordinate ;
 draw-measure-attlist ::= svg:x2::coordinate svg:y2::coordinate ;
style-graphic-properties-attlist ::= (draw:stroke::("none" | "dash" | "solid"))? ;
 style-graphic-properties-attlist ::= (draw:stroke-dash::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:stroke-dash-names::styleNameRefs)? ;
 style-graphic-properties-attlist ::= (svg:stroke-width::length)? ;
 style-graphic-properties-attlist ::= (svg:stroke-color::color)? ;
 style-graphic-properties-attlist ::= (draw:marker-start::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:marker-end::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:marker-start-width::length)? ;
 style-graphic-properties-attlist ::= (draw:marker-end-width::length)? ;
 style-graphic-properties-attlist ::= (draw:marker-start-center::boolean)? ;
 style-graphic-properties-attlist ::= (draw:marker-end-center::boolean)? ;
 style-graphic-properties-attlist ::= (svg:stroke-opacity::(string() | percent))? ;
 style-graphic-properties-attlist ::= (draw:stroke-linejoin::("miter" | "round" | "bevel" | "middle" | "none" | "inherit"))? ;
 style-graphic-properties-attlist ::= (draw:symbol-color::color)? ;
 style-graphic-properties-attlist ::= (text:animation::("none" | "scroll" | "alternate" | "slide"))? ;
 style-graphic-properties-attlist ::= (text:animation-direction::("left" | "right" | "up" | "down"))? ;
 style-graphic-properties-attlist ::= (text:animation-start-inside::boolean)? ;
 style-graphic-properties-attlist ::= (text:animation-stop-inside::boolean)? ;
 style-graphic-properties-attlist ::= (text:animation-repeat::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (text:animation-delay::duration)? ;
 style-graphic-properties-attlist ::= (text:animation-steps::length)? ;
 style-graphic-properties-attlist ::= (draw:auto-grow-width::boolean)? (draw:auto-grow-height::boolean)? ;
 style-graphic-properties-attlist ::= (draw:fit-to-size::boolean)? ;
 style-graphic-properties-attlist ::= (draw:fit-to-contour::boolean)? ;
 style-graphic-properties-attlist ::= (draw:textarea-vertical-align::("top" | "middle" | "bottom" | "justify"))? ;
 style-graphic-properties-attlist ::= (draw:textarea-horizontal-align::("left" | "center" | "right" | "justify"))? ;
 style-graphic-properties-attlist ::= (fo:wrap-option::("no-wrap" | "wrap"))? ;
 style-graphic-properties-attlist ::= (draw:color-mode::("greyscale" | "mono" | "watermark" | "standard"))? ;
 style-graphic-properties-attlist ::= (draw:color-inversion::boolean)? ;
 style-graphic-properties-attlist ::= (draw:luminance::percent)? ;
 style-graphic-properties-attlist ::= (draw:contrast::percent)? ;
 style-graphic-properties-attlist ::= (draw:gamma::percent)? ;
 style-graphic-properties-attlist ::= (draw:red::percent)? ;
 style-graphic-properties-attlist ::= (draw:green::percent)? ;
 style-graphic-properties-attlist ::= (draw:blue::percent)? ;
 style-graphic-properties-attlist ::= (draw:image-opacity::percent)? ;
 style-graphic-properties-attlist ::= (draw:shadow::("visible" | "hidden"))? ;
 style-graphic-properties-attlist ::= (draw:shadow-offset-x::length)? (draw:shadow-offset-y::length)? ;
 style-graphic-properties-attlist ::= (draw:shadow-color::color)? ;
 style-graphic-properties-attlist ::= (draw:shadow-opacity::percent)? ;
 style-graphic-properties-attlist ::= (draw:start-line-spacing-horizontal::distance)? (draw:start-line-spacing-vertical::distance)? ;
 style-graphic-properties-attlist ::= (draw:end-line-spacing-horizontal::distance)? (draw:end-line-spacing-vertical::distance)? ;
 style-graphic-properties-attlist ::= (draw:line-distance::distance)? ;
 style-graphic-properties-attlist ::= (draw:guide-overhang::length)? ;
 style-graphic-properties-attlist ::= (draw:guide-distance::distance)? ;
 style-graphic-properties-attlist ::= (draw:start-guide::length)? ;
 style-graphic-properties-attlist ::= (draw:end-guide::length)? ;
 style-graphic-properties-attlist ::= (draw:placing::("below" | "above"))? ;
 style-graphic-properties-attlist ::= (draw:parallel::boolean)? ;
 style-graphic-properties-attlist ::= (draw:measure-align::("automatic" | "left-outside" | "inside" | "right-outside"))? (draw:measure-vertical-align::("automatic" | "above" | "below" | "center"))? ;
 style-graphic-properties-attlist ::= (draw:unit::("automatic" | "mm" | "cm" | "m" | "km" | "pt" | "pc" | "inch" | "ft" | "mi"))? ;
 style-graphic-properties-attlist ::= (draw:show-unit::boolean)? ;
 style-graphic-properties-attlist ::= (draw:decimal-places::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (draw:caption-type::("straight-line" | "angled-line" | "angled-connector-line"))? ;
 style-graphic-properties-attlist ::= (draw:caption-angle-type::("fixed" | "free"))? ;
 style-graphic-properties-attlist ::= (draw:caption-angle::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (draw:caption-gap::distance)? ;
 style-graphic-properties-attlist ::= (draw:caption-escape-direction::("horizontal" | "vertical" | "auto"))? ;
 style-graphic-properties-attlist ::= (draw:caption-escape::(length | percent))? ;
 style-graphic-properties-attlist ::= (draw:caption-line-length::length)? ;
 style-graphic-properties-attlist ::= (draw:caption-fit-line-length::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:horizontal-segments::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:vertical-segments::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:edge-rounding::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:edge-rounding-mode::("correct" | "attractive"))? ;
 style-graphic-properties-attlist ::= (dr3d:back-scale::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:depth::length)? ;
 style-graphic-properties-attlist ::= (dr3d:backface-culling::("enabled" | "disabled"))? ;
 style-graphic-properties-attlist ::= (dr3d:end-angle::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:close-front::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:close-back::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:lighting-mode::("standard" | "double-sided"))? ;
 style-graphic-properties-attlist ::= (dr3d:normals-kind::("object" | "flat" | "sphere"))? ;
 style-graphic-properties-attlist ::= (dr3d:normals-direction::("normal" | "inverse"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-generation-mode-x::("object" | "parallel" | "sphere"))? (dr3d:texture-generation-mode-y::("object" | "parallel" | "sphere"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-kind::("luminance" | "intesity" | "color"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-filter::("enabled" | "disabled"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-mode::("replace" | "modulate" | "blend"))? ;
 style-graphic-properties-attlist ::= (dr3d:ambient-color::color)? (dr3d:emissive-color::color)? (dr3d:specular-color::color)? (dr3d:diffuse-color::color)? ;
 style-graphic-properties-attlist ::= (dr3d:shininess::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:shadow::("visible" | "hidden"))? ;
 style-graphic-properties-attlist ::= common-draw-rel-size-attlist (fo:min-width::(length | percent))? ;
 style-graphic-properties-attlist ::= (fo:min-height::(length | percent))? ;
 style-graphic-properties-attlist ::= (fo:max-height::(length | percent))? (fo:max-width::(length | percent))? ;
 style-graphic-properties-attlist ::= common-horizontal-margin-attlist ;
 style-graphic-properties-attlist ::= common-vertical-margin-attlist ;
 style-graphic-properties-attlist ::= common-margin-attlist ;
 style-graphic-properties-attlist ::= (style:print-content::boolean)? ;
 style-graphic-properties-attlist ::= (style:protect::("none" | (("content" | "position" | "size")+)))? ;
 style-graphic-properties-attlist ::= (style:horizontal-pos::("left" | "center" | "right" | "from-left" | "inside" | "outside" | "from-inside"))? (svg:x::coordinate)? ;
 style-graphic-properties-attlist ::= (style:horizontal-rel::("page" | "page-content" | "page-start-margin" | "page-end-margin" | "frame" | "frame-content" | "frame-start-margin" | "frame-end-margin" | "paragraph" | "paragraph-content" | "paragraph-start-margin" | "paragraph-end-margin" | "char"))? ;
 style-graphic-properties-attlist ::= common-vertical-pos-attlist ;
 style-graphic-properties-attlist ::= common-vertical-rel-attlist ;
 style-graphic-properties-attlist ::= common-text-anchor-attlist ;
 style-graphic-properties-attlist ::= common-border-attlist ;
 style-graphic-properties-attlist ::= common-border-line-width-attlist ;
 style-graphic-properties-attlist ::= common-padding-attlist ;
 style-graphic-properties-attlist ::= common-shadow-attlist ;
 style-graphic-properties-attlist ::= common-background-color-attlist ;
 style-graphic-properties-attlist ::= (style:editable::boolean)? ;
 style-graphic-properties-attlist ::= (style:wrap::("none" | "left" | "right" | "parallel" | "dynamic" | "run-through" | "biggest"))? ;
 style-graphic-properties-attlist ::= (style:wrap-dynamic-treshold::nonNegativeLength)? ;
 style-graphic-properties-attlist ::= (style:number-wrapped-paragraphs::("no-limit" | positiveInteger))? ;
 style-graphic-properties-attlist ::= (style:wrap-contour::boolean)? ;
 style-graphic-properties-attlist ::= (style:wrap-contour-mode::("full" | "outside"))? ;
 style-graphic-properties-attlist ::= (style:run-through::("foreground" | "background"))? ;
 style-graphic-properties-attlist ::= (style:flow-with-text::boolean)? ;
 style-graphic-properties-attlist ::= (style:overflow-behavior::("clip" | "auto-create-new-frame"))? ;
 style-graphic-properties-attlist ::= (style:mirror::("none" | "vertical" | horizontal-mirror | ("vertical" horizontal-mirror) | (horizontal-mirror "vertical")))? ;
 style-graphic-properties-attlist ::= (fo:clip::string)? ;
 style-graphic-properties-attlist ::= (draw:wrap-influence-on-position::("iterative" | "once-concurrent" | "once-successive"))? ;
 style-graphic-properties-attlist ::= (draw:frame-display-scrollbar::boolean)? ;
 style-graphic-properties-attlist ::= (draw:frame-display-border::boolean)? ;
 style-graphic-properties-attlist ::= (draw:frame-margin-horizontal::nonNegativePixelLength)? (draw:frame-margin-vertical::nonNegativePixelLength)? ;
 style-graphic-properties-attlist ::= (draw:visible-area-left::nonNegativeLength)? (draw:visible-area-top::nonNegativeLength)? (draw:visible-area-width::positiveLength)? (draw:visible-area-height::positiveLength)? ;
 style-graphic-properties-attlist ::= (draw:ole-draw-aspect::nonNegativeInteger)? ;
draw-object-ole ::= draw:object-ole::(draw-object-ole-attlist common-draw-data-attlist | office-binary-data) ;
office-document-styles ::= office:document-styles::(office-document-common-attrs office-font-face-decls office-styles office-automatic-styles office-master-styles) ;
number-percentage-style ::= number:percentage-style::(common-data-style-attlist style-text-properties? number-text? number-and-text? style-map*) ;
office-body-content ::= office:text::(office-text-attlist office-text-content-prelude office-text-content-main* office-text-content-epilogue) ;
 office-body-content ::= office:drawing::(office-drawing-attlist office-drawing-content-prelude office-drawing-content-main office-drawing-content-epilogue) ;
 office-body-content ::= office:presentation::(office-presentation-attlist office-presentation-content-prelude office-presentation-content-main office-presentation-content-epilogue) ;
 office-body-content ::= office:spreadsheet::(office-spreadsheet-attlist office-spreadsheet-content-prelude office-spreadsheet-content-main office-spreadsheet-content-epilogue) ;
 office-body-content ::= office:chart::(office-chart-attlist office-chart-content-prelude office-chart-content-main office-chart-content-epilogue) ;
 office-body-content ::= office:image::(office-image-attlist office-image-content-prelude office-image-content-main office-image-content-epilogue) ;
form-property ::= form:property::(form-property-name form-property-value-and-type-attlist) ;
 form-property ::= form:list-property::(form-property-name form-property-type-and-value-list) ;
draw-contour-polygon ::= draw:contour-polygon::(common-contour-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-points-attlist) ;
table-named-expression-attlist ::= table:name::string table:expression::string (table:base-cell-address::cellAddress)? ;
style-paragraph-properties-content-strict ::= style-paragraph-properties-attlist style-paragraph-properties-elements ;
chart-plot-area-attlist ::= common-draw-position-attlist common-draw-size-attlist ;
 chart-plot-area-attlist ::= (chart:style-name::styleNameRef)? ;
 chart-plot-area-attlist ::= (table:cell-range-address::cellRangeAddress)? ;
 chart-plot-area-attlist ::= (chart:data-source-has-labels::("none" | "row" | "column" | "both"))? ;
 chart-plot-area-attlist ::= dr3d-scene-attlist common-dr3d-transform-attlist ;
script-event-listener-attlist ::= script:event-name::string ;
 script-event-listener-attlist ::= script:language::string ;
 script-event-listener-attlist ::= (script:macro-name::string) | (xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")?) ;
text-variable-decl ::= text:variable-decl::(common-field-name-attlist common-value-type-attlist) ;
draw-fill-image ::= draw:fill-image::(draw-fill-image-attlist xlink:href::anyURI (xlink:type::"simple")? (xlink:show::"embed")? (xlink:actuate::"onLoad")?) ;
borderWidths ::= positiveLength positiveLength positiveLength ;
form-formatted-text-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist ;
 form-formatted-text-attlist ::= (form:max-value::string)? ;
 form-formatted-text-attlist ::= (form:min-value::string)? ;
 form-formatted-text-attlist ::= (form:validation::boolean)? ;
office-document-content ::= office:document-content::(office-document-common-attrs office-scripts office-font-face-decls office-automatic-styles office-body) ;
style-graphic-properties-content-strict ::= style-graphic-properties-attlist style-graphic-fill-properties-attlist style-graphic-properties-elements ;
controls ::= column-controls ;
 controls ::= form:password::(form-password-attlist common-form-control-content) ;
 controls ::= form:file::(form-file-attlist common-form-control-content) ;
 controls ::= form:time::(form-time-attlist common-numeric-control-attlist common-form-control-content) ;
 controls ::= form:fixed-text::(form-fixed-text-attlist common-form-control-content) ;
 controls ::= form:button::(form-button-attlist common-form-control-content) ;
 controls ::= form:image::(form-image-attlist common-form-control-content) ;
 controls ::= form:radio::(form-radio-attlist common-form-control-content) ;
 controls ::= form:frame::(form-frame-attlist common-form-control-content) ;
 controls ::= form:image-frame::(form-image-frame-attlist common-form-control-content) ;
 controls ::= form:hidden::(form-hidden-attlist common-form-control-content) ;
 controls ::= form:grid::(form-grid-attlist common-form-control-content form-column*) ;
 controls ::= form:value-range::(form-value-range-attlist common-form-control-content) ;
 controls ::= form:generic-control::(form-generic-control-attlist common-form-control-content) ;
text-illustration-index ::= text:illustration-index::(sectionAttr text-illustration-index-source text-index-body) ;
office-dde-source ::= office:dde-source::(office-dde-source-attlist common-dde-connection-decl-attlist) ;
text-a-attlist ::= (office:name::string)? ;
 text-a-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? ;
 text-a-attlist ::= (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? ;
 text-a-attlist ::= (text:style-name::styleNameRef)? (text:visited-style-name::styleNameRef)? ;
config-config-item ::= config:config-item::(config-config-item-attlist string()) ;
style-graphic-fill-properties-attlist ::= (draw:fill::("none" | "solid" | "bitmap" | "gradient" | "hatch"))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-color::color)? ;
 style-graphic-fill-properties-attlist ::= (draw:secondary-fill-color::color)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-gradient-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (draw:gradient-step-count::nonNegativeInteger)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-hatch-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-hatch-solid::boolean)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (style:repeat::("no-repeat" | "repeat" | "stretch"))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-width::(length | percent))? (draw:fill-image-height::(length | percent))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-ref-point-x::percent)? (draw:fill-image-ref-point-y::percent)? (draw:fill-image-ref-point::("top-left" | "top" | "top-right" | "left" | "center" | "right" | "bottom-left" | "bottom" | "bottom-right"))? ;
 style-graphic-fill-properties-attlist ::= (draw:tile-repeat-offset::string())? ;
 style-graphic-fill-properties-attlist ::= (draw:opacity::percent)? ;
 style-graphic-fill-properties-attlist ::= (draw:opacity-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (svg:fill-rule::("nonzero" | "evenodd"))? ;
common-draw-rel-size-attlist ::= common-draw-size-attlist (style:rel-width::(percent | "scale" | "scale-min"))? (style:rel-height::(percent | "scale" | "scale-min"))? ;
table-cut-offs ::= table:cut-offs::((table-movement-cut-off+) | (table-insertion-cut-off table-movement-cut-off*)) ;
draw-fill-image-attlist ::= draw:name::styleName ;
 draw-fill-image-attlist ::= (draw:display-name::string)? ;
 draw-fill-image-attlist ::= (svg:width::length)? (svg:height::length)? ;
table-content-validation ::= table:content-validation::(table-validation-attlist table-help-message? (table-error-message | (table-error-macro office-event-listeners?))?) ;
table-data-pilot-level ::= table:data-pilot-level::(table-data-pilot-level-attlist table-data-pilot-subtotals? table-data-pilot-members? table-data-pilot-display-info? table-data-pilot-sort-info? table-data-pilot-layout-info?) ;
style-text-properties-attlist ::= (fo:font-variant::fontVariant)? ;
 style-text-properties-attlist ::= (fo:text-transform::("none" | "lowercase" | "uppercase" | "capitalize"))? ;
 style-text-properties-attlist ::= (fo:color::color)? ;
 style-text-properties-attlist ::= (style:use-window-font-color::boolean)? ;
 style-text-properties-attlist ::= (style:text-outline::boolean)? ;
 style-text-properties-attlist ::= (style:text-line-through-type::lineType)? ;
 style-text-properties-attlist ::= (style:text-line-through-style::lineStyle)? ;
 style-text-properties-attlist ::= (style:text-line-through-width::lineWidth)? ;
 style-text-properties-attlist ::= (style:text-line-through-color::("font-color" | color))? ;
 style-text-properties-attlist ::= (style:text-line-through-text::string)? ;
 style-text-properties-attlist ::= (style:text-line-through-text-style::styleNameRef)? ;
 style-text-properties-attlist ::= (style:text-position::(percent | "super" | "sub" percent?))? ;
 style-text-properties-attlist ::= (style:font-name::string)? (style:font-name-asian::string)? (style:font-name-complex::string)? ;
 style-text-properties-attlist ::= (fo:font-family::string)? (style:font-family-asian::string)? (style:font-family-complex::string)? ;
 style-text-properties-attlist ::= (style:font-family-generic::fontFamilyGeneric)? (style:font-family-generic-asian::fontFamilyGeneric)? (style:font-family-generic-complex::fontFamilyGeneric)? ;
 style-text-properties-attlist ::= (style:font-style-name::string)? (style:font-style-name-asian::string)? (style:font-style-name-complex::string)? ;
 style-text-properties-attlist ::= (style:font-pitch::fontPitch)? (style:font-pitch-asian::fontPitch)? (style:font-pitch-complex::fontPitch)? ;
 style-text-properties-attlist ::= (style:font-charset::textEncoding)? ;
 style-text-properties-attlist ::= (fo:font-size::(positiveLength | percent))? (style:font-size-asian::(positiveLength | percent))? (style:font-size-complex::(positiveLength | percent))? ;
 style-text-properties-attlist ::= (style:font-size-rel::length)? (style:font-size-rel-asian::length)? (style:font-size-rel-complex::length)? ;
 style-text-properties-attlist ::= (style:script-type::("latin" | "asian" | "complex" | "ignore"))? ;
 style-text-properties-attlist ::= (fo:letter-spacing::(length | "normal"))? ;
 style-text-properties-attlist ::= (fo:language::languageCode)? (style:language-asian::languageCode)? (style:language-complex::languageCode)? ;
 style-text-properties-attlist ::= (fo:country::countryCode)? (style:country-asian::countryCode)? (style:country-complex::countryCode)? ;
 style-text-properties-attlist ::= (fo:font-style::fontStyle)? (style:font-style-asian::fontStyle)? (style:font-style-complex::fontStyle)? ;
 style-text-properties-attlist ::= (style:font-relief::("none" | "embossed" | "engraved"))? ;
 style-text-properties-attlist ::= (fo:text-shadow::shadowType)? ;
 style-text-properties-attlist ::= (style:text-underline-type::lineType)? ;
 style-text-properties-attlist ::= (style:text-underline-style::lineStyle)? ;
 style-text-properties-attlist ::= (style:text-underline-width::lineWidth)? ;
 style-text-properties-attlist ::= (style:text-underline-color::("font-color" | color))? ;
 style-text-properties-attlist ::= (fo:font-weight::fontWeight)? (style:font-weight-asian::fontWeight)? (style:font-weight-complex::fontWeight)? ;
 style-text-properties-attlist ::= (style:text-underline-mode::lineMode)? ;
 style-text-properties-attlist ::= (style:text-line-through-mode::lineMode)? ;
 style-text-properties-attlist ::= (style:letter-kerning::boolean)? ;
 style-text-properties-attlist ::= (style:text-blinking::boolean)? ;
 style-text-properties-attlist ::= common-background-color-attlist ;
 style-text-properties-attlist ::= (style:text-combine::("none" | "letters" | "lines"))? ;
 style-text-properties-attlist ::= (style:text-combine-start-char::character)? (style:text-combine-end-char::character)? ;
 style-text-properties-attlist ::= (style:text-emphasize::("none" | ("none" | "accent" | "dot" | "circle" | "disc" "above" | "below")))? ;
 style-text-properties-attlist ::= (style:text-scale::percent)? ;
 style-text-properties-attlist ::= (style:text-rotation-angle::integer)? ;
 style-text-properties-attlist ::= (style:text-rotation-scale::("fixed" | "line-height"))? ;
 style-text-properties-attlist ::= (fo:hyphenate::boolean)? ;
 style-text-properties-attlist ::= (fo:hyphenation-remain-char-count::positiveInteger)? ;
 style-text-properties-attlist ::= (fo:hyphenation-push-char-count::positiveInteger)? ;
 style-text-properties-attlist ::= (text:display::"true") | (text:display::"none") | (text:display::"condition" text:condition::"none") | ε ;
text-object-index-source ::= text:object-index-source::(text-object-index-source-attrs text-index-title-template? text-object-index-entry-template?) ;
style-table-column-properties-attlist ::= (style:column-width::positiveLength)? (style:rel-column-width::relativeLength)? ;
 style-table-column-properties-attlist ::= (style:use-optimal-column-width::boolean)? ;
 style-table-column-properties-attlist ::= common-break-attlist ;
office-meta-data ::= meta:generator::string ;
 office-meta-data ::= dc:title::string ;
 office-meta-data ::= dc:description::string ;
 office-meta-data ::= dc:subject::string ;
 office-meta-data ::= meta:keyword::string ;
 office-meta-data ::= meta:initial-creator::string ;
 office-meta-data ::= dc-creator ;
 office-meta-data ::= meta:printed-by::string ;
 office-meta-data ::= meta:creation-date::dateTime ;
 office-meta-data ::= dc-date ;
 office-meta-data ::= meta:print-date::dateTime ;
 office-meta-data ::= meta:template::(xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? (xlink:title::string)? (meta:date::dateTime)?) ;
 office-meta-data ::= meta:auto-reload::((xlink:type::"simple")? (xlink:show::"replace")? (xlink:actuate::"onLoad")? (xlink:href::anyURI)? (meta:delay::duration)?) ;
 office-meta-data ::= meta:hyperlink-behaviour::((office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))?) ;
 office-meta-data ::= dc:language::language ;
 office-meta-data ::= meta:editing-cycles::nonNegativeInteger ;
 office-meta-data ::= meta:editing-duration::duration ;
 office-meta-data ::= meta:document-statistic::((meta:page-count::nonNegativeInteger)? (meta:table-count::nonNegativeInteger)? (meta:draw-count::nonNegativeInteger)? (meta:image-count::nonNegativeInteger)? (meta:ole-object-count::nonNegativeInteger)? (meta:paragraph-count::nonNegativeInteger)? (meta:word-count::nonNegativeInteger)? (meta:character-count::nonNegativeInteger)? (frame-count::nonNegativeInteger)? (sentence-count::nonNegativeInteger)? (syllable-count::nonNegativeInteger)? (non-whitespace-character-count::nonNegativeInteger)? (meta:row-count::nonNegativeInteger)? (meta:cell-count::nonNegativeInteger)? (meta:object-count::nonNegativeInteger)?) ;
 office-meta-data ::= meta:user-defined::(meta:name::string (meta:value-type::"float" double) | (meta:value-type::"date" dateOrDateTime) | (meta:value-type::"time" duration) | (meta:value-type::"boolean" boolean) | (meta:value-type::"string" string) | string()) ;
draw-enhanced-geometry ::= draw:enhanced-geometry::(draw-enhanced-geometry-attlist draw-equation* draw-handle*) ;
text-bibliography-entry-template ::= text:bibliography-entry-template::(text-bibliography-entry-template-attrs (text-index-entry-span | text-index-entry-tab-stop | text-index-entry-bibliography)*) ;
form-checkbox-attlist ::= form-control-attlist common-disabled-attlist label common-printable-attlist common-tab-attlist common-title-attlist common-value-attlist common-data-field-attlist common-form-visual-effect-attlist common-form-relative-image-position-attlist ;
 form-checkbox-attlist ::= (form:current-state::states)? ;
 form-checkbox-attlist ::= (form:is-tristate::boolean)? ;
 form-checkbox-attlist ::= (form:state::states)? ;
presentation-sound ::= presentation:sound::(presentation-sound-attlist xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? (xlink:show::("new" | "replace"))?) ;
common-draw-circle-ellipse-attlist ::= (svg:cx::coordinate svg:cy::coordinate)? ;
 common-draw-circle-ellipse-attlist ::= (draw:kind::("full" | "section" | "cut" | "arc"))? ;
 common-draw-circle-ellipse-attlist ::= (draw:start-angle::double)? ;
 common-draw-circle-ellipse-attlist ::= (draw:end-angle::double)? ;
table-table-source ::= table:table-source::(table-table-source-attlist table-linked-source-attlist) ;
text-page-number-attlist ::= common-field-num-format-attlist common-field-fixed-attlist ;
 text-page-number-attlist ::= (text:page-adjust::integer)? ;
 text-page-number-attlist ::= (text:select-page::("previous" | "current" | "next"))? ;
style-background-image ::= (style:background-image::(style-background-image-attlist common-draw-data-attlist | office-binary-data | ε))? ;
style-style ::= style:style::(style-style-attlist style-style-content style-map*) ;
dr3d-cube-attlist ::= (dr3d:min-edge::vector3D)? (dr3d:max-edge::vector3D)? ;
form-property-type-and-value-list ::= (office:value-type::"float" (form:list-value::(office:value::double))*) | (office:value-type::"percentage" (form:list-value::(office:value::double))*) | (office:value-type::"currency" (form:list-value::(office:value::double (office:currency::string)?))*) | (office:value-type::"date" (form:list-value::(office:date-value::dateOrDateTime))*) | (office:value-type::"time" (form:list-value::(office:time-value::duration))*) | (office:value-type::"boolean" (form:list-value::(office:boolean-value::boolean))*) | (office:value-type::"string" (form:list-value::(office:string-value::string))*) | (office:value-type::"void") ;
draw-enhanced-geometry-attlist ::= (draw:type::custom-shape-type)? ;
 draw-enhanced-geometry-attlist ::= (svg:viewBox::(integer integer integer integer))? ;
 draw-enhanced-geometry-attlist ::= (draw:mirror-vertical::boolean)? (draw:mirror-horizontal::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-rotate-angle::double)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:concentric-gradient-fill-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-brightness::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-depth::(length double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-diffusion::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-number-of-line-segments::integer)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-light-face::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-harsh::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-harsh::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-level::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-level::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-direction::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-direction::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-metal::boolean)? ;
 draw-enhanced-geometry-attlist ::= (dr3d:shade-mode::("flat" | "phong" | "gouraud" | "draft"))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-rotation-angle::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-rotation-center::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-shininess::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-skew::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-specularity::percent)? ;
 draw-enhanced-geometry-attlist ::= (dr3d:projection::("parallel" | "perspective"))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-viewpoint::point3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-origin::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-color::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:enhanced-path::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:path-stretchpoint-x::double)? (draw:path-stretchpoint-y::double)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-areas::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-points::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-point-type::("none" | "segments" | "rectangle"))? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-point-leaving-directions::string())? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-mode::("normal" | "path" | "shape"))? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-scale::("path" | "shape"))? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-same-letter-heights::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:modifiers::string)? ;
style-presentation-page-layout ::= style:presentation-page-layout::(style:name::styleName (style:display-name::string)? presentation-placeholder*) ;
draw-floating-frame ::= draw:floating-frame::(draw-floating-frame-attlist common-draw-data-attlist) ;
text-alphabetical-index-auto-mark-file ::= text:alphabetical-index-auto-mark-file::(xlink:href::anyURI (xlink:type::"simple")?) ;
draw-gradient-attlist ::= (draw:start-color::color)? (draw:end-color::color)? ;
 draw-gradient-attlist ::= (draw:start-intensity::percent)? (draw:end-intensity::percent)? ;
style-background-image-attlist ::= (style:repeat::("no-repeat" | "repeat" | "stretch"))? ;
 style-background-image-attlist ::= (style:position::("left" | "center" | "right" | "top" | "bottom" | (horiBackPos vertBackPos) | (vertBackPos horiBackPos)))? ;
 style-background-image-attlist ::= (style:filter-name::string)? ;
 style-background-image-attlist ::= (draw:opacity::percent)? ;
form-text-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist ;
draw-opacity ::= draw:opacity::(common-draw-gradient-attlist draw-opacity-attlist) ;
table-linked-source-attlist ::= (xlink:type::"simple")? (xlink:actuate::"onRequest")? xlink:href::anyURI ;
 table-linked-source-attlist ::= (table:filter-name::string)? ;
 table-linked-source-attlist ::= (table:filter-options::string)? ;
 table-linked-source-attlist ::= (table:refresh-delay::duration)? ;
text-table-of-content ::= text:table-of-content::(sectionAttr text-table-of-content-source text-index-body) ;
text-tracked-changes ::= (text:tracked-changes::(text-tracked-changes-attr text-changed-region*))? ;
form-column ::= form:column::(form-column-attlist column-controls+) ;
text-outline-level-style ::= text:outline-level-style::(text-outline-level-style-attlist style-list-level-properties? style-text-properties?) ;
form-item ::= form:item::(form-item-attlist string()) ;
style-table-column-properties-content-strict ::= style-table-column-properties-attlist style-table-column-properties-elements ;
text-index-source-styles ::= text:index-source-styles::(text:outline-level::positiveInteger text-index-source-style*) ;
text-section-attr ::= sectionAttr ;
 text-section-attr ::= (text:display::("true" | "none")) | (text:display::"condition" text:condition::string) | ε ;
number-day-of-week ::= number:day-of-week::(number-day-of-week-attlist common-calendar-attlist) ;
draw-opacity-attlist ::= (draw:start::percent)? (draw:end::percent)? ;
style-table-row-properties-attlist ::= (style:row-height::positiveLength)? (style:min-row-height::nonNegativeLength)? ;
 style-table-row-properties-attlist ::= (style:use-optimal-row-height::boolean)? ;
 style-table-row-properties-attlist ::= common-background-color-attlist ;
 style-table-row-properties-attlist ::= common-break-attlist ;
 style-table-row-properties-attlist ::= (fo:keep-together::("auto" | "always"))? ;
style-section-properties-content-strict ::= style-section-properties-attlist style-section-properties-elements ;
text-bibliography-configuration ::= text:bibliography-configuration::(text-bibliography-configuration-attlist text-sort-key*) ;
chart-footer ::= chart:footer::(chart-title-attlist text-p?) ;
style-table-row-properties-content-strict ::= style-table-row-properties-attlist style-table-row-properties-elements ;
text-decls ::= (text:variable-decls::(text-variable-decl*))? (text:sequence-decls::(text-sequence-decl*))? (text:user-field-decls::(text-user-field-decl*))? (text:dde-connection-decls::(text-dde-connection-decl*))? text-alphabetical-index-auto-mark-file? ;
table-subtotal-rule ::= table:subtotal-rule::(table-subtotal-rule-attlist table-subtotal-field*) ;
text-list-style ::= text:list-style::(text-list-style-attr text-list-style-content*) ;
common-value-and-type-attlist ::= (office:value-type::"float" office:value::double) | (office:value-type::"percentage" office:value::double) | (office:value-type::"currency" office:value::double (office:currency::string)?) | (office:value-type::"date" office:date-value::dateOrDateTime) | (office:value-type::"time" office:time-value::duration) | (office:value-type::"boolean" office:boolean-value::boolean) | (office:value-type::"string" (office:string-value::string)?) ;
text-time-attlist ::= common-field-fixed-attlist common-field-data-style-name-attlist ;
 text-time-attlist ::= (text:time-value::timeOrDateTime)? ;
 text-time-attlist ::= (text:time-adjust::duration)? ;
common-timing-attlist ::= common-basic-timing-attlist common-restart-timing-attlist common-restart-default-attlist common-fill-timing-attlist common-fill-default-attlist common-time-manip-attlist ;
common-basic-timing-attlist ::= common-begin-end-timing-attlist common-dur-timing-attlist common-repeat-timing-attlist ;
draw-caption ::= draw:caption::(draw-caption-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
office-text-content-main ::= (text-content*) | (text-page-sequence (draw-a | shape)*) ;
table-functions ::= table-named-expressions? table-database-ranges? table-data-pilot-tables? table-consolidation? table-dde-links? ;
form-combobox-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist dropdown common-maxlength-attlist common-printable-attlist common-readonly-attlist size common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist list-source list-source-type ;
 form-combobox-attlist ::= (form:auto-complete::boolean)? ;
table-filter ::= table:filter::(table-filter-attlist table-filter-condition | table-filter-and | table-filter-or) ;
office-presentation-content-prelude ::= text-decls table-decls presentation-decls ;
form-listbox-attlist ::= form-control-attlist common-disabled-attlist dropdown common-printable-attlist size common-tab-attlist common-title-attlist bound-column common-data-field-attlist list-source list-source-type ;
 form-listbox-attlist ::= (form:multiple::boolean)? ;
 form-listbox-attlist ::= (form:xforms-list-source::string)? ;
style-table-cell-properties-attlist ::= (style:vertical-align::("top" | "middle" | "bottom" | "automatic"))? ;
 style-table-cell-properties-attlist ::= (style:text-align-source::("fix" | "value-type"))? ;
 style-table-cell-properties-attlist ::= common-style-direction-attlist ;
 style-table-cell-properties-attlist ::= (style:glyph-orientation-vertical::("auto" | "0"))? ;
 style-table-cell-properties-attlist ::= common-shadow-attlist ;
 style-table-cell-properties-attlist ::= common-background-color-attlist ;
 style-table-cell-properties-attlist ::= common-border-attlist ;
 style-table-cell-properties-attlist ::= (style:diagonal-tl-br::string)? (style:diagonal-tl-br-widths::borderWidths)? (style:diagonal-bl-tr::string)? (style:diagonal-bl-tr-widths::borderWidths)? ;
 style-table-cell-properties-attlist ::= common-border-line-width-attlist ;
 style-table-cell-properties-attlist ::= common-padding-attlist ;
 style-table-cell-properties-attlist ::= (fo:wrap-option::("no-wrap" | "wrap"))? ;
 style-table-cell-properties-attlist ::= common-rotation-angle-attlist ;
 style-table-cell-properties-attlist ::= (style:rotation-align::("none" | "bottom" | "top" | "center"))? ;
 style-table-cell-properties-attlist ::= (style:cell-protect::("none" | "hidden-and-protected" | (("protected" | "formula-hidden")+)))? ;
 style-table-cell-properties-attlist ::= (style:print-content::boolean)? ;
 style-table-cell-properties-attlist ::= (style:decimal-places::nonNegativeInteger)? ;
 style-table-cell-properties-attlist ::= (style:repeat-content::boolean)? ;
 style-table-cell-properties-attlist ::= (style:shrink-to-fit::boolean)? ;
draw-ellipse ::= draw:ellipse::(common-draw-circle-ellipse-attlist draw-ellipse-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
text-alphabetical-index-mark-attrs ::= (text:key1::string)? (text:key2::string)? ;
 text-alphabetical-index-mark-attrs ::= (text:string-value-phonetic::string)? (text:key1-phonetic::string)? (text:key2-phonetic::string)? ;
 text-alphabetical-index-mark-attrs ::= (text:main-entry::boolean)? ;
number-currency-symbol ::= number:currency-symbol::(number-currency-symbol-attlist string()) ;
presentation-notes ::= presentation:notes::(common-presentation-header-footer-attlist presentation-notes-attlist shape*) ;
number-number ::= number:number::(number-number-attlist common-decimal-places-attlist common-number-attlist number-embedded-text*) ;
common-repeat-timing-attlist ::= (smil:repeatDur::string smil:repeatCount::nonNegativeInteger)? ;
office-presentation-content-epilogue ::= presentation-settings table-functions ;
table-database-range ::= table:database-range::(table-database-range-attlist (table-database-source-sql | table-database-source-table | table-database-source-query)? table-filter? table-sort? table-subtotal-rules?) ;
form-value-range-attlist ::= form-control-attlist common-disabled-attlist common-printable-attlist common-tab-attlist common-title-attlist common-value-attlist ;
 form-value-range-attlist ::= (form:max-value::string)? ;
 form-value-range-attlist ::= (form:min-value::string)? ;
 form-value-range-attlist ::= (form:step-size::positiveInteger)? ;
 form-value-range-attlist ::= (form:page-step-size::positiveInteger)? ;
 form-value-range-attlist ::= (form:delay-for-repeat::duration)? ;
 form-value-range-attlist ::= (form:orientation::("horizontal" | "vertical"))? ;
table-decls ::= table-calculation-settings? table-content-validations? table-label-ranges? ;
number-boolean-style ::= number:boolean-style::(common-data-style-attlist style-text-properties? number-text? (number-boolean number-text?)? style-map*) ;
config-config-item-set ::= config:config-item-set::(config-config-item-set-attlist config-items) ;
style-table-cell-properties-content-strict ::= style-table-cell-properties-attlist style-table-cell-properties-elements ;
text-bibliography-source ::= text:bibliography-source::(text-index-title-template? text-bibliography-entry-template*) ;
text-section ::= text:section::(text-section-attr text-section-source | text-section-source-dde | ε text-content*) ;
text-sort-key-attlist ::= text:key::("address" | "annote" | "author" | "bibliography-type" | "booktitle" | "chapter" | "custom1" | "custom2" | "custom3" | "custom4" | "custom5" | "edition" | "editor" | "howpublished" | "identifier" | "institution" | "isbn" | "issn" | "journal" | "month" | "note" | "number" | "organizations" | "pages" | "publisher" | "report-type" | "school" | "series" | "title" | "url" | "volume" | "year") (text:sort-ascending::boolean)? ;
number-currency-symbol-attlist ::= (number:language::languageCode)? (number:country::countryCode)? ;
text-list-item ::= text:list-item::(text-list-item-attr text-list-item-content) ;
style-list-level-properties-attlist ::= common-text-align ;
 style-list-level-properties-attlist ::= (text:space-before::nonNegativeLength)? ;
 style-list-level-properties-attlist ::= (text:min-label-width::nonNegativeLength)? ;
 style-list-level-properties-attlist ::= (text:min-label-distance::nonNegativeLength)? ;
 style-list-level-properties-attlist ::= (style:font-name::string)? ;
 style-list-level-properties-attlist ::= (fo:width::positiveLength)? (fo:height::positiveLength)? ;
 style-list-level-properties-attlist ::= common-vertical-rel-attlist common-vertical-pos-attlist ;
text-list-level-style-number-attr ::= (text:style-name::styleNameRef)? ;
 text-list-level-style-number-attr ::= common-num-format-attlist common-num-format-prefix-suffix-attlist ;
 text-list-level-style-number-attr ::= (text:display-levels::positiveInteger)? ;
 text-list-level-style-number-attr ::= (text:start-value::positiveInteger)? ;
number-year ::= number:year::(number-year-attlist common-calendar-attlist) ;
common-border-attlist ::= (fo:border::string)? (fo:border-top::string)? (fo:border-bottom::string)? (fo:border-left::string)? (fo:border-right::string)? ;
text-index-entry-span ::= text:index-entry-span::((text:style-name::styleNameRef)? string()) ;
text-date-attlist ::= common-field-fixed-attlist common-field-data-style-name-attlist ;
 text-date-attlist ::= (text:date-value::dateOrDateTime)? ;
 text-date-attlist ::= (text:date-adjust::duration)? ;
text-user-field-decl ::= text:user-field-decl::(common-field-name-attlist common-field-formula-attlist? common-value-and-type-attlist) ;
table-sort ::= table:sort::(table-sort-attlist table-sort-by+) ;
currency-symbol-and-text ::= number-currency-symbol number-text? ;
table-change-track-table-cell-attlist ::= (table:cell-address::cellAddress)? ;
 table-change-track-table-cell-attlist ::= (table:matrix-covered::boolean)? ;
 table-change-track-table-cell-attlist ::= (table:formula::string)? (table:number-matrix-columns-spanned::positiveInteger)? (table:number-matrix-rows-spanned::positiveInteger)? common-value-and-type-attlist? ;
text-illustration-index-source ::= text:illustration-index-source::(text-illustration-index-source-attrs text-index-title-template? text-illustration-index-entry-template?) ;
number-number-style ::= number:number-style::(common-data-style-attlist style-text-properties? number-text? (any-number number-text?)? style-map*) ;
chart-axis ::= chart:axis::(chart-axis-attlist chart-title? chart-categories? chart-grid*) ;
draw-custom-shape ::= draw:custom-shape::(draw-custom-shape-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text draw-enhanced-geometry?) ;
form-form ::= form:form::(common-form-control-attlist form-form-attlist form-properties? office-event-listeners? (controls | form-form)* form-connection-resource?) ;
common-table-cell-range-address-attlist ::= table:start-column::integer table:start-row::integer table:start-table::integer table:end-column::integer table:end-row::integer table:end-table::integer ;
common-draw-gradient-attlist ::= (draw:name::styleName)? ;
 common-draw-gradient-attlist ::= (draw:display-name::string)? ;
 common-draw-gradient-attlist ::= draw:style::gradient-style ;
 common-draw-gradient-attlist ::= (draw:cx::percent)? (draw:cy::percent)? ;
 common-draw-gradient-attlist ::= (draw:angle::integer)? ;
 common-draw-gradient-attlist ::= (draw:border::percent)? ;
style-header ::= style:header::(common-style-header-footer-attlist header-footer-content) ;
draw-polyline ::= draw:polyline::(common-draw-points-attlist common-draw-position-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
text-numbered-paragraph ::= text:numbered-paragraph::(text-numbered-paragraph-attr text-number? text-p | text-h) ;
number-quarter ::= number:quarter::(number-quarter-attlist common-calendar-attlist) ;
config-config-item-map-entry ::= config:config-item-map-entry::(config-config-item-map-entry-attlist config-items) ;
office-document-meta ::= office:document-meta::(office-document-common-attrs office-meta) ;
text-alphabetical-index-entry-template ::= text:alphabetical-index-entry-template::(text-alphabetical-index-entry-template-attrs (text-index-entry-chapter | text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop)*) ;
common-draw-data-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:show::"embed")? (xlink:actuate::"onLoad")? ;
table-data-pilot-field ::= table:data-pilot-field::(table-data-pilot-field-attlist table-data-pilot-level? table-data-pilot-field-reference? table-data-pilot-groups?) ;
text-table-of-content-entry-template ::= text:table-of-content-entry-template::(text-table-of-content-entry-template-attlist text-table-of-content-children*) ;
draw-g ::= draw:g::(draw-g-attlist common-draw-z-index-attlist common-draw-name-attlist common-draw-id-attlist common-draw-style-name-attlist common-text-spreadsheet-shape-attlist office-event-listeners? draw-glue-point* shape*) ;
table-named-range-attlist ::= table:name::string table:cell-range-address::cellRangeAddress (table:base-cell-address::cellAddress)? (table:range-usable-as::("none" | (("print-range" | "filter" | "repeat-row" | "repeat-column")+)))? ;
table-table-row ::= table:table-row::(table-table-row-attlist (table-table-cell | table-covered-table-cell)+) ;
draw-a ::= draw:a::(draw-a-attlist draw-frame) ;
table-previous ::= table:previous::((table:id::string)? table-change-track-table-cell) ;
common-draw-shape-with-text-and-styles-attlist ::= common-draw-shape-with-styles-attlist common-draw-text-style-name-attlist ;
table-detective ::= table:detective::(table-highlighted-range* table-operation*) ;
number-text-style ::= number:text-style::(common-data-style-attlist style-text-properties? number-text? (number-text-content number-text?)* style-map*) ;
svg-font-face-uri ::= svg:font-face-uri::(common-svg-font-face-xlink-attlist svg-font-face-format*) ;
common-num-format-prefix-suffix-attlist ::= (style:num-prefix::string)? (style:num-suffix::string)? ;
text-list-style-content ::= text:list-level-style-number::(text-list-level-style-attr text-list-level-style-number-attr style-list-level-properties? style-text-properties?) ;
 text-list-style-content ::= text:list-level-style-bullet::(text-list-level-style-attr text-list-level-style-bullet-attr style-list-level-properties? style-text-properties?) ;
 text-list-style-content ::= text:list-level-style-image::(text-list-level-style-attr text-list-level-style-image-attr style-list-level-properties?) ;
common-svg-gradient-attlist ::= (svg:gradientUnits::"objectBoundingBox")? (svg:gradientTransform::string)? (svg:spreadMethod::("pad" | "reflect" | "repeat"))? ;
 common-svg-gradient-attlist ::= draw:name::styleName ;
 common-svg-gradient-attlist ::= (draw:display-name::string)? ;
style-page-layout ::= style:page-layout::(style-page-layout-attlist style-page-layout-properties? style-header-style? style-footer-style?) ;
draw-a-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? ;
 draw-a-attlist ::= (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? ;
 draw-a-attlist ::= (office:name::string)? ;
 draw-a-attlist ::= (office:server-map::boolean)? ;
common-form-relative-image-position-attlist ::= ((form:image-position::"center")?) | (form:image-position::("start" | "end" | "top" | "bottom") (form:image-align::("start" | "center" | "end"))?) ;
office-spreadsheet-content-prelude ::= table-tracked-changes? text-decls table-decls ;
number-fraction ::= number:fraction::(number-fraction-attlist common-number-attlist) ;
common-draw-area-attlist ::= (xlink:href::anyURI)? (xlink:type::"simple")? (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? ;
 common-draw-area-attlist ::= (office:name::string)? ;
 common-draw-area-attlist ::= (draw:nohref::"nohref")? ;
text-bibliography ::= text:bibliography::(sectionAttr text-bibliography-source text-index-body) ;
table-dde-link ::= table:dde-link::(office-dde-source table-table) ;
table-table-attlist ::= (table:name::string)? ;
 table-table-attlist ::= (table:style-name::styleNameRef)? ;
 table-table-attlist ::= (table:protected::boolean)? (table:protection-key::string())? ;
 table-table-attlist ::= (table:print::boolean)? ;
 table-table-attlist ::= (table:print-ranges::cellRangeAddressList)? ;
 table-table-attlist ::= (table:is-sub-table::boolean)? ;
--------------------odf::opendoc-1.0.bgf--------------------
style-footnote-sep-attlist ::= (style:width::length)? (style:rel-width::percent)? (style:color::color)? (style:line-style::lineStyle)? (style:adjustment::("left" | "center" | "right"))? (style:distance-before-sep::length)? (style:distance-after-sep::length)? ;
style-font-face ::= style:font-face::(style-font-face-attlist svg-font-face-src? svg-definition-src?) ;
svg-linearGradient ::= svg:linearGradient::(common-svg-gradient-attlist (svg:x1::(coordinate | percent))? (svg:y1::(coordinate | percent))? (svg:x2::(coordinate | percent))? (svg:y2::(coordinate | percent))? svg-stop*) ;
number-currency-style ::= number:currency-style::(common-data-style-attlist common-auto-reorder-attlist style-text-properties? number-text? ((number-and-text currency-symbol-and-text?) | (currency-symbol-and-text number-and-text?))? style-map*) ;
table-covered-table-cell ::= table:covered-table-cell::(table-table-cell-attlist table-table-cell-content) ;
style-page-layout-properties-content-strict ::= style-page-layout-properties-attlist style-page-layout-properties-elements ;
text-notes-configuration-content ::= text-note-class ;
 text-notes-configuration-content ::= (text:citation-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:citation-body-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:default-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:master-page-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:start-value::nonNegativeInteger)? ;
 text-notes-configuration-content ::= common-num-format-prefix-suffix-attlist common-num-format-attlist? ;
 text-notes-configuration-content ::= (text:start-numbering-at::("document" | "chapter" | "page"))? ;
 text-notes-configuration-content ::= (text:footnotes-position::("text" | "page" | "section" | "document"))? ;
 text-notes-configuration-content ::= (text:note-continuation-notice-forward::string())? ;
 text-notes-configuration-content ::= (text:note-continuation-notice-backward::string())? ;
text-user-index-entry-template ::= text:user-index-entry-template::(text-user-index-entry-template-attrs (text-index-entry-chapter | text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop)*) ;
text-list-item-content ::= text-number? (text-p | text-h | text-list)* ;
table-table-cell-range-source-attlist ::= table:name::string ;
 table-table-cell-range-source-attlist ::= table:last-column-spanned::positiveInteger table:last-row-spanned::positiveInteger ;
style-header-footer-properties-content-strict ::= style-header-footer-properties-attlist style-header-footer-properties-elements ;
number-scientific-number ::= number:scientific-number::(number-scientific-number-attlist common-decimal-places-attlist common-number-attlist) ;
presentation-hide-shape ::= presentation:hide-shape::(common-presentation-effect-attlist presentation-sound?) ;
draw-object ::= draw:object::(draw-object-attlist common-draw-data-attlist | office-document | math-math) ;
common-svg-font-face-xlink-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? ;
presentation-hide-text ::= presentation:hide-text::(common-presentation-effect-attlist presentation-sound?) ;
style-drawing-page-properties-content-strict ::= style-graphic-fill-properties-attlist style-drawing-page-properties-attlist style-drawing-page-properties-elements ;
draw-area-polygon ::= draw:area-polygon::(common-draw-area-attlist svg:x::coordinate svg:y::coordinate svg:width::length svg:height::length common-draw-viewbox-attlist common-draw-points-attlist svg-desc? office-event-listeners?) ;
style-ruby-properties-content-strict ::= style-ruby-properties-attlist style-ruby-properties-elements ;
office-forms ::= (office:forms::(office-forms-attlist (form-form | xforms-model)*))? ;
draw-plugin ::= draw:plugin::(draw-plugin-attlist common-draw-data-attlist draw-param*) ;
office-drawing-content-prelude ::= text-decls table-decls ;
draw-area-rectangle ::= draw:area-rectangle::(common-draw-area-attlist svg:x::coordinate svg:y::coordinate svg:width::length svg:height::length svg-desc? office-event-listeners?) ;
form-file-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist ;
number-date-style ::= number:date-style::(common-data-style-attlist common-auto-reorder-attlist common-format-source-attlist style-text-properties? number-text? (any-date number-text?)+ style-map*) ;
draw-measure ::= draw:measure::(draw-measure-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
table-table-cell-attlist-extra ::= (table:number-columns-spanned::positiveInteger)? (table:number-rows-spanned::positiveInteger)? ;
 table-table-cell-attlist-extra ::= (table:number-matrix-columns-spanned::positiveInteger)? (table:number-matrix-rows-spanned::positiveInteger)? ;
common-text-spreadsheet-shape-attlist ::= (table:end-cell-address::cellAddress)? (table:end-x::coordinate)? (table:end-y::coordinate)? ;
 common-text-spreadsheet-shape-attlist ::= (table:table-background::boolean)? ;
 common-text-spreadsheet-shape-attlist ::= common-text-anchor-attlist ;
draw-control ::= draw:control::(draw-control-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist draw-glue-point*) ;
text-p ::= text:p::(paragraph-attrs paragraph-content*) ;
draw-line-attlist ::= svg:x1::coordinate svg:y1::coordinate ;
 draw-line-attlist ::= svg:x2::coordinate svg:y2::coordinate ;
table-movement ::= table:movement::(common-table-change-attlist table-source-range-address table-target-range-address office-change-info table-dependencies? table-deletions?) ;
svg-stop ::= svg:stop::(svg:offset::(double | percent) (svg:stop-color::color)? (svg:stop-opacity::double)?) ;
style-tab-stop-attlist ::= style:position::nonNegativeLength ;
 style-tab-stop-attlist ::= ((style:type::("left" | "center" | "right"))?) | (style:type::"char" style-tab-stop-char-attlist) ;
 style-tab-stop-attlist ::= (style:leader-type::lineType)? ;
 style-tab-stop-attlist ::= (style:leader-style::lineStyle)? ;
 style-tab-stop-attlist ::= (style:leader-width::lineWidth)? ;
 style-tab-stop-attlist ::= (style:leader-color::("font-color" | color))? ;
 style-tab-stop-attlist ::= (style:leader-text::string)? ;
 style-tab-stop-attlist ::= (style:leader-text-style::styleNameRef)? ;
text-h ::= text:h::(heading-attrs paragraph-attrs text-number? paragraph-content*) ;
text-table-of-content-source ::= text:table-of-content-source::(text-table-of-content-source-attlist text-index-title-template? text-table-of-content-entry-template* text-index-source-styles*) ;
form-hidden-attlist ::= form-control-attlist common-value-attlist ;
text-index-entry-tab-stop-attrs ::= (style:leader-char::character)? ;
 text-index-entry-tab-stop-attrs ::= (style:type::"right") | (style:type::"left" style:position::length) ;
table-source-cell-range ::= table:source-cell-range::(table-source-cell-range-attlist table-filter?) ;
office-document-settings ::= office:document-settings::(office-document-common-attrs office-settings) ;
style-columns ::= (style:columns::(style-columns-attlist style-column-sep? style-column*))? ;
dr3d-sphere ::= dr3d:sphere::(dr3d-sphere-attlist common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-dr3d-transform-attlist) ;
number-time-style ::= number:time-style::(number-time-style-attlist common-data-style-attlist common-format-source-attlist style-text-properties? number-text? (any-time number-text?)+ style-map*) ;
text-table-index-source ::= text:table-index-source::(text-illustration-index-source-attrs text-index-title-template? text-table-index-entry-template?) ;
office-automatic-styles ::= (office:automatic-styles::(styles style-page-layout*))? ;
animation-element ::= anim:animate::(common-anim-target-attlist common-anim-named-target-attlist common-anim-values-attlist common-anim-spline-mode-attlist common-spline-anim-value-attlist common-repeat-timing-attlist common-fill-timing-attlist common-anim-add-accum-attlist) ;
 animation-element ::= anim:set::(common-anim-target-attlist common-anim-named-target-attlist common-anim-set-values-attlist common-fill-timing-attlist common-anim-add-accum-attlist) ;
 animation-element ::= anim:animateMotion::(anim-animate-motion-attlist common-anim-target-attlist common-anim-named-target-attlist common-anim-add-accum-attlist common-anim-values-attlist common-fill-timing-attlist common-spline-anim-value-attlist) ;
 animation-element ::= anim:animateColor::(common-anim-target-attlist common-anim-named-target-attlist common-anim-add-accum-attlist common-anim-values-attlist common-anim-spline-mode-attlist common-spline-anim-value-attlist anim-animate-color-attlist common-fill-timing-attlist) ;
 animation-element ::= anim:animateTransform::(common-anim-target-attlist common-anim-named-target-attlist common-anim-add-accum-attlist common-anim-values-attlist anim-animate-transform-attlist common-fill-timing-attlist) ;
 animation-element ::= anim:transitionFilter::(common-anim-target-attlist common-anim-add-accum-attlist common-anim-values-attlist common-anim-spline-mode-attlist anim-transition-filter-attlist common-fill-timing-attlist) ;
 animation-element ::= anim:par::(common-anim-attlist common-timing-attlist common-endsync-timing-attlist animation-element*) ;
 animation-element ::= anim:seq::(common-anim-attlist common-endsync-timing-attlist common-timing-attlist) ;
 animation-element ::= anim:iterate::(common-anim-attlist anin-iterate-attlist common-timing-attlist common-endsync-timing-attlist animation-element*) ;
 animation-element ::= anim:audio::(common-anim-attlist anim-audio-attlist common-basic-timing-attlist) ;
 animation-element ::= anim:command::(common-anim-attlist anim-command-attlist common-begin-end-timing-attlist common-anim-target-attlist (anim:param::(anim:name::string() anim:value::string()))*) ;
text-dde-connection-decl ::= text:dde-connection-decl::(text-dde-connection-decl-attlist common-dde-connection-decl-attlist) ;
draw-polygon ::= draw:polygon::(common-draw-points-attlist common-draw-position-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
anyAttListOrElements ::= string()* anyElements ;
common-numeric-control-attlist ::= form-control-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-convert-empty-attlist common-data-field-attlist ;
chart-title ::= chart:title::(chart-title-attlist text-p?) ;
table-data-pilot-group ::= table:data-pilot-group::(table-data-pilot-group-attlist table-data-pilot-group-member+) ;
draw-frame ::= draw:frame::(common-draw-shape-with-text-and-styles-attlist common-draw-position-attlist common-draw-rel-size-attlist presentation-shape-attlist draw-frame-attlist (draw-text-box | draw-image | draw-object | draw-object-ole | draw-applet | draw-floating-frame | draw-plugin)* office-event-listeners? draw-glue-point* draw-image-map? svg-desc? (draw-contour-polygon | draw-contour-path)?) ;
form-radio-attlist ::= form-control-attlist current-selected common-disabled-attlist label common-printable-attlist selected common-tab-attlist common-title-attlist common-value-attlist common-data-field-attlist common-form-visual-effect-attlist common-form-relative-image-position-attlist ;
dr3d-cube ::= dr3d:cube::(dr3d-cube-attlist common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-dr3d-transform-attlist) ;
common-form-control-content ::= form-properties? office-event-listeners? ;
form-grid-attlist ::= form-control-attlist common-disabled-attlist common-printable-attlist common-tab-attlist common-title-attlist ;
form-option ::= form:option::(form-option-attlist string()) ;
table-iteration ::= table:iteration::((table:status::("enable" | "disable"))? (table:steps::positiveInteger)? (table:maximum-difference::double)?) ;
presentation-event-listener ::= presentation:event-listener::(presentation-event-listener-attlist presentation-sound?) ;
draw-gradient ::= draw:gradient::(common-draw-gradient-attlist draw-gradient-attlist) ;
text-user-index-source ::= text:user-index-source::(text-user-index-source-attr text-index-title-template? text-user-index-entry-template* text-index-source-styles*) ;
text-index-entry-chapter ::= text:index-entry-chapter::((text:style-name::styleNameRef)? text-index-entry-chapter-attrs) ;
draw-text-box ::= draw:text-box::(draw-text-box-attlist text-content*) ;
draw-image ::= draw:image::(draw-image-attlist common-draw-data-attlist | office-binary-data draw-text) ;
table-data-pilot-field-reference-attlist ::= table:field-name::string ;
 table-data-pilot-field-reference-attlist ::= (table:member-type::"named" table:member-name::string) | (table:member-type::("previous" | "next")) ;
 table-data-pilot-field-reference-attlist ::= table:type::("none" | "member-difference" | "member-percentage" | "member-percentage-difference" | "running-total" | "row-percentage" | "column-percentage" | "total-percentage" | "index") ;
form-option-attlist ::= current-selected selected label common-value-attlist ;
common-break-attlist ::= (fo:break-before::("auto" | "column" | "page"))? (fo:break-after::("auto" | "column" | "page"))? ;
table-table-row-group ::= table:table-row-group::(table-table-row-group-attlist table-rows-and-groups) ;
table-data-pilot-groups ::= table:data-pilot-groups::(table-data-pilot-groups-attlist table-data-pilot-group+) ;
presentation-event-listener-attlist ::= script:event-name::string ;
 presentation-event-listener-attlist ::= presentation:action::("none" | "previous-page" | "next-page" | "first-page" | "last-page" | "hide" | "stop" | "execute" | "show" | "verb" | "fade-out" | "sound") ;
 presentation-event-listener-attlist ::= (presentation:effect::presentationEffects)? ;
 presentation-event-listener-attlist ::= (presentation:direction::presentationEffectDirections)? ;
 presentation-event-listener-attlist ::= (presentation:speed::presentationSpeeds)? ;
 presentation-event-listener-attlist ::= (presentation:start-scale::percent)? ;
 presentation-event-listener-attlist ::= (xlink:href::anyURI)? (xlink:type::"simple")? (xlink:show::"embed")? (xlink:actuate::"onRequest")? ;
 presentation-event-listener-attlist ::= (presentation:verb::nonNegativeInteger)? ;
header-footer-content ::= (text-decls (text-h | text-p | text-list | table-table | text-section | text-table-of-content | text-illustration-index | text-table-index | text-object-index | text-user-index | text-alphabetical-index | text-bibliography | text-index-title | change-marks)*) | (style-region-left? style-region-center? style-region-right?) ;
style-page-layout-properties-attlist ::= (fo:page-width::length)? (fo:page-height::length)? ;
 style-page-layout-properties-attlist ::= common-num-format-attlist? common-num-format-prefix-suffix-attlist ;
 style-page-layout-properties-attlist ::= (style:paper-tray-name::("default" | string))? ;
 style-page-layout-properties-attlist ::= (style:print-orientation::("portrait" | "landscape"))? ;
 style-page-layout-properties-attlist ::= common-horizontal-margin-attlist common-vertical-margin-attlist common-margin-attlist ;
 style-page-layout-properties-attlist ::= common-border-attlist ;
 style-page-layout-properties-attlist ::= common-border-line-width-attlist ;
 style-page-layout-properties-attlist ::= common-padding-attlist ;
 style-page-layout-properties-attlist ::= common-shadow-attlist ;
 style-page-layout-properties-attlist ::= common-background-color-attlist ;
 style-page-layout-properties-attlist ::= (style:register-truth-ref-style-name::styleNameRef)? ;
 style-page-layout-properties-attlist ::= (style:print::(("headers" | "grid" | "annotations" | "objects" | "charts" | "drawings" | "formulas" | "zero-values")*))? ;
 style-page-layout-properties-attlist ::= (style:print-page-order::("ttb" | "ltr"))? ;
 style-page-layout-properties-attlist ::= (style:first-page-number::(positiveInteger | "continue"))? ;
 style-page-layout-properties-attlist ::= (style:scale-to::percent)? (style:scale-to-pages::positiveInteger)? ;
 style-page-layout-properties-attlist ::= (style:table-centering::("horizontal" | "vertical" | "both" | "none"))? ;
 style-page-layout-properties-attlist ::= (style:footnote-max-height::length)? ;
 style-page-layout-properties-attlist ::= common-writing-mode-attlist ;
 style-page-layout-properties-attlist ::= (style:layout-grid-mode::("none" | "line" | "both"))? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-base-height::length)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-ruby-height::length)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-lines::positiveInteger)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-color::color)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-ruby-below::boolean)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-print::boolean)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-display::boolean)? ;
draw-text-box-attlist ::= (draw:chain-next-name::string)? ;
 draw-text-box-attlist ::= (draw:corner-radius::nonNegativeLength)? ;
 draw-text-box-attlist ::= (fo:min-height::(length | percent))? (fo:min-width::(length | percent))? ;
 draw-text-box-attlist ::= (fo:max-height::(length | percent))? (fo:max-width::(length | percent))? ;
table-error-message ::= table:error-message::((table:title::string)? (table:display::boolean)? (table:message-type::("stop" | "warning" | "information"))? text-p*) ;
paragraph-attrs ::= (text:style-name::styleNameRef)? (text:class-names::styleNameRefs)? (text:cond-style-name::styleNameRef)? ;
 paragraph-attrs ::= text-id? ;
table-columns-no-group ::= (table-columns (table-table-header-columns table-columns?)?) | (table-table-header-columns table-columns?) ;
form-fixed-text-attlist ::= form-control-attlist for common-disabled-attlist label common-printable-attlist common-title-attlist ;
 form-fixed-text-attlist ::= (form:multi-line::boolean)? ;
draw-regular-polygon ::= draw:regular-polygon::(draw-regular-polygon-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
common-border-line-width-attlist ::= (style:border-line-width::borderWidths)? (style:border-line-width-top::borderWidths)? (style:border-line-width-bottom::borderWidths)? (style:border-line-width-left::borderWidths)? (style:border-line-width-right::borderWidths)? ;
presentation-decl ::= presentation:header-decl::(presentation-header-decl-attlist string()) ;
 presentation-decl ::= presentation:footer-decl::(presentation-footer-decl-attlist string()) ;
 presentation-decl ::= presentation:date-time-decl::(presentation-date-time-decl-attlist string()) ;
common-draw-size-attlist ::= (svg:width::length)? (svg:height::length)? ;
text-changed-region-content ::= text:insertion::office-change-info ;
 text-changed-region-content ::= text:deletion::(office-change-info text-content*) ;
 text-changed-region-content ::= text:format-change::office-change-info ;
draw-circle ::= draw:circle::(draw-circle-attlist common-draw-circle-ellipse-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
table-table-template ::= table:table-template::(table-table-template-attlist table-first-row? table-last-row? table-first-column? table-last-column? table-body | (table-even-rows table-odd-rows) | (table-even-columns table-odd-columns)) ;
draw-page ::= draw:page::(common-presentation-header-footer-attlist draw-page-attlist office-forms? shape* (presentation-animations | animation-element)? presentation-notes?) ;
dr3d-extrude ::= dr3d:extrude::(common-draw-path-data-attlist common-draw-viewbox-attlist common-draw-id-attlist common-draw-z-index-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-dr3d-transform-attlist) ;
form-password-attlist ::= form-control-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist ;
 form-password-attlist ::= (form:echo-char::character)? ;
presentation-settings ::= (presentation:settings::(presentation-settings-attlist presentation-show*))? ;
style-text-properties-content-strict ::= style-text-properties-attlist style-text-properties-elements ;
text-table-index ::= text:table-index::(sectionAttr text-table-index-source text-index-body) ;
draw-regular-polygon-attlist ::= (draw:concave::"false") | (draw:concave::"true" draw-regular-polygon-sharpness-attlist) ;
 draw-regular-polygon-attlist ::= draw:corners::positiveInteger ;
form-column-attlist ::= common-form-control-attlist label text-style-name ;
table-insertion ::= table:insertion::(table-insertion-attlist common-table-change-attlist office-change-info table-dependencies? table-deletions?) ;
text-outline-level-style-attlist ::= text:level::positiveInteger ;
 text-outline-level-style-attlist ::= (text:style-name::styleNameRef)? ;
 text-outline-level-style-attlist ::= common-num-format-attlist common-num-format-prefix-suffix-attlist ;
 text-outline-level-style-attlist ::= (text:display-levels::positiveInteger)? ;
 text-outline-level-style-attlist ::= (text:start-value::positiveInteger)? ;
common-anim-values-attlist ::= (smil:values::string)? ;
 common-anim-values-attlist ::= (anim:formula::string)? ;
 common-anim-values-attlist ::= common-anim-set-values-attlist (smil:from::string)? (smil:by::string)? ;
office-text-content-prelude ::= office-forms text-tracked-changes text-decls table-decls ;
common-draw-shape-with-styles-attlist ::= common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-draw-transform-attlist common-draw-name-attlist common-text-spreadsheet-shape-attlist ;
number-and-text ::= number-number number-text? ;
config-config-item-map-indexed ::= config:config-item-map-indexed::(config-config-item-map-indexed-attlist config-config-item-map-entry+) ;
presentation-show-shape ::= presentation:show-shape::(common-presentation-effect-attlist presentation-sound?) ;
text-object-index ::= text:object-index::(sectionAttr text-object-index-source text-index-body) ;
table-table-cell ::= table:table-cell::(table-table-cell-attlist table-table-cell-attlist-extra table-table-cell-content) ;
common-draw-style-name-attlist ::= ((draw:style-name::styleNameRef)? (draw:class-names::styleNameRefs)?) | ((presentation:style-name::styleNameRef)? (presentation:class-names::styleNameRefs)?) ;
text-bibliography-configuration-attlist ::= (text:prefix::string)? (text:suffix::string)? ;
 text-bibliography-configuration-attlist ::= (text:numbered-entries::boolean)? ;
 text-bibliography-configuration-attlist ::= (text:sort-by-position::boolean)? (fo:language::languageCode)? (fo:country::countryCode)? (text:sort-algorithm::string)? ;
office-master-styles ::= (office:master-styles::(style-master-page* style-handout-master? draw-layer-set?))? ;
office-chart-content-prelude ::= text-decls table-decls ;
table-movement-cut-off-attlist ::= (table:position::integer) | (table:start-position::integer table:end-position::integer) ;
presentation-dim ::= presentation:dim::(presentation-dim-attlist presentation-sound?) ;
draw-caption-attlist ::= (draw:caption-point-x::coordinate draw:caption-point-y::coordinate)? ;
 draw-caption-attlist ::= (draw:corner-radius::nonNegativeLength)? ;
form-button-attlist ::= form-control-attlist button-type common-disabled-attlist label image-data common-printable-attlist common-tab-attlist target-frame target-location common-title-attlist common-value-attlist common-form-relative-image-position-attlist ;
 form-button-attlist ::= (form:default-button::boolean)? ;
 form-button-attlist ::= (form:toggle::boolean)? ;
 form-button-attlist ::= (form:focus-on-click::boolean)? ;
 form-button-attlist ::= (form:xforms-submission::string)? ;
column-controls ::= form:text::(form-text-attlist common-form-control-content) ;
 column-controls ::= form:textarea::(form-textarea-attlist common-form-control-content text-p*) ;
 column-controls ::= form:formatted-text::(form-formatted-text-attlist common-form-control-content) ;
 column-controls ::= form:number::(form-number-attlist common-numeric-control-attlist common-form-control-content) ;
 column-controls ::= form:date::(form-date-attlist common-numeric-control-attlist common-form-control-content) ;
 column-controls ::= form:combobox::(form-combobox-attlist common-form-control-content form-item*) ;
 column-controls ::= form:listbox::(form-listbox-attlist common-form-control-content form-option*) ;
 column-controls ::= form:checkbox::(form-checkbox-attlist common-form-control-content) ;
text-index-title-template ::= text:index-title-template::((text:style-name::styleNameRef)? string()) ;
dr3d-rotate ::= dr3d:rotate::(common-draw-viewbox-attlist common-draw-path-data-attlist common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-dr3d-transform-attlist) ;
draw-ellipse-attlist ::= (svg:rx::length svg:ry::length)? ;
chart-series ::= chart:series::(chart-series-attlist chart-domain* chart-mean-value? chart-regression-curve? chart-error-indicator? chart-data-point*) ;
form-control-attlist ::= common-form-control-attlist common-control-id-attlist xforms-bind-attlist ;
table-table-column-group ::= table:table-column-group::(table-table-column-group-attlist table-columns-and-groups) ;
table-calculation-settings ::= table:calculation-settings::(table-calculation-setting-attlist table-null-date? table-iteration?) ;
style-style-content ::= style:family::"text" style-text-properties? ;
 style-style-content ::= style:family::"paragraph" style-paragraph-properties? style-text-properties? ;
 style-style-content ::= style:family::"section" style-section-properties? ;
 style-style-content ::= style:family::"ruby" style-ruby-properties? ;
 style-style-content ::= style:family::"table" style-table-properties? ;
 style-style-content ::= style:family::"table-column" style-table-column-properties? ;
 style-style-content ::= style:family::"table-row" style-table-row-properties? ;
 style-style-content ::= style:family::"table-cell" style-table-cell-properties? style-paragraph-properties? style-text-properties? ;
 style-style-content ::= style:family::("graphic" | "presentation") style-graphic-properties? style-paragraph-properties? style-text-properties? ;
 style-style-content ::= style:family::"drawing-page" style-drawing-page-properties? ;
 style-style-content ::= style:family::"chart" style-chart-properties? style-graphic-properties? style-paragraph-properties? style-text-properties? ;
table-change-track-table-cell ::= table:change-track-table-cell::(table-change-track-table-cell-attlist text-p*) ;
presentation-placeholder ::= presentation:placeholder::(presentation:object::presentation-classes svg:x::(coordinate | percent) svg:y::(coordinate | percent) svg:width::(length | percent) svg:height::(length | percent)) ;
text-list ::= text:list::(text-list-attr text-list-header? text-list-item*) ;
common-table-cell-address-attlist ::= table:column::integer table:row::integer table:table::integer ;
style-footer ::= style:footer::(common-style-header-footer-attlist header-footer-content) ;
common-num-format-attlist ::= (style:num-format::("1" | "i" | "I" | string | ε)) | (style:num-format::("a" | "A") style-num-letter-sync-attlist) | ε ;
text-index-entry-tab-stop ::= text:index-entry-tab-stop::((text:style-name::styleNameRef)? text-index-entry-tab-stop-attrs) ;
chart-chart ::= chart:chart::(chart-chart-attlist chart-title? chart-subtitle? chart-footer? chart-legend? chart-plot-area table-table?) ;
office-spreadsheet-attlist ::= (table:structure-protected::boolean)? (table:protection-key::string)? ;
style-chart-properties-content-strict ::= style-chart-properties-attlist style-chart-properties-elements ;
style-header-left ::= style:header-left::(common-style-header-footer-attlist header-footer-content) ;
table-rows-no-group ::= (table-rows (table-table-header-rows table-rows?)?) | (table-table-header-rows table-rows?) ;
chart-subtitle ::= chart:subtitle::(chart-title-attlist text-p?) ;
common-draw-position-attlist ::= (svg:x::coordinate)? (svg:y::coordinate)? ;
common-padding-attlist ::= (fo:padding::nonNegativeLength)? (fo:padding-top::nonNegativeLength)? (fo:padding-bottom::nonNegativeLength)? (fo:padding-left::nonNegativeLength)? (fo:padding-right::nonNegativeLength)? ;
draw-contour-path ::= draw:contour-path::(common-contour-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-path-data-attlist) ;
table-tracked-changes ::= table:tracked-changes::(table-tracked-changes-attlist (table-cell-content-change | table-insertion | table-deletion | table-movement)*) ;
style-table-properties-attlist ::= (style:width::positiveLength)? (style:rel-width::percent)? ;
 style-table-properties-attlist ::= (table:align::("left" | "center" | "right" | "margins"))? ;
 style-table-properties-attlist ::= common-horizontal-margin-attlist ;
 style-table-properties-attlist ::= common-vertical-margin-attlist ;
 style-table-properties-attlist ::= common-margin-attlist ;
 style-table-properties-attlist ::= common-page-number-attlist ;
 style-table-properties-attlist ::= common-break-attlist ;
 style-table-properties-attlist ::= common-background-color-attlist ;
 style-table-properties-attlist ::= common-shadow-attlist ;
 style-table-properties-attlist ::= common-keep-with-next-attlist ;
 style-table-properties-attlist ::= (style:may-break-between-rows::boolean)? ;
 style-table-properties-attlist ::= (table:border-model::("collapsing" | "separating"))? ;
 style-table-properties-attlist ::= common-writing-mode-attlist ;
 style-table-properties-attlist ::= (table:display::boolean)? ;
text-alphabetical-index-source-attrs ::= text-index-scope-attr text-relative-tab-stop-position-attr ;
 text-alphabetical-index-source-attrs ::= (text:ignore-case::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:main-entry-style-name::styleNameRef)? ;
 text-alphabetical-index-source-attrs ::= (text:alphabetical-separators::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:combine-entries::boolean)? (text:combine-entries-with-dash::boolean)? (text:combine-entries-with-pp::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:use-keys-as-entries::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:capitalize-entries::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:comma-separated::boolean)? ;
 text-alphabetical-index-source-attrs ::= (fo:language::languageCode)? ;
 text-alphabetical-index-source-attrs ::= (fo:country::countryCode)? ;
 text-alphabetical-index-source-attrs ::= (text:sort-algorithm::string)? ;
form-form-attlist ::= (xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")?)? ;
 form-form-attlist ::= (office:target-frame::targetFrameName)? ;
 form-form-attlist ::= (form:method::("get" | "post" | string))? ;
 form-form-attlist ::= (form:enctype::string)? ;
 form-form-attlist ::= (form:allow-deletes::boolean)? ;
 form-form-attlist ::= (form:allow-inserts::boolean)? ;
 form-form-attlist ::= (form:allow-updates::boolean)? ;
 form-form-attlist ::= (form:apply-filter::boolean)? ;
 form-form-attlist ::= (form:command-type::("table" | "query" | "command"))? ;
 form-form-attlist ::= (form:command::string())? ;
 form-form-attlist ::= (form:datasource::(anyURI | string))? ;
 form-form-attlist ::= (form:master-fields::string)? ;
 form-form-attlist ::= (form:detail-fields::string)? ;
 form-form-attlist ::= (form:escape-processing::boolean)? ;
 form-form-attlist ::= (form:filter::string)? ;
 form-form-attlist ::= (form:ignore-result::boolean)? ;
 form-form-attlist ::= (form:navigation-mode::navigation)? ;
 form-form-attlist ::= (form:order::string)? ;
 form-form-attlist ::= (form:tab-cycle::tab-cycles)? ;
text-alphabetical-index ::= text:alphabetical-index::(sectionAttr text-alphabetical-index-source text-index-body) ;
style-table-properties-content-strict ::= style-table-properties-attlist style-table-properties-elements ;
office-change-info ::= office:change-info::(dc-creator dc-date text-p*) ;
table-help-message ::= table:help-message::((table:title::string)? (table:display::boolean)? text-p*) ;
paragraph-content ::= string() ;
 paragraph-content ::= text:s::((text:c::nonNegativeInteger)?) ;
 paragraph-content ::= text:tab::text-tab-attr ;
 paragraph-content ::= text:line-break::ε ;
 paragraph-content ::= text:span::((text:style-name::styleNameRef)? (text:class-names::styleNameRefs)? paragraph-content*) ;
 paragraph-content ::= text:a::(text-a-attlist office-event-listeners? paragraph-content*) ;
 paragraph-content ::= (text:bookmark::(text:name::string)) | (text:bookmark-start::(text:name::string)) | (text:bookmark-end::(text:name::string)) ;
 paragraph-content ::= text:reference-mark::(text:name::string) ;
 paragraph-content ::= (text:reference-mark-start::(text:name::string)) | (text:reference-mark-end::(text:name::string)) ;
 paragraph-content ::= text:note::(text-note-class (text:id::string)? text:note-citation::((text:label::string)? string()) text:note-body::(text-content*)) ;
 paragraph-content ::= text:ruby::((text:style-name::styleNameRef)? text:ruby-base::paragraph-content text:ruby-text::((text:style-name::styleNameRef)? string())) ;
 paragraph-content ::= office-annotation ;
 paragraph-content ::= change-marks ;
 paragraph-content ::= shape | draw-a ;
 paragraph-content ::= text:date::(text-date-attlist string()) ;
 paragraph-content ::= text:time::(text-time-attlist string()) ;
 paragraph-content ::= text:page-number::(text-page-number-attlist string()) ;
 paragraph-content ::= text:page-continuation::(text-page-continuation-attlist string()) ;
 paragraph-content ::= text:sender-firstname::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-lastname::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-initials::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-title::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-position::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-email::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-phone-private::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-fax::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-company::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-phone-work::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-street::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-city::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-postal-code::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-country::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-state-or-province::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:author-name::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:author-initials::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:chapter::(text-chapter-attlist string()) ;
 paragraph-content ::= text:file-name::(text-file-name-attlist string()) ;
 paragraph-content ::= text:template-name::(text-template-name-attlist string()) ;
 paragraph-content ::= text:sheet-name::string() ;
 paragraph-content ::= text:variable-set::(common-field-name-attlist common-field-formula-attlist common-value-and-type-attlist common-field-display-value-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:variable-get::(common-field-name-attlist common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:variable-input::(common-field-name-attlist common-field-description-attlist common-value-type-attlist common-field-display-value-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:user-field-get::(common-field-name-attlist common-field-display-value-formula-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:user-field-input::(common-field-name-attlist common-field-description-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:sequence::(common-field-name-attlist common-field-formula-attlist common-field-num-format-attlist text-sequence-ref-name string()) ;
 paragraph-content ::= text:expression::(common-field-formula-attlist common-value-and-type-attlist? common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:text-input::(common-field-description-attlist string()) ;
 paragraph-content ::= text:initial-creator::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:creation-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::dateOrDateTime)? string()) ;
 paragraph-content ::= text:creation-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::timeOrDateTime)? string()) ;
 paragraph-content ::= text:description::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:user-defined::(common-field-fixed-attlist text:name::string common-field-data-style-name-attlist (office:value::double)? (office:date-value::dateOrDateTime)? (office:time-value::duration)? (office:boolean-value::boolean)? (office:string-value::string)? string()) ;
 paragraph-content ::= text:print-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::time)? string()) ;
 paragraph-content ::= text:print-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::date)? string()) ;
 paragraph-content ::= text:printed-by::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:title::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:subject::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:keywords::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:editing-cycles::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:editing-duration::(common-field-fixed-attlist common-field-data-style-name-attlist (text:duration::duration)? string()) ;
 paragraph-content ::= text:modification-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::time)? string()) ;
 paragraph-content ::= text:modification-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::date)? string()) ;
 paragraph-content ::= text:creator::(common-field-fixed-attlist string()) ;
 paragraph-content ::= (text:page-count::(common-field-num-format-attlist string())) | (text:paragraph-count::(common-field-num-format-attlist string())) | (text:word-count::(common-field-num-format-attlist string())) | (text:character-count::(common-field-num-format-attlist string())) | (text:table-count::(common-field-num-format-attlist string())) | (text:image-count::(common-field-num-format-attlist string())) | (text:object-count::(common-field-num-format-attlist string())) ;
 paragraph-content ::= text:database-display::(text-database-display-attlist string()) ;
 paragraph-content ::= text:database-next::text-database-next-attlist ;
 paragraph-content ::= text:database-row-select::text-database-row-select-attlist ;
 paragraph-content ::= text:database-row-number::(common-field-database-table common-field-num-format-attlist (text:value::nonNegativeInteger)? string()) ;
 paragraph-content ::= text:database-name::(common-field-database-table string()) ;
 paragraph-content ::= text:page-variable-set::(text-set-page-variable-attlist string()) ;
 paragraph-content ::= text:page-variable-get::(text-get-page-variable-attlist string()) ;
 paragraph-content ::= text:placeholder::(text-placeholder-attlist string()) ;
 paragraph-content ::= text:conditional-text::(text-conditional-text-attlist string()) ;
 paragraph-content ::= text:hidden-text::(text-hidden-text-attlist string()) ;
 paragraph-content ::= (text:reference-ref::(text-common-ref-content text-ref-content)) | (text:bookmark-ref::(text-common-ref-content text-ref-content)) ;
 paragraph-content ::= text:note-ref::(text-common-ref-content text-note-ref-content text-ref-content) ;
 paragraph-content ::= text:sequence-ref::(text-common-ref-content text-sequence-ref-content) ;
 paragraph-content ::= text:script::((xlink:href::anyURI (xlink:type::"simple")?) | string() (script:language::string)?) ;
 paragraph-content ::= text:execute-macro::((text:name::string)? office-event-listeners? string()) ;
 paragraph-content ::= text:hidden-paragraph::(text-hidden-paragraph-attlist string()) ;
 paragraph-content ::= text:dde-connection::(text:connection-name::string string()) ;
 paragraph-content ::= text:measure::(text:kind::("value" | "unit" | "gap") string()) ;
 paragraph-content ::= text:table-formula::(common-field-formula-attlist common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:toc-mark-start::text-toc-mark-start-attrs ;
 paragraph-content ::= text:toc-mark-end::text-id ;
 paragraph-content ::= text:toc-mark::(text:string-value::string text-outline-level) ;
 paragraph-content ::= text:user-index-mark-start::(text-id text-outline-level text-index-name) ;
 paragraph-content ::= text:user-index-mark-end::(text-id text-outline-level) ;
 paragraph-content ::= text:user-index-mark::(text:string-value::string text-outline-level text-index-name) ;
 paragraph-content ::= text:alphabetical-index-mark-start::(text-id text-alphabetical-index-mark-attrs) ;
 paragraph-content ::= text:alphabetical-index-mark-end::text-id ;
 paragraph-content ::= text:alphabetical-index-mark::(text:string-value::string text-alphabetical-index-mark-attrs) ;
 paragraph-content ::= text:bibliography-mark::(text:bibliography-type::text-bibliography-types ((text:identifier::string) | (text:address::string) | (text:annote::string) | (text:author::string) | (text:booktitle::string) | (text:chapter::string) | (text:edition::string) | (text:editor::string) | (text:howpublished::string) | (text:institution::string) | (text:journal::string) | (text:month::string) | (text:note::string) | (text:number::string) | (text:organizations::string) | (text:pages::string) | (text:publisher::string) | (text:school::string) | (text:series::string) | (text:title::string) | (text:report-type::string) | (text:volume::string) | (text:year::string) | (text:url::string) | (text:custom1::string) | (text:custom2::string) | (text:custom3::string) | (text:custom4::string) | (text:custom5::string) | (text:isbn::string) | (text:issn::string))* string()) ;
 paragraph-content ::= presentation:header::ε ;
 paragraph-content ::= presentation:footer::ε ;
 paragraph-content ::= presentation:date-time::ε ;
number-day ::= number:day::(number-day-attlist common-calendar-attlist) ;
table-data-pilot-sort-info-attlist ::= (table:sort-mode::"data" table:data-field::string) | (table:sort-mode::("none" | "manual" | "name")) ;
 table-data-pilot-sort-info-attlist ::= table:order::("ascending" | "descending") ;
form-frame-attlist ::= form-control-attlist common-disabled-attlist for label common-printable-attlist common-title-attlist ;
form-textarea-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist ;
draw-glue-point-attlist ::= draw:id::nonNegativeInteger ;
 draw-glue-point-attlist ::= svg:x::(distance | percent) svg:y::(distance | percent) ;
 draw-glue-point-attlist ::= draw:align::("top-left" | "top" | "top-right" | "left" | "center" | "right" | "bottom-left" | "bottom-right") ;
table-data-pilot-field-attlist ::= table:source-field-name::string ;
 table-data-pilot-field-attlist ::= (table:orientation::("row" | "column" | "data" | "hidden")) | (table:orientation::"page" table:selected-page::string) ;
 table-data-pilot-field-attlist ::= (table:is-data-layout-field::string)? ;
 table-data-pilot-field-attlist ::= (table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string))? ;
 table-data-pilot-field-attlist ::= (table:used-hierarchy::integer)? ;
office-styles ::= (office:styles::(styles style-default-style* text-outline-style? text-notes-configuration* text-bibliography-configuration? text-linenumbering-configuration? draw-gradient* svg-linearGradient* svg-radialGradient* draw-hatch* draw-fill-image* draw-marker* draw-stroke-dash* draw-opacity* style-presentation-page-layout*))? ;
common-vertical-pos-attlist ::= (style:vertical-pos::("top" | "middle" | "bottom" | "from-top" | "below"))? (svg:y::coordinate)? ;
common-draw-viewbox-attlist ::= svg:viewBox::(integer integer integer integer) ;
style-chart-properties-attlist ::= (chart:scale-text::boolean)? ;
 style-chart-properties-attlist ::= (chart:three-dimensional::boolean)? ;
 style-chart-properties-attlist ::= (chart:deep::boolean)? ;
 style-chart-properties-attlist ::= (chart:symbol-type::"none") | (chart:symbol-type::"automatic") | (chart:symbol-type::"named-symbol" chart:symbol-name::("square" | "diamond" | "arrow-down" | "arrow-up" | "arrow-right" | "arrow-left" | "bow-tie" | "hourglass" | "circle" | "star" | "x" | "plus" | "asterisk" | "horizontal-bar" | "vertical-bar")) | (chart:symbol-type::"image" chart:symbol-image::(xlink:href::anyURI)) | ε ;
 style-chart-properties-attlist ::= (chart:symbol-width::nonNegativeLength)? (chart:symbol-height::nonNegativeLength)? ;
 style-chart-properties-attlist ::= (chart:vertical::boolean)? ;
 style-chart-properties-attlist ::= (chart:connect-bars::boolean)? ;
 style-chart-properties-attlist ::= (chart:gap-width::integer)? (chart:overlap::integer)? ;
 style-chart-properties-attlist ::= (chart:japanese-candle-stick::boolean)? ;
 style-chart-properties-attlist ::= (chart:interpolation::("none" | "cubic-spline" | "b-spline"))? (chart:spline-order::positiveInteger)? (chart:spline-resolution::positiveInteger)? ;
 style-chart-properties-attlist ::= (chart:pie-offset::nonNegativeInteger)? ;
 style-chart-properties-attlist ::= (chart:lines::boolean)? ;
 style-chart-properties-attlist ::= (chart:solid-type::("cuboid" | "cylinder" | "cone" | "pyramid"))? ;
 style-chart-properties-attlist ::= (chart:stacked::boolean)? (chart:percentage::boolean)? ;
 style-chart-properties-attlist ::= (chart:link-data-style-to-source::boolean)? ;
 style-chart-properties-attlist ::= (chart:visible::boolean)? ;
 style-chart-properties-attlist ::= (chart:logarithmic::boolean)? ;
 style-chart-properties-attlist ::= (chart:maximum::double)? (chart:minimum::double)? (chart:origin::double)? (chart:interval-major::double)? (chart:interval-minor::positiveInteger)? ;
 style-chart-properties-attlist ::= (chart:tick-marks-major-inner::boolean)? (chart:tick-marks-major-outer::boolean)? (chart:tick-marks-minor-inner::boolean)? (chart:tick-marks-minor-outer::boolean)? ;
 style-chart-properties-attlist ::= (chart:display-label::boolean)? (chart:text-overlap::boolean)? (text:line-break::boolean)? (chart:label-arrangement::("side-by-side" | "stagger-even" | "stagger-odd"))? ;
 style-chart-properties-attlist ::= common-style-direction-attlist ;
 style-chart-properties-attlist ::= common-rotation-angle-attlist ;
 style-chart-properties-attlist ::= (chart:data-label-number::("none" | "value" | "percentage"))? ;
 style-chart-properties-attlist ::= (chart:data-label-text::boolean)? ;
 style-chart-properties-attlist ::= (chart:data-label-symbol::boolean)? ;
 style-chart-properties-attlist ::= (chart:mean-value::boolean)? ;
 style-chart-properties-attlist ::= (chart:error-category::("none" | "variance" | "standard-deviation" | "percentage" | "error-margin" | "constant"))? ;
 style-chart-properties-attlist ::= (chart:error-percentage::double)? ;
 style-chart-properties-attlist ::= (chart:error-margin::double)? ;
 style-chart-properties-attlist ::= (chart:error-lower-limit::double)? (chart:error-upper-limit::double)? ;
 style-chart-properties-attlist ::= (chart:error-upper-indicator::boolean)? (chart:error-lower-indicator::boolean)? ;
 style-chart-properties-attlist ::= (chart:series-source::("columns" | "rows"))? ;
 style-chart-properties-attlist ::= (chart:regression-type::("none" | "linear" | "logarithmic" | "exponential" | "power"))? ;
table-table ::= table:table::(table-table-attlist table-table-source? office-dde-source? table-scenario? office-forms? table-shapes? table-columns-and-groups table-rows-and-groups) ;
text-linenumbering-configuration ::= text:linenumbering-configuration::(text-linenumbering-configuration-attlist text-linenumbering-separator?) ;
draw-path ::= draw:path::(common-draw-path-data-attlist common-draw-position-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
number-embedded-text ::= number:embedded-text::(number-embedded-text-attlist string()) ;
style-handout-master ::= style:handout-master::(common-presentation-header-footer-attlist style-handout-master-attlist shape*) ;
table-table-cell-content ::= table-cell-range-source? office-annotation? table-detective? text-content* ;
office-document ::= office:document::(office-document-attrs office-document-common-attrs office-meta office-settings office-scripts office-font-face-decls office-styles office-automatic-styles office-master-styles office-body) ;
presentation-show-text ::= presentation:show-text::(common-presentation-effect-attlist presentation-sound?) ;
common-horizontal-margin-attlist ::= (fo:margin-left::(length | percent))? (fo:margin-right::(length | percent))? ;
draw-area-circle ::= draw:area-circle::(common-draw-area-attlist svg:cx::coordinate svg:cy::coordinate svg:r::length svg-desc? office-event-listeners?) ;
text-user-index-source-attr ::= text-index-scope-attr text-relative-tab-stop-position-attr text:index-name::string ;
 text-user-index-source-attr ::= (text:use-index-marks::boolean)? (text:use-graphics::boolean)? (text:use-tables::boolean)? (text:use-floating-frames::boolean)? (text:use-objects::boolean)? ;
 text-user-index-source-attr ::= (text:copy-outline-levels::boolean)? ;
text-illustration-index-entry-content ::= text-illustration-index-entry-template-attrs (text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop)* ;
form-image-attlist ::= form-control-attlist button-type common-disabled-attlist image-data common-printable-attlist common-tab-attlist target-frame target-location common-title-attlist common-value-attlist ;
draw-connector ::= draw:connector::(draw-connector-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
anyElements ::= (string()? anyAttListOrElements string()?)* ;
draw-applet ::= draw:applet::(draw-applet-attlist common-draw-data-attlist? draw-param*) ;
style-master-page ::= style:master-page::(style-master-page-attlist (style-header style-header-left?)? (style-footer style-footer-left?)? office-forms? style-style* shape* presentation-notes?) ;
text-linenumbering-separator ::= text:linenumbering-separator::((text:increment::nonNegativeInteger)? string()) ;
text-index-title ::= text:index-title::(sectionAttr index-content-main*) ;
number-month ::= number:month::(number-month-attlist common-calendar-attlist) ;
text-toc-mark-start-attrs ::= text-id text-outline-level ;
office-script ::= office:script::(office-script-attlist string()? anyElements string()?) ;
presentation-play-attlist ::= draw:shape-id::IDREF (presentation:speed::presentationSpeeds)? ;
svg-radialGradient ::= svg:radialGradient::(common-svg-gradient-attlist (svg:cx::(coordinate | percent))? (svg:cy::(coordinate | percent))? (svg:r::(coordinate | percent))? (svg:fx::(coordinate | percent))? (svg:fy::(coordinate | percent))? svg-stop*) ;
table-cell-range-source ::= table:cell-range-source::(table-table-cell-range-source-attlist table-linked-source-attlist) ;
office-scripts ::= (office:scripts::(office-script* office-event-listeners?))? ;
draw-connector-attlist ::= (draw:type::("standard" | "lines" | "line" | "curve"))? ;
 draw-connector-attlist ::= (svg:x1::coordinate svg:y1::coordinate)? ;
 draw-connector-attlist ::= (draw:start-shape::IDREF)? ;
 draw-connector-attlist ::= (draw:start-glue-point::nonNegativeInteger)? ;
 draw-connector-attlist ::= (svg:x2::coordinate svg:y2::coordinate)? ;
 draw-connector-attlist ::= (draw:end-shape::IDREF)? ;
 draw-connector-attlist ::= (draw:end-glue-point::nonNegativeInteger)? ;
 draw-connector-attlist ::= (draw:line-skew::(length (length length?)?))? ;
common-vertical-margin-attlist ::= (fo:margin-top::(nonNegativeLength | percent))? (fo:margin-bottom::(nonNegativeLength | percent))? ;
table-data-pilot-table ::= table:data-pilot-table::(table-data-pilot-table-attlist (table-database-source-sql | table-database-source-table | table-database-source-query | table-source-service | table-source-cell-range)? table-data-pilot-field+) ;
table-null-date ::= table:null-date::((table:value-type::valueType)? (table:date-value-type::date)?) ;
style-header-footer-properties-attlist ::= (svg:height::length)? (fo:min-height::length)? ;
 style-header-footer-properties-attlist ::= common-horizontal-margin-attlist common-vertical-margin-attlist common-margin-attlist ;
 style-header-footer-properties-attlist ::= common-border-attlist ;
 style-header-footer-properties-attlist ::= common-border-line-width-attlist ;
 style-header-footer-properties-attlist ::= common-padding-attlist ;
 style-header-footer-properties-attlist ::= common-background-color-attlist ;
 style-header-footer-properties-attlist ::= common-shadow-attlist ;
style-font-face-attlist ::= (svg:font-family::string)? (svg:font-style::fontStyle)? (svg:font-variant::fontVariant)? (svg:font-weight::fontWeight)? (svg:font-stretch::("normal" | "ultra-condensed" | "extra-condensed" | "condensed" | "semi-condensed" | "semi-expanded" | "expanded" | "extra-expanded" | "ultra-expanded"))? (svg:font-size::positiveLength)? (svg:unicode-range::string())? (svg:units-per-em::integer)? (svg:panose-1::string())? (svg:stemv::integer)? (svg:stemh::integer)? (svg:slope::integer)? (svg:cap-height::integer)? (svg:x-height::integer)? (svg:accent-height::integer)? (svg:ascent::integer)? (svg:descent::integer)? (svg:widths::string())? (svg:bbox::string())? (svg:ideographic::integer)? (svg:alphabetic::integer)? (svg:mathematical::integer)? (svg:hanging::integer)? (svg:v-ideographic::integer)? (svg:v-alphabetic::integer)? (svg:v-mathematical::integer)? (svg:v-hanging::integer)? (svg:underline-position::integer)? (svg:underline-thickness::integer)? (svg:strikethrough-position::integer)? (svg:strikethrough-thickness::integer)? (svg:overline-position::integer)? (svg:overline-thickness::integer)? ;
 style-font-face-attlist ::= style:name::string ;
 style-font-face-attlist ::= (style:font-adornments::string)? ;
 style-font-face-attlist ::= (style:font-family-generic::fontFamilyGeneric)? ;
 style-font-face-attlist ::= (style:font-pitch::fontPitch)? ;
 style-font-face-attlist ::= (style:font-charset::textEncoding)? ;
draw-stroke-dash-attlist ::= draw:name::styleName ;
 draw-stroke-dash-attlist ::= (draw:display-name::string)? ;
 draw-stroke-dash-attlist ::= (draw:style::("rect" | "round"))? ;
 draw-stroke-dash-attlist ::= (draw:dots1::integer)? (draw:dots1-length::length)? (draw:dots2::integer)? (draw:dots2-length::length)? ;
 draw-stroke-dash-attlist ::= (draw:distance::length)? ;
text-user-index ::= text:user-index::(sectionAttr text-user-index-source text-index-body) ;
table-cell-content-deletion ::= table:cell-content-deletion::((table:id::string)? table-cell-address? table-change-track-table-cell?) ;
config-config-item-map-named ::= config:config-item-map-named::(config-config-item-map-named-attlist config-config-item-map-entry+) ;
table-deletion ::= table:deletion::(table-deletion-attlist common-table-change-attlist office-change-info table-dependencies? table-deletions? table-cut-offs?) ;
form-image-frame-attlist ::= form-control-attlist common-disabled-attlist image-data common-printable-attlist common-readonly-attlist common-title-attlist common-data-field-attlist ;
draw-marker ::= draw:marker::(draw-marker-attlist common-draw-viewbox-attlist common-draw-path-data-attlist) ;
styles ::= style-style* text-list-style* number-number-style* number-currency-style* number-percentage-style* number-date-style* number-time-style* number-boolean-style* number-text-style* ;
office-annotation ::= office:annotation::(office-annotation-attlist draw-caption-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist dc-creator? dc-date? meta-date-string? (text-p | text-list)*) ;
dr3d-scene ::= dr3d:scene::(dr3d-scene-attlist common-draw-position-attlist common-draw-size-attlist common-draw-style-name-attlist common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-text-spreadsheet-shape-attlist common-dr3d-transform-attlist dr3d-light* shapes3d*) ;
style-footer-left ::= style:footer-left::(common-style-header-footer-attlist header-footer-content) ;
draw-line ::= draw:line::(draw-line-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
style-list-level-properties-content-strict ::= style-list-level-properties-attlist style-list-level-properties-elements ;
text-section-source-attr ::= (xlink:href::anyURI (xlink:type::"simple")? (xlink:show::"embed")?)? ;
 text-section-source-attr ::= (text:section-name::string)? ;
 text-section-source-attr ::= (text:filter-name::string)? ;
draw-page-thumbnail ::= draw:page-thumbnail::(draw-page-thumbnail-attlist common-draw-position-attlist common-draw-size-attlist presentation-shape-attlist common-draw-shape-with-styles-attlist) ;
common-field-database-table ::= common-field-database-table-attlist common-field-database-name ;
number-era ::= number:era::(number-era-attlist common-calendar-attlist) ;
table-cell-content-change ::= table:cell-content-change::(common-table-change-attlist table-cell-address office-change-info table-dependencies? table-deletions? table-previous) ;
dr3d-scene-attlist ::= (dr3d:vrp::vector3D)? (dr3d:vpn::vector3D)? (dr3d:vup::vector3D)? ;
 dr3d-scene-attlist ::= (dr3d:projection::("parallel" | "perspective"))? ;
 dr3d-scene-attlist ::= (dr3d:distance::length)? ;
 dr3d-scene-attlist ::= (dr3d:focal-length::length)? ;
 dr3d-scene-attlist ::= (dr3d:shadow-slant::nonNegativeInteger)? ;
 dr3d-scene-attlist ::= (dr3d:shade-mode::("flat" | "phong" | "gouraud" | "draft"))? ;
 dr3d-scene-attlist ::= (dr3d:ambient-color::color)? ;
 dr3d-scene-attlist ::= (dr3d:lighting-mode::boolean)? ;
chart-legend-attlist ::= (chart:legend-position::("start" | "end" | "top" | "bottom") (chart:legend-align::("start" | "center" | "end"))?) | (chart:legend-position::("top-start" | "bottom-start" | "top-end" | "bottom-end")) | ε ;
 chart-legend-attlist ::= common-draw-position-attlist ;
 chart-legend-attlist ::= (style:legend-expansion::("wide" | "high" | "balanced")) | (style:legend-expansion::"custom" style:legend-expansion-aspect-ratio::double) | ε ;
 chart-legend-attlist ::= (chart:style-name::styleNameRef)? ;
draw-rect ::= draw:rect::(draw-rect-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
table-subtotal-rules ::= table:subtotal-rules::(table-subtotal-rules-attlist table-sort-groups? table-subtotal-rule*) ;
text-changed-region ::= text:changed-region::(text-changed-region-attr text-changed-region-content) ;
text-alphabetical-index-source ::= text:alphabetical-index-source::(text-alphabetical-index-source-attrs text-index-title-template? text-alphabetical-index-entry-template*) ;
chart-plot-area ::= chart:plot-area::(chart-plot-area-attlist dr3d-light* chart-axis* chart-series* chart-stock-gain-marker? chart-stock-loss-marker? chart-stock-range-line? chart-wall? chart-floor?) ;
draw-measure-attlist ::= svg:x1::coordinate svg:y1::coordinate ;
 draw-measure-attlist ::= svg:x2::coordinate svg:y2::coordinate ;
style-graphic-properties-attlist ::= (draw:stroke::("none" | "dash" | "solid"))? ;
 style-graphic-properties-attlist ::= (draw:stroke-dash::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:stroke-dash-names::styleNameRefs)? ;
 style-graphic-properties-attlist ::= (svg:stroke-width::length)? ;
 style-graphic-properties-attlist ::= (svg:stroke-color::color)? ;
 style-graphic-properties-attlist ::= (draw:marker-start::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:marker-end::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:marker-start-width::length)? ;
 style-graphic-properties-attlist ::= (draw:marker-end-width::length)? ;
 style-graphic-properties-attlist ::= (draw:marker-start-center::boolean)? ;
 style-graphic-properties-attlist ::= (draw:marker-end-center::boolean)? ;
 style-graphic-properties-attlist ::= (svg:stroke-opacity::(string() | percent))? ;
 style-graphic-properties-attlist ::= (draw:stroke-linejoin::("miter" | "round" | "bevel" | "middle" | "none" | "inherit"))? ;
 style-graphic-properties-attlist ::= (draw:symbol-color::color)? ;
 style-graphic-properties-attlist ::= (text:animation::("none" | "scroll" | "alternate" | "slide"))? ;
 style-graphic-properties-attlist ::= (text:animation-direction::("left" | "right" | "up" | "down"))? ;
 style-graphic-properties-attlist ::= (text:animation-start-inside::boolean)? ;
 style-graphic-properties-attlist ::= (text:animation-stop-inside::boolean)? ;
 style-graphic-properties-attlist ::= (text:animation-repeat::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (text:animation-delay::duration)? ;
 style-graphic-properties-attlist ::= (text:animation-steps::length)? ;
 style-graphic-properties-attlist ::= (draw:auto-grow-width::boolean)? (draw:auto-grow-height::boolean)? ;
 style-graphic-properties-attlist ::= (draw:fit-to-size::boolean)? ;
 style-graphic-properties-attlist ::= (draw:fit-to-contour::boolean)? ;
 style-graphic-properties-attlist ::= (draw:textarea-vertical-align::("top" | "middle" | "bottom" | "justify"))? ;
 style-graphic-properties-attlist ::= (draw:textarea-horizontal-align::("left" | "center" | "right" | "justify"))? ;
 style-graphic-properties-attlist ::= (fo:wrap-option::("no-wrap" | "wrap"))? ;
 style-graphic-properties-attlist ::= (draw:color-mode::("greyscale" | "mono" | "watermark" | "standard"))? ;
 style-graphic-properties-attlist ::= (draw:color-inversion::boolean)? ;
 style-graphic-properties-attlist ::= (draw:luminance::percent)? ;
 style-graphic-properties-attlist ::= (draw:contrast::percent)? ;
 style-graphic-properties-attlist ::= (draw:gamma::percent)? ;
 style-graphic-properties-attlist ::= (draw:red::percent)? ;
 style-graphic-properties-attlist ::= (draw:green::percent)? ;
 style-graphic-properties-attlist ::= (draw:blue::percent)? ;
 style-graphic-properties-attlist ::= (draw:image-opacity::percent)? ;
 style-graphic-properties-attlist ::= (draw:shadow::("visible" | "hidden"))? ;
 style-graphic-properties-attlist ::= (draw:shadow-offset-x::length)? (draw:shadow-offset-y::length)? ;
 style-graphic-properties-attlist ::= (draw:shadow-color::color)? ;
 style-graphic-properties-attlist ::= (draw:shadow-opacity::percent)? ;
 style-graphic-properties-attlist ::= (draw:start-line-spacing-horizontal::distance)? (draw:start-line-spacing-vertical::distance)? ;
 style-graphic-properties-attlist ::= (draw:end-line-spacing-horizontal::distance)? (draw:end-line-spacing-vertical::distance)? ;
 style-graphic-properties-attlist ::= (draw:line-distance::distance)? ;
 style-graphic-properties-attlist ::= (draw:guide-overhang::length)? ;
 style-graphic-properties-attlist ::= (draw:guide-distance::distance)? ;
 style-graphic-properties-attlist ::= (draw:start-guide::length)? ;
 style-graphic-properties-attlist ::= (draw:end-guide::length)? ;
 style-graphic-properties-attlist ::= (draw:placing::("below" | "above"))? ;
 style-graphic-properties-attlist ::= (draw:parallel::boolean)? ;
 style-graphic-properties-attlist ::= (draw:measure-align::("automatic" | "left-outside" | "inside" | "right-outside"))? (draw:measure-vertical-align::("automatic" | "above" | "below" | "center"))? ;
 style-graphic-properties-attlist ::= (draw:unit::("automatic" | "mm" | "cm" | "m" | "km" | "pt" | "pc" | "inch" | "ft" | "mi"))? ;
 style-graphic-properties-attlist ::= (draw:show-unit::boolean)? ;
 style-graphic-properties-attlist ::= (draw:decimal-places::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (draw:caption-type::("straight-line" | "angled-line" | "angled-connector-line"))? ;
 style-graphic-properties-attlist ::= (draw:caption-angle-type::("fixed" | "free"))? ;
 style-graphic-properties-attlist ::= (draw:caption-angle::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (draw:caption-gap::distance)? ;
 style-graphic-properties-attlist ::= (draw:caption-escape-direction::("horizontal" | "vertical" | "auto"))? ;
 style-graphic-properties-attlist ::= (draw:caption-escape::(length | percent))? ;
 style-graphic-properties-attlist ::= (draw:caption-line-length::length)? ;
 style-graphic-properties-attlist ::= (draw:caption-fit-line-length::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:horizontal-segments::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:vertical-segments::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:edge-rounding::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:edge-rounding-mode::("correct" | "attractive"))? ;
 style-graphic-properties-attlist ::= (dr3d:back-scale::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:depth::length)? ;
 style-graphic-properties-attlist ::= (dr3d:backface-culling::("enabled" | "disabled"))? ;
 style-graphic-properties-attlist ::= (dr3d:end-angle::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:close-front::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:close-back::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:lighting-mode::("standard" | "double-sided"))? ;
 style-graphic-properties-attlist ::= (dr3d:normals-kind::("object" | "flat" | "sphere"))? ;
 style-graphic-properties-attlist ::= (dr3d:normals-direction::("normal" | "inverse"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-generation-mode-x::("object" | "parallel" | "sphere"))? (dr3d:texture-generation-mode-y::("object" | "parallel" | "sphere"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-kind::("luminance" | "intesity" | "color"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-filter::("enabled" | "disabled"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-mode::("replace" | "modulate" | "blend"))? ;
 style-graphic-properties-attlist ::= (dr3d:ambient-color::color)? (dr3d:emissive-color::color)? (dr3d:specular-color::color)? (dr3d:diffuse-color::color)? ;
 style-graphic-properties-attlist ::= (dr3d:shininess::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:shadow::("visible" | "hidden"))? ;
 style-graphic-properties-attlist ::= common-draw-rel-size-attlist (fo:min-width::(length | percent))? ;
 style-graphic-properties-attlist ::= (fo:min-height::(length | percent))? ;
 style-graphic-properties-attlist ::= (fo:max-height::(length | percent))? (fo:max-width::(length | percent))? ;
 style-graphic-properties-attlist ::= common-horizontal-margin-attlist ;
 style-graphic-properties-attlist ::= common-vertical-margin-attlist ;
 style-graphic-properties-attlist ::= common-margin-attlist ;
 style-graphic-properties-attlist ::= (style:print-content::boolean)? ;
 style-graphic-properties-attlist ::= (style:protect::("none" | (("content" | "position" | "size")+)))? ;
 style-graphic-properties-attlist ::= (style:horizontal-pos::("left" | "center" | "right" | "from-left" | "inside" | "outside" | "from-inside"))? (svg:x::coordinate)? ;
 style-graphic-properties-attlist ::= (style:horizontal-rel::("page" | "page-content" | "page-start-margin" | "page-end-margin" | "frame" | "frame-content" | "frame-start-margin" | "frame-end-margin" | "paragraph" | "paragraph-content" | "paragraph-start-margin" | "paragraph-end-margin" | "char"))? ;
 style-graphic-properties-attlist ::= common-vertical-pos-attlist ;
 style-graphic-properties-attlist ::= common-vertical-rel-attlist ;
 style-graphic-properties-attlist ::= common-text-anchor-attlist ;
 style-graphic-properties-attlist ::= common-border-attlist ;
 style-graphic-properties-attlist ::= common-border-line-width-attlist ;
 style-graphic-properties-attlist ::= common-padding-attlist ;
 style-graphic-properties-attlist ::= common-shadow-attlist ;
 style-graphic-properties-attlist ::= common-background-color-attlist ;
 style-graphic-properties-attlist ::= (style:editable::boolean)? ;
 style-graphic-properties-attlist ::= (style:wrap::("none" | "left" | "right" | "parallel" | "dynamic" | "run-through" | "biggest"))? ;
 style-graphic-properties-attlist ::= (style:wrap-dynamic-treshold::nonNegativeLength)? ;
 style-graphic-properties-attlist ::= (style:number-wrapped-paragraphs::("no-limit" | positiveInteger))? ;
 style-graphic-properties-attlist ::= (style:wrap-contour::boolean)? ;
 style-graphic-properties-attlist ::= (style:wrap-contour-mode::("full" | "outside"))? ;
 style-graphic-properties-attlist ::= (style:run-through::("foreground" | "background"))? ;
 style-graphic-properties-attlist ::= (style:flow-with-text::boolean)? ;
 style-graphic-properties-attlist ::= (style:overflow-behavior::("clip" | "auto-create-new-frame"))? ;
 style-graphic-properties-attlist ::= (style:mirror::("none" | "vertical" | horizontal-mirror | ("vertical" horizontal-mirror) | (horizontal-mirror "vertical")))? ;
 style-graphic-properties-attlist ::= (fo:clip::string)? ;
 style-graphic-properties-attlist ::= (draw:wrap-influence-on-position::("iterative" | "once-concurrent" | "once-successive"))? ;
 style-graphic-properties-attlist ::= (draw:frame-display-scrollbar::boolean)? ;
 style-graphic-properties-attlist ::= (draw:frame-display-border::boolean)? ;
 style-graphic-properties-attlist ::= (draw:frame-margin-horizontal::nonNegativePixelLength)? (draw:frame-margin-vertical::nonNegativePixelLength)? ;
 style-graphic-properties-attlist ::= (draw:visible-area-left::nonNegativeLength)? (draw:visible-area-top::nonNegativeLength)? (draw:visible-area-width::positiveLength)? (draw:visible-area-height::positiveLength)? ;
 style-graphic-properties-attlist ::= (draw:ole-draw-aspect::nonNegativeInteger)? ;
draw-object-ole ::= draw:object-ole::(draw-object-ole-attlist common-draw-data-attlist | office-binary-data) ;
office-document-styles ::= office:document-styles::(office-document-common-attrs office-font-face-decls office-styles office-automatic-styles office-master-styles) ;
number-percentage-style ::= number:percentage-style::(common-data-style-attlist style-text-properties? number-text? number-and-text? style-map*) ;
office-body-content ::= office:text::(office-text-attlist office-text-content-prelude office-text-content-main* office-text-content-epilogue) ;
 office-body-content ::= office:drawing::(office-drawing-attlist office-drawing-content-prelude office-drawing-content-main office-drawing-content-epilogue) ;
 office-body-content ::= office:presentation::(office-presentation-attlist office-presentation-content-prelude office-presentation-content-main office-presentation-content-epilogue) ;
 office-body-content ::= office:spreadsheet::(office-spreadsheet-attlist office-spreadsheet-content-prelude office-spreadsheet-content-main office-spreadsheet-content-epilogue) ;
 office-body-content ::= office:chart::(office-chart-attlist office-chart-content-prelude office-chart-content-main office-chart-content-epilogue) ;
 office-body-content ::= office:image::(office-image-attlist office-image-content-prelude office-image-content-main office-image-content-epilogue) ;
form-property ::= form:property::(form-property-name form-property-value-and-type-attlist) ;
 form-property ::= form:list-property::(form-property-name form-property-type-and-value-list) ;
draw-contour-polygon ::= draw:contour-polygon::(common-contour-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-points-attlist) ;
table-named-expression-attlist ::= table:name::string table:expression::string (table:base-cell-address::cellAddress)? ;
style-paragraph-properties-content-strict ::= style-paragraph-properties-attlist style-paragraph-properties-elements ;
chart-plot-area-attlist ::= common-draw-position-attlist common-draw-size-attlist ;
 chart-plot-area-attlist ::= (chart:style-name::styleNameRef)? ;
 chart-plot-area-attlist ::= (table:cell-range-address::cellRangeAddress)? ;
 chart-plot-area-attlist ::= (chart:data-source-has-labels::("none" | "row" | "column" | "both"))? ;
 chart-plot-area-attlist ::= dr3d-scene-attlist common-dr3d-transform-attlist ;
script-event-listener-attlist ::= script:event-name::string ;
 script-event-listener-attlist ::= script:language::string ;
 script-event-listener-attlist ::= (script:macro-name::string) | (xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")?) ;
text-variable-decl ::= text:variable-decl::(common-field-name-attlist common-value-type-attlist) ;
draw-fill-image ::= draw:fill-image::(draw-fill-image-attlist xlink:href::anyURI (xlink:type::"simple")? (xlink:show::"embed")? (xlink:actuate::"onLoad")?) ;
borderWidths ::= positiveLength positiveLength positiveLength ;
form-formatted-text-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist ;
 form-formatted-text-attlist ::= (form:max-value::string)? ;
 form-formatted-text-attlist ::= (form:min-value::string)? ;
 form-formatted-text-attlist ::= (form:validation::boolean)? ;
office-document-content ::= office:document-content::(office-document-common-attrs office-scripts office-font-face-decls office-automatic-styles office-body) ;
style-graphic-properties-content-strict ::= style-graphic-properties-attlist style-graphic-fill-properties-attlist style-graphic-properties-elements ;
controls ::= column-controls ;
 controls ::= form:password::(form-password-attlist common-form-control-content) ;
 controls ::= form:file::(form-file-attlist common-form-control-content) ;
 controls ::= form:time::(form-time-attlist common-numeric-control-attlist common-form-control-content) ;
 controls ::= form:fixed-text::(form-fixed-text-attlist common-form-control-content) ;
 controls ::= form:button::(form-button-attlist common-form-control-content) ;
 controls ::= form:image::(form-image-attlist common-form-control-content) ;
 controls ::= form:radio::(form-radio-attlist common-form-control-content) ;
 controls ::= form:frame::(form-frame-attlist common-form-control-content) ;
 controls ::= form:image-frame::(form-image-frame-attlist common-form-control-content) ;
 controls ::= form:hidden::(form-hidden-attlist common-form-control-content) ;
 controls ::= form:grid::(form-grid-attlist common-form-control-content form-column*) ;
 controls ::= form:value-range::(form-value-range-attlist common-form-control-content) ;
 controls ::= form:generic-control::(form-generic-control-attlist common-form-control-content) ;
text-illustration-index ::= text:illustration-index::(sectionAttr text-illustration-index-source text-index-body) ;
office-dde-source ::= office:dde-source::(office-dde-source-attlist common-dde-connection-decl-attlist) ;
text-a-attlist ::= (office:name::string)? ;
 text-a-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? ;
 text-a-attlist ::= (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? ;
 text-a-attlist ::= (text:style-name::styleNameRef)? (text:visited-style-name::styleNameRef)? ;
config-config-item ::= config:config-item::(config-config-item-attlist string()) ;
style-graphic-fill-properties-attlist ::= (draw:fill::("none" | "solid" | "bitmap" | "gradient" | "hatch"))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-color::color)? ;
 style-graphic-fill-properties-attlist ::= (draw:secondary-fill-color::color)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-gradient-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (draw:gradient-step-count::nonNegativeInteger)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-hatch-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-hatch-solid::boolean)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (style:repeat::("no-repeat" | "repeat" | "stretch"))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-width::(length | percent))? (draw:fill-image-height::(length | percent))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-ref-point-x::percent)? (draw:fill-image-ref-point-y::percent)? (draw:fill-image-ref-point::("top-left" | "top" | "top-right" | "left" | "center" | "right" | "bottom-left" | "bottom" | "bottom-right"))? ;
 style-graphic-fill-properties-attlist ::= (draw:tile-repeat-offset::string())? ;
 style-graphic-fill-properties-attlist ::= (draw:opacity::percent)? ;
 style-graphic-fill-properties-attlist ::= (draw:opacity-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (svg:fill-rule::("nonzero" | "evenodd"))? ;
common-draw-rel-size-attlist ::= common-draw-size-attlist (style:rel-width::(percent | "scale" | "scale-min"))? (style:rel-height::(percent | "scale" | "scale-min"))? ;
table-cut-offs ::= table:cut-offs::((table-movement-cut-off+) | (table-insertion-cut-off table-movement-cut-off*)) ;
draw-fill-image-attlist ::= draw:name::styleName ;
 draw-fill-image-attlist ::= (draw:display-name::string)? ;
 draw-fill-image-attlist ::= (svg:width::length)? (svg:height::length)? ;
table-content-validation ::= table:content-validation::(table-validation-attlist table-help-message? (table-error-message | (table-error-macro office-event-listeners?))?) ;
table-data-pilot-level ::= table:data-pilot-level::(table-data-pilot-level-attlist table-data-pilot-subtotals? table-data-pilot-members? table-data-pilot-display-info? table-data-pilot-sort-info? table-data-pilot-layout-info?) ;
style-text-properties-attlist ::= (fo:font-variant::fontVariant)? ;
 style-text-properties-attlist ::= (fo:text-transform::("none" | "lowercase" | "uppercase" | "capitalize"))? ;
 style-text-properties-attlist ::= (fo:color::color)? ;
 style-text-properties-attlist ::= (style:use-window-font-color::boolean)? ;
 style-text-properties-attlist ::= (style:text-outline::boolean)? ;
 style-text-properties-attlist ::= (style:text-line-through-type::lineType)? ;
 style-text-properties-attlist ::= (style:text-line-through-style::lineStyle)? ;
 style-text-properties-attlist ::= (style:text-line-through-width::lineWidth)? ;
 style-text-properties-attlist ::= (style:text-line-through-color::("font-color" | color))? ;
 style-text-properties-attlist ::= (style:text-line-through-text::string)? ;
 style-text-properties-attlist ::= (style:text-line-through-text-style::styleNameRef)? ;
 style-text-properties-attlist ::= (style:text-position::(percent | "super" | "sub" percent?))? ;
 style-text-properties-attlist ::= (style:font-name::string)? (style:font-name-asian::string)? (style:font-name-complex::string)? ;
 style-text-properties-attlist ::= (fo:font-family::string)? (style:font-family-asian::string)? (style:font-family-complex::string)? ;
 style-text-properties-attlist ::= (style:font-family-generic::fontFamilyGeneric)? (style:font-family-generic-asian::fontFamilyGeneric)? (style:font-family-generic-complex::fontFamilyGeneric)? ;
 style-text-properties-attlist ::= (style:font-style-name::string)? (style:font-style-name-asian::string)? (style:font-style-name-complex::string)? ;
 style-text-properties-attlist ::= (style:font-pitch::fontPitch)? (style:font-pitch-asian::fontPitch)? (style:font-pitch-complex::fontPitch)? ;
 style-text-properties-attlist ::= (style:font-charset::textEncoding)? ;
 style-text-properties-attlist ::= (fo:font-size::(positiveLength | percent))? (style:font-size-asian::(positiveLength | percent))? (style:font-size-complex::(positiveLength | percent))? ;
 style-text-properties-attlist ::= (style:font-size-rel::length)? (style:font-size-rel-asian::length)? (style:font-size-rel-complex::length)? ;
 style-text-properties-attlist ::= (style:script-type::("latin" | "asian" | "complex" | "ignore"))? ;
 style-text-properties-attlist ::= (fo:letter-spacing::(length | "normal"))? ;
 style-text-properties-attlist ::= (fo:language::languageCode)? (style:language-asian::languageCode)? (style:language-complex::languageCode)? ;
 style-text-properties-attlist ::= (fo:country::countryCode)? (style:country-asian::countryCode)? (style:country-complex::countryCode)? ;
 style-text-properties-attlist ::= (fo:font-style::fontStyle)? (style:font-style-asian::fontStyle)? (style:font-style-complex::fontStyle)? ;
 style-text-properties-attlist ::= (style:font-relief::("none" | "embossed" | "engraved"))? ;
 style-text-properties-attlist ::= (fo:text-shadow::shadowType)? ;
 style-text-properties-attlist ::= (style:text-underline-type::lineType)? ;
 style-text-properties-attlist ::= (style:text-underline-style::lineStyle)? ;
 style-text-properties-attlist ::= (style:text-underline-width::lineWidth)? ;
 style-text-properties-attlist ::= (style:text-underline-color::("font-color" | color))? ;
 style-text-properties-attlist ::= (fo:font-weight::fontWeight)? (style:font-weight-asian::fontWeight)? (style:font-weight-complex::fontWeight)? ;
 style-text-properties-attlist ::= (style:text-underline-mode::lineMode)? ;
 style-text-properties-attlist ::= (style:text-line-through-mode::lineMode)? ;
 style-text-properties-attlist ::= (style:letter-kerning::boolean)? ;
 style-text-properties-attlist ::= (style:text-blinking::boolean)? ;
 style-text-properties-attlist ::= common-background-color-attlist ;
 style-text-properties-attlist ::= (style:text-combine::("none" | "letters" | "lines"))? ;
 style-text-properties-attlist ::= (style:text-combine-start-char::character)? (style:text-combine-end-char::character)? ;
 style-text-properties-attlist ::= (style:text-emphasize::("none" | ("none" | "accent" | "dot" | "circle" | "disc" "above" | "below")))? ;
 style-text-properties-attlist ::= (style:text-scale::percent)? ;
 style-text-properties-attlist ::= (style:text-rotation-angle::integer)? ;
 style-text-properties-attlist ::= (style:text-rotation-scale::("fixed" | "line-height"))? ;
 style-text-properties-attlist ::= (fo:hyphenate::boolean)? ;
 style-text-properties-attlist ::= (fo:hyphenation-remain-char-count::positiveInteger)? ;
 style-text-properties-attlist ::= (fo:hyphenation-push-char-count::positiveInteger)? ;
 style-text-properties-attlist ::= (text:display::"true") | (text:display::"none") | (text:display::"condition" text:condition::"none") | ε ;
text-object-index-source ::= text:object-index-source::(text-object-index-source-attrs text-index-title-template? text-object-index-entry-template?) ;
style-table-column-properties-attlist ::= (style:column-width::positiveLength)? (style:rel-column-width::relativeLength)? ;
 style-table-column-properties-attlist ::= (style:use-optimal-column-width::boolean)? ;
 style-table-column-properties-attlist ::= common-break-attlist ;
office-meta-data ::= meta:generator::string ;
 office-meta-data ::= dc:title::string ;
 office-meta-data ::= dc:description::string ;
 office-meta-data ::= dc:subject::string ;
 office-meta-data ::= meta:keyword::string ;
 office-meta-data ::= meta:initial-creator::string ;
 office-meta-data ::= dc-creator ;
 office-meta-data ::= meta:printed-by::string ;
 office-meta-data ::= meta:creation-date::dateTime ;
 office-meta-data ::= dc-date ;
 office-meta-data ::= meta:print-date::dateTime ;
 office-meta-data ::= meta:template::(xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? (xlink:title::string)? (meta:date::dateTime)?) ;
 office-meta-data ::= meta:auto-reload::((xlink:type::"simple")? (xlink:show::"replace")? (xlink:actuate::"onLoad")? (xlink:href::anyURI)? (meta:delay::duration)?) ;
 office-meta-data ::= meta:hyperlink-behaviour::((office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))?) ;
 office-meta-data ::= dc:language::language ;
 office-meta-data ::= meta:editing-cycles::nonNegativeInteger ;
 office-meta-data ::= meta:editing-duration::duration ;
 office-meta-data ::= meta:document-statistic::((meta:page-count::nonNegativeInteger)? (meta:table-count::nonNegativeInteger)? (meta:draw-count::nonNegativeInteger)? (meta:image-count::nonNegativeInteger)? (meta:ole-object-count::nonNegativeInteger)? (meta:paragraph-count::nonNegativeInteger)? (meta:word-count::nonNegativeInteger)? (meta:character-count::nonNegativeInteger)? (frame-count::nonNegativeInteger)? (sentence-count::nonNegativeInteger)? (syllable-count::nonNegativeInteger)? (non-whitespace-character-count::nonNegativeInteger)? (meta:row-count::nonNegativeInteger)? (meta:cell-count::nonNegativeInteger)? (meta:object-count::nonNegativeInteger)?) ;
 office-meta-data ::= meta:user-defined::(meta:name::string (meta:value-type::"float" double) | (meta:value-type::"date" dateOrDateTime) | (meta:value-type::"time" duration) | (meta:value-type::"boolean" boolean) | (meta:value-type::"string" string) | string()) ;
draw-enhanced-geometry ::= draw:enhanced-geometry::(draw-enhanced-geometry-attlist draw-equation* draw-handle*) ;
text-bibliography-entry-template ::= text:bibliography-entry-template::(text-bibliography-entry-template-attrs (text-index-entry-span | text-index-entry-tab-stop | text-index-entry-bibliography)*) ;
form-checkbox-attlist ::= form-control-attlist common-disabled-attlist label common-printable-attlist common-tab-attlist common-title-attlist common-value-attlist common-data-field-attlist common-form-visual-effect-attlist common-form-relative-image-position-attlist ;
 form-checkbox-attlist ::= (form:current-state::states)? ;
 form-checkbox-attlist ::= (form:is-tristate::boolean)? ;
 form-checkbox-attlist ::= (form:state::states)? ;
presentation-sound ::= presentation:sound::(presentation-sound-attlist xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? (xlink:show::("new" | "replace"))?) ;
common-draw-circle-ellipse-attlist ::= (svg:cx::coordinate svg:cy::coordinate)? ;
 common-draw-circle-ellipse-attlist ::= (draw:kind::("full" | "section" | "cut" | "arc"))? ;
 common-draw-circle-ellipse-attlist ::= (draw:start-angle::double)? ;
 common-draw-circle-ellipse-attlist ::= (draw:end-angle::double)? ;
table-table-source ::= table:table-source::(table-table-source-attlist table-linked-source-attlist) ;
text-page-number-attlist ::= common-field-num-format-attlist common-field-fixed-attlist ;
 text-page-number-attlist ::= (text:page-adjust::integer)? ;
 text-page-number-attlist ::= (text:select-page::("previous" | "current" | "next"))? ;
style-background-image ::= (style:background-image::(style-background-image-attlist common-draw-data-attlist | office-binary-data | ε))? ;
style-style ::= style:style::(style-style-attlist style-style-content style-map*) ;
dr3d-cube-attlist ::= (dr3d:min-edge::vector3D)? (dr3d:max-edge::vector3D)? ;
form-property-type-and-value-list ::= (office:value-type::"float" (form:list-value::(office:value::double))*) | (office:value-type::"percentage" (form:list-value::(office:value::double))*) | (office:value-type::"currency" (form:list-value::(office:value::double (office:currency::string)?))*) | (office:value-type::"date" (form:list-value::(office:date-value::dateOrDateTime))*) | (office:value-type::"time" (form:list-value::(office:time-value::duration))*) | (office:value-type::"boolean" (form:list-value::(office:boolean-value::boolean))*) | (office:value-type::"string" (form:list-value::(office:string-value::string))*) | (office:value-type::"void") ;
draw-enhanced-geometry-attlist ::= (draw:type::custom-shape-type)? ;
 draw-enhanced-geometry-attlist ::= (svg:viewBox::(integer integer integer integer))? ;
 draw-enhanced-geometry-attlist ::= (draw:mirror-vertical::boolean)? (draw:mirror-horizontal::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-rotate-angle::double)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:concentric-gradient-fill-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-brightness::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-depth::(length double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-diffusion::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-number-of-line-segments::integer)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-light-face::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-harsh::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-harsh::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-level::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-level::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-direction::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-direction::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-metal::boolean)? ;
 draw-enhanced-geometry-attlist ::= (dr3d:shade-mode::("flat" | "phong" | "gouraud" | "draft"))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-rotation-angle::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-rotation-center::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-shininess::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-skew::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-specularity::percent)? ;
 draw-enhanced-geometry-attlist ::= (dr3d:projection::("parallel" | "perspective"))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-viewpoint::point3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-origin::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-color::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:enhanced-path::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:path-stretchpoint-x::double)? (draw:path-stretchpoint-y::double)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-areas::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-points::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-point-type::("none" | "segments" | "rectangle"))? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-point-leaving-directions::string())? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-mode::("normal" | "path" | "shape"))? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-scale::("path" | "shape"))? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-same-letter-heights::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:modifiers::string)? ;
style-presentation-page-layout ::= style:presentation-page-layout::(style:name::styleName (style:display-name::string)? presentation-placeholder*) ;
draw-floating-frame ::= draw:floating-frame::(draw-floating-frame-attlist common-draw-data-attlist) ;
text-alphabetical-index-auto-mark-file ::= text:alphabetical-index-auto-mark-file::(xlink:href::anyURI (xlink:type::"simple")?) ;
draw-gradient-attlist ::= (draw:start-color::color)? (draw:end-color::color)? ;
 draw-gradient-attlist ::= (draw:start-intensity::percent)? (draw:end-intensity::percent)? ;
style-background-image-attlist ::= (style:repeat::("no-repeat" | "repeat" | "stretch"))? ;
 style-background-image-attlist ::= (style:position::("left" | "center" | "right" | "top" | "bottom" | (horiBackPos vertBackPos) | (vertBackPos horiBackPos)))? ;
 style-background-image-attlist ::= (style:filter-name::string)? ;
 style-background-image-attlist ::= (draw:opacity::percent)? ;
form-text-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist ;
draw-opacity ::= draw:opacity::(common-draw-gradient-attlist draw-opacity-attlist) ;
table-linked-source-attlist ::= (xlink:type::"simple")? (xlink:actuate::"onRequest")? xlink:href::anyURI ;
 table-linked-source-attlist ::= (table:filter-name::string)? ;
 table-linked-source-attlist ::= (table:filter-options::string)? ;
 table-linked-source-attlist ::= (table:refresh-delay::duration)? ;
text-table-of-content ::= text:table-of-content::(sectionAttr text-table-of-content-source text-index-body) ;
text-tracked-changes ::= (text:tracked-changes::(text-tracked-changes-attr text-changed-region*))? ;
form-column ::= form:column::(form-column-attlist column-controls+) ;
text-outline-level-style ::= text:outline-level-style::(text-outline-level-style-attlist style-list-level-properties? style-text-properties?) ;
form-item ::= form:item::(form-item-attlist string()) ;
style-table-column-properties-content-strict ::= style-table-column-properties-attlist style-table-column-properties-elements ;
text-index-source-styles ::= text:index-source-styles::(text:outline-level::positiveInteger text-index-source-style*) ;
text-section-attr ::= sectionAttr ;
 text-section-attr ::= (text:display::("true" | "none")) | (text:display::"condition" text:condition::string) | ε ;
number-day-of-week ::= number:day-of-week::(number-day-of-week-attlist common-calendar-attlist) ;
draw-opacity-attlist ::= (draw:start::percent)? (draw:end::percent)? ;
style-table-row-properties-attlist ::= (style:row-height::positiveLength)? (style:min-row-height::nonNegativeLength)? ;
 style-table-row-properties-attlist ::= (style:use-optimal-row-height::boolean)? ;
 style-table-row-properties-attlist ::= common-background-color-attlist ;
 style-table-row-properties-attlist ::= common-break-attlist ;
 style-table-row-properties-attlist ::= (fo:keep-together::("auto" | "always"))? ;
style-section-properties-content-strict ::= style-section-properties-attlist style-section-properties-elements ;
text-bibliography-configuration ::= text:bibliography-configuration::(text-bibliography-configuration-attlist text-sort-key*) ;
chart-footer ::= chart:footer::(chart-title-attlist text-p?) ;
style-table-row-properties-content-strict ::= style-table-row-properties-attlist style-table-row-properties-elements ;
text-decls ::= (text:variable-decls::(text-variable-decl*))? (text:sequence-decls::(text-sequence-decl*))? (text:user-field-decls::(text-user-field-decl*))? (text:dde-connection-decls::(text-dde-connection-decl*))? text-alphabetical-index-auto-mark-file? ;
table-subtotal-rule ::= table:subtotal-rule::(table-subtotal-rule-attlist table-subtotal-field*) ;
text-list-style ::= text:list-style::(text-list-style-attr text-list-style-content*) ;
common-value-and-type-attlist ::= (office:value-type::"float" office:value::double) | (office:value-type::"percentage" office:value::double) | (office:value-type::"currency" office:value::double (office:currency::string)?) | (office:value-type::"date" office:date-value::dateOrDateTime) | (office:value-type::"time" office:time-value::duration) | (office:value-type::"boolean" office:boolean-value::boolean) | (office:value-type::"string" (office:string-value::string)?) ;
text-time-attlist ::= common-field-fixed-attlist common-field-data-style-name-attlist ;
 text-time-attlist ::= (text:time-value::timeOrDateTime)? ;
 text-time-attlist ::= (text:time-adjust::duration)? ;
common-timing-attlist ::= common-basic-timing-attlist common-restart-timing-attlist common-restart-default-attlist common-fill-timing-attlist common-fill-default-attlist common-time-manip-attlist ;
common-basic-timing-attlist ::= common-begin-end-timing-attlist common-dur-timing-attlist common-repeat-timing-attlist ;
draw-caption ::= draw:caption::(draw-caption-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
office-text-content-main ::= (text-content*) | (text-page-sequence (draw-a | shape)*) ;
table-functions ::= table-named-expressions? table-database-ranges? table-data-pilot-tables? table-consolidation? table-dde-links? ;
form-combobox-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist dropdown common-maxlength-attlist common-printable-attlist common-readonly-attlist size common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist list-source list-source-type ;
 form-combobox-attlist ::= (form:auto-complete::boolean)? ;
table-filter ::= table:filter::(table-filter-attlist table-filter-condition | table-filter-and | table-filter-or) ;
office-presentation-content-prelude ::= text-decls table-decls presentation-decls ;
form-listbox-attlist ::= form-control-attlist common-disabled-attlist dropdown common-printable-attlist size common-tab-attlist common-title-attlist bound-column common-data-field-attlist list-source list-source-type ;
 form-listbox-attlist ::= (form:multiple::boolean)? ;
 form-listbox-attlist ::= (form:xforms-list-source::string)? ;
style-table-cell-properties-attlist ::= (style:vertical-align::("top" | "middle" | "bottom" | "automatic"))? ;
 style-table-cell-properties-attlist ::= (style:text-align-source::("fix" | "value-type"))? ;
 style-table-cell-properties-attlist ::= common-style-direction-attlist ;
 style-table-cell-properties-attlist ::= (style:glyph-orientation-vertical::("auto" | "0"))? ;
 style-table-cell-properties-attlist ::= common-shadow-attlist ;
 style-table-cell-properties-attlist ::= common-background-color-attlist ;
 style-table-cell-properties-attlist ::= common-border-attlist ;
 style-table-cell-properties-attlist ::= (style:diagonal-tl-br::string)? (style:diagonal-tl-br-widths::borderWidths)? (style:diagonal-bl-tr::string)? (style:diagonal-bl-tr-widths::borderWidths)? ;
 style-table-cell-properties-attlist ::= common-border-line-width-attlist ;
 style-table-cell-properties-attlist ::= common-padding-attlist ;
 style-table-cell-properties-attlist ::= (fo:wrap-option::("no-wrap" | "wrap"))? ;
 style-table-cell-properties-attlist ::= common-rotation-angle-attlist ;
 style-table-cell-properties-attlist ::= (style:rotation-align::("none" | "bottom" | "top" | "center"))? ;
 style-table-cell-properties-attlist ::= (style:cell-protect::("none" | "hidden-and-protected" | (("protected" | "formula-hidden")+)))? ;
 style-table-cell-properties-attlist ::= (style:print-content::boolean)? ;
 style-table-cell-properties-attlist ::= (style:decimal-places::nonNegativeInteger)? ;
 style-table-cell-properties-attlist ::= (style:repeat-content::boolean)? ;
 style-table-cell-properties-attlist ::= (style:shrink-to-fit::boolean)? ;
draw-ellipse ::= draw:ellipse::(common-draw-circle-ellipse-attlist draw-ellipse-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
text-alphabetical-index-mark-attrs ::= (text:key1::string)? (text:key2::string)? ;
 text-alphabetical-index-mark-attrs ::= (text:string-value-phonetic::string)? (text:key1-phonetic::string)? (text:key2-phonetic::string)? ;
 text-alphabetical-index-mark-attrs ::= (text:main-entry::boolean)? ;
number-currency-symbol ::= number:currency-symbol::(number-currency-symbol-attlist string()) ;
presentation-notes ::= presentation:notes::(common-presentation-header-footer-attlist presentation-notes-attlist shape*) ;
number-number ::= number:number::(number-number-attlist common-decimal-places-attlist common-number-attlist number-embedded-text*) ;
common-repeat-timing-attlist ::= (smil:repeatDur::string smil:repeatCount::nonNegativeInteger)? ;
office-presentation-content-epilogue ::= presentation-settings table-functions ;
table-database-range ::= table:database-range::(table-database-range-attlist (table-database-source-sql | table-database-source-table | table-database-source-query)? table-filter? table-sort? table-subtotal-rules?) ;
form-value-range-attlist ::= form-control-attlist common-disabled-attlist common-printable-attlist common-tab-attlist common-title-attlist common-value-attlist ;
 form-value-range-attlist ::= (form:max-value::string)? ;
 form-value-range-attlist ::= (form:min-value::string)? ;
 form-value-range-attlist ::= (form:step-size::positiveInteger)? ;
 form-value-range-attlist ::= (form:page-step-size::positiveInteger)? ;
 form-value-range-attlist ::= (form:delay-for-repeat::duration)? ;
 form-value-range-attlist ::= (form:orientation::("horizontal" | "vertical"))? ;
table-decls ::= table-calculation-settings? table-content-validations? table-label-ranges? ;
number-boolean-style ::= number:boolean-style::(common-data-style-attlist style-text-properties? number-text? (number-boolean number-text?)? style-map*) ;
config-config-item-set ::= config:config-item-set::(config-config-item-set-attlist config-items) ;
style-table-cell-properties-content-strict ::= style-table-cell-properties-attlist style-table-cell-properties-elements ;
text-bibliography-source ::= text:bibliography-source::(text-index-title-template? text-bibliography-entry-template*) ;
text-section ::= text:section::(text-section-attr text-section-source | text-section-source-dde | ε text-content*) ;
text-sort-key-attlist ::= text:key::("address" | "annote" | "author" | "bibliography-type" | "booktitle" | "chapter" | "custom1" | "custom2" | "custom3" | "custom4" | "custom5" | "edition" | "editor" | "howpublished" | "identifier" | "institution" | "isbn" | "issn" | "journal" | "month" | "note" | "number" | "organizations" | "pages" | "publisher" | "report-type" | "school" | "series" | "title" | "url" | "volume" | "year") (text:sort-ascending::boolean)? ;
number-currency-symbol-attlist ::= (number:language::languageCode)? (number:country::countryCode)? ;
text-list-item ::= text:list-item::(text-list-item-attr text-list-item-content) ;
style-list-level-properties-attlist ::= common-text-align ;
 style-list-level-properties-attlist ::= (text:space-before::nonNegativeLength)? ;
 style-list-level-properties-attlist ::= (text:min-label-width::nonNegativeLength)? ;
 style-list-level-properties-attlist ::= (text:min-label-distance::nonNegativeLength)? ;
 style-list-level-properties-attlist ::= (style:font-name::string)? ;
 style-list-level-properties-attlist ::= (fo:width::positiveLength)? (fo:height::positiveLength)? ;
 style-list-level-properties-attlist ::= common-vertical-rel-attlist common-vertical-pos-attlist ;
text-list-level-style-number-attr ::= (text:style-name::styleNameRef)? ;
 text-list-level-style-number-attr ::= common-num-format-attlist common-num-format-prefix-suffix-attlist ;
 text-list-level-style-number-attr ::= (text:display-levels::positiveInteger)? ;
 text-list-level-style-number-attr ::= (text:start-value::positiveInteger)? ;
number-year ::= number:year::(number-year-attlist common-calendar-attlist) ;
common-border-attlist ::= (fo:border::string)? (fo:border-top::string)? (fo:border-bottom::string)? (fo:border-left::string)? (fo:border-right::string)? ;
text-index-entry-span ::= text:index-entry-span::((text:style-name::styleNameRef)? string()) ;
text-date-attlist ::= common-field-fixed-attlist common-field-data-style-name-attlist ;
 text-date-attlist ::= (text:date-value::dateOrDateTime)? ;
 text-date-attlist ::= (text:date-adjust::duration)? ;
text-user-field-decl ::= text:user-field-decl::(common-field-name-attlist common-field-formula-attlist? common-value-and-type-attlist) ;
table-sort ::= table:sort::(table-sort-attlist table-sort-by+) ;
currency-symbol-and-text ::= number-currency-symbol number-text? ;
table-change-track-table-cell-attlist ::= (table:cell-address::cellAddress)? ;
 table-change-track-table-cell-attlist ::= (table:matrix-covered::boolean)? ;
 table-change-track-table-cell-attlist ::= (table:formula::string)? (table:number-matrix-columns-spanned::positiveInteger)? (table:number-matrix-rows-spanned::positiveInteger)? common-value-and-type-attlist? ;
text-illustration-index-source ::= text:illustration-index-source::(text-illustration-index-source-attrs text-index-title-template? text-illustration-index-entry-template?) ;
number-number-style ::= number:number-style::(common-data-style-attlist style-text-properties? number-text? (any-number number-text?)? style-map*) ;
chart-axis ::= chart:axis::(chart-axis-attlist chart-title? chart-categories? chart-grid*) ;
draw-custom-shape ::= draw:custom-shape::(draw-custom-shape-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text draw-enhanced-geometry?) ;
form-form ::= form:form::(common-form-control-attlist form-form-attlist form-properties? office-event-listeners? (controls | form-form)* form-connection-resource?) ;
common-table-cell-range-address-attlist ::= table:start-column::integer table:start-row::integer table:start-table::integer table:end-column::integer table:end-row::integer table:end-table::integer ;
common-draw-gradient-attlist ::= (draw:name::styleName)? ;
 common-draw-gradient-attlist ::= (draw:display-name::string)? ;
 common-draw-gradient-attlist ::= draw:style::gradient-style ;
 common-draw-gradient-attlist ::= (draw:cx::percent)? (draw:cy::percent)? ;
 common-draw-gradient-attlist ::= (draw:angle::integer)? ;
 common-draw-gradient-attlist ::= (draw:border::percent)? ;
style-header ::= style:header::(common-style-header-footer-attlist header-footer-content) ;
draw-polyline ::= draw:polyline::(common-draw-points-attlist common-draw-position-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
text-numbered-paragraph ::= text:numbered-paragraph::(text-numbered-paragraph-attr text-number? text-p | text-h) ;
number-quarter ::= number:quarter::(number-quarter-attlist common-calendar-attlist) ;
config-config-item-map-entry ::= config:config-item-map-entry::(config-config-item-map-entry-attlist config-items) ;
office-document-meta ::= office:document-meta::(office-document-common-attrs office-meta) ;
text-alphabetical-index-entry-template ::= text:alphabetical-index-entry-template::(text-alphabetical-index-entry-template-attrs (text-index-entry-chapter | text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop)*) ;
common-draw-data-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:show::"embed")? (xlink:actuate::"onLoad")? ;
table-data-pilot-field ::= table:data-pilot-field::(table-data-pilot-field-attlist table-data-pilot-level? table-data-pilot-field-reference? table-data-pilot-groups?) ;
text-table-of-content-entry-template ::= text:table-of-content-entry-template::(text-table-of-content-entry-template-attlist text-table-of-content-children*) ;
draw-g ::= draw:g::(draw-g-attlist common-draw-z-index-attlist common-draw-name-attlist common-draw-id-attlist common-draw-style-name-attlist common-text-spreadsheet-shape-attlist office-event-listeners? draw-glue-point* shape*) ;
table-named-range-attlist ::= table:name::string table:cell-range-address::cellRangeAddress (table:base-cell-address::cellAddress)? (table:range-usable-as::("none" | (("print-range" | "filter" | "repeat-row" | "repeat-column")+)))? ;
table-table-row ::= table:table-row::(table-table-row-attlist (table-table-cell | table-covered-table-cell)+) ;
draw-a ::= draw:a::(draw-a-attlist draw-frame) ;
table-previous ::= table:previous::((table:id::string)? table-change-track-table-cell) ;
common-draw-shape-with-text-and-styles-attlist ::= common-draw-shape-with-styles-attlist common-draw-text-style-name-attlist ;
table-detective ::= table:detective::(table-highlighted-range* table-operation*) ;
number-text-style ::= number:text-style::(common-data-style-attlist style-text-properties? number-text? (number-text-content number-text?)* style-map*) ;
svg-font-face-uri ::= svg:font-face-uri::(common-svg-font-face-xlink-attlist svg-font-face-format*) ;
common-num-format-prefix-suffix-attlist ::= (style:num-prefix::string)? (style:num-suffix::string)? ;
text-list-style-content ::= text:list-level-style-number::(text-list-level-style-attr text-list-level-style-number-attr style-list-level-properties? style-text-properties?) ;
 text-list-style-content ::= text:list-level-style-bullet::(text-list-level-style-attr text-list-level-style-bullet-attr style-list-level-properties? style-text-properties?) ;
 text-list-style-content ::= text:list-level-style-image::(text-list-level-style-attr text-list-level-style-image-attr style-list-level-properties?) ;
common-svg-gradient-attlist ::= (svg:gradientUnits::"objectBoundingBox")? (svg:gradientTransform::string)? (svg:spreadMethod::("pad" | "reflect" | "repeat"))? ;
 common-svg-gradient-attlist ::= draw:name::styleName ;
 common-svg-gradient-attlist ::= (draw:display-name::string)? ;
style-page-layout ::= style:page-layout::(style-page-layout-attlist style-page-layout-properties? style-header-style? style-footer-style?) ;
draw-a-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? ;
 draw-a-attlist ::= (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? ;
 draw-a-attlist ::= (office:name::string)? ;
 draw-a-attlist ::= (office:server-map::boolean)? ;
common-form-relative-image-position-attlist ::= ((form:image-position::"center")?) | (form:image-position::("start" | "end" | "top" | "bottom") (form:image-align::("start" | "center" | "end"))?) ;
office-spreadsheet-content-prelude ::= table-tracked-changes? text-decls table-decls ;
number-fraction ::= number:fraction::(number-fraction-attlist common-number-attlist) ;
common-draw-area-attlist ::= (xlink:href::anyURI)? (xlink:type::"simple")? (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? ;
 common-draw-area-attlist ::= (office:name::string)? ;
 common-draw-area-attlist ::= (draw:nohref::"nohref")? ;
text-bibliography ::= text:bibliography::(sectionAttr text-bibliography-source text-index-body) ;
table-dde-link ::= table:dde-link::(office-dde-source table-table) ;
table-table-attlist ::= (table:name::string)? ;
 table-table-attlist ::= (table:style-name::styleNameRef)? ;
 table-table-attlist ::= (table:protected::boolean)? (table:protection-key::string())? ;
 table-table-attlist ::= (table:print::boolean)? ;
 table-table-attlist ::= (table:print-ranges::cellRangeAddressList)? ;
 table-table-attlist ::= (table:is-sub-table::boolean)? ;
--------------------odf::opendoc-1.1-manifest.bgf--------------------
encryption-data ::= manifest:encryption-data::(encryption-data-attlist algorithm key-derivation) ;
file-entry ::= manifest:file-entry::(file-entry-attlist encryption-data?) ;
--------------------odf::opendoc-1.1-strict.bgf--------------------
style-footnote-sep-attlist ::= (style:width::length)? (style:rel-width::percent)? (style:color::color)? (style:line-style::lineStyle)? (style:adjustment::("left" | "center" | "right"))? (style:distance-before-sep::length)? (style:distance-after-sep::length)? ;
style-font-face ::= style:font-face::(style-font-face-attlist svg-font-face-src? svg-definition-src?) ;
svg-linearGradient ::= svg:linearGradient::(common-svg-gradient-attlist (svg:x1::(coordinate | percent))? (svg:y1::(coordinate | percent))? (svg:x2::(coordinate | percent))? (svg:y2::(coordinate | percent))? svg-stop*) ;
number-currency-style ::= number:currency-style::(common-data-style-attlist common-auto-reorder-attlist style-text-properties? number-text? ((number-and-text currency-symbol-and-text?) | (currency-symbol-and-text number-and-text?))? style-map*) ;
table-covered-table-cell ::= table:covered-table-cell::(table-table-cell-attlist table-table-cell-content) ;
style-page-layout-properties-content-strict ::= style-page-layout-properties-attlist style-page-layout-properties-elements ;
text-notes-configuration-content ::= text-note-class ;
 text-notes-configuration-content ::= (text:citation-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:citation-body-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:default-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:master-page-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:start-value::nonNegativeInteger)? ;
 text-notes-configuration-content ::= common-num-format-prefix-suffix-attlist common-num-format-attlist? ;
 text-notes-configuration-content ::= (text:start-numbering-at::("document" | "chapter" | "page"))? ;
 text-notes-configuration-content ::= (text:footnotes-position::("text" | "page" | "section" | "document"))? ;
 text-notes-configuration-content ::= (text:note-continuation-notice-forward::string())? ;
 text-notes-configuration-content ::= (text:note-continuation-notice-backward::string())? ;
text-user-index-entry-template ::= text:user-index-entry-template::(text-user-index-entry-template-attrs (text-index-entry-chapter | text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop)*) ;
text-list-item-content ::= text-number? (text-p | text-h | text-list | text-soft-page-break)* ;
table-table-cell-range-source-attlist ::= table:name::string ;
 table-table-cell-range-source-attlist ::= table:last-column-spanned::positiveInteger table:last-row-spanned::positiveInteger ;
style-header-footer-properties-content-strict ::= style-header-footer-properties-attlist style-header-footer-properties-elements ;
number-scientific-number ::= number:scientific-number::(number-scientific-number-attlist common-decimal-places-attlist common-number-attlist) ;
presentation-hide-shape ::= presentation:hide-shape::(common-presentation-effect-attlist presentation-sound?) ;
draw-object ::= draw:object::(draw-object-attlist common-draw-data-attlist | office-document | math-math) ;
common-svg-font-face-xlink-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? ;
presentation-hide-text ::= presentation:hide-text::(common-presentation-effect-attlist presentation-sound?) ;
style-drawing-page-properties-content-strict ::= style-graphic-fill-properties-attlist style-drawing-page-properties-attlist style-drawing-page-properties-elements ;
draw-area-polygon ::= draw:area-polygon::(common-draw-area-attlist svg:x::coordinate svg:y::coordinate svg:width::length svg:height::length common-draw-viewbox-attlist common-draw-points-attlist svg-title? svg-desc? office-event-listeners?) ;
style-ruby-properties-content-strict ::= style-ruby-properties-attlist style-ruby-properties-elements ;
office-forms ::= (office:forms::(office-forms-attlist (form-form | xforms-model)*))? ;
draw-plugin ::= draw:plugin::(draw-plugin-attlist common-draw-data-attlist draw-param*) ;
office-drawing-content-prelude ::= text-decls table-decls ;
draw-area-rectangle ::= draw:area-rectangle::(common-draw-area-attlist svg:x::coordinate svg:y::coordinate svg:width::length svg:height::length svg-title? svg-desc? office-event-listeners?) ;
form-file-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist ;
table-table-rows ::= table:table-rows::((text-soft-page-break? table-table-row)+) ;
number-date-style ::= number:date-style::(common-data-style-attlist common-auto-reorder-attlist common-format-source-attlist style-text-properties? number-text? (any-date number-text?)+ style-map*) ;
draw-measure ::= draw:measure::(draw-measure-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
table-table-cell-attlist-extra ::= (table:number-columns-spanned::positiveInteger)? (table:number-rows-spanned::positiveInteger)? ;
 table-table-cell-attlist-extra ::= (table:number-matrix-columns-spanned::positiveInteger)? (table:number-matrix-rows-spanned::positiveInteger)? ;
common-text-spreadsheet-shape-attlist ::= (table:end-cell-address::cellAddress)? (table:end-x::coordinate)? (table:end-y::coordinate)? ;
 common-text-spreadsheet-shape-attlist ::= (table:table-background::boolean)? ;
 common-text-spreadsheet-shape-attlist ::= common-text-anchor-attlist ;
draw-control ::= draw:control::(draw-control-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? draw-glue-point*) ;
text-p ::= text:p::(paragraph-attrs paragraph-content*) ;
draw-line-attlist ::= svg:x1::coordinate svg:y1::coordinate ;
 draw-line-attlist ::= svg:x2::coordinate svg:y2::coordinate ;
table-movement ::= table:movement::(common-table-change-attlist table-source-range-address table-target-range-address office-change-info table-dependencies? table-deletions?) ;
svg-stop ::= svg:stop::(svg:offset::(double | percent) (svg:stop-color::color)? (svg:stop-opacity::double)?) ;
style-tab-stop-attlist ::= style:position::nonNegativeLength ;
 style-tab-stop-attlist ::= ((style:type::("left" | "center" | "right"))?) | (style:type::"char" style-tab-stop-char-attlist) ;
 style-tab-stop-attlist ::= (style:leader-type::lineType)? ;
 style-tab-stop-attlist ::= (style:leader-style::lineStyle)? ;
 style-tab-stop-attlist ::= (style:leader-width::lineWidth)? ;
 style-tab-stop-attlist ::= (style:leader-color::("font-color" | color))? ;
 style-tab-stop-attlist ::= (style:leader-text::string)? ;
 style-tab-stop-attlist ::= (style:leader-text-style::styleNameRef)? ;
text-h ::= text:h::(heading-attrs paragraph-attrs text-number? paragraph-content*) ;
text-table-of-content-source ::= text:table-of-content-source::(text-table-of-content-source-attlist text-index-title-template? text-table-of-content-entry-template* text-index-source-styles*) ;
form-hidden-attlist ::= form-control-attlist common-value-attlist ;
text-index-entry-tab-stop-attrs ::= (style:leader-char::character)? ;
 text-index-entry-tab-stop-attrs ::= (style:type::"right") | (style:type::"left" style:position::length) ;
table-source-cell-range ::= table:source-cell-range::(table-source-cell-range-attlist table-filter?) ;
office-document-settings ::= office:document-settings::(office-document-common-attrs office-settings) ;
style-columns ::= (style:columns::(style-columns-attlist style-column-sep? style-column*))? ;
dr3d-sphere ::= dr3d:sphere::(dr3d-sphere-attlist common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-dr3d-transform-attlist) ;
number-time-style ::= number:time-style::(number-time-style-attlist common-data-style-attlist common-format-source-attlist style-text-properties? number-text? (any-time number-text?)+ style-map*) ;
text-table-index-source ::= text:table-index-source::(text-illustration-index-source-attrs text-index-title-template? text-table-index-entry-template?) ;
office-automatic-styles ::= (office:automatic-styles::(styles style-page-layout*))? ;
animation-element ::= anim:animate::(common-anim-target-attlist common-anim-named-target-attlist common-anim-values-attlist common-anim-spline-mode-attlist common-spline-anim-value-attlist common-timing-attlist common-anim-add-accum-attlist) ;
 animation-element ::= anim:set::(common-anim-target-attlist common-anim-named-target-attlist common-anim-set-values-attlist common-timing-attlist common-anim-add-accum-attlist) ;
 animation-element ::= anim:animateMotion::(anim-animate-motion-attlist common-anim-target-attlist common-anim-named-target-attlist common-anim-add-accum-attlist common-anim-values-attlist common-timing-attlist common-spline-anim-value-attlist) ;
 animation-element ::= anim:animateColor::(common-anim-target-attlist common-anim-named-target-attlist common-anim-add-accum-attlist common-anim-values-attlist common-anim-spline-mode-attlist common-spline-anim-value-attlist anim-animate-color-attlist common-timing-attlist) ;
 animation-element ::= anim:animateTransform::(common-anim-target-attlist common-anim-named-target-attlist common-anim-add-accum-attlist common-anim-values-attlist anim-animate-transform-attlist common-timing-attlist) ;
 animation-element ::= anim:transitionFilter::(common-anim-target-attlist common-anim-add-accum-attlist common-anim-values-attlist common-anim-spline-mode-attlist anim-transition-filter-attlist common-timing-attlist) ;
 animation-element ::= anim:par::(common-anim-attlist common-timing-attlist common-endsync-timing-attlist animation-element*) ;
 animation-element ::= anim:seq::(common-anim-attlist common-endsync-timing-attlist common-timing-attlist animation-element*) ;
 animation-element ::= anim:iterate::(common-anim-attlist anim-iterate-attlist common-timing-attlist common-endsync-timing-attlist animation-element*) ;
 animation-element ::= anim:audio::(common-anim-attlist anim-audio-attlist common-basic-timing-attlist) ;
 animation-element ::= anim:command::(common-anim-attlist anim-command-attlist common-begin-end-timing-attlist common-anim-target-attlist (anim:param::(anim:name::string() anim:value::string()))*) ;
text-dde-connection-decl ::= text:dde-connection-decl::(text-dde-connection-decl-attlist common-dde-connection-decl-attlist) ;
draw-polygon ::= draw:polygon::(common-draw-points-attlist common-draw-position-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
anyAttListOrElements ::= string()* anyElements ;
common-numeric-control-attlist ::= form-control-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-convert-empty-attlist common-data-field-attlist ;
chart-title ::= chart:title::(chart-title-attlist text-p?) ;
table-data-pilot-group ::= table:data-pilot-group::(table-data-pilot-group-attlist table-data-pilot-group-member+) ;
draw-frame ::= draw:frame::(common-draw-shape-with-text-and-styles-attlist common-draw-position-attlist common-draw-rel-size-attlist common-draw-caption-id-attlist presentation-shape-attlist draw-frame-attlist (draw-text-box | draw-image | draw-object | draw-object-ole | draw-applet | draw-floating-frame | draw-plugin)* office-event-listeners? draw-glue-point* draw-image-map? svg-title? svg-desc? (draw-contour-polygon | draw-contour-path)?) ;
form-radio-attlist ::= form-control-attlist current-selected common-disabled-attlist label common-printable-attlist selected common-tab-attlist common-title-attlist common-value-attlist common-data-field-attlist common-form-visual-effect-attlist common-form-relative-image-position-attlist ;
dr3d-cube ::= dr3d:cube::(dr3d-cube-attlist common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-dr3d-transform-attlist) ;
common-form-control-content ::= form-properties? office-event-listeners? ;
form-grid-attlist ::= form-control-attlist common-disabled-attlist common-printable-attlist common-tab-attlist common-title-attlist ;
form-option ::= form:option::(form-option-attlist string()) ;
table-iteration ::= table:iteration::((table:status::("enable" | "disable"))? (table:steps::positiveInteger)? (table:maximum-difference::double)?) ;
presentation-event-listener ::= presentation:event-listener::(presentation-event-listener-attlist presentation-sound?) ;
draw-gradient ::= draw:gradient::(common-draw-gradient-attlist draw-gradient-attlist) ;
text-user-index-source ::= text:user-index-source::(text-user-index-source-attr text-index-title-template? text-user-index-entry-template* text-index-source-styles*) ;
text-index-entry-chapter ::= text:index-entry-chapter::((text:style-name::styleNameRef)? text-index-entry-chapter-attrs) ;
draw-text-box ::= draw:text-box::(draw-text-box-attlist text-content*) ;
draw-image ::= draw:image::(draw-image-attlist common-draw-data-attlist | office-binary-data draw-text) ;
table-data-pilot-field-reference-attlist ::= table:field-name::string ;
 table-data-pilot-field-reference-attlist ::= (table:member-type::"named" table:member-name::string) | (table:member-type::("previous" | "next")) ;
 table-data-pilot-field-reference-attlist ::= table:type::("none" | "member-difference" | "member-percentage" | "member-percentage-difference" | "running-total" | "row-percentage" | "column-percentage" | "total-percentage" | "index") ;
form-option-attlist ::= current-selected selected label common-value-attlist ;
common-break-attlist ::= (fo:break-before::("auto" | "column" | "page"))? (fo:break-after::("auto" | "column" | "page"))? ;
table-table-row-group ::= table:table-row-group::(table-table-row-group-attlist table-rows-and-groups) ;
table-data-pilot-groups ::= table:data-pilot-groups::(table-data-pilot-groups-attlist table-data-pilot-group+) ;
presentation-event-listener-attlist ::= script:event-name::string ;
 presentation-event-listener-attlist ::= presentation:action::("none" | "previous-page" | "next-page" | "first-page" | "last-page" | "hide" | "stop" | "execute" | "show" | "verb" | "fade-out" | "sound") ;
 presentation-event-listener-attlist ::= (presentation:effect::presentationEffects)? ;
 presentation-event-listener-attlist ::= (presentation:direction::presentationEffectDirections)? ;
 presentation-event-listener-attlist ::= (presentation:speed::presentationSpeeds)? ;
 presentation-event-listener-attlist ::= (presentation:start-scale::percent)? ;
 presentation-event-listener-attlist ::= (xlink:href::anyURI)? (xlink:type::"simple")? (xlink:show::"embed")? (xlink:actuate::"onRequest")? ;
 presentation-event-listener-attlist ::= (presentation:verb::nonNegativeInteger)? ;
draw-layer ::= draw:layer::(draw-layer-attlist svg-title? svg-desc?) ;
header-footer-content ::= (text-tracked-changes text-decls (text-h | text-p | text-list | table-table | text-section | text-table-of-content | text-illustration-index | text-table-index | text-object-index | text-user-index | text-alphabetical-index | text-bibliography | text-index-title | change-marks)*) | (style-region-left? style-region-center? style-region-right?) ;
style-page-layout-properties-attlist ::= (fo:page-width::length)? (fo:page-height::length)? ;
 style-page-layout-properties-attlist ::= common-num-format-attlist? common-num-format-prefix-suffix-attlist ;
 style-page-layout-properties-attlist ::= (style:paper-tray-name::("default" | string))? ;
 style-page-layout-properties-attlist ::= (style:print-orientation::("portrait" | "landscape"))? ;
 style-page-layout-properties-attlist ::= common-horizontal-margin-attlist common-vertical-margin-attlist common-margin-attlist ;
 style-page-layout-properties-attlist ::= common-border-attlist ;
 style-page-layout-properties-attlist ::= common-border-line-width-attlist ;
 style-page-layout-properties-attlist ::= common-padding-attlist ;
 style-page-layout-properties-attlist ::= common-shadow-attlist ;
 style-page-layout-properties-attlist ::= common-background-color-attlist ;
 style-page-layout-properties-attlist ::= (style:register-truth-ref-style-name::styleNameRef)? ;
 style-page-layout-properties-attlist ::= (style:print::(("headers" | "grid" | "annotations" | "objects" | "charts" | "drawings" | "formulas" | "zero-values")*))? ;
 style-page-layout-properties-attlist ::= (style:print-page-order::("ttb" | "ltr"))? ;
 style-page-layout-properties-attlist ::= (style:first-page-number::(positiveInteger | "continue"))? ;
 style-page-layout-properties-attlist ::= (style:scale-to::percent)? (style:scale-to-pages::positiveInteger)? ;
 style-page-layout-properties-attlist ::= (style:table-centering::("horizontal" | "vertical" | "both" | "none"))? ;
 style-page-layout-properties-attlist ::= (style:footnote-max-height::length)? ;
 style-page-layout-properties-attlist ::= common-writing-mode-attlist ;
 style-page-layout-properties-attlist ::= (style:layout-grid-mode::("none" | "line" | "both"))? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-base-height::length)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-ruby-height::length)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-lines::positiveInteger)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-color::color)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-ruby-below::boolean)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-print::boolean)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-display::boolean)? ;
draw-text-box-attlist ::= (draw:chain-next-name::string)? ;
 draw-text-box-attlist ::= (draw:corner-radius::nonNegativeLength)? ;
 draw-text-box-attlist ::= (fo:min-height::(length | percent))? (fo:min-width::(length | percent))? ;
 draw-text-box-attlist ::= (fo:max-height::(length | percent))? (fo:max-width::(length | percent))? ;
 draw-text-box-attlist ::= text-id? ;
table-error-message ::= table:error-message::((table:title::string)? (table:display::boolean)? (table:message-type::("stop" | "warning" | "information"))? text-p*) ;
paragraph-attrs ::= (text:style-name::styleNameRef)? (text:class-names::styleNameRefs)? (text:cond-style-name::styleNameRef)? ;
 paragraph-attrs ::= text-id? ;
table-columns-no-group ::= (table-columns (table-table-header-columns table-columns?)?) | (table-table-header-columns table-columns?) ;
form-fixed-text-attlist ::= form-control-attlist for common-disabled-attlist label common-printable-attlist common-title-attlist ;
 form-fixed-text-attlist ::= (form:multi-line::boolean)? ;
draw-regular-polygon ::= draw:regular-polygon::(draw-regular-polygon-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
common-border-line-width-attlist ::= (style:border-line-width::borderWidths)? (style:border-line-width-top::borderWidths)? (style:border-line-width-bottom::borderWidths)? (style:border-line-width-left::borderWidths)? (style:border-line-width-right::borderWidths)? ;
presentation-decl ::= presentation:header-decl::(presentation-header-decl-attlist string()) ;
 presentation-decl ::= presentation:footer-decl::(presentation-footer-decl-attlist string()) ;
 presentation-decl ::= presentation:date-time-decl::(presentation-date-time-decl-attlist string()) ;
common-draw-size-attlist ::= (svg:width::length)? (svg:height::length)? ;
text-changed-region-content ::= text:insertion::office-change-info ;
 text-changed-region-content ::= text:deletion::(office-change-info text-content*) ;
 text-changed-region-content ::= text:format-change::office-change-info ;
draw-circle ::= draw:circle::(draw-circle-attlist common-draw-circle-ellipse-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
table-table-template ::= table:table-template::(table-table-template-attlist table-first-row? table-last-row? table-first-column? table-last-column? table-body | (table-even-rows table-odd-rows) | (table-even-columns table-odd-columns)) ;
draw-page ::= draw:page::(common-presentation-header-footer-attlist draw-page-attlist office-forms? shape* (presentation-animations | animation-element)? presentation-notes?) ;
dr3d-extrude ::= dr3d:extrude::(common-draw-path-data-attlist common-draw-viewbox-attlist common-draw-id-attlist common-draw-z-index-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-dr3d-transform-attlist) ;
form-password-attlist ::= form-control-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist ;
 form-password-attlist ::= (form:echo-char::character)? ;
presentation-settings ::= (presentation:settings::(presentation-settings-attlist presentation-show*))? ;
style-text-properties-content-strict ::= style-text-properties-attlist style-text-properties-elements ;
text-table-index ::= text:table-index::(sectionAttr text-table-index-source text-index-body) ;
draw-regular-polygon-attlist ::= (draw:concave::"false") | (draw:concave::"true" draw-regular-polygon-sharpness-attlist) ;
 draw-regular-polygon-attlist ::= draw:corners::positiveInteger ;
form-column-attlist ::= common-form-control-attlist label text-style-name ;
table-insertion ::= table:insertion::(table-insertion-attlist common-table-change-attlist office-change-info table-dependencies? table-deletions?) ;
text-outline-level-style-attlist ::= text:level::positiveInteger ;
 text-outline-level-style-attlist ::= (text:style-name::styleNameRef)? ;
 text-outline-level-style-attlist ::= common-num-format-attlist common-num-format-prefix-suffix-attlist ;
 text-outline-level-style-attlist ::= (text:display-levels::positiveInteger)? ;
 text-outline-level-style-attlist ::= (text:start-value::positiveInteger)? ;
common-anim-values-attlist ::= (smil:values::string)? ;
 common-anim-values-attlist ::= (anim:formula::string)? ;
 common-anim-values-attlist ::= common-anim-set-values-attlist (smil:from::string)? (smil:by::string)? ;
office-text-content-prelude ::= office-forms text-tracked-changes text-decls table-decls ;
common-draw-shape-with-styles-attlist ::= common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-draw-transform-attlist common-draw-name-attlist common-text-spreadsheet-shape-attlist ;
number-and-text ::= number-number number-text? ;
config-config-item-map-indexed ::= config:config-item-map-indexed::(config-config-item-map-indexed-attlist config-config-item-map-entry+) ;
presentation-show-shape ::= presentation:show-shape::(common-presentation-effect-attlist presentation-sound?) ;
text-object-index ::= text:object-index::(sectionAttr text-object-index-source text-index-body) ;
table-table-cell ::= table:table-cell::(table-table-cell-attlist table-table-cell-attlist-extra table-table-cell-content) ;
common-draw-style-name-attlist ::= ((draw:style-name::styleNameRef)? (draw:class-names::styleNameRefs)?) | ((presentation:style-name::styleNameRef)? (presentation:class-names::styleNameRefs)?) ;
text-bibliography-configuration-attlist ::= (text:prefix::string)? (text:suffix::string)? ;
 text-bibliography-configuration-attlist ::= (text:numbered-entries::boolean)? ;
 text-bibliography-configuration-attlist ::= (text:sort-by-position::boolean)? (fo:language::languageCode)? (fo:country::countryCode)? (text:sort-algorithm::string)? ;
office-master-styles ::= (office:master-styles::(style-master-page* style-handout-master? draw-layer-set?))? ;
table-table-header-rows ::= table:table-header-rows::((text-soft-page-break? table-table-row)+) ;
office-chart-content-prelude ::= text-decls table-decls ;
table-movement-cut-off-attlist ::= (table:position::integer) | (table:start-position::integer table:end-position::integer) ;
presentation-dim ::= presentation:dim::(presentation-dim-attlist presentation-sound?) ;
draw-caption-attlist ::= (draw:caption-point-x::coordinate draw:caption-point-y::coordinate)? ;
 draw-caption-attlist ::= (draw:corner-radius::nonNegativeLength)? ;
form-button-attlist ::= form-control-attlist button-type common-disabled-attlist label image-data common-printable-attlist common-tab-attlist target-frame target-location common-title-attlist common-value-attlist common-form-relative-image-position-attlist ;
 form-button-attlist ::= (form:default-button::boolean)? ;
 form-button-attlist ::= (form:toggle::boolean)? ;
 form-button-attlist ::= (form:focus-on-click::boolean)? ;
 form-button-attlist ::= (form:xforms-submission::string)? ;
column-controls ::= form:text::(form-text-attlist common-form-control-content) ;
 column-controls ::= form:textarea::(form-textarea-attlist common-form-control-content text-p*) ;
 column-controls ::= form:formatted-text::(form-formatted-text-attlist common-form-control-content) ;
 column-controls ::= form:number::(form-number-attlist common-numeric-control-attlist common-form-control-content) ;
 column-controls ::= form:date::(form-date-attlist common-numeric-control-attlist common-form-control-content) ;
 column-controls ::= form:combobox::(form-combobox-attlist common-form-control-content form-item*) ;
 column-controls ::= form:listbox::(form-listbox-attlist common-form-control-content form-option*) ;
 column-controls ::= form:checkbox::(form-checkbox-attlist common-form-control-content) ;
text-index-title-template ::= text:index-title-template::((text:style-name::styleNameRef)? string()) ;
dr3d-rotate ::= dr3d:rotate::(common-draw-viewbox-attlist common-draw-path-data-attlist common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-dr3d-transform-attlist) ;
draw-ellipse-attlist ::= (svg:rx::length svg:ry::length)? ;
chart-series ::= chart:series::(chart-series-attlist chart-domain* chart-mean-value? chart-regression-curve? chart-error-indicator? chart-data-point*) ;
form-control-attlist ::= common-form-control-attlist common-control-id-attlist xforms-bind-attlist ;
table-table-column-group ::= table:table-column-group::(table-table-column-group-attlist table-columns-and-groups) ;
table-calculation-settings ::= table:calculation-settings::(table-calculation-setting-attlist table-null-date? table-iteration?) ;
style-style-content ::= style:family::"text" style-text-properties? ;
 style-style-content ::= style:family::"paragraph" style-paragraph-properties? style-text-properties? ;
 style-style-content ::= style:family::"section" style-section-properties? ;
 style-style-content ::= style:family::"ruby" style-ruby-properties? ;
 style-style-content ::= style:family::"table" style-table-properties? ;
 style-style-content ::= style:family::"table-column" style-table-column-properties? ;
 style-style-content ::= style:family::"table-row" style-table-row-properties? ;
 style-style-content ::= style:family::"table-cell" style-table-cell-properties? style-paragraph-properties? style-text-properties? ;
 style-style-content ::= style:family::("graphic" | "presentation") style-graphic-properties? style-paragraph-properties? style-text-properties? ;
 style-style-content ::= style:family::"drawing-page" style-drawing-page-properties? ;
 style-style-content ::= style:family::"chart" style-chart-properties? style-graphic-properties? style-paragraph-properties? style-text-properties? ;
table-change-track-table-cell ::= table:change-track-table-cell::(table-change-track-table-cell-attlist text-p*) ;
presentation-placeholder ::= presentation:placeholder::(presentation:object::presentation-classes svg:x::(coordinate | percent) svg:y::(coordinate | percent) svg:width::(length | percent) svg:height::(length | percent)) ;
text-list ::= text:list::(text-list-attr text-list-header? text-list-item*) ;
common-table-cell-address-attlist ::= table:column::integer table:row::integer table:table::integer ;
style-footer ::= style:footer::(common-style-header-footer-attlist header-footer-content) ;
common-num-format-attlist ::= (style:num-format::("1" | "i" | "I" | string | ε)) | (style:num-format::("a" | "A") style-num-letter-sync-attlist) | ε ;
text-index-entry-tab-stop ::= text:index-entry-tab-stop::((text:style-name::styleNameRef)? text-index-entry-tab-stop-attrs) ;
chart-chart ::= chart:chart::(chart-chart-attlist chart-title? chart-subtitle? chart-footer? chart-legend? chart-plot-area table-table?) ;
office-spreadsheet-attlist ::= (table:structure-protected::boolean)? (table:protection-key::string)? ;
style-chart-properties-content-strict ::= style-chart-properties-attlist style-chart-properties-elements ;
style-header-left ::= style:header-left::(common-style-header-footer-attlist header-footer-content) ;
table-rows-no-group ::= (table-rows (table-table-header-rows table-rows?)?) | (table-table-header-rows table-rows?) ;
chart-subtitle ::= chart:subtitle::(chart-title-attlist text-p?) ;
common-draw-position-attlist ::= (svg:x::coordinate)? (svg:y::coordinate)? ;
common-padding-attlist ::= (fo:padding::nonNegativeLength)? (fo:padding-top::nonNegativeLength)? (fo:padding-bottom::nonNegativeLength)? (fo:padding-left::nonNegativeLength)? (fo:padding-right::nonNegativeLength)? ;
draw-contour-path ::= draw:contour-path::(common-contour-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-path-data-attlist) ;
table-tracked-changes ::= table:tracked-changes::(table-tracked-changes-attlist (table-cell-content-change | table-insertion | table-deletion | table-movement)*) ;
style-table-properties-attlist ::= (style:width::positiveLength)? (style:rel-width::percent)? ;
 style-table-properties-attlist ::= (table:align::("left" | "center" | "right" | "margins"))? ;
 style-table-properties-attlist ::= common-horizontal-margin-attlist ;
 style-table-properties-attlist ::= common-vertical-margin-attlist ;
 style-table-properties-attlist ::= common-margin-attlist ;
 style-table-properties-attlist ::= common-page-number-attlist ;
 style-table-properties-attlist ::= common-break-attlist ;
 style-table-properties-attlist ::= common-background-color-attlist ;
 style-table-properties-attlist ::= common-shadow-attlist ;
 style-table-properties-attlist ::= common-keep-with-next-attlist ;
 style-table-properties-attlist ::= (style:may-break-between-rows::boolean)? ;
 style-table-properties-attlist ::= (table:border-model::("collapsing" | "separating"))? ;
 style-table-properties-attlist ::= common-writing-mode-attlist ;
 style-table-properties-attlist ::= (table:display::boolean)? ;
text-alphabetical-index-source-attrs ::= text-index-scope-attr text-relative-tab-stop-position-attr ;
 text-alphabetical-index-source-attrs ::= (text:ignore-case::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:main-entry-style-name::styleNameRef)? ;
 text-alphabetical-index-source-attrs ::= (text:alphabetical-separators::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:combine-entries::boolean)? (text:combine-entries-with-dash::boolean)? (text:combine-entries-with-pp::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:use-keys-as-entries::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:capitalize-entries::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:comma-separated::boolean)? ;
 text-alphabetical-index-source-attrs ::= (fo:language::languageCode)? ;
 text-alphabetical-index-source-attrs ::= (fo:country::countryCode)? ;
 text-alphabetical-index-source-attrs ::= (text:sort-algorithm::string)? ;
form-form-attlist ::= (xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")?)? ;
 form-form-attlist ::= (office:target-frame::targetFrameName)? ;
 form-form-attlist ::= (form:method::("get" | "post" | string))? ;
 form-form-attlist ::= (form:enctype::string)? ;
 form-form-attlist ::= (form:allow-deletes::boolean)? ;
 form-form-attlist ::= (form:allow-inserts::boolean)? ;
 form-form-attlist ::= (form:allow-updates::boolean)? ;
 form-form-attlist ::= (form:apply-filter::boolean)? ;
 form-form-attlist ::= (form:command-type::("table" | "query" | "command"))? ;
 form-form-attlist ::= (form:command::string())? ;
 form-form-attlist ::= (form:datasource::(anyURI | string))? ;
 form-form-attlist ::= (form:master-fields::string)? ;
 form-form-attlist ::= (form:detail-fields::string)? ;
 form-form-attlist ::= (form:escape-processing::boolean)? ;
 form-form-attlist ::= (form:filter::string)? ;
 form-form-attlist ::= (form:ignore-result::boolean)? ;
 form-form-attlist ::= (form:navigation-mode::navigation)? ;
 form-form-attlist ::= (form:order::string)? ;
 form-form-attlist ::= (form:tab-cycle::tab-cycles)? ;
text-alphabetical-index ::= text:alphabetical-index::(sectionAttr text-alphabetical-index-source text-index-body) ;
style-table-properties-content-strict ::= style-table-properties-attlist style-table-properties-elements ;
office-change-info ::= office:change-info::(dc-creator dc-date text-p*) ;
table-help-message ::= table:help-message::((table:title::string)? (table:display::boolean)? text-p*) ;
paragraph-content ::= string() ;
 paragraph-content ::= text:s::((text:c::nonNegativeInteger)?) ;
 paragraph-content ::= text:tab::text-tab-attr ;
 paragraph-content ::= text:line-break::ε ;
 paragraph-content ::= text-soft-page-break ;
 paragraph-content ::= text:span::((text:style-name::styleNameRef)? (text:class-names::styleNameRefs)? paragraph-content*) ;
 paragraph-content ::= text:a::(text-a-attlist office-event-listeners? paragraph-content*) ;
 paragraph-content ::= (text:bookmark::(text:name::string)) | (text:bookmark-start::(text:name::string)) | (text:bookmark-end::(text:name::string)) ;
 paragraph-content ::= text:reference-mark::(text:name::string) ;
 paragraph-content ::= (text:reference-mark-start::(text:name::string)) | (text:reference-mark-end::(text:name::string)) ;
 paragraph-content ::= text:note::(text-note-class (text:id::string)? text:note-citation::((text:label::string)? string()) text:note-body::(text-content*)) ;
 paragraph-content ::= text:ruby::((text:style-name::styleNameRef)? text:ruby-base::paragraph-content text:ruby-text::((text:style-name::styleNameRef)? string())) ;
 paragraph-content ::= office-annotation ;
 paragraph-content ::= change-marks ;
 paragraph-content ::= shape | draw-a ;
 paragraph-content ::= text:date::(text-date-attlist string()) ;
 paragraph-content ::= text:time::(text-time-attlist string()) ;
 paragraph-content ::= text:page-number::(text-page-number-attlist string()) ;
 paragraph-content ::= text:page-continuation::(text-page-continuation-attlist string()) ;
 paragraph-content ::= text:sender-firstname::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-lastname::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-initials::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-title::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-position::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-email::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-phone-private::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-fax::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-company::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-phone-work::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-street::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-city::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-postal-code::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-country::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-state-or-province::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:author-name::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:author-initials::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:chapter::(text-chapter-attlist string()) ;
 paragraph-content ::= text:file-name::(text-file-name-attlist string()) ;
 paragraph-content ::= text:template-name::(text-template-name-attlist string()) ;
 paragraph-content ::= text:sheet-name::string() ;
 paragraph-content ::= text:variable-set::(common-field-name-attlist common-field-formula-attlist common-value-and-type-attlist common-field-display-value-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:variable-get::(common-field-name-attlist common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:variable-input::(common-field-name-attlist common-field-description-attlist common-value-type-attlist common-field-display-value-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:user-field-get::(common-field-name-attlist common-field-display-value-formula-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:user-field-input::(common-field-name-attlist common-field-description-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:sequence::(common-field-name-attlist common-field-formula-attlist common-field-num-format-attlist text-sequence-ref-name string()) ;
 paragraph-content ::= text:expression::(common-field-formula-attlist common-value-and-type-attlist? common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:text-input::(common-field-description-attlist string()) ;
 paragraph-content ::= text:initial-creator::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:creation-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::dateOrDateTime)? string()) ;
 paragraph-content ::= text:creation-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::timeOrDateTime)? string()) ;
 paragraph-content ::= text:description::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:user-defined::(common-field-fixed-attlist text:name::string common-field-data-style-name-attlist (office:value::double)? (office:date-value::dateOrDateTime)? (office:time-value::duration)? (office:boolean-value::boolean)? (office:string-value::string)? string()) ;
 paragraph-content ::= text:print-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::time)? string()) ;
 paragraph-content ::= text:print-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::date)? string()) ;
 paragraph-content ::= text:printed-by::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:title::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:subject::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:keywords::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:editing-cycles::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:editing-duration::(common-field-fixed-attlist common-field-data-style-name-attlist (text:duration::duration)? string()) ;
 paragraph-content ::= text:modification-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::time)? string()) ;
 paragraph-content ::= text:modification-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::date)? string()) ;
 paragraph-content ::= text:creator::(common-field-fixed-attlist string()) ;
 paragraph-content ::= (text:page-count::(common-field-num-format-attlist string())) | (text:paragraph-count::(common-field-num-format-attlist string())) | (text:word-count::(common-field-num-format-attlist string())) | (text:character-count::(common-field-num-format-attlist string())) | (text:table-count::(common-field-num-format-attlist string())) | (text:image-count::(common-field-num-format-attlist string())) | (text:object-count::(common-field-num-format-attlist string())) ;
 paragraph-content ::= text:database-display::(text-database-display-attlist string()) ;
 paragraph-content ::= text:database-next::text-database-next-attlist ;
 paragraph-content ::= text:database-row-select::text-database-row-select-attlist ;
 paragraph-content ::= text:database-row-number::(common-field-database-table common-field-num-format-attlist (text:value::nonNegativeInteger)? string()) ;
 paragraph-content ::= text:database-name::(common-field-database-table string()) ;
 paragraph-content ::= text:page-variable-set::(text-set-page-variable-attlist string()) ;
 paragraph-content ::= text:page-variable-get::(text-get-page-variable-attlist string()) ;
 paragraph-content ::= text:placeholder::(text-placeholder-attlist string()) ;
 paragraph-content ::= text:conditional-text::(text-conditional-text-attlist string()) ;
 paragraph-content ::= text:hidden-text::(text-hidden-text-attlist string()) ;
 paragraph-content ::= (text:reference-ref::(text-common-ref-content text-ref-content)) | (text:bookmark-ref::(text-common-ref-content text-ref-content)) ;
 paragraph-content ::= text:note-ref::(text-common-ref-content text-note-ref-content text-ref-content) ;
 paragraph-content ::= text:sequence-ref::(text-common-ref-content text-sequence-ref-content) ;
 paragraph-content ::= text:script::((xlink:href::anyURI (xlink:type::"simple")?) | string() (script:language::string)?) ;
 paragraph-content ::= text:execute-macro::((text:name::string)? office-event-listeners? string()) ;
 paragraph-content ::= text:hidden-paragraph::(text-hidden-paragraph-attlist string()) ;
 paragraph-content ::= text:dde-connection::(text:connection-name::string string()) ;
 paragraph-content ::= text:measure::(text:kind::("value" | "unit" | "gap") string()) ;
 paragraph-content ::= text:table-formula::(common-field-formula-attlist common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:toc-mark-start::text-toc-mark-start-attrs ;
 paragraph-content ::= text:toc-mark-end::text-id ;
 paragraph-content ::= text:toc-mark::(text:string-value::string text-outline-level) ;
 paragraph-content ::= text:user-index-mark-start::(text-id text-outline-level text-index-name) ;
 paragraph-content ::= text:user-index-mark-end::(text-id text-outline-level) ;
 paragraph-content ::= text:user-index-mark::(text:string-value::string text-outline-level text-index-name) ;
 paragraph-content ::= text:alphabetical-index-mark-start::(text-id text-alphabetical-index-mark-attrs) ;
 paragraph-content ::= text:alphabetical-index-mark-end::text-id ;
 paragraph-content ::= text:alphabetical-index-mark::(text:string-value::string text-alphabetical-index-mark-attrs) ;
 paragraph-content ::= text:bibliography-mark::(text:bibliography-type::text-bibliography-types ((text:identifier::string) | (text:address::string) | (text:annote::string) | (text:author::string) | (text:booktitle::string) | (text:chapter::string) | (text:edition::string) | (text:editor::string) | (text:howpublished::string) | (text:institution::string) | (text:journal::string) | (text:month::string) | (text:note::string) | (text:number::string) | (text:organizations::string) | (text:pages::string) | (text:publisher::string) | (text:school::string) | (text:series::string) | (text:title::string) | (text:report-type::string) | (text:volume::string) | (text:year::string) | (text:url::string) | (text:custom1::string) | (text:custom2::string) | (text:custom3::string) | (text:custom4::string) | (text:custom5::string) | (text:isbn::string) | (text:issn::string))* string()) ;
 paragraph-content ::= presentation:header::ε ;
 paragraph-content ::= presentation:footer::ε ;
 paragraph-content ::= presentation:date-time::ε ;
number-day ::= number:day::(number-day-attlist common-calendar-attlist) ;
table-data-pilot-sort-info-attlist ::= (table:sort-mode::"data" table:data-field::string) | (table:sort-mode::("none" | "manual" | "name")) ;
 table-data-pilot-sort-info-attlist ::= table:order::("ascending" | "descending") ;
form-frame-attlist ::= form-control-attlist common-disabled-attlist for label common-printable-attlist common-title-attlist ;
form-textarea-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist ;
draw-glue-point-attlist ::= draw:id::nonNegativeInteger ;
 draw-glue-point-attlist ::= svg:x::(distance | percent) svg:y::(distance | percent) ;
 draw-glue-point-attlist ::= (draw:align::("top-left" | "top" | "top-right" | "left" | "center" | "right" | "bottom-left" | "bottom-right"))? ;
table-data-pilot-field-attlist ::= table:source-field-name::string ;
 table-data-pilot-field-attlist ::= (table:orientation::("row" | "column" | "data" | "hidden")) | (table:orientation::"page" table:selected-page::string) ;
 table-data-pilot-field-attlist ::= (table:is-data-layout-field::string)? ;
 table-data-pilot-field-attlist ::= (table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string))? ;
 table-data-pilot-field-attlist ::= (table:used-hierarchy::integer)? ;
office-styles ::= (office:styles::(styles style-default-style* text-outline-style? text-notes-configuration* text-bibliography-configuration? text-linenumbering-configuration? draw-gradient* svg-linearGradient* svg-radialGradient* draw-hatch* draw-fill-image* draw-marker* draw-stroke-dash* draw-opacity* style-presentation-page-layout*))? ;
common-vertical-pos-attlist ::= (style:vertical-pos::("top" | "middle" | "bottom" | "from-top" | "below"))? (svg:y::coordinate)? ;
common-draw-viewbox-attlist ::= svg:viewBox::(integer integer integer integer) ;
style-chart-properties-attlist ::= (chart:scale-text::boolean)? ;
 style-chart-properties-attlist ::= (chart:three-dimensional::boolean)? ;
 style-chart-properties-attlist ::= (chart:deep::boolean)? ;
 style-chart-properties-attlist ::= (chart:symbol-type::"none") | (chart:symbol-type::"automatic") | (chart:symbol-type::"named-symbol" chart:symbol-name::("square" | "diamond" | "arrow-down" | "arrow-up" | "arrow-right" | "arrow-left" | "bow-tie" | "hourglass" | "circle" | "star" | "x" | "plus" | "asterisk" | "horizontal-bar" | "vertical-bar")) | (chart:symbol-type::"image" chart:symbol-image::(xlink:href::anyURI)) | ε ;
 style-chart-properties-attlist ::= (chart:symbol-width::nonNegativeLength)? (chart:symbol-height::nonNegativeLength)? ;
 style-chart-properties-attlist ::= (chart:vertical::boolean)? ;
 style-chart-properties-attlist ::= (chart:connect-bars::boolean)? ;
 style-chart-properties-attlist ::= (chart:gap-width::integer)? (chart:overlap::integer)? ;
 style-chart-properties-attlist ::= (chart:japanese-candle-stick::boolean)? ;
 style-chart-properties-attlist ::= (chart:interpolation::("none" | "cubic-spline" | "b-spline"))? (chart:spline-order::positiveInteger)? (chart:spline-resolution::positiveInteger)? ;
 style-chart-properties-attlist ::= (chart:pie-offset::nonNegativeInteger)? ;
 style-chart-properties-attlist ::= (chart:lines::boolean)? ;
 style-chart-properties-attlist ::= (chart:solid-type::("cuboid" | "cylinder" | "cone" | "pyramid"))? ;
 style-chart-properties-attlist ::= (chart:stacked::boolean)? (chart:percentage::boolean)? ;
 style-chart-properties-attlist ::= (chart:link-data-style-to-source::boolean)? ;
 style-chart-properties-attlist ::= (chart:visible::boolean)? ;
 style-chart-properties-attlist ::= (chart:logarithmic::boolean)? ;
 style-chart-properties-attlist ::= (chart:maximum::double)? (chart:minimum::double)? (chart:origin::double)? (chart:interval-major::double)? (chart:interval-minor-divisor::positiveInteger)? ;
 style-chart-properties-attlist ::= (chart:tick-marks-major-inner::boolean)? (chart:tick-marks-major-outer::boolean)? (chart:tick-marks-minor-inner::boolean)? (chart:tick-marks-minor-outer::boolean)? ;
 style-chart-properties-attlist ::= (chart:display-label::boolean)? (chart:text-overlap::boolean)? (text:line-break::boolean)? (chart:label-arrangement::("side-by-side" | "stagger-even" | "stagger-odd"))? ;
 style-chart-properties-attlist ::= common-style-direction-attlist ;
 style-chart-properties-attlist ::= common-rotation-angle-attlist ;
 style-chart-properties-attlist ::= (chart:data-label-number::("none" | "value" | "percentage"))? ;
 style-chart-properties-attlist ::= (chart:data-label-text::boolean)? ;
 style-chart-properties-attlist ::= (chart:data-label-symbol::boolean)? ;
 style-chart-properties-attlist ::= (chart:mean-value::boolean)? ;
 style-chart-properties-attlist ::= (chart:error-category::("none" | "variance" | "standard-deviation" | "percentage" | "error-margin" | "constant"))? ;
 style-chart-properties-attlist ::= (chart:error-percentage::double)? ;
 style-chart-properties-attlist ::= (chart:error-margin::double)? ;
 style-chart-properties-attlist ::= (chart:error-lower-limit::double)? (chart:error-upper-limit::double)? ;
 style-chart-properties-attlist ::= (chart:error-upper-indicator::boolean)? (chart:error-lower-indicator::boolean)? ;
 style-chart-properties-attlist ::= (chart:series-source::("columns" | "rows"))? ;
 style-chart-properties-attlist ::= (chart:regression-type::("none" | "linear" | "logarithmic" | "exponential" | "power"))? ;
table-table ::= table:table::(table-table-attlist table-table-source? office-dde-source? table-scenario? office-forms? table-shapes? table-columns-and-groups table-rows-and-groups) ;
text-linenumbering-configuration ::= text:linenumbering-configuration::(text-linenumbering-configuration-attlist text-linenumbering-separator?) ;
draw-path ::= draw:path::(common-draw-path-data-attlist common-draw-position-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
number-embedded-text ::= number:embedded-text::(number-embedded-text-attlist string()) ;
style-handout-master ::= style:handout-master::(common-presentation-header-footer-attlist style-handout-master-attlist shape*) ;
table-table-cell-content ::= table-cell-range-source? office-annotation? table-detective? text-content* ;
office-document ::= office:document::(office-document-attrs office-document-common-attrs office-meta office-settings office-scripts office-font-face-decls office-styles office-automatic-styles office-master-styles office-body) ;
presentation-show-text ::= presentation:show-text::(common-presentation-effect-attlist presentation-sound?) ;
common-horizontal-margin-attlist ::= (fo:margin-left::(length | percent))? (fo:margin-right::(length | percent))? ;
draw-area-circle ::= draw:area-circle::(common-draw-area-attlist svg:cx::coordinate svg:cy::coordinate svg:r::length svg-title? svg-desc? office-event-listeners?) ;
text-user-index-source-attr ::= text-index-scope-attr text-relative-tab-stop-position-attr text:index-name::string ;
 text-user-index-source-attr ::= (text:use-index-marks::boolean)? (text:use-graphics::boolean)? (text:use-tables::boolean)? (text:use-floating-frames::boolean)? (text:use-objects::boolean)? ;
 text-user-index-source-attr ::= (text:copy-outline-levels::boolean)? ;
text-illustration-index-entry-content ::= text-illustration-index-entry-template-attrs (text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop)* ;
form-image-attlist ::= form-control-attlist button-type common-disabled-attlist image-data common-printable-attlist common-tab-attlist target-frame target-location common-title-attlist common-value-attlist ;
draw-connector ::= draw:connector::(draw-connector-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
anyElements ::= (string()? anyAttListOrElements string()?)* ;
draw-applet ::= draw:applet::(draw-applet-attlist common-draw-data-attlist? draw-param*) ;
style-master-page ::= style:master-page::(style-master-page-attlist (style-header style-header-left?)? (style-footer style-footer-left?)? office-forms? style-style* shape* presentation-notes?) ;
text-linenumbering-separator ::= text:linenumbering-separator::((text:increment::nonNegativeInteger)? string()) ;
text-index-title ::= text:index-title::(sectionAttr index-content-main*) ;
number-month ::= number:month::(number-month-attlist common-calendar-attlist) ;
text-toc-mark-start-attrs ::= text-id text-outline-level ;
office-script ::= office:script::(office-script-attlist string()? anyElements string()?) ;
presentation-play-attlist ::= draw:shape-id::IDREF (presentation:speed::presentationSpeeds)? ;
svg-radialGradient ::= svg:radialGradient::(common-svg-gradient-attlist (svg:cx::(coordinate | percent))? (svg:cy::(coordinate | percent))? (svg:r::(coordinate | percent))? (svg:fx::(coordinate | percent))? (svg:fy::(coordinate | percent))? svg-stop*) ;
table-cell-range-source ::= table:cell-range-source::(table-table-cell-range-source-attlist table-linked-source-attlist) ;
office-scripts ::= (office:scripts::(office-script* office-event-listeners?))? ;
draw-connector-attlist ::= (draw:type::("standard" | "lines" | "line" | "curve"))? ;
 draw-connector-attlist ::= (svg:x1::coordinate svg:y1::coordinate)? ;
 draw-connector-attlist ::= (draw:start-shape::IDREF)? ;
 draw-connector-attlist ::= (draw:start-glue-point::nonNegativeInteger)? ;
 draw-connector-attlist ::= (svg:x2::coordinate svg:y2::coordinate)? ;
 draw-connector-attlist ::= (draw:end-shape::IDREF)? ;
 draw-connector-attlist ::= (draw:end-glue-point::nonNegativeInteger)? ;
 draw-connector-attlist ::= (draw:line-skew::(length (length length?)?))? ;
common-vertical-margin-attlist ::= (fo:margin-top::(nonNegativeLength | percent))? (fo:margin-bottom::(nonNegativeLength | percent))? ;
table-data-pilot-table ::= table:data-pilot-table::(table-data-pilot-table-attlist (table-database-source-sql | table-database-source-table | table-database-source-query | table-source-service | table-source-cell-range)? table-data-pilot-field+) ;
table-null-date ::= table:null-date::((table:value-type::valueType)? (table:date-value::date)?) ;
style-header-footer-properties-attlist ::= (svg:height::length)? (fo:min-height::length)? ;
 style-header-footer-properties-attlist ::= common-horizontal-margin-attlist common-vertical-margin-attlist common-margin-attlist ;
 style-header-footer-properties-attlist ::= common-border-attlist ;
 style-header-footer-properties-attlist ::= common-border-line-width-attlist ;
 style-header-footer-properties-attlist ::= common-padding-attlist ;
 style-header-footer-properties-attlist ::= common-background-color-attlist ;
 style-header-footer-properties-attlist ::= common-shadow-attlist ;
 style-header-footer-properties-attlist ::= (style:dynamic-spacing::boolean)? ;
style-font-face-attlist ::= (svg:font-family::string)? (svg:font-style::fontStyle)? (svg:font-variant::fontVariant)? (svg:font-weight::fontWeight)? (svg:font-stretch::("normal" | "ultra-condensed" | "extra-condensed" | "condensed" | "semi-condensed" | "semi-expanded" | "expanded" | "extra-expanded" | "ultra-expanded"))? (svg:font-size::positiveLength)? (svg:unicode-range::string())? (svg:units-per-em::integer)? (svg:panose-1::string())? (svg:stemv::integer)? (svg:stemh::integer)? (svg:slope::integer)? (svg:cap-height::integer)? (svg:x-height::integer)? (svg:accent-height::integer)? (svg:ascent::integer)? (svg:descent::integer)? (svg:widths::string())? (svg:bbox::string())? (svg:ideographic::integer)? (svg:alphabetic::integer)? (svg:mathematical::integer)? (svg:hanging::integer)? (svg:v-ideographic::integer)? (svg:v-alphabetic::integer)? (svg:v-mathematical::integer)? (svg:v-hanging::integer)? (svg:underline-position::integer)? (svg:underline-thickness::integer)? (svg:strikethrough-position::integer)? (svg:strikethrough-thickness::integer)? (svg:overline-position::integer)? (svg:overline-thickness::integer)? ;
 style-font-face-attlist ::= style:name::string ;
 style-font-face-attlist ::= (style:font-adornments::string)? ;
 style-font-face-attlist ::= (style:font-family-generic::fontFamilyGeneric)? ;
 style-font-face-attlist ::= (style:font-pitch::fontPitch)? ;
 style-font-face-attlist ::= (style:font-charset::textEncoding)? ;
draw-stroke-dash-attlist ::= draw:name::styleName ;
 draw-stroke-dash-attlist ::= (draw:display-name::string)? ;
 draw-stroke-dash-attlist ::= (draw:style::("rect" | "round"))? ;
 draw-stroke-dash-attlist ::= (draw:dots1::integer)? (draw:dots1-length::length)? (draw:dots2::integer)? (draw:dots2-length::length)? ;
 draw-stroke-dash-attlist ::= (draw:distance::length)? ;
text-user-index ::= text:user-index::(sectionAttr text-user-index-source text-index-body) ;
table-cell-content-deletion ::= table:cell-content-deletion::((table:id::string)? table-cell-address? table-change-track-table-cell?) ;
config-config-item-map-named ::= config:config-item-map-named::(config-config-item-map-named-attlist config-config-item-map-entry+) ;
table-deletion ::= table:deletion::(table-deletion-attlist common-table-change-attlist office-change-info table-dependencies? table-deletions? table-cut-offs?) ;
form-image-frame-attlist ::= form-control-attlist common-disabled-attlist image-data common-printable-attlist common-readonly-attlist common-title-attlist common-data-field-attlist ;
draw-marker ::= draw:marker::(draw-marker-attlist common-draw-viewbox-attlist common-draw-path-data-attlist) ;
styles ::= style-style* text-list-style* number-number-style* number-currency-style* number-percentage-style* number-date-style* number-time-style* number-boolean-style* number-text-style* ;
office-annotation ::= office:annotation::(office-annotation-attlist draw-caption-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist dc-creator? dc-date? meta-date-string? (text-p | text-list)*) ;
dr3d-scene ::= dr3d:scene::(dr3d-scene-attlist common-draw-position-attlist common-draw-size-attlist common-draw-style-name-attlist common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-text-spreadsheet-shape-attlist common-dr3d-transform-attlist common-draw-caption-id-attlist svg-title? svg-desc? dr3d-light* shapes3d*) ;
style-footer-left ::= style:footer-left::(common-style-header-footer-attlist header-footer-content) ;
draw-line ::= draw:line::(draw-line-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
style-list-level-properties-content-strict ::= style-list-level-properties-attlist style-list-level-properties-elements ;
text-section-source-attr ::= (xlink:href::anyURI (xlink:type::"simple")? (xlink:show::"embed")?)? ;
 text-section-source-attr ::= (text:section-name::string)? ;
 text-section-source-attr ::= (text:filter-name::string)? ;
draw-page-thumbnail ::= draw:page-thumbnail::(draw-page-thumbnail-attlist common-draw-position-attlist common-draw-size-attlist presentation-shape-attlist common-draw-shape-with-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc?) ;
common-field-database-table ::= common-field-database-table-attlist common-field-database-name ;
number-era ::= number:era::(number-era-attlist common-calendar-attlist) ;
table-cell-content-change ::= table:cell-content-change::(common-table-change-attlist table-cell-address office-change-info table-dependencies? table-deletions? table-previous) ;
dr3d-scene-attlist ::= (dr3d:vrp::vector3D)? (dr3d:vpn::vector3D)? (dr3d:vup::vector3D)? ;
 dr3d-scene-attlist ::= (dr3d:projection::("parallel" | "perspective"))? ;
 dr3d-scene-attlist ::= (dr3d:distance::length)? ;
 dr3d-scene-attlist ::= (dr3d:focal-length::length)? ;
 dr3d-scene-attlist ::= (dr3d:shadow-slant::nonNegativeInteger)? ;
 dr3d-scene-attlist ::= (dr3d:shade-mode::("flat" | "phong" | "gouraud" | "draft"))? ;
 dr3d-scene-attlist ::= (dr3d:ambient-color::color)? ;
 dr3d-scene-attlist ::= (dr3d:lighting-mode::boolean)? ;
chart-legend-attlist ::= (chart:legend-position::("start" | "end" | "top" | "bottom") (chart:legend-align::("start" | "center" | "end"))?) | (chart:legend-position::("top-start" | "bottom-start" | "top-end" | "bottom-end")) | ε ;
 chart-legend-attlist ::= common-draw-position-attlist ;
 chart-legend-attlist ::= (style:legend-expansion::("wide" | "high" | "balanced")) | (style:legend-expansion::"custom" style:legend-expansion-aspect-ratio::double) | ε ;
 chart-legend-attlist ::= (chart:style-name::styleNameRef)? ;
draw-rect ::= draw:rect::(draw-rect-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
table-subtotal-rules ::= table:subtotal-rules::(table-subtotal-rules-attlist table-sort-groups? table-subtotal-rule*) ;
text-changed-region ::= text:changed-region::(text-changed-region-attr text-changed-region-content) ;
text-alphabetical-index-source ::= text:alphabetical-index-source::(text-alphabetical-index-source-attrs text-index-title-template? text-alphabetical-index-entry-template*) ;
chart-plot-area ::= chart:plot-area::(chart-plot-area-attlist dr3d-light* chart-axis* chart-series* chart-stock-gain-marker? chart-stock-loss-marker? chart-stock-range-line? chart-wall? chart-floor?) ;
draw-measure-attlist ::= svg:x1::coordinate svg:y1::coordinate ;
 draw-measure-attlist ::= svg:x2::coordinate svg:y2::coordinate ;
style-graphic-properties-attlist ::= (draw:stroke::("none" | "dash" | "solid"))? ;
 style-graphic-properties-attlist ::= (draw:stroke-dash::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:stroke-dash-names::styleNameRefs)? ;
 style-graphic-properties-attlist ::= (svg:stroke-width::length)? ;
 style-graphic-properties-attlist ::= (svg:stroke-color::color)? ;
 style-graphic-properties-attlist ::= (draw:marker-start::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:marker-end::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:marker-start-width::length)? ;
 style-graphic-properties-attlist ::= (draw:marker-end-width::length)? ;
 style-graphic-properties-attlist ::= (draw:marker-start-center::boolean)? ;
 style-graphic-properties-attlist ::= (draw:marker-end-center::boolean)? ;
 style-graphic-properties-attlist ::= (svg:stroke-opacity::(string() | percent))? ;
 style-graphic-properties-attlist ::= (draw:stroke-linejoin::("miter" | "round" | "bevel" | "middle" | "none" | "inherit"))? ;
 style-graphic-properties-attlist ::= (draw:symbol-color::color)? ;
 style-graphic-properties-attlist ::= (text:animation::("none" | "scroll" | "alternate" | "slide"))? ;
 style-graphic-properties-attlist ::= (text:animation-direction::("left" | "right" | "up" | "down"))? ;
 style-graphic-properties-attlist ::= (text:animation-start-inside::boolean)? ;
 style-graphic-properties-attlist ::= (text:animation-stop-inside::boolean)? ;
 style-graphic-properties-attlist ::= (text:animation-repeat::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (text:animation-delay::duration)? ;
 style-graphic-properties-attlist ::= (text:animation-steps::length)? ;
 style-graphic-properties-attlist ::= (draw:auto-grow-width::boolean)? (draw:auto-grow-height::boolean)? ;
 style-graphic-properties-attlist ::= (draw:fit-to-size::boolean)? ;
 style-graphic-properties-attlist ::= (draw:fit-to-contour::boolean)? ;
 style-graphic-properties-attlist ::= (draw:textarea-vertical-align::("top" | "middle" | "bottom" | "justify"))? ;
 style-graphic-properties-attlist ::= (draw:textarea-horizontal-align::("left" | "center" | "right" | "justify"))? ;
 style-graphic-properties-attlist ::= (fo:wrap-option::("no-wrap" | "wrap"))? ;
 style-graphic-properties-attlist ::= (draw:color-mode::("greyscale" | "mono" | "watermark" | "standard"))? ;
 style-graphic-properties-attlist ::= (draw:color-inversion::boolean)? ;
 style-graphic-properties-attlist ::= (draw:luminance::percent)? ;
 style-graphic-properties-attlist ::= (draw:contrast::percent)? ;
 style-graphic-properties-attlist ::= (draw:gamma::percent)? ;
 style-graphic-properties-attlist ::= (draw:red::percent)? ;
 style-graphic-properties-attlist ::= (draw:green::percent)? ;
 style-graphic-properties-attlist ::= (draw:blue::percent)? ;
 style-graphic-properties-attlist ::= (draw:image-opacity::percent)? ;
 style-graphic-properties-attlist ::= (draw:shadow::("visible" | "hidden"))? ;
 style-graphic-properties-attlist ::= (draw:shadow-offset-x::length)? (draw:shadow-offset-y::length)? ;
 style-graphic-properties-attlist ::= (draw:shadow-color::color)? ;
 style-graphic-properties-attlist ::= (draw:shadow-opacity::percent)? ;
 style-graphic-properties-attlist ::= (draw:start-line-spacing-horizontal::distance)? (draw:start-line-spacing-vertical::distance)? ;
 style-graphic-properties-attlist ::= (draw:end-line-spacing-horizontal::distance)? (draw:end-line-spacing-vertical::distance)? ;
 style-graphic-properties-attlist ::= (draw:line-distance::distance)? ;
 style-graphic-properties-attlist ::= (draw:guide-overhang::length)? ;
 style-graphic-properties-attlist ::= (draw:guide-distance::distance)? ;
 style-graphic-properties-attlist ::= (draw:start-guide::length)? ;
 style-graphic-properties-attlist ::= (draw:end-guide::length)? ;
 style-graphic-properties-attlist ::= (draw:placing::("below" | "above"))? ;
 style-graphic-properties-attlist ::= (draw:parallel::boolean)? ;
 style-graphic-properties-attlist ::= (draw:measure-align::("automatic" | "left-outside" | "inside" | "right-outside"))? (draw:measure-vertical-align::("automatic" | "above" | "below" | "center"))? ;
 style-graphic-properties-attlist ::= (draw:unit::("automatic" | "mm" | "cm" | "m" | "km" | "pt" | "pc" | "inch" | "ft" | "mi"))? ;
 style-graphic-properties-attlist ::= (draw:show-unit::boolean)? ;
 style-graphic-properties-attlist ::= (draw:decimal-places::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (draw:caption-type::("straight-line" | "angled-line" | "angled-connector-line"))? ;
 style-graphic-properties-attlist ::= (draw:caption-angle-type::("fixed" | "free"))? ;
 style-graphic-properties-attlist ::= (draw:caption-angle::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (draw:caption-gap::distance)? ;
 style-graphic-properties-attlist ::= (draw:caption-escape-direction::("horizontal" | "vertical" | "auto"))? ;
 style-graphic-properties-attlist ::= (draw:caption-escape::(length | percent))? ;
 style-graphic-properties-attlist ::= (draw:caption-line-length::length)? ;
 style-graphic-properties-attlist ::= (draw:caption-fit-line-length::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:horizontal-segments::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:vertical-segments::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:edge-rounding::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:edge-rounding-mode::("correct" | "attractive"))? ;
 style-graphic-properties-attlist ::= (dr3d:back-scale::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:depth::length)? ;
 style-graphic-properties-attlist ::= (dr3d:backface-culling::("enabled" | "disabled"))? ;
 style-graphic-properties-attlist ::= (dr3d:end-angle::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:close-front::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:close-back::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:lighting-mode::("standard" | "double-sided"))? ;
 style-graphic-properties-attlist ::= (dr3d:normals-kind::("object" | "flat" | "sphere"))? ;
 style-graphic-properties-attlist ::= (dr3d:normals-direction::("normal" | "inverse"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-generation-mode-x::("object" | "parallel" | "sphere"))? (dr3d:texture-generation-mode-y::("object" | "parallel" | "sphere"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-kind::("luminance" | "intensity" | "color"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-filter::("enabled" | "disabled"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-mode::("replace" | "modulate" | "blend"))? ;
 style-graphic-properties-attlist ::= (dr3d:ambient-color::color)? (dr3d:emissive-color::color)? (dr3d:specular-color::color)? (dr3d:diffuse-color::color)? ;
 style-graphic-properties-attlist ::= (dr3d:shininess::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:shadow::("visible" | "hidden"))? ;
 style-graphic-properties-attlist ::= common-draw-rel-size-attlist (fo:min-width::(length | percent))? ;
 style-graphic-properties-attlist ::= (fo:min-height::(length | percent))? ;
 style-graphic-properties-attlist ::= (fo:max-height::(length | percent))? (fo:max-width::(length | percent))? ;
 style-graphic-properties-attlist ::= common-horizontal-margin-attlist ;
 style-graphic-properties-attlist ::= common-vertical-margin-attlist ;
 style-graphic-properties-attlist ::= common-margin-attlist ;
 style-graphic-properties-attlist ::= (style:print-content::boolean)? ;
 style-graphic-properties-attlist ::= (style:protect::("none" | (("content" | "position" | "size")+)))? ;
 style-graphic-properties-attlist ::= (style:horizontal-pos::("left" | "center" | "right" | "from-left" | "inside" | "outside" | "from-inside"))? (svg:x::coordinate)? ;
 style-graphic-properties-attlist ::= (style:horizontal-rel::("page" | "page-content" | "page-start-margin" | "page-end-margin" | "frame" | "frame-content" | "frame-start-margin" | "frame-end-margin" | "paragraph" | "paragraph-content" | "paragraph-start-margin" | "paragraph-end-margin" | "char"))? ;
 style-graphic-properties-attlist ::= common-vertical-pos-attlist ;
 style-graphic-properties-attlist ::= common-vertical-rel-attlist ;
 style-graphic-properties-attlist ::= common-text-anchor-attlist ;
 style-graphic-properties-attlist ::= common-border-attlist ;
 style-graphic-properties-attlist ::= common-border-line-width-attlist ;
 style-graphic-properties-attlist ::= common-padding-attlist ;
 style-graphic-properties-attlist ::= common-shadow-attlist ;
 style-graphic-properties-attlist ::= common-background-color-attlist ;
 style-graphic-properties-attlist ::= (style:editable::boolean)? ;
 style-graphic-properties-attlist ::= (style:wrap::("none" | "left" | "right" | "parallel" | "dynamic" | "run-through" | "biggest"))? ;
 style-graphic-properties-attlist ::= (style:wrap-dynamic-threshold::nonNegativeLength)? ;
 style-graphic-properties-attlist ::= (style:number-wrapped-paragraphs::("no-limit" | positiveInteger))? ;
 style-graphic-properties-attlist ::= (style:wrap-contour::boolean)? ;
 style-graphic-properties-attlist ::= (style:wrap-contour-mode::("full" | "outside"))? ;
 style-graphic-properties-attlist ::= (style:run-through::("foreground" | "background"))? ;
 style-graphic-properties-attlist ::= (style:flow-with-text::boolean)? ;
 style-graphic-properties-attlist ::= (style:overflow-behavior::("clip" | "auto-create-new-frame"))? ;
 style-graphic-properties-attlist ::= (style:mirror::("none" | "vertical" | horizontal-mirror | ("vertical" horizontal-mirror) | (horizontal-mirror "vertical")))? ;
 style-graphic-properties-attlist ::= (fo:clip::string)? ;
 style-graphic-properties-attlist ::= (draw:wrap-influence-on-position::("iterative" | "once-concurrent" | "once-successive"))? ;
 style-graphic-properties-attlist ::= common-writing-mode-attlist ;
 style-graphic-properties-attlist ::= (draw:frame-display-scrollbar::boolean)? ;
 style-graphic-properties-attlist ::= (draw:frame-display-border::boolean)? ;
 style-graphic-properties-attlist ::= (draw:frame-margin-horizontal::nonNegativePixelLength)? (draw:frame-margin-vertical::nonNegativePixelLength)? ;
 style-graphic-properties-attlist ::= (draw:visible-area-left::nonNegativeLength)? (draw:visible-area-top::nonNegativeLength)? (draw:visible-area-width::positiveLength)? (draw:visible-area-height::positiveLength)? ;
 style-graphic-properties-attlist ::= (draw:ole-draw-aspect::nonNegativeInteger)? ;
draw-object-ole ::= draw:object-ole::(draw-object-ole-attlist common-draw-data-attlist | office-binary-data) ;
office-document-styles ::= office:document-styles::(office-document-common-attrs office-font-face-decls office-styles office-automatic-styles office-master-styles) ;
number-percentage-style ::= number:percentage-style::(common-data-style-attlist style-text-properties? number-text? number-and-text? style-map*) ;
office-body-content ::= office:text::(office-text-attlist office-text-content-prelude office-text-content-main* office-text-content-epilogue) ;
 office-body-content ::= office:drawing::(office-drawing-attlist office-drawing-content-prelude office-drawing-content-main office-drawing-content-epilogue) ;
 office-body-content ::= office:presentation::(office-presentation-attlist office-presentation-content-prelude office-presentation-content-main office-presentation-content-epilogue) ;
 office-body-content ::= office:spreadsheet::(office-spreadsheet-attlist office-spreadsheet-content-prelude office-spreadsheet-content-main office-spreadsheet-content-epilogue) ;
 office-body-content ::= office:chart::(office-chart-attlist office-chart-content-prelude office-chart-content-main office-chart-content-epilogue) ;
 office-body-content ::= office:image::(office-image-attlist office-image-content-prelude office-image-content-main office-image-content-epilogue) ;
form-property ::= form:property::(form-property-name form-property-value-and-type-attlist) ;
 form-property ::= form:list-property::(form-property-name form-property-type-and-value-list) ;
draw-contour-polygon ::= draw:contour-polygon::(common-contour-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-points-attlist) ;
table-named-expression-attlist ::= table:name::string table:expression::string (table:base-cell-address::cellAddress)? ;
style-paragraph-properties-content-strict ::= style-paragraph-properties-attlist style-paragraph-properties-elements ;
chart-plot-area-attlist ::= common-draw-position-attlist common-draw-size-attlist ;
 chart-plot-area-attlist ::= (chart:style-name::styleNameRef)? ;
 chart-plot-area-attlist ::= (table:cell-range-address::cellRangeAddress)? ;
 chart-plot-area-attlist ::= (chart:data-source-has-labels::("none" | "row" | "column" | "both"))? ;
 chart-plot-area-attlist ::= dr3d-scene-attlist common-dr3d-transform-attlist ;
script-event-listener-attlist ::= script:event-name::string ;
 script-event-listener-attlist ::= script:language::string ;
 script-event-listener-attlist ::= (script:macro-name::string) | (xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")?) ;
text-variable-decl ::= text:variable-decl::(common-field-name-attlist common-value-type-attlist) ;
draw-fill-image ::= draw:fill-image::(draw-fill-image-attlist xlink:href::anyURI (xlink:type::"simple")? (xlink:show::"embed")? (xlink:actuate::"onLoad")?) ;
borderWidths ::= positiveLength positiveLength positiveLength ;
form-formatted-text-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist ;
 form-formatted-text-attlist ::= (form:max-value::string)? ;
 form-formatted-text-attlist ::= (form:min-value::string)? ;
 form-formatted-text-attlist ::= (form:validation::boolean)? ;
office-document-content ::= office:document-content::(office-document-common-attrs office-scripts office-font-face-decls office-automatic-styles office-body) ;
style-graphic-properties-content-strict ::= style-graphic-properties-attlist style-graphic-fill-properties-attlist style-graphic-properties-elements ;
controls ::= column-controls ;
 controls ::= form:password::(form-password-attlist common-form-control-content) ;
 controls ::= form:file::(form-file-attlist common-form-control-content) ;
 controls ::= form:time::(form-time-attlist common-numeric-control-attlist common-form-control-content) ;
 controls ::= form:fixed-text::(form-fixed-text-attlist common-form-control-content) ;
 controls ::= form:button::(form-button-attlist common-form-control-content) ;
 controls ::= form:image::(form-image-attlist common-form-control-content) ;
 controls ::= form:radio::(form-radio-attlist common-form-control-content) ;
 controls ::= form:frame::(form-frame-attlist common-form-control-content) ;
 controls ::= form:image-frame::(form-image-frame-attlist common-form-control-content) ;
 controls ::= form:hidden::(form-hidden-attlist common-form-control-content) ;
 controls ::= form:grid::(form-grid-attlist common-form-control-content form-column*) ;
 controls ::= form:value-range::(form-value-range-attlist common-form-control-content) ;
 controls ::= form:generic-control::(form-generic-control-attlist common-form-control-content) ;
text-illustration-index ::= text:illustration-index::(sectionAttr text-illustration-index-source text-index-body) ;
office-dde-source ::= office:dde-source::(office-dde-source-attlist common-dde-connection-decl-attlist) ;
text-a-attlist ::= (office:name::string)? ;
 text-a-attlist ::= (office:title::string)? ;
 text-a-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? ;
 text-a-attlist ::= (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? ;
 text-a-attlist ::= (text:style-name::styleNameRef)? (text:visited-style-name::styleNameRef)? ;
config-config-item ::= config:config-item::(config-config-item-attlist string()) ;
style-graphic-fill-properties-attlist ::= (draw:fill::("none" | "solid" | "bitmap" | "gradient" | "hatch"))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-color::color)? ;
 style-graphic-fill-properties-attlist ::= (draw:secondary-fill-color::color)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-gradient-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (draw:gradient-step-count::nonNegativeInteger)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-hatch-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-hatch-solid::boolean)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (style:repeat::("no-repeat" | "repeat" | "stretch"))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-width::(length | percent))? (draw:fill-image-height::(length | percent))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-ref-point-x::percent)? (draw:fill-image-ref-point-y::percent)? (draw:fill-image-ref-point::("top-left" | "top" | "top-right" | "left" | "center" | "right" | "bottom-left" | "bottom" | "bottom-right"))? ;
 style-graphic-fill-properties-attlist ::= (draw:tile-repeat-offset::string())? ;
 style-graphic-fill-properties-attlist ::= (draw:opacity::percent)? ;
 style-graphic-fill-properties-attlist ::= (draw:opacity-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (svg:fill-rule::("nonzero" | "evenodd"))? ;
common-draw-rel-size-attlist ::= common-draw-size-attlist (style:rel-width::(percent | "scale" | "scale-min"))? (style:rel-height::(percent | "scale" | "scale-min"))? ;
table-cut-offs ::= table:cut-offs::((table-movement-cut-off+) | (table-insertion-cut-off table-movement-cut-off*)) ;
common-table-template-attlist ::= text:style-name::styleNameRef text:paragraph-style-name::(styleNameRef?) ;
draw-fill-image-attlist ::= draw:name::styleName ;
 draw-fill-image-attlist ::= (draw:display-name::string)? ;
 draw-fill-image-attlist ::= (svg:width::length)? (svg:height::length)? ;
table-content-validation ::= table:content-validation::(table-validation-attlist table-help-message? (table-error-message | (table-error-macro office-event-listeners?))?) ;
table-data-pilot-level ::= table:data-pilot-level::(table-data-pilot-level-attlist table-data-pilot-subtotals? table-data-pilot-members? table-data-pilot-display-info? table-data-pilot-sort-info? table-data-pilot-layout-info?) ;
style-text-properties-attlist ::= (fo:font-variant::fontVariant)? ;
 style-text-properties-attlist ::= (fo:text-transform::("none" | "lowercase" | "uppercase" | "capitalize"))? ;
 style-text-properties-attlist ::= (fo:color::color)? ;
 style-text-properties-attlist ::= (style:use-window-font-color::boolean)? ;
 style-text-properties-attlist ::= (style:text-outline::boolean)? ;
 style-text-properties-attlist ::= (style:text-line-through-type::lineType)? ;
 style-text-properties-attlist ::= (style:text-line-through-style::lineStyle)? ;
 style-text-properties-attlist ::= (style:text-line-through-width::lineWidth)? ;
 style-text-properties-attlist ::= (style:text-line-through-color::("font-color" | color))? ;
 style-text-properties-attlist ::= (style:text-line-through-text::string)? ;
 style-text-properties-attlist ::= (style:text-line-through-text-style::styleNameRef)? ;
 style-text-properties-attlist ::= (style:text-position::(percent | "super" | "sub" percent?))? ;
 style-text-properties-attlist ::= (style:font-name::string)? (style:font-name-asian::string)? (style:font-name-complex::string)? ;
 style-text-properties-attlist ::= (fo:font-family::string)? (style:font-family-asian::string)? (style:font-family-complex::string)? ;
 style-text-properties-attlist ::= (style:font-family-generic::fontFamilyGeneric)? (style:font-family-generic-asian::fontFamilyGeneric)? (style:font-family-generic-complex::fontFamilyGeneric)? ;
 style-text-properties-attlist ::= (style:font-style-name::string)? (style:font-style-name-asian::string)? (style:font-style-name-complex::string)? ;
 style-text-properties-attlist ::= (style:font-pitch::fontPitch)? (style:font-pitch-asian::fontPitch)? (style:font-pitch-complex::fontPitch)? ;
 style-text-properties-attlist ::= (style:font-charset::textEncoding)? (style:font-charset-asian::textEncoding)? (style:font-charset-complex::textEncoding)? ;
 style-text-properties-attlist ::= (fo:font-size::(positiveLength | percent))? (style:font-size-asian::(positiveLength | percent))? (style:font-size-complex::(positiveLength | percent))? ;
 style-text-properties-attlist ::= (style:font-size-rel::length)? (style:font-size-rel-asian::length)? (style:font-size-rel-complex::length)? ;
 style-text-properties-attlist ::= (style:script-type::("latin" | "asian" | "complex" | "ignore"))? ;
 style-text-properties-attlist ::= (fo:letter-spacing::(length | "normal"))? ;
 style-text-properties-attlist ::= (fo:language::languageCode)? (style:language-asian::languageCode)? (style:language-complex::languageCode)? ;
 style-text-properties-attlist ::= (fo:country::countryCode)? (style:country-asian::countryCode)? (style:country-complex::countryCode)? ;
 style-text-properties-attlist ::= (fo:font-style::fontStyle)? (style:font-style-asian::fontStyle)? (style:font-style-complex::fontStyle)? ;
 style-text-properties-attlist ::= (style:font-relief::("none" | "embossed" | "engraved"))? ;
 style-text-properties-attlist ::= (fo:text-shadow::shadowType)? ;
 style-text-properties-attlist ::= (style:text-underline-type::lineType)? ;
 style-text-properties-attlist ::= (style:text-underline-style::lineStyle)? ;
 style-text-properties-attlist ::= (style:text-underline-width::lineWidth)? ;
 style-text-properties-attlist ::= (style:text-underline-color::("font-color" | color))? ;
 style-text-properties-attlist ::= (fo:font-weight::fontWeight)? (style:font-weight-asian::fontWeight)? (style:font-weight-complex::fontWeight)? ;
 style-text-properties-attlist ::= (style:text-underline-mode::lineMode)? ;
 style-text-properties-attlist ::= (style:text-line-through-mode::lineMode)? ;
 style-text-properties-attlist ::= (style:letter-kerning::boolean)? ;
 style-text-properties-attlist ::= (style:text-blinking::boolean)? ;
 style-text-properties-attlist ::= common-background-color-attlist ;
 style-text-properties-attlist ::= (style:text-combine::("none" | "letters" | "lines"))? ;
 style-text-properties-attlist ::= (style:text-combine-start-char::character)? (style:text-combine-end-char::character)? ;
 style-text-properties-attlist ::= (style:text-emphasize::("none" | ("none" | "accent" | "dot" | "circle" | "disc" "above" | "below")))? ;
 style-text-properties-attlist ::= (style:text-scale::percent)? ;
 style-text-properties-attlist ::= (style:text-rotation-angle::integer)? ;
 style-text-properties-attlist ::= (style:text-rotation-scale::("fixed" | "line-height"))? ;
 style-text-properties-attlist ::= (fo:hyphenate::boolean)? ;
 style-text-properties-attlist ::= (fo:hyphenation-remain-char-count::positiveInteger)? ;
 style-text-properties-attlist ::= (fo:hyphenation-push-char-count::positiveInteger)? ;
 style-text-properties-attlist ::= (text:display::"true") | (text:display::"none") | (text:display::"condition" text:condition::"none") | ε ;
text-object-index-source ::= text:object-index-source::(text-object-index-source-attrs text-index-title-template? text-object-index-entry-template?) ;
style-table-column-properties-attlist ::= (style:column-width::positiveLength)? (style:rel-column-width::relativeLength)? ;
 style-table-column-properties-attlist ::= (style:use-optimal-column-width::boolean)? ;
 style-table-column-properties-attlist ::= common-break-attlist ;
office-meta-data ::= meta:generator::string ;
 office-meta-data ::= dc:title::string ;
 office-meta-data ::= dc:description::string ;
 office-meta-data ::= dc:subject::string ;
 office-meta-data ::= meta:keyword::string ;
 office-meta-data ::= meta:initial-creator::string ;
 office-meta-data ::= dc-creator ;
 office-meta-data ::= meta:printed-by::string ;
 office-meta-data ::= meta:creation-date::dateTime ;
 office-meta-data ::= dc-date ;
 office-meta-data ::= meta:print-date::dateTime ;
 office-meta-data ::= meta:template::(xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? (xlink:title::string)? (meta:date::dateTime)?) ;
 office-meta-data ::= meta:auto-reload::((xlink:type::"simple")? (xlink:show::"replace")? (xlink:actuate::"onLoad")? (xlink:href::anyURI)? (meta:delay::duration)?) ;
 office-meta-data ::= meta:hyperlink-behaviour::((office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))?) ;
 office-meta-data ::= dc:language::language ;
 office-meta-data ::= meta:editing-cycles::nonNegativeInteger ;
 office-meta-data ::= meta:editing-duration::duration ;
 office-meta-data ::= meta:document-statistic::((meta:page-count::nonNegativeInteger)? (meta:table-count::nonNegativeInteger)? (meta:draw-count::nonNegativeInteger)? (meta:image-count::nonNegativeInteger)? (meta:ole-object-count::nonNegativeInteger)? (meta:object-count::nonNegativeInteger)? (meta:paragraph-count::nonNegativeInteger)? (meta:word-count::nonNegativeInteger)? (meta:character-count::nonNegativeInteger)? (frame-count::nonNegativeInteger)? (sentence-count::nonNegativeInteger)? (syllable-count::nonNegativeInteger)? (non-whitespace-character-count::nonNegativeInteger)? (meta:row-count::nonNegativeInteger)? (meta:cell-count::nonNegativeInteger)?) ;
 office-meta-data ::= meta:user-defined::(meta:name::string (meta:value-type::"float" double) | (meta:value-type::"date" dateOrDateTime) | (meta:value-type::"time" duration) | (meta:value-type::"boolean" boolean) | (meta:value-type::"string" string) | string()) ;
draw-enhanced-geometry ::= draw:enhanced-geometry::(draw-enhanced-geometry-attlist draw-equation* draw-handle*) ;
text-bibliography-entry-template ::= text:bibliography-entry-template::(text-bibliography-entry-template-attrs (text-index-entry-span | text-index-entry-tab-stop | text-index-entry-bibliography)*) ;
form-checkbox-attlist ::= form-control-attlist common-disabled-attlist label common-printable-attlist common-tab-attlist common-title-attlist common-value-attlist common-data-field-attlist common-form-visual-effect-attlist common-form-relative-image-position-attlist ;
 form-checkbox-attlist ::= (form:current-state::states)? ;
 form-checkbox-attlist ::= (form:is-tristate::boolean)? ;
 form-checkbox-attlist ::= (form:state::states)? ;
presentation-sound ::= presentation:sound::(presentation-sound-attlist xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? (xlink:show::("new" | "replace"))?) ;
common-draw-circle-ellipse-attlist ::= (svg:cx::coordinate svg:cy::coordinate)? ;
 common-draw-circle-ellipse-attlist ::= (draw:kind::("full" | "section" | "cut" | "arc"))? ;
 common-draw-circle-ellipse-attlist ::= (draw:start-angle::double)? ;
 common-draw-circle-ellipse-attlist ::= (draw:end-angle::double)? ;
table-table-source ::= table:table-source::(table-table-source-attlist table-linked-source-attlist) ;
text-page-number-attlist ::= common-field-num-format-attlist common-field-fixed-attlist ;
 text-page-number-attlist ::= (text:page-adjust::integer)? ;
 text-page-number-attlist ::= (text:select-page::("previous" | "current" | "next"))? ;
style-background-image ::= (style:background-image::(style-background-image-attlist common-draw-data-attlist | office-binary-data | ε))? ;
style-style ::= style:style::(style-style-attlist style-style-content style-map*) ;
dr3d-cube-attlist ::= (dr3d:min-edge::vector3D)? (dr3d:max-edge::vector3D)? ;
form-property-type-and-value-list ::= (office:value-type::"float" (form:list-value::(office:value::double))*) | (office:value-type::"percentage" (form:list-value::(office:value::double))*) | (office:value-type::"currency" (form:list-value::(office:value::double (office:currency::string)?))*) | (office:value-type::"date" (form:list-value::(office:date-value::dateOrDateTime))*) | (office:value-type::"time" (form:list-value::(office:time-value::duration))*) | (office:value-type::"boolean" (form:list-value::(office:boolean-value::boolean))*) | (office:value-type::"string" (form:list-value::(office:string-value::string))*) | (office:value-type::"void") ;
draw-enhanced-geometry-attlist ::= (draw:type::custom-shape-type)? ;
 draw-enhanced-geometry-attlist ::= (svg:viewBox::(integer integer integer integer))? ;
 draw-enhanced-geometry-attlist ::= (draw:mirror-vertical::boolean)? (draw:mirror-horizontal::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-rotate-angle::double)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:concentric-gradient-fill-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-brightness::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-depth::(length double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-diffusion::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-number-of-line-segments::integer)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-light-face::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-harsh::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-harsh::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-level::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-level::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-direction::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-direction::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-metal::boolean)? ;
 draw-enhanced-geometry-attlist ::= (dr3d:shade-mode::("flat" | "phong" | "gouraud" | "draft"))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-rotation-angle::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-rotation-center::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-shininess::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-skew::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-specularity::percent)? ;
 draw-enhanced-geometry-attlist ::= (dr3d:projection::("parallel" | "perspective"))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-viewpoint::point3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-origin::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-color::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:enhanced-path::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:path-stretchpoint-x::double)? (draw:path-stretchpoint-y::double)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-areas::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-points::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-point-type::("none" | "segments" | "rectangle"))? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-point-leaving-directions::string())? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-mode::("normal" | "path" | "shape"))? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-scale::("path" | "shape"))? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-same-letter-heights::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:modifiers::string)? ;
style-presentation-page-layout ::= style:presentation-page-layout::(style:name::styleName (style:display-name::string)? presentation-placeholder*) ;
draw-floating-frame ::= draw:floating-frame::(draw-floating-frame-attlist common-draw-data-attlist) ;
text-alphabetical-index-auto-mark-file ::= text:alphabetical-index-auto-mark-file::(xlink:href::anyURI (xlink:type::"simple")?) ;
draw-gradient-attlist ::= (draw:start-color::color)? (draw:end-color::color)? ;
 draw-gradient-attlist ::= (draw:start-intensity::percent)? (draw:end-intensity::percent)? ;
style-background-image-attlist ::= (style:repeat::("no-repeat" | "repeat" | "stretch"))? ;
 style-background-image-attlist ::= (style:position::("left" | "center" | "right" | "top" | "bottom" | (horiBackPos vertBackPos) | (vertBackPos horiBackPos)))? ;
 style-background-image-attlist ::= (style:filter-name::string)? ;
 style-background-image-attlist ::= (draw:opacity::percent)? ;
form-text-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist ;
draw-opacity ::= draw:opacity::(common-draw-gradient-attlist draw-opacity-attlist) ;
table-linked-source-attlist ::= (xlink:type::"simple")? (xlink:actuate::"onRequest")? xlink:href::anyURI ;
 table-linked-source-attlist ::= (table:filter-name::string)? ;
 table-linked-source-attlist ::= (table:filter-options::string)? ;
 table-linked-source-attlist ::= (table:refresh-delay::duration)? ;
text-table-of-content ::= text:table-of-content::(sectionAttr text-table-of-content-source text-index-body) ;
text-tracked-changes ::= (text:tracked-changes::(text-tracked-changes-attr text-changed-region*))? ;
form-column ::= form:column::(form-column-attlist column-controls+) ;
text-outline-level-style ::= text:outline-level-style::(text-outline-level-style-attlist style-list-level-properties? style-text-properties?) ;
form-item ::= form:item::(form-item-attlist string()) ;
style-table-column-properties-content-strict ::= style-table-column-properties-attlist style-table-column-properties-elements ;
text-index-source-styles ::= text:index-source-styles::(text:outline-level::positiveInteger text-index-source-style*) ;
text-section-attr ::= sectionAttr ;
 text-section-attr ::= (text:display::("true" | "none")) | (text:display::"condition" text:condition::string) | ε ;
table-rows ::= table-table-rows | ((text-soft-page-break? table-table-row)+) ;
number-day-of-week ::= number:day-of-week::(number-day-of-week-attlist common-calendar-attlist) ;
draw-opacity-attlist ::= (draw:start::percent)? (draw:end::percent)? ;
style-table-row-properties-attlist ::= (style:row-height::positiveLength)? (style:min-row-height::nonNegativeLength)? ;
 style-table-row-properties-attlist ::= (style:use-optimal-row-height::boolean)? ;
 style-table-row-properties-attlist ::= common-background-color-attlist ;
 style-table-row-properties-attlist ::= common-break-attlist ;
 style-table-row-properties-attlist ::= (fo:keep-together::("auto" | "always"))? ;
style-section-properties-content-strict ::= style-section-properties-attlist style-section-properties-elements ;
text-bibliography-configuration ::= text:bibliography-configuration::(text-bibliography-configuration-attlist text-sort-key*) ;
chart-footer ::= chart:footer::(chart-title-attlist text-p?) ;
style-table-row-properties-content-strict ::= style-table-row-properties-attlist style-table-row-properties-elements ;
text-decls ::= (text:variable-decls::(text-variable-decl*))? (text:sequence-decls::(text-sequence-decl*))? (text:user-field-decls::(text-user-field-decl*))? (text:dde-connection-decls::(text-dde-connection-decl*))? text-alphabetical-index-auto-mark-file? ;
table-subtotal-rule ::= table:subtotal-rule::(table-subtotal-rule-attlist table-subtotal-field*) ;
text-list-style ::= text:list-style::(text-list-style-attr text-list-style-content*) ;
common-value-and-type-attlist ::= (office:value-type::"float" office:value::double) | (office:value-type::"percentage" office:value::double) | (office:value-type::"currency" office:value::double (office:currency::string)?) | (office:value-type::"date" office:date-value::dateOrDateTime) | (office:value-type::"time" office:time-value::duration) | (office:value-type::"boolean" office:boolean-value::boolean) | (office:value-type::"string" (office:string-value::string)?) ;
text-time-attlist ::= common-field-fixed-attlist common-field-data-style-name-attlist ;
 text-time-attlist ::= (text:time-value::timeOrDateTime)? ;
 text-time-attlist ::= (text:time-adjust::duration)? ;
common-timing-attlist ::= common-basic-timing-attlist common-restart-timing-attlist common-restart-default-attlist common-fill-timing-attlist common-fill-default-attlist common-time-manip-attlist ;
common-basic-timing-attlist ::= common-begin-end-timing-attlist common-dur-timing-attlist common-repeat-timing-attlist ;
draw-caption ::= draw:caption::(draw-caption-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
office-text-content-main ::= (text-content*) | (text-page-sequence (draw-a | shape)*) ;
table-functions ::= table-named-expressions? table-database-ranges? table-data-pilot-tables? table-consolidation? table-dde-links? ;
form-combobox-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist dropdown common-maxlength-attlist common-printable-attlist common-readonly-attlist size common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist list-source list-source-type ;
 form-combobox-attlist ::= (form:auto-complete::boolean)? ;
table-filter ::= table:filter::(table-filter-attlist table-filter-condition | table-filter-and | table-filter-or) ;
office-presentation-content-prelude ::= text-decls table-decls presentation-decls ;
form-listbox-attlist ::= form-control-attlist common-disabled-attlist dropdown common-printable-attlist size common-tab-attlist common-title-attlist bound-column common-data-field-attlist list-source list-source-type ;
 form-listbox-attlist ::= (form:multiple::boolean)? ;
 form-listbox-attlist ::= (form:xforms-list-source::string)? ;
style-table-cell-properties-attlist ::= (style:vertical-align::("top" | "middle" | "bottom" | "automatic"))? ;
 style-table-cell-properties-attlist ::= (style:text-align-source::("fix" | "value-type"))? ;
 style-table-cell-properties-attlist ::= common-style-direction-attlist ;
 style-table-cell-properties-attlist ::= (style:glyph-orientation-vertical::("auto" | "0"))? ;
 style-table-cell-properties-attlist ::= common-shadow-attlist ;
 style-table-cell-properties-attlist ::= common-background-color-attlist ;
 style-table-cell-properties-attlist ::= common-border-attlist ;
 style-table-cell-properties-attlist ::= (style:diagonal-tl-br::string)? (style:diagonal-tl-br-widths::borderWidths)? (style:diagonal-bl-tr::string)? (style:diagonal-bl-tr-widths::borderWidths)? ;
 style-table-cell-properties-attlist ::= common-border-line-width-attlist ;
 style-table-cell-properties-attlist ::= common-padding-attlist ;
 style-table-cell-properties-attlist ::= (fo:wrap-option::("no-wrap" | "wrap"))? ;
 style-table-cell-properties-attlist ::= common-rotation-angle-attlist ;
 style-table-cell-properties-attlist ::= (style:rotation-align::("none" | "bottom" | "top" | "center"))? ;
 style-table-cell-properties-attlist ::= (style:cell-protect::("none" | "hidden-and-protected" | (("protected" | "formula-hidden")+)))? ;
 style-table-cell-properties-attlist ::= (style:print-content::boolean)? ;
 style-table-cell-properties-attlist ::= (style:decimal-places::nonNegativeInteger)? ;
 style-table-cell-properties-attlist ::= (style:repeat-content::boolean)? ;
 style-table-cell-properties-attlist ::= (style:shrink-to-fit::boolean)? ;
draw-ellipse ::= draw:ellipse::(common-draw-circle-ellipse-attlist draw-ellipse-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
text-alphabetical-index-mark-attrs ::= (text:key1::string)? (text:key2::string)? ;
 text-alphabetical-index-mark-attrs ::= (text:string-value-phonetic::string)? (text:key1-phonetic::string)? (text:key2-phonetic::string)? ;
 text-alphabetical-index-mark-attrs ::= (text:main-entry::boolean)? ;
number-currency-symbol ::= number:currency-symbol::(number-currency-symbol-attlist string()) ;
presentation-notes ::= presentation:notes::(common-presentation-header-footer-attlist presentation-notes-attlist office-forms shape*) ;
number-number ::= number:number::(number-number-attlist common-decimal-places-attlist common-number-attlist number-embedded-text*) ;
common-repeat-timing-attlist ::= (smil:repeatDur::string)? (smil:repeatCount::(nonNegativeInteger | "indefinite"))? ;
office-presentation-content-epilogue ::= presentation-settings table-functions ;
table-database-range ::= table:database-range::(table-database-range-attlist (table-database-source-sql | table-database-source-table | table-database-source-query)? table-filter? table-sort? table-subtotal-rules?) ;
form-value-range-attlist ::= form-control-attlist common-disabled-attlist common-printable-attlist common-tab-attlist common-title-attlist common-value-attlist ;
 form-value-range-attlist ::= (form:max-value::string)? ;
 form-value-range-attlist ::= (form:min-value::string)? ;
 form-value-range-attlist ::= (form:step-size::positiveInteger)? ;
 form-value-range-attlist ::= (form:page-step-size::positiveInteger)? ;
 form-value-range-attlist ::= (form:delay-for-repeat::duration)? ;
 form-value-range-attlist ::= (form:orientation::("horizontal" | "vertical"))? ;
table-decls ::= table-calculation-settings? table-content-validations? table-label-ranges? ;
number-boolean-style ::= number:boolean-style::(common-data-style-attlist style-text-properties? number-text? (number-boolean number-text?)? style-map*) ;
config-config-item-set ::= config:config-item-set::(config-config-item-set-attlist config-items) ;
style-table-cell-properties-content-strict ::= style-table-cell-properties-attlist style-table-cell-properties-elements ;
text-bibliography-source ::= text:bibliography-source::(text-index-title-template? text-bibliography-entry-template*) ;
text-section ::= text:section::(text-section-attr text-section-source | text-section-source-dde | ε text-content*) ;
text-sort-key-attlist ::= text:key::("address" | "annote" | "author" | "bibliography-type" | "booktitle" | "chapter" | "custom1" | "custom2" | "custom3" | "custom4" | "custom5" | "edition" | "editor" | "howpublished" | "identifier" | "institution" | "isbn" | "issn" | "journal" | "month" | "note" | "number" | "organizations" | "pages" | "publisher" | "report-type" | "school" | "series" | "title" | "url" | "volume" | "year") (text:sort-ascending::boolean)? ;
number-currency-symbol-attlist ::= (number:language::languageCode)? (number:country::countryCode)? ;
text-list-item ::= text:list-item::(text-list-item-attr text-list-item-content) ;
style-list-level-properties-attlist ::= common-text-align ;
 style-list-level-properties-attlist ::= (text:space-before::nonNegativeLength)? ;
 style-list-level-properties-attlist ::= (text:min-label-width::nonNegativeLength)? ;
 style-list-level-properties-attlist ::= (text:min-label-distance::nonNegativeLength)? ;
 style-list-level-properties-attlist ::= (style:font-name::string)? ;
 style-list-level-properties-attlist ::= (fo:width::positiveLength)? (fo:height::positiveLength)? ;
 style-list-level-properties-attlist ::= common-vertical-rel-attlist common-vertical-pos-attlist ;
text-list-level-style-number-attr ::= (text:style-name::styleNameRef)? ;
 text-list-level-style-number-attr ::= common-num-format-attlist common-num-format-prefix-suffix-attlist ;
 text-list-level-style-number-attr ::= (text:display-levels::positiveInteger)? ;
 text-list-level-style-number-attr ::= (text:start-value::positiveInteger)? ;
number-year ::= number:year::(number-year-attlist common-calendar-attlist) ;
common-border-attlist ::= (fo:border::string)? (fo:border-top::string)? (fo:border-bottom::string)? (fo:border-left::string)? (fo:border-right::string)? ;
text-index-entry-span ::= text:index-entry-span::((text:style-name::styleNameRef)? string()) ;
text-date-attlist ::= common-field-fixed-attlist common-field-data-style-name-attlist ;
 text-date-attlist ::= (text:date-value::dateOrDateTime)? ;
 text-date-attlist ::= (text:date-adjust::duration)? ;
text-user-field-decl ::= text:user-field-decl::(common-field-name-attlist common-field-formula-attlist? common-value-and-type-attlist) ;
table-sort ::= table:sort::(table-sort-attlist table-sort-by+) ;
currency-symbol-and-text ::= number-currency-symbol number-text? ;
table-change-track-table-cell-attlist ::= (table:cell-address::cellAddress)? ;
 table-change-track-table-cell-attlist ::= (table:matrix-covered::boolean)? ;
 table-change-track-table-cell-attlist ::= (table:formula::string)? (table:number-matrix-columns-spanned::positiveInteger)? (table:number-matrix-rows-spanned::positiveInteger)? common-value-and-type-attlist? ;
text-illustration-index-source ::= text:illustration-index-source::(text-illustration-index-source-attrs text-index-title-template? text-illustration-index-entry-template?) ;
number-number-style ::= number:number-style::(common-data-style-attlist style-text-properties? number-text? (any-number number-text?)? style-map*) ;
chart-axis ::= chart:axis::(chart-axis-attlist chart-title? chart-categories? chart-grid*) ;
draw-custom-shape ::= draw:custom-shape::(draw-custom-shape-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text draw-enhanced-geometry?) ;
form-form ::= form:form::(common-form-control-attlist form-form-attlist form-properties? office-event-listeners? (controls | form-form)* form-connection-resource?) ;
common-table-cell-range-address-attlist ::= table:start-column::integer table:start-row::integer table:start-table::integer table:end-column::integer table:end-row::integer table:end-table::integer ;
common-draw-gradient-attlist ::= (draw:name::styleName)? ;
 common-draw-gradient-attlist ::= (draw:display-name::string)? ;
 common-draw-gradient-attlist ::= draw:style::gradient-style ;
 common-draw-gradient-attlist ::= (draw:cx::percent)? (draw:cy::percent)? ;
 common-draw-gradient-attlist ::= (draw:angle::integer)? ;
 common-draw-gradient-attlist ::= (draw:border::percent)? ;
style-header ::= style:header::(common-style-header-footer-attlist header-footer-content) ;
draw-polyline ::= draw:polyline::(common-draw-points-attlist common-draw-position-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
text-numbered-paragraph ::= text:numbered-paragraph::(text-numbered-paragraph-attr text-number? text-p | text-h) ;
number-quarter ::= number:quarter::(number-quarter-attlist common-calendar-attlist) ;
config-config-item-map-entry ::= config:config-item-map-entry::(config-config-item-map-entry-attlist config-items) ;
office-document-meta ::= office:document-meta::(office-document-common-attrs office-meta) ;
text-alphabetical-index-entry-template ::= text:alphabetical-index-entry-template::(text-alphabetical-index-entry-template-attrs (text-index-entry-chapter | text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop)*) ;
common-draw-data-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:show::"embed")? (xlink:actuate::"onLoad")? ;
table-data-pilot-field ::= table:data-pilot-field::(table-data-pilot-field-attlist table-data-pilot-level? table-data-pilot-field-reference? table-data-pilot-groups?) ;
text-table-of-content-entry-template ::= text:table-of-content-entry-template::(text-table-of-content-entry-template-attlist text-table-of-content-children*) ;
draw-g ::= draw:g::(draw-g-attlist common-draw-z-index-attlist common-draw-name-attlist common-draw-id-attlist common-draw-style-name-attlist common-text-spreadsheet-shape-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* shape*) ;
table-named-range-attlist ::= table:name::string table:cell-range-address::cellRangeAddress (table:base-cell-address::cellAddress)? (table:range-usable-as::("none" | (("print-range" | "filter" | "repeat-row" | "repeat-column")+)))? ;
table-table-row ::= table:table-row::(table-table-row-attlist (table-table-cell | table-covered-table-cell)+) ;
draw-a ::= draw:a::(draw-a-attlist draw-frame) ;
table-previous ::= table:previous::((table:id::string)? table-change-track-table-cell) ;
common-draw-shape-with-text-and-styles-attlist ::= common-draw-shape-with-styles-attlist common-draw-text-style-name-attlist ;
table-detective ::= table:detective::(table-highlighted-range* table-operation*) ;
number-text-style ::= number:text-style::(common-data-style-attlist style-text-properties? number-text? (number-text-content number-text?)* style-map*) ;
svg-font-face-uri ::= svg:font-face-uri::(common-svg-font-face-xlink-attlist svg-font-face-format*) ;
common-num-format-prefix-suffix-attlist ::= (style:num-prefix::string)? (style:num-suffix::string)? ;
text-list-style-content ::= text:list-level-style-number::(text-list-level-style-attr text-list-level-style-number-attr style-list-level-properties? style-text-properties?) ;
 text-list-style-content ::= text:list-level-style-bullet::(text-list-level-style-attr text-list-level-style-bullet-attr style-list-level-properties? style-text-properties?) ;
 text-list-style-content ::= text:list-level-style-image::(text-list-level-style-attr text-list-level-style-image-attr style-list-level-properties?) ;
common-svg-gradient-attlist ::= (svg:gradientUnits::"objectBoundingBox")? (svg:gradientTransform::string)? (svg:spreadMethod::("pad" | "reflect" | "repeat"))? ;
 common-svg-gradient-attlist ::= draw:name::styleName ;
 common-svg-gradient-attlist ::= (draw:display-name::string)? ;
style-page-layout ::= style:page-layout::(style-page-layout-attlist style-page-layout-properties? style-header-style? style-footer-style?) ;
draw-a-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? ;
 draw-a-attlist ::= (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? ;
 draw-a-attlist ::= (office:name::string)? ;
 draw-a-attlist ::= (office:title::string)? ;
 draw-a-attlist ::= (office:server-map::boolean)? ;
common-form-relative-image-position-attlist ::= ((form:image-position::"center")?) | (form:image-position::("start" | "end" | "top" | "bottom") (form:image-align::("start" | "center" | "end"))?) ;
office-spreadsheet-content-prelude ::= table-tracked-changes? text-decls table-decls ;
number-fraction ::= number:fraction::(number-fraction-attlist common-number-attlist) ;
common-draw-area-attlist ::= (xlink:href::anyURI)? (xlink:type::"simple")? (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? ;
 common-draw-area-attlist ::= (office:name::string)? ;
 common-draw-area-attlist ::= (draw:nohref::"nohref")? ;
text-bibliography ::= text:bibliography::(sectionAttr text-bibliography-source text-index-body) ;
table-dde-link ::= table:dde-link::(office-dde-source table-table) ;
table-table-attlist ::= (table:name::string)? ;
 table-table-attlist ::= (table:style-name::styleNameRef)? ;
 table-table-attlist ::= (table:protected::boolean)? (table:protection-key::string())? ;
 table-table-attlist ::= (table:print::boolean)? ;
 table-table-attlist ::= (table:print-ranges::cellRangeAddressList)? ;
 table-table-attlist ::= (table:is-sub-table::boolean)? ;
--------------------odf::opendoc-1.1.bgf--------------------
style-footnote-sep-attlist ::= (style:width::length)? (style:rel-width::percent)? (style:color::color)? (style:line-style::lineStyle)? (style:adjustment::("left" | "center" | "right"))? (style:distance-before-sep::length)? (style:distance-after-sep::length)? ;
style-font-face ::= style:font-face::(style-font-face-attlist svg-font-face-src? svg-definition-src?) ;
svg-linearGradient ::= svg:linearGradient::(common-svg-gradient-attlist (svg:x1::(coordinate | percent))? (svg:y1::(coordinate | percent))? (svg:x2::(coordinate | percent))? (svg:y2::(coordinate | percent))? svg-stop*) ;
number-currency-style ::= number:currency-style::(common-data-style-attlist common-auto-reorder-attlist style-text-properties? number-text? ((number-and-text currency-symbol-and-text?) | (currency-symbol-and-text number-and-text?))? style-map*) ;
table-covered-table-cell ::= table:covered-table-cell::(table-table-cell-attlist table-table-cell-content) ;
style-page-layout-properties-content-strict ::= style-page-layout-properties-attlist style-page-layout-properties-elements ;
text-notes-configuration-content ::= text-note-class ;
 text-notes-configuration-content ::= (text:citation-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:citation-body-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:default-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:master-page-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:start-value::nonNegativeInteger)? ;
 text-notes-configuration-content ::= common-num-format-prefix-suffix-attlist common-num-format-attlist? ;
 text-notes-configuration-content ::= (text:start-numbering-at::("document" | "chapter" | "page"))? ;
 text-notes-configuration-content ::= (text:footnotes-position::("text" | "page" | "section" | "document"))? ;
 text-notes-configuration-content ::= (text:note-continuation-notice-forward::string())? ;
 text-notes-configuration-content ::= (text:note-continuation-notice-backward::string())? ;
text-user-index-entry-template ::= text:user-index-entry-template::(text-user-index-entry-template-attrs (text-index-entry-chapter | text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop)*) ;
text-list-item-content ::= text-number? (text-p | text-h | text-list | text-soft-page-break)* ;
table-table-cell-range-source-attlist ::= table:name::string ;
 table-table-cell-range-source-attlist ::= table:last-column-spanned::positiveInteger table:last-row-spanned::positiveInteger ;
style-header-footer-properties-content-strict ::= style-header-footer-properties-attlist style-header-footer-properties-elements ;
number-scientific-number ::= number:scientific-number::(number-scientific-number-attlist common-decimal-places-attlist common-number-attlist) ;
presentation-hide-shape ::= presentation:hide-shape::(common-presentation-effect-attlist presentation-sound?) ;
draw-object ::= draw:object::(draw-object-attlist common-draw-data-attlist | office-document | math-math) ;
common-svg-font-face-xlink-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? ;
presentation-hide-text ::= presentation:hide-text::(common-presentation-effect-attlist presentation-sound?) ;
style-drawing-page-properties-content-strict ::= style-graphic-fill-properties-attlist style-drawing-page-properties-attlist style-drawing-page-properties-elements ;
draw-area-polygon ::= draw:area-polygon::(common-draw-area-attlist svg:x::coordinate svg:y::coordinate svg:width::length svg:height::length common-draw-viewbox-attlist common-draw-points-attlist svg-title? svg-desc? office-event-listeners?) ;
style-ruby-properties-content-strict ::= style-ruby-properties-attlist style-ruby-properties-elements ;
office-forms ::= (office:forms::(office-forms-attlist (form-form | xforms-model)*))? ;
draw-plugin ::= draw:plugin::(draw-plugin-attlist common-draw-data-attlist draw-param*) ;
office-drawing-content-prelude ::= text-decls table-decls ;
draw-area-rectangle ::= draw:area-rectangle::(common-draw-area-attlist svg:x::coordinate svg:y::coordinate svg:width::length svg:height::length svg-title? svg-desc? office-event-listeners?) ;
form-file-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist ;
table-table-rows ::= table:table-rows::((text-soft-page-break? table-table-row)+) ;
number-date-style ::= number:date-style::(common-data-style-attlist common-auto-reorder-attlist common-format-source-attlist style-text-properties? number-text? (any-date number-text?)+ style-map*) ;
draw-measure ::= draw:measure::(draw-measure-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
table-table-cell-attlist-extra ::= (table:number-columns-spanned::positiveInteger)? (table:number-rows-spanned::positiveInteger)? ;
 table-table-cell-attlist-extra ::= (table:number-matrix-columns-spanned::positiveInteger)? (table:number-matrix-rows-spanned::positiveInteger)? ;
common-text-spreadsheet-shape-attlist ::= (table:end-cell-address::cellAddress)? (table:end-x::coordinate)? (table:end-y::coordinate)? ;
 common-text-spreadsheet-shape-attlist ::= (table:table-background::boolean)? ;
 common-text-spreadsheet-shape-attlist ::= common-text-anchor-attlist ;
draw-control ::= draw:control::(draw-control-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? draw-glue-point*) ;
text-p ::= text:p::(paragraph-attrs paragraph-content*) ;
draw-line-attlist ::= svg:x1::coordinate svg:y1::coordinate ;
 draw-line-attlist ::= svg:x2::coordinate svg:y2::coordinate ;
table-movement ::= table:movement::(common-table-change-attlist table-source-range-address table-target-range-address office-change-info table-dependencies? table-deletions?) ;
svg-stop ::= svg:stop::(svg:offset::(double | percent) (svg:stop-color::color)? (svg:stop-opacity::double)?) ;
style-tab-stop-attlist ::= style:position::nonNegativeLength ;
 style-tab-stop-attlist ::= ((style:type::("left" | "center" | "right"))?) | (style:type::"char" style-tab-stop-char-attlist) ;
 style-tab-stop-attlist ::= (style:leader-type::lineType)? ;
 style-tab-stop-attlist ::= (style:leader-style::lineStyle)? ;
 style-tab-stop-attlist ::= (style:leader-width::lineWidth)? ;
 style-tab-stop-attlist ::= (style:leader-color::("font-color" | color))? ;
 style-tab-stop-attlist ::= (style:leader-text::string)? ;
 style-tab-stop-attlist ::= (style:leader-text-style::styleNameRef)? ;
text-h ::= text:h::(heading-attrs paragraph-attrs text-number? paragraph-content*) ;
text-table-of-content-source ::= text:table-of-content-source::(text-table-of-content-source-attlist text-index-title-template? text-table-of-content-entry-template* text-index-source-styles*) ;
form-hidden-attlist ::= form-control-attlist common-value-attlist ;
text-index-entry-tab-stop-attrs ::= (style:leader-char::character)? ;
 text-index-entry-tab-stop-attrs ::= (style:type::"right") | (style:type::"left" style:position::length) ;
table-source-cell-range ::= table:source-cell-range::(table-source-cell-range-attlist table-filter?) ;
office-document-settings ::= office:document-settings::(office-document-common-attrs office-settings) ;
style-columns ::= (style:columns::(style-columns-attlist style-column-sep? style-column*))? ;
dr3d-sphere ::= dr3d:sphere::(dr3d-sphere-attlist common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-dr3d-transform-attlist) ;
number-time-style ::= number:time-style::(number-time-style-attlist common-data-style-attlist common-format-source-attlist style-text-properties? number-text? (any-time number-text?)+ style-map*) ;
text-table-index-source ::= text:table-index-source::(text-illustration-index-source-attrs text-index-title-template? text-table-index-entry-template?) ;
office-automatic-styles ::= (office:automatic-styles::(styles style-page-layout*))? ;
animation-element ::= anim:animate::(common-anim-target-attlist common-anim-named-target-attlist common-anim-values-attlist common-anim-spline-mode-attlist common-spline-anim-value-attlist common-timing-attlist common-anim-add-accum-attlist) ;
 animation-element ::= anim:set::(common-anim-target-attlist common-anim-named-target-attlist common-anim-set-values-attlist common-timing-attlist common-anim-add-accum-attlist) ;
 animation-element ::= anim:animateMotion::(anim-animate-motion-attlist common-anim-target-attlist common-anim-named-target-attlist common-anim-add-accum-attlist common-anim-values-attlist common-timing-attlist common-spline-anim-value-attlist) ;
 animation-element ::= anim:animateColor::(common-anim-target-attlist common-anim-named-target-attlist common-anim-add-accum-attlist common-anim-values-attlist common-anim-spline-mode-attlist common-spline-anim-value-attlist anim-animate-color-attlist common-timing-attlist) ;
 animation-element ::= anim:animateTransform::(common-anim-target-attlist common-anim-named-target-attlist common-anim-add-accum-attlist common-anim-values-attlist anim-animate-transform-attlist common-timing-attlist) ;
 animation-element ::= anim:transitionFilter::(common-anim-target-attlist common-anim-add-accum-attlist common-anim-values-attlist common-anim-spline-mode-attlist anim-transition-filter-attlist common-timing-attlist) ;
 animation-element ::= anim:par::(common-anim-attlist common-timing-attlist common-endsync-timing-attlist animation-element*) ;
 animation-element ::= anim:seq::(common-anim-attlist common-endsync-timing-attlist common-timing-attlist animation-element*) ;
 animation-element ::= anim:iterate::(common-anim-attlist anim-iterate-attlist common-timing-attlist common-endsync-timing-attlist animation-element*) ;
 animation-element ::= anim:audio::(common-anim-attlist anim-audio-attlist common-basic-timing-attlist) ;
 animation-element ::= anim:command::(common-anim-attlist anim-command-attlist common-begin-end-timing-attlist common-anim-target-attlist (anim:param::(anim:name::string() anim:value::string()))*) ;
text-dde-connection-decl ::= text:dde-connection-decl::(text-dde-connection-decl-attlist common-dde-connection-decl-attlist) ;
draw-polygon ::= draw:polygon::(common-draw-points-attlist common-draw-position-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
anyAttListOrElements ::= string()* anyElements ;
common-numeric-control-attlist ::= form-control-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-convert-empty-attlist common-data-field-attlist ;
chart-title ::= chart:title::(chart-title-attlist text-p?) ;
table-data-pilot-group ::= table:data-pilot-group::(table-data-pilot-group-attlist table-data-pilot-group-member+) ;
draw-frame ::= draw:frame::(common-draw-shape-with-text-and-styles-attlist common-draw-position-attlist common-draw-rel-size-attlist common-draw-caption-id-attlist presentation-shape-attlist draw-frame-attlist (draw-text-box | draw-image | draw-object | draw-object-ole | draw-applet | draw-floating-frame | draw-plugin)* office-event-listeners? draw-glue-point* draw-image-map? svg-title? svg-desc? (draw-contour-polygon | draw-contour-path)?) ;
form-radio-attlist ::= form-control-attlist current-selected common-disabled-attlist label common-printable-attlist selected common-tab-attlist common-title-attlist common-value-attlist common-data-field-attlist common-form-visual-effect-attlist common-form-relative-image-position-attlist ;
dr3d-cube ::= dr3d:cube::(dr3d-cube-attlist common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-dr3d-transform-attlist) ;
common-form-control-content ::= form-properties? office-event-listeners? ;
form-grid-attlist ::= form-control-attlist common-disabled-attlist common-printable-attlist common-tab-attlist common-title-attlist ;
form-option ::= form:option::(form-option-attlist string()) ;
table-iteration ::= table:iteration::((table:status::("enable" | "disable"))? (table:steps::positiveInteger)? (table:maximum-difference::double)?) ;
presentation-event-listener ::= presentation:event-listener::(presentation-event-listener-attlist presentation-sound?) ;
draw-gradient ::= draw:gradient::(common-draw-gradient-attlist draw-gradient-attlist) ;
text-user-index-source ::= text:user-index-source::(text-user-index-source-attr text-index-title-template? text-user-index-entry-template* text-index-source-styles*) ;
text-index-entry-chapter ::= text:index-entry-chapter::((text:style-name::styleNameRef)? text-index-entry-chapter-attrs) ;
draw-text-box ::= draw:text-box::(draw-text-box-attlist text-content*) ;
draw-image ::= draw:image::(draw-image-attlist common-draw-data-attlist | office-binary-data draw-text) ;
table-data-pilot-field-reference-attlist ::= table:field-name::string ;
 table-data-pilot-field-reference-attlist ::= (table:member-type::"named" table:member-name::string) | (table:member-type::("previous" | "next")) ;
 table-data-pilot-field-reference-attlist ::= table:type::("none" | "member-difference" | "member-percentage" | "member-percentage-difference" | "running-total" | "row-percentage" | "column-percentage" | "total-percentage" | "index") ;
form-option-attlist ::= current-selected selected label common-value-attlist ;
common-break-attlist ::= (fo:break-before::("auto" | "column" | "page"))? (fo:break-after::("auto" | "column" | "page"))? ;
table-table-row-group ::= table:table-row-group::(table-table-row-group-attlist table-rows-and-groups) ;
table-data-pilot-groups ::= table:data-pilot-groups::(table-data-pilot-groups-attlist table-data-pilot-group+) ;
presentation-event-listener-attlist ::= script:event-name::string ;
 presentation-event-listener-attlist ::= presentation:action::("none" | "previous-page" | "next-page" | "first-page" | "last-page" | "hide" | "stop" | "execute" | "show" | "verb" | "fade-out" | "sound") ;
 presentation-event-listener-attlist ::= (presentation:effect::presentationEffects)? ;
 presentation-event-listener-attlist ::= (presentation:direction::presentationEffectDirections)? ;
 presentation-event-listener-attlist ::= (presentation:speed::presentationSpeeds)? ;
 presentation-event-listener-attlist ::= (presentation:start-scale::percent)? ;
 presentation-event-listener-attlist ::= (xlink:href::anyURI)? (xlink:type::"simple")? (xlink:show::"embed")? (xlink:actuate::"onRequest")? ;
 presentation-event-listener-attlist ::= (presentation:verb::nonNegativeInteger)? ;
draw-layer ::= draw:layer::(draw-layer-attlist svg-title? svg-desc?) ;
header-footer-content ::= (text-tracked-changes text-decls (text-h | text-p | text-list | table-table | text-section | text-table-of-content | text-illustration-index | text-table-index | text-object-index | text-user-index | text-alphabetical-index | text-bibliography | text-index-title | change-marks)*) | (style-region-left? style-region-center? style-region-right?) ;
style-page-layout-properties-attlist ::= (fo:page-width::length)? (fo:page-height::length)? ;
 style-page-layout-properties-attlist ::= common-num-format-attlist? common-num-format-prefix-suffix-attlist ;
 style-page-layout-properties-attlist ::= (style:paper-tray-name::("default" | string))? ;
 style-page-layout-properties-attlist ::= (style:print-orientation::("portrait" | "landscape"))? ;
 style-page-layout-properties-attlist ::= common-horizontal-margin-attlist common-vertical-margin-attlist common-margin-attlist ;
 style-page-layout-properties-attlist ::= common-border-attlist ;
 style-page-layout-properties-attlist ::= common-border-line-width-attlist ;
 style-page-layout-properties-attlist ::= common-padding-attlist ;
 style-page-layout-properties-attlist ::= common-shadow-attlist ;
 style-page-layout-properties-attlist ::= common-background-color-attlist ;
 style-page-layout-properties-attlist ::= (style:register-truth-ref-style-name::styleNameRef)? ;
 style-page-layout-properties-attlist ::= (style:print::(("headers" | "grid" | "annotations" | "objects" | "charts" | "drawings" | "formulas" | "zero-values")*))? ;
 style-page-layout-properties-attlist ::= (style:print-page-order::("ttb" | "ltr"))? ;
 style-page-layout-properties-attlist ::= (style:first-page-number::(positiveInteger | "continue"))? ;
 style-page-layout-properties-attlist ::= (style:scale-to::percent)? (style:scale-to-pages::positiveInteger)? ;
 style-page-layout-properties-attlist ::= (style:table-centering::("horizontal" | "vertical" | "both" | "none"))? ;
 style-page-layout-properties-attlist ::= (style:footnote-max-height::length)? ;
 style-page-layout-properties-attlist ::= common-writing-mode-attlist ;
 style-page-layout-properties-attlist ::= (style:layout-grid-mode::("none" | "line" | "both"))? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-base-height::length)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-ruby-height::length)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-lines::positiveInteger)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-color::color)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-ruby-below::boolean)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-print::boolean)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-display::boolean)? ;
draw-text-box-attlist ::= (draw:chain-next-name::string)? ;
 draw-text-box-attlist ::= (draw:corner-radius::nonNegativeLength)? ;
 draw-text-box-attlist ::= (fo:min-height::(length | percent))? (fo:min-width::(length | percent))? ;
 draw-text-box-attlist ::= (fo:max-height::(length | percent))? (fo:max-width::(length | percent))? ;
 draw-text-box-attlist ::= text-id? ;
table-error-message ::= table:error-message::((table:title::string)? (table:display::boolean)? (table:message-type::("stop" | "warning" | "information"))? text-p*) ;
paragraph-attrs ::= (text:style-name::styleNameRef)? (text:class-names::styleNameRefs)? (text:cond-style-name::styleNameRef)? ;
 paragraph-attrs ::= text-id? ;
table-columns-no-group ::= (table-columns (table-table-header-columns table-columns?)?) | (table-table-header-columns table-columns?) ;
form-fixed-text-attlist ::= form-control-attlist for common-disabled-attlist label common-printable-attlist common-title-attlist ;
 form-fixed-text-attlist ::= (form:multi-line::boolean)? ;
draw-regular-polygon ::= draw:regular-polygon::(draw-regular-polygon-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
common-border-line-width-attlist ::= (style:border-line-width::borderWidths)? (style:border-line-width-top::borderWidths)? (style:border-line-width-bottom::borderWidths)? (style:border-line-width-left::borderWidths)? (style:border-line-width-right::borderWidths)? ;
presentation-decl ::= presentation:header-decl::(presentation-header-decl-attlist string()) ;
 presentation-decl ::= presentation:footer-decl::(presentation-footer-decl-attlist string()) ;
 presentation-decl ::= presentation:date-time-decl::(presentation-date-time-decl-attlist string()) ;
common-draw-size-attlist ::= (svg:width::length)? (svg:height::length)? ;
text-changed-region-content ::= text:insertion::office-change-info ;
 text-changed-region-content ::= text:deletion::(office-change-info text-content*) ;
 text-changed-region-content ::= text:format-change::office-change-info ;
draw-circle ::= draw:circle::(draw-circle-attlist common-draw-circle-ellipse-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
table-table-template ::= table:table-template::(table-table-template-attlist table-first-row? table-last-row? table-first-column? table-last-column? table-body | (table-even-rows table-odd-rows) | (table-even-columns table-odd-columns)) ;
draw-page ::= draw:page::(common-presentation-header-footer-attlist draw-page-attlist office-forms? shape* (presentation-animations | animation-element)? presentation-notes?) ;
dr3d-extrude ::= dr3d:extrude::(common-draw-path-data-attlist common-draw-viewbox-attlist common-draw-id-attlist common-draw-z-index-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-dr3d-transform-attlist) ;
form-password-attlist ::= form-control-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist ;
 form-password-attlist ::= (form:echo-char::character)? ;
presentation-settings ::= (presentation:settings::(presentation-settings-attlist presentation-show*))? ;
style-text-properties-content-strict ::= style-text-properties-attlist style-text-properties-elements ;
text-table-index ::= text:table-index::(sectionAttr text-table-index-source text-index-body) ;
draw-regular-polygon-attlist ::= (draw:concave::"false") | (draw:concave::"true" draw-regular-polygon-sharpness-attlist) ;
 draw-regular-polygon-attlist ::= draw:corners::positiveInteger ;
form-column-attlist ::= common-form-control-attlist label text-style-name ;
table-insertion ::= table:insertion::(table-insertion-attlist common-table-change-attlist office-change-info table-dependencies? table-deletions?) ;
text-outline-level-style-attlist ::= text:level::positiveInteger ;
 text-outline-level-style-attlist ::= (text:style-name::styleNameRef)? ;
 text-outline-level-style-attlist ::= common-num-format-attlist common-num-format-prefix-suffix-attlist ;
 text-outline-level-style-attlist ::= (text:display-levels::positiveInteger)? ;
 text-outline-level-style-attlist ::= (text:start-value::positiveInteger)? ;
common-anim-values-attlist ::= (smil:values::string)? ;
 common-anim-values-attlist ::= (anim:formula::string)? ;
 common-anim-values-attlist ::= common-anim-set-values-attlist (smil:from::string)? (smil:by::string)? ;
office-text-content-prelude ::= office-forms text-tracked-changes text-decls table-decls ;
common-draw-shape-with-styles-attlist ::= common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-draw-transform-attlist common-draw-name-attlist common-text-spreadsheet-shape-attlist ;
number-and-text ::= number-number number-text? ;
config-config-item-map-indexed ::= config:config-item-map-indexed::(config-config-item-map-indexed-attlist config-config-item-map-entry+) ;
presentation-show-shape ::= presentation:show-shape::(common-presentation-effect-attlist presentation-sound?) ;
text-object-index ::= text:object-index::(sectionAttr text-object-index-source text-index-body) ;
table-table-cell ::= table:table-cell::(table-table-cell-attlist table-table-cell-attlist-extra table-table-cell-content) ;
common-draw-style-name-attlist ::= ((draw:style-name::styleNameRef)? (draw:class-names::styleNameRefs)?) | ((presentation:style-name::styleNameRef)? (presentation:class-names::styleNameRefs)?) ;
text-bibliography-configuration-attlist ::= (text:prefix::string)? (text:suffix::string)? ;
 text-bibliography-configuration-attlist ::= (text:numbered-entries::boolean)? ;
 text-bibliography-configuration-attlist ::= (text:sort-by-position::boolean)? (fo:language::languageCode)? (fo:country::countryCode)? (text:sort-algorithm::string)? ;
office-master-styles ::= (office:master-styles::(style-master-page* style-handout-master? draw-layer-set?))? ;
table-table-header-rows ::= table:table-header-rows::((text-soft-page-break? table-table-row)+) ;
office-chart-content-prelude ::= text-decls table-decls ;
table-movement-cut-off-attlist ::= (table:position::integer) | (table:start-position::integer table:end-position::integer) ;
presentation-dim ::= presentation:dim::(presentation-dim-attlist presentation-sound?) ;
draw-caption-attlist ::= (draw:caption-point-x::coordinate draw:caption-point-y::coordinate)? ;
 draw-caption-attlist ::= (draw:corner-radius::nonNegativeLength)? ;
form-button-attlist ::= form-control-attlist button-type common-disabled-attlist label image-data common-printable-attlist common-tab-attlist target-frame target-location common-title-attlist common-value-attlist common-form-relative-image-position-attlist ;
 form-button-attlist ::= (form:default-button::boolean)? ;
 form-button-attlist ::= (form:toggle::boolean)? ;
 form-button-attlist ::= (form:focus-on-click::boolean)? ;
 form-button-attlist ::= (form:xforms-submission::string)? ;
column-controls ::= form:text::(form-text-attlist common-form-control-content) ;
 column-controls ::= form:textarea::(form-textarea-attlist common-form-control-content text-p*) ;
 column-controls ::= form:formatted-text::(form-formatted-text-attlist common-form-control-content) ;
 column-controls ::= form:number::(form-number-attlist common-numeric-control-attlist common-form-control-content) ;
 column-controls ::= form:date::(form-date-attlist common-numeric-control-attlist common-form-control-content) ;
 column-controls ::= form:combobox::(form-combobox-attlist common-form-control-content form-item*) ;
 column-controls ::= form:listbox::(form-listbox-attlist common-form-control-content form-option*) ;
 column-controls ::= form:checkbox::(form-checkbox-attlist common-form-control-content) ;
text-index-title-template ::= text:index-title-template::((text:style-name::styleNameRef)? string()) ;
dr3d-rotate ::= dr3d:rotate::(common-draw-viewbox-attlist common-draw-path-data-attlist common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-dr3d-transform-attlist) ;
draw-ellipse-attlist ::= (svg:rx::length svg:ry::length)? ;
chart-series ::= chart:series::(chart-series-attlist chart-domain* chart-mean-value? chart-regression-curve? chart-error-indicator? chart-data-point*) ;
form-control-attlist ::= common-form-control-attlist common-control-id-attlist xforms-bind-attlist ;
table-table-column-group ::= table:table-column-group::(table-table-column-group-attlist table-columns-and-groups) ;
table-calculation-settings ::= table:calculation-settings::(table-calculation-setting-attlist table-null-date? table-iteration?) ;
style-style-content ::= style:family::"text" style-text-properties? ;
 style-style-content ::= style:family::"paragraph" style-paragraph-properties? style-text-properties? ;
 style-style-content ::= style:family::"section" style-section-properties? ;
 style-style-content ::= style:family::"ruby" style-ruby-properties? ;
 style-style-content ::= style:family::"table" style-table-properties? ;
 style-style-content ::= style:family::"table-column" style-table-column-properties? ;
 style-style-content ::= style:family::"table-row" style-table-row-properties? ;
 style-style-content ::= style:family::"table-cell" style-table-cell-properties? style-paragraph-properties? style-text-properties? ;
 style-style-content ::= style:family::("graphic" | "presentation") style-graphic-properties? style-paragraph-properties? style-text-properties? ;
 style-style-content ::= style:family::"drawing-page" style-drawing-page-properties? ;
 style-style-content ::= style:family::"chart" style-chart-properties? style-graphic-properties? style-paragraph-properties? style-text-properties? ;
table-change-track-table-cell ::= table:change-track-table-cell::(table-change-track-table-cell-attlist text-p*) ;
presentation-placeholder ::= presentation:placeholder::(presentation:object::presentation-classes svg:x::(coordinate | percent) svg:y::(coordinate | percent) svg:width::(length | percent) svg:height::(length | percent)) ;
text-list ::= text:list::(text-list-attr text-list-header? text-list-item*) ;
common-table-cell-address-attlist ::= table:column::integer table:row::integer table:table::integer ;
style-footer ::= style:footer::(common-style-header-footer-attlist header-footer-content) ;
common-num-format-attlist ::= (style:num-format::("1" | "i" | "I" | string | ε)) | (style:num-format::("a" | "A") style-num-letter-sync-attlist) | ε ;
text-index-entry-tab-stop ::= text:index-entry-tab-stop::((text:style-name::styleNameRef)? text-index-entry-tab-stop-attrs) ;
chart-chart ::= chart:chart::(chart-chart-attlist chart-title? chart-subtitle? chart-footer? chart-legend? chart-plot-area table-table?) ;
office-spreadsheet-attlist ::= (table:structure-protected::boolean)? (table:protection-key::string)? ;
style-chart-properties-content-strict ::= style-chart-properties-attlist style-chart-properties-elements ;
style-header-left ::= style:header-left::(common-style-header-footer-attlist header-footer-content) ;
table-rows-no-group ::= (table-rows (table-table-header-rows table-rows?)?) | (table-table-header-rows table-rows?) ;
chart-subtitle ::= chart:subtitle::(chart-title-attlist text-p?) ;
common-draw-position-attlist ::= (svg:x::coordinate)? (svg:y::coordinate)? ;
common-padding-attlist ::= (fo:padding::nonNegativeLength)? (fo:padding-top::nonNegativeLength)? (fo:padding-bottom::nonNegativeLength)? (fo:padding-left::nonNegativeLength)? (fo:padding-right::nonNegativeLength)? ;
draw-contour-path ::= draw:contour-path::(common-contour-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-path-data-attlist) ;
table-tracked-changes ::= table:tracked-changes::(table-tracked-changes-attlist (table-cell-content-change | table-insertion | table-deletion | table-movement)*) ;
style-table-properties-attlist ::= (style:width::positiveLength)? (style:rel-width::percent)? ;
 style-table-properties-attlist ::= (table:align::("left" | "center" | "right" | "margins"))? ;
 style-table-properties-attlist ::= common-horizontal-margin-attlist ;
 style-table-properties-attlist ::= common-vertical-margin-attlist ;
 style-table-properties-attlist ::= common-margin-attlist ;
 style-table-properties-attlist ::= common-page-number-attlist ;
 style-table-properties-attlist ::= common-break-attlist ;
 style-table-properties-attlist ::= common-background-color-attlist ;
 style-table-properties-attlist ::= common-shadow-attlist ;
 style-table-properties-attlist ::= common-keep-with-next-attlist ;
 style-table-properties-attlist ::= (style:may-break-between-rows::boolean)? ;
 style-table-properties-attlist ::= (table:border-model::("collapsing" | "separating"))? ;
 style-table-properties-attlist ::= common-writing-mode-attlist ;
 style-table-properties-attlist ::= (table:display::boolean)? ;
text-alphabetical-index-source-attrs ::= text-index-scope-attr text-relative-tab-stop-position-attr ;
 text-alphabetical-index-source-attrs ::= (text:ignore-case::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:main-entry-style-name::styleNameRef)? ;
 text-alphabetical-index-source-attrs ::= (text:alphabetical-separators::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:combine-entries::boolean)? (text:combine-entries-with-dash::boolean)? (text:combine-entries-with-pp::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:use-keys-as-entries::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:capitalize-entries::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:comma-separated::boolean)? ;
 text-alphabetical-index-source-attrs ::= (fo:language::languageCode)? ;
 text-alphabetical-index-source-attrs ::= (fo:country::countryCode)? ;
 text-alphabetical-index-source-attrs ::= (text:sort-algorithm::string)? ;
form-form-attlist ::= (xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")?)? ;
 form-form-attlist ::= (office:target-frame::targetFrameName)? ;
 form-form-attlist ::= (form:method::("get" | "post" | string))? ;
 form-form-attlist ::= (form:enctype::string)? ;
 form-form-attlist ::= (form:allow-deletes::boolean)? ;
 form-form-attlist ::= (form:allow-inserts::boolean)? ;
 form-form-attlist ::= (form:allow-updates::boolean)? ;
 form-form-attlist ::= (form:apply-filter::boolean)? ;
 form-form-attlist ::= (form:command-type::("table" | "query" | "command"))? ;
 form-form-attlist ::= (form:command::string())? ;
 form-form-attlist ::= (form:datasource::(anyURI | string))? ;
 form-form-attlist ::= (form:master-fields::string)? ;
 form-form-attlist ::= (form:detail-fields::string)? ;
 form-form-attlist ::= (form:escape-processing::boolean)? ;
 form-form-attlist ::= (form:filter::string)? ;
 form-form-attlist ::= (form:ignore-result::boolean)? ;
 form-form-attlist ::= (form:navigation-mode::navigation)? ;
 form-form-attlist ::= (form:order::string)? ;
 form-form-attlist ::= (form:tab-cycle::tab-cycles)? ;
text-alphabetical-index ::= text:alphabetical-index::(sectionAttr text-alphabetical-index-source text-index-body) ;
style-table-properties-content-strict ::= style-table-properties-attlist style-table-properties-elements ;
office-change-info ::= office:change-info::(dc-creator dc-date text-p*) ;
table-help-message ::= table:help-message::((table:title::string)? (table:display::boolean)? text-p*) ;
paragraph-content ::= string() ;
 paragraph-content ::= text:s::((text:c::nonNegativeInteger)?) ;
 paragraph-content ::= text:tab::text-tab-attr ;
 paragraph-content ::= text:line-break::ε ;
 paragraph-content ::= text-soft-page-break ;
 paragraph-content ::= text:span::((text:style-name::styleNameRef)? (text:class-names::styleNameRefs)? paragraph-content*) ;
 paragraph-content ::= text:a::(text-a-attlist office-event-listeners? paragraph-content*) ;
 paragraph-content ::= (text:bookmark::(text:name::string)) | (text:bookmark-start::(text:name::string)) | (text:bookmark-end::(text:name::string)) ;
 paragraph-content ::= text:reference-mark::(text:name::string) ;
 paragraph-content ::= (text:reference-mark-start::(text:name::string)) | (text:reference-mark-end::(text:name::string)) ;
 paragraph-content ::= text:note::(text-note-class (text:id::string)? text:note-citation::((text:label::string)? string()) text:note-body::(text-content*)) ;
 paragraph-content ::= text:ruby::((text:style-name::styleNameRef)? text:ruby-base::paragraph-content text:ruby-text::((text:style-name::styleNameRef)? string())) ;
 paragraph-content ::= office-annotation ;
 paragraph-content ::= change-marks ;
 paragraph-content ::= shape | draw-a ;
 paragraph-content ::= text:date::(text-date-attlist string()) ;
 paragraph-content ::= text:time::(text-time-attlist string()) ;
 paragraph-content ::= text:page-number::(text-page-number-attlist string()) ;
 paragraph-content ::= text:page-continuation::(text-page-continuation-attlist string()) ;
 paragraph-content ::= text:sender-firstname::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-lastname::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-initials::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-title::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-position::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-email::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-phone-private::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-fax::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-company::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-phone-work::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-street::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-city::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-postal-code::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-country::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-state-or-province::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:author-name::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:author-initials::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:chapter::(text-chapter-attlist string()) ;
 paragraph-content ::= text:file-name::(text-file-name-attlist string()) ;
 paragraph-content ::= text:template-name::(text-template-name-attlist string()) ;
 paragraph-content ::= text:sheet-name::string() ;
 paragraph-content ::= text:variable-set::(common-field-name-attlist common-field-formula-attlist common-value-and-type-attlist common-field-display-value-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:variable-get::(common-field-name-attlist common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:variable-input::(common-field-name-attlist common-field-description-attlist common-value-type-attlist common-field-display-value-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:user-field-get::(common-field-name-attlist common-field-display-value-formula-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:user-field-input::(common-field-name-attlist common-field-description-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:sequence::(common-field-name-attlist common-field-formula-attlist common-field-num-format-attlist text-sequence-ref-name string()) ;
 paragraph-content ::= text:expression::(common-field-formula-attlist common-value-and-type-attlist? common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:text-input::(common-field-description-attlist string()) ;
 paragraph-content ::= text:initial-creator::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:creation-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::dateOrDateTime)? string()) ;
 paragraph-content ::= text:creation-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::timeOrDateTime)? string()) ;
 paragraph-content ::= text:description::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:user-defined::(common-field-fixed-attlist text:name::string common-field-data-style-name-attlist (office:value::double)? (office:date-value::dateOrDateTime)? (office:time-value::duration)? (office:boolean-value::boolean)? (office:string-value::string)? string()) ;
 paragraph-content ::= text:print-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::time)? string()) ;
 paragraph-content ::= text:print-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::date)? string()) ;
 paragraph-content ::= text:printed-by::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:title::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:subject::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:keywords::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:editing-cycles::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:editing-duration::(common-field-fixed-attlist common-field-data-style-name-attlist (text:duration::duration)? string()) ;
 paragraph-content ::= text:modification-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::time)? string()) ;
 paragraph-content ::= text:modification-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::date)? string()) ;
 paragraph-content ::= text:creator::(common-field-fixed-attlist string()) ;
 paragraph-content ::= (text:page-count::(common-field-num-format-attlist string())) | (text:paragraph-count::(common-field-num-format-attlist string())) | (text:word-count::(common-field-num-format-attlist string())) | (text:character-count::(common-field-num-format-attlist string())) | (text:table-count::(common-field-num-format-attlist string())) | (text:image-count::(common-field-num-format-attlist string())) | (text:object-count::(common-field-num-format-attlist string())) ;
 paragraph-content ::= text:database-display::(text-database-display-attlist string()) ;
 paragraph-content ::= text:database-next::text-database-next-attlist ;
 paragraph-content ::= text:database-row-select::text-database-row-select-attlist ;
 paragraph-content ::= text:database-row-number::(common-field-database-table common-field-num-format-attlist (text:value::nonNegativeInteger)? string()) ;
 paragraph-content ::= text:database-name::(common-field-database-table string()) ;
 paragraph-content ::= text:page-variable-set::(text-set-page-variable-attlist string()) ;
 paragraph-content ::= text:page-variable-get::(text-get-page-variable-attlist string()) ;
 paragraph-content ::= text:placeholder::(text-placeholder-attlist string()) ;
 paragraph-content ::= text:conditional-text::(text-conditional-text-attlist string()) ;
 paragraph-content ::= text:hidden-text::(text-hidden-text-attlist string()) ;
 paragraph-content ::= (text:reference-ref::(text-common-ref-content text-ref-content)) | (text:bookmark-ref::(text-common-ref-content text-ref-content)) ;
 paragraph-content ::= text:note-ref::(text-common-ref-content text-note-ref-content text-ref-content) ;
 paragraph-content ::= text:sequence-ref::(text-common-ref-content text-sequence-ref-content) ;
 paragraph-content ::= text:script::((xlink:href::anyURI (xlink:type::"simple")?) | string() (script:language::string)?) ;
 paragraph-content ::= text:execute-macro::((text:name::string)? office-event-listeners? string()) ;
 paragraph-content ::= text:hidden-paragraph::(text-hidden-paragraph-attlist string()) ;
 paragraph-content ::= text:dde-connection::(text:connection-name::string string()) ;
 paragraph-content ::= text:measure::(text:kind::("value" | "unit" | "gap") string()) ;
 paragraph-content ::= text:table-formula::(common-field-formula-attlist common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:toc-mark-start::text-toc-mark-start-attrs ;
 paragraph-content ::= text:toc-mark-end::text-id ;
 paragraph-content ::= text:toc-mark::(text:string-value::string text-outline-level) ;
 paragraph-content ::= text:user-index-mark-start::(text-id text-outline-level text-index-name) ;
 paragraph-content ::= text:user-index-mark-end::(text-id text-outline-level) ;
 paragraph-content ::= text:user-index-mark::(text:string-value::string text-outline-level text-index-name) ;
 paragraph-content ::= text:alphabetical-index-mark-start::(text-id text-alphabetical-index-mark-attrs) ;
 paragraph-content ::= text:alphabetical-index-mark-end::text-id ;
 paragraph-content ::= text:alphabetical-index-mark::(text:string-value::string text-alphabetical-index-mark-attrs) ;
 paragraph-content ::= text:bibliography-mark::(text:bibliography-type::text-bibliography-types ((text:identifier::string) | (text:address::string) | (text:annote::string) | (text:author::string) | (text:booktitle::string) | (text:chapter::string) | (text:edition::string) | (text:editor::string) | (text:howpublished::string) | (text:institution::string) | (text:journal::string) | (text:month::string) | (text:note::string) | (text:number::string) | (text:organizations::string) | (text:pages::string) | (text:publisher::string) | (text:school::string) | (text:series::string) | (text:title::string) | (text:report-type::string) | (text:volume::string) | (text:year::string) | (text:url::string) | (text:custom1::string) | (text:custom2::string) | (text:custom3::string) | (text:custom4::string) | (text:custom5::string) | (text:isbn::string) | (text:issn::string))* string()) ;
 paragraph-content ::= presentation:header::ε ;
 paragraph-content ::= presentation:footer::ε ;
 paragraph-content ::= presentation:date-time::ε ;
number-day ::= number:day::(number-day-attlist common-calendar-attlist) ;
table-data-pilot-sort-info-attlist ::= (table:sort-mode::"data" table:data-field::string) | (table:sort-mode::("none" | "manual" | "name")) ;
 table-data-pilot-sort-info-attlist ::= table:order::("ascending" | "descending") ;
form-frame-attlist ::= form-control-attlist common-disabled-attlist for label common-printable-attlist common-title-attlist ;
form-textarea-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist ;
draw-glue-point-attlist ::= draw:id::nonNegativeInteger ;
 draw-glue-point-attlist ::= svg:x::(distance | percent) svg:y::(distance | percent) ;
 draw-glue-point-attlist ::= (draw:align::("top-left" | "top" | "top-right" | "left" | "center" | "right" | "bottom-left" | "bottom-right"))? ;
table-data-pilot-field-attlist ::= table:source-field-name::string ;
 table-data-pilot-field-attlist ::= (table:orientation::("row" | "column" | "data" | "hidden")) | (table:orientation::"page" table:selected-page::string) ;
 table-data-pilot-field-attlist ::= (table:is-data-layout-field::string)? ;
 table-data-pilot-field-attlist ::= (table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string))? ;
 table-data-pilot-field-attlist ::= (table:used-hierarchy::integer)? ;
office-styles ::= (office:styles::(styles style-default-style* text-outline-style? text-notes-configuration* text-bibliography-configuration? text-linenumbering-configuration? draw-gradient* svg-linearGradient* svg-radialGradient* draw-hatch* draw-fill-image* draw-marker* draw-stroke-dash* draw-opacity* style-presentation-page-layout*))? ;
common-vertical-pos-attlist ::= (style:vertical-pos::("top" | "middle" | "bottom" | "from-top" | "below"))? (svg:y::coordinate)? ;
common-draw-viewbox-attlist ::= svg:viewBox::(integer integer integer integer) ;
style-chart-properties-attlist ::= (chart:scale-text::boolean)? ;
 style-chart-properties-attlist ::= (chart:three-dimensional::boolean)? ;
 style-chart-properties-attlist ::= (chart:deep::boolean)? ;
 style-chart-properties-attlist ::= (chart:symbol-type::"none") | (chart:symbol-type::"automatic") | (chart:symbol-type::"named-symbol" chart:symbol-name::("square" | "diamond" | "arrow-down" | "arrow-up" | "arrow-right" | "arrow-left" | "bow-tie" | "hourglass" | "circle" | "star" | "x" | "plus" | "asterisk" | "horizontal-bar" | "vertical-bar")) | (chart:symbol-type::"image" chart:symbol-image::(xlink:href::anyURI)) | ε ;
 style-chart-properties-attlist ::= (chart:symbol-width::nonNegativeLength)? (chart:symbol-height::nonNegativeLength)? ;
 style-chart-properties-attlist ::= (chart:vertical::boolean)? ;
 style-chart-properties-attlist ::= (chart:connect-bars::boolean)? ;
 style-chart-properties-attlist ::= (chart:gap-width::integer)? (chart:overlap::integer)? ;
 style-chart-properties-attlist ::= (chart:japanese-candle-stick::boolean)? ;
 style-chart-properties-attlist ::= (chart:interpolation::("none" | "cubic-spline" | "b-spline"))? (chart:spline-order::positiveInteger)? (chart:spline-resolution::positiveInteger)? ;
 style-chart-properties-attlist ::= (chart:pie-offset::nonNegativeInteger)? ;
 style-chart-properties-attlist ::= (chart:lines::boolean)? ;
 style-chart-properties-attlist ::= (chart:solid-type::("cuboid" | "cylinder" | "cone" | "pyramid"))? ;
 style-chart-properties-attlist ::= (chart:stacked::boolean)? (chart:percentage::boolean)? ;
 style-chart-properties-attlist ::= (chart:link-data-style-to-source::boolean)? ;
 style-chart-properties-attlist ::= (chart:visible::boolean)? ;
 style-chart-properties-attlist ::= (chart:logarithmic::boolean)? ;
 style-chart-properties-attlist ::= (chart:maximum::double)? (chart:minimum::double)? (chart:origin::double)? (chart:interval-major::double)? (chart:interval-minor-divisor::positiveInteger)? ;
 style-chart-properties-attlist ::= (chart:tick-marks-major-inner::boolean)? (chart:tick-marks-major-outer::boolean)? (chart:tick-marks-minor-inner::boolean)? (chart:tick-marks-minor-outer::boolean)? ;
 style-chart-properties-attlist ::= (chart:display-label::boolean)? (chart:text-overlap::boolean)? (text:line-break::boolean)? (chart:label-arrangement::("side-by-side" | "stagger-even" | "stagger-odd"))? ;
 style-chart-properties-attlist ::= common-style-direction-attlist ;
 style-chart-properties-attlist ::= common-rotation-angle-attlist ;
 style-chart-properties-attlist ::= (chart:data-label-number::("none" | "value" | "percentage"))? ;
 style-chart-properties-attlist ::= (chart:data-label-text::boolean)? ;
 style-chart-properties-attlist ::= (chart:data-label-symbol::boolean)? ;
 style-chart-properties-attlist ::= (chart:mean-value::boolean)? ;
 style-chart-properties-attlist ::= (chart:error-category::("none" | "variance" | "standard-deviation" | "percentage" | "error-margin" | "constant"))? ;
 style-chart-properties-attlist ::= (chart:error-percentage::double)? ;
 style-chart-properties-attlist ::= (chart:error-margin::double)? ;
 style-chart-properties-attlist ::= (chart:error-lower-limit::double)? (chart:error-upper-limit::double)? ;
 style-chart-properties-attlist ::= (chart:error-upper-indicator::boolean)? (chart:error-lower-indicator::boolean)? ;
 style-chart-properties-attlist ::= (chart:series-source::("columns" | "rows"))? ;
 style-chart-properties-attlist ::= (chart:regression-type::("none" | "linear" | "logarithmic" | "exponential" | "power"))? ;
table-table ::= table:table::(table-table-attlist table-table-source? office-dde-source? table-scenario? office-forms? table-shapes? table-columns-and-groups table-rows-and-groups) ;
text-linenumbering-configuration ::= text:linenumbering-configuration::(text-linenumbering-configuration-attlist text-linenumbering-separator?) ;
draw-path ::= draw:path::(common-draw-path-data-attlist common-draw-position-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
number-embedded-text ::= number:embedded-text::(number-embedded-text-attlist string()) ;
style-handout-master ::= style:handout-master::(common-presentation-header-footer-attlist style-handout-master-attlist shape*) ;
table-table-cell-content ::= table-cell-range-source? office-annotation? table-detective? text-content* ;
office-document ::= office:document::(office-document-attrs office-document-common-attrs office-meta office-settings office-scripts office-font-face-decls office-styles office-automatic-styles office-master-styles office-body) ;
presentation-show-text ::= presentation:show-text::(common-presentation-effect-attlist presentation-sound?) ;
common-horizontal-margin-attlist ::= (fo:margin-left::(length | percent))? (fo:margin-right::(length | percent))? ;
draw-area-circle ::= draw:area-circle::(common-draw-area-attlist svg:cx::coordinate svg:cy::coordinate svg:r::length svg-title? svg-desc? office-event-listeners?) ;
text-user-index-source-attr ::= text-index-scope-attr text-relative-tab-stop-position-attr text:index-name::string ;
 text-user-index-source-attr ::= (text:use-index-marks::boolean)? (text:use-graphics::boolean)? (text:use-tables::boolean)? (text:use-floating-frames::boolean)? (text:use-objects::boolean)? ;
 text-user-index-source-attr ::= (text:copy-outline-levels::boolean)? ;
text-illustration-index-entry-content ::= text-illustration-index-entry-template-attrs (text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop)* ;
form-image-attlist ::= form-control-attlist button-type common-disabled-attlist image-data common-printable-attlist common-tab-attlist target-frame target-location common-title-attlist common-value-attlist ;
draw-connector ::= draw:connector::(draw-connector-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
anyElements ::= (string()? anyAttListOrElements string()?)* ;
draw-applet ::= draw:applet::(draw-applet-attlist common-draw-data-attlist? draw-param*) ;
style-master-page ::= style:master-page::(style-master-page-attlist (style-header style-header-left?)? (style-footer style-footer-left?)? office-forms? style-style* shape* presentation-notes?) ;
text-linenumbering-separator ::= text:linenumbering-separator::((text:increment::nonNegativeInteger)? string()) ;
text-index-title ::= text:index-title::(sectionAttr index-content-main*) ;
number-month ::= number:month::(number-month-attlist common-calendar-attlist) ;
text-toc-mark-start-attrs ::= text-id text-outline-level ;
office-script ::= office:script::(office-script-attlist string()? anyElements string()?) ;
presentation-play-attlist ::= draw:shape-id::IDREF (presentation:speed::presentationSpeeds)? ;
svg-radialGradient ::= svg:radialGradient::(common-svg-gradient-attlist (svg:cx::(coordinate | percent))? (svg:cy::(coordinate | percent))? (svg:r::(coordinate | percent))? (svg:fx::(coordinate | percent))? (svg:fy::(coordinate | percent))? svg-stop*) ;
table-cell-range-source ::= table:cell-range-source::(table-table-cell-range-source-attlist table-linked-source-attlist) ;
office-scripts ::= (office:scripts::(office-script* office-event-listeners?))? ;
draw-connector-attlist ::= (draw:type::("standard" | "lines" | "line" | "curve"))? ;
 draw-connector-attlist ::= (svg:x1::coordinate svg:y1::coordinate)? ;
 draw-connector-attlist ::= (draw:start-shape::IDREF)? ;
 draw-connector-attlist ::= (draw:start-glue-point::nonNegativeInteger)? ;
 draw-connector-attlist ::= (svg:x2::coordinate svg:y2::coordinate)? ;
 draw-connector-attlist ::= (draw:end-shape::IDREF)? ;
 draw-connector-attlist ::= (draw:end-glue-point::nonNegativeInteger)? ;
 draw-connector-attlist ::= (draw:line-skew::(length (length length?)?))? ;
common-vertical-margin-attlist ::= (fo:margin-top::(nonNegativeLength | percent))? (fo:margin-bottom::(nonNegativeLength | percent))? ;
table-data-pilot-table ::= table:data-pilot-table::(table-data-pilot-table-attlist (table-database-source-sql | table-database-source-table | table-database-source-query | table-source-service | table-source-cell-range)? table-data-pilot-field+) ;
table-null-date ::= table:null-date::((table:value-type::valueType)? (table:date-value::date)?) ;
style-header-footer-properties-attlist ::= (svg:height::length)? (fo:min-height::length)? ;
 style-header-footer-properties-attlist ::= common-horizontal-margin-attlist common-vertical-margin-attlist common-margin-attlist ;
 style-header-footer-properties-attlist ::= common-border-attlist ;
 style-header-footer-properties-attlist ::= common-border-line-width-attlist ;
 style-header-footer-properties-attlist ::= common-padding-attlist ;
 style-header-footer-properties-attlist ::= common-background-color-attlist ;
 style-header-footer-properties-attlist ::= common-shadow-attlist ;
 style-header-footer-properties-attlist ::= (style:dynamic-spacing::boolean)? ;
style-font-face-attlist ::= (svg:font-family::string)? (svg:font-style::fontStyle)? (svg:font-variant::fontVariant)? (svg:font-weight::fontWeight)? (svg:font-stretch::("normal" | "ultra-condensed" | "extra-condensed" | "condensed" | "semi-condensed" | "semi-expanded" | "expanded" | "extra-expanded" | "ultra-expanded"))? (svg:font-size::positiveLength)? (svg:unicode-range::string())? (svg:units-per-em::integer)? (svg:panose-1::string())? (svg:stemv::integer)? (svg:stemh::integer)? (svg:slope::integer)? (svg:cap-height::integer)? (svg:x-height::integer)? (svg:accent-height::integer)? (svg:ascent::integer)? (svg:descent::integer)? (svg:widths::string())? (svg:bbox::string())? (svg:ideographic::integer)? (svg:alphabetic::integer)? (svg:mathematical::integer)? (svg:hanging::integer)? (svg:v-ideographic::integer)? (svg:v-alphabetic::integer)? (svg:v-mathematical::integer)? (svg:v-hanging::integer)? (svg:underline-position::integer)? (svg:underline-thickness::integer)? (svg:strikethrough-position::integer)? (svg:strikethrough-thickness::integer)? (svg:overline-position::integer)? (svg:overline-thickness::integer)? ;
 style-font-face-attlist ::= style:name::string ;
 style-font-face-attlist ::= (style:font-adornments::string)? ;
 style-font-face-attlist ::= (style:font-family-generic::fontFamilyGeneric)? ;
 style-font-face-attlist ::= (style:font-pitch::fontPitch)? ;
 style-font-face-attlist ::= (style:font-charset::textEncoding)? ;
draw-stroke-dash-attlist ::= draw:name::styleName ;
 draw-stroke-dash-attlist ::= (draw:display-name::string)? ;
 draw-stroke-dash-attlist ::= (draw:style::("rect" | "round"))? ;
 draw-stroke-dash-attlist ::= (draw:dots1::integer)? (draw:dots1-length::length)? (draw:dots2::integer)? (draw:dots2-length::length)? ;
 draw-stroke-dash-attlist ::= (draw:distance::length)? ;
text-user-index ::= text:user-index::(sectionAttr text-user-index-source text-index-body) ;
table-cell-content-deletion ::= table:cell-content-deletion::((table:id::string)? table-cell-address? table-change-track-table-cell?) ;
config-config-item-map-named ::= config:config-item-map-named::(config-config-item-map-named-attlist config-config-item-map-entry+) ;
table-deletion ::= table:deletion::(table-deletion-attlist common-table-change-attlist office-change-info table-dependencies? table-deletions? table-cut-offs?) ;
form-image-frame-attlist ::= form-control-attlist common-disabled-attlist image-data common-printable-attlist common-readonly-attlist common-title-attlist common-data-field-attlist ;
draw-marker ::= draw:marker::(draw-marker-attlist common-draw-viewbox-attlist common-draw-path-data-attlist) ;
styles ::= style-style* text-list-style* number-number-style* number-currency-style* number-percentage-style* number-date-style* number-time-style* number-boolean-style* number-text-style* ;
office-annotation ::= office:annotation::(office-annotation-attlist draw-caption-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist dc-creator? dc-date? meta-date-string? (text-p | text-list)*) ;
dr3d-scene ::= dr3d:scene::(dr3d-scene-attlist common-draw-position-attlist common-draw-size-attlist common-draw-style-name-attlist common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-text-spreadsheet-shape-attlist common-dr3d-transform-attlist common-draw-caption-id-attlist svg-title? svg-desc? dr3d-light* shapes3d*) ;
style-footer-left ::= style:footer-left::(common-style-header-footer-attlist header-footer-content) ;
draw-line ::= draw:line::(draw-line-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
style-list-level-properties-content-strict ::= style-list-level-properties-attlist style-list-level-properties-elements ;
text-section-source-attr ::= (xlink:href::anyURI (xlink:type::"simple")? (xlink:show::"embed")?)? ;
 text-section-source-attr ::= (text:section-name::string)? ;
 text-section-source-attr ::= (text:filter-name::string)? ;
draw-page-thumbnail ::= draw:page-thumbnail::(draw-page-thumbnail-attlist common-draw-position-attlist common-draw-size-attlist presentation-shape-attlist common-draw-shape-with-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc?) ;
common-field-database-table ::= common-field-database-table-attlist common-field-database-name ;
number-era ::= number:era::(number-era-attlist common-calendar-attlist) ;
table-cell-content-change ::= table:cell-content-change::(common-table-change-attlist table-cell-address office-change-info table-dependencies? table-deletions? table-previous) ;
dr3d-scene-attlist ::= (dr3d:vrp::vector3D)? (dr3d:vpn::vector3D)? (dr3d:vup::vector3D)? ;
 dr3d-scene-attlist ::= (dr3d:projection::("parallel" | "perspective"))? ;
 dr3d-scene-attlist ::= (dr3d:distance::length)? ;
 dr3d-scene-attlist ::= (dr3d:focal-length::length)? ;
 dr3d-scene-attlist ::= (dr3d:shadow-slant::nonNegativeInteger)? ;
 dr3d-scene-attlist ::= (dr3d:shade-mode::("flat" | "phong" | "gouraud" | "draft"))? ;
 dr3d-scene-attlist ::= (dr3d:ambient-color::color)? ;
 dr3d-scene-attlist ::= (dr3d:lighting-mode::boolean)? ;
chart-legend-attlist ::= (chart:legend-position::("start" | "end" | "top" | "bottom") (chart:legend-align::("start" | "center" | "end"))?) | (chart:legend-position::("top-start" | "bottom-start" | "top-end" | "bottom-end")) | ε ;
 chart-legend-attlist ::= common-draw-position-attlist ;
 chart-legend-attlist ::= (style:legend-expansion::("wide" | "high" | "balanced")) | (style:legend-expansion::"custom" style:legend-expansion-aspect-ratio::double) | ε ;
 chart-legend-attlist ::= (chart:style-name::styleNameRef)? ;
draw-rect ::= draw:rect::(draw-rect-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
table-subtotal-rules ::= table:subtotal-rules::(table-subtotal-rules-attlist table-sort-groups? table-subtotal-rule*) ;
text-changed-region ::= text:changed-region::(text-changed-region-attr text-changed-region-content) ;
text-alphabetical-index-source ::= text:alphabetical-index-source::(text-alphabetical-index-source-attrs text-index-title-template? text-alphabetical-index-entry-template*) ;
chart-plot-area ::= chart:plot-area::(chart-plot-area-attlist dr3d-light* chart-axis* chart-series* chart-stock-gain-marker? chart-stock-loss-marker? chart-stock-range-line? chart-wall? chart-floor?) ;
draw-measure-attlist ::= svg:x1::coordinate svg:y1::coordinate ;
 draw-measure-attlist ::= svg:x2::coordinate svg:y2::coordinate ;
style-graphic-properties-attlist ::= (draw:stroke::("none" | "dash" | "solid"))? ;
 style-graphic-properties-attlist ::= (draw:stroke-dash::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:stroke-dash-names::styleNameRefs)? ;
 style-graphic-properties-attlist ::= (svg:stroke-width::length)? ;
 style-graphic-properties-attlist ::= (svg:stroke-color::color)? ;
 style-graphic-properties-attlist ::= (draw:marker-start::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:marker-end::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:marker-start-width::length)? ;
 style-graphic-properties-attlist ::= (draw:marker-end-width::length)? ;
 style-graphic-properties-attlist ::= (draw:marker-start-center::boolean)? ;
 style-graphic-properties-attlist ::= (draw:marker-end-center::boolean)? ;
 style-graphic-properties-attlist ::= (svg:stroke-opacity::(string() | percent))? ;
 style-graphic-properties-attlist ::= (draw:stroke-linejoin::("miter" | "round" | "bevel" | "middle" | "none" | "inherit"))? ;
 style-graphic-properties-attlist ::= (draw:symbol-color::color)? ;
 style-graphic-properties-attlist ::= (text:animation::("none" | "scroll" | "alternate" | "slide"))? ;
 style-graphic-properties-attlist ::= (text:animation-direction::("left" | "right" | "up" | "down"))? ;
 style-graphic-properties-attlist ::= (text:animation-start-inside::boolean)? ;
 style-graphic-properties-attlist ::= (text:animation-stop-inside::boolean)? ;
 style-graphic-properties-attlist ::= (text:animation-repeat::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (text:animation-delay::duration)? ;
 style-graphic-properties-attlist ::= (text:animation-steps::length)? ;
 style-graphic-properties-attlist ::= (draw:auto-grow-width::boolean)? (draw:auto-grow-height::boolean)? ;
 style-graphic-properties-attlist ::= (draw:fit-to-size::boolean)? ;
 style-graphic-properties-attlist ::= (draw:fit-to-contour::boolean)? ;
 style-graphic-properties-attlist ::= (draw:textarea-vertical-align::("top" | "middle" | "bottom" | "justify"))? ;
 style-graphic-properties-attlist ::= (draw:textarea-horizontal-align::("left" | "center" | "right" | "justify"))? ;
 style-graphic-properties-attlist ::= (fo:wrap-option::("no-wrap" | "wrap"))? ;
 style-graphic-properties-attlist ::= (draw:color-mode::("greyscale" | "mono" | "watermark" | "standard"))? ;
 style-graphic-properties-attlist ::= (draw:color-inversion::boolean)? ;
 style-graphic-properties-attlist ::= (draw:luminance::percent)? ;
 style-graphic-properties-attlist ::= (draw:contrast::percent)? ;
 style-graphic-properties-attlist ::= (draw:gamma::percent)? ;
 style-graphic-properties-attlist ::= (draw:red::percent)? ;
 style-graphic-properties-attlist ::= (draw:green::percent)? ;
 style-graphic-properties-attlist ::= (draw:blue::percent)? ;
 style-graphic-properties-attlist ::= (draw:image-opacity::percent)? ;
 style-graphic-properties-attlist ::= (draw:shadow::("visible" | "hidden"))? ;
 style-graphic-properties-attlist ::= (draw:shadow-offset-x::length)? (draw:shadow-offset-y::length)? ;
 style-graphic-properties-attlist ::= (draw:shadow-color::color)? ;
 style-graphic-properties-attlist ::= (draw:shadow-opacity::percent)? ;
 style-graphic-properties-attlist ::= (draw:start-line-spacing-horizontal::distance)? (draw:start-line-spacing-vertical::distance)? ;
 style-graphic-properties-attlist ::= (draw:end-line-spacing-horizontal::distance)? (draw:end-line-spacing-vertical::distance)? ;
 style-graphic-properties-attlist ::= (draw:line-distance::distance)? ;
 style-graphic-properties-attlist ::= (draw:guide-overhang::length)? ;
 style-graphic-properties-attlist ::= (draw:guide-distance::distance)? ;
 style-graphic-properties-attlist ::= (draw:start-guide::length)? ;
 style-graphic-properties-attlist ::= (draw:end-guide::length)? ;
 style-graphic-properties-attlist ::= (draw:placing::("below" | "above"))? ;
 style-graphic-properties-attlist ::= (draw:parallel::boolean)? ;
 style-graphic-properties-attlist ::= (draw:measure-align::("automatic" | "left-outside" | "inside" | "right-outside"))? (draw:measure-vertical-align::("automatic" | "above" | "below" | "center"))? ;
 style-graphic-properties-attlist ::= (draw:unit::("automatic" | "mm" | "cm" | "m" | "km" | "pt" | "pc" | "inch" | "ft" | "mi"))? ;
 style-graphic-properties-attlist ::= (draw:show-unit::boolean)? ;
 style-graphic-properties-attlist ::= (draw:decimal-places::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (draw:caption-type::("straight-line" | "angled-line" | "angled-connector-line"))? ;
 style-graphic-properties-attlist ::= (draw:caption-angle-type::("fixed" | "free"))? ;
 style-graphic-properties-attlist ::= (draw:caption-angle::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (draw:caption-gap::distance)? ;
 style-graphic-properties-attlist ::= (draw:caption-escape-direction::("horizontal" | "vertical" | "auto"))? ;
 style-graphic-properties-attlist ::= (draw:caption-escape::(length | percent))? ;
 style-graphic-properties-attlist ::= (draw:caption-line-length::length)? ;
 style-graphic-properties-attlist ::= (draw:caption-fit-line-length::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:horizontal-segments::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:vertical-segments::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:edge-rounding::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:edge-rounding-mode::("correct" | "attractive"))? ;
 style-graphic-properties-attlist ::= (dr3d:back-scale::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:depth::length)? ;
 style-graphic-properties-attlist ::= (dr3d:backface-culling::("enabled" | "disabled"))? ;
 style-graphic-properties-attlist ::= (dr3d:end-angle::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:close-front::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:close-back::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:lighting-mode::("standard" | "double-sided"))? ;
 style-graphic-properties-attlist ::= (dr3d:normals-kind::("object" | "flat" | "sphere"))? ;
 style-graphic-properties-attlist ::= (dr3d:normals-direction::("normal" | "inverse"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-generation-mode-x::("object" | "parallel" | "sphere"))? (dr3d:texture-generation-mode-y::("object" | "parallel" | "sphere"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-kind::("luminance" | "intensity" | "color"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-filter::("enabled" | "disabled"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-mode::("replace" | "modulate" | "blend"))? ;
 style-graphic-properties-attlist ::= (dr3d:ambient-color::color)? (dr3d:emissive-color::color)? (dr3d:specular-color::color)? (dr3d:diffuse-color::color)? ;
 style-graphic-properties-attlist ::= (dr3d:shininess::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:shadow::("visible" | "hidden"))? ;
 style-graphic-properties-attlist ::= common-draw-rel-size-attlist (fo:min-width::(length | percent))? ;
 style-graphic-properties-attlist ::= (fo:min-height::(length | percent))? ;
 style-graphic-properties-attlist ::= (fo:max-height::(length | percent))? (fo:max-width::(length | percent))? ;
 style-graphic-properties-attlist ::= common-horizontal-margin-attlist ;
 style-graphic-properties-attlist ::= common-vertical-margin-attlist ;
 style-graphic-properties-attlist ::= common-margin-attlist ;
 style-graphic-properties-attlist ::= (style:print-content::boolean)? ;
 style-graphic-properties-attlist ::= (style:protect::("none" | (("content" | "position" | "size")+)))? ;
 style-graphic-properties-attlist ::= (style:horizontal-pos::("left" | "center" | "right" | "from-left" | "inside" | "outside" | "from-inside"))? (svg:x::coordinate)? ;
 style-graphic-properties-attlist ::= (style:horizontal-rel::("page" | "page-content" | "page-start-margin" | "page-end-margin" | "frame" | "frame-content" | "frame-start-margin" | "frame-end-margin" | "paragraph" | "paragraph-content" | "paragraph-start-margin" | "paragraph-end-margin" | "char"))? ;
 style-graphic-properties-attlist ::= common-vertical-pos-attlist ;
 style-graphic-properties-attlist ::= common-vertical-rel-attlist ;
 style-graphic-properties-attlist ::= common-text-anchor-attlist ;
 style-graphic-properties-attlist ::= common-border-attlist ;
 style-graphic-properties-attlist ::= common-border-line-width-attlist ;
 style-graphic-properties-attlist ::= common-padding-attlist ;
 style-graphic-properties-attlist ::= common-shadow-attlist ;
 style-graphic-properties-attlist ::= common-background-color-attlist ;
 style-graphic-properties-attlist ::= (style:editable::boolean)? ;
 style-graphic-properties-attlist ::= (style:wrap::("none" | "left" | "right" | "parallel" | "dynamic" | "run-through" | "biggest"))? ;
 style-graphic-properties-attlist ::= (style:wrap-dynamic-threshold::nonNegativeLength)? ;
 style-graphic-properties-attlist ::= (style:number-wrapped-paragraphs::("no-limit" | positiveInteger))? ;
 style-graphic-properties-attlist ::= (style:wrap-contour::boolean)? ;
 style-graphic-properties-attlist ::= (style:wrap-contour-mode::("full" | "outside"))? ;
 style-graphic-properties-attlist ::= (style:run-through::("foreground" | "background"))? ;
 style-graphic-properties-attlist ::= (style:flow-with-text::boolean)? ;
 style-graphic-properties-attlist ::= (style:overflow-behavior::("clip" | "auto-create-new-frame"))? ;
 style-graphic-properties-attlist ::= (style:mirror::("none" | "vertical" | horizontal-mirror | ("vertical" horizontal-mirror) | (horizontal-mirror "vertical")))? ;
 style-graphic-properties-attlist ::= (fo:clip::string)? ;
 style-graphic-properties-attlist ::= (draw:wrap-influence-on-position::("iterative" | "once-concurrent" | "once-successive"))? ;
 style-graphic-properties-attlist ::= common-writing-mode-attlist ;
 style-graphic-properties-attlist ::= (draw:frame-display-scrollbar::boolean)? ;
 style-graphic-properties-attlist ::= (draw:frame-display-border::boolean)? ;
 style-graphic-properties-attlist ::= (draw:frame-margin-horizontal::nonNegativePixelLength)? (draw:frame-margin-vertical::nonNegativePixelLength)? ;
 style-graphic-properties-attlist ::= (draw:visible-area-left::nonNegativeLength)? (draw:visible-area-top::nonNegativeLength)? (draw:visible-area-width::positiveLength)? (draw:visible-area-height::positiveLength)? ;
 style-graphic-properties-attlist ::= (draw:ole-draw-aspect::nonNegativeInteger)? ;
draw-object-ole ::= draw:object-ole::(draw-object-ole-attlist common-draw-data-attlist | office-binary-data) ;
office-document-styles ::= office:document-styles::(office-document-common-attrs office-font-face-decls office-styles office-automatic-styles office-master-styles) ;
number-percentage-style ::= number:percentage-style::(common-data-style-attlist style-text-properties? number-text? number-and-text? style-map*) ;
office-body-content ::= office:text::(office-text-attlist office-text-content-prelude office-text-content-main* office-text-content-epilogue) ;
 office-body-content ::= office:drawing::(office-drawing-attlist office-drawing-content-prelude office-drawing-content-main office-drawing-content-epilogue) ;
 office-body-content ::= office:presentation::(office-presentation-attlist office-presentation-content-prelude office-presentation-content-main office-presentation-content-epilogue) ;
 office-body-content ::= office:spreadsheet::(office-spreadsheet-attlist office-spreadsheet-content-prelude office-spreadsheet-content-main office-spreadsheet-content-epilogue) ;
 office-body-content ::= office:chart::(office-chart-attlist office-chart-content-prelude office-chart-content-main office-chart-content-epilogue) ;
 office-body-content ::= office:image::(office-image-attlist office-image-content-prelude office-image-content-main office-image-content-epilogue) ;
form-property ::= form:property::(form-property-name form-property-value-and-type-attlist) ;
 form-property ::= form:list-property::(form-property-name form-property-type-and-value-list) ;
draw-contour-polygon ::= draw:contour-polygon::(common-contour-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-points-attlist) ;
table-named-expression-attlist ::= table:name::string table:expression::string (table:base-cell-address::cellAddress)? ;
style-paragraph-properties-content-strict ::= style-paragraph-properties-attlist style-paragraph-properties-elements ;
chart-plot-area-attlist ::= common-draw-position-attlist common-draw-size-attlist ;
 chart-plot-area-attlist ::= (chart:style-name::styleNameRef)? ;
 chart-plot-area-attlist ::= (table:cell-range-address::cellRangeAddress)? ;
 chart-plot-area-attlist ::= (chart:data-source-has-labels::("none" | "row" | "column" | "both"))? ;
 chart-plot-area-attlist ::= dr3d-scene-attlist common-dr3d-transform-attlist ;
script-event-listener-attlist ::= script:event-name::string ;
 script-event-listener-attlist ::= script:language::string ;
 script-event-listener-attlist ::= (script:macro-name::string) | (xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")?) ;
text-variable-decl ::= text:variable-decl::(common-field-name-attlist common-value-type-attlist) ;
draw-fill-image ::= draw:fill-image::(draw-fill-image-attlist xlink:href::anyURI (xlink:type::"simple")? (xlink:show::"embed")? (xlink:actuate::"onLoad")?) ;
borderWidths ::= positiveLength positiveLength positiveLength ;
form-formatted-text-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist ;
 form-formatted-text-attlist ::= (form:max-value::string)? ;
 form-formatted-text-attlist ::= (form:min-value::string)? ;
 form-formatted-text-attlist ::= (form:validation::boolean)? ;
office-document-content ::= office:document-content::(office-document-common-attrs office-scripts office-font-face-decls office-automatic-styles office-body) ;
style-graphic-properties-content-strict ::= style-graphic-properties-attlist style-graphic-fill-properties-attlist style-graphic-properties-elements ;
controls ::= column-controls ;
 controls ::= form:password::(form-password-attlist common-form-control-content) ;
 controls ::= form:file::(form-file-attlist common-form-control-content) ;
 controls ::= form:time::(form-time-attlist common-numeric-control-attlist common-form-control-content) ;
 controls ::= form:fixed-text::(form-fixed-text-attlist common-form-control-content) ;
 controls ::= form:button::(form-button-attlist common-form-control-content) ;
 controls ::= form:image::(form-image-attlist common-form-control-content) ;
 controls ::= form:radio::(form-radio-attlist common-form-control-content) ;
 controls ::= form:frame::(form-frame-attlist common-form-control-content) ;
 controls ::= form:image-frame::(form-image-frame-attlist common-form-control-content) ;
 controls ::= form:hidden::(form-hidden-attlist common-form-control-content) ;
 controls ::= form:grid::(form-grid-attlist common-form-control-content form-column*) ;
 controls ::= form:value-range::(form-value-range-attlist common-form-control-content) ;
 controls ::= form:generic-control::(form-generic-control-attlist common-form-control-content) ;
text-illustration-index ::= text:illustration-index::(sectionAttr text-illustration-index-source text-index-body) ;
office-dde-source ::= office:dde-source::(office-dde-source-attlist common-dde-connection-decl-attlist) ;
text-a-attlist ::= (office:name::string)? ;
 text-a-attlist ::= (office:title::string)? ;
 text-a-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? ;
 text-a-attlist ::= (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? ;
 text-a-attlist ::= (text:style-name::styleNameRef)? (text:visited-style-name::styleNameRef)? ;
config-config-item ::= config:config-item::(config-config-item-attlist string()) ;
style-graphic-fill-properties-attlist ::= (draw:fill::("none" | "solid" | "bitmap" | "gradient" | "hatch"))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-color::color)? ;
 style-graphic-fill-properties-attlist ::= (draw:secondary-fill-color::color)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-gradient-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (draw:gradient-step-count::nonNegativeInteger)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-hatch-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-hatch-solid::boolean)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (style:repeat::("no-repeat" | "repeat" | "stretch"))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-width::(length | percent))? (draw:fill-image-height::(length | percent))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-ref-point-x::percent)? (draw:fill-image-ref-point-y::percent)? (draw:fill-image-ref-point::("top-left" | "top" | "top-right" | "left" | "center" | "right" | "bottom-left" | "bottom" | "bottom-right"))? ;
 style-graphic-fill-properties-attlist ::= (draw:tile-repeat-offset::string())? ;
 style-graphic-fill-properties-attlist ::= (draw:opacity::percent)? ;
 style-graphic-fill-properties-attlist ::= (draw:opacity-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (svg:fill-rule::("nonzero" | "evenodd"))? ;
common-draw-rel-size-attlist ::= common-draw-size-attlist (style:rel-width::(percent | "scale" | "scale-min"))? (style:rel-height::(percent | "scale" | "scale-min"))? ;
table-cut-offs ::= table:cut-offs::((table-movement-cut-off+) | (table-insertion-cut-off table-movement-cut-off*)) ;
common-table-template-attlist ::= text:style-name::styleNameRef text:paragraph-style-name::(styleNameRef?) ;
draw-fill-image-attlist ::= draw:name::styleName ;
 draw-fill-image-attlist ::= (draw:display-name::string)? ;
 draw-fill-image-attlist ::= (svg:width::length)? (svg:height::length)? ;
table-content-validation ::= table:content-validation::(table-validation-attlist table-help-message? (table-error-message | (table-error-macro office-event-listeners?))?) ;
table-data-pilot-level ::= table:data-pilot-level::(table-data-pilot-level-attlist table-data-pilot-subtotals? table-data-pilot-members? table-data-pilot-display-info? table-data-pilot-sort-info? table-data-pilot-layout-info?) ;
style-text-properties-attlist ::= (fo:font-variant::fontVariant)? ;
 style-text-properties-attlist ::= (fo:text-transform::("none" | "lowercase" | "uppercase" | "capitalize"))? ;
 style-text-properties-attlist ::= (fo:color::color)? ;
 style-text-properties-attlist ::= (style:use-window-font-color::boolean)? ;
 style-text-properties-attlist ::= (style:text-outline::boolean)? ;
 style-text-properties-attlist ::= (style:text-line-through-type::lineType)? ;
 style-text-properties-attlist ::= (style:text-line-through-style::lineStyle)? ;
 style-text-properties-attlist ::= (style:text-line-through-width::lineWidth)? ;
 style-text-properties-attlist ::= (style:text-line-through-color::("font-color" | color))? ;
 style-text-properties-attlist ::= (style:text-line-through-text::string)? ;
 style-text-properties-attlist ::= (style:text-line-through-text-style::styleNameRef)? ;
 style-text-properties-attlist ::= (style:text-position::(percent | "super" | "sub" percent?))? ;
 style-text-properties-attlist ::= (style:font-name::string)? (style:font-name-asian::string)? (style:font-name-complex::string)? ;
 style-text-properties-attlist ::= (fo:font-family::string)? (style:font-family-asian::string)? (style:font-family-complex::string)? ;
 style-text-properties-attlist ::= (style:font-family-generic::fontFamilyGeneric)? (style:font-family-generic-asian::fontFamilyGeneric)? (style:font-family-generic-complex::fontFamilyGeneric)? ;
 style-text-properties-attlist ::= (style:font-style-name::string)? (style:font-style-name-asian::string)? (style:font-style-name-complex::string)? ;
 style-text-properties-attlist ::= (style:font-pitch::fontPitch)? (style:font-pitch-asian::fontPitch)? (style:font-pitch-complex::fontPitch)? ;
 style-text-properties-attlist ::= (style:font-charset::textEncoding)? (style:font-charset-asian::textEncoding)? (style:font-charset-complex::textEncoding)? ;
 style-text-properties-attlist ::= (fo:font-size::(positiveLength | percent))? (style:font-size-asian::(positiveLength | percent))? (style:font-size-complex::(positiveLength | percent))? ;
 style-text-properties-attlist ::= (style:font-size-rel::length)? (style:font-size-rel-asian::length)? (style:font-size-rel-complex::length)? ;
 style-text-properties-attlist ::= (style:script-type::("latin" | "asian" | "complex" | "ignore"))? ;
 style-text-properties-attlist ::= (fo:letter-spacing::(length | "normal"))? ;
 style-text-properties-attlist ::= (fo:language::languageCode)? (style:language-asian::languageCode)? (style:language-complex::languageCode)? ;
 style-text-properties-attlist ::= (fo:country::countryCode)? (style:country-asian::countryCode)? (style:country-complex::countryCode)? ;
 style-text-properties-attlist ::= (fo:font-style::fontStyle)? (style:font-style-asian::fontStyle)? (style:font-style-complex::fontStyle)? ;
 style-text-properties-attlist ::= (style:font-relief::("none" | "embossed" | "engraved"))? ;
 style-text-properties-attlist ::= (fo:text-shadow::shadowType)? ;
 style-text-properties-attlist ::= (style:text-underline-type::lineType)? ;
 style-text-properties-attlist ::= (style:text-underline-style::lineStyle)? ;
 style-text-properties-attlist ::= (style:text-underline-width::lineWidth)? ;
 style-text-properties-attlist ::= (style:text-underline-color::("font-color" | color))? ;
 style-text-properties-attlist ::= (fo:font-weight::fontWeight)? (style:font-weight-asian::fontWeight)? (style:font-weight-complex::fontWeight)? ;
 style-text-properties-attlist ::= (style:text-underline-mode::lineMode)? ;
 style-text-properties-attlist ::= (style:text-line-through-mode::lineMode)? ;
 style-text-properties-attlist ::= (style:letter-kerning::boolean)? ;
 style-text-properties-attlist ::= (style:text-blinking::boolean)? ;
 style-text-properties-attlist ::= common-background-color-attlist ;
 style-text-properties-attlist ::= (style:text-combine::("none" | "letters" | "lines"))? ;
 style-text-properties-attlist ::= (style:text-combine-start-char::character)? (style:text-combine-end-char::character)? ;
 style-text-properties-attlist ::= (style:text-emphasize::("none" | ("none" | "accent" | "dot" | "circle" | "disc" "above" | "below")))? ;
 style-text-properties-attlist ::= (style:text-scale::percent)? ;
 style-text-properties-attlist ::= (style:text-rotation-angle::integer)? ;
 style-text-properties-attlist ::= (style:text-rotation-scale::("fixed" | "line-height"))? ;
 style-text-properties-attlist ::= (fo:hyphenate::boolean)? ;
 style-text-properties-attlist ::= (fo:hyphenation-remain-char-count::positiveInteger)? ;
 style-text-properties-attlist ::= (fo:hyphenation-push-char-count::positiveInteger)? ;
 style-text-properties-attlist ::= (text:display::"true") | (text:display::"none") | (text:display::"condition" text:condition::"none") | ε ;
text-object-index-source ::= text:object-index-source::(text-object-index-source-attrs text-index-title-template? text-object-index-entry-template?) ;
style-table-column-properties-attlist ::= (style:column-width::positiveLength)? (style:rel-column-width::relativeLength)? ;
 style-table-column-properties-attlist ::= (style:use-optimal-column-width::boolean)? ;
 style-table-column-properties-attlist ::= common-break-attlist ;
office-meta-data ::= meta:generator::string ;
 office-meta-data ::= dc:title::string ;
 office-meta-data ::= dc:description::string ;
 office-meta-data ::= dc:subject::string ;
 office-meta-data ::= meta:keyword::string ;
 office-meta-data ::= meta:initial-creator::string ;
 office-meta-data ::= dc-creator ;
 office-meta-data ::= meta:printed-by::string ;
 office-meta-data ::= meta:creation-date::dateTime ;
 office-meta-data ::= dc-date ;
 office-meta-data ::= meta:print-date::dateTime ;
 office-meta-data ::= meta:template::(xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? (xlink:title::string)? (meta:date::dateTime)?) ;
 office-meta-data ::= meta:auto-reload::((xlink:type::"simple")? (xlink:show::"replace")? (xlink:actuate::"onLoad")? (xlink:href::anyURI)? (meta:delay::duration)?) ;
 office-meta-data ::= meta:hyperlink-behaviour::((office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))?) ;
 office-meta-data ::= dc:language::language ;
 office-meta-data ::= meta:editing-cycles::nonNegativeInteger ;
 office-meta-data ::= meta:editing-duration::duration ;
 office-meta-data ::= meta:document-statistic::((meta:page-count::nonNegativeInteger)? (meta:table-count::nonNegativeInteger)? (meta:draw-count::nonNegativeInteger)? (meta:image-count::nonNegativeInteger)? (meta:ole-object-count::nonNegativeInteger)? (meta:object-count::nonNegativeInteger)? (meta:paragraph-count::nonNegativeInteger)? (meta:word-count::nonNegativeInteger)? (meta:character-count::nonNegativeInteger)? (frame-count::nonNegativeInteger)? (sentence-count::nonNegativeInteger)? (syllable-count::nonNegativeInteger)? (non-whitespace-character-count::nonNegativeInteger)? (meta:row-count::nonNegativeInteger)? (meta:cell-count::nonNegativeInteger)?) ;
 office-meta-data ::= meta:user-defined::(meta:name::string (meta:value-type::"float" double) | (meta:value-type::"date" dateOrDateTime) | (meta:value-type::"time" duration) | (meta:value-type::"boolean" boolean) | (meta:value-type::"string" string) | string()) ;
draw-enhanced-geometry ::= draw:enhanced-geometry::(draw-enhanced-geometry-attlist draw-equation* draw-handle*) ;
text-bibliography-entry-template ::= text:bibliography-entry-template::(text-bibliography-entry-template-attrs (text-index-entry-span | text-index-entry-tab-stop | text-index-entry-bibliography)*) ;
form-checkbox-attlist ::= form-control-attlist common-disabled-attlist label common-printable-attlist common-tab-attlist common-title-attlist common-value-attlist common-data-field-attlist common-form-visual-effect-attlist common-form-relative-image-position-attlist ;
 form-checkbox-attlist ::= (form:current-state::states)? ;
 form-checkbox-attlist ::= (form:is-tristate::boolean)? ;
 form-checkbox-attlist ::= (form:state::states)? ;
presentation-sound ::= presentation:sound::(presentation-sound-attlist xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? (xlink:show::("new" | "replace"))?) ;
common-draw-circle-ellipse-attlist ::= (svg:cx::coordinate svg:cy::coordinate)? ;
 common-draw-circle-ellipse-attlist ::= (draw:kind::("full" | "section" | "cut" | "arc"))? ;
 common-draw-circle-ellipse-attlist ::= (draw:start-angle::double)? ;
 common-draw-circle-ellipse-attlist ::= (draw:end-angle::double)? ;
table-table-source ::= table:table-source::(table-table-source-attlist table-linked-source-attlist) ;
text-page-number-attlist ::= common-field-num-format-attlist common-field-fixed-attlist ;
 text-page-number-attlist ::= (text:page-adjust::integer)? ;
 text-page-number-attlist ::= (text:select-page::("previous" | "current" | "next"))? ;
style-background-image ::= (style:background-image::(style-background-image-attlist common-draw-data-attlist | office-binary-data | ε))? ;
style-style ::= style:style::(style-style-attlist style-style-content style-map*) ;
dr3d-cube-attlist ::= (dr3d:min-edge::vector3D)? (dr3d:max-edge::vector3D)? ;
form-property-type-and-value-list ::= (office:value-type::"float" (form:list-value::(office:value::double))*) | (office:value-type::"percentage" (form:list-value::(office:value::double))*) | (office:value-type::"currency" (form:list-value::(office:value::double (office:currency::string)?))*) | (office:value-type::"date" (form:list-value::(office:date-value::dateOrDateTime))*) | (office:value-type::"time" (form:list-value::(office:time-value::duration))*) | (office:value-type::"boolean" (form:list-value::(office:boolean-value::boolean))*) | (office:value-type::"string" (form:list-value::(office:string-value::string))*) | (office:value-type::"void") ;
draw-enhanced-geometry-attlist ::= (draw:type::custom-shape-type)? ;
 draw-enhanced-geometry-attlist ::= (svg:viewBox::(integer integer integer integer))? ;
 draw-enhanced-geometry-attlist ::= (draw:mirror-vertical::boolean)? (draw:mirror-horizontal::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-rotate-angle::double)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:concentric-gradient-fill-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-brightness::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-depth::(length double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-diffusion::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-number-of-line-segments::integer)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-light-face::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-harsh::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-harsh::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-level::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-level::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-direction::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-direction::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-metal::boolean)? ;
 draw-enhanced-geometry-attlist ::= (dr3d:shade-mode::("flat" | "phong" | "gouraud" | "draft"))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-rotation-angle::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-rotation-center::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-shininess::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-skew::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-specularity::percent)? ;
 draw-enhanced-geometry-attlist ::= (dr3d:projection::("parallel" | "perspective"))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-viewpoint::point3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-origin::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-color::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:enhanced-path::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:path-stretchpoint-x::double)? (draw:path-stretchpoint-y::double)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-areas::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-points::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-point-type::("none" | "segments" | "rectangle"))? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-point-leaving-directions::string())? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-mode::("normal" | "path" | "shape"))? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-scale::("path" | "shape"))? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-same-letter-heights::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:modifiers::string)? ;
style-presentation-page-layout ::= style:presentation-page-layout::(style:name::styleName (style:display-name::string)? presentation-placeholder*) ;
draw-floating-frame ::= draw:floating-frame::(draw-floating-frame-attlist common-draw-data-attlist) ;
text-alphabetical-index-auto-mark-file ::= text:alphabetical-index-auto-mark-file::(xlink:href::anyURI (xlink:type::"simple")?) ;
draw-gradient-attlist ::= (draw:start-color::color)? (draw:end-color::color)? ;
 draw-gradient-attlist ::= (draw:start-intensity::percent)? (draw:end-intensity::percent)? ;
style-background-image-attlist ::= (style:repeat::("no-repeat" | "repeat" | "stretch"))? ;
 style-background-image-attlist ::= (style:position::("left" | "center" | "right" | "top" | "bottom" | (horiBackPos vertBackPos) | (vertBackPos horiBackPos)))? ;
 style-background-image-attlist ::= (style:filter-name::string)? ;
 style-background-image-attlist ::= (draw:opacity::percent)? ;
form-text-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist ;
draw-opacity ::= draw:opacity::(common-draw-gradient-attlist draw-opacity-attlist) ;
table-linked-source-attlist ::= (xlink:type::"simple")? (xlink:actuate::"onRequest")? xlink:href::anyURI ;
 table-linked-source-attlist ::= (table:filter-name::string)? ;
 table-linked-source-attlist ::= (table:filter-options::string)? ;
 table-linked-source-attlist ::= (table:refresh-delay::duration)? ;
text-table-of-content ::= text:table-of-content::(sectionAttr text-table-of-content-source text-index-body) ;
text-tracked-changes ::= (text:tracked-changes::(text-tracked-changes-attr text-changed-region*))? ;
form-column ::= form:column::(form-column-attlist column-controls+) ;
text-outline-level-style ::= text:outline-level-style::(text-outline-level-style-attlist style-list-level-properties? style-text-properties?) ;
form-item ::= form:item::(form-item-attlist string()) ;
style-table-column-properties-content-strict ::= style-table-column-properties-attlist style-table-column-properties-elements ;
text-index-source-styles ::= text:index-source-styles::(text:outline-level::positiveInteger text-index-source-style*) ;
text-section-attr ::= sectionAttr ;
 text-section-attr ::= (text:display::("true" | "none")) | (text:display::"condition" text:condition::string) | ε ;
table-rows ::= table-table-rows | ((text-soft-page-break? table-table-row)+) ;
number-day-of-week ::= number:day-of-week::(number-day-of-week-attlist common-calendar-attlist) ;
draw-opacity-attlist ::= (draw:start::percent)? (draw:end::percent)? ;
style-table-row-properties-attlist ::= (style:row-height::positiveLength)? (style:min-row-height::nonNegativeLength)? ;
 style-table-row-properties-attlist ::= (style:use-optimal-row-height::boolean)? ;
 style-table-row-properties-attlist ::= common-background-color-attlist ;
 style-table-row-properties-attlist ::= common-break-attlist ;
 style-table-row-properties-attlist ::= (fo:keep-together::("auto" | "always"))? ;
style-section-properties-content-strict ::= style-section-properties-attlist style-section-properties-elements ;
text-bibliography-configuration ::= text:bibliography-configuration::(text-bibliography-configuration-attlist text-sort-key*) ;
chart-footer ::= chart:footer::(chart-title-attlist text-p?) ;
style-table-row-properties-content-strict ::= style-table-row-properties-attlist style-table-row-properties-elements ;
text-decls ::= (text:variable-decls::(text-variable-decl*))? (text:sequence-decls::(text-sequence-decl*))? (text:user-field-decls::(text-user-field-decl*))? (text:dde-connection-decls::(text-dde-connection-decl*))? text-alphabetical-index-auto-mark-file? ;
table-subtotal-rule ::= table:subtotal-rule::(table-subtotal-rule-attlist table-subtotal-field*) ;
text-list-style ::= text:list-style::(text-list-style-attr text-list-style-content*) ;
common-value-and-type-attlist ::= (office:value-type::"float" office:value::double) | (office:value-type::"percentage" office:value::double) | (office:value-type::"currency" office:value::double (office:currency::string)?) | (office:value-type::"date" office:date-value::dateOrDateTime) | (office:value-type::"time" office:time-value::duration) | (office:value-type::"boolean" office:boolean-value::boolean) | (office:value-type::"string" (office:string-value::string)?) ;
text-time-attlist ::= common-field-fixed-attlist common-field-data-style-name-attlist ;
 text-time-attlist ::= (text:time-value::timeOrDateTime)? ;
 text-time-attlist ::= (text:time-adjust::duration)? ;
common-timing-attlist ::= common-basic-timing-attlist common-restart-timing-attlist common-restart-default-attlist common-fill-timing-attlist common-fill-default-attlist common-time-manip-attlist ;
common-basic-timing-attlist ::= common-begin-end-timing-attlist common-dur-timing-attlist common-repeat-timing-attlist ;
draw-caption ::= draw:caption::(draw-caption-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
office-text-content-main ::= (text-content*) | (text-page-sequence (draw-a | shape)*) ;
table-functions ::= table-named-expressions? table-database-ranges? table-data-pilot-tables? table-consolidation? table-dde-links? ;
form-combobox-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist dropdown common-maxlength-attlist common-printable-attlist common-readonly-attlist size common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist list-source list-source-type ;
 form-combobox-attlist ::= (form:auto-complete::boolean)? ;
table-filter ::= table:filter::(table-filter-attlist table-filter-condition | table-filter-and | table-filter-or) ;
office-presentation-content-prelude ::= text-decls table-decls presentation-decls ;
form-listbox-attlist ::= form-control-attlist common-disabled-attlist dropdown common-printable-attlist size common-tab-attlist common-title-attlist bound-column common-data-field-attlist list-source list-source-type ;
 form-listbox-attlist ::= (form:multiple::boolean)? ;
 form-listbox-attlist ::= (form:xforms-list-source::string)? ;
style-table-cell-properties-attlist ::= (style:vertical-align::("top" | "middle" | "bottom" | "automatic"))? ;
 style-table-cell-properties-attlist ::= (style:text-align-source::("fix" | "value-type"))? ;
 style-table-cell-properties-attlist ::= common-style-direction-attlist ;
 style-table-cell-properties-attlist ::= (style:glyph-orientation-vertical::("auto" | "0"))? ;
 style-table-cell-properties-attlist ::= common-shadow-attlist ;
 style-table-cell-properties-attlist ::= common-background-color-attlist ;
 style-table-cell-properties-attlist ::= common-border-attlist ;
 style-table-cell-properties-attlist ::= (style:diagonal-tl-br::string)? (style:diagonal-tl-br-widths::borderWidths)? (style:diagonal-bl-tr::string)? (style:diagonal-bl-tr-widths::borderWidths)? ;
 style-table-cell-properties-attlist ::= common-border-line-width-attlist ;
 style-table-cell-properties-attlist ::= common-padding-attlist ;
 style-table-cell-properties-attlist ::= (fo:wrap-option::("no-wrap" | "wrap"))? ;
 style-table-cell-properties-attlist ::= common-rotation-angle-attlist ;
 style-table-cell-properties-attlist ::= (style:rotation-align::("none" | "bottom" | "top" | "center"))? ;
 style-table-cell-properties-attlist ::= (style:cell-protect::("none" | "hidden-and-protected" | (("protected" | "formula-hidden")+)))? ;
 style-table-cell-properties-attlist ::= (style:print-content::boolean)? ;
 style-table-cell-properties-attlist ::= (style:decimal-places::nonNegativeInteger)? ;
 style-table-cell-properties-attlist ::= (style:repeat-content::boolean)? ;
 style-table-cell-properties-attlist ::= (style:shrink-to-fit::boolean)? ;
draw-ellipse ::= draw:ellipse::(common-draw-circle-ellipse-attlist draw-ellipse-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
text-alphabetical-index-mark-attrs ::= (text:key1::string)? (text:key2::string)? ;
 text-alphabetical-index-mark-attrs ::= (text:string-value-phonetic::string)? (text:key1-phonetic::string)? (text:key2-phonetic::string)? ;
 text-alphabetical-index-mark-attrs ::= (text:main-entry::boolean)? ;
number-currency-symbol ::= number:currency-symbol::(number-currency-symbol-attlist string()) ;
presentation-notes ::= presentation:notes::(common-presentation-header-footer-attlist presentation-notes-attlist office-forms shape*) ;
number-number ::= number:number::(number-number-attlist common-decimal-places-attlist common-number-attlist number-embedded-text*) ;
common-repeat-timing-attlist ::= (smil:repeatDur::string)? (smil:repeatCount::(nonNegativeInteger | "indefinite"))? ;
office-presentation-content-epilogue ::= presentation-settings table-functions ;
table-database-range ::= table:database-range::(table-database-range-attlist (table-database-source-sql | table-database-source-table | table-database-source-query)? table-filter? table-sort? table-subtotal-rules?) ;
form-value-range-attlist ::= form-control-attlist common-disabled-attlist common-printable-attlist common-tab-attlist common-title-attlist common-value-attlist ;
 form-value-range-attlist ::= (form:max-value::string)? ;
 form-value-range-attlist ::= (form:min-value::string)? ;
 form-value-range-attlist ::= (form:step-size::positiveInteger)? ;
 form-value-range-attlist ::= (form:page-step-size::positiveInteger)? ;
 form-value-range-attlist ::= (form:delay-for-repeat::duration)? ;
 form-value-range-attlist ::= (form:orientation::("horizontal" | "vertical"))? ;
table-decls ::= table-calculation-settings? table-content-validations? table-label-ranges? ;
number-boolean-style ::= number:boolean-style::(common-data-style-attlist style-text-properties? number-text? (number-boolean number-text?)? style-map*) ;
config-config-item-set ::= config:config-item-set::(config-config-item-set-attlist config-items) ;
style-table-cell-properties-content-strict ::= style-table-cell-properties-attlist style-table-cell-properties-elements ;
text-bibliography-source ::= text:bibliography-source::(text-index-title-template? text-bibliography-entry-template*) ;
text-section ::= text:section::(text-section-attr text-section-source | text-section-source-dde | ε text-content*) ;
text-sort-key-attlist ::= text:key::("address" | "annote" | "author" | "bibliography-type" | "booktitle" | "chapter" | "custom1" | "custom2" | "custom3" | "custom4" | "custom5" | "edition" | "editor" | "howpublished" | "identifier" | "institution" | "isbn" | "issn" | "journal" | "month" | "note" | "number" | "organizations" | "pages" | "publisher" | "report-type" | "school" | "series" | "title" | "url" | "volume" | "year") (text:sort-ascending::boolean)? ;
number-currency-symbol-attlist ::= (number:language::languageCode)? (number:country::countryCode)? ;
text-list-item ::= text:list-item::(text-list-item-attr text-list-item-content) ;
style-list-level-properties-attlist ::= common-text-align ;
 style-list-level-properties-attlist ::= (text:space-before::nonNegativeLength)? ;
 style-list-level-properties-attlist ::= (text:min-label-width::nonNegativeLength)? ;
 style-list-level-properties-attlist ::= (text:min-label-distance::nonNegativeLength)? ;
 style-list-level-properties-attlist ::= (style:font-name::string)? ;
 style-list-level-properties-attlist ::= (fo:width::positiveLength)? (fo:height::positiveLength)? ;
 style-list-level-properties-attlist ::= common-vertical-rel-attlist common-vertical-pos-attlist ;
text-list-level-style-number-attr ::= (text:style-name::styleNameRef)? ;
 text-list-level-style-number-attr ::= common-num-format-attlist common-num-format-prefix-suffix-attlist ;
 text-list-level-style-number-attr ::= (text:display-levels::positiveInteger)? ;
 text-list-level-style-number-attr ::= (text:start-value::positiveInteger)? ;
number-year ::= number:year::(number-year-attlist common-calendar-attlist) ;
common-border-attlist ::= (fo:border::string)? (fo:border-top::string)? (fo:border-bottom::string)? (fo:border-left::string)? (fo:border-right::string)? ;
text-index-entry-span ::= text:index-entry-span::((text:style-name::styleNameRef)? string()) ;
text-date-attlist ::= common-field-fixed-attlist common-field-data-style-name-attlist ;
 text-date-attlist ::= (text:date-value::dateOrDateTime)? ;
 text-date-attlist ::= (text:date-adjust::duration)? ;
text-user-field-decl ::= text:user-field-decl::(common-field-name-attlist common-field-formula-attlist? common-value-and-type-attlist) ;
table-sort ::= table:sort::(table-sort-attlist table-sort-by+) ;
currency-symbol-and-text ::= number-currency-symbol number-text? ;
table-change-track-table-cell-attlist ::= (table:cell-address::cellAddress)? ;
 table-change-track-table-cell-attlist ::= (table:matrix-covered::boolean)? ;
 table-change-track-table-cell-attlist ::= (table:formula::string)? (table:number-matrix-columns-spanned::positiveInteger)? (table:number-matrix-rows-spanned::positiveInteger)? common-value-and-type-attlist? ;
text-illustration-index-source ::= text:illustration-index-source::(text-illustration-index-source-attrs text-index-title-template? text-illustration-index-entry-template?) ;
number-number-style ::= number:number-style::(common-data-style-attlist style-text-properties? number-text? (any-number number-text?)? style-map*) ;
chart-axis ::= chart:axis::(chart-axis-attlist chart-title? chart-categories? chart-grid*) ;
draw-custom-shape ::= draw:custom-shape::(draw-custom-shape-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text draw-enhanced-geometry?) ;
form-form ::= form:form::(common-form-control-attlist form-form-attlist form-properties? office-event-listeners? (controls | form-form)* form-connection-resource?) ;
common-table-cell-range-address-attlist ::= table:start-column::integer table:start-row::integer table:start-table::integer table:end-column::integer table:end-row::integer table:end-table::integer ;
common-draw-gradient-attlist ::= (draw:name::styleName)? ;
 common-draw-gradient-attlist ::= (draw:display-name::string)? ;
 common-draw-gradient-attlist ::= draw:style::gradient-style ;
 common-draw-gradient-attlist ::= (draw:cx::percent)? (draw:cy::percent)? ;
 common-draw-gradient-attlist ::= (draw:angle::integer)? ;
 common-draw-gradient-attlist ::= (draw:border::percent)? ;
style-header ::= style:header::(common-style-header-footer-attlist header-footer-content) ;
draw-polyline ::= draw:polyline::(common-draw-points-attlist common-draw-position-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
text-numbered-paragraph ::= text:numbered-paragraph::(text-numbered-paragraph-attr text-number? text-p | text-h) ;
number-quarter ::= number:quarter::(number-quarter-attlist common-calendar-attlist) ;
config-config-item-map-entry ::= config:config-item-map-entry::(config-config-item-map-entry-attlist config-items) ;
office-document-meta ::= office:document-meta::(office-document-common-attrs office-meta) ;
text-alphabetical-index-entry-template ::= text:alphabetical-index-entry-template::(text-alphabetical-index-entry-template-attrs (text-index-entry-chapter | text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop)*) ;
common-draw-data-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:show::"embed")? (xlink:actuate::"onLoad")? ;
table-data-pilot-field ::= table:data-pilot-field::(table-data-pilot-field-attlist table-data-pilot-level? table-data-pilot-field-reference? table-data-pilot-groups?) ;
text-table-of-content-entry-template ::= text:table-of-content-entry-template::(text-table-of-content-entry-template-attlist text-table-of-content-children*) ;
draw-g ::= draw:g::(draw-g-attlist common-draw-z-index-attlist common-draw-name-attlist common-draw-id-attlist common-draw-style-name-attlist common-text-spreadsheet-shape-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* shape*) ;
table-named-range-attlist ::= table:name::string table:cell-range-address::cellRangeAddress (table:base-cell-address::cellAddress)? (table:range-usable-as::("none" | (("print-range" | "filter" | "repeat-row" | "repeat-column")+)))? ;
table-table-row ::= table:table-row::(table-table-row-attlist (table-table-cell | table-covered-table-cell)+) ;
draw-a ::= draw:a::(draw-a-attlist draw-frame) ;
table-previous ::= table:previous::((table:id::string)? table-change-track-table-cell) ;
common-draw-shape-with-text-and-styles-attlist ::= common-draw-shape-with-styles-attlist common-draw-text-style-name-attlist ;
table-detective ::= table:detective::(table-highlighted-range* table-operation*) ;
number-text-style ::= number:text-style::(common-data-style-attlist style-text-properties? number-text? (number-text-content number-text?)* style-map*) ;
svg-font-face-uri ::= svg:font-face-uri::(common-svg-font-face-xlink-attlist svg-font-face-format*) ;
common-num-format-prefix-suffix-attlist ::= (style:num-prefix::string)? (style:num-suffix::string)? ;
text-list-style-content ::= text:list-level-style-number::(text-list-level-style-attr text-list-level-style-number-attr style-list-level-properties? style-text-properties?) ;
 text-list-style-content ::= text:list-level-style-bullet::(text-list-level-style-attr text-list-level-style-bullet-attr style-list-level-properties? style-text-properties?) ;
 text-list-style-content ::= text:list-level-style-image::(text-list-level-style-attr text-list-level-style-image-attr style-list-level-properties?) ;
common-svg-gradient-attlist ::= (svg:gradientUnits::"objectBoundingBox")? (svg:gradientTransform::string)? (svg:spreadMethod::("pad" | "reflect" | "repeat"))? ;
 common-svg-gradient-attlist ::= draw:name::styleName ;
 common-svg-gradient-attlist ::= (draw:display-name::string)? ;
style-page-layout ::= style:page-layout::(style-page-layout-attlist style-page-layout-properties? style-header-style? style-footer-style?) ;
draw-a-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? ;
 draw-a-attlist ::= (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? ;
 draw-a-attlist ::= (office:name::string)? ;
 draw-a-attlist ::= (office:title::string)? ;
 draw-a-attlist ::= (office:server-map::boolean)? ;
common-form-relative-image-position-attlist ::= ((form:image-position::"center")?) | (form:image-position::("start" | "end" | "top" | "bottom") (form:image-align::("start" | "center" | "end"))?) ;
office-spreadsheet-content-prelude ::= table-tracked-changes? text-decls table-decls ;
number-fraction ::= number:fraction::(number-fraction-attlist common-number-attlist) ;
common-draw-area-attlist ::= (xlink:href::anyURI)? (xlink:type::"simple")? (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? ;
 common-draw-area-attlist ::= (office:name::string)? ;
 common-draw-area-attlist ::= (draw:nohref::"nohref")? ;
text-bibliography ::= text:bibliography::(sectionAttr text-bibliography-source text-index-body) ;
table-dde-link ::= table:dde-link::(office-dde-source table-table) ;
table-table-attlist ::= (table:name::string)? ;
 table-table-attlist ::= (table:style-name::styleNameRef)? ;
 table-table-attlist ::= (table:protected::boolean)? (table:protection-key::string())? ;
 table-table-attlist ::= (table:print::boolean)? ;
 table-table-attlist ::= (table:print-ranges::cellRangeAddressList)? ;
 table-table-attlist ::= (table:is-sub-table::boolean)? ;
--------------------odf::opendoc-1.2-dsig.bgf--------------------
dsig-document-signatures ::= dsig:document-signatures::(dsig-document-signatures-attlist ds-signature+) ;
--------------------odf::opendoc-1.2-manifest.bgf--------------------
algorithm ::= manifest:algorithm::(algorithm-attlist anyElements) ;
manifest ::= manifest:manifest::(manifest-attlist file-entry+) ;
anyAttListOrElements ::= string()* anyElements ;
key-derivation-attlist ::= manifest:key-derivation-name::("PBKDF2" | anyURI) manifest:salt::base64Binary manifest:iteration-count::nonNegativeInteger (manifest:key-size::nonNegativeInteger)? ;
encryption-data-attlist ::= manifest:checksum-type::("SHA1/1K" | anyURI) manifest:checksum::base64Binary ;
encryption-data ::= manifest:encryption-data::(encryption-data-attlist algorithm start-key-generation? key-derivation) ;
start-key-generation-attlist ::= manifest:start-key-generation-name::("SHA1" | anyURI) (manifest:key-size::nonNegativeInteger)? ;
anyElements ::= (string()? anyAttListOrElements string()?)* ;
file-entry-attlist ::= manifest:full-path::string (manifest:size::nonNegativeInteger)? manifest:media-type::string (manifest:preferred-view-mode::("edit" | "presentation-slide-show" | "read-only" | namespacedToken))? (manifest:version::string)? ;
algorithm-attlist ::= manifest:algorithm-name::("Blowfish CFB" | anyURI) manifest:initialisation-vector::base64Binary ;
file-entry ::= manifest:file-entry::(file-entry-attlist encryption-data?) ;
--------------------odf::opendoc-1.2.bgf--------------------
style-font-face ::= style:font-face::(style-font-face-attlist svg-font-face-src? svg-definition-src?) ;
svg-linearGradient ::= svg:linearGradient::(common-svg-gradient-attlist (svg:x1::(coordinate | percent))? (svg:y1::(coordinate | percent))? (svg:x2::(coordinate | percent))? (svg:y2::(coordinate | percent))? svg-stop*) ;
style-page-layout-attlist ::= style:name::styleName (style:page-usage::("all" | "left" | "right" | "mirrored"))? ;
number-currency-style ::= number:currency-style::(common-data-style-attlist common-auto-reorder-attlist style-text-properties? number-text? ((number-and-text currency-symbol-and-text?) | (currency-symbol-and-text number-and-text?))? style-map*) ;
number-fraction-attlist ::= (number:min-numerator-digits::integer)? (number:min-denominator-digits::integer)? (number:denominator-value::integer)? ;
table-covered-table-cell ::= table:covered-table-cell::(table-table-cell-attlist table-table-cell-content) ;
text-notes-configuration-content ::= text-note-class (text:citation-style-name::styleNameRef)? (text:citation-body-style-name::styleNameRef)? (text:default-style-name::styleNameRef)? (text:master-page-name::styleNameRef)? (text:start-value::nonNegativeInteger)? common-num-format-prefix-suffix-attlist common-num-format-attlist? (text:start-numbering-at::("document" | "chapter" | "page"))? (text:footnotes-position::("text" | "page" | "section" | "document"))? (text:note-continuation-notice-forward::string())? (text:note-continuation-notice-backward::string())? ;
draw-applet-attlist ::= (draw:code::string)? (draw:object::string)? (draw:archive::string)? (draw:may-script::boolean)? xml-id? ;
common-section-attlist ::= (text:style-name::styleNameRef)? text:name::string (text:protected::boolean)? (text:protection-key::string)? (text:protection-key-digest-algorithm::anyIRI)? xml-id? ;
db-auto-increment-attlist ::= (db:additional-column-statement::string)? (db:row-retrieving-statement::string)? ;
text-list-item-content ::= text-number? (text-p | text-h | text-list | text-soft-page-break)* ;
style-header-footer-properties-content-strict ::= style-header-footer-properties-attlist style-header-footer-properties-elements ;
number-scientific-number ::= number:scientific-number::(number-scientific-number-attlist common-decimal-places-attlist common-number-attlist) ;
presentation-hide-shape ::= presentation:hide-shape::(common-presentation-effect-attlist presentation-sound?) ;
draw-object ::= draw:object::(draw-object-attlist common-draw-data-attlist | office-document | math-math) ;
table-data-pilot-table-attlist ::= table:name::string (table:application-data::string)? (table:grand-total::("none" | "row" | "column" | "both"))? (table:ignore-empty-rows::boolean)? (table:identify-categories::boolean)? table:target-range-address::cellRangeAddress (table:buttons::cellRangeAddressList)? (table:show-filter-button::boolean)? (table:drill-down-on-double-click::boolean)? ;
presentation-hide-text ::= presentation:hide-text::(common-presentation-effect-attlist presentation-sound?) ;
style-drawing-page-properties-content-strict ::= style-graphic-fill-properties-attlist style-drawing-page-properties-attlist style-drawing-page-properties-elements ;
style-ruby-properties-content-strict ::= style-ruby-properties-attlist style-ruby-properties-elements ;
table-deletion-attlist ::= table:type::("row" | "column" | "table") table:position::integer (table:table::integer)? (table:multi-deletion-spanned::integer)? ;
draw-plugin ::= draw:plugin::(draw-plugin-attlist common-draw-data-attlist draw-param*) ;
table-database-source-query-attlist ::= table:database-name::string table:query-name::string ;
office-drawing-content-prelude ::= text-decls table-decls ;
draw-area-rectangle ::= draw:area-rectangle::(common-draw-area-attlist svg:x::coordinate svg:y::coordinate svg:width::length svg:height::length svg-title? svg-desc? office-event-listeners?) ;
table-table-rows ::= table:table-rows::((text-soft-page-break? table-table-row)+) ;
number-date-style ::= number:date-style::(common-data-style-attlist common-auto-reorder-attlist common-format-source-attlist style-text-properties? number-text? (any-date number-text?)+ style-map*) ;
draw-marker-attlist ::= draw:name::styleName (draw:display-name::string)? ;
table-table-cell-attlist-extra ::= (table:number-columns-spanned::positiveInteger)? (table:number-rows-spanned::positiveInteger)? (table:number-matrix-columns-spanned::positiveInteger)? (table:number-matrix-rows-spanned::positiveInteger)? ;
common-text-spreadsheet-shape-attlist ::= (table:end-cell-address::cellAddress)? (table:end-x::coordinate)? (table:end-y::coordinate)? (table:table-background::boolean)? common-text-anchor-attlist ;
style-graphic-properties-elements ::= text-list-style? style-background-image style-columns ;
text-p ::= text:p::(paragraph-attrs paragraph-content-or-hyperlink*) ;
draw-line-attlist ::= svg:x1::coordinate svg:y1::coordinate svg:x2::coordinate svg:y2::coordinate ;
table-movement ::= table:movement::(common-table-change-attlist table-source-range-address table-target-range-address office-change-info table-dependencies? table-deletions?) ;
style-tab-stop-attlist ::= style:position::length ((style:type::("left" | "center" | "right"))?) | (style:type::"char" style-tab-stop-char-attlist) (style:leader-type::lineType)? (style:leader-style::lineStyle)? (style:leader-width::lineWidth)? (style:leader-color::("font-color" | color))? (style:leader-text::character)? (style:leader-text-style::styleNameRef)? ;
text-h ::= text:h::(heading-attrs paragraph-attrs text-number? paragraph-content-or-hyperlink*) ;
text-outline-style ::= text:outline-style::(text-outline-style-attr text-outline-level-style+) ;
table-table-column-attlist ::= (table:number-columns-repeated::positiveInteger)? (table:style-name::styleNameRef)? (table:visibility::table-visibility-value)? (table:default-cell-style-name::styleNameRef)? xml-id? ;
text-placeholder-attlist ::= text:placeholder-type::("text" | "table" | "text-box" | "image" | "object") common-field-description-attlist ;
text-meta-field-attlist ::= xml-id common-field-data-style-name-attlist ;
office-document-settings ::= office:document-settings::(office-document-common-attrs office-settings) ;
draw-handle-attlist ::= (draw:handle-mirror-vertical::boolean)? (draw:handle-mirror-horizontal::boolean)? (draw:handle-switched::boolean)? draw:handle-position::string (draw:handle-range-x-minimum::string)? (draw:handle-range-x-maximum::string)? (draw:handle-range-y-minimum::string)? (draw:handle-range-y-maximum::string)? (draw:handle-polar::string)? (draw:handle-radius-range-minimum::string)? (draw:handle-radius-range-maximum::string)? ;
presentation-show-attlist ::= presentation:name::string presentation:pages::string ;
style-columns ::= (style:columns::(style-columns-attlist style-column-sep? style-column*))? ;
text-a ::= text:a::(text-a-attlist office-event-listeners? paragraph-content*) ;
table-subtotal-rules-attlist ::= (table:bind-styles-to-content::boolean)? (table:case-sensitive::boolean)? (table:page-breaks-on-group-change::boolean)? ;
table-calculation-setting-attlist ::= (table:case-sensitive::boolean)? (table:precision-as-shown::boolean)? (table:search-criteria-must-apply-to-whole-cell::boolean)? (table:automatic-find-labels::boolean)? (table:use-regular-expressions::boolean)? (table:use-wildcards::boolean)? (table:null-year::positiveInteger)? ;
number-time-style ::= number:time-style::(number-time-style-attlist common-data-style-attlist common-format-source-attlist style-text-properties? number-text? (any-time number-text?)+ style-map*) ;
text-dde-connection-decl ::= text:dde-connection-decl::(text-dde-connection-decl-attlist common-dde-connection-decl-attlist) ;
anyAttListOrElements ::= string()* anyElements ;
db-query-attlist ::= db:command::string (db:escape-processing::boolean)? ;
chart-title ::= chart:title::(chart-title-attlist text-p?) ;
common-tab-attlist ::= (form:tab-index::nonNegativeInteger)? (form:tab-stop::boolean)? ;
common-anim-attlist ::= (presentation:node-type::("default" | "on-click" | "with-previous" | "after-previous" | "timing-root" | "main-sequence" | "interactive-sequence"))? (presentation:preset-id::string)? (presentation:preset-sub-type::string)? (presentation:preset-class::("custom" | "entrance" | "exit" | "emphasis" | "motion-path" | "ole-action" | "media-call"))? (presentation:master-element::IDREF)? (presentation:group-id::string)? (xml-id (anim:id::NCName)?)? ;
config-config-item-attlist ::= config:name::string config:type::("boolean" | "short" | "int" | "long" | "double" | "string" | "datetime" | "base64Binary") ;
draw-frame ::= draw:frame::(common-draw-shape-with-text-and-styles-attlist common-draw-position-attlist common-draw-rel-size-attlist common-draw-caption-id-attlist presentation-shape-attlist draw-frame-attlist (draw-text-box | draw-image | draw-object | draw-object-ole | draw-applet | draw-floating-frame | draw-plugin | table-table)* office-event-listeners? draw-glue-point* draw-image-map? svg-title? svg-desc? (draw-contour-polygon | draw-contour-path)?) ;
common-form-control-content ::= form-properties? office-event-listeners? ;
style-list-level-label-alignment-attlist ::= text:label-followed-by::("listtab" | "space" | "nothing") (text:list-tab-stop-position::length)? (fo:text-indent::length)? (fo:margin-left::length)? ;
db-key-columns ::= db:key-columns::(db-key-columns-attlist db-key-column+) ;
table-iteration ::= table:iteration::((table:status::("enable" | "disable"))? (table:steps::positiveInteger)? (table:maximum-difference::double)?) ;
text-user-index-source ::= text:user-index-source::(text-user-index-source-attr text-index-title-template? text-user-index-entry-template* text-index-source-styles*) ;
text-index-entry-chapter ::= text:index-entry-chapter::((text:style-name::styleNameRef)? text-index-entry-chapter-attrs) ;
text-meta-attlist ::= common-in-content-meta-attlist? xml-id? ;
draw-text-box ::= draw:text-box::(draw-text-box-attlist text-content*) ;
db-index-column-attlist ::= db:name::string (db:is-ascending::boolean)? ;
draw-image ::= draw:image::(draw-image-attlist common-draw-data-attlist | office-binary-data draw-text) ;
table-data-pilot-field-reference-attlist ::= table:field-name::string (table:member-type::"named" table:member-name::string) | (table:member-type::("previous" | "next")) table:type::("none" | "member-difference" | "member-percentage" | "member-percentage-difference" | "running-total" | "row-percentage" | "column-percentage" | "total-percentage" | "index") ;
common-break-attlist ::= (fo:break-before::("auto" | "column" | "page"))? (fo:break-after::("auto" | "column" | "page"))? ;
db-column-definition-attlist ::= db:name::string (db:data-type::db-data-types)? (db:type-name::string)? (db:precision::positiveInteger)? (db:scale::positiveInteger)? (db:is-nullable::("no-nulls" | "nullable"))? (db:is-empty-allowed::boolean)? (db:is-autoincrement::boolean)? ;
chart-error-indicator-attlist ::= (chart:style-name::styleNameRef)? chart:dimension::chart-dimension ;
table-data-pilot-groups ::= table:data-pilot-groups::(table-data-pilot-groups-attlist table-data-pilot-group+) ;
table-table-source-attlist ::= (table:mode::("copy-all" | "copy-results-only"))? (table:table-name::string)? ;
draw-layer ::= draw:layer::(draw-layer-attlist svg-title? svg-desc?) ;
style-style-attlist ::= style:name::styleName (style:display-name::string)? (style:parent-style-name::styleNameRef)? (style:next-style-name::styleNameRef)? (style:list-level::(positiveInteger | ε))? (style:list-style-name::(styleName | ε))? (style:master-page-name::styleNameRef)? (style:auto-update::boolean)? (style:data-style-name::styleNameRef)? (style:percentage-data-style-name::styleNameRef)? (style:class::string)? (style:default-outline-level::(positiveInteger | ε))? ;
db-column ::= db:column::(db-column-attlist common-db-object-name common-db-object-title common-db-object-description common-db-default-value) ;
draw-image-attlist ::= (draw:filter-name::string)? xml-id? ;
paragraph-attrs ::= (text:style-name::styleNameRef)? (text:class-names::styleNameRefs)? (text:cond-style-name::styleNameRef)? (xml-id (text:id::NCName)?)? common-in-content-meta-attlist? ;
table-columns-no-group ::= (table-columns (table-table-header-columns table-columns?)?) | (table-table-header-columns table-columns?) ;
form-fixed-text-attlist ::= form-control-attlist for common-disabled-attlist label common-printable-attlist common-title-attlist (form:multi-line::boolean)? ;
draw-floating-frame-attlist ::= (draw:frame-name::string)? xml-id? ;
presentation-decl ::= (presentation:header-decl::(presentation-header-decl-attlist string())) | (presentation:footer-decl::(presentation-footer-decl-attlist string())) | (presentation:date-time-decl::(presentation-date-time-decl-attlist string())) ;
common-draw-size-attlist ::= (svg:width::length)? (svg:height::length)? ;
text-changed-region-content ::= (text:insertion::office-change-info) | (text:deletion::(office-change-info text-content*)) | (text:format-change::office-change-info) ;
table-table-template ::= table:table-template::(table-table-template-attlist table-first-row? table-last-row? table-first-column? table-last-column? table-body table-even-rows? table-odd-rows? table-even-columns? table-odd-columns? table-background?) ;
dr3d-extrude ::= dr3d:extrude::(common-draw-path-data-attlist common-draw-viewbox-attlist common-draw-id-attlist common-draw-z-index-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-dr3d-transform-attlist) ;
form-password-attlist ::= form-control-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-linked-cell (form:echo-char::character)? ;
draw-regular-polygon-attlist ::= (draw:concave::"false") | (draw:concave::"true" draw-regular-polygon-sharpness-attlist) draw:corners::positiveInteger ;
form-column-attlist ::= common-form-control-attlist label text-style-name ;
db-reports ::= db:reports::(db-reports-attlist (db-component | db-component-collection)*) ;
table-insertion ::= table:insertion::(table-insertion-attlist common-table-change-attlist office-change-info table-dependencies? table-deletions?) ;
draw-page-attlist ::= (draw:name::string)? (draw:style-name::styleNameRef)? draw:master-page-name::styleNameRef (presentation:presentation-page-layout-name::styleNameRef)? (xml-id (draw:id::NCName)?)? (draw:nav-order::IDREFS)? ;
config-config-item-map-indexed ::= config:config-item-map-indexed::(config-config-item-map-indexed-attlist config-config-item-map-entry+) ;
db-data-source-settings ::= db:data-source-settings::(db-data-source-settings-attlist db-data-source-setting+) ;
table-table-cell ::= table:table-cell::(table-table-cell-attlist table-table-cell-attlist-extra table-table-cell-content) ;
table-consolidation-attlist ::= table:function::("average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string) table:source-cell-range-addresses::cellRangeAddressList table:target-cell-address::cellAddress (table:use-labels::("none" | "row" | "column" | "both"))? (table:link-to-source-data::boolean)? ;
db-component-collection ::= db:component-collection::(db-component-collection-attlist common-db-object-name common-db-object-title common-db-object-description (db-component | db-component-collection)*) ;
dr3d-light-attlist ::= (dr3d:diffuse-color::color)? dr3d:direction::vector3D (dr3d:enabled::boolean)? (dr3d:specular::boolean)? ;
office-chart-content-prelude ::= text-decls table-decls ;
style-drawing-page-properties-attlist ::= (presentation:transition-type::("manual" | "automatic" | "semi-automatic"))? (presentation:transition-style::("none" | "fade-from-left" | "fade-from-top" | "fade-from-right" | "fade-from-bottom" | "fade-from-upperleft" | "fade-from-upperright" | "fade-from-lowerleft" | "fade-from-lowerright" | "move-from-left" | "move-from-top" | "move-from-right" | "move-from-bottom" | "move-from-upperleft" | "move-from-upperright" | "move-from-lowerleft" | "move-from-lowerright" | "uncover-to-left" | "uncover-to-top" | "uncover-to-right" | "uncover-to-bottom" | "uncover-to-upperleft" | "uncover-to-upperright" | "uncover-to-lowerleft" | "uncover-to-lowerright" | "fade-to-center" | "fade-from-center" | "vertical-stripes" | "horizontal-stripes" | "clockwise" | "counterclockwise" | "open-vertical" | "open-horizontal" | "close-vertical" | "close-horizontal" | "wavyline-from-left" | "wavyline-from-top" | "wavyline-from-right" | "wavyline-from-bottom" | "spiralin-left" | "spiralin-right" | "spiralout-left" | "spiralout-right" | "roll-from-top" | "roll-from-left" | "roll-from-right" | "roll-from-bottom" | "stretch-from-left" | "stretch-from-top" | "stretch-from-right" | "stretch-from-bottom" | "vertical-lines" | "horizontal-lines" | "dissolve" | "random" | "vertical-checkerboard" | "horizontal-checkerboard" | "interlocking-horizontal-left" | "interlocking-horizontal-right" | "interlocking-vertical-top" | "interlocking-vertical-bottom" | "fly-away" | "open" | "close" | "melt"))? (presentation:transition-speed::presentationSpeeds)? (smil:type::string)? (smil:subtype::string)? (smil:direction::("forward" | "reverse"))? (smil:fadeColor::color)? (presentation:duration::duration)? (presentation:visibility::("visible" | "hidden"))? (draw:background-size::("full" | "border"))? (presentation:background-objects-visible::boolean)? (presentation:background-visible::boolean)? (presentation:display-header::boolean)? (presentation:display-footer::boolean)? (presentation:display-page-number::boolean)? (presentation:display-date-time::boolean)? ;
table-sort-groups-attlist ::= (table:data-type::("text" | "number" | "automatic" | string))? (table:order::("ascending" | "descending"))? ;
presentation-dim ::= presentation:dim::(presentation-dim-attlist presentation-sound?) ;
db-data-source-setting ::= db:data-source-setting::(db-data-source-setting-attlist db-data-source-setting-value+) ;
anim-animate-motion-attlist ::= (svg:path::pathData)? (svg:origin::string)? (smil:calcMode::("discrete" | "linear" | "paced" | "spline"))? ;
presentation-date-time-decl-attlist ::= presentation:name::string presentation:source::("fixed" | "current-date") (style:data-style-name::styleNameRef)? ;
draw-caption-attlist ::= (draw:caption-point-x::coordinate draw:caption-point-y::coordinate)? (draw:corner-radius::nonNegativeLength)? ;
style-section-properties-elements ::= style-background-image style-columns text-notes-configuration* ;
form-button-attlist ::= form-control-attlist button-type common-disabled-attlist label image-data common-printable-attlist common-tab-attlist target-frame target-location common-title-attlist common-value-attlist common-form-relative-image-position-attlist common-repeat common-delay-for-repeat (form:default-button::boolean)? (form:toggle::boolean)? (form:focus-on-click::boolean)? (form:xforms-submission::string)? ;
column-controls ::= (form:text::(form-text-attlist common-form-control-content)) | (form:textarea::(form-textarea-attlist common-form-control-content text-p*)) | (form:formatted-text::(form-formatted-text-attlist common-form-control-content)) | (form:number::(form-number-attlist common-numeric-control-attlist common-form-control-content common-linked-cell common-spin-button common-repeat common-delay-for-repeat)) | (form:date::(form-date-attlist common-numeric-control-attlist common-form-control-content common-linked-cell common-spin-button common-repeat common-delay-for-repeat)) | (form:time::(form-time-attlist common-numeric-control-attlist common-form-control-content common-linked-cell common-spin-button common-repeat common-delay-for-repeat)) | (form:combobox::(form-combobox-attlist common-form-control-content form-item*)) | (form:listbox::(form-listbox-attlist common-form-control-content form-option*)) | (form:checkbox::(form-checkbox-attlist common-form-control-content)) ;
chart-equation-attlist ::= (chart:automatic-content::boolean)? (chart:display-r-square::boolean)? (chart:display-equation::boolean)? common-draw-position-attlist (chart:style-name::styleNameRef)? ;
chart-wall-attlist ::= (svg:width::length)? (chart:style-name::styleNameRef)? ;
text-index-title-template ::= text:index-title-template::((text:style-name::styleNameRef)? string()) ;
dr3d-rotate ::= dr3d:rotate::(common-draw-viewbox-attlist common-draw-path-data-attlist common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-dr3d-transform-attlist) ;
chart-series ::= chart:series::(chart-series-attlist chart-domain* chart-mean-value? chart-regression-curve* chart-error-indicator* chart-data-point* chart-data-label?) ;
db-table-filter ::= db:table-filter::(db-table-filter-attlist db-table-include-filter? db-table-exclude-filter?) ;
form-control-attlist ::= common-form-control-attlist common-control-id-attlist xforms-bind-attlist ;
table-calculation-settings ::= table:calculation-settings::(table-calculation-setting-attlist table-null-date? table-iteration?) ;
table-data-pilot-member-attlist ::= table:name::string (table:display::boolean)? (table:show-details::boolean)? ;
db-data-source-setting-attlist ::= (db:data-source-setting-is-list::boolean)? db:data-source-setting-name::string db:data-source-setting-type::db-data-source-setting-types ;
presentation-placeholder ::= presentation:placeholder::(presentation:object::presentation-classes svg:x::(coordinate | percent) svg:y::(coordinate | percent) svg:width::(length | percent) svg:height::(length | percent)) ;
number-number-attlist ::= (number:decimal-replacement::string)? (number:display-factor::double)? ;
db-column-definitions ::= db:column-definitions::(db-column-definitions-attlist db-column-definition+) ;
chart-series-attlist ::= (chart:values-cell-range-address::cellRangeAddressList)? (chart:label-cell-address::cellRangeAddressList)? (chart:class::namespacedToken)? (chart:attached-axis::string)? (chart:style-name::styleNameRef)? xml-id? ;
text-section-attlist ::= common-section-attlist (text:display::("true" | "none")) | (text:display::"condition" text:condition::string) | ε ;
db-data-source-setting-value ::= db:data-source-setting-value::(db-data-source-setting-value-attlist string) ;
common-num-format-attlist ::= (style:num-format::("1" | "i" | "I" | string | ε)) | (style:num-format::("a" | "A") style-num-letter-sync-attlist) | ε ;
table-database-source-sql-attlist ::= table:database-name::string table:sql-statement::string (table:parse-sql-statement::boolean)? ;
table-tracked-changes ::= table:tracked-changes::(table-tracked-changes-attlist (table-cell-content-change | table-insertion | table-deletion | table-movement)*) ;
presentation-shape-attlist ::= (presentation:class::presentation-classes)? (presentation:placeholder::boolean)? (presentation:user-transformed::boolean)? ;
text-alphabetical-index ::= text:alphabetical-index::(common-section-attlist text-alphabetical-index-source text-index-body) ;
office-change-info ::= office:change-info::(dc-creator dc-date text-p*) ;
paragraph-content ::= string() | (text:s::((text:c::nonNegativeInteger)?)) | (text:tab::text-tab-attr) | (text:line-break::ε) | text-soft-page-break | (text:span::((text:style-name::styleNameRef)? (text:class-names::styleNameRefs)? paragraph-content-or-hyperlink*)) | (text:meta::(text-meta-attlist paragraph-content-or-hyperlink*)) | text-bookmark | text-bookmark-start | text-bookmark-end | (text:reference-mark::(text:name::string)) | (text:reference-mark-start::(text:name::string)) | (text:reference-mark-end::(text:name::string)) | (text:note::(text-note-class (text:id::string)? text:note-citation::((text:label::string)? string()) text:note-body::(text-content*))) | (text:ruby::((text:style-name::styleNameRef)? text:ruby-base::(paragraph-content-or-hyperlink*) text:ruby-text::((text:style-name::styleNameRef)? string()))) | office-annotation | office-annotation-end | change-marks | shape | (text:date::(text-date-attlist string())) | (text:time::(text-time-attlist string())) | (text:page-number::(text-page-number-attlist string())) | (text:page-continuation::(text-page-continuation-attlist string())) | (text:sender-firstname::(common-field-fixed-attlist string())) | (text:sender-lastname::(common-field-fixed-attlist string())) | (text:sender-initials::(common-field-fixed-attlist string())) | (text:sender-title::(common-field-fixed-attlist string())) | (text:sender-position::(common-field-fixed-attlist string())) | (text:sender-email::(common-field-fixed-attlist string())) | (text:sender-phone-private::(common-field-fixed-attlist string())) | (text:sender-fax::(common-field-fixed-attlist string())) | (text:sender-company::(common-field-fixed-attlist string())) | (text:sender-phone-work::(common-field-fixed-attlist string())) | (text:sender-street::(common-field-fixed-attlist string())) | (text:sender-city::(common-field-fixed-attlist string())) | (text:sender-postal-code::(common-field-fixed-attlist string())) | (text:sender-country::(common-field-fixed-attlist string())) | (text:sender-state-or-province::(common-field-fixed-attlist string())) | (text:author-name::(common-field-fixed-attlist string())) | (text:author-initials::(common-field-fixed-attlist string())) | (text:chapter::(text-chapter-attlist string())) | (text:file-name::(text-file-name-attlist string())) | (text:template-name::(text-template-name-attlist string())) | (text:sheet-name::string()) | (text:variable-set::(common-field-name-attlist common-field-formula-attlist common-value-and-type-attlist common-field-display-value-none-attlist common-field-data-style-name-attlist string())) | (text:variable-get::(common-field-name-attlist common-field-display-value-formula-attlist common-field-data-style-name-attlist string())) | (text:variable-input::(common-field-name-attlist common-field-description-attlist common-value-type-attlist common-field-display-value-none-attlist common-field-data-style-name-attlist string())) | (text:user-field-get::(common-field-name-attlist common-field-display-value-formula-none-attlist common-field-data-style-name-attlist string())) | (text:user-field-input::(common-field-name-attlist common-field-description-attlist common-field-data-style-name-attlist string())) | (text:sequence::(common-field-name-attlist common-field-formula-attlist common-field-num-format-attlist text-sequence-ref-name string())) | (text:expression::(common-field-formula-attlist common-value-and-type-attlist? common-field-display-value-formula-attlist common-field-data-style-name-attlist string())) | (text:text-input::(common-field-description-attlist string())) | (text:initial-creator::(common-field-fixed-attlist string())) | (text:creation-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::dateOrDateTime)? string())) | (text:creation-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::timeOrDateTime)? string())) | (text:description::(common-field-fixed-attlist string())) | (text:user-defined::(common-field-fixed-attlist text:name::string common-field-data-style-name-attlist (office:value::double)? (office:date-value::dateOrDateTime)? (office:time-value::duration)? (office:boolean-value::boolean)? (office:string-value::string)? string())) | (text:print-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::time)? string())) | (text:print-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::date)? string())) | (text:printed-by::(common-field-fixed-attlist string())) | (text:title::(common-field-fixed-attlist string())) | (text:subject::(common-field-fixed-attlist string())) | (text:keywords::(common-field-fixed-attlist string())) | (text:editing-cycles::(common-field-fixed-attlist string())) | (text:editing-duration::(common-field-fixed-attlist common-field-data-style-name-attlist (text:duration::duration)? string())) | (text:modification-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::time)? string())) | (text:modification-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::date)? string())) | (text:creator::(common-field-fixed-attlist string())) | (text:page-count::(common-field-num-format-attlist string())) | (text:paragraph-count::(common-field-num-format-attlist string())) | (text:word-count::(common-field-num-format-attlist string())) | (text:character-count::(common-field-num-format-attlist string())) | (text:table-count::(common-field-num-format-attlist string())) | (text:image-count::(common-field-num-format-attlist string())) | (text:object-count::(common-field-num-format-attlist string())) | (text:database-display::(text-database-display-attlist string())) | (text:database-next::text-database-next-attlist) | (text:database-row-select::text-database-row-select-attlist) | (text:database-row-number::(common-field-database-table common-field-num-format-attlist (text:value::nonNegativeInteger)? string())) | (text:database-name::(common-field-database-table string())) | (text:page-variable-set::(text-set-page-variable-attlist string())) | (text:page-variable-get::(text-get-page-variable-attlist string())) | (text:placeholder::(text-placeholder-attlist string())) | (text:conditional-text::(text-conditional-text-attlist string())) | (text:hidden-text::(text-hidden-text-attlist string())) | (text:reference-ref::(text-common-ref-content text-bookmark-ref-content)) | (text:bookmark-ref::(text-common-ref-content text-bookmark-ref-content)) | (text:note-ref::(text-common-ref-content text-note-ref-content)) | (text:sequence-ref::(text-common-ref-content text-sequence-ref-content)) | (text:script::((xlink:type::"simple" xlink:href::anyIRI) | string() (script:language::string)?)) | (text:execute-macro::((text:name::string)? office-event-listeners? string())) | (text:hidden-paragraph::(text-hidden-paragraph-attlist string())) | (text:dde-connection::(text:connection-name::string string())) | (text:measure::(text:kind::("value" | "unit" | "gap") string())) | (text:table-formula::(common-field-formula-attlist common-field-display-value-formula-attlist common-field-data-style-name-attlist string())) | (text:meta-field::(text-meta-field-attlist paragraph-content-or-hyperlink*)) | (text:toc-mark-start::text-toc-mark-start-attrs) | (text:toc-mark-end::text-id) | (text:toc-mark::(text:string-value::string text-outline-level)) | (text:user-index-mark-start::(text-id text-outline-level text-index-name)) | (text:user-index-mark-end::text-id) | (text:user-index-mark::(text:string-value::string text-outline-level text-index-name)) | (text:alphabetical-index-mark-start::(text-id text-alphabetical-index-mark-attrs)) | (text:alphabetical-index-mark-end::text-id) | (text:alphabetical-index-mark::(text:string-value::string text-alphabetical-index-mark-attrs)) | (text:bibliography-mark::(text:bibliography-type::text-bibliography-types ((text:identifier::string) | (text:address::string) | (text:annote::string) | (text:author::string) | (text:booktitle::string) | (text:chapter::string) | (text:edition::string) | (text:editor::string) | (text:howpublished::string) | (text:institution::string) | (text:journal::string) | (text:month::string) | (text:note::string) | (text:number::string) | (text:organizations::string) | (text:pages::string) | (text:publisher::string) | (text:school::string) | (text:series::string) | (text:title::string) | (text:report-type::string) | (text:volume::string) | (text:year::string) | (text:url::string) | (text:custom1::string) | (text:custom2::string) | (text:custom3::string) | (text:custom4::string) | (text:custom5::string) | (text:isbn::string) | (text:issn::string))* string())) | (presentation:header::ε) | (presentation:footer::ε) | (presentation:date-time::ε) ;
number-day ::= number:day::(number-day-attlist common-calendar-attlist) ;
common-db-table-style-name ::= (db:style-name::styleNameRef)? (db:default-row-style-name::styleNameRef)? ;
common-vertical-pos-attlist ::= (style:vertical-pos::("top" | "middle" | "bottom" | "from-top" | "below"))? (svg:y::coordinate)? ;
style-chart-properties-attlist ::= (chart:scale-text::boolean)? (chart:three-dimensional::boolean)? (chart:deep::boolean)? (chart:right-angled-axes::boolean)? (chart:symbol-type::"none") | (chart:symbol-type::"automatic") | (chart:symbol-type::"named-symbol" chart:symbol-name::("square" | "diamond" | "arrow-down" | "arrow-up" | "arrow-right" | "arrow-left" | "bow-tie" | "hourglass" | "circle" | "star" | "x" | "plus" | "asterisk" | "horizontal-bar" | "vertical-bar")) | (chart:symbol-type::"image" chart:symbol-image::(xlink:href::anyIRI)) | ε (chart:symbol-width::nonNegativeLength)? (chart:symbol-height::nonNegativeLength)? (chart:sort-by-x-values::boolean)? (chart:vertical::boolean)? (chart:connect-bars::boolean)? (chart:gap-width::integer)? (chart:overlap::integer)? (chart:group-bars-per-axis::boolean)? (chart:japanese-candle-stick::boolean)? (chart:interpolation::("none" | "cubic-spline" | "b-spline"))? (chart:spline-order::positiveInteger)? (chart:spline-resolution::positiveInteger)? (chart:pie-offset::nonNegativeInteger)? (chart:angle-offset::angle)? (chart:hole-size::percent)? (chart:lines::boolean)? (chart:solid-type::("cuboid" | "cylinder" | "cone" | "pyramid"))? (chart:stacked::boolean)? (chart:percentage::boolean)? (chart:treat-empty-cells::("use-zero" | "leave-gap" | "ignore"))? (chart:link-data-style-to-source::boolean)? (chart:logarithmic::boolean)? (chart:maximum::double)? (chart:minimum::double)? (chart:origin::double)? (chart:interval-major::double)? (chart:interval-minor-divisor::positiveInteger)? (chart:tick-marks-major-inner::boolean)? (chart:tick-marks-major-outer::boolean)? (chart:tick-marks-minor-inner::boolean)? (chart:tick-marks-minor-outer::boolean)? (chart:reverse-direction::boolean)? (chart:display-label::boolean)? (chart:text-overlap::boolean)? (text:line-break::boolean)? (chart:label-arrangement::("side-by-side" | "stagger-even" | "stagger-odd"))? common-style-direction-attlist common-rotation-angle-attlist (chart:data-label-number::("none" | "value" | "percentage" | "value-and-percentage"))? (chart:data-label-text::boolean)? (chart:data-label-symbol::boolean)? (chart:label-separator::text-p)? (chart:label-position::labelPositions)? (chart:label-position-negative::labelPositions)? (chart:visible::boolean)? (chart:auto-position::boolean)? (chart:auto-size::boolean)? (chart:mean-value::boolean)? (chart:error-category::("none" | "variance" | "standard-deviation" | "percentage" | "error-margin" | "constant" | "standard-error" | "cell-range"))? (chart:error-percentage::double)? (chart:error-margin::double)? (chart:error-lower-limit::double)? (chart:error-upper-limit::double)? (chart:error-upper-indicator::boolean)? (chart:error-lower-indicator::boolean)? (chart:error-lower-range::cellRangeAddressList)? (chart:error-upper-range::cellRangeAddressList)? (chart:series-source::("columns" | "rows"))? (chart:regression-type::("none" | "linear" | "logarithmic" | "exponential" | "power"))? (chart:axis-position::("start" | "end" | double))? (chart:axis-label-position::("near-axis" | "near-axis-other-side" | "outside-start" | "outside-end"))? (chart:tick-mark-position::("at-labels" | "at-axis" | "at-labels-and-axis"))? (chart:include-hidden-cells::boolean)? ;
style-page-layout-properties-elements ::= style-background-image style-columns style-footnote-sep ;
text-linenumbering-configuration ::= text:linenumbering-configuration::(text-linenumbering-configuration-attlist text-linenumbering-separator?) ;
draw-path ::= draw:path::(common-draw-path-data-attlist common-draw-position-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
table-table-cell-content ::= table-cell-range-source? office-annotation? table-detective? text-content* ;
style-handout-master ::= style:handout-master::(common-presentation-header-footer-attlist style-handout-master-attlist shape*) ;
number-embedded-text ::= number:embedded-text::(number-embedded-text-attlist string()) ;
presentation-show-text ::= presentation:show-text::(common-presentation-effect-attlist presentation-sound?) ;
draw-area-circle ::= draw:area-circle::(common-draw-area-attlist svg:cx::coordinate svg:cy::coordinate svg:r::length svg-title? svg-desc? office-event-listeners?) ;
text-user-index-source-attr ::= text-index-scope-attr text-relative-tab-stop-position-attr (text:use-index-marks::boolean)? (text:use-index-source-styles::boolean)? (text:use-graphics::boolean)? (text:use-tables::boolean)? (text:use-floating-frames::boolean)? (text:use-objects::boolean)? (text:copy-outline-levels::boolean)? text:index-name::string ;
form-image-attlist ::= form-control-attlist button-type common-disabled-attlist image-data common-printable-attlist common-tab-attlist target-frame target-location common-title-attlist common-value-attlist ;
draw-connector ::= draw:connector::(draw-connector-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist common-draw-viewbox-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
anyElements ::= (string()? anyAttListOrElements string()?)* ;
text-linenumbering-configuration-attlist ::= (text:number-lines::boolean)? common-num-format-attlist? (text:style-name::styleNameRef)? (text:increment::nonNegativeInteger)? (text:number-position::("left" | "right" | "inner" | "outer"))? (text:offset::nonNegativeLength)? (text:count-empty-lines::boolean)? (text:count-in-text-boxes::boolean)? (text:restart-on-page::boolean)? ;
text-toc-mark-start-attrs ::= text-id text-outline-level ;
chart-data-point ::= chart:data-point::(chart-data-point-attlist chart-data-label?) ;
number-month ::= number:month::(number-month-attlist common-calendar-attlist) ;
office-scripts ::= (office:scripts::(office-script* office-event-listeners?))? ;
common-vertical-margin-attlist ::= (fo:margin-top::(nonNegativeLength | percent))? (fo:margin-bottom::(nonNegativeLength | percent))? ;
table-data-pilot-table ::= table:data-pilot-table::(table-data-pilot-table-attlist (table-database-source-sql | table-database-source-table | table-database-source-query | table-source-service | table-source-cell-range)? table-data-pilot-field+) ;
style-header-footer-properties-attlist ::= (svg:height::length)? (fo:min-height::length)? common-horizontal-margin-attlist common-vertical-margin-attlist common-margin-attlist common-border-attlist common-border-line-width-attlist common-padding-attlist common-background-color-attlist common-shadow-attlist (style:dynamic-spacing::boolean)? ;
style-font-face-attlist ::= (svg:font-family::string)? (svg:font-style::fontStyle)? (svg:font-variant::fontVariant)? (svg:font-weight::fontWeight)? (svg:font-stretch::("normal" | "ultra-condensed" | "extra-condensed" | "condensed" | "semi-condensed" | "semi-expanded" | "expanded" | "extra-expanded" | "ultra-expanded"))? (svg:font-size::positiveLength)? (svg:unicode-range::string)? (svg:units-per-em::integer)? (svg:panose-1::string)? (svg:stemv::integer)? (svg:stemh::integer)? (svg:slope::integer)? (svg:cap-height::integer)? (svg:x-height::integer)? (svg:accent-height::integer)? (svg:ascent::integer)? (svg:descent::integer)? (svg:widths::string)? (svg:bbox::string)? (svg:ideographic::integer)? (svg:alphabetic::integer)? (svg:mathematical::integer)? (svg:hanging::integer)? (svg:v-ideographic::integer)? (svg:v-alphabetic::integer)? (svg:v-mathematical::integer)? (svg:v-hanging::integer)? (svg:underline-position::integer)? (svg:underline-thickness::integer)? (svg:strikethrough-position::integer)? (svg:strikethrough-thickness::integer)? (svg:overline-position::integer)? (svg:overline-thickness::integer)? style:name::string (style:font-adornments::string)? (style:font-family-generic::fontFamilyGeneric)? (style:font-pitch::fontPitch)? (style:font-charset::textEncoding)? ;
text-changed-region-attr ::= xml-id (text:id::NCName)? ;
draw-stroke-dash-attlist ::= draw:name::styleName (draw:display-name::string)? (draw:style::("rect" | "round"))? (draw:dots1::integer)? (draw:dots1-length::(length | percent))? (draw:dots2::integer)? (draw:dots2-length::(length | percent))? (draw:distance::(length | percent))? ;
table-cell-content-deletion ::= table:cell-content-deletion::((table:id::string)? table-cell-address? table-change-track-table-cell?) ;
config-config-item-map-named ::= config:config-item-map-named::(config-config-item-map-named-attlist config-config-item-map-entry+) ;
table-deletion ::= table:deletion::(table-deletion-attlist common-table-change-attlist office-change-info table-dependencies? table-deletions? table-cut-offs?) ;
number-seconds-attlist ::= (number:style::("short" | "long"))? (number:decimal-places::integer)? ;
text-index-entry-chapter-attrs ::= (text:display::("name" | "number" | "number-and-name" | "plain-number" | "plain-number-and-name"))? (text:outline-level::positiveInteger)? ;
style-column-attlist ::= style:rel-width::relativeLength (fo:start-indent::length)? (fo:end-indent::length)? (fo:space-before::length)? (fo:space-after::length)? ;
form-image-frame-attlist ::= form-control-attlist common-disabled-attlist image-data common-printable-attlist common-readonly-attlist common-title-attlist common-data-field-attlist ;
office-annotation ::= office:annotation::(office-annotation-attlist draw-caption-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist dc-creator? dc-date? meta-date-string? (text-p | text-list)*) ;
style-footer-left ::= style:footer-left::(common-style-header-footer-attlist header-footer-content) ;
common-anim-target-attlist ::= (smil:targetElement::IDREF)? (anim:sub-item::string)? ;
draw-line ::= draw:line::(draw-line-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
style-ruby-properties-attlist ::= (style:ruby-position::("above" | "below"))? (style:ruby-align::("left" | "center" | "right" | "distribute-letter" | "distribute-space"))? ;
style-list-level-properties-content-strict ::= style-list-level-properties-attlist style-list-level-properties-elements ;
table-sort-by-attlist ::= table:field-number::nonNegativeInteger (table:data-type::("text" | "number" | "automatic" | string))? (table:order::("ascending" | "descending"))? ;
draw-page-thumbnail ::= draw:page-thumbnail::(draw-page-thumbnail-attlist common-draw-position-attlist common-draw-size-attlist presentation-shape-attlist common-draw-shape-with-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc?) ;
table-source-service-attlist ::= table:name::string table:source-name::string table:object-name::string (table:user-name::string)? (table:password::string)? ;
table-cell-content-change ::= table:cell-content-change::(common-table-change-attlist table-cell-address office-change-info table-dependencies? table-deletions? table-previous) ;
chart-legend-attlist ::= (chart:legend-position::("start" | "end" | "top" | "bottom") (chart:legend-align::("start" | "center" | "end"))?) | (chart:legend-position::("top-start" | "bottom-start" | "top-end" | "bottom-end")) | ε common-draw-position-attlist (style:legend-expansion::("wide" | "high" | "balanced")) | (style:legend-expansion::"custom" style:legend-expansion-aspect-ratio::double) | ε (chart:style-name::styleNameRef)? ;
table-subtotal-rules ::= table:subtotal-rules::(table-subtotal-rules-attlist table-sort-groups? table-subtotal-rule*) ;
chart-plot-area ::= chart:plot-area::(chart-plot-area-attlist dr3d-light* chart-axis* chart-series* chart-stock-gain-marker? chart-stock-loss-marker? chart-stock-range-line? chart-wall? chart-floor?) ;
db-filter-statement ::= db:filter-statement::(db-command db-apply-command) ;
draw-measure-attlist ::= svg:x1::coordinate svg:y1::coordinate svg:x2::coordinate svg:y2::coordinate ;
draw-object-ole ::= draw:object-ole::(draw-object-ole-attlist common-draw-data-attlist | office-binary-data) ;
db-index ::= db:index::(db-index-attlist db-index-columns+) ;
number-percentage-style ::= number:percentage-style::(common-data-style-attlist style-text-properties? number-text? number-and-text? style-map*) ;
office-body-content ::= (office:text::(office-text-attlist office-text-content-prelude office-text-content-main office-text-content-epilogue)) | (office:drawing::(office-drawing-attlist office-drawing-content-prelude office-drawing-content-main office-drawing-content-epilogue)) | (office:presentation::(office-presentation-attlist office-presentation-content-prelude office-presentation-content-main office-presentation-content-epilogue)) | (office:spreadsheet::(office-spreadsheet-attlist office-spreadsheet-content-prelude office-spreadsheet-content-main office-spreadsheet-content-epilogue)) | (office:chart::(office-chart-attlist office-chart-content-prelude office-chart-content-main office-chart-content-epilogue)) | (office:image::(office-image-attlist office-image-content-prelude office-image-content-main office-image-content-epilogue)) | office-database ;
draw-contour-polygon ::= draw:contour-polygon::(common-contour-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-points-attlist) ;
chart-plot-area-attlist ::= common-draw-position-attlist common-draw-size-attlist (chart:style-name::styleNameRef)? (table:cell-range-address::cellRangeAddressList)? (chart:data-source-has-labels::("none" | "row" | "column" | "both"))? dr3d-scene-attlist common-dr3d-transform-attlist xml-id? ;
borderWidths ::= positiveLength positiveLength positiveLength ;
form-formatted-text-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist common-linked-cell common-spin-button common-repeat common-delay-for-repeat (form:max-value::string)? (form:min-value::string)? (form:validation::boolean)? ;
db-query ::= db:query::(db-query-attlist common-db-object-name common-db-object-title common-db-object-description common-db-table-style-name db-order-statement? db-filter-statement? db-columns? db-update-table?) ;
style-graphic-properties-content-strict ::= style-graphic-properties-attlist style-graphic-fill-properties-attlist style-graphic-properties-elements ;
controls ::= column-controls | (form:password::(form-password-attlist common-form-control-content)) | (form:file::(form-file-attlist common-form-control-content)) | (form:fixed-text::(form-fixed-text-attlist common-form-control-content)) | (form:button::(form-button-attlist common-form-control-content)) | (form:image::(form-image-attlist common-form-control-content)) | (form:radio::(form-radio-attlist common-form-control-content)) | (form:frame::(form-frame-attlist common-form-control-content)) | (form:image-frame::(form-image-frame-attlist common-form-control-content)) | (form:hidden::(form-hidden-attlist common-form-control-content)) | (form:grid::(form-grid-attlist common-form-control-content form-column*)) | (form:value-range::(form-value-range-attlist common-form-control-content)) | (form:generic-control::(form-generic-control-attlist common-form-control-content)) ;
text-illustration-index ::= text:illustration-index::(common-section-attlist text-illustration-index-source text-index-body) ;
office-dde-source ::= office:dde-source::(office-dde-source-attlist common-dde-connection-decl-attlist) ;
common-table-template-attlist ::= table:style-name::styleNameRef (table:paragraph-style-name::styleNameRef)? ;
table-content-validation ::= table:content-validation::(table-validation-attlist table-help-message? (table-error-message | (table-error-macro office-event-listeners))?) ;
table-data-pilot-level ::= table:data-pilot-level::(table-data-pilot-level-attlist table-data-pilot-subtotals? table-data-pilot-members? table-data-pilot-display-info? table-data-pilot-sort-info? table-data-pilot-layout-info?) ;
draw-equation-attlist ::= (draw:name::string)? (draw:formula::string)? ;
text-conditional-text-attlist ::= text:condition::string text:string-value-if-true::string text:string-value-if-false::string (text:current-value::boolean)? ;
style-table-column-properties-attlist ::= (style:column-width::positiveLength)? (style:rel-column-width::relativeLength)? (style:use-optimal-column-width::boolean)? common-break-attlist ;
common-draw-circle-ellipse-pos-attlist ::= svg:cx::coordinate svg:cy::coordinate ;
text-list-item-attr ::= (text:start-value::nonNegativeInteger)? (text:style-override::styleNameRef)? xml-id? ;
common-draw-circle-ellipse-attlist ::= (draw:kind::("full" | "section" | "cut" | "arc"))? (draw:start-angle::angle)? (draw:end-angle::angle)? ;
table-table-source ::= table:table-source::(table-table-source-attlist table-linked-source-attlist) ;
text-page-number-attlist ::= common-field-num-format-attlist common-field-fixed-attlist (text:page-adjust::integer)? (text:select-page::("previous" | "current" | "next"))? ;
table-label-range-attlist ::= table:label-cell-range-address::cellRangeAddress table:data-cell-range-address::cellRangeAddress table:orientation::("column" | "row") ;
style-style ::= style:style::(style-style-attlist style-style-content style-map*) ;
draw-enhanced-geometry-attlist ::= (draw:type::custom-shape-type)? (svg:viewBox::(integer integer integer integer))? (draw:mirror-vertical::boolean)? (draw:mirror-horizontal::boolean)? (draw:text-rotate-angle::angle)? (draw:extrusion-allowed::boolean)? (draw:text-path-allowed::boolean)? (draw:concentric-gradient-fill-allowed::boolean)? (draw:extrusion::boolean)? (draw:extrusion-brightness::zeroToHundredPercent)? (draw:extrusion-depth::(length double))? (draw:extrusion-diffusion::percent)? (draw:extrusion-number-of-line-segments::integer)? (draw:extrusion-light-face::boolean)? (draw:extrusion-first-light-harsh::boolean)? (draw:extrusion-second-light-harsh::boolean)? (draw:extrusion-first-light-level::zeroToHundredPercent)? (draw:extrusion-second-light-level::zeroToHundredPercent)? (draw:extrusion-first-light-direction::vector3D)? (draw:extrusion-second-light-direction::vector3D)? (draw:extrusion-metal::boolean)? (dr3d:shade-mode::("flat" | "phong" | "gouraud" | "draft"))? (draw:extrusion-rotation-angle::(angle angle))? (draw:extrusion-rotation-center::vector3D)? (draw:extrusion-shininess::zeroToHundredPercent)? (draw:extrusion-skew::(double angle))? (draw:extrusion-specularity::zeroToHundredPercent)? (dr3d:projection::("parallel" | "perspective"))? (draw:extrusion-viewpoint::point3D)? (draw:extrusion-origin::(extrusionOrigin extrusionOrigin))? (draw:extrusion-color::boolean)? (draw:enhanced-path::string)? (draw:path-stretchpoint-x::double)? (draw:path-stretchpoint-y::double)? (draw:text-areas::string)? (draw:glue-points::string)? (draw:glue-point-type::("none" | "segments" | "rectangle"))? (draw:glue-point-leaving-directions::string)? (draw:text-path::boolean)? (draw:text-path-mode::("normal" | "path" | "shape"))? (draw:text-path-scale::("path" | "shape"))? (draw:text-path-same-letter-heights::boolean)? (draw:modifiers::string)? ;
style-presentation-page-layout ::= style:presentation-page-layout::(style:name::styleName (style:display-name::string)? presentation-placeholder*) ;
presentation-sound-attlist ::= (presentation:play-full::boolean)? xml-id? ;
text-alphabetical-index-auto-mark-file ::= text:alphabetical-index-auto-mark-file::(xlink:type::"simple" xlink:href::anyIRI) ;
draw-gradient-attlist ::= (draw:start-color::color)? (draw:end-color::color)? (draw:start-intensity::zeroToHundredPercent)? (draw:end-intensity::zeroToHundredPercent)? ;
style-background-image-attlist ::= (style:repeat::("no-repeat" | "repeat" | "stretch"))? (style:position::("left" | "center" | "right" | "top" | "bottom" | (horiBackPos vertBackPos) | (vertBackPos horiBackPos)))? (style:filter-name::string)? (draw:opacity::zeroToHundredPercent)? ;
db-table-type ::= db:table-type::(db-table-type-attlist string) ;
text-sequence-decl-attlist ::= common-field-name-attlist text:display-outline-level::nonNegativeInteger (text:separation-character::character)? ;
style-drop-cap-attlist ::= (style:length::("word" | positiveInteger))? (style:lines::positiveInteger)? (style:distance::length)? (style:style-name::styleNameRef)? ;
text-table-of-content ::= text:table-of-content::(common-section-attlist text-table-of-content-source text-index-body) ;
db-key-attlist ::= (db:name::string)? db:type::("primary" | "unique" | "foreign") (db:referenced-table-name::string)? (db:update-rule::("cascade" | "restrict" | "set-null" | "no-action" | "set-default"))? (db:delete-rule::("cascade" | "restrict" | "set-null" | "no-action" | "set-default"))? ;
text-tracked-changes ::= (text:tracked-changes::(text-tracked-changes-attr text-changed-region*))? ;
form-item ::= form:item::(form-item-attlist string()) ;
common-meta-literal-attlist ::= (xhtml:datatype::CURIE)? (xhtml:content::string)? ;
style-table-row-properties-attlist ::= (style:row-height::positiveLength)? (style:min-row-height::nonNegativeLength)? (style:use-optimal-row-height::boolean)? common-background-color-attlist common-break-attlist (fo:keep-together::("auto" | "always"))? ;
db-table-definitions ::= db:table-definitions::(db-table-definitions-attlist db-table-definition*) ;
chart-regression-curve ::= chart:regression-curve::(chart-regression-curve-attlist chart-equation?) ;
db-component ::= db:component::(db-component-attlist common-db-object-name common-db-object-title common-db-object-description (office-document | math-math)?) ;
text-bibliography-configuration ::= text:bibliography-configuration::(text-bibliography-configuration-attlist text-sort-key*) ;
chart-footer ::= chart:footer::(chart-title-attlist text-p?) ;
table-subtotal-rule ::= table:subtotal-rule::(table-subtotal-rule-attlist table-subtotal-field*) ;
db-order-statement ::= db:order-statement::(db-command db-apply-command) ;
db-component-attlist ::= (xlink:type::"simple" xlink:href::anyIRI (xlink:show::"none")? (xlink:actuate::"onRequest")?)? (db:as-template::boolean)? ;
common-value-and-type-attlist ::= (office:value-type::"float" office:value::double) | (office:value-type::"percentage" office:value::double) | (office:value-type::"currency" office:value::double (office:currency::string)?) | (office:value-type::"date" office:date-value::dateOrDateTime) | (office:value-type::"time" office:time-value::duration) | (office:value-type::"boolean" office:boolean-value::boolean) | (office:value-type::"string" (office:string-value::string)?) ;
common-basic-timing-attlist ::= common-begin-end-timing-attlist common-dur-timing-attlist common-repeat-timing-attlist common-restart-timing-attlist common-restart-default-attlist common-fill-timing-attlist common-fill-default-attlist ;
db-table-type-filter ::= db:table-type-filter::(db-table-type-filter-attlist db-table-type*) ;
draw-caption ::= draw:caption::(draw-caption-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
office-text-content-main ::= (text-content*) | (text-page-sequence shape*) ;
table-filter ::= table:filter::(table-filter-attlist table-filter-condition | table-filter-and | table-filter-or) ;
style-paragraph-properties-elements ::= style-tab-stops style-drop-cap style-background-image ;
form-listbox-attlist ::= form-control-attlist common-disabled-attlist dropdown common-printable-attlist size common-tab-attlist common-title-attlist bound-column common-data-field-attlist list-source list-source-type common-linked-cell list-linkage-type common-source-cell-range (form:multiple::boolean)? (form:xforms-list-source::string)? ;
style-table-cell-properties-attlist ::= (style:vertical-align::("top" | "middle" | "bottom" | "automatic"))? (style:text-align-source::("fix" | "value-type"))? common-style-direction-attlist (style:glyph-orientation-vertical::("auto" | "0" | "0deg" | "0rad" | "0grad"))? common-writing-mode-attlist common-shadow-attlist common-background-color-attlist common-border-attlist (style:diagonal-tl-br::string)? (style:diagonal-tl-br-widths::borderWidths)? (style:diagonal-bl-tr::string)? (style:diagonal-bl-tr-widths::borderWidths)? common-border-line-width-attlist common-padding-attlist (fo:wrap-option::("no-wrap" | "wrap"))? common-rotation-angle-attlist (style:rotation-align::("none" | "bottom" | "top" | "center"))? (style:cell-protect::("none" | "hidden-and-protected" | (("protected" | "formula-hidden")+)))? (style:print-content::boolean)? (style:decimal-places::nonNegativeInteger)? (style:repeat-content::boolean)? (style:shrink-to-fit::boolean)? ;
chart-data-label-attlist ::= common-draw-position-attlist (chart:style-name::styleNameRef)? ;
text-alphabetical-index-mark-attrs ::= (text:key1::string)? (text:key2::string)? (text:string-value-phonetic::string)? (text:key1-phonetic::string)? (text:key2-phonetic::string)? (text:main-entry::boolean)? ;
chart-floor-attlist ::= (svg:width::length)? (chart:style-name::styleNameRef)? ;
presentation-notes ::= presentation:notes::(common-presentation-header-footer-attlist presentation-notes-attlist office-forms shape*) ;
number-number ::= number:number::(number-number-attlist common-decimal-places-attlist common-number-attlist number-embedded-text*) ;
table-database-range ::= table:database-range::(table-database-range-attlist (table-database-source-sql | table-database-source-table | table-database-source-query)? table-filter? table-sort? table-subtotal-rules?) ;
table-decls ::= table-calculation-settings? table-content-validations? table-label-ranges? ;
style-table-cell-properties-content-strict ::= style-table-cell-properties-attlist style-table-cell-properties-elements ;
text-section ::= text:section::(text-section-attlist text-section-source | text-section-source-dde | ε text-content*) ;
number-currency-symbol-attlist ::= (number:language::languageCode)? (number:country::countryCode)? (number:script::scriptCode)? (number:rfc-language-tag::language)? ;
text-list-item ::= text:list-item::(text-list-item-attr text-list-item-content) ;
text-list-level-style-number-attr ::= (text:style-name::styleNameRef)? common-num-format-attlist common-num-format-prefix-suffix-attlist (text:display-levels::positiveInteger)? (text:start-value::positiveInteger)? ;
common-border-attlist ::= (fo:border::string)? (fo:border-top::string)? (fo:border-bottom::string)? (fo:border-left::string)? (fo:border-right::string)? ;
db-connection-resource-attlist ::= xlink:type::"simple" xlink:href::anyIRI (xlink:show::"none")? (xlink:actuate::"onRequest")? ;
presentation-notes-attlist ::= (style:page-layout-name::styleNameRef)? (draw:style-name::styleNameRef)? ;
currency-symbol-and-text ::= number-currency-symbol number-text? ;
table-database-range-attlist ::= (table:name::string)? (table:is-selection::boolean)? (table:on-update-keep-styles::boolean)? (table:on-update-keep-size::boolean)? (table:has-persistent-data::boolean)? (table:orientation::("column" | "row"))? (table:contains-header::boolean)? (table:display-filter-buttons::boolean)? table:target-range-address::cellRangeAddress (table:refresh-delay::boolean)? ;
text-object-index-source-attrs ::= text-index-scope-attr text-relative-tab-stop-position-attr (text:use-spreadsheet-objects::boolean)? (text:use-math-objects::boolean)? (text:use-draw-objects::boolean)? (text:use-chart-objects::boolean)? (text:use-other-objects::boolean)? ;
table-change-track-table-cell-attlist ::= (table:cell-address::cellAddress)? (table:matrix-covered::boolean)? (table:formula::string)? (table:number-matrix-columns-spanned::positiveInteger)? (table:number-matrix-rows-spanned::positiveInteger)? common-value-and-type-attlist? ;
text-illustration-index-source ::= text:illustration-index-source::(text-illustration-index-source-attrs text-index-title-template? text-illustration-index-entry-template?) ;
db-query-collection ::= db:query-collection::(db-query-collection-attlist common-db-object-name common-db-object-title common-db-object-description (db-query | db-query-collection)*) ;
number-number-style ::= number:number-style::(common-data-style-attlist style-text-properties? number-text? (any-number number-text?)? style-map*) ;
db-host-and-port ::= db:hostname::string (db:port::positiveInteger)? ;
style-header ::= style:header::(common-style-header-footer-attlist header-footer-content) ;
form-time-attlist ::= (form:value::time)? (form:current-value::time)? (form:min-value::time)? (form:max-value::time)? ;
office-document-meta ::= office:document-meta::(office-document-common-attrs office-meta) ;
db-key-column-attlist ::= (db:name::string)? (db:related-column-name::string)? ;
common-draw-data-attlist ::= xlink:type::"simple" xlink:href::anyIRI (xlink:show::"embed")? (xlink:actuate::"onLoad")? ;
chart-axis-attlist ::= chart:dimension::chart-dimension (chart:name::string)? (chart:style-name::styleNameRef)? ;
db-table-definition ::= db:table-definition::(common-db-table-name-attlist db-table-definition-attlist db-column-definitions db-keys? db-indices?) ;
db-forms ::= db:forms::(db-forms-attlist (db-component | db-component-collection)*) ;
text-table-of-content-entry-template ::= text:table-of-content-entry-template::(text-table-of-content-entry-template-attlist text-table-of-content-children*) ;
draw-g ::= draw:g::(draw-g-attlist common-draw-z-index-attlist common-draw-name-attlist common-draw-id-attlist common-draw-style-name-attlist common-text-spreadsheet-shape-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* shape*) ;
table-named-range-attlist ::= table:name::string table:cell-range-address::cellRangeAddress (table:base-cell-address::cellAddress)? (table:range-usable-as::("none" | (("print-range" | "filter" | "repeat-row" | "repeat-column")+)))? ;
draw-a ::= draw:a::(draw-a-attlist shape-instance) ;
table-filter-condition-attlist ::= table:field-number::nonNegativeInteger table:value::(string | double) table:operator::string (table:case-sensitive::string)? (table:data-type::("text" | "number"))? ;
common-draw-shape-with-text-and-styles-attlist ::= common-draw-shape-with-styles-attlist common-draw-text-style-name-attlist ;
table-previous ::= table:previous::((table:id::string)? table-change-track-table-cell) ;
number-text-style ::= number:text-style::(common-data-style-attlist style-text-properties? number-text? (number-text-content number-text?)* style-map*) ;
svg-font-face-uri ::= svg:font-face-uri::(common-svg-font-face-xlink-attlist svg-font-face-format*) ;
text-list-style-content ::= (text:list-level-style-number::(text-list-level-style-attr text-list-level-style-number-attr style-list-level-properties? style-text-properties?)) | (text:list-level-style-bullet::(text-list-level-style-attr text-list-level-style-bullet-attr style-list-level-properties? style-text-properties?)) | (text:list-level-style-image::(text-list-level-style-attr text-list-level-style-image-attr style-list-level-properties?)) ;
table-table-row-attlist ::= (table:number-rows-repeated::positiveInteger)? (table:style-name::styleNameRef)? (table:default-cell-style-name::styleNameRef)? (table:visibility::table-visibility-value)? xml-id? ;
style-page-layout ::= style:page-layout::(style-page-layout-attlist style-page-layout-content) ;
db-table-include-filter ::= db:table-include-filter::(db-table-include-filter-attlist db-table-filter-pattern+) ;
form-date-attlist ::= (form:value::date)? (form:current-value::date)? (form:min-value::date)? (form:max-value::date)? ;
common-form-relative-image-position-attlist ::= ((form:image-position::"center")?) | (form:image-position::("start" | "end" | "top" | "bottom") (form:image-align::("start" | "center" | "end"))?) ;
style-footnote-sep-attlist ::= (style:width::length)? (style:rel-width::percent)? (style:color::color)? (style:line-style::lineStyle)? (style:adjustment::("left" | "center" | "right"))? (style:distance-before-sep::length)? (style:distance-after-sep::length)? ;
text-list-header ::= text:list-header::(text-list-header-attr text-list-item-content) ;
style-page-layout-properties-content-strict ::= style-page-layout-properties-attlist style-page-layout-properties-elements ;
style-column-sep-attlist ::= (style:style::("none" | "solid" | "dotted" | "dashed" | "dot-dashed"))? style:width::length (style:height::zeroToHundredPercent)? (style:vertical-align::("top" | "middle" | "bottom"))? (style:color::color)? ;
text-user-index-entry-template ::= text:user-index-entry-template::(text-user-index-entry-template-attrs (text-index-entry-chapter | text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop)*) ;
db-connection-data ::= db:connection-data::(db-connection-data-attlist db-database-description | db-connection-resource db-login?) ;
table-table-cell-range-source-attlist ::= table:name::string table:last-column-spanned::positiveInteger table:last-row-spanned::positiveInteger ;
db-file-based-database-attlist ::= xlink:type::"simple" xlink:href::anyIRI db:media-type::string (db:extension::string)? ;
common-form-control-attlist ::= (form:name::string)? (form:control-implementation::namespacedToken)? ;
common-svg-font-face-xlink-attlist ::= xlink:type::"simple" xlink:href::anyIRI (xlink:actuate::"onRequest")? ;
db-keys ::= db:keys::(db-keys-attlist db-key+) ;
draw-area-polygon ::= draw:area-polygon::(common-draw-area-attlist svg:x::coordinate svg:y::coordinate svg:width::length svg:height::length common-draw-viewbox-attlist common-draw-points-attlist svg-title? svg-desc? office-event-listeners?) ;
office-forms ::= (office:forms::(office-forms-attlist (form-form | xforms-model)*))? ;
draw-object-attlist ::= (draw:notify-on-update-of-ranges::(cellRangeAddressList | string))? xml-id? ;
form-file-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist common-linked-cell ;
draw-measure ::= draw:measure::(draw-measure-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
draw-control ::= draw:control::(draw-control-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? draw-glue-point*) ;
office-forms-attlist ::= (form:automatic-focus::boolean)? (form:apply-design-mode::boolean)? ;
draw-plugin-attlist ::= (draw:mime-type::string)? xml-id? ;
svg-stop ::= svg:stop::(svg:offset::(double | percent) (svg:stop-color::color)? (svg:stop-opacity::double)?) ;
db-driver-settings-attlist ::= db-show-deleted (db:system-driver-settings::string)? (db:base-dn::string)? db-is-first-row-header-line (db:parameter-name-substitution::boolean)? ;
table-validation-attlist ::= table:name::string (table:condition::string)? (table:base-cell-address::cellAddress)? (table:allow-empty-cell::boolean)? (table:display-list::("none" | "unsorted" | "sort-ascending"))? ;
text-bookmark-attlist ::= text:name::string xml-id? ;
text-table-of-content-source ::= text:table-of-content-source::(text-table-of-content-source-attlist text-index-title-template? text-table-of-content-entry-template* text-index-source-styles*) ;
table-source-cell-range ::= table:source-cell-range::(table-source-cell-range-attlist table-filter?) ;
form-hidden-attlist ::= form-control-attlist common-value-attlist ;
text-index-entry-tab-stop-attrs ::= (style:leader-char::character)? (style:type::"right") | (style:type::"left" style:position::length) ;
table-data-pilot-display-info-attlist ::= table:enabled::boolean table:data-field::string table:member-count::nonNegativeInteger table:display-member-mode::("from-top" | "from-bottom") ;
common-field-database-table-attlist ::= text:table-name::string (text:table-type::("table" | "query" | "command"))? ;
common-spline-anim-value-attlist ::= (smil:keyTimes::string)? (smil:keySplines::string)? ;
draw-rect-attlist ::= ((draw:corner-radius::nonNegativeLength)?) | ((svg:rx::nonNegativeLength)? (svg:ry::nonNegativeLength)?) ;
dr3d-sphere ::= dr3d:sphere::(dr3d-sphere-attlist common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-dr3d-transform-attlist) ;
style-page-layout-content ::= style-page-layout-properties? style-header-style? style-footer-style? ;
text-table-of-content-source-attlist ::= (text:outline-level::positiveInteger)? (text:use-outline-level::boolean)? (text:use-index-marks::boolean)? (text:use-index-source-styles::boolean)? (text:index-scope::("document" | "chapter"))? (text:relative-tab-stop-position::boolean)? ;
db-index-attlist ::= db:name::string (db:catalog-name::string)? (db:is-unique::boolean)? (db:is-clustered::boolean)? ;
draw-object-ole-attlist ::= (draw:class-id::string)? xml-id? ;
text-table-index-source ::= text:table-index-source::(text-illustration-index-source-attrs text-index-title-template? text-table-index-entry-template?) ;
office-automatic-styles ::= (office:automatic-styles::(styles style-page-layout*))? ;
animation-element ::= (anim:animate::(common-anim-target-attlist common-anim-named-target-attlist common-anim-values-attlist common-anim-spline-mode-attlist common-spline-anim-value-attlist common-timing-attlist common-anim-add-accum-attlist)) | (anim:set::(common-anim-target-attlist common-anim-named-target-attlist common-anim-set-values-attlist common-timing-attlist common-anim-add-accum-attlist)) | (anim:animateMotion::(anim-animate-motion-attlist common-anim-target-attlist common-anim-named-target-attlist common-anim-add-accum-attlist common-anim-values-attlist common-timing-attlist common-spline-anim-value-attlist)) | (anim:animateColor::(common-anim-target-attlist common-anim-named-target-attlist common-anim-add-accum-attlist common-anim-values-attlist common-anim-spline-mode-attlist common-spline-anim-value-attlist anim-animate-color-attlist common-timing-attlist)) | (anim:animateTransform::(common-anim-target-attlist common-anim-named-target-attlist common-anim-add-accum-attlist common-anim-values-attlist anim-animate-transform-attlist common-timing-attlist)) | (anim:transitionFilter::(common-anim-target-attlist common-anim-add-accum-attlist common-anim-values-attlist common-anim-spline-mode-attlist anim-transition-filter-attlist common-timing-attlist)) | (anim:par::(common-anim-attlist common-timing-attlist common-endsync-timing-attlist animation-element*)) | (anim:seq::(common-anim-attlist common-endsync-timing-attlist common-timing-attlist animation-element*)) | (anim:iterate::(common-anim-attlist anim-iterate-attlist common-timing-attlist common-endsync-timing-attlist animation-element*)) | (anim:audio::(common-anim-attlist anim-audio-attlist common-basic-timing-attlist)) | (anim:command::(common-anim-attlist anim-command-attlist common-begin-end-timing-attlist common-anim-target-attlist (anim:param::(anim:name::string anim:value::string))*)) ;
draw-polygon ::= draw:polygon::(common-draw-points-attlist common-draw-position-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
anim-animate-color-attlist ::= (anim:color-interpolation::("rgb" | "hsl"))? (anim:color-interpolation-direction::("clockwise" | "counter-clockwise"))? ;
common-numeric-control-attlist ::= form-control-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-convert-empty-attlist common-data-field-attlist ;
style-section-properties-attlist ::= common-background-color-attlist common-horizontal-margin-attlist (style:protect::boolean)? common-editable-attlist (text:dont-balance-text-columns::boolean)? common-writing-mode-attlist ;
table-data-pilot-group ::= table:data-pilot-group::(table-data-pilot-group-attlist table-data-pilot-group-member+) ;
form-radio-attlist ::= form-control-attlist current-selected common-disabled-attlist label common-printable-attlist selected common-tab-attlist common-title-attlist common-value-attlist common-data-field-attlist common-form-visual-effect-attlist common-form-relative-image-position-attlist common-linked-cell ;
dr3d-cube ::= dr3d:cube::(dr3d-cube-attlist common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-dr3d-transform-attlist) ;
form-grid-attlist ::= form-control-attlist common-disabled-attlist common-printable-attlist common-tab-attlist common-title-attlist ;
table-scenario-attlist ::= table:scenario-ranges::cellRangeAddressList table:is-active::boolean (table:display-border::boolean)? (table:border-color::color)? (table:copy-back::boolean)? (table:copy-styles::boolean)? (table:copy-formulas::boolean)? (table:comment::string)? (table:protected::boolean)? ;
common-control-id-attlist ::= xml-id (form:id::NCName)? ;
form-option ::= form:option::(form-option-attlist string()) ;
presentation-event-listener ::= presentation:event-listener::(presentation-event-listener-attlist presentation-sound?) ;
draw-gradient ::= draw:gradient::(common-draw-gradient-attlist draw-gradient-attlist) ;
common-in-content-meta-attlist ::= xhtml:about::URIorSafeCURIE xhtml:property::CURIEs common-meta-literal-attlist ;
form-option-attlist ::= current-selected selected label common-value-attlist ;
office-text-attlist ::= (text:global::boolean)? (text:use-soft-page-breaks::boolean)? ;
db-columns ::= db:columns::(db-columns-attlist db-column+) ;
table-table-row-group ::= table:table-row-group::(table-table-row-group-attlist table-rows-and-groups) ;
text-file-name-attlist ::= (text:display::("full" | "path" | "name" | "name-and-extension"))? common-field-fixed-attlist ;
presentation-event-listener-attlist ::= script:event-name::string presentation:action::("none" | "previous-page" | "next-page" | "first-page" | "last-page" | "hide" | "stop" | "execute" | "show" | "verb" | "fade-out" | "sound" | "last-visited-page") (presentation:effect::presentationEffects)? (presentation:direction::presentationEffectDirections)? (presentation:speed::presentationSpeeds)? (presentation:start-scale::percent)? (xlink:type::"simple" xlink:href::anyIRI (xlink:show::"embed")? (xlink:actuate::"onRequest")?)? (presentation:verb::nonNegativeInteger)? ;
header-footer-content ::= (text-tracked-changes text-decls (text-h | text-p | text-list | table-table | text-section | text-table-of-content | text-illustration-index | text-table-index | text-object-index | text-user-index | text-alphabetical-index | text-bibliography | text-index-title | change-marks)*) | (style-region-left? style-region-center? style-region-right?) ;
style-page-layout-properties-attlist ::= (fo:page-width::length)? (fo:page-height::length)? common-num-format-attlist? common-num-format-prefix-suffix-attlist (style:paper-tray-name::("default" | string))? (style:print-orientation::("portrait" | "landscape"))? common-horizontal-margin-attlist common-vertical-margin-attlist common-margin-attlist common-border-attlist common-border-line-width-attlist common-padding-attlist common-shadow-attlist common-background-color-attlist (style:register-truth-ref-style-name::styleNameRef)? (style:print::(("headers" | "grid" | "annotations" | "objects" | "charts" | "drawings" | "formulas" | "zero-values")*))? (style:print-page-order::("ttb" | "ltr"))? (style:first-page-number::(positiveInteger | "continue"))? (style:scale-to::percent)? (style:scale-to-pages::positiveInteger)? (style:table-centering::("horizontal" | "vertical" | "both" | "none"))? (style:footnote-max-height::length)? common-writing-mode-attlist (style:layout-grid-mode::("none" | "line" | "both"))? (style:layout-grid-standard-mode::boolean)? (style:layout-grid-base-height::length)? (style:layout-grid-ruby-height::length)? (style:layout-grid-lines::positiveInteger)? (style:layout-grid-base-width::length)? (style:layout-grid-color::color)? (style:layout-grid-ruby-below::boolean)? (style:layout-grid-print::boolean)? (style:layout-grid-display::boolean)? (style:layout-grid-snap-to::boolean)? ;
draw-text-box-attlist ::= (draw:chain-next-name::string)? (draw:corner-radius::nonNegativeLength)? (fo:min-height::(length | percent))? (fo:min-width::(length | percent))? (fo:max-height::(length | percent))? (fo:max-width::(length | percent))? (xml-id (text:id::NCName)?)? ;
table-error-message ::= table:error-message::((table:title::string)? (table:display::boolean)? (table:message-type::("stop" | "warning" | "information"))? text-p*) ;
style-paragraph-properties-attlist ::= (fo:line-height::("normal" | nonNegativeLength | percent))? (style:line-height-at-least::nonNegativeLength)? (style:line-spacing::length)? (style:font-independent-line-spacing::boolean)? common-text-align (fo:text-align-last::("start" | "center" | "justify"))? (style:justify-single-word::boolean)? (fo:keep-together::("auto" | "always"))? (fo:widows::nonNegativeInteger)? (fo:orphans::nonNegativeInteger)? (style:tab-stop-distance::nonNegativeLength)? (fo:hyphenation-keep::("auto" | "page"))? (fo:hyphenation-ladder-count::("no-limit" | positiveInteger))? (style:register-true::boolean)? common-horizontal-margin-attlist (fo:text-indent::(length | percent))? (style:auto-text-indent::boolean)? common-vertical-margin-attlist common-margin-attlist common-break-attlist common-background-color-attlist common-border-attlist common-border-line-width-attlist (style:join-border::boolean)? common-padding-attlist common-shadow-attlist common-keep-with-next-attlist (text:number-lines::boolean)? (text:line-number::nonNegativeInteger)? (style:text-autospace::("none" | "ideograph-alpha"))? (style:punctuation-wrap::("simple" | "hanging"))? (style:line-break::("normal" | "strict"))? (style:vertical-align::("top" | "middle" | "bottom" | "auto" | "baseline"))? common-writing-mode-attlist (style:writing-mode-automatic::boolean)? (style:snap-to-layout-grid::boolean)? common-page-number-attlist common-background-transparency-attlist ;
draw-regular-polygon ::= draw:regular-polygon::(draw-regular-polygon-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
common-border-line-width-attlist ::= (style:border-line-width::borderWidths)? (style:border-line-width-top::borderWidths)? (style:border-line-width-bottom::borderWidths)? (style:border-line-width-left::borderWidths)? (style:border-line-width-right::borderWidths)? ;
draw-layer-attlist ::= draw:name::string (draw:protected::boolean)? (draw:display::("always" | "screen" | "printer" | "none"))? ;
draw-circle ::= draw:circle::((draw-circle-attlist common-draw-circle-ellipse-pos-attlist) | (common-draw-position-attlist common-draw-size-attlist) common-draw-circle-ellipse-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
draw-page ::= draw:page::(common-presentation-header-footer-attlist draw-page-attlist svg-title? svg-desc? draw-layer-set? office-forms? shape* (presentation-animations | animation-element)? presentation-notes?) ;
presentation-settings ::= (presentation:settings::(presentation-settings-attlist presentation-show*))? ;
style-text-properties-content-strict ::= style-text-properties-attlist style-text-properties-elements ;
text-table-index ::= text:table-index::(common-section-attlist text-table-index-source text-index-body) ;
db-schema-definition ::= db:schema-definition::(db-schema-definition-attlist db-table-definitions) ;
text-outline-level-style-attlist ::= text:level::positiveInteger (text:style-name::styleNameRef)? common-num-format-attlist common-num-format-prefix-suffix-attlist (text:display-levels::positiveInteger)? (text:start-value::positiveInteger)? ;
common-anim-values-attlist ::= (smil:values::string)? (anim:formula::string)? common-anim-set-values-attlist (smil:from::string)? (smil:by::string)? ;
office-database ::= office:database::(db-data-source db-forms? db-reports? db-queries? db-table-presentations? db-schema-definition?) ;
db-delimiter-attlist ::= (db:field::string)? (db:string::string)? (db:decimal::string)? (db:thousand::string)? ;
table-table-template-attlist ::= table:name::string table:first-row-start-column::rowOrCol table:first-row-end-column::rowOrCol table:last-row-start-column::rowOrCol table:last-row-end-column::rowOrCol ;
office-text-content-prelude ::= office-forms text-tracked-changes text-decls table-decls ;
draw-hatch-attlist ::= draw:name::styleName (draw:display-name::string)? draw:style::("single" | "double" | "triple") (draw:color::color)? (draw:distance::length)? (draw:rotation::angle)? ;
db-server-database-attlist ::= db:type::namespacedToken db-host-and-port | db-local-socket-name (db:database-name::string)? ;
presentation-settings-attlist ::= (presentation:start-page::string)? (presentation:show::string)? (presentation:full-screen::boolean)? (presentation:endless::boolean)? (presentation:pause::duration)? (presentation:show-logo::boolean)? (presentation:force-manual::boolean)? (presentation:mouse-visible::boolean)? (presentation:mouse-as-pen::boolean)? (presentation:start-with-navigator::boolean)? (presentation:animations::("enabled" | "disabled"))? (presentation:transition-on-click::("enabled" | "disabled"))? (presentation:stay-on-top::boolean)? (presentation:show-end-of-presentation-slide::boolean)? ;
common-draw-shape-with-styles-attlist ::= common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-draw-transform-attlist common-draw-name-attlist common-text-spreadsheet-shape-attlist ;
number-and-text ::= number-number number-text? ;
common-text-anchor-attlist ::= (text:anchor-type::("page" | "frame" | "paragraph" | "char" | "as-char"))? (text:anchor-page-number::positiveInteger)? ;
presentation-show-shape ::= presentation:show-shape::(common-presentation-effect-attlist presentation-sound?) ;
text-object-index ::= text:object-index::(common-section-attlist text-object-index-source text-index-body) ;
table-insertion-attlist ::= table:type::("row" | "column" | "table") table:position::integer (table:count::positiveInteger)? (table:table::integer)? ;
office-document-common-attrs ::= office:version::"1.2" (grddl:transformation::(anyIRI*))? ;
common-draw-style-name-attlist ::= ((draw:style-name::styleNameRef)? (draw:class-names::styleNameRefs)?) | ((presentation:style-name::styleNameRef)? (presentation:class-names::styleNameRefs)?) ;
text-bibliography-configuration-attlist ::= (text:prefix::string)? (text:suffix::string)? (text:numbered-entries::boolean)? (text:sort-by-position::boolean)? (fo:language::languageCode)? (fo:country::countryCode)? (fo:script::scriptCode)? (style:rfc-language-tag::language)? (text:sort-algorithm::string)? ;
office-master-styles ::= (office:master-styles::(style-master-page* style-handout-master? draw-layer-set?))? ;
table-table-header-rows ::= table:table-header-rows::((text-soft-page-break? table-table-row)+) ;
db-indices ::= db:indices::(db-indices-attlist db-index+) ;
table-movement-cut-off-attlist ::= (table:position::integer) | (table:start-position::integer table:end-position::integer) ;
table-table-cell-attlist ::= (table:number-columns-repeated::positiveInteger)? (table:style-name::styleNameRef)? (table:content-validation-name::string)? (table:formula::string)? common-value-and-type-attlist? (table:protect::boolean)? (table:protected::boolean)? xml-id? common-in-content-meta-attlist? ;
db-login-attlist ::= ((db:user-name::string) | (db:use-system-user::boolean))? (db:is-password-required::boolean)? (db:login-timeout::positiveInteger)? ;
table-data-pilot-layout-info-attlist ::= table:layout-mode::("tabular-layout" | "outline-subtotals-top" | "outline-subtotals-bottom") table:add-empty-lines::boolean ;
table-filter-attlist ::= (table:target-range-address::cellRangeAddress)? (table:condition-source::("self" | "cell-range"))? (table:condition-source-range-address::cellRangeAddress)? (table:display-duplicates::boolean)? ;
draw-ellipse-attlist ::= svg:rx::length svg:ry::length ;
table-table-column-group ::= table:table-column-group::(table-table-column-group-attlist table-columns-and-groups) ;
style-style-content ::= (style:family::"text" style-text-properties?) | (style:family::"paragraph" style-paragraph-properties? style-text-properties?) | (style:family::"section" style-section-properties?) | (style:family::"ruby" style-ruby-properties?) | (style:family::"table" style-table-properties?) | (style:family::"table-column" style-table-column-properties?) | (style:family::"table-row" style-table-row-properties?) | (style:family::"table-cell" style-table-cell-properties? style-paragraph-properties? style-text-properties?) | (style:family::("graphic" | "presentation") style-graphic-properties? style-paragraph-properties? style-text-properties?) | (style:family::"drawing-page" style-drawing-page-properties?) | (style:family::"chart" style-chart-properties? style-graphic-properties? style-paragraph-properties? style-text-properties?) ;
table-change-track-table-cell ::= table:change-track-table-cell::(table-change-track-table-cell-attlist text-p*) ;
text-list ::= text:list::(text-list-attr text-list-header? text-list-item*) ;
common-table-cell-address-attlist ::= table:column::integer table:row::integer table:table::integer ;
style-footer ::= style:footer::(common-style-header-footer-attlist header-footer-content) ;
text-bibliography-entry-template-attrs ::= text:bibliography-type::text-bibliography-types text:style-name::styleNameRef ;
style-map-attlist ::= style:condition::string style:apply-style-name::styleNameRef (style:base-cell-address::cellAddress)? ;
text-index-entry-tab-stop ::= text:index-entry-tab-stop::((text:style-name::styleNameRef)? text-index-entry-tab-stop-attrs) ;
chart-chart ::= chart:chart::(chart-chart-attlist chart-title? chart-subtitle? chart-footer? chart-legend? chart-plot-area table-table?) ;
table-sort-attlist ::= (table:bind-styles-to-content::boolean)? (table:target-range-address::cellRangeAddress)? (table:case-sensitive::boolean)? (table:language::languageCode)? (table:country::countryCode)? (table:script::scriptCode)? (table:rfc-language-tag::language)? (table:algorithm::string)? (table:embedded-number-behavior::("alpha-numeric" | "integer" | "double"))? ;
office-spreadsheet-attlist ::= (table:structure-protected::boolean)? (table:protection-key::string)? (table:protection-key-digest-algorithm::anyIRI)? ;
style-chart-properties-content-strict ::= style-chart-properties-attlist style-chart-properties-elements ;
style-header-left ::= style:header-left::(common-style-header-footer-attlist header-footer-content) ;
table-rows-no-group ::= (table-rows (table-table-header-rows table-rows?)?) | (table-table-header-rows table-rows?) ;
chart-subtitle ::= chart:subtitle::(chart-title-attlist text-p?) ;
table-filter-condition ::= table:filter-condition::(table-filter-condition-attlist table-filter-set-item*) ;
common-draw-position-attlist ::= (svg:x::coordinate)? (svg:y::coordinate)? ;
common-padding-attlist ::= (fo:padding::nonNegativeLength)? (fo:padding-top::nonNegativeLength)? (fo:padding-bottom::nonNegativeLength)? (fo:padding-left::nonNegativeLength)? (fo:padding-right::nonNegativeLength)? ;
draw-contour-path ::= draw:contour-path::(common-contour-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-path-data-attlist) ;
style-table-properties-attlist ::= (style:width::positiveLength)? (style:rel-width::percent)? (table:align::("left" | "center" | "right" | "margins"))? common-horizontal-margin-attlist common-vertical-margin-attlist common-margin-attlist common-page-number-attlist common-break-attlist common-background-color-attlist common-shadow-attlist common-keep-with-next-attlist (style:may-break-between-rows::boolean)? (table:border-model::("collapsing" | "separating"))? common-writing-mode-attlist (table:display::boolean)? ;
text-alphabetical-index-source-attrs ::= text-index-scope-attr text-relative-tab-stop-position-attr (text:ignore-case::boolean)? (text:main-entry-style-name::styleNameRef)? (text:alphabetical-separators::boolean)? (text:combine-entries::boolean)? (text:combine-entries-with-dash::boolean)? (text:combine-entries-with-pp::boolean)? (text:use-keys-as-entries::boolean)? (text:capitalize-entries::boolean)? (text:comma-separated::boolean)? (fo:language::languageCode)? (fo:country::countryCode)? (fo:script::scriptCode)? (style:rfc-language-tag::language)? (text:sort-algorithm::string)? ;
text-list-attr ::= (text:style-name::styleNameRef)? (text:continue-numbering::boolean)? (text:continue-list::IDREF)? xml-id? ;
form-form-attlist ::= (xlink:type::"simple" xlink:href::anyIRI (xlink:actuate::"onRequest")?)? (office:target-frame::targetFrameName)? (form:method::("get" | "post" | string))? (form:enctype::string)? (form:allow-deletes::boolean)? (form:allow-inserts::boolean)? (form:allow-updates::boolean)? (form:apply-filter::boolean)? (form:command-type::("table" | "query" | "command"))? (form:command::string)? (form:datasource::(anyIRI | string))? (form:master-fields::string)? (form:detail-fields::string)? (form:escape-processing::boolean)? (form:filter::string)? (form:ignore-result::boolean)? (form:navigation-mode::navigation)? (form:order::string)? (form:tab-cycle::tab-cycles)? ;
style-table-properties-content-strict ::= style-table-properties-attlist style-table-properties-elements ;
table-help-message ::= table:help-message::((table:title::string)? (table:display::boolean)? text-p*) ;
db-queries ::= db:queries::(db-queries-attlist (db-query | db-query-collection)*) ;
heading-attrs ::= text:outline-level::positiveInteger (text:restart-numbering::boolean)? (text:start-value::nonNegativeInteger)? (text:is-list-header::boolean)? ;
form-frame-attlist ::= form-control-attlist common-disabled-attlist for label common-printable-attlist common-title-attlist ;
table-data-pilot-sort-info-attlist ::= (table:sort-mode::"data" table:data-field::string) | (table:sort-mode::("none" | "manual" | "name")) table:order::("ascending" | "descending") ;
common-time-manip-attlist ::= (smil:accelerate::zeroToOneDecimal)? (smil:decelerate::zeroToOneDecimal)? (smil:autoReverse::boolean)? ;
form-textarea-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist common-linked-cell ;
text-numbered-paragraph-attr ::= text:list-id::NCName (text:level::positiveInteger)? (text:style-name::styleNameRef text:continue-numbering::boolean text:start-value::nonNegativeInteger)? xml-id? ;
draw-glue-point-attlist ::= draw:id::nonNegativeInteger svg:x::(distance | percent) svg:y::(distance | percent) (draw:align::("top-left" | "top" | "top-right" | "left" | "center" | "right" | "bottom-left" | "bottom-right"))? draw:escape-direction::("auto" | "left" | "right" | "up" | "down" | "horizontal" | "vertical") ;
table-data-pilot-field-attlist ::= table:source-field-name::string (table:orientation::("row" | "column" | "data" | "hidden")) | (table:orientation::"page" table:selected-page::string) (table:is-data-layout-field::string)? (table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string))? (table:used-hierarchy::integer)? ;
office-styles ::= (office:styles::(styles style-default-style* style-default-page-layout? text-outline-style? text-notes-configuration* text-bibliography-configuration? text-linenumbering-configuration? draw-gradient* svg-linearGradient* svg-radialGradient* draw-hatch* draw-fill-image* draw-marker* draw-stroke-dash* draw-opacity* style-presentation-page-layout* table-table-template*))? ;
common-draw-viewbox-attlist ::= svg:viewBox::(integer integer integer integer) ;
table-table ::= table:table::(table-table-attlist table-title? table-desc? table-table-source? office-dde-source? table-scenario? office-forms? table-shapes? table-columns-and-groups table-rows-and-groups table-named-expressions?) ;
anim-audio-attlist ::= (xlink:href::anyIRI)? (anim:audio-level::double)? ;
office-document ::= office:document::(office-document-attrs office-document-common-attrs office-meta office-settings office-scripts office-font-face-decls office-styles office-automatic-styles office-master-styles office-body) ;
db-table-presentations ::= db:table-representations::(db-table-presentations-attlist db-table-presentation*) ;
common-horizontal-margin-attlist ::= (fo:margin-left::(length | percent))? (fo:margin-right::(length | percent))? ;
text-page-continuation-attlist ::= text:select-page::("previous" | "next") (text:string-value::string)? ;
text-user-index-entry-template-attrs ::= text:outline-level::positiveInteger text:style-name::styleNameRef ;
text-illustration-index-entry-content ::= text-illustration-index-entry-template-attrs (text-index-entry-chapter | text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop)* ;
common-anim-add-accum-attlist ::= (smil:accumulate::("none" | "sum"))? (smil:additive::("replace" | "sum"))? ;
draw-applet ::= draw:applet::(draw-applet-attlist common-draw-data-attlist? draw-param*) ;
text-database-display-attlist ::= common-field-database-table common-field-data-style-name-attlist text:column-name::string ;
style-master-page ::= style:master-page::(style-master-page-attlist (style-header style-header-left?)? (style-footer style-footer-left?)? draw-layer-set? office-forms? shape* animation-element? presentation-notes?) ;
style-handout-master-attlist ::= (presentation:presentation-page-layout-name::styleNameRef)? style:page-layout-name::styleNameRef (draw:style-name::styleNameRef)? ;
text-linenumbering-separator ::= text:linenumbering-separator::((text:increment::nonNegativeInteger)? string()) ;
text-index-title ::= text:index-title::(common-section-attlist index-content-main*) ;
text-common-ref-content ::= string() (text:ref-name::string)? ;
office-script ::= office:script::(office-script-attlist string()? anyElements string()?) ;
text-alphabetical-index-entry-template-attrs ::= text:outline-level::("1" | "2" | "3" | "separator") text:style-name::styleNameRef ;
presentation-play-attlist ::= draw:shape-id::IDREF (presentation:speed::presentationSpeeds)? ;
table-insertion-cut-off-attlist ::= table:id::string table:position::integer ;
svg-radialGradient ::= svg:radialGradient::(common-svg-gradient-attlist (svg:cx::(coordinate | percent))? (svg:cy::(coordinate | percent))? (svg:r::(coordinate | percent))? (svg:fx::(coordinate | percent))? (svg:fy::(coordinate | percent))? svg-stop*) ;
table-cell-range-source ::= table:cell-range-source::(table-table-cell-range-source-attlist table-linked-source-attlist) ;
draw-connector-attlist ::= (draw:type::("standard" | "lines" | "line" | "curve"))? (svg:x1::coordinate svg:y1::coordinate)? (draw:start-shape::IDREF)? (draw:start-glue-point::nonNegativeInteger)? (svg:x2::coordinate svg:y2::coordinate)? (draw:end-shape::IDREF)? (draw:end-glue-point::nonNegativeInteger)? (draw:line-skew::(length (length length?)?))? (svg:d::pathData)? ;
table-highlighted-range-attlist ::= (table:cell-range-address::cellRangeAddress)? table:direction::("from-another-table" | "to-another-table" | "from-same-table") (table:contains-error::boolean)? ;
table-null-date ::= table:null-date::((table:value-type::"date")? (table:date-value::date)?) ;
style-master-page-attlist ::= style:name::styleName (style:display-name::string)? style:page-layout-name::styleNameRef (draw:style-name::styleNameRef)? (style:next-style-name::styleNameRef)? ;
text-user-index ::= text:user-index::(common-section-attlist text-user-index-source text-index-body) ;
chart-data-point-attlist ::= (chart:repeated::positiveInteger)? (chart:style-name::styleNameRef)? xml-id? ;
number-month-attlist ::= (number:textual::boolean)? (number:possessive-form::boolean)? (number:style::("short" | "long"))? ;
text-index-entry-bibliography-attrs ::= (text:style-name::styleNameRef)? text:bibliography-data-field::("address" | "annote" | "author" | "bibliography-type" | "booktitle" | "chapter" | "custom1" | "custom2" | "custom3" | "custom4" | "custom5" | "edition" | "editor" | "howpublished" | "identifier" | "institution" | "isbn" | "issn" | "journal" | "month" | "note" | "number" | "organizations" | "pages" | "publisher" | "report-type" | "school" | "series" | "title" | "url" | "volume" | "year") ;
db-application-connection-settings ::= db:application-connection-settings::(db-application-connection-settings-attlist db-table-filter? db-table-type-filter? db-data-source-settings?) ;
draw-marker ::= draw:marker::(draw-marker-attlist common-draw-viewbox-attlist common-draw-path-data-attlist) ;
common-data-style-attlist ::= style:name::styleName (style:display-name::string)? (number:language::languageCode)? (number:country::countryCode)? (number:script::scriptCode)? (number:rfc-language-tag::language)? (number:title::string)? (style:volatile::boolean)? (number:transliteration-format::string)? (number:transliteration-language::countryCode)? (number:transliteration-country::countryCode)? (number:transliteration-style::("short" | "medium" | "long"))? ;
styles ::= style-style* text-list-style* number-number-style* number-currency-style* number-percentage-style* number-date-style* number-time-style* number-boolean-style* number-text-style* ;
table-database-source-table-attlist ::= table:database-name::string table:database-table-name::string ;
dr3d-scene ::= dr3d:scene::(dr3d-scene-attlist common-draw-position-attlist common-draw-size-attlist common-draw-style-name-attlist common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-text-spreadsheet-shape-attlist common-dr3d-transform-attlist common-draw-caption-id-attlist svg-title? svg-desc? dr3d-light* shapes3d* draw-glue-point*) ;
chart-legend ::= chart:legend::(chart-legend-attlist text-p?) ;
text-section-source-attr ::= (xlink:type::"simple" xlink:href::anyIRI (xlink:show::"embed")?)? (text:section-name::string)? (text:filter-name::string)? ;
db-driver-settings ::= db:driver-settings::(db-driver-settings-attlist db-auto-increment? db-delimiter? db-character-set? db-table-settings?) ;
db-application-connection-settings-attlist ::= (db:is-table-name-length-limited::boolean)? (db:enable-sql92-check::boolean)? (db:append-table-alias-name::boolean)? (db:ignore-driver-privileges::boolean)? (db:boolean-comparison-mode::("equal-integer" | "is-boolean" | "equal-boolean" | "equal-use-only-zero"))? (db:use-catalog::boolean)? (db:max-row-count::integer)? (db:suppress-version-columns::boolean)? ;
office-annotation-attlist ::= (office:display::boolean)? common-office-annotation-name-attlist? ;
common-field-database-table ::= common-field-database-table-attlist common-field-database-name ;
dr3d-scene-attlist ::= (dr3d:vrp::vector3D)? (dr3d:vpn::vector3D)? (dr3d:vup::vector3D)? (dr3d:projection::("parallel" | "perspective"))? (dr3d:distance::length)? (dr3d:focal-length::length)? (dr3d:shadow-slant::angle)? (dr3d:shade-mode::("flat" | "phong" | "gouraud" | "draft"))? (dr3d:ambient-color::color)? (dr3d:lighting-mode::boolean)? ;
number-era ::= number:era::(number-era-attlist common-calendar-attlist) ;
db-data-source ::= db:data-source::(db-data-source-attlist db-connection-data db-driver-settings? db-application-connection-settings?) ;
draw-rect ::= draw:rect::(draw-rect-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
text-changed-region ::= text:changed-region::(text-changed-region-attr text-changed-region-content) ;
text-alphabetical-index-source ::= text:alphabetical-index-source::(text-alphabetical-index-source-attrs text-index-title-template? text-alphabetical-index-entry-template*) ;
chart-grid-attlist ::= (chart:class::("major" | "minor"))? (chart:style-name::styleNameRef)? ;
style-graphic-properties-attlist ::= (draw:stroke::("none" | "dash" | "solid"))? (draw:stroke-dash::styleNameRef)? (draw:stroke-dash-names::styleNameRefs)? (svg:stroke-width::length)? (svg:stroke-color::color)? (draw:marker-start::styleNameRef)? (draw:marker-end::styleNameRef)? (draw:marker-start-width::length)? (draw:marker-end-width::length)? (draw:marker-start-center::boolean)? (draw:marker-end-center::boolean)? (svg:stroke-opacity::(string() | zeroToHundredPercent))? (draw:stroke-linejoin::("miter" | "round" | "bevel" | "middle" | "none"))? (svg:stroke-linecap::("butt" | "square" | "round"))? (draw:symbol-color::color)? (text:animation::("none" | "scroll" | "alternate" | "slide"))? (text:animation-direction::("left" | "right" | "up" | "down"))? (text:animation-start-inside::boolean)? (text:animation-stop-inside::boolean)? (text:animation-repeat::nonNegativeInteger)? (text:animation-delay::duration)? (text:animation-steps::length)? (draw:auto-grow-width::boolean)? (draw:auto-grow-height::boolean)? (draw:fit-to-size::boolean)? (draw:fit-to-contour::boolean)? (draw:textarea-vertical-align::("top" | "middle" | "bottom" | "justify"))? (draw:textarea-horizontal-align::("left" | "center" | "right" | "justify"))? (fo:wrap-option::("no-wrap" | "wrap"))? (style:shrink-to-fit::boolean)? (draw:color-mode::("greyscale" | "mono" | "watermark" | "standard"))? (draw:color-inversion::boolean)? (draw:luminance::zeroToHundredPercent)? (draw:contrast::percent)? (draw:gamma::percent)? (draw:red::signedZeroToHundredPercent)? (draw:green::signedZeroToHundredPercent)? (draw:blue::signedZeroToHundredPercent)? (draw:image-opacity::zeroToHundredPercent)? (draw:shadow::("visible" | "hidden"))? (draw:shadow-offset-x::length)? (draw:shadow-offset-y::length)? (draw:shadow-color::color)? (draw:shadow-opacity::zeroToHundredPercent)? (draw:start-line-spacing-horizontal::distance)? (draw:start-line-spacing-vertical::distance)? (draw:end-line-spacing-horizontal::distance)? (draw:end-line-spacing-vertical::distance)? (draw:line-distance::distance)? (draw:guide-overhang::length)? (draw:guide-distance::distance)? (draw:start-guide::length)? (draw:end-guide::length)? (draw:placing::("below" | "above"))? (draw:parallel::boolean)? (draw:measure-align::("automatic" | "left-outside" | "inside" | "right-outside"))? (draw:measure-vertical-align::("automatic" | "above" | "below" | "center"))? (draw:unit::("automatic" | "mm" | "cm" | "m" | "km" | "pt" | "pc" | "inch" | "ft" | "mi"))? (draw:show-unit::boolean)? (draw:decimal-places::nonNegativeInteger)? (draw:caption-type::("straight-line" | "angled-line" | "angled-connector-line"))? (draw:caption-angle-type::("fixed" | "free"))? (draw:caption-angle::angle)? (draw:caption-gap::distance)? (draw:caption-escape-direction::("horizontal" | "vertical" | "auto"))? (draw:caption-escape::(length | percent))? (draw:caption-line-length::length)? (draw:caption-fit-line-length::boolean)? (dr3d:horizontal-segments::nonNegativeInteger)? (dr3d:vertical-segments::nonNegativeInteger)? (dr3d:edge-rounding::percent)? (dr3d:edge-rounding-mode::("correct" | "attractive"))? (dr3d:back-scale::percent)? (dr3d:depth::length)? (dr3d:backface-culling::("enabled" | "disabled"))? (dr3d:end-angle::angle)? (dr3d:close-front::boolean)? (dr3d:close-back::boolean)? (dr3d:lighting-mode::("standard" | "double-sided"))? (dr3d:normals-kind::("object" | "flat" | "sphere"))? (dr3d:normals-direction::("normal" | "inverse"))? (dr3d:texture-generation-mode-x::("object" | "parallel" | "sphere"))? (dr3d:texture-generation-mode-y::("object" | "parallel" | "sphere"))? (dr3d:texture-kind::("luminance" | "intensity" | "color"))? (dr3d:texture-filter::("enabled" | "disabled"))? (dr3d:texture-mode::("replace" | "modulate" | "blend"))? (dr3d:ambient-color::color)? (dr3d:emissive-color::color)? (dr3d:specular-color::color)? (dr3d:diffuse-color::color)? (dr3d:shininess::percent)? (dr3d:shadow::("visible" | "hidden"))? common-draw-rel-size-attlist (fo:min-width::(length | percent))? (fo:min-height::(length | percent))? (fo:max-height::(length | percent))? (fo:max-width::(length | percent))? common-horizontal-margin-attlist common-vertical-margin-attlist common-margin-attlist (style:print-content::boolean)? (style:protect::("none" | (("content" | "position" | "size")+)))? (style:horizontal-pos::("left" | "center" | "right" | "from-left" | "inside" | "outside" | "from-inside"))? (svg:x::coordinate)? (style:horizontal-rel::("page" | "page-content" | "page-start-margin" | "page-end-margin" | "frame" | "frame-content" | "frame-start-margin" | "frame-end-margin" | "paragraph" | "paragraph-content" | "paragraph-start-margin" | "paragraph-end-margin" | "char"))? common-vertical-pos-attlist common-vertical-rel-attlist common-text-anchor-attlist common-border-attlist common-border-line-width-attlist common-padding-attlist common-shadow-attlist common-background-color-attlist common-background-transparency-attlist common-editable-attlist (style:wrap::("none" | "left" | "right" | "parallel" | "dynamic" | "run-through" | "biggest"))? (style:wrap-dynamic-threshold::nonNegativeLength)? (style:number-wrapped-paragraphs::("no-limit" | positiveInteger))? (style:wrap-contour::boolean)? (style:wrap-contour-mode::("full" | "outside"))? (style:run-through::("foreground" | "background"))? (style:flow-with-text::boolean)? (style:overflow-behavior::("clip" | "auto-create-new-frame"))? (style:mirror::("none" | "vertical" | horizontal-mirror | ("vertical" horizontal-mirror) | (horizontal-mirror "vertical")))? (fo:clip::("auto" | clipShape))? (draw:wrap-influence-on-position::("iterative" | "once-concurrent" | "once-successive"))? common-writing-mode-attlist (draw:frame-display-scrollbar::boolean)? (draw:frame-display-border::boolean)? (draw:frame-margin-horizontal::nonNegativePixelLength)? (draw:frame-margin-vertical::nonNegativePixelLength)? (draw:visible-area-left::nonNegativeLength)? (draw:visible-area-top::nonNegativeLength)? (draw:visible-area-width::positiveLength)? (draw:visible-area-height::positiveLength)? (draw:draw-aspect::("content" | "thumbnail" | "icon" | "print-view"))? (draw:ole-draw-aspect::nonNegativeInteger)? ;
office-document-styles ::= office:document-styles::(office-document-common-attrs office-font-face-decls office-styles office-automatic-styles office-master-styles) ;
table-subtotal-field-attlist ::= table:field-number::nonNegativeInteger table:function::("average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string) ;
text-hidden-text-attlist ::= text:condition::string text:string-value::string (text:is-hidden::boolean)? ;
form-property ::= (form:property::(form-property-name form-property-value-and-type-attlist)) | (form:list-property::(form-property-name form-property-type-and-value-list)) ;
table-named-expression-attlist ::= table:name::string table:expression::string (table:base-cell-address::cellAddress)? ;
style-paragraph-properties-content-strict ::= style-paragraph-properties-attlist style-paragraph-properties-elements ;
script-event-listener-attlist ::= script:event-name::string script:language::string (script:macro-name::string) | (xlink:type::"simple" xlink:href::anyIRI (xlink:actuate::"onRequest")?) ;
text-variable-decl ::= text:variable-decl::(common-field-name-attlist common-value-type-attlist) ;
draw-fill-image ::= draw:fill-image::(draw-fill-image-attlist xlink:type::"simple" xlink:href::anyIRI (xlink:show::"embed")? (xlink:actuate::"onLoad")?) ;
office-document-content ::= office:document-content::(office-document-common-attrs office-scripts office-font-face-decls office-automatic-styles office-body) ;
draw-param-attlist ::= (draw:name::string)? (draw:value::string)? ;
common-begin-end-timing-attlist ::= (smil:begin::string)? (smil:end::string)? ;
common-presentation-effect-attlist ::= draw:shape-id::IDREF (presentation:effect::presentationEffects)? (presentation:direction::presentationEffectDirections)? (presentation:speed::presentationSpeeds)? (presentation:delay::duration)? (presentation:start-scale::percent)? (presentation:path-id::string)? ;
style-columns-attlist ::= fo:column-count::positiveInteger (fo:column-gap::length)? ;
text-a-attlist ::= (office:name::string)? (office:title::string)? xlink:type::"simple" xlink:href::anyIRI (xlink:actuate::"onRequest")? (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? (text:style-name::styleNameRef)? (text:visited-style-name::styleNameRef)? ;
config-config-item ::= config:config-item::(config-config-item-attlist string()) ;
anim-iterate-attlist ::= common-anim-target-attlist (anim:iterate-type::string)? (anim:iterate-interval::duration)? ;
style-graphic-fill-properties-attlist ::= (draw:fill::("none" | "solid" | "bitmap" | "gradient" | "hatch"))? (draw:fill-color::color)? (draw:secondary-fill-color::color)? (draw:fill-gradient-name::styleNameRef)? (draw:gradient-step-count::nonNegativeInteger)? (draw:fill-hatch-name::styleNameRef)? (draw:fill-hatch-solid::boolean)? (draw:fill-image-name::styleNameRef)? (style:repeat::("no-repeat" | "repeat" | "stretch"))? (draw:fill-image-width::(length | percent))? (draw:fill-image-height::(length | percent))? (draw:fill-image-ref-point-x::percent)? (draw:fill-image-ref-point-y::percent)? (draw:fill-image-ref-point::("top-left" | "top" | "top-right" | "left" | "center" | "right" | "bottom-left" | "bottom" | "bottom-right"))? (draw:tile-repeat-offset::(zeroToHundredPercent "horizontal" | "vertical"))? (draw:opacity::zeroToHundredPercent)? (draw:opacity-name::styleNameRef)? (svg:fill-rule::("nonzero" | "evenodd"))? ;
common-draw-rel-size-attlist ::= common-draw-size-attlist (style:rel-width::(percent | "scale" | "scale-min"))? (style:rel-height::(percent | "scale" | "scale-min"))? ;
table-cut-offs ::= table:cut-offs::((table-movement-cut-off+) | (table-insertion-cut-off table-movement-cut-off*)) ;
dr3d-sphere-attlist ::= (dr3d:center::vector3D)? (dr3d:size::vector3D)? ;
draw-fill-image-attlist ::= draw:name::styleName (draw:display-name::string)? (svg:width::length)? (svg:height::length)? ;
style-text-properties-attlist ::= (fo:font-variant::fontVariant)? (fo:text-transform::("none" | "lowercase" | "uppercase" | "capitalize"))? (fo:color::color)? (style:use-window-font-color::boolean)? (style:text-outline::boolean)? (style:text-line-through-type::lineType)? (style:text-line-through-style::lineStyle)? (style:text-line-through-width::lineWidth)? (style:text-line-through-color::("font-color" | color))? (style:text-line-through-text::string)? (style:text-line-through-text-style::styleNameRef)? (style:text-position::(percent | "super" | "sub" percent?))? (style:font-name::string)? (style:font-name-asian::string)? (style:font-name-complex::string)? (fo:font-family::string)? (style:font-family-asian::string)? (style:font-family-complex::string)? (style:font-family-generic::fontFamilyGeneric)? (style:font-family-generic-asian::fontFamilyGeneric)? (style:font-family-generic-complex::fontFamilyGeneric)? (style:font-style-name::string)? (style:font-style-name-asian::string)? (style:font-style-name-complex::string)? (style:font-pitch::fontPitch)? (style:font-pitch-asian::fontPitch)? (style:font-pitch-complex::fontPitch)? (style:font-charset::textEncoding)? (style:font-charset-asian::textEncoding)? (style:font-charset-complex::textEncoding)? (fo:font-size::(positiveLength | percent))? (style:font-size-asian::(positiveLength | percent))? (style:font-size-complex::(positiveLength | percent))? (style:font-size-rel::length)? (style:font-size-rel-asian::length)? (style:font-size-rel-complex::length)? (style:script-type::("latin" | "asian" | "complex" | "ignore"))? (fo:letter-spacing::(length | "normal"))? (fo:language::languageCode)? (style:language-asian::languageCode)? (style:language-complex::languageCode)? (fo:country::countryCode)? (style:country-asian::countryCode)? (style:country-complex::countryCode)? (fo:script::scriptCode)? (style:script-asian::scriptCode)? (style:script-complex::scriptCode)? (style:rfc-language-tag::language)? (style:rfc-language-tag-asian::language)? (style:rfc-language-tag-complex::language)? (fo:font-style::fontStyle)? (style:font-style-asian::fontStyle)? (style:font-style-complex::fontStyle)? (style:font-relief::("none" | "embossed" | "engraved"))? (fo:text-shadow::shadowType)? (style:text-underline-type::lineType)? (style:text-underline-style::lineStyle)? (style:text-underline-width::lineWidth)? (style:text-underline-color::("font-color" | color))? (style:text-overline-type::lineType)? (style:text-overline-style::lineStyle)? (style:text-overline-width::lineWidth)? (style:text-overline-color::("font-color" | color))? (style:text-overline-mode::lineMode)? (fo:font-weight::fontWeight)? (style:font-weight-asian::fontWeight)? (style:font-weight-complex::fontWeight)? (style:text-underline-mode::lineMode)? (style:text-line-through-mode::lineMode)? (style:letter-kerning::boolean)? (style:text-blinking::boolean)? common-background-color-attlist (style:text-combine::("none" | "letters" | "lines"))? (style:text-combine-start-char::character)? (style:text-combine-end-char::character)? (style:text-emphasize::("none" | ("none" | "accent" | "dot" | "circle" | "disc" "above" | "below")))? (style:text-scale::percent)? (style:text-rotation-angle::angle)? (style:text-rotation-scale::("fixed" | "line-height"))? (fo:hyphenate::boolean)? (fo:hyphenation-remain-char-count::positiveInteger)? (fo:hyphenation-push-char-count::positiveInteger)? (text:display::"true") | (text:display::"none") | (text:display::"condition" text:condition::"none") | ε ;
office-dde-source-attlist ::= (office:name::string)? (office:conversion-mode::("into-default-style-data-style" | "into-english-number" | "keep-text"))? ;
text-object-index-source ::= text:object-index-source::(text-object-index-source-attrs text-index-title-template? text-object-index-entry-template?) ;
office-meta-data ::= (meta:generator::string) | (dc:title::string) | (dc:description::string) | (dc:subject::string) | (meta:keyword::string) | (meta:initial-creator::string) | dc-creator | (meta:printed-by::string) | (meta:creation-date::dateTime) | dc-date | (meta:print-date::dateTime) | (meta:template::(xlink:type::"simple" xlink:href::anyIRI (xlink:actuate::"onRequest")? (xlink:title::string)? (meta:date::dateTime)?)) | (meta:auto-reload::((xlink:type::"simple" xlink:href::anyIRI (xlink:show::"replace")? (xlink:actuate::"onLoad")?)? (meta:delay::duration)?)) | (meta:hyperlink-behaviour::((office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))?)) | (dc:language::language) | (meta:editing-cycles::nonNegativeInteger) | (meta:editing-duration::duration) | (meta:document-statistic::((meta:page-count::nonNegativeInteger)? (meta:table-count::nonNegativeInteger)? (meta:draw-count::nonNegativeInteger)? (meta:image-count::nonNegativeInteger)? (meta:ole-object-count::nonNegativeInteger)? (meta:object-count::nonNegativeInteger)? (meta:paragraph-count::nonNegativeInteger)? (meta:word-count::nonNegativeInteger)? (meta:character-count::nonNegativeInteger)? (meta:frame-count::nonNegativeInteger)? (meta:sentence-count::nonNegativeInteger)? (meta:syllable-count::nonNegativeInteger)? (meta:non-whitespace-character-count::nonNegativeInteger)? (meta:row-count::nonNegativeInteger)? (meta:cell-count::nonNegativeInteger)?)) | (meta:user-defined::(meta:name::string (meta:value-type::"float" double) | (meta:value-type::"date" dateOrDateTime) | (meta:value-type::"time" duration) | (meta:value-type::"boolean" boolean) | (meta:value-type::"string" string) | string())) ;
draw-enhanced-geometry ::= draw:enhanced-geometry::(draw-enhanced-geometry-attlist draw-equation* draw-handle*) ;
text-bibliography-entry-template ::= text:bibliography-entry-template::(text-bibliography-entry-template-attrs (text-index-entry-span | text-index-entry-tab-stop | text-index-entry-bibliography)*) ;
text-chapter-attlist ::= text:display::("name" | "number" | "number-and-name" | "plain-number-and-name" | "plain-number") text:outline-level::nonNegativeInteger ;
form-checkbox-attlist ::= form-control-attlist common-disabled-attlist label common-printable-attlist common-tab-attlist common-title-attlist common-value-attlist common-data-field-attlist common-form-visual-effect-attlist common-form-relative-image-position-attlist common-linked-cell (form:current-state::states)? (form:is-tristate::boolean)? (form:state::states)? ;
text-hidden-paragraph-attlist ::= text:condition::string (text:is-hidden::boolean)? ;
text-bookmark-start-attlist ::= text:name::string xml-id? common-in-content-meta-attlist? ;
presentation-sound ::= presentation:sound::(presentation-sound-attlist xlink:type::"simple" xlink:href::anyIRI (xlink:actuate::"onRequest")? (xlink:show::("new" | "replace"))?) ;
db-column-definition ::= db:column-definition::(db-column-definition-attlist common-db-default-value) ;
chart-title-attlist ::= (table:cell-range::cellRangeAddressList)? common-draw-position-attlist (chart:style-name::styleNameRef)? ;
db-database-description ::= db:database-description::(db-database-description-attlist db-file-based-database | db-server-database) ;
db-table-exclude-filter ::= db:table-exclude-filter::(db-table-exclude-filter-attlist db-table-filter-pattern+) ;
style-background-image ::= (style:background-image::(style-background-image-attlist common-draw-data-attlist | office-binary-data | ε))? ;
dr3d-cube-attlist ::= (dr3d:min-edge::vector3D)? (dr3d:max-edge::vector3D)? ;
form-property-type-and-value-list ::= (office:value-type::"float" (form:list-value::(office:value::double))*) | (office:value-type::"percentage" (form:list-value::(office:value::double))*) | (office:value-type::"currency" (form:list-value::(office:value::double (office:currency::string)?))*) | (office:value-type::"date" (form:list-value::(office:date-value::dateOrDateTime))*) | (office:value-type::"time" (form:list-value::(office:time-value::duration))*) | (office:value-type::"boolean" (form:list-value::(office:boolean-value::boolean))*) | (office:value-type::"string" (form:list-value::(office:string-value::string))*) | (office:value-type::"void") ;
db-key ::= db:key::(db-key-attlist db-key-columns+) ;
draw-floating-frame ::= draw:floating-frame::(draw-floating-frame-attlist common-draw-data-attlist) ;
text-illustration-index-source-attrs ::= text-index-scope-attr text-relative-tab-stop-position-attr (text:use-caption::boolean)? (text:caption-sequence-name::string)? (text:caption-sequence-format::("text" | "category-and-value" | "caption"))? ;
form-text-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist common-linked-cell ;
text-note-ref-content ::= (text:reference-format::common-ref-format-values)? text-note-class ;
draw-opacity ::= draw:opacity::(common-draw-gradient-attlist draw-opacity-attlist) ;
table-linked-source-attlist ::= xlink:type::"simple" xlink:href::anyIRI (xlink:actuate::"onRequest")? (table:filter-name::string)? (table:filter-options::string)? (table:refresh-delay::duration)? ;
form-column ::= form:column::(form-column-attlist column-controls+) ;
table-data-pilot-groups-attlist ::= table:source-field-name::string (table:date-start::(dateOrDateTime | "auto")) | (table:start::(double | "auto")) (table:date-end::(dateOrDateTime | "auto")) | (table:end::(double | "auto")) table:step::double table:grouped-by::("seconds" | "minutes" | "hours" | "days" | "months" | "quarters" | "years") ;
text-outline-level-style ::= text:outline-level-style::(text-outline-level-style-attlist style-list-level-properties? style-text-properties?) ;
text-list-style-attr ::= style:name::styleName (style:display-name::string)? (text:consecutive-numbering::boolean)? ;
common-presentation-header-footer-attlist ::= (presentation:use-header-name::string)? (presentation:use-footer-name::string)? (presentation:use-date-time-name::string)? ;
style-table-column-properties-content-strict ::= style-table-column-properties-attlist style-table-column-properties-elements ;
text-index-source-styles ::= text:index-source-styles::(text:outline-level::positiveInteger text-index-source-style*) ;
table-rows ::= table-table-rows | ((text-soft-page-break? table-table-row)+) ;
db-column-attlist ::= (db:visible::boolean)? (db:style-name::styleNameRef)? (db:default-cell-style-name::styleNameRef)? ;
number-day-of-week ::= number:day-of-week::(number-day-of-week-attlist common-calendar-attlist) ;
draw-opacity-attlist ::= (draw:start::zeroToHundredPercent)? (draw:end::zeroToHundredPercent)? ;
style-section-properties-content-strict ::= style-section-properties-attlist style-section-properties-elements ;
style-table-row-properties-content-strict ::= style-table-row-properties-attlist style-table-row-properties-elements ;
common-db-table-name-attlist ::= db:name::string (db:catalog-name::string)? (db:schema-name::string)? ;
text-decls ::= (text:variable-decls::(text-variable-decl*))? (text:sequence-decls::(text-sequence-decl*))? (text:user-field-decls::(text-user-field-decl*))? (text:dde-connection-decls::(text-dde-connection-decl*))? text-alphabetical-index-auto-mark-file? ;
db-table-presentation ::= db:table-representation::(db-table-presentation-attlist common-db-table-name-attlist common-db-object-title common-db-object-description common-db-table-style-name db-order-statement? db-filter-statement? db-columns?) ;
form-number-attlist ::= (form:value::double)? (form:current-value::double)? (form:min-value::double)? (form:max-value::double)? ;
text-list-style ::= text:list-style::(text-list-style-attr text-list-style-content*) ;
common-dde-connection-decl-attlist ::= office:dde-application::string office:dde-topic::string office:dde-item::string (office:automatic-update::boolean)? ;
chart-data-label ::= chart:data-label::(chart-data-label-attlist text-p?) ;
text-time-attlist ::= common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::timeOrDateTime)? (text:time-adjust::duration)? ;
common-timing-attlist ::= common-basic-timing-attlist common-time-manip-attlist ;
common-number-attlist ::= (number:min-integer-digits::integer)? (number:grouping::boolean)? ;
table-functions ::= table-named-expressions? table-database-ranges? table-data-pilot-tables? table-consolidation? table-dde-links? ;
chart-equation ::= chart:equation::(chart-equation-attlist text-p?) ;
form-combobox-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist dropdown common-maxlength-attlist common-printable-attlist common-readonly-attlist size common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist list-source list-source-type common-linked-cell common-source-cell-range (form:auto-complete::boolean)? ;
text-database-next-attlist ::= common-field-database-table (text:condition::string)? ;
office-presentation-content-prelude ::= text-decls table-decls presentation-decls ;
draw-ellipse ::= draw:ellipse::((draw-ellipse-attlist common-draw-circle-ellipse-pos-attlist) | (common-draw-position-attlist common-draw-size-attlist) common-draw-circle-ellipse-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
common-draw-id-attlist ::= (xml-id (draw:id::NCName)?)? ;
number-currency-symbol ::= number:currency-symbol::(number-currency-symbol-attlist string()) ;
common-repeat-timing-attlist ::= (smil:repeatDur::string)? (smil:repeatCount::(nonNegativeDecimal | "indefinite"))? ;
office-presentation-content-epilogue ::= presentation-settings table-functions ;
form-value-range-attlist ::= form-control-attlist common-disabled-attlist common-printable-attlist common-tab-attlist common-title-attlist common-value-attlist common-linked-cell common-repeat common-delay-for-repeat (form:max-value::integer)? (form:min-value::integer)? (form:step-size::positiveInteger)? (form:page-step-size::positiveInteger)? (form:orientation::("horizontal" | "vertical"))? ;
number-boolean-style ::= number:boolean-style::(common-data-style-attlist style-text-properties? number-text? (number-boolean number-text?)? style-map*) ;
config-config-item-set ::= config:config-item-set::(config-config-item-set-attlist config-items) ;
presentation-dim-attlist ::= draw:shape-id::IDREF draw:color::color ;
text-bibliography-source ::= text:bibliography-source::(text-index-title-template? text-bibliography-entry-template*) ;
text-sort-key-attlist ::= text:key::("address" | "annote" | "author" | "bibliography-type" | "booktitle" | "chapter" | "custom1" | "custom2" | "custom3" | "custom4" | "custom5" | "edition" | "editor" | "howpublished" | "identifier" | "institution" | "isbn" | "issn" | "journal" | "month" | "note" | "number" | "organizations" | "pages" | "publisher" | "report-type" | "school" | "series" | "title" | "url" | "volume" | "year") (text:sort-ascending::boolean)? ;
db-table-setting ::= db:table-setting::(db-table-setting-attlist db-delimiter? db-character-set?) ;
style-list-level-properties-attlist ::= common-text-align (text:space-before::length)? (text:min-label-width::nonNegativeLength)? (text:min-label-distance::nonNegativeLength)? (style:font-name::string)? (fo:width::positiveLength)? (fo:height::positiveLength)? common-vertical-rel-attlist common-vertical-pos-attlist (text:list-level-position-and-space-mode::("label-width-and-position" | "label-alignment"))? ;
number-year ::= number:year::(number-year-attlist common-calendar-attlist) ;
text-index-entry-span ::= text:index-entry-span::((text:style-name::styleNameRef)? string()) ;
text-date-attlist ::= common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::dateOrDateTime)? (text:date-adjust::duration)? ;
text-user-field-decl ::= text:user-field-decl::(common-field-name-attlist common-field-formula-attlist? common-value-and-type-attlist) ;
table-sort ::= table:sort::(table-sort-attlist table-sort-by+) ;
db-table-setting-attlist ::= db-is-first-row-header-line db-show-deleted ;
text-database-row-select-attlist ::= common-field-database-table (text:condition::string)? (text:row-number::nonNegativeInteger)? ;
chart-axis ::= chart:axis::(chart-axis-attlist chart-title? chart-categories? chart-grid*) ;
draw-custom-shape ::= draw:custom-shape::(draw-custom-shape-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text draw-enhanced-geometry?) ;
form-form ::= form:form::(common-form-control-attlist form-form-attlist form-properties? office-event-listeners? (controls | form-form)* form-connection-resource?) ;
common-table-cell-range-address-attlist ::= table:start-column::integer table:start-row::integer table:start-table::integer table:end-column::integer table:end-row::integer table:end-table::integer ;
common-draw-gradient-attlist ::= (draw:name::styleName)? (draw:display-name::string)? draw:style::gradient-style (draw:cx::percent)? (draw:cy::percent)? (draw:angle::angle)? (draw:border::percent)? ;
draw-polyline ::= draw:polyline::(common-draw-points-attlist common-draw-position-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
text-numbered-paragraph ::= text:numbered-paragraph::(text-numbered-paragraph-attr text-number? text-p | text-h) ;
text-list-level-style-bullet-attr ::= (text:style-name::styleNameRef)? text:bullet-char::character common-num-format-prefix-suffix-attlist (text:bullet-relative-size::percent)? ;
number-quarter ::= number:quarter::(number-quarter-attlist common-calendar-attlist) ;
config-config-item-map-entry ::= config:config-item-map-entry::(config-config-item-map-entry-attlist config-items) ;
anim-transition-filter-attlist ::= smil:type::string (smil:subtype::string)? (smil:direction::("forward" | "reverse"))? (smil:fadeColor::color)? (smil:mode::("in" | "out"))? ;
text-alphabetical-index-entry-template ::= text:alphabetical-index-entry-template::(text-alphabetical-index-entry-template-attrs (text-index-entry-chapter | text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop)*) ;
common-table-change-attlist ::= table:id::string (table:acceptance-state::("accepted" | "rejected" | "pending"))? (table:rejecting-change-id::string)? ;
chart-chart-attlist ::= chart:class::namespacedToken common-draw-size-attlist (chart:column-mapping::string)? (chart:row-mapping::string)? (chart:style-name::styleNameRef)? (xlink:type::"simple" xlink:href::anyIRI)? xml-id? ;
table-data-pilot-field ::= table:data-pilot-field::(table-data-pilot-field-attlist table-data-pilot-level? table-data-pilot-field-reference? table-data-pilot-groups?) ;
text-set-page-variable-attlist ::= (text:active::boolean)? (text:page-adjust::integer)? ;
draw-custom-shape-attlist ::= (draw:engine::namespacedToken)? (draw:data::string)? ;
table-table-row ::= table:table-row::(table-table-row-attlist (table-table-cell | table-covered-table-cell)+) ;
table-operation-attlist ::= table:name::("trace-dependents" | "remove-dependents" | "trace-precedents" | "remove-precedents" | "trace-errors") table:index::nonNegativeInteger ;
table-detective ::= table:detective::(table-highlighted-range* table-operation*) ;
text-table-of-content-entry-template-attlist ::= text:outline-level::positiveInteger text:style-name::styleNameRef ;
common-num-format-prefix-suffix-attlist ::= (style:num-prefix::string)? (style:num-suffix::string)? ;
common-svg-gradient-attlist ::= (svg:gradientUnits::"objectBoundingBox")? (svg:gradientTransform::string)? (svg:spreadMethod::("pad" | "reflect" | "repeat"))? draw:name::styleName (draw:display-name::string)? ;
draw-a-attlist ::= xlink:type::"simple" xlink:href::anyIRI (xlink:actuate::"onRequest")? (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? (office:name::string)? (office:title::string)? (office:server-map::boolean)? xml-id? ;
db-table-filter-pattern ::= db:table-filter-pattern::(db-table-filter-pattern-attlist string) ;
office-spreadsheet-content-prelude ::= table-tracked-changes? text-decls table-decls ;
number-fraction ::= number:fraction::(number-fraction-attlist common-number-attlist) ;
common-draw-area-attlist ::= (xlink:type::"simple" xlink:href::anyIRI (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))?)? (office:name::string)? (draw:nohref::"nohref")? ;
text-bibliography ::= text:bibliography::(common-section-attlist text-bibliography-source text-index-body) ;
table-dde-link ::= table:dde-link::(office-dde-source table-table) ;
table-table-attlist ::= (table:name::string)? (table:style-name::styleNameRef)? (table:template-name::string)? (table:use-first-row-styles::boolean)? (table:use-last-row-styles::boolean)? (table:use-first-column-styles::boolean)? (table:use-last-column-styles::boolean)? (table:use-banding-rows-styles::boolean)? (table:use-banding-columns-styles::boolean)? (table:protected::boolean)? (table:protection-key::string)? (table:protection-key-digest-algorithm::anyIRI)? (table:print::boolean)? (table:print-ranges::cellRangeAddressList)? xml-id? (table:is-sub-table::boolean)? ;
--------------------pascal::bruneliere.bgf--------------------
Block ::= (instructions::Instruction)+ procedure::Procedure loop::Loop conditional::Conditional ;
Assignment ::= block::Block ;
Variable ::= Parameter ;
 Variable ::= name::String program::Program procedure::Procedure type::Type ;
Repeat ::= block_loop::Block ;
Type ::= name::String program::Program (variables::Variable)+ ;
For ::= block_loop::Block ;
Calculation ::= block::Block ;
Program ::= name::String (variables::Variable)+ (types::Type)+ (procedures::Procedure)+ ;
Procedure ::= Function ;
 Procedure ::= name::String program::Program (variables::Variable)+ (parameters::Parameter)+ block_procedure::Block ;
While ::= block_loop::Block ;
--------------------pascal::delphi.bgf--------------------
procedure_impl_decl ::= NL procedure_intf_decl nested_decl_block procedure_body_semi ;
pointer_type ::= "^" SPOFF qualified_id SPON ;
of_const ::= "of" "const" ;
colon_id ::= "," NL id ;
selection_stm ::= ("if" expr "then" nested_stm else_stm?) | ("case" expr "of" case_selector* case_else? end_struct) ;
default_spec ::= ("default" SP expr) | "nodefault" ;
set_type ::= "set" of_basetype ;
record_field_constant ::= id colon typed_const ;
expr ::= SP SPOFF expression SPON ;
of_basetype ::= "of" type_spec ;
try_finally_stm ::= "try" NL statement_list "finally" NL statement_list end_struct ;
implements_spec ::= "implements" {qualified_id ","}* ;
at_address ::= "at" expr ;
case_else ::= "else" statement_list ;
interface_body ::= visibility_default end_struct ;
postfix_opr ::= arguments | array_subscript | ("." id) | "^" ;
exports_section ::= "exports" {exports_entry ","}* ";" NL ;
nested_stm ::= sequence_stm | (NL IN statement? EX) ;
defaultarray_spec ::= ";" "default" ;
in_filename ::= "in" filenamelit ;
type_section ::= "type" NL IN type_decl+ EX ;
interface_section ::= interface_kw uses_clause? intfdecl_block ;
heritage_list ::= ("(" {qualified_id ","}* ")") | ("helper" "for" id) ;
assign_stm ::= expr ":=" expr ;
external_directive ::= "external" expr? external_name? ;
absolute_init ::= "absolute" expr ;
stored_spec ::= "stored" SP expr ;
argm ::= expression argmfmt? argmfmt? ;
package_file ::= package_decl requires_clause? contains_clause? end_struct file_end ;
property_decl ::= "property" id prop_indexes? colon_type? prop_specifier* defaultarray_spec? ";" NL ;
finalization_section ::= finalization_kw statement_list ;
record_constant ::= "(" record_field_constant_semi* record_field_constant? ")" ;
semi_set_element ::= "," SP set_element ;
var_section ::= var_keyword NL IN var_decl+ EX ;
array_constant ::= "(" {typed_const ","}* ")" ;
var_decl ::= identlist colon_type hint_directive? var_init? ";" NL ;
semi_directive ::= ";"? directive ;
procedural_type ::= procedure_intf_decl of_object? semi_calling_spec* ;
record_field_constant_semi ::= record_field_constant ";" NL ;
resource_section ::= "resourcestring" constant_decl+ ;
accessor_spec ::= "readonly" | "writeonly" | (accessor_verb qualified_id) ;
sequence_stm ::= "begin" NL statement_list end_struct ;
parameter ::= {id ","}* parameter_type? ;
string_type ::= "string" | "shortstring" | "ansistring" | "widestring" | ("string" "[" expression "]") ;
of_object ::= "of" "object" ;
uses_item ::= qualified_id in_filename? ;
array_subscript ::= "[" expression? semi_expression* "]" ;
class_type ::= "packed"? class_keyword heritage_list? NL class_body? ;
guid_decl ::= "[" expr "]" ;
qualified_id ::= namespace* name SPON ;
exception_block ::= (exception_handler_list case_else?) | statement_list ;
set_constructor ::= "[" set_element? semi_set_element* "]" ;
enumerated_type ::= "(" enum_spec+ ")" ;
expression ::= term infix_expr* ;
record_variant ::= expr+ colon "(" visibility_default ")" ";"? NL ;
array_index_list ::= "[" {array_index ","}* "]" ;
type_decl ::= identlist equal "type"? type_spec hint_directive? ";" NL ;
contains_clause ::= "contains" {uses_item ","}* ";" NL ;
identlist ::= id colon_id* ;
semi_calling_spec ::= ";"? calling_spec ;
program_file_list ::= "(" {id ","}* ")" ;
program_decl ::= ("program" qualified_id program_file_list? ";" NL) | ("library" qualified_id ";" NL) ;
unit_decl ::= "unit" qualified_id hint_directive? ";" NL ;
prefix_opr ::= ("not" SP) | ("inherited" SP) | "@" | sign ;
param_init ::= equal expr ;
interface_type ::= interface_keyword heritage_list? guid_decl? interface_body? ;
procedure_body_semi ::= procedure_body ";" NL ;
external_name ::= ("name" expr) | ("index" expr) ;
dispid_spec ::= "dispid" SP expr ;
constant_spec ::= (equal expr) | (colon_type const_init) ;
dotdot_expr ::= ".." expression ;
exports_entry ::= procedure_id formal_parameters? external_name? ;
statement ::= labelid_colon? unlabeled_stm ;
statement_list ::= IN statement_semi* statement? EX ;
term ::= prefix_opr* atom_expr postfix_opr* ;
const_init ::= equal typed_const ;
constant_decl ::= identlist constant_spec hint_directive? ";" NL ;
exception_handler_list ::= exception_handler_semi* exception_handler? ;
array_type ::= ("array" of_const) | ("packed"? "array" array_index_list* of_basetype) ;
colon ::= SPOFF ":" SPON ;
namespace ::= id "." ;
exception_handler ::= "on" exception_var? type_spec "do" nested_stm ;
raise_stm ::= "raise" expr? at_address? ;
formal_parameter ::= parm_qual? parameter ;
implementation_section ::= implementation_kw uses_clause? impldecl_block ;
program_file ::= program_decl uses_clause? impldecl_block procedure_body file_end ;
unit_file ::= unit_decl interface_section implementation_section initialization_section? finalization_section? end_struct file_end ;
argmfmt ::= ":" anynumber ;
arguments ::= "(" argm? semi_argm* ")" ;
class_reference_type ::= "class" "of" qualified_id ;
prop_index_decl ::= prop_index_name+ colon_type ";"? ;
goto_stm ::= "goto" label_id ;
directive ::= "dynamic" | "virtual" | "abstract" | ("message" qualified_id?) | ("dispid" sign? anynumber) | "override" | "overload" | "reintroduce" | "static" | "assembler" | "far" | "export" | hint_directive | calling_spec ;
procedure_signature ::= "class"? procedure_keyword procedure_id? formal_parameters? colon_type? ;
method_decl ::= (procedure_signature method_deleg) | (procedure_signature ";" dispid_spec ";") | procedure_intf_decl ;
initialization_section ::= initialization_kw NL statement_list ;
uses_clause ::= "uses" NL IN {uses_item ","}* ";" EX NL ;
statement_semi ::= statement? ";" NL ;
subrange_type ::= expression SPOFF dotdot_expr SPON ;
id_colon ::= id colon ;
formal_parameters ::= "(" formal_parameter semi_formal_parameter* ")" ;
enum_spec ::= id param_init? ;
exception_var ::= id colon ;
prop_index_name ::= prop_index_modifier? qualified_id ;
exception_handler_semi ::= exception_handler ";" NL ;
with_stm ::= "with" expr+ "do" nested_stm ;
procedure_external_decl ::= procedure_intf_decl external_directive semi_calling_spec? ";"? NL ;
interface_kw ::= "interface" NL ;
labelid_colon ::= label_id colon ;
variant_section ::= "case" id_colon? type_spec "of" record_variant+ ;
procedure_intf_decl ::= procedure_signature semi_directive* ";"? NL ;
else_stm ::= NL "else" nested_stm ;
case_label ::= expr dotdot_expr? ;
prop_indexes ::= "[" prop_index_decl+ "]" ;
atom_expr ::= charlit | anynumber | ctrlchar | "nil" | ("(" expression ")") | set_constructor | qualified_id ;
visibility_block ::= visibility NL IN class_member* EX ;
requires_clause ::= "requires" {qualified_id ","}* ";" NL ;
set_element ::= expression dotdot_expr? ;
file_type ::= "file" of_basetype? ;
colon_type ::= colon type_spec ;
implementation_kw ::= "implementation" NL ;
label_decl ::= "label" {label_id ","}* ";" NL ;
visibility_default ::= IN class_member* EX ;
visibility ::= "public" | "protected" | ("strict"? "private") | "published" | "automated" ;
loop_stm ::= ("repeat" statement_list "until" expr) | ("while" expr "do" nested_stm) | ("for" id ":=" expr to_or_downto expr "do" nested_stm) | ("for" id "in" id "do" nested_stm) ;
parameter_type ::= colon_type param_init? ;
method_deleg ::= equal qualified_id ";" NL ;
case_selector ::= {case_label ","}* colon nested_stm ";"? ;
try_except_stm ::= "try" NL statement_list "except" NL exception_block end_struct ;
semi_formal_parameter ::= ";" formal_parameter ;
semi_expression ::= "," SP expression ;
class_body ::= visibility_default visibility_block* end_struct ;
const_section ::= "const" NL IN constant_decl+ EX ;
semi_argm ::= "," SP argm ;
index_spec ::= "index" SP expr ;
procedure_id ::= namespace? id ;
infix_expr ::= SP infix_opr SP term ;
package_decl ::= "package" qualified_id ";" NL ;
--------------------pascal::delphipp.bgf--------------------
pp_boolexpr ::= booleanlit | (boolfunc space? "(" id ")") | ("NOT" space? pp_boolexpr) | id | (pp_boolexpr "pp_boolopr" pp_boolexpr) | (pp_litexpr "pp_compareopr" pp_litexpr) | ("(" pp_boolexpr ")") ;
cmline ::= "//" cmlinebody* EOL ;
namespace ::= id "." ;
pp_content ::= pp_stmt_or_water ;
pp_endif ::= ("{$" space? endif_alt bracketbody* "}") | ("(*$" space? endif_alt starbody* "*)") ;
pp_elseifblock ::= pp_elseifexpr pp_content* ;
pp_directivestmt ::= ("{$" space? {pp_directive ","}* bracketbody* "}") | ("(*$" space? {pp_directive ","}* starbody* "*)") ;
starbody ::= pp_any ;
pp_stmt_or_water ::= (pp_stmt) | (pp_comment) | (pp_any) ;
pp_switch ::= id space? pp_switchopt ;
pp_ifexpr ::= ("{$" space? if_alt bracketbody* "}") | ("(*$" space? if_alt starbody* "*)") ;
pp_ifblock ::= pp_ifexpr pp_content* ;
cmstarblock ::= "(*" starbody* "*)" ;
pp_directive ::= ("DEFINE" space id) | ("UNDEF" space id) | ("INCLUDE" space? filenamelit) | ("I" space? filenamelit) | ("LINK" space? filenamelit) | ("L" space? filenamelit) | ("RESOURCE" space? filenamelit space? filenamelit?) | ("R" space? filenamelit space? filenamelit?) | ("HPPEMIT" space? charlit) | ("EXTERNALSYM" space id) | "NODEFINE" | "MINENUMSIZE" | "DENYPACKAGEUNIT" | "WEAKPACKAGEUNIT" | ("IMAGEBASE" space? anynumber) | ("C" space id) | ("MINENUMSIZE" space anynumber) | pp_minenumsize | ("ALIGN" space? anynumber) | pp_align | ("M" space? {anynumber ","}*) | ("MAXSTACKSIZE" space anynumber) | ("MINSTACKSIZE" space anynumber) | ("RESOURCERESERVE" space anynumber) | "NOINCLUDE" | "WARN" | "MESSAGE" | "APPTYPE" | ("LIBPREFIX" space? charlit) | ("LIBSUFIX" space? charlit) | ("LIBVERSION" space? charlit) | ("DESCRIPTION" space? charlit) | ("D" space? charlit) | ("EXTENSION" space id) | ("E" space id) | (pp_switch space?) ;
ident ::= id | (key) ;
cmbracketblock ::= "{" bracketbody* "}" ;
pp_any ::= (id codetoken*) | key | token ;
pp_elseifexpr ::= ("{$" space? else_alt space? bracketbody* "}") | ("(*$" space? else_alt space? starbody* "*)") ;
bracketbody ::= pp_any ;
if_alt ::= ("IF" space? pp_boolexpr) | ("IFDEF" space? id) | ("IFNDEF" space? id) | ("IFOPT" space? pp_switch) ;
pp_stmt ::= pp_ifstmt | (pp_directivestmt) ;
pp_ifstmt ::= pp_ifblock pp_elseifblock* pp_endif ;
else_alt ::= ("ELSEIF" space? pp_boolexpr) | ("ELSE" space?) ;
nested_id ::= SPOFF namespace* ident SPON ;
cmlinebody ::= pp_any ;
--------------------pascal::object.bgf--------------------
object_heritage ::= "(" ref_name ")" ;
semi_case_selector ::= ";" NL case_selector ;
dotDot_expression ::= ".." expression ;
type_declaration ::= decl_name "=" type_or_restrictedType ;
unit_definition ::= "unit" decl_name ";" NL interface_section NL implementation_section NL init_section "." ;
program_definition ::= "program" decl_name program_file_list? ";" NL program_block "." ;
package_definition ::= "package" decl_name ";" NL requires_clause? contains_clause? "end" "." ;
stringType ::= "string" | "ansistring" | "widestring" | ("string" "[" expression "]") ;
else_statement ::= "else" statement? ;
semicolon_record_field_constant ::= ";" decl_name ":" typed_constant ;
at_address ::= "at" ref_name ;
assign_expression ::= ":=" expression ;
class_heritage ::= "(" {ref_name ","}* ")" ;
while_statement ::= "while" expression do statement ;
type_section ::= "type" IN NL type_declaration+ EX NL ;
interface_section ::= "interface" NL NL uses_clause? NL interface_declaration* ;
semi_statement ::= ";" NL statement ;
raise_statement ::= "raise" ref_name? at_address? ;
compound_statement ::= begin IN NL statement_list EX NL "end" NL ;
enumeratedType ::= "(" {decl_name ","}* ")" ;
object_modifier ::= ("." id) | array_subscript | arguments | "^" | as_type ;
subrangeType ::= expression ".." expression ;
fileType ::= "file" "of" typeId ;
pond_number ::= "#" number ;
record_constant ::= "(" typed_constant semicolon_record_field_constant* ")" ;
classType ::= "class" class_heritage? IN NL class_element_list? vis_spec_element_list* EX NL "end"? ;
dot_id ::= "." id ;
comma_case_label ::= "," case_label ;
var_section ::= var NL IN var_declaration_semicolon* NL EX ;
if_statement ::= if expression "then" statement? else_statement? ;
try_except_statement ::= "try" IN NL statement_list EX NL except ";"? IN NL exception_block EX NL "end" ;
array_constant ::= "(" {typed_constant ","}* ")" ;
semi_exception_handler ::= ";" exception_handler ;
in_clause ::= "in" charlit ;
property_list ::= property_word decl_name property_interface? property_specifiers* ;
implementsTypeId ::= "implements" typeId ;
object_field_list ::= ident_list_colonType semi_ident_list_colonType* ;
field_list ::= field_declaration+ variant_section? ;
semi_directive ::= ";" directive ;
constructor_heading ::= "constructor" decl_name formal_parameters? ;
destructor_heading ::= "destructor" decl_name formal_parameters? ;
setType ::= "set" "of" ordinalType ;
requires_idList_semicolon ::= "requires" ref_name+ ";" NL ;
init_section ::= ("intitialization" IN NL statement_list fin_statement_list? EX NL "end") | compound_statement | "end" ;
constructor_declaration ::= constructor_heading ";" IN NL block EX NL ";" NL ;
field_declaration ::= decl_name+ ":" type ";" NL ;
endNameTag ::= SPOFF SP "</" "UID" ">" SPON ;
mul_op_factor ::= mul_op factor ;
structType ::= (arrayType "packed"?) | (setType "packed"?) | (fileType "packed"?) | (recordType "packed"?) ;
procedureType ::= proc_or_func_heading of_object? ;
parameter ::= {decl_name ","}* parameter_type? ;
of_object ::= "of" "object" ;
vis_spec_element_list ::= NL class_visibility class_element_list? ;
uses_item ::= ref_name in_clause? ;
array_subscript ::= "[" {expression ","}* "]" ;
class_referenceType ::= "class" "of" typeId ;
set_constructor ::= "[" {set_element ","}* "]" ;
function_heading ::= function_word decl_name formal_parameters? ":" type_or_string ;
expression ::= (factor op_factor*) | (op_factor+) ;
record_variant ::= expression+ ":" "(" field_list? ")" ;
repeating_statement ::= "repeat" statement ";"? "until" expression ;
procedure_heading ::= procedure decl_name formal_parameters? ;
absolute_assignment ::= "absolute" id_or_expression ;
function_declaration ::= function_heading semi_directive? ";" IN NL block EX NL ";" NL ;
index_expession ::= "index" expression ;
block ::= declaration_section* compound_statement ;
program_file_list ::= "(" {id ","}* ")" ;
param_init ::= "=" expression ;
array_of ::= array_word set_constructor? "of" ;
semicolon_virtual ::= ";" "virtual" ;
write_id ::= "write" ref_name ;
for_statement ::= for ref_name ":=" expression to_or_downto expression do statement ;
interface_declaration ::= constant_section | type_section | var_section | (exported_heading directive?) ;
statement ::= (labelId_colon? unlabeled_statement) | ε ;
statement_list ::= statement semi_statement* ;
op_factor ::= op factor ;
add_op_term ::= add_op term ;
term ::= factor mul_op_factor* ;
contains_idList_semicolon ::= "contains" ref_name+ ";" NL ;
read_id ::= "read" ref_name ;
exception_handler_list ::= exception_handler semi_exception_handler* ";"? ;
var_declaration ::= decl_name+ ":" type var_assignment? ;
stored_id_OR_stored_expression ::= "stored" id_or_expression ;
constant_declaration ::= (decl_name "=" expression ";" NL) | (decl_name ":" typeId "=" typed_constant ";" NL) ;
exception_handler ::= "on" exception_var? type do IN NL statement EX ;
formal_parameter ::= parm_qual? parameter ;
virtual_method_heading ::= method_heading semi_directive? semicolon_virtual? ;
implementation_section ::= "implementation" IN NL uses_clause? declaration_section* EX NL ;
library_definition ::= "library" decl_name ";" NL program_block "." ;
arguments ::= "(" {expression ","}* ")" ;
label_declaration_section ::= "label" decl_name ;
directive ::= "cdecl" | "register" | "dynamic" | "virtual" | "export" | "external" | "far" | "forward" | ("message" ref_name?) | "override" | "overload" | "pascal" | "reintroduce" | "safecall" | "stdcall" | "Override" ;
factor ::= ref_name | charlit | (pond_number+) | ("@" "@"? ref_name) | "nil" | ("(" expression ")") | (not_word factor) | set_constructor | (predefinedType "(" expression ")") | bool_value | ("-"? number) ;
labelId_colon ::= labelId ":" ;
property_interface ::= property_parameter_list? ":" type ;
startNameTag ::= SPOFF SP "<" "UID" SP "name" "=" stringlit ">" SPON ;
rel_op_simple_expression ::= rel_op simple_expression ;
default_expression_OR_nodefault ::= ("default" expression) | "nodefault" ;
type_or_restrictedType ::= (type ";" NL) | (restrictedType ";" NL) ;
constant_section ::= "const" IN NL constant_declaration* EX NL ;
semi_virtual_method_heading ::= ";" NL virtual_method_heading ;
constant_assignment ::= "=" expression ;
interface_heritage ::= "(" {ref_name ","}* ")" ;
simple_expression ::= term? add_op_term* ;
class_visibility_property_list ::= class_visibility property_list ;
uses_clause ::= "uses" IN NL uses_item+ ";" EX NL ;
object ::= (id object_modifier*) | ("(" ref_name ")" object_modifier*) ;
method_list ::= virtual_method_heading semi_virtual_method_heading* ;
id_colon ::= decl_name ":" ;
formal_parameters ::= "(" formal_parameter semi_formal_parameter* ")" ;
class_element_semi ::= NL class_element ";" ;
semi_ident_list_colonType ::= ";" NL ident_list_colonType ;
exception_var ::= decl_name ":" ;
class_visibility_method_list ::= class_visibility method_list ;
with_statement ::= "with" ref_name+ do statement ;
destructor_declaration ::= destructor_heading ";" IN NL block EX NL ";" NL ;
arrayType ::= array_word square_ordinalType? "of" type ;
labelId ::= "label" number+ ";" NL ;
try_finally_statement ::= "try" IN NL statement_list EX NL "finally" IN NL statement_list EX NL "end" ;
recordType ::= "record" field_list "end" ;
variant_section ::= "case" id_colon? typeId "of" record_variant_semicolon+ ";"? ;
exception_else ::= exception_handler_list NL EX else_statement? ;
square_ordinalType ::= "[" {ordinalType ","}* "]" ;
as_type ::= as type ;
case_label ::= expression dotDot_expression? ;
simple_statement ::= (ref_name assign_expression?) | ("inherited" ref_name?) | ("goto" labelId) ;
fin_statement_list ::= "finalization" statement_list ;
case_statement ::= "case" expression "of" case_selector IN NL semi_case_selector* ";"? EX NL else_statement? ";"? NL "end" ;
set_element ::= expression dotDot_expression? ;
property_parameter_list ::= "[" idList_colonTypeId_semicolon* "]" ;
objectType ::= "object" object_heritage? object_field_list? method_list? "end" ;
pointerType ::= "^" typeId ;
exported_heading ::= (procedure_heading ";" NL) | (function_heading ";" NL) | (constructor_heading ";" NL) | (destructor_heading ";" NL) ;
var_declaration_semicolon ::= var_declaration ";" NL ;
interfaceType ::= "interface" interface_heritage? class_method_list? class_property_list? "end" ;
program_block ::= uses_clause? block ;
parameter_type ::= ":" array_of? type param_init? ;
case_selector ::= case_label comma_case_label* ":" statement ;
procedure_declaration ::= procedure_heading ";" IN NL block EX NL ";" NL ;
semi_formal_parameter ::= ";" NL formal_parameter ;
record_variant_semicolon ::= record_variant ";" NL ;
ident_list_colonType ::= decl_name+ ":" type ;
decl_name ::= id dot_id* ;
idList_colonTypeId_semicolon ::= decl_name+ ":" typeId ";" NL ;
--------------------pl1::bruneliere.bgf--------------------
PLIElement ::= level::String name::String sharedType::PLIClassifier group::PLIComposedType initial::PLIElementInitialValue source::PLISourceText array::PLIArray ;
PLIComputationalType ::= alias::PLIAlias ;
PLIClassifier ::= PLISimpleType ;
 PLIClassifier ::= PLINamedType ;
 PLIClassifier ::= PLIComposedType ;
 PLIClassifier ::= name::String (typedElements::PLIElement)+ ;
PLINonComputationalType ::= alias::PLIAlias ;
PLIHBoundArray ::= uBound::Integer IBoundToAllocate::String referredTo::PLIElement ;
PLINamedType ::= name::String (typedElements::PLIElement)+ ;
PLISourceText ::= source::String fileName::String ;
PLIVariableBoundArray ::= IBoundToAllocate::String hBoundToAllocate::String referredTo::PLIElement ;
PLIAlias ::= type::PLISimpleType (contains::PLIAttribute)+ ;
PLIFixedBoundArray ::= IBound::Integer uBound::Integer referredTo::PLIElement ;
PLIFixedLboundArray ::= IBound::Integer uBoundToAllocate::String referredTo::PLIElement ;
--------------------uml::collab.bgf--------------------
Interface ::= (classifierRole::ClassifierRole)+ (feature::Operation)+ ;
Operation ::= (classifierRole::ClassifierRole)+ owner::Interface ;
Message ::= (message::Message)+ activator::Message (interaction::Interaction)+ receiver::ClassifierRole sender::ClassifierRole specification::Request ;
ClassifierRole ::= (associationEndRole::AssociationEndRole)+ receiverMess::Message senderMess::Message (availableFeature::Operation)+ base::Interface ;
Package ::= ownedEltColl::CollaborationPackage (ownedEltInt::InteractionPackage)+ ;
Collaboration ::= (interaction::Interaction)+ ownedEltAss::AssociationRole ownedEltClass::ClassifierRole ;
InteractionPackage ::= providerClause::ProviderClause ownedElt::Interaction ;
Interaction ::= context::Collaboration (message::Message)+ ;
AssociationEndRole ::= associationRole::AssociationRole type::ClassifierRole ;
ProviderClause ::= Package ;
 ProviderClause ::= ownedEltColl::CollaborationPackage (ownedEltInt::InteractionPackage)+ ;
--------------------uml::extended.bgf--------------------
Attribute ::= initialValue::Expression isKey::Boolean isUnique::Boolean ;
AssociationEnd ::= isNavigable::Boolean isOrdered::Boolean aggregation::AggregationKind multiplicity::Multiplicity changeable::ChangeableKind TargetScope::ScopeKind rfIntegrety::RlIntegretyKind rlIntegrety::RlIntegretyKind ;
Class ::= isActive::Boolean mutliplicity::Multiplicity (key::Key)+ ;
--------------------uml::fragment.bgf--------------------
SimpleState ::= stateMachine::StateMachine internal::Transition ;
FinalState ::= stateMachine::StateMachine internal::Transition ;
Dependency ::= supplier::StateMachine client::Class stereotype::Stereotype ;
Class ::= parent::Generalization child::Generalization dependency::Dependency ;
StateMachine ::= context::Class top::State ;
Transition ::= trigger::Event source::StateVertex target::StateVertex ;
PseudoState ::= compositeState::CompositeState ;
Stereotype ::= baseClass::String extendedElement::Dependency ;
State ::= CompositeState ;
 State ::= SimpleState ;
 State ::= FinalState ;
 State ::= stateMachine::StateMachine internal::Transition ;
--------------------uml::oocm.bgf--------------------
NameSpace ::= Classifier ;
 NameSpace ::= name::String ;
StructuralFeature ::= Attribute ;
 StructuralFeature ::= multiplicity::MultiplicityType isChangeable::Boolean targetScope::ScopeKind ;
GeneralizableElement ::= Classifier ;
 GeneralizableElement ::= isRoot::Boolean isLeaf::Boolean isAbstract::Boolean ;
MultiplicityType ::= lower::Integer upper::Integer isOrdered::Boolean isUnique::Boolean ;
Operation ::= isRoot::Boolean isLeaf::Boolean isAbstract::Boolean specification::String ;
Feature ::= StructuralFeature ;
 Feature ::= BehavioralFeature ;
 Feature ::= ownerScope::ScopeKind visibility::VisibilityKind owner::Classifier ;
--------------------uml::reuse.bgf--------------------
Dependency ::= ReuseContract ;
 Dependency ::= owningDependency::Dependency (subDependency::Dependency)+ ;
ReuseContract ::= supplier::ProviderClause client::ReuserClause ;
--------------------uml::simple.bgf--------------------
Attribute ::= owner::Class type::Classifier ;
PrimitiveDataType ::= (typeOpposite::Attribute)+ ;
Class ::= (attribute::Attribute)+ (general::Class)+ (generalOpposite::Class)+ (reverse::Association)+ (forward::Association)+ ;
Association ::= source::Class destination::Class ;
--------------------uml::statecharts.bgf--------------------
Event ::= (evt_container::Transition)+ (targets::State)+ ;
CompositeState ::= (subVertexes::StateVertex)+ isConcurrent::Boolean ;
StateMachine ::= (transitions::Transition)+ (top::State)+ ;
Guard ::= gua_container::Transition expression::BooleanExpression ;
StateVertex ::= State ;
 StateVertex ::= sv_container::CompositeState (outgoing::Transition)+ (incoming::Transition)+ ;
Transition ::= transSM_container::StateMachine transS_container::State trigger::Event guard::Guard source::StateVertex target::StateVertex ;
State ::= CompositeState ;
 State ::= state_container::StateMachine (internalTransitions::Transition)+ (deferrableEvents::Event)+ ;
--------------------uml::stereo.bgf--------------------
TagDefinition ::= tagType::String multiplicity::Multiplicity (typedValue::TaggedValue)+ owner::Stereotype ;
Constraint ::= (constrainedElement::ModelElement)+ constrainedStereotype::Stereotype ;
TaggedValue ::= dataValue::String (referenceValue::ModelElement)+ type::TagDefinition ;
ModelElement ::= TagDefinition ;
 ModelElement ::= (referenceTag::TaggedValue)+ (stereotype::Stereotype)+ (constraint::Constraint)+ (taggedValue::TaggedValue)+ ;
Stereotype ::= icon::Geometry (baseClass::Name)+ (definedTag::TagDefinition)+ (stereotypeConstraint::Constraint)+ (extendedElement::ModelElement)+ ;
--------------------uml::uml-uc.bgf--------------------
UseCaseInstance ::= (classifier::Classifier)+ ;
Extend ::= condition::BooleanExpression extension::UseCase base::UseCase (extensionPoint::ExtensionPoint)+ ;
Include ::= addition::UseCase base::UseCase ;
UseCase ::= (extensionPoint::String)+ includeAddition::Include includeBase::Include extendExtension::Extend extendBase::Extend (extensionPoints::ExtensionPoint)+ ;
Actor ::= (instance::Instance)+ ;
ExtensionPoint ::= location::LocationReference (extend::Extend)+ (useCase::UseCase)+ ;
--------------------uml::uml2.bgf--------------------
Constraint ::= InteractionConstraint ;
 Constraint ::= IntervalConstraint ;
 Constraint ::= context::Namespace namespace::Namespace specification::ValueSpecification (constrainedElement::Element)+ ;
CommunicationPath ::= isDerived::Boolean (ownedEnd::Property)+ (endType::Type)+ memberEnd::Property ;
ActivityPartition ::= isDimension::Boolean isExternal::Boolean (containedEdge::ActivityEdge)+ (containedNode::ActivityNode)+ (subgroup::ActivityPartition)+ superPartition::ActivityPartition represents::Element ;
InteractionOperand ::= guard::InteractionConstraint (fragment::InteractionFragment)+ ;
ConnectableElementTemplateParameter ::= signature::TemplateSignature parameteredElement::ParameterableElement ownedParameteredElement::ParameterableElement default::ParameterableElement ownedDefault::ParameterableElement ;
Transition ::= ProtocolTransition ;
 Transition ::= kind::TransitionKind container::Region source::Vertex target::Vertex redefinedTransition::Transition (trigger::Trigger)+ guard::Constraint effect::Activity ;
Property ::= ExtensionEnd ;
 Property ::= Port ;
 Property ::= default::String isComposite::Boolean isDerived::Boolean class_::Class opposite::Property isDerivedUnion::Boolean owningAssociation::Association (redefinedProperty::Property)+ (subsettedProperty::Property)+ datatype::DataType association::Association aggregation::AggregationKind defaultValue::ValueSpecification (qualifier::Property)+ associationEnd::Property ;
ExpansionRegion ::= mode::ExpansionKind (outputElement::ExpansionNode)+ (inputElement::ExpansionNode)+ ;
Artifact ::= DeploymentSpecification ;
 Artifact ::= fileName::String (nestedArtifact::Artifact)+ (manifestation::Manifestation)+ (ownedOperation::Operation)+ (ownedAttribute::Property)+ ;
Interaction ::= (lifeline::Lifeline)+ (message::Message)+ (fragment::InteractionFragment)+ (formalGate::Gate)+ ;
State ::= FinalState ;
 State ::= isComposite::Boolean isOrthogonal::Boolean isSimple::Boolean isSubmachineState::Boolean submachine::StateMachine (connection::ConnectionPointReference)+ redefinedState::State (deferrableTrigger::Trigger)+ (region::Region)+ entry::Activity exit::Activity doActivity::Activity stateInvariant::Constraint ;
InteractionConstraint ::= minint::ValueSpecification maxint::ValueSpecification ;
Permission ::= (client::NamedElement)+ (supplier::NamedElement)+ ;
ConnectorEnd ::= definingEnd::Property role::ConnectableElement partWithPort::Property ;
JoinNode ::= isCombineDuplicate::Boolean joinSpec::ValueSpecification ;
Gate ::= receiveMessage::Message sendMessage::Message ;
EventOccurrence ::= Stop ;
 EventOccurrence ::= (startExec::ExecutionOccurrence)+ (finishExec::ExecutionOccurrence)+ (toAfter::GeneralOrdering)+ (toBefore::GeneralOrdering)+ ;
Dependency ::= Permission ;
 Dependency ::= Usage ;
 Dependency ::= Abstraction ;
 Dependency ::= Deployment ;
 Dependency ::= (client::NamedElement)+ (supplier::NamedElement)+ ;
PackageImport ::= ProfileApplication ;
 PackageImport ::= visibility::VisibilityKind importedPackage::Package importingNamespace::Namespace ;
ClearAssociationAction ::= object::InputPin association::Association ;
ExecutionOccurrence ::= start::EventOccurrence finish::EventOccurrence (behavior::Behavior)+ ;
Message ::= messageKind::MessageKind messageSort::MessageSort receiveEvent::MessageEnd sendEvent::MessageEnd connector::Connector interaction::Interaction signature::NamedElement (argument::ValueSpecification)+ ;
TestIdentityAction ::= first::InputPin second::InputPin result::OutputPin ;
Realization ::= Substitution ;
 Realization ::= Implementation ;
 Realization ::= abstraction::Component realizingClassifier::Classifier ;
LoopNode ::= isTestedFirst::Boolean (bodyPart::ActivityNode)+ (setupPart::ActivityNode)+ decider::OutputPin (test::ActivityNode)+ (result::OutputPin)+ (loopVariable::OutputPin)+ (bodyOutput::OutputPin)+ (loopVariableInput::InputPin)+ ;
Deployment ::= (deployedArtifact::DeployedArtifact)+ location::DeploymentTarget (configuration::DeploymentSpecification)+ ;
Interval ::= DurationInterval ;
 Interval ::= TimeInterval ;
 Interval ::= (min::ValueSpecification)+ (max::ValueSpecification)+ ;
TimeExpression ::= firstTime::Boolean event::NamedElement ;
InteractionOccurrence ::= PartDecomposition ;
 InteractionOccurrence ::= refersTo::Interaction (actualGate::Gate)+ (argument::InputPin)+ ;
Association ::= Extension ;
 Association ::= CommunicationPath ;
 Association ::= AssociationClass ;
 Association ::= isDerived::Boolean (ownedEnd::Property)+ (endType::Type)+ memberEnd::Property ;
Component ::= isIndirectlyInstantiated::Boolean (required::Interface)+ (provided::Interface)+ (realization::Realization)+ (ownedMember::PackageableElement)+ ;
FinalState ::= isComposite::Boolean isOrthogonal::Boolean isSimple::Boolean isSubmachineState::Boolean submachine::StateMachine (connection::ConnectionPointReference)+ redefinedState::State (deferrableTrigger::Trigger)+ (region::Region)+ entry::Activity exit::Activity doActivity::Activity stateInvariant::Constraint ;
InformationFlow ::= (realization::Relationship)+ (conveyed::Classifier)+ ;
InterruptibleActivityRegion ::= (interruptingEdge::ActivityEdge)+ (containedNode::ActivityNode)+ ;
Class ::= Stereotype ;
 Class ::= Behavior ;
 Class ::= Component ;
 Class ::= AssociationClass ;
 Class ::= Node ;
 Class ::= (ownedOperation::Operation)+ (superClass::Class)+ (extension::Extension)+ (nestedClassifier::Classifier)+ isActive::Boolean (ownedReception::Reception)+ ;
ReadExtentAction ::= result::OutputPin classifier::Classifier ;
CollaborationOccurrence ::= type::Collaboration (roleBinding::Dependency)+ ;
Action ::= CreateObjectAction ;
 Action ::= DestroyObjectAction ;
 Action ::= TestIdentityAction ;
 Action ::= ReadSelfAction ;
 Action ::= StructuralFeatureAction ;
 Action ::= LinkAction ;
 Action ::= ClearAssociationAction ;
 Action ::= VariableAction ;
 Action ::= ApplyFunctionAction ;
 Action ::= InvocationAction ;
 Action ::= ReadExtentAction ;
 Action ::= ReclassifyObjectAction ;
 Action ::= ReadIsClassifiedObjectAction ;
 Action ::= StartOwnedBehaviorAction ;
 Action ::= ReadLinkObjectEndAction ;
 Action ::= ReadLinkObjectEndQualifierAction ;
 Action ::= AcceptEventAction ;
 Action ::= ReplyAction ;
 Action ::= RaiseExceptionAction ;
 Action ::= StructuredActivityNode ;
 Action ::= effect::String (output::OutputPin)+ (input::InputPin)+ context::Classifier (localPrecondition::Constraint)+ (localPostcondition::Constraint)+ ;
Actor ::= (feature::Feature)+ isAbstract::Boolean (inheritedMember::NamedElement)+ (general::Classifier)+ (generalization::Generalization)+ (attribute::Property)+ (redefinedClassifier::Classifier)+ (substitution::Substitution)+ (powertypeExtent::GeneralizationSet)+ (ownedUseCase::UseCase)+ (useCase::UseCase)+ representation::CollaborationOccurrence (occurrence::CollaborationOccurrence)+ ;
TimeInterval ::= (min::ValueSpecification)+ (max::ValueSpecification)+ ;
Implementation ::= contract::Interface implementingClassifier::BehavioredClassifier ;
Stereotype ::= (ownedOperation::Operation)+ (superClass::Class)+ (extension::Extension)+ (nestedClassifier::Classifier)+ isActive::Boolean (ownedReception::Reception)+ ;
DestroyObjectAction ::= isDestroyLinks::Boolean isDestroyOwnedObjects::Boolean target::InputPin ;
InstanceSpecification ::= EnumerationLiteral ;
 InstanceSpecification ::= (slot::Slot)+ (classifier::Classifier)+ specification::ValueSpecification ;
ReclassifyObjectAction ::= isReplaceAll::Boolean (oldClassifier::Classifier)+ (newClassifier::Classifier)+ object::InputPin ;
TemplateParameterSubstitution ::= formal::TemplateParameter templateBinding::TemplateBinding (actual::ParameterableElement)+ (ownedActual::ParameterableElement)+ ;
OperationTemplateParameter ::= signature::TemplateSignature parameteredElement::ParameterableElement ownedParameteredElement::ParameterableElement default::ParameterableElement ownedDefault::ParameterableElement ;
Operation ::= (ownedParameter::Parameter)+ class_::Class isQuery::Boolean datatype::DataType (precondition::Constraint)+ (postcondition::Constraint)+ (redefinedOperation::Operation)+ bodyCondition::Constraint ;
SendSignalAction ::= target::InputPin signal::Signal ;
StructuredActivityNode ::= ConditionalNode ;
 StructuredActivityNode ::= LoopNode ;
 StructuredActivityNode ::= ExpansionRegion ;
 StructuredActivityNode ::= (variable::Variable)+ (containedNode::ActivityNode)+ (containedEdge::ActivityEdge)+ mustIsolate::Boolean ;
ExpansionNode ::= regionAsOutput::ExpansionRegion regionAsInput::ExpansionRegion ;
PrimitiveFunction ::= body::String language::String ;
Comment ::= body::String (annotatedElement::Element)+ bodyExpression::StringExpression ;
TemplateSignature ::= RedefinableTemplateSignature ;
 TemplateSignature ::= (parameter::TemplateParameter)+ (ownedParameter::TemplateParameter)+ (nestedSignature::TemplateSignature)+ nestingSignature::TemplateSignature template::TemplateableElement ;
ProtocolConformance ::= specificMachine::ProtocolStateMachine generalMachine::ProtocolStateMachine ;
GeneralOrdering ::= before::EventOccurrence after::EventOccurrence ;
ExtensionEnd ::= default::String isComposite::Boolean isDerived::Boolean class_::Class opposite::Property isDerivedUnion::Boolean owningAssociation::Association (redefinedProperty::Property)+ (subsettedProperty::Property)+ datatype::DataType association::Association aggregation::AggregationKind defaultValue::ValueSpecification (qualifier::Property)+ associationEnd::Property ;
Extend ::= extendedCase::UseCase extension::UseCase condition::Constraint (extensionLocation::ExtensionPoint)+ ;
ConnectionPointReference ::= (entry::Pseudostate)+ (exit::Pseudostate)+ ;
OpaqueExpression ::= Expression ;
 OpaqueExpression ::= body::String language::String result::Parameter behavior::Behavior ;
Expression ::= symbol::String (operand::ValueSpecification)+ ;
UseCase ::= (include::Include)+ (extend::Extend)+ (extensionPoint::ExtensionPoint)+ (subject::Classifier)+ ;
PartDecomposition ::= refersTo::Interaction (actualGate::Gate)+ (argument::InputPin)+ ;
ReadLinkObjectEndQualifierAction ::= object::InputPin result::OutputPin qualifier::Property ;
Duration ::= firstTime::Boolean event::NamedElement ;
PackageMerge ::= mergingPackage::Package mergedPackage::Package ;
TemplateParameter ::= OperationTemplateParameter ;
 TemplateParameter ::= ClassifierTemplateParameter ;
 TemplateParameter ::= ConnectableElementTemplateParameter ;
 TemplateParameter ::= signature::TemplateSignature parameteredElement::ParameterableElement ownedParameteredElement::ParameterableElement default::ParameterableElement ownedDefault::ParameterableElement ;
Activity ::= body::String language::String (edge::ActivityEdge)+ (group::ActivityGroup)+ (node::ActivityNode)+ (action::Action)+ (structuredNode::StructuredActivityNode)+ isSingleExecution::Boolean isReadOnly::Boolean ;
ProtocolTransition ::= postCondition::Constraint (referred::Operation)+ preCondition::Constraint ;
ObjectFlow ::= isMulticast::Boolean isMultireceive::Boolean transformation::Behavior selection::Behavior ;
Connector ::= type::Association (redefinedConnector::Connector)+ end::ConnectorEnd kind::ConnectorKind (contract::Behavior)+ ;
LinkEndData ::= LinkEndCreationData ;
 LinkEndData ::= value::InputPin end::Property (qualifier::QualifierValue)+ ;
AddVariableValueAction ::= isReplaceAll::Boolean insertAt::InputPin ;
LinkEndCreationData ::= isReplaceAll::Boolean insertAt::InputPin ;
StringExpression ::= (subExpression::StringExpression)+ owningExpression::StringExpression ;
AcceptEventAction ::= AcceptCallAction ;
 AcceptEventAction ::= (trigger::Trigger)+ (result::OutputPin)+ ;
ReadIsClassifiedObjectAction ::= isDirect::Boolean classifier::Classifier result::OutputPin object::InputPin ;
GeneralizationSet ::= isCovering::Boolean isDisjoint::Boolean powertype::Classifier (generalization::Generalization)+ ;
Package ::= Profile ;
 Package ::= Model ;
 Package ::= (nestedPackage::Package)+ nestingPackage::Package (ownedType::Type)+ (ownedMember::PackageableElement)+ (packageMerge::PackageMerge)+ (appliedProfile::ProfileApplication)+ (packageExtension::PackageMerge)+ ;
DataType ::= Enumeration ;
 DataType ::= PrimitiveType ;
 DataType ::= (ownedAttribute::Property)+ (ownedOperation::Operation)+ ;
Stop ::= (startExec::ExecutionOccurrence)+ (finishExec::ExecutionOccurrence)+ (toAfter::GeneralOrdering)+ (toBefore::GeneralOrdering)+ ;
Port ::= isBehavior::Boolean isService::Boolean (required::Interface)+ (redefinedPort::Port)+ (provided::Interface)+ protocol::ProtocolStateMachine ;
ElementImport ::= visibility::VisibilityKind alias::String importedElement::PackageableElement importingNamespace::Namespace ;
PrimitiveType ::= (ownedAttribute::Property)+ (ownedOperation::Operation)+ ;
ReplyAction ::= replyToCall::CallTrigger (replyValue::InputPin)+ returnInformation::InputPin ;
CallOperationAction ::= operation::Operation target::InputPin ;
Extension ::= isRequired::Boolean metaclass::Class ;
DeploymentSpecification ::= deploymentLocation::String executionLocation::String ;
Slot ::= owningInstance::InstanceSpecification (value::ValueSpecification)+ definingFeature::StructuralFeature ;
SendObjectAction ::= target::InputPin request::InputPin ;
Substitution ::= contract::Classifier substitutingClassifier::Classifier ;
ApplyFunctionAction ::= function::PrimitiveFunction (argument::InputPin)+ (result::OutputPin)+ ;
Generalization ::= specific::Classifier general::Classifier isSubstitutable::Boolean (generalizationSet::GeneralizationSet)+ ;
ExceptionHandler ::= protectedNode::ExecutableNode handlerBody::ExecutableNode exceptionInput::ObjectNode (exceptionType::Classifier)+ ;
ParameterSet ::= (parameter::Parameter)+ (condition::Constraint)+ ;
DurationInterval ::= (min::ValueSpecification)+ (max::ValueSpecification)+ ;
Interface ::= (ownedAttribute::Property)+ (ownedOperation::Operation)+ (redefinedInterface::Interface)+ (nestedClassifier::Classifier)+ (ownedReception::Reception)+ protocol::ProtocolStateMachine ;
AssociationClass ::= (ownedOperation::Operation)+ (superClass::Class)+ (extension::Extension)+ (nestedClassifier::Classifier)+ isActive::Boolean (ownedReception::Reception)+ isDerived::Boolean (ownedEnd::Property)+ (endType::Type)+ memberEnd::Property ;
StateMachine ::= ProtocolStateMachine ;
 StateMachine ::= (region::Region)+ (connectionPoint::Pseudostate)+ extendedStateMachine::StateMachine stateMachine_redefinitionContext::BehavioredClassifier ;
CombinedFragment ::= interactionOperator::InteractionOperator (operand::InteractionOperand)+ (cfragmentGate::Gate)+ ;
Region ::= (subvertex::Vertex)+ (transition::Transition)+ stateMachine::StateMachine state::State extendedRegion::Region ;
CreateObjectAction ::= classifier::Classifier result::OutputPin ;
Lifeline ::= (coveredBy::InteractionFragment)+ represents::ConnectableElement interaction::Interaction selector::OpaqueExpression decomposedAs::PartDecomposition ;
AddStructuralFeatureValueAction ::= isReplaceAll::Boolean insertAt::InputPin ;
Clause ::= (test::ActivityNode)+ (body::ActivityNode)+ (predecessorClause::Clause)+ (successorClause::Clause)+ decider::OutputPin (bodyOutput::OutputPin)+ ;
RedefinableTemplateSignature ::= (redefinitionContext::Classifier)+ isLeaf::Boolean (parameter::TemplateParameter)+ (ownedParameter::TemplateParameter)+ (nestedSignature::TemplateSignature)+ nestingSignature::TemplateSignature template::TemplateableElement ;
TemplateBinding ::= boundElement::TemplateableElement signature::TemplateSignature (parameterSubstitution::TemplateParameterSubstitution)+ ;
TimeTrigger ::= isRelative::Boolean when::ValueSpecification ;
ControlFlow ::= activity::Activity source::ActivityNode target::ActivityNode (inGroup::ActivityGroup)+ guard::ValueSpecification (redefinedElement::ActivityEdge)+ inStructuredNode::StructuredActivityNode (inPartition::ActivityPartition)+ weight::ValueSpecification interrupts::InterruptibleActivityRegion ;
Profile ::= (ownedStereotype::Stereotype)+ (metaclassReference::ElementImport)+ (metamodelReference::PackageImport)+ ;
Parameter ::= operation::Operation default::String direction::ParameterDirectionKind defaultValue::ValueSpecification isException::Boolean isStream::Boolean effect::ParameterEffectKind (parameterSet::ParameterSet)+ ;
ConditionalNode ::= isDeterminate::Boolean isAssured::Boolean (clause::Clause)+ (result::OutputPin)+ ;
Include ::= includingCase::UseCase addition::UseCase ;
QualifierValue ::= qualifier::Property value::InputPin ;
ReadLinkObjectEndAction ::= object::InputPin end::Property result::OutputPin ;
ClearStructuralFeatureAction ::= structuralFeature::StructuralFeature object::InputPin ;
Usage ::= (client::NamedElement)+ (supplier::NamedElement)+ ;
--------------------uml::umldi-2.0.bgf--------------------
Constraint ::= (constrainedElement::ModelElement)+ body::BooleanExpression ;
Attribute ::= associationEnd::AssociationEnd initialValue::Expression ;
ObjectSetExpression ::= language::String body::String ;
LinkObject ::= association::Association connection::LinkEnd ;
TemplateArgument ::= binding::Binding modelElement::ModelElement ;
AssociationRole ::= base::Association (conformingLink::Link)+ (message::Message)+ multiplicity::Multiplicity ;
ArgListsExpression ::= language::String body::String ;
Transition ::= target::StateVertex trigger::Event stateMachine::StateMachine source::StateVertex effect::Action guard::Guard ;
Property ::= key::String value::String ;
Artifact ::= (powertypeRange::Generalization)+ (feature::Feature)+ ;
Interaction ::= (message::Message)+ context::Collaboration ;
Point ::= x::Double y::Double ;
Permission ::= (client::ModelElement)+ (supplier::ModelElement)+ ;
TagDefinition ::= owner::Stereotype tagType::String multiplicity::Multiplicity ;
UseCaseInstance ::= (ownedInstance::Instance)+ (linkEnd::LinkEnd)+ (classifier::Classifier)+ componentInstance::ComponentInstance (slot::AttributeLink)+ (ownedLink::Link)+ ;
Dependency ::= Abstraction ;
 Dependency ::= Usage ;
 Dependency ::= Binding ;
 Dependency ::= Permission ;
 Dependency ::= (client::ModelElement)+ (supplier::ModelElement)+ ;
ClassifierInState ::= (inState::State)+ type::Classifier ;
CompositeState ::= SubmachineState ;
 CompositeState ::= (subvertex::StateVertex)+ isConcurrent::Boolean ;
Message ::= interaction::Interaction (conformingStimulus::Stimulus)+ action::Action communicationConnection::AssociationRole activator::Message receiver::ClassifierRole sender::ClassifierRole (predecessor::Message)+ ;
MappingExpression ::= language::String body::String ;
TimeExpression ::= language::String body::String ;
ObjectFlowState ::= type::Classifier (parameter::Parameter)+ isSynch::Boolean ;
LinkEnd ::= link::Link (qualifiedValue::AttributeLink)+ instance::Instance associationEnd::AssociationEnd ;
Polyline ::= waypoints::BezierPoint closed::Boolean ;
Object ::= LinkObject ;
 Object ::= (ownedInstance::Instance)+ (linkEnd::LinkEnd)+ (classifier::Classifier)+ componentInstance::ComponentInstance (slot::AttributeLink)+ (ownedLink::Link)+ ;
MultiplicityRange ::= multiplicity::Multiplicity lower::Integer upper::Integer ;
Component ::= (deploymentLocation::Node)+ (residentElement::ElementResidence)+ (implementation::Artifact)+ ;
Argument ::= action::Action value::Expression ;
FinalState ::= (deferrableEvent::Event)+ (internalTransition::Transition)+ exit::Action doActivity::Action entry::Action stateMachine::StateMachine ;
ActionState ::= CallState ;
 ActionState ::= isDynamic::Boolean dynamicArguments::ArgListsExpression dynamicMultiplicity::Multiplicity ;
Stimulus ::= (argument::Instance)+ communicationLink::Link receiver::Instance dispatchAction::Action sender::Instance ;
TerminateAction ::= (actualArgument::Argument)+ actionSequence::ActionSequence recurrence::IterationExpression target::ObjectSetExpression isAsynchronous::Boolean script::ActionExpression ;
ClassifierRole ::= (availableContents::ModelElement)+ (base::Classifier)+ (conformingInstance::Instance)+ (availableFeature::Feature)+ multiplicity::Multiplicity ;
Actor ::= (powertypeRange::Generalization)+ (feature::Feature)+ ;
Stereotype ::= (stereotypeConstraint::Constraint)+ (definedTag::TagDefinition)+ icon::String (baseClass::String)+ ;
BezierPoint ::= base::Point control1::Point control2::Point ;
AssociationEndRole ::= base::AssociationEnd (availableQualifier::Attribute)+ collaborationMultiplicity::Multiplicity ;
Flow ::= (source::ModelElement)+ (target::ModelElement)+ ;
DiagramLink ::= graphElement::GraphElement diagram::Diagram zoom::Double viewport::Point ;
Partition ::= (contents::ModelElement)+ activityGraph::ActivityGraph ;
Operation ::= concurrency::CallConcurrencyKind isRoot::Boolean isLeaf::Boolean isAbstract::Boolean specification::String ;
DataValue ::= (ownedInstance::Instance)+ (linkEnd::LinkEnd)+ (classifier::Classifier)+ componentInstance::ComponentInstance (slot::AttributeLink)+ (ownedLink::Link)+ ;
Dimension ::= width::Double height::Double ;
TaggedValue ::= type::TagDefinition (referenceValue::ModelElement)+ modelElement::ModelElement (dataValue::String)+ ;
BooleanExpression ::= language::String body::String ;
Comment ::= (annotatedElement::ModelElement)+ body::String ;
GraphConnector ::= graphElement::GraphElement (graphEdge::GraphEdge)+ position::Point ;
Ellipse ::= center::Point radiusX::Double radiusY::Double rotation::Double startAngle::Double endAngle::Double ;
Image ::= uri::String mimeType::String ;
InteractionInstanceSet ::= interaction::Interaction context::CollaborationInstanceSet (participatingStimulus::Stimulus)+ ;
AssociationEnd ::= AssociationEndRole ;
 AssociationEnd ::= association::Association (specification::Classifier)+ participant::Classifier (qualifier::Attribute)+ isNavigable::Boolean ordering::OrderingKind aggregation::AggregationKind targetScope::ScopeKind multiplicity::Multiplicity changeability::ChangeableKind ;
Extend ::= (extensionPoint::ExtensionPoint)+ extension::UseCase base::UseCase condition::BooleanExpression ;
Expression ::= BooleanExpression ;
 Expression ::= TypeExpression ;
 Expression ::= MappingExpression ;
 Expression ::= ProcedureExpression ;
 Expression ::= ObjectSetExpression ;
 Expression ::= ActionExpression ;
 Expression ::= IterationExpression ;
 Expression ::= TimeExpression ;
 Expression ::= ArgListsExpression ;
 Expression ::= language::String body::String ;
UseCase ::= (include::Include)+ (extend::Extend)+ (extensionPoint::ExtensionPoint)+ ;
IterationExpression ::= language::String body::String ;
Diagram ::= owner::SemanticModelBridge (diagramLink::DiagramLink)+ name::String zoom::Double viewport::Point ;
CallState ::= isDynamic::Boolean dynamicArguments::ArgListsExpression dynamicMultiplicity::Multiplicity ;
ExtensionPoint ::= useCase::UseCase location::String ;
DestroyAction ::= (actualArgument::Argument)+ actionSequence::ActionSequence recurrence::IterationExpression target::ObjectSetExpression isAsynchronous::Boolean script::ActionExpression ;
TemplateParameter ::= template::ModelElement parameter::ModelElement defaultElement::ModelElement ;
Reception ::= signal::Signal specification::String isRoot::Boolean isLeaf::Boolean isAbstract::Boolean ;
CoreSemanticModelBridge ::= diagram::Diagram graphElement::GraphElement presentation::String ;
ProcedureExpression ::= language::String body::String ;
UninterpretedAction ::= (actualArgument::Argument)+ actionSequence::ActionSequence recurrence::IterationExpression target::ObjectSetExpression isAsynchronous::Boolean script::ActionExpression ;
CollaborationInstanceSet ::= collaboration::Collaboration (constrainingElement::ModelElement)+ (participatingInstance::Instance)+ (interactionInstanceSet::InteractionInstanceSet)+ (participatingLink::Link)+ ;
ReturnAction ::= (actualArgument::Argument)+ actionSequence::ActionSequence recurrence::IterationExpression target::ObjectSetExpression isAsynchronous::Boolean script::ActionExpression ;
Collaboration ::= (usedCollaboration::Collaboration)+ representedOperation::Operation representedClassifier::Classifier (interaction::Interaction)+ (constrainingElement::ModelElement)+ ;
SubactivityState ::= isDynamic::Boolean dynamicArguments::ArgListsExpression dynamicMultiplicity::Multiplicity ;
ElementImport ::= package::Package importedElement::ModelElement visibility::VisibilityKind alias::String isSpecification::Boolean ;
Generalization ::= parent::GeneralizableElement powertype::Classifier child::GeneralizableElement discriminator::String ;
Link ::= LinkObject ;
 Link ::= association::Association connection::LinkEnd ;
Interface ::= (powertypeRange::Generalization)+ (feature::Feature)+ ;
AssociationClass ::= connection::AssociationEnd isActive::Boolean ;
StateMachine ::= ActivityGraph ;
 StateMachine ::= context::ModelElement (submachineState::SubmachineState)+ top::State (transitions::Transition)+ ;
AttributeLink ::= instance::Instance value::Instance linkEnd::LinkEnd attribute::Attribute ;
ComponentInstance ::= (resident::Instance)+ nodeInstance::NodeInstance ;
TypeExpression ::= language::String body::String ;
ActionExpression ::= language::String body::String ;
GraphEdge ::= anchor::GraphConnector waypoints::BezierPoint ;
ElementResidence ::= container::Component resident::ModelElement visibility::VisibilityKind ;
Parameter ::= type::Classifier behavioralFeature::BehavioralFeature defaultValue::Expression kind::ParameterDirectionKind ;
Include ::= addition::UseCase base::UseCase ;
Guard ::= transition::Transition expression::BooleanExpression ;
SubsystemInstance ::= (ownedInstance::Instance)+ (linkEnd::LinkEnd)+ (classifier::Classifier)+ componentInstance::ComponentInstance (slot::AttributeLink)+ (ownedLink::Link)+ ;
Usage ::= (client::ModelElement)+ (supplier::ModelElement)+ ;
Method ::= specification::Operation body::ProcedureExpression ;
--------------------uml::umldi-ag.bgf--------------------
MultiplicityRange ::= multiplicity::Multiplicity lower::Integer upper::Integer ;
Argument ::= action::Action value::Expression ;
Generalization ::= parent::GeneralizableElement powertype::Classifier child::GeneralizableElement discriminator::String ;
ActionState ::= CallState ;
 ActionState ::= isDynamic::Boolean dynamicArguments::ArgListsExpression dynamicMultiplicity::Multiplicity ;
FinalState ::= (deferrableEvent::Event)+ (internalTransition::Transition)+ exit::Action doActivity::Action entry::Action stateMachine::StateMachine ;
ObjectSetExpression ::= language::String body::String ;
Expression ::= BooleanExpression ;
 Expression ::= ObjectSetExpression ;
 Expression ::= ActionExpression ;
 Expression ::= IterationExpression ;
 Expression ::= TimeExpression ;
 Expression ::= ArgListsExpression ;
 Expression ::= language::String body::String ;
ArgListsExpression ::= language::String body::String ;
TerminateAction ::= (actualArgument::Argument)+ actionSequence::ActionSequence recurrence::IterationExpression target::ObjectSetExpression isAsynchronous::Boolean script::ActionExpression ;
StateMachine ::= ActivityGraph ;
 StateMachine ::= context::ModelElement (submachineState::SubmachineState)+ top::State (transitions::Transition)+ ;
Transition ::= target::StateVertex trigger::Event stateMachine::StateMachine source::StateVertex effect::Action guard::Guard ;
IterationExpression ::= language::String body::String ;
CallState ::= isDynamic::Boolean dynamicArguments::ArgListsExpression dynamicMultiplicity::Multiplicity ;
DestroyAction ::= (actualArgument::Argument)+ actionSequence::ActionSequence recurrence::IterationExpression target::ObjectSetExpression isAsynchronous::Boolean script::ActionExpression ;
ActionExpression ::= language::String body::String ;
ClassifierInState ::= (inState::State)+ type::Classifier ;
Partition ::= (contents::ModelElement)+ activityGraph::ActivityGraph ;
CompositeState ::= SubmachineState ;
 CompositeState ::= (subvertex::StateVertex)+ isConcurrent::Boolean ;
Parameter ::= type::Classifier behavioralFeature::BehavioralFeature defaultValue::Expression kind::ParameterDirectionKind ;
UninterpretedAction ::= (actualArgument::Argument)+ actionSequence::ActionSequence recurrence::IterationExpression target::ObjectSetExpression isAsynchronous::Boolean script::ActionExpression ;
Operation ::= concurrency::CallConcurrencyKind isRoot::Boolean isLeaf::Boolean isAbstract::Boolean specification::String ;
ReturnAction ::= (actualArgument::Argument)+ actionSequence::ActionSequence recurrence::IterationExpression target::ObjectSetExpression isAsynchronous::Boolean script::ActionExpression ;
Guard ::= transition::Transition expression::BooleanExpression ;
TimeExpression ::= language::String body::String ;
ObjectFlowState ::= type::Classifier (parameter::Parameter)+ isSynch::Boolean ;
SubactivityState ::= isDynamic::Boolean dynamicArguments::ArgListsExpression dynamicMultiplicity::Multiplicity ;
BooleanExpression ::= language::String body::String ;
--------------------uml::umldi-c.bgf--------------------
Attribute ::= associationEnd::AssociationEnd initialValue::Expression ;
InteractionInstanceSet ::= interaction::Interaction context::CollaborationInstanceSet (participatingStimulus::Stimulus)+ ;
ObjectSetExpression ::= language::String body::String ;
AssociationEnd ::= AssociationEndRole ;
 AssociationEnd ::= association::Association (specification::Classifier)+ participant::Classifier (qualifier::Attribute)+ isNavigable::Boolean ordering::OrderingKind aggregation::AggregationKind targetScope::ScopeKind multiplicity::Multiplicity changeability::ChangeableKind ;
LinkObject ::= association::Association connection::LinkEnd ;
Expression ::= BooleanExpression ;
 Expression ::= ObjectSetExpression ;
 Expression ::= ActionExpression ;
 Expression ::= IterationExpression ;
 Expression ::= language::String body::String ;
AssociationRole ::= base::Association (conformingLink::Link)+ (message::Message)+ multiplicity::Multiplicity ;
IterationExpression ::= language::String body::String ;
Interaction ::= (message::Message)+ context::Collaboration ;
DestroyAction ::= (actualArgument::Argument)+ actionSequence::ActionSequence recurrence::IterationExpression target::ObjectSetExpression isAsynchronous::Boolean script::ActionExpression ;
Reception ::= signal::Signal specification::String isRoot::Boolean isLeaf::Boolean isAbstract::Boolean ;
UninterpretedAction ::= (actualArgument::Argument)+ actionSequence::ActionSequence recurrence::IterationExpression target::ObjectSetExpression isAsynchronous::Boolean script::ActionExpression ;
CollaborationInstanceSet ::= collaboration::Collaboration (constrainingElement::ModelElement)+ (participatingInstance::Instance)+ (interactionInstanceSet::InteractionInstanceSet)+ (participatingLink::Link)+ ;
Message ::= interaction::Interaction (conformingStimulus::Stimulus)+ action::Action communicationConnection::AssociationRole activator::Message receiver::ClassifierRole sender::ClassifierRole (predecessor::Message)+ ;
ReturnAction ::= (actualArgument::Argument)+ actionSequence::ActionSequence recurrence::IterationExpression target::ObjectSetExpression isAsynchronous::Boolean script::ActionExpression ;
Collaboration ::= (usedCollaboration::Collaboration)+ representedOperation::Operation representedClassifier::Classifier (interaction::Interaction)+ (constrainingElement::ModelElement)+ ;
LinkEnd ::= link::Link (qualifiedValue::AttributeLink)+ instance::Instance associationEnd::AssociationEnd ;
Object ::= LinkObject ;
 Object ::= (ownedInstance::Instance)+ (linkEnd::LinkEnd)+ (classifier::Classifier)+ componentInstance::ComponentInstance (slot::AttributeLink)+ (ownedLink::Link)+ ;
MultiplicityRange ::= multiplicity::Multiplicity lower::Integer upper::Integer ;
Argument ::= action::Action value::Expression ;
Generalization ::= parent::GeneralizableElement powertype::Classifier child::GeneralizableElement discriminator::String ;
Link ::= LinkObject ;
 Link ::= association::Association connection::LinkEnd ;
Stimulus ::= (argument::Instance)+ communicationLink::Link receiver::Instance dispatchAction::Action sender::Instance ;
ClassifierRole ::= (availableContents::ModelElement)+ (base::Classifier)+ (conformingInstance::Instance)+ (availableFeature::Feature)+ multiplicity::Multiplicity ;
TerminateAction ::= (actualArgument::Argument)+ actionSequence::ActionSequence recurrence::IterationExpression target::ObjectSetExpression isAsynchronous::Boolean script::ActionExpression ;
AttributeLink ::= instance::Instance value::Instance linkEnd::LinkEnd attribute::Attribute ;
ComponentInstance ::= (resident::Instance)+ nodeInstance::NodeInstance ;
AssociationEndRole ::= base::AssociationEnd (availableQualifier::Attribute)+ collaborationMultiplicity::Multiplicity ;
ActionExpression ::= language::String body::String ;
Parameter ::= type::Classifier behavioralFeature::BehavioralFeature defaultValue::Expression kind::ParameterDirectionKind ;
DataValue ::= (ownedInstance::Instance)+ (linkEnd::LinkEnd)+ (classifier::Classifier)+ componentInstance::ComponentInstance (slot::AttributeLink)+ (ownedLink::Link)+ ;
Operation ::= concurrency::CallConcurrencyKind isRoot::Boolean isLeaf::Boolean isAbstract::Boolean specification::String ;
SubsystemInstance ::= (ownedInstance::Instance)+ (linkEnd::LinkEnd)+ (classifier::Classifier)+ componentInstance::ComponentInstance (slot::AttributeLink)+ (ownedLink::Link)+ ;
BooleanExpression ::= language::String body::String ;
--------------------uml::umldi-mm.bgf--------------------
Generalization ::= parent::GeneralizableElement powertype::Classifier child::GeneralizableElement discriminator::String ;
Model ::= (elementImport::ElementImport)+ ;
ElementImport ::= package::Package importedElement::ModelElement visibility::VisibilityKind alias::String isSpecification::Boolean ;
--------------------uml::umldi-sm.bgf--------------------
SimpleState ::= (deferrableEvent::Event)+ (internalTransition::Transition)+ exit::Action doActivity::Action entry::Action stateMachine::StateMachine ;
Argument ::= action::Action value::Expression ;
Generalization ::= parent::GeneralizableElement powertype::Classifier child::GeneralizableElement discriminator::String ;
FinalState ::= (deferrableEvent::Event)+ (internalTransition::Transition)+ exit::Action doActivity::Action entry::Action stateMachine::StateMachine ;
ObjectSetExpression ::= language::String body::String ;
Expression ::= BooleanExpression ;
 Expression ::= ObjectSetExpression ;
 Expression ::= ActionExpression ;
 Expression ::= IterationExpression ;
 Expression ::= TimeExpression ;
 Expression ::= language::String body::String ;
TerminateAction ::= (actualArgument::Argument)+ actionSequence::ActionSequence recurrence::IterationExpression target::ObjectSetExpression isAsynchronous::Boolean script::ActionExpression ;
StateMachine ::= context::ModelElement (submachineState::SubmachineState)+ top::State (transitions::Transition)+ ;
Transition ::= target::StateVertex trigger::Event stateMachine::StateMachine source::StateVertex effect::Action guard::Guard ;
IterationExpression ::= language::String body::String ;
DestroyAction ::= (actualArgument::Argument)+ actionSequence::ActionSequence recurrence::IterationExpression target::ObjectSetExpression isAsynchronous::Boolean script::ActionExpression ;
Reception ::= signal::Signal specification::String isRoot::Boolean isLeaf::Boolean isAbstract::Boolean ;
ActionExpression ::= language::String body::String ;
CompositeState ::= SubmachineState ;
 CompositeState ::= (subvertex::StateVertex)+ isConcurrent::Boolean ;
Parameter ::= type::Classifier behavioralFeature::BehavioralFeature defaultValue::Expression kind::ParameterDirectionKind ;
UninterpretedAction ::= (actualArgument::Argument)+ actionSequence::ActionSequence recurrence::IterationExpression target::ObjectSetExpression isAsynchronous::Boolean script::ActionExpression ;
Operation ::= concurrency::CallConcurrencyKind isRoot::Boolean isLeaf::Boolean isAbstract::Boolean specification::String ;
ReturnAction ::= (actualArgument::Argument)+ actionSequence::ActionSequence recurrence::IterationExpression target::ObjectSetExpression isAsynchronous::Boolean script::ActionExpression ;
TimeExpression ::= language::String body::String ;
Guard ::= transition::Transition expression::BooleanExpression ;
BooleanExpression ::= language::String body::String ;
--------------------uml::umldi-uc.bgf--------------------
MultiplicityRange ::= multiplicity::Multiplicity lower::Integer upper::Integer ;
Generalization ::= parent::GeneralizableElement powertype::Classifier child::GeneralizableElement discriminator::String ;
Attribute ::= associationEnd::AssociationEnd initialValue::Expression ;
UseCaseInstance ::= (ownedInstance::Instance)+ (linkEnd::LinkEnd)+ (classifier::Classifier)+ componentInstance::ComponentInstance (slot::AttributeLink)+ (ownedLink::Link)+ ;
AssociationEnd ::= association::Association (specification::Classifier)+ participant::Classifier (qualifier::Attribute)+ isNavigable::Boolean ordering::OrderingKind aggregation::AggregationKind targetScope::ScopeKind multiplicity::Multiplicity changeability::ChangeableKind ;
Extend ::= (extensionPoint::ExtensionPoint)+ extension::UseCase base::UseCase condition::BooleanExpression ;
Link ::= association::Association connection::LinkEnd ;
Expression ::= BooleanExpression ;
 Expression ::= language::String body::String ;
Include ::= addition::UseCase base::UseCase ;
UseCase ::= (include::Include)+ (extend::Extend)+ (extensionPoint::ExtensionPoint)+ ;
AttributeLink ::= instance::Instance value::Instance linkEnd::LinkEnd attribute::Attribute ;
Actor ::= (powertypeRange::Generalization)+ (feature::Feature)+ ;
ComponentInstance ::= (resident::Instance)+ nodeInstance::NodeInstance ;
ExtensionPoint ::= useCase::UseCase location::String ;
LinkEnd ::= link::Link (qualifiedValue::AttributeLink)+ instance::Instance associationEnd::AssociationEnd ;
BooleanExpression ::= language::String body::String ;
--------------------uml::yuml.bgf--------------------
Cardinality ::= lowerBound::Integer upperBound::Integer ;
ClassDefinition ::= (attributes::Attribute)+ (methods::Method)+ ;
Inheritance ::= source::ClassReference target::ClassReference ;
Model ::= (classes::Class)+ (elements::ModelElement)+ ;
ClassReference ::= class::Class stereotype::String definition::ClassDefinition ;
Association ::= type::AssociationType sourceCardinality::Cardinality sourceLabel::String navigableSource::Boolean sourceVisibility::Visibility targetCardinality::Cardinality targetLabel::String navigableTarget::Boolean targetVisibility::Visibility ;
--------------------xml::rosendal.bgf--------------------
Text ::= startLine::Integer startColumn::Integer endLine::Integer endColumn::Integer name::String value::String parent::Element ;
Attribute ::= startLine::Integer startColumn::Integer endLine::Integer endColumn::Integer name::String value::String parent::Element ;
Root ::= (children::Node)+ ;
--------------------xml::rascal.bgf--------------------
Namespace ::= (namespace::(prefix::string() uri::string())) | (none::ε) ;
Node ::= (document::(root::Node)) | (attribute::(namespace::Namespace name::string() text::string())) | (element::(namespace::Namespace name::string() children::(Node*))) | (charData::(text::string())) | (cdata::(text::string())) | (comment::(text::string())) | (pi::(target::string() text::string())) | (entityRef::(name::string())) | (charRef::(code::integer())) ;
--------------------xml::zhang-cordy.bgf--------------------
children ::= children_body repetition? ;
element ::= (empty_elem_tag spaces) | (tag_content spaces) ;
more_cps ::= spaces "," spaces cp ;
notationtype ::= "NOTATION" spaces "(" spaces name more_names* spaces ")" ;
content ::= spaces chardata* spaces sub1_content* spaces ;
pi ::= "<?" pitarget sub1_pi? "?>" ;
fixed ::= "#FIXED" spaces ;
choice_item ::= spaces "|" spaces cp ;
cp ::= cp_body repetition? ;
sp_external_id ::= spaces external_id ;
dtd_body ::= misc* doctypedecl? ;
notationdecl ::= "<!NOTATION" spaces name spaces exid_or_pubid spaces ">" spaces ;
sub1_content ::= spaces sub2_content spaces chardata* spaces ;
defaultdecl ::= "#REQUIRED" | "#IMPLIED" | (fixed? attvalue) ;
longstringlit ::= """ not_dquote* """ ;
decl ::= markupdecl | ("%" name ";") | spaces ;
attlistdecl ::= "<!ATTLIST" spaces name attdef* spaces ">" spaces ;
elementdecl ::= "<!ELEMENT" spaces name spaces contentspec spaces ">" spaces ;
sub2_pi ::= token "?>" token ;
cdsect ::= "<![CDATA[" cdata* cdend ;
choice ::= "(" spaces cp choice_item choice_item* spaces ")" ;
seq ::= "(" spaces cp more_cps* spaces ")" ;
pedecl ::= "<!ENTITY" spaces "%" spaces name spaces pedef spaces ">" spaces ;
more_names ::= spaces "|" spaces name ;
pcdata ::= "(" spaces "#PCDATA" spaces ")" ;
attribute ::= spaces name "=" attvalue spaces ;
empty_elem_tag ::= "<" name spaces attribute* "/>" ;
exid_sys ::= "SYSTEM" spaces literal ;
doctypedecl ::= "<!DOCTYPE" spaces name spaces sp_external_id? spaces declbody? spaces ">" spaces ;
etag ::= "</" name spaces ">" ;
tag_content ::= stag IN content EX etag ;
exid_or_pubid ::= external_id | ("PUBLIC" spaces literal) ;
declbody ::= "[" decl* "]" ;
exid_pub ::= "PUBLIC" spaces literal spaces literal ;
reference ::= ("&" name ";") | charref ;
gedecl ::= "<!ENTITY" spaces name spaces entitydef spaces ">" spaces ;
stag ::= "<" name spaces attribute* ">" ;
enumeration ::= "(" spaces nmtoken more_nmtokens* spaces ")" ;
sub1_pi ::= spaces token ;
longcharlit ::= "'" not_quote* "'" ;
pcdata_or_name ::= "(" spaces "#PCDATA" more_names* spaces ")*" ;
attdef ::= spaces name spaces atttype spaces defaultdecl ;
program ::= prolog element ;
more_nmtokens ::= spaces "|" spaces nmtoken ;
ndatadecl ::= spaces "NDATA" spaces name ;
entitydef ::= entityvalue | (external_id ndatadecl?) ;
--------------------xquery::rosendal.bgf--------------------
TextNode ::= (nodes::Expression)+ ;
XPath ::= BooleanExp ;
 XPath ::= functionCall::FunctionCall for::For let::Let ;
Let ::= var::String flwor::FLWOR expression::XPath ;
For ::= var::String flwor::FLWOR expression::XPath ;
Expression ::= ExecutableExpression ;
 Expression ::= Node ;
 Expression ::= ReturnXPath ;
 Expression ::= parentNode::ElementNode returnEx::Return ;
Where ::= flwor::FLWOR expression::BooleanExp ;
FunctionCall ::= name::String (parameters::XPath)+ ;
FLWOR ::= for::For let::Let where::Where orderBy::OrderBy return::Return ;
FunctionDeclaration ::= name::String (expression::ExecutableExpression)+ ;
ExecutableExpression ::= FLWOR ;
 ExecutableExpression ::= FunctionCall ;
 ExecutableExpression ::= FunctionDeclaration ;
 ExecutableExpression ::= xQueryProgram::XQueryProgram functionDeclaration::FunctionDeclaration ;
Return ::= flwor::FLWOR (expressions::Expression)+ ;
--------------------xslt::clark.bgf--------------------
attribute-set.element ::= attribute-set::(extension.atts name::qname.datatype (use-attribute-sets::qnames.datatype)? attribute.element*) ;
copy-of.element ::= copy-of::(extension.atts select::expression.datatype) ;
text.element ::= text::(extension.atts (disable-output-escaping::("yes" | "no"))? string()) ;
literal-result-element.atts ::= literal-result-element-no-version.atts (version::version)? ;
include.element ::= include::(extension.atts href::string()) ;
import.element ::= import::(extension.atts href::string()) ;
fallback.element ::= fallback::(extension.atts template.model) ;
key.element ::= key::(extension.atts name::qname.datatype match::pattern.datatype use::expression.datatype) ;
comment.element ::= comment::(extension.atts template.model) ;
sort.element ::= sort::(extension.atts (select::expression.datatype)? (lang::(string() | expr-avt.datatype))? (data-type::("text" | "number" | qname-but-not-ncname.datatype | expr-avt.datatype))? (order::("ascending" | "descending" | expr-avt.datatype))? (case-order::("upper-first" | "lower-first" | expr-avt.datatype))?) ;
namespace-alias.element ::= namespace-alias::(extension.atts stylesheet-prefix::prefix.datatype result-prefix::prefix.datatype) ;
if.element ::= if::(extension.atts test::expression.datatype template.model) ;
attribute.element ::= attribute::(extension.atts name::(qname.datatype | expr-avt.datatype) (namespace::(string() | brace-avt.datatype))? template.model) ;
literal-result-element ::= literal-result-element.atts template.model ;
apply-templates.element ::= apply-templates::(extension.atts (select::expression.datatype)? (mode::qname.datatype)? (sort.element | with-param.element)*) ;
literal-result-element-as-stylesheet ::= version::version literal-result-element-no-version.atts template.model ;
choose.element ::= choose::(extension.atts when.element+ otherwise.element?) ;
processing-instruction.element ::= processing-instruction::(extension.atts name::(string() | expr-avt.datatype) template.model) ;
strip-space.element ::= strip-space::(extension.atts elements::wildcards.datatype) ;
param.element ::= param::(extension.atts name::qname.datatype (select::expression.datatype) | template.model) ;
number.element ::= number::(extension.atts (level::("single" | "multiple" | "any"))? (count::pattern.datatype)? (from::pattern.datatype)? (value::expression.datatype)? (format::avt.datatype)? (lang::(string() | expr-avt.datatype))? (letter-value::("alphabetic" | "traditional" | expr-avt.datatype))? (grouping-separator::(char.datatype | expr-avt.datatype))? (grouping-size::(number.datatype | expr-avt.datatype))?) ;
call-template.element ::= call-template::(extension.atts name::qname.datatype with-param.element*) ;
message.element ::= message::(extension.atts (terminate::("yes" | "no"))? template.model) ;
with-param.element ::= with-param::(extension.atts name::qname.datatype (select::expression.datatype) | template.model) ;
preserve-space.element ::= preserve-space::(extension.atts elements::wildcards.datatype) ;
for-each.element ::= for-each::(extension.atts select::expression.datatype sort.element* template.model) ;
output.element ::= output::(extension.atts (method::("xml" | "html" | "text" | qname-but-not-ncname.datatype))? (version::string())? (encoding::string())? (omit-xml-declaration::("yes" | "no"))? (standalone::("yes" | "no"))? (doctype-public::string())? (doctype-system::string())? (cdata-section-elements::qnames.datatype)? (indent::("yes" | "no"))? (media-type::string())?) ;
element.element ::= element::(extension.atts name::(qname.datatype | expr-avt.datatype) (namespace::(string() | brace-avt.datatype))? (use-attribute-sets::qnames.datatype)? template.model) ;
variable.element ::= variable::(extension.atts name::qname.datatype (select::expression.datatype) | template.model) ;
stylesheet.model ::= extension.atts (id::string())? (extension-element-prefixes::prefixes.datatype)? (exclude-result-prefixes::prefixes.datatype)? version::version import.element* top-level-elements.model ;
when.element ::= when::(extension.atts test::expression.datatype template.model) ;
template.element ::= template::(extension.atts (match::pattern.datatype)? (name::qname.datatype)? (priority::number.datatype)? (mode::qname.datatype)? param.element* template.model) ;
copy.element ::= copy::(extension.atts (use-attribute-sets::qnames.datatype)? template.model) ;
otherwise.element ::= otherwise::(extension.atts template.model) ;
decimal-format.element ::= decimal-format::(extension.atts (name::qname.datatype)? (decimal-separator::char.datatype)? (grouping-separator::char.datatype)? (infinity::string())? (minus-sign::char.datatype)? (NaN::string())? (percent::char.datatype)? (per-mille::char.datatype)? (zero-digit::char.datatype)? (digit::char.datatype)? (pattern-separator::char.datatype)?) ;
value-of.element ::= value-of::(extension.atts select::expression.datatype (disable-output-escaping::("yes" | "no"))?) ;
--------------------xslt::rosendal.bgf--------------------
AttributeNode ::= name::String parentNode::ElementNode ;
Document ::= documentName::String document::RootNode ;
Choose ::= when::When otherwise::Otherwise ;
XSLTRootNode ::= document::Document ;
--------------------logo::sdf.bgf--------------------
Call ::= Id Exp* ;
FunctionDef ::= "to" Id Formal* Block ;
Block ::= "[" Command* "]" ;
Exp ::= Integer | Formal | "xcor" | "ycor" | "heading" | ("towards" Exp Exp) | "pendown?" | ("sum" Exp Exp) | ("difference" Exp Exp) | ("product" Exp Exp) | ("quotient" Exp Exp) | ("remainder" Exp Exp) | ("minus" Exp) | ("less?" Exp Exp) | ("greater?" Exp Exp) | ("equal?" Exp Exp) | ("notequal?" Exp Exp) ;
BasicCommand ::= ("if" Exp Block) | ("ifelse" Exp Block Block) | ("repeat" Exp Block) | ("forward" Exp) | ("back" Exp) | ("left" Exp) | ("right" Exp) | ("setxy" Exp Exp) | ("setx" Exp) | ("sety" Exp) | "home" | "showturtle" | "hideturtle" | "clean" | "clearscreen" | "pendown" | "penup" | ("pencolor" Color) | ("local" QuotedId) | ("make" QuotedId Exp) ;
--------------------php::cordy.bgf--------------------
ConditionalOrExpr ::= ConditionalAndExpr ConditionalOrConditionalAndExpr* ;
ArrowObjectProperty ::= "->" ObjectProperty CallParams? ;
ForEachVar ::= CVar | ("&" CVar) ;
SwitchStatement ::= ("switch" "(" Expr ")" NL "{" ";"? NL IN Case* EX "}" NL) | ("switch" "(" Expr ")" ":" ";"? NL IN Case* EX "endswitch" ";" NL) ;
PHPCloseTag ::= ("?>" NL) | ("%>" NL) ;
IncDecExpr ::= IncDec* Primary IncDec* ;
EqualsStaticScalar ::= "=" StaticScalar ;
PHPOpenTag ::= ("<?php" NL) | ("<?" NL) | ("<%" NL) | ("<?=" NL) ;
ShiftExpr ::= CatExpr ShiftOpCatExpr* ;
InequalityOpShiftExpr ::= InequalityOp ShiftExpr ;
StringConstant ::= stringlit | charlit | CommandString | ("<<<" id IN NL EncapsedInlineHTML* id EX) ;
LogicalXorLogicalAndExpr ::= "xor" LogicalAndExpr ;
BitOrBitXorExpr ::= "|" BitXorExpr ;
PHPCloseTagDocumentSection ::= PHPCloseTag HTMLSection PHPCloseTagDocumentSection? ;
BitXorBitAndExpr ::= "^" BitAndExpr ;
Block ::= "{" NL IN TopStatement* EX "}" NL ;
Param ::= (TypeHint? "&"? TVariable EqualsStaticScalar?) | ("const" TVariable) ;
InlineHTMLStatement ::= PHPCloseTag InlineHTML PHPOpenTag ;
ArrayKey ::= Expr "=>" ;
ForEachPattern ::= ForEachKey? ForEachVar ;
UnsetStatement ::= "unset" "(" {ObjectCVar ","}+ ")" ";" NL ;
MultExpr ::= NotExpr MultOpNotExpr* ;
PHPOpenTagPHPSection ::= PHPOpenTag PHPSection ;
InterfaceDecl ::= "interface" id NL InterfaceExtendsClause? "{" NL IN InterfaceMember* EX NL "}" ;
Primary ::= VariableOrFunctionCall | ScalarConstant | Array | List | InternalFunction | ("(" Expr ")") ;
PrintStatement ::= "print" {Expr ","}+ ";"? NL ;
IfConditionalOrExpr ::= "?" Expr ":" Expr ;
ImplementsClause ::= "implements" {Name ","}+ NL ;
GlobalStaticStatement ::= ("global" {CVar ","}+ ";" NL) | ("static" {StaticVariable ","}+ ";" NL) ;
WhileStatement ::= ("while" "(" Expr ")" NL Statement) | ("while" "(" Expr ")" ":" NL IN TopStatement* EX "endwhile" ";" NL) ;
ExprStatement ::= Expr ";"? NL ;
BitAndEqualityExpr ::= "&" EqualityExpr ;
MultOpNotExpr ::= MultOp NotExpr ;
InternalFunction ::= ("new" Primary) | ("clone" Primary) | ("isset" "(" {ObjectCVar ","}+ ")") | ("empty" "(" ObjectCVar ")") | ("intval" "(" ObjectCVar ")") | ("eval" "(" Expr ")") | ("exit" exit_value?) | ("include" Expr) | ("include_once" Expr) | ("require" Expr) | ("require_once" Expr) ;
ObjectProperty ::= VariableName | IdOrKey | (ObjectProperty VariableExtension) | ObjectCVar ;
InequalityExpr ::= ShiftExpr InequalityOpShiftExpr* ;
ConditionalAndBitOrExpr ::= "&&" BitOrExpr ;
AssignOpAssignmentExpr ::= AssignOp AssignmentExpr ;
InstanceVariable ::= TVariable EqualsStaticScalar? ;
ScalarConstant ::= (PlusMinus? NumericConstant) | StringConstant | MagicConstant | BooleanConstant | "null" ;
UnaryOp ::= "~" | "-" | "@" | ("(" CastType ")") | ("@" "!") ;
TernaryExpr ::= ConditionalOrExpr IfConditionalOrExpr* ;
Case ::= ("case" Expr CaseSeparator NL IN TopStatement* EX) | ("default" CaseSeparator NL IN TopStatement* EX) ;
ConditionalOrConditionalAndExpr ::= "||" ConditionalAndExpr ;
InterfaceExtendsClause ::= "extends" {Name ","}+ ;
CatExpr ::= AddExpr CatAddExpr* ;
InstanceExpr ::= UnaryExpr InstanceOfUnaryExpr? ;
ThrowStatement ::= "throw" Expr ";" NL ;
NotExpr ::= "!"* InstanceExpr ;
ExtendsClause ::= "extends" id NL ;
VariableName ::= SimpleVariableName | ("$" VariableName) | ("{" SimpleVariableName "}") | ("{" Expr "}") ;
ReferenceVariable ::= CompoundVariable VariableExtension* ;
LogicalXorExpr ::= LogicalAndExpr LogicalXorLogicalAndExpr* ;
ForStatement ::= ("for" "(" {Expr ","}* ";" {Expr ","}* ";" {Expr ","}* ")" NL Statement) | ("for" "(" {Expr ","}* ";" {Expr ","}* ";" {Expr ","}* ")" ":" NL IN Statement* EX "endfor" ";" NL) ;
BitOrExpr ::= BitXorExpr BitOrBitXorExpr* ;
DeclareStatement ::= "declare" "(" Directive* ")" NL Statement ;
ForEachStatement ::= ("foreach" "(" Expr "as" ForEachPattern ")" NL Statement) | ("foreach" "(" Expr "as" ForEachPattern ")" ":" NL IN Statement* EX "endforeach" ";" NL) ;
ObjectCVar ::= ClassNameColonColon? CVar CallParams? ArrowObjectProperty* ;
BitXorExpr ::= BitAndExpr BitXorBitAndExpr* ;
LogicalAndExpr ::= AssignmentExpr LogicalAndAssignmentExpr* ;
FunctionDecl ::= "function" "&"? id "(" {Param ","}* ")" NL Block ;
LogicalOrExpr ::= LogicalXorExpr OrLogicalXorExpr* ;
BitAndExpr ::= EqualityExpr BitAndEqualityExpr* ;
List ::= "list" "(" {ListElem ","}* ")" ;
Document ::= (PHPOpenTag? PHPSection PHPCloseTagDocumentSection?) | (HTMLSection PHPOpenTagPHPSection? PHPCloseTagDocumentSection?) ;
Array ::= "array" "(" IN {ArrayPair ","}* ","? EX ")" ;
ElseIfStatement ::= "elseif" "(" Expr ")" NL Statement ;
ArrayValue ::= Expr | ("&" ObjectCVar) ;
InstanceOfUnaryExpr ::= "instanceof" UnaryExpr ;
tag_attribute ::= SP xml_colon? id_or_key "=" token ;
ForEachKey ::= ForEachVar "=>" ;
ArrayPair ::= NL ArrayKey? ArrayValue ;
ControlStatement ::= ("break" Expr? ";" NL) | ("continue" Expr? ";" NL) | ("return" Expr? ";" NL) ;
ClassType ::= "class" | ("abstract" "class") | ("final" "class") ;
IfStatement ::= ("if" "(" Expr ")" NL Statement ElseIfStatement* ElseStatement?) | ("if" "(" Expr ")" ":" NL IN TopStatement* EX AltElseifStatement* AltElseStatement? "endif" ";" NL) ;
AltElseifStatement ::= "elseif" "(" Expr ")" ":" NL IN TopStatement* EX ;
LogicalAndAssignmentExpr ::= "and" AssignmentExpr ;
CallParam ::= "&"? Expr ;
EqualityOpInequalityExpr ::= EqualityOp InequalityExpr ;
EqualityExpr ::= InequalityExpr EqualityOpInequalityExpr* ;
AltElseStatement ::= "else" ":" NL IN TopStatement* EX ;
EchoStatement ::= "echo" {Expr ","}+ ";"? NL ;
StaticVariable ::= TVariable EqualsStaticScalar? ;
AddOpMultExpr ::= AddOp MultExpr ;
id_or_key ::= (id "-"? id?) | key ;
ConditionalAndExpr ::= BitOrExpr ConditionalAndBitOrExpr* ;
CallParams ::= "(" {CallParam ","}* ")" ;
UnaryExpr ::= UnaryOp* IncDecExpr ;
ClassNameColonColon ::= ClassName "::" ;
ClassDecl ::= ClassType id NL ExtendsClause? ImplementsClause? "{" NL IN ClassMember* EX "}" NL ;
CatAddExpr ::= "." AddExpr ;
Catch ::= "catch" "(" id TVariable ")" NL Block ;
tag ::= ("<" SPOFF bigtag_id tag_attribute* ">" SPON IN NL) | (EX FL "<" SPOFF "/" bigtag_id ">" SPON FL) | ("<" SPOFF "!"? id_or_key tag_attribute* ">" SPON NL) | ("<" SPOFF "/" id_or_key ">" SPON NL) | ("<" SPOFF id_or_key tag_attribute* "/>" SPON NL) ;
SimpleVariableName ::= id | ("$" SPOFF IdOrKey SPON) ;
AddExpr ::= MultExpr AddOpMultExpr* ;
ElseStatement ::= "else" NL Statement ;
TryStatement ::= "try" NL Block Catch* ;
InterfaceMember ::= VarModifiers? "function" "&"? id "(" {Param ","}* ")" ";" NL ;
ClassMember ::= (VarModifiers? FunctionDecl) | (VarModifiers? "abstract" VarModifiers? "function" "&"? id "(" {Param ","}* ")" ";" NL) | ("var" {InstanceVariable ","}+ ";" NL) | ("const" id "=" StaticScalar ";" NL) | (VarModifiers {InstanceVariable ","}+ ";" NL) ;
exit_value ::= "(" Expr? ")" ;
tag_token_or_key ::= tag | (";" NL) | token | key ;
OrLogicalXorExpr ::= "or" LogicalXorExpr ;
ShiftOpCatExpr ::= ShiftOp CatExpr ;
NullStatement ::= ";" NL ;
DoStatement ::= "do" NL Statement "while" "(" Expr ")" ";" NL ;
VariableExtension ::= ("[" Expr? "]") | ("{" Expr "}") ;
AssignmentExpr ::= TernaryExpr AssignOpAssignmentExpr* ;
--------------------python::indent-cordy.bgf--------------------
indent ::= SP "INDENT" ;
compound ::= ("{" compoundtoken* "}") | ("[" compoundtokensquare* "]") | ("(" compoundtokenround* ")") ;
dedent ::= "DEDENT" SP ;
endofline ::= tab_space* comment? newline ;
line ::= tab_space* linetoken* indent? endofline+ dedent* ;
--------------------python::sorochan-cordy.bgf--------------------
stringliteral ::= (stringprefix SPOFF string SPON) | string ;
not_test ::= "not"* endofline* comparison ;
for_stmt ::= "for" exprlist "in" testlist ":" suite else_clause? ;
long ::= (SPOFF "l" SPON) | (SPOFF "L" SPON) ;
del_stmt ::= "del" exprlist ;
lambdef ::= "lambda" varargslist? ":" test ;
fpdef ::= (id endofline?) | (SPOFF "(" SPON fplist endofline* ")" endofline?) ;
and_test ::= not_test andop_and_test? ;
testplist_gexp ::= (test+ endofline? ","?) | (test endofline? gen_for) ;
suite ::= (indent endofline stmt_or_newline+ dedent) | (simple_stmt endofline) ;
except_test ::= test as_or_comma_test? ;
as_name ::= "as" id ;
comp_op_comparison ::= endofline* comp_op endofline* comparison ;
return_stmt ::= "return" testlist? ;
decorated ::= (decorators classdef) | (decorators funcdef) ;
expr ::= xor_expr orop_expr? ;
arglist ::= star_test? {argument ","}* comma_opt_star_test? ;
if_test ::= endofline* "if" or_test "else" test ;
sliceop ::= ":" test? ;
decorator_arglist ::= SPOFF "(" SPON IN arglist? endofline* ")" EX ;
argument_value ::= (endofline* gen_for?) | ("=" endofline* test) ;
plist_if ::= "if" old_test plist_iter? ;
shiftop_shift_expr ::= endofline? shift_op endofline? shift_expr ;
or_test ::= and_test orop_or_test? ;
gen_if ::= "if" old_test gen_iter? ;
term ::= factor op_term* ;
in_test ::= "in" test ;
is_expr ::= "=" endofline* assign_value ;
parameters ::= SPOFF "(" SPON varargslist? endofline* ")" ;
comma_opt_star_test ::= "," star_test? comma_opt_star_test? ;
fplist ::= fpdef+ ","? ;
yield_expr ::= "yield" testlist ;
listmaker ::= (endofline* test endofline* plist_for endofline*) | (endofline* {test ","}* ","? endofline*) ;
endofline ::= comment? newline ;
import_name ::= "import" dotted_as_names ;
global_stmt ::= "global" id+ ;
old_lambdef ::= "lambda" varargslist? ":" old_test ;
dotted_as_name ::= dotted_name as_id? ;
andop_and_test ::= endofline* "and" endofline* and_test ;
star_test ::= (endofline* "*" test) | (endofline* "**" test) ;
import_as_name ::= endofline* id as_name? ;
and_expr ::= shift_expr andop_and_expr? ;
gen_for ::= "for" exprlist "in" or_test gen_iter? ;
xor_expr ::= and_expr xorop_expr? ;
xorop_expr ::= endofline* "^" endofline* xor_expr ;
fpdef_test ::= endofline* fpdef is_test? endofline? ;
except_clause ::= "except" except_test? ;
import_as_names ::= import_as_name+ ","? ;
floatliteral ::= (number imag?) | (pointfloat imag?) ;
expr_stmt ::= (testlist is_expr*) | (testlist augassign assign_value) ;
atom ::= id | literal | ("(" IN endofline* yield_expr? endofline* ")" EX) | ("(" IN endofline* testplist_gexp endofline* ")" EX) | ("[" IN endofline* listmaker? "]" EX) | ("{" IN endofline* dictmaker? endofline* "}" EX) | ("`" testlist1 "`") ;
orop_expr ::= endofline* "|" endofline* expr ;
factor ::= unary_op* power ;
dictmaker ::= {dict_entry ","}* endofline* ","? endofline* ;
semicolon_small_stmt ::= ";" small_stmt ;
try_stmt ::= "try" ":" suite except_clause_suite* else_clause? finally_clause? ;
as_or_comma_test ::= ("as" test) | ("," test) ;
imag ::= (SPOFF "j" SPON) | (SPOFF "J" SPON) ;
stmt ::= (simple_stmt endofline) | compound_stmt ;
as_id ::= "as" id ;
andop_and_expr ::= endofline* "&" endofline* and_expr ;
funcdef ::= "def" id parameters ":" suite ;
argument ::= endofline* test argument_value? endofline* ;
comma_test ::= endofline? "," test ;
raise_stmt ::= "raise" test_list? ;
decorator ::= "@" dotted_name decorator_arglist? endofline endofline* ;
exec_stmt ::= "exec" expr in_test? comma_test? ;
else_clause ::= "else" ":" suite ;
simple_stmt ::= (small_stmt semicolon_small_stmt* ";"?) | comment ;
trailer ::= (SPOFF "(" SPON IN arglist endofline* ")" EX) | ("[" IN subscriptlist "]" EX) | (endofline* "." endofline* id) ;
orop_or_test ::= endofline* "or" endofline* or_test ;
integerliteral ::= integer long? imag? ;
exp_factor ::= "**" factor ;
testlist ::= test+ endofline* ","? ;
testplist_safe ::= old_test+ ","? ;
literal ::= (stringliteral more_stringliteral*) | integerliteral | floatliteral ;
with_var ::= "as" expr ;
indent ::= "INDENT" IN ;
fpdef_test_comma ::= fpdef_test "," ;
finally_clause ::= "finally" ":" suite ;
test_list ::= test comma_test? comma_test? ;
if_stmt ::= "if" test ":" suite elif_clause* else_clause? ;
plist_iter ::= (endofline* plist_for) | (endofline* plist_if) ;
dict_entry ::= endofline* test ":" endofline* test ;
subscriptlist ::= subscript+ "," endofline* ;
gen_iter ::= (endofline* gen_for) | (endofline* gen_if) ;
op_arith_expr ::= endofline* arith_op endofline* arith_expr ;
import_items ::= "*" | (endofline* SPOFF "(" SPON import_as_names endofline* ")") | (endofline* import_as_names) ;
varargslist ::= (fpdef_test_comma* endofline* "*" id) | (fpdef_test_comma* endofline* "*" id endofline? "," endofline* "**" id) | (fpdef_test_comma* endofline* "**" id) | (fpdef_test+ ","?) ;
with_stmt ::= "with" test with_var? ":" suite ;
assert_stmt ::= "assert" test comma_test? ;
print_stmt ::= "print" ">>"? {test ","}* ","? ;
plist_for ::= "for" endofline* exprlist "in" testplist_safe plist_iter? ;
while_stmt ::= "while" test ":" suite else_clause? ;
more_stringliteral ::= endofline* stringliteral ;
exprlist ::= expr+ endofline* ","? ;
shift_expr ::= arith_expr shiftop_shift_expr* ;
test ::= (endofline* or_test if_test? endofline?) | (endofline* lambdef endofline?) ;
comp_op ::= "<" | ">" | "==" | ">=" | "<=" | "<>" | "!=" | "in" | ("not" "in") | "is" | ("is" "not") ;
except_clause_suite ::= except_clause ":" suite ;
classdef ::= ("class" id? ":" suite) | ("class" id? SPOFF "(" SPON testlist? endofline* ")" ":" suite) ;
subscript ::= (endofline* "." "." "." endofline?) | (endofline* test endofline?) | (endofline* test? ":" test? sliceop? endofline?) ;
op_term ::= endofline* term_op endofline* term ;
elif_clause ::= "elif" test ":" suite ;
dot_dotted_name ::= endofline* "." endofline* dotted_name ;
comparison ::= expr comp_op_comparison? ;
arith_expr ::= term op_arith_expr* ;
dedent ::= "DEDENT" EX ;
is_test ::= "=" endofline* test ;
power ::= atom trailer* exp_factor? ;
import_from ::= "from" "."* dotted_name? endofline* "import" import_items ;
dotted_name ::= id dot_dotted_name? ;
--------------------markup::atom.bgf--------------------
InLineXHTMLContent ::= type::String ;
Date ::= day::Integer month::Integer year::Integer hours::Integer minutes::Integer seconds::Integer ;
Category ::= term::String scheme::String label::String ;
Contributor ::= name::String uri::String email::String ;
Author ::= name::String uri::String email::String ;
Source ::= id::String icon::String logo::String rights::String title::String subtitle::String (links::Link)+ lastUpdate::Date generator::Generator (contributors::Contributor)+ (categories::Category)+ author::Author ;
Link ::= href::String rel::String type::String hreflang::String title::String lenght::Integer ;
Person ::= Author ;
 Person ::= Contributor ;
 Person ::= name::String uri::String email::String ;
Generator ::= uri::String version::String ;
InLineOtherContent ::= type::String ;
Entry ::= title::String id::String rights::String summary::String (links::Link)+ source::Source published::Date lastUpdate::Date content::Content (categories::Category)+ (authors::Author)+ (contibutors::Contributor)+ atom::ATOM ;
ATOM ::= title::String id::String subtitle::String rights::String icon::String logo::String (links::Link)+ lastUpdate::Date generator::Generator (categories::Category)+ (authors::Author)+ (contibutors::Contributor)+ (entries::Entry)+ ;
--------------------markup::cnf.bgf--------------------
Dimacs ::= prologue::Prologue lines::({Line "\n"}+) "\n" ;
--------------------markup::ebxml.bgf--------------------
BusinessTransaction ::= pattern::String isGuaranteedDeliveryRequired::Boolean preCondition::String postCondition::String beginsWhen::String endsWhen::String requester::RequestingBusinessActivity responder::RespondingBusinessActivity ;
Transaction ::= onInitiation::String conditionGuard::String conditionExpression::String from::BusinessState to::BusinessState ;
BusinessPartnerRole ::= collaboration::MultyPartyCollaboration transition::Transaction (performers::Performs)+ ;
BusinessTransactionActivity ::= timeToPerform::String isConcurrent::Boolean isLegallyBinding::Boolean use::BusinessTransaction ;
RespondingBusinessActivity ::= transaction::BusinessTransaction documentEnvelope::DocumentEnvelope ;
BusinessDocument ::= specificationLocation::String specificationElement::String conditionExpression::String (envelopes::DocumentEnvelope)+ (attachments::Attachment)+ ;
DocumentEnvelope ::= isPositiveResponse::Boolean requesting::RequestingBusinessActivity responding::RespondingBusinessActivity (attachements::Attachment)+ document::BusinessDocument ;
Failure ::= guardCondition::String ;
Join ::= collaboration::BinaryCollaboration from::AuthorizedRole to::AuthorizedRole ;
BinaryCollaboration ::= pattern::String timeToPerform::String preCondition::String postCondition::String beginsWhen::String endsWhen::String (roles::Performs)+ (transitions::Transaction)+ (states::BusinessState)+ ;
Attachment ::= mimeType::String specification::String version::String envelope::DocumentEnvelope document::BusinessDocument ;
Success ::= guardCondition::String ;
RequestingBusinessActivity ::= timeToAcknowledgeAcceptance::String transaction::BusinessTransaction documentEnvelope::DocumentEnvelope ;
Start ::= collaboration::BinaryCollaboration from::AuthorizedRole to::AuthorizedRole ;
Performs ::= performedBy::BusinessPartnerRole collaboration::BinaryCollaboration role::AuthorizedRole ;
AuthorizedRole ::= isInitiator::Boolean (performers::Performs)+ ;
--------------------markup::docbook-walsh.bgf--------------------
subject.attlist ::= (weight::string())? common.attrib subject.role.attrib local.subject.attrib ;
pubdate.attlist ::= common.attrib pubdate.role.attrib local.pubdate.attrib ;
sect1info ::= sect1info::(sect1info.attlist info.class+) ;
link ::= link::(link.attlist para.char.mix*) ;
productname ::= productname::(productname.attlist para.char.mix*) ;
synopfragment ::= synopfragment::(synopfragment.attlist (arg | group)+) ;
qandaentry ::= qandaentry::(qandaentry.attlist blockinfo? revhistory? question answer*) ;
errorcode ::= errorcode::(errorcode.attlist smallcptr.char.mix*) ;
address ::= address::(address.attlist (string() | personname | person.ident.mix | street | pob | postcode | city | state | country | phone | fax | email | otheraddr)*) ;
mediaobject.attlist ::= common.attrib mediaobject.role.attrib local.mediaobject.attrib ;
part ::= part::(part.attlist beginpage? partinfo? bookcomponent.title.content partintro? partcontent.mix+) ;
note ::= note::(note.attlist title? admon.mix+) ;
artpagenums.attlist ::= common.attrib artpagenums.role.attrib local.artpagenums.attrib ;
itermset ::= itermset::(itermset.attlist indexterm+) ;
programlistingco ::= programlistingco::(programlistingco.attlist areaspec programlisting calloutlist*) ;
screeninfo.attlist ::= common.attrib screeninfo.role.attrib local.screeninfo.attrib ;
inlinemediaobject ::= inlinemediaobject::(inlinemediaobject.attlist objectinfo? mediaobject.mix+) ;
refmeta.attlist ::= common.attrib refmeta.role.attrib local.refmeta.attrib ;
mousebutton.attlist ::= moreinfo.attrib common.attrib mousebutton.role.attrib local.mousebutton.attrib ;
question ::= question::(question.attlist label? qandaset.mix+) ;
biblioid.attlist ::= biblio.class.attrib common.attrib biblioid.role.attrib local.biblioid.attrib ;
structname ::= structname::(structname.attlist smallcptr.char.mix*) ;
para ::= para::(para.attlist (para.char.mix | para.mix)*) ;
pubsnumber ::= pubsnumber::(pubsnumber.attlist docinfo.char.mix*) ;
modespec ::= modespec::(modespec.attlist docinfo.char.mix*) ;
bibliomset.attlist ::= (relation::string())? common.attrib bibliomset.role.attrib local.bibliomset.attrib ;
computeroutput ::= computeroutput::(computeroutput.attlist (cptr.char.mix | co)*) ;
revision ::= revision::(revision.attlist revnumber date authorinitials* (revremark | revdescription)?) ;
othercredit.attlist ::= common.attrib othercredit.role.attrib local.othercredit.attrib ;
function ::= function::(function.attlist cptr.char.mix*) ;
equation.content ::= alt? (graphic+) | (mediaobject+) ;
spanspec.attlist ::= namest::string() nameend::string() spanname::string() (colsep::yesorno)? (rowsep::yesorno)? (align::("left" | "right" | "center" | "justify" | "char"))? (char::string())? (charoff::string())? ;
classname.attlist ::= common.attrib classname.role.attrib local.classname.attrib ;
authorgroup ::= authorgroup::(authorgroup.attlist (author | editor | collab | corpauthor | othercredit)+) ;
street.attlist ::= common.attrib street.role.attrib local.street.attrib ;
sbr.attlist ::= common.attrib sbr.role.attrib local.sbr.attrib ;
mediaobjectco ::= mediaobjectco::(mediaobjectco.attlist objectinfo? imageobjectco (imageobjectco | textobject)*) ;
sect3info.attlist ::= common.attrib sect3info.role.attrib local.sect3info.attrib ;
table ::= table::(table.attlist tbl.table.mdl) ;
glossaryinfo ::= glossaryinfo::(glossaryinfo.attlist info.class+) ;
informaltable.attlist ::= (frame::("top" | "bottom" | "topbot" | "all" | "sides" | "none"))? (colsep::yesorno.attvals)? (rowsep::yesorno.attvals)? common.table.attribs tbl.table.att local.informaltable.attrib ;
refsect3info ::= refsect3info::(refsect3info.attlist info.class+) ;
refentrytitle.attlist ::= common.attrib refentrytitle.role.attrib local.refentrytitle.attrib ;
token.attlist ::= common.attrib token.role.attrib local.token.attrib ;
productnumber.attlist ::= common.attrib productnumber.role.attrib local.productnumber.attrib ;
qandaentry.attlist ::= common.attrib qandaentry.role.attrib local.qandaentry.attrib ;
sgmltag ::= sgmltag::(sgmltag.attlist smallcptr.char.mix*) ;
isbn.attlist ::= common.attrib isbn.role.attrib local.isbn.attrib ;
copyright ::= copyright::(copyright.attlist year+ holder*) ;
part.attlist ::= label.attrib status.attrib common.attrib part.role.attrib local.part.attrib ;
refsection.attlist ::= status.attrib common.attrib refsection.role.attrib local.refsection.attrib ;
lotentry ::= lotentry::(lotentry.attlist para.char.mix*) ;
menuchoice ::= menuchoice::(menuchoice.attlist shortcut? (guibutton | guiicon | guilabel | guimenu | guimenuitem | guisubmenu | interface)+) ;
refentry ::= refentry::(refentry.attlist beginpage? ndxterm.class* refentryinfo? refmeta? (remark | link.char.class)* refnamediv refsynopsisdiv? (refsect1+) | (refsection+)) ;
answer ::= answer::(answer.attlist label? qandaset.mix* qandaentry*) ;
glossdef ::= glossdef::(glossdef.attlist glossdef.mix+ glossseealso*) ;
keyword.attlist ::= common.attrib keyword.role.attrib local.keyword.attrib ;
accel.attlist ::= common.attrib accel.role.attrib local.accel.attrib ;
refsynopsisdivinfo ::= refsynopsisdivinfo::(refsynopsisdivinfo.attlist info.class+) ;
subjectset ::= subjectset::(subjectset.attlist subject+) ;
initializer.attlist ::= common.attrib initializer.role.attrib local.initializer.attrib ;
tfoot.attlist ::= (valign::("top" | "middle" | "bottom"))? secur ;
confdates.attlist ::= common.attrib confdates.role.attrib local.confdates.attrib ;
tocfront.attlist ::= label.attrib linkend.attrib pagenum.attrib common.attrib tocfront.role.attrib local.tocfront.attrib ;
pubsnumber.attlist ::= common.attrib pubsnumber.role.attrib local.pubsnumber.attrib ;
funcprototype.attlist ::= common.attrib funcprototype.role.attrib local.funcprototype.attrib ;
msginfo ::= msginfo::(msginfo.attlist (msglevel | msgorig | msgaud)*) ;
date ::= date::(date.attlist docinfo.char.mix*) ;
manvolnum ::= manvolnum::(manvolnum.attlist word.char.mix*) ;
invpartnumber ::= invpartnumber::(invpartnumber.attlist docinfo.char.mix*) ;
revision.attlist ::= common.attrib revision.role.attrib local.revision.attrib ;
keywordset.attlist ::= common.attrib keywordset.role.attrib local.keywordset.attrib ;
parameter ::= parameter::(parameter.attlist cptr.char.mix*) ;
glosslist ::= glosslist::(glosslist.attlist glossentry+) ;
property.attlist ::= moreinfo.attrib common.attrib property.role.attrib local.property.attrib ;
constant ::= constant::(constant.attlist smallcptr.char.mix*) ;
mediaobjectco.attlist ::= common.attrib mediaobjectco.role.attrib local.mediaobjectco.attrib ;
keycode.attlist ::= common.attrib keycode.role.attrib local.keycode.attrib ;
email ::= email::(email.attlist docinfo.char.mix*) ;
refsect3info.attlist ::= common.attrib refsect3info.role.attrib local.refsect3info.attrib ;
warning ::= warning::(warning.attlist title? admon.mix+) ;
appendix.attlist ::= label.attrib status.attrib common.attrib appendix.role.attrib local.appendix.attrib ;
sgmltag.attlist ::= (class::("attribute" | "attvalue" | "element" | "endtag" | "emptytag" | "genentity" | "numcharref" | "paramentity" | "pi" | "xmlpi" | "starttag" | "sgmlcomment"))? common.attrib sgmltag.role.attrib local.sgmltag.attrib ;
copyright.attlist ::= common.attrib copyright.role.attrib local.copyright.attrib ;
ooclass ::= ooclass::(ooclass.attlist modifier* classname) ;
subjectterm ::= subjectterm::(subjectterm.attlist string()) ;
country ::= country::(country.attlist docinfo.char.mix*) ;
refentry.attlist ::= status.attrib common.attrib refentry.role.attrib local.refentry.attrib ;
msgaud ::= msgaud::(msgaud.attlist para.char.mix*) ;
constructorsynopsis ::= constructorsynopsis::(constructorsynopsis.attlist modifier* methodname? (methodparam+) | void exceptionname*) ;
pagenums.attlist ::= common.attrib pagenums.role.attrib local.pagenums.attrib ;
graphics.attrib ::= (entityref::string())? (fileref::string())? (format::notation.class)? (srccredit::string())? (width::string())? (contentwidth::string())? (depth::string())? (contentdepth::string())? (align::("left" | "right" | "center"))? (valign::("top" | "middle" | "bottom"))? (scale::string())? (scalefit::yesorno.attvals)? local.graphics.attrib ;
glossdef.attlist ::= (subject::string())? common.attrib glossdef.role.attrib local.glossdef.attrib ;
dedication.attlist ::= status.attrib common.attrib dedication.role.attrib local.dedication.attrib ;
corpauthor.attlist ::= common.attrib corpauthor.role.attrib local.corpauthor.attrib ;
imagedata ::= imagedata::(imagedata.attlist ε) ;
msg ::= msg::(msg.attlist title? msgmain (msgsub | msgrel)*) ;
programlisting ::= programlisting::(programlisting.attlist (para.char.mix | co | coref | lineannotation | textobject)*) ;
remark ::= remark::(remark.attlist para.char.mix*) ;
preface ::= preface::(preface.attlist beginpage? prefaceinfo? bookcomponent.title.content nav.class* tocchap? bookcomponent.content nav.class*) ;
msginfo.attlist ::= common.attrib msginfo.role.attrib local.msginfo.attrib ;
sect2info ::= sect2info::(sect2info.attlist info.class+) ;
videoobject ::= videoobject::(videoobject.attlist objectinfo? videodata) ;
alt.attlist ::= common.attrib alt.role.attrib local.alt.attrib ;
revdescription ::= revdescription::(revdescription.attlist revdescription.mix+) ;
personblurb.attlist ::= common.attrib personblurb.role.attrib local.personblurb.attrib ;
glossterm ::= glossterm::(glossterm.attlist para.char.mix*) ;
confsponsor ::= confsponsor::(confsponsor.attlist docinfo.char.mix*) ;
informalequation.attlist ::= common.attrib informalequation.role.attrib local.informalequation.attrib ;
orgname ::= orgname::(orgname.attlist docinfo.char.mix*) ;
primaryie.attlist ::= linkends.attrib common.attrib primsecterie.role.attrib local.primsecterie.attrib ;
refsect3.attlist ::= status.attrib common.attrib refsect3.role.attrib local.refsect3.attrib ;
tocchap.attlist ::= label.attrib common.attrib tocchap.role.attrib local.tocchap.attrib ;
seealso.attlist ::= common.attrib seeseealso.role.attrib local.seeseealso.attrib ;
member.attlist ::= common.attrib member.role.attrib local.member.attrib ;
caution ::= caution::(caution.attlist title? admon.mix+) ;
bibliosource.attlist ::= biblio.class.attrib common.attrib bibliosource.role.attrib local.bibliosource.attrib ;
bibliography ::= bibliography::(bibliography.attlist bibliographyinfo? bookcomponent.title.content? component.mix* (bibliodiv+) | ((biblioentry | bibliomixed)+)) ;
msgentry.attlist ::= common.attrib msgentry.role.attrib local.msgentry.attrib ;
citetitle ::= citetitle::(citetitle.attlist para.char.mix*) ;
optional ::= optional::(optional.attlist cptr.char.mix*) ;
personname ::= personname::(personname.attlist (honorific | firstname | surname | lineage | othername)+) ;
msgaud.attlist ::= common.attrib msgaud.role.attrib local.msgaud.attrib ;
sidebar ::= sidebar::(sidebar.attlist sidebarinfo? formalobject.title.content? sidebar.mix+) ;
exceptionname ::= exceptionname::(exceptionname.attlist smallcptr.char.mix*) ;
oointerface ::= oointerface::(oointerface.attlist modifier* interfacename) ;
varargs.attlist ::= common.attrib varargs.role.attrib local.varargs.attrib ;
audiodata.attlist ::= objectdata.attrib common.attrib audiodata.role.attrib local.audiodata.attrib ;
lot ::= lot::(lot.attlist beginpage? bookcomponent.title.content? lotentry*) ;
indexinfo.attlist ::= common.attrib indexinfo.role.attrib local.indexinfo.attrib ;
glossseealso ::= glossseealso::(glossseealso.attlist para.char.mix*) ;
varlistentry ::= varlistentry::(varlistentry.attlist term+ listitem) ;
equation ::= equation::(equation.attlist blockinfo? formalobject.title.content? informalequation | equation.content) ;
command ::= command::(command.attlist cptr.char.mix*) ;
reference ::= reference::(reference.attlist beginpage? referenceinfo? bookcomponent.title.content partintro? refentry.class+) ;
toclevel4.attlist ::= common.attrib toclevel4.role.attrib local.toclevel4.attrib ;
methodsynopsis.attlist ::= (language::string())? common.attrib methodsynopsis.role.attrib local.methodsynopsis.attrib ;
interfacename ::= interfacename::(interfacename.attlist cptr.char.mix*) ;
orgname.attlist ::= common.attrib (class::("corporation" | "nonprofit" | "consortium" | "informal" | "other"))? (otherclass::string())? orgname.role.attrib local.orgname.attrib ;
editor.attlist ::= common.attrib editor.role.attrib local.editor.attrib ;
co.attlist ::= label.attrib linkends.attrib idreq.common.attrib co.role.attrib local.co.attrib ;
screen.attlist ::= width.attrib linespecific.attrib common.attrib screen.role.attrib local.screen.attrib ;
term.attlist ::= common.attrib term.role.attrib local.term.attrib ;
caution.attlist ::= common.attrib admon.role.attrib local.admon.attrib ;
type ::= type::(type.attlist smallcptr.char.mix*) ;
citebiblioid.attlist ::= biblio.class.attrib common.attrib citebiblioid.role.attrib local.citebiblioid.attrib ;
errortext ::= errortext::(errortext.attlist smallcptr.char.mix*) ;
footnoteref ::= footnoteref::(footnoteref.attlist ε) ;
setindexinfo.attlist ::= common.attrib setindexinfo.role.attrib local.setindexinfo.attrib ;
guimenuitem ::= guimenuitem::(guimenuitem.attlist (smallcptr.char.mix | accel)*) ;
orgdiv ::= orgdiv::(orgdiv.attlist docinfo.char.mix*) ;
funcsynopsis.attlist ::= label.attrib common.attrib funcsynopsis.role.attrib local.funcsynopsis.attrib ;
paramdef.attlist ::= common.attrib paramdef.role.attrib local.paramdef.attrib ;
arg.attlist ::= (choice::("opt" | "req" | "plain"))? (rep::("norepeat" | "repeat"))? common.attrib arg.role.attrib local.arg.attrib ;
thead.attlist ::= (valign::("top" | "middle" | "bottom"))? secur ;
segtitle ::= segtitle::(segtitle.attlist title.char.mix*) ;
sect5.attlist ::= (renderas::("sect1" | "sect2" | "sect3" | "sect4"))? label.attrib status.attrib common.attrib sect5.role.attrib local.sect5.attrib ;
idreq.common.attrib ::= idreq.attrib lang.attrib remap.attrib xreflabel.attrib revisionflag.attrib effectivity.attrib local.common.attrib ;
partinfo ::= partinfo::(partinfo.attlist info.class+) ;
msgsub ::= msgsub::(msgsub.attlist title? msgtext) ;
sect1.attlist ::= (renderas::("sect2" | "sect3" | "sect4" | "sect5"))? label.attrib status.attrib common.attrib sect1.role.attrib local.sect1.attrib ;
methodparam.attlist ::= (choice::("opt" | "req" | "plain"))? (rep::("norepeat" | "repeat"))? common.attrib methodparam.role.attrib local.methodparam.attrib ;
fax ::= fax::(fax.attlist docinfo.char.mix*) ;
firstterm ::= firstterm::(firstterm.attlist word.char.mix*) ;
command.attlist ::= moreinfo.attrib common.attrib command.role.attrib local.command.attrib ;
reference.attlist ::= label.attrib status.attrib common.attrib reference.role.attrib local.reference.attrib ;
biblioentry ::= biblioentry::(biblioentry.attlist (articleinfo | bibliocomponent.mix)+) ;
screeninfo ::= screeninfo::(screeninfo.attlist para.char.mix*) ;
imageobjectco.attlist ::= common.attrib imageobjectco.role.attrib local.imageobjectco.attrib ;
bookinfo ::= bookinfo::(bookinfo.attlist info.class+) ;
biblioid ::= biblioid::(biblioid.attlist docinfo.char.mix*) ;
msgset.attlist ::= common.attrib msgset.role.attrib local.msgset.attrib ;
bibliographyinfo ::= bibliographyinfo::(bibliographyinfo.attlist info.class+) ;
classsynopsis ::= classsynopsis::(classsynopsis.attlist (ooclass | oointerface | ooexception)+ (classsynopsisinfo | fieldsynopsis | method.synop.class)*) ;
subscript ::= subscript::(subscript.attlist (string() | link.char.class | emphasis | replaceable | symbol | inlinegraphic | inlinemediaobject | base.char.class | other.char.class)*) ;
interface.attlist ::= moreinfo.attrib common.attrib interface.role.attrib local.interface.attrib ;
action.attlist ::= moreinfo.attrib common.attrib action.role.attrib local.action.attrib ;
releaseinfo.attlist ::= common.attrib releaseinfo.role.attrib local.releaseinfo.attrib ;
corpname.attlist ::= common.attrib corpname.role.attrib local.corpname.attrib ;
guiicon.attlist ::= moreinfo.attrib common.attrib guiicon.role.attrib local.guiicon.attrib ;
footnoteref.attlist ::= linkendreq.attrib label.attrib common.attrib footnoteref.role.attrib local.footnoteref.attrib ;
varname.attlist ::= common.attrib varname.role.attrib local.varname.attrib ;
tbl.entrytbl.mdl ::= colspec* spanspec* thead? tbody ;
callout.attlist ::= arearefs::string() common.attrib callout.role.attrib local.callout.attrib ;
otheraddr ::= otheraddr::(otheraddr.attlist docinfo.char.mix*) ;
refmiscinfo.attlist ::= (class::string())? common.attrib refmiscinfo.role.attrib local.refmiscinfo.attrib ;
sect3info ::= sect3info::(sect3info.attlist info.class+) ;
informaltable ::= informaltable::(informaltable.attlist blockinfo? textobject* (graphic+) | (mediaobject+) | (tgroup+)) ;
isbn ::= isbn::(isbn.attlist docinfo.char.mix*) ;
simplesect ::= simplesect::(simplesect.attlist sect.title.content divcomponent.mix+) ;
label ::= label::(label.attlist word.char.mix*) ;
segtitle.attlist ::= common.attrib segtitle.role.attrib local.segtitle.attrib ;
refsection ::= refsection::(refsection.attlist refsectioninfo? refsect.title.content (refcomponent.mix+ refsection*) | (refsection+)) ;
affiliation ::= affiliation::(affiliation.attlist shortaffil? jobtitle* orgname? orgdiv* address*) ;
epigraph ::= epigraph::(epigraph.attlist attribution? (para.class | literallayout)+) ;
msgsub.attlist ::= common.attrib msgsub.role.attrib local.msgsub.attrib ;
glossary.attlist ::= status.attrib common.attrib glossary.role.attrib local.glossary.attrib ;
msgexplan.attlist ::= common.attrib msgexplan.role.attrib local.msgexplan.attrib ;
methodname ::= methodname::(methodname.attlist smallcptr.char.mix*) ;
biblioentry.attlist ::= common.attrib biblioentry.role.attrib local.biblioentry.attrib ;
collabname.attlist ::= common.attrib collabname.role.attrib local.collabname.attrib ;
subtitle.attlist ::= common.attrib subtitle.role.attrib local.subtitle.attrib ;
book ::= book::(book.attlist div.title.content? bookinfo? (dedication | toc | lot | glossary | bibliography | preface | chapter.class | reference | part | article.class | appendix.class | index.class | colophon)*) ;
graphic ::= graphic::(graphic.attlist ε) ;
bookinfo.attlist ::= (contents::string())? common.attrib bookinfo.role.attrib local.bookinfo.attrib ;
citerefentry.attlist ::= common.attrib citerefentry.role.attrib local.citerefentry.attrib ;
citation ::= citation::(citation.attlist para.char.mix*) ;
section ::= section::(section.attlist sectioninfo? sect.title.content nav.class* (divcomponent.mix+ (refentry.class*) | (section.class*) | (simplesect*)) | (refentry.class+) | (section.class+) | (simplesect+) nav.class*) ;
figure ::= figure::(figure.attlist blockinfo? formalobject.title.content (figure.mix | link.char.class)+) ;
initializer ::= initializer::(initializer.attlist smallcptr.char.mix*) ;
tfoot ::= tfoot::(tfoot.attlist tbl.hdft.mdl) ;
setinfo.attlist ::= (contents::string())? common.attrib setinfo.role.attrib local.setinfo.attrib ;
indexentry ::= indexentry::(indexentry.attlist primaryie (seeie | seealsoie)* (secondaryie (seeie | seealsoie | tertiaryie)*)*) ;
userinput ::= userinput::(userinput.attlist (cptr.char.mix | co)*) ;
replaceable.attlist ::= (class::("command" | "function" | "option" | "parameter"))? common.attrib replaceable.role.attrib local.replaceable.attrib ;
funcprototype ::= funcprototype::(funcprototype.attlist funcdef void | varargs | (paramdef+)) ;
subscript.attlist ::= common.attrib ssscript.role.attrib local.ssscript.attrib ;
sidebarinfo.attlist ::= common.attrib sidebarinfo.role.attrib local.sidebarinfo.attrib ;
keysym.attlist ::= common.attrib keysysm.role.attrib local.keysym.attrib ;
modifier ::= modifier::(modifier.attlist smallcptr.char.mix*) ;
issn.attlist ::= common.attrib issn.role.attrib local.issn.attrib ;
primary.attlist ::= (sortas::string())? common.attrib primsecter.role.attrib local.primsecter.attrib ;
procedure ::= procedure::(procedure.attlist blockinfo? formalobject.title.content? component.mix* step+) ;
legalnotice ::= legalnotice::(legalnotice.attlist blockinfo? title? legalnotice.mix+) ;
sect1info.attlist ::= common.attrib sect1info.role.attrib local.sect1info.attrib ;
step ::= step::(step.attlist title? (component.mix+ (substeps component.mix*)?) | (substeps component.mix*)) ;
synopfragmentref.attlist ::= linkendreq.attrib common.attrib synopfragmentref.role.attrib local.synopfragmentref.attrib ;
shortaffil ::= shortaffil::(shortaffil.attlist docinfo.char.mix*) ;
address.attlist ::= linespecific.attrib common.attrib address.role.attrib local.address.attrib ;
funcdef ::= funcdef::(funcdef.attlist (string() | type | replaceable | function)*) ;
refentryinfo.attlist ::= common.attrib refentryinfo.role.attrib local.refentryinfo.attrib ;
programlistingco.attlist ::= common.attrib programlistingco.role.attrib local.programlistingco.attrib ;
blockinfo ::= blockinfo::(blockinfo.attlist info.class+) ;
olink.attlist ::= (targetdocent::string())? (linkmode::string())? (localinfo::string())? (type::string())? (targetdoc::string())? (targetptr::string())? common.attrib olink.role.attrib local.olink.attrib ;
bridgehead.attlist ::= (renderas::("other" | "sect1" | "sect2" | "sect3" | "sect4" | "sect5"))? common.attrib bridgehead.role.attrib local.bridgehead.attrib ;
phrase ::= phrase::(phrase.attlist para.char.mix*) ;
beginpage ::= beginpage::(beginpage.attlist ε) ;
citation.attlist ::= common.attrib citation.role.attrib local.citation.attrib ;
caption.attlist ::= common.attrib caption.role.attrib local.caption.attrib ;
inlineequation.attlist ::= common.attrib inlineequation.role.attrib local.inlineequation.attrib ;
anchor ::= anchor::(anchor.attlist ε) ;
bibliorelation ::= bibliorelation::(bibliorelation.attlist docinfo.char.mix*) ;
confnum.attlist ::= common.attrib confnum.role.attrib local.confnum.attrib ;
structname.attlist ::= common.attrib structname.role.attrib local.structname.attrib ;
para.attlist ::= common.attrib para.role.attrib local.para.attrib ;
userinput.attlist ::= moreinfo.attrib common.attrib userinput.role.attrib local.userinput.attrib ;
segmentedlist ::= segmentedlist::(segmentedlist.attlist formalobject.title.content? segtitle+ seglistitem+) ;
envar.attlist ::= common.attrib envar.role.attrib local.envar.attrib ;
secur ::= common.attrib tables.role.attrib ;
computeroutput.attlist ::= moreinfo.attrib common.attrib computeroutput.role.attrib local.computeroutput.attrib ;
textobject ::= textobject::(textobject.attlist objectinfo? phrase | textdata | (textobject.mix+)) ;
row.attlist ::= (rowsep::yesorno)? (valign::("top" | "middle" | "bottom"))? secur ;
function.attlist ::= moreinfo.attrib common.attrib function.role.attrib local.function.attrib ;
seriesvolnums ::= seriesvolnums::(seriesvolnums.attlist docinfo.char.mix*) ;
bookcomponent.title.content ::= title subtitle? titleabbrev? ;
modifier.attlist ::= common.attrib modifier.role.attrib local.modifier.attrib ;
glossentry ::= glossentry::(glossentry.attlist glossterm acronym? abbrev? ndxterm.class* revhistory? glosssee | (glossdef+)) ;
personblurb ::= personblurb::(personblurb.attlist title? para.class+) ;
authorgroup.attlist ::= common.attrib authorgroup.role.attrib local.authorgroup.attrib ;
videodata ::= videodata::(videodata.attlist ε) ;
procedure.attlist ::= common.attrib procedure.role.attrib local.procedure.attrib ;
articleinfo ::= articleinfo::(articleinfo.attlist info.class+) ;
bibliomixed ::= bibliomixed::(bibliomixed.attlist (string() | bibliocomponent.mix | bibliomset)*) ;
refsectioninfo ::= refsectioninfo::(refsectioninfo.attlist info.class+) ;
bibliocoverage ::= bibliocoverage::(bibliocoverage.attlist docinfo.char.mix*) ;
primaryie ::= primaryie::(primaryie.attlist ndxterm.char.mix*) ;
glossaryinfo.attlist ::= common.attrib glossaryinfo.role.attrib local.glossaryinfo.attrib ;
seealso ::= seealso::(seealso.attlist ndxterm.char.mix*) ;
member ::= member::(member.attlist para.char.mix*) ;
refsect1info.attlist ::= common.attrib refsect1info.role.attrib local.refsect1info.attrib ;
guilabel ::= guilabel::(guilabel.attlist (smallcptr.char.mix | accel)*) ;
wordasword.attlist ::= common.attrib wordasword.role.attrib local.wordasword.attrib ;
refclass.attlist ::= common.attrib refclass.role.attrib local.refclass.attrib ;
audioobject ::= audioobject::(audioobject.attlist objectinfo? audiodata) ;
systemitem.attlist ::= (class::("constant" | "event" | "eventhandler" | "domainname" | "fqdomainname" | "ipaddress" | "netmask" | "etheraddress" | "groupname" | "library" | "macro" | "osname" | "filesystem" | "resource" | "systemname" | "username" | "newsgroup"))? moreinfo.attrib common.attrib systemitem.role.attrib local.systemitem.attrib ;
bibliosource ::= bibliosource::(bibliosource.attlist docinfo.char.mix*) ;
menuchoice.attlist ::= moreinfo.attrib common.attrib menuchoice.role.attrib local.menuchoice.attrib ;
revhistory ::= revhistory::(revhistory.attlist revision+) ;
keycombo ::= keycombo::(keycombo.attlist (keycap | keycombo | keysym | mousebutton)+) ;
edition.attlist ::= common.attrib edition.role.attrib local.edition.attrib ;
postcode ::= postcode::(postcode.attlist docinfo.char.mix*) ;
blockinfo.attlist ::= common.attrib blockinfo.role.attrib local.blockinfo.attrib ;
classsynopsisinfo.attlist ::= linespecific.attrib common.attrib classsynopsisinfo.role.attrib local.classsynopsisinfo.attrib ;
orderedlist ::= orderedlist::(orderedlist.attlist blockinfo? formalobject.title.content? listpreamble.mix* listitem+) ;
tgroup ::= tgroup::(tgroup.attlist tbl.tgroup.mdl) ;
refsynopsisdivinfo.attlist ::= common.attrib refsynopsisdivinfo.role.attrib local.refsynopsisdivinfo.attrib ;
publishername ::= publishername::(publishername.attlist docinfo.char.mix*) ;
areaset.attlist ::= label.attrib (units::("calspair" | "linecolumn" | "linerange" | "linecolumnpair" | "other"))? (otherunits::string())? coords::string() idreq.common.attrib areaset.role.attrib local.areaset.attrib ;
bibliorelation.attlist ::= biblio.class.attrib bibliorelation.type.attrib common.attrib bibliorelation.role.attrib local.bibliorelation.attrib ;
listitem.attlist ::= (override::string())? common.attrib listitem.role.attrib local.listitem.attrib ;
group ::= group::(group.attlist (arg | group | option | synopfragmentref | replaceable | sbr)+) ;
indexdiv ::= indexdiv::(indexdiv.attlist sect.title.content? indexdivcomponent.mix* (indexentry+) | segmentedlist) ;
sect4info ::= sect4info::(sect4info.attlist info.class+) ;
quote ::= quote::(quote.attlist para.char.mix*) ;
chapterinfo ::= chapterinfo::(chapterinfo.attlist info.class+) ;
referenceinfo ::= referenceinfo::(referenceinfo.attlist info.class+) ;
glosslist.attlist ::= common.attrib glosslist.role.attrib local.glosslist.attrib ;
sect.title.content ::= title subtitle? titleabbrev? ;
constant.attlist ::= (class::"limit")? common.attrib constant.role.attrib local.constant.attrib ;
bibliocoverage.attlist ::= (spatial::("dcmipoint" | "iso3166" | "dcmibox" | "tgn" | "otherspatial"))? (otherspatial::string())? (temporal::("dcmiperiod" | "w3c-dtf" | "othertemporal"))? (othertemporal::string())? common.attrib bibliocoverage.role.attrib local.bibliocoverage.attrib ;
ooexception ::= ooexception::(ooexception.attlist modifier* exceptionname) ;
refname.attlist ::= common.attrib refname.role.attrib local.refname.attrib ;
email.attlist ::= common.attrib email.role.attrib local.email.attrib ;
warning.attlist ::= common.attrib admon.role.attrib local.admon.attrib ;
contrib.attlist ::= common.attrib contrib.role.attrib local.contrib.attrib ;
literallayout.attlist ::= width.attrib linespecific.attrib (class::("monospaced" | "normal"))? common.attrib literallayout.role.attrib local.literallayout.attrib ;
ooclass.attlist ::= common.attrib ooclass.role.attrib local.ooclass.attrib ;
subjectterm.attlist ::= common.attrib subjectterm.role.attrib local.subjectterm.attrib ;
informalexample.attlist ::= width.attrib common.attrib informalexample.role.attrib local.informalexample.attrib ;
state.attlist ::= common.attrib state.role.attrib local.state.attrib ;
honorific ::= honorific::(honorific.attlist docinfo.char.mix*) ;
keycombo.attlist ::= keyaction.attrib moreinfo.attrib common.attrib keycombo.role.attrib local.keycombo.attrib ;
foreignphrase.attlist ::= common.attrib foreignphrase.role.attrib local.foreignphrase.attrib ;
destructorsynopsis.attlist ::= (language::string())? common.attrib destructorsynopsis.role.attrib local.destructorsynopsis.attrib ;
area.attlist ::= label.attrib linkends.attrib (units::("calspair" | "linecolumn" | "linerange" | "linecolumnpair" | "other"))? (otherunits::string())? coords::string() idreq.common.attrib area.role.attrib local.area.attrib ;
setindexinfo ::= setindexinfo::(setindexinfo.attlist info.class+) ;
orderedlist.attlist ::= (numeration::("arabic" | "upperalpha" | "loweralpha" | "upperroman" | "lowerroman"))? (inheritnum::("inherit" | "ignore"))? (continuation::("continues" | "restarts"))? (spacing::("normal" | "compact"))? common.attrib orderedlist.role.attrib local.orderedlist.attrib ;
tgroup.attlist ::= cols::string() tbl.tgroup.att (colsep::yesorno)? (rowsep::yesorno)? (align::("left" | "right" | "center" | "justify" | "char"))? (char::string())? (charoff::string())? secur ;
partintro ::= partintro::(partintro.attlist div.title.content? bookcomponent.content) ;
publishername.attlist ::= common.attrib publishername.role.attrib local.publishername.attrib ;
title ::= title::(title.attlist title.char.mix*) ;
textdata ::= textdata::(textdata.attlist ε) ;
arg ::= arg::(arg.attlist (string() | arg | group | option | synopfragmentref | replaceable | sbr)*) ;
sect5 ::= sect5::(sect5.attlist sect5info? sect.title.content nav.class* (divcomponent.mix+ (refentry.class*) | (simplesect*)) | (refentry.class+) | (simplesect+) nav.class*) ;
programlisting.attlist ::= width.attrib linespecific.attrib common.attrib programlisting.role.attrib local.programlisting.attrib ;
remark.attlist ::= common.attrib remark.role.attrib local.remark.attrib ;
preface.attlist ::= status.attrib common.attrib preface.role.attrib local.preface.attrib ;
sect4 ::= sect4::(sect4.attlist sect4info? sect.title.content nav.class* (divcomponent.mix+ (refentry.class*) | (sect5*) | (simplesect*)) | (refentry.class+) | (sect5+) | (simplesect+) nav.class*) ;
tbl.table.att ::= (tabstyle::string())? (tocentry::yesorno)? (shortentry::yesorno)? (orient::("port" | "land"))? (pgwide::yesorno)? ;
group.attlist ::= (choice::("opt" | "req" | "plain"))? (rep::("norepeat" | "repeat"))? common.attrib group.role.attrib local.group.attrib ;
indexdiv.attlist ::= common.attrib indexdiv.role.attrib local.indexdiv.attrib ;
sect3 ::= sect3::(sect3.attlist sect3info? sect.title.content nav.class* (divcomponent.mix+ (refentry.class*) | (sect4*) | (simplesect*)) | (refentry.class+) | (sect4+) | (simplesect+) nav.class*) ;
sect4info.attlist ::= common.attrib sect4info.role.attrib local.sect4info.attrib ;
sect2 ::= sect2::(sect2.attlist sect2info? sect.title.content nav.class* (divcomponent.mix+ (refentry.class*) | (sect3*) | (simplesect*)) | (refentry.class+) | (sect3+) | (simplesect+) nav.class*) ;
sect1 ::= sect1::(sect1.attlist sect1info? sect.title.content nav.class* (divcomponent.mix+ (refentry.class*) | (sect2*) | (simplesect*)) | (refentry.class+) | (sect2+) | (simplesect+) nav.class*) ;
chapterinfo.attlist ::= common.attrib chapterinfo.role.attrib local.chapterinfo.attrib ;
bibliodiv.attlist ::= status.attrib common.attrib bibliodiv.role.attrib local.bibliodiv.attrib ;
toclevel5.attlist ::= common.attrib toclevel5.role.attrib local.toclevel5.attrib ;
option.attlist ::= common.attrib option.role.attrib local.option.attrib ;
toclevel1.attlist ::= common.attrib toclevel1.role.attrib local.toclevel1.attrib ;
imageobjectco ::= imageobjectco::(imageobjectco.attlist areaspec imageobject calloutlist*) ;
structfield ::= structfield::(structfield.attlist smallcptr.char.mix*) ;
pob ::= pob::(pob.attlist docinfo.char.mix*) ;
returnvalue ::= returnvalue::(returnvalue.attlist smallcptr.char.mix*) ;
itemizedlist ::= itemizedlist::(itemizedlist.attlist blockinfo? formalobject.title.content? listpreamble.mix* listitem+) ;
ooexception.attlist ::= common.attrib ooexception.role.attrib local.ooexception.attrib ;
phone.attlist ::= common.attrib phone.role.attrib local.phone.attrib ;
highlights ::= highlights::(highlights.attlist highlights.mix+) ;
objectinfo.attlist ::= common.attrib objectinfo.role.attrib local.objectinfo.attrib ;
example.attlist ::= label.attrib width.attrib common.attrib example.role.attrib local.example.attrib ;
screenshot.attlist ::= common.attrib screenshot.role.attrib local.screenshot.attrib ;
action ::= action::(action.attlist cptr.char.mix*) ;
refnamediv ::= refnamediv::(refnamediv.attlist refdescriptor? refname+ refpurpose refclass* (remark | link.char.class)*) ;
varname ::= varname::(varname.attlist smallcptr.char.mix*) ;
trademark ::= trademark::(trademark.attlist (string() | link.char.class | tech.char.class | base.char.class | other.char.class | inlinegraphic | inlinemediaobject | emphasis)*) ;
optional.attlist ::= common.attrib optional.role.attrib local.optional.attrib ;
personname.attlist ::= common.attrib personname.role.attrib local.personname.attrib ;
authorblurb ::= authorblurb::(authorblurb.attlist title? para.class+) ;
inlinegraphic ::= inlinegraphic::(inlinegraphic.attlist ε) ;
tocback ::= tocback::(tocback.attlist para.char.mix*) ;
sidebar.attlist ::= common.attrib sidebar.role.attrib local.sidebar.attrib ;
volumenum ::= volumenum::(volumenum.attlist docinfo.char.mix*) ;
markup ::= markup::(markup.attlist smallcptr.char.mix*) ;
textdata.attlist ::= (encoding::string())? objectdata.attrib common.attrib textdata.role.attrib local.textdata.attrib ;
qandadiv.attlist ::= common.attrib qandadiv.role.attrib local.qandadiv.attrib ;
seg.attlist ::= common.attrib seg.role.attrib local.seg.attrib ;
lineannotation ::= lineannotation::(lineannotation.attlist para.char.mix*) ;
glossseealso.attlist ::= (otherterm::string())? common.attrib glossseealso.role.attrib local.glossseealso.attrib ;
sect2.attlist ::= (renderas::("sect1" | "sect3" | "sect4" | "sect5"))? label.attrib status.attrib common.attrib sect2.role.attrib local.sect2.attrib ;
glossary ::= glossary::(glossary.attlist glossaryinfo? bookcomponent.title.content? component.mix* (glossdiv+) | (glossentry+) bibliography?) ;
chapter.attlist ::= label.attrib status.attrib common.attrib chapter.role.attrib local.chapter.attrib ;
equation.attlist ::= label.attrib common.attrib equation.role.attrib local.equation.attrib ;
funcparams.attlist ::= common.attrib funcparams.role.attrib local.funcparams.attrib ;
colophon.attlist ::= status.attrib common.attrib colophon.role.attrib local.colophon.attrib ;
citerefentry ::= citerefentry::(citerefentry.attlist refentrytitle manvolnum?) ;
interfacename.attlist ::= common.attrib interfacename.role.attrib local.interfacename.attrib ;
pob.attlist ::= common.attrib pob.role.attrib local.pob.attrib ;
errortype.attlist ::= common.attrib errortype.role.attrib local.errortype.attrib ;
msgorig.attlist ::= common.attrib msgorig.role.attrib local.msgorig.attrib ;
highlights.attlist ::= common.attrib highlights.role.attrib local.highlights.attrib ;
blockquote ::= blockquote::(blockquote.attlist title? attribution? component.mix+) ;
replaceable ::= replaceable::(replaceable.attlist (string() | link.char.class | optional | base.char.class | other.char.class | inlinegraphic | inlinemediaobject | co)*) ;
year.attlist ::= common.attrib year.role.attrib local.year.attrib ;
entrytbl ::= entrytbl::(entrytbl.attlist tbl.entrytbl.mdl) ;
sidebarinfo ::= sidebarinfo::(sidebarinfo.attlist info.class+) ;
othercredit ::= othercredit::(othercredit.attlist personname | (person.ident.mix+) (personblurb | email | address)*) ;
filename ::= filename::(filename.attlist cptr.char.mix*) ;
seealsoie.attlist ::= linkends.attrib common.attrib seealsoie.role.attrib local.seealsoie.attrib ;
common.table.attribs ::= bodyatt secur ;
spanspec ::= spanspec::(spanspec.attlist ε) ;
guisubmenu ::= guisubmenu::(guisubmenu.attlist (smallcptr.char.mix | accel)*) ;
refnamediv.attlist ::= common.attrib refnamediv.role.attrib local.refnamediv.attrib ;
primary ::= primary::(primary.attlist ndxterm.char.mix*) ;
inlinegraphic.attlist ::= graphics.attrib common.attrib inlinegraphic.role.attrib local.inlinegraphic.attrib ;
sect5info ::= sect5info::(sect5info.attlist info.class+) ;
tocback.attlist ::= label.attrib linkend.attrib pagenum.attrib common.attrib tocback.role.attrib local.tocback.attrib ;
guibutton.attlist ::= moreinfo.attrib common.attrib guibutton.role.attrib local.guibutton.attrib ;
publisher ::= publisher::(publisher.attlist publishername address*) ;
synopfragmentref ::= synopfragmentref::(synopfragmentref.attlist string()) ;
refentrytitle ::= refentrytitle::(refentrytitle.attlist para.char.mix*) ;
token ::= token::(token.attlist smallcptr.char.mix*) ;
appendixinfo ::= appendixinfo::(appendixinfo.attlist info.class+) ;
lineannotation.attlist ::= common.attrib lineannotation.role.attrib local.lineannotation.attrib ;
ulink ::= ulink::(ulink.attlist para.char.mix*) ;
firstterm.attlist ::= linkend.attrib common.attrib firstterm.role.attrib local.firstterm.attrib ;
guimenu.attlist ::= moreinfo.attrib common.attrib guimenu.role.attrib local.guimenu.attrib ;
variablelist.attlist ::= (termlength::string())? common.attrib variablelist.role.attrib local.variablelist.attrib ;
keyword ::= keyword::(keyword.attlist string()) ;
hardware ::= hardware::(hardware.attlist cptr.char.mix*) ;
caption ::= caption::(caption.attlist textobject.mix*) ;
revremark ::= revremark::(revremark.attlist docinfo.char.mix*) ;
confnum ::= confnum::(confnum.attlist docinfo.char.mix*) ;
confdates ::= confdates::(confdates.attlist docinfo.char.mix*) ;
tocfront ::= tocfront::(tocfront.attlist para.char.mix*) ;
bibliographyinfo.attlist ::= common.attrib bibliographyinfo.role.attrib local.bibliographyinfo.attrib ;
blockquote.attlist ::= common.attrib blockquote.role.attrib local.blockquote.attrib ;
envar ::= envar::(envar.attlist smallcptr.char.mix*) ;
issuenum.attlist ::= common.attrib issuenum.role.attrib local.issuenum.attrib ;
collab.attlist ::= common.attrib collab.role.attrib local.collab.attrib ;
classsynopsis.attlist ::= (language::string())? (class::("class" | "interface"))? common.attrib classsynopsis.role.attrib local.classsynopsis.attrib ;
confgroup ::= confgroup::(confgroup.attlist (confdates | conftitle | confnum | address | confsponsor)*) ;
glosssee.attlist ::= (otherterm::string())? common.attrib glosssee.role.attrib local.glosssee.attrib ;
row ::= row::(row.attlist tbl.row.mdl) ;
keywordset ::= keywordset::(keywordset.attlist keyword+) ;
filename.attlist ::= (class::("headerfile" | "partition" | "devicefile" | "libraryfile" | "directory" | "extension" | "symlink"))? (path::string())? moreinfo.attrib common.attrib filename.role.attrib local.filename.attrib ;
screenco ::= screenco::(screenco.attlist areaspec screen calloutlist*) ;
funcsynopsisinfo.attlist ::= linespecific.attrib common.attrib funcsynopsisinfo.role.attrib local.funcsynopsisinfo.attrib ;
property ::= property::(property.attlist cptr.char.mix*) ;
titleabbrev.attlist ::= common.attrib titleabbrev.role.attrib local.titleabbrev.attrib ;
synopfragment.attlist ::= idreq.common.attrib synopfragment.role.attrib local.synopfragment.attrib ;
appendix ::= appendix::(appendix.attlist beginpage? appendixinfo? bookcomponent.title.content nav.class* tocchap? bookcomponent.content nav.class*) ;
contractsponsor ::= contractsponsor::(contractsponsor.attlist docinfo.char.mix*) ;
areaspec ::= areaspec::(areaspec.attlist (area | areaset)+) ;
appendixinfo.attlist ::= common.attrib appendixinfo.role.attrib local.appendixinfo.attrib ;
article.attlist ::= (class::("journalarticle" | "productsheet" | "whitepaper" | "techreport" | "specification" | "faq"))? (parentbook::string())? status.attrib common.attrib article.role.attrib local.article.attrib ;
wordasword ::= wordasword::(wordasword.attlist word.char.mix*) ;
errorcode.attlist ::= moreinfo.attrib common.attrib errorcode.role.attrib local.errorcode.attrib ;
label.attlist ::= common.attrib label.role.attrib local.label.attrib ;
acronym ::= acronym::(acronym.attlist word.char.mix*) ;
systemitem ::= systemitem::(systemitem.attlist (cptr.char.mix | acronym | co)*) ;
epigraph.attlist ::= common.attrib epigraph.role.attrib local.epigraph.attrib ;
affiliation.attlist ::= common.attrib affiliation.role.attrib local.affiliation.attrib ;
ulink.attlist ::= url::string() (type::string())? common.attrib ulink.role.attrib local.ulink.attrib ;
tertiaryie.attlist ::= linkends.attrib common.attrib primsecterie.role.attrib local.primsecterie.attrib ;
edition ::= edition::(edition.attlist docinfo.char.mix*) ;
itermset.attlist ::= common.attrib itermset.role.attrib local.itermset.attrib ;
methodname.attlist ::= common.attrib methodname.role.attrib local.methodname.attrib ;
classsynopsisinfo ::= classsynopsisinfo::(classsynopsisinfo.attlist (cptr.char.mix | textobject | lineannotation)*) ;
graphic.attlist ::= graphics.attrib common.attrib graphic.role.attrib local.graphic.attrib ;
corpauthor ::= corpauthor::(corpauthor.attlist docinfo.char.mix*) ;
figure.attlist ::= (float::yesorno.attvals)? (pgwide::yesorno.attvals)? label.attrib common.attrib figure.role.attrib local.figure.attrib ;
revremark.attlist ::= common.attrib revremark.role.attrib local.revremark.attrib ;
conftitle ::= conftitle::(conftitle.attlist docinfo.char.mix*) ;
indexentry.attlist ::= common.attrib indexentry.role.attrib local.indexentry.attrib ;
setindex ::= setindex::(setindex.attlist setindexinfo? bookcomponent.title.content? component.mix* (indexdiv*) | (indexentry*)) ;
revnumber ::= revnumber::(revnumber.attlist docinfo.char.mix*) ;
holder ::= holder::(holder.attlist docinfo.char.mix*) ;
confgroup.attlist ::= common.attrib confgroup.role.attrib local.confgroup.attrib ;
alt ::= alt::(alt.attlist string()) ;
index.attlist ::= common.attrib indexes.role.attrib local.indexes.attrib ;
cmdsynopsis.attlist ::= label.attrib (sepchar::string())? (cmdlength::string())? common.attrib cmdsynopsis.role.attrib local.cmdsynopsis.attrib ;
calloutlist.attlist ::= common.attrib calloutlist.role.attrib local.calloutlist.attrib ;
refname ::= refname::(refname.attlist refname.char.mix*) ;
step.attlist ::= (performance::("optional" | "required"))? common.attrib step.role.attrib local.step.attrib ;
refsect3 ::= refsect3::(refsect3.attlist refsect3info? refsect.title.content refcomponent.mix+) ;
refsect2 ::= refsect2::(refsect2.attlist refsect2info? refsect.title.content (refcomponent.mix+ refsect3*) | (refsect3+)) ;
othername ::= othername::(othername.attlist docinfo.char.mix*) ;
refsect1 ::= refsect1::(refsect1.attlist refsect1info? refsect.title.content (refcomponent.mix+ refsect2*) | (refsect2+)) ;
shortaffil.attlist ::= common.attrib shortaffil.role.attrib local.shortaffil.attrib ;
symbol ::= symbol::(symbol.attlist smallcptr.char.mix*) ;
informalexample ::= informalexample::(informalexample.attlist blockinfo? example.mix+) ;
acronym.attlist ::= common.attrib acronym.role.attrib local.acronym.attrib ;
void ::= void::(void.attlist ε) ;
synopsis ::= synopsis::(synopsis.attlist (para.char.mix | graphic | mediaobject | co | coref | textobject | lineannotation)*) ;
lotentry.attlist ::= linkend.attrib pagenum.attrib (srccredit::string())? common.attrib lotentry.role.attrib local.lotentry.attrib ;
msgentry ::= msgentry::(msgentry.attlist msg+ msginfo? msgexplan*) ;
medialabel ::= medialabel::(medialabel.attlist smallcptr.char.mix*) ;
secondaryie ::= secondaryie::(secondaryie.attlist ndxterm.char.mix*) ;
author ::= author::(author.attlist personname | (person.ident.mix+) (personblurb | email | address)*) ;
msgmain.attlist ::= common.attrib msgmain.role.attrib local.msgmain.attrib ;
beginpage.attlist ::= pagenum.attrib common.attrib beginpage.role.attrib local.beginpage.attrib ;
keyaction.attrib ::= (action::("click" | "double-click" | "press" | "seq" | "simul" | "other"))? (otheraction::string())? local.keyaction.attrib ;
segmentedlist.attlist ::= common.attrib segmentedlist.role.attrib local.segmentedlist.attrib ;
manvolnum.attlist ::= common.attrib namvolnum.role.attrib local.manvolnum.attrib ;
invpartnumber.attlist ::= common.attrib invpartnumber.role.attrib local.invpartnumber.attrib ;
textobject.attlist ::= common.attrib textobject.role.attrib local.textobject.attrib ;
emphasis ::= emphasis::(emphasis.attlist para.char.mix*) ;
database ::= database::(database.attlist cptr.char.mix*) ;
parameter.attlist ::= (class::("command" | "function" | "option"))? moreinfo.attrib common.attrib parameter.role.attrib local.parameter.attrib ;
bibliodiv ::= bibliodiv::(bibliodiv.attlist sect.title.content? component.mix* (biblioentry | bibliomixed)+) ;
glossentry.attlist ::= (sortas::string())? common.attrib glossentry.role.attrib local.glossentry.attrib ;
msgrel ::= msgrel::(msgrel.attlist title? msgtext) ;
methodsynopsis ::= methodsynopsis::(methodsynopsis.attlist modifier* (type | void)? methodname (methodparam+) | void exceptionname* modifier*) ;
bibliomixed.attlist ::= common.attrib bibliomixed.role.attrib local.bibliomixed.attrib ;
articleinfo.attlist ::= common.attrib articleinfo.role.attrib local.articleinfo.attrib ;
secondary ::= secondary::(secondary.attlist ndxterm.char.mix*) ;
abbrev.attlist ::= common.attrib abbrev.role.attrib local.abbrev.attrib ;
refsectioninfo.attlist ::= common.attrib refsectioninfo.role.attrib local.refsectioninfo.attrib ;
phone ::= phone::(phone.attlist docinfo.char.mix*) ;
editor ::= editor::(editor.attlist personname | (person.ident.mix+) (personblurb | email | address)*) ;
othername.attlist ::= common.attrib othername.role.attrib local.othername.attrib ;
refsect1.attlist ::= status.attrib common.attrib refsect1.role.attrib local.refsect1.attrib ;
city ::= city::(city.attlist docinfo.char.mix*) ;
example ::= example::(example.attlist blockinfo? formalobject.title.content example.mix+) ;
citebiblioid ::= citebiblioid::(citebiblioid.attlist docinfo.char.mix*) ;
screenshot ::= screenshot::(screenshot.attlist screeninfo? graphic | graphicco | mediaobject | mediaobjectco) ;
tbl.table.mdl ::= blockinfo? formalobject.title.content ndxterm.class* textobject* (graphic+) | (mediaobject+) | (tgroup+) ;
prompt ::= prompt::(prompt.attlist (smallcptr.char.mix | co)*) ;
footnote ::= footnote::(footnote.attlist footnote.mix+) ;
fieldsynopsis.attlist ::= (language::string())? common.attrib fieldsynopsis.role.attrib local.fieldsynopsis.attrib ;
author.attlist ::= common.attrib author.role.attrib local.author.attrib ;
imagedata.attlist ::= (width::string())? (contentwidth::string())? (depth::string())? (contentdepth::string())? (align::("left" | "right" | "center"))? (valign::("top" | "middle" | "bottom"))? (scale::string())? (scalefit::yesorno.attvals)? objectdata.attrib common.attrib imagedata.role.attrib local.imagedata.attrib ;
qandadiv ::= qandadiv::(qandadiv.attlist blockinfo? formalobject.title.content? qandaset.mix* (qandadiv+) | (qandaentry+)) ;
graphicco ::= graphicco::(graphicco.attlist areaspec graphic calloutlist*) ;
msg.attlist ::= common.attrib msg.role.attrib local.msg.attrib ;
application ::= application::(application.attlist para.char.mix*) ;
simplelist ::= simplelist::(simplelist.attlist member+) ;
sect2info.attlist ::= common.attrib sect2info.role.attrib local.sect2info.attrib ;
quote.attlist ::= common.attrib quote.role.attrib local.quote.attrib ;
database.attlist ::= (class::("name" | "table" | "field" | "key1" | "key2" | "record"))? moreinfo.attrib common.attrib database.role.attrib local.database.attrib ;
biblioset ::= biblioset::(biblioset.attlist bibliocomponent.mix+) ;
revdescription.attlist ::= common.attrib revdescription.role.attrib local.revdescription.attrib ;
funcparams ::= funcparams::(funcparams.attlist cptr.char.mix*) ;
toc ::= toc::(toc.attlist beginpage? bookcomponent.title.content? tocfront* (tocpart | tocchap)* tocback*) ;
printhistory ::= printhistory::(printhistory.attlist para.class+) ;
toclevel2.attlist ::= common.attrib toclevel2.role.attrib local.toclevel2.attrib ;
colophon ::= colophon::(colophon.attlist sect.title.content? textobject.mix+) ;
bibliorelation.type.attrib ::= (type::("isversionof" | "hasversion" | "isreplacedby" | "replaces" | "isrequiredby" | "requires" | "ispartof" | "haspart" | "isreferencedby" | "references" | "isformatof" | "hasformat" | "othertype" | local.bibliorelation.types))? (othertype::string())? ;
simplemsgentry ::= simplemsgentry::(simplemsgentry.attlist msgtext msgexplan+) ;
entry.attlist ::= (colname::string())? (namest::string())? (nameend::string())? (spanname::string())? (morerows::string())? (colsep::yesorno)? (rowsep::yesorno)? (align::("left" | "right" | "center" | "justify" | "char"))? (char::string())? (charoff::string())? (rotate::yesorno)? (valign::("top" | "middle" | "bottom"))? secur ;
errortype ::= errortype::(errortype.attlist smallcptr.char.mix*) ;
msgorig ::= msgorig::(msgorig.attlist smallcptr.char.mix*) ;
msgset ::= msgset::(msgset.attlist blockinfo? formalobject.title.content? (msgentry+) | (simplemsgentry+)) ;
city.attlist ::= common.attrib city.role.attrib local.city.attrib ;
firstname ::= firstname::(firstname.attlist docinfo.char.mix*) ;
tocpart ::= tocpart::(tocpart.attlist tocentry+ tocchap*) ;
colspec ::= colspec::(colspec.attlist ε) ;
interface ::= interface::(interface.attlist (smallcptr.char.mix | accel)*) ;
informalfigure ::= informalfigure::(informalfigure.attlist blockinfo? (figure.mix | link.char.class)+) ;
simpara ::= simpara::(simpara.attlist para.char.mix*) ;
seealsoie ::= seealsoie::(seealsoie.attlist ndxterm.char.mix*) ;
releaseinfo ::= releaseinfo::(releaseinfo.attlist docinfo.char.mix*) ;
corpname ::= corpname::(corpname.attlist docinfo.char.mix*) ;
contractnum ::= contractnum::(contractnum.attlist docinfo.char.mix*) ;
set.attlist ::= (fpi::string())? status.attrib common.attrib set.role.attrib local.set.attrib ;
citetitle.attlist ::= (pubwork::("article" | "book" | "chapter" | "part" | "refentry" | "section" | "journal" | "series" | "set" | "manuscript"))? common.attrib citetitle.role.attrib local.citetitle.attrib ;
refmiscinfo ::= refmiscinfo::(refmiscinfo.attlist docinfo.char.mix*) ;
subject ::= subject::(subject.attlist subjectterm+) ;
imageobject.attlist ::= common.attrib imageobject.role.attrib local.imageobject.attrib ;
refpurpose ::= refpurpose::(refpurpose.attlist refinline.char.mix*) ;
oointerface.attlist ::= common.attrib oointerface.role.attrib local.oointerface.attrib ;
title.attlist ::= pagenum.attrib common.attrib title.role.attrib local.title.attrib ;
qandaset ::= qandaset::(qandaset.attlist blockinfo? formalobject.title.content? qandaset.mix* (qandadiv+) | (qandaentry+)) ;
tertiary.attlist ::= (sortas::string())? common.attrib primsecter.role.attrib local.primsecter.attrib ;
bibliomisc ::= bibliomisc::(bibliomisc.attlist para.char.mix*) ;
lot.attlist ::= label.attrib common.attrib lot.role.attrib local.lot.attrib ;
sect3.attlist ::= (renderas::("sect1" | "sect2" | "sect4" | "sect5"))? label.attrib status.attrib common.attrib sect3.role.attrib local.sect3.attrib ;
varlistentry.attlist ::= common.attrib varlistentry.role.attrib local.varlistentry.attrib ;
msgexplan ::= msgexplan::(msgexplan.attlist title? component.mix+) ;
biblioset.attlist ::= (relation::string())? common.attrib biblioset.role.attrib local.biblioset.attrib ;
xref ::= xref::(xref.attlist ε) ;
refsect2info.attlist ::= common.attrib refsect2info.role.attrib local.refsect2info.attrib ;
guimenu ::= guimenu::(guimenu.attlist (smallcptr.char.mix | accel)*) ;
variablelist ::= variablelist::(variablelist.attlist blockinfo? formalobject.title.content? listpreamble.mix* varlistentry+) ;
printhistory.attlist ::= common.attrib printhistory.role.attrib local.printhistory.attrib ;
refmeta ::= refmeta::(refmeta.attlist ndxterm.class* refentrytitle manvolnum? refmiscinfo* ndxterm.class*) ;
shortcut.attlist ::= keyaction.attrib moreinfo.attrib common.attrib shortcut.role.attrib local.shortcut.attrib ;
simplemsgentry.attlist ::= (audience::string())? (level::string())? (origin::string())? common.attrib simplemsgentry.role.attrib local.simplemsgentry.attrib ;
keycap ::= keycap::(keycap.attlist cptr.char.mix*) ;
refdescriptor.attlist ::= common.attrib refdescriptor.role.attrib local.refdescriptor.attrib ;
sectioninfo ::= sectioninfo::(sectioninfo.attlist info.class+) ;
indexterm.attlist ::= pagenum.attrib (scope::("all" | "global" | "local"))? (significance::("preferred" | "normal"))? (class::("singular" | "startofrange" | "endofrange"))? (startref::string())? (zone::string())? common.attrib indexterm.role.attrib local.indexterm.attrib ;
firstname.attlist ::= common.attrib firstname.role.attrib local.firstname.attrib ;
tocpart.attlist ::= common.attrib tocpart.role.attrib local.tocpart.attrib ;
bibliomset ::= bibliomset::(bibliomset.attlist (string() | bibliocomponent.mix | bibliomset)*) ;
colspec.attlist ::= (colnum::string())? (colname::string())? (colwidth::string())? (colsep::yesorno)? (rowsep::yesorno)? (align::("left" | "right" | "center" | "justify" | "char"))? (char::string())? (charoff::string())? ;
authorinitials.attlist ::= common.attrib authorinitials.role.attrib local.authorinitials.attrib ;
mark.attrib ::= (mark::string())? local.mark.attrib ;
simpara.attlist ::= common.attrib simpara.role.attrib local.simpara.attrib ;
effectivity.attrib ::= arch.attrib condition.attrib conformance.attrib os.attrib revision.attrib security.attrib userlevel.attrib vendor.attrib local.effectivity.attrib ;
errortext.attlist ::= common.attrib errortext.role.attrib local.errortext.attrib ;
funcsynopsisinfo ::= funcsynopsisinfo::(funcsynopsisinfo.attlist (cptr.char.mix | textobject | lineannotation)*) ;
issn ::= issn::(issn.attlist docinfo.char.mix*) ;
authorblurb.attlist ::= common.attrib authorblurb.role.attrib local.authorblurb.attrib ;
msgtext.attlist ::= common.attrib msgtext.role.attrib local.msgtext.attrib ;
prefaceinfo.attlist ::= common.attrib prefaceinfo.role.attrib local.prefaceinfo.attrib ;
guimenuitem.attlist ::= moreinfo.attrib common.attrib guimenuitem.role.attrib local.guimenuitem.attrib ;
orgdiv.attlist ::= common.attrib orgdiv.role.attrib local.orgdiv.attrib ;
volumenum.attlist ::= common.attrib volumenum.role.attrib local.volumenum.attrib ;
refpurpose.attlist ::= common.attrib refpurpose.role.attrib local.refpurpose.attrib ;
tocentry.attlist ::= linkend.attrib pagenum.attrib common.attrib tocentry.role.attrib local.tocentry.attrib ;
titleabbrev ::= titleabbrev::(titleabbrev.attlist title.char.mix*) ;
markup.attlist ::= common.attrib markup.role.attrib local.markup.attrib ;
productnumber ::= productnumber::(productnumber.attlist docinfo.char.mix*) ;
qandaset.attlist ::= (defaultlabel::("qanda" | "number" | "none"))? common.attrib qandaset.role.attrib local.qandaset.attrib ;
article ::= article::(article.attlist div.title.content? articleinfo? tocchap? lot* bookcomponent.content (nav.class | appendix.class | ackno)*) ;
bibliomisc.attlist ::= common.attrib bibliomisc.role.attrib local.bibliomisc.attrib ;
important.attlist ::= common.attrib admon.role.attrib local.admon.attrib ;
abstract.attlist ::= common.attrib abstract.role.attrib local.abstract.attrib ;
partinfo.attlist ::= common.attrib partinfo.role.attrib local.partinfo.attrib ;
objectdata.attrib ::= (entityref::string())? (fileref::string())? (format::notation.class)? (srccredit::string())? local.objectdata.attrib ;
fax.attlist ::= common.attrib fax.role.attrib local.fax.attrib ;
tertiaryie ::= tertiaryie::(tertiaryie.attlist ndxterm.char.mix*) ;
refentryinfo ::= refentryinfo::(refentryinfo.attlist info.class+) ;
xref.attlist ::= (endterm::string())? linkendreq.attrib common.attrib xref.role.attrib local.xref.attrib ;
olink ::= olink::(olink.attlist para.char.mix*) ;
bridgehead ::= bridgehead::(bridgehead.attlist title.char.mix*) ;
accel ::= accel::(accel.attlist smallcptr.char.mix*) ;
substeps ::= substeps::(substeps.attlist step+) ;
tbody.attlist ::= (valign::("top" | "middle" | "bottom"))? secur ;
inlineequation ::= inlineequation::(inlineequation.attlist inlineequation.content) ;
keycap.attlist ::= moreinfo.attrib common.attrib keycap.role.attrib local.keycap.attrib ;
sectioninfo.attlist ::= common.attrib sectioninfo.role.attrib local.sectioninfo.attrib ;
formalobject.title.content ::= title titleabbrev? ;
entrytbl.attlist ::= cols::string() tbl.tgroup.att (colname::string())? (spanname::string())? (namest::string())? (nameend::string())? (colsep::yesorno)? (rowsep::yesorno)? (align::("left" | "right" | "center" | "justify" | "char"))? (char::string())? (charoff::string())? secur ;
surname ::= surname::(surname.attlist docinfo.char.mix*) ;
ackno.attlist ::= common.attrib ackno.role.attrib local.ackno.attrib ;
refsynopsisdiv.attlist ::= common.attrib refsynopsisdiv.role.attrib local.refsynopsisdiv.attrib ;
superscript.attlist ::= common.attrib ssscript.role.attrib local.ssscript.attrib ;
biblio.class.attrib ::= (class::("uri" | "doi" | "isbn" | "issn" | "libraryofcongress" | "pubnumber" | "other"))? (otherclass::string())? ;
seglistitem.attlist ::= common.attrib seglistitem.role.attrib local.seglistitem.attrib ;
guisubmenu.attlist ::= moreinfo.attrib common.attrib guisubmenu.role.attrib local.guisubmenu.attrib ;
otheraddr.attlist ::= common.attrib otheraddr.role.attrib local.otheraddr.attrib ;
index ::= index::(index.attlist indexinfo? bookcomponent.title.content? component.mix* (indexdiv*) | (indexentry*)) ;
sect5info.attlist ::= common.attrib sect5info.role.attrib local.sect5info.attrib ;
cmdsynopsis ::= cmdsynopsis::(cmdsynopsis.attlist (command | arg | group | sbr)+ synopfragment*) ;
calloutlist ::= calloutlist::(calloutlist.attlist formalobject.title.content? callout+) ;
publisher.attlist ::= common.attrib publisher.role.attrib local.publisher.attrib ;
keycode ::= keycode::(keycode.attlist smallcptr.char.mix*) ;
link.attlist ::= (endterm::string())? linkendreq.attrib (type::string())? common.attrib link.role.attrib local.link.attrib ;
productname.attlist ::= (class::("service" | "trade" | "registered" | "copyright"))? common.attrib productname.role.attrib local.productname.attrib ;
refsect1info ::= refsect1info::(refsect1info.attlist info.class+) ;
simplesect.attlist ::= common.attrib simplesect.role.attrib local.simplesect.attrib ;
refclass ::= refclass::(refclass.attlist refclass.char.mix*) ;
note.attlist ::= common.attrib admon.role.attrib local.admon.attrib ;
tbl.hdft.mdl ::= colspec* row+ ;
bookcomponent.content ::= (divcomponent.mix+ (sect1*) | (refentry.class*) | (simplesect*) | (section.class*)) | (sect1+) | (refentry.class+) | (simplesect+) | (section.class+) ;
pagenums ::= pagenums::(pagenums.attlist docinfo.char.mix*) ;
jobtitle ::= jobtitle::(jobtitle.attlist docinfo.char.mix*) ;
inlinemediaobject.attlist ::= common.attrib inlinemediaobject.role.attrib local.inlinemediaobject.attrib ;
msgmain ::= msgmain::(msgmain.attlist title? msgtext) ;
book.attlist ::= (fpi::string())? label.attrib status.attrib common.attrib book.role.attrib local.book.attrib ;
hardware.attlist ::= moreinfo.attrib common.attrib hardware.role.attrib local.hardware.attrib ;
substeps.attlist ::= (performance::("optional" | "required"))? common.attrib substeps.role.attrib local.substeps.attrib ;
dedication ::= dedication::(dedication.attlist sect.title.content? legalnotice.mix+) ;
question.attlist ::= common.attrib question.role.attrib local.question.attrib ;
section.attlist ::= label.attrib status.attrib common.attrib section.role.attrib local.section.attrib ;
areaset ::= areaset::(areaset.attlist area+) ;
listitem ::= listitem::(listitem.attlist component.mix+) ;
literal ::= literal::(literal.attlist cptr.char.mix*) ;
modespec.attlist ::= (application::notation.class)? common.attrib modespec.role.attrib local.modespec.attrib ;
seeie ::= seeie::(seeie.attlist ndxterm.char.mix*) ;
surname.attlist ::= common.attrib surname.role.attrib local.surname.attrib ;
screenco.attlist ::= common.attrib screenco.role.attrib local.screenco.attrib ;
coref ::= coref::(coref.attlist ε) ;
msglevel ::= msglevel::(msglevel.attlist smallcptr.char.mix*) ;
abbrev ::= abbrev::(abbrev.attlist word.char.mix*) ;
legalnotice.attlist ::= common.attrib legalnotice.role.attrib local.legalnotice.attrib ;
informalequation ::= informalequation::(informalequation.attlist blockinfo? equation.content) ;
table.attlist ::= (frame::("top" | "bottom" | "topbot" | "all" | "sides" | "none"))? (colsep::yesorno)? (rowsep::yesorno)? tbl.table.att bodyatt secur ;
tocchap ::= tocchap::(tocchap.attlist tocentry+ toclevel1*) ;
tip ::= tip::(tip.attlist title? admon.mix+) ;
contrib ::= contrib::(contrib.attlist docinfo.char.mix*) ;
contractsponsor.attlist ::= common.attrib contractsponsor.role.attrib local.contractsponsor.attrib ;
literallayout ::= literallayout::(literallayout.attlist (para.char.mix | co | coref | textobject | lineannotation)*) ;
areaspec.attlist ::= (units::("calspair" | "linecolumn" | "linerange" | "linecolumnpair" | "other"))? (otherunits::string())? common.attrib areaspec.role.attrib local.areaspec.attrib ;
errorname ::= errorname::(errorname.attlist smallcptr.char.mix*) ;
funcdef.attlist ::= common.attrib funcdef.role.attrib local.funcdef.attrib ;
linespecific.attrib ::= (format::"linespecific")? (linenumbering::("numbered" | "unnumbered"))? ;
state ::= state::(state.attlist docinfo.char.mix*) ;
answer.attlist ::= common.attrib answer.role.attrib local.answer.attrib ;
fieldsynopsis ::= fieldsynopsis::(fieldsynopsis.attlist modifier* type? varname initializer?) ;
foreignphrase ::= foreignphrase::(foreignphrase.attlist para.char.mix*) ;
destructorsynopsis ::= destructorsynopsis::(destructorsynopsis.attlist modifier* methodname? (methodparam+) | void exceptionname*) ;
area ::= area::(area.attlist ε) ;
jobtitle.attlist ::= common.attrib jobtitle.role.attrib local.jobtitle.attrib ;
lineage ::= lineage::(lineage.attlist docinfo.char.mix*) ;
phrase.attlist ::= common.attrib phrase.role.attrib local.phrase.attrib ;
subjectset.attlist ::= (scheme::string())? common.attrib subjectset.role.attrib local.subjectset.attrib ;
anchor.attlist ::= idreq.attrib pagenum.attrib remap.attrib xreflabel.attrib revisionflag.attrib effectivity.attrib anchor.role.attrib local.anchor.attrib ;
conftitle.attlist ::= common.attrib conftitle.role.attrib local.conftitle.attrib ;
varargs ::= varargs::(varargs.attlist ε) ;
setindex.attlist ::= common.attrib indexes.role.attrib local.indexes.attrib ;
literal.attlist ::= moreinfo.attrib common.attrib literal.role.attrib local.literal.attrib ;
audiodata ::= audiodata::(audiodata.attlist ε) ;
seeie.attlist ::= linkend.attrib common.attrib seeie.role.attrib local.seeie.attrib ;
indexinfo ::= indexinfo::(indexinfo.attlist info.class+) ;
date.attlist ::= common.attrib date.role.attrib local.date.attrib ;
attribution ::= attribution::(attribution.attlist para.char.mix*) ;
revnumber.attlist ::= common.attrib revnumber.role.attrib local.revnumber.attrib ;
holder.attlist ::= common.attrib holder.role.attrib local.holder.attrib ;
seriesvolnums.attlist ::= common.attrib seriesvolnums.role.attrib local.seriesvolnums.attrib ;
toclevel5 ::= toclevel5::(toclevel5.attlist tocentry+) ;
coref.attlist ::= label.attrib linkendreq.attrib common.attrib coref.role.attrib local.coref.attrib ;
toclevel4 ::= toclevel4::(toclevel4.attlist tocentry+ toclevel5*) ;
toclevel3 ::= toclevel3::(toclevel3.attlist tocentry+ toclevel4*) ;
videodata.attlist ::= (width::string())? (contentwidth::string())? (depth::string())? (contentdepth::string())? (align::("left" | "right" | "center"))? (valign::("top" | "middle" | "bottom"))? (scale::string())? (scalefit::yesorno.attvals)? objectdata.attrib common.attrib videodata.role.attrib local.videodata.attrib ;
toclevel2 ::= toclevel2::(toclevel2.attlist tocentry+ toclevel3*) ;
option ::= option::(option.attlist cptr.char.mix*) ;
toclevel1 ::= toclevel1::(toclevel1.attlist tocentry+ toclevel2*) ;
msglevel.attlist ::= common.attrib msglevel.role.attrib local.msglevel.attrib ;
entry ::= entry::(entry.attlist tbl.entry.mdl*) ;
inlineequation.content ::= alt? (graphic+) | (inlinemediaobject+) ;
objectinfo ::= objectinfo::(objectinfo.attlist info.class+) ;
refsect2.attlist ::= status.attrib common.attrib refsect2.role.attrib local.refsect2.attrib ;
co ::= co::(co.attlist ε) ;
screen ::= screen::(screen.attlist (para.char.mix | co | coref | textobject | lineannotation)*) ;
term ::= term::(term.attlist para.char.mix*) ;
tip.attlist ::= common.attrib admon.role.attrib local.admon.attrib ;
guilabel.attlist ::= moreinfo.attrib common.attrib guilabel.role.attrib local.guilabel.attrib ;
symbol.attlist ::= (class::"limit")? common.attrib symbol.role.attrib local.symbol.attrib ;
country.attlist ::= common.attrib country.role.attrib local.country.attrib ;
audioobject.attlist ::= common.attrib audioobject.role.attrib local.audioobject.attrib ;
void.attlist ::= common.attrib void.role.attrib local.void.attrib ;
synopsis.attlist ::= label.attrib linespecific.attrib common.attrib synopsis.role.attrib local.synopsis.attrib ;
errorname.attlist ::= common.attrib errorname.role.attrib local.errorname.attrib ;
revhistory.attlist ::= common.attrib revhistory.role.attrib local.revhistory.attrib ;
set ::= set::(set.attlist div.title.content? setinfo? toc? book.class+ setindex?) ;
medialabel.attlist ::= (class::("cartridge" | "cdrom" | "disk" | "tape"))? common.attrib medialabel.role.attrib local.medialabel.attrib ;
secondaryie.attlist ::= linkends.attrib common.attrib primsecterie.role.attrib local.primsecterie.attrib ;
constructorsynopsis.attlist ::= (language::string())? common.attrib constructorsynopsis.role.attrib local.constructorsynopsis.attrib ;
postcode.attlist ::= common.attrib postcode.role.attrib local.postcode.attrib ;
lineage.attlist ::= common.attrib lineage.role.attrib local.lineage.attrib ;
imageobject ::= imageobject::(imageobject.attlist objectinfo? imagedata) ;
funcsynopsis ::= funcsynopsis::(funcsynopsis.attlist (funcsynopsisinfo | funcprototype)+) ;
paramdef ::= paramdef::(paramdef.attlist (string() | type | replaceable | parameter | funcparams)*) ;
seg ::= seg::(seg.attlist para.char.mix*) ;
thead ::= thead::(thead.attlist tbl.hdft.mdl) ;
see ::= see::(see.attlist ndxterm.char.mix*) ;
tertiary ::= tertiary::(tertiary.attlist ndxterm.char.mix*) ;
attribution.attlist ::= common.attrib attribution.role.attrib local.attribution.attrib ;
formalpara ::= formalpara::(formalpara.attlist title ndxterm.class* para) ;
emphasis.attlist ::= common.attrib emphasis.role.attrib local.emphasis.attrib ;
chapter ::= chapter::(chapter.attlist beginpage? chapterinfo? bookcomponent.title.content nav.class* tocchap? bookcomponent.content nav.class*) ;
methodparam ::= methodparam::(methodparam.attlist modifier* type? (parameter initializer?) | funcparams modifier*) ;
videoobject.attlist ::= common.attrib videoobject.role.attrib local.videoobject.attrib ;
refsect.title.content ::= title subtitle? titleabbrev? ;
refsect2info ::= refsect2info::(refsect2info.attlist info.class+) ;
referenceinfo.attlist ::= common.attrib referenceinfo.role.attrib local.referenceinfo.attrib ;
msgrel.attlist ::= common.attrib msgrel.role.attrib local.msgrel.attrib ;
toclevel3.attlist ::= common.attrib toclevel3.role.attrib local.toclevel3.attrib ;
glossterm.attlist ::= linkend.attrib (baseform::string())? common.attrib glossterm.role.attrib local.glossterm.attrib ;
confsponsor.attlist ::= common.attrib confsponsor.role.attrib local.confsponsor.attrib ;
glossdiv ::= glossdiv::(glossdiv.attlist sect.title.content component.mix* glossentry+) ;
shortcut ::= shortcut::(shortcut.attlist (keycap | keycombo | keysym | mousebutton)+) ;
status.attrib ::= (status::string())? local.status.attrib ;
div.title.content ::= title subtitle? titleabbrev? ;
secondary.attlist ::= (sortas::string())? common.attrib primsecter.role.attrib local.primsecter.attrib ;
refdescriptor ::= refdescriptor::(refdescriptor.attlist refname.char.mix*) ;
indexterm ::= indexterm::(indexterm.attlist primary? ((secondary ((tertiary (see | (seealso+))?) | see | (seealso+))?) | see | (seealso+))?) ;
year ::= year::(year.attlist docinfo.char.mix*) ;
authorinitials ::= authorinitials::(authorinitials.attlist docinfo.char.mix*) ;
prompt.attlist ::= moreinfo.attrib common.attrib prompt.role.attrib local.prompt.attrib ;
guiicon ::= guiicon::(guiicon.attlist (smallcptr.char.mix | accel)*) ;
bibliography.attlist ::= status.attrib common.attrib bibliography.role.attrib local.bibliography.attrib ;
honorific.attlist ::= common.attrib honorific.role.attrib local.honorific.attrib ;
footnote.attlist ::= label.attrib common.attrib footnote.role.attrib local.footnote.attrib ;
callout ::= callout::(callout.attlist component.mix+) ;
msgtext ::= msgtext::(msgtext.attlist component.mix+) ;
prefaceinfo ::= prefaceinfo::(prefaceinfo.attlist info.class+) ;
guibutton ::= guibutton::(guibutton.attlist (smallcptr.char.mix | accel)*) ;
common.attrib ::= id.attrib lang.attrib remap.attrib xreflabel.attrib revisionflag.attrib effectivity.attrib local.common.attrib ;
pubdate ::= pubdate::(pubdate.attlist docinfo.char.mix*) ;
exceptionname.attlist ::= common.attrib exceptionname.role.attrib local.exceptionname.attrib ;
partintro.attlist ::= label.attrib common.attrib partintro.role.attrib local.partintro.attrib ;
tocentry ::= tocentry::(tocentry.attlist para.char.mix*) ;
graphicco.attlist ::= common.attrib graphicco.role.attrib local.graphicco.attrib ;
see.attlist ::= common.attrib seeseealso.role.attrib local.seeseealso.attrib ;
mediaobject ::= mediaobject::(mediaobject.attlist objectinfo? mediaobject.mix+ caption?) ;
important ::= important::(important.attlist title? admon.mix+) ;
abstract ::= abstract::(abstract.attlist title? para.class+) ;
sect4.attlist ::= (renderas::("sect1" | "sect2" | "sect3" | "sect5"))? label.attrib status.attrib common.attrib sect4.role.attrib local.sect4.attrib ;
application.attlist ::= (class::("hardware" | "software"))? moreinfo.attrib common.attrib application.role.attrib local.application.attrib ;
simplelist.attlist ::= (columns::string())? (type::("inline" | "vert" | "horiz"))? common.attrib simplelist.role.attrib local.simplelist.attrib ;
formalpara.attlist ::= common.attrib formalpara.role.attrib local.formalpara.attrib ;
artpagenums ::= artpagenums::(artpagenums.attlist docinfo.char.mix*) ;
toc.attlist ::= pagenum.attrib common.attrib toc.role.attrib local.toc.attrib ;
collabname ::= collabname::(collabname.attlist docinfo.char.mix*) ;
subtitle ::= subtitle::(subtitle.attlist title.char.mix*) ;
glossdiv.attlist ::= status.attrib common.attrib glossdiv.role.attrib local.glossdiv.attrib ;
mousebutton ::= mousebutton::(mousebutton.attlist smallcptr.char.mix*) ;
structfield.attlist ::= common.attrib structfield.role.attrib local.structfield.attrib ;
tbody ::= tbody::(tbody.attlist row+) ;
returnvalue.attlist ::= common.attrib returnvalue.role.attrib local.returnvalue.attrib ;
itemizedlist.attlist ::= (spacing::("normal" | "compact"))? mark.attrib common.attrib itemizedlist.role.attrib local.itemizedlist.attrib ;
setinfo ::= setinfo::(setinfo.attlist info.class+) ;
issuenum ::= issuenum::(issuenum.attlist docinfo.char.mix*) ;
collab ::= collab::(collab.attlist collabname affiliation*) ;
type.attlist ::= common.attrib type.role.attrib local.type.attrib ;
ackno ::= ackno::(ackno.attlist docinfo.char.mix*) ;
refsynopsisdiv ::= refsynopsisdiv::(refsynopsisdiv.attlist refsynopsisdivinfo? refsect.title.content? (refcomponent.mix+ refsect2*) | (refsect2+)) ;
informalfigure.attlist ::= (float::yesorno.attvals)? (pgwide::yesorno.attvals)? label.attrib common.attrib informalfigure.role.attrib local.informalfigure.attrib ;
glosssee ::= glosssee::(glosssee.attlist para.char.mix*) ;
keysym ::= keysym::(keysym.attlist smallcptr.char.mix*) ;
superscript ::= superscript::(superscript.attlist (string() | link.char.class | emphasis | replaceable | symbol | inlinegraphic | inlinemediaobject | base.char.class | other.char.class)*) ;
seglistitem ::= seglistitem::(seglistitem.attlist seg+) ;
contractnum.attlist ::= common.attrib contractnum.role.attrib local.contractnum.attrib ;
classname ::= classname::(classname.attlist smallcptr.char.mix*) ;
street ::= street::(street.attlist docinfo.char.mix*) ;
sbr ::= sbr::(sbr.attlist ε) ;
trademark.attlist ::= (class::("service" | "trade" | "registered" | "copyright"))? common.attrib trademark.role.attrib local.trademark.attrib ;
tbl.tgroup.mdl ::= colspec* spanspec* thead? tfoot? tbody ;
--------------------markup::kml.bgf--------------------
TextNode ::= (nodes::Node)+ ;
ScreenXY ::= x::String y::String xunits::String yunits::String ;
Size ::= x::String y::String xunits::String yunits::String ;
OverlayXY ::= x::String y::String xunits::String yunits::String ;
--------------------markup::graphml-doux.bgf--------------------
Key ::= for::ElemType attrName::String type::AttrType defValue::String ;
Graph ::= (contents::Element)+ edgeDefault::EdgeType ;
Edge ::= source::Node target::Node sourceport::Port targetport::Port ;
Element ::= Key ;
 Element ::= Graph ;
 Element ::= Edge ;
 Element ::= HyperEdge ;
 Element ::= Node ;
 Element ::= id::String (datas::Data)+ ;
Data ::= key::String value::String ;
EndPoint ::= node::Node port::Port ;
Node ::= subgraph::Graph (ports::Port)+ ;
Root ::= (keys::Key)+ (graphs::Graph)+ ;
--------------------markup::json-rascal-abstract.bgf--------------------
Value ::= (null::ε) | (object::(members::((memberName::string() memberValue::Value)*))) | (array::(values::(Value*))) | (integer::(n::integer())) | (float::(r::integer())) | (string::(s::string())) | (boolean::(b::("true" | "false"))) ;
--------------------markup::json-rascal-concrete.bgf--------------------
Object ::= [Object] "{" members::({Member ","}*) "}" ;
Member ::= [Member] memberName::StringLiteral ":" memberValue::Value ;
Array ::= [Array] "[" values::({Value ","}*) "]" ;
--------------------markup::json-zaytsev-abstract.bgf--------------------
JSO ::= (jsnumber::(n::integer())) | (jsstring::(s::string())) | (jsboolean::(b::("true" | "false"))) | (jsarray::(xs::(JSO*))) | (jsobject::(kvs::((JSO JSO)*))) | (jsnull::ε) ;
--------------------markup::json-zaytsev-concrete.bgf--------------------
JSONKeyValue ::= key::JSONBasicType ":" val::JSONBasicType ;
JSONObject ::= "{" {JSONKeyValue ","}* "}" ;
JSONNumber ::= "-"? Digits ("." Digits)? ;
JSONArray ::= "[" {JSONBasicType ","}* "]" ;
--------------------markup::mathml-furubayashi.bgf--------------------
mml.not.qname ::= not::(ε mml.operators.common.attrib) ;
mml.piecewise.qname ::= piecewise::(mml.piece.qname* mml.otherwise.qname? mml.Common.attrib) ;
mml.mrow.qname ::= mrow::(mml.PresExpression mml.Common.attrib) ;
mml.sec.qname ::= sec::(ε mml.operators.common.attrib) ;
mml.framespacing.datatype ::= string() | (string() | "veryverythinmathspace" | "verythinmathspace" | "thinmathspace" | "mediummathspace" | "thickmathspace" | "verythickmathspace" | "veryverythickmathspace") string() | (string() | "veryverythinmathspace" | "verythinmathspace" | "thinmathspace" | "mediummathspace" | "thickmathspace" | "verythickmathspace" | "veryverythickmathspace") ;
mml.floor.qname ::= floor::(ε mml.operators.common.attrib) ;
mml.cot.qname ::= cot::(ε mml.operators.common.attrib) ;
mml.maligngroup.qname ::= maligngroup::(ε mml.Common.attrib mml.att-groupalign) ;
mml.vector.qname ::= vector::(mml.ContentExpression mml.Common.attrib) ;
mml.partialdiff.qname ::= partialdiff::(ε mml.operators.common.attrib) ;
mml.ln.qname ::= ln::(ε mml.operators.common.attrib) ;
mml.matrix.qname ::= matrix::(mml.ContentExpression mml.Common.attrib) ;
mml.moment.qname ::= moment::(ε mml.operators.common.attrib) ;
mml.mover.qname ::= mover::(mml.PresExpression mml.Common.attrib mml.att-accent) ;
mml.mpadded.qname ::= mpadded::(mml.PresExpression mml.Common.attrib mml.att-sizeinfo mml.att-lspace) ;
mml.mspace.qname ::= mspace::(ε mml.Common.attrib mml.att-sizeinfo mml.att-linebreak) ;
mml.msubsup.qname ::= msubsup::(mml.PresExpression mml.Common.attrib mml.att-subscriptshift mml.att-superscriptshift) ;
mml.columnspacing.datatype ::= (string() string() | "veryverythinmathspace" | "verythinmathspace" | "thinmathspace" | "mediummathspace" | "thickmathspace" | "verythickmathspace" | "veryverythickmathspace")+ ;
mml.csymbol.qname ::= csymbol::((mml.MathMLCharacters | mml.PresInCont)* mml.Common.attrib mml.att-type mml.att-definition mml.att-encoding) ;
mml.arctanh.qname ::= arctanh::(ε mml.operators.common.attrib) ;
mml.msub.qname ::= msub::(mml.PresExpression mml.Common.attrib mml.att-subscriptshift) ;
mml.implies.qname ::= implies::(ε mml.operators.common.attrib) ;
mml.notsubset.qname ::= notsubset::(ε mml.operators.common.attrib) ;
mml.annotation.qname ::= annotation::(mml.Annotation.datatype mml.Common.attrib mml.att-encoding) ;
mml.ident.qname ::= ident::(ε mml.operators.common.attrib) ;
mml.apply.qname ::= apply::(mml.ContentExpression mml.Common.attrib) ;
mml.equivalent.qname ::= equivalent::(ε mml.operators.common.attrib) ;
mml.mtr.qname ::= mtr::(mml.PresExpression mml.Common.attrib mml.att-rowalign mml.att-columnalign mml.att-groupalign) ;
mml.ci.qname ::= ci::((mml.MathMLCharacters | mml.PresInCont)* mml.Common.attrib mml.att-type mml.att-definition mml.att-encoding) ;
mml.mode.qname ::= mode::(ε mml.operators.common.attrib) ;
mml.menclose.qname ::= menclose::(mml.PresExpression mml.Common.attrib (notation::("longdiv" | "actuarial" | "radical"))?) ;
mml.root.qname ::= root::(ε mml.operators.common.attrib) ;
mml.mn.qname ::= mn::((mml.MathMLCharacters | mml.malignmark.qname)* mml.Common.attrib mml.att-fontinfo) ;
mml.factorial.qname ::= factorial::(ε mml.operators.common.attrib) ;
mml.max.qname ::= max::(ε mml.operators.common.attrib) ;
mml.false.qname ::= false::(ε mml.operators.common.attrib) ;
mml.arcsinh.qname ::= arcsinh::(ε mml.operators.common.attrib) ;
mml.intersect.qname ::= intersect::(ε mml.operators.common.attrib) ;
mml.complexes.qname ::= complexes::(ε mml.operators.common.attrib) ;
mml.exp.qname ::= exp::(ε mml.operators.common.attrib) ;
mml.condition.qname ::= condition::(mml.ContentExpression mml.Common.attrib) ;
mml.primes.qname ::= primes::(ε mml.operators.common.attrib) ;
mml.lcm.qname ::= lcm::(ε mml.operators.common.attrib) ;
mml.reals.qname ::= reals::(ε mml.operators.common.attrib) ;
mml.logbase.qname ::= logbase::(mml.ContentExpression mml.Common.attrib) ;
mml.arctan.qname ::= arctan::(ε mml.operators.common.attrib) ;
mml.att-sizeinfo ::= mml.att-width mml.att-height mml.att-depth ;
mml.degree.qname ::= degree::(mml.ContentExpression mml.Common.attrib) ;
mml.fn.qname ::= fn::(mml.ContentExpression mml.operators.common.attrib) ;
mml.arcsin.qname ::= arcsin::(ε mml.operators.common.attrib) ;
mml.malignmark.qname ::= malignmark::(ε mml.att-edge) ;
mml.diff.qname ::= diff::(ε mml.operators.common.attrib) ;
mml.domain.qname ::= domain::(ε mml.operators.common.attrib) ;
mml.cos.qname ::= cos::(ε mml.operators.common.attrib) ;
mml.sdev.qname ::= sdev::(ε mml.operators.common.attrib) ;
mml.times.qname ::= times::(ε mml.operators.common.attrib) ;
mml.mtable.qname ::= mtable::(mml.PresExpression mml.Common.attrib mml.att-tableinfo) ;
mml.log.qname ::= log::(ε mml.operators.common.attrib) ;
mml.att-tableinfo ::= mml.att-align mml.att-rowalign mml.att-columnalign mml.att-columnwidth mml.att-groupalign mml.att-alignmentscope mml.att-rowspacing mml.att-columnspacing mml.att-rowlines mml.att-columnlines mml.att-frame mml.att-framespacing mml.att-equalrows mml.att-equalcolumns mml.att-displaystyle ;
mml.operators.common.attrib ::= mml.Common.attrib mml.att-definition mml.att-encoding ;
mml.annotation-xml.qname ::= annotation-xml::(mml.Annotation-xml.datatype mml.Common.attrib mml.att-encoding) ;
mml.divide.qname ::= divide::(ε mml.operators.common.attrib) ;
mml.emptyset.qname ::= emptyset::(ε mml.operators.common.attrib) ;
mml.integers.qname ::= integers::(ε mml.operators.common.attrib) ;
mml.reln.qname ::= reln::(mml.ContentExpression mml.Common.attrib) ;
mml.matrixrow.qname ::= matrixrow::(mml.ContentExpression mml.Common.attrib) ;
mml.notprsubset.qname ::= notprsubset::(ε mml.operators.common.attrib) ;
mml.codomain.qname ::= codomain::(ε mml.operators.common.attrib) ;
mml.otherwise.qname ::= otherwise::(mml.ContentExpression mml.Common.attrib) ;
mml.eq.qname ::= eq::(ε mml.operators.common.attrib) ;
mml.curl.qname ::= curl::(ε mml.operators.common.attrib) ;
mml.inverse.qname ::= inverse::(ε mml.operators.common.attrib) ;
mml.quotient.qname ::= quotient::(ε mml.operators.common.attrib) ;
mml.semantics.qname ::= semantics::(mml.ContentExpression mml.Common.attrib mml.att-definition mml.att-encoding) ;
mml.infinity.qname ::= infinity::(ε mml.operators.common.attrib) ;
mml.setdiff.qname ::= setdiff::(ε mml.operators.common.attrib) ;
mml.or.qname ::= or::(ε mml.operators.common.attrib) ;
mml.subset.qname ::= subset::(ε mml.operators.common.attrib) ;
mml.arccsc.qname ::= arccsc::(ε mml.operators.common.attrib) ;
mml.munderover.qname ::= munderover::(mml.PresExpression mml.Common.attrib mml.att-accent mml.att-accentunder) ;
mml.mglyph.qname ::= mglyph::(ε mml.att-alt mml.att-fontfamily mml.att-index) ;
mml.list.qname ::= list::(mml.ContentExpression mml.Common.attrib mml.att-order) ;
mml.real.qname ::= real::(ε mml.operators.common.attrib) ;
mml.mi.qname ::= mi::((mml.MathMLCharacters | mml.malignmark.qname)* mml.Common.attrib mml.att-fontinfo) ;
mml.approx.qname ::= approx::(ε mml.operators.common.attrib) ;
mml.plus.qname ::= plus::(ε mml.operators.common.attrib) ;
mml.mmultiscripts.qname ::= mmultiscripts::(mml.PresExpression mml.Common.attrib mml.att-subscriptshift mml.att-superscriptshift) ;
mml.mfrac.qname ::= mfrac::(mml.PresExpression mml.Common.attrib mml.att-bevelled mml.att-linethickness) ;
mml.xor.qname ::= xor::(ε mml.operators.common.attrib) ;
mml.mtext.qname ::= mtext::((mml.MathMLCharacters | mml.malignmark.qname)* mml.Common.attrib mml.att-fontinfo) ;
mml.neq.qname ::= neq::(ε mml.operators.common.attrib) ;
mml.rem.qname ::= rem::(ε mml.operators.common.attrib) ;
mml.csch.qname ::= csch::(ε mml.operators.common.attrib) ;
mml.leq.qname ::= leq::(ε mml.operators.common.attrib) ;
mml.outerproduct.qname ::= outerproduct::(ε mml.operators.common.attrib) ;
mml.conjugate.qname ::= conjugate::(ε mml.operators.common.attrib) ;
mml.domainofapplication.qname ::= domainofapplication::(mml.ContentExpression mml.Common.attrib) ;
mml.card.qname ::= card::(ε mml.operators.common.attrib) ;
mml.geq.qname ::= geq::(ε mml.operators.common.attrib) ;
mml.att-actiontype ::= ((actiontype::"toggle" selection::mml.positiveinteger.datatype) | (actiontype::"statusline") | (actiontype::"tooltip") | (actiontype::"highlight" mml.color.datatype*) | (actiontype::"menu" selection::mml.positiveinteger.datatype))? ;
mml.true.qname ::= true::(ε mml.operators.common.attrib) ;
mml.compose.qname ::= compose::(ε mml.operators.common.attrib) ;
mml.mroot.qname ::= mroot::(mml.PresExpression mml.Common.attrib) ;
mml.union.qname ::= union::(ε mml.operators.common.attrib) ;
mml.median.qname ::= median::(ε mml.operators.common.attrib) ;
mml.math.qname ::= math::(mml.MathExpression mml.att-topinfo mml.att-browif) ;
mml.lt.qname ::= lt::(ε mml.operators.common.attrib) ;
mml.Annotation-xml.datatype ::= (string() | (string()* mml.Annotation-xml.datatype))* ;
mml.lambda.qname ::= lambda::(mml.ContentExpression mml.Common.attrib) ;
mml.sum.qname ::= sum::(ε mml.operators.common.attrib) ;
mml.mean.qname ::= mean::(ε mml.operators.common.attrib) ;
mml.interval.qname ::= interval::(mml.ContentExpression mml.Common.attrib mml.att-closure) ;
mml.mlabeledtr.qname ::= mlabeledtr::(mml.PresExpression mml.Common.attrib mml.att-rowalign mml.att-columnalign mml.att-groupalign) ;
mml.gcd.qname ::= gcd::(ε mml.operators.common.attrib) ;
mml.msup.qname ::= msup::(mml.PresExpression mml.Common.attrib mml.att-superscriptshift) ;
mml.cosh.qname ::= cosh::(ε mml.operators.common.attrib) ;
mml.mphantom.qname ::= mphantom::(mml.PresExpression mml.Common.attrib) ;
mml.arcsec.qname ::= arcsec::(ε mml.operators.common.attrib) ;
mml.mfenced.qname ::= mfenced::(mml.PresExpression mml.Common.attrib mml.att-open mml.att-close mml.att-separators) ;
mml.uplimit.qname ::= uplimit::(mml.ContentExpression mml.Common.attrib) ;
mml.merror.qname ::= merror::(mml.PresExpression mml.Common.attrib) ;
mml.Common.attrib ::= (xlink:href::mml.uri.datatype)? (class::string())? (style::string())? (id::mml.id.datatype)? (xref::mml.idref.datatype)? (other::string())? ;
mml.ceiling.qname ::= ceiling::(ε mml.operators.common.attrib) ;
mml.notanumber.qname ::= notanumber::(ε mml.operators.common.attrib) ;
mml.limit.qname ::= limit::(ε mml.operators.common.attrib) ;
mml.sech.qname ::= sech::(ε mml.operators.common.attrib) ;
mml.arccot.qname ::= arccot::(ε mml.operators.common.attrib) ;
mml.transpose.qname ::= transpose::(ε mml.operators.common.attrib) ;
mml.divergence.qname ::= divergence::(ε mml.operators.common.attrib) ;
mml.att-browif ::= mml.att-type mml.att-name mml.att-height mml.att-width mml.att-baseline mml.att-overflow mml.att-altimg mml.att-alttext ;
mml.imaginaryi.qname ::= imaginaryi::(ε mml.operators.common.attrib) ;
mml.abs.qname ::= abs::(ε mml.operators.common.attrib) ;
mml.minus.qname ::= minus::(ε mml.operators.common.attrib) ;
mml.piece.qname ::= piece::(mml.ContentExpression mml.Common.attrib) ;
mml.cartesianproduct.qname ::= cartesianproduct::(ε mml.operators.common.attrib) ;
mml.declare.qname ::= declare::(mml.ContentExpression mml.Common.attrib mml.att-type mml.att-scope mml.att-nargs mml.att-occurrence mml.att-definition mml.att-encoding) ;
mml.factorof.qname ::= factorof::(ε mml.operators.common.attrib) ;
mml.in.qname ::= in::(ε mml.operators.common.attrib) ;
mml.mstyle.qname ::= mstyle::(mml.PresExpression mml.Common.attrib mml.att-fontinfo mml.att-opinfo mml.att-lquote mml.att-rquote mml.att-linethickness mml.att-scriptlevel mml.att-scriptsizemultiplier mml.att-scriptminsize mml.att-background mml.att-veryverythinmathspace mml.att-verythinmathspace mml.att-thinmathspace mml.att-mediummathspace mml.att-thickmathspace mml.att-verythickmathspace mml.att-veryverythickmathspace mml.att-open mml.att-close mml.att-separators mml.att-subscriptshift mml.att-superscriptshift mml.att-accentunder mml.att-tableinfo mml.att-rowspan mml.att-columnspan mml.att-edge mml.att-actiontype) ;
mml.arccsch.qname ::= arccsch::(ε mml.operators.common.attrib) ;
mml.coth.qname ::= coth::(ε mml.operators.common.attrib) ;
mml.eulergamma.qname ::= eulergamma::(ε mml.operators.common.attrib) ;
mml.set.qname ::= set::(mml.ContentExpression mml.Common.attrib mml.att-type) ;
mml.tan.qname ::= tan::(ε mml.operators.common.attrib) ;
mml.exists.qname ::= exists::(ε mml.operators.common.attrib) ;
mml.mtd.qname ::= mtd::(mml.PresExpression mml.Common.attrib mml.att-rowalign mml.att-columnalign mml.att-groupalign mml.att-rowspan mml.att-columnspan) ;
mml.imaginary.qname ::= imaginary::(ε mml.operators.common.attrib) ;
mml.sin.qname ::= sin::(ε mml.operators.common.attrib) ;
mml.arg.qname ::= arg::(ε mml.operators.common.attrib) ;
mml.arccosh.qname ::= arccosh::(ε mml.operators.common.attrib) ;
mml.min.qname ::= min::(ε mml.operators.common.attrib) ;
mml.grad.qname ::= grad::(ε mml.operators.common.attrib) ;
mml.munder.qname ::= munder::(mml.PresExpression mml.Common.attrib mml.att-accentunder) ;
mml.msqrt.qname ::= msqrt::(mml.PresExpression mml.Common.attrib) ;
mml.momentabout.qname ::= momentabout::(mml.ContentExpression mml.Common.attrib) ;
mml.vectorproduct.qname ::= vectorproduct::(ε mml.operators.common.attrib) ;
mml.att-topinfo ::= mml.Common.attrib mml.att-macros mml.att-mode mml.att-display ;
mml.arcsech.qname ::= arcsech::(ε mml.operators.common.attrib) ;
mml.bvar.qname ::= bvar::(mml.ContentExpression mml.Common.attrib) ;
mml.naturalnumbers.qname ::= naturalnumbers::(ε mml.operators.common.attrib) ;
mml.rationals.qname ::= rationals::(ε mml.operators.common.attrib) ;
mml.power.qname ::= power::(ε mml.operators.common.attrib) ;
mml.exponentiale.qname ::= exponentiale::(ε mml.operators.common.attrib) ;
mml.scalarproduct.qname ::= scalarproduct::(ε mml.operators.common.attrib) ;
mml.pi.qname ::= pi::(ε mml.operators.common.attrib) ;
mml.forall.qname ::= forall::(ε mml.operators.common.attrib) ;
mml.arccos.qname ::= arccos::(ε mml.operators.common.attrib) ;
mml.notin.qname ::= notin::(ε mml.operators.common.attrib) ;
mml.variance.qname ::= variance::(ε mml.operators.common.attrib) ;
mml.csc.qname ::= csc::(ε mml.operators.common.attrib) ;
mml.arccoth.qname ::= arccoth::(ε mml.operators.common.attrib) ;
mml.att-opinfo ::= mml.att-form mml.att-fence mml.att-separator mml.att-lspace mml.att-rspace mml.att-stretchy mml.att-symmetric mml.att-maxsize mml.att-minsize mml.att-largeop mml.att-movablelimits mml.att-accent ;
mml.gt.qname ::= gt::(ε mml.operators.common.attrib) ;
mml.int.qname ::= int::(ε mml.operators.common.attrib) ;
mml.product.qname ::= product::(ε mml.operators.common.attrib) ;
mml.cn.qname ::= cn::((mml.MathMLCharacters | mml.PresInCont | mml.sep.qname)* mml.Common.attrib mml.att-type mml.att-base mml.att-definition mml.att-encoding) ;
mml.lowlimit.qname ::= lowlimit::(mml.ContentExpression mml.Common.attrib) ;
mml.tanh.qname ::= tanh::(ε mml.operators.common.attrib) ;
mml.ms.qname ::= ms::((mml.MathMLCharacters | mml.malignmark.qname)* mml.Common.attrib mml.att-fontinfo mml.att-lquote mml.att-rquote) ;
mml.prsubset.qname ::= prsubset::(ε mml.operators.common.attrib) ;
mml.tendsto.qname ::= tendsto::(ε mml.operators.common.attrib mml.att-type) ;
mml.mo.qname ::= mo::((mml.MathMLCharacters | mml.malignmark.qname)* mml.Common.attrib mml.att-fontinfo mml.att-opinfo) ;
mml.maction.qname ::= maction::(mml.PresExpression mml.Common.attrib mml.att-actiontype) ;
mml.align.datatype ::= "top" | "bottom" | "center" | "baseline" | "axis" integer()? ;
mml.selector.qname ::= selector::(ε mml.operators.common.attrib) ;
mml.laplacian.qname ::= laplacian::(ε mml.operators.common.attrib) ;
mml.att-fontinfo ::= mml.att-fontsize mml.att-fontweight mml.att-fontstyle mml.att-fontfamily mml.att-color mml.att-mathvariant mml.att-mathsize mml.att-mathcolor mml.att-mathbackground ;
mml.image.qname ::= image::(ε mml.operators.common.attrib) ;
mml.and.qname ::= and::(ε mml.operators.common.attrib) ;
mml.determinant.qname ::= determinant::(ε mml.operators.common.attrib) ;
mml.sinh.qname ::= sinh::(ε mml.operators.common.attrib) ;
--------------------markup::pnml-anyElement.bgf--------------------
anyElement ::= (α | string() | anyElement)* ;
--------------------markup::pnml-arbitrarydeclarations.bgf--------------------
Unparsed ::= unparsed::(Declaration.content anyElement*) ;
ArbitraryOperator ::= arbitraryoperator::(OperatorDeclaration.content (input::Sort)* output::Sort) ;
--------------------markup::pnml-booleans.bgf--------------------
BooleanConstant ::= booleanconstant::(value::("true" | "false") BuiltInConstant.content) ;
--------------------markup::pnml-conventions.bgf--------------------
positiveintegerlabel.content ::= text::integer() annotationstandard.content ;
nonnegativeintegerlabel.content ::= text::integer() annotationstandard.content ;
--------------------markup::r2ml.bgf--------------------
RuleBase ::= vocabularies::Vocabulary/VocBasic/Vocabulary (externalVocabulaires::Vocabulary/VocBuiltin/ExternalVocabulary)+ (rules::RuleSet)+ ruleBaseID::String ;
--------------------markup::pnml-ext-inhibitor.bgf--------------------
font.element ::= font::((family::string())? (style::string())? (weight::string())? (size::string())? (decoration::("underline" | "overline" | "line-through"))? (align::("left" | "center" | "right"))? (rotation::integer())?) ;
arc.content ::= arc::(identifier.content source::string() target::string() Name? arc.labels (graphics::edgegraphics.content)? toolspecific.element*) ;
page.content ::= page::(identifier.content basicobject.content page.labels netobject.content* (graphics::pagegraphics.content)?) ;
positiveintegerlabel.content ::= text::integer() annotationstandard.content ;
toolspecific.element ::= toolspecific::(tool::string() version::string() anyElement*) ;
nodegraphics.content ::= position.element dimension.element? fill.element? line.element? ;
basicobject.content ::= Name? toolspecific.element* ;
annotationstandard.content ::= (graphics::annotationgraphics.content)? toolspecific.element* ;
dimension.element ::= dimension::(x::positiveDecimal.content y::positiveDecimal.content) ;
edgegraphics.content ::= position.element* line.element? ;
place.content ::= place::(identifier.content basicobject.content place.labels node.content) ;
fill.element ::= fill::((color::color.type)? (gradient-color::color.type)? (gradient-rotation::("vertical" | "horizontal" | "diagonal"))? (image::string())?) ;
coordinate.attributes ::= x::integer() y::integer() ;
net.element ::= net::(identifier.content nettype.uri Name? net.labels page.content+ toolspecific.element*) ;
annotationgraphics.content ::= offset.element fill.element? line.element? font.element? ;
nonnegativeintegerlabel.content ::= text::integer() annotationstandard.content ;
line.element ::= line::((shape::("line" | "curve"))? (color::color.type)? (width::positiveDecimal.content)? (style::("solid" | "dash" | "dot"))?) ;
simpletextlabel.content ::= simpletext.content annotationstandard.content ;
refnode.content ::= identifier.content reference basicobject.content node.content ;
transition.content ::= transition::(identifier.content basicobject.content transition.labels node.content) ;
--------------------markup::pnml-ext-reset.bgf--------------------
font.element ::= font::((family::string())? (style::string())? (weight::string())? (size::string())? (decoration::("underline" | "overline" | "line-through"))? (align::("left" | "center" | "right"))? (rotation::integer())?) ;
arc.content ::= arc::(identifier.content source::string() target::string() Name? arc.labels (graphics::edgegraphics.content)? toolspecific.element*) ;
page.content ::= page::(identifier.content basicobject.content page.labels netobject.content* (graphics::pagegraphics.content)?) ;
positiveintegerlabel.content ::= text::integer() annotationstandard.content ;
toolspecific.element ::= toolspecific::(tool::string() version::string() anyElement*) ;
nodegraphics.content ::= position.element dimension.element? fill.element? line.element? ;
basicobject.content ::= Name? toolspecific.element* ;
annotationstandard.content ::= (graphics::annotationgraphics.content)? toolspecific.element* ;
dimension.element ::= dimension::(x::positiveDecimal.content y::positiveDecimal.content) ;
edgegraphics.content ::= position.element* line.element? ;
place.content ::= place::(identifier.content basicobject.content place.labels node.content) ;
fill.element ::= fill::((color::color.type)? (gradient-color::color.type)? (gradient-rotation::("vertical" | "horizontal" | "diagonal"))? (image::string())?) ;
coordinate.attributes ::= x::integer() y::integer() ;
net.element ::= net::(identifier.content nettype.uri Name? net.labels page.content+ toolspecific.element*) ;
annotationgraphics.content ::= offset.element fill.element? line.element? font.element? ;
nonnegativeintegerlabel.content ::= text::integer() annotationstandard.content ;
line.element ::= line::((shape::("line" | "curve"))? (color::color.type)? (width::positiveDecimal.content)? (style::("solid" | "dash" | "dot"))?) ;
simpletextlabel.content ::= simpletext.content annotationstandard.content ;
refnode.content ::= identifier.content reference basicobject.content node.content ;
transition.content ::= transition::(identifier.content basicobject.content transition.labels node.content) ;
--------------------markup::pnml-ext-resetinhibitor.bgf--------------------
font.element ::= font::((family::string())? (style::string())? (weight::string())? (size::string())? (decoration::("underline" | "overline" | "line-through"))? (align::("left" | "center" | "right"))? (rotation::integer())?) ;
arc.content ::= arc::(identifier.content source::string() target::string() Name? arc.labels (graphics::edgegraphics.content)? toolspecific.element*) ;
page.content ::= page::(identifier.content basicobject.content page.labels netobject.content* (graphics::pagegraphics.content)?) ;
positiveintegerlabel.content ::= text::integer() annotationstandard.content ;
toolspecific.element ::= toolspecific::(tool::string() version::string() anyElement*) ;
nodegraphics.content ::= position.element dimension.element? fill.element? line.element? ;
basicobject.content ::= Name? toolspecific.element* ;
annotationstandard.content ::= (graphics::annotationgraphics.content)? toolspecific.element* ;
dimension.element ::= dimension::(x::positiveDecimal.content y::positiveDecimal.content) ;
edgegraphics.content ::= position.element* line.element? ;
place.content ::= place::(identifier.content basicobject.content place.labels node.content) ;
fill.element ::= fill::((color::color.type)? (gradient-color::color.type)? (gradient-rotation::("vertical" | "horizontal" | "diagonal"))? (image::string())?) ;
coordinate.attributes ::= x::integer() y::integer() ;
net.element ::= net::(identifier.content nettype.uri Name? net.labels page.content+ toolspecific.element*) ;
annotationgraphics.content ::= offset.element fill.element? line.element? font.element? ;
nonnegativeintegerlabel.content ::= text::integer() annotationstandard.content ;
line.element ::= line::((shape::("line" | "curve"))? (color::color.type)? (width::positiveDecimal.content)? (style::("solid" | "dash" | "dot"))?) ;
simpletextlabel.content ::= simpletext.content annotationstandard.content ;
refnode.content ::= identifier.content reference basicobject.content node.content ;
transition.content ::= transition::(identifier.content basicobject.content transition.labels node.content) ;
--------------------markup::pnml-finiteintranges.bgf--------------------
FiniteIntRange ::= finiteintrange::(start::integer() end::integer()) ;
FiniteIntRangeConstant ::= finiteintrangeconstant::(value::integer() FiniteIntRange BuiltInConstant.content) ;
--------------------markup::pnml-guyard-basic.bgf--------------------
Font ::= family::String style::String weight::String size::String decoration::DecorationType align::AlignType rotation::Integer annotationgraphics::AnnotationGraphics ;
NetElement ::= type::URI document::PNMLDocument (contents::NetContent)+ (tools::ToolSpecific)+ netgraphics::NetGraphics name::Name ;
NodeGraphics ::= node::Node position::Position dimension::Dimension fill::Fill line::Line ;
Name ::= net::NetElement netcontent::NetContent ;
AnnotationGraphics ::= namedelement::LabeledElement offset::Offset font::Font fill::Fill line::Line ;
ToolSpecific ::= tool::String version::String (anyelement::AnyElement)+ net::NetElement arc::Arc node::Node ;
Position ::= nodegraphics::NodeGraphics edgegraphics::EdgeGraphics ;
EdgeGraphics ::= arc::Arc (position::Position)+ fill::Fill line::Line ;
PNMLDocument ::= xmlns::URI (nets::NetElement)+ ;
Dimension ::= width::Integer height::Integer nodegraphics::NodeGraphics ;
Transition ::= node::Node ;
Line ::= color::Color width::Integer shape::ShapeType style::StyleType nodegraphics::NodeGraphics edgegraphics::EdgeGraphics annotationgraphics::AnnotationGraphics ;
Label ::= text::String namedelement::LabeledElement ;
Fill ::= gradientrotation::RotationType interiorcolor::Color gradientcolor::Color image::URI nodegraphics::NodeGraphics edgegraphics::EdgeGraphics annotationgraphics::AnnotationGraphics ;
Node ::= netcontentelement::NetContentElement (tools::ToolSpecific)+ nodegraphics::NodeGraphics ;
Arc ::= source::NetContentElement target::NetContentElement (tools::ToolSpecific)+ edgegraphics::EdgeGraphics inscription::Inscription ;
AnyElement ::= name::String text::String ;
--------------------markup::pnml-guyard-modular.bgf--------------------
NetElement ::= type::URI document::PNMLDocument (contents::NetContent)+ (tools::ToolSpecific)+ netgraphics::NetGraphics name::Name ;
ReferencePlace ::= net::NetElement name::Name page::Page module::Module instance::Node ref::NCName importnode::ImportNode ;
AnnotationGraphics ::= namedelement::LabeledElement offset::Offset font::Font fill::Fill line::Line ;
Interface ::= module::Module (importplace::Node)+ (exportplace::Reference)+ (importtransition::Node)+ (exporttransition::Reference)+ ;
PNMLDocument ::= xmlns::URI (nets::NetElement)+ (modules::Module)+ ;
Transition ::= node::Node ;
Instance ::= ref::URI (importplace::ImportNode)+ (importtransition::ImportNode)+ ;
Line ::= color::Color width::Integer shape::ShapeType style::StyleType nodegraphics::NodeGraphics edgegraphics::EdgeGraphics annotationgraphics::AnnotationGraphics ;
Label ::= text::String namedelement::LabeledElement ;
Arc ::= source::NetContentElement target::NetContentElement (tools::ToolSpecific)+ edgegraphics::EdgeGraphics inscription::Inscription ;
AnyElement ::= name::String text::String ;
Font ::= family::String style::String weight::String size::String decoration::DecorationType align::AlignType rotation::Integer annotationgraphics::AnnotationGraphics ;
Page ::= (contents::NetContent)+ (tools::ToolSpecific)+ pagegraphics::PageGraphics ;
NodeGraphics ::= node::Node position::Position dimension::Dimension fill::Fill line::Line ;
Module ::= (interfaces::Interface)+ (netcontents::NetContent)+ document::PNMLDocument ;
Name ::= net::NetElement netcontent::NetContent ;
ToolSpecific ::= tool::String version::String (anyelement::AnyElement)+ net::NetElement arc::Arc node::Node page::Page ;
Position ::= nodegraphics::NodeGraphics edgegraphics::EdgeGraphics ;
EdgeGraphics ::= arc::Arc (position::Position)+ fill::Fill line::Line ;
ImportNode ::= parameter::NCName ref::Reference instanceplace::Instance instancetransition::Instance ;
Dimension ::= width::Integer height::Integer nodegraphics::NodeGraphics ;
Fill ::= gradientrotation::RotationType interiorcolor::Color gradientcolor::Color image::URI nodegraphics::NodeGraphics edgegraphics::EdgeGraphics annotationgraphics::AnnotationGraphics ;
Node ::= Reference ;
 Node ::= netcontentelement::NetContentElement (tools::ToolSpecific)+ nodegraphics::NodeGraphics ;
ReferenceTransition ::= net::NetElement name::Name page::Page module::Module instance::Node ref::NCName importnode::ImportNode ;
--------------------markup::pnml-guyard-simplified.bgf--------------------
NetElement ::= type::URI document::PNMLDocument (contents::NetContent)+ name::Name ;
Name ::= net::NetElement netContent::NetContent ;
PNMLDocument ::= xmlns::URI (nets::NetElement)+ ;
Label ::= text::String labeledElement::LabeledElement ;
Arc ::= source::NetContentElement target::NetContentElement ;
--------------------markup::pnml-guyard-structured.bgf--------------------
NetElement ::= type::URI document::PNMLDocument (contents::NetContent)+ (tools::ToolSpecific)+ netgraphics::NetGraphics name::Name ;
ReferencePlace ::= net::NetElement name::Name page::Page ref::Node ;
AnnotationGraphics ::= namedelement::LabeledElement offset::Offset font::Font fill::Fill line::Line ;
PNMLDocument ::= xmlns::URI (nets::NetElement)+ ;
Transition ::= node::Node ;
Line ::= color::Color width::Integer shape::ShapeType style::StyleType nodegraphics::NodeGraphics edgegraphics::EdgeGraphics annotationgraphics::AnnotationGraphics ;
Label ::= text::String namedelement::LabeledElement ;
Arc ::= source::NetContentElement target::NetContentElement (tools::ToolSpecific)+ edgegraphics::EdgeGraphics inscription::Inscription ;
AnyElement ::= name::String text::String ;
Font ::= family::String style::String weight::String size::String decoration::DecorationType align::AlignType rotation::Integer annotationgraphics::AnnotationGraphics ;
Page ::= (contents::NetContent)+ (tools::ToolSpecific)+ pagegraphics::PageGraphics ;
NodeGraphics ::= node::Node position::Position dimension::Dimension fill::Fill line::Line ;
Name ::= net::NetElement netcontent::NetContent ;
ToolSpecific ::= tool::String version::String (anyelement::AnyElement)+ net::NetElement arc::Arc node::Node page::Page ;
Position ::= nodegraphics::NodeGraphics edgegraphics::EdgeGraphics ;
EdgeGraphics ::= arc::Arc (position::Position)+ fill::Fill line::Line ;
Dimension ::= width::Integer height::Integer nodegraphics::NodeGraphics ;
Fill ::= gradientrotation::RotationType interiorcolor::Color gradientcolor::Color image::URI nodegraphics::NodeGraphics edgegraphics::EdgeGraphics annotationgraphics::AnnotationGraphics ;
Node ::= Reference ;
 Node ::= netcontentelement::NetContentElement (tools::ToolSpecific)+ nodegraphics::NodeGraphics ;
ReferenceTransition ::= net::NetElement name::Name page::Page ref::Node ;
--------------------markup::pnml-highlevelnet.bgf--------------------
VariableDeclaration ::= variabledecl::(Declaration.content Sort) ;
Sublist ::= sublist::(start::integer() length::integer() ListOperator.content) ;
FiniteIntRange ::= finiteintrange::(start::integer() end::integer()) ;
Condition ::= condition::(simpletextlabel.content (structure::Term)?) ;
basicobject.content ::= Name? toolspecific.element* ;
annotationstandard.content ::= (graphics::annotationgraphics.content)? toolspecific.element* ;
StringConstant ::= stringconstant::(StringConstant.content BuiltInConstant.content) ;
dimension.element ::= dimension::(x::positiveDecimal.content y::positiveDecimal.content) ;
Substring ::= substring::(start::integer() length::integer() StringOperator.content) ;
UserOperator ::= useroperator::(declaration::string() Operator.content) ;
Empty ::= empty::(MultisetOperator.content Sort) ;
NumberConstant ::= numberconstant::(value::integer() BuiltInConstant.content Number) ;
net.element ::= net::(identifier.content nettype.uri Name? net.labels page.content+ toolspecific.element*) ;
EmptyList ::= emptylist::(Sort BuiltInConstant.content) ;
Declaration.content ::= id::string() name::string() ;
refnode.content ::= identifier.content reference basicobject.content node.content ;
transition.content ::= transition::(identifier.content basicobject.content transition.labels node.content) ;
font.element ::= font::((family::string())? (style::string())? (weight::string())? (size::string())? (decoration::("underline" | "overline" | "line-through"))? (align::("left" | "center" | "right"))? (rotation::integer())?) ;
arc.content ::= arc::(identifier.content source::string() target::string() Name? arc.labels (graphics::edgegraphics.content)? toolspecific.element*) ;
NamedOperator ::= namedoperator::(OperatorDeclaration.content parameter::(VariableDeclaration*) def::Term) ;
page.content ::= page::(identifier.content basicobject.content page.labels netobject.content* (graphics::pagegraphics.content)?) ;
Type ::= type::(simpletextlabel.content (structure::Sort)?) ;
toolspecific.element ::= toolspecific::(tool::string() version::string() anyElement*) ;
nodegraphics.content ::= position.element dimension.element? fill.element? line.element? ;
NamedSort ::= namedsort::(SortDeclaration.content Sort) ;
HLDeclaration ::= declaration::(simpletextlabel.content (structure::Declarations)?) ;
ArbitraryOperator ::= arbitraryoperator::(OperatorDeclaration.content (input::Sort)* output::Sort) ;
edgegraphics.content ::= position.element* line.element? ;
HLAnnotation ::= hlinscription::(simpletextlabel.content (structure::Term)?) ;
place.content ::= place::(identifier.content basicobject.content place.labels node.content) ;
PartitionElement ::= partitionelement::(OperatorDeclaration.content Term+) ;
fill.element ::= fill::((color::color.type)? (gradient-color::color.type)? (gradient-rotation::("vertical" | "horizontal" | "diagonal"))? (image::string())?) ;
HLMarking ::= hlinitialMarking::(simpletextlabel.content (structure::Term)?) ;
coordinate.attributes ::= x::integer() y::integer() ;
BooleanConstant ::= booleanconstant::(value::("true" | "false") BuiltInConstant.content) ;
MakeList ::= makelist::(Sort ListOperator.content) ;
Partition ::= partition::(SortDeclaration.content Sort PartitionElement+) ;
Unparsed ::= unparsed::(Declaration.content anyElement*) ;
PartitionElementOf ::= partitionelementof::(refpartition::string() PartitionOperator.content) ;
place.labels ::= Type? HLMarking? ;
 place.labels ::= ε ;
annotationgraphics.content ::= offset.element fill.element? line.element? font.element? ;
MemberAtIndex ::= memberatindex::(index::integer() ListOperator.content) ;
line.element ::= line::((shape::("line" | "curve"))? (color::color.type)? (width::positiveDecimal.content)? (style::("solid" | "dash" | "dot"))?) ;
FiniteIntRangeConstant ::= finiteintrangeconstant::(value::integer() FiniteIntRange BuiltInConstant.content) ;
All ::= all::(MultisetOperator.content Sort) ;
simpletextlabel.content ::= simpletext.content annotationstandard.content ;
--------------------markup::pnml-hlcorestructure.bgf--------------------
Condition ::= condition::(simpletextlabel.content (structure::Term)?) ;
Type ::= type::(simpletextlabel.content (structure::Sort)?) ;
HLDeclaration ::= declaration::(simpletextlabel.content (structure::Declarations)?) ;
place.labels ::= Type? HLMarking? ;
HLAnnotation ::= hlinscription::(simpletextlabel.content (structure::Term)?) ;
HLMarking ::= hlinitialMarking::(simpletextlabel.content (structure::Term)?) ;
--------------------markup::pnml-hlpng.bgf--------------------
VariableDeclaration ::= variabledecl::(Declaration.content Sort) ;
font.element ::= font::((family::string())? (style::string())? (weight::string())? (size::string())? (decoration::("underline" | "overline" | "line-through"))? (align::("left" | "center" | "right"))? (rotation::integer())?) ;
NamedOperator ::= namedoperator::(OperatorDeclaration.content parameter::(VariableDeclaration*) def::Term) ;
arc.content ::= arc::(identifier.content source::string() target::string() Name? arc.labels (graphics::edgegraphics.content)? toolspecific.element*) ;
Condition ::= condition::(simpletextlabel.content (structure::Term)?) ;
Type ::= type::(simpletextlabel.content (structure::Sort)?) ;
page.content ::= page::(identifier.content basicobject.content page.labels netobject.content* (graphics::pagegraphics.content)?) ;
toolspecific.element ::= toolspecific::(tool::string() version::string() anyElement*) ;
nodegraphics.content ::= position.element dimension.element? fill.element? line.element? ;
basicobject.content ::= Name? toolspecific.element* ;
annotationstandard.content ::= (graphics::annotationgraphics.content)? toolspecific.element* ;
NamedSort ::= namedsort::(SortDeclaration.content Sort) ;
HLDeclaration ::= declaration::(simpletextlabel.content (structure::Declarations)?) ;
dimension.element ::= dimension::(x::positiveDecimal.content y::positiveDecimal.content) ;
HLAnnotation ::= hlinscription::(simpletextlabel.content (structure::Term)?) ;
edgegraphics.content ::= position.element* line.element? ;
place.content ::= place::(identifier.content basicobject.content place.labels node.content) ;
HLMarking ::= hlinitialMarking::(simpletextlabel.content (structure::Term)?) ;
fill.element ::= fill::((color::color.type)? (gradient-color::color.type)? (gradient-rotation::("vertical" | "horizontal" | "diagonal"))? (image::string())?) ;
UserOperator ::= useroperator::(declaration::string() Operator.content) ;
coordinate.attributes ::= x::integer() y::integer() ;
Empty ::= empty::(MultisetOperator.content Sort) ;
BooleanConstant ::= booleanconstant::(value::("true" | "false") BuiltInConstant.content) ;
net.element ::= net::(identifier.content nettype.uri Name? net.labels page.content+ toolspecific.element*) ;
place.labels ::= ε ;
 place.labels ::= Type? HLMarking? ;
annotationgraphics.content ::= offset.element fill.element? line.element? font.element? ;
Declaration.content ::= id::string() name::string() ;
line.element ::= line::((shape::("line" | "curve"))? (color::color.type)? (width::positiveDecimal.content)? (style::("solid" | "dash" | "dot"))?) ;
All ::= all::(MultisetOperator.content Sort) ;
simpletextlabel.content ::= simpletext.content annotationstandard.content ;
refnode.content ::= identifier.content reference basicobject.content node.content ;
transition.content ::= transition::(identifier.content basicobject.content transition.labels node.content) ;
--------------------markup::pnml-integers.bgf--------------------
NumberConstant ::= numberconstant::(value::integer() BuiltInConstant.content Number) ;
--------------------markup::pnml-lists.bgf--------------------
Sublist ::= sublist::(start::integer() length::integer() ListOperator.content) ;
MakeList ::= makelist::(Sort ListOperator.content) ;
EmptyList ::= emptylist::(Sort BuiltInConstant.content) ;
MemberAtIndex ::= memberatindex::(index::integer() ListOperator.content) ;
--------------------markup::pnml-multisets.bgf--------------------
Empty ::= empty::(MultisetOperator.content Sort) ;
All ::= all::(MultisetOperator.content Sort) ;
--------------------markup::rss.bgf--------------------
Date ::= eDay::DayKind day::Integer month::Integer year::Integer hours::Integer minutes::Integer seconds::Integer ;
Category ::= domain::String value::String ;
TextInput ::= title::String description::String name::String link::String channel::Channel ;
Source ::= url::String value::String ;
Image ::= url::String title::String link::String description::String width::Integer height::Integer channel::Channel ;
Cloud ::= domain::String port::Integer path::String registerProcedure::String protocol::String channel::Channel ;
Item ::= title::String link::String description::String author::String comments::String guid::String source::Source pubDate::Date enclosure::Enclosure category::Category channel::Channel ;
Channel ::= title::String link::String description::String language::String copyright::String managingEditor::String webmaster::String generator::String docs::String ttl::Integer rating::String (skipHours::Integer)+ (skipDays::DayKind)+ rss::RSS pubDate::Date lastBuildDate::Date image::Image textInput::TextInput cloud::Cloud category::Category (items::Item)+ ;
Enclosure ::= url::String lenght::Integer type::String ;
RSS ::= version::String channel::Channel ;
--------------------markup::pnml-partitions.bgf--------------------
Partition ::= partition::(SortDeclaration.content Sort PartitionElement+) ;
PartitionElementOf ::= partitionelementof::(refpartition::string() PartitionOperator.content) ;
PartitionElement ::= partitionelement::(OperatorDeclaration.content Term+) ;
--------------------markup::pnml-pnmlcoremodel.bgf--------------------
font.element ::= font::((family::string())? (style::string())? (weight::string())? (size::string())? (decoration::("underline" | "overline" | "line-through"))? (align::("left" | "center" | "right"))? (rotation::integer())?) ;
arc.content ::= arc::(identifier.content source::string() target::string() Name? arc.labels (graphics::edgegraphics.content)? toolspecific.element*) ;
page.content ::= page::(identifier.content basicobject.content page.labels netobject.content* (graphics::pagegraphics.content)?) ;
toolspecific.element ::= toolspecific::(tool::string() version::string() anyElement*) ;
nodegraphics.content ::= position.element dimension.element? fill.element? line.element? ;
basicobject.content ::= Name? toolspecific.element* ;
annotationstandard.content ::= (graphics::annotationgraphics.content)? toolspecific.element* ;
dimension.element ::= dimension::(x::positiveDecimal.content y::positiveDecimal.content) ;
edgegraphics.content ::= position.element* line.element? ;
place.content ::= place::(identifier.content basicobject.content place.labels node.content) ;
fill.element ::= fill::((color::color.type)? (gradient-color::color.type)? (gradient-rotation::("vertical" | "horizontal" | "diagonal"))? (image::string())?) ;
coordinate.attributes ::= x::integer() y::integer() ;
net.element ::= net::(identifier.content nettype.uri Name? net.labels page.content+ toolspecific.element*) ;
annotationgraphics.content ::= offset.element fill.element? line.element? font.element? ;
line.element ::= line::((shape::("line" | "curve"))? (color::color.type)? (width::positiveDecimal.content)? (style::("solid" | "dash" | "dot"))?) ;
simpletextlabel.content ::= simpletext.content annotationstandard.content ;
refnode.content ::= identifier.content reference basicobject.content node.content ;
transition.content ::= transition::(identifier.content basicobject.content transition.labels node.content) ;
--------------------markup::pnml-ptnet.bgf--------------------
font.element ::= font::((family::string())? (style::string())? (weight::string())? (size::string())? (decoration::("underline" | "overline" | "line-through"))? (align::("left" | "center" | "right"))? (rotation::integer())?) ;
arc.content ::= arc::(identifier.content source::string() target::string() Name? arc.labels (graphics::edgegraphics.content)? toolspecific.element*) ;
page.content ::= page::(identifier.content basicobject.content page.labels netobject.content* (graphics::pagegraphics.content)?) ;
positiveintegerlabel.content ::= text::integer() annotationstandard.content ;
toolspecific.element ::= toolspecific::(tool::string() version::string() anyElement*) ;
nodegraphics.content ::= position.element dimension.element? fill.element? line.element? ;
basicobject.content ::= Name? toolspecific.element* ;
annotationstandard.content ::= (graphics::annotationgraphics.content)? toolspecific.element* ;
dimension.element ::= dimension::(x::positiveDecimal.content y::positiveDecimal.content) ;
edgegraphics.content ::= position.element* line.element? ;
place.content ::= place::(identifier.content basicobject.content place.labels node.content) ;
fill.element ::= fill::((color::color.type)? (gradient-color::color.type)? (gradient-rotation::("vertical" | "horizontal" | "diagonal"))? (image::string())?) ;
coordinate.attributes ::= x::integer() y::integer() ;
net.element ::= net::(identifier.content nettype.uri Name? net.labels page.content+ toolspecific.element*) ;
annotationgraphics.content ::= offset.element fill.element? line.element? font.element? ;
nonnegativeintegerlabel.content ::= text::integer() annotationstandard.content ;
line.element ::= line::((shape::("line" | "curve"))? (color::color.type)? (width::positiveDecimal.content)? (style::("solid" | "dash" | "dot"))?) ;
simpletextlabel.content ::= simpletext.content annotationstandard.content ;
refnode.content ::= identifier.content reference basicobject.content node.content ;
transition.content ::= transition::(identifier.content basicobject.content transition.labels node.content) ;
--------------------markup::pnml-strings.bgf--------------------
StringConstant ::= stringconstant::(StringConstant.content BuiltInConstant.content) ;
Substring ::= substring::(start::integer() length::integer() StringOperator.content) ;
--------------------markup::pnml-symmetricnet.bgf--------------------
VariableDeclaration ::= variabledecl::(Declaration.content Sort) ;
FiniteIntRange ::= finiteintrange::(start::integer() end::integer()) ;
Condition ::= condition::(simpletextlabel.content (structure::Term)?) ;
basicobject.content ::= Name? toolspecific.element* ;
annotationstandard.content ::= (graphics::annotationgraphics.content)? toolspecific.element* ;
dimension.element ::= dimension::(x::positiveDecimal.content y::positiveDecimal.content) ;
UserOperator ::= useroperator::(declaration::string() Operator.content) ;
Empty ::= empty::(MultisetOperator.content Sort) ;
NumberConstant ::= numberconstant::(value::integer() BuiltInConstant.content Number) ;
net.element ::= net::(identifier.content nettype.uri Name? net.labels page.content+ toolspecific.element*) ;
Declaration.content ::= id::string() name::string() ;
refnode.content ::= identifier.content reference basicobject.content node.content ;
transition.content ::= transition::(identifier.content basicobject.content transition.labels node.content) ;
font.element ::= font::((family::string())? (style::string())? (weight::string())? (size::string())? (decoration::("underline" | "overline" | "line-through"))? (align::("left" | "center" | "right"))? (rotation::integer())?) ;
NamedOperator ::= namedoperator::(OperatorDeclaration.content parameter::(VariableDeclaration*) def::Term) ;
arc.content ::= arc::(identifier.content source::string() target::string() Name? arc.labels (graphics::edgegraphics.content)? toolspecific.element*) ;
page.content ::= page::(identifier.content basicobject.content page.labels netobject.content* (graphics::pagegraphics.content)?) ;
Type ::= type::(simpletextlabel.content (structure::Sort)?) ;
toolspecific.element ::= toolspecific::(tool::string() version::string() anyElement*) ;
nodegraphics.content ::= position.element dimension.element? fill.element? line.element? ;
NamedSort ::= namedsort::(SortDeclaration.content Sort) ;
HLDeclaration ::= declaration::(simpletextlabel.content (structure::Declarations)?) ;
edgegraphics.content ::= position.element* line.element? ;
HLAnnotation ::= hlinscription::(simpletextlabel.content (structure::Term)?) ;
place.content ::= place::(identifier.content basicobject.content place.labels node.content) ;
PartitionElement ::= partitionelement::(OperatorDeclaration.content Term+) ;
fill.element ::= fill::((color::color.type)? (gradient-color::color.type)? (gradient-rotation::("vertical" | "horizontal" | "diagonal"))? (image::string())?) ;
HLMarking ::= hlinitialMarking::(simpletextlabel.content (structure::Term)?) ;
coordinate.attributes ::= x::integer() y::integer() ;
BooleanConstant ::= booleanconstant::(value::("true" | "false") BuiltInConstant.content) ;
Partition ::= partition::(SortDeclaration.content Sort PartitionElement+) ;
PartitionElementOf ::= partitionelementof::(refpartition::string() PartitionOperator.content) ;
place.labels ::= Type? HLMarking? ;
 place.labels ::= ε ;
annotationgraphics.content ::= offset.element fill.element? line.element? font.element? ;
line.element ::= line::((shape::("line" | "curve"))? (color::color.type)? (width::positiveDecimal.content)? (style::("solid" | "dash" | "dot"))?) ;
All ::= all::(MultisetOperator.content Sort) ;
FiniteIntRangeConstant ::= finiteintrangeconstant::(value::integer() FiniteIntRange BuiltInConstant.content) ;
simpletextlabel.content ::= simpletext.content annotationstandard.content ;
--------------------markup::pnml-terms.bgf--------------------
UserOperator ::= useroperator::(declaration::string() Operator.content) ;
VariableDeclaration ::= variabledecl::(Declaration.content Sort) ;
NamedOperator ::= namedoperator::(OperatorDeclaration.content parameter::(VariableDeclaration*) def::Term) ;
NamedSort ::= namedsort::(SortDeclaration.content Sort) ;
Declaration.content ::= id::string() name::string() ;
--------------------markup::pnml-touzet.bgf--------------------
TransToPlaceArc ::= source::Transition target::Place ;
PlaceToTransArc ::= source::Place target::Transition ;
Place ::= (incoming::TransToPlaceArc)+ (outgoing::PlaceToTransArc)+ ;
PetriNet ::= (places::Place)+ (transitions::Transition)+ (arcs::Arc)+ ;
Transition ::= (incoming::PlaceToTransArc)+ (outgoing::TransToPlaceArc)+ ;
--------------------markup::svg-furubayashi-basic.bgf--------------------
SVG.Font.attrib ::= ε ;
 SVG.Font.attrib ::= (font-family::SVG.FontFamilyValue.datatype)? (font-size::SVG.FontSizeValue.datatype)? (font-size-adjust::SVG.FontSizeAdjustValue.datatype)? (font-stretch::("normal" | "wider" | "narrower" | "ultra-condensed" | "extra-condensed" | "condensed" | "semi-condensed" | "semi-expanded" | "expanded" | "extra-expanded" | "ultra-expanded" | "inherit"))? (font-style::("normal" | "italic" | "oblique" | "inherit"))? (font-variant::("normal" | "small-caps" | "inherit"))? (font-weight::("normal" | "bold" | "bolder" | "lighter" | "100" | "200" | "300" | "400" | "500" | "600" | "700" | "800" | "900" | "inherit"))? SVG.Font.extra.attrib ;
SVG.clipPath ::= clipPath::(SVG.Description.class* (SVG.Animation.class | SVG.Use.class)* SVG.Shape.class? SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Text.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.Cursor.attrib SVG.External.attrib (transform::SVG.TransformList.datatype)? (clipPathUnits::("userSpaceOnUse" | "objectBoundingBox"))?) ;
SVG.Gradient.attrib ::= ε ;
 SVG.Gradient.attrib ::= (stop-color::SVG.SVGColor.datatype)? (stop-opacity::SVG.OpacityValue.datatype)? SVG.Gradient.extra.attrib ;
SVG.Animation.attrib ::= SVG.XLink.attrib SVG.Animation.extra.attrib ;
SVG.AnimationAddtion.attrib ::= (additive::("replace" | "sum"))? (accumulate::("none" | "sum"))? SVG.AnimationAddition.extra.attrib ;
SVG.desc ::= desc::(string() SVG.Core.attrib SVG.Style.attrib) ;
SVG.defs ::= defs::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.External.attrib (transform::SVG.TransformList.datatype)?) ;
SVG.feTile ::= feTile::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib) ;
SVG.GraphicalEvents.attrib ::= ε ;
 SVG.GraphicalEvents.attrib ::= SVG.onfocusin.attrib SVG.onfocusout.attrib SVG.onactivate.attrib SVG.onclick.attrib SVG.onmousedown.attrib SVG.onmouseup.attrib SVG.onmouseover.attrib SVG.onmousemove.attrib SVG.onmouseout.attrib SVG.onload.attrib SVG.GraphicalEvents.extra.attrib ;
SVG.TextContent.attrib ::= ε ;
 SVG.TextContent.attrib ::= (alignment-baseline::("baseline" | "top" | "before-edge" | "text-top" | "text-before-edge" | "middle" | "bottom" | "after-edge" | "text-bottom" | "text-after-edge" | "ideographic" | "lower" | "hanging" | "mathematical" | "inherit"))? (baseline-shift::SVG.BaselineShiftValue.datatype)? (direction::("ltr" | "rtl" | "inherit"))? (dominant-baseline::("auto" | "autosense-script" | "no-change" | "reset" | "ideographic" | "lower" | "hanging" | "mathematical" | "inherit"))? (glyph-orientation-horizontal::SVG.GlyphOrientationHorizontalValue.datatype)? (glyph-orientation-vertical::SVG.GlyphOrientationVerticalValue.datatype)? (kerning::SVG.KerningValue.datatype)? (letter-spacing::SVG.SpacingValue.datatype)? (text-anchor::("start" | "middle" | "end" | "inherit"))? (text-decoration::SVG.TextDecorationValue.datatype)? (unicode-bidi::("normal" | "embed" | "bidi-override" | "inherit"))? (word-spacing::SVG.SpacingValue.datatype)? SVG.TextContent.extra.attrib ;
SVG.animateTransform ::= animateTransform::(SVG.Description.class* SVG.Core.attrib SVG.Conditional.attrib SVG.AnimationEvents.attrib SVG.External.attrib SVG.Animation.attrib SVG.AnimationAttribute.attrib SVG.AnimationTiming.attrib SVG.AnimationValue.attrib SVG.AnimationAddtion.attrib (type::("translate" | "scale" | "rotate" | "skewX" | "skewY"))?) ;
SVG.font-face ::= font-face::(SVG.Description.class* SVG.font-face-src? SVG.definition-src? SVG.Core.attrib (font-family::string())? (font-style::string())? (font-variant::string())? (font-weight::string())? (font-stretch::string())? (font-size::string())? (unicode-range::string())? (units-per-em::SVG.Number.datatype)? (panose-1::string())? (stemv::SVG.Number.datatype)? (stemh::SVG.Number.datatype)? (slope::SVG.Number.datatype)? (cap-height::SVG.Number.datatype)? (x-height::SVG.Number.datatype)? (accent-height::SVG.Number.datatype)? (ascent::SVG.Number.datatype)? (descent::SVG.Number.datatype)? (widths::string())? (bbox::string())? (ideographic::SVG.Number.datatype)? (alphabetic::SVG.Number.datatype)? (mathematical::SVG.Number.datatype)? (hanging::SVG.Number.datatype)? (v-ideographic::SVG.Number.datatype)? (v-alphabetic::SVG.Number.datatype)? (v-mathematical::SVG.Number.datatype)? (v-hanging::SVG.Number.datatype)? (underline-position::SVG.Number.datatype)? (underline-thickness::SVG.Number.datatype)? (strikethrough-position::SVG.Number.datatype)? (strikethrough-thickness::SVG.Number.datatype)? (overline-position::SVG.Number.datatype)? (overline-thickness::SVG.Number.datatype)?) ;
SVG.altGlyph ::= altGlyph::(string() SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.XLink.attrib SVG.External.attrib (x::SVG.Coordinates.datatype)? (y::SVG.Coordinates.datatype)? (dx::SVG.Lengths.datatype)? (dy::SVG.Lengths.datatype)? (glyphRef::string())? (format::string())? (rotate::SVG.Numbers.datatype)?) ;
SVG.stop ::= stop::((SVG.animate | SVG.set | SVG.animateColor)* SVG.Core.attrib SVG.Style.attrib SVG.Color.attrib SVG.Gradient.attrib offset::SVG.NumberOrPercentage.datatype) ;
SVG.animateColor ::= animateColor::(SVG.Description.class* SVG.Core.attrib SVG.Conditional.attrib SVG.AnimationEvents.attrib SVG.External.attrib SVG.Animation.attrib SVG.AnimationAttribute.attrib SVG.AnimationTiming.attrib SVG.AnimationValue.attrib SVG.AnimationAddtion.attrib) ;
SVG.mpath ::= mpath::(SVG.Description.class* SVG.Core.attrib SVG.XLinkRequired.attrib SVG.External.attrib) ;
SVG.XLinkEmbed.attrib ::= (xlink:type::"simple")? xlink:href::SVG.URI.datatype (xlink:role::SVG.URI.datatype)? (xlink:arcrole::SVG.URI.datatype)? (xlink:title::string())? (xlink:show::"embed")? (xlink:actuate::"onLoad")? SVG.XLinkEmbed.extra.attrib ;
SVG.font-face-name ::= font-face-name::(ε SVG.Core.attrib (name::string())?) ;
SVG.pattern ::= pattern::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.XLink.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? (width::SVG.Length.datatype)? (height::SVG.Length.datatype)? (patternUnits::("userSpaceOnUse" | "objectBoundingBox"))? (patternContentUnits::("userSpaceOnUse" | "objectBoundingBox"))? (patternTransform::SVG.TransformList.datatype)? (viewBox::SVG.ViewBoxSpec.datatype)? (preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype)?) ;
SVG.feFuncR ::= feFuncR::((SVG.animate | SVG.set)* SVG.Core.attrib type::("identity" | "table" | "discrete" | "linear" | "gamma") (tableValues::string())? (slope::SVG.Number.datatype)? (intercept::SVG.Number.datatype)? (amplitude::SVG.Number.datatype)? (exponent::SVG.Number.datatype)? (offset::SVG.Number.datatype)?) ;
SVG.Paint.attrib ::= ε ;
 SVG.Paint.attrib ::= SVG.fill.attrib SVG.fill-rule.attrib SVG.stroke.attrib SVG.stroke-dasharray.attrib SVG.stroke-dashoffset.attrib SVG.stroke-linecap.attrib SVG.stroke-linejoin.attrib SVG.stroke-miterlimit.attrib SVG.stroke-width.attrib SVG.Paint.extra.attrib ;
SVG.vkern ::= vkern::(ε SVG.Core.attrib (u1::string())? (g1::string())? (u2::string())? (g2::string())? k::SVG.Number.datatype) ;
SVG.filter ::= filter::(SVG.Description.class* (SVG.animate | SVG.set | SVG.FilterPrimitive.class)* SVG.Core.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.XLink.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? (width::SVG.Length.datatype)? (height::SVG.Length.datatype)? (filterRes::SVG.NumberOptionalNumber.datatype)? (filterUnits::("userSpaceOnUse" | "objectBoundingBox"))? (primitiveUnits::("userSpaceOnUse" | "objectBoundingBox"))?) ;
SVG.Text.attrib ::= ε ;
 SVG.Text.attrib ::= (writing-mode::("lr-tb" | "rl-tb" | "tb-rl" | "lr" | "rl" | "tb" | "inherit"))? SVG.Text.extra.attrib ;
SVG.linearGradient ::= linearGradient::(SVG.Description.class* (SVG.stop | SVG.animate | SVG.set | SVG.animateTransform)* SVG.Core.attrib SVG.Style.attrib SVG.Color.attrib SVG.Gradient.attrib SVG.XLink.attrib SVG.External.attrib (x1::SVG.Coordinate.datatype)? (y1::SVG.Coordinate.datatype)? (x2::SVG.Coordinate.datatype)? (y2::SVG.Coordinate.datatype)? (gradientUnits::("userSpaceOnUse" | "objectBoundingBox"))? (gradientTransform::SVG.TransformList.datatype)? (spreadMethod::("pad" | "reflect" | "repeat"))?) ;
SVG.feComponentTransfer ::= feComponentTransfer::(SVG.feFuncR? SVG.feFuncG? SVG.feFuncB? SVG.feFuncA? SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib) ;
SVG.line ::= line::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Marker.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib (x1::SVG.Coordinate.datatype)? (y1::SVG.Coordinate.datatype)? (x2::SVG.Coordinate.datatype)? (y2::SVG.Coordinate.datatype)? (transform::SVG.TransformList.datatype)?) ;
SVG.Clip.attrib ::= (clip-path::SVG.ClipPathValue.datatype)? (clip-rule::SVG.ClipFillRule.datatype)? SVG.Clip.extra.attrib ;
 SVG.Clip.attrib ::= ε ;
SVG.feComposite ::= feComposite::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib in2::string() (operator::("over" | "in" | "out" | "atop" | "xor" | "arithmetic"))? (k1::SVG.Number.datatype)? (k2::SVG.Number.datatype)? (k3::SVG.Number.datatype)? (k4::SVG.Number.datatype)?) ;
SVG.use ::= use::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.XLinkEmbed.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? (width::SVG.Length.datatype)? (height::SVG.Length.datatype)? (transform::SVG.TransformList.datatype)?) ;
SVG.textPath ::= textPath::((string() | SVG.tspan | SVG.tref | SVG.altGlyph | SVG.animate | SVG.set | SVG.animateColor | SVG.Description.class | SVG.Hyperlink.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.XLinkRequired.attrib SVG.External.attrib (startOffset::SVG.Length.datatype)? (textLength::SVG.Length.datatype)? (lengthAdjust::("spacing" | "spacingAndGlyphs"))? (method::("align" | "stretch"))? (spacing::("auto" | "exact"))?) ;
SVG.missing-glyph ::= missing-glyph::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Style.attrib SVG.Presentation.attrib (d::SVG.PathData.datatype)? (horiz-adv-x::SVG.Number.datatype)? (vert-origin-x::SVG.Number.datatype)? (vert-origin-y::SVG.Number.datatype)? (vert-adv-y::SVG.Number.datatype)?) ;
SVG.feFuncG ::= feFuncG::((SVG.animate | SVG.set)* SVG.Core.attrib type::("identity" | "table" | "discrete" | "linear" | "gamma") (tableValues::string())? (slope::SVG.Number.datatype)? (intercept::SVG.Number.datatype)? (amplitude::SVG.Number.datatype)? (exponent::SVG.Number.datatype)? (offset::SVG.Number.datatype)?) ;
SVG.radialGradient ::= radialGradient::(SVG.Description.class* (SVG.stop | SVG.animate | SVG.set | SVG.animateTransform)* SVG.Core.attrib SVG.Style.attrib SVG.Color.attrib SVG.Gradient.attrib SVG.XLink.attrib SVG.External.attrib (cx::SVG.Coordinate.datatype)? (cy::SVG.Coordinate.datatype)? (r::SVG.Length.datatype)? (fx::SVG.Coordinate.datatype)? (fy::SVG.Coordinate.datatype)? (gradientUnits::("userSpaceOnUse" | "objectBoundingBox"))? (gradientTransform::SVG.TransformList.datatype)? (spreadMethod::("pad" | "reflect" | "repeat"))?) ;
SVG.altGlyphDef ::= altGlyphDef::((SVG.glyphRef+) | (SVG.altGlyphItem+) SVG.Core.attrib) ;
SVG.FilterColor.attrib ::= (color-interpolation-filters::("auto" | "sRGB" | "linearRGB" | "inherit"))? SVG.FilterColor.extra.attrib ;
 SVG.FilterColor.attrib ::= ε ;
SVG.mask ::= mask::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? (width::SVG.Length.datatype)? (height::SVG.Length.datatype)? (maskUnits::("userSpaceOnUse" | "objectBoundingBox"))? (maskContentUnits::("userSpaceOnUse" | "objectBoundingBox"))?) ;
SVG.feFlood ::= feFlood::((SVG.animate | SVG.set | SVG.animateColor)* SVG.Core.attrib SVG.Style.attrib SVG.Color.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib (flood-color::SVG.SVGColor.datatype)? (flood-opacity::SVG.OpacityValue.datatype)?) ;
SVG.feFuncB ::= feFuncB::((SVG.animate | SVG.set)* SVG.Core.attrib type::("identity" | "table" | "discrete" | "linear" | "gamma") (tableValues::string())? (slope::SVG.Number.datatype)? (intercept::SVG.Number.datatype)? (amplitude::SVG.Number.datatype)? (exponent::SVG.Number.datatype)? (offset::SVG.Number.datatype)?) ;
SVG.definition-src ::= definition-src::(ε SVG.Core.attrib SVG.XLinkRequired.attrib) ;
SVG.hkern ::= hkern::(ε SVG.Core.attrib (u1::string())? (g1::string())? (u2::string())? (g2::string())? k::SVG.Number.datatype) ;
SVG.Presentation.attrib ::= SVG.Container.attrib SVG.Viewport.attrib SVG.Text.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Marker.attrib SVG.Profile.attrib SVG.Gradient.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.FilterColor.attrib SVG.Cursor.attrib (flood-color::SVG.SVGColor.datatype)? (flood-opacity::SVG.OpacityValue.datatype)? (lighting-color::SVG.SVGColor.datatype)? SVG.Presentation.extra.attrib ;
SVG.feFuncA ::= feFuncA::((SVG.animate | SVG.set)* SVG.Core.attrib type::("identity" | "table" | "discrete" | "linear" | "gamma") (tableValues::string())? (slope::SVG.Number.datatype)? (intercept::SVG.Number.datatype)? (amplitude::SVG.Number.datatype)? (exponent::SVG.Number.datatype)? (offset::SVG.Number.datatype)?) ;
SVG.AnimationTiming.attrib ::= (begin::string())? (dur::string())? (end::string())? (min::string())? (max::string())? (restart::("always" | "never" | "whenNotActive"))? (repeatCount::string())? (repeatDur::string())? (fill::("remove" | "freeze"))? SVG.AnimationTiming.extra.attrib ;
SVG.font-face-format ::= font-face-format::(ε SVG.Core.attrib (string::string())?) ;
SVG.FilterPrimitive.attrib ::= (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? (width::SVG.Length.datatype)? (height::SVG.Length.datatype)? (result::string())? SVG.FilterPrimitive.extra.attrib ;
SVG.rect ::= rect::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? width::SVG.Length.datatype height::SVG.Length.datatype (rx::SVG.Length.datatype)? (ry::SVG.Length.datatype)? (transform::SVG.TransformList.datatype)?) ;
SVG.animateMotion ::= animateMotion::(SVG.Description.class* SVG.mpath? SVG.Core.attrib SVG.Conditional.attrib SVG.AnimationEvents.attrib SVG.External.attrib SVG.Animation.attrib SVG.AnimationTiming.attrib SVG.AnimationAddtion.attrib (calcMode::("discrete" | "linear" | "paced" | "spline"))? (values::string())? (keyTimes::string())? (Splines::string())? (from::string())? (to::string())? (by::string())? (path::string())? (keyPoints::string())? (rotate::string())? (origin::string())?) ;
SVG.feGaussianBlur ::= feGaussianBlur::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib (stdDeviation::SVG.NumberOptionalNumber.datatype)?) ;
SVG.Viewport.attrib ::= ε ;
 SVG.Viewport.attrib ::= SVG.clip.attrib SVG.overflow.attrib SVG.Viewport.extra.attrib ;
SVG.Graphics.attrib ::= ε ;
 SVG.Graphics.attrib ::= SVG.display.attrib SVG.image-rendering.attrib SVG.pointer-events.attrib SVG.shape-rendering.attrib SVG.text-rendering.attrib SVG.visibility.attrib SVG.Graphics.extra.attrib ;
SVG.Mask.attrib ::= ε ;
 SVG.Mask.attrib ::= (mask::SVG.MaskValue.datatype)? SVG.Mask.extra.attrib ;
SVG.AnimationValue.attrib ::= (calcMode::("discrete" | "linear" | "paced" | "spline"))? (values::string())? (keyTimes::string())? (keySplines::string())? (from::string())? (to::string())? (by::string())? SVG.AnimationValue.extra.attrib ;
SVG.Color.attrib ::= ε ;
 SVG.Color.attrib ::= SVG.color.attrib SVG.color-interpolation.attrib SVG.color-rendering.attrib SVG.Color.extra.attrib ;
SVG.g ::= g::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.External.attrib (transform::SVG.TransformList.datatype)?) ;
SVG.Conditional.attrib ::= (requiredFeatures::SVG.FeatureList.datatype)? (requiredExtensions::SVG.ExtensionList.datatype)? (systemLanguage::SVG.LanguageCodes.datatype)? SVG.Conditional.extra.attrib ;
 SVG.Conditional.attrib ::= ε ;
SVG.svg ::= svg::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.DocumentEvents.attrib SVG.GraphicalEvents.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? (width::SVG.Length.datatype)? (height::SVG.Length.datatype)? (viewBox::SVG.ViewBoxSpec.datatype)? (preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype)? (zoomAndPan::("disable" | "magnify"))? version::SVG.Number.datatype (baseProfile::SVG.Text.datatype)? (contentScriptType::SVG.ContentType.datatype)? (contentStyleType::SVG.ContentType.datatype)?) ;
SVG.circle ::= circle::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib (cx::SVG.Coordinate.datatype)? (cy::SVG.Coordinate.datatype)? r::SVG.Length.datatype (transform::SVG.TransformList.datatype)?) ;
SVG.font ::= font::(SVG.Description.class* SVG.font-face SVG.missing-glyph (SVG.glyph | SVG.hkern | SVG.vkern)* SVG.Core.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.External.attrib (horiz-origin-x::SVG.Number.datatype)? (horiz-origin-y::SVG.Number.datatype)? horiz-adv-x::SVG.Number.datatype (vert-origin-x::SVG.Number.datatype)? (vert-origin-y::SVG.Number.datatype)? (vert-adv-y::SVG.Number.datatype)?) ;
SVG.Profile.attrib ::= ε ;
 SVG.Profile.attrib ::= (color-profile::string())? SVG.Profile.extra.attrib ;
SVG.set ::= set::(SVG.Description.class* SVG.Core.attrib SVG.Conditional.attrib SVG.AnimationEvents.attrib SVG.External.attrib SVG.Animation.attrib SVG.AnimationAttribute.attrib SVG.AnimationTiming.attrib (to::string())?) ;
SVG.a ::= a::((string() | SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.XLinkReplace.attrib SVG.External.attrib (transform::SVG.TransformList.datatype)? (target::SVG.LinkTarget.datatype)?) ;
SVG.animate ::= animate::(SVG.Description.class* SVG.Core.attrib SVG.Conditional.attrib SVG.AnimationEvents.attrib SVG.External.attrib SVG.Animation.attrib SVG.AnimationAttribute.attrib SVG.AnimationTiming.attrib SVG.AnimationValue.attrib SVG.AnimationAddtion.attrib) ;
SVG.Filter.attrib ::= (filter::SVG.FilterValue.datatype)? SVG.Filter.extra.attrib ;
 SVG.Filter.attrib ::= ε ;
SVG.AnimationAttribute.attrib ::= attributeName::string() (attributeType::string())? SVG.AnimationAttribute.extra.attrib ;
SVG.script ::= script::(string() SVG.Core.attrib SVG.XLink.attrib SVG.External.attrib type::SVG.ContentType.datatype) ;
SVG.ellipse ::= ellipse::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib (cx::SVG.Coordinate.datatype)? (cy::SVG.Coordinate.datatype)? rx::SVG.Length.datatype ry::SVG.Length.datatype (transform::SVG.TransformList.datatype)?) ;
SVG.feImage ::= feImage::((SVG.animate | SVG.set | SVG.animateTransform)* SVG.Core.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.FilterPrimitive.attrib SVG.XLinkEmbed.attrib SVG.External.attrib (preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype)?) ;
SVG.glyphRef ::= glyphRef::(ε SVG.Core.attrib SVG.Style.attrib SVG.Font.attrib SVG.XLink.attrib (x::SVG.Coordinates.datatype)? (y::SVG.Coordinates.datatype)? (dx::SVG.Lengths.datatype)? (dy::SVG.Lengths.datatype)? (glyphRef::string())? (format::string())?) ;
SVG.image ::= image::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Viewport.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Profile.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.XLinkEmbed.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? width::SVG.Length.datatype height::SVG.Length.datatype (preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype)? (transform::SVG.TransformList.datatype)?) ;
SVG.Style.attrib ::= ε ;
 SVG.Style.attrib ::= (style::SVG.StyleSheet.datatype)? (class::SVG.ClassList.datatype)? SVG.Style.extra.attrib ;
SVG.feMergeNode ::= feMergeNode::((SVG.animate | SVG.set)* SVG.Core.attrib (in::string())?) ;
SVG.XLink.attrib ::= ε ;
 SVG.XLink.attrib ::= (xlink:type::"simple")? (xlink:href::SVG.URI.datatype)? (xlink:role::SVG.URI.datatype)? (xlink:arcrole::SVG.URI.datatype)? (xlink:title::string())? (xlink:show::"other")? (xlink:actuate::"onLoad")? SVG.XLink.extra.attrib ;
SVG.Core.attrib ::= SVG.id.attrib SVG.base.attrib SVG.lang.attrib SVG.space.attrib SVG.Core.extra.attrib ;
 SVG.Core.attrib ::= ε ;
SVG.title ::= title::(string() SVG.Core.attrib SVG.Style.attrib) ;
SVG.XLinkReplace.attrib ::= (xlink:type::"simple")? xlink:href::SVG.URI.datatype (xlink:role::SVG.URI.datatype)? (xlink:arcrole::SVG.URI.datatype)? (xlink:title::string())? (xlink:show::("new" | "replace"))? (xlink:actuate::"onRequest")? SVG.XLinkReplace.extra.attrib ;
SVG.polyline ::= polyline::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Marker.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib points::SVG.Points.datatype (transform::SVG.TransformList.datatype)?) ;
SVG.feBlend ::= feBlend::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib in2::string() (mode::("normal" | "multiply" | "screen" | "darken" | "lighten"))?) ;
SVG.AnimationEvents.attrib ::= SVG.onbegin.attrib SVG.onend.attrib SVG.onrepeat.attrib SVG.AnimationEvents.extra.attrib ;
 SVG.AnimationEvents.attrib ::= ε ;
SVG.altGlyphItem ::= altGlyphItem::(SVG.glyphRef+ SVG.Core.attrib) ;
SVG.switch ::= switch::(SVG.Description.class* (SVG.svg | SVG.g | SVG.use | SVG.text | SVG.text | SVG.Animation.class | SVG.Conditional.class | SVG.Image.class | SVG.Shape.class | SVG.Hyperlink.class | SVG.Extensibility.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.External.attrib (transform::SVG.TransformList.datatype)?) ;
SVG.feOffset ::= feOffset::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib (dx::SVG.Number.datatype)? (dy::SVG.Number.datatype)?) ;
SVG.feColorMatrix ::= feColorMatrix::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib (type::("matrix" | "saturate" | "hueRotate" | "luminanceToAlpha"))? (values::string())?) ;
SVG.DocumentEvents.attrib ::= SVG.onunload.attrib SVG.onabort.attrib SVG.onerror.attrib SVG.onresize.attrib SVG.onscroll.attrib SVG.onzoom.attrib SVG.DocumentEvents.extra.attrib ;
SVG.metadata ::= metadata::(string() SVG.Core.attrib) ;
SVG.text ::= text::((string() | SVG.Description.class | SVG.Animation.class | SVG.TextContent.class | SVG.Hyperlink.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Text.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib (x::SVG.Coordinates.datatype)? (y::SVG.Coordinates.datatype)? (dx::SVG.Lengths.datatype)? (dy::SVG.Lengths.datatype)? (rotate::SVG.Numbers.datatype)? (textLength::SVG.Length.datatype)? (lengthAdjust::("spacing" | "spacingAndGlyphs"))? (transform::SVG.TransformList.datatype)?) ;
SVG.Opacity.attrib ::= ε ;
 SVG.Opacity.attrib ::= SVG.opacity.attrib SVG.fill-opacity.attrib SVG.stroke-opacity.attrib SVG.Opacity.extra.attrib ;
SVG.color-profile ::= color-profile::(SVG.Description.class* SVG.Core.attrib SVG.XLink.attrib (local::string())? name::string() (rendering-intent::("auto" | "perceptual" | "relative-colorimetric" | "saturation" | "absolute-colorimetric"))?) ;
SVG.tspan ::= tspan::((string() | SVG.tspan | SVG.tref | SVG.altGlyph | SVG.animate | SVG.set | SVG.animateColor | SVG.Description.class | SVG.Hyperlink.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib (x::SVG.Coordinates.datatype)? (y::SVG.Coordinates.datatype)? (dx::SVG.Lengths.datatype)? (dy::SVG.Lengths.datatype)? (rotate::SVG.Numbers.datatype)? (textLength::SVG.Length.datatype)? (lengthAdjust::("spacing" | "spacingAndGlyphs"))?) ;
SVG.XLinkRequired.attrib ::= (xlink:type::"simple")? xlink:href::SVG.URI.datatype (xlink:role::SVG.URI.datatype)? (xlink:arcrole::SVG.URI.datatype)? (xlink:title::string())? (xlink:show::"other")? (xlink:actuate::"onLoad")? SVG.XLinkRequired.extra.attrib ;
SVG.polygon ::= polygon::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Marker.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib points::SVG.Points.datatype (transform::SVG.TransformList.datatype)?) ;
SVG.font-face-uri ::= font-face-uri::(SVG.font-face-format* SVG.Core.attrib SVG.XLinkRequired.attrib) ;
SVG.view ::= view::(SVG.Description.class* SVG.Core.attrib SVG.External.attrib (viewBox::SVG.ViewBoxSpec.datatype)? (preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype)? (zoomAndPan::("disable" | "magnify"))? (viewTarget::string())?) ;
SVG.path ::= path::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Marker.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib d::SVG.PathData.datatype (pathLength::SVG.Number.datatype)? (transform::SVG.TransformList.datatype)?) ;
SVG.feMerge ::= feMerge::(SVG.feMergeNode* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitive.attrib) ;
SVG.tref ::= tref::((SVG.animate | SVG.set | SVG.animateColor | SVG.Description.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.XLinkRequired.attrib SVG.External.attrib (x::SVG.Coordinates.datatype)? (y::SVG.Coordinates.datatype)? (dx::SVG.Lengths.datatype)? (dy::SVG.Lengths.datatype)? (rotate::SVG.Numbers.datatype)? (textLength::SVG.Length.datatype)? (lengthAdjust::("spacing" | "spacingAndGlyphs"))?) ;
SVG.foreignObject ::= foreignObject::(SVG.foreignObject.content SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? width::SVG.Length.datatype height::SVG.Length.datatype (transform::SVG.TransformList.datatype)?) ;
SVG.font-face-src ::= font-face-src::((SVG.font-face-uri | SVG.font-face-name)+ SVG.Core.attrib) ;
SVG.FilterPrimitiveWithIn.attrib ::= SVG.FilterPrimitive.attrib (in::string())? SVG.FilterPrimitiveWithIn.extra.attrib ;
SVG.style ::= style::(string() SVG.Core.attrib type::SVG.ContentType.datatype (media::SVG.MediaDesc.datatype)? (title::SVG.Text.datatype)?) ;
SVG.External.attrib ::= ε ;
 SVG.External.attrib ::= SVG.externalResourcesRequired.attrib SVG.External.extra.attrib ;
SVG.symbol ::= symbol::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.External.attrib (viewBox::SVG.ViewBoxSpec.datatype)? (preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype)?) ;
SVG.glyph ::= glyph::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Style.attrib SVG.Presentation.attrib (unicode::string())? (glyph-name::string())? (d::SVG.PathData.datatype)? (orientation::string())? (arabic-form::string())? (lang::SVG.LanguageCodes.datatype)? (horiz-adv-x::SVG.Number.datatype)? (vert-origin-x::SVG.Number.datatype)? (vert-origin-y::SVG.Number.datatype)? (vert-adv-y::SVG.Number.datatype)?) ;
--------------------markup::svg-furubayashi-tiny.bgf--------------------
SVG.Font.attrib ::= (font-family::SVG.FontFamilyValue.datatype)? (font-size::SVG.FontSizeValue.datatype)? (font-style::("normal" | "italic" | "oblique" | "inherit"))? (font-weight::("normal" | "bold" | "bolder" | "lighter" | "100" | "200" | "300" | "400" | "500" | "600" | "700" | "800" | "900" | "inherit"))? SVG.Font.extra.attrib ;
 SVG.Font.attrib ::= ε ;
SVG.Color.attrib ::= SVG.color.attrib SVG.color-rendering.attrib SVG.Color.extra.attrib ;
 SVG.Color.attrib ::= ε ;
SVG.Animation.attrib ::= SVG.XLink.attrib SVG.Animation.extra.attrib ;
SVG.g ::= g::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.External.attrib (transform::SVG.TransformList.datatype)?) ;
SVG.AnimationAddtion.attrib ::= (additive::("replace" | "sum"))? (accumulate::("none" | "sum"))? SVG.AnimationAddition.extra.attrib ;
SVG.Conditional.attrib ::= (requiredFeatures::SVG.FeatureList.datatype)? (requiredExtensions::SVG.ExtensionList.datatype)? (systemLanguage::SVG.LanguageCodes.datatype)? SVG.Conditional.extra.attrib ;
 SVG.Conditional.attrib ::= ε ;
SVG.desc ::= desc::(string() SVG.Core.attrib SVG.Style.attrib) ;
SVG.circle ::= circle::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib (cx::SVG.Coordinate.datatype)? (cy::SVG.Coordinate.datatype)? r::SVG.Length.datatype (transform::SVG.TransformList.datatype)?) ;
SVG.svg ::= svg::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.DocumentEvents.attrib SVG.GraphicalEvents.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? (width::SVG.Length.datatype)? (height::SVG.Length.datatype)? (viewBox::SVG.ViewBoxSpec.datatype)? (preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype)? (zoomAndPan::("disable" | "magnify"))? version::SVG.Number.datatype (baseProfile::SVG.Text.datatype)?) ;
SVG.font ::= font::(SVG.Description.class* SVG.font-face SVG.missing-glyph (SVG.glyph | SVG.hkern)* SVG.Core.attrib SVG.Style.attrib SVG.External.attrib (horiz-origin-x::SVG.Number.datatype)? horiz-adv-x::SVG.Number.datatype) ;
SVG.defs ::= defs::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.External.attrib (transform::SVG.TransformList.datatype)?) ;
SVG.set ::= set::(SVG.Description.class* SVG.Core.attrib SVG.Conditional.attrib SVG.AnimationEvents.attrib SVG.External.attrib SVG.Animation.attrib SVG.AnimationAttribute.attrib SVG.AnimationTiming.attrib (to::string())?) ;
SVG.a ::= a::((string() | SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.XLinkReplace.attrib SVG.External.attrib (transform::SVG.TransformList.datatype)? (target::SVG.LinkTarget.datatype)?) ;
SVG.animate ::= animate::(SVG.Description.class* SVG.Core.attrib SVG.Conditional.attrib SVG.AnimationEvents.attrib SVG.External.attrib SVG.Animation.attrib SVG.AnimationAttribute.attrib SVG.AnimationTiming.attrib SVG.AnimationValue.attrib SVG.AnimationAddtion.attrib) ;
SVG.TextContent.attrib ::= (text-anchor::("start" | "middle" | "end" | "inherit"))? SVG.TextContent.extra.attrib ;
 SVG.TextContent.attrib ::= ε ;
SVG.AnimationAttribute.attrib ::= attributeName::string() (attributeType::string())? SVG.AnimationAttribute.extra.attrib ;
SVG.script ::= script::(string() SVG.Core.attrib SVG.XLink.attrib SVG.External.attrib type::SVG.ContentType.datatype) ;
SVG.animateTransform ::= animateTransform::(SVG.Description.class* SVG.Core.attrib SVG.Conditional.attrib SVG.AnimationEvents.attrib SVG.External.attrib SVG.Animation.attrib SVG.AnimationAttribute.attrib SVG.AnimationTiming.attrib SVG.AnimationValue.attrib SVG.AnimationAddtion.attrib (type::("translate" | "scale" | "rotate" | "skewX" | "skewY"))?) ;
SVG.ellipse ::= ellipse::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib (cx::SVG.Coordinate.datatype)? (cy::SVG.Coordinate.datatype)? rx::SVG.Length.datatype ry::SVG.Length.datatype (transform::SVG.TransformList.datatype)?) ;
SVG.image ::= image::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Viewport.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Profile.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.XLinkEmbed.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? width::SVG.Length.datatype height::SVG.Length.datatype (preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype)? (transform::SVG.TransformList.datatype)?) ;
SVG.Style.attrib ::= ε ;
 SVG.Style.attrib ::= (style::SVG.StyleSheet.datatype)? (class::SVG.ClassList.datatype)? SVG.Style.extra.attrib ;
SVG.font-face ::= font-face::(SVG.Description.class* SVG.font-face-src? SVG.Core.attrib (font-family::string())? (font-style::string())? (font-variant::string())? (font-weight::string())? (font-stretch::string())? (font-size::string())? (unicode-range::string())? (units-per-em::SVG.Number.datatype)? (panose-1::string())? (stemv::SVG.Number.datatype)? (stemh::SVG.Number.datatype)? (slope::SVG.Number.datatype)? (cap-height::SVG.Number.datatype)? (x-height::SVG.Number.datatype)? (accent-height::SVG.Number.datatype)? (ascent::SVG.Number.datatype)? (descent::SVG.Number.datatype)? (widths::string())? (bbox::string())? (ideographic::SVG.Number.datatype)? (alphabetic::SVG.Number.datatype)? (mathematical::SVG.Number.datatype)? (hanging::SVG.Number.datatype)? (underline-position::SVG.Number.datatype)? (underline-thickness::SVG.Number.datatype)? (strikethrough-position::SVG.Number.datatype)? (strikethrough-thickness::SVG.Number.datatype)? (overline-position::SVG.Number.datatype)? (overline-thickness::SVG.Number.datatype)?) ;
SVG.XLink.attrib ::= ε ;
 SVG.XLink.attrib ::= (xlink:type::"simple")? (xlink:href::SVG.URI.datatype)? (xlink:role::SVG.URI.datatype)? (xlink:arcrole::SVG.URI.datatype)? (xlink:title::string())? (xlink:show::"other")? (xlink:actuate::"onLoad")? SVG.XLink.extra.attrib ;
SVG.Core.attrib ::= SVG.id.attrib SVG.base.attrib SVG.lang.attrib SVG.space.attrib SVG.Core.extra.attrib ;
 SVG.Core.attrib ::= ε ;
SVG.title ::= title::(string() SVG.Core.attrib SVG.Style.attrib) ;
SVG.XLinkReplace.attrib ::= (xlink:type::"simple")? xlink:href::SVG.URI.datatype (xlink:role::SVG.URI.datatype)? (xlink:arcrole::SVG.URI.datatype)? (xlink:title::string())? (xlink:show::("new" | "replace"))? (xlink:actuate::"onRequest")? SVG.XLinkReplace.extra.attrib ;
SVG.animateColor ::= animateColor::(SVG.Description.class* SVG.Core.attrib SVG.Conditional.attrib SVG.AnimationEvents.attrib SVG.External.attrib SVG.Animation.attrib SVG.AnimationAttribute.attrib SVG.AnimationTiming.attrib SVG.AnimationValue.attrib SVG.AnimationAddtion.attrib) ;
SVG.polyline ::= polyline::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Marker.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib points::SVG.Points.datatype (transform::SVG.TransformList.datatype)?) ;
SVG.mpath ::= mpath::(SVG.Description.class* SVG.Core.attrib SVG.XLinkRequired.attrib SVG.External.attrib) ;
SVG.XLinkEmbed.attrib ::= (xlink:type::"simple")? xlink:href::SVG.URI.datatype (xlink:role::SVG.URI.datatype)? (xlink:arcrole::SVG.URI.datatype)? (xlink:title::string())? (xlink:show::"embed")? (xlink:actuate::"onLoad")? SVG.XLinkEmbed.extra.attrib ;
SVG.font-face-name ::= font-face-name::(ε SVG.Core.attrib (name::string())?) ;
SVG.Paint.attrib ::= SVG.fill.attrib SVG.fill-rule.attrib SVG.stroke.attrib SVG.stroke-dasharray.attrib SVG.stroke-dashoffset.attrib SVG.stroke-linecap.attrib SVG.stroke-linejoin.attrib SVG.stroke-miterlimit.attrib SVG.stroke-width.attrib SVG.Paint.extra.attrib ;
 SVG.Paint.attrib ::= ε ;
SVG.line ::= line::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Marker.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib (x1::SVG.Coordinate.datatype)? (y1::SVG.Coordinate.datatype)? (x2::SVG.Coordinate.datatype)? (y2::SVG.Coordinate.datatype)? (transform::SVG.TransformList.datatype)?) ;
SVG.switch ::= switch::(SVG.Description.class* (SVG.svg | SVG.g | SVG.use | SVG.text | SVG.text | SVG.Animation.class | SVG.Conditional.class | SVG.Image.class | SVG.Shape.class | SVG.Hyperlink.class | SVG.Extensibility.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.External.attrib (transform::SVG.TransformList.datatype)?) ;
SVG.use ::= use::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.XLinkEmbed.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? (width::SVG.Length.datatype)? (height::SVG.Length.datatype)? (transform::SVG.TransformList.datatype)?) ;
SVG.missing-glyph ::= missing-glyph::(SVG.Description.class* SVG.Core.attrib SVG.Style.attrib (d::SVG.PathData.datatype)? (horiz-adv-x::SVG.Number.datatype)?) ;
SVG.metadata ::= metadata::(string() SVG.Core.attrib) ;
SVG.text ::= text::((string() | SVG.Description.class | SVG.Animation.class | SVG.Hyperlink.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib (x::SVG.Coordinates.datatype)? (y::SVG.Coordinates.datatype)? (rotate::SVG.Numbers.datatype)? (transform::SVG.TransformList.datatype)?) ;
SVG.Presentation.attrib ::= SVG.Container.attrib SVG.Viewport.attrib SVG.Text.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Marker.attrib SVG.Profile.attrib SVG.Gradient.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.FilterColor.attrib SVG.Cursor.attrib (flood-color::SVG.SVGColor.datatype)? (flood-opacity::SVG.OpacityValue.datatype)? (lighting-color::SVG.SVGColor.datatype)? SVG.Presentation.extra.attrib ;
SVG.hkern ::= hkern::(ε SVG.Core.attrib (u1::string())? (g1::string())? (u2::string())? (g2::string())? k::SVG.Number.datatype) ;
SVG.AnimationTiming.attrib ::= (begin::string())? (dur::string())? (end::string())? (min::string())? (max::string())? (restart::("always" | "never" | "whenNotActive"))? (repeatCount::string())? (repeatDur::string())? (fill::("remove" | "freeze"))? SVG.AnimationTiming.extra.attrib ;
SVG.XLinkRequired.attrib ::= (xlink:type::"simple")? xlink:href::SVG.URI.datatype (xlink:role::SVG.URI.datatype)? (xlink:arcrole::SVG.URI.datatype)? (xlink:title::string())? (xlink:show::"other")? (xlink:actuate::"onLoad")? SVG.XLinkRequired.extra.attrib ;
SVG.polygon ::= polygon::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Marker.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib points::SVG.Points.datatype (transform::SVG.TransformList.datatype)?) ;
SVG.view ::= view::(SVG.Description.class* SVG.Core.attrib SVG.External.attrib (viewBox::SVG.ViewBoxSpec.datatype)? (preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype)? (zoomAndPan::("disable" | "magnify"))? (viewTarget::string())?) ;
SVG.path ::= path::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Marker.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib d::SVG.PathData.datatype (pathLength::SVG.Number.datatype)? (transform::SVG.TransformList.datatype)?) ;
SVG.rect ::= rect::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? width::SVG.Length.datatype height::SVG.Length.datatype (rx::SVG.Length.datatype)? (ry::SVG.Length.datatype)? (transform::SVG.TransformList.datatype)?) ;
SVG.animateMotion ::= animateMotion::(SVG.Description.class* SVG.mpath? SVG.Core.attrib SVG.Conditional.attrib SVG.AnimationEvents.attrib SVG.External.attrib SVG.Animation.attrib SVG.AnimationTiming.attrib SVG.AnimationAddtion.attrib (calcMode::("discrete" | "linear" | "paced" | "spline"))? (values::string())? (keyTimes::string())? (Splines::string())? (from::string())? (to::string())? (by::string())? (path::string())? (keyPoints::string())? (rotate::string())? (origin::string())?) ;
SVG.foreignObject ::= foreignObject::(SVG.foreignObject.content SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? width::SVG.Length.datatype height::SVG.Length.datatype (transform::SVG.TransformList.datatype)?) ;
SVG.font-face-src ::= font-face-src::(SVG.font-face-name+ SVG.Core.attrib) ;
SVG.style ::= style::(string() SVG.Core.attrib type::SVG.ContentType.datatype (media::SVG.MediaDesc.datatype)? (title::SVG.Text.datatype)?) ;
SVG.External.attrib ::= ε ;
 SVG.External.attrib ::= SVG.externalResourcesRequired.attrib SVG.External.extra.attrib ;
SVG.Graphics.attrib ::= SVG.display.attrib SVG.visibility.attrib SVG.Graphics.extra.attrib ;
 SVG.Graphics.attrib ::= ε ;
SVG.glyph ::= glyph::(SVG.Description.class* SVG.Core.attrib SVG.Style.attrib (unicode::string())? (glyph-name::string())? (d::SVG.PathData.datatype)? (arabic-form::string())? (lang::SVG.LanguageCodes.datatype)? (horiz-adv-x::SVG.Number.datatype)?) ;
SVG.AnimationValue.attrib ::= (calcMode::("discrete" | "linear" | "paced" | "spline"))? (values::string())? (keyTimes::string())? (keySplines::string())? (from::string())? (to::string())? (by::string())? SVG.AnimationValue.extra.attrib ;
--------------------markup::svg-furubayashi.bgf--------------------
SVG.Font.attrib ::= ε ;
 SVG.Font.attrib ::= (font-family::SVG.FontFamilyValue.datatype)? (font-size::SVG.FontSizeValue.datatype)? (font-size-adjust::SVG.FontSizeAdjustValue.datatype)? (font-stretch::("normal" | "wider" | "narrower" | "ultra-condensed" | "extra-condensed" | "condensed" | "semi-condensed" | "semi-expanded" | "expanded" | "extra-expanded" | "ultra-expanded" | "inherit"))? (font-style::("normal" | "italic" | "oblique" | "inherit"))? (font-variant::("normal" | "small-caps" | "inherit"))? (font-weight::("normal" | "bold" | "bolder" | "lighter" | "100" | "200" | "300" | "400" | "500" | "600" | "700" | "800" | "900" | "inherit"))? SVG.Font.extra.attrib ;
SVG.clipPath ::= clipPath::(SVG.Description.class* (SVG.Animation.class | SVG.Use.class | SVG.Shape.class | SVG.Text.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Text.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.Cursor.attrib SVG.External.attrib (transform::SVG.TransformList.datatype)? (clipPathUnits::("userSpaceOnUse" | "objectBoundingBox"))?) ;
SVG.Gradient.attrib ::= ε ;
 SVG.Gradient.attrib ::= (stop-color::SVG.SVGColor.datatype)? (stop-opacity::SVG.OpacityValue.datatype)? SVG.Gradient.extra.attrib ;
SVG.Animation.attrib ::= SVG.XLink.attrib SVG.Animation.extra.attrib ;
SVG.AnimationAddtion.attrib ::= (additive::("replace" | "sum"))? (accumulate::("none" | "sum"))? SVG.AnimationAddition.extra.attrib ;
SVG.desc ::= desc::(string() SVG.Core.attrib SVG.Style.attrib) ;
SVG.defs ::= defs::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.External.attrib (transform::SVG.TransformList.datatype)?) ;
SVG.feTile ::= feTile::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib) ;
SVG.GraphicalEvents.attrib ::= ε ;
 SVG.GraphicalEvents.attrib ::= SVG.onfocusin.attrib SVG.onfocusout.attrib SVG.onactivate.attrib SVG.onclick.attrib SVG.onmousedown.attrib SVG.onmouseup.attrib SVG.onmouseover.attrib SVG.onmousemove.attrib SVG.onmouseout.attrib SVG.onload.attrib SVG.GraphicalEvents.extra.attrib ;
SVG.TextContent.attrib ::= ε ;
 SVG.TextContent.attrib ::= (alignment-baseline::("baseline" | "top" | "before-edge" | "text-top" | "text-before-edge" | "middle" | "bottom" | "after-edge" | "text-bottom" | "text-after-edge" | "ideographic" | "lower" | "hanging" | "mathematical" | "inherit"))? (baseline-shift::SVG.BaselineShiftValue.datatype)? (direction::("ltr" | "rtl" | "inherit"))? (dominant-baseline::("auto" | "autosense-script" | "no-change" | "reset" | "ideographic" | "lower" | "hanging" | "mathematical" | "inherit"))? (glyph-orientation-horizontal::SVG.GlyphOrientationHorizontalValue.datatype)? (glyph-orientation-vertical::SVG.GlyphOrientationVerticalValue.datatype)? (kerning::SVG.KerningValue.datatype)? (letter-spacing::SVG.SpacingValue.datatype)? (text-anchor::("start" | "middle" | "end" | "inherit"))? (text-decoration::SVG.TextDecorationValue.datatype)? (unicode-bidi::("normal" | "embed" | "bidi-override" | "inherit"))? (word-spacing::SVG.SpacingValue.datatype)? SVG.TextContent.extra.attrib ;
SVG.animateTransform ::= animateTransform::(SVG.Description.class* SVG.Core.attrib SVG.Conditional.attrib SVG.AnimationEvents.attrib SVG.External.attrib SVG.Animation.attrib SVG.AnimationAttribute.attrib SVG.AnimationTiming.attrib SVG.AnimationValue.attrib SVG.AnimationAddtion.attrib (type::("translate" | "scale" | "rotate" | "skewX" | "skewY"))?) ;
SVG.font-face ::= font-face::(SVG.Description.class* SVG.font-face-src? SVG.definition-src? SVG.Core.attrib (font-family::string())? (font-style::string())? (font-variant::string())? (font-weight::string())? (font-stretch::string())? (font-size::string())? (unicode-range::string())? (units-per-em::SVG.Number.datatype)? (panose-1::string())? (stemv::SVG.Number.datatype)? (stemh::SVG.Number.datatype)? (slope::SVG.Number.datatype)? (cap-height::SVG.Number.datatype)? (x-height::SVG.Number.datatype)? (accent-height::SVG.Number.datatype)? (ascent::SVG.Number.datatype)? (descent::SVG.Number.datatype)? (widths::string())? (bbox::string())? (ideographic::SVG.Number.datatype)? (alphabetic::SVG.Number.datatype)? (mathematical::SVG.Number.datatype)? (hanging::SVG.Number.datatype)? (v-ideographic::SVG.Number.datatype)? (v-alphabetic::SVG.Number.datatype)? (v-mathematical::SVG.Number.datatype)? (v-hanging::SVG.Number.datatype)? (underline-position::SVG.Number.datatype)? (underline-thickness::SVG.Number.datatype)? (strikethrough-position::SVG.Number.datatype)? (strikethrough-thickness::SVG.Number.datatype)? (overline-position::SVG.Number.datatype)? (overline-thickness::SVG.Number.datatype)?) ;
SVG.fePointLight ::= fePointLight::((SVG.animate | SVG.set)* SVG.Core.attrib (x::SVG.Number.datatype)? (y::SVG.Number.datatype)? (z::SVG.Number.datatype)?) ;
SVG.altGlyph ::= altGlyph::(string() SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.XLink.attrib SVG.External.attrib (x::SVG.Coordinates.datatype)? (y::SVG.Coordinates.datatype)? (dx::SVG.Lengths.datatype)? (dy::SVG.Lengths.datatype)? (glyphRef::string())? (format::string())? (rotate::SVG.Numbers.datatype)?) ;
SVG.stop ::= stop::((SVG.animate | SVG.set | SVG.animateColor)* SVG.Core.attrib SVG.Style.attrib SVG.Color.attrib SVG.Gradient.attrib offset::SVG.NumberOrPercentage.datatype) ;
SVG.animateColor ::= animateColor::(SVG.Description.class* SVG.Core.attrib SVG.Conditional.attrib SVG.AnimationEvents.attrib SVG.External.attrib SVG.Animation.attrib SVG.AnimationAttribute.attrib SVG.AnimationTiming.attrib SVG.AnimationValue.attrib SVG.AnimationAddtion.attrib) ;
SVG.feConvolveMatrix ::= feConvolveMatrix::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib order::SVG.NumberOptionalNumber.datatype kernelMatrix::string() (divisor::SVG.Number.datatype)? (bias::SVG.Number.datatype)? (targetX::SVG.Integer.datatype)? (targetY::SVG.Integer.datatype)? (edgeMode::("duplicate" | "wrap" | "none"))? (kernelUnitLength::SVG.NumberOptionalNumber.datatype)? (preserveAlpha::SVG.Boolean.datatype)?) ;
SVG.mpath ::= mpath::(SVG.Description.class* SVG.Core.attrib SVG.XLinkRequired.attrib SVG.External.attrib) ;
SVG.XLinkEmbed.attrib ::= (xlink:type::"simple")? xlink:href::SVG.URI.datatype (xlink:role::SVG.URI.datatype)? (xlink:arcrole::SVG.URI.datatype)? (xlink:title::string())? (xlink:show::"embed")? (xlink:actuate::"onLoad")? SVG.XLinkEmbed.extra.attrib ;
SVG.font-face-name ::= font-face-name::(ε SVG.Core.attrib (name::string())?) ;
SVG.pattern ::= pattern::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.XLink.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? (width::SVG.Length.datatype)? (height::SVG.Length.datatype)? (patternUnits::("userSpaceOnUse" | "objectBoundingBox"))? (patternContentUnits::("userSpaceOnUse" | "objectBoundingBox"))? (patternTransform::SVG.TransformList.datatype)? (viewBox::SVG.ViewBoxSpec.datatype)? (preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype)?) ;
SVG.feFuncR ::= feFuncR::((SVG.animate | SVG.set)* SVG.Core.attrib type::("identity" | "table" | "discrete" | "linear" | "gamma") (tableValues::string())? (slope::SVG.Number.datatype)? (intercept::SVG.Number.datatype)? (amplitude::SVG.Number.datatype)? (exponent::SVG.Number.datatype)? (offset::SVG.Number.datatype)?) ;
SVG.Paint.attrib ::= ε ;
 SVG.Paint.attrib ::= SVG.fill.attrib SVG.fill-rule.attrib SVG.stroke.attrib SVG.stroke-dasharray.attrib SVG.stroke-dashoffset.attrib SVG.stroke-linecap.attrib SVG.stroke-linejoin.attrib SVG.stroke-miterlimit.attrib SVG.stroke-width.attrib SVG.Paint.extra.attrib ;
SVG.vkern ::= vkern::(ε SVG.Core.attrib (u1::string())? (g1::string())? (u2::string())? (g2::string())? k::SVG.Number.datatype) ;
SVG.filter ::= filter::(SVG.Description.class* (SVG.animate | SVG.set | SVG.FilterPrimitive.class)* SVG.Core.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.XLink.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? (width::SVG.Length.datatype)? (height::SVG.Length.datatype)? (filterRes::SVG.NumberOptionalNumber.datatype)? (filterUnits::("userSpaceOnUse" | "objectBoundingBox"))? (primitiveUnits::("userSpaceOnUse" | "objectBoundingBox"))?) ;
SVG.Text.attrib ::= ε ;
 SVG.Text.attrib ::= (writing-mode::("lr-tb" | "rl-tb" | "tb-rl" | "lr" | "rl" | "tb" | "inherit"))? SVG.Text.extra.attrib ;
SVG.linearGradient ::= linearGradient::(SVG.Description.class* (SVG.stop | SVG.animate | SVG.set | SVG.animateTransform)* SVG.Core.attrib SVG.Style.attrib SVG.Color.attrib SVG.Gradient.attrib SVG.XLink.attrib SVG.External.attrib (x1::SVG.Coordinate.datatype)? (y1::SVG.Coordinate.datatype)? (x2::SVG.Coordinate.datatype)? (y2::SVG.Coordinate.datatype)? (gradientUnits::("userSpaceOnUse" | "objectBoundingBox"))? (gradientTransform::SVG.TransformList.datatype)? (spreadMethod::("pad" | "reflect" | "repeat"))?) ;
SVG.feComponentTransfer ::= feComponentTransfer::(SVG.feFuncR? SVG.feFuncG? SVG.feFuncB? SVG.feFuncA? SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib) ;
SVG.line ::= line::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Marker.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib (x1::SVG.Coordinate.datatype)? (y1::SVG.Coordinate.datatype)? (x2::SVG.Coordinate.datatype)? (y2::SVG.Coordinate.datatype)? (transform::SVG.TransformList.datatype)?) ;
SVG.Clip.attrib ::= (clip-path::SVG.ClipPathValue.datatype)? (clip-rule::SVG.ClipFillRule.datatype)? SVG.Clip.extra.attrib ;
 SVG.Clip.attrib ::= ε ;
SVG.feComposite ::= feComposite::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib in2::string() (operator::("over" | "in" | "out" | "atop" | "xor" | "arithmetic"))? (k1::SVG.Number.datatype)? (k2::SVG.Number.datatype)? (k3::SVG.Number.datatype)? (k4::SVG.Number.datatype)?) ;
SVG.feDistantLight ::= feDistantLight::((SVG.animate | SVG.set)* SVG.Core.attrib (azimuth::SVG.Number.datatype)? (elevation::SVG.Number.datatype)?) ;
SVG.use ::= use::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.XLinkEmbed.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? (width::SVG.Length.datatype)? (height::SVG.Length.datatype)? (transform::SVG.TransformList.datatype)?) ;
SVG.textPath ::= textPath::((string() | SVG.tspan | SVG.tref | SVG.altGlyph | SVG.animate | SVG.set | SVG.animateColor | SVG.Description.class | SVG.Hyperlink.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.XLinkRequired.attrib SVG.External.attrib (startOffset::SVG.Length.datatype)? (textLength::SVG.Length.datatype)? (lengthAdjust::("spacing" | "spacingAndGlyphs"))? (method::("align" | "stretch"))? (spacing::("auto" | "exact"))?) ;
SVG.feDisplacementMap ::= feDisplacementMap::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib in2::string() (scale::SVG.Number.datatype)? (xChannelSelector::("R" | "G" | "B" | "A"))? (yChannelSelector::("R" | "G" | "B" | "A"))?) ;
SVG.missing-glyph ::= missing-glyph::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Style.attrib SVG.Presentation.attrib (d::SVG.PathData.datatype)? (horiz-adv-x::SVG.Number.datatype)? (vert-origin-x::SVG.Number.datatype)? (vert-origin-y::SVG.Number.datatype)? (vert-adv-y::SVG.Number.datatype)?) ;
SVG.feFuncG ::= feFuncG::((SVG.animate | SVG.set)* SVG.Core.attrib type::("identity" | "table" | "discrete" | "linear" | "gamma") (tableValues::string())? (slope::SVG.Number.datatype)? (intercept::SVG.Number.datatype)? (amplitude::SVG.Number.datatype)? (exponent::SVG.Number.datatype)? (offset::SVG.Number.datatype)?) ;
SVG.radialGradient ::= radialGradient::(SVG.Description.class* (SVG.stop | SVG.animate | SVG.set | SVG.animateTransform)* SVG.Core.attrib SVG.Style.attrib SVG.Color.attrib SVG.Gradient.attrib SVG.XLink.attrib SVG.External.attrib (cx::SVG.Coordinate.datatype)? (cy::SVG.Coordinate.datatype)? (r::SVG.Length.datatype)? (fx::SVG.Coordinate.datatype)? (fy::SVG.Coordinate.datatype)? (gradientUnits::("userSpaceOnUse" | "objectBoundingBox"))? (gradientTransform::SVG.TransformList.datatype)? (spreadMethod::("pad" | "reflect" | "repeat"))?) ;
SVG.altGlyphDef ::= altGlyphDef::((SVG.glyphRef+) | (SVG.altGlyphItem+) SVG.Core.attrib) ;
SVG.FilterColor.attrib ::= ε ;
 SVG.FilterColor.attrib ::= (color-interpolation-filters::("auto" | "sRGB" | "linearRGB" | "inherit"))? SVG.FilterColor.extra.attrib ;
SVG.mask ::= mask::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? (width::SVG.Length.datatype)? (height::SVG.Length.datatype)? (maskUnits::("userSpaceOnUse" | "objectBoundingBox"))? (maskContentUnits::("userSpaceOnUse" | "objectBoundingBox"))?) ;
SVG.feFuncB ::= feFuncB::((SVG.animate | SVG.set)* SVG.Core.attrib type::("identity" | "table" | "discrete" | "linear" | "gamma") (tableValues::string())? (slope::SVG.Number.datatype)? (intercept::SVG.Number.datatype)? (amplitude::SVG.Number.datatype)? (exponent::SVG.Number.datatype)? (offset::SVG.Number.datatype)?) ;
SVG.feFlood ::= feFlood::((SVG.animate | SVG.set | SVG.animateColor)* SVG.Core.attrib SVG.Style.attrib SVG.Color.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib (flood-color::SVG.SVGColor.datatype)? (flood-opacity::SVG.OpacityValue.datatype)?) ;
SVG.definition-src ::= definition-src::(ε SVG.Core.attrib SVG.XLinkRequired.attrib) ;
SVG.hkern ::= hkern::(ε SVG.Core.attrib (u1::string())? (g1::string())? (u2::string())? (g2::string())? k::SVG.Number.datatype) ;
SVG.feFuncA ::= feFuncA::((SVG.animate | SVG.set)* SVG.Core.attrib type::("identity" | "table" | "discrete" | "linear" | "gamma") (tableValues::string())? (slope::SVG.Number.datatype)? (intercept::SVG.Number.datatype)? (amplitude::SVG.Number.datatype)? (exponent::SVG.Number.datatype)? (offset::SVG.Number.datatype)?) ;
SVG.Presentation.attrib ::= SVG.Container.attrib SVG.Viewport.attrib SVG.Text.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Marker.attrib SVG.Profile.attrib SVG.Gradient.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.FilterColor.attrib SVG.Cursor.attrib (flood-color::SVG.SVGColor.datatype)? (flood-opacity::SVG.OpacityValue.datatype)? (lighting-color::SVG.SVGColor.datatype)? SVG.Presentation.extra.attrib ;
SVG.AnimationTiming.attrib ::= (begin::string())? (dur::string())? (end::string())? (min::string())? (max::string())? (restart::("always" | "never" | "whenNotActive"))? (repeatCount::string())? (repeatDur::string())? (fill::("remove" | "freeze"))? SVG.AnimationTiming.extra.attrib ;
SVG.font-face-format ::= font-face-format::(ε SVG.Core.attrib (string::string())?) ;
SVG.FilterPrimitive.attrib ::= (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? (width::SVG.Length.datatype)? (height::SVG.Length.datatype)? (result::string())? SVG.FilterPrimitive.extra.attrib ;
SVG.rect ::= rect::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? width::SVG.Length.datatype height::SVG.Length.datatype (rx::SVG.Length.datatype)? (ry::SVG.Length.datatype)? (transform::SVG.TransformList.datatype)?) ;
SVG.animateMotion ::= animateMotion::(SVG.Description.class* SVG.mpath? SVG.Core.attrib SVG.Conditional.attrib SVG.AnimationEvents.attrib SVG.External.attrib SVG.Animation.attrib SVG.AnimationTiming.attrib SVG.AnimationAddtion.attrib (calcMode::("discrete" | "linear" | "paced" | "spline"))? (values::string())? (keyTimes::string())? (Splines::string())? (from::string())? (to::string())? (by::string())? (path::string())? (keyPoints::string())? (rotate::string())? (origin::string())?) ;
SVG.feGaussianBlur ::= feGaussianBlur::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib (stdDeviation::SVG.NumberOptionalNumber.datatype)?) ;
SVG.Viewport.attrib ::= ε ;
 SVG.Viewport.attrib ::= SVG.clip.attrib SVG.overflow.attrib SVG.Viewport.extra.attrib ;
SVG.Graphics.attrib ::= ε ;
 SVG.Graphics.attrib ::= SVG.display.attrib SVG.image-rendering.attrib SVG.pointer-events.attrib SVG.shape-rendering.attrib SVG.text-rendering.attrib SVG.visibility.attrib SVG.Graphics.extra.attrib ;
SVG.Mask.attrib ::= ε ;
 SVG.Mask.attrib ::= (mask::SVG.MaskValue.datatype)? SVG.Mask.extra.attrib ;
SVG.AnimationValue.attrib ::= (calcMode::("discrete" | "linear" | "paced" | "spline"))? (values::string())? (keyTimes::string())? (keySplines::string())? (from::string())? (to::string())? (by::string())? SVG.AnimationValue.extra.attrib ;
SVG.cursor ::= cursor::(SVG.Description.class* SVG.Core.attrib SVG.Conditional.attrib SVG.XLinkRequired.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)?) ;
SVG.Color.attrib ::= ε ;
 SVG.Color.attrib ::= SVG.color.attrib SVG.color-interpolation.attrib SVG.color-rendering.attrib SVG.Color.extra.attrib ;
SVG.g ::= g::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.External.attrib (transform::SVG.TransformList.datatype)?) ;
SVG.Conditional.attrib ::= (requiredFeatures::SVG.FeatureList.datatype)? (requiredExtensions::SVG.ExtensionList.datatype)? (systemLanguage::SVG.LanguageCodes.datatype)? SVG.Conditional.extra.attrib ;
 SVG.Conditional.attrib ::= ε ;
SVG.svg ::= svg::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.DocumentEvents.attrib SVG.GraphicalEvents.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? (width::SVG.Length.datatype)? (height::SVG.Length.datatype)? (viewBox::SVG.ViewBoxSpec.datatype)? (preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype)? (zoomAndPan::("disable" | "magnify"))? version::SVG.Number.datatype (baseProfile::SVG.Text.datatype)? (contentScriptType::SVG.ContentType.datatype)? (contentStyleType::SVG.ContentType.datatype)?) ;
SVG.circle ::= circle::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib (cx::SVG.Coordinate.datatype)? (cy::SVG.Coordinate.datatype)? r::SVG.Length.datatype (transform::SVG.TransformList.datatype)?) ;
SVG.font ::= font::(SVG.Description.class* SVG.font-face SVG.missing-glyph (SVG.glyph | SVG.hkern | SVG.vkern)* SVG.Core.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.External.attrib (horiz-origin-x::SVG.Number.datatype)? (horiz-origin-y::SVG.Number.datatype)? horiz-adv-x::SVG.Number.datatype (vert-origin-x::SVG.Number.datatype)? (vert-origin-y::SVG.Number.datatype)? (vert-adv-y::SVG.Number.datatype)?) ;
SVG.Profile.attrib ::= ε ;
 SVG.Profile.attrib ::= (color-profile::string())? SVG.Profile.extra.attrib ;
SVG.feSpecularLighting ::= feSpecularLighting::(SVG.feDistantLight | SVG.fePointLight | SVG.feSpotLight (SVG.animate | SVG.set | SVG.animateColor)* SVG.Core.attrib SVG.Style.attrib SVG.Color.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib (lighting-color::SVG.SVGColor.datatype)? (surfaceScale::SVG.Number.datatype)? (specularConstant::SVG.Number.datatype)? (specularExponent::SVG.Number.datatype)? (kernelUnitLength::SVG.NumberOptionalNumber.datatype)?) ;
SVG.set ::= set::(SVG.Description.class* SVG.Core.attrib SVG.Conditional.attrib SVG.AnimationEvents.attrib SVG.External.attrib SVG.Animation.attrib SVG.AnimationAttribute.attrib SVG.AnimationTiming.attrib (to::string())?) ;
SVG.a ::= a::((string() | SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.XLinkReplace.attrib SVG.External.attrib (transform::SVG.TransformList.datatype)? (target::SVG.LinkTarget.datatype)?) ;
SVG.animate ::= animate::(SVG.Description.class* SVG.Core.attrib SVG.Conditional.attrib SVG.AnimationEvents.attrib SVG.External.attrib SVG.Animation.attrib SVG.AnimationAttribute.attrib SVG.AnimationTiming.attrib SVG.AnimationValue.attrib SVG.AnimationAddtion.attrib) ;
SVG.Filter.attrib ::= ε ;
 SVG.Filter.attrib ::= (filter::SVG.FilterValue.datatype)? SVG.Filter.extra.attrib ;
SVG.AnimationAttribute.attrib ::= attributeName::string() (attributeType::string())? SVG.AnimationAttribute.extra.attrib ;
SVG.script ::= script::(string() SVG.Core.attrib SVG.XLink.attrib SVG.External.attrib type::SVG.ContentType.datatype) ;
SVG.ellipse ::= ellipse::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib (cx::SVG.Coordinate.datatype)? (cy::SVG.Coordinate.datatype)? rx::SVG.Length.datatype ry::SVG.Length.datatype (transform::SVG.TransformList.datatype)?) ;
SVG.Marker.attrib ::= ε ;
 SVG.Marker.attrib ::= (marker-start::SVG.MarkerValue.datatype)? (marker-mid::SVG.MarkerValue.datatype)? (marker-end::SVG.MarkerValue.datatype)? SVG.Marker.extra.attrib ;
SVG.feImage ::= feImage::((SVG.animate | SVG.set | SVG.animateTransform)* SVG.Core.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.FilterPrimitive.attrib SVG.XLinkEmbed.attrib SVG.External.attrib (preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype)?) ;
SVG.glyphRef ::= glyphRef::(ε SVG.Core.attrib SVG.Style.attrib SVG.Font.attrib SVG.XLink.attrib (x::SVG.Coordinates.datatype)? (y::SVG.Coordinates.datatype)? (dx::SVG.Lengths.datatype)? (dy::SVG.Lengths.datatype)? (glyphRef::string())? (format::string())?) ;
SVG.image ::= image::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Viewport.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Profile.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.XLinkEmbed.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? width::SVG.Length.datatype height::SVG.Length.datatype (preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype)? (transform::SVG.TransformList.datatype)?) ;
SVG.feMergeNode ::= feMergeNode::((SVG.animate | SVG.set)* SVG.Core.attrib (in::string())?) ;
SVG.Style.attrib ::= ε ;
 SVG.Style.attrib ::= (style::SVG.StyleSheet.datatype)? (class::SVG.ClassList.datatype)? SVG.Style.extra.attrib ;
SVG.XLink.attrib ::= ε ;
 SVG.XLink.attrib ::= (xlink:type::"simple")? (xlink:href::SVG.URI.datatype)? (xlink:role::SVG.URI.datatype)? (xlink:arcrole::SVG.URI.datatype)? (xlink:title::string())? (xlink:show::"other")? (xlink:actuate::"onLoad")? SVG.XLink.extra.attrib ;
SVG.Core.attrib ::= SVG.id.attrib SVG.base.attrib SVG.lang.attrib SVG.space.attrib SVG.Core.extra.attrib ;
 SVG.Core.attrib ::= ε ;
SVG.title ::= title::(string() SVG.Core.attrib SVG.Style.attrib) ;
SVG.XLinkReplace.attrib ::= (xlink:type::"simple")? xlink:href::SVG.URI.datatype (xlink:role::SVG.URI.datatype)? (xlink:arcrole::SVG.URI.datatype)? (xlink:title::string())? (xlink:show::("new" | "replace"))? (xlink:actuate::"onRequest")? SVG.XLinkReplace.extra.attrib ;
SVG.polyline ::= polyline::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Marker.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib points::SVG.Points.datatype (transform::SVG.TransformList.datatype)?) ;
SVG.feBlend ::= feBlend::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib in2::string() (mode::("normal" | "multiply" | "screen" | "darken" | "lighten"))?) ;
SVG.feMorphology ::= feMorphology::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib (operator::("erode" | "dilate"))? (radius::SVG.NumberOptionalNumber.datatype)?) ;
SVG.feDiffuseLighting ::= feDiffuseLighting::(SVG.feDistantLight | SVG.fePointLight | SVG.feSpotLight (SVG.animate | SVG.set | SVG.animateColor)* SVG.Core.attrib SVG.Style.attrib SVG.Color.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib (lighting-color::SVG.SVGColor.datatype)? (surfaceScale::SVG.Number.datatype)? (diffuseConstant::SVG.Number.datatype)? (kernelUnitLength::SVG.NumberOptionalNumber.datatype)?) ;
SVG.AnimationEvents.attrib ::= SVG.onbegin.attrib SVG.onend.attrib SVG.onrepeat.attrib SVG.AnimationEvents.extra.attrib ;
 SVG.AnimationEvents.attrib ::= ε ;
SVG.marker ::= marker::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.External.attrib (refX::SVG.Coordinate.datatype)? (refY::SVG.Coordinate.datatype)? (markerUnits::("strokeWidth" | "userSpaceOnUse"))? (markerWidth::SVG.Length.datatype)? (markerHeight::SVG.Length.datatype)? (orient::string())? (viewBox::SVG.ViewBoxSpec.datatype)? (preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype)?) ;
SVG.altGlyphItem ::= altGlyphItem::(SVG.glyphRef+ SVG.Core.attrib) ;
SVG.switch ::= switch::(SVG.Description.class* (SVG.svg | SVG.g | SVG.use | SVG.text | SVG.text | SVG.Animation.class | SVG.Conditional.class | SVG.Image.class | SVG.Shape.class | SVG.Hyperlink.class | SVG.Extensibility.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.External.attrib (transform::SVG.TransformList.datatype)?) ;
SVG.feOffset ::= feOffset::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib (dx::SVG.Number.datatype)? (dy::SVG.Number.datatype)?) ;
SVG.feTurbulence ::= feTurbulence::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitive.attrib (baseFrequency::SVG.NumberOptionalNumber.datatype)? (numOctaves::SVG.Integer.datatype)? (seed::SVG.Number.datatype)? (stitchTiles::("stitch" | "noStitch"))? (type::("fractalNoise" | "turbulence"))?) ;
SVG.feColorMatrix ::= feColorMatrix::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib (type::("matrix" | "saturate" | "hueRotate" | "luminanceToAlpha"))? (values::string())?) ;
SVG.DocumentEvents.attrib ::= SVG.onunload.attrib SVG.onabort.attrib SVG.onerror.attrib SVG.onresize.attrib SVG.onscroll.attrib SVG.onzoom.attrib SVG.DocumentEvents.extra.attrib ;
SVG.metadata ::= metadata::(string() SVG.Core.attrib) ;
SVG.text ::= text::((string() | SVG.Description.class | SVG.Animation.class | SVG.TextContent.class | SVG.Hyperlink.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Text.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib (x::SVG.Coordinates.datatype)? (y::SVG.Coordinates.datatype)? (dx::SVG.Lengths.datatype)? (dy::SVG.Lengths.datatype)? (rotate::SVG.Numbers.datatype)? (textLength::SVG.Length.datatype)? (lengthAdjust::("spacing" | "spacingAndGlyphs"))? (transform::SVG.TransformList.datatype)?) ;
SVG.Opacity.attrib ::= ε ;
 SVG.Opacity.attrib ::= SVG.opacity.attrib SVG.fill-opacity.attrib SVG.stroke-opacity.attrib SVG.Opacity.extra.attrib ;
SVG.color-profile ::= color-profile::(SVG.Description.class* SVG.Core.attrib SVG.XLink.attrib (local::string())? name::string() (rendering-intent::("auto" | "perceptual" | "relative-colorimetric" | "saturation" | "absolute-colorimetric"))?) ;
SVG.tspan ::= tspan::((string() | SVG.tspan | SVG.tref | SVG.altGlyph | SVG.animate | SVG.set | SVG.animateColor | SVG.Description.class | SVG.Hyperlink.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib (x::SVG.Coordinates.datatype)? (y::SVG.Coordinates.datatype)? (dx::SVG.Lengths.datatype)? (dy::SVG.Lengths.datatype)? (rotate::SVG.Numbers.datatype)? (textLength::SVG.Length.datatype)? (lengthAdjust::("spacing" | "spacingAndGlyphs"))?) ;
SVG.XLinkRequired.attrib ::= (xlink:type::"simple")? xlink:href::SVG.URI.datatype (xlink:role::SVG.URI.datatype)? (xlink:arcrole::SVG.URI.datatype)? (xlink:title::string())? (xlink:show::"other")? (xlink:actuate::"onLoad")? SVG.XLinkRequired.extra.attrib ;
SVG.polygon ::= polygon::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Marker.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib points::SVG.Points.datatype (transform::SVG.TransformList.datatype)?) ;
SVG.font-face-uri ::= font-face-uri::(SVG.font-face-format* SVG.Core.attrib SVG.XLinkRequired.attrib) ;
SVG.view ::= view::(SVG.Description.class* SVG.Core.attrib SVG.External.attrib (viewBox::SVG.ViewBoxSpec.datatype)? (preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype)? (zoomAndPan::("disable" | "magnify"))? (viewTarget::string())?) ;
SVG.path ::= path::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Marker.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib d::SVG.PathData.datatype (pathLength::SVG.Number.datatype)? (transform::SVG.TransformList.datatype)?) ;
SVG.feMerge ::= feMerge::(SVG.feMergeNode* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitive.attrib) ;
SVG.feSpotLight ::= feSpotLight::((SVG.animate | SVG.set)* SVG.Core.attrib (x::SVG.Number.datatype)? (y::SVG.Number.datatype)? (z::SVG.Number.datatype)? (pointsAtX::SVG.Number.datatype)? (pointsAtY::SVG.Number.datatype)? (pointsAtZ::SVG.Number.datatype)? (specularExponent::SVG.Number.datatype)? (limitingConeAngle::SVG.Number.datatype)?) ;
SVG.tref ::= tref::((SVG.animate | SVG.set | SVG.animateColor | SVG.Description.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.XLinkRequired.attrib SVG.External.attrib (x::SVG.Coordinates.datatype)? (y::SVG.Coordinates.datatype)? (dx::SVG.Lengths.datatype)? (dy::SVG.Lengths.datatype)? (rotate::SVG.Numbers.datatype)? (textLength::SVG.Length.datatype)? (lengthAdjust::("spacing" | "spacingAndGlyphs"))?) ;
SVG.foreignObject ::= foreignObject::(SVG.foreignObject.content SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? width::SVG.Length.datatype height::SVG.Length.datatype (transform::SVG.TransformList.datatype)?) ;
SVG.font-face-src ::= font-face-src::((SVG.font-face-uri | SVG.font-face-name)+ SVG.Core.attrib) ;
SVG.FilterPrimitiveWithIn.attrib ::= SVG.FilterPrimitive.attrib (in::string())? SVG.FilterPrimitiveWithIn.extra.attrib ;
SVG.style ::= style::(string() SVG.Core.attrib type::SVG.ContentType.datatype (media::SVG.MediaDesc.datatype)? (title::SVG.Text.datatype)?) ;
SVG.External.attrib ::= ε ;
 SVG.External.attrib ::= SVG.externalResourcesRequired.attrib SVG.External.extra.attrib ;
SVG.symbol ::= symbol::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.External.attrib (viewBox::SVG.ViewBoxSpec.datatype)? (preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype)?) ;
SVG.glyph ::= glyph::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Style.attrib SVG.Presentation.attrib (unicode::string())? (glyph-name::string())? (d::SVG.PathData.datatype)? (orientation::string())? (arabic-form::string())? (lang::SVG.LanguageCodes.datatype)? (horiz-adv-x::SVG.Number.datatype)? (vert-origin-x::SVG.Number.datatype)? (vert-origin-y::SVG.Number.datatype)? (vert-adv-y::SVG.Number.datatype)?) ;
--------------------markup::svg-palies.bgf--------------------
AbsoluteCoord ::= x::Double y::Double ;
Translate ::= tx::Double ty::Double ;
Defs ::= (groupContent::Element)+ ;
Text ::= lengthAdjust::String content::String ;
Rotate ::= angle::Double cx::Double cy::Double ;
Scale ::= sx::Double sy::Double ;
Marker ::= markerUnits::String refX::Double refY::Double markerWidth::Double markerHeight::Double orient::String (drawing::Element)+ ;
Polygon ::= (waypoints::Point)+ markerEnd::String markerStart::String ;
RelativeCoord ::= x::Double y::Double ;
Symbol ::= (groupContent::Element)+ ;
Dimension ::= width::Double height::Double ;
Path ::= pathLength::Double d::String markerEnd::String markerStart::String ;
Line ::= between::Point markerEnd::String markerStart::String ;
Rect ::= rx::Double ry::Double ;
Svg ::= (owner_SVG::SvgFile)+ (children::Element)+ namespace::String version::String baseProfile::String ;
SvgFile ::= tag::Svg (elements::Element)+ ;
Polyline ::= (waypoints::Point)+ strokeDashArray::String markerEnd::String markerStart::String ;
--------------------markup::uiml.bgf--------------------
Call ::= name::String (params::Parameter)+ ;
Logic ::= id::String how::HowKind export::ExportKind source::Source (dComponents::DComponent)+ ;
Rule ::= id::String how::HowKind export::ExportKind source::Source condition::Condition action::Action ;
Repeat ::= iterator::Iterator (parts::Part)+ ;
Event ::= class::String (parts::Part)+ ;
Presentation ::= id::String how::HowKind export::ExportKind base::String source::Source (dClasses::DClass)+ ;
Content ::= id::String how::HowKind export::ExportKind source::Source (constants::Constant)+ ;
Interface ::= id::String how::HowKind export::ExportKind source::Source (structure::Structure)+ (style::Style)+ (content::Content)+ (behavior::Behavior)+ ;
DProperty ::= id::String mapsType::MapsTypeKind mapsTo::String returnType::String (dMethods::DMethod)+ (dParams::DParam)+ ;
DComponent ::= id::String how::HowKind export::ExportKind mapsTo::String location::String source::Source (dMethods::DMethod)+ ;
Property ::= name::String how::HowKind export::ExportKind (values::String)+ (parts::Part)+ (events::Event)+ source::Source (constants::Constant)+ (properties::Property)+ (references::Reference)+ (calls::Call)+ (iterators::Iterator)+ ;
Listener ::= class::String attacher::String ;
DClass ::= id::String how::HowKind export::ExportKind mapsTo::String mapsType::String source::Source (dMethods::DMethod)+ (dProperties::DProperty)+ (events::Event)+ (listeners::Listener)+ ;
Part ::= id::String how::HowKind export::ExportKind class::String wherePart::String source::Source style::Style content::Content behavior::Behavior (parts::Part)+ (repeats::Repeat)+ ;
Structure ::= id::String how::HowKind export::ExportKind source::Source (parts::Part)+ ;
UIML ::= head::Header (templates::Template)+ (interfaces::Interface)+ (peers::Peer)+ ;
Behavior ::= id::String how::HowKind export::ExportKind source::Source (rules::Rule)+ ;
Style ::= id::String how::HowKind export::ExportKind source::Source (properties::Property)+ ;
MetaData ::= name::String content::String ;
Script ::= id::String type::String how::HowKind export::ExportKind value::String source::String ;
ByDefault ::= (properties::Property)+ (calls::Call)+ restructure::Restructure op::Operation equal::Equal event::Event ;
WhenFalse ::= (properties::Property)+ (calls::Call)+ restructure::Restructure op::Operation equal::Equal event::Event ;
Action_2 ::= whenTrue::WhenTrue whenFalse::WhenFalse byDefault::ByDefault ;
DParam ::= id::String type::String value::String ;
WhenTrue ::= (properties::Property)+ (calls::Call)+ restructure::Restructure op::Operation equal::Equal event::Event ;
Action_1 ::= event::Event (properties::Property)+ (calls::Call)+ (restructures::Restructure)+ ;
Operation ::= name::String (constants::Constant)+ (properties::Property)+ (references::Reference)+ (calls::Call)+ (ops::Operation)+ (events::Event)+ ;
DMethod ::= id::String how::HowKind export::ExportKind mapsTo::String returnType::String source::Source (dParams::DParam)+ script::Script ;
Constant ::= id::String how::HowKind export::ExportKind model::String value::String source::Source (constants::Constant)+ ;
Branch ::= WhenTrue ;
 Branch ::= WhenFalse ;
 Branch ::= ByDefault ;
 Branch ::= (properties::Property)+ (calls::Call)+ restructure::Restructure op::Operation equal::Equal event::Event ;
Peer ::= id::String how::HowKind export::ExportKind source::Source (presentations::Presentation)+ (logics::Logic)+ ;
Restructure ::= how::HowKind atPart::Part wherePart::Part source::Source template::Template ;
--------------------markup::wiki-mediawiki-bnf.bgf--------------------
table-first-row ::= (table-column-line newline) | table-column-multiline | table-row ;
bullet-item ::= "*" (list-item | item-body)? ;
whitespace ::= (whitespace-char whitespace?) | EOF ;
sub-page ::= sub-page-separator page-char+ ;
pre-opening-tag ::= "<pre" (whitespace characters?)? ">" ;
isbn ::= "ISBN" spaces isbn-number ;
line ::= plain-text+ (spaces plain-text+)* ;
title-character ::= <unicode-character bad-title-characters> ;
interwiki-prefix ::= interwiki ":" ;
article-link ::= (interwiki-prefix | ":")? namespace-prefix? article-title ;
 article-link ::= ((interwiki-prefix | ":")? namespace-prefix? article-title) | ("/" article-title) | ("../"* article-title?) ;
url ::= protocol url-path ;
paragraph ::= (newline lines-of-text?) | lines-of-text ;
html-block ::= html-opening-tag whitespace? html-body whitespace? html-closing-tag? ;
category-link ::= internal-link-start category-namespace ":" article-title (pipe sort-key)? internal-link-end ;
pre-block ::= pre-opening-tag whitespace? pre-body whitespace? pre-closing-tag? ;
level-6-heading ::= "======" inline-text "======" space-tabs newline ;
level-5-heading ::= "=====" inline-text "=====" space-tabs newline ;
inline-text ::= inline-element inline-text? ;
html-closing-tag ::= "</html" whitespace? ">" ;
level-4-heading ::= "====" inline-text "====" space-tabs newline ;
level-3-heading ::= "===" inline-text "===" space-tabs newline ;
special-block-and-more ::= special-block EOF | (newline? special-block-and-more) | (newline? paragraph-and-more) ;
level-2-heading ::= "==" inline-text "==" space-tabs newline ;
pmid-number ::= "PMID" spaces digits ;
level-1-heading ::= "=" inline-text "=" space-tabs newline ;
redirect ::= redirect-tag characters internal-link-start article-link internal-link-end | pipe | EOL ;
table-row ::= "|-" CSS? newline table-column table-row? ;
pre-closing-tag ::= "</pre" whitespace? ">" ;
definition ::= ":" inline-text ;
gallery-block ::= "<gallery>" newline? gallery-image (newline? gallery-image)* newline? "</gallery>" ;
plain-text ::= unicode-wiki | ("<nowiki>" ("|" | "[" | "]" | "<" | ">" | "{" | "}")* "</nowiki>") | (unicode-wiki space* "*" | "#" | ":" | ";") | (unicode-wiki space? "=" space? unicode-wiki) | (unicode-wiki "'") | ("'" unicode-wiki) ;
table ::= "{|" (space table-parameters)? newline table-first-row "|}" ;
image-inline ::= "[[" "Image:" page-name "." image-extension (pipe image-option)* "]]" ;
nowiki-opening-tag ::= "<nowiki" (whitespace characters?)? ">" ;
html-entity ::= ("&" html-entity-name ";") | ("&#" decimal-number ";") | ("&#x" hex-number ";") ;
namespace-prefix ::= namespace? ":" ;
url-path ::= url-char url-path? ;
article-title ::= page sub-page* ;
 article-title ::= (title-legal-char | "%")* ;
enumerated-item ::= "#" (list-item | item-body)? ;
image-name ::= page-name "." image-extension ;
html-comment ::= "<!--" characters? "-->" ;
external-link ::= (external-link-start url whitespace? link-description? external-link-end) | url ;
unicode-character ::= <any-supported-unicode-character Whitespaces> ;
nowiki-block ::= nowiki-opening-tag whitespace? nowiki-body whitespace? nowiki-closing-tag? ;
defined-term ::= ";" text definition? ;
image-param-upright ::= "upright" ("="? digits)? ;
text ::= line+ (newline+ line+)* ;
 text ::= harmless-character+ ;
space-block-2 ::= space inline-text? newline ;
rfc-number ::= "RFC" spaces digits ;
nowiki-closing-tag ::= "</nowiki" whitespace? ">" ;
media-inline ::= "[[" "Media:" page-name "." media-extension "]]" ;
unicode-wiki ::= <unicode-character wiki-markup-characters> ;
gallery-image ::= image-name ("|" caption)? ;
item-body ::= defined-term | (whitespace? inline-text) ;
lines-of-text ::= line-of-text lines-of-text? ;
table-column-multiline ::= "|" (table-cell-parameters "|")? any-text newline table-column-multiline? ;
indent-item ::= ":" (list-item | item-body)? ;
newline ::= (CR LF) | (LF CR) | CR | LF ;
image-size-parameter ::= digits "px" ;
page ::= page-first-char page-char* ;
table-column-line ::= "|" inline-text ("|" table-column-line)? ;
wiki-page ::= (redirect article?) | (article?) ;
line-of-text ::= inline-text newline ;
paragraph-and-more ::= paragraph EOF | (newline? special-block-and-more) | (newline paragraph-and-more) ;
internal-link ::= internal-link-start article-link ("#" section-id)? (pipe link-description?)? internal-link-end extra-description? ;
page-name ::= title-character (space? title-character)* ;
image-mode-manual-thumb ::= ("thumbnail=" image-name) | ("thumb=" image-name) ;
space-block ::= space inline-text newline space-block-2* ;
horizontal-rule ::= "----" dashes? inline-text? newline ;
html-opening-tag ::= "<html" (whitespace characters?)? ">" ;
isbn-number ::= "97" "8" | "9" (space | "-")? decimal-digit (space | "-")? "9"* decimal-digit | "X" | "x" ;
--------------------markup::wiki-mediawiki-ebnf.bgf--------------------
internal_link ::= start_link full_pagename ("|" label)? end_link label_extension ;
template ::= "{{" title ("|" part)* "}}" ;
horizontal_rule ::= "----" "-"* ;
table_body ::= table_header_cell | table_cell (table_row table_header_cell | table_cell)* ;
table_cell ::= (line_break "|" (style | whitespace)* text) | (table_cell "||" (style | whitespace)* text) ;
part ::= (name "=")? value ;
continue_definition_list ::= definition_list | continue_definition_list | ":" | "*" | "#" line_break definition_list ;
table_start ::= "{|" (style | whitespace)* line_break ;
nowiki ::= "<nowiki>" text "</nowiki>" ;
place_TOC ::= (whitespace | line_break)* "__TOC__" (whitespace | line_break)* ;
ordered_list ::= "#" text ;
external_link ::= URL | (start_link URL (whitespace label)? end_link label_extension) ;
header_link ::= "/*" text "*/" ;
table_row ::= line_break "|-" "-"* (style | whitespace)* line_break ;
header_end ::= whitespace? line_break ;
bold_text ::= "'''" text "'''" ;
tplarg ::= "{{{" title ("|" part)* "}}}" ;
table_header_cell ::= (line_break "!" (style | whitespace)* text) | (table_cell "!!" | "||" (style | whitespace)* text) ;
ISBN_link ::= digit ("-" | " ")? digit digit digit ("-" | " ")? digit digit digit digit digit ("-" | " " digit | "X" | "x")? ;
bold_italic_text ::= "'''''" text "'''''" ;
continue_unordered_list ::= unordered_list | continue_unordered_list | ":" | "*" | "#" line_break unordered_list ;
comment ::= "<!--" Text? "-->" ;
table_header ::= "|+" text line_break ;
redirect ::= "#REDIRECT" internal_link ;
italic_text ::= "''" text "''" ;
disable_section_edit ::= (whitespace | line_break)* "__NOEDITSECTION__" (whitespace | line_break)* ;
namespace ::= Unicode_char Unicode_char* ;
pagename ::= Unicode_char Unicode_char* ;
force_TOC ::= (whitespace | line_break)* "__FORCETOC__" (whitespace | line_break)* ;
disable_TOC ::= (whitespace | line_break)* "__NOTOC__" (whitespace | line_break)* ;
URL ::= ASCII_letter* "://" URL_char* ;
table ::= table_start table_header? table_row? table_body table_end ;
definition_list ::= text? ":" text ;
full_pagename ::= ((namespace ":") | ":")? pagename ;
header6 ::= line_break "======" whitespace? text whitespace? "======" header_end ;
Commentary ::= "<comment" Text? ">" Text? "</comment>" ;
unordered_list ::= "*" text ;
continue_ordered_list ::= ordered_list | continue_ordered_list | ":" | "*" | "#" line_break ordered_list ;
header5 ::= line_break "=====" whitespace? text whitespace? "=====" header_end ;
header4 ::= line_break "====" whitespace? text whitespace? "====" header_end ;
code_line ::= line_break " " text ;
header3 ::= line_break "===" whitespace? text whitespace? "===" header_end ;
header2 ::= line_break "==" whitespace? text whitespace? "==" header_end ;
balanced_text ::= text_without_consecutive_equal_braces (include text_without_consecutive_equal_braces)* ;
header1 ::= line_break "=" whitespace? text whitespace? "=" header_end ;
--------------------markup::wiki-simple.bgf--------------------
WikiLink ::= [barred] "[[" destination::PageName "|" description::(MWWord+) "]]" ;
 WikiLink ::= [simple] "[[" destination::PageName "]]" ;
--------------------markup::wiki-table.bgf--------------------
Table ::= border::Integer style::String class::String caption::Caption (rows::Row)+ ;
Cell ::= isHeading::Boolean align::String style::String content::String ;
--------------------fl::antlr.bgf--------------------
apply ::= i::ID (a::atom)+ ;
function ::= n::ID (a::ID)+ "=" e::expr NEWLINE+ ;
ifThenElse ::= "if" c::expr "then" e1::expr "else" e2::expr ;
atom ::= ID | INT | ("(" e::expr ")") ;
binary ::= l::atom (o::ops r::atom)* ;
--------------------fl::dcg.bgf--------------------
function ::= name name+ "=" expr newline+ ;
expr ::= [binary] atom (ops atom)* ;
 expr ::= [apply] name atom+ ;
 expr ::= [ifThenElse] "if" expr "then" expr "else" expr ;
atom ::= [literal] int ;
 atom ::= [argument] name ;
 atom ::= "(" expr ")" ;
--------------------fl::ecore.bgf--------------------
ApplyExp ::= function::Function (argument::Exp)+ ;
MinusExp ::= left::Exp right::Exp ;
IfThenElseExp ::= if::Exp then::Exp else::Exp ;
EqualExp ::= left::Exp right::Exp ;
Function ::= name::string() (argument::Argument)+ definition::Exp ;
PlusExp ::= left::Exp right::Exp ;
--------------------fl::emf.bgf--------------------
Apply ::= name::string() (arg::Expr)+ ;
Function ::= name::string() (arg::string())+ rhs::Expr ;
IfThenElse ::= ifExpr::Expr thenExpr::Expr elseExpr::Expr ;
Binary ::= ops::Ops left::Expr right::Expr ;
--------------------fl::jaxb.bgf--------------------
Apply ::= Name::string() Arg::(Expr*) ;
Function ::= Name::string() Arg::(string()*) Rhs::Expr ;
IfThenElse ::= IfExpr::Expr ThenExpr::Expr ElseExpr::Expr ;
Binary ::= Ops::Ops Left::Expr Right::Expr ;
--------------------fl::om.bgf--------------------
Apply ::= name::string() args::(Expr*) ;
Function ::= name::string() args::(string()*) rhs::Expr ;
IfThenElse ::= ifExpr::Expr thenExpr::Expr elseExpr::Expr ;
Binary ::= ops::Ops left::Expr right::Expr ;
--------------------fl::python.bgf--------------------
literal ::= "-"? integer() ;
apply ::= name atom+ ;
function ::= name name+ "=" expr ;
program ::= function+ StringEnd ;
ifThenElse ::= _IF expr _THEN expr _ELSE expr ;
binary ::= atom (operators atom)* ;
atom ::= name | literal | ("(" expr ")") ;
--------------------fl::rascal-a.bgf--------------------
FLExpr ::= (binary::(e1::FLExpr op::FLOp e2::FLExpr)) | (apply::(f::string() vargs::(FLExpr*))) | (ifThenElse::(c::FLExpr t::FLExpr e::FLExpr)) | (argument::(a::string())) | (literal::(i::integer())) ;
FLFun ::= [fun] f::string() args::(str*) body::FLExpr ;
--------------------fl::rascal-c.bgf--------------------
Function ::= [fun] f::Name args::(Name+) "=" body::Expr ;
Expr ::= [ifThenElse] "if" cond::Expr "then" thenbranch::Expr "else" elsebranch::Expr ;
 Expr ::= "(" e::Expr ")" ;
 Expr ::= [literal] i::Int ;
 Expr ::= [argument] a::Name ;
 Expr ::= [binary] lexpr::Expr op::Ops rexpr::Expr ;
 Expr ::= [apply] f::Name vargs::(Expr+) ;
--------------------fl::rascal.bgf--------------------
Function ::= Name Name+ "=" Expr Newline ;
Expr ::= [binary] Expr Ops Expr ;
 Expr ::= [apply] Name Expr+ ;
 Expr ::= [ifThenElse] "if" Expr "then" Expr "else" Expr ;
 Expr ::= "(" Expr ")" ;
 Expr ::= [argument] Name ;
 Expr ::= [literal] Int ;
Program ::= Function+ ε ;
--------------------fl::sdf.bgf--------------------
Function ::= Name Name+ "=" Expr Newline+ ;
Expr ::= [binary] Expr Ops Expr ;
 Expr ::= [apply] Name Expr+ ;
 Expr ::= [ifThenElse] "if" Expr "then" Expr "else" Expr ;
 Expr ::= "(" Expr ")" ;
 Expr ::= [argument] Name ;
 Expr ::= [literal] Int ;
--------------------fl::txl.bgf--------------------
fun ::= id id+ "=" expression newline ;
expression ::= (expression op expression) | (id expression+) | ("if" expression "then" expression "else" expression) | ("(" expression ")") | id | number ;
--------------------fl::xsd.bgf--------------------
Apply ::= name::string() (arg::Expr)+ ;
Function ::= name::string() (arg::string())+ rhs::Expr ;
IfThenElse ::= ifExpr::Expr thenExpr::Expr elseExpr::Expr ;
Binary ::= ops::Ops left::Expr right::Expr ;
--------------------metasyntax::bnf-sdf.bgf--------------------
Element ::= NonTerminal | Terminal | ("[" Element ("|" Element)* "]") | ("{" Element ("|" Element)* "}") | "|" | "[" | "]" | "{" | "}" | "<" | ">" | "..." | "::=" | (Element Element) ;
Rule ::= NonTerminal "::=" Elements ;
NonTerminal ::= "<" string() ">" ;
Elements ::= Element ("|" Element)* ;
--------------------metasyntax::txl.bgf--------------------
ruleApplications ::= IN IN commentNL* ruleApplication+ EX EX ruleoptNL? ;
eachArgs ::= SP "each" varidOrLiteral* ;
formatCue ::= "[" formatId "]" ;
constructor ::= EX "construct" varid SP type NL IN replacement ;
type ::= formatCues | ("[" typeSpec "]") ;
formatCues ::= IN IN formatCue+ EX EX optNL? ;
functionStatement ::= ("function" ruleid formalArgument* NL IN IN constructDeconstructImportExportOrCondition* EX skippingType? "replace" dollarStar? SP type NL IN pattern constructDeconstructImportExportOrCondition* EX "by" NL IN replacement EX EX "end" "function" NL NL) | ("function" ruleid formalArgument* NL IN IN constructDeconstructImportExportOrCondition* EX skippingType? "match" dollarStar? SP type NL IN pattern constructDeconstructImportExportOrCondition* EX EX "end" "function" NL NL) ;
tokensStatement ::= "tokens" NL IN tokenPattern* EX "end" "tokens" NL NL ;
ruleApplication ::= (SP "[" ruleid varidOrLiteral* eachArgs? "]" commentNL*) | (SP lengthrule varidOrLiteral* eachArgs? "]" commentNL*) ;
defineStatement ::= "define" typeid NL IN IN literalOrType* NL barLiteralsAndTypes* EX EX "end" "define" NL NL RESET ;
formatId ::= "NL" | ("IN" IN) | ("EX" EX) ;
commentConvention ::= (literal SP literal NL) | (literal NL) ;
literal ::= quotedLiteral | unquotedLiteral | (SP comment NEWoptNL?) ;
RESET ::= EX EX EX EX EX EX EX EX EX ;
statement ::= includeStatement | keysStatement | compoundsStatement | commentsStatement | tokensStatement | defineStatement | redefineStatement | ruleStatement | functionStatement | externalStatement | (comment NL) ;
unquotedLiteral ::= (SP "'") | token ;
dollarStar ::= (SP "$") | (SP "*") ;
compound ::= literal SP ;
varidOrLiteral ::= (SP varid) | (SP literal) ;
literalOrExpression ::= (literal SP) | (expression SP) ;
dotDotDotBar ::= "..." EX NL "|" TAB IN ;
keyword ::= (literal SP) | (key SP) ;
quotedLiteral ::= ("'" unquotedLiteral) | ("'" key) ;
compoundsStatement ::= "compounds" NL IN compound* EX NL "end" "compounds" NL NL ;
includeStatement ::= "include" stringlit NL ;
externalStatement ::= ("external" "rule" ruleid formalArgument* NL NL) | ("external" "function" ruleid formalArgument* NL NL) ;
exporter ::= EX "export" varid type? NL IN replacement? ;
redefineStatement ::= "redefine" typeid NL IN IN dotDotDotBar? literalOrType* NL barLiteralsAndTypes* barDotDotDot? EX EX "end" redefineOrDefine NL NL RESET ;
constructDeconstructImportExportOrCondition ::= constructor | deconstructor | condition | importer | exporter | (EX comment NL IN) ;
commentNL ::= SP SP comment NEWoptNL? ;
condition ::= (EX "where" "not"? "all"? NL IN commentNL* expression NL) | (EX "assert" "not"? "all"? NL IN commentNL* expression NL) ;
commentsStatement ::= "comments" NL IN commentConvention* EX "end" "comments" NL NL ;
keysStatement ::= "keys" NL IN keyword* EX NL "end" "keys" NL NL ;
deconstructor ::= EX skippingType? "deconstruct" "not"? "*"? type? varid NL IN pattern ;
barLiteralsAndTypes ::= EX "|" TAB IN literalOrType* NL ;
expression ::= varid ruleApplications? ;
tokenPattern ::= (typeid TAB_24 stringlit NL) | (TAB_16 "|" TAB_24 stringlit NL) | (typeid TAB_16 "..."? "|" TAB_24 stringlit NL) | (typeid TAB_16 "+" TAB_24 stringlit NL) | (comment NL) ;
barDotDotDot ::= EX "|" TAB IN "..." NL ;
typeid ::= id | (SP literal) ;
typeSpec ::= (typeModifier? typeid typeRepeater?) | "!" ;
ruleStatement ::= ("rule" ruleid formalArgument* NL IN IN constructDeconstructImportExportOrCondition* EX skippingType? "replace" dollarStar? SP type NL IN pattern constructDeconstructImportExportOrCondition* EX "by" NL IN replacement EX EX "end" "rule" NL NL) | ("rule" ruleid formalArgument* NL IN IN constructDeconstructImportExportOrCondition* EX skippingType? "match" dollarStar? SP type NL IN pattern EX EX constructDeconstructImportExportOrCondition* "end" "rule" NL NL) ;
replacement ::= literalOrExpression* NL ;
importer ::= EX "import" varid type? NL IN pattern? ;
pattern ::= literalOrVariable* NL ;
literalOrVariable ::= (literal SP) | (varid SP type SP) | (varid SP) ;
formalArgument ::= varid SP type commentNL* ;
literalOrType ::= (type SP) | (literal SP) ;
skippingType ::= "skipping" SP type commentNL* ;
--------------------metasyntax::ebnf-bgf.bgf--------------------
selectable-expression ::= selector::string() "::" expression ;
definition-separator-metasymbol ::= "\n" " " ;
terminal ::= start-terminal-metasymbol string() end-terminal-metasymbol ;
nonterminal ::= start-nonterminal-metasymbol string() end-nonterminal-metasymbol ;
marked-expression ::= "<" expression ">" ;
production ::= label? string() defining-metasymbol right-hand-side terminator-metasymbol ;
group-expression ::= start-group-metasymbol expression end-group-metasymbol ;
optional-expression ::= expression optionality-metasymbol ;
repetition-expression ::= expression repetition-metasymbol ;
right-hand-side ::= (definition-separator-metasymbol definition)+ ;
label ::= "[" string() "]" ;
definition ::= expression (" " expression)* ;
--------------------metasyntax::ebnf-iso-1.bgf--------------------
syntactic_factor ::= (integer repetition_symbol)? syntactic_primary ;
definitions_list ::= single_definition (definition_separator_symbol single_definition)* ;
syntactic_term ::= syntactic_factor (except_symbol syntactic_exception)? ;
bracketed_textual_comment ::= start_comment_symbol comment_symbol* end_comment_symbol ;
single_definition ::= syntactic_term (concatenate_symbol syntactic_term)* ;
syntax_rule ::= meta_identifier defining_symbol definitions_list terminator_symbol ;
special_sequence ::= special_sequence_symbol special_sequence_character* special_sequence_symbol ;
repeated_sequence ::= start_repeat_symbol definitions_list end_repeat_symbol ;
terminal_string ::= (first_quote_symbol first_terminal_character+ first_quote_symbol) | (second_quote_symbol second_terminal_character+ second_quote_symbol) ;
meta_identifier ::= letter meta_identifier_character* ;
syntax ::= gap_separator* (gap_free_symbol gap_separator*)+ ;
 syntax ::= bracketed_textual_comment* commentless_symbol bracketed_textual_comment* (commentless_symbol bracketed_textual_comment*)* ;
 syntax ::= syntax_rule+ ;
new_line ::= "\r"* "\n" "\r"* ;
grouped_sequence ::= start_group_symbol definitions_list end_group_symbol ;
optional_sequence ::= start_option_symbol definitions_list end_option_symbol ;
--------------------metasyntax::ebnf-iso-2.bgf--------------------
comment ::= "(*" comment_symbol* "*)" ;
factor ::= (integer "*")? primary ;
definitions_list ::= single_definition ("|" single_definition)* ;
term ::= factor ("-" exception)? ;
single_definition ::= term ("," term)* ;
syntax_rule ::= meta_identifier "=" definitions_list ";" ;
special_sequence ::= "?" character* "?" ;
repeated_sequence ::= "{" definitions_list "}" ;
terminal_string ::= ("’" character+ "’") | (""" character+ """) ;
meta_identifier ::= letter (letter | decimal_digit)* ;
grouped_sequence ::= "(" definitions_list ")" ;
optional_sequence ::= "[" definitions_list "]" ;
--------------------metasyntax::ebnf-iso-3.bgf--------------------
COMMENT ::= "(*" COMMENT_SYMBOL* "*)" ;
FACTOR ::= (INTEGER "*")? PRIMARY ;
DEFINITIONS_LIST ::= SINGLE_DEFINITION ("/" SINGLE_DEFINITION)* ;
TERMINAL ::= ("’" CHARACTER+ "’") | (""" CHARACTER+ """) ;
TERM ::= FACTOR ("-" EXCEPTION)? ;
SINGLE_DEFINITION ::= TERM ("," TERM)* ;
SYNTAX_RULE ::= META_IDENTIFIER "=" DEFINITIONS_LIST "." ;
SPECIAL_SEQUENCE ::= "?" CHARACTER* "?" ;
REPEATED_SEQUENCE ::= "(:" DEFINITIONS_LIST ":)" ;
META_IDENTIFIER ::= LETTER (LETTER | DIGIT)* ;
GROUPED_SEQUENCE ::= "(" DEFINITIONS_LIST ")" ;
OPTIONAL_SEQUENCE ::= "(/" DEFINITIONS_LIST "/)" ;
--------------------metasyntax::relaxng.bgf--------------------
open-pattern ::= other pattern ;
except-name-class ::= other (except::open-name-classes)? ;
define-element ::= define::(name::string() combine-att common-atts open-patterns) ;
open-name-class ::= other name-class ;
open-name-classes ::= other name-class+ ;
name-class ::= (name::(common-atts string())) | (anyName::(common-atts except-name-class)) | (nsName::(common-atts except-name-class)) | (choice::(common-atts open-name-classes)) ;
open-patterns ::= other pattern+ ;
common-atts ::= (ns::string())? (datatypeLibrary::string())? α* ;
include-content ::= other (start-element | define-element | (div::(common-atts include-content)))* ;
grammar-content ::= other (start-element | define-element | (div::(common-atts grammar-content)) | (include::(href::string() common-atts include-content)))* ;
start-element ::= start::(combine-att common-atts open-pattern) ;
pattern ::= (element::((name::string()) | open-name-class common-atts open-patterns)) | (attribute::(common-atts (name::string()) | open-name-class other pattern?)) | (group::(common-atts open-patterns)) | (interleave::(common-atts open-patterns)) | (choice::(common-atts open-patterns)) | (optional::(common-atts open-patterns)) | (zeroOrMore::(common-atts open-patterns)) | (oneOrMore::(common-atts open-patterns)) | (list::(common-atts open-patterns)) | (mixed::(common-atts open-patterns)) | (ref::(name::string() common-atts other)) | (parentRef::(name::string() common-atts other)) | (empty::(common-atts other)) | (text::(common-atts other)) | (value::((type::string())? common-atts string())) | (data::(type::string() common-atts other (param::(name::string() common-atts string()))* (except::(common-atts open-patterns))?)) | (notAllowed::(common-atts other)) | (externalRef::(href::string() common-atts other)) | (grammar::(common-atts grammar-content)) ;
--------------------metasyntax::ebnf-sdf.bgf--------------------
Rule ::= IdCon "::=" Expression ;
Expression ::= IdCon | String | ("(" Expression ")") | (Expression "?") | (Expression "*") | (Expression "+") | (Expression "|" Expression) | (Expression Expression) ;
String ::= """ string() """ ;
--------------------metasyntax::lll-kort.bgf--------------------
group ::= "(" disjunction ")" ;
alternation ::= "{" basis basis "}" repetition ;
term ::= basis repetition? ;
rule ::= ident ":" disjunction ";" ;
--------------------metasyntax::lll-ldta.bgf--------------------
term ::= basis repetition? ;
rule ::= sort ":" alts ";" ;
alts ::= alt alts-tail* ;
alts-tail ::= "|" alt ;
--------------------metasyntax::xsd-guyard.bgf--------------------
Annotation ::= (documentations::Documentation)+ (applicationInfos::ApplicationInfo)+ annotedElement::AnnotedElement ;
Attribute ::= use::AttributeUseType (references::AttributeRef)+ ;
ComplexType ::= ComplexTypeSimpleContent ;
 ComplexType ::= ComplexTypeComplexContent ;
 ComplexType ::= (extensions::ComplexTypeComplexContent)+ content::AbstractContent (attributes::AbstractAttributeGroupContent)+ ;
XSchema ::= namespace::String (contents::XSchemaContentElement)+ ;
AttributeGroup ::= (contents::AbstractAttributeGroupContent)+ (references::AttributeGroupRef)+ ;
Sequence ::= (contents::AbstractContent)+ ;
Choice ::= (contents::AbstractContent)+ ;
All ::= (contents::AbstractContent)+ ;
--------------------metasyntax::yacc-sdf.bgf--------------------
Rule ::= NonTerminal ":" (Expression? ("|" Expression?)*)? ";" ;
Expression ::= Terminal | NonTerminal | Literal | ("%prec" Terminal) | C-code | (Expression Expression) ;
Grammar ::= C-declarations Yacc-declarations "%%" Grammar-rules "%%" Extra-C-code ;
Yacc-declaration ::= ("%token" | "%left" | "%right" | "%nonassoc" (Terminal | Literal)+ String?) | ("%start" Terminal) ;
--------------------metasyntax::s-expressions.bgf--------------------
Base64 ::= "|" Base64Char* "|" ;
List ::= "(" SExp* ")" ;
HexaDecimal ::= "#" HexDigit* "#" ;
Display ::= "[" SimpleString "]" ;
String ::= [display] Display SimpleString ;
 String ::= [simple] SimpleString ;
--------------------metasyntax::yacc-txl.bgf--------------------
yac_id ::= id dot_id* ;
Cdefinitions ::= endSection token* ;
tokenDefinition ::= yac_tokenDefinition | ("define" yac_id NL IN yac_tokenDefinition EX "end" "define" NL NL) ;
productionDefinition ::= (yac_id ":" NL IN SP SP literalsAndTypes barLiteralsAndTypes* ";"? NL EX) | ("define" yac_id NL IN SP SP literalsAndTypes NL barLiteralsAndTypes* EX "end" "define" NL NL) ;
type ::= (SP "[" yac_id "]") | (SP "[" "opt" yac_idOrQuotedLiteral "]") | (SP "[" "repeat" yac_idOrQuotedLiteral plusOrStar? "]") | (SP "[" "list" yac_idOrQuotedLiteral plusOrStar? "]") ;
endSection ::= "%%" NL NL ;
Yacc_Txl_Grammar ::= tokenDefinitions productionDefinitions Cdefinitions ;
barLiteralsAndTypes ::= ("|" SP literalsAndTypes NL) | (SP bar_yac_literals NL) ;
yac_tokenDefinition ::= yac_keyword yac_tokdef+ NL ;
tokenDefinitions ::= tokenDefinition* endSection? ;
quotedLiteral ::= SP "'" unquotedLiteral SP ;
bar_yac_literals ::= "|" SP yac_literal* NL ;
dot_id ::= "." id ;
Ccode ::= "{" Ccode_or_token* "}" ;
prec ::= yac_keyword yac_id ;
--------------------metasyntax::xsd-tennison.bgf--------------------
complexTypeModel ::= simpleContent | ((mixed::("true" | "false"))? complexContent | (typeDefParticle? attrDecls)) ;
element ::= annotated fixedOrDefault ((nillable::("true" | "false")) | (block::blockSet))* ε | (type::string()) | localSimpleType | localComplexType identityConstraint* ;
complexRestriction ::= restriction::(annotated base::string() typeDefParticle? attrDecls) ;
rangeFacet ::= facet value::(integer() | string() | "UNKNOWN data") ;
documentation ::= documentation::(((source::string()) | (xml:lang::string()))* documentationContent) ;
field ::= field::(annotated xpath::string()) ;
simpleRestriction ::= restriction::(annotated simpleRestrictionModel attrDecls) ;
rangeFacets ::= (minExclusive | minInclusive)? (maxExclusive | maxInclusive)? ;
facet ::= annotated (fixed::("true" | "false"))? ;
importOptionalNamespace ::= import::(import (namespace::string())?) ;
localAttribute ::= attribute::(annotated (use::("optional" | "prohibited" | "required"))? fixedOrDefault (ref::string()) | (name::string() (form::formChoice)? attributeType)) ;
keybase ::= annotated name::string() selector field+ ;
annotation ::= annotation::(openAttrs (id::string())? (documentation | appinfo)*) ;
complexExtension ::= extension::(extensionType typeDefParticle? attrDecls) ;
redefine ::= redefine::(openAttrs (id::string())? schemaLocation::string() (annotation | redefinable)*) ;
anyContent ::= (string() | (α* anyContent))* ;
simpleExtension ::= extension::(extensionType attrDecls) ;
topLevelAttribute ::= attribute::(annotated name::string() fixedOrDefault attributeType) ;
any ::= any::(wildcard occurs) ;
explicitGroup ::= annotated occurs nestedParticle* ;
whiteSpaceCollapse ::= whiteSpace::(facet value::"collapse") ;
digitFacets ::= totalDigits? fractionDigits? ;
complexContent ::= complexContent::(annotated (mixed::("true" | "false"))? complexRestriction | complexExtension) ;
include ::= include::(annotated schemaLocation::string()) ;
whiteSpaceReplaceOrCollapse ::= whiteSpace::(facet value::("replace" | "collapse")) ;
commonFacets ::= enumeration* whiteSpaceCollapse? pattern* ;
simpleContent ::= simpleContent::(annotated simpleRestriction | simpleExtension) ;
import ::= annotated (schemaLocation::string())? ;
lengthFacets ::= length | (minLength? maxLength?) ;
all ::= all::(allModel ((minOccurs::("0" | "1")) | (maxOccurs::"1"))*) ;
selector ::= selector::(annotated xpath::string()) ;
list ::= list::(annotated localSimpleType | (itemType::string())) ;
whiteSpace ::= whiteSpace::(facet value::("preserve" | "replace" | "collapse")) ;
namedAttributeGroup ::= attributeGroup::(annotated name::string() attrDecls) ;
topLevelSimpleType ::= simpleType::(simpleType name::string() (final::simpleDerivationSet)?) ;
topLevelComplexType ::= complexType::(complexType name::string() ((abstract::("true" | "false")) | (block::derivationSet) | (final::derivationSet))*) ;
wildcard ::= annotated ((namespace::("##any" | "##other" | ((string() | "##targetNamespace" | "##local")*))) | (processContents::("lax" | "skip" | "strict")))* ;
simpleExplicitGroup ::= annotated nestedParticle* ;
extensionType ::= annotated base::string() ;
attrDecls ::= (localAttribute | attributeGroupRef)* anyAttribute? ;
annotated ::= openAttrs (id::string())? annotation? ;
importRequiredNamespace ::= import::(import namespace::string()) ;
keyref ::= keyref::(keybase refer::string()) ;
groupRef ::= group::(annotated occurs ref::string()) ;
numFacet ::= facet value::integer() ;
localElement ::= element::(occurs (ref::string()) | (element name::string() (form::formChoice)?)) ;
attributeGroupRef ::= attributeGroup::(annotated ref::string()) ;
union ::= union::(annotated (memberTypes::(string()+) localSimpleType*) | ((memberTypes::ε)? localSimpleType+)) ;
simpleRestrictionModel ::= (base::"xs:anySimpleType" rangeFacets digitFacets lengthFacets whiteSpace? enumeration* pattern*) | (base::"xs:string" lengthFacets whiteSpace? enumeration* pattern*) | (base::"xs:normalizedString" lengthFacets whiteSpaceReplaceOrCollapse? enumeration* pattern*) | (base::("xs:token" | "xs:language" | "xs:Name" | "xs:NCName" | "xs:ID" | "xs:IDREF" | "xs:IDREFS" | "xs:NMTOKEN" | "xs:NMTOKENS" | "xs:ENTITY" | "xs:ENTITIES" | "xs:hexBinary" | "xs:base64Binary" | "xs:anyURI" | "xs:QName" | "xs:NOTATION") lengthFacets commonFacets) | (base::"xs:boolean" whiteSpaceCollapse? pattern*) | (base::("xs:decimal" | "xs:integer" | "xs:nonPositiveInteger" | "xs:nonNegativeInteger" | "xs:positiveInteger" | "xs:negativeInteger" | "xs:unsignedLong" | "xs:unsignedInt" | "xs:unsignedShort" | "xs:unsignedByte" | "xs:long" | "xs:int" | "xs:short" | "xs:byte") digitFacets rangeFacets commonFacets) | (base::("xs:float" | "xs:double" | "xs:duration" | "xs:dateTime" | "xs:time" | "xs:date" | "xs:gYearMonth" | "xs:gYear" | "xs:gMonthDay" | "xs:gMonth" | "xs:gDay") rangeFacets commonFacets) | ((base::string()) | localSimpleType rangeFacets digitFacets lengthFacets whiteSpace? enumeration* pattern*) ;
appinfo ::= appinfo::((source::string())? appinfoContent) ;
topLevelElement ::= element::(element name::string() ((substitutionGroup::string()) | (abstract::("true" | "false")) | (final::derivationSet))*) ;
simpleType ::= annotated simpleDerivation ;
totalDigits ::= totalDigits::(facet value::integer()) ;
complexType ::= annotated complexTypeModel ;
allModel ::= annotated (element::(((minOccurs::("0" | "1")) | (maxOccurs::("0" | "1")))* (ref::string()) | (element name::string() (form::formChoice)?)))* ;
namedGroup ::= group::(annotated name::string() (all::allModel) | (choice::simpleExplicitGroup) | (sequence::simpleExplicitGroup)) ;
noFixedFacet ::= annotated value::string() ;
notation ::= notation::(annotated name::string() public::string() (system::string())?) ;
--------------------metasyntax::aterms-rascal.bgf--------------------
Annotation ::= [Default] "{" {ATerm ","}+ "}" ;
ATerm ::= [Appl] AFun "(" {ATerm ","}+ ")" ;
 ATerm ::= [Real] RealCon ;
 ATerm ::= [List] "[" {ATerm ","}* "]" ;
 ATerm ::= [Annotated] ATerm Annotation ;
 ATerm ::= [Placeholder] "<" ATerm ">" ;
 ATerm ::= [Int] IntCon ;
 ATerm ::= [Fun] AFun ;
OptExp ::= [Present] "e" IntCon ;
 OptExp ::= [Absent] ε ;
RealCon ::= [RealCon] IntCon "." NatCon OptExp ;
IntCon ::= [Positive] "+" NatCon ;
 IntCon ::= [Natural] NatCon ;
 IntCon ::= [Negative] "-" NatCon ;
--------------------metasyntax::box-rascal.bgf--------------------
BoxOperator ::= "HOV" options::(SpaceOption*) ;
 BoxOperator ::= "WD" ;
 BoxOperator ::= "A" alignments::AlignmentOptions options::(SpaceOption*) ;
 BoxOperator ::= "HV" options::(SpaceOption*) ;
 BoxOperator ::= "R" ;
 BoxOperator ::= "H" options::(SpaceOption*) ;
 BoxOperator ::= "I" options::(SpaceOption*) ;
 BoxOperator ::= "V" options::(SpaceOption*) ;
Boxx ::= "REF" "[" StrCon "," Boxx "]" ;
 Boxx ::= "LBL" "[" StrCon "," Boxx "]" ;
 Boxx ::= operator::BoxOperator "[" list::(Boxx*) "]" ;
 Boxx ::= StrCon ;
 Boxx ::= "CNT" "[" StrCon "," StrCon "]" ;
 Boxx ::= operator::FontOperator "[" list::(Boxx*) "]" ;
AlignmentOptions ::= "(" {AlignmentOption ","}* ")" ;
SpaceOption ::= SpaceSymbol "=" NatCon ;
Main ::= Boxx WhitespaceAndComment* ;
AlignmentOption ::= "r" options::(SpaceOption*) ;
 AlignmentOption ::= "l" options::(SpaceOption*) ;
 AlignmentOption ::= "c" options::(SpaceOption*) ;
GroupOption ::= "gs" "=" NatCon ;
 GroupOption ::= "op" "=" BoxOperator ;
--------------------metasyntax::sdf-rascal.bgf--------------------
Group ::= [NonTransitive] Group "." ;
 Group ::= [AssocGroup] "{" Assoc ":" Prods "}" ;
 Group ::= [WithArguments] Group ArgumentIndicator ;
 Group ::= [SimpleGroup] Prod ;
 Group ::= [ProdsGroup] "{" Prods "}" ;
Range ::= [Range] Character "-" Character ;
 Range ::= Character ;
Attribute ::= [Term] ATermAttribute ;
 Attribute ::= [Assoc] Assoc ;
 Attribute ::= [Bracket] "bracket" ;
 Attribute ::= [Id] "id" "(" ModuleName ")" ;
 Attribute ::= [Avoid] "avoid" ;
 Attribute ::= [Prefer] "prefer" ;
 Attribute ::= [Reject] "reject" ;
Renaming ::= [production] Prod "=>" Prod ;
 Renaming ::= [Sym] Sym "=>" Sym ;
ImpSection ::= [Imports] "imports" Imports ;
Renamings ::= [Renamings] "[" Renaming* "]" ;
Class ::= [SimpleCharClass] "[" Range* "]" ;
 Class ::= [Bracket] "(" Class ")" ;
 Class ::= [Comp] "~" Class ;
 Class ::= [Diff] Class "/" Class ;
 Class ::= [ISect] Class "/\" Class ;
 Class ::= [Union] Class "\/" Class ;
ModuleName ::= [Parameterized] id::ModuleId "[" actuals::Syms "]" ;
 ModuleName ::= [Unparameterized] ε ;
Prod ::= [Prod] Syms "->" Sym Attrs ;
SDF ::= [Definition] "definition" def::Definition ;
IntCon ::= [Negative] "-" NatCon ;
 IntCon ::= [Natural] NatCon ;
 IntCon ::= [Positive] "+" NatCon ;
ArgumentIndicator ::= [Default] "<" {NatCon ","}+ ">" ;
Lookaheads ::= [Single] Lookahead ;
 Lookaheads ::= [Alt] Lookaheads "|" Lookaheads ;
 Lookaheads ::= [List] "[[" {Lookahead ","}* "]]" ;
 Lookaheads ::= [Bracket] "(" Lookaheads ")" ;
Alias ::= [Alias] Sym "->" Sym ;
Annotation ::= [Default] "{" {ATerm ","}+ "}" ;
ATerm ::= [Real] RealCon ;
 ATerm ::= [Appl] AFun "(" {ATerm ","}+ ")" ;
 ATerm ::= [Annotated] ATerm Annotation ;
 ATerm ::= [Placeholder] "<" ATerm ">" ;
 ATerm ::= [Int] IntCon ;
 ATerm ::= [Fun] AFun ;
 ATerm ::= [List] "[" {ATerm ","}* "]" ;
Restriction ::= [Follow] Syms "-/-" Lookaheads ;
Module ::= [Module] "module" ModuleName ImpSection* Sections ;
OptExp ::= [Present] "e" IntCon ;
 OptExp ::= [Absent] ε ;
Sym ::= [Empty] "(" ")" ;
 Sym ::= [Lit] StrCon ;
 Sym ::= [Opt] Sym "?" ;
 Sym ::= [Seq] "(" Sym Sym+ ")" ;
 Sym ::= [Bracket] "(" Sym ")" ;
 Sym ::= [CILit] SingleQuotedStrCon ;
 Sym ::= [Varsym] "<" Sym "-VAR" ">" ;
 Sym ::= [Sort] Sort ;
 Sym ::= [Lex] "<" Sym "-LEX" ">" ;
 Sym ::= [Layout] "LAYOUT" ;
 Sym ::= [CF] "<" Sym "-CF" ">" ;
 Sym ::= [ParameterizedSort] Sort "[[" {Sym ","}+ "]]" ;
 Sym ::= [IterStar] Sym "*" ;
 Sym ::= [IterStarSep] "{" Sym Sym "}" "*" ;
 Sym ::= [Iter] Sym "+" ;
 Sym ::= [Class] Class ;
 Sym ::= [IterSep] "{" Sym Sym "}" "+" ;
 Sym ::= [Alt] Sym "|" Sym ;
 Sym ::= [Label] Label ":" Sym ;
Grammar ::= [ContextFreePriorities] "context-free" "priorities" Priorities ;
 Grammar ::= [ImpSection] ImpSection ;
 Grammar ::= [KernalStartSyms] "start-symbols" Syms ;
 Grammar ::= [Aliases] "aliases" Aliases ;
 Grammar ::= [Variables] "variables" Prods ;
 Grammar ::= [ContextFreeSyntax] "context-free" "syntax" Prods ;
 Grammar ::= [LexicalRestrictions] "lexical" "restrictions" Restrictions ;
 Grammar ::= [Sorts] "sorts" Syms ;
 Grammar ::= [ContextFreeStartSyms] "context-free" "start-symbols" Syms ;
 Grammar ::= [Syntax] "syntax" Prods ;
 Grammar ::= [Restrictions] "restrictions" Restrictions ;
 Grammar ::= [Priorities] "priorities" Priorities ;
 Grammar ::= [LexicalStartSyms] "lexical" "start-symbols" Syms ;
 Grammar ::= [LexicalVariables] "lexical" "variables" Prods ;
 Grammar ::= [ContextFreeRestrictions] "context-free" "restrictions" Restrictions ;
 Grammar ::= [LexicalPriorities] "lexical" "priorities" Priorities ;
 Grammar ::= [LexicalSyntax] "lexical" "syntax" Prods ;
Import ::= [Bracket] "(" Import ")" ;
 Import ::= [Module] ModuleName ;
 Import ::= [RenamedModule] ModuleName Renamings ;
Section ::= [Exports] "exports" Grammar* ;
 Section ::= [Hiddens] "hiddens" Grammar* ;
RealCon ::= [RealCon] IntCon "." NatCon OptExp ;
Priority ::= [Chain] {Group ">"}+ ;
 Priority ::= [Assoc] Group Assoc Group ;
Lookahead ::= [Class] class::Class ;
 Lookahead ::= [Seq] class::Class "." las::Lookaheads ;
Attrs ::= [Attrs] "{" {Attribute ","}* "}" ;
 Attrs ::= [NoAttrs] ε ;
--------------------tescol::00000.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
constdec ::= CONST id1::CONSTID COLON t1::type ASSIGN a1::arithexp SEMI ;
CONSTID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
addsubexp ::= multidivexp (ADD | SUB multidivexp)* ;
paralist ::= (parameter COMMA)* parameter ;
parexp ::= literal | (id2::CONSTID) | (id1::ID) | (LPAR arithexp RPAR) ;
ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
negateexp ::= (SUB negateexp) | parexp ;
vardec ::= VAR id1::ID COLON t1::type SEMI ;
DOUBLE ::= INT? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ("e" | "E" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+)? ;
connexp ::= c1::compexp (co1::compoperator c2::compexp)* ;
arithexp ::= connexp (QMARK connexp COLON connexp)? ;
ASSIGN ::= COLON "=" ;
INT ::= ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
statement ::= (LBRACE substatement* RBRACE SEMI) | substatement ;
substatement ::= (SKIP SEMI) | assignment | cond | loop ;
compexp ::= addsubexp (comparisonsymbol addsubexp)* ;
assignment ::= id1::ID ASSIGN a1::arithexp SEMI ;
procdec ::= PROC id1::ID LPAR p1::paralist RPAR COLON t1::type ASSIGN s1::statement ;
expoexp ::= negateexp (EXPO negateexp)? ;
parameter ::= id1::ID COLON type ;
multidivexp ::= expoexp (MULTI | DIV expoexp)* ;
loop ::= WHILE a1::arithexp DO s1::statement ;
program ::= TROLLEY n1::CONSTID CONTAINS d1::(declaration*) CHECKOUT s1::statement DONE SEMI ;
cond ::= IF a1::arithexp THEN s1::statement ELSE s2::statement ;
--------------------tescol::00001.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
boolExpr ::= andExpr (DISJ andExpr)* ;
constDec ::= CONST CID COLON types ASSI expr ;
CID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
varDec ::= VAR id COLON types ;
INTG ::= ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
expr ::= boolExpr (MIXFIX expr COLON expr)? ;
arglist ::= OPAR (expr (COM expr)*)? CPAR ;
DOUBLE ::= ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" | "E" INTG)? ;
atom ::= INTG | DOUBLE | (ID arglist?) | (CID arglist?) | (OPAR expr CPAR) ;
loops ::= WHILE boolExpr DO statement ;
plusexpr ::= multExpr (PLUS | MINUS multExpr)* ;
assignment ::= id ASSI expr ;
andExpr ::= compExpr (CONJ compExpr)* ;
procDec ::= PROC ID OPAR paramlist CPAR COLON types ASSI statement ;
paramlist ::= (ID COLON types)? (COM ID COLON types)* ;
conditional ::= IF boolExpr THEN statement ELSE statement ;
multExpr ::= expExp (MULTI | DIV expExp)* ;
compExpr ::= plusexpr (GT | LT | GTE | LTE | EQ | NEQ plusexpr)? ;
grstatement ::= OCB statement (SEMI statement)* CCB ;
statements ::= CHECKOUT statement SEMI ;
program ::= TROLLEY CID CONTAINS (declarations SEMI)* statements DONE SEMI ;
expExp ::= atom (EXP atom)* ;
--------------------tescol::00010.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
arithmeticExpr ::= exprLevel1 (PLUS | MINUS exprLevel1)* ;
skip ::= SKIP SEMI ;
booleanExpr ::= conjunctionExpr (OR conjunctionExpr)* ;
args ::= arithmeticExpr (COMMA arithmeticExpr)* ;
prog ::= header decl mainStat ;
booleanAtom ::= (arithmeticExpr booleanOperator arithmeticExpr) | (LPAR booleanExpr RPAR) ;
procApply ::= VAR_ID LPAR args? RPAR ;
CONST_ID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | DIGIT | "_")* ;
condExpr ::= testPart e1::arithmeticExpr COLON e2::arithmeticExpr ;
stat ::= skip | assign | cond | loop | (LCURLYPAR stat* RCURLYPAR SEMI) ;
VAR_ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | DIGIT | "_")* ;
expExpr ::= unaryExpr (EXPONENTIATE unaryExpr)* ;
DOUBLE ::= DIGIT* "." DIGIT* EXPONENT? ;
atom ::= INT | DOUBLE | CONST_ID | VAR_ID | (LPAR bracketedExpr RPAR) | procApply ;
varDecl ::= VAR VAR_ID COLON type SEMI ;
EXPONENT ::= "e" | "E" ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
assign ::= VAR_ID DEFINED_AS arithmeticExpr SEMI ;
mainStat ::= CHECKOUT stat DONE SEMI ;
constDecl ::= CONST CONST_ID COLON type DEFINED_AS arithmeticExpr SEMI ;
header ::= TROLLEY CONST_ID CONTAINS ;
conjunctionExpr ::= booleanAtom (AND booleanAtom)* ;
parameter ::= i::VAR_ID COLON t::type (COMMA parameter)* ;
testPart ::= booleanExpr CONDITION ;
loop ::= WHILE LPAR b::booleanExpr RPAR DO s::stat ;
unaryExpr ::= (MINUS atom) | (PLUS atom) | atom ;
exprLevel1 ::= expExpr (MULTIPLY | DIVIDE expExpr)* ;
cond ::= IF LPAR b::booleanExpr RPAR THEN ts::stat (ELSE es::stat)? ;
procDecl ::= PROC VAR_ID LPAR parameter? RPAR COLON type DEFINED_AS stat ;
--------------------tescol::00011.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
CONSTID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
whilestatement ::= WHILE expression DO statement ;
ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
expression ::= atom (operator expression) | (MIXFIX l::expression COLON r::expression) | (OPARAN functionparamlist CPARAN) | ε ;
constdeclaration ::= CONST CONSTID COLON type ASSIGN expression SEMI ;
functionparamlist ::= expression (COMMA expression)* ;
vardeclaration ::= VAR identifier COLON type SEMI ;
ifstatement ::= IF expression THEN s1::statement (ELSE s2::statement) | ε ;
DOUBLE ::= INT? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" INT)? ;
atom ::= literal | identifier | (OPARAN expression CPARAN) ;
INT ::= ("+" | "-")? "0" | ("1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")*) ;
statement ::= (SKIP SEMI) | (assignmentstatement SEMI) | whilestatement | ifstatement | (OBRACE statement+ CBRACE) ;
param ::= ID COLON type ;
paramlist ::= param (COMMA param)* ;
procdeclaration ::= PROC ID OPARAN paramlist? CPARAN COLON type ASSIGN statement SEMI ;
program ::= TROLLEY CONSTID CONTAINS declarations CHECKOUT statement? SEMI? DONE SEMI ;
assignmentstatement ::= identifier ASSIGN expression ;
--------------------tescol::00100.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
skip ::= SKIP SEMI ;
CID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
sign ::= ("+" | negation)? atom ;
variable ::= VAR ID COLON type SEMI ;
ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
DOUBLE_NUMBER ::= ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" | "E" INT_NUMBER)? ;
condExpr ::= booleanDisj (QUESTION aritExpr COLON aritExpr)? ;
procedure ::= PROC ID LPAREN parameters RPAREN COLON type COLON_EQUALS statements ;
ifStat ::= IF expression THEN statements ELSE statements ;
aritExpr ::= multExpr (addOperand multExpr)* ;
atom ::= INT_NUMBER | DOUBLE_NUMBER | ID | CID | procedureApp | (LPAREN expression RPAREN) ;
groupStatement ::= LBRACE statement+ RBRACE SEMI ;
booleanConj ::= booleanExpression (CONJUNCTION booleanExpression)* ;
procedureApp ::= ID LPAREN realParameters? RPAREN ;
assignment ::= ID COLON_EQUALS expression SEMI ;
parameters ::= parameter (COMMA parameter)* ;
parameter ::= (ID COLON type)* ;
realParameters ::= aritExpr (COMMA aritExpr)* ;
multExpr ::= orderExpr (multOperand orderExpr)* ;
loop ::= WHILE expression DO statements ;
booleanDisj ::= booleanConj (DISJUNCTION booleanConj)* ;
constant ::= CONST CID COLON type COLON_EQUALS expression SEMI ;
program ::= TROLLEY CID CONTAINS declarations CHECKOUT statements DONE SEMI EOF ;
orderExpr ::= sign (expOperand sign)? ;
booleanExpression ::= aritExpr (relational aritExpr)? ;
--------------------tescol::00101.bgf--------------------
CONSTID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
boolean_OR ::= a::boolean_AND (OR b::boolean_AND)* ;
proc_dec ::= PROC id parameter_list COLON types DEFINEDAS statement SEMICOLON ;
expr ::= a::boolean_expr (MIXFIX b::expr COLON c::expr)? ;
parameter_list ::= OPENPAR parameter_list_inside? CLOSEPAR ;
stat ::= header CHECKOUT body done ;
DOUBLE_VAL ::= INT_VAL? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" | "E" ("+" | "-")? INT_VAL)? ;
arith_addsub ::= a::arith_muldiv (ADDITION | SUBTRACTION b::arith_muldiv)* ;
statement ::= statement_main | (OPENCURL statement_main (SEMICOLON statement_main)* CLOSECURL) ;
COMMENT_BLOCK ::= "/*" α* "*/" ;
assignment ::= id DEFINEDAS expr ;
if_statement ::= IF expr THEN a::statement ELSE b::statement ;
header ::= TROLLEY CONSTID CONTAINS header_declaration* ;
var_dec ::= VAR id COLON types SEMICOLON ;
proc_call ::= id OPENPAR (a::expr (COMMA b::expr)*)? CLOSEPAR ;
parameter_list_inside ::= parameter_element (COMMA parameter_element)* ;
parameter_element ::= ID COLON types ;
const_dec ::= CONST CONSTID COLON types DEFINEDAS expr SEMICOLON ;
arith_expo ::= a::arith_atom (EXPONENTIAL b::arith_atom)* ;
arith_atom ::= ((ADDITION | SUBTRACTION)? number) | id | (OPENPAR expr CLOSEPAR) | proc_call ;
done ::= DONE SEMICOLON ;
body ::= statement SEMICOLON ;
while_statement ::= WHILE expr DO statement ;
arith_muldiv ::= a::arith_expo (MULTIPLICATION | DIVISION b::arith_expo)* ;
boolean_predicate ::= a::arith_expr (relationals b::arith_expr)? ;
boolean_AND ::= a::boolean_predicate (AND b::boolean_predicate)* ;
--------------------tescol::00110.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
whileStatement ::= WHILE expression DO statement ;
variableDeclaration ::= VAR VAR_ID COLON TYPE SEMI ;
procedureApplication ::= VAR_ID LEFT_PAREN p::procedureParams RIGHT_PAREN ;
procedureParams ::= expression (COMMA expression)* ;
expression ::= conjunction (DISJUNCT conjunction)* ;
CONST_ID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
condExpr ::= add (Q_MARK add COLON add)? ;
constantDeclaration ::= CONST CONST_ID COLON TYPE DEFINE_AS add SEMI ;
conjunction ::= relational (CONJ relational)* ;
VAR_ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
ifStatement ::= IF expression THEN s1::statement ELSE s2::statement ;
DOUBLE ::= INTEGER? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" | "E" INTEGER)? ;
skipStatement ::= SKIP SEMI ;
mult ::= unary (MULT | DIV | EXPON unary)* ;
statement ::= assignmentStatement | whileStatement | ifStatement | skipStatement | (LEFT_BRACKET (assignmentStatement | whileStatement | ifStatement | skipStatement)+ RIGHT_BRACKET) ;
unary ::= (PLUS | MINUS)* term ;
term ::= (LEFT_PAREN expression RIGHT_PAREN) | procedureApplication | (v2::VAR_ID) | CONST_ID | INTEGER | DOUBLE ;
parameters ::= parameter (COMMA parameter)* ;
parameter ::= VAR_ID COLON TYPE ;
relational ::= condExpr (EQUALITY | NOT_EQUAL | LESS_THAN | LESS_THAN_OR_EQUAL | GREATER_THAN | GREATER_THAN_OR_EQUAL condExpr)* ;
procedureDeclaration ::= PROC VAR_ID LEFT_PAREN parameters RIGHT_PAREN COLON TYPE DEFINE_AS statement ;
program ::= TROLLEY CONST_ID CONTAINS declarations* CHECKOUT statement* SEMI DONE SEMI ;
assignmentStatement ::= VAR_ID DEFINE_AS expression SEMI ;
add ::= mult (PLUS | MINUS mult)* ;
--------------------tescol::00111.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
CID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
booleanExpr ::= arithEx (EQUALITY | NON_EQUALITY | LESS | LESS_EQUAL | GREATER | GREATER_EQUAL arithEx)? ;
procedureApplication ::= identifier LPAREN commaSeparatedArithEx RPAREN ;
ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
conditionalExpr ::= disjBooleanExpr (QUESTION conditionalExpr COLON conditionalExpr)? ;
exponentialExpr ::= unary (EXPONENTIATION unary)? ;
declaration ::= constDeclaration | varDeclaration | procDeclaration SEMI ;
prog ::= TROLLEY CID CONTAINS declaration* CHECKOUT compoundStatement SEMI DONE SEMI ;
DOUBLE_NUMBER ::= ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" | "E" ("-" | "+")? INT_NUMBER)? ;
constDeclaration ::= CONST CID COLON type COLON_EQUALS arithEx ;
conjBooleanExpr ::= booleanExpr (CONJUNCTION booleanExpr)* ;
expr ::= prodExpr (ADDITION | SUBTRACTION prodExpr)* ;
NEWLINE ::= "\r"? "\n" ;
commaSeparatedArithEx ::= (arithEx (COMMA arithEx)*)? ;
varDeclaration ::= VAR identifier COLON type ;
atom ::= INT_NUMBER | DOUBLE_NUMBER | identifier | (LPAREN conditionalExpr RPAREN) ;
unary ::= (ADDITION | SUBTRACTION)? atom ;
assignment ::= identifier COLON_EQUALS conditionalExpr ;
prodExpr ::= exponentialExpr (MULTIPLICATION | DIVISION exponentialExpr)* ;
parameterList ::= firstID::identifier COLON firstType::type (COMMA followID::identifier COLON followType::type)* ;
conditional ::= IF conditionalExpr THEN consequent ELSE alternative ;
loop ::= WHILE booleanExpr DO compoundStatement ;
compoundStatement ::= (LBRACE statement (SEMI statement)* RBRACE) | statement ;
procDeclaration ::= PROC identifier LPAREN parameterList? RPAREN COLON type COLON_EQUALS compoundStatement ;
disjBooleanExpr ::= conjBooleanExpr (DISJUNCTION conjBooleanExpr)* ;
--------------------tescol::01000.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
constdec ::= CONST CONSTID COL type DEF arith SEMI ;
CONSTID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
vardec ::= VAR id COL type SEMI ;
orExpr ::= andExpr (DISJ andExpr)* ;
INTNUM ::= ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
comparExpr ::= arithExpr (comparOps arithExpr)* ;
expExpr ::= atom (EXP atom)* ;
atom ::= INTNUM | DOUBNUM | id | procapp | (LBRACK arith RBRACK) ;
statement ::= SKIP | statements | (LCBRACK statement (SEMI statement)* RCBRACK) ;
assign ::= id DEF arith ;
DOUBNUM ::= INTNUM? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" | "E" INTNUM)? ;
multiExpr ::= expExpr (MULT | DIV expExpr)* ;
param ::= (l::id COL ltype::type (COMMA r::id COL rtype::type)*)? ;
condstatement ::= IF orExpr THEN statement ELSE statement ;
andExpr ::= comparExpr (CONJ comparExpr)* ;
arith ::= orExpr (QUES arith COL arith)? ;
procdec ::= PROC id LBRACK param RBRACK COL type DEF statement SEMI ;
procapp ::= id LBRACK arith (COMMA arith)* RBRACK ;
loop ::= WHILE orExpr DO statement ;
program ::= TROLLEY CONSTID CONTAINS declarations CHECKOUT statement SEMI DONE SEMI ;
VARID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
arithExpr ::= multiExpr (ADD | SUB multiExpr)* ;
--------------------tescol::01001.bgf--------------------
grouped ::= STST (statement SEMI)+ STED ;
exp_exp ::= minus (EXP minus)? ;
proc_dec ::= proc_header proc_params proc_body ;
CONST_ID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
proc_header ::= PROC p_id ;
VAR_ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
procedure ::= VAR_ID OPEN params_given CLOSE ;
atom ::= type | constant | variable | procedure | (OPEN arith_exp CLOSE) ;
minus ::= atom | (MINUS minus) ;
param_list ::= (param_item (COMMA param_item)*)? ;
proc_params ::= OPEN param_list CLOSE COLON typename ;
comp_exp ::= plus_min_exp (rel_operator plus_min_exp)? ;
assignment ::= variable DEF arith_exp ;
plus_min_exp ::= mult_div_exp (PLUS | MINUS mult_div_exp)* ;
proc_body ::= DEF statement SEMI ;
arith_exp ::= bool_exp (QUEST arith_exp COLON arith_exp)? ;
var_dec ::= VAR v_id COLON typename SEMI ;
bool_exp ::= con_exp (DISJ con_exp)* ;
DOUBLE_T ::= INT_T? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" | "E" INT_T)? ;
conditional ::= IF bool_exp THEN statement ELSE statement ;
const_dec ::= CONST CONST_ID COLON typename DEF arith_exp SEMI ;
param_item ::= var_id COLON typename ;
INT_T ::= ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
params_given ::= (arith_exp (COMMA arith_exp)*)? ;
loop ::= WHILE bool_exp DO statement ;
program ::= TROLLEY CONST_ID CONTAINS declaration* CHECKOUT statement SEMI DONE SEMI ;
COM ::= "/*" α* "*/" ;
mult_div_exp ::= exp_exp (MULT | DIV exp_exp)* ;
con_exp ::= comp_exp (CONJ comp_exp)* ;
--------------------tescol::01010.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
constdec ::= CONST CONSTID COLON type ASSIGN expr SEMI ;
CONSTID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
mul_div_expr ::= expexpr (MUL | DIV expexpr)* ;
paramdecs ::= (paramdec (COMMA paramdec)* COMMA?)? ;
bracketexpr ::= LPARA expr RPARA ;
ADDITION ::= "+" " " | "\t" | "\r" | "\n" | COMMENT ;
whiledo ::= WHILE cond DO statement ;
ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
vardec ::= VAR id COLON type SEMI ;
argslist ::= LPARA (expr (COMMA expr)* COMMA?)? RPARA ;
andcond ::= pred (AND pred)* ;
expr ::= cond (QUEST expr COLON expr)? ;
paramdec ::= id COLON type ;
SUBTRACTION ::= "-" " " | "\t" | "\r" | "\n" | COMMENT ;
ifthenelse ::= IF cond thenclause elseclause ;
expexpr ::= atom (EXP expexpr)? ;
sub_add_expr ::= mul_div_expr (addsub mul_div_expr)* ;
atom ::= (negative unsignedatom) | unsignedatom ;
statement ::= SKIP | (LCURL statement (SEMI statement)* RCURL) | assignment | ifthenelse | whiledo ;
assignment ::= id ASSIGN expr ;
thenclause ::= THEN statement ;
procdec ::= PROC procdescribe COLON type ASSIGN statement SEMI ;
elseclause ::= ELSE statement ;
NUM ::= INUM? "." INUM? ("e" | "E" (POSITIVE | NEGATIVE)? INUM)? ;
unsignedatom ::= bracketexpr | (id argslist?) | (sign number) | number ;
program ::= TROLLEY CONSTID CONTAINS declaration* CHECKOUT statement SEMI DONE SEMI EOF ;
cond ::= andcond (OR andcond)* ;
pred ::= sub_add_expr (comparator sub_add_expr)? ;
procdescribe ::= id LPARA paramdecs RPARA ;
--------------------tescol::01011.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
skip ::= "skip" SEMI ;
proceduredecl ::= "proc" ID LBRACK parameter (COMMA parameter)* RBRACK COLON INT | DOUBLE ASSIGN statement ;
addition ::= mult (PLUS | MINUS mult)* ;
relation ::= addition (EQUALITY | LTHAN | MTHAN | NOTEQUAL | LEQUAL | MEQUAL addition)* ;
disj ::= conj (DISJ relation)* ;
variable ::= "var" ID COLON INT | DOUBLE SEMI ;
ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
expression ::= disj ("\?" disj COLON disj)? ;
mult ::= unary (MULTI | DIVIS | EXPO unary)* ;
statement ::= (LBRACE statement+ RBRACE SEMI) | skip | assignment | conditional | loop | procedureapp | ret ;
unary ::= (PLUS | negation)* term ;
procedureapp ::= ID "(" (expression (COMMA expression)*)? ")" SEMI? ;
assignment ::= ID ASSIGN expression SEMI ;
term ::= procedureapp | ID | ("(" expression ")") | INUMB | DNUMB ;
parameter ::= ID COLON INT | DOUBLE ;
conj ::= relation (CONJ relation)* ;
conditional ::= IF expression THEN statement+ (ELSE statement+)? ;
INUMB ::= ("+" | "-")? "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ;
loop ::= WHILE expression DO statement+ ;
constant ::= "const" ID COLON INT | DOUBLE ASSIGN expression SEMI ;
program ::= TROLLEY ID CONTAINS (constant | variable | proceduredecl)+ CHECKOUT statement+ DONE SEMI EOF ;
ret ::= "currentProc" ASSIGN expression SEMI ;
DNUMB ::= ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* "." "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")*)? ;
--------------------tescol::01100.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
skip ::= SKIPTOKEN SEMICOLON ;
constdec ::= CONST constidentifier COLON type DEFINE expression SEMICOLON ;
CONSTID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
addition ::= substract ((ADDITION substract)+) | ε ;
ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
condExp ::= disjunct (QUESTIONMARK exp1::condExp COLON exp2::condExp) | ε ;
vardec ::= VAR identifier COLON type SEMICOLON ;
divide ::= exponent ((DIVISION exponent)+) | ε ;
multipli ::= divide ((MULTIPLICATION divide)+) | ε ;
procedure ::= identifier LEFTPARENTHESIS ε | (expression (COMA expression)*) RIGHTPARENTHESIS ;
conjunct ::= comparison ((CONJUNCTION comparison)+) | ε ;
DOUBLE ::= INT? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("E" | "e" (ADDITION | SUBSTRACTION)? INT)? ;
atom ::= number | procedure | identifier | (LEFTPARENTHESIS condExp RIGHTPARENTHESIS) | (SUBSTRACTION condExp) ;
exponent ::= atom (EXPONENT atom) | ε ;
assign ::= identifier DEFINE expression SEMICOLON ;
procdec ::= PROCEDURE id::identifier LEFTPARENTHESIS (RIGHTPARENTHESIS COLON type DEFINE statements) | (ids::identifier COLON type (COMA ids::identifier COLON type)* RIGHTPARENTHESIS COLON type DEFINE statements) ;
number ::= (ADDITION? INT) | (ADDITION? DOUBLE) | (SUBSTRACTION INT) | (SUBSTRACTION DOUBLE) ;
comparison ::= (a2::addition booleanSymbols a1::addition) | addition ;
disjunct ::= conjunct ((DISJUNCTION conjunct)+) | ε ;
loop ::= WHILE expression DO statements ;
statements ::= stat | (LEFTCURLY stat+ RIGHTCURLY SEMICOLON) ;
program ::= (TROLLEY constidentifier CONTAINS declaration CHECKOUT statements DONE SEMICOLON) | (TROLLEY constidentifier CONTAINS CHECKOUT statements DONE SEMICOLON) ;
cond ::= IF expression THEN dothen::statements ELSE doelse::statements ;
substract ::= multipli ((SUBSTRACTION multipli)+) | ε ;
--------------------tescol::01101.bgf--------------------
COMMENT ::= BEGINCOMMENT α* ENDCOMMENT ;
skip ::= SKIP SEMI ;
CID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
do_statement ::= DO cond_statements ;
proc_dec ::= PROCEDURE proc_para COLON TYPE proc_becomes ;
mix_fix ::= bool_disjunction (MIX_FIX arithmetic_expression COLON atom)? ;
DOUBLE ::= INT? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" | "E" (ADD | SUB)? INT)? ;
atom ::= procedure_call | CID | ID | (OPENPARENTHESIS mix_fix CLOSEDPARENTHESIS) | INT | DOUBLE ;
assignment ::= varIDs BECOMES mix_fix SEMI ;
then_statement ::= THEN cond_statements ;
bool_disjunction ::= bool_conjunction (DISJUNCTION bool_conjunction)* ;
arithmetic_expression ::= multiplication_division (ADD | SUB multiplication_division)* ;
parameters ::= mix_fix (COMMA mix_fix)* ;
procedure_call ::= varIDs OPENPARENTHESIS parameters CLOSEDPARENTHESIS SEMI ;
var_dec ::= VAR varIDs COLON TYPE SEMI ;
else_statement ::= ELSE cond_statements ;
proc_para ::= varIDs OPENPARENTHESIS (parameter COMMA?)* CLOSEDPARENTHESIS ;
parameter ::= varIDs COLON TYPE ;
conditional ::= IF OPENPARENTHESIS bool_disjunction CLOSEDPARENTHESIS then_statement else_statement ;
bool_atom ::= arithmetic_expression (NONEQUALITY | EQUALITY | MOREOREQUAL | LESSOREQUAL | MORETHEN | LESSTHEN arithmetic_expression)* ;
multiplication_division ::= exponential (MUL | DIV exponential)* ;
const_dec ::= CONSTANT conIDs COLON TYPE BECOMES mix_fix SEMI ;
checkout ::= CHECKOUT OPENBRACKET statement* CLOSEDBRACKET SEMI DONE SEMI ;
exponential ::= negation (EXP negation)* ;
negation ::= (SUB atom) | atom ;
trolley ::= TROLLEY varIDs CONTAINS decleration ;
loop ::= WHILE bool_disjunction do_statement ;
program ::= trolley checkout ;
proc_becomes ::= BECOMES cond_statements ;
cond_statements ::= (OPENBRACKET statement* CLOSEDBRACKET) | statement ;
bool_conjunction ::= bool_atom (CONJUNCTION bool_atom)* ;
--------------------tescol::01110.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
constDec ::= CONST name::CID COLON t::type COLON_EQUALS c::mixFix SEMI ;
CID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
relation ::= addSubExpr (EQUALITY | NON_EQUALITY | LESS | LESS_EQUAL | GREATER_EQUAL | GREATER addSubExpr)* ;
ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
varDec ::= VAR name::ID COLON t::type SEMI ;
checkoutStat ::= CHECKOUT statement DONE SEMI ;
prog ::= TROLLEY CID CONTAINS declaration* checkoutStat ;
mixFix ::= (a::conjDisjunExpr QUESTION b::conjDisjunExpr COLON c::conjDisjunExpr) | conjDisjunExpr ;
loopStat ::= WHILE a::mixFix DO b::statement ;
DOUBLE_NUMBER ::= ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" | "E" INT_NUMBER)? ;
multDivExpr ::= expoExpr (MULTIPLICATION | DIVISION expoExpr)* ;
startStat ::= TROLLEY CID CONTAINS ;
addSubExpr ::= multDivExpr (ADDITION | SUBTRACTION multDivExpr)* ;
procCall ::= (name::ID) | (name::CID) LPAREN (a::mixFix (COMMA b::mixFix)*)? RPAREN ;
skipStat ::= SKIP SEMI ;
conjDisjunExpr ::= relation (CONJUNCTION | DISJUNCTION relation)* ;
ifStat ::= (IF a::mixFix THEN b::statement ELSE c::statement) | (IF a::mixFix THEN b::statement) ;
atom ::= INT_NUMBER | DOUBLE_NUMBER | ID | CID | procCall | (LPAREN mixFix RPAREN) ;
statement ::= assignment | ifStat | loopStat | skipStat | (LBRACE statement+ RBRACE SEMI) ;
unary ::= ("+" | negation)* atom ;
assignment ::= CID | ID COLON_EQUALS mixFix SEMI ;
procDec ::= PROC name::ID LPAREN (a::ID COLON a_t::type (COMMA b::ID COLON b_t::type)*)? RPAREN COLON r_t::type COLON_EQUALS c::statement ;
expoExpr ::= unary (EXPONENTIATION unary)* ;
--------------------tescol::01111.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
boolExpr ::= subExpr (operations subExpr)? ;
constDec ::= c::CONSTID COLON number DEFINEDAS arithmeticExpression ;
CONSTID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
varDec ::= v::VARANDPROCID COLON number ;
conditionalStat ::= IF boolExpr THEN stat ELSE stat ;
mulExpr ::= divExpr (MULTIPLICATION divExpr)* ;
declarations ::= (CONST constDec SEMI) | (VAR varDec SEMI) | (PROC procDec) ;
loopStat ::= WHILE boolExpr DO stat ;
progTree ::= TROLLEY CONSTID CONTAINS declarations* CHECKOUT stat DONE SEMI ;
addExpr ::= mulExpr (ADDITION mulExpr)* ;
subExpr ::= addExpr (SUBTRACTION addExpr)* ;
stat ::= conditionalStat | loopStat | (assignStat SEMI) | (SKIP SEMI) | (LPAR stat+ RPAR SEMI) ;
subExprList ::= arithmeticExpression (COMMA arithmeticExpression)* ;
expExpr ::= atom (EXPONENTION atom)* ;
conjBool ::= boolExpr (CONJUNCTION boolExpr)* ;
atom ::= CONSTID | VARANDPROCID | (("+" | "-")? INTVALUE) | (("+" | "-")? DOUBLEVALUE) | applyProc | (OPAR arithmeticExpression CPAR) ;
procDec ::= p::VARANDPROCID OPAR paramList? CPAR COLON number DEFINEDAS stat ;
paramList ::= varDec (COMMA varDec)* ;
divExpr ::= expExpr (DIVISION expExpr)* ;
disjBool ::= conjBool (DISJUNCTION conjBool)* ;
applyProc ::= VARANDPROCID OPAR subExprList CPAR ;
assignStat ::= VARANDPROCID DEFINEDAS arithmeticExpression ;
arithmeticExpression ::= disjBool (QUESTION arithmeticExpression COLON arithmeticExpression)? ;
VARANDPROCID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
DOUBLEVALUE ::= INTVALUE? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" | "E" ("+" | "-")? INTVALUE)? ;
--------------------tescol::10000.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
boolExpr ::= andExpr (DISJUNCTION andExpr)* ;
CID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
prog ::= TROLLEY CID CONTAINS NEWLINE* decl* CHECKOUT NEWLINE* stat DONE SEMI ;
INT_NUMBER ::= ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
DOUBLE_NUMBER ::= ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" | "E" INT_NUMBER)? ;
condExpr ::= boolExpr (QUESTION condExpr COLON condExpr)? ;
expr ::= multExpr (ADDITION | SUBTRACTION multExpr)* ;
whileloop ::= WHILE LPAREN boolExpr RPAREN DO stat ;
NEWLINE ::= "\r"? "\n" ;
ifthenelse ::= IF LPAREN boolExpr RPAREN THEN stat (SEMI ELSE stat)? ;
atom ::= INT_NUMBER | DOUBLE_NUMBER | (a::(CID | ID) (LPAREN (expr (COMMA expr)*)? RPAREN)?) | (LPAREN condExpr RPAREN) ;
assign ::= a::(CID | ID) COLON_EQUALS condExpr ;
andExpr ::= compExpr (CONJUNCTION compExpr)* ;
decl ::= (VAR ID COLON INT | DOUBLE SEMI NEWLINE*) | (CONST CID COLON INT | DOUBLE COLON_EQUALS condExpr SEMI NEWLINE*) | (PROC a::ID LPAREN (decl (COMMA decl)*)? RPAREN COLON_EQUALS stat SEMI NEWLINE*) ;
expoExpr ::= atom EXPONENTIATION? ;
multExpr ::= expoExpr (MULTIPLICATION | DIVISION expoExpr)* ;
compExpr ::= expr (GREATER_EQUAL | LESS_EQUAL | EQUALITY | NON_EQUALITY | GREATER | LESS expr)? ;
multStat ::= LBRACE NEWLINE* stat (SEMI NEWLINE* stat)* NEWLINE* RBRACE SEMI ;
--------------------tescol::10001.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
boolExpr ::= andExpr (DISJUNCTION andExpr)* ;
INT_NUMBER ::= ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
DOUBLE_NUMBER ::= INT_NUMBER? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" INT_NUMBER)? ;
condExpr ::= boolExpr (QUESTION condExpr COLON condExpr)? ;
expr ::= multExpr (ADDITION | SUBTRACTION multExpr)* ;
proccall ::= i::id LPAREN (a::atom (COMMA a::atom)*)? RPAREN ;
stat ::= (expr SEMI) | trolley | checkout | assignment | ifstat | whilestat | (SKIP SEMI) | (LBRACE stat+ RBRACE) | SEMI ;
procedure ::= PROC i::id LPAREN (a::vartypedef (COMMA a::vartypedef)*)? RPAREN COLON_EQUALS s::stat ;
ifstat ::= IF e::condExpr THEN ts::stat ELSE es::stat ;
atom ::= INT_NUMBER | DOUBLE_NUMBER | id | cid | (LPAREN condExpr RPAREN) | proccall ;
IDENT ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
CIDENT ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
assignment ::= id COLON_EQUALS condExpr SEMI ;
andExpr ::= compExpr (CONJUNCTION compExpr)* ;
checkout ::= CHECKOUT stat SEMI? DONE SEMI ;
multExpr ::= atom (MULTIPLICATION | DIVISION | EXPONENTIATION atom)* ;
trolley ::= TROLLEY cid CONTAINS def* ;
whilestat ::= WHILE e::condExpr DO s::stat ;
def ::= (CONST n::cid COLON t::type COLON_EQUALS e::expr SEMI) | (VAR vartypedef SEMI) | (procedure SEMI) ;
vartypedef ::= id COLON INT | DOUBLE ;
compExpr ::= expr (GREATER_EQUAL | LESS_EQUAL | EQUALITY | NON_EQUALITY | LESS | GREATER expr)? ;
--------------------tescol::10010.bgf--------------------
conditionalExpression ::= booleanExpression (QUESTION conditional COLON conditional)? ;
procedureApplication ::= arithmetic (ID LPAREN expressionList RPAREN)? ;
ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
declaration ::= constdecl | vardecl | procdecl SEMI ;
expression ::= number (arithmeticOperator number)* ;
expressionList ::= arithmeticExpression (COMMA arithmeticExpression)* ;
disjExpression ::= expression (relationalOperator expression)? ;
DOUBLE ::= INT? "." (("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")*) | ("e" | "E" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+) ;
vardecl ::= VAR ID COLON type ;
INT ::= ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
statementList ::= CLPAREN statement SEMI (statement SEMI)* CRPAREN ;
assignment ::= ID DEF arithmeticExpression ;
constdecl ::= CONST ID COLON type DEF arithmeticExpression ;
CMT ::= "/*" α* "*/" ;
arithmetic ::= number (arithmeticOperator number)* ;
number ::= INT | DOUBLE | ID | (LPAREN conditionalExpression RPAREN) ;
parameterList ::= ID COLON type (COMMA ID COLON type)* ;
conditional ::= IF booleanExpression THEN statement ELSE statement ;
loop ::= WHILE booleanExpression DO statement ;
program ::= TROLLEY ID CONTAINS declaration+ CHECKOUT statement SEMI DONE SEMI ;
arithmeticExpression ::= procedureApplication (conditionalExpression QUESTION arithmeticExpression COLON arithmeticExpression)? ;
conjExpression ::= disjExpression (DISJUNC disjExpression)* ;
booleanExpression ::= conjExpression (CONJUNC conjExpression)* ;
procdecl ::= PROC ID LPAREN parameterList RPAREN COLON type DEF statement ;
--------------------tescol::10011.bgf--------------------
sign ::= (MINUS | PLUS)? atom ;
VARIABLE ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
expon ::= sign (EXPON sign)* ;
vardec ::= VAR parameter SEMI ;
cexpr ::= bexpr (QM cexpr COLON cexpr)? ;
bexpr ::= con (DISJUN con)* ;
expr ::= (multExpr (PLUS | MINUS multExpr)*) | procapp ;
aexprlist ::= aexpr (COMMA aexpr)* ;
DUB ::= INT? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" | "E" INT)? ;
atom ::= number | VARIABLE | CONSTANT | (LPAR cexpr RPAR) ;
consdec ::= CONST CONSTANT COLON type DEFAS aexpr SEMI ;
INT ::= "0" | ("1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")*) ;
assignment ::= VARIABLE DEFAS aexpr ;
statementlist ::= statement | (LCPAR statement (SEMI statement)* RCPAR) ;
procdec ::= PROC VARIABLE LPAR paramlist RPAR COLON type DEFAS statementlist SEMI ;
paramlist ::= parameter (COMMA parameter)* ;
procapp ::= VARIABLE LPAR aexprlist RPAR ;
parameter ::= VARIABLE COLON type ;
ropexpr ::= expr (rop expr)? ;
conditional ::= IF bexpr THEN statementlist ELSE statementlist ;
multExpr ::= expon (MULT | DIV expon)* ;
loop ::= WHILE bexpr DO statementlist ;
CONSTANT ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
program ::= TROLLEY CONSTANT CONTAINS declaration* CHECKOUT statementlist SEMI DONE SEMI ;
con ::= ropexpr (CONJUN ropexpr)* ;
--------------------tescol::10100.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
relationalExpression ::= addExpression (GREATER_EQUAL | GREATER | LESS_EQUAL | LESS | EQUALITY | NON_EQUALITY addExpression)? ;
CID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
orExpression ::= relationalExpression (DISJUNCTION relationalExpression)* ;
prog ::= NEWLINE* TROLLEY NEWLINE* CID NEWLINE* CONTAINS NEWLINE* declarations NEWLINE* statement NEWLINE* SEMI NEWLINE* DONE NEWLINE* SEMI ;
INT_NUMBER ::= ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
addExpression ::= multExpression (ADDITION | SUBTRACTION multExpression)* ;
declarations ::= (individual_declaration NEWLINE*)* CHECKOUT ;
expression ::= andExpression (QUESTION andExpression COLON andExpression)? ;
DOUBLE_NUMBER ::= ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" | "E" INT_NUMBER)? ;
individual_declaration ::= (CONST CID COLON type COLON_EQUALS expression) | (VAR ID COLON type) | (PROC ID paramlist COLON type COLON_EQUALS statement) ;
NEWLINE ::= "\r"? "\n" ;
atom ::= INT_NUMBER | DOUBLE_NUMBER | ID | CID | (LPAREN expression RPAREN) ;
andExpression ::= orExpression (CONJUNCTION orExpression)* ;
condStatement ::= IF expression THEN statement ELSE statement ;
assignment ::= ID COLON_EQUALS expression ;
statementList ::= LBRACE statement (SEMI statement NEWLINE*)* RBRACE ;
paramlist ::= LPAREN (ID COLON type (COMMA ID COLON type)*)? RPAREN ;
multExpression ::= atom (DIVISION | MULTIPLICATION | EXPONENTIATION atom)* ;
loop ::= WHILE expression DO statement ;
--------------------tescol::10101.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
boolExpr ::= andExpr (DISJUNCTION andExpr)* ;
CONSTANTID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
constantdec ::= CONSTANT CONSTANTID COLON type ASSIGN condExpr SEMI ;
ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "_" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
condExpr ::= boolExpr (MIXFIX condExpr COLON condExpr)? ;
mainstatement ::= ε | statement | (STATEMENTOPEN statement (SEMI statement)* STATEMENTCLOSE) ;
expr ::= multExpr (ADDITION | SUBTRACTION multExpr)* ;
atom ::= INTEGER | FLOATINGPOINT | CONSTANTID | ID | (PARENOPEN condExpr PARENCLOSE) | procedureList ;
procedureList ::= ID PARENOPEN id1::condExpr (COMMA id2::condExpr)* PARENCLOSE ;
exponExpr ::= unaryneg EXPONENTIATION* ;
statement ::= SKIP | (ID ASSIGN condExpr) | (IF boolExpr THEN statement ELSE statement) | (WHILE boolExpr DO statement) ;
proceduredec ::= PROCEDURE pid1::ID PARENOPEN (pid2::ID COLON type (COMMA pid3::ID COLON type)*)* PARENCLOSE COLON type ASSIGN mainstatement SEMI ;
andExpr ::= compExpr (CONJUNCTION compExpr)* ;
FLOATINGPOINT ::= INTEGER? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ("e" | "E" (ADDITION | SUBTRACTION)* INTEGER)? ;
variabledec ::= VARIABLE ID COLON type SEMI ;
multExpr ::= exponExpr (MULTIPLICATION | DIVISION exponExpr)* ;
compExpr ::= expr (GREATEREQUAL | LESSEQUAL | GREATER | LESS | EQUALITY | NONEQUALITY expr)* ;
program ::= TROLLEY CONSTANTID CONTAINS declaration* CHECKOUT mainstatement SEMI DONE SEMI ;
unaryneg ::= SUBTRACTION* atom ;
--------------------tescol::10110.bgf--------------------
boolExpr ::= andExpr (DISJ andExpr)* ;
COMMENT ::= "/*" α* "*/" ;
CID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
expr2 ::= multExpr (ADD | SUBTRACT multExpr)* ;
ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
EXPONENTIATION ::= MULTIPLY "*" ;
powerExpr ::= atom (EXPONENTIATION atom)* ;
condExpr ::= boolExpr (QUESTION condExpr COLON condExpr)? ;
proc ::= "proc" identifier "(" identifier COLON type (COMMA identifier COLON type)* ")" COLON type DEFINED_AS statement* SEMI ;
expr ::= negation? expr2 ;
cond_expr ::= QUESTION boolExpr QUESTION expr COLON expr ;
atom ::= INT | DOUBLE | ID | CID | (LPAR condExpr RPAR) | procedure_expr ;
DOUBLE ::= (INT "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* EXPONENT?) | ("." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ EXPONENT?) | (INT EXPONENT) | "." ;
statement ::= SKIP | conditional | loop | assignment | cond_expr | (CURLY_L SKIP | conditional | loop | assignment | cond_expr (SEMI statement)* CURLY_R) ;
EXPONENT ::= "e" | "E" ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
assignment ::= identifier DEFINED_AS expr ;
andExpr ::= compExpr (CONJ compExpr)* ;
var ::= "var" identifier COLON type SEMI ;
conditional ::= IF condExpr THEN statement ELSE statement ;
multExpr ::= powerExpr (MULTIPLY | DIVIDE powerExpr)* ;
loop ::= WHILE boolExpr DO statement ;
compExpr ::= expr (comparator expr)? ;
constant ::= "const" cidentifier COLON type DEFINED_AS expr SEMI ;
program ::= TROLLEY cidentifier CONTAINS dec* CHECKOUT CURLY_L (statement (SEMI statement)*)? CURLY_R SEMI DONE SEMI EOF ;
procedure_expr ::= identifier LPAR expr (COMMA expr)* RPAR ;
--------------------tescol::10111.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
div_subterm ::= molecule (SYM_DIV molecule)* ;
prog ::= KW_TROLLEY ID_GENERAL KW_CONTAINS decl* KW_CHECKOUT statement KW_DONE SYM_SEMI ;
ID_VARPROC ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "_" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
mixfix ::= predicate (SYM_QM mixfix SYM_COLON mixfix)? ;
predicate ::= pred_term (SYM_OR pred_term)* ;
doubleNum ::= (SYM_ADD | SYM_SUB)? DOUBLE ;
parenthesised ::= SYM_OPEN_PAREN mixfix SYM_CLOSE_PAREN ;
expr ::= subtraction_subexpr (SYM_ADD subtraction_subexpr)* ;
param_and_type ::= varproc_id SYM_COLON type ;
proc_decl ::= KW_PROC id::varproc_id param_decl_list SYM_COLON type SYM_ASS statement ;
DOUBLE ::= INT? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* EXPONENT? ;
EXPONENT ::= "e" | "E" (SYM_ADD | SYM_SUB)? INT ;
statement ::= (KW_SKIP SYM_SEMI) | (a::varproc_id SYM_ASS c::mixfix SYM_SEMI) | (SYM_OPEN_BRACE statement+ SYM_CLOSE_BRACE SYM_SEMI) | (KW_IF mixfix KW_THEN statement KW_ELSE statement) | (KW_WHILE mixfix KW_DO statement) ;
pred_base ::= expr (comparator expr)* ;
term ::= div_subterm (SYM_MULT div_subterm)* ;
pred_term ::= pred_base (SYM_AND pred_base)* ;
subtraction_subexpr ::= term (SYM_SUB term)* ;
decl ::= (const_decl | var_decl SYM_SEMI) | proc_decl ;
integerNum ::= (SYM_ADD | SYM_SUB)? INT ;
proc_call ::= id::varproc_id l::arg_list ;
arg_list ::= SYM_OPEN_PAREN (expr (SYM_COMMA expr)*)? SYM_CLOSE_PAREN ;
const_decl ::= KW_CONST id::ID_GENERAL SYM_COLON t::type SYM_ASS e::expr ;
molecule ::= atom (SYM_EXP molecule)? ;
ID_GENERAL ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "_" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
var_decl ::= KW_VAR id::varproc_id SYM_COLON t::type (SYM_ASS expr)? ;
param_decl_list ::= SYM_OPEN_PAREN (param_and_type (SYM_COMMA param_and_type)*)? SYM_CLOSE_PAREN ;
--------------------tescol::11000.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
CID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "_" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
whilestatement ::= WHILE expression DO statements ;
addition ::= multiply (ADDITION multiply)* ;
variable ::= VARIABLE ID | CID COLON INTEGER | DOUBLE SEMI ;
ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "_" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
divide ::= negation (DIVISION negation)? ;
conjunction ::= booleanop (AND booleanop)* ;
subtraction ::= addition (SUBTRACTION addition)* ;
procedure ::= PROCEDURE ID | CID LEFTBRACKET parameters RIGHTBRACKET COLON numbervalues DEFINE statements ;
ifstatement ::= IF LEFTBRACKET expression RIGHTBRACKET THEN statements ELSE statements ;
expo ::= atom (EXPONENTIATION atom)? ;
atom ::= INT | DOU | ID | CID | (LEFTBRACKET expression RIGHTBRACKET) ;
EXPONENT ::= "e" | "E" "+" | "-" INT ;
statement ::= ifstatement | whilestatement | skip | assignment SEMI ;
assignment ::= ID | CID DEFINE expression ;
DOU ::= INT? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* EXPONENT? ;
parameters ::= (parameter (COMMA parameter)*)? ;
booleanop ::= subtraction (relationships subtraction)? ;
parameter ::= ID | CONSTANT COLON numbervalues ;
checkout ::= CHECKOUT statements ;
negation ::= (ADDITION | SUBTRACTION)? expo ;
trolley ::= TROLLEY CID CONTAINS declarations* ;
multiply ::= divide (MULTIPLICATION divide)* ;
statements ::= statement | (CURLYLEFT statement statement* CURLYRIGHT) SEMI ;
constant ::= CONSTANT CID COLON INTEGER | DOUBLE DEFINE expression SEMI ;
program ::= trolley checkout done ;
conditexpr ::= disjunction (QUESTION disjunction COLON disjunction)* ;
disjunction ::= conjunction (OR conjunction)* ;
done ::= DONE SEMI ;
runproc ::= conditexpr | (ID | CID LEFTBRACKET (expression (COMMA expression)*)? RIGHTBRACKET) ;
--------------------tescol::11001.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
FLOAT ::= INT? "." UINT? EXPONENT? ;
exp_exp ::= l::atom_exp (EXP r::atom_exp)* ;
EQUALITY ::= EQUALS EQUALS ;
mixfix ::= e::conjunction (QUESTION t::mixfix COLON f::mixfix)? ;
constdeclaration ::= CONST name::CONSTID COLON t::type DEFINEDAS exp::expression ;
proccall ::= proc::varid LPAREN args::argumentlist RPAREN ;
vardeclaration ::= VAR name::varid COLON t::type ;
ifstatement ::= IF exp::expression THEN statement ELSE statement ;
EXPONENT ::= "e" | "E" INT ;
atom_exp ::= (e::unary_exp) | (LPAREN exp::expression RPAREN) | (proc::proccall) ;
statement ::= SKIP | (LBRACE statement (SEMI statement)* SEMI? RBRACE) | assignment | ifstatement | whilestatement ;
GTEQUALS ::= RANGLE EQUALS ;
procdeclaration ::= PROC name::varid LPAREN params::parameterlist RPAREN COLON t::type DEFINEDAS content::statement ;
disjunction ::= l::comparison (OR r::comparison)* ;
VARID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
INEQUALITY ::= BANG EQUALS ;
contains ::= CONTAINS (procdeclaration | constdeclaration | vardeclaration SEMI)* ;
CONSTID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
whilestatement ::= WHILE exp::expression DO statement ;
argumentlist ::= (exp::expression (COMMA args::argumentlist)?) | ε ;
DEFINEDAS ::= COLON EQUALS ;
addition_exp ::= l::multiply_exp ((o::PLUS) | (o::MINUS) r::multiply_exp)* ;
conjunction ::= l::disjunction (AND r::disjunction)* ;
INT ::= ("+" | "-")? UINT ;
unary_exp ::= MINUS? (num::number) | (var::id) ;
assignment ::= name::id DEFINEDAS exp::expression ;
comparison ::= l::addition_exp (c::conditional r::addition_exp)? ;
LTEQUALS ::= LANGLE EQUALS ;
parameterlist ::= (name::varid COLON t::type (COMMA params::parameterlist)?) | ε ;
checkout ::= CHECKOUT statement SEMI ;
program ::= TROLLEY CONSTID contains checkout done ;
multiply_exp ::= l::exp_exp ((o::MUL) | (o::FSLASH) r::exp_exp)* ;
done ::= DONE SEMI ;
--------------------tescol::11010.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
boolExpr ::= andExpr (DISJUNCTION andExpr)* ;
constDec ::= CONSTID COLON type DEFINEDAS subExpr ;
CONSTID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
varDec ::= v1::smallId COLON type ;
conditionalStat ::= IF boolExpr THEN stat ELSE stat ;
mulExpr ::= divExpr (MULTIPLY divExpr)* ;
declarations ::= (CONST constDec SEMI) | (VAR varDec SEMI) | (PROC procDec SEMI) ;
loopStat ::= WHILE boolExpr DO stat ;
progTree ::= TROLLEY CONSTID CONTAINS declarations* CHECKOUT stat DONE SEMI ;
condExpr ::= boolExpr (QUESTION condExpr COLON condExpr)? ;
addExpr ::= mulExpr (PLUS mulExpr)* ;
subExpr ::= addExpr (MINUS addExpr)* ;
stat ::= conditionalStat | loopStat | assignStat | (LEFTBRACE stat (SEMI stat)* RIGHTBRACE SEMI) | SKIP ;
exprList ::= compExpr (COMMA compExpr)* ;
expExpr ::= atom (EXPONENTIATION atom)* ;
DOUBLE ::= ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" | "E" INT)? ;
atom ::= CONSTID | ID | INT | DOUBLE | (LEFTPAR condExpr RIGHTPAR) | applyProc ;
EXPONENT ::= "e" | "E" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
INT ::= ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
andExpr ::= compExpr (CONJUNCTION compExpr)* ;
procDec ::= p1::smallId LEFTPAR paramList RIGHTPAR COLON type DEFINEDAS stat ;
paramList ::= varDec (COMMA varDec)* ;
divExpr ::= expExpr (DIVIDE expExpr)* ;
applyProc ::= smallId LEFTPAR exprList RIGHTPAR ;
compExpr ::= subExpr (EQUALITY | NOTEQUAL | LESSTHAN | LESSTHANEQUAL | MORETHAN | MORETHANEQUAL subExpr)? ;
assignStat ::= smallId DEFINEDAS condExpr ;
--------------------tescol::11011.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
exp_exp ::= atom (ARITH_EXP atom)* ;
declarations ::= CONTAINS (dec_const | dec_var | dec_proc)* ;
CONST_ID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "_" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ;
exp_multi ::= exp_exp (ARITH_MUL | ARITH_DIV exp_exp)* ;
exp_and ::= exp_comp (CONJ exp_comp)* ;
expr ::= exp_bools (QMARK expr COLON expr)? ;
dec_proc ::= PROC ID LPAR param_list COLON dec_types DEFAS statement SEMI ;
DOUBLE ::= ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+)? ;
atom ::= INT | DOUBLE | (ids argument_list?) | (LPAR expr RPAR) ;
exp_comp ::= exp_addsub (COND_COMP_GREATE | COND_COMP_GREAT | COND_COMP_LESS | COND_COMP_LESSE | COND_EQUAL | COND_NONEQUAL exp_addsub)? ;
param_list ::= param_element? (COMMA param_element)* ;
INT ::= ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
assign ::= ids DEFAS expr ;
statement_group ::= LCB statement (SEMI statement)* RCB ;
param_element ::= ID COLON dec_types ;
dec_var ::= VAR ids COLON dec_types SEMI ;
exp_bools ::= exp_and (DISJ exp_and)* ;
conditional ::= IF exp_bools THEN statement ELSE statement ;
dec_const ::= CONST CONST_ID COLON dec_types DEFAS expr SEMI ;
loop ::= WHILE exp_bools DO statement ;
statements ::= CHECKOUT statement SEMI ;
program ::= TROLLEY CONST_ID declarations statements DONE SEMI ;
exp_addsub ::= exp_multi (ARITH_ADD | ARITH_SUB exp_multi)* ;
argument_list ::= LPAR (expr (COMMA expr)*)? RPAR ;
--------------------tescol::11100.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
CONSTID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
addition ::= t::mult (addop mult)* ;
ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
expression ::= boolexp (QMARK t::mult COLON f::mult)? ;
predicate ::= t::addition (COMPARISON u::addition)? ;
arguments ::= expression (COMMA expression)* ;
boolexp ::= t::predicate (BOOLOPERATOR u::predicate)* ;
definition ::= (CONST CONSTID COLON type ASSIGNMENT expression) | (VAR ID COLON type) | (PROC ID LEFTBRACKET parameters? RIGHTBRACKET COLON type ASSIGNMENT statement) ;
DOUBLE ::= INT? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" | "E" INT)? ;
procedurecall ::= ID LEFTBRACKET arguments? RIGHTBRACKET ;
atom ::= procedurecall | ID | CONSTID | (LEFTBRACKET expression RIGHTBRACKET) | value ;
mult ::= t::unary (MULTIPLIER unary)* ;
INT ::= ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
unary ::= (t::MINUS)* atom ;
statement ::= (SKIP SEMI) | (ID ASSIGNMENT expression SEMI) | (IF boolexp THEN statement ELSE statement) | (WHILE boolexp DO statement) | (LEFTBRACE statement+ RIGHTBRACE) ;
parameters ::= parameter (COMMA parameter)* ;
parameter ::= ID COLON type ;
program ::= TROLLEY CONSTID CONTAINS (definition SEMI?)* CHECKOUT statement SEMI? DONE SEMI ;
--------------------tescol::11101.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
CONSTID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
INTEGER ::= ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
procedureapplication ::= varprocidentifier PARENTHESISL arguments PARENTHESISR ;
prog ::= TROLLEY constantidentifier CONTAINS declaration* CHECKOUT statement DONE SEMI ;
multdivexpression ::= a1::atom (EXPONENTIATION | DIVISION | MULTIPLICATION a2::atom)* ;
VARPROCID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
expression ::= (p1::procedureapplication) | (b1::booleanexpression (QUESTION expression COLON expression)?) ;
constdeclaration ::= CONST constantidentifier COLON type DEFINED expression SEMI ;
arguments ::= e1::expression (COMMA e2::expression)* ;
vardeclaration ::= VAR varprocidentifier COLON type SEMI ;
DOUBLE ::= INTEGER? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* EXPONENT? ;
atom ::= constantidentifier | varprocidentifier | number | (PARENTHESISL expression PARENTHESISR) ;
groupedstatement ::= BRACKETL statement+ BRACKETR SEMI ;
EXPONENT ::= "e" | "E" INTEGER ;
andexpression ::= c1::compexpression (CONJUNCTION compexpression)* ;
statement ::= (SKIP SEMI) | assignment | conditional | loop | groupedstatement ;
assignment ::= varprocidentifier DEFINED ae::expression SEMI ;
parameter ::= varprocidentifier COLON type ;
parameterlist ::= PARENTHESISL (parameter (COMMA parameter)*)? PARENTHESISR ;
compexpression ::= ar1::arithexpression (ROP arithexpression)? ;
conditional ::= IF booleanexpression THEN statement ELSE statement ;
arithexpression ::= m1::multdivexpression (ADDITION | SUBTRACTION m2::multdivexpression)* ;
loop ::= WHILE booleanexpression DO statement ;
procdeclaration ::= PROC varprocidentifier parameterlist COLON type DEFINED statement SEMI ;
booleanexpression ::= an1::andexpression (DISJUNCTION andexpression)* ;
--------------------tescol::11110.bgf--------------------
relationalExpression ::= addtExpr (LESS_EQUAL | GREATER_EQUAL | LESS | GREATER addtExpr)? ;
INTEGER ::= ("+" | "-")? "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ;
CONSTID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
booleanExpr ::= conjunctionExpression (DISJUNCTION conjunctionExpression)* ;
FLOAT ::= ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" | "E" ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+)? ;
ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
conditionalExpr ::= booleanExpr (QUESTION conditionalExpr COLON conditionalExpr)? ;
listofStatement ::= "{" singleStatement (SEMI s::singleStatement)+ "}" ;
constDeclaration ::= CONST CONSTID COLON t::type COLON_EQUALS ar::arithmeticExpr SEMI ;
expressionList ::= arithmeticExpr ("," arithmeticExpr)* ;
COMMENTS ::= "/*" α* "*/" ;
parameterElement ::= id::ID COLON t::type ;
varDeclaration ::= VAR ID COLON t::type SEMI ;
equalityExpression ::= relationalExpression (EQUALITY | NON_EQUALITY relationalExpression)? ;
atom ::= INTEGER | FLOAT | CONSTID | ("(" conditionalExpr ")") | applyProcedure | ID ;
conjunctionExpression ::= equalityExpression (CONJUNCTION equalityExpression)* ;
proDeclaration ::= PROC ID LPAREN p1::parameterList RPAREN COLON t::type COLON_EQUALS s1::statement SEMI ;
condStm ::= IF LPAREN? a::booleanExpr RPAREN? THEN? b::statement (ELSE c::statement)? ;
addtExpr ::= multExpr (ADDITION | SUBTRACTION multExpr)* ;
loopStm ::= WHILE LPAREN? e::booleanExpr RPAREN? DO? s::statement ;
parameterList ::= parameterElement ("," parameterElement)* ;
compilationUnit ::= TROLLEY CONSTID CONTAINS de::declarations CHECKOUT s::statement SEMI DONE SEMI ;
assgStm ::= ID COLON_EQUALS a1::arithmeticExpr ;
multExpr ::= unaryExpr (MULTIPLICATION | DIVISION | EXPONENTIATION unaryExpr)* ;
applyProcedure ::= ID LPAREN expressionList RPAREN ;
unaryExpr ::= ("-" atom) | atom ;
--------------------tescol::11111.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
constant_declaration ::= CONST CONSTID COLON type ASSIGN expression SEMI ;
CONSTID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
expon ::= unary (EXPONENTIATION unary)* ;
INT_NUMBER ::= ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
expression ::= disjunction (MIXFIX expression COLON expression)? ;
DOUBLE_NUMBER ::= (("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+)? "." (("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+)? ("e" | "E" ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+)? ;
variable_declaration ::= VAR id COLON type SEMI ;
conjunction ::= relational (CONJUNCTION relational)* ;
proc ::= id LPAREN (term (COMMA term)*)? RPAREN ;
NEWLINE ::= "\r"? "\n" ;
mult ::= expon (MULTIPLICATION | DIVISION expon)* ;
param_list ::= (id COLON type (COMMA id COLON type)*)? ;
unary ::= negation* term ;
procedure_declaration ::= PROC id LPAREN param_list RPAREN COLON type ASSIGN statement SEMI ;
assignment ::= id ASSIGN expression ;
term ::= INT_NUMBER | DOUBLE_NUMBER | (LPAREN expression RPAREN) | id | proc ;
relational ::= add (relational_op add)* ;
conditional ::= IF expression THEN statement ELSE statement ;
loop ::= WHILE expression DO statement ;
program ::= TROLLEY CONSTID CONTAINS declaration* CHECKOUT statement SEMI DONE SEMI ;
VARID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
disjunction ::= conjunction (DISJUNCTION conjunction)* ;
add ::= mult (ADDITION | SUBTRACTION mult)* ;
multiple_statement ::= LBRACE single_statement (SEMI single_statement)* RBRACE ;
--------------------tescol::reference.bgf--------------------
appList ::= ε | (e::expression (COMMA f::expression)*) ;
CONSTID ::= UPPER (UPPER | DIGIT | "_")* ;
INTEGER ::= ("+" | "-")? DIGIT+ ;
exp ::= a::unary (EXP unary)* ;
paramElem ::= ID COLON type ;
relation ::= a::add (RELOP b::add)? ;
disj ::= a::equality (DISJUNC b::equality)* ;
ID ::= UPPER | LOWER (UPPER | LOWER | DIGIT | "_")* ;
equality ::= a::relation (EQOP b::relation)? ;
expression ::= a::conj (TE b::expression COLON c::expression)? ;
DOUBLE ::= INTEGER? "." DIGIT* ("e" | "E" INTEGER)? ;
varDecl ::= VAR (a::ID) | (a::CONSTID) COLON t::type ;
mult ::= a::exp (MULTOP b::exp)* ;
assign ::= (a::ID) | (a::CONSTID) DEFAS e::expression ;
unary ::= SUB* term ;
constDecl ::= CONST CONSTID COLON t::type DEFAS e::expression ;
term ::= (LPAR expression RPAR) | (CONSTID p::procApp) | (ID p::procApp) ;
paramList ::= ε | (p::paramElem (COMMA q::paramElem)*) ;
procApp ::= ε | (LPAR appList RPAR) ;
conj ::= a::disj (CONJUNC b::disj)* ;
stmtList ::= LBRACE s::stmtElem (SEMI t::stmtElem)* RBRACE ;
loop ::= WHILE e::expression DO statement ;
program ::= TROLLEY CONSTID CONTAINS (declaration SEMI)* CHECKOUT statement SEMI DONE SEMI ;
condSt ::= IF e::expression THEN statement ELSE statement ;
add ::= a::mult (ADD | SUB b::mult)* ;
procDecl ::= PROC (a::ID) | (a::CONSTID) LPAR p::paramList RPAR COLON t::type DEFAS st::statement ;
--------------------hats::abs.bgf--------------------
SqlTupleCaseBranches ::= l::SqlTupleCaseBranches b::SqlTupleCaseBranch ;
 SqlTupleCaseBranches ::= [b] SqlTupleCaseBranch ;
TypesynDecl ::= (al::AnnotationList)? TYPE lhs::TYPE_IDENTIFIER ASSIGN rhs::Datatypeuse SEMICOLON ;
OoModifier ::= REMOVES CLASS id::TypeName SEMICOLON ;
 OoModifier ::= MODIFIES INTERFACE id::TypeName LBRACE (fragments::InfModifierFragmentList)? RBRACE ;
 OoModifier ::= ADDS ifacedecl::QualifiedInterfaceDecl ;
 OoModifier ::= MODIFIES CLASS id::TypeName (ifadd::ImplementInterfacesAdd)? (ifremove::ImplementInterfacesRemove)? LBRACE (fragments::ModifierFragmentList)? RBRACE ;
 OoModifier ::= ADDS classdecl::QualifiedClassDecl ;
Deltaparam ::= [i] INTLITERAL ;
 Deltaparam ::= [c] TYPE_IDENTIFIER ;
 Deltaparam ::= fid::TYPE_IDENTIFIER DOT aid::IDENTIFIER ;
ParamDeclList ::= l::ParamDeclList COMMA i::ParamDecl ;
 ParamDeclList ::= [i] ParamDecl ;
SqlTupleScalarFunctionConcat ::= f1::SqlTupleScalarFunctionConcat CONCAT f2::SqlTupleScalarFunctionSum ;
 SqlTupleScalarFunctionConcat ::= SqlTupleScalarFunctionSum ;
MimplExp ::= MeqExp ;
 MimplExp ::= e1::MimplExp IMPLIES e2::MeqExp ;
 MimplExp ::= e1::MimplExp EQUIV e2::MeqExp ;
OriginalCall ::= ORIGINAL LPAREN (params::DataExpList)? RPAREN ;
 OriginalCall ::= delta::DeltaId DOTORIGINAL LPAREN (params::DataExpList)? RPAREN ;
 OriginalCall ::= CORE DOTORIGINAL LPAREN (params::DataExpList)? RPAREN ;
MethodsigList ::= m::Methodsig SEMICOLON ;
 MethodsigList ::= l::MethodsigList m::Methodsig SEMICOLON ;
SqlAttrAssignment ::= e::DataExp EQ f::SqlTupleScalarFunction ;
SqlOrCondition ::= c1::SqlOrCondition op::OR c2::SqlAndCondition ;
 SqlOrCondition ::= SqlAndCondition ;
Stmt ::= (al::AnnotationList)? s::CompoundStmt ;
 Stmt ::= (al::AnnotationList)? s::StmtWithoutAnnotations SEMICOLON ;
InfModifierFragmentList ::= l::InfModifierFragmentList f::InfModifierFragment ;
 InfModifierFragmentList ::= [f] InfModifierFragment ;
AndExp ::= e1::AndExp ANDAND e2::EqualityExp ;
 AndExp ::= EqualityExp ;
PureExp ::= FatherExp "/"* Component* "/" ;
 PureExp ::= LocationExp "/"* Component* "/" ;
 PureExp ::= IfExp ;
 PureExp ::= PureExpNoIf ;
ConstructorExp ::= [f] TypeName ;
 ConstructorExp ::= f::TypeName LPAREN (l::DataExpList)? RPAREN ;
WhenCondition ::= TO ac::Appcond ;
 WhenCondition ::= WHEN ac::Appcond ;
MmultExp ::= e1::MmultExp MULT e2::MfactorExp ;
 MmultExp ::= [e] MfactorExp ;
 MmultExp ::= e1::MmultExp DIV e2::MfactorExp ;
 MmultExp ::= e1::MmultExp MOD e2::MfactorExp ;
AddExp ::= e1::AddExp PLUS e2::MultExp ;
 AddExp ::= [e] MultExp ;
 AddExp ::= e1::AddExp MINUS e2::MultExp ;
DeltaAccessList ::= [t] DeltaAccess ;
 DeltaAccessList ::= l::DeltaAccessList t::DeltaAccess ;
ConstructorArgList ::= l::ConstructorArgList COMMA a::ConstructorArg ;
 ConstructorArgList ::= [a] ConstructorArg ;
AsyncCall ::= callee::PureExpPrefix BANG method::IDENTIFIER LPAREN (params::DataExpList)? RPAREN ;
 AsyncCall ::= callee::THIS BANG method::IDENTIFIER LPAREN (params::DataExpList)? RPAREN ;
SqlOrderingAttributeList ::= l::SqlOrderingAttributeList COMMA a::SqlOrderingAttribute ;
 SqlOrderingAttributeList ::= [a] SqlOrderingAttribute ;
PureExpPrefix ::= LPAREN e::IfExp RPAREN ;
 PureExpPrefix ::= PureExpNoIf ;
Feature ::= id::TYPE_IDENTIFIER PRIME (attrs::AttrAssignments)? ;
 Feature ::= id::TYPE_IDENTIFIER (attrs::AttrAssignments)? ;
Export ::= EXPORT MULT SEMICOLON ;
 Export ::= EXPORT l::AnyNameList SEMICOLON ;
 Export ::= EXPORT MULT FROM m::ModuleName SEMICOLON ;
 Export ::= EXPORT l::AnyNameList FROM m::ModuleName SEMICOLON ;
SqlAndCondition ::= c1::SqlAndCondition op::AND c2::SqlCondition ;
 SqlAndCondition ::= SqlCondition ;
SqlTupleScalarFunctionProduct ::= f1::SqlTupleScalarFunctionProduct MULT f2::SqlTupleScalarFunctionQuotient ;
 SqlTupleScalarFunctionProduct ::= SqlTupleScalarFunctionQuotient ;
 SqlTupleScalarFunctionProduct ::= f1::SqlTupleScalarFunctionProduct MULT LPAREN f2::SqlTupleScalarFunctionSum RPAREN ;
DataConstructor ::= co::TYPE_IDENTIFIER (p::DataConstructorParams)? ;
CaseBranchList ::= l::CaseBranchList b::CaseBranch ;
 CaseBranchList ::= [b] CaseBranch ;
Product ::= PRODUCT id::TYPE_IDENTIFIER LPAREN (l::FeatureList)? RPAREN SEMICOLON ;
 Product ::= PRODUCT id::TYPE_IDENTIFIER LPAREN (l::FeatureList)? RPAREN LBRACE al::AdaptationList RBRACE ;
DatatypeDecl ::= (al::AnnotationList)? DATA id::TYPE_IDENTIFIER (p::DatatypeparamListDecl)? SEMICOLON ;
 DatatypeDecl ::= (al::AnnotationList)? DATA id::TYPE_IDENTIFIER (p::DatatypeparamListDecl)? ASSIGN l::DataConstructorList SEMICOLON ;
SqlTupleScalarFunctionQuotient ::= f1::SqlTupleScalarFunctionQuotient DIV LPAREN f2::SqlTupleScalarFunctionSum RPAREN ;
 SqlTupleScalarFunctionQuotient ::= f1::SqlTupleScalarFunctionQuotient DIV f2::AtomicSqlTupleScalarFunction ;
 SqlTupleScalarFunctionQuotient ::= AtomicSqlTupleScalarFunction ;
CompilationUnit ::= (m::ModuleDeclList)? (d::DeltaDeclList)? (pl::ProductLine)? (p::ProductList)? fm::Featuremodeldecl ;
SqlAttrDef ::= fun::SqlAggregateFunction AS e::DataExp ;
 SqlAttrDef ::= [f] Factor ;
Import ::= IMPORT l::AnyNameList FROM m::ModuleName SEMICOLON ;
 Import ::= IMPORT l::AnyNameList SEMICOLON ;
 Import ::= IMPORT MULT FROM m::ModuleName SEMICOLON ;
FunctionDecl ::= (al::AnnotationList)? DEF t::Datatypeuse fn::IDENTIFIER p::DatatypeparamListDecl LPAREN (l::ParamDeclList)? RPAREN ASSIGN ef::ExpFunctionDef SEMICOLON ;
 FunctionDecl ::= (al::AnnotationList)? DEF t::Datatypeuse fn::IDENTIFIER LPAREN (l::ParamDeclList)? RPAREN ASSIGN ef::ExpFunctionDef SEMICOLON ;
 FunctionDecl ::= (al::AnnotationList)? DEF t::Datatypeuse fn::IDENTIFIER LPAREN (l::ParamDeclList)? RPAREN ASSIGN BUILTIN SEMICOLON ;
 FunctionDecl ::= (al::AnnotationList)? DEF t::Datatypeuse fn::IDENTIFIER p::DatatypeparamListDecl LPAREN (l::ParamDeclList)? RPAREN ASSIGN BUILTIN SEMICOLON ;
HasCondition ::= HASFIELD f::FieldDecl ;
 HasCondition ::= HASMETHOD ms::Methodsig ;
 HasCondition ::= HASINTERFACE n::TypeName ;
ModuleModifierList ::= l::ModuleModifierList m::ModuleModifier ;
 ModuleModifierList ::= [m] ModuleModifier ;
IncompleteExp ::= callee::PureExpPrefix b::BANG (method::IDENTIFIER)? ;
 IncompleteExp ::= callee::PureExpPrefix d::DOT (method::IDENTIFIER)? ;
 IncompleteExp ::= NEW (c::Cog)? ;
AfterCondition ::= AFTER l::DeltaList ;
AttrAssignment ::= n::IDENTIFIER ASSIGN i::INTLITERAL ;
 AttrAssignment ::= n::IDENTIFIER ASSIGN c::TYPE_IDENTIFIER ;
ImplementInterfaces ::= IMPLEMENTS i::IfnameList ;
IfThenElseStmt ::= IF LPAREN e1::DataExp RPAREN s1::Stmt ELSE s2::Stmt ;
 IfThenElseStmt ::= IF LPAREN e1::DataExp RPAREN s1::Stmt ;
SyncCall ::= callee::PureExpPrefix DOT method::IDENTIFIER LPAREN (params::DataExpList)? RPAREN ;
 SyncCall ::= callee::THIS DOT method::IDENTIFIER LPAREN (params::DataExpList)? RPAREN ;
Fextension ::= f::TYPE_IDENTIFIER LBRACE (g::Group)? acl::AttributeConstraintList RBRACE ;
AttributeConstraintList ::= acl::AttributeConstraintList t::TYPE_IDENTIFIER id::IDENTIFIER IN LBRACKET b1::BoundaryInt UNTIL b2::BoundaryInt RBRACKET SEMICOLON ;
 AttributeConstraintList ::= acl::AttributeConstraintList t::TYPE_IDENTIFIER id::IDENTIFIER SEMICOLON "/"* Constraints* "/" ;
 AttributeConstraintList ::= acl::AttributeConstraintList EXCLUDE COLON f::Featvar SEMICOLON ;
 AttributeConstraintList ::= acl::AttributeConstraintList t::TYPE_IDENTIFIER id::IDENTIFIER IN LBRACE il::IntList RBRACE SEMICOLON ;
 AttributeConstraintList ::= acl::AttributeConstraintList t::TYPE_IDENTIFIER LBRACKET b1::BoundaryInt UNTIL b2::BoundaryInt RBRACKET id::IDENTIFIER SEMICOLON ;
 AttributeConstraintList ::= acl::AttributeConstraintList e::Mexp SEMICOLON ;
 AttributeConstraintList ::= "/"* Attributes* "/" ;
 AttributeConstraintList ::= acl::AttributeConstraintList REQUIRE COLON f::Featvar SEMICOLON ;
 AttributeConstraintList ::= acl::AttributeConstraintList IFIN COLON e::Mexp SEMICOLON ;
 AttributeConstraintList ::= acl::AttributeConstraintList IFOUT COLON e::Mexp SEMICOLON ;
ParamDecl ::= (an::AnnotationList)? t::TypeExp i::IDENTIFIER ;
AnyNameList ::= [n] AnyName ;
 AnyNameList ::= l::AnyNameList COMMA n::AnyName ;
ExtendsInterfaces ::= EXTENDS i::IfnameList ;
Mexp ::= e1::Mexp OROR e2::MandExp ;
 Mexp ::= MandExp ;
CaseExp ::= CASE caseterm::DataExp LBRACE (branches::CaseBranchList)? RBRACE ;
MultExp ::= e1::MultExp MULT e2::Factor ;
 MultExp ::= e1::MultExp MOD e2::Factor ;
 MultExp ::= [f] Factor ;
 MultExp ::= e1::MultExp DIV e2::Factor ;
SqlAttrAssignmentList ::= [a] SqlAttrAssignment ;
 SqlAttrAssignmentList ::= l::SqlAttrAssignmentList COMMA a::SqlAttrAssignment ;
SqlAggregateFunction ::= COUNT LPAREN MULT RPAREN ;
 SqlAggregateFunction ::= [f] SqlTupleScalarFunction ;
 SqlAggregateFunction ::= i::IDENTIFIER LPAREN f::SqlTupleScalarFunction RPAREN ;
StmtList ::= l::StmtList i::Stmt ;
 StmtList ::= [i] Stmt ;
ModifierFragmentList ::= [f] ModifierFragment ;
 ModifierFragmentList ::= l::ModifierFragmentList f::ModifierFragment ;
MeqExp ::= MrelExp ;
 MeqExp ::= e1::MeqExp NOTEQ e2::MrelExp ;
 MeqExp ::= e1::MeqExp EQEQ e2::MrelExp ;
ImplementInterfacesAdd ::= ADDS i::IfnameList ;
FieldDecl ::= (an::AnnotationList)? PORT t::TypeExp i::IDENTIFIER ;
 FieldDecl ::= (an::AnnotationList)? t::TypeExp i::IDENTIFIER ;
 FieldDecl ::= (an::AnnotationList)? PORT t::TypeExp i::IDENTIFIER ASSIGN e::DataExp ;
 FieldDecl ::= (an::AnnotationList)? t::TypeExp i::IDENTIFIER ASSIGN e::DataExp ;
EqualityExp ::= e1::EqualityExp EQEQ e2::RelationalExp ;
 EqualityExp ::= RelationalExp ;
 EqualityExp ::= e1::EqualityExp NOTEQ e2::RelationalExp ;
VarOrFieldRef ::= callee::THIS b::BANG (method::IDENTIFIER)? ;
 VarOrFieldRef ::= [n] IDENTIFIER ;
 VarOrFieldRef ::= callee::THIS d::DOT ;
 VarOrFieldRef ::= THIS DOT id::IDENTIFIER ;
MfactorExp ::= MINUS e::MfactorExp ;
 MfactorExp ::= MlitExp ;
 MfactorExp ::= NEGATION e::MfactorExp ;
 MfactorExp ::= LPAREN e::Mexp RPAREN ;
ImplementInterfacesRemove ::= REMOVES i::IfnameList ;
IfExp ::= IF e::DataExp THEN c::DataExp ELSE a::DataExp ;
FeatureDecl ::= [f] TYPE_IDENTIFIER ;
 FeatureDecl ::= f::TYPE_IDENTIFIER LBRACE (g::Group)? acl::AttributeConstraintList RBRACE ;
ParamDecls ::= LPAREN (f::ParamDeclList)? RPAREN ;
SqlOrderingAttributes ::= ε ;
 SqlOrderingAttributes ::= ORDER BY l::SqlOrderingAttributeList ;
CorefeatureList ::= ε ;
 CorefeatureList ::= COREFEATURES l::FeatureList SEMICOLON ;
FeatureList ::= [f] Feature ;
 FeatureList ::= l::FeatureList COMMA f::Feature ;
MlitExp ::= [i] INTLITERAL ;
 MlitExp ::= [id] IDENTIFIER ;
 MlitExp ::= f::TYPE_IDENTIFIER DOT a::IDENTIFIER ;
 MlitExp ::= [id] TYPE_IDENTIFIER ;
ExportList ::= [t] Export ;
 ExportList ::= l::ExportList t::Export ;
DatatypeparamListDecl ::= LT l::DatatypeparamList GT ;
SqlExp ::= INSERT INTO r::SqlRelationRef LPAREN a::SqlAttrRefList RPAREN VALUES LPAREN v::SqlTupleConstantList RPAREN ;
 SqlExp ::= UPDATE r::SqlRelationRef SET a::SqlAttrAssignmentList c::OptSqlCondition ;
 SqlExp ::= SELECT a::SqlAttrsDef FROM r::SqlRelationRef c::OptSqlCondition g::SqlGroupingAttributes o::SqlOrderingAttributes ;
 SqlExp ::= SELECT DISTINCT a::SqlAttrsDef FROM r::SqlRelationRef c::OptSqlCondition g::SqlGroupingAttributes o::SqlOrderingAttributes ;
DataConstructorList ::= [i] DataConstructor ;
 DataConstructorList ::= l::DataConstructorList BAR i::DataConstructor ;
AnnotationList ::= l::AnnotationList a::Annotation ;
 AnnotationList ::= [a] Annotation ;
BlockWithoutAnnotations ::= LBRACE (s::StmtList)? RBRACE ;
DeclList ::= l::DeclList t::Decl ;
 DeclList ::= [t] Decl ;
Guard ::= [e] DataExp ;
 Guard ::= r::VarOrFieldRef QMARK ;
 Guard ::= BAR e::Exp BAR ;
 Guard ::= DURATION LPAREN min::DataExp COMMA max::DataExp RPAREN ;
 Guard ::= g1::Guard GUARDAND g2::Guard ;
SqlAttrDefList ::= [a] SqlAttrDef ;
 SqlAttrDefList ::= l::SqlAttrDefList COMMA a::SqlAttrDef ;
QualifiedTypeName ::= qn::TypeName DOT n::TYPE_IDENTIFIER ;
ModuleNameDecl ::= MODULE n::ModuleName SEMICOLON ;
SqlTupleConstant ::= [i] IntLiteral ;
 SqlTupleConstant ::= [s] SqlStringLiteral ;
 SqlTupleConstant ::= TRUE ;
 SqlTupleConstant ::= MINUS i::IntLiteral ;
 SqlTupleConstant ::= FALSE ;
 SqlTupleConstant ::= [r] VarOrFieldRef ;
NewExp ::= NEW (c::Cog)? i::TypeName LPAREN (l::DataExpList)? RPAREN ;
AttrAssignmentList ::= [a] AttrAssignment ;
 AttrAssignmentList ::= l::AttrAssignmentList COMMA a::AttrAssignment ;
WhileStmt ::= WHILE LPAREN e1::DataExp RPAREN s1::Stmt ;
DataConstructorParams ::= LPAREN (l::ConstructorArgList)? RPAREN ;
AttrAssignments ::= LBRACE l::AttrAssignmentList RBRACE ;
AdaptationList ::= l::AdaptationList ad::Adaptation ;
 AdaptationList ::= [ad] Adaptation ;
FromCondition ::= FROM ac::Appcond ;
Factor ::= NEGATION b::Factor ;
 Factor ::= MINUS e::Factor ;
 Factor ::= Literal ;
 Factor ::= PureExp ;
 Factor ::= LPAREN e::OrExp RPAREN ;
Cardinality ::= ONEOF ;
 Cardinality ::= LBRACKET i1::INTLITERAL UNTIL i2::INTLITERAL RBRACKET ;
 Cardinality ::= ALLOF ;
 Cardinality ::= LBRACKET i::INTLITERAL UNTIL MULT RBRACKET ;
Block ::= (al::AnnotationList)? b::BlockWithoutAnnotations ;
SqlRelationRef ::= r1::SqlRelationRef JOIN r2::SqlAtomicRelationRef ;
 SqlRelationRef ::= r1::SqlRelationRef RIGHT JOIN r2::SqlAtomicRelationRef ;
 SqlRelationRef ::= SqlAtomicRelationRef ;
 SqlRelationRef ::= r1::SqlRelationRef LEFT JOIN r2::SqlAtomicRelationRef ;
QualifiedInterfaceDecl ::= (al::AnnotationList)? INTERFACE id::TypeName (i::ExtendsInterfaces)? LBRACE (l::MethodsigList)? RBRACE ;
ModifierFragment ::= REMOVES f::FieldDecl SEMICOLON ;
 ModifierFragment ::= MODIFIES m::Method ;
 ModifierFragment ::= ADDS f::FieldDecl SEMICOLON ;
 ModifierFragment ::= REMOVES ms::Methodsig SEMICOLON ;
 ModifierFragment ::= ADDS m::Method ;
InterfaceDecl ::= (al::AnnotationList)? INTERFACE id::TYPE_IDENTIFIER (i::ExtendsInterfaces)? LBRACE (l::MethodsigList)? RBRACE ;
ProductLine ::= PRODUCTLINE id::TYPE_IDENTIFIER SEMICOLON o::OptfeatureList c::CorefeatureList d::DeltaclauseList ;
TypeExp ::= [n] TypeName ;
 TypeExp ::= n::TypeName LT p::DatatypeuseList GT ;
FieldDeclList ::= i::FieldDecl SEMICOLON ;
 FieldDeclList ::= l::FieldDeclList i::FieldDecl SEMICOLON ;
DeltaDecl ::= DELTA id::TYPE_IDENTIFIER (params::DeltaParamDecls)? SEMICOLON (uses::DeltaAccessList)? (modifiers::ModuleModifierList)? ;
Group ::= GROUP c::Cardinality LBRACE fs::FnodeList RBRACE ;
DeltaParamDeclList ::= [i] DeltaParamDecl ;
 DeltaParamDeclList ::= l::DeltaParamDeclList COMMA i::DeltaParamDecl ;
Cog ::= (annotations::AnnotationList)? COG ;
ModuleDecl ::= n::ModuleNameDecl (el::ExportList)? (il::ImportList)? (dl::DeclList)? (b::MainBlock)? ;
RelationalExp ::= e1::RelationalExp LTEQ e2::AddExp ;
 RelationalExp ::= AddExp ;
 RelationalExp ::= e1::RelationalExp LT e2::AddExp ;
 RelationalExp ::= e1::RelationalExp GT e2::AddExp ;
 RelationalExp ::= e1::RelationalExp GTEQ e2::AddExp ;
DeltaList ::= l::DeltaList COMMA id::Delta ;
 DeltaList ::= [id] Delta ;
ConstructorPattern ::= co::TypeName (p::PatternParams)? ;
FactorAppcond ::= LPAREN ac::Appcond RPAREN ;
 FactorAppcond ::= [f] Feature ;
 FactorAppcond ::= NEGATION ac::FactorAppcond ;
Deltaspec ::= id::TYPE_IDENTIFIER (params::Deltaparams)? ;
MandExp ::= MimplExp ;
 MandExp ::= e1::MandExp ANDAND e2::MimplExp ;
MrelExp ::= e1::MrelExp GTEQ e2::MaddExp ;
 MrelExp ::= e1::MrelExp GT e2::MaddExp ;
 MrelExp ::= e1::MrelExp LT e2::MaddExp ;
 MrelExp ::= MaddExp ;
 MrelExp ::= e1::MrelExp LTEQ e2::MaddExp ;
VarDecl ::= t::TypeExp i::IDENTIFIER ASSIGN e::Exp ;
 VarDecl ::= t::TypeExp i::IDENTIFIER ;
Annotation ::= LBRACKET type::TypeExp COLON exp::DataExp RBRACKET ;
 Annotation ::= LBRACKET exp::DataExp RBRACKET ;
SqlTupleCaseBranch ::= WHEN c::SqlOrCondition THEN f::SqlTupleScalarFunction ;
ListLiteralExp ::= LBRACKET (l::DataExpList)? RBRACKET ;
MaddExp ::= e1::MaddExp MINUS e2::MmultExp ;
 MaddExp ::= [e] MmultExp ;
 MaddExp ::= e1::MaddExp PLUS e2::MmultExp ;
Fnode ::= OPT f::FeatureDecl ;
 Fnode ::= [f] FeatureDecl ;
DatatypeparamList ::= l::DatatypeparamList COMMA p::Datatypeparam ;
 DatatypeparamList ::= [p] Datatypeparam ;
BoundaryInt ::= [i] INTLITERAL ;
 BoundaryInt ::= MULT ;
 BoundaryInt ::= MINUS i::INTLITERAL ;
DeltaclauseList ::= ε ;
 DeltaclauseList ::= l::DeltaclauseList dc::DeltaClause SEMICOLON ;
StmtWithoutAnnotations ::= REBIND field::IDENTIFIER ASSIGN e::Exp ;
 StmtWithoutAnnotations ::= r::VarOrFieldRef ASSIGN e::Exp ;
 StmtWithoutAnnotations ::= SKIP ;
 StmtWithoutAnnotations ::= REBIND obj::Exp COLON field::IDENTIFIER ASSIGN e::Exp ;
 StmtWithoutAnnotations ::= [e] EffExp ;
 StmtWithoutAnnotations ::= [vd] VarDecl ;
 StmtWithoutAnnotations ::= DURATION LPAREN min::DataExp COMMA max::DataExp RPAREN ;
 StmtWithoutAnnotations ::= SUBLOC sub::PureExp IN father::PureExp ;
 StmtWithoutAnnotations ::= ASSERT e::DataExp ;
 StmtWithoutAnnotations ::= AWAIT Guard ;
 StmtWithoutAnnotations ::= SUSPEND ;
 StmtWithoutAnnotations ::= RETURN e::Exp ;
 StmtWithoutAnnotations ::= MOVECOGTO DataExp ;
DatatypeuseList ::= [i] Datatypeuse ;
 DatatypeuseList ::= l::DatatypeuseList COMMA i::Datatypeuse ;
OptfeatureList ::= OPTFEATURES l::FeatureList SEMICOLON ;
 OptfeatureList ::= ε ;
OrAppcond ::= ac1::OrAppcond OROR ac2::AndAppcond ;
 OrAppcond ::= AndAppcond ;
MethodList ::= l::MethodList i::Method ;
 MethodList ::= [i] Method ;
Featuremodeldecl ::= l::Featuremodeldecl EXTENSION ext::Fextension ;
 Featuremodeldecl ::= l::Featuremodeldecl ROOT f::FeatureDecl ;
 Featuremodeldecl ::= ε ;
NewlocExp ::= NEW LOC ;
SqlTupleConstantList ::= [c] SqlTupleConstant ;
 SqlTupleConstantList ::= l::SqlTupleConstantList COMMA c::SqlTupleConstant ;
MainBlock ::= (al::AnnotationList)? LBRACE (s::StmtList)? RBRACE ;
DeltaParamDecls ::= LPAREN (f::DeltaParamDeclList)? RPAREN ;
Adaptation ::= product::TYPE_IDENTIFIER BY update::TYPE_IDENTIFIER SEMICOLON ;
DeltaparamList ::= l::DeltaparamList COMMA p::Deltaparam ;
 DeltaparamList ::= [p] Deltaparam ;
DataExpList ::= l::DataExpList COMMA i::DataExp ;
 DataExpList ::= [i] DataExp ;
Methodsig ::= (al::AnnotationList)? returntype::TypeExp id::IDENTIFIER LPAREN (params::ParamDeclList)? RPAREN ;
PatternList ::= l::PatternList COMMA i::Pattern ;
 PatternList ::= [i] Pattern ;
SqlTupleScalarFunctionSum ::= f1::SqlTupleScalarFunctionSum MINUS f2::SqlTupleScalarFunctionProduct ;
 SqlTupleScalarFunctionSum ::= f1::SqlTupleScalarFunctionSum PLUS f2::SqlTupleScalarFunctionProduct ;
 SqlTupleScalarFunctionSum ::= f1::SqlTupleScalarFunctionSum MINUS LPAREN f2::SqlTupleScalarFunctionSum RPAREN ;
 SqlTupleScalarFunctionSum ::= SqlTupleScalarFunctionProduct ;
InfModifierFragment ::= REMOVES ms::Methodsig SEMICOLON ;
 InfModifierFragment ::= ADDS ms::Methodsig SEMICOLON ;
QualifiedName ::= qn::TypeName DOT n::IDENTIFIER ;
DeltaClause ::= DELTA d::Deltaspec (a::AfterCondition)? (f::FromCondition)? (w::WhenCondition)? ;
QualifiedClassDecl ::= (annotations::AnnotationList)? CLASS id::TypeName (params::ParamDecls)? (i::ImplementInterfaces)? LBRACE (fields::FieldDeclList)? (initBlock::InitBlock)? (methods::MethodList)? RBRACE ;
FnappListExp ::= f::Name l::ListLiteralExp ;
FnappExp ::= f::Name LPAREN (l::DataExpList)? RPAREN ;
ClassDecl ::= (annotations::AnnotationList)? CLASS id::TYPE_IDENTIFIER (params::ParamDecls)? (i::ImplementInterfaces)? LBRACE (fields::FieldDeclList)? (initBlock::InitBlock)? (methods::MethodList)? RBRACE ;
LetExp ::= LET LPAREN var::ParamDecl RPAREN ASSIGN val::DataExp IN exp::DataExp ;
OptSqlCondition ::= WHERE c::SqlOrCondition ;
 OptSqlCondition ::= ε ;
DeltaDeclList ::= [t] DeltaDecl ;
 DeltaDeclList ::= l::DeltaDeclList t::DeltaDecl ;
DeltaParamDecl ::= [p] ParamDecl ;
 DeltaParamDecl ::= id::TYPE_IDENTIFIER c::HasCondition ;
Deltaparams ::= LPAREN l::DeltaparamList RPAREN ;
DeltaAccess ::= USES m::ModuleName SEMICOLON ;
ConstructorArg ::= [u] Datatypeuse ;
 ConstructorArg ::= u::Datatypeuse id::IDENTIFIER ;
SqlOrderingAttribute ::= e::DataExp DESC ;
 SqlOrderingAttribute ::= [e] DataExp ;
 SqlOrderingAttribute ::= e::DataExp ASC ;
OrExp ::= AndExp ;
 OrExp ::= e1::OrExp OROR e2::AndExp ;
FunctionalModifier ::= ADDS typesyndecl::TypesynDecl ;
 FunctionalModifier ::= MODIFIES typesyndecl::TypesynDecl ;
 FunctionalModifier ::= ADDS datatypedecl::DatatypeDecl ;
 FunctionalModifier ::= ADDS functiondecl::FunctionDecl ;
 FunctionalModifier ::= MODIFIES datatypedecl::DatatypeDecl ;
EffExp ::= AsyncCall ;
 EffExp ::= NewlocExp "/"* Component* "/" ;
 EffExp ::= NewExp ;
 EffExp ::= IncompleteExp ;
 EffExp ::= SyncCall ;
 EffExp ::= SQL LPAREN e::SqlExp RPAREN ;
 EffExp ::= OriginalCall ;
 EffExp ::= p::PureExpPrefix DOT GET ;
PatternParams ::= LPAREN (l::PatternList)? RPAREN ;
ModuleDeclList ::= l::ModuleDeclList t::ModuleDecl ;
 ModuleDeclList ::= [t] ModuleDecl ;
CaseBranch ::= lhs::Pattern RARROW rhs::DataExp SEMICOLON ;
SqlAttrRefList ::= l::SqlAttrRefList COMMA a::SqlAttrRef ;
 SqlAttrRefList ::= [a] SqlAttrRef ;
SqlCondition ::= NOT c::SqlCondition ;
 SqlCondition ::= f1::SqlTupleScalarFunction r::SqlComparisonRelation f2::SqlTupleScalarFunction ;
 SqlCondition ::= a::StringLiteral IS NULL ;
 SqlCondition ::= LPAREN c::SqlOrCondition RPAREN ;
IntList ::= MINUS i::INTLITERAL ;
 IntList ::= il::IntList COMMA MINUS i::INTLITERAL ;
 IntList ::= il::IntList COMMA i::INTLITERAL ;
 IntList ::= [i] INTLITERAL ;
ProductList ::= [p] Product ;
 ProductList ::= l::ProductList p::Product ;
AndAppcond ::= ac1::AndAppcond ANDAND ac2::FactorAppcond ;
 AndAppcond ::= FactorAppcond ;
SqlGroupingAttributes ::= ε ;
 SqlGroupingAttributes ::= GROUP BY a::SqlAttrRefList ;
LocationExp ::= LOC LPAREN param::PureExp RPAREN ;
IfnameList ::= l::IfnameList COMMA i::Ifname ;
 IfnameList ::= [i] Ifname ;
FnodeList ::= ε ;
 FnodeList ::= l::FnodeList COMMA f::Fnode ;
 FnodeList ::= [f] Fnode ;
Datatypeuse ::= (l::AnnotationList)? n::TypeName LT p::DatatypeuseList GT ;
 Datatypeuse ::= (l::AnnotationList)? n::TypeName ;
ImportList ::= [t] Import ;
 ImportList ::= l::ImportList t::Import ;
SqlTupleCaseFunction ::= CASE b::SqlTupleCaseBranches ELSE f::SqlTupleScalarFunction END ;
Method ::= CRITICAL ms::Methodsig b::Block ;
 Method ::= ms::Methodsig b::Block ;
FatherExp ::= FATHER LPAREN param::PureExp RPAREN ;
--------------------metamodels::ACG.bgf--------------------
PushDStat ::= operand::Expression ;
ForEachStat ::= iterator::VariableDecl collection::Expression ;
SequenceExp ::= (elements::Expression)+ ;
Attribute ::= context::String name::String body::Expression ;
OperatorCallExp ::= (arguments::Expression)+ ;
OperationStat ::= context::Expression name::Expression ;
LoadStat ::= operand::Expression ;
Function ::= context::String name::String (parameters::Parameter)+ body::Expression ;
GotoStat ::= label::LabelStat ;
SetStat ::= operand::Expression ;
StoreStat ::= operand::Expression ;
SimpleNode ::= element::String mode::String guard::Expression ;
CallStat ::= operand::Expression ;
IfStat ::= label::LabelStat ;
IteratorExp ::= iterator::VariableDecl body::Expression ;
LetStat ::= variable::VariableDecl value::Expression ;
CodeNode ::= element::String mode::String guard::Expression ;
PushStat ::= operand::Expression ;
GetStat ::= operand::Expression ;
IsAExp ::= source::Expression type::String ;
ACG ::= metamodel::String startsWith::String (elements::ACGElement)+ ;
LetExp ::= variable::VariableDecl value::Expression in::Expression ;
ParamStat ::= name::Expression type::Expression ;
IfExp ::= condition::Expression thenExp::Expression elseExp::Expression ;
AnalyzeStat ::= target::Expression mode::String ;
ConditionalStat ::= condition::Expression (elseStatements::Statement)+ ;
VariableStat ::= definition::Expression name::Expression ;
FieldStat ::= name::Expression type::Expression ;
SuperCallStat ::= operand::Expression ;
NavigationExp ::= source::Expression name::String ;
Parameter ::= name::String ;
ReportStat ::= severity::Severity message::Expression ;
LabelStat ::= name::String id::Expression ;
PushIStat ::= operand::Expression ;
PCallStat ::= operand::Expression ;
--------------------metamodels::ACME.bgf--------------------
System ::= (componentDeclaration::ComponentInstance)+ (connectorDeclaration::Connector)+ (attachments::Link)+ (bindings::Link)+ ;
Connector ::= (roles::Role)+ system::System ;
Type ::= name::String (representations::Representation)+ (property::Property)+ ;
Role ::= name::String (representations::Representation)+ (property::Property)+ ;
Binding ::= compSrc::String portSrc::String compDest::String portDest::String ;
Property ::= name::String val::String ;
Attachment ::= comp::String port::String con::String role::String ;
Port ::= name::String (representations::Representation)+ (property::Property)+ ;
--------------------metamodels::ADELFE.bgf--------------------
Incomprehension ::= cooperationRules::CooperationRules ;
Incompetence ::= cooperationRules::CooperationRules ;
Ambiguity ::= cooperationRules::CooperationRules ;
Representation ::= cooperativeAgentR::CooperativeAgent element::Element ;
Element ::= environnement::Environnement action::CooperativeAgent perception::CooperativeAgent ;
CooperativeAgent ::= elementA::Element elementP::Element (representation::Representation)+ (skill::Skill)+ (aptitude::Aptitude)+ (characteristic::Characteristic)+ (communication::Communication)+ (observes::CooperationRules)+ ;
Unproductiveness ::= cooperationRules::CooperationRules ;
Uselessness ::= cooperationRules::CooperationRules ;
Communication ::= cooperativeAgentCom::CooperativeAgent (aip::AIP)+ ;
Concurrency ::= cooperationRules::CooperationRules ;
Conflict ::= cooperationRules::CooperationRules ;
--------------------metamodels::ASM.bgf--------------------
Extension ::= (elements::VariableDecl)+ universe::Universe ;
DoForallRule ::= id::VariableDecl inSet::Universe condition::Term (doRule::Rule)+ ;
Asm ::= signature::Signature returnType::String metaInformation::MetaInformation body::Body ;
Function ::= (parameters::Parameter)+ returnType::String initTerm::Term isExternal::Boolean ;
Signature ::= isMain::Boolean name::String (arguments::Argument)+ ;
ExtendRule ::= (extensions::Extension)+ (rules::Rule)+ ;
ElseIf ::= condition::Term (thenRule::Rule)+ elseRule::Rule elseIfRule::ElseIf ;
ChooseRule ::= chooseId::VariableDecl inSet::Universe guard::Term (ifChoosenRules::Rule)+ ifNotChoosenRule::Rule ;
OperatorTerm ::= opName::String leftExp::Term rightExp::Term ;
AsmInvocation ::= asmName::String (arguments::Term)+ ;
Parameter ::= name::String type::String ;
MetaInformation ::= (usedAsIn::Signature)+ usedAs::AsmType (accessUpdateFunctions::AccessUpdateFunction)+ ;
UpdateRule ::= function::FunctionOrVariableTerm updateTerm::Term ;
Universe ::= name::String (contents::String)+ (superUniverses::Universe)+ ;
AccessUpdateFunction ::= type::AccessUpdateType (functions::Function)+ ;
FunctionOrVariableTerm ::= declaration::ElementDecl (terms::Term)+ ;
ConditionalRule ::= condition::Term (thenRule::Rule)+ elseRule::Rule elseIfRule::ElseIf ;
Body ::= (declarations::Declaration)+ initialization::Initialization (rules::Rule)+ ;
--------------------metamodels::ATL.bgf--------------------
VariableDeclaration ::= PatternElement ;
 VariableDeclaration ::= RuleVariableDeclaration ;
 VariableDeclaration ::= TuplePart ;
 VariableDeclaration ::= Iterator ;
 VariableDeclaration ::= Parameter ;
 VariableDeclaration ::= id::String varName::String type::OclType initExpression::OclExpression letExp::LetExp baseExp::IterateExp (variableExp::VariableExp)+ ;
Attribute ::= name::String initExpression::OclExpression type::OclType ;
SequenceExp ::= (elements::OclExpression)+ ;
SequenceType ::= elementType::OclType ;
OperatorCallExp ::= (arguments::OclExpression)+ operationName::String ;
SetExp ::= (elements::OclExpression)+ ;
TupleTypeAttribute ::= type::OclType tupleType::TupleType name::String ;
CalledRule ::= (parameters::Parameter)+ isEntrypoint::Boolean isEndpoint::Boolean ;
LibraryRef ::= unit::Unit name::String ;
IfStat ::= condition::OclExpression (thenStatements::Statement)+ (elseStatements::Statement)+ ;
OrderedSetType ::= elementType::OclType ;
OclAnyType ::= name::String definitions::OclContextDefinition oclExpression::OclExpression operation::Operation mapType2::MapType attribute::Attribute mapType::MapType collectionTypes::CollectionType tupleTypeAttribute::TupleTypeAttribute variableDeclaration::VariableDeclaration ;
Query ::= body::OclExpression (helpers::Helper)+ ;
Binding ::= value::OclExpression outPatternElement::OutPatternElement propertyName::String isAssignment::Boolean ;
Unit ::= Library ;
 Unit ::= Query ;
 Unit ::= Module ;
 Unit ::= (libraries::LibraryRef)+ name::String ;
LetExp ::= variable::VariableDeclaration in_::OclExpression ;
IfExp ::= thenExpression::OclExpression condition::OclExpression elseExpression::OclExpression ;
MapElement ::= map::MapExp key::OclExpression value::OclExpression ;
MatchedRule ::= LazyMatchedRule ;
 MatchedRule ::= inPattern::InPattern (children::MatchedRule)+ superRule::MatchedRule isAbstract::Boolean isRefining::Boolean isNoDefault::Boolean ;
ForStat ::= iterator::Iterator collection::OclExpression (statements::Statement)+ ;
SetType ::= elementType::OclType ;
BindingStat ::= source::OclExpression propertyName::String isAssignment::Boolean value::OclExpression ;
OperationCallExp ::= OperatorCallExp ;
 OperationCallExp ::= CollectionOperationCallExp ;
 OperationCallExp ::= (arguments::OclExpression)+ operationName::String ;
ActionBlock ::= rule::Rule (statements::Statement)+ ;
MapType ::= valueType::OclType keyType::OclType ;
CollectionOperationCallExp ::= (arguments::OclExpression)+ operationName::String ;
BagExp ::= (elements::OclExpression)+ ;
OclType ::= CollectionType ;
 OclType ::= Primitive ;
 OclType ::= OclAnyType ;
 OclType ::= TupleType ;
 OclType ::= OclModelElement ;
 OclType ::= MapType ;
 OclType ::= name::String definitions::OclContextDefinition oclExpression::OclExpression operation::Operation mapType2::MapType attribute::Attribute mapType::MapType collectionTypes::CollectionType tupleTypeAttribute::TupleTypeAttribute variableDeclaration::VariableDeclaration ;
OclModel ::= name::String metamodel::OclModel (elements::OclModelElement)+ (model::OclModel)+ ;
OclFeatureDefinition ::= feature::OclFeature context_::OclContextDefinition ;
ForEachOutPatternElement ::= collection::OclExpression iterator::Iterator ;
Helper ::= query::Query library::Library definition::OclFeatureDefinition ;
Module ::= isRefining::Boolean (inModels::OclModel)+ (outModels::OclModel)+ (elements::ModuleElement)+ ;
InPattern ::= (elements::InPatternElement)+ rule::MatchedRule filter::OclExpression ;
OclContextDefinition ::= definition::OclFeatureDefinition context_::OclType ;
OrderedSetExp ::= (elements::OclExpression)+ ;
Operation ::= name::String (parameters::Parameter)+ returnType::OclType body::OclExpression ;
OclUndefinedExp ::= type::OclType ifExp3::IfExp appliedProperty::PropertyCallExp collection::CollectionExp letExp::LetExp loopExp::LoopExp parentOperation::OperationCallExp initializedVariable::VariableDeclaration ifExp2::IfExp owningOperation::Operation ifExp1::IfExp owningAttribute::Attribute ;
SimpleInPatternElement ::= mapsTo::OutPatternElement inPattern::InPattern (models::OclModel)+ ;
BagType ::= elementType::OclType ;
SuperExp ::= type::OclType ifExp3::IfExp appliedProperty::PropertyCallExp collection::CollectionExp letExp::LetExp loopExp::LoopExp parentOperation::OperationCallExp initializedVariable::VariableDeclaration ifExp2::IfExp owningOperation::Operation ifExp1::IfExp owningAttribute::Attribute ;
OutPattern ::= rule::Rule (elements::OutPatternElement)+ ;
--------------------metamodels::AWKPrograms.bgf--------------------
AWKProgram ::= name::String input::File output::File script::Script ;
Instruction ::= value::String i_action::Action ;
Rule ::= InitialRule ;
 Rule ::= FinalRule ;
 Rule ::= r_script::Script pattern::Pattern action::Action ;
File ::= name::String (records::Record)+ ;
Script ::= name::String (rules::Rule)+ ;
Field ::= value::String f_record::Record ;
FinalRule ::= r_script::Script pattern::Pattern action::Action ;
Record ::= r_file::File (fields::Field)+ ;
InitialRule ::= r_script::Script pattern::Pattern action::Action ;
--------------------metamodels::Agate.bgf--------------------
FunctionalRelation ::= necessaryObjectOF::OperationalFunction dependentObjectOF::OperationalFunction necessaryObjectOO::OrganizationObject dependentObjectOO::OrganizationObject necessaryObjectP::Package dependentObjectP::Package ;
TelecomOperator ::= contractType::String (interfaces::Interface)+ ;
Event ::= notice::String description::String sensitivity::Integer name::String comment::String isValidIn::OperationalContext isAssociatedWith::Stake ;
Threat ::= nature::String DCSSI::String (clarifies::Vulnerability)+ ;
Project ::= moi::Role moa::Role director::Role (defines::ProjectContextElement)+ (associatedISs::InformationSystem)+ ;
Procedure ::= (isCoveredByP::Package)+ (isCoveredByS::Service)+ ;
OperationalRequirement ::= criticality::Integer priority::String state::String (isCoveredBy::ArchitectureObject)+ (characterizes::ArchitectureObject)+ ;
Activity ::= (isCoveredByP::Package)+ (isisCoveredByS::Service)+ ;
Risk ::= disponibilityLevel::Integer integrityLevel::Integer confidencialityLevel::Integer isCoveredByCR::CountermeasureRequirement isCoveredByAO::ArchitectureObject isCoveredByMO::MADIOSObject isCoveredByDR::DomainRelation relatesToRO::ReusableObject relatesToCO::CommunicationObject isGeneratedBy::Threat ;
OperationalFunction ::= (composedOf::OperationalFunction)+ (isCoveredByP::Package)+ (isCoveredByS::Service)+ ;
Site ::= type::String localization::String (deployedObjects::ReusableObject)+ ;
Package ::= (subPackage::Package)+ (time::Role)+ (groupedObjects::ReusableObject)+ isCoveredByLC::LogicalComponent isCoveredByTC::TechnicalComponent (composedOf::Interface)+ ;
CountermeasureRequirement ::= type::String residualVulnerability::String ;
Traffic ::= sequence::String type::String interoperabilityLevel::Integer trafficClass::TrafficClass dataClass::DataClass receiverP::Package transmitterP::Package receiverIS::InformationSystem transmitterIS::InformationSystem receiverC::Center transmitterC::Center receiverTO::TelecomOperator transmitterTO::TelecomOperator receiverLC::LogicalComponent transmitterLC::LogicalComponent receiverTC::TechnicalComponent transmitterTC::TechnicalComponent ;
Standard ::= (caracterizeIC::InterfaceCharacteristic)+ (caracterizeTC::TechnicalComponent)+ (caracterizeLC::LogicalComponent)+ (caracterizeP::Package)+ (caracterizeR::Requirement)+ ;
OperationalContext ::= notice::String description::String sensitivity::Integer name::String comment::String isValidIn::OperationalContext isAssociatedWith::Stake ;
InformationSystem ::= nature::String version::String membershipCountry::String currentLocation::String startServiceDate::String stopServiceDate::String isGeneric::Boolean functionalDomain::String type::String (composedOf::InformationSystem)+ (associatedProjects::Project)+ (defines::Objective)+ (fulfills::Role)+ (fixes::OperationalContext)+ (usedBy::Actor)+ (interfaces::Interface)+ ;
Stake ::= type::String relativeDate::String unit::String date::String (events::Event)+ ;
Interconnection ::= linkType::String between::Interface ;
InformationFlow ::= priority::Integer frequency::String media::String continuity::String myContainer::String time::String availabilityRatio::String integrity::Integer interoperabilityLevel::Integer mediumFlow::String maximumFlow::String duration::String unitMediumFlow::String averageEvent::String maximumFlowOverOneDuration::String transports::Information receiverP::Package transmitterP::Package receiverOO::OrganizationObject transmitterOO::OrganizationObject receiverOF::OperationalFunction transmitterOF::OperationalFunction ;
Interface ::= (characteristics::InterfaceCharacteristic)+ (composedOf::Interface)+ ;
Objective ::= type::String priority::Integer indicator::String traceability::String ;
ServiceReferenceFrame ::= (composedOfRS::ReferenceService)+ (composedOfRLC::ReferenceLogicalComponent)+ ;
Dependence ::= type::String necessaryObjectS::Service dependentObjectS::Service necessaryObjectLC::LogicalComponent dependentObjectLC::LogicalComponent necessaryObjectP::Package dependentObjectP::Package necessaryObjectC::Center dependentObjectC::Center necessaryObjectIS::InformationSystem dependentObjectIS::InformationSystem ;
Service ::= Statut::String isASpecializationOf::ReferenceService isCoveredBy::LogicalComponent ;
LogicalComponent ::= type::String statut::String (composedOf::LogicalComponent)+ isASpecializationOf::ReferenceLogicalComponent (interfaces::Interface)+ isCoveredBy::TechnicalComponent ;
PerformanceRequirement ::= criticality::Integer priority::String state::String (isCoveredBy::ArchitectureObject)+ (characterizes::ArchitectureObject)+ ;
Process ::= (isCoveredByP::Package)+ (isCoveredByS::Service)+ ;
DataClass ::= notice::String description::String sensitivity::Integer name::String comment::String isValidIn::OperationalContext isAssociatedWith::Stake ;
Information ::= format::String storageSupport::String persistence::String DataType::DataClass ;
Operation ::= (isCoveredByP::Package)+ (isCoveredByS::Service)+ ;
TechnicalRequirement ::= criticality::Integer priority::String state::String (isCoveredBy::ArchitectureObject)+ (characterizes::ArchitectureObject)+ ;
InteroperabilityRequirement ::= criticality::Integer priority::String state::String (isCoveredBy::ArchitectureObject)+ (characterizes::ArchitectureObject)+ ;
SecurityRequirement ::= criticality::Integer priority::String state::String (isCoveredBy::ArchitectureObject)+ (characterizes::ArchitectureObject)+ ;
TechnicalComponent ::= type::String cots::Boolean editor::Boolean constructor::Boolean version::String technology::String definedExtension::String statut::String (composedOf::TechnicalComponent)+ isASpecializationOf::ReferenceTechnicalComponent (interfaces::Interface)+ ;
--------------------metamodels::Amble.bgf--------------------
Process ::= minId::Integer maxId::Integer instancesNb::Integer (states::State)+ (transitions::Transition)+ initial::Action (variables::Variable)+ (connectedTo::Network)+ ;
Variable ::= type::String initValue::String ;
Message ::= name::String ;
Action ::= name::String ;
Guard ::= name::String ;
Strans ::= guard::Guard action::Action source::State target::State ;
Program ::= (processes::Process)+ (networks::Network)+ ;
Channel ::= (messages::Message)+ source::Process target::Process ;
State ::= isInitial::Boolean (incoming::Transition)+ (outgoing::Transition)+ ;
--------------------metamodels::AntScripts.bgf--------------------
Project ::= (properties::Property)+ (targets::Target)+ defaultTarget::Target ;
Task ::= (attributes::Attribute)+ (elements::TaskElement)+ ;
Property ::= name::String value::String location::String refid::String resource::String file::String url::String environment::String classpath::String classpathref::String prefix::String ;
TaskParameter ::= (attributes::Attribute)+ (elements::TaskElement)+ ;
Target ::= if::String unless::String (tasks::Task)+ (depends::Target)+ ;
--------------------metamodels::AnyLogic.bgf--------------------
Font ::= name::String size::Integer style::Integer ;
Text ::= color::Integer text::String font::Font alignment::String ;
Frame ::= x::Integer y::Integer width::Integer height::Integer ;
Control ::= Button ;
 Control ::= width::Integer height::Integer asObject::Boolean embeddedIcon::Boolean fillColor::Integer textColor::Integer enableExpression::String actionCode::String labelText::String font::Font ;
Connector ::= sourceEmbeddedObject::EmbeddedObject sourceConnectableName::String targetEmbeddedObject::EmbeddedObject targetConnectableName::String (points::Point)+ ;
Parameter ::= name::String value::String ;
EmbeddedObject ::= presentation::EmbeddedObjectPresentation activeObjectClass::ActiveObjectClassRef genericParametersSubstitute::String (parameters::Parameter)+ ;
Model ::= engineVersion::Integer javaPackageName::String (activeObjectClasses::ActiveObjectClass)+ (experiments::Experiment)+ ;
SimulationExperiment ::= activeObjectClass::ActiveObjectClass clientAreaTopLeft::Point presentationTopGroupPersistent::Boolean iconTopGroupPersistent::Boolean frame::Frame commandLineArguments::String maximumMemory::Integer randomSeed::Boolean seedValue::Integer vmArgs::String absoluteAccuracy::Double relativeAccuracy::Double timeAccuracy::Double fixedTimeStep::Double (shapes::Shape)+ (controls::Control)+ (parameters::Parameter)+ enableAdaptiveFrameManagement::Boolean enableAntiAliasing::Boolean enablePanning::Boolean enableZoom::Boolean executionMode::String cpuRatio::String title::String framesPerSecond::String realTimeScale::String (uiProperties::Parameter)+ useCalendar::Boolean stopOption::String initialDate::String initialTime::String finalDate::String finalTime::String modelTimeUnit::String ;
EmbeddedObjectPresentation ::= asObject::Boolean embeddedIcon::Boolean rotation::Double ;
ActiveObjectClass ::= clientAreaTopLeft::Point presentationTopGroupPersistent::Boolean iconTopGroupPersistent::Boolean generic::Boolean genericParameters::String agent::Boolean environmentDefinesInitialLocation::Boolean (connectors::Connector)+ (embeddedObjects::EmbeddedObject)+ (shapes::Shape)+ ;
VisualModelElement ::= Connector ;
 VisualModelElement ::= EmbeddedObject ;
 VisualModelElement ::= Shape ;
 VisualModelElement ::= Control ;
 VisualModelElement ::= position::Point label::Point publicFlag::Boolean presentationFlag::Boolean showLabel::Boolean ;
ModelElement ::= VisualModelElement ;
 ModelElement ::= Model ;
 ModelElement ::= ActiveObjectClass ;
 ModelElement ::= Experiment ;
 ModelElement ::= id::Integer name::String excludeFromBuild::Boolean ;
Button ::= width::Integer height::Integer asObject::Boolean embeddedIcon::Boolean fillColor::Integer textColor::Integer enableExpression::String actionCode::String labelText::String font::Font ;
Shape ::= EmbeddedObjectPresentation ;
 Shape ::= Text ;
 Shape ::= asObject::Boolean embeddedIcon::Boolean rotation::Double ;
ActiveObjectClassRef ::= packageName::String className::String ;
Point ::= x::Integer y::Integer ;
--------------------metamodels::Architectural_Description.bgf--------------------
MainView ::= (isProjectedOnto::ArchitectureView)+ (consistsOf::ModelElement)+ ;
ArchitectureDescription ::= (selects::ArchitectureView)+ (organizedBy::ArchitectureView)+ ;
ArchitectureViewPoint ::= defines::MainView (views::ArchitectureView)+ ;
ArchitectureView ::= (selectedBy::ArchitectureDescription)+ (constituents::ModelElement)+ (conformsTo::ArchitectureViewPoint)+ ;
--------------------metamodels::AsmL.bgf--------------------
RangeSequence ::= minval::Term maxval::Term ;
AddRule ::= val::Term set::VarTerm ;
SkipRule ::= ownerBody::Body ;
Main ::= mainFile::AsmLFile (initialisations::Initially)+ ;
Class ::= name::String isAbstract::Boolean superClassName::String (varOrMethod::VarOrMethod)+ ;
MapType ::= ofType::Type toType::Type ;
ElseIf ::= condition::Term thenRule::Body elseRule::Body elseIfRule::ElseIf ;
NewInstance ::= name::String (parameters::Term)+ ;
ForallRule ::= (expressions::InWhereHolds)+ doRule::Body ;
ChooseRule ::= (expressions::InWhereHolds)+ ifChoosenRules::Body ifNotChoosenRule::Body ;
Structure ::= name::String (varOrCase::VarOrCase)+ superStructureName::String ;
VarDeclaration ::= isConstant::Boolean isDeclaration::Boolean isLocal::Boolean name::String type::Type ;
StepUntil ::= expression::Term ;
InWhereHolds ::= var::Term in::Term where::Term holds::Term ;
AnyIn ::= (expressions::InWhereHolds)+ ;
Initially ::= id::VarTerm val::Term ;
Case ::= name::String (variables::VarDeclaration)+ ;
UpdateMapRule ::= updateMap::VarTerm (parameters::Term)+ ;
StepUntilFixPoint ::= name::String ;
AsmLFile ::= (elements::AsmLElement)+ main::Main ;
MethodCallTerm ::= NewInstance ;
 MethodCallTerm ::= name::String (parameters::Term)+ ;
Parameter ::= name::String type::Type ownerMethod::Method ;
MapTerm ::= ofTerm::Term toTerm::Term separator::String ;
Enumeration ::= name::String (enumerators::Enumerator)+ ;
RangeSet ::= minval::Term maxval::Term ;
StepWhile ::= expression::Term ;
ForAllTerm ::= (expressions::InWhereHolds)+ ;
Operator ::= opName::String leftExp::Term rightExp::Term ;
Enumerator ::= name::String value::Term ;
ConditionalRule ::= ElseIf ;
 ConditionalRule ::= condition::Term thenRule::Body elseRule::Body elseIfRule::ElseIf ;
Method ::= isAbstract::Boolean isShared::Boolean isEntryPoint::Boolean isOverride::Boolean returnType::Type (parameters::Parameter)+ ;
RemoveRule ::= val::Term set::VarTerm ;
--------------------metamodels::Automaton.bgf--------------------
Transition ::= letter::String source::State target::State ;
State ::= name::String combination::State ;
FiniteAutomaton ::= (alphabet::String)+ (transitionSet::Transition)+ initialState::State (finalStateSet::State)+ (StateSet::State)+ ;
--------------------metamodels::BMM.bgf--------------------
Directive ::= BusinessRule ;
 Directive ::= BusinessPolicy ;
 Directive ::= (directiveGovernsCourseOfAction::CourseOfAction)+ (directiveIsSourceOfCourseOfAction::CourseOfAction)+ (directiveActAsRegulation::Regulation)+ (directiveSupportsAchievementOfDesiredResult::DesiredResult)+ (directiveGovernsUseOfAsset::Asset)+ ;
BusinessProcess ::= (businessProcessRealizesCourseOfAction::CourseOfAction)+ (businessProcessManagerAsset::Asset)+ (businessProcessDeliversOfeering::Offering)+ ;
Tactic ::= (tacticImplementsStrategy::Strategy)+ (tacticEffectsEnforcementLevelOfBusinessRule::BusinessRule)+ ;
CourseOfAction ::= Tactic ;
 CourseOfAction ::= (enablingCourseofActionEnablesEnabledCourseOfAction::CourseOfAction)+ (broaderCourseofActionIncludesMoreSpecificCourseOfAction::CourseOfAction)+ courseOfActionChanneIsEffortsTowardsDesiredResult::DesiredResult (courseOfActionDeployAsset::Asset)+ (courseOfActionDefiensOffering::Offering)+ ;
OrganizationUnit ::= (organizationUnitDefinesEnd::End)+ (organizationUnitEstablishesMeans::Means)+ (organizationUnitIsResponsibleForAsset::Asset)+ (organizationUnitIsResponsibleForLiability::Liability)+ (organizationUnitRecognizesInfluencer::Influencer)+ (organizationUnitActAsInfluencingOrganization::InfluencingOrganization)+ (organizationUnitMakesAssessment::Assessment)+ (organizationUnitIsResponsibleForBusinessProcess::BusinessProcess)+ ;
Offering ::= (offeringRequiresResource::Resource)+ (offeringUsesFixedAsset::FixedAsset)+ ;
MotivationElement ::= Assessment ;
 MotivationElement ::= End ;
 MotivationElement ::= Influencer ;
 MotivationElement ::= InfluencingOrganization ;
 MotivationElement ::= Means ;
 MotivationElement ::= PotentialImpact ;
 MotivationElement ::= AssessmentCategory ;
 MotivationElement ::= InfluencerCategory ;
 MotivationElement ::= OrganizationCategory ;
 MotivationElement ::= OrganizationUnit ;
 MotivationElement ::= BusinessProcess ;
 MotivationElement ::= Asset ;
 MotivationElement ::= Liability ;
 MotivationElement ::= name::String description::String ;
Strategy ::= (strategyIsAComponentOfThePlanForMission::Mission)+ (strategyDeterminesOrganizationUnit::OrganizationUnit)+ ;
BusinessPolicy ::= (businessPolicyIsBasisForBusinessRule::BusinessRule)+ (broaderBusinessPolicyIncludesMoreSpecificBusinessPolicy::BusinessPolicy)+ (businessPolicyGovernsBusinessProcess::BusinessProcess)+ ;
Assessment ::= (usingAssessmentUsesUsedAssessment::Assessment)+ (assessmentProvidesImpetusForDirective::Directive)+ (assessmentIdentifiesPotentialImpact::PotentialImpact)+ (assessmentJudgmentOfInfluencer::Influencer)+ ;
--------------------metamodels::BPEL.bgf--------------------
UnknownExtensibilityAttribute ::= (children::UnknownExtensibilityElement)+ ;
PortType ::= qName::QName undefined::EBoolean proxy::EBoolean resourceURI::EString (eOperations::Operation)+ ;
Condition ::= body::EJavaObject expressionLanguage::EString opaque::EBooleanObject ;
BPELImport ::= namespace::EString location::EString importType::EString ;
XSDRedefine ::= (annotations::XSDAnnotation)+ (contents::XSDRedefineContent)+ ;
Property ::= qName::QName name::EString type::EJavaObject ID::EString ;
XSDMinInclusiveFacet ::= value::Value inclusive::EBoolean exclusive::EBoolean ;
Definition ::= targetNamespace::EString location::EString qName::QName encoding::EString (eImports::WSDLImport)+ eTypes::Types (eMessages::Message)+ (ePortTypes::PortType)+ (eBindings::Binding)+ (eServices::Service)+ (eNamespaces::Namespace)+ ;
ExtensibilityElement ::= Property ;
 ExtensibilityElement ::= PropertyAlias ;
 ExtensibilityElement ::= messagepropertiesQuery ;
 ExtensibilityElement ::= PartnerLinkType ;
 ExtensibilityElement ::= Role ;
 ExtensibilityElement ::= Expression ;
 ExtensibilityElement ::= UnknownExtensibilityElement ;
 ExtensibilityElement ::= XSDSchemaExtensibilityElement ;
 ExtensibilityElement ::= required::EBoolean elementType::QName ;
Rethrow ::= name::EString suppressJoinFailure::EBooleanObject targets::Targets sources::Sources ;
OpaqueActivity ::= name::EString suppressJoinFailure::EBooleanObject targets::Targets sources::Sources ;
EventHandler ::= (alarm::OnAlarm)+ (events::OnEvent)+ ;
messagepropertiesQuery ::= queryLanguage::EString value::EString ;
FaultHandler ::= (catch::Catch)+ catchAll::CatchAll ;
Message ::= qName::QName undefined::EBoolean proxy::EBoolean resourceURI::EString (eParts::Part)+ ;
XSDElementDeclaration ::= nillable::EBoolean (disallowedSubstitutions::XSDDisallowedSubstitutions)+ (substitutionGroupExclusions::XSDSubstitutionGroupExclusions)+ abstract::EBoolean (lexicalFinal::XSDProhibitedSubstitutions)+ (block::XSDDisallowedSubstitutions)+ elementDeclarationReference::EBoolean circular::EBoolean annotation::XSDAnnotation anonymousTypeDefinition::XSDTypeDefinition typeDefinition::XSDTypeDefinition (identityConstraintDefinitions::XSDIdentityConstraintDefinition)+ resolvedElementDeclaration::XSDElementDeclaration substitutionGroupAffiliation::XSDElementDeclaration (substitutionGroup::XSDElementDeclaration)+ ;
BindingInput ::= name::EString eInput::Input ;
Binding ::= qName::QName undefined::EBoolean proxy::EBoolean resourceURI::EString ePortType::PortType (eBindingOperations::BindingOperation)+ ;
RepeatUntil ::= activity::Activity condition::Condition ;
Targets ::= (children::Target)+ joinCondition::Condition ;
Correlation ::= initiate::EString pattern::CorrelationPattern set::CorrelationSet ;
XSDModelGroup ::= compositor::XSDCompositor annotation::XSDAnnotation (contents::XSDParticle)+ (particles::XSDParticle)+ ;
FromPart ::= part::EString to::To ;
OnEvent ::= activity::Activity variable::Variable partnerLink::PartnerLink correlations::Correlations operation::Operation portType::PortType messageType::Message (fromPart::FromPart)+ correlationSets::CorrelationSets ;
PropertyAlias ::= messageType::EJavaObject part::EString propertyName::EJavaObject ID::EString wsdlPart::Part query::messagepropertiesQuery type::EJavaObject XSDElement::EJavaObject ;
Types ::= (eExtensibilityElements::ExtensibilityElement)+ ;
PartnerActivity ::= Invoke ;
 PartnerActivity ::= Receive ;
 PartnerActivity ::= Reply ;
 PartnerActivity ::= partnerLink::PartnerLink correlations::Correlations portType::PortType operation::Operation ;
ElseIf ::= condition::Condition activity::Activity ;
XSDComplexTypeDefinition ::= derivationMethod::XSDDerivationMethod (final::XSDComplexFinal)+ abstract::EBoolean contentTypeCategory::XSDContentTypeCategory (prohibitedSubstitutions::XSDProhibitedSubstitutions)+ (lexicalFinal::XSDComplexFinal)+ (block::XSDProhibitedSubstitutions)+ mixed::EBoolean contentAnnotation::XSDAnnotation baseTypeDefinition::XSDTypeDefinition content::XSDComplexTypeContent contentType::XSDComplexTypeContent (attributeUses::XSDAttributeUse)+ (attributeContents::XSDAttributeGroupContent)+ attributeWildcard::XSDWildcard attributeWildcardContent::XSDWildcard rootTypeDefinition::XSDTypeDefinition syntheticParticle::XSDParticle syntheticWildcard::XSDWildcard ;
Switch ::= (cases::Case)+ otherwise::Otherwise ;
BPELQuery ::= value::EString queryLanguage::EString ;
Case ::= activity::Activity condition::Condition ;
Process ::= name::EString targetNamespace::EString queryLanguage::EString expressionLanguage::EString suppressJoinFailure::EBooleanObject variableAccessSerializable::EBooleanObject partnerLinks::PartnerLinks variables::Variables activity::Activity faultHandlers::FaultHandler eventHandlers::EventHandler correlationSets::CorrelationSets (imports::BPELImport)+ extensions::Extensions exitOnStandardFault::EBooleanObject ;
XSDParticle ::= minOccurs::EInt maxOccurs::EInt content::XSDParticleContent term::XSDTerm ;
ExtensionActivity ::= name::EString suppressJoinFailure::EBooleanObject targets::Targets sources::Sources ;
Flow ::= (activities::Activity)+ links::Links completionCondition::CompletionCondition ;
ForEach ::= parallel::EBooleanObject counterName::Variable completionCondition::CompletionCondition iterator::Iterator activity::Activity ;
From ::= opaque::EBooleanObject endpointReference::EndpointReferenceRole literal::EString unsafeLiteral::EBooleanObject expression::Expression serviceRef::ServiceRef type::XSDTypeDefinition ;
Reply ::= faultName::QName variable::Variable (toPart::ToPart)+ ;
XSDSimpleTypeDefinition ::= variety::XSDVariety (final::XSDSimpleFinal)+ (lexicalFinal::XSDSimpleFinal)+ (validFacets::EString)+ (contents::XSDSimpleTypeDefinition)+ (facetContents::XSDConstrainingFacet)+ (facets::XSDConstrainingFacet)+ (memberTypeDefinitions::XSDSimpleTypeDefinition)+ (fundamentalFacets::XSDFundamentalFacet)+ baseTypeDefinition::XSDSimpleTypeDefinition primitiveTypeDefinition::XSDSimpleTypeDefinition itemTypeDefinition::XSDSimpleTypeDefinition rootTypeDefinition::XSDSimpleTypeDefinition minFacet::XSDMinFacet maxFacet::XSDMaxFacet maxInclusiveFacet::XSDMaxInclusiveFacet minInclusiveFacet::XSDMinInclusiveFacet minExclusiveFacet::XSDMinExclusiveFacet maxExclusiveFacet::XSDMaxExclusiveFacet lengthFacet::XSDLengthFacet whiteSpaceFacet::XSDWhiteSpaceFacet (enumerationFacets::XSDEnumerationFacet)+ (patternFacets::XSDPatternFacet)+ cardinalityFacet::XSDCardinalityFacet numericFacet::XSDNumericFacet maxLengthFacet::XSDMaxLengthFacet minLengthFacet::XSDMinLengthFacet totalDigitsFacet::XSDTotalDigitsFacet fractionDigitsFacet::XSDFractionDigitsFacet orderedFacet::XSDOrderedFacet boundedFacet::XSDBoundedFacet effectiveMaxFacet::XSDMaxFacet effectiveWhiteSpaceFacet::XSDWhiteSpaceFacet effectiveMaxLengthFacet::XSDMaxLengthFacet effectiveFractionDigitsFacet::XSDFractionDigitsFacet effectivePatternFacet::XSDPatternFacet effectiveEnumerationFacet::XSDEnumerationFacet effectiveTotalDigitsFacet::XSDTotalDigitsFacet effectiveMinLengthFacet::XSDMinLengthFacet effectiveLengthFacet::XSDLengthFacet effectiveMinFacet::XSDMinFacet (syntheticFacets::XSDFacet)+ ;
Operation ::= style::OperationType name::EString undefined::EBoolean proxy::EBoolean resourceURI::EString eInput::Input eOutput::Output (eFaults::Fault)+ (eParameterOrdering::Part)+ ;
BindingOutput ::= name::EString eOutput::Output ;
Throw ::= faultName::QName faultVariable::Variable ;
Receive ::= createInstance::EBooleanObject variable::Variable (fromPart::FromPart)+ ;
PartnerLink ::= name::EString myRole::Role partnerRole::Role PartnerLinkType::PartnerLinkType initializePartnerRole::EBooleanObject ;
Pick ::= createInstance::EBooleanObject (messages::OnMessage)+ (alarm::OnAlarm)+ ;
BooleanExpression ::= body::EJavaObject expressionLanguage::EString opaque::EBooleanObject ;
XSDAttributeGroupDefinition ::= attributeGroupDefinitionReference::EBoolean annotation::XSDAnnotation (contents::XSDAttributeGroupContent)+ (attributeUses::XSDAttributeUse)+ attributeWildcardContent::XSDWildcard attributeWildcard::XSDWildcard resolvedAttributeGroupDefinition::XSDAttributeGroupDefinition syntheticWildcard::XSDWildcard ;
ServiceRef ::= referenceScheme::EString value::EJavaObject ;
Exit ::= name::EString suppressJoinFailure::EBooleanObject targets::Targets sources::Sources ;
BindingFault ::= name::EString eFault::Fault ;
If ::= condition::Condition then::Then (elseIf::ElseIf)+ else::Else ;
Namespace ::= URI::EString prefix::EString ;
Source ::= Link::Link activity::Activity transitionCondition::Condition ;
Expression ::= BooleanExpression ;
 Expression ::= Condition ;
 Expression ::= Branches ;
 Expression ::= body::EJavaObject expressionLanguage::EString opaque::EBooleanObject ;
XSDAnnotation ::= (applicationInformation::XSDDOMElement)+ (userInformation::XSDDOMElement)+ (attributes::DOMAttr)+ ;
XSDIdentityConstraintDefinition ::= identityConstraintCategory::XSDIdentityConstraintCategory annotation::XSDAnnotation referencedKey::XSDIdentityConstraintDefinition selector::XSDXPathDefinition (fields::XSDXPathDefinition)+ ;
Scope ::= isolated::EBooleanObject faultHandlers::FaultHandler compensationHandler::CompensationHandler activity::Activity variables::Variables correlationSets::CorrelationSets eventHandlers::EventHandler partnerLinks::PartnerLinks terminationHandler::TerminationHandler ;
Target ::= Link::Link activity::Activity ;
XSDDiagnostic ::= severity::XSDDiagnosticSeverity message::EString locationURI::EString line::EInt column::EInt node::DOMNode annotationURI::EString key::EString (substitutions::EString)+ (components::XSDConcreteComponent)+ primaryComponent::XSDConcreteComponent ;
XSDNotationDeclaration ::= systemIdentifier::EString publicIdentifier::EString annotation::XSDAnnotation ;
Activity ::= PartnerActivity ;
 Activity ::= Exit ;
 Activity ::= Throw ;
 Activity ::= Wait ;
 Activity ::= Empty ;
 Activity ::= Sequence ;
 Activity ::= Switch ;
 Activity ::= While ;
 Activity ::= Pick ;
 Activity ::= Flow ;
 Activity ::= Assign ;
 Activity ::= Scope ;
 Activity ::= Compensate ;
 Activity ::= Rethrow ;
 Activity ::= ExtensionActivity ;
 Activity ::= OpaqueActivity ;
 Activity ::= ForEach ;
 Activity ::= RepeatUntil ;
 Activity ::= Validate ;
 Activity ::= If ;
 Activity ::= Reply ;
 Activity ::= name::EString suppressJoinFailure::EBooleanObject targets::Targets sources::Sources ;
ToPart ::= part::EString from::From ;
XSDImport ::= namespace::EString annotation::XSDAnnotation ;
Empty ::= name::EString suppressJoinFailure::EBooleanObject targets::Targets sources::Sources ;
Input ::= name::EString eMessage::Message ;
XSDSchema ::= document::XSDDOMDocument schemaLocation::EString targetNamespace::EString attributeFormDefault::XSDForm elementFormDefault::XSDForm (finalDefault::XSDProhibitedSubstitutions)+ (blockDefault::XSDDisallowedSubstitutions)+ version::EString (contents::XSDSchemaContent)+ (elementDeclarations::XSDElementDeclaration)+ (attributeDeclarations::XSDAttributeDeclaration)+ (attributeGroupDefinitions::XSDAttributeGroupDefinition)+ (typeDefinitions::XSDTypeDefinition)+ (modelGroupDefinitions::XSDModelGroupDefinition)+ (identityConstraintDefinitions::XSDIdentityConstraintDefinition)+ (notationDeclarations::XSDNotationDeclaration)+ (annotations::XSDAnnotation)+ (allDiagnostics::XSDDiagnostic)+ (referencingDirectives::XSDSchemaDirective)+ rootVersion::XSDSchema originalVersion::XSDSchema (incorporatedVersions::XSDSchema)+ schemaForSchema::XSDSchema ;
WSDLImport ::= namespaceURI::EString locationURI::EString eDefinition::Definition eSchema::XSDSchema ;
XSDWildcard ::= namespaceConstraintCategory::XSDNamespaceConstraintCategory (namespaceConstraint::EString)+ processContents::XSDProcessContents (lexicalNamespaceConstraint::EString)+ annotation::XSDAnnotation (annotations::XSDAnnotation)+ ;
Output ::= name::EString eMessage::Message ;
Port ::= name::EString eBinding::Binding ;
CorrelationSet ::= name::EString (properties::Property)+ ;
Extension ::= namespace::EString mustUnderstand::EBooleanObject ;
Variable ::= name::EString messageType::Message XSDElement::XSDElementDeclaration type::XSDTypeDefinition from::From ;
PartnerLinkType ::= name::EString ID::EString (role::Role)+ ;
Catch ::= faultName::QName faultVariable::Variable activity::Activity faultMessageType::Message faultElement::XSDElementDeclaration ;
To ::= From ;
 To ::= variable::Variable part::Part partnerLink::PartnerLink property::Property query::BPELQuery ;
Documentation ::= lang::EString source::EString value::EString ;
Link ::= name::EString (sources::Source)+ (targets::Target)+ ;
Invoke ::= outputVariable::Variable inputVariable::Variable compensationHandler::CompensationHandler faultHandler::FaultHandler (toPart::ToPart)+ (fromPart::FromPart)+ ;
Role ::= ID::EString name::EString portType::EJavaObject ;
Service ::= qName::QName undefined::EBoolean proxy::EBoolean resourceURI::EString (ePorts::Port)+ ;
Copy ::= to::To from::From keepSrcElementName::EBooleanObject ;
Wait ::= for::Expression until::Expression ;
XSDMaxExclusiveFacet ::= value::Value inclusive::EBoolean exclusive::EBoolean ;
XSDAttributeUse ::= required::EBoolean value::Value constraint::XSDConstraint use::XSDAttributeUseCategory lexicalValue::EString attributeDeclaration::XSDAttributeDeclaration content::XSDAttributeDeclaration ;
Part ::= name::EString elementName::QName typeName::QName typeDefinition::XSDTypeDefinition elementDeclaration::XSDElementDeclaration eMessage::Message ;
OnAlarm ::= activity::Activity for::Expression until::Expression repeatEvery::Expression ;
XSDModelGroupDefinition ::= modelGroupDefinitionReference::EBoolean annotation::XSDAnnotation modelGroup::XSDModelGroup resolvedModelGroupDefinition::XSDModelGroupDefinition ;
While ::= activity::Activity condition::Condition ;
Assign ::= (copy::Copy)+ validate::EBooleanObject ;
Iterator ::= finalCounterValue::Expression startCounterValue::Expression ;
OnMessage ::= variable::Variable activity::Activity portType::PortType partnerLink::PartnerLink correlations::Correlations operation::Operation (fromPart::FromPart)+ ;
XSDXPathDefinition ::= variety::XSDXPathVariety value::EString annotation::XSDAnnotation ;
XSDAttributeDeclaration ::= attributeDeclarationReference::EBoolean annotation::XSDAnnotation anonymousTypeDefinition::XSDSimpleTypeDefinition typeDefinition::XSDSimpleTypeDefinition resolvedAttributeDeclaration::XSDAttributeDeclaration ;
XSDMaxInclusiveFacet ::= value::Value inclusive::EBoolean exclusive::EBoolean ;
Fault ::= name::EString eMessage::Message ;
BindingOperation ::= name::EString eOperation::Operation eBindingInput::BindingInput eBindingOutput::BindingOutput (eBindingFaults::BindingFault)+ ;
XSDMinExclusiveFacet ::= value::Value inclusive::EBoolean exclusive::EBoolean ;
--------------------metamodels::BPMN.bgf--------------------
SubProcess ::= (eventHandlers::Activity)+ isTransaction::Boolean ;
Activity ::= SubProcess ;
 Activity ::= (orderedMessages::MessagingEdge)+ (incomingMessages::MessagingEdge)+ (outgoingMessages::MessagingEdge)+ (groups::Group)+ activityType::ActivityType eventHandlerFor::SubProcess lane::Lane looping::Boolean ;
SequenceEdge ::= graph::Graph isDefault::Boolean source::Vertex target::Vertex ;
Graph ::= Pool ;
 Graph ::= SubProcess ;
 Graph ::= (vertices::Vertex)+ (sequenceEdges::SequenceEdge)+ ;
TextAnnotation ::= (associations::Association)+ artifactsContainer::ArtifactsContainer ;
Pool ::= (lanes::Lane)+ bpmnDiagram::BpmnDiagram ;
Lane ::= (activities::Activity)+ pool::Pool ;
DataObject ::= (associations::Association)+ artifactsContainer::ArtifactsContainer ;
NamedBpmnObject ::= ArtifactsContainer ;
 NamedBpmnObject ::= Activity ;
 NamedBpmnObject ::= Artifact ;
 NamedBpmnObject ::= Lane ;
 NamedBpmnObject ::= MessagingEdge ;
 NamedBpmnObject ::= Pool ;
 NamedBpmnObject ::= SequenceEdge ;
 NamedBpmnObject ::= documentation::String name::String ncname::String ;
Vertex ::= Activity ;
 Vertex ::= (outgoingEdges::SequenceEdge)+ (incomingEdges::SequenceEdge)+ graph::Graph ;
BpmnDiagram ::= (pools::Pool)+ (messages::MessagingEdge)+ author::String title::String ;
Artifact ::= DataObject ;
 Artifact ::= Group ;
 Artifact ::= TextAnnotation ;
 Artifact ::= (associations::Association)+ artifactsContainer::ArtifactsContainer ;
MessagingEdge ::= bpmnDiagram::BpmnDiagram source::Activity target::Activity ;
Association ::= direction::DirectionType source::Artifact target::IdentifiableNode ;
--------------------metamodels::Book.bgf--------------------
Chapter ::= title::String nbPages::Integer author::String book::Book ;
Book ::= title::String (chapters::Chapter)+ ;
--------------------metamodels::Bossa.bgf--------------------
ForwardMoveStmt ::= isHead::Boolean isTail::Boolean moveExpr::MoveExpr ;
NonProcType ::= system::Boolean struct::Boolean id::Boolean nonProcType::String ;
Unop_Expression ::= unop::Unop expr::Expression ;
SwitchStmt ::= locExpr::LocExpr (composantOfSwitchStmt::ComposantOfSwitchStmt)+ ;
Timer_ProcessVarDecl ::= id::String processDef::ProcessDef schedulerDef::SchedulerDef ;
HandlerDef ::= id::String scheduler::Scheduler (onHandlerDef::OnHandlerDef)+ ;
OnHandlerDef ::= (eventName::EventName)+ seqStmt::SeqStmt ;
ClassNameStorage ::= id::String className::ClassName storage::Storage ;
AssignStmt ::= locExpr::LocExpr assignUnop::AssignUnop assignBinop::AssignBinop expr::Expression ;
ProcParam ::= id::String process::Boolean scheduler::Boolean ;
OrderDef ::= keyCritDecl::KeyCritDecls critDecls::CritDecls abstractSchedulerDecl::AbstractSchedulerDecl ;
LocExpr ::= stateName::String (id::String)+ ;
In_Expression ::= in::Boolean expr::Expression classState::ClassState ;
Timer_ValDecl ::= id::String abstractSchedulerDecl::AbstractSchedulerDecl ;
TypeExpr ::= id::String bossaTypeExpr::BossaTypeExpr ;
FunctionDef ::= (composantOfInterFunc::ComposantOfInterFunc)+ scheduler::Scheduler ;
ForEachDecreasingForStmt ::= id::String seqStmt::SeqStmt ;
InterfaceDef ::= (composantOfInterFunc::ComposantOfInterFunc)+ scheduler::Scheduler ;
AssignUnop ::= doublePlus::Boolean doubleMoins::Boolean ;
FunDecl ::= parameterTypes::ParameterType nonProcType::NonProcType abstractSchedulerDecl::AbstractSchedulerDecl ;
ComposantOfSwitchStmt ::= (classState::ClassState)+ seqStmt::SeqStmt ;
ForeachForStmt ::= id::String isIn::Boolean (classState::ClassState)+ seqStmt::SeqStmt ;
SeqStmt ::= (valDef::ValDef)+ (stmt::Statment)+ ;
EventName ::= eventNameLeft::String eventNameRight::String ;
IfStmt ::= expr::Expression seqStmt::SeqStmt ;
StateVisibility ::= public::Boolean private::Boolean ;
ProcessVarDecl ::= Timer_ProcessVarDecl ;
 ProcessVarDecl ::= System_ProcessVarDecl ;
 ProcessVarDecl ::= Normal_ProcessVarDecl ;
 ProcessVarDecl ::= id::String processDef::ProcessDef schedulerDef::SchedulerDef ;
TraceDef ::= traceEvent::TraceEvent traceExpr::TraceExpr traceTest::TraceTest abstractSchedulerDecl::AbstractSchedulerDecl ;
ExpId_Expression ::= id::String expr::Expression ;
AdmissionDef ::= (valDef::ValDef)+ admCrit::AdmCrit attachDetach::AttachDetach abstractSchedulerDecl::AbstractSchedulerDecl ;
EnumRange ::= enumDef::EnumDef rangeDef::RangeDef ;
Critop ::= lowest::Boolean highest::Boolean ;
Unop ::= plus::Boolean minus::Boolean excl::Boolean tild::Boolean ;
AssignBinop ::= affect::Boolean plusEqual::Boolean moinsEqual::Boolean starEqual::Boolean slashEqual::Boolean percentageEqual::Boolean andEqual::Boolean orEqual::Boolean doubleLtEqual::Boolean doubleGtEqual::Boolean ;
ClassState ::= state::Boolean className::ClassName ;
AttachDetach ::= procParam1::ProcParam procParam2::ProcParam seqStmt1::SeqStmt seqStmt2::SeqStmt ;
ComposantOfInterFunc ::= id::String typeOrVoid::TypeOrVoid (paramVarDecl::ParamVarDecl)+ seqStmt::SeqStmt ;
StateDef ::= (classNameStorage::ClassNameStorage)+ abstractSchedulerDecl::AbstractSchedulerDecl ;
System_ProcessVarDecl ::= system::Boolean typeExpr::TypeExpr ;
TypeOrVoid ::= isVoid::Boolean typeExpr::TypeExpr ;
Binop_Expression ::= id_Expression::Id_Expression compo_Binop_Expression::Compo_Binop_Expression ;
Compo_Binop_Expression ::= binop::Binop id_Expression::Id_Expression ;
Queue_Storage ::= stateVisibility::StateVisibility queueType::QueueType ;
ValDecl ::= Normal_ValDecl ;
 ValDecl ::= System_ValDecl ;
 ValDecl ::= Timer_ValDecl ;
 ValDecl ::= id::String abstractSchedulerDecl::AbstractSchedulerDecl ;
Binop ::= plus::Boolean minus::Boolean star::Boolean slash::Boolean percentage::Boolean doubleAnd::Boolean doubleVerticalBar::Boolean and::Boolean eq::Boolean ne::Boolean lt::Boolean gt::Boolean le::Boolean ge::Boolean doubleLt::Boolean doubleGt::Boolean ;
ForEachIncreasingForStmt ::= id::String seqStmt::SeqStmt ;
ParamVarDecl ::= id::String typeExpr::TypeExpr ;
AdmCrit ::= (paramVarDecl::ParamVarDecl)+ expr::Expression ;
ValDef ::= id::String typeExpr::TypeExpr expr::Expression ;
ConstDef ::= id::String expr::Expression bossaTypeExpr::BossaTypeExpr ;
--------------------metamodels::BusinessEntityModel.bgf--------------------
OrganisationalUnit ::= characterisedby::BusinessEntityPropertySet typ::Class (task::Task)+ (fille::BusinessEntity)+ ;
ArtifactRole ::= characterisedby::BusinessEntityPropertySet typ::Class (task::Task)+ (fille::BusinessEntity)+ ;
Task ::= (associatedWith::BusinessRole)+ (needs::ArtifactRole)+ ;
--------------------metamodels::BusinessProcessModel.bgf--------------------
MutliTask ::= (containsTask::Task)+ (containsFlow::Flow)+ realizes::BusinessProcess ;
CoumpoundTask ::= MutliTask ;
 CoumpoundTask ::= (containsTask::Task)+ (containsFlow::Flow)+ realizes::BusinessProcess ;
Input ::= sink::DataFlow source::DataFlow ;
--------------------metamodels::CADM.bgf--------------------
InfoExchRequirement ::= (isCitedIn::Document)+ (isSpecifiedInInfos::InformationAsset)+ ;
Standard ::= (isAssociatedWith::Agreement)+ (isCitedBy::Agreement)+ (appliesTo::InformationAsset)+ (implements::Guidance)+ ;
Element ::= Architecture ;
 Element ::= Organization ;
 Element ::= Guidance ;
 Element ::= Document ;
 Element ::= Action ;
 Element ::= Agreement ;
 Element ::= Task ;
 Element ::= InformationAsset ;
 Element ::= Network ;
 Element ::= MissionArea ;
 Element ::= System ;
 Element ::= Mission ;
 Element ::= FunctionalArea ;
 Element ::= Capability ;
 Element ::= MaterielItem ;
 Element ::= Facility ;
 Element ::= name::String content::String ;
Document ::= (isAssociatedWith::Document)+ describesArchitecture::Architecture (describesSystem::System)+ (isSpecifiedUsing::Agreement)+ (cites::InformationAsset)+ ;
SoftwareItem ::= (uses::EquipmentType)+ isSourceFor::Organization ;
ActivityModel ::= (isAssociatedWith::InformationAsset)+ ;
Guidance ::= Requirement ;
 Guidance ::= (isAssocitatedWith::Guidance)+ (isImplementedBy::Architecture)+ (isSpecifiedIn::Document)+ (providesAuthorityFor::InformationAsset)+ (defines::MissionArea)+ ;
MaterielItem ::= EquipmentType ;
 MaterielItem ::= SoftwareItem ;
 MaterielItem ::= (establishedAs::MaterielItem)+ (conformsTo::Standard)+ (performsTo::Capability)+ ;
Action ::= mayBeA::Task (isAssociatedWith::Action)+ (involvedIn::ActivityModel)+ ;
Organization ::= (isAssociatedWith::Organization)+ (softwareItems::SoftwareItem)+ (owns::InformationAsset)+ (includes::Node)+ (performsTo::Capability)+ (hasRequirement::Requirement)+ (hasMissionArea::MissionArea)+ (associatedSystems::System)+ (isProponentOf::FunctionalArea)+ ;
Architecture ::= (isAssociatedWith::Architecture)+ (missions::Mission)+ (isFocusOf::FunctionalArea)+ (uses::Organization)+ ;
ExchangeNeedLineReq ::= (mayBeSatifiedBy::Architecture)+ (isSpecifiedUsing::InformationAsset)+ (specifiesNeedFor::MaterielItem)+ (cites::MissionArea)+ ;
FunctionalArea ::= (isPartOf::FunctionalArea)+ (supports::System)+ (cites::MissionArea)+ ;
System ::= (isAssociatedWith::System)+ (citedIn::Architecture)+ (compliesWith::Standard)+ (isDescribedBy::InformationAsset)+ (uses::MaterielItem)+ (operatesUsing::Network)+ (performsTo::Capability)+ (associatedOrganization::Organization)+ (appliesTo::Requirement)+ ;
Network ::= (isAssociatedWith::Network)+ (isDescribedIn::Document)+ (compliesWith::Standard)+ (has::Organization)+ (performsTo::Capability)+ ;
Mission ::= isCitedBy::Architecture (requires::Task)+ (isAssigned::Organization)+ (mayCite::FunctionalArea)+ ;
Agreement ::= Standard ;
 Agreement ::= (isAssociatedWith::Agreement)+ (isCitedBy::Agreement)+ (appliesTo::InformationAsset)+ (implements::Guidance)+ ;
EquipmentType ::= (establishedAs::MaterielItem)+ (conformsTo::Standard)+ (performsTo::Capability)+ ;
ConceptualDataModel ::= (isAssociatedWith::InformationAsset)+ ;
Task ::= (isAssociatedWith::Task)+ (isPerformedBy::Node)+ (isPerformedUsing::System)+ (specifies::Requirement)+ ;
Facility ::= name::String content::String ;
Requirement ::= InfoExchRequirement ;
 Requirement ::= ExchangeNeedLineReq ;
 Requirement ::= (mayBeSatifiedBy::Architecture)+ (isSpecifiedUsing::InformationAsset)+ (specifiesNeedFor::MaterielItem)+ (cites::MissionArea)+ ;
Node ::= (isAssociatedWith::Node)+ (describes::Architecture)+ (hasServicesProvidedBy::Facility)+ (involvedIn::ActivityModel)+ (uses::InformationAsset)+ (involves::InfoExchRequirement)+ (isParticipedInBy::Network)+ (supports::System)+ ;
--------------------metamodels::CDE.bgf--------------------
ICdeMemberExe ::= executionPerformance::String resourceNeeded::String executionDetails::String ;
--------------------metamodels::CFG.bgf--------------------
ConditionalNode ::= trueConditionNode::Node falseConditionNode::Node ;
Node ::= inNode::Node outNode::Node ;
--------------------metamodels::COBOL.bgf--------------------
COBOLSimpleType ::= usageValue::COBOLUsageValue pictureString::String usage::Boolean ;
COBOLSourceText ::= source::String fileName::String ;
COBOL66Element ::= name::String end::COBOLElement start::COBOLElement ;
COBOL88Element ::= name::String (has::COBOL88ElementValue)+ ;
COBOLElement ::= COBOLRedefiningElement ;
 COBOLElement ::= level::String refined::Boolean name::String sharedType::COBOLClassifier group::COBOLComposedType (initial::COBOLElementInitialValue)+ (contains::COBOL88Element)+ source::COBOLSourceText array::COBOLFixedLengthArray ;
COBOL88ElementValue ::= lowerLimit::String upperLimit::String range::Boolean ;
COBOLElementInitialValue ::= initVal::String valueKind::COBOLInitialValueKind ;
COBOLVariableLengthArray ::= minUpper::Integer dependingOn::COBOLElement ;
COBOLClassifier ::= COBOLSimpleType ;
 COBOLClassifier ::= COBOLComposedType ;
 COBOLClassifier ::= typeded::Boolean name::String (typedElements::COBOLElement)+ ;
--------------------metamodels::CORBAComponent.bgf--------------------
UsesDef ::= multiple::Boolean uses::InterfaceDef ud_home::ComponentDef ;
PrimaryKeyDef ::= pkd_home::HomeDef type::ValueDef ;
ComponentDef ::= isBasic::Boolean (facets::ProvidesDef)+ (receptacles::UsesDef)+ (supports::InterfaceDef)+ (emits::EmitsDef)+ (publishes::PublishesDef)+ (consumes::ConsumesDef)+ ;
HomeDef ::= manages::ComponentDef (factories::FactoryDef)+ (finders::FinderDef)+ key::PrimaryKeyDef ;
ProvidesDef ::= provides::InterfaceDef prd_home::ComponentDef ;
--------------------metamodels::CPL.bgf--------------------
Reject ::= status::String reason::String ;
NoAnswer ::= contents::Node ;
CPL ::= (subActions::SubAction)+ outgoing::Outgoing incoming::Incoming ;
Busy ::= contents::Node ;
SwitchedPriority ::= less::String greater::String equal::String ;
Location ::= url::String priority::String clear::String ;
Otherwise ::= contents::Node ;
Proxy ::= timeout::String recurse::String ordering::String busy::Busy noAnswer::NoAnswer redirection::Redirection failure::Failure default::Default ;
Redirection ::= contents::Node ;
Outgoing ::= contents::Node ;
Failure ::= contents::Node ;
AddressSwitch ::= field::String subField::String (addresses::SwitchedAddress)+ ;
NotPresent ::= contents::Node ;
Incoming ::= contents::Node ;
StringSwitch ::= field::String (strings::SwitchedString)+ ;
SwitchedString ::= is::String contains::String ;
TimeSwitch ::= tzid::String tzurl::String (times::SwitchedTime)+ ;
Default ::= contents::Node ;
SwitchedAddress ::= is::String contains::String subDomainOf::String ;
SwitchedTime ::= dtstart::String dtend::String duration::String freq::String until::String count::String interval::String bySecond::String byMinute::String byHour::String byDay::String byMonthDay::String byYearDay::String byWeekNo::String byMonth::String wkst::String bySetPos::String ;
--------------------metamodels::CPR.bgf--------------------
Objective ::= objective_plan::Plan (criterias::EvaluationCriteria)+ ;
Plan ::= (sub_plans::Plan)+ super_plan::Plan (objectives::Objective)+ (actions::Action)+ ;
Action ::= action_plan::Plan (sub_actions::Action)+ super_action::Action actor::Actor (resources::Resource)+ (timeSpecs::TimeSpec)+ ;
Actor ::= actor_action::Action (sub_actors::Actor)+ super_actor::Actor ;
--------------------metamodels::CSM.bgf--------------------
Scenarion ::= Step ;
 Scenarion ::= (step::Step)+ (root::Start)+ ;
CSM ::= (step::Step)+ (generalResource::GeneralResource)+ (scenarion::Scenarion)+ ;
Step ::= Start ;
 Step ::= End ;
 Step ::= ResourceAcquire ;
 Step ::= ResourceRelease ;
 Step ::= postPath::PathConnection prePath::PathConnection activeResource::ActiveResource ;
End ::= postPath::PathConnection prePath::PathConnection activeResource::ActiveResource ;
Seqence ::= message::Message (post::Step)+ (pre::Step)+ ;
Join ::= message::Message (post::Step)+ (pre::Step)+ ;
Merge ::= message::Message (post::Step)+ (pre::Step)+ ;
GeneralResource ::= ActiveResource ;
 GeneralResource ::= PassiveResource ;
 GeneralResource ::= (resourceAcquire::ResourceAcquire)+ (resourceRelease::ResourceRelease)+ ;
PathConnection ::= Join ;
 PathConnection ::= Fork ;
 PathConnection ::= Merge ;
 PathConnection ::= Branch ;
 PathConnection ::= Seqence ;
 PathConnection ::= message::Message (post::Step)+ (pre::Step)+ ;
Branch ::= message::Message (post::Step)+ (pre::Step)+ ;
Fork ::= message::Message (post::Step)+ (pre::Step)+ ;
--------------------metamodels::CWMCore.bgf--------------------
Subsystem ::= (features::Feature)+ (importedElements::ModelElement)+ ;
Constraint ::= body::BooleanExpression (constrainedElements::ModelElement)+ ;
Attribute ::= type::Classifier ;
Dependency ::= kind::String (clients::ModelElement)+ (suppliers::ModelElement)+ ;
Model ::= (importedElements::ModelElement)+ ;
Class ::= (features::Feature)+ ;
Datatype ::= (features::Feature)+ ;
ModelElement ::= Dependency ;
 ModelElement ::= Constraint ;
 ModelElement ::= Feature ;
 ModelElement ::= NameSpace ;
 ModelElement ::= name::String visibility::VisibilityKind (contraints::Constraint)+ (clientDependencies::Dependency)+ (supplierDependencies::Dependency)+ namespace::NameSpace (importers::Package)+ ;
--------------------metamodels::CWMRelationalData.bgf--------------------
Table ::= isTemporary::Boolean temporaryScope::String isSystem::Boolean (table_constraints::CheckConstraint)+ ;
SQLSimpleType ::= characterMaximumLength::Integer characterOctetLength::Integer numericPrecision::Integer numericPrecisionRadix::Integer numericScale::Integer dateTimePrecision::Integer (sqlDistinctTypes::SQLDistinctType)+ ;
Column ::= precision::Integer scale::Integer isNullable::Boolean length::Integer collectionName::String characterSetName::String (column_constraints::CheckConstraint)+ type::SQLDataType owner::ColumnSet optionScopeColumnSet::NamedColumnSet ;
View ::= isReadOnly::Boolean checkOption::Boolean queryExpression::QueryExpression ;
CheckConstraint ::= (constraintElements::Column)+ (constrainedElements::Table)+ ;
SQLDistinctType ::= length::Integer precision::Integer scale::Integer sqlSimpleType::SQLSimpleType ;
NamedColumnSet ::= Table ;
 NamedColumnSet ::= View ;
 NamedColumnSet ::= optionScopeColumn::Column (triggers::Trigger)+ ;
SQLDataType ::= SQLDistinctType ;
 SQLDataType ::= SQLSimpleType ;
 SQLDataType ::= typeNumber::Integer (structuralFeatures::Column)+ ;
--------------------metamodels::Class.bgf--------------------
Attribute ::= multiValued::Boolean type::Classifier owner::Class ;
Class ::= (super::Class)+ (attr::Attribute)+ isAbstract::Boolean ;
--------------------metamodels::ChocoModel.bgf--------------------
IntExp ::= op::OpConstraint left::Expression right::Expression ;
PostConstraint ::= op::OpConstraint constraint::ConstraintDef ;
Constraint ::= op::OpConstraint left::Expression right::Expression ;
ChocoProblem ::= name::String (elements::Element)+ ;
ConstraintDef ::= op::OpConstraint left::Expression right::Expression ;
Package ::= name::String (import::Import)+ problem::ChocoProblem ;
Domain ::= lower::Integer upper::Integer ;
--------------------metamodels::ClassicModels.bgf--------------------
OrderDetail ::= order::Order product::Product quantityOrdered::Integer priceEach::Double ;
Product ::= productLine::ProductLine code::String name::String scale::String vendor::String description::String quantityInStock::Integer buyPrice::Double MSRP::Double ;
Order ::= customer::Customer (orderDetails::OrderDetail)+ number::Integer date::Date requiredDate::Date shippedDate::Date status::String comments::String ;
Customer ::= customerOwner::ClassicModels number::Integer (orders::Order)+ (payments::Payment)+ salesRepEmployee::Employee name::String contactLastName::String contactFirstName::String creditLimit::Double ;
Employee ::= office::Office number::Integer (employeeCustomers::Customer)+ lastName::String firstName::String extension::String email::String reportsTo::Employee jobTitle::String ;
Date ::= year::Integer month::Integer day::Integer ;
Office ::= officeOwner::ClassicModels code::String (employees::Employee)+ territory::String ;
ClassicModels ::= (offices::Office)+ (productLines::ProductLine)+ (customers::Customer)+ ;
Payment ::= customer::Customer checkNumber::String date::Date amount::Double ;
ProductLine ::= productLineOwner::ClassicModels (products::Product)+ name::String textDescription::String htmlDescription::String ;
--------------------metamodels::Cocus.owl.bgf--------------------
Committee ::= recieve::Document (create::Thing)+ submit::Document ;
PaperFullVersion ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Full_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Conference ::= hasConferenceMember::ConferenceMember paperAssignmentFinalizedBy::Administrator reviewCriteriaEnteredBy::Administrator paperAssignmentToolsRunBy::Administrator virtualMeetingEnabledBy::Administrator hardcopyMailingManifestsPrintedBy::Administrator detailsEnteredBy::Administrator reviewerBiddingStartedBy::Administrator date::date reviewsPerPaper::Integer logoURL::anyURI acceptsHardcopySubmissions::Boolean siteURL::anyURI ;
Document ::= Review ;
 Document ::= Paper ;
 Document ::= Email ;
 Document ::= Submission ;
 Document ::= Template ;
 Document ::= recieved_by::User used_by::Person submited__by::User ;
Template ::= recieved_by::User used_by::Person submited__by::User ;
Event ::= Workshop ;
 Event ::= Symposium ;
 Event ::= Conference ;
 Event ::= conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator ;
Registration ::= (has_result::Thing)+ sent_by::Person ;
Corresponding_Author ::= submitPaper::Paper writePaper::Paper ;
Chairman ::= ConferenceChair ;
 Chairman ::= AssociatedChair ;
 Chairman ::= ProgramCommitteeChair ;
 Chairman ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person send::Activity added_by::Person hasConflictOfInterest::Document email::String memberOfConference::Conference ;
Person ::= ConferenceMember ;
 Person ::= ExternalReviewer ;
 Person ::= User ;
 Person ::= ProgramCommitteeMember ;
 Person ::= Chairman ;
 Person ::= Administrator ;
 Person ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person send::Activity added_by::Person hasConflictOfInterest::Document email::String ;
Symposium ::= conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator ;
ProgramCommitteeMember ::= ProgramCommitteeChair ;
 ProgramCommitteeMember ::= memberOfProgramCommittee::ProgramCommittee maxPapers::Integer addedBy::Administrator ;
Activity ::= Event_Creation ;
 Activity ::= Request ;
 Activity ::= Event_Approval ;
 Activity ::= Registration ;
 Activity ::= (has_result::Thing)+ sent_by::Person ;
PaperAbstract ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Administrator ::= approve::Event assign::Role finalizePaperAssignment::Conference runPaperAssignmentTools::Conference enableVirtualMeeting::Conference startReviewerBidding::Conference assignReviewer::Reviewer rejectPaper::Paper enterConferenceDetails::Conference printHardcopyMailingManifests::Conference setMaxPapers::ProgramCommitteeMember enterReviewCriteria::Conference acceptPaper::Paper addProgramCommitteeMember::ProgramCommitteeMember ;
AuthorNotReviewer ::= submitPaper::Paper writePaper::Paper ;
Meta-Reviewer ::= assignedByAdministrator::Administrator adjustBid::Bid readPaper::Paper hasBeenAssigned::Paper writeReview::Review assignExternalReviewer::ExternalReviewer ;
Submission ::= recieved_by::User used_by::Person submited__by::User ;
Paper ::= PaperAbstract ;
 Paper ::= PaperFullVersion ;
 Paper ::= Abstract ;
 Paper ::= Invited_Paper ;
 Paper ::= Short_Paper ;
 Paper ::= Full_Paper ;
 Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
User ::= Committee ;
 User ::= Administrator ;
 User ::= Reviewer ;
 User ::= Author ;
 User ::= recieve::Document (create::Thing)+ submit::Document ;
Author ::= AuthorNotReviewer ;
 Author ::= Co-author ;
 Author ::= Corresponding_Author ;
 Author ::= submitPaper::Paper writePaper::Paper ;
Short_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Event_Approval ::= (has_result::Thing)+ sent_by::Person ;
Invited_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Workshop ::= conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator ;
Reviewer ::= Meta-Reviewer ;
 Reviewer ::= assignedByAdministrator::Administrator adjustBid::Bid readPaper::Paper hasBeenAssigned::Paper writeReview::Review assignExternalReviewer::ExternalReviewer ;
Event_Creation ::= (has_result::Thing)+ sent_by::Person ;
Abstract ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
--------------------metamodels::DSL.bgf--------------------
Relationship ::= isEmbedding::PrimitiveTypes/Boolean roles::Role ;
ValueProperty ::= owner::Classifier type::Type ;
Role ::= min::PrimitiveTypes/Integer max::PrimitiveTypes/Integer isUnbounded::PrimitiveTypes/Boolean accepts::PrimitiveTypes/String isOrdered::PrimitiveTypes/Boolean isNavigableFrom::PrimitiveTypes/Boolean isPropertyGenerator::PrimitiveTypes/Boolean source::Classifier type::Classifier relation::Relationship ;
DomainModel ::= (classifiers::Classifier)+ (types::Type)+ ;
--------------------metamodels::CompanyStructure.bgf--------------------
CorporateHQ ::= (manages::Store)+ corporateHQBackOffice::CorporateHQBackOffice ;
Company ::= corporateHQ::CorporateHQ (Store::Store)+ ;
Store ::= storeBackOffice::StoreBackOffice (employee::Employee)+ (cashRegister::CashRegister)+ ;
--------------------metamodels::ComponentUML.bgf--------------------
AssociationEnd ::= type::Entity association::Association ;
Entity ::= (methods::Method)+ (attributes::Attribute)+ (associationEnds::AssociationEnd)+ ;
--------------------metamodels::Conference.owl.bgf--------------------
Tutorial ::= has_a_track-workshop-tutorial_topic::Topic is_part_of_conference_volumes::Conference_volume has_a_track-workshop-tutorial_chair::Track-workshop_chair ;
Conference_document ::= Conference_contribution ;
 Conference_document ::= Information_for_participants ;
 Conference_document ::= Call_for_paper ;
 Conference_document ::= Conference_announcement ;
 Conference_document ::= Call_for_participation ;
 Conference_document ::= Conference_www ;
 Conference_document ::= Review ;
 Conference_document ::= has_authors::Person has_a_date_of_issue::date ;
Conference_volume ::= has_parts::Conference_part has_workshops::Workshop has_tracks::Track has_tutorials::Tutorial has_a_commtitee::Committee has_a_steering_committee::Steering_committee has_an_organizing_committee::Organizing_committee has_important_dates::Important_dates has_contributions::Conference_contribution has_a_location::String has_a_program_committee::Program_committee ;
PaperFullVersion ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Conference_proceedings ::= has_an_ISBN::String has_a_publisher::Publisher has_a_volume::Integer ;
Conference ::= Conference_volume ;
 Conference ::= hasConferenceMember::ConferenceMember paperAssignmentFinalizedBy::Administrator reviewCriteriaEnteredBy::Administrator paperAssignmentToolsRunBy::Administrator virtualMeetingEnabledBy::Administrator hardcopyMailingManifestsPrintedBy::Administrator detailsEnteredBy::Administrator reviewerBiddingStartedBy::Administrator date::date reviewsPerPaper::Integer logoURL::anyURI acceptsHardcopySubmissions::Boolean siteURL::anyURI ;
Document ::= Email ;
 Document ::= Submission ;
 Document ::= Template ;
 Document ::= Paper ;
 Document ::= Review ;
 Document ::= recieved_by::User used_by::Person submited__by::User ;
Event ::= Symposium ;
 Event ::= Conference ;
 Event ::= Workshop ;
 Event ::= conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator ;
Review ::= Meta-Review ;
 Review ::= writtenBy::Reviewer reviews::Reviewed_contribution ;
Person ::= ConferenceMember ;
 Person ::= ExternalReviewer ;
 Person ::= User ;
 Person ::= Conference_participant ;
 Person ::= Conference_contributor ;
 Person ::= Committee_member ;
 Person ::= Conference_applicant ;
 Person ::= Track-workshop_chair ;
 Person ::= ProgramCommitteeMember ;
 Person ::= Chairman ;
 Person ::= Administrator ;
 Person ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person send::Activity added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String hasConflictOfInterest::Document email::String ;
ProgramCommitteeMember ::= ProgramCommitteeChair ;
 ProgramCommitteeMember ::= memberOfProgramCommittee::ProgramCommittee maxPapers::Integer addedBy::Administrator ;
Activity ::= Event_Creation ;
 Activity ::= Request ;
 Activity ::= Event_Approval ;
 Activity ::= Registration ;
 Activity ::= (has_result::Thing)+ sent_by::Person ;
PaperAbstract ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Administrator ::= approve::Event assign::Role finalizePaperAssignment::Conference runPaperAssignmentTools::Conference enableVirtualMeeting::Conference startReviewerBidding::Conference assignReviewer::Reviewer rejectPaper::Paper enterConferenceDetails::Conference printHardcopyMailingManifests::Conference setMaxPapers::ProgramCommitteeMember enterReviewCriteria::Conference acceptPaper::Paper addProgramCommitteeMember::ProgramCommitteeMember ;
Submission ::= recieved_by::User used_by::Person submited__by::User ;
Paper ::= PaperAbstract ;
 Paper ::= PaperFullVersion ;
 Paper ::= Abstract ;
 Paper ::= Invited_Paper ;
 Paper ::= Short_Paper ;
 Paper ::= Full_Paper ;
 Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Track ::= has_a_track-workshop-tutorial_topic::Topic is_part_of_conference_volumes::Conference_volume has_a_track-workshop-tutorial_chair::Track-workshop_chair ;
User ::= Committee ;
 User ::= Administrator ;
 User ::= Author ;
 User ::= recieve::Document (create::Thing)+ submit::Document ;
Author ::= AuthorNotReviewer ;
 Author ::= Co-author ;
 Author ::= Corresponding_Author ;
 Author ::= submitPaper::Paper writePaper::Paper ;
Conference_announcement ::= has_authors::Person has_a_date_of_issue::date ;
Information_for_participants ::= has_authors::Person has_a_date_of_issue::date ;
Workshop ::= has_a_track-workshop-tutorial_topic::Topic is_part_of_conference_volumes::Conference_volume has_a_track-workshop-tutorial_chair::Track-workshop_chair conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator ;
Reviewer ::= Meta-Reviewer ;
 Reviewer ::= assignedByAdministrator::Administrator adjustBid::Bid readPaper::Paper hasBeenAssigned::Paper writeReview::Review assignExternalReviewer::ExternalReviewer invites_co-reviewers::Reviewer invited_by::Reviewer (has_a_review_reference_or_expertise::Thing)+ ;
Event_Creation ::= (has_result::Thing)+ sent_by::Person ;
Meta-Review ::= writtenBy::Reviewer reviews::Reviewed_contribution ;
Committee ::= Program_committee ;
 Committee ::= Organizing_committee ;
 Committee ::= Steering_committee ;
 Committee ::= has_members::Committee_member was_a_committee_of::Conference_volume has_a_committee_co-chair::Co-chair has_a_committee_chair::Chair ;
Full_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Template ::= recieved_by::User used_by::Person submited__by::User ;
Registration ::= (has_result::Thing)+ sent_by::Person ;
Corresponding_Author ::= submitPaper::Paper writePaper::Paper ;
Conference_part ::= Track ;
 Conference_part ::= Tutorial ;
 Conference_part ::= Workshop ;
 Conference_part ::= has_a_track-workshop-tutorial_topic::Topic is_part_of_conference_volumes::Conference_volume has_a_track-workshop-tutorial_chair::Track-workshop_chair ;
Call_for_paper ::= has_authors::Person has_a_date_of_issue::date ;
Chairman ::= ConferenceChair ;
 Chairman ::= AssociatedChair ;
 Chairman ::= ProgramCommitteeChair ;
 Chairman ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person send::Activity added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String hasConflictOfInterest::Document email::String memberOfConference::Conference ;
Symposium ::= conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator ;
Topic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part ;
AuthorNotReviewer ::= submitPaper::Paper writePaper::Paper ;
Meta-Reviewer ::= assignedByAdministrator::Administrator adjustBid::Bid readPaper::Paper hasBeenAssigned::Paper writeReview::Review assignExternalReviewer::ExternalReviewer invites_co-reviewers::Reviewer invited_by::Reviewer (has_a_review_reference_or_expertise::Thing)+ ;
Call_for_participation ::= has_authors::Person has_a_date_of_issue::date ;
Review_expertise ::= has_a_submitted_contribution::Submitted_contribution has_an_expertise::EEnum ;
Short_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Important_dates ::= is_an_abstract_submission_date::date is_a_full_paper_submission_date::date is_an_ending_date::date is_a_date_of_acceptance_announcement::date is_a_date_of_camera_ready_paper_submission::date is_a_starting_date::date belong_to_a_conference_volume::Conference_volume ;
Event_Approval ::= (has_result::Thing)+ sent_by::Person ;
Invited_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Review_preference ::= (has_a_topic_or_a_submission_contribution::Thing)+ has_a_degree::Integer ;
Abstract ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
 Abstract ::= (is_the_1th_part_of::Thing)+ ;
--------------------metamodels::Contact.bgf--------------------
Num_fixe ::= numero::String contact_fixe::Contact ;
Num_portable ::= numero::String contact_portable::Contact ;
Contact ::= nom::String prenom::String (num_fixes::Num_fixe)+ (num_portables::Num_portable)+ ;
--------------------metamodels::ControllerUML.bgf--------------------
ViewState ::= (substates::State)+ theContainer::State (outGoing::StateTransition)+ (incoming::StateTransition)+ ;
Controller ::= (controllerAttribute::ControllerAttribute)+ behavior::StateMachine ;
StateTransition ::= source::State target::State trigger::Event effect::StateMachineAction ;
State ::= SubControllerState ;
 State ::= ViewState ;
 State ::= (substates::State)+ theContainer::State (outGoing::StateTransition)+ (incoming::StateTransition)+ ;
--------------------metamodels::Cristal.bgf--------------------
ElementaryActDef ::= actCompositeMember::ActCompositeMember ;
Condition ::= (partCompositeMembers::PartCompositeMember)+ (actCompositeMembers::ActCompositeMember)+ ;
ElementaryPartDef ::= (partCompositeMembers::PartCompositeMember)+ ;
--------------------metamodels::DSLModel.bgf--------------------
Model ::= domainModel::PrimitiveTypes/String (contents::ModelElement)+ ;
Role ::= element::ModelElement owner::ReferenceLink ;
Property ::= owner::ModelElement value::Value ;
ReferenceLink ::= owner::ModelElement modelElement::ModelElementLink roles::Role ;
ModelElement ::= ModelElementLink ;
 ModelElement ::= parentLink::EmbeddingLink (properties::Property)+ (embeddinglinks::EmbeddingLink)+ (referencelinks::ReferenceLink)+ ;
EmbeddingLink ::= owner::ModelElement (elements::ModelElement)+ ;
--------------------metamodels::DSLtools.bgf--------------------
Relationship ::= isEmbedding::PrimitiveTypes/Boolean roles::Role ;
ValueProperty ::= owner::Classifier type::Type ;
Role ::= min::PrimitiveTypes/Integer max::PrimitiveTypes/Integer isUnbounded::PrimitiveTypes/Boolean accepts::PrimitiveTypes/String isOrdered::PrimitiveTypes/Boolean isNavigableFrom::PrimitiveTypes/Boolean isPropertyGenerator::PrimitiveTypes/Boolean source::Classifier type::Classifier relation::Relationship ;
DomainModel ::= (classifiers::Classifier)+ (types::Type)+ ;
--------------------metamodels::DTD.bgf--------------------
Entity ::= content::String isInternal::Boolean ;
DefaultValue ::= value::String isFixed::Boolean ;
--------------------metamodels::DTMP.bgf--------------------
Parameter ::= (name::String)+ (type::String)+ state::State ;
Transition ::= (transProb::String)+ to::State from::State ;
State ::= name::String isStart::Boolean isEnd::Boolean isFail::Boolean (incoming::Transition)+ (outGoing::Transition)+ (formalParam::Parameter)+ ;
--------------------metamodels::DXF.bgf--------------------
Mesh ::= name::String (points::Point)+ ;
Point ::= name::String mesh::Mesh x::Double y::Double z::Double ;
--------------------metamodels::DeploymentReport.bgf--------------------
PublicKeyTokenType ::= value::String ;
SimpleName ::= value::String ;
CultureNeutral ::= value::String ;
FourPartVersionType ::= value::String ;
NamespaceIdentity ::= ImportNamespaceIdentity ;
 NamespaceIdentity ::= name::Path version::FourPartVersionType publicKey::PublicKeyType publicKeyToken::PublicKeyTokenType culture::CultureNeutral platform::Platform ;
DeploymentReport ::= (import::DeploymentImport)+ applications::Applications binding::Binding logicalServers::LogicalServers errors::ErrorCollection ;
SequenceReport ::= report::ReportObject setting::Setting (system::ReportSystem)+ (resource::ReportResource)+ (endpoint::ReportEndpoint)+ ;
ReportObject ::= LogicalServer ;
 ReportObject ::= Application ;
 ReportObject ::= ReportSystem ;
 ReportObject ::= ReportResource ;
 ReportObject ::= ReportEndpoint ;
 ReportObject ::= (sequence::SequenceReport)+ name::String definition::String extends::String instanceId::Guid hostedOn::String ;
PublicKeyType ::= value::String ;
DocumentConstraintError ::= (failedInput::FailedInput)+ constraintMember::String constraintDefinition::String targetInstancePath::String ownerInstancePath::String constraintErrorCode::String constraintErrorMessage::String ;
Setting ::= (value::SettingInstanceValue)+ (facet::SettingFacet)+ settingAttributes::SettingAttributes ;
Application ::= (sequence::SequenceReport)+ name::String definition::String extends::String instanceId::Guid hostedOn::String ;
Culture ::= value::String ;
BoundLogicalServer ::= (setting::Setting)+ (application::Application)+ name::String definition::String extends::String ;
DocumentError ::= DocumentResolutionError ;
 DocumentError ::= DocumentConstraintError ;
 DocumentError ::= (description::Description)+ Code::Integer Level::Integer File::String ;
SettingInstanceValue ::= (contents::String)+ null::Boolean ;
LogicalServer ::= (sequence::SequenceReport)+ name::String definition::String extends::String instanceId::Guid hostedOn::String ;
Zone ::= (zone::Zone)+ (boundLogicalServer::BoundLogicalServer)+ (logicalServer::LogicalServer)+ name::String ;
OuterSystem ::= (system::OuterSystem)+ (application::Application)+ name::String ;
DeploymentImport ::= alias::SimpleName identity::ImportNamespaceIdentity ;
Guid ::= value::String ;
ReportEndpoint ::= (sequence::SequenceReport)+ name::String definition::String extends::String instanceId::Guid hostedOn::String ;
SettingAttributes ::= name::String definition::String state::SettingState fixed::Boolean list::Boolean null::Boolean secure::Boolean failedToSerialize::Boolean ;
SettingFacet ::= value::SettingInstanceValue settingAttributes::SettingAttributes ;
LogicalServers ::= (zone::Zone)+ (logicalServer::LogicalServer)+ ;
ErrorCollection ::= (documentError::DocumentError)+ (documentResolutionError::DocumentResolutionError)+ (documentConstraintError::DocumentConstraintError)+ ;
Path ::= value::String ;
Binding ::= (zone::Zone)+ (boundLogicalServer::BoundLogicalServer)+ ;
ReportSystem ::= (sequence::SequenceReport)+ name::String definition::String extends::String instanceId::Guid hostedOn::String ;
Applications ::= (system::OuterSystem)+ (application::Application)+ ;
ReportResource ::= (sequence::SequenceReport)+ name::String definition::String extends::String instanceId::Guid hostedOn::String ;
SettingValue ::= (contents::String)+ Null::Boolean Secure::Boolean ;
--------------------metamodels::DiagramInterchange.bgf--------------------
GraphConnector ::= position::Point gc_graphElement::GraphElement (graphEdges::GraphEdge)+ ;
Ellipse ::= center::Point radiusX::Double radiusY::Double rotation::Double startAngle::Double endAngle::Double ;
DiagramLink ::= zoom::Double viewPort::Point dl_graphElement::GraphElement dl_diagram::Diagram ;
Image ::= uri::String mimeType::String ;
GraphEdge ::= waypoints::Point anchors::GraphConnector ;
Reference ::= isIndividualRepresentation::Boolean referenced::DiagramElement ;
Dimension ::= width::Double heigth::Double ;
Property ::= key::String value::String ;
Diagram ::= name::String zoom::Double viewPort::Point (diagramLinks::DiagramLink)+ namespace::SemanticModelBridge ;
Polyline ::= waypoints::Point closed::Boolean ;
Point ::= BezierPoint ;
 Point ::= x::Double y::Double ;
--------------------metamodels::DoDAF-OV5.bgf--------------------
InformationAssetDocument ::= name::String description::String view::String ;
AMPA ::= (isOrdinateOf::AMPA)+ (isSubordinateOf::AMPA)+ (defines::AMIERole)+ ;
Control ::= source::String destination::String ;
MechanismFacility ::= source::String destination::String resourceType::String ;
IE ::= (isAssociatedWith::AMIERole)+ (isOrdinateOf::IE)+ (isSubordinateOf::IE)+ ;
Document ::= AMSpecification ;
 Document ::= type::String (cites::InformationAssetDocument)+ (records::ArchitectureDocument)+ (isTheReferenceFor::IE)+ (isThePrimaryReferenceFor::PA)+ ;
Mechanism ::= MechanismSystem ;
 Mechanism ::= MechanismReference ;
 Mechanism ::= MechanismFacility ;
 Mechanism ::= source::String destination::String resourceType::String ;
DOSCR ::= mayBeAn::Occupation (appliesTo::PersonType)+ (mayBeCitedFor::OperationalRole)+ ;
Organization ::= type::OrganizationType (supplies::InformationAsset)+ (providesStewardshipFor::InformationAsset)+ (owns::InformationAsset)+ (develops::IE)+ (isCitedAs::MechanismReference)+ ;
MechanismReference ::= source::String destination::String resourceType::String ;
PA ::= (isTheProducerFor::PAExchangeRequirement)+ (isTheConsumerFor::PAExchangeRequirement)+ (isParentFor::PA)+ (isChildFor::PA)+ (has::PACapability)+ (isIncludedIn::AMPA)+ (correspondsTo::PATask)+ ;
PersonType ::= (mayBeCitedFor::OperationalRole)+ (can::Skill)+ ;
ArchitectureDocument ::= name::String description::String view::String ;
OrganizationType ::= (isTheTypeOf::Organization)+ (isCitedAs::MechanismReference)+ ;
AM ::= type::String (specifies::AMSpecification)+ (includes::AMPA)+ (paTask::PATask)+ ;
Occupation ::= (mayBeCitedForOR::OperationalRole)+ (mayBeCitedForPT::PersonType)+ ;
DoDAFModel ::= (document::Document)+ (am::AM)+ (task::Task)+ (iaDocument::InformationAssetDocument)+ (amSpecification::AMSpecification)+ (doscr::DOSCR)+ (organizationType::OrganizationType)+ ;
Input ::= (isTheInputThatIsDefinedBy::Output)+ source::String destination::String information::String ;
PACapability ::= name::String description::String view::String ;
MechanismSystem ::= source::String destination::String resourceType::String ;
Task ::= PATask ;
 Task ::= levelIdentifier::String references::String cost::String ;
Output ::= source::String destination::String information::String ;
--------------------metamodels::DoDAF-SV4.bgf--------------------
InformationAssetDocument ::= name::String description::String view::String ;
AMIERole ::= Input ;
 AMIERole ::= Output ;
 AMIERole ::= (defines::AMPA)+ (isRepresentedBy::AMIERoleGraphic)+ ;
AMPA ::= (isOrdinateOf::AMPA)+ (isSubordinateOf::AMPA)+ (defines::AMIERole)+ (isRepresentedBy::AMPAGraphic)+ ;
IE ::= (isAssociatedWith::AMIERole)+ (isOrdinateOf::IE)+ (isSubordinateOf::IE)+ ;
OrganizationTypeOperationalRole ::= name::String description::String view::String ;
Document ::= SystemFunctionalityDescription ;
 Document ::= FunctionalSpecification ;
 Document ::= AMSpecification ;
 Document ::= type::String (cites::InformationAssetDocument)+ (describes::SystemDocument)+ (records::ArchitectureDocument)+ (isTheReferenceFor::IE)+ (isThePrimaryReferenceFor::PA)+ ;
OperationalRolePA ::= name::String description::String view::String ;
DataStore ::= (isParentFor::PA)+ (isChildFor::PA)+ (isIncludedIn::AMPA)+ (isAssignedTo::SystemPA)+ (represents::ArchitectureBusinessSubFunction)+ (correspondsTo::PATask)+ (has::PACapability)+ (isPerformedBy::OperationalRolePA)+ ;
PATask ::= levelIdentifier::String references::String cost::String (correspondsTo::PATask)+ (supports::TaskMissionArea)+ ;
OrganizationOperationalRole ::= name::String description::String view::String ;
HumanBehaviourTask ::= levelIdentifier::String references::String cost::String (correspondsTo::PATask)+ (supports::TaskMissionArea)+ ;
PA ::= DataStore ;
 PA ::= SystemFunction ;
 PA ::= (isParentFor::PA)+ (isChildFor::PA)+ (isIncludedIn::AMPA)+ (isAssignedTo::SystemPA)+ (represents::ArchitectureBusinessSubFunction)+ (correspondsTo::PATask)+ (has::PACapability)+ (isPerformedBy::OperationalRolePA)+ ;
PersonType ::= (mayBeCitedFor::OperationalRole)+ (performsTo::PersonTypeCapabilityNorm)+ (can::Skill)+ ;
OperationalCapabilityTask ::= levelIdentifier::String references::String cost::String (correspondsTo::PATask)+ (supports::TaskMissionArea)+ ;
System ::= (isDesignedToProvide::SystemPA)+ (isDescribedBy::SystemDocument)+ ;
ArchitectureDocument ::= name::String description::String view::String ;
AM ::= type::String (isCitedBy::PATask)+ (specifies::AMSpecification)+ (includes::AMPA)+ (isUsedToDescribe::SystemFunctionalityDescription)+ (defines::LineOfBusiness)+ ;
Occupation ::= (mayBeCitedForOR::OperationalRole)+ (mayBeCitedForPT::PersonType)+ ;
LineOfBusiness ::= (appliesToTask::Task)+ (appliesToBS::BusinessSubfunction)+ ;
AMPAGraphic ::= name::String description::String view::String ;
DoDAFModel ::= (document::Document)+ (sfd::SystemFunctionalityDescription)+ (amSpecification::AMSpecification)+ (sd::SystemDocument)+ (task::Task)+ (iaDocument::InformationAssetDocument)+ (position::Position)+ (occupation::Occupation)+ (ad::ArchitectureDocument)+ (system::System)+ (am::AM)+ (spas::SystemPAStandard)+ (its::InformationTechnologyStandard)+ (orpa::OperationalRolePA)+ (ptcn::PersonTypeCapabilityNorm)+ ;
Input ::= (isTheInputThatIsDefinedBy::Output)+ source::String destination::String information::String ;
AMIERoleGraphic ::= name::String description::String view::String ;
SystemDocument ::= name::String description::String view::String ;
PACapability ::= name::String description::String view::String ;
OperationalRole ::= (performs::OperationalRolePA)+ (isPerformedByOTOR::OrganizationTypeOperationalRole)+ (isPerformedByOOR::OrganizationOperationalRole)+ ;
SystemFunction ::= (isParentFor::PA)+ (isChildFor::PA)+ (isIncludedIn::AMPA)+ (isAssignedTo::SystemPA)+ (represents::ArchitectureBusinessSubFunction)+ (correspondsTo::PATask)+ (has::PACapability)+ (isPerformedBy::OperationalRolePA)+ ;
ArchitectureBusinessSubFunction ::= name::String description::String view::String ;
Task ::= HumanBehaviourTask ;
 Task ::= OperationalCapabilityTask ;
 Task ::= TaskMissionArea ;
 Task ::= PATask ;
 Task ::= levelIdentifier::String references::String cost::String (correspondsTo::PATask)+ (supports::TaskMissionArea)+ ;
InformationAsset ::= AM ;
 InformationAsset ::= (isCitedIn::InformationAssetDocument)+ (describes::DataStore)+ ;
PersonTypeCapabilityNorm ::= name::String description::String view::String ;
Output ::= source::String destination::String information::String ;
SystemFunctionalityDescription ::= type::String (cites::InformationAssetDocument)+ (describes::SystemDocument)+ (records::ArchitectureDocument)+ (isTheReferenceFor::IE)+ (isThePrimaryReferenceFor::PA)+ ;
--------------------metamodels::DoDAF-SV5.bgf--------------------
AMPA ::= (isOrdinateOf::AMPA)+ (isSubordinateOf::AMPA)+ ;
Document ::= SystemFunctionTraceabilityMatrix ;
 Document ::= type::String (cites::CapabilityDocument)+ (describes::SystemDocument)+ (records::ArchitectureDocument)+ (isThePrimaryReferenceFor::PA)+ ;
SoftwareApplicationProcedurePA ::= name::String description::String view::String ;
Capability ::= NetworkCapability ;
 Capability ::= NodeLinkCapability ;
 Capability ::= MaterielItemCapabilityNorm ;
 Capability ::= OrganizationTypeCapabilityNorm ;
 Capability ::= RequiredInformationTechnologyCapability ;
 Capability ::= (isPerformedBy::SystemCapability)+ (isOrdinateFor::Capability)+ (isSubordinateOf::Capability)+ (isPerformedByNC::NetworkCapability)+ (isPerformedByNLC::NodeLinkCapability)+ (isPerformedBySC::SystemCapability)+ (isCitedInCD::CapabilityDocument)+ (isUsedInMICN::MaterielItemCapabilityNorm)+ (isUsedInOTCN::OrganizationTypeCapabilityNorm)+ (isAttainedFor::RequiredInformationTechnologyCapability)+ ;
ArchitectureTask ::= name::String description::String view::String ;
PATask ::= levelIdentifier::String references::String cost::String (correspondsTo::PATask)+ (isSupportedBy::ArchitectureTask)+ (isTheSourceOfNeedFor::InformationExchangeRequirement)+ (isTheDestinationOfNeedFor::InformationExchangeRequirement)+ (isCitedFor::SystemFunctionTraceabilityElement)+ ;
InformationExchangeRequirement ::= (specifies::RequiredInformationTechnologyCapability)+ ;
NodeLinkCapability ::= (isPerformedBy::SystemCapability)+ (isOrdinateFor::Capability)+ (isSubordinateOf::Capability)+ (isPerformedByNC::NetworkCapability)+ (isPerformedByNLC::NodeLinkCapability)+ (isPerformedBySC::SystemCapability)+ (isCitedInCD::CapabilityDocument)+ (isUsedInMICN::MaterielItemCapabilityNorm)+ (isUsedInOTCN::OrganizationTypeCapabilityNorm)+ (isAttainedFor::RequiredInformationTechnologyCapability)+ ;
RequiredInformationTechnologyCapability ::= (isPerformedBy::SystemCapability)+ (isOrdinateFor::Capability)+ (isSubordinateOf::Capability)+ (isPerformedByNC::NetworkCapability)+ (isPerformedByNLC::NodeLinkCapability)+ (isPerformedBySC::SystemCapability)+ (isCitedInCD::CapabilityDocument)+ (isUsedInMICN::MaterielItemCapabilityNorm)+ (isUsedInOTCN::OrganizationTypeCapabilityNorm)+ (isAttainedFor::RequiredInformationTechnologyCapability)+ ;
PA ::= SystemFunction ;
 PA ::= (isParentFor::PA)+ (isChildFor::PA)+ (correspondsTo::PATask)+ (isIncludedIn::AMPA)+ (isAssignedTo::SystemPA)+ (isSupportedBy::SoftwareApplicationProcedurePA)+ (isTheConsumerFor::PAExchangeRequirement)+ (isTheProducerFor::PAExchangeRequirement)+ ;
SystemFunctionTraceabilityElement ::= systemFunction::SystemFunction operationalActivity::Task systemProcessActivity::SystemPA system::System capability::Capability supportStatusCode::SupportStatusCode ;
System ::= (isDesignedToProvide::SystemPA)+ (isDescribedBy::SystemDocument)+ (performs::SystemCapability)+ (isUsedToAccomplish::SystemOperationalCapabilityTask)+ ;
ArchitectureDocument ::= name::String description::String view::String ;
AM ::= type::String (isCitedBy::PATask)+ (includes::AMPA)+ ;
DoDAFModel ::= (document::Document)+ (sftm::SystemFunctionTraceabilityMatrix)+ (sd::SystemDocument)+ (am::AM)+ (system::System)+ (task::Task)+ (capability::Capability)+ (capabilityDocument::CapabilityDocument)+ (systemCapability::SystemCapability)+ ;
MaterielItemCapabilityNorm ::= (isPerformedBy::SystemCapability)+ (isOrdinateFor::Capability)+ (isSubordinateOf::Capability)+ (isPerformedByNC::NetworkCapability)+ (isPerformedByNLC::NodeLinkCapability)+ (isPerformedBySC::SystemCapability)+ (isCitedInCD::CapabilityDocument)+ (isUsedInMICN::MaterielItemCapabilityNorm)+ (isUsedInOTCN::OrganizationTypeCapabilityNorm)+ (isAttainedFor::RequiredInformationTechnologyCapability)+ ;
SystemDocument ::= name::String description::String view::String ;
NetworkCapability ::= (isPerformedBy::SystemCapability)+ (isOrdinateFor::Capability)+ (isSubordinateOf::Capability)+ (isPerformedByNC::NetworkCapability)+ (isPerformedByNLC::NodeLinkCapability)+ (isPerformedBySC::SystemCapability)+ (isCitedInCD::CapabilityDocument)+ (isUsedInMICN::MaterielItemCapabilityNorm)+ (isUsedInOTCN::OrganizationTypeCapabilityNorm)+ (isAttainedFor::RequiredInformationTechnologyCapability)+ ;
Task ::= OperationalCapabilityTask ;
 Task ::= SystemOperationalCapabilityTask ;
 Task ::= PATask ;
 Task ::= levelIdentifier::String references::String cost::String (correspondsTo::PATask)+ (isSupportedBy::ArchitectureTask)+ (isTheSourceOfNeedFor::InformationExchangeRequirement)+ (isTheDestinationOfNeedFor::InformationExchangeRequirement)+ (isCitedFor::SystemFunctionTraceabilityElement)+ ;
OrganizationTypeCapabilityNorm ::= (isPerformedBy::SystemCapability)+ (isOrdinateFor::Capability)+ (isSubordinateOf::Capability)+ (isPerformedByNC::NetworkCapability)+ (isPerformedByNLC::NodeLinkCapability)+ (isPerformedBySC::SystemCapability)+ (isCitedInCD::CapabilityDocument)+ (isUsedInMICN::MaterielItemCapabilityNorm)+ (isUsedInOTCN::OrganizationTypeCapabilityNorm)+ (isAttainedFor::RequiredInformationTechnologyCapability)+ ;
SystemPA ::= (mayBeCitedFor::SystemFunctionTraceabilityElement)+ (provides::SystemCapability)+ (enables::SystemOperationalCapabilityTask)+ ;
SystemOperationalCapabilityTask ::= levelIdentifier::String references::String cost::String (correspondsTo::PATask)+ (isSupportedBy::ArchitectureTask)+ (isTheSourceOfNeedFor::InformationExchangeRequirement)+ (isTheDestinationOfNeedFor::InformationExchangeRequirement)+ (isCitedFor::SystemFunctionTraceabilityElement)+ ;
--------------------metamodels::DoDAF.bgf--------------------
RestrikeRecommendation ::= ato::ATO tn::TargetNomination ;
COI ::= (comprises::Performer)+ defines::Vocabulary ;
ATO ::= timePeriod::String (cr::CollectionRequirement)+ mea::MunitionsEffectsAssesment (tn::TargetNomination)+ rr::RestrikeRecommendation ;
DIA ::= nmjic::NMJIC higherEchelon::HigherEchelon ;
WSV ::= missionID::String weaponfSystemID::String videoType::String ;
TargetMaterialsAnalysis ::= targetID::String target::Target ;
TargetNomination ::= (ato::ATO)+ (mea::MunitionsEffectsAssesment)+ rr::RestrikeRecommendation target::Target ;
Service ::= (decomposes::SystemFunction)+ (consumes::Product)+ (produces::Product)+ terminatesAt::SystemProductFlow (mesuredBy::ConstraintOrRequirement)+ ;
BDAReport ::= targetID::String reportSourceID::String assesmentSumart::String validityDuration::String (rd::ResultData)+ mea::MunitionsEffectsAssesment ;
Target ::= (cr::CollectionRequirement)+ tn::TargetNomination holds::MIDB (describes::TargetMaterialsAnalysis)+ ;
System ::= (decomposes::System)+ (fulfills::SystemRole)+ ;
SystemProductFlow ::= (transports::Product)+ originatesFrom::SystemFunction ;
Performer ::= (decomposes::Performer)+ (fulfills::OperationalRole)+ ;
AOCCombatPlanStrategyCells ::= name::String content::String ;
AOCCID ::= name::String content::String ;
CombatReport ::= friendlyUnitsInvolved::String combatLocation::String resultsAssessment::String duration::String ;
OperationalRole ::= (decomposes::OperationalRole)+ (accomplishes::OperationalActivity)+ ;
MunitionsEffectsAssesment ::= bdaReport::BDAReport ato::ATO tn::TargetNomination ;
ResultData ::= CombatReport ;
 ResultData ::= WSV ;
 ResultData ::= MISREP ;
 ResultData ::= Imagery ;
 ResultData ::= sourceID::String timeStamp::String (cr::CollectionRequirement)+ (bdaReport::BDAReport)+ ;
JFC ::= higherEchelon::HigherEchelon f2c2::F2C2 componentComand::ComponentCommand ;
SystemFunction ::= Service ;
 SystemFunction ::= (decomposes::SystemFunction)+ (consumes::Product)+ (produces::Product)+ terminatesAt::SystemProductFlow (mesuredBy::ConstraintOrRequirement)+ ;
MISREP ::= missionID::String missionObjectives::String missionAssesments::String ;
CollectionRequirement ::= sourceID::String collectionTargetID::String toBeDoneByTime::String specialNeeds::String (rd::ResultData)+ (ato::ATO)+ (isContainedIn::Target)+ ;
JFACC ::= subordinateAirCommand::SubordinateAirCommand (aoccid::AOCCID)+ (aoccpsc::AOCCombatPlanStrategyCells)+ ;
SystemRole ::= ServiceProvider ;
 SystemRole ::= (decomposes::SystemRole)+ (performs::SystemFunction)+ terminatesAt::SystemRoleInterface ;
SystemAtNode ::= references::System terminatesAt::SystemAtNodeInterface ;
Imagery ::= imageType::String spectralData::String geospacialLocation::String imageSize::Integer ;
HigherEchelon ::= dia::DIA jfc::JFC ;
OperationalActivity ::= (decomposes::OperationalRole)+ (supports::SystemFunction)+ ;
--------------------metamodels::DotNET_SystemReflection.bgf--------------------
ManifestResource ::= content::String assembly::Assembly ;
Module ::= qualifiedName::String scopeName::String assembly::Assembly (types::Type)+ ;
Type ::= namespace::String (genericParameterAttributes::GenericParameterAttributes)+ (typeAttributes::TypeAttributes)+ baseType::Type module::Module (interfaces::Type)+ (members::MemberInfo)+ ;
ConstructorInfo ::= (attributes::MethodAttributes)+ (parameters::ParameterInfo)+ ;
EventInfo ::= isMulticast::Boolean attributes::EventAttributes eventHandlerType::Type ;
FieldInfo ::= fieldType::Type (attributes::FieldAttributes)+ ;
ParameterInfo ::= defaultValue::String position::Integer (attributes::ParameterAttributes)+ parameterType::Type member::MethodBase ;
Assembly ::= location::String imageRuntimeVersion::String evidence::String codeBase::String entryPoint::MethodInfo (modules::Module)+ manifestModule::Module (referencedAssembly::Assembly)+ manifest::ManifestResource ;
PropertyInfo ::= propertyType::Type (attributes::PropertyAttributes)+ ;
--------------------metamodels::EAI.bgf--------------------
EAIQueue ::= maxLength::Integer name::String ;
--------------------metamodels::EG.bgf--------------------
Basic ::= (predecessor::Node)+ (successor::Node)+ executionGraph::ExecutionGraph (nested::ExecutionGraph)+ ;
End ::= (predecessor::Node)+ (successor::Node)+ executionGraph::ExecutionGraph (nested::ExecutionGraph)+ ;
ExecutionGraph ::= (node::Node)+ nodeNested::Node ;
Start ::= (predecessor::Node)+ (successor::Node)+ executionGraph::ExecutionGraph (nested::ExecutionGraph)+ ;
Node ::= Start ;
 Node ::= End ;
 Node ::= Control ;
 Node ::= Basic ;
 Node ::= (predecessor::Node)+ (successor::Node)+ executionGraph::ExecutionGraph (nested::ExecutionGraph)+ ;
--------------------metamodels::EQN.bgf--------------------
PassiveCenter ::= node::Node queuingNetwork::QueuingNetwork ;
ActiveCenter ::= node::Node queuingNetwork::QueuingNetwork ;
ExecutionGraph ::= nodeNested::Node (node::Node)+ ;
Center ::= Special ;
 Center ::= ActiveCenter ;
 Center ::= PassiveCenter ;
 Center ::= node::Node queuingNetwork::QueuingNetwork ;
Node ::= nested::ExecutionGraph executionGraph::ExecutionGraph (demand::Center)+ ;
QueuingNetwork ::= (center::Center)+ workLoad::RoutingChain ;
--------------------metamodels::EXPRESS.bgf--------------------
Express_metamodel::Core::ScopedId ::= localName::Core/Identifier definingScope::Core/Express_metamodel%3A%3ACore%3A%3AScope ;
Express_metamodel::Core::ARRAYType ::= Express_metamodel::Core::ARRAYType::lo-index::Core/Express_metamodel%3A%3ACore%3A%3AArrayBound Express_metamodel::Core::ARRAYType::hi-index::Core/Express_metamodel%3A%3ACore%3A%3AArrayBound isOptional::MOF/Boolean ;
Express_metamodel::Instances::AttributeValue ::= Express_metamodel::Instances::AttributeValue::actual-value::Core/Express_metamodel%3A%3ACore%3A%3AInstance Express_metamodel::Instances::AttributeValue::attribute::Core/Express_metamodel%3A%3ACore%3A%3AExplicitAttribute ;
Express_metamodel::Instances::SingleEntityValue ::= Express_metamodel::Instances::SingleEntityValue::equivalent::Instances/Express_metamodel%3A%3AInstances%3A%3APartialEntityValue Express_metamodel::Instances::SingleEntityValue::of-type::Core/Express_metamodel%3A%3ACore%3A%3ASingleEntityType (Express_metamodel::Instances::SingleEntityValue::properties::Instances/Express_metamodel%3A%3AInstances%3A%3AAttributeValue)+ ;
Express_metamodel::Core::InterfacedElement ::= Express_metamodel::Core::InterfacedElement::interfacing-schema::Core/Express_metamodel%3A%3ACore%3A%3ASchema Express_metamodel::Core::InterfacedElement::refers-to::Core/Express_metamodel%3A%3ACore%3A%3ASchemaElement isUSE::MOF/Boolean interfacedId::Core/Express_metamodel%3A%3ACore%3A%3AScopedId ;
Express_metamodel::Core::GenericType ::= Express_metamodel::Core::GenericType::constraint::Algorithms/Express_metamodel%3A%3AAlgorithms%3A%3AActualTypeConstraint isEntity::MOF/Boolean ;
Express_metamodel::Expressions::PartialEntityConstructor ::= Express_metamodel::Expressions::PartialEntityConstructor::result-value::Instances/Express_metamodel%3A%3AInstances%3A%3APartialEntityValue Express_metamodel::Expressions::PartialEntityConstructor::attribute-group::Core/Express_metamodel%3A%3ACore%3A%3ASingleEntityType (Express_metamodel::Expressions::PartialEntityConstructor::bindings::Expressions/Express_metamodel%3A%3AExpressions%3A%3AAttributeBinding)+ id::Core/Identifier ;
Express_metamodel::Statements::RepeatStatement ::= Express_metamodel::Statements::RepeatStatement::while-expression::Core/Express_metamodel%3A%3ACore%3A%3AExpression Express_metamodel::Statements::RepeatStatement::body::Algorithms/Express_metamodel%3A%3AAlgorithms%3A%3AStatement Express_metamodel::Statements::RepeatStatement::control-variable::Statements/Express_metamodel%3A%3AStatements%3A%3AControlVariable Express_metamodel::Statements::RepeatStatement::until-expression::Core/Express_metamodel%3A%3ACore%3A%3AExpression ;
Express_metamodel::Expressions::GroupRef ::= Express_metamodel::Expressions::GroupRef::refers-to::Core/Express_metamodel%3A%3ACore%3A%3ASingleEntityType id::Core/Identifier ;
Express_metamodel::Statements::ProcedureCall ::= Express_metamodel::Statements::ProcedureCall::invokes::Algorithms/Express_metamodel%3A%3AAlgorithms%3A%3AProcedure (Express_metamodel::Statements::ProcedureCall::actual-parameters::Expressions/Express_metamodel%3A%3AExpressions%3A%3AActualParameter)+ ;
Express_metamodel::Statements::VariableCell ::= Express_metamodel::Statements::VariableCell::refers-to::Algorithms/Express_metamodel%3A%3AAlgorithms%3A%3AVariable id::Core/Identifier ;
Express_metamodel::Rules::SubtypeConstraint ::= (Express_metamodel::Rules::SubtypeConstraint::constrained-subtypes::Rules/Express_metamodel%3A%3ARules%3A%3AExtent)+ Express_metamodel::Rules::SubtypeConstraint::equivalent-rule::Core/Express_metamodel%3A%3ACore%3A%3AExpression Express_metamodel::Rules::SubtypeConstraint::collection::Rules/Express_metamodel%3A%3ARules%3A%3ASupertypeRule ;
Express_metamodel::Core::SizeConstraint ::= Express_metamodel::Core::SizeConstraint::asserts::Core/Express_metamodel%3A%3ACore%3A%3AExpression bound::MOF/Integer ;
Express_metamodel::Core::EntityType ::= (Express_metamodel::Core::EntityType::plays-role::Core/Express_metamodel%3A%3ACore%3A%3ARole)+ (Express_metamodel::Core::EntityType::redeclarations::Core/Express_metamodel%3A%3ACore%3A%3ARedeclaration)+ (Express_metamodel::Core::EntityType::attributes::Core/Express_metamodel%3A%3ACore%3A%3AAttribute)+ (Express_metamodel::Core::EntityType::plays-range-role::Core/Express_metamodel%3A%3ACore%3A%3ARangeRole)+ Express_metamodel::Core::EntityType::declares::Core/Express_metamodel%3A%3ACore%3A%3ASingleEntityType (Express_metamodel::Core::EntityType::extension::Rules/Express_metamodel%3A%3ARules%3A%3AExtent)+ (Express_metamodel::Core::EntityType::invertible_attributes::Core/Express_metamodel%3A%3ACore%3A%3AInvertibleAttribute)+ (Express_metamodel::Core::EntityType::plays-domain-role::Core/Express_metamodel%3A%3ACore%3A%3ADomainRole)+ (Express_metamodel::Core::EntityType::instances::Instances/Express_metamodel%3A%3AInstances%3A%3AEntityInstance)+ (Express_metamodel::Core::EntityType::unique-rules::Core/Express_metamodel%3A%3ACore%3A%3AUniqueRule)+ (Express_metamodel::Core::EntityType::used-in::Core/Express_metamodel%3A%3ACore%3A%3AInvertibleAttribute)+ (Express_metamodel::Core::EntityType::subtype-of::Core/Express_metamodel%3A%3ACore%3A%3AEntityType)+ isAbstract::MOF/Boolean ;
Express_metamodel::Instances::TypeName ::= Express_metamodel::Instances::TypeName::refers-to::Core/Express_metamodel%3A%3ACore%3A%3ANamedType represents::Core/Express_metamodel%3A%3ACore%3A%3AScopedId ;
Express_metamodel::Core::EnumerationType ::= (Express_metamodel::Core::EnumerationType::values::Instances/Express_metamodel%3A%3AInstances%3A%3AEnumerationItem)+ (Express_metamodel::Core::EnumerationType::declared-items::Instances/Express_metamodel%3A%3AInstances%3A%3AEnumerationItem)+ (Express_metamodel::Core::EnumerationType::extension::Core/Express_metamodel%3A%3ACore%3A%3AEnumerationType)+ Express_metamodel::Core::EnumerationType::base::Core/Express_metamodel%3A%3ACore%3A%3AEnumerationType isExtensible::MOF/Boolean ;
Express_metamodel::Core::Relationship ::= Express_metamodel::Core::Relationship::domain::Core/Express_metamodel%3A%3ACore%3A%3ADomainRole Express_metamodel::Core::Relationship::roles::Core/Express_metamodel%3A%3ACore%3A%3ARole Express_metamodel::Core::Relationship::based-on::Core/Express_metamodel%3A%3ACore%3A%3AInvertibleAttribute Express_metamodel::Core::Relationship::range::Core/Express_metamodel%3A%3ACore%3A%3ARangeRole ;
Express_metamodel::Rules::Extent ::= (Express_metamodel::Rules::Extent::constraints::Rules/Express_metamodel%3A%3ARules%3A%3ASubtypeConstraint)+ (Express_metamodel::Rules::Extent::content::Instances/Express_metamodel%3A%3AInstances%3A%3AEntityInstance)+ Express_metamodel::Rules::Extent::within-population::Instances/Express_metamodel%3A%3AInstances%3A%3APopulation (Express_metamodel::Rules::Extent::constraint-rules::Rules/Express_metamodel%3A%3ARules%3A%3AGlobalRule)+ Express_metamodel::Rules::Extent::for-type::Core/Express_metamodel%3A%3ACore%3A%3AEntityType id::Core/Express_metamodel%3A%3ACore%3A%3AScopedId ;
Express_metamodel::Algorithms::ActualGenericType ::= Express_metamodel::Algorithms::ActualGenericType::refers-to::Algorithms/Express_metamodel%3A%3AAlgorithms%3A%3AActualDataType isEntity::MOF/Boolean label::Core/Identifier ;
Express_metamodel::Algorithms::ActualStructureConstraint ::= Express_metamodel::Algorithms::ActualStructureConstraint::matching-structure::Core/Express_metamodel%3A%3ACore%3A%3AAGGREGATEType Express_metamodel::Algorithms::ActualStructureConstraint::required-structure::Algorithms/Express_metamodel%3A%3AAlgorithms%3A%3AActualStructure label::Core/Identifier ;
Express_metamodel::Core::AGGREGATEType ::= Express_metamodel::Core::AGGREGATEType::upper-bound::Core/Express_metamodel%3A%3ACore%3A%3ASizeConstraint Express_metamodel::Core::AGGREGATEType::member-type::Core/Express_metamodel%3A%3ACore%3A%3AParameterType Express_metamodel::Core::AGGREGATEType::constraint::Algorithms/Express_metamodel%3A%3AAlgorithms%3A%3AActualStructureConstraint Express_metamodel::Core::AGGREGATEType::lower-bound::Core/Express_metamodel%3A%3ACore%3A%3ASizeConstraint ;
Express_metamodel::Expressions::MemberBinding ::= Express_metamodel::Expressions::MemberBinding::repetition::Expressions/Express_metamodel%3A%3AExpressions%3A%3ARepeatCount (Express_metamodel::Expressions::MemberBinding::to-slot::Instances/Express_metamodel%3A%3AInstances%3A%3AListMember)+ Express_metamodel::Expressions::MemberBinding::member-value::Core/Express_metamodel%3A%3ACore%3A%3AExpression position::MOF/Integer ;
Express_metamodel::Expressions::ExtentRef ::= Express_metamodel::Expressions::ExtentRef::refers-to::Core/Express_metamodel%3A%3ACore%3A%3ANamedType id::Core/Identifier ;
Express_metamodel::Instances::EntityInstance ::= Express_metamodel::Instances::EntityInstance::state::Instances/Express_metamodel%3A%3AInstances%3A%3AEntityValue (Express_metamodel::Instances::EntityInstance::instance-of::Core/Express_metamodel%3A%3ACore%3A%3AEntityType)+ (Express_metamodel::Instances::EntityInstance::appears-in-population::Instances/Express_metamodel%3A%3AInstances%3A%3APopulation)+ id::Instances/EntityName ;
Express_metamodel::Instances::ARRAYValue ::= (Express_metamodel::Instances::ARRAYValue::of-type::Core/Express_metamodel%3A%3ACore%3A%3AARRAYType)+ (Express_metamodel::Instances::ARRAYValue::member-slot::Instances/Express_metamodel%3A%3AInstances%3A%3AArrayMember)+ ;
Express_metamodel::Statements::ControlVariable ::= Express_metamodel::Statements::ControlVariable::bound-value::Core/Express_metamodel%3A%3ACore%3A%3AExpression Express_metamodel::Statements::ControlVariable::initial-value::Core/Express_metamodel%3A%3ACore%3A%3AExpression Express_metamodel::Statements::ControlVariable::namespace::Statements/Express_metamodel%3A%3AStatements%3A%3ARepeatStatement Express_metamodel::Statements::ControlVariable::increment::Core/Express_metamodel%3A%3ACore%3A%3AExpression ;
Express_metamodel::Core::GeneralARRAYType ::= Express_metamodel::Core::GeneralARRAYType::hi-index::Core/Express_metamodel%3A%3ACore%3A%3AArrayBound Express_metamodel::Core::GeneralARRAYType::lo-index::Core/Express_metamodel%3A%3ACore%3A%3AArrayBound isOptional::MOF/Boolean ;
Express_metamodel::Algorithms::ActualTypeConstraint ::= Express_metamodel::Algorithms::ActualTypeConstraint::matching-type::Core/Express_metamodel%3A%3ACore%3A%3AGenericType Express_metamodel::Algorithms::ActualTypeConstraint::required-type::Algorithms/Express_metamodel%3A%3AAlgorithms%3A%3AActualDataType label::Core/Identifier ;
Express_metamodel::Expressions::UnaryOperation ::= Express_metamodel::Expressions::UnaryOperation::unary-operand::Core/Express_metamodel%3A%3ACore%3A%3AExpression operator::Expressions/UnaryOperator ;
Express_metamodel::Expressions::QueryExpression ::= Express_metamodel::Expressions::QueryExpression::select-condition::Core/Express_metamodel%3A%3ACore%3A%3AExpression Express_metamodel::Expressions::QueryExpression::query-variable::Expressions/Express_metamodel%3A%3AExpressions%3A%3AQueryVariable Express_metamodel::Expressions::QueryExpression::aggregate-operand::Core/Express_metamodel%3A%3ACore%3A%3AExpression ;
Express_metamodel::Instances::BagMember ::= Express_metamodel::Instances::BagMember::member-value::Core/Express_metamodel%3A%3ACore%3A%3AInstance count::MOF/Integer ;
Express_metamodel::Core::SingleEntityType ::= (Express_metamodel::Core::SingleEntityType::declares_ExplicitAttribute::Core/Express_metamodel%3A%3ACore%3A%3AExplicitAttribute)+ (Express_metamodel::Core::SingleEntityType::declares_Attribute::Core/Express_metamodel%3A%3ACore%3A%3AAttribute)+ Express_metamodel::Core::SingleEntityType::declared-in::Core/Express_metamodel%3A%3ACore%3A%3AEntityType Express_metamodel::Core::SingleEntityType::equivalent::Core/Express_metamodel%3A%3ACore%3A%3APartialEntityType id::Core/Express_metamodel%3A%3ACore%3A%3AScopedId ;
Express_metamodel::Core::ArrayBound ::= Express_metamodel::Core::ArrayBound::bound-expression::Core/Express_metamodel%3A%3ACore%3A%3AExpression bound::MOF/Integer ;
Express_metamodel::Instances::PartialEntityValue ::= Express_metamodel::Instances::PartialEntityValue::of-type::Core/Express_metamodel%3A%3ACore%3A%3APartialEntityType (Express_metamodel::Instances::PartialEntityValue::components::Instances/Express_metamodel%3A%3AInstances%3A%3ASingleEntityValue)+ ;
Express_metamodel::Statements::MemberCell ::= Express_metamodel::Statements::MemberCell::index-value::Core/Express_metamodel%3A%3ACore%3A%3AExpression Express_metamodel::Statements::MemberCell::base-aggregate::Statements/Express_metamodel%3A%3AStatements%3A%3AVARExpression ;
Express_metamodel::Core::Schema ::= (Express_metamodel::Core::Schema::documentation::Core/Express_metamodel%3A%3ACore%3A%3ARemark)+ (Express_metamodel::Core::Schema::interfaces::Core/Express_metamodel%3A%3ACore%3A%3AInterfacedElement)+ (Express_metamodel::Core::Schema::schema-elements::Core/Express_metamodel%3A%3ACore%3A%3ASchemaElement)+ (Express_metamodel::Core::Schema::interfaced-elements::Core/Express_metamodel%3A%3ACore%3A%3ASchemaElement)+ name::Core/Identifier version::Core/Identifier ;
Express_metamodel::Rules::NamedRule ::= Express_metamodel::Rules::NamedRule::namespace::Rules/Express_metamodel%3A%3ARules%3A%3AGlobalRule Express_metamodel::Rules::NamedRule::asserts-expression::Core/Express_metamodel%3A%3ACore%3A%3AExpression position::MOF/Integer ;
Express_metamodel::Instances::BAGValue ::= (Express_metamodel::Instances::BAGValue::member-slot::Instances/Express_metamodel%3A%3AInstances%3A%3ABagMember)+ (Express_metamodel::Instances::BAGValue::of-type::Core/Express_metamodel%3A%3ACore%3A%3ABAGType)+ ;
Express_metamodel::Instances::EnumerationItem ::= (Express_metamodel::Instances::EnumerationItem::of-type::Core/Express_metamodel%3A%3ACore%3A%3AEnumerationType)+ Express_metamodel::Instances::EnumerationItem::declared-in::Core/Express_metamodel%3A%3ACore%3A%3AEnumerationType position::MOF/Integer ;
Express_metamodel::Expressions::VariableRef ::= Express_metamodel::Expressions::VariableRef::refers-to::Algorithms/Express_metamodel%3A%3AAlgorithms%3A%3ANamedVariable id::Core/Identifier ;
Express_metamodel::Rules::SupertypeRule ::= Express_metamodel::Rules::SupertypeRule::named-supertype::Core/Express_metamodel%3A%3ACore%3A%3AEntityType (Express_metamodel::Rules::SupertypeRule::constraints::Rules/Express_metamodel%3A%3ARules%3A%3ASubtypeConstraint)+ assertsAbstract::MOF/Boolean ;
Express_metamodel::Core::Expression ::= Express_metamodel::Core::Expression::evaluation::Core/Express_metamodel%3A%3ACore%3A%3AInstance Express_metamodel::Core::Expression::interpretation-context::Core/Express_metamodel%3A%3ACore%3A%3AScope Express_metamodel::Core::Expression::data-type::Core/Express_metamodel%3A%3ACore%3A%3ADataType text::Core/ExpressText ;
Express_metamodel::Statements::CaseStatement ::= (Express_metamodel::Statements::CaseStatement::cases::Statements/Express_metamodel%3A%3AStatements%3A%3ACaseAction)+ Express_metamodel::Statements::CaseStatement::selection-expression::Core/Express_metamodel%3A%3ACore%3A%3AExpression ;
Express_metamodel::Statements::AttributeCell ::= Express_metamodel::Statements::AttributeCell::refers-to::Core/Express_metamodel%3A%3ACore%3A%3AExplicitAttribute Express_metamodel::Statements::AttributeCell::base-entity::Statements/Express_metamodel%3A%3AStatements%3A%3AVARExpression id::Core/Identifier ;
Express_metamodel::Expressions::Coercion ::= Express_metamodel::Expressions::Coercion::operand::Core/Express_metamodel%3A%3ACore%3A%3AExpression Express_metamodel::Expressions::Coercion::target-type::Core/Express_metamodel%3A%3ACore%3A%3AVariableType ;
Express_metamodel::Expressions::BinaryOperation ::= Express_metamodel::Expressions::BinaryOperation::left-operand::Core/Express_metamodel%3A%3ACore%3A%3AExpression Express_metamodel::Expressions::BinaryOperation::right-operand::Core/Express_metamodel%3A%3ACore%3A%3AExpression operator::Expressions/BinaryOperator ;
Express_metamodel::Statements::CaseAction ::= (Express_metamodel::Statements::CaseAction::label-value::Core/Express_metamodel%3A%3ACore%3A%3AExpression)+ Express_metamodel::Statements::CaseAction::action::Algorithms/Express_metamodel%3A%3AAlgorithms%3A%3AStatement isDefault::MOF/Boolean ;
Express_metamodel::Expressions::AttributeRef ::= Express_metamodel::Expressions::AttributeRef::refers-to::Core/Express_metamodel%3A%3ACore%3A%3AAttribute id::Core/Identifier ;
Express_metamodel::Expressions::FunctionCall ::= (Express_metamodel::Expressions::FunctionCall::actual-parameters::Expressions/Express_metamodel%3A%3AExpressions%3A%3AActualParameter)+ Express_metamodel::Expressions::FunctionCall::invokes-function::Algorithms/Express_metamodel%3A%3AAlgorithms%3A%3AFunction Express_metamodel::Expressions::FunctionCall::/returns-result::Algorithms/Express_metamodel%3A%3AAlgorithms%3A%3AFunctionResult ;
Express_metamodel::Statements::IfStatement ::= Express_metamodel::Statements::IfStatement::if-condition::Core/Express_metamodel%3A%3ACore%3A%3AExpression Express_metamodel::Statements::IfStatement::else-actions::Algorithms/Express_metamodel%3A%3AAlgorithms%3A%3AStatement Express_metamodel::Statements::IfStatement::then-actions::Algorithms/Express_metamodel%3A%3AAlgorithms%3A%3AStatement ;
Express_metamodel::Instances::SETValue ::= (Express_metamodel::Instances::SETValue::member-value::Core/Express_metamodel%3A%3ACore%3A%3AInstance)+ (Express_metamodel::Instances::SETValue::of-type::Core/Express_metamodel%3A%3ACore%3A%3ASETType)+ ;
Express_metamodel::Statements::AliasStatement ::= Express_metamodel::Statements::AliasStatement::binds-to-reference::Statements/Express_metamodel%3A%3AStatements%3A%3AVARExpression Express_metamodel::Statements::AliasStatement::body::Algorithms/Express_metamodel%3A%3AAlgorithms%3A%3AStatement Express_metamodel::Statements::AliasStatement::alias-variable::Statements/Express_metamodel%3A%3AStatements%3A%3AAliasVariable ;
Express_metamodel::Core::Remark ::= (Express_metamodel::Core::Remark::describes-schema::Core/Express_metamodel%3A%3ACore%3A%3ASchema)+ Express_metamodel::Core::Remark::appears-in::Core/Express_metamodel%3A%3ACore%3A%3AScope (Express_metamodel::Core::Remark::describes-element::Core/Express_metamodel%3A%3ACore%3A%3ANamedElement)+ isTagged::MOF/Boolean isTail::MOF/Boolean text::Core/ExpressText ;
Express_metamodel::Core::Redeclaration ::= Express_metamodel::Core::Redeclaration::derivation::Core/Express_metamodel%3A%3ACore%3A%3AExpression Express_metamodel::Core::Redeclaration::restricted-type::Core/Express_metamodel%3A%3ACore%3A%3AAttributeType Express_metamodel::Core::Redeclaration::refines::Core/Express_metamodel%3A%3ACore%3A%3ARedeclaration Express_metamodel::Core::Redeclaration::upper-bound::Core/Express_metamodel%3A%3ACore%3A%3ASizeConstraint Express_metamodel::Core::Redeclaration::lower-bound::Core/Express_metamodel%3A%3ACore%3A%3ASizeConstraint Express_metamodel::Core::Redeclaration::scope::Core/Express_metamodel%3A%3ACore%3A%3AEntityType Express_metamodel::Core::Redeclaration::original-attribute::Core/Express_metamodel%3A%3ACore%3A%3AAttribute Express_metamodel::Core::Redeclaration::refined-role::Core/Express_metamodel%3A%3ACore%3A%3ARole position::MOF/Integer isMandatory::MOF/Boolean alias::Core/Express_metamodel%3A%3ACore%3A%3AScopedId ;
Express_metamodel::Instances::SpecializedValue ::= Express_metamodel::Instances::SpecializedValue::of-type::Core/Express_metamodel%3A%3ACore%3A%3ASpecializedType Express_metamodel::Instances::SpecializedValue::fundamental-value::Instances/Express_metamodel%3A%3AInstances%3A%3AConcreteValue ;
Express_metamodel::Expressions::AttributeBinding ::= Express_metamodel::Expressions::AttributeBinding::attribute-value::Core/Express_metamodel%3A%3ACore%3A%3AExpression Express_metamodel::Expressions::AttributeBinding::to-value::Instances/Express_metamodel%3A%3AInstances%3A%3AAttributeValue Express_metamodel::Expressions::AttributeBinding::attribute::Core/Express_metamodel%3A%3ACore%3A%3AExplicitAttribute position::MOF/Integer ;
Express_metamodel::Instances::Constant ::= Express_metamodel::Instances::Constant::value-expression::Core/Express_metamodel%3A%3ACore%3A%3AExpression Express_metamodel::Instances::Constant::actual-value::Core/Express_metamodel%3A%3ACore%3A%3AInstance Express_metamodel::Instances::Constant::data-type::Core/Express_metamodel%3A%3ACore%3A%3AInstantiableType ;
Express_metamodel::Algorithms::ActualARRAYType ::= Express_metamodel::Algorithms::ActualARRAYType::hi-index::Core/Express_metamodel%3A%3ACore%3A%3AArrayBound Express_metamodel::Algorithms::ActualARRAYType::lo-index::Core/Express_metamodel%3A%3ACore%3A%3AArrayBound isOptional::MOF/Boolean ;
Express_metamodel::Expressions::BinaryIndex ::= Express_metamodel::Expressions::BinaryIndex::first-bit::Core/Express_metamodel%3A%3ACore%3A%3AExpression Express_metamodel::Expressions::BinaryIndex::last-bit::Core/Express_metamodel%3A%3ACore%3A%3AExpression ;
Express_metamodel::Instances::LISTValue ::= (Express_metamodel::Instances::LISTValue::of-type::Core/Express_metamodel%3A%3ACore%3A%3ALISTType)+ (Express_metamodel::Instances::LISTValue::member-slot::Instances/Express_metamodel%3A%3AInstances%3A%3AListMember)+ ;
Express_metamodel::Instances::ArrayMember ::= Express_metamodel::Instances::ArrayMember::member-value::Core/Express_metamodel%3A%3ACore%3A%3AInstance index::MOF/Integer ;
Express_metamodel::Instances::RoleName ::= Express_metamodel::Instances::RoleName::refers-to::Core/Express_metamodel%3A%3ACore%3A%3AAttribute represents::Core/Express_metamodel%3A%3ACore%3A%3AScopedId ;
Express_metamodel::Expressions::ConstantRef ::= Express_metamodel::Expressions::ConstantRef::refers-to::Instances/Express_metamodel%3A%3AInstances%3A%3AConstant id::Core/Identifier ;
Express_metamodel::Statements::GroupCell ::= Express_metamodel::Statements::GroupCell::base-entity::Statements/Express_metamodel%3A%3AStatements%3A%3AVARExpression Express_metamodel::Statements::GroupCell::refers-to::Core/Express_metamodel%3A%3ACore%3A%3ASingleEntityType id::Core/Identifier ;
Express_metamodel::Instances::EntityValue ::= (Express_metamodel::Instances::EntityValue::corresponds to::Core/Express_metamodel%3A%3ACore%3A%3AEntityType)+ (Express_metamodel::Instances::EntityValue::describes::Instances/Express_metamodel%3A%3AInstances%3A%3AEntityInstance)+ ;
Express_metamodel::Instances::ListMember ::= Express_metamodel::Instances::ListMember::member-value::Core/Express_metamodel%3A%3ACore%3A%3AInstance position::MOF/Integer ;
Express_metamodel::Core::UniqueRule ::= Express_metamodel::Core::UniqueRule::domain::Core/Express_metamodel%3A%3ACore%3A%3AEntityType (Express_metamodel::Core::UniqueRule::key-component::Core/Express_metamodel%3A%3ACore%3A%3AAttribute)+ position::MOF/Integer ;
Express_metamodel::Core::InvertibleAttribute ::= (Express_metamodel::Core::InvertibleAttribute::inverse::Core/Express_metamodel%3A%3ACore%3A%3AInverseAttribute)+ (Express_metamodel::Core::InvertibleAttribute::range-type::Core/Express_metamodel%3A%3ACore%3A%3AEntityType)+ Express_metamodel::Core::InvertibleAttribute::creates-relationship::Core/Express_metamodel%3A%3ACore%3A%3ARelationship (Express_metamodel::Core::InvertibleAttribute::referencing-type::Core/Express_metamodel%3A%3ACore%3A%3AEntityType)+ Express_metamodel::Core::InvertibleAttribute::models-role::Core/Express_metamodel%3A%3ACore%3A%3ARangeRole ;
Express_metamodel::Core::RangeRole ::= Express_metamodel::Core::RangeRole::domain-view::Core/Express_metamodel%3A%3ACore%3A%3AInvertibleAttribute Express_metamodel::Core::RangeRole::in-relationship::Core/Express_metamodel%3A%3ACore%3A%3ARelationship Express_metamodel::Core::RangeRole::range::Core/Express_metamodel%3A%3ACore%3A%3AEntityType id::Core/Express_metamodel%3A%3ACore%3A%3AScopedId ;
Express_metamodel::Expressions::StringIndex ::= Express_metamodel::Expressions::StringIndex::first-code::Core/Express_metamodel%3A%3ACore%3A%3AExpression Express_metamodel::Expressions::StringIndex::last-code::Core/Express_metamodel%3A%3ACore%3A%3AExpression ;
Express_metamodel::Expressions::EnumItemRef ::= Express_metamodel::Expressions::EnumItemRef::refers-to::Instances/Express_metamodel%3A%3AInstances%3A%3AEnumerationItem id::Core/Identifier ;
Express_metamodel::Core::LengthConstraint ::= maxLength::MOF/Integer isFixed::MOF/Boolean ;
Express_metamodel::Statements::StatementBlock ::= (Express_metamodel::Statements::StatementBlock::body-statements_Statement::Algorithms/Express_metamodel%3A%3AAlgorithms%3A%3AStatement)+ delimited::MOF/Boolean ;
Express_metamodel::Instances::Population ::= (Express_metamodel::Instances::Population::composition_EntityInstance::Instances/Express_metamodel%3A%3AInstances%3A%3AEntityInstance)+ (Express_metamodel::Instances::Population::composition_Instance::Core/Express_metamodel%3A%3ACore%3A%3AInstance)+ (Express_metamodel::Instances::Population::governing-schema::Core/Express_metamodel%3A%3ACore%3A%3ASchema)+ ;
Express_metamodel::Algorithms::Statement ::= Express_metamodel::Algorithms::Statement::in-block::Statements/Express_metamodel%3A%3AStatements%3A%3AStatementBlock (Express_metamodel::Algorithms::Statement::body-statements_SkipStatement::Statements/Express_metamodel%3A%3AStatements%3A%3ASkipStatement)+ (Express_metamodel::Algorithms::Statement::body-statements_EscapeStatement::Statements/Express_metamodel%3A%3AStatements%3A%3AEscapeStatement)+ Express_metamodel::Algorithms::Statement::controlled-by::Statements/Express_metamodel%3A%3AStatements%3A%3ARepeatStatement Express_metamodel::Algorithms::Statement::implements::Algorithms/Express_metamodel%3A%3AAlgorithms%3A%3AAlgorithm text::Core/ExpressText ;
Express_metamodel::Expressions::ActualParameter ::= Express_metamodel::Expressions::ActualParameter::in-ProcedureCall::Statements/Express_metamodel%3A%3AStatements%3A%3AProcedureCall Express_metamodel::Expressions::ActualParameter::in-FunctionCall::Expressions/Express_metamodel%3A%3AExpressions%3A%3AFunctionCall Express_metamodel::Expressions::ActualParameter::formal-parameter::Algorithms/Express_metamodel%3A%3AAlgorithms%3A%3AParameter Express_metamodel::Expressions::ActualParameter::actual-referent::Statements/Express_metamodel%3A%3AStatements%3A%3AVARExpression Express_metamodel::Expressions::ActualParameter::actual-value::Core/Express_metamodel%3A%3ACore%3A%3AExpression position::MOF/Integer ;
Express_metamodel::Core::ExplicitAttribute ::= Express_metamodel::Core::ExplicitAttribute::of-entity::Core/Express_metamodel%3A%3ACore%3A%3ASingleEntityType isOptional::MOF/Boolean ;
Express_metamodel::Core::DomainRule ::= Express_metamodel::Core::DomainRule::domain::Core/Express_metamodel%3A%3ACore%3A%3ANamedType position::MOF/Integer ;
Express_metamodel::Statements::AliasVariable ::= Express_metamodel::Statements::AliasVariable::namespace::Statements/Express_metamodel%3A%3AStatements%3A%3AAliasStatement Express_metamodel::Statements::AliasVariable::referent::Statements/Express_metamodel%3A%3AStatements%3A%3AVARExpression ;
Express_metamodel::Algorithms::ActualAGGREGATEType ::= Express_metamodel::Algorithms::ActualAGGREGATEType::upper-bound::Core/Express_metamodel%3A%3ACore%3A%3ASizeConstraint Express_metamodel::Algorithms::ActualAGGREGATEType::refers-to::Algorithms/Express_metamodel%3A%3AAlgorithms%3A%3AActualStructure Express_metamodel::Algorithms::ActualAGGREGATEType::member-type::Core/Express_metamodel%3A%3ACore%3A%3AVariableType Express_metamodel::Algorithms::ActualAGGREGATEType::lower-bound::Core/Express_metamodel%3A%3ACore%3A%3ASizeConstraint label::Core/Identifier ;
Express_metamodel::Expressions::ParameterRef ::= Express_metamodel::Expressions::ParameterRef::refers-to::Algorithms/Express_metamodel%3A%3AAlgorithms%3A%3AParameter id::Core/Identifier ;
Express_metamodel::Statements::VARCell ::= Express_metamodel::Statements::VARCell::refers-to::Algorithms/Express_metamodel%3A%3AAlgorithms%3A%3AVARVariable id::Core/Identifier ;
Express_metamodel::Core::DomainRole ::= Express_metamodel::Core::DomainRole::range-view::Core/Express_metamodel%3A%3ACore%3A%3AInverseAttribute Express_metamodel::Core::DomainRole::domain::Core/Express_metamodel%3A%3ACore%3A%3AEntityType Express_metamodel::Core::DomainRole::in-relationship::Core/Express_metamodel%3A%3ACore%3A%3ARelationship id::Core/Express_metamodel%3A%3ACore%3A%3AScopedId ;
Express_metamodel::Core::SelectType ::= (Express_metamodel::Core::SelectType::allowed-types::Core/Express_metamodel%3A%3ACore%3A%3ANamedType)+ (Express_metamodel::Core::SelectType::extension::Core/Express_metamodel%3A%3ACore%3A%3ASelectType)+ Express_metamodel::Core::SelectType::base::Core/Express_metamodel%3A%3ACore%3A%3ASelectType (Express_metamodel::Core::SelectType::select-list::Core/Express_metamodel%3A%3ACore%3A%3ANamedType)+ isExtensible::MOF/Boolean isEntity::MOF/Boolean ;
Express_metamodel::Expressions::AggregateInitializer ::= Express_metamodel::Expressions::AggregateInitializer::result-value::Instances/Express_metamodel%3A%3AInstances%3A%3AGenericAggregate (Express_metamodel::Expressions::AggregateInitializer::bindings::Expressions/Express_metamodel%3A%3AExpressions%3A%3AMemberBinding)+ ;
Express_metamodel::Statements::Assignment ::= Express_metamodel::Statements::Assignment::assigned-value::Core/Express_metamodel%3A%3ACore%3A%3AExpression Express_metamodel::Statements::Assignment::variable::Statements/Express_metamodel%3A%3AStatements%3A%3AVARExpression ;
Express_metamodel::Rules::GlobalRule ::= Express_metamodel::Rules::GlobalRule::supporting-body::Algorithms/Express_metamodel%3A%3AAlgorithms%3A%3AStatement (Express_metamodel::Rules::GlobalRule::constrained-extents::Rules/Express_metamodel%3A%3ARules%3A%3AExtent)+ (Express_metamodel::Rules::GlobalRule::contains-rules::Rules/Express_metamodel%3A%3ARules%3A%3ANamedRule)+ ;
Express_metamodel::Core::InverseAttribute ::= Express_metamodel::Core::InverseAttribute::models-role::Core/Express_metamodel%3A%3ACore%3A%3ADomainRole Express_metamodel::Core::InverseAttribute::explicit::Core/Express_metamodel%3A%3ACore%3A%3AInvertibleAttribute isUnique::MOF/Boolean ;
--------------------metamodels::EXPRESSb.bgf--------------------
CaseStatement ::= (cases::statements/CaseAction)+ selectionExpression::core/Expression ;
Coercion ::= operand::core/Expression targetType::core/VariableType ;
StatementBlock ::= (bodyStatements_Statement::algorithms/Statement)+ delimited::mof/Boolean ;
AttributeCell ::= refersTo::core/ExplicitAttribute baseEntity::statements/VARExpression id::core/Identifier ;
DomainRole ::= rangeView::core/InverseAttribute domain::core/EntityType id::core/ScopedId ;
AGGREGATEType ::= upperBound::core/SizeConstraint memberType::core/ParameterType constraint::algorithms/ActualStructureConstraint lowerBound::core/SizeConstraint ;
ListMember ::= memberValue::core/Instance position::mof/Integer ;
AttributeRef ::= refersTo::core/Attribute id::core/Identifier ;
FunctionCall ::= (actualParameters::expressions/ActualParameter)+ invokesFunction::algorithms/Function returnsResult::algorithms/FunctionResult ;
SelectType ::= (allowedTypes::core/NamedType)+ (extension::core/SelectType)+ base::core/SelectType (selectList::core/NamedType)+ isExtensible::mof/Boolean isEntity::mof/Boolean ;
RepeatStatement ::= whileExpression::core/Expression body::algorithms/Statement controlVariable::statements/ControlVariable untilExpression::core/Expression ;
Population ::= (compositionEntityInstance::instances/EntityInstance)+ (compositionInstance::core/Instance)+ (governingSchema::core/Schema)+ ;
Assignment ::= assignedValue::core/Expression variable::statements/VARExpression ;
InverseAttribute ::= modelsRole::core/DomainRole explicit::core/InvertibleAttribute isUnique::mof/Boolean ;
ScopedId ::= localName::core/Identifier definingScope::core/Scope ;
MemberBinding ::= repetition::expressions/RepeatCount (toSlot::instances/ListMember)+ memberValue::core/Expression position::mof/Integer ;
ExtentRef ::= refersTo::core/NamedType id::core/Identifier ;
AttributeBinding ::= attributeValue::core/Expression toValue::instances/AttributeValue attribute::core/ExplicitAttribute position::mof/Integer ;
GroupCell ::= baseEntity::statements/VARExpression refersTo::core/SingleEntityType id::core/Identifier ;
QueryExpression ::= selectCondition::core/Expression queryVariable::expressions/QueryVariable aggregateOperand::core/Expression ;
GlobalRule ::= supportingBody::algorithms/Statement (constrainedExtents::rules/Extent)+ (containsRules::rules/NamedRule)+ ;
EntityType ::= (playsRole::core/Role)+ (redeclarations::core/Redeclaration)+ (attributes::core/Attribute)+ (playsRangeRole::core/RangeRole)+ declares::core/SingleEntityType (extension::rules/Extent)+ (invertibleAttributes::core/InvertibleAttribute)+ (playsDomainRole::core/DomainRole)+ (uniqueRules::core/UniqueRule)+ (usedIn::core/InvertibleAttribute)+ (subtypeOf::core/EntityType)+ isAbstract::mof/Boolean ;
EnumerationItem ::= declaredIn::core/EnumerationType position::mof/Integer ;
ControlVariable ::= boundValue::core/Expression initialValue::core/Expression increment::core/Expression ;
Relationship ::= domain::core/DomainRole roles::core/Role basedOn::core/InvertibleAttribute range::core/RangeRole ;
VariableRef ::= refersTo::algorithms/NamedVariable id::core/Identifier ;
SubtypeConstraint ::= (constrainedSubtypes::rules/Extent)+ equivalentRule::core/Expression collection::rules/SupertypeRule ;
AttributeValue ::= actualValue::core/Instance attribute::core/ExplicitAttribute ;
Statement ::= inBlock::statements/StatementBlock (bodyStatementsSkipStatement::statements/SkipStatement)+ (bodyStatementsEscapeStatement::statements/EscapeStatement)+ controlledBy::statements/RepeatStatement implements::algorithms/Algorithm text::core/ExpressText ;
GeneralARRAYType ::= hiIndex::core/ArrayBound loIndex::core/ArrayBound isOptional::mof/Boolean ;
ParameterRef ::= refersTo::algorithms/Parameter id::core/Identifier ;
Extent ::= (constraints::rules/SubtypeConstraint)+ (content::instances/EntityInstance)+ withinPopulation::instances/Population (constraintRules::rules/GlobalRule)+ forType::core/EntityType id::core/ScopedId ;
Redeclaration ::= derivation::core/Expression restrictedType::core/AttributeType refines::core/Redeclaration upperBound::core/SizeConstraint lowerBound::core/SizeConstraint scope::core/EntityType originalAttribute::core/Attribute refinedRole::core/Role position::mof/Integer isMandatory::mof/Boolean alias::core/ScopedId ;
SingleEntityValue ::= equivalent::instances/PartialEntityValue ofType::core/SingleEntityType (properties::instances/AttributeValue)+ ;
BinaryOperation ::= leftOperand::core/Expression rightOperand::core/Expression operator::expressions/BinaryOperator ;
ArrayBound ::= boundExpression::core/Expression bound::mof/Integer ;
SingleEntityType ::= (declaresExplicitAttribute::core/ExplicitAttribute)+ (declaresAttribute::core/Attribute)+ declaredIn::core/EntityType equivalent::core/PartialEntityType id::core/ScopedId ;
Constant ::= valueExpression::core/Expression actualValue::core/Instance dataType::core/InstantiableType ;
AggregateInitializer ::= resultValue::instances/GenericAggregate (bindings::expressions/MemberBinding)+ ;
RoleName ::= refersTo::core/Attribute represents::core/ScopedId ;
Schema ::= (documentation::core/Remark)+ (interfaces::core/InterfacedElement)+ (schemaElements::core/SchemaElement)+ (interfacedElements::core/SchemaElement)+ name::core/Identifier version::core/Identifier ;
MemberCell ::= indexValue::core/Expression baseAggregate::statements/VARExpression ;
EntityInstance ::= state::instances/EntityValue (instanceOf::core/EntityType)+ id::instances/EntityName ;
Expression ::= evaluation::core/Instance interpretationContext::core/Scope dataType::core/DataType text::core/ExpressText ;
PartialEntityConstructor ::= resultValue::instances/PartialEntityValue attributeGroup::core/SingleEntityType (bindings::expressions/AttributeBinding)+ id::core/Identifier ;
NamedRule ::= assertsExpression::core/Expression position::mof/Integer ;
GroupRef ::= refersTo::core/SingleEntityType id::core/Identifier ;
InvertibleAttribute ::= (inverse::core/InverseAttribute)+ (rangeType::core/EntityType)+ createsRelationship::core/Relationship (referencingType::core/EntityType)+ modelsRole::core/RangeRole ;
ArrayMember ::= memberValue::core/Instance index::mof/Integer ;
RangeRole ::= domainView::core/InvertibleAttribute range::core/EntityType id::core/ScopedId ;
IfStatement ::= ifCondition::core/Expression elseActions::algorithms/Statement thenActions::algorithms/Statement ;
BinaryIndex ::= firstBit::core/Expression lastBit::core/Expression ;
ProcedureCall ::= invokes::algorithms/Procedure (actualParameters::expressions/ActualParameter)+ ;
SupertypeRule ::= namedSupertype::core/EntityType (constraints::rules/SubtypeConstraint)+ assertsAbstract::mof/Boolean ;
ConstantRef ::= refersTo::instances/Constant id::core/Identifier ;
EntityValue ::= (correspondsTo::core/EntityType)+ (describes::instances/EntityInstance)+ ;
CaseAction ::= (labelValue::core/Expression)+ action::algorithms/Statement isDefault::mof/Boolean ;
ActualARRAYType ::= hiIndex::core/ArrayBound loIndex::core/ArrayBound isOptional::mof/Boolean ;
ActualGenericType ::= refersTo::algorithms/ActualDataType isEntity::mof/Boolean label::core/Identifier ;
BagMember ::= memberValue::core/Instance count::mof/Integer ;
ActualStructureConstraint ::= matchingStructure::core/AGGREGATEType requiredStructure::algorithms/ActualStructure label::core/Identifier ;
StringIndex ::= firstCode::core/Expression lastCode::core/Expression ;
Remark ::= (describesSchema::core/Schema)+ appearsIn::core/Scope (describesElement::core/NamedElement)+ isTagged::mof/Boolean isTail::mof/Boolean text::core/ExpressText ;
AliasStatement ::= bindsToReference::statements/VARExpression body::algorithms/Statement aliasVariable::statements/AliasVariable ;
EnumItemRef ::= refersTo::instances/EnumerationItem id::core/Identifier ;
VariableCell ::= refersTo::algorithms/Variable id::core/Identifier ;
ActualParameter ::= inProcedureCall::statements/ProcedureCall inFunctionCall::expressions/FunctionCall formalParameter::algorithms/Parameter actualReferent::statements/VARExpression actualValue::core/Expression position::mof/Integer ;
UnaryOperation ::= unaryOperand::core/Expression operator::expressions/UnaryOperator ;
ARRAYType ::= loIndex::core/ArrayBound hiIndex::core/ArrayBound isOptional::mof/Boolean ;
GenericType ::= constraint::algorithms/ActualTypeConstraint isEntity::mof/Boolean ;
InterfacedElement ::= interfacingSchema::core/Schema refersTo::core/SchemaElement isUSE::mof/Boolean interfacedId::core/ScopedId ;
UniqueRule ::= domain::core/EntityType (keyComponent::core/Attribute)+ position::mof/Integer ;
ActualAGGREGATEType ::= upperBound::core/SizeConstraint refersTo::algorithms/ActualStructure memberType::core/VariableType lowerBound::core/SizeConstraint label::core/Identifier ;
VARCell ::= refersTo::algorithms/VARVariable id::core/Identifier ;
TypeName ::= refersTo::core/NamedType represents::core/ScopedId ;
ActualTypeConstraint ::= matchingType::core/GenericType requiredType::algorithms/ActualDataType label::core/Identifier ;
LengthConstraint ::= maxLength::mof/Integer isFixed::mof/Boolean ;
EnumerationType ::= (values::instances/EnumerationItem)+ (declaredItems::instances/EnumerationItem)+ (extension::core/EnumerationType)+ base::core/EnumerationType isExtensible::mof/Boolean ;
--------------------metamodels::EclipseLaunchConfigurations.bgf--------------------
ListEntry ::= listAttribute::ListAttribute value::String ;
LaunchConfiguration ::= type::String (attributes::Attribute)+ ;
--------------------metamodels::EclipsePlugIn.bgf--------------------
Extension ::= name::String id::String isConfiguredInto::ExtensionPoint ;
Librairy ::= name::String plugIn::PlugIn (classes::Class)+ ;
Description ::= xmlSchema::String (extensionPoints::ExtensionPoint)+ ;
Class ::= name::String librairy::Librairy ;
PlugIn ::= id::String displayableName::String version::String supplier::String (configures::Extension)+ (extensionPoints::ExtensionPoint)+ (requires::PlugIn)+ (uses::Librairy)+ ;
ExtensionPoint ::= name::String id::String application::Application (descriptions::Description)+ plugIn::PlugIn ;
Application ::= name::String version::String author::String (extensionPoints::ExtensionPoint)+ ;
--------------------metamodels::Family.bgf--------------------
Person ::= firstName::String closestFriend::Person (emailAddresses::String)+ ;
Family ::= name::String (members::Person)+ ;
--------------------metamodels::FeatureDiagrams.bgf--------------------
ORGroup ::= preliminary::Boolean name::String (no_src::Node)+ (co_dst::Child)+ ;
Child ::= (cn_src::Node)+ (cx_src::XORGroup)+ (co_src::ORGroup)+ ;
Attribute ::= description::String editable::Boolean key::Boolean value::String name::String node::Node ;
XORGroup ::= preliminary::Boolean name::String (nx_src::Node)+ (cx_dst::Child)+ ;
Root ::= description::String preliminary::Boolean object::String (attributes::Attribute)+ (no_dst::ORGroup)+ (nx_dst::XORGroup)+ (cn_dst::Child)+ ;
Node ::= Root ;
 Node ::= Child ;
 Node ::= description::String preliminary::Boolean object::String (attributes::Attribute)+ (no_dst::ORGroup)+ (nx_dst::XORGroup)+ (cn_dst::Child)+ ;
--------------------metamodels::GAIA.bgf--------------------
AgentType ::= (provides::Service)+ collaborates::AgentType agentType::AgentType (plays::Role)+ ;
Resource ::= name::String description::String (permitted_action::Action)+ environnement::Environnement ;
AssociationConnector ::= (actsOn::Resource)+ role::Role (permission::Permission)+ ;
Protocol ::= name::String initiator::String partner::String inputs::String outputs::String description::String ;
Communication ::= (observes::OrganizationalRule)+ protocol::Protocol ;
Role ::= (activity::Activity)+ (communication::Communication)+ (responsibility::Responsibility)+ actsOn::AssociationConnector ;
Service ::= inputs::String outputs::String pre-conditions::String post-conditions::String ;
Organization ::= collaborates::Organization interacts::Organization (member::AgentType)+ (observes::OrganizationalRule)+ ;
--------------------metamodels::FiniteStateMachine.bgf--------------------
StateMachine ::= rootFolder::RootFolder (state::State)+ (transition::Transition)+ ;
MgaObject ::= Transition ;
 MgaObject ::= State ;
 MgaObject ::= StateMachine ;
 MgaObject ::= name::String position::String ;
Transition ::= stateMachine::StateMachine associationStateState::AssociationStateState ;
AssociationStateState ::= transition::Transition (dstTransition::State)+ (srcTransition::State)+ ;
State ::= stateMachine::StateMachine (associationStateStatedst::AssociationStateState)+ (associationStateStatesrc::AssociationStateState)+ ;
RootFolder ::= name::String (rootFolders::RootFolder)+ (stateMachine::StateMachine)+ ;
--------------------metamodels::FlatSignalFlow.bgf--------------------
Receiver ::= name::String position::String actor::Actor associationReceiverQueue::AssociationReceiverQueue ;
RootContainer ::= name::String position::String rootFolder::RootFolder (actor::Actor)+ (inputSignal::InputSignal)+ (outputSignal::OutputSignal)+ (queue::Queue)+ ;
OutputSignal ::= name::String position::String rootContainer::RootContainer associationQueueTransmitter::AssociationQueueTransmitter ;
Actor ::= memory::String script::String file::String WCET::String name::String position::String rootContainer::RootContainer (transmitter::Transmitter)+ (receiver::Receiver)+ ;
InputSignal ::= name::String position::String rootContainer::RootContainer associationReceiverQueue::AssociationReceiverQueue ;
AssociationQueueTransmitter ::= (dstqueue::Queue)+ (srctransmitter::Transmitter)+ outputSignal::OutputSignal ;
AssociationReceiverQueue ::= (srcqueue::Queue)+ (dstreceiver::Receiver)+ inputSignal::InputSignal ;
Queue ::= name::String position::String rootContainer::RootContainer associationReceiverQueue::AssociationReceiverQueue associationQueueTransmitter::AssociationQueueTransmitter ;
Transmitter ::= name::String position::String actor::Actor associationQueueTransmitter::AssociationQueueTransmitter ;
--------------------metamodels::GUI.bgf--------------------
Group ::= title::String layout::Layout description::String tabGroup::Tab (composants::Composant)+ ;
Row ::= rowList::ComboBox text::String (listItems::Item)+ ;
TextArea ::= text::String nbRows::Integer ;
Column ::= title::String columnTab::Table ;
Tab ::= title::String gui::GUI group::Group ;
Item ::= itemList::Row text::String ;
--------------------metamodels::GWPNV0.bgf--------------------
Net ::= (place::Place)+ (transition::Transition)+ ;
Place ::= net::Net (src::Transition)+ (dst::Transition)+ ;
Transition ::= net::Net (src::Place)+ (dst::Place)+ ;
--------------------metamodels::GWPNV1.bgf--------------------
Net ::= (place::Place)+ (transition::Transition)+ ;
Place ::= net::Net (src::Transition)+ (dst::Transition)+ ;
Transition ::= net::Net (src::Place)+ (dst::Place)+ ;
--------------------metamodels::GWPNV2.bgf--------------------
PTArc ::= dst::Transition src::Place ;
Net ::= (place::Place)+ (transition::Transition)+ ;
Place ::= net::Net (out::PTArc)+ (in::TPArc)+ ;
TPArc ::= src::Transition dst::Place ;
Transition ::= net::Net (in::PTArc)+ (out::TPArc)+ ;
--------------------metamodels::GWPNV3.bgf--------------------
PTArc ::= dst::Transition src::Place ;
Net ::= (place::Place)+ (transition::Transition)+ ;
Place ::= net::Net (out::PTArc)+ (in::TPArc)+ ;
TPArc ::= src::Transition dst::Place ;
Transition ::= net::Net (in::PTArc)+ (out::TPArc)+ ;
--------------------metamodels::GWPNV4.bgf--------------------
PTArc ::= dst::α src::α ;
Net ::= (place::α)+ (transition::α)+ ;
Place ::= net::α (out::α)+ (in::α)+ ;
TPArc ::= src::α dst::α ;
Transition ::= net::α (in::α)+ (out::α)+ ;
--------------------metamodels::GWPNV5.bgf--------------------
PTArc ::= dst::α src::α ;
Net ::= (place::α)+ (transition::α)+ ;
Place ::= net::α (out::α)+ (in::α)+ (token::α)+ ;
TPArc ::= src::α dst::α ;
Transition ::= net::α (in::α)+ (out::α)+ ;
--------------------metamodels::Gantt.bgf--------------------
Date ::= year::Integer month::Integer day::Integer ;
Tasks ::= color::String (tasks::Task)+ ;
Depend ::= id::String type::Integer difference::Integer hardness::String task::Task ;
Ressource ::= Id::String name::String fonction::String contact::String phone::String ;
Project ::= name::String company::String viewDate::Date viewIndex::Date ganttDividerLocation::Integer ressourceDividerLocation::Integer webLink::String tasks::Tasks (ressources::Ressource)+ (allocations::Allocation)+ ;
Task ::= id::String name::String meeting::Boolean color::String expand::Boolean complete::Integer duration::Integer priority::Integer start::Date (depends::Depend)+ ;
Allocation ::= taskId::String ressourceId::String name::String function::String responsible::Boolean load::Integer ;
--------------------metamodels::GenericEditor.bgf--------------------
Font ::= font::String bold::Boolean italic::Boolean ;
GroupElement ::= indent::Indent (element::Element)+ ;
Block ::= blockbegin::String blockend::String ;
Editor ::= extension::String (abstractElements::AbstractElement)+ ;
Indent ::= retrait::String groupElementIndent::GroupElement ;
Element ::= element::String groupElement::GroupElement ;
Format ::= color::Color font::Font ;
Color ::= red::Integer green::Integer blue::Integer ;
--------------------metamodels::GenericOutline.bgf--------------------
LabelSuite ::= label::String methodCall::String ;
Label ::= label::String methodCall::String (labelSuite::LabelSuite)+ ;
Node ::= name::String label::Label icon::String outline::Outline (mapping::Map)+ ;
Outline ::= extension::String (nodes::Node)+ ;
--------------------metamodels::GeoTrans.bgf--------------------
Param ::= name::String param::Double geoTransfo::GeoTransfo ;
GeoTransfos ::= name::String (transfos::GeoTransfo)+ ;
GeoTransfo ::= name::String freeze::Boolean (subGeoTransfos::GeoTransfo)+ superGeoTransfo::GeoTransfo (params::Param)+ ;
--------------------metamodels::Grafcet.bgf--------------------
TransitionToStep ::= from::Transition to::Step ;
StepToTransition ::= from::Step to::Transition ;
Step ::= isInitial::Boolean isActive::Boolean action::String (incomingConnections::TransitionToStep)+ (outgoingConnections::StepToTransition)+ ;
Transition ::= condition::String (incomingConnections::StepToTransition)+ (outgoingConnections::TransitionToStep)+ ;
Grafcet ::= (elements::Element)+ (connections::Connection)+ ;
--------------------metamodels::HAL.bgf--------------------
Ouvrage ::= urldoi::String edcom::String annee::String page::String ;
Conference ::= urldoi::String titconf::String ville::String pays::String edcom::String annee::String page::String edsci::String serie::String ;
ArtOuvrage ::= urldoi::String titouv::String edcom::String annee::String edsci::String serie::String ;
MetaArtType ::= domain::String abstract::String referenceBiblio::ReferenceBiblioType ;
Communication ::= urldoi::String titconf::String ville::String pays::String edcom::String annee::String page::String edsci::String serie::String ;
ArtJournal ::= urldoi::String journal::String volume::String page::String annee::String ;
Autre ::= urldoi::String annee::String description::String ;
HAL ::= connexion::Connexion (contents::Entry)+ ;
Laboratoire ::= id::Integer metas::AbstractMetaLab ;
MetaArtNoticeType ::= domain::String abstract::String referenceBiblio::ReferenceBiblioType ;
Brevet ::= datebrevet::String numbrevet::String page::String pays::String ;
ArtRevue ::= urldoi::String journal::String volume::String page::String annee::String ;
WebLink ::= identifiant::String server::Server ;
AffiliationType ::= (institution::String)+ (prive::String)+ (ecole::String)+ (universite::String)+ ;
Connexion ::= login::String password::String ;
ArticleRetro ::= dateRedaction::String fichiers::AbstractDepot ;
AutLabType ::= (auteurs::Auteur)+ (laboratoires::Laboratoire)+ ;
Workshop ::= urldoi::String titconf::String ville::String pays::String edcom::String annee::String page::String edsci::String serie::String ;
These ::= orgthe::String niveau::String defencedate::String directeur::String codirecteur::String ;
Auteur ::= nom::String prenom::String autrePrenom::String email::String urlPerso::String lab::Laboratoire ;
--------------------metamodels::HPROF.bgf--------------------
StackTraceElement ::= method::Method fileName::String line::Integer trace::Trace ;
Date ::= day::Day month::Month dayOfMonth::Integer hour::Integer minutes::Integer seconds::Integer year::Integer ;
Time ::= rank::Integer self::Double accum::Double count::Integer trace::Trace method::Method ;
Profile ::= header::String (threadActions::ThreadAction)+ (traces::Trace)+ times::Times (methods::Method)+ ;
ThreadStart ::= obj::Integer name::String group::String ;
Times ::= unit::String total::Integer date::Date (elements::Time)+ ;
Trace ::= id::Integer threadId::Integer (elements::StackTraceElement)+ (times::Time)+ ;
ThreadEnd ::= id::Integer ;
Method ::= fullyQualifiedName::String (stackTraceElements::StackTraceElement)+ ;
--------------------metamodels::HierarchicalSignalFlow.bgf--------------------
Compound ::= (localPort::LocalPort)+ (base::Base)+ ;
Signal ::= base::Base asso_Port_Signal::Asso_Port_Signal ;
Primitive ::= compound::Compound (inputPort::InputPort)+ (outputPort::OutputPort)+ (signal::Signal)+ ;
Asso_Port_Signal ::= (src::Port)+ (dst::Port)+ signal::Signal ;
Base ::= Compound ;
 Base ::= Primitive ;
 Base ::= compound::Compound (inputPort::InputPort)+ (outputPort::OutputPort)+ (signal::Signal)+ ;
Port ::= InputPort ;
 Port ::= OutputPort ;
 Port ::= LocalPort ;
 Port ::= asso_Port_Signalsrc::Asso_Port_Signal asso_Port_Signaldst::Asso_Port_Signal ;
--------------------metamodels::HierarchicalStateMachine.bgf--------------------
OrState ::= rootFolder::RootFolder (state::State)+ init::Init (dataVar::DataVar)+ (stateDataRelation::StateDataRelation)+ (transition::Transition)+ (compoundState::CompoundState)+ ;
DataVar ::= (stateBase::StateBase)+ orState::OrState associationDataStateBase::AssociationDataStateBase ;
StateDateRelation ::= value::String color::String ;
AssociationDataStateBase ::= stateDataRelation::StateDataRelation (dataVar::DataVar)+ (stateBase::StateBase)+ ;
StateDataRelation ::= value::String color::String orState::OrState associationDataStateBase1::AssociationDataStateBase ;
CompoundState ::= OrState ;
 CompoundState ::= AndState ;
 CompoundState ::= andState::AndState orState::OrState ;
MgaObject ::= StateBase ;
 MgaObject ::= DataVar ;
 MgaObject ::= Transition ;
 MgaObject ::= StateDateRelation ;
 MgaObject ::= name::String position::String ;
Transition ::= guard::String trigger::String action::String isSync::Boolean orState::OrState associationStateState::AssociationStateState ;
StateBase ::= CompoundState ;
 StateBase ::= PrimitiveState ;
 StateBase ::= defaultTransition::String marked::Boolean (associationStateStatedst::AssociationStateState)+ (associationStateStatesrc::AssociationStateState)+ (data::DataVar)+ associationDataStateBase::AssociationDataStateBase ;
AssociationStateState ::= transition::Transition (dstTransition::StateBase)+ (srcTransition::StateBase)+ ;
RootFolder ::= name::String (rootFolders::RootFolder)+ (orState::OrState)+ ;
--------------------metamodels::HybridAutomata.bgf--------------------
FiniteTransition ::= trigger::String guard::String action::String ;
FiniteState ::= name::String position::String isInit::Boolean ;
--------------------metamodels::IEEE1471ConceptualModel.bgf--------------------
ArchitecturalDescription ::= (identifiesS::Stakeholder)+ (identifiesC::Concern)+ (selects::Viewpoint)+ (organizedBy::View)+ (aggregates::Model)+ ;
System ::= (fulfils::Mission)+ inhabits::Environment hasAn::Architecture (has::Stakeholder)+ ;
Mission ::= name::String content::String ;
Viewpoint ::= hasSource::LibraryViewpoint (usedToCover::Concern)+ (establishesMethodsFor::Model)+ ;
Model ::= (participatesInV::View)+ participatesInAD::ArchitecturalDescription ;
View ::= conformsTo::Viewpoint (consitsOf::Model)+ ;
LibraryViewpoint ::= name::String content::String ;
IEEE1471Model ::= system::System environment::Environment (missions::Mission)+ architecture::Architecture (stakeholders::Stakeholder)+ (concerns::Concern)+ (viewpoints::Viewpoint)+ (libraryViewpoints::LibraryViewpoint)+ architecturalDescription::ArchitecturalDescription rationale::Rationale ;
--------------------metamodels::IRL.bgf--------------------
RuleCondition ::= conditionExpression::IRLExpressions/Expression ruleDefinitionCondition::IRLRules/RuleDefinition ;
RuleDefinition ::= binding::IRLRules/Binding condition::IRLRules/RuleCondition (actions::IRLRules/RuleAction)+ ;
VariableDeclaration ::= varName::String (variableExp::IRLExpressions/VariableExpression)+ ;
OperationCallExpression ::= (arguments::IRLExpressions/Expression)+ operationName::String signature::String ;
LoopExpression ::= body::IRLExpressions/Expression (iterators::IRLExpressions/Iterator)+ ;
Element ::= NamedElement ;
 Element ::= Extended ;
 Element ::= Typed ;
 Element ::= RuleSetDeclaration ;
 Element ::= Binding ;
 Element ::= RuleCondition ;
 Element ::= RuleAction ;
 Element ::= location::String (commentsBefore::String)+ (commentsAfter::String)+ ;
PropertyDefinition ::= propertyDefinitionOwner::RuleSet (ruleSetDeclarations::IRLDeclarations/RuleSetDeclaration)+ semicoloneOpt::Boolean ;
ImportDefinition ::= importDefinitionOwners::RuleSet dotStar::Boolean ;
RuleSet ::= (importDefinitions::ImportDefinition)+ propertyDefinitions::IRLDeclarations/PropertyDefinition (rulesetElementDefinitions::IRLRules/RulesetElementDefinition)+ ;
Binding ::= bindingOwner::IRLRules/RuleDefinition (ruleVariable::IRLRules/RuleVariable)+ ;
ClassInstancesDeclaration ::= extendedIdentifier::ExtendedIdentifier ;
VariableExpression ::= referredVariable::IRLDeclarations/VariableDeclaration name::String ;
ExtendedIdentifier ::= parentIdentifier::ExtendedIdentifier extendedIdentifierOwner::Extended ;
CollectionOperationRuleVariable ::= operationName::String collectWhere::IRLExpressions/Expression ;
ModifyAction ::= objValue::IRLExpressions/Expression (modifiedArguments::IRLExpressions/Expression)+ ;
--------------------metamodels::IEEE1471ViewpointM2.bgf--------------------
Mapping ::= input::Language ouput::Language ;
ModelOrganization ::= (techniques::Technique)+ guidance::Language ;
Rule ::= ModelOrganization ;
 Rule ::= (techniques::Technique)+ guidance::Language ;
Viewpoint ::= (source::ViewpointImport)+ (covers::Concern)+ (supplierDependency::ViewpointDependency)+ (clientDependency::ViewpointDependency)+ isImportTo::Stakeholder (architecturalConstruct::ArchitecturalConstruct)+ process::Process ;
ViewpointDependency ::= supplier::Viewpoint client::Viewpoint ;
Technique ::= (methods::AnalysisMethod)+ (applies::Rule)+ ;
--------------------metamodels::IMSTransactionMessage.bgf--------------------
ApplicationData ::= (languageElements::TDLangElement)+ (fieldComponents::Field)+ ;
IMSTransactionMessage ::= OIMAPrefixFormat::OIMAPrefixFormats standardFieldsFlag::Boolean OIMAPrefixComponent::OIMAPrefix standardFieldComponent::StandardFields messageComponent::ApplicationData ;
StandardFields ::= length::TwoByteField reservedField::TwoByteField transactionCode::VariableLengthField ;
OIMAPrefix ::= controlDataComponent::ControlData stateDataComponent::StateData securityDataComponent::SecurityData userDataComponent::UserData ;
--------------------metamodels::M.bgf--------------------
WhereExpression ::= type::Types/DerivedType (queryExpressions::Expressions/QueryExpression)+ ;
Collection ::= (qualifiers::String)+ identifier::String ;
InExpression ::= value::Expressions/ValueExpression collection::Expressions/CollectionExpression ;
StandardValueExpression ::= context::Expressions/ValueExpression value::String ;
EqualExpression ::= leftValue::Expressions/ValueExpression rightValue::Expressions/ValueExpression ;
Module ::= (imports::ImportDirective)+ (exports::ExportDirective)+ (moduleMembers::ModuleMember)+ ;
MElementReference ::= alias::String referencedElement::MElement ;
ExportDirective ::= module::Module (exportedElements::ModuleMember)+ ;
Field ::= owner::Types/DerivedType type::Types/TypeReference ;
ImportDirective ::= module::Module (importedElements::MElementReference)+ ;
Language ::= module::Module ;
InitializationExpression ::= type::Types/DerivedType (values::Value)+ ;
DerivedType ::= (supertypes::Types/TypeReference)+ (fields::Types/Field)+ initializationExpression::Expressions/InitializationExpression whereExpression::Expressions/WhereExpression expression::Expressions/Expression ;
CollectionExpression ::= inExpression::Expressions/InExpression collectionValue::Expressions/ValueExpression ;
ComputedValue ::= (qualifiers::String)+ identifier::String ;
Entity ::= module::Module ;
TypeReference ::= subtype::Types/DerivedType field::Types/Field lowerBound::Integer upperBound::Integer ;
--------------------metamodels::Jess.bgf--------------------
ModuleDefinition ::= moduleName::ValidIdentifier documentation::Str ;
FactDefinition ::= factName::ValidIdentifier documentation::Str (fact::Expression)+ ;
SlotOp ::= slotIdent::SlotName operator::ValidIdentifier exp::Expression ;
DeclareVar ::= (var::JessVariable)+ node::Expression max::Expression ;
QueryDefinition ::= queryName::ValidIdentifier documentation::Str declare::DeclareVar (expressions::Expression)+ ;
VarDefinition ::= jessVar::JessVariable eq::ValidIdentifier expression::Expression ;
IfExpression ::= ifthen::ConditionAction (elifthen::ElifConditionAction)+ (else::Expression)+ ;
ForExp ::= initializer::Expression condition::Expression increment::Expression (expressions::Expression)+ ;
ForeachExp ::= var::JessVariable list::Expression (expressions::Expression)+ ;
TemplateExpression ::= templateName::ValidIdentifier firstSlot::SlotOp (slotOp::SlotOp)+ ;
ConditionAction ::= condition::Expression (actions::Expression)+ ;
RuleDefinition ::= ruleName::ValidIdentifier documentation::Str declare::DeclareRule (conditions::Expression)+ (functionCall::UseFuncExp)+ ;
MultiSlotDef ::= slotName::SlotName (optionals::SlotOptions)+ ;
TemplateDefinition ::= templateName::ValidIdentifier (inherits::ValidIdentifier)+ documentation::Str declareBloc::DeclareBloc (slotDef::ASlotDef)+ ;
WhileExp ::= hasDo::Boolean boolExp::Expression (actions::Expression)+ ;
AdviceDefinition ::= direction::Advice op::Ident (advice::Expression)+ ;
FunctionDefinition ::= funcName::ValidIdentifier (parameters::JessVariable)+ (expressions::Expression)+ ;
DeclareBloc ::= slotSpecific::ValidIdentifier backchainReaction::ValidIdentifier fromClass::ValidIdentifier includeVariable::ValidIdentifier order::ValidIdentifier ;
SlotDef ::= slotName::SlotName (optionals::SlotOptions)+ ;
ASlotDef ::= SlotDef ;
 ASlotDef ::= MultiSlotDef ;
 ASlotDef ::= slotName::SlotName (optionals::SlotOptions)+ ;
DeclareRule ::= salience::Expression nodeIndexHash::Expression autoFocus::ValidIdentifier noLoop::ValidIdentifier ;
FuncCall ::= funcName::ValidIdentifier (funcParam::Expression)+ ;
SlotOptions ::= type::ValidIdentifier def::Expression defaultDyn::Expression (allowedValues::Expression)+ ;
--------------------metamodels::KDM.bgf--------------------
ControlElement ::= type::code/Datatype (entryFlow::action/EntryFlow)+ (codeElement::code/AbstractCodeElement)+ ;
AggregatedRelationship ::= from::core/KDMEntity to::core/KDMEntity (relation::core/KDMRelationship)+ density::core/Integer ;
ExceptionFlow ::= to::action/ActionElement from::action/ActionElement ;
Reads ::= to::code/DataElement from::action/ActionElement ;
Attribute ::= tag::core/String value::core/String ;
ClassUnit ::= isAbstract::core/Boolean (codeElement::code/CodeItem)+ ;
BuildResource ::= (implementation::core/KDMEntity)+ (groupedBuild::build/AbstractBuildElement)+ (buildElement::build/AbstractBuildElement)+ ;
DatatypeOf ::= to::code/Datatype from::data/ComplexContentType ;
ExtensionTo ::= to::data/ComplexContentType from::data/ComplexContentType ;
Expands ::= to::code/PreprocessorDirective from::code/PreprocessorDirective ;
Extends ::= to::code/Datatype from::code/Datatype ;
Spawns ::= to::platform/RuntimeResource from::action/ActionElement ;
WritesColumnSet ::= to::data/ColumnSet from::action/ActionElement ;
RangeType ::= lower::core/Integer upper::core/Integer ;
LinksTo ::= to::build/AbstractBuildElement from::build/SymbolicLink ;
ConceptualRelationship ::= to::core/KDMEntity from::conceptual/AbstractConceptualElement ;
InventoryItem ::= version::core/String path::core/String ;
TagDefinition ::= tag::core/String type::core/String ;
Throws ::= to::code/DataElement from::action/ActionElement ;
UIRelationship ::= to::core/KDMEntity from::ui/AbstractUIElement ;
InstanceOf ::= to::code/TemplateUnit from::code/AbstractCodeElement ;
PlatformRelationship ::= to::core/KDMEntity from::platform/AbstractPlatformElement ;
Includes ::= to::code/AbstractCodeElement from::code/PreprocessorDirective ;
UIAction ::= kind::core/String (UIElement::ui/UIEvent)+ ;
ConceptualFlow ::= to::conceptual/ConceptualContainer from::conceptual/ConceptualContainer ;
CodeRelationship ::= to::core/KDMEntity from::code/CodeItem ;
Redefines ::= to::code/PreprocessorDirective from::code/PreprocessorDirective ;
ParameterTo ::= to::code/CodeItem from::code/AbstractCodeElement ;
ExtensionFamily ::= (stereotype::kdm/Stereotype)+ name::core/String ;
UIFlow ::= to::ui/AbstractUIElement from::ui/AbstractUIElement ;
UILayout ::= to::ui/UIResource from::ui/UIResource ;
KeyRelation ::= to::data/UniqueKey from::data/ReferenceKey ;
SourceRef ::= (region::source/SourceRegion)+ language::core/String snippet::core/String ;
ManagesData ::= to::data/AbstractDataElement from::action/ActionElement ;
SourceFile ::= language::core/String encoding::core/String ;
Creates ::= to::code/Datatype from::action/ActionElement ;
SuppliedBy ::= to::build/Supplier from::build/AbstractBuildElement ;
HasType ::= to::code/Datatype from::code/CodeItem ;
Stereotype ::= (tag::kdm/TagDefinition)+ name::core/String type::core/String ;
EventRelationship ::= to::core/KDMEntity from::event/AbstractEventElement ;
DataElement ::= type::code/Datatype ext::core/String size::core/Integer (codeElement::code/Datatype)+ ;
ReadsUI ::= to::ui/UIResource from::action/ActionElement ;
BindsTo ::= to::platform/ResourceType from::platform/ResourceType ;
EventAction ::= kind::core/String (eventElement::event/Event)+ ;
Implements ::= to::code/CodeItem from::code/CodeItem ;
Requires ::= to::platform/AbstractPlatformElement from::platform/DeployedComponent ;
Imports ::= to::code/CodeItem from::code/CodeItem ;
BuildDescription ::= (source::source/SourceRef)+ text::core/String ;
DisplaysImage ::= to::source/Image from::action/ActionElement ;
ImplementationOf ::= to::code/CodeItem from::code/CodeItem ;
Dispatches ::= to::code/DataElement from::action/ActionElement ;
UsesType ::= to::code/Datatype from::action/ActionElement ;
ActionElement ::= kind::core/String (codeElement::code/AbstractCodeElement)+ (actionRelation::action/AbstractActionRelationship)+ ;
ConsumesEvent ::= to::event/Event from::event/Transition ;
WritesResource ::= to::platform/ResourceType from::action/ActionElement ;
TypedBy ::= to::data/ComplexContentType from::data/ContentItem ;
VariantTo ::= to::code/PreprocessorDirective from::code/PreprocessorDirective ;
NextState ::= to::event/State from::event/Transition ;
ManagesResource ::= to::platform/ResourceType from::action/ActionElement ;
Audit ::= description::core/String author::core/String date::core/String ;
GeneratedFrom ::= to::code/PreprocessorDirective from::code/AbstractCodeElement ;
HasState ::= to::event/AbstractEventElement from::action/ActionElement ;
CompliesTo ::= to::code/CodeItem from::action/ActionElement ;
Calls ::= to::code/ControlElement from::action/ActionElement ;
ContentRestriction ::= kind::core/String value::core/String ;
Produces ::= to::build/AbstractBuildElement from::build/BuildStep ;
ReadsColumnSet ::= to::data/ColumnSet from::action/ActionElement ;
ActionRelationship ::= to::core/KDMEntity from::action/ActionElement ;
Loads ::= to::platform/DeployedComponent from::action/ActionElement ;
ParameterUnit ::= kind::code/ParameterKind pos::core/Integer ;
StructureRelationship ::= to::core/KDMEntity from::structure/AbstractStructureElement ;
ReadsResource ::= to::platform/ResourceType from::action/ActionElement ;
PlatformAction ::= kind::core/String (platformElement::platform/PlatformEvent)+ ;
WritesUI ::= to::ui/UIResource from::action/ActionElement ;
Machine ::= (deployedComponent::platform/DeployedComponent)+ (deployedResource::platform/DeployedResource)+ ;
ProducesEvent ::= to::event/Event from::action/ActionElement ;
DependsOn ::= to::source/AbstractInventoryElement from::source/AbstractInventoryElement ;
BuildRelationship ::= to::core/KDMEntity from::build/AbstractBuildElement ;
MethodUnit ::= kind::code/MethodKind export::code/ExportKind ;
RestrictionOf ::= to::data/ComplexContentType from::data/ComplexContentType ;
ManagesUI ::= to::ui/UIResource from::action/ActionElement ;
DataRelationship ::= to::core/KDMEntity from::data/AbstractDataElement ;
SimpleContentType ::= (type::data/ComplexContentType)+ kind::core/String ;
DefinedBy ::= to::code/CodeItem from::action/ActionElement ;
DataAction ::= kind::core/String (implementation::action/ActionElement)+ (dataElement::data/DataEvent)+ ;
EntryFlow ::= to::action/ActionElement from::code/ControlElement ;
HasContent ::= to::data/AbstractDataElement from::action/ActionElement ;
ProducesDataEvent ::= to::data/DataEvent from::action/ActionElement ;
Consumes ::= to::build/AbstractBuildElement from::build/BuildStep ;
VisibleIn ::= to::code/CodeItem from::code/CodeItem ;
HasValue ::= to::code/CodeItem from::code/CodeItem ;
InventoryRelationship ::= to::core/KDMEntity from::source/AbstractInventoryElement ;
ReadsState ::= to::event/State from::action/ActionElement ;
Writes ::= to::code/DataElement from::action/ActionElement ;
Segment ::= (segment::kdm/Segment)+ (model::kdm/KDMModel)+ ;
ArrayType ::= size::core/Integer indexUnit::code/IndexUnit ;
Displays ::= to::ui/UIResource from::action/ActionElement ;
DescribedBy ::= to::build/BuildDescription from::build/BuildStep ;
SourceRegion ::= file::source/SourceFile startLine::core/Integer startPosition::core/Integer endLine::core/Integer endPosition::core/Integer language::core/String path::core/String ;
ContentItem ::= type::data/ComplexContentType (contentElement::data/AbstractContentElement)+ ;
ExitFlow ::= to::action/ActionElement from::action/ActionElement ;
ControlFlow ::= to::action/ActionElement from::action/ActionElement ;
ReferenceTo ::= to::data/ContentItem from::data/ContentItem ;
SupportedBy ::= to::build/Tool from::build/BuildStep ;
Addresses ::= to::code/ComputationalObject from::action/ActionElement ;
--------------------metamodels::KDMSimplified.bgf--------------------
KDMExtensionFamily ::= name::String (stereotype::Stereotype)+ ;
TagDefinition ::= tag::String type::String ;
Attribute ::= tag::String value::String ;
TaggedValue ::= value::String tag::TagDefinition ;
Stereotype ::= baseClass::String name::String family::KDMExtensionFamily extendedElement::ModelElement (tag::TagDefinition)+ ;
--------------------metamodels::KM3.bgf--------------------
EnumLiteral ::= name::String package::Package ;
Attribute ::= lower::Integer upper::Integer isOrdered::Boolean isUnique::Boolean owner::Class type::Classifier ;
Reference ::= isContainer::Boolean opposite::Reference ;
StructuralFeature ::= Attribute ;
 StructuralFeature ::= Reference ;
 StructuralFeature ::= lower::Integer upper::Integer isOrdered::Boolean isUnique::Boolean owner::Class type::Classifier ;
Class ::= isAbstract::Boolean (supertypes::Class)+ (structuralFeatures::StructuralFeature)+ ;
Package ::= (contents::ModelElement)+ metamodel::Metamodel ;
--------------------metamodels::Klaper.bgf--------------------
ActualParam ::= value::String serviceCall::ServiceCall ;
Resource ::= name::String type::String capacity::Integer schedulingPolicy::String description::String acquire::Acquire release::Release ;
InternalActivity ::= name::String repetition::String internalExecTime::String internalFailProb::String completionModel::String (serviceCall::ServiceCall)+ (predecessor::Step)+ (successor::Step)+ behavior::Behavior nestedBehavior::Behavior ;
Step ::= Start ;
 Step ::= End ;
 Step ::= Control ;
 Step ::= InternalActivity ;
 Step ::= ServiceCall ;
 Step ::= name::String repetition::String internalExecTime::String internalFailProb::String completionModel::String (serviceCall::ServiceCall)+ (predecessor::Step)+ (successor::Step)+ behavior::Behavior nestedBehavior::Behavior ;
End ::= name::String repetition::String internalExecTime::String internalFailProb::String completionModel::String (serviceCall::ServiceCall)+ (predecessor::Step)+ (successor::Step)+ behavior::Behavior nestedBehavior::Behavior ;
Release ::= resourceUnits::String resource::Resource ;
WorkLoad ::= workLoadType::String arrivalProcess::String population::String initialResource::String behavior::Behavior ;
Acquire ::= resourceUnits::String resource::Resource ;
Service ::= name::String formalParams::String speedAttr::String failAttr::String description::String (behavior::Behavior)+ (behaviorUsed::Behavior)+ (serviceCall::ServiceCall)+ ;
ServiceCall ::= resourceType::String serviceName::String isSynch::Boolean (actualParam::ActualParam)+ step::Step calledService::Service ;
Start ::= name::String repetition::String internalExecTime::String internalFailProb::String completionModel::String (serviceCall::ServiceCall)+ (predecessor::Step)+ (successor::Step)+ behavior::Behavior nestedBehavior::Behavior ;
Behavior ::= Step ;
 Behavior ::= stepn::Step (stepb::Step)+ service::Service (usedService::Service)+ workLoad::WorkLoad ;
--------------------metamodels::LQN.bgf--------------------
Activity ::= name::String arrival_Rate::Integer contained_In::Task replay_To::Entry (linkPrecedes::Link)+ (linkfollows::Link)+ (call::Call)+ phase::Phase entry::Entry task::Task ;
Date ::= day::String month::String year::String ;
Call ::= EntryCall ;
 Call ::= ActivityCall ;
 Call ::= toEntry::Entry num_Phases::Integer type::CallType (callPhase::CallPhase)+ activity::Activity entryreceives::Entry entrysends::Entry ;
CallPhase ::= mean_Calls::Integer refers_To::Phase (call::Call)+ ;
Phase ::= number::Integer type::PhaseType think_Time::Integer execution_Demand::Integer COV::Integer entry::Entry activity::Activity ;
Link ::= type::LinkType mean_Links::Integer fromActivity::Activity toActivity::Activity activityPrecedes::Activity activityfollows::Activity ;
LQN ::= name::String comment::String author::String created_On::Date modified_On::Date (task::Task)+ (processor::Processor)+ ;
Task ::= name::String type::TaskType priority::Integer mutliplicity::Integer replicas::Integer (entry::Entry)+ processor::Processor lqn::LQN (activity::Activity)+ ;
Entry ::= name::String num_Phase::Integer arrival_Rate::Integer contained_In::Task replay_To::Entry callreceives::Call callsends::Call (phase::Phase)+ activity::Activity task::Task ;
Processor ::= name::String scheduling::SchedulingType mutliplicity::Integer replicas::Integer spped::Integer task::Task lqn::LQN ;
--------------------metamodels::LaTeX.bgf--------------------
DocumentBody ::= (sections::Section)+ (bibliography::Bibliography)+ document::Document ;
Fax ::= value::String ;
EMail ::= value::String ;
Document ::= type::Type title::Title author::Author date::Date heading::Heading abstract::Abstract keywords::Keywords documentbody::DocumentBody ;
Organisation ::= (names::Name)+ adress::Adress heading::Heading ;
Type ::= value::String ;
Title ::= value::String ;
Cite ::= sectionbody::SectionBody value::String ;
Adress ::= value::String ;
Label ::= value::String ;
Item ::= itemscontainer::Items enumeratecontainer::Enumerate ;
Value ::= sectionbody::SectionBody value::String ;
Phone ::= value::String ;
Date ::= value::String ;
Name ::= author::Author organisation::Organisation ;
Keywords ::= value::String ;
Citation ::= label::Label author::Author description::Description bibliography::Bibliography ;
SectionBody ::= (corps::Corps)+ section::Section ;
Section ::= title::Title sectionBody::SectionBody ;
Path ::= value::String ;
Figure ::= path::Path label::Label title::Title ;
Bibliography ::= (citations::Citation)+ documentbody::DocumentBody ;
Abstract ::= value::String ;
Heading ::= (organisations::Organisation)+ phone::Phone fax::Fax email::EMail ;
--------------------metamodels::MAS.bgf--------------------
Resource ::= name::String environnement::Environnement action::Action ;
Predicat ::= environnement::Environnement ;
Representation ::= agentRep::Agent ontology::Ontology environnement::Environnement ;
FIPA-Platform Task ::= fipa_Platform_AgentF::FIPA-Platform Agent task::Task ;
AIP ::= name::String performative::Performative ;
Concept ::= environnement::Environnement ;
Message ::= communication::Communication Comm_Act::Performative ;
Communication ::= name::String Exchanged Knoledge::Ontology (scenario::Scenario)+ aip::AIP (message::Message)+ ;
Action ::= environnement::Environnement ;
Role ::= agentR::Agent (activity::Task)+ (actsOn::Resource)+ (scenario::Scenario)+ (participant::Communication)+ (has::Responsibility)+ ;
Task ::= name::String fipa_Platform_TaskT::FIPA-Platform Task ;
Service ::= inputs::String outputs::String pre-conditions::String post-conditions::String ;
Agent ::= (service::Service)+ (non_Functionnal_Requirement::Non Functionnal Requirement)+ (requirement::Requirement)+ belongs::Organization (cooperationRules::CooperationRules)+ fipa_Platform_Agent::FIPA-Platform Agent role::Role representation::Representation characteristic::Characteristic skill::Skill aptitude::Aptitude ;
Organization ::= (observes::Organizational Structure)+ organizational_Structure::Organizational Structure ;
FIPA-Platform Agent ::= agentF::Agent (fipa_Platform_Task::FIPA-Platform Task)+ ;
--------------------metamodels::Marte.bgf--------------------
TimeObservation ::= event::NamedElement firstEvent::MARTE_PrimitivesTypes/Boolean ;
TilerSpecification ::= origin::MARTE_DataTypes/IntegerVector paving::MARTE_DataTypes/IntegerMatrix fitting::MARTE_DataTypes/IntegerVector ;
Constraint ::= IntervalConstraint ;
 Constraint ::= InteractionConstraint ;
 Constraint ::= (constrainedElement::Element)+ specification::ValueSpecification context::Namespace ;
GaCommChannel ::= packetSize::BasicNFP_Types/NFP_DataSize (utlization::BasicNFP_Types/NFP_Real)+ ;
ClockRefine ::= base_Dependency::Dependency (constraint::MARTE_Foundations/Time/ClockConstraint)+ ;
Property ::= Port ;
 Property ::= class::Class datatype::DataType owningAssociation::Association association::Association isDerived::MARTE_PrimitivesTypes/Boolean isDerivedUnion::MARTE_PrimitivesTypes/Boolean default::MARTE_PrimitivesTypes/String aggregation::AggregationKind isComposite::MARTE_PrimitivesTypes/Boolean (redefinedProperty::Property)+ defaultValue::ValueSpecification opposite::Property (subsettedProperty::Property)+ (qualifier::Property)+ associationEnd::Property ;
NFP_DataTxRate ::= unit::MeasurementUnits/DataTxRateUnitKind precision::MARTE_PrimitivesTypes/Real ;
HwMedia ::= bandWidth::BasicNFP_Types/NFP_DataTxRate base_Association::Association (arbiters::MARTE_DesignModel/HRM/HwLogical/HwCommunication/HwArbiter)+ ;
TimedValueType ::= unit::TimeLibrary/TUK value::MARTE_PrimitivesTypes/Real expr::TimeLibrary/ClockedValueSpecification onClock::MARTE_PrimitivesTypes/String ;
NFP_Area ::= unit::MeasurementUnits/AreaUnitKind precision::MARTE_PrimitivesTypes/Real ;
MemoryOrganization ::= nbRows::BasicNFP_Types/NFP_Natural nbColumns::BasicNFP_Types/NFP_Natural nbBanks::BasicNFP_Types/NFP_Natural wordSize::BasicNFP_Types/NFP_DataSize ;
GaExecHost ::= commTxOch::BasicNFP_Types/NFP_Duration commRcvOvh::BasicNFP_Types/NFP_Duration cntxtSwt::BasicNFP_Types/NFP_Duration clockOvh::BasicNFP_Types/NFP_Duration schedPriRange::MARTE_DataTypes/IntegerInterval memSize::BasicNFP_Types/NFP_DataSize (utilization::BasicNFP_Types/NFP_Real)+ (throughput::BasicNFP_Types/NFP_Frequency)+ ;
RtService ::= concPolicy::MARTE_DesignModel/RTEMoCC/ConcurrencyKind exeKind::MARTE_DesignModel/RTEMoCC/ExecutionKind isAtomic::MARTE_PrimitivesTypes/Boolean synchKind::MARTE_DesignModel/RTEMoCC/SynchronizationKind base_BehavioralFeature::BehavioralFeature ;
Artifact ::= DeploymentSpecification ;
 Artifact ::= fileName::MARTE_PrimitivesTypes/String (nestedArtifact::Artifact)+ (manifestation::Manifestation)+ (ownedOperation::Operation)+ (ownedAttribute::Property)+ ;
Interaction ::= (lifeline::Lifeline)+ (fragment::InteractionFragment)+ (action::Action)+ (formalGate::Gate)+ (message::Message)+ ;
SwSchedulableResource ::= isStaticSchedulingFeature::MARTE_PrimitivesTypes/Boolean isPreemptable::MARTE_PrimitivesTypes/Boolean schedulers::NamedElement (deadlineElements::TypedElement)+ (deadlineTypeElements::TypedElement)+ (timeScliceElements::TypedElement)+ (delayServices::BehavioralFeature)+ (joinServices::BehavioralFeature)+ (yieldServices::BehavioralFeature)+ ;
NfpType ::= valueAttrib::Property unitAttrib::Property exprAttrib::Property ;
DeviceBroker ::= accessPolicy::MARTE_DesignModel/SRM/SW_Brokering/AccessPolicyKind isBuffered::MARTE_PrimitivesTypes/Boolean (devices::TypedElement)+ (closeServices::BehavioralFeature)+ (controlServices::BehavioralFeature)+ (openServices::BehavioralFeature)+ (readServices::BehavioralFeature)+ (writeServices::BehavioralFeature)+ ;
FlowPort ::= isAtomic::MARTE_PrimitivesTypes/Boolean isConjugated::MARTE_PrimitivesTypes/Boolean direction::MARTE_Foundations/GCM/DirectionKind base_Port::Port ;
GaCommHost ::= (capacity::BasicNFP_Types/NFP_DataTxRate)+ (packetT::BasicNFP_Types/NFP_Duration)+ (blockT::BasicNFP_Types/NFP_Duration)+ transmMode::MARTE_DataTypes/TransmModeKind (utilization::BasicNFP_Types/NFP_Real)+ (throughput::BasicNFP_Types/NFP_Frequency)+ ;
Clock ::= standard::TimeLibrary/TimeStandardKind base_InstanceSpecification::InstanceSpecification type::MARTE_Foundations/Time/ClockType unit::MARTE_Foundations/NFPs/Unit ;
NFP_CommonType ::= expr::MARTE_DataTypes/VSL_Expression source::BasicNFP_Types/SourceKind statQ::BasicNFP_Types/StatisticalQualifierKind dir::BasicNFP_Types/BasicNFP_Types_DirectionKind ;
Gate ::= message::Message ;
Message ::= messageKind::MessageKind messageSort::MessageSort receiveEvent::MessageEnd sendEvent::MessageEnd connector::Connector interaction::Interaction (argument::ValueSpecification)+ signature::NamedElement ;
PaLogicalResource ::= utilization::BasicNFP_Types/NFP_Real throughput::BasicNFP_Types/NFP_Frequency poolSize::BasicNFP_Types/NFP_Integer ;
GaStep ::= isAtomic::BasicNFP_Types/NFP_Boolean blockT::BasicNFP_Types/NFP_Duration rep::BasicNFP_Types/NFP_Real prob::BasicNFP_Types/NFP_Real priority::BasicNFP_Types/NFP_Integer concurRes::MARTE_Foundations/GRM/SchedulableResource host::MARTE_AnalysisModel/GQAM/GaExecHost (serDemand::MARTE_AnalysisModel/GQAM/GaRequestedService)+ (servCount::BasicNFP_Types/NFP_Real)+ ;
Deployment ::= (deployedArtifact::DeployedArtifact)+ (configuration::DeploymentSpecification)+ location::DeploymentTarget ;
Interval ::= DurationInterval ;
 Interval ::= TimeInterval ;
 Interval ::= min::ValueSpecification max::ValueSpecification ;
SaAnalysisContext ::= isSched::BasicNFP_Types/NFP_Boolean optCriterion::MARTE_AnalysisModel/SAM/OptimallityCriterionKind ;
SchedParameters ::= edf::GRM_BasicTypes/EDFParameters fp::GRM_BasicTypes/FixedPriorityParameters pooling::GRM_BasicTypes/PoolingParameters server::GRM_BasicTypes/PeriodicServerParameters ;
GaResourcesPlatform ::= (resources::MARTE_Foundations/GRM/Resource)+ base_Classifier::Classifier ;
IrregularPattern ::= phase::BasicNFP_Types/NFP_Duration (interarrivals::BasicNFP_Types/NFP_Duration)+ ;
GaAnalysisContext ::= (context::BasicNFP_Types/NFP_String)+ (workload::MARTE_AnalysisModel/GQAM/GaWorkloadBehavior)+ (platform::MARTE_AnalysisModel/GQAM/GaResourcesPlatform)+ ;
DurationObservation ::= event::NamedElement firstEvent::MARTE_PrimitivesTypes/Boolean ;
RtBehavior ::= queueSchedPolicy::GRM_BasicTypes/SchedPolicyKind queueSize::MARTE_PrimitivesTypes/Integer msgMaxSize::BasicNFP_Types/NFP_DataSize base_Behavior::Behavior ;
TimeInterval ::= min::ValueSpecification max::ValueSpecification ;
HwBus ::= adressWidth::BasicNFP_Types/NFP_DataSize wordWidth::BasicNFP_Types/NFP_DataSize isSynchronous::MARTE_PrimitivesTypes/Boolean isSerial::MARTE_PrimitivesTypes/Boolean ;
CommunicationMedia ::= elementSize::MARTE_PrimitivesTypes/Integer base_Connector::Connector ;
TemplateParameterSubstitution ::= formal::TemplateParameter (actual::ParameterableElement)+ (ownedActual::ParameterableElement)+ templateBinding::TemplateBinding ;
MemoryPartition ::= (concurrentResources::TypedElement)+ (memorySpaces::TypedElement)+ (fork::BehavioralFeature)+ (exit::BehavioralFeature)+ base_Namespace::Namespace ;
HwISA ::= family::BasicNFP_Types/NFP_String inst_Width::BasicNFP_Types/NFP_DataSize type::MARTE_DesignModel/HRM/HwLogical/HwComputing/ISA_Type ;
HwEndPoint ::= base_Port::Port (connectedTo::MARTE_DesignModel/HRM/HwLogical/HwCommunication/HwMedia)+ ;
PpUnit ::= concPolicy::MARTE_DesignModel/RTEMoCC/CallConcurrencyKind memorySize::BasicNFP_Types/NFP_DataSize base_BehavioredClassifier::BehavioredClassifier ;
TimedEvent ::= repetition::MARTE_PrimitivesTypes/Integer base_TimeEvent::TimeEvent every::ValueSpecification ;
StructuredActivityNode ::= (variable::Variable)+ (edge::ActivityEdge)+ mustIsolate::MARTE_PrimitivesTypes/Boolean (node::ActivityNode)+ ;
IntervalType ::= intervalAttrib::Property base_DataType::DataType ;
ProtocolConformance ::= generalMachine::ProtocolStateMachine specificMachine::ProtocolStateMachine ;
GeneralOrdering ::= before::OccurrenceSpecification after::OccurrenceSpecification ;
GaLatencyObs ::= (latency::BasicNFP_Types/NFP_Duration)+ (miss::BasicNFP_Types/NFP_Real)+ (utility::MARTE_DataTypes/UtilityType)+ (maxJitter::BasicNFP_Types/NFP_Duration)+ ;
OpaqueExpression ::= (body::MARTE_PrimitivesTypes/String)+ (language::MARTE_PrimitivesTypes/String)+ result::Parameter behavior::Behavior ;
Expression ::= StringExpression ;
 Expression ::= symbol::MARTE_PrimitivesTypes/String (operand::ValueSpecification)+ ;
OutputPin ::= isControl::MARTE_PrimitivesTypes/Boolean ;
Duration ::= expr::ValueSpecification (observation::Observation)+ ;
HWCache ::= level::BasicNFP_Types/NFP_Natural type::MARTE_DesignModel/HRM/HwLogical/HwMemory/CacheType structure::MARTE_DesignModel/HRM/HwLogical/HwMemory/CacheStructure repl_Policy::MARTE_DesignModel/HRM/HwLogical/HwMemory/Repl_Policy writePolicy::MARTE_DesignModel/HRM/HwLogical/HwMemory/WritePolicy ;
PackageMerge ::= mergedPackage::Package receivingPackage::Package ;
NFP_DataSize ::= unit::MeasurementUnits/DataSizeUnitKind precision::MARTE_PrimitivesTypes/Real ;
SwResource ::= (identifierElements::TypedElement)+ (stateElements::TypedElement)+ memorySizeFootprint::TypedElement (createServices::BehavioralFeature)+ (deleteServices::BehavioralFeature)+ (initializeServices::BehavioralFeature)+ ;
PoolingParameters ::= period::BasicNFP_Types/NFP_Duration (overhead::BasicNFP_Types/NFP_Duration)+ ;
TimeEvent ::= isRelative::MARTE_PrimitivesTypes/Boolean when::ValueSpecification ;
GaRelStep ::= relRes::MARTE_Foundations/GRM/Resource resUnits::BasicNFP_Types/NFP_Integer ;
GaScenario ::= cause::MARTE_AnalysisModel/GQAM/GaWorkloadEvent (hostDemand::BasicNFP_Types/NFP_Duration)+ (hostDemandOps::BasicNFP_Types/NFP_Real)+ (interOccT::BasicNFP_Types/NFP_Duration)+ (throughput::BasicNFP_Types/NFP_Frequency)+ respT::BasicNFP_Types/NFP_Duration (utilization::BasicNFP_Types/NFP_Real)+ (utilizationHost::BasicNFP_Types/NFP_Real)+ root::MARTE_AnalysisModel/GQAM/GaStep (timing::MARTE_AnalysisModel/GQAM/GaTimingObs)+ behavior::MARTE_AnalysisModel/GQAM/GaScenario ;
StringExpression ::= (subExpression::StringExpression)+ owningExpression::StringExpression ;
HwPowerSupply ::= suppliedPower::BasicNFP_Types/NFP_Power capacity::BasicNFP_Types/NFP_Energy ;
SaEnd2EndFlow ::= isSched::BasicNFP_Types/NFP_Boolean schSlack::BasicNFP_Types/NFP_Real (end2EndT::BasicNFP_Types/NFP_Duration)+ (end2EndD::BasicNFP_Types/NFP_Duration)+ (timing::MARTE_AnalysisModel/GQAM/GaTimingObs)+ base_NamedElement::NamedElement ;
Unit ::= convFactor::MARTE_PrimitivesTypes/Real convOffset::MARTE_PrimitivesTypes/Real baseUnit::MARTE_Foundations/NFPs/Unit base_EnumerationLiteral::EnumerationLiteral ;
FlowBFeature ::= kind::MARTE_Foundations/GCM/BFeatureKind base_BehavioralFeature::BehavioralFeature ;
Port ::= isBehavior::MARTE_PrimitivesTypes/Boolean isService::MARTE_PrimitivesTypes/Boolean (required::Interface)+ (redefinedPort::Port)+ (provided::Interface)+ protocol::ProtocolStateMachine ;
ElementImport ::= visibility::VisibilityKind alias::MARTE_PrimitivesTypes/String importedElement::PackageableElement importingNamespace::Namespace ;
GaAcqStep ::= acqRes::MARTE_Foundations/GRM/Resource resUnits::BasicNFP_Types/NFP_Integer ;
SaSharedResource ::= capacity::BasicNFP_Types/NFP_Integer isPreemp::BasicNFP_Types/NFP_Boolean isConsum::BasicNFP_Types/NFP_Boolean (acquisT::BasicNFP_Types/NFP_Duration)+ (releaseT::BasicNFP_Types/NFP_Duration)+ ;
Variable ::= scope::StructuredActivityNode activityScope::Activity ;
Generalization ::= isSubstitutable::MARTE_PrimitivesTypes/Boolean general::Classifier (generalizationSet::GeneralizationSet)+ specific::Classifier ;
Scheduler ::= isPreemptible::MARTE_PrimitivesTypes/Boolean schedPolicy::GRM_BasicTypes/SchedPolicyKind otherSchedPolicy::MARTE_PrimitivesTypes/String schedule::OpaqueExpression (processingUnit::MARTE_Foundations/GRM/ProcessingResource)+ host::MARTE_Foundations/GRM/ComputingResource ;
ChoiceType ::= (choiceAttrib::Property)+ defaultAttrib::Property base_DataType::DataType ;
HwDrive ::= sectorSize::BasicNFP_Types/NFP_DataSize buffer::MARTE_DesignModel/HRM/HwLogical/HwMemory/HwRAM ;
DurationInterval ::= min::ValueSpecification max::ValueSpecification ;
Trigger ::= event::Event (port::Port)+ ;
StateMachine ::= ProtocolStateMachine ;
 StateMachine ::= (region::Region)+ (submachineState::State)+ (connectionPoint::Pseudostate)+ (extendedStateMachine::StateMachine)+ ;
NfpConstraint ::= kind::MARTE_Foundations/NFPs/ConstraintKind base_Constraint::Constraint ;
OccurrenceSpecification ::= (toBefore::GeneralOrdering)+ event::Event (toAfter::GeneralOrdering)+ ;
PaRunTInstance ::= poolSize::BasicNFP_Types/NFP_Integer unbddPool::MARTE_PrimitivesTypes/Boolean instance::MARTE_Foundations/GRM/Resource host::MARTE_Foundations/GRM/SchedulableResource utilization::BasicNFP_Types/NFP_Real throughput::BasicNFP_Types/NFP_Frequency base_NamedElement::NamedElement ;
HwComponent ::= kind::MARTE_DesignModel/HRM/HwPhysical/HwLayout/ComponentKind dimenssions::BasicNFP_Types/NFP_Length area::BasicNFP_Types/NFP_Area position::MARTE_DataTypes/NFP_NaturalInterval grid::BasicNFP_Types/NFP_Natural nbPins::BasicNFP_Types/NFP_Natural weight::BasicNFP_Types/NFP_Real price::BasicNFP_Types/NFP_String (r_Conditions::MARTE_DesignModel/HRM/HwPhysical/HwLayout/Env_Condition)+ (poweredServices::MARTE_DesignModel/HRM/HwLogical/HwGeneral/HwResourceService)+ staticConsumption::BasicNFP_Types/NFP_Power staticDissipation::BasicNFP_Types/NFP_Power ;
NFP_Length ::= unit::MeasurementUnits/LengthUnitKind precision::MARTE_PrimitivesTypes/Real ;
SwAccessService ::= isModifier::MARTE_PrimitivesTypes/Boolean accessedElement::Property ;
InputPin ::= isControl::MARTE_PrimitivesTypes/Boolean ;
TemplateBinding ::= signature::TemplateSignature (parameterSubstitution::TemplateParameterSubstitution)+ boundElement::TemplateableElement ;
SaExecStep ::= base_BehavioralFeature::BehavioralFeature deadline::BasicNFP_Types/NFP_Duration spareCap::BasicNFP_Types/NFP_Duration schSlack::BasicNFP_Types/NFP_Real preemptT::BasicNFP_Types/NFP_Duration readyT::BasicNFP_Types/NFP_Duration delayT::BasicNFP_Types/NFP_Duration ;
NFP_BoundedDuration ::= values::MARTE_PrimitivesTypes/Real unit::MeasurementUnits/TimeUnitKind clock::MARTE_PrimitivesTypes/String precision::MARTE_PrimitivesTypes/Real ;
TimedProcessing ::= base_Action::Action base_Behavior::Behavior base_Message::Message duration::ValueSpecification start::Event stop::Event ;
Parameter ::= direction::ParameterDirectionKind default::MARTE_PrimitivesTypes/String defaultValue::ValueSpecification operation::Operation (parameterSet::ParameterSet)+ isException::MARTE_PrimitivesTypes/Boolean isStream::MARTE_PrimitivesTypes/Boolean effect::ParameterEffectKind ;
Profile ::= (ownedStereotype::Stereotype)+ (metaclassReference::ElementImport)+ (metamodelReference::PackageImport)+ ;
GaWorkloadEvent ::= pattern::BasicNFP_Types/ArrivalPattern generator::MARTE_AnalysisModel/GQAM/GaWorkloadGenerator trace::MARTE_AnalysisModel/GQAM/GaEventTrace effect::MARTE_AnalysisModel/GQAM/GaScenario timedEvent::TimeEvent base_NamedElement::NamedElement ;
TimedValueSpecification ::= interpretation::TimeTypesLibrary/TimeInterpretationKind base_ValueSpecification::ValueSpecification ;
Include ::= addition::UseCase includingCase::UseCase ;
SaCommStep ::= deadline::BasicNFP_Types/NFP_Duration spareCap::BasicNFP_Types/NFP_Duration schSlack::BasicNFP_Types/NFP_Real base_BehavioralFeature::BehavioralFeature ;
NFP_Power ::= unit::MeasurementUnits/PowerUnitKind precision::MARTE_PrimitivesTypes/Real ;
PaStep ::= noSynch::BasicNFP_Types/NFP_Boolean (extOpDemand::MARTE_PrimitivesTypes/String)+ (extOpCount::BasicNFP_Types/NFP_Real)+ (behavDemand::MARTE_AnalysisModel/GQAM/GaScenario)+ (behavCount::BasicNFP_Types/NFP_Real)+ ;
GaTimingObs ::= laxity::MARTE_AnalysisModel/GQAM/LaxityKind startObs::TimeObservation stopObs::TimeObservation ;
ActivityPartition ::= isDimension::MARTE_PrimitivesTypes/Boolean isExternal::MARTE_PrimitivesTypes/Boolean (node::ActivityNode)+ (subpartition::ActivityPartition)+ superPartition::ActivityPartition represents::Element (edge::ActivityEdge)+ ;
NFP_Duration ::= unit::MeasurementUnits/TimeUnitKind clock::MARTE_PrimitivesTypes/String precision::MARTE_PrimitivesTypes/Real ;
InteractionOperand ::= guard::InteractionConstraint (fragment::InteractionFragment)+ ;
ArrivalPattern ::= periodic::BasicNFP_Types/PeriodicPattern aperiodic::BasicNFP_Types/AperiodicPattern burst::BasicNFP_Types/BurstPattern irregular::BasicNFP_Types/IrregularPattern closed::BasicNFP_Types/ClosedPattern sporadic::BasicNFP_Types/SporadicPattern ;
Transition ::= kind::TransitionKind container::Region redefinedTransition::Transition guard::Constraint effect::Behavior (trigger::Trigger)+ target::Vertex source::Vertex ;
Pseudostate ::= kind::PseudostateKind stateMachine::StateMachine state::State ;
State ::= isComposite::MARTE_PrimitivesTypes/Boolean isOrthogonal::MARTE_PrimitivesTypes/Boolean isSimple::MARTE_PrimitivesTypes/Boolean isSubmachineState::MARTE_PrimitivesTypes/Boolean submachine::StateMachine (connection::ConnectionPointReference)+ (connectionPoint::Pseudostate)+ redefinedState::State stateInvariant::Constraint entry::Behavior exit::Behavior doActivity::Behavior (deferrableTrigger::Trigger)+ (region::Region)+ ;
InterruptResource ::= kind::MARTE_DesignModel/SRM/SW_Concurrency/InterruptKind isMaskable::MARTE_PrimitivesTypes/Boolean (vectorElements::TypedElement)+ (maskElements::TypedElement)+ (routineConnectServices::BehavioralFeature)+ (routineDisconnectServices::BehavioralFeature)+ ;
BurstPattern ::= minInterarrival::BasicNFP_Types/NFP_Duration maxInterarrival::BasicNFP_Types/NFP_Duration minEventInterval::BasicNFP_Types/NFP_Duration maxEventInterval::BasicNFP_Types/NFP_Duration burstSize::BasicNFP_Types/NFP_Integer ;
InteractionConstraint ::= minint::ValueSpecification maxint::ValueSpecification ;
HwRAM ::= organization::MARTE_DesignModel/HRM/HwLogical/HwMemory/MemoryOrganization isSynchronous::BasicNFP_Types/NFP_Boolean isStatic::BasicNFP_Types/NFP_Boolean isNonVolatile::BasicNFP_Types/NFP_Boolean repl_Policy::MARTE_DesignModel/HRM/HwLogical/HwMemory/Repl_Policy writePolicy::MARTE_DesignModel/HRM/HwLogical/HwMemory/WritePolicy ;
ConnectorEnd ::= definingEnd::Property partWithPort::Property role::ConnectableElement ;
PaResPassStep ::= resource::MARTE_Foundations/GRM/Resource resUnits::BasicNFP_Types/NFP_Integer ;
PackageImport ::= visibility::VisibilityKind importedPackage::Package importingNamespace::Namespace ;
Dependency ::= Abstraction ;
 Dependency ::= Deployment ;
 Dependency ::= (supplier::NamedElement)+ (client::NamedElement)+ ;
Timing ::= notation::BasicNFP_Types/NFP_String description::BasicNFP_Types/NFP_String value::BasicNFP_Types/NFP_Duration ;
PLD_Organization ::= nbRows::BasicNFP_Types/NFP_Integer nbColumns::BasicNFP_Types/NFP_Natural class::MARTE_DesignModel/HRM/HwLogical/HwComputing/PLD_Class ;
PeriodicServerParameters ::= kind::GRM_BasicTypes/PeriodicServerKind backgroundPriority::MARTE_PrimitivesTypes/Integer initialBudget::BasicNFP_Types/NFP_Duration replenishPeriod::BasicNFP_Types/NFP_Duration maxPendingReplenish::MARTE_PrimitivesTypes/Integer ;
SaExecHost ::= isSched::BasicNFP_Types/NFP_Boolean schSlack::BasicNFP_Types/NFP_Real schedUtiliz::BasicNFP_Types/NFP_Real ISRswitchT::BasicNFP_Types/NFP_Duration ISRprioRange::MARTE_DataTypes/IntegerInterval schedPolicy::GRM_BasicTypes/SchedPolicyKind isPreempible::BasicNFP_Types/NFP_Boolean ;
TimeExpression ::= expr::ValueSpecification (observation::Observation)+ ;
GaEventTrace ::= content::MARTE_PrimitivesTypes/String format::MARTE_PrimitivesTypes/String location::MARTE_PrimitivesTypes/String base_NamedElement::NamedElement ;
ClosedPattern ::= population::BasicNFP_Types/NFP_Integer extDelay::BasicNFP_Types/NFP_Duration ;
Tiler ::= origin::MARTE_DataTypes/IntegerVector paving::MARTE_DataTypes/IntegerMatrix fitting::MARTE_DataTypes/IntegerMatrix tiler::RS_Library/TilerSpecification ;
rtf ::= base_BehavioralFeature::BehavioralFeature base_Action::Action base_Message::Message base_Signal::Signal utility::MARTE_DataTypes/UtilityType occKind::BasicNFP_Types/ArrivalPattern tRef::MARTE_Foundations/Time/TimedInstantObservation relDl::BasicNFP_Types/NFP_Duration absDl::BasicNFP_Types/NFP_DateTime boundDl::BasicNFP_Types/NFP_BoundedDuration rdTime::BasicNFP_Types/NFP_Duration miss::BasicNFP_Types/NFP_Percentage priority::BasicNFP_Types/NFP_Integer ;
SaCommHost ::= isSched::BasicNFP_Types/NFP_Boolean schSlack::BasicNFP_Types/NFP_Real ;
Association ::= Extension ;
 Association ::= isDerived::MARTE_PrimitivesTypes/Boolean (ownedEnd::Property)+ (endType::Type)+ memberEnd::Property (navigableOwnedEnd::Property)+ ;
ProcessingResource ::= speedFactor::MARTE_PrimitivesTypes/Real scheduler::MARTE_Foundations/GRM/Scheduler ;
TimedDurationObservation ::= obsKind::TimeLibrary/EventKind base_DurationObservation::DurationObservation ;
SharedDataComResource ::= (readServices::BehavioralFeature)+ (writeServices::BehavioralFeature)+ ;
EntryPoint ::= isReentrant::MARTE_PrimitivesTypes/Boolean routine::BehavioralFeature base_BehavioralFeature::BehavioralFeature base_Dependency::Dependency ;
HwResource ::= description::BasicNFP_Types/NFP_String (p_HW_Services::MARTE_DesignModel/HRM/HwLogical/HwGeneral/HwResourceService)+ (r_HW_Services::MARTE_DesignModel/HRM/HwLogical/HwGeneral/HwResourceService)+ (ownedHW::MARTE_DesignModel/HRM/HwLogical/HwGeneral/HwResource)+ (endPoints::MARTE_DesignModel/HRM/HwLogical/HwCommunication/HwEndPoint)+ ;
Allocate ::= kind::MARTE_Foundations/Alloc/AllocationKind nature::MARTE_Foundations/Alloc/AllocationNature base_Abstraction::Abstraction (impliedConstraint::MARTE_Foundations/NFPs/NfpConstraint)+ ;
MemoryBroker ::= accessPolicy::MARTE_DesignModel/SRM/SW_Brokering/AccessPolicyKind (memories::TypedElement)+ (memoryBlockAdressSelements::TypedElement)+ (memoryBlockSizeElements::TypedElement)+ (lockServices::BehavioralFeature)+ (unlockServices::BehavioralFeature)+ (mapServices::BehavioralFeature)+ (unMapServices::BehavioralFeature)+ ;
InterruptibleActivityRegion ::= (node::ActivityNode)+ (interruptingEdge::ActivityEdge)+ ;
Class ::= Stereotype ;
 Class ::= Behavior ;
 Class ::= (nestedClassifier::Classifier)+ (ownedOperation::Operation)+ (superClass::Class)+ isActive::MARTE_PrimitivesTypes/Boolean (ownedReception::Reception)+ (extension::Extension)+ ;
SaSchedObs ::= (suspentions::BasicNFP_Types/NFP_Integer)+ (blockT::BasicNFP_Types/NFP_Duration)+ (overlaps::BasicNFP_Types/NFP_Integer)+ ;
HwTimer ::= nbCounter::BasicNFP_Types/NFP_Natural counterWidth::BasicNFP_Types/NFP_DataSize inputClock::MARTE_DesignModel/HRM/HwLogical/HwTiming/HwClock ;
PeriodicPattern ::= period::BasicNFP_Types/NFP_Duration jitter::BasicNFP_Types/NFP_Duration phase::BasicNFP_Types/NFP_Duration ;
NFP_Frequency ::= unit::MeasurementUnits/FrequencyUnitKind precision::MARTE_PrimitivesTypes/Real ;
FlowSpecification ::= direction::MARTE_Foundations/GCM/DirectionKind base_Interface::Interface ;
TimerResource ::= duration::BasicNFP_Types/NFP_Duration isPeriodic::MARTE_PrimitivesTypes/Boolean ;
AllocateActivityGroup ::= isUnique::MARTE_PrimitivesTypes/Boolean base_ActivityPartition::ActivityPartition ;
InstanceSpecification ::= EnumerationLiteral ;
 InstanceSpecification ::= (classifier::Classifier)+ (slot::Slot)+ specification::ValueSpecification ;
InterRepetition ::= repetitionShapeDependence::MARTE_DataTypes/IntegerVector isModulo::MARTE_PrimitivesTypes/Boolean ;
GRService ::= owner::MARTE_Foundations/GRM/Resource base_ExecutionSpecification::ExecutionSpecification base_BehavioralFeature::BehavioralFeature base_Behavior::Behavior base_Collaboration::Collaboration base_CollaborationUse::CollaborationUse ;
RteConnector ::= bandwidth::BasicNFP_Types/NFP_DataTxRate packetT::BasicNFP_Types/NFP_Duration blockT::BasicNFP_Types/NFP_Duration transmMode::MARTE_DataTypes/TransmModeKind base_Connector::Connector ;
HwDMA ::= nbChannels::BasicNFP_Types/NFP_Natural transferWidth::BasicNFP_Types/NFP_DataSize (drivenBy::MARTE_DesignModel/HRM/HwLogical/HwComputing/HwProcessor)+ ;
MessageComResource ::= isFixedMessageSize::MARTE_PrimitivesTypes/Boolean meachnism::MARTE_DesignModel/SRM/SW_Interaction/MessageResourceKind (messageSizeElements::TypedElement)+ (messageQueueCapacityElements::TypedElement)+ messageQueuePolicy::MARTE_DesignModel/SRM/SW_Interaction/QueuePolicyKind (sendServices::BehavioralFeature)+ (receiveServices::BehavioralFeature)+ ;
ClockType ::= nature::TimeTypesLibrary/TimeNatureKind unitType::Enumeration isLogical::MARTE_PrimitivesTypes/Boolean resolAttrib::Property maxValAttrib::Property offsetAttrib::Property getTime::Operation setTime::Operation indexToValue::Operation base_Class::Class ;
Operation ::= interface::Interface class::Class isQuery::MARTE_PrimitivesTypes/Boolean isOrdered::MARTE_PrimitivesTypes/Boolean isUnique::MARTE_PrimitivesTypes/Boolean lower::MARTE_PrimitivesTypes/Integer upper::MARTE_PrimitivesTypes/UnlimitedNatural (precondition::Constraint)+ (postcondition::Constraint)+ (redefinedOperation::Operation)+ datatype::DataType bodyCondition::Constraint type::Type ;
FlowProperty ::= direction::MARTE_Foundations/GCM/DirectionKind base_Property::Property ;
GaWorkloadGenerator ::= pop::BasicNFP_Types/NFP_Integer base_Behavior::Behavior ;
Comment ::= body::MARTE_PrimitivesTypes/String (annotatedElement::Element)+ ;
TemplateSignature ::= (parameter::TemplateParameter)+ (ownedParameter::TemplateParameter)+ template::TemplateableElement ;
BoundedSubtype ::= baseType::DataType minValue::MARTE_PrimitivesTypes/String maxValue::MARTE_PrimitivesTypes/String isMinOpen::MARTE_PrimitivesTypes/Boolean isMaxOpen::MARTE_PrimitivesTypes/Boolean base_DataType::DataType ;
Image ::= content::MARTE_PrimitivesTypes/String location::MARTE_PrimitivesTypes/String format::MARTE_PrimitivesTypes/String ;
Extend ::= extendedCase::UseCase condition::Constraint (extensionLocation::ExtensionPoint)+ extension::UseCase ;
ConnectionPointReference ::= (entry::Pseudostate)+ (exit::Pseudostate)+ state::State ;
NotificationResource ::= occurence::MARTE_DesignModel/SRM/SW_Interaction/NotificationKind mechanism::MARTE_DesignModel/SRM/SW_Interaction/NotificationResourceKind (occurenceCountElements::TypedElement)+ (maskElements::TypedElement)+ (flushServices::BehavioralFeature)+ (signalServices::BehavioralFeature)+ (waitServices::BehavioralFeature)+ (clearServices::BehavioralFeature)+ ;
HwPLD ::= technology::MARTE_DesignModel/HRM/HwLogical/HwComputing/PLD_Technology organization::MARTE_DesignModel/HRM/HwLogical/HwComputing/PLD_Organization nbLUTs::BasicNFP_Types/NFP_Natural ndLUT_Inputs::BasicNFP_Types/NFP_Natural nbFlipFlops::BasicNFP_Types/NFP_Natural (blocksRAM::MARTE_DesignModel/HRM/HwLogical/HwMemory/HwRAM)+ ;
RtAction ::= isAtomic::MARTE_PrimitivesTypes/Boolean synchKind::MARTE_DesignModel/RTEMoCC/SynchronizationKind msgSize::BasicNFP_Types/NFP_DataSize base_BehavioralFeature::BehavioralFeature base_InvocationAction::InvocationAction ;
UseCase ::= (include::Include)+ (extend::Extend)+ (extensionPoint::ExtensionPoint)+ (subject::Classifier)+ ;
PartDecomposition ::= refersTo::Interaction (actualGate::Gate)+ (argument::Action)+ ;
InteractionUse ::= PartDecomposition ;
 InteractionUse ::= refersTo::Interaction (actualGate::Gate)+ (argument::Action)+ ;
SporadicPattern ::= minInterarrival::BasicNFP_Types/NFP_Duration maxInterarrival::BasicNFP_Types/NFP_Duration jitter::BasicNFP_Types/NFP_Duration ;
Alarm ::= isWatchdog::MARTE_PrimitivesTypes/Boolean (timers::TypedElement)+ ;
CacheStructure ::= nsSets::BasicNFP_Types/NFP_Natural blockSize::BasicNFP_Types/NFP_Natural associativity::BasicNFP_Types/NFP_Natural ;
Activity ::= (structuredNode::StructuredActivityNode)+ (variable::Variable)+ (node::ActivityNode)+ isReadOnly::MARTE_PrimitivesTypes/Boolean (edge::ActivityEdge)+ (partition::ActivityPartition)+ isSingleExecution::MARTE_PrimitivesTypes/Boolean (group::ActivityGroup)+ ;
TemplateParameter ::= signature::TemplateSignature parameteredElement::ParameterableElement ownedParameteredElement::ParameterableElement default::ParameterableElement ownedDefault::ParameterableElement ;
NFP_Energy ::= unit::MeasurementUnits/EnergyUnitKind precision::MARTE_PrimitivesTypes/Real ;
Resource ::= resMult::MARTE_PrimitivesTypes/Integer isProtected::MARTE_PrimitivesTypes/Boolean isActive::MARTE_PrimitivesTypes/Boolean base_Property::Property base_InstanceSpecification::InstanceSpecification base_Classifier::Classifier base_Lifeline::Lifeline base_ConnectableElement::ConnectableElement ;
Reshape ::= patternShape::RS_Library/ShapeSpecification repetitonShape::RS_Library/ShapeSpecification srcTiler::MARTE_Annexes/RSM/Tiler targetTiler::MARTE_Annexes/RSM/Tiler ;
InterfaceRealization ::= contract::Interface implementingClassifier::BehavioredClassifier ;
Connector ::= type::Association (redefinedConnector::Connector)+ end::ConnectorEnd kind::ConnectorKind (contract::Behavior)+ ;
MutualExclusionResource ::= protectKind::GRM_BasicTypes/ProtectProtocolKind ceiling::MARTE_PrimitivesTypes/Integer otherProtectProtocol::MARTE_PrimitivesTypes/String ;
GeneralizationSet ::= isCovering::MARTE_PrimitivesTypes/Boolean isDisjoint::MARTE_PrimitivesTypes/Boolean powertype::Classifier (generalization::Generalization)+ ;
Package ::= Profile ;
 Package ::= (ownedType::Type)+ (packageMerge::PackageMerge)+ (packagedElement::PackageableElement)+ (nestedPackage::Package)+ nestingPackage::Package (profileApplication::ProfileApplication)+ ;
HwMMU ::= virtualAddrSpace::BasicNFP_Types/NFP_DataSize physicalAddrSpace::BasicNFP_Types/NFP_DataSize memoryProtection::BasicNFP_Types/NFP_Natural nbEntries::BasicNFP_Types/NFP_Boolean (ownedTLBs::MARTE_DesignModel/HRM/HwLogical/HwMemory/HWCache)+ ;
DataType ::= Enumeration ;
 DataType ::= (ownedAttribute::Property)+ (ownedOperation::Operation)+ ;
SwMutualExclusionResource ::= mechanism::MARTE_DesignModel/SRM/SW_Interaction/MutualExclusionResourceKind concurrentAccessProtocol::MARTE_DesignModel/SRM/SW_Interaction/ConcurrentAccessProtocolKind (accessTokenElements::TypedElement)+ (releaseServices::BehavioralFeature)+ (acquireServices::BehavioralFeature)+ ;
HwProcessor ::= architecture::BasicNFP_Types/NFP_DataSize mips::BasicNFP_Types/NFP_Natural ipc::BasicNFP_Types/NFP_Real nbCores::BasicNFP_Types/NFP_Natural nbPipelines::BasicNFP_Types/NFP_Natural nbStages::BasicNFP_Types/NFP_Natural nbALUs::BasicNFP_Types/NFP_Natural nbFBUs::BasicNFP_Types/NFP_Natural (ownedISAs::MARTE_DesignModel/HRM/HwLogical/HwComputing/HwISA)+ (predictors::MARTE_DesignModel/HRM/HwLogical/HwComputing/HwBranchPredictor)+ (caches::MARTE_DesignModel/HRM/HwLogical/HwMemory/HWCache)+ (ownedMMUs::MARTE_DesignModel/HRM/HwLogical/HwStorageManager/HwMMU)+ ;
CollaborationUse ::= type::Collaboration (roleBinding::Dependency)+ ;
HwROM ::= type::MARTE_DesignModel/HRM/HwLogical/HwMemory/ROM_Type organization::MARTE_DesignModel/HRM/HwLogical/HwMemory/MemoryOrganization ;
Extension ::= isRequired::MARTE_PrimitivesTypes/Boolean metaclass::Class ;
DeploymentSpecification ::= deploymentLocation::MARTE_PrimitivesTypes/String executionLocation::MARTE_PrimitivesTypes/String deployment::Deployment ;
Slot ::= definingFeature::StructuralFeature (value::ValueSpecification)+ owningInstance::InstanceSpecification ;
Substitution ::= contract::Classifier substitutingClassifier::Classifier ;
ExceptionHandler ::= handlerBody::ExecutableNode exceptionInput::ObjectNode (exceptionType::Classifier)+ protectedNode::ExecutableNode ;
SignalSpecification ::= kind::MARTE_Foundations/GCM/BFeatureKind base_Interface::Interface ;
ParameterSet ::= (parameter::Parameter)+ (condition::Constraint)+ ;
Interface ::= (ownedAttribute::Property)+ (ownedOperation::Operation)+ (nestedClassifier::Classifier)+ (redefinedInterface::Interface)+ (ownedReception::Reception)+ protocol::ProtocolStateMachine ;
CollectionType ::= collectionAttrib::Property base_DataType::DataType ;
Region ::= (subvertex::Vertex)+ (transition::Transition)+ state::State extendedRegion::Region stateMachine::StateMachine ;
ResourceUsage ::= (execTime::BasicNFP_Types/NFP_Duration)+ (msgSize::BasicNFP_Types/NFP_DataSize)+ (allocatedMemory::BasicNFP_Types/NFP_DataSize)+ (usedMemory::BasicNFP_Types/NFP_DataSize)+ (powerPeak::BasicNFP_Types/NFP_Power)+ (energy::BasicNFP_Types/NFP_Energy)+ base_NamedElement::NamedElement (usedResources::MARTE_Foundations/GRM/Resource)+ (subUsage::MARTE_Foundations/GRM/ResourceUsage)+ ;
Lifeline ::= represents::ConnectableElement interaction::Interaction selector::ValueSpecification decomposedAs::PartDecomposition (coveredBy::InteractionFragment)+ ;
HwMemory ::= memorySize::BasicNFP_Types/NFP_DataSize adressSize::BasicNFP_Types/NFP_DataSize (timings::MARTE_DesignModel/HRM/HwLogical/HwMemory/Timing)+ ;
Env_Condition ::= type::MARTE_DesignModel/HRM/HwPhysical/HwLayout/ConditionType status::MARTE_DesignModel/HRM/HwPhysical/HwLayout/CompnentState description::BasicNFP_Types/NFP_String range::MARTE_DataTypes/Realnterval ;
MessagePort ::= base_Port::Port isAtomic::MARTE_PrimitivesTypes/Boolean isConjugated::MARTE_PrimitivesTypes/Boolean direction::MARTE_Foundations/GCM/DirectionKind ;
ProfileApplication ::= appliedProfile::Profile isStrict::MARTE_PrimitivesTypes/Boolean applyingPackage::Package ;
Var ::= dir::MARTE_Annexes/VSL/Variables/VariableDirectionKind base_Property::Property ;
RtUnit ::= isDynamic::MARTE_PrimitivesTypes/Boolean isMain::MARTE_PrimitivesTypes/Boolean poolSize::MARTE_PrimitivesTypes/Integer poolPolicy::MARTE_DesignModel/RTEMoCC/PoolMgtPolicyKind poolWaitingTime::BasicNFP_Types/NFP_Duration operationalMode::Behavior main::Operation memorySize::BasicNFP_Types/NFP_DataSize base_BehavioredClassifier::BehavioredClassifier ;
GaWorkloadBehavior ::= (behavior::MARTE_AnalysisModel/GQAM/GaScenario)+ (demand::MARTE_AnalysisModel/GQAM/GaWorkloadEvent)+ base_NamedElement::NamedElement ;
TupleType ::= (tupleAttrib::Property)+ base_DataType::DataType ;
TimedInstantObservation ::= obsKind::TimeLibrary/EventKind base_TimeObservation::TimeObservation ;
Distribute ::= patternShape::RS_Library/ShapeSpecification repetitionSpace::RS_Library/ShapeSpecification fromTiler::RS_Library/TilerSpecification toTiler::RS_Library/TilerSpecification ;
--------------------metamodels::METAH.bgf--------------------
Process ::= procName::String periodic::String declaration::String implementation::String ;
MacroImplementation ::= macroImpName::String declaration::String (process::Process)+ (connections::Connection)+ ;
MacroDeclaration ::= name::String (ports::Port)+ ;
Connection ::= compSrc::String portSrc::String compDest::String portDest::String ;
ProcessAttribute ::= attName::String attValue::Integer attValueType::String ;
Attribute ::= attName::String attValue::Integer attValueType::String attType::String ;
ProcessDeclaration ::= procDecName::String (ports::Port)+ ;
PackageImplementation ::= implementationName::String implements::String (attributes::Attribute)+ ;
Package ::= packName::String (data::Data)+ ;
Port ::= portName::String portCom::String portPackage::String portType::String ;
ProcessImplementation ::= procImpName::String declaration::String (processAttributes::ProcessAttribute)+ ;
--------------------metamodels::MICRO.owl.bgf--------------------
PerformanceTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Sponzorship ::= is_paid_with::Item is_paid_by::Person is_paid_in::Building (is_paid_for::Thing)+ has_amount_of::Money ;
Proceedings_Publisher ::= (publisherOf::Thing)+ technicallyOrganises::Thing ;
Reviewing_results_event ::= follows::Administrative_event parallel_with::Administrative_event ;
Conference_proceedings ::= has_an_ISBN::String has_a_publisher::Publisher has_a_volume::String ;
Sponsor ::= hasMail::String worksForCompany::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item ;
Organisation ::= Organising_Agency ;
 Organisation ::= Academic_Institution ;
 Organisation ::= Proceedings_Publisher ;
 Organisation ::= (publisherOf::Thing)+ technicallyOrganises::Thing ;
Science_Worker ::= hasMail::String worksForCompany::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item ;
RadioCommunicationsTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
article ::= group_email ;
 article ::= notification_email ;
 article ::= abstract_of_paper ;
 article ::= review_form ;
 article ::= summary_of_reviews ;
 article ::= Review ;
 article ::= goes_through::activity is_sent_to::human is_created_in::activity structure_created_by::human has_author::human gives_classification::classification article_written_by::Author has_reviewer::Reviewer has_abstract::Abstract ;
AccommodationPlace ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
MedicineTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
TwoLevelConference ::= isOrganizedBy::OrganizingCommittee annualOrder::Integer takesPlace::Location hasConferenceMember::ConferenceMember paperAssignmentFinalizedBy::Administrator reviewCriteriaEnteredBy::Administrator paperAssignmentToolsRunBy::Administrator virtualMeetingEnabledBy::Administrator hardcopyMailingManifestsPrintedBy::Administrator detailsEnteredBy::Administrator reviewerBiddingStartedBy::Administrator date::date reviewsPerPaper::Integer logoURL::anyURI acceptsHardcopySubmissions::Boolean siteURL::anyURI is_in_phase::phase_of_conference has_program::program hasMember::Person hasName::String endDate::dateTime paperDueOn::dateTime registrationDueOn::dateTime manuscriptDueOn::dateTime startDate::dateTime hasCountry::Country ;
SignalProcessingTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Accepted_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
 Accepted_Paper ::= hasReview::Review ;
Agency_Staff_Member ::= hasMail::String worksForCompany::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item ;
SessionChair ::= hasMail::String worksForCompany::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item ;
pc_meeting ::= conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator starts_on::String ends_on::String has_startdate::dateTime has_enddate::dateTime (eventOnList::Thing)+ partOfEvent::Event hasEvent::Event (organisedBy::Thing)+ heldIn::Location ;
Working_event ::= hasTopic::Topic hasAdministrativeEvent::Administrative_event ;
notification ::= has_result::article is_performed_by::human ;
User ::= Committee ;
 User ::= Administrator ;
 User ::= recieve::Document (create::Thing)+ submit::Document ;
Short_paper ::= writtenBy::Author dealsWith::Topic remark::String abstract::String contactEmail::String hasKeyword::String hasTitle::String ;
Regular_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
ConferenceChair ::= memberOfConference::Conference ;
 ConferenceChair ::= hasMail::String worksForCompany::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item ;
Place ::= DiningPlace ;
 Place ::= ConferenceVenuePlace ;
 Place ::= MeetingRoomPlace ;
 Place ::= AccommodationPlace ;
 Place ::= Building ;
 Place ::= Session_room ;
 Place ::= Hotel_room ;
 Place ::= Conference_hall ;
 Place ::= Main_office ;
 Place ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
Camera_Ready_event ::= follows::Administrative_event parallel_with::Administrative_event ;
Tutorial_Abstract ::= part_of_article::article (is_the_1th_part_of::Thing)+ ;
Main_office ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
CallForManuscripts ::= forEvent::AcademicEvent (isInitiatedBy::Person)+ hasSubmissionInstructions::String hasSubmissionDeadline::dateTime ;
Paper_Author ::= hasMail::String worksForCompany::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item ;
group_email ::= goes_through::activity is_sent_to::human is_created_in::activity structure_created_by::human has_author::human gives_classification::classification article_written_by::Author has_reviewer::Reviewer has_abstract::Abstract ;
Full_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
OutsideReferee ::= hasMail::String worksForCompany::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item ;
Attendee ::= hasMail::String worksForCompany::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item ;
Registration ::= is_held_before::Time is_held_in::Thing is_held_after::Time is_dated_on::dateTime hasTopic::Topic expectedAttendance::Integer isPartOf::Conference (has_result::Thing)+ sent_by::Person ;
 Registration ::= ε ;
OperatingTopicsystems ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
WorksopProposal ::= isSubmittedBy::Author hasAuthor::Author submissionDeadline::dateTime ;
Workshop_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
Chair_PC ::= hasMail::String worksForCompany::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item ;
Meta-Reviewer ::= assignedByAdministrator::Administrator adjustBid::Bid readPaper::Paper hasBeenAssigned::Paper writeReview::Review assignExternalReviewer::ExternalReviewer invites_co-reviewers::Reviewer invited_by::Reviewer (has_a_review_reference_or_expertise::Thing)+ writes_review::Review hasReviewHistory::PersonalReviewHistory executes::DoubleBlindReview ;
Call_for_participation ::= has_authors::Person has_a_date_of_issue::date ;
Short_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
SatelliteAndSpaceCommunicationsTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
WorkShop ::= is_held_before::Time is_held_in::Thing is_held_after::Time is_dated_on::dateTime hasTopic::Topic expectedAttendance::Integer isPartOf::Conference (has_result::Thing)+ sent_by::Person ;
chair ::= assigns_reviewers_to_article::Reviewer creates_program::program ;
TPCMember ::= hasMail::String worksForCompany::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item ;
ConferenceEvent ::= NonAcademicEvent ;
 ConferenceEvent ::= AcademicEvent ;
 ConferenceEvent ::= hasAttendee::Person hasLocation::Place hasProgramme::Programme hasEndDateTime::dateTime hasStartDateTime::dateTime ;
Assistant ::= hasMail::String worksForCompany::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item ;
Conference_document ::= Conference_contribution ;
 Conference_document ::= Information_for_participants ;
 Conference_document ::= Call_for_paper ;
 Conference_document ::= Conference_announcement ;
 Conference_document ::= Call_for_participation ;
 Conference_document ::= Conference_www ;
 Conference_document ::= has_authors::Person has_a_date_of_issue::date ;
Registration_of_participants_event ::= follows::Administrative_event parallel_with::Administrative_event ;
MobileComputingTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Camera_Ready_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
CommunicationTheoryTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Mailing_list ::= recieved_by::User used_by::Person submited__by::User (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document ;
CallForPapers ::= forEvent::AcademicEvent (isInitiatedBy::Person)+ hasSubmissionInstructions::String hasSubmissionDeadline::dateTime ;
CommunicationsTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
SecurityTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
University ::= scientificallyOrganises::Academic_Institution isProviderOf::Sponsorship ;
DiningPlace ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
PaperAbstract ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
Administrator ::= finalizePaperAssignment::Conference runPaperAssignmentTools::Conference enableVirtualMeeting::Conference startReviewerBidding::Conference assignReviewer::Reviewer rejectPaper::Paper enterConferenceDetails::Conference printHardcopyMailingManifests::Conference setMaxPapers::ProgramCommitteeMember enterReviewCriteria::Conference acceptPaper::Paper addProgramCommitteeMember::ProgramCommitteeMember approve::Event assign::Role ;
Author ::= AuthorNotReviewer ;
 Author ::= Co-author ;
 Author ::= Corresponding_Author ;
 Author ::= Author_cd_proceedings_included ;
 Author ::= Lecturer ;
 Author ::= Plenary_lecture_speaker ;
 Author ::= Tutorial_speaker ;
 Author ::= Author_book_proceedings_included ;
 Author ::= Presenter ;
 Author ::= submitPaper::Paper writePaper::Paper writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing ;
Conference_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
Negative_Review ::= writtenBy::Reviewer reviews::Reviewed_contribution gives_classification::classification is_created_in::activity review_written_by::Reviewer reviewOfPaper::Paper reviewWrittenBy::Possible_Reviewer ;
ComputerArchitectureTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
abstract_of_paper ::= goes_through::activity is_sent_to::human is_created_in::activity structure_created_by::human has_author::human gives_classification::classification article_written_by::Author has_reviewer::Reviewer has_abstract::Abstract ;
Money ::= Tax ;
 Money ::= Fee ;
 Money ::= Sponzorship ;
 Money ::= Tip ;
 Money ::= is_paid_with::Item is_paid_by::Person is_paid_in::Building (is_paid_for::Thing)+ has_amount_of::Money ;
AntennasTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
MicroelectronicsTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
conference_setup ::= sets_member::human is_made_by::human includes_topic::Topic sets_date::date sets_URL::URL ;
Template ::= recieved_by::User used_by::Person submited__by::User (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document ;
Member_PC ::= expertOn::Topic reviewes::Contribution ;
session ::= conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator starts_on::String ends_on::String has_startdate::dateTime has_enddate::dateTime (eventOnList::Thing)+ partOfEvent::Event hasEvent::Event (organisedBy::Thing)+ heldIn::Location ;
Chairman ::= ConferenceChair ;
 Chairman ::= AssociatedChair ;
 Chairman ::= ProgramCommitteeChair ;
 Chairman ::= hasMail::String worksForCompany::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item memberOfConference::Conference ;
Contact_Person ::= is_author_of::article performs_activity::activity is_employed_in::institute has_topic_of_interest::Topic supervises::activity e-mail::String last_name::String first_name::String ;
Web_Site ::= recieved_by::User used_by::Person submited__by::User (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document ;
TutorialProposal ::= isSubmittedBy::Author hasAuthor::Author submissionDeadline::dateTime ;
RejectedPaper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
ParallelAndDistributedComputingTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Rejected_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
 Rejected_Paper ::= hasReview::Review ;
Event_Approval ::= is_held_before::Time is_held_in::Thing is_held_after::Time is_dated_on::dateTime hasTopic::Topic expectedAttendance::Integer isPartOf::Conference (has_result::Thing)+ sent_by::Person ;
Invited_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
Reviewing_event ::= follows::Administrative_event parallel_with::Administrative_event ;
MultimediaTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
program ::= program_created_by::chair has_session::session ;
CryptographyTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Plenary_lecture_speaker ::= submitPaper::Paper writePaper::Paper writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing ;
Author_book_proceedings_included ::= submitPaper::Paper writePaper::Paper writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing ;
Call ::= CallForPapers ;
 Call ::= CallForReviews ;
 Call ::= CallForManuscripts ;
 Call ::= forEvent::AcademicEvent (isInitiatedBy::Person)+ hasSubmissionInstructions::String hasSubmissionDeadline::dateTime ;
Tutorial ::= has_a_track-workshop-tutorial_topic::Topic is_part_of_conference_volumes::Conference_volume has_a_track-workshop-tutorial_chair::Track-workshop_chair ;
Conference_volume ::= has_parts::Conference_part has_workshops::Workshop has_tracks::Track has_tutorials::Tutorial has_a_commtitee::Committee has_a_steering_committee::Steering_committee has_an_organizing_committee::Organizing_committee has_important_dates::Important_dates has_contributions::Conference_contribution has_a_location::String has_a_program_committee::Program_committee ;
Tip ::= is_paid_with::Item is_paid_by::Person is_paid_in::Building (is_paid_for::Thing)+ has_amount_of::Money ;
Event ::= Symposium ;
 Event ::= Social_event ;
 Event ::= Administrative_event ;
 Event ::= Working_event ;
 Event ::= pc_meeting ;
 Event ::= session ;
 Event ::= Social_Event ;
 Event ::= Scientific_Event ;
 Event ::= conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator starts_on::String ends_on::String has_startdate::dateTime has_enddate::dateTime (eventOnList::Thing)+ partOfEvent::Event hasEvent::Event (organisedBy::Thing)+ heldIn::Location ;
Transparency ::= recieved_by::User used_by::Person submited__by::User (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document ;
Review ::= Meta-Review ;
 Review ::= Positive_Review ;
 Review ::= Negative_Review ;
 Review ::= Neutral_Review ;
 Review ::= writtenBy::Reviewer reviews::Reviewed_contribution gives_classification::classification is_created_in::activity review_written_by::Reviewer reviewOfPaper::Paper reviewWrittenBy::Possible_Reviewer ;
Person ::= ConferenceMember ;
 Person ::= ExternalReviewer ;
 Person ::= User ;
 Person ::= Conference_participant ;
 Person ::= Conference_contributor ;
 Person ::= Committee_member ;
 Person ::= Conference_applicant ;
 Person ::= Track-workshop_chair ;
 Person ::= Scholar ;
 Person ::= Participant ;
 Person ::= Member_PC ;
 Person ::= Chair_PC ;
 Person ::= Science_Worker ;
 Person ::= Assistant ;
 Person ::= Volunteer ;
 Person ::= chair ;
 Person ::= participant ;
 Person ::= ConferenceChair ;
 Person ::= Attendee ;
 Person ::= SessionChair ;
 Person ::= TPCMember ;
 Person ::= Paper_Author ;
 Person ::= Conference_Participant ;
 Person ::= Agency_Staff_Member ;
 Person ::= Possible_Reviewer ;
 Person ::= Student ;
 Person ::= Delegate ;
 Person ::= Sponsor ;
 Person ::= OutsideReferee ;
 Person ::= ProgramCommitteeMember ;
 Person ::= Chairman ;
 Person ::= Administrator ;
 Person ::= Organizer ;
 Person ::= hasMail::String worksForCompany::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item ;
ProgramCommitteeMember ::= ProgramCommitteeChair ;
 ProgramCommitteeMember ::= memberOfProgramCommittee::ProgramCommittee maxPapers::Integer addedBy::Administrator ;
Invited_Talk_Abstract ::= part_of_article::article (is_the_1th_part_of::Thing)+ ;
Poster ::= is_submitted_at::Conference_volume ;
 Poster ::= writtenBy::Author dealsWith::Topic remark::String abstract::String contactEmail::String hasKeyword::String hasTitle::String ;
Paper ::= PaperAbstract ;
 Paper ::= PaperFullVersion ;
 Paper ::= Invited_Paper ;
 Paper ::= Short_Paper ;
 Paper ::= Full_Paper ;
 Paper ::= Accepted_Paper ;
 Paper ::= Rejected_Paper ;
 Paper ::= Undecided_Paper ;
 Paper ::= ActivePaper ;
 Paper ::= PendingPaper ;
 Paper ::= WithdrawnPaper ;
 Paper ::= RejectedPaper ;
 Paper ::= AcceptedPaper ;
 Paper ::= PublishedPaper ;
 Paper ::= Camera_Ready_Paper ;
 Paper ::= Workshop_Paper ;
 Paper ::= Industrial_Paper ;
 Paper ::= Conference_Paper ;
 Paper ::= Submitted_Paper ;
 Paper ::= Poster_Paper ;
 Paper ::= Regular_Paper ;
 Paper ::= Demo_Paper ;
 Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
Invitation_letter ::= recieved_by::User used_by::Person submited__by::User (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document ;
Volunteer ::= hasMail::String worksForCompany::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item ;
Conference_announcement ::= has_authors::Person has_a_date_of_issue::date ;
Administrative_event ::= Reviewing_results_event ;
 Administrative_event ::= Reviewing_event ;
 Administrative_event ::= Registration_of_participants_event ;
 Administrative_event ::= Submission_event ;
 Administrative_event ::= Camera_Ready_event ;
 Administrative_event ::= follows::Administrative_event parallel_with::Administrative_event ;
WithdrawnPaper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
Program_Committee_Chair ::= is_author_of::article performs_activity::activity is_employed_in::institute has_topic_of_interest::Topic supervises::activity e-mail::String last_name::String first_name::String ;
Brief_introduction_for_Session_chair ::= recieved_by::User used_by::Person submited__by::User (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document ;
paper_assignment ::= Manual_Paper_Assignment ;
 paper_assignment ::= Automatic_Paper_Assignment ;
 paper_assignment ::= assign_paper::Program_Committee_member is_performed_by::human ;
Positive_Review ::= writtenBy::Reviewer reviews::Reviewed_contribution gives_classification::classification is_created_in::activity review_written_by::Reviewer reviewOfPaper::Paper reviewWrittenBy::Possible_Reviewer ;
PublishedPaper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
Committee ::= Program_committee ;
 Committee ::= Organizing_committee ;
 Committee ::= Steering_committee ;
 Committee ::= has_members::Committee_member was_a_committee_of::Conference_volume has_a_committee_co-chair::Co-chair has_a_committee_chair::Chair ;
Conference_hall ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
Corresponding_Author ::= submitPaper::Paper writePaper::Paper writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing ;
PendingPaper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
Symposium ::= conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator starts_on::String ends_on::String has_startdate::dateTime has_enddate::dateTime (eventOnList::Thing)+ partOfEvent::Event hasEvent::Event (organisedBy::Thing)+ heldIn::Location ;
PowerlineTransmissionTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
TestOnlyTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Undecided_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
AuthorNotReviewer ::= submitPaper::Paper writePaper::Paper writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing ;
Industrial_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
Abstract ::= Tutorial_Abstract ;
 Abstract ::= Invited_Talk_Abstract ;
 Abstract ::= part_of_article::article (is_the_1th_part_of::Thing)+ ;
Flyer ::= recieved_by::User used_by::Person submited__by::User (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document ;
ActivitySubmissionForm ::= TutorialProposal ;
 ActivitySubmissionForm ::= WorksopProposal ;
 ActivitySubmissionForm ::= Paper ;
 ActivitySubmissionForm ::= isSubmittedBy::Author hasAuthor::Author submissionDeadline::dateTime ;
Tutorial_speaker ::= submitPaper::Paper writePaper::Paper writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing ;
Organising_Agency ::= (publisherOf::Thing)+ technicallyOrganises::Thing ;
PaperFullVersion ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
Conference ::= Conference_volume ;
 Conference ::= TwoLevelConference ;
 Conference ::= SingleLevelConference ;
 Conference ::= isOrganizedBy::OrganizingCommittee annualOrder::Integer takesPlace::Location hasConferenceMember::ConferenceMember paperAssignmentFinalizedBy::Administrator reviewCriteriaEnteredBy::Administrator paperAssignmentToolsRunBy::Administrator virtualMeetingEnabledBy::Administrator hardcopyMailingManifestsPrintedBy::Administrator detailsEnteredBy::Administrator reviewerBiddingStartedBy::Administrator date::date reviewsPerPaper::Integer logoURL::anyURI acceptsHardcopySubmissions::Boolean siteURL::anyURI is_in_phase::phase_of_conference has_program::program hasMember::Person hasName::String endDate::dateTime paperDueOn::dateTime registrationDueOn::dateTime manuscriptDueOn::dateTime startDate::dateTime hasCountry::Country ;
Document ::= Email ;
 Document ::= Submission ;
 Document ::= Template ;
 Document ::= article ;
 Document ::= SlideSet ;
 Document ::= Programme ;
 Document ::= MealMenu ;
 Document ::= Programme_Brochure ;
 Document ::= Flyer ;
 Document ::= Web_Site ;
 Document ::= Multi-author_Volume ;
 Document ::= Form ;
 Document ::= Mailing_list ;
 Document ::= Record_of_attendance ;
 Document ::= Brief_introduction_for_Session_chair ;
 Document ::= Invitation_letter ;
 Document ::= Viza ;
 Document ::= Transparency ;
 Document ::= Payment_document ;
 Document ::= recieved_by::User used_by::Person submited__by::User (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document ;
Viza ::= recieved_by::User used_by::Person submited__by::User (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document ;
SingleLevelConference ::= isOrganizedBy::OrganizingCommittee annualOrder::Integer takesPlace::Location hasConferenceMember::ConferenceMember paperAssignmentFinalizedBy::Administrator reviewCriteriaEnteredBy::Administrator paperAssignmentToolsRunBy::Administrator virtualMeetingEnabledBy::Administrator hardcopyMailingManifestsPrintedBy::Administrator detailsEnteredBy::Administrator reviewerBiddingStartedBy::Administrator date::date reviewsPerPaper::Integer logoURL::anyURI acceptsHardcopySubmissions::Boolean siteURL::anyURI is_in_phase::phase_of_conference has_program::program hasMember::Person hasName::String endDate::dateTime paperDueOn::dateTime registrationDueOn::dateTime manuscriptDueOn::dateTime startDate::dateTime hasCountry::Country ;
Sponsorship ::= TravelGrant ;
 Sponsorship ::= providedBy::Organization hasCostCurrency::String hasCostAmount::Integer ;
ConferenceVenuePlace ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
WirelessCommunicationsTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Item ::= Transport_vehicle ;
 Item ::= Card ;
 Item ::= Audiovisual_equipment ;
 Item ::= Publication ;
 Item ::= Document ;
 Item ::= go_through::Activity (is_used_for::Thing)+ is_signed_by::Person is_made_from::Item is_sent_after::Time is_needed_for::Person is_sent_before::Time is_prepared_by::Person is_used_by::Person is_given_to::Person is_sent_by::Person is_writen_by::Person ;
Demo_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
CallForReviews ::= forEvent::AcademicEvent (isInitiatedBy::Person)+ hasSubmissionInstructions::String hasSubmissionDeadline::dateTime ;
Contribution ::= Poster ;
 Contribution ::= Short_paper ;
 Contribution ::= writtenBy::Author dealsWith::Topic remark::String abstract::String contactEmail::String hasKeyword::String hasTitle::String ;
Activity ::= Event_Creation ;
 Activity ::= Request ;
 Activity ::= Event_Approval ;
 Activity ::= Registration ;
 Activity ::= Activity_before_conference ;
 Activity ::= Conference_activity ;
 Activity ::= Activity_after_conference ;
 Activity ::= WorkShop ;
 Activity ::= Lecture ;
 Activity ::= is_held_before::Time is_held_in::Thing is_held_after::Time is_dated_on::dateTime hasTopic::Topic expectedAttendance::Integer isPartOf::Conference (has_result::Thing)+ sent_by::Person ;
human ::= Program_Committee_member ;
 human ::= Contact_Person ;
 human ::= Program_Committee_Chair ;
 human ::= is_author_of::article performs_activity::activity is_employed_in::institute has_topic_of_interest::Topic supervises::activity e-mail::String last_name::String first_name::String ;
Track ::= has_a_track-workshop-tutorial_topic::Topic is_part_of_conference_volumes::Conference_volume has_a_track-workshop-tutorial_chair::Track-workshop_chair ;
CADTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Information_for_participants ::= has_authors::Person has_a_date_of_issue::date ;
Programme_Brochure ::= recieved_by::User used_by::Person submited__by::User (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document ;
Reviewer ::= Meta-Reviewer ;
 Reviewer ::= assignedByAdministrator::Administrator adjustBid::Bid readPaper::Paper hasBeenAssigned::Paper writeReview::Review assignExternalReviewer::ExternalReviewer invites_co-reviewers::Reviewer invited_by::Reviewer (has_a_review_reference_or_expertise::Thing)+ writes_review::Review hasReviewHistory::PersonalReviewHistory executes::DoubleBlindReview ;
Event_Creation ::= is_held_before::Time is_held_in::Thing is_held_after::Time is_dated_on::dateTime hasTopic::Topic expectedAttendance::Integer isPartOf::Conference (has_result::Thing)+ sent_by::Person ;
Meta-Review ::= writtenBy::Reviewer reviews::Reviewed_contribution gives_classification::classification is_created_in::activity review_written_by::Reviewer reviewOfPaper::Paper reviewWrittenBy::Possible_Reviewer ;
Student ::= earlyRegistration::Boolean ;
 Student ::= hasMail::String worksForCompany::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item ;
Poster_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
managing_of_conference_process ::= is_followed_by::activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human ;
Conference_part ::= Track ;
 Conference_part ::= Tutorial ;
 Conference_part ::= has_a_track-workshop-tutorial_topic::Topic is_part_of_conference_volumes::Conference_volume has_a_track-workshop-tutorial_chair::Track-workshop_chair ;
Call_for_paper ::= has_authors::Person has_a_date_of_issue::date ;
MeetingRoomPlace ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
SlideSet ::= recieved_by::User used_by::Person submited__by::User (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document ;
Neutral_Review ::= writtenBy::Reviewer reviews::Reviewed_contribution gives_classification::classification is_created_in::activity review_written_by::Reviewer reviewOfPaper::Paper reviewWrittenBy::Possible_Reviewer ;
Topic ::= ParallelAndDistributedComputingTopic ;
 Topic ::= WirelessCommunicationsTopic ;
 Topic ::= OperatingTopicsystems ;
 Topic ::= ComputerNetworksTopic ;
 Topic ::= SatelliteAndSpaceCommunicationsTopic ;
 Topic ::= CADTopic ;
 Topic ::= MultimediaTopic ;
 Topic ::= CommunicationsTopic ;
 Topic ::= PowerlineTransmissionTopic ;
 Topic ::= AntennasTopic ;
 Topic ::= PerformanceTopic ;
 Topic ::= SignalProcessingTopic ;
 Topic ::= MicroelectronicsTopic ;
 Topic ::= TestOnlyTopic ;
 Topic ::= RadioCommunicationsTopic ;
 Topic ::= ComputerArchitectureTopic ;
 Topic ::= MedicineTopic ;
 Topic ::= SecurityTopic ;
 Topic ::= MobileComputingTopic ;
 Topic ::= CryptographyTopic ;
 Topic ::= CommunicationTheoryTopic ;
 Topic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
activity ::= paper_assignment ;
 activity ::= bidding_of_reviewer ;
 activity ::= managing_of_conference_process ;
 activity ::= reviewing_proces ;
 activity ::= notification ;
 activity ::= submission_process ;
 activity ::= is_followed_by::activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human ;
ContactInformation ::= hasCity::String hasStreet::String hasPostalCode::String hasPhone::String ;
Review_expertise ::= has_a_submitted_contribution::Submitted_contribution has_an_expertise::EEnum ;
Important_dates ::= is_an_abstract_submission_date::date is_a_full_paper_submission_date::date is_an_ending_date::date is_a_date_of_acceptance_announcement::date is_a_date_of_camera_ready_paper_submission::date is_a_starting_date::date belong_to_a_conference_volume::Conference_volume ;
Submission_event ::= follows::Administrative_event parallel_with::Administrative_event ;
Author_cd_proceedings_included ::= submitPaper::Paper writePaper::Paper writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing ;
Session_room ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
Record_of_attendance ::= recieved_by::User used_by::Person submited__by::User (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document ;
TravelGrant ::= providedBy::Organization hasCostCurrency::String hasCostAmount::Integer ;
Review_preference ::= (has_a_topic_or_a_submission_contribution::Thing)+ has_a_degree::Integer ;
--------------------metamodels::MSOfficeExcel_SpreadsheetMLBasicDef.bgf--------------------
Comment ::= c_cell::Cell com_data::Data author::String showAlways::Boolean ;
Table ::= t_worksheet::Worksheet (t_cols::Column)+ (t_rows::Row)+ defaultColumnWidth::Double defaultRowHeight::Double expandedColumnCount::Integer expandedRowCount::Integer leftCell::Integer topCell::Integer fullColumns::Boolean fullRows::Boolean ;
Worksheet ::= ws_workbook::Workbook ws_table::Table name::String ;
CustomDocumentPropertiesCollection ::= cdp_workbook::Workbook (customDocumentProperties::CustomDocumentProperty)+ ;
DocumentPropertiesCollection ::= dp_workbook::Workbook title::String subject::String keywords::String description::String category::String author::String lastAuthor::String manager::String company::String hyperlinkBase::String revision::Integer presentationFormat::String guid::String appName::String version::VersionType totalTime::Integer lastPrinted::DateTimeType created::DateTimeType lastSaved::DateTimeType pages::Integer words::Integer characters::Integer charactersWithSpaces::Integer bytes::Integer lines::Integer paragraphs::Integer ;
SmartTagType ::= smartTagType_ste::SmartTagsCollection namespaceuri::String name::String url::String ;
Data ::= d_cell::Cell d_comment::Comment value::ValueType ;
Row ::= r_table::Table (r_cells::Cell)+ autoFitHeight::Boolean height::Double ;
Workbook ::= wb_smartTags::SmartTagsCollection wb_docProperties::DocumentPropertiesCollection wb_customDocProperties::CustomDocumentPropertiesCollection (wb_worksheets::Worksheet)+ ;
ErrorValue ::= vt_data::Data ;
Column ::= c_table::Table autoFitWidth::Boolean width::Double ;
DateTimeType ::= year::Integer month::Integer day::Integer hour::Integer minute::Integer second::Integer ;
Cell ::= c_row::Row (c_smartTags::SmartTagsCollection)+ arrayRange::String formula::String hRef::String mergeAcross::Double mergeDown::Double c_data::Data c_comment::Comment ;
VersionType ::= n::Integer nn::Integer ;
CustomDocumentProperty ::= customDocumentProperty_cdpe::CustomDocumentPropertiesCollection name::String value::ValueType ;
SmartTagsCollection ::= st_workbook::Workbook st_cell::Cell (smartTagTypes::SmartTagType)+ ;
--------------------metamodels::MSOfficeExcel_SpreadsheetMLPrintingSetup.bgf--------------------
Comment ::= c_cell::Cell com_data::Data author::String showAlways::Boolean ;
WorksheetOptionsElt ::= wo_worksheet::Worksheet fitToPage::Boolean doNotDisplayColHeaders::Boolean doNotDisplayRowHeaders::Boolean gridlineColor::String name::String excelWorksheetType::ExcelWorksheetTypeType intlMacro::Boolean unsynced::Boolean selected::Boolean codeName::String displayPageBreak::Boolean transitionExpressionEvaluation::Boolean transitionFormulaEntry::Boolean zoom::Integer pageBreakZoom::Integer showPageBreakZoom::Boolean defaultRowHeight::Integer defaultColumnWidth::Integer standardWidth::Integer visible::VisibleType leftColumnVisible::Integer displayRightToLeft::Boolean gridlineColorIndex::Integer displayFormulas::Boolean doNotDisplayGridlines::Boolean doNotDisplayHeadings::Boolean doNotDisplayOutline::Boolean applyAutomaticOutlineStyles::Boolean noSummaryRowsBelowDetail::Boolean noSummaryColumnsRightDetail::Boolean doNotDisplayZeros::Boolean activeRow::Integer activeColumn::Integer filterOn::Boolean rangeSelection::String topRowVisible::Integer topRowBottomPane::Integer leftColumnRightPane::Integer activePane::Integer splitHorizontal::Integer splitVertical::Integer freezePanes::Boolean frozenNoSplit::Boolean tabColorIndex::Integer protectContentst::Boolean protectObjects::Boolean protectScenarios::Boolean enableSelection::EnableSelectionType allowFormatCells::Boolean allowSizeCols::Boolean allowSizeRows::Boolean allowInsertCols::Boolean allowInsertRows::Boolean allowInsertHyperlinks::Boolean allowDeleteCols::Boolean allowDeleteRows::Boolean allowSort::Boolean allowFilter::Boolean allowUsePivotTables::Boolean wo_pageSetup::PageSetup wo_print::Print ;
CustomDocumentPropertiesCollection ::= cdp_workbook::Workbook (customDocumentProperties::CustomDocumentProperty)+ ;
Row ::= r_table::Table (r_cells::Cell)+ autoFitHeight::Boolean height::Double ;
Workbook ::= wb_smartTags::SmartTagsCollection wb_docProperties::DocumentPropertiesCollection wb_customDocProperties::CustomDocumentPropertiesCollection wb_excelWorkbook::ExcelWorkbook (wb_worksheets::Worksheet)+ ;
Column ::= c_table::Table autoFitWidth::Boolean width::Double ;
DateTimeType ::= year::Integer month::Integer day::Integer hour::Integer minute::Integer second::Integer ;
VersionType ::= n::Integer nn::Integer ;
ExcelWorkbook ::= ew_workbook::Workbook selectedSheets::Integer windowHidden::Boolean hideHorizontalScrollBar::Boolean hideVerticalScrollBar::Boolean hideWorkbookTabs::Boolean windowHeight::Double windowWidth::Double windowTopX::Double windowTopY::Double activeSheet::Integer activeChart::String firstVisibleSheet::Integer hidePivotTableFieldList::Boolean protectStructure::Boolean protectWindows::Boolean displayInkNotes::Boolean embedSaveSmartTags::Boolean futureVer::String tabRatio::Integer windowIconic::Boolean displayDrawingObjects::DisplayDrawingObjectsType createBackup::Boolean calculation::CalculationWorkbookType doNotCalculateBeforeSave::Boolean date1904::Boolean refModeR1C1::Boolean iteration::Boolean maxIterations::Integer maxChange::Double precisionAsDisplayed::Boolean doNotSaveLinkValues::Boolean noAutoRecover::Boolean acceptLabelsInFormulas::Boolean uncalced::Boolean ;
PageSetup ::= ps_worksheetOptions::WorksheetOptionsElt ps_layout::Layout ps_header::Header ps_footer::Footer ps_pageMargins::PageMarginsInfo ;
Table ::= t_worksheet::Worksheet (t_cols::Column)+ (t_rows::Row)+ defaultColumnWidth::Double defaultRowHeight::Double expandedColumnCount::Integer expandedRowCount::Integer leftCell::Integer topCell::Integer fullColumns::Boolean fullRows::Boolean ;
Worksheet ::= ws_workbook::Workbook ws_table::Table name::String protected::Boolean rightToLeft::Boolean w_worksheetOptions::WorksheetOptionsElt ;
Print ::= p_worksheetOptions::WorksheetOptionsElt fitWidth::Integer fitHeight::Integer leftToRight::Boolean blackAndWhite::Boolean draftQuality::Boolean commentsLayout::CommentsLayoutType scale::Integer printErrors::String validPrinterInfo::Boolean paperSizeIndex::Integer horizontalResolution::Integer verticalResolution::Integer gridlines::Boolean numberOfCopies::Integer rowColHeadings::Boolean ;
DocumentPropertiesCollection ::= dp_workbook::Workbook title::String subject::String keywords::String description::String category::String author::String lastAuthor::String manager::String company::String hyperlinkBase::String revision::Integer presentationFormat::String guid::String appName::String version::VersionType totalTime::Integer lastPrinted::DateTimeType created::DateTimeType lastSaved::DateTimeType pages::Integer words::Integer characters::Integer charactersWithSpaces::Integer bytes::Integer lines::Integer paragraphs::Integer ;
SmartTagType ::= smartTagType_ste::SmartTagsCollection namespaceuri::String name::String url::String ;
Layout ::= l_pageSetup::PageSetup orientation::OrientationType centerHorizontal::Boolean centerVertical::Boolean startPageNumber::String ;
Data ::= d_cell::Cell d_comment::Comment value::ValueType ;
ErrorValue ::= vt_data::Data ;
PageMarginsInfo ::= pm_pageSetup::PageSetup left::Double right::Double top::Double bottom::Double ;
Cell ::= (c_smartTags::SmartTagsCollection)+ c_row::Row arrayRange::String formula::String hRef::String mergeAcross::Double mergeDown::Double c_data::Data c_comment::Comment ;
CustomDocumentProperty ::= customDocumentProperty_cdpe::CustomDocumentPropertiesCollection name::String value::ValueType ;
SmartTagsCollection ::= st_workbook::Workbook st_cell::Cell (smartTagTypes::SmartTagType)+ ;
--------------------metamodels::MSOfficeExcel_SpreadsheetMLSimplified.bgf--------------------
Table ::= t_worksheet::Worksheet (t_cols::Column)+ (t_rows::Row)+ ;
Worksheet ::= ws_workbook::Workbook ws_table::Table name::String ;
Data ::= d_cell::Cell value::ValueType ;
Row ::= r_table::Table (r_cells::Cell)+ autoFitHeight::Boolean height::Double ;
ErrorValue ::= vt_data::Data ;
Column ::= c_table::Table autoFitWidth::Boolean width::Double ;
DateTimeType ::= year::Integer month::Integer day::Integer hour::Integer minute::Integer second::Integer ;
Cell ::= c_row::Row arrayRange::String formula::String hRef::String mergeAcross::Double mergeDown::Double c_data::Data ;
--------------------metamodels::MSOfficeExcel_SpreadsheetMLStyles.bgf--------------------
Comment ::= c_cell::Cell com_data::Data author::String showAlways::Boolean ;
AlignmentType ::= at_styleType::StyleType horizontal::HorizontalAlignementType readingOrder::ReadingOrderType indent::Double rotate::Double shrinkToFit::Boolean vertical::VerticalAlignementType verticalText::Boolean wrapText::Boolean ;
WorksheetOptionsElt ::= wo_worksheet::Worksheet fitToPage::Boolean doNotDisplayColHeaders::Boolean doNotDisplayRowHeaders::Boolean gridlineColor::String name::String excelWorksheetType::ExcelWorksheetTypeType intlMacro::Boolean unsynced::Boolean selected::Boolean codeName::String displayPageBreak::Boolean transitionExpressionEvaluation::Boolean transitionFormulaEntry::Boolean zoom::Integer pageBreakZoom::Integer showPageBreakZoom::Boolean defaultRowHeight::Integer defaultColumnWidth::Integer standardWidth::Integer visible::VisibleType leftColumnVisible::Integer displayRightToLeft::Boolean gridlineColorIndex::Integer displayFormulas::Boolean doNotDisplayGridlines::Boolean doNotDisplayHeadings::Boolean doNotDisplayOutline::Boolean applyAutomaticOutlineStyles::Boolean noSummaryRowsBelowDetail::Boolean noSummaryColumnsRightDetail::Boolean doNotDisplayZeros::Boolean activeRow::Integer activeColumn::Integer filterOn::Boolean rangeSelection::String topRowVisible::Integer topRowBottomPane::Integer leftColumnRightPane::Integer activePane::Integer splitHorizontal::Integer splitVertical::Integer freezePanes::Boolean frozenNoSplit::Boolean tabColorIndex::Integer protectContentst::Boolean protectObjects::Boolean protectScenarios::Boolean enableSelection::EnableSelectionType allowFormatCells::Boolean allowSizeCols::Boolean allowSizeRows::Boolean allowInsertCols::Boolean allowInsertRows::Boolean allowInsertHyperlinks::Boolean allowDeleteCols::Boolean allowDeleteRows::Boolean allowSort::Boolean allowFilter::Boolean allowUsePivotTables::Boolean wo_pageSetup::PageSetup wo_print::Print ;
CustomDocumentPropertiesCollection ::= cdp_workbook::Workbook (customDocumentProperties::CustomDocumentProperty)+ ;
NumberFormatType ::= nft_styleType::StyleType format::ExcelNumberFormatType ;
Row ::= r_table::Table (r_cells::Cell)+ autoFitHeight::Boolean height::Double ;
Workbook ::= wb_smartTags::SmartTagsCollection wb_docProperties::DocumentPropertiesCollection wb_customDocProperties::CustomDocumentPropertiesCollection wb_excelWorkbook::ExcelWorkbook wb_styles::StylesCollection wb_names::NamesType (wb_worksheets::Worksheet)+ ;
Column ::= c_table::Table autoFitWidth::Boolean width::Double ;
DateTimeType ::= year::Integer month::Integer day::Integer hour::Integer minute::Integer second::Integer ;
ProtectionType ::= pt_styleType::StyleType protected::Boolean ;
VersionType ::= n::Integer nn::Integer ;
ExcelWorkbook ::= ew_workbook::Workbook selectedSheets::Integer windowHidden::Boolean hideHorizontalScrollBar::Boolean hideVerticalScrollBar::Boolean hideWorkbookTabs::Boolean windowHeight::Double windowWidth::Double windowTopX::Double windowTopY::Double activeSheet::Integer activeChart::String firstVisibleSheet::Integer hidePivotTableFieldList::Boolean protectStructure::Boolean protectWindows::Boolean displayInkNotes::Boolean embedSaveSmartTags::Boolean futureVer::String tabRatio::Integer windowIconic::Boolean displayDrawingObjects::DisplayDrawingObjectsType createBackup::Boolean calculation::CalculationWorkbookType doNotCalculateBeforeSave::Boolean date1904::Boolean refModeR1C1::Boolean iteration::Boolean maxIterations::Integer maxChange::Double precisionAsDisplayed::Boolean doNotSaveLinkValues::Boolean noAutoRecover::Boolean acceptLabelsInFormulas::Boolean uncalced::Boolean ;
PageSetup ::= ps_worksheetOptions::WorksheetOptionsElt ps_layout::Layout ps_header::Header ps_footer::Footer ps_pageMargins::PageMarginsInfo ;
Table ::= t_worksheet::Worksheet (t_cols::Column)+ (t_rows::Row)+ defaultColumnWidth::Double defaultRowHeight::Double expandedColumnCount::Integer expandedRowCount::Integer leftCell::Integer topCell::Integer fullColumns::Boolean fullRows::Boolean ;
Worksheet ::= ws_workbook::Workbook ws_table::Table name::String protected::Boolean rightToLeft::Boolean w_worksheetOptions::WorksheetOptionsElt ;
Print ::= p_worksheetOptions::WorksheetOptionsElt fitWidth::Integer fitHeight::Integer leftToRight::Boolean blackAndWhite::Boolean draftQuality::Boolean commentsLayout::CommentsLayoutType scale::Integer printErrors::String validPrinterInfo::Boolean paperSizeIndex::Integer horizontalResolution::Integer verticalResolution::Integer gridlines::Boolean numberOfCopies::Integer rowColHeadings::Boolean ;
DocumentPropertiesCollection ::= dp_workbook::Workbook title::String subject::String keywords::String description::String category::String author::String lastAuthor::String manager::String company::String hyperlinkBase::String revision::Integer presentationFormat::String guid::String appName::String version::VersionType totalTime::Integer lastPrinted::DateTimeType created::DateTimeType lastSaved::DateTimeType pages::Integer words::Integer characters::Integer charactersWithSpaces::Integer bytes::Integer lines::Integer paragraphs::Integer ;
StyleType ::= st_styles::StylesCollection st_styledElement::StyledElement id::String name::String parent::StyleType st_parent::StyleType alignment::AlignmentType borders::BordersType font::FontType interior::InteriorType numberFormat::NumberFormatType protection::ProtectionType ;
SmartTagType ::= smartTagType_ste::SmartTagsCollection namespaceuri::String name::String url::String ;
InteriorType ::= it_styleType::StyleType color::String pattern::PatternType patternColor::String ;
Layout ::= l_pageSetup::PageSetup orientation::OrientationType centerHorizontal::Boolean centerVertical::Boolean startPageNumber::String ;
Data ::= d_cell::Cell d_comment::Comment value::ValueType ;
FontType ::= ft_styleType::StyleType bold::Boolean color::String fontName::String italic::Boolean outline::Boolean shadow::Boolean size::Double strikeThrough::Boolean underline::UnderlineType verticalAlign::VerticalAlignType ;
ErrorValue ::= vt_data::Data ;
BorderType ::= bt_bordersType::BordersType position::PositionType color::String lineStyle::LineStyleType weight::Double ;
NamedRange ::= nr_namesType::NamesType name::String refersTo::String hidden::Boolean ;
PageMarginsInfo ::= pm_pageSetup::PageSetup left::Double right::Double top::Double bottom::Double ;
NamesType ::= nt_workbook::Workbook (namedRanges::NamedRange)+ ;
Cell ::= (c_smartTags::SmartTagsCollection)+ c_row::Row arrayRange::String formula::String hRef::String mergeAcross::Double mergeDown::Double c_data::Data c_comment::Comment ;
BordersType ::= bt_styleType::StyleType border::BorderType ;
CustomDocumentProperty ::= customDocumentProperty_cdpe::CustomDocumentPropertiesCollection name::String value::ValueType ;
StylesCollection ::= s_workbook::Workbook (style::StyleType)+ ;
SmartTagsCollection ::= st_workbook::Workbook st_cell::Cell (smartTagTypes::SmartTagType)+ ;
--------------------metamodels::MSOfficeExcel_SpreadsheetMLWorkbookProp.bgf--------------------
Comment ::= c_cell::Cell com_data::Data author::String showAlways::Boolean ;
Table ::= t_worksheet::Worksheet (t_cols::Column)+ (t_rows::Row)+ defaultColumnWidth::Double defaultRowHeight::Double expandedColumnCount::Integer expandedRowCount::Integer leftCell::Integer topCell::Integer fullColumns::Boolean fullRows::Boolean ;
Worksheet ::= ws_workbook::Workbook ws_table::Table name::String ;
CustomDocumentPropertiesCollection ::= cdp_workbook::Workbook (customDocumentProperties::CustomDocumentProperty)+ ;
DocumentPropertiesCollection ::= dp_workbook::Workbook title::String subject::String keywords::String description::String category::String author::String lastAuthor::String manager::String company::String hyperlinkBase::String revision::Integer presentationFormat::String guid::String appName::String version::VersionType totalTime::Integer lastPrinted::DateTimeType created::DateTimeType lastSaved::DateTimeType pages::Integer words::Integer characters::Integer charactersWithSpaces::Integer bytes::Integer lines::Integer paragraphs::Integer ;
SmartTagType ::= smartTagType_ste::SmartTagsCollection namespaceuri::String name::String url::String ;
Data ::= d_cell::Cell d_comment::Comment value::ValueType ;
Row ::= r_table::Table (r_cells::Cell)+ autoFitHeight::Boolean height::Double ;
Workbook ::= wb_smartTags::SmartTagsCollection wb_docProperties::DocumentPropertiesCollection wb_customDocProperties::CustomDocumentPropertiesCollection wb_excelWorkbook::ExcelWorkbook (wb_worksheets::Worksheet)+ ;
ErrorValue ::= vt_data::Data ;
Column ::= c_table::Table autoFitWidth::Boolean width::Double ;
DateTimeType ::= year::Integer month::Integer day::Integer hour::Integer minute::Integer second::Integer ;
Cell ::= (c_smartTags::SmartTagsCollection)+ c_row::Row arrayRange::String formula::String hRef::String mergeAcross::Double mergeDown::Double c_data::Data c_comment::Comment ;
VersionType ::= n::Integer nn::Integer ;
ExcelWorkbook ::= ew_workbook::Workbook selectedSheets::Integer windowHidden::Boolean hideHorizontalScrollBar::Boolean hideVerticalScrollBar::Boolean hideWorkbookTabs::Boolean windowHeight::Double windowWidth::Double windowTopX::Double windowTopY::Double activeSheet::Integer activeChart::String firstVisibleSheet::Integer hidePivotTableFieldList::Boolean protectStructure::Boolean protectWindows::Boolean displayInkNotes::Boolean embedSaveSmartTags::Boolean futureVer::String tabRatio::Integer windowIconic::Boolean displayDrawingObjects::DisplayDrawingObjectsType createBackup::Boolean calculation::CalculationWorkbookType doNotCalculateBeforeSave::Boolean date1904::Boolean refModeR1C1::Boolean iteration::Boolean maxIterations::Integer maxChange::Double precisionAsDisplayed::Boolean doNotSaveLinkValues::Boolean noAutoRecover::Boolean acceptLabelsInFormulas::Boolean uncalced::Boolean ;
CustomDocumentProperty ::= customDocumentProperty_cdpe::CustomDocumentPropertiesCollection name::String value::ValueType ;
SmartTagsCollection ::= st_workbook::Workbook st_cell::Cell (smartTagTypes::SmartTagType)+ ;
--------------------metamodels::MSOfficeExcel_SpreadsheetMLWorksheetOpt.bgf--------------------
Comment ::= c_cell::Cell com_data::Data author::String showAlways::Boolean ;
WorksheetOptionsElt ::= wo_worksheet::Worksheet fitToPage::Boolean doNotDisplayColHeaders::Boolean doNotDisplayRowHeaders::Boolean gridlineColor::String name::String excelWorksheetType::ExcelWorksheetTypeType intlMacro::Boolean unsynced::Boolean selected::Boolean codeName::String displayPageBreak::Boolean transitionExpressionEvaluation::Boolean transitionFormulaEntry::Boolean zoom::Integer pageBreakZoom::Integer showPageBreakZoom::Boolean defaultRowHeight::Integer defaultColumnWidth::Integer standardWidth::Integer visible::VisibleType leftColumnVisible::Integer displayRightToLeft::Boolean gridlineColorIndex::Integer displayFormulas::Boolean doNotDisplayGridlines::Boolean doNotDisplayHeadings::Boolean doNotDisplayOutline::Boolean applyAutomaticOutlineStyles::Boolean noSummaryRowsBelowDetail::Boolean noSummaryColumnsRightDetail::Boolean doNotDisplayZeros::Boolean activeRow::Integer activeColumn::Integer filterOn::Boolean rangeSelection::String topRowVisible::Integer topRowBottomPane::Integer leftColumnRightPane::Integer activePane::Integer splitHorizontal::Integer splitVertical::Integer freezePanes::Boolean frozenNoSplit::Boolean tabColorIndex::Integer protectContentst::Boolean protectObjects::Boolean protectScenarios::Boolean enableSelection::EnableSelectionType allowFormatCells::Boolean allowSizeCols::Boolean allowSizeRows::Boolean allowInsertCols::Boolean allowInsertRows::Boolean allowInsertHyperlinks::Boolean allowDeleteCols::Boolean allowDeleteRows::Boolean allowSort::Boolean allowFilter::Boolean allowUsePivotTables::Boolean ;
CustomDocumentPropertiesCollection ::= cdp_workbook::Workbook (customDocumentProperties::CustomDocumentProperty)+ ;
Row ::= r_table::Table (r_cells::Cell)+ autoFitHeight::Boolean height::Double ;
Workbook ::= wb_smartTags::SmartTagsCollection wb_docProperties::DocumentPropertiesCollection wb_customDocProperties::CustomDocumentPropertiesCollection wb_excelWorkbook::ExcelWorkbook (wb_worksheets::Worksheet)+ ;
Column ::= c_table::Table autoFitWidth::Boolean width::Double ;
DateTimeType ::= year::Integer month::Integer day::Integer hour::Integer minute::Integer second::Integer ;
VersionType ::= n::Integer nn::Integer ;
ExcelWorkbook ::= ew_workbook::Workbook selectedSheets::Integer windowHidden::Boolean hideHorizontalScrollBar::Boolean hideVerticalScrollBar::Boolean hideWorkbookTabs::Boolean windowHeight::Double windowWidth::Double windowTopX::Double windowTopY::Double activeSheet::Integer activeChart::String firstVisibleSheet::Integer hidePivotTableFieldList::Boolean protectStructure::Boolean protectWindows::Boolean displayInkNotes::Boolean embedSaveSmartTags::Boolean futureVer::String tabRatio::Integer windowIconic::Boolean displayDrawingObjects::DisplayDrawingObjectsType createBackup::Boolean calculation::CalculationWorkbookType doNotCalculateBeforeSave::Boolean date1904::Boolean refModeR1C1::Boolean iteration::Boolean maxIterations::Integer maxChange::Double precisionAsDisplayed::Boolean doNotSaveLinkValues::Boolean noAutoRecover::Boolean acceptLabelsInFormulas::Boolean uncalced::Boolean ;
Table ::= t_worksheet::Worksheet (t_cols::Column)+ (t_rows::Row)+ defaultColumnWidth::Double defaultRowHeight::Double expandedColumnCount::Integer expandedRowCount::Integer leftCell::Integer topCell::Integer fullColumns::Boolean fullRows::Boolean ;
Worksheet ::= ws_workbook::Workbook ws_table::Table name::String protected::Boolean rightToLeft::Boolean w_worksheetOptions::WorksheetOptionsElt ;
DocumentPropertiesCollection ::= dp_workbook::Workbook title::String subject::String keywords::String description::String category::String author::String lastAuthor::String manager::String company::String hyperlinkBase::String revision::Integer presentationFormat::String guid::String appName::String version::VersionType totalTime::Integer lastPrinted::DateTimeType created::DateTimeType lastSaved::DateTimeType pages::Integer words::Integer characters::Integer charactersWithSpaces::Integer bytes::Integer lines::Integer paragraphs::Integer ;
SmartTagType ::= smartTagType_ste::SmartTagsCollection namespaceuri::String name::String url::String ;
Data ::= d_cell::Cell d_comment::Comment value::ValueType ;
ErrorValue ::= vt_data::Data ;
Cell ::= (c_smartTags::SmartTagsCollection)+ c_row::Row arrayRange::String formula::String hRef::String mergeAcross::Double mergeDown::Double c_data::Data c_comment::Comment ;
CustomDocumentProperty ::= customDocumentProperty_cdpe::CustomDocumentPropertiesCollection name::String value::ValueType ;
SmartTagsCollection ::= st_workbook::Workbook st_cell::Cell (smartTagTypes::SmartTagType)+ ;
--------------------metamodels::MSOfficeWord_WordprocessingMLBasicDef.bgf--------------------
Symbol ::= rce_rElt::RunElt font::StringType char::StringType ;
DelText ::= rce_rElt::RunElt val::String ;
Tab ::= rce_rElt::RunElt ;
FldChar ::= rce_rElt::RunElt fldData::StringType fldCharType::FldCharTypeProperty fldLock::OnOffType ;
FootnoteRef ::= rce_rElt::RunElt ;
NoBreakHyphen ::= rce_rElt::RunElt ;
PgNum ::= rce_rElt::RunElt ;
Endnote ::= rce_rElt::RunElt (n_blockLevelElts::BlockLevelElt)+ type::NoteValue suppressRef::OnOffType ;
HLinkElt ::= pce_pElt::ParaElt ;
CfChunk ::= ble_bodyElt::BodyElt ble_note::NoteElt ;
EndnoteRef ::= rce_rElt::RunElt ;
StringProperty ::= val::String ;
WordDocument ::= wd_smartTags::SmartTagsCollection wd_docProperties::DocumentPropertiesCollection wd_customDocProperties::CustomDocumentPropertiesCollection ignoreSubtree::StringProperty ignoreElements::StringProperty fonts::FontsListElt lists::ListsElt styles::StylesElt docPr::DocPrElt body::BodyElt ;
SmartTagsCollection ::= st_wordDocument::WordDocument (smartTagTypes::SmartTagType)+ ;
Picture ::= rce_rElt::RunElt ;
CustomDocumentPropertiesCollection ::= cdp_wordDocument::WordDocument (customDocumentProperties::CustomDocumentProperty)+ ;
SoftHyphen ::= rce_rElt::RunElt ;
FldCharElt ::= FldChar ;
 FldCharElt ::= fldData::StringType fldCharType::FldCharTypeProperty fldLock::OnOffType ;
InstrText ::= rce_rElt::RunElt val::String ;
SubDocElt ::= pce_pElt::ParaElt ;
DateTimeType ::= year::Integer month::Integer day::Integer hour::Integer minute::Integer second::Integer ;
VersionType ::= n::Integer nn::Integer ;
Cr ::= rce_rElt::RunElt ;
ContinuationSeparator ::= rce_rElt::RunElt ;
DelInstrText ::= rce_rElt::RunElt val::String ;
ParaElt ::= pPr::ParaPrElt (pContentElts::ParaContentElt)+ ;
Text ::= rce_rElt::RunElt val::String ;
DocumentPropertiesCollection ::= dp_wordDocument::WordDocument title::String subject::String keywords::String description::String category::String author::String lastAuthor::String manager::String company::String hyperlinkBase::String revision::Integer presentationFormat::String guid::String appName::String version::VersionType totalTime::Integer lastPrinted::DateTimeType created::DateTimeType lastSaved::DateTimeType pages::Integer words::Integer characters::Integer charactersWithSpaces::Integer bytes::Integer lines::Integer paragraphs::Integer ;
BodyElt ::= be_wordDocument::WordDocument (blockLevelElts::BlockLevelElt)+ sectPr::SectPrElt ;
SmartTagType ::= smartTagType_ste::SmartTagsCollection namespaceuri::String name::String url::String ;
SymElt ::= Symbol ;
 SymElt ::= font::StringType char::StringType ;
SimpleFieldElt ::= pce_pElt::ParaElt ;
Separator ::= rce_rElt::RunElt ;
AnnotationRef ::= rce_rElt::RunElt ;
RunElt ::= rPr::RunPrElt (rContentElts::RunContentElt)+ ;
CustomDocumentProperty ::= customDocumentProperty_cdpe::CustomDocumentPropertiesCollection name::String value::ValueType ;
Footnote ::= rce_rElt::RunElt (n_blockLevelElts::BlockLevelElt)+ type::NoteValue suppressRef::OnOffType ;
--------------------metamodels::MSOfficeWord_WordprocessingMLSimplified.bgf--------------------
Picture ::= rce_rElt::RunElt ;
SoftHyphen ::= rce_rElt::RunElt ;
FldCharElt ::= FldChar ;
 FldCharElt ::= fldData::StringType fldCharType::FldCharTypeProperty fldLock::OnOffType ;
InstrText ::= rce_rElt::RunElt val::String ;
Symbol ::= rce_rElt::RunElt font::StringType char::StringType ;
DelText ::= rce_rElt::RunElt val::String ;
Tab ::= rce_rElt::RunElt ;
FldChar ::= rce_rElt::RunElt fldData::StringType fldCharType::FldCharTypeProperty fldLock::OnOffType ;
FootnoteRef ::= rce_rElt::RunElt ;
NoBreakHyphen ::= rce_rElt::RunElt ;
Cr ::= rce_rElt::RunElt ;
PgNum ::= rce_rElt::RunElt ;
ContinuationSeparator ::= rce_rElt::RunElt ;
DelInstrText ::= rce_rElt::RunElt val::String ;
Endnote ::= rce_rElt::RunElt (n_blockLevelElts::BlockLevelElt)+ type::NoteValue suppressRef::OnOffType ;
Text ::= rce_rElt::RunElt val::String ;
BodyElt ::= be_wordDocument::WordDocument (blockLevelElts::BlockLevelElt)+ ;
SymElt ::= Symbol ;
 SymElt ::= font::StringType char::StringType ;
EndnoteRef ::= rce_rElt::RunElt ;
StringProperty ::= val::String ;
Separator ::= rce_rElt::RunElt ;
WordDocument ::= ignoreSubtree::StringProperty ignoreElements::StringProperty body::BodyElt ;
AnnotationRef ::= rce_rElt::RunElt ;
Footnote ::= rce_rElt::RunElt (n_blockLevelElts::BlockLevelElt)+ type::NoteValue suppressRef::OnOffType ;
--------------------metamodels::MSOfficeWord_WordprocessingMLStyles.bgf--------------------
LangElt ::= le_runPrElt::RunPrElt val::String bidi::String ;
FontElt ::= fe_fontsListElt::FontsListElt name::StringType altName::StringProperty ;
TablePrElt ::= tpe_tblElt::TableElt tpe_styleElt::StyleElt ;
TableCellPrElt ::= tcpe_tableCellElt::TableCellElt tcpe_styleElt::StyleElt ;
Symbol ::= rce_rElt::RunElt font::StringType char::StringType ;
DelText ::= rce_rElt::RunElt val::String ;
Tab ::= rce_rElt::RunElt ;
FldChar ::= rce_rElt::RunElt fldData::StringType fldCharType::FldCharTypeProperty fldLock::OnOffType ;
FootnoteRef ::= rce_rElt::RunElt ;
NoBreakHyphen ::= rce_rElt::RunElt ;
PgNum ::= rce_rElt::RunElt ;
Endnote ::= rce_rElt::RunElt (n_blockLevelElts::BlockLevelElt)+ type::NoteValue suppressRef::OnOffType ;
HLinkElt ::= pce_pElt::ParaElt ;
FontsListElt ::= fle_wordDocument::WordDocument defaultFonts::FontsElt (fonts::FontElt)+ ;
ParaPrElt ::= ppe_pElt::ParaElt ppe_styleElt::StyleElt pStyle::StringProperty keepNext::OnOffType keepLines::OnOffType pageBreakBefore::OnOffType supressLineNumbers::OnOffType suppressAutoHyphens::OnOffType contextualSpacing::OnOffType bidi::OnOffType justification::JustificationValue ;
CfChunk ::= ble_bodyElt::BodyElt ble_note::NoteElt ble_tableCellElt::TableCellElt ;
FontsElt ::= fse_fontsListElt::FontsListElt fse_runPrElt::RunPrElt hint::HintType ascii::StringType h_ansi::StringType fareast::StringType cs::StringType ;
EndnoteRef ::= rce_rElt::RunElt ;
StringProperty ::= val::String ;
WordDocument ::= wd_smartTags::SmartTagsCollection wd_docProperties::DocumentPropertiesCollection wd_customDocProperties::CustomDocumentPropertiesCollection ignoreSubtree::StringProperty ignoreElements::StringProperty fonts::FontsListElt lists::ListsElt styles::StylesElt docPr::DocPrElt body::BodyElt ;
UnderlineProperty ::= val::UnderlineValues color::String ;
RunPrElt ::= rpe_rElt::RunElt rpe_styleElt::StyleElt rStyle::StringProperty rFonts::FontsElt bold::OnOffType bold_cs::OnOffType italic::OnOffType italic_cs::OnOffType capitals::OnOffType smallCapitals::OnOffType strike::OnOffType doubleStrike::OnOffType outline::OnOffType shadow::OnOffType emboss::OnOffType imprint::OnOffType noProof::OnOffType vanish::OnOffType specVanish::OnOffType rtl::OnOffType cs::OnOffType underline::UnderlineProperty color::String highlight::HighlightColorValues verticalAlign::VerticalAlignRunType language::LangElt ;
SmartTagsCollection ::= st_wordDocument::WordDocument (smartTagTypes::SmartTagType)+ ;
TableRowPrElt ::= tpe_rowElt::RowElt trpe_styleElt::StyleElt ;
TableElt ::= tblPr::TablePrElt tblGrid::TableGridElt (tblContent::TableContentElt)+ ;
Picture ::= rce_rElt::RunElt ;
TableCellElt ::= tce_rowContentElt::RowContentElt tcPr::TableCellPrElt (tce_content::BlockLevelElt)+ ;
CustomDocumentPropertiesCollection ::= cdp_wordDocument::WordDocument (customDocumentProperties::CustomDocumentProperty)+ ;
StyleElt ::= se_stylesElt::StylesElt type::StyleKindValue styleId::StringType default::OnOffType name::StringProperty aliases::StringProperty sti::Double basedOn::StringProperty next::StringProperty link::StringProperty autoRedefine::OnOffType hidden::OnOffType semiHidden::OnOffType locked::OnOffType personal::OnOffType personalCompose::OnOffType personalReply::OnOffType rsid::StringType se_pPr::ParaPrElt se_rPr::RunPrElt se_tblPr::TablePrElt se_trPr::TableRowPrElt se_tcPr::TableCellPrElt ;
SoftHyphen ::= rce_rElt::RunElt ;
FldCharElt ::= FldChar ;
 FldCharElt ::= fldData::StringType fldCharType::FldCharTypeProperty fldLock::OnOffType ;
InstrText ::= rce_rElt::RunElt val::String ;
SubDocElt ::= pce_pElt::ParaElt ;
DateTimeType ::= year::Integer month::Integer day::Integer hour::Integer minute::Integer second::Integer ;
RunLevelElt ::= rle_tblContentElt::TableContentElt rle_rowContentElt::RowContentElt ;
RowElt ::= re_tblContentElt::TableContentElt tblPrEx::TablePrExElt trPr::TableRowPrElt (rowContent::RowContentElt)+ ;
VersionType ::= n::Integer nn::Integer ;
Cr ::= rce_rElt::RunElt ;
RowContentElt ::= rce_rowElt::RowElt (tc::TableCellElt)+ rce_runLevelElts::RunLevelElt ;
ContinuationSeparator ::= rce_rElt::RunElt ;
DelInstrText ::= rce_rElt::RunElt val::String ;
ParaElt ::= pPr::ParaPrElt (pContentElts::ParaContentElt)+ ;
Text ::= rce_rElt::RunElt val::String ;
DocumentPropertiesCollection ::= dp_wordDocument::WordDocument title::String subject::String keywords::String description::String category::String author::String lastAuthor::String manager::String company::String hyperlinkBase::String revision::Integer presentationFormat::String guid::String appName::String version::VersionType totalTime::Integer lastPrinted::DateTimeType created::DateTimeType lastSaved::DateTimeType pages::Integer words::Integer characters::Integer charactersWithSpaces::Integer bytes::Integer lines::Integer paragraphs::Integer ;
StylesElt ::= se_wordDocument::WordDocument versionOfBuiltInStylenames::Double (styles::StyleElt)+ ;
BodyElt ::= be_wordDocument::WordDocument (blockLevelElts::BlockLevelElt)+ sectPr::SectPrElt ;
SmartTagType ::= smartTagType_ste::SmartTagsCollection namespaceuri::String name::String url::String ;
SymElt ::= Symbol ;
 SymElt ::= font::StringType char::StringType ;
SimpleFieldElt ::= pce_pElt::ParaElt ;
Separator ::= rce_rElt::RunElt ;
AnnotationRef ::= rce_rElt::RunElt ;
TableContentElt ::= tce_tblElt::TableElt (tr::RowElt)+ tce_runLevelElts::RunLevelElt ;
RunElt ::= rPr::RunPrElt (rContentElts::RunContentElt)+ ;
CustomDocumentProperty ::= customDocumentProperty_cdpe::CustomDocumentPropertiesCollection name::String value::ValueType ;
Footnote ::= rce_rElt::RunElt (n_blockLevelElts::BlockLevelElt)+ type::NoteValue suppressRef::OnOffType ;
--------------------metamodels::MSOfficeWord_WordprocessingMLTableElts.bgf--------------------
Symbol ::= rce_rElt::RunElt font::StringType char::StringType ;
DelText ::= rce_rElt::RunElt val::String ;
Tab ::= rce_rElt::RunElt ;
FldChar ::= rce_rElt::RunElt fldData::StringType fldCharType::FldCharTypeProperty fldLock::OnOffType ;
FootnoteRef ::= rce_rElt::RunElt ;
NoBreakHyphen ::= rce_rElt::RunElt ;
PgNum ::= rce_rElt::RunElt ;
Endnote ::= rce_rElt::RunElt (n_blockLevelElts::BlockLevelElt)+ type::NoteValue suppressRef::OnOffType ;
HLinkElt ::= pce_pElt::ParaElt ;
CfChunk ::= ble_bodyElt::BodyElt ble_note::NoteElt ble_tableCellElt::TableCellElt ;
EndnoteRef ::= rce_rElt::RunElt ;
StringProperty ::= val::String ;
WordDocument ::= wd_smartTags::SmartTagsCollection wd_docProperties::DocumentPropertiesCollection wd_customDocProperties::CustomDocumentPropertiesCollection ignoreSubtree::StringProperty ignoreElements::StringProperty fonts::FontsListElt lists::ListsElt styles::StylesElt docPr::DocPrElt body::BodyElt ;
SmartTagsCollection ::= st_wordDocument::WordDocument (smartTagTypes::SmartTagType)+ ;
TableElt ::= tblPr::TablePrElt tblGrid::TableGridElt (tblContent::TableContentElt)+ ;
Picture ::= rce_rElt::RunElt ;
TableCellElt ::= tce_rowContentElt::RowContentElt tcPr::TableCellPrElt (tce_content::BlockLevelElt)+ ;
CustomDocumentPropertiesCollection ::= cdp_wordDocument::WordDocument (customDocumentProperties::CustomDocumentProperty)+ ;
SoftHyphen ::= rce_rElt::RunElt ;
FldCharElt ::= FldChar ;
 FldCharElt ::= fldData::StringType fldCharType::FldCharTypeProperty fldLock::OnOffType ;
InstrText ::= rce_rElt::RunElt val::String ;
SubDocElt ::= pce_pElt::ParaElt ;
DateTimeType ::= year::Integer month::Integer day::Integer hour::Integer minute::Integer second::Integer ;
RunLevelElt ::= rle_tblContentElt::TableContentElt rle_rowContentElt::RowContentElt ;
RowElt ::= re_tblContentElt::TableContentElt tblPrEx::TablePrExElt trPr::TableRowPrElt (rowContent::RowContentElt)+ ;
VersionType ::= n::Integer nn::Integer ;
Cr ::= rce_rElt::RunElt ;
RowContentElt ::= rce_rowElt::RowElt (tc::TableCellElt)+ rce_runLevelElts::RunLevelElt ;
ContinuationSeparator ::= rce_rElt::RunElt ;
DelInstrText ::= rce_rElt::RunElt val::String ;
ParaElt ::= pPr::ParaPrElt (pContentElts::ParaContentElt)+ ;
Text ::= rce_rElt::RunElt val::String ;
DocumentPropertiesCollection ::= dp_wordDocument::WordDocument title::String subject::String keywords::String description::String category::String author::String lastAuthor::String manager::String company::String hyperlinkBase::String revision::Integer presentationFormat::String guid::String appName::String version::VersionType totalTime::Integer lastPrinted::DateTimeType created::DateTimeType lastSaved::DateTimeType pages::Integer words::Integer characters::Integer charactersWithSpaces::Integer bytes::Integer lines::Integer paragraphs::Integer ;
BodyElt ::= be_wordDocument::WordDocument (blockLevelElts::BlockLevelElt)+ sectPr::SectPrElt ;
SmartTagType ::= smartTagType_ste::SmartTagsCollection namespaceuri::String name::String url::String ;
SymElt ::= Symbol ;
 SymElt ::= font::StringType char::StringType ;
SimpleFieldElt ::= pce_pElt::ParaElt ;
Separator ::= rce_rElt::RunElt ;
AnnotationRef ::= rce_rElt::RunElt ;
TableContentElt ::= tce_tblElt::TableElt (tr::RowElt)+ tce_runLevelElts::RunLevelElt ;
RunElt ::= rPr::RunPrElt (rContentElts::RunContentElt)+ ;
CustomDocumentProperty ::= customDocumentProperty_cdpe::CustomDocumentPropertiesCollection name::String value::ValueType ;
Footnote ::= rce_rElt::RunElt (n_blockLevelElts::BlockLevelElt)+ type::NoteValue suppressRef::OnOffType ;
--------------------metamodels::MSProject.bgf--------------------
Task ::= UID::String (predecessors::Task)+ ;
--------------------metamodels::MSProject2.bgf--------------------
MSPTask ::= finishDate::Date startDate::Date project::MSPProject superTask::MSPTask (subTask::MSPTask)+ (assignment::MSPAssignment)+ (inLink::MSPLink)+ (outLink::MSPLink)+ ;
MSPProject ::= (resource::MSPResource)+ (link::MSPLink)+ (task::MSPTask)+ ;
Date ::= day::Integer month::Integer year::Integer ;
MSPMachine ::= cost::Double project::MSPProject (assignment::MSPAssignment)+ ;
MSPResource ::= MSPHumanResource ;
 MSPResource ::= MSPMachine ;
 MSPResource ::= cost::Double project::MSPProject (assignment::MSPAssignment)+ ;
MSPAssignment ::= task::MSPTask resource::MSPResource ;
MSPLink ::= project::MSPProject succ::MSPTask pred::MSPTask ;
--------------------metamodels::MTRANS.bgf--------------------
Instruction ::= body::Expression section::Section ;
Variable ::= name::String rule::Rule ;
Rule ::= isAbstract::Boolean isEntryPoint::Boolean name::String module::Module target::MetaClass source::MetaClass declaration::Variable (sections::Section)+ guard::Expression (inheritances::Inheritance)+ ;
Module ::= name::String mode::String (metaDest::MetaModel)+ (metaSource::MetaModel)+ (rules::Rule)+ ;
Inheritance ::= rule::Rule (expressions::Expression)+ (inheritedRules::Rule)+ ;
Expression ::= operator::String inheritance::Inheritance rule::Rule instruction::Instruction ;
Section ::= kind::String rule::Rule (instructions::Instruction)+ ;
--------------------metamodels::MSVisio_DatadiagramMLBasicDef.bgf--------------------
Geom ::= noFill::CellType noLine::CellType noShow::CellType noSnap::CellType (linesTo::LineTo)+ (movesTo::MoveTo)+ (arcsTo::ArcTo)+ (splineKnots::SplineKnot)+ (polylinesTo::PolylineTo)+ (infiniteLines::InfiniteLine)+ (ellipses::Ellipse)+ (ellipticalArcsTo::EllipticalArcTo)+ (splineStarts::SplineStart)+ (nurbsTo::NURBSTo)+ ;
CellType ::= unit::String formula::String err::String value::String ;
Icon ::= i_masterShortCut::MasterShortCut value::String ;
VBProjectData ::= vpd_visioDocument::VisioDocument data::String ;
DateTimeType ::= year::Integer month::Integer day::Integer hour::Integer minute::Integer second::Integer ;
EmailRoutingData ::= erd_visioDocument::VisioDocument data::String size::Integer ;
PageSheet ::= DocumentSheet ;
 PageSheet ::= ss_shapes::ShapesCollection lineStyle::Integer fillStyle::Integer textStyle::Integer (shapeElts::ShapeElt)+ ;
Page ::= p_pages::PagesCollection background::Boolean backPage::Integer viewScale::Double viewCenterX::Double ViewCenterY::Double reviewerID::Integer associatedPage::Integer (pageElts::PageElt)+ ;
MastersCollection ::= ms_visioDocument::VisioDocument (masters::Master)+ (masterShortCuts::MasterShortCut)+ ;
DocumentPropertiesCollection ::= dps_visioDocument::VisioDocument title::String subject::String creator::String manager::String company::String category::String keywords::String description::String hyperlinkBase_href::String alternateNames::String template::String buildNumberCreated::String buildNumberEdited::String customProps::CustomPropertiesCollection timeCreated::DateTimeType timeSaved::DateTimeType timeEdited::DateTimeType timePrinted::DateTimeType ;
Connect ::= c_connects::ConnectsCollection fromSheet::Integer toSheet::Integer fromCell::String toCell::String fromPart::Integer toPart::Integer ;
MasterShortCut ::= m_masterShortCuts::MastersCollection iconSize::Integer patternFlags::Integer prompt::String shortcutURL::String shortcutHelp::String alignName::Integer (icons::Icon)+ ;
CustomProperty ::= cp_customProps::CustomPropertiesCollection name::String dataType::String ;
StyleSheetsCollection ::= sss_visioDocument::VisioDocument (stylesSheets::StyleSheet)+ ;
PagesCollection ::= ps_visioDocument::VisioDocument (pages::Page)+ ;
Master ::= m_masters::MastersCollection baseID::String matchByName::Boolean iconSize::Integer patternFlags::Integer prompt::String hidden::Boolean iconUpdate::Boolean alignName::Integer (masterElts::MasterElt)+ ;
CustomPropertiesCollection ::= cps_docProp::DocumentPropertiesCollection (cps_customProps::CustomProperty)+ ;
Shape ::= StyleSheet ;
 Shape ::= PageSheet ;
 Shape ::= ss_shapes::ShapesCollection lineStyle::Integer fillStyle::Integer textStyle::Integer (shapeElts::ShapeElt)+ ;
VisioDocument ::= start::Integer key::String metric::Boolean buildnum::Integer version::String docLangId::Integer docProps::DocumentPropertiesCollection docSettings::DocumentSettingsElt docColors::ColorsTable docPrintSetup::PrintSetup docFonts::FontsTable docFaceNames::FaceNamesTable docStyleSheets::StyleSheetsCollection docDocumentSheet::DocumentSheet docMasters::MastersCollection docPages::PagesCollection docWindows::WindowsInfo docEventList::EventList docHeaderFooter::HeaderFooter docVBProjectData::VBProjectData docEmailRoutingData::EmailRoutingData (docSolutionXML::SolutionXML)+ ;
--------------------metamodels::MSVisio_DatadiagramMLSimplified.bgf--------------------
Page ::= p_pages::PagesCollection background::Boolean backPage::Integer viewScale::Double viewCenterX::Double ViewCenterY::Double reviewerID::Integer associatedPage::Integer (pageElts::PageElt)+ ;
MastersCollection ::= ms_visioDocument::VisioDocument (masters::Master)+ (masterShortCuts::MasterShortCut)+ ;
Geom ::= noFill::CellType noLine::CellType noShow::CellType noSnap::CellType (linesTo::LineTo)+ (movesTo::MoveTo)+ (arcsTo::ArcTo)+ (splineKnots::SplineKnot)+ (polylinesTo::PolylineTo)+ (infiniteLines::InfiniteLine)+ (ellipses::Ellipse)+ (ellipticalArcsTo::EllipticalArcTo)+ (splineStarts::SplineStart)+ (nurbsTo::NURBSTo)+ ;
CellType ::= unit::String formula::String err::String value::String ;
Connect ::= c_connects::ConnectsCollection fromSheet::Integer toSheet::Integer fromCell::String toCell::String fromPart::Integer toPart::Integer ;
Icon ::= i_masterShortCut::MasterShortCut value::String ;
MasterShortCut ::= m_masterShortCuts::MastersCollection iconSize::Integer patternFlags::Integer prompt::String shortcutURL::String shortcutHelp::String alignName::Integer (icons::Icon)+ ;
PagesCollection ::= ps_visioDocument::VisioDocument (pages::Page)+ ;
Master ::= m_masters::MastersCollection baseID::String matchByName::Boolean iconSize::Integer patternFlags::Integer prompt::String hidden::Boolean iconUpdate::Boolean alignName::Integer (masterElts::MasterElt)+ ;
Shape ::= PageSheet ;
 Shape ::= ss_shapes::ShapesCollection lineStyle::Integer fillStyle::Integer textStyle::Integer (shapeElts::ShapeElt)+ ;
VisioDocument ::= docMasters::MastersCollection docPages::PagesCollection ;
PageSheet ::= ss_shapes::ShapesCollection lineStyle::Integer fillStyle::Integer textStyle::Integer (shapeElts::ShapeElt)+ ;
--------------------metamodels::MSVisio_DatadiagramMLTextFormat.bgf--------------------
Fld ::= iX::Integer te_text::Text ;
ColorsTable ::= cs_visioDocument::VisioDocument (colorEntries::ColorEntry)+ ;
Tp ::= iX::Integer te_text::Text ;
Geom ::= noFill::CellType noLine::CellType noShow::CellType noSnap::CellType (linesTo::LineTo)+ (movesTo::MoveTo)+ (arcsTo::ArcTo)+ (splineKnots::SplineKnot)+ (polylinesTo::PolylineTo)+ (infiniteLines::InfiniteLine)+ (ellipses::Ellipse)+ (ellipticalArcsTo::EllipticalArcTo)+ (splineStarts::SplineStart)+ (nurbsTo::NURBSTo)+ ;
CellType ::= unit::String formula::String err::String value::String ;
Field ::= value::CellType editMode::CellType format::CellType type::CellType uiCat::CellType uiCode::CellType uiFmt::CellType calendar::CellType objectKind::CellType ;
Icon ::= i_masterShortCut::MasterShortCut value::String ;
VBProjectData ::= vpd_visioDocument::VisioDocument data::String ;
Char ::= font::CellType color::CellType style::CellType case::CellType pos::CellType fontScale::CellType size::CellType dblUnderline::CellType overline::CellType strikethru::CellType doubleStrikethrough::CellType rtlText::CellType runVertical::CellType letterspace::CellType colorTrans::CellType localizeFont::CellType langID::CellType ;
Tab ::= t_tabs::TabsCollection position::CellType alignment::CellType ;
DateTimeType ::= year::Integer month::Integer day::Integer hour::Integer minute::Integer second::Integer ;
EmailRoutingData ::= erd_visioDocument::VisioDocument data::String size::Integer ;
PageSheet ::= DocumentSheet ;
 PageSheet ::= ss_shapes::ShapesCollection lineStyle::Integer fillStyle::Integer textStyle::Integer (shapeElts::ShapeElt)+ ;
Page ::= p_pages::PagesCollection background::Boolean backPage::Integer viewScale::Double viewCenterX::Double ViewCenterY::Double reviewerID::Integer associatedPage::Integer (pageElts::PageElt)+ ;
MastersCollection ::= ms_visioDocument::VisioDocument (masters::Master)+ (masterShortCuts::MasterShortCut)+ ;
ColorEntry ::= ce_colors::ColorsTable rgb::String ;
Cp ::= iX::Integer te_text::Text ;
DocumentPropertiesCollection ::= dps_visioDocument::VisioDocument title::String subject::String creator::String manager::String company::String category::String keywords::String description::String hyperlinkBase_href::String alternateNames::String template::String buildNumberCreated::String buildNumberEdited::String customProps::CustomPropertiesCollection timeCreated::DateTimeType timeSaved::DateTimeType timeEdited::DateTimeType timePrinted::DateTimeType ;
Connect ::= c_connects::ConnectsCollection fromSheet::Integer toSheet::Integer fromCell::String toCell::String fromPart::Integer toPart::Integer ;
FontsTable ::= fs_visioDocument::VisioDocument (fontEntries::FontEntry)+ ;
MasterShortCut ::= m_masterShortCuts::MastersCollection iconSize::Integer patternFlags::Integer prompt::String shortcutURL::String shortcutHelp::String alignName::Integer (icons::Icon)+ ;
FaceName ::= fn_faceNames::FaceNamesTable name::String unicodeRanges::String charSet::String panos::String flags::Integer ;
CustomProperty ::= cp_customProps::CustomPropertiesCollection name::String dataType::String ;
StyleSheetsCollection ::= sss_visioDocument::VisioDocument (stylesSheets::StyleSheet)+ ;
FaceNamesTable ::= fns_visioDocument::VisioDocument (faceNameEntries::FaceName)+ ;
FontEntry ::= fe_fonts::FontsTable name::String charSet::String pitchAndFamily::String attributes::Integer weight::Integer unicode::Boolean ;
PagesCollection ::= ps_visioDocument::VisioDocument (pages::Page)+ ;
Master ::= m_masters::MastersCollection baseID::String matchByName::Boolean iconSize::Integer patternFlags::Integer prompt::String hidden::Boolean iconUpdate::Boolean alignName::Integer (masterElts::MasterElt)+ ;
CustomPropertiesCollection ::= cps_docProp::DocumentPropertiesCollection (cps_customProps::CustomProperty)+ ;
Shape ::= StyleSheet ;
 Shape ::= PageSheet ;
 Shape ::= ss_shapes::ShapesCollection lineStyle::Integer fillStyle::Integer textStyle::Integer (shapeElts::ShapeElt)+ ;
VisioDocument ::= start::Integer key::String metric::Boolean buildnum::Integer version::String docLangId::Integer docProps::DocumentPropertiesCollection docSettings::DocumentSettingsElt docColors::ColorsTable docPrintSetup::PrintSetup docFonts::FontsTable docFaceNames::FaceNamesTable docStyleSheets::StyleSheetsCollection docDocumentSheet::DocumentSheet docMasters::MastersCollection docPages::PagesCollection docWindows::WindowsInfo docEventList::EventList docHeaderFooter::HeaderFooter docVBProjectData::VBProjectData docEmailRoutingData::EmailRoutingData (docSolutionXML::SolutionXML)+ ;
Para ::= indFirst::CellType indLeft::CellType indRight::CellType spLine::CellType spBefore::CellType spAfter::CellType horzAlign::CellType bullet::CellType bulletStr::CellType bulletFont::CellType localizeBulletFont::CellType bulletFontSize::CellType textPosAfterBullet::CellType flags::CellType ;
Pp ::= iX::Integer te_text::Text ;
--------------------metamodels::MSVisio_DatadiagramMLXForm.bgf--------------------
Fld ::= iX::Integer te_text::Text ;
XForm ::= pinX::CellType pinY::CellType width::CellType height::CellType locPinX::CellType locPinY::CellType angle::CellType flipX::CellType flipY::CellType resizeMode::CellType ;
Char ::= font::CellType color::CellType style::CellType case::CellType pos::CellType fontScale::CellType size::CellType dblUnderline::CellType overline::CellType strikethru::CellType doubleStrikethrough::CellType rtlText::CellType runVertical::CellType letterspace::CellType colorTrans::CellType localizeFont::CellType langID::CellType ;
Tab ::= t_tabs::TabsCollection position::CellType alignment::CellType ;
EmailRoutingData ::= erd_visioDocument::VisioDocument data::String size::Integer ;
PageSheet ::= DocumentSheet ;
 PageSheet ::= ss_shapes::ShapesCollection lineStyle::Integer fillStyle::Integer textStyle::Integer (shapeElts::ShapeElt)+ ;
Page ::= p_pages::PagesCollection background::Boolean backPage::Integer viewScale::Double viewCenterX::Double ViewCenterY::Double reviewerID::Integer associatedPage::Integer (pageElts::PageElt)+ ;
ColorEntry ::= ce_colors::ColorsTable rgb::String ;
MastersCollection ::= ms_visioDocument::VisioDocument (masters::Master)+ (masterShortCuts::MasterShortCut)+ ;
FaceName ::= fn_faceNames::FaceNamesTable name::String unicodeRanges::String charSet::String panos::String flags::Integer ;
StyleSheetsCollection ::= sss_visioDocument::VisioDocument (stylesSheets::StyleSheet)+ ;
PagesCollection ::= ps_visioDocument::VisioDocument (pages::Page)+ ;
CustomPropertiesCollection ::= cps_docProp::DocumentPropertiesCollection (cps_customProps::CustomProperty)+ ;
VisioDocument ::= start::Integer key::String metric::Boolean buildnum::Integer version::String docLangId::Integer docProps::DocumentPropertiesCollection docSettings::DocumentSettingsElt docColors::ColorsTable docPrintSetup::PrintSetup docFonts::FontsTable docFaceNames::FaceNamesTable docStyleSheets::StyleSheetsCollection docDocumentSheet::DocumentSheet docMasters::MastersCollection docPages::PagesCollection docWindows::WindowsInfo docEventList::EventList docHeaderFooter::HeaderFooter docVBProjectData::VBProjectData docEmailRoutingData::EmailRoutingData (docSolutionXML::SolutionXML)+ ;
Pp ::= iX::Integer te_text::Text ;
ColorsTable ::= cs_visioDocument::VisioDocument (colorEntries::ColorEntry)+ ;
Tp ::= iX::Integer te_text::Text ;
Geom ::= noFill::CellType noLine::CellType noShow::CellType noSnap::CellType (linesTo::LineTo)+ (movesTo::MoveTo)+ (arcsTo::ArcTo)+ (splineKnots::SplineKnot)+ (polylinesTo::PolylineTo)+ (infiniteLines::InfiniteLine)+ (ellipses::Ellipse)+ (ellipticalArcsTo::EllipticalArcTo)+ (splineStarts::SplineStart)+ (nurbsTo::NURBSTo)+ ;
CellType ::= unit::String formula::String err::String value::String ;
Field ::= value::CellType editMode::CellType format::CellType type::CellType uiCat::CellType uiCode::CellType uiFmt::CellType calendar::CellType objectKind::CellType ;
Icon ::= i_masterShortCut::MasterShortCut value::String ;
VBProjectData ::= vpd_visioDocument::VisioDocument data::String ;
DateTimeType ::= year::Integer month::Integer day::Integer hour::Integer minute::Integer second::Integer ;
DocumentSettingsElt ::= dss_visioDocument::VisioDocument topPage::Page defaultTextStyle::StyleSheet defaultLineStyle::StyleSheet defaultFillStyle::StyleSheet defaultGuideStyle::StyleSheet glueSettings::Integer snapSettings::Integer snapExtensions::Integer ds_snapAngles::SnapAnglesCollection dynamicGridEnabled::Boolean protectStyles::Boolean protectShapes::Boolean protectMasters::Boolean protectBkgnds::Boolean customMenusFile::String customToolbarsFile::String attachedToolbars::String ;
Cp ::= iX::Integer te_text::Text ;
DocumentPropertiesCollection ::= dps_visioDocument::VisioDocument title::String subject::String creator::String manager::String company::String category::String keywords::String description::String hyperlinkBase_href::String alternateNames::String template::String buildNumberCreated::String buildNumberEdited::String customProps::CustomPropertiesCollection timeCreated::DateTimeType timeSaved::DateTimeType timeEdited::DateTimeType timePrinted::DateTimeType ;
Connect ::= c_connects::ConnectsCollection fromSheet::Integer toSheet::Integer fromCell::String toCell::String fromPart::Integer toPart::Integer ;
FontsTable ::= fs_visioDocument::VisioDocument (fontEntries::FontEntry)+ ;
SnapAngle ::= sa_snapAngles::SnapAnglesCollection angleValue::Double ;
MasterShortCut ::= m_masterShortCuts::MastersCollection iconSize::Integer patternFlags::Integer prompt::String shortcutURL::String shortcutHelp::String alignName::Integer (icons::Icon)+ ;
SnapAnglesCollection ::= sa_docSettings::DocumentSettingsElt (snapAngles::SnapAngle)+ ;
CustomProperty ::= cp_customProps::CustomPropertiesCollection name::String dataType::String ;
FaceNamesTable ::= fns_visioDocument::VisioDocument (faceNameEntries::FaceName)+ ;
FontEntry ::= fe_fonts::FontsTable name::String charSet::String pitchAndFamily::String attributes::Integer weight::Integer unicode::Boolean ;
Master ::= m_masters::MastersCollection baseID::String matchByName::Boolean iconSize::Integer patternFlags::Integer prompt::String hidden::Boolean iconUpdate::Boolean alignName::Integer (masterElts::MasterElt)+ ;
Shape ::= StyleSheet ;
 Shape ::= PageSheet ;
 Shape ::= ss_shapes::ShapesCollection lineStyle::Integer fillStyle::Integer textStyle::Integer (shapeElts::ShapeElt)+ ;
Para ::= indFirst::CellType indLeft::CellType indRight::CellType spLine::CellType spBefore::CellType spAfter::CellType horzAlign::CellType bullet::CellType bulletStr::CellType bulletFont::CellType localizeBulletFont::CellType bulletFontSize::CellType textPosAfterBullet::CellType flags::CellType ;
--------------------metamodels::Mantis.bgf--------------------
Issue ::= i_mantisRoot::MantisRoot project::ValueWithId category::String priority::ValueWithId severity::ValueWithId status::ValueWithId reporter::Person summary::String description::String version::String build::String platform::String os::String osVersion::String reproducibility::ValueWithId stepsToReproduce::String additionalInfo::String dateSubmitted::Integer assignedTo::Person projection::ValueWithId eta::ValueWithId resolution::ValueWithId fixedInVersion::String (attachments::Attachment)+ (relationships::Relationship)+ (notes::Note)+ lastUpdate::Integer ;
Attachment ::= filename::String size::Integer contentType::String downloadUrl::String ;
Note ::= author::Person text::String ;
--------------------metamodels::Matlab.bgf--------------------
StateFlow ::= stateFlow::String (machines::Machine)+ simulink::Simulink ;
BlockDefaults ::= Block ;
 BlockDefaults ::= blockDefaults::String model::Model ;
Chart ::= name::String id::String _id::String decomposotion::String updateMethode::String sampleTime::String (junctions::Junction)+ (events::Event)+ (transitions::Transition)+ (data::Data)+ (states::State)+ ;
Range ::= maximum::String minimum::String props::Props ;
Event ::= name::String id::String scope::String description::String trigger::String machine::Machine chart::Chart state::State ;
Array ::= firstIndex::String size::String props::Props ;
Simulink ::= simulink::String (stateFlows::StateFlow)+ (models::Model)+ ;
Instance ::= _id::String id::String name::String machine::Machine ;
Transition ::= _id::String dataLimites::String id::String trigger::String condition::String conditionAction::String action::String chart::Chart state::State ;
Junction ::= _id::String id::String type::String position::String state::State chart::Chart ;
Line ::= DirectLine ;
 Line ::= BranchedLine ;
 Line ::= points::String id::String srcPort::OutputPort system::System ;
State ::= name::String id::String _id::String type::String entryAction::String exitAction::String duringAction::String eventActions::String decomposition::String position::String (junctions::Junction)+ (events::Event)+ (transitions::Transition)+ (data::Data)+ chart::Chart (states::State)+ ;
Target ::= name::String id::String codeCommand::String description::String makeCommand::String codeFlags::String checksumOld::String machine::Machine ;
Props ::= initialValue::String (arrays::Array)+ (ranges::Range)+ data::Data ;
System ::= name::String (blocks::Block)+ (lines::Line)+ (annotations::Annotation)+ model::Model parentSubsystem::Subsystem ;
Annotation ::= position::String text::String system::System ;
Block ::= Subsystem ;
 Block ::= Primitive ;
 Block ::= Reference ;
 Block ::= name::String blockType::String description::String priority::String tag::String position::String mySystem::System (ports::Port)+ ;
DirectBranch ::= id::String destPort::InputPort ;
Masked ::= system::System ;
Reference ::= sourceType::String sourceBlock::String (parameters::Parameter)+ ;
InputPort ::= owningDirectLine::DirectLine owningDirectBranch::DirectBranch ;
Data ::= name::String id::String scope::String description::String units::String dataType::String (props::Props)+ state::State chart::Chart machine::Machine ;
Parameter ::= Type ;
 Parameter ::= Double ;
 Parameter ::= INteger ;
 Parameter ::= Enumeration ;
 Parameter ::= BOolean ;
 Parameter ::= Text ;
 Parameter ::= Vector ;
 Parameter ::= name::String le_reference::Reference primitive::Primitive ;
Model ::= name::String matlab::Matlab (annotationDefaults::AnnotationDefaults)+ (system::System)+ (blockDefaults::BlockDefaults)+ (lineDefaults::LineDefaults)+ simulink::Simulink ;
Machine ::= name::String id::String (events::Event)+ (data::Data)+ (instances::Instance)+ (targets::Target)+ stateFlow::StateFlow ;
Normal ::= system::System ;
Primitive ::= id::String (parameters::Parameter)+ refPort::Port ;
LineDefaults ::= Line ;
 LineDefaults ::= lineDefaults::String model::Model ;
Branch ::= DirectBranch ;
 Branch ::= NestedBranch ;
 Branch ::= points::String branchedLine::BranchedLine nestedBranch::NestedBranch ;
Port ::= InputPort ;
 Port ::= OutputPort ;
 Port ::= id::String number::String portBlock::Block primitive::Primitive ;
AnnotationDefaults ::= Annotation ;
 AnnotationDefaults ::= annotationDefaults::String model::Model ;
--------------------metamodels::Maude.bgf--------------------
SModule ::= (els::ModElement)+ (params::Parameter)+ ;
Sort ::= (subsortRels::SubsortRel)+ (supersortRels::SubsortRel)+ kind::Kind ;
MaudeSpec ::= (els::MaudeTopEl)+ (printableEls::MaudeTopEl)+ ;
Rule ::= lhs::Term rhs::Term ;
RecTerm ::= op::String (args::Term)+ ;
SubsortRel ::= (subsorts::Sort)+ (supersorts::Sort)+ ;
LabelMapping ::= from::String to::String ;
STheory ::= (els::ModElement)+ ;
Membership ::= term::Term sort::Sort ;
RenModExp ::= modExp::ModExpression (renamings::RenMapping)+ ;
FModule ::= (els::ModElement)+ (params::Parameter)+ ;
SortMapping ::= from::Sort to::String ;
ModImportation ::= imports::ModExpression mode::ImportationMode ;
OpMapping ::= from::Operation to::String ;
Equation ::= lhs::Term rhs::Term ;
FTheory ::= (els::ModElement)+ ;
Parameter ::= label::String modExp::ModExpression ;
Operation ::= name::String coarity::Type (arity::Type)+ (atts::String)+ ;
OpTypedMapping ::= from::Operation to::String (atts::String)+ ;
View ::= from::ModExpression to::ModExpression (els::ViewMapping)+ ;
TermMapping ::= from::Term to::Term ;
InstModExp ::= modExp::ModExpression (views::View)+ ;
--------------------metamodels::MavenMaven.bgf--------------------
ClassPath ::= refid::String (pathElement::PathElement)+ (fileset::FileSet)+ ;
Xmlns ::= name::String value::String ;
Jar ::= jarfile::String basedir::String compress::String encoding::String manifest::String ;
FileList ::= dir::String files::String ;
AntTaskDef ::= name::String classname::String ;
Excludes ::= name::String ifCondition::String unless::String ;
Project ::= (xmlns::Xmlns)+ default::Goal path::Path (properties::AntProperty)+ (taskdefs::AntTaskDef)+ (prePostGoals::PrePostGoal)+ (goals::Goal)+ ;
Filter ::= token::String value::String ;
PathElement ::= path::String location::String ;
Javadoc ::= sourcepath::String destdir::String packagenames::String defaultexcludes::String author::String version::String use::String windowtitle::String ;
Copy ::= file::String presservelastmodified::String tofile::String todir::String overwrite::String filtering::String flatten::String includeEmptyDirs::String fileset::FileSet filterset::FilterSet mapper::Mapper ;
ExcludesFile ::= name::String ifCondition::String unless::String ;
Goal ::= name::String preGoal::PreGoal postGoal::PostGoal ;
Exec ::= executable::String dir::String ;
JellyForEach ::= items::String var::String indexVar::String contents::ContentsGoal ;
Delete ::= file::String dir::String verbose::String quiet::String failonerror::String includeEmptyDirs::String includes::String includesfile::String excludes::String excludesfile::String defaultexcludes::String ;
Includes ::= name::String ifCondition::String unless::String ;
FilterSet ::= starttoken::String endtoken::String (filter::Filter)+ (filtersfile::FiltersFile)+ ;
Attribut ::= name::String value::String ;
IncludesFile ::= name::String ifCondition::String unless::String ;
FormatTstamp ::= property::String pattern::String offset::String unit::String locale::String ;
FileSet ::= dir::String (patternset::PatternSet)+ (include::Includes)+ (exclude::Excludes)+ ;
Echo ::= message::String file::String append::String ;
NewTask ::= taskName::AntTaskDef (attributes::Attribut)+ ;
Path ::= id::String refid::String path::Path (pathElement::PathElement)+ (fileset::FileSet)+ ;
JellySet ::= var::String value::String ;
Java ::= classname::String jar::String fork::String classPath::ClassPath ;
Javac ::= srcdir::String destdir::String debug::String fork::String optimize::String deprecation::String (inExcludes::InExcludes)+ classPath::ClassPath ;
Mapper ::= type::String classname::String classpath::String classpathref::String from::String to::String ;
--------------------metamodels::MavenProject.bgf--------------------
Resource ::= targetPath::String filtering::String directory::String includes::String excludes::String ;
Build ::= defaultGoal::String sourceDirectory::String unitTestSourceDirectory::String (uniTest::Resource)+ (resources::Resource)+ ;
Contributor ::= name::String email::String url::String organization::String organizationUrl::String roles::String timezone::String properties::String ;
MailingList ::= name::String subscribe::String unsubscribe::String post::String archive::String otherArchives::String ;
Project ::= id::String groupId::String artifactId::String name::String description::String (mailingLists::MailingList)+ (developersAndContributors::Person)+ build::Build (dependencies::Project)+ ;
--------------------metamodels::Measure.bgf--------------------
Category ::= name::String desc::String (metrics::Metric)+ root::RootMeasureSet ;
RootMeasureSet ::= modelType::ModelKind (categories::Category)+ (measureSets::MeasureSet)+ ;
MeasureSet ::= elementName::String elementType::ElementKind (measures::Measure)+ root::RootMeasureSet (subsets::MeasureSet)+ parent::MeasureSet ;
Metric ::= name::String desc::String preferredValue::String category::Category ;
--------------------metamodels::Metrics.bgf--------------------
Metric ::= name::String (values::MetricValue)+ ;
--------------------metamodels::MoMM.bgf--------------------
Generalization ::= target::ModelElement source::ModelElement ;
ModelElement ::= Attribute ;
 ModelElement ::= Relationship ;
 ModelElement ::= level::Integer name::String potency::String hasClass::ModelElement (classElement::ModelElement)+ elementTarget::Relationship elementSource::Relationship (attributes::Attribute)+ attType::Attribute ;
Association ::= maxSource::String maxTarget::String minSource::String minTarget::String ;
--------------------metamodels::MiningMart_SimplifiedMetamodel.bgf--------------------
ColumnSet ::= name::String (attributes::Attribute)+ ;
Attribute ::= Column ;
 Attribute ::= FeatureAttribute ;
 Attribute ::= Value ;
 Attribute ::= RoleRestriction ;
 Attribute ::= class::Class has::DataType ;
Concept ::= name::String (attributes::Attribute)+ ;
Class ::= Concept ;
 Class ::= ColumnSet ;
 Class ::= name::String (attributes::Attribute)+ ;
RoleRestriction ::= class::Class has::DataType ;
FeatureAttribute ::= class::Class has::DataType ;
Column ::= class::Class has::DataType ;
Value ::= class::Class has::DataType ;
--------------------metamodels::MiningMart_ViewCaseRepresentation.bgf--------------------
MSL-Tool ::= source::DataObject target::DataObject ;
Attribute ::= class::Class has::DataType ;
Step ::= LoopStep ;
 Step ::= MultiStep ;
 Step ::= name::String description::String belongsToCase::Case embedsOperator::Operator (predecessors::Step)+ (successors::Step)+ ;
DataObject ::= source::ExecutionElement target::ExecutionElement ;
Parameter ::= name::String place::String parameterType::ParameterType belongsToOperator::Operator ;
Class ::= name::String (attributes::Attribute)+ ;
Function ::= nameOf::String signature::String ;
FeatureSelection ::= loopable::Boolean numberOfInputParameters::Integer numberOfOutputParameters::Integer manual::Boolean tool::String (input::Parameter)+ (output::Parameter)+ realizes::ExecutionElement ;
ExecutionElement ::= MSL-Tool ;
 ExecutionElement ::= TransformationGroup ;
 ExecutionElement ::= Transformation ;
 ExecutionElement ::= source::DataObject target::DataObject ;
DataMinStep ::= loopable::Boolean numberOfInputParameters::Integer numberOfOutputParameters::Integer manual::Boolean tool::String (input::Parameter)+ (output::Parameter)+ realizes::ExecutionElement ;
TimeOperator ::= loopable::Boolean numberOfInputParameters::Integer numberOfOutputParameters::Integer manual::Boolean tool::String (input::Parameter)+ (output::Parameter)+ realizes::ExecutionElement ;
StoredProcedure ::= nameOf::String signature::String ;
LoopStep ::= name::String description::String belongsToCase::Case embedsOperator::Operator (predecessors::Step)+ (successors::Step)+ ;
Case ::= name::String caseMode::Boolean caseInput::Parameter documentation::String (listOfStep::Step)+ ;
--------------------metamodels::MoDAF-AV.bgf--------------------
ProjectThreadType ::= taxonomy::Taxonomy ;
NodeConnectionType ::= taxonomy::Taxonomy ;
OperationalMission ::= name::String content::String ;
SystemConnectionSpecification ::= taxonomy::Taxonomy ;
Architecture ::= enterprise::Enterprise describedBy::ArchitecturalDescription ;
Taxonomy ::= date::String url::String version::String (contents::ClassifiedElement)+ ;
Effect ::= taxonomy::Taxonomy ;
LocationType ::= taxonomy::Taxonomy ;
EnduringTask ::= taxonomy::Taxonomy ;
MetaData ::= ArchitectureMetaData ;
 MetaData ::= dublinCoreElement::String modMetaDataElement::String name::String body::String ;
ArchitecturalReference ::= referred::ArchitecturalDescription referrer::ArchitecturalDescription ;
CapabilityRequirement ::= taxonomy::Taxonomy ;
Competence ::= taxonomy::Taxonomy ;
Unit ::= taxonomy::Taxonomy ;
Node ::= taxonomy::Taxonomy ;
OperationalActivity ::= taxonomy::Taxonomy ;
ArchitecturalDescription ::= approvialAuthority::String architect::String assumptionAndConstraints::String creatingOrganisation::String dateCompleted::String purpose::String recommendations::String summaryOfFindings::String tollsUsed::String (viewpoints::View)+ (products::ArchitecturalProduct)+ taxonomy::Taxonomy ;
Standard ::= identifier::String publishedWebsite::String publisher::String ratificationDate::TimeExpression version::String withdrawalDate::TimeExpression ;
PostType ::= taxonomy::Taxonomy ;
OrganisationProjectRelationship ::= taxonomy::Taxonomy ;
Elements ::= name::String content::String ;
MeasurableProperty ::= maxValue::LiteralSpecification minValue::LiteralSpecification ;
Service ::= taxonomy::Taxonomy ;
RoleInOrganisation ::= taxonomy::Taxonomy ;
OrganisationType ::= taxonomy::Taxonomy ;
ProjectType ::= taxonomy::Taxonomy ;
DataElement ::= taxonomy::Taxonomy ;
ArchitecturalProduct ::= description::String (architecturalElements::Elements)+ definingView::View (addresses::Concern)+ ;
InformationElement ::= taxonomy::Taxonomy ;
InformationExchange ::= identifier::String requirementText::String ;
System ::= taxonomy::Taxonomy ;
StakeholderHasConcern ::= client::Stakeholder supplier::Concern owner::MoDAFModel ;
Dimension ::= taxonomy::Taxonomy ;
Stakeholder ::= name::String content::String ;
View ::= framework::String frameworkWebsite::String viewCode::String viewDescription::String viewName::String definingFramework::ArchitecturalFramework (usedToCover::Concern)+ ;
MoDAFModel ::= enterprise::Enterprise environment::Environment (operationalMissions::OperationalMission)+ (architectures::Architecture)+ (architecturalDescription::ArchitecturalDescription)+ (architecturalReferences::ArchitecturalReference)+ (architecturalFrameworks::ArchitecturalFramework)+ (architectureMetadatas::ArchitectureMetaData)+ (metaDatas::MetaData)+ (stakeholders::Stakeholder)+ (stakeholderHasConcerns::StakeholderHasConcern)+ ;
Enterprise ::= inhabits::Environment (fulfills::OperationalMission)+ ;
--------------------metamodels::MiningMart_ViewDataRepresentation.bgf--------------------
Key ::= ForeignKey ;
 Key ::= PrimaryKey ;
 Key ::= isUsedForIndex::Boolean (hasColumn::Column)+ isAssociatedToColumnSet::ColumnSet ;
PrimaryKey ::= isUsedForIndex::Boolean (hasColumn::Column)+ isAssociatedToColumnSet::ColumnSet ;
Attribute ::= Column ;
 Attribute ::= FeatureAttribute ;
 Attribute ::= RoleRestriction ;
 Attribute ::= Value ;
 Attribute ::= class::Class has::DataType ;
ColumnStatistics ::= unique::Integer missing::Integer min::Integer max::Integer average::Integer standarDeviation::Integer distributionValue::String distributionCount::Integer distributionMin::Integer distributionMax::Integer forColumn::Column ;
RelationShip ::= name::String subRelationShipRestriction::String defined::String isA::RelationShip (correspondsToForeignKey::ForeignKey)+ correspondsToColumnSet::ColumnSet FromConcept::Concept ToConcept::Concept ;
Class ::= ColumnSet ;
 Class ::= UserInput ;
 Class ::= Concept ;
 Class ::= name::String (attributes::Attribute)+ ;
RoleRestriction ::= name::String restrictionForRelationShip::RelationShip restrictionForConcept::Concept restrictionToConcept::Concept min::Integer max::Integer belongsToConcept::Concept ;
Column ::= name::String dataType::DataType (keys::Key)+ belongsToColumnSet::ColumnSet corespondsToBaseAttribute::BaseAttribute ;
Value ::= name::String domainDataType::DomainDataType (belongsToUserInput::UserInput)+ ;
ColumnSetStatistics ::= allNumber::Integer ordinalNumber::Integer nominalNumber::Integer timeNumber::Integer forColumnSet::ColumnSet ;
Table ::= number::Integer file::String dbConnectString::String user::String (hasColumn::Column)+ (hasKey::Key)+ correspondsToConcept::Concept correspondsToRelationShip::RelationShip ;
ColumnSet ::= Snapshot ;
 ColumnSet ::= Table ;
 ColumnSet ::= View ;
 ColumnSet ::= number::Integer file::String dbConnectString::String user::String (hasColumn::Column)+ (hasKey::Key)+ correspondsToConcept::Concept correspondsToRelationShip::RelationShip ;
BaseAttribute ::= isPartMultiColumnFeature::MultiColumnFeature domainDataType::DomainDataType ;
ForeignKey ::= isConnectionTo::Table correspondsToRelationShip::RelationShip ;
Concept ::= subConceptRestriction::String isA::Concept FromConcept::RelationShip ToConcept::RelationShip correspondsToColumnSet::ColumnSet ;
FeatureAttribute ::= BaseAttribute ;
 FeatureAttribute ::= MultiColumnFeature ;
 FeatureAttribute ::= name::String relevanceForMining::Boolean attributeType::DataType belongsToConcept::Concept (correspondsToColumns::Column)+ ;
View ::= number::Integer file::String dbConnectString::String user::String (hasColumn::Column)+ (hasKey::Key)+ correspondsToConcept::Concept correspondsToRelationShip::RelationShip ;
Snapshot ::= number::Integer file::String dbConnectString::String user::String (hasColumn::Column)+ (hasKey::Key)+ correspondsToConcept::Concept correspondsToRelationShip::RelationShip ;
--------------------metamodels::PASSI.bgf--------------------
FIPA-platform Task ::= fipa_platform_Agent::Solution Domain/FIPA-Platform Agent task::Agency Domain/Task ;
AIP ::= Name::String performative::Agency Domain/Performative ;
Message ::= communication::Agency Domain/Communication Comm_Act::Agency Domain/Performative ;
Communication ::= Name::String Exchanged Knowledge::Problem Domain/Ontology message::Agency Domain/Message aip::Agency Domain/AIP ;
Role ::= agentR::Agency Domain/Agent (service::Solution Domain/Service)+ (task::Agency Domain/Task)+ (scenario::Problem Domain/Scenario)+ (communication::Agency Domain/Communication)+ ;
Task ::= Name::String fipa_platform_TaskT::Solution Domain/FIPA-platform Task ;
Agent ::= Name::String Knowledge::Problem Domain/Ontology fipa_platform_AgentA::Solution Domain/FIPA-Platform Agent role::Agency Domain/Role (resource::Problem Domain/Ressource)+ (non_functionnal_Requirement::Problem Domain/Non functionnal Requirement)+ (requirement::Problem Domain/Requirement)+ ;
FIPA-Platform Agent ::= (fipa_platform_Task::Solution Domain/FIPA-platform Task)+ agent::Agency Domain/Agent ;
--------------------metamodels::MonitorProgram.bgf--------------------
VariableDeclaration ::= Parameter ;
 VariableDeclaration ::= type::Type initialValue::Expression structure::Structure ;
ConditionalStat ::= condition::Expression (thenStats::Statement)+ (elseStats::Statement)+ ;
Type ::= name::String ;
Parameter ::= direction::Direction procedure::Procedure ;
WhileStat ::= condition::Expression (doStats::Statement)+ ;
AttributeCallExp ::= source::Expression name::String ;
Procedure ::= container::ProcContainerElement (parameters::Parameter)+ (statements::Statement)+ ;
AssignmentStat ::= target::VariableExp value::Expression ;
--------------------metamodels::MySQL.bgf--------------------
Table ::= (columns::Column)+ database::DataBase ;
Column ::= IntegerColumn ;
 Column ::= EnumColumn ;
 Column ::= type::String isPrimaryKey::Boolean null::Boolean defaultValue::String comment::String table::Table ;
--------------------metamodels::News.bgf--------------------
Date ::= eDay::DayKind day::Integer month::Integer year::Integer hours::Integer minutes::Integer seconds::Integer ;
Newspaper ::= language::String copyright::String pubDate::Date category::Category (news::News)+ ;
News ::= author::String comments::String pubDate::Date category::Category newspaper::Newspaper ;
--------------------metamodels::ODP-CV.bgf--------------------
Behaviour ::= specifier_bh::ComputationalTemplate owner_bh::ComputationalObject (bh_to_a::Action)+ ;
StreamInterface ::= owner_i::ComputationalObject i_to_bd::Binding specifier_i::ComputationalInterfaceTemplate (i_to_ina::Interaction)+ ;
Action ::= InternalAction ;
 Action ::= Interaction ;
 Action ::= (constrainer_ec::EnvironmentContract)+ (changedState::State)+ specifier_a::ActionTemplate a_to_bh::Behaviour ;
InternalAction ::= (constrainer_ec::EnvironmentContract)+ (changedState::State)+ specifier_a::ActionTemplate a_to_bh::Behaviour ;
OperationInterface ::= owner_i::ComputationalObject i_to_bd::Binding specifier_i::ComputationalInterfaceTemplate (i_to_ina::Interaction)+ ;
SignalInterface ::= owner_i::ComputationalObject i_to_bd::Binding specifier_i::ComputationalInterfaceTemplate (i_to_ina::Interaction)+ ;
InterrogationSignature ::= intsig_to_optisig::OperationInterfaceSignature (intsig_to_tersig::TerminationSignature)+ ;
State ::= startState::State endState::State (changer::Action)+ st_to_co::ComputationalObject ;
ComputationalObject ::= BindingObject ;
 ComputationalObject ::= (co_to_i::Interface)+ co_to_bh::Behaviour specifier_co::ComputationalObjectTemplate co_to_st::State ;
Invocation ::= inv_to_ter::Termination inv_to_opt::Operation ;
ActionTemplate ::= (at_to_a::Action)+ at_to_isig::InteractionSignature ;
Flow ::= ina_to_i::Interface ;
ComputationalObjectTemplate ::= (cot_to_co::ComputationalObject)+ (part_provide::ComputationalInterfaceTemplate)+ (part_request::ComputationalInterfaceTemplate)+ ;
Signal ::= ina_to_i::Interface ;
Announcement ::= opt_to_inv::Invocation ;
OperationInterfaceSignature ::= (optisig_to_ansig::AnnouncementSignature)+ (optisig_to_intsig::InterrogationSignature)+ ;
EnvironmentContract ::= (ec_to_a::Action)+ specifier_ec::ComputationalTemplate ;
Termination ::= owner_ter::Interrogation ter_to_inv::Invocation ;
BindingObject ::= (co_to_i::Interface)+ co_to_bh::Behaviour specifier_co::ComputationalObjectTemplate co_to_st::State ;
ComputationalInterfaceTemplate ::= (cit_to_i::Interface)+ (aggregate_provide::ComputationalObjectTemplate)+ (aggregate_request::ComputationalObjectTemplate)+ cit_to_intsig::InterfaceSignature ;
--------------------metamodels::ODP-EV.bgf--------------------
EO_A_R ::= (eoarSubject::EnterpriseObject)+ (eoarSubjectRole::Role)+ (eoarGovernor::AssigmentPolicy)+ ;
Obligation ::= (ruViolation::Violation)+ ;
Behaviour ::= Violation ;
 Behaviour ::= (beObjectives::Objective)+ (beSpecifiers::Contract)+ (beActions::Action)+ beIdentifier::Role bePolicyEnvelope::PolicyEnvelope beConstrainer::PolicyEnvelope (bePolicyConstrainer::Policy)+ (bePolicy::Policy)+ ;
Evaluation ::= (aaAccountableParty::Party)+ ;
Prescription ::= (aaAccountableParty::Party)+ ;
Declaration ::= (aaAccountableParty::Party)+ ;
Objective ::= objFulfiller::ODPSystem objSpecifier::Contract (objRefiners::Objective)+ objRefinement::Objective (objAchievers::Process)+ (objFulfillers::Behaviour)+ ;
Role ::= InterfaceRole ;
 Role ::= roleBehaviour::Behaviour roleSpecifier::Community (rolefillers::EnterpriseObject)+ (roleConstrainer::Policy)+ (roleEOAR::EO_A_R)+ ;
Action ::= AccountableAction ;
 Action ::= (actBehaviours::Behaviour)+ (actArtefactRoleFillers::EnterpriseObject)+ (actResourceRoleFillers::EnterpriseObject)+ (actActorRoleFillers::EnterpriseObject)+ ;
Commitment ::= (aaAccountableParty::Party)+ ;
Policy ::= PolicyEnvelope ;
 Policy ::= PolicyValue ;
 Policy ::= AssigmentPolicy ;
 Policy ::= poSpecifier::Contract poOwner::Community (poProcess::Process)+ (poBehaviour::Behaviour)+ (poChanger::Behaviour)+ (poRole::Role)+ (poEnterpriseObject::EnterpriseObject)+ ;
Contract ::= ctPolicies::Policy ctObjective::Objective (ctBehaviours::Behaviour)+ ;
Permission ::= (ruViolation::Violation)+ ;
InterfaceRole ::= roleBehaviour::Behaviour roleSpecifier::Community (rolefillers::EnterpriseObject)+ (roleConstrainer::Policy)+ (roleEOAR::EO_A_R)+ ;
Process ::= (prObjectives::Objective)+ (prDetails::Step)+ prRefinement::Step (prConstrainer::Policy)+ ;
Step ::= Action ;
 Step ::= (stGraphs::Process)+ stAbstraction::Process ;
ODPSystem ::= odpBehaviour::Scope (odpObjectives::Objective)+ odpSpecifier::EnterpriseSpecification ;
Prohibition ::= (ruViolation::Violation)+ ;
Community ::= coAbstraction::CommunityObject (coMembers::EnterpriseObject)+ (coCommunityRoles::Role)+ (coPolicy::Policy)+ ;
Party ::= (ptyAccountableAction::AccountableAction)+ ptyEOPD::EO_P_D ;
PolicyEnvelope ::= pePolicySetter::Behaviour peBehaviour::Behaviour (peValues::PolicyValue)+ peCurrentValue::PolicyValue ;
EnterpriseSpecification ::= (esDescribedSystems::ODPSystem)+ esContext::FieldOfApplication ;
EO_P_D ::= eopdAgent::EnterpriseObject eopdPrincipal::Party eopdAction::Delegation ;
Authorisation ::= (ruViolation::Violation)+ ;
EnterpriseObject ::= ODPSystem ;
 EnterpriseObject ::= Party ;
 EnterpriseObject ::= CommunityObject ;
 EnterpriseObject ::= (eoConfigurations::Community)+ (eoRoles::Role)+ (eoArtefactActions::Action)+ (eoResourceActions::Action)+ (eoActorActions::Action)+ (eoPolicy::Policy)+ (eoEOAR::EO_A_R)+ eoEOPD::EO_P_D ;
--------------------metamodels::ODP-IV.bgf--------------------
StaticSchema ::= locationTime::Double (SS_IO::InformationObject)+ ;
InformationObject ::= (describer::StaticSchema)+ (IO_IOT::InformationObjectTemplate)+ (IO_IOTy::InformationObjectType)+ (IO_A::Action)+ IO_S::State ;
Action ::= (effect::StateChange)+ (A_AT::ActionTemplate)+ (participant::InformationObject)+ (A_ATy::ActionType)+ ;
InformationObjectType ::= (IOTy_IO::InformationObject)+ (IOTy_constrainer::InvariantSchema)+ ;
InformationObjectTemplate ::= (IOT_IO::InformationObject)+ (IOT_constrainer::InvariantSchema)+ ;
StateChange ::= startState::State endState::State (specifier::DynamicSchema)+ (cause::Action)+ (SC_constrainer::InvariantSchema)+ ;
State ::= change::StateChange causeSC::StateChange S_IO::InformationObject (S_constrainer::InvariantSchema)+ ;
InvariantSchema ::= (constrainer_AT::ActionTemplate)+ (constrainer_ATy::ActionType)+ (constrainer_SC::StateChange)+ (constrainer_S::State)+ (constrainer_IOT::InformationObjectTemplate)+ (constrainer_IOTy::InformationObjectType)+ ;
ActionTemplate ::= (AT_A::Action)+ (AT_constrainer::InvariantSchema)+ ;
ActionType ::= (ATy_A::Action)+ (ATy_constrainer::InvariantSchema)+ ;
--------------------metamodels::ODP-NV.bgf--------------------
Stub ::= stChannel::Channel stBinder::Binder stBeo::BEO ;
Capsule ::= (otherEngObjects::EngineeringObject)+ capsuleManager::CapsuleManager (clusterManagers::ClusterManager)+ (clusters::Cluster)+ ;
EngineeringInterfaceReferenceManagementDomain ::= (eirmdReference::EngineeringInterfaceReference)+ eirmdManagementPolicy::EngineeringInterfaceReferenceManagementPolicy ;
BEO ::= beoNodeManager::Nucleus (locallyBoundObjects::BEO)+ (localbinds::BEO)+ beoManager::ClusterManager (beoChannel::Channel)+ (beoStub::Stub)+ ;
Binder ::= bdChannel::Channel chBinder::Stub (bdProtocolObject::ProtocolObject)+ ;
Cluster ::= clusterManager::ClusterManager (clusterBeos::BEO)+ ;
ManagementDomain ::= parentDomain::Domain (subDomain::Domain)+ domControllingObject::ControllingObject (domMember::ControlledObject)+ ;
ProtocolObject ::= type::String poChannel::Channel poBinder::Binder (poInterceptor::Interceptor)+ (poBoundProtocolObject::ProtocolObject)+ ;
ClientServerChannel ::= chStub::Stub chBinder::Binder chPObject::ProtocolObject (chInterceptor::Interceptor)+ chEndPoint::BEO ;
Interceptor ::= intChannel::Channel intProtocolObject::ProtocolObject ;
SecurityDomain ::= parentDomain::Domain (subDomain::Domain)+ domControllingObject::ControllingObject (domMember::ControlledObject)+ ;
Domain ::= SecurityDomain ;
 Domain ::= ManagementDomain ;
 Domain ::= AddressingDomain ;
 Domain ::= NamingDomain ;
 Domain ::= parentDomain::Domain (subDomain::Domain)+ domControllingObject::ControllingObject (domMember::ControlledObject)+ ;
Channel ::= ClientServerChannel ;
 Channel ::= chStub::Stub chBinder::Binder chPObject::ProtocolObject (chInterceptor::Interceptor)+ chEndPoint::BEO ;
ClusterManager ::= (clusters::Cluster)+ (clustermanagerBeos::BEO)+ capsuleManager::CapsuleManager ;
Nucleus ::= (otherEngObjects::EngineeringObject)+ (beos::BEO)+ ;
AddressingDomain ::= parentDomain::Domain (subDomain::Domain)+ domControllingObject::ControllingObject (domMember::ControlledObject)+ ;
Node ::= location::String manager::Nucleus (capsules::Capsule)+ ;
--------------------metamodels::ODP-TV.bgf--------------------
TechnologyObject ::= (implStandard::ImplementableStandard)+ (toImplementation::Implementation)+ ;
Implementation ::= (implIXIT::IXIT)+ (implProduct::TechnologyObject)+ ;
--------------------metamodels::OWL.bgf--------------------
AllValuesFromRestriction ::= OWLAllValuesFromDataRange::OWLDataRange OWLAllValuesFromClass::OWLClass ;
List ::= first::RDFSResource rest::List (originalList::List)+ ;
RDFStatement ::= OWLStatement ;
 RDFStatement ::= reificationKind::ReificationKind (graph::RDFGraph)+ RDFpredicate::RDFProperty RDFobject::RDFSResource RDFsubject::RDFSResource (nameForReification::URIReference)+ (document::Document)+ ;
Namespace ::= (document::Document)+ namespaceURIRef::URIReference (namespaceDefinition::NamespaceDefinition)+ ;
Document ::= (localName::LocalName)+ (xmlBase::Namespace)+ (namespaceDefinition::NamespaceDefinition)+ (statement::RDFStatement)+ ;
TransitiveProperty ::= OWLInverseOf::OWLObjectProperty (inverseProperty::OWLObjectProperty)+ ;
Individual ::= (OWLDifferentFrom::Individual)+ (differentIndividual::Individual)+ (OWLSameAs::Individual)+ (sameIndividual::Individual)+ (allDifferent::OWLAllDifferent)+ (enumeratedClass::EnumeratedClass)+ (restrictionClass::HasValueRestriction)+ ;
RDFSClass ::= RDFSDataType ;
 RDFSClass ::= OWLClass ;
 RDFSClass ::= OWLDataRange ;
 RDFSClass ::= (subClassOf::RDFSClass)+ (superClass::RDFSClass)+ (typedResource::RDFSResource)+ (propertyForDomain::RDFProperty)+ (propertyForRange::RDFProperty)+ ;
OWLObjectProperty ::= InverseFunctionalProperty ;
 OWLObjectProperty ::= SymmetricProperty ;
 OWLObjectProperty ::= TransitiveProperty ;
 OWLObjectProperty ::= OWLInverseOf::OWLObjectProperty (inverseProperty::OWLObjectProperty)+ ;
XMLLiteral ::= datatypeURI::URIReference (cardinalityRestriction::CardinalityRestriction)+ (minCardinalityRestriction::MinCardinalityRestriction)+ (maxCardinalityRestriction::MaxCardinalityRestriction)+ ;
LocalName ::= name::String document::Document (uriRef::URIReference)+ ;
HasValueRestriction ::= OWLHasLiteralValue::RDFSLiteral OWLHasIndividualValue::Individual ;
OWLClass ::= IntersectionClass ;
 OWLClass ::= UnionClass ;
 OWLClass ::= ComplementClass ;
 OWLClass ::= EnumeratedClass ;
 OWLClass ::= OWLRestriction ;
 OWLClass ::= OWLAllDifferent ;
 OWLClass ::= isDeprecated::Boolean (OWLequivalentClass::OWLClass)+ (equivalentClass::OWLClass)+ (OWLdisjointWith::OWLClass)+ (disjointClass::OWLClass)+ (intersectionClass::IntersectionClass)+ (unionClass::UnionClass)+ (complementClass::ComplementClass)+ (allValuesFromRestrictionClass::AllValuesFromRestriction)+ (someValuesFromRestrictionClass::SomeValuesFromRestriction)+ ;
RDFSLiteral ::= PlainLiteral ;
 RDFSLiteral ::= TypedLiteral ;
 RDFSLiteral ::= lexicalForm::String (restrictionClass::HasValueRestriction)+ (dataRange::OWLDataRange)+ ;
OWLDataRange ::= datatype::RDFSDataType (OWLOneOf::RDFSLiteral)+ someValuesFromRestrictionClass::SomeValuesFromRestriction allValuesFromRestrictionClass::AllValuesFromRestriction ;
NamespaceDefinition ::= namespacePrefix::String document::Document namespace::Namespace ;
RDFSResource ::= Document ;
 RDFSResource ::= RDFGraph ;
 RDFSResource ::= List ;
 RDFSResource ::= Container ;
 RDFSResource ::= RDFProperty ;
 RDFSResource ::= RDFStatement ;
 RDFSResource ::= URIReferenceNode ;
 RDFSResource ::= BlankNode ;
 RDFSResource ::= RDFSClass ;
 RDFSResource ::= RDFSLiteral ;
 RDFSResource ::= OWLOntology ;
 RDFSResource ::= OWLUniverse ;
 RDFSResource ::= Individual ;
 RDFSResource ::= (uriRef::URIReference)+ (subjectStatement::RDFStatement)+ (objectStatement::RDFStatement)+ (label::PlainLiteral)+ (type::RDFSClass)+ (comment::PlainLiteral)+ (seeAlso::RDFSResource)+ (referringResource::RDFSResource)+ (isDefinedBy::RDFSResource)+ (definedResource::RDFSResource)+ (member::RDFSResource)+ (container::RDFSResource)+ (list::List)+ ;
OWLStatement ::= (ontology::OWLOntology)+ (owlGraph::OWLGraph)+ ;
InverseFunctionalProperty ::= OWLInverseOf::OWLObjectProperty (inverseProperty::OWLObjectProperty)+ ;
OWLAnnotationProperty ::= (predicateStatement::RDFStatement)+ (subPropertyOf::RDFProperty)+ (superProperty::RDFProperty)+ (domain::RDFSClass)+ (range::RDFSClass)+ (propertyRestriction::OWLRestriction)+ (ontology::OWLOntology)+ ;
PlainLiteral ::= language::String labeledResource::RDFSResource commentedResource::RDFSResource ;
URIReference ::= UniformResourceIdentifier ;
 URIReference ::= uri::UniformResourceIdentifier resource::RDFSResource (literal::TypedLiteral)+ namedGraph::RDFGraph (reifiedStatement::RDFStatement)+ fragmentIdentifier::LocalName namespace::Namespace ;
OWLDatatypeProperty ::= isDeprecated::Boolean (OWLEquivalentProperty::Property)+ (equivalentProperty::Property)+ ;
RDFGraph ::= OWLGraph ;
 RDFGraph ::= graphName::URIReference (statement::RDFStatement)+ ;
FunctionalProperty ::= isDeprecated::Boolean (OWLEquivalentProperty::Property)+ (equivalentProperty::Property)+ ;
OWLOntology ::= (owlUniverse::OWLUniverse)+ (OWLPriorVersion::OWLOntology)+ (newerOntology::OWLOntology)+ (OWLIncompatibleWith::OWLOntology)+ (incompatibleOntology::OWLOntology)+ (OWLImports::OWLOntology)+ (importingOntology::OWLOntology)+ (owlGraph::OWLGraph)+ (owlStatement::OWLStatement)+ (versionInfo::RDFSLiteral)+ ;
SymmetricProperty ::= OWLInverseOf::OWLObjectProperty (inverseProperty::OWLObjectProperty)+ ;
SomeValuesFromRestriction ::= OWLSomeValuesFromClass::OWLClass OWLSomeValuesFromDataRange::OWLDataRange ;
UniformResourceIdentifier ::= name::String (uriRef::URIReference)+ ;
OWLGraph ::= (ontology::OWLOntology)+ (owlStatement::OWLStatement)+ ;
RDFProperty ::= OWLAnnotationProperty ;
 RDFProperty ::= OWLOntologyProperty ;
 RDFProperty ::= Property ;
 RDFProperty ::= (predicateStatement::RDFStatement)+ (subPropertyOf::RDFProperty)+ (superProperty::RDFProperty)+ (domain::RDFSClass)+ (range::RDFSClass)+ (propertyRestriction::OWLRestriction)+ ;
OWLOntologyProperty ::= (predicateStatement::RDFStatement)+ (subPropertyOf::RDFProperty)+ (superProperty::RDFProperty)+ (domain::RDFSClass)+ (range::RDFSClass)+ (propertyRestriction::OWLRestriction)+ (ontology::OWLOntology)+ ;
TypedLiteral ::= XMLLiteral ;
 TypedLiteral ::= datatypeURI::URIReference (cardinalityRestriction::CardinalityRestriction)+ (minCardinalityRestriction::MinCardinalityRestriction)+ (maxCardinalityRestriction::MaxCardinalityRestriction)+ ;
URIReferenceNode ::= (uriRef::URIReference)+ (subjectStatement::RDFStatement)+ (objectStatement::RDFStatement)+ (label::PlainLiteral)+ (type::RDFSClass)+ (comment::PlainLiteral)+ (seeAlso::RDFSResource)+ (referringResource::RDFSResource)+ (isDefinedBy::RDFSResource)+ (definedResource::RDFSResource)+ (member::RDFSResource)+ (container::RDFSResource)+ (list::List)+ ;
--------------------metamodels::OpenConf.owl.bgf--------------------
PerformanceTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Sponzorship ::= is_paid_with::Item is_paid_by::Person is_paid_in::Building (is_paid_for::Thing)+ has_amount_of::Money ;
Proceedings_Publisher ::= (publisherOf::Thing)+ technicallyOrganises::Thing ;
Conference_proceedings ::= has_an_ISBN::String has_a_publisher::Publisher has_a_volume::String ;
Reviewing_results_event ::= follows::Administrative_event parallel_with::Administrative_event ;
Sponsor ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person hasConflictOfInterest::Document email::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasMail::String worksForCompany::String hasAffiliation::String hasFirstName::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String ;
Organisation ::= Organising_Agency ;
 Organisation ::= Academic_Institution ;
 Organisation ::= Proceedings_Publisher ;
 Organisation ::= (publisherOf::Thing)+ technicallyOrganises::Thing ;
Science_Worker ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person hasConflictOfInterest::Document email::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasMail::String worksForCompany::String hasAffiliation::String hasFirstName::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String ;
RadioCommunicationsTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
article ::= group_email ;
 article ::= notification_email ;
 article ::= abstract_of_paper ;
 article ::= review_form ;
 article ::= summary_of_reviews ;
 article ::= Review ;
 article ::= goes_through::Activity is_sent_to::human is_created_in::Activity structure_created_by::human has_author::human gives_classification::classification article_written_by::Author has_reviewer::Reviewer has_abstract::Abstract ;
MedicineTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
AccommodationPlace ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
TwoLevelConference ::= is_in_phase::phase_of_conference has_program::program hasMember::Person hasName::String endDate::dateTime paperDueOn::dateTime registrationDueOn::dateTime manuscriptDueOn::dateTime startDate::dateTime hasCountry::Country isOrganizedBy::OrganizingCommittee annualOrder::Integer takesPlace::Location hasAcronym::String hasConferenceMember::ConferenceMember paperAssignmentFinalizedBy::Administrator reviewCriteriaEnteredBy::Administrator paperAssignmentToolsRunBy::Administrator virtualMeetingEnabledBy::Administrator hardcopyMailingManifestsPrintedBy::Administrator detailsEnteredBy::Administrator reviewerBiddingStartedBy::Administrator date::date reviewsPerPaper::Integer logoURL::anyURI acceptsHardcopySubmissions::Boolean siteURL::anyURI ;
SignalProcessingTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Accepted_Paper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::Boolean Keywords::String hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
 Accepted_Paper ::= hasReview::Review ;
Agency_Staff_Member ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person hasConflictOfInterest::Document email::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasMail::String worksForCompany::String hasAffiliation::String hasFirstName::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String ;
SessionChair ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person hasConflictOfInterest::Document email::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasMail::String worksForCompany::String hasAffiliation::String hasFirstName::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String ;
pc_meeting ::= conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator starts_on::String ends_on::String has_startdate::dateTime has_enddate::dateTime (eventOnList::Thing)+ partOfEvent::Event hasEvent::Event (organisedBy::Thing)+ heldIn::Location ;
Working_event ::= Tutorial ;
 Working_event ::= hasTopic::Topic hasAdministrativeEvent::Administrative_event ;
notification ::= has_result::article is_performed_by::human ;
User ::= Committee ;
 User ::= Administrator ;
 User ::= recieve::Document (create::Thing)+ submit::Document ;
Short_paper ::= writtenBy::Author dealsWith::Topic remark::String abstract::String contactEmail::String hasKeyword::String hasTitle::String ;
Regular_Paper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::Boolean Keywords::String hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
ConferenceChair ::= memberOfConference::Conference ;
 ConferenceChair ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person hasConflictOfInterest::Document email::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasMail::String worksForCompany::String hasAffiliation::String hasFirstName::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String ;
Place ::= DiningPlace ;
 Place ::= ConferenceVenuePlace ;
 Place ::= MeetingRoomPlace ;
 Place ::= AccommodationPlace ;
 Place ::= Building ;
 Place ::= Session_room ;
 Place ::= Hotel_room ;
 Place ::= Conference_hall ;
 Place ::= Main_office ;
 Place ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
Camera_Ready_event ::= follows::Administrative_event parallel_with::Administrative_event ;
Tutorial_Abstract ::= (is_the_1th_part_of::Thing)+ part_of_article::article ;
Main_office ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
CallForManuscripts ::= forEvent::AcademicEvent (isInitiatedBy::Person)+ hasSubmissionInstructions::String hasSubmissionDeadline::dateTime ;
Workshop_Session ::= hasAssignedPaper::AcceptedPaper room::String isAssociatedTo::Slot hasChair::Chair ;
Paper_Author ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person hasConflictOfInterest::Document email::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasMail::String worksForCompany::String hasAffiliation::String hasFirstName::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String ;
group_email ::= goes_through::Activity is_sent_to::human is_created_in::Activity structure_created_by::human has_author::human gives_classification::classification article_written_by::Author has_reviewer::Reviewer has_abstract::Abstract ;
Full_Paper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::Boolean Keywords::String hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
OutsideReferee ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person hasConflictOfInterest::Document email::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasMail::String worksForCompany::String hasAffiliation::String hasFirstName::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String ;
Attendee ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person hasConflictOfInterest::Document email::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasMail::String worksForCompany::String hasAffiliation::String hasFirstName::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String ;
Registration ::= (has_result::Thing)+ sent_by::Person is_followed_by::Activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human is_held_before::Time is_held_in::Thing is_held_after::Time is_dated_on::dateTime hasTopic::Topic expectedAttendance::Integer isPartOf::Conference ;
 Registration ::= ε ;
OperatingTopicsystems ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
WorksopProposal ::= isSubmittedBy::Author hasAuthor::Author submissionDeadline::dateTime ;
Workshop_Paper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::Boolean Keywords::String hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Chair_PC ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person hasConflictOfInterest::Document email::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasMail::String worksForCompany::String hasAffiliation::String hasFirstName::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String ;
Meta-Reviewer ::= assignedByAdministrator::Administrator adjustBid::Bid readPaper::Paper hasBeenAssigned::Paper assignExternalReviewer::ExternalReviewer invites_co-reviewers::Reviewer invited_by::Reviewer (has_a_review_reference_or_expertise::Thing)+ hasReviewHistory::PersonalReviewHistory executes::DoubleBlindReview cooperates::ExternalReviewer IsAssignedTo::Paper hasConflictedPaper::Paper hasPreferredPaper::Paper hasPreferredTopic::ResearchTopic writeReview::Review has_made_review::Paper_Review UserName::String Comments_to_Chair::String Other_Areas::String ;
Contact_Author ::= has_sent::Submitted_Paper Alternate_Email::String ;
Call_for_participation ::= has_authors::Person has_a_date_of_issue::date ;
Short_Paper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::Boolean Keywords::String hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
SatelliteAndSpaceCommunicationsTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
WorkShop ::= (has_result::Thing)+ sent_by::Person is_followed_by::Activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human is_held_before::Time is_held_in::Thing is_held_after::Time is_dated_on::dateTime hasTopic::Topic expectedAttendance::Integer isPartOf::Conference ;
TPCMember ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person hasConflictOfInterest::Document email::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasMail::String worksForCompany::String hasAffiliation::String hasFirstName::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String ;
ConferenceEvent ::= NonAcademicEvent ;
 ConferenceEvent ::= AcademicEvent ;
 ConferenceEvent ::= hasAttendee::Person hasLocation::Place hasProgramme::Programme hasEndDateTime::dateTime hasStartDateTime::dateTime ;
Assistant ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person hasConflictOfInterest::Document email::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasMail::String worksForCompany::String hasAffiliation::String hasFirstName::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String ;
Conference_document ::= Conference_contribution ;
 Conference_document ::= Information_for_participants ;
 Conference_document ::= Call_for_paper ;
 Conference_document ::= Conference_announcement ;
 Conference_document ::= Call_for_participation ;
 Conference_document ::= Conference_www ;
 Conference_document ::= has_authors::Person has_a_date_of_issue::date ;
MobileComputingTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Registration_of_participants_event ::= follows::Administrative_event parallel_with::Administrative_event ;
Multi-author_Volume ::= Proceedings ;
 Multi-author_Volume ::= recieved_by::User used_by::Person submited__by::User (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document ;
Camera_Ready_Paper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::Boolean Keywords::String hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
CommunicationTheoryTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Regular_Session ::= hasAssignedPaper::AcceptedPaper room::String isAssociatedTo::Slot hasChair::Chair ;
Mailing_list ::= recieved_by::User used_by::Person submited__by::User (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document ;
CallForPapers ::= forEvent::AcademicEvent (isInitiatedBy::Person)+ hasSubmissionInstructions::String hasSubmissionDeadline::dateTime ;
CommunicationsTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
People ::= Author ;
 People ::= Member ;
 People ::= Surname::String Name::String Country::String E-mail::String Organisation::String ;
SecurityTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
PaperAbstract ::= isAbstractOf::Paper abstractIsSubmittedBy::ContactAuthor ;
University ::= scientificallyOrganises::Academic_Institution isProviderOf::Sponsorship ;
DiningPlace ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
Administrator ::= approve::Event assign::Role assigns::Thing finalizePaperAssignment::Conference runPaperAssignmentTools::Conference enableVirtualMeeting::Conference startReviewerBidding::Conference assignReviewer::Reviewer rejectPaper::Paper enterConferenceDetails::Conference printHardcopyMailingManifests::Conference setMaxPapers::ProgramCommitteeMember enterReviewCriteria::Conference acceptPaper::Paper addProgramCommitteeMember::ProgramCommitteeMember ;
Author ::= AuthorNotReviewer ;
 Author ::= Co-author ;
 Author ::= Corresponding_Author ;
 Author ::= Author_cd_proceedings_included ;
 Author ::= Lecturer ;
 Author ::= Plenary_lecture_speaker ;
 Author ::= Tutorial_speaker ;
 Author ::= Author_book_proceedings_included ;
 Author ::= ContactAuthor ;
 Author ::= Contact_Author ;
 Author ::= Presenter ;
 Author ::= submitPaper::Paper writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing submitsPaper::Paper writePaper::Paper writes_Paper::Paper ;
Paper_Review ::= is_Candidate_for_Award::Long_bool appropriate_length::Long_bool has_Categorization::Paper_Categorization has_Overall::Overall_Value has_Reccommendation::Reccommendation Review_made_by::Reviewer Comments_for_Author::String Comments_for_Program_Committee::String ;
Conference_Paper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::Boolean Keywords::String hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
ConferenceProgram ::= isProgramOf::Conference consistsOf::Slot ;
Chair ::= was_a_committee_chair_of::Committee assigns_reviewers_to_article::Reviewer creates_program::program produces::OutputDocument sets::Thing accepts::Paper rejects::Paper asksForPreference::Reviewer isChairOf::Session ;
Poster_Session ::= hasAssignedPaper::AcceptedPaper room::String isAssociatedTo::Slot hasChair::Chair ;
Negative_Review ::= writtenBy::Reviewer reviews::Reviewed_contribution gives_classification::classification is_created_in::Activity review_written_by::Reviewer reviewOfPaper::Paper reviewWrittenBy::Possible_Reviewer containsEvaluation::Evaluation rates::Paper isWritenBy::Reviewer ;
ComputerArchitectureTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
abstract_of_paper ::= goes_through::Activity is_sent_to::human is_created_in::Activity structure_created_by::human has_author::human gives_classification::classification article_written_by::Author has_reviewer::Reviewer has_abstract::Abstract ;
Money ::= Tax ;
 Money ::= Fee ;
 Money ::= Sponzorship ;
 Money ::= Tip ;
 Money ::= is_paid_with::Item is_paid_by::Person is_paid_in::Building (is_paid_for::Thing)+ has_amount_of::Money ;
AntennasTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
MicroelectronicsTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
conference_setup ::= sets_member::human is_made_by::human includes_topic::Topic sets_date::date sets_URL::URL ;
Template ::= recieved_by::User used_by::Person submited__by::User (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document ;
Member_PC ::= expertOn::Topic reviewes::Contribution ;
session ::= conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator starts_on::String ends_on::String has_startdate::dateTime has_enddate::dateTime (eventOnList::Thing)+ partOfEvent::Event hasEvent::Event (organisedBy::Thing)+ heldIn::Location ;
Chairman ::= ConferenceChair ;
 Chairman ::= AssociatedChair ;
 Chairman ::= ProgramCommitteeChair ;
 Chairman ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person hasConflictOfInterest::Document email::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasMail::String worksForCompany::String hasAffiliation::String hasFirstName::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String memberOfConference::Conference ;
Contact_Person ::= is_author_of::article performs_activity::Activity is_employed_in::institute has_topic_of_interest::Topic supervises::Activity e-mail::String last_name::String first_name::String ;
Web_Site ::= recieved_by::User used_by::Person submited__by::User (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document ;
TutorialProposal ::= isSubmittedBy::Author hasAuthor::Author submissionDeadline::dateTime ;
RejectedPaper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::Boolean Keywords::String hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
ParallelAndDistributedComputingTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Rejected_Paper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::Boolean Keywords::String hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
 Rejected_Paper ::= hasReview::Review ;
Event_Approval ::= (has_result::Thing)+ sent_by::Person is_followed_by::Activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human is_held_before::Time is_held_in::Thing is_held_after::Time is_dated_on::dateTime hasTopic::Topic expectedAttendance::Integer isPartOf::Conference ;
Invited_Paper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::Boolean Keywords::String hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Reviewing_event ::= follows::Administrative_event parallel_with::Administrative_event ;
MultimediaTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
program ::= program_created_by::Chair has_session::session ;
CryptographyTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Plenary_lecture_speaker ::= submitPaper::Paper writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing submitsPaper::Paper writePaper::Paper writes_Paper::Paper ;
Author_book_proceedings_included ::= submitPaper::Paper writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing submitsPaper::Paper writePaper::Paper writes_Paper::Paper ;
Call ::= CallForPapers ;
 Call ::= CallForReviews ;
 Call ::= CallForManuscripts ;
 Call ::= forEvent::AcademicEvent (isInitiatedBy::Person)+ hasSubmissionInstructions::String hasSubmissionDeadline::dateTime ;
Tutorial ::= hasTopic::Topic hasAdministrativeEvent::Administrative_event ;
Conference_volume ::= has_parts::Conference_part has_workshops::Workshop has_tracks::Track has_tutorials::Tutorial has_a_commtitee::Committee has_a_steering_committee::Steering_committee has_an_organizing_committee::Organizing_committee has_important_dates::Important_dates has_contributions::Conference_contribution has_a_location::String has_a_program_committee::Program_committee ;
Tip ::= is_paid_with::Item is_paid_by::Person is_paid_in::Building (is_paid_for::Thing)+ has_amount_of::Money ;
Event ::= Symposium ;
 Event ::= Social_event ;
 Event ::= Administrative_event ;
 Event ::= Working_event ;
 Event ::= pc_meeting ;
 Event ::= session ;
 Event ::= Social_Event ;
 Event ::= Scientific_Event ;
 Event ::= conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator starts_on::String ends_on::String has_startdate::dateTime has_enddate::dateTime (eventOnList::Thing)+ partOfEvent::Event hasEvent::Event (organisedBy::Thing)+ heldIn::Location ;
ProgramCommittee ::= hasProgramCommitteeMember::ProgramCommitteeMember hasMember::ProgramCommitteeMember ;
Review ::= Meta-Review ;
 Review ::= Positive_Review ;
 Review ::= Negative_Review ;
 Review ::= Neutral_Review ;
 Review ::= writtenBy::Reviewer reviews::Reviewed_contribution gives_classification::classification is_created_in::Activity review_written_by::Reviewer reviewOfPaper::Paper reviewWrittenBy::Possible_Reviewer containsEvaluation::Evaluation rates::Paper isWritenBy::Reviewer ;
Transparency ::= recieved_by::User used_by::Person submited__by::User (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document ;
Session ::= Conference_Session ;
 Session ::= Regular_Session ;
 Session ::= Poster_Session ;
 Session ::= Demo_Session ;
 Session ::= Workshop_Session ;
 Session ::= Speaker_lecture ;
 Session ::= hasAssignedPaper::AcceptedPaper room::String isAssociatedTo::Slot hasChair::Chair ;
Person ::= ConferenceMember ;
 Person ::= ExternalReviewer ;
 Person ::= User ;
 Person ::= Conference_participant ;
 Person ::= Conference_contributor ;
 Person ::= Committee_member ;
 Person ::= Conference_applicant ;
 Person ::= Track-workshop_chair ;
 Person ::= Scholar ;
 Person ::= Participant ;
 Person ::= Member_PC ;
 Person ::= Chair_PC ;
 Person ::= Science_Worker ;
 Person ::= Assistant ;
 Person ::= Volunteer ;
 Person ::= participant ;
 Person ::= ConferenceChair ;
 Person ::= Attendee ;
 Person ::= SessionChair ;
 Person ::= TPCMember ;
 Person ::= Paper_Author ;
 Person ::= Conference_Participant ;
 Person ::= Agency_Staff_Member ;
 Person ::= Possible_Reviewer ;
 Person ::= Student ;
 Person ::= Delegate ;
 Person ::= Sponsor ;
 Person ::= OutsideReferee ;
 Person ::= ConferenceAttendant ;
 Person ::= Chairman ;
 Person ::= Organizer ;
 Person ::= ProgramCommitteeMember ;
 Person ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person hasConflictOfInterest::Document email::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasMail::String worksForCompany::String hasAffiliation::String hasFirstName::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String ;
ProgramCommitteeMember ::= ProgramCommitteeChair ;
 ProgramCommitteeMember ::= Chair ;
 ProgramCommitteeMember ::= memberOfProgramCommittee::ProgramCommittee maxPapers::Integer addedBy::Administrator isMemberOf::ProgramCommittee hasPassword::String ;
Invited_Talk_Abstract ::= (is_the_1th_part_of::Thing)+ part_of_article::article ;
Poster ::= is_submitted_at::Conference_volume ;
 Poster ::= writtenBy::Author dealsWith::Topic remark::String abstract::String contactEmail::String hasKeyword::String hasTitle::String ;
Invitation_letter ::= recieved_by::User used_by::Person submited__by::User (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document ;
Paper ::= PaperFullVersion ;
 Paper ::= Invited_Paper ;
 Paper ::= Short_Paper ;
 Paper ::= Full_Paper ;
 Paper ::= Accepted_Paper ;
 Paper ::= Rejected_Paper ;
 Paper ::= Undecided_Paper ;
 Paper ::= ActivePaper ;
 Paper ::= PendingPaper ;
 Paper ::= WithdrawnPaper ;
 Paper ::= RejectedPaper ;
 Paper ::= PublishedPaper ;
 Paper ::= Camera_Ready_Paper ;
 Paper ::= Workshop_Paper ;
 Paper ::= Industrial_Paper ;
 Paper ::= Conference_Paper ;
 Paper ::= Submitted_Paper ;
 Paper ::= Poster_Paper ;
 Paper ::= Regular_Paper ;
 Paper ::= Demo_Paper ;
 Paper ::= AcceptedPaper ;
 Paper ::= Abstract ;
 Paper ::= PaperAbstract ;
 Paper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::Boolean Keywords::String hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Volunteer ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person hasConflictOfInterest::Document email::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasMail::String worksForCompany::String hasAffiliation::String hasFirstName::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String ;
Conference_announcement ::= has_authors::Person has_a_date_of_issue::date ;
Administrative_event ::= Reviewing_results_event ;
 Administrative_event ::= Reviewing_event ;
 Administrative_event ::= Registration_of_participants_event ;
 Administrative_event ::= Submission_event ;
 Administrative_event ::= Camera_Ready_event ;
 Administrative_event ::= follows::Administrative_event parallel_with::Administrative_event ;
WithdrawnPaper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::Boolean Keywords::String hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Program_Committee_Chair ::= is_author_of::article performs_activity::Activity is_employed_in::institute has_topic_of_interest::Topic supervises::Activity e-mail::String last_name::String first_name::String ;
Brief_introduction_for_Session_chair ::= recieved_by::User used_by::Person submited__by::User (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document ;
Conference_Program ::= Program_made_by::Program_chair planned_papers::Planed_Paper ;
paper_assignment ::= Manual_Paper_Assignment ;
 paper_assignment ::= Automatic_Paper_Assignment ;
 paper_assignment ::= assign_paper::Program_Committee_member is_performed_by::human ;
Positive_Review ::= writtenBy::Reviewer reviews::Reviewed_contribution gives_classification::classification is_created_in::Activity review_written_by::Reviewer reviewOfPaper::Paper reviewWrittenBy::Possible_Reviewer containsEvaluation::Evaluation rates::Paper isWritenBy::Reviewer ;
PublishedPaper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::Boolean Keywords::String hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Committee ::= Program_committee ;
 Committee ::= Organizing_committee ;
 Committee ::= Steering_committee ;
 Committee ::= has_members::Committee_member was_a_committee_of::Conference_volume has_a_committee_co-chair::Co-chair has_a_committee_chair::Chair ;
Conference_hall ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
Corresponding_Author ::= submitPaper::Paper writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing submitsPaper::Paper writePaper::Paper writes_Paper::Paper ;
PendingPaper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::Boolean Keywords::String hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Symposium ::= conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator starts_on::String ends_on::String has_startdate::dateTime has_enddate::dateTime (eventOnList::Thing)+ partOfEvent::Event hasEvent::Event (organisedBy::Thing)+ heldIn::Location ;
PowerlineTransmissionTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
TestOnlyTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Undecided_Paper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::Boolean Keywords::String hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
AuthorNotReviewer ::= submitPaper::Paper writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing submitsPaper::Paper writePaper::Paper writes_Paper::Paper ;
Industrial_Paper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::Boolean Keywords::String hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Abstract ::= Tutorial_Abstract ;
 Abstract ::= Invited_Talk_Abstract ;
 Abstract ::= (is_the_1th_part_of::Thing)+ part_of_article::article ;
Flyer ::= recieved_by::User used_by::Person submited__by::User (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document ;
ActivitySubmissionForm ::= TutorialProposal ;
 ActivitySubmissionForm ::= WorksopProposal ;
 ActivitySubmissionForm ::= isSubmittedBy::Author hasAuthor::Author submissionDeadline::dateTime ;
Tutorial_speaker ::= submitPaper::Paper writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing submitsPaper::Paper writePaper::Paper writes_Paper::Paper ;
PaperFullVersion ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::Boolean Keywords::String hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Organising_Agency ::= (publisherOf::Thing)+ technicallyOrganises::Thing ;
Conference ::= Conference_volume ;
 Conference ::= TwoLevelConference ;
 Conference ::= SingleLevelConference ;
 Conference ::= is_in_phase::phase_of_conference has_program::program hasMember::Person hasName::String endDate::dateTime paperDueOn::dateTime registrationDueOn::dateTime manuscriptDueOn::dateTime startDate::dateTime hasCountry::Country isOrganizedBy::OrganizingCommittee annualOrder::Integer takesPlace::Location hasAcronym::String hasConferenceMember::ConferenceMember paperAssignmentFinalizedBy::Administrator reviewCriteriaEnteredBy::Administrator paperAssignmentToolsRunBy::Administrator virtualMeetingEnabledBy::Administrator hardcopyMailingManifestsPrintedBy::Administrator detailsEnteredBy::Administrator reviewerBiddingStartedBy::Administrator date::date reviewsPerPaper::Integer logoURL::anyURI acceptsHardcopySubmissions::Boolean siteURL::anyURI ;
Document ::= Email ;
 Document ::= Template ;
 Document ::= article ;
 Document ::= SlideSet ;
 Document ::= Programme ;
 Document ::= MealMenu ;
 Document ::= Programme_Brochure ;
 Document ::= Flyer ;
 Document ::= Web_Site ;
 Document ::= Multi-author_Volume ;
 Document ::= Form ;
 Document ::= Mailing_list ;
 Document ::= Record_of_attendance ;
 Document ::= Brief_introduction_for_Session_chair ;
 Document ::= Invitation_letter ;
 Document ::= Viza ;
 Document ::= Transparency ;
 Document ::= Submission ;
 Document ::= Payment_document ;
 Document ::= Evaluation ;
 Document ::= PaperAbstract ;
 Document ::= recieved_by::User used_by::Person submited__by::User (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document ;
Viza ::= recieved_by::User used_by::Person submited__by::User (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document ;
Demo_Session ::= hasAssignedPaper::AcceptedPaper room::String isAssociatedTo::Slot hasChair::Chair ;
SingleLevelConference ::= is_in_phase::phase_of_conference has_program::program hasMember::Person hasName::String endDate::dateTime paperDueOn::dateTime registrationDueOn::dateTime manuscriptDueOn::dateTime startDate::dateTime hasCountry::Country isOrganizedBy::OrganizingCommittee annualOrder::Integer takesPlace::Location hasAcronym::String hasConferenceMember::ConferenceMember paperAssignmentFinalizedBy::Administrator reviewCriteriaEnteredBy::Administrator paperAssignmentToolsRunBy::Administrator virtualMeetingEnabledBy::Administrator hardcopyMailingManifestsPrintedBy::Administrator detailsEnteredBy::Administrator reviewerBiddingStartedBy::Administrator date::date reviewsPerPaper::Integer logoURL::anyURI acceptsHardcopySubmissions::Boolean siteURL::anyURI ;
Sponsorship ::= TravelGrant ;
 Sponsorship ::= providedBy::Organization hasCostCurrency::String hasCostAmount::Integer ;
ConferenceVenuePlace ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
WirelessCommunicationsTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Item ::= Transport_vehicle ;
 Item ::= Card ;
 Item ::= Audiovisual_equipment ;
 Item ::= Publication ;
 Item ::= Document ;
 Item ::= go_through::Activity (is_used_for::Thing)+ is_signed_by::Person is_made_from::Item is_sent_after::Time is_needed_for::Person is_sent_before::Time is_prepared_by::Person is_used_by::Person is_given_to::Person is_sent_by::Person is_writen_by::Person ;
ConferenceAttendant ::= mustPay::Fee hasAdress::String paid::Boolean hasPhone::String ;
Demo_Paper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::Boolean Keywords::String hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
CallForReviews ::= forEvent::AcademicEvent (isInitiatedBy::Person)+ hasSubmissionInstructions::String hasSubmissionDeadline::dateTime ;
Contribution ::= Poster ;
 Contribution ::= Short_paper ;
 Contribution ::= writtenBy::Author dealsWith::Topic remark::String abstract::String contactEmail::String hasKeyword::String hasTitle::String ;
Activity ::= Event_Creation ;
 Activity ::= Request ;
 Activity ::= Event_Approval ;
 Activity ::= Registration ;
 Activity ::= paper_assignment ;
 Activity ::= bidding_of_reviewer ;
 Activity ::= managing_of_conference_process ;
 Activity ::= reviewing_proces ;
 Activity ::= notification ;
 Activity ::= submission_process ;
 Activity ::= Activity_before_conference ;
 Activity ::= Conference_activity ;
 Activity ::= Activity_after_conference ;
 Activity ::= WorkShop ;
 Activity ::= Lecture ;
 Activity ::= (has_result::Thing)+ sent_by::Person is_followed_by::Activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human is_held_before::Time is_held_in::Thing is_held_after::Time is_dated_on::dateTime hasTopic::Topic expectedAttendance::Integer isPartOf::Conference ;
human ::= Program_Committee_member ;
 human ::= Contact_Person ;
 human ::= Program_Committee_Chair ;
 human ::= is_author_of::article performs_activity::Activity is_employed_in::institute has_topic_of_interest::Topic supervises::Activity e-mail::String last_name::String first_name::String ;
Track ::= has_a_track-workshop-tutorial_topic::Topic is_part_of_conference_volumes::Conference_volume has_a_track-workshop-tutorial_chair::Track-workshop_chair ;
CADTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Information_for_participants ::= has_authors::Person has_a_date_of_issue::date ;
Programme_Brochure ::= recieved_by::User used_by::Person submited__by::User (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document ;
Reviewer ::= Meta-Reviewer ;
 Reviewer ::= assignedByAdministrator::Administrator adjustBid::Bid readPaper::Paper hasBeenAssigned::Paper assignExternalReviewer::ExternalReviewer invites_co-reviewers::Reviewer invited_by::Reviewer (has_a_review_reference_or_expertise::Thing)+ hasReviewHistory::PersonalReviewHistory executes::DoubleBlindReview cooperates::ExternalReviewer IsAssignedTo::Paper hasConflictedPaper::Paper hasPreferredPaper::Paper hasPreferredTopic::ResearchTopic writeReview::Review has_made_review::Paper_Review UserName::String Comments_to_Chair::String Other_Areas::String ;
Event_Creation ::= (has_result::Thing)+ sent_by::Person is_followed_by::Activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human is_held_before::Time is_held_in::Thing is_held_after::Time is_dated_on::dateTime hasTopic::Topic expectedAttendance::Integer isPartOf::Conference ;
Meta-Review ::= writtenBy::Reviewer reviews::Reviewed_contribution gives_classification::classification is_created_in::Activity review_written_by::Reviewer reviewOfPaper::Paper reviewWrittenBy::Possible_Reviewer containsEvaluation::Evaluation rates::Paper isWritenBy::Reviewer ;
Slot ::= date::date endsAt::time beginsAt::time forms::ConferenceProgram hosts::Session ;
Speaker_lecture ::= hasAssignedPaper::AcceptedPaper room::String isAssociatedTo::Slot hasChair::Chair ;
Student ::= earlyRegistration::Boolean ;
 Student ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person hasConflictOfInterest::Document email::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasMail::String worksForCompany::String hasAffiliation::String hasFirstName::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String ;
Poster_Paper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::Boolean Keywords::String hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
managing_of_conference_process ::= (has_result::Thing)+ sent_by::Person is_followed_by::Activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human is_held_before::Time is_held_in::Thing is_held_after::Time is_dated_on::dateTime hasTopic::Topic expectedAttendance::Integer isPartOf::Conference ;
Conference_part ::= Track ;
 Conference_part ::= has_a_track-workshop-tutorial_topic::Topic is_part_of_conference_volumes::Conference_volume has_a_track-workshop-tutorial_chair::Track-workshop_chair ;
Call_for_paper ::= has_authors::Person has_a_date_of_issue::date ;
MeetingRoomPlace ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
SlideSet ::= recieved_by::User used_by::Person submited__by::User (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document ;
Neutral_Review ::= writtenBy::Reviewer reviews::Reviewed_contribution gives_classification::classification is_created_in::Activity review_written_by::Reviewer reviewOfPaper::Paper reviewWrittenBy::Possible_Reviewer containsEvaluation::Evaluation rates::Paper isWritenBy::Reviewer ;
ExternalReviewer ::= assignedByReviewer::Reviewer cooperatesReviewer::Reviewer ;
Topic ::= ParallelAndDistributedComputingTopic ;
 Topic ::= WirelessCommunicationsTopic ;
 Topic ::= OperatingTopicsystems ;
 Topic ::= ComputerNetworksTopic ;
 Topic ::= SatelliteAndSpaceCommunicationsTopic ;
 Topic ::= CADTopic ;
 Topic ::= MultimediaTopic ;
 Topic ::= CommunicationsTopic ;
 Topic ::= PowerlineTransmissionTopic ;
 Topic ::= AntennasTopic ;
 Topic ::= PerformanceTopic ;
 Topic ::= SignalProcessingTopic ;
 Topic ::= MicroelectronicsTopic ;
 Topic ::= TestOnlyTopic ;
 Topic ::= RadioCommunicationsTopic ;
 Topic ::= ComputerArchitectureTopic ;
 Topic ::= MedicineTopic ;
 Topic ::= SecurityTopic ;
 Topic ::= MobileComputingTopic ;
 Topic ::= CryptographyTopic ;
 Topic ::= CommunicationTheoryTopic ;
 Topic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
ContactInformation ::= hasCity::String hasStreet::String hasPostalCode::String hasPhone::String ;
Review_expertise ::= has_a_submitted_contribution::Submitted_contribution has_an_expertise::EEnum ;
Important_dates ::= is_an_abstract_submission_date::date is_a_full_paper_submission_date::date is_an_ending_date::date is_a_date_of_acceptance_announcement::date is_a_date_of_camera_ready_paper_submission::date is_a_starting_date::date belong_to_a_conference_volume::Conference_volume ;
Submitted_Paper ::= Assigned_Paper ;
 Submitted_Paper ::= Reviewed_Paper ;
 Submitted_Paper ::= Advocated_Paper ;
 Submitted_Paper ::= is_stored_in::Paper_File has_been_sent_by::Contact_Author Paper_Id::Integer Comments_To_Chair::String ;
Submission_event ::= follows::Administrative_event parallel_with::Administrative_event ;
Author_cd_proceedings_included ::= submitPaper::Paper writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing submitsPaper::Paper writePaper::Paper writes_Paper::Paper ;
AcceptedPaper ::= relatedToEvent::PaperPresentation isAssignedToSession::Session ;
Session_room ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
Record_of_attendance ::= recieved_by::User used_by::Person submited__by::User (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document ;
TravelGrant ::= providedBy::Organization hasCostCurrency::String hasCostAmount::Integer ;
Review_preference ::= (has_a_topic_or_a_submission_contribution::Thing)+ has_a_degree::Integer ;
--------------------metamodels::OpenQVT.bgf--------------------
RTransService ::= visibility::String signature::String rule::Rule ;
Context ::= (variables::Variable)+ rule::Rule ;
OCLService ::= visibility::String signature::String rule::Rule ;
RTransAction ::= qARule::QARule ;
QARule ::= query::Query action::Action ;
Rule ::= RootRule ;
 Rule ::= RuleSetCall ;
 Rule ::= QARule ;
 Rule ::= context::Context subRule::Rule superRule::Rule (services::Service)+ ;
Variable ::= name::String type::String value::String visibility::String context::Context ;
JavaFilter ::= qARule::QARule ;
JavaAction ::= qARule::QARule ;
JavaQuery ::= qARule::QARule ;
Service ::= OCLService ;
 Service ::= RTransService ;
 Service ::= JavaService ;
 Service ::= visibility::String signature::String rule::Rule ;
JavaService ::= visibility::String signature::String rule::Rule ;
RTransQuery ::= qARule::QARule ;
OCLFilter ::= qARule::QARule ;
--------------------metamodels::PCS.owl.bgf--------------------
PerformanceTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Sponzorship ::= is_paid_with::Item is_paid_by::Person is_paid_in::Building (is_paid_for::Thing)+ has_amount_of::Money ;
Proceedings_Publisher ::= (publisherOf::Thing)+ technicallyOrganises::Thing ;
Conference_proceedings ::= has_an_ISBN::String has_a_publisher::Publisher has_a_volume::String ;
Reviewing_results_event ::= follows::Administrative_event parallel_with::Administrative_event ;
Sponsor ::= loggin_in::System submit::Document get::Email E-mail::String hasMail::String worksForCompany::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasAffiliation::String hasFirstName::String hasLastName::String hasEmail::String hasName::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String ;
Organisation ::= Organising_Agency ;
 Organisation ::= Academic_Institution ;
 Organisation ::= Proceedings_Publisher ;
 Organisation ::= (publisherOf::Thing)+ technicallyOrganises::Thing ;
External_Reviewer ::= loggin_in::System submit::Document get::Email E-mail::String hasMail::String worksForCompany::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasAffiliation::String hasFirstName::String hasLastName::String hasEmail::String hasName::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String ;
Science_Worker ::= loggin_in::System submit::Document get::Email E-mail::String hasMail::String worksForCompany::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasAffiliation::String hasFirstName::String hasLastName::String hasEmail::String hasName::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String ;
Program_Comitee_Chair ::= finishes::Conference headOf::Program_Comitee switches::PhaseOfConferencePreparation starts::Conference accepts::Paper assignsToReview::Paper assignsPaper::Reviewer rejects::Paper ;
RadioCommunicationsTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
ConferenceMember ::= Reviewer ;
 ConferenceMember ::= ConferenceChair ;
 ConferenceMember ::= AssociatedChair ;
 ConferenceMember ::= Author ;
 ConferenceMember ::= CommitteeMember ;
 ConferenceMember ::= Chairman ;
 ConferenceMember ::= ProgramCommitteeMember ;
 ConferenceMember ::= memberOfConference::Conference member_of_conference::Conference ;
article ::= group_email ;
 article ::= notification_email ;
 article ::= abstract_of_paper ;
 article ::= review_form ;
 article ::= summary_of_reviews ;
 article ::= article_written_by::Author has_reviewer::Reviewer has_abstract::Abstract goes_through::Activity is_sent_to::human is_created_in::Activity structure_created_by::human has_author::human gives_classification::classification ;
MedicineTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
AccommodationPlace ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
TwoLevelConference ::= is_in_phase::phase_of_conference has_program::program hasMember::Person hasName::String endDate::dateTime paperDueOn::dateTime registrationDueOn::dateTime manuscriptDueOn::dateTime startDate::dateTime hasCountry::Country isOrganizedBy::OrganizingCommittee annualOrder::Integer takesPlace::Location hasAcronym::String finishedBy::Program_Comitee_Chair focusesOn::Topic startedBy::Program_Comitee_Chair takesPlace::Location has_conference_member::ConferenceMember WebSite::anyURI Topic_of_conference::String Date::date hasConferenceMember::ConferenceMember paperAssignmentFinalizedBy::Administrator reviewCriteriaEnteredBy::Administrator paperAssignmentToolsRunBy::Administrator virtualMeetingEnabledBy::Administrator hardcopyMailingManifestsPrintedBy::Administrator detailsEnteredBy::Administrator reviewerBiddingStartedBy::Administrator date::date reviewsPerPaper::Integer logoURL::anyURI acceptsHardcopySubmissions::Boolean siteURL::anyURI ;
SignalProcessingTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Accepted_Paper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
 Accepted_Paper ::= hasReview::Review ;
Agency_Staff_Member ::= loggin_in::System submit::Document get::Email E-mail::String hasMail::String worksForCompany::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasAffiliation::String hasFirstName::String hasLastName::String hasEmail::String hasName::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String ;
SessionChair ::= loggin_in::System submit::Document get::Email E-mail::String hasMail::String worksForCompany::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasAffiliation::String hasFirstName::String hasLastName::String hasEmail::String hasName::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String ;
pc_meeting ::= starts_on::String ends_on::String has_startdate::dateTime has_enddate::dateTime (eventOnList::Thing)+ partOfEvent::Event hasEvent::Event (organisedBy::Thing)+ heldIn::Location conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator ;
Working_event ::= Tutorial ;
 Working_event ::= hasTopic::Topic hasAdministrativeEvent::Administrative_event ;
User ::= Committee ;
 User ::= Administrator ;
 User ::= recieve::Document (create::Thing)+ submit::Document ;
notification ::= has_result::article is_performed_by::human ;
Regular_Paper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
Short_paper ::= writtenBy::Author dealsWith::Topic remark::String abstract::String contactEmail::String hasKeyword::String hasTitle::String changedBy::Author hasContributionStatus::EEnum ;
ConferenceChair ::= memberOfConference::Conference member_of_conference::Conference ;
Place ::= DiningPlace ;
 Place ::= ConferenceVenuePlace ;
 Place ::= MeetingRoomPlace ;
 Place ::= AccommodationPlace ;
 Place ::= Building ;
 Place ::= Session_room ;
 Place ::= Hotel_room ;
 Place ::= Conference_hall ;
 Place ::= Main_office ;
 Place ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
Camera_Ready_event ::= follows::Administrative_event parallel_with::Administrative_event ;
Tutorial_Abstract ::= (is_the_1th_part_of::Thing)+ part_of_article::article ;
Main_office ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
CallForManuscripts ::= forEvent::AcademicEvent (isInitiatedBy::Person)+ hasSubmissionInstructions::String hasSubmissionDeadline::dateTime ;
Speaker ::= loggin_in::System submit::Document get::Email E-mail::String hasMail::String worksForCompany::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasAffiliation::String hasFirstName::String hasLastName::String hasEmail::String hasName::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String ;
Workshop_Session ::= hasAssignedPaper::AcceptedPaper room::String isAssociatedTo::Slot hasChair::Chair ;
Paper_Author ::= loggin_in::System submit::Document get::Email E-mail::String hasMail::String worksForCompany::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasAffiliation::String hasFirstName::String hasLastName::String hasEmail::String hasName::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String ;
group_email ::= article_written_by::Author has_reviewer::Reviewer has_abstract::Abstract goes_through::Activity is_sent_to::human is_created_in::Activity structure_created_by::human has_author::human gives_classification::classification ;
Full_Paper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
OutsideReferee ::= loggin_in::System submit::Document get::Email E-mail::String hasMail::String worksForCompany::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasAffiliation::String hasFirstName::String hasLastName::String hasEmail::String hasName::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String ;
Attendee ::= loggin_in::System submit::Document get::Email E-mail::String hasMail::String worksForCompany::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasAffiliation::String hasFirstName::String hasLastName::String hasEmail::String hasName::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String ;
Registration ::= hasTopic::Topic expectedAttendance::Integer isPartOf::Conference is_followed_by::Activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human is_held_before::Time is_held_in::Thing is_held_after::Time is_dated_on::dateTime has_result::article sent_by::Person ;
 Registration ::= ε ;
OperatingTopicsystems ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
WorksopProposal ::= isSubmittedBy::Author hasAuthor::Author submissionDeadline::dateTime ;
Workshop_Paper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
Chair_PC ::= loggin_in::System submit::Document get::Email E-mail::String hasMail::String worksForCompany::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasAffiliation::String hasFirstName::String hasLastName::String hasEmail::String hasName::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String ;
Meta-Reviewer ::= invites_co-reviewers::Reviewer invited_by::Reviewer (has_a_review_reference_or_expertise::Thing)+ writes_review::Review hasReviewHistory::PersonalReviewHistory executes::DoubleBlindReview cooperates::ExternalReviewer IsAssignedTo::Paper hasConflictedPaper::Paper hasPreferredPaper::Paper hasPreferredTopic::ResearchTopic writeReview::Review has_made_review::Paper_Review UserName::String Comments_to_Chair::String Other_Areas::String refuses::Pending_Proposed_Conflict reviews::Paper bidsFor::Paper confirmes::Pending_Proposed_Conflict assignedPaperBy::Program_Comitee_Chair assignedByAdministrator::Administrator adjustBid::Bid readPaper::Paper hasBeenAssigned::Paper assignExternalReviewer::ExternalReviewer ;
Contact_Author ::= has_sent::Submitted_Paper Alternate_Email::String ;
Call_for_participation ::= has_authors::Person has_a_date_of_issue::date ;
Short_Paper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
SatelliteAndSpaceCommunicationsTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
chair ::= was_a_committee_chair_of::Committee assigns_reviewers_to_article::Reviewer creates_program::program ;
MainAuthor ::= submitsPaper::Paper writePaper::Paper writes_Paper::Paper changes::Contribution write_paper::Paper submitPaper::Paper writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing ;
Pending_Proposed_Conflict ::= refusedBy::Reviewer confirmedBy::Reviewer ;
TPCMember ::= loggin_in::System submit::Document get::Email E-mail::String hasMail::String worksForCompany::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasAffiliation::String hasFirstName::String hasLastName::String hasEmail::String hasName::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String ;
ConferenceEvent ::= NonAcademicEvent ;
 ConferenceEvent ::= AcademicEvent ;
 ConferenceEvent ::= hasAttendee::Person hasLocation::Place hasProgramme::Programme hasEndDateTime::dateTime hasStartDateTime::dateTime ;
Assistant ::= loggin_in::System submit::Document get::Email E-mail::String hasMail::String worksForCompany::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasAffiliation::String hasFirstName::String hasLastName::String hasEmail::String hasName::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String ;
Conference_document ::= Conference_contribution ;
 Conference_document ::= Information_for_participants ;
 Conference_document ::= Call_for_paper ;
 Conference_document ::= Conference_announcement ;
 Conference_document ::= Call_for_participation ;
 Conference_document ::= Conference_www ;
 Conference_document ::= Review ;
 Conference_document ::= has_authors::Person has_a_date_of_issue::date ;
Registration_of_participants_event ::= follows::Administrative_event parallel_with::Administrative_event ;
MobileComputingTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Multi-author_Volume ::= Proceedings ;
 Multi-author_Volume ::= writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document (relatesTo::Thing)+ submited_by::Person Document_ID::String recieved_by::User used_by::Person submited__by::User ;
Invitation ::= sended_by::Administrator Receiver_of_email::String Message_of_email::String Subject_of_email::String ;
Camera_Ready_Paper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
CommunicationTheoryTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Regular_Session ::= hasAssignedPaper::AcceptedPaper room::String isAssociatedTo::Slot hasChair::Chair ;
Mailing_list ::= writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document (relatesTo::Thing)+ submited_by::Person Document_ID::String recieved_by::User used_by::Person submited__by::User ;
CallForPapers ::= forEvent::AcademicEvent (isInitiatedBy::Person)+ hasSubmissionInstructions::String hasSubmissionDeadline::dateTime ;
CommunicationsTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Secondary_Reviewer ::= isMemberOf::Conference reject_paper::Paper accept::Paper ;
People ::= Member ;
 People ::= Surname::String Name::String Country::String E-mail::String Organisation::String ;
SecurityTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
PaperAbstract ::= isAbstractOf::Paper abstractIsSubmittedBy::ContactAuthor ;
University ::= scientificallyOrganises::Academic_Institution isProviderOf::Sponsorship ;
DiningPlace ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
Administrator ::= approve::Event assign::Role assigns::Thing send::Email generate::Thing finalizePaperAssignment::Conference runPaperAssignmentTools::Conference enableVirtualMeeting::Conference startReviewerBidding::Conference assignReviewer::Reviewer rejectPaper::Paper enterConferenceDetails::Conference printHardcopyMailingManifests::Conference setMaxPapers::ProgramCommitteeMember enterReviewCriteria::Conference acceptPaper::Paper addProgramCommitteeMember::ProgramCommitteeMember ;
Rejected_paper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
Paper_Review ::= is_Candidate_for_Award::Long_bool appropriate_length::Long_bool has_Categorization::Paper_Categorization has_Overall::Overall_Value has_Reccommendation::Reccommendation Review_made_by::Reviewer Comments_for_Author::String Comments_for_Program_Committee::String ;
Author ::= AuthorNotReviewer ;
 Author ::= Corresponding_Author ;
 Author ::= Author_cd_proceedings_included ;
 Author ::= Lecturer ;
 Author ::= Plenary_lecture_speaker ;
 Author ::= Tutorial_speaker ;
 Author ::= Author_book_proceedings_included ;
 Author ::= ContactAuthor ;
 Author ::= Contact_Author ;
 Author ::= Co-Author ;
 Author ::= MainAuthor ;
 Author ::= Presenter ;
 Author ::= submitsPaper::Paper writePaper::Paper writes_Paper::Paper changes::Contribution write_paper::Paper submitPaper::Paper writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing ;
Conference_Paper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
ConferenceProgram ::= isProgramOf::Conference consistsOf::Slot ;
Rejection_Email ::= sended_by::Administrator Receiver_of_email::String Message_of_email::String Subject_of_email::String ;
Chair ::= produces::OutputDocument sets::Thing accepts::Paper rejects::Paper asksForPreference::Reviewer isChairOf::Session ;
Poster_Session ::= hasAssignedPaper::AcceptedPaper room::String isAssociatedTo::Slot hasChair::Chair ;
Negative_Review ::= gives_classification::classification is_created_in::Activity review_written_by::Reviewer reviewOfPaper::Paper reviewWrittenBy::Possible_Reviewer containsEvaluation::Evaluation rates::Paper isWritenBy::Reviewer assigned_review_by::Primary_Reviewer written_review_by::Reviewer writtenBy::Reviewer reviews::Reviewed_contribution ;
ComputerArchitectureTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
abstract_of_paper ::= article_written_by::Author has_reviewer::Reviewer has_abstract::Abstract goes_through::Activity is_sent_to::human is_created_in::Activity structure_created_by::human has_author::human gives_classification::classification ;
Money ::= Tax ;
 Money ::= Fee ;
 Money ::= Sponzorship ;
 Money ::= Tip ;
 Money ::= is_paid_with::Item is_paid_by::Person is_paid_in::Building (is_paid_for::Thing)+ has_amount_of::Money ;
AntennasTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
MicroelectronicsTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Group_Email ::= sended_by::Administrator Receiver_of_email::String Message_of_email::String Subject_of_email::String ;
conference_setup ::= sets_member::human is_made_by::human includes_topic::Topic sets_date::date sets_URL::URL ;
Template ::= writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document (relatesTo::Thing)+ submited_by::Person Document_ID::String recieved_by::User used_by::Person submited__by::User ;
Member_PC ::= expertOn::Topic reviewes::Contribution ;
session ::= starts_on::String ends_on::String has_startdate::dateTime has_enddate::dateTime (eventOnList::Thing)+ partOfEvent::Event hasEvent::Event (organisedBy::Thing)+ heldIn::Location conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator ;
Chairman ::= AssociatedChair ;
 Chairman ::= ProgramCommitteeChair ;
 Chairman ::= loggin_in::System submit::Document get::Email E-mail::String hasMail::String worksForCompany::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasAffiliation::String hasFirstName::String hasLastName::String hasEmail::String hasName::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String memberOfConference::Conference member_of_conference::Conference ;
Contact_Person ::= is_author_of::article performs_activity::Activity is_employed_in::institute has_topic_of_interest::Topic supervises::Activity e-mail::String last_name::String first_name::String ;
Web_Site ::= writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document (relatesTo::Thing)+ submited_by::Person Document_ID::String recieved_by::User used_by::Person submited__by::User ;
TutorialProposal ::= isSubmittedBy::Author hasAuthor::Author submissionDeadline::dateTime ;
RejectedPaper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
ParallelAndDistributedComputingTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Rejected_Paper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
 Rejected_Paper ::= hasReview::Review ;
Event_Approval ::= hasTopic::Topic expectedAttendance::Integer isPartOf::Conference is_followed_by::Activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human is_held_before::Time is_held_in::Thing is_held_after::Time is_dated_on::dateTime has_result::article sent_by::Person ;
Invited_Paper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
Reviewing_event ::= follows::Administrative_event parallel_with::Administrative_event ;
MultimediaTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
program ::= program_created_by::chair has_session::session ;
CryptographyTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Plenary_lecture_speaker ::= submitsPaper::Paper writePaper::Paper writes_Paper::Paper changes::Contribution write_paper::Paper submitPaper::Paper writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing ;
Author_book_proceedings_included ::= submitsPaper::Paper writePaper::Paper writes_Paper::Paper changes::Contribution write_paper::Paper submitPaper::Paper writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing ;
Call ::= CallForPapers ;
 Call ::= CallForReviews ;
 Call ::= CallForManuscripts ;
 Call ::= forEvent::AcademicEvent (isInitiatedBy::Person)+ hasSubmissionInstructions::String hasSubmissionDeadline::dateTime ;
Tutorial ::= hasTopic::Topic hasAdministrativeEvent::Administrative_event ;
Conference_volume ::= has_parts::Conference_part has_workshops::Workshop has_tracks::Track has_tutorials::Tutorial has_a_commtitee::Committee has_a_steering_committee::Steering_committee has_an_organizing_committee::Organizing_committee has_important_dates::Important_dates has_contributions::Conference_contribution has_a_location::String has_a_program_committee::Program_committee ;
Email ::= Notification_Email ;
 Email ::= Group_Email ;
 Email ::= Approval_Email ;
 Email ::= Rejection_Email ;
 Email ::= Information ;
 Email ::= Invitation ;
 Email ::= sended_by::Administrator Receiver_of_email::String Message_of_email::String Subject_of_email::String ;
Regular ::= submits_to_conference::Conference earlyRegistration::Boolean ;
Tip ::= is_paid_with::Item is_paid_by::Person is_paid_in::Building (is_paid_for::Thing)+ has_amount_of::Money ;
Event ::= Symposium ;
 Event ::= Social_event ;
 Event ::= Administrative_event ;
 Event ::= Working_event ;
 Event ::= pc_meeting ;
 Event ::= session ;
 Event ::= Social_Event ;
 Event ::= Scientific_Event ;
 Event ::= starts_on::String ends_on::String has_startdate::dateTime has_enddate::dateTime (eventOnList::Thing)+ partOfEvent::Event hasEvent::Event (organisedBy::Thing)+ heldIn::Location conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator ;
ProgramCommittee ::= hasProgramCommitteeMember::ProgramCommitteeMember hasMember::ProgramCommitteeMember ;
Transparency ::= writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document (relatesTo::Thing)+ submited_by::Person Document_ID::String recieved_by::User used_by::Person submited__by::User ;
Review ::= Meta-Review ;
 Review ::= Positive_Review ;
 Review ::= Negative_Review ;
 Review ::= Neutral_Review ;
 Review ::= gives_classification::classification is_created_in::Activity review_written_by::Reviewer reviewOfPaper::Paper reviewWrittenBy::Possible_Reviewer containsEvaluation::Evaluation rates::Paper isWritenBy::Reviewer assigned_review_by::Primary_Reviewer written_review_by::Reviewer writtenBy::Reviewer reviews::Reviewed_contribution ;
Session ::= Conference_Session ;
 Session ::= Regular_Session ;
 Session ::= Poster_Session ;
 Session ::= Demo_Session ;
 Session ::= Workshop_Session ;
 Session ::= Speaker_lecture ;
 Session ::= hasAssignedPaper::AcceptedPaper room::String isAssociatedTo::Slot hasChair::Chair ;
Person ::= ExternalReviewer ;
 Person ::= User ;
 Person ::= Conference_participant ;
 Person ::= Conference_contributor ;
 Person ::= Committee_member ;
 Person ::= Conference_applicant ;
 Person ::= Track-workshop_chair ;
 Person ::= Scholar ;
 Person ::= Participant ;
 Person ::= Member_PC ;
 Person ::= Chair_PC ;
 Person ::= Science_Worker ;
 Person ::= Assistant ;
 Person ::= Volunteer ;
 Person ::= Attendee ;
 Person ::= SessionChair ;
 Person ::= TPCMember ;
 Person ::= Paper_Author ;
 Person ::= Conference_Participant ;
 Person ::= Agency_Staff_Member ;
 Person ::= Possible_Reviewer ;
 Person ::= Student ;
 Person ::= Delegate ;
 Person ::= Sponsor ;
 Person ::= OutsideReferee ;
 Person ::= ConferenceAttendant ;
 Person ::= Program_Comitee_Chair ;
 Person ::= External_Reviewer ;
 Person ::= ConferenceMember ;
 Person ::= Chairman ;
 Person ::= chair ;
 Person ::= Organizer ;
 Person ::= ProgramCommitteeMember ;
 Person ::= Speaker ;
 Person ::= loggin_in::System submit::Document get::Email E-mail::String hasMail::String worksForCompany::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasAffiliation::String hasFirstName::String hasLastName::String hasEmail::String hasName::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String ;
ProgramCommitteeMember ::= Chair ;
 ProgramCommitteeMember ::= ProgramCommitteeChair ;
 ProgramCommitteeMember ::= memberOfProgramCommittee::ProgramCommittee maxPapers::Integer addedBy::Administrator isMemberOf::ProgramCommittee hasPassword::String ;
Invited_Talk_Abstract ::= (is_the_1th_part_of::Thing)+ part_of_article::article ;
Final_manuscript ::= writtenBy::Author dealsWith::Topic remark::String abstract::String contactEmail::String hasKeyword::String hasTitle::String ;
Poster ::= is_submitted_at::Conference_volume ;
 Poster ::= writtenBy::Author dealsWith::Topic remark::String abstract::String contactEmail::String hasKeyword::String hasTitle::String changedBy::Author hasContributionStatus::EEnum ;
 Poster ::= hasContributionFileStatus::EEnum ;
Submission ::= Final_manuscript ;
 Submission ::= Initial_manuscipt ;
 Submission ::= writtenBy::Author dealsWith::Topic remark::String abstract::String contactEmail::String hasKeyword::String hasTitle::String ;
Invitation_letter ::= writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document (relatesTo::Thing)+ submited_by::Person Document_ID::String recieved_by::User used_by::Person submited__by::User ;
Paper ::= PaperFullVersion ;
 Paper ::= Invited_Paper ;
 Paper ::= Short_Paper ;
 Paper ::= Full_Paper ;
 Paper ::= Accepted_Paper ;
 Paper ::= Rejected_Paper ;
 Paper ::= Undecided_Paper ;
 Paper ::= ActivePaper ;
 Paper ::= PendingPaper ;
 Paper ::= WithdrawnPaper ;
 Paper ::= RejectedPaper ;
 Paper ::= PublishedPaper ;
 Paper ::= Camera_Ready_Paper ;
 Paper ::= Workshop_Paper ;
 Paper ::= Industrial_Paper ;
 Paper ::= Conference_Paper ;
 Paper ::= Poster_Paper ;
 Paper ::= Regular_Paper ;
 Paper ::= Demo_Paper ;
 Paper ::= AcceptedPaper ;
 Paper ::= Submitted_Paper ;
 Paper ::= Accepted_paper ;
 Paper ::= Rejected_paper ;
 Paper ::= Abstract ;
 Paper ::= PaperAbstract ;
 Paper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
Volunteer ::= loggin_in::System submit::Document get::Email E-mail::String hasMail::String worksForCompany::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasAffiliation::String hasFirstName::String hasLastName::String hasEmail::String hasName::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String ;
Conference_announcement ::= has_authors::Person has_a_date_of_issue::date ;
Administrative_event ::= Reviewing_results_event ;
 Administrative_event ::= Reviewing_event ;
 Administrative_event ::= Registration_of_participants_event ;
 Administrative_event ::= Submission_event ;
 Administrative_event ::= Camera_Ready_event ;
 Administrative_event ::= follows::Administrative_event parallel_with::Administrative_event ;
WithdrawnPaper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
Program_Committee_Chair ::= is_author_of::article performs_activity::Activity is_employed_in::institute has_topic_of_interest::Topic supervises::Activity e-mail::String last_name::String first_name::String ;
Brief_introduction_for_Session_chair ::= writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document (relatesTo::Thing)+ submited_by::Person Document_ID::String recieved_by::User used_by::Person submited__by::User ;
Conference_Program ::= Program_made_by::Program_chair planned_papers::Planed_Paper ;
paper_assignment ::= Manual_Paper_Assignment ;
 paper_assignment ::= Automatic_Paper_Assignment ;
 paper_assignment ::= assign_paper::Program_Committee_member is_performed_by::human ;
Positive_Review ::= gives_classification::classification is_created_in::Activity review_written_by::Reviewer reviewOfPaper::Paper reviewWrittenBy::Possible_Reviewer containsEvaluation::Evaluation rates::Paper isWritenBy::Reviewer assigned_review_by::Primary_Reviewer written_review_by::Reviewer writtenBy::Reviewer reviews::Reviewed_contribution ;
PublishedPaper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
Committee ::= Organizing_committee ;
 Committee ::= Steering_committee ;
 Committee ::= Program_committee ;
 Committee ::= has_members::Committee_member was_a_committee_of::Conference_volume has_a_committee_co-chair::Co-chair has_a_committee_chair::Chair ;
Conference_hall ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
CommitteeMember ::= Secondary_Reviewer ;
 CommitteeMember ::= Primary_Reviewer ;
 CommitteeMember ::= isMemberOf::Conference reject_paper::Paper accept::Paper ;
Corresponding_Author ::= submitsPaper::Paper writePaper::Paper writes_Paper::Paper changes::Contribution write_paper::Paper submitPaper::Paper writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing ;
PendingPaper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
Symposium ::= starts_on::String ends_on::String has_startdate::dateTime has_enddate::dateTime (eventOnList::Thing)+ partOfEvent::Event hasEvent::Event (organisedBy::Thing)+ heldIn::Location conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator ;
PowerlineTransmissionTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
TestOnlyTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Undecided_Paper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
AuthorNotReviewer ::= submitsPaper::Paper writePaper::Paper writes_Paper::Paper changes::Contribution write_paper::Paper submitPaper::Paper writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing ;
Notification_Email ::= sended_by::Administrator Receiver_of_email::String Message_of_email::String Subject_of_email::String ;
Industrial_Paper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
Abstract ::= Tutorial_Abstract ;
 Abstract ::= Invited_Talk_Abstract ;
 Abstract ::= (is_the_1th_part_of::Thing)+ part_of_article::article ;
Flyer ::= writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document (relatesTo::Thing)+ submited_by::Person Document_ID::String recieved_by::User used_by::Person submited__by::User ;
ActivitySubmissionForm ::= TutorialProposal ;
 ActivitySubmissionForm ::= WorksopProposal ;
 ActivitySubmissionForm ::= isSubmittedBy::Author hasAuthor::Author submissionDeadline::dateTime ;
AssociatedChair ::= memberOfConference::Conference member_of_conference::Conference ;
Tutorial_speaker ::= submitsPaper::Paper writePaper::Paper writes_Paper::Paper changes::Contribution write_paper::Paper submitPaper::Paper writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing ;
Organising_Agency ::= (publisherOf::Thing)+ technicallyOrganises::Thing ;
PaperFullVersion ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
Conference ::= Conference_volume ;
 Conference ::= TwoLevelConference ;
 Conference ::= SingleLevelConference ;
 Conference ::= Programme ;
 Conference ::= is_in_phase::phase_of_conference has_program::program hasMember::Person hasName::String endDate::dateTime paperDueOn::dateTime registrationDueOn::dateTime manuscriptDueOn::dateTime startDate::dateTime hasCountry::Country isOrganizedBy::OrganizingCommittee annualOrder::Integer takesPlace::Location hasAcronym::String finishedBy::Program_Comitee_Chair focusesOn::Topic startedBy::Program_Comitee_Chair takesPlace::Location has_conference_member::ConferenceMember WebSite::anyURI Topic_of_conference::String Date::date hasConferenceMember::ConferenceMember paperAssignmentFinalizedBy::Administrator reviewCriteriaEnteredBy::Administrator paperAssignmentToolsRunBy::Administrator virtualMeetingEnabledBy::Administrator hardcopyMailingManifestsPrintedBy::Administrator detailsEnteredBy::Administrator reviewerBiddingStartedBy::Administrator date::date reviewsPerPaper::Integer logoURL::anyURI acceptsHardcopySubmissions::Boolean siteURL::anyURI ;
Document ::= Template ;
 Document ::= article ;
 Document ::= SlideSet ;
 Document ::= MealMenu ;
 Document ::= Programme_Brochure ;
 Document ::= Flyer ;
 Document ::= Web_Site ;
 Document ::= Multi-author_Volume ;
 Document ::= Form ;
 Document ::= Mailing_list ;
 Document ::= Record_of_attendance ;
 Document ::= Brief_introduction_for_Session_chair ;
 Document ::= Invitation_letter ;
 Document ::= Viza ;
 Document ::= Transparency ;
 Document ::= Payment_document ;
 Document ::= Evaluation ;
 Document ::= Email ;
 Document ::= Programme ;
 Document ::= Submission ;
 Document ::= PaperAbstract ;
 Document ::= writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document (relatesTo::Thing)+ submited_by::Person Document_ID::String recieved_by::User used_by::Person submited__by::User ;
Viza ::= writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document (relatesTo::Thing)+ submited_by::Person Document_ID::String recieved_by::User used_by::Person submited__by::User ;
Demo_Session ::= hasAssignedPaper::AcceptedPaper room::String isAssociatedTo::Slot hasChair::Chair ;
SingleLevelConference ::= is_in_phase::phase_of_conference has_program::program hasMember::Person hasName::String endDate::dateTime paperDueOn::dateTime registrationDueOn::dateTime manuscriptDueOn::dateTime startDate::dateTime hasCountry::Country isOrganizedBy::OrganizingCommittee annualOrder::Integer takesPlace::Location hasAcronym::String finishedBy::Program_Comitee_Chair focusesOn::Topic startedBy::Program_Comitee_Chair takesPlace::Location has_conference_member::ConferenceMember WebSite::anyURI Topic_of_conference::String Date::date hasConferenceMember::ConferenceMember paperAssignmentFinalizedBy::Administrator reviewCriteriaEnteredBy::Administrator paperAssignmentToolsRunBy::Administrator virtualMeetingEnabledBy::Administrator hardcopyMailingManifestsPrintedBy::Administrator detailsEnteredBy::Administrator reviewerBiddingStartedBy::Administrator date::date reviewsPerPaper::Integer logoURL::anyURI acceptsHardcopySubmissions::Boolean siteURL::anyURI ;
Sponsorship ::= TravelGrant ;
 Sponsorship ::= providedBy::Organization hasCostCurrency::String hasCostAmount::Integer ;
ConferenceVenuePlace ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
WirelessCommunicationsTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Item ::= Transport_vehicle ;
 Item ::= Card ;
 Item ::= Audiovisual_equipment ;
 Item ::= Publication ;
 Item ::= Document ;
 Item ::= go_through::Activity (is_used_for::Thing)+ is_signed_by::Person is_made_from::Item is_sent_after::Time is_needed_for::Person is_sent_before::Time is_prepared_by::Person is_used_by::Person is_given_to::Person is_sent_by::Person is_writen_by::Person ;
ConferenceAttendant ::= mustPay::Fee hasAdress::String paid::Boolean hasPhone::String ;
Contribution ::= Poster ;
 Contribution ::= Short_paper ;
 Contribution ::= Contribution_File ;
 Contribution ::= Paper ;
 Contribution ::= writtenBy::Author dealsWith::Topic remark::String abstract::String contactEmail::String hasKeyword::String hasTitle::String changedBy::Author hasContributionStatus::EEnum ;
Demo_Paper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
CallForReviews ::= forEvent::AcademicEvent (isInitiatedBy::Person)+ hasSubmissionInstructions::String hasSubmissionDeadline::dateTime ;
Activity ::= Event_Creation ;
 Activity ::= Request ;
 Activity ::= Event_Approval ;
 Activity ::= Registration ;
 Activity ::= paper_assignment ;
 Activity ::= bidding_of_reviewer ;
 Activity ::= managing_of_conference_process ;
 Activity ::= reviewing_proces ;
 Activity ::= notification ;
 Activity ::= submission_process ;
 Activity ::= Activity_before_conference ;
 Activity ::= Conference_activity ;
 Activity ::= Activity_after_conference ;
 Activity ::= Lecture ;
 Activity ::= hasTopic::Topic expectedAttendance::Integer isPartOf::Conference is_followed_by::Activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human is_held_before::Time is_held_in::Thing is_held_after::Time is_dated_on::dateTime has_result::article sent_by::Person ;
human ::= Program_Committee_member ;
 human ::= Contact_Person ;
 human ::= Program_Committee_Chair ;
 human ::= is_author_of::article performs_activity::Activity is_employed_in::institute has_topic_of_interest::Topic supervises::Activity e-mail::String last_name::String first_name::String ;
Track ::= has_a_track-workshop-tutorial_topic::Topic is_part_of_conference_volumes::Conference_volume has_a_track-workshop-tutorial_chair::Track-workshop_chair ;
CADTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Information_for_participants ::= has_authors::Person has_a_date_of_issue::date ;
Programme_Brochure ::= writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document (relatesTo::Thing)+ submited_by::Person Document_ID::String recieved_by::User used_by::Person submited__by::User ;
Reviewer ::= Meta-Reviewer ;
 Reviewer ::= invites_co-reviewers::Reviewer invited_by::Reviewer (has_a_review_reference_or_expertise::Thing)+ writes_review::Review hasReviewHistory::PersonalReviewHistory executes::DoubleBlindReview cooperates::ExternalReviewer IsAssignedTo::Paper hasConflictedPaper::Paper hasPreferredPaper::Paper hasPreferredTopic::ResearchTopic writeReview::Review has_made_review::Paper_Review UserName::String Comments_to_Chair::String Other_Areas::String refuses::Pending_Proposed_Conflict reviews::Paper bidsFor::Paper confirmes::Pending_Proposed_Conflict assignedPaperBy::Program_Comitee_Chair assignedByAdministrator::Administrator adjustBid::Bid readPaper::Paper hasBeenAssigned::Paper assignExternalReviewer::ExternalReviewer ;
Event_Creation ::= hasTopic::Topic expectedAttendance::Integer isPartOf::Conference is_followed_by::Activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human is_held_before::Time is_held_in::Thing is_held_after::Time is_dated_on::dateTime has_result::article sent_by::Person ;
Meta-Review ::= gives_classification::classification is_created_in::Activity review_written_by::Reviewer reviewOfPaper::Paper reviewWrittenBy::Possible_Reviewer containsEvaluation::Evaluation rates::Paper isWritenBy::Reviewer assigned_review_by::Primary_Reviewer written_review_by::Reviewer writtenBy::Reviewer reviews::Reviewed_contribution ;
Slot ::= date::date endsAt::time beginsAt::time forms::ConferenceProgram hosts::Session ;
Speaker_lecture ::= hasAssignedPaper::AcceptedPaper room::String isAssociatedTo::Slot hasChair::Chair ;
Student ::= submits_to_conference::Conference earlyRegistration::Boolean ;
 Student ::= loggin_in::System submit::Document get::Email E-mail::String hasMail::String worksForCompany::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasAffiliation::String hasFirstName::String hasLastName::String hasEmail::String hasName::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String ;
Poster_Paper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
managing_of_conference_process ::= hasTopic::Topic expectedAttendance::Integer isPartOf::Conference is_followed_by::Activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human is_held_before::Time is_held_in::Thing is_held_after::Time is_dated_on::dateTime has_result::article sent_by::Person ;
Conference_part ::= Track ;
 Conference_part ::= has_a_track-workshop-tutorial_topic::Topic is_part_of_conference_volumes::Conference_volume has_a_track-workshop-tutorial_chair::Track-workshop_chair ;
Call_for_paper ::= has_authors::Person has_a_date_of_issue::date ;
Accepted_paper ::= read_paper_by::Thing rateed_paper_by::Thing Score::EEnum ;
Participant ::= Student ;
 Participant ::= Regular ;
 Participant ::= Member ;
 Participant ::= submits_to_conference::Conference earlyRegistration::Boolean ;
MeetingRoomPlace ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
SlideSet ::= writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document (relatesTo::Thing)+ submited_by::Person Document_ID::String recieved_by::User used_by::Person submited__by::User ;
Neutral_Review ::= gives_classification::classification is_created_in::Activity review_written_by::Reviewer reviewOfPaper::Paper reviewWrittenBy::Possible_Reviewer containsEvaluation::Evaluation rates::Paper isWritenBy::Reviewer assigned_review_by::Primary_Reviewer written_review_by::Reviewer writtenBy::Reviewer reviews::Reviewed_contribution ;
ExternalReviewer ::= assignedByReviewer::Reviewer cooperatesReviewer::Reviewer ;
Organizer ::= CommitteeMember ;
 Organizer ::= loggin_in::System submit::Document get::Email E-mail::String hasMail::String worksForCompany::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasAffiliation::String hasFirstName::String hasLastName::String hasEmail::String hasName::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String ;
Topic ::= ParallelAndDistributedComputingTopic ;
 Topic ::= WirelessCommunicationsTopic ;
 Topic ::= OperatingTopicsystems ;
 Topic ::= ComputerNetworksTopic ;
 Topic ::= SatelliteAndSpaceCommunicationsTopic ;
 Topic ::= CADTopic ;
 Topic ::= MultimediaTopic ;
 Topic ::= CommunicationsTopic ;
 Topic ::= PowerlineTransmissionTopic ;
 Topic ::= AntennasTopic ;
 Topic ::= PerformanceTopic ;
 Topic ::= SignalProcessingTopic ;
 Topic ::= MicroelectronicsTopic ;
 Topic ::= TestOnlyTopic ;
 Topic ::= RadioCommunicationsTopic ;
 Topic ::= ComputerArchitectureTopic ;
 Topic ::= MedicineTopic ;
 Topic ::= SecurityTopic ;
 Topic ::= MobileComputingTopic ;
 Topic ::= CryptographyTopic ;
 Topic ::= CommunicationTheoryTopic ;
 Topic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Information ::= sended_by::Administrator Receiver_of_email::String Message_of_email::String Subject_of_email::String ;
ContactInformation ::= hasCity::String hasStreet::String hasPostalCode::String hasPhone::String ;
Review_expertise ::= has_a_submitted_contribution::Submitted_contribution has_an_expertise::EEnum ;
Submitted_Paper ::= Assigned_Paper ;
 Submitted_Paper ::= Reviewed_Paper ;
 Submitted_Paper ::= Advocated_Paper ;
 Submitted_Paper ::= is_stored_in::Paper_File has_been_sent_by::Contact_Author Paper_Id::String Comments_To_Chair::String ;
Important_dates ::= is_an_abstract_submission_date::date is_a_full_paper_submission_date::date is_an_ending_date::date is_a_date_of_acceptance_announcement::date is_a_date_of_camera_ready_paper_submission::date is_a_starting_date::date belong_to_a_conference_volume::Conference_volume ;
Initial_manuscipt ::= writtenBy::Author dealsWith::Topic remark::String abstract::String contactEmail::String hasKeyword::String hasTitle::String ;
Submission_event ::= follows::Administrative_event parallel_with::Administrative_event ;
Author_cd_proceedings_included ::= submitsPaper::Paper writePaper::Paper writes_Paper::Paper changes::Contribution write_paper::Paper submitPaper::Paper writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing ;
AcceptedPaper ::= relatedToEvent::PaperPresentation isAssignedToSession::Session ;
Session_room ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
Record_of_attendance ::= writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document (relatesTo::Thing)+ submited_by::Person Document_ID::String recieved_by::User used_by::Person submited__by::User ;
TravelGrant ::= providedBy::Organization hasCostCurrency::String hasCostAmount::Integer ;
Review_preference ::= (has_a_topic_or_a_submission_contribution::Thing)+ has_a_degree::Integer ;
--------------------metamodels::PDG.bgf--------------------
ExpressionNode ::= name::String expression::Expression (dataDependenceNodes::ExpressionNode)+ (controlDependenceNodes::ExpressionNode)+ ;
EnterNode ::= name::String (controlDependenceNodes::ExpressionNode)+ ;
Expression ::= name::String isIdentifier::Boolean (innerExpressions::Expression)+ ;
--------------------metamodels::PRR.bgf--------------------
RuleCondition ::= ruleConditionOwner::Rule conditionExp::PRRExpressions/OclExpression ;
VariableDeclaration ::= type::PRRTypes/OclType varName::String (variableExp::PRRExpressions/VariableExp)+ ;
Rule ::= binding::Binding condition::RuleCondition (actions::RuleAction)+ ruleOwner::RuleSet ;
Element ::= NamedElement ;
 Element ::= RuleSet ;
 Element ::= RuleAction ;
 Element ::= RuleCondition ;
 Element ::= Binding ;
 Element ::= OclExpression ;
 Element ::= VariableDeclaration ;
 Element ::= location::String (commentsBefore::String)+ (commentsAfter::String)+ ;
LoopExp ::= body::PRRExpressions/OclExpression (iterators::PRRExpressions/Iterator)+ ;
OperationCallExp ::= (arguments::PRRExpressions/OclExpression)+ operationName::String signature::String ;
RuleVariable ::= ruleVariableOwner::Binding filter::PRRExpressions/OclExpression ;
AssignAction ::= objValue::PRRExpressions/OclExpression aValue::PRRExpressions/OclExpression ;
Binding ::= bindingOwner::Rule (ruleVariable::RuleVariable)+ ;
OclType ::= (variableDeclaration::PRRExpressions/VariableDeclaration)+ (oclExpression::PRRExpressions/OclExpression)+ appliedAllInstance::PRRExpressions/AllInstanceExp (typeExp::PRRExpressions/TypeExp)+ ;
--------------------metamodels::Parameters.bgf--------------------
Parameter ::= name::String value::String ;
--------------------metamodels::PathExp.bgf--------------------
PathExp ::= (states::State)+ (transitions::Transition)+ ;
Transition ::= source::State target::State ;
State ::= (incoming::Transition)+ (outgoing::Transition)+ ;
--------------------metamodels::Perceptory.bgf--------------------
MetaData ::= source::Source characteristic::Characteristic operations::Operation theClass::Class ;
VisualInfo ::= details::MetaData rule::BusnissRule operations::Operation theClass::Class relationSchip::RelationSchip constraint::Constraint ;
Steriotype ::= PerceptorySteriotype ;
 Steriotype ::= (descriptiveAttribute::DescriptiveAttribute)+ (operations::Operation)+ (relationSchip::RelationSchip)+ (theClass::Class)+ (thePackage::Package)+ ;
Constraint ::= caracteristic::Characteristic theClass::Class (relationSchip::RelationSchip)+ ;
Temporality ::= geometry::Geometry descriptiveAttributet::DescriptiveAttribute ;
Characteristic ::= DescriptiveAttribute ;
 Characteristic ::= Geometry ;
 Characteristic ::= Temporality ;
 Characteristic ::= VisualInfo ;
 Characteristic ::= details::MetaData rule::BusnissRule operations::Operation theClass::Class relationSchip::RelationSchip constraint::Constraint ;
Dependency ::= (affectCharacteristic::Characteristic)+ constraint::Constraint (steriotype::Steriotype)+ (packages::Package)+ associatePackages::Package ;
Class ::= (characteristic::Characteristic)+ details::MetaData operations::Operation (myOperations::Operation)+ (constraint::Constraint)+ steriotype::Steriotype (packages::Package)+ ;
Operation ::= detail::MetaData (inCharacteristic::Characteristic)+ (affectFeature::Class)+ steriotype::Steriotype behaviour::Class ;
Package ::= steriotype::Steriotype (children::Package)+ parent::Package (classes::Class)+ (relationSchip::RelationSchip)+ (connectedRelationSchip::RelationSchip)+ ;
Generalisation ::= (affectCharacteristic::Characteristic)+ constraint::Constraint (steriotype::Steriotype)+ (packages::Package)+ associatePackages::Package ;
RelationSchip ::= Association ;
 RelationSchip ::= Generalisation ;
 RelationSchip ::= Dependency ;
 RelationSchip ::= (affectCharacteristic::Characteristic)+ constraint::Constraint (steriotype::Steriotype)+ (packages::Package)+ associatePackages::Package ;
Geometry ::= tempsDef::Temporality descriptiveAttributeg::DescriptiveAttribute ;
PerceptorySteriotype ::= Geometry ;
 PerceptorySteriotype ::= Temporality ;
 PerceptorySteriotype ::= VisualInfo ;
 PerceptorySteriotype ::= (descriptiveAttribute::DescriptiveAttribute)+ (operations::Operation)+ (relationSchip::RelationSchip)+ (theClass::Class)+ (thePackage::Package)+ ;
RangeDomain ::= (descriptiveAttribute::DescriptiveAttribute)+ ;
DescriptiveAttribute ::= tempsDef::Temporality specialDef::Geometry steriotype::Steriotype domain::Domain ;
--------------------metamodels::Person.bgf--------------------
Person ::= name::String firstName::String phone::String ;
--------------------metamodels::PetriNet_extended.bgf--------------------
Movement ::= exec::Execution fire::Transition source::Marking target::Marking ;
Token ::= placedAt::Place marking::Marking ;
Execution ::= net::PetriNet (markings::Marking)+ (movements::Movement)+ ;
TransitionToPlace ::= from::Transition to::Place ;
PlaceToTransition ::= from::Place to::Transition ;
Place ::= (incomingArc::TransitionToPlace)+ (outgoingArc::PlaceToTransition)+ ;
PetriNet ::= (elements::Element)+ (arcs::Arc)+ (execs::Execution)+ ;
Marking ::= exec::Execution (tokens::Token)+ ;
Transition ::= (incomingArc::PlaceToTransition)+ (outgoingArc::TransitionToPlace)+ ;
--------------------metamodels::PluginEclipse.bgf--------------------
Range ::= isLeftInclusive::Boolean isRightInclusive::Boolean lowerBound::Version upperBound::Version ;
Version ::= major::Integer minor::Integer micro::Integer qualification::String ;
Eclipse ::= (bundles::Bundle)+ (packages::Package)+ ;
Package ::= fqn::String (importedBy::ImportedPackage)+ exportedBy::ExportedPackage ;
ExportedPackage ::= Xinternal ;
 ExportedPackage ::= package::Package version::Version xFriends::Xfriends ;
ImportedPackage ::= resolution::Resolution package::Package range::Range ;
Bundle ::= symbolicName::String singleton::Boolean manifestVersion::Integer (require::RequiredBundle)+ version::Version (export::ExportedPackage)+ (import::ImportedPackage)+ (packages::Package)+ ;
RequiredBundle ::= (requireBundleAttribute::RequireBundleAttribute)+ bundle::Bundle ;
--------------------metamodels::ProMarte.bgf--------------------
Transaction ::= (workload::Workload)+ (trigger::Trigger)+ response::Response ;
Measure ::= (appliesTo::Realization)+ owner::QuantitativeNFP ;
NFPurationType ::= value::String unit::DurationUnitKinds ;
SingleTimeInterval ::= start::SingleTimeValue end::SingleTimeValue ;
NFPCategory ::= (setOf::NFP)+ (ownes::NFPCategory)+ owner::NFPCategory ;
TimedEventOccurence ::= at::Instant timestamp::TimeValue ;
NFPRateType ::= value::String unit::RateUnitKinds ;
NFPType ::= NFPInstantType ;
 NFPType ::= NFPurationType ;
 NFPType ::= NFPRateType ;
 NFPType ::= NFPProbabilityType ;
 NFPType ::= NFPSizeType ;
 NFPType ::= valueSpecificationLanguage::String source::SourceKinds (constrainedSpec::NFPValueSpecification)+ ;
Scenario ::= TimedAction ;
 Scenario ::= Step ;
 Scenario ::= (behavior::Behavior)+ (scenarionLatency::ComplexNFP)+ (steps::Step)+ root::Step endToEndResponse::Response ;
SimultaneousEventOccurrence ::= at::Instant occurence::TimedEventOccurence ;
Clock ::= accuracy::MetricTimeInterval offset::MetricTimeInterval (generatedInterrupt::ClockInterrupt)+ ;
HardwareDeployment ::= owner::Hardware (contain::HardwareEntityInstance)+ ;
TimedAction ::= Delay ;
 TimedAction ::= (duration::TimeInterval)+ (start::TimeValue)+ (end::TimeValue)+ ;
Step ::= (predecessor::Step)+ (successor::Step)+ (stepLatency::ComplexNFP)+ (usedResourceService::Service)+ ;
ModelingConcern ::= AnalysisConcern ;
 ModelingConcern ::= DesignConcern ;
 ModelingConcern ::= (relevantQuantity::Quantity)+ annotedModel::AnnotatedModel ;
Realization ::= (function::Measure)+ owner::QuantitativeNFP ;
Timer ::= isPeriodic::Boolean duration::MetricTimeValue (genratedTimeOuts::TimeOut)+ ;
Delay ::= (duration::TimeInterval)+ (start::TimeValue)+ (end::TimeValue)+ ;
ECUGate ::= owner::ECU kindOf::Channel ;
DesignConcern ::= (relevantQuantity::Quantity)+ annotedModel::AnnotatedModel ;
ProcessingResource ::= (links::Link)+ (components::Component)+ ;
Response ::= efficiency::ComplexNFP endToEndLatency::ComplexNFP (cause::Trigger)+ (behavior::Scenario)+ ;
Component ::= StructuredComponent ;
 Component ::= BasicComponent ;
 Component ::= (process::ProcessResource)+ (interfaces::Interface)+ ;
SingleTimeValue ::= (denotedInstant::Instant)+ ref::TimeBase ;
NFPRealConstant ::= bodyBeforeComa::Integer bodyAfterComa::Integer ;
Trigger ::= arrivalPattern::ComplexNFP (effect::Response)+ ;
NFP ::= QualitativeNFP ;
 NFP ::= QuantitativeNFP ;
 NFP ::= ComplexNFP ;
 NFP ::= measurementQuantity::Quantity (storedBy::NFPLibrary)+ groupedBy::NFPCategory ;
NFPProbabilityType ::= value::String unit::ProbabilityUnitKinds ;
Service ::= resource::ServerResource interface::Interface ;
MultipleInterval ::= (first::CoincidencePoint)+ (last::CoincidencePoint)+ ;
AnalysisContext ::= (global::ComplexNFP)+ workload::Workload behavior::Behavior (usedResources::Resource)+ ;
NFPSizeType ::= value::String unit::SizeUnitKinds ;
AnnotatedModel ::= (conformsTo::ModelingConcern)+ (import::NFPLibrary)+ ;
NFPExpression ::= (body::String)+ (operand::NFPValueSpecification)+ ;
BasicComponent ::= (process::ProcessResource)+ (interfaces::Interface)+ ;
TimingMechanism ::= Timer ;
 TimingMechanism ::= Clock ;
 TimingMechanism ::= stability::String drift::String skew::String origin::TimedEvent resolution::MetricTimeInterval refClock::Clock state::String ;
SingleInterval ::= first::SingleInstant last::SingleInstant (members::SingleInstant)+ ;
StructuredComponent ::= (process::ProcessResource)+ (interfaces::Interface)+ ;
NFPValueSpecification ::= NFPConstant ;
 NFPValueSpecification ::= NFPVariable ;
 NFPValueSpecification ::= NFPExpression ;
 NFPValueSpecification ::= (constrainedBy::NFPType)+ expression::NFPExpression ;
BasicNFP ::= statisticalQualifier::StatisticalQualifierKinds directon::DirectionKinds typedBy::NFPType (valuedBy::NFPValueSpecification)+ (dimensionOf::ComplexNFP)+ ;
Hardware ::= owner::Hardware (containH::Hardware)+ (containHL::HardwareLibrary)+ (containHE::HardwareEntity)+ (deploymentConfiguration::HardwareDeployment)+ ;
ComplexNFP ::= (parent::ComplexNFP)+ (child::ComplexNFP)+ (ownes::BasicNFP)+ ;
DiscreteInstant ::= next::DiscreteInstant previous::DiscreteInstant refOcc::EventOccurence ;
SingleTimeBase ::= currentValue::SingleTimeValue maximumValue::SingleTimeValue currentInstant::SingleInstant ;
AnalysisConcern ::= (relevantQuantity::Quantity)+ annotedModel::AnnotatedModel ;
NFPLibrary ::= (refersTo::NFPLibrary)+ (usedNFP::NFP)+ ;
NFPInstantType ::= value::String unit::InstantUnitKinds ;
QuantitativeNFP ::= (sampleSet::Realization)+ (measure::Measure)+ ;
--------------------metamodels::Problem.bgf--------------------
Problem ::= severity::Severity location::String description::String ;
--------------------metamodels::Program.bgf--------------------
VariableDeclaration ::= Parameter ;
 VariableDeclaration ::= type::Type initialValue::Expression structure::Structure ;
ConditionalStat ::= condition::Expression (thenStats::Statement)+ (elseStats::Statement)+ ;
Type ::= name::String ;
Parameter ::= direction::Direction procedure::Procedure ;
WhileStat ::= condition::Expression (doStats::Statement)+ ;
AttributeCallExp ::= source::Expression name::String ;
Procedure ::= container::ProcContainerElement (parameters::Parameter)+ (statements::Statement)+ ;
AssignmentStat ::= target::VariableExp value::Expression ;
--------------------metamodels::Promenade.bgf--------------------
BasPrecedence ::= Strong ;
 BasPrecedence ::= Start ;
 BasPrecedence ::= End ;
 BasPrecedence ::= FeedBack ;
 BasPrecedence ::= (deprecs::DerPrecedence)+ (parbind::ParBinding)+ ;
MetaTaskOccurence ::= (dprecs::DerPrecedence)+ (taskCl::MetaTask)+ ;
ParameterUML ::= ParameterPrec ;
 ParameterUML ::= task::MetaTask (doc::MetaDocument)+ ;
DerPrecedence ::= Weak ;
 DerPrecedence ::= Grouping ;
 DerPrecedence ::= (precs::Precedence)+ (auxTasks::MetaTaskOccurence)+ ;
MetaTask ::= (params::ParameterUML)+ (occurs::MetaTaskOccurence)+ ;
Precedence ::= DynPrecedence ;
 Precedence ::= DerPrecedence ;
 Precedence ::= BasPrecedence ;
 Precedence ::= (deprecs::DerPrecedence)+ (parbind::ParBinding)+ ;
ParameterPrec ::= (parbindsTar::ParBinding)+ (parbindsSour::ParBinding)+ (dstParams::ParameterPrec)+ (orParams::ParameterPrec)+ ;
Weak ::= (precs::Precedence)+ (auxTasks::MetaTaskOccurence)+ ;
DependancyUML ::= (suppier::ModelElement)+ (client::ModelElement)+ ;
ParBinding ::= inclusion::Boolean (precs::Precedence)+ targetPar::ParameterPrec sourcePar::ParameterPrec ;
ModelElement ::= MetaTaskOccurence ;
 ModelElement ::= MetaTask ;
 ModelElement ::= dependencyUMLsupp::DependancyUML dependencyUMLcli::DependancyUML ;
DynPrecedence ::= Strong ;
 DynPrecedence ::= Start ;
 DynPrecedence ::= End ;
 DynPrecedence ::= FeedBack ;
 DynPrecedence ::= Weak ;
 DynPrecedence ::= Grouping ;
 DynPrecedence ::= (deprecs::DerPrecedence)+ (parbind::ParBinding)+ ;
Grouping ::= (precs::Precedence)+ (auxTasks::MetaTaskOccurence)+ ;
--------------------metamodels::PtolemyII.bgf--------------------
ComponentPort ::= po_container::Entity (links::Relation)+ ;
Attribute ::= Parameter ;
 Attribute ::= ComponentEntity ;
 Attribute ::= att_container::Entity value::String ;
CompositeEntity ::= WorkSpace ;
 CompositeEntity ::= CompositeActor ;
 CompositeEntity ::= (containees::ComponentEntity)+ (relations::ComponentRelation)+ ;
AtomicActor ::= ce_container::CompositeEntity ;
Parameter ::= pa_container::Entity dataType::EDataType ;
WorkSpace ::= (containees::ComponentEntity)+ (relations::ComponentRelation)+ ;
Entity ::= (attributes::Attribute)+ (parameters::Parameter)+ (ports::Port)+ ;
Port ::= ComponentPort ;
 Port ::= po_container::Entity (links::Relation)+ ;
--------------------metamodels::Publication.bgf--------------------
Publication ::= title::String authors::String nbPages::Integer ;
--------------------metamodels::QVT.bgf--------------------
TypedModel ::= transformation::Transformation (usedPackage::Package)+ (dependsOn::TypedModel)+ ;
TupleLiteralPart ::= TupleLiteralExp::TupleLiteralExp attribute::Property ;
Tag ::= (element::Element)+ transformation::Transformation owner::Module value::String name::String ;
Property ::= ContextualProperty ;
 Property ::= Class::Class opposite::Property module::Module isReadOnly::Boolean isDerived::Boolean isComposite::Boolean isId::Boolean default::String ;
MappingBody ::= (initSection::OclExpression)+ (endSection::OclExpression)+ ;
Pattern ::= CorePattern ;
 Pattern ::= DomainPattern ;
 Pattern ::= (predicate::Predicate)+ (bindsTo::Variable)+ whenOwner::Relation whereOwner::Relation ;
RelationImplementation ::= relation::Relation impl::Operation inDirectionOf::TypedModel ;
Assignment ::= bottomPattern::BottomPattern slotExpression::OclExpression value::OclExpression targetProperty::Property isDefault::Boolean ;
Typedef ::= base::Type condition::OclExpression ;
RealizedVariable ::= initExpression::OclExpression LetExp::LetExp computeOwner::ComputeExp bindParameter::Parameter ;
UnlinkExp ::= target::OclExpression item::OclExpression ;
ContextualProperty ::= context::Class overridden::Property ;
Domain ::= RelationDomain ;
 Domain ::= CoreDomain ;
 Domain ::= isCheckable::Boolean isEnforceable::Boolean rule::Rule typedModel::TypedModel ;
ObjectTemplateExp ::= (part::PropertyTemplateItem)+ referredClass::Class ;
CoreDomain ::= isCheckable::Boolean isEnforceable::Boolean rule::Rule typedModel::TypedModel guardPattern::GuardPattern bottomPattern::BottomPattern ;
ModelType ::= (metamodel::Package)+ (additionalCondition::OclExpression)+ conformanceKind::String ;
VarParameter ::= MappingParameter ;
 VarParameter ::= ModelParameter ;
 VarParameter ::= ctxOwner::ImperativeOperation resOwner::ImperativeOperation kind::DirectionKind ;
ExpressionInOcl ::= bodyExpression::OclExpression context::Variable resultVariable::Variable parameterVariable::Variable ;
OperationalTransformation ::= (intermediateClass::Class)+ refined::Transformation (intermediateProperty::Property)+ (modelParameter::ModelParameter)+ entry::EntryOperation (relation::Relation)+ ;
Constructor ::= context::VarParameter (result::VarParameter)+ overridden::ImperativeOperation body::OperationBody isBlackbox::Boolean ;
MappingOperation ::= (disjunct::MappingOperation)+ refinedRelation::Relation (merged::MappingOperation)+ (inherited::MappingOperation)+ (when::OclExpression)+ ;
LogExp ::= text::String level::Integer condition::OclExpression element::Element ;
Class ::= Typedef ;
 Class ::= AnonymousTupleType ;
 Class ::= ModelType ;
 Class ::= Module ;
 Class ::= Transformation ;
 Class ::= TupleType ;
 Class ::= AnyType ;
 Class ::= (ownedAttribute::Property)+ (ownedOperation::Operation)+ (superClass::Class)+ isAbstract::Boolean ;
AssertExp ::= severity::SeverityKind log::LogExp assertion::OclExpression ;
AltExp ::= condition::OclExpression body::OclExpression ;
ModuleImport ::= (binding::ModelType)+ module::Module importedModule::Module kind::ImportKind ;
CollectionLiteralExp ::= kind::CollectionKind (part::CollectionLiteralPart)+ ;
WhileExp ::= condition::OclExpression body::OclExpression ;
Operation ::= ImperativeOperation ;
 Operation ::= Function ;
 Operation ::= class::Class (ownedParameter::Parameter)+ (raisedException::Type)+ ;
BottomPattern ::= area::Area (assignment::Assignment)+ (realizedVariable::RealizedVariable)+ (enforcementOperation::EnforcementOperation)+ ;
PropertyTemplateItem ::= objContainer::ObjectTemplateExp value::OclExpression referredProperty::Property ;
Key ::= identifies::Class (part::Property)+ transformation::RelationalTransformation ;
ObjectExp ::= referredObject::Variable body::ConstructorBody ;
ImperativeOperation ::= Helper ;
 ImperativeOperation ::= Constructor ;
 ImperativeOperation ::= EntryOperation ;
 ImperativeOperation ::= MappingOperation ;
 ImperativeOperation ::= context::VarParameter (result::VarParameter)+ overridden::ImperativeOperation body::OperationBody isBlackbox::Boolean ;
EntryOperation ::= context::VarParameter (result::VarParameter)+ overridden::ImperativeOperation body::OperationBody isBlackbox::Boolean ;
ResolveExp ::= ResolveInExp ;
 ResolveExp ::= condition::OclExpression one::Boolean isInverse::Boolean isDeferred::Boolean ;
VariableInitExp ::= referredVariable::Variable withResult::Boolean ;
InstantiationExp ::= ObjectExp ;
 InstantiationExp ::= instantiatedClass::Class extent::Variable (argument::OclExpression)+ ;
IteratorExp ::= body::OclExpression (iterator::Variable)+ ;
Mapping ::= (specification::Mapping)+ (local::Mapping)+ context::Mapping ;
Transformation ::= RelationalTransformation ;
 Transformation ::= (ownedTag::Tag)+ (modelParameter::TypedModel)+ (rule::Rule)+ extends::Transformation ;
SwitchExp ::= (alternativePart::AltExp)+ elsePart::OclExpression ;
EnforcementOperation ::= enforcementMode::EnforcementMode bottomPattern::BottomPattern operationCallExp::OperationCallExp ;
AnyType ::= (ownedAttribute::Property)+ (ownedOperation::Operation)+ (superClass::Class)+ isAbstract::Boolean package::Package ;
Package ::= Module ;
 Package ::= Transformation ;
 Package ::= (ownedType::Type)+ (nestedPackage::Package)+ uri::String ;
CollectionTemplateExp ::= (part::OclExpression)+ kind::CollectionKind referredCollectionType::CollectionType match::OclExpression ;
LetExp ::= (in::OclExpression)+ variable::Variable ;
IfExp ::= condition::OclExpression thenExpression::OclExpression elseExpression::OclExpression ;
ModelParameter ::= ctxOwner::ImperativeOperation resOwner::ImperativeOperation kind::DirectionKind ;
CollectionRange ::= first::OclExpression last::OclExpression ;
Variable ::= RealizedVariable ;
 Variable ::= VarParameter ;
 Variable ::= FunctionParameter ;
 Variable ::= initExpression::OclExpression LetExp::LetExp computeOwner::ComputeExp bindParameter::Parameter ;
Relation ::= isTopLevel::Boolean (variable::Variable)+ (operationalImpl::RelationImplementation)+ where::Pattern when::Pattern ;
Rule ::= Relation ;
 Rule ::= Mapping ;
 Rule ::= (domain::Domain)+ transformation::Transformation overrides::Rule ;
ConstructorBody ::= operation::ImperativeOperation (content::OclExpression)+ ;
MappingParameter ::= refinedDomain::RelationDomain extent::ModelParameter ;
Library ::= (ownedTag::Tag)+ (configProperty::Property)+ (moduleImport::ModuleImport)+ (usedModelType::ModelType)+ isBlackbox::Boolean ;
OperationCallExp ::= ImperativeCallExp ;
 OperationCallExp ::= (argument::OclExpression)+ referredOperation::Operation ;
Predicate ::= conditionExpression::OclExpression pattern::Pattern ;
FunctionParameter ::= operation::Operation initExpression::OclExpression LetExp::LetExp computeOwner::ComputeExp bindParameter::Parameter ;
AssignExp ::= (value::OclExpression)+ left::OclExpression defaultValue::OclExpression isReset::Boolean ;
DictLiteralPart ::= key::OclExpression value::OclExpression ;
Module ::= OperationalTransformation ;
 Module ::= Library ;
 Module ::= (ownedTag::Tag)+ (configProperty::Property)+ (moduleImport::ModuleImport)+ (usedModelType::ModelType)+ isBlackbox::Boolean ;
OperationBody ::= MappingBody ;
 OperationBody ::= ConstructorBody ;
 OperationBody ::= operation::ImperativeOperation (content::OclExpression)+ ;
ComputeExp ::= returnedElement::Variable body::OclExpression ;
TupleType ::= (ownedAttribute::Property)+ (ownedOperation::Operation)+ (superClass::Class)+ isAbstract::Boolean ;
TryExp ::= tryBody::OclExpression (exception::Type)+ exceptBody::OclExpression ;
RelationDomain ::= pattern::DomainPattern rootVariable::Variable ;
--------------------metamodels::QVT_SimpleRDBMS.bgf--------------------
Key ::= owner::Table (column::Column)+ (refersToOpposite::ForeignKey)+ ;
Table ::= schema::Schema (column::Column)+ (key::Key)+ (foreignKey::ForeignKey)+ ;
ForeignKey ::= (column::Column)+ owner::Table refersTo::Key ;
Column ::= type::String owner::Table (key::Key)+ (foreignKey::ForeignKey)+ ;
--------------------metamodels::QoS.bgf--------------------
ProfileTransition ::= (operations::Operation)+ from::SimpleProfile to::SimpleProfile compoundProfile::CompoundProfile ;
CompoundProfile ::= (profileTransition::ProfileTransition)+ (simpleProfile::SimpleProfile)+ ;
QoSStatement ::= SingleQoSStatement ;
 QoSStatement ::= CoumpoundQoSStatement ;
 QoSStatement ::= (contraints::QoSContraints)+ relation::CoumpoundQoSStatement (parameter::Parameter)+ ;
QoSContraints ::= invariant::BooleanExpression parallel_and_composition::MappingExpression parallel_or_composition::MappingExpression sequential_composition::MappingExpression values::MappingExpression (statisticalAttribute::StatisticalAttributekindKind)+ parameter::Parameter domain::Domain ;
QoSComponent ::= (profile::QoSProfile)+ operations::Operation ;
SimpleProfile ::= compoundProfile::CompoundProfile use::QoSStatement provides::QoSStatement ;
QoSCharacteristic ::= QoSContraints ;
 QoSCharacteristic ::= QualificationKind ;
 QoSCharacteristic ::= invariant::BooleanExpression parallel_and_composition::MappingExpression parallel_or_composition::MappingExpression sequential_composition::MappingExpression values::MappingExpression (statisticalAttribute::StatisticalAttributekindKind)+ parameter::Parameter domain::Domain ;
--------------------metamodels::QoS_Characteristic.bgf--------------------
Numeric ::= direction::DirectionKind ;
Enumeration ::= direction::DirectionKind ;
QoSCharacteristic ::= invariant::BooleanExpression parallel_and_composition::MappingExpression parallel_or_composition::MappingExpression sequential_composition::MappingExpression values::MappingExpression (statisticalAttribute::StatisticalAttributekindKind)+ parameter::Parameter domain::Domain ;
--------------------metamodels::RDFS.bgf--------------------
URIReference ::= UniformResourceIdentifier ;
 URIReference ::= uri::UniformResourceIdentifier resource::Resource literal::TypedLiteral namedGraph::Graph (reifiedStatement::Statement)+ ;
Statement ::= predicate::Property object::Resource subject::Resource isReifiedOnly::Boolean isReified::Boolean (nameForReification::URIReference)+ ;
List ::= first::Resource rest::List (originalList::List)+ ;
Graph ::= graphName::URIReference (resources::Resource)+ ;
Resource ::= Graph ;
 Resource ::= List ;
 Resource ::= Container ;
 Resource ::= Property ;
 Resource ::= Statement ;
 Resource ::= URIReferenceNode ;
 Resource ::= BlankNode ;
 Resource ::= Class ;
 Resource ::= Literal ;
 Resource ::= graph::Graph (uriRef::URIReference)+ (subjectStatement::Statement)+ (objectStatement::Statement)+ (label::PlainLiteral)+ (type::Class)+ (seeAlso::Resource)+ (referringResource::Resource)+ (member::Resource)+ (container::Resource)+ (list::List)+ ;
RDFXMLLiteral ::= datatypeURI::URIReference ;
UniformResourceIdentifier ::= name::String (uriRef::URIReference)+ ;
Class ::= Datatype ;
 Class ::= (subClassOf::Class)+ (superClass::Class)+ (typedResource::Resource)+ (propertyForDomain::Property)+ (propertyForRange::Property)+ ;
PlainLiteral ::= language::String labeledResource::Resource ;
Property ::= (predicateStatement::Statement)+ (subPropertyOf::Property)+ (superProperty::Property)+ (domain::Class)+ (range::Class)+ ;
Datatype ::= (subClassOf::Class)+ (superClass::Class)+ (typedResource::Resource)+ (propertyForDomain::Property)+ (propertyForRange::Property)+ ;
URIReferenceNode ::= graph::Graph (uriRef::URIReference)+ (subjectStatement::Statement)+ (objectStatement::Statement)+ (label::PlainLiteral)+ (type::Class)+ (seeAlso::Resource)+ (referringResource::Resource)+ (member::Resource)+ (container::Resource)+ (list::List)+ ;
--------------------metamodels::QoS_Profile.bgf--------------------
ProfileTransition ::= (operations::Operation)+ from::SimpleProfile to::SimpleProfile compoundProfile::CompoundProfile ;
CompoundProfile ::= (profileTransition::ProfileTransition)+ (simpleProfile::SimpleProfile)+ ;
QoSComponent ::= operations::Operation (profile::QoSProfile)+ ;
SimpleProfile ::= compoundProfile::CompoundProfile uses::QoSStatement provides::QoSStatement ;
--------------------metamodels::QoS_Statement.bgf--------------------
QoSStatement ::= SingleQoSStatement ;
 QoSStatement ::= CoumpoundQoSStatement ;
 QoSStatement ::= relation::CoumpoundQoSStatement (parameter::Parameter)+ ;
--------------------metamodels::Relational.bgf--------------------
Table ::= (col::Column)+ (key::Column)+ ;
Type ::= name::String ;
Column ::= owner::Table keyOf::Table type::Type ;
--------------------metamodels::RelationalDBContent.bgf--------------------
Table ::= database::DataBase (tuples::Tuple)+ ;
DataBase ::= SGBDname::String (tables::Table)+ ;
Tuple ::= owner::Table (elements::TupleElement)+ ;
TupleElement ::= tuple::Tuple value::String ;
--------------------metamodels::RelationalDBSchema.bgf--------------------
Table ::= database::DataBase (columns::Column)+ (key::Column)+ ;
DataBase ::= SGBDname::String (tables::Table)+ ;
Column ::= dataType::String null::Boolean defaultValue::String owner::Table keyOf::Table ;
--------------------metamodels::Repository.bgf--------------------
Subsystem ::= (classes::Class)+ (relations::Relation)+ ;
Relation ::= subsystem::Subsystem classes::Class ;
Class ::= name::String is_deferred::Boolean (features::Feature)+ parentSubsystem::Subsystem subsystem::Subsystem (relations::Relation)+ ;
Feature ::= Entity ;
 Feature ::= Routine ;
 Feature ::= theClass::Class type::Type ;
Routine ::= theClass::Class type::Type ;
Entity ::= theClass::Class type::Type ;
--------------------metamodels::Reqtify.bgf--------------------
Document ::= project::Project (sections::Section)+ ;
Section ::= document::Document (sectionChildren::Section)+ sectionParent::Section (requirements::AbstractRequirement)+ ;
Requirement ::= section::Section isContained::MacroRequirement (coverLinks::CoverLink)+ (attribute::Attribute)+ ;
--------------------metamodels::RequisitePro.bgf--------------------
Document ::= description::String ;
Project ::= (content::ContainedElt)+ (packages::Package)+ ;
Requirement ::= text::String (attributes::Attribute)+ location::Document parent::Requirement (children::Requirement)+ (coverLink::Requirement)+ ;
--------------------metamodels::SBVRvoc.bgf--------------------
NameConcept ::= the::Qualif (name::NameWord)+ ;
StringWord ::= val::String ;
ConceptDefinition ::= exp::Concept (conjexp::ConjConcept)+ ;
NameRepresentation ::= hasThe::Boolean (name::NameWord)+ ;
FactTypeFormRepresentation ::= primaryRep1::NotFactTypeRepresentation (verbExp::Verb)+ primaryRep2::NotFactTypeRepresentation ;
NameWord ::= val::String ;
ModalForm ::= modal::ModalVerb isNeg::Boolean ;
NounConcept ::= qualif::Qualifier (noun::StringWord)+ ;
SubSBVRProp ::= join::Join modalVerb::ModalVerb (verbs::Verb)+ concept2::Concept ;
VocabularyEntry ::= primaryRep::PrimaryRepresentation (caption::Caption)+ ;
Qualifier ::= op::Qualif endOperator::EndOperator min::StringWord max::StringWord ;
ObjectConcept ::= operatoredConcept::NounConcept qualify::Qualification ;
ModalBeginC ::= endOperator::EndOperator ;
LinkSBVRConcept ::= link::Link concept::Concept ;
SBVRExpression ::= hasPoint::Boolean firstProposition::SimpleSBVRProp (nextProposition::SBVRPropWithKW)+ ;
QuotedStringWord ::= val::String ;
ConjConcept ::= conjonction::ConjonctionnalKeyWord concept::Concept ;
SimpleSBVRProp ::= modal::ModalBegin concept1::Concept modalVerb::ModalForm (verbs::Verb)+ concept2::Concept ;
SBVRPropWithKW ::= conjonction::ConjonctionnalKeyWord endConj::EndOperator proposition::SimpleSBVRProp ;
--------------------metamodels::SCADE.bgf--------------------
AnnAttGroup ::= name::String key::AnnNoteType ;
StorageUnit ::= saoFileName::String annFileName::String persistAs::String loaded::Boolean saoModified::Boolean annModified::Boolean fileRef::FileRef modelS::Model (element::StorageElement)+ ;
Result ::= elementCount::Integer associationClassRs::AssociationClass record::Record ;
ExprNull ::= label::Label exprContactE::ExprContact exprCallE::ExprCall dependance::ConstVar (subExprId::ExprId)+ paramArray::ParamArray constant::Constant equationE::Equation assertionE::Assertion ;
Project ::= pathname::String (configuration::Configuration)+ (fileRef::FileRef)+ (owner::Element)+ ;
AnnProperty ::= AnnPropertyInt ;
 AnnProperty ::= AnnPropertyBool ;
 AnnProperty ::= AnnPropertyChar ;
 AnnProperty ::= AnnPropertyReal ;
 AnnProperty ::= AnnPropertyString ;
 AnnProperty ::= AnnPropertyEnum ;
 AnnProperty ::= name::String type::Integer key::AnnAttDefinition ;
Session ::= descriptor::Descriptor model::Model (loadsModel::Model)+ DefinedIn::String loader::Loader ;
Instance ::= index::Integer occ::String modelI::Model operatorI::Operator associationClassI::AssociationClass caller::Instance (called::Instance)+ origin::Instance (related::Instance)+ ;
Transition ::= conditions::String transKind::Integer state1::State state2::State ;
MtcApplication ::= (coverageFileCov::CoverageFile)+ (criterionFileCri::CriterionFile)+ modelM::Model ;
Loader ::= descriptor::Descriptor session::Session ;
NamedType ::= kind::Object (refinement::NamedType)+ (refined::NamedType)+ to::Operator from::Operator implementation::Implementation definition::Type keyM::Model key::TypeBlock ;
Record ::= creator::String name::String date::String author::String description::String key::CoverageFile associationClassRc::AssociationClass coverageFileR::CoverageFile (result::Result)+ ;
State ::= name::String cx::Double cy::Double (transition1::Transition)+ (transition2::Transition)+ stOutput::StOutput ;
AnnAttEnumValue ::= value::String ;
Table ::= size::Integer typeT::Type ;
ConstValue ::= value::String kind::Object ;
AnnNoteType ::= name::String annAttDefinition::AnnAttDefinition annAttGroup::AnnAttGroup key::AnnotSchema ;
Equation ::= rotation::Integer symetrical::Boolean terminator::Boolean eqBlock::EqBlock (left::Variable)+ right::Expression (outEdge::Edge)+ position::RPoint size::RSize ;
ParamArray ::= (notes::ListString)+ paramBlock::ParamBlock operator::Operator (value::Expression)+ ;
Tuple ::= element::CompositeElement ;
AnnotSchema ::= pathname::String annNoteType::AnnNoteType annCategory::AnnCategory ;
LocalVariable ::= optional::Boolean const::Boolean probe::Boolean pure::Boolean initValue::String operatorI::Operator operatorO::Operator operatorH::Operator nodeL::Node nodeI::Node ;
CoverageFile ::= record::Record modelCov::Model application::MtcApplication recordCov::Record ;
ConstVar ::= Constant ;
 ConstVar ::= Variable ;
 ConstVar ::= kind::Object type::Type (client::EqBlock)+ ;
AnnAttDateValue ::= value::String ;
StateBase ::= DefineIn::String ;
StOutput ::= name::String type::String clock::Boolean const::Boolean optional::Boolean ;
Assertion ::= key::EqBlock expression::Expression edge::Edge position::RPoint ;
Node ::= nodeKind::Object eqBlock::EqBlock paramBlock::ParamBlock (local::LocalVariable)+ (internal::LocalVariable)+ key::Model stateMachine::StateMachine modelN::Model ;
EqBlock ::= (equation::Equation)+ assertion::Assertion key::Node (calledOperator::Operator)+ (referencedId::ConstVar)+ ;
ParamBlock ::= key::Node (columnsSize::ListInteger)+ (array::ParamArray)+ ;
AnnCategory ::= name::String key::AnnotSchema (anootability::Annotability)+ ;
HistoryEntry ::= file::File ;
CriterionFile ::= application::MtcApplication modelCri::Model (criterionC::Criterion)+ ;
Edge ::= leftVarIndex::Integer labelOrientation::Integer leftVar::Variable rightExpression::ExprId srcEquation::Equation assertion::Assertion (position::RPoint)+ dstEquation::Equation ;
Variable ::= GlobalVariable ;
 Variable ::= LocalVariable ;
 Variable ::= clock::Variable (definition::Equation)+ ;
StInitInput ::= name::String type::String clock::Boolean const::Boolean optional::Boolean ;
AssociationClass ::= resultA::Result (recordA::Record)+ (instanceA::Instance)+ ;
FileRef ::= pathname::String persistAs::String DefinedIn::String ;
StateMachine ::= initialStPtr::InitialStPtr (state::State)+ (transition::Transition)+ ;
Configuration ::= name::String (propC::Prop)+ projectC::Project ;
AnnAttFileValue ::= value::String ;
CompositeElement ::= typeC::Type key::Composite ;
AnnAttDefinition ::= name::String type::Integer annAttGroup::AnnAttGroup key::AnnNoteType annProperty::AnnProperty ;
AnnNote ::= name::String modified::Boolean annNoteType::AnnNoteType annotable::Annotable (annAttValue::AnnAttValue)+ ;
Structure ::= element::CompositeElement ;
ExprCall ::= numOcc::Integer predefOpr::Integer (parameter::Expression)+ exprContactEC::ExprContact operator::Operator ;
TypeBlock ::= type::NamedType key::Model ;
Implementation ::= key::Model (namedTypeI::NamedType)+ ;
ExprId ::= exprContactEI::ExprContact reference::ConstVar ;
Descriptor ::= modelFileName::String sernFileName::String sernPersistAs::String rnetFileName::String rnetPersistAs::String occBase::Integer size::Integer nameVerify::Boolean checked::Boolean (libraryModels::ListString)+ (annTypeFiles::ListString)+ modelD::Model ;
Folder ::= extensions::String (element::Element)+ ;
ExprContact ::= boolAct::ExprId (initValue::Expression)+ calledOpr::ExprCall ;
ConstBlock ::= modelC::Model keyC::Model key::Model constant::Constant ;
InitialStPtr ::= cx::Double cy::Double state::State ;
StInput ::= name::String type::String clock::Boolean const::Boolean optional::Boolean ;
Model ::= library::Boolean pathname::String descriptor::Descriptor project::Project fileRef::FileRef (storageUnitM::StorageUnit)+ enumsBlock::ConstBlock (importedOperator::Operator)+ (client::Model)+ (libraries::Model)+ (allLibry::Model)+ (typeM::Type)+ model::Model coverageFileM::CoverageFile criterionFileM::CriterionFile root::Instance (all::Operator)+ application::MtcApplication (reference::Reference)+ (tmpNode::Node)+ constBlockK::ConstBlock node::Node varBlockK::VarBlock typeBlock::TypeBlock refinement::NamedType implementation::Implementation constant::Constant allConstant::Constant allvariable::GlobalVariable variable::GlobalVariable allConstVar::ConstVar constVar::ConstVar constBlock::ConstBlock varBlock::VarBlock allNamedType::NamedType namedType::NamedType ;
AnnAttOidValue ::= value::String ;
VarBlock ::= variable::GlobalVariable keyVB::Model key::Model ;
Annotability ::= minCardinality::Integer maxCardinality::Integer defaultNote::Boolean annNoteType::AnnNoteType ;
Constant ::= imported::Boolean value::Expression enumeration::Enumeration key::ConstBlock ;
Operator ::= Node ;
 Operator ::= category::String conversion::Boolean state::Boolean index::Integer variable::LocalVariable (input::LocalVariable)+ (output::LocalVariable)+ (hidden::LocalVariable)+ (client::EqBlock)+ modelO::Model modelOp::Model criterionO::Criterion (intanceO::Instance)+ operator::Operator ;
Prop ::= name::String (values::ListString)+ entity::Annotable configurationP::Configuration ;
Criterion ::= ident::String name::String description::String criterionFileC::CriterionFile operatorC::Operator (element::Element)+ ;
--------------------metamodels::SDM.bgf--------------------
DelegationDefinition ::= SDMDelegationDefinition ;
 DelegationDefinition ::= OBDelegationDefinition ;
 DelegationDefinition ::= proxyDefinition::QualifiedName delegateDefinition::QualifiedName ;
SettingsAttributes ::= list::Boolean access::SettingMemberAccess secure::SettingMemberSecure deploymentTime::Boolean required::Boolean canBeNull::Boolean elementsCanBeNull::Boolean defaultRead::String defaultWrite::String ;
StructuralConstraint ::= ObjectConstraint ;
 StructuralConstraint ::= RelationshipConstraint ;
 StructuralConstraint ::= ConstraintGroup ;
 StructuralConstraint ::= description::Description designData::DesignData name::SimpleName evaluate::ConstraintEvaluation raiseError::Boolean returnEarly::Boolean ;
Member ::= ObjectMember ;
 Member ::= RelationshipMember ;
 Member ::= ConstraintMember ;
 Member ::= FlowMember ;
 Member ::= SettingMember ;
 Member ::= (description::Description)+ designData::DesignData (settingValue::MembSettingValue)+ (settingValueList::MembSettingValueList)+ name::SimpleName definition::QualifiedName ;
ConstraintMember ::= OBConstraint ;
 ConstraintMember ::= RDConstraint ;
 ConstraintMember ::= OCConstraint ;
 ConstraintMember ::= RCConstraint ;
 ConstraintMember ::= CGConstraint ;
 ConstraintMember ::= CDConstraint ;
 ConstraintMember ::= (input::Input)+ raiseError::Boolean evaluate::ConstraintEvaluation ;
DescriptionEntry ::= Entry ;
 DescriptionEntry ::= name::String resourceId::String manager::QualifiedName substitute::Substitute ;
Definition ::= ObjectDefinition ;
 Definition ::= RelationshipDefinition ;
 Definition ::= ConstraintDefinition ;
 Definition ::= FlowDefinition ;
 Definition ::= description::Description designData::DesignData (settingDeclaration::DefSettingDeclaration)+ (settingValue::DefSettingValue)+ (settingValueList::DefSettingValueList)+ name::SimpleName manager::QualifiedName className::String ;
SettingDefinitions ::= nameSpace::NameSpace manager::QualifiedName clrNameSpace::String ;
ConstraintDefinition ::= SDMConstraintDefinition ;
 ConstraintDefinition ::= (relationshipConstraint::CDRelationshipConstraint)+ (constraintGroup::CDConstraintGroup)+ (objectConstraint::CDObjectConstraint)+ (constraint::CDConstraint)+ targetDefinition::QualifiedName returnEarly::Boolean ;
CommunicationMember ::= OBConnection ;
 CommunicationMember ::= RDConnection ;
 CommunicationMember ::= clientMember::Path serverMember::Path ;
ManagerDeclaration ::= SDMManager ;
 ManagerDeclaration ::= description::Description name::SimpleName assemblyName::String version::FourPartVersionType publicKeyToken::PublicKeyTokenType culture::CultureNeutral platform::Platform sourcePath::Path ;
SettingMember ::= DefSettingDeclaration ;
 SettingMember ::= (facet::Facet)+ settingAttributes::SettingsAttributes ;
Input ::= name::SimpleName path::SettingPath cast::Boolean convert::Boolean ;
CommunicationDefinition ::= SDMCommunicationDefinition ;
 CommunicationDefinition ::= OBCommunicationDefinition ;
 CommunicationDefinition ::= clientDefinition::QualifiedName serverDefinition::QualifiedName ;
ReferenceMember ::= OBReference ;
 ReferenceMember ::= RDReference ;
 ReferenceMember ::= dependentMember::Path sourceMember::Path ;
SettingValue ::= MembSettingValue ;
 SettingValue ::= DefSettingValue ;
 SettingValue ::= (contents::String)+ settingValueAttributes::SettingValueAttributes ;
Output ::= fixed::Boolean replace::Boolean ;
SettingValueList ::= MembSettingValueList ;
 SettingValueList ::= DefSettingValueList ;
 SettingValueList ::= (value::Value)+ settingValueAttributes::SettingValueAttributes ;
ReferenceDefinition ::= SDMReferenceDefinition ;
 ReferenceDefinition ::= OBReferenceDefinition ;
 ReferenceDefinition ::= dependentDefinition::QualifiedName sourceDefinition::QualifiedName ;
Description ::= (entry::Entry)+ resourceId::String manager::QualifiedName ;
ValueTransfer ::= Output ;
 ValueTransfer ::= Input ;
 ValueTransfer ::= name::SimpleName path::SettingPath cast::Boolean convert::Boolean ;
ObjectConstraint ::= RDObjectConstraint ;
 ObjectConstraint ::= RCObjectConstraint ;
 ObjectConstraint ::= CGObjectConstraint ;
 ObjectConstraint ::= CDObjectConstraint ;
 ObjectConstraint ::= (constraint::OCConstraint)+ (relationshipConstraint::OCRelationshipConstraint)+ (constraintGroup::OCConstraintGroup)+ primaryRole::RolesList primaryObjectDefinition::QualifiedName (secondaryRole::RolesList)+ (secondaryObjectDefinition::QualifiedName)+ (minOccurs::MinOccurs)+ (maxOccurs::MaxOccurs)+ ;
NamespaceIdentity ::= ImportNamespaceIdentity ;
 NamespaceIdentity ::= name::Path version::FourPartVersionType publicKey::PublicKeyType publicKeyToken::PublicKeyTokenType culture::CultureNeutral platform::Platform ;
ObjectMember ::= SystemMember ;
 ObjectMember ::= EndpointMember ;
 ObjectMember ::= ResourceMember ;
 ObjectMember ::= minOccurs::MinOccurs maxOccurs::MaxOccurs reference::Boolean proxy::Boolean ;
SettingValueAttributes ::= path::SettingPath null::Boolean fixed::Boolean unset::Boolean definition::QualifiedName convert::Boolean secure::Boolean reference::Boolean ;
RelationshipConstraint ::= OBRelationshipConstraint ;
 RelationshipConstraint ::= OCRelationshipConstraint ;
 RelationshipConstraint ::= RCRelationshipConstraint ;
 RelationshipConstraint ::= CGRelationshipConstraint ;
 RelationshipConstraint ::= CDRelationshipConstraint ;
 RelationshipConstraint ::= (constraint::RCConstraint)+ (relationshipConstraint::RCRelationshipConstraint)+ (objectConstraint::RCObjectConstraint)+ (constraintGroup::RCConstraintGroup)+ relationshipDefinition::QualifiedName targetRole::RolesList targetObjectDefinition::QualifiedName minOccurs::MinOccurs maxOccurs::MaxOccurs delegationAware::Boolean ;
HostingMember ::= OBHosting ;
 HostingMember ::= RDHosting ;
 HostingMember ::= guestMember::Path hostMember::Path ;
ObjectDefinition ::= SystemDefinition ;
 ObjectDefinition ::= EndpointDefinition ;
 ObjectDefinition ::= ResourceDefinition ;
 ObjectDefinition ::= (flow::OBFlow)+ (relationshipConstraint::OBRelationshipConstraint)+ (constraint::OBConstraint)+ (constraintGroup::OBConstraintGroup)+ (endpointDefinition::OBEndpointDefinition)+ (systemDefinition::OBSystemDefinition)+ (resourceDefinition::OBResourceDefinition)+ (communicationDefinition::OBCommunicationDefinition)+ (containmentDefinition::OBContainmentDefinition)+ (delegationDefinition::OBDelegationDefinition)+ (referenceDefinition::OBReferenceDefinition)+ (hostingDefinition::OBHostingDefinition)+ (endpoint::OBEndpoint)+ (subsystem::OBSubsystem)+ (resource::OBResource)+ (hosting::OBHosting)+ (containment::OBContainment)+ (connection::OBConnection)+ (delegation::OBDelegation)+ (obreference::OBReference)+ layer::String extends::QualifiedName abstract::Boolean ;
Value ::= (contents::String)+ null::Boolean ;
HostingDefinition ::= OBHostingDefinition ;
 HostingDefinition ::= guestDefinition::QualifiedName hostDefinition::QualifiedName simulationRoot::Boolean ;
Information ::= sdm::SystemDefinitionModel friendlyname::String companyname::String copyright::String trademark::String description::Description comments::String compilerversion::FourPartVersionType ;
RelationshipDefinition ::= CommunicationDefinition ;
 RelationshipDefinition ::= HostingDefinition ;
 RelationshipDefinition ::= ContainmentDefinition ;
 RelationshipDefinition ::= DelegationDefinition ;
 RelationshipDefinition ::= ReferenceDefinition ;
 RelationshipDefinition ::= (objectConstraint::RDObjectConstraint)+ (constraint::RDConstraint)+ (constraintGroup::RDConstraintGroup)+ (flow::RDFlow)+ (connection::RDConnection)+ (hosting::RDHosting)+ (delegation::RDDelegation)+ (reference::RDReference)+ (containment::RDContainment)+ extends::QualifiedName abstract::Boolean ;
FlowMember ::= OBFlow ;
 FlowMember ::= RDFlow ;
 FlowMember ::= (input::Input)+ (output::Output)+ ;
SystemDefinitionModel ::= information::Information (import::Import)+ designData::DesignData settingDefinitions::SettingDefinitions (communicationDefinition::SDMCommunicationDefinition)+ (containmentDefinition::SDMContainmentDefinition)+ (delegationDefinition::SDMDelegationDefinition)+ (referenceDefinition::SDMReferenceDefinition)+ (endpointDefinition::SDMEndpointDefinition)+ (resourceDefinition::SDMResourceDefinition)+ (systemDefinition::SDMSystemDefinition)+ (constraintDefinition::SDMConstraintDefinition)+ (manager::SDMManager)+ nameSpace::NameSpace namespaceIdentity::NamespaceIdentity (documentLanguage::Culture)+ (compilationHash::CompilationHashType)+ ;
ContainmentDefinition ::= SDMContainmentDefinition ;
 ContainmentDefinition ::= OBContainmentDefinition ;
 ContainmentDefinition ::= parentDefinition::QualifiedName memberDefinition::QualifiedName ;
Import ::= sdm::SystemDefinitionModel alias::SimpleName identity::ImportNamespaceIdentity ;
ConstraintGroup ::= OBConstraintGroup ;
 ConstraintGroup ::= RDConstraintGroup ;
 ConstraintGroup ::= OCConstraintGroup ;
 ConstraintGroup ::= RCConstraintGroup ;
 ConstraintGroup ::= CDConstraintGroup ;
 ConstraintGroup ::= (constraint::CGConstraint)+ (relationshipConstraint::CGRelationshipConstraint)+ (objectConstraint::CGObjectConstraint)+ ;
DelegationMember ::= OBDelegation ;
 DelegationMember ::= RDDelegation ;
 DelegationMember ::= proxyMember::Path delegateMember::Path ;
FlowDefinition ::= description::Description designData::DesignData (settingDeclaration::DefSettingDeclaration)+ (settingValue::DefSettingValue)+ (settingValueList::DefSettingValueList)+ name::SimpleName manager::QualifiedName className::String ;
--------------------metamodels::SEE_Design.bgf--------------------
PlusOperator ::= operand1::Expression operand2::Expression ;
UnaryPlusOp ::= operand::Expression ;
Expression ::= Literal ;
 Expression ::= UnaryOperator ;
 Expression ::= BinaryOperator ;
 Expression ::= loggingOn::Boolean logger::Logger ;
BinaryOperator ::= PlusOperator ;
 BinaryOperator ::= MinusOperator ;
 BinaryOperator ::= operand1::Expression operand2::Expression ;
MinusOperator ::= operand1::Expression operand2::Expression ;
UnaryMinusOp ::= operand::Expression ;
NumberExpression ::= value::Integer ;
Logger ::= instance::Logger expression::Expression logFile::LogFile ;
LogFile ::= file::String instance::LogFile logger::Logger ;
--------------------metamodels::SPEM.bgf--------------------
Iteration ::= (artifactUsageNames::ArtifactUsageName)+ goal::Goal precondition::Precondition ;
Phase ::= (artifactUsageNames::ArtifactUsageName)+ goal::Goal precondition::Precondition ;
Lifecycle ::= (artifactUsageNames::ArtifactUsageName)+ goal::Goal precondition::Precondition ;
ProcessDefinitionElement ::= Guidance ;
 ProcessDefinitionElement ::= ArtifactKind ;
 ProcessDefinitionElement ::= WorkItem ;
 ProcessDefinitionElement ::= RoleKind ;
 ProcessDefinitionElement ::= Condition ;
 ProcessDefinitionElement ::= ProcessComponent ;
 ProcessDefinitionElement ::= (guidances::Guidance)+ (processComponents::ProcessComponent)+ ;
ArtifactUsageName ::= isInput::Boolean isOutput::Boolean hasWorkPerArtifact::Boolean artifactKind::ArtifactKind workDefinition::WorkDefinition ;
ArtifactKind ::= (artifactUsageNames::ArtifactUsageName)+ responsible::RoleKind ;
WorkDefinition ::= ActivityKind ;
 WorkDefinition ::= Iteration ;
 WorkDefinition ::= Phase ;
 WorkDefinition ::= Lifecycle ;
 WorkDefinition ::= (artifactUsageNames::ArtifactUsageName)+ goal::Goal precondition::Precondition ;
ActivityKind ::= (performer::RoleKind)+ (assistant::RoleKind)+ ;
--------------------metamodels::SPL.bgf--------------------
ForeachStat ::= iteratorName::String sequenceExp::Expression (statements::Statement)+ ;
VariableDeclaration ::= Argument ;
 VariableDeclaration ::= WhenHeader ;
 VariableDeclaration ::= type::TypeExpression initExp::Expression ;
Argument ::= type::TypeExpression initExp::Expression ;
SequenceType ::= modifier::Modifier type::PrimitiveType size::Integer ;
Event ::= eventId::String (declarations::Declaration)+ (methods::Method)+ ;
OperatorExp ::= opName::String leftExp::Expression rightExp::Expression ;
Registration ::= (declarations::Declaration)+ (sessions::Session)+ ;
ForwardExp ::= isParallel::Boolean exp::Expression ;
ReasonMessageField ::= exp::Expression ;
WithExp ::= exp::Expression (msgFields::MessageField)+ ;
SetStat ::= target::Place setValue::Expression ;
FunctionCall ::= function::FunctionDeclaration (parameters::Expression)+ ;
Service ::= name::String (declarations::Declaration)+ (sessions::Session)+ ;
PropertyCallPlace ::= propName::String source::VariablePlace ;
IfStat ::= condition::Expression (thenStatements::Statement)+ (elseStatements::Statement)+ ;
SelectStat ::= matchedExp::Expression (selectCases::SelectCase)+ selectDefault::SelectDefault ;
PushStat ::= target::Place pushedValue::Expression ;
WhenStat ::= idExp::Variable (whenHeaders::WhenHeader)+ (statements::Statement)+ (elseStatements::Statement)+ ;
StructureProperty ::= name::String type::TypeExpression ;
Dialog ::= (declarations::Declaration)+ (methods::Method)+ ;
WhenHeader ::= headerId::String value::Constant ;
SelectDefault ::= (statements::Statement)+ ;
ReturnStat ::= returnedValue::Expression branch::NamedBranch ;
DefaultBranch ::= (statements::Statement)+ ;
Method ::= type::TypeExpression direction::Direction methodName::MethodName (arguments::Argument)+ (statements::Statement)+ (branches::Branch)+ ;
--------------------metamodels::SQLDDL.bgf--------------------
Table ::= database::Database (referencedBy::ForeignKey)+ (elements::TableElement)+ (parameters::Parameter)+ ;
PrimaryKey ::= isUnique::Boolean name::String (columns::Column)+ ;
SimpleKey ::= isUnique::Boolean name::String (columns::Column)+ ;
ForeignKey ::= referencedTable::Table (referencedColumns::Column)+ ;
Type ::= length::Integer isUnsigned::Boolean ;
Parameter ::= table::Table value::Value ;
Column ::= (referencedBy::ForeignKey)+ name::String type::Type canBeNull::Boolean default::Value (keys::Key)+ ;
--------------------metamodels::SWRC.bgf--------------------
Proceedings ::= editor::Person publisher::Organization organization::Organization month::String number::String volume::String address::String series::String ;
DevelopmentProject ::= name::String carriedOutBy::Organization financedBy::Organization head::AcademicStaff (isAbout::ResearchTopic)+ (member::Person)+ (projectInfo::ProjectReport)+ ;
ResearchProject ::= name::String carriedOutBy::Organization financedBy::Organization head::AcademicStaff (isAbout::ResearchTopic)+ (member::Person)+ (projectInfo::ProjectReport)+ ;
Meeting ::= ProjectMeeting ;
 Meeting ::= title::String (participant::Person)+ ;
Event ::= Conference ;
 Event ::= Workshop ;
 Event ::= Exhibition ;
 Event ::= Lecture ;
 Event ::= Meeting ;
 Event ::= name::String date::String eventTitle::String location::String atEvent::Event hasPartEvent::Event ;
InProceedings ::= editor::Person (author::Person)+ month::String number::Integer pages::String address::String volume::Integer series::String booktitle::String organization::Organization publisher::Organization ;
AcademicStaff ::= Lecturer ;
 AcademicStaff ::= FacultyMember ;
 AcademicStaff ::= (cooperateWith::AcademicStaff)+ editor::Publication headOf::Project headOfGroup::ResearchGroup memberOfPC::Event organizerOrChairOf::Event (publication::Publication)+ (supervises::PhDStudent)+ worksAtProject::ResearchTopic ;
PhDThesis ::= (author::Person)+ school::University month::String address::String type::String ;
Article ::= (author::Person)+ journal::String month::String number::Integer pages::String volume::Integer ;
Institute ::= cooperateWith::Institute (hasParts::ResearchGroup)+ ;
Person ::= Employee ;
 Person ::= AcademicStaff ;
 Person ::= Student ;
 Person ::= address::String name::String email::String fax::String homepage::String phone::String photo::String ;
Unpublished ::= (author::Person)+ month::String ;
ResearchTopic ::= dealWithIn::Project (isWorkedOnBy::AcademicStaff)+ ;
Lecturer ::= (cooperateWith::AcademicStaff)+ editor::Publication headOf::Project headOfGroup::ResearchGroup memberOfPC::Event organizerOrChairOf::Event (publication::Publication)+ (supervises::PhDStudent)+ worksAtProject::ResearchTopic ;
Organization ::= ResearchGroup ;
 Organization ::= Association ;
 Organization ::= Department ;
 Organization ::= Institute ;
 Organization ::= Enterprise ;
 Organization ::= University ;
 Organization ::= location::String name::String (carriesOut::Project)+ (develops::Product)+ (employs::Employee)+ (finances::Project)+ (publishes::Publication)+ (technicalReport::TechnicalReport)+ ;
Booklet ::= (author::Person)+ month::String address::String edition::String howpublished::String ;
TechnicalReport ::= series::String organization::Organization ;
Product ::= SoftwareComponent ;
 Product ::= name::String developedBy::Organization ;
PhDStudent ::= (publication::Publication)+ worksAtProject::Project supervisor::AcademicStaff ;
Exhibition ::= name::String date::String eventTitle::String location::String atEvent::Event hasPartEvent::Event ;
University ::= (hasParts::Department)+ (student::Student)+ ;
MasterThesis ::= (author::Person)+ school::University month::String address::String type::String ;
InBook ::= (author::Person)+ publisher::Organization editor::Person month::String number::Integer pages::String volume::Integer series::String chapter::String type::String address::String ;
Misc ::= month::String howpublished::String ;
Book ::= month::String number::Integer volume::Integer series::String source::String address::String edition::String isbn::String price::String editor::Person publisher::Organization (author::Person)+ ;
Manual ::= (author::Person)+ organization::Organization month::String address::String edition::String ;
ResearchGroup ::= head::AcademicStaff (member::Employee)+ ;
InCollection ::= editor::Person (author::Person)+ publisher::Organization month::String number::Integer pages::String address::String edition::String volume::Integer series::String chapter::String type::String booktitle::String ;
ProjectMeeting ::= title::String (participant::Person)+ ;
Enterprise ::= location::String name::String (carriesOut::Project)+ (develops::Product)+ (employs::Employee)+ (finances::Project)+ (publishes::Publication)+ (technicalReport::TechnicalReport)+ ;
Association ::= location::String name::String (carriesOut::Project)+ (develops::Product)+ (employs::Employee)+ (finances::Project)+ (publishes::Publication)+ (technicalReport::TechnicalReport)+ ;
--------------------metamodels::SQLDML.bgf--------------------
QueryStmtAllCol ::= (tables::Table)+ condition::WhereClause ;
NotExp ::= opName::String valueExp::Expression unused::Expression ;
OrExp ::= opName::String leftExp::Expression rightExp::Expression ;
ViewStatement ::= name::String (columns::ColumnExp)+ query::QueryStmt ;
InExp ::= columnName::String (elements::Predicate)+ ;
ColumnExp ::= alias::String type::DataType ;
LikeExp ::= columnName::String expression::StringValueExp ;
AndExp ::= opName::String leftExp::Expression rightExp::Expression ;
FunctionExp ::= (arguments::Expression)+ name::String ;
DataType ::= name::String ;
InsertStmt ::= tableName::String (values::Expression)+ ;
--------------------metamodels::Scilab.bgf--------------------
See_Also_Item ::= see_Also::See_Also (link::Link)+ ;
Param_Indent ::= param::Param param_Description::Param_Description (param_Item::Param_Item)+ ;
Param_Name ::= (verb::String)+ param_Item::Param_Item ;
Description ::= (itemize::Itemize)+ (description_Indent::Description_Indent)+ ;
Link ::= link::String psppp::PSPPP see_Also_Item::See_Also_Item authors_Item::Authors_Item ;
Man ::= language::String title::String type::String date::String name::String keyword::String exemple::String (meta::Meta)+ ;
Used_Functions ::= Param_Description ;
 Used_Functions ::= Description ;
 Used_Functions ::= Itemize ;
 Used_Functions ::= Item ;
 Used_Functions ::= Section ;
 Used_Functions ::= (verbatim::String)+ (table::Table)+ ;
Short_Description ::= name::String (verb::String)+ ;
Biblio ::= Short_Description ;
 Biblio ::= Used_Functions ;
 Biblio ::= Authors_Item ;
 Biblio ::= (p::P)+ (sp::SP)+ (pp::PP)+ ;
Description_Item ::= label::String description_Indent::Description_Indent ;
Calling_Sequence_Item ::= (calling_Sequence_Item::String)+ calling_Sequence::Calling_Sequence ;
Description_Indent ::= description::Description (description_Item::Description_Item)+ ;
Table ::= (table_New_Row::Table_New_Row)+ used_Functions::Used_Functions ;
Exemple ::= exemple::String xml_space::PreDef ;
PSPPP ::= P ;
 PSPPP ::= SP ;
 PSPPP ::= PP ;
 PSPPP ::= (verb::String)+ (em::String)+ (bd::String)+ (tt::String)+ (a::A)+ (link::Link)+ (img::Img)+ ;
Param ::= target::InOut (param_Indent::Param_Indent)+ ;
Authors_Item ::= (Verb::String)+ (em::String)+ (bd::String)+ (tt::String)+ (verbatim::String)+ label::String (a::A)+ (link::Link)+ authors::Authors (itemize::Itemize)+ ;
Table_New_Row ::= (table_New_Column::Table_New_Column)+ table::Table ;
Param_Description ::= (param_Indent::Param_Indent)+ param_Item::Param_Item ;
Table_New_Column ::= (Verb::String)+ (em::String)+ (bd::String)+ (tt::String)+ table_New_Row::Table_New_Row ;
Param_Item ::= label::String param_Indent::Param_Indent param_Name::Param_Name param_Description::Param_Description ;
Meta ::= meta::String path::String category::String version_CSI::String version_DOC::String author::String man::Man ;
Img ::= src::String psppp::PSPPP ;
Itemize ::= Item ;
 Itemize ::= Section ;
 Itemize ::= label::String item::Item section::Section authors_Item::Authors_Item description::Description ;
A ::= href::String psppp::PSPPP authors_Item::Authors_Item ;
--------------------metamodels::SecureUML.bgf--------------------
Permission ::= (role::Role)+ constraintAssignment::AuthorizationConstraint (actionAssignment::Action)+ ;
Subject ::= Group ;
 Subject ::= User ;
 Subject ::= group::Group (role::Role)+ ;
User ::= group::Group (role::Role)+ ;
Action ::= AtomicAction ;
 Action ::= CompositeAction ;
 Action ::= (permission::Permission)+ resource::Resource (actionHyerarchy::CompositeAction)+ ;
Role ::= (roleHierarchy::Role)+ (subjectAssignment::Subject)+ (permissionAssignment::Permission)+ ;
AtomicAction ::= (permission::Permission)+ resource::Resource (actionHyerarchy::CompositeAction)+ ;
--------------------metamodels::Sharengo.bgf--------------------
Service2BusinessObjectFlow ::= source::String target::String ;
ServiceOperation ::= (BOFlows::Service2BusinessObjectFlow)+ (rules::BusinessRule)+ ;
--------------------metamodels::SeminarSchedulingSystem.bgf--------------------
Date ::= year::Integer month::Integer day::Integer ;
Attendee ::= name::String (offering::Offering)+ ;
Presenter ::= name::String seminarSchedulingSystem::SeminarSchedulingSystem (qualifiedFor::Seminar)+ (offering::Offering)+ ;
Offering ::= is_cancelled::Boolean date::Date (attendee::Attendee)+ presenter::Presenter seminar::Seminar ;
SeminarSchedulingSystem ::= (presenter::Presenter)+ (seminar::Seminar)+ ;
Seminar ::= title::String seminarSchedulingSystem::SeminarSchedulingSystem (qualified::Presenter)+ (offering::Offering)+ ;
--------------------metamodels::SignalFlow.bgf--------------------
AssociationPortBase_PortBase ::= (srcPortBase::PortBase)+ (dstPortBase::PortBase)+ signal::Signal ;
BaseComponent ::= CompoundComponent ;
 BaseComponent ::= PrimitiveComponent ;
 BaseComponent ::= name::String position::String (signal::Signal)+ (outputPort::OutputPort)+ (inputPort::InputPort)+ compoundComponent::CompoundComponent ;
Signal ::= name::String position::String baseComponent::BaseComponent associationPortBase_PortBase::AssociationPortBase_PortBase ;
PrimitiveComponent ::= name::String position::String (signal::Signal)+ (outputPort::OutputPort)+ (inputPort::InputPort)+ compoundComponent::CompoundComponent ;
PortBase ::= InputPort ;
 PortBase ::= LocalPort ;
 PortBase ::= OutputPort ;
 PortBase ::= name::String position::String associationPortBase_PortBasesrc::AssociationPortBase_PortBase associationPortBase_PortBasedst::AssociationPortBase_PortBase ;
CompoundComponent ::= rootFolder::RootFolder (baseComponent::BaseComponent)+ (localPort::LocalPort)+ ;
--------------------metamodels::SimpleAirlineDomain.bgf--------------------
Airline ::= name::String nationality::String (flight::Flight)+ ;
Time ::= year::Integer month::Integer day::Integer hour::Integer minute::Integer second::Integer ;
Airport ::= name::String (departingFlight::Flight)+ (arrivingFlight::Flight)+ ;
Passenger ::= name::String age::Integer gender::Genre needsAssistance::Boolean flight::Flight ;
Flight ::= departTime::Time duration::Time maxnrPassengers::Integer (passenger::Passenger)+ airline::Airline origin::Airport destination::Airport ;
--------------------metamodels::SysML.bgf--------------------
FlowPort ::= isAtomic::Boolean direction::FlowDirection isConjugated::Boolean ;
ValueType ::= Unit ;
 ValueType ::= Dimension ;
 ValueType ::= unit::Unit dimension::Dimension ;
Viewpoint ::= (stakeholders::String)+ purpose::String (concerns::String)+ (languages::String)+ (methods::String)+ ;
InformationFlow ::= ItemFlow ;
 InformationFlow ::= (conveyed::Classifier)+ (source::NamedElement)+ (target::NamedElement)+ ;
RequirementRelated ::= (verifies::Requirement)+ (tracedFrom::Requirement)+ (satisfies::Requirement)+ (refines::Requirement)+ ;
Normal ::= mean::Integer standardDeviation::Integer ;
Allocated ::= (allocatedFrom::NamedElement)+ (allocatedTo::NamedElement)+ ;
Dimension ::= unit::Unit dimension::Dimension ;
Conform ::= target::Viewpoint source::View ;
Interval ::= min::Integer max::Integer ;
Uniform ::= min::Integer max::Integer ;
Unit ::= unit::Unit dimension::Dimension ;
BasicInterval ::= Interval ;
 BasicInterval ::= Uniform ;
 BasicInterval ::= min::Integer max::Integer ;
Requirement ::= text::String id::String (derived::Requirement)+ (derivedFrom::Requirement)+ (satisfiedBy::NamedElement)+ (refinedBy::NamedElement)+ (tracedTo::NamedElement)+ (verifiedBy::TestCase)+ master::Requirement ;
--------------------metamodels::SimpleSBVR.bgf--------------------
RoleBinding ::= occursIn::AtomicFormulation isOf::FactType bindsTo::BindableTarget ;
CategorizationFactType ::= role1::FactTypeRole role2::FactTypeRole ;
BinaryAtomicFormulation ::= roleBinding1::RoleBinding roleBinding2::RoleBinding ;
IsPropertyOfFactType ::= role1::FactTypeRole role2::FactTypeRole ;
Quantification ::= UniversalQuantification ;
 Quantification ::= AtLeastNQuantification ;
 Quantification ::= ExactlyNQuantification ;
 Quantification ::= AtMostNQuantification ;
 Quantification ::= introducedVariable::Variable scopesOver::LogicalFormulation ;
ObjectType ::= specializes::ObjectType (generalizes::ObjectType)+ ;
AssociativeFactType ::= role1::FactTypeRole role2::FactTypeRole ;
BinaryFactType ::= IsPropertyOfFactType ;
 BinaryFactType ::= AssociativeFactType ;
 BinaryFactType ::= CategorizationFactType ;
 BinaryFactType ::= ObjectificationFactType ;
 BinaryFactType ::= role1::FactTypeRole role2::FactTypeRole ;
UniversalQuantification ::= introducedVariable::Variable scopesOver::LogicalFormulation ;
ObjectificationFactType ::= role1::FactTypeRole role2::FactTypeRole ;
--------------------metamodels::SimulinkStateFlow.bgf--------------------
Annotation ::= text::String block::Block ;
System ::= name::String simulink::Simulink blocks::Block lines::Line (subSystem::System)+ ;
Block ::= Primitive ;
 Block ::= Reference ;
 Block ::= description::String name::String priority::String natagme::String blockType::String (lines::Line)+ (parameters::Parameter)+ (annotations::Annotation)+ (blockRefs::BlockRef)+ system::System ;
Reference ::= sourceBlock::String sourceType::String ;
Parameter ::= value::String block::Block ;
Primitive ::= deadLine::String period::String executionTime::String ;
Line ::= name::String block::Block system::System ;
--------------------metamodels::SoftwareQualityControl.bgf--------------------
Control ::= c_controlsSequence::ControlsSequence responsible::String component::String developmentPhase::String scope::String date::DateType controlledElt::String eltRef::String eltAuthor::String formRef::String type::ControlType ;
DateType ::= day::Integer month::Integer year::Integer ;
Bug ::= b_bugTracking::BugTracking number::Integer componentVersion::String description::String status::BugStatusType originator::String responsible::String commentsAnswers::String openDate::String closeDate::String ;
--------------------metamodels::SyncCharts.bgf--------------------
SimpleState ::= isFinal::Boolean ;
CompositeState ::= canTerminate::Boolean isSuspendable::Boolean (stg::Stg)+ ;
Stg ::= withFinal::Boolean compositeState::CompositeState (arc::Arc)+ (referenceState::ReferenceState)+ ;
ReferenceState ::= CompositeState ;
 ReferenceState ::= subSyncChart::SyncChart containers::Stg ;
SyncChart ::= context::ModelElement (referenceState::ReferenceState)+ ;
--------------------metamodels::Trace.bgf--------------------
Call ::= level::Level (indexes::Index)+ methodName::String DBAccessesNumber::Integer DBRowsNumber::Integer CPUTime::Integer ;
Trace ::= (levels::Level)+ name::String ;
Level ::= trace::Trace (calls::Call)+ ;
--------------------metamodels::TroposActorConcept.bgf--------------------
Resource ::= use::Actor dependencyWR::Dependency dependencyR::Dependency ;
HardGoal ::= wanter::Actor (plan::Plan)+ (dependencyWG::Dependency)+ (dependencyG::Dependency)+ ;
SoftGoal ::= wanter::Actor (plan::Plan)+ (dependencyWG::Dependency)+ (dependencyG::Dependency)+ ;
Dependency ::= dependee::Actor depender::Actor goal::Goal WhyG::Goal WhyR::Resource resourceD::Resource WhyP::Plan plan::Plan ;
Plan ::= isFulfilled::Goal capableOf::Actor (dependencyWP::Dependency)+ (dependencyP::Dependency)+ ;
Actor ::= (dependencyE::Dependency)+ (dependencyR::Dependency)+ (goal::Goal)+ (plan::Plan)+ (resource::Resource)+ ;
Goal ::= SoftGoal ;
 Goal ::= HardGoal ;
 Goal ::= wanter::Actor (plan::Plan)+ (dependencyWG::Dependency)+ (dependencyG::Dependency)+ ;
--------------------metamodels::TroposGoalAndPlanConcepts.bgf--------------------
MeansEnd ::= meansR::Resource means::Goal end::Goal PointOfView::Actor meansP::Plan ;
OrDecLink ::= booleanDecompositionB::BooleanDecomposition target::Goal targetP::Plan ;
Plan ::= (meansEndP::MeansEnd)+ booleanDecompositionP::BooleanDecomposition (booleanDecLinkP::BooleanDecLink)+ ;
AndDecLink ::= booleanDecompositionB::BooleanDecomposition target::Goal targetP::Plan ;
Actor ::= (decomposition::Decomposition)+ (contribution::Contribution)+ (meansEnd::MeansEnd)+ ;
BooleanDecLink ::= AndDecLink ;
 BooleanDecLink ::= OrDecLink ;
 BooleanDecLink ::= booleanDecompositionB::BooleanDecomposition target::Goal targetP::Plan ;
Goal ::= (contributionR::Contribution)+ (contributionD::Contribution)+ (meansEndS::MeansEnd)+ (meansEndD::MeansEnd)+ booleanDecomposition::BooleanDecomposition (booleanDecLink::BooleanDecLink)+ ;
BooleanDecomposition ::= type::String root::Goal rootP::Plan (booleanDecLinkD::BooleanDecLink)+ ;
Contribution ::= metric::String contributer::Goal contributed::Goal PointOfView::Actor ;
--------------------metamodels::UEML.bgf--------------------
Activity ::= (resourceRole::ResourceRole)+ (child::Activity)+ parent::Activity (hasOutput::OutputPort)+ (hasInput::InputPort)+ ;
Resource ::= MaterialResource ;
 Resource ::= HumanResource ;
 Resource ::= carries::ResourceFlow (plays::ResourceRole)+ ;
UEMLObject ::= UEMLModel ;
 UEMLObject ::= Port ;
 UEMLObject ::= Flow ;
 UEMLObject ::= Activity ;
 UEMLObject ::= Object ;
 UEMLObject ::= has::Geometry model::UEMLModel ;
AssociationConnector ::= (origin::Anchor)+ (target::Anchor)+ classAssociation::Flow ;
ConstraintFlow ::= (carries::InformationObject)+ ;
HumanResource ::= carries::ResourceFlow (plays::ResourceRole)+ ;
TriggerFlow ::= (carries::InformationObject)+ ;
Anchor ::= OutputPort ;
 Anchor ::= InputPort ;
 Anchor ::= ConnectionOperator ;
 Anchor ::= target::AssociationConnector origin::AssociationConnector ;
MaterialResource ::= carries::ResourceFlow (plays::ResourceRole)+ ;
ResourceRole ::= (resourcePlays::Resource)+ roleQualifier::RoleType in::Activity ;
ConnectionOperator ::= target::AssociationConnector origin::AssociationConnector ;
--------------------metamodels::TroposIntegratingActorConcept.bgf--------------------
Agent ::= occupy::Position (play::Role)+ ;
--------------------metamodels::UDDI_meta-model_fragment.bgf--------------------
TModel ::= (overviewDocuments::OverviewDocument)+ identifierBag::IdentifierBag ;
BusinessEntity ::= (businessContacts::BusinessContact)+ (businessServices::BusinessService)+ identifierBag::IdentifierBag ;
--------------------metamodels::UEMLExtended.bgf--------------------
Process ::= child::Activity (fulfills::Contract)+ realises::Service ;
Activity ::= Process ;
 Activity ::= Task ;
 Activity ::= (resourceRole::ResourceRole)+ parent::Process (hasOutput::OutputPort)+ (hasInput::InputPort)+ activityType::ActivityType ;
Resource ::= PassiveObject ;
 Resource ::= Service ;
 Resource ::= Agent ;
 Resource ::= carries::ResourceFlow (plays::ResourceRole)+ resourceType::ResourceType (commitment::Commitment)+ ;
UEMLObject ::= UEMLModel ;
 UEMLObject ::= Port ;
 UEMLObject ::= Flow ;
 UEMLObject ::= Object ;
 UEMLObject ::= Activity ;
 UEMLObject ::= has::Geometry model::UEMLModel ;
FlowObject ::= Event ;
 FlowObject ::= Activity ;
 FlowObject ::= ConnectionOperator ;
 FlowObject ::= target::AssociationConnector origin::AssociationConnector ;
AssociationConnector ::= (origin::FlowObject)+ (target::FlowObject)+ classAssociation::Flow ;
ConstraintFlow ::= (carries::InformationObject)+ ;
HumanResource ::= obliger::Commitment claimer::Commitment has_parties::Contract ;
Organisation ::= obliger::Commitment claimer::Commitment has_parties::Contract ;
Event ::= target::AssociationConnector origin::AssociationConnector ;
Software ::= obliger::Commitment claimer::Commitment has_parties::Contract ;
TriggerFlow ::= (carries::InformationObject)+ ;
Agent ::= HumanResource ;
 Agent ::= Software ;
 Agent ::= Organisation ;
 Agent ::= obliger::Commitment claimer::Commitment has_parties::Contract ;
Commitment ::= (resource::Resource)+ task::Task agentO::Agent agentC::Agent contract::Contract ;
ResourceRole ::= (resourcePlays::Resource)+ roleQualifier::RoleType in::Activity ;
Contract ::= (process::Process)+ agent::Agent (collection_of::Commitment)+ ;
ConnectionOperator ::= target::AssociationConnector origin::AssociationConnector ;
--------------------metamodels::UEMLExtensionCapturingAgents.bgf--------------------
Activity ::= (resourceRole::ResourceRole)+ (child::Activity)+ parent::Activity (hasOutput::OutputPort)+ (hasInput::InputPort)+ ;
Resource ::= PassiveObject ;
 Resource ::= Agent ;
 Resource ::= carries::ResourceFlow (plays::ResourceRole)+ (commitment::Commitment)+ ;
UEMLObject ::= UEMLModel ;
 UEMLObject ::= Port ;
 UEMLObject ::= Flow ;
 UEMLObject ::= Activity ;
 UEMLObject ::= Object ;
 UEMLObject ::= has::Geometry model::UEMLModel ;
AssociationConnector ::= (origin::Anchor)+ (target::Anchor)+ classAssociation::Flow ;
ConstraintFlow ::= (carries::InformationObject)+ ;
TriggerFlow ::= (carries::InformationObject)+ ;
Anchor ::= OutputPort ;
 Anchor ::= InputPort ;
 Anchor ::= ConnectionOperator ;
 Anchor ::= target::AssociationConnector origin::AssociationConnector ;
ResourceRole ::= (resourcePlays::Resource)+ roleQualifier::RoleType in::Activity ;
ConnectionOperator ::= target::AssociationConnector origin::AssociationConnector ;
--------------------metamodels::UEMLExtensionCapturingSocialEffects.bgf--------------------
Process ::= child::Activity (fulfills::Contract)+ realises::Service ;
Activity ::= Process ;
 Activity ::= Task ;
 Activity ::= (resourceRole::ResourceRole)+ parent::Process hasOutput::OutputPort ;
Resource ::= MaterialResource ;
 Resource ::= HumanResource ;
 Resource ::= Service ;
 Resource ::= Agent ;
 Resource ::= carries::ResourceFlow (plays::ResourceRole)+ ;
UEMLObject ::= UEMLModel ;
 UEMLObject ::= Port ;
 UEMLObject ::= Flow ;
 UEMLObject ::= Activity ;
 UEMLObject ::= Object ;
 UEMLObject ::= has::Geometry model::UEMLModel ;
AssociationConnector ::= (origin::Anchor)+ (target::Anchor)+ classAssociation::Flow ;
InputPort ::= target::AssociationConnector origin::AssociationConnector ;
ConstraintFlow ::= (carries::InformationObject)+ ;
HumanResource ::= carries::ResourceFlow (plays::ResourceRole)+ ;
TriggerFlow ::= (carries::InformationObject)+ ;
Commitment ::= task::Task agentO::Agent agentC::Agent contract::Contract ;
Agent ::= obliger::Commitment claimer::Commitment has_parties::Contract ;
Anchor ::= OutputPort ;
 Anchor ::= InputPort ;
 Anchor ::= ConnectionOperator ;
 Anchor ::= target::AssociationConnector origin::AssociationConnector ;
MaterialResource ::= carries::ResourceFlow (plays::ResourceRole)+ ;
ResourceRole ::= (resourcePlays::Resource)+ roleQualifier::RoleType in::Activity ;
Contract ::= (process::Process)+ agent::Agent (collection_of::Commitment)+ ;
ConnectionOperator ::= target::AssociationConnector origin::AssociationConnector ;
--------------------metamodels::UEMLExtensionDynamicAspects.bgf--------------------
Activity ::= Task ;
 Activity ::= (resourceRole::ResourceRole)+ parent::Process (hasOutput::OutputPort)+ (hasInput::InputPort)+ ;
Resource ::= MaterialResource ;
 Resource ::= HumanResource ;
 Resource ::= carries::ResourceFlow (plays::ResourceRole)+ ;
UEMLObject ::= UEMLModel ;
 UEMLObject ::= Port ;
 UEMLObject ::= Flow ;
 UEMLObject ::= Object ;
 UEMLObject ::= Activity ;
 UEMLObject ::= has::Geometry model::UEMLModel ;
FlowObject ::= Event ;
 FlowObject ::= Activity ;
 FlowObject ::= ConnectionOperator ;
 FlowObject ::= target::AssociationConnector origin::AssociationConnector ;
AssociationConnector ::= (origin::FlowObject)+ (target::FlowObject)+ classAssociation::Flow ;
ConstraintFlow ::= (carries::InformationObject)+ ;
HumanResource ::= carries::ResourceFlow (plays::ResourceRole)+ ;
Event ::= target::AssociationConnector origin::AssociationConnector ;
TriggerFlow ::= (carries::InformationObject)+ ;
Task ::= (resourceRole::ResourceRole)+ parent::Process (hasOutput::OutputPort)+ (hasInput::InputPort)+ ;
MaterialResource ::= carries::ResourceFlow (plays::ResourceRole)+ ;
ResourceRole ::= (resourcePlays::Resource)+ roleQualifier::RoleType in::Activity ;
ConnectionOperator ::= target::AssociationConnector origin::AssociationConnector ;
--------------------metamodels::UEMLExtensionModelingAspects.bgf--------------------
Activity ::= (resourceRole::ResourceRole)+ (child::Activity)+ parent::Activity (hasOutput::OutputPort)+ (hasInput::InputPort)+ activityType::ActivityType ;
Resource ::= MaterialResource ;
 Resource ::= HumanResource ;
 Resource ::= carries::ResourceFlow (plays::ResourceRole)+ resourceType::ResourceType ;
UEMLObject ::= UEMLModel ;
 UEMLObject ::= Port ;
 UEMLObject ::= Flow ;
 UEMLObject ::= Activity ;
 UEMLObject ::= Object ;
 UEMLObject ::= has::Geometry model::UEMLModel ;
AssociationConnector ::= (origin::Anchor)+ (target::Anchor)+ classAssociation::Flow ;
ConstraintFlow ::= (carries::InformationObject)+ ;
HumanResource ::= carries::ResourceFlow (plays::ResourceRole)+ resourceType::ResourceType ;
TriggerFlow ::= (carries::InformationObject)+ ;
Anchor ::= OutputPort ;
 Anchor ::= InputPort ;
 Anchor ::= ConnectionOperator ;
 Anchor ::= target::AssociationConnector origin::AssociationConnector ;
MaterialResource ::= carries::ResourceFlow (plays::ResourceRole)+ resourceType::ResourceType ;
ResourceRole ::= (resourcePlays::Resource)+ roleQualifier::RoleType in::Activity ;
ConnectionOperator ::= target::AssociationConnector origin::AssociationConnector ;
--------------------metamodels::USECASE1.bgf--------------------
Context ::= (preCondition::PreCondition)+ (postCondition::PostCondition)+ (useCase::UseCase)+ ;
User ::= (useCase::UseCase)+ (actor::Actor)+ ;
Parameter ::= (stimilus::Stimilus)+ (responce::Responce)+ ;
UseCase ::= context::Context (service::Service)+ (user::User)+ (actor::Actor)+ ;
Action ::= (episode::Episode)+ ;
Service ::= (useCase::UseCase)+ (goal::Goal)+ (task::Task)+ ;
Actor ::= (useCase::UseCase)+ (goal::Goal)+ (user::User)+ ;
Goal ::= (service::Service)+ (actor::Actor)+ ;
--------------------metamodels::USECASE2.bgf--------------------
UseCase ::= Manage ;
 UseCase ::= (scenario::ScenarioDescription)+ (condition::Condition)+ (interacter::Role)+ (specified_by::FunctionnelRequirement)+ (scoped_by::NonFunctionnelRequirement)+ (meet_by::Goal)+ ;
SystemRole ::= (interacted_with::UseCase)+ ;
Pre ::= (constrained_with::UseCase)+ ;
HumanRole ::= (interacted_with::UseCase)+ ;
Post ::= (constrained_with::UseCase)+ ;
EventRole ::= (interacted_with::UseCase)+ ;
--------------------metamodels::WSDL.bgf--------------------
BindingFault ::= operation::BindingOperation binding::Fault ;
Param ::= Input ;
 Param ::= Output ;
 Param ::= name::String message::Message ;
PortType ::= name::String (operations::Operation)+ (bindings::Binding)+ ;
Message ::= name::String (params::Param)+ (faults::Fault)+ (parts::Part)+ ;
Operation ::= name::String input::Input output::Output type::PortType (faults::Fault)+ ;
Binding ::= name::String (ports::Port)+ type::PortType (operations::BindingOperation)+ ;
Service ::= name::String (ports::Port)+ ;
Part ::= name::String message::Message ;
Fault ::= name::String operation::Operation message::Message ;
BindingOperation ::= name::String bind::Binding binding::Operation input::StartWithExtensions output::StartWithExtensions (faults::BindingFault)+ ;
Port ::= name::String service::Service binding::Binding ;
--------------------metamodels::UnifiedOntologyLanguage.bgf--------------------
Fact ::= object::Node subject::Resource predicate::Resource context::Package ;
--------------------metamodels::UnixFS.bgf--------------------
FileSystemRoot ::= (contents::File)+ ;
TextFile ::= owner::String group::String ;
--------------------metamodels::UsiXML-task.bgf--------------------
BinaryOperator ::= type::BinaryType leftTask::Task rightTask::Task ;
Task ::= id::String name::String category::String frequency::Integer importance::Integer structurationLevel::Integer complexityLevel::Integer criticity::Integer centrality::Integer terminationValue::String taskType::String taskItem::String (decompositionTasks::Task)+ decomposedTask::Task leftOperator::BinaryOperator rightOperator::BinaryOperator decoration::UnaryOperator ;
UnaryOperator ::= FiniteInteration ;
 UnaryOperator ::= UnaryType::UnaryType decoratedTask::Task ;
--------------------metamodels::WSLink.bgf--------------------
Network ::= (services::Services)+ name::String ;
RSS ::= name::String URL::String descriptions::String ;
--------------------metamodels::WTIP_SimpleClass.bgf--------------------
Attribute ::= name::String is_primary::Boolean type::Classifier ;
PrimitiveDataType ::= name::String ;
Class ::= is_persistent::Boolean parent::Class (attrs::Attribute)+ ;
Association ::= name::String src::Class dest::Class ;
--------------------metamodels::WTIP_SimpleRDBMS.bgf--------------------
Table ::= name::String (fkeys::FKey)+ (pkey::Column)+ (cols::Column)+ ;
FKey ::= references::Table (cols::Column)+ ;
Column ::= name::String type::String ;
--------------------metamodels::WebApplications_AbstractModel.bgf--------------------
ServerPage ::= useBusinessLogic::Server/BusinessLogic useDesignTemplate::Server/DesignTemplate (generates::Client/ClientPage)+ (link::HyperLink)+ ;
--------------------metamodels::WfMC.bgf--------------------
WorkflowProcessActivity ::= processDefinition::WorkflowProcessDefinition (applicationDeclarations::WorkflowApplicationDeclaration)+ (revelantDatas::WorkflowRelevantData)+ (participantSpecifications::WorkflowParticipantSpecification)+ to_transitionInformation::TransitionInformation from_transitionInformation::TransitionInformation ;
WorkflowParticipantSpecification ::= processDefinition::WorkflowProcessDefinition (revelantDatas::WorkflowRelevantData)+ (processActivities::WorkflowProcessActivity)+ ;
WorkflowApplicationDeclaration ::= processDefinition::WorkflowProcessDefinition (processActivities::WorkflowProcessActivity)+ (revelantDatas::WorkflowRelevantData)+ ;
TransitionInformation ::= processDefinition::WorkflowProcessDefinition (revelantDatas::WorkflowRelevantData)+ to_processActivity::WorkflowProcessActivity from_processActivity::WorkflowProcessActivity ;
WorkflowRelevantData ::= processDefinition::WorkflowProcessDefinition (applicationDeclarations::WorkflowApplicationDeclaration)+ (processActivities::WorkflowProcessActivity)+ (participantSpecifications::WorkflowParticipantSpecification)+ (transitionInformations::TransitionInformation)+ ;
WorkflowProcessDefinition ::= (participantSpecificatons::WorkflowParticipantSpecification)+ (revelantDatas::WorkflowRelevantData)+ (applicationDeclarations::WorkflowApplicationDeclaration)+ (processActivities::WorkflowProcessActivity)+ (transitionInformations::TransitionInformation)+ ;
--------------------metamodels::WebApplications_ConceptualModel.bgf--------------------
LogicElement ::= (uses::Server/UseCase)+ generatedBy::Server/LogicElement next::Server/LogicElement ;
ServerPageModule ::= (contains::Server/ServerPage)+ link::Server/Link containsModule::Server/DesignModule ;
LogicInterface ::= represents::Server/LogicModule generatedBy::Server/Renderer ;
Data ::= (renderer::Server/Renderer)+ (persist::Server/Processor)+ (uses::Server/Processor)+ (computes::Server/Processor)+ ;
Link ::= page::Server/ServerPage posts::Server/Data ;
LogicModule ::= (useCase::Server/UseCase)+ (logicElement::Server/LogicElement)+ ;
ClientPageModule ::= consistsOf::Client/ClientPage representsSMP::Server/ServerPageModule ;
Processor ::= (persistentData::Server/Data)+ (inputData::Server/Data)+ (outputData::Server/Data)+ ;
ServerPage ::= (link::HyperLink)+ (generates::Client/ClientPage)+ (module::Server/ServerPageModule)+ ;
--------------------metamodels::WorkDefinitions.bgf--------------------
Activity ::= iteration::Iteration (steps::Step)+ ;
Iteration ::= phase::Phase (activities::Activity)+ ;
Phase ::= lifeCycle::Lifecycle (iterations::Iteration)+ ;
WorkDefinition ::= Lifecycle ;
 WorkDefinition ::= Phase ;
 WorkDefinition ::= Iteration ;
 WorkDefinition ::= Activity ;
 WorkDefinition ::= (parentWorks::WorkDefinition)+ (subWorks::WorkDefinition)+ owner::ProcessPerformer ;
--------------------metamodels::XAML-Perspective.bgf--------------------
Page ::= (xmlns::NameSpace)+ title::String graphContainer::GraphicalContainer pageResources::PageResource ;
Square3D ::= transform::String material::String name::Name namespace::NameSpace ;
Box3D ::= transform::String material::String name::Name namespace::NameSpace ;
NameSpace ::= namespace::String identifier::String ;
UI3Delement ::= Box3D ;
 UI3Delement ::= Square3D ;
 UI3Delement ::= transform::String material::String name::Name ;
--------------------metamodels::XAML-ResourceDictionary.bgf--------------------
TranslateTransform3D ::= OffsetX::Double OffsetY::Double OffsetZ::Double ;
NameSpace ::= namespace::String identifier::String ;
ResourceDictionary ::= (resourcegroups::ResourceGroup)+ (xmlns::NameSpace)+ ;
ScaleTransform3D ::= ScaleX::Double ScaleY::Double ScaleZ::Double ;
RotateTransform3D ::= CenterX::Double CenterY::Double rotation::RotateTransformat3DRotation ;
AxisAngleRotation3D ::= angle::Integer axis::String ;
--------------------metamodels::XMorphLanguage_abstractSyntax.bgf--------------------
NotTerm ::= (term::Term)+ ;
Key ::= (property::MOF::Property)+ transformation::Transformation ;
MofInstance ::= isExactly::Boolean typeName::Expression instance::Expression ;
PatternDefn ::= scope::PatternScope (parameter::PatternVar)+ body::Term ;
PatternUse ::= tRuleST::TRule (arg::Expression)+ ;
PatternVar ::= query::Query patternDefn::PatternDefn ;
TRuleVar ::= (superseder::TRuleVar)+ (superseded::TRuleVar)+ (extended::TRuleVar)+ (extender::TRuleVar)+ ;
StringConstant ::= representation::String ;
IntConstant ::= representation::String ;
CollectionExpr ::= unique::Boolean ordered::Boolean ;
TrackingUse ::= featureNames::String tracking::MOF::Class ;
TRule ::= (superseded::TRule)+ (superseder::TRule)+ transformation::Transformation (extended::TRule)+ (extender::TRule)+ term::Term (tgt::SimpleTerm)+ ;
OrTerm ::= (term::Term)+ ;
BooleanConstant ::= representation::String ;
FeatureExpr ::= collect::String featureName::String ;
MofOrder ::= lesser::Expression instance::Expression greater::Expression ;
Transformation ::= (keys::Key)+ (tRule::TRule)+ ;
IfTerm ::= (term::Term)+ ;
Query ::= term::Term (parameter::PatternVar)+ ;
EnumConstant ::= representation::String ;
AndTerm ::= (term::Term)+ ;
--------------------metamodels::XPDL-1.14.bgf--------------------
EndEvent ::= triggerKind::TriggerKind implementation::ImplementationKind trigger::Trigger ;
Group ::= textAnnotation::String group::String object::Object dataObject::DataObject ;
Category ::= id::String name::String ;
TaskReceive ::= instantiate::Boolean implementation::ImplementationKind ;
BlockActivity ::= activitySet::ActivitySet startActivity::Activity ;
Pool ::= orientation::OrientationKind boundaryVisible::Boolean (lanes::Lane)+ object::Object participant::Participant process::Process ;
StartEvent ::= triggerKind::TriggerKind implementation::ImplementationKind trigger::Trigger ;
Transition ::= quantity::Integer object::Object to::Activity from::Activity ;
MessageFlow ::= targetActivity::Activity sourceActivity::Activity targetPool::Pool sourcePool::Pool object::Object ;
ActivitySet ::= adHoc::Boolean adHocOrdering::AdHocOrderingKind adHocCompletionCondition::String defaultStartActivity::Activity (activities::Activity)+ (transitions::Transition)+ object::Object ;
Participant ::= id::String name::String ;
Artifact ::= DataObject ;
 Artifact ::= Group ;
 Artifact ::= Annotation ;
 Artifact ::= textAnnotation::String group::String object::Object dataObject::DataObject ;
DataField ::= isArray::Boolean correlation::Boolean dataType::TypeDeclaration ;
Process ::= accessLevel::AccessLevelKind processType::ProcessTypeKind status::StatusKind suppressJoinFailure::Boolean enableInstanceCompensation::Boolean adHoc::Boolean adHocOrdering::AdHocOrderingKind adHocCompletionCondition::String (participant::Participant)+ (applications::Application)+ dataField::DataField (activitySets::ActivitySet)+ (activities::Activity)+ (transitions::Transition)+ object::Object defaultStartActivitySet::ActivitySet defaultStartActivity::Activity ;
Annotation ::= textAnnotation::String group::String object::Object dataObject::DataObject ;
Activity ::= Task ;
 Activity ::= Route ;
 Activity ::= SubFlow ;
 Activity ::= BlockActivity ;
 Activity ::= Event ;
 Activity ::= isStartActivity::Boolean status::StatusKind startMode::ModeKind finishMode::ModeKind startQuantity::Integer isATransaction::Boolean (dataFields::DataField)+ object::Object ;
SubFlow ::= execution::ExecutionKind instanceDataField::String packageRef::Package startActivitySet::ActivitySet startActivity::Activity ;
TriggerTimer ::= timeDate::String timeCycle::String ;
Lane ::= object::Object parentLane::Lane parentPool::Pool ;
Script ::= type::String version::String grammar::String ;
Route ::= Gateway ;
 Route ::= gatewayType::GatewayTypeKind instantiate::Boolean markerVisiable::Boolean ;
DataObject ::= state::String requiredForStart::Boolean producedAtCompletion::Boolean (dataFields::DataField)+ ;
Package ::= script::Script (externalPackages::ExternalPackage)+ (typeDeclarations::TypeDeclaration)+ (participants::Participant)+ (applications::Application)+ (dataFields::DataField)+ (pools::Pool)+ (messageFlows::MessageFlow)+ (associations::Association)+ (artifacts::Artifact)+ (workflowProcesses::Process)+ ;
Gateway ::= gatewayType::GatewayTypeKind instantiate::Boolean markerVisiable::Boolean ;
Association ::= associationDirection::AssociationDirectionKind targetArtifact::Artifact sourceArtifact::Artifact targetPool::Pool sourcePool::Pool targetActivity::Activity sourceActivity::Activity object::Object ;
ExternalReference ::= xref::String location::String namespace::String ;
TypeDeclaration ::= id::String name::String ;
--------------------metamodels::XUL-Interactorl.bgf--------------------
TextBox ::= multiline::Boolean value::String ;
Radio ::= id::String label::String selected::Boolean disabled::Boolean ;
Event ::= onClick ;
 Event ::= (functionCallParameters::Parameter)+ functionCalledName::String name::String ;
row ::= (xulInteractors::Interactor)+ ;
Interactor ::= Radio ;
 Interactor ::= ListItem ;
 Interactor ::= MenuItem ;
 Interactor ::= Containement ;
 Interactor ::= Container ;
 Interactor ::= flex::Integer id::String stat::String style::String (events::Event)+ ;
Function ::= name::String functionUIModel::UIModel body::String ;
HeaderCss ::= ref::String type::String ;
column ::= (xulInteractors::Interactor)+ ;
vbox ::= (xulInteractors::Interactor)+ ;
UIModel ::= windows::Windows (functions::Function)+ ;
Label ::= value::String control::String ;
Button ::= tooltiptext::String image::String ;
ListItem ::= label::String value::String ;
TabPanel ::= id::String orient::Orients ;
Containement ::= Button ;
 Containement ::= Image ;
 Containement ::= RadioGroup ;
 Containement ::= ListBox ;
 Containement ::= MenuList ;
 Containement ::= TabBox ;
 Containement ::= TextBox ;
 Containement ::= Spacer ;
 Containement ::= Label ;
 Containement ::= Grid ;
 Containement ::= CheckBox ;
 Containement ::= Caption ;
 Containement ::= Description ;
 Containement ::= style::String accesskey::String class::String maxlength::Integer label::String orient::Orients minlength::String onclick::String disabled::String ;
ListBox ::= rows::Integer (listitems::ListItem)+ ;
Spacer ::= style::String accesskey::String class::String maxlength::Integer label::String orient::Orients minlength::String onclick::String disabled::String ;
GroupBox ::= (xulInteractors::Interactor)+ ;
onClick ::= (functionCallParameters::Parameter)+ functionCalledName::String name::String ;
Parameter ::= value::String name::String ;
Grid ::= (columns::column)+ (rows::row)+ ;
hbox ::= (xulInteractors::Interactor)+ ;
Windows ::= id::String title::String orient::Orients style::String (headers::HeaderCss)+ (headersJScript::HeaderJScript)+ ;
--------------------metamodels::bmmOmg.bgf--------------------
Influencer ::= Regulation ;
 Influencer ::= (categorizingInfluencerCategory::InfluencerCategory)+ (sourceInfluencingOrganization::InfluencingOrganization)+ (judgingAssessment::Assessment)+ (recognizingOrganizationUnit::OrganizationUnit)+ ;
BusinessRule ::= (effectingTactic::Tactic)+ (guidedBusinessProcess::BusinessProcess)+ (baseBusinessPolicy::BusinessPolicy)+ ;
FixedAsset ::= Offering ;
 FixedAsset ::= (usingOffering::Offering)+ (providedResource::Resource)+ ;
End ::= DesiredResult ;
 End ::= Vision ;
 End ::= (judgingAssessment::Assessment)+ (definingOrganizationUnit::OrganizationUnit)+ ;
Tactic ::= (implementedStrategy::Strategy)+ (enforcedBusinessRule::BusinessRule)+ ;
DesiredResult ::= Goal ;
 DesiredResult ::= Objective ;
 DesiredResult ::= (moreSpecificDesiredResult::DesiredResult)+ (broaderDesiredResult::DesiredResult)+ (supportingDirective::Directive)+ (supportingCourseOfAction::CourseOfAction)+ ;
OrganizationUnit ::= (definedEnd::End)+ (managedBusinessProces::BusinessProcess)+ (managedLiability::Liability)+ (managedAsset::Asset)+ (determiningStrategy::Strategy)+ (recognizedInfluencer::Influencer)+ (internalInfluencingOrganization::InfluencingOrganization)+ (madeAssessment::Assessment)+ (establishedMeans::Means)+ ;
Goal ::= (quantifyingObjective::Objective)+ amplifiedVision::Vision ;
Strategy ::= (determinedOrganizationUnit::OrganizationUnit)+ (plannedMission::Mission)+ (implementingTactic::Tactic)+ ;
BusinessPolicy ::= (moreSpecificBusinessPolicy::BusinessPolicy)+ (broaderBusinessPolicy::BusinessPolicy)+ (derivedBusinessRule::BusinessRule)+ (governedBusinessProcess::BusinessProcess)+ ;
Asset ::= Resource ;
 Asset ::= FixedAsset ;
 Asset ::= Offering ;
 Asset ::= (deployingCourseOfAction::CourseOfAction)+ (governingDirective::Directive)+ (responsibleOrganizationUnit::OrganizationUnit)+ (managingBusinessProcess::BusinessProcess)+ ;
Risk ::= (identifyingAssessment::Assessment)+ (motivatedDirective::Directive)+ ;
BusinessProcess ::= (deliveredOffering::Offering)+ (realizedCourseOfAction::CourseOfAction)+ (managedAsset::Asset)+ (governingBusinessPolicy::BusinessPolicy)+ guidingBusinessRule::BusinessRule (responsibleOrganizationUnit::OrganizationUnit)+ ;
Directive ::= BusinessPolicy ;
 Directive ::= BusinessRule ;
 Directive ::= (supportedDesiredResult::DesiredResult)+ (governedCourseOfAction::CourseOfAction)+ (derivedCourseOfAction::CourseOfAction)+ (governedAsset::Asset)+ (motivatingPotentialImpact::PotentialImpact)+ (directiveRegulation::Regulation)+ (motivatingAssessment::Assessment)+ ;
Resource ::= (providingFixedAsset::FixedAsset)+ (requiringOffering::Offering)+ (claimingLiability::Liability)+ ;
Means ::= Directive ;
 Means ::= CourseOfAction ;
 Means ::= Mission ;
 Means ::= (establishingOrganizationUnit::OrganizationUnit)+ (judgingAssessment::Assessment)+ ;
PotentialReward ::= (identifyingAssessment::Assessment)+ (motivatedDirective::Directive)+ ;
Liability ::= (claimedResource::Resource)+ (responsibleOrganizationUnit::OrganizationUnit)+ (dischargingCourseOfAction::CourseOfAction)+ ;
Mission ::= operativeVision::Vision (componentStrategy::Strategy)+ ;
Vision ::= (amplifyingGoal::Goal)+ (deliveringMission::Mission)+ ;
CourseOfAction ::= Tactic ;
 CourseOfAction ::= Strategy ;
 CourseOfAction ::= (enabledCourseOfAction::CourseOfAction)+ (enablingCourseOfAction::CourseOfAction)+ (moreSpecficCourseOfAction::CourseOfAction)+ (broaderCourseOfAction::CourseOfAction)+ (supportedDesiredResult::DesiredResult)+ (definedOffering::Offering)+ (dischargedLiability::Liability)+ realizingBusinessProcess::BusinessProcess (governingDirective::Directive)+ (baseDirective::Directive)+ (deployedAsset::Asset)+ ;
Offering ::= (definingCourseOfAction::CourseOfAction)+ (usedAsset::FixedAsset)+ (requiredResource::Resource)+ (deliveringBusinessProcess::BusinessProcess)+ ;
InfluencingOrganization ::= (categorizingOrganizationCategory::OrganizationCategory)+ influencingOrganizationUnit::OrganizationUnit (providedInfluencer::Influencer)+ ;
PotentialImpact ::= PotentialReward ;
 PotentialImpact ::= Risk ;
 PotentialImpact ::= (identifyingAssessment::Assessment)+ (motivatedDirective::Directive)+ ;
Assessment ::= (motivatedDirective::Directive)+ (affectedEnd::End)+ (judgedInfluencer::Influencer)+ assessingOrganizationUnit::OrganizationUnit (affectedMeans::Means)+ (identifiedPotentialImpact::PotentialImpact)+ (usedAssessment::Assessment)+ (usingAssessment::Assessment)+ (categorizingAssessmentCategory::AssessmentCategory)+ ;
--------------------metamodels::cmt.owl.bgf--------------------
PaperAbstract ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Administrator ::= finalizePaperAssignment::Conference runPaperAssignmentTools::Conference enableVirtualMeeting::Conference startReviewerBidding::Conference assignReviewer::Reviewer rejectPaper::Paper enterConferenceDetails::Conference printHardcopyMailingManifests::Conference setMaxPapers::ProgramCommitteeMember enterReviewCriteria::Conference acceptPaper::Paper addProgramCommitteeMember::ProgramCommitteeMember ;
PaperFullVersion ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
AuthorNotReviewer ::= submitPaper::Paper writePaper::Paper ;
Meta-Reviewer ::= assignedByAdministrator::Administrator adjustBid::Bid readPaper::Paper hasBeenAssigned::Paper writeReview::Review assignExternalReviewer::ExternalReviewer ;
Paper ::= PaperAbstract ;
 Paper ::= PaperFullVersion ;
 Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Conference ::= hasConferenceMember::ConferenceMember paperAssignmentFinalizedBy::Administrator reviewCriteriaEnteredBy::Administrator paperAssignmentToolsRunBy::Administrator virtualMeetingEnabledBy::Administrator hardcopyMailingManifestsPrintedBy::Administrator detailsEnteredBy::Administrator reviewerBiddingStartedBy::Administrator date::date reviewsPerPaper::Integer logoURL::anyURI acceptsHardcopySubmissions::Boolean siteURL::anyURI ;
Author ::= AuthorNotReviewer ;
 Author ::= Co-author ;
 Author ::= submitPaper::Paper writePaper::Paper ;
Chairman ::= ConferenceChair ;
 Chairman ::= AssociatedChair ;
 Chairman ::= ProgramCommitteeChair ;
 Chairman ::= hasConflictOfInterest::Document email::String memberOfConference::Conference ;
Person ::= ConferenceMember ;
 Person ::= ExternalReviewer ;
 Person ::= User ;
 Person ::= ProgramCommitteeMember ;
 Person ::= Chairman ;
 Person ::= hasConflictOfInterest::Document email::String ;
Reviewer ::= Meta-Reviewer ;
 Reviewer ::= assignedByAdministrator::Administrator adjustBid::Bid readPaper::Paper hasBeenAssigned::Paper writeReview::Review assignExternalReviewer::ExternalReviewer ;
ProgramCommitteeMember ::= ProgramCommitteeChair ;
 ProgramCommitteeMember ::= memberOfProgramCommittee::ProgramCommittee maxPapers::Integer addedBy::Administrator ;
--------------------metamodels::confOf.owl.bgf--------------------
Tutorial ::= has_a_track-workshop-tutorial_topic::Topic is_part_of_conference_volumes::Conference_volume has_a_track-workshop-tutorial_chair::Track-workshop_chair hasTopic::Topic hasAdministrativeEvent::Administrative_event ;
Conference_volume ::= has_parts::Conference_part has_workshops::Workshop has_tracks::Track has_tutorials::Tutorial has_a_commtitee::Committee has_a_steering_committee::Steering_committee has_an_organizing_committee::Organizing_committee has_important_dates::Important_dates has_contributions::Conference_contribution has_a_location::String has_a_program_committee::Program_committee ;
Conference_proceedings ::= has_an_ISBN::String has_a_publisher::Publisher has_a_volume::Integer ;
Reviewing_results_event ::= follows::Administrative_event parallel_with::Administrative_event ;
Event ::= Symposium ;
 Event ::= Social_event ;
 Event ::= Administrative_event ;
 Event ::= Working_event ;
 Event ::= conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator starts_on::String ends_on::String ;
Science_Worker ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person send::Activity added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String hasConflictOfInterest::Document email::String ;
Review ::= Meta-Review ;
 Review ::= writtenBy::Reviewer reviews::Reviewed_contribution ;
article ::= paper ;
 article ::= group_email ;
 article ::= notification_email ;
 article ::= abstract_of_paper ;
 article ::= review ;
 article ::= review_form ;
 article ::= summary_of_reviews ;
 article ::= goes_through::activity is_sent_to::human is_created_in::activity structure_created_by::human has_author::human gives_classification::classification ;
Person ::= ConferenceMember ;
 Person ::= ExternalReviewer ;
 Person ::= User ;
 Person ::= Conference_participant ;
 Person ::= Conference_contributor ;
 Person ::= Committee_member ;
 Person ::= Conference_applicant ;
 Person ::= Track-workshop_chair ;
 Person ::= Scholar ;
 Person ::= Participant ;
 Person ::= Member_PC ;
 Person ::= Chair_PC ;
 Person ::= Science_Worker ;
 Person ::= Assistant ;
 Person ::= Volunteer ;
 Person ::= ProgramCommitteeMember ;
 Person ::= Chairman ;
 Person ::= Administrator ;
 Person ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person send::Activity added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String hasConflictOfInterest::Document email::String ;
Accepted_Paper ::= full_paper_size::Integer has_author::human ;
ProgramCommitteeMember ::= ProgramCommitteeChair ;
 ProgramCommitteeMember ::= memberOfProgramCommittee::ProgramCommittee maxPapers::Integer addedBy::Administrator ;
Poster ::= is_submitted_at::Conference_volume ;
 Poster ::= writtenBy::Author dealsWith::Topic remark::String abstract::String contactEmail::String hasKeyword::String hasTitle::String ;
Working_event ::= Tutorial ;
 Working_event ::= hasTopic::Topic hasAdministrativeEvent::Administrative_event ;
Submission ::= recieved_by::User used_by::Person submited__by::User ;
Paper ::= PaperAbstract ;
 Paper ::= PaperFullVersion ;
 Paper ::= Abstract ;
 Paper ::= Invited_Paper ;
 Paper ::= Short_Paper ;
 Paper ::= Full_Paper ;
 Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
User ::= Committee ;
 User ::= Administrator ;
 User ::= recieve::Document (create::Thing)+ submit::Document ;
notification ::= has_result::article is_performed_by::human ;
Volunteer ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person send::Activity added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String hasConflictOfInterest::Document email::String ;
Conference_announcement ::= has_authors::Person has_a_date_of_issue::date ;
Administrative_event ::= Reviewing_results_event ;
 Administrative_event ::= Reviewing_event ;
 Administrative_event ::= Registration_of_participants_event ;
 Administrative_event ::= Submission_event ;
 Administrative_event ::= Camera_Ready_event ;
 Administrative_event ::= follows::Administrative_event parallel_with::Administrative_event ;
Short_paper ::= writtenBy::Author dealsWith::Topic remark::String abstract::String contactEmail::String hasKeyword::String hasTitle::String ;
Program_Committee_Chair ::= is_author_of::article performs_activity::activity is_employed_in::institute has_topic_of_interest::topic supervises::activity e-mail::String last_name::String first_name::String ;
Camera_Ready_event ::= follows::Administrative_event parallel_with::Administrative_event ;
paper_assignment ::= Manual_Paper_Assignment ;
 paper_assignment ::= Automatic_Paper_Assignment ;
 paper_assignment ::= assign_paper::Program_Committee_member is_performed_by::human ;
Committee ::= Program_committee ;
 Committee ::= Organizing_committee ;
 Committee ::= Steering_committee ;
 Committee ::= has_members::Committee_member was_a_committee_of::Conference_volume has_a_committee_co-chair::Co-chair has_a_committee_chair::Chair ;
group_email ::= goes_through::activity is_sent_to::human is_created_in::activity structure_created_by::human has_author::human gives_classification::classification ;
Full_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Registration ::= (has_result::Thing)+ sent_by::Person ;
review ::= gives_classification::classification is_created_in::activity ;
Corresponding_Author ::= writes::Contribution submitPaper::Paper writePaper::Paper ;
Symposium ::= conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator starts_on::String ends_on::String ;
Undecided_Paper ::= full_paper_size::Integer has_author::human ;
Chair_PC ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person send::Activity added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String hasConflictOfInterest::Document email::String ;
AuthorNotReviewer ::= writes::Contribution submitPaper::Paper writePaper::Paper ;
Meta-Reviewer ::= invites_co-reviewers::Reviewer invited_by::Reviewer (has_a_review_reference_or_expertise::Thing)+ assignedByAdministrator::Administrator adjustBid::Bid readPaper::Paper hasBeenAssigned::Paper writeReview::Review assignExternalReviewer::ExternalReviewer ;
Call_for_participation ::= has_authors::Person has_a_date_of_issue::date ;
Short_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Abstract ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
 Abstract ::= (is_the_1th_part_of::Thing)+ ;
Assistant ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person send::Activity added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String hasConflictOfInterest::Document email::String ;
Conference_document ::= Conference_contribution ;
 Conference_document ::= Information_for_participants ;
 Conference_document ::= Call_for_paper ;
 Conference_document ::= Conference_announcement ;
 Conference_document ::= Call_for_participation ;
 Conference_document ::= Conference_www ;
 Conference_document ::= Review ;
 Conference_document ::= has_authors::Person has_a_date_of_issue::date ;
Registration_of_participants_event ::= follows::Administrative_event parallel_with::Administrative_event ;
PaperFullVersion ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Conference ::= Conference_volume ;
 Conference ::= hasConferenceMember::ConferenceMember paperAssignmentFinalizedBy::Administrator reviewCriteriaEnteredBy::Administrator paperAssignmentToolsRunBy::Administrator virtualMeetingEnabledBy::Administrator hardcopyMailingManifestsPrintedBy::Administrator detailsEnteredBy::Administrator reviewerBiddingStartedBy::Administrator date::date reviewsPerPaper::Integer logoURL::anyURI acceptsHardcopySubmissions::Boolean siteURL::anyURI ;
Document ::= Email ;
 Document ::= Submission ;
 Document ::= Template ;
 Document ::= Paper ;
 Document ::= Review ;
 Document ::= recieved_by::User used_by::Person submited__by::User ;
Contribution ::= Poster ;
 Contribution ::= Short_paper ;
 Contribution ::= writtenBy::Author dealsWith::Topic remark::String abstract::String contactEmail::String hasKeyword::String hasTitle::String ;
Activity ::= Event_Creation ;
 Activity ::= Request ;
 Activity ::= Event_Approval ;
 Activity ::= Registration ;
 Activity ::= (has_result::Thing)+ sent_by::Person ;
PaperAbstract ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
human ::= Program_Committee_member ;
 human ::= Contact_Person ;
 human ::= Program_Committee_Chair ;
 human ::= is_author_of::article performs_activity::activity is_employed_in::institute has_topic_of_interest::topic supervises::activity e-mail::String last_name::String first_name::String ;
Administrator ::= approve::Event assign::Role finalizePaperAssignment::Conference runPaperAssignmentTools::Conference enableVirtualMeeting::Conference startReviewerBidding::Conference assignReviewer::Reviewer rejectPaper::Paper enterConferenceDetails::Conference printHardcopyMailingManifests::Conference setMaxPapers::ProgramCommitteeMember enterReviewCriteria::Conference acceptPaper::Paper addProgramCommitteeMember::ProgramCommitteeMember ;
Track ::= has_a_track-workshop-tutorial_topic::Topic is_part_of_conference_volumes::Conference_volume has_a_track-workshop-tutorial_chair::Track-workshop_chair ;
Author ::= AuthorNotReviewer ;
 Author ::= Co-author ;
 Author ::= Corresponding_Author ;
 Author ::= writes::Contribution submitPaper::Paper writePaper::Paper ;
Information_for_participants ::= has_authors::Person has_a_date_of_issue::date ;
Workshop ::= has_a_track-workshop-tutorial_topic::Topic is_part_of_conference_volumes::Conference_volume has_a_track-workshop-tutorial_chair::Track-workshop_chair ;
Reviewer ::= Meta-Reviewer ;
 Reviewer ::= invites_co-reviewers::Reviewer invited_by::Reviewer (has_a_review_reference_or_expertise::Thing)+ assignedByAdministrator::Administrator adjustBid::Bid readPaper::Paper hasBeenAssigned::Paper writeReview::Review assignExternalReviewer::ExternalReviewer ;
Event_Creation ::= (has_result::Thing)+ sent_by::Person ;
abstract_of_paper ::= goes_through::activity is_sent_to::human is_created_in::activity structure_created_by::human has_author::human gives_classification::classification ;
Meta-Review ::= writtenBy::Reviewer reviews::Reviewed_contribution ;
conference_setup ::= sets_member::human is_made_by::human includes_topic::topic sets_date::date sets_URL::URL ;
Template ::= recieved_by::User used_by::Person submited__by::User ;
Member_PC ::= expertOn::Topic reviewes::Contribution ;
managing_of_conference_process ::= is_followed_by::activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human ;
Conference_part ::= Track ;
 Conference_part ::= Workshop ;
 Conference_part ::= Tutorial ;
 Conference_part ::= has_a_track-workshop-tutorial_topic::Topic is_part_of_conference_volumes::Conference_volume has_a_track-workshop-tutorial_chair::Track-workshop_chair ;
Call_for_paper ::= has_authors::Person has_a_date_of_issue::date ;
Chairman ::= ConferenceChair ;
 Chairman ::= AssociatedChair ;
 Chairman ::= ProgramCommitteeChair ;
 Chairman ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person send::Activity added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String hasConflictOfInterest::Document email::String memberOfConference::Conference ;
Contact_Person ::= is_author_of::article performs_activity::activity is_employed_in::institute has_topic_of_interest::topic supervises::activity e-mail::String last_name::String first_name::String ;
activity ::= paper_assignment ;
 activity ::= bidding_of_reviewer ;
 activity ::= managing_of_conference_process ;
 activity ::= reviewing_proces ;
 activity ::= notification ;
 activity ::= submission_process ;
 activity ::= is_followed_by::activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human ;
Topic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part ;
paper ::= Accepted_Paper ;
 paper ::= Rejected_Paper ;
 paper ::= Undecided_Paper ;
 paper ::= full_paper_size::Integer has_author::human ;
Rejected_Paper ::= full_paper_size::Integer has_author::human ;
Review_expertise ::= has_a_submitted_contribution::Submitted_contribution has_an_expertise::EEnum ;
Important_dates ::= is_an_abstract_submission_date::date is_a_full_paper_submission_date::date is_an_ending_date::date is_a_date_of_acceptance_announcement::date is_a_date_of_camera_ready_paper_submission::date is_a_starting_date::date belong_to_a_conference_volume::Conference_volume ;
Event_Approval ::= (has_result::Thing)+ sent_by::Person ;
Invited_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Submission_event ::= follows::Administrative_event parallel_with::Administrative_event ;
Reviewing_event ::= follows::Administrative_event parallel_with::Administrative_event ;
Review_preference ::= (has_a_topic_or_a_submission_contribution::Thing)+ has_a_degree::Integer ;
--------------------metamodels::confious.owl.bgf--------------------
Tutorial ::= has_a_track-workshop-tutorial_topic::Topic is_part_of_conference_volumes::Conference_volume has_a_track-workshop-tutorial_chair::Track-workshop_chair ;
Conference_document ::= Conference_contribution ;
 Conference_document ::= Information_for_participants ;
 Conference_document ::= Call_for_paper ;
 Conference_document ::= Conference_announcement ;
 Conference_document ::= Call_for_participation ;
 Conference_document ::= Conference_www ;
 Conference_document ::= has_authors::Person has_a_date_of_issue::date ;
Conference_volume ::= has_parts::Conference_part has_workshops::Workshop has_tracks::Track has_tutorials::Tutorial has_a_commtitee::Committee has_a_steering_committee::Steering_committee has_an_organizing_committee::Organizing_committee has_important_dates::Important_dates has_contributions::Conference_contribution has_a_location::String has_a_program_committee::Program_committee ;
PaperFullVersion ::= full_paper_size::Integer has_author::human hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Conference_proceedings ::= has_an_ISBN::String has_a_publisher::Publisher has_a_volume::Integer ;
Conference ::= Conference_volume ;
 Conference ::= is_in_phase::phase_of_conference hasConferenceMember::ConferenceMember paperAssignmentFinalizedBy::Administrator reviewCriteriaEnteredBy::Administrator paperAssignmentToolsRunBy::Administrator virtualMeetingEnabledBy::Administrator hardcopyMailingManifestsPrintedBy::Administrator detailsEnteredBy::Administrator reviewerBiddingStartedBy::Administrator date::date reviewsPerPaper::Integer logoURL::anyURI acceptsHardcopySubmissions::Boolean siteURL::anyURI ;
Document ::= Email ;
 Document ::= Submission ;
 Document ::= Template ;
 Document ::= Review ;
 Document ::= Paper ;
 Document ::= recieved_by::User used_by::Person submited__by::User ;
Event ::= Symposium ;
 Event ::= Conference ;
 Event ::= Workshop ;
 Event ::= conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator ;
Review ::= Meta-Review ;
 Review ::= reviews::Reviewed_contribution gives_classification::classification is_created_in::activity writtenBy::Reviewer ;
article ::= group_email ;
 article ::= notification_email ;
 article ::= abstract_of_paper ;
 article ::= review_form ;
 article ::= summary_of_reviews ;
 article ::= goes_through::activity is_sent_to::human is_created_in::activity structure_created_by::human has_author::human gives_classification::classification ;
Person ::= ConferenceMember ;
 Person ::= ExternalReviewer ;
 Person ::= User ;
 Person ::= Conference_participant ;
 Person ::= Conference_contributor ;
 Person ::= Committee_member ;
 Person ::= Conference_applicant ;
 Person ::= Track-workshop_chair ;
 Person ::= ProgramCommitteeMember ;
 Person ::= Chairman ;
 Person ::= Administrator ;
 Person ::= hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person send::Activity added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String ;
Accepted_Paper ::= full_paper_size::Integer has_author::human hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
ProgramCommitteeMember ::= ProgramCommitteeChair ;
 ProgramCommitteeMember ::= memberOfProgramCommittee::ProgramCommittee maxPapers::Integer addedBy::Administrator ;
Activity ::= Event_Creation ;
 Activity ::= Request ;
 Activity ::= Event_Approval ;
 Activity ::= Registration ;
 Activity ::= (has_result::Thing)+ sent_by::Person ;
PaperAbstract ::= full_paper_size::Integer has_author::human hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
human ::= Program_Committee_member ;
 human ::= Contact_Person ;
 human ::= Program_Committee_Chair ;
 human ::= is_author_of::article performs_activity::activity is_employed_in::institute has_topic_of_interest::topic supervises::activity e-mail::String last_name::String first_name::String ;
Administrator ::= approve::Event assign::Role finalizePaperAssignment::Conference runPaperAssignmentTools::Conference enableVirtualMeeting::Conference startReviewerBidding::Conference assignReviewer::Reviewer rejectPaper::Paper enterConferenceDetails::Conference printHardcopyMailingManifests::Conference setMaxPapers::ProgramCommitteeMember enterReviewCriteria::Conference acceptPaper::Paper addProgramCommitteeMember::ProgramCommitteeMember ;
Submission ::= recieved_by::User used_by::Person submited__by::User ;
Paper ::= PaperAbstract ;
 Paper ::= PaperFullVersion ;
 Paper ::= Abstract ;
 Paper ::= Invited_Paper ;
 Paper ::= Short_Paper ;
 Paper ::= Full_Paper ;
 Paper ::= Accepted_Paper ;
 Paper ::= Rejected_Paper ;
 Paper ::= Undecided_Paper ;
 Paper ::= full_paper_size::Integer has_author::human hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
notification ::= has_result::article is_performed_by::human ;
Track ::= has_a_track-workshop-tutorial_topic::Topic is_part_of_conference_volumes::Conference_volume has_a_track-workshop-tutorial_chair::Track-workshop_chair ;
User ::= Committee ;
 User ::= Administrator ;
 User ::= Author ;
 User ::= recieve::Document (create::Thing)+ submit::Document ;
Author ::= AuthorNotReviewer ;
 Author ::= Co-author ;
 Author ::= Corresponding_Author ;
 Author ::= submitPaper::Paper writePaper::Paper ;
Conference_announcement ::= has_authors::Person has_a_date_of_issue::date ;
Information_for_participants ::= has_authors::Person has_a_date_of_issue::date ;
Program_Committee_Chair ::= is_author_of::article performs_activity::activity is_employed_in::institute has_topic_of_interest::topic supervises::activity e-mail::String last_name::String first_name::String ;
Workshop ::= has_a_track-workshop-tutorial_topic::Topic is_part_of_conference_volumes::Conference_volume has_a_track-workshop-tutorial_chair::Track-workshop_chair conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator ;
Reviewer ::= Meta-Reviewer ;
 Reviewer ::= invites_co-reviewers::Reviewer invited_by::Reviewer (has_a_review_reference_or_expertise::Thing)+ assignedByAdministrator::Administrator adjustBid::Bid readPaper::Paper hasBeenAssigned::Paper writeReview::Review assignExternalReviewer::ExternalReviewer ;
Event_Creation ::= (has_result::Thing)+ sent_by::Person ;
abstract_of_paper ::= goes_through::activity is_sent_to::human is_created_in::activity structure_created_by::human has_author::human gives_classification::classification ;
paper_assignment ::= Manual_Paper_Assignment ;
 paper_assignment ::= Automatic_Paper_Assignment ;
 paper_assignment ::= assign_paper::Program_Committee_member is_performed_by::human ;
Meta-Review ::= reviews::Reviewed_contribution gives_classification::classification is_created_in::activity writtenBy::Reviewer ;
Committee ::= Program_committee ;
 Committee ::= Organizing_committee ;
 Committee ::= Steering_committee ;
 Committee ::= has_members::Committee_member was_a_committee_of::Conference_volume has_a_committee_co-chair::Co-chair has_a_committee_chair::Chair ;
group_email ::= goes_through::activity is_sent_to::human is_created_in::activity structure_created_by::human has_author::human gives_classification::classification ;
Full_Paper ::= full_paper_size::Integer has_author::human hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
conference_setup ::= sets_member::human is_made_by::human includes_topic::topic sets_date::date sets_URL::URL ;
Template ::= recieved_by::User used_by::Person submited__by::User ;
Registration ::= (has_result::Thing)+ sent_by::Person ;
managing_of_conference_process ::= is_followed_by::activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human ;
Corresponding_Author ::= submitPaper::Paper writePaper::Paper ;
Conference_part ::= Track ;
 Conference_part ::= Tutorial ;
 Conference_part ::= Workshop ;
 Conference_part ::= has_a_track-workshop-tutorial_topic::Topic is_part_of_conference_volumes::Conference_volume has_a_track-workshop-tutorial_chair::Track-workshop_chair ;
Call_for_paper ::= has_authors::Person has_a_date_of_issue::date ;
Chairman ::= ConferenceChair ;
 Chairman ::= AssociatedChair ;
 Chairman ::= ProgramCommitteeChair ;
 Chairman ::= hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person send::Activity added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String memberOfConference::Conference ;
Contact_Person ::= is_author_of::article performs_activity::activity is_employed_in::institute has_topic_of_interest::topic supervises::activity e-mail::String last_name::String first_name::String ;
Symposium ::= conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator ;
Undecided_Paper ::= full_paper_size::Integer has_author::human hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
activity ::= paper_assignment ;
 activity ::= bidding_of_reviewer ;
 activity ::= managing_of_conference_process ;
 activity ::= reviewing_proces ;
 activity ::= notification ;
 activity ::= submission_process ;
 activity ::= is_followed_by::activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human ;
Topic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part ;
AuthorNotReviewer ::= submitPaper::Paper writePaper::Paper ;
Meta-Reviewer ::= invites_co-reviewers::Reviewer invited_by::Reviewer (has_a_review_reference_or_expertise::Thing)+ assignedByAdministrator::Administrator adjustBid::Bid readPaper::Paper hasBeenAssigned::Paper writeReview::Review assignExternalReviewer::ExternalReviewer ;
Rejected_Paper ::= full_paper_size::Integer has_author::human hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Call_for_participation ::= has_authors::Person has_a_date_of_issue::date ;
Review_expertise ::= has_a_submitted_contribution::Submitted_contribution has_an_expertise::EEnum ;
Short_Paper ::= full_paper_size::Integer has_author::human hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Important_dates ::= is_an_abstract_submission_date::date is_a_full_paper_submission_date::date is_an_ending_date::date is_a_date_of_acceptance_announcement::date is_a_date_of_camera_ready_paper_submission::date is_a_starting_date::date belong_to_a_conference_volume::Conference_volume ;
Event_Approval ::= (has_result::Thing)+ sent_by::Person ;
Invited_Paper ::= full_paper_size::Integer has_author::human hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Review_preference ::= (has_a_topic_or_a_submission_contribution::Thing)+ has_a_degree::Integer ;
Abstract ::= full_paper_size::Integer has_author::human hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
 Abstract ::= (is_the_1th_part_of::Thing)+ ;
--------------------metamodels::crs_dr.owl.bgf--------------------
Tutorial ::= hasTopic::Topic hasAdministrativeEvent::Administrative_event has_a_track-workshop-tutorial_topic::Topic is_part_of_conference_volumes::Conference_volume has_a_track-workshop-tutorial_chair::Track-workshop_chair ;
Conference_volume ::= has_parts::Conference_part has_workshops::Workshop has_tracks::Track has_tutorials::Tutorial has_a_commtitee::Committee has_a_steering_committee::Steering_committee has_an_organizing_committee::Organizing_committee has_important_dates::Important_dates has_contributions::Conference_contribution has_a_location::String has_a_program_committee::Program_committee ;
Conference_proceedings ::= has_an_ISBN::String has_a_publisher::Publisher has_a_volume::Integer ;
Reviewing_results_event ::= follows::Administrative_event parallel_with::Administrative_event ;
Event ::= Symposium ;
 Event ::= Social_event ;
 Event ::= Administrative_event ;
 Event ::= Working_event ;
 Event ::= conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator starts_on::String ends_on::String ;
Science_Worker ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person send::Activity added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String hasConflictOfInterest::Document email::String ;
Review ::= Meta-Review ;
 Review ::= reviews::Reviewed_contribution writtenBy::Reviewer ;
article ::= paper ;
 article ::= group_email ;
 article ::= notification_email ;
 article ::= abstract_of_paper ;
 article ::= review_form ;
 article ::= summary_of_reviews ;
 article ::= review ;
 article ::= article_written_by::author has_reviewer::reviewer has_abstract::abstract goes_through::activity is_sent_to::human is_created_in::activity structure_created_by::human has_author::human gives_classification::classification ;
Person ::= ConferenceMember ;
 Person ::= ExternalReviewer ;
 Person ::= User ;
 Person ::= Conference_participant ;
 Person ::= Conference_contributor ;
 Person ::= Committee_member ;
 Person ::= Conference_applicant ;
 Person ::= Track-workshop_chair ;
 Person ::= Scholar ;
 Person ::= Participant ;
 Person ::= Member_PC ;
 Person ::= Chair_PC ;
 Person ::= Science_Worker ;
 Person ::= Assistant ;
 Person ::= Volunteer ;
 Person ::= ProgramCommitteeMember ;
 Person ::= Chairman ;
 Person ::= Administrator ;
 Person ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person send::Activity added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String hasConflictOfInterest::Document email::String ;
Accepted_Paper ::= full_paper_size::Integer has_author::human ;
ProgramCommitteeMember ::= ProgramCommitteeChair ;
 ProgramCommitteeMember ::= memberOfProgramCommittee::ProgramCommittee maxPapers::Integer addedBy::Administrator ;
pc_meeting ::= has_startdate::dateTime has_enddate::dateTime ;
Poster ::= is_submitted_at::Conference_volume ;
 Poster ::= writtenBy::Author dealsWith::Topic remark::String abstract::String contactEmail::String hasKeyword::String hasTitle::String ;
Working_event ::= Workshop ;
 Working_event ::= Tutorial ;
 Working_event ::= hasTopic::Topic hasAdministrativeEvent::Administrative_event ;
Submission ::= recieved_by::User used_by::Person submited__by::User ;
Paper ::= PaperAbstract ;
 Paper ::= PaperFullVersion ;
 Paper ::= Abstract ;
 Paper ::= Invited_Paper ;
 Paper ::= Short_Paper ;
 Paper ::= Full_Paper ;
 Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
User ::= Committee ;
 User ::= Administrator ;
 User ::= recieve::Document (create::Thing)+ submit::Document ;
notification ::= has_result::article is_performed_by::human ;
Volunteer ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person send::Activity added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String hasConflictOfInterest::Document email::String ;
Conference_announcement ::= has_authors::Person has_a_date_of_issue::date ;
Short_paper ::= writtenBy::Author dealsWith::Topic remark::String abstract::String contactEmail::String hasKeyword::String hasTitle::String ;
Administrative_event ::= Reviewing_results_event ;
 Administrative_event ::= Reviewing_event ;
 Administrative_event ::= Registration_of_participants_event ;
 Administrative_event ::= Submission_event ;
 Administrative_event ::= Camera_Ready_event ;
 Administrative_event ::= follows::Administrative_event parallel_with::Administrative_event ;
Program_Committee_Chair ::= is_author_of::article performs_activity::activity is_employed_in::institute has_topic_of_interest::topic supervises::activity e-mail::String last_name::String first_name::String ;
Camera_Ready_event ::= follows::Administrative_event parallel_with::Administrative_event ;
paper_assignment ::= Manual_Paper_Assignment ;
 paper_assignment ::= Automatic_Paper_Assignment ;
 paper_assignment ::= assign_paper::Program_Committee_member is_performed_by::human ;
Committee ::= Program_committee ;
 Committee ::= Organizing_committee ;
 Committee ::= Steering_committee ;
 Committee ::= has_members::Committee_member was_a_committee_of::Conference_volume has_a_committee_co-chair::Co-chair has_a_committee_chair::Chair ;
group_email ::= article_written_by::author has_reviewer::reviewer has_abstract::abstract goes_through::activity is_sent_to::human is_created_in::activity structure_created_by::human has_author::human gives_classification::classification ;
Full_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Registration ::= (has_result::Thing)+ sent_by::Person ;
review ::= gives_classification::classification is_created_in::activity review_written_by::reviewer ;
Corresponding_Author ::= writes::Contribution submitPaper::Paper writePaper::Paper ;
Symposium ::= conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator starts_on::String ends_on::String ;
Undecided_Paper ::= full_paper_size::Integer has_author::human ;
Chair_PC ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person send::Activity added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String hasConflictOfInterest::Document email::String ;
AuthorNotReviewer ::= writes::Contribution submitPaper::Paper writePaper::Paper ;
Meta-Reviewer ::= invites_co-reviewers::Reviewer invited_by::Reviewer (has_a_review_reference_or_expertise::Thing)+ assignedByAdministrator::Administrator adjustBid::Bid readPaper::Paper hasBeenAssigned::Paper writeReview::Review assignExternalReviewer::ExternalReviewer ;
Call_for_participation ::= has_authors::Person has_a_date_of_issue::date ;
Short_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
chair ::= assigns_reviewers_to_article::reviewer creates_program::program ;
Abstract ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
 Abstract ::= (is_the_1th_part_of::Thing)+ ;
Assistant ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person send::Activity added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String hasConflictOfInterest::Document email::String ;
Conference_document ::= Conference_contribution ;
 Conference_document ::= Information_for_participants ;
 Conference_document ::= Call_for_paper ;
 Conference_document ::= Conference_announcement ;
 Conference_document ::= Call_for_participation ;
 Conference_document ::= Conference_www ;
 Conference_document ::= Review ;
 Conference_document ::= has_authors::Person has_a_date_of_issue::date ;
Registration_of_participants_event ::= follows::Administrative_event parallel_with::Administrative_event ;
PaperFullVersion ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Conference ::= Conference_volume ;
 Conference ::= hasConferenceMember::ConferenceMember paperAssignmentFinalizedBy::Administrator reviewCriteriaEnteredBy::Administrator paperAssignmentToolsRunBy::Administrator virtualMeetingEnabledBy::Administrator hardcopyMailingManifestsPrintedBy::Administrator detailsEnteredBy::Administrator reviewerBiddingStartedBy::Administrator date::date reviewsPerPaper::Integer logoURL::anyURI acceptsHardcopySubmissions::Boolean siteURL::anyURI ;
Document ::= Email ;
 Document ::= Submission ;
 Document ::= Template ;
 Document ::= Review ;
 Document ::= recieved_by::User used_by::Person submited__by::User ;
Contribution ::= Poster ;
 Contribution ::= Short_paper ;
 Contribution ::= writtenBy::Author dealsWith::Topic remark::String abstract::String contactEmail::String hasKeyword::String hasTitle::String ;
Activity ::= Event_Creation ;
 Activity ::= Request ;
 Activity ::= Event_Approval ;
 Activity ::= Registration ;
 Activity ::= (has_result::Thing)+ sent_by::Person ;
PaperAbstract ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
human ::= Program_Committee_member ;
 human ::= Contact_Person ;
 human ::= Program_Committee_Chair ;
 human ::= is_author_of::article performs_activity::activity is_employed_in::institute has_topic_of_interest::topic supervises::activity e-mail::String last_name::String first_name::String ;
Administrator ::= approve::Event assign::Role finalizePaperAssignment::Conference runPaperAssignmentTools::Conference enableVirtualMeeting::Conference startReviewerBidding::Conference assignReviewer::Reviewer rejectPaper::Paper enterConferenceDetails::Conference printHardcopyMailingManifests::Conference setMaxPapers::ProgramCommitteeMember enterReviewCriteria::Conference acceptPaper::Paper addProgramCommitteeMember::ProgramCommitteeMember ;
Track ::= has_a_track-workshop-tutorial_topic::Topic is_part_of_conference_volumes::Conference_volume has_a_track-workshop-tutorial_chair::Track-workshop_chair ;
Author ::= AuthorNotReviewer ;
 Author ::= Co-author ;
 Author ::= Corresponding_Author ;
 Author ::= writes::Contribution submitPaper::Paper writePaper::Paper ;
Information_for_participants ::= has_authors::Person has_a_date_of_issue::date ;
Workshop ::= hasTopic::Topic hasAdministrativeEvent::Administrative_event ;
Reviewer ::= Meta-Reviewer ;
 Reviewer ::= invites_co-reviewers::Reviewer invited_by::Reviewer (has_a_review_reference_or_expertise::Thing)+ assignedByAdministrator::Administrator adjustBid::Bid readPaper::Paper hasBeenAssigned::Paper writeReview::Review assignExternalReviewer::ExternalReviewer ;
Event_Creation ::= (has_result::Thing)+ sent_by::Person ;
abstract_of_paper ::= article_written_by::author has_reviewer::reviewer has_abstract::abstract goes_through::activity is_sent_to::human is_created_in::activity structure_created_by::human has_author::human gives_classification::classification ;
Meta-Review ::= reviews::Reviewed_contribution writtenBy::Reviewer ;
conference ::= has_program::program is_in_phase::phase_of_conference ;
event ::= pc_meeting ;
 event ::= session ;
 event ::= conference ;
 event ::= has_startdate::dateTime has_enddate::dateTime ;
conference_setup ::= sets_member::human is_made_by::human includes_topic::topic sets_date::date sets_URL::URL ;
Template ::= recieved_by::User used_by::Person submited__by::User ;
Member_PC ::= expertOn::Topic reviewes::Contribution ;
managing_of_conference_process ::= is_followed_by::activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human ;
session ::= has_startdate::dateTime has_enddate::dateTime ;
Conference_part ::= Track ;
 Conference_part ::= Tutorial ;
 Conference_part ::= has_a_track-workshop-tutorial_topic::Topic is_part_of_conference_volumes::Conference_volume has_a_track-workshop-tutorial_chair::Track-workshop_chair ;
Call_for_paper ::= has_authors::Person has_a_date_of_issue::date ;
Chairman ::= ConferenceChair ;
 Chairman ::= AssociatedChair ;
 Chairman ::= ProgramCommitteeChair ;
 Chairman ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person send::Activity added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String hasConflictOfInterest::Document email::String memberOfConference::Conference ;
Contact_Person ::= is_author_of::article performs_activity::activity is_employed_in::institute has_topic_of_interest::topic supervises::activity e-mail::String last_name::String first_name::String ;
activity ::= paper_assignment ;
 activity ::= bidding_of_reviewer ;
 activity ::= managing_of_conference_process ;
 activity ::= reviewing_proces ;
 activity ::= notification ;
 activity ::= submission_process ;
 activity ::= is_followed_by::activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human ;
Topic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part ;
paper ::= Accepted_Paper ;
 paper ::= Rejected_Paper ;
 paper ::= Undecided_Paper ;
 paper ::= full_paper_size::Integer has_author::human ;
author ::= writes_article::article assigns_article_to_conference::article ;
Rejected_Paper ::= full_paper_size::Integer has_author::human ;
Review_expertise ::= has_a_submitted_contribution::Submitted_contribution has_an_expertise::EEnum ;
Important_dates ::= is_an_abstract_submission_date::date is_a_full_paper_submission_date::date is_an_ending_date::date is_a_date_of_acceptance_announcement::date is_a_date_of_camera_ready_paper_submission::date is_a_starting_date::date belong_to_a_conference_volume::Conference_volume ;
Event_Approval ::= (has_result::Thing)+ sent_by::Person ;
Invited_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Submission_event ::= follows::Administrative_event parallel_with::Administrative_event ;
Reviewing_event ::= follows::Administrative_event parallel_with::Administrative_event ;
program ::= program_created_by::chair has_session::session ;
Review_preference ::= (has_a_topic_or_a_submission_contribution::Thing)+ has_a_degree::Integer ;
--------------------metamodels::deployment.bgf--------------------
ExecutionEnvironment ::= (nestedNode::Node)+ name::String ;
Device ::= (nestedNode::Node)+ name::String ;
Specification ::= (ownedNode::Node)+ (ownedCommunicationLink::CommunicationLink)+ ;
CommunicationLink ::= source::Node target::Node name::String ;
--------------------metamodels::edas.owl.bgf--------------------
PerformanceTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Call ::= CallForPapers ;
 Call ::= CallForReviews ;
 Call ::= CallForManuscripts ;
 Call ::= forEvent::AcademicEvent (isInitiatedBy::Person)+ hasSubmissionInstructions::String hasSubmissionDeadline::dateTime ;
Tutorial ::= hasTopic::Topic hasAdministrativeEvent::Administrative_event has_a_track-workshop-tutorial_topic::Topic is_part_of_conference_volumes::Conference_volume has_a_track-workshop-tutorial_chair::Track-workshop_chair ;
Conference_volume ::= has_parts::Conference_part has_workshops::Workshop has_tracks::Track has_tutorials::Tutorial has_a_commtitee::Committee has_a_steering_committee::Steering_committee has_an_organizing_committee::Organizing_committee has_important_dates::Important_dates has_contributions::Conference_contribution has_a_location::String has_a_program_committee::Program_committee ;
Reviewing_results_event ::= follows::Administrative_event parallel_with::Administrative_event ;
Conference_proceedings ::= has_an_ISBN::String has_a_publisher::Publisher has_a_volume::String ;
Event ::= Symposium ;
 Event ::= Social_event ;
 Event ::= Administrative_event ;
 Event ::= Working_event ;
 Event ::= pc_meeting ;
 Event ::= session ;
 Event ::= Conference ;
 Event ::= conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator starts_on::String ends_on::String has_startdate::dateTime has_enddate::dateTime ;
Science_Worker ::= hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person send::Activity added_by::Person attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String ;
Review ::= Meta-Review ;
 Review ::= writtenBy::Reviewer reviews::Reviewed_contribution gives_classification::classification is_created_in::activity review_written_by::Reviewer ;
RadioCommunicationsTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
article ::= group_email ;
 article ::= notification_email ;
 article ::= abstract_of_paper ;
 article ::= review_form ;
 article ::= summary_of_reviews ;
 article ::= Review ;
 article ::= goes_through::activity is_sent_to::human is_created_in::activity structure_created_by::human has_author::human gives_classification::classification article_written_by::Author has_reviewer::Reviewer has_abstract::abstract ;
MedicineTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Person ::= ConferenceMember ;
 Person ::= ExternalReviewer ;
 Person ::= User ;
 Person ::= Conference_participant ;
 Person ::= Conference_contributor ;
 Person ::= Committee_member ;
 Person ::= Conference_applicant ;
 Person ::= Track-workshop_chair ;
 Person ::= Scholar ;
 Person ::= Participant ;
 Person ::= Member_PC ;
 Person ::= Chair_PC ;
 Person ::= Science_Worker ;
 Person ::= Assistant ;
 Person ::= Volunteer ;
 Person ::= chair ;
 Person ::= participant ;
 Person ::= ConferenceChair ;
 Person ::= Attendee ;
 Person ::= SessionChair ;
 Person ::= TPCMember ;
 Person ::= ProgramCommitteeMember ;
 Person ::= Chairman ;
 Person ::= Author ;
 Person ::= Administrator ;
 Person ::= hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person send::Activity added_by::Person attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String ;
TwoLevelConference ::= is_in_phase::phase_of_conference has_program::program hasMember::Person hasName::String endDate::dateTime paperDueOn::dateTime registrationDueOn::dateTime manuscriptDueOn::dateTime startDate::dateTime hasCountry::Country hasConferenceMember::ConferenceMember paperAssignmentFinalizedBy::Administrator reviewCriteriaEnteredBy::Administrator paperAssignmentToolsRunBy::Administrator virtualMeetingEnabledBy::Administrator hardcopyMailingManifestsPrintedBy::Administrator detailsEnteredBy::Administrator reviewerBiddingStartedBy::Administrator date::date reviewsPerPaper::Integer logoURL::anyURI acceptsHardcopySubmissions::Boolean siteURL::anyURI ;
SignalProcessingTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Accepted_Paper ::= isWrittenBy::Author (isReviewedBy::Person)+ full_paper_size::Integer has_author::human hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
ProgramCommitteeMember ::= ProgramCommitteeChair ;
 ProgramCommitteeMember ::= memberOfProgramCommittee::ProgramCommittee maxPapers::Integer addedBy::Administrator ;
SessionChair ::= hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person send::Activity added_by::Person attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String ;
pc_meeting ::= conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator starts_on::String ends_on::String has_startdate::dateTime has_enddate::dateTime ;
Poster ::= is_submitted_at::Conference_volume ;
 Poster ::= writtenBy::Author dealsWith::Topic remark::String abstract::String contactEmail::String hasKeyword::String hasTitle::String ;
Working_event ::= Workshop ;
 Working_event ::= Tutorial ;
 Working_event ::= hasTopic::Topic hasAdministrativeEvent::Administrative_event ;
Submission ::= (relatesTo::Thing)+ recieved_by::User used_by::Person submited__by::User ;
Paper ::= PaperAbstract ;
 Paper ::= PaperFullVersion ;
 Paper ::= Abstract ;
 Paper ::= Invited_Paper ;
 Paper ::= Short_Paper ;
 Paper ::= Full_Paper ;
 Paper ::= Accepted_Paper ;
 Paper ::= Rejected_Paper ;
 Paper ::= Undecided_Paper ;
 Paper ::= ActivePaper ;
 Paper ::= PendingPaper ;
 Paper ::= WithdrawnPaper ;
 Paper ::= RejectedPaper ;
 Paper ::= AcceptedPaper ;
 Paper ::= PublishedPaper ;
 Paper ::= isWrittenBy::Author (isReviewedBy::Person)+ full_paper_size::Integer has_author::human hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
notification ::= has_result::article is_performed_by::human ;
User ::= Committee ;
 User ::= Administrator ;
 User ::= recieve::Document (create::Thing)+ submit::Document ;
Volunteer ::= hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person send::Activity added_by::Person attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String ;
Conference_announcement ::= has_authors::Person has_a_date_of_issue::date ;
Short_paper ::= writtenBy::Author dealsWith::Topic remark::String abstract::String contactEmail::String hasKeyword::String hasTitle::String ;
Administrative_event ::= Reviewing_results_event ;
 Administrative_event ::= Reviewing_event ;
 Administrative_event ::= Registration_of_participants_event ;
 Administrative_event ::= Submission_event ;
 Administrative_event ::= Camera_Ready_event ;
 Administrative_event ::= follows::Administrative_event parallel_with::Administrative_event ;
ConferenceChair ::= memberOfConference::Conference ;
 ConferenceChair ::= hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person send::Activity added_by::Person attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String ;
WithdrawnPaper ::= isWrittenBy::Author (isReviewedBy::Person)+ full_paper_size::Integer has_author::human hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Program_Committee_Chair ::= is_author_of::article performs_activity::activity is_employed_in::institute has_topic_of_interest::topic supervises::activity e-mail::String last_name::String first_name::String ;
Camera_Ready_event ::= follows::Administrative_event parallel_with::Administrative_event ;
CallForManuscripts ::= forEvent::AcademicEvent (isInitiatedBy::Person)+ hasSubmissionInstructions::String hasSubmissionDeadline::dateTime ;
paper_assignment ::= Manual_Paper_Assignment ;
 paper_assignment ::= Automatic_Paper_Assignment ;
 paper_assignment ::= assign_paper::Program_Committee_member is_performed_by::human ;
PublishedPaper ::= isWrittenBy::Author (isReviewedBy::Person)+ full_paper_size::Integer has_author::human hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Committee ::= Program_committee ;
 Committee ::= Organizing_committee ;
 Committee ::= Steering_committee ;
 Committee ::= has_members::Committee_member was_a_committee_of::Conference_volume has_a_committee_co-chair::Co-chair has_a_committee_chair::Chair ;
group_email ::= goes_through::activity is_sent_to::human is_created_in::activity structure_created_by::human has_author::human gives_classification::classification article_written_by::Author has_reviewer::Reviewer has_abstract::abstract ;
Full_Paper ::= isWrittenBy::Author (isReviewedBy::Person)+ full_paper_size::Integer has_author::human hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Attendee ::= hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person send::Activity added_by::Person attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String ;
Registration ::= (has_result::Thing)+ sent_by::Person ;
Corresponding_Author ::= submitPaper::Paper writePaper::Paper writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper ;
OperatingTopicsystems ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
PendingPaper ::= isWrittenBy::Author (isReviewedBy::Person)+ full_paper_size::Integer has_author::human hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Symposium ::= conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator starts_on::String ends_on::String has_startdate::dateTime has_enddate::dateTime ;
PowerlineTransmissionTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
TestOnlyTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Undecided_Paper ::= isWrittenBy::Author (isReviewedBy::Person)+ full_paper_size::Integer has_author::human hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Chair_PC ::= hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person send::Activity added_by::Person attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String ;
AuthorNotReviewer ::= submitPaper::Paper writePaper::Paper writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper ;
Meta-Reviewer ::= invites_co-reviewers::Reviewer invited_by::Reviewer (has_a_review_reference_or_expertise::Thing)+ writes_review::Review hasReviewHistory::PersonalReviewHistory assignedByAdministrator::Administrator adjustBid::Bid readPaper::Paper hasBeenAssigned::Paper writeReview::Review assignExternalReviewer::ExternalReviewer ;
Call_for_participation ::= has_authors::Person has_a_date_of_issue::date ;
Short_Paper ::= isWrittenBy::Author (isReviewedBy::Person)+ full_paper_size::Integer has_author::human hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
SatelliteAndSpaceCommunicationsTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
chair ::= assigns_reviewers_to_article::Reviewer creates_program::program ;
Abstract ::= isWrittenBy::Author (isReviewedBy::Person)+ full_paper_size::Integer has_author::human hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
 Abstract ::= (is_the_1th_part_of::Thing)+ ;
TPCMember ::= hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person send::Activity added_by::Person attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String ;
ConferenceEvent ::= NonAcademicEvent ;
 ConferenceEvent ::= AcademicEvent ;
 ConferenceEvent ::= hasAttendee::Person hasLocation::Place hasProgramme::Programme hasEndDateTime::dateTime hasStartDateTime::dateTime ;
Assistant ::= hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person send::Activity added_by::Person attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String ;
Conference_document ::= Conference_contribution ;
 Conference_document ::= Information_for_participants ;
 Conference_document ::= Call_for_paper ;
 Conference_document ::= Conference_announcement ;
 Conference_document ::= Call_for_participation ;
 Conference_document ::= Conference_www ;
 Conference_document ::= has_authors::Person has_a_date_of_issue::date ;
MobileComputingTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Registration_of_participants_event ::= follows::Administrative_event parallel_with::Administrative_event ;
PaperFullVersion ::= isWrittenBy::Author (isReviewedBy::Person)+ full_paper_size::Integer has_author::human hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Conference ::= Conference_volume ;
 Conference ::= TwoLevelConference ;
 Conference ::= SingleLevelConference ;
 Conference ::= is_in_phase::phase_of_conference has_program::program hasMember::Person hasName::String endDate::dateTime paperDueOn::dateTime registrationDueOn::dateTime manuscriptDueOn::dateTime startDate::dateTime hasCountry::Country hasConferenceMember::ConferenceMember paperAssignmentFinalizedBy::Administrator reviewCriteriaEnteredBy::Administrator paperAssignmentToolsRunBy::Administrator virtualMeetingEnabledBy::Administrator hardcopyMailingManifestsPrintedBy::Administrator detailsEnteredBy::Administrator reviewerBiddingStartedBy::Administrator date::date reviewsPerPaper::Integer logoURL::anyURI acceptsHardcopySubmissions::Boolean siteURL::anyURI ;
Document ::= Email ;
 Document ::= Submission ;
 Document ::= Template ;
 Document ::= abstract ;
 Document ::= article ;
 Document ::= SlideSet ;
 Document ::= Programme ;
 Document ::= MealMenu ;
 Document ::= Paper ;
 Document ::= (relatesTo::Thing)+ recieved_by::User used_by::Person submited__by::User ;
SingleLevelConference ::= is_in_phase::phase_of_conference has_program::program hasMember::Person hasName::String endDate::dateTime paperDueOn::dateTime registrationDueOn::dateTime manuscriptDueOn::dateTime startDate::dateTime hasCountry::Country hasConferenceMember::ConferenceMember paperAssignmentFinalizedBy::Administrator reviewCriteriaEnteredBy::Administrator paperAssignmentToolsRunBy::Administrator virtualMeetingEnabledBy::Administrator hardcopyMailingManifestsPrintedBy::Administrator detailsEnteredBy::Administrator reviewerBiddingStartedBy::Administrator date::date reviewsPerPaper::Integer logoURL::anyURI acceptsHardcopySubmissions::Boolean siteURL::anyURI ;
Sponsorship ::= TravelGrant ;
 Sponsorship ::= providedBy::Organization hasCostCurrency::String hasCostAmount::Integer ;
CommunicationTheoryTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
WirelessCommunicationsTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
CallForPapers ::= forEvent::AcademicEvent (isInitiatedBy::Person)+ hasSubmissionInstructions::String hasSubmissionDeadline::dateTime ;
CommunicationsTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
CallForReviews ::= forEvent::AcademicEvent (isInitiatedBy::Person)+ hasSubmissionInstructions::String hasSubmissionDeadline::dateTime ;
Contribution ::= Poster ;
 Contribution ::= Short_paper ;
 Contribution ::= writtenBy::Author dealsWith::Topic remark::String abstract::String contactEmail::String hasKeyword::String hasTitle::String ;
SecurityTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Activity ::= Event_Creation ;
 Activity ::= Request ;
 Activity ::= Event_Approval ;
 Activity ::= Registration ;
 Activity ::= (has_result::Thing)+ sent_by::Person ;
PaperAbstract ::= isWrittenBy::Author (isReviewedBy::Person)+ full_paper_size::Integer has_author::human hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
human ::= Program_Committee_member ;
 human ::= Contact_Person ;
 human ::= Program_Committee_Chair ;
 human ::= is_author_of::article performs_activity::activity is_employed_in::institute has_topic_of_interest::topic supervises::activity e-mail::String last_name::String first_name::String ;
Administrator ::= approve::Event assign::Role finalizePaperAssignment::Conference runPaperAssignmentTools::Conference enableVirtualMeeting::Conference startReviewerBidding::Conference assignReviewer::Reviewer rejectPaper::Paper enterConferenceDetails::Conference printHardcopyMailingManifests::Conference setMaxPapers::ProgramCommitteeMember enterReviewCriteria::Conference acceptPaper::Paper addProgramCommitteeMember::ProgramCommitteeMember ;
Author ::= AuthorNotReviewer ;
 Author ::= Co-author ;
 Author ::= Corresponding_Author ;
 Author ::= Presenter ;
 Author ::= submitPaper::Paper writePaper::Paper writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper ;
Track ::= has_a_track-workshop-tutorial_topic::Topic is_part_of_conference_volumes::Conference_volume has_a_track-workshop-tutorial_chair::Track-workshop_chair ;
CADTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Information_for_participants ::= has_authors::Person has_a_date_of_issue::date ;
Workshop ::= hasTopic::Topic hasAdministrativeEvent::Administrative_event ;
Reviewer ::= Meta-Reviewer ;
 Reviewer ::= invites_co-reviewers::Reviewer invited_by::Reviewer (has_a_review_reference_or_expertise::Thing)+ writes_review::Review hasReviewHistory::PersonalReviewHistory assignedByAdministrator::Administrator adjustBid::Bid readPaper::Paper hasBeenAssigned::Paper writeReview::Review assignExternalReviewer::ExternalReviewer ;
Event_Creation ::= (has_result::Thing)+ sent_by::Person ;
ComputerArchitectureTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
abstract_of_paper ::= goes_through::activity is_sent_to::human is_created_in::activity structure_created_by::human has_author::human gives_classification::classification article_written_by::Author has_reviewer::Reviewer has_abstract::abstract ;
Meta-Review ::= writtenBy::Reviewer reviews::Reviewed_contribution gives_classification::classification is_created_in::activity review_written_by::Reviewer ;
AntennasTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
MicroelectronicsTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
conference_setup ::= sets_member::human is_made_by::human includes_topic::topic sets_date::date sets_URL::URL ;
Template ::= (relatesTo::Thing)+ recieved_by::User used_by::Person submited__by::User ;
Member_PC ::= expertOn::Topic reviewes::Contribution ;
managing_of_conference_process ::= is_followed_by::activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human ;
session ::= conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator starts_on::String ends_on::String has_startdate::dateTime has_enddate::dateTime ;
Conference_part ::= Track ;
 Conference_part ::= Tutorial ;
 Conference_part ::= has_a_track-workshop-tutorial_topic::Topic is_part_of_conference_volumes::Conference_volume has_a_track-workshop-tutorial_chair::Track-workshop_chair ;
Call_for_paper ::= has_authors::Person has_a_date_of_issue::date ;
Chairman ::= ConferenceChair ;
 Chairman ::= AssociatedChair ;
 Chairman ::= ProgramCommitteeChair ;
 Chairman ::= hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person send::Activity added_by::Person attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String memberOfConference::Conference ;
Contact_Person ::= is_author_of::article performs_activity::activity is_employed_in::institute has_topic_of_interest::topic supervises::activity e-mail::String last_name::String first_name::String ;
SlideSet ::= (relatesTo::Thing)+ recieved_by::User used_by::Person submited__by::User ;
Topic ::= ParallelAndDistributedComputingTopic ;
 Topic ::= WirelessCommunicationsTopic ;
 Topic ::= OperatingTopicsystems ;
 Topic ::= ComputerNetworksTopic ;
 Topic ::= SatelliteAndSpaceCommunicationsTopic ;
 Topic ::= CADTopic ;
 Topic ::= MultimediaTopic ;
 Topic ::= CommunicationsTopic ;
 Topic ::= PowerlineTransmissionTopic ;
 Topic ::= AntennasTopic ;
 Topic ::= PerformanceTopic ;
 Topic ::= SignalProcessingTopic ;
 Topic ::= MicroelectronicsTopic ;
 Topic ::= TestOnlyTopic ;
 Topic ::= RadioCommunicationsTopic ;
 Topic ::= ComputerArchitectureTopic ;
 Topic ::= MedicineTopic ;
 Topic ::= SecurityTopic ;
 Topic ::= MobileComputingTopic ;
 Topic ::= CryptographyTopic ;
 Topic ::= CommunicationTheoryTopic ;
 Topic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
activity ::= paper_assignment ;
 activity ::= bidding_of_reviewer ;
 activity ::= managing_of_conference_process ;
 activity ::= reviewing_proces ;
 activity ::= notification ;
 activity ::= submission_process ;
 activity ::= is_followed_by::activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human ;
RejectedPaper ::= isWrittenBy::Author (isReviewedBy::Person)+ full_paper_size::Integer has_author::human hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
ParallelAndDistributedComputingTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
ContactInformation ::= hasCity::String hasStreet::String hasPostalCode::String hasPhone::String ;
Rejected_Paper ::= isWrittenBy::Author (isReviewedBy::Person)+ full_paper_size::Integer has_author::human hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Review_expertise ::= has_a_submitted_contribution::Submitted_contribution has_an_expertise::EEnum ;
Presenter ::= submitPaper::Paper writePaper::Paper writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper ;
Important_dates ::= is_an_abstract_submission_date::date is_a_full_paper_submission_date::date is_an_ending_date::date is_a_date_of_acceptance_announcement::date is_a_date_of_camera_ready_paper_submission::date is_a_starting_date::date belong_to_a_conference_volume::Conference_volume ;
Event_Approval ::= (has_result::Thing)+ sent_by::Person ;
Invited_Paper ::= isWrittenBy::Author (isReviewedBy::Person)+ full_paper_size::Integer has_author::human hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Submission_event ::= follows::Administrative_event parallel_with::Administrative_event ;
Reviewing_event ::= follows::Administrative_event parallel_with::Administrative_event ;
MultimediaTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
program ::= program_created_by::chair has_session::session ;
CryptographyTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
TravelGrant ::= providedBy::Organization hasCostCurrency::String hasCostAmount::Integer ;
Review_preference ::= (has_a_topic_or_a_submission_contribution::Thing)+ has_a_degree::Integer ;
--------------------metamodels::ekaw.owl.bgf--------------------
PerformanceTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Proceedings_Publisher ::= (publisherOf::Thing)+ technicallyOrganises::Thing ;
Reviewing_results_event ::= follows::Administrative_event parallel_with::Administrative_event ;
Conference_proceedings ::= has_an_ISBN::String has_a_publisher::Publisher has_a_volume::String ;
Organisation ::= Organising_Agency ;
 Organisation ::= Academic_Institution ;
 Organisation ::= Proceedings_Publisher ;
 Organisation ::= (publisherOf::Thing)+ technicallyOrganises::Thing ;
Science_Worker ::= attendeeAt::ConferenceEvent isMemberOf::conference hasFirstName::String hasBiography::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person send::Activity added_by::Person ;
RadioCommunicationsTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
article ::= group_email ;
 article ::= notification_email ;
 article ::= abstract_of_paper ;
 article ::= review_form ;
 article ::= summary_of_reviews ;
 article ::= Review ;
 article ::= article_written_by::Author has_reviewer::Reviewer has_abstract::Abstract goes_through::activity is_sent_to::human is_created_in::activity structure_created_by::human has_author::human gives_classification::classification ;
MedicineTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
TwoLevelConference ::= is_in_phase::phase_of_conference hasMember::Person hasName::String endDate::dateTime paperDueOn::dateTime registrationDueOn::dateTime manuscriptDueOn::dateTime startDate::dateTime hasCountry::Country hasConferenceMember::ConferenceMember paperAssignmentFinalizedBy::Administrator reviewCriteriaEnteredBy::Administrator paperAssignmentToolsRunBy::Administrator virtualMeetingEnabledBy::Administrator hardcopyMailingManifestsPrintedBy::Administrator detailsEnteredBy::Administrator reviewerBiddingStartedBy::Administrator date::date reviewsPerPaper::Integer logoURL::anyURI acceptsHardcopySubmissions::Boolean siteURL::anyURI has_program::program ;
SignalProcessingTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Accepted_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
 Accepted_Paper ::= hasReview::Review ;
Agency_Staff_Member ::= attendeeAt::ConferenceEvent isMemberOf::conference hasFirstName::String hasBiography::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person send::Activity added_by::Person ;
SessionChair ::= attendeeAt::ConferenceEvent isMemberOf::conference hasFirstName::String hasBiography::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person send::Activity added_by::Person ;
pc_meeting ::= (eventOnList::Thing)+ partOfEvent::Event hasEvent::Event (organisedBy::Thing)+ heldIn::Location conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator starts_on::String ends_on::String has_startdate::dateTime has_enddate::dateTime ;
Working_event ::= Workshop ;
 Working_event ::= Tutorial ;
 Working_event ::= hasTopic::Topic hasAdministrativeEvent::Administrative_event ;
notification ::= has_result::article is_performed_by::human ;
User ::= Committee ;
 User ::= Administrator ;
 User ::= Author ;
 User ::= recieve::Document (create::Thing)+ submit::Document ;
Regular_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Short_paper ::= writtenBy::Author dealsWith::Topic remark::String abstract::String contactEmail::String hasKeyword::String hasTitle::String ;
ConferenceChair ::= memberOfConference::conference ;
 ConferenceChair ::= attendeeAt::ConferenceEvent isMemberOf::conference hasFirstName::String hasBiography::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person send::Activity added_by::Person ;
Camera_Ready_event ::= follows::Administrative_event parallel_with::Administrative_event ;
Tutorial_Abstract ::= part_of_article::article (is_the_1th_part_of::Thing)+ ;
CallForManuscripts ::= forEvent::AcademicEvent (isInitiatedBy::Person)+ hasSubmissionInstructions::String hasSubmissionDeadline::dateTime ;
Paper_Author ::= attendeeAt::ConferenceEvent isMemberOf::conference hasFirstName::String hasBiography::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person send::Activity added_by::Person ;
group_email ::= article_written_by::Author has_reviewer::Reviewer has_abstract::Abstract goes_through::activity is_sent_to::human is_created_in::activity structure_created_by::human has_author::human gives_classification::classification ;
Full_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Attendee ::= attendeeAt::ConferenceEvent isMemberOf::conference hasFirstName::String hasBiography::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person send::Activity added_by::Person ;
Registration ::= has_result::article sent_by::Person ;
OperatingTopicsystems ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Workshop_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Chair_PC ::= attendeeAt::ConferenceEvent isMemberOf::conference hasFirstName::String hasBiography::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person send::Activity added_by::Person ;
Meta-Reviewer ::= assignedByAdministrator::Administrator adjustBid::Bid readPaper::Paper hasBeenAssigned::Paper writeReview::Review assignExternalReviewer::ExternalReviewer invites_co-reviewers::Reviewer invited_by::Reviewer (has_a_review_reference_or_expertise::Thing)+ writes_review::Review hasReviewHistory::PersonalReviewHistory ;
Call_for_participation ::= has_authors::Person has_a_date_of_issue::date ;
Short_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
SatelliteAndSpaceCommunicationsTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
chair ::= assigns_reviewers_to_article::Reviewer creates_program::program ;
TPCMember ::= attendeeAt::ConferenceEvent isMemberOf::conference hasFirstName::String hasBiography::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person send::Activity added_by::Person ;
ConferenceEvent ::= NonAcademicEvent ;
 ConferenceEvent ::= AcademicEvent ;
 ConferenceEvent ::= hasAttendee::Person hasLocation::Place hasProgramme::Programme hasEndDateTime::dateTime hasStartDateTime::dateTime ;
Assistant ::= attendeeAt::ConferenceEvent isMemberOf::conference hasFirstName::String hasBiography::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person send::Activity added_by::Person ;
Conference_document ::= Conference_contribution ;
 Conference_document ::= Information_for_participants ;
 Conference_document ::= Call_for_paper ;
 Conference_document ::= Conference_announcement ;
 Conference_document ::= Call_for_participation ;
 Conference_document ::= Conference_www ;
 Conference_document ::= has_authors::Person has_a_date_of_issue::date ;
Registration_of_participants_event ::= follows::Administrative_event parallel_with::Administrative_event ;
MobileComputingTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Camera_Ready_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
CommunicationTheoryTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
CallForPapers ::= forEvent::AcademicEvent (isInitiatedBy::Person)+ hasSubmissionInstructions::String hasSubmissionDeadline::dateTime ;
CommunicationsTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
SecurityTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
University ::= scientificallyOrganises::Academic_Institution isProviderOf::Sponsorship ;
PaperAbstract ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Administrator ::= approve::Event assign::Role finalizePaperAssignment::conference runPaperAssignmentTools::conference enableVirtualMeeting::conference startReviewerBidding::conference assignReviewer::Reviewer rejectPaper::Paper enterConferenceDetails::conference printHardcopyMailingManifests::conference setMaxPapers::ProgramCommitteeMember enterReviewCriteria::conference acceptPaper::Paper addProgramCommitteeMember::ProgramCommitteeMember ;
Author ::= AuthorNotReviewer ;
 Author ::= Co-author ;
 Author ::= Corresponding_Author ;
 Author ::= Presenter ;
 Author ::= writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper submitPaper::Paper writePaper::Paper writes::Contribution ;
Conference_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Workshop ::= hasTopic::Topic hasAdministrativeEvent::Administrative_event ;
Negative_Review ::= reviewOfPaper::Paper reviewWrittenBy::Possible_Reviewer writtenBy::Reviewer reviews::Reviewed_contribution gives_classification::classification is_created_in::activity review_written_by::Reviewer ;
ComputerArchitectureTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
abstract_of_paper ::= article_written_by::Author has_reviewer::Reviewer has_abstract::Abstract goes_through::activity is_sent_to::human is_created_in::activity structure_created_by::human has_author::human gives_classification::classification ;
AntennasTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
MicroelectronicsTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
conference_setup ::= sets_member::human is_made_by::human includes_topic::Topic sets_date::date sets_URL::URL ;
Template ::= (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document recieved_by::User used_by::Person submited__by::User ;
Member_PC ::= expertOn::Topic reviewes::Contribution ;
session ::= (eventOnList::Thing)+ partOfEvent::Event hasEvent::Event (organisedBy::Thing)+ heldIn::Location conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator starts_on::String ends_on::String has_startdate::dateTime has_enddate::dateTime ;
Chairman ::= ConferenceChair ;
 Chairman ::= AssociatedChair ;
 Chairman ::= ProgramCommitteeChair ;
 Chairman ::= attendeeAt::ConferenceEvent isMemberOf::conference hasFirstName::String hasBiography::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person send::Activity added_by::Person memberOfConference::conference ;
Contact_Person ::= is_author_of::article performs_activity::activity is_employed_in::institute has_topic_of_interest::Topic supervises::activity e-mail::String last_name::String first_name::String ;
Web_Site ::= (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document recieved_by::User used_by::Person submited__by::User ;
RejectedPaper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
ParallelAndDistributedComputingTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Rejected_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
 Rejected_Paper ::= hasReview::Review ;
Event_Approval ::= has_result::article sent_by::Person ;
Invited_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Reviewing_event ::= follows::Administrative_event parallel_with::Administrative_event ;
MultimediaTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
program ::= program_created_by::chair has_session::session ;
CryptographyTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Call ::= CallForPapers ;
 Call ::= CallForReviews ;
 Call ::= CallForManuscripts ;
 Call ::= forEvent::AcademicEvent (isInitiatedBy::Person)+ hasSubmissionInstructions::String hasSubmissionDeadline::dateTime ;
Tutorial ::= hasTopic::Topic hasAdministrativeEvent::Administrative_event ;
Conference_volume ::= has_parts::Conference_part has_workshops::Workshop has_tracks::Track has_tutorials::Tutorial has_a_commtitee::Committee has_a_steering_committee::Steering_committee has_an_organizing_committee::Organizing_committee has_important_dates::Important_dates has_contributions::Conference_contribution has_a_location::String has_a_program_committee::Program_committee ;
Event ::= Symposium ;
 Event ::= Social_event ;
 Event ::= Administrative_event ;
 Event ::= Working_event ;
 Event ::= pc_meeting ;
 Event ::= session ;
 Event ::= Social_Event ;
 Event ::= Scientific_Event ;
 Event ::= (eventOnList::Thing)+ partOfEvent::Event hasEvent::Event (organisedBy::Thing)+ heldIn::Location conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator starts_on::String ends_on::String has_startdate::dateTime has_enddate::dateTime ;
Review ::= Meta-Review ;
 Review ::= Positive_Review ;
 Review ::= Negative_Review ;
 Review ::= Neutral_Review ;
 Review ::= reviewOfPaper::Paper reviewWrittenBy::Possible_Reviewer writtenBy::Reviewer reviews::Reviewed_contribution gives_classification::classification is_created_in::activity review_written_by::Reviewer ;
Person ::= ConferenceMember ;
 Person ::= ExternalReviewer ;
 Person ::= User ;
 Person ::= Conference_participant ;
 Person ::= Conference_contributor ;
 Person ::= Committee_member ;
 Person ::= Conference_applicant ;
 Person ::= Track-workshop_chair ;
 Person ::= Scholar ;
 Person ::= Participant ;
 Person ::= Member_PC ;
 Person ::= Chair_PC ;
 Person ::= Science_Worker ;
 Person ::= Assistant ;
 Person ::= Volunteer ;
 Person ::= chair ;
 Person ::= participant ;
 Person ::= ConferenceChair ;
 Person ::= Attendee ;
 Person ::= SessionChair ;
 Person ::= TPCMember ;
 Person ::= Paper_Author ;
 Person ::= Conference_Participant ;
 Person ::= Agency_Staff_Member ;
 Person ::= Possible_Reviewer ;
 Person ::= Student ;
 Person ::= ProgramCommitteeMember ;
 Person ::= Chairman ;
 Person ::= Reviewer ;
 Person ::= Administrator ;
 Person ::= attendeeAt::ConferenceEvent isMemberOf::conference hasFirstName::String hasBiography::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person send::Activity added_by::Person ;
ProgramCommitteeMember ::= ProgramCommitteeChair ;
 ProgramCommitteeMember ::= memberOfProgramCommittee::ProgramCommittee maxPapers::Integer addedBy::Administrator ;
Invited_Talk_Abstract ::= part_of_article::article (is_the_1th_part_of::Thing)+ ;
Poster ::= is_submitted_at::Conference_volume ;
 Poster ::= writtenBy::Author dealsWith::Topic remark::String abstract::String contactEmail::String hasKeyword::String hasTitle::String ;
Paper ::= PaperAbstract ;
 Paper ::= PaperFullVersion ;
 Paper ::= Invited_Paper ;
 Paper ::= Short_Paper ;
 Paper ::= Full_Paper ;
 Paper ::= Accepted_Paper ;
 Paper ::= Rejected_Paper ;
 Paper ::= Undecided_Paper ;
 Paper ::= ActivePaper ;
 Paper ::= PendingPaper ;
 Paper ::= WithdrawnPaper ;
 Paper ::= RejectedPaper ;
 Paper ::= AcceptedPaper ;
 Paper ::= PublishedPaper ;
 Paper ::= Camera_Ready_Paper ;
 Paper ::= Workshop_Paper ;
 Paper ::= Industrial_Paper ;
 Paper ::= Conference_Paper ;
 Paper ::= Submitted_Paper ;
 Paper ::= Poster_Paper ;
 Paper ::= Regular_Paper ;
 Paper ::= Demo_Paper ;
 Paper ::= Abstract ;
 Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Submission ::= (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document recieved_by::User used_by::Person submited__by::User ;
Volunteer ::= attendeeAt::ConferenceEvent isMemberOf::conference hasFirstName::String hasBiography::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person send::Activity added_by::Person ;
Conference_announcement ::= has_authors::Person has_a_date_of_issue::date ;
Administrative_event ::= Reviewing_results_event ;
 Administrative_event ::= Reviewing_event ;
 Administrative_event ::= Registration_of_participants_event ;
 Administrative_event ::= Submission_event ;
 Administrative_event ::= Camera_Ready_event ;
 Administrative_event ::= follows::Administrative_event parallel_with::Administrative_event ;
WithdrawnPaper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Program_Committee_Chair ::= is_author_of::article performs_activity::activity is_employed_in::institute has_topic_of_interest::Topic supervises::activity e-mail::String last_name::String first_name::String ;
paper_assignment ::= Manual_Paper_Assignment ;
 paper_assignment ::= Automatic_Paper_Assignment ;
 paper_assignment ::= assign_paper::Program_Committee_member is_performed_by::human ;
Positive_Review ::= reviewOfPaper::Paper reviewWrittenBy::Possible_Reviewer writtenBy::Reviewer reviews::Reviewed_contribution gives_classification::classification is_created_in::activity review_written_by::Reviewer ;
PublishedPaper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Committee ::= Program_committee ;
 Committee ::= Organizing_committee ;
 Committee ::= Steering_committee ;
 Committee ::= has_members::Committee_member was_a_committee_of::Conference_volume has_a_committee_co-chair::Co-chair has_a_committee_chair::Chair ;
Corresponding_Author ::= writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper submitPaper::Paper writePaper::Paper writes::Contribution ;
PendingPaper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Symposium ::= (eventOnList::Thing)+ partOfEvent::Event hasEvent::Event (organisedBy::Thing)+ heldIn::Location conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator starts_on::String ends_on::String has_startdate::dateTime has_enddate::dateTime ;
PowerlineTransmissionTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
TestOnlyTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Undecided_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
AuthorNotReviewer ::= writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper submitPaper::Paper writePaper::Paper writes::Contribution ;
Industrial_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Abstract ::= Tutorial_Abstract ;
 Abstract ::= Invited_Talk_Abstract ;
 Abstract ::= part_of_article::article (is_the_1th_part_of::Thing)+ ;
Flyer ::= (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document recieved_by::User used_by::Person submited__by::User ;
Organising_Agency ::= (publisherOf::Thing)+ technicallyOrganises::Thing ;
PaperFullVersion ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Document ::= Email ;
 Document ::= Submission ;
 Document ::= Template ;
 Document ::= article ;
 Document ::= SlideSet ;
 Document ::= Programme ;
 Document ::= MealMenu ;
 Document ::= Programme_Brochure ;
 Document ::= Flyer ;
 Document ::= Web_Site ;
 Document ::= Multi-author_Volume ;
 Document ::= Paper ;
 Document ::= (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document recieved_by::User used_by::Person submited__by::User ;
SingleLevelConference ::= is_in_phase::phase_of_conference hasMember::Person hasName::String endDate::dateTime paperDueOn::dateTime registrationDueOn::dateTime manuscriptDueOn::dateTime startDate::dateTime hasCountry::Country hasConferenceMember::ConferenceMember paperAssignmentFinalizedBy::Administrator reviewCriteriaEnteredBy::Administrator paperAssignmentToolsRunBy::Administrator virtualMeetingEnabledBy::Administrator hardcopyMailingManifestsPrintedBy::Administrator detailsEnteredBy::Administrator reviewerBiddingStartedBy::Administrator date::date reviewsPerPaper::Integer logoURL::anyURI acceptsHardcopySubmissions::Boolean siteURL::anyURI has_program::program ;
Sponsorship ::= TravelGrant ;
 Sponsorship ::= providedBy::Organization hasCostCurrency::String hasCostAmount::Integer ;
WirelessCommunicationsTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Demo_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
CallForReviews ::= forEvent::AcademicEvent (isInitiatedBy::Person)+ hasSubmissionInstructions::String hasSubmissionDeadline::dateTime ;
Contribution ::= Poster ;
 Contribution ::= Short_paper ;
 Contribution ::= writtenBy::Author dealsWith::Topic remark::String abstract::String contactEmail::String hasKeyword::String hasTitle::String ;
Activity ::= Event_Creation ;
 Activity ::= Request ;
 Activity ::= Event_Approval ;
 Activity ::= Registration ;
 Activity ::= has_result::article sent_by::Person ;
human ::= Program_Committee_member ;
 human ::= Contact_Person ;
 human ::= Program_Committee_Chair ;
 human ::= is_author_of::article performs_activity::activity is_employed_in::institute has_topic_of_interest::Topic supervises::activity e-mail::String last_name::String first_name::String ;
Track ::= has_a_track-workshop-tutorial_topic::Topic is_part_of_conference_volumes::Conference_volume has_a_track-workshop-tutorial_chair::Track-workshop_chair ;
CADTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Information_for_participants ::= has_authors::Person has_a_date_of_issue::date ;
Programme_Brochure ::= (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document recieved_by::User used_by::Person submited__by::User ;
Reviewer ::= Meta-Reviewer ;
 Reviewer ::= assignedByAdministrator::Administrator adjustBid::Bid readPaper::Paper hasBeenAssigned::Paper writeReview::Review assignExternalReviewer::ExternalReviewer invites_co-reviewers::Reviewer invited_by::Reviewer (has_a_review_reference_or_expertise::Thing)+ writes_review::Review hasReviewHistory::PersonalReviewHistory ;
Event_Creation ::= has_result::article sent_by::Person ;
Meta-Review ::= reviewOfPaper::Paper reviewWrittenBy::Possible_Reviewer writtenBy::Reviewer reviews::Reviewed_contribution gives_classification::classification is_created_in::activity review_written_by::Reviewer ;
conference ::= Conference_volume ;
 conference ::= TwoLevelConference ;
 conference ::= SingleLevelConference ;
 conference ::= is_in_phase::phase_of_conference hasMember::Person hasName::String endDate::dateTime paperDueOn::dateTime registrationDueOn::dateTime manuscriptDueOn::dateTime startDate::dateTime hasCountry::Country hasConferenceMember::ConferenceMember paperAssignmentFinalizedBy::Administrator reviewCriteriaEnteredBy::Administrator paperAssignmentToolsRunBy::Administrator virtualMeetingEnabledBy::Administrator hardcopyMailingManifestsPrintedBy::Administrator detailsEnteredBy::Administrator reviewerBiddingStartedBy::Administrator date::date reviewsPerPaper::Integer logoURL::anyURI acceptsHardcopySubmissions::Boolean siteURL::anyURI has_program::program ;
Student ::= earlyRegistration::Boolean ;
 Student ::= attendeeAt::ConferenceEvent isMemberOf::conference hasFirstName::String hasBiography::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person send::Activity added_by::Person ;
Poster_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
managing_of_conference_process ::= is_followed_by::activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human ;
Conference_part ::= Track ;
 Conference_part ::= has_a_track-workshop-tutorial_topic::Topic is_part_of_conference_volumes::Conference_volume has_a_track-workshop-tutorial_chair::Track-workshop_chair ;
Call_for_paper ::= has_authors::Person has_a_date_of_issue::date ;
SlideSet ::= (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document recieved_by::User used_by::Person submited__by::User ;
Neutral_Review ::= reviewOfPaper::Paper reviewWrittenBy::Possible_Reviewer writtenBy::Reviewer reviews::Reviewed_contribution gives_classification::classification is_created_in::activity review_written_by::Reviewer ;
Topic ::= ParallelAndDistributedComputingTopic ;
 Topic ::= WirelessCommunicationsTopic ;
 Topic ::= OperatingTopicsystems ;
 Topic ::= ComputerNetworksTopic ;
 Topic ::= SatelliteAndSpaceCommunicationsTopic ;
 Topic ::= CADTopic ;
 Topic ::= MultimediaTopic ;
 Topic ::= CommunicationsTopic ;
 Topic ::= PowerlineTransmissionTopic ;
 Topic ::= AntennasTopic ;
 Topic ::= PerformanceTopic ;
 Topic ::= SignalProcessingTopic ;
 Topic ::= MicroelectronicsTopic ;
 Topic ::= TestOnlyTopic ;
 Topic ::= RadioCommunicationsTopic ;
 Topic ::= ComputerArchitectureTopic ;
 Topic ::= MedicineTopic ;
 Topic ::= SecurityTopic ;
 Topic ::= MobileComputingTopic ;
 Topic ::= CryptographyTopic ;
 Topic ::= CommunicationTheoryTopic ;
 Topic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
activity ::= paper_assignment ;
 activity ::= bidding_of_reviewer ;
 activity ::= managing_of_conference_process ;
 activity ::= reviewing_proces ;
 activity ::= notification ;
 activity ::= submission_process ;
 activity ::= is_followed_by::activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human ;
ContactInformation ::= hasCity::String hasStreet::String hasPostalCode::String hasPhone::String ;
Review_expertise ::= has_a_submitted_contribution::Submitted_contribution has_an_expertise::EEnum ;
Important_dates ::= is_an_abstract_submission_date::date is_a_full_paper_submission_date::date is_an_ending_date::date is_a_date_of_acceptance_announcement::date is_a_date_of_camera_ready_paper_submission::date is_a_starting_date::date belong_to_a_conference_volume::Conference_volume ;
Submission_event ::= follows::Administrative_event parallel_with::Administrative_event ;
TravelGrant ::= providedBy::Organization hasCostCurrency::String hasCostAmount::Integer ;
Review_preference ::= (has_a_topic_or_a_submission_contribution::Thing)+ has_a_degree::Integer ;
--------------------metamodels::iasted.owl.bgf--------------------
PerformanceTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Sponzorship ::= is_paid_with::Item is_paid_by::Person is_paid_in::Building (is_paid_for::Thing)+ has_amount_of::Money ;
Proceedings_Publisher ::= (publisherOf::Thing)+ technicallyOrganises::Thing ;
Conference_proceedings ::= has_an_ISBN::String has_a_publisher::Publisher has_a_volume::String ;
Reviewing_results_event ::= follows::Administrative_event parallel_with::Administrative_event ;
Sponsor ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasConflictOfInterest::Document email::String ;
Organisation ::= Organising_Agency ;
 Organisation ::= Academic_Institution ;
 Organisation ::= Proceedings_Publisher ;
 Organisation ::= (publisherOf::Thing)+ technicallyOrganises::Thing ;
Science_Worker ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasConflictOfInterest::Document email::String ;
RadioCommunicationsTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
article ::= group_email ;
 article ::= notification_email ;
 article ::= abstract_of_paper ;
 article ::= review_form ;
 article ::= summary_of_reviews ;
 article ::= Review ;
 article ::= goes_through::Activity is_sent_to::human is_created_in::Activity structure_created_by::human has_author::human gives_classification::classification article_written_by::Author has_reviewer::Reviewer has_abstract::Abstract ;
MedicineTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
AccommodationPlace ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
TwoLevelConference ::= is_in_phase::phase_of_conference has_program::program hasMember::Person hasName::String endDate::dateTime paperDueOn::dateTime registrationDueOn::dateTime manuscriptDueOn::dateTime startDate::dateTime hasCountry::Country hasConferenceMember::ConferenceMember paperAssignmentFinalizedBy::Administrator reviewCriteriaEnteredBy::Administrator paperAssignmentToolsRunBy::Administrator virtualMeetingEnabledBy::Administrator hardcopyMailingManifestsPrintedBy::Administrator detailsEnteredBy::Administrator reviewerBiddingStartedBy::Administrator date::date reviewsPerPaper::Integer logoURL::anyURI acceptsHardcopySubmissions::Boolean siteURL::anyURI ;
SignalProcessingTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Accepted_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
 Accepted_Paper ::= hasReview::Review ;
Agency_Staff_Member ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasConflictOfInterest::Document email::String ;
SessionChair ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasConflictOfInterest::Document email::String ;
pc_meeting ::= conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator starts_on::String ends_on::String has_startdate::dateTime has_enddate::dateTime (eventOnList::Thing)+ partOfEvent::Event hasEvent::Event (organisedBy::Thing)+ heldIn::Location ;
Working_event ::= hasTopic::Topic hasAdministrativeEvent::Administrative_event ;
notification ::= has_result::article is_performed_by::human ;
User ::= Committee ;
 User ::= Administrator ;
 User ::= recieve::Document (create::Thing)+ submit::Document ;
Short_paper ::= writtenBy::Author dealsWith::Topic remark::String abstract::String contactEmail::String hasKeyword::String hasTitle::String ;
Regular_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
ConferenceChair ::= memberOfConference::Conference ;
 ConferenceChair ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasConflictOfInterest::Document email::String ;
Place ::= DiningPlace ;
 Place ::= ConferenceVenuePlace ;
 Place ::= MeetingRoomPlace ;
 Place ::= AccommodationPlace ;
 Place ::= Building ;
 Place ::= Session_room ;
 Place ::= Hotel_room ;
 Place ::= Conference_hall ;
 Place ::= Main_office ;
 Place ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
Camera_Ready_event ::= follows::Administrative_event parallel_with::Administrative_event ;
Tutorial_Abstract ::= part_of_article::article (is_the_1th_part_of::Thing)+ ;
Main_office ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
CallForManuscripts ::= forEvent::AcademicEvent (isInitiatedBy::Person)+ hasSubmissionInstructions::String hasSubmissionDeadline::dateTime ;
Paper_Author ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasConflictOfInterest::Document email::String ;
group_email ::= goes_through::Activity is_sent_to::human is_created_in::Activity structure_created_by::human has_author::human gives_classification::classification article_written_by::Author has_reviewer::Reviewer has_abstract::Abstract ;
Full_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
Attendee ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasConflictOfInterest::Document email::String ;
Registration ::= (has_result::Thing)+ sent_by::Person is_followed_by::Activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human is_held_before::Time (is_held_in::Trip_day)+ is_held_after::Time is_dated_on::dateTime ;
 Registration ::= ε ;
OperatingTopicsystems ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Workshop_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
Chair_PC ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasConflictOfInterest::Document email::String ;
Meta-Reviewer ::= invites_co-reviewers::Reviewer invited_by::Reviewer (has_a_review_reference_or_expertise::Thing)+ writes_review::Review hasReviewHistory::PersonalReviewHistory assignedByAdministrator::Administrator adjustBid::Bid readPaper::Paper hasBeenAssigned::Paper writeReview::Review assignExternalReviewer::ExternalReviewer ;
Call_for_participation ::= has_authors::Person has_a_date_of_issue::date ;
Short_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
SatelliteAndSpaceCommunicationsTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
chair ::= assigns_reviewers_to_article::Reviewer creates_program::program ;
TPCMember ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasConflictOfInterest::Document email::String ;
ConferenceEvent ::= NonAcademicEvent ;
 ConferenceEvent ::= AcademicEvent ;
 ConferenceEvent ::= hasAttendee::Person hasLocation::Place hasProgramme::Programme hasEndDateTime::dateTime hasStartDateTime::dateTime ;
Assistant ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasConflictOfInterest::Document email::String ;
Conference_document ::= Conference_contribution ;
 Conference_document ::= Information_for_participants ;
 Conference_document ::= Call_for_paper ;
 Conference_document ::= Conference_announcement ;
 Conference_document ::= Call_for_participation ;
 Conference_document ::= Conference_www ;
 Conference_document ::= has_authors::Person has_a_date_of_issue::date ;
Registration_of_participants_event ::= follows::Administrative_event parallel_with::Administrative_event ;
MobileComputingTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Camera_Ready_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
CommunicationTheoryTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Mailing_list ::= recieved_by::User used_by::Person submited__by::User (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document ;
CallForPapers ::= forEvent::AcademicEvent (isInitiatedBy::Person)+ hasSubmissionInstructions::String hasSubmissionDeadline::dateTime ;
CommunicationsTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
SecurityTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
DiningPlace ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
University ::= isProviderOf::Sponsorship scientificallyOrganises::Academic_Institution ;
PaperAbstract ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
Administrator ::= finalizePaperAssignment::Conference runPaperAssignmentTools::Conference enableVirtualMeeting::Conference startReviewerBidding::Conference assignReviewer::Reviewer rejectPaper::Paper enterConferenceDetails::Conference printHardcopyMailingManifests::Conference setMaxPapers::ProgramCommitteeMember enterReviewCriteria::Conference acceptPaper::Paper addProgramCommitteeMember::ProgramCommitteeMember approve::Event assign::Role ;
Author ::= AuthorNotReviewer ;
 Author ::= Co-author ;
 Author ::= Corresponding_Author ;
 Author ::= Author_cd_proceedings_included ;
 Author ::= Lecturer ;
 Author ::= Plenary_lecture_speaker ;
 Author ::= Tutorial_speaker ;
 Author ::= Author_book_proceedings_included ;
 Author ::= Presenter ;
 Author ::= submitPaper::Paper writePaper::Paper writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper ;
Conference_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
Negative_Review ::= writtenBy::Reviewer reviews::Reviewed_contribution gives_classification::classification is_created_in::Activity review_written_by::Reviewer reviewOfPaper::Paper reviewWrittenBy::Possible_Reviewer ;
ComputerArchitectureTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
abstract_of_paper ::= goes_through::Activity is_sent_to::human is_created_in::Activity structure_created_by::human has_author::human gives_classification::classification article_written_by::Author has_reviewer::Reviewer has_abstract::Abstract ;
Money ::= Tax ;
 Money ::= Fee ;
 Money ::= Sponzorship ;
 Money ::= Tip ;
 Money ::= is_paid_with::Item is_paid_by::Person is_paid_in::Building (is_paid_for::Thing)+ has_amount_of::Money ;
AntennasTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
MicroelectronicsTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
conference_setup ::= sets_member::human is_made_by::human includes_topic::Topic sets_date::date sets_URL::URL ;
Template ::= recieved_by::User used_by::Person submited__by::User (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document ;
Member_PC ::= expertOn::Topic reviewes::Contribution ;
session ::= conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator starts_on::String ends_on::String has_startdate::dateTime has_enddate::dateTime (eventOnList::Thing)+ partOfEvent::Event hasEvent::Event (organisedBy::Thing)+ heldIn::Location ;
Chairman ::= ConferenceChair ;
 Chairman ::= AssociatedChair ;
 Chairman ::= ProgramCommitteeChair ;
 Chairman ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasConflictOfInterest::Document email::String memberOfConference::Conference ;
Contact_Person ::= is_author_of::article performs_activity::Activity is_employed_in::institute has_topic_of_interest::Topic supervises::Activity e-mail::String last_name::String first_name::String ;
Web_Site ::= recieved_by::User used_by::Person submited__by::User (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document ;
RejectedPaper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
ParallelAndDistributedComputingTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Rejected_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
 Rejected_Paper ::= hasReview::Review ;
Event_Approval ::= (has_result::Thing)+ sent_by::Person is_followed_by::Activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human is_held_before::Time (is_held_in::Trip_day)+ is_held_after::Time is_dated_on::dateTime ;
Invited_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
Reviewing_event ::= follows::Administrative_event parallel_with::Administrative_event ;
MultimediaTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
program ::= program_created_by::chair has_session::session ;
CryptographyTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Plenary_lecture_speaker ::= submitPaper::Paper writePaper::Paper writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper ;
Author_book_proceedings_included ::= submitPaper::Paper writePaper::Paper writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper ;
Call ::= CallForPapers ;
 Call ::= CallForReviews ;
 Call ::= CallForManuscripts ;
 Call ::= forEvent::AcademicEvent (isInitiatedBy::Person)+ hasSubmissionInstructions::String hasSubmissionDeadline::dateTime ;
Tutorial ::= has_a_track-workshop-tutorial_topic::Topic is_part_of_conference_volumes::Conference_volume has_a_track-workshop-tutorial_chair::Track-workshop_chair ;
Conference_volume ::= has_parts::Conference_part has_workshops::Workshop has_tracks::Track has_tutorials::Tutorial has_a_commtitee::Committee has_a_steering_committee::Steering_committee has_an_organizing_committee::Organizing_committee has_important_dates::Important_dates has_contributions::Conference_contribution has_a_location::String has_a_program_committee::Program_committee ;
Tip ::= is_paid_with::Item is_paid_by::Person is_paid_in::Building (is_paid_for::Thing)+ has_amount_of::Money ;
Event ::= Symposium ;
 Event ::= Social_event ;
 Event ::= Administrative_event ;
 Event ::= Working_event ;
 Event ::= pc_meeting ;
 Event ::= session ;
 Event ::= Social_Event ;
 Event ::= Scientific_Event ;
 Event ::= conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator starts_on::String ends_on::String has_startdate::dateTime has_enddate::dateTime (eventOnList::Thing)+ partOfEvent::Event hasEvent::Event (organisedBy::Thing)+ heldIn::Location ;
Review ::= Meta-Review ;
 Review ::= Positive_Review ;
 Review ::= Negative_Review ;
 Review ::= Neutral_Review ;
 Review ::= writtenBy::Reviewer reviews::Reviewed_contribution gives_classification::classification is_created_in::Activity review_written_by::Reviewer reviewOfPaper::Paper reviewWrittenBy::Possible_Reviewer ;
Transparency ::= recieved_by::User used_by::Person submited__by::User (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document ;
Person ::= ConferenceMember ;
 Person ::= ExternalReviewer ;
 Person ::= User ;
 Person ::= Conference_participant ;
 Person ::= Conference_contributor ;
 Person ::= Committee_member ;
 Person ::= Conference_applicant ;
 Person ::= Track-workshop_chair ;
 Person ::= Scholar ;
 Person ::= Participant ;
 Person ::= Member_PC ;
 Person ::= Chair_PC ;
 Person ::= Science_Worker ;
 Person ::= Assistant ;
 Person ::= Volunteer ;
 Person ::= chair ;
 Person ::= participant ;
 Person ::= ConferenceChair ;
 Person ::= Attendee ;
 Person ::= SessionChair ;
 Person ::= TPCMember ;
 Person ::= Paper_Author ;
 Person ::= Conference_Participant ;
 Person ::= Agency_Staff_Member ;
 Person ::= Possible_Reviewer ;
 Person ::= Student ;
 Person ::= Delegate ;
 Person ::= Sponsor ;
 Person ::= ProgramCommitteeMember ;
 Person ::= Chairman ;
 Person ::= Administrator ;
 Person ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasConflictOfInterest::Document email::String ;
ProgramCommitteeMember ::= ProgramCommitteeChair ;
 ProgramCommitteeMember ::= memberOfProgramCommittee::ProgramCommittee maxPapers::Integer addedBy::Administrator ;
Invited_Talk_Abstract ::= part_of_article::article (is_the_1th_part_of::Thing)+ ;
Poster ::= is_submitted_at::Conference_volume ;
 Poster ::= writtenBy::Author dealsWith::Topic remark::String abstract::String contactEmail::String hasKeyword::String hasTitle::String ;
Invitation_letter ::= recieved_by::User used_by::Person submited__by::User (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document ;
Paper ::= PaperAbstract ;
 Paper ::= PaperFullVersion ;
 Paper ::= Invited_Paper ;
 Paper ::= Short_Paper ;
 Paper ::= Full_Paper ;
 Paper ::= Accepted_Paper ;
 Paper ::= Rejected_Paper ;
 Paper ::= Undecided_Paper ;
 Paper ::= ActivePaper ;
 Paper ::= PendingPaper ;
 Paper ::= WithdrawnPaper ;
 Paper ::= RejectedPaper ;
 Paper ::= AcceptedPaper ;
 Paper ::= PublishedPaper ;
 Paper ::= Camera_Ready_Paper ;
 Paper ::= Workshop_Paper ;
 Paper ::= Industrial_Paper ;
 Paper ::= Conference_Paper ;
 Paper ::= Submitted_Paper ;
 Paper ::= Poster_Paper ;
 Paper ::= Regular_Paper ;
 Paper ::= Demo_Paper ;
 Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
Volunteer ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasConflictOfInterest::Document email::String ;
Conference_announcement ::= has_authors::Person has_a_date_of_issue::date ;
Administrative_event ::= Reviewing_results_event ;
 Administrative_event ::= Reviewing_event ;
 Administrative_event ::= Registration_of_participants_event ;
 Administrative_event ::= Submission_event ;
 Administrative_event ::= Camera_Ready_event ;
 Administrative_event ::= follows::Administrative_event parallel_with::Administrative_event ;
WithdrawnPaper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
Program_Committee_Chair ::= is_author_of::article performs_activity::Activity is_employed_in::institute has_topic_of_interest::Topic supervises::Activity e-mail::String last_name::String first_name::String ;
Brief_introduction_for_Session_chair ::= recieved_by::User used_by::Person submited__by::User (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document ;
paper_assignment ::= Manual_Paper_Assignment ;
 paper_assignment ::= Automatic_Paper_Assignment ;
 paper_assignment ::= assign_paper::Program_Committee_member is_performed_by::human ;
Positive_Review ::= writtenBy::Reviewer reviews::Reviewed_contribution gives_classification::classification is_created_in::Activity review_written_by::Reviewer reviewOfPaper::Paper reviewWrittenBy::Possible_Reviewer ;
PublishedPaper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
Committee ::= Program_committee ;
 Committee ::= Organizing_committee ;
 Committee ::= Steering_committee ;
 Committee ::= has_members::Committee_member was_a_committee_of::Conference_volume has_a_committee_co-chair::Co-chair has_a_committee_chair::Chair ;
Conference_hall ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
Corresponding_Author ::= submitPaper::Paper writePaper::Paper writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper ;
PendingPaper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
Symposium ::= conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator starts_on::String ends_on::String has_startdate::dateTime has_enddate::dateTime (eventOnList::Thing)+ partOfEvent::Event hasEvent::Event (organisedBy::Thing)+ heldIn::Location ;
PowerlineTransmissionTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
TestOnlyTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Undecided_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
AuthorNotReviewer ::= submitPaper::Paper writePaper::Paper writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper ;
Industrial_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
Abstract ::= Tutorial_Abstract ;
 Abstract ::= Invited_Talk_Abstract ;
 Abstract ::= part_of_article::article (is_the_1th_part_of::Thing)+ ;
Flyer ::= recieved_by::User used_by::Person submited__by::User (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document ;
Tutorial_speaker ::= submitPaper::Paper writePaper::Paper writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper ;
Organising_Agency ::= (publisherOf::Thing)+ technicallyOrganises::Thing ;
PaperFullVersion ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
Conference ::= Conference_volume ;
 Conference ::= TwoLevelConference ;
 Conference ::= SingleLevelConference ;
 Conference ::= is_in_phase::phase_of_conference has_program::program hasMember::Person hasName::String endDate::dateTime paperDueOn::dateTime registrationDueOn::dateTime manuscriptDueOn::dateTime startDate::dateTime hasCountry::Country hasConferenceMember::ConferenceMember paperAssignmentFinalizedBy::Administrator reviewCriteriaEnteredBy::Administrator paperAssignmentToolsRunBy::Administrator virtualMeetingEnabledBy::Administrator hardcopyMailingManifestsPrintedBy::Administrator detailsEnteredBy::Administrator reviewerBiddingStartedBy::Administrator date::date reviewsPerPaper::Integer logoURL::anyURI acceptsHardcopySubmissions::Boolean siteURL::anyURI ;
Document ::= Email ;
 Document ::= Submission ;
 Document ::= Template ;
 Document ::= article ;
 Document ::= SlideSet ;
 Document ::= Programme ;
 Document ::= MealMenu ;
 Document ::= Programme_Brochure ;
 Document ::= Flyer ;
 Document ::= Web_Site ;
 Document ::= Multi-author_Volume ;
 Document ::= Form ;
 Document ::= Mailing_list ;
 Document ::= Record_of_attendance ;
 Document ::= Brief_introduction_for_Session_chair ;
 Document ::= Invitation_letter ;
 Document ::= Viza ;
 Document ::= Transparency ;
 Document ::= Payment_document ;
 Document ::= recieved_by::User used_by::Person submited__by::User (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document ;
Viza ::= recieved_by::User used_by::Person submited__by::User (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document ;
SingleLevelConference ::= is_in_phase::phase_of_conference has_program::program hasMember::Person hasName::String endDate::dateTime paperDueOn::dateTime registrationDueOn::dateTime manuscriptDueOn::dateTime startDate::dateTime hasCountry::Country hasConferenceMember::ConferenceMember paperAssignmentFinalizedBy::Administrator reviewCriteriaEnteredBy::Administrator paperAssignmentToolsRunBy::Administrator virtualMeetingEnabledBy::Administrator hardcopyMailingManifestsPrintedBy::Administrator detailsEnteredBy::Administrator reviewerBiddingStartedBy::Administrator date::date reviewsPerPaper::Integer logoURL::anyURI acceptsHardcopySubmissions::Boolean siteURL::anyURI ;
Sponsorship ::= TravelGrant ;
 Sponsorship ::= providedBy::Organization hasCostCurrency::String hasCostAmount::Integer ;
ConferenceVenuePlace ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
WirelessCommunicationsTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Item ::= Transport_vehicle ;
 Item ::= Card ;
 Item ::= Audiovisual_equipment ;
 Item ::= Publication ;
 Item ::= Document ;
 Item ::= go_through::Activity (is_used_for::Thing)+ is_signed_by::Person is_made_from::Item is_sent_after::Time is_needed_for::Person is_sent_before::Time is_prepared_by::Person is_used_by::Person is_given_to::Person is_sent_by::Person is_writen_by::Person ;
Demo_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
CallForReviews ::= forEvent::AcademicEvent (isInitiatedBy::Person)+ hasSubmissionInstructions::String hasSubmissionDeadline::dateTime ;
Contribution ::= Poster ;
 Contribution ::= Short_paper ;
 Contribution ::= Paper ;
 Contribution ::= writtenBy::Author dealsWith::Topic remark::String abstract::String contactEmail::String hasKeyword::String hasTitle::String ;
Activity ::= Event_Creation ;
 Activity ::= Request ;
 Activity ::= Event_Approval ;
 Activity ::= Registration ;
 Activity ::= paper_assignment ;
 Activity ::= bidding_of_reviewer ;
 Activity ::= managing_of_conference_process ;
 Activity ::= reviewing_proces ;
 Activity ::= notification ;
 Activity ::= submission_process ;
 Activity ::= Activity_before_conference ;
 Activity ::= Conference_activity ;
 Activity ::= Activity_after_conference ;
 Activity ::= (has_result::Thing)+ sent_by::Person is_followed_by::Activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human is_held_before::Time (is_held_in::Trip_day)+ is_held_after::Time is_dated_on::dateTime ;
human ::= Program_Committee_member ;
 human ::= Contact_Person ;
 human ::= Program_Committee_Chair ;
 human ::= is_author_of::article performs_activity::Activity is_employed_in::institute has_topic_of_interest::Topic supervises::Activity e-mail::String last_name::String first_name::String ;
Track ::= has_a_track-workshop-tutorial_topic::Topic is_part_of_conference_volumes::Conference_volume has_a_track-workshop-tutorial_chair::Track-workshop_chair ;
CADTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Information_for_participants ::= has_authors::Person has_a_date_of_issue::date ;
Programme_Brochure ::= recieved_by::User used_by::Person submited__by::User (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document ;
Reviewer ::= Meta-Reviewer ;
 Reviewer ::= invites_co-reviewers::Reviewer invited_by::Reviewer (has_a_review_reference_or_expertise::Thing)+ writes_review::Review hasReviewHistory::PersonalReviewHistory assignedByAdministrator::Administrator adjustBid::Bid readPaper::Paper hasBeenAssigned::Paper writeReview::Review assignExternalReviewer::ExternalReviewer ;
Event_Creation ::= (has_result::Thing)+ sent_by::Person is_followed_by::Activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human is_held_before::Time (is_held_in::Trip_day)+ is_held_after::Time is_dated_on::dateTime ;
Meta-Review ::= writtenBy::Reviewer reviews::Reviewed_contribution gives_classification::classification is_created_in::Activity review_written_by::Reviewer reviewOfPaper::Paper reviewWrittenBy::Possible_Reviewer ;
Student ::= earlyRegistration::Boolean ;
 Student ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasConflictOfInterest::Document email::String ;
Poster_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
managing_of_conference_process ::= (has_result::Thing)+ sent_by::Person is_followed_by::Activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human is_held_before::Time (is_held_in::Trip_day)+ is_held_after::Time is_dated_on::dateTime ;
Conference_part ::= Tutorial ;
 Conference_part ::= Track ;
 Conference_part ::= has_a_track-workshop-tutorial_topic::Topic is_part_of_conference_volumes::Conference_volume has_a_track-workshop-tutorial_chair::Track-workshop_chair ;
Call_for_paper ::= has_authors::Person has_a_date_of_issue::date ;
MeetingRoomPlace ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
SlideSet ::= recieved_by::User used_by::Person submited__by::User (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document ;
Neutral_Review ::= writtenBy::Reviewer reviews::Reviewed_contribution gives_classification::classification is_created_in::Activity review_written_by::Reviewer reviewOfPaper::Paper reviewWrittenBy::Possible_Reviewer ;
Topic ::= ParallelAndDistributedComputingTopic ;
 Topic ::= WirelessCommunicationsTopic ;
 Topic ::= OperatingTopicsystems ;
 Topic ::= ComputerNetworksTopic ;
 Topic ::= SatelliteAndSpaceCommunicationsTopic ;
 Topic ::= CADTopic ;
 Topic ::= MultimediaTopic ;
 Topic ::= CommunicationsTopic ;
 Topic ::= PowerlineTransmissionTopic ;
 Topic ::= AntennasTopic ;
 Topic ::= PerformanceTopic ;
 Topic ::= SignalProcessingTopic ;
 Topic ::= MicroelectronicsTopic ;
 Topic ::= TestOnlyTopic ;
 Topic ::= RadioCommunicationsTopic ;
 Topic ::= ComputerArchitectureTopic ;
 Topic ::= MedicineTopic ;
 Topic ::= SecurityTopic ;
 Topic ::= MobileComputingTopic ;
 Topic ::= CryptographyTopic ;
 Topic ::= CommunicationTheoryTopic ;
 Topic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
ContactInformation ::= hasCity::String hasStreet::String hasPostalCode::String hasPhone::String ;
Review_expertise ::= has_a_submitted_contribution::Submitted_contribution has_an_expertise::EEnum ;
Important_dates ::= is_an_abstract_submission_date::date is_a_full_paper_submission_date::date is_an_ending_date::date is_a_date_of_acceptance_announcement::date is_a_date_of_camera_ready_paper_submission::date is_a_starting_date::date belong_to_a_conference_volume::Conference_volume ;
Submission_event ::= follows::Administrative_event parallel_with::Administrative_event ;
Author_cd_proceedings_included ::= submitPaper::Paper writePaper::Paper writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper ;
Session_room ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
Record_of_attendance ::= recieved_by::User used_by::Person submited__by::User (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document ;
TravelGrant ::= providedBy::Organization hasCostCurrency::String hasCostAmount::Integer ;
Review_preference ::= (has_a_topic_or_a_submission_contribution::Thing)+ has_a_degree::Integer ;
--------------------metamodels::ifc2x3.bgf--------------------
IfcSoundProperties ::= IsAttenuating::α SoundScale::α SoundValues::α ;
IfcStructuralLoadSingleForce ::= ForceX::α ForceY::α ForceZ::α MomentX::α MomentY::α MomentZ::α ;
IfcRelContainedInSpatialStructure ::= (RelatedElements::α)+ RelatingStructure::α ;
IfcEllipseProfileDef ::= SemiAxis1::α SemiAxis2::α ;
IfcElectricalBaseProperties ::= ElectricCurrentType::α InputVoltage::α InputFrequency::α FullLoadCurrent::α MinimumCircuitCurrent::α MaximumPowerInput::α RatedPowerInput::α InputPhase::α ;
IfcCalendarDate ::= DayComponent::α MonthComponent::α YearComponent::α ;
IfcRelAssigns ::= (RelatedObjects::α)+ RelatedObjectsType::α ;
IfcOrganizationRelationship ::= Name::α Description::α RelatingOrganization::α (RelatedOrganizations::α)+ ;
IfcAsymmetricIShapeProfileDef ::= TopFlangeWidth::α TopFlangeThickness::α TopFlangeFilletRadius::α CentreOfGravityInY::α ;
IfcTShapeProfileDef ::= Depth::α FlangeWidth::α WebThickness::α FlangeThickness::α FilletRadius::α FlangeEdgeRadius::α WebEdgeRadius::α WebSlope::α FlangeSlope::α CentreOfGravityInY::α ;
IfcFuelProperties ::= CombustionTemperature::α CarbonContent::α LowerHeatingValue::α HigherHeatingValue::α ;
IfcStyledItem ::= Item::α (Styles::α)+ Name::α ;
IfcStructuralLoadTemperature ::= DeltaT_Constant::α DeltaT_Y::α DeltaT_Z::α ;
IfcDistributionControlElement ::= AssignedToFlowElement::α ControlElementId::α ;
IfcCartesianTransformationOperator3DnonUniform ::= Scale2::α Scale3::α ;
IfcProductsOfCombustionProperties ::= SpecificHeatCapacity::α N20Content::α COContent::α CO2Content::α ;
IfcConstructionResource ::= ResourceIdentifier::α ResourceGroup::α ResourceConsumption::α BaseQuantity::α ;
IfcActorRole ::= Role::α UserDefinedRole::α Description::α ;
IfcDerivedUnitElement ::= Unit::α Exponent::α ;
IfcSpace ::= InteriorOrExteriorSpace::α ElevationWithFlooring::α HasCoverings::α BoundedBy::α ;
IfcPresentationLayerAssignment ::= Name::α Description::α Identifier::α (AssignedItems::α)+ ;
IfcPhysicalComplexQuantity ::= Discrimination::α Quality::α Usage::α (HasQuantities::α)+ ;
IfcChamferEdgeFeature ::= Width::α Height::α ;
IfcRectangularTrimmedSurface ::= U1::α V1::α U2::α V2::α Usense::α Vsense::α BasisSurface::α ;
IfcDefinedSymbol ::= Definition::α Target::α ;
IfcLine ::= Pnt::α Dir::α ;
IfcServiceLifeFactor ::= UpperValue::α MostUsedValue::α LowerValue::α PredefinedType::α ;
IfcCurveStyleFont ::= (PatternList::α)+ Name::α ;
IfcMetricValueSelect ::= IfcDateTimeSelectvalue::α IfcTextvalue::α IfcCostValuevalue::α IfcTimeSeriesvalue::α IfcTablevalue::α IfcMeasureWithUnitvalue::α ;
IfcRelConnectsStructuralMember ::= RelatingStructuralMember::α RelatedStructuralConnection::α AppliedCondition::α AdditionalConditions::α ConditionCoordinateSystem::α SupportedLength::α ;
IfcSectionProperties ::= StartProfile::α EndProfile::α SectionType::α ;
IfcUShapeProfileDef ::= Depth::α FlangeWidth::α WebThickness::α FlangeThickness::α FilletRadius::α EdgeRadius::α FlangeSlope::α CentreOfGravityInX::α ;
IfcRelServicesBuildings ::= RelatingSystem::α (RelatedBuildings::α)+ ;
IfcLightSourceSpot ::= ConcentrationExponent::α SpreadAngle::α BeamWidthAngle::α Orientation::α ;
IfcProjectOrderRecord ::= (Records::α)+ PredefinedType::α ;
IfcRelaxation ::= RelaxationValue::α InitialStress::α ;
IfcAsset ::= OriginalValue::α CurrentValue::α TotalReplacementCost::α Owner::α User::α ResponsiblePerson::α IncorporationDate::α DepreciatedValue::α AssetID::α ;
IfcRectangleProfileDef ::= XDim::α YDim::α ;
IfcMaterialLayerSetUsage ::= LayerSetDirection::α DirectionSense::α OffsetFromReferenceLine::α ForLayerSet::α ;
IfcSizeSelect ::= IfcPositiveRatioMeasurevalue::α IfcNormalisedRatioMeasurevalue::α IfcPositiveLengthMeasurevalue::α IfcDescriptiveMeasurevalue::α IfcLengthMeasurevalue::α IfcRatioMeasurevalue::α ;
IfcBSplineCurve ::= Degree::α CurveForm::α ClosedCurve::α SelfIntersect::α ControlPointsList::α ;
IfcTimeSeriesSchedule ::= (ApplicableDates::α)+ TimeSeries::α TimeSeriesScheduleType::α ;
IfcSweptAreaSolid ::= SweptArea::α Position::α ;
IfcSurfaceStyleRefraction ::= RefractionIndex::α DispersionFactor::α ;
IfcPropertyDependencyRelationship ::= Name::α Description::α Expression::α DependingProperty::α DependantProperty::α ;
IfcPerson ::= Id::α FamilyName::α GivenName::α (MiddleNames::α)+ (PrefixTitles::α)+ (SuffixTitles::α)+ EngagedIn::α (Roles::α)+ (Addresses::α)+ ;
IfcStructuralProfileProperties ::= TorsionalConstantX::α MomentOfInertiaYZ::α MomentOfInertiaY::α MomentOfInertiaZ::α WarpingConstant::α ShearCentreZ::α ShearCentreY::α ShearDeformationAreaZ::α ShearDeformationAreaY::α MaximumSectionModulusY::α MinimumSectionModulusY::α MaximumSectionModulusZ::α MinimumSectionModulusZ::α TorsionalSectionModulus::α CentreOfGravityInX::α CentreOfGravityInY::α ;
IfcCurveStyleFontPattern ::= VisibleSegmentLength::α InvisibleSegmentLength::α ;
IfcDraughtingCallout ::= IsRelatedFromCallout::α IsRelatedToCallout::α (Contents::α)+ ;
IfcTrimmingSelect ::= IfcParameterValuevalue::α IfcCartesianPointvalue::α ;
IfcReinforcingMesh ::= MeshLength::α MeshWidth::α LongitudinalBarNominalDiameter::α TransverseBarNominalDiameter::α LongitudinalBarCrossSectionArea::α TransverseBarCrossSectionArea::α LongitudinalBarSpacing::α TransverseBarSpacing::α ;
IfcMove ::= MoveFrom::α MoveTo::α (PunchList::α)+ ;
IfcDocumentElectronicFormat ::= FileExtension::α MimeContentType::α MimeSubtype::α ;
IfcLightSourceGoniometric ::= ColourTemperature::α LuminousFlux::α LightEmissionSource::α Position::α ColourAppearance::α LightDistributionDataSource::α ;
IfcCraneRailAShapeProfileDef ::= OverallHeight::α BaseWidth2::α Radius::α HeadWidth::α HeadDepth2::α HeadDepth3::α WebThickness::α BaseWidth4::α BaseDepth1::α BaseDepth2::α BaseDepth3::α CentreOfGravityInY::α ;
IfcCovering ::= CoversSpaces::α Covers::α PredefinedType::α ;
IfcTypeProduct ::= (RepresentationMaps::α)+ Tag::α ;
IfcStructuralSurfaceMemberVarying ::= VaryingThicknessLocation::α SubsequentThickness::α ;
IfcOpticalMaterialProperties ::= VisibleTransmittance::α SolarTransmittance::α ThermalIrTransmittance::α ThermalIrEmissivityBack::α ThermalIrEmissivityFront::α VisibleReflectanceBack::α VisibleReflectanceFront::α SolarReflectanceFront::α SolarReflectanceBack::α ;
IfcVector ::= Orientation::α Magnitude::α ;
IfcElectricDistributionPoint ::= DistributionPointFunction::α UserDefinedFunction::α ;
IfcRelConnectsWithRealizingElements ::= (RealizingElements::α)+ ConnectionType::α ;
IfcObject ::= IsDefinedBy::α ObjectType::α ;
IfcRevolvedAreaSolid ::= Axis::α Angle::α ;
IfcEdge ::= EdgeStart::α EdgeEnd::α ;
IfcSurfaceCurveSweptAreaSolid ::= StartParam::α EndParam::α Directrix::α ReferenceSurface::α ;
IfcLightSourcePositional ::= Radius::α ConstantAttenuation::α DistanceAttenuation::α QuadricAttenuation::α Position::α ;
IfcPixelTexture ::= Width::α Height::α ColourComponents::α (Pixel::α)+ ;
IfcProjectOrder ::= ID::α PredefinedType::α Status::α ;
IfcExternalReference ::= Location::α ItemReference::α Name::α ;
IfcBuilding ::= ElevationOfRefHeight::α ElevationOfTerrain::α BuildingAddress::α ;
IfcRelConnectsPorts ::= RelatingPort::α RelatedPort::α RealizingElement::α ;
IfcProfileProperties ::= ProfileDefinition::α ProfileName::α ;
IfcDoor ::= OverallHeight::α OverallWidth::α ;
IfcReinforcementDefinitionProperties ::= (ReinforcementSectionDefinitions::α)+ DefinitionType::α ;
IfcThermalMaterialProperties ::= SpecificHeatCapacity::α BoilingPoint::α FreezingPoint::α ThermalConductivity::α ;
IfcAxis2Placement3D ::= Axis::α RefDirection::α ;
IfcSpatialStructureElement ::= LongName::α CompositionType::α ReferencesElements::α ServicedBySystems::α ContainsElements::α ;
IfcPostalAddress ::= InternalLocation::α (AddressLines::α)+ PostalBox::α Town::α Region::α PostalCode::α Country::α ;
IfcStructuralConnection ::= ConnectsStructuralMembers::α AppliedCondition::α ;
IfcClassificationItem ::= IsClassifiedItemIn::α IsClassifyingItemIn::α Notation::α ItemOf::α Title::α ;
IfcCostValue ::= CostType::α Condition::α ;
IfcDoorLiningProperties ::= LiningDepth::α LiningThickness::α ThresholdDepth::α ThresholdThickness::α TransomThickness::α TransomOffset::α LiningOffset::α ThresholdOffset::α CasingThickness::α CasingDepth::α ShapeAspectStyle::α ;
IfcConstraintAggregationRelationship ::= Name::α Description::α LogicalAggregator::α RelatingConstraint::α (RelatedConstraints::α)+ ;
IfcApprovalPropertyRelationship ::= (ApprovedProperties::α)+ Approval::α ;
IfcRelFlowControlElements ::= (RelatedControlElements::α)+ RelatingFlowElement::α ;
IfcRelCoversBldgElements ::= RelatingBuildingElement::α (RelatedCoverings::α)+ ;
IfcProject ::= LongName::α Phase::α (RepresentationContexts::α)+ UnitsInContext::α ;
IfcDerivedProfileDef ::= ParentProfile::α Operator::α Label::α ;
IfcPersonAndOrganization ::= ThePerson::α TheOrganization::α (Roles::α)+ ;
IfcTextStyleForDefinedFont ::= Colour::α BackgroundColour::α ;
IfcTask ::= TaskId::α Status::α WorkMethod::α IsMilestone::α Priority::α ;
IfcCostSchedule ::= Status::α ID::α PredefinedType::α SubmittedBy::α PreparedBy::α SubmittedOn::α (TargetUsers::α)+ UpdateDate::α ;
IfcPhysicalQuantity ::= Name::α Description::α PartOfComplex::α ;
IfcCurveStyle ::= CurveFont::α CurveWidth::α CurveColour::α ;
IfcOrientedEdge ::= EdgeElement::α Orientation::α ;
IfcBlock ::= XLength::α YLength::α ZLength::α ;
IfcSpecularHighlightSelect ::= IfcSpecularRoughnessvalue::α IfcSpecularExponentvalue::α ;
IfcRelAssociatesConstraint ::= RelatingConstraint::α Intent::α ;
IfcColourOrFactor ::= IfcNormalisedRatioMeasurevalue::α IfcColourRgbvalue::α ;
IfcPropertyTableValue ::= (DefiningValues::α)+ (DefinedValues::α)+ DefiningUnit::α DefinedUnit::α Expression::α ;
IfcTextStyleFontModel ::= (FontFamily::α)+ FontStyle::α FontVariant::α FontWeight::α FontSize::α ;
IfcElementAssembly ::= AssemblyPlace::α PredefinedType::α ;
IfcReinforcementBarProperties ::= TotalCrossSectionArea::α SteelGrade::α BarSurface::α EffectiveDepth::α NominalBarDiameter::α BarCount::α ;
IfcConnectionSurfaceGeometry ::= SurfaceOnRelatingElement::α SurfaceOnRelatedElement::α ;
IfcPresentationLayerWithStyle ::= LayerOn::α LayerFrozen::α LayerBlocked::α (LayerStyles::α)+ ;
IfcIShapeProfileDef ::= OverallWidth::α OverallDepth::α WebThickness::α FlangeThickness::α FilletRadius::α ;
IfcFailureConnectionCondition ::= TensionFailureX::α TensionFailureY::α TensionFailureZ::α CompressionFailureX::α CompressionFailureY::α CompressionFailureZ::α ;
IfcExtrudedAreaSolid ::= ExtrudedDirection::α Depth::α ;
IfcRectangularPyramid ::= XLength::α YLength::α Height::α ;
IfcClassificationItemRelationship ::= RelatingItem::α (RelatedItems::α)+ ;
IfcElement ::= FillsVoids::α ConnectedTo::α HasCoverings::α HasProjections::α HasStructuralMember::α HasPorts::α HasOpenings::α IsConnectionRealization::α ProvidesBoundaries::α ConnectedFrom::α Tag::α ;
IfcPolygonalBoundedHalfSpace ::= Position::α PolygonalBoundary::α ;
IfcStructuralSteelProfileProperties ::= ShearAreaZ::α ShearAreaY::α PlasticShapeFactorY::α PlasticShapeFactorZ::α ;
IfcRectangleHollowProfileDef ::= WallThickness::α InnerFilletRadius::α OuterFilletRadius::α ;
IfcPropertyConstraintRelationship ::= Name::α Description::α RelatingConstraint::α (RelatedProperties::α)+ ;
IfcMappedItem ::= MappingSource::α MappingTarget::α ;
IfcProduct ::= ReferencedBy::α ObjectPlacement::α Representation::α ReferencedInStructures::α ContainedInStructure::α ;
IfcProxy ::= ProxyType::α Tag::α ;
IfcConditionCriterionSelect ::= IfcLabelvalue::α IfcMeasureWithUnitvalue::α ;
IfcCoordinatedUniversalTimeOffset ::= HourOffset::α MinuteOffset::α Sense::α ;
IfcMaterialLayer ::= LayerThickness::α IsVentilated::α ToMaterialLayerSet::α Material::α ;
IfcConstraint ::= Name::α Description::α ConstraintGrade::α ConstraintSource::α UserDefinedGrade::α ClassifiedAs::α RelatesConstraints::α IsRelatedWith::α PropertiesForConstraint::α Aggregates::α IsAggregatedIn::α CreatingActor::α CreationTime::α ;
IfcMeasureWithUnit ::= ValueComponent::α UnitComponent::α ;
IfcSIUnit ::= Prefix::α Name::α ;
IfcBooleanResult ::= FirstOperand::α SecondOperand::α Operator::α ;
IfcTextStyleTextModel ::= TextAlign::α TextDecoration::α TextTransform::α TextIndent::α LetterSpacing::α WordSpacing::α LineHeight::α ;
IfcStructuralLoadLinearForce ::= LinearForceX::α LinearForceY::α LinearForceZ::α LinearMomentX::α LinearMomentY::α LinearMomentZ::α ;
IfcColourRgb ::= Red::α Green::α Blue::α ;
IfcGeometricRepresentationSubContext ::= TargetScale::α TargetView::α UserDefinedTargetView::α ParentContext::α ;
IfcInventory ::= Jurisdiction::α (ResponsiblePersons::α)+ LastUpdateDate::α CurrentValue::α OriginalValue::α InventoryType::α ;
IfcTrapeziumProfileDef ::= BottomXDim::α TopXDim::α YDim::α TopXOffset::α ;
IfcRelAssociatesProfileProperties ::= ProfileOrientation::α RelatingProfileProperties::α ProfileSectionLocation::α ;
IfcRepresentation ::= RepresentationIdentifier::α RepresentationType::α RepresentationMap::α OfProductRepresentation::α ContextOfItems::α (Items::α)+ ;
IfcPropertyBoundedValue ::= UpperBoundValue::α LowerBoundValue::α Unit::α ;
IfcSite ::= RefLatitude::α RefLongitude::α RefElevation::α LandTitleNumber::α SiteAddress::α ;
IfcGrid ::= (UAxes::α)+ (VAxes::α)+ (WAxes::α)+ ;
IfcConstructionMaterialResource ::= (Suppliers::α)+ UsageRatio::α ;
IfcConditionCriterion ::= Criterion::α CriterionDateTime::α ;
IfcMaterialClassificationRelationship ::= (MaterialClassifications::α)+ ClassifiedMaterial::α ;
IfcZShapeProfileDef ::= Depth::α FlangeWidth::α WebThickness::α FlangeThickness::α FilletRadius::α EdgeRadius::α ;
IfcRepresentationMap ::= MapUsage::α MappingOrigin::α MappedRepresentation::α ;
IfcApproval ::= Description::α ApprovalStatus::α ApprovalLevel::α ApprovalQualifier::α Name::α Identifier::α Actors::α IsRelatedWith::α Relates::α ApprovalDateTime::α ;
IfcWindowPanelProperties ::= OperationType::α PanelPosition::α FrameDepth::α FrameThickness::α ShapeAspectStyle::α ;
IfcRelFillsElement ::= RelatingOpeningElement::α RelatedBuildingElement::α ;
IfcHatchLineDistanceSelect ::= IfcPositiveLengthMeasurevalue::α IfcOneDirectionRepeatFactorvalue::α ;
IfcStructuralPlanarActionVarying ::= VaryingAppliedLoadLocation::α SubsequentAppliedLoads::α ;
IfcConstraintRelationship ::= Name::α Description::α RelatingConstraint::α (RelatedConstraints::α)+ ;
IfcOrganization ::= Id::α Name::α Description::α IsRelatedBy::α Relates::α Engages::α (Roles::α)+ (Addresses::α)+ ;
IfcGridPlacement ::= PlacementLocation::α PlacementRefDirection::α ;
IfcPile ::= PredefinedType::α ConstructionType::α ;
IfcMechanicalConcreteMaterialProperties ::= CompressiveStrength::α MaxAggregateSize::α AdmixturesDescription::α Workability::α ProtectivePoreRatio::α WaterImpermeability::α ;
IfcObjective ::= ObjectiveQualifier::α UserDefinedQualifier::α BenchmarkValues::α ResultValues::α ;
IfcMechanicalSteelMaterialProperties ::= YieldStress::α UltimateStress::α UltimateStrain::α HardeningModule::α ProportionalStress::α PlasticStrain::α (Relaxations::α)+ ;
IfcDateAndTime ::= DateComponent::α TimeComponent::α ;
IfcCartesianTransformationOperator ::= Axis1::α Axis2::α LocalOrigin::α Scale::α ;
IfcCompositeCurve ::= (Segments::α)+ SelfIntersect::α ;
IfcEdgeCurve ::= EdgeGeometry::α SameSense::α ;
IfcCraneRailFShapeProfileDef ::= OverallHeight::α HeadWidth::α Radius::α HeadDepth2::α HeadDepth3::α WebThickness::α BaseDepth1::α BaseDepth2::α CentreOfGravityInY::α ;
IfcTimeSeries ::= Name::α Description::α TimeSeriesDataType::α DataOrigin::α UserDefinedDataOrigin::α DocumentedBy::α StartTime::α EndTime::α Unit::α ;
IfcReinforcingBar ::= NominalDiameter::α CrossSectionArea::α BarLength::α BarRole::α BarSurface::α ;
IfcRelAssignsToActor ::= RelatingActor::α ActingRole::α ;
IfcSoundValue ::= SoundLevelSingleValue::α SoundLevelTimeSeries::α Frequency::α ;
IfcSectionReinforcementProperties ::= LongitudinalStartPosition::α LongitudinalEndPosition::α TransversePosition::α ReinforcementRole::α SectionDefinition::α (CrossSectionReinforcementDefinitions::α)+ ;
IfcProfileDef ::= ProfileType::α ProfileName::α ;
IfcComplexProperty ::= (HasProperties::α)+ UsageName::α ;
IfcRepresentationContext ::= ContextIdentifier::α ContextType::α RepresentationsInContext::α ;
IfcWindowStyle ::= ConstructionType::α OperationType::α ParameterTakesPrecedence::α Sizeable::α ;
IfcFaceBound ::= Bound::α Orientation::α ;
IfcSubContractResource ::= SubContractor::α JobDescription::α ;
IfcPropertyListValue ::= (ListValues::α)+ Unit::α ;
IfcLShapeProfileDef ::= Depth::α Width::α Thickness::α FilletRadius::α EdgeRadius::α LegSlope::α CentreOfGravityInX::α CentreOfGravityInY::α ;
IfcRelDecomposes ::= RelatingObject::α (RelatedObjects::α)+ ;
IfcRelConnectsElements ::= ConnectionGeometry::α RelatingElement::α RelatedElement::α ;
IfcStructuralLinearActionVarying ::= VaryingAppliedLoadLocation::α (SubsequentAppliedLoads::α)+ ;
IfcGridAxis ::= AxisTag::α SameSense::α PartOfW::α PartOfV::α PartOfU::α HasIntersections::α AxisCurve::α ;
IfcPresentationStyleSelect ::= IfcNullStylevalue::α IfcSurfaceStylevalue::α IfcTextStylevalue::α IfcFillAreaStylevalue::α IfcSymbolStylevalue::α IfcCurveStylevalue::α ;
IfcVertexBasedTextureMap ::= TextureVertices::α TexturePoints::α ;
IfcSurfaceStyle ::= Styles::α Side::α ;
IfcFaceSurface ::= FaceSurface::α SameSense::α ;
IfcSlippageConnectionCondition ::= SlippageX::α SlippageY::α SlippageZ::α ;
IfcCurveStyleFontAndScaling ::= Name::α CurveFontScaling::α CurveFont::α ;
IfcSectionedSpine ::= SpineCurve::α CrossSections::α CrossSectionPositions::α ;
IfcRelConnectsStructuralElement ::= RelatingElement::α RelatedStructuralMember::α ;
IfcConstraintClassificationRelationship ::= ClassifiedConstraint::α (RelatedClassifications::α)+ ;
IfcBoundingBox ::= XDim::α YDim::α ZDim::α Corner::α ;
IfcCompositeProfileDef ::= Profiles::α Label::α ;
IfcAppliedValue ::= Name::α Description::α AppliedValue::α ValuesReferenced::α ValueOfComponents::α IsComponentIn::α UnitBasis::α ApplicableDate::α FixedUntilDate::α ;
IfcObjectDefinition ::= HasAssignments::α IsDecomposedBy::α Decomposes::α ;
IfcLibraryInformation ::= Name::α Version::α Publisher::α VersionDate::α (LibraryReference::α)+ ;
IfcRelSequence ::= TimeLag::α SequenceType::α RelatingProcess::α RelatedProcess::α ;
IfcCurrencyRelationship ::= RelatingMonetaryUnit::α RelatedMonetaryUnit::α RateDateTime::α RateSource::α ExchangeRate::α ;
IfcActor ::= IsActingUpon::α TheActor::α ;
IfcTextLiteralWithExtent ::= Extent::α BoxAlignment::α ;
IfcPlanarExtent ::= SizeInX::α SizeInY::α ;
IfcDerivedMeasureValue ::= IfcIonConcentrationMeasurevalue::α IfcPHMeasurevalue::α IfcHeatingValueMeasurevalue::α IfcSoundPressureMeasurevalue::α IfcSoundPowerMeasurevalue::α IfcWarpingMomentMeasurevalue::α IfcWarpingConstantMeasurevalue::α IfcThermalExpansionCoefficientMeasurevalue::α IfcTemperatureGradientMeasurevalue::α IfcSectionModulusMeasurevalue::α IfcSectionalAreaIntegralMeasurevalue::α IfcRotationalMassMeasurevalue::α IfcModulusOfRotationalSubgradeReactionMeasurevalue::α IfcModulusOfLinearSubgradeReactionMeasurevalue::α IfcMassPerLengthMeasurevalue::α IfcCurvatureMeasurevalue::α IfcLuminousIntensityDistributionMeasurevalue::α IfcLinearMomentMeasurevalue::α IfcShearModulusMeasurevalue::α IfcRotationalStiffnessMeasurevalue::α IfcPlanarForceMeasurevalue::α IfcMomentOfInertiaMeasurevalue::α IfcModulusOfElasticityMeasurevalue::α IfcModulusOfSubgradeReactionMeasurevalue::α IfcLinearStiffnessMeasurevalue::α IfcLinearForceMeasurevalue::α IfcAccelerationMeasurevalue::α IfcTorqueMeasurevalue::α IfcRotationalFrequencyMeasurevalue::α IfcRadioActivityMeasurevalue::α IfcAbsorbedDoseMeasurevalue::α IfcElectricCapacitanceMeasurevalue::α IfcDoseEquivalentMeasurevalue::α IfcElectricChargeMeasurevalue::α IfcElectricConductanceMeasurevalue::α IfcElectricResistanceMeasurevalue::α IfcIlluminanceMeasurevalue::α IfcInductanceMeasurevalue::α IfcForceMeasurevalue::α IfcLuminousFluxMeasurevalue::α IfcMagneticFluxMeasurevalue::α IfcMagneticFluxDensityMeasurevalue::α IfcMonetaryMeasurevalue::α IfcSpecificHeatCapacityMeasurevalue::α IfcIsothermalMoistureCapacityMeasurevalue::α IfcMoistureDiffusivityMeasurevalue::α IfcVaporPermeabilityMeasurevalue::α IfcMolecularWeightMeasurevalue::α IfcThermalConductivityMeasurevalue::α IfcAngularVelocityMeasurevalue::α IfcDynamicViscosityMeasurevalue::α IfcElectricVoltageMeasurevalue::α IfcEnergyMeasurevalue::α IfcFrequencyMeasurevalue::α IfcHeatFluxDensityMeasurevalue::α IfcIntegerCountRateMeasurevalue::α IfcKinematicViscosityMeasurevalue::α IfcLinearVelocityMeasurevalue::α IfcMassDensityMeasurevalue::α IfcMassFlowRateMeasurevalue::α IfcPowerMeasurevalue::α IfcPressureMeasurevalue::α IfcThermalAdmittanceMeasurevalue::α IfcThermalResistanceMeasurevalue::α IfcThermalTransmittanceMeasurevalue::α IfcTimeStampvalue::α IfcVolumetricFlowRateMeasurevalue::α ;
IfcProcess ::= OperatesOn::α IsSuccessorFrom::α IsPredecessorTo::α ;
IfcRoot ::= GlobalId::α Name::α Description::α OwnerHistory::α HasAssociations::α ;
IfcGeometricRepresentationContext ::= CoordinateSpaceDimension::α Precision::α HasSubContexts::α WorldCoordinateSystem::α TrueNorth::α ;
IfcOrientationSelect ::= IfcPlaneAngleMeasurevalue::α IfcDirectionvalue::α ;
IfcFluidFlowProperties ::= PropertySource::α UserDefinedPropertySource::α TemperatureSingleValue::α WetBulbTemperatureSingleValue::α FlowConditionSingleValue::α VelocitySingleValue::α PressureSingleValue::α FlowrateSingleValue::α FlowConditionTimeSeries::α VelocityTimeSeries::α FlowrateTimeSeries::α Fluid::α PressureTimeSeries::α WetBulbTemperatureTimeSeries::α TemperatureTimeSeries::α ;
IfcTelecomAddress ::= (TelephoneNumbers::α)+ (FacsimileNumbers::α)+ PagerNumber::α (ElectronicMailAddresses::α)+ WWWHomePageURL::α ;
IfcSurfaceStyleRendering ::= Transparency::α ReflectanceMethod::α DiffuseColour::α TransmissionColour::α DiffuseTransmissionColour::α ReflectionColour::α SpecularColour::α SpecularHighlight::α ;
IfcEnergyProperties ::= EnergySequence::α UserDefinedEnergySequence::α ;
IfcObjectPlacement ::= PlacesObject::α ReferencedByPlacements::α ;
IfcStructuralMember ::= ReferencesElement::α ConnectedBy::α ;
IfcProperty ::= Name::α Description::α PropertyForDependance::α PropertyDependsOn::α PartOfComplex::α ;
IfcConversionBasedUnit ::= ConversionFactor::α Name::α ;
IfcConnectionPointEccentricity ::= EccentricityInX::α EccentricityInY::α EccentricityInZ::α ;
IfcShapeAspect ::= Name::α Description::α ProductDefinitional::α (ShapeRepresentations::α)+ PartOfProductDefinitionShape::α ;
IfcLocalTime ::= HourComponent::α MinuteComponent::α SecondComponent::α DaylightSavingOffset::α Zone::α ;
IfcSweptDiskSolid ::= Radius::α InnerRadius::α StartParam::α EndParam::α Directrix::α ;
IfcRelProjectsElement ::= RelatingElement::α RelatedFeatureElement::α ;
IfcMechanicalMaterialProperties ::= DynamicViscosity::α YoungModulus::α ShearModulus::α PoissonRatio::α ThermalExpansionCoefficient::α ;
IfcBoundaryEdgeCondition ::= LinearStiffnessByLengthX::α LinearStiffnessByLengthY::α LinearStiffnessByLengthZ::α RotationalStiffnessByLengthX::α RotationalStiffnessByLengthY::α RotationalStiffnessByLengthZ::α ;
IfcProcedure ::= ProcedureID::α ProcedureType::α UserDefinedProcedureType::α ;
IfcServiceLife ::= ServiceLifeType::α ServiceLifeDuration::α ;
IfcRightCircularCylinder ::= Height::α Radius::α ;
IfcApplication ::= Version::α ApplicationFullName::α ApplicationIdentifier::α ApplicationDeveloper::α ;
IfcTable ::= (Rows::α)+ Name::α ;
IfcMechanicalFastener ::= NominalDiameter::α NominalLength::α ;
IfcApprovalActorRelationship ::= Actor::α Approval::α Role::α ;
IfcConnectionCurveGeometry ::= CurveOnRelatingElement::α CurveOnRelatedElement::α ;
IfcGeneralMaterialProperties ::= MolecularWeight::α Porosity::α MassDensity::α ;
IfcDerivedUnit ::= UnitType::α UserDefinedType::α (Elements::α)+ ;
IfcGeneralProfileProperties ::= PhysicalWeight::α Perimeter::α MinimumPlateThickness::α MaximumPlateThickness::α CrossSectionArea::α ;
IfcMeasureValue ::= IfcNormalisedRatioMeasurevalue::α IfcLuminousIntensityMeasurevalue::α IfcAmountOfSubstanceMeasurevalue::α IfcAreaMeasurevalue::α IfcContextDependentMeasurevalue::α IfcCountMeasurevalue::α IfcDescriptiveMeasurevalue::α IfcElectricCurrentMeasurevalue::α IfcLengthMeasurevalue::α IfcPositiveLengthMeasurevalue::α IfcMassMeasurevalue::α IfcNumericMeasurevalue::α IfcParameterValuevalue::α IfcPlaneAngleMeasurevalue::α IfcPositivePlaneAngleMeasurevalue::α IfcRatioMeasurevalue::α IfcPositiveRatioMeasurevalue::α IfcSolidAngleMeasurevalue::α IfcThermodynamicTemperatureMeasurevalue::α IfcTimeMeasurevalue::α IfcVolumeMeasurevalue::α ;
IfcPropertyEnumeratedValue ::= (EnumerationValues::α)+ EnumerationReference::α ;
IfcDraughtingCalloutRelationship ::= Name::α Description::α RelatingDraughtingCallout::α RelatedDraughtingCallout::α ;
IfcSweptSurface ::= SweptCurve::α Position::α ;
IfcPropertyEnumeration ::= (EnumerationValues::α)+ Unit::α Name::α ;
IfcTrimmedCurve ::= SenseAgreement::α MasterRepresentation::α Trim1::α Trim2::α BasisCurve::α ;
IfcFillAreaStyleTiles ::= TilingPattern::α (Tiles::α)+ TilingScale::α ;
IfcTextureCoordinateGenerator ::= (Parameter::α)+ Mode::α ;
IfcPointOnCurve ::= BasisCurve::α PointParameter::α ;
IfcSpaceProgram ::= SpaceProgramIdentifier::α MaxRequiredArea::α MinRequiredArea::α StandardRequiredArea::α HasInteractionReqsFrom::α HasInteractionReqsTo::α RequestedLocation::α ;
IfcPointOnSurface ::= PointParameterU::α PointParameterV::α BasisSurface::α ;
IfcRelAssignsToProcess ::= RelatingProcess::α QuantityInProcess::α ;
IfcPropertyReferenceValue ::= PropertyReference::α UsageName::α ;
IfcTypeObject ::= ObjectTypeOf::α (HasPropertySets::α)+ ApplicableOccurrence::α ;
IfcMaterialLayerSet ::= (MaterialLayers::α)+ LayerSetName::α ;
IfcFillAreaStyleHatching ::= StartOfNextHatchLine::α HatchLineAppearance::α PointOfReferenceHatchLine::α PatternStart::α HatchLineAngle::α ;
IfcDoorStyle ::= OperationType::α ConstructionType::α ParameterTakesPrecedence::α Sizeable::α ;
IfcRelCoversSpaces ::= RelatedSpace::α (RelatedCoverings::α)+ ;
IfcTransportElement ::= OperationType::α CapacityByWeight::α CapacityByNumber::α ;
IfcDimensionalExponents ::= LengthExponent::α MassExponent::α TimeExponent::α ElectricCurrentExponent::α ThermodynamicTemperatureExponent::α AmountOfSubstanceExponent::α LuminousIntensityExponent::α ;
IfcRightCircularCone ::= Height::α BottomRadius::α ;
IfcConnectionPortGeometry ::= LocationAtRelatingElement::α LocationAtRelatedElement::α ProfileOfPort::α ;
IfcProductRepresentation ::= Name::α Description::α ShapeOfProduct::α (Representations::α)+ ;
IfcAppliedValueSelect ::= IfcMonetaryMeasurevalue::α IfcRatioMeasurevalue::α IfcMeasureWithUnitvalue::α ;
IfcVirtualGridIntersection ::= IntersectingAxes::α OffsetDistances::α ;
IfcStairFlight ::= NumberOfRiser::α NumberOfTreads::α RiserHeight::α TreadLength::α ;
IfcStructuralActivity ::= AssignedToStructuralItem::α AppliedLoad::α GlobalOrLocal::α ;
IfcTendon ::= PredefinedType::α NominalDiameter::α CrossSectionArea::α TensionForce::α PreStress::α FrictionCoefficient::α AnchorageSlip::α MinCurvatureRadius::α ;
IfcDocumentInformation ::= DocumentId::α Name::α Description::α Purpose::α IntendedUse::α Scope::α Revision::α Confidentiality::α Status::α IsPointedTo::α IsPointer::α (DocumentReferences::α)+ DocumentOwner::α (Editors::α)+ CreationTime::α LastRevisionTime::α ElectronicFormat::α ValidFrom::α ValidUntil::α ;
IfcStructuralLoadPlanarForce ::= PlanarForceX::α PlanarForceY::α PlanarForceZ::α ;
IfcOffsetCurve3D ::= Distance::α SelfIntersect::α BasisCurve::α RefDirection::α ;
IfcPermeableCoveringProperties ::= OperationType::α PanelPosition::α FrameDepth::α FrameThickness::α ShapeAspectStyle::α ;
IfcPort ::= ContainedIn::α ConnectedFrom::α ConnectedTo::α ;
IfcWorkControl ::= Identifier::α Purpose::α Duration::α TotalFloat::α WorkControlType::α UserDefinedControlType::α CreationDate::α (Creators::α)+ StartTime::α FinishTime::α ;
IfcAnnotationFillArea ::= OuterBoundary::α (InnerBoundaries::α)+ ;
IfcTextStyle ::= TextCharacterAppearance::α TextStyle::α TextFontStyle::α ;
IfcReferencesValueDocument ::= Name::α Description::α ReferencedDocument::α (ReferencingValues::α)+ ;
IfcLightDistributionData ::= MainPlaneAngle::α (SecondaryPlaneAngle::α)+ (LuminousIntensity::α)+ ;
IfcPropertySetDefinition ::= PropertyDefinitionOf::α DefinesType::α ;
IfcStructuralAction ::= CausedBy::α DestabilizingLoad::α ;
IfcAnnotationSurface ::= Item::α TextureCoordinates::α ;
IfcWindow ::= OverallHeight::α OverallWidth::α ;
IfcEnvironmentalImpactValue ::= ImpactType::α Category::α UserDefinedCategory::α ;
IfcTextStyleWithBoxCharacteristics ::= BoxHeight::α BoxWidth::α BoxSlantAngle::α BoxRotateAngle::α CharacterSpacing::α ;
IfcRelInteractionRequirements ::= DailyInteraction::α ImportanceRating::α LocationOfInteraction::α RelatedSpaceProgram::α RelatingSpaceProgram::α ;
IfcPropertySingleValue ::= NominalValue::α Unit::α ;
IfcAddress ::= Purpose::α Description::α UserDefinedPurpose::α OfPerson::α OfOrganization::α ;
IfcClassification ::= Source::α Edition::α Name::α Contains::α EditionDate::α ;
IfcValue ::= IfcAbsorbedDoseMeasurevalue::α IfcAccelerationMeasurevalue::α IfcAmountOfSubstanceMeasurevalue::α IfcAngularVelocityMeasurevalue::α IfcAreaMeasurevalue::α IfcBooleanvalue::α IfcContextDependentMeasurevalue::α IfcCountMeasurevalue::α IfcCurvatureMeasurevalue::α IfcDescriptiveMeasurevalue::α IfcDoseEquivalentMeasurevalue::α IfcDynamicViscosityMeasurevalue::α IfcElectricCapacitanceMeasurevalue::α IfcElectricChargeMeasurevalue::α IfcElectricConductanceMeasurevalue::α IfcElectricCurrentMeasurevalue::α IfcElectricResistanceMeasurevalue::α IfcElectricVoltageMeasurevalue::α IfcEnergyMeasurevalue::α IfcForceMeasurevalue::α IfcFrequencyMeasurevalue::α IfcHeatFluxDensityMeasurevalue::α IfcHeatingValueMeasurevalue::α IfcIdentifiervalue::α IfcIlluminanceMeasurevalue::α IfcInductanceMeasurevalue::α IfcIntegervalue::α IfcIntegerCountRateMeasurevalue::α IfcIonConcentrationMeasurevalue::α IfcIsothermalMoistureCapacityMeasurevalue::α IfcKinematicViscosityMeasurevalue::α IfcLabelvalue::α IfcPositiveLengthMeasurevalue::α IfcLengthMeasurevalue::α IfcLinearForceMeasurevalue::α IfcLinearMomentMeasurevalue::α IfcLinearStiffnessMeasurevalue::α IfcLinearVelocityMeasurevalue::α IfcLogicalvalue::α IfcLuminousFluxMeasurevalue::α IfcLuminousIntensityDistributionMeasurevalue::α IfcLuminousIntensityMeasurevalue::α IfcMagneticFluxDensityMeasurevalue::α IfcMagneticFluxMeasurevalue::α IfcMassDensityMeasurevalue::α IfcMassFlowRateMeasurevalue::α IfcMassMeasurevalue::α IfcMassPerLengthMeasurevalue::α IfcModulusOfElasticityMeasurevalue::α IfcModulusOfLinearSubgradeReactionMeasurevalue::α IfcModulusOfRotationalSubgradeReactionMeasurevalue::α IfcModulusOfSubgradeReactionMeasurevalue::α IfcMoistureDiffusivityMeasurevalue::α IfcMolecularWeightMeasurevalue::α IfcMomentOfInertiaMeasurevalue::α IfcMonetaryMeasurevalue::α IfcNormalisedRatioMeasurevalue::α IfcNumericMeasurevalue::α IfcPHMeasurevalue::α IfcParameterValuevalue::α IfcPlanarForceMeasurevalue::α IfcPositivePlaneAngleMeasurevalue::α IfcPlaneAngleMeasurevalue::α IfcPositiveRatioMeasurevalue::α IfcPowerMeasurevalue::α IfcPressureMeasurevalue::α IfcRadioActivityMeasurevalue::α IfcRatioMeasurevalue::α IfcRealvalue::α IfcRotationalFrequencyMeasurevalue::α IfcRotationalMassMeasurevalue::α IfcRotationalStiffnessMeasurevalue::α IfcSectionModulusMeasurevalue::α IfcSectionalAreaIntegralMeasurevalue::α IfcShearModulusMeasurevalue::α IfcSolidAngleMeasurevalue::α IfcSoundPowerMeasurevalue::α IfcSoundPressureMeasurevalue::α IfcSpecificHeatCapacityMeasurevalue::α IfcTemperatureGradientMeasurevalue::α IfcTextvalue::α IfcThermalAdmittanceMeasurevalue::α IfcThermalConductivityMeasurevalue::α IfcThermalExpansionCoefficientMeasurevalue::α IfcThermalResistanceMeasurevalue::α IfcThermalTransmittanceMeasurevalue::α IfcThermodynamicTemperatureMeasurevalue::α IfcTimeMeasurevalue::α IfcTimeStampvalue::α IfcTorqueMeasurevalue::α IfcVaporPermeabilityMeasurevalue::α IfcVolumeMeasurevalue::α IfcVolumetricFlowRateMeasurevalue::α IfcWarpingConstantMeasurevalue::α IfcWarpingMomentMeasurevalue::α ;
IfcOffsetCurve2D ::= Distance::α SelfIntersect::α BasisCurve::α ;
IfcOwnerHistory ::= State::α ChangeAction::α LastModifiedDate::α CreationDate::α OwningUser::α OwningApplication::α LastModifyingUser::α LastModifyingApplication::α ;
IfcLightIntensityDistribution ::= (DistributionData::α)+ LightDistributionCurve::α ;
IfcCompositeCurveSegment ::= Transition::α SameSense::α UsingCurves::α ParentCurve::α ;
IfcDocumentInformationRelationship ::= RelatingDocument::α (RelatedDocuments::α)+ RelationshipType::α ;
IfcIrregularTimeSeriesValue ::= (ListValues::α)+ TimeStamp::α ;
IfcHalfSpaceSolid ::= BaseSurface::α AgreementFlag::α ;
IfcConnectionPointGeometry ::= PointOnRelatingElement::α PointOnRelatedElement::α ;
IfcWindowLiningProperties ::= LiningDepth::α LiningThickness::α TransomThickness::α MullionThickness::α FirstTransomOffset::α SecondTransomOffset::α FirstMullionOffset::α SecondMullionOffset::α ShapeAspectStyle::α ;
IfcRegularTimeSeries ::= (Values::α)+ TimeStep::α ;
IfcTimeSeriesReferenceRelationship ::= ReferencedTimeSeries::α (TimeSeriesReferences::α)+ ;
IfcSimpleValue ::= IfcLogicalvalue::α IfcLabelvalue::α IfcTextvalue::α IfcIdentifiervalue::α IfcBooleanvalue::α IfcRealvalue::α IfcIntegervalue::α ;
IfcExtendedMaterialProperties ::= Description::α Name::α (ExtendedProperties::α)+ ;
IfcRelConnectsPathElements ::= (RelatingPriorities::α)+ (RelatedPriorities::α)+ RelatedConnectionType::α RelatingConnectionType::α ;
IfcEllipse ::= SemiAxis1::α SemiAxis2::α ;
IfcNamedUnit ::= Dimensions::α UnitType::α ;
IfcStructuralLoadGroup ::= PredefinedType::α ActionType::α ActionSource::α Coefficient::α Purpose::α SourceOfResultGroup::α LoadGroupFor::α ;
IfcHygroscopicMaterialProperties ::= UpperVaporResistanceFactor::α LowerVaporResistanceFactor::α IsothermalMoistureCapacity::α VaporPermeability::α MoistureDiffusivity::α ;
IfcAppliedValueRelationship ::= ArithmeticOperator::α Name::α Description::α ComponentOfTotal::α (Components::α)+ ;
IfcSpaceThermalLoadProperties ::= ApplicableValueRatio::α ThermalLoadSource::α PropertySource::α SourceDescription::α MaximumValue::α MinimumValue::α UserDefinedThermalLoadSource::α UserDefinedPropertySource::α ThermalLoadType::α ThermalLoadTimeSeriesValues::α ;
IfcRelVoidsElement ::= RelatingBuildingElement::α RelatedOpeningElement::α ;
IfcLightSource ::= Name::α AmbientIntensity::α Intensity::α LightColour::α ;
IfcStructuralAnalysisModel ::= OrientationOf2DPlane::α (LoadedBy::α)+ (HasResults::α)+ PredefinedType::α ;
IfcStructuralLoadSingleDisplacement ::= DisplacementX::α DisplacementY::α DisplacementZ::α RotationalDisplacementRX::α RotationalDisplacementRY::α RotationalDisplacementRZ::α ;
IfcCurveBoundedPlane ::= BasisSurface::α OuterBoundary::α (InnerBoundaries::α)+ ;
IfcStructuralSurfaceMember ::= PredefinedType::α Thickness::α ;
IfcDoorPanelProperties ::= PanelDepth::α PanelOperation::α PanelWidth::α PanelPosition::α ShapeAspectStyle::α ;
IfcLocalPlacement ::= PlacementRelTo::α RelativePlacement::α ;
IfcCShapeProfileDef ::= Depth::α Width::α WallThickness::α Girth::α InternalFilletRadius::α CentreOfGravityInX::α ;
IfcStructuralResultGroup ::= TheoryType::α IsLinear::α ResultGroupFor::α ResultForLoadGroup::α ;
IfcRelSpaceBoundary ::= PhysicalOrVirtualBoundary::α InternalOrExternalBoundary::α RelatingSpace::α RelatedBuildingElement::α ConnectionGeometry::α ;
IfcTextLiteral ::= Literal::α Path::α Placement::α ;
IfcBlobTexture ::= RasterFormat::α RasterCode::α ;
IfcSurfaceStyleLighting ::= DiffuseTransmissionColour::α DiffuseReflectionColour::α TransmissionColour::α ReflectanceColour::α ;
IfcSurfaceOfLinearExtrusion ::= ExtrudedDirection::α Depth::α ;
IfcMetric ::= Benchmark::α ValueSource::α DataValue::α ;
IfcAnnotationFillAreaOccurrence ::= FillStyleTarget::α GlobalOrLocal::α ;
IfcSurfaceTexture ::= RepeatS::α RepeatT::α TextureType::α TextureTransform::α ;
IfcScheduleTimeControl ::= ScheduleDuration::α ActualDuration::α RemainingTime::α FreeFloat::α TotalFloat::α IsCritical::α StartFloat::α FinishFloat::α Completion::α ScheduleTimeControlAssigned::α ActualStart::α EarlyStart::α LateStart::α ScheduleStart::α ActualFinish::α EarlyFinish::α LateFinish::α ScheduleFinish::α StatusTime::α ;
IfcTableRow ::= (RowCells::α)+ OfTable::α IsHeading::α ;
IfcBoundaryFaceCondition ::= LinearStiffnessByAreaX::α LinearStiffnessByAreaY::α LinearStiffnessByAreaZ::α ;
IfcMaterial ::= HasRepresentation::α ClassifiedAs::α Name::α ;
IfcRibPlateProfileProperties ::= Thickness::α RibHeight::α RibWidth::α RibSpacing::α Direction::α ;
IfcBoundaryNodeCondition ::= LinearStiffnessX::α LinearStiffnessY::α LinearStiffnessZ::α RotationalStiffnessX::α RotationalStiffnessY::α RotationalStiffnessZ::α ;
IfcRelConnectsStructuralActivity ::= RelatingElement::α RelatedStructuralActivity::α ;
IfcWaterProperties ::= IsPotable::α Hardness::α AlkalinityConcentration::α AcidityConcentration::α ImpuritiesContent::α PHLevel::α DissolvedSolidsContent::α ;
IfcRelConnectsPortToElement ::= RelatingPort::α RelatedElement::α ;
IfcElementQuantity ::= (Quantities::α)+ MethodOfMeasurement::α ;
IfcApprovalRelationship ::= Description::α Name::α RelatedApproval::α RelatingApproval::α ;
IfcRelReferencedInSpatialStructure ::= (RelatedElements::α)+ RelatingStructure::α ;
--------------------metamodels::mlhim2.bgf--------------------
DvOrdinal ::= dv::α symbol::string() ;
Slot ::= ccd::DvToken (allowedCcds::DvToken)+ ;
DvParsable ::= dv::α formalism::α ;
DvIdentifier ::= issuer::α assigner::α name::α ;
Link ::= relation::Relationship target::DvToken ;
DvNormalizedString ::= uuid::α language::α dv::α ;
DvInterval ::= lower::DvOrdered upper::DvOrdered lowerIncluded::α upperIncluded::α lowerUnbounded::α upperUnbounded::α ;
Role ::= details::ItemStructure description::DvString isPrimary::DvBoolean ;
DvCodedString ::= codeString::α terminologyName::α terminologyAbbrev::α ;
Action ::= time::DvTemporal description::ItemStructure ismTransition::DvCodedString instructionDetails::DvCodedString ;
Location ::= details::ItemStructure description::DvString isPrimary::DvBoolean ;
IntervalEvent ::= width::DvDuration mathFunction::DvCodedString sampleCount::DvCount ;
EventContext ::= healthcareFacility::Organization startTime::DvTemporal endTime::DvTemporal participation::Participation location::Location setting::DvCodedString ;
ObjectRef ::= EntityRef ;
 ObjectRef ::= uuid::α namespace::α objType::α ;
History ::= origin::DvTemporal (events::Event)+ period::DvDuration duration::DvDuration summary::ItemStructure ;
MetaDataSet ::= name::string() (entries::MetaDataEntry)+ ;
ReferenceRange ::= definition::DvString dataRange::DvInterval ;
PartySelf ::= externalRef::EntityRef ;
FeederAuditDetails ::= systemId::DvIdentifier versionId::DvNormalizedString provider::PartyIdentified location::Location time::DvTemporal (subject::PartyProxy)+ ;
FeederAudit ::= originatingSystemAudit::FeederAuditDetails (originatingSystemItemIds::DvIdentifier)+ feederSystemAudit::FeederAuditDetails (feederSystemIds::DvIdentifier)+ originalContent::DvEncapsulated ;
EntityRef ::= uuid::α namespace::α objType::α ;
Attestation ::= attestedView::DvMedia proof::DvParsable reason::DvCodedString commiter::PartyProxy timeCommited::DvTemporal isPending::DvBoolean ;
Ontology ::= (names::string())+ (internalVocabularies::string())+ (lookupTables::string())+ (terminologies::string())+ (generalEntries::OntologyEntry)+ ;
Activity ::= description::ItemStructure timing::DvParsable (actions::DvToken)+ ;
Instruction ::= expiryTime::DvTemporal narrative::DvString wfDefinition::DvParsable (activities::Activity)+ ;
Observation ::= data::History state::History ;
PointEvent ::= time::DvTemporal data::DvAny state::ItemStructure ;
Composition ::= attestation::Attestation (links::Link)+ original::DvToken predecessor::DvToken created::DvTemporal composer::PartyProxy territory::Location category::DvCodedString language::DvLanguage context::EventContext content::Locatable ;
CCD ::= definition::Locatable (metaData::MetaDataSet)+ ontology::Ontology ;
MetaDataEntry ::= title::string() contents::string() ;
DvString ::= DvCodedString ;
 DvString ::= DvIdentifier ;
 DvString ::= uuid::α language::α dv::string() ;
PartyIdentified ::= PartyRelated ;
 PartyIdentified ::= name::DvString (identifiers::DvIdentifier)+ ;
Participation ::= performer::PartyProxy function::DvCodedString mode::DvCodedString time::DvTemporal ;
--------------------metamodels::paperdyne.owl.bgf--------------------
PerformanceTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event isIncluded::Activity ;
Sponzorship ::= is_paid_with::Item is_paid_by::Person is_paid_in::Building (is_paid_for::Thing)+ has_amount_of::Money ;
Proceedings_Publisher ::= (publisherOf::Thing)+ technicallyOrganises::Thing ;
Reviewing_results_event ::= follows::Administrative_event parallel_with::Administrative_event ;
Sponsor ::= hasMail::String worksForCompany::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasAffiliation::String hasFirstName::String hasLastName::String hasEmail::String hasName::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person ;
Organisation ::= Organising_Agency ;
 Organisation ::= Academic_Institution ;
 Organisation ::= Proceedings_Publisher ;
 Organisation ::= (publisherOf::Thing)+ technicallyOrganises::Thing ;
Science_Worker ::= hasMail::String worksForCompany::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasAffiliation::String hasFirstName::String hasLastName::String hasEmail::String hasName::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person ;
Program_Comitee_Chair ::= finishes::Conference headOf::Program_Comitee switches::PhaseOfConferencePreparation starts::Conference accepts::Paper assignsToReview::Paper assignsPaper::Reviewer rejects::Paper ;
RadioCommunicationsTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event isIncluded::Activity ;
MedicineTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event isIncluded::Activity ;
AccommodationPlace ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
TwoLevelConference ::= is_in_phase::phase_of_conference has_program::program hasMember::Person hasName::String endDate::dateTime paperDueOn::dateTime registrationDueOn::dateTime manuscriptDueOn::dateTime startDate::dateTime hasCountry::Country isOrganizedBy::OrganizingCommittee annualOrder::Integer takesPlace::Location hasAcronym::String finishedBy::Program_Comitee_Chair focusesOn::Topic startedBy::Program_Comitee_Chair takesPlace::Location hasConferenceMember::ConferenceMember paperAssignmentFinalizedBy::Administrator reviewCriteriaEnteredBy::Administrator paperAssignmentToolsRunBy::Administrator virtualMeetingEnabledBy::Administrator hardcopyMailingManifestsPrintedBy::Administrator detailsEnteredBy::Administrator reviewerBiddingStartedBy::Administrator date::date reviewsPerPaper::Integer logoURL::anyURI acceptsHardcopySubmissions::Boolean siteURL::anyURI ;
SignalProcessingTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event isIncluded::Activity ;
Accepted_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum hasCo-Author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer hasReview::Review ;
Agency_Staff_Member ::= hasMail::String worksForCompany::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasAffiliation::String hasFirstName::String hasLastName::String hasEmail::String hasName::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person ;
SessionChair ::= hasMail::String worksForCompany::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasAffiliation::String hasFirstName::String hasLastName::String hasEmail::String hasName::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person ;
pc_meeting ::= conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator starts_on::String ends_on::String has_startdate::dateTime has_enddate::dateTime (eventOnList::Thing)+ partOfEvent::Event hasEvent::Event (organisedBy::Thing)+ heldIn::Location ;
Working_event ::= hasTopic::Topic hasAdministrativeEvent::Administrative_event ;
notification ::= has_result::Article is_performed_by::human ;
User ::= Committee ;
 User ::= Administrator ;
 User ::= recieve::Document (create::Thing)+ submit::Document ;
Regular_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum hasCo-Author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
Short_paper ::= changedBy::Author hasContributionStatus::EEnum writtenBy::Author dealsWith::Topic remark::String abstract::String contactEmail::String hasKeyword::String hasTitle::String ;
ConferenceChair ::= memberOfConference::Conference ;
 ConferenceChair ::= hasMail::String worksForCompany::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasAffiliation::String hasFirstName::String hasLastName::String hasEmail::String hasName::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person ;
Place ::= DiningPlace ;
 Place ::= ConferenceVenuePlace ;
 Place ::= MeetingRoomPlace ;
 Place ::= AccommodationPlace ;
 Place ::= Building ;
 Place ::= Session_room ;
 Place ::= Hotel_room ;
 Place ::= Conference_hall ;
 Place ::= Main_office ;
 Place ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
Camera_Ready_event ::= follows::Administrative_event parallel_with::Administrative_event ;
Tutorial_Abstract ::= (is_the_1th_part_of::Thing)+ part_of_article::Article ;
Main_office ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
CallForManuscripts ::= forEvent::AcademicEvent (isInitiatedBy::Person)+ hasSubmissionInstructions::String hasSubmissionDeadline::dateTime ;
Speaker ::= hasMail::String worksForCompany::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasAffiliation::String hasFirstName::String hasLastName::String hasEmail::String hasName::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person ;
Workshop_Session ::= hasAssignedPaper::AcceptedPaper room::String isAssociatedTo::Slot hasChair::Chair ;
Paper_Author ::= hasMail::String worksForCompany::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasAffiliation::String hasFirstName::String hasLastName::String hasEmail::String hasName::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person ;
Conference_Proceedings ::= has_an_ISBN::String has_a_publisher::Publisher has_a_volume::String ;
group_email ::= article_written_by::Author has_reviewer::Reviewer has_abstract::Abstract goes_through::Activity is_sent_to::human is_created_in::Activity structure_created_by::human has_author::human gives_classification::classification ;
Full_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum hasCo-Author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
OutsideReferee ::= hasMail::String worksForCompany::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasAffiliation::String hasFirstName::String hasLastName::String hasEmail::String hasName::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person ;
Attendee ::= hasMail::String worksForCompany::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasAffiliation::String hasFirstName::String hasLastName::String hasEmail::String hasName::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person ;
Registration ::= hasTopic::Topic expectedAttendance::Integer isPartOf::Conference is_held_before::Time is_held_in::Thing is_held_after::Time is_dated_on::dateTime has_result::Article sent_by::Person is_followed_by::Activity is_monitored_by::human has_intensity::intensity has_result::Article is_performed_by::human is_supervised_by::human ;
 Registration ::= ε ;
OperatingTopicsystems ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event isIncluded::Activity ;
Article ::= group_email ;
 Article ::= notification_email ;
 Article ::= abstract_of_paper ;
 Article ::= review_form ;
 Article ::= summary_of_reviews ;
 Article ::= Review ;
 Article ::= article_written_by::Author has_reviewer::Reviewer has_abstract::Abstract goes_through::Activity is_sent_to::human is_created_in::Activity structure_created_by::human has_author::human gives_classification::classification ;
WorksopProposal ::= isSubmittedBy::Author hasAuthor::Author submissionDeadline::dateTime ;
Workshop_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum hasCo-Author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
Chair_PC ::= hasMail::String worksForCompany::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasAffiliation::String hasFirstName::String hasLastName::String hasEmail::String hasName::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person ;
Meta-Reviewer ::= invites_co-reviewers::Reviewer invited_by::Reviewer (has_a_review_reference_or_expertise::Thing)+ writes_review::Review hasReviewHistory::PersonalReviewHistory executes::DoubleBlindReview cooperates::ExternalReviewer IsAssignedTo::Paper hasConflictedPaper::Paper hasPreferredPaper::Paper hasPreferredTopic::ResearchTopic writeReview::Review has_made_review::Paper_Review UserName::String Comments_to_Chair::String Other_Areas::String refuses::Pending_Proposed_Conflict reviews::Paper bidsFor::Paper confirmes::Pending_Proposed_Conflict assignedPaperBy::Program_Comitee_Chair assignedByAdministrator::Administrator adjustBid::Bid readPaper::Paper hasBeenAssigned::Paper assignExternalReviewer::ExternalReviewer ;
Contact_Author ::= has_sent::Submitted_Paper Alternate_Email::String ;
Call_for_participation ::= has_authors::Person has_a_date_of_issue::date ;
Short_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum hasCo-Author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
SatelliteAndSpaceCommunicationsTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event isIncluded::Activity ;
MainAuthor ::= submitPaper::Paper writes::Contribution writes_article::Article assigns_article_to_conference::Article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing submitsPaper::Paper writePaper::Paper writes_Paper::Paper changes::Contribution ;
Pending_Proposed_Conflict ::= refusedBy::Reviewer confirmedBy::Reviewer ;
TPCMember ::= hasMail::String worksForCompany::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasAffiliation::String hasFirstName::String hasLastName::String hasEmail::String hasName::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person ;
ConferenceEvent ::= NonAcademicEvent ;
 ConferenceEvent ::= AcademicEvent ;
 ConferenceEvent ::= hasAttendee::Person hasLocation::Place hasProgramme::Programme hasEndDateTime::dateTime hasStartDateTime::dateTime ;
Assistant ::= hasMail::String worksForCompany::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasAffiliation::String hasFirstName::String hasLastName::String hasEmail::String hasName::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person ;
Conference_document ::= Conference_contribution ;
 Conference_document ::= Information_for_participants ;
 Conference_document ::= Call_for_paper ;
 Conference_document ::= Conference_announcement ;
 Conference_document ::= Call_for_participation ;
 Conference_document ::= Conference_www ;
 Conference_document ::= has_authors::Person has_a_date_of_issue::date ;
Registration_of_participants_event ::= follows::Administrative_event parallel_with::Administrative_event ;
MobileComputingTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event isIncluded::Activity ;
Multi-author_Volume ::= Proceedings ;
 Multi-author_Volume ::= (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document recieved_by::User used_by::Person submited__by::User ;
Camera_Ready_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum hasCo-Author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
CommunicationTheoryTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event isIncluded::Activity ;
Regular_Session ::= hasAssignedPaper::AcceptedPaper room::String isAssociatedTo::Slot hasChair::Chair ;
Mailing_list ::= (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document recieved_by::User used_by::Person submited__by::User ;
CallForPapers ::= forEvent::AcademicEvent (isInitiatedBy::Person)+ hasSubmissionInstructions::String hasSubmissionDeadline::dateTime ;
CommunicationsTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event isIncluded::Activity ;
People ::= Member ;
 People ::= Author ;
 People ::= Surname::String Name::String Country::String E-mail::String Organisation::String ;
SecurityTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event isIncluded::Activity ;
PaperAbstract ::= isAbstractOf::Paper abstractIsSubmittedBy::ContactAuthor ;
DiningPlace ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
University ::= isProviderOf::Sponsorship scientificallyOrganises::Academic_Institution ;
Administrator ::= approve::Event assign::Role assigns::Thing finalizePaperAssignment::Conference runPaperAssignmentTools::Conference enableVirtualMeeting::Conference startReviewerBidding::Conference assignReviewer::Reviewer rejectPaper::Paper enterConferenceDetails::Conference printHardcopyMailingManifests::Conference setMaxPapers::ProgramCommitteeMember enterReviewCriteria::Conference acceptPaper::Paper addProgramCommitteeMember::ProgramCommitteeMember ;
Author ::= AuthorNotReviewer ;
 Author ::= Co-Author ;
 Author ::= Corresponding_Author ;
 Author ::= Author_cd_proceedings_included ;
 Author ::= Lecturer ;
 Author ::= Plenary_lecture_speaker ;
 Author ::= Tutorial_speaker ;
 Author ::= Author_book_proceedings_included ;
 Author ::= ContactAuthor ;
 Author ::= Contact_Author ;
 Author ::= MainAuthor ;
 Author ::= Presenter ;
 Author ::= submitPaper::Paper writes::Contribution writes_article::Article assigns_article_to_conference::Article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing submitsPaper::Paper writePaper::Paper writes_Paper::Paper changes::Contribution ;
Paper_Review ::= is_Candidate_for_Award::Long_bool appropriate_length::Long_bool has_Categorization::Paper_Categorization has_Overall::Overall_Value has_Reccommendation::Reccommendation Review_made_by::Reviewer Comments_for_Author::String Comments_for_Program_Committee::String ;
Conference_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum hasCo-Author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
ConferenceProgram ::= isProgramOf::Conference consistsOf::Slot ;
Workshop ::= has_a_track-workshop-tutorial_topic::Topic is_part_of_conference_volumes::Conference_volume has_a_track-workshop-tutorial_chair::Track-workshop_chair ;
Chair ::= was_a_committee_chair_of::Committee assigns_reviewers_to_article::Reviewer creates_program::program produces::OutputDocument sets::Thing accepts::Paper rejects::Paper asksForPreference::Reviewer isChairOf::Session ;
Poster_Session ::= hasAssignedPaper::AcceptedPaper room::String isAssociatedTo::Slot hasChair::Chair ;
Negative_Review ::= reviewOfPaper::Paper reviewWrittenBy::Possible_Reviewer containsEvaluation::Evaluation rates::Paper isWritenBy::Reviewer writtenBy::Reviewer reviews::Reviewed_contribution gives_classification::classification is_created_in::Activity review_written_by::Reviewer ;
ComputerArchitectureTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event isIncluded::Activity ;
abstract_of_paper ::= article_written_by::Author has_reviewer::Reviewer has_abstract::Abstract goes_through::Activity is_sent_to::human is_created_in::Activity structure_created_by::human has_author::human gives_classification::classification ;
Money ::= Tax ;
 Money ::= Fee ;
 Money ::= Sponzorship ;
 Money ::= Tip ;
 Money ::= is_paid_with::Item is_paid_by::Person is_paid_in::Building (is_paid_for::Thing)+ has_amount_of::Money ;
AntennasTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event isIncluded::Activity ;
MicroelectronicsTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event isIncluded::Activity ;
conference_setup ::= sets_member::human is_made_by::human includes_topic::Topic sets_date::date sets_URL::URL ;
Template ::= (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document recieved_by::User used_by::Person submited__by::User ;
Member_PC ::= expertOn::Topic reviewes::Contribution ;
Chairman ::= ConferenceChair ;
 Chairman ::= AssociatedChair ;
 Chairman ::= ProgramCommitteeChair ;
 Chairman ::= hasMail::String worksForCompany::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasAffiliation::String hasFirstName::String hasLastName::String hasEmail::String hasName::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person memberOfConference::Conference ;
Contact_Person ::= is_author_of::Article performs_activity::Activity is_employed_in::institute has_topic_of_interest::Topic supervises::Activity e-mail::String last_name::String first_name::String ;
Web_Site ::= (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document recieved_by::User used_by::Person submited__by::User ;
TutorialProposal ::= isSubmittedBy::Author hasAuthor::Author submissionDeadline::dateTime ;
RejectedPaper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum hasCo-Author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
ParallelAndDistributedComputingTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event isIncluded::Activity ;
Rejected_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum hasCo-Author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer hasReview::Review ;
Event_Approval ::= hasTopic::Topic expectedAttendance::Integer isPartOf::Conference is_held_before::Time is_held_in::Thing is_held_after::Time is_dated_on::dateTime has_result::Article sent_by::Person is_followed_by::Activity is_monitored_by::human has_intensity::intensity has_result::Article is_performed_by::human is_supervised_by::human ;
Invited_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum hasCo-Author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
Reviewing_event ::= follows::Administrative_event parallel_with::Administrative_event ;
MultimediaTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event isIncluded::Activity ;
program ::= program_created_by::Chair has_session::Session ;
CryptographyTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event isIncluded::Activity ;
Plenary_lecture_speaker ::= submitPaper::Paper writes::Contribution writes_article::Article assigns_article_to_conference::Article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing submitsPaper::Paper writePaper::Paper writes_Paper::Paper changes::Contribution ;
Author_book_proceedings_included ::= submitPaper::Paper writes::Contribution writes_article::Article assigns_article_to_conference::Article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing submitsPaper::Paper writePaper::Paper writes_Paper::Paper changes::Contribution ;
Call ::= CallForPapers ;
 Call ::= CallForReviews ;
 Call ::= CallForManuscripts ;
 Call ::= forEvent::AcademicEvent (isInitiatedBy::Person)+ hasSubmissionInstructions::String hasSubmissionDeadline::dateTime ;
Tutorial ::= has_a_track-workshop-tutorial_topic::Topic is_part_of_conference_volumes::Conference_volume has_a_track-workshop-tutorial_chair::Track-workshop_chair ;
Conference_volume ::= has_parts::Conference_part has_workshops::Workshop has_tracks::Track has_tutorials::Tutorial has_a_commtitee::Committee has_a_steering_committee::Steering_committee has_an_organizing_committee::Organizing_committee has_important_dates::Important_dates has_contributions::Conference_contribution has_a_location::String has_a_program_committee::Program_committee ;
Tip ::= is_paid_with::Item is_paid_by::Person is_paid_in::Building (is_paid_for::Thing)+ has_amount_of::Money ;
Event ::= Symposium ;
 Event ::= Social_event ;
 Event ::= Administrative_event ;
 Event ::= Working_event ;
 Event ::= pc_meeting ;
 Event ::= Social_Event ;
 Event ::= Scientific_Event ;
 Event ::= conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator starts_on::String ends_on::String has_startdate::dateTime has_enddate::dateTime (eventOnList::Thing)+ partOfEvent::Event hasEvent::Event (organisedBy::Thing)+ heldIn::Location ;
ProgramCommittee ::= hasProgramCommitteeMember::ProgramCommitteeMember hasMember::ProgramCommitteeMember ;
Transparency ::= (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document recieved_by::User used_by::Person submited__by::User ;
Review ::= Meta-Review ;
 Review ::= Positive_Review ;
 Review ::= Negative_Review ;
 Review ::= Neutral_Review ;
 Review ::= reviewOfPaper::Paper reviewWrittenBy::Possible_Reviewer containsEvaluation::Evaluation rates::Paper isWritenBy::Reviewer writtenBy::Reviewer reviews::Reviewed_contribution gives_classification::classification is_created_in::Activity review_written_by::Reviewer ;
Session ::= Conference_Session ;
 Session ::= Regular_Session ;
 Session ::= Poster_Session ;
 Session ::= Demo_Session ;
 Session ::= Workshop_Session ;
 Session ::= Speaker_lecture ;
 Session ::= hasAssignedPaper::AcceptedPaper room::String isAssociatedTo::Slot hasChair::Chair ;
Person ::= ConferenceMember ;
 Person ::= ExternalReviewer ;
 Person ::= User ;
 Person ::= Conference_participant ;
 Person ::= Conference_contributor ;
 Person ::= Committee_member ;
 Person ::= Conference_applicant ;
 Person ::= Track-workshop_chair ;
 Person ::= Scholar ;
 Person ::= Participant ;
 Person ::= Member_PC ;
 Person ::= Chair_PC ;
 Person ::= Science_Worker ;
 Person ::= Assistant ;
 Person ::= Volunteer ;
 Person ::= participant ;
 Person ::= ConferenceChair ;
 Person ::= Attendee ;
 Person ::= SessionChair ;
 Person ::= TPCMember ;
 Person ::= Paper_Author ;
 Person ::= Conference_Participant ;
 Person ::= Agency_Staff_Member ;
 Person ::= Possible_Reviewer ;
 Person ::= Student ;
 Person ::= Delegate ;
 Person ::= Sponsor ;
 Person ::= OutsideReferee ;
 Person ::= ConferenceAttendant ;
 Person ::= Program_Comitee_Chair ;
 Person ::= ProgramCommitteeMember ;
 Person ::= Chairman ;
 Person ::= Organizer ;
 Person ::= Speaker ;
 Person ::= hasMail::String worksForCompany::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasAffiliation::String hasFirstName::String hasLastName::String hasEmail::String hasName::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person ;
ProgramCommitteeMember ::= ProgramCommitteeChair ;
 ProgramCommitteeMember ::= Chair ;
 ProgramCommitteeMember ::= memberOfProgramCommittee::ProgramCommittee maxPapers::Integer addedBy::Administrator isMemberOf::ProgramCommittee hasPassword::String ;
Invited_Talk_Abstract ::= (is_the_1th_part_of::Thing)+ part_of_article::Article ;
Poster ::= is_submitted_at::Conference_volume ;
 Poster ::= changedBy::Author hasContributionStatus::EEnum writtenBy::Author dealsWith::Topic remark::String abstract::String contactEmail::String hasKeyword::String hasTitle::String ;
 Poster ::= hasContributionFileStatus::EEnum ;
Invitation_letter ::= (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document recieved_by::User used_by::Person submited__by::User ;
Paper ::= PaperFullVersion ;
 Paper ::= Invited_Paper ;
 Paper ::= Short_Paper ;
 Paper ::= Full_Paper ;
 Paper ::= Undecided_Paper ;
 Paper ::= ActivePaper ;
 Paper ::= PendingPaper ;
 Paper ::= WithdrawnPaper ;
 Paper ::= RejectedPaper ;
 Paper ::= PublishedPaper ;
 Paper ::= Camera_Ready_Paper ;
 Paper ::= Workshop_Paper ;
 Paper ::= Industrial_Paper ;
 Paper ::= Conference_Paper ;
 Paper ::= Poster_Paper ;
 Paper ::= Regular_Paper ;
 Paper ::= Demo_Paper ;
 Paper ::= AcceptedPaper ;
 Paper ::= Submitted_Paper ;
 Paper ::= Abstract ;
 Paper ::= Accepted_Paper ;
 Paper ::= Rejected_Paper ;
 Paper ::= PaperAbstract ;
 Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum hasCo-Author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
Volunteer ::= hasMail::String worksForCompany::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasAffiliation::String hasFirstName::String hasLastName::String hasEmail::String hasName::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person ;
Conference_announcement ::= has_authors::Person has_a_date_of_issue::date ;
Administrative_event ::= Reviewing_results_event ;
 Administrative_event ::= Reviewing_event ;
 Administrative_event ::= Registration_of_participants_event ;
 Administrative_event ::= Submission_event ;
 Administrative_event ::= Camera_Ready_event ;
 Administrative_event ::= follows::Administrative_event parallel_with::Administrative_event ;
WithdrawnPaper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum hasCo-Author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
Program_Committee_Chair ::= is_author_of::Article performs_activity::Activity is_employed_in::institute has_topic_of_interest::Topic supervises::Activity e-mail::String last_name::String first_name::String ;
Brief_introduction_for_Session_chair ::= (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document recieved_by::User used_by::Person submited__by::User ;
Conference_Program ::= Program_made_by::Program_chair planned_papers::Planed_Paper ;
paper_assignment ::= Manual_Paper_Assignment ;
 paper_assignment ::= Automatic_Paper_Assignment ;
 paper_assignment ::= assign_paper::Program_Committee_member is_performed_by::human ;
Positive_Review ::= reviewOfPaper::Paper reviewWrittenBy::Possible_Reviewer containsEvaluation::Evaluation rates::Paper isWritenBy::Reviewer writtenBy::Reviewer reviews::Reviewed_contribution gives_classification::classification is_created_in::Activity review_written_by::Reviewer ;
PublishedPaper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum hasCo-Author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
Committee ::= Program_committee ;
 Committee ::= Organizing_committee ;
 Committee ::= Steering_committee ;
 Committee ::= has_members::Committee_member was_a_committee_of::Conference_volume has_a_committee_co-chair::Co-chair has_a_committee_chair::Chair ;
Conference_hall ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
Corresponding_Author ::= submitPaper::Paper writes::Contribution writes_article::Article assigns_article_to_conference::Article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing submitsPaper::Paper writePaper::Paper writes_Paper::Paper changes::Contribution ;
PendingPaper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum hasCo-Author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
Symposium ::= conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator starts_on::String ends_on::String has_startdate::dateTime has_enddate::dateTime (eventOnList::Thing)+ partOfEvent::Event hasEvent::Event (organisedBy::Thing)+ heldIn::Location ;
PowerlineTransmissionTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event isIncluded::Activity ;
TestOnlyTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event isIncluded::Activity ;
Undecided_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum hasCo-Author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
AuthorNotReviewer ::= submitPaper::Paper writes::Contribution writes_article::Article assigns_article_to_conference::Article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing submitsPaper::Paper writePaper::Paper writes_Paper::Paper changes::Contribution ;
Industrial_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum hasCo-Author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
Abstract ::= Tutorial_Abstract ;
 Abstract ::= Invited_Talk_Abstract ;
 Abstract ::= (is_the_1th_part_of::Thing)+ part_of_article::Article ;
Flyer ::= (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document recieved_by::User used_by::Person submited__by::User ;
ActivitySubmissionForm ::= TutorialProposal ;
 ActivitySubmissionForm ::= WorksopProposal ;
 ActivitySubmissionForm ::= isSubmittedBy::Author hasAuthor::Author submissionDeadline::dateTime ;
Tutorial_speaker ::= submitPaper::Paper writes::Contribution writes_article::Article assigns_article_to_conference::Article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing submitsPaper::Paper writePaper::Paper writes_Paper::Paper changes::Contribution ;
Organising_Agency ::= (publisherOf::Thing)+ technicallyOrganises::Thing ;
PaperFullVersion ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum hasCo-Author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
Conference ::= Conference_volume ;
 Conference ::= TwoLevelConference ;
 Conference ::= SingleLevelConference ;
 Conference ::= is_in_phase::phase_of_conference has_program::program hasMember::Person hasName::String endDate::dateTime paperDueOn::dateTime registrationDueOn::dateTime manuscriptDueOn::dateTime startDate::dateTime hasCountry::Country isOrganizedBy::OrganizingCommittee annualOrder::Integer takesPlace::Location hasAcronym::String finishedBy::Program_Comitee_Chair focusesOn::Topic startedBy::Program_Comitee_Chair takesPlace::Location hasConferenceMember::ConferenceMember paperAssignmentFinalizedBy::Administrator reviewCriteriaEnteredBy::Administrator paperAssignmentToolsRunBy::Administrator virtualMeetingEnabledBy::Administrator hardcopyMailingManifestsPrintedBy::Administrator detailsEnteredBy::Administrator reviewerBiddingStartedBy::Administrator date::date reviewsPerPaper::Integer logoURL::anyURI acceptsHardcopySubmissions::Boolean siteURL::anyURI ;
Document ::= Email ;
 Document ::= Template ;
 Document ::= Article ;
 Document ::= SlideSet ;
 Document ::= Programme ;
 Document ::= MealMenu ;
 Document ::= Programme_Brochure ;
 Document ::= Flyer ;
 Document ::= Web_Site ;
 Document ::= Multi-author_Volume ;
 Document ::= Form ;
 Document ::= Mailing_list ;
 Document ::= Record_of_attendance ;
 Document ::= Brief_introduction_for_Session_chair ;
 Document ::= Invitation_letter ;
 Document ::= Viza ;
 Document ::= Transparency ;
 Document ::= Submission ;
 Document ::= Payment_document ;
 Document ::= Evaluation ;
 Document ::= PaperAbstract ;
 Document ::= (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document recieved_by::User used_by::Person submited__by::User ;
Viza ::= (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document recieved_by::User used_by::Person submited__by::User ;
Demo_Session ::= hasAssignedPaper::AcceptedPaper room::String isAssociatedTo::Slot hasChair::Chair ;
SingleLevelConference ::= is_in_phase::phase_of_conference has_program::program hasMember::Person hasName::String endDate::dateTime paperDueOn::dateTime registrationDueOn::dateTime manuscriptDueOn::dateTime startDate::dateTime hasCountry::Country isOrganizedBy::OrganizingCommittee annualOrder::Integer takesPlace::Location hasAcronym::String finishedBy::Program_Comitee_Chair focusesOn::Topic startedBy::Program_Comitee_Chair takesPlace::Location hasConferenceMember::ConferenceMember paperAssignmentFinalizedBy::Administrator reviewCriteriaEnteredBy::Administrator paperAssignmentToolsRunBy::Administrator virtualMeetingEnabledBy::Administrator hardcopyMailingManifestsPrintedBy::Administrator detailsEnteredBy::Administrator reviewerBiddingStartedBy::Administrator date::date reviewsPerPaper::Integer logoURL::anyURI acceptsHardcopySubmissions::Boolean siteURL::anyURI ;
Sponsorship ::= TravelGrant ;
 Sponsorship ::= providedBy::Organization hasCostCurrency::String hasCostAmount::Integer ;
ConferenceVenuePlace ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
WirelessCommunicationsTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event isIncluded::Activity ;
Item ::= Transport_vehicle ;
 Item ::= Card ;
 Item ::= Audiovisual_equipment ;
 Item ::= Publication ;
 Item ::= Document ;
 Item ::= go_through::Activity (is_used_for::Thing)+ is_signed_by::Person is_made_from::Item is_sent_after::Time is_needed_for::Person is_sent_before::Time is_prepared_by::Person is_used_by::Person is_given_to::Person is_sent_by::Person is_writen_by::Person ;
ConferenceAttendant ::= mustPay::Fee hasAdress::String paid::Boolean hasPhone::String ;
Demo_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum hasCo-Author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
CallForReviews ::= forEvent::AcademicEvent (isInitiatedBy::Person)+ hasSubmissionInstructions::String hasSubmissionDeadline::dateTime ;
Contribution ::= Poster ;
 Contribution ::= Short_paper ;
 Contribution ::= Contribution_File ;
 Contribution ::= Paper ;
 Contribution ::= changedBy::Author hasContributionStatus::EEnum writtenBy::Author dealsWith::Topic remark::String abstract::String contactEmail::String hasKeyword::String hasTitle::String ;
Activity ::= Event_Creation ;
 Activity ::= Request ;
 Activity ::= Event_Approval ;
 Activity ::= Registration ;
 Activity ::= paper_assignment ;
 Activity ::= bidding_of_reviewer ;
 Activity ::= managing_of_conference_process ;
 Activity ::= reviewing_proces ;
 Activity ::= notification ;
 Activity ::= submission_process ;
 Activity ::= Activity_before_conference ;
 Activity ::= Conference_activity ;
 Activity ::= Activity_after_conference ;
 Activity ::= Lecture ;
 Activity ::= hasTopic::Topic expectedAttendance::Integer isPartOf::Conference is_held_before::Time is_held_in::Thing is_held_after::Time is_dated_on::dateTime has_result::Article sent_by::Person is_followed_by::Activity is_monitored_by::human has_intensity::intensity has_result::Article is_performed_by::human is_supervised_by::human ;
human ::= Program_Committee_member ;
 human ::= Contact_Person ;
 human ::= Program_Committee_Chair ;
 human ::= is_author_of::Article performs_activity::Activity is_employed_in::institute has_topic_of_interest::Topic supervises::Activity e-mail::String last_name::String first_name::String ;
Track ::= has_a_track-workshop-tutorial_topic::Topic is_part_of_conference_volumes::Conference_volume has_a_track-workshop-tutorial_chair::Track-workshop_chair ;
CADTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event isIncluded::Activity ;
Information_for_participants ::= has_authors::Person has_a_date_of_issue::date ;
Programme_Brochure ::= (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document recieved_by::User used_by::Person submited__by::User ;
Reviewer ::= Meta-Reviewer ;
 Reviewer ::= invites_co-reviewers::Reviewer invited_by::Reviewer (has_a_review_reference_or_expertise::Thing)+ writes_review::Review hasReviewHistory::PersonalReviewHistory executes::DoubleBlindReview cooperates::ExternalReviewer IsAssignedTo::Paper hasConflictedPaper::Paper hasPreferredPaper::Paper hasPreferredTopic::ResearchTopic writeReview::Review has_made_review::Paper_Review UserName::String Comments_to_Chair::String Other_Areas::String refuses::Pending_Proposed_Conflict reviews::Paper bidsFor::Paper confirmes::Pending_Proposed_Conflict assignedPaperBy::Program_Comitee_Chair assignedByAdministrator::Administrator adjustBid::Bid readPaper::Paper hasBeenAssigned::Paper assignExternalReviewer::ExternalReviewer ;
Event_Creation ::= hasTopic::Topic expectedAttendance::Integer isPartOf::Conference is_held_before::Time is_held_in::Thing is_held_after::Time is_dated_on::dateTime has_result::Article sent_by::Person is_followed_by::Activity is_monitored_by::human has_intensity::intensity has_result::Article is_performed_by::human is_supervised_by::human ;
Meta-Review ::= reviewOfPaper::Paper reviewWrittenBy::Possible_Reviewer containsEvaluation::Evaluation rates::Paper isWritenBy::Reviewer writtenBy::Reviewer reviews::Reviewed_contribution gives_classification::classification is_created_in::Activity review_written_by::Reviewer ;
Slot ::= date::date endsAt::time beginsAt::time forms::ConferenceProgram hosts::Session ;
Speaker_lecture ::= hasAssignedPaper::AcceptedPaper room::String isAssociatedTo::Slot hasChair::Chair ;
Student ::= earlyRegistration::Boolean ;
 Student ::= hasMail::String worksForCompany::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasAffiliation::String hasFirstName::String hasLastName::String hasEmail::String hasName::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person ;
Poster_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum hasCo-Author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
managing_of_conference_process ::= hasTopic::Topic expectedAttendance::Integer isPartOf::Conference is_held_before::Time is_held_in::Thing is_held_after::Time is_dated_on::dateTime has_result::Article sent_by::Person is_followed_by::Activity is_monitored_by::human has_intensity::intensity has_result::Article is_performed_by::human is_supervised_by::human ;
Conference_part ::= Track ;
 Conference_part ::= Workshop ;
 Conference_part ::= Tutorial ;
 Conference_part ::= has_a_track-workshop-tutorial_topic::Topic is_part_of_conference_volumes::Conference_volume has_a_track-workshop-tutorial_chair::Track-workshop_chair ;
Call_for_paper ::= has_authors::Person has_a_date_of_issue::date ;
MeetingRoomPlace ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
SlideSet ::= (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document recieved_by::User used_by::Person submited__by::User ;
Neutral_Review ::= reviewOfPaper::Paper reviewWrittenBy::Possible_Reviewer containsEvaluation::Evaluation rates::Paper isWritenBy::Reviewer writtenBy::Reviewer reviews::Reviewed_contribution gives_classification::classification is_created_in::Activity review_written_by::Reviewer ;
ExternalReviewer ::= cooperatesReviewer::Reviewer assignedByReviewer::Reviewer ;
Topic ::= ParallelAndDistributedComputingTopic ;
 Topic ::= WirelessCommunicationsTopic ;
 Topic ::= OperatingTopicsystems ;
 Topic ::= ComputerNetworksTopic ;
 Topic ::= SatelliteAndSpaceCommunicationsTopic ;
 Topic ::= CADTopic ;
 Topic ::= MultimediaTopic ;
 Topic ::= CommunicationsTopic ;
 Topic ::= PowerlineTransmissionTopic ;
 Topic ::= AntennasTopic ;
 Topic ::= PerformanceTopic ;
 Topic ::= SignalProcessingTopic ;
 Topic ::= MicroelectronicsTopic ;
 Topic ::= TestOnlyTopic ;
 Topic ::= RadioCommunicationsTopic ;
 Topic ::= ComputerArchitectureTopic ;
 Topic ::= MedicineTopic ;
 Topic ::= SecurityTopic ;
 Topic ::= MobileComputingTopic ;
 Topic ::= CryptographyTopic ;
 Topic ::= CommunicationTheoryTopic ;
 Topic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event isIncluded::Activity ;
ContactInformation ::= hasCity::String hasStreet::String hasPostalCode::String hasPhone::String ;
Review_expertise ::= has_a_submitted_contribution::Submitted_contribution has_an_expertise::EEnum ;
Submitted_Paper ::= Assigned_Paper ;
 Submitted_Paper ::= Reviewed_Paper ;
 Submitted_Paper ::= Advocated_Paper ;
 Submitted_Paper ::= is_stored_in::Paper_File has_been_sent_by::Contact_Author Paper_Id::String Comments_To_Chair::String ;
Important_dates ::= is_an_abstract_submission_date::date is_a_full_paper_submission_date::date is_an_ending_date::date is_a_date_of_acceptance_announcement::date is_a_date_of_camera_ready_paper_submission::date is_a_starting_date::date belong_to_a_conference_volume::Conference_volume ;
Submission_event ::= follows::Administrative_event parallel_with::Administrative_event ;
Author_cd_proceedings_included ::= submitPaper::Paper writes::Contribution writes_article::Article assigns_article_to_conference::Article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing submitsPaper::Paper writePaper::Paper writes_Paper::Paper changes::Contribution ;
AcceptedPaper ::= relatedToEvent::PaperPresentation isAssignedToSession::Session ;
Session_room ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
Record_of_attendance ::= (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document recieved_by::User used_by::Person submited__by::User ;
TravelGrant ::= providedBy::Organization hasCostCurrency::String hasCostAmount::Integer ;
Review_preference ::= (has_a_topic_or_a_submission_contribution::Thing)+ has_a_degree::Integer ;
--------------------metamodels::sbvrEclipse.bgf--------------------
WhetherornotFormulation ::= (inconsequent::LogicalFormulation)+ (consequent::LogicalFormulation)+ ;
ReferenceSchemeSimplyUsesFactTypeRole ::= referenceScheme::ReferenceScheme factTypeRole::FactTypeRole ;
ClosedProjection ::= constrainingFormulation::LogicalFormulation (projectionVariable::Variable)+ (auxiliaryVariable::AuxiliaryVariable)+ ;
VocabularyNamespaceIsSpecificToSubjectField ::= vocabularyNamespace::VocabularyNamespace subjectField::SubjectField ;
ReferenceSchemeIsForConcept ::= referenceScheme::ReferenceScheme concept::Concept ;
DesignationHasSignifier ::= designation::Designation signifier::Expression ;
FactTypeHasFactInFactModel ::= factType::FactType fact::Fact factModel::FactModel ;
ProjectionHasAuxiliaryVariable ::= projection::Projection auxiliaryVariable::AuxiliaryVariable ;
NandFormulation ::= (logicalOperand2::LogicalFormulation)+ (logicalOperand1::LogicalFormulation)+ ;
WhetherornotFormulationHasConsequent ::= whetherornotFormulation::WhetherornotFormulation consequent::LogicalFormulation ;
VocabularyNamespaceIsDerivedFromVocabulary ::= vocabularyNamespace::VocabularyNamespace vocabulary::Vocabulary ;
PropositionNominalizationConsidersLogicalFormulation ::= propositionNominalization::PropositionNominalization logicalFormulation::LogicalFormulation ;
Representation ::= Designation ;
 Representation ::= Definition ;
 Representation ::= Statement ;
 Representation ::= FactTypeForm ;
 Representation ::= CommunicationContent ;
 Representation ::= Description ;
 Representation ::= DescriptiveExample ;
 Representation ::= FormalRepresentation ;
 Representation ::= InformalRepresentation ;
 Representation ::= Note ;
 Representation ::= Reference ;
 Representation ::= meaning::Meaning expression::Expression ;
SpeechCommunityDeterminesRulebook ::= speechCommunity::SpeechCommunity rulebook::Rulebook ;
SpeechCommunityUsesLanguage ::= speechCommunity::SpeechCommunity language::Language ;
NumericRangeQuantification ::= maximumCardinality::NonnegativeInteger minimumCardinality::NonnegativeInteger ;
ProjectingFormulationBindsToBindableTarget ::= projectingFormulation::ProjectingFormulation bindableTarget::BindableTarget ;
ConceptHasInstance ::= concept::Concept instance::Thing ;
FactType ::= Characteristic ;
 FactType ::= AssociativeFactType ;
 FactType ::= AssortmentFactType ;
 FactType ::= BinaryFactType ;
 FactType ::= SpecializationFactType ;
 FactType ::= IsroleofFactType ;
 FactType ::= (factTypeForm::FactTypeForm)+ (role::FactTypeRole)+ ;
RepresentationHasExpression ::= representation::Representation expression::Expression ;
SpeechCommunityOwnsOwnedDefinition ::= speechCommunity::SpeechCommunity ownedDefinition::OwnedDefinition ;
CommunicationContent ::= meaning::Meaning expression::Expression ;
AtomicFormulationIsBasedOnFactType ::= atomicFormulation::AtomicFormulation factType::FactType ;
RulebookIncludesRepresentation ::= rulebook::Rulebook representation::Representation ;
BodyOfSharedMeaningsUnitesSemanticCommunity ::= bodyOfSharedMeanings::BodyOfSharedMeanings semanticCommunity::SemanticCommunity ;
ConceptIsIncludedInBodyOfSharedConcepts ::= concept::Concept bodyOfSharedConcepts::BodyOfSharedConcepts ;
LogicalOperationHasLogicalOperand ::= logicalOperation::LogicalOperation logicalOperand::LogicalFormulation ;
Description ::= meaning::Meaning expression::Expression ;
Implication ::= (consequent::LogicalFormulation)+ (antecedent::LogicalFormulation)+ ;
FactTypeRoleDesignation ::= implicitlyIsUnderstood::Boolean signifier::Expression ;
IntensionalDefinitionUsesDelimitingCharacteristic ::= intensionalDefinition::IntensionalDefinition delimitingCharacteristic::Characteristic ;
ModalFormulationEmbedsLogicalFormulation ::= modalFormulation::ModalFormulation logicalFormulation::LogicalFormulation ;
Designation ::= Name ;
 Designation ::= Placeholder ;
 Designation ::= FactSymbol ;
 Designation ::= FactTypeRoleDesignation ;
 Designation ::= NonverbalDesignation ;
 Designation ::= PreferredDesignation ;
 Designation ::= ProhibitedDesignation ;
 Designation ::= Term ;
 Designation ::= implicitlyIsUnderstood::Boolean signifier::Expression ;
PreferredDesignation ::= implicitlyIsUnderstood::Boolean signifier::Expression ;
AtmostnQuantificationHasMaximumCardinality ::= atmostnQuantification::AtmostnQuantification maximumCardinality::NonnegativeInteger ;
RoleBindingOccursInAtomicFormulation ::= roleBinding::RoleBinding atomicFormulation::AtomicFormulation ;
ResIsSensoryManifestationOfSignifier ::= res::Res signifier::Expression ;
ConceptOfThingExistingDependently ::= (attributiveNamespace::AttributiveNamespace)+ (definition::Definition)+ (moreGeneralConcept::Concept)+ (category::Concept)+ (essentialCharacteristic::Characteristic)+ (instance::Thing)+ (referenceScheme::ReferenceScheme)+ (impliedCharacteristic::Characteristic)+ (necessaryCharacteristic::Characteristic)+ (designation::Designation)+ extension::Set ;
FactTypeRoleHasRoleBinding ::= factTypeRole::FactTypeRole roleBinding::RoleBinding ;
ObjectificationConsidersLogicalFormulation ::= objectification::Objectification logicalFormulation::LogicalFormulation ;
InstantiationFormulationBindsToBindableTarget ::= instantiationFormulation::InstantiationFormulation bindableTarget::BindableTarget ;
VocabularyIsDesignedForSpeechCommunity ::= vocabulary::Vocabulary speechCommunity::SpeechCommunity ;
QuantificationIntroducesVariable ::= quantification::Quantification variable::Variable ;
RepresentationIsInSubjectField ::= representation::Representation subjectField::SubjectField ;
Community ::= SemanticCommunity ;
 Community ::= SpeechCommunity ;
 Community ::= (uri::Uri)+ (subcommunity::Community)+ ;
BodyOfSharedMeaningsIncludesBodyOfSharedConcepts ::= bodyOfSharedMeanings::BodyOfSharedMeanings bodyOfSharedConcepts::BodyOfSharedConcepts ;
StatementExpressesProposition ::= statement::Statement proposition::Proposition ;
AtleastnQuantificationHasMinimumCardinality ::= atleastnQuantification::AtleastnQuantification minimumCardinality::NonnegativeInteger ;
FactTypeFormDemonstratesDesignation ::= factTypeForm::FactTypeForm designation::Designation ;
RepresentationRepresentsMeaning ::= representation::Representation meaning::Meaning ;
FactModelIsBasedOnConceptualSchema ::= factModel::FactModel conceptualSchema::ConceptualSchema ;
VocabularyNamespaceIsForLanguage ::= vocabularyNamespace::VocabularyNamespace language::Language ;
Disjunction ::= (logicalOperand2::LogicalFormulation)+ (logicalOperand1::LogicalFormulation)+ ;
ConceptHasSharedUnderstandingBySemanticCommunity ::= concept::Concept semanticCommunity::SemanticCommunity ;
SpeechCommunityAdoptsAdoptedDefinitionCitingReference ::= speechCommunity::SpeechCommunity adoptedDefinition::AdoptedDefinition reference::Reference ;
LogicalFormulationConstrainsProjection ::= logicalFormulation::LogicalFormulation projection::Projection ;
FormalRepresentation ::= meaning::Meaning expression::Expression ;
Characteristic ::= (factTypeForm::FactTypeForm)+ (role::FactTypeRole)+ ;
SpeechCommunityUsesVocabulary ::= speechCommunity::SpeechCommunity vocabulary::Vocabulary ;
PlaceholderUsesDesignation ::= placeholder::Placeholder designation::Designation ;
BinaryLogicalOperationHasLogicalOperand2 ::= binaryLogicalOperation::BinaryLogicalOperation logicalOperand2::LogicalFormulation ;
BinaryLogicalOperationHasLogicalOperand1 ::= binaryLogicalOperation::BinaryLogicalOperation logicalOperand1::LogicalFormulation ;
Conjunction ::= (logicalOperand2::LogicalFormulation)+ (logicalOperand1::LogicalFormulation)+ ;
Proposition ::= ElementOfGuidance ;
 Proposition ::= Rule ;
 Proposition ::= Fact ;
 Proposition ::= isFalse::Boolean isTrue::Boolean (statement::Statement)+ isPossiblyTrue::Boolean isObligatedToBeTrue::Boolean isPermittedToBeTrue::Boolean isNecessarilyTrue::Boolean ;
FactTypeIsElementaryInBodyOfSharedMeanings ::= factType::FactType bodyOfSharedMeanings::BodyOfSharedMeanings ;
BusinessRuleIsDerivedFromBusinessPolicy ::= businessRule::BusinessRule businessPolicy::BusinessPolicy ;
StateOfAffairsInvolvesThingInRole ::= stateOfAffairs::StateOfAffairs thing::Thing role::Role ;
ReferenceScheme ::= (simplyUsedRole::FactTypeRole)+ (identifyingCharacteristic::Characteristic)+ (extensionallyUsedRole::FactTypeRole)+ ;
NumericRangeQuantificationHasMinimumCardinality ::= numericRangeQuantification::NumericRangeQuantification minimumCardinality::NonnegativeInteger ;
PlaceholderIsInFactTypeForm ::= placeholder::Placeholder factTypeForm::FactTypeForm ;
CategorizationSchemeContainsCategory ::= categorizationScheme::CategorizationScheme category::Concept ;
Name ::= implicitlyIsUnderstood::Boolean signifier::Expression ;
VariableMapsToFactTypeRole ::= variable::Variable factTypeRole::FactTypeRole ;
ConceptOfThingAsOccurrent ::= (attributiveNamespace::AttributiveNamespace)+ (definition::Definition)+ (moreGeneralConcept::Concept)+ (category::Concept)+ (essentialCharacteristic::Characteristic)+ (instance::Thing)+ (referenceScheme::ReferenceScheme)+ (impliedCharacteristic::Characteristic)+ (necessaryCharacteristic::Characteristic)+ (designation::Designation)+ extension::Set ;
ConceptOfThingAsUnitary ::= (attributiveNamespace::AttributiveNamespace)+ (definition::Definition)+ (moreGeneralConcept::Concept)+ (category::Concept)+ (essentialCharacteristic::Characteristic)+ (instance::Thing)+ (referenceScheme::ReferenceScheme)+ (impliedCharacteristic::Characteristic)+ (necessaryCharacteristic::Characteristic)+ (designation::Designation)+ extension::Set ;
BusinessPolicyIsBasisForAdvice ::= businessPolicy::BusinessPolicy advice::Advice ;
SituationalRole ::= (categorizationScheme::CategorizationScheme)+ (categorizationType::CategorizationType)+ ;
BinaryLogicalOperation ::= Conjunction ;
 BinaryLogicalOperation ::= Disjunction ;
 BinaryLogicalOperation ::= Equivalence ;
 BinaryLogicalOperation ::= ExclusiveDisjunction ;
 BinaryLogicalOperation ::= Implication ;
 BinaryLogicalOperation ::= NandFormulation ;
 BinaryLogicalOperation ::= NorFormulation ;
 BinaryLogicalOperation ::= WhetherornotFormulation ;
 BinaryLogicalOperation ::= (logicalOperand2::LogicalFormulation)+ (logicalOperand1::LogicalFormulation)+ ;
FactTypeHasFactTypeForm ::= factType::FactType factTypeForm::FactTypeForm ;
ClosedProjectionFormalizesDefinition ::= closedProjection::ClosedProjection definition::Definition ;
Variable ::= AuxiliaryVariable ;
 Variable ::= restrictingFormulation::LogicalFormulation projectionPosition::PositiveInteger rangedoverConcept::Concept isUnitary::Boolean ;
CommunityHasUri ::= community::Community uri::Uri ;
TermDenotesThing ::= term::Term thing::Thing ;
ClosedSemanticFormulationFormulatesMeaning ::= closedSemanticFormulation::ClosedSemanticFormulation meaning::Meaning ;
ProjectingFormulationHasProjection ::= projectingFormulation::ProjectingFormulation projection::Projection ;
NoteCommentsOnMeaning ::= note::Note meaning::Meaning ;
DescriptionPortraysMeaning ::= description::Description meaning::Meaning ;
VariableHasProjectionPosition ::= variable::Variable projectionPosition::PositiveInteger ;
DesignationIsInNamespace ::= designation::Designation namespace::Namespace ;
ImplicationHasConsequent ::= implication::Implication consequent::LogicalFormulation ;
NamespaceHasUri ::= namespace::Namespace uri::Uri ;
Fact ::= isFalse::Boolean isTrue::Boolean (statement::Statement)+ isPossiblyTrue::Boolean isObligatedToBeTrue::Boolean isPermittedToBeTrue::Boolean isNecessarilyTrue::Boolean ;
Term ::= implicitlyIsUnderstood::Boolean signifier::Expression ;
SpeechCommunityRegulatesItsUsageOfSignifier ::= speechCommunity::SpeechCommunity signifier::Expression ;
VocabularyNamespaceIsSpecificToDesignationContext ::= vocabularyNamespace::VocabularyNamespace designationContext::Concept ;
FactTypeInternallyIsClosedInConceptualSchema ::= factType::FactType conceptualSchema::ConceptualSchema ;
ExclusiveDisjunction ::= (logicalOperand2::LogicalFormulation)+ (logicalOperand1::LogicalFormulation)+ ;
ClosedProjectionDefinesFactType ::= closedProjection::ClosedProjection factType::FactType ;
FundamentalConcept ::= (categorizationScheme::CategorizationScheme)+ (categorizationType::CategorizationType)+ ;
FactTypeFormIsInNamespace ::= factTypeForm::FactTypeForm namespace::Namespace ;
FactTypeFormIncorporatesFactSymbol ::= factTypeForm::FactTypeForm factSymbol::FactSymbol ;
Quantity1IsLessThanQuantity2 ::= quantity1::Quantity quantity2::Quantity ;
IsroleofFactType ::= (factTypeForm::FactTypeForm)+ (role::FactTypeRole)+ ;
VocabularyIsUsedToExpressBodyOfSharedMeanings ::= vocabulary::Vocabulary bodyOfSharedMeanings::BodyOfSharedMeanings ;
SetHasCardinality ::= set::Set cardinality::NonnegativeInteger ;
ConceptIncorporatesCharacteristic ::= concept::Concept characteristic::Characteristic ;
DescriptiveExampleIllustratesMeaning ::= descriptiveExample::DescriptiveExample meaning::Meaning ;
FactModelIncludesFact ::= factModel::FactModel fact::Fact ;
TerminologicalDictionaryExpressesBodyOfSharedMeanings ::= terminologicalDictionary::TerminologicalDictionary bodyOfSharedMeanings::BodyOfSharedMeanings ;
FactTypeRoleIsInFactType ::= factTypeRole::FactTypeRole factType::FactType ;
Projection ::= BagProjection ;
 Projection ::= ClosedProjection ;
 Projection ::= SetProjection ;
 Projection ::= constrainingFormulation::LogicalFormulation (projectionVariable::Variable)+ (auxiliaryVariable::AuxiliaryVariable)+ ;
ConceptOfThingAsPrimitive ::= (attributiveNamespace::AttributiveNamespace)+ (definition::Definition)+ (moreGeneralConcept::Concept)+ (category::Concept)+ (essentialCharacteristic::Characteristic)+ (instance::Thing)+ (referenceScheme::ReferenceScheme)+ (impliedCharacteristic::Characteristic)+ (necessaryCharacteristic::Characteristic)+ (designation::Designation)+ extension::Set ;
ImplicationHasAntecedent ::= implication::Implication antecedent::LogicalFormulation ;
ConceptHasDesignation ::= concept::Concept designation::Designation ;
ClosedLogicalFormulationFormalizesStatement ::= closedLogicalFormulation::ClosedLogicalFormulation statement::Statement ;
InformalRepresentation ::= meaning::Meaning expression::Expression ;
TerminologicalDictionaryPresentsVocabulary ::= terminologicalDictionary::TerminologicalDictionary vocabulary::Vocabulary ;
QuantificationScopesOverLogicalFormulation ::= quantification::Quantification logicalFormulation::LogicalFormulation ;
ReferencePointsToInformationSource ::= reference::Reference informationSource::CommunicationContent ;
NumericRangeQuantificationHasMaximumCardinality ::= numericRangeQuantification::NumericRangeQuantification maximumCardinality::NonnegativeInteger ;
CategorizationTypeIsForGeneralConcept ::= categorizationType::CategorizationType generalConcept::ObjectType ;
InstantiationFormulationConsidersConcept ::= instantiationFormulation::InstantiationFormulation concept::Concept ;
SpeechCommunityOwnsVocabulary ::= speechCommunity::SpeechCommunity vocabulary::Vocabulary ;
ExpressionRepresentsMeaning ::= expression::Expression meaning::Meaning ;
CommunityHasSubcommunity ::= community::Community subcommunity::Community ;
ReferenceSchemeUsesCharacteristic ::= referenceScheme::ReferenceScheme characteristic::Characteristic ;
BagProjection ::= constrainingFormulation::LogicalFormulation (projectionVariable::Variable)+ (auxiliaryVariable::AuxiliaryVariable)+ ;
RepresentationIsInDesignationContext ::= representation::Representation designationContext::Concept ;
ProjectionIsOnVariable ::= projection::Projection variable::Variable ;
ExactlynQuantificationHasCardinality ::= exactlynQuantification::ExactlynQuantification cardinality::NonnegativeInteger ;
ConceptHasImpliedCharacteristic ::= concept::Concept impliedCharacteristic::Characteristic ;
CategorizationSchemeIsForGeneralConcept ::= categorizationScheme::CategorizationScheme generalConcept::ObjectType ;
ConceptualSchemaIncludesFact ::= conceptualSchema::ConceptualSchema fact::Fact ;
ReferenceSchemeExtensionallyUsesFactTypeRole ::= referenceScheme::ReferenceScheme factTypeRole::FactTypeRole ;
MeaningCorrespondsToThing ::= meaning::Meaning thing::Thing ;
Concept ::= NounConcept ;
 Concept ::= FactType ;
 Concept ::= CategorizationType ;
 Concept ::= ObjectType ;
 Concept ::= ConceptOfThingAsComposite ;
 Concept ::= ConceptOfThingAsContinuant ;
 Concept ::= ConceptOfThingAsDeveloped ;
 Concept ::= ConceptOfThingAsOccurrent ;
 Concept ::= ConceptOfThingAsPrimitive ;
 Concept ::= ConceptOfThingAsUnitary ;
 Concept ::= ConceptOfThingExistingDependently ;
 Concept ::= ConceptOfThingExistingIndependently ;
 Concept ::= DerivableConcept ;
 Concept ::= (attributiveNamespace::AttributiveNamespace)+ (definition::Definition)+ (moreGeneralConcept::Concept)+ (category::Concept)+ (essentialCharacteristic::Characteristic)+ (instance::Thing)+ (referenceScheme::ReferenceScheme)+ (impliedCharacteristic::Characteristic)+ (necessaryCharacteristic::Characteristic)+ (designation::Designation)+ extension::Set ;
ThingIsInSet ::= thing::Thing set::Set ;
FactSymbol ::= implicitlyIsUnderstood::Boolean signifier::Expression ;
CommunicationContentIsComposedOfRepresentation ::= communicationContent::CommunicationContent representation::Representation ;
Quantity1EqualsQuantity2 ::= quantity1::Quantity quantity2::Quantity ;
BodyOfSharedMeanings1ContainsBodyOfSharedMeanings2 ::= bodyOfSharedMeanings1::BodyOfSharedMeanings bodyOfSharedMeanings2::BodyOfSharedMeanings ;
AuxiliaryVariable ::= restrictingFormulation::LogicalFormulation projectionPosition::PositiveInteger rangedoverConcept::Concept isUnitary::Boolean ;
Set ::= BodyOfSharedMeanings ;
 Set ::= Vocabulary ;
 Set ::= Rulebook ;
 Set ::= cardinality::NonnegativeInteger (element::Thing)+ ;
ConceptIsClosedInConceptualSchema ::= concept::Concept conceptualSchema::ConceptualSchema ;
ConceptOfThingAsDeveloped ::= (attributiveNamespace::AttributiveNamespace)+ (definition::Definition)+ (moreGeneralConcept::Concept)+ (category::Concept)+ (essentialCharacteristic::Characteristic)+ (instance::Thing)+ (referenceScheme::ReferenceScheme)+ (impliedCharacteristic::Characteristic)+ (necessaryCharacteristic::Characteristic)+ (designation::Designation)+ extension::Set ;
ObjectificationBindsToBindableTarget ::= objectification::Objectification bindableTarget::BindableTarget ;
RoleRangesOverObjectType ::= role::Role objectType::ObjectType ;
ProhibitedDesignation ::= implicitlyIsUnderstood::Boolean signifier::Expression ;
ObjectType ::= ConceptType ;
 ObjectType ::= FundamentalConcept ;
 ObjectType ::= LogicalFormulationKind ;
 ObjectType ::= SituationalRole ;
 ObjectType ::= (categorizationScheme::CategorizationScheme)+ (categorizationType::CategorizationType)+ ;
PropositionIsBasedOnFactType ::= proposition::Proposition factType::FactType ;
ConceptHasNecessaryCharacteristic ::= concept::Concept necessaryCharacteristic::Characteristic ;
AssortmentFactType ::= (factTypeForm::FactTypeForm)+ (role::FactTypeRole)+ ;
TerminologicalDictionaryHasUri ::= terminologicalDictionary::TerminologicalDictionary uri::Uri ;
SetProjection ::= constrainingFormulation::LogicalFormulation (projectionVariable::Variable)+ (auxiliaryVariable::AuxiliaryVariable)+ ;
SemanticCommunityHasSpeechCommunity ::= semanticCommunity::SemanticCommunity speechCommunity::SpeechCommunity ;
ElementOfGuidanceObligatesStateOfAffairs ::= elementOfGuidance::ElementOfGuidance stateOfAffairs::StateOfAffairs ;
AttributiveNamespaceIsForSubjectConcept ::= attributiveNamespace::AttributiveNamespace subjectConcept::Concept ;
ReferenceSupportsMeaning ::= reference::Reference meaning::Meaning ;
ConceptHasExtension ::= concept::Concept extension::Set ;
OperativeBusinessRuleHasLevelOfEnforcement ::= operativeBusinessRule::OperativeBusinessRule levelOfEnforcement::LevelOfEnforcement ;
ElementOfGuidanceIsIncludedInBodyOfSharedGuidance ::= elementOfGuidance::ElementOfGuidance bodyOfSharedGuidance::BodyOfSharedGuidance ;
Reference ::= meaning::Meaning expression::Expression ;
ElementOfGuidanceProhibitsStateOfAffairs ::= elementOfGuidance::ElementOfGuidance stateOfAffairs::StateOfAffairs ;
VariableIsFreesWithinSemanticFormulation ::= variable::Variable semanticFormulation::SemanticFormulation ;
ConceptHasDefinition ::= concept::Concept definition::Definition ;
ClosedLogicalFormulationMeansProposition ::= closedLogicalFormulation::ClosedLogicalFormulation proposition::Proposition ;
CategorizationType ::= (attributiveNamespace::AttributiveNamespace)+ (definition::Definition)+ (moreGeneralConcept::Concept)+ (category::Concept)+ (essentialCharacteristic::Characteristic)+ (instance::Thing)+ (referenceScheme::ReferenceScheme)+ (impliedCharacteristic::Characteristic)+ (necessaryCharacteristic::Characteristic)+ (designation::Designation)+ extension::Set ;
Namespace1IncorporatesNamespace2 ::= namespace1::Namespace namespace2::Namespace ;
RepresentationUsesVocabulary ::= representation::Representation vocabulary::Vocabulary ;
DescriptiveExample ::= meaning::Meaning expression::Expression ;
VocabularyIsExpressedInLanguage ::= vocabulary::Vocabulary language::Language ;
PropositionNominalizationBindsToBindableTarget ::= propositionNominalization::PropositionNominalization bindableTarget::BindableTarget ;
NameReferencesThing ::= name::Name thing::Thing ;
Concept1SpecializesConcept2 ::= concept1::Concept concept2::Concept ;
ClosedProjectionMeansQuestion ::= closedProjection::ClosedProjection question::Question ;
ElementOfGuidanceAuthorizesStateOfAffairs ::= elementOfGuidance::ElementOfGuidance stateOfAffairs::StateOfAffairs ;
BodyOfSharedMeaningsIncludesBodyOfSharedGuidance ::= bodyOfSharedMeanings::BodyOfSharedMeanings bodyOfSharedGuidance::BodyOfSharedGuidance ;
AttributiveNamespaceIsWithinVocabularyNamespace ::= attributiveNamespace::AttributiveNamespace vocabularyNamespace::VocabularyNamespace ;
WhetherornotFormulationHasInconsequent ::= whetherornotFormulation::WhetherornotFormulation inconsequent::LogicalFormulation ;
Note ::= meaning::Meaning expression::Expression ;
Thing1IsThing2 ::= thing1::Thing thing2::Thing ;
ClosedProjectionDefinesNounConcept ::= closedProjection::ClosedProjection nounConcept::NounConcept ;
DerivableConcept ::= (attributiveNamespace::AttributiveNamespace)+ (definition::Definition)+ (moreGeneralConcept::Concept)+ (category::Concept)+ (essentialCharacteristic::Characteristic)+ (instance::Thing)+ (referenceScheme::ReferenceScheme)+ (impliedCharacteristic::Characteristic)+ (necessaryCharacteristic::Characteristic)+ (designation::Designation)+ extension::Set ;
Vocabulary1IncorporatesVocabulary2 ::= vocabulary1::Vocabulary vocabulary2::Vocabulary ;
DefinitionServesAsDesignation ::= definition::Definition designation::Designation ;
ConceptOfThingExistingIndependently ::= (attributiveNamespace::AttributiveNamespace)+ (definition::Definition)+ (moreGeneralConcept::Concept)+ (category::Concept)+ (essentialCharacteristic::Characteristic)+ (instance::Thing)+ (referenceScheme::ReferenceScheme)+ (impliedCharacteristic::Characteristic)+ (necessaryCharacteristic::Characteristic)+ (designation::Designation)+ extension::Set ;
Equivalence ::= (logicalOperand2::LogicalFormulation)+ (logicalOperand1::LogicalFormulation)+ ;
RoleBindingBindsToBindableTarget ::= roleBinding::RoleBinding bindableTarget::BindableTarget ;
ConceptOfThingAsContinuant ::= (attributiveNamespace::AttributiveNamespace)+ (definition::Definition)+ (moreGeneralConcept::Concept)+ (category::Concept)+ (essentialCharacteristic::Characteristic)+ (instance::Thing)+ (referenceScheme::ReferenceScheme)+ (impliedCharacteristic::Characteristic)+ (necessaryCharacteristic::Characteristic)+ (designation::Designation)+ extension::Set ;
NorFormulation ::= (logicalOperand2::LogicalFormulation)+ (logicalOperand1::LogicalFormulation)+ ;
SpeechCommunity ::= (uri::Uri)+ (subcommunity::Community)+ ;
ConceptOfThingAsComposite ::= (attributiveNamespace::AttributiveNamespace)+ (definition::Definition)+ (moreGeneralConcept::Concept)+ (category::Concept)+ (essentialCharacteristic::Characteristic)+ (instance::Thing)+ (referenceScheme::ReferenceScheme)+ (impliedCharacteristic::Characteristic)+ (necessaryCharacteristic::Characteristic)+ (designation::Designation)+ extension::Set ;
Rulebook ::= cardinality::NonnegativeInteger (element::Thing)+ ;
LogicalFormulationKind ::= (categorizationScheme::CategorizationScheme)+ (categorizationType::CategorizationType)+ ;
ConceptualSchemaIncludesConcept ::= conceptualSchema::ConceptualSchema concept::Concept ;
VariableRangesOverConcept ::= variable::Variable concept::Concept ;
PlaceholderIsAtStartingCharacterPosition ::= placeholder::Placeholder startingCharacterPosition::PositiveInteger ;
LogicalFormulationRestrictsVariable ::= logicalFormulation::LogicalFormulation variable::Variable ;
Concept1IsCoextensiveWithConcept2 ::= concept1::Concept concept2::Concept ;
--------------------metamodels::sbvrOMG.bgf--------------------
WhetherornotFormulation ::= (inconsequent::LogicalFormulation)+ (consequent::LogicalFormulation)+ ;
SpeechCommunityAdoptsAdoptedDefinitionCitingReference ::= speechCommunity::SpeechCommunity adoptedDefinition::AdoptedDefinition reference::Reference ;
IsroleofFactType ::= (factTypeForm::FactTypeForm)+ (role::FactTypeRole)+ ;
FormalRepresentation ::= meaning::Meaning expression::Expression ;
ConceptOfThingAsDeveloped ::= (attributiveNamespace::AttributiveNamespace)+ (definition::Definition)+ (moreGeneralConcept::Concept)+ (category::Concept)+ (essentialCharacteristic::Characteristic)+ (instance::Thing)+ (referenceScheme::ReferenceScheme)+ (impliedCharacteristic::Characteristic)+ (necessaryCharacteristic::Characteristic)+ (designation::Designation)+ extension::Set ;
ClosedProjection ::= constrainingFormulation::LogicalFormulation (projectionVariable::Variable)+ (auxiliaryVariable::AuxiliaryVariable)+ ;
Characteristic ::= (factTypeForm::FactTypeForm)+ (role::FactTypeRole)+ ;
ProhibitedDesignation ::= implicitlyIsUnderstood::Boolean signifier::Expression ;
ObjectType ::= ConceptType ;
 ObjectType ::= FundamentalConcept ;
 ObjectType ::= LogicalFormulationKind ;
 ObjectType ::= SituationalRole ;
 ObjectType ::= (categorizationScheme::CategorizationScheme)+ (categorizationType::CategorizationType)+ ;
FactTypeHasFactInFactModel ::= factType::FactType fact::Fact factModel::FactModel ;
Conjunction ::= (logicalOperand2::LogicalFormulation)+ (logicalOperand1::LogicalFormulation)+ ;
Proposition ::= ElementOfGuidance ;
 Proposition ::= Rule ;
 Proposition ::= Fact ;
 Proposition ::= isFalse::Boolean isTrue::Boolean (statement::Statement)+ isPossiblyTrue::Boolean isObligatedToBeTrue::Boolean isPermittedToBeTrue::Boolean isNecessarilyTrue::Boolean ;
AssortmentFactType ::= (factTypeForm::FactTypeForm)+ (role::FactTypeRole)+ ;
StateOfAffairsInvolvesThingInRole ::= stateOfAffairs::StateOfAffairs thing::Thing role::Role ;
SetProjection ::= constrainingFormulation::LogicalFormulation (projectionVariable::Variable)+ (auxiliaryVariable::AuxiliaryVariable)+ ;
NandFormulation ::= (logicalOperand2::LogicalFormulation)+ (logicalOperand1::LogicalFormulation)+ ;
ReferenceScheme ::= (simplyUsedRole::FactTypeRole)+ (identifyingCharacteristic::Characteristic)+ (extensionallyUsedRole::FactTypeRole)+ ;
Projection ::= BagProjection ;
 Projection ::= ClosedProjection ;
 Projection ::= SetProjection ;
 Projection ::= constrainingFormulation::LogicalFormulation (projectionVariable::Variable)+ (auxiliaryVariable::AuxiliaryVariable)+ ;
Representation ::= Designation ;
 Representation ::= Definition ;
 Representation ::= Statement ;
 Representation ::= FactTypeForm ;
 Representation ::= CommunicationContent ;
 Representation ::= Description ;
 Representation ::= DescriptiveExample ;
 Representation ::= FormalRepresentation ;
 Representation ::= InformalRepresentation ;
 Representation ::= Note ;
 Representation ::= Reference ;
 Representation ::= meaning::Meaning expression::Expression ;
Reference ::= meaning::Meaning expression::Expression ;
NumericRangeQuantification ::= maximumCardinality::NonnegativeInteger minimumCardinality::NonnegativeInteger ;
Name ::= implicitlyIsUnderstood::Boolean signifier::Expression ;
ConceptOfThingAsPrimitive ::= (attributiveNamespace::AttributiveNamespace)+ (definition::Definition)+ (moreGeneralConcept::Concept)+ (category::Concept)+ (essentialCharacteristic::Characteristic)+ (instance::Thing)+ (referenceScheme::ReferenceScheme)+ (impliedCharacteristic::Characteristic)+ (necessaryCharacteristic::Characteristic)+ (designation::Designation)+ extension::Set ;
FactType ::= Characteristic ;
 FactType ::= AssociativeFactType ;
 FactType ::= AssortmentFactType ;
 FactType ::= BinaryFactType ;
 FactType ::= SpecializationFactType ;
 FactType ::= IsroleofFactType ;
 FactType ::= (factTypeForm::FactTypeForm)+ (role::FactTypeRole)+ ;
ConceptOfThingAsOccurrent ::= (attributiveNamespace::AttributiveNamespace)+ (definition::Definition)+ (moreGeneralConcept::Concept)+ (category::Concept)+ (essentialCharacteristic::Characteristic)+ (instance::Thing)+ (referenceScheme::ReferenceScheme)+ (impliedCharacteristic::Characteristic)+ (necessaryCharacteristic::Characteristic)+ (designation::Designation)+ extension::Set ;
ConceptOfThingAsUnitary ::= (attributiveNamespace::AttributiveNamespace)+ (definition::Definition)+ (moreGeneralConcept::Concept)+ (category::Concept)+ (essentialCharacteristic::Characteristic)+ (instance::Thing)+ (referenceScheme::ReferenceScheme)+ (impliedCharacteristic::Characteristic)+ (necessaryCharacteristic::Characteristic)+ (designation::Designation)+ extension::Set ;
CommunicationContent ::= meaning::Meaning expression::Expression ;
CategorizationType ::= (attributiveNamespace::AttributiveNamespace)+ (definition::Definition)+ (moreGeneralConcept::Concept)+ (category::Concept)+ (essentialCharacteristic::Characteristic)+ (instance::Thing)+ (referenceScheme::ReferenceScheme)+ (impliedCharacteristic::Characteristic)+ (necessaryCharacteristic::Characteristic)+ (designation::Designation)+ extension::Set ;
InformalRepresentation ::= meaning::Meaning expression::Expression ;
SituationalRole ::= (categorizationScheme::CategorizationScheme)+ (categorizationType::CategorizationType)+ ;
BinaryLogicalOperation ::= Conjunction ;
 BinaryLogicalOperation ::= Disjunction ;
 BinaryLogicalOperation ::= Equivalence ;
 BinaryLogicalOperation ::= ExclusiveDisjunction ;
 BinaryLogicalOperation ::= Implication ;
 BinaryLogicalOperation ::= NandFormulation ;
 BinaryLogicalOperation ::= NorFormulation ;
 BinaryLogicalOperation ::= WhetherornotFormulation ;
 BinaryLogicalOperation ::= (logicalOperand2::LogicalFormulation)+ (logicalOperand1::LogicalFormulation)+ ;
DescriptiveExample ::= meaning::Meaning expression::Expression ;
Description ::= meaning::Meaning expression::Expression ;
Variable ::= AuxiliaryVariable ;
 Variable ::= restrictingFormulation::LogicalFormulation projectionPosition::PositiveInteger rangedoverConcept::Concept isUnitary::Boolean ;
Implication ::= (consequent::LogicalFormulation)+ (antecedent::LogicalFormulation)+ ;
FactTypeRoleDesignation ::= implicitlyIsUnderstood::Boolean signifier::Expression ;
BagProjection ::= constrainingFormulation::LogicalFormulation (projectionVariable::Variable)+ (auxiliaryVariable::AuxiliaryVariable)+ ;
Designation ::= Name ;
 Designation ::= Placeholder ;
 Designation ::= FactSymbol ;
 Designation ::= FactTypeRoleDesignation ;
 Designation ::= NonverbalDesignation ;
 Designation ::= PreferredDesignation ;
 Designation ::= ProhibitedDesignation ;
 Designation ::= Term ;
 Designation ::= implicitlyIsUnderstood::Boolean signifier::Expression ;
PreferredDesignation ::= implicitlyIsUnderstood::Boolean signifier::Expression ;
Note ::= meaning::Meaning expression::Expression ;
ConceptOfThingExistingDependently ::= (attributiveNamespace::AttributiveNamespace)+ (definition::Definition)+ (moreGeneralConcept::Concept)+ (category::Concept)+ (essentialCharacteristic::Characteristic)+ (instance::Thing)+ (referenceScheme::ReferenceScheme)+ (impliedCharacteristic::Characteristic)+ (necessaryCharacteristic::Characteristic)+ (designation::Designation)+ extension::Set ;
DerivableConcept ::= (attributiveNamespace::AttributiveNamespace)+ (definition::Definition)+ (moreGeneralConcept::Concept)+ (category::Concept)+ (essentialCharacteristic::Characteristic)+ (instance::Thing)+ (referenceScheme::ReferenceScheme)+ (impliedCharacteristic::Characteristic)+ (necessaryCharacteristic::Characteristic)+ (designation::Designation)+ extension::Set ;
ConceptOfThingExistingIndependently ::= (attributiveNamespace::AttributiveNamespace)+ (definition::Definition)+ (moreGeneralConcept::Concept)+ (category::Concept)+ (essentialCharacteristic::Characteristic)+ (instance::Thing)+ (referenceScheme::ReferenceScheme)+ (impliedCharacteristic::Characteristic)+ (necessaryCharacteristic::Characteristic)+ (designation::Designation)+ extension::Set ;
Term ::= implicitlyIsUnderstood::Boolean signifier::Expression ;
Fact ::= isFalse::Boolean isTrue::Boolean (statement::Statement)+ isPossiblyTrue::Boolean isObligatedToBeTrue::Boolean isPermittedToBeTrue::Boolean isNecessarilyTrue::Boolean ;
Equivalence ::= (logicalOperand2::LogicalFormulation)+ (logicalOperand1::LogicalFormulation)+ ;
ConceptOfThingAsContinuant ::= (attributiveNamespace::AttributiveNamespace)+ (definition::Definition)+ (moreGeneralConcept::Concept)+ (category::Concept)+ (essentialCharacteristic::Characteristic)+ (instance::Thing)+ (referenceScheme::ReferenceScheme)+ (impliedCharacteristic::Characteristic)+ (necessaryCharacteristic::Characteristic)+ (designation::Designation)+ extension::Set ;
NorFormulation ::= (logicalOperand2::LogicalFormulation)+ (logicalOperand1::LogicalFormulation)+ ;
Community ::= SemanticCommunity ;
 Community ::= SpeechCommunity ;
 Community ::= (uri::Uri)+ (subcommunity::Community)+ ;
Concept ::= NounConcept ;
 Concept ::= FactType ;
 Concept ::= CategorizationType ;
 Concept ::= ObjectType ;
 Concept ::= ConceptOfThingAsComposite ;
 Concept ::= ConceptOfThingAsContinuant ;
 Concept ::= ConceptOfThingAsDeveloped ;
 Concept ::= ConceptOfThingAsOccurrent ;
 Concept ::= ConceptOfThingAsPrimitive ;
 Concept ::= ConceptOfThingAsUnitary ;
 Concept ::= ConceptOfThingExistingDependently ;
 Concept ::= ConceptOfThingExistingIndependently ;
 Concept ::= DerivableConcept ;
 Concept ::= (attributiveNamespace::AttributiveNamespace)+ (definition::Definition)+ (moreGeneralConcept::Concept)+ (category::Concept)+ (essentialCharacteristic::Characteristic)+ (instance::Thing)+ (referenceScheme::ReferenceScheme)+ (impliedCharacteristic::Characteristic)+ (necessaryCharacteristic::Characteristic)+ (designation::Designation)+ extension::Set ;
SpeechCommunity ::= (uri::Uri)+ (subcommunity::Community)+ ;
ConceptOfThingAsComposite ::= (attributiveNamespace::AttributiveNamespace)+ (definition::Definition)+ (moreGeneralConcept::Concept)+ (category::Concept)+ (essentialCharacteristic::Characteristic)+ (instance::Thing)+ (referenceScheme::ReferenceScheme)+ (impliedCharacteristic::Characteristic)+ (necessaryCharacteristic::Characteristic)+ (designation::Designation)+ extension::Set ;
Rulebook ::= cardinality::NonnegativeInteger (element::Thing)+ ;
LogicalFormulationKind ::= (categorizationScheme::CategorizationScheme)+ (categorizationType::CategorizationType)+ ;
FactSymbol ::= implicitlyIsUnderstood::Boolean signifier::Expression ;
ExclusiveDisjunction ::= (logicalOperand2::LogicalFormulation)+ (logicalOperand1::LogicalFormulation)+ ;
FundamentalConcept ::= (categorizationScheme::CategorizationScheme)+ (categorizationType::CategorizationType)+ ;
Disjunction ::= (logicalOperand2::LogicalFormulation)+ (logicalOperand1::LogicalFormulation)+ ;
AuxiliaryVariable ::= restrictingFormulation::LogicalFormulation projectionPosition::PositiveInteger rangedoverConcept::Concept isUnitary::Boolean ;
Set ::= BodyOfSharedMeanings ;
 Set ::= Vocabulary ;
 Set ::= Rulebook ;
 Set ::= cardinality::NonnegativeInteger (element::Thing)+ ;
--------------------metamodels::sigkdd.owl.bgf--------------------
PerformanceTopic ::= isTopicOf::Working_event isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part ;
Sponzorship ::= is_paid_with::Item is_paid_by::Person is_paid_in::Building (is_paid_for::Thing)+ has_amount_of::Money ;
Proceedings_Publisher ::= (publisherOf::Thing)+ technicallyOrganises::Thing ;
Conference_proceedings ::= has_an_ISBN::String has_a_publisher::Publisher has_a_volume::String ;
Reviewing_results_event ::= follows::Administrative_event parallel_with::Administrative_event ;
Sponsor ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person pay::Registration_fee can_stay_in::Place Nation::String Name::String hasEmail::String hasName::String hasAffiliation::String hasFirstName::String hasLastName::String hasMail::String worksForCompany::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ sign::Item is_present::Time (give::Thing)+ need::Item loggin_in::System submit::Document get::Email E-mail::String hasConflictOfInterest::Document email::String ;
Organisation ::= Organising_Agency ;
 Organisation ::= Academic_Institution ;
 Organisation ::= Proceedings_Publisher ;
 Organisation ::= (publisherOf::Thing)+ technicallyOrganises::Thing ;
Registration_SIGKDD_Member ::= designed_by::ACM_SIGKDD Date::dateTime payed_by::Person Price::Integer Currency::String ;
External_Reviewer ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person pay::Registration_fee can_stay_in::Place Nation::String Name::String hasEmail::String hasName::String hasAffiliation::String hasFirstName::String hasLastName::String hasMail::String worksForCompany::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ sign::Item is_present::Time (give::Thing)+ need::Item loggin_in::System submit::Document get::Email E-mail::String hasConflictOfInterest::Document email::String ;
Science_Worker ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person pay::Registration_fee can_stay_in::Place Nation::String Name::String hasEmail::String hasName::String hasAffiliation::String hasFirstName::String hasLastName::String hasMail::String worksForCompany::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ sign::Item is_present::Time (give::Thing)+ need::Item loggin_in::System submit::Document get::Email E-mail::String hasConflictOfInterest::Document email::String ;
Program_Comitee_Chair ::= finishes::Conference headOf::Program_Comitee switches::PhaseOfConferencePreparation starts::Conference accepts::Paper assignsToReview::Paper assignsPaper::Reviewer rejects::Paper ;
RadioCommunicationsTopic ::= isTopicOf::Working_event isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part ;
article ::= group_email ;
 article ::= notification_email ;
 article ::= abstract_of_paper ;
 article ::= review_form ;
 article ::= summary_of_reviews ;
 article ::= goes_through::Activity is_sent_to::human is_created_in::Activity structure_created_by::human has_author::human gives_classification::classification article_written_by::Author has_reviewer::Reviewer has_abstract::Abstract ;
ConferenceMember ::= Reviewer ;
 ConferenceMember ::= ConferenceChair ;
 ConferenceMember ::= AssociatedChair ;
 ConferenceMember ::= Author ;
 ConferenceMember ::= CommitteeMember ;
 ConferenceMember ::= ProgramCommitteeMember ;
 ConferenceMember ::= Chairman ;
 ConferenceMember ::= memberOfConference::Conference member_of_conference::Conference ;
MedicineTopic ::= isTopicOf::Working_event isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part ;
AccommodationPlace ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
TwoLevelConference ::= has_program::program hasMember::Person hasName::String endDate::dateTime paperDueOn::dateTime registrationDueOn::dateTime manuscriptDueOn::dateTime startDate::dateTime hasCountry::Country isOrganizedBy::OrganizingCommittee annualOrder::Integer takesPlace::Location hasAcronym::String finishedBy::Program_Comitee_Chair focusesOn::Topic startedBy::Program_Comitee_Chair takesPlace::Location has_conference_member::ConferenceMember WebSite::anyURI Topic_of_conference::String Date::date holded_by::ACM_SIGKDD Name_of_conference::String Start_of_conference::dateTime City_of_conference::String End_of_conference::dateTime hasConferenceMember::ConferenceMember paperAssignmentFinalizedBy::Administrator reviewCriteriaEnteredBy::Administrator paperAssignmentToolsRunBy::Administrator virtualMeetingEnabledBy::Administrator hardcopyMailingManifestsPrintedBy::Administrator detailsEnteredBy::Administrator reviewerBiddingStartedBy::Administrator date::date reviewsPerPaper::Integer logoURL::anyURI acceptsHardcopySubmissions::Boolean siteURL::anyURI ;
SignalProcessingTopic ::= isTopicOf::Working_event isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part ;
Accepted_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Title::String Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
 Accepted_Paper ::= hasReview::Review ;
Agency_Staff_Member ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person pay::Registration_fee can_stay_in::Place Nation::String Name::String hasEmail::String hasName::String hasAffiliation::String hasFirstName::String hasLastName::String hasMail::String worksForCompany::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ sign::Item is_present::Time (give::Thing)+ need::Item loggin_in::System submit::Document get::Email E-mail::String hasConflictOfInterest::Document email::String ;
SessionChair ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person pay::Registration_fee can_stay_in::Place Nation::String Name::String hasEmail::String hasName::String hasAffiliation::String hasFirstName::String hasLastName::String hasMail::String worksForCompany::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ sign::Item is_present::Time (give::Thing)+ need::Item loggin_in::System submit::Document get::Email E-mail::String hasConflictOfInterest::Document email::String ;
pc_meeting ::= starts_on::String ends_on::String has_startdate::dateTime has_enddate::dateTime (eventOnList::Thing)+ partOfEvent::Event hasEvent::Event (organisedBy::Thing)+ heldIn::Location conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator ;
Working_event ::= hasTopic::Topic hasAdministrativeEvent::Administrative_event ;
User ::= Committee ;
 User ::= Administrator ;
 User ::= recieve::Document (create::Thing)+ submit::Document ;
notification ::= has_result::article is_performed_by::human ;
Regular_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Title::String Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
Short_paper ::= writtenBy::Author dealsWith::Topic remark::String abstract::String contactEmail::String hasKeyword::String hasTitle::String changedBy::Author hasContributionStatus::EEnum ;
ConferenceChair ::= memberOfConference::Conference member_of_conference::Conference ;
 ConferenceChair ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person pay::Registration_fee can_stay_in::Place Nation::String Name::String hasEmail::String hasName::String hasAffiliation::String hasFirstName::String hasLastName::String hasMail::String worksForCompany::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ sign::Item is_present::Time (give::Thing)+ need::Item loggin_in::System submit::Document get::Email E-mail::String hasConflictOfInterest::Document email::String ;
Nonauthor_registration_fee ::= designed_by::ACM_SIGKDD Date::dateTime payed_by::Person Price::Integer Currency::String ;
Place ::= DiningPlace ;
 Place ::= ConferenceVenuePlace ;
 Place ::= MeetingRoomPlace ;
 Place ::= AccommodationPlace ;
 Place ::= Building ;
 Place ::= Session_room ;
 Place ::= Hotel_room ;
 Place ::= Conference_hall ;
 Place ::= Main_office ;
 Place ::= Hotel ;
 Place ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
Author_attendee_book_registration_fee ::= designed_by::ACM_SIGKDD Date::dateTime payed_by::Person Price::Integer Currency::String ;
Camera_Ready_event ::= follows::Administrative_event parallel_with::Administrative_event ;
Tutorial_Abstract ::= (is_the_1th_part_of::Thing)+ part_of_article::article ;
Main_office ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
CallForManuscripts ::= forEvent::AcademicEvent (isInitiatedBy::Person)+ hasSubmissionInstructions::String hasSubmissionDeadline::dateTime ;
Workshop_Session ::= hasAssignedPaper::AcceptedPaper room::String isAssociatedTo::Slot hasChair::Chair ;
Paper_Author ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person pay::Registration_fee can_stay_in::Place Nation::String Name::String hasEmail::String hasName::String hasAffiliation::String hasFirstName::String hasLastName::String hasMail::String worksForCompany::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ sign::Item is_present::Time (give::Thing)+ need::Item loggin_in::System submit::Document get::Email E-mail::String hasConflictOfInterest::Document email::String ;
group_email ::= goes_through::Activity is_sent_to::human is_created_in::Activity structure_created_by::human has_author::human gives_classification::classification article_written_by::Author has_reviewer::Reviewer has_abstract::Abstract ;
Full_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Title::String Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
OutsideReferee ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person pay::Registration_fee can_stay_in::Place Nation::String Name::String hasEmail::String hasName::String hasAffiliation::String hasFirstName::String hasLastName::String hasMail::String worksForCompany::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ sign::Item is_present::Time (give::Thing)+ need::Item loggin_in::System submit::Document get::Email E-mail::String hasConflictOfInterest::Document email::String ;
Attendee ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person pay::Registration_fee can_stay_in::Place Nation::String Name::String hasEmail::String hasName::String hasAffiliation::String hasFirstName::String hasLastName::String hasMail::String worksForCompany::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ sign::Item is_present::Time (give::Thing)+ need::Item loggin_in::System submit::Document get::Email E-mail::String hasConflictOfInterest::Document email::String ;
Registration ::= is_held_before::Time is_held_in::Thing is_held_after::Time is_dated_on::dateTime is_followed_by::Activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human hasTopic::Topic expectedAttendance::Integer isPartOf::Conference (has_result::Thing)+ sent_by::Person ;
 Registration ::= ε ;
OperatingTopicsystems ::= isTopicOf::Working_event isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part ;
WorksopProposal ::= isSubmittedBy::Author hasAuthor::Author submissionDeadline::dateTime ;
Listener ::= ε ;
 Listener ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person pay::Registration_fee can_stay_in::Place Nation::String Name::String hasEmail::String hasName::String hasAffiliation::String hasFirstName::String hasLastName::String hasMail::String worksForCompany::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ sign::Item is_present::Time (give::Thing)+ need::Item loggin_in::System submit::Document get::Email E-mail::String hasConflictOfInterest::Document email::String ;
Workshop_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Title::String Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
Chair_PC ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person pay::Registration_fee can_stay_in::Place Nation::String Name::String hasEmail::String hasName::String hasAffiliation::String hasFirstName::String hasLastName::String hasMail::String worksForCompany::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ sign::Item is_present::Time (give::Thing)+ need::Item loggin_in::System submit::Document get::Email E-mail::String hasConflictOfInterest::Document email::String ;
Meta-Reviewer ::= invites_co-reviewers::Reviewer invited_by::Reviewer (has_a_review_reference_or_expertise::Thing)+ writes_review::Review hasReviewHistory::PersonalReviewHistory executes::DoubleBlindReview cooperates::ExternalReviewer IsAssignedTo::Paper hasConflictedPaper::Paper hasPreferredPaper::Paper hasPreferredTopic::ResearchTopic writeReview::Review has_made_review::Paper_Review UserName::String Comments_to_Chair::String Other_Areas::String refuses::Pending_Proposed_Conflict reviews::Paper bidsFor::Paper confirmes::Pending_Proposed_Conflict assignedPaperBy::Program_Comitee_Chair assignedByAdministrator::Administrator adjustBid::Bid readPaper::Paper hasBeenAssigned::Paper assignExternalReviewer::ExternalReviewer ;
Contact_Author ::= has_sent::Submitted_Paper Alternate_Email::String ;
Call_for_participation ::= has_authors::Person has_a_date_of_issue::date ;
Short_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Title::String Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
SatelliteAndSpaceCommunicationsTopic ::= isTopicOf::Working_event isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part ;
chair ::= assigns_reviewers_to_article::Reviewer creates_program::program ;
MainAuthor ::= writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing submitsPaper::Paper writePaper::Paper writes_Paper::Paper changes::Contribution write_paper::Paper obtain::Award submit::Paper notification_until::Deadline_Author_notification submitPaper::Paper ;
Pending_Proposed_Conflict ::= refusedBy::Reviewer confirmedBy::Reviewer ;
TPCMember ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person pay::Registration_fee can_stay_in::Place Nation::String Name::String hasEmail::String hasName::String hasAffiliation::String hasFirstName::String hasLastName::String hasMail::String worksForCompany::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ sign::Item is_present::Time (give::Thing)+ need::Item loggin_in::System submit::Document get::Email E-mail::String hasConflictOfInterest::Document email::String ;
ConferenceEvent ::= NonAcademicEvent ;
 ConferenceEvent ::= AcademicEvent ;
 ConferenceEvent ::= hasAttendee::Person hasLocation::Place hasProgramme::Programme hasEndDateTime::dateTime hasStartDateTime::dateTime ;
Assistant ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person pay::Registration_fee can_stay_in::Place Nation::String Name::String hasEmail::String hasName::String hasAffiliation::String hasFirstName::String hasLastName::String hasMail::String worksForCompany::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ sign::Item is_present::Time (give::Thing)+ need::Item loggin_in::System submit::Document get::Email E-mail::String hasConflictOfInterest::Document email::String ;
Conference_document ::= Conference_contribution ;
 Conference_document ::= Information_for_participants ;
 Conference_document ::= Call_for_paper ;
 Conference_document ::= Conference_announcement ;
 Conference_document ::= Call_for_participation ;
 Conference_document ::= Conference_www ;
 Conference_document ::= has_authors::Person has_a_date_of_issue::date ;
Registration_of_participants_event ::= follows::Administrative_event parallel_with::Administrative_event ;
MobileComputingTopic ::= isTopicOf::Working_event isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part ;
Deadline_hotel_reservation ::= designed_by::ACM_SIGKDD Date::dateTime done_till::date ;
Multi-author_Volume ::= Proceedings ;
 Multi-author_Volume ::= writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document (relatesTo::Thing)+ submited_by::Person Document_ID::String presentationed_by::Speaker submit_until::Deadline recieved_by::User used_by::Person submited__by::User ;
Invitation ::= sended_by::Administrator Receiver_of_email::String Message_of_email::String Subject_of_email::String ;
Deadline_Author_notification ::= designed_by::ACM_SIGKDD Date::dateTime done_till::date ;
Nonmember_registration_fee ::= designed_by::ACM_SIGKDD Date::dateTime payed_by::Person Price::Integer Currency::String ;
Camera_Ready_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Title::String Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
Registration_Student ::= designed_by::ACM_SIGKDD Date::dateTime payed_by::Person Price::Integer Currency::String ;
CommunicationTheoryTopic ::= isTopicOf::Working_event isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part ;
Regular_Session ::= hasAssignedPaper::AcceptedPaper room::String isAssociatedTo::Slot hasChair::Chair ;
Mailing_list ::= writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document (relatesTo::Thing)+ submited_by::Person Document_ID::String presentationed_by::Speaker submit_until::Deadline recieved_by::User used_by::Person submited__by::User ;
CallForPapers ::= forEvent::AcademicEvent (isInitiatedBy::Person)+ hasSubmissionInstructions::String hasSubmissionDeadline::dateTime ;
CommunicationsTopic ::= isTopicOf::Working_event isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part ;
Secondary_Reviewer ::= isMemberOf::Conference reject_paper::Paper accept::Paper ;
People ::= Member ;
 People ::= Surname::String Name::String Country::String E-mail::String Organisation::String ;
SecurityTopic ::= isTopicOf::Working_event isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part ;
PaperAbstract ::= isAbstractOf::Paper abstractIsSubmittedBy::ContactAuthor ;
University ::= scientificallyOrganises::Academic_Institution isProviderOf::Sponsorship ;
DiningPlace ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
Administrator ::= approve::Event assign::Role assigns::Thing send::Email generate::Thing finalizePaperAssignment::Conference runPaperAssignmentTools::Conference enableVirtualMeeting::Conference startReviewerBidding::Conference assignReviewer::Reviewer rejectPaper::Paper enterConferenceDetails::Conference printHardcopyMailingManifests::Conference setMaxPapers::ProgramCommitteeMember enterReviewCriteria::Conference acceptPaper::Paper addProgramCommitteeMember::ProgramCommitteeMember ;
Rejected_paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Title::String Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
Paper_Review ::= is_Candidate_for_Award::Long_bool appropriate_length::Long_bool has_Categorization::Paper_Categorization has_Overall::Overall_Value has_Reccommendation::Reccommendation Review_made_by::Reviewer Comments_for_Author::String Comments_for_Program_Committee::String ;
Author ::= AuthorNotReviewer ;
 Author ::= Co-author ;
 Author ::= Corresponding_Author ;
 Author ::= Author_cd_proceedings_included ;
 Author ::= Lecturer ;
 Author ::= Plenary_lecture_speaker ;
 Author ::= Tutorial_speaker ;
 Author ::= Author_book_proceedings_included ;
 Author ::= ContactAuthor ;
 Author ::= Contact_Author ;
 Author ::= Co-Author ;
 Author ::= MainAuthor ;
 Author ::= Author_of_paper_student ;
 Author ::= Author_of_paper ;
 Author ::= Presenter ;
 Author ::= writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing submitsPaper::Paper writePaper::Paper writes_Paper::Paper changes::Contribution write_paper::Paper obtain::Award submit::Paper notification_until::Deadline_Author_notification submitPaper::Paper ;
Conference_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Title::String Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
ConferenceProgram ::= isProgramOf::Conference consistsOf::Slot ;
Rejection_Email ::= sended_by::Administrator Receiver_of_email::String Message_of_email::String Subject_of_email::String ;
Chair ::= produces::OutputDocument sets::Thing accepts::Paper rejects::Paper asksForPreference::Reviewer isChairOf::Session was_a_committee_chair_of::Committee ;
Student_registration_fee ::= designed_by::ACM_SIGKDD Date::dateTime payed_by::Person Price::Integer Currency::String ;
Poster_Session ::= hasAssignedPaper::AcceptedPaper room::String isAssociatedTo::Slot hasChair::Chair ;
Negative_Review ::= assigned_review_by::Primary_Reviewer written_review_by::Reviewer writtenBy::Reviewer reviews::Reviewed_contribution gives_classification::classification is_created_in::Activity reviewOfPaper::Paper reviewWrittenBy::Possible_Reviewer review_written_by::Reviewer containsEvaluation::Evaluation rates::Paper isWritenBy::Reviewer ;
ComputerArchitectureTopic ::= isTopicOf::Working_event isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part ;
abstract_of_paper ::= goes_through::Activity is_sent_to::human is_created_in::Activity structure_created_by::human has_author::human gives_classification::classification article_written_by::Author has_reviewer::Reviewer has_abstract::Abstract ;
Money ::= Tax ;
 Money ::= Fee ;
 Money ::= Sponzorship ;
 Money ::= Tip ;
 Money ::= is_paid_with::Item is_paid_by::Person is_paid_in::Building (is_paid_for::Thing)+ has_amount_of::Money ;
AntennasTopic ::= isTopicOf::Working_event isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part ;
Organizing_Committee ::= has_members::Committee_member was_a_committee_of::Conference_volume has_a_committee_co-chair::Co-chair has_a_committee_chair::Chair ;
Gold_Supporter ::= searched_by::ACM_SIGKDD Name_of_sponsor::String ;
MicroelectronicsTopic ::= isTopicOf::Working_event isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part ;
Group_Email ::= sended_by::Administrator Receiver_of_email::String Message_of_email::String Subject_of_email::String ;
conference_setup ::= sets_member::human is_made_by::human includes_topic::Topic sets_date::date sets_URL::URL ;
Template ::= writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document (relatesTo::Thing)+ submited_by::Person Document_ID::String presentationed_by::Speaker submit_until::Deadline recieved_by::User used_by::Person submited__by::User ;
Member_PC ::= expertOn::Topic reviewes::Contribution ;
session ::= starts_on::String ends_on::String has_startdate::dateTime has_enddate::dateTime (eventOnList::Thing)+ partOfEvent::Event hasEvent::Event (organisedBy::Thing)+ heldIn::Location conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator ;
Chairman ::= ConferenceChair ;
 Chairman ::= AssociatedChair ;
 Chairman ::= ProgramCommitteeChair ;
 Chairman ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person pay::Registration_fee can_stay_in::Place Nation::String Name::String hasEmail::String hasName::String hasAffiliation::String hasFirstName::String hasLastName::String hasMail::String worksForCompany::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ sign::Item is_present::Time (give::Thing)+ need::Item loggin_in::System submit::Document get::Email E-mail::String hasConflictOfInterest::Document email::String memberOfConference::Conference member_of_conference::Conference ;
Hotel ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
Contact_Person ::= is_author_of::article performs_activity::Activity is_employed_in::institute has_topic_of_interest::Topic supervises::Activity e-mail::String last_name::String first_name::String ;
Web_Site ::= writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document (relatesTo::Thing)+ submited_by::Person Document_ID::String presentationed_by::Speaker submit_until::Deadline recieved_by::User used_by::Person submited__by::User ;
TutorialProposal ::= isSubmittedBy::Author hasAuthor::Author submissionDeadline::dateTime ;
RejectedPaper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Title::String Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
ParallelAndDistributedComputingTopic ::= isTopicOf::Working_event isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part ;
Rejected_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Title::String Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
 Rejected_Paper ::= hasReview::Review ;
Event_Approval ::= is_held_before::Time is_held_in::Thing is_held_after::Time is_dated_on::dateTime is_followed_by::Activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human hasTopic::Topic expectedAttendance::Integer isPartOf::Conference (has_result::Thing)+ sent_by::Person ;
Invited_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Title::String Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
Reviewing_event ::= follows::Administrative_event parallel_with::Administrative_event ;
MultimediaTopic ::= isTopicOf::Working_event isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part ;
program ::= program_created_by::chair has_session::session ;
CryptographyTopic ::= isTopicOf::Working_event isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part ;
Plenary_lecture_speaker ::= writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing submitsPaper::Paper writePaper::Paper writes_Paper::Paper changes::Contribution write_paper::Paper obtain::Award submit::Paper notification_until::Deadline_Author_notification submitPaper::Paper ;
Author_book_proceedings_included ::= writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing submitsPaper::Paper writePaper::Paper writes_Paper::Paper changes::Contribution write_paper::Paper obtain::Award submit::Paper notification_until::Deadline_Author_notification submitPaper::Paper ;
Call ::= CallForPapers ;
 Call ::= CallForReviews ;
 Call ::= CallForManuscripts ;
 Call ::= forEvent::AcademicEvent (isInitiatedBy::Person)+ hasSubmissionInstructions::String hasSubmissionDeadline::dateTime ;
Conference_volume ::= has_parts::Conference_part has_workshops::Workshop has_tracks::Track has_tutorials::Tutorial has_a_commtitee::Committee has_a_steering_committee::Steering_committee has_an_organizing_committee::Organizing_committee has_important_dates::Important_dates has_contributions::Conference_contribution has_a_location::String has_a_program_committee::Program_committee ;
Email ::= Notification_Email ;
 Email ::= Group_Email ;
 Email ::= Approval_Email ;
 Email ::= Rejection_Email ;
 Email ::= Information ;
 Email ::= Invitation ;
 Email ::= sended_by::Administrator Receiver_of_email::String Message_of_email::String Subject_of_email::String ;
Tip ::= is_paid_with::Item is_paid_by::Person is_paid_in::Building (is_paid_for::Thing)+ has_amount_of::Money ;
Camera_ready_manuscript_deadline ::= designed_by::ACM_SIGKDD Date::dateTime done_till::date ;
Event ::= Symposium ;
 Event ::= Social_event ;
 Event ::= Administrative_event ;
 Event ::= Working_event ;
 Event ::= pc_meeting ;
 Event ::= session ;
 Event ::= Social_Event ;
 Event ::= Scientific_Event ;
 Event ::= starts_on::String ends_on::String has_startdate::dateTime has_enddate::dateTime (eventOnList::Thing)+ partOfEvent::Event hasEvent::Event (organisedBy::Thing)+ heldIn::Location conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator ;
ProgramCommittee ::= hasMember::ProgramCommitteeMember hasProgramCommitteeMember::ProgramCommitteeMember ;
Registation_deadline ::= designed_by::ACM_SIGKDD Date::dateTime done_till::date ;
Transparency ::= writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document (relatesTo::Thing)+ submited_by::Person Document_ID::String presentationed_by::Speaker submit_until::Deadline recieved_by::User used_by::Person submited__by::User ;
Deadline ::= Deadline_hotel_reservation ;
 Deadline ::= Submissions_deadline ;
 Deadline ::= Deadline_for_notification_of_acceptance ;
 Deadline ::= Registation_deadline ;
 Deadline ::= Camera_ready_manuscript_deadline ;
 Deadline ::= Deadline_Abstract_Submission ;
 Deadline ::= Deadline_Paper_Submission ;
 Deadline ::= Deadline_Author_notification ;
 Deadline ::= designed_by::ACM_SIGKDD Date::dateTime done_till::date ;
Review ::= Meta-Review ;
 Review ::= Positive_Review ;
 Review ::= Negative_Review ;
 Review ::= Neutral_Review ;
 Review ::= assigned_review_by::Primary_Reviewer written_review_by::Reviewer writtenBy::Reviewer reviews::Reviewed_contribution gives_classification::classification is_created_in::Activity reviewOfPaper::Paper reviewWrittenBy::Possible_Reviewer review_written_by::Reviewer containsEvaluation::Evaluation rates::Paper isWritenBy::Reviewer ;
Session ::= Conference_Session ;
 Session ::= Regular_Session ;
 Session ::= Poster_Session ;
 Session ::= Demo_Session ;
 Session ::= Workshop_Session ;
 Session ::= Speaker_lecture ;
 Session ::= hasAssignedPaper::AcceptedPaper room::String isAssociatedTo::Slot hasChair::Chair ;
Person ::= ConferenceMember ;
 Person ::= User ;
 Person ::= Conference_participant ;
 Person ::= Conference_contributor ;
 Person ::= Committee_member ;
 Person ::= Conference_applicant ;
 Person ::= Track-workshop_chair ;
 Person ::= Scholar ;
 Person ::= Participant ;
 Person ::= Member_PC ;
 Person ::= Chair_PC ;
 Person ::= Science_Worker ;
 Person ::= Assistant ;
 Person ::= Volunteer ;
 Person ::= chair ;
 Person ::= participant ;
 Person ::= ConferenceChair ;
 Person ::= Attendee ;
 Person ::= SessionChair ;
 Person ::= TPCMember ;
 Person ::= Paper_Author ;
 Person ::= Conference_Participant ;
 Person ::= Agency_Staff_Member ;
 Person ::= Possible_Reviewer ;
 Person ::= Student ;
 Person ::= Delegate ;
 Person ::= Sponsor ;
 Person ::= OutsideReferee ;
 Person ::= ExternalReviewer ;
 Person ::= ConferenceAttendant ;
 Person ::= Program_Comitee_Chair ;
 Person ::= External_Reviewer ;
 Person ::= Organizator ;
 Person ::= Listener ;
 Person ::= ProgramCommitteeMember ;
 Person ::= Chairman ;
 Person ::= Organizer ;
 Person ::= Speaker ;
 Person ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person pay::Registration_fee can_stay_in::Place Nation::String Name::String hasEmail::String hasName::String hasAffiliation::String hasFirstName::String hasLastName::String hasMail::String worksForCompany::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ sign::Item is_present::Time (give::Thing)+ need::Item loggin_in::System submit::Document get::Email E-mail::String hasConflictOfInterest::Document email::String ;
ProgramCommitteeMember ::= ProgramCommitteeChair ;
 ProgramCommitteeMember ::= Chair ;
 ProgramCommitteeMember ::= memberOfProgramCommittee::ProgramCommittee maxPapers::Integer addedBy::Administrator isMemberOf::ProgramCommittee hasPassword::String ;
Invited_Talk_Abstract ::= (is_the_1th_part_of::Thing)+ part_of_article::article ;
Poster ::= is_submitted_at::Conference_volume ;
 Poster ::= writtenBy::Author dealsWith::Topic remark::String abstract::String contactEmail::String hasKeyword::String hasTitle::String changedBy::Author hasContributionStatus::EEnum ;
 Poster ::= hasContributionFileStatus::EEnum ;
Invitation_letter ::= writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document (relatesTo::Thing)+ submited_by::Person Document_ID::String presentationed_by::Speaker submit_until::Deadline recieved_by::User used_by::Person submited__by::User ;
Paper ::= PaperFullVersion ;
 Paper ::= Invited_Paper ;
 Paper ::= Short_Paper ;
 Paper ::= Full_Paper ;
 Paper ::= Accepted_Paper ;
 Paper ::= Rejected_Paper ;
 Paper ::= Undecided_Paper ;
 Paper ::= ActivePaper ;
 Paper ::= PendingPaper ;
 Paper ::= WithdrawnPaper ;
 Paper ::= RejectedPaper ;
 Paper ::= PublishedPaper ;
 Paper ::= Camera_Ready_Paper ;
 Paper ::= Workshop_Paper ;
 Paper ::= Industrial_Paper ;
 Paper ::= Conference_Paper ;
 Paper ::= Poster_Paper ;
 Paper ::= Regular_Paper ;
 Paper ::= Demo_Paper ;
 Paper ::= AcceptedPaper ;
 Paper ::= Submitted_Paper ;
 Paper ::= Accepted_paper ;
 Paper ::= Rejected_paper ;
 Paper ::= PaperAbstract ;
 Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Title::String Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
Volunteer ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person pay::Registration_fee can_stay_in::Place Nation::String Name::String hasEmail::String hasName::String hasAffiliation::String hasFirstName::String hasLastName::String hasMail::String worksForCompany::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ sign::Item is_present::Time (give::Thing)+ need::Item loggin_in::System submit::Document get::Email E-mail::String hasConflictOfInterest::Document email::String ;
Conference_announcement ::= has_authors::Person has_a_date_of_issue::date ;
Platinum_Supporter ::= searched_by::ACM_SIGKDD Name_of_sponsor::String ;
Administrative_event ::= Reviewing_results_event ;
 Administrative_event ::= Reviewing_event ;
 Administrative_event ::= Registration_of_participants_event ;
 Administrative_event ::= Submission_event ;
 Administrative_event ::= Camera_Ready_event ;
 Administrative_event ::= follows::Administrative_event parallel_with::Administrative_event ;
WithdrawnPaper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Title::String Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
Program_Committee_Chair ::= is_author_of::article performs_activity::Activity is_employed_in::institute has_topic_of_interest::Topic supervises::Activity e-mail::String last_name::String first_name::String ;
Brief_introduction_for_Session_chair ::= writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document (relatesTo::Thing)+ submited_by::Person Document_ID::String presentationed_by::Speaker submit_until::Deadline recieved_by::User used_by::Person submited__by::User ;
Conference_Program ::= Program_made_by::Program_chair planned_papers::Planed_Paper ;
paper_assignment ::= Manual_Paper_Assignment ;
 paper_assignment ::= Automatic_Paper_Assignment ;
 paper_assignment ::= assign_paper::Program_Committee_member is_performed_by::human ;
Positive_Review ::= assigned_review_by::Primary_Reviewer written_review_by::Reviewer writtenBy::Reviewer reviews::Reviewed_contribution gives_classification::classification is_created_in::Activity reviewOfPaper::Paper reviewWrittenBy::Possible_Reviewer review_written_by::Reviewer containsEvaluation::Evaluation rates::Paper isWritenBy::Reviewer ;
PublishedPaper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Title::String Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
Committee ::= Program_committee ;
 Committee ::= Organizing_committee ;
 Committee ::= Steering_committee ;
 Committee ::= Best_Paper_Awards_Committee ;
 Committee ::= Program_Committee ;
 Committee ::= Organizing_Committee ;
 Committee ::= has_members::Committee_member was_a_committee_of::Conference_volume has_a_committee_co-chair::Co-chair has_a_committee_chair::Chair ;
Conference_hall ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
Bronze_Supporter ::= searched_by::ACM_SIGKDD Name_of_sponsor::String ;
CommitteeMember ::= Secondary_Reviewer ;
 CommitteeMember ::= Primary_Reviewer ;
 CommitteeMember ::= isMemberOf::Conference reject_paper::Paper accept::Paper ;
Corresponding_Author ::= writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing submitsPaper::Paper writePaper::Paper writes_Paper::Paper changes::Contribution write_paper::Paper obtain::Award submit::Paper notification_until::Deadline_Author_notification submitPaper::Paper ;
PendingPaper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Title::String Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
Symposium ::= starts_on::String ends_on::String has_startdate::dateTime has_enddate::dateTime (eventOnList::Thing)+ partOfEvent::Event hasEvent::Event (organisedBy::Thing)+ heldIn::Location conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator ;
PowerlineTransmissionTopic ::= isTopicOf::Working_event isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part ;
TestOnlyTopic ::= isTopicOf::Working_event isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part ;
Undecided_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Title::String Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
AuthorNotReviewer ::= writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing submitsPaper::Paper writePaper::Paper writes_Paper::Paper changes::Contribution write_paper::Paper obtain::Award submit::Paper notification_until::Deadline_Author_notification submitPaper::Paper ;
Deadline_for_notification_of_acceptance ::= designed_by::ACM_SIGKDD Date::dateTime done_till::date ;
Notification_Email ::= sended_by::Administrator Receiver_of_email::String Message_of_email::String Subject_of_email::String ;
Industrial_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Title::String Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
Best_Paper_Awards_Committee ::= has_members::Committee_member was_a_committee_of::Conference_volume has_a_committee_co-chair::Co-chair has_a_committee_chair::Chair ;
Registration_SIGMOD_Member ::= designed_by::ACM_SIGKDD Date::dateTime payed_by::Person Price::Integer Currency::String ;
Deadline_Abstract_Submission ::= designed_by::ACM_SIGKDD Date::dateTime done_till::date ;
Program_Committee ::= ε ;
 Program_Committee ::= has_members::Committee_member was_a_committee_of::Conference_volume has_a_committee_co-chair::Co-chair has_a_committee_chair::Chair ;
Abstract ::= Tutorial_Abstract ;
 Abstract ::= Invited_Talk_Abstract ;
 Abstract ::= (is_the_1th_part_of::Thing)+ part_of_article::article ;
Sponzor ::= Exhibitor ;
 Sponzor ::= Bronze_Supporter ;
 Sponzor ::= Platinum_Supporter ;
 Sponzor ::= Gold_Supporter ;
 Sponzor ::= Best_Student_Paper_Supporter ;
 Sponzor ::= Silver_Supporter ;
 Sponzor ::= searched_by::ACM_SIGKDD Name_of_sponsor::String ;
Flyer ::= writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document (relatesTo::Thing)+ submited_by::Person Document_ID::String presentationed_by::Speaker submit_until::Deadline recieved_by::User used_by::Person submited__by::User ;
ActivitySubmissionForm ::= TutorialProposal ;
 ActivitySubmissionForm ::= WorksopProposal ;
 ActivitySubmissionForm ::= isSubmittedBy::Author hasAuthor::Author submissionDeadline::dateTime ;
AssociatedChair ::= memberOfConference::Conference member_of_conference::Conference ;
Tutorial_speaker ::= writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing submitsPaper::Paper writePaper::Paper writes_Paper::Paper changes::Contribution write_paper::Paper obtain::Award submit::Paper notification_until::Deadline_Author_notification submitPaper::Paper ;
Organising_Agency ::= (publisherOf::Thing)+ technicallyOrganises::Thing ;
PaperFullVersion ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Title::String Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
Conference ::= Conference_volume ;
 Conference ::= TwoLevelConference ;
 Conference ::= SingleLevelConference ;
 Conference ::= has_program::program hasMember::Person hasName::String endDate::dateTime paperDueOn::dateTime registrationDueOn::dateTime manuscriptDueOn::dateTime startDate::dateTime hasCountry::Country isOrganizedBy::OrganizingCommittee annualOrder::Integer takesPlace::Location hasAcronym::String finishedBy::Program_Comitee_Chair focusesOn::Topic startedBy::Program_Comitee_Chair takesPlace::Location has_conference_member::ConferenceMember WebSite::anyURI Topic_of_conference::String Date::date holded_by::ACM_SIGKDD Name_of_conference::String Start_of_conference::dateTime City_of_conference::String End_of_conference::dateTime hasConferenceMember::ConferenceMember paperAssignmentFinalizedBy::Administrator reviewCriteriaEnteredBy::Administrator paperAssignmentToolsRunBy::Administrator virtualMeetingEnabledBy::Administrator hardcopyMailingManifestsPrintedBy::Administrator detailsEnteredBy::Administrator reviewerBiddingStartedBy::Administrator date::date reviewsPerPaper::Integer logoURL::anyURI acceptsHardcopySubmissions::Boolean siteURL::anyURI ;
Document ::= Email ;
 Document ::= Template ;
 Document ::= article ;
 Document ::= SlideSet ;
 Document ::= MealMenu ;
 Document ::= Programme_Brochure ;
 Document ::= Flyer ;
 Document ::= Web_Site ;
 Document ::= Multi-author_Volume ;
 Document ::= Form ;
 Document ::= Mailing_list ;
 Document ::= Record_of_attendance ;
 Document ::= Brief_introduction_for_Session_chair ;
 Document ::= Invitation_letter ;
 Document ::= Viza ;
 Document ::= Transparency ;
 Document ::= Submission ;
 Document ::= Payment_document ;
 Document ::= Evaluation ;
 Document ::= Programme ;
 Document ::= Review ;
 Document ::= PaperAbstract ;
 Document ::= writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document (relatesTo::Thing)+ submited_by::Person Document_ID::String presentationed_by::Speaker submit_until::Deadline recieved_by::User used_by::Person submited__by::User ;
Viza ::= writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document (relatesTo::Thing)+ submited_by::Person Document_ID::String presentationed_by::Speaker submit_until::Deadline recieved_by::User used_by::Person submited__by::User ;
Demo_Session ::= hasAssignedPaper::AcceptedPaper room::String isAssociatedTo::Slot hasChair::Chair ;
Author_of_paper ::= writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing submitsPaper::Paper writePaper::Paper writes_Paper::Paper changes::Contribution write_paper::Paper obtain::Award submit::Paper notification_until::Deadline_Author_notification submitPaper::Paper ;
SingleLevelConference ::= has_program::program hasMember::Person hasName::String endDate::dateTime paperDueOn::dateTime registrationDueOn::dateTime manuscriptDueOn::dateTime startDate::dateTime hasCountry::Country isOrganizedBy::OrganizingCommittee annualOrder::Integer takesPlace::Location hasAcronym::String finishedBy::Program_Comitee_Chair focusesOn::Topic startedBy::Program_Comitee_Chair takesPlace::Location has_conference_member::ConferenceMember WebSite::anyURI Topic_of_conference::String Date::date holded_by::ACM_SIGKDD Name_of_conference::String Start_of_conference::dateTime City_of_conference::String End_of_conference::dateTime hasConferenceMember::ConferenceMember paperAssignmentFinalizedBy::Administrator reviewCriteriaEnteredBy::Administrator paperAssignmentToolsRunBy::Administrator virtualMeetingEnabledBy::Administrator hardcopyMailingManifestsPrintedBy::Administrator detailsEnteredBy::Administrator reviewerBiddingStartedBy::Administrator date::date reviewsPerPaper::Integer logoURL::anyURI acceptsHardcopySubmissions::Boolean siteURL::anyURI ;
Sponsorship ::= TravelGrant ;
 Sponsorship ::= providedBy::Organization hasCostCurrency::String hasCostAmount::Integer ;
Author_of_paper_student ::= writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing submitsPaper::Paper writePaper::Paper writes_Paper::Paper changes::Contribution write_paper::Paper obtain::Award submit::Paper notification_until::Deadline_Author_notification submitPaper::Paper ;
ConferenceVenuePlace ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
WirelessCommunicationsTopic ::= isTopicOf::Working_event isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part ;
Item ::= Transport_vehicle ;
 Item ::= Card ;
 Item ::= Audiovisual_equipment ;
 Item ::= Publication ;
 Item ::= Document ;
 Item ::= go_through::Activity (is_used_for::Thing)+ is_signed_by::Person is_made_from::Item is_sent_after::Time is_needed_for::Person is_sent_before::Time is_prepared_by::Person is_used_by::Person is_given_to::Person is_sent_by::Person is_writen_by::Person ;
ConferenceAttendant ::= mustPay::Fee hasAdress::String paid::Boolean hasPhone::String ;
Contribution ::= Poster ;
 Contribution ::= Short_paper ;
 Contribution ::= Contribution_File ;
 Contribution ::= writtenBy::Author dealsWith::Topic remark::String abstract::String contactEmail::String hasKeyword::String hasTitle::String changedBy::Author hasContributionStatus::EEnum ;
Demo_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Title::String Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
CallForReviews ::= forEvent::AcademicEvent (isInitiatedBy::Person)+ hasSubmissionInstructions::String hasSubmissionDeadline::dateTime ;
Activity ::= Event_Creation ;
 Activity ::= Request ;
 Activity ::= Event_Approval ;
 Activity ::= Registration ;
 Activity ::= paper_assignment ;
 Activity ::= bidding_of_reviewer ;
 Activity ::= managing_of_conference_process ;
 Activity ::= reviewing_proces ;
 Activity ::= notification ;
 Activity ::= submission_process ;
 Activity ::= Activity_before_conference ;
 Activity ::= Conference_activity ;
 Activity ::= Activity_after_conference ;
 Activity ::= Lecture ;
 Activity ::= is_held_before::Time is_held_in::Thing is_held_after::Time is_dated_on::dateTime is_followed_by::Activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human hasTopic::Topic expectedAttendance::Integer isPartOf::Conference (has_result::Thing)+ sent_by::Person ;
Author_attendee_cd_registration_fee ::= designed_by::ACM_SIGKDD Date::dateTime payed_by::Person Price::Integer Currency::String ;
human ::= Contact_Person ;
 human ::= Program_Committee_Chair ;
 human ::= Program_Committee_member ;
 human ::= is_author_of::article performs_activity::Activity is_employed_in::institute has_topic_of_interest::Topic supervises::Activity e-mail::String last_name::String first_name::String ;
Track ::= has_a_track-workshop-tutorial_topic::Topic is_part_of_conference_volumes::Conference_volume has_a_track-workshop-tutorial_chair::Track-workshop_chair ;
Best_Student_Paper_Supporter ::= searched_by::ACM_SIGKDD Name_of_sponsor::String ;
CADTopic ::= isTopicOf::Working_event isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part ;
Information_for_participants ::= has_authors::Person has_a_date_of_issue::date ;
Programme_Brochure ::= writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document (relatesTo::Thing)+ submited_by::Person Document_ID::String presentationed_by::Speaker submit_until::Deadline recieved_by::User used_by::Person submited__by::User ;
Reviewer ::= Meta-Reviewer ;
 Reviewer ::= invites_co-reviewers::Reviewer invited_by::Reviewer (has_a_review_reference_or_expertise::Thing)+ writes_review::Review hasReviewHistory::PersonalReviewHistory executes::DoubleBlindReview cooperates::ExternalReviewer IsAssignedTo::Paper hasConflictedPaper::Paper hasPreferredPaper::Paper hasPreferredTopic::ResearchTopic writeReview::Review has_made_review::Paper_Review UserName::String Comments_to_Chair::String Other_Areas::String refuses::Pending_Proposed_Conflict reviews::Paper bidsFor::Paper confirmes::Pending_Proposed_Conflict assignedPaperBy::Program_Comitee_Chair assignedByAdministrator::Administrator adjustBid::Bid readPaper::Paper hasBeenAssigned::Paper assignExternalReviewer::ExternalReviewer ;
Event_Creation ::= is_held_before::Time is_held_in::Thing is_held_after::Time is_dated_on::dateTime is_followed_by::Activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human hasTopic::Topic expectedAttendance::Integer isPartOf::Conference (has_result::Thing)+ sent_by::Person ;
Registration_fee ::= Author_attendee_book_registration_fee ;
 Registration_fee ::= Nonmember_registration_fee ;
 Registration_fee ::= Nonauthor_registration_fee ;
 Registration_fee ::= Memeber_registration_fee ;
 Registration_fee ::= Student_registration_fee ;
 Registration_fee ::= Author_attendee_cd_registration_fee ;
 Registration_fee ::= Registration_SIGMOD_Member ;
 Registration_fee ::= Registration_Non-Member ;
 Registration_fee ::= Registration_SIGKDD_Member ;
 Registration_fee ::= Registration_Student ;
 Registration_fee ::= designed_by::ACM_SIGKDD Date::dateTime payed_by::Person Price::Integer Currency::String ;
Meta-Review ::= assigned_review_by::Primary_Reviewer written_review_by::Reviewer writtenBy::Reviewer reviews::Reviewed_contribution gives_classification::classification is_created_in::Activity reviewOfPaper::Paper reviewWrittenBy::Possible_Reviewer review_written_by::Reviewer containsEvaluation::Evaluation rates::Paper isWritenBy::Reviewer ;
Slot ::= date::date endsAt::time beginsAt::time forms::ConferenceProgram hosts::Session ;
Speaker_lecture ::= hasAssignedPaper::AcceptedPaper room::String isAssociatedTo::Slot hasChair::Chair ;
Exhibitor ::= searched_by::ACM_SIGKDD Name_of_sponsor::String ;
Student ::= earlyRegistration::Boolean ;
 Student ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person pay::Registration_fee can_stay_in::Place Nation::String Name::String hasEmail::String hasName::String hasAffiliation::String hasFirstName::String hasLastName::String hasMail::String worksForCompany::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ sign::Item is_present::Time (give::Thing)+ need::Item loggin_in::System submit::Document get::Email E-mail::String hasConflictOfInterest::Document email::String ;
Poster_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Title::String Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
managing_of_conference_process ::= is_held_before::Time is_held_in::Thing is_held_after::Time is_dated_on::dateTime is_followed_by::Activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human hasTopic::Topic expectedAttendance::Integer isPartOf::Conference (has_result::Thing)+ sent_by::Person ;
Conference_part ::= Track ;
 Conference_part ::= has_a_track-workshop-tutorial_topic::Topic is_part_of_conference_volumes::Conference_volume has_a_track-workshop-tutorial_chair::Track-workshop_chair ;
Call_for_paper ::= has_authors::Person has_a_date_of_issue::date ;
Accepted_paper ::= read_paper_by::Thing rateed_paper_by::Thing Score::EEnum ;
MeetingRoomPlace ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
SlideSet ::= writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document (relatesTo::Thing)+ submited_by::Person Document_ID::String presentationed_by::Speaker submit_until::Deadline recieved_by::User used_by::Person submited__by::User ;
ExternalReviewer ::= assignedByReviewer::Reviewer cooperatesReviewer::Reviewer ;
Submissions_deadline ::= designed_by::ACM_SIGKDD Date::dateTime done_till::date ;
Neutral_Review ::= assigned_review_by::Primary_Reviewer written_review_by::Reviewer writtenBy::Reviewer reviews::Reviewed_contribution gives_classification::classification is_created_in::Activity reviewOfPaper::Paper reviewWrittenBy::Possible_Reviewer review_written_by::Reviewer containsEvaluation::Evaluation rates::Paper isWritenBy::Reviewer ;
Organizer ::= CommitteeMember ;
 Organizer ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person pay::Registration_fee can_stay_in::Place Nation::String Name::String hasEmail::String hasName::String hasAffiliation::String hasFirstName::String hasLastName::String hasMail::String worksForCompany::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ sign::Item is_present::Time (give::Thing)+ need::Item loggin_in::System submit::Document get::Email E-mail::String hasConflictOfInterest::Document email::String ;
Topic ::= ParallelAndDistributedComputingTopic ;
 Topic ::= WirelessCommunicationsTopic ;
 Topic ::= OperatingTopicsystems ;
 Topic ::= ComputerNetworksTopic ;
 Topic ::= SatelliteAndSpaceCommunicationsTopic ;
 Topic ::= CADTopic ;
 Topic ::= MultimediaTopic ;
 Topic ::= CommunicationsTopic ;
 Topic ::= PowerlineTransmissionTopic ;
 Topic ::= AntennasTopic ;
 Topic ::= PerformanceTopic ;
 Topic ::= SignalProcessingTopic ;
 Topic ::= MicroelectronicsTopic ;
 Topic ::= TestOnlyTopic ;
 Topic ::= RadioCommunicationsTopic ;
 Topic ::= ComputerArchitectureTopic ;
 Topic ::= MedicineTopic ;
 Topic ::= SecurityTopic ;
 Topic ::= MobileComputingTopic ;
 Topic ::= CryptographyTopic ;
 Topic ::= CommunicationTheoryTopic ;
 Topic ::= isTopicOf::Working_event isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part ;
ACM_SIGKDD ::= hold::Conference search::Sponzor design::Deadline ;
Information ::= sended_by::Administrator Receiver_of_email::String Message_of_email::String Subject_of_email::String ;
Co-Author ::= writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing submitsPaper::Paper writePaper::Paper writes_Paper::Paper changes::Contribution write_paper::Paper obtain::Award submit::Paper notification_until::Deadline_Author_notification submitPaper::Paper ;
ContactInformation ::= hasCity::String hasStreet::String hasPostalCode::String hasPhone::String ;
Silver_Supporter ::= searched_by::ACM_SIGKDD Name_of_sponsor::String ;
Review_expertise ::= has_a_submitted_contribution::Submitted_contribution has_an_expertise::EEnum ;
Submitted_Paper ::= Assigned_Paper ;
 Submitted_Paper ::= Reviewed_Paper ;
 Submitted_Paper ::= Advocated_Paper ;
 Submitted_Paper ::= is_stored_in::Paper_File has_been_sent_by::Contact_Author Paper_Id::Integer Comments_To_Chair::String ;
Important_dates ::= is_an_abstract_submission_date::date is_a_full_paper_submission_date::date is_an_ending_date::date is_a_date_of_acceptance_announcement::date is_a_date_of_camera_ready_paper_submission::date is_a_starting_date::date belong_to_a_conference_volume::Conference_volume ;
Submission_event ::= follows::Administrative_event parallel_with::Administrative_event ;
Deadline_Paper_Submission ::= designed_by::ACM_SIGKDD Date::dateTime done_till::date ;
Author_cd_proceedings_included ::= writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing submitsPaper::Paper writePaper::Paper writes_Paper::Paper changes::Contribution write_paper::Paper obtain::Award submit::Paper notification_until::Deadline_Author_notification submitPaper::Paper ;
AcceptedPaper ::= relatedToEvent::PaperPresentation isAssignedToSession::Session ;
Session_room ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
Record_of_attendance ::= writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document (relatesTo::Thing)+ submited_by::Person Document_ID::String presentationed_by::Speaker submit_until::Deadline recieved_by::User used_by::Person submited__by::User ;
TravelGrant ::= providedBy::Organization hasCostCurrency::String hasCostAmount::Integer ;
Review_preference ::= (has_a_topic_or_a_submission_contribution::Thing)+ has_a_degree::Integer ;
Registration_Non-Member ::= designed_by::ACM_SIGKDD Date::dateTime payed_by::Person Price::Integer Currency::String ;
Memeber_registration_fee ::= designed_by::ACM_SIGKDD Date::dateTime payed_by::Person Price::Integer Currency::String ;
--------------------metamodels::useCase.bgf--------------------
UseCase ::= (include::Include)+ (extend::Extend)+ ;
Actor ::= name::String ;
Association ::= actor::Actor useCase::UseCase ;
--------------------metamodels::MiningMart.bgf--------------------
Key ::= isUsedForIndex::Boolean (hasColumn::DataRepresentation/Column)+ isAssociatedToColumnSet::DataRepresentation/ColumnSet ;
Attribute ::= class::SimplfiedMiningMart/Class has::SimplfiedMiningMart/DataType ;
SQLQuery ::= (select::DataRepresentation/Column)+ (from::DataRepresentation/ColumnSet)+ (where::String)+ ;
ColumnStatistics ::= unique::Integer missing::Integer min::Integer max::Integer average::Integer standarDeviation::Integer distributionValue::String distributionCount::Integer distributionMin::Integer distributionMax::Integer forColumn::DataRepresentation/Column ;
Function ::= nameOf::String signature::String ;
RelationShip ::= subRelationShipRestriction::String defined::String isA::DataRepresentation/RelationShip (correspondsToForeignKey::DataRepresentation/ForeignKey)+ correspondsToColumnSet::DataRepresentation/ColumnSet FromConcept::DataRepresentation/Concept ToConcept::DataRepresentation/Concept ;
Class ::= name::String (attributes::SimplfiedMiningMart/Attribute)+ ;
RoleRestriction ::= name::String restrictionForRelationShip::DataRepresentation/RelationShip restrictionForConcept::DataRepresentation/Concept restrictionToConcept::DataRepresentation/Concept min::Integer max::Integer belongsToConcept::DataRepresentation/Concept ;
Column ::= name::String dataType::SimplfiedMiningMart/DataType (keys::DataRepresentation/Key)+ belongsToColumnSet::DataRepresentation/ColumnSet corespondsToBaseAttribute::DataRepresentation/BaseAttribute linkPackage::LinkPackage ;
Value ::= domainDataType::DataRepresentation/DomainDataType (belongsToUserInput::DataRepresentation/UserInput)+ linkPackage::LinkPackage ;
StoredProcedure ::= nameOf::String signature::String ;
LoopStep ::= (iterationSet::DataRepresentation/FeatureAttribute)+ (outputSet::DataRepresentation/FeatureAttribute)+ ;
Case ::= name::String caseMode::Boolean caseInput::CaseRepresentation/Parameter caseOutput::DataRepresentation/Concept documentation::String (listOfStep::CaseRepresentation/Step)+ population::DataRepresentation/Concept targetAttributes::DataRepresentation/FeatureAttribute ;
ColumnSetStatistics ::= allNumber::Integer ordinalNumber::Integer nominalNumber::Integer timeNumber::Integer forColumnSet::DataRepresentation/ColumnSet ;
ColumnSet ::= number::Integer file::String dbConnectString::String user::String (hasColumn::DataRepresentation/Column)+ (hasKey::DataRepresentation/Key)+ correspondsToConcept::DataRepresentation/Concept correspondsToRelationShip::DataRepresentation/RelationShip linkPackage::LinkPackage ;
Step ::= name::String description::String belongsToCase::CaseRepresentation/Case embedsOperator::CaseRepresentation/Operator (predecessors::CaseRepresentation/Step)+ (successors::CaseRepresentation/Step)+ ;
LinkPackage ::= type::InOut dataObject::CaseRepresentation/DataObject value::DataRepresentation/Value column::DataRepresentation/Column columnSet::DataRepresentation/ColumnSet ;
BaseAttribute ::= isPartMultiColumnFeature::DataRepresentation/MultiColumnFeature domainDataType::DataRepresentation/DomainDataType ;
ForeignKey ::= isConnectionTo::DataRepresentation/Table correspondsToRelationShip::DataRepresentation/RelationShip ;
DataObject ::= source::CaseRepresentation/ExecutionElement target::CaseRepresentation/ExecutionElement linkPackageCaseRepresentation::LinkPackage ;
Parameter ::= name::String place::String parameterType::CaseRepresentation/ParameterType belongsToOperator::CaseRepresentation/Operator ;
Concept ::= subConceptRestriction::String isA::DataRepresentation/Concept FromConcept::DataRepresentation/RelationShip ToConcept::DataRepresentation/RelationShip correspondsToColumnSet::DataRepresentation/ColumnSet ;
FeatureAttribute ::= name::String relevanceForMining::Boolean attributeType::SimplfiedMiningMart/DataType belongsToConcept::DataRepresentation/Concept (correspondsToColumns::DataRepresentation/Column)+ ;
ExecutionElement ::= source::CaseRepresentation/DataObject target::CaseRepresentation/DataObject ;
--------------------metamodels::logic-abstract.bgf--------------------
Formula ::= (true::ε) | (false::ε) | (not::(arg::Formula)) | (and::(lhs::Formula rhs::Formula)) | (and::(args::(Formula*))) | (or::(lhs::Formula rhs::Formula)) | (or::(args::(Formula*))) | (if::(lhs::Formula rhs::Formula)) | (fi::(lhs::Formula rhs::Formula)) | (iff::(lhs::Formula rhs::Formula)) ;
 Formula ::= id::(x::string()) ;
--------------------metamodels::logic-concrete.bgf--------------------
True ::= "(" True ")" ;
 True ::= "true" ;
 True ::= "not" f::False ;
 True ::= lt::True "and" rt::True ;
 True ::= lt::True "or" rt::True ;
 True ::= lt::True "or" rf::False ;
 True ::= lf::False "or" rt::True ;
Formula ::= [not] "!" arg::Formula ;
 Formula ::= [true] "true" ;
 Formula ::= [false] "false" ;
 Formula ::= [and] lhs::Formula "&" rhs::Formula ;
 Formula ::= [or] lhs::Formula "|" rhs::Formula ;
 Formula ::= [fi] lhs::Formula "<=" rhs::Formula ;
 Formula ::= [if] lhs::Formula "=>" rhs::Formula ;
 Formula ::= [iff] lhs::Formula "<=>" rhs::Formula ;
 Formula ::= [id] ε ;
False ::= "false" ;
 False ::= "not" t::True ;
 False ::= "(" False ")" ;
 False ::= lf::False "and" rt::True ;
 False ::= lf::False "and" rf::False ;
 False ::= lt::True "and" rf::False ;
 False ::= lf::False "or" rf::False ;
--------------------ocl::expressions.bgf--------------------
VariableDeclaration ::= var::String varType::Type (oclExpression::OclExpression)+ (queryExp::QueryExp)+ (varInit::VariableInitialisation)+ ;
VariableInitialisation ::= initExpression::OclExpression varDec::VariableDeclaration iterateExp::IterateExp ;
SelfExp ::= (queryArg::QueryExp)+ (querySrc::QueryExp)+ resultType::Type (varDec::VariableDeclaration)+ (varInit::VariableInitialisation)+ ;
ResultExp ::= (queryArg::QueryExp)+ (querySrc::QueryExp)+ resultType::Type (varDec::VariableDeclaration)+ (varInit::VariableInitialisation)+ ;
--------------------ocl::operations.bgf--------------------
NaviguationExp ::= assEnd::AssocationEnd qualifierValues::OclExpression ;
ClassifierOperation ::= op::Operation arguments::OclExpression ;
PropertyOperation ::= AttributeExp ;
 PropertyOperation ::= NaviguationExp ;
 PropertyOperation ::= ClassifierOperation ;
 PropertyOperation ::= isMarkedPre::Boolean source::OclExpression ;
--------------------ocl::types.bgf--------------------
OclAnyType ::= (supertype::Type)+ (subtype::Type)+ (collectionType::CollectionType)+ ;
SetType ::= elementType::Type ;
OclTypeType ::= (supertype::Type)+ (subtype::Type)+ (collectionType::CollectionType)+ ;
SequenceType ::= elementType::Type ;
BagType ::= elementType::Type ;
--------------------ocl::values.bgf--------------------
UndefinedValue ::= type::Type (bagValue::BagValue)+ (sequenceValue::SequenceValue)+ (setValue::SetValue)+ ;
--------------------slps::bgf-1.0-xsd.bgf--------------------
production ::= (label::label)? nonterminal::nonterminal expression ;
expression ::= (epsilon::ε) | (empty::ε) | (any::ε) | (terminal::terminal) | (nonterminal::nonterminal) | (selectable::(selector::selector expression)) | (sequence::(expression*)) | (choice::(expression*)) | (optional::expression) | (plus::expression) | (star::expression) ;
grammar ::= (name::string())? (root::nonterminal)* production* ;
--------------------slps::bgf-2.0-xsd.bgf--------------------
production ::= (label::label)? nonterminal::nonterminal expression ;
expression ::= (epsilon::ε) | (empty::ε) | (value::value) | (any::ε) | (terminal::terminal) | (nonterminal::nonterminal) | (selectable::(selector::selector expression)) | (sequence::(expression*)) | (choice::(expression*)) | (optional::expression) | (plus::expression) | (star::expression) ;
grammar ::= (root::nonterminal)* production* ;
--------------------slps::bgf-2.1-xsd.bgf--------------------
production ::= (label::label)? nonterminal::nonterminal expression ;
expression ::= (epsilon::ε) | (empty::ε) | (value::value) | (any::ε) | (terminal::terminal) | (nonterminal::nonterminal) | (selectable::(selector::selector expression)) | (sequence::(expression+)) | (choice::(expression+)) | (optional::expression) | (plus::expression) | (star::expression) ;
grammar ::= (root::nonterminal)* production* ;
--------------------slps::btf.bgf--------------------
tree ::= (epsilon::ε) | (any::α) | (terminal::terminal) | (nonterminal::(production tree)) | (selectable::(selector::selector tree)) | (value::((int::integer()) | (string::string()))) | (sequence::(tree*)) | (choice::(expression tree)) | (optional::(tree?)) | (plus::(tree+)) | (star::(tree*)) ;
production ::= (label::label)? nonterminal::nonterminal expression ;
expression ::= (epsilon::ε) | (empty::ε) | (value::value) | (any::ε) | (terminal::terminal) | (nonterminal::nonterminal) | (selectable::(selector::selector expression)) | (marked::expression) | (sequence::(expression+)) | (choice::(expression+)) | (allof::(expression+)) | (not::expression) | (optional::expression) | (plus::expression) | (star::expression) | (seplistplus::(expression expression)) | (sepliststar::(expression expression)) ;
grammar ::= (root::nonterminal)* production* ;
root ::= grammar tree ;
--------------------slps::bgf-3.0-xsd.bgf--------------------
production ::= (label::label)? nonterminal::nonterminal expression ;
expression ::= (epsilon::ε) | (empty::ε) | (value::value) | (any::ε) | (terminal::terminal) | (nonterminal::nonterminal) | (selectable::(selector::selector expression)) | (sequence::(expression+)) | (marked::(expression*)) | (choice::(expression+)) | (optional::expression) | (plus::expression) | (star::expression) ;
grammar ::= (root::nonterminal)* production* ;
--------------------slps::bgf-3.1-xsd.bgf--------------------
production ::= (label::label)? nonterminal::nonterminal expression ;
expression ::= (epsilon::ε) | (empty::ε) | (value::value) | (any::ε) | (terminal::terminal) | (nonterminal::nonterminal) | (selectable::(selector::selector expression)) | (sequence::(expression+)) | (marked::expression) | (choice::(expression+)) | (optional::expression) | (plus::expression) | (star::expression) ;
grammar ::= (root::nonterminal)* production* ;
--------------------slps::bgf-4.0-xsd.bgf--------------------
production ::= (label::label)? nonterminal::nonterminal expression ;
expression ::= (epsilon::ε) | (empty::ε) | (value::value) | (any::ε) | (terminal::terminal) | (nonterminal::nonterminal) | (selectable::(selector::selector expression)) | (sequence::(expression+)) | (marked::expression) | (choice::(expression+)) | (optional::expression) | (plus::expression) | (star::expression) | (seplistplus::(expression expression)) | (sepliststar::(expression expression)) ;
grammar ::= (root::nonterminal)* production* ;
--------------------slps::bgf-4.1-adt.bgf--------------------
BGFExpression ::= (epsilon::ε) | (empty::ε) | (val::(v::BGFValue)) | (anything::ε) | (terminal::(t::string())) | (nonterminal::(t::string())) | (selectable::(selector::string() expr::BGFExpression)) | (sequence::(exprs::(BGFExpression*))) | (choice::(exprs::(BGFExpression*))) | (marked::(expr::BGFExpression)) | (optional::(expr::BGFExpression)) | (plus::(expr::BGFExpression)) | (star::(expr::BGFExpression)) | (starsepplus::(expr::BGFExpression sep::BGFExpression)) | (starsepstar::(expr::BGFExpression sep::BGFExpression)) ;
--------------------slps::bgf-4.2-adt.bgf--------------------
BGFProduction ::= production::(label::string() lhs::string() rhs::BGFExpression) ;
BGFExpression ::= (epsilon::ε) | (empty::ε) | (val::(v::BGFValue)) | (anything::ε) | (terminal::(t::string())) | (nonterminal::(t::string())) | (selectable::(selector::string() expr::BGFExpression)) | (sequence::(exprs::(BGFExpression*))) | (choice::(exprs::(BGFExpression*))) | (marked::(expr::BGFExpression)) | (optional::(expr::BGFExpression)) | (plus::(expr::BGFExpression)) | (star::(expr::BGFExpression)) | (starsepplus::(expr::BGFExpression sep::BGFExpression)) | (starsepstar::(expr::BGFExpression sep::BGFExpression)) ;
BGFGrammar ::= grammar::(roots::(string()*) prods::(BGFProduction*)) ;
--------------------slps::bgf-4.3-adt.bgf--------------------
BGFProduction ::= production::(label::string() lhs::string() rhs::BGFExpression) ;
BGFExpression ::= (epsilon::ε) | (empty::ε) | (val::(v::BGFValue)) | (anything::ε) | (terminal::(t::string())) | (nonterminal::(t::string())) | (selectable::(selector::string() expr::BGFExpression)) | (sequence::(exprs::BGFExprList)) | (choice::(exprs::BGFExprList)) | (marked::(expr::BGFExpression)) | (optional::(expr::BGFExpression)) | (plus::(expr::BGFExpression)) | (star::(expr::BGFExpression)) | (seplistplus::(expr::BGFExpression sep::BGFExpression)) | (sepliststar::(expr::BGFExpression sep::BGFExpression)) ;
BGFGrammar ::= grammar::(roots::(string()*) prods::BGFProdList) ;
--------------------slps::bgf-5.0-adt.bgf--------------------
BGFProduction ::= production::(label::string() lhs::string() rhs::BGFExpression) ;
BGFExpression ::= (epsilon::ε) | (empty::ε) | (val::(v::BGFValue)) | (anything::ε) | (terminal::(t::string())) | (nonterminal::(t::string())) | (selectable::(selector::string() expr::BGFExpression)) | (sequence::(exprs::BGFExprList)) | (choice::(exprs::BGFExprList)) | (all::(exprs::BGFExprList)) | (marked::(expr::BGFExpression)) | (optional::(expr::BGFExpression)) | (not::(expr::BGFExpression)) | (plus::(expr::BGFExpression)) | (star::(expr::BGFExpression)) | (seplistplus::(expr::BGFExpression sep::BGFExpression)) | (sepliststar::(expr::BGFExpression sep::BGFExpression)) ;
BGFGrammar ::= grammar::(roots::(string()*) prods::BGFProdList) ;
--------------------slps::bgf-5.1-adt.bgf--------------------
BGFProduction ::= production::(label::string() lhs::string() rhs::BGFExpression) ;
BGFExpression ::= (epsilon::ε) | (empty::ε) | (val::(v::BGFValue)) | (anything::ε) | (terminal::(t::string())) | (nonterminal::(t::string())) | (selectable::(selector::string() expr::BGFExpression)) | (sequence::(exprs::BGFExprList)) | (choice::(exprs::BGFExprList)) | (allof::(exprs::BGFExprList)) | (marked::(expr::BGFExpression)) | (optional::(expr::BGFExpression)) | (not::(expr::BGFExpression)) | (plus::(expr::BGFExpression)) | (star::(expr::BGFExpression)) | (seplistplus::(expr::BGFExpression sep::BGFExpression)) | (sepliststar::(expr::BGFExpression sep::BGFExpression)) ;
BGFGrammar ::= grammar::(roots::(string()*) prods::BGFProdList) ;
--------------------slps::bgf-5.2-xsd.bgf--------------------
production ::= (label::label)? nonterminal::nonterminal expression ;
expression ::= (epsilon::ε) | (empty::ε) | (value::value) | (any::ε) | (terminal::terminal) | (nonterminal::nonterminal) | (selectable::(selector::selector expression)) | (marked::expression) | (sequence::(expression+)) | (choice::(expression+)) | (allof::(expression+)) | (not::expression) | (optional::expression) | (plus::expression) | (star::expression) | (seplistplus::(expression expression)) | (sepliststar::(expression expression)) ;
grammar ::= (root::nonterminal)* production* ;
--------------------slps::bgf-5.3-adt.bgf--------------------
BGFProduction ::= production::(label::string() lhs::string() rhs::BGFExpression) ;
BGFExpression ::= (epsilon::ε) | (empty::ε) | (val::(v::BGFValue)) | (anything::ε) | (terminal::(t::string())) | (nonterminal::(t::string())) | (selectable::(selector::string() expr::BGFExpression)) | (sequence::(exprs::BGFExprList)) | (choice::(exprs::BGFExprList)) | (allof::(exprs::BGFExprList)) | (marked::(expr::BGFExpression)) | (optional::(expr::BGFExpression)) | (not::(expr::BGFExpression)) | (plus::(expr::BGFExpression)) | (star::(expr::BGFExpression)) | (seplistplus::(expr::BGFExpression sep::BGFExpression)) | (sepliststar::(expr::BGFExpression sep::BGFExpression)) ;
BGFGrammar ::= grammar::(roots::(string()*) prods::BGFProdList) ;
--------------------slps::bgf-v1.0-xsd.bgf--------------------
production ::= (label::label)? nonterminal::nonterminal expression ;
expression ::= (epsilon::ε) | (empty::ε) | (any::ε) | (terminal::terminal) | (nonterminal::nonterminal) | (selectable::(selector::selector expression)) | (sequence::(expression*)) | (choice::(expression*)) | (optional::expression) | (plus::expression) | (star::expression) ;
grammar ::= (name::string())? (root::nonterminal)* production* ;
--------------------slps::bgf-v2.0-xsd.bgf--------------------
production ::= (label::label)? nonterminal::nonterminal expression ;
expression ::= (epsilon::ε) | (empty::ε) | (value::value) | (any::ε) | (terminal::terminal) | (nonterminal::nonterminal) | (selectable::(selector::selector expression)) | (sequence::(expression*)) | (choice::(expression*)) | (optional::expression) | (plus::expression) | (star::expression) ;
grammar ::= (root::nonterminal)* production* ;
--------------------slps::bgf-v2.1-xsd.bgf--------------------
production ::= (label::label)? nonterminal::nonterminal expression ;
expression ::= (epsilon::ε) | (empty::ε) | (value::value) | (any::ε) | (terminal::terminal) | (nonterminal::nonterminal) | (selectable::(selector::selector expression)) | (sequence::(expression+)) | (choice::(expression+)) | (optional::expression) | (plus::expression) | (star::expression) ;
grammar ::= (root::nonterminal)* production* ;
--------------------slps::bgf-v3.0-xsd.bgf--------------------
production ::= (label::label)? nonterminal::nonterminal expression ;
expression ::= (epsilon::ε) | (empty::ε) | (value::value) | (any::ε) | (terminal::terminal) | (nonterminal::nonterminal) | (selectable::(selector::selector expression)) | (sequence::(expression+)) | (marked::(expression*)) | (choice::(expression+)) | (optional::expression) | (plus::expression) | (star::expression) ;
grammar ::= (root::nonterminal)* production* ;
--------------------slps::bgf-v3.1-xsd.bgf--------------------
production ::= (label::label)? nonterminal::nonterminal expression ;
expression ::= (epsilon::ε) | (empty::ε) | (value::value) | (any::ε) | (terminal::terminal) | (nonterminal::nonterminal) | (selectable::(selector::selector expression)) | (sequence::(expression+)) | (marked::expression) | (choice::(expression+)) | (optional::expression) | (plus::expression) | (star::expression) ;
grammar ::= (root::nonterminal)* production* ;
--------------------slps::bgf-v4.0-xsd.bgf--------------------
production ::= (label::label)? nonterminal::nonterminal expression ;
expression ::= (epsilon::ε) | (empty::ε) | (value::value) | (any::ε) | (terminal::terminal) | (nonterminal::nonterminal) | (selectable::(selector::selector expression)) | (sequence::(expression+)) | (marked::expression) | (choice::(expression+)) | (optional::expression) | (plus::expression) | (star::expression) | (seplistplus::(expression expression)) | (sepliststar::(expression expression)) ;
grammar ::= (root::nonterminal)* production* ;
--------------------slps::bgf-v4.2-adt.bgf--------------------
BGFProduction ::= production::(label::string() lhs::string() rhs::BGFExpression) ;
BGFExpression ::= (epsilon::ε) | (empty::ε) | (val::(v::BGFValue)) | (anything::ε) | (terminal::(t::string())) | (nonterminal::(t::string())) | (selectable::(selector::string() expr::BGFExpression)) | (sequence::(exprs::(BGFExpression*))) | (choice::(exprs::(BGFExpression*))) | (marked::(expr::BGFExpression)) | (optional::(expr::BGFExpression)) | (plus::(expr::BGFExpression)) | (star::(expr::BGFExpression)) | (starsepplus::(expr::BGFExpression sep::BGFExpression)) | (starsepstar::(expr::BGFExpression sep::BGFExpression)) ;
BGFGrammar ::= grammar::(roots::(string()*) prods::(BGFProduction*)) ;
--------------------slps::bgf-v5.0-adt.bgf--------------------
BGFProduction ::= production::(label::string() lhs::string() rhs::BGFExpression) ;
BGFExpression ::= (epsilon::ε) | (empty::ε) | (val::(v::BGFValue)) | (anything::ε) | (terminal::(t::string())) | (nonterminal::(t::string())) | (selectable::(selector::string() expr::BGFExpression)) | (sequence::(exprs::BGFExprList)) | (choice::(exprs::BGFExprList)) | (all::(exprs::BGFExprList)) | (marked::(expr::BGFExpression)) | (optional::(expr::BGFExpression)) | (not::(expr::BGFExpression)) | (plus::(expr::BGFExpression)) | (star::(expr::BGFExpression)) | (seplistplus::(expr::BGFExpression sep::BGFExpression)) | (sepliststar::(expr::BGFExpression sep::BGFExpression)) ;
BGFGrammar ::= grammar::(roots::(string()*) prods::BGFProdList) ;
--------------------slps::bgf-v5.1-adt.bgf--------------------
BGFProduction ::= production::(label::string() lhs::string() rhs::BGFExpression) ;
BGFExpression ::= (epsilon::ε) | (empty::ε) | (val::(v::BGFValue)) | (anything::ε) | (terminal::(t::string())) | (nonterminal::(t::string())) | (selectable::(selector::string() expr::BGFExpression)) | (sequence::(exprs::BGFExprList)) | (choice::(exprs::BGFExprList)) | (allof::(exprs::BGFExprList)) | (marked::(expr::BGFExpression)) | (optional::(expr::BGFExpression)) | (not::(expr::BGFExpression)) | (plus::(expr::BGFExpression)) | (star::(expr::BGFExpression)) | (seplistplus::(expr::BGFExpression sep::BGFExpression)) | (sepliststar::(expr::BGFExpression sep::BGFExpression)) ;
BGFGrammar ::= grammar::(roots::(string()*) prods::BGFProdList) ;
--------------------slps::bgf-v5.2-xsd.bgf--------------------
production ::= (label::label)? nonterminal::nonterminal expression ;
expression ::= (epsilon::ε) | (empty::ε) | (value::value) | (any::ε) | (terminal::terminal) | (nonterminal::nonterminal) | (selectable::(selector::selector expression)) | (marked::expression) | (sequence::(expression+)) | (choice::(expression+)) | (allof::(expression+)) | (not::expression) | (optional::expression) | (plus::expression) | (star::expression) | (seplistplus::(expression expression)) | (sepliststar::(expression expression)) ;
grammar ::= (root::nonterminal)* production* ;
--------------------slps::cbgf-adt.bgf--------------------
CBGFCommand ::= (abridge_detour::(p::BGFProduction)) | (abstractize_concretize::(p::BGFProduction)) | (addH_removeH::(p::BGFProduction)) | (addV_removeV::(p::BGFProduction)) | (anonymize_deanonymize::(p::BGFProduction)) | (appear_disapper::(p::BGFProduction)) | (chain_unchain::(p::BGFProduction)) | (clone_equate::(x::string() y::string() w::XBGFScope)) | (concatT_splitT::(y::string() xs::(string()*) w::XBGFScope)) | (concretize_abstractize::(p::BGFProduction)) | (deanonymize_anonymize::(p::BGFProduction)) | (define_undefine::(ps::(BGFProduction*))) | (designate_unlabel::(p::BGFProduction)) | (detour_abridge::(p::BGFProduction)) | (deyaccify_yaccify::(ps::(BGFProduction*))) | (disappear_appear::(p::BGFProduction)) | (downgrade_upgrade::(p1::BGFProduction p2::BGFProduction)) | (eliminate_introduce::(ps::(BGFProduction*))) | (equate_clone::(x::string() y::string() w::XBGFScope)) | (extract_inline::(p::BGFProduction w::XBGFScope)) | (factor_factor::(e1::BGFExpression e2::BGFExpression w::XBGFScope)) | (fold_unfold::(x::string() w::XBGFScope)) | (horizontal_vertical::(w::XBGFScope)) | (inject_project::(p::BGFProduction)) | (inline_extract::(p::BGFProduction w::XBGFScope)) | (introduce_eliminate::(ps::(BGFProduction*))) | (iterate_assoc::(p::BGFProduction)) | (assoc_iterate::(p::BGFProduction)) | (massage_massage::(e1::BGFExpression e2::BGFExpression w::XBGFScope)) | (narrow_widen::(e1::BGFExpression e2::BGFExpression w::XBGFScope)) | (permute_permute::(p1::BGFProduction p2::BGFProduction)) | (project_inject::(p::BGFProduction)) | (redefine_redefine::(ps1::(BGFProduction*) ps2::(BGFProduction*))) | (removeH_addH::(p::BGFProduction)) | (removeV_addV::(p::BGFProduction)) | (renameL_renameL::(x::string() y::string())) | (renameN_renameN::(x::string() y::string())) | (renameS_renameS::(x::string() y::string() w::XBGFScope)) | (renameT_renameT::(x::string() y::string())) | (replace_replace::(e1::BGFExpression e2::BGFExpression w::XBGFScope)) | (reroot_reroot::(xs1::(string()*) xs2::(string()*))) | (splitN_unite::(x::string() ps::(BGFProduction*) w::XBGFScope)) | (splitT_concatT::(x::string() ys::(string()*) w::XBGFScope)) | (unchain_chain::(p::BGFProduction)) | (undefine_define::(ps::(BGFProduction*))) | (unfold_fold::(x::string() w::XBGFScope)) | (unite_splitN::(x::string() ps::(BGFProduction*) w::XBGFScope)) | (unlabel_designate::(p::BGFProduction)) | (upgrade_downgrade::(p1::BGFProduction p2::BGFProduction)) | (vertical_horizontal::(w::XBGFScope)) | (widen_narrow::(e1::BGFExpression e2::BGFExpression w::XBGFScope)) | (yaccify_deyaccify::(ps::(BGFProduction*))) ;
--------------------slps::cbgf-xsd.bgf--------------------
rename ::= (label::(from::label to::label)) | (nonterminal::(from::nonterminal to::nonterminal)) | (selector::((in::label)? from::selector to::selector)) | (terminal::(from::terminal to::terminal)) ;
widen ::= expression expression (in::scope)? ;
define ::= production+ tag::string() ;
splitT ::= terminal::terminal into::((terminal::terminal)+) (in::scope)? ;
equate-clone ::= align::(production+) with::nonterminal in::(scope+) ;
production ::= (label::label)? nonterminal::nonterminal expression ;
 production ::= (label::label)? nonterminal::nonterminal expression ;
downgrade ::= production production ;
replace ::= expression expression (in::scope)? tag::string() ;
redefine ::= production+ tag::string() ;
split-unite ::= add::(production+) to::(production+) in::(scope+) ;
unite-split ::= add::(production+) to::(production+) in::(scope+) ;
rename-rename ::= (label::(from::label to::label)) | (nonterminal::(from::nonterminal to::nonterminal)) | (selector::((in::label)? from::selector to::selector)) | (terminal::(from::terminal to::terminal)) ;
widen-narrow ::= expression expression (in::scope)? ;
equate ::= align::nonterminal with::nonterminal ;
fold-unfold ::= nonterminal::nonterminal (in::scope)? ;
extract-inline ::= production (in::scope)? ;
unite ::= add::nonterminal to::nonterminal ;
permute-permute ::= production production ;
upgrade ::= production production ;
narrow ::= expression expression (in::scope)? ;
replace-replace ::= expression expression (in::scope)? tag::string() ;
split ::= nonterminal::nonterminal production+ scope* ;
unfold ::= nonterminal::nonterminal (in::scope)? ;
clone-equate ::= align::(production+) with::nonterminal in::(scope+) ;
project ::= production tag::string() ;
expression ::= (epsilon::ε) | (empty::ε) | (value::value) | (any::ε) | (terminal::terminal) | (nonterminal::nonterminal) | (selectable::(selector::selector expression)) | (marked::expression) | (sequence::(expression+)) | (choice::(expression+)) | (allof::(expression+)) | (not::expression) | (optional::expression) | (plus::expression) | (star::expression) | (seplistplus::(expression expression)) | (sepliststar::(expression expression)) ;
 expression ::= (epsilon::ε) | (empty::ε) | (value::value) | (any::ε) | (terminal::terminal) | (nonterminal::nonterminal) | (selectable::(selector::selector expression)) | (marked::expression) | (sequence::(expression+)) | (choice::(expression+)) | (allof::(expression+)) | (not::expression) | (optional::expression) | (plus::expression) | (star::expression) | (seplistplus::(expression expression)) | (sepliststar::(expression expression)) ;
undefine ::= (nonterminal::nonterminal)+ tag::string() ;
unfold-fold ::= nonterminal::nonterminal (in::scope)? ;
inject ::= production tag::string() ;
factor ::= expression expression (in::scope)? ;
reroot-reroot ::= from::roots to::roots ;
factor-factor ::= expression expression (in::scope)? ;
inline-extract ::= production (in::scope)? ;
massage ::= expression expression (in::scope)? ;
narrow-widen ::= expression expression (in::scope)? ;
massage-massage ::= expression expression (in::scope)? ;
downgrade-upgrade ::= production production ;
upgrade-downgrade ::= production production ;
iterate-assoc ::= production production ;
assoc-iterate ::= production production ;
extract ::= production (in::scope)? ;
fold ::= nonterminal::nonterminal (in::scope)? ;
--------------------slps::edd.bgf--------------------
config ::= ((start-grammar-symbol::string()) | (end-grammar-symbol::string()) | (line-continuation-symbol::string()) | (tabulation-symbol::string()) | (start-label-symbol::string()) | (end-label-symbol::string()) | (defining-symbol::string()) | (multiple-defining-symbol::string()) | (terminator-symbol::string()) | (definition-separator-symbol::string()) | (concatenate-symbol::string()) | (start-comment-symbol::string()) | (end-comment-symbol::string()) | (start-group-symbol::string()) | (end-group-symbol::string()) | (start-option-symbol::string()) | (end-option-symbol::string()) | (start-terminal-symbol::string()) | (end-terminal-symbol::string()) | (start-nonterminal-symbol::string()) | (end-nonterminal-symbol::string()) | (start-seplist-star-symbol::string()) | (end-seplist-star-symbol::string()) | (start-seplist-plus-symbol::string()) | (end-seplist-plus-symbol::string()) | (start-repetition-star-symbol::string()) | (end-repetition-star-symbol::string()) | (start-repetition-plus-symbol::string()) | (end-repetition-plus-symbol::string()) | (postfix-option-symbol::string()) | (postfix-repetition-star-symbol::string()) | (postfix-repetition-plus-symbol::string()) | (nonterminals-may-start-with::string()) | (nonterminals-may-contain::string()) | (nonterminal-if-contains::string()) | (terminal-if-undefined::((except::string())*)) | (nonterminal-if-defined::((except::string())*)) | (decompose-symbols::((except::string())*)) | (terminal-if-uppercase::α) | (terminal-if-lowercase::α) | (terminal-if-mixedcase::α) | (terminal-if-camelcase::α) | (nonterminal-if-uppercase::α) | (nonterminal-if-lowercase::α) | (nonterminal-if-mixedcase::α) | (nonterminal-if-camelcase::α) | (glue-nonalphanumeric-terminals::α) | (break-tokens-at-whitespace::α) | (disregard-labels::α) | (consider-indentation::α) | (ignore::(((newline::α) | (space::α) | (same-indentation::α) | (lines-containing::string()))+)) | (mask::(token::string() (terminal::string()) | (epsilon::α))))* ;
--------------------slps::ldf-Readable.bgf--------------------
named-link ::= title::string() version-or-edition? (uri::anyURI)? ;
document ::= document-metadata part+ ;
production ::= (label::label)? nonterminal::nonterminal expression ;
part-metadata ::= (id::ID)? part-role (title::string())? (author::person)* ;
expression ::= (epsilon::ε) | (empty::ε) | (value::value) | (any::ε) | (terminal::terminal) | (nonterminal::nonterminal) | (selectable::(selector::selector expression)) | (marked::expression) | (sequence::(expression+)) | (choice::(expression+)) | (allof::(expression+)) | (not::expression) | (optional::expression) | (plus::expression) | (star::expression) | (seplistplus::(expression expression)) | (sepliststar::(expression expression)) ;
subsection-metadata ::= (id::ID)? subsection-role type? (title::string())? (author::person)* ;
section-metadata ::= (id::ID)? section-role type? (title::string())? (author::person)* ;
subsection ::= subsection-metadata section-structure ;
section ::= section-metadata section-structure ;
person ::= name::string() (affiliation::string())? (email::string())? ;
part ::= part-metadata section+ ;
document-metadata ::= body? (number::string())? (author::person)* topic::string() status version-or-edition (previous::named-link)* date::timestamp ;
--------------------slps::ldf-v1.0-xsd.bgf--------------------
sectionType ::= title::string() content::contentType ;
document ::= title::string() author::string() abstract::string() content::contentType ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? ;
contentType ::= ((text::mixedType) | (grammar::(α language::string() (version::string())?)) | (sample::sampleType) | (runnable::runnableType))* (section::sectionType)* ;
--------------------slps::ldf-v10.0-xsd.bgf--------------------
SimpleTable ::= (header::TableRow)* (row::TableRow)+ ;
document ::= titlePage::titlePage (placeholder::generated)* frontMatter::(front-simple-section+) (lists::(front-list+))? (lexicalPart::(LexicalSection+))? (core::StructuredSection)+ (annex::StructuredSection)* ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
titlePage ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
ListOfInternalLinks ::= (link::(text::string() (linktext::string())? reference::string()))+ ;
StructuredSection ::= title::string() (author::string())* StructuredSectionElement+ (id::string())? ;
SimpleSection ::= (title::string())? (author::string())* content::SimpleText (id::string())? ;
ListOfTerms ::= (title::string())? (author::string())* (term::(name::string() definition::SimpleText))+ (id::string())? ;
--------------------slps::ldf-v11.0-xsd.bgf--------------------
SimpleTable ::= (header::TableRow)* (row::TableRow)+ ;
document ::= titlePage::titlePage (placeholder::generated)* frontMatter::(front-simple-section+) (lists::(front-list+))? (lexicalPart::(LexicalSection+))? (core::StructuredSection)+ (annex::StructuredSection)* ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
titlePage ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
ListOfInternalLinks ::= (link::(text::string() (linktext::string())? reference::string()))+ ;
SimpleFigure ::= caption::string() type::string() file::string() (id::string())? ;
StructuredSection ::= title::string() (author::string())* StructuredSectionElement+ (id::string())? ;
SimpleSection ::= (title::string())? (author::string())* content::SimpleText (id::string())? ;
ListOfTerms ::= (title::string())? (author::string())* (term::(name::string() definition::SimpleText))+ (id::string())? ;
--------------------slps::ldf-v11.1-xsd.bgf--------------------
simpleTable ::= (header::tableRow)* (row::tableRow)+ ;
document ::= titlePage::titlePage (placeholder::generated)* frontMatter::(frontSection+) (lists::(frontList+))? (lexicalPart::(lexicalSection+))? (core::structuredSection)+ (annex::structuredSection)* ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
listOfInternalLinks ::= (link::(text::string() (linkText::string())? reference::string()))+ ;
titlePage ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
simpleFigure ::= caption::string() type::string() file::string() (id::string())? ;
structuredSection ::= title::string() (author::string())* structuredSectionElement+ (id::string())? ;
simpleSection ::= (title::string())? (author::string())* content::simpleText (id::string())? ;
listOfTerms ::= (title::string())? (author::string())* (term::(name::string() definition::simpleText))+ (id::string())? ;
--------------------slps::ldf-v11.2-xsd.bgf--------------------
simpleTable ::= (header::tableRow)* (row::tableRow)+ ;
document ::= titlePage::titlePage (placeholder::generated)* frontMatter::(frontSection+) (lists::(frontList+))? (lexicalPart::(lexicalSection+))? (core::structuredSection)+ (annex::structuredSection)* ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
listOfInternalLinks ::= (link::(text::string() (linkText::string())? reference::string()))+ ;
titlePage ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
simpleFigure ::= caption::string() type::string() file::string() (id::string())? ;
structuredSection ::= title::string() (author::string())* structuredSectionElement+ (id::string())? ;
simpleSection ::= (title::string())? (author::string())* content::simpleText (id::string())? ;
listOfTerms ::= (title::string())? (author::string())* (term::(name::string() definition::simpleText))+ (id::string())? ;
--------------------slps::ldf-v12.0-xsd.bgf--------------------
simpleTable ::= (header::tableRow)* (row::tableRow)+ ;
document ::= titlePage::titlePage (placeholder::generated)* frontMatter::(frontSection+) (lists::(frontList+))? (lexicalPart::(lexicalSection+))? (core::structuredSection)+ (annex::structuredSection)* ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
listOfInternalLinks ::= (link::(text::string() (linkText::string())? reference::string()))+ ;
titlePage ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
simpleFigure ::= caption::string() type::string() file::string() (id::string())? ;
structuredSection ::= title::string() (author::string())* structuredSectionElement+ (id::string())? ;
simpleSection ::= (title::string())? (author::string())* content::simpleText (id::string())? ;
listOfTerms ::= (title::string())? (author::string())* (term::(name::string() definition::simpleText))+ (id::string())? ;
--------------------slps::ldf-v13.0-xsd.bgf--------------------
simpleTable ::= (header::tableRow)* (row::tableRow)+ ;
document ::= titlePage::titlePage (placeholder::generated)* frontMatter::(frontSection+) (lists::(frontList+))? (lexicalPart::(lexicalSection+))? (core::structuredSection)+ (annex::structuredSection)* ;
structuredSectionElement ::= (placeholder::generated) | normative | informative | production | (references::listOfInternalLinks) | (section::simpleSection) | (subtopic::structuredSection) | (value::(key::string() data::string())) ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
listOfInternalLinks ::= (link::(text::string() (linkText::string())? reference::string()))+ ;
titlePage ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
simpleFigure ::= caption::string() type::string() file::string() (id::string())? ;
structuredSection ::= title::string() (author::string())* structuredSectionElement+ (id::string())? ;
simpleSection ::= (title::string())? (author::string())* content::simpleText (id::string())? ;
listOfTerms ::= (title::string())? (author::string())* (term::(name::string() definition::simpleText))+ (id::string())? ;
--------------------slps::ldf-v13.1-xsd.bgf--------------------
simpleTable ::= (header::tableRow)* (row::tableRow)+ ;
document ::= titlePage::titlePage (placeholder::generated)* frontMatter::(frontSection+) (lists::(frontList+))? (lexicalPart::(lexicalSection+))? (core::structuredSection)+ (annex::structuredSection)* ;
structuredSectionElement ::= (placeholder::generated) | normative | informative | production | (references::listOfInternalLinks) | (section::simpleSection) | (subtopic::structuredSection) | (value::(key::string() data::string())) ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
listOfInternalLinks ::= (link::(text::string() (linkText::string())? reference::string()))+ ;
titlePage ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
simpleFigure ::= caption::string() type::string() file::string() (id::string())? ;
structuredSection ::= title::string() (author::string())* structuredSectionElement+ (id::string())? ;
simpleSection ::= (title::string())? (author::string())* content::simpleText (id::string())? ;
listOfTerms ::= (title::string())? (author::string())* (term::(name::string() definition::simpleText))+ (id::string())? ;
--------------------slps::ldf-v14.0-xsd.bgf--------------------
simpleTable ::= (header::tableRow)* (row::tableRow)+ ;
document ::= titlePage::titlePage (placeholder::generated)* frontMatter::(frontSection+) (lists::(frontList+))? (lexicalPart::(lexicalSection+))? (core::structuredSection)+ (annex::structuredSection)* ;
link ::= (text::string())? reference::string() ;
structuredSectionElement ::= (placeholder::generated) | normative | informative | production | (references::simpleList) | (section::simpleSection) | (subtopic::structuredSection) | (value::(key::string() data::string())) ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
titlePage ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
simpleFigure ::= caption::string() type::string() file::string() (id::string())? ;
structuredSection ::= title::string() (author::string())* structuredSectionElement+ (id::string())? ;
simpleSection ::= (title::string())? (author::string())* content::simpleText (id::string())? ;
listOfTerms ::= (title::string())? (author::string())* (term::(name::string() definition::simpleText))+ (id::string())? ;
--------------------slps::ldf-v15.0-xsd.bgf--------------------
simpleTable ::= (header::tableRow)* (row::tableRow)+ ;
document ::= titlePage::titlePage (placeholder::generated)* frontMatter::(frontSection+) (lists::(frontList+))? (lexicalPart::(lexicalSection+))? (core::structuredSection)+ (annex::structuredSection)* ;
link ::= (text::string())? reference::string() ;
structuredSectionElement ::= (placeholder::generated) | normative | informative | production | (references::simpleList) | (section::simpleSection) | (subtopic::structuredSection) | (value::(key::string() data::string())) ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
titlePage ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
simpleFigure ::= caption::string() type::string() file::string() (id::string())? ;
structuredSection ::= title::string() (author::string())* structuredSectionElement+ (id::string())? ;
simpleSection ::= (title::string())? (author::string())* content::simpleText (id::string())? ;
listOfTerms ::= (title::string())? (author::string())* (term::(name::string() definition::simpleText))+ (id::string())? ;
--------------------slps::ldf-v15.1-xsd.bgf--------------------
simpleTextElement ::= (empty::ε) | (text::mixedType) | (figure::simpleFigure) | (table::simpleTable) | (list::simpleList) | (formula::(((math::anyMath) | (mfenced::anyMath) | (mtext::anyMath) | (msub::anyMath) | (msup::anyMath) | (mrow::anyMath) | (mi::anyMath) | (mo::anyMath) | (varepsilon::α))+)) | (sample::((α | string())* src::string())) | production ;
simpleTable ::= (header::tableRow)* (row::tableRow)+ ;
document ::= titlePage::titlePage (placeholder::generated)* frontMatter::(frontSection+) (lists::(frontList+))? (lexicalPart::(lexicalSection+))? (core::structuredSection)+ (annex::structuredSection)* ;
link ::= (text::string())? reference::string() ;
structuredSectionElement ::= (placeholder::generated) | normative | informative | production | (references::simpleList) | (section::simpleSection) | (subtopic::structuredSection) | (value::(key::string() data::string())) ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
titlePage ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
simpleFigure ::= caption::string() type::string() file::string() (id::string())? ;
structuredSection ::= title::string() (author::string())* structuredSectionElement+ (id::string())? ;
simpleSection ::= (title::string())? (author::string())* content::simpleText (id::string())? ;
listOfTerms ::= (title::string())? (author::string())* (term::(name::string() definition::simpleText))+ (id::string())? ;
--------------------slps::ldf-v16.0-xsd.bgf--------------------
simpleTextElement ::= (empty::ε) | (text::mixedType) | (figure::simpleFigure) | (table::simpleTable) | (list::simpleList) | (formula::(((math::anyMath) | (mfenced::anyMath) | (mtext::anyMath) | (msub::anyMath) | (msup::anyMath) | (mrow::anyMath) | (mi::anyMath) | (mo::anyMath) | (varepsilon::α))+)) | (sample::((α | string())* src::string())) | production ;
simpleTable ::= (header::tableRow)* (row::tableRow)+ ;
document ::= titlePage::titlePage frontMatter::(topSection*) (lists::(frontList+))? (lexicalPart::(lexicalSection+))? ((core::structuredSection)+) | ((part::((core::structuredSection)+))+) (backMatter::(topSection*))? (annex::structuredSection)* ;
link ::= (text::string())? reference::string() ;
structuredSectionElement ::= (placeholder::generated) | normative | informative | production | (references::simpleList) | (section::simpleSection) | (subtopic::structuredSection) | (value::(key::string() data::string())) ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
titlePage ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
simpleFigure ::= caption::string() type::string() file::string() (id::string())? ;
structuredSection ::= title::string() (author::string())* structuredSectionElement+ (id::string())? ;
simpleSection ::= (title::string())? (author::string())* content::simpleText (id::string())? ;
listOfTerms ::= (title::string())? (author::string())* (term::(name::string() definition::simpleText))+ (id::string())? ;
--------------------slps::ldf-v17.0-xsd.bgf--------------------
simpleTextElement ::= (empty::ε) | (text::mixedType) | (figure::simpleFigure) | (table::simpleTable) | (list::simpleList) | (formula::(((math::anyMath) | (mfenced::anyMath) | (mtext::anyMath) | (msub::anyMath) | (msup::anyMath) | (mrow::anyMath) | (mi::anyMath) | (mo::anyMath) | (varepsilon::α))+)) | (sample::((α | string())* src::string())) | production ;
simpleTable ::= (header::tableRow)* (row::tableRow)+ ;
document ::= titlePage::titlePage frontMatter::(topSection*) (lists::(frontList+))? (lexicalPart::(lexicalSection+))? ((core::structuredSection)+) | ((part::((core::structuredSection)+))+) (backMatter::(topSection*))? (annex::structuredSection)* ;
link ::= (text::string())? reference::string() ;
structuredSectionElement ::= (placeholder::generated) | normative | informative | production | (references::simpleList) | (section::simpleSection) | (subtopic::structuredSection) | (value::(key::string() data::string())) ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
titlePage ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
simpleFigure ::= (shortcaption::string())? caption::string() (source::(type::figureType (localfile::string()) | (url::string())))+ (id::string())? ;
structuredSection ::= title::string() (author::string())* structuredSectionElement+ (id::string())? ;
simpleSection ::= (title::string())? (author::string())* content::simpleText (id::string())? ;
listOfTerms ::= (title::string())? (author::string())* (term::(name::string() definition::simpleText))+ (id::string())? ;
--------------------slps::ldf-v18.0-xsd.bgf--------------------
simpleTextElement ::= (empty::ε) | (text::mixedType) | (figure::simpleFigure) | (table::simpleTable) | (list::simpleList) | (formula::(((math::anyMath) | (mfenced::anyMath) | (mtext::anyMath) | (msub::anyMath) | (msup::anyMath) | (mrow::anyMath) | (mi::anyMath) | (mo::anyMath) | (varepsilon::α))+)) | (sample::((α | string())* src::string())) | production ;
simpleTable ::= (header::tableRow)* (row::tableRow)+ ;
document ::= titlePage::titlePage frontMatter::(topSection*) (lists::(frontList+))? (lexicalPart::(lexicalSection+))? ((core::structuredSection)+) | ((part::((core::structuredSection)+))+) (backMatter::(topSection*))? (annex::structuredSection)* ;
link ::= (text::string())? reference::string() ;
structuredSectionElement ::= (placeholder::generated) | normative | informative | production | (references::simpleList) | (section::simpleSection) | (subtopic::structuredSection) | (value::(key::string() data::string())) ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
titlePage ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
simpleFigure ::= (shortcaption::string())? caption::string() (source::(type::figureType (localfile::string()) | (url::string())))+ (id::string())? ;
structuredSection ::= title::string() (author::string())* structuredSectionElement+ (id::string())? ;
simpleSection ::= (title::string())? (author::string())* content::simpleText (id::string())? ;
listOfTerms ::= (title::string())? (author::string())* (term::(name::string() definition::simpleText))+ (id::string())? ;
--------------------slps::ldf-v18.1-xsd.bgf--------------------
simpleTextElement ::= (empty::ε) | (text::mixedType) | (figure::simpleFigure) | (table::simpleTable) | (list::simpleList) | (formula::(((math::anyMath) | (mfenced::anyMath) | (mtext::anyMath) | (msub::anyMath) | (msup::anyMath) | (mrow::anyMath) | (mi::anyMath) | (mo::anyMath) | (varepsilon::α))+)) | (sample::((α | string())* src::string())) | production ;
simpleTable ::= (header::tableRow)* (row::tableRow)+ ;
document ::= titlePage::titlePage frontMatter::(topSection*) (lists::(frontList+))? (lexicalPart::(lexicalSection+))? ((core::structuredSection)+) | ((part::((core::structuredSection)+))+) (backMatter::(topSection*))? (annex::structuredSection)* ;
link ::= (text::string())? (reference::string()) | (external::string()) ;
structuredSectionElement ::= (placeholder::generated) | normative | informative | production | (references::simpleList) | (section::simpleSection) | (subtopic::structuredSection) | (value::(key::string() data::string())) ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
titlePage ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
simpleFigure ::= (shortcaption::string())? caption::string() (source::(type::figureType (localfile::string()) | (url::string())))+ (id::string())? ;
structuredSection ::= title::string() (author::string())* structuredSectionElement+ (id::string())? ;
simpleSection ::= (title::string())? (author::string())* content::simpleText (id::string())? ;
listOfTerms ::= (title::string())? (author::string())* (term::(name::string() definition::simpleText))+ (id::string())? ;
--------------------slps::ldf-v19.0-xsd.bgf--------------------
figure-metainfo ::= (short-caption::string())? caption::string() (id::string())? ;
text-element ::= (empty::ε) | (code::string()) | (text::mixed-type) | (figure::figure) | (table::table) | (list::list) | (formula::(((math::anyMath) | (mfenced::anyMath) | (mtext::anyMath) | (msub::anyMath) | (msup::anyMath) | (mrow::anyMath) | (mi::anyMath) | (mo::anyMath) | (varepsilon::α))+)) | (sample::((α | string())* source::string())) | production ;
lexical-section ::= lexical-section-metainfo::lexical-section-metainfo lexical-section-content::textual-content ;
document ::= document-metainfo::document-metainfo (part::part)+ ;
link ::= (text::string())? (reference::string()) | (external::string()) ;
structured-section-element ::= (subtopic::structured-section) | (references::list) | (placeholder::placeholder) | (value::(key::string() data::string())) | (element-role simple-section::simple-section) ;
structured-section-metainfo ::= title::string() (author::string())* (id::string())? ;
previous ::= title::string() (version::string()) | (edition::string()) (uri::string())? ;
list-section ::= list-section-metainfo::list-section-metainfo list-section-content::((term::term)+) ;
simple-section-metainfo ::= simple-section-role::simple-section-role (title::string())? (author::string())* (id::string())? ;
part ::= part-metainfo::part-metainfo section+ ;
table ::= (header::table-row)* (row::table-row)+ ;
part-metainfo ::= part-role::part-role (title::string())? (author::string())* (id::string())? ;
term ::= name::string() definition::textual-content ;
list-section-metainfo ::= list-section-role::list-section-role (title::string())? (author::string())* (id::string())? ;
simple-section ::= simple-section-metainfo::simple-section-metainfo simple-section-content::textual-content ;
structured-section ::= structured-section-metainfo::structured-section-metainfo structured-section-content::(structured-section-element+) ;
document-metainfo ::= (body::body number::string()) | ((author::string())+) topic::string() status::status (version::string()) | (edition::string()) (previous::previous)* date::string() ;
figure-source ::= type::figure-type (local-file::string()) | (uri::string()) ;
figure ::= figure-metainfo::figure-metainfo (figure-source::figure-source)+ ;
lexical-section-metainfo ::= lexical-section-role::lexical-section-role (title::string())? (author::string())* (id::string())? ;
--------------------slps::ldf-v2.0-xsd.bgf--------------------
sectionType ::= title::string() content::contentType ;
document ::= title::string() author::string() abstract::string() content::contentType ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? ;
contentType ::= ((text::mixedType) | (grammar::(α language::string() (version::string())?)) | (sample::sampleType) | (runnable::runnableType))* (section::sectionType)* ;
--------------------slps::ldf-v2.1-xsd.bgf--------------------
sectionType ::= title::string() content::contentType ;
document ::= title::string() author::string() abstract::string() content::contentType ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
contentType ::= ((text::mixedType) | (grammar::(α language::string() (version::string())?)) | (sample::sampleType) | (runnable::runnableType))* (section::sectionType)* ;
--------------------slps::ldf-v20.0-xsd.bgf--------------------
table ::= (header::table-row)* (row::table-row)+ ;
text-element ::= (empty::ε) | (code::string()) | (text::mixed-type) | figure | table | (list::list) | (formula::(((math::anyMath) | (mfenced::anyMath) | (mtext::anyMath) | (msub::anyMath) | (msup::anyMath) | (mrow::anyMath) | (mi::anyMath) | (mo::anyMath) | (varepsilon::α))+)) | (sample::((α | string())* source::string())) | production ;
term ::= name::string() definition::textual-content ;
lexical-section ::= role::lexical-section-role metainfo content::textual-content ;
document ::= title-page content::(part+) ;
link ::= (text::string())? (reference::string()) | (external::string()) ;
simple-section ::= role::simple-section-role metainfo content::textual-content ;
structured-section ::= metainfo content::(structured-section-element+) ;
structured-section-element ::= (subtopic::structured-section) | (references::list) | placeholder | (value::(key::string() data::string())) | ((normative-role | informative-role)? simple-section) ;
previous ::= title::string() (version::string()) | (edition::string()) (uri::string())? ;
list-section ::= role::list-section-role metainfo content::(term+) ;
figure-source ::= type::figure-type (local-file::string()) | (uri::string()) ;
figure ::= metainfo (source::figure-source)+ ;
title-page ::= (body number::string())? metainfo status (version::string()) | (edition::string()) previous* date::string() ;
metainfo ::= (id::string())? (title::string())? (author::string())* ;
part ::= role::part-role metainfo content::(section+) ;
--------------------slps::ldf-v20.1-xsd.bgf--------------------
table ::= (header::table-row)* (row::table-row)+ ;
text-element ::= (empty::ε) | (code::string()) | (text::mixed-type) | figure | table | (list::list) | (formula::(((math::anyMath) | (mfenced::anyMath) | (mtext::anyMath) | (msub::anyMath) | (msup::anyMath) | (mrow::anyMath) | (mi::anyMath) | (mo::anyMath) | (varepsilon::α))+)) | (sample::((α | string())* source::string())) | production ;
term ::= name::string() definition::textual-content ;
lexical-section ::= role::lexical-section-role metainfo content::textual-content ;
document ::= title-page content::(part+) ;
link ::= (text::string())? (reference::string()) | (external::string()) ;
simple-section ::= role::simple-section-role metainfo content::textual-content ;
structured-section ::= metainfo content::(structured-section-element+) ;
structured-section-element ::= (subtopic::structured-section) | (references::list) | placeholder | (value::(key::string() data::string())) | ((normative-role | informative-role)? simple-section) ;
previous ::= title::string() ((version::string()) | (edition::string()))? (uri::string())? ;
list-section ::= role::list-section-role metainfo content::(term+) ;
figure-source ::= type::figure-type (local-file::string()) | (uri::string()) ;
figure ::= metainfo (source::figure-source)+ ;
title-page ::= (body number::string())? metainfo status (version::string()) | (edition::string()) previous* date::string() ;
metainfo ::= (id::string())? (title::string())? (author::string())* ;
part ::= role::part-role metainfo content::(section+) ;
--------------------slps::ldf-v21.0-xsd.bgf--------------------
table ::= (header::table-row)* (row::table-row)+ ;
text-element ::= (empty::ε) | code | (text::mixed-type) | figure | table | (list::list) | (formula::(((math::anyMath) | (mfenced::anyMath) | (mtext::anyMath) | (msub::anyMath) | (msup::anyMath) | (mrow::anyMath) | (mi::anyMath) | (mo::anyMath) | (varepsilon::α))+)) | (sample::((α | string())* source::string())) | production ;
term ::= name::string() definition::textual-content ;
lexical-section ::= role::lexical-section-role metainfo content::textual-content ;
document ::= title-page content::(part+) ;
link ::= (text::string())? (reference::string()) | (external::string()) ;
simple-section ::= role::simple-section-role metainfo content::textual-content ;
structured-section ::= metainfo content::(structured-section-element+) ;
structured-section-element ::= (subtopic::structured-section) | (references::list) | placeholder | (value::(key::string() data::string())) | ((normative-role | informative-role)? simple-section) ;
previous ::= title::string() ((version::string()) | (edition::string()))? (uri::string())? ;
list-section ::= role::list-section-role metainfo content::(term+) ;
figure-source ::= type::figure-type (local-file::string()) | (uri::string()) ;
figure ::= metainfo (source::figure-source)+ ;
title-page ::= (body number::string())? metainfo status (version::string()) | (edition::string()) previous* date::string() ;
metainfo ::= (id::string())? (title::string())? (author::string())* ;
part ::= role::part-role metainfo content::(section+) ;
--------------------slps::ldf-v21.1-xsd.bgf--------------------
table ::= (header::table-row)* (row::table-row)+ ;
text-element ::= (empty::ε) | code | (text::mixed-type) | figure | table | (list::list) | (formula::(((math::anyMath) | (mfenced::anyMath) | (mtext::anyMath) | (msub::anyMath) | (msup::anyMath) | (mrow::anyMath) | (mi::anyMath) | (mo::anyMath) | (varepsilon::α))+)) | (sample::((α | string())* source::string())) ;
term ::= name::string() definition::textual-content ;
lexical-section ::= role::lexical-section-role metainfo content::textual-content ;
document ::= title-page content::(part+) ;
link ::= (text::string())? (reference::string()) | (external::string()) ;
simple-section ::= role::simple-section-role metainfo content::textual-content ;
structured-section ::= metainfo content::(structured-section-element+) ;
structured-section-element ::= (subtopic::structured-section) | (references::list) | placeholder | (value::(key::string() data::string())) | ((normative-role | informative-role)? simple-section) ;
previous ::= title::string() ((version::string()) | (edition::string()))? (uri::string())? ;
list-section ::= role::list-section-role metainfo content::(term+) ;
figure-source ::= type::figure-type (local-file::string()) | (uri::string()) ;
figure ::= metainfo (source::figure-source)+ ;
title-page ::= (body number::string())? metainfo status (version::string()) | (edition::string()) previous* date::string() ;
metainfo ::= (id::string())? (title::string())? (author::string())* ;
part ::= role::part-role metainfo content::(section+) ;
--------------------slps::ldf-v22.0-xsd.bgf--------------------
text-element ::= (empty::ε) | code | (text::mixed-type) | figure | table | (list::list-type) | (formula::(((math::anyMath) | (mfenced::anyMath) | (mtext::anyMath) | (msub::anyMath) | (msup::anyMath) | (mrow::anyMath) | (mi::anyMath) | (mo::anyMath) | (varepsilon::α))+)) | (sample::((α | string())* source::string())) ;
lexical-section ::= role::lexical-section-role metainfo content::textual-content ;
document ::= metadata::((body::((ansi::ε) | (ecma::ε) | (ieee::ε) | (iso::ε) | (iso/iet::ε) | (itu::ε) | (iec::ε) | (ietf::ε) | (oasis::ε) | (omg::ε) | (wsa::ε) | (w3c::ε)))? (number::string())? (author::person)* topic::string() status::((unknown::ε) | (draft::ε) | (candidate::ε) | (proposed::ε) | (approved::ε) | (revised::ε) | (obsolete::ε) | (withdrawn::ε) | (collection::ε) | (trial::ε) | (errata::ε) | (report::ε)) (version::string()) | (edition::string()) (previous::title-ve-uri)* date::string()) (part::part-type)+ ;
link ::= (text::string())? (nonterminal::string()) | (reference::string()) | (external::string()) ;
structured-section-element ::= (subtopic::structured-section) | (references::list-type) | placeholder | (value::(key::string() data::string())) | ((normative-role | informative-role)? simple-section) ;
list-section ::= role::list-section-role metainfo content::(term+) ;
person ::= name::string() (affiliation::string())? (email::string())? ;
part-type ::= metadata::((id::string())? role::((front-matter::ε) | (core-part::ε) | (back-matter::ε) | (annex::ε)) (title::string())? (author::person)*) (section::section-type)+ ;
metainfo ::= (id::string())? (title::string())? (author::string())* ;
table ::= (header::table-row)* (row::table-row)+ ;
term ::= name::string() definition::textual-content ;
simple-section ::= metainfo content::textual-content ;
structured-section ::= metainfo content::(structured-section-element+) ;
figure ::= metainfo (source::figure-source)+ ;
figure-source ::= type::figure-type (local-file::string()) | (uri::string()) ;
title-ve-uri ::= title::string() ((version::string()) | (edition::string()))? (uri::string())? ;
subsection-type ::= metadata::((id::string())? role::((synopsis::ε) | (description::ε) | (syntax::ε) | (constraints::ε) | (relationship::ε) | (semantics::ε) | (default::ε) | (rationale::ε) | (example::ε) | (update::ε) | (subtopic::ε) | (section::ε)) (type::((normative::ε) | (informative::ε)))? (title::string())? (author::person)*) (content::(content-content+)) | (placeholder::α) | ((subsection::subsection-type)+) ;
section-type ::= metadata::((id::string())? role::((abstract::ε) | (conformance::ε) | (compatibility::ε) | (design-goals::ε) | (document-structure::ε) | (foreword::ε) | (references::ε) | (notation::ε) | (scope::ε) | (what-is-new::ε) | (index::ε) | (full-grammar::ε) | (list-of-tables::ε) | (list-of-authors::ε) | (list-of-contents::ε) | (list-of-references::ε) | (top-section::ε) | (lexical-section::ε) | (description::ε) | (syntax::ε) | (example::ε) | (subsection::ε)) (type::((normative::ε) | (informative::ε)))? (title::string())? (author::person)*) (content::(content-content+)) | (placeholder::α) | ((subsection::subsection-type)+) ;
--------------------slps::ldf-v23.0-xsd.bgf--------------------
text-element ::= (empty::ε) | code | (text::mixed-type) | figure | table | (list::list-type) | (formula::(((math::anyMath) | (mfenced::anyMath) | (mtext::anyMath) | (msub::anyMath) | (msup::anyMath) | (mrow::anyMath) | (mi::anyMath) | (mo::anyMath) | (varepsilon::α))+)) | (sample::((α | string())* source::string())) ;
lexical-section ::= role::lexical-section-role metainfo content::textual-content ;
document ::= metadata::((body::((ansi::ε) | (ecma::ε) | (ieee::ε) | (iso::ε) | (iso/iet::ε) | (itu::ε) | (iec::ε) | (ietf::ε) | (oasis::ε) | (omg::ε) | (wsa::ε) | (w3c::ε)))? (number::string())? (author::person)* topic::string() status::((unknown::ε) | (draft::ε) | (candidate::ε) | (proposed::ε) | (approved::ε) | (revised::ε) | (obsolete::ε) | (withdrawn::ε) | (collection::ε) | (trial::ε) | (errata::ε) | (report::ε)) (version::string()) | (edition::string()) (previous::named-link)* date::string()) (part::part-type)+ ;
link ::= (text::string())? (nonterminal::string()) | (reference::string()) | (external::string()) ;
structured-section-element ::= (subtopic::structured-section) | (references::list-type) | placeholder | (value::(key::string() data::string())) | ((normative-role | informative-role)? simple-section) ;
list-section ::= role::list-section-role metainfo content::(term+) ;
person ::= name::string() (affiliation::string())? (email::string())? ;
part-type ::= metadata::((id::string())? role::((front-matter::ε) | (core-part::ε) | (back-matter::ε) | (annex::ε)) (title::string())? (author::person)*) (section::section-type)+ ;
metainfo ::= (id::string())? (title::string())? (author::string())* ;
table ::= (header::table-row)* (row::table-row)+ ;
named-link ::= title::string() ((version::string()) | (edition::string()))? (uri::string())? ;
term ::= name::string() definition::textual-content ;
simple-section ::= metainfo content::textual-content ;
structured-section ::= metainfo content::(structured-section-element+) ;
figure ::= metainfo (source::figure-source)+ ;
figure-source ::= type::figure-type (local-file::string()) | (uri::string()) ;
subsection-type ::= metadata::((id::string())? role::((synopsis::ε) | (description::ε) | (syntax::ε) | (constraints::ε) | (relationship::ε) | (semantics::ε) | (default::ε) | (rationale::ε) | (example::ε) | (update::ε) | (subtopic::ε) | (section::ε)) (type::((normative::ε) | (informative::ε)))? (title::string())? (author::person)*) (content::(content-content+)) | (placeholder::α) | ((subsection::subsection-type)+) ;
section-type ::= metadata::((id::string())? role::((abstract::ε) | (conformance::ε) | (compatibility::ε) | (design-goals::ε) | (document-structure::ε) | (foreword::ε) | (references::ε) | (notation::ε) | (scope::ε) | (what-is-new::ε) | (index::ε) | (full-grammar::ε) | (list-of-tables::ε) | (list-of-authors::ε) | (list-of-contents::ε) | (list-of-references::ε) | (top-section::ε) | (lexical-section::ε)) (type::((normative::ε) | (informative::ε)))? (title::string())? (author::person)*) (content::(content-content+)) | (placeholder::α) | ((subsection::subsection-type)+) ;
--------------------slps::ldf-v3.0-xsd.bgf--------------------
document ::= title::title (placeholder::generated)* frontMatter::frontMatter (languageOverview::ListOfTerms)? (lexicalSection::LexicalSection)+ top-section+ (annex::TopSection)* ;
frontMatter ::= foreword::SimpleText designGoals::SimpleList top-section+ normativeReferences::SimpleList (definitions::ListOfTerms)? (abbreviations::ListOfTerms)? documentStructure::TopSection whatsnew::SimpleList ;
title ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
ListOfInternalLinks ::= (link::(text::string() reference::string()))+ ;
SimpleSection ::= (id::string())? (title::string())? ((author::string())+)? content::SimpleText ;
ListOfTerms ::= (term::(name::string() definition::SimpleText))+ ;
LexicalSection ::= id::string() type::lexical title::string() ((author::string())+)? ((placeholder::generated) | normative | informative | production | (relationship::ListOfInternalLinks) | (subtopic::TopSection))+ ;
TopSection ::= id::string() title::string() ((author::string())+)? ((placeholder::generated) | normative | informative | production | (relationship::ListOfInternalLinks) | (subtopic::TopSection))+ ;
--------------------slps::ldf-v4.0-xsd.bgf--------------------
document ::= title::title (placeholder::generated)* frontMatter::frontMatter (languageOverview::ListOfTerms)? lexical+ (core::StructuredSection)+ (annex::StructuredSection)* ;
frontMatter ::= foreword::SimpleText designGoals::SimpleList top-section+ normativeReferences::SimpleList (definitions::ListOfTerms)? (abbreviations::ListOfTerms)? documentStructure::SimpleSection whatsnew::SimpleList ;
title ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
ListOfInternalLinks ::= (link::(text::string() reference::string()))+ ;
StructuredSection ::= id::string() title::string() ((author::string())+)? ((placeholder::generated) | normative | informative | lexical | production | (relationship::ListOfInternalLinks) | (subtopic::StructuredSection))+ ;
SimpleSection ::= (id::string())? (title::string())? ((author::string())+)? content::SimpleText ;
ListOfTerms ::= (term::(name::string() definition::SimpleText))+ ;
--------------------slps::ldf-v5.0-xsd.bgf--------------------
document ::= title::title (placeholder::generated)* frontMatter::frontMatter lists::frontLists lexicalPart::lexical (core::StructuredSection)+ (annex::StructuredSection)* ;
title ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
ListOfInternalLinks ::= (link::(text::string() reference::string()))+ ;
StructuredSection ::= id::string() title::string() ((author::string())+)? ((placeholder::generated) | normative | informative | lexicals | production | (relationship::ListOfInternalLinks) | (subtopic::StructuredSection))+ ;
SimpleSection ::= (id::string())? (title::string())? ((author::string())+)? content::SimpleText ;
ListOfTerms ::= (id::string())? (title::string())? ((author::string())+)? (term::(name::string() definition::SimpleText))+ ;
--------------------slps::ldf-v6.0-xsd.bgf--------------------
document ::= title::titlePage (placeholder::generated)* frontMatter::frontMatter lists::frontLists lexicalPart::lexical (core::StructuredSection)+ (annex::StructuredSection)* ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
titlePage ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
ListOfInternalLinks ::= (link::(text::string() (linktext::string())? reference::string()))+ ;
StructuredSection ::= (id::string())? title::string() ((author::string())+)? ((placeholder::generated) | normative | informative | production | (relationship::ListOfInternalLinks) | (subtopic::StructuredSection))+ ;
SimpleSection ::= (id::string())? (title::string())? ((author::string())+)? content::SimpleText ;
ListOfTerms ::= (id::string())? (title::string())? ((author::string())+)? (term::(name::string() definition::SimpleText))+ ;
--------------------slps::ldf-v7.0-xsd.bgf--------------------
document ::= titlePage::titlePage (placeholder::generated)* frontMatter::frontMatter (lists::frontLists)? (lexicalPart::lexical)? (core::StructuredSection)+ (annex::StructuredSection)* ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
titlePage ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
ListOfInternalLinks ::= (link::(text::string() (linktext::string())? reference::string()))+ ;
StructuredSection ::= (id::string())? title::string() ((author::string())+)? ((placeholder::generated) | normative | informative | production | (relationship::ListOfInternalLinks) | (subtopic::StructuredSection))+ ;
SimpleSection ::= (id::string())? (title::string())? ((author::string())+)? content::SimpleText ;
ListOfTerms ::= (id::string())? (title::string())? ((author::string())+)? (term::(name::string() definition::SimpleText))+ ;
--------------------slps::slps-btf.bgf--------------------
tree ::= (epsilon::ε) | (any::α) | (terminal::terminal) | (nonterminal::(production tree)) | (selectable::(selector::selector tree)) | (value::((int::integer()) | (string::string()))) | (sequence::(tree*)) | (choice::(expression tree)) | (optional::(tree?)) | (plus::(tree+)) | (star::(tree*)) ;
production ::= (label::label)? nonterminal::nonterminal expression ;
expression ::= (epsilon::ε) | (empty::ε) | (value::value) | (any::ε) | (terminal::terminal) | (nonterminal::nonterminal) | (selectable::(selector::selector expression)) | (marked::expression) | (sequence::(expression+)) | (choice::(expression+)) | (allof::(expression+)) | (not::expression) | (optional::expression) | (plus::expression) | (star::expression) | (seplistplus::(expression expression)) | (sepliststar::(expression expression)) ;
grammar ::= (root::nonterminal)* production* ;
root ::= grammar tree ;
--------------------slps::ldf-v7.1-xsd.bgf--------------------
document ::= titlePage::titlePage (placeholder::generated)* frontMatter::(front-simple-sections+) (lists::frontLists)? (lexicalPart::lexical)? (core::StructuredSection)+ (annex::StructuredSection)* ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
titlePage ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
ListOfInternalLinks ::= (link::(text::string() (linktext::string())? reference::string()))+ ;
StructuredSection ::= (id::string())? title::string() ((author::string())+)? ((placeholder::generated) | normative | informative | production | (relationship::ListOfInternalLinks) | (subtopic::StructuredSection))+ ;
SimpleSection ::= (id::string())? (title::string())? ((author::string())+)? content::SimpleText ;
ListOfTerms ::= (id::string())? (title::string())? ((author::string())+)? (term::(name::string() definition::SimpleText))+ ;
--------------------slps::ldf-v8.0-xsd.bgf--------------------
document ::= titlePage::titlePage (placeholder::generated)* frontMatter::(front-simple-section+) (lists::(front-list+))? (lexicalPart::(lexical+))? (core::StructuredSection)+ (annex::StructuredSection)* ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
titlePage ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
ListOfInternalLinks ::= (link::(text::string() (linktext::string())? reference::string()))+ ;
StructuredSection ::= (id::string())? title::string() ((author::string())+)? ((placeholder::generated) | normative | informative | production | (relationship::ListOfInternalLinks) | (subtopic::StructuredSection))+ ;
SimpleSection ::= (id::string())? (title::string())? ((author::string())+)? content::SimpleText ;
ListOfTerms ::= (id::string())? (title::string())? ((author::string())+)? (term::(name::string() definition::SimpleText))+ ;
--------------------slps::ldf-v8.1-xsd.bgf--------------------
document ::= titlePage::titlePage (placeholder::generated)* frontMatter::(front-simple-section+) (lists::(front-list+))? (lexicalPart::(lexical+))? (core::StructuredSection)+ (annex::StructuredSection)* ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
titlePage ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
ListOfInternalLinks ::= (link::(text::string() (linktext::string())? reference::string()))+ ;
StructuredSection ::= (id::string())? title::string() ((author::string())+)? ((placeholder::generated) | normative | informative | production | (relationship::ListOfInternalLinks) | (subtopic::StructuredSection))+ ;
SimpleSection ::= (id::string())? (title::string())? ((author::string())+)? content::SimpleText ;
ListOfTerms ::= (id::string())? (title::string())? ((author::string())+)? (term::(name::string() definition::SimpleText))+ ;
--------------------slps::ldf-v9.0-xsd.bgf--------------------
SimpleTable ::= (header::TableRow)* (row::TableRow)+ ;
document ::= titlePage::titlePage (placeholder::generated)* frontMatter::(front-simple-section+) (lists::(front-list+))? (lexicalPart::(lexical+))? (core::StructuredSection)+ (annex::StructuredSection)* ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
titlePage ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
ListOfInternalLinks ::= (link::(text::string() (linktext::string())? reference::string()))+ ;
StructuredSection ::= (id::string())? title::string() ((author::string())+)? ((placeholder::generated) | normative | informative | production | (relationship::ListOfInternalLinks) | (subtopic::StructuredSection))+ ;
SimpleSection ::= (id::string())? (title::string())? ((author::string())+)? content::SimpleText ;
ListOfTerms ::= (id::string())? (title::string())? ((author::string())+)? (term::(name::string() definition::SimpleText))+ ;
--------------------slps::ldf-v9.1-xsd.bgf--------------------
SimpleTable ::= (header::TableRow)* (row::TableRow)+ ;
document ::= titlePage::titlePage (placeholder::generated)* frontMatter::(front-simple-section+) (lists::(front-list+))? (lexicalPart::(lexical+))? (core::StructuredSection)+ (annex::StructuredSection)* ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
titlePage ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
ListOfInternalLinks ::= (link::(text::string() (linktext::string())? reference::string()))+ ;
StructuredSection ::= (id::string())? title::string() ((author::string())+)? ((placeholder::generated) | normative | informative | production | (relationship::ListOfInternalLinks) | (subtopic::StructuredSection))+ ;
SimpleSection ::= (id::string())? (title::string())? ((author::string())+)? content::SimpleText ;
ListOfTerms ::= (id::string())? (title::string())? ((author::string())+)? (term::(name::string() definition::SimpleText))+ ;
--------------------slps::slps-cbgf-adt.bgf--------------------
CBGFCommand ::= (abridge_detour::(p::BGFProduction)) | (abstractize_concretize::(p::BGFProduction)) | (addH_removeH::(p::BGFProduction)) | (addV_removeV::(p::BGFProduction)) | (anonymize_deanonymize::(p::BGFProduction)) | (appear_disapper::(p::BGFProduction)) | (chain_unchain::(p::BGFProduction)) | (clone_equate::(x::string() y::string() w::XBGFScope)) | (concatT_splitT::(y::string() xs::(string()*) w::XBGFScope)) | (concretize_abstractize::(p::BGFProduction)) | (deanonymize_anonymize::(p::BGFProduction)) | (define_undefine::(ps::(BGFProduction*))) | (designate_unlabel::(p::BGFProduction)) | (detour_abridge::(p::BGFProduction)) | (deyaccify_yaccify::(ps::(BGFProduction*))) | (disappear_appear::(p::BGFProduction)) | (downgrade_upgrade::(p1::BGFProduction p2::BGFProduction)) | (eliminate_introduce::(ps::(BGFProduction*))) | (equate_clone::(x::string() y::string() w::XBGFScope)) | (extract_inline::(p::BGFProduction w::XBGFScope)) | (factor_factor::(e1::BGFExpression e2::BGFExpression w::XBGFScope)) | (fold_unfold::(x::string() w::XBGFScope)) | (horizontal_vertical::(w::XBGFScope)) | (inject_project::(p::BGFProduction)) | (inline_extract::(p::BGFProduction w::XBGFScope)) | (introduce_eliminate::(ps::(BGFProduction*))) | (iterate_assoc::(p::BGFProduction)) | (assoc_iterate::(p::BGFProduction)) | (massage_massage::(e1::BGFExpression e2::BGFExpression w::XBGFScope)) | (narrow_widen::(e1::BGFExpression e2::BGFExpression w::XBGFScope)) | (permute_permute::(p1::BGFProduction p2::BGFProduction)) | (project_inject::(p::BGFProduction)) | (redefine_redefine::(ps1::(BGFProduction*) ps2::(BGFProduction*))) | (removeH_addH::(p::BGFProduction)) | (removeV_addV::(p::BGFProduction)) | (renameL_renameL::(x::string() y::string())) | (renameN_renameN::(x::string() y::string())) | (renameS_renameS::(x::string() y::string() w::XBGFScope)) | (renameT_renameT::(x::string() y::string())) | (replace_replace::(e1::BGFExpression e2::BGFExpression w::XBGFScope)) | (reroot_reroot::(xs1::(string()*) xs2::(string()*))) | (splitN_unite::(x::string() ps::(BGFProduction*) w::XBGFScope)) | (splitT_concatT::(x::string() ys::(string()*) w::XBGFScope)) | (unchain_chain::(p::BGFProduction)) | (undefine_define::(ps::(BGFProduction*))) | (unfold_fold::(x::string() w::XBGFScope)) | (unite_splitN::(x::string() ps::(BGFProduction*) w::XBGFScope)) | (unlabel_designate::(p::BGFProduction)) | (upgrade_downgrade::(p1::BGFProduction p2::BGFProduction)) | (vertical_horizontal::(w::XBGFScope)) | (widen_narrow::(e1::BGFExpression e2::BGFExpression w::XBGFScope)) | (yaccify_deyaccify::(ps::(BGFProduction*))) ;
--------------------slps::slps-cbgf-xsd.bgf--------------------
rename ::= (label::(from::label to::label)) | (nonterminal::(from::nonterminal to::nonterminal)) | (selector::((in::label)? from::selector to::selector)) | (terminal::(from::terminal to::terminal)) ;
widen ::= expression expression (in::scope)? ;
define ::= production+ tag::string() ;
splitT ::= terminal::terminal into::((terminal::terminal)+) (in::scope)? ;
equate-clone ::= align::(production+) with::nonterminal in::(scope+) ;
production ::= (label::label)? nonterminal::nonterminal expression ;
 production ::= (label::label)? nonterminal::nonterminal expression ;
downgrade ::= production production ;
replace ::= expression expression (in::scope)? tag::string() ;
redefine ::= production+ tag::string() ;
split-unite ::= add::(production+) to::(production+) in::(scope+) ;
unite-split ::= add::(production+) to::(production+) in::(scope+) ;
rename-rename ::= (label::(from::label to::label)) | (nonterminal::(from::nonterminal to::nonterminal)) | (selector::((in::label)? from::selector to::selector)) | (terminal::(from::terminal to::terminal)) ;
widen-narrow ::= expression expression (in::scope)? ;
equate ::= align::nonterminal with::nonterminal ;
fold-unfold ::= nonterminal::nonterminal (in::scope)? ;
extract-inline ::= production (in::scope)? ;
unite ::= add::nonterminal to::nonterminal ;
permute-permute ::= production production ;
upgrade ::= production production ;
narrow ::= expression expression (in::scope)? ;
replace-replace ::= expression expression (in::scope)? tag::string() ;
split ::= nonterminal::nonterminal production+ scope* ;
unfold ::= nonterminal::nonterminal (in::scope)? ;
clone-equate ::= align::(production+) with::nonterminal in::(scope+) ;
project ::= production tag::string() ;
expression ::= (epsilon::ε) | (empty::ε) | (value::value) | (any::ε) | (terminal::terminal) | (nonterminal::nonterminal) | (selectable::(selector::selector expression)) | (marked::expression) | (sequence::(expression+)) | (choice::(expression+)) | (allof::(expression+)) | (not::expression) | (optional::expression) | (plus::expression) | (star::expression) | (seplistplus::(expression expression)) | (sepliststar::(expression expression)) ;
 expression ::= (epsilon::ε) | (empty::ε) | (value::value) | (any::ε) | (terminal::terminal) | (nonterminal::nonterminal) | (selectable::(selector::selector expression)) | (marked::expression) | (sequence::(expression+)) | (choice::(expression+)) | (allof::(expression+)) | (not::expression) | (optional::expression) | (plus::expression) | (star::expression) | (seplistplus::(expression expression)) | (sepliststar::(expression expression)) ;
undefine ::= (nonterminal::nonterminal)+ tag::string() ;
unfold-fold ::= nonterminal::nonterminal (in::scope)? ;
inject ::= production tag::string() ;
factor ::= expression expression (in::scope)? ;
reroot-reroot ::= from::roots to::roots ;
factor-factor ::= expression expression (in::scope)? ;
inline-extract ::= production (in::scope)? ;
massage ::= expression expression (in::scope)? ;
narrow-widen ::= expression expression (in::scope)? ;
massage-massage ::= expression expression (in::scope)? ;
downgrade-upgrade ::= production production ;
upgrade-downgrade ::= production production ;
iterate-assoc ::= production production ;
assoc-iterate ::= production production ;
extract ::= production (in::scope)? ;
fold ::= nonterminal::nonterminal (in::scope)? ;
--------------------slps::slps-edd.bgf--------------------
config ::= ((start-grammar-symbol::string()) | (end-grammar-symbol::string()) | (line-continuation-symbol::string()) | (tabulation-symbol::string()) | (start-label-symbol::string()) | (end-label-symbol::string()) | (defining-symbol::string()) | (multiple-defining-symbol::string()) | (terminator-symbol::string()) | (definition-separator-symbol::string()) | (concatenate-symbol::string()) | (start-comment-symbol::string()) | (end-comment-symbol::string()) | (start-group-symbol::string()) | (end-group-symbol::string()) | (start-option-symbol::string()) | (end-option-symbol::string()) | (start-terminal-symbol::string()) | (end-terminal-symbol::string()) | (start-nonterminal-symbol::string()) | (end-nonterminal-symbol::string()) | (start-seplist-star-symbol::string()) | (end-seplist-star-symbol::string()) | (start-seplist-plus-symbol::string()) | (end-seplist-plus-symbol::string()) | (start-repetition-star-symbol::string()) | (end-repetition-star-symbol::string()) | (start-repetition-plus-symbol::string()) | (end-repetition-plus-symbol::string()) | (postfix-option-symbol::string()) | (postfix-repetition-star-symbol::string()) | (postfix-repetition-plus-symbol::string()) | (nonterminals-may-start-with::string()) | (nonterminals-may-contain::string()) | (nonterminal-if-contains::string()) | (terminal-if-undefined::((except::string())*)) | (nonterminal-if-defined::((except::string())*)) | (decompose-symbols::((except::string())*)) | (terminal-if-uppercase::α) | (terminal-if-lowercase::α) | (terminal-if-mixedcase::α) | (terminal-if-camelcase::α) | (nonterminal-if-uppercase::α) | (nonterminal-if-lowercase::α) | (nonterminal-if-mixedcase::α) | (nonterminal-if-camelcase::α) | (glue-nonalphanumeric-terminals::α) | (break-tokens-at-whitespace::α) | (disregard-labels::α) | (consider-indentation::α) | (ignore::(((newline::α) | (space::α) | (same-indentation::α) | (lines-containing::string()))+)) | (mask::(token::string() (terminal::string()) | (epsilon::α))))* ;
--------------------slps::slps-lcf.bgf--------------------
derived ::= from::string() using::string() ;
source ::= name::string() derived? source-grammar source-tree? test-set::(xstring*) ;
tools ::= transformer::tool comparator::tool (validator::tool)? generator* ;
tool ::= grammar::xstring (tree::xstring)? ;
automated-transformation ::= method::string() result::string() ;
shortcut ::= name::string() expansion::xstring ;
source-grammar ::= extraction::xstring (parsing::xstring)? (evaluation::xstring)? ;
generator ::= name::string() command::xstring ;
branch ::= input::string() (preparation::phase)? (nominal-matching::phase)? (normalizing::phase)? (structural-matching::phase)? ((extension::phase) | (correction::phase) | (relaxation::phase))* ;
target ::= name::string() branch+ ;
source-tree ::= extraction::xstring (evaluation::xstring)? ;
testset ::= name::string() command::xstring ;
scenario ::= shortcut* tools source+ target+ testset* ;
--------------------slps::slps-xbgf-adt.bgf--------------------
XBGFScope ::= (globally::ε) | (nowhere::ε) | (inlabel::(l::string())) | (notinlabel::(l::string())) | (innt::(x::string())) | (notinnt::(x::string())) | (comboscope::(w1::XBGFScope w2::XBGFScope)) ;
XBGFCommand ::= (abridge::(p::BGFProduction)) | (abstractize::(p::BGFProduction)) | (addH::(p::BGFProduction)) | (addV::(p::BGFProduction)) | (addC::(p::BGFProduction)) | (anonymize::(p::BGFProduction)) | (appear::(p::BGFProduction)) | (bypass::ε) | (chain::(p::BGFProduction)) | (clone::(x::string() y::string() w::XBGFScope)) | (concatT::(xs::(string()*) y::string() w::XBGFScope)) | (concretize::(p::BGFProduction)) | (deanonymize::(p::BGFProduction)) | (define::(ps::(BGFProduction*))) | (designate::(p::BGFProduction)) | (detour::(p::BGFProduction)) | (deyaccify::(x::string())) | (disappear::(p::BGFProduction)) | (distribute::(w::XBGFScope)) | (downgrade::(p1::BGFProduction p2::BGFProduction)) | (eliminate::(x::string())) | (equate::(x::string() y::string())) | (extract::(p::BGFProduction w::XBGFScope)) | (factor::(e1::BGFExpression e2::BGFExpression w::XBGFScope)) | (fold::(x::string() w::XBGFScope)) | (horizontal::(w::XBGFScope)) | (importG::(ps::(BGFProduction*))) | (inject::(p::BGFProduction)) | (inline::(x::string())) | (introduce::(ps::(BGFProduction*))) | (iterate::(p::BGFProduction)) | (lassoc::(p::BGFProduction)) | (massage::(e1::BGFExpression e2::BGFExpression w::XBGFScope)) | (narrow::(e1::BGFExpression e2::BGFExpression w::XBGFScope)) | (permute::(p::BGFProduction)) | (project::(p::BGFProduction)) | (rassoc::(p::BGFProduction)) | (redefine::(ps::(BGFProduction*))) | (removeH::(p::BGFProduction)) | (removeV::(p::BGFProduction)) | (renameL::(x::string() y::string())) | (renameN::(x::string() y::string())) | (renameS::(x::string() y::string() w::XBGFScope)) | (renameT::(x::string() y::string())) | (replace::(e1::BGFExpression e2::BGFExpression w::XBGFScope)) | (reroot::(xs::(string()*))) | (splitN::(x::string() ps::(BGFProduction*) w::XBGFScope)) | (splitT::(x::string() ys::(string()*) w::XBGFScope)) | (unchain::(p::BGFProduction)) | (undefine::(xs::(string()*))) | (unfold::(x::string() w::XBGFScope)) | (unite::(x::string() y::string())) | (unlabel::(x::string())) | (upgrade::(p1::BGFProduction p2::BGFProduction)) | (vertical::(w::XBGFScope)) | (widen::(e1::BGFExpression e2::BGFExpression w::XBGFScope)) | (yaccify::(ps::(BGFProduction*))) | (atomic::(steps::(XBGFCommand*))) | (strip::(a::string())) ;
--------------------slps::slps-xbgf-xsd.bgf--------------------
rename ::= (label::(from::label to::label)) | (nonterminal::(from::nonterminal to::nonterminal)) | (selector::((in::label)? from::selector to::selector)) | (terminal::(from::terminal to::terminal)) ;
upgrade ::= production production ;
widen ::= expression expression (in::scope)? ;
narrow ::= expression expression (in::scope)? ;
define ::= production+ tag::string() ;
split ::= nonterminal::nonterminal production+ scope* ;
splitT ::= terminal::terminal into::((terminal::terminal)+) (in::scope)? ;
unfold ::= nonterminal::nonterminal (in::scope)? ;
project ::= production tag::string() ;
production ::= (label::label)? nonterminal::nonterminal expression ;
expression ::= (epsilon::ε) | (empty::ε) | (value::value) | (any::ε) | (terminal::terminal) | (nonterminal::nonterminal) | (selectable::(selector::selector expression)) | (marked::expression) | (sequence::(expression+)) | (choice::(expression+)) | (allof::(expression+)) | (not::expression) | (optional::expression) | (plus::expression) | (star::expression) | (seplistplus::(expression expression)) | (sepliststar::(expression expression)) ;
downgrade ::= production production ;
replace ::= expression expression (in::scope)? tag::string() ;
undefine ::= (nonterminal::nonterminal)+ tag::string() ;
inject ::= production tag::string() ;
factor ::= expression expression (in::scope)? ;
redefine ::= production+ tag::string() ;
massage ::= expression expression (in::scope)? ;
equate ::= align::nonterminal with::nonterminal ;
unite ::= add::nonterminal to::nonterminal ;
extract ::= production (in::scope)? ;
fold ::= nonterminal::nonterminal (in::scope)? ;
--------------------slps::slps-xedd.bgf--------------------
introduce ::= metasymbol::confixMetasymbols start::string() end::string() ;
rename ::= metasymbol::metasymbols from::string() to::string() ;
--------------------slps::slps-xldf.bgf--------------------
combine ::= section::string() with::string() ;
rename ::= (label::(from::label to::label)) | (nonterminal::(from::nonterminal to::nonterminal)) | (selector::((in::label)? from::selector to::selector)) | (terminal::(from::terminal to::terminal)) ;
widen ::= expression expression (in::scope)? ;
define ::= production+ tag::string() ;
splitT ::= terminal::terminal into::((terminal::terminal)+) (in::scope)? ;
production ::= (label::label)? nonterminal::nonterminal expression ;
 production ::= (label::label)? nonterminal::nonterminal expression ;
insert ::= relative content::simpleText ;
downgrade ::= production production ;
replace ::= expression expression (in::scope)? tag::string() ;
importSample ::= target::string() file::string() (prettyprinter::string())? ;
redefine ::= production+ tag::string() ;
equate ::= align::nonterminal with::nonterminal ;
addSubsection ::= topSection | (normative | informative to::string()) ;
addFigure ::= figure::simpleFigure to::string() ;
unite ::= add::nonterminal to::nonterminal ;
upgrade ::= production production ;
narrow ::= expression expression (in::scope)? ;
transformGrammar ::= target::string() transformation+ (context::string())* ;
split ::= nonterminal::nonterminal production+ scope* ;
unfold ::= nonterminal::nonterminal (in::scope)? ;
append ::= where::string() content::simpleText ;
project ::= production tag::string() ;
expression ::= (epsilon::ε) | (empty::ε) | (value::value) | (any::ε) | (terminal::terminal) | (nonterminal::nonterminal) | (selectable::(selector::selector expression)) | (marked::expression) | (sequence::(expression+)) | (choice::(expression+)) | (allof::(expression+)) | (not::expression) | (optional::expression) | (plus::expression) | (star::expression) | (seplistplus::(expression expression)) | (sepliststar::(expression expression)) ;
 expression ::= (epsilon::ε) | (empty::ε) | (value::value) | (any::ε) | (terminal::terminal) | (nonterminal::nonterminal) | (selectable::(selector::selector expression)) | (marked::expression) | (sequence::(expression+)) | (choice::(expression+)) | (allof::(expression+)) | (not::expression) | (optional::expression) | (plus::expression) | (star::expression) | (seplistplus::(expression expression)) | (sepliststar::(expression expression)) ;
hyperlinkify ::= goal::string() uri::string() ;
undefine ::= (nonterminal::nonterminal)+ tag::string() ;
inject ::= production tag::string() ;
factor ::= expression expression (in::scope)? ;
massage ::= expression expression (in::scope)? ;
place ::= section::string() inside::string() ;
changeRole ::= scope::string() from::sectionRole to::sectionRole ;
extractSubsection ::= from::string() content::simpleText title::string() id::string() (to::string())? (role::sectionRole)? ;
retitle ::= from::((id::string()) | (title::string())) to::string() ;
importGrammar ::= target::string() file::string() ;
extract ::= production (in::scope)? ;
fold ::= nonterminal::nonterminal (in::scope)? ;
removeSection ::= id::string() (from::string())? ;
--------------------slps::slps-xoutcome.bgf--------------------
XBGFOutcome ::= (ok::ε) | (problem::(msg::string())) | (problemXBGF::(msg::string() xbgf::XBGFCommand)) | (problemProd::(msg::string() p::BGFProduction)) | (problemProd2::(msg::string() p1::BGFProduction p2::BGFProduction)) | (problemPinProds::(msg::string() p::BGFProduction ps::(BGFProduction*))) | (problemProds::(msg::string() ps::(BGFProduction*))) | (problemProds2::(msg::string() ps1::(BGFProduction*) ps2::(BGFProduction*))) | (problemExpr::(msg::string() e::BGFExpression)) | (problemExpr2::(msg::string() e1::BGFExpression e2::BGFExpression)) | (problemStr::(msg::string() x::string())) | (problemStr2::(msg::string() x::string() y::string())) | (problemStrs::(msg::string() xs::(string()*))) | (problemScope::(msg::string() w::XBGFScope)) ;
XBGFResult ::= r::XBGFOutcome g::BGFGrammar ;
--------------------slps::xbgf-adt.bgf--------------------
XBGFScope ::= (globally::ε) | (nowhere::ε) | (inlabel::(l::string())) | (notinlabel::(l::string())) | (innt::(x::string())) | (notinnt::(x::string())) | (comboscope::(w1::XBGFScope w2::XBGFScope)) ;
XBGFCommand ::= (abridge::(p::BGFProduction)) | (abstractize::(p::BGFProduction)) | (addH::(p::BGFProduction)) | (addV::(p::BGFProduction)) | (addC::(p::BGFProduction)) | (anonymize::(p::BGFProduction)) | (appear::(p::BGFProduction)) | (bypass::ε) | (chain::(p::BGFProduction)) | (clone::(x::string() y::string() w::XBGFScope)) | (concatT::(xs::(string()*) y::string() w::XBGFScope)) | (concretize::(p::BGFProduction)) | (deanonymize::(p::BGFProduction)) | (define::(ps::(BGFProduction*))) | (designate::(p::BGFProduction)) | (detour::(p::BGFProduction)) | (deyaccify::(x::string())) | (disappear::(p::BGFProduction)) | (distribute::(w::XBGFScope)) | (downgrade::(p1::BGFProduction p2::BGFProduction)) | (eliminate::(x::string())) | (equate::(x::string() y::string())) | (extract::(p::BGFProduction w::XBGFScope)) | (factor::(e1::BGFExpression e2::BGFExpression w::XBGFScope)) | (fold::(x::string() w::XBGFScope)) | (horizontal::(w::XBGFScope)) | (importG::(ps::(BGFProduction*))) | (inject::(p::BGFProduction)) | (inline::(x::string())) | (introduce::(ps::(BGFProduction*))) | (iterate::(p::BGFProduction)) | (lassoc::(p::BGFProduction)) | (massage::(e1::BGFExpression e2::BGFExpression w::XBGFScope)) | (narrow::(e1::BGFExpression e2::BGFExpression w::XBGFScope)) | (permute::(p::BGFProduction)) | (project::(p::BGFProduction)) | (rassoc::(p::BGFProduction)) | (redefine::(ps::(BGFProduction*))) | (removeH::(p::BGFProduction)) | (removeV::(p::BGFProduction)) | (renameL::(x::string() y::string())) | (renameN::(x::string() y::string())) | (renameS::(x::string() y::string() w::XBGFScope)) | (renameT::(x::string() y::string())) | (replace::(e1::BGFExpression e2::BGFExpression w::XBGFScope)) | (reroot::(xs::(string()*))) | (splitN::(x::string() ps::(BGFProduction*) w::XBGFScope)) | (splitT::(x::string() ys::(string()*) w::XBGFScope)) | (unchain::(p::BGFProduction)) | (undefine::(xs::(string()*))) | (unfold::(x::string() w::XBGFScope)) | (unite::(x::string() y::string())) | (unlabel::(x::string())) | (upgrade::(p1::BGFProduction p2::BGFProduction)) | (vertical::(w::XBGFScope)) | (widen::(e1::BGFExpression e2::BGFExpression w::XBGFScope)) | (yaccify::(ps::(BGFProduction*))) | (atomic::(steps::(XBGFCommand*))) | (strip::(a::string())) ;
--------------------slps::xbgf-xsd.bgf--------------------
rename ::= (label::(from::label to::label)) | (nonterminal::(from::nonterminal to::nonterminal)) | (selector::((in::label)? from::selector to::selector)) | (terminal::(from::terminal to::terminal)) ;
upgrade ::= production production ;
widen ::= expression expression (in::scope)? ;
narrow ::= expression expression (in::scope)? ;
define ::= production+ tag::string() ;
split ::= nonterminal::nonterminal production+ scope* ;
splitT ::= terminal::terminal into::((terminal::terminal)+) (in::scope)? ;
unfold ::= nonterminal::nonterminal (in::scope)? ;
project ::= production tag::string() ;
production ::= (label::label)? nonterminal::nonterminal expression ;
expression ::= (epsilon::ε) | (empty::ε) | (value::value) | (any::ε) | (terminal::terminal) | (nonterminal::nonterminal) | (selectable::(selector::selector expression)) | (marked::expression) | (sequence::(expression+)) | (choice::(expression+)) | (allof::(expression+)) | (not::expression) | (optional::expression) | (plus::expression) | (star::expression) | (seplistplus::(expression expression)) | (sepliststar::(expression expression)) ;
downgrade ::= production production ;
replace ::= expression expression (in::scope)? tag::string() ;
undefine ::= (nonterminal::nonterminal)+ tag::string() ;
inject ::= production tag::string() ;
factor ::= expression expression (in::scope)? ;
redefine ::= production+ tag::string() ;
massage ::= expression expression (in::scope)? ;
equate ::= align::nonterminal with::nonterminal ;
unite ::= add::nonterminal to::nonterminal ;
extract ::= production (in::scope)? ;
fold ::= nonterminal::nonterminal (in::scope)? ;
--------------------slps::bgf-v4.1-adt.bgf--------------------
BGFProduction ::= production::(label::string() lhs::string() rhs::BGFExpression) ;
BGFExpression ::= (epsilon::ε) | (empty::ε) | (val::(v::BGFValue)) | (anything::ε) | (terminal::(t::string())) | (nonterminal::(t::string())) | (selectable::(selector::string() expr::BGFExpression)) | (sequence::(exprs::(BGFExpression*))) | (choice::(exprs::(BGFExpression*))) | (marked::(expr::BGFExpression)) | (optional::(expr::BGFExpression)) | (plus::(expr::BGFExpression)) | (star::(expr::BGFExpression)) | (starsepplus::(expr::BGFExpression sep::BGFExpression)) | (starsepstar::(expr::BGFExpression sep::BGFExpression)) ;
--------------------slps::bgf-v4.3-adt.bgf--------------------
BGFProduction ::= production::(label::string() lhs::string() rhs::BGFExpression) ;
BGFExpression ::= (epsilon::ε) | (empty::ε) | (val::(v::BGFValue)) | (anything::ε) | (terminal::(t::string())) | (nonterminal::(t::string())) | (selectable::(selector::string() expr::BGFExpression)) | (sequence::(exprs::BGFExprList)) | (choice::(exprs::BGFExprList)) | (marked::(expr::BGFExpression)) | (optional::(expr::BGFExpression)) | (plus::(expr::BGFExpression)) | (star::(expr::BGFExpression)) | (seplistplus::(expr::BGFExpression sep::BGFExpression)) | (sepliststar::(expr::BGFExpression sep::BGFExpression)) ;
BGFGrammar ::= grammar::(roots::(string()*) prods::BGFProdList) ;
--------------------slps::bgf-v5.3-adt.bgf--------------------
BGFProduction ::= production::(label::string() lhs::string() rhs::BGFExpression) ;
BGFExpression ::= (epsilon::ε) | (empty::ε) | (val::(v::BGFValue)) | (anything::ε) | (terminal::(t::string())) | (nonterminal::(t::string())) | (selectable::(selector::string() expr::BGFExpression)) | (sequence::(exprs::BGFExprList)) | (choice::(exprs::BGFExprList)) | (allof::(exprs::BGFExprList)) | (marked::(expr::BGFExpression)) | (optional::(expr::BGFExpression)) | (not::(expr::BGFExpression)) | (plus::(expr::BGFExpression)) | (star::(expr::BGFExpression)) | (seplistplus::(expr::BGFExpression sep::BGFExpression)) | (sepliststar::(expr::BGFExpression sep::BGFExpression)) ;
BGFGrammar ::= grammar::(roots::(string()*) prods::BGFProdList) ;
--------------------slps::bgf-v5.4-adt.bgf--------------------
BGFProduction ::= production::(label::string() lhs::string() rhs::BGFExpression) ;
BGFExpression ::= (epsilon::ε) | (empty::ε) | (val::(v::BGFValue)) | (anything::ε) | (terminal::(t::string())) | (nonterminal::(t::string())) | (selectable::(selector::string() expr::BGFExpression)) | (sequence::(exprs::BGFExprList)) | (choice::(exprs::BGFExprList)) | (allof::(exprs::BGFExprList)) | (marked::(expr::BGFExpression)) | (optional::(expr::BGFExpression)) | (not::(expr::BGFExpression)) | (plus::(expr::BGFExpression)) | (star::(expr::BGFExpression)) | (seplistplus::(expr::BGFExpression sep::BGFExpression)) | (sepliststar::(expr::BGFExpression sep::BGFExpression)) ;
BGFGrammar ::= grammar::(roots::(string()*) prods::BGFProdList) ;
SGrammar ::= roots::(string()*) prods::((string() BGFProdSet)*) ;
--------------------slps::xbgf-xoutcome.bgf--------------------
XBGFOutcome ::= (ok::ε) | (problem::(msg::string())) | (problemXBGF::(msg::string() xbgf::XBGFCommand)) | (problemProd::(msg::string() p::BGFProduction)) | (problemProd2::(msg::string() p1::BGFProduction p2::BGFProduction)) | (problemPinProds::(msg::string() p::BGFProduction ps::(BGFProduction*))) | (problemProds::(msg::string() ps::(BGFProduction*))) | (problemProds2::(msg::string() ps1::(BGFProduction*) ps2::(BGFProduction*))) | (problemExpr::(msg::string() e::BGFExpression)) | (problemExpr2::(msg::string() e1::BGFExpression e2::BGFExpression)) | (problemStr::(msg::string() x::string())) | (problemStr2::(msg::string() x::string() y::string())) | (problemStrs::(msg::string() xs::(string()*))) | (problemScope::(msg::string() w::XBGFScope)) ;
XBGFResult ::= r::XBGFOutcome g::BGFGrammar ;
--------------------develop::ant.bgf--------------------
ClassPath ::= refid::String (pathElement::PathElement)+ (fileset::FileSet)+ ;
Jar ::= jarfile::String basedir::String compress::String encoding::String manifest::String ;
FileList ::= dir::String files::String ;
Excludes ::= name::String ifCondition::String unless::String ;
Project ::= name::String basedir::String description::String default::Target path::Path (properties::Property)+ (taskdef::TaskDef)+ (targets::Target)+ ;
Filter ::= token::String value::String ;
PathElement ::= path::String location::String ;
Javadoc ::= sourcepath::String destdir::String packagenames::String defaultexcludes::String author::String version::String use::String windowtitle::String ;
Copy ::= file::String presservelastmodified::String tofile::String todir::String overwrite::String filtering::String flatten::String includeEmptyDirs::String fileset::FileSet filterset::FilterSet mapper::Mapper ;
ExcludesFile ::= name::String ifCondition::String unless::String ;
Exec ::= executable::String dir::String ;
Target ::= name::String description::String unless::String ifCondition::String (depends::Target)+ (tasks::Task)+ ;
Delete ::= file::String dir::String verbose::String quiet::String failonerror::String includeEmptyDirs::String includes::String includesfile::String excludes::String excludesfile::String defaultexcludes::String ;
Includes ::= name::String ifCondition::String unless::String ;
FilterSet ::= starttoken::String endtoken::String (filter::Filter)+ (filtersfile::FiltersFile)+ ;
Attribut ::= name::String value::String ;
IncludesFile ::= name::String ifCondition::String unless::String ;
FormatTstamp ::= property::String pattern::String offset::String unit::String locale::String ;
FileSet ::= dir::String (patternset::PatternSet)+ (include::Includes)+ (exclude::Excludes)+ ;
Echo ::= message::String file::String append::String ;
Path ::= id::String refid::String path::Path (pathElement::PathElement)+ (fileset::FileSet)+ ;
NewTask ::= taskName::TaskDef (attributes::Attribut)+ ;
Java ::= classname::String jar::String fork::String classPath::ClassPath ;
Javac ::= srcdir::String destdir::String debug::String fork::String optimize::String deprecation::String (inExcludes::InExcludes)+ classPath::ClassPath ;
Mapper ::= type::String classname::String classpath::String classpathref::String from::String to::String ;
TaskDef ::= name::String classname::String ;
--------------------develop::java-project.bgf--------------------
Type ::= (nestedType::Type)+ (ownedSuperType::Type)+ elementName::String member_kind::MEMBER_KIND (methods::Method)+ (fields::Field)+ ;
CompilationUnit ::= (importDeclaration::ImportDeclaration)+ (ownedType::Type)+ declaration::PackageDeclaration ;
ImportDeclaration ::= name::String ;
PackageDeclaration ::= name::String ;
Method ::= returnType::String (parametersName::String)+ (parametersType::String)+ ;
--------------------develop::make.bgf--------------------
Rule ::= (dependencies::Dependency)+ (shellLines::ShellLine)+ ;
Makefile ::= name::String comment::Comment (elements::Element)+ ;
ShellLine ::= command::String display::Boolean ruleShellLine::Rule ;
--------------------develop::bugzilla.bgf--------------------
LongDesc ::= isPrivate::Boolean who::String bug_when::String thetext::String ;
Keywords ::= value::String ;
Blocks ::= value::String ;
Dependson ::= value::String ;
Bug ::= bug_bugzillaRoot::BugzillaRoot error::ErrorType bug_id::String exporter::String urlbase::String bug_status::StatusType resolution::ResolutionType product::String priority::PriorityType version::String rep_platform::ReportedPlatformType assigned_to::String delta_ts::String component::String reporter::String target_milestone::String bug_severity::SeverityType creation_ts::String qa_contact::String status_whiteboard::String op_sys::OperatingSystemType bug_file_loc::String short_desc::String (keywords::Keywords)+ (dependson::Dependson)+ (blocks::Blocks)+ (cc::Cc)+ (long_desc::LongDesc)+ (attachment::Attachment)+ ;
Attachment ::= isObsolete::Boolean isPatch::Boolean isPrivate::Boolean id::String date::String desc::String type::String data::String ;
Cc ::= value::String ;
BugzillaRoot ::= version::String urlbase::String maintainer::String exporter::String (bugs::Bug)+ ;
--------------------pico::rascal.bgf--------------------
Statement ::= [cond] "if" cond::Expression "then" thenPart::({Statement ";"}*) "else" elsePart::({Statement ";"}*) "fi" ;
 Statement ::= [assign] var::Id ":=" val::Expression ;
 Statement ::= [cond] "if" cond::Expression "then" thenPart::({Statement ";"}*) "fi" ;
 Statement ::= [loop] "while" cond::Expression "do" body::({Statement ";"}*) "od" ;
Declarations ::= "declare" decls::({IdType ","}*) ";" ;
Expression ::= "(" e::Expression ")" ;
 Expression ::= [natcon] natcon::Natural ;
 Expression ::= [id] name::Id ;
 Expression ::= [strcon] string::String ;
 Expression ::= [concat] lhs::Expression "||" rhs::Expression ;
 Expression ::= [add] lhs::Expression "+" rhs::Expression ;
 Expression ::= [min] lhs::Expression "-" rhs::Expression ;
IdType ::= [idtype] id::Id ":" t::Type ;
Program ::= [program] "begin" decls::Declarations body::({Statement ";"}*) "end" ;
--------------------pico::sdf.bgf--------------------
STATEMENT ::= (PICO-ID ":=" EXP) | ("if" EXP "then" (STATEMENT (";" STATEMENT)*)? "else" (STATEMENT (";" STATEMENT)*)? "fi") | ("while" EXP "do" (STATEMENT (";" STATEMENT)*)? "od") ;
EXP ::= PICO-ID | NatCon | StrCon | (EXP "+" EXP) | (EXP "-" EXP) | (EXP "||" EXP) | ("(" EXP ")") ;
ID-TYPE ::= PICO-ID ":" TYPE ;
DECLS ::= "declare" (ID-TYPE ("," ID-TYPE)*)? ";" ;
PROGRAM ::= "begin" DECLS (STATEMENT (";" STATEMENT)*)? "end" ;
--------------------saf::abstract.bgf--------------------
Fighter ::= fighter::(name::string() specs::(Spec*)) ;
Spec ::= (attribute::(name::string() strength::integer())) | (behavior::(cond::Cond move::Action fight::Action)) ;
Cond ::= (const::(name::string())) | (and::(lhs::Cond rhs::Cond)) | (or::(lhs::Cond rhs::Cond)) ;
--------------------saf::concrete.bgf--------------------
Fighter ::= [fighter] name::Id "{" specs::(Spec*) "}" ;
Spec ::= [behavior] cond::Cond "[" move::Action fight::Action "]" ;
 Spec ::= [attribute] name::Id "=" strength::Number ;
Action ::= [action] Id ;
 Action ::= [choose] "choose" "(" actions::(Id*) ")" ;
Cond ::= [and] lhs::Cond "and" rhs::Cond ;
 Cond ::= [const] Id ;
 Cond ::= [or] lhs::Cond "or" rhs::Cond ;
