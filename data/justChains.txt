--------------------ada::kellogg.bgf--------------------
discrete_subtype_definition ::= range | subtype_ind ;
attribute_id ::= RANGE | DIGITS | DELTA | ACCESS | IDENTIFIER ;
range ::= range_dots | range_attrib_ref ;
enumeration_literal_specification ::= IDENTIFIER | CHARACTER_LITERAL ;
discrete_with_range ::= mark_with_constraint | range ;
range_or_mark ::= range | subtype_mark ;
discrete_range ::= range | subtype_ind ;
separate_or_abstract ::= SEPARATE | ABSTRACT ;
exception_choice ::= compound_name | OTHERS ;
choice ::= OTHERS | discrete_with_range | expression ;
--------------------ada::kempe.bgf--------------------
aggregate ::= record_aggregate | extension_aggregate | array_aggregate ;
numeric_literal ::= decimal_literal | based_literal ;
generic_formal_parameter_declaration ::= formal_object_declaration | formal_type_declaration | formal_subprogram_declaration | formal_package_declaration ;
defining_designator ::= defining_program_unit_name | defining_operator_symbol ;
enumeration_literal_specification ::= defining_identifier | defining_character_literal ;
library_unit_body ::= subprogram_body | package_body ;
type_definition ::= enumeration_type_definition | integer_type_definition | real_type_definition | array_type_definition | record_type_definition | access_type_definition | derived_type_definition ;
discrete_range ::= discrete_subtype_indication | range ;
integer_type_definition ::= signed_integer_type_definition | modular_type_definition ;
renaming_declaration ::= object_renaming_declaration | exception_renaming_declaration | package_renaming_declaration | subprogram_renaming_declaration | generic_renaming_declaration ;
type_declaration ::= full_type_declaration | incomplete_type_declaration | private_type_declaration | private_extension_declaration ;
delay_statement ::= delay_until_statement | delay_relative_statement ;
proper_body ::= subprogram_body | package_body | task_body | protected_body ;
select_statement ::= selective_accept | timed_entry_call | conditional_entry_call | asynchronous_select ;
body_stub ::= subprogram_body_stub | package_body_stub | task_body_stub | protected_body_stub ;
selector_name ::= identifier | character_literal | operator_symbol ;
select_alternative ::= accept_alternative | delay_alternative | terminate_alternative ;
basic_declaration ::= type_declaration | subtype_declaration | object_declaration | number_declaration | subprogram_declaration | abstract_subprogram_declaration | package_declaration | renaming_declaration | exception_declaration | generic_declaration | generic_instantiation ;
character ::= graphic_character | format_effector | other_control_function ;
formal_type_definition ::= formal_private_type_definition | formal_derived_type_definition | formal_discrete_type_definition | formal_signed_integer_type_definition | formal_modular_type_definition | formal_floating_point_definition | formal_ordinary_fixed_point_definition | formal_decimal_fixed_point_definition | formal_array_type_definition | formal_access_type_definition ;
declarative_item ::= basic_declarative_item | body ;
use_clause ::= use_package_clause | use_type_clause ;
protected_element_declaration ::= protected_operation_declaration | component_declaration ;
context_item ::= with_clause | use_clause ;
explicit_actual_parameter ::= expression | variable_name ;
simple_statement ::= null_statement | assignment_statement | exit_statement | goto_statement | procedure_call_statement | return_statement | entry_call_statement | requeue_statement | delay_statement | abort_statement | raise_statement | code_statement ;
body ::= proper_body | body_stub ;
representation_clause ::= attribute_definition_clause | enumeration_representation_clause | record_representation_clause | at_clause ;
direct_name ::= identifier | operator_symbol ;
ancestor_part ::= expression | subtype_mark ;
constraint ::= scalar_constraint | composite_constraint ;
access_type_definition ::= access_to_object_definition | access_to_subprogram_definition ;
protected_operation_item ::= subprogram_declaration | subprogram_body | entry_body | representation_clause ;
compound_statement ::= if_statement | case_statement | loop_statement | block_statement | accept_statement | select_statement ;
triggering_statement ::= entry_call_statement | delay_statement ;
array_aggregate ::= positional_array_aggregate | named_array_aggregate ;
basic_declarative_item ::= basic_declaration | representation_clause | use_clause ;
real_type_definition ::= floating_point_definition | fixed_point_definition ;
composite_constraint ::= index_constraint | discriminant_constraint ;
component_item ::= component_declaration | representation_clause ;
generic_declaration ::= generic_subprogram_declaration | generic_package_declaration ;
prefix ::= name | implicit_dereference ;
array_type_definition ::= unconstrained_array_definition | constrained_array_definition ;
graphic_character ::= identifier_letter | digit | space_character | special_character ;
protected_operation_declaration ::= subprogram_declaration | entry_declaration | representation_clause ;
discriminant_part ::= unknown_discriminant_part | known_discriminant_part ;
scalar_constraint ::= range_constraint | digits_constraint | delta_constraint ;
library_unit_renaming_declaration ::= package_renaming_declaration | generic_renaming_declaration | subprogram_renaming_declaration ;
task_item ::= entry_declaration | representation_clause ;
fixed_point_definition ::= ordinary_fixed_point_definition | decimal_fixed_point_definition ;
explicit_generic_actual_parameter ::= expression | variable_name | subprogram_name | entry_name | subtype_mark | package_instance_name ;
name ::= direct_name | explicit_dereference | indexed_component | slice | selected_component | attribute_reference | type_conversion | function_call | character_literal ;
letter_or_digit ::= identifier_letter | digit ;
library_unit_declaration ::= subprogram_declaration | package_declaration | generic_declaration | generic_instantiation ;
--------------------ada::laemmel-verhoef.bgf--------------------
aggregate ::= record_aggregate | extension_aggregate | array_aggregate ;
generic_formal_parameter_declaration ::= formal_object_declaration | formal_type_declaration | formal_subprogram_declaration | formal_package_declaration ;
defining_designator ::= defining_program_unit_name | defining_operator_symbol ;
enumeration_literal_specification ::= defining_identifier | defining_character_literal ;
library_unit_body ::= subprogram_body | package_body ;
type_definition ::= enumeration_type_definition | integer_type_definition | real_type_definition | array_type_definition | record_type_definition | access_type_definition | derived_type_definition ;
discrete_range ::= discrete_subtype_indication | range_definition ;
integer_type_definition ::= signed_integer_type_definition | modular_type_definition ;
renaming_declaration ::= object_renaming_declaration | exception_renaming_declaration | package_renaming_declaration | subprogram_renaming_declaration | generic_renaming_declaration ;
type_declaration ::= full_type_declaration | incomplete_type_declaration | private_type_declaration | private_extension_declaration ;
delay_statement ::= delay_until_statement | delay_relative_statement ;
proper_body ::= subprogram_body | package_body | task_body | protected_body ;
select_statement ::= selective_accept | timed_entry_call | conditional_entry_call | asynchronous_select ;
body_stub ::= subprogram_body_stub | package_body_stub | task_body_stub | protected_body_stub ;
selector_name ::= identifier | character_literal | operator_symbol ;
select_alternative ::= accept_alternative | delay_alternative | terminate_alternative ;
basic_declaration ::= type_declaration | subtype_declaration | object_declaration | number_declaration | subprogram_declaration | abstract_subprogram_declaration | package_declaration | renaming_declaration | exception_declaration | generic_declaration | generic_instantiation ;
formal_type_definition ::= formal_private_type_definition | formal_derived_type_definition | formal_discrete_type_definition | formal_signed_integer_type_definition | formal_modular_type_definition | formal_floating_point_definition | formal_ordinary_fixed_point_definition | formal_decimal_fixed_point_definition | formal_array_type_definition | formal_access_type_definition ;
declarative_item ::= basic_declarative_item | body ;
use_clause ::= use_package_clause | use_type_clause ;
protected_element_declaration ::= protected_operation_declaration | component_declaration ;
context_item ::= with_clause | use_clause ;
explicit_actual_parameter ::= expression | variable_name ;
simple_statement ::= null_statement | assignment_statement | exit_statement | goto_statement | procedure_call_statement | return_statement | entry_call_statement | requeue_statement | delay_statement | abort_statement | raise_statement | code_statement ;
body ::= proper_body | body_stub ;
representation_clause ::= attribute_definition_clause | enumeration_representation_clause | record_representation_clause | at_clause ;
direct_name ::= identifier | operator_symbol ;
ancestor_part ::= expression | subtype_mark ;
access_type_definition ::= access_to_object_definition | access_to_subprogram_definition ;
constraint ::= scalar_constraint | composite_constraint ;
protected_operation_item ::= subprogram_declaration | subprogram_body | entry_body | representation_clause ;
compound_statement ::= if_statement | case_statement | loop_statement | block_statement | accept_statement | select_statement ;
triggering_statement ::= entry_call_statement | delay_statement ;
array_aggregate ::= positional_array_aggregate | named_array_aggregate ;
basic_declarative_item ::= basic_declaration | representation_clause | use_clause ;
real_type_definition ::= floating_point_definition | fixed_point_definition ;
composite_constraint ::= index_constraint | discriminant_constraint ;
component_item ::= component_declaration | representation_clause ;
generic_declaration ::= generic_subprogram_declaration | generic_package_declaration ;
prefix ::= name | implicit_dereference ;
array_type_definition ::= unconstrained_array_definition | constrained_array_definition ;
protected_operation_declaration ::= subprogram_declaration | entry_declaration | representation_clause ;
discriminant_part ::= unknown_discriminant_part | known_discriminant_part ;
scalar_constraint ::= range_constraint | digits_constraint | delta_constraint ;
library_unit_renaming_declaration ::= package_renaming_declaration | generic_renaming_declaration | subprogram_renaming_declaration ;
task_item ::= entry_declaration | representation_clause ;
fixed_point_definition ::= ordinary_fixed_point_definition | decimal_fixed_point_definition ;
explicit_generic_actual_parameter ::= expression | variable_name | subprogram_name | entry_name | subtype_mark | package_instance_name ;
name ::= direct_name | explicit_dereference | indexed_component | slice | selected_component | attribute_reference | type_conversion | function_call | character_literal ;
library_unit_declaration ::= subprogram_declaration | package_declaration | generic_declaration | generic_instantiation ;
--------------------ada::lncs-2219.bgf--------------------
aggregate ::= record_aggregate | extension_aggregate | array_aggregate ;
discrete_subtype_definition ::= discrete_subtype_indication | range ;
numeric_literal ::= decimal_literal | based_literal ;
generic_formal_parameter_declaration ::= formal_object_declaration | formal_type_declaration | formal_subprogram_declaration | formal_package_declaration ;
defining_designator ::= defining_program_unit_name | defining_operator_symbol ;
enumeration_literal_specification ::= defining_identifier | defining_character_literal ;
library_unit_body ::= subprogram_body | package_body ;
type_definition ::= enumeration_type_definition | real_type_definition | record_type_definition | derived_type_definition | integer_type_definition | array_type_definition | access_type_definition ;
discrete_range ::= discrete_subtype_indication | range ;
integer_type_definition ::= signed_integer_type_definition | modular_type_definition ;
aspect_clause ::= attribute_definition_clause | enumeration_representation_clause | record_representation_clause | at_clause ;
renaming_declaration ::= object_renaming_declaration | exception_renaming_declaration | package_renaming_declaration | subprogram_renaming_declaration | generic_renaming_declaration ;
type_declaration ::= full_type_declaration | incomplete_type_declaration | private_type_declaration | private_extension_declaration ;
delay_statement ::= delay_until_statement | delay_relative_statement ;
proper_body ::= subprogram_body | package_body | task_body | protected_body ;
select_statement ::= selective_accept | timed_entry_call | conditional_entry_call | asynchronous_select ;
body_stub ::= subprogram_body_stub | package_body_stub | task_body_stub | protected_body_stub ;
selector_name ::= identifier | character_literal | operator_symbol ;
select_alternative ::= accept_alternative | delay_alternative | terminate_alternative ;
basic_declaration ::= type_declaration | object_declaration | subprogram_declaration | package_declaration | exception_declaration | generic_instantiation | subtype_declaration | number_declaration | abstract_subprogram_declaration | renaming_declaration | generic_declaration ;
character ::= graphic_character | format_effector | other_control_function ;
formal_type_definition ::= formal_private_type_definition | formal_derived_type_definition | formal_discrete_type_definition | formal_signed_integer_type_definition | formal_modular_type_definition | formal_floating_point_definition | formal_ordinary_fixed_point_definition | formal_decimal_fixed_point_definition | formal_array_type_definition | formal_access_type_definition ;
declarative_item ::= basic_declarative_item | body ;
use_clause ::= use_package_clause | use_type_clause ;
protected_element_declaration ::= protected_operation_declaration | component_declaration ;
context_item ::= with_clause | use_clause ;
explicit_actual_parameter ::= expression | variable_name ;
simple_statement ::= null_statement | assignment_statement | goto_statement | return_statement | requeue_statement | abort_statement | code_statement | exit_statement | procedure_call_statement | entry_call_statement | delay_statement | raise_statement ;
body ::= proper_body | body_stub ;
direct_name ::= identifier | operator_symbol ;
ancestor_part ::= expression | subtype_mark ;
constraint ::= scalar_constraint | composite_constraint ;
access_type_definition ::= access_to_object_definition | access_to_subprogram_definition ;
protected_operation_item ::= subprogram_declaration | subprogram_body | entry_body | aspect_clause ;
compound_statement ::= if_statement | loop_statement | accept_statement | case_statement | block_statement | select_statement ;
triggering_statement ::= entry_call_statement | delay_statement ;
array_aggregate ::= positional_array_aggregate | named_array_aggregate ;
basic_declarative_item ::= basic_declaration | aspect_clause | use_clause ;
real_type_definition ::= floating_point_definition | fixed_point_definition ;
composite_constraint ::= index_constraint | discriminant_constraint ;
component_item ::= component_declaration | aspect_clause ;
generic_declaration ::= generic_subprogram_declaration | generic_package_declaration ;
prefix ::= name | implicit_dereference ;
array_type_definition ::= unconstrained_array_definition | constrained_array_definition ;
graphic_character ::= identifier_letter | digit | space_character | special_character ;
protected_operation_declaration ::= subprogram_declaration | entry_declaration | aspect_clause ;
discriminant_part ::= unknown_discriminant_part | known_discriminant_part ;
scalar_constraint ::= range_constraint | digits_constraint | delta_constraint ;
library_unit_renaming_declaration ::= package_renaming_declaration | generic_renaming_declaration | subprogram_renaming_declaration ;
task_item ::= entry_declaration | aspect_clause ;
fixed_point_definition ::= ordinary_fixed_point_definition | decimal_fixed_point_definition ;
explicit_generic_actual_parameter ::= expression | variable_name | subprogram_name | entry_name | subtype_mark | package_instance_name ;
name ::= direct_name | indexed_component | selected_component | type_conversion | character_literal | explicit_dereference | slice | attribute_reference | function_call ;
letter_or_digit ::= identifier_letter | digit ;
library_unit_declaration ::= subprogram_declaration | package_declaration | generic_declaration | generic_instantiation ;
--------------------ada::lncs-4348.bgf--------------------
aggregate ::= record_aggregate | extension_aggregate | array_aggregate ;
discrete_subtype_definition ::= discrete_subtype_indication | range ;
numeric_literal ::= decimal_literal | based_literal ;
generic_formal_parameter_declaration ::= formal_object_declaration | formal_type_declaration | formal_subprogram_declaration | formal_package_declaration ;
procedure_or_entry_call ::= procedure_call_statement | entry_call_statement ;
defining_designator ::= defining_program_unit_name | defining_operator_symbol ;
enumeration_literal_specification ::= defining_identifier | defining_character_literal ;
library_unit_body ::= subprogram_body | package_body ;
type_definition ::= enumeration_type_definition | real_type_definition | record_type_definition | derived_type_definition | integer_type_definition | array_type_definition | access_type_definition | interface_type_definition ;
discrete_range ::= discrete_subtype_indication | range ;
integer_type_definition ::= signed_integer_type_definition | modular_type_definition ;
aspect_clause ::= attribute_definition_clause | enumeration_representation_clause | record_representation_clause | at_clause ;
renaming_declaration ::= object_renaming_declaration | exception_renaming_declaration | package_renaming_declaration | subprogram_renaming_declaration | generic_renaming_declaration ;
type_declaration ::= full_type_declaration | incomplete_type_declaration | private_type_declaration | private_extension_declaration ;
delay_statement ::= delay_until_statement | delay_relative_statement ;
proper_body ::= subprogram_body | package_body | task_body | protected_body ;
return_subtype_indication ::= subtype_indication | access_definition ;
identifier_extend ::= mark_non_spacing | mark_spacing_combining | number_decimal | punctuation_connector | other_format ;
select_statement ::= selective_accept | timed_entry_call | conditional_entry_call | asynchronous_select ;
body_stub ::= subprogram_body_stub | package_body_stub | task_body_stub | protected_body_stub ;
selector_name ::= identifier | character_literal | operator_symbol ;
select_alternative ::= accept_alternative | delay_alternative | terminate_alternative ;
basic_declaration ::= type_declaration | object_declaration | subprogram_declaration | null_procedure_declaration | renaming_declaration | generic_declaration | subtype_declaration | number_declaration | abstract_subprogram_declaration | package_declaration | exception_declaration | generic_instantiation ;
formal_type_definition ::= formal_private_type_definition | formal_derived_type_definition | formal_discrete_type_definition | formal_signed_integer_type_definition | formal_modular_type_definition | formal_floating_point_definition | formal_ordinary_fixed_point_definition | formal_decimal_fixed_point_definition | formal_array_type_definition | formal_access_type_definition | formal_interface_type_definition ;
declarative_item ::= basic_declarative_item | body ;
use_clause ::= use_package_clause | use_type_clause ;
restriction_parameter_argument ::= name | expression ;
protected_element_declaration ::= protected_operation_declaration | component_declaration ;
context_item ::= with_clause | use_clause ;
explicit_actual_parameter ::= expression | variable_name ;
simple_statement ::= null_statement | assignment_statement | goto_statement | simple_return_statement | requeue_statement | abort_statement | code_statement | exit_statement | procedure_call_statement | entry_call_statement | delay_statement | raise_statement ;
body ::= proper_body | body_stub ;
direct_name ::= identifier | operator_symbol ;
ancestor_part ::= expression | subtype_mark ;
constraint ::= scalar_constraint | composite_constraint ;
protected_operation_item ::= subprogram_declaration | subprogram_body | entry_body | aspect_clause ;
compound_statement ::= if_statement | loop_statement | extended_return_statement | accept_statement | case_statement | block_statement | select_statement ;
triggering_statement ::= procedure_or_entry_call | delay_statement ;
array_aggregate ::= positional_array_aggregate | named_array_aggregate ;
basic_declarative_item ::= basic_declaration | aspect_clause | use_clause ;
real_type_definition ::= floating_point_definition | fixed_point_definition ;
composite_constraint ::= index_constraint | discriminant_constraint ;
component_item ::= component_declaration | aspect_clause ;
generic_declaration ::= generic_subprogram_declaration | generic_package_declaration ;
prefix ::= name | implicit_dereference ;
array_type_definition ::= unconstrained_array_definition | constrained_array_definition ;
protected_operation_declaration ::= subprogram_declaration | entry_declaration | aspect_clause ;
discriminant_part ::= unknown_discriminant_part | known_discriminant_part ;
scalar_constraint ::= range_constraint | digits_constraint | delta_constraint ;
formal_subprogram_declaration ::= formal_concrete_subprogram_declaration | formal_abstract_subprogram_declaration ;
library_unit_renaming_declaration ::= package_renaming_declaration | generic_renaming_declaration | subprogram_renaming_declaration ;
task_item ::= entry_declaration | aspect_clause ;
fixed_point_definition ::= ordinary_fixed_point_definition | decimal_fixed_point_definition ;
identifier_start ::= letter_uppercase | letter_lowercase | letter_titlecase | letter_modifier | letter_other | number_letter ;
explicit_generic_actual_parameter ::= expression | variable_name | subprogram_name | entry_name | subtype_mark | package_instance_name ;
name ::= direct_name | indexed_component | selected_component | type_conversion | character_literal | explicit_dereference | slice | attribute_reference | function_call ;
with_clause ::= limited_with_clause | nonlimited_with_clause ;
subprogram_specification ::= procedure_specification | function_specification ;
library_unit_declaration ::= subprogram_declaration | package_declaration | generic_declaration | generic_instantiation ;
--------------------ada::cordy-hyaric.bgf--------------------
aggregate ::= record_aggregate | extension_aggregate | array_aggregate ;
discrete_subtype_definition ::= subtype_indication | range ;
numeric_literal ::= decimal_literal | based_literal ;
generic_formal_parameter_declaration ::= formal_object_declaration | formal_type_declaration | formal_subprogram_declaration | formal_package_declaration ;
procedure_or_entry_call ::= procedure_call_statement | entry_call_statement ;
defining_designator ::= defining_program_unit_name | defining_operator_symbol ;
enumeration_literal_specification ::= defining_identifier | defining_character_literal ;
library_unit_body ::= subprogram_body | package_body ;
type_definition ::= enumeration_type_definition | integer_type_definition | real_type_definition | array_type_definition | record_type_definition | access_type_definition | derived_type_definition | interface_type_definition ;
discrete_range ::= subtype_indication | range ;
integer_type_definition ::= signed_integer_type_definition | modular_type_definition ;
aspect_clause ::= attribute_definition_clause | enumeration_representation_clause | record_representation_clause | at_clause ;
renaming_declaration ::= object_renaming_declaration | exception_renaming_declaration | package_renaming_declaration | subprogram_renaming_declaration | generic_renaming_declaration ;
type_declaration ::= full_type_declaration | incomplete_type_declaration | private_type_declaration | private_extension_declaration ;
delay_statement ::= delay_until_statement | delay_relative_statement ;
proper_body ::= subprogram_body | package_body | task_body | protected_body ;
return_subtype_indication ::= subtype_indication | access_definition ;
select_statement ::= selective_accept | timed_entry_call | conditional_entry_call | asynchronous_select ;
subtype_access_or_array_type_definition ::= subtype_indication | access_definition | array_type_definition ;
body_stub ::= subprogram_body_stub | package_body_stub | task_body_stub | protected_body_stub ;
selector_name ::= identifier | character_literal | operator_symbol ;
select_alternative ::= accept_alternative | delay_alternative | terminate_alternative ;
basic_declaration ::= type_declaration | subtype_declaration | object_declaration | number_declaration | subprogram_declaration | abstract_subprogram_declaration | null_procedure_declaration | package_declaration | renaming_declaration | exception_declaration | generic_declaration | generic_instantiation | pragma ;
identifier ::= id | wide_identifier ;
formal_type_definition ::= formal_private_type_definition | formal_derived_type_definition | formal_discrete_type_definition | formal_signed_integer_type_definition | formal_modular_type_definition | formal_floating_point_definition | formal_ordinary_fixed_point_definition | formal_decimal_fixed_point_definition | formal_array_type_definition | formal_access_type_definition | formal_interface_type_definition ;
declarative_item ::= basic_declarative_item | body ;
use_clause ::= use_package_clause | use_type_clause ;
protected_element_declaration ::= protected_operation_declaration | component_declaration ;
context_item ::= with_clause | use_clause ;
simple_statement ::= null_statement | procedure_call_statement | assignment_statement | exit_statement | goto_statement | simple_return_statement | entry_call_statement | requeue_statement | delay_statement | abort_statement | raise_statement | code_statement | pragma ;
body ::= proper_body | body_stub ;
direct_name ::= identifier | operator_symbol ;
ancestor_part ::= expression | subtype_mark ;
constraint ::= scalar_constraint | composite_constraint ;
protected_operation_item ::= subprogram_declaration | subprogram_body | entry_body | aspect_clause ;
compound_statement ::= if_statement | case_statement | loop_statement | block_statement | extended_return_statement | accept_statement | select_statement ;
triggering_statement ::= procedure_or_entry_call | delay_statement ;
array_aggregate ::= positional_array_aggregate | named_array_aggregate ;
basic_declarative_item ::= basic_declaration | aspect_clause | use_clause ;
real_type_definition ::= floating_point_definition | fixed_point_definition ;
composite_constraint ::= index_constraint | discriminant_constraint ;
component_item ::= component_declaration | aspect_clause | pragma ;
generic_declaration ::= generic_subprogram_declaration | generic_package_declaration ;
array_type_definition ::= unconstrained_array_definition | constrained_array_definition ;
protected_operation_declaration ::= subprogram_declaration | entry_declaration | aspect_clause | pragma ;
discriminant_part ::= unknown_discriminant_part | known_discriminant_part ;
scalar_constraint ::= range_constraint | digits_constraint | delta_constraint ;
formal_subprogram_declaration ::= formal_concrete_subprogram_declaration | formal_abstract_subprogram_declaration ;
library_unit_renaming_declaration ::= package_renaming_declaration | generic_renaming_declaration | subprogram_renaming_declaration | pragma ;
task_item ::= entry_declaration | aspect_clause | pragma ;
fixed_point_definition ::= ordinary_fixed_point_definition | decimal_fixed_point_definition ;
index_or_parameter_value ::= expression | discrete_range | parameter_association ;
explicit_generic_actual_parameter ::= expression | name | subtype_mark ;
unlabeled_statement ::= simple_statement | compound_statement ;
name_component ::= explicit_dereference_component | indexed_slice_type_conv_or_function_call_component | selected_component_component | attribute_reference_component ;
with_clause ::= limited_with_clause | nonlimited_with_clause ;
subprogram_specification ::= procedure_specification | function_specification ;
library_unit_declaration ::= subprogram_declaration | package_declaration | generic_declaration | generic_instantiation | pragma ;
generic_formal_parameter_declaration_or_use_clause ::= generic_formal_parameter_declaration | use_clause | pragma ;
--------------------c::iso-9899-1999.bgf--------------------
statement ::= labeled-statement | compound-statement | expression-statement | selection-statement | iteration-statement | jump-statement ;
external-declaration ::= function-definition | declaration ;
block-item ::= declaration | statement ;
--------------------c::iso-9899-tc2.bgf--------------------
statement ::= labeled-statement | compound-statement | expression-statement | selection-statement | iteration-statement | jump-statement ;
external-declaration ::= function-definition | declaration ;
block-item ::= declaration | statement ;
--------------------c::iso-9899-tc3.bgf--------------------
statement ::= labeled-statement | compound-statement | expression-statement | selection-statement | iteration-statement | jump-statement ;
external-declaration ::= function-definition | declaration ;
block-item ::= declaration | statement ;
--------------------c::antoniol.bgf--------------------
ifdef_token ::= ifdef_line | elsedef_line | elsifdef_line | endifdef_line ;
--------------------c::malton-dahn.bgf--------------------
file_id ::= id | key ;
gnu_long_int ::= gnu_long_int_string | gnu_long_int_charlit ;
reference ::= reference_id | reference_expression ;
argument_expression ::= assignment_expression | type_name ;
ptr_qualifier ::= restrict_qualifier | cv_qualifier ;
attributes_or_asm ::= attribute_spec | asm_spec ;
simple_type_or_qualifier ::= simple_type_name | type_qualifier ;
unannotated_reference_base ::= reference_id | nonreferential_primary ;
designator ::= array_designator | struct_or_union_designator ;
declaration_or_function_definition ::= declaration | function_definition ;
argument_declarator ::= declarator | abstract_declarator ;
postfix_expression ::= reference | nonreference ;
declarator_extension ::= function_declarator_extension | array_declarator_extension ;
--------------------c::cordy-malton-dahn.bgf--------------------
gnu_statement ::= error_statement | else_statement ;
gnu_long_int ::= gnu_long_int_string | gnu_long_int_charlit ;
expression_or_type_name ::= type_name | expression ;
ps_argument ::= constant_expression | register_spec ;
type_specifier ::= simple_type_name | enum_specifier | struct_or_union_specifier | typeof_expression | complex_specifier ;
declaration_or_statement ::= declaration | statement | preprocessor | function_definition | macro_declaration_or_statement | unknown_declaration_or_statement ;
decl_qualifier ::= sc_specifier | type_qualifier | extension_specifier | weak_specifier | declspec_specifier ;
string_unit ::= stringlit | pseudo_string | register_spec | preprocessor ;
declarator_extension ::= function_declarator_extension | array_declarator_extension ;
reference_id ::= id | foreachid | whileeachid ;
attribute_name ::= id | cv_qualifier ;
else_sub_statement ::= if_statement | sub_statement ;
unlabeled_statement ::= c_unlabeled_statement | gnu_statement ;
token_or_key ::= token | key ;
asm_register ::= string | pseudo_string ;
attributes_or_asm ::= attribute_spec | asm_spec ;
simple_type_or_qualifier ::= simple_type_name | type_qualifier ;
type_qualifier ::= bit_qualifier | cv_qualifier | inline_qualifier | restrict_qualifier | init_qualifier | exit_qualifier | user_qualifier | force_qualifier | asmlinkage_qualifier | zexport_qualifier | attribute_spec ;
simple_statement ::= jump_statement | null_statement | expression_statement ;
structured_statement ::= if_statement | for_statement | while_statement | switch_statement | do_statement | compound_statement | asm_statement ;
--------------------c::cordy-malton.bgf--------------------
file_id ::= id | key ;
reference ::= reference_id | reference_expression ;
unlabeled_statement ::= expression_statement | if_statement | for_statement | while_statement | switch_statement | do_statement | null_statement | jump_statement | compound_statement ;
type_specifier ::= simple_type_name | enum_specifier | struct_or_union_specifier ;
decl_qualifier ::= sc_specifier | cv_qualifier | type_qualifier ;
unannotated_reference_base ::= reference_id | nonreferential_primary ;
declaration_or_function_definition ::= declaration | function_definition ;
argument_declarator ::= declarator | abstract_declarator ;
postfix_expression ::= reference | nonreference ;
declarator_extension ::= function_declarator_extension | array_declarator_extension ;
--------------------cpp::iso-n2723.bgf--------------------
statement ::= labeled-statement | expression-statement | compound-statement | selection-statement | iteration-statement | jump-statement | declaration-statement | try-block ;
type-name ::= class-name | enum-name | typedef-name ;
namespace-name ::= original-namespace-name | namespace-alias ;
type-specifier ::= simple-type-specifier | class-specifier | enum-specifier | elaborated-type-specifier | typename-specifier | cv-qualifier ;
id-expression ::= unqualified-id | qualified-id ;
initializer-clause ::= assignment-expression | braced-init-list ;
block-declaration ::= simple-declaration | asm-definition | namespace-alias-definition | using-declaration | using-directive | static_assert-declaration | alias-declaration ;
declaration ::= block-declaration | function-definition | template-declaration | explicit-instantiation | explicit-specialization | linkage-specification | namespace-definition ;
named-namespace-definition ::= original-namespace-definition | extension-namespace-definition ;
template-parameter ::= type-parameter | parameter-declaration ;
for-init-statement ::= expression-statement | simple-declaration ;
namespace-definition ::= named-namespace-definition | unnamed-namespace-definition ;
template-argument ::= constant-expression | type-id | id-expression ;
class-name ::= identifier | simple-template-id ;
--------------------cpp::elges-cordy.bgf--------------------
literal ::= number_constant | character_constant | string_constant ;
file_identifier ::= id | key ;
name ::= id | template_class_name | qualified_name | operator_function_name | conversion_function_name ;
unlabeled_statement ::= null_statement | expression_statement | compound_statement | selection_statement | iteration_statement | jump_statement | declaration_statement | try_block ;
type_specifier ::= simple_type_name | class_specifier | enum_specifier | elaborated_type_specifier | const_volatile_qualifier ;
template_parameter ::= type_parameter | parameter_declaration ;
class_or_namespace_name ::= class_name | namespace_name ;
template_argument ::= type_name | non_gt_binary_expression ;
exception_declarator ::= declarator | abstract_declarator ;
--------------------cpp::iso-14882-1998.bgf--------------------
statement ::= labeled-statement | expression-statement | compound-statement | selection-statement | iteration-statement | jump-statement | declaration-statement | try-block ;
type-name ::= class-name | enum-name | typedef-name ;
namespace-name ::= original-namespace-name | namespace-alias ;
type-specifier ::= simple-type-specifier | class-specifier | enum-specifier | elaborated-type-specifier | cv-qualifier ;
id-expression ::= unqualified-id | qualified-id ;
block-declaration ::= simple-declaration | asm-definition | namespace-alias-definition | using-declaration | using-directive ;
declaration ::= block-declaration | function-definition | template-declaration | explicit-instantiation | explicit-specialization | linkage-specification | namespace-definition ;
named-namespace-definition ::= original-namespace-definition | extension-namespace-definition ;
template-parameter ::= type-parameter | parameter-declaration ;
for-init-statement ::= expression-statement | simple-declaration ;
namespace-definition ::= named-namespace-definition | unnamed-namespace-definition ;
class-or-namespace-name ::= class-name | namespace-name ;
template-argument ::= assignment-expression | type-id | id-expression ;
class-name ::= identifier | template-id ;
--------------------cs::csharp-ecma-334-2.bgf--------------------
struct-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | static-constructor-declaration | type-declaration ;
iteration-statement ::= while-statement | do-statement | for-statement | foreach-statement ;
for-initializer ::= local-variable-declaration | statement-expression-list ;
class-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | destructor-declaration | static-constructor-declaration | type-declaration ;
reference-type ::= class-type | interface-type | array-type | delegate-type ;
interface-member-declaration ::= interface-method-declaration | interface-property-declaration | interface-event-declaration | interface-indexer-declaration ;
operator-declarator ::= unary-operator-declarator | binary-operator-declarator | conversion-operator-declarator ;
type ::= value-type | reference-type ;
namespace-member-declaration ::= namespace-declaration | type-declaration ;
expression ::= conditional-expression | assignment ;
statement-expression ::= invocation-expression | object-creation-expression | assignment | post-increment-expression | post-decrement-expression | pre-increment-expression | pre-decrement-expression ;
value-type ::= struct-type | enum-type ;
local-variable-initializer ::= expression | array-initializer ;
struct-type ::= type-name | simple-type ;
variable-initializer ::= expression | array-initializer ;
primary-no-array-creation-expression ::= literal | simple-name | parenthesized-expression | member-access | invocation-expression | element-access | this-access | base-access | post-increment-expression | post-decrement-expression | object-creation-expression | delegate-creation-expression | typeof-expression | checked-expression | unchecked-expression ;
jump-statement ::= break-statement | continue-statement | goto-statement | return-statement | throw-statement ;
statement ::= labeled-statement | declaration-statement | embedded-statement ;
resource-acquisition ::= local-variable-declaration | expression ;
selection-statement ::= if-statement | switch-statement ;
embedded-statement ::= block | empty-statement | expression-statement | selection-statement | iteration-statement | jump-statement | try-statement | checked-statement | unchecked-statement | lock-statement | using-statement ;
type-declaration ::= class-declaration | struct-declaration | interface-declaration | enum-declaration | delegate-declaration ;
using-directive ::= using-alias-directive | using-namespace-directive ;
primary-expression ::= array-creation-expression | primary-no-array-creation-expression ;
--------------------cs::csharp-ecma-334-3.bgf--------------------
struct-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | static-constructor-declaration | type-declaration ;
iteration-statement ::= while-statement | do-statement | for-statement | foreach-statement ;
for-initializer ::= local-variable-declaration | statement-expression-list ;
class-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | finalizer-declaration | static-constructor-declaration | type-declaration ;
reference-type ::= class-type | interface-type | array-type | delegate-type ;
interface-member-declaration ::= interface-method-declaration | interface-property-declaration | interface-event-declaration | interface-indexer-declaration ;
operator-declarator ::= unary-operator-declarator | binary-operator-declarator | conversion-operator-declarator ;
type ::= value-type | reference-type | type-parameter ;
namespace-member-declaration ::= namespace-declaration | type-declaration ;
expression ::= conditional-expression | assignment ;
statement-expression ::= invocation-expression | object-creation-expression | assignment | post-increment-expression | post-decrement-expression | pre-increment-expression | pre-decrement-expression ;
value-type ::= struct-type | enum-type ;
local-variable-initializer ::= expression | array-initializer ;
struct-type ::= type-name | simple-type | nullable-type ;
variable-initializer ::= expression | array-initializer ;
primary-no-array-creation-expression ::= literal | simple-name | parenthesized-expression | member-access | invocation-expression | element-access | this-access | base-access | post-increment-expression | post-decrement-expression | object-creation-expression | delegate-creation-expression | typeof-expression | checked-expression | unchecked-expression | default-value-expression | anonymous-method-expression ;
jump-statement ::= break-statement | continue-statement | goto-statement | return-statement | throw-statement ;
statement ::= labeled-statement | declaration-statement | embedded-statement ;
resource-acquisition ::= local-variable-declaration | expression ;
selection-statement ::= if-statement | switch-statement ;
non-array-type ::= value-type | class-type | interface-type | delegate-type | type-parameter ;
global-attribute-target ::= identifier | keyword ;
embedded-statement ::= block | empty-statement | expression-statement | selection-statement | iteration-statement | jump-statement | try-statement | checked-statement | unchecked-statement | lock-statement | using-statement | yield-statement ;
type-declaration ::= class-declaration | struct-declaration | interface-declaration | enum-declaration | delegate-declaration ;
using-directive ::= using-alias-directive | using-namespace-directive ;
primary-expression ::= array-creation-expression | primary-no-array-creation-expression ;
attribute-target ::= identifier | keyword ;
non-nullable-value-type ::= enum-type | type-name | simple-type ;
--------------------cs::csharp-ecma-334-4.bgf--------------------
struct-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | static-constructor-declaration | type-declaration ;
iteration-statement ::= while-statement | do-statement | for-statement | foreach-statement ;
for-initializer ::= local-variable-declaration | statement-expression-list ;
class-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | finalizer-declaration | static-constructor-declaration | type-declaration ;
reference-type ::= class-type | interface-type | array-type | delegate-type ;
interface-member-declaration ::= interface-method-declaration | interface-property-declaration | interface-event-declaration | interface-indexer-declaration ;
operator-declarator ::= unary-operator-declarator | binary-operator-declarator | conversion-operator-declarator ;
type ::= value-type | reference-type | type-parameter ;
namespace-member-declaration ::= namespace-declaration | type-declaration ;
expression ::= conditional-expression | assignment ;
value-type ::= struct-type | enum-type ;
statement-expression ::= invocation-expression | object-creation-expression | assignment | post-increment-expression | post-decrement-expression | pre-increment-expression | pre-decrement-expression ;
local-variable-initializer ::= expression | array-initializer ;
struct-type ::= type-name | simple-type | nullable-type ;
primary-no-array-creation-expression ::= literal | simple-name | parenthesized-expression | member-access | invocation-expression | element-access | this-access | base-access | post-increment-expression | post-decrement-expression | object-creation-expression | delegate-creation-expression | typeof-expression | checked-expression | unchecked-expression | default-value-expression | anonymous-method-expression ;
variable-initializer ::= expression | array-initializer ;
jump-statement ::= break-statement | continue-statement | goto-statement | return-statement | throw-statement ;
statement ::= labeled-statement | declaration-statement | embedded-statement ;
resource-acquisition ::= local-variable-declaration | expression ;
selection-statement ::= if-statement | switch-statement ;
non-array-type ::= value-type | class-type | interface-type | delegate-type | type-parameter ;
global-attribute-target ::= identifier | keyword ;
embedded-statement ::= block | empty-statement | expression-statement | selection-statement | iteration-statement | jump-statement | try-statement | checked-statement | unchecked-statement | lock-statement | using-statement | yield-statement ;
type-declaration ::= class-declaration | struct-declaration | interface-declaration | enum-declaration | delegate-declaration ;
using-directive ::= using-alias-directive | using-namespace-directive ;
primary-expression ::= array-creation-expression | primary-no-array-creation-expression ;
attribute-target ::= identifier | keyword ;
non-nullable-value-type ::= enum-type | type-name | simple-type ;
--------------------cs::csharp-iso-23270-2003.bgf--------------------
struct-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | static-constructor-declaration | type-declaration ;
iteration-statement ::= while-statement | do-statement | for-statement | foreach-statement ;
for-initializer ::= local-variable-declaration | statement-expression-list ;
class-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | destructor-declaration | static-constructor-declaration | type-declaration ;
reference-type ::= class-type | interface-type | array-type | delegate-type ;
interface-member-declaration ::= interface-method-declaration | interface-property-declaration | interface-event-declaration | interface-indexer-declaration ;
operator-declarator ::= unary-operator-declarator | binary-operator-declarator | conversion-operator-declarator ;
type ::= value-type | reference-type ;
namespace-member-declaration ::= namespace-declaration | type-declaration ;
expression ::= conditional-expression | assignment ;
statement-expression ::= invocation-expression | object-creation-expression | assignment | post-increment-expression | post-decrement-expression | pre-increment-expression | pre-decrement-expression ;
value-type ::= struct-type | enum-type ;
local-variable-initializer ::= expression | array-initializer ;
struct-type ::= type-name | simple-type ;
variable-initializer ::= expression | array-initializer ;
primary-no-array-creation-expression ::= literal | simple-name | parenthesized-expression | member-access | invocation-expression | element-access | this-access | base-access | post-increment-expression | post-decrement-expression | object-creation-expression | delegate-creation-expression | typeof-expression | checked-expression | unchecked-expression ;
jump-statement ::= break-statement | continue-statement | goto-statement | return-statement | throw-statement ;
statement ::= labeled-statement | declaration-statement | embedded-statement ;
resource-acquisition ::= local-variable-declaration | expression ;
selection-statement ::= if-statement | switch-statement ;
embedded-statement ::= block | empty-statement | expression-statement | selection-statement | iteration-statement | jump-statement | try-statement | checked-statement | unchecked-statement | lock-statement | using-statement ;
type-declaration ::= class-declaration | struct-declaration | interface-declaration | enum-declaration | delegate-declaration ;
using-directive ::= using-alias-directive | using-namespace-directive ;
primary-expression ::= array-creation-expression | primary-no-array-creation-expression ;
--------------------cs::csharp-iso-23270-2006.bgf--------------------
struct-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | static-constructor-declaration | type-declaration ;
iteration-statement ::= while-statement | do-statement | for-statement | foreach-statement ;
for-initializer ::= local-variable-declaration | statement-expression-list ;
class-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | finalizer-declaration | static-constructor-declaration | type-declaration ;
reference-type ::= class-type | interface-type | array-type | delegate-type ;
interface-member-declaration ::= interface-method-declaration | interface-property-declaration | interface-event-declaration | interface-indexer-declaration ;
operator-declarator ::= unary-operator-declarator | binary-operator-declarator | conversion-operator-declarator ;
type ::= value-type | reference-type | type-parameter ;
namespace-member-declaration ::= namespace-declaration | type-declaration ;
expression ::= conditional-expression | assignment ;
statement-expression ::= invocation-expression | object-creation-expression | assignment | post-increment-expression | post-decrement-expression | pre-increment-expression | pre-decrement-expression ;
value-type ::= struct-type | enum-type ;
local-variable-initializer ::= expression | array-initializer ;
struct-type ::= type-name | simple-type | nullable-type ;
variable-initializer ::= expression | array-initializer ;
primary-no-array-creation-expression ::= literal | simple-name | parenthesized-expression | member-access | invocation-expression | element-access | this-access | base-access | post-increment-expression | post-decrement-expression | object-creation-expression | delegate-creation-expression | typeof-expression | checked-expression | unchecked-expression | default-value-expression | anonymous-method-expression ;
jump-statement ::= break-statement | continue-statement | goto-statement | return-statement | throw-statement ;
statement ::= labeled-statement | declaration-statement | embedded-statement ;
resource-acquisition ::= local-variable-declaration | expression ;
selection-statement ::= if-statement | switch-statement ;
non-array-type ::= value-type | class-type | interface-type | delegate-type | type-parameter ;
global-attribute-target ::= identifier | keyword ;
embedded-statement ::= block | empty-statement | expression-statement | selection-statement | iteration-statement | jump-statement | try-statement | checked-statement | unchecked-statement | lock-statement | using-statement | yield-statement ;
type-declaration ::= class-declaration | struct-declaration | interface-declaration | enum-declaration | delegate-declaration ;
using-directive ::= using-alias-directive | using-namespace-directive ;
primary-expression ::= array-creation-expression | primary-no-array-creation-expression ;
attribute-target ::= identifier | keyword ;
non-nullable-value-type ::= enum-type | type-name | simple-type ;
--------------------cs::csharp-msft-ls-1.0.bgf--------------------
struct-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | static-constructor-declaration | type-declaration ;
iteration-statement ::= while-statement | do-statement | for-statement | foreach-statement ;
for-initializer ::= local-variable-declaration | statement-expression-list ;
class-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | destructor-declaration | static-constructor-declaration | type-declaration ;
reference-type ::= class-type | interface-type | array-type | delegate-type ;
interface-member-declaration ::= interface-method-declaration | interface-property-declaration | interface-event-declaration | interface-indexer-declaration ;
operator-declarator ::= unary-operator-declarator | binary-operator-declarator | conversion-operator-declarator ;
type ::= value-type | reference-type ;
namespace-member-declaration ::= namespace-declaration | type-declaration ;
expression ::= conditional-expression | assignment ;
value-type ::= struct-type | enum-type ;
statement-expression ::= invocation-expression | object-creation-expression | assignment | post-increment-expression | post-decrement-expression | pre-increment-expression | pre-decrement-expression ;
local-variable-initializer ::= expression | array-initializer ;
struct-type ::= type-name | simple-type ;
variable-initializer ::= expression | array-initializer ;
primary-no-array-creation-expression ::= literal | simple-name | parenthesized-expression | member-access | invocation-expression | element-access | this-access | base-access | post-increment-expression | post-decrement-expression | object-creation-expression | delegate-creation-expression | typeof-expression | checked-expression | unchecked-expression ;
jump-statement ::= break-statement | continue-statement | goto-statement | return-statement | throw-statement ;
statement ::= labeled-statement | declaration-statement | embedded-statement ;
resource-acquisition ::= local-variable-declaration | expression ;
selection-statement ::= if-statement | switch-statement ;
embedded-statement ::= block | empty-statement | expression-statement | selection-statement | iteration-statement | jump-statement | try-statement | checked-statement | unchecked-statement | lock-statement | using-statement ;
type-declaration ::= class-declaration | struct-declaration | interface-declaration | enum-declaration | delegate-declaration ;
using-directive ::= using-alias-directive | using-namespace-directive ;
primary-expression ::= primary-no-array-creation-expression | array-creation-expression ;
--------------------cs::csharp-msft-ls-1.2.bgf--------------------
struct-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | static-constructor-declaration | type-declaration ;
iteration-statement ::= while-statement | do-statement | for-statement | foreach-statement ;
for-initializer ::= local-variable-declaration | statement-expression-list ;
class-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | destructor-declaration | static-constructor-declaration | type-declaration ;
reference-type ::= class-type | interface-type | array-type | delegate-type ;
interface-member-declaration ::= interface-method-declaration | interface-property-declaration | interface-event-declaration | interface-indexer-declaration ;
operator-declarator ::= unary-operator-declarator | binary-operator-declarator | conversion-operator-declarator ;
type ::= value-type | reference-type ;
namespace-member-declaration ::= namespace-declaration | type-declaration ;
expression ::= conditional-expression | assignment ;
value-type ::= struct-type | enum-type ;
statement-expression ::= invocation-expression | object-creation-expression | assignment | post-increment-expression | post-decrement-expression | pre-increment-expression | pre-decrement-expression ;
local-variable-initializer ::= expression | array-initializer ;
struct-type ::= type-name | simple-type ;
variable-initializer ::= expression | array-initializer ;
primary-no-array-creation-expression ::= literal | simple-name | parenthesized-expression | member-access | invocation-expression | element-access | this-access | base-access | post-increment-expression | post-decrement-expression | object-creation-expression | delegate-creation-expression | typeof-expression | checked-expression | unchecked-expression ;
jump-statement ::= break-statement | continue-statement | goto-statement | return-statement | throw-statement ;
statement ::= labeled-statement | declaration-statement | embedded-statement ;
resource-acquisition ::= local-variable-declaration | expression ;
selection-statement ::= if-statement | switch-statement ;
embedded-statement ::= block | empty-statement | expression-statement | selection-statement | iteration-statement | jump-statement | try-statement | checked-statement | unchecked-statement | lock-statement | using-statement ;
type-declaration ::= class-declaration | struct-declaration | interface-declaration | enum-declaration | delegate-declaration ;
using-directive ::= using-alias-directive | using-namespace-directive ;
primary-expression ::= primary-no-array-creation-expression | array-creation-expression ;
--------------------cs::csharp-msft-ls-3.0.bgf--------------------
struct-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | static-constructor-declaration | type-declaration ;
iteration-statement ::= while-statement | do-statement | for-statement | foreach-statement ;
for-initializer ::= local-variable-declaration | statement-expression-list ;
class-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | destructor-declaration | static-constructor-declaration | type-declaration ;
reference-type ::= class-type | interface-type | array-type | delegate-type ;
interface-member-declaration ::= interface-method-declaration | interface-property-declaration | interface-event-declaration | interface-indexer-declaration ;
operator-declarator ::= unary-operator-declarator | binary-operator-declarator | conversion-operator-declarator ;
type ::= value-type | reference-type | type-parameter ;
namespace-member-declaration ::= namespace-declaration | type-declaration ;
non-assignment-expression ::= conditional-expression | lambda-expression | query-expression ;
expression ::= non-assignment-expression | assignment ;
anonymous-function-body ::= expression | block ;
select-or-group-clause ::= select-clause | group-clause ;
value-type ::= struct-type | enum-type ;
statement-expression ::= invocation-expression | object-creation-expression | assignment | post-increment-expression | post-decrement-expression | pre-increment-expression | pre-decrement-expression ;
query-body-clause ::= from-clause | let-clause | where-clause | join-clause | join-into-clause | orderby-clause ;
local-variable-initializer ::= expression | array-initializer ;
struct-type ::= type-name | simple-type | nullable-type ;
variable-initializer ::= expression | array-initializer ;
primary-no-array-creation-expression ::= literal | simple-name | parenthesized-expression | member-access | invocation-expression | element-access | this-access | base-access | post-increment-expression | post-decrement-expression | object-creation-expression | delegate-creation-expression | anonymous-object-creation-expression | typeof-expression | checked-expression | unchecked-expression | default-value-expression | anonymous-method-expression ;
jump-statement ::= break-statement | continue-statement | goto-statement | return-statement | throw-statement ;
statement ::= labeled-statement | declaration-statement | embedded-statement ;
object-or-collection-initializer ::= object-initializer | collection-initializer ;
resource-acquisition ::= local-variable-declaration | expression ;
selection-statement ::= if-statement | switch-statement ;
embedded-statement ::= block | empty-statement | expression-statement | selection-statement | iteration-statement | jump-statement | try-statement | checked-statement | unchecked-statement | lock-statement | using-statement | yield-statement ;
type-declaration ::= class-declaration | struct-declaration | interface-declaration | enum-declaration | delegate-declaration ;
initializer-value ::= expression | object-or-collection-initializer ;
using-directive ::= using-alias-directive | using-namespace-directive ;
anonymous-function-signature ::= explicit-anonymous-function-signature | implicit-anonymous-function-signature ;
primary-expression ::= primary-no-array-creation-expression | array-creation-expression ;
--------------------cs::csharp-msft-ls-4.0.bgf--------------------
struct-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | static-constructor-declaration | type-declaration ;
iteration-statement ::= while-statement | do-statement | for-statement | foreach-statement ;
for-initializer ::= local-variable-declaration | statement-expression-list ;
class-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | destructor-declaration | static-constructor-declaration | type-declaration ;
reference-type ::= class-type | interface-type | array-type | delegate-type ;
interface-member-declaration ::= interface-method-declaration | interface-property-declaration | interface-event-declaration | interface-indexer-declaration ;
operator-declarator ::= unary-operator-declarator | binary-operator-declarator | conversion-operator-declarator ;
type ::= value-type | reference-type | type-parameter ;
namespace-member-declaration ::= namespace-declaration | type-declaration ;
non-assignment-expression ::= conditional-expression | lambda-expression | query-expression ;
expression ::= non-assignment-expression | assignment ;
anonymous-function-body ::= expression | block ;
select-or-group-clause ::= select-clause | group-clause ;
value-type ::= struct-type | enum-type ;
statement-expression ::= invocation-expression | object-creation-expression | assignment | post-increment-expression | post-decrement-expression | pre-increment-expression | pre-decrement-expression ;
query-body-clause ::= from-clause | let-clause | where-clause | join-clause | join-into-clause | orderby-clause ;
local-variable-initializer ::= expression | array-initializer ;
struct-type ::= type-name | simple-type | nullable-type ;
variable-initializer ::= expression | array-initializer ;
primary-no-array-creation-expression ::= literal | simple-name | parenthesized-expression | member-access | invocation-expression | element-access | this-access | base-access | post-increment-expression | post-decrement-expression | object-creation-expression | delegate-creation-expression | anonymous-object-creation-expression | typeof-expression | checked-expression | unchecked-expression | default-value-expression | anonymous-method-expression ;
jump-statement ::= break-statement | continue-statement | goto-statement | return-statement | throw-statement ;
statement ::= labeled-statement | declaration-statement | embedded-statement ;
object-or-collection-initializer ::= object-initializer | collection-initializer ;
resource-acquisition ::= local-variable-declaration | expression ;
selection-statement ::= if-statement | switch-statement ;
embedded-statement ::= block | empty-statement | expression-statement | selection-statement | iteration-statement | jump-statement | try-statement | checked-statement | unchecked-statement | lock-statement | using-statement | yield-statement ;
type-declaration ::= class-declaration | struct-declaration | interface-declaration | enum-declaration | delegate-declaration ;
initializer-value ::= expression | object-or-collection-initializer ;
using-directive ::= using-alias-directive | using-namespace-directive ;
anonymous-function-signature ::= explicit-anonymous-function-signature | implicit-anonymous-function-signature ;
primary-expression ::= primary-no-array-creation-expression | array-creation-expression ;
--------------------cs::csharp-zaytsev.bgf--------------------
struct-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | static-constructor-declaration | type-declaration ;
iteration-statement ::= while-statement | do-statement | for-statement | foreach-statement ;
statement ::= labeled-statement | declaration-statement | embedded-statement ;
non-array-type ::= qualified-identifier | built-in-type ;
resource-acquisition ::= local-variable-declaration | expression ;
for-initializer ::= local-variable-declaration | statement-expression-list ;
selection-statement ::= if-statement | switch-statement ;
class-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | destructor-declaration | static-constructor-declaration | type-declaration ;
interface-member-declaration ::= interface-method-declaration | interface-property-declaration | interface-event-declaration | interface-indexer-declaration ;
operator-declarator ::= unary-operator-declarator | binary-operator-declarator | conversion-operator-declarator ;
namespace-member-declaration ::= namespace-declaration | type-declaration ;
type-declaration ::= class-declaration | struct-declaration | interface-declaration | enum-declaration | delegate-declaration ;
variable-initializer ::= expression | array-initializer ;
jump-statement ::= break-statement | continue-statement | goto-statement | return-statement | throw-statement ;
--------------------cs::csharp-antoniol.bgf--------------------
ifdef_token ::= ifdef_line | elsedef_line | elsifdef_line | endifdef_line ;
--------------------cs::csharp-cordy.bgf--------------------
struct_member_declaration ::= constant_declaration | field_declaration | method_declaration | property_declaration | event_declaration | indexer_declaration | operator_declaration | constructor_declaration | static_constructor_declaration | type_declaration ;
variable_initializer ::= expression | array_initializer ;
jump_statement ::= break_statement | continue_statement | goto_statement | return_statement | throw_statement ;
class_member_declaration ::= constant_declaration | field_declaration | method_declaration | property_declaration | event_declaration | indexer_declaration | operator_declaration | constructor_declaration | finalizer_declaration | static_constructor_declaration | type_declaration ;
resource_acquisition ::= local_variable_declaration | expression ;
selection_statement ::= if_statement | switch_statement ;
interface_member_declaration ::= interface_method_declaration | interface_property_declaration | interface_event_declaration | interface_indexer_declaration ;
type_parameter_constraint ::= primary_constraint | secondary_constraint | constructor_constraint ;
expression ::= conditional_expression | assignment | query_expression | lambda_expression ;
class_or_interface_type ::= class_type | interface_type ;
type_declaration ::= class_declaration | struct_declaration | interface_declaration | enum_declaration | delegate_declaration ;
primary_expression ::= array_creation_expression | primary_no_array_creation_expression | object_initializer_expression ;
attribute_target ::= id | key ;
non_nullable_value_type ::= enum_type | type_name | simple_type ;
using_directive ::= using_alias_directive | using_namespace_directive ;
unmanaged_type ::= value_type | reference_type | type_parameter ;
non_array_type ::= value_type | class_type | interface_type | delegate_type | type_parameter ;
global_attribute_target ::= id | key ;
statement ::= labeled_statement | declaration_statement | embedded_statement ;
literal ::= boolean_literal | integer_literal | real_literal | character_literal | string_literal | null_literal ;
reference_type ::= class_type | interface_type | array_type | delegate_type ;
integer_literal ::= decimal_integer_literal | hexadecimal_integer_literal ;
iteration_statement ::= while_statement | do_statement | for_statement | foreach_statement ;
operator_declarator ::= unary_operator_declarator | binary_operator_declarator | conversion_operator_declarator ;
for_initializer ::= local_variable_declaration | statement_expression_list ;
secondary_constraint ::= interface_type | type_parameter ;
statement_expression ::= primary_no_array_creation_expression | object_creation_expression | assignment | pre_increment_expression | pre_decrement_expression ;
value_type ::= struct_type | enum_type ;
struct_type ::= type_name | simple_type | nullable_type ;
attribute_argument ::= positional_argument | named_argument ;
--------------------cs::csharp-ecma-334-1.bgf--------------------
struct-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | static-constructor-declaration | type-declaration ;
iteration-statement ::= while-statement | do-statement | for-statement | foreach-statement ;
for-initializer ::= local-variable-declaration | statement-expression-list ;
class-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | destructor-declaration | static-constructor-declaration | type-declaration ;
reference-type ::= class-type | interface-type | array-type | delegate-type ;
interface-member-declaration ::= interface-method-declaration | interface-property-declaration | interface-event-declaration | interface-indexer-declaration ;
operator-declarator ::= unary-operator-declarator | binary-operator-declarator | conversion-operator-declarator ;
type ::= value-type | reference-type ;
namespace-member-declaration ::= namespace-declaration | type-declaration ;
expression ::= conditional-expression | assignment ;
statement-expression ::= invocation-expression | object-creation-expression | assignment | post-increment-expression | post-decrement-expression | pre-increment-expression | pre-decrement-expression ;
value-type ::= struct-type | enum-type ;
local-variable-initializer ::= expression | array-initializer ;
struct-type ::= type-name | simple-type ;
variable-initializer ::= expression | array-initializer ;
primary-no-array-creation-expression ::= literal | simple-name | parenthesized-expression | member-access | invocation-expression | element-access | this-access | base-access | post-increment-expression | post-decrement-expression | object-creation-expression | delegate-creation-expression | typeof-expression | checked-expression | unchecked-expression ;
jump-statement ::= break-statement | continue-statement | goto-statement | return-statement | throw-statement ;
statement ::= labeled-statement | declaration-statement | embedded-statement ;
resource-acquisition ::= local-variable-declaration | expression ;
selection-statement ::= if-statement | switch-statement ;
embedded-statement ::= block | empty-statement | expression-statement | selection-statement | iteration-statement | jump-statement | try-statement | checked-statement | unchecked-statement | lock-statement | using-statement ;
type-declaration ::= class-declaration | struct-declaration | interface-declaration | enum-declaration | delegate-declaration ;
using-directive ::= using-alias-directive | using-namespace-directive ;
primary-expression ::= array-creation-expression | primary-no-array-creation-expression ;
--------------------dart::spec-0.01.bgf--------------------
selector ::= assignableSelector | arguments ;
literal ::= nullLiteral | booleanLiteral | numericLiteral | stringLiteral | mapLiteral | listLiteral ;
IDENTIFIER_PART ::= IDENTIFIER_START | DIGIT ;
identifier ::= IDENTIFIER_NO_DOLLAR | IDENTIFIER | BUILT_IN_IDENTIFIER ;
simpleFormalParameter ::= declaredIdentifier | identifier ;
prefixOperator ::= additiveOperator | negateOperator ;
binaryOperator ::= multiplicativeOperator | additiveOperator | shiftOperator | relationalOperator | equalityOperator | bitwiseOperator ;
IDENTIFIER_PART_NO_DOLLAR ::= IDENTIFIER_START_NO_DOLLAR | DIGIT ;
normalFormalParameter ::= functionSignature | fieldFormalParameter | simpleFormalParameter ;
numericLiteral ::= NUMBER | HEX_NUMBER ;
--------------------dart::google.bgf--------------------
selector ::= assignableSelector | arguments ;
literal ::= NULL | TRUE | FALSE | HEX_NUMBER | NUMBER | STRING ;
returnType ::= VOID | type ;
getOrSet ::= GET | SET ;
IDENTIFIER_PART ::= IDENTIFIER_START | DIGIT ;
identifier ::= IDENTIFIER_NO_DOLLAR | IDENTIFIER | ABSTRACT | ASSERT | CLASS | EXTENDS | FACTORY | GET | IMPLEMENTS | IMPORT | INTERFACE | IS | LIBRARY | NATIVE | NEGATE | OPERATOR | SET | SOURCE | STATIC | TYPEDEF ;
simpleFormalParameter ::= declaredIdentifier | identifier ;
prefixOperator ::= additiveOperator | negateOperator ;
compoundLiteral ::= listLiteral | mapLiteral ;
IDENTIFIER_PART_NO_DOLLAR ::= IDENTIFIER_START_NO_DOLLAR | DIGIT ;
normalFormalParameter ::= functionDeclaration | fieldFormalParameter | simpleFormalParameter ;
primary ::= primaryNoFE | primaryFE ;
primaryFE ::= functionExpression | primaryNoFE ;
--------------------dart::spec-0.05.bgf--------------------
selector ::= assignableSelector | arguments ;
literal ::= nullLiteral | booleanLiteral | numericLiteral | stringLiteral | mapLiteral | listLiteral ;
IDENTIFIER_PART ::= IDENTIFIER_START | DIGIT ;
identifier ::= IDENTIFIER_NO_DOLLAR | IDENTIFIER | BUILT_IN_IDENTIFIER ;
simpleFormalParameter ::= declaredIdentifier | identifier ;
binaryOperator ::= multiplicativeOperator | additiveOperator | shiftOperator | relationalOperator | equalityOperator | bitwiseOperator ;
IDENTIFIER_PART_NO_DOLLAR ::= IDENTIFIER_START_NO_DOLLAR | DIGIT ;
normalFormalParameter ::= functionSignature | fieldFormalParameter | simpleFormalParameter ;
numericLiteral ::= NUMBER | HEX_NUMBER ;
--------------------eiffel::bezault.bgf--------------------
Actual ::= Expression | Address ;
Call ::= Qualified_call | Precursor ;
Instruction ::= Creation | Call | Assignment | Assignment_attempt | Conditional | Multi_branch | Loop | Debug | Check | Retry | Null_instruction ;
Routine_body ::= Effective | Deferred ;
Type ::= Class_type | Class_type_expanded | Class_type_separate | Anchored | Bit_type ;
Bit_length ::= Integer_constant | Attribute ;
Feature_value ::= Manifest_constant | Unique | Routine ;
Effective ::= Internal | External ;
Manifest_constant ::= Boolean_constant | Character_constant | Integer_constant | Real_constant | Manifest_string | Bit_constant | Wide_character_constant | Wide_manifest_string | Hexadecimal_constant ;
Feature_name ::= Identifier | Prefix | Infix ;
Index_value ::= Identifier | Manifest_constant ;
Operator_expression ::= Parenthesized | Unary_expression | Binary_expression ;
Infix_operator ::= Binary | Free_operator ;
Choice_constant ::= Integer_constant | Character_constant | Attribute ;
Choice ::= Choice_constant | Interval ;
Unlabeled_assertion_clause ::= Boolean_expression | Comment ;
Prefix_operator ::= Unary | Free_operator ;
--------------------eiffel::cordy.bgf--------------------
Restricted_type ::= Restricted_class_type | Formal_generic_name ;
Routine_body ::= Effective | Deferred ;
Type ::= Class_type | Class_type_expanded | Formal_generic_name | Anchored | Bit_type ;
Manifest_constant ::= Boolean_constant | Character_constant | Integer_constant | Real_constant | Manifest_string | Bit_constant ;
Feature_name ::= Identifier | Prefix | Infix ;
Operator_expression ::= Parenthesized | Binary_expression ;
Infix_operator ::= Binary | Free_operator ;
Prefix_operator ::= Unary | Free_operator ;
Unlabeled_assertion_clause ::= Boolean_expression | Comment ;
Primitive_expression ::= Call | Manifest_constant | Manifest_array | Old | Strip | Parenthesized ;
Actual ::= Expression | Address ;
Instruction ::= Creation | Call | Assignment | Assignment_attempt | Conditional | Multi_branch | Loop | Debug | Check | Retry | Null ;
Feature_value ::= Manifest_constant | Unique ;
Effective ::= Internal | External ;
Constant ::= Manifest_constant | Constant_attribute ;
Entity ::= Writable | Read_only ;
Choice ::= Constant | Interval ;
Writable ::= Attribute | Local ;
--------------------eiffel::iso-25436-2006.bgf--------------------
Special_expression ::= Manifest_constant | Manifest_tuple | Agent | Object_test | Once_string | Address ;
Call ::= Object_call | Non_object_call ;
Call_agent_body ::= Agent_qualified | Agent_unqualified ;
Variable ::= Variable_attribute | Local ;
Type ::= Class_or_tuple_type | Formal_generic_name | Anchored ;
Alias_name ::= Operator | Bracket ;
Expression ::= Basic_expression | Special_expression ;
Registered_language ::= C_external | CPP_external | DLL_external ;
Operator_expression ::= Unary_expression | Binary_expression ;
Target ::= Local | Read_only | Call | Parenthesized_target ;
Unlabeled_assertion_clause ::= Boolean_expression | Comment ;
External_file ::= External_user_file | External_system_file ;
Boolean_expression ::= Basic_expression | Boolean_constant | Object_test ;
Instruction ::= Creation_instruction | Call | Assignment | Assigner_call | Conditional | Multi_branch | Loop | Debug | Precursor | Check | Retry ;
External_language ::= Unregistered_language | Registered_language ;
Effective_routine ::= Internal | External ;
Agent_target ::= Entity | Parenthesized | Manifest_type ;
Feature_body ::= Deferred | Effective_routine | Attribute ;
Basic_expression ::= Read_only | Local | Call | Precursor | Equality | Parenthesized | Old | Operator_expression | Bracket_expression | Creation_expression ;
Bracket_target ::= Target | Once_string | Manifest_constant | Manifest_tuple ;
Agent_actual ::= Expression | Placeholder ;
Class_or_tuple_type ::= Class_type | Tuple_type ;
Agent ::= Call_agent | Inline_agent ;
Constraining_types ::= Single_constraint | Multiple_constraint ;
Constant ::= Manifest_constant | Constant_attribute ;
Operator ::= Unary | Binary ;
Entity ::= Variable | Read_only ;
Manifest_string ::= Basic_manifest_string | Verbatim_string ;
Manifest_value ::= Boolean_constant | Character_constant | Integer_constant | Real_constant | Manifest_string | Manifest_type ;
Tuple_parameters ::= Type_list | Entity_declaration_list ;
Choice ::= Constant | Manifest_type | Constant_interval | Type_interval ;
Converter ::= Conversion_procedure | Conversion_query ;
Note_item ::= Identifier | Manifest_constant ;
--------------------fortran::derricks.bgf--------------------
AccessId ::= GenericName | GenericSpec ;
ActionStmt ::= AllocateStmt | CycleStmt | DeallocateStmt | ExitStmt | NullifyStmt | PointerAssignmentStmt | WhereStmt | ArithmeticIfStmt | AssignmentStmt | AssignStmt | BackspaceStmt | CallStmt | CloseStmt | ContinueStmt | EndfileStmt | GotoStmt | ComputedGotoStmt | AssignedGotoStmt | IfStmt | InquireStmt | OpenStmt | PauseStmt | PrintStmt | ReadStmt | ReturnStmt | RewindStmt | StopStmt | WriteStmt ;
InputItem ::= Name | DataRef | InputImpliedDo ;
DeclarationConstruct ::= TypeDeclarationStmt | SpecificationStmt | DerivedTypeDef | InterfaceBlock ;
PointerObject ::= Name | PointerField ;
DerivedTypeBody ::= PrivateSequenceStmt | ComponentDefStmt ;
KindParam ::= Icon | NamedConstantUse ;
ComponentArraySpec ::= ExplicitShapeSpecList | DeferredShapeSpecList ;
BodyConstruct ::= SpecificationPartConstruct | ExecutableConstruct ;
ModuleSubprogramPartConstruct ::= ContainsStmt | ModuleSubprogram ;
OutputItem ::= Expr | OutputImpliedDo ;
ArraySpec ::= AssumedShapeSpecList | DeferredShapeSpecList | ExplicitShapeSpecList | AssumedSizeSpec ;
DataStmtObject ::= Variable | DataImpliedDo ;
ModuleSubprogram ::= FunctionSubprogram | SubroutineSubprogram ;
AcValue ::= Expr | AcImpliedDo ;
ExecutableConstruct ::= ActionStmt | DoConstruct | IfConstruct | CaseConstruct | WhereConstruct | EndDoStmt ;
DefinedOperator ::= Dop | PowerOp | MultOp | AddOp | ConcatOp | RelOp | NotOp | AndOp | OrOp | EquivOp ;
ExecutionPartConstruct ::= ExecutableConstruct | FormatStmt | DataStmt | EntryStmt ;
DoConstruct ::= BlockDoConstruct | LabelDoStmt ;
EquivalenceObject ::= ArrayName | Variable ;
SpecificationStmt ::= AccessStmt | AllocatableStmt | CommonStmt | DataStmt | DimensionStmt | EquivalenceStmt | ExternalStmt | IntrinsicStmt | SaveStmt | IntentStmt | NamelistStmt | OptionalStmt | PointerStmt | TargetStmt ;
DataIDoObject ::= ArrayElement | DataImpliedDo | StructureComponent ;
ScalarVariable ::= VariableName | ArrayElement ;
ProgramUnit ::= MainProgram | FunctionSubprogram | SubroutineSubprogram | Module | BlockDataSubprogram ;
InterfaceBlockPart ::= InterfaceBody | ModuleProcedureStmt ;
COperand ::= Scon | Name | DataRef | FunctionReference ;
BozLiteralConstant ::= BinaryConstant | OctalConstant | HexConstant ;
SectionSubscript ::= Expr | SubscriptTriplet ;
CaseBodyConstruct ::= CaseStmt | ExecutionPartConstruct ;
InternalSubprogram ::= FunctionSubprogram | SubroutineSubprogram ;
CommonBlockObject ::= VariableName | ArrayDeclarator ;
SpecificationPartConstruct ::= ImplicitStmt | ParameterStmt | FormatStmt | EntryStmt | DeclarationConstruct | UseStmt ;
--------------------fortran::waite-cordy.bgf--------------------
AccessId ::= GenericName | GenericSpec ;
DerivedTypeBodyConstruct ::= PrivateSequenceStmt | ComponentDefStmt ;
InputItem ::= NameDataRef | InputImpliedDo ;
PointerObject ::= Name | PointerField ;
KindParam ::= Icon | NamedConstantUse ;
ComponentArraySpec ::= ExplicitShapeSpecList | DeferredShapeSpecList ;
BodyConstruct ::= SpecificationPartConstruct | ExecutableConstruct ;
ModuleSubprogramPartConstruct ::= ContainsStmt | ModuleSubprogram ;
OutputItemList ::= Expr | OutputItemList1 ;
CommentOrNewline ::= comment | newline ;
DataStmtObject ::= Variable | DataImpliedDo ;
ModuleSubprogram ::= FunctionSubprogram | SubroutineSubprogram ;
AcValueList ::= Expr | AcValueList1 ;
DefinedOperator ::= Dop | PowerOp | MultOp | AddOp | RelOp | ConcatOp | NotOp | AndOp | OrOp | EquivOp ;
IconOrScon ::= Icon | Scon ;
SavedEntity ::= VariableName | SavedCommonBlock ;
InterfaceBodyPartConstruct ::= InterfaceBody | ModuleProcedureStmt ;
ScalarVariable ::= VariableName | ArrayElement ;
BozLiteralConstant ::= Bcon | Ocon | Zcon ;
COperand ::= Scon | NameDataRef | FunctionReference ;
CaseBodyConstruct ::= CaseStmt | ExecutionPartConstruct ;
InternalSubprogram ::= FunctionSubprogram | SubroutineSubprogram ;
CommonBlockObject ::= VariableName | ArrayDeclarator ;
--------------------java::java-5-habelitz.bgf--------------------
typeDecls ::= typeDeclaration | SEMI ;
literal ::= HEX_LITERAL | OCTAL_LITERAL | DECIMAL_LITERAL | FLOATING_POINT_LITERAL | CHARACTER_LITERAL | STRING_LITERAL | TRUE | FALSE | NULL ;
type ::= simpleType | objectType ;
modifier ::= PUBLIC | PROTECTED | PRIVATE | STATIC | ABSTRACT | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | localModifier ;
genericTypeArgumentSimplified ::= type | QUESTION ;
variableInitializer ::= arrayInitializer | expression ;
annotationElementValue ::= annotationElementValueExpression | annotation | annotationElementValueArrayInitializer ;
localModifier ::= FINAL | annotation ;
primitiveType ::= BOOLEAN | CHAR | BYTE | SHORT | INT | LONG | FLOAT | DOUBLE ;
--------------------java::java-5-parr.bgf--------------------
annotationMethodOrConstantRest ::= annotationMethodRest | annotationConstantRest ;
forInit ::= localVariableDeclaration | expressionList ;
variableInitializer ::= arrayInitializer | expression ;
elementValue ::= conditionalExpression | annotation | elementValueArrayInitializer ;
createdName ::= classOrInterfaceType | primitiveType ;
classDeclaration ::= normalClassDeclaration | enumDeclaration ;
blockStatement ::= localVariableDeclarationStatement | classOrInterfaceDeclaration | statement ;
integerLiteral ::= HexLiteral | OctalLiteral | DecimalLiteral ;
interfaceDeclaration ::= normalInterfaceDeclaration | annotationTypeDeclaration ;
--------------------java::java-5-stahl.bgf--------------------
typeArgumentsEnd ::= GT | SR | BSR ;
type ::= classOrInterfaceType | builtInType ;
annotationMemberValue ::= annotation | conditionalExpression | annotationMemberArrayInitializer ;
typeSpec ::= classTypeSpec | builtInTypeSpec ;
constant ::= NUM_INT | CHAR_LITERAL | STRING_LITERAL | NUM_FLOAT | NUM_LONG | NUM_DOUBLE ;
initializer ::= expression | arrayInitializer ;
referenceTypeSpec ::= classTypeSpec | arrayTypeSpec ;
--------------------java::java-5-studman.bgf--------------------
typeDefinitionInternal ::= classDefinition | interfaceDefinition | enumDefinition | annotationDefinition ;
type ::= classOrInterfaceType | builtInType ;
annotationMemberValueInitializer ::= conditionalExpression | annotation | annotationMemberArrayInitializer ;
typeArgument ::= typeArgumentSpec | wildcardType ;
annotationArguments ::= annotationMemberValueInitializer | anntotationMemberValuePairs ;
typeSpec ::= classTypeSpec | builtInTypeSpec ;
constant ::= NUM_INT | CHAR_LITERAL | STRING_LITERAL | NUM_FLOAT | NUM_LONG | NUM_DOUBLE ;
initializer ::= expression | arrayInitializer ;
typeArgumentsOrParametersEnd ::= GT | SR | BSR ;
typeArgumentSpec ::= classTypeSpec | builtInTypeArraySpec ;
annotationMemberArrayValueInitializer ::= conditionalExpression | annotation ;
--------------------java::java-1-cordy-guo.bgf--------------------
literal ::= numeric_literal | character_literal | string_literal | boolean_literal | null_literal ;
statement ::= label_statement | empty_statement | expression_statement | if_statement | switch_statement | while_statement | do_statement | for_statement | break_statement | continue_statement | return_statement | throw_statement | synchronized_statement | try_statement | block ;
variable_initializer ::= expression | array_initializer ;
component ::= dot_id | method_argument | subscript ;
type_specifier ::= type_name | array_type_specifier ;
declaration_or_statement ::= local_variable_declaration | class_declaration | statement ;
method_or_constructor_declaration ::= method_declaration | constructor_declaration ;
member_declaration ::= method_or_constructor_declaration | type_declaration ;
class_body_declaration ::= empty_declaration | member_declaration | instance_initializer | static_initializer | field_declaration ;
type_name ::= primitive_type | qualified_name ;
--------------------java::java-5-cordy-guo-dean.bgf--------------------
literal ::= numeric_literal | character_literal | string_literal | boolean_literal | null_literal ;
variable_initializer ::= expression | array_initializer ;
argument ::= expression | type_specifier ;
declaration ::= local_variable_declaration | class_declaration ;
type_specifier ::= type_name | array_type_specifier ;
declaration_or_statement ::= declaration | statement ;
method_or_constructor_declaration ::= method_declaration | constructor_declaration ;
class_body_declaration ::= empty_declaration | member_declaration | instance_initializer | static_initializer | field_declaration ;
type_argument ::= type_specifier | wildcard_type ;
expression_or_nested_annotation ::= expression | nested_annotation ;
type_name ::= primitive_type | qualified_name ;
--------------------modula::sdf.bgf--------------------
Type ::= TypeLiteral | QualId ;
Stmt ::= AssignStmt | Block | CallStmt | CaseStmt | ExitStmt | EvalStmt | ForStmt | IfStmt | LockStmt | LoopStmt | RaiseStmt | RepeatStmt | ReturnStmt | TryFinStmt | TryXptStmt | TCaseStmt | WhileStmt | WithStmt ;
Import ::= AsImport | FromImport ;
Ancestor ::= TypeName | ObjectType | QualId ;
--------------------modula::src-052.bgf--------------------
Literal ::= Number | CharLiteral | TextLiteral ;
PrintingChar ::= Letter | Digit | UtherChar ;
Stmt ::= AssignStmt | Block | CallStmt | CaseStmt | ExitStmt | EvalStmt | ForStmt | IfStmt | LockStmt | LoopStmt | RaiseStmt | RepeatStmt | ReturnStmt | TryFinStmt | TryXptStmt | TCaseStmt | WhileStmt | WithStmt ;
--------------------modula::dagenais-cordy.bgf--------------------
AnyCons ::= SetCons | RecordCons | ArrayCons ;
Stmt ::= IfStmt | ForStmt | ReturnStmt | WhileStmt | AssignStmt | CallStmt | Block | CaseStmt | ExitStmt | EvalStmt | LockStmt | LoopStmt | RaiseStmt | RepeatStmt | TypecaseStmt | TryStmt | WithStmt ;
ObjectOrTypeName ::= TypeName | ObjectType ;
program ::= Interface | Module | GInterface | GModule | IInterface | IModule ;
--------------------basic::vb6-cordy.bgf--------------------
statement ::= label_statement | assignment_statement | app_activate_statement | attribute_statement | beep_statement | call_statement | chdir_statement | chdrive_statement | close_statement | date_statement | deletesetting_statement | do_statement | end_statement | erase_statement | error_statement | event_statement | exit_statement | filecopy_statement | for_each_statement | for_next_statement | get_statement | gosub_statement | return_statement | goto_statement | if_statement | input_statement | kill_statement | line_input_statement | load_statement | lock_statement | lset_statement | mid_statement | mkdir_statement | name_statement | on_error_statement | open_statement | option_statement | preprocessor_if_statement | print_statement | property_statement | put_statement | randomize_statement | reset_statement | resume_statement | rmdir_statement | rset_statement | savepicture_statement | savesetting_statement | select_case_statement | set_statement | stop_statement | time_statement | unload_statement | unlock_statement | while_statement | with_statement | width_statement | write_statement ;
while_or_until_clause ::= while_clause | until_clause ;
if_statement ::= full_if_statement | short_if_statement ;
declaration ::= variable_declaration | implements_declaration | subprogram_declaration | constant_declaration | class_declaration | declare_subprogram_declaration | defletter_declaration | enum_declaration | type_declaration ;
for_next_statement ::= full_for_next_statement | short_for_next_statement ;
variable_description ::= array_description | single_var_description ;
for_each_statement ::= full_for_each_statement | short_for_each_statement ;
class_begin_item ::= assignment_statement | class_begin_block | eol ;
--------------------html::clark-basic.bgf--------------------
Heading.class ::= h1 | h2 | h3 | h4 | h5 | h6 ;
Formctrl.class ::= input | label | select | textarea ;
List.class ::= ul | ol | dl ;
--------------------html::clark.bgf--------------------
Heading.class ::= h1 | h2 | h3 | h4 | h5 | h6 ;
Script.class ::= noscript | script ;
Edit.class ::= del | ins ;
--------------------html::cordy.bgf--------------------
attribute_value ::= stringlit | number | id | url | fileref ;
attribute_id ::= id | x_id ;
element ::= singleton_tag | tag | text | comment_tag | tag_beg | tag_end ;
--------------------html::clark-strict.bgf--------------------
Heading.class ::= h1 | h2 | h3 | h4 | h5 | h6 ;
List.class ::= ul | ol | dl ;
Script.class ::= noscript | script ;
Edit.class ::= del | ins ;
--------------------javascript::synytskyy-cordy.bgf--------------------
js_property_name ::= id | js_string_literal | number ;
js_string_literal ::= stringlit | charlit ;
js_numeric_literal ::= number | js_hex_number ;
js_selector ::= js_arguments | js_subscripts | js_field_selector ;
--------------------odf::opendoc-1.0-strict.bgf--------------------
any-date ::= number-day | number-month | number-year | number-era | number-day-of-week | number-week-of-year | number-quarter | number-hours | number-am-pm | number-minutes | number-seconds ;
any-time ::= number-hours | number-am-pm | number-minutes | number-seconds ;
common-table-range-attlist ::= common-table-cell-address-attlist | common-table-cell-range-address-attlist ;
any-number ::= number-number | number-scientific-number | number-fraction ;
text-table-of-content-children ::= text-index-entry-chapter | text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop | text-index-entry-link-start | text-index-entry-link-end ;
text-content ::= text-h | text-p | text-list | text-numbered-paragraph | table-table | draw-a | text-section | text-table-of-content | text-illustration-index | text-table-index | text-object-index | text-user-index | text-alphabetical-index | text-bibliography | shape | change-marks ;
index-content-main ::= text-content | text-index-title ;
text-list-level-style-image-attr ::= common-draw-data-attlist | office-binary-data ;
presentation-animation-elements ::= presentation-show-shape | presentation-show-text | presentation-hide-shape | presentation-hide-text | presentation-dim | presentation-play ;
shapes3d ::= dr3d-scene | dr3d-extrude | dr3d-sphere | dr3d-rotate | dr3d-cube ;
shape ::= draw-rect | draw-line | draw-polyline | draw-polygon | draw-regular-polygon | draw-path | draw-circle | draw-ellipse | draw-g | draw-page-thumbnail | draw-frame | draw-measure | draw-caption | draw-connector | draw-control | dr3d-scene | draw-custom-shape ;
--------------------odf::opendoc-1.0.bgf--------------------
any-date ::= number-day | number-month | number-year | number-era | number-day-of-week | number-week-of-year | number-quarter | number-hours | number-am-pm | number-minutes | number-seconds ;
any-time ::= number-hours | number-am-pm | number-minutes | number-seconds ;
common-table-range-attlist ::= common-table-cell-address-attlist | common-table-cell-range-address-attlist ;
any-number ::= number-number | number-scientific-number | number-fraction ;
text-table-of-content-children ::= text-index-entry-chapter | text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop | text-index-entry-link-start | text-index-entry-link-end ;
text-content ::= text-h | text-p | text-list | text-numbered-paragraph | table-table | draw-a | text-section | text-table-of-content | text-illustration-index | text-table-index | text-object-index | text-user-index | text-alphabetical-index | text-bibliography | shape | change-marks ;
index-content-main ::= text-content | text-index-title ;
text-list-level-style-image-attr ::= common-draw-data-attlist | office-binary-data ;
presentation-animation-elements ::= presentation-show-shape | presentation-show-text | presentation-hide-shape | presentation-hide-text | presentation-dim | presentation-play ;
shapes3d ::= dr3d-scene | dr3d-extrude | dr3d-sphere | dr3d-rotate | dr3d-cube ;
shape ::= draw-rect | draw-line | draw-polyline | draw-polygon | draw-regular-polygon | draw-path | draw-circle | draw-ellipse | draw-g | draw-page-thumbnail | draw-frame | draw-measure | draw-caption | draw-connector | draw-control | dr3d-scene | draw-custom-shape ;
--------------------odf::opendoc-1.1-strict.bgf--------------------
any-date ::= number-day | number-month | number-year | number-era | number-day-of-week | number-week-of-year | number-quarter | number-hours | number-am-pm | number-minutes | number-seconds ;
any-time ::= number-hours | number-am-pm | number-minutes | number-seconds ;
common-table-range-attlist ::= common-table-cell-address-attlist | common-table-cell-range-address-attlist ;
any-number ::= number-number | number-scientific-number | number-fraction ;
text-table-of-content-children ::= text-index-entry-chapter | text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop | text-index-entry-link-start | text-index-entry-link-end ;
text-content ::= text-h | text-p | text-list | text-numbered-paragraph | table-table | draw-a | text-section | text-soft-page-break | text-table-of-content | text-illustration-index | text-table-index | text-object-index | text-user-index | text-alphabetical-index | text-bibliography | shape | change-marks ;
index-content-main ::= text-content | text-index-title ;
text-list-level-style-image-attr ::= common-draw-data-attlist | office-binary-data ;
presentation-animation-elements ::= presentation-show-shape | presentation-show-text | presentation-hide-shape | presentation-hide-text | presentation-dim | presentation-play ;
shapes3d ::= dr3d-scene | dr3d-extrude | dr3d-sphere | dr3d-rotate | dr3d-cube ;
shape ::= draw-rect | draw-line | draw-polyline | draw-polygon | draw-regular-polygon | draw-path | draw-circle | draw-ellipse | draw-g | draw-page-thumbnail | draw-frame | draw-measure | draw-caption | draw-connector | draw-control | dr3d-scene | draw-custom-shape ;
--------------------odf::opendoc-1.1.bgf--------------------
any-date ::= number-day | number-month | number-year | number-era | number-day-of-week | number-week-of-year | number-quarter | number-hours | number-am-pm | number-minutes | number-seconds ;
any-time ::= number-hours | number-am-pm | number-minutes | number-seconds ;
common-table-range-attlist ::= common-table-cell-address-attlist | common-table-cell-range-address-attlist ;
any-number ::= number-number | number-scientific-number | number-fraction ;
text-table-of-content-children ::= text-index-entry-chapter | text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop | text-index-entry-link-start | text-index-entry-link-end ;
text-content ::= text-h | text-p | text-list | text-numbered-paragraph | table-table | draw-a | text-section | text-soft-page-break | text-table-of-content | text-illustration-index | text-table-index | text-object-index | text-user-index | text-alphabetical-index | text-bibliography | shape | change-marks ;
index-content-main ::= text-content | text-index-title ;
text-list-level-style-image-attr ::= common-draw-data-attlist | office-binary-data ;
presentation-animation-elements ::= presentation-show-shape | presentation-show-text | presentation-hide-shape | presentation-hide-text | presentation-dim | presentation-play ;
shapes3d ::= dr3d-scene | dr3d-extrude | dr3d-sphere | dr3d-rotate | dr3d-cube ;
shape ::= draw-rect | draw-line | draw-polyline | draw-polygon | draw-regular-polygon | draw-path | draw-circle | draw-ellipse | draw-g | draw-page-thumbnail | draw-frame | draw-measure | draw-caption | draw-connector | draw-control | dr3d-scene | draw-custom-shape ;
--------------------odf::opendoc-1.2.bgf--------------------
any-date ::= number-day | number-month | number-year | number-era | number-day-of-week | number-week-of-year | number-quarter | number-hours | number-am-pm | number-minutes | number-seconds ;
paragraph-content-or-hyperlink ::= paragraph-content | text-a ;
any-time ::= number-hours | number-am-pm | number-minutes | number-seconds ;
common-table-range-attlist ::= common-table-cell-address-attlist | common-table-cell-range-address-attlist ;
any-number ::= number-number | number-scientific-number | number-fraction ;
text-table-of-content-children ::= text-index-entry-chapter | text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop | text-index-entry-link-start | text-index-entry-link-end ;
text-content ::= text-h | text-p | text-list | text-numbered-paragraph | table-table | text-section | text-soft-page-break | text-table-of-content | text-illustration-index | text-table-index | text-object-index | text-user-index | text-alphabetical-index | text-bibliography | shape | change-marks ;
index-content-main ::= text-content | text-index-title ;
text-list-level-style-image-attr ::= common-draw-data-attlist | office-binary-data ;
presentation-animation-elements ::= presentation-show-shape | presentation-show-text | presentation-hide-shape | presentation-hide-text | presentation-dim | presentation-play ;
shapes3d ::= dr3d-scene | dr3d-extrude | dr3d-sphere | dr3d-rotate | dr3d-cube ;
shape-instance ::= draw-rect | draw-line | draw-polyline | draw-polygon | draw-regular-polygon | draw-path | draw-circle | draw-ellipse | draw-g | draw-page-thumbnail | draw-frame | draw-measure | draw-caption | draw-connector | draw-control | dr3d-scene | draw-custom-shape ;
shape ::= shape-instance | draw-a ;
URIorSafeCURIE ::= anyURI | SafeCURIE ;
--------------------pascal::delphi.bgf--------------------
jump_stm ::= goto_stm | raise_stm ;
nested_decl_section ::= const_section | type_section | var_section | label_decl | procedure_impl_decl ;
anynumber ::= hexnumber | number ;
delphi_file ::= program_file | package_file | unit_file ;
impldecl_section ::= const_section | type_section | var_section | label_decl | procedure_impl_decl | procedure_external_decl | resource_section | exports_section ;
filenamelit ::= charlit | stringlit | qualified_id ;
typed_const ::= array_constant | record_constant | expr ;
array_index ::= ordinal_type | qualified_id ;
name ::= builtinid | id ;
var_init ::= absolute_init | const_init ;
ordinal_type ::= integer_type | char_type | enumerated_type | boolean_type | subrange_type ;
unlabeled_stm ::= sequence_stm | loop_stm | with_stm | try_finally_stm | try_except_stm | selection_stm | jump_stm | assign_stm | call_stm ;
simple_type ::= ordinal_type | real_type ;
intfdecl_section ::= const_section | type_section | var_section | label_decl | procedure_intf_decl | procedure_external_decl | resource_section | exports_section ;
label_id ::= anynumber | id ;
struct_type ::= set_type | array_type | file_type ;
prop_specifier ::= index_spec | accessor_spec | stored_spec | default_spec | implements_spec | dispid_spec ;
class_member ::= var_decl | method_decl | property_decl | variant_section ;
type_spec ::= simple_type | string_type | struct_type | pointer_type | procedural_type | variant_type | class_reference_type | class_type | interface_type | qualified_id ;
--------------------pascal::delphipp.bgf--------------------
pp_litexpr ::= id | charlit | anynumber ;
anynumber ::= number | hexnumber ;
pp_comment ::= cmbracketblock | cmstarblock | cmline ;
filenamelit ::= charlit | stringlit | nested_id ;
--------------------pascal::object.bgf--------------------
property_specifiers ::= index_expession | read_id | write_id | stored_id_OR_stored_expression | default_expression_OR_nodefault | implementsTypeId ;
proc_or_func_heading ::= procedure_heading | function_heading ;
type ::= typeId | simpleType | structType | pointerType | stringType | procedureType | variantType | class_referenceType ;
procedure_section ::= procedure_declaration | function_declaration | constructor_declaration | destructor_declaration ;
typed_constant ::= expression | array_constant | record_constant ;
conditional_statement ::= if_statement | case_statement ;
typeId ::= ref_name | predefinedType ;
restrictedType ::= objectType | classType | interfaceType ;
loop_statement ::= repeating_statement | while_statement | for_statement ;
id_or_expression ::= ref_name | expression ;
simpleType ::= ordinalType | realType ;
ordinalType ::= subrangeType | enumeratedType | ordinal_identifier ;
unlabeled_statement ::= simple_statement | struct_statement ;
type_or_string ::= type | charlit ;
var_assignment ::= absolute_assignment | constant_assignment ;
struct_statement ::= compound_statement | conditional_statement | loop_statement | with_statement | try_finally_statement | try_except_statement | raise_statement ;
method_heading ::= procedure_heading | function_heading | destructor_heading | constructor_heading ;
program ::= program_definition | package_definition | library_definition | unit_definition ;
declaration_section ::= label_declaration_section | constant_section | type_section | var_section | procedure_section ;
--------------------xml::zhang-cordy.bgf--------------------
external_id ::= exid_sys | exid_pub ;
literal ::= charlit | stringlit ;
entityvalue ::= charlit | stringlit | longstringlit | longcharlit ;
cdata ::= token | comment ;
entitydecl ::= gedecl | pedecl ;
sub2_content ::= element | reference | cdsect | pi | comment | regexp ;
misc ::= comment | pi | space | newline ;
atttype ::= stringtype | tokenizedtype | enumeratedtype ;
mixed ::= pcdata_or_name | pcdata ;
nmtoken ::= name | dname ;
enumeratedtype ::= notationtype | enumeration ;
cp_body ::= name | choice | seq ;
children_body ::= choice | seq ;
markupdecl ::= elementdecl | attlistdecl | entitydecl | notationdecl | pi | comment ;
space_or_newline ::= space | newline ;
pedef ::= entityvalue | external_id ;
attvalue ::= stringlit | charlit | longstringlit | longcharlit ;
--------------------xslt::clark.bgf--------------------
instruction.category ::= apply-templates.element | apply-imports.element | call-template.element | element.element | attribute.element | text.element | processing-instruction.element | comment.element | copy.element | value-of.element | number.element | for-each.element | if.element | choose.element | variable.element | copy-of.element | message.element | fallback.element ;
top-level-element.category ::= include.element | strip-space.element | preserve-space.element | template.element | namespace-alias.element | attribute-set.element | variable.element | param.element | key.element | decimal-format.element | output.element ;
--------------------logo::sdf.bgf--------------------
Command ::= BasicCommand | FunctionDef | Call ;
--------------------php::cordy.bgf--------------------
Statement ::= ExprStatement | BlockStatement | IfStatement | WhileStatement | DoStatement | ForStatement | SwitchStatement | ControlStatement | GlobalStaticStatement | UnsetStatement | EchoStatement | PrintStatement | InlineHTMLStatement | ForEachStatement | NullStatement | DeclareStatement | TryStatement | ThrowStatement ;
TopStatement ::= FunctionDecl | ClassDecl | Statement | InterfaceDecl ;
token_or_key ::= token | key ;
IdOrKey ::= id | key ;
NumericConstant ::= number | Hexa | Octa ;
--------------------python::indent-cordy.bgf--------------------
compoundtoken ::= linetoken | newline | comment ;
tab_space ::= tab | space ;
compoundtokensquare ::= linetoken | newline | comment ;
linetoken ::= tab_space | nonblank_token ;
nonblank_token ::= compound | token ;
compoundtokenround ::= linetoken | newline | comment ;
--------------------python::sorochan-cordy.bgf--------------------
stmt_or_newline ::= stmt | endofline ;
integer ::= integernumber | hexinteger | octinteger ;
compound_stmt ::= if_stmt | while_stmt | for_stmt | try_stmt | with_stmt | funcdef | classdef | decorated ;
old_test ::= or_test | old_lambdef ;
flow_stmt ::= break_stmt | continue_stmt | return_stmt | raise_stmt | yield_stmt ;
import_stmt ::= import_name | import_from ;
string ::= stringlit | charlit | longstringlit | longcharlit ;
assign_value ::= yield_expr | testlist ;
small_stmt ::= expr_stmt | print_stmt | del_stmt | pass_stmt | flow_stmt | import_stmt | global_stmt | exec_stmt | assert_stmt ;
--------------------markup::docbook-walsh.bgf--------------------
legalnotice.mix ::= list.class | admon.class | linespecific.class | para.class | blockquote | ndxterm.class | beginpage | local.legalnotice.mix ;
gen.char.class ::= abbrev | acronym | citation | citerefentry | citetitle | emphasis | firstterm | foreignphrase | glossterm | footnote | phrase | quote | trademark | wordasword | personname | local.gen.char.class ;
other.char.class ::= remark | subscript | superscript | local.other.char.class ;
divcomponent.mix ::= list.class | admon.class | linespecific.class | synop.class | para.class | informal.class | formal.class | compound.class | genobj.class | descobj.class | ndxterm.class | beginpage | forms.hook | local.divcomponent.mix ;
formal.class ::= equation | example | figure | table | local.formal.class ;
info.class ::= graphic | mediaobject | legalnotice | modespec | subjectset | keywordset | itermset | bibliocomponent.mix | local.info.class ;
listpreamble.mix ::= admon.class | linespecific.class | synop.class | para.class | informal.class | genobj.class | descobj.class | ndxterm.class | beginpage | local.listpreamble.mix ;
tech.char.class ::= action | application | classname | methodname | interfacename | exceptionname | ooclass | oointerface | ooexception | command | computeroutput | database | email | envar | errorcode | errorname | errortype | errortext | filename | function | guibutton | guiicon | guilabel | guimenu | guimenuitem | guisubmenu | hardware | interface | keycap | keycode | keycombo | keysym | literal | constant | markup | medialabel | menuchoice | mousebutton | option | optional | parameter | prompt | property | replaceable | returnvalue | sgmltag | structfield | structname | symbol | systemitem | token | type | userinput | varname | ebnf.inline.hook | local.tech.char.class ;
ndxterm.class ::= indexterm | local.ndxterm.class ;
refcomponent.mix ::= list.class | admon.class | linespecific.class | synop.class | para.class | informal.class | formal.class | compound.class | genobj.class | descobj.class | ndxterm.class | beginpage | local.refcomponent.mix ;
admon.mix ::= list.class | linespecific.class | synop.class | para.class | informal.class | formal.class | procedure | sidebar | anchor | bridgehead | remark | ndxterm.class | beginpage | local.admon.mix ;
compound.class ::= msgset | procedure | sidebar | qandaset | ebnf.block.hook | local.compound.class ;
book.class ::= book | local.book.class ;
synop.class ::= synopsis | cmdsynopsis | funcsynopsis | classsynopsis | fieldsynopsis | method.synop.class | local.synop.class ;
genobj.class ::= anchor | bridgehead | remark | highlights | local.genobj.class ;
linespecific.class ::= literallayout | programlisting | programlistingco | screen | screenco | screenshot | local.linespecific.class ;
section.class ::= section | local.section.class ;
highlights.mix ::= list.class | admon.class | para.class | ndxterm.class | local.highlights.mix ;
nav.class ::= toc | lot | index | glossary | bibliography | local.nav.class ;
tabentry.mix ::= list.class | admon.class | linespecific.class | para.class | graphic | mediaobject | local.tabentry.mix ;
component.mix ::= list.class | admon.class | linespecific.class | synop.class | para.class | informal.class | formal.class | compound.class | genobj.class | descobj.class | ndxterm.class | beginpage | local.component.mix ;
para.class ::= formalpara | para | simpara | local.para.class ;
glossdef.mix ::= list.class | linespecific.class | synop.class | para.class | informal.class | formal.class | remark | ndxterm.class | beginpage | local.glossdef.mix ;
docinfo.char.class ::= author | authorinitials | corpauthor | modespec | othercredit | productname | productnumber | revhistory | local.docinfo.char.class ;
list.class ::= calloutlist | glosslist | itemizedlist | orderedlist | segmentedlist | simplelist | variablelist | local.list.class ;
revdescription.mix ::= list.class | admon.class | linespecific.class | synop.class | para.class | informal.class | formal.class | procedure | genobj.class | ndxterm.class | local.revdescription.mix ;
method.synop.class ::= constructorsynopsis | destructorsynopsis | methodsynopsis | local.method.synop.class ;
informal.class ::= address | blockquote | graphic | graphicco | mediaobject | mediaobjectco | informalequation | informalexample | informalfigure | informaltable | local.informal.class ;
base.char.class ::= anchor | local.base.char.class ;
index.class ::= index | setindex | local.index.class ;
textobject.mix ::= list.class | admon.class | linespecific.class | para.class | blockquote | local.textobject.mix ;
example.mix ::= list.class | linespecific.class | synop.class | para.class | informal.class | ndxterm.class | beginpage | local.example.mix ;
chapter.class ::= chapter | local.chapter.class ;
qandaset.mix ::= list.class | admon.class | linespecific.class | synop.class | para.class | informal.class | formal.class | procedure | genobj.class | ndxterm.class | local.qandaset.mix ;
bibliocomponent.mix ::= abbrev | abstract | address | artpagenums | author | authorgroup | authorinitials | bibliomisc | biblioset | collab | confgroup | contractnum | contractsponsor | copyright | corpauthor | corpname | date | edition | editor | invpartnumber | isbn | issn | issuenum | orgname | biblioid | citebiblioid | bibliosource | bibliorelation | bibliocoverage | othercredit | pagenums | printhistory | productname | productnumber | pubdate | publisher | publishername | pubsnumber | releaseinfo | revhistory | seriesvolnums | subtitle | title | titleabbrev | volumenum | citetitle | personname | person.ident.mix | ndxterm.class | local.bibliocomponent.mix ;
link.char.class ::= link | olink | ulink | local.link.char.class ;
partcontent.mix ::= appendix.class | chapter.class | nav.class | article.class | preface | refentry.class | reference | local.partcontent.mix ;
admon.class ::= caution | important | note | tip | warning | local.admon.class ;
xref.char.class ::= footnoteref | xref | local.xref.char.class ;
appendix.class ::= appendix | local.appendix.class ;
figure.mix ::= linespecific.class | synop.class | informal.class | ndxterm.class | beginpage | local.figure.mix ;
mediaobject.mix ::= videoobject | audioobject | imageobject | textobject | local.mediaobject.mix ;
descobj.class ::= abstract | authorblurb | epigraph | local.descobj.class ;
inlineobj.char.class ::= inlinegraphic | inlinemediaobject | inlineequation | local.inlineobj.char.class ;
para.mix ::= list.class | admon.class | linespecific.class | informal.class | formal.class | local.para.mix ;
footnote.mix ::= list.class | linespecific.class | synop.class | para.class | informal.class | local.footnote.mix ;
indexdivcomponent.mix ::= itemizedlist | orderedlist | variablelist | simplelist | linespecific.class | synop.class | para.class | informal.class | anchor | remark | link.char.class | beginpage | local.indexdivcomponent.mix ;
sidebar.mix ::= list.class | admon.class | linespecific.class | synop.class | para.class | informal.class | formal.class | procedure | genobj.class | ndxterm.class | beginpage | local.sidebar.mix ;
tbl.entry.mdl ::= para.char.mix | tabentry.mix ;
refentry.class ::= refentry | local.refentry.class ;
person.ident.mix ::= honorific | firstname | surname | lineage | othername | affiliation | authorblurb | contrib | local.person.ident.mix ;
article.class ::= article | local.article.class ;
--------------------markup::mathml-furubayashi.bgf--------------------
mml.plschema ::= mml.pgenschema | mml.pscrschema | mml.ptabschema ;
mml.ctrigop ::= mml.sin.qname | mml.cos.qname | mml.tan.qname | mml.sec.qname | mml.csc.qname | mml.cot.qname | mml.sinh.qname | mml.cosh.qname | mml.tanh.qname | mml.sech.qname | mml.csch.qname | mml.coth.qname | mml.arcsin.qname | mml.arccos.qname | mml.arctan.qname | mml.arccosh.qname | mml.arccot.qname | mml.arccoth.qname | mml.arccsc.qname | mml.arccsch.qname | mml.arcsec.qname | mml.arcsech.qname | mml.arcsinh.qname | mml.arctanh.qname ;
mml.cfuncop1ary ::= mml.inverse.qname | mml.ident.qname | mml.domain.qname | mml.codomain.qname | mml.image.qname ;
mml.cop1ary ::= mml.cfuncop1ary | mml.carithop1ary | mml.clogicop1ary | mml.ccalcop1ary | mml.ctrigop | mml.clalgop1ary | mml.csetop1ary ;
mml.c0ary ::= mml.integers.qname | mml.reals.qname | mml.rationals.qname | mml.naturalnumbers.qname | mml.complexes.qname | mml.primes.qname | mml.exponentiale.qname | mml.imaginaryi.qname | mml.notanumber.qname | mml.true.qname | mml.false.qname | mml.emptyset.qname | mml.eulergamma.qname | mml.infinity.qname ;
mml.peschema ::= mml.maligngroup.qname | mml.malignmark.qname ;
mml.cquantifier ::= mml.lowlimit.qname | mml.uplimit.qname | mml.bvar.qname | mml.degree.qname | mml.logbase.qname | mml.momentabout.qname | mml.domainofapplication.qname ;
mml.ccalcop ::= mml.log.qname | mml.int.qname | mml.diff.qname | mml.partialdiff.qname | mml.divergence.qname | mml.grad.qname | mml.curl.qname | mml.laplacian.qname ;
mml.Content ::= mml.ctoken | mml.cspecial | mml.cother | mml.csemantics | mml.c0ary | mml.cconstructor | mml.cquantifier | mml.cop1ary | mml.cop2ary | mml.copnary | mml.copmisc | mml.crel2ary | mml.crelnary ;
mml.pscrschema ::= mml.msub.qname | mml.msup.qname | mml.msubsup.qname | mml.munder.qname | mml.mover.qname | mml.munderover.qname | mml.mmultiscripts.qname ;
mml.pscreschema ::= mml.mprescripts.qname | mml.none.qname ;
mml.crelnary ::= mml.cgenrelnary | mml.csetrelnary ;
mml.csetrelnary ::= mml.subset.qname | mml.prsubset.qname ;
mml.cstatopnary ::= mml.mean.qname | mml.sdev.qname | mml.variance.qname | mml.median.qname | mml.mode.qname ;
mml.cother ::= mml.condition.qname | mml.declare.qname | mml.sep.qname ;
mml.csetrel2ary ::= mml.in.qname | mml.notin.qname | mml.notsubset.qname | mml.notprsubset.qname ;
mml.crel2ary ::= mml.cgenrel2ary | mml.csetrel2ary | mml.cseqrel2ary ;
mml.ptoken ::= mml.mi.qname | mml.mn.qname | mml.mo.qname | mml.mtext.qname | mml.ms.qname ;
mml.clalgop1ary ::= mml.determinant.qname | mml.transpose.qname ;
mml.ptabschema ::= mml.mtable.qname | mml.mtr.qname | mml.mlabeledtr.qname | mml.mtd.qname ;
mml.clogicopquant ::= mml.exists.qname | mml.forall.qname ;
mml.pgenschema ::= mml.mrow.qname | mml.mfrac.qname | mml.msqrt.qname | mml.mroot.qname | mml.menclose.qname | mml.mstyle.qname | mml.merror.qname | mml.mpadded.qname | mml.mphantom.qname | mml.mfenced.qname ;
mml.carithop1ary ::= mml.abs.qname | mml.conjugate.qname | mml.exp.qname | mml.factorial.qname | mml.arg.qname | mml.real.qname | mml.imaginary.qname | mml.floor.qname | mml.ceiling.qname ;
mml.cfuncopnary ::= mml.fn.qname | mml.compose.qname ;
mml.cseqop ::= mml.sum.qname | mml.product.qname | mml.limit.qname ;
mml.Presentation ::= mml.ptoken | mml.petoken | mml.pscreschema | mml.plschema | mml.peschema | mml.pactions ;
mml.copnary ::= mml.cfuncopnary | mml.carithopnary | mml.clogicopnary | mml.csetopnary | mml.cstatopnary | mml.clalgopnary ;
mml.csetopnary ::= mml.union.qname | mml.intersect.qname | mml.cartesianproduct.qname ;
mml.cconstructor ::= mml.interval.qname | mml.list.qname | mml.matrix.qname | mml.matrixrow.qname | mml.set.qname | mml.vector.qname | mml.piecewise.qname ;
mml.cspecial ::= mml.apply.qname | mml.reln.qname | mml.lambda.qname ;
mml.cop2ary ::= mml.carithop2ary | mml.clogicop2ary | mml.clalgop2ary | mml.csetop2ary ;
mml.clogicopnary ::= mml.and.qname | mml.or.qname | mml.xor.qname ;
mml.ctoken ::= mml.csymbol.qname | mml.ci.qname | mml.cn.qname ;
mml.copmisc ::= mml.carithoproot | mml.carithop1or2ary | mml.ccalcop | mml.cseqop | mml.cstatopmoment | mml.clogicopquant ;
mml.csemantics ::= mml.semantics.qname | mml.annotation.qname | mml.annotation-xml.qname ;
mml.PresInCont ::= mml.ptoken | mml.petoken | mml.plschema | mml.peschema | mml.pactions ;
mml.ContInPres ::= mml.ci.qname | mml.csymbol.qname | mml.cn.qname | mml.c0ary | mml.apply.qname | mml.fn.qname | mml.lambda.qname | mml.reln.qname | mml.cconstructor | mml.semantics.qname | mml.declare.qname ;
mml.clalgop2ary ::= mml.vectorproduct.qname | mml.scalarproduct.qname | mml.outerproduct.qname ;
mml.carithopnary ::= mml.plus.qname | mml.times.qname | mml.max.qname | mml.min.qname | mml.gcd.qname | mml.lcm.qname ;
mml.cgenrelnary ::= mml.eq.qname | mml.leq.qname | mml.lt.qname | mml.geq.qname | mml.gt.qname | mml.equivalent.qname | mml.approx.qname ;
mml.carithop2ary ::= mml.quotient.qname | mml.divide.qname | mml.power.qname | mml.rem.qname ;
mml.cgenrel2ary ::= mml.neq.qname | mml.factorof.qname ;
--------------------markup::pnml-booleans.bgf--------------------
BooleanOperator ::= And | Or | Imply | Not ;
Operator ::= Equality | Inequality ;
--------------------markup::pnml-cyclicenumerations.bgf--------------------
CyclicEnumOperator ::= Successor | Predecessor ;
--------------------markup::pnml-ext-inhibitor.bgf--------------------
netobject.content ::= page.content | place.content | transition.content | refplace.content | reftrans.content | arc.content ;
--------------------markup::pnml-ext-reset.bgf--------------------
netobject.content ::= page.content | place.content | transition.content | refplace.content | reftrans.content | arc.content ;
--------------------markup::pnml-ext-resetinhibitor.bgf--------------------
netobject.content ::= page.content | place.content | transition.content | refplace.content | reftrans.content | arc.content ;
--------------------markup::pnml-finiteintranges.bgf--------------------
FiniteIntRangeOperator ::= FIRLessThan | FIRLessThanOrEqual | FIRGreaterThan | FIRGreaterThanOrEqual ;
--------------------markup::pnml-highlevelnet.bgf--------------------
Sort ::= BuiltInSort | MultisetSort | ProductSort | UserSort ;
CyclicEnumOperator ::= Successor | Predecessor ;
PartitionOperator ::= PartitionLessThan | PartitionGreaterThan | PartitionElementOf ;
Term ::= Variable | Operator ;
BooleanOperator ::= And | Or | Imply | Not ;
Number ::= Natural | Positive | Integer ;
netobject.content ::= page.content | place.content | transition.content | refplace.content | reftrans.content | arc.content ;
StringOperator ::= StringLessThan | StringLessThanOrEqual | StringGreaterThan | StringGreaterThanOrEqual | StringConcatenation | StringAppend | StringLength | Substring ;
IntegerOperator ::= Addition | Subtraction | Multiplication | Division | Modulo | GreaterThan | GreaterThanOrEqual | LessThan | LessThanOrEqual ;
ListOperator ::= ListAppend | ListConcatenation | MakeList | ListLength | MemberAtIndex | Sublist ;
FiniteIntRangeOperator ::= FIRLessThan | FIRLessThanOrEqual | FIRGreaterThan | FIRGreaterThanOrEqual ;
--------------------markup::pnml-hlpng.bgf--------------------
Sort ::= BuiltInSort | MultisetSort | ProductSort | UserSort ;
Term ::= Variable | Operator ;
BooleanOperator ::= And | Or | Imply | Not ;
Declaration ::= SortDeclaration | VariableDeclaration | OperatorDeclaration ;
netobject.content ::= page.content | place.content | transition.content | refplace.content | reftrans.content | arc.content ;
--------------------markup::pnml-integers.bgf--------------------
Number ::= Natural | Positive | Integer ;
IntegerOperator ::= Addition | Subtraction | Multiplication | Division | Modulo | GreaterThan | GreaterThanOrEqual | LessThan | LessThanOrEqual ;
--------------------markup::pnml-lists.bgf--------------------
ListOperator ::= ListAppend | ListConcatenation | MakeList | ListLength | MemberAtIndex | Sublist ;
--------------------markup::pnml-multisets.bgf--------------------
MultisetOperator ::= Add | All | NumberOf | Subtract | ScalarProduct | Empty ;
BuiltInOperator ::= Cardinality | CardinalityOf | Contains ;
--------------------markup::pnml-partitions.bgf--------------------
PartitionOperator ::= PartitionLessThan | PartitionGreaterThan | PartitionElementOf ;
--------------------markup::pnml-pnmlcoremodel.bgf--------------------
netobject.content ::= page.content | place.content | transition.content | refplace.content | reftrans.content | arc.content ;
--------------------markup::pnml-ptnet.bgf--------------------
netobject.content ::= page.content | place.content | transition.content | refplace.content | reftrans.content | arc.content ;
--------------------markup::pnml-strings.bgf--------------------
StringOperator ::= StringLessThan | StringLessThanOrEqual | StringGreaterThan | StringGreaterThanOrEqual | StringConcatenation | StringAppend | StringLength | Substring ;
--------------------markup::pnml-symmetricnet.bgf--------------------
Sort ::= BuiltInSort | MultisetSort | ProductSort | UserSort ;
CyclicEnumOperator ::= Successor | Predecessor ;
PartitionOperator ::= PartitionLessThan | PartitionGreaterThan | PartitionElementOf ;
Term ::= Variable | Operator ;
BooleanOperator ::= And | Or | Imply | Not ;
Declaration ::= SortDeclaration | VariableDeclaration | OperatorDeclaration ;
Number ::= Natural | Positive | Integer ;
netobject.content ::= page.content | place.content | transition.content | refplace.content | reftrans.content | arc.content ;
IntegerOperator ::= Addition | Subtraction | Multiplication | Division | Modulo | GreaterThan | GreaterThanOrEqual | LessThan | LessThanOrEqual ;
FiniteIntRangeOperator ::= FIRLessThan | FIRLessThanOrEqual | FIRGreaterThan | FIRGreaterThanOrEqual ;
--------------------markup::pnml-terms.bgf--------------------
Sort ::= BuiltInSort | MultisetSort | ProductSort | UserSort ;
Term ::= Variable | Operator ;
Declaration ::= SortDeclaration | VariableDeclaration | OperatorDeclaration ;
Operator ::= BuiltInOperator | BuiltInConstant | MultisetOperator | Tuple | UserOperator ;
--------------------markup::svg-furubayashi-basic.bgf--------------------
SVG.Script.class ::= SVG.script | SVG.Script.extra.class ;
SVG.Description.class ::= SVG.desc | SVG.title | SVG.metadata | SVG.Description.extra.class ;
SVG.Image.class ::= SVG.image | SVG.Image.extra.class ;
SVG.View.class ::= SVG.view | SVG.View.extra.class ;
SVG.Structure.class ::= SVG.svg | SVG.g | SVG.defs | SVG.symbol | SVG.Use.class | SVG.Structure.extra.class ;
SVG.Style.class ::= SVG.style | SVG.Style.extra.class ;
SVG.Pattern.class ::= SVG.pattern | SVG.Pattern.extra.class ;
SVG.FilterPrimitive.class ::= SVG.feBlend | SVG.feColorMatrix | SVG.feComponentTransfer | SVG.feComposite | SVG.feFlood | SVG.feGaussianBlur | SVG.feImage | SVG.feMerge | SVG.feOffset | SVG.feTile | SVG.FilterPrimitive.extra.class ;
SVG.TextContent.class ::= SVG.tspan | SVG.tref | SVG.textPath | SVG.altGlyph | SVG.TextContent.extra.class ;
SVG.Filter.class ::= SVG.filter | SVG.Filter.extra.class ;
SVG.Profile.class ::= SVG.color-profile | SVG.Profile.extra.class ;
SVG.Extensibility.class ::= SVG.foreignObject | SVG.Extensibility.extra.class ;
SVG.Use.class ::= SVG.use | SVG.Use.extra.class ;
SVG.Hyperlink.class ::= SVG.a | SVG.Hyperlink.extra.class ;
SVG.Conditional.class ::= SVG.switch | SVG.Conditional.extra.class ;
SVG.Gradient.class ::= SVG.linearGradient | SVG.radialGradient | SVG.Gradient.extra.class ;
SVG.Clip.class ::= SVG.clipPath | SVG.Clip.extra.class ;
SVG.Animation.class ::= SVG.animate | SVG.set | SVG.animateMotion | SVG.animateColor | SVG.animateTransform | SVG.Animation.extra.class ;
SVG.Font.class ::= SVG.font | SVG.font-face | SVG.Font.extra.class ;
SVG.Text.class ::= SVG.text | SVG.altGlyphDef | SVG.Text.extra.class ;
SVG.Shape.class ::= SVG.path | SVG.rect | SVG.circle | SVG.line | SVG.ellipse | SVG.polyline | SVG.polygon | SVG.Shape.extra.class ;
SVG.Mask.class ::= SVG.mask | SVG.Mask.extra.class ;
--------------------markup::svg-furubayashi-tiny.bgf--------------------
SVG.Script.class ::= SVG.script | SVG.Script.extra.class ;
SVG.Description.class ::= SVG.desc | SVG.title | SVG.metadata | SVG.Description.extra.class ;
SVG.Image.class ::= SVG.image | SVG.Image.extra.class ;
SVG.View.class ::= SVG.view | SVG.View.extra.class ;
SVG.Extensibility.class ::= SVG.foreignObject | SVG.Extensibility.extra.class ;
SVG.Use.class ::= SVG.use | SVG.Use.extra.class ;
SVG.Hyperlink.class ::= SVG.a | SVG.Hyperlink.extra.class ;
SVG.Conditional.class ::= SVG.switch | SVG.Conditional.extra.class ;
SVG.Animation.class ::= SVG.animate | SVG.set | SVG.animateMotion | SVG.animateColor | SVG.animateTransform | SVG.Animation.extra.class ;
SVG.Structure.class ::= SVG.g | SVG.defs | SVG.Use.class | SVG.Structure.extra.class ;
SVG.Font.class ::= SVG.font | SVG.font-face | SVG.Font.extra.class ;
SVG.Style.class ::= SVG.style | SVG.Style.extra.class ;
SVG.Shape.class ::= SVG.path | SVG.rect | SVG.circle | SVG.line | SVG.ellipse | SVG.polyline | SVG.polygon | SVG.Shape.extra.class ;
SVG.Text.class ::= SVG.text | SVG.Text.extra.class ;
--------------------markup::svg-furubayashi.bgf--------------------
SVG.Script.class ::= SVG.script | SVG.Script.extra.class ;
SVG.Description.class ::= SVG.desc | SVG.title | SVG.metadata | SVG.Description.extra.class ;
SVG.Image.class ::= SVG.image | SVG.Image.extra.class ;
SVG.View.class ::= SVG.view | SVG.View.extra.class ;
SVG.Structure.class ::= SVG.svg | SVG.g | SVG.defs | SVG.symbol | SVG.Use.class | SVG.Structure.extra.class ;
SVG.Style.class ::= SVG.style | SVG.Style.extra.class ;
SVG.Pattern.class ::= SVG.pattern | SVG.Pattern.extra.class ;
SVG.FilterPrimitive.class ::= SVG.feBlend | SVG.feColorMatrix | SVG.feComponentTransfer | SVG.feComposite | SVG.feConvolveMatrix | SVG.feDiffuseLighting | SVG.feDisplacementMap | SVG.feFlood | SVG.feGaussianBlur | SVG.feImage | SVG.feMerge | SVG.feMorphology | SVG.feOffset | SVG.feSpecularLighting | SVG.feTile | SVG.feTurbulence | SVG.FilterPrimitive.extra.class ;
SVG.Marker.class ::= SVG.marker | SVG.Marker.extra.class ;
SVG.TextContent.class ::= SVG.tspan | SVG.tref | SVG.textPath | SVG.altGlyph | SVG.TextContent.extra.class ;
SVG.Filter.class ::= SVG.filter | SVG.Filter.extra.class ;
SVG.Cursor.class ::= SVG.cursor | SVG.Cursor.extra.class ;
SVG.Profile.class ::= SVG.color-profile | SVG.Profile.extra.class ;
SVG.Extensibility.class ::= SVG.foreignObject | SVG.Extensibility.extra.class ;
SVG.Use.class ::= SVG.use | SVG.Use.extra.class ;
SVG.Hyperlink.class ::= SVG.a | SVG.Hyperlink.extra.class ;
SVG.Conditional.class ::= SVG.switch | SVG.Conditional.extra.class ;
SVG.Gradient.class ::= SVG.linearGradient | SVG.radialGradient | SVG.Gradient.extra.class ;
SVG.Clip.class ::= SVG.clipPath | SVG.Clip.extra.class ;
SVG.Animation.class ::= SVG.animate | SVG.set | SVG.animateMotion | SVG.animateColor | SVG.animateTransform | SVG.Animation.extra.class ;
SVG.Font.class ::= SVG.font | SVG.font-face | SVG.Font.extra.class ;
SVG.Text.class ::= SVG.text | SVG.altGlyphDef | SVG.Text.extra.class ;
SVG.Shape.class ::= SVG.path | SVG.rect | SVG.circle | SVG.line | SVG.ellipse | SVG.polyline | SVG.polygon | SVG.Shape.extra.class ;
SVG.Mask.class ::= SVG.mask | SVG.Mask.extra.class ;
--------------------markup::wiki-mediawiki-bnf.bgf--------------------
image-valign-parameter ::= image-valign-baseline | image-valign-sub | image-valign-super | image-valign-top | image-valign-text-top | image-valign-middle | image-valign-bottom | image-valign-text-bottom ;
html-unsafe-symbol ::= unescaped-ampersand | unescaped-less-than | unescaped-greater-than ;
canonical-page-char ::= letter | decimal-digit | underscore ;
image-other-parameter ::= image-param-page | image-param-upright | image-param-border ;
magic-link ::= isbn | rfc-number | pmid-number ;
link ::= internal-link | external-link ;
special-block ::= horizontal-rule | heading | list-item | table | space-block ;
canonical-page-first-char ::= ucase-letter | decimal-digit | underscore ;
table-cell-parameters ::= CSS | html-cell-attributes ;
article ::= special-block-and-more | paragraph-and-more ;
Whitespaces ::= newline | TAB | space ;
table-column ::= table-column-line | table-column-multiline ;
page-char ::= canonical-page-char | space ;
noparse-block ::= nowiki-block | html-block | math-block | pre-block | html-comment ;
image-mode-parameter ::= image-mode-manual-thumb | image-mode-auto-thumb | image-mode-frame | image-mode-frameless ;
page-first-char ::= canonical-page-first-char | lcase-letter ;
image-align-parameter ::= image-align-left | image-align-center | image-align-right | image-align-none ;
space-tab ::= space | TAB ;
text-with-formatting ::= formatting | inline-html | noparse-block | behaviour-switch | html-entity | html-unsafe-symbol | text | random-character ;
table-parameters ::= CSS | html-table-attributes ;
character ::= whitespace-char | non-whitespace-char | html-entity ;
inline-element ::= category-link | link | magic-link | image-inline | gallery-block | media-inline | text-with-formatting ;
image-option ::= image-mode-parameter | image-size-parameter | image-align-parameter | image-valign-parameter | caption | image-other-parameter ;
letter ::= ucase-letter | lcase-letter ;
non-whitespace-char ::= letter | decimal-digit | symbol ;
whitespace-char ::= space-tab | newline ;
formatting ::= bold-italic-toggle | bold-toggle | italic-toggle ;
behaviour-switch ::= behaviourswitch-toc | behaviourswitch-forcetoc | behaviourswitch-notoc | behaviourswitch-noeditsection | behaviourswitch-nogallery ;
list-item ::= indent-item | enumerated-item | bullet-item ;
heading ::= level-6-heading | level-5-heading | level-4-heading | level-3-heading | level-2-heading | level-1-heading ;
EOL ::= newline | EOF ;
--------------------markup::wiki-mediawiki-ebnf.bgf--------------------
header ::= header1 | header2 | header3 | header4 | header5 | header6 ;
include ::= template | tplarg ;
--------------------fl::ecore.bgf--------------------
Exp ::= LiteralExp | ArgumentExp | IfThenElseExp | ApplyExp | BinaryExp ;
BinaryExp ::= PlusExp | MinusExp | EqualExp ;
--------------------fl::emf.bgf--------------------
Expr ::= Apply | Argument | Binary | IfThenElse | Literal ;
--------------------fl::jaxb.bgf--------------------
Expr ::= Apply | Argument | Binary | IfThenElse | Literal ;
--------------------fl::om.bgf--------------------
Expr ::= Apply | Argument | Binary | IfThenElse | Literal ;
--------------------fl::python.bgf--------------------
expr ::= binary | apply | ifThenElse ;
--------------------fl::xsd.bgf--------------------
Expr ::= Literal | Argument | Binary | IfThenElse | Apply ;
--------------------metasyntax::txl.bgf--------------------
typeidOrQuotedLiteral ::= typeid | quotedLiteral ;
--------------------metasyntax::ebnf-bgf.bgf--------------------
expression ::= empty | epsilon | any | value | selectable-expression | marked-expression | repetition-expression | optional-expression | terminal | nonterminal | group-expression ;
--------------------metasyntax::ebnf-iso-1.bgf--------------------
commentless_symbol ::= terminal_character | meta_identifier | integer | terminal_string | special_sequence ;
meta_identifier_character ::= letter | decimal_digit ;
gap_separator ::= space_character | horizontal_tabulation_character | new_line | vertical_tabulation_character | form_feed ;
comment_symbol ::= bracketed_textual_comment | other_character | commentless_symbol ;
terminal_character ::= letter | decimal_digit | concatenate_symbol | defining_symbol | definition_separator_symbol | end_comment_symbol | end_group_symbol | end_option_symbol | end_repeat_symbol | except_symbol | first_quote_symbol | repetition_symbol | second_quote_symbol | special_sequence_symbol | start_comment_symbol | start_group_symbol | start_option_symbol | start_repeat_symbol | terminator_symbol | other_character ;
syntactic_primary ::= optional_sequence | repeated_sequence | grouped_sequence | meta_identifier | terminal_string | special_sequence | empty_sequence ;
gap_free_symbol ::= terminal_character | terminal_string ;
--------------------metasyntax::ebnf-iso-2.bgf--------------------
comment_symbol ::= comment | terminal_string | special_sequence | character ;
primary ::= optional_sequence | repeated_sequence | special_sequence | grouped_sequence | meta_identifier | terminal_string | empty ;
--------------------metasyntax::ebnf-iso-3.bgf--------------------
COMMENT_SYMBOL ::= COMMENT | TERMINAL | SPECIAL_SEQUENCE | CHARACTER ;
PRIMARY ::= OPTIONAL_SEQUENCE | REPEATED_SEQUENCE | SPECIAL_SEQUENCE | GROUPED_SEQUENCE | META_IDENTIFIER | TERMINAL | EMPTY ;
--------------------metasyntax::lll-ldta.bgf--------------------
basis ::= literal | sort ;
--------------------metasyntax::yacc-txl.bgf--------------------
literal ::= quotedLiteral | unquotedLiteral ;
unquotedLiteral ::= yac_id | charlit | stringlit | number | key ;
Ccode_or_token ::= Ccode | token ;
literalOrType ::= literal | type | prec | Ccode ;
yac_literal ::= yac_id | charlit ;
yac_tokdef ::= id | charlit ;
yac_idOrQuotedLiteral ::= yac_id | quotedLiteral ;
--------------------metasyntax::xsd-tennison.bgf--------------------
nestedParticle ::= localElement | groupRef | choice | sequence | any ;
identityConstraint ::= unique | key | keyref ;
simpleDerivation ::= simpleRestriction | list | union ;
schemaTop ::= redefinable | topLevelElement | topLevelAttribute | notation ;
typeDefParticle ::= groupRef | all | choice | sequence ;
redefinable ::= topLevelSimpleType | topLevelComplexType | namedGroup | namedAttributeGroup ;
--------------------tescol::00000.bgf--------------------
literal ::= INT | DOUBLE ;
operatorsymbol ::= ADD | SUB | DIV | MULTI | EXPO ;
syntaxsymbol ::= SEMI | COLON | COMMA | LPAR | RPAR | ASSIGN | QMARK | LBRACE | RBRACE ;
type ::= INTWORD | DOUWORD ;
declaration ::= constdec | vardec | procdec ;
token ::= keyword | WS | identifier | symbol | COMMENT | literal | constantid ;
keyword ::= DONE | TROLLEY | CONTAINS | CHECKOUT | SKIP | CONST | PROC | VAR | IF | THEN | ELSE | WHILE | DO | INTWORD | DOUWORD ;
symbol ::= syntaxsymbol | operatorsymbol | comparisonsymbol ;
compoperator ::= CONJUNCT | DISJUNCT ;
comparisonsymbol ::= EQUALS | NOTEQ | LT | LTE | GT | GTE ;
--------------------tescol::00001.bgf--------------------
statement ::= assignment | conditional | loops | grstatement | SKIP ;
id ::= ID | CID ;
types ::= TYPEI | TYPED ;
declarations ::= constDec | varDec | procDec ;
--------------------tescol::00010.bgf--------------------
booleanOperator ::= EQUAL | NOT_EQUAL | GREATER | GREATER_EQUAL | LESS | LESS_EQUAL ;
bracketedExpr ::= condExpr | arithmeticExpr ;
type ::= INT_TYPE | DOUBLE_TYPE ;
--------------------tescol::00011.bgf--------------------
literal ::= INT | DOUBLE ;
arithmeticoperator ::= ADDITION | SUBTRACT | DIVISION | MULTIPLY | EXP ;
booleanoperator ::= EQUAL | NONEQUAL | LESS | LESSEQUAL | MORE | MOREEQUAL | CONJUNCTION | DISJUNCTION ;
type ::= INTTYPE | DOUBLETYPE ;
identifier ::= ID | CONSTID ;
operator ::= arithmeticoperator | booleanoperator ;
--------------------tescol::00100.bgf--------------------
statement ::= skip | assignment | ifStat | loop ;
type ::= INT | DOUBLE ;
multOperand ::= MULTIPLICATION | DIVISION ;
addOperand ::= ADDITION | SUBTRACTION ;
relational ::= EQUALITY | NON_EQUALITY | LESS | LESS_EQUAL | GREATER_EQUAL | GREATER ;
statements ::= statement | groupStatement ;
--------------------tescol::00101.bgf--------------------
relationals ::= EQUALITY | NON_EQUALITY | L_THAN | LE_THAN | G_THAN | GE_THAN ;
id ::= ID | CONSTID ;
number ::= INT_VAL | DOUBLE_VAL ;
types ::= INTEGER | DOUBLE ;
logical ::= AND | OR ;
statement_main ::= SKIP | if_statement | while_statement | assignment ;
header_declaration ::= const_dec | var_dec | proc_dec ;
--------------------tescol::00110.bgf--------------------
declarations ::= constantDeclaration | variableDeclaration | procedureDeclaration ;
--------------------tescol::00111.bgf--------------------
statement ::= SKIP | assignment | conditional | loop ;
arithEx ::= expr | procedureApplication ;
type ::= INT | DOUBLE ;
identifier ::= ID | CID ;
--------------------tescol::01000.bgf--------------------
nums ::= VARID | CONSTID | INTNUM | DOUBNUM ;
id ::= CONSTID | VARID ;
type ::= INT | DOUBLE ;
statements ::= assign | condstatement | loop ;
comparOps ::= EQ | NEQ | LT | GT | LTE | GTE ;
--------------------tescol::01001.bgf--------------------
statement ::= grouped | SKIP | assignment | conditional | loop ;
type ::= INT_T | DOUBLE_T ;
rel_operator ::= EQ | NEQ | LESS | LESSEQ | GRT | GRTEQ ;
declaration ::= const_dec | var_dec | proc_dec ;
typename ::= INT | DOUBLE ;
--------------------tescol::01010.bgf--------------------
logicop ::= AND | OR ;
addsub ::= ADDITION | POSITIVE | SUBTRACTION | NEGATIVE ;
sign ::= POSITIVE | NEGATIVE ;
arithop ::= POSITIVE | NEGATIVE | ADDITION | SUBTRACTION | MUL | DIV | EXP ;
id ::= ID | CONSTID ;
type ::= INT | DOUBLE ;
declaration ::= procdec | constdec | vardec ;
number ::= INUM | NUM ;
positive ::= POSITIVE | ADDITION ;
comparator ::= EQL | NEQL | GRT | GRTE | LST | LSTE ;
negative ::= NEGATIVE | SUBTRACTION ;
vartype ::= CONST | VAR | PROC ;
--------------------tescol::01100.bgf--------------------
type ::= TYPEINT | TYPEDOUBLE ;
identifier ::= ID | constidentifier ;
stat ::= skip | assign | cond | loop ;
booleanSymbols ::= EQUALITY | NONEQUALITY | DIFFERENTOREQUAL | STRICTLYDIFFERENT ;
dec ::= constdec | vardec | procdec ;
--------------------tescol::01101.bgf--------------------
statement ::= conditional | loop | assignment | skip | procedure_call ;
varIDs ::= CID | ID ;
--------------------tescol::01110.bgf--------------------
declaration ::= constDec | varDec | procDec ;
--------------------tescol::01111.bgf--------------------
operations ::= EQUALITY | NONEQUALITY | LESSTHAN | LESSTHANOREQUAL | GREATERTHAN | GREATERTHANOREQUAL ;
number ::= INTKEYWORD | DOUBLEKEYWORD ;
--------------------tescol::10000.bgf--------------------
stat ::= condExpr | SKIP | assign | multStat | ifthenelse | whileloop ;
--------------------tescol::10001.bgf--------------------
type ::= INT | DOUBLE ;
--------------------tescol::10010.bgf--------------------
statement ::= SKIP | assignment | conditional | loop | statementList ;
arithmeticOperator ::= ADD | SUBTRACT | DIVIDE | MULTIPLY | EXPON ;
relationalOperator ::= EQUAL | NOTEQUAL | MORETHAN | LESSTHAN | MORETHANEQUAL | LESSTHANEQUAL ;
type ::= INTKEYWORD | DOUBLEKEYWORD ;
operator ::= DEF | QUESTION | CONJUNC | DISJUNC | arithmeticOperator | relationalOperator ;
--------------------tescol::10011.bgf--------------------
statement ::= SKIP | assignment | conditional | loop ;
type ::= INTEGER | DOUBLE ;
declaration ::= consdec | vardec | procdec ;
number ::= INT | DUB ;
rop ::= EQ | NEQ | LESS | MORE | LESSEQ | MOREEQ ;
--------------------tescol::10100.bgf--------------------
statement ::= statementList | condStatement | expression | assignment | loop | SKIP ;
type ::= INT | DOUBLE ;
--------------------tescol::10101.bgf--------------------
type ::= INT | FLOAT ;
declaration ::= variabledec | constantdec | proceduredec ;
--------------------tescol::10110.bgf--------------------
identifier ::= ID | CID ;
comparator ::= EQUALITY | NON_EQUALITY | LESS_THAN | GREATER_THAN | LESS_THAN_EQ | GREATER_THAN_EQ ;
operator ::= ADD | SUBTRACT | MULTIPLY | DIVIDE | EXPONENTIATION | EQUAL ;
dec ::= constant | var | proc ;
--------------------tescol::10111.bgf--------------------
varproc_id ::= ID_VARPROC | ID_GENERAL ;
type ::= KW_TYPE_INT | KW_TYPE_DOUBLE ;
comparator ::= SYM_EQ | SYM_INEQ | SYM_GT | SYM_NS_GT | SYM_LT | SYM_NS_LT ;
immediate ::= integerNum | doubleNum ;
--------------------tescol::11000.bgf--------------------
relationships ::= EQUALITY | NONEQUALITY | GREATERTHAN | LESSTHAN | GREATEROREQUAL | LESSOREQUAL ;
numbervalues ::= INTEGER | DOUBLE ;
declarations ::= constant | variable | procedure ;
--------------------tescol::11001.bgf--------------------
type ::= TINT | TDOUBLE ;
varid ::= CONSTID | VARID ;
--------------------tescol::11010.bgf--------------------
type ::= INTEGER | FLOATDOUBLE ;
smallId ::= CONSTID | ID ;
--------------------tescol::11011.bgf--------------------
statement ::= assign | SKIP | conditional | loop | statement_group ;
dec_types ::= TYPE_INT | TYPE_DOUBLE ;
ids ::= ID | CONST_ID ;
--------------------tescol::11100.bgf--------------------
type ::= INTTYPE | DOUBLETYPE ;
addop ::= PLUS | MINUS ;
value ::= INT | DOUBLE ;
--------------------tescol::11101.bgf--------------------
type ::= INT | DBLE ;
declaration ::= constdeclaration | vardeclaration | procdeclaration ;
number ::= INTEGER | DOUBLE ;
--------------------tescol::11110.bgf--------------------
type ::= INT | DOUBLE ;
--------------------tescol::11111.bgf--------------------
statement ::= single_statement | multiple_statement ;
id ::= CONSTID | VARID ;
type ::= INT | DOUBLE ;
declaration ::= constant_declaration | variable_declaration | procedure_declaration ;
relational_op ::= EQUAL | NONEQUAL | GREATER | GREATER_EQUAL | LESS | LESS_EQUAL ;
single_statement ::= SKIP | assignment | conditional | loop ;
--------------------tescol::reference.bgf--------------------
statement ::= stmtElem | stmtList ;
EQOP ::= ET | NET ;
RELOP ::= LT | LTE | GT | GTE ;
type ::= INT | DOUB ;
declaration ::= constDecl | varDecl | procDecl ;
number ::= INTEGER | DOUBLE ;
stmtElem ::= SKIP | assign | condSt | loop ;
MULTOP ::= MULT | DIV ;
--------------------slps::cbgf-xsd.bgf--------------------
increasing-decreasing-transformation ::= add-remove | remove-add | appear-disappear | disappear-appear | widen-narrow | narrow-widen | upgrade-downgrade | downgrade-upgrade | unite-split | split-unite ;
decreasing-transformation ::= remove | disappear | narrow | downgrade | split ;
increasing-transformation ::= add | appear | widen | upgrade | unite ;
--------------------slps::ldf-v20.0-xsd.bgf--------------------
section ::= placeholder | simple-section | lexical-section | structured-section | composite-section | list-section ;
--------------------slps::ldf-v20.1-xsd.bgf--------------------
section ::= placeholder | simple-section | lexical-section | structured-section | composite-section | list-section ;
--------------------slps::ldf-v21.0-xsd.bgf--------------------
section ::= placeholder | simple-section | lexical-section | structured-section | composite-section | list-section ;
--------------------slps::ldf-v21.1-xsd.bgf--------------------
section ::= placeholder | simple-section | lexical-section | structured-section | composite-section | list-section ;
--------------------slps::ldf-v22.0-xsd.bgf--------------------
section ::= placeholder | simple-section | lexical-section | structured-section | composite-section | list-section ;
--------------------slps::ldf-v23.0-xsd.bgf--------------------
any-section ::= placeholder | simple-section | lexical-section | structured-section | composite-section | list-section ;
--------------------slps::slps-cbgf-xsd.bgf--------------------
increasing-decreasing-transformation ::= add-remove | remove-add | appear-disappear | disappear-appear | widen-narrow | narrow-widen | upgrade-downgrade | downgrade-upgrade | unite-split | split-unite ;
decreasing-transformation ::= remove | disappear | narrow | downgrade | split ;
increasing-transformation ::= add | appear | widen | upgrade | unite ;
--------------------slps::slps-xbgf-xsd.bgf--------------------
decreasing-transformation ::= remove | disappear | narrow | downgrade | split ;
folding-unfolding-transformation ::= unfold | fold | inline | extract | abridge | detour | unchain | chain ;
concrete-revising-transformation ::= abstractize | concretize | permute ;
transformation ::= folding-unfolding-transformation | refactoring-transformation | increasing-transformation | decreasing-transformation | concrete-revising-transformation | abstract-revising-transformation | decorative-transformation | rename | reroot | strip | dump | bypass ;
increasing-transformation ::= add | appear | widen | upgrade | unite ;
decorative-transformation ::= designate | unlabel | deanonymize | anonymize ;
abstract-revising-transformation ::= define | undefine | redefine | inject | project | replace ;
refactoring-transformation ::= massage | distribute | factor | deyaccify | yaccify | eliminate | introduce | import | vertical | horizontal | equate | rassoc | lassoc | iterate | splitT ;
--------------------slps::slps-xedd.bgf--------------------
step ::= rename | introduce | eliminate ;
--------------------slps::slps-xldf.bgf--------------------
decreasing-transformation ::= remove | disappear | narrow | downgrade | split ;
folding-unfolding-transformation ::= unfold | fold | inline | extract | abridge | detour | unchain | chain ;
concrete-revising-transformation ::= abstractize | concretize | permute ;
transformation ::= folding-unfolding-transformation | refactoring-transformation | increasing-transformation | decreasing-transformation | concrete-revising-transformation | abstract-revising-transformation | decorative-transformation | rename | reroot | strip | dump | bypass ;
increasing-transformation ::= add | appear | widen | upgrade | unite ;
decorative-transformation ::= designate | unlabel | deanonymize | anonymize ;
abstract-revising-transformation ::= define | undefine | redefine | inject | project | replace ;
refactoring-transformation ::= massage | distribute | factor | deyaccify | yaccify | eliminate | introduce | import | vertical | horizontal | equate | rassoc | lassoc | iterate | splitT ;
documentTransformation ::= addFigure | addSection | addSubsection | append | changeRole | combine | drop | extractSubsection | hyperlinkify | insert | importGrammar | importSample | place | retitle | removeSection | transformDocument | transformGrammar ;
--------------------slps::xbgf-xsd.bgf--------------------
decreasing-transformation ::= remove | disappear | narrow | downgrade | split ;
folding-unfolding-transformation ::= unfold | fold | inline | extract | abridge | detour | unchain | chain ;
concrete-revising-transformation ::= abstractize | concretize | permute ;
transformation ::= folding-unfolding-transformation | refactoring-transformation | increasing-transformation | decreasing-transformation | concrete-revising-transformation | abstract-revising-transformation | decorative-transformation | rename | reroot | strip | dump | bypass ;
increasing-transformation ::= add | appear | widen | upgrade | unite ;
decorative-transformation ::= designate | unlabel | deanonymize | anonymize ;
abstract-revising-transformation ::= define | undefine | redefine | inject | project | replace ;
refactoring-transformation ::= massage | distribute | factor | deyaccify | yaccify | eliminate | introduce | import | vertical | horizontal | equate | rassoc | lassoc | iterate | splitT ;
