--------------------c::bruneliere.bgf--------------------
String ::= string() ;
--------------------cpp::bruneliere.bgf--------------------
String ::= string() ;
--------------------cs::csharp-bruneliere.bgf--------------------
String ::= string() ;
--------------------java::jdt.bgf--------------------
String ::= string() ;
--------------------java::java-5-habelitz.bgf--------------------
CHARACTER_LITERAL ::= "\'" ESCAPE_SEQUENCE | string() "\'" ;
STRING_LITERAL ::= """ (ESCAPE_SEQUENCE | string())* """ ;
--------------------java::jvm-level0.bgf--------------------
Instruction ::= (fieldRef::(opcode::integer() owner::string() name::string() description::string())) | (increment::(index::integer() amount::integer())) | (instruction::(opcode::integer())) | (integer::(opcode::integer() operand::integer())) | (jump::(opcode::integer() labelIndex::integer())) | (label::(index::integer())) | (lineNumber::(line::integer() labelIndex::integer())) | (localVariable::(opcode::integer() index::integer())) | (loadConstantString::(stringValue::string())) | (loadConstantInteger::(integerValue::integer())) | (loadConstantLong::(longValue::integer())) | (loadConstantFloat::(floatValue::integer())) | (loadConstantDouble::(doubleValue::integer())) | (lookupSwitch::(defaultLabelIndex::integer() keys::(integer()*) cases::(integer()*))) | (method::(opcode::integer() owner::string() name::string() description::string())) | (multiANewArray::(description::string() dimensions::integer())) | (tableSwitch::(minIndex::integer() maxIndex::integer() defaultLabelIndex::integer() cases::(integer()*))) | (type::(opcode::integer() description::string())) ;
TryCatchBlock ::= (tryCatchBlock::(startLabelIndex::integer() endLabelIndex::integer() handlerLabelIndex::integer() type::string())) | (finallyBlock::(startLabelIndex::integer() endLabelIndex::integer() handlerLabelIndex::integer())) ;
Field ::= (field::(access::integer() name::string() description::string() signature::string() value::α)) | (field::(access::integer() name::string() description::string() signature::string())) ;
Class ::= (class::(version::integer() access::integer() name::string() signature::string() superName::string() interfaces::(string()*) sourceFile::string() sourceDebug::string() outerClass::string() outerMethod::string() outerMethodDescription::string() innerClasses::(InnerClass*) fields::(Field*) methods::(Method*))) | (class::(version::integer() access::integer() name::string() signature::string() superName::string() interfaces::(string()*) innerClasses::(InnerClass*) fields::(Field*) methods::(Method*))) ;
LocalVariable ::= localVariable::(name::string() description::string() signature::string() startLabelIndex::integer() endLabelIndex::integer() index::integer()) ;
InnerClass ::= (innerClass::(name::string() outerName::string() innerName::string() access::integer())) | (innerClass::(name::string() access::integer())) ;
Method ::= method::(access::integer() name::string() description::string() signature::string() exceptions::(string()*) instructions::(Instruction*) tryCatchBlocks::(TryCatchBlock*) localVariables::(LocalVariable*)) ;
--------------------java::java-5-parr.bgf--------------------
StringLiteral ::= """ (EscapeSequence | string())* """ ;
CharacterLiteral ::= "\'" EscapeSequence | string() "\'" ;
--------------------java::java-5-stahl.bgf--------------------
CHAR_LITERAL ::= "\'" ESC | string() "\'" ;
STRING_LITERAL ::= """ (ESC | string())* """ ;
--------------------java::java-5-studman.bgf--------------------
CHAR_LITERAL ::= "\'" ESC | string() "\'" ;
STRING_LITERAL ::= """ (ESC | string())* """ ;
--------------------java::java-1-jouault.bgf--------------------
String ::= string() ;
--------------------java::java-1-touzet.bgf--------------------
String ::= string() ;
--------------------java::java-3-bruneliere.bgf--------------------
String ::= string() ;
--------------------java::java-5-giquel.bgf--------------------
String ::= string() ;
--------------------java::jvm-level1.bgf--------------------
Instruction ::= (getStatic::(owner::string() name::string() description::string())) | (putStatic::(owner::string() name::string() description::string())) | (getField::(owner::string() name::string() description::string())) | (putField::(owner::string() name::string() description::string())) | (increment::(index::integer() amount::integer())) | (nop::ε) | (aConstNull::ε) | (iConstM1::ε) | (iConst0::ε) | (iConst1::ε) | (iConst2::ε) | (iConst3::ε) | (iConst4::ε) | (iConst5::ε) | (lConst0::ε) | (lConst1::ε) | (fConst0::ε) | (fConst1::ε) | (fConst2::ε) | (dConst0::ε) | (dConst1::ε) | (iaLoad::ε) | (laLoad::ε) | (faLoad::ε) | (daLoad::ε) | (aaLoad::ε) | (baLoad::ε) | (caLoad::ε) | (saLoad::ε) | (iaStore::ε) | (laStore::ε) | (faStore::ε) | (daStore::ε) | (aaStore::ε) | (baStore::ε) | (caStore::ε) | (saStore::ε) | (pop::ε) | (pop2::ε) | (dup::ε) | (dupX1::ε) | (dupX2::ε) | (dup2::ε) | (dup2X1::ε) | (dup2X2::ε) | (swap::ε) | (iAdd::ε) | (lAdd::ε) | (fAdd::ε) | (dAdd::ε) | (iSub::ε) | (lSub::ε) | (fSub::ε) | (dSub::ε) | (iMul::ε) | (lMul::ε) | (fMul::ε) | (dMul::ε) | (iDiv::ε) | (lDiv::ε) | (fDiv::ε) | (dDiv::ε) | (iRem::ε) | (lRem::ε) | (fRem::ε) | (dRem::ε) | (iNeg::ε) | (lNeg::ε) | (fNeg::ε) | (dNeg::ε) | (iShl::ε) | (lShl::ε) | (iShr::ε) | (lShr::ε) | (iuShr::ε) | (luShr::ε) | (iAnd::ε) | (lAnd::ε) | (iOr::ε) | (lOr::ε) | (iXor::ε) | (lXor::ε) | (i2l::ε) | (i2f::ε) | (i2d::ε) | (l2i::ε) | (l2f::ε) | (l2d::ε) | (f2i::ε) | (f2l::ε) | (f2d::ε) | (d2i::ε) | (d2l::ε) | (d2f::ε) | (i2b::ε) | (i2c::ε) | (i2s::ε) | (lCmp::ε) | (fCmpL::ε) | (fCmpG::ε) | (dCmpL::ε) | (dCmpH::ε) | (iReturn::ε) | (lReturn::ε) | (fReturn::ε) | (dReturn::ε) | (aReturn::ε) | (return::ε) | (arrayLength::ε) | (aThrow::ε) | (monitorEnter::ε) | (monitorExit::ε) | (biPush::(operand::integer())) | (siPush::(operand::integer())) | (newArray::(operand::integer())) | (ifEq::(label::integer())) | (ifNe::(label::integer())) | (ifLt::(label::integer())) | (ifGe::(label::integer())) | (ifGt::(label::integer())) | (ifLe::(label::integer())) | (ifICmpEq::(label::integer())) | (ifICmpNe::(label::integer())) | (ifICmpLt::(label::integer())) | (ifICmpGe::(label::integer())) | (ifICmpGt::(label::integer())) | (ifICmpLe::(label::integer())) | (ifACmpEq::(label::integer())) | (ifACmpNe::(label::integer())) | (goto::(label::integer())) | (jsr::(label::integer())) | (ifNull::(label::integer())) | (ifNonNull::(label::integer())) | (label::(index::integer())) | (lineNumber::(line::integer() labelIndex::integer())) | (localVariable::(opcode::integer() index::integer())) | (iLoad::(index::integer())) | (lLoad::(index::integer())) | (fLoad::(index::integer())) | (dLoad::(index::integer())) | (aLoad::(index::integer())) | (iStore::(index::integer())) | (lStore::(index::integer())) | (fStore::(index::integer())) | (dStore::(index::integer())) | (aStore::(index::integer())) | (ret::(index::integer())) | (ldcString::(string::string())) | (ldcInt::(int::integer())) | (ldcLong::(long::integer())) | (ldcFloat::(float::integer())) | (ldcDouble::(double::integer())) | (lookupSwitch::(defaultLabel::integer() keys::(integer()*) cases::(integer()*))) | (invokeVirtual::(owner::string() name::string() description::string())) | (invokeSpecial::(owner::string() name::string() description::string())) | (invokeStatic::(owner::string() name::string() description::string())) | (invokeInterface::(owner::string() name::string() description::string())) | (invokeDynamic::(owner::string() name::string() description::string())) | (multiANewArray::(description::string() dimensions::integer())) | (tableSwitch::(min::integer() max::integer() defaultLabel::integer() cases::(integer()*))) | (new::(internalName::string())) | (aNewArray::(internalName::string())) | (checkCast::(internalName::string())) | (instanceOf::(internalName::string())) ;
TryCatchBlock ::= (tryCatchBlock::(startLabelIndex::integer() endLabelIndex::integer() handlerLabelIndex::integer() type::string())) | (finallyBlock::(startLabelIndex::integer() endLabelIndex::integer() handlerLabelIndex::integer())) ;
Field ::= (field::(modifiers::(FieldModifier*) name::string() description::string() signature::string() value::α)) | (field::(modifiers::(FieldModifier*) name::string() description::string() signature::string())) ;
TypeDescriptor ::= (primitive::(type::PrimitiveTypeDescriptor)) | (object::(internalName::string())) | (array::(type::TypeDescriptor)) ;
Class ::= (class::(version::integer() modifiers::(ClassModifier*) name::string() signature::string() superName::string() interfaces::(string()*) sourceFile::string() sourceDebug::string() outerClass::string() outerMethod::string() outerMethodDescription::string() innerClasses::(InnerClass*) fields::(Field*) methods::(Method*))) | (class::(version::integer() modifiers::(ClassModifier*) name::string() signature::string() superName::string() interfaces::(string()*) innerClasses::(InnerClass*) fields::(Field*) methods::(Method*))) ;
LocalVariable ::= localVariable::(name::string() description::string() signature::string() startLabelIndex::integer() endLabelIndex::integer() index::integer()) ;
ClassTypeSignature ::= (topLevel::(internalName::string() args::(TypeArg*))) | (inner::(class::ClassTypeSignature name::string() args::(TypeArg*))) ;
FieldTypeSignature ::= (classType::(class::ClassTypeSignature)) | (array::(type::TypeSignature)) | (typeVar::(name::string())) ;
InnerClass ::= (innerClass::(name::string() outerName::string() innerName::string() modifiers::(ClassModifier*))) | (innerClass::(name::string() modifiers::(ClassModifier*))) ;
Method ::= method::(modifiers::(MethodModifier*) name::string() description::string() signature::string() exceptions::(string()*) instructions::(Instruction*) tryCatchBlocks::(TryCatchBlock*) localVariables::(LocalVariable*)) ;
--------------------basic::vb-glineur.bgf--------------------
String ::= string() ;
--------------------bibtex::bibtex-1.1.bgf--------------------
String ::= string() ;
--------------------bibtex::bibtex-1.2.bgf--------------------
String ::= string() ;
--------------------bibtex::bibtex-1.bgf--------------------
String ::= string() ;
--------------------bibtex::bql.bgf--------------------
String ::= string() ;
--------------------dot::doux.bgf--------------------
String ::= string() ;
--------------------dot::palies.bgf--------------------
String ::= string() ;
--------------------dot::rascal-abstract.bgf--------------------
Id ::= string() ;
Outline ::= (key::integer() args::(string()*))* ;
Attr ::= prop::string() val::Id ;
--------------------html::allilaire.bgf--------------------
String ::= string() ;
--------------------html::clark-basic.bgf--------------------
ContentType.datatype ::= string() ;
param.attlist ::= id.attrib name::string() (value::string())? (valuetype::("data" | "ref" | "object"))? (type::ContentType.datatype)? ;
MediaDesc.datatype ::= string() ;
input.attlist ::= Common.attrib (type::InputType.class)? (name::string())? (value::string())? (checked::"checked")? (size::string())? (maxlength::Number.datatype)? (src::URI.datatype)? (accesskey::Character.datatype)? ;
IDREF.datatype ::= string() ;
NMTOKENS.datatype ::= string() ;
title ::= title::(title.attlist string()) ;
NMTOKEN.datatype ::= string() ;
IDREFS.datatype ::= string() ;
ID.datatype ::= string() ;
Datetime.datatype ::= string() ;
Cell.attrib ::= Common.attrib (abbr::Text.datatype)? (axis::string())? (headers::IDREFS.datatype)? scope.attrib (rowspan::Number.datatype)? (colspan::Number.datatype)? CellHAlign.attrib CellVAlign.attrib ;
meta.attlist ::= I18n.attrib (http-equiv::NMTOKEN.datatype)? (name::NMTOKEN.datatype)? (content::string())? (scheme::string())? ;
option ::= option::(Common.attrib (selected::"selected")? (value::string())? string()) ;
Inline.model ::= (string() | Inline.class)* ;
FPI.datatype ::= string() ;
MultiLength.datatype ::= string() ;
ContentTypes.datatype ::= string() ;
object.attlist ::= Common.attrib (declare::"declare")? (classid::URI.datatype)? (codebase::URI.datatype)? (data::URI.datatype)? (type::ContentType.datatype)? (codetype::ContentType.datatype)? (archive::URIs.datatype)? (standby::Text.datatype)? (height::Length.datatype)? (width::Length.datatype)? (name::string())? (tabindex::Number.datatype)? ;
select.attlist ::= Common.attrib (name::string())? (size::Number.datatype)? (multiple::"multiple")? ;
LanguageCode.datatype ::= string() ;
Length.datatype ::= string() ;
textarea.attlist ::= Common.attrib (name::string())? rows::Number.datatype cols::Number.datatype (accesskey::Character.datatype)? string() ;
URIs.datatype ::= string() ;
Charsets.datatype ::= string() ;
Flow.model ::= (string() | Inline.class | Block.class)* ;
Character.datatype ::= string() ;
Number.datatype ::= string() ;
Script.datatype ::= string() ;
URI.datatype ::= string() ;
Charset.datatype ::= string() ;
Text.datatype ::= string() ;
Pixels.datatype ::= string() ;
--------------------html::clark.bgf--------------------
ContentType.datatype ::= string() ;
MediaDesc.datatype ::= string() ;
Cell.attrib ::= (nowrap::"nowrap")? (bgcolor::Color.datatype)? (width::Pixels.datatype)? (height::Pixels.datatype)? ;
 Cell.attrib ::= Common.attrib (abbr::Text.datatype)? (axis::string())? (headers::IDREFS.datatype)? scope.attrib (rowspan::Number.datatype)? (colspan::Number.datatype)? CellHAlign.attrib CellVAlign.attrib ;
option ::= option::(Common.attrib (selected::"selected")? (value::string())? string()) ;
Inline.model ::= (string() | Inline.class)* ;
FPI.datatype ::= string() ;
ContentTypes.datatype ::= string() ;
style ::= style::(style.attlist string()) ;
Color.datatype ::= string() ;
ol.attlist ::= (type::string())? (compact::"compact")? (start::string())? ;
 ol.attlist ::= Common.attrib ;
LanguageCode.datatype ::= string() ;
Charsets.datatype ::= string() ;
applet.attlist ::= Core.attrib alt::Text.datatype (archive::string())? (code::string())? (codebase::URI.datatype)? (object::string())? height::Length.datatype width::Length.datatype ;
 applet.attlist ::= (align::("top" | "middle" | "bottom" | "left" | "right"))? (hspace::Pixels.datatype)? (vspace::Pixels.datatype)? ;
 applet.attlist ::= name.attlist ;
Font.attrib ::= (size::string())? (color::Color.datatype)? (face::string())? ;
Character.datatype ::= string() ;
ul.attlist ::= (type::string())? (compact::"compact")? ;
 ul.attlist ::= Common.attrib ;
Charset.datatype ::= string() ;
Text.datatype ::= string() ;
Pixels.datatype ::= string() ;
param.attlist ::= id.attrib name::string() (value::string())? (valuetype::("data" | "ref" | "object"))? (type::ContentType.datatype)? ;
name.attlist ::= (name::string())? ;
Block.mix ::= string() | Inline.class ;
 Block.mix ::= Block.class ;
input.attlist ::= (onblur::Script.datatype)? (onchange::Script.datatype)? (onfocus::Script.datatype)? (onselect::Script.datatype)? ;
 input.attlist ::= (disabled::"disabled")? (readonly::"readonly")? (alt::string())? (tabindex::Number.datatype)? (accept::ContentTypes.datatype)? ;
 input.attlist ::= Common.attrib (type::InputType.class)? (name::string())? (value::string())? (checked::"checked")? (size::string())? (maxlength::Number.datatype)? (src::URI.datatype)? (accesskey::Character.datatype)? ;
 input.attlist ::= align.attrib ;
IDREF.datatype ::= string() ;
coords.attrib ::= (coords::string())? ;
NMTOKENS.datatype ::= string() ;
Core.attrib ::= id.attrib class.attrib title.attrib ;
 Core.attrib ::= (style::string())? ;
title ::= title::(title.attlist string()) ;
NMTOKEN.datatype ::= string() ;
IDREFS.datatype ::= string() ;
ID.datatype ::= string() ;
Datetime.datatype ::= string() ;
meta.attlist ::= I18n.attrib (http-equiv::NMTOKEN.datatype)? (name::NMTOKEN.datatype)? (content::string())? (scheme::string())? ;
MultiLength.datatype ::= string() ;
object.attlist ::= usemap.attlist ;
 object.attlist ::= (align::("top" | "middle" | "bottom" | "left" | "right"))? (border::Pixels.datatype)? (hspace::Pixels.datatype)? (vspace::Pixels.datatype)? ;
 object.attlist ::= Common.attrib (declare::"declare")? (classid::URI.datatype)? (codebase::URI.datatype)? (data::URI.datatype)? (type::ContentType.datatype)? (codetype::ContentType.datatype)? (archive::URIs.datatype)? (standby::Text.datatype)? (height::Length.datatype)? (width::Length.datatype)? (name::string())? (tabindex::Number.datatype)? ;
li.attlist ::= (type::string())? (value::string())? ;
 li.attlist ::= Common.attrib ;
select.attlist ::= (onblur::Script.datatype)? (onchange::Script.datatype)? (onfocus::Script.datatype)? ;
 select.attlist ::= (disabled::"disabled")? (tabindex::Number.datatype)? ;
 select.attlist ::= Common.attrib (name::string())? (size::Number.datatype)? (multiple::"multiple")? ;
Length.datatype ::= string() ;
script ::= script::(script.attlist string()) ;
URIs.datatype ::= string() ;
textarea.attlist ::= (onblur::Script.datatype)? (onchange::Script.datatype)? (onfocus::Script.datatype)? (onselect::Script.datatype)? ;
 textarea.attlist ::= (disabled::"disabled")? (readonly::"readonly")? (tabindex::Number.datatype)? ;
 textarea.attlist ::= Common.attrib (name::string())? rows::Number.datatype cols::Number.datatype (accesskey::Character.datatype)? string() ;
Flow.model ::= (string() | Inline.class | Block.class)* ;
Number.datatype ::= string() ;
target.attrib ::= (target::string())? ;
Script.datatype ::= string() ;
URI.datatype ::= string() ;
button.attlist ::= (onblur::Script.datatype)? (onfocus::Script.datatype)? ;
 button.attlist ::= Common.attrib (name::string())? (value::string())? (type::("button" | "submit" | "reset"))? (disabled::"disabled")? (tabindex::Number.datatype)? (accesskey::Character.datatype)? ;
--------------------html::guyard.bgf--------------------
String ::= string() ;
--------------------html::clark-strict.bgf--------------------
ContentType.datatype ::= string() ;
MediaDesc.datatype ::= string() ;
Cell.attrib ::= Common.attrib (abbr::Text.datatype)? (axis::string())? (headers::IDREFS.datatype)? scope.attrib (rowspan::Number.datatype)? (colspan::Number.datatype)? CellHAlign.attrib CellVAlign.attrib ;
option ::= option::(Common.attrib (selected::"selected")? (value::string())? string()) ;
Inline.model ::= (string() | Inline.class)* ;
FPI.datatype ::= string() ;
ContentTypes.datatype ::= string() ;
style ::= style::(style.attlist string()) ;
LanguageCode.datatype ::= string() ;
Charsets.datatype ::= string() ;
applet.attlist ::= Core.attrib alt::Text.datatype (archive::string())? (code::string())? (codebase::URI.datatype)? (object::string())? height::Length.datatype width::Length.datatype ;
 applet.attlist ::= name.attlist ;
Character.datatype ::= string() ;
Charset.datatype ::= string() ;
Text.datatype ::= string() ;
Pixels.datatype ::= string() ;
param.attlist ::= id.attrib name::string() (value::string())? (valuetype::("data" | "ref" | "object"))? (type::ContentType.datatype)? ;
name.attlist ::= (name::string())? ;
input.attlist ::= (onblur::Script.datatype)? (onchange::Script.datatype)? (onfocus::Script.datatype)? (onselect::Script.datatype)? ;
 input.attlist ::= (disabled::"disabled")? (readonly::"readonly")? (alt::string())? (tabindex::Number.datatype)? (accept::ContentTypes.datatype)? ;
 input.attlist ::= Common.attrib (type::InputType.class)? (name::string())? (value::string())? (checked::"checked")? (size::string())? (maxlength::Number.datatype)? (src::URI.datatype)? (accesskey::Character.datatype)? ;
IDREF.datatype ::= string() ;
coords.attrib ::= (coords::string())? ;
NMTOKENS.datatype ::= string() ;
Core.attrib ::= id.attrib class.attrib title.attrib ;
 Core.attrib ::= (style::string())? ;
title ::= title::(title.attlist string()) ;
NMTOKEN.datatype ::= string() ;
IDREFS.datatype ::= string() ;
ID.datatype ::= string() ;
Datetime.datatype ::= string() ;
meta.attlist ::= I18n.attrib (http-equiv::NMTOKEN.datatype)? (name::NMTOKEN.datatype)? (content::string())? (scheme::string())? ;
MultiLength.datatype ::= string() ;
object.attlist ::= usemap.attlist ;
 object.attlist ::= Common.attrib (declare::"declare")? (classid::URI.datatype)? (codebase::URI.datatype)? (data::URI.datatype)? (type::ContentType.datatype)? (codetype::ContentType.datatype)? (archive::URIs.datatype)? (standby::Text.datatype)? (height::Length.datatype)? (width::Length.datatype)? (name::string())? (tabindex::Number.datatype)? ;
select.attlist ::= (onblur::Script.datatype)? (onchange::Script.datatype)? (onfocus::Script.datatype)? ;
 select.attlist ::= (disabled::"disabled")? (tabindex::Number.datatype)? ;
 select.attlist ::= Common.attrib (name::string())? (size::Number.datatype)? (multiple::"multiple")? ;
Length.datatype ::= string() ;
script ::= script::(script.attlist string()) ;
URIs.datatype ::= string() ;
textarea.attlist ::= (onblur::Script.datatype)? (onchange::Script.datatype)? (onfocus::Script.datatype)? (onselect::Script.datatype)? ;
 textarea.attlist ::= (disabled::"disabled")? (readonly::"readonly")? (tabindex::Number.datatype)? ;
 textarea.attlist ::= Common.attrib (name::string())? rows::Number.datatype cols::Number.datatype (accesskey::Character.datatype)? string() ;
Flow.model ::= (string() | Inline.class | Block.class)* ;
Number.datatype ::= string() ;
target.attrib ::= (target::string())? ;
Script.datatype ::= string() ;
URI.datatype ::= string() ;
button.attlist ::= (onblur::Script.datatype)? (onfocus::Script.datatype)? ;
 button.attlist ::= Common.attrib (name::string())? (value::string())? (type::("button" | "submit" | "reset"))? (disabled::"disabled")? (tabindex::Number.datatype)? (accesskey::Character.datatype)? ;
--------------------occam::mu-srour.bgf--------------------
String ::= string() ;
--------------------occam::srour.bgf--------------------
String ::= string() ;
--------------------odf::opendoc-1.0-manifest.bgf--------------------
key-derivation-attlist ::= manifest:key-derivation-name::string() ;
 key-derivation-attlist ::= manifest:salt::string() ;
 key-derivation-attlist ::= manifest:iteration-count::integer() ;
encryption-data-attlist ::= manifest:checksum-type::string() ;
 encryption-data-attlist ::= manifest:checksum::string() ;
file-entry-attlist ::= manifest:full-path::string() ;
 file-entry-attlist ::= (manifest:size::integer())? ;
 file-entry-attlist ::= manifest:media-type::string() ;
algorithm-attlist ::= manifest:algorithm-name::string() ;
 algorithm-attlist ::= manifest:initialisation-vector::string() ;
--------------------odf::opendoc-1.0-strict.bgf--------------------
text-linenumbering-separator ::= text:linenumbering-separator::((text:increment::nonNegativeInteger)? string()) ;
presentation-decl ::= presentation:header-decl::(presentation-header-decl-attlist string()) ;
 presentation-decl ::= presentation:footer-decl::(presentation-footer-decl-attlist string()) ;
 presentation-decl ::= presentation:date-time-decl::(presentation-date-time-decl-attlist string()) ;
text-common-ref-content ::= string() ;
 text-common-ref-content ::= (text:ref-name::string)? ;
form-item ::= form:item::(form-item-attlist string()) ;
office-script ::= office:script::(office-script-attlist string()? anyElements string()?) ;
cellRangeAddress ::= string() ;
IDREF ::= string() ;
text-notes-configuration-content ::= text-note-class ;
 text-notes-configuration-content ::= (text:citation-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:citation-body-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:default-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:master-page-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:start-value::nonNegativeInteger)? ;
 text-notes-configuration-content ::= common-num-format-prefix-suffix-attlist common-num-format-attlist? ;
 text-notes-configuration-content ::= (text:start-numbering-at::("document" | "chapter" | "page"))? ;
 text-notes-configuration-content ::= (text:footnotes-position::("text" | "page" | "section" | "document"))? ;
 text-notes-configuration-content ::= (text:note-continuation-notice-forward::string())? ;
 text-notes-configuration-content ::= (text:note-continuation-notice-backward::string())? ;
draw-applet-attlist ::= (draw:code::string())? ;
 draw-applet-attlist ::= (draw:object::string())? ;
 draw-applet-attlist ::= (draw:archive::string())? ;
 draw-applet-attlist ::= (draw:may-script::boolean)? ;
vector3D ::= string() ;
style-font-face-attlist ::= (svg:font-family::string)? (svg:font-style::fontStyle)? (svg:font-variant::fontVariant)? (svg:font-weight::fontWeight)? (svg:font-stretch::("normal" | "ultra-condensed" | "extra-condensed" | "condensed" | "semi-condensed" | "semi-expanded" | "expanded" | "extra-expanded" | "ultra-expanded"))? (svg:font-size::positiveLength)? (svg:unicode-range::string())? (svg:units-per-em::integer)? (svg:panose-1::string())? (svg:stemv::integer)? (svg:stemh::integer)? (svg:slope::integer)? (svg:cap-height::integer)? (svg:x-height::integer)? (svg:accent-height::integer)? (svg:ascent::integer)? (svg:descent::integer)? (svg:widths::string())? (svg:bbox::string())? (svg:ideographic::integer)? (svg:alphabetic::integer)? (svg:mathematical::integer)? (svg:hanging::integer)? (svg:v-ideographic::integer)? (svg:v-alphabetic::integer)? (svg:v-mathematical::integer)? (svg:v-hanging::integer)? (svg:underline-position::integer)? (svg:underline-thickness::integer)? (svg:strikethrough-position::integer)? (svg:strikethrough-thickness::integer)? (svg:overline-position::integer)? (svg:overline-thickness::integer)? ;
 style-font-face-attlist ::= style:name::string ;
 style-font-face-attlist ::= (style:font-adornments::string)? ;
 style-font-face-attlist ::= (style:font-family-generic::fontFamilyGeneric)? ;
 style-font-face-attlist ::= (style:font-pitch::fontPitch)? ;
 style-font-face-attlist ::= (style:font-charset::textEncoding)? ;
pathData ::= string() ;
dateOrDateTime ::= string() ;
common-title-attlist ::= (form:title::string())? ;
formula ::= string() ;
length ::= string() ;
languageCode ::= string() ;
points ::= string() ;
color ::= string() ;
common-data-style-attlist ::= style:name::styleName ;
 common-data-style-attlist ::= (number:language::languageCode)? ;
 common-data-style-attlist ::= (number:country::countryCode)? ;
 common-data-style-attlist ::= (number:title::string())? ;
 common-data-style-attlist ::= (style:volatile::boolean)? ;
 common-data-style-attlist ::= (number:transliteration-format::string)? ;
 common-data-style-attlist ::= (number:transliteration-language::countryCode)? ;
 common-data-style-attlist ::= (number:transliteration-country::countryCode)? ;
 common-data-style-attlist ::= (number:transliteration-style::("short" | "medium" | "long"))? ;
anyURI ::= string() ;
styleName ::= string() ;
svg-desc ::= svg:desc::string() ;
language ::= string() ;
common-dr3d-transform-attlist ::= (dr3d:transform::string())? ;
relativeLength ::= string() ;
double ::= string() ;
number-currency-symbol ::= number:currency-symbol::(number-currency-symbol-attlist string()) ;
mathMarkup ::= (α | string() | mathMarkup)* ;
draw-plugin-attlist ::= (draw:mime-type::string())? ;
time ::= string() ;
timeOrDateTime ::= string() ;
text-index-title-template ::= text:index-title-template::((text:style-name::styleNameRef)? string()) ;
style-graphic-properties-attlist ::= (draw:stroke::("none" | "dash" | "solid"))? ;
 style-graphic-properties-attlist ::= (draw:stroke-dash::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:stroke-dash-names::styleNameRefs)? ;
 style-graphic-properties-attlist ::= (svg:stroke-width::length)? ;
 style-graphic-properties-attlist ::= (svg:stroke-color::color)? ;
 style-graphic-properties-attlist ::= (draw:marker-start::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:marker-end::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:marker-start-width::length)? ;
 style-graphic-properties-attlist ::= (draw:marker-end-width::length)? ;
 style-graphic-properties-attlist ::= (draw:marker-start-center::boolean)? ;
 style-graphic-properties-attlist ::= (draw:marker-end-center::boolean)? ;
 style-graphic-properties-attlist ::= (svg:stroke-opacity::(string() | percent))? ;
 style-graphic-properties-attlist ::= (draw:stroke-linejoin::("miter" | "round" | "bevel" | "middle" | "none" | "inherit"))? ;
 style-graphic-properties-attlist ::= (draw:symbol-color::color)? ;
 style-graphic-properties-attlist ::= (text:animation::("none" | "scroll" | "alternate" | "slide"))? ;
 style-graphic-properties-attlist ::= (text:animation-direction::("left" | "right" | "up" | "down"))? ;
 style-graphic-properties-attlist ::= (text:animation-start-inside::boolean)? ;
 style-graphic-properties-attlist ::= (text:animation-stop-inside::boolean)? ;
 style-graphic-properties-attlist ::= (text:animation-repeat::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (text:animation-delay::duration)? ;
 style-graphic-properties-attlist ::= (text:animation-steps::length)? ;
 style-graphic-properties-attlist ::= (draw:auto-grow-width::boolean)? (draw:auto-grow-height::boolean)? ;
 style-graphic-properties-attlist ::= (draw:fit-to-size::boolean)? ;
 style-graphic-properties-attlist ::= (draw:fit-to-contour::boolean)? ;
 style-graphic-properties-attlist ::= (draw:textarea-vertical-align::("top" | "middle" | "bottom" | "justify"))? ;
 style-graphic-properties-attlist ::= (draw:textarea-horizontal-align::("left" | "center" | "right" | "justify"))? ;
 style-graphic-properties-attlist ::= (fo:wrap-option::("no-wrap" | "wrap"))? ;
 style-graphic-properties-attlist ::= (draw:color-mode::("greyscale" | "mono" | "watermark" | "standard"))? ;
 style-graphic-properties-attlist ::= (draw:color-inversion::boolean)? ;
 style-graphic-properties-attlist ::= (draw:luminance::percent)? ;
 style-graphic-properties-attlist ::= (draw:contrast::percent)? ;
 style-graphic-properties-attlist ::= (draw:gamma::percent)? ;
 style-graphic-properties-attlist ::= (draw:red::percent)? ;
 style-graphic-properties-attlist ::= (draw:green::percent)? ;
 style-graphic-properties-attlist ::= (draw:blue::percent)? ;
 style-graphic-properties-attlist ::= (draw:image-opacity::percent)? ;
 style-graphic-properties-attlist ::= (draw:shadow::("visible" | "hidden"))? ;
 style-graphic-properties-attlist ::= (draw:shadow-offset-x::length)? (draw:shadow-offset-y::length)? ;
 style-graphic-properties-attlist ::= (draw:shadow-color::color)? ;
 style-graphic-properties-attlist ::= (draw:shadow-opacity::percent)? ;
 style-graphic-properties-attlist ::= (draw:start-line-spacing-horizontal::distance)? (draw:start-line-spacing-vertical::distance)? ;
 style-graphic-properties-attlist ::= (draw:end-line-spacing-horizontal::distance)? (draw:end-line-spacing-vertical::distance)? ;
 style-graphic-properties-attlist ::= (draw:line-distance::distance)? ;
 style-graphic-properties-attlist ::= (draw:guide-overhang::length)? ;
 style-graphic-properties-attlist ::= (draw:guide-distance::distance)? ;
 style-graphic-properties-attlist ::= (draw:start-guide::length)? ;
 style-graphic-properties-attlist ::= (draw:end-guide::length)? ;
 style-graphic-properties-attlist ::= (draw:placing::("below" | "above"))? ;
 style-graphic-properties-attlist ::= (draw:parallel::boolean)? ;
 style-graphic-properties-attlist ::= (draw:measure-align::("automatic" | "left-outside" | "inside" | "right-outside"))? (draw:measure-vertical-align::("automatic" | "above" | "below" | "center"))? ;
 style-graphic-properties-attlist ::= (draw:unit::("automatic" | "mm" | "cm" | "m" | "km" | "pt" | "pc" | "inch" | "ft" | "mi"))? ;
 style-graphic-properties-attlist ::= (draw:show-unit::boolean)? ;
 style-graphic-properties-attlist ::= (draw:decimal-places::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (draw:caption-type::("straight-line" | "angled-line" | "angled-connector-line"))? ;
 style-graphic-properties-attlist ::= (draw:caption-angle-type::("fixed" | "free"))? ;
 style-graphic-properties-attlist ::= (draw:caption-angle::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (draw:caption-gap::distance)? ;
 style-graphic-properties-attlist ::= (draw:caption-escape-direction::("horizontal" | "vertical" | "auto"))? ;
 style-graphic-properties-attlist ::= (draw:caption-escape::(length | percent))? ;
 style-graphic-properties-attlist ::= (draw:caption-line-length::length)? ;
 style-graphic-properties-attlist ::= (draw:caption-fit-line-length::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:horizontal-segments::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:vertical-segments::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:edge-rounding::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:edge-rounding-mode::("correct" | "attractive"))? ;
 style-graphic-properties-attlist ::= (dr3d:back-scale::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:depth::length)? ;
 style-graphic-properties-attlist ::= (dr3d:backface-culling::("enabled" | "disabled"))? ;
 style-graphic-properties-attlist ::= (dr3d:end-angle::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:close-front::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:close-back::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:lighting-mode::("standard" | "double-sided"))? ;
 style-graphic-properties-attlist ::= (dr3d:normals-kind::("object" | "flat" | "sphere"))? ;
 style-graphic-properties-attlist ::= (dr3d:normals-direction::("normal" | "inverse"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-generation-mode-x::("object" | "parallel" | "sphere"))? (dr3d:texture-generation-mode-y::("object" | "parallel" | "sphere"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-kind::("luminance" | "intesity" | "color"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-filter::("enabled" | "disabled"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-mode::("replace" | "modulate" | "blend"))? ;
 style-graphic-properties-attlist ::= (dr3d:ambient-color::color)? (dr3d:emissive-color::color)? (dr3d:specular-color::color)? (dr3d:diffuse-color::color)? ;
 style-graphic-properties-attlist ::= (dr3d:shininess::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:shadow::("visible" | "hidden"))? ;
 style-graphic-properties-attlist ::= common-draw-rel-size-attlist (fo:min-width::(length | percent))? ;
 style-graphic-properties-attlist ::= (fo:min-height::(length | percent))? ;
 style-graphic-properties-attlist ::= (fo:max-height::(length | percent))? (fo:max-width::(length | percent))? ;
 style-graphic-properties-attlist ::= common-horizontal-margin-attlist ;
 style-graphic-properties-attlist ::= common-vertical-margin-attlist ;
 style-graphic-properties-attlist ::= common-margin-attlist ;
 style-graphic-properties-attlist ::= (style:print-content::boolean)? ;
 style-graphic-properties-attlist ::= (style:protect::("none" | (("content" | "position" | "size")+)))? ;
 style-graphic-properties-attlist ::= (style:horizontal-pos::("left" | "center" | "right" | "from-left" | "inside" | "outside" | "from-inside"))? (svg:x::coordinate)? ;
 style-graphic-properties-attlist ::= (style:horizontal-rel::("page" | "page-content" | "page-start-margin" | "page-end-margin" | "frame" | "frame-content" | "frame-start-margin" | "frame-end-margin" | "paragraph" | "paragraph-content" | "paragraph-start-margin" | "paragraph-end-margin" | "char"))? ;
 style-graphic-properties-attlist ::= common-vertical-pos-attlist ;
 style-graphic-properties-attlist ::= common-vertical-rel-attlist ;
 style-graphic-properties-attlist ::= common-text-anchor-attlist ;
 style-graphic-properties-attlist ::= common-border-attlist ;
 style-graphic-properties-attlist ::= common-border-line-width-attlist ;
 style-graphic-properties-attlist ::= common-padding-attlist ;
 style-graphic-properties-attlist ::= common-shadow-attlist ;
 style-graphic-properties-attlist ::= common-background-color-attlist ;
 style-graphic-properties-attlist ::= (style:editable::boolean)? ;
 style-graphic-properties-attlist ::= (style:wrap::("none" | "left" | "right" | "parallel" | "dynamic" | "run-through" | "biggest"))? ;
 style-graphic-properties-attlist ::= (style:wrap-dynamic-treshold::nonNegativeLength)? ;
 style-graphic-properties-attlist ::= (style:number-wrapped-paragraphs::("no-limit" | positiveInteger))? ;
 style-graphic-properties-attlist ::= (style:wrap-contour::boolean)? ;
 style-graphic-properties-attlist ::= (style:wrap-contour-mode::("full" | "outside"))? ;
 style-graphic-properties-attlist ::= (style:run-through::("foreground" | "background"))? ;
 style-graphic-properties-attlist ::= (style:flow-with-text::boolean)? ;
 style-graphic-properties-attlist ::= (style:overflow-behavior::("clip" | "auto-create-new-frame"))? ;
 style-graphic-properties-attlist ::= (style:mirror::("none" | "vertical" | horizontal-mirror | ("vertical" horizontal-mirror) | (horizontal-mirror "vertical")))? ;
 style-graphic-properties-attlist ::= (fo:clip::string)? ;
 style-graphic-properties-attlist ::= (draw:wrap-influence-on-position::("iterative" | "once-concurrent" | "once-successive"))? ;
 style-graphic-properties-attlist ::= (draw:frame-display-scrollbar::boolean)? ;
 style-graphic-properties-attlist ::= (draw:frame-display-border::boolean)? ;
 style-graphic-properties-attlist ::= (draw:frame-margin-horizontal::nonNegativePixelLength)? (draw:frame-margin-vertical::nonNegativePixelLength)? ;
 style-graphic-properties-attlist ::= (draw:visible-area-left::nonNegativeLength)? (draw:visible-area-top::nonNegativeLength)? (draw:visible-area-width::positiveLength)? (draw:visible-area-height::positiveLength)? ;
 style-graphic-properties-attlist ::= (draw:ole-draw-aspect::nonNegativeInteger)? ;
percent ::= string() ;
presentation-show-attlist ::= presentation:name::string ;
 presentation-show-attlist ::= presentation:pages::string() ;
common-draw-layer-name-attlist ::= (draw:layer::string())? ;
text-index-entry-span ::= text:index-entry-span::((text:style-name::styleNameRef)? string()) ;
positiveLength ::= string() ;
number-number-attlist ::= (number:decimal-replacement::string())? ;
 number-number-attlist ::= (number:display-factor::double)? ;
styleNameRefs ::= string()* ;
common-field-description-attlist ::= (text:description::string())? ;
cellRangeAddressList ::= string() ;
draw-param-attlist ::= (draw:name::string())? ;
 draw-param-attlist ::= (draw:value::string())? ;
draw-object-ole-attlist ::= (draw:class-id::string())? ;
common-presentation-effect-attlist ::= draw:shape-id::IDREF ;
 common-presentation-effect-attlist ::= (presentation:effect::presentationEffects)? ;
 common-presentation-effect-attlist ::= (presentation:direction::presentationEffectDirections)? ;
 common-presentation-effect-attlist ::= (presentation:speed::presentationSpeeds)? ;
 common-presentation-effect-attlist ::= (presentation:delay::duration)? ;
 common-presentation-effect-attlist ::= (presentation:start-scale::percent)? ;
 common-presentation-effect-attlist ::= (presentation:path-id::string())? ;
animation-element ::= anim:animate::(common-anim-target-attlist common-anim-named-target-attlist common-anim-values-attlist common-anim-spline-mode-attlist common-spline-anim-value-attlist common-repeat-timing-attlist common-fill-timing-attlist common-anim-add-accum-attlist) ;
 animation-element ::= anim:set::(common-anim-target-attlist common-anim-named-target-attlist common-anim-set-values-attlist common-fill-timing-attlist common-anim-add-accum-attlist) ;
 animation-element ::= anim:animateMotion::(anim-animate-motion-attlist common-anim-target-attlist common-anim-named-target-attlist common-anim-add-accum-attlist common-anim-values-attlist common-fill-timing-attlist common-spline-anim-value-attlist) ;
 animation-element ::= anim:animateColor::(common-anim-target-attlist common-anim-named-target-attlist common-anim-add-accum-attlist common-anim-values-attlist common-anim-spline-mode-attlist common-spline-anim-value-attlist anim-animate-color-attlist common-fill-timing-attlist) ;
 animation-element ::= anim:animateTransform::(common-anim-target-attlist common-anim-named-target-attlist common-anim-add-accum-attlist common-anim-values-attlist anim-animate-transform-attlist common-fill-timing-attlist) ;
 animation-element ::= anim:transitionFilter::(common-anim-target-attlist common-anim-add-accum-attlist common-anim-values-attlist common-anim-spline-mode-attlist anim-transition-filter-attlist common-fill-timing-attlist) ;
 animation-element ::= anim:par::(common-anim-attlist common-timing-attlist common-endsync-timing-attlist animation-element*) ;
 animation-element ::= anim:seq::(common-anim-attlist common-endsync-timing-attlist common-timing-attlist) ;
 animation-element ::= anim:iterate::(common-anim-attlist anin-iterate-attlist common-timing-attlist common-endsync-timing-attlist animation-element*) ;
 animation-element ::= anim:audio::(common-anim-attlist anim-audio-attlist common-basic-timing-attlist) ;
 animation-element ::= anim:command::(common-anim-attlist anim-command-attlist common-begin-end-timing-attlist common-anim-target-attlist (anim:param::(anim:name::string() anim:value::string()))*) ;
config-config-item ::= config:config-item::(config-config-item-attlist string()) ;
svg-font-face-format ::= svg:font-face-format::((svg:string::string())?) ;
cellAddress ::= string() ;
number-text ::= number:text::string() ;
base64Binary ::= string() ;
date ::= string() ;
style-graphic-fill-properties-attlist ::= (draw:fill::("none" | "solid" | "bitmap" | "gradient" | "hatch"))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-color::color)? ;
 style-graphic-fill-properties-attlist ::= (draw:secondary-fill-color::color)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-gradient-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (draw:gradient-step-count::nonNegativeInteger)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-hatch-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-hatch-solid::boolean)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (style:repeat::("no-repeat" | "repeat" | "stretch"))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-width::(length | percent))? (draw:fill-image-height::(length | percent))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-ref-point-x::percent)? (draw:fill-image-ref-point-y::percent)? (draw:fill-image-ref-point::("top-left" | "top" | "top-right" | "left" | "center" | "right" | "bottom-left" | "bottom" | "bottom-right"))? ;
 style-graphic-fill-properties-attlist ::= (draw:tile-repeat-offset::string())? ;
 style-graphic-fill-properties-attlist ::= (draw:opacity::percent)? ;
 style-graphic-fill-properties-attlist ::= (draw:opacity-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (svg:fill-rule::("nonzero" | "evenodd"))? ;
anyAttListOrElements ::= string()* anyElements ;
character ::= string() ;
nonNegativeLength ::= string() ;
variableName ::= string() ;
countryCode ::= string() ;
office-meta-data ::= meta:generator::string ;
 office-meta-data ::= dc:title::string ;
 office-meta-data ::= dc:description::string ;
 office-meta-data ::= dc:subject::string ;
 office-meta-data ::= meta:keyword::string ;
 office-meta-data ::= meta:initial-creator::string ;
 office-meta-data ::= dc-creator ;
 office-meta-data ::= meta:printed-by::string ;
 office-meta-data ::= meta:creation-date::dateTime ;
 office-meta-data ::= dc-date ;
 office-meta-data ::= meta:print-date::dateTime ;
 office-meta-data ::= meta:template::(xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? (xlink:title::string)? (meta:date::dateTime)?) ;
 office-meta-data ::= meta:auto-reload::((xlink:type::"simple")? (xlink:show::"replace")? (xlink:actuate::"onLoad")? (xlink:href::anyURI)? (meta:delay::duration)?) ;
 office-meta-data ::= meta:hyperlink-behaviour::((office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))?) ;
 office-meta-data ::= dc:language::language ;
 office-meta-data ::= meta:editing-cycles::nonNegativeInteger ;
 office-meta-data ::= meta:editing-duration::duration ;
 office-meta-data ::= meta:document-statistic::((meta:page-count::nonNegativeInteger)? (meta:table-count::nonNegativeInteger)? (meta:draw-count::nonNegativeInteger)? (meta:image-count::nonNegativeInteger)? (meta:ole-object-count::nonNegativeInteger)? (meta:paragraph-count::nonNegativeInteger)? (meta:word-count::nonNegativeInteger)? (meta:character-count::nonNegativeInteger)? (frame-count::nonNegativeInteger)? (sentence-count::nonNegativeInteger)? (syllable-count::nonNegativeInteger)? (non-whitespace-character-count::nonNegativeInteger)? (meta:row-count::nonNegativeInteger)? (meta:cell-count::nonNegativeInteger)? (meta:object-count::nonNegativeInteger)?) ;
 office-meta-data ::= meta:user-defined::(meta:name::string (meta:value-type::"float" double) | (meta:value-type::"date" dateOrDateTime) | (meta:value-type::"time" duration) | (meta:value-type::"boolean" boolean) | (meta:value-type::"string" string) | string()) ;
textEncoding ::= string() ;
form-form-attlist ::= (xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")?)? ;
 form-form-attlist ::= (office:target-frame::targetFrameName)? ;
 form-form-attlist ::= (form:method::("get" | "post" | string))? ;
 form-form-attlist ::= (form:enctype::string)? ;
 form-form-attlist ::= (form:allow-deletes::boolean)? ;
 form-form-attlist ::= (form:allow-inserts::boolean)? ;
 form-form-attlist ::= (form:allow-updates::boolean)? ;
 form-form-attlist ::= (form:apply-filter::boolean)? ;
 form-form-attlist ::= (form:command-type::("table" | "query" | "command"))? ;
 form-form-attlist ::= (form:command::string())? ;
 form-form-attlist ::= (form:datasource::(anyURI | string))? ;
 form-form-attlist ::= (form:master-fields::string)? ;
 form-form-attlist ::= (form:detail-fields::string)? ;
 form-form-attlist ::= (form:escape-processing::boolean)? ;
 form-form-attlist ::= (form:filter::string)? ;
 form-form-attlist ::= (form:ignore-result::boolean)? ;
 form-form-attlist ::= (form:navigation-mode::navigation)? ;
 form-form-attlist ::= (form:order::string)? ;
 form-form-attlist ::= (form:tab-cycle::tab-cycles)? ;
form-option ::= form:option::(form-option-attlist string()) ;
ID ::= string() ;
dateTime ::= string() ;
paragraph-content ::= string() ;
 paragraph-content ::= text:s::((text:c::nonNegativeInteger)?) ;
 paragraph-content ::= text:tab::text-tab-attr ;
 paragraph-content ::= text:line-break::ε ;
 paragraph-content ::= text:span::((text:style-name::styleNameRef)? (text:class-names::styleNameRefs)? paragraph-content*) ;
 paragraph-content ::= text:a::(text-a-attlist office-event-listeners? paragraph-content*) ;
 paragraph-content ::= (text:bookmark::(text:name::string)) | (text:bookmark-start::(text:name::string)) | (text:bookmark-end::(text:name::string)) ;
 paragraph-content ::= text:reference-mark::(text:name::string) ;
 paragraph-content ::= (text:reference-mark-start::(text:name::string)) | (text:reference-mark-end::(text:name::string)) ;
 paragraph-content ::= text:note::(text-note-class (text:id::string)? text:note-citation::((text:label::string)? string()) text:note-body::(text-content*)) ;
 paragraph-content ::= text:ruby::((text:style-name::styleNameRef)? text:ruby-base::paragraph-content text:ruby-text::((text:style-name::styleNameRef)? string())) ;
 paragraph-content ::= office-annotation ;
 paragraph-content ::= change-marks ;
 paragraph-content ::= shape | draw-a ;
 paragraph-content ::= text:date::(text-date-attlist string()) ;
 paragraph-content ::= text:time::(text-time-attlist string()) ;
 paragraph-content ::= text:page-number::(text-page-number-attlist string()) ;
 paragraph-content ::= text:page-continuation::(text-page-continuation-attlist string()) ;
 paragraph-content ::= text:sender-firstname::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-lastname::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-initials::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-title::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-position::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-email::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-phone-private::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-fax::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-company::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-phone-work::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-street::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-city::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-postal-code::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-country::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-state-or-province::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:author-name::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:author-initials::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:chapter::(text-chapter-attlist string()) ;
 paragraph-content ::= text:file-name::(text-file-name-attlist string()) ;
 paragraph-content ::= text:template-name::(text-template-name-attlist string()) ;
 paragraph-content ::= text:sheet-name::string() ;
 paragraph-content ::= text:variable-set::(common-field-name-attlist common-field-formula-attlist common-value-and-type-attlist common-field-display-value-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:variable-get::(common-field-name-attlist common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:variable-input::(common-field-name-attlist common-field-description-attlist common-value-type-attlist common-field-display-value-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:user-field-get::(common-field-name-attlist common-field-display-value-formula-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:user-field-input::(common-field-name-attlist common-field-description-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:sequence::(common-field-name-attlist common-field-formula-attlist common-field-num-format-attlist text-sequence-ref-name string()) ;
 paragraph-content ::= text:expression::(common-field-formula-attlist common-value-and-type-attlist? common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:text-input::(common-field-description-attlist string()) ;
 paragraph-content ::= text:initial-creator::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:creation-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::dateOrDateTime)? string()) ;
 paragraph-content ::= text:creation-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::timeOrDateTime)? string()) ;
 paragraph-content ::= text:description::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:user-defined::(common-field-fixed-attlist text:name::string common-field-data-style-name-attlist (office:value::double)? (office:date-value::dateOrDateTime)? (office:time-value::duration)? (office:boolean-value::boolean)? (office:string-value::string)? string()) ;
 paragraph-content ::= text:print-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::time)? string()) ;
 paragraph-content ::= text:print-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::date)? string()) ;
 paragraph-content ::= text:printed-by::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:title::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:subject::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:keywords::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:editing-cycles::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:editing-duration::(common-field-fixed-attlist common-field-data-style-name-attlist (text:duration::duration)? string()) ;
 paragraph-content ::= text:modification-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::time)? string()) ;
 paragraph-content ::= text:modification-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::date)? string()) ;
 paragraph-content ::= text:creator::(common-field-fixed-attlist string()) ;
 paragraph-content ::= (text:page-count::(common-field-num-format-attlist string())) | (text:paragraph-count::(common-field-num-format-attlist string())) | (text:word-count::(common-field-num-format-attlist string())) | (text:character-count::(common-field-num-format-attlist string())) | (text:table-count::(common-field-num-format-attlist string())) | (text:image-count::(common-field-num-format-attlist string())) | (text:object-count::(common-field-num-format-attlist string())) ;
 paragraph-content ::= text:database-display::(text-database-display-attlist string()) ;
 paragraph-content ::= text:database-next::text-database-next-attlist ;
 paragraph-content ::= text:database-row-select::text-database-row-select-attlist ;
 paragraph-content ::= text:database-row-number::(common-field-database-table common-field-num-format-attlist (text:value::nonNegativeInteger)? string()) ;
 paragraph-content ::= text:database-name::(common-field-database-table string()) ;
 paragraph-content ::= text:page-variable-set::(text-set-page-variable-attlist string()) ;
 paragraph-content ::= text:page-variable-get::(text-get-page-variable-attlist string()) ;
 paragraph-content ::= text:placeholder::(text-placeholder-attlist string()) ;
 paragraph-content ::= text:conditional-text::(text-conditional-text-attlist string()) ;
 paragraph-content ::= text:hidden-text::(text-hidden-text-attlist string()) ;
 paragraph-content ::= (text:reference-ref::(text-common-ref-content text-ref-content)) | (text:bookmark-ref::(text-common-ref-content text-ref-content)) ;
 paragraph-content ::= text:note-ref::(text-common-ref-content text-note-ref-content text-ref-content) ;
 paragraph-content ::= text:sequence-ref::(text-common-ref-content text-sequence-ref-content) ;
 paragraph-content ::= text:script::((xlink:href::anyURI (xlink:type::"simple")?) | string() (script:language::string)?) ;
 paragraph-content ::= text:execute-macro::((text:name::string)? office-event-listeners? string()) ;
 paragraph-content ::= text:hidden-paragraph::(text-hidden-paragraph-attlist string()) ;
 paragraph-content ::= text:dde-connection::(text:connection-name::string string()) ;
 paragraph-content ::= text:measure::(text:kind::("value" | "unit" | "gap") string()) ;
 paragraph-content ::= text:table-formula::(common-field-formula-attlist common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:toc-mark-start::text-toc-mark-start-attrs ;
 paragraph-content ::= text:toc-mark-end::text-id ;
 paragraph-content ::= text:toc-mark::(text:string-value::string text-outline-level) ;
 paragraph-content ::= text:user-index-mark-start::(text-id text-outline-level text-index-name) ;
 paragraph-content ::= text:user-index-mark-end::(text-id text-outline-level) ;
 paragraph-content ::= text:user-index-mark::(text:string-value::string text-outline-level text-index-name) ;
 paragraph-content ::= text:alphabetical-index-mark-start::(text-id text-alphabetical-index-mark-attrs) ;
 paragraph-content ::= text:alphabetical-index-mark-end::text-id ;
 paragraph-content ::= text:alphabetical-index-mark::(text:string-value::string text-alphabetical-index-mark-attrs) ;
 paragraph-content ::= text:bibliography-mark::(text:bibliography-type::text-bibliography-types ((text:identifier::string) | (text:address::string) | (text:annote::string) | (text:author::string) | (text:booktitle::string) | (text:chapter::string) | (text:edition::string) | (text:editor::string) | (text:howpublished::string) | (text:institution::string) | (text:journal::string) | (text:month::string) | (text:note::string) | (text:number::string) | (text:organizations::string) | (text:pages::string) | (text:publisher::string) | (text:school::string) | (text:series::string) | (text:title::string) | (text:report-type::string) | (text:volume::string) | (text:year::string) | (text:url::string) | (text:custom1::string) | (text:custom2::string) | (text:custom3::string) | (text:custom4::string) | (text:custom5::string) | (text:isbn::string) | (text:issn::string))* string()) ;
 paragraph-content ::= presentation:header::ε ;
 paragraph-content ::= presentation:footer::ε ;
 paragraph-content ::= presentation:date-time::ε ;
styleNameRef ::= string() | ε ;
duration ::= string() ;
draw-enhanced-geometry-attlist ::= (draw:type::custom-shape-type)? ;
 draw-enhanced-geometry-attlist ::= (svg:viewBox::(integer integer integer integer))? ;
 draw-enhanced-geometry-attlist ::= (draw:mirror-vertical::boolean)? (draw:mirror-horizontal::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-rotate-angle::double)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:concentric-gradient-fill-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-brightness::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-depth::(length double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-diffusion::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-number-of-line-segments::integer)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-light-face::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-harsh::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-harsh::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-level::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-level::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-direction::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-direction::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-metal::boolean)? ;
 draw-enhanced-geometry-attlist ::= (dr3d:shade-mode::("flat" | "phong" | "gouraud" | "draft"))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-rotation-angle::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-rotation-center::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-shininess::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-skew::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-specularity::percent)? ;
 draw-enhanced-geometry-attlist ::= (dr3d:projection::("parallel" | "perspective"))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-viewpoint::point3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-origin::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-color::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:enhanced-path::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:path-stretchpoint-x::double)? (draw:path-stretchpoint-y::double)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-areas::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-points::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-point-type::("none" | "segments" | "rectangle"))? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-point-leaving-directions::string())? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-mode::("normal" | "path" | "shape"))? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-scale::("path" | "shape"))? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-same-letter-heights::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:modifiers::string)? ;
string ::= string() ;
namespacedToken ::= string() ;
number-embedded-text ::= number:embedded-text::(number-embedded-text-attlist string()) ;
nonNegativePixelLength ::= string() ;
svg-font-face-name ::= svg:font-face-name::((name::string())?) ;
anyElements ::= (string()? anyAttListOrElements string()?)* ;
table-table-attlist ::= (table:name::string)? ;
 table-table-attlist ::= (table:style-name::styleNameRef)? ;
 table-table-attlist ::= (table:protected::boolean)? (table:protection-key::string())? ;
 table-table-attlist ::= (table:print::boolean)? ;
 table-table-attlist ::= (table:print-ranges::cellRangeAddressList)? ;
 table-table-attlist ::= (table:is-sub-table::boolean)? ;
point3D ::= string() ;
--------------------odf::opendoc-1.0.bgf--------------------
text-linenumbering-separator ::= text:linenumbering-separator::((text:increment::nonNegativeInteger)? string()) ;
presentation-decl ::= presentation:header-decl::(presentation-header-decl-attlist string()) ;
 presentation-decl ::= presentation:footer-decl::(presentation-footer-decl-attlist string()) ;
 presentation-decl ::= presentation:date-time-decl::(presentation-date-time-decl-attlist string()) ;
text-common-ref-content ::= string() ;
 text-common-ref-content ::= (text:ref-name::string)? ;
form-item ::= form:item::(form-item-attlist string()) ;
office-script ::= office:script::(office-script-attlist string()? anyElements string()?) ;
cellRangeAddress ::= string() ;
IDREF ::= string() ;
text-notes-configuration-content ::= text-note-class ;
 text-notes-configuration-content ::= (text:citation-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:citation-body-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:default-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:master-page-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:start-value::nonNegativeInteger)? ;
 text-notes-configuration-content ::= common-num-format-prefix-suffix-attlist common-num-format-attlist? ;
 text-notes-configuration-content ::= (text:start-numbering-at::("document" | "chapter" | "page"))? ;
 text-notes-configuration-content ::= (text:footnotes-position::("text" | "page" | "section" | "document"))? ;
 text-notes-configuration-content ::= (text:note-continuation-notice-forward::string())? ;
 text-notes-configuration-content ::= (text:note-continuation-notice-backward::string())? ;
draw-applet-attlist ::= (draw:code::string())? ;
 draw-applet-attlist ::= (draw:object::string())? ;
 draw-applet-attlist ::= (draw:archive::string())? ;
 draw-applet-attlist ::= (draw:may-script::boolean)? ;
vector3D ::= string() ;
style-font-face-attlist ::= (svg:font-family::string)? (svg:font-style::fontStyle)? (svg:font-variant::fontVariant)? (svg:font-weight::fontWeight)? (svg:font-stretch::("normal" | "ultra-condensed" | "extra-condensed" | "condensed" | "semi-condensed" | "semi-expanded" | "expanded" | "extra-expanded" | "ultra-expanded"))? (svg:font-size::positiveLength)? (svg:unicode-range::string())? (svg:units-per-em::integer)? (svg:panose-1::string())? (svg:stemv::integer)? (svg:stemh::integer)? (svg:slope::integer)? (svg:cap-height::integer)? (svg:x-height::integer)? (svg:accent-height::integer)? (svg:ascent::integer)? (svg:descent::integer)? (svg:widths::string())? (svg:bbox::string())? (svg:ideographic::integer)? (svg:alphabetic::integer)? (svg:mathematical::integer)? (svg:hanging::integer)? (svg:v-ideographic::integer)? (svg:v-alphabetic::integer)? (svg:v-mathematical::integer)? (svg:v-hanging::integer)? (svg:underline-position::integer)? (svg:underline-thickness::integer)? (svg:strikethrough-position::integer)? (svg:strikethrough-thickness::integer)? (svg:overline-position::integer)? (svg:overline-thickness::integer)? ;
 style-font-face-attlist ::= style:name::string ;
 style-font-face-attlist ::= (style:font-adornments::string)? ;
 style-font-face-attlist ::= (style:font-family-generic::fontFamilyGeneric)? ;
 style-font-face-attlist ::= (style:font-pitch::fontPitch)? ;
 style-font-face-attlist ::= (style:font-charset::textEncoding)? ;
pathData ::= string() ;
dateOrDateTime ::= string() ;
common-title-attlist ::= (form:title::string())? ;
formula ::= string() ;
length ::= string() ;
languageCode ::= string() ;
points ::= string() ;
color ::= string() ;
common-data-style-attlist ::= style:name::styleName ;
 common-data-style-attlist ::= (number:language::languageCode)? ;
 common-data-style-attlist ::= (number:country::countryCode)? ;
 common-data-style-attlist ::= (number:title::string())? ;
 common-data-style-attlist ::= (style:volatile::boolean)? ;
 common-data-style-attlist ::= (number:transliteration-format::string)? ;
 common-data-style-attlist ::= (number:transliteration-language::countryCode)? ;
 common-data-style-attlist ::= (number:transliteration-country::countryCode)? ;
 common-data-style-attlist ::= (number:transliteration-style::("short" | "medium" | "long"))? ;
anyURI ::= string() ;
styleName ::= string() ;
svg-desc ::= svg:desc::string() ;
language ::= string() ;
common-dr3d-transform-attlist ::= (dr3d:transform::string())? ;
relativeLength ::= string() ;
double ::= string() ;
number-currency-symbol ::= number:currency-symbol::(number-currency-symbol-attlist string()) ;
mathMarkup ::= (α | string() | mathMarkup)* ;
draw-plugin-attlist ::= (draw:mime-type::string())? ;
time ::= string() ;
timeOrDateTime ::= string() ;
text-index-title-template ::= text:index-title-template::((text:style-name::styleNameRef)? string()) ;
style-graphic-properties-attlist ::= (draw:stroke::("none" | "dash" | "solid"))? ;
 style-graphic-properties-attlist ::= (draw:stroke-dash::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:stroke-dash-names::styleNameRefs)? ;
 style-graphic-properties-attlist ::= (svg:stroke-width::length)? ;
 style-graphic-properties-attlist ::= (svg:stroke-color::color)? ;
 style-graphic-properties-attlist ::= (draw:marker-start::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:marker-end::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:marker-start-width::length)? ;
 style-graphic-properties-attlist ::= (draw:marker-end-width::length)? ;
 style-graphic-properties-attlist ::= (draw:marker-start-center::boolean)? ;
 style-graphic-properties-attlist ::= (draw:marker-end-center::boolean)? ;
 style-graphic-properties-attlist ::= (svg:stroke-opacity::(string() | percent))? ;
 style-graphic-properties-attlist ::= (draw:stroke-linejoin::("miter" | "round" | "bevel" | "middle" | "none" | "inherit"))? ;
 style-graphic-properties-attlist ::= (draw:symbol-color::color)? ;
 style-graphic-properties-attlist ::= (text:animation::("none" | "scroll" | "alternate" | "slide"))? ;
 style-graphic-properties-attlist ::= (text:animation-direction::("left" | "right" | "up" | "down"))? ;
 style-graphic-properties-attlist ::= (text:animation-start-inside::boolean)? ;
 style-graphic-properties-attlist ::= (text:animation-stop-inside::boolean)? ;
 style-graphic-properties-attlist ::= (text:animation-repeat::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (text:animation-delay::duration)? ;
 style-graphic-properties-attlist ::= (text:animation-steps::length)? ;
 style-graphic-properties-attlist ::= (draw:auto-grow-width::boolean)? (draw:auto-grow-height::boolean)? ;
 style-graphic-properties-attlist ::= (draw:fit-to-size::boolean)? ;
 style-graphic-properties-attlist ::= (draw:fit-to-contour::boolean)? ;
 style-graphic-properties-attlist ::= (draw:textarea-vertical-align::("top" | "middle" | "bottom" | "justify"))? ;
 style-graphic-properties-attlist ::= (draw:textarea-horizontal-align::("left" | "center" | "right" | "justify"))? ;
 style-graphic-properties-attlist ::= (fo:wrap-option::("no-wrap" | "wrap"))? ;
 style-graphic-properties-attlist ::= (draw:color-mode::("greyscale" | "mono" | "watermark" | "standard"))? ;
 style-graphic-properties-attlist ::= (draw:color-inversion::boolean)? ;
 style-graphic-properties-attlist ::= (draw:luminance::percent)? ;
 style-graphic-properties-attlist ::= (draw:contrast::percent)? ;
 style-graphic-properties-attlist ::= (draw:gamma::percent)? ;
 style-graphic-properties-attlist ::= (draw:red::percent)? ;
 style-graphic-properties-attlist ::= (draw:green::percent)? ;
 style-graphic-properties-attlist ::= (draw:blue::percent)? ;
 style-graphic-properties-attlist ::= (draw:image-opacity::percent)? ;
 style-graphic-properties-attlist ::= (draw:shadow::("visible" | "hidden"))? ;
 style-graphic-properties-attlist ::= (draw:shadow-offset-x::length)? (draw:shadow-offset-y::length)? ;
 style-graphic-properties-attlist ::= (draw:shadow-color::color)? ;
 style-graphic-properties-attlist ::= (draw:shadow-opacity::percent)? ;
 style-graphic-properties-attlist ::= (draw:start-line-spacing-horizontal::distance)? (draw:start-line-spacing-vertical::distance)? ;
 style-graphic-properties-attlist ::= (draw:end-line-spacing-horizontal::distance)? (draw:end-line-spacing-vertical::distance)? ;
 style-graphic-properties-attlist ::= (draw:line-distance::distance)? ;
 style-graphic-properties-attlist ::= (draw:guide-overhang::length)? ;
 style-graphic-properties-attlist ::= (draw:guide-distance::distance)? ;
 style-graphic-properties-attlist ::= (draw:start-guide::length)? ;
 style-graphic-properties-attlist ::= (draw:end-guide::length)? ;
 style-graphic-properties-attlist ::= (draw:placing::("below" | "above"))? ;
 style-graphic-properties-attlist ::= (draw:parallel::boolean)? ;
 style-graphic-properties-attlist ::= (draw:measure-align::("automatic" | "left-outside" | "inside" | "right-outside"))? (draw:measure-vertical-align::("automatic" | "above" | "below" | "center"))? ;
 style-graphic-properties-attlist ::= (draw:unit::("automatic" | "mm" | "cm" | "m" | "km" | "pt" | "pc" | "inch" | "ft" | "mi"))? ;
 style-graphic-properties-attlist ::= (draw:show-unit::boolean)? ;
 style-graphic-properties-attlist ::= (draw:decimal-places::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (draw:caption-type::("straight-line" | "angled-line" | "angled-connector-line"))? ;
 style-graphic-properties-attlist ::= (draw:caption-angle-type::("fixed" | "free"))? ;
 style-graphic-properties-attlist ::= (draw:caption-angle::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (draw:caption-gap::distance)? ;
 style-graphic-properties-attlist ::= (draw:caption-escape-direction::("horizontal" | "vertical" | "auto"))? ;
 style-graphic-properties-attlist ::= (draw:caption-escape::(length | percent))? ;
 style-graphic-properties-attlist ::= (draw:caption-line-length::length)? ;
 style-graphic-properties-attlist ::= (draw:caption-fit-line-length::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:horizontal-segments::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:vertical-segments::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:edge-rounding::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:edge-rounding-mode::("correct" | "attractive"))? ;
 style-graphic-properties-attlist ::= (dr3d:back-scale::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:depth::length)? ;
 style-graphic-properties-attlist ::= (dr3d:backface-culling::("enabled" | "disabled"))? ;
 style-graphic-properties-attlist ::= (dr3d:end-angle::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:close-front::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:close-back::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:lighting-mode::("standard" | "double-sided"))? ;
 style-graphic-properties-attlist ::= (dr3d:normals-kind::("object" | "flat" | "sphere"))? ;
 style-graphic-properties-attlist ::= (dr3d:normals-direction::("normal" | "inverse"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-generation-mode-x::("object" | "parallel" | "sphere"))? (dr3d:texture-generation-mode-y::("object" | "parallel" | "sphere"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-kind::("luminance" | "intesity" | "color"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-filter::("enabled" | "disabled"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-mode::("replace" | "modulate" | "blend"))? ;
 style-graphic-properties-attlist ::= (dr3d:ambient-color::color)? (dr3d:emissive-color::color)? (dr3d:specular-color::color)? (dr3d:diffuse-color::color)? ;
 style-graphic-properties-attlist ::= (dr3d:shininess::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:shadow::("visible" | "hidden"))? ;
 style-graphic-properties-attlist ::= common-draw-rel-size-attlist (fo:min-width::(length | percent))? ;
 style-graphic-properties-attlist ::= (fo:min-height::(length | percent))? ;
 style-graphic-properties-attlist ::= (fo:max-height::(length | percent))? (fo:max-width::(length | percent))? ;
 style-graphic-properties-attlist ::= common-horizontal-margin-attlist ;
 style-graphic-properties-attlist ::= common-vertical-margin-attlist ;
 style-graphic-properties-attlist ::= common-margin-attlist ;
 style-graphic-properties-attlist ::= (style:print-content::boolean)? ;
 style-graphic-properties-attlist ::= (style:protect::("none" | (("content" | "position" | "size")+)))? ;
 style-graphic-properties-attlist ::= (style:horizontal-pos::("left" | "center" | "right" | "from-left" | "inside" | "outside" | "from-inside"))? (svg:x::coordinate)? ;
 style-graphic-properties-attlist ::= (style:horizontal-rel::("page" | "page-content" | "page-start-margin" | "page-end-margin" | "frame" | "frame-content" | "frame-start-margin" | "frame-end-margin" | "paragraph" | "paragraph-content" | "paragraph-start-margin" | "paragraph-end-margin" | "char"))? ;
 style-graphic-properties-attlist ::= common-vertical-pos-attlist ;
 style-graphic-properties-attlist ::= common-vertical-rel-attlist ;
 style-graphic-properties-attlist ::= common-text-anchor-attlist ;
 style-graphic-properties-attlist ::= common-border-attlist ;
 style-graphic-properties-attlist ::= common-border-line-width-attlist ;
 style-graphic-properties-attlist ::= common-padding-attlist ;
 style-graphic-properties-attlist ::= common-shadow-attlist ;
 style-graphic-properties-attlist ::= common-background-color-attlist ;
 style-graphic-properties-attlist ::= (style:editable::boolean)? ;
 style-graphic-properties-attlist ::= (style:wrap::("none" | "left" | "right" | "parallel" | "dynamic" | "run-through" | "biggest"))? ;
 style-graphic-properties-attlist ::= (style:wrap-dynamic-treshold::nonNegativeLength)? ;
 style-graphic-properties-attlist ::= (style:number-wrapped-paragraphs::("no-limit" | positiveInteger))? ;
 style-graphic-properties-attlist ::= (style:wrap-contour::boolean)? ;
 style-graphic-properties-attlist ::= (style:wrap-contour-mode::("full" | "outside"))? ;
 style-graphic-properties-attlist ::= (style:run-through::("foreground" | "background"))? ;
 style-graphic-properties-attlist ::= (style:flow-with-text::boolean)? ;
 style-graphic-properties-attlist ::= (style:overflow-behavior::("clip" | "auto-create-new-frame"))? ;
 style-graphic-properties-attlist ::= (style:mirror::("none" | "vertical" | horizontal-mirror | ("vertical" horizontal-mirror) | (horizontal-mirror "vertical")))? ;
 style-graphic-properties-attlist ::= (fo:clip::string)? ;
 style-graphic-properties-attlist ::= (draw:wrap-influence-on-position::("iterative" | "once-concurrent" | "once-successive"))? ;
 style-graphic-properties-attlist ::= (draw:frame-display-scrollbar::boolean)? ;
 style-graphic-properties-attlist ::= (draw:frame-display-border::boolean)? ;
 style-graphic-properties-attlist ::= (draw:frame-margin-horizontal::nonNegativePixelLength)? (draw:frame-margin-vertical::nonNegativePixelLength)? ;
 style-graphic-properties-attlist ::= (draw:visible-area-left::nonNegativeLength)? (draw:visible-area-top::nonNegativeLength)? (draw:visible-area-width::positiveLength)? (draw:visible-area-height::positiveLength)? ;
 style-graphic-properties-attlist ::= (draw:ole-draw-aspect::nonNegativeInteger)? ;
percent ::= string() ;
presentation-show-attlist ::= presentation:name::string ;
 presentation-show-attlist ::= presentation:pages::string() ;
common-draw-layer-name-attlist ::= (draw:layer::string())? ;
text-index-entry-span ::= text:index-entry-span::((text:style-name::styleNameRef)? string()) ;
positiveLength ::= string() ;
number-number-attlist ::= (number:decimal-replacement::string())? ;
 number-number-attlist ::= (number:display-factor::double)? ;
styleNameRefs ::= string()* ;
common-field-description-attlist ::= (text:description::string())? ;
cellRangeAddressList ::= string() ;
draw-param-attlist ::= (draw:name::string())? ;
 draw-param-attlist ::= (draw:value::string())? ;
draw-object-ole-attlist ::= (draw:class-id::string())? ;
common-presentation-effect-attlist ::= draw:shape-id::IDREF ;
 common-presentation-effect-attlist ::= (presentation:effect::presentationEffects)? ;
 common-presentation-effect-attlist ::= (presentation:direction::presentationEffectDirections)? ;
 common-presentation-effect-attlist ::= (presentation:speed::presentationSpeeds)? ;
 common-presentation-effect-attlist ::= (presentation:delay::duration)? ;
 common-presentation-effect-attlist ::= (presentation:start-scale::percent)? ;
 common-presentation-effect-attlist ::= (presentation:path-id::string())? ;
animation-element ::= anim:animate::(common-anim-target-attlist common-anim-named-target-attlist common-anim-values-attlist common-anim-spline-mode-attlist common-spline-anim-value-attlist common-repeat-timing-attlist common-fill-timing-attlist common-anim-add-accum-attlist) ;
 animation-element ::= anim:set::(common-anim-target-attlist common-anim-named-target-attlist common-anim-set-values-attlist common-fill-timing-attlist common-anim-add-accum-attlist) ;
 animation-element ::= anim:animateMotion::(anim-animate-motion-attlist common-anim-target-attlist common-anim-named-target-attlist common-anim-add-accum-attlist common-anim-values-attlist common-fill-timing-attlist common-spline-anim-value-attlist) ;
 animation-element ::= anim:animateColor::(common-anim-target-attlist common-anim-named-target-attlist common-anim-add-accum-attlist common-anim-values-attlist common-anim-spline-mode-attlist common-spline-anim-value-attlist anim-animate-color-attlist common-fill-timing-attlist) ;
 animation-element ::= anim:animateTransform::(common-anim-target-attlist common-anim-named-target-attlist common-anim-add-accum-attlist common-anim-values-attlist anim-animate-transform-attlist common-fill-timing-attlist) ;
 animation-element ::= anim:transitionFilter::(common-anim-target-attlist common-anim-add-accum-attlist common-anim-values-attlist common-anim-spline-mode-attlist anim-transition-filter-attlist common-fill-timing-attlist) ;
 animation-element ::= anim:par::(common-anim-attlist common-timing-attlist common-endsync-timing-attlist animation-element*) ;
 animation-element ::= anim:seq::(common-anim-attlist common-endsync-timing-attlist common-timing-attlist) ;
 animation-element ::= anim:iterate::(common-anim-attlist anin-iterate-attlist common-timing-attlist common-endsync-timing-attlist animation-element*) ;
 animation-element ::= anim:audio::(common-anim-attlist anim-audio-attlist common-basic-timing-attlist) ;
 animation-element ::= anim:command::(common-anim-attlist anim-command-attlist common-begin-end-timing-attlist common-anim-target-attlist (anim:param::(anim:name::string() anim:value::string()))*) ;
config-config-item ::= config:config-item::(config-config-item-attlist string()) ;
svg-font-face-format ::= svg:font-face-format::((svg:string::string())?) ;
cellAddress ::= string() ;
number-text ::= number:text::string() ;
base64Binary ::= string() ;
date ::= string() ;
style-graphic-fill-properties-attlist ::= (draw:fill::("none" | "solid" | "bitmap" | "gradient" | "hatch"))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-color::color)? ;
 style-graphic-fill-properties-attlist ::= (draw:secondary-fill-color::color)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-gradient-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (draw:gradient-step-count::nonNegativeInteger)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-hatch-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-hatch-solid::boolean)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (style:repeat::("no-repeat" | "repeat" | "stretch"))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-width::(length | percent))? (draw:fill-image-height::(length | percent))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-ref-point-x::percent)? (draw:fill-image-ref-point-y::percent)? (draw:fill-image-ref-point::("top-left" | "top" | "top-right" | "left" | "center" | "right" | "bottom-left" | "bottom" | "bottom-right"))? ;
 style-graphic-fill-properties-attlist ::= (draw:tile-repeat-offset::string())? ;
 style-graphic-fill-properties-attlist ::= (draw:opacity::percent)? ;
 style-graphic-fill-properties-attlist ::= (draw:opacity-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (svg:fill-rule::("nonzero" | "evenodd"))? ;
anyAttListOrElements ::= string()* anyElements ;
character ::= string() ;
nonNegativeLength ::= string() ;
variableName ::= string() ;
countryCode ::= string() ;
office-meta-data ::= meta:generator::string ;
 office-meta-data ::= dc:title::string ;
 office-meta-data ::= dc:description::string ;
 office-meta-data ::= dc:subject::string ;
 office-meta-data ::= meta:keyword::string ;
 office-meta-data ::= meta:initial-creator::string ;
 office-meta-data ::= dc-creator ;
 office-meta-data ::= meta:printed-by::string ;
 office-meta-data ::= meta:creation-date::dateTime ;
 office-meta-data ::= dc-date ;
 office-meta-data ::= meta:print-date::dateTime ;
 office-meta-data ::= meta:template::(xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? (xlink:title::string)? (meta:date::dateTime)?) ;
 office-meta-data ::= meta:auto-reload::((xlink:type::"simple")? (xlink:show::"replace")? (xlink:actuate::"onLoad")? (xlink:href::anyURI)? (meta:delay::duration)?) ;
 office-meta-data ::= meta:hyperlink-behaviour::((office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))?) ;
 office-meta-data ::= dc:language::language ;
 office-meta-data ::= meta:editing-cycles::nonNegativeInteger ;
 office-meta-data ::= meta:editing-duration::duration ;
 office-meta-data ::= meta:document-statistic::((meta:page-count::nonNegativeInteger)? (meta:table-count::nonNegativeInteger)? (meta:draw-count::nonNegativeInteger)? (meta:image-count::nonNegativeInteger)? (meta:ole-object-count::nonNegativeInteger)? (meta:paragraph-count::nonNegativeInteger)? (meta:word-count::nonNegativeInteger)? (meta:character-count::nonNegativeInteger)? (frame-count::nonNegativeInteger)? (sentence-count::nonNegativeInteger)? (syllable-count::nonNegativeInteger)? (non-whitespace-character-count::nonNegativeInteger)? (meta:row-count::nonNegativeInteger)? (meta:cell-count::nonNegativeInteger)? (meta:object-count::nonNegativeInteger)?) ;
 office-meta-data ::= meta:user-defined::(meta:name::string (meta:value-type::"float" double) | (meta:value-type::"date" dateOrDateTime) | (meta:value-type::"time" duration) | (meta:value-type::"boolean" boolean) | (meta:value-type::"string" string) | string()) ;
textEncoding ::= string() ;
form-form-attlist ::= (xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")?)? ;
 form-form-attlist ::= (office:target-frame::targetFrameName)? ;
 form-form-attlist ::= (form:method::("get" | "post" | string))? ;
 form-form-attlist ::= (form:enctype::string)? ;
 form-form-attlist ::= (form:allow-deletes::boolean)? ;
 form-form-attlist ::= (form:allow-inserts::boolean)? ;
 form-form-attlist ::= (form:allow-updates::boolean)? ;
 form-form-attlist ::= (form:apply-filter::boolean)? ;
 form-form-attlist ::= (form:command-type::("table" | "query" | "command"))? ;
 form-form-attlist ::= (form:command::string())? ;
 form-form-attlist ::= (form:datasource::(anyURI | string))? ;
 form-form-attlist ::= (form:master-fields::string)? ;
 form-form-attlist ::= (form:detail-fields::string)? ;
 form-form-attlist ::= (form:escape-processing::boolean)? ;
 form-form-attlist ::= (form:filter::string)? ;
 form-form-attlist ::= (form:ignore-result::boolean)? ;
 form-form-attlist ::= (form:navigation-mode::navigation)? ;
 form-form-attlist ::= (form:order::string)? ;
 form-form-attlist ::= (form:tab-cycle::tab-cycles)? ;
form-option ::= form:option::(form-option-attlist string()) ;
ID ::= string() ;
dateTime ::= string() ;
paragraph-content ::= string() ;
 paragraph-content ::= text:s::((text:c::nonNegativeInteger)?) ;
 paragraph-content ::= text:tab::text-tab-attr ;
 paragraph-content ::= text:line-break::ε ;
 paragraph-content ::= text:span::((text:style-name::styleNameRef)? (text:class-names::styleNameRefs)? paragraph-content*) ;
 paragraph-content ::= text:a::(text-a-attlist office-event-listeners? paragraph-content*) ;
 paragraph-content ::= (text:bookmark::(text:name::string)) | (text:bookmark-start::(text:name::string)) | (text:bookmark-end::(text:name::string)) ;
 paragraph-content ::= text:reference-mark::(text:name::string) ;
 paragraph-content ::= (text:reference-mark-start::(text:name::string)) | (text:reference-mark-end::(text:name::string)) ;
 paragraph-content ::= text:note::(text-note-class (text:id::string)? text:note-citation::((text:label::string)? string()) text:note-body::(text-content*)) ;
 paragraph-content ::= text:ruby::((text:style-name::styleNameRef)? text:ruby-base::paragraph-content text:ruby-text::((text:style-name::styleNameRef)? string())) ;
 paragraph-content ::= office-annotation ;
 paragraph-content ::= change-marks ;
 paragraph-content ::= shape | draw-a ;
 paragraph-content ::= text:date::(text-date-attlist string()) ;
 paragraph-content ::= text:time::(text-time-attlist string()) ;
 paragraph-content ::= text:page-number::(text-page-number-attlist string()) ;
 paragraph-content ::= text:page-continuation::(text-page-continuation-attlist string()) ;
 paragraph-content ::= text:sender-firstname::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-lastname::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-initials::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-title::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-position::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-email::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-phone-private::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-fax::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-company::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-phone-work::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-street::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-city::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-postal-code::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-country::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-state-or-province::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:author-name::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:author-initials::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:chapter::(text-chapter-attlist string()) ;
 paragraph-content ::= text:file-name::(text-file-name-attlist string()) ;
 paragraph-content ::= text:template-name::(text-template-name-attlist string()) ;
 paragraph-content ::= text:sheet-name::string() ;
 paragraph-content ::= text:variable-set::(common-field-name-attlist common-field-formula-attlist common-value-and-type-attlist common-field-display-value-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:variable-get::(common-field-name-attlist common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:variable-input::(common-field-name-attlist common-field-description-attlist common-value-type-attlist common-field-display-value-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:user-field-get::(common-field-name-attlist common-field-display-value-formula-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:user-field-input::(common-field-name-attlist common-field-description-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:sequence::(common-field-name-attlist common-field-formula-attlist common-field-num-format-attlist text-sequence-ref-name string()) ;
 paragraph-content ::= text:expression::(common-field-formula-attlist common-value-and-type-attlist? common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:text-input::(common-field-description-attlist string()) ;
 paragraph-content ::= text:initial-creator::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:creation-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::dateOrDateTime)? string()) ;
 paragraph-content ::= text:creation-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::timeOrDateTime)? string()) ;
 paragraph-content ::= text:description::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:user-defined::(common-field-fixed-attlist text:name::string common-field-data-style-name-attlist (office:value::double)? (office:date-value::dateOrDateTime)? (office:time-value::duration)? (office:boolean-value::boolean)? (office:string-value::string)? string()) ;
 paragraph-content ::= text:print-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::time)? string()) ;
 paragraph-content ::= text:print-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::date)? string()) ;
 paragraph-content ::= text:printed-by::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:title::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:subject::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:keywords::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:editing-cycles::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:editing-duration::(common-field-fixed-attlist common-field-data-style-name-attlist (text:duration::duration)? string()) ;
 paragraph-content ::= text:modification-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::time)? string()) ;
 paragraph-content ::= text:modification-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::date)? string()) ;
 paragraph-content ::= text:creator::(common-field-fixed-attlist string()) ;
 paragraph-content ::= (text:page-count::(common-field-num-format-attlist string())) | (text:paragraph-count::(common-field-num-format-attlist string())) | (text:word-count::(common-field-num-format-attlist string())) | (text:character-count::(common-field-num-format-attlist string())) | (text:table-count::(common-field-num-format-attlist string())) | (text:image-count::(common-field-num-format-attlist string())) | (text:object-count::(common-field-num-format-attlist string())) ;
 paragraph-content ::= text:database-display::(text-database-display-attlist string()) ;
 paragraph-content ::= text:database-next::text-database-next-attlist ;
 paragraph-content ::= text:database-row-select::text-database-row-select-attlist ;
 paragraph-content ::= text:database-row-number::(common-field-database-table common-field-num-format-attlist (text:value::nonNegativeInteger)? string()) ;
 paragraph-content ::= text:database-name::(common-field-database-table string()) ;
 paragraph-content ::= text:page-variable-set::(text-set-page-variable-attlist string()) ;
 paragraph-content ::= text:page-variable-get::(text-get-page-variable-attlist string()) ;
 paragraph-content ::= text:placeholder::(text-placeholder-attlist string()) ;
 paragraph-content ::= text:conditional-text::(text-conditional-text-attlist string()) ;
 paragraph-content ::= text:hidden-text::(text-hidden-text-attlist string()) ;
 paragraph-content ::= (text:reference-ref::(text-common-ref-content text-ref-content)) | (text:bookmark-ref::(text-common-ref-content text-ref-content)) ;
 paragraph-content ::= text:note-ref::(text-common-ref-content text-note-ref-content text-ref-content) ;
 paragraph-content ::= text:sequence-ref::(text-common-ref-content text-sequence-ref-content) ;
 paragraph-content ::= text:script::((xlink:href::anyURI (xlink:type::"simple")?) | string() (script:language::string)?) ;
 paragraph-content ::= text:execute-macro::((text:name::string)? office-event-listeners? string()) ;
 paragraph-content ::= text:hidden-paragraph::(text-hidden-paragraph-attlist string()) ;
 paragraph-content ::= text:dde-connection::(text:connection-name::string string()) ;
 paragraph-content ::= text:measure::(text:kind::("value" | "unit" | "gap") string()) ;
 paragraph-content ::= text:table-formula::(common-field-formula-attlist common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:toc-mark-start::text-toc-mark-start-attrs ;
 paragraph-content ::= text:toc-mark-end::text-id ;
 paragraph-content ::= text:toc-mark::(text:string-value::string text-outline-level) ;
 paragraph-content ::= text:user-index-mark-start::(text-id text-outline-level text-index-name) ;
 paragraph-content ::= text:user-index-mark-end::(text-id text-outline-level) ;
 paragraph-content ::= text:user-index-mark::(text:string-value::string text-outline-level text-index-name) ;
 paragraph-content ::= text:alphabetical-index-mark-start::(text-id text-alphabetical-index-mark-attrs) ;
 paragraph-content ::= text:alphabetical-index-mark-end::text-id ;
 paragraph-content ::= text:alphabetical-index-mark::(text:string-value::string text-alphabetical-index-mark-attrs) ;
 paragraph-content ::= text:bibliography-mark::(text:bibliography-type::text-bibliography-types ((text:identifier::string) | (text:address::string) | (text:annote::string) | (text:author::string) | (text:booktitle::string) | (text:chapter::string) | (text:edition::string) | (text:editor::string) | (text:howpublished::string) | (text:institution::string) | (text:journal::string) | (text:month::string) | (text:note::string) | (text:number::string) | (text:organizations::string) | (text:pages::string) | (text:publisher::string) | (text:school::string) | (text:series::string) | (text:title::string) | (text:report-type::string) | (text:volume::string) | (text:year::string) | (text:url::string) | (text:custom1::string) | (text:custom2::string) | (text:custom3::string) | (text:custom4::string) | (text:custom5::string) | (text:isbn::string) | (text:issn::string))* string()) ;
 paragraph-content ::= presentation:header::ε ;
 paragraph-content ::= presentation:footer::ε ;
 paragraph-content ::= presentation:date-time::ε ;
styleNameRef ::= string() | ε ;
duration ::= string() ;
draw-enhanced-geometry-attlist ::= (draw:type::custom-shape-type)? ;
 draw-enhanced-geometry-attlist ::= (svg:viewBox::(integer integer integer integer))? ;
 draw-enhanced-geometry-attlist ::= (draw:mirror-vertical::boolean)? (draw:mirror-horizontal::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-rotate-angle::double)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:concentric-gradient-fill-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-brightness::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-depth::(length double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-diffusion::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-number-of-line-segments::integer)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-light-face::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-harsh::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-harsh::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-level::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-level::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-direction::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-direction::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-metal::boolean)? ;
 draw-enhanced-geometry-attlist ::= (dr3d:shade-mode::("flat" | "phong" | "gouraud" | "draft"))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-rotation-angle::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-rotation-center::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-shininess::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-skew::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-specularity::percent)? ;
 draw-enhanced-geometry-attlist ::= (dr3d:projection::("parallel" | "perspective"))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-viewpoint::point3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-origin::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-color::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:enhanced-path::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:path-stretchpoint-x::double)? (draw:path-stretchpoint-y::double)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-areas::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-points::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-point-type::("none" | "segments" | "rectangle"))? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-point-leaving-directions::string())? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-mode::("normal" | "path" | "shape"))? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-scale::("path" | "shape"))? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-same-letter-heights::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:modifiers::string)? ;
string ::= string() ;
namespacedToken ::= string() ;
number-embedded-text ::= number:embedded-text::(number-embedded-text-attlist string()) ;
nonNegativePixelLength ::= string() ;
svg-font-face-name ::= svg:font-face-name::((name::string())?) ;
anyElements ::= (string()? anyAttListOrElements string()?)* ;
table-table-attlist ::= (table:name::string)? ;
 table-table-attlist ::= (table:style-name::styleNameRef)? ;
 table-table-attlist ::= (table:protected::boolean)? (table:protection-key::string())? ;
 table-table-attlist ::= (table:print::boolean)? ;
 table-table-attlist ::= (table:print-ranges::cellRangeAddressList)? ;
 table-table-attlist ::= (table:is-sub-table::boolean)? ;
point3D ::= string() ;
--------------------odf::opendoc-1.1-manifest.bgf--------------------
key-derivation-attlist ::= manifest:key-derivation-name::string() ;
 key-derivation-attlist ::= manifest:salt::string() ;
 key-derivation-attlist ::= manifest:iteration-count::integer() ;
encryption-data-attlist ::= manifest:checksum-type::string() ;
 encryption-data-attlist ::= manifest:checksum::string() ;
file-entry-attlist ::= manifest:full-path::string() ;
 file-entry-attlist ::= (manifest:size::integer())? ;
 file-entry-attlist ::= manifest:media-type::string() ;
algorithm-attlist ::= manifest:algorithm-name::string() ;
 algorithm-attlist ::= manifest:initialisation-vector::string() ;
--------------------odf::opendoc-1.1-strict.bgf--------------------
text-linenumbering-separator ::= text:linenumbering-separator::((text:increment::nonNegativeInteger)? string()) ;
presentation-decl ::= presentation:header-decl::(presentation-header-decl-attlist string()) ;
 presentation-decl ::= presentation:footer-decl::(presentation-footer-decl-attlist string()) ;
 presentation-decl ::= presentation:date-time-decl::(presentation-date-time-decl-attlist string()) ;
text-common-ref-content ::= string() ;
 text-common-ref-content ::= (text:ref-name::string)? ;
form-item ::= form:item::(form-item-attlist string()) ;
office-script ::= office:script::(office-script-attlist string()? anyElements string()?) ;
cellRangeAddress ::= string() ;
IDREF ::= string() ;
text-notes-configuration-content ::= text-note-class ;
 text-notes-configuration-content ::= (text:citation-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:citation-body-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:default-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:master-page-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:start-value::nonNegativeInteger)? ;
 text-notes-configuration-content ::= common-num-format-prefix-suffix-attlist common-num-format-attlist? ;
 text-notes-configuration-content ::= (text:start-numbering-at::("document" | "chapter" | "page"))? ;
 text-notes-configuration-content ::= (text:footnotes-position::("text" | "page" | "section" | "document"))? ;
 text-notes-configuration-content ::= (text:note-continuation-notice-forward::string())? ;
 text-notes-configuration-content ::= (text:note-continuation-notice-backward::string())? ;
draw-applet-attlist ::= (draw:code::string())? ;
 draw-applet-attlist ::= (draw:object::string())? ;
 draw-applet-attlist ::= (draw:archive::string())? ;
 draw-applet-attlist ::= (draw:may-script::boolean)? ;
vector3D ::= string() ;
style-font-face-attlist ::= (svg:font-family::string)? (svg:font-style::fontStyle)? (svg:font-variant::fontVariant)? (svg:font-weight::fontWeight)? (svg:font-stretch::("normal" | "ultra-condensed" | "extra-condensed" | "condensed" | "semi-condensed" | "semi-expanded" | "expanded" | "extra-expanded" | "ultra-expanded"))? (svg:font-size::positiveLength)? (svg:unicode-range::string())? (svg:units-per-em::integer)? (svg:panose-1::string())? (svg:stemv::integer)? (svg:stemh::integer)? (svg:slope::integer)? (svg:cap-height::integer)? (svg:x-height::integer)? (svg:accent-height::integer)? (svg:ascent::integer)? (svg:descent::integer)? (svg:widths::string())? (svg:bbox::string())? (svg:ideographic::integer)? (svg:alphabetic::integer)? (svg:mathematical::integer)? (svg:hanging::integer)? (svg:v-ideographic::integer)? (svg:v-alphabetic::integer)? (svg:v-mathematical::integer)? (svg:v-hanging::integer)? (svg:underline-position::integer)? (svg:underline-thickness::integer)? (svg:strikethrough-position::integer)? (svg:strikethrough-thickness::integer)? (svg:overline-position::integer)? (svg:overline-thickness::integer)? ;
 style-font-face-attlist ::= style:name::string ;
 style-font-face-attlist ::= (style:font-adornments::string)? ;
 style-font-face-attlist ::= (style:font-family-generic::fontFamilyGeneric)? ;
 style-font-face-attlist ::= (style:font-pitch::fontPitch)? ;
 style-font-face-attlist ::= (style:font-charset::textEncoding)? ;
pathData ::= string() ;
dateOrDateTime ::= string() ;
common-title-attlist ::= (form:title::string())? ;
formula ::= string() ;
length ::= string() ;
languageCode ::= string() ;
points ::= string() ;
color ::= string() ;
common-data-style-attlist ::= style:name::styleName ;
 common-data-style-attlist ::= (number:language::languageCode)? ;
 common-data-style-attlist ::= (number:country::countryCode)? ;
 common-data-style-attlist ::= (number:title::string())? ;
 common-data-style-attlist ::= (style:volatile::boolean)? ;
 common-data-style-attlist ::= (number:transliteration-format::string)? ;
 common-data-style-attlist ::= (number:transliteration-language::countryCode)? ;
 common-data-style-attlist ::= (number:transliteration-country::countryCode)? ;
 common-data-style-attlist ::= (number:transliteration-style::("short" | "medium" | "long"))? ;
anyURI ::= string() ;
styleName ::= string() ;
IDREFS ::= string() ;
svg-desc ::= svg:desc::string() ;
language ::= string() ;
relativeLength ::= string() ;
common-dr3d-transform-attlist ::= (dr3d:transform::string())? ;
double ::= string() ;
number-currency-symbol ::= number:currency-symbol::(number-currency-symbol-attlist string()) ;
mathMarkup ::= (α | string() | mathMarkup)* ;
draw-plugin-attlist ::= (draw:mime-type::string())? ;
time ::= string() ;
timeOrDateTime ::= string() ;
text-index-title-template ::= text:index-title-template::((text:style-name::styleNameRef)? string()) ;
style-graphic-properties-attlist ::= (draw:stroke::("none" | "dash" | "solid"))? ;
 style-graphic-properties-attlist ::= (draw:stroke-dash::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:stroke-dash-names::styleNameRefs)? ;
 style-graphic-properties-attlist ::= (svg:stroke-width::length)? ;
 style-graphic-properties-attlist ::= (svg:stroke-color::color)? ;
 style-graphic-properties-attlist ::= (draw:marker-start::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:marker-end::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:marker-start-width::length)? ;
 style-graphic-properties-attlist ::= (draw:marker-end-width::length)? ;
 style-graphic-properties-attlist ::= (draw:marker-start-center::boolean)? ;
 style-graphic-properties-attlist ::= (draw:marker-end-center::boolean)? ;
 style-graphic-properties-attlist ::= (svg:stroke-opacity::(string() | percent))? ;
 style-graphic-properties-attlist ::= (draw:stroke-linejoin::("miter" | "round" | "bevel" | "middle" | "none" | "inherit"))? ;
 style-graphic-properties-attlist ::= (draw:symbol-color::color)? ;
 style-graphic-properties-attlist ::= (text:animation::("none" | "scroll" | "alternate" | "slide"))? ;
 style-graphic-properties-attlist ::= (text:animation-direction::("left" | "right" | "up" | "down"))? ;
 style-graphic-properties-attlist ::= (text:animation-start-inside::boolean)? ;
 style-graphic-properties-attlist ::= (text:animation-stop-inside::boolean)? ;
 style-graphic-properties-attlist ::= (text:animation-repeat::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (text:animation-delay::duration)? ;
 style-graphic-properties-attlist ::= (text:animation-steps::length)? ;
 style-graphic-properties-attlist ::= (draw:auto-grow-width::boolean)? (draw:auto-grow-height::boolean)? ;
 style-graphic-properties-attlist ::= (draw:fit-to-size::boolean)? ;
 style-graphic-properties-attlist ::= (draw:fit-to-contour::boolean)? ;
 style-graphic-properties-attlist ::= (draw:textarea-vertical-align::("top" | "middle" | "bottom" | "justify"))? ;
 style-graphic-properties-attlist ::= (draw:textarea-horizontal-align::("left" | "center" | "right" | "justify"))? ;
 style-graphic-properties-attlist ::= (fo:wrap-option::("no-wrap" | "wrap"))? ;
 style-graphic-properties-attlist ::= (draw:color-mode::("greyscale" | "mono" | "watermark" | "standard"))? ;
 style-graphic-properties-attlist ::= (draw:color-inversion::boolean)? ;
 style-graphic-properties-attlist ::= (draw:luminance::percent)? ;
 style-graphic-properties-attlist ::= (draw:contrast::percent)? ;
 style-graphic-properties-attlist ::= (draw:gamma::percent)? ;
 style-graphic-properties-attlist ::= (draw:red::percent)? ;
 style-graphic-properties-attlist ::= (draw:green::percent)? ;
 style-graphic-properties-attlist ::= (draw:blue::percent)? ;
 style-graphic-properties-attlist ::= (draw:image-opacity::percent)? ;
 style-graphic-properties-attlist ::= (draw:shadow::("visible" | "hidden"))? ;
 style-graphic-properties-attlist ::= (draw:shadow-offset-x::length)? (draw:shadow-offset-y::length)? ;
 style-graphic-properties-attlist ::= (draw:shadow-color::color)? ;
 style-graphic-properties-attlist ::= (draw:shadow-opacity::percent)? ;
 style-graphic-properties-attlist ::= (draw:start-line-spacing-horizontal::distance)? (draw:start-line-spacing-vertical::distance)? ;
 style-graphic-properties-attlist ::= (draw:end-line-spacing-horizontal::distance)? (draw:end-line-spacing-vertical::distance)? ;
 style-graphic-properties-attlist ::= (draw:line-distance::distance)? ;
 style-graphic-properties-attlist ::= (draw:guide-overhang::length)? ;
 style-graphic-properties-attlist ::= (draw:guide-distance::distance)? ;
 style-graphic-properties-attlist ::= (draw:start-guide::length)? ;
 style-graphic-properties-attlist ::= (draw:end-guide::length)? ;
 style-graphic-properties-attlist ::= (draw:placing::("below" | "above"))? ;
 style-graphic-properties-attlist ::= (draw:parallel::boolean)? ;
 style-graphic-properties-attlist ::= (draw:measure-align::("automatic" | "left-outside" | "inside" | "right-outside"))? (draw:measure-vertical-align::("automatic" | "above" | "below" | "center"))? ;
 style-graphic-properties-attlist ::= (draw:unit::("automatic" | "mm" | "cm" | "m" | "km" | "pt" | "pc" | "inch" | "ft" | "mi"))? ;
 style-graphic-properties-attlist ::= (draw:show-unit::boolean)? ;
 style-graphic-properties-attlist ::= (draw:decimal-places::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (draw:caption-type::("straight-line" | "angled-line" | "angled-connector-line"))? ;
 style-graphic-properties-attlist ::= (draw:caption-angle-type::("fixed" | "free"))? ;
 style-graphic-properties-attlist ::= (draw:caption-angle::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (draw:caption-gap::distance)? ;
 style-graphic-properties-attlist ::= (draw:caption-escape-direction::("horizontal" | "vertical" | "auto"))? ;
 style-graphic-properties-attlist ::= (draw:caption-escape::(length | percent))? ;
 style-graphic-properties-attlist ::= (draw:caption-line-length::length)? ;
 style-graphic-properties-attlist ::= (draw:caption-fit-line-length::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:horizontal-segments::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:vertical-segments::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:edge-rounding::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:edge-rounding-mode::("correct" | "attractive"))? ;
 style-graphic-properties-attlist ::= (dr3d:back-scale::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:depth::length)? ;
 style-graphic-properties-attlist ::= (dr3d:backface-culling::("enabled" | "disabled"))? ;
 style-graphic-properties-attlist ::= (dr3d:end-angle::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:close-front::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:close-back::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:lighting-mode::("standard" | "double-sided"))? ;
 style-graphic-properties-attlist ::= (dr3d:normals-kind::("object" | "flat" | "sphere"))? ;
 style-graphic-properties-attlist ::= (dr3d:normals-direction::("normal" | "inverse"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-generation-mode-x::("object" | "parallel" | "sphere"))? (dr3d:texture-generation-mode-y::("object" | "parallel" | "sphere"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-kind::("luminance" | "intensity" | "color"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-filter::("enabled" | "disabled"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-mode::("replace" | "modulate" | "blend"))? ;
 style-graphic-properties-attlist ::= (dr3d:ambient-color::color)? (dr3d:emissive-color::color)? (dr3d:specular-color::color)? (dr3d:diffuse-color::color)? ;
 style-graphic-properties-attlist ::= (dr3d:shininess::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:shadow::("visible" | "hidden"))? ;
 style-graphic-properties-attlist ::= common-draw-rel-size-attlist (fo:min-width::(length | percent))? ;
 style-graphic-properties-attlist ::= (fo:min-height::(length | percent))? ;
 style-graphic-properties-attlist ::= (fo:max-height::(length | percent))? (fo:max-width::(length | percent))? ;
 style-graphic-properties-attlist ::= common-horizontal-margin-attlist ;
 style-graphic-properties-attlist ::= common-vertical-margin-attlist ;
 style-graphic-properties-attlist ::= common-margin-attlist ;
 style-graphic-properties-attlist ::= (style:print-content::boolean)? ;
 style-graphic-properties-attlist ::= (style:protect::("none" | (("content" | "position" | "size")+)))? ;
 style-graphic-properties-attlist ::= (style:horizontal-pos::("left" | "center" | "right" | "from-left" | "inside" | "outside" | "from-inside"))? (svg:x::coordinate)? ;
 style-graphic-properties-attlist ::= (style:horizontal-rel::("page" | "page-content" | "page-start-margin" | "page-end-margin" | "frame" | "frame-content" | "frame-start-margin" | "frame-end-margin" | "paragraph" | "paragraph-content" | "paragraph-start-margin" | "paragraph-end-margin" | "char"))? ;
 style-graphic-properties-attlist ::= common-vertical-pos-attlist ;
 style-graphic-properties-attlist ::= common-vertical-rel-attlist ;
 style-graphic-properties-attlist ::= common-text-anchor-attlist ;
 style-graphic-properties-attlist ::= common-border-attlist ;
 style-graphic-properties-attlist ::= common-border-line-width-attlist ;
 style-graphic-properties-attlist ::= common-padding-attlist ;
 style-graphic-properties-attlist ::= common-shadow-attlist ;
 style-graphic-properties-attlist ::= common-background-color-attlist ;
 style-graphic-properties-attlist ::= (style:editable::boolean)? ;
 style-graphic-properties-attlist ::= (style:wrap::("none" | "left" | "right" | "parallel" | "dynamic" | "run-through" | "biggest"))? ;
 style-graphic-properties-attlist ::= (style:wrap-dynamic-threshold::nonNegativeLength)? ;
 style-graphic-properties-attlist ::= (style:number-wrapped-paragraphs::("no-limit" | positiveInteger))? ;
 style-graphic-properties-attlist ::= (style:wrap-contour::boolean)? ;
 style-graphic-properties-attlist ::= (style:wrap-contour-mode::("full" | "outside"))? ;
 style-graphic-properties-attlist ::= (style:run-through::("foreground" | "background"))? ;
 style-graphic-properties-attlist ::= (style:flow-with-text::boolean)? ;
 style-graphic-properties-attlist ::= (style:overflow-behavior::("clip" | "auto-create-new-frame"))? ;
 style-graphic-properties-attlist ::= (style:mirror::("none" | "vertical" | horizontal-mirror | ("vertical" horizontal-mirror) | (horizontal-mirror "vertical")))? ;
 style-graphic-properties-attlist ::= (fo:clip::string)? ;
 style-graphic-properties-attlist ::= (draw:wrap-influence-on-position::("iterative" | "once-concurrent" | "once-successive"))? ;
 style-graphic-properties-attlist ::= common-writing-mode-attlist ;
 style-graphic-properties-attlist ::= (draw:frame-display-scrollbar::boolean)? ;
 style-graphic-properties-attlist ::= (draw:frame-display-border::boolean)? ;
 style-graphic-properties-attlist ::= (draw:frame-margin-horizontal::nonNegativePixelLength)? (draw:frame-margin-vertical::nonNegativePixelLength)? ;
 style-graphic-properties-attlist ::= (draw:visible-area-left::nonNegativeLength)? (draw:visible-area-top::nonNegativeLength)? (draw:visible-area-width::positiveLength)? (draw:visible-area-height::positiveLength)? ;
 style-graphic-properties-attlist ::= (draw:ole-draw-aspect::nonNegativeInteger)? ;
percent ::= string() ;
presentation-show-attlist ::= presentation:name::string ;
 presentation-show-attlist ::= presentation:pages::string() ;
common-draw-layer-name-attlist ::= (draw:layer::string())? ;
text-index-entry-span ::= text:index-entry-span::((text:style-name::styleNameRef)? string()) ;
positiveLength ::= string() ;
number-number-attlist ::= (number:decimal-replacement::string())? ;
 number-number-attlist ::= (number:display-factor::double)? ;
styleNameRefs ::= string()* ;
common-field-description-attlist ::= (text:description::string())? ;
cellRangeAddressList ::= string() ;
draw-param-attlist ::= (draw:name::string())? ;
 draw-param-attlist ::= (draw:value::string())? ;
draw-object-ole-attlist ::= (draw:class-id::string())? ;
common-presentation-effect-attlist ::= draw:shape-id::IDREF ;
 common-presentation-effect-attlist ::= (presentation:effect::presentationEffects)? ;
 common-presentation-effect-attlist ::= (presentation:direction::presentationEffectDirections)? ;
 common-presentation-effect-attlist ::= (presentation:speed::presentationSpeeds)? ;
 common-presentation-effect-attlist ::= (presentation:delay::duration)? ;
 common-presentation-effect-attlist ::= (presentation:start-scale::percent)? ;
 common-presentation-effect-attlist ::= (presentation:path-id::string())? ;
animation-element ::= anim:animate::(common-anim-target-attlist common-anim-named-target-attlist common-anim-values-attlist common-anim-spline-mode-attlist common-spline-anim-value-attlist common-timing-attlist common-anim-add-accum-attlist) ;
 animation-element ::= anim:set::(common-anim-target-attlist common-anim-named-target-attlist common-anim-set-values-attlist common-timing-attlist common-anim-add-accum-attlist) ;
 animation-element ::= anim:animateMotion::(anim-animate-motion-attlist common-anim-target-attlist common-anim-named-target-attlist common-anim-add-accum-attlist common-anim-values-attlist common-timing-attlist common-spline-anim-value-attlist) ;
 animation-element ::= anim:animateColor::(common-anim-target-attlist common-anim-named-target-attlist common-anim-add-accum-attlist common-anim-values-attlist common-anim-spline-mode-attlist common-spline-anim-value-attlist anim-animate-color-attlist common-timing-attlist) ;
 animation-element ::= anim:animateTransform::(common-anim-target-attlist common-anim-named-target-attlist common-anim-add-accum-attlist common-anim-values-attlist anim-animate-transform-attlist common-timing-attlist) ;
 animation-element ::= anim:transitionFilter::(common-anim-target-attlist common-anim-add-accum-attlist common-anim-values-attlist common-anim-spline-mode-attlist anim-transition-filter-attlist common-timing-attlist) ;
 animation-element ::= anim:par::(common-anim-attlist common-timing-attlist common-endsync-timing-attlist animation-element*) ;
 animation-element ::= anim:seq::(common-anim-attlist common-endsync-timing-attlist common-timing-attlist animation-element*) ;
 animation-element ::= anim:iterate::(common-anim-attlist anim-iterate-attlist common-timing-attlist common-endsync-timing-attlist animation-element*) ;
 animation-element ::= anim:audio::(common-anim-attlist anim-audio-attlist common-basic-timing-attlist) ;
 animation-element ::= anim:command::(common-anim-attlist anim-command-attlist common-begin-end-timing-attlist common-anim-target-attlist (anim:param::(anim:name::string() anim:value::string()))*) ;
config-config-item ::= config:config-item::(config-config-item-attlist string()) ;
svg-font-face-format ::= svg:font-face-format::((svg:string::string())?) ;
cellAddress ::= string() ;
number-text ::= number:text::string() ;
base64Binary ::= string() ;
svg-title ::= svg:title::string() ;
date ::= string() ;
style-graphic-fill-properties-attlist ::= (draw:fill::("none" | "solid" | "bitmap" | "gradient" | "hatch"))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-color::color)? ;
 style-graphic-fill-properties-attlist ::= (draw:secondary-fill-color::color)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-gradient-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (draw:gradient-step-count::nonNegativeInteger)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-hatch-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-hatch-solid::boolean)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (style:repeat::("no-repeat" | "repeat" | "stretch"))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-width::(length | percent))? (draw:fill-image-height::(length | percent))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-ref-point-x::percent)? (draw:fill-image-ref-point-y::percent)? (draw:fill-image-ref-point::("top-left" | "top" | "top-right" | "left" | "center" | "right" | "bottom-left" | "bottom" | "bottom-right"))? ;
 style-graphic-fill-properties-attlist ::= (draw:tile-repeat-offset::string())? ;
 style-graphic-fill-properties-attlist ::= (draw:opacity::percent)? ;
 style-graphic-fill-properties-attlist ::= (draw:opacity-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (svg:fill-rule::("nonzero" | "evenodd"))? ;
anyAttListOrElements ::= string()* anyElements ;
character ::= string() ;
nonNegativeLength ::= string() ;
variableName ::= string() ;
countryCode ::= string() ;
office-meta-data ::= meta:generator::string ;
 office-meta-data ::= dc:title::string ;
 office-meta-data ::= dc:description::string ;
 office-meta-data ::= dc:subject::string ;
 office-meta-data ::= meta:keyword::string ;
 office-meta-data ::= meta:initial-creator::string ;
 office-meta-data ::= dc-creator ;
 office-meta-data ::= meta:printed-by::string ;
 office-meta-data ::= meta:creation-date::dateTime ;
 office-meta-data ::= dc-date ;
 office-meta-data ::= meta:print-date::dateTime ;
 office-meta-data ::= meta:template::(xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? (xlink:title::string)? (meta:date::dateTime)?) ;
 office-meta-data ::= meta:auto-reload::((xlink:type::"simple")? (xlink:show::"replace")? (xlink:actuate::"onLoad")? (xlink:href::anyURI)? (meta:delay::duration)?) ;
 office-meta-data ::= meta:hyperlink-behaviour::((office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))?) ;
 office-meta-data ::= dc:language::language ;
 office-meta-data ::= meta:editing-cycles::nonNegativeInteger ;
 office-meta-data ::= meta:editing-duration::duration ;
 office-meta-data ::= meta:document-statistic::((meta:page-count::nonNegativeInteger)? (meta:table-count::nonNegativeInteger)? (meta:draw-count::nonNegativeInteger)? (meta:image-count::nonNegativeInteger)? (meta:ole-object-count::nonNegativeInteger)? (meta:object-count::nonNegativeInteger)? (meta:paragraph-count::nonNegativeInteger)? (meta:word-count::nonNegativeInteger)? (meta:character-count::nonNegativeInteger)? (frame-count::nonNegativeInteger)? (sentence-count::nonNegativeInteger)? (syllable-count::nonNegativeInteger)? (non-whitespace-character-count::nonNegativeInteger)? (meta:row-count::nonNegativeInteger)? (meta:cell-count::nonNegativeInteger)?) ;
 office-meta-data ::= meta:user-defined::(meta:name::string (meta:value-type::"float" double) | (meta:value-type::"date" dateOrDateTime) | (meta:value-type::"time" duration) | (meta:value-type::"boolean" boolean) | (meta:value-type::"string" string) | string()) ;
textEncoding ::= string() ;
form-form-attlist ::= (xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")?)? ;
 form-form-attlist ::= (office:target-frame::targetFrameName)? ;
 form-form-attlist ::= (form:method::("get" | "post" | string))? ;
 form-form-attlist ::= (form:enctype::string)? ;
 form-form-attlist ::= (form:allow-deletes::boolean)? ;
 form-form-attlist ::= (form:allow-inserts::boolean)? ;
 form-form-attlist ::= (form:allow-updates::boolean)? ;
 form-form-attlist ::= (form:apply-filter::boolean)? ;
 form-form-attlist ::= (form:command-type::("table" | "query" | "command"))? ;
 form-form-attlist ::= (form:command::string())? ;
 form-form-attlist ::= (form:datasource::(anyURI | string))? ;
 form-form-attlist ::= (form:master-fields::string)? ;
 form-form-attlist ::= (form:detail-fields::string)? ;
 form-form-attlist ::= (form:escape-processing::boolean)? ;
 form-form-attlist ::= (form:filter::string)? ;
 form-form-attlist ::= (form:ignore-result::boolean)? ;
 form-form-attlist ::= (form:navigation-mode::navigation)? ;
 form-form-attlist ::= (form:order::string)? ;
 form-form-attlist ::= (form:tab-cycle::tab-cycles)? ;
form-option ::= form:option::(form-option-attlist string()) ;
ID ::= string() ;
dateTime ::= string() ;
paragraph-content ::= string() ;
 paragraph-content ::= text:s::((text:c::nonNegativeInteger)?) ;
 paragraph-content ::= text:tab::text-tab-attr ;
 paragraph-content ::= text:line-break::ε ;
 paragraph-content ::= text-soft-page-break ;
 paragraph-content ::= text:span::((text:style-name::styleNameRef)? (text:class-names::styleNameRefs)? paragraph-content*) ;
 paragraph-content ::= text:a::(text-a-attlist office-event-listeners? paragraph-content*) ;
 paragraph-content ::= (text:bookmark::(text:name::string)) | (text:bookmark-start::(text:name::string)) | (text:bookmark-end::(text:name::string)) ;
 paragraph-content ::= text:reference-mark::(text:name::string) ;
 paragraph-content ::= (text:reference-mark-start::(text:name::string)) | (text:reference-mark-end::(text:name::string)) ;
 paragraph-content ::= text:note::(text-note-class (text:id::string)? text:note-citation::((text:label::string)? string()) text:note-body::(text-content*)) ;
 paragraph-content ::= text:ruby::((text:style-name::styleNameRef)? text:ruby-base::paragraph-content text:ruby-text::((text:style-name::styleNameRef)? string())) ;
 paragraph-content ::= office-annotation ;
 paragraph-content ::= change-marks ;
 paragraph-content ::= shape | draw-a ;
 paragraph-content ::= text:date::(text-date-attlist string()) ;
 paragraph-content ::= text:time::(text-time-attlist string()) ;
 paragraph-content ::= text:page-number::(text-page-number-attlist string()) ;
 paragraph-content ::= text:page-continuation::(text-page-continuation-attlist string()) ;
 paragraph-content ::= text:sender-firstname::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-lastname::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-initials::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-title::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-position::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-email::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-phone-private::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-fax::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-company::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-phone-work::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-street::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-city::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-postal-code::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-country::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-state-or-province::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:author-name::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:author-initials::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:chapter::(text-chapter-attlist string()) ;
 paragraph-content ::= text:file-name::(text-file-name-attlist string()) ;
 paragraph-content ::= text:template-name::(text-template-name-attlist string()) ;
 paragraph-content ::= text:sheet-name::string() ;
 paragraph-content ::= text:variable-set::(common-field-name-attlist common-field-formula-attlist common-value-and-type-attlist common-field-display-value-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:variable-get::(common-field-name-attlist common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:variable-input::(common-field-name-attlist common-field-description-attlist common-value-type-attlist common-field-display-value-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:user-field-get::(common-field-name-attlist common-field-display-value-formula-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:user-field-input::(common-field-name-attlist common-field-description-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:sequence::(common-field-name-attlist common-field-formula-attlist common-field-num-format-attlist text-sequence-ref-name string()) ;
 paragraph-content ::= text:expression::(common-field-formula-attlist common-value-and-type-attlist? common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:text-input::(common-field-description-attlist string()) ;
 paragraph-content ::= text:initial-creator::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:creation-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::dateOrDateTime)? string()) ;
 paragraph-content ::= text:creation-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::timeOrDateTime)? string()) ;
 paragraph-content ::= text:description::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:user-defined::(common-field-fixed-attlist text:name::string common-field-data-style-name-attlist (office:value::double)? (office:date-value::dateOrDateTime)? (office:time-value::duration)? (office:boolean-value::boolean)? (office:string-value::string)? string()) ;
 paragraph-content ::= text:print-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::time)? string()) ;
 paragraph-content ::= text:print-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::date)? string()) ;
 paragraph-content ::= text:printed-by::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:title::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:subject::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:keywords::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:editing-cycles::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:editing-duration::(common-field-fixed-attlist common-field-data-style-name-attlist (text:duration::duration)? string()) ;
 paragraph-content ::= text:modification-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::time)? string()) ;
 paragraph-content ::= text:modification-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::date)? string()) ;
 paragraph-content ::= text:creator::(common-field-fixed-attlist string()) ;
 paragraph-content ::= (text:page-count::(common-field-num-format-attlist string())) | (text:paragraph-count::(common-field-num-format-attlist string())) | (text:word-count::(common-field-num-format-attlist string())) | (text:character-count::(common-field-num-format-attlist string())) | (text:table-count::(common-field-num-format-attlist string())) | (text:image-count::(common-field-num-format-attlist string())) | (text:object-count::(common-field-num-format-attlist string())) ;
 paragraph-content ::= text:database-display::(text-database-display-attlist string()) ;
 paragraph-content ::= text:database-next::text-database-next-attlist ;
 paragraph-content ::= text:database-row-select::text-database-row-select-attlist ;
 paragraph-content ::= text:database-row-number::(common-field-database-table common-field-num-format-attlist (text:value::nonNegativeInteger)? string()) ;
 paragraph-content ::= text:database-name::(common-field-database-table string()) ;
 paragraph-content ::= text:page-variable-set::(text-set-page-variable-attlist string()) ;
 paragraph-content ::= text:page-variable-get::(text-get-page-variable-attlist string()) ;
 paragraph-content ::= text:placeholder::(text-placeholder-attlist string()) ;
 paragraph-content ::= text:conditional-text::(text-conditional-text-attlist string()) ;
 paragraph-content ::= text:hidden-text::(text-hidden-text-attlist string()) ;
 paragraph-content ::= (text:reference-ref::(text-common-ref-content text-ref-content)) | (text:bookmark-ref::(text-common-ref-content text-ref-content)) ;
 paragraph-content ::= text:note-ref::(text-common-ref-content text-note-ref-content text-ref-content) ;
 paragraph-content ::= text:sequence-ref::(text-common-ref-content text-sequence-ref-content) ;
 paragraph-content ::= text:script::((xlink:href::anyURI (xlink:type::"simple")?) | string() (script:language::string)?) ;
 paragraph-content ::= text:execute-macro::((text:name::string)? office-event-listeners? string()) ;
 paragraph-content ::= text:hidden-paragraph::(text-hidden-paragraph-attlist string()) ;
 paragraph-content ::= text:dde-connection::(text:connection-name::string string()) ;
 paragraph-content ::= text:measure::(text:kind::("value" | "unit" | "gap") string()) ;
 paragraph-content ::= text:table-formula::(common-field-formula-attlist common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:toc-mark-start::text-toc-mark-start-attrs ;
 paragraph-content ::= text:toc-mark-end::text-id ;
 paragraph-content ::= text:toc-mark::(text:string-value::string text-outline-level) ;
 paragraph-content ::= text:user-index-mark-start::(text-id text-outline-level text-index-name) ;
 paragraph-content ::= text:user-index-mark-end::(text-id text-outline-level) ;
 paragraph-content ::= text:user-index-mark::(text:string-value::string text-outline-level text-index-name) ;
 paragraph-content ::= text:alphabetical-index-mark-start::(text-id text-alphabetical-index-mark-attrs) ;
 paragraph-content ::= text:alphabetical-index-mark-end::text-id ;
 paragraph-content ::= text:alphabetical-index-mark::(text:string-value::string text-alphabetical-index-mark-attrs) ;
 paragraph-content ::= text:bibliography-mark::(text:bibliography-type::text-bibliography-types ((text:identifier::string) | (text:address::string) | (text:annote::string) | (text:author::string) | (text:booktitle::string) | (text:chapter::string) | (text:edition::string) | (text:editor::string) | (text:howpublished::string) | (text:institution::string) | (text:journal::string) | (text:month::string) | (text:note::string) | (text:number::string) | (text:organizations::string) | (text:pages::string) | (text:publisher::string) | (text:school::string) | (text:series::string) | (text:title::string) | (text:report-type::string) | (text:volume::string) | (text:year::string) | (text:url::string) | (text:custom1::string) | (text:custom2::string) | (text:custom3::string) | (text:custom4::string) | (text:custom5::string) | (text:isbn::string) | (text:issn::string))* string()) ;
 paragraph-content ::= presentation:header::ε ;
 paragraph-content ::= presentation:footer::ε ;
 paragraph-content ::= presentation:date-time::ε ;
styleNameRef ::= string() | ε ;
duration ::= string() ;
draw-enhanced-geometry-attlist ::= (draw:type::custom-shape-type)? ;
 draw-enhanced-geometry-attlist ::= (svg:viewBox::(integer integer integer integer))? ;
 draw-enhanced-geometry-attlist ::= (draw:mirror-vertical::boolean)? (draw:mirror-horizontal::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-rotate-angle::double)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:concentric-gradient-fill-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-brightness::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-depth::(length double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-diffusion::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-number-of-line-segments::integer)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-light-face::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-harsh::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-harsh::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-level::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-level::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-direction::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-direction::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-metal::boolean)? ;
 draw-enhanced-geometry-attlist ::= (dr3d:shade-mode::("flat" | "phong" | "gouraud" | "draft"))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-rotation-angle::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-rotation-center::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-shininess::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-skew::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-specularity::percent)? ;
 draw-enhanced-geometry-attlist ::= (dr3d:projection::("parallel" | "perspective"))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-viewpoint::point3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-origin::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-color::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:enhanced-path::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:path-stretchpoint-x::double)? (draw:path-stretchpoint-y::double)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-areas::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-points::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-point-type::("none" | "segments" | "rectangle"))? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-point-leaving-directions::string())? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-mode::("normal" | "path" | "shape"))? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-scale::("path" | "shape"))? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-same-letter-heights::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:modifiers::string)? ;
string ::= string() ;
namespacedToken ::= string() ;
number-embedded-text ::= number:embedded-text::(number-embedded-text-attlist string()) ;
nonNegativePixelLength ::= string() ;
svg-font-face-name ::= svg:font-face-name::((svg:name::string())?) ;
anyElements ::= (string()? anyAttListOrElements string()?)* ;
table-table-attlist ::= (table:name::string)? ;
 table-table-attlist ::= (table:style-name::styleNameRef)? ;
 table-table-attlist ::= (table:protected::boolean)? (table:protection-key::string())? ;
 table-table-attlist ::= (table:print::boolean)? ;
 table-table-attlist ::= (table:print-ranges::cellRangeAddressList)? ;
 table-table-attlist ::= (table:is-sub-table::boolean)? ;
point3D ::= string() ;
--------------------odf::opendoc-1.1.bgf--------------------
text-linenumbering-separator ::= text:linenumbering-separator::((text:increment::nonNegativeInteger)? string()) ;
presentation-decl ::= presentation:header-decl::(presentation-header-decl-attlist string()) ;
 presentation-decl ::= presentation:footer-decl::(presentation-footer-decl-attlist string()) ;
 presentation-decl ::= presentation:date-time-decl::(presentation-date-time-decl-attlist string()) ;
text-common-ref-content ::= string() ;
 text-common-ref-content ::= (text:ref-name::string)? ;
form-item ::= form:item::(form-item-attlist string()) ;
office-script ::= office:script::(office-script-attlist string()? anyElements string()?) ;
cellRangeAddress ::= string() ;
IDREF ::= string() ;
text-notes-configuration-content ::= text-note-class ;
 text-notes-configuration-content ::= (text:citation-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:citation-body-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:default-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:master-page-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:start-value::nonNegativeInteger)? ;
 text-notes-configuration-content ::= common-num-format-prefix-suffix-attlist common-num-format-attlist? ;
 text-notes-configuration-content ::= (text:start-numbering-at::("document" | "chapter" | "page"))? ;
 text-notes-configuration-content ::= (text:footnotes-position::("text" | "page" | "section" | "document"))? ;
 text-notes-configuration-content ::= (text:note-continuation-notice-forward::string())? ;
 text-notes-configuration-content ::= (text:note-continuation-notice-backward::string())? ;
draw-applet-attlist ::= (draw:code::string())? ;
 draw-applet-attlist ::= (draw:object::string())? ;
 draw-applet-attlist ::= (draw:archive::string())? ;
 draw-applet-attlist ::= (draw:may-script::boolean)? ;
vector3D ::= string() ;
style-font-face-attlist ::= (svg:font-family::string)? (svg:font-style::fontStyle)? (svg:font-variant::fontVariant)? (svg:font-weight::fontWeight)? (svg:font-stretch::("normal" | "ultra-condensed" | "extra-condensed" | "condensed" | "semi-condensed" | "semi-expanded" | "expanded" | "extra-expanded" | "ultra-expanded"))? (svg:font-size::positiveLength)? (svg:unicode-range::string())? (svg:units-per-em::integer)? (svg:panose-1::string())? (svg:stemv::integer)? (svg:stemh::integer)? (svg:slope::integer)? (svg:cap-height::integer)? (svg:x-height::integer)? (svg:accent-height::integer)? (svg:ascent::integer)? (svg:descent::integer)? (svg:widths::string())? (svg:bbox::string())? (svg:ideographic::integer)? (svg:alphabetic::integer)? (svg:mathematical::integer)? (svg:hanging::integer)? (svg:v-ideographic::integer)? (svg:v-alphabetic::integer)? (svg:v-mathematical::integer)? (svg:v-hanging::integer)? (svg:underline-position::integer)? (svg:underline-thickness::integer)? (svg:strikethrough-position::integer)? (svg:strikethrough-thickness::integer)? (svg:overline-position::integer)? (svg:overline-thickness::integer)? ;
 style-font-face-attlist ::= style:name::string ;
 style-font-face-attlist ::= (style:font-adornments::string)? ;
 style-font-face-attlist ::= (style:font-family-generic::fontFamilyGeneric)? ;
 style-font-face-attlist ::= (style:font-pitch::fontPitch)? ;
 style-font-face-attlist ::= (style:font-charset::textEncoding)? ;
pathData ::= string() ;
dateOrDateTime ::= string() ;
common-title-attlist ::= (form:title::string())? ;
formula ::= string() ;
length ::= string() ;
languageCode ::= string() ;
points ::= string() ;
color ::= string() ;
common-data-style-attlist ::= style:name::styleName ;
 common-data-style-attlist ::= (number:language::languageCode)? ;
 common-data-style-attlist ::= (number:country::countryCode)? ;
 common-data-style-attlist ::= (number:title::string())? ;
 common-data-style-attlist ::= (style:volatile::boolean)? ;
 common-data-style-attlist ::= (number:transliteration-format::string)? ;
 common-data-style-attlist ::= (number:transliteration-language::countryCode)? ;
 common-data-style-attlist ::= (number:transliteration-country::countryCode)? ;
 common-data-style-attlist ::= (number:transliteration-style::("short" | "medium" | "long"))? ;
anyURI ::= string() ;
styleName ::= string() ;
IDREFS ::= string() ;
svg-desc ::= svg:desc::string() ;
language ::= string() ;
relativeLength ::= string() ;
common-dr3d-transform-attlist ::= (dr3d:transform::string())? ;
double ::= string() ;
number-currency-symbol ::= number:currency-symbol::(number-currency-symbol-attlist string()) ;
mathMarkup ::= (α | string() | mathMarkup)* ;
draw-plugin-attlist ::= (draw:mime-type::string())? ;
time ::= string() ;
timeOrDateTime ::= string() ;
text-index-title-template ::= text:index-title-template::((text:style-name::styleNameRef)? string()) ;
style-graphic-properties-attlist ::= (draw:stroke::("none" | "dash" | "solid"))? ;
 style-graphic-properties-attlist ::= (draw:stroke-dash::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:stroke-dash-names::styleNameRefs)? ;
 style-graphic-properties-attlist ::= (svg:stroke-width::length)? ;
 style-graphic-properties-attlist ::= (svg:stroke-color::color)? ;
 style-graphic-properties-attlist ::= (draw:marker-start::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:marker-end::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:marker-start-width::length)? ;
 style-graphic-properties-attlist ::= (draw:marker-end-width::length)? ;
 style-graphic-properties-attlist ::= (draw:marker-start-center::boolean)? ;
 style-graphic-properties-attlist ::= (draw:marker-end-center::boolean)? ;
 style-graphic-properties-attlist ::= (svg:stroke-opacity::(string() | percent))? ;
 style-graphic-properties-attlist ::= (draw:stroke-linejoin::("miter" | "round" | "bevel" | "middle" | "none" | "inherit"))? ;
 style-graphic-properties-attlist ::= (draw:symbol-color::color)? ;
 style-graphic-properties-attlist ::= (text:animation::("none" | "scroll" | "alternate" | "slide"))? ;
 style-graphic-properties-attlist ::= (text:animation-direction::("left" | "right" | "up" | "down"))? ;
 style-graphic-properties-attlist ::= (text:animation-start-inside::boolean)? ;
 style-graphic-properties-attlist ::= (text:animation-stop-inside::boolean)? ;
 style-graphic-properties-attlist ::= (text:animation-repeat::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (text:animation-delay::duration)? ;
 style-graphic-properties-attlist ::= (text:animation-steps::length)? ;
 style-graphic-properties-attlist ::= (draw:auto-grow-width::boolean)? (draw:auto-grow-height::boolean)? ;
 style-graphic-properties-attlist ::= (draw:fit-to-size::boolean)? ;
 style-graphic-properties-attlist ::= (draw:fit-to-contour::boolean)? ;
 style-graphic-properties-attlist ::= (draw:textarea-vertical-align::("top" | "middle" | "bottom" | "justify"))? ;
 style-graphic-properties-attlist ::= (draw:textarea-horizontal-align::("left" | "center" | "right" | "justify"))? ;
 style-graphic-properties-attlist ::= (fo:wrap-option::("no-wrap" | "wrap"))? ;
 style-graphic-properties-attlist ::= (draw:color-mode::("greyscale" | "mono" | "watermark" | "standard"))? ;
 style-graphic-properties-attlist ::= (draw:color-inversion::boolean)? ;
 style-graphic-properties-attlist ::= (draw:luminance::percent)? ;
 style-graphic-properties-attlist ::= (draw:contrast::percent)? ;
 style-graphic-properties-attlist ::= (draw:gamma::percent)? ;
 style-graphic-properties-attlist ::= (draw:red::percent)? ;
 style-graphic-properties-attlist ::= (draw:green::percent)? ;
 style-graphic-properties-attlist ::= (draw:blue::percent)? ;
 style-graphic-properties-attlist ::= (draw:image-opacity::percent)? ;
 style-graphic-properties-attlist ::= (draw:shadow::("visible" | "hidden"))? ;
 style-graphic-properties-attlist ::= (draw:shadow-offset-x::length)? (draw:shadow-offset-y::length)? ;
 style-graphic-properties-attlist ::= (draw:shadow-color::color)? ;
 style-graphic-properties-attlist ::= (draw:shadow-opacity::percent)? ;
 style-graphic-properties-attlist ::= (draw:start-line-spacing-horizontal::distance)? (draw:start-line-spacing-vertical::distance)? ;
 style-graphic-properties-attlist ::= (draw:end-line-spacing-horizontal::distance)? (draw:end-line-spacing-vertical::distance)? ;
 style-graphic-properties-attlist ::= (draw:line-distance::distance)? ;
 style-graphic-properties-attlist ::= (draw:guide-overhang::length)? ;
 style-graphic-properties-attlist ::= (draw:guide-distance::distance)? ;
 style-graphic-properties-attlist ::= (draw:start-guide::length)? ;
 style-graphic-properties-attlist ::= (draw:end-guide::length)? ;
 style-graphic-properties-attlist ::= (draw:placing::("below" | "above"))? ;
 style-graphic-properties-attlist ::= (draw:parallel::boolean)? ;
 style-graphic-properties-attlist ::= (draw:measure-align::("automatic" | "left-outside" | "inside" | "right-outside"))? (draw:measure-vertical-align::("automatic" | "above" | "below" | "center"))? ;
 style-graphic-properties-attlist ::= (draw:unit::("automatic" | "mm" | "cm" | "m" | "km" | "pt" | "pc" | "inch" | "ft" | "mi"))? ;
 style-graphic-properties-attlist ::= (draw:show-unit::boolean)? ;
 style-graphic-properties-attlist ::= (draw:decimal-places::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (draw:caption-type::("straight-line" | "angled-line" | "angled-connector-line"))? ;
 style-graphic-properties-attlist ::= (draw:caption-angle-type::("fixed" | "free"))? ;
 style-graphic-properties-attlist ::= (draw:caption-angle::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (draw:caption-gap::distance)? ;
 style-graphic-properties-attlist ::= (draw:caption-escape-direction::("horizontal" | "vertical" | "auto"))? ;
 style-graphic-properties-attlist ::= (draw:caption-escape::(length | percent))? ;
 style-graphic-properties-attlist ::= (draw:caption-line-length::length)? ;
 style-graphic-properties-attlist ::= (draw:caption-fit-line-length::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:horizontal-segments::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:vertical-segments::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:edge-rounding::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:edge-rounding-mode::("correct" | "attractive"))? ;
 style-graphic-properties-attlist ::= (dr3d:back-scale::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:depth::length)? ;
 style-graphic-properties-attlist ::= (dr3d:backface-culling::("enabled" | "disabled"))? ;
 style-graphic-properties-attlist ::= (dr3d:end-angle::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:close-front::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:close-back::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:lighting-mode::("standard" | "double-sided"))? ;
 style-graphic-properties-attlist ::= (dr3d:normals-kind::("object" | "flat" | "sphere"))? ;
 style-graphic-properties-attlist ::= (dr3d:normals-direction::("normal" | "inverse"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-generation-mode-x::("object" | "parallel" | "sphere"))? (dr3d:texture-generation-mode-y::("object" | "parallel" | "sphere"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-kind::("luminance" | "intensity" | "color"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-filter::("enabled" | "disabled"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-mode::("replace" | "modulate" | "blend"))? ;
 style-graphic-properties-attlist ::= (dr3d:ambient-color::color)? (dr3d:emissive-color::color)? (dr3d:specular-color::color)? (dr3d:diffuse-color::color)? ;
 style-graphic-properties-attlist ::= (dr3d:shininess::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:shadow::("visible" | "hidden"))? ;
 style-graphic-properties-attlist ::= common-draw-rel-size-attlist (fo:min-width::(length | percent))? ;
 style-graphic-properties-attlist ::= (fo:min-height::(length | percent))? ;
 style-graphic-properties-attlist ::= (fo:max-height::(length | percent))? (fo:max-width::(length | percent))? ;
 style-graphic-properties-attlist ::= common-horizontal-margin-attlist ;
 style-graphic-properties-attlist ::= common-vertical-margin-attlist ;
 style-graphic-properties-attlist ::= common-margin-attlist ;
 style-graphic-properties-attlist ::= (style:print-content::boolean)? ;
 style-graphic-properties-attlist ::= (style:protect::("none" | (("content" | "position" | "size")+)))? ;
 style-graphic-properties-attlist ::= (style:horizontal-pos::("left" | "center" | "right" | "from-left" | "inside" | "outside" | "from-inside"))? (svg:x::coordinate)? ;
 style-graphic-properties-attlist ::= (style:horizontal-rel::("page" | "page-content" | "page-start-margin" | "page-end-margin" | "frame" | "frame-content" | "frame-start-margin" | "frame-end-margin" | "paragraph" | "paragraph-content" | "paragraph-start-margin" | "paragraph-end-margin" | "char"))? ;
 style-graphic-properties-attlist ::= common-vertical-pos-attlist ;
 style-graphic-properties-attlist ::= common-vertical-rel-attlist ;
 style-graphic-properties-attlist ::= common-text-anchor-attlist ;
 style-graphic-properties-attlist ::= common-border-attlist ;
 style-graphic-properties-attlist ::= common-border-line-width-attlist ;
 style-graphic-properties-attlist ::= common-padding-attlist ;
 style-graphic-properties-attlist ::= common-shadow-attlist ;
 style-graphic-properties-attlist ::= common-background-color-attlist ;
 style-graphic-properties-attlist ::= (style:editable::boolean)? ;
 style-graphic-properties-attlist ::= (style:wrap::("none" | "left" | "right" | "parallel" | "dynamic" | "run-through" | "biggest"))? ;
 style-graphic-properties-attlist ::= (style:wrap-dynamic-threshold::nonNegativeLength)? ;
 style-graphic-properties-attlist ::= (style:number-wrapped-paragraphs::("no-limit" | positiveInteger))? ;
 style-graphic-properties-attlist ::= (style:wrap-contour::boolean)? ;
 style-graphic-properties-attlist ::= (style:wrap-contour-mode::("full" | "outside"))? ;
 style-graphic-properties-attlist ::= (style:run-through::("foreground" | "background"))? ;
 style-graphic-properties-attlist ::= (style:flow-with-text::boolean)? ;
 style-graphic-properties-attlist ::= (style:overflow-behavior::("clip" | "auto-create-new-frame"))? ;
 style-graphic-properties-attlist ::= (style:mirror::("none" | "vertical" | horizontal-mirror | ("vertical" horizontal-mirror) | (horizontal-mirror "vertical")))? ;
 style-graphic-properties-attlist ::= (fo:clip::string)? ;
 style-graphic-properties-attlist ::= (draw:wrap-influence-on-position::("iterative" | "once-concurrent" | "once-successive"))? ;
 style-graphic-properties-attlist ::= common-writing-mode-attlist ;
 style-graphic-properties-attlist ::= (draw:frame-display-scrollbar::boolean)? ;
 style-graphic-properties-attlist ::= (draw:frame-display-border::boolean)? ;
 style-graphic-properties-attlist ::= (draw:frame-margin-horizontal::nonNegativePixelLength)? (draw:frame-margin-vertical::nonNegativePixelLength)? ;
 style-graphic-properties-attlist ::= (draw:visible-area-left::nonNegativeLength)? (draw:visible-area-top::nonNegativeLength)? (draw:visible-area-width::positiveLength)? (draw:visible-area-height::positiveLength)? ;
 style-graphic-properties-attlist ::= (draw:ole-draw-aspect::nonNegativeInteger)? ;
percent ::= string() ;
presentation-show-attlist ::= presentation:name::string ;
 presentation-show-attlist ::= presentation:pages::string() ;
common-draw-layer-name-attlist ::= (draw:layer::string())? ;
text-index-entry-span ::= text:index-entry-span::((text:style-name::styleNameRef)? string()) ;
positiveLength ::= string() ;
number-number-attlist ::= (number:decimal-replacement::string())? ;
 number-number-attlist ::= (number:display-factor::double)? ;
styleNameRefs ::= string()* ;
common-field-description-attlist ::= (text:description::string())? ;
cellRangeAddressList ::= string() ;
draw-param-attlist ::= (draw:name::string())? ;
 draw-param-attlist ::= (draw:value::string())? ;
draw-object-ole-attlist ::= (draw:class-id::string())? ;
common-presentation-effect-attlist ::= draw:shape-id::IDREF ;
 common-presentation-effect-attlist ::= (presentation:effect::presentationEffects)? ;
 common-presentation-effect-attlist ::= (presentation:direction::presentationEffectDirections)? ;
 common-presentation-effect-attlist ::= (presentation:speed::presentationSpeeds)? ;
 common-presentation-effect-attlist ::= (presentation:delay::duration)? ;
 common-presentation-effect-attlist ::= (presentation:start-scale::percent)? ;
 common-presentation-effect-attlist ::= (presentation:path-id::string())? ;
animation-element ::= anim:animate::(common-anim-target-attlist common-anim-named-target-attlist common-anim-values-attlist common-anim-spline-mode-attlist common-spline-anim-value-attlist common-timing-attlist common-anim-add-accum-attlist) ;
 animation-element ::= anim:set::(common-anim-target-attlist common-anim-named-target-attlist common-anim-set-values-attlist common-timing-attlist common-anim-add-accum-attlist) ;
 animation-element ::= anim:animateMotion::(anim-animate-motion-attlist common-anim-target-attlist common-anim-named-target-attlist common-anim-add-accum-attlist common-anim-values-attlist common-timing-attlist common-spline-anim-value-attlist) ;
 animation-element ::= anim:animateColor::(common-anim-target-attlist common-anim-named-target-attlist common-anim-add-accum-attlist common-anim-values-attlist common-anim-spline-mode-attlist common-spline-anim-value-attlist anim-animate-color-attlist common-timing-attlist) ;
 animation-element ::= anim:animateTransform::(common-anim-target-attlist common-anim-named-target-attlist common-anim-add-accum-attlist common-anim-values-attlist anim-animate-transform-attlist common-timing-attlist) ;
 animation-element ::= anim:transitionFilter::(common-anim-target-attlist common-anim-add-accum-attlist common-anim-values-attlist common-anim-spline-mode-attlist anim-transition-filter-attlist common-timing-attlist) ;
 animation-element ::= anim:par::(common-anim-attlist common-timing-attlist common-endsync-timing-attlist animation-element*) ;
 animation-element ::= anim:seq::(common-anim-attlist common-endsync-timing-attlist common-timing-attlist animation-element*) ;
 animation-element ::= anim:iterate::(common-anim-attlist anim-iterate-attlist common-timing-attlist common-endsync-timing-attlist animation-element*) ;
 animation-element ::= anim:audio::(common-anim-attlist anim-audio-attlist common-basic-timing-attlist) ;
 animation-element ::= anim:command::(common-anim-attlist anim-command-attlist common-begin-end-timing-attlist common-anim-target-attlist (anim:param::(anim:name::string() anim:value::string()))*) ;
config-config-item ::= config:config-item::(config-config-item-attlist string()) ;
svg-font-face-format ::= svg:font-face-format::((svg:string::string())?) ;
cellAddress ::= string() ;
number-text ::= number:text::string() ;
base64Binary ::= string() ;
svg-title ::= svg:title::string() ;
date ::= string() ;
style-graphic-fill-properties-attlist ::= (draw:fill::("none" | "solid" | "bitmap" | "gradient" | "hatch"))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-color::color)? ;
 style-graphic-fill-properties-attlist ::= (draw:secondary-fill-color::color)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-gradient-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (draw:gradient-step-count::nonNegativeInteger)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-hatch-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-hatch-solid::boolean)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (style:repeat::("no-repeat" | "repeat" | "stretch"))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-width::(length | percent))? (draw:fill-image-height::(length | percent))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-ref-point-x::percent)? (draw:fill-image-ref-point-y::percent)? (draw:fill-image-ref-point::("top-left" | "top" | "top-right" | "left" | "center" | "right" | "bottom-left" | "bottom" | "bottom-right"))? ;
 style-graphic-fill-properties-attlist ::= (draw:tile-repeat-offset::string())? ;
 style-graphic-fill-properties-attlist ::= (draw:opacity::percent)? ;
 style-graphic-fill-properties-attlist ::= (draw:opacity-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (svg:fill-rule::("nonzero" | "evenodd"))? ;
anyAttListOrElements ::= string()* anyElements ;
character ::= string() ;
nonNegativeLength ::= string() ;
variableName ::= string() ;
countryCode ::= string() ;
office-meta-data ::= meta:generator::string ;
 office-meta-data ::= dc:title::string ;
 office-meta-data ::= dc:description::string ;
 office-meta-data ::= dc:subject::string ;
 office-meta-data ::= meta:keyword::string ;
 office-meta-data ::= meta:initial-creator::string ;
 office-meta-data ::= dc-creator ;
 office-meta-data ::= meta:printed-by::string ;
 office-meta-data ::= meta:creation-date::dateTime ;
 office-meta-data ::= dc-date ;
 office-meta-data ::= meta:print-date::dateTime ;
 office-meta-data ::= meta:template::(xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? (xlink:title::string)? (meta:date::dateTime)?) ;
 office-meta-data ::= meta:auto-reload::((xlink:type::"simple")? (xlink:show::"replace")? (xlink:actuate::"onLoad")? (xlink:href::anyURI)? (meta:delay::duration)?) ;
 office-meta-data ::= meta:hyperlink-behaviour::((office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))?) ;
 office-meta-data ::= dc:language::language ;
 office-meta-data ::= meta:editing-cycles::nonNegativeInteger ;
 office-meta-data ::= meta:editing-duration::duration ;
 office-meta-data ::= meta:document-statistic::((meta:page-count::nonNegativeInteger)? (meta:table-count::nonNegativeInteger)? (meta:draw-count::nonNegativeInteger)? (meta:image-count::nonNegativeInteger)? (meta:ole-object-count::nonNegativeInteger)? (meta:object-count::nonNegativeInteger)? (meta:paragraph-count::nonNegativeInteger)? (meta:word-count::nonNegativeInteger)? (meta:character-count::nonNegativeInteger)? (frame-count::nonNegativeInteger)? (sentence-count::nonNegativeInteger)? (syllable-count::nonNegativeInteger)? (non-whitespace-character-count::nonNegativeInteger)? (meta:row-count::nonNegativeInteger)? (meta:cell-count::nonNegativeInteger)?) ;
 office-meta-data ::= meta:user-defined::(meta:name::string (meta:value-type::"float" double) | (meta:value-type::"date" dateOrDateTime) | (meta:value-type::"time" duration) | (meta:value-type::"boolean" boolean) | (meta:value-type::"string" string) | string()) ;
textEncoding ::= string() ;
form-form-attlist ::= (xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")?)? ;
 form-form-attlist ::= (office:target-frame::targetFrameName)? ;
 form-form-attlist ::= (form:method::("get" | "post" | string))? ;
 form-form-attlist ::= (form:enctype::string)? ;
 form-form-attlist ::= (form:allow-deletes::boolean)? ;
 form-form-attlist ::= (form:allow-inserts::boolean)? ;
 form-form-attlist ::= (form:allow-updates::boolean)? ;
 form-form-attlist ::= (form:apply-filter::boolean)? ;
 form-form-attlist ::= (form:command-type::("table" | "query" | "command"))? ;
 form-form-attlist ::= (form:command::string())? ;
 form-form-attlist ::= (form:datasource::(anyURI | string))? ;
 form-form-attlist ::= (form:master-fields::string)? ;
 form-form-attlist ::= (form:detail-fields::string)? ;
 form-form-attlist ::= (form:escape-processing::boolean)? ;
 form-form-attlist ::= (form:filter::string)? ;
 form-form-attlist ::= (form:ignore-result::boolean)? ;
 form-form-attlist ::= (form:navigation-mode::navigation)? ;
 form-form-attlist ::= (form:order::string)? ;
 form-form-attlist ::= (form:tab-cycle::tab-cycles)? ;
form-option ::= form:option::(form-option-attlist string()) ;
ID ::= string() ;
dateTime ::= string() ;
paragraph-content ::= string() ;
 paragraph-content ::= text:s::((text:c::nonNegativeInteger)?) ;
 paragraph-content ::= text:tab::text-tab-attr ;
 paragraph-content ::= text:line-break::ε ;
 paragraph-content ::= text-soft-page-break ;
 paragraph-content ::= text:span::((text:style-name::styleNameRef)? (text:class-names::styleNameRefs)? paragraph-content*) ;
 paragraph-content ::= text:a::(text-a-attlist office-event-listeners? paragraph-content*) ;
 paragraph-content ::= (text:bookmark::(text:name::string)) | (text:bookmark-start::(text:name::string)) | (text:bookmark-end::(text:name::string)) ;
 paragraph-content ::= text:reference-mark::(text:name::string) ;
 paragraph-content ::= (text:reference-mark-start::(text:name::string)) | (text:reference-mark-end::(text:name::string)) ;
 paragraph-content ::= text:note::(text-note-class (text:id::string)? text:note-citation::((text:label::string)? string()) text:note-body::(text-content*)) ;
 paragraph-content ::= text:ruby::((text:style-name::styleNameRef)? text:ruby-base::paragraph-content text:ruby-text::((text:style-name::styleNameRef)? string())) ;
 paragraph-content ::= office-annotation ;
 paragraph-content ::= change-marks ;
 paragraph-content ::= shape | draw-a ;
 paragraph-content ::= text:date::(text-date-attlist string()) ;
 paragraph-content ::= text:time::(text-time-attlist string()) ;
 paragraph-content ::= text:page-number::(text-page-number-attlist string()) ;
 paragraph-content ::= text:page-continuation::(text-page-continuation-attlist string()) ;
 paragraph-content ::= text:sender-firstname::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-lastname::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-initials::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-title::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-position::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-email::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-phone-private::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-fax::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-company::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-phone-work::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-street::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-city::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-postal-code::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-country::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-state-or-province::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:author-name::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:author-initials::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:chapter::(text-chapter-attlist string()) ;
 paragraph-content ::= text:file-name::(text-file-name-attlist string()) ;
 paragraph-content ::= text:template-name::(text-template-name-attlist string()) ;
 paragraph-content ::= text:sheet-name::string() ;
 paragraph-content ::= text:variable-set::(common-field-name-attlist common-field-formula-attlist common-value-and-type-attlist common-field-display-value-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:variable-get::(common-field-name-attlist common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:variable-input::(common-field-name-attlist common-field-description-attlist common-value-type-attlist common-field-display-value-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:user-field-get::(common-field-name-attlist common-field-display-value-formula-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:user-field-input::(common-field-name-attlist common-field-description-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:sequence::(common-field-name-attlist common-field-formula-attlist common-field-num-format-attlist text-sequence-ref-name string()) ;
 paragraph-content ::= text:expression::(common-field-formula-attlist common-value-and-type-attlist? common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:text-input::(common-field-description-attlist string()) ;
 paragraph-content ::= text:initial-creator::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:creation-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::dateOrDateTime)? string()) ;
 paragraph-content ::= text:creation-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::timeOrDateTime)? string()) ;
 paragraph-content ::= text:description::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:user-defined::(common-field-fixed-attlist text:name::string common-field-data-style-name-attlist (office:value::double)? (office:date-value::dateOrDateTime)? (office:time-value::duration)? (office:boolean-value::boolean)? (office:string-value::string)? string()) ;
 paragraph-content ::= text:print-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::time)? string()) ;
 paragraph-content ::= text:print-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::date)? string()) ;
 paragraph-content ::= text:printed-by::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:title::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:subject::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:keywords::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:editing-cycles::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:editing-duration::(common-field-fixed-attlist common-field-data-style-name-attlist (text:duration::duration)? string()) ;
 paragraph-content ::= text:modification-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::time)? string()) ;
 paragraph-content ::= text:modification-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::date)? string()) ;
 paragraph-content ::= text:creator::(common-field-fixed-attlist string()) ;
 paragraph-content ::= (text:page-count::(common-field-num-format-attlist string())) | (text:paragraph-count::(common-field-num-format-attlist string())) | (text:word-count::(common-field-num-format-attlist string())) | (text:character-count::(common-field-num-format-attlist string())) | (text:table-count::(common-field-num-format-attlist string())) | (text:image-count::(common-field-num-format-attlist string())) | (text:object-count::(common-field-num-format-attlist string())) ;
 paragraph-content ::= text:database-display::(text-database-display-attlist string()) ;
 paragraph-content ::= text:database-next::text-database-next-attlist ;
 paragraph-content ::= text:database-row-select::text-database-row-select-attlist ;
 paragraph-content ::= text:database-row-number::(common-field-database-table common-field-num-format-attlist (text:value::nonNegativeInteger)? string()) ;
 paragraph-content ::= text:database-name::(common-field-database-table string()) ;
 paragraph-content ::= text:page-variable-set::(text-set-page-variable-attlist string()) ;
 paragraph-content ::= text:page-variable-get::(text-get-page-variable-attlist string()) ;
 paragraph-content ::= text:placeholder::(text-placeholder-attlist string()) ;
 paragraph-content ::= text:conditional-text::(text-conditional-text-attlist string()) ;
 paragraph-content ::= text:hidden-text::(text-hidden-text-attlist string()) ;
 paragraph-content ::= (text:reference-ref::(text-common-ref-content text-ref-content)) | (text:bookmark-ref::(text-common-ref-content text-ref-content)) ;
 paragraph-content ::= text:note-ref::(text-common-ref-content text-note-ref-content text-ref-content) ;
 paragraph-content ::= text:sequence-ref::(text-common-ref-content text-sequence-ref-content) ;
 paragraph-content ::= text:script::((xlink:href::anyURI (xlink:type::"simple")?) | string() (script:language::string)?) ;
 paragraph-content ::= text:execute-macro::((text:name::string)? office-event-listeners? string()) ;
 paragraph-content ::= text:hidden-paragraph::(text-hidden-paragraph-attlist string()) ;
 paragraph-content ::= text:dde-connection::(text:connection-name::string string()) ;
 paragraph-content ::= text:measure::(text:kind::("value" | "unit" | "gap") string()) ;
 paragraph-content ::= text:table-formula::(common-field-formula-attlist common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:toc-mark-start::text-toc-mark-start-attrs ;
 paragraph-content ::= text:toc-mark-end::text-id ;
 paragraph-content ::= text:toc-mark::(text:string-value::string text-outline-level) ;
 paragraph-content ::= text:user-index-mark-start::(text-id text-outline-level text-index-name) ;
 paragraph-content ::= text:user-index-mark-end::(text-id text-outline-level) ;
 paragraph-content ::= text:user-index-mark::(text:string-value::string text-outline-level text-index-name) ;
 paragraph-content ::= text:alphabetical-index-mark-start::(text-id text-alphabetical-index-mark-attrs) ;
 paragraph-content ::= text:alphabetical-index-mark-end::text-id ;
 paragraph-content ::= text:alphabetical-index-mark::(text:string-value::string text-alphabetical-index-mark-attrs) ;
 paragraph-content ::= text:bibliography-mark::(text:bibliography-type::text-bibliography-types ((text:identifier::string) | (text:address::string) | (text:annote::string) | (text:author::string) | (text:booktitle::string) | (text:chapter::string) | (text:edition::string) | (text:editor::string) | (text:howpublished::string) | (text:institution::string) | (text:journal::string) | (text:month::string) | (text:note::string) | (text:number::string) | (text:organizations::string) | (text:pages::string) | (text:publisher::string) | (text:school::string) | (text:series::string) | (text:title::string) | (text:report-type::string) | (text:volume::string) | (text:year::string) | (text:url::string) | (text:custom1::string) | (text:custom2::string) | (text:custom3::string) | (text:custom4::string) | (text:custom5::string) | (text:isbn::string) | (text:issn::string))* string()) ;
 paragraph-content ::= presentation:header::ε ;
 paragraph-content ::= presentation:footer::ε ;
 paragraph-content ::= presentation:date-time::ε ;
styleNameRef ::= string() | ε ;
duration ::= string() ;
draw-enhanced-geometry-attlist ::= (draw:type::custom-shape-type)? ;
 draw-enhanced-geometry-attlist ::= (svg:viewBox::(integer integer integer integer))? ;
 draw-enhanced-geometry-attlist ::= (draw:mirror-vertical::boolean)? (draw:mirror-horizontal::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-rotate-angle::double)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:concentric-gradient-fill-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-brightness::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-depth::(length double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-diffusion::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-number-of-line-segments::integer)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-light-face::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-harsh::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-harsh::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-level::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-level::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-direction::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-direction::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-metal::boolean)? ;
 draw-enhanced-geometry-attlist ::= (dr3d:shade-mode::("flat" | "phong" | "gouraud" | "draft"))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-rotation-angle::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-rotation-center::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-shininess::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-skew::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-specularity::percent)? ;
 draw-enhanced-geometry-attlist ::= (dr3d:projection::("parallel" | "perspective"))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-viewpoint::point3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-origin::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-color::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:enhanced-path::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:path-stretchpoint-x::double)? (draw:path-stretchpoint-y::double)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-areas::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-points::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-point-type::("none" | "segments" | "rectangle"))? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-point-leaving-directions::string())? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-mode::("normal" | "path" | "shape"))? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-scale::("path" | "shape"))? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-same-letter-heights::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:modifiers::string)? ;
string ::= string() ;
namespacedToken ::= string() ;
number-embedded-text ::= number:embedded-text::(number-embedded-text-attlist string()) ;
nonNegativePixelLength ::= string() ;
svg-font-face-name ::= svg:font-face-name::((svg:name::string())?) ;
anyElements ::= (string()? anyAttListOrElements string()?)* ;
table-table-attlist ::= (table:name::string)? ;
 table-table-attlist ::= (table:style-name::styleNameRef)? ;
 table-table-attlist ::= (table:protected::boolean)? (table:protection-key::string())? ;
 table-table-attlist ::= (table:print::boolean)? ;
 table-table-attlist ::= (table:print-ranges::cellRangeAddressList)? ;
 table-table-attlist ::= (table:is-sub-table::boolean)? ;
point3D ::= string() ;
--------------------odf::opendoc-1.2-dsig.bgf--------------------
dsMarkup ::= (α | string() | dsMarkup)* ;
--------------------odf::opendoc-1.2-manifest.bgf--------------------
anyAttListOrElements ::= string()* anyElements ;
anyElements ::= (string()? anyAttListOrElements string()?)* ;
string ::= string() ;
anyURI ::= string() ;
namespacedToken ::= string() ;
base64Binary ::= string() ;
--------------------odf::opendoc-1.2.bgf--------------------
text-linenumbering-separator ::= text:linenumbering-separator::((text:increment::nonNegativeInteger)? string()) ;
presentation-decl ::= (presentation:header-decl::(presentation-header-decl-attlist string())) | (presentation:footer-decl::(presentation-footer-decl-attlist string())) | (presentation:date-time-decl::(presentation-date-time-decl-attlist string())) ;
text-common-ref-content ::= string() (text:ref-name::string)? ;
form-item ::= form:item::(form-item-attlist string()) ;
office-script ::= office:script::(office-script-attlist string()? anyElements string()?) ;
cellRangeAddress ::= string() ;
IDREF ::= string() ;
text-notes-configuration-content ::= text-note-class (text:citation-style-name::styleNameRef)? (text:citation-body-style-name::styleNameRef)? (text:default-style-name::styleNameRef)? (text:master-page-name::styleNameRef)? (text:start-value::nonNegativeInteger)? common-num-format-prefix-suffix-attlist common-num-format-attlist? (text:start-numbering-at::("document" | "chapter" | "page"))? (text:footnotes-position::("text" | "page" | "section" | "document"))? (text:note-continuation-notice-forward::string())? (text:note-continuation-notice-backward::string())? ;
vector3D ::= string() ;
pathData ::= string() ;
dateOrDateTime ::= string() ;
length ::= string() ;
languageCode ::= string() ;
color ::= string() ;
points ::= string() ;
anyURI ::= string() ;
NCName ::= string() ;
extrusionOrigin ::= string() ;
styleName ::= string() ;
IDREFS ::= string() ;
svg-desc ::= svg:desc::string() ;
zeroToHundredPercent ::= string() ;
scriptCode ::= string() ;
language ::= string() ;
anyIRI ::= string() ;
angle ::= string() ;
relativeLength ::= string() ;
double ::= string() ;
mathMarkup ::= (α | string() | mathMarkup)* ;
number-currency-symbol ::= number:currency-symbol::(number-currency-symbol-attlist string()) ;
time ::= string() ;
timeOrDateTime ::= string() ;
text-index-title-template ::= text:index-title-template::((text:style-name::styleNameRef)? string()) ;
style-graphic-properties-attlist ::= (draw:stroke::("none" | "dash" | "solid"))? (draw:stroke-dash::styleNameRef)? (draw:stroke-dash-names::styleNameRefs)? (svg:stroke-width::length)? (svg:stroke-color::color)? (draw:marker-start::styleNameRef)? (draw:marker-end::styleNameRef)? (draw:marker-start-width::length)? (draw:marker-end-width::length)? (draw:marker-start-center::boolean)? (draw:marker-end-center::boolean)? (svg:stroke-opacity::(string() | zeroToHundredPercent))? (draw:stroke-linejoin::("miter" | "round" | "bevel" | "middle" | "none"))? (svg:stroke-linecap::("butt" | "square" | "round"))? (draw:symbol-color::color)? (text:animation::("none" | "scroll" | "alternate" | "slide"))? (text:animation-direction::("left" | "right" | "up" | "down"))? (text:animation-start-inside::boolean)? (text:animation-stop-inside::boolean)? (text:animation-repeat::nonNegativeInteger)? (text:animation-delay::duration)? (text:animation-steps::length)? (draw:auto-grow-width::boolean)? (draw:auto-grow-height::boolean)? (draw:fit-to-size::boolean)? (draw:fit-to-contour::boolean)? (draw:textarea-vertical-align::("top" | "middle" | "bottom" | "justify"))? (draw:textarea-horizontal-align::("left" | "center" | "right" | "justify"))? (fo:wrap-option::("no-wrap" | "wrap"))? (style:shrink-to-fit::boolean)? (draw:color-mode::("greyscale" | "mono" | "watermark" | "standard"))? (draw:color-inversion::boolean)? (draw:luminance::zeroToHundredPercent)? (draw:contrast::percent)? (draw:gamma::percent)? (draw:red::signedZeroToHundredPercent)? (draw:green::signedZeroToHundredPercent)? (draw:blue::signedZeroToHundredPercent)? (draw:image-opacity::zeroToHundredPercent)? (draw:shadow::("visible" | "hidden"))? (draw:shadow-offset-x::length)? (draw:shadow-offset-y::length)? (draw:shadow-color::color)? (draw:shadow-opacity::zeroToHundredPercent)? (draw:start-line-spacing-horizontal::distance)? (draw:start-line-spacing-vertical::distance)? (draw:end-line-spacing-horizontal::distance)? (draw:end-line-spacing-vertical::distance)? (draw:line-distance::distance)? (draw:guide-overhang::length)? (draw:guide-distance::distance)? (draw:start-guide::length)? (draw:end-guide::length)? (draw:placing::("below" | "above"))? (draw:parallel::boolean)? (draw:measure-align::("automatic" | "left-outside" | "inside" | "right-outside"))? (draw:measure-vertical-align::("automatic" | "above" | "below" | "center"))? (draw:unit::("automatic" | "mm" | "cm" | "m" | "km" | "pt" | "pc" | "inch" | "ft" | "mi"))? (draw:show-unit::boolean)? (draw:decimal-places::nonNegativeInteger)? (draw:caption-type::("straight-line" | "angled-line" | "angled-connector-line"))? (draw:caption-angle-type::("fixed" | "free"))? (draw:caption-angle::angle)? (draw:caption-gap::distance)? (draw:caption-escape-direction::("horizontal" | "vertical" | "auto"))? (draw:caption-escape::(length | percent))? (draw:caption-line-length::length)? (draw:caption-fit-line-length::boolean)? (dr3d:horizontal-segments::nonNegativeInteger)? (dr3d:vertical-segments::nonNegativeInteger)? (dr3d:edge-rounding::percent)? (dr3d:edge-rounding-mode::("correct" | "attractive"))? (dr3d:back-scale::percent)? (dr3d:depth::length)? (dr3d:backface-culling::("enabled" | "disabled"))? (dr3d:end-angle::angle)? (dr3d:close-front::boolean)? (dr3d:close-back::boolean)? (dr3d:lighting-mode::("standard" | "double-sided"))? (dr3d:normals-kind::("object" | "flat" | "sphere"))? (dr3d:normals-direction::("normal" | "inverse"))? (dr3d:texture-generation-mode-x::("object" | "parallel" | "sphere"))? (dr3d:texture-generation-mode-y::("object" | "parallel" | "sphere"))? (dr3d:texture-kind::("luminance" | "intensity" | "color"))? (dr3d:texture-filter::("enabled" | "disabled"))? (dr3d:texture-mode::("replace" | "modulate" | "blend"))? (dr3d:ambient-color::color)? (dr3d:emissive-color::color)? (dr3d:specular-color::color)? (dr3d:diffuse-color::color)? (dr3d:shininess::percent)? (dr3d:shadow::("visible" | "hidden"))? common-draw-rel-size-attlist (fo:min-width::(length | percent))? (fo:min-height::(length | percent))? (fo:max-height::(length | percent))? (fo:max-width::(length | percent))? common-horizontal-margin-attlist common-vertical-margin-attlist common-margin-attlist (style:print-content::boolean)? (style:protect::("none" | (("content" | "position" | "size")+)))? (style:horizontal-pos::("left" | "center" | "right" | "from-left" | "inside" | "outside" | "from-inside"))? (svg:x::coordinate)? (style:horizontal-rel::("page" | "page-content" | "page-start-margin" | "page-end-margin" | "frame" | "frame-content" | "frame-start-margin" | "frame-end-margin" | "paragraph" | "paragraph-content" | "paragraph-start-margin" | "paragraph-end-margin" | "char"))? common-vertical-pos-attlist common-vertical-rel-attlist common-text-anchor-attlist common-border-attlist common-border-line-width-attlist common-padding-attlist common-shadow-attlist common-background-color-attlist common-background-transparency-attlist common-editable-attlist (style:wrap::("none" | "left" | "right" | "parallel" | "dynamic" | "run-through" | "biggest"))? (style:wrap-dynamic-threshold::nonNegativeLength)? (style:number-wrapped-paragraphs::("no-limit" | positiveInteger))? (style:wrap-contour::boolean)? (style:wrap-contour-mode::("full" | "outside"))? (style:run-through::("foreground" | "background"))? (style:flow-with-text::boolean)? (style:overflow-behavior::("clip" | "auto-create-new-frame"))? (style:mirror::("none" | "vertical" | horizontal-mirror | ("vertical" horizontal-mirror) | (horizontal-mirror "vertical")))? (fo:clip::("auto" | clipShape))? (draw:wrap-influence-on-position::("iterative" | "once-concurrent" | "once-successive"))? common-writing-mode-attlist (draw:frame-display-scrollbar::boolean)? (draw:frame-display-border::boolean)? (draw:frame-margin-horizontal::nonNegativePixelLength)? (draw:frame-margin-vertical::nonNegativePixelLength)? (draw:visible-area-left::nonNegativeLength)? (draw:visible-area-top::nonNegativeLength)? (draw:visible-area-width::positiveLength)? (draw:visible-area-height::positiveLength)? (draw:draw-aspect::("content" | "thumbnail" | "icon" | "print-view"))? (draw:ole-draw-aspect::nonNegativeInteger)? ;
percent ::= string() ;
text-index-entry-span ::= text:index-entry-span::((text:style-name::styleNameRef)? string()) ;
positiveLength ::= string() ;
CURIE ::= string() ;
styleNameRefs ::= string()* ;
cellRangeAddressList ::= string() ;
config-config-item ::= config:config-item::(config-config-item-attlist string()) ;
cellAddress ::= string() ;
clipShape ::= string() ;
number-text ::= number:text::string() ;
base64Binary ::= string() ;
table-desc ::= table:desc::string() ;
SafeCURIE ::= string() ;
svg-title ::= svg:title::string() ;
date ::= string() ;
anyAttListOrElements ::= string()* anyElements ;
character ::= string() ;
nonNegativeLength ::= string() ;
variableName ::= string() ;
countryCode ::= string() ;
office-meta-data ::= (meta:generator::string) | (dc:title::string) | (dc:description::string) | (dc:subject::string) | (meta:keyword::string) | (meta:initial-creator::string) | dc-creator | (meta:printed-by::string) | (meta:creation-date::dateTime) | dc-date | (meta:print-date::dateTime) | (meta:template::(xlink:type::"simple" xlink:href::anyIRI (xlink:actuate::"onRequest")? (xlink:title::string)? (meta:date::dateTime)?)) | (meta:auto-reload::((xlink:type::"simple" xlink:href::anyIRI (xlink:show::"replace")? (xlink:actuate::"onLoad")?)? (meta:delay::duration)?)) | (meta:hyperlink-behaviour::((office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))?)) | (dc:language::language) | (meta:editing-cycles::nonNegativeInteger) | (meta:editing-duration::duration) | (meta:document-statistic::((meta:page-count::nonNegativeInteger)? (meta:table-count::nonNegativeInteger)? (meta:draw-count::nonNegativeInteger)? (meta:image-count::nonNegativeInteger)? (meta:ole-object-count::nonNegativeInteger)? (meta:object-count::nonNegativeInteger)? (meta:paragraph-count::nonNegativeInteger)? (meta:word-count::nonNegativeInteger)? (meta:character-count::nonNegativeInteger)? (meta:frame-count::nonNegativeInteger)? (meta:sentence-count::nonNegativeInteger)? (meta:syllable-count::nonNegativeInteger)? (meta:non-whitespace-character-count::nonNegativeInteger)? (meta:row-count::nonNegativeInteger)? (meta:cell-count::nonNegativeInteger)?)) | (meta:user-defined::(meta:name::string (meta:value-type::"float" double) | (meta:value-type::"date" dateOrDateTime) | (meta:value-type::"time" duration) | (meta:value-type::"boolean" boolean) | (meta:value-type::"string" string) | string())) ;
textEncoding ::= string() ;
form-option ::= form:option::(form-option-attlist string()) ;
ID ::= string() ;
dateTime ::= string() ;
paragraph-content ::= string() | (text:s::((text:c::nonNegativeInteger)?)) | (text:tab::text-tab-attr) | (text:line-break::ε) | text-soft-page-break | (text:span::((text:style-name::styleNameRef)? (text:class-names::styleNameRefs)? paragraph-content-or-hyperlink*)) | (text:meta::(text-meta-attlist paragraph-content-or-hyperlink*)) | text-bookmark | text-bookmark-start | text-bookmark-end | (text:reference-mark::(text:name::string)) | (text:reference-mark-start::(text:name::string)) | (text:reference-mark-end::(text:name::string)) | (text:note::(text-note-class (text:id::string)? text:note-citation::((text:label::string)? string()) text:note-body::(text-content*))) | (text:ruby::((text:style-name::styleNameRef)? text:ruby-base::(paragraph-content-or-hyperlink*) text:ruby-text::((text:style-name::styleNameRef)? string()))) | office-annotation | office-annotation-end | change-marks | shape | (text:date::(text-date-attlist string())) | (text:time::(text-time-attlist string())) | (text:page-number::(text-page-number-attlist string())) | (text:page-continuation::(text-page-continuation-attlist string())) | (text:sender-firstname::(common-field-fixed-attlist string())) | (text:sender-lastname::(common-field-fixed-attlist string())) | (text:sender-initials::(common-field-fixed-attlist string())) | (text:sender-title::(common-field-fixed-attlist string())) | (text:sender-position::(common-field-fixed-attlist string())) | (text:sender-email::(common-field-fixed-attlist string())) | (text:sender-phone-private::(common-field-fixed-attlist string())) | (text:sender-fax::(common-field-fixed-attlist string())) | (text:sender-company::(common-field-fixed-attlist string())) | (text:sender-phone-work::(common-field-fixed-attlist string())) | (text:sender-street::(common-field-fixed-attlist string())) | (text:sender-city::(common-field-fixed-attlist string())) | (text:sender-postal-code::(common-field-fixed-attlist string())) | (text:sender-country::(common-field-fixed-attlist string())) | (text:sender-state-or-province::(common-field-fixed-attlist string())) | (text:author-name::(common-field-fixed-attlist string())) | (text:author-initials::(common-field-fixed-attlist string())) | (text:chapter::(text-chapter-attlist string())) | (text:file-name::(text-file-name-attlist string())) | (text:template-name::(text-template-name-attlist string())) | (text:sheet-name::string()) | (text:variable-set::(common-field-name-attlist common-field-formula-attlist common-value-and-type-attlist common-field-display-value-none-attlist common-field-data-style-name-attlist string())) | (text:variable-get::(common-field-name-attlist common-field-display-value-formula-attlist common-field-data-style-name-attlist string())) | (text:variable-input::(common-field-name-attlist common-field-description-attlist common-value-type-attlist common-field-display-value-none-attlist common-field-data-style-name-attlist string())) | (text:user-field-get::(common-field-name-attlist common-field-display-value-formula-none-attlist common-field-data-style-name-attlist string())) | (text:user-field-input::(common-field-name-attlist common-field-description-attlist common-field-data-style-name-attlist string())) | (text:sequence::(common-field-name-attlist common-field-formula-attlist common-field-num-format-attlist text-sequence-ref-name string())) | (text:expression::(common-field-formula-attlist common-value-and-type-attlist? common-field-display-value-formula-attlist common-field-data-style-name-attlist string())) | (text:text-input::(common-field-description-attlist string())) | (text:initial-creator::(common-field-fixed-attlist string())) | (text:creation-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::dateOrDateTime)? string())) | (text:creation-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::timeOrDateTime)? string())) | (text:description::(common-field-fixed-attlist string())) | (text:user-defined::(common-field-fixed-attlist text:name::string common-field-data-style-name-attlist (office:value::double)? (office:date-value::dateOrDateTime)? (office:time-value::duration)? (office:boolean-value::boolean)? (office:string-value::string)? string())) | (text:print-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::time)? string())) | (text:print-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::date)? string())) | (text:printed-by::(common-field-fixed-attlist string())) | (text:title::(common-field-fixed-attlist string())) | (text:subject::(common-field-fixed-attlist string())) | (text:keywords::(common-field-fixed-attlist string())) | (text:editing-cycles::(common-field-fixed-attlist string())) | (text:editing-duration::(common-field-fixed-attlist common-field-data-style-name-attlist (text:duration::duration)? string())) | (text:modification-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::time)? string())) | (text:modification-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::date)? string())) | (text:creator::(common-field-fixed-attlist string())) | (text:page-count::(common-field-num-format-attlist string())) | (text:paragraph-count::(common-field-num-format-attlist string())) | (text:word-count::(common-field-num-format-attlist string())) | (text:character-count::(common-field-num-format-attlist string())) | (text:table-count::(common-field-num-format-attlist string())) | (text:image-count::(common-field-num-format-attlist string())) | (text:object-count::(common-field-num-format-attlist string())) | (text:database-display::(text-database-display-attlist string())) | (text:database-next::text-database-next-attlist) | (text:database-row-select::text-database-row-select-attlist) | (text:database-row-number::(common-field-database-table common-field-num-format-attlist (text:value::nonNegativeInteger)? string())) | (text:database-name::(common-field-database-table string())) | (text:page-variable-set::(text-set-page-variable-attlist string())) | (text:page-variable-get::(text-get-page-variable-attlist string())) | (text:placeholder::(text-placeholder-attlist string())) | (text:conditional-text::(text-conditional-text-attlist string())) | (text:hidden-text::(text-hidden-text-attlist string())) | (text:reference-ref::(text-common-ref-content text-bookmark-ref-content)) | (text:bookmark-ref::(text-common-ref-content text-bookmark-ref-content)) | (text:note-ref::(text-common-ref-content text-note-ref-content)) | (text:sequence-ref::(text-common-ref-content text-sequence-ref-content)) | (text:script::((xlink:type::"simple" xlink:href::anyIRI) | string() (script:language::string)?)) | (text:execute-macro::((text:name::string)? office-event-listeners? string())) | (text:hidden-paragraph::(text-hidden-paragraph-attlist string())) | (text:dde-connection::(text:connection-name::string string())) | (text:measure::(text:kind::("value" | "unit" | "gap") string())) | (text:table-formula::(common-field-formula-attlist common-field-display-value-formula-attlist common-field-data-style-name-attlist string())) | (text:meta-field::(text-meta-field-attlist paragraph-content-or-hyperlink*)) | (text:toc-mark-start::text-toc-mark-start-attrs) | (text:toc-mark-end::text-id) | (text:toc-mark::(text:string-value::string text-outline-level)) | (text:user-index-mark-start::(text-id text-outline-level text-index-name)) | (text:user-index-mark-end::text-id) | (text:user-index-mark::(text:string-value::string text-outline-level text-index-name)) | (text:alphabetical-index-mark-start::(text-id text-alphabetical-index-mark-attrs)) | (text:alphabetical-index-mark-end::text-id) | (text:alphabetical-index-mark::(text:string-value::string text-alphabetical-index-mark-attrs)) | (text:bibliography-mark::(text:bibliography-type::text-bibliography-types ((text:identifier::string) | (text:address::string) | (text:annote::string) | (text:author::string) | (text:booktitle::string) | (text:chapter::string) | (text:edition::string) | (text:editor::string) | (text:howpublished::string) | (text:institution::string) | (text:journal::string) | (text:month::string) | (text:note::string) | (text:number::string) | (text:organizations::string) | (text:pages::string) | (text:publisher::string) | (text:school::string) | (text:series::string) | (text:title::string) | (text:report-type::string) | (text:volume::string) | (text:year::string) | (text:url::string) | (text:custom1::string) | (text:custom2::string) | (text:custom3::string) | (text:custom4::string) | (text:custom5::string) | (text:isbn::string) | (text:issn::string))* string())) | (presentation:header::ε) | (presentation:footer::ε) | (presentation:date-time::ε) ;
table-title ::= table:title::string() ;
styleNameRef ::= string() | ε ;
signedZeroToHundredPercent ::= string() ;
duration ::= string() ;
string ::= string() ;
namespacedToken ::= string() ;
number-embedded-text ::= number:embedded-text::(number-embedded-text-attlist string()) ;
nonNegativePixelLength ::= string() ;
anyElements ::= (string()? anyAttListOrElements string()?)* ;
point3D ::= string() ;
--------------------pascal::bruneliere.bgf--------------------
String ::= string() ;
--------------------pl1::bruneliere.bgf--------------------
String ::= string() ;
--------------------uml::collab.bgf--------------------
String ::= string() ;
--------------------uml::extended.bgf--------------------
String ::= string() ;
--------------------uml::fragment.bgf--------------------
String ::= string() ;
--------------------uml::oocm.bgf--------------------
String ::= string() ;
--------------------uml::reuse.bgf--------------------
String ::= string() ;
--------------------uml::simple.bgf--------------------
String ::= string() ;
--------------------uml::statecharts.bgf--------------------
String ::= string() ;
--------------------uml::stereo.bgf--------------------
String ::= string() ;
--------------------uml::uml-uc.bgf--------------------
String ::= string() ;
--------------------uml::uml2.bgf--------------------
String ::= string() ;
--------------------uml::umldi-2.0.bgf--------------------
String ::= string() ;
--------------------uml::umldi-ag.bgf--------------------
String ::= string() ;
--------------------uml::umldi-c.bgf--------------------
String ::= string() ;
--------------------uml::umldi-mm.bgf--------------------
String ::= string() ;
--------------------uml::umldi-sm.bgf--------------------
String ::= string() ;
--------------------uml::umldi-uc.bgf--------------------
String ::= string() ;
--------------------uml::yuml.bgf--------------------
String ::= string() ;
--------------------xml::rosendal.bgf--------------------
String ::= string() ;
--------------------xml::rascal.bgf--------------------
Namespace ::= (namespace::(prefix::string() uri::string())) | (none::ε) ;
Node ::= (document::(root::Node)) | (attribute::(namespace::Namespace name::string() text::string())) | (element::(namespace::Namespace name::string() children::(Node*))) | (charData::(text::string())) | (cdata::(text::string())) | (comment::(text::string())) | (pi::(target::string() text::string())) | (entityRef::(name::string())) | (charRef::(code::integer())) ;
--------------------xquery::rosendal.bgf--------------------
String ::= string() ;
--------------------xslt::clark.bgf--------------------
char.datatype ::= string() ;
qname-but-not-ncname.datatype ::= string() ;
qnames.datatype ::= string()* ;
text.element ::= text::(extension.atts (disable-output-escaping::("yes" | "no"))? string()) ;
expression.datatype ::= string() ;
wildcards.datatype ::= string()* ;
number.element ::= number::(extension.atts (level::("single" | "multiple" | "any"))? (count::pattern.datatype)? (from::pattern.datatype)? (value::expression.datatype)? (format::avt.datatype)? (lang::(string() | expr-avt.datatype))? (letter-value::("alphabetic" | "traditional" | expr-avt.datatype))? (grouping-separator::(char.datatype | expr-avt.datatype))? (grouping-size::(number.datatype | expr-avt.datatype))?) ;
qname.datatype ::= string() ;
include.element ::= include::(extension.atts href::string()) ;
template.model ::= (instruction.category | literal-result-element | string())* ;
avt.datatype ::= string() ;
import.element ::= import::(extension.atts href::string()) ;
prefixes.datatype ::= (string() | "#default")* ;
output.element ::= output::(extension.atts (method::("xml" | "html" | "text" | qname-but-not-ncname.datatype))? (version::string())? (encoding::string())? (omit-xml-declaration::("yes" | "no"))? (standalone::("yes" | "no"))? (doctype-public::string())? (doctype-system::string())? (cdata-section-elements::qnames.datatype)? (indent::("yes" | "no"))? (media-type::string())?) ;
brace-avt.datatype ::= string() ;
sort.element ::= sort::(extension.atts (select::expression.datatype)? (lang::(string() | expr-avt.datatype))? (data-type::("text" | "number" | qname-but-not-ncname.datatype | expr-avt.datatype))? (order::("ascending" | "descending" | expr-avt.datatype))? (case-order::("upper-first" | "lower-first" | expr-avt.datatype))?) ;
any ::= (α | string() | any)* ;
expr-avt.datatype ::= string() ;
attribute.element ::= attribute::(extension.atts name::(qname.datatype | expr-avt.datatype) (namespace::(string() | brace-avt.datatype))? template.model) ;
element.element ::= element::(extension.atts name::(qname.datatype | expr-avt.datatype) (namespace::(string() | brace-avt.datatype))? (use-attribute-sets::qnames.datatype)? template.model) ;
stylesheet.model ::= extension.atts (id::string())? (extension-element-prefixes::prefixes.datatype)? (exclude-result-prefixes::prefixes.datatype)? version::version import.element* top-level-elements.model ;
pattern.datatype ::= string() ;
processing-instruction.element ::= processing-instruction::(extension.atts name::(string() | expr-avt.datatype) template.model) ;
decimal-format.element ::= decimal-format::(extension.atts (name::qname.datatype)? (decimal-separator::char.datatype)? (grouping-separator::char.datatype)? (infinity::string())? (minus-sign::char.datatype)? (NaN::string())? (percent::char.datatype)? (per-mille::char.datatype)? (zero-digit::char.datatype)? (digit::char.datatype)? (pattern-separator::char.datatype)?) ;
prefix.datatype ::= string() | "#default" ;
--------------------xslt::rosendal.bgf--------------------
String ::= string() ;
--------------------markup::atom.bgf--------------------
String ::= string() ;
--------------------markup::cml.bgf--------------------
String ::= string() ;
--------------------markup::csv-rascal-abstract.bgf--------------------
Field ::= (unquoted::(text::string())) | (quoted::(text::string())) ;
--------------------markup::ebxml.bgf--------------------
String ::= string() ;
--------------------markup::docbook-touzet.bgf--------------------
String ::= string() ;
--------------------markup::docbook-walsh.bgf--------------------
refmiscinfo.attlist ::= (class::string())? common.attrib refmiscinfo.role.attrib local.refmiscinfo.attrib ;
condition.attrib ::= (condition::string())? ;
id.attrib ::= (id::string())? ;
subject.attlist ::= (weight::string())? common.attrib subject.role.attrib local.subject.attrib ;
linkendreq.attrib ::= linkend::string() ;
synopfragmentref ::= synopfragmentref::(synopfragmentref.attlist string()) ;
glossentry.attlist ::= (sortas::string())? common.attrib glossentry.role.attrib local.glossentry.attrib ;
videodata.attlist ::= (width::string())? (contentwidth::string())? (depth::string())? (contentdepth::string())? (align::("left" | "right" | "center"))? (valign::("top" | "middle" | "bottom"))? (scale::string())? (scalefit::yesorno.attvals)? objectdata.attrib common.attrib videodata.role.attrib local.videodata.attrib ;
idreq.attrib ::= id::string() ;
address ::= address::(address.attlist (string() | personname | person.ident.mix | street | pob | postcode | city | state | country | phone | fax | email | otheraddr)*) ;
width.attrib ::= (width::string())? ;
bibliocoverage.attlist ::= (spatial::("dcmipoint" | "iso3166" | "dcmibox" | "tgn" | "otherspatial"))? (otherspatial::string())? (temporal::("dcmiperiod" | "w3c-dtf" | "othertemporal"))? (othertemporal::string())? common.attrib bibliocoverage.role.attrib local.bibliocoverage.attrib ;
yesorno.attvals ::= string() ;
objectdata.attrib ::= (entityref::string())? (fileref::string())? (format::notation.class)? (srccredit::string())? local.objectdata.attrib ;
tbl.tgroup.att ::= (tgroupstyle::string())? ;
xref.attlist ::= (endterm::string())? linkendreq.attrib common.attrib xref.role.attrib local.xref.attrib ;
variablelist.attlist ::= (termlength::string())? common.attrib variablelist.role.attrib local.variablelist.attrib ;
keyword ::= keyword::(keyword.attlist string()) ;
bookinfo.attlist ::= (contents::string())? common.attrib bookinfo.role.attrib local.bookinfo.attrib ;
arch.attrib ::= (arch::string())? ;
setinfo.attlist ::= (contents::string())? common.attrib setinfo.role.attrib local.setinfo.attrib ;
constructorsynopsis.attlist ::= (language::string())? common.attrib constructorsynopsis.role.attrib local.constructorsynopsis.attrib ;
fieldsynopsis.attlist ::= (language::string())? common.attrib fieldsynopsis.role.attrib local.fieldsynopsis.attrib ;
destructorsynopsis.attlist ::= (language::string())? common.attrib destructorsynopsis.role.attrib local.destructorsynopsis.attrib ;
area.attlist ::= label.attrib linkends.attrib (units::("calspair" | "linecolumn" | "linerange" | "linecolumnpair" | "other"))? (otherunits::string())? coords::string() idreq.common.attrib area.role.attrib local.area.attrib ;
classsynopsis.attlist ::= (language::string())? (class::("class" | "interface"))? common.attrib classsynopsis.role.attrib local.classsynopsis.attrib ;
bibliomset.attlist ::= (relation::string())? common.attrib bibliomset.role.attrib local.bibliomset.attrib ;
entrytbl.attlist ::= cols::string() tbl.tgroup.att (colname::string())? (spanname::string())? (namest::string())? (nameend::string())? (colsep::yesorno)? (rowsep::yesorno)? (align::("left" | "right" | "center" | "justify" | "char"))? (char::string())? (charoff::string())? secur ;
tgroup.attlist ::= cols::string() tbl.tgroup.att (colsep::yesorno)? (rowsep::yesorno)? (align::("left" | "right" | "center" | "justify" | "char"))? (char::string())? (charoff::string())? secur ;
glosssee.attlist ::= (otherterm::string())? common.attrib glosssee.role.attrib local.glosssee.attrib ;
filename.attlist ::= (class::("headerfile" | "partition" | "devicefile" | "libraryfile" | "directory" | "extension" | "symlink"))? (path::string())? moreinfo.attrib common.attrib filename.role.attrib local.filename.attrib ;
paramdef ::= paramdef::(paramdef.attlist (string() | type | replaceable | parameter | funcparams)*) ;
biblio.class.attrib ::= (class::("uri" | "doi" | "isbn" | "issn" | "libraryofcongress" | "pubnumber" | "other"))? (otherclass::string())? ;
arg ::= arg::(arg.attlist (string() | arg | group | option | synopfragmentref | replaceable | sbr)*) ;
imagedata.attlist ::= (width::string())? (contentwidth::string())? (depth::string())? (contentdepth::string())? (align::("left" | "right" | "center"))? (valign::("top" | "middle" | "bottom"))? (scale::string())? (scalefit::yesorno.attvals)? objectdata.attrib common.attrib imagedata.role.attrib local.imagedata.attrib ;
spanspec.attlist ::= namest::string() nameend::string() spanname::string() (colsep::yesorno)? (rowsep::yesorno)? (align::("left" | "right" | "center" | "justify" | "char"))? (char::string())? (charoff::string())? ;
primary.attlist ::= (sortas::string())? common.attrib primsecter.role.attrib local.primsecter.attrib ;
tbl.table.att ::= (tabstyle::string())? (tocentry::yesorno)? (shortentry::yesorno)? (orient::("port" | "land"))? (pgwide::yesorno)? ;
refclass.char.mix ::= string() | application | local.refclass.char.mix ;
docinfo.char.mix ::= string() | link.char.class | emphasis | trademark | replaceable | other.char.class | inlinegraphic | inlinemediaobject | ndxterm.class | local.docinfo.char.mix ;
link.attlist ::= (endterm::string())? linkendreq.attrib (type::string())? common.attrib link.role.attrib local.link.attrib ;
yesorno ::= string() ;
lang.attrib ::= (lang::string())? ;
glossterm.attlist ::= linkend.attrib (baseform::string())? common.attrib glossterm.role.attrib local.glossterm.attrib ;
article.attlist ::= (class::("journalarticle" | "productsheet" | "whitepaper" | "techreport" | "specification" | "faq"))? (parentbook::string())? status.attrib common.attrib article.role.attrib local.article.attrib ;
methodsynopsis.attlist ::= (language::string())? common.attrib methodsynopsis.role.attrib local.methodsynopsis.attrib ;
linkends.attrib ::= (linkends::string())? ;
status.attrib ::= (status::string())? local.status.attrib ;
secondary.attlist ::= (sortas::string())? common.attrib primsecter.role.attrib local.primsecter.attrib ;
ndxterm.char.mix ::= string() | xref.char.class | gen.char.class | link.char.class | tech.char.class | base.char.class | docinfo.char.class | other.char.class | inlinegraphic | inlinemediaobject | local.ndxterm.char.mix ;
bibliorelation.type.attrib ::= (type::("isversionof" | "hasversion" | "isreplacedby" | "replaces" | "isrequiredby" | "requires" | "ispartof" | "haspart" | "isreferencedby" | "references" | "isformatof" | "hasformat" | "othertype" | local.bibliorelation.types))? (othertype::string())? ;
conformance.attrib ::= (conformance::string())? ;
entry.attlist ::= (colname::string())? (namest::string())? (nameend::string())? (spanname::string())? (morerows::string())? (colsep::yesorno)? (rowsep::yesorno)? (align::("left" | "right" | "center" | "justify" | "char"))? (char::string())? (charoff::string())? (rotate::yesorno)? (valign::("top" | "middle" | "bottom"))? secur ;
role.attrib ::= (role::string())? ;
funcdef ::= funcdef::(funcdef.attlist (string() | type | replaceable | function)*) ;
ulink.attlist ::= url::string() (type::string())? common.attrib ulink.role.attrib local.ulink.attrib ;
orgname.attlist ::= common.attrib (class::("corporation" | "nonprofit" | "consortium" | "informal" | "other"))? (otherclass::string())? orgname.role.attrib local.orgname.attrib ;
userlevel.attrib ::= (userlevel::string())? ;
revision.attrib ::= (revision::string())? ;
olink.attlist ::= (targetdocent::string())? (linkmode::string())? (localinfo::string())? (type::string())? (targetdoc::string())? (targetptr::string())? common.attrib olink.role.attrib local.olink.attrib ;
book.attlist ::= (fpi::string())? label.attrib status.attrib common.attrib book.role.attrib local.book.attrib ;
security.attrib ::= (security::string())? ;
linkend.attrib ::= (linkend::string())? ;
set.attlist ::= (fpi::string())? status.attrib common.attrib set.role.attrib local.set.attrib ;
trademark ::= trademark::(trademark.attlist (string() | link.char.class | tech.char.class | base.char.class | other.char.class | inlinegraphic | inlinemediaobject | emphasis)*) ;
vendor.attrib ::= (vendor::string())? ;
alt ::= alt::(alt.attlist string()) ;
textdata.attlist ::= (encoding::string())? objectdata.attrib common.attrib textdata.role.attrib local.textdata.attrib ;
word.char.mix ::= string() | acronym | emphasis | trademark | link.char.class | base.char.class | other.char.class | inlinegraphic | inlinemediaobject | ndxterm.class | beginpage | local.word.char.mix ;
cptr.char.mix ::= string() | link.char.class | tech.char.class | base.char.class | other.char.class | inlinegraphic | inlinemediaobject | ndxterm.class | beginpage | local.cptr.char.mix ;
bibliomixed ::= bibliomixed::(bibliomixed.attlist (string() | bibliocomponent.mix | bibliomset)*) ;
tertiary.attlist ::= (sortas::string())? common.attrib primsecter.role.attrib local.primsecter.attrib ;
glossseealso.attlist ::= (otherterm::string())? common.attrib glossseealso.role.attrib local.glossseealso.attrib ;
simplelist.attlist ::= (columns::string())? (type::("inline" | "vert" | "horiz"))? common.attrib simplelist.role.attrib local.simplelist.attrib ;
cmdsynopsis.attlist ::= label.attrib (sepchar::string())? (cmdlength::string())? common.attrib cmdsynopsis.role.attrib local.cmdsynopsis.attrib ;
xreflabel.attrib ::= (xreflabel::string())? ;
biblioset.attlist ::= (relation::string())? common.attrib biblioset.role.attrib local.biblioset.attrib ;
title.char.mix ::= string() | xref.char.class | gen.char.class | link.char.class | tech.char.class | base.char.class | docinfo.char.class | other.char.class | inlineobj.char.class | ndxterm.class | local.title.char.mix ;
areaspec.attlist ::= (units::("calspair" | "linecolumn" | "linerange" | "linecolumnpair" | "other"))? (otherunits::string())? common.attrib areaspec.role.attrib local.areaspec.attrib ;
subjectterm ::= subjectterm::(subjectterm.attlist string()) ;
simplemsgentry.attlist ::= (audience::string())? (level::string())? (origin::string())? common.attrib simplemsgentry.role.attrib local.simplemsgentry.attrib ;
os.attrib ::= (os::string())? ;
refname.char.mix ::= string() | tech.char.class | local.refname.char.mix ;
para.char.mix ::= string() | xref.char.class | gen.char.class | link.char.class | tech.char.class | base.char.class | docinfo.char.class | other.char.class | inlineobj.char.class | synop.class | ndxterm.class | beginpage | forminlines.hook | local.para.char.mix ;
lotentry.attlist ::= linkend.attrib pagenum.attrib (srccredit::string())? common.attrib lotentry.role.attrib local.lotentry.attrib ;
indexterm.attlist ::= pagenum.attrib (scope::("all" | "global" | "local"))? (significance::("preferred" | "normal"))? (class::("singular" | "startofrange" | "endofrange"))? (startref::string())? (zone::string())? common.attrib indexterm.role.attrib local.indexterm.attrib ;
remap.attrib ::= (remap::string())? ;
replaceable ::= replaceable::(replaceable.attlist (string() | link.char.class | optional | base.char.class | other.char.class | inlinegraphic | inlinemediaobject | co)*) ;
graphics.attrib ::= (entityref::string())? (fileref::string())? (format::notation.class)? (srccredit::string())? (width::string())? (contentwidth::string())? (depth::string())? (contentdepth::string())? (align::("left" | "right" | "center"))? (valign::("top" | "middle" | "bottom"))? (scale::string())? (scalefit::yesorno.attvals)? local.graphics.attrib ;
bibliomset ::= bibliomset::(bibliomset.attlist (string() | bibliocomponent.mix | bibliomset)*) ;
glossdef.attlist ::= (subject::string())? common.attrib glossdef.role.attrib local.glossdef.attrib ;
colspec.attlist ::= (colnum::string())? (colname::string())? (colwidth::string())? (colsep::yesorno)? (rowsep::yesorno)? (align::("left" | "right" | "center" | "justify" | "char"))? (char::string())? (charoff::string())? ;
subscript ::= subscript::(subscript.attlist (string() | link.char.class | emphasis | replaceable | symbol | inlinegraphic | inlinemediaobject | base.char.class | other.char.class)*) ;
mark.attrib ::= (mark::string())? local.mark.attrib ;
subjectset.attlist ::= (scheme::string())? common.attrib subjectset.role.attrib local.subjectset.attrib ;
superscript ::= superscript::(superscript.attlist (string() | link.char.class | emphasis | replaceable | symbol | inlinegraphic | inlinemediaobject | base.char.class | other.char.class)*) ;
areaset.attlist ::= label.attrib (units::("calspair" | "linecolumn" | "linerange" | "linecolumnpair" | "other"))? (otherunits::string())? coords::string() idreq.common.attrib areaset.role.attrib local.areaset.attrib ;
refinline.char.mix ::= string() | xref.char.class | gen.char.class | link.char.class | tech.char.class | base.char.class | docinfo.char.class | other.char.class | ndxterm.class | beginpage | local.refinline.char.mix ;
label.attrib ::= (label::string())? ;
keyaction.attrib ::= (action::("click" | "double-click" | "press" | "seq" | "simul" | "other"))? (otheraction::string())? local.keyaction.attrib ;
listitem.attlist ::= (override::string())? common.attrib listitem.role.attrib local.listitem.attrib ;
callout.attlist ::= arearefs::string() common.attrib callout.role.attrib local.callout.attrib ;
pagenum.attrib ::= (pagenum::string())? ;
smallcptr.char.mix ::= string() | replaceable | inlinegraphic | inlinemediaobject | ndxterm.class | beginpage | local.smallcptr.char.mix ;
--------------------markup::kml.bgf--------------------
String ::= string() ;
--------------------markup::graphml-doux.bgf--------------------
String ::= string() ;
--------------------markup::json-rascal-abstract.bgf--------------------
Value ::= (null::ε) | (object::(members::((memberName::string() memberValue::Value)*))) | (array::(values::(Value*))) | (integer::(n::integer())) | (float::(r::integer())) | (string::(s::string())) | (boolean::(b::("true" | "false"))) ;
--------------------markup::json-zaytsev-abstract.bgf--------------------
JSO ::= (jsnumber::(n::integer())) | (jsstring::(s::string())) | (jsboolean::(b::("true" | "false"))) | (jsarray::(xs::(JSO*))) | (jsobject::(kvs::((JSO JSO)*))) | (jsnull::ε) ;
--------------------markup::mathml-furubayashi.bgf--------------------
mml.att-lquote ::= (lquote::string())? ;
mml.att-separators ::= (separators::string())? ;
mml.idref.datatype ::= string() ;
mml.att-alt ::= (alt::string())? ;
mml.framespacing.datatype ::= string() | (string() | "veryverythinmathspace" | "verythinmathspace" | "thinmathspace" | "mediummathspace" | "thickmathspace" | "verythickmathspace" | "veryverythickmathspace") string() | (string() | "veryverythinmathspace" | "verythinmathspace" | "thinmathspace" | "mediummathspace" | "thickmathspace" | "verythickmathspace" | "veryverythickmathspace") ;
mml.att-name ::= (name::string())? ;
mml.att-open ::= (open::string())? ;
mml.att-rquote ::= (rquote::string())? ;
mml.Annotation-xml.datatype ::= (string() | (string()* mml.Annotation-xml.datatype))* ;
mml.nonnegativefloat.datatype ::= string() ;
mml.att-macros ::= (macros::string())? ;
mml.id.datatype ::= string() ;
mml.att-display ::= (display::string())? ;
mml.att-baseline ::= (baseline::string())? ;
mml.MathMLCharacters ::= mml.mglyph.qname | string() ;
mml.att-mode ::= (mode::string())? ;
mml.color.datatype ::= string() | string() | "transparent" ;
mml.Common.attrib ::= (xlink:href::mml.uri.datatype)? (class::string())? (style::string())? (id::mml.id.datatype)? (xref::mml.idref.datatype)? (other::string())? ;
mml.att-close ::= (close::string())? ;
mml.groupalign.datatype ::= string() ;
mml.length.datatype ::= string() ;
mml.att-alttext ::= (alttext::string())? ;
mml.uri.datatype ::= string() ;
mml.rowspacing.datatype ::= string()+ ;
mml.columnspacing.datatype ::= (string() string() | "veryverythinmathspace" | "verythinmathspace" | "thinmathspace" | "mediummathspace" | "thickmathspace" | "verythickmathspace" | "veryverythickmathspace")+ ;
mml.columnwidth.datatype ::= ("auto" | string() | (string() | "veryverythinmathspace" | "verythinmathspace" | "thinmathspace" | "mediummathspace" | "thickmathspace" | "verythickmathspace" | "veryverythickmathspace") | "fit")+ ;
mml.namedspace.datatype ::= string() | "veryverythinmathspace" | "verythinmathspace" | "thinmathspace" | "mediummathspace" | "thickmathspace" | "verythickmathspace" | "veryverythickmathspace" ;
mml.att-fontfamily ::= (fontfamily::string())? ;
mml.Annotation.datatype ::= string() ;
mml.att-encoding ::= (encoding::string())? ;
--------------------markup::pnml-anyElement.bgf--------------------
anyElement ::= (α | string() | anyElement)* ;
--------------------markup::r2ml.bgf--------------------
String ::= string() ;
--------------------markup::pnml-ext-inhibitor.bgf--------------------
font.element ::= font::((family::string())? (style::string())? (weight::string())? (size::string())? (decoration::("underline" | "overline" | "line-through"))? (align::("left" | "center" | "right"))? (rotation::integer())?) ;
arc.content ::= arc::(identifier.content source::string() target::string() Name? arc.labels (graphics::edgegraphics.content)? toolspecific.element*) ;
reference ::= ref::string() ;
simpletext.content ::= (text::string())? ;
toolspecific.element ::= toolspecific::(tool::string() version::string() anyElement*) ;
color.type ::= string() ;
identifier.content ::= id::string() ;
fill.element ::= fill::((color::color.type)? (gradient-color::color.type)? (gradient-rotation::("vertical" | "horizontal" | "diagonal"))? (image::string())?) ;
anyElement ::= (α | string() | anyElement)* ;
--------------------markup::pnml-ext-reset.bgf--------------------
font.element ::= font::((family::string())? (style::string())? (weight::string())? (size::string())? (decoration::("underline" | "overline" | "line-through"))? (align::("left" | "center" | "right"))? (rotation::integer())?) ;
arc.content ::= arc::(identifier.content source::string() target::string() Name? arc.labels (graphics::edgegraphics.content)? toolspecific.element*) ;
reference ::= ref::string() ;
simpletext.content ::= (text::string())? ;
toolspecific.element ::= toolspecific::(tool::string() version::string() anyElement*) ;
color.type ::= string() ;
identifier.content ::= id::string() ;
fill.element ::= fill::((color::color.type)? (gradient-color::color.type)? (gradient-rotation::("vertical" | "horizontal" | "diagonal"))? (image::string())?) ;
anyElement ::= (α | string() | anyElement)* ;
--------------------markup::pnml-ext-resetinhibitor.bgf--------------------
font.element ::= font::((family::string())? (style::string())? (weight::string())? (size::string())? (decoration::("underline" | "overline" | "line-through"))? (align::("left" | "center" | "right"))? (rotation::integer())?) ;
arc.content ::= arc::(identifier.content source::string() target::string() Name? arc.labels (graphics::edgegraphics.content)? toolspecific.element*) ;
reference ::= ref::string() ;
simpletext.content ::= (text::string())? ;
toolspecific.element ::= toolspecific::(tool::string() version::string() anyElement*) ;
color.type ::= string() ;
identifier.content ::= id::string() ;
fill.element ::= fill::((color::color.type)? (gradient-color::color.type)? (gradient-rotation::("vertical" | "horizontal" | "diagonal"))? (image::string())?) ;
anyElement ::= (α | string() | anyElement)* ;
--------------------markup::pnml-guyard-basic.bgf--------------------
String ::= string() ;
--------------------markup::pnml-guyard-modular.bgf--------------------
String ::= string() ;
--------------------markup::pnml-guyard-simplified.bgf--------------------
String ::= string() ;
--------------------markup::pnml-guyard-structured.bgf--------------------
String ::= string() ;
--------------------markup::pnml-highlevelnet.bgf--------------------
UserOperator ::= useroperator::(declaration::string() Operator.content) ;
font.element ::= font::((family::string())? (style::string())? (weight::string())? (size::string())? (decoration::("underline" | "overline" | "line-through"))? (align::("left" | "center" | "right"))? (rotation::integer())?) ;
arc.content ::= arc::(identifier.content source::string() target::string() Name? arc.labels (graphics::edgegraphics.content)? toolspecific.element*) ;
Variable ::= variable::(refvariable::string()) ;
reference ::= ref::string() ;
simpletext.content ::= (text::string())? ;
UserSort ::= usersort::(declaration::string()) ;
PartitionElementOf ::= partitionelementof::(refpartition::string() PartitionOperator.content) ;
toolspecific.element ::= toolspecific::(tool::string() version::string() anyElement*) ;
color.type ::= string() ;
Declaration.content ::= id::string() name::string() ;
identifier.content ::= id::string() ;
fill.element ::= fill::((color::color.type)? (gradient-color::color.type)? (gradient-rotation::("vertical" | "horizontal" | "diagonal"))? (image::string())?) ;
anyElement ::= (α | string() | anyElement)* ;
StringConstant.content ::= value::string() ;
--------------------markup::pnml-hlpng.bgf--------------------
UserOperator ::= useroperator::(declaration::string() Operator.content) ;
font.element ::= font::((family::string())? (style::string())? (weight::string())? (size::string())? (decoration::("underline" | "overline" | "line-through"))? (align::("left" | "center" | "right"))? (rotation::integer())?) ;
arc.content ::= arc::(identifier.content source::string() target::string() Name? arc.labels (graphics::edgegraphics.content)? toolspecific.element*) ;
Variable ::= variable::(refvariable::string()) ;
reference ::= ref::string() ;
simpletext.content ::= (text::string())? ;
UserSort ::= usersort::(declaration::string()) ;
toolspecific.element ::= toolspecific::(tool::string() version::string() anyElement*) ;
color.type ::= string() ;
Declaration.content ::= id::string() name::string() ;
identifier.content ::= id::string() ;
fill.element ::= fill::((color::color.type)? (gradient-color::color.type)? (gradient-rotation::("vertical" | "horizontal" | "diagonal"))? (image::string())?) ;
anyElement ::= (α | string() | anyElement)* ;
--------------------markup::rss.bgf--------------------
String ::= string() ;
--------------------markup::pnml-partitions.bgf--------------------
PartitionElementOf ::= partitionelementof::(refpartition::string() PartitionOperator.content) ;
--------------------markup::pnml-pnmlcoremodel.bgf--------------------
font.element ::= font::((family::string())? (style::string())? (weight::string())? (size::string())? (decoration::("underline" | "overline" | "line-through"))? (align::("left" | "center" | "right"))? (rotation::integer())?) ;
arc.content ::= arc::(identifier.content source::string() target::string() Name? arc.labels (graphics::edgegraphics.content)? toolspecific.element*) ;
reference ::= ref::string() ;
simpletext.content ::= (text::string())? ;
toolspecific.element ::= toolspecific::(tool::string() version::string() anyElement*) ;
color.type ::= string() ;
identifier.content ::= id::string() ;
fill.element ::= fill::((color::color.type)? (gradient-color::color.type)? (gradient-rotation::("vertical" | "horizontal" | "diagonal"))? (image::string())?) ;
anyElement ::= (α | string() | anyElement)* ;
--------------------markup::pnml-ptnet.bgf--------------------
font.element ::= font::((family::string())? (style::string())? (weight::string())? (size::string())? (decoration::("underline" | "overline" | "line-through"))? (align::("left" | "center" | "right"))? (rotation::integer())?) ;
arc.content ::= arc::(identifier.content source::string() target::string() Name? arc.labels (graphics::edgegraphics.content)? toolspecific.element*) ;
reference ::= ref::string() ;
simpletext.content ::= (text::string())? ;
toolspecific.element ::= toolspecific::(tool::string() version::string() anyElement*) ;
color.type ::= string() ;
identifier.content ::= id::string() ;
fill.element ::= fill::((color::color.type)? (gradient-color::color.type)? (gradient-rotation::("vertical" | "horizontal" | "diagonal"))? (image::string())?) ;
anyElement ::= (α | string() | anyElement)* ;
--------------------markup::pnml-strings.bgf--------------------
StringConstant.content ::= value::string() ;
--------------------markup::pnml-symmetricnet.bgf--------------------
UserOperator ::= useroperator::(declaration::string() Operator.content) ;
font.element ::= font::((family::string())? (style::string())? (weight::string())? (size::string())? (decoration::("underline" | "overline" | "line-through"))? (align::("left" | "center" | "right"))? (rotation::integer())?) ;
arc.content ::= arc::(identifier.content source::string() target::string() Name? arc.labels (graphics::edgegraphics.content)? toolspecific.element*) ;
Variable ::= variable::(refvariable::string()) ;
reference ::= ref::string() ;
simpletext.content ::= (text::string())? ;
UserSort ::= usersort::(declaration::string()) ;
PartitionElementOf ::= partitionelementof::(refpartition::string() PartitionOperator.content) ;
toolspecific.element ::= toolspecific::(tool::string() version::string() anyElement*) ;
color.type ::= string() ;
Declaration.content ::= id::string() name::string() ;
identifier.content ::= id::string() ;
fill.element ::= fill::((color::color.type)? (gradient-color::color.type)? (gradient-rotation::("vertical" | "horizontal" | "diagonal"))? (image::string())?) ;
anyElement ::= (α | string() | anyElement)* ;
--------------------markup::pnml-terms.bgf--------------------
UserOperator ::= useroperator::(declaration::string() Operator.content) ;
Variable ::= variable::(refvariable::string()) ;
UserSort ::= usersort::(declaration::string()) ;
Declaration.content ::= id::string() name::string() ;
--------------------markup::pnml-touzet.bgf--------------------
String ::= string() ;
--------------------markup::svg-furubayashi-basic.bgf--------------------
SVG.Paint.datatype ::= string() ;
SVG.LinkTarget.datatype ::= string() ;
SVG.ViewBoxSpec.datatype ::= string() ;
SVG.desc ::= desc::(string() SVG.Core.attrib SVG.Style.attrib) ;
SVG.StrokeMiterLimitValue.datatype ::= string() ;
SVG.Boolean.datatype ::= string() ;
SVG.font-face ::= font-face::(SVG.Description.class* SVG.font-face-src? SVG.definition-src? SVG.Core.attrib (font-family::string())? (font-style::string())? (font-variant::string())? (font-weight::string())? (font-stretch::string())? (font-size::string())? (unicode-range::string())? (units-per-em::SVG.Number.datatype)? (panose-1::string())? (stemv::SVG.Number.datatype)? (stemh::SVG.Number.datatype)? (slope::SVG.Number.datatype)? (cap-height::SVG.Number.datatype)? (x-height::SVG.Number.datatype)? (accent-height::SVG.Number.datatype)? (ascent::SVG.Number.datatype)? (descent::SVG.Number.datatype)? (widths::string())? (bbox::string())? (ideographic::SVG.Number.datatype)? (alphabetic::SVG.Number.datatype)? (mathematical::SVG.Number.datatype)? (hanging::SVG.Number.datatype)? (v-ideographic::SVG.Number.datatype)? (v-alphabetic::SVG.Number.datatype)? (v-mathematical::SVG.Number.datatype)? (v-hanging::SVG.Number.datatype)? (underline-position::SVG.Number.datatype)? (underline-thickness::SVG.Number.datatype)? (strikethrough-position::SVG.Number.datatype)? (strikethrough-thickness::SVG.Number.datatype)? (overline-position::SVG.Number.datatype)? (overline-thickness::SVG.Number.datatype)?) ;
SVG.Lengths.datatype ::= string() ;
SVG.altGlyph ::= altGlyph::(string() SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.XLink.attrib SVG.External.attrib (x::SVG.Coordinates.datatype)? (y::SVG.Coordinates.datatype)? (dx::SVG.Lengths.datatype)? (dy::SVG.Lengths.datatype)? (glyphRef::string())? (format::string())? (rotate::SVG.Numbers.datatype)?) ;
SVG.TextDecorationValue.datatype ::= string() ;
SVG.FeatureList.datatype ::= string() ;
SVG.XLinkEmbed.attrib ::= (xlink:type::"simple")? xlink:href::SVG.URI.datatype (xlink:role::SVG.URI.datatype)? (xlink:arcrole::SVG.URI.datatype)? (xlink:title::string())? (xlink:show::"embed")? (xlink:actuate::"onLoad")? SVG.XLinkEmbed.extra.attrib ;
SVG.font-face-name ::= font-face-name::(ε SVG.Core.attrib (name::string())?) ;
SVG.StrokeDashArrayValue.datatype ::= string() ;
SVG.feFuncR ::= feFuncR::((SVG.animate | SVG.set)* SVG.Core.attrib type::("identity" | "table" | "discrete" | "linear" | "gamma") (tableValues::string())? (slope::SVG.Number.datatype)? (intercept::SVG.Number.datatype)? (amplitude::SVG.Number.datatype)? (exponent::SVG.Number.datatype)? (offset::SVG.Number.datatype)?) ;
SVG.FilterValue.datatype ::= string() ;
SVG.OpacityValue.datatype ::= string() ;
SVG.vkern ::= vkern::(ε SVG.Core.attrib (u1::string())? (g1::string())? (u2::string())? (g2::string())? k::SVG.Number.datatype) ;
SVG.feComposite ::= feComposite::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib in2::string() (operator::("over" | "in" | "out" | "atop" | "xor" | "arithmetic"))? (k1::SVG.Number.datatype)? (k2::SVG.Number.datatype)? (k3::SVG.Number.datatype)? (k4::SVG.Number.datatype)?) ;
SVG.Script.datatype ::= string() ;
SVG.textPath ::= textPath::((string() | SVG.tspan | SVG.tref | SVG.altGlyph | SVG.animate | SVG.set | SVG.animateColor | SVG.Description.class | SVG.Hyperlink.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.XLinkRequired.attrib SVG.External.attrib (startOffset::SVG.Length.datatype)? (textLength::SVG.Length.datatype)? (lengthAdjust::("spacing" | "spacingAndGlyphs"))? (method::("align" | "stretch"))? (spacing::("auto" | "exact"))?) ;
SVG.FontSizeValue.datatype ::= string() ;
SVG.StyleSheet.datatype ::= string() ;
SVG.PreserveAspectRatioSpec.datatype ::= string() ;
SVG.feFuncG ::= feFuncG::((SVG.animate | SVG.set)* SVG.Core.attrib type::("identity" | "table" | "discrete" | "linear" | "gamma") (tableValues::string())? (slope::SVG.Number.datatype)? (intercept::SVG.Number.datatype)? (amplitude::SVG.Number.datatype)? (exponent::SVG.Number.datatype)? (offset::SVG.Number.datatype)?) ;
SVG.MaskValue.datatype ::= string() ;
SVG.feFuncB ::= feFuncB::((SVG.animate | SVG.set)* SVG.Core.attrib type::("identity" | "table" | "discrete" | "linear" | "gamma") (tableValues::string())? (slope::SVG.Number.datatype)? (intercept::SVG.Number.datatype)? (amplitude::SVG.Number.datatype)? (exponent::SVG.Number.datatype)? (offset::SVG.Number.datatype)?) ;
SVG.hkern ::= hkern::(ε SVG.Core.attrib (u1::string())? (g1::string())? (u2::string())? (g2::string())? k::SVG.Number.datatype) ;
SVG.feFuncA ::= feFuncA::((SVG.animate | SVG.set)* SVG.Core.attrib type::("identity" | "table" | "discrete" | "linear" | "gamma") (tableValues::string())? (slope::SVG.Number.datatype)? (intercept::SVG.Number.datatype)? (amplitude::SVG.Number.datatype)? (exponent::SVG.Number.datatype)? (offset::SVG.Number.datatype)?) ;
SVG.AnimationTiming.attrib ::= (begin::string())? (dur::string())? (end::string())? (min::string())? (max::string())? (restart::("always" | "never" | "whenNotActive"))? (repeatCount::string())? (repeatDur::string())? (fill::("remove" | "freeze"))? SVG.AnimationTiming.extra.attrib ;
SVG.font-face-format ::= font-face-format::(ε SVG.Core.attrib (string::string())?) ;
SVG.foreignObject.class ::= string() ;
SVG.FilterPrimitive.attrib ::= (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? (width::SVG.Length.datatype)? (height::SVG.Length.datatype)? (result::string())? SVG.FilterPrimitive.extra.attrib ;
SVG.Coordinate.datatype ::= string() ;
SVG.animateMotion ::= animateMotion::(SVG.Description.class* SVG.mpath? SVG.Core.attrib SVG.Conditional.attrib SVG.AnimationEvents.attrib SVG.External.attrib SVG.Animation.attrib SVG.AnimationTiming.attrib SVG.AnimationAddtion.attrib (calcMode::("discrete" | "linear" | "paced" | "spline"))? (values::string())? (keyTimes::string())? (Splines::string())? (from::string())? (to::string())? (by::string())? (path::string())? (keyPoints::string())? (rotate::string())? (origin::string())?) ;
SVG.FontSizeAdjustValue.datatype ::= string() ;
SVG.SVGColor.datatype ::= string() ;
SVG.StrokeDashOffsetValue.datatype ::= string() ;
SVG.Points.datatype ::= string() ;
SVG.NumberOrPercentage.datatype ::= string() ;
SVG.AnimationValue.attrib ::= (calcMode::("discrete" | "linear" | "paced" | "spline"))? (values::string())? (keyTimes::string())? (keySplines::string())? (from::string())? (to::string())? (by::string())? SVG.AnimationValue.extra.attrib ;
SVG.ClipPathValue.datatype ::= string() ;
SVG.ExtensionList.datatype ::= string() ;
SVG.FontFamilyValue.datatype ::= string() ;
SVG.ClipValue.datatype ::= string() ;
SVG.Text.datatype ::= string() ;
SVG.Profile.attrib ::= ε ;
 SVG.Profile.attrib ::= (color-profile::string())? SVG.Profile.extra.attrib ;
SVG.PathData.datatype ::= string() ;
SVG.set ::= set::(SVG.Description.class* SVG.Core.attrib SVG.Conditional.attrib SVG.AnimationEvents.attrib SVG.External.attrib SVG.Animation.attrib SVG.AnimationAttribute.attrib SVG.AnimationTiming.attrib (to::string())?) ;
SVG.a ::= a::((string() | SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.XLinkReplace.attrib SVG.External.attrib (transform::SVG.TransformList.datatype)? (target::SVG.LinkTarget.datatype)?) ;
SVG.AnimationAttribute.attrib ::= attributeName::string() (attributeType::string())? SVG.AnimationAttribute.extra.attrib ;
SVG.script ::= script::(string() SVG.Core.attrib SVG.XLink.attrib SVG.External.attrib type::SVG.ContentType.datatype) ;
SVG.GlyphOrientationHorizontalValue.datatype ::= string() ;
SVG.TransformList.datatype ::= string() ;
SVG.glyphRef ::= glyphRef::(ε SVG.Core.attrib SVG.Style.attrib SVG.Font.attrib SVG.XLink.attrib (x::SVG.Coordinates.datatype)? (y::SVG.Coordinates.datatype)? (dx::SVG.Lengths.datatype)? (dy::SVG.Lengths.datatype)? (glyphRef::string())? (format::string())?) ;
SVG.feMergeNode ::= feMergeNode::((SVG.animate | SVG.set)* SVG.Core.attrib (in::string())?) ;
SVG.XLink.attrib ::= ε ;
 SVG.XLink.attrib ::= (xlink:type::"simple")? (xlink:href::SVG.URI.datatype)? (xlink:role::SVG.URI.datatype)? (xlink:arcrole::SVG.URI.datatype)? (xlink:title::string())? (xlink:show::"other")? (xlink:actuate::"onLoad")? SVG.XLink.extra.attrib ;
SVG.URI.datatype ::= string() ;
SVG.title ::= title::(string() SVG.Core.attrib SVG.Style.attrib) ;
SVG.LanguageCodes.datatype ::= string() ;
SVG.ID.datatype ::= string() ;
SVG.XLinkReplace.attrib ::= (xlink:type::"simple")? xlink:href::SVG.URI.datatype (xlink:role::SVG.URI.datatype)? (xlink:arcrole::SVG.URI.datatype)? (xlink:title::string())? (xlink:show::("new" | "replace"))? (xlink:actuate::"onRequest")? SVG.XLinkReplace.extra.attrib ;
SVG.ContentType.datatype ::= string() ;
SVG.feBlend ::= feBlend::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib in2::string() (mode::("normal" | "multiply" | "screen" | "darken" | "lighten"))?) ;
SVG.MediaDesc.datatype ::= string() ;
SVG.ClassList.datatype ::= string() ;
SVG.KerningValue.datatype ::= string() ;
SVG.Length.datatype ::= string() ;
SVG.feColorMatrix ::= feColorMatrix::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib (type::("matrix" | "saturate" | "hueRotate" | "luminanceToAlpha"))? (values::string())?) ;
SVG.SpacingValue.datatype ::= string() ;
SVG.metadata ::= metadata::(string() SVG.Core.attrib) ;
SVG.ClipFillRule.datatype ::= string() ;
SVG.Color.datatype ::= string() ;
SVG.text ::= text::((string() | SVG.Description.class | SVG.Animation.class | SVG.TextContent.class | SVG.Hyperlink.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Text.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib (x::SVG.Coordinates.datatype)? (y::SVG.Coordinates.datatype)? (dx::SVG.Lengths.datatype)? (dy::SVG.Lengths.datatype)? (rotate::SVG.Numbers.datatype)? (textLength::SVG.Length.datatype)? (lengthAdjust::("spacing" | "spacingAndGlyphs"))? (transform::SVG.TransformList.datatype)?) ;
SVG.NumberOptionalNumber.datatype ::= string() ;
SVG.color-profile ::= color-profile::(SVG.Description.class* SVG.Core.attrib SVG.XLink.attrib (local::string())? name::string() (rendering-intent::("auto" | "perceptual" | "relative-colorimetric" | "saturation" | "absolute-colorimetric"))?) ;
SVG.tspan ::= tspan::((string() | SVG.tspan | SVG.tref | SVG.altGlyph | SVG.animate | SVG.set | SVG.animateColor | SVG.Description.class | SVG.Hyperlink.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib (x::SVG.Coordinates.datatype)? (y::SVG.Coordinates.datatype)? (dx::SVG.Lengths.datatype)? (dy::SVG.Lengths.datatype)? (rotate::SVG.Numbers.datatype)? (textLength::SVG.Length.datatype)? (lengthAdjust::("spacing" | "spacingAndGlyphs"))?) ;
SVG.BaselineShiftValue.datatype ::= string() ;
SVG.Numbers.datatype ::= string() ;
SVG.XLinkRequired.attrib ::= (xlink:type::"simple")? xlink:href::SVG.URI.datatype (xlink:role::SVG.URI.datatype)? (xlink:arcrole::SVG.URI.datatype)? (xlink:title::string())? (xlink:show::"other")? (xlink:actuate::"onLoad")? SVG.XLinkRequired.extra.attrib ;
SVG.view ::= view::(SVG.Description.class* SVG.Core.attrib SVG.External.attrib (viewBox::SVG.ViewBoxSpec.datatype)? (preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype)? (zoomAndPan::("disable" | "magnify"))? (viewTarget::string())?) ;
SVG.FilterPrimitiveWithIn.attrib ::= SVG.FilterPrimitive.attrib (in::string())? SVG.FilterPrimitiveWithIn.extra.attrib ;
SVG.style ::= style::(string() SVG.Core.attrib type::SVG.ContentType.datatype (media::SVG.MediaDesc.datatype)? (title::SVG.Text.datatype)?) ;
SVG.GlyphOrientationVerticalValue.datatype ::= string() ;
SVG.StrokeWidthValue.datatype ::= string() ;
SVG.LanguageCode.datatype ::= string() ;
SVG.glyph ::= glyph::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Style.attrib SVG.Presentation.attrib (unicode::string())? (glyph-name::string())? (d::SVG.PathData.datatype)? (orientation::string())? (arabic-form::string())? (lang::SVG.LanguageCodes.datatype)? (horiz-adv-x::SVG.Number.datatype)? (vert-origin-x::SVG.Number.datatype)? (vert-origin-y::SVG.Number.datatype)? (vert-adv-y::SVG.Number.datatype)?) ;
SVG.Coordinates.datatype ::= string() ;
--------------------markup::svg-furubayashi-tiny.bgf--------------------
SVG.ExtensionList.datatype ::= string() ;
SVG.FontFamilyValue.datatype ::= string() ;
SVG.Paint.datatype ::= string() ;
SVG.LinkTarget.datatype ::= string() ;
SVG.ViewBoxSpec.datatype ::= string() ;
SVG.Text.datatype ::= string() ;
SVG.desc ::= desc::(string() SVG.Core.attrib SVG.Style.attrib) ;
SVG.PathData.datatype ::= string() ;
SVG.StrokeMiterLimitValue.datatype ::= string() ;
SVG.set ::= set::(SVG.Description.class* SVG.Core.attrib SVG.Conditional.attrib SVG.AnimationEvents.attrib SVG.External.attrib SVG.Animation.attrib SVG.AnimationAttribute.attrib SVG.AnimationTiming.attrib (to::string())?) ;
SVG.a ::= a::((string() | SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.XLinkReplace.attrib SVG.External.attrib (transform::SVG.TransformList.datatype)? (target::SVG.LinkTarget.datatype)?) ;
SVG.AnimationAttribute.attrib ::= attributeName::string() (attributeType::string())? SVG.AnimationAttribute.extra.attrib ;
SVG.script ::= script::(string() SVG.Core.attrib SVG.XLink.attrib SVG.External.attrib type::SVG.ContentType.datatype) ;
SVG.Boolean.datatype ::= string() ;
SVG.TransformList.datatype ::= string() ;
SVG.font-face ::= font-face::(SVG.Description.class* SVG.font-face-src? SVG.Core.attrib (font-family::string())? (font-style::string())? (font-variant::string())? (font-weight::string())? (font-stretch::string())? (font-size::string())? (unicode-range::string())? (units-per-em::SVG.Number.datatype)? (panose-1::string())? (stemv::SVG.Number.datatype)? (stemh::SVG.Number.datatype)? (slope::SVG.Number.datatype)? (cap-height::SVG.Number.datatype)? (x-height::SVG.Number.datatype)? (accent-height::SVG.Number.datatype)? (ascent::SVG.Number.datatype)? (descent::SVG.Number.datatype)? (widths::string())? (bbox::string())? (ideographic::SVG.Number.datatype)? (alphabetic::SVG.Number.datatype)? (mathematical::SVG.Number.datatype)? (hanging::SVG.Number.datatype)? (underline-position::SVG.Number.datatype)? (underline-thickness::SVG.Number.datatype)? (strikethrough-position::SVG.Number.datatype)? (strikethrough-thickness::SVG.Number.datatype)? (overline-position::SVG.Number.datatype)? (overline-thickness::SVG.Number.datatype)?) ;
SVG.XLink.attrib ::= ε ;
 SVG.XLink.attrib ::= (xlink:type::"simple")? (xlink:href::SVG.URI.datatype)? (xlink:role::SVG.URI.datatype)? (xlink:arcrole::SVG.URI.datatype)? (xlink:title::string())? (xlink:show::"other")? (xlink:actuate::"onLoad")? SVG.XLink.extra.attrib ;
SVG.URI.datatype ::= string() ;
SVG.Lengths.datatype ::= string() ;
SVG.LanguageCodes.datatype ::= string() ;
SVG.title ::= title::(string() SVG.Core.attrib SVG.Style.attrib) ;
SVG.ID.datatype ::= string() ;
SVG.XLinkReplace.attrib ::= (xlink:type::"simple")? xlink:href::SVG.URI.datatype (xlink:role::SVG.URI.datatype)? (xlink:arcrole::SVG.URI.datatype)? (xlink:title::string())? (xlink:show::("new" | "replace"))? (xlink:actuate::"onRequest")? SVG.XLinkReplace.extra.attrib ;
SVG.ContentType.datatype ::= string() ;
SVG.FeatureList.datatype ::= string() ;
SVG.XLinkEmbed.attrib ::= (xlink:type::"simple")? xlink:href::SVG.URI.datatype (xlink:role::SVG.URI.datatype)? (xlink:arcrole::SVG.URI.datatype)? (xlink:title::string())? (xlink:show::"embed")? (xlink:actuate::"onLoad")? SVG.XLinkEmbed.extra.attrib ;
SVG.MediaDesc.datatype ::= string() ;
SVG.font-face-name ::= font-face-name::(ε SVG.Core.attrib (name::string())?) ;
SVG.ClassList.datatype ::= string() ;
SVG.StrokeDashArrayValue.datatype ::= string() ;
SVG.Length.datatype ::= string() ;
SVG.OpacityValue.datatype ::= string() ;
SVG.Script.datatype ::= string() ;
SVG.FontSizeValue.datatype ::= string() ;
SVG.StyleSheet.datatype ::= string() ;
SVG.PreserveAspectRatioSpec.datatype ::= string() ;
SVG.ClipFillRule.datatype ::= string() ;
SVG.Color.datatype ::= string() ;
SVG.metadata ::= metadata::(string() SVG.Core.attrib) ;
SVG.text ::= text::((string() | SVG.Description.class | SVG.Animation.class | SVG.Hyperlink.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib (x::SVG.Coordinates.datatype)? (y::SVG.Coordinates.datatype)? (rotate::SVG.Numbers.datatype)? (transform::SVG.TransformList.datatype)?) ;
SVG.hkern ::= hkern::(ε SVG.Core.attrib (u1::string())? (g1::string())? (u2::string())? (g2::string())? k::SVG.Number.datatype) ;
SVG.AnimationTiming.attrib ::= (begin::string())? (dur::string())? (end::string())? (min::string())? (max::string())? (restart::("always" | "never" | "whenNotActive"))? (repeatCount::string())? (repeatDur::string())? (fill::("remove" | "freeze"))? SVG.AnimationTiming.extra.attrib ;
SVG.foreignObject.class ::= string() ;
SVG.Numbers.datatype ::= string() ;
SVG.XLinkRequired.attrib ::= (xlink:type::"simple")? xlink:href::SVG.URI.datatype (xlink:role::SVG.URI.datatype)? (xlink:arcrole::SVG.URI.datatype)? (xlink:title::string())? (xlink:show::"other")? (xlink:actuate::"onLoad")? SVG.XLinkRequired.extra.attrib ;
SVG.Coordinate.datatype ::= string() ;
SVG.view ::= view::(SVG.Description.class* SVG.Core.attrib SVG.External.attrib (viewBox::SVG.ViewBoxSpec.datatype)? (preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype)? (zoomAndPan::("disable" | "magnify"))? (viewTarget::string())?) ;
SVG.animateMotion ::= animateMotion::(SVG.Description.class* SVG.mpath? SVG.Core.attrib SVG.Conditional.attrib SVG.AnimationEvents.attrib SVG.External.attrib SVG.Animation.attrib SVG.AnimationTiming.attrib SVG.AnimationAddtion.attrib (calcMode::("discrete" | "linear" | "paced" | "spline"))? (values::string())? (keyTimes::string())? (Splines::string())? (from::string())? (to::string())? (by::string())? (path::string())? (keyPoints::string())? (rotate::string())? (origin::string())?) ;
SVG.SVGColor.datatype ::= string() ;
SVG.StrokeDashOffsetValue.datatype ::= string() ;
SVG.style ::= style::(string() SVG.Core.attrib type::SVG.ContentType.datatype (media::SVG.MediaDesc.datatype)? (title::SVG.Text.datatype)?) ;
SVG.Points.datatype ::= string() ;
SVG.StrokeWidthValue.datatype ::= string() ;
SVG.LanguageCode.datatype ::= string() ;
SVG.glyph ::= glyph::(SVG.Description.class* SVG.Core.attrib SVG.Style.attrib (unicode::string())? (glyph-name::string())? (d::SVG.PathData.datatype)? (arabic-form::string())? (lang::SVG.LanguageCodes.datatype)? (horiz-adv-x::SVG.Number.datatype)?) ;
SVG.Coordinates.datatype ::= string() ;
SVG.AnimationValue.attrib ::= (calcMode::("discrete" | "linear" | "paced" | "spline"))? (values::string())? (keyTimes::string())? (keySplines::string())? (from::string())? (to::string())? (by::string())? SVG.AnimationValue.extra.attrib ;
--------------------markup::svg-furubayashi.bgf--------------------
SVG.Paint.datatype ::= string() ;
SVG.LinkTarget.datatype ::= string() ;
SVG.desc ::= desc::(string() SVG.Core.attrib SVG.Style.attrib) ;
SVG.ViewBoxSpec.datatype ::= string() ;
SVG.StrokeMiterLimitValue.datatype ::= string() ;
SVG.Boolean.datatype ::= string() ;
SVG.font-face ::= font-face::(SVG.Description.class* SVG.font-face-src? SVG.definition-src? SVG.Core.attrib (font-family::string())? (font-style::string())? (font-variant::string())? (font-weight::string())? (font-stretch::string())? (font-size::string())? (unicode-range::string())? (units-per-em::SVG.Number.datatype)? (panose-1::string())? (stemv::SVG.Number.datatype)? (stemh::SVG.Number.datatype)? (slope::SVG.Number.datatype)? (cap-height::SVG.Number.datatype)? (x-height::SVG.Number.datatype)? (accent-height::SVG.Number.datatype)? (ascent::SVG.Number.datatype)? (descent::SVG.Number.datatype)? (widths::string())? (bbox::string())? (ideographic::SVG.Number.datatype)? (alphabetic::SVG.Number.datatype)? (mathematical::SVG.Number.datatype)? (hanging::SVG.Number.datatype)? (v-ideographic::SVG.Number.datatype)? (v-alphabetic::SVG.Number.datatype)? (v-mathematical::SVG.Number.datatype)? (v-hanging::SVG.Number.datatype)? (underline-position::SVG.Number.datatype)? (underline-thickness::SVG.Number.datatype)? (strikethrough-position::SVG.Number.datatype)? (strikethrough-thickness::SVG.Number.datatype)? (overline-position::SVG.Number.datatype)? (overline-thickness::SVG.Number.datatype)?) ;
SVG.Lengths.datatype ::= string() ;
SVG.altGlyph ::= altGlyph::(string() SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.XLink.attrib SVG.External.attrib (x::SVG.Coordinates.datatype)? (y::SVG.Coordinates.datatype)? (dx::SVG.Lengths.datatype)? (dy::SVG.Lengths.datatype)? (glyphRef::string())? (format::string())? (rotate::SVG.Numbers.datatype)?) ;
SVG.feConvolveMatrix ::= feConvolveMatrix::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib order::SVG.NumberOptionalNumber.datatype kernelMatrix::string() (divisor::SVG.Number.datatype)? (bias::SVG.Number.datatype)? (targetX::SVG.Integer.datatype)? (targetY::SVG.Integer.datatype)? (edgeMode::("duplicate" | "wrap" | "none"))? (kernelUnitLength::SVG.NumberOptionalNumber.datatype)? (preserveAlpha::SVG.Boolean.datatype)?) ;
SVG.TextDecorationValue.datatype ::= string() ;
SVG.FeatureList.datatype ::= string() ;
SVG.XLinkEmbed.attrib ::= (xlink:type::"simple")? xlink:href::SVG.URI.datatype (xlink:role::SVG.URI.datatype)? (xlink:arcrole::SVG.URI.datatype)? (xlink:title::string())? (xlink:show::"embed")? (xlink:actuate::"onLoad")? SVG.XLinkEmbed.extra.attrib ;
SVG.font-face-name ::= font-face-name::(ε SVG.Core.attrib (name::string())?) ;
SVG.StrokeDashArrayValue.datatype ::= string() ;
SVG.feFuncR ::= feFuncR::((SVG.animate | SVG.set)* SVG.Core.attrib type::("identity" | "table" | "discrete" | "linear" | "gamma") (tableValues::string())? (slope::SVG.Number.datatype)? (intercept::SVG.Number.datatype)? (amplitude::SVG.Number.datatype)? (exponent::SVG.Number.datatype)? (offset::SVG.Number.datatype)?) ;
SVG.FilterValue.datatype ::= string() ;
SVG.OpacityValue.datatype ::= string() ;
SVG.vkern ::= vkern::(ε SVG.Core.attrib (u1::string())? (g1::string())? (u2::string())? (g2::string())? k::SVG.Number.datatype) ;
SVG.feComposite ::= feComposite::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib in2::string() (operator::("over" | "in" | "out" | "atop" | "xor" | "arithmetic"))? (k1::SVG.Number.datatype)? (k2::SVG.Number.datatype)? (k3::SVG.Number.datatype)? (k4::SVG.Number.datatype)?) ;
SVG.Script.datatype ::= string() ;
SVG.textPath ::= textPath::((string() | SVG.tspan | SVG.tref | SVG.altGlyph | SVG.animate | SVG.set | SVG.animateColor | SVG.Description.class | SVG.Hyperlink.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.XLinkRequired.attrib SVG.External.attrib (startOffset::SVG.Length.datatype)? (textLength::SVG.Length.datatype)? (lengthAdjust::("spacing" | "spacingAndGlyphs"))? (method::("align" | "stretch"))? (spacing::("auto" | "exact"))?) ;
SVG.feDisplacementMap ::= feDisplacementMap::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib in2::string() (scale::SVG.Number.datatype)? (xChannelSelector::("R" | "G" | "B" | "A"))? (yChannelSelector::("R" | "G" | "B" | "A"))?) ;
SVG.FontSizeValue.datatype ::= string() ;
SVG.StyleSheet.datatype ::= string() ;
SVG.feFuncG ::= feFuncG::((SVG.animate | SVG.set)* SVG.Core.attrib type::("identity" | "table" | "discrete" | "linear" | "gamma") (tableValues::string())? (slope::SVG.Number.datatype)? (intercept::SVG.Number.datatype)? (amplitude::SVG.Number.datatype)? (exponent::SVG.Number.datatype)? (offset::SVG.Number.datatype)?) ;
SVG.PreserveAspectRatioSpec.datatype ::= string() ;
SVG.MaskValue.datatype ::= string() ;
SVG.feFuncB ::= feFuncB::((SVG.animate | SVG.set)* SVG.Core.attrib type::("identity" | "table" | "discrete" | "linear" | "gamma") (tableValues::string())? (slope::SVG.Number.datatype)? (intercept::SVG.Number.datatype)? (amplitude::SVG.Number.datatype)? (exponent::SVG.Number.datatype)? (offset::SVG.Number.datatype)?) ;
SVG.hkern ::= hkern::(ε SVG.Core.attrib (u1::string())? (g1::string())? (u2::string())? (g2::string())? k::SVG.Number.datatype) ;
SVG.feFuncA ::= feFuncA::((SVG.animate | SVG.set)* SVG.Core.attrib type::("identity" | "table" | "discrete" | "linear" | "gamma") (tableValues::string())? (slope::SVG.Number.datatype)? (intercept::SVG.Number.datatype)? (amplitude::SVG.Number.datatype)? (exponent::SVG.Number.datatype)? (offset::SVG.Number.datatype)?) ;
SVG.AnimationTiming.attrib ::= (begin::string())? (dur::string())? (end::string())? (min::string())? (max::string())? (restart::("always" | "never" | "whenNotActive"))? (repeatCount::string())? (repeatDur::string())? (fill::("remove" | "freeze"))? SVG.AnimationTiming.extra.attrib ;
SVG.font-face-format ::= font-face-format::(ε SVG.Core.attrib (string::string())?) ;
SVG.FilterPrimitive.attrib ::= (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? (width::SVG.Length.datatype)? (height::SVG.Length.datatype)? (result::string())? SVG.FilterPrimitive.extra.attrib ;
SVG.foreignObject.class ::= string() ;
SVG.Coordinate.datatype ::= string() ;
SVG.animateMotion ::= animateMotion::(SVG.Description.class* SVG.mpath? SVG.Core.attrib SVG.Conditional.attrib SVG.AnimationEvents.attrib SVG.External.attrib SVG.Animation.attrib SVG.AnimationTiming.attrib SVG.AnimationAddtion.attrib (calcMode::("discrete" | "linear" | "paced" | "spline"))? (values::string())? (keyTimes::string())? (Splines::string())? (from::string())? (to::string())? (by::string())? (path::string())? (keyPoints::string())? (rotate::string())? (origin::string())?) ;
SVG.FontSizeAdjustValue.datatype ::= string() ;
SVG.SVGColor.datatype ::= string() ;
SVG.StrokeDashOffsetValue.datatype ::= string() ;
SVG.Points.datatype ::= string() ;
SVG.NumberOrPercentage.datatype ::= string() ;
SVG.CursorValue.datatype ::= string() ;
SVG.AnimationValue.attrib ::= (calcMode::("discrete" | "linear" | "paced" | "spline"))? (values::string())? (keyTimes::string())? (keySplines::string())? (from::string())? (to::string())? (by::string())? SVG.AnimationValue.extra.attrib ;
SVG.ClipPathValue.datatype ::= string() ;
SVG.ExtensionList.datatype ::= string() ;
SVG.FontFamilyValue.datatype ::= string() ;
SVG.ClipValue.datatype ::= string() ;
SVG.Text.datatype ::= string() ;
SVG.PathData.datatype ::= string() ;
SVG.Profile.attrib ::= ε ;
 SVG.Profile.attrib ::= (color-profile::string())? SVG.Profile.extra.attrib ;
SVG.set ::= set::(SVG.Description.class* SVG.Core.attrib SVG.Conditional.attrib SVG.AnimationEvents.attrib SVG.External.attrib SVG.Animation.attrib SVG.AnimationAttribute.attrib SVG.AnimationTiming.attrib (to::string())?) ;
SVG.a ::= a::((string() | SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.XLinkReplace.attrib SVG.External.attrib (transform::SVG.TransformList.datatype)? (target::SVG.LinkTarget.datatype)?) ;
SVG.AnimationAttribute.attrib ::= attributeName::string() (attributeType::string())? SVG.AnimationAttribute.extra.attrib ;
SVG.script ::= script::(string() SVG.Core.attrib SVG.XLink.attrib SVG.External.attrib type::SVG.ContentType.datatype) ;
SVG.GlyphOrientationHorizontalValue.datatype ::= string() ;
SVG.TransformList.datatype ::= string() ;
SVG.glyphRef ::= glyphRef::(ε SVG.Core.attrib SVG.Style.attrib SVG.Font.attrib SVG.XLink.attrib (x::SVG.Coordinates.datatype)? (y::SVG.Coordinates.datatype)? (dx::SVG.Lengths.datatype)? (dy::SVG.Lengths.datatype)? (glyphRef::string())? (format::string())?) ;
SVG.feMergeNode ::= feMergeNode::((SVG.animate | SVG.set)* SVG.Core.attrib (in::string())?) ;
SVG.URI.datatype ::= string() ;
SVG.XLink.attrib ::= ε ;
 SVG.XLink.attrib ::= (xlink:type::"simple")? (xlink:href::SVG.URI.datatype)? (xlink:role::SVG.URI.datatype)? (xlink:arcrole::SVG.URI.datatype)? (xlink:title::string())? (xlink:show::"other")? (xlink:actuate::"onLoad")? SVG.XLink.extra.attrib ;
SVG.title ::= title::(string() SVG.Core.attrib SVG.Style.attrib) ;
SVG.LanguageCodes.datatype ::= string() ;
SVG.ID.datatype ::= string() ;
SVG.XLinkReplace.attrib ::= (xlink:type::"simple")? xlink:href::SVG.URI.datatype (xlink:role::SVG.URI.datatype)? (xlink:arcrole::SVG.URI.datatype)? (xlink:title::string())? (xlink:show::("new" | "replace"))? (xlink:actuate::"onRequest")? SVG.XLinkReplace.extra.attrib ;
SVG.ContentType.datatype ::= string() ;
SVG.feBlend ::= feBlend::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib in2::string() (mode::("normal" | "multiply" | "screen" | "darken" | "lighten"))?) ;
SVG.MediaDesc.datatype ::= string() ;
SVG.ClassList.datatype ::= string() ;
SVG.MarkerValue.datatype ::= string() ;
SVG.marker ::= marker::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.External.attrib (refX::SVG.Coordinate.datatype)? (refY::SVG.Coordinate.datatype)? (markerUnits::("strokeWidth" | "userSpaceOnUse"))? (markerWidth::SVG.Length.datatype)? (markerHeight::SVG.Length.datatype)? (orient::string())? (viewBox::SVG.ViewBoxSpec.datatype)? (preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype)?) ;
SVG.KerningValue.datatype ::= string() ;
SVG.Length.datatype ::= string() ;
SVG.feColorMatrix ::= feColorMatrix::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib (type::("matrix" | "saturate" | "hueRotate" | "luminanceToAlpha"))? (values::string())?) ;
SVG.SpacingValue.datatype ::= string() ;
SVG.metadata ::= metadata::(string() SVG.Core.attrib) ;
SVG.ClipFillRule.datatype ::= string() ;
SVG.Color.datatype ::= string() ;
SVG.text ::= text::((string() | SVG.Description.class | SVG.Animation.class | SVG.TextContent.class | SVG.Hyperlink.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Text.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib (x::SVG.Coordinates.datatype)? (y::SVG.Coordinates.datatype)? (dx::SVG.Lengths.datatype)? (dy::SVG.Lengths.datatype)? (rotate::SVG.Numbers.datatype)? (textLength::SVG.Length.datatype)? (lengthAdjust::("spacing" | "spacingAndGlyphs"))? (transform::SVG.TransformList.datatype)?) ;
SVG.NumberOptionalNumber.datatype ::= string() ;
SVG.color-profile ::= color-profile::(SVG.Description.class* SVG.Core.attrib SVG.XLink.attrib (local::string())? name::string() (rendering-intent::("auto" | "perceptual" | "relative-colorimetric" | "saturation" | "absolute-colorimetric"))?) ;
SVG.tspan ::= tspan::((string() | SVG.tspan | SVG.tref | SVG.altGlyph | SVG.animate | SVG.set | SVG.animateColor | SVG.Description.class | SVG.Hyperlink.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib (x::SVG.Coordinates.datatype)? (y::SVG.Coordinates.datatype)? (dx::SVG.Lengths.datatype)? (dy::SVG.Lengths.datatype)? (rotate::SVG.Numbers.datatype)? (textLength::SVG.Length.datatype)? (lengthAdjust::("spacing" | "spacingAndGlyphs"))?) ;
SVG.BaselineShiftValue.datatype ::= string() ;
SVG.Numbers.datatype ::= string() ;
SVG.XLinkRequired.attrib ::= (xlink:type::"simple")? xlink:href::SVG.URI.datatype (xlink:role::SVG.URI.datatype)? (xlink:arcrole::SVG.URI.datatype)? (xlink:title::string())? (xlink:show::"other")? (xlink:actuate::"onLoad")? SVG.XLinkRequired.extra.attrib ;
SVG.view ::= view::(SVG.Description.class* SVG.Core.attrib SVG.External.attrib (viewBox::SVG.ViewBoxSpec.datatype)? (preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype)? (zoomAndPan::("disable" | "magnify"))? (viewTarget::string())?) ;
SVG.FilterPrimitiveWithIn.attrib ::= SVG.FilterPrimitive.attrib (in::string())? SVG.FilterPrimitiveWithIn.extra.attrib ;
SVG.style ::= style::(string() SVG.Core.attrib type::SVG.ContentType.datatype (media::SVG.MediaDesc.datatype)? (title::SVG.Text.datatype)?) ;
SVG.GlyphOrientationVerticalValue.datatype ::= string() ;
SVG.StrokeWidthValue.datatype ::= string() ;
SVG.LanguageCode.datatype ::= string() ;
SVG.glyph ::= glyph::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Style.attrib SVG.Presentation.attrib (unicode::string())? (glyph-name::string())? (d::SVG.PathData.datatype)? (orientation::string())? (arabic-form::string())? (lang::SVG.LanguageCodes.datatype)? (horiz-adv-x::SVG.Number.datatype)? (vert-origin-x::SVG.Number.datatype)? (vert-origin-y::SVG.Number.datatype)? (vert-adv-y::SVG.Number.datatype)?) ;
SVG.Coordinates.datatype ::= string() ;
--------------------markup::svg-palies.bgf--------------------
String ::= string() ;
--------------------markup::uiml.bgf--------------------
String ::= string() ;
--------------------markup::wiki-mediawiki-bnf.bgf--------------------
namespace ::= string() ;
--------------------markup::wiki-table.bgf--------------------
String ::= string() ;
--------------------fl::ecore.bgf--------------------
Argument ::= name::string() ;
Function ::= name::string() (argument::Argument)+ definition::Exp ;
--------------------fl::emf.bgf--------------------
Apply ::= name::string() (arg::Expr)+ ;
Argument ::= name::string() ;
Function ::= name::string() (arg::string())+ rhs::Expr ;
--------------------fl::jaxb.bgf--------------------
Apply ::= Name::string() Arg::(Expr*) ;
Argument ::= Name::string() ;
Function ::= Name::string() Arg::(string()*) Rhs::Expr ;
--------------------fl::om.bgf--------------------
Apply ::= name::string() args::(Expr*) ;
Argument ::= name::string() ;
Function ::= name::string() args::(string()*) rhs::Expr ;
--------------------fl::python.bgf--------------------
name ::= string() ;
--------------------fl::rascal-a.bgf--------------------
FLExpr ::= (binary::(e1::FLExpr op::FLOp e2::FLExpr)) | (apply::(f::string() vargs::(FLExpr*))) | (ifThenElse::(c::FLExpr t::FLExpr e::FLExpr)) | (argument::(a::string())) | (literal::(i::integer())) ;
FLFun ::= [fun] f::string() args::(str*) body::FLExpr ;
--------------------fl::xsd.bgf--------------------
Apply ::= name::string() (arg::Expr)+ ;
Argument ::= name::string() ;
Function ::= name::string() (arg::string())+ rhs::Expr ;
--------------------metasyntax::bnf-sdf.bgf--------------------
Terminal ::= string() ;
NonTerminal ::= "<" string() ">" ;
--------------------metasyntax::ebnf-bgf.bgf--------------------
selectable-expression ::= selector::string() "::" expression ;
terminal ::= start-terminal-metasymbol string() end-terminal-metasymbol ;
nonterminal ::= start-nonterminal-metasymbol string() end-nonterminal-metasymbol ;
production ::= label? string() defining-metasymbol right-hand-side terminator-metasymbol ;
label ::= "[" string() "]" ;
--------------------metasyntax::relaxng.bgf--------------------
any ::= (α | string() | any)* ;
define-element ::= define::(name::string() combine-att common-atts open-patterns) ;
name-class ::= (name::(common-atts string())) | (anyName::(common-atts except-name-class)) | (nsName::(common-atts except-name-class)) | (choice::(common-atts open-name-classes)) ;
common-atts ::= (ns::string())? (datatypeLibrary::string())? α* ;
grammar-content ::= other (start-element | define-element | (div::(common-atts grammar-content)) | (include::(href::string() common-atts include-content)))* ;
other ::= ((α | string() | any)*)* ;
pattern ::= (element::((name::string()) | open-name-class common-atts open-patterns)) | (attribute::(common-atts (name::string()) | open-name-class other pattern?)) | (group::(common-atts open-patterns)) | (interleave::(common-atts open-patterns)) | (choice::(common-atts open-patterns)) | (optional::(common-atts open-patterns)) | (zeroOrMore::(common-atts open-patterns)) | (oneOrMore::(common-atts open-patterns)) | (list::(common-atts open-patterns)) | (mixed::(common-atts open-patterns)) | (ref::(name::string() common-atts other)) | (parentRef::(name::string() common-atts other)) | (empty::(common-atts other)) | (text::(common-atts other)) | (value::((type::string())? common-atts string())) | (data::(type::string() common-atts other (param::(name::string() common-atts string()))* (except::(common-atts open-patterns))?)) | (notAllowed::(common-atts other)) | (externalRef::(href::string() common-atts other)) | (grammar::(common-atts grammar-content)) ;
--------------------metasyntax::ebnf-sdf.bgf--------------------
IdCon ::= string() ;
String ::= """ string() """ ;
--------------------metasyntax::xsd-guyard.bgf--------------------
String ::= string() ;
--------------------metasyntax::xsd-tennison.bgf--------------------
element ::= annotated fixedOrDefault ((nillable::("true" | "false")) | (block::blockSet))* ε | (type::string()) | localSimpleType | localComplexType identityConstraint* ;
complexRestriction ::= restriction::(annotated base::string() typeDefParticle? attrDecls) ;
rangeFacet ::= facet value::(integer() | string() | "UNKNOWN data") ;
field ::= field::(annotated xpath::string()) ;
documentation ::= documentation::(((source::string()) | (xml:lang::string()))* documentationContent) ;
openAttrs ::= string()* ;
importOptionalNamespace ::= import::(import (namespace::string())?) ;
attributeType ::= ε | (type::string()) | localSimpleType ;
localAttribute ::= attribute::(annotated (use::("optional" | "prohibited" | "required"))? fixedOrDefault (ref::string()) | (name::string() (form::formChoice)? attributeType)) ;
keybase ::= annotated name::string() selector field+ ;
annotation ::= annotation::(openAttrs (id::string())? (documentation | appinfo)*) ;
redefine ::= redefine::(openAttrs (id::string())? schemaLocation::string() (annotation | redefinable)*) ;
anyContent ::= (string() | (α* anyContent))* ;
topLevelAttribute ::= attribute::(annotated name::string() fixedOrDefault attributeType) ;
include ::= include::(annotated schemaLocation::string()) ;
import ::= annotated (schemaLocation::string())? ;
selector ::= selector::(annotated xpath::string()) ;
list ::= list::(annotated localSimpleType | (itemType::string())) ;
namedAttributeGroup ::= attributeGroup::(annotated name::string() attrDecls) ;
topLevelSimpleType ::= simpleType::(simpleType name::string() (final::simpleDerivationSet)?) ;
topLevelComplexType ::= complexType::(complexType name::string() ((abstract::("true" | "false")) | (block::derivationSet) | (final::derivationSet))*) ;
wildcard ::= annotated ((namespace::("##any" | "##other" | ((string() | "##targetNamespace" | "##local")*))) | (processContents::("lax" | "skip" | "strict")))* ;
extensionType ::= annotated base::string() ;
annotated ::= openAttrs (id::string())? annotation? ;
importRequiredNamespace ::= import::(import namespace::string()) ;
keyref ::= keyref::(keybase refer::string()) ;
groupRef ::= group::(annotated occurs ref::string()) ;
localElement ::= element::(occurs (ref::string()) | (element name::string() (form::formChoice)?)) ;
attributeGroupRef ::= attributeGroup::(annotated ref::string()) ;
union ::= union::(annotated (memberTypes::(string()+) localSimpleType*) | ((memberTypes::ε)? localSimpleType+)) ;
simpleRestrictionModel ::= (base::"xs:anySimpleType" rangeFacets digitFacets lengthFacets whiteSpace? enumeration* pattern*) | (base::"xs:string" lengthFacets whiteSpace? enumeration* pattern*) | (base::"xs:normalizedString" lengthFacets whiteSpaceReplaceOrCollapse? enumeration* pattern*) | (base::("xs:token" | "xs:language" | "xs:Name" | "xs:NCName" | "xs:ID" | "xs:IDREF" | "xs:IDREFS" | "xs:NMTOKEN" | "xs:NMTOKENS" | "xs:ENTITY" | "xs:ENTITIES" | "xs:hexBinary" | "xs:base64Binary" | "xs:anyURI" | "xs:QName" | "xs:NOTATION") lengthFacets commonFacets) | (base::"xs:boolean" whiteSpaceCollapse? pattern*) | (base::("xs:decimal" | "xs:integer" | "xs:nonPositiveInteger" | "xs:nonNegativeInteger" | "xs:positiveInteger" | "xs:negativeInteger" | "xs:unsignedLong" | "xs:unsignedInt" | "xs:unsignedShort" | "xs:unsignedByte" | "xs:long" | "xs:int" | "xs:short" | "xs:byte") digitFacets rangeFacets commonFacets) | (base::("xs:float" | "xs:double" | "xs:duration" | "xs:dateTime" | "xs:time" | "xs:date" | "xs:gYearMonth" | "xs:gYear" | "xs:gMonthDay" | "xs:gMonth" | "xs:gDay") rangeFacets commonFacets) | ((base::string()) | localSimpleType rangeFacets digitFacets lengthFacets whiteSpace? enumeration* pattern*) ;
appinfo ::= appinfo::((source::string())? appinfoContent) ;
topLevelElement ::= element::(element name::string() ((substitutionGroup::string()) | (abstract::("true" | "false")) | (final::derivationSet))*) ;
fixedOrDefault ::= ε | (fixed::string()) | (default::string()) ;
allModel ::= annotated (element::(((minOccurs::("0" | "1")) | (maxOccurs::("0" | "1")))* (ref::string()) | (element name::string() (form::formChoice)?)))* ;
namedGroup ::= group::(annotated name::string() (all::allModel) | (choice::simpleExplicitGroup) | (sequence::simpleExplicitGroup)) ;
noFixedFacet ::= annotated value::string() ;
notation ::= notation::(annotated name::string() public::string() (system::string())?) ;
--------------------metamodels::ACG.bgf--------------------
String ::= string() ;
--------------------metamodels::ACME.bgf--------------------
String ::= string() ;
--------------------metamodels::ASM.bgf--------------------
String ::= string() ;
--------------------metamodels::ATL.bgf--------------------
String ::= string() ;
--------------------metamodels::AWKPrograms.bgf--------------------
String ::= string() ;
--------------------metamodels::Agate.bgf--------------------
String ::= string() ;
--------------------metamodels::Amble.bgf--------------------
String ::= string() ;
--------------------metamodels::AntScripts.bgf--------------------
String ::= string() ;
--------------------metamodels::AnyLogic.bgf--------------------
String ::= string() ;
--------------------metamodels::Architectural_Description.bgf--------------------
String ::= string() ;
--------------------metamodels::AsmL.bgf--------------------
String ::= string() ;
--------------------metamodels::Automaton.bgf--------------------
String ::= string() ;
--------------------metamodels::BMM.bgf--------------------
String ::= string() ;
--------------------metamodels::BPMN.bgf--------------------
String ::= string() ;
--------------------metamodels::Book.bgf--------------------
String ::= string() ;
--------------------metamodels::Bossa.bgf--------------------
String ::= string() ;
--------------------metamodels::BusinessEntityModel.bgf--------------------
String ::= string() ;
--------------------metamodels::BusinessProcessModel.bgf--------------------
String ::= string() ;
--------------------metamodels::CADM.bgf--------------------
String ::= string() ;
--------------------metamodels::CDE.bgf--------------------
String ::= string() ;
--------------------metamodels::CFG.bgf--------------------
String ::= string() ;
--------------------metamodels::COBOL.bgf--------------------
String ::= string() ;
--------------------metamodels::CORBAComponent.bgf--------------------
String ::= string() ;
--------------------metamodels::CPL.bgf--------------------
String ::= string() ;
--------------------metamodels::CPR.bgf--------------------
String ::= string() ;
--------------------metamodels::CSM.bgf--------------------
String ::= string() ;
--------------------metamodels::CWMCore.bgf--------------------
String ::= string() ;
--------------------metamodels::CWMRelationalData.bgf--------------------
String ::= string() ;
--------------------metamodels::Class.bgf--------------------
String ::= string() ;
--------------------metamodels::ChocoModel.bgf--------------------
String ::= string() ;
--------------------metamodels::ClassicModels.bgf--------------------
String ::= string() ;
--------------------metamodels::Cocus.owl.bgf--------------------
String ::= string() ;
--------------------metamodels::DSL.bgf--------------------
String ::= string() ;
--------------------metamodels::CompanyStructure.bgf--------------------
String ::= string() ;
--------------------metamodels::ComponentUML.bgf--------------------
String ::= string() ;
--------------------metamodels::Conference.owl.bgf--------------------
String ::= string() ;
--------------------metamodels::Contact.bgf--------------------
String ::= string() ;
--------------------metamodels::ControllerUML.bgf--------------------
String ::= string() ;
--------------------metamodels::Cristal.bgf--------------------
String ::= string() ;
--------------------metamodels::DSLModel.bgf--------------------
String ::= string() ;
--------------------metamodels::DSLtools.bgf--------------------
String ::= string() ;
--------------------metamodels::DTD.bgf--------------------
String ::= string() ;
--------------------metamodels::DTMP.bgf--------------------
String ::= string() ;
--------------------metamodels::DXF.bgf--------------------
String ::= string() ;
--------------------metamodels::DeploymentReport.bgf--------------------
String ::= string() ;
--------------------metamodels::DiagramInterchange.bgf--------------------
String ::= string() ;
--------------------metamodels::DoDAF-OV5.bgf--------------------
String ::= string() ;
--------------------metamodels::DoDAF-SV4.bgf--------------------
String ::= string() ;
--------------------metamodels::DoDAF-SV5.bgf--------------------
String ::= string() ;
--------------------metamodels::DoDAF.bgf--------------------
String ::= string() ;
--------------------metamodels::DotNET_SystemReflection.bgf--------------------
String ::= string() ;
--------------------metamodels::EAI.bgf--------------------
String ::= string() ;
--------------------metamodels::EG.bgf--------------------
String ::= string() ;
--------------------metamodels::EQN.bgf--------------------
String ::= string() ;
--------------------metamodels::EXPRESS.bgf--------------------
String ::= string() ;
--------------------metamodels::EXPRESSb.bgf--------------------
String ::= string() ;
--------------------metamodels::EclipseLaunchConfigurations.bgf--------------------
String ::= string() ;
--------------------metamodels::EclipsePlugIn.bgf--------------------
String ::= string() ;
--------------------metamodels::Family.bgf--------------------
String ::= string() ;
--------------------metamodels::FeatureDiagrams.bgf--------------------
String ::= string() ;
--------------------metamodels::GAIA.bgf--------------------
String ::= string() ;
--------------------metamodels::FiniteStateMachine.bgf--------------------
String ::= string() ;
--------------------metamodels::FlatSignalFlow.bgf--------------------
String ::= string() ;
--------------------metamodels::GUI.bgf--------------------
String ::= string() ;
--------------------metamodels::Gantt.bgf--------------------
String ::= string() ;
--------------------metamodels::GenericEditor.bgf--------------------
String ::= string() ;
--------------------metamodels::GenericOutline.bgf--------------------
String ::= string() ;
--------------------metamodels::GeoTrans.bgf--------------------
String ::= string() ;
--------------------metamodels::Grafcet.bgf--------------------
String ::= string() ;
--------------------metamodels::HAL.bgf--------------------
String ::= string() ;
--------------------metamodels::HPROF.bgf--------------------
String ::= string() ;
--------------------metamodels::HierarchicalSignalFlow.bgf--------------------
String ::= string() ;
--------------------metamodels::HierarchicalStateMachine.bgf--------------------
String ::= string() ;
--------------------metamodels::HybridAutomata.bgf--------------------
String ::= string() ;
--------------------metamodels::IEEE1471ConceptualModel.bgf--------------------
String ::= string() ;
--------------------metamodels::IRL.bgf--------------------
String ::= string() ;
--------------------metamodels::IMSTransactionMessage.bgf--------------------
String ::= string() ;
--------------------metamodels::M.bgf--------------------
String ::= string() ;
--------------------metamodels::Jess.bgf--------------------
String ::= string() ;
--------------------metamodels::KDM.bgf--------------------
String ::= string() ;
--------------------metamodels::KDMSimplified.bgf--------------------
String ::= string() ;
--------------------metamodels::KM3.bgf--------------------
String ::= string() ;
--------------------metamodels::Klaper.bgf--------------------
String ::= string() ;
--------------------metamodels::LQN.bgf--------------------
String ::= string() ;
--------------------metamodels::LaTeX.bgf--------------------
String ::= string() ;
--------------------metamodels::MAS.bgf--------------------
String ::= string() ;
--------------------metamodels::Marte.bgf--------------------
String ::= string() ;
--------------------metamodels::METAH.bgf--------------------
String ::= string() ;
--------------------metamodels::MICRO.owl.bgf--------------------
String ::= string() ;
--------------------metamodels::MSOfficeExcel_SpreadsheetMLBasicDef.bgf--------------------
String ::= string() ;
--------------------metamodels::MSOfficeExcel_SpreadsheetMLPrintingSetup.bgf--------------------
String ::= string() ;
--------------------metamodels::MSOfficeExcel_SpreadsheetMLSimplified.bgf--------------------
String ::= string() ;
--------------------metamodels::MSOfficeExcel_SpreadsheetMLStyles.bgf--------------------
String ::= string() ;
--------------------metamodels::MSOfficeExcel_SpreadsheetMLWorkbookProp.bgf--------------------
String ::= string() ;
--------------------metamodels::MSOfficeExcel_SpreadsheetMLWorksheetOpt.bgf--------------------
String ::= string() ;
--------------------metamodels::MSOfficeWord_WordprocessingMLBasicDef.bgf--------------------
String ::= string() ;
--------------------metamodels::MSOfficeWord_WordprocessingMLSimplified.bgf--------------------
String ::= string() ;
--------------------metamodels::MSOfficeWord_WordprocessingMLStyles.bgf--------------------
String ::= string() ;
--------------------metamodels::MSOfficeWord_WordprocessingMLTableElts.bgf--------------------
String ::= string() ;
--------------------metamodels::MSProject.bgf--------------------
String ::= string() ;
--------------------metamodels::MSProject2.bgf--------------------
String ::= string() ;
--------------------metamodels::MTRANS.bgf--------------------
String ::= string() ;
--------------------metamodels::MSVisio_DatadiagramMLBasicDef.bgf--------------------
String ::= string() ;
--------------------metamodels::MSVisio_DatadiagramMLSimplified.bgf--------------------
String ::= string() ;
--------------------metamodels::MSVisio_DatadiagramMLTextFormat.bgf--------------------
String ::= string() ;
--------------------metamodels::MSVisio_DatadiagramMLXForm.bgf--------------------
String ::= string() ;
--------------------metamodels::Mantis.bgf--------------------
String ::= string() ;
--------------------metamodels::Matlab.bgf--------------------
String ::= string() ;
--------------------metamodels::Maude.bgf--------------------
String ::= string() ;
--------------------metamodels::MavenMaven.bgf--------------------
String ::= string() ;
--------------------metamodels::MavenProject.bgf--------------------
String ::= string() ;
--------------------metamodels::Measure.bgf--------------------
String ::= string() ;
--------------------metamodels::Metrics.bgf--------------------
String ::= string() ;
--------------------metamodels::MoMM.bgf--------------------
String ::= string() ;
--------------------metamodels::MiningMart_ViewCaseRepresentation.bgf--------------------
String ::= string() ;
--------------------metamodels::MoDAF-AV.bgf--------------------
String ::= string() ;
--------------------metamodels::MiningMart_ViewDataRepresentation.bgf--------------------
String ::= string() ;
--------------------metamodels::PASSI.bgf--------------------
String ::= string() ;
--------------------metamodels::MonitorProgram.bgf--------------------
String ::= string() ;
--------------------metamodels::MySQL.bgf--------------------
String ::= string() ;
--------------------metamodels::News.bgf--------------------
String ::= string() ;
--------------------metamodels::ODP-NV.bgf--------------------
String ::= string() ;
--------------------metamodels::OWL.bgf--------------------
String ::= string() ;
--------------------metamodels::OpenConf.owl.bgf--------------------
String ::= string() ;
--------------------metamodels::OpenQVT.bgf--------------------
String ::= string() ;
--------------------metamodels::PCS.owl.bgf--------------------
String ::= string() ;
--------------------metamodels::PDG.bgf--------------------
String ::= string() ;
--------------------metamodels::PRR.bgf--------------------
String ::= string() ;
--------------------metamodels::Parameters.bgf--------------------
String ::= string() ;
--------------------metamodels::PathExp.bgf--------------------
String ::= string() ;
--------------------metamodels::Perceptory.bgf--------------------
String ::= string() ;
--------------------metamodels::Person.bgf--------------------
String ::= string() ;
--------------------metamodels::PetriNet_extended.bgf--------------------
String ::= string() ;
--------------------metamodels::PluginEclipse.bgf--------------------
String ::= string() ;
--------------------metamodels::ProMarte.bgf--------------------
String ::= string() ;
--------------------metamodels::Problem.bgf--------------------
String ::= string() ;
--------------------metamodels::Program.bgf--------------------
String ::= string() ;
--------------------metamodels::Promenade.bgf--------------------
String ::= string() ;
--------------------metamodels::PtolemyII.bgf--------------------
String ::= string() ;
--------------------metamodels::Publication.bgf--------------------
String ::= string() ;
--------------------metamodels::QVT.bgf--------------------
String ::= string() ;
--------------------metamodels::QVT_SimpleRDBMS.bgf--------------------
String ::= string() ;
--------------------metamodels::QoS.bgf--------------------
String ::= string() ;
--------------------metamodels::QoS_Characteristic.bgf--------------------
String ::= string() ;
--------------------metamodels::RDFS.bgf--------------------
String ::= string() ;
--------------------metamodels::QoS_Profile.bgf--------------------
String ::= string() ;
--------------------metamodels::QoS_Statement.bgf--------------------
String ::= string() ;
--------------------metamodels::Relational.bgf--------------------
String ::= string() ;
--------------------metamodels::RelationalDBContent.bgf--------------------
String ::= string() ;
--------------------metamodels::RelationalDBSchema.bgf--------------------
String ::= string() ;
--------------------metamodels::Repository.bgf--------------------
String ::= string() ;
--------------------metamodels::Reqtify.bgf--------------------
String ::= string() ;
--------------------metamodels::RequisitePro.bgf--------------------
String ::= string() ;
--------------------metamodels::SBVRvoc.bgf--------------------
String ::= string() ;
--------------------metamodels::SCADE.bgf--------------------
String ::= string() ;
--------------------metamodels::SDM.bgf--------------------
String ::= string() ;
--------------------metamodels::SEE_Design.bgf--------------------
String ::= string() ;
--------------------metamodels::SPL.bgf--------------------
String ::= string() ;
--------------------metamodels::SQLDDL.bgf--------------------
String ::= string() ;
--------------------metamodels::SWRC.bgf--------------------
String ::= string() ;
--------------------metamodels::SQLDML.bgf--------------------
String ::= string() ;
--------------------metamodels::Scilab.bgf--------------------
String ::= string() ;
--------------------metamodels::SecureUML.bgf--------------------
String ::= string() ;
--------------------metamodels::Sharengo.bgf--------------------
String ::= string() ;
--------------------metamodels::SeminarSchedulingSystem.bgf--------------------
String ::= string() ;
--------------------metamodels::SignalFlow.bgf--------------------
String ::= string() ;
--------------------metamodels::SimpleAirlineDomain.bgf--------------------
String ::= string() ;
--------------------metamodels::SysML.bgf--------------------
String ::= string() ;
--------------------metamodels::SimpleSBVR.bgf--------------------
String ::= string() ;
--------------------metamodels::SimulinkStateFlow.bgf--------------------
String ::= string() ;
--------------------metamodels::SoftwareQualityControl.bgf--------------------
String ::= string() ;
--------------------metamodels::SyncCharts.bgf--------------------
String ::= string() ;
--------------------metamodels::Table.bgf--------------------
String ::= string() ;
--------------------metamodels::TextualPathExp.bgf--------------------
String ::= string() ;
--------------------metamodels::Trace.bgf--------------------
String ::= string() ;
--------------------metamodels::TroposGoalAndPlanConcepts.bgf--------------------
String ::= string() ;
--------------------metamodels::USECASE1.bgf--------------------
String ::= string() ;
--------------------metamodels::USECASE2.bgf--------------------
String ::= string() ;
--------------------metamodels::WSDL.bgf--------------------
String ::= string() ;
--------------------metamodels::UnifiedOntologyLanguage.bgf--------------------
String ::= string() ;
--------------------metamodels::UnixFS.bgf--------------------
String ::= string() ;
--------------------metamodels::UsiXML-task.bgf--------------------
String ::= string() ;
--------------------metamodels::WSLink.bgf--------------------
String ::= string() ;
--------------------metamodels::WTIP_SimpleClass.bgf--------------------
String ::= string() ;
--------------------metamodels::WTIP_SimpleRDBMS.bgf--------------------
String ::= string() ;
--------------------metamodels::WebApplications_AbstractModel.bgf--------------------
String ::= string() ;
--------------------metamodels::WfMC.bgf--------------------
String ::= string() ;
--------------------metamodels::WebApplications_ConceptualModel.bgf--------------------
String ::= string() ;
--------------------metamodels::XAML-Perspective.bgf--------------------
String ::= string() ;
--------------------metamodels::XAML-ResourceDictionary.bgf--------------------
String ::= string() ;
--------------------metamodels::XMorphLanguage_abstractSyntax.bgf--------------------
String ::= string() ;
--------------------metamodels::XPDL-1.14.bgf--------------------
String ::= string() ;
--------------------metamodels::XUL-Interactorl.bgf--------------------
String ::= string() ;
--------------------metamodels::bmmOmg.bgf--------------------
String ::= string() ;
--------------------metamodels::cmt.owl.bgf--------------------
String ::= string() ;
--------------------metamodels::confOf.owl.bgf--------------------
String ::= string() ;
--------------------metamodels::confious.owl.bgf--------------------
String ::= string() ;
--------------------metamodels::crs_dr.owl.bgf--------------------
String ::= string() ;
--------------------metamodels::deployment.bgf--------------------
String ::= string() ;
--------------------metamodels::edas.owl.bgf--------------------
String ::= string() ;
--------------------metamodels::ekaw.owl.bgf--------------------
String ::= string() ;
--------------------metamodels::iasted.owl.bgf--------------------
String ::= string() ;
--------------------metamodels::mlhim2.bgf--------------------
Ontology ::= (names::string())+ (internalVocabularies::string())+ (lookupTables::string())+ (terminologies::string())+ (generalEntries::OntologyEntry)+ ;
DvOrdinal ::= dv::α symbol::string() ;
DvMediaText ::= dv::string() ;
OntologyEntry ::= (contents::string())+ ;
MetaDataSet ::= name::string() (entries::MetaDataEntry)+ ;
MetaDataEntry ::= title::string() contents::string() ;
DvString ::= DvCodedString ;
 DvString ::= DvIdentifier ;
 DvString ::= uuid::α language::α dv::string() ;
--------------------metamodels::paperdyne.owl.bgf--------------------
String ::= string() ;
--------------------metamodels::sbvrEclipse.bgf--------------------
String ::= string() ;
--------------------metamodels::sbvrOMG.bgf--------------------
String ::= string() ;
--------------------metamodels::sigkdd.owl.bgf--------------------
String ::= string() ;
--------------------metamodels::useCase.bgf--------------------
String ::= string() ;
--------------------metamodels::MiningMart.bgf--------------------
String ::= string() ;
--------------------metamodels::logic-abstract.bgf--------------------
Formula ::= (true::ε) | (false::ε) | (not::(arg::Formula)) | (and::(lhs::Formula rhs::Formula)) | (and::(args::(Formula*))) | (or::(lhs::Formula rhs::Formula)) | (or::(args::(Formula*))) | (if::(lhs::Formula rhs::Formula)) | (fi::(lhs::Formula rhs::Formula)) | (iff::(lhs::Formula rhs::Formula)) ;
 Formula ::= id::(x::string()) ;
--------------------ocl::expressions.bgf--------------------
String ::= string() ;
--------------------ocl::operations.bgf--------------------
String ::= string() ;
--------------------ocl::types.bgf--------------------
String ::= string() ;
--------------------ocl::uml.bgf--------------------
String ::= string() ;
--------------------ocl::values.bgf--------------------
String ::= string() ;
--------------------slps::bgf-1.0-xsd.bgf--------------------
selector ::= string() ;
terminal ::= string() ;
nonterminal ::= string() ;
grammar ::= (name::string())? (root::nonterminal)* production* ;
label ::= string() ;
--------------------slps::bgf-2.0-xsd.bgf--------------------
selector ::= string() ;
terminal ::= string() ;
nonterminal ::= string() ;
label ::= string() ;
--------------------slps::bgf-2.1-xsd.bgf--------------------
selector ::= string() ;
terminal ::= string() ;
nonterminal ::= string() ;
label ::= string() ;
--------------------slps::btf.bgf--------------------
selector ::= string() ;
tree ::= (epsilon::ε) | (any::α) | (terminal::terminal) | (nonterminal::(production tree)) | (selectable::(selector::selector tree)) | (value::((int::integer()) | (string::string()))) | (sequence::(tree*)) | (choice::(expression tree)) | (optional::(tree?)) | (plus::(tree+)) | (star::(tree*)) ;
terminal ::= string() ;
nonterminal ::= string() ;
label ::= string() ;
--------------------slps::bgf-3.0-xsd.bgf--------------------
selector ::= string() ;
terminal ::= string() ;
nonterminal ::= string() ;
label ::= string() ;
--------------------slps::bgf-3.1-xsd.bgf--------------------
selector ::= string() ;
terminal ::= string() ;
nonterminal ::= string() ;
label ::= string() ;
--------------------slps::bgf-4.0-xsd.bgf--------------------
selector ::= string() ;
terminal ::= string() ;
nonterminal ::= string() ;
label ::= string() ;
--------------------slps::bgf-4.1-adt.bgf--------------------
BGFExpression ::= (epsilon::ε) | (empty::ε) | (val::(v::BGFValue)) | (anything::ε) | (terminal::(t::string())) | (nonterminal::(t::string())) | (selectable::(selector::string() expr::BGFExpression)) | (sequence::(exprs::(BGFExpression*))) | (choice::(exprs::(BGFExpression*))) | (marked::(expr::BGFExpression)) | (optional::(expr::BGFExpression)) | (plus::(expr::BGFExpression)) | (star::(expr::BGFExpression)) | (starsepplus::(expr::BGFExpression sep::BGFExpression)) | (starsepstar::(expr::BGFExpression sep::BGFExpression)) ;
--------------------slps::bgf-4.2-adt.bgf--------------------
BGFProduction ::= production::(label::string() lhs::string() rhs::BGFExpression) ;
BGFExpression ::= (epsilon::ε) | (empty::ε) | (val::(v::BGFValue)) | (anything::ε) | (terminal::(t::string())) | (nonterminal::(t::string())) | (selectable::(selector::string() expr::BGFExpression)) | (sequence::(exprs::(BGFExpression*))) | (choice::(exprs::(BGFExpression*))) | (marked::(expr::BGFExpression)) | (optional::(expr::BGFExpression)) | (plus::(expr::BGFExpression)) | (star::(expr::BGFExpression)) | (starsepplus::(expr::BGFExpression sep::BGFExpression)) | (starsepstar::(expr::BGFExpression sep::BGFExpression)) ;
BGFGrammar ::= grammar::(roots::(string()*) prods::(BGFProduction*)) ;
--------------------slps::bgf-4.3-adt.bgf--------------------
BGFProduction ::= production::(label::string() lhs::string() rhs::BGFExpression) ;
BGFExpression ::= (epsilon::ε) | (empty::ε) | (val::(v::BGFValue)) | (anything::ε) | (terminal::(t::string())) | (nonterminal::(t::string())) | (selectable::(selector::string() expr::BGFExpression)) | (sequence::(exprs::BGFExprList)) | (choice::(exprs::BGFExprList)) | (marked::(expr::BGFExpression)) | (optional::(expr::BGFExpression)) | (plus::(expr::BGFExpression)) | (star::(expr::BGFExpression)) | (seplistplus::(expr::BGFExpression sep::BGFExpression)) | (sepliststar::(expr::BGFExpression sep::BGFExpression)) ;
BGFGrammar ::= grammar::(roots::(string()*) prods::BGFProdList) ;
--------------------slps::bgf-5.0-adt.bgf--------------------
BGFProduction ::= production::(label::string() lhs::string() rhs::BGFExpression) ;
BGFExpression ::= (epsilon::ε) | (empty::ε) | (val::(v::BGFValue)) | (anything::ε) | (terminal::(t::string())) | (nonterminal::(t::string())) | (selectable::(selector::string() expr::BGFExpression)) | (sequence::(exprs::BGFExprList)) | (choice::(exprs::BGFExprList)) | (all::(exprs::BGFExprList)) | (marked::(expr::BGFExpression)) | (optional::(expr::BGFExpression)) | (not::(expr::BGFExpression)) | (plus::(expr::BGFExpression)) | (star::(expr::BGFExpression)) | (seplistplus::(expr::BGFExpression sep::BGFExpression)) | (sepliststar::(expr::BGFExpression sep::BGFExpression)) ;
BGFGrammar ::= grammar::(roots::(string()*) prods::BGFProdList) ;
--------------------slps::bgf-5.1-adt.bgf--------------------
BGFProduction ::= production::(label::string() lhs::string() rhs::BGFExpression) ;
BGFExpression ::= (epsilon::ε) | (empty::ε) | (val::(v::BGFValue)) | (anything::ε) | (terminal::(t::string())) | (nonterminal::(t::string())) | (selectable::(selector::string() expr::BGFExpression)) | (sequence::(exprs::BGFExprList)) | (choice::(exprs::BGFExprList)) | (allof::(exprs::BGFExprList)) | (marked::(expr::BGFExpression)) | (optional::(expr::BGFExpression)) | (not::(expr::BGFExpression)) | (plus::(expr::BGFExpression)) | (star::(expr::BGFExpression)) | (seplistplus::(expr::BGFExpression sep::BGFExpression)) | (sepliststar::(expr::BGFExpression sep::BGFExpression)) ;
BGFGrammar ::= grammar::(roots::(string()*) prods::BGFProdList) ;
--------------------slps::bgf-5.2-xsd.bgf--------------------
selector ::= string() ;
terminal ::= string() ;
nonterminal ::= string() ;
label ::= string() ;
--------------------slps::bgf-5.3-adt.bgf--------------------
BGFProduction ::= production::(label::string() lhs::string() rhs::BGFExpression) ;
BGFExpression ::= (epsilon::ε) | (empty::ε) | (val::(v::BGFValue)) | (anything::ε) | (terminal::(t::string())) | (nonterminal::(t::string())) | (selectable::(selector::string() expr::BGFExpression)) | (sequence::(exprs::BGFExprList)) | (choice::(exprs::BGFExprList)) | (allof::(exprs::BGFExprList)) | (marked::(expr::BGFExpression)) | (optional::(expr::BGFExpression)) | (not::(expr::BGFExpression)) | (plus::(expr::BGFExpression)) | (star::(expr::BGFExpression)) | (seplistplus::(expr::BGFExpression sep::BGFExpression)) | (sepliststar::(expr::BGFExpression sep::BGFExpression)) ;
BGFGrammar ::= grammar::(roots::(string()*) prods::BGFProdList) ;
--------------------slps::bgf-v1.0-xsd.bgf--------------------
selector ::= string() ;
terminal ::= string() ;
nonterminal ::= string() ;
grammar ::= (name::string())? (root::nonterminal)* production* ;
label ::= string() ;
--------------------slps::bgf-v2.0-xsd.bgf--------------------
selector ::= string() ;
terminal ::= string() ;
nonterminal ::= string() ;
label ::= string() ;
--------------------slps::bgf-v2.1-xsd.bgf--------------------
selector ::= string() ;
terminal ::= string() ;
nonterminal ::= string() ;
label ::= string() ;
--------------------slps::bgf-v3.0-xsd.bgf--------------------
selector ::= string() ;
terminal ::= string() ;
nonterminal ::= string() ;
label ::= string() ;
--------------------slps::bgf-v3.1-xsd.bgf--------------------
selector ::= string() ;
terminal ::= string() ;
nonterminal ::= string() ;
label ::= string() ;
--------------------slps::bgf-v4.0-xsd.bgf--------------------
selector ::= string() ;
terminal ::= string() ;
nonterminal ::= string() ;
label ::= string() ;
--------------------slps::bgf-v4.2-adt.bgf--------------------
BGFProduction ::= production::(label::string() lhs::string() rhs::BGFExpression) ;
BGFExpression ::= (epsilon::ε) | (empty::ε) | (val::(v::BGFValue)) | (anything::ε) | (terminal::(t::string())) | (nonterminal::(t::string())) | (selectable::(selector::string() expr::BGFExpression)) | (sequence::(exprs::(BGFExpression*))) | (choice::(exprs::(BGFExpression*))) | (marked::(expr::BGFExpression)) | (optional::(expr::BGFExpression)) | (plus::(expr::BGFExpression)) | (star::(expr::BGFExpression)) | (starsepplus::(expr::BGFExpression sep::BGFExpression)) | (starsepstar::(expr::BGFExpression sep::BGFExpression)) ;
BGFGrammar ::= grammar::(roots::(string()*) prods::(BGFProduction*)) ;
--------------------slps::bgf-v5.0-adt.bgf--------------------
BGFProduction ::= production::(label::string() lhs::string() rhs::BGFExpression) ;
BGFExpression ::= (epsilon::ε) | (empty::ε) | (val::(v::BGFValue)) | (anything::ε) | (terminal::(t::string())) | (nonterminal::(t::string())) | (selectable::(selector::string() expr::BGFExpression)) | (sequence::(exprs::BGFExprList)) | (choice::(exprs::BGFExprList)) | (all::(exprs::BGFExprList)) | (marked::(expr::BGFExpression)) | (optional::(expr::BGFExpression)) | (not::(expr::BGFExpression)) | (plus::(expr::BGFExpression)) | (star::(expr::BGFExpression)) | (seplistplus::(expr::BGFExpression sep::BGFExpression)) | (sepliststar::(expr::BGFExpression sep::BGFExpression)) ;
BGFGrammar ::= grammar::(roots::(string()*) prods::BGFProdList) ;
--------------------slps::bgf-v5.1-adt.bgf--------------------
BGFProduction ::= production::(label::string() lhs::string() rhs::BGFExpression) ;
BGFExpression ::= (epsilon::ε) | (empty::ε) | (val::(v::BGFValue)) | (anything::ε) | (terminal::(t::string())) | (nonterminal::(t::string())) | (selectable::(selector::string() expr::BGFExpression)) | (sequence::(exprs::BGFExprList)) | (choice::(exprs::BGFExprList)) | (allof::(exprs::BGFExprList)) | (marked::(expr::BGFExpression)) | (optional::(expr::BGFExpression)) | (not::(expr::BGFExpression)) | (plus::(expr::BGFExpression)) | (star::(expr::BGFExpression)) | (seplistplus::(expr::BGFExpression sep::BGFExpression)) | (sepliststar::(expr::BGFExpression sep::BGFExpression)) ;
BGFGrammar ::= grammar::(roots::(string()*) prods::BGFProdList) ;
--------------------slps::bgf-v5.2-xsd.bgf--------------------
selector ::= string() ;
terminal ::= string() ;
nonterminal ::= string() ;
label ::= string() ;
--------------------slps::cbgf-adt.bgf--------------------
CBGFCommand ::= (abridge_detour::(p::BGFProduction)) | (abstractize_concretize::(p::BGFProduction)) | (addH_removeH::(p::BGFProduction)) | (addV_removeV::(p::BGFProduction)) | (anonymize_deanonymize::(p::BGFProduction)) | (appear_disapper::(p::BGFProduction)) | (chain_unchain::(p::BGFProduction)) | (clone_equate::(x::string() y::string() w::XBGFScope)) | (concatT_splitT::(y::string() xs::(string()*) w::XBGFScope)) | (concretize_abstractize::(p::BGFProduction)) | (deanonymize_anonymize::(p::BGFProduction)) | (define_undefine::(ps::(BGFProduction*))) | (designate_unlabel::(p::BGFProduction)) | (detour_abridge::(p::BGFProduction)) | (deyaccify_yaccify::(ps::(BGFProduction*))) | (disappear_appear::(p::BGFProduction)) | (downgrade_upgrade::(p1::BGFProduction p2::BGFProduction)) | (eliminate_introduce::(ps::(BGFProduction*))) | (equate_clone::(x::string() y::string() w::XBGFScope)) | (extract_inline::(p::BGFProduction w::XBGFScope)) | (factor_factor::(e1::BGFExpression e2::BGFExpression w::XBGFScope)) | (fold_unfold::(x::string() w::XBGFScope)) | (horizontal_vertical::(w::XBGFScope)) | (inject_project::(p::BGFProduction)) | (inline_extract::(p::BGFProduction w::XBGFScope)) | (introduce_eliminate::(ps::(BGFProduction*))) | (iterate_assoc::(p::BGFProduction)) | (assoc_iterate::(p::BGFProduction)) | (massage_massage::(e1::BGFExpression e2::BGFExpression w::XBGFScope)) | (narrow_widen::(e1::BGFExpression e2::BGFExpression w::XBGFScope)) | (permute_permute::(p1::BGFProduction p2::BGFProduction)) | (project_inject::(p::BGFProduction)) | (redefine_redefine::(ps1::(BGFProduction*) ps2::(BGFProduction*))) | (removeH_addH::(p::BGFProduction)) | (removeV_addV::(p::BGFProduction)) | (renameL_renameL::(x::string() y::string())) | (renameN_renameN::(x::string() y::string())) | (renameS_renameS::(x::string() y::string() w::XBGFScope)) | (renameT_renameT::(x::string() y::string())) | (replace_replace::(e1::BGFExpression e2::BGFExpression w::XBGFScope)) | (reroot_reroot::(xs1::(string()*) xs2::(string()*))) | (splitN_unite::(x::string() ps::(BGFProduction*) w::XBGFScope)) | (splitT_concatT::(x::string() ys::(string()*) w::XBGFScope)) | (unchain_chain::(p::BGFProduction)) | (undefine_define::(ps::(BGFProduction*))) | (unfold_fold::(x::string() w::XBGFScope)) | (unite_splitN::(x::string() ps::(BGFProduction*) w::XBGFScope)) | (unlabel_designate::(p::BGFProduction)) | (upgrade_downgrade::(p1::BGFProduction p2::BGFProduction)) | (vertical_horizontal::(w::XBGFScope)) | (widen_narrow::(e1::BGFExpression e2::BGFExpression w::XBGFScope)) | (yaccify_deyaccify::(ps::(BGFProduction*))) ;
--------------------slps::cbgf-xsd.bgf--------------------
selector ::= string() ;
 selector ::= string() ;
redefine ::= production+ tag::string() ;
terminal ::= string() ;
 terminal ::= string() ;
define ::= production+ tag::string() ;
replace-replace ::= expression expression (in::scope)? tag::string() ;
project ::= production tag::string() ;
nonterminal ::= string() ;
 nonterminal ::= string() ;
replace ::= expression expression (in::scope)? tag::string() ;
undefine ::= (nonterminal::nonterminal)+ tag::string() ;
label ::= string() ;
 label ::= string() ;
inject ::= production tag::string() ;
--------------------slps::edd.bgf--------------------
config ::= ((start-grammar-symbol::string()) | (end-grammar-symbol::string()) | (line-continuation-symbol::string()) | (tabulation-symbol::string()) | (start-label-symbol::string()) | (end-label-symbol::string()) | (defining-symbol::string()) | (multiple-defining-symbol::string()) | (terminator-symbol::string()) | (definition-separator-symbol::string()) | (concatenate-symbol::string()) | (start-comment-symbol::string()) | (end-comment-symbol::string()) | (start-group-symbol::string()) | (end-group-symbol::string()) | (start-option-symbol::string()) | (end-option-symbol::string()) | (start-terminal-symbol::string()) | (end-terminal-symbol::string()) | (start-nonterminal-symbol::string()) | (end-nonterminal-symbol::string()) | (start-seplist-star-symbol::string()) | (end-seplist-star-symbol::string()) | (start-seplist-plus-symbol::string()) | (end-seplist-plus-symbol::string()) | (start-repetition-star-symbol::string()) | (end-repetition-star-symbol::string()) | (start-repetition-plus-symbol::string()) | (end-repetition-plus-symbol::string()) | (postfix-option-symbol::string()) | (postfix-repetition-star-symbol::string()) | (postfix-repetition-plus-symbol::string()) | (nonterminals-may-start-with::string()) | (nonterminals-may-contain::string()) | (nonterminal-if-contains::string()) | (terminal-if-undefined::((except::string())*)) | (nonterminal-if-defined::((except::string())*)) | (decompose-symbols::((except::string())*)) | (terminal-if-uppercase::α) | (terminal-if-lowercase::α) | (terminal-if-mixedcase::α) | (terminal-if-camelcase::α) | (nonterminal-if-uppercase::α) | (nonterminal-if-lowercase::α) | (nonterminal-if-mixedcase::α) | (nonterminal-if-camelcase::α) | (glue-nonalphanumeric-terminals::α) | (break-tokens-at-whitespace::α) | (disregard-labels::α) | (consider-indentation::α) | (ignore::(((newline::α) | (space::α) | (same-indentation::α) | (lines-containing::string()))+)) | (mask::(token::string() (terminal::string()) | (epsilon::α))))* ;
--------------------slps::ldf-Readable.bgf--------------------
selector ::= string() ;
named-link ::= title::string() version-or-edition? (uri::anyURI)? ;
terminal ::= string() ;
mixed ::= (α | string())* ;
nonterminal ::= string() ;
part-metadata ::= (id::ID)? part-role (title::string())? (author::person)* ;
version-or-edition ::= (version::string()) | (edition::string()) ;
subsection-metadata ::= (id::ID)? subsection-role type? (title::string())? (author::person)* ;
section-metadata ::= (id::ID)? section-role type? (title::string())? (author::person)* ;
person ::= name::string() (affiliation::string())? (email::string())? ;
label ::= string() ;
document-metadata ::= body? (number::string())? (author::person)* topic::string() status version-or-edition (previous::named-link)* date::timestamp ;
--------------------slps::ldf-v1.0-xsd.bgf--------------------
sectionType ::= title::string() content::contentType ;
reference ::= string() ;
document ::= title::string() author::string() abstract::string() content::contentType ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? ;
mixedType ::= (α | string())* ;
contentType ::= ((text::mixedType) | (grammar::(α language::string() (version::string())?)) | (sample::sampleType) | (runnable::runnableType))* (section::sectionType)* ;
--------------------slps::ldf-v10.0-xsd.bgf--------------------
SimpleTextElement ::= (empty::ε) | (text::mixedType) | (table::SimpleTable) | (list::SimpleList) | (formula::string()) | (sample::string()) | production ;
reference ::= string() ;
keyword ::= string() ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
titlePage ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
ListOfInternalLinks ::= (link::(text::string() (linktext::string())? reference::string()))+ ;
mixedType ::= (α | string())* ;
StructuredSection ::= title::string() (author::string())* StructuredSectionElement+ (id::string())? ;
SimpleSection ::= (title::string())? (author::string())* content::SimpleText (id::string())? ;
ListOfTerms ::= (title::string())? (author::string())* (term::(name::string() definition::SimpleText))+ (id::string())? ;
--------------------slps::ldf-v11.0-xsd.bgf--------------------
SimpleTextElement ::= (empty::ε) | (text::mixedType) | (figure::SimpleFigure) | (table::SimpleTable) | (list::SimpleList) | (formula::string()) | (sample::string()) | production ;
reference ::= string() ;
keyword ::= string() ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
titlePage ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
ListOfInternalLinks ::= (link::(text::string() (linktext::string())? reference::string()))+ ;
SimpleFigure ::= caption::string() type::string() file::string() (id::string())? ;
mixedType ::= (α | string())* ;
StructuredSection ::= title::string() (author::string())* StructuredSectionElement+ (id::string())? ;
SimpleSection ::= (title::string())? (author::string())* content::SimpleText (id::string())? ;
ListOfTerms ::= (title::string())? (author::string())* (term::(name::string() definition::SimpleText))+ (id::string())? ;
--------------------slps::ldf-v11.1-xsd.bgf--------------------
simpleTextElement ::= (empty::ε) | (text::mixedType) | (figure::simpleFigure) | (table::simpleTable) | (list::simpleList) | (formula::string()) | (sample::string()) | production ;
reference ::= string() ;
keyword ::= string() ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
listOfInternalLinks ::= (link::(text::string() (linkText::string())? reference::string()))+ ;
titlePage ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
simpleFigure ::= caption::string() type::string() file::string() (id::string())? ;
mixedType ::= (α | string())* ;
structuredSection ::= title::string() (author::string())* structuredSectionElement+ (id::string())? ;
simpleSection ::= (title::string())? (author::string())* content::simpleText (id::string())? ;
listOfTerms ::= (title::string())? (author::string())* (term::(name::string() definition::simpleText))+ (id::string())? ;
--------------------slps::ldf-v11.2-xsd.bgf--------------------
simpleTextElement ::= (empty::ε) | (text::mixedType) | (figure::simpleFigure) | (table::simpleTable) | (list::simpleList) | (formula::string()) | (sample::string()) | production ;
reference ::= string() ;
keyword ::= string() ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
listOfInternalLinks ::= (link::(text::string() (linkText::string())? reference::string()))+ ;
titlePage ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
simpleFigure ::= caption::string() type::string() file::string() (id::string())? ;
mixedType ::= (α | string())* ;
structuredSection ::= title::string() (author::string())* structuredSectionElement+ (id::string())? ;
simpleSection ::= (title::string())? (author::string())* content::simpleText (id::string())? ;
listOfTerms ::= (title::string())? (author::string())* (term::(name::string() definition::simpleText))+ (id::string())? ;
--------------------slps::ldf-v12.0-xsd.bgf--------------------
simpleTextElement ::= (empty::ε) | (text::mixedType) | (figure::simpleFigure) | (table::simpleTable) | (list::simpleList) | (formula::string()) | (sample::string()) | production ;
reference ::= string() ;
keyword ::= string() ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
listOfInternalLinks ::= (link::(text::string() (linkText::string())? reference::string()))+ ;
titlePage ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
simpleFigure ::= caption::string() type::string() file::string() (id::string())? ;
mixedType ::= (α | string())* ;
structuredSection ::= title::string() (author::string())* structuredSectionElement+ (id::string())? ;
simpleSection ::= (title::string())? (author::string())* content::simpleText (id::string())? ;
listOfTerms ::= (title::string())? (author::string())* (term::(name::string() definition::simpleText))+ (id::string())? ;
--------------------slps::ldf-v13.0-xsd.bgf--------------------
simpleTextElement ::= (empty::ε) | (text::mixedType) | (figure::simpleFigure) | (table::simpleTable) | (list::simpleList) | (formula::string()) | (sample::string()) | production ;
reference ::= string() ;
keyword ::= string() ;
structuredSectionElement ::= (placeholder::generated) | normative | informative | production | (references::listOfInternalLinks) | (section::simpleSection) | (subtopic::structuredSection) | (value::(key::string() data::string())) ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
listOfInternalLinks ::= (link::(text::string() (linkText::string())? reference::string()))+ ;
titlePage ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
simpleFigure ::= caption::string() type::string() file::string() (id::string())? ;
mixedType ::= (α | string())* ;
structuredSection ::= title::string() (author::string())* structuredSectionElement+ (id::string())? ;
simpleSection ::= (title::string())? (author::string())* content::simpleText (id::string())? ;
listOfTerms ::= (title::string())? (author::string())* (term::(name::string() definition::simpleText))+ (id::string())? ;
--------------------slps::ldf-v13.1-xsd.bgf--------------------
simpleTextElement ::= (empty::ε) | (text::mixedType) | (figure::simpleFigure) | (table::simpleTable) | (list::simpleList) | (formula::string()) | (sample::string()) | production ;
reference ::= string() ;
keyword ::= string() ;
structuredSectionElement ::= (placeholder::generated) | normative | informative | production | (references::listOfInternalLinks) | (section::simpleSection) | (subtopic::structuredSection) | (value::(key::string() data::string())) ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
listOfInternalLinks ::= (link::(text::string() (linkText::string())? reference::string()))+ ;
titlePage ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
simpleFigure ::= caption::string() type::string() file::string() (id::string())? ;
mixedType ::= (α | string())* ;
structuredSection ::= title::string() (author::string())* structuredSectionElement+ (id::string())? ;
simpleSection ::= (title::string())? (author::string())* content::simpleText (id::string())? ;
listOfTerms ::= (title::string())? (author::string())* (term::(name::string() definition::simpleText))+ (id::string())? ;
--------------------slps::ldf-v14.0-xsd.bgf--------------------
code ::= string() ;
simpleTextElement ::= (empty::ε) | (text::mixedType) | (figure::simpleFigure) | (table::simpleTable) | (list::simpleList) | (formula::string()) | (sample::string()) | production ;
reference ::= string() ;
link ::= (text::string())? reference::string() ;
keyword ::= string() ;
structuredSectionElement ::= (placeholder::generated) | normative | informative | production | (references::simpleList) | (section::simpleSection) | (subtopic::structuredSection) | (value::(key::string() data::string())) ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
titlePage ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
simpleFigure ::= caption::string() type::string() file::string() (id::string())? ;
mixedType ::= (α | string())* ;
structuredSection ::= title::string() (author::string())* structuredSectionElement+ (id::string())? ;
simpleSection ::= (title::string())? (author::string())* content::simpleText (id::string())? ;
listOfTerms ::= (title::string())? (author::string())* (term::(name::string() definition::simpleText))+ (id::string())? ;
--------------------slps::ldf-v15.0-xsd.bgf--------------------
code ::= string() ;
simpleTextElement ::= (empty::ε) | (text::mixedType) | (figure::simpleFigure) | (table::simpleTable) | (list::simpleList) | (formula::(((math::anyMath) | (mfenced::anyMath) | (mtext::anyMath) | (msub::anyMath) | (msup::anyMath) | (mrow::anyMath) | (mi::anyMath) | (mo::anyMath) | (varepsilon::α))+)) | (sample::string()) | production ;
reference ::= string() ;
link ::= (text::string())? reference::string() ;
keyword ::= string() ;
structuredSectionElement ::= (placeholder::generated) | normative | informative | production | (references::simpleList) | (section::simpleSection) | (subtopic::structuredSection) | (value::(key::string() data::string())) ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
titlePage ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
simpleFigure ::= caption::string() type::string() file::string() (id::string())? ;
mixedType ::= (α | string())* ;
anyMath ::= (α | string())* ;
structuredSection ::= title::string() (author::string())* structuredSectionElement+ (id::string())? ;
simpleSection ::= (title::string())? (author::string())* content::simpleText (id::string())? ;
listOfTerms ::= (title::string())? (author::string())* (term::(name::string() definition::simpleText))+ (id::string())? ;
--------------------slps::ldf-v15.1-xsd.bgf--------------------
code ::= string() ;
simpleTextElement ::= (empty::ε) | (text::mixedType) | (figure::simpleFigure) | (table::simpleTable) | (list::simpleList) | (formula::(((math::anyMath) | (mfenced::anyMath) | (mtext::anyMath) | (msub::anyMath) | (msup::anyMath) | (mrow::anyMath) | (mi::anyMath) | (mo::anyMath) | (varepsilon::α))+)) | (sample::((α | string())* src::string())) | production ;
reference ::= string() ;
link ::= (text::string())? reference::string() ;
keyword ::= string() ;
structuredSectionElement ::= (placeholder::generated) | normative | informative | production | (references::simpleList) | (section::simpleSection) | (subtopic::structuredSection) | (value::(key::string() data::string())) ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
titlePage ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
simpleFigure ::= caption::string() type::string() file::string() (id::string())? ;
mixedType ::= (α | string())* ;
anyMath ::= (α | string())* ;
structuredSection ::= title::string() (author::string())* structuredSectionElement+ (id::string())? ;
simpleSection ::= (title::string())? (author::string())* content::simpleText (id::string())? ;
listOfTerms ::= (title::string())? (author::string())* (term::(name::string() definition::simpleText))+ (id::string())? ;
--------------------slps::ldf-v16.0-xsd.bgf--------------------
code ::= string() ;
simpleTextElement ::= (empty::ε) | (text::mixedType) | (figure::simpleFigure) | (table::simpleTable) | (list::simpleList) | (formula::(((math::anyMath) | (mfenced::anyMath) | (mtext::anyMath) | (msub::anyMath) | (msup::anyMath) | (mrow::anyMath) | (mi::anyMath) | (mo::anyMath) | (varepsilon::α))+)) | (sample::((α | string())* src::string())) | production ;
reference ::= string() ;
link ::= (text::string())? reference::string() ;
keyword ::= string() ;
structuredSectionElement ::= (placeholder::generated) | normative | informative | production | (references::simpleList) | (section::simpleSection) | (subtopic::structuredSection) | (value::(key::string() data::string())) ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
titlePage ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
simpleFigure ::= caption::string() type::string() file::string() (id::string())? ;
mixedType ::= (α | string())* ;
anyMath ::= (α | string())* ;
structuredSection ::= title::string() (author::string())* structuredSectionElement+ (id::string())? ;
simpleSection ::= (title::string())? (author::string())* content::simpleText (id::string())? ;
listOfTerms ::= (title::string())? (author::string())* (term::(name::string() definition::simpleText))+ (id::string())? ;
--------------------slps::ldf-v17.0-xsd.bgf--------------------
code ::= string() ;
simpleTextElement ::= (empty::ε) | (text::mixedType) | (figure::simpleFigure) | (table::simpleTable) | (list::simpleList) | (formula::(((math::anyMath) | (mfenced::anyMath) | (mtext::anyMath) | (msub::anyMath) | (msup::anyMath) | (mrow::anyMath) | (mi::anyMath) | (mo::anyMath) | (varepsilon::α))+)) | (sample::((α | string())* src::string())) | production ;
reference ::= string() ;
link ::= (text::string())? reference::string() ;
keyword ::= string() ;
structuredSectionElement ::= (placeholder::generated) | normative | informative | production | (references::simpleList) | (section::simpleSection) | (subtopic::structuredSection) | (value::(key::string() data::string())) ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
titlePage ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
simpleFigure ::= (shortcaption::string())? caption::string() (source::(type::figureType (localfile::string()) | (url::string())))+ (id::string())? ;
mixedType ::= (α | string())* ;
anyMath ::= (α | string())* ;
structuredSection ::= title::string() (author::string())* structuredSectionElement+ (id::string())? ;
simpleSection ::= (title::string())? (author::string())* content::simpleText (id::string())? ;
listOfTerms ::= (title::string())? (author::string())* (term::(name::string() definition::simpleText))+ (id::string())? ;
--------------------slps::ldf-v18.0-xsd.bgf--------------------
code ::= string() ;
simpleTextElement ::= (empty::ε) | (text::mixedType) | (figure::simpleFigure) | (table::simpleTable) | (list::simpleList) | (formula::(((math::anyMath) | (mfenced::anyMath) | (mtext::anyMath) | (msub::anyMath) | (msup::anyMath) | (mrow::anyMath) | (mi::anyMath) | (mo::anyMath) | (varepsilon::α))+)) | (sample::((α | string())* src::string())) | production ;
link ::= (text::string())? reference::string() ;
keyword ::= string() ;
structuredSectionElement ::= (placeholder::generated) | normative | informative | production | (references::simpleList) | (section::simpleSection) | (subtopic::structuredSection) | (value::(key::string() data::string())) ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
titlePage ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
simpleFigure ::= (shortcaption::string())? caption::string() (source::(type::figureType (localfile::string()) | (url::string())))+ (id::string())? ;
mixedType ::= (α | string())* ;
anyMath ::= (α | string())* ;
structuredSection ::= title::string() (author::string())* structuredSectionElement+ (id::string())? ;
simpleSection ::= (title::string())? (author::string())* content::simpleText (id::string())? ;
listOfTerms ::= (title::string())? (author::string())* (term::(name::string() definition::simpleText))+ (id::string())? ;
--------------------slps::ldf-v18.1-xsd.bgf--------------------
code ::= string() ;
simpleTextElement ::= (empty::ε) | (text::mixedType) | (figure::simpleFigure) | (table::simpleTable) | (list::simpleList) | (formula::(((math::anyMath) | (mfenced::anyMath) | (mtext::anyMath) | (msub::anyMath) | (msup::anyMath) | (mrow::anyMath) | (mi::anyMath) | (mo::anyMath) | (varepsilon::α))+)) | (sample::((α | string())* src::string())) | production ;
link ::= (text::string())? (reference::string()) | (external::string()) ;
keyword ::= string() ;
structuredSectionElement ::= (placeholder::generated) | normative | informative | production | (references::simpleList) | (section::simpleSection) | (subtopic::structuredSection) | (value::(key::string() data::string())) ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
titlePage ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
simpleFigure ::= (shortcaption::string())? caption::string() (source::(type::figureType (localfile::string()) | (url::string())))+ (id::string())? ;
mixedType ::= (α | string())* ;
anyMath ::= (α | string())* ;
structuredSection ::= title::string() (author::string())* structuredSectionElement+ (id::string())? ;
simpleSection ::= (title::string())? (author::string())* content::simpleText (id::string())? ;
listOfTerms ::= (title::string())? (author::string())* (term::(name::string() definition::simpleText))+ (id::string())? ;
--------------------slps::ldf-v19.0-xsd.bgf--------------------
code ::= string() ;
part-metainfo ::= part-role::part-role (title::string())? (author::string())* (id::string())? ;
mixed-type ::= (α | string())* ;
figure-metainfo ::= (short-caption::string())? caption::string() (id::string())? ;
text-element ::= (empty::ε) | (code::string()) | (text::mixed-type) | (figure::figure) | (table::table) | (list::list) | (formula::(((math::anyMath) | (mfenced::anyMath) | (mtext::anyMath) | (msub::anyMath) | (msup::anyMath) | (mrow::anyMath) | (mi::anyMath) | (mo::anyMath) | (varepsilon::α))+)) | (sample::((α | string())* source::string())) | production ;
term ::= name::string() definition::textual-content ;
link ::= (text::string())? (reference::string()) | (external::string()) ;
list-section-metainfo ::= list-section-role::list-section-role (title::string())? (author::string())* (id::string())? ;
keyword ::= string() ;
structured-section-element ::= (subtopic::structured-section) | (references::list) | (placeholder::placeholder) | (value::(key::string() data::string())) | (element-role simple-section::simple-section) ;
structured-section-metainfo ::= title::string() (author::string())* (id::string())? ;
previous ::= title::string() (version::string()) | (edition::string()) (uri::string())? ;
simple-section-metainfo ::= simple-section-role::simple-section-role (title::string())? (author::string())* (id::string())? ;
document-metainfo ::= (body::body number::string()) | ((author::string())+) topic::string() status::status (version::string()) | (edition::string()) (previous::previous)* date::string() ;
anyMath ::= (α | string())* ;
figure-source ::= type::figure-type (local-file::string()) | (uri::string()) ;
lexical-section-metainfo ::= lexical-section-role::lexical-section-role (title::string())? (author::string())* (id::string())? ;
--------------------slps::ldf-v2.0-xsd.bgf--------------------
sectionType ::= title::string() content::contentType ;
document ::= title::string() author::string() abstract::string() content::contentType ;
reference ::= string() ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? ;
mixedType ::= (α | string())* ;
contentType ::= ((text::mixedType) | (grammar::(α language::string() (version::string())?)) | (sample::sampleType) | (runnable::runnableType))* (section::sectionType)* ;
--------------------slps::ldf-v2.1-xsd.bgf--------------------
sectionType ::= title::string() content::contentType ;
document ::= title::string() author::string() abstract::string() content::contentType ;
reference ::= string() ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
mixedType ::= (α | string())* ;
contentType ::= ((text::mixedType) | (grammar::(α language::string() (version::string())?)) | (sample::sampleType) | (runnable::runnableType))* (section::sectionType)* ;
--------------------slps::ldf-v20.0-xsd.bgf--------------------
code ::= string() ;
mixed-type ::= (α | string())* ;
text-element ::= (empty::ε) | (code::string()) | (text::mixed-type) | figure | table | (list::list) | (formula::(((math::anyMath) | (mfenced::anyMath) | (mtext::anyMath) | (msub::anyMath) | (msup::anyMath) | (mrow::anyMath) | (mi::anyMath) | (mo::anyMath) | (varepsilon::α))+)) | (sample::((α | string())* source::string())) | production ;
term ::= name::string() definition::textual-content ;
link ::= (text::string())? (reference::string()) | (external::string()) ;
keyword ::= string() ;
structured-section-element ::= (subtopic::structured-section) | (references::list) | placeholder | (value::(key::string() data::string())) | ((normative-role | informative-role)? simple-section) ;
previous ::= title::string() (version::string()) | (edition::string()) (uri::string())? ;
anyMath ::= (α | string())* ;
figure-source ::= type::figure-type (local-file::string()) | (uri::string()) ;
title-page ::= (body number::string())? metainfo status (version::string()) | (edition::string()) previous* date::string() ;
metainfo ::= (id::string())? (title::string())? (author::string())* ;
--------------------slps::ldf-v20.1-xsd.bgf--------------------
code ::= string() ;
mixed-type ::= (α | string())* ;
text-element ::= (empty::ε) | (code::string()) | (text::mixed-type) | figure | table | (list::list) | (formula::(((math::anyMath) | (mfenced::anyMath) | (mtext::anyMath) | (msub::anyMath) | (msup::anyMath) | (mrow::anyMath) | (mi::anyMath) | (mo::anyMath) | (varepsilon::α))+)) | (sample::((α | string())* source::string())) | production ;
term ::= name::string() definition::textual-content ;
link ::= (text::string())? (reference::string()) | (external::string()) ;
keyword ::= string() ;
structured-section-element ::= (subtopic::structured-section) | (references::list) | placeholder | (value::(key::string() data::string())) | ((normative-role | informative-role)? simple-section) ;
previous ::= title::string() ((version::string()) | (edition::string()))? (uri::string())? ;
anyMath ::= (α | string())* ;
figure-source ::= type::figure-type (local-file::string()) | (uri::string()) ;
title-page ::= (body number::string())? metainfo status (version::string()) | (edition::string()) previous* date::string() ;
metainfo ::= (id::string())? (title::string())? (author::string())* ;
--------------------slps::ldf-v21.0-xsd.bgf--------------------
code ::= string() ;
mixed-type ::= (α | string())* ;
text-element ::= (empty::ε) | code | (text::mixed-type) | figure | table | (list::list) | (formula::(((math::anyMath) | (mfenced::anyMath) | (mtext::anyMath) | (msub::anyMath) | (msup::anyMath) | (mrow::anyMath) | (mi::anyMath) | (mo::anyMath) | (varepsilon::α))+)) | (sample::((α | string())* source::string())) | production ;
term ::= name::string() definition::textual-content ;
link ::= (text::string())? (reference::string()) | (external::string()) ;
keyword ::= string() ;
structured-section-element ::= (subtopic::structured-section) | (references::list) | placeholder | (value::(key::string() data::string())) | ((normative-role | informative-role)? simple-section) ;
previous ::= title::string() ((version::string()) | (edition::string()))? (uri::string())? ;
anchor ::= id::string() ;
anyMath ::= (α | string())* ;
figure-source ::= type::figure-type (local-file::string()) | (uri::string()) ;
title-page ::= (body number::string())? metainfo status (version::string()) | (edition::string()) previous* date::string() ;
metainfo ::= (id::string())? (title::string())? (author::string())* ;
--------------------slps::ldf-v21.1-xsd.bgf--------------------
code ::= string() ;
mixed-type ::= (α | string())* ;
text-element ::= (empty::ε) | code | (text::mixed-type) | figure | table | (list::list) | (formula::(((math::anyMath) | (mfenced::anyMath) | (mtext::anyMath) | (msub::anyMath) | (msup::anyMath) | (mrow::anyMath) | (mi::anyMath) | (mo::anyMath) | (varepsilon::α))+)) | (sample::((α | string())* source::string())) ;
term ::= name::string() definition::textual-content ;
link ::= (text::string())? (reference::string()) | (external::string()) ;
keyword ::= string() ;
structured-section-element ::= (subtopic::structured-section) | (references::list) | placeholder | (value::(key::string() data::string())) | ((normative-role | informative-role)? simple-section) ;
previous ::= title::string() ((version::string()) | (edition::string()))? (uri::string())? ;
anchor ::= id::string() ;
anyMath ::= (α | string())* ;
figure-source ::= type::figure-type (local-file::string()) | (uri::string()) ;
title-page ::= (body number::string())? metainfo status (version::string()) | (edition::string()) previous* date::string() ;
metainfo ::= (id::string())? (title::string())? (author::string())* ;
--------------------slps::ldf-v22.0-xsd.bgf--------------------
code ::= string() ;
mixed-type ::= (α | string())* ;
text-element ::= (empty::ε) | code | (text::mixed-type) | figure | table | (list::list-type) | (formula::(((math::anyMath) | (mfenced::anyMath) | (mtext::anyMath) | (msub::anyMath) | (msup::anyMath) | (mrow::anyMath) | (mi::anyMath) | (mo::anyMath) | (varepsilon::α))+)) | (sample::((α | string())* source::string())) ;
term ::= name::string() definition::textual-content ;
document ::= metadata::((body::((ansi::ε) | (ecma::ε) | (ieee::ε) | (iso::ε) | (iso/iet::ε) | (itu::ε) | (iec::ε) | (ietf::ε) | (oasis::ε) | (omg::ε) | (wsa::ε) | (w3c::ε)))? (number::string())? (author::person)* topic::string() status::((unknown::ε) | (draft::ε) | (candidate::ε) | (proposed::ε) | (approved::ε) | (revised::ε) | (obsolete::ε) | (withdrawn::ε) | (collection::ε) | (trial::ε) | (errata::ε) | (report::ε)) (version::string()) | (edition::string()) (previous::title-ve-uri)* date::string()) (part::part-type)+ ;
link ::= (text::string())? (nonterminal::string()) | (reference::string()) | (external::string()) ;
keyword ::= string() ;
structured-section-element ::= (subtopic::structured-section) | (references::list-type) | placeholder | (value::(key::string() data::string())) | ((normative-role | informative-role)? simple-section) ;
anchor ::= id::string() ;
person ::= name::string() (affiliation::string())? (email::string())? ;
anyMath ::= (α | string())* ;
figure-source ::= type::figure-type (local-file::string()) | (uri::string()) ;
part-type ::= metadata::((id::string())? role::((front-matter::ε) | (core-part::ε) | (back-matter::ε) | (annex::ε)) (title::string())? (author::person)*) (section::section-type)+ ;
metainfo ::= (id::string())? (title::string())? (author::string())* ;
title-ve-uri ::= title::string() ((version::string()) | (edition::string()))? (uri::string())? ;
subsection-type ::= metadata::((id::string())? role::((synopsis::ε) | (description::ε) | (syntax::ε) | (constraints::ε) | (relationship::ε) | (semantics::ε) | (default::ε) | (rationale::ε) | (example::ε) | (update::ε) | (subtopic::ε) | (section::ε)) (type::((normative::ε) | (informative::ε)))? (title::string())? (author::person)*) (content::(content-content+)) | (placeholder::α) | ((subsection::subsection-type)+) ;
section-type ::= metadata::((id::string())? role::((abstract::ε) | (conformance::ε) | (compatibility::ε) | (design-goals::ε) | (document-structure::ε) | (foreword::ε) | (references::ε) | (notation::ε) | (scope::ε) | (what-is-new::ε) | (index::ε) | (full-grammar::ε) | (list-of-tables::ε) | (list-of-authors::ε) | (list-of-contents::ε) | (list-of-references::ε) | (top-section::ε) | (lexical-section::ε) | (description::ε) | (syntax::ε) | (example::ε) | (subsection::ε)) (type::((normative::ε) | (informative::ε)))? (title::string())? (author::person)*) (content::(content-content+)) | (placeholder::α) | ((subsection::subsection-type)+) ;
--------------------slps::ldf-v23.0-xsd.bgf--------------------
named-link ::= title::string() ((version::string()) | (edition::string()))? (uri::string())? ;
code ::= string() ;
mixed-type ::= (α | string())* ;
text-element ::= (empty::ε) | code | (text::mixed-type) | figure | table | (list::list-type) | (formula::(((math::anyMath) | (mfenced::anyMath) | (mtext::anyMath) | (msub::anyMath) | (msup::anyMath) | (mrow::anyMath) | (mi::anyMath) | (mo::anyMath) | (varepsilon::α))+)) | (sample::((α | string())* source::string())) ;
term ::= name::string() definition::textual-content ;
document ::= metadata::((body::((ansi::ε) | (ecma::ε) | (ieee::ε) | (iso::ε) | (iso/iet::ε) | (itu::ε) | (iec::ε) | (ietf::ε) | (oasis::ε) | (omg::ε) | (wsa::ε) | (w3c::ε)))? (number::string())? (author::person)* topic::string() status::((unknown::ε) | (draft::ε) | (candidate::ε) | (proposed::ε) | (approved::ε) | (revised::ε) | (obsolete::ε) | (withdrawn::ε) | (collection::ε) | (trial::ε) | (errata::ε) | (report::ε)) (version::string()) | (edition::string()) (previous::named-link)* date::string()) (part::part-type)+ ;
link ::= (text::string())? (nonterminal::string()) | (reference::string()) | (external::string()) ;
keyword ::= string() ;
structured-section-element ::= (subtopic::structured-section) | (references::list-type) | placeholder | (value::(key::string() data::string())) | ((normative-role | informative-role)? simple-section) ;
anchor ::= id::string() ;
person ::= name::string() (affiliation::string())? (email::string())? ;
anyMath ::= (α | string())* ;
figure-source ::= type::figure-type (local-file::string()) | (uri::string()) ;
part-type ::= metadata::((id::string())? role::((front-matter::ε) | (core-part::ε) | (back-matter::ε) | (annex::ε)) (title::string())? (author::person)*) (section::section-type)+ ;
metainfo ::= (id::string())? (title::string())? (author::string())* ;
subsection-type ::= metadata::((id::string())? role::((synopsis::ε) | (description::ε) | (syntax::ε) | (constraints::ε) | (relationship::ε) | (semantics::ε) | (default::ε) | (rationale::ε) | (example::ε) | (update::ε) | (subtopic::ε) | (section::ε)) (type::((normative::ε) | (informative::ε)))? (title::string())? (author::person)*) (content::(content-content+)) | (placeholder::α) | ((subsection::subsection-type)+) ;
section-type ::= metadata::((id::string())? role::((abstract::ε) | (conformance::ε) | (compatibility::ε) | (design-goals::ε) | (document-structure::ε) | (foreword::ε) | (references::ε) | (notation::ε) | (scope::ε) | (what-is-new::ε) | (index::ε) | (full-grammar::ε) | (list-of-tables::ε) | (list-of-authors::ε) | (list-of-contents::ε) | (list-of-references::ε) | (top-section::ε) | (lexical-section::ε)) (type::((normative::ε) | (informative::ε)))? (title::string())? (author::person)*) (content::(content-content+)) | (placeholder::α) | ((subsection::subsection-type)+) ;
--------------------slps::ldf-v3.0-xsd.bgf--------------------
SimpleText ::= ((p::string()) | (list::SimpleList))+ ;
reference ::= string() ;
title ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
ListOfInternalLinks ::= (link::(text::string() reference::string()))+ ;
mixedType ::= (α | string())* ;
SimpleSection ::= (id::string())? (title::string())? ((author::string())+)? content::SimpleText ;
ListOfTerms ::= (term::(name::string() definition::SimpleText))+ ;
LexicalSection ::= id::string() type::lexical title::string() ((author::string())+)? ((placeholder::generated) | normative | informative | production | (relationship::ListOfInternalLinks) | (subtopic::TopSection))+ ;
TopSection ::= id::string() title::string() ((author::string())+)? ((placeholder::generated) | normative | informative | production | (relationship::ListOfInternalLinks) | (subtopic::TopSection))+ ;
SimpleList ::= (item::string())+ ;
--------------------slps::ldf-v4.0-xsd.bgf--------------------
SimpleText ::= ((p::string()) | (list::SimpleList))+ ;
reference ::= string() ;
title ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
ListOfInternalLinks ::= (link::(text::string() reference::string()))+ ;
mixedType ::= (α | string())* ;
StructuredSection ::= id::string() title::string() ((author::string())+)? ((placeholder::generated) | normative | informative | lexical | production | (relationship::ListOfInternalLinks) | (subtopic::StructuredSection))+ ;
SimpleSection ::= (id::string())? (title::string())? ((author::string())+)? content::SimpleText ;
ListOfTerms ::= (term::(name::string() definition::SimpleText))+ ;
SimpleList ::= (item::string())+ ;
--------------------slps::ldf-v5.0-xsd.bgf--------------------
SimpleText ::= ((p::string()) | (list::SimpleList))+ ;
reference ::= string() ;
title ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
ListOfInternalLinks ::= (link::(text::string() reference::string()))+ ;
mixedType ::= (α | string())* ;
StructuredSection ::= id::string() title::string() ((author::string())+)? ((placeholder::generated) | normative | informative | lexicals | production | (relationship::ListOfInternalLinks) | (subtopic::StructuredSection))+ ;
SimpleSection ::= (id::string())? (title::string())? ((author::string())+)? content::SimpleText ;
ListOfTerms ::= (id::string())? (title::string())? ((author::string())+)? (term::(name::string() definition::SimpleText))+ ;
SimpleList ::= (item::string())+ ;
--------------------slps::ldf-v6.0-xsd.bgf--------------------
SimpleText ::= ((p::string()) | (list::SimpleList))+ ;
reference ::= string() ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
titlePage ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
ListOfInternalLinks ::= (link::(text::string() (linktext::string())? reference::string()))+ ;
mixedType ::= (α | string())* ;
StructuredSection ::= (id::string())? title::string() ((author::string())+)? ((placeholder::generated) | normative | informative | production | (relationship::ListOfInternalLinks) | (subtopic::StructuredSection))+ ;
SimpleSection ::= (id::string())? (title::string())? ((author::string())+)? content::SimpleText ;
ListOfTerms ::= (id::string())? (title::string())? ((author::string())+)? (term::(name::string() definition::SimpleText))+ ;
SimpleList ::= (item::string())+ ;
--------------------slps::ldf-v7.0-xsd.bgf--------------------
insideSimpleText ::= (p::string()) | (list::SimpleList) | (formula::string()) ;
reference ::= string() ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
titlePage ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
ListOfInternalLinks ::= (link::(text::string() (linktext::string())? reference::string()))+ ;
mixedType ::= (α | string())* ;
StructuredSection ::= (id::string())? title::string() ((author::string())+)? ((placeholder::generated) | normative | informative | production | (relationship::ListOfInternalLinks) | (subtopic::StructuredSection))+ ;
SimpleSection ::= (id::string())? (title::string())? ((author::string())+)? content::SimpleText ;
ListOfTerms ::= (id::string())? (title::string())? ((author::string())+)? (term::(name::string() definition::SimpleText))+ ;
SimpleList ::= (item::string())+ ;
--------------------slps::slps-btf.bgf--------------------
selector ::= string() ;
tree ::= (epsilon::ε) | (any::α) | (terminal::terminal) | (nonterminal::(production tree)) | (selectable::(selector::selector tree)) | (value::((int::integer()) | (string::string()))) | (sequence::(tree*)) | (choice::(expression tree)) | (optional::(tree?)) | (plus::(tree+)) | (star::(tree*)) ;
terminal ::= string() ;
nonterminal ::= string() ;
label ::= string() ;
--------------------slps::ldf-v7.1-xsd.bgf--------------------
insideSimpleText ::= (p::string()) | (list::SimpleList) | (formula::string()) | production ;
reference ::= string() ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
titlePage ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
ListOfInternalLinks ::= (link::(text::string() (linktext::string())? reference::string()))+ ;
mixedType ::= (α | string())* ;
StructuredSection ::= (id::string())? title::string() ((author::string())+)? ((placeholder::generated) | normative | informative | production | (relationship::ListOfInternalLinks) | (subtopic::StructuredSection))+ ;
SimpleSection ::= (id::string())? (title::string())? ((author::string())+)? content::SimpleText ;
ListOfTerms ::= (id::string())? (title::string())? ((author::string())+)? (term::(name::string() definition::SimpleText))+ ;
SimpleList ::= (item::string())+ ;
--------------------slps::ldf-v8.0-xsd.bgf--------------------
insideSimpleText ::= (p::string()) | (list::SimpleList) | (formula::string()) | production ;
reference ::= string() ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
titlePage ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
ListOfInternalLinks ::= (link::(text::string() (linktext::string())? reference::string()))+ ;
mixedType ::= (α | string())* ;
StructuredSection ::= (id::string())? title::string() ((author::string())+)? ((placeholder::generated) | normative | informative | production | (relationship::ListOfInternalLinks) | (subtopic::StructuredSection))+ ;
SimpleSection ::= (id::string())? (title::string())? ((author::string())+)? content::SimpleText ;
ListOfTerms ::= (id::string())? (title::string())? ((author::string())+)? (term::(name::string() definition::SimpleText))+ ;
SimpleList ::= (item::string())+ ;
--------------------slps::ldf-v8.1-xsd.bgf--------------------
insideSimpleText ::= (p::string()) | (list::SimpleList) | (formula::string()) | (sample::string()) | production ;
reference ::= string() ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
titlePage ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
ListOfInternalLinks ::= (link::(text::string() (linktext::string())? reference::string()))+ ;
mixedType ::= (α | string())* ;
StructuredSection ::= (id::string())? title::string() ((author::string())+)? ((placeholder::generated) | normative | informative | production | (relationship::ListOfInternalLinks) | (subtopic::StructuredSection))+ ;
SimpleSection ::= (id::string())? (title::string())? ((author::string())+)? content::SimpleText ;
ListOfTerms ::= (id::string())? (title::string())? ((author::string())+)? (term::(name::string() definition::SimpleText))+ ;
SimpleList ::= (item::string())+ ;
--------------------slps::ldf-v9.0-xsd.bgf--------------------
insideSimpleText ::= (empty::α) | (text::mixedType) | (table::SimpleTable) | (list::SimpleList) | (formula::string()) | (sample::string()) | production ;
reference ::= string() ;
keyword ::= string() ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
titlePage ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
ListOfInternalLinks ::= (link::(text::string() (linktext::string())? reference::string()))+ ;
mixedType ::= (α | string())* ;
StructuredSection ::= (id::string())? title::string() ((author::string())+)? ((placeholder::generated) | normative | informative | production | (relationship::ListOfInternalLinks) | (subtopic::StructuredSection))+ ;
SimpleSection ::= (id::string())? (title::string())? ((author::string())+)? content::SimpleText ;
ListOfTerms ::= (id::string())? (title::string())? ((author::string())+)? (term::(name::string() definition::SimpleText))+ ;
SimpleList ::= (item::string())+ ;
--------------------slps::ldf-v9.1-xsd.bgf--------------------
insideSimpleText ::= (empty::α) | (text::mixedType) | (table::SimpleTable) | (list::SimpleList) | (formula::string()) | (sample::string()) | production ;
reference ::= string() ;
keyword ::= string() ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
titlePage ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
ListOfInternalLinks ::= (link::(text::string() (linktext::string())? reference::string()))+ ;
mixedType ::= (α | string())* ;
StructuredSection ::= (id::string())? title::string() ((author::string())+)? ((placeholder::generated) | normative | informative | production | (relationship::ListOfInternalLinks) | (subtopic::StructuredSection))+ ;
SimpleSection ::= (id::string())? (title::string())? ((author::string())+)? content::SimpleText ;
ListOfTerms ::= (id::string())? (title::string())? ((author::string())+)? (term::(name::string() definition::SimpleText))+ ;
--------------------slps::slps-cbgf-adt.bgf--------------------
CBGFCommand ::= (abridge_detour::(p::BGFProduction)) | (abstractize_concretize::(p::BGFProduction)) | (addH_removeH::(p::BGFProduction)) | (addV_removeV::(p::BGFProduction)) | (anonymize_deanonymize::(p::BGFProduction)) | (appear_disapper::(p::BGFProduction)) | (chain_unchain::(p::BGFProduction)) | (clone_equate::(x::string() y::string() w::XBGFScope)) | (concatT_splitT::(y::string() xs::(string()*) w::XBGFScope)) | (concretize_abstractize::(p::BGFProduction)) | (deanonymize_anonymize::(p::BGFProduction)) | (define_undefine::(ps::(BGFProduction*))) | (designate_unlabel::(p::BGFProduction)) | (detour_abridge::(p::BGFProduction)) | (deyaccify_yaccify::(ps::(BGFProduction*))) | (disappear_appear::(p::BGFProduction)) | (downgrade_upgrade::(p1::BGFProduction p2::BGFProduction)) | (eliminate_introduce::(ps::(BGFProduction*))) | (equate_clone::(x::string() y::string() w::XBGFScope)) | (extract_inline::(p::BGFProduction w::XBGFScope)) | (factor_factor::(e1::BGFExpression e2::BGFExpression w::XBGFScope)) | (fold_unfold::(x::string() w::XBGFScope)) | (horizontal_vertical::(w::XBGFScope)) | (inject_project::(p::BGFProduction)) | (inline_extract::(p::BGFProduction w::XBGFScope)) | (introduce_eliminate::(ps::(BGFProduction*))) | (iterate_assoc::(p::BGFProduction)) | (assoc_iterate::(p::BGFProduction)) | (massage_massage::(e1::BGFExpression e2::BGFExpression w::XBGFScope)) | (narrow_widen::(e1::BGFExpression e2::BGFExpression w::XBGFScope)) | (permute_permute::(p1::BGFProduction p2::BGFProduction)) | (project_inject::(p::BGFProduction)) | (redefine_redefine::(ps1::(BGFProduction*) ps2::(BGFProduction*))) | (removeH_addH::(p::BGFProduction)) | (removeV_addV::(p::BGFProduction)) | (renameL_renameL::(x::string() y::string())) | (renameN_renameN::(x::string() y::string())) | (renameS_renameS::(x::string() y::string() w::XBGFScope)) | (renameT_renameT::(x::string() y::string())) | (replace_replace::(e1::BGFExpression e2::BGFExpression w::XBGFScope)) | (reroot_reroot::(xs1::(string()*) xs2::(string()*))) | (splitN_unite::(x::string() ps::(BGFProduction*) w::XBGFScope)) | (splitT_concatT::(x::string() ys::(string()*) w::XBGFScope)) | (unchain_chain::(p::BGFProduction)) | (undefine_define::(ps::(BGFProduction*))) | (unfold_fold::(x::string() w::XBGFScope)) | (unite_splitN::(x::string() ps::(BGFProduction*) w::XBGFScope)) | (unlabel_designate::(p::BGFProduction)) | (upgrade_downgrade::(p1::BGFProduction p2::BGFProduction)) | (vertical_horizontal::(w::XBGFScope)) | (widen_narrow::(e1::BGFExpression e2::BGFExpression w::XBGFScope)) | (yaccify_deyaccify::(ps::(BGFProduction*))) ;
--------------------slps::slps-cbgf-xsd.bgf--------------------
selector ::= string() ;
 selector ::= string() ;
redefine ::= production+ tag::string() ;
terminal ::= string() ;
 terminal ::= string() ;
define ::= production+ tag::string() ;
replace-replace ::= expression expression (in::scope)? tag::string() ;
project ::= production tag::string() ;
nonterminal ::= string() ;
 nonterminal ::= string() ;
replace ::= expression expression (in::scope)? tag::string() ;
undefine ::= (nonterminal::nonterminal)+ tag::string() ;
label ::= string() ;
 label ::= string() ;
inject ::= production tag::string() ;
--------------------slps::slps-edd.bgf--------------------
config ::= ((start-grammar-symbol::string()) | (end-grammar-symbol::string()) | (line-continuation-symbol::string()) | (tabulation-symbol::string()) | (start-label-symbol::string()) | (end-label-symbol::string()) | (defining-symbol::string()) | (multiple-defining-symbol::string()) | (terminator-symbol::string()) | (definition-separator-symbol::string()) | (concatenate-symbol::string()) | (start-comment-symbol::string()) | (end-comment-symbol::string()) | (start-group-symbol::string()) | (end-group-symbol::string()) | (start-option-symbol::string()) | (end-option-symbol::string()) | (start-terminal-symbol::string()) | (end-terminal-symbol::string()) | (start-nonterminal-symbol::string()) | (end-nonterminal-symbol::string()) | (start-seplist-star-symbol::string()) | (end-seplist-star-symbol::string()) | (start-seplist-plus-symbol::string()) | (end-seplist-plus-symbol::string()) | (start-repetition-star-symbol::string()) | (end-repetition-star-symbol::string()) | (start-repetition-plus-symbol::string()) | (end-repetition-plus-symbol::string()) | (postfix-option-symbol::string()) | (postfix-repetition-star-symbol::string()) | (postfix-repetition-plus-symbol::string()) | (nonterminals-may-start-with::string()) | (nonterminals-may-contain::string()) | (nonterminal-if-contains::string()) | (terminal-if-undefined::((except::string())*)) | (nonterminal-if-defined::((except::string())*)) | (decompose-symbols::((except::string())*)) | (terminal-if-uppercase::α) | (terminal-if-lowercase::α) | (terminal-if-mixedcase::α) | (terminal-if-camelcase::α) | (nonterminal-if-uppercase::α) | (nonterminal-if-lowercase::α) | (nonterminal-if-mixedcase::α) | (nonterminal-if-camelcase::α) | (glue-nonalphanumeric-terminals::α) | (break-tokens-at-whitespace::α) | (disregard-labels::α) | (consider-indentation::α) | (ignore::(((newline::α) | (space::α) | (same-indentation::α) | (lines-containing::string()))+)) | (mask::(token::string() (terminal::string()) | (epsilon::α))))* ;
--------------------slps::slps-lcf.bgf--------------------
derived ::= from::string() using::string() ;
phase ::= (step::((perform-transformation::string()) | automated-transformation))+ ;
source ::= name::string() derived? source-grammar source-tree? test-set::(xstring*) ;
xstring ::= ((expand::string()) | string())* ;
automated-transformation ::= method::string() result::string() ;
shortcut ::= name::string() expansion::xstring ;
generator ::= name::string() command::xstring ;
branch ::= input::string() (preparation::phase)? (nominal-matching::phase)? (normalizing::phase)? (structural-matching::phase)? ((extension::phase) | (correction::phase) | (relaxation::phase))* ;
target ::= name::string() branch+ ;
testset ::= name::string() command::xstring ;
--------------------slps::slps-xbgf-adt.bgf--------------------
XBGFScope ::= (globally::ε) | (nowhere::ε) | (inlabel::(l::string())) | (notinlabel::(l::string())) | (innt::(x::string())) | (notinnt::(x::string())) | (comboscope::(w1::XBGFScope w2::XBGFScope)) ;
XBGFCommand ::= (abridge::(p::BGFProduction)) | (abstractize::(p::BGFProduction)) | (addH::(p::BGFProduction)) | (addV::(p::BGFProduction)) | (addC::(p::BGFProduction)) | (anonymize::(p::BGFProduction)) | (appear::(p::BGFProduction)) | (bypass::ε) | (chain::(p::BGFProduction)) | (clone::(x::string() y::string() w::XBGFScope)) | (concatT::(xs::(string()*) y::string() w::XBGFScope)) | (concretize::(p::BGFProduction)) | (deanonymize::(p::BGFProduction)) | (define::(ps::(BGFProduction*))) | (designate::(p::BGFProduction)) | (detour::(p::BGFProduction)) | (deyaccify::(x::string())) | (disappear::(p::BGFProduction)) | (distribute::(w::XBGFScope)) | (downgrade::(p1::BGFProduction p2::BGFProduction)) | (eliminate::(x::string())) | (equate::(x::string() y::string())) | (extract::(p::BGFProduction w::XBGFScope)) | (factor::(e1::BGFExpression e2::BGFExpression w::XBGFScope)) | (fold::(x::string() w::XBGFScope)) | (horizontal::(w::XBGFScope)) | (importG::(ps::(BGFProduction*))) | (inject::(p::BGFProduction)) | (inline::(x::string())) | (introduce::(ps::(BGFProduction*))) | (iterate::(p::BGFProduction)) | (lassoc::(p::BGFProduction)) | (massage::(e1::BGFExpression e2::BGFExpression w::XBGFScope)) | (narrow::(e1::BGFExpression e2::BGFExpression w::XBGFScope)) | (permute::(p::BGFProduction)) | (project::(p::BGFProduction)) | (rassoc::(p::BGFProduction)) | (redefine::(ps::(BGFProduction*))) | (removeH::(p::BGFProduction)) | (removeV::(p::BGFProduction)) | (renameL::(x::string() y::string())) | (renameN::(x::string() y::string())) | (renameS::(x::string() y::string() w::XBGFScope)) | (renameT::(x::string() y::string())) | (replace::(e1::BGFExpression e2::BGFExpression w::XBGFScope)) | (reroot::(xs::(string()*))) | (splitN::(x::string() ps::(BGFProduction*) w::XBGFScope)) | (splitT::(x::string() ys::(string()*) w::XBGFScope)) | (unchain::(p::BGFProduction)) | (undefine::(xs::(string()*))) | (unfold::(x::string() w::XBGFScope)) | (unite::(x::string() y::string())) | (unlabel::(x::string())) | (upgrade::(p1::BGFProduction p2::BGFProduction)) | (vertical::(w::XBGFScope)) | (widen::(e1::BGFExpression e2::BGFExpression w::XBGFScope)) | (yaccify::(ps::(BGFProduction*))) | (atomic::(steps::(XBGFCommand*))) | (strip::(a::string())) ;
--------------------slps::slps-xbgf-xsd.bgf--------------------
selector ::= string() ;
redefine ::= production+ tag::string() ;
terminal ::= string() ;
define ::= production+ tag::string() ;
project ::= production tag::string() ;
nonterminal ::= string() ;
replace ::= expression expression (in::scope)? tag::string() ;
undefine ::= (nonterminal::nonterminal)+ tag::string() ;
label ::= string() ;
inject ::= production tag::string() ;
--------------------slps::slps-xedd.bgf--------------------
introduce ::= metasymbol::confixMetasymbols start::string() end::string() ;
rename ::= metasymbol::metasymbols from::string() to::string() ;
--------------------slps::slps-xldf.bgf--------------------
selector ::= string() ;
 selector ::= string() ;
combine ::= section::string() with::string() ;
terminal ::= string() ;
 terminal ::= string() ;
define ::= production+ tag::string() ;
transformGrammar ::= target::string() transformation+ (context::string())* ;
append ::= where::string() content::simpleText ;
project ::= production tag::string() ;
hyperlinkify ::= goal::string() uri::string() ;
replace ::= expression expression (in::scope)? tag::string() ;
undefine ::= (nonterminal::nonterminal)+ tag::string() ;
label ::= string() ;
 label ::= string() ;
inject ::= production tag::string() ;
drop ::= section::string() ;
importSample ::= target::string() file::string() (prettyprinter::string())? ;
redefine ::= production+ tag::string() ;
relative ::= (before::((id::string()) | simpleTextElement)) | (after::((id::string()) | simpleTextElement)) | (to::string()) ;
nonterminal ::= string() ;
 nonterminal ::= string() ;
transformDocument ::= file::string() ;
place ::= section::string() inside::string() ;
extractSubsection ::= from::string() content::simpleText title::string() id::string() (to::string())? (role::sectionRole)? ;
changeRole ::= scope::string() from::sectionRole to::sectionRole ;
addSubsection ::= topSection | (normative | informative to::string()) ;
retitle ::= from::((id::string()) | (title::string())) to::string() ;
addFigure ::= figure::simpleFigure to::string() ;
importGrammar ::= target::string() file::string() ;
removeSection ::= id::string() (from::string())? ;
--------------------slps::slps-xoutcome.bgf--------------------
XBGFOutcome ::= (ok::ε) | (problem::(msg::string())) | (problemXBGF::(msg::string() xbgf::XBGFCommand)) | (problemProd::(msg::string() p::BGFProduction)) | (problemProd2::(msg::string() p1::BGFProduction p2::BGFProduction)) | (problemPinProds::(msg::string() p::BGFProduction ps::(BGFProduction*))) | (problemProds::(msg::string() ps::(BGFProduction*))) | (problemProds2::(msg::string() ps1::(BGFProduction*) ps2::(BGFProduction*))) | (problemExpr::(msg::string() e::BGFExpression)) | (problemExpr2::(msg::string() e1::BGFExpression e2::BGFExpression)) | (problemStr::(msg::string() x::string())) | (problemStr2::(msg::string() x::string() y::string())) | (problemStrs::(msg::string() xs::(string()*))) | (problemScope::(msg::string() w::XBGFScope)) ;
--------------------slps::xbgf-adt.bgf--------------------
XBGFScope ::= (globally::ε) | (nowhere::ε) | (inlabel::(l::string())) | (notinlabel::(l::string())) | (innt::(x::string())) | (notinnt::(x::string())) | (comboscope::(w1::XBGFScope w2::XBGFScope)) ;
XBGFCommand ::= (abridge::(p::BGFProduction)) | (abstractize::(p::BGFProduction)) | (addH::(p::BGFProduction)) | (addV::(p::BGFProduction)) | (addC::(p::BGFProduction)) | (anonymize::(p::BGFProduction)) | (appear::(p::BGFProduction)) | (bypass::ε) | (chain::(p::BGFProduction)) | (clone::(x::string() y::string() w::XBGFScope)) | (concatT::(xs::(string()*) y::string() w::XBGFScope)) | (concretize::(p::BGFProduction)) | (deanonymize::(p::BGFProduction)) | (define::(ps::(BGFProduction*))) | (designate::(p::BGFProduction)) | (detour::(p::BGFProduction)) | (deyaccify::(x::string())) | (disappear::(p::BGFProduction)) | (distribute::(w::XBGFScope)) | (downgrade::(p1::BGFProduction p2::BGFProduction)) | (eliminate::(x::string())) | (equate::(x::string() y::string())) | (extract::(p::BGFProduction w::XBGFScope)) | (factor::(e1::BGFExpression e2::BGFExpression w::XBGFScope)) | (fold::(x::string() w::XBGFScope)) | (horizontal::(w::XBGFScope)) | (importG::(ps::(BGFProduction*))) | (inject::(p::BGFProduction)) | (inline::(x::string())) | (introduce::(ps::(BGFProduction*))) | (iterate::(p::BGFProduction)) | (lassoc::(p::BGFProduction)) | (massage::(e1::BGFExpression e2::BGFExpression w::XBGFScope)) | (narrow::(e1::BGFExpression e2::BGFExpression w::XBGFScope)) | (permute::(p::BGFProduction)) | (project::(p::BGFProduction)) | (rassoc::(p::BGFProduction)) | (redefine::(ps::(BGFProduction*))) | (removeH::(p::BGFProduction)) | (removeV::(p::BGFProduction)) | (renameL::(x::string() y::string())) | (renameN::(x::string() y::string())) | (renameS::(x::string() y::string() w::XBGFScope)) | (renameT::(x::string() y::string())) | (replace::(e1::BGFExpression e2::BGFExpression w::XBGFScope)) | (reroot::(xs::(string()*))) | (splitN::(x::string() ps::(BGFProduction*) w::XBGFScope)) | (splitT::(x::string() ys::(string()*) w::XBGFScope)) | (unchain::(p::BGFProduction)) | (undefine::(xs::(string()*))) | (unfold::(x::string() w::XBGFScope)) | (unite::(x::string() y::string())) | (unlabel::(x::string())) | (upgrade::(p1::BGFProduction p2::BGFProduction)) | (vertical::(w::XBGFScope)) | (widen::(e1::BGFExpression e2::BGFExpression w::XBGFScope)) | (yaccify::(ps::(BGFProduction*))) | (atomic::(steps::(XBGFCommand*))) | (strip::(a::string())) ;
--------------------slps::xbgf-xsd.bgf--------------------
selector ::= string() ;
redefine ::= production+ tag::string() ;
terminal ::= string() ;
define ::= production+ tag::string() ;
project ::= production tag::string() ;
nonterminal ::= string() ;
replace ::= expression expression (in::scope)? tag::string() ;
undefine ::= (nonterminal::nonterminal)+ tag::string() ;
label ::= string() ;
inject ::= production tag::string() ;
--------------------slps::bgf-v4.1-adt.bgf--------------------
BGFProduction ::= production::(label::string() lhs::string() rhs::BGFExpression) ;
BGFExpression ::= (epsilon::ε) | (empty::ε) | (val::(v::BGFValue)) | (anything::ε) | (terminal::(t::string())) | (nonterminal::(t::string())) | (selectable::(selector::string() expr::BGFExpression)) | (sequence::(exprs::(BGFExpression*))) | (choice::(exprs::(BGFExpression*))) | (marked::(expr::BGFExpression)) | (optional::(expr::BGFExpression)) | (plus::(expr::BGFExpression)) | (star::(expr::BGFExpression)) | (starsepplus::(expr::BGFExpression sep::BGFExpression)) | (starsepstar::(expr::BGFExpression sep::BGFExpression)) ;
--------------------slps::bgf-v4.3-adt.bgf--------------------
BGFProduction ::= production::(label::string() lhs::string() rhs::BGFExpression) ;
BGFExpression ::= (epsilon::ε) | (empty::ε) | (val::(v::BGFValue)) | (anything::ε) | (terminal::(t::string())) | (nonterminal::(t::string())) | (selectable::(selector::string() expr::BGFExpression)) | (sequence::(exprs::BGFExprList)) | (choice::(exprs::BGFExprList)) | (marked::(expr::BGFExpression)) | (optional::(expr::BGFExpression)) | (plus::(expr::BGFExpression)) | (star::(expr::BGFExpression)) | (seplistplus::(expr::BGFExpression sep::BGFExpression)) | (sepliststar::(expr::BGFExpression sep::BGFExpression)) ;
BGFGrammar ::= grammar::(roots::(string()*) prods::BGFProdList) ;
--------------------slps::bgf-v5.3-adt.bgf--------------------
BGFProduction ::= production::(label::string() lhs::string() rhs::BGFExpression) ;
BGFExpression ::= (epsilon::ε) | (empty::ε) | (val::(v::BGFValue)) | (anything::ε) | (terminal::(t::string())) | (nonterminal::(t::string())) | (selectable::(selector::string() expr::BGFExpression)) | (sequence::(exprs::BGFExprList)) | (choice::(exprs::BGFExprList)) | (allof::(exprs::BGFExprList)) | (marked::(expr::BGFExpression)) | (optional::(expr::BGFExpression)) | (not::(expr::BGFExpression)) | (plus::(expr::BGFExpression)) | (star::(expr::BGFExpression)) | (seplistplus::(expr::BGFExpression sep::BGFExpression)) | (sepliststar::(expr::BGFExpression sep::BGFExpression)) ;
BGFGrammar ::= grammar::(roots::(string()*) prods::BGFProdList) ;
--------------------slps::bgf-v5.4-adt.bgf--------------------
BGFProduction ::= production::(label::string() lhs::string() rhs::BGFExpression) ;
BGFExpression ::= (epsilon::ε) | (empty::ε) | (val::(v::BGFValue)) | (anything::ε) | (terminal::(t::string())) | (nonterminal::(t::string())) | (selectable::(selector::string() expr::BGFExpression)) | (sequence::(exprs::BGFExprList)) | (choice::(exprs::BGFExprList)) | (allof::(exprs::BGFExprList)) | (marked::(expr::BGFExpression)) | (optional::(expr::BGFExpression)) | (not::(expr::BGFExpression)) | (plus::(expr::BGFExpression)) | (star::(expr::BGFExpression)) | (seplistplus::(expr::BGFExpression sep::BGFExpression)) | (sepliststar::(expr::BGFExpression sep::BGFExpression)) ;
BGFGrammar ::= grammar::(roots::(string()*) prods::BGFProdList) ;
SGrammar ::= roots::(string()*) prods::((string() BGFProdSet)*) ;
--------------------slps::xbgf-xoutcome.bgf--------------------
XBGFOutcome ::= (ok::ε) | (problem::(msg::string())) | (problemXBGF::(msg::string() xbgf::XBGFCommand)) | (problemProd::(msg::string() p::BGFProduction)) | (problemProd2::(msg::string() p1::BGFProduction p2::BGFProduction)) | (problemPinProds::(msg::string() p::BGFProduction ps::(BGFProduction*))) | (problemProds::(msg::string() ps::(BGFProduction*))) | (problemProds2::(msg::string() ps1::(BGFProduction*) ps2::(BGFProduction*))) | (problemExpr::(msg::string() e::BGFExpression)) | (problemExpr2::(msg::string() e1::BGFExpression e2::BGFExpression)) | (problemStr::(msg::string() x::string())) | (problemStr2::(msg::string() x::string() y::string())) | (problemStrs::(msg::string() xs::(string()*))) | (problemScope::(msg::string() w::XBGFScope)) ;
--------------------develop::ant.bgf--------------------
String ::= string() ;
--------------------develop::java-project.bgf--------------------
String ::= string() ;
--------------------develop::make.bgf--------------------
String ::= string() ;
--------------------develop::bugzilla.bgf--------------------
String ::= string() ;
--------------------saf::abstract.bgf--------------------
Fighter ::= fighter::(name::string() specs::(Spec*)) ;
Spec ::= (attribute::(name::string() strength::integer())) | (behavior::(cond::Cond move::Action fight::Action)) ;
Action ::= (action::(name::string())) | (choose::(actions::(string()*))) ;
Cond ::= (const::(name::string())) | (and::(lhs::Cond rhs::Cond)) | (or::(lhs::Cond rhs::Cond)) ;
