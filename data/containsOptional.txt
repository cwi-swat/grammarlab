--------------------ada::kellogg.bgf--------------------
COMMENT ::= COMMENT_INTRO Î±* "\n" | ("\r" "\n"?) ;
identifier_colon_opt ::= (IDENTIFIER COLON)? ;
relation ::= simple_expression ((IN range_or_mark) | (n::NOT IN range_or_mark) | (EQ simple_expression) | (NE simple_expression) | (LT_ simple_expression) | (LE simple_expression) | (GT simple_expression) | (GE simple_expression))? ;
func_formal_part_opt ::= (LPAREN func_param (SEMI func_param)* RPAREN)? ;
raise_stmt ::= r::RAISE compound_name? SEMI ;
iteration_scheme_opt ::= ((WHILE condition) | (FOR IDENTIFIER IN reverse_opt discrete_subtype_definition))? ;
subprogram_default_opt ::= (IS BOX | name)? ;
constant_all_opt ::= (CONSTANT | ALL)? ;
align_opt ::= (AT MOD expression SEMI)? ;
abstract_tagged_limited_opt ::= ((ABSTRACT TAGGED) | TAGGED)? LIMITED? ;
return_stmt ::= s::RETURN expression? SEMI ;
formal_part_opt ::= (LPAREN parameter_specification (SEMI parameter_specification)* RPAREN)? ;
private_opt ::= PRIVATE? ;
private_task_items_opt ::= (PRIVATE pragma* entrydecls_repspecs_opt)? ;
pragma_args_opt ::= (LPAREN pragma_arg (COMMA pragma_arg)* RPAREN)? ;
extension_opt ::= (WITH (NuLL RECORD) | value_s)? ;
BASED_INTEGER ::= EXTENDED_DIGIT ("_"? EXTENDED_DIGIT)* ;
in_access_opt ::= (IN | ACCESS)? ;
subtype_mark ::= compound_name (TIC attribute_id)? ;
value ::= (OTHERS RIGHT_SHAFT expression) | (ranged_expr_s (RIGHT_SHAFT expression)?) ;
EXPONENT ::= "e" ("+" | "-")? DIGIT+ ;
formal_package_actual_part_opt ::= (LPAREN BOX | defining_identifier_list RPAREN)? ;
def_label_opt ::= (LT_LT IDENTIFIER GT_GT)? ;
generic_inst ::= NEW compound_name (LPAREN value_s RPAREN)? ;
else_opt ::= (ELSE statements)? ;
ranged_expr ::= expression ((DOT_DOT simple_expression) | (RANGE range))? ;
IDENTIFIER ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" ("_"? "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ;
requeue_stmt ::= r::REQUEUE name (WITH ABORT)? SEMI ;
aliased_constant_opt ::= ALIASED? CONSTANT? ;
index_or_discrete_range ::= simple_expression ((DOT_DOT simple_expression) | (RANGE BOX | range))? ;
NUMERIC_LIT ::= DIGIT+ (("#" BASED_INTEGER ("." BASED_INTEGER)? "#") | (("_" DIGIT+)+))? (("." DIGIT+ ("_" DIGIT+)* EXPONENT?) | EXPONENT)? ;
aliased_opt ::= ALIASED? ;
except_handler_part_opt ::= (EXCEPTION exception_handler+)? ;
protected_opt ::= PROTECTED? ;
component_list ::= (NuLL SEMI) | (component_items variant_part?) | (empty_component_items variant_part) ;
range_attrib_ref ::= prefix TIC r::RANGE (LPAREN expression RPAREN)? ;
declare_opt ::= (DECLARE declarative_part)? ;
guard_opt ::= (WHEN condition RIGHT_SHAFT pragma*)? ;
expression ::= relation ((a::AND THEN? relation) | (o::OR ELSE? relation) | (XOR relation))* ;
access_opt ::= ACCESS? ;
mode_opt ::= ((IN OUT?) | OUT | ACCESS)? ;
reverse_opt ::= REVERSE? ;
abstract_opt ::= ABSTRACT? ;
range_constraint_opt ::= range_constraint? ;
pragma_arg ::= (IDENTIFIER RIGHT_SHAFT)? expression ;
until_opt ::= UNTIL? ;
constraint_opt ::= (range_constraint | digits_constraint | delta_constraint | index_constraint | discriminant_constraint)? ;
factor ::= (NOT primary) | (ABS primary) | (primary (EXPON primary)?) ;
exit_stmt ::= s::EXIT label_name? (WHEN condition)? SEMI ;
block_body_opt ::= (BEGIN handled_stmt_s)? ;
discrim_part_opt ::= discrim_part_text? ;
protected_definition ::= IS prot_op_decl_s (PRIVATE prot_member_decl_s)? end_id_opt ;
pkg_spec_part ::= basic_declarative_items_opt (PRIVATE basic_declarative_items_opt)? end_id_opt ;
init_opt ::= (ASSIGN expression)? ;
primary ::= name_or_qualified | parenthesized_primary | allocator | NuLL | NUMERIC_LIT | CHARACTER_LITERAL | (cs::CHAR_STRING operator_call_tail?) ;
--------------------ada::kempe.bgf--------------------
relation ::= (simple_expression (relational_operator simple_expression)?) | (simple_expression "not"? "in" range) | (simple_expression "not"? "in" subtype_mark) ;
package_body ::= "package" body defining_program_unit_name "is" declarative_part ("begin" handled_sequence_of_statements)? "end" ((parent_unit_name ".")? identifier)? ";" ;
decimal_fixed_point_definition ::= "delta" static_expression "digits" static_expression real_range_specification? ;
floating_point_definition ::= "digits" static_expression real_range_specification? ;
object_declaration ::= (defining_identifier_list ":" "aliased"? "constant"? subtype_indication (":=" expression)? ";") | (defining_identifier_list ":" "aliased"? "constant"? array_type_definition (":=" expression)? ";") | single_task_declaration | single_protected_declaration ;
entry_call_alternative ::= entry_call_statement sequence_of_statements? ;
accept_statement ::= "accept" entry_direct_name ("(" entry_index ")")? parameter_profile ("do" handled_sequence_of_statements "end" entry_identifier?)? ";" ;
accept_alternative ::= accept_statement sequence_of_statements? ;
delay_alternative ::= delay_statement sequence_of_statements? ;
task_type_declaration ::= "task" "type" defining_identifier known_discriminant_part? ("is" task_definition)? ";" ;
parameter_specification ::= (defining_identifier_list ":" mode subtype_mark (":=" default_expression)?) | (defining_identifier_list ":" access_definition (":=" default_expression)?) ;
formal_private_type_definition ::= ("abstract"? "tagged")? "limited"? "private" ;
parameter_association ::= (formal_parameter_selector_name "=>")? explicit_actual_parameter ;
protected_type_declaration ::= "protected" "type" defining_identifier known_discriminant_part? "is" protected_definition ";" ;
generic_instantiation ::= ("package" defining_program_unit_name "is" "new" generic_package_name generic_actual_part? ";") | ("procedure" defining_program_unit_name "is" "new" generic_procedure_name generic_actual_part? ";") | ("function" defining_designator "is" "new" generic_function_name generic_actual_part? ";") ;
access_to_subprogram_definition ::= ("access" "protected"? "procedure" parameter_profile) | ("access" "protected"? "function" parameter_and_result_profile) ;
raise_statement ::= "raise" exception_name? ";" ;
exception_handler ::= "when" (choice_parameter_specification ":")? exception_choice ("|" exception_choice)* "=>" sequence_of_statements ;
range_attribute_designator ::= "Range" ("(" static_expression ")")? ;
single_task_declaration ::= "task" defining_identifier ("is" task_definition)? ";" ;
digits_constraint ::= "digits" static_expression range_constraint? ;
derived_type_definition ::= "abstract"? "new" parent_subtype_indication record_extension_part? ;
component_definition ::= "aliased"? subtype_indication ;
entry_body_formal_part ::= ("(" entry_index_specification ")")? parameter_profile ;
loop_parameter_specification ::= defining_identifier "in" "reverse"? discrete_subtype_definition ;
record_component_association ::= (component_choice_list "=>")? expression ;
formal_subprogram_declaration ::= "with" subprogram_specification ("is" subprogram_default)? ";" ;
entry_body ::= "entry" defining_identifier entry_body_formal_part entry_barrier "is" declarative_part "begin" handled_sequence_of_statements "end" entry_identifier? ";" ;
factor ::= (primary ("**" primary)?) | ("abs" primary) | ("not" primary) ;
task_definition ::= task_item* ("private" task_item*)? "end" task_identifier? ;
if_statement ::= "if" condition "then" sequence_of_statements ("elsif" condition "then" sequence_of_statements)* ("else" sequence_of_statements)? "end" "if" ";" ;
selective_accept ::= "select" guard? select_alternative ("or" guard? select_alternative)* ("else" sequence_of_statements)? "end" "select" ";" ;
formal_object_declaration ::= defining_identifier_list ":" mode subtype_mark (":=" default_expression)? ";" ;
package_specification ::= "package" defining_program_unit_name "is" basic_declarative_item* ("private" basic_declarative_item*)? "end" ((parent_unit_name ".")? identifier)? ;
formal_type_declaration ::= "type" defining_identifier discriminant_part? "is" formal_type_definition ";" ;
parameter_and_result_profile ::= formal_part? "return" subtype_mark ;
simple_expression ::= unary_adding_operator? term (binary_adding_operator term)* ;
delta_constraint ::= "delta" static_expression range_constraint? ;
subtype_indication ::= subtype_mark constraint? ;
decimal_literal ::= numeral ("." numeral)? exponent? ;
private_extension_declaration ::= "type" defining_identifier discriminant_part? "is" "abstract"? "new" ancestor_subtype_indication "with" "private" ";" ;
subprogram_body ::= subprogram_specification "is" declarative_part "begin" handled_sequence_of_statements "end" designator? ";" ;
block_statement ::= (block_statement_identifier ":")? ("declare" declarative_part)? "begin" handled_sequence_of_statements "end" block_identifier? ";" ;
pragma ::= "pragma" identifier ("(" pragma_argument_association ("," pragma_argument_association)* ")")? ";" ;
formal_package_actual_part ::= "(<>)" | (generic_actual_part?) ;
entry_call_statement ::= entry_name actual_parameter_part? ";" ;
component_declaration ::= defining_identifier_list ":" component_definition (":=" default_expression)? ";" ;
incomplete_type_declaration ::= "type" defining_identifier discriminant_part? ";" ;
record_representation_clause ::= "for" first_subtype_local_name "use" "record" mod_clause? component_clause* "end" "record" ";" ;
handled_sequence_of_statements ::= sequence_of_statements ("exception" exception_handler exception_handler*)? ;
private_type_declaration ::= "type" defining_identifier discriminant_part? "is" ("abstract"? "tagged")? "limited"? "private" ";" ;
exponent ::= ("E" "+"? numeral) | ("E" "-" numeral) ;
requeue_statement ::= "requeue" entry_name ("with" "abort")? ";" ;
entry_declaration ::= "entry" defining_identifier ("(" discrete_subtype_definition ")")? parameter_profile ";" ;
identifier ::= identifier_letter (underline? letter_or_digit)* ;
discriminant_specification ::= (defining_identifier_list ":" subtype_mark (":=" default_expression)?) | (defining_identifier_list ":" access_definition (":=" default_expression)?) ;
full_type_declaration ::= ("type" defining_identifier known_discriminant_part? "is" type_definition ";") | task_type_declaration | protected_type_declaration ;
defining_program_unit_name ::= (parent_unit_name ".")? defining_identifier ;
mode ::= ("in"?) | ("in" "out") | "out" ;
discriminant_association ::= (discriminant_selector_name ("|" discriminant_selector_name)* "=>")? expression ;
based_literal ::= base "#" based_numeral ("." based_numeral)? "#" exponent? ;
pragma_argument_association ::= ((pragma_argument_identifier "=>")? name) | ((pragma_argument_identifier "=>")? expression) ;
return_statement ::= "return" expression? ";" ;
numeral ::= digit (underline? digit)* ;
task_body ::= "task" body defining_identifier "is" declarative_part "begin" handled_sequence_of_statements "end" task_identifier? ";" ;
generic_association ::= (generic_formal_parameter_selector_name "=>")? explicit_generic_actual_parameter ;
triggering_alternative ::= triggering_statement sequence_of_statements? ;
library_item ::= ("private"? library_unit_declaration) | library_unit_body | ("private"? library_unit_renaming_declaration) ;
attribute_designator ::= (identifier ("(" static_expression ")")?) | "Access" | "Delta" | "Digits" ;
designator ::= ((parent_unit_name ".")? identifier) | operator_symbol ;
loop_statement ::= (loop_statement_identifier ":")? iteration_scheme? "loop" sequence_of_statements "end" "loop" loop_identifier? ";" ;
protected_body ::= "protected" body defining_identifier "is" protected_operation_item* "end" protected_identifier? ";" ;
parameter_profile ::= formal_part? ;
based_numeral ::= extended_digit (underline? extended_digit)* ;
exit_statement ::= "exit" loop_name? ("when" condition)? ";" ;
access_to_object_definition ::= "access" general_access_modifier? subtype_indication ;
record_type_definition ::= ("abstract"? "tagged")? "limited"? record_definition ;
formal_derived_type_definition ::= "abstract"? "new" subtype_mark ("with" "private")? ;
protected_definition ::= protected_operation_declaration* ("private" protected_element_declaration*)? "end" protected_identifier? ;
--------------------ada::laemmel-verhoef.bgf--------------------
relation ::= (simple_expression (relational_operator simple_expression)?) | (simple_expression "not"? "in" range_definition) | (simple_expression "not"? "in" subtype_mark) ;
package_body ::= "package" body defining_program_unit_name "is" declarative_part ("begin" handled_sequence_of_statements)? "end" ((parent_unit_name ".")? identifier)? ";" ;
decimal_fixed_point_definition ::= "delta" static_expression "digits" static_expression real_range_specification? ;
floating_point_definition ::= "digits" static_expression real_range_specification? ;
object_declaration ::= (defining_identifier_list ":" "aliased"? "constant"? subtype_indication (":=" expression)? ";") | (defining_identifier_list ":" "aliased"? "constant"? array_type_definition (":=" expression)? ";") | single_task_declaration | single_protected_declaration ;
entry_call_alternative ::= entry_call_statement sequence_of_statements? ;
accept_statement ::= "accept" entry_direct_name ("(" entry_index ")")? parameter_profile ("do" handled_sequence_of_statements "end" entry_identifier?)? ";" ;
accept_alternative ::= accept_statement sequence_of_statements? ;
delay_alternative ::= delay_statement sequence_of_statements? ;
task_type_declaration ::= "task" "type" defining_identifier known_discriminant_part? ("is" task_definition)? ";" ;
parameter_specification ::= (defining_identifier_list ":" mode subtype_mark (":=" default_expression)?) | (defining_identifier_list ":" access_definition (":=" default_expression)?) ;
formal_private_type_definition ::= ("abstract"? "tagged")? "limited"? "private" ;
parameter_association ::= (formal_parameter_selector_name "=>")? explicit_actual_parameter ;
protected_type_declaration ::= "protected" "type" defining_identifier known_discriminant_part? "is" protected_definition ";" ;
access_to_subprogram_definition ::= ("access" "protected"? "procedure" parameter_profile) | ("access" "protected"? "function" parameter_and_result_profile) ;
generic_instantiation ::= ("package" defining_program_unit_name "is" "new" generic_package_name generic_actual_part? ";") | ("procedure" defining_program_unit_name "is" "new" generic_procedure_name generic_actual_part? ";") | ("function" defining_designator "is" "new" generic_function_name generic_actual_part? ";") ;
raise_statement ::= "raise" exception_name? ";" ;
exception_handler ::= "when" (choice_parameter_specification ":")? exception_choice ("|" exception_choice)* "=>" sequence_of_statements ;
range_attribute_designator ::= "Range" ("(" static_expression ")")? ;
single_task_declaration ::= "task" defining_identifier ("is" task_definition)? ";" ;
digits_constraint ::= "digits" static_expression range_constraint? ;
derived_type_definition ::= "abstract"? "new" parent_subtype_indication record_extension_part? ;
component_definition ::= "aliased"? subtype_indication ;
entry_body_formal_part ::= ("(" entry_index_specification ")")? parameter_profile ;
loop_parameter_specification ::= defining_identifier "in" "reverse"? discrete_subtype_definition ;
record_component_association ::= (component_choice_list "=>")? expression ;
formal_subprogram_declaration ::= "with" subprogram_specification ("is" subprogram_default)? ";" ;
entry_body ::= "entry" defining_identifier entry_body_formal_part entry_barrier "is" declarative_part "begin" handled_sequence_of_statements "end" entry_identifier? ";" ;
factor ::= (primary ("**" primary)?) | ("abs" primary) | ("not" primary) ;
task_definition ::= task_item* ("private" task_item*)? "end" task_identifier? ;
if_statement ::= "if" condition "then" sequence_of_statements ("elsif" condition "then" sequence_of_statements)* ("else" sequence_of_statements)? "end" "if" ";" ;
selective_accept ::= "select" guard? select_alternative ("or" guard? select_alternative)* ("else" sequence_of_statements)? "end" "select" ";" ;
formal_object_declaration ::= defining_identifier_list ":" mode subtype_mark (":=" default_expression)? ";" ;
package_specification ::= "package" defining_program_unit_name "is" basic_declarative_item* ("private" basic_declarative_item*)? "end" ((parent_unit_name ".")? identifier)? ;
formal_type_declaration ::= "type" defining_identifier discriminant_part? "is" formal_type_definition ";" ;
simple_expression ::= unary_adding_operator? term (binary_adding_operator term)* ;
parameter_and_result_profile ::= formal_part? "return" subtype_mark ;
delta_constraint ::= "delta" static_expression range_constraint? ;
subtype_indication ::= subtype_mark constraint? ;
private_extension_declaration ::= "type" defining_identifier discriminant_part? "is" "abstract"? "new" ancestor_subtype_indication "with" "private" ";" ;
subprogram_body ::= subprogram_specification "is" declarative_part "begin" handled_sequence_of_statements "end" designator? ";" ;
block_statement ::= (block_statement_identifier ":")? ("declare" declarative_part)? "begin" handled_sequence_of_statements "end" block_identifier? ";" ;
pragma ::= "pragma" identifier ("(" pragma_argument_association ("," pragma_argument_association)* ")")? ";" ;
formal_package_actual_part ::= ("(" "<>" ")") | (generic_actual_part?) ;
entry_call_statement ::= entry_name actual_parameter_part? ";" ;
component_declaration ::= defining_identifier_list ":" component_definition (":=" default_expression)? ";" ;
incomplete_type_declaration ::= "type" defining_identifier discriminant_part? ";" ;
record_representation_clause ::= "for" first_subtype_local_name "use" "record" mod_clause? component_clause* "end" "record" ";" ;
handled_sequence_of_statements ::= sequence_of_statements ("exception" exception_handler exception_handler*)? ;
private_type_declaration ::= "type" defining_identifier discriminant_part? "is" ("abstract"? "tagged")? "limited"? "private" ";" ;
requeue_statement ::= "requeue" entry_name ("with" "abort")? ";" ;
entry_declaration ::= "entry" defining_identifier ("(" discrete_subtype_definition ")")? parameter_profile ";" ;
discriminant_specification ::= (defining_identifier_list ":" subtype_mark (":=" default_expression)?) | (defining_identifier_list ":" access_definition (":=" default_expression)?) ;
full_type_declaration ::= ("type" defining_identifier known_discriminant_part? "is" type_definition ";") | task_type_declaration | protected_type_declaration ;
defining_program_unit_name ::= (parent_unit_name ".")? defining_identifier ;
mode ::= ("in"?) | ("in" "out") | "out" ;
discriminant_association ::= (discriminant_selector_name ("|" discriminant_selector_name)* "=>")? expression ;
pragma_argument_association ::= ((pragma_argument_identifier "=>")? name) | ((pragma_argument_identifier "=>")? expression) ;
return_statement ::= "return" expression? ";" ;
task_body ::= "task" body defining_identifier "is" declarative_part "begin" handled_sequence_of_statements "end" task_identifier? ";" ;
generic_association ::= (generic_formal_parameter_selector_name "=>")? explicit_generic_actual_parameter ;
triggering_alternative ::= triggering_statement sequence_of_statements? ;
library_item ::= ("private"? library_unit_declaration) | library_unit_body | ("private"? library_unit_renaming_declaration) ;
attribute_designator ::= (identifier ("(" static_expression ")")?) | "Access" | "Delta" | "Digits" ;
designator ::= ((parent_unit_name ".")? identifier) | operator_symbol ;
loop_statement ::= (loop_statement_identifier ":")? iteration_scheme? "loop" sequence_of_statements "end" "loop" loop_identifier? ";" ;
protected_body ::= "protected" body defining_identifier "is" protected_operation_item* "end" protected_identifier? ";" ;
parameter_profile ::= formal_part? ;
exit_statement ::= "exit" loop_name? ("when" condition)? ";" ;
record_type_definition ::= ("abstract"? "tagged")? "limited"? record_definition ;
access_to_object_definition ::= "access" general_access_modifier? subtype_indication ;
formal_derived_type_definition ::= "abstract"? "new" subtype_mark ("with" "private")? ;
protected_definition ::= protected_operation_declaration* ("private" protected_element_declaration*)? "end" protected_identifier? ;
--------------------ada::lncs-2219.bgf--------------------
relation ::= (simple_expression (relational_operator simple_expression)?) | (simple_expression "not"? "in" range) | (simple_expression "not"? "in" subtype_mark) ;
package_body ::= "package" "body" defining_program_unit_name "is" declarative_part ("begin" handled_sequence_of_statements)? "end" ((parent_unit_name ".")? identifier)? ";" ;
decimal_fixed_point_definition ::= "delta" static_expression "digits" static_expression real_range_specification? ;
floating_point_definition ::= "digits" static_expression real_range_specification? ;
object_declaration ::= (defining_identifier_list ":" "aliased"? "constant"? subtype_indication (":=" expression)? ";") | (defining_identifier_list ":" "aliased"? "constant"? array_type_definition (":=" expression)? ";") | single_task_declaration | single_protected_declaration ;
entry_call_alternative ::= entry_call_statement sequence_of_statements? ;
accept_statement ::= "accept" entry_direct_name ("(" entry_index ")")? parameter_profile ("do" handled_sequence_of_statements "end" entry_identifier?)? ";" ;
accept_alternative ::= accept_statement sequence_of_statements? ;
delay_alternative ::= delay_statement sequence_of_statements? ;
task_type_declaration ::= "task" "type" defining_identifier known_discriminant_part? ("is" task_definition)? ";" ;
parameter_specification ::= (defining_identifier_list ":" mode subtype_mark (":=" default_expression)?) | (defining_identifier_list ":" access_definition (":=" default_expression)?) ;
formal_private_type_definition ::= ("abstract"? "tagged")? "limited"? "private" ;
parameter_association ::= (formal_parameter_selector_name "=>")? explicit_actual_parameter ;
protected_type_declaration ::= "protected" "type" defining_identifier known_discriminant_part? "is" protected_definition ";" ;
generic_instantiation ::= ("package" defining_program_unit_name "is" "new" generic_package_name generic_actual_part? ";") | ("procedure" defining_program_unit_name "is" "new" generic_procedure_name generic_actual_part? ";") | ("function" defining_designator "is" "new" generic_function_name generic_actual_part? ";") ;
access_to_subprogram_definition ::= ("access" "protected"? "procedure" parameter_profile) | ("access" "protected"? "function" parameter_and_result_profile) ;
raise_statement ::= "raise" exception_name? ";" ;
exception_handler ::= "when" (choice_parameter_specification ":")? exception_choice ("|" exception_choice)* "=>" sequence_of_statements ;
range_attribute_designator ::= "Range" ("(" static_expression ")")? ;
single_task_declaration ::= "task" defining_identifier ("is" task_definition)? ";" ;
digits_constraint ::= "digits" static_expression range_constraint? ;
derived_type_definition ::= "abstract"? "new" parent_subtype_indication record_extension_part? ;
component_definition ::= "aliased"? subtype_indication ;
entry_body_formal_part ::= ("(" entry_index_specification ")")? parameter_profile ;
loop_parameter_specification ::= defining_identifier "in" "reverse"? discrete_subtype_definition ;
record_component_association ::= (component_choice_list "=>")? expression ;
formal_subprogram_declaration ::= "with" subprogram_specification ("is" subprogram_default)? ";" ;
entry_body ::= "entry" defining_identifier entry_body_formal_part entry_barrier "is" declarative_part "begin" handled_sequence_of_statements "end" entry_identifier? ";" ;
factor ::= (primary ("**" primary)?) | ("abs" primary) | ("not" primary) ;
task_definition ::= task_item* ("private" task_item*)? "end" task_identifier? ;
if_statement ::= "if" condition "then" sequence_of_statements ("elsif" condition "then" sequence_of_statements)* ("else" sequence_of_statements)? "end" "if" ";" ;
selective_accept ::= "select" guard? select_alternative ("or" guard? select_alternative)* ("else" sequence_of_statements)? "end" "select" ";" ;
formal_object_declaration ::= defining_identifier_list ":" mode subtype_mark (":=" default_expression)? ";" ;
package_specification ::= "package" defining_program_unit_name "is" basic_declarative_item* ("private" basic_declarative_item*)? "end" ((parent_unit_name ".")? identifier)? ;
formal_type_declaration ::= "type" defining_identifier discriminant_part? "is" formal_type_definition ";" ;
parameter_and_result_profile ::= formal_part? "return" subtype_mark ;
simple_expression ::= unary_adding_operator? term (binary_adding_operator term)* ;
delta_constraint ::= "delta" static_expression range_constraint? ;
subtype_indication ::= subtype_mark constraint? ;
decimal_literal ::= numeral ("." numeral)? exponent? ;
private_extension_declaration ::= "type" defining_identifier discriminant_part? "is" "abstract"? "new" ancestor_subtype_indication "with" "private" ";" ;
subprogram_body ::= subprogram_specification "is" declarative_part "begin" handled_sequence_of_statements "end" designator? ";" ;
block_statement ::= (block_statement_identifier ":")? ("declare" declarative_part)? "begin" handled_sequence_of_statements "end" block_identifier? ";" ;
pragma ::= "pragma" identifier ("(" pragma_argument_association ("," pragma_argument_association)* ")")? ";" ;
formal_package_actual_part ::= "(<>)" | (generic_actual_part?) ;
entry_call_statement ::= entry_name actual_parameter_part? ";" ;
component_declaration ::= defining_identifier_list ":" component_definition (":=" default_expression)? ";" ;
incomplete_type_declaration ::= "type" defining_identifier discriminant_part? ";" ;
record_representation_clause ::= "for" first_subtype_local_name "use" "record" mod_clause? component_clause* "end" "record" ";" ;
handled_sequence_of_statements ::= sequence_of_statements ("exception" exception_handler exception_handler*)? ;
private_type_declaration ::= "type" defining_identifier discriminant_part? "is" ("abstract"? "tagged")? "limited"? "private" ";" ;
exponent ::= ("E" "+"? numeral) | ("E" "-" numeral) ;
requeue_statement ::= "requeue" entry_name ("with" "abort")? ";" ;
entry_declaration ::= "entry" defining_identifier ("(" discrete_subtype_definition ")")? parameter_profile ";" ;
identifier ::= identifier_letter (underline? letter_or_digit)* ;
discriminant_specification ::= (defining_identifier_list ":" subtype_mark (":=" default_expression)?) | (defining_identifier_list ":" access_definition (":=" default_expression)?) ;
full_type_declaration ::= ("type" defining_identifier known_discriminant_part? "is" type_definition ";") | task_type_declaration | protected_type_declaration ;
defining_program_unit_name ::= (parent_unit_name ".")? defining_identifier ;
mode ::= ("in"?) | ("in" "out") | "out" ;
discriminant_association ::= (discriminant_selector_name ("|" discriminant_selector_name)* "=>")? expression ;
based_literal ::= base "#" based_numeral ("." based_numeral)? "#" exponent? ;
pragma_argument_association ::= ((pragma_argument_identifier "=>")? name) | ((pragma_argument_identifier "=>")? expression) ;
return_statement ::= "return" expression? ";" ;
numeral ::= digit (underline? digit)* ;
task_body ::= "task" "body" defining_identifier "is" declarative_part "begin" handled_sequence_of_statements "end" task_identifier? ";" ;
generic_association ::= (generic_formal_parameter_selector_name "=>")? explicit_generic_actual_parameter ;
triggering_alternative ::= triggering_statement sequence_of_statements? ;
library_item ::= ("private"? library_unit_declaration) | library_unit_body | ("private"? library_unit_renaming_declaration) ;
attribute_designator ::= (identifier ("(" static_expression ")")?) | "Access" | "Delta" | "Digits" ;
designator ::= ((parent_unit_name ".")? identifier) | operator_symbol ;
loop_statement ::= (loop_statement_identifier ":")? iteration_scheme? "loop" sequence_of_statements "end" "loop" loop_identifier? ";" ;
protected_body ::= "protected" "body" defining_identifier "is" protected_operation_item* "end" protected_identifier? ";" ;
parameter_profile ::= formal_part? ;
based_numeral ::= extended_digit (underline? extended_digit)* ;
exit_statement ::= "exit" loop_name? ("when" condition)? ";" ;
access_to_object_definition ::= "access" general_access_modifier? subtype_indication ;
record_type_definition ::= ("abstract"? "tagged")? "limited"? record_definition ;
formal_derived_type_definition ::= "abstract"? "new" subtype_mark ("with" "private")? ;
protected_definition ::= protected_operation_declaration* ("private" protected_element_declaration*)? "end" protected_identifier? ;
--------------------ada::lncs-4348.bgf--------------------
subprogram_declaration ::= overriding_indicator? subprogram_specification ";" ;
relation ::= (simple_expression (relational_operator simple_expression)?) | (simple_expression "not"? "in" range) | (simple_expression "not"? "in" subtype_mark) ;
package_body ::= "package" "body" defining_program_unit_name "is" declarative_part ("begin" handled_sequence_of_statements)? "end" ((parent_unit_name ".")? identifier)? ";" ;
decimal_fixed_point_definition ::= "delta" static_expression "digits" static_expression real_range_specification? ;
floating_point_definition ::= "digits" static_expression real_range_specification? ;
object_declaration ::= (defining_identifier_list ":" "aliased"? "constant"? subtype_indication (":=" expression)? ";") | (defining_identifier_list ":" "aliased"? "constant"? access_definition (":=" expression)? ";") | (defining_identifier_list ":" "aliased"? "constant"? array_type_definition (":=" expression)? ";") | single_task_declaration | single_protected_declaration ;
entry_call_alternative ::= procedure_or_entry_call sequence_of_statements? ;
accept_statement ::= "accept" entry_direct_name ("(" entry_index ")")? parameter_profile ("do" handled_sequence_of_statements "end" entry_identifier?)? ";" ;
nonlimited_with_clause ::= "private"? "with" library_unit_name ("," library_unit_name)* ";" ;
accept_alternative ::= accept_statement sequence_of_statements? ;
interface_type_definition ::= ("limited" | "task" | "protected" | "synchronized")? "interface" ("and" interface_list)? ;
delay_alternative ::= delay_statement sequence_of_statements? ;
subprogram_body_stub ::= overriding_indicator? subprogram_specification "is" "separate" ";" ;
task_type_declaration ::= "task" "type" defining_identifier known_discriminant_part? ("is" ("new" interface_list "with")? task_definition)? ";" ;
parameter_specification ::= (defining_identifier_list ":" mode null_exclusion? subtype_mark (":=" default_expression)?) | (defining_identifier_list ":" access_definition (":=" default_expression)?) ;
formal_abstract_subprogram_declaration ::= "with" subprogram_specification "is" "abstract" subprogram_default? ";" ;
formal_private_type_definition ::= ("abstract"? "tagged")? "limited"? "private" ;
parameter_association ::= (formal_parameter_selector_name "=>")? explicit_actual_parameter ;
protected_type_declaration ::= "protected" "type" defining_identifier known_discriminant_part? "is" ("new" interface_list "with")? protected_definition ";" ;
extended_return_statement ::= "return" defining_identifier ":" "aliased"? return_subtype_indication (":=" expression)? ("do" handled_sequence_of_statements "end" "return")? ";" ;
generic_instantiation ::= ("package" defining_program_unit_name "is" "new" generic_package_name generic_actual_part? ";") | (overriding_indicator? "procedure" defining_program_unit_name "is" "new" generic_procedure_name generic_actual_part? ";") | (overriding_indicator? "function" defining_designator "is" "new" generic_function_name generic_actual_part? ";") ;
access_to_subprogram_definition ::= ("access" "protected"? "procedure" parameter_profile) | ("access" "protected"? "function" parameter_and_result_profile) ;
limited_with_clause ::= "limited" "private"? "with" library_unit_name ("," library_unit_name)* ";" ;
raise_statement ::= ("raise" ";") | ("raise" exception_name ("with" string_expression)? ";") ;
exception_handler ::= "when" (choice_parameter_specification ":")? exception_choice ("|" exception_choice)* "=>" sequence_of_statements ;
overriding_indicator ::= "not"? "overriding" ;
range_attribute_designator ::= "Range" ("(" static_expression ")")? ;
single_task_declaration ::= "task" defining_identifier ("is" ("new" interface_list "with")? task_definition)? ";" ;
null_procedure_declaration ::= overriding_indicator? procedure_specification "is" "null" ";" ;
digits_constraint ::= "digits" static_expression range_constraint? ;
derived_type_definition ::= "abstract"? "limited"? "new" parent_subtype_indication (("and" interface_list)? record_extension_part)? ;
component_definition ::= ("aliased"? subtype_indication) | ("aliased"? access_definition) ;
entry_body_formal_part ::= ("(" entry_index_specification ")")? parameter_profile ;
loop_parameter_specification ::= defining_identifier "in" "reverse"? discrete_subtype_definition ;
subprogram_renaming_declaration ::= overriding_indicator? subprogram_specification "renames" callable_entity_name ";" ;
record_component_association ::= ((component_choice_list "=>")? expression) | (component_choice_list "=><>") ;
entry_body ::= "entry" defining_identifier entry_body_formal_part entry_barrier "is" declarative_part "begin" handled_sequence_of_statements "end" entry_identifier? ";" ;
factor ::= (primary ("**" primary)?) | ("abs" primary) | ("not" primary) ;
task_definition ::= task_item* ("private" task_item*)? "end" task_identifier? ;
if_statement ::= "if" condition "then" sequence_of_statements ("elsif" condition "then" sequence_of_statements)* ("else" sequence_of_statements)? "end" "if" ";" ;
selective_accept ::= "select" guard? select_alternative ("or" guard? select_alternative)* ("else" sequence_of_statements)? "end" "select" ";" ;
formal_object_declaration ::= defining_identifier_list ":" mode null_exclusion? subtype_mark (":=" default_expression)? ";" defining_identifier_list ":" mode access_definition (":=" default_expression)? ";" ;
package_specification ::= "package" defining_program_unit_name "is" basic_declarative_item* ("private" basic_declarative_item*)? "end" ((parent_unit_name ".")? identifier)? ;
formal_type_declaration ::= "type" defining_identifier discriminant_part? "is" formal_type_definition ";" ;
parameter_and_result_profile ::= (formal_part? "return" null_exclusion? subtype_mark) | (formal_part? "return" access_definition) ;
simple_expression ::= unary_adding_operator? term (binary_adding_operator term)* ;
delta_constraint ::= "delta" static_expression range_constraint? ;
subtype_indication ::= null_exclusion? subtype_mark constraint? ;
decimal_literal ::= numeral ("." numeral)? exponent? ;
private_extension_declaration ::= "type" defining_identifier discriminant_part? "is" "abstract"? ("limited" | "synchronized")? "new" ancestor_subtype_indication ("and" interface_list)? "with" "private" ";" ;
subprogram_body ::= overriding_indicator? subprogram_specification "is" declarative_part "begin" handled_sequence_of_statements "end" designator? ";" ;
block_statement ::= (block_statement_identifier ":")? ("declare" declarative_part)? "begin" handled_sequence_of_statements "end" block_identifier? ";" ;
abstract_subprogram_declaration ::= overriding_indicator? subprogram_specification "is" "abstract" ";" ;
pragma ::= "pragma" identifier ("(" pragma_argument_association ("," pragma_argument_association)* ")")? ";" ;
formal_package_actual_part ::= ("(" ("others" "=>")? "<>)") | (generic_actual_part?) | ("(" formal_package_association ("," formal_package_association)* ("," "others" "=><>")? ")") ;
entry_call_statement ::= entry_name actual_parameter_part? ";" ;
component_declaration ::= defining_identifier_list ":" component_definition (":=" default_expression)? ";" ;
object_renaming_declaration ::= (defining_identifier ":" null_exclusion? subtype_mark "renames" object_name ";") | (defining_identifier ":" access_definition "renames" object_name ";") ;
incomplete_type_declaration ::= "type" defining_identifier discriminant_part? ("is" "tagged")? ";" ;
record_representation_clause ::= "for" first_subtype_local_name "use" "record" mod_clause? component_clause* "end" "record" ";" ;
single_protected_declaration ::= "protected" defining_identifier "is" ("new" interface_list "with")? protected_definition ";" ;
handled_sequence_of_statements ::= sequence_of_statements ("exception" exception_handler exception_handler*)? ;
private_type_declaration ::= "type" defining_identifier discriminant_part? "is" ("abstract"? "tagged")? "limited"? "private" ";" ;
exponent ::= ("E" "+"? numeral) | ("E" "-" numeral) ;
requeue_statement ::= "requeue" entry_name ("with" "abort")? ";" ;
entry_declaration ::= overriding_indicator? "entry" defining_identifier ("(" discrete_subtype_definition ")")? parameter_profile ";" ;
formal_concrete_subprogram_declaration ::= "with" subprogram_specification ("is" subprogram_default)? ";" ;
discriminant_specification ::= (defining_identifier_list ":" null_exclusion? subtype_mark (":=" default_expression)?) | (defining_identifier_list ":" access_definition (":=" default_expression)?) ;
full_type_declaration ::= ("type" defining_identifier known_discriminant_part? "is" type_definition ";") | task_type_declaration | protected_type_declaration ;
defining_program_unit_name ::= (parent_unit_name ".")? defining_identifier ;
mode ::= ("in"?) | ("in" "out") | "out" ;
discriminant_association ::= (discriminant_selector_name ("|" discriminant_selector_name)* "=>")? expression ;
based_literal ::= base "#" based_numeral ("." based_numeral)? "#" exponent? ;
pragma_argument_association ::= ((pragma_argument_identifier "=>")? name) | ((pragma_argument_identifier "=>")? expression) ;
numeral ::= digit (underline? digit)* ;
access_type_definition ::= (null_exclusion? access_to_object_definition) | (null_exclusion? access_to_subprogram_definition) ;
task_body ::= "task" "body" defining_identifier "is" declarative_part "begin" handled_sequence_of_statements "end" task_identifier? ";" ;
generic_association ::= (generic_formal_parameter_selector_name "=>")? explicit_generic_actual_parameter ;
triggering_alternative ::= triggering_statement sequence_of_statements? ;
library_item ::= ("private"? library_unit_declaration) | library_unit_body | ("private"? library_unit_renaming_declaration) ;
attribute_designator ::= (identifier ("(" static_expression ")")?) | "Access" | "Delta" | "Digits" ;
designator ::= ((parent_unit_name ".")? identifier) | operator_symbol ;
loop_statement ::= (loop_statement_identifier ":")? iteration_scheme? "loop" sequence_of_statements "end" "loop" loop_identifier? ";" ;
protected_body ::= "protected" "body" defining_identifier "is" protected_operation_item* "end" protected_identifier? ";" ;
parameter_profile ::= formal_part? ;
based_numeral ::= extended_digit (underline? extended_digit)* ;
exit_statement ::= "exit" loop_name? ("when" condition)? ";" ;
access_definition ::= (null_exclusion? "access" "constant"? subtype_mark) | (null_exclusion? "access" "protected"? "procedure" parameter_profile) | (null_exclusion? "access" "protected"? "function" parameter_and_result_profile) ;
simple_return_statement ::= "return" expression? ";" ;
access_to_object_definition ::= "access" general_access_modifier? subtype_indication ;
record_type_definition ::= ("abstract"? "tagged")? "limited"? record_definition ;
formal_derived_type_definition ::= "abstract"? ("limited" | "synchronized")? "new" subtype_mark (("and" interface_list)? "with" "private")? ;
protected_definition ::= protected_operation_declaration* ("private" protected_element_declaration*)? "end" protected_identifier? ;
--------------------ada::cordy-hyaric.bgf--------------------
subprogram_declaration ::= overriding_indicator? subprogram_specification blocksemi ;
relation ::= (simple_expression relational_operator_simple_expression?) | (simple_expression "not"? "in" range) | (simple_expression "not"? "in" subtype_mark) ;
package_body ::= NL "package" "body" defining_program_unit_name "is" IN blockeol declarative_part EX package_body_statements? "end" package_body_identifier? unitsemi ;
decimal_fixed_point_definition ::= "delta" expression "digits" expression real_range_specification? ;
floating_point_definition ::= "digits" expression real_range_specification? ;
if_expression ::= "if" expression "then" expression elsif_expression* else_expression? ;
object_declaration ::= (defining_identifier_list colon "aliased"? "constant"? subtype_access_or_array_type_definition object_declaration_expression? semi) | single_task_declaration | single_protected_declaration ;
entry_call_alternative ::= procedure_or_entry_call sequence_of_statements? ;
accept_statement ::= "accept" direct_name accept_statement_entry_index? parameter_profile accept_statement_statements? unitsemi ;
nonlimited_with_clause ::= "private"? "with" {with_name ","}+ semi ;
accept_alternative ::= accept_statement sequence_of_statements? ;
interface_type_definition ::= interface_type_definition_modifier? "interface" interface_type_definition_list? ;
delay_alternative ::= delay_statement sequence_of_statements? ;
subprogram_body_stub ::= overriding_indicator? subprogram_specification "is" "separate" blocksemi ;
task_type_declaration ::= "task" "type" defining_identifier known_discriminant_part? task_type_declaration_definition? blocksemi ;
package_body_identifier ::= parent_name_dot? identifier ;
formal_abstract_subprogram_declaration ::= "with" subprogram_specification "is" "abstract" subprogram_default? semi ;
formal_private_type_definition ::= formal_private_type_definition_tagged? "limited"? "private" ;
and_or_xor ::= ("and" "then"?) | ("or" "else"?) | "xor" ;
protected_type_declaration ::= NL "protected" "type" defining_identifier known_discriminant_part? "is" protected_type_declaration_interface_list? eol protected_definition unitsemi ;
extended_return_statement ::= "return" defining_identifier colon "aliased"? return_subtype_indication extended_return_statement_expression? extended_return_statement_do? unitsemi ;
generic_instantiation ::= ("package" defining_program_unit_name "is" generic_instantiation_clause) | (overriding_indicator? "procedure" defining_program_unit_name "is" generic_instantiation_clause) | (overriding_indicator? "function" defining_designator "is" generic_instantiation_clause) ;
access_to_subprogram_definition ::= ("access" "protected"? "procedure" parameter_profile) | ("access" "protected"? "function" parameter_and_result_profile) ;
limited_with_clause ::= "limited" "private"? "with" {with_name ","}+ semi ;
raise_statement ::= ("raise" semi) | ("raise" name raise_statement_expression? semi) ;
exception_handler ::= "when" exception_handler_specification? exception_choice or_exception_choice* arrow sequence_of_statements ;
overriding_indicator ::= "not"? "overriding" ;
range_attribute_designator ::= "range" SPON range_attribute_designator_expression? ;
subtype_or_access_definition ::= (null_exclusion? subtype_mark) | access_definition ;
single_task_declaration ::= "task" defining_identifier single_task_declaration_definition? unitsemi ;
null_procedure_declaration ::= overriding_indicator? procedure_specification "is" "null" blocksemi ;
digits_constraint ::= "digits" expression range_constraint? ;
derived_type_definition ::= "abstract"? "limited"? "new" subtype_indication interface_and_record_extension_specification? ;
component_definition ::= ("aliased"? subtype_indication) | ("aliased"? access_definition) ;
entry_body_formal_part ::= entry_body_formal_part_specification? parameter_profile ;
loop_parameter_specification ::= defining_identifier "in" "reverse"? discrete_subtype_definition ;
subprogram_renaming_declaration ::= overriding_indicator? subprogram_specification "renames" name blocksemi ;
entry_body ::= NL "entry" defining_identifier entry_body_formal_part entry_barrier "is" IN blockeol declarative_part EX "begin" IN eol handled_sequence_of_statements EX "end" identifier? unitsemi ;
factor ::= (primary starstar_primary?) | ("abs" primary) | ("not" primary) ;
task_definition ::= IN task_item* task_definition_private? EX "end" identifier? ;
if_statement ::= "if" condition "then" IN eol sequence_of_statements if_statement_elsif* if_statement_else? EX "end" "if" semi ;
restriction ::= identifier arrow_restriction_parameter_argument? ;
selective_accept ::= "select" IN eol guard? select_alternative selective_accept_or_alternative* selective_accept_else_alternative? EX "end" "select" unitsemi ;
formal_object_declaration ::= (defining_identifier_list colon mode null_exclusion? subtype_mark formal_object_declaration_default? semi) | (defining_identifier_list colon mode access_definition formal_object_declaration_default? semi) ;
package_specification ::= NL "package" defining_program_unit_name "is" IN blockeol basic_declarative_item* EX package_specification_private? "end" package_specification_identifier? ;
formal_type_declaration ::= "type" defining_identifier discriminant_part? "is" formal_type_definition blocksemi ;
selective_accept_or_alternative ::= EX "or" IN eol guard? select_alternative ;
parameter_and_result_profile ::= formal_part? "return" subtype_or_access_definition ;
simple_expression ::= unary_adding_operator? term binary_adding_operator_term* ;
delta_constraint ::= "delta" expression range_constraint? ;
interface_and_record_extension_specification ::= ("and" interface_list record_extension_part?) | record_extension_part ;
record_type_definition_tagged ::= "abstract"? "tagged" ;
subtype_indication ::= null_exclusion? subtype_mark constraint? ;
private_extension_declaration ::= "type" defining_identifier discriminant_part? "is" blockeol "abstract"? private_extension_declaration_modifier? "new" subtype_indication private_extension_declaration_interface_list? "with" "private" blocksemi ;
package_specification_identifier ::= parent_name_dot? identifier ;
formal_derived_type_definition_interface_list ::= and_interface_list? "with" "private" ;
subprogram_body ::= NL overriding_indicator? subprogram_specification "is" IN blockeol declarative_part EX "begin" IN eol handled_sequence_of_statements EX "end" designator? unitsemi ;
block_statement ::= block_statement_identifier_colon? declare_declarative_part? "begin" IN eol handled_sequence_of_statements EX "end" identifier? unitsemi ;
abstract_subprogram_declaration ::= overriding_indicator? subprogram_specification "is" "abstract" blocksemi ;
formal_package_actual_part ::= ("(" others_arrow? "<>" ")") | (generic_actual_part?) | ("(" {formal_package_association ","}+ comma_others_arrow_null? ")") ;
entry_call_statement ::= name actual_parameter_part? semi ;
single_task_declaration_definition ::= "is" IN blockeol single_task_declaration_definition_interface_list? EX task_definition ;
procedure_call_statement ::= prefix actual_parameter_part? semi ;
private_type_declaration_tagged ::= "abstract"? "tagged" ;
component_declaration ::= defining_identifier_list colon component_definition component_declaration_default? semi ;
object_renaming_declaration ::= (defining_identifier colon null_exclusion? subtype_mark "renames" name semi) | (defining_identifier colon access_definition "renames" name semi) ;
incomplete_type_declaration ::= "type" defining_identifier discriminant_part? incomplete_type_declaration_modifier? blocksemi ;
record_representation_clause ::= "for" local_name "use" IN eol "record" mod_clause? IN eol component_clause* EX "end" "record" blocksemi EX ;
single_protected_declaration ::= "protected" defining_identifier "is" blockeol single_protected_declaration_interface_list? protected_definition unitsemi ;
handled_sequence_of_statements ::= sequence_of_statements handled_sequence_of_statements_exception? ;
private_type_declaration ::= "type" defining_identifier discriminant_part? "is" blockeol private_type_declaration_tagged? "limited"? "private" blocksemi ;
requeue_statement ::= "requeue" name requeue_statement_with_abort? semi ;
entry_declaration ::= overriding_indicator? "entry" defining_identifier entry_declaration_subtype? parameter_profile blocksemi ;
formal_concrete_subprogram_declaration ::= "with" subprogram_specification formal_concrete_subprogram_declaration_default? semi ;
discriminant_specification ::= (defining_identifier_list colon null_exclusion? subtype_mark discriminant_specification_default?) | (defining_identifier_list colon access_definition discriminant_specification_default?) ;
full_type_declaration ::= ("type" defining_identifier known_discriminant_part? "is" type_definition blocksemi) | task_type_declaration | protected_type_declaration ;
defining_program_unit_name ::= defining_program_unit_name_parent? defining_identifier ;
task_type_declaration_definition ::= "is" IN blockeol task_type_declaration_definition_interface_list? task_definition EX ;
mode ::= ("in"?) | ("in" "out") | "out" ;
discriminant_association ::= discriminant_selector_name_arrow? expression ;
pragma_argument_association ::= identifier_arrow? expression ;
formal_private_type_definition_tagged ::= "abstract"? "tagged" ;
access_type_definition ::= (null_exclusion? access_to_object_definition) | (null_exclusion? access_to_subprogram_definition) ;
task_body ::= NL "task" "body" defining_identifier "is" IN blockeol declarative_part EX "begin" IN eol handled_sequence_of_statements EX "end" identifier? unitsemi ;
generic_association ::= generic_association_selector_name? explicit_generic_actual_parameter ;
triggering_alternative ::= triggering_statement sequence_of_statements? ;
library_item ::= ("private"? library_unit_declaration) | library_unit_body | ("private"? library_unit_renaming_declaration) ;
attribute_designator ::= (identifier attribute_designator_expression?) | "access" | "delta" | "digits" ;
parameter_type_specification ::= (mode null_exclusion? subtype_mark parameter_specification_default?) | (access_definition parameter_specification_default?) ;
designator ::= (designator_parent_unit_name? identifier) | operator_symbol ;
loop_statement ::= loop_statement_identifier? iteration_scheme? "loop" IN eol sequence_of_statements EX "end" "loop" identifier? blocksemi ;
protected_body ::= "protected" "body" defining_identifier "is" IN blockeol protected_operation_item* EX "end" identifier? unitsemi ;
parameter_profile ::= formal_part? ;
exit_statement ::= "exit" name? exit_statement_when_condition? semi ;
access_definition ::= (null_exclusion? "access" "constant"? subtype_mark) | (null_exclusion? "access" "protected"? "procedure" parameter_profile) | (null_exclusion? "access" "protected"? "function" parameter_and_result_profile) ;
simple_return_statement ::= "return" expression? semi ;
accept_statement_statements ::= "do" IN eol handled_sequence_of_statements EX "end" identifier? ;
access_to_object_definition ::= "access" general_access_modifier? subtype_indication ;
record_type_definition ::= record_type_definition_tagged? "limited"? record_definition ;
generic_instantiation_clause ::= "new" name generic_actual_part? blocksemi ;
formal_derived_type_definition ::= "abstract"? formal_derived_type_definition_modifier? "new" subtype_mark formal_derived_type_definition_interface_list? ;
protected_definition ::= IN protected_operation_declaration* protected_definition_private? EX "end" identifier? ;
--------------------c::iso-9899-1999.bgf--------------------
iteration-statement ::= ("while" "(" expression ")" statement) | ("do" statement "while" "(" expression ")" ";") | ("for" "(" expression? ";" expression? ";" expression? ")" statement) | ("for" "(" declaration expression? ";" expression? ")" statement) ;
type-name ::= specifier-qualifier-list abstract-declarator? ;
pointer ::= ("*" type-qualifier-list?) | ("*" type-qualifier-list? pointer) ;
abstract-declarator ::= pointer | (pointer? direct-abstract-declarator) ;
expression-statement ::= expression? ";" ;
declaration ::= declaration-specifiers init-declarator-list? ";" ;
direct-abstract-declarator ::= ("(" abstract-declarator ")") | (direct-abstract-declarator? "[" assignment-expression? "]") | (direct-abstract-declarator? "[" "*" "]") | (direct-abstract-declarator? "(" parameter-type-list? ")") ;
parameter-declaration ::= (declaration-specifiers declarator) | (declaration-specifiers abstract-declarator?) ;
direct-declarator ::= identifier | ("(" declarator ")") | (direct-declarator "[" type-qualifier-list? assignment-expression? "]") | (direct-declarator "[" "static" type-qualifier-list? assignment-expression "]") | (direct-declarator "[" type-qualifier-list "static" assignment-expression "]") | (direct-declarator "[" type-qualifier-list? "*" "]") | (direct-declarator "(" parameter-type-list ")") | (direct-declarator "(" identifier-list? ")") ;
enum-specifier ::= ("enum" identifier? "{" enumerator-list "}") | ("enum" identifier? "{" enumerator-list "," "}") | ("enum" identifier) ;
declarator ::= pointer? direct-declarator ;
jump-statement ::= ("goto" identifier ";") | ("continue" ";") | ("break" ";") | ("return" expression? ";") ;
postfix-expression ::= primary-expression | (postfix-expression "[" expression "]") | (postfix-expression "(" argument-expression-list? ")") | (postfix-expression "." identifier) | (postfix-expression "->" identifier) | (postfix-expression "++") | (postfix-expression "--") | ("(" type-name ")" "{" initializer-list "}") | ("(" type-name ")" "{" initializer-list "," "}") ;
specifier-qualifier-list ::= (type-specifier specifier-qualifier-list?) | (type-qualifier specifier-qualifier-list?) ;
struct-or-union-specifier ::= (struct-or-union identifier? "{" struct-declaration-list "}") | (struct-or-union identifier) ;
compound-statement ::= "{" block-item-list? "}" ;
initializer-list ::= (designation? initializer) | (initializer-list "," designation? initializer) ;
struct-declarator ::= declarator | (declarator? ":" constant-expression) ;
declaration-specifiers ::= (storage-class-specifier declaration-specifiers?) | (type-specifier declaration-specifiers?) | (type-qualifier declaration-specifiers?) | (function-specifier declaration-specifiers?) ;
function-definition ::= declaration-specifiers declarator declaration-list? compound-statement ;
--------------------c::iso-9899-tc2.bgf--------------------
iteration-statement ::= ("while" "(" expression ")" statement) | ("do" statement "while" "(" expression ")" ";") | ("for" "(" expression? ";" expression? ";" expression? ")" statement) | ("for" "(" declaration expression? ";" expression? ")" statement) ;
type-name ::= specifier-qualifier-list abstract-declarator? ;
pointer ::= ("*" type-qualifier-list?) | ("*" type-qualifier-list? pointer) ;
abstract-declarator ::= pointer | (pointer? direct-abstract-declarator) ;
expression-statement ::= expression? ";" ;
declaration ::= declaration-specifiers init-declarator-list? ";" ;
direct-abstract-declarator ::= ("(" abstract-declarator ")") | (direct-abstract-declarator? "[" assignment-expression? "]") | (direct-abstract-declarator? "[" "*" "]") | (direct-abstract-declarator? "(" parameter-type-list? ")") ;
parameter-declaration ::= (declaration-specifiers declarator) | (declaration-specifiers abstract-declarator?) ;
direct-declarator ::= identifier | ("(" declarator ")") | (direct-declarator "[" type-qualifier-list? assignment-expression? "]") | (direct-declarator "[" "static" type-qualifier-list? assignment-expression "]") | (direct-declarator "[" type-qualifier-list "static" assignment-expression "]") | (direct-declarator "[" type-qualifier-list? "*" "]") | (direct-declarator "(" parameter-type-list ")") | (direct-declarator "(" identifier-list? ")") ;
enum-specifier ::= ("enum" identifier? "{" enumerator-list "}") | ("enum" identifier? "{" enumerator-list "," "}") | ("enum" identifier) ;
declarator ::= pointer? direct-declarator ;
jump-statement ::= ("goto" identifier ";") | ("continue" ";") | ("break" ";") | ("return" expression? ";") ;
postfix-expression ::= primary-expression | (postfix-expression "[" expression "]") | (postfix-expression "(" argument-expression-list? ")") | (postfix-expression "." identifier) | (postfix-expression "->" identifier) | (postfix-expression "++") | (postfix-expression "--") | ("(" type-name ")" "{" initializer-list "}") | ("(" type-name ")" "{" initializer-list "," "}") ;
specifier-qualifier-list ::= (type-specifier specifier-qualifier-list?) | (type-qualifier specifier-qualifier-list?) ;
struct-or-union-specifier ::= (struct-or-union identifier? "{" struct-declaration-list "}") | (struct-or-union identifier) ;
compound-statement ::= "{" block-item-list? "}" ;
initializer-list ::= (designation? initializer) | (initializer-list "," designation? initializer) ;
struct-declarator ::= declarator | (declarator? ":" constant-expression) ;
declaration-specifiers ::= (storage-class-specifier declaration-specifiers?) | (type-specifier declaration-specifiers?) | (type-qualifier declaration-specifiers?) | (function-specifier declaration-specifiers?) ;
function-definition ::= declaration-specifiers declarator declaration-list? compound-statement ;
--------------------c::iso-9899-tc3.bgf--------------------
iteration-statement ::= ("while" "(" expression ")" statement) | ("do" statement "while" "(" expression ")" ";") | ("for" "(" expression? ";" expression? ";" expression? ")" statement) | ("for" "(" declaration expression? ";" expression? ")" statement) ;
type-name ::= specifier-qualifier-list abstract-declarator? ;
pointer ::= ("*" type-qualifier-list?) | ("*" type-qualifier-list? pointer) ;
abstract-declarator ::= pointer | (pointer? direct-abstract-declarator) ;
expression-statement ::= expression? ";" ;
declaration ::= declaration-specifiers init-declarator-list? ";" ;
direct-abstract-declarator ::= ("(" abstract-declarator ")") | (direct-abstract-declarator? "[" type-qualifier-list? assignment-expression? "]") | (direct-abstract-declarator? "[" "static" type-qualifier-list? assignment-expression "]") | (direct-abstract-declarator? "[" type-qualifier-list "static" assignment-expression "]") | (direct-abstract-declarator? "[" "*" "]") | (direct-abstract-declarator? "(" parameter-type-list? ")") ;
parameter-declaration ::= (declaration-specifiers declarator) | (declaration-specifiers abstract-declarator?) ;
direct-declarator ::= identifier | ("(" declarator ")") | (direct-declarator "[" type-qualifier-list? assignment-expression? "]") | (direct-declarator "[" "static" type-qualifier-list? assignment-expression "]") | (direct-declarator "[" type-qualifier-list "static" assignment-expression "]") | (direct-declarator "[" type-qualifier-list? "*" "]") | (direct-declarator "(" parameter-type-list ")") | (direct-declarator "(" identifier-list? ")") ;
enum-specifier ::= ("enum" identifier? "{" enumerator-list "}") | ("enum" identifier? "{" enumerator-list "," "}") | ("enum" identifier) ;
declarator ::= pointer? direct-declarator ;
jump-statement ::= ("goto" identifier ";") | ("continue" ";") | ("break" ";") | ("return" expression? ";") ;
postfix-expression ::= primary-expression | (postfix-expression "[" expression "]") | (postfix-expression "(" argument-expression-list? ")") | (postfix-expression "." identifier) | (postfix-expression "->" identifier) | (postfix-expression "++") | (postfix-expression "--") | ("(" type-name ")" "{" initializer-list "}") | ("(" type-name ")" "{" initializer-list "," "}") ;
specifier-qualifier-list ::= (type-specifier specifier-qualifier-list?) | (type-qualifier specifier-qualifier-list?) ;
struct-or-union-specifier ::= (struct-or-union identifier? "{" struct-declaration-list "}") | (struct-or-union identifier) ;
compound-statement ::= "{" block-item-list? "}" ;
initializer-list ::= (designation? initializer) | (initializer-list "," designation? initializer) ;
struct-declarator ::= declarator | (declarator? ":" constant-expression) ;
declaration-specifiers ::= (storage-class-specifier declaration-specifiers?) | (type-specifier declaration-specifiers?) | (type-qualifier declaration-specifiers?) | (function-specifier declaration-specifiers?) ;
function-definition ::= declaration-specifiers declarator declaration-list? compound-statement ;
--------------------c::antoniol.bgf--------------------
else_part ::= "//"? elsedef_line newline line* ;
elsif_part ::= "//"? elsifdef_line newline line* ;
ifdef ::= "//"? ifdef_line newline line* elsif_part* else_part? "//"? endifdef_line newline ;
line ::= ifdef | ("//"? other_preprocessor_line newline) | ("//"? any_other_line newline) ;
--------------------c::malton-dahn.bgf--------------------
asm_spec ::= asm_or_cv+ "(" asm_template asm_output_operands? asm_input_operands? asm_clobbered_registers? ")" ;
jump_statement ::= ("goto" label_id semi) | ("continue" semi) | ("break" semi) | ("return" expression? semi) ;
 jump_statement ::= "goto" ptr_operator expression semi ;
struct_or_union_specifier ::= (struct_or_union tagged_reference_id? "{" IN NL member_declaration* EX "}") | (struct_or_union tagged_reference_id) ;
 struct_or_union_specifier ::= (struct_or_union attribute_spec* tagged_reference_id? "{" IN NL member_declaration* EX "}" attribute_spec*) | (struct_or_union attribute_spec* tagged_reference_id) ;
compound_literal ::= ("(" struct_or_union_specifier ")" "{" {designated_initializer ","}* ","? "}") | ("(" compound_literal_array_type ")" "{" {designated_initializer ","}* ","? "}") | ("(" compound_literal ")") ;
compound_statement ::= "{" IN NL compound_statement_body "}" ";"? NL ;
 compound_statement ::= comment_NL* "..." ;
 compound_statement ::= "{" NL compound_statement_body* "}" ";"? NL ;
function_definition ::= NL decl_specifiers declarator KR_parameter_decls? compound_statement NL ;
type_specifiers ::= (type_qualifier+ type_specifier? type_qualifier*) | (type_specifier type_qualifier*) ;
 type_specifiers ::= (type_qualifier* type_specifier type_qualifier*) | (type_qualifier*) ;
for_statement ::= "for" "(" expression? ";" expression? ";" expression? ")" statement ;
 for_statement ::= "for" "(" declaration_body ";" expression? ";" expression? ")" statement ;
argument_declaration ::= (decl_specifiers argument_declarator?) | "..." ;
 argument_declaration ::= comment_NL* "..." ;
 argument_declaration ::= "..." comment_NL* ;
array_declarator_extension ::= "[" constant_expression? "]" ;
struct_or_union_designator ::= "."? id postfix_extension* ;
member_declarator ::= (declarator bitfieldsize?) | bitfieldsize ;
 member_declarator ::= (declarator bitfieldsize? attributes_or_asm*) | bitfieldsize ;
postfix_extension ::= ("[" expression "]") | ("(" expression? ")") | ("." id) | ("->" id) | "++" | "--" ;
 postfix_extension ::= ("[" expression "]") | ("(" {argument_expression ","}* ")") | ("." id) | ("->" id) | "++" | "--" ;
designated_initializer ::= assignment_expression | (designator* designator_assignment? assignment_expression) | (designator* designator_assignment? NL "{" IN {designated_initializer ","}* ","? EX "}") ;
conditional_expression ::= binary_expression conditional_operation? ;
 conditional_expression ::= binary_expression conditional_operation* ;
type_name ::= type_specifiers abstract_declarator? ;
preprocessor ::= ("#define" id "(" id+ ")" expression NL) | ("#define" id expression NL) | (EX "#else" IN NL) | (EX "#endif" NL NL) | (NL "#if" expression IN NL) | (NL "#ifdef" id IN NL) | (NL "#ifndef" id IN NL) | ("#ident" stringlit NL) | ("#include" stringlit NL) | ("#include" "<" SPOFF filepath ">" SPON NL) | ("#line" integernumber stringlit? NL) | ("#undef" id NL) | ("#LINK" stringlit NL) ;
 preprocessor ::= (EX "#endif" comment_NL? NL) | "..." ;
 preprocessor ::= "..." comment_NL? ;
 preprocessor ::= ("#" integernumber string integernumber* NL) | ("#pragma" SPON id* "(" {id ","}* ")" NL) ;
conditional_operation ::= "?" expression ":" conditional_expression ;
 conditional_operation ::= "?" expression? ":" binary_expression ;
if_statement ::= "if" "(" expression ")" statement else_statement? ;
 if_statement ::= "if" "(" expression ")" comment_NL* statement else_statement? ;
decl_specifiers ::= decl_qualifier* type_specifier? decl_qualifier* ;
 decl_specifiers ::= (decl_qualifier* type_specifier decl_qualifier*) | (decl_qualifier*) ;
assignment_expression ::= conditional_expression assignment_operation? ;
 assignment_expression ::= conditional_expression | (conditional_expression assignment_operation) ;
enumerator ::= reference_id enumerator_value? ;
initializer ::= expression | (NL "{" IN {initializer ","}* ","? EX "}") ;
 initializer ::= comment_NL* "..." ;
 initializer ::= assignment_expression | (NL "{" IN {designated_initializer ","}* ","? EX "}") ;
init_declarator ::= declarator initialization? ;
 init_declarator ::= declarator initialization? attributes_or_asm* ;
enum_specifier ::= ("enum" tagged_reference_id? "{" {enumerator ","}* "}") | ("enum" tagged_reference_id) ;
 enum_specifier ::= ("enum" tagged_reference_id) | ("enum" tagged_reference_id? "{" {enumerator ","}* ","? "}") ;
--------------------c::cordy-malton-dahn.bgf--------------------
asm_spec ::= (asm cv_qualifier* "(" IN asm_template asm_output_operands? asm_input_operands? asm_clobbered_registers? EX ")") | (asm cv_qualifier* "{" IN asm_instruction_semi* asm_instruction semi? EX "}") ;
constructor_expression ::= ("(" constructor_type ")" "{" {initializer ","}* ","? "}") | ("(" constructor_expression ")") ;
extern_langauge_declaration ::= "extern" stringlit "{" IN NL declaration* EX "}" ";"? NL ;
for_statement ::= ("for" "(" expression_list? ";" expression_list? ";" expression_list? ")" sub_statement) | ("for" "(" decl_specifiers init_declarator+ ";" expression_list? ";" expression_list? ")" sub_statement) | ("for" "(" expression_list? ";" expression_list? ")" sub_statement) | (foreachid "(" expression_list ")" sub_statement) ;
error_statement ::= "error" ":"? id+ "+"? id* semi? ;
argument_declaration ::= (decl_specifiers argument_declarator?) | ("(" argument_declaration ")") ;
simple_statement_opt_semi ::= simple_statement semi? ;
machinestart_declaration ::= "MACHINE_START" "(" expression_list ")" IN {initializer ","}* ","? EX NL "MACHINE_END" ";"? NL ;
member_declarator ::= (declarator bitfieldsize? sub_member_declarators? attributes_or_asm*) | bitfieldsize ;
postfix_extension ::= ("[" SPON assignment_expression SPOFF "]") | (SP "(" SPON {argument_expression ","}* dotdot? SPOFF ")") | ("." id) | ("->" id macro_call?) | "++" | "--" ;
pseudo_string ::= ps_name ps_arguments? ;
conditional_expression ::= logical_OR_expression conditional_operation? ;
preprocessor_list_initializer ::= preprocessor {initializer ","}* ","? ;
element_label ::= "."? element_name element_name_extension* ;
conditional_operation ::= "?" expression? ":" conditional_expression ;
decl_qualifier_or_type_specifier ::= decl_qualifier | type_specifier | (macro_specifier nosemiNL?) ;
while_statement ::= ("while" "(" expression_list ")" sub_statement else_statement?) | (whileeachid "(" expression_list ")" sub_statement else_statement?) ;
initialization ::= (initdata? "=" initializer) | ("(" constant_expression ")") | macro_call ;
base_declarator ::= reference_id | (SPON "(" decl_specifiers? declarator ")") ;
jump_statement ::= ("goto" label_id) | "continue" | "break" | ("return" expression?) | ("goto" ptr_operator expression) | ("return" expression attribute_spec?) ;
attribute_extension ::= attribute_name attribute_arguments? ;
struct_or_union_specifier ::= (struct_or_union attribute_spec* reference_id? struct_or_union_body attribute_spec*) | (struct_or_union attribute_spec* reference_id attribute_spec*) ;
compound_statement ::= "{" IN NL compound_statement_body EX "}" ";"? NL preprocessor* ;
argument_expression ::= (preprocessor* id? assignment_expression id? colon_number? preprocessor*) | type_name | structured_statement | equality_operator | relational_operator | (assignment_operator assignment_expression) | "do" | "extern" | "continue" | Îµ ;
function_definition ::= NL function_header preprocessor_function_header* KR_parameter_decls? compound_statement NL ;
register_spec ::= ("%" SPOFF "%"? id SPON) | ("%" SPOFF "%"? integernumber id? SPON) ;
array_declarator_extension ::= "[" constant_expression? "]" ;
ptr_operator ::= (nf_qualifier? "*" SPOFF ptr_qualifier*) | (nf_qualifier? "(" "*" ")" SPOFF ptr_qualifier*) ;
function_header ::= (decl_specifiers? declarator function_declarator_extension attribute_spec*) | ("YY_DECL" NL) ;
compound_initializer ::= ("{" "}") | ("{" IN {initializer ","}* ","? ";"? preprocessor_list_initializer* EX NL "}") ;
if_statement ::= ("if" "(" expression_list preprocessor* ")" sub_statement else_statement?) | ("if" postfix_expression sub_statement else_statement?) ;
macro_declaration_or_statement ::= (reference_id_equals? macro_call equals_initializer? ";"? NL) | (upper_macro_name ";"? NL) ;
expression_statement ::= pre_increment_operator* assignment_expression assign_assignment_expression* comma_expression_statement? ;
asm_operand ::= (bracketed_id? string "(" expression ")") | (pseudo_string "(" expression ")") ;
argument_declaration_list ::= {argument_declaration ","}* comma_dotdotdot? ;
KR_simple_declaration ::= decl_specifiers? KR_simple_type_name decl_specifiers? declarator+ semi ;
enumerator ::= preprocessor* reference_id enumerator_value? ;
primary ::= reference_id | constant | string | ("(" SPON expression_list ","? ")") | ("{" SPON expression_list ","? "}") | (SPON extension_specifier "(" expression_list ")") | (SPON constructor_expression) | (SPON asm_spec) ;
initializer_unit ::= assignment_expression | compound_initializer | (NL element_label colon_equals_or_equals? initializer ";"?) | (NL "[" constant_expression dotdotdot? constant_expression? "]" "="? initializer ";"?) | macro_call ;
init_declarator ::= declarator attributes_or_asm* initialization? ;
enum_specifier ::= ("enum" reference_id) | ("enum" reference_id? "{" {enumerator ","}* ","? preprocessor* "}") ;
--------------------c::cordy-malton.bgf--------------------
jump_statement ::= ("goto" label_id semi) | ("continue" semi) | ("break" semi) | ("return" expression? semi) ;
struct_or_union_specifier ::= (struct_or_union tagged_reference_id? "{" IN NL member_declaration* EX "}") | (struct_or_union tagged_reference_id) ;
compound_statement ::= "{" IN NL compound_statement_body "}" ";"? NL ;
function_definition ::= NL decl_specifiers declarator KR_parameter_decls? compound_statement NL ;
type_specifiers ::= (type_qualifier+ type_specifier? type_qualifier*) | (type_specifier type_qualifier*) ;
for_statement ::= "for" "(" expression? ";" expression? ";" expression? ")" statement ;
argument_declaration ::= (decl_specifiers argument_declarator?) | "..." ;
array_declarator_extension ::= "[" constant_expression? "]" ;
member_declarator ::= (declarator bitfieldsize?) | bitfieldsize ;
postfix_extension ::= ("[" expression "]") | ("(" expression? ")") | ("." id) | ("->" id) | "++" | "--" ;
conditional_expression ::= binary_expression conditional_operation? ;
type_name ::= type_specifiers abstract_declarator? ;
preprocessor ::= ("#define" id "(" id+ ")" expression NL) | ("#define" id expression NL) | (EX "#else" IN NL) | (EX "#endif" NL NL) | (NL "#if" expression IN NL) | (NL "#ifdef" id IN NL) | (NL "#ifndef" id IN NL) | ("#ident" stringlit NL) | ("#include" stringlit NL) | ("#include" "<" SPOFF filepath ">" SPON NL) | ("#line" integernumber stringlit? NL) | ("#undef" id NL) | ("#LINK" stringlit NL) ;
if_statement ::= "if" "(" expression ")" statement else_statement? ;
decl_specifiers ::= decl_qualifier* type_specifier? decl_qualifier* ;
assignment_expression ::= conditional_expression assignment_operation? ;
enumerator ::= reference_id enumerator_value? ;
initializer ::= expression | (NL "{" IN {initializer ","}* ","? EX "}") ;
init_declarator ::= declarator initialization? ;
enum_specifier ::= ("enum" tagged_reference_id? "{" {enumerator ","}* "}") | ("enum" tagged_reference_id) ;
--------------------c::lankamp.bgf--------------------
Statement ::= "default" ":" Statement ;
 Statement ::= "switch" "(" Expression ")" Statement ;
 Statement ::= "return" ";" ;
 Statement ::= "for" "(" Expression? ";" Expression? ";" Expression? ")" Statement ;
 Statement ::= "case" Expression ":" Statement ;
 Statement ::= "continue" ";" ;
 Statement ::= ";" ;
 Statement ::= "goto" Identifier ";" ;
 Statement ::= "do" Statement "while" "(" Expression ")" ";" ;
 Statement ::= "{" Declaration* Statement* "}" ;
 Statement ::= "while" "(" Expression ")" Statement ;
 Statement ::= "break" ";" ;
 Statement ::= "if" "(" Expression ")" Statement ;
 Statement ::= Identifier ":" Statement ;
 Statement ::= Expression ";" ;
 Statement ::= "if" "(" Expression ")" Statement "else" Statement ;
 Statement ::= "return" Expression ";" ;
PrototypeParameters ::= "void" ;
 PrototypeParameters ::= {PrototypeParameter ","}+ MoreParameters? ;
Parameters ::= {Parameter ","}+ MoreParameters? ;
 Parameters ::= "void" ;
StructDeclarator ::= Declarator ;
 StructDeclarator ::= Declarator? ":" Expression ;
AbstractDeclarator ::= [Identifier] AnonymousIdentifier ;
 AbstractDeclarator ::= [ArrayDeclarator] decl::AbstractDeclarator "[" exp::(Expression?) "]" ;
 AbstractDeclarator ::= [Bracket] "(" decl::AbstractDeclarator ")" ;
 AbstractDeclarator ::= [FunctionDeclarator] decl::AbstractDeclarator "(" params::(Parameters?) ")" ;
 AbstractDeclarator ::= [PointerDeclarator] "*" qualifiers::(TypeQualifier*) decl::AbstractDeclarator ;
PrototypeDeclarator ::= [FunctionDeclarator] decl::PrototypeDeclarator "(" params::(PrototypeParameters?) ")" ;
 PrototypeDeclarator ::= [Identifier] Identifier ;
 PrototypeDeclarator ::= [Bracket] "(" decl::AbstractDeclarator ")" ;
 PrototypeDeclarator ::= [ArrayDeclarator] decl::PrototypeDeclarator "[" exp::(Expression?) "]" ;
 PrototypeDeclarator ::= [PointerDeclarator] "*" qualifiers::(TypeQualifier*) decl::PrototypeDeclarator ;
Initializer ::= "{" {Initializer ","}+ ","? "}" ;
 Initializer ::= NonCommaExpression ;
Declarator ::= [ArrayDeclarator] decl::Declarator "[" exp::(Expression?) "]" ;
 Declarator ::= [Identifier] Identifier ;
 Declarator ::= [FunctionDeclarator] decl::Declarator "(" params::(Parameters?) ")" ;
 Declarator ::= [Bracket] "(" decl::Declarator ")" ;
 Declarator ::= [PointerDeclarator] "*" qualifiers::(TypeQualifier*) decl::Declarator ;
--------------------cpp::iso-n2723.bgf--------------------
braced-init-list ::= ("{" initializer-list ","? "}") | ("{" "}") ;
iteration-statement ::= ("while" "(" condition ")" statement) | ("do" statement "while" "(" expression ")" ";") | ("for" "(" for-init-statement condition? ";" expression? ")" statement) ;
new-declarator ::= (ptr-operator new-declarator?) | direct-new-declarator ;
type-id-list ::= (type-id "..."?) | (type-id-list "," type-id "..."?) ;
type-specifier-seq ::= type-specifier type-specifier-seq? ;
linkage-specification ::= ("extern" string-literal "{" declaration-seq? "}") | ("extern" string-literal declaration) ;
delete-expression ::= ("::"? "delete" cast-expression) | ("::"? "delete" "[" "]" cast-expression) ;
expression-statement ::= expression? ";" ;
lambda-introducer ::= "[" lambda-capture? "]" ;
function-body ::= (ctor-initializer? compound-statement) | function-try-block ;
explicit-instantiation ::= "extern"? "template" declaration ;
unnamed-namespace-definition ::= "inline"? "namespace" "{" namespace-body "}" ;
enum-specifier ::= (enum-key identifier? enum-base? "{" enumerator-list? "}") | (enum-key identifier? enum-base? "{" enumerator-list "," "}") ;
postfix-expression ::= primary-expression | (postfix-expression "[" expression "]") | (postfix-expression "[" braced-init-list "]") | (postfix-expression "(" expression-list? ")") | (simple-type-specifier "(" expression-list? ")") | (typename-specifier "(" expression-list? ")") | (simple-type-specifier braced-init-list) | (typename-specifier braced-init-list) | (postfix-expression "." "template"? id-expression) | (postfix-expression "->" "template"? id-expression) | (postfix-expression "." pseudo-destructor-name) | (postfix-expression "->" pseudo-destructor-name) | (postfix-expression "++") | (postfix-expression "--") | ("dynamic_cast" "<" type-id ">" "(" expression ")") | ("static_cast" "<" type-id ">" "(" expression ")") | ("reinterpret_cast" "<" type-id ">" "(" expression ")") | ("const_cast" "<" type-id ">" "(" expression ")") | ("typeid" "(" expression ")") | ("typeid" "(" type-id ")") ;
decl-specifier-seq ::= decl-specifier-seq? decl-specifier ;
qualified-id ::= ("::"? nested-name-specifier "template"? unqualified-id) | ("::" identifier) | ("::" operator-function-id) | ("::" template-id) ;
mem-initializer ::= (mem-initializer-id "(" expression-list? ")") | (mem-initializer-id braced-init-list) ;
function-definition ::= (decl-specifier-seq? declarator function-body) | (decl-specifier-seq? declarator "=" "default" ";") | (decl-specifier-seq? declarator "=" "delete" ";") ;
simple-type-specifier ::= ("::"? nested-name-specifier? type-name) | ("::"? nested-name-specifier "template" simple-template-id) | "char" | "char16_t" | "char32_t" | "wchar_t" | "bool" | "short" | "int" | "long" | "signed" | "unsigned" | "float" | "double" | "void" | "auto" | ("decltype" "(" expression ")") ;
new-expression ::= ("::"? "new" new-placement? new-type-id new-initializer?) | ("::"? "new" new-placement? "(" type-id ")" new-initializer?) ;
cv-qualifier-seq ::= cv-qualifier cv-qualifier-seq? ;
new-type-id ::= type-specifier-seq new-declarator? ;
throw-expression ::= "throw" assignment-expression? ;
simple-declaration ::= decl-specifier-seq? init-declarator-list? ";" ;
mem-initializer-id ::= ("::"? nested-name-specifier? class-name) | identifier ;
lambda-expression ::= lambda-introducer lambda-parameter-declaration? compound-statement ;
handler-seq ::= handler handler-seq? ;
direct-abstract-declarator ::= (direct-abstract-declarator? "(" parameter-declaration-clause ")" cv-qualifier-seq? ref-qualifier? exception-specification?) | (direct-abstract-declarator? "(" parameter-declaration-clause ")" cv-qualifier-seq? ref-qualifier? exception-specification? "->" type-id) | (direct-abstract-declarator? "[" constant-expression? "]") | ("(" abstract-declarator ")") ;
conversion-type-id ::= type-specifier-seq conversion-declarator? ;
type-parameter ::= ("class" "..."? identifier?) | ("class" identifier? "=" type-id) | ("typename" "..."? identifier?) | ("typename" identifier? "=" type-id) | ("template" "<" template-parameter-list ">" "class" "..."? identifier?) | ("template" "<" template-parameter-list ">" "class" identifier? "=" id-expression) ;
parameter-declaration ::= (decl-specifier-seq declarator) | (decl-specifier-seq declarator "=" assignment-expression) | (decl-specifier-seq abstract-declarator?) | (decl-specifier-seq abstract-declarator? "=" assignment-expression) ;
namespace-body ::= declaration-seq? ;
extension-namespace-definition ::= "inline"? "namespace" original-namespace-name "{" namespace-body "}" ;
pseudo-destructor-name ::= ("::"? nested-name-specifier? type-name "::" "~" type-name) | ("::"? nested-name-specifier "template" simple-template-id "::" "~" type-name) | ("::"? nested-name-specifier? "~" type-name) ;
lambda-parameter-declaration ::= "(" lambda-parameter-declaration-list? ")" "mutable"? exception-specification? lambda-return-type-clause? ;
template-id ::= simple-template-id | (operator-function-id "<" template-argument-list? ">") ;
compound-statement ::= "{" statement-seq? "}" ;
base-specifier-list ::= (base-specifier "..."?) | (base-specifier-list "," base-specifier "..."?) ;
conversion-declarator ::= ptr-operator conversion-declarator? ;
member-declaration ::= (decl-specifier-seq? member-declarator-list? ";") | (function-definition ";"?) | ("::"? nested-name-specifier "template"? unqualified-id ";") | using-declaration | static_assert-declaration | template-declaration ;
using-directive ::= "using" "namespace" "::"? nested-name-specifier? namespace-name ";" ;
function-try-block ::= "try" ctor-initializer? compound-statement handler-seq ;
parameter-declaration-clause ::= (parameter-declaration-list? "..."?) | (parameter-declaration-list "," "...") ;
member-declarator ::= (declarator pure-specifier?) | (declarator constant-initializer?) | (identifier? ":" constant-expression) ;
base-specifier ::= ("::"? nested-name-specifier? class-name) | ("virtual" access-specifier? "::"? nested-name-specifier? class-name) | (access-specifier "virtual"? "::"? nested-name-specifier? class-name) ;
abstract-declarator ::= (ptr-operator abstract-declarator?) | direct-abstract-declarator | "..." ;
elaborated-type-specifier ::= (class-key "::"? nested-name-specifier? identifier) | (class-key "::"? nested-name-specifier? "template"? simple-template-id) | (enum-key "::"? nested-name-specifier? identifier) ;
declarator-id ::= ("..."? id-expression) | ("::"? nested-name-specifier? class-name) ;
typename-specifier ::= ("typename" "::"? nested-name-specifier identifier) | ("typename" "::"? nested-name-specifier "template"? simple-template-id) ;
new-initializer ::= ("(" expression-list? ")") | braced-init-list ;
simple-template-id ::= template-name "<" template-argument-list? ">" ;
using-declaration ::= ("using" "typename"? "::"? nested-name-specifier unqualified-id ";") | ("using" "::" unqualified-id ";") ;
class-specifier ::= class-head "{" member-specification? "}" ;
initializer-list ::= (initializer-clause "..."?) | (initializer-list "," initializer-clause "..."?) ;
template-declaration ::= "export"? "template" "<" template-parameter-list ">" declaration ;
ptr-operator ::= ("*" cv-qualifier-seq?) | "&" | "&&" | ("::"? nested-name-specifier "*" cv-qualifier-seq?) ;
mem-initializer-list ::= (mem-initializer "..."?) | (mem-initializer "," mem-initializer-list "..."?) ;
translation-unit ::= declaration-seq? ;
qualified-namespace-specifier ::= "::"? nested-name-specifier? namespace-name ;
template-argument-list ::= (template-argument "..."?) | (template-argument-list "," template-argument "..."?) ;
class-head ::= (class-key identifier? base-clause?) | (class-key nested-name-specifier identifier base-clause?) | (class-key nested-name-specifier? simple-template-id base-clause?) ;
direct-declarator ::= declarator-id | (direct-declarator "(" parameter-declaration-clause ")" cv-qualifier-seq? ref-qualifier? exception-specification?) | (direct-declarator "(" parameter-declaration-clause ")" cv-qualifier-seq? ref-qualifier? exception-specification? "->" type-id) | (direct-declarator "[" constant-expression? "]") | ("(" declarator ")") ;
nested-name-specifier ::= (type-name "::") | (namespace-name "::") | (nested-name-specifier identifier "::") | (nested-name-specifier "template"? simple-template-id "::") ;
jump-statement ::= ("break" ";") | ("continue" ";") | ("return" expression? ";") | ("return" braced-init-list ";") | ("goto" identifier ";") ;
member-specification ::= (member-declaration member-specification?) | (access-specifier ":" member-specification?) ;
type-id ::= type-specifier-seq abstract-declarator? ;
init-declarator ::= declarator initializer? ;
exception-specification ::= "throw" "(" type-id-list? ")" ;
original-namespace-definition ::= "inline"? "namespace" identifier "{" namespace-body "}" ;
--------------------cpp::elges-cordy.bgf--------------------
comma_dotdotdot ::= ","? "..." ;
using_declaration ::= ("using" "::"? nested_name_spec? name ";") | ("using" "namespace" "::"? nested_name_spec? id ";") ;
selection_statement ::= ("if" "(" expression ")" statement else_statement?) | ("switch" "(" expression ")" statement) ;
elaborated_type_specifier ::= (class_key "::"? nested_name_spec? class_name) | ("enum" "::"? nested_name_spec? id) ;
class_definition ::= NL storage_class_specifier* class_specifier declarator_list? ";" NL NL ;
declaration ::= asm_declaration | class_definition | function_definition | namespace_definition | template_declaration | linkage_specification | exception_specification | using_declaration | (decl_specifiers? declarator_list ";" NL) | (decl_specifiers ";" NL) | (";" NL) | (preprocessor NL) ;
mem_initializer ::= "::"? nested_name_spec? class_name "(" expression_list? ")" ;
namespace_definition ::= ("namespace" id? "{" NL IN declaration_list? EX "}" NL NL) | ("namespace" id "=" qualified_namespace_spec) ;
deallocation_expression ::= ("::"? "delete" cast_expression) | ("::"? "delete" "[" expression? "]" cast_expression) ;
for_init_statement ::= (expression ";") | (decl_specifiers? declarator_list ";") | (decl_specifiers ";") | ";" ;
initial_value ::= assignment_expression | ("{" IN initializer_list ","? EX "}") ;
member_declarator ::= (declarator initializer?) | (id? SPOFF ":" SPON constant_expression) ;
postfix_extension ::= ("[" expression? "]") | ("(" expression_list? ")") | ("." name) | ("->" name) | "++" | "--" ;
handler_list ::= handler handler_list? ;
class_name ::= id template_arguments? ;
conditional_expression ::= binary_expression conditional_operation? ;
declarator_extension ::= (parenthesized_parameter_declaration_list const_volatile_qualifier_list?) | ("[" constant_expression? "]") ;
allocation_declarator ::= allocation_array_declarator | ("*" const_volatile_qualifier_list? allocation_declarator?) | ("::"? nested_name_spec "*" const_volatile_qualifier_list? allocation_declarator?) | (qualified_name "::" "*" const_volatile_qualifier_list? allocation_declarator?) ;
declared_name ::= (nested_name_spec? name) | ("~" SPOFF id SPON) ;
type_name ::= type_specifiers abstract_declarator? ;
function_body ::= (NL compound_statement ";"? NL) | ("try" ctor_initializer? NL compound_statement ";"? NL handler_list) ;
nested_name_spec ::= class_or_namespace_name "::" nested_name_spec? ;
pointer_operator ::= (stars const_volatile_qualifier_list?) | ("&" const_volatile_qualifier_list?) | (id "::" stars const_volatile_qualifier_list?) | ("::"? nested_name_spec "*" const_volatile_qualifier_list) ;
operator ::= "new" | "delete" | "+" | "-" | "*" | "/" | "%" | "^" | "&" | "|" | "~" | "!" | "=" | "<" | ">" | "+=" | "-=" | "-+" | "*=" | "/=" | "%=" | "^=" | "&=" | "|=" | "<<" | ">>" | ">>=" | "<<=" | "==" | "!=" | "<=" | ">=" | "&&" | "||" | "++" | "--" | "," | "->*" | "->" | ("(" type_specifier? ")") | ("[" "]") ;
parameter_declaration ::= decl_specifiers parameter_declarator equal_expression? ;
simple_type_name ::= "char" | "bool" | "short" | "int" | "long" | "signed" | "unsigned" | "float" | "double" | "void" | ("::"? nested_name_spec? id) | ("::"? nested_name_spec? template_class_name) ;
postfix_expression ::= (primary_expression postfix_extension*) | (simple_type_name "(" expression_list? ")" postfix_extension*) ;
initializer ::= ("=" initial_value) | ("(" expression_list? ")") ;
abstract_extension ::= ("(" parameter_declaration_list ")" const_volatile_qualifier_list?) | ("[" constant_expression? "]") | pointer_operator | ("(" abstract_declarator ")") ;
qualified_namespace_spec ::= "::"? nested_name_spec? class_or_namespace_name ;
dot_slash_identifier ::= "."? "/"? file_identifier ;
initializer_element ::= assignment_expression | (NL "{" IN initializer_list ","? EX "}") ;
jump_statement ::= ("break" ";" NL) | ("continue" ";" NL) | ("return" expression? ";" NL) | ("goto" id ";" NL) ;
enum_list ::= enumerator+ ","? ;
compound_statement ::= "{" NL IN statement_list? EX "}" NL ;
number_constant ::= ("-"? number) | hexnumber ;
member ::= access_specifier_colon? member_declaration ;
function_definition ::= NL decl_specifiers? function_declarator ctor_initializer? exception_specification? function_body ;
parameter_declaration_list ::= {parameter_declaration ","}* comma_dotdotdot? ;
allocation_expression ::= "::"? "new" placement? allocation_type_name initializer? ;
allocation_array_declarator ::= ("[" expression? "]") | (allocation_array_declarator "[" expression? "]") ;
member_declaration ::= (function_definition ";"?) | (qualified_name ";" NL) | using_declaration | (decl_specifiers? member_declarator_list ";" NL) | (decl_specifiers ";" NL) | (";" NL) | (preprocessor NL) ;
exception_specification ::= "throw" "(" type_list? ")" ;
allocation_type_name ::= (type_specifiers allocation_declarator?) | ("(" type_name ")" allocation_declarator?) ;
throw_expression ::= "throw" assignment_expression? ;
base_specifier ::= ("::"? nested_name_spec? class_name) | ("virtual" access_specifier? "::"? nested_name_spec? class_name) | (access_specifier "virtual"? "::"? nested_name_spec? class_name) ;
preprocessor ::= ("#define" id "(" id+ ")" expression) | ("#define" id expression) | (EX "#else" IN) | (EX "#endif" NL) | (NL "#if" expression IN) | (NL "#ifdef" id IN) | (NL "#ifndef" id IN) | ("#ident" stringlit) | ("#include" stringlit) | ("#include" "<" SPOFF filename ">" SPON) | ("#line" integernumber stringlit?) | ("#undef" id) | ("#LINK" stringlit) ;
iteration_statement ::= ("while" "(" expression ")" statement) | ("do" statement "while" "(" expression ")" ";" NL) | ("for" "(" for_init_statement expression? ";" expression? ")" for_body) ;
base_list ::= base_specifier ","? {base_specifier ","}* ;
exception_declaration ::= (type_specifiers exception_declarator?) | "..." ;
linkage_specification ::= (NL "extern" stringlit "{" NL IN declaration_list EX "}" ";"? NL NL) | ("extern" stringlit declaration) ;
conversion_type_name ::= type_specifiers pointer_operator? ;
parameter_declarator ::= declarator | (abstract_declarator?) ;
class_head ::= (class_key id? base_spec?) | (class_key nested_name_spec id base_spec?) | (class_key class_name base_spec?) ;
enumerator ::= id equal_constant_expression? ;
enum_specifier ::= "enum" id? "{" enum_list? "}" ;
init_declarator ::= declarator initializer? ;
--------------------cpp::iso-14882-1998.bgf--------------------
iteration-statement ::= ("while" "(" condition ")" statement) | ("do" statement "while" "(" expression ")" ";") | ("for" "(" for-init-statement condition? ";" expression? ")" statement) ;
new-declarator ::= (ptr-operator new-declarator?) | direct-new-declarator ;
type-specifier-seq ::= type-specifier type-specifier-seq? ;
abstract-declarator ::= (ptr-operator abstract-declarator?) | direct-abstract-declarator ;
linkage-specification ::= ("extern" string-literal "{" declaration-seq? "}") | ("extern" string-literal declaration) ;
elaborated-type-specifier ::= (class-key "::"? nested-name-specifier? identifier) | ("enum" "::"? nested-name-specifier? identifier) | ("typename" "::"? nested-name-specifier identifier) | ("typename" "::"? nested-name-specifier "template"? template-id) ;
initializer-clause ::= assignment-expression | ("{" initializer-list ","? "}") | ("{" "}") ;
expression-statement ::= expression? ";" ;
delete-expression ::= ("::"? "delete" cast-expression) | ("::"? "delete" "[" "]" cast-expression) ;
declarator-id ::= id-expression | ("::"? nested-name-specifier? type-name) ;
new-initializer ::= "(" expression-list? ")" ;
enum-specifier ::= "enum" identifier? "{" enumerator-list? "}" ;
using-declaration ::= ("using" "typename"? "::"? nested-name-specifier unqualified-id ";") | ("using" "::" unqualified-id ";") ;
postfix-expression ::= primary-expression | (postfix-expression "[" expression "]") | (postfix-expression "(" expression-list? ")") | (simple-type-specifier "(" expression-list? ")") | ("typename" "::"? nested-name-specifier identifier "(" expression-list? ")") | ("typename" "::"? nested-name-specifier "template"? template-id "(" expression-list? ")") | (postfix-expression "." "template"? id-expression) | (postfix-expression "->" "template"? id-expression) | (postfix-expression "." pseudo-destructor-name) | (postfix-expression "->" pseudo-destructor-name) | (postfix-expression "++") | (postfix-expression "--") | ("dynamic_cast" "<" type-id ">" "(" expression ")") | ("static_cast" "<" type-id ">" "(" expression ")") | ("reinterpret_cast" "<" type-id ">" "(" expression ")") | ("const_cast" "<" type-id ">" "(" expression ")") | ("typeid" "(" expression ")") | ("typeid" "(" type-id ")") ;
decl-specifier-seq ::= decl-specifier-seq? decl-specifier ;
qualified-id ::= ("::"? nested-name-specifier "template"? unqualified-id) | ("::" identifier) | ("::" operator-function-id) | ("::" template-id) ;
mem-initializer ::= mem-initializer-id "(" expression-list? ")" ;
class-specifier ::= class-head "{" member-specification? "}" ;
function-definition ::= (decl-specifier-seq? declarator ctor-initializer? function-body) | (decl-specifier-seq? declarator function-try-block) ;
template-declaration ::= "export"? "template" "<" template-parameter-list ">" declaration ;
simple-type-specifier ::= ("::"? nested-name-specifier? type-name) | ("::"? nested-name-specifier "template" template-id) | "char" | "wchar_t" | "bool" | "short" | "int" | "long" | "signed" | "unsigned" | "float" | "double" | "void" ;
new-expression ::= ("::"? "new" new-placement? new-type-id new-initializer?) | ("::"? "new" new-placement? "(" type-id ")" new-initializer?) ;
ptr-operator ::= ("*" cv-qualifier-seq?) | "&" | ("::"? nested-name-specifier "*" cv-qualifier-seq?) ;
cv-qualifier-seq ::= cv-qualifier cv-qualifier-seq? ;
new-type-id ::= type-specifier-seq new-declarator? ;
translation-unit ::= declaration-seq? ;
throw-expression ::= "throw" assignment-expression? ;
simple-declaration ::= decl-specifier-seq? init-declarator-list? ";" ;
mem-initializer-id ::= ("::"? nested-name-specifier? class-name) | identifier ;
handler-seq ::= handler handler-seq? ;
qualified-namespace-specifier ::= "::"? nested-name-specifier? namespace-name ;
direct-abstract-declarator ::= (direct-abstract-declarator? "(" parameter-declaration-clause ")" cv-qualifier-seq? exception-specification?) | (direct-abstract-declarator? "[" constant-expression? "]") | ("(" abstract-declarator ")") ;
conversion-type-id ::= type-specifier-seq conversion-declarator? ;
type-parameter ::= ("class" identifier?) | ("class" identifier? "=" type-id) | ("typename" identifier?) | ("typename" identifier? "=" type-id) | ("template" "<" template-parameter-list ">" "class" identifier?) | ("template" "<" template-parameter-list ">" "class" identifier? "=" id-expression) ;
parameter-declaration ::= (decl-specifier-seq declarator) | (decl-specifier-seq declarator "=" assignment-expression) | (decl-specifier-seq abstract-declarator?) | (decl-specifier-seq abstract-declarator? "=" assignment-expression) ;
class-head ::= (class-key identifier? base-clause?) | (class-key nested-name-specifier identifier base-clause?) | (class-key nested-name-specifier? template-id base-clause?) ;
direct-declarator ::= declarator-id | (direct-declarator "(" parameter-declaration-clause ")" cv-qualifier-seq? exception-specification?) | (direct-declarator "[" constant-expression? "]") | ("(" declarator ")") ;
namespace-body ::= declaration-seq? ;
nested-name-specifier ::= (class-or-namespace-name "::" nested-name-specifier?) | (class-or-namespace-name "::" "template" nested-name-specifier) ;
jump-statement ::= ("break" ";") | ("continue" ";") | ("return" expression? ";") | ("goto" identifier ";") ;
member-specification ::= (member-declaration member-specification?) | (access-specifier ":" member-specification?) ;
pseudo-destructor-name ::= ("::"? nested-name-specifier? type-name "::" "~" type-name) | ("::"? nested-name-specifier "template" template-id "::" "~" type-name) | ("::"? nested-name-specifier? "~" type-name) ;
init-declarator ::= declarator initializer? ;
type-id ::= type-specifier-seq abstract-declarator? ;
template-id ::= template-name "<" template-argument-list? ">" ;
compound-statement ::= "{" statement-seq? "}" ;
conversion-declarator ::= ptr-operator conversion-declarator? ;
member-declaration ::= (decl-specifier-seq? member-declarator-list? ";") | (function-definition ";"?) | ("::"? nested-name-specifier "template"? unqualified-id ";") | using-declaration | template-declaration ;
using-directive ::= "using" "namespace" "::"? nested-name-specifier? namespace-name ";" ;
function-try-block ::= "try" ctor-initializer? function-body handler-seq ;
parameter-declaration-clause ::= (parameter-declaration-list? "..."?) | (parameter-declaration-list "," "...") ;
exception-specification ::= "throw" "(" type-id-list? ")" ;
member-declarator ::= (declarator pure-specifier?) | (declarator constant-initializer?) | (identifier? ":" constant-expression) ;
base-specifier ::= ("::"? nested-name-specifier? class-name) | ("virtual" access-specifier? "::"? nested-name-specifier? class-name) | (access-specifier "virtual"? "::"? nested-name-specifier? class-name) ;
--------------------cs::csharp-ecma-334-2.bgf--------------------
set-accessor-declaration ::= attributes? "set" accessor-body ;
accessor-declarations ::= (get-accessor-declaration set-accessor-declaration?) | (set-accessor-declaration get-accessor-declaration?) ;
specific-catch-clause ::= "catch" "(" class-type identifier? ")" block ;
method-header ::= attributes? method-modifiers? return-type member-name "(" formal-parameter-list? ")" ;
interface-accessors ::= (attributes? "get" ";") | (attributes? "set" ";") | (attributes? "get" ";" attributes? "set" ";") | (attributes? "set" ";" attributes? "get" ";") ;
object-creation-expression ::= "new" type "(" argument-list? ")" ;
interface-body ::= "{" interface-member-declarations? "}" ;
parameter-array ::= attributes? "params" array-type identifier ;
invocation-expression ::= primary-expression "(" argument-list? ")" ;
attribute-section ::= ("[" attribute-target-specifier? attribute-list "]") | ("[" attribute-target-specifier? attribute-list "," "]") ;
switch-block ::= "{" switch-sections? "}" ;
interface-event-declaration ::= attributes? "new"? "event" type identifier ";" ;
delegate-declaration ::= attributes? delegate-modifiers? "delegate" type identifier "(" formal-parameter-list? ")" ";" ;
enum-body ::= ("{" enum-member-declarations? "}") | ("{" enum-member-declarations "," "}") ;
enum-declaration ::= attributes? enum-modifiers? "enum" identifier enum-base? enum-body ";"? ;
array-initializer ::= ("{" variable-initializer-list? "}") | ("{" variable-initializer-list "," "}") ;
indexer-declaration ::= attributes? indexer-modifiers? indexer-declarator "{" accessor-declarations "}" ;
for-statement ::= "for" "(" for-initializer? ";" for-condition? ";" for-iterator? ")" embedded-statement ;
constructor-declaration ::= attributes? constructor-modifiers? constructor-declarator constructor-body ;
field-declaration ::= attributes? field-modifiers? type variable-declarators ";" ;
interface-declaration ::= attributes? interface-modifiers? "interface" identifier interface-base? interface-body ";"? ;
destructor-declaration ::= attributes? "extern"? "~" identifier "(" ")" destructor-body ;
attribute-arguments ::= ("(" positional-argument-list? ")") | ("(" positional-argument-list "," named-argument-list ")") | ("(" named-argument-list ")") ;
class-declaration ::= attributes? class-modifiers? "class" identifier class-base? class-body ";"? ;
constructor-declarator ::= identifier "(" formal-parameter-list? ")" constructor-initializer? ;
interface-method-declaration ::= attributes? "new"? return-type identifier "(" formal-parameter-list? ")" ";" ;
add-accessor-declaration ::= attributes? "add" block ;
remove-accessor-declaration ::= attributes? "remove" block ;
rank-specifier ::= "[" dim-separators? "]" ;
attribute ::= attribute-name attribute-arguments? ;
struct-body ::= "{" struct-member-declarations? "}" ;
interface-indexer-declaration ::= attributes? "new"? type "this" "[" formal-parameter-list "]" "{" interface-accessors "}" ;
class-body ::= "{" class-member-declarations? "}" ;
interface-property-declaration ::= attributes? "new"? type identifier "{" interface-accessors "}" ;
namespace-body ::= "{" using-directives? namespace-member-declarations? "}" ;
enum-member-declaration ::= (attributes? identifier) | (attributes? identifier "=" constant-expression) ;
catch-clauses ::= (specific-catch-clauses general-catch-clause?) | (specific-catch-clauses? general-catch-clause) ;
return-statement ::= "return" expression? ";" ;
array-creation-expression ::= ("new" non-array-type "[" expression-list "]" rank-specifiers? array-initializer?) | ("new" array-type array-initializer) ;
operator-declaration ::= attributes? operator-modifiers operator-declarator operator-body ;
constant-declaration ::= attributes? constant-modifiers? "const" type constant-declarators ";" ;
fixed-parameter ::= attributes? parameter-modifier? type identifier ;
constructor-initializer ::= (":" "base" "(" argument-list? ")") | (":" "this" "(" argument-list? ")") ;
compilation-unit ::= using-directives? global-attributes? namespace-member-declarations? ;
block ::= "{" statement-list? "}" ;
get-accessor-declaration ::= attributes? "get" accessor-body ;
static-constructor-modifiers ::= ("extern"? "static") | ("static" "extern"?) ;
static-constructor-declaration ::= attributes? static-constructor-modifiers identifier "(" ")" static-constructor-body ;
throw-statement ::= "throw" expression? ";" ;
namespace-declaration ::= "namespace" qualified-identifier namespace-body ";"? ;
event-declaration ::= (attributes? event-modifiers? "event" type variable-declarators ";") | (attributes? event-modifiers? "event" type member-name "{" event-accessor-declarations "}") ;
struct-declaration ::= attributes? struct-modifiers? "struct" identifier struct-interfaces? struct-body ";"? ;
property-declaration ::= attributes? property-modifiers? type member-name "{" accessor-declarations "}" ;
--------------------cs::csharp-ecma-334-3.bgf--------------------
set-accessor-declaration ::= attributes? accessor-modifier? "set" accessor-body ;
accessor-declarations ::= (get-accessor-declaration set-accessor-declaration?) | (set-accessor-declaration get-accessor-declaration?) ;
specific-catch-clause ::= "catch" "(" class-type identifier? ")" block ;
method-header ::= attributes? method-modifiers? return-type member-name type-parameter-list? "(" formal-parameter-list? ")" type-parameter-constraints-clauses? ;
interface-accessors ::= (attributes? "get" ";") | (attributes? "set" ";") | (attributes? "get" ";" attributes? "set" ";") | (attributes? "set" ";" attributes? "get" ";") ;
member-access ::= (primary-expression "." identifier type-argument-list?) | (predefined-type "." identifier type-argument-list?) | (qualified-alias-member "." identifier type-argument-list?) ;
unbound-type-name ::= (identifier generic-dimension-specifier?) | (identifier "::" identifier generic-dimension-specifier?) | (unbound-type-name "." identifier generic-dimension-specifier?) ;
invocation-expression ::= primary-expression "(" argument-list? ")" ;
enum-body ::= ("{" enum-member-declarations? "}") | ("{" enum-member-declarations "," "}") ;
array-initializer ::= ("{" variable-initializer-list? "}") | ("{" variable-initializer-list "," "}") ;
for-statement ::= "for" "(" for-initializer? ";" for-condition? ";" for-iterator? ")" embedded-statement ;
interface-declaration ::= attributes? interface-modifiers? "partial"? "interface" identifier type-parameter-list? interface-base? type-parameter-constraints-clauses? interface-body ";"? ;
attribute-arguments ::= ("(" positional-argument-list? ")") | ("(" positional-argument-list "," named-argument-list ")") | ("(" named-argument-list ")") ;
constructor-declarator ::= identifier "(" formal-parameter-list? ")" constructor-initializer? ;
base-access ::= ("base" "." identifier type-argument-list?) | ("base" "[" expression-list "]") ;
try-statement ::= ("try" block catch-clauses) | ("try" block catch-clauses? finally-clause) ;
type-parameters ::= (attributes? type-parameter) | (type-parameters "," attributes? type-parameter) ;
rank-specifier ::= "[" dim-separators? "]" ;
class-body ::= "{" class-member-declarations? "}" ;
namespace-body ::= "{" extern-alias-directives? using-directives? namespace-member-declarations? "}" ;
catch-clauses ::= specific-catch-clauses | (specific-catch-clauses? general-catch-clause) ;
array-creation-expression ::= ("new" non-array-type "[" expression-list "]" rank-specifiers? array-initializer?) | ("new" array-type array-initializer) ;
operator-declaration ::= attributes? operator-modifiers operator-declarator operator-body ;
constant-declaration ::= attributes? constant-modifiers? "const" type constant-declarators ";" ;
compilation-unit ::= extern-alias-directives? using-directives? global-attributes? namespace-member-declarations? ;
static-constructor-modifiers ::= ("extern"? "static") | ("static" "extern"?) ;
qualified-alias-member ::= identifier "::" identifier type-argument-list? ;
static-constructor-declaration ::= attributes? static-constructor-modifiers identifier "(" ")" static-constructor-body ;
throw-statement ::= "throw" expression? ";" ;
event-declaration ::= (attributes? event-modifiers? "event" type variable-declarators ";") | (attributes? event-modifiers? "event" type member-name "{" event-accessor-declarations "}") ;
simple-name ::= identifier type-argument-list? ;
finalizer-declaration ::= attributes? "extern"? "~" identifier "(" ")" finalizer-body ;
object-creation-expression ::= "new" type "(" argument-list? ")" ;
interface-body ::= "{" interface-member-declarations? "}" ;
parameter-array ::= attributes? "params" array-type identifier ;
attribute-section ::= ("[" attribute-target-specifier? attribute-list "]") | ("[" attribute-target-specifier? attribute-list "," "]") ;
switch-block ::= "{" switch-sections? "}" ;
interface-event-declaration ::= attributes? "new"? "event" type identifier ";" ;
delegate-declaration ::= attributes? delegate-modifiers? "delegate" return-type identifier type-parameter-list? "(" formal-parameter-list? ")" type-parameter-constraints-clauses? ";" ;
enum-declaration ::= attributes? enum-modifiers? "enum" identifier enum-base? enum-body ";"? ;
indexer-declaration ::= attributes? indexer-modifiers? indexer-declarator "{" accessor-declarations "}" ;
anonymous-method-signature ::= "(" anonymous-method-parameter-list? ")" ;
constructor-declaration ::= attributes? constructor-modifiers? constructor-declarator constructor-body ;
field-declaration ::= attributes? field-modifiers? type variable-declarators ";" ;
class-declaration ::= attributes? class-modifiers? "partial"? "class" identifier type-parameter-list? class-base? type-parameter-constraints-clauses? class-body ";"? ;
anonymous-method-expression ::= "delegate" anonymous-method-signature? block ;
interface-method-declaration ::= attributes? "new"? return-type identifier type-parameter-list? "(" formal-parameter-list? ")" type-parameter-constraints-clauses? ";" ;
generic-dimension-specifier ::= "<" commas? ">" ;
add-accessor-declaration ::= attributes? "add" block ;
anonymous-method-parameter ::= parameter-modifier? type identifier ;
remove-accessor-declaration ::= attributes? "remove" block ;
attribute ::= attribute-name attribute-arguments? ;
struct-body ::= "{" struct-member-declarations? "}" ;
interface-indexer-declaration ::= attributes? "new"? type "this" "[" formal-parameter-list "]" "{" interface-accessors "}" ;
interface-property-declaration ::= attributes? "new"? type identifier "{" interface-accessors "}" ;
enum-member-declaration ::= (attributes? identifier) | (attributes? identifier "=" constant-expression) ;
return-statement ::= "return" expression? ";" ;
fixed-parameter ::= attributes? parameter-modifier? type identifier ;
constructor-initializer ::= (":" "base" "(" argument-list? ")") | (":" "this" "(" argument-list? ")") ;
block ::= "{" statement-list? "}" ;
get-accessor-declaration ::= attributes? accessor-modifier? "get" accessor-body ;
namespace-declaration ::= "namespace" qualified-identifier namespace-body ";"? ;
namespace-or-type-name ::= (identifier type-argument-list?) | qualified-alias-member | (namespace-or-type-name "." identifier type-argument-list?) ;
struct-declaration ::= attributes? struct-modifiers? "partial"? "struct" identifier type-parameter-list? struct-interfaces? type-parameter-constraints-clauses? struct-body ";"? ;
property-declaration ::= attributes? property-modifiers? type member-name "{" accessor-declarations "}" ;
--------------------cs::csharp-ecma-334-4.bgf--------------------
set-accessor-declaration ::= attributes? accessor-modifier? "set" accessor-body ;
accessor-declarations ::= (get-accessor-declaration set-accessor-declaration?) | (set-accessor-declaration get-accessor-declaration?) ;
specific-catch-clause ::= "catch" "(" class-type identifier? ")" block ;
method-header ::= attributes? method-modifiers? return-type member-name type-parameter-list? "(" formal-parameter-list? ")" type-parameter-constraints-clauses? ;
interface-accessors ::= (attributes? "get" ";") | (attributes? "set" ";") | (attributes? "get" ";" attributes? "set" ";") | (attributes? "set" ";" attributes? "get" ";") ;
member-access ::= (primary-expression "." identifier type-argument-list?) | (predefined-type "." identifier type-argument-list?) | (qualified-alias-member "." identifier type-argument-list?) ;
unbound-type-name ::= (identifier generic-dimension-specifier?) | (identifier "::" identifier generic-dimension-specifier?) | (unbound-type-name "." identifier generic-dimension-specifier?) ;
invocation-expression ::= primary-expression "(" argument-list? ")" ;
enum-body ::= ("{" enum-member-declarations? "}") | ("{" enum-member-declarations "," "}") ;
array-initializer ::= ("{" variable-initializer-list? "}") | ("{" variable-initializer-list "," "}") ;
for-statement ::= "for" "(" for-initializer? ";" for-condition? ";" for-iterator? ")" embedded-statement ;
interface-declaration ::= attributes? interface-modifiers? "partial"? "interface" identifier type-parameter-list? interface-base? type-parameter-constraints-clauses? interface-body ";"? ;
attribute-arguments ::= ("(" positional-argument-list? ")") | ("(" positional-argument-list "," named-argument-list ")") | ("(" named-argument-list ")") ;
constructor-declarator ::= identifier "(" formal-parameter-list? ")" constructor-initializer? ;
base-access ::= ("base" "." identifier type-argument-list?) | ("base" "[" expression-list "]") ;
try-statement ::= ("try" block catch-clauses) | ("try" block catch-clauses? finally-clause) ;
type-parameters ::= (attributes? type-parameter) | (type-parameters "," attributes? type-parameter) ;
rank-specifier ::= "[" dim-separators? "]" ;
class-body ::= "{" class-member-declarations? "}" ;
namespace-body ::= "{" extern-alias-directives? using-directives? namespace-member-declarations? "}" ;
catch-clauses ::= specific-catch-clauses | (specific-catch-clauses? general-catch-clause) ;
array-creation-expression ::= ("new" non-array-type "[" expression-list "]" rank-specifiers? array-initializer?) | ("new" array-type array-initializer) ;
operator-declaration ::= attributes? operator-modifiers operator-declarator operator-body ;
constant-declaration ::= attributes? constant-modifiers? "const" type constant-declarators ";" ;
compilation-unit ::= extern-alias-directives? using-directives? global-attributes? namespace-member-declarations? ;
static-constructor-modifiers ::= ("extern"? "static") | ("static" "extern"?) ;
static-constructor-declaration ::= attributes? static-constructor-modifiers identifier "(" ")" static-constructor-body ;
throw-statement ::= "throw" expression? ";" ;
qualified-alias-member ::= identifier "::" identifier type-argument-list? ;
event-declaration ::= (attributes? event-modifiers? "event" type variable-declarators ";") | (attributes? event-modifiers? "event" type member-name "{" event-accessor-declarations "}") ;
simple-name ::= identifier type-argument-list? ;
finalizer-declaration ::= attributes? "extern"? "~" identifier "(" ")" finalizer-body ;
object-creation-expression ::= "new" type "(" argument-list? ")" ;
interface-body ::= "{" interface-member-declarations? "}" ;
parameter-array ::= attributes? "params" array-type identifier ;
attribute-section ::= ("[" attribute-target-specifier? attribute-list "]") | ("[" attribute-target-specifier? attribute-list "," "]") ;
switch-block ::= "{" switch-sections? "}" ;
interface-event-declaration ::= attributes? "new"? "event" type identifier ";" ;
delegate-declaration ::= attributes? delegate-modifiers? "delegate" return-type identifier type-parameter-list? "(" formal-parameter-list? ")" type-parameter-constraints-clauses? ";" ;
enum-declaration ::= attributes? enum-modifiers? "enum" identifier enum-base? enum-body ";"? ;
indexer-declaration ::= attributes? indexer-modifiers? indexer-declarator "{" accessor-declarations "}" ;
anonymous-method-signature ::= "(" anonymous-method-parameter-list? ")" ;
constructor-declaration ::= attributes? constructor-modifiers? constructor-declarator constructor-body ;
field-declaration ::= attributes? field-modifiers? type variable-declarators ";" ;
class-declaration ::= attributes? class-modifiers? "partial"? "class" identifier type-parameter-list? class-base? type-parameter-constraints-clauses? class-body ";"? ;
anonymous-method-expression ::= "delegate" anonymous-method-signature? block ;
interface-method-declaration ::= attributes? "new"? return-type identifier type-parameter-list? "(" formal-parameter-list? ")" type-parameter-constraints-clauses? ";" ;
generic-dimension-specifier ::= "<" commas? ">" ;
add-accessor-declaration ::= attributes? "add" block ;
anonymous-method-parameter ::= parameter-modifier? type identifier ;
remove-accessor-declaration ::= attributes? "remove" block ;
attribute ::= attribute-name attribute-arguments? ;
struct-body ::= "{" struct-member-declarations? "}" ;
interface-indexer-declaration ::= attributes? "new"? type "this" "[" formal-parameter-list "]" "{" interface-accessors "}" ;
interface-property-declaration ::= attributes? "new"? type identifier "{" interface-accessors "}" ;
enum-member-declaration ::= (attributes? identifier) | (attributes? identifier "=" constant-expression) ;
return-statement ::= "return" expression? ";" ;
fixed-parameter ::= attributes? parameter-modifier? type identifier ;
constructor-initializer ::= (":" "base" "(" argument-list? ")") | (":" "this" "(" argument-list? ")") ;
block ::= "{" statement-list? "}" ;
get-accessor-declaration ::= attributes? accessor-modifier? "get" accessor-body ;
namespace-declaration ::= "namespace" qualified-identifier namespace-body ";"? ;
namespace-or-type-name ::= (identifier type-argument-list?) | qualified-alias-member | (namespace-or-type-name "." identifier type-argument-list?) ;
struct-declaration ::= attributes? struct-modifiers? "partial"? "struct" identifier type-parameter-list? struct-interfaces? type-parameter-constraints-clauses? struct-body ";"? ;
property-declaration ::= attributes? property-modifiers? type member-name "{" accessor-declarations "}" ;
--------------------cs::csharp-iso-23270-2003.bgf--------------------
set-accessor-declaration ::= attributes? "set" accessor-body ;
accessor-declarations ::= (get-accessor-declaration set-accessor-declaration?) | (set-accessor-declaration get-accessor-declaration?) ;
specific-catch-clause ::= "catch" "(" class-type identifier? ")" block ;
method-header ::= attributes? method-modifiers? return-type member-name "(" formal-parameter-list? ")" ;
interface-accessors ::= (attributes? "get" ";") | (attributes? "set" ";") | (attributes? "get" ";" attributes? "set" ";") | (attributes? "set" ";" attributes? "get" ";") ;
object-creation-expression ::= "new" type "(" argument-list? ")" ;
interface-body ::= "{" interface-member-declarations? "}" ;
parameter-array ::= attributes? "params" array-type identifier ;
invocation-expression ::= primary-expression "(" argument-list? ")" ;
attribute-section ::= ("[" attribute-target-specifier? attribute-list "]") | ("[" attribute-target-specifier? attribute-list "," "]") ;
switch-block ::= "{" switch-sections? "}" ;
interface-event-declaration ::= attributes "new"? "event" type identifier ";" ;
delegate-declaration ::= attributes? delegate-modifiers? "delegate" type identifier "(" formal-parameter-list? ")" ";" ;
enum-body ::= ("{" enum-member-declarations? "}") | ("{" enum-member-declarations "," "}") ;
enum-declaration ::= attributes? enum-modifiers? "enum" identifier enum-base? enum-body ";"? ;
array-initializer ::= ("{" variable-initializer-list? "}") | ("{" variable-initializer-list "," "}") ;
indexer-declaration ::= attributes? indexer-modifiers? indexer-declarator "{" accessor-declarations "}" ;
for-statement ::= "for" "(" for-initializer? ";" for-condition? ";" for-iterator? ")" embedded-statement ;
constructor-declaration ::= attributes? constructor-modifiers? constructor-declarator constructor-body ;
field-declaration ::= attributes? field-modifiers? type variable-declarators ";" ;
interface-declaration ::= attributes? interface-modifiers? "interface" identifier interface-base? interface-body ";"? ;
destructor-declaration ::= attributes? "extern"? "~" identifier "(" ")" destructor-body ;
attribute-arguments ::= ("(" positional-argument-list? ")") | ("(" positional-argument-list "," named-argument-list ")") | ("(" named-argument-list ")") ;
class-declaration ::= attributes? class-modifiers? "class" identifier class-base? class-body ";"? ;
constructor-declarator ::= identifier "(" formal-parameter-list? ")" constructor-initializer? ;
interface-method-declaration ::= attributes? "new"? return-type identifier "(" formal-parameter-list? ")" ";" ;
add-accessor-declaration ::= attributes? "add" block ;
rank-specifier ::= "[" dim-separators? "]" ;
remove-accessor-declaration ::= attributes? "remove" block ;
attribute ::= attribute-name attribute-arguments? ;
struct-body ::= "{" struct-member-declarations? "}" ;
interface-indexer-declaration ::= attributes "new"? type "this" "[" formal-parameter-list "]" "{" interface-accessors "}" ;
class-body ::= "{" class-member-declarations? "}" ;
interface-property-declaration ::= attributes? "new"? type identifier "{" interface-accessors "}" ;
namespace-body ::= "{" using-directives? namespace-member-declarations? "}" ;
enum-member-declaration ::= (attributes? identifier) | (attributes? identifier "=" constant-expression) ;
catch-clauses ::= (specific-catch-clauses general-catch-clause?) | (specific-catch-clauses? general-catch-clause) ;
return-statement ::= "return" expression? ";" ;
array-creation-expression ::= ("new" non-array-type "[" expression-list "]" rank-specifiers? array-initializer?) | ("new" array-type array-initializer) ;
operator-declaration ::= attributes? operator-modifiers operator-declarator operator-body ;
constant-declaration ::= attributes? constant-modifiers? "const" type constant-declarators ";" ;
fixed-parameter ::= attributes? parameter-modifier? type identifier ;
constructor-initializer ::= (":" "base" "(" argument-list? ")") | (":" "this" "(" argument-list? ")") ;
compilation-unit ::= using-directives? global-attributes? namespace-member-declarations? ;
block ::= "{" statement-list? "}" ;
get-accessor-declaration ::= attributes? "get" accessor-body ;
static-constructor-modifiers ::= ("extern"? "static") | ("static" "extern"?) ;
static-constructor-declaration ::= attributes? static-constructor-modifiers identifier "(" ")" static-constructor-body ;
throw-statement ::= "throw" expression? ";" ;
namespace-declaration ::= "namespace" qualified-identifier namespace-body ";"? ;
event-declaration ::= (attributes? event-modifiers? "event" type variable-declarators ";") | (attributes? event-modifiers? "event" type member-name "{" event-accessor-declarations "}") ;
struct-declaration ::= attributes? struct-modifiers? "struct" identifier struct-interfaces? struct-body ";"? ;
property-declaration ::= attributes? property-modifiers? type member-name "{" accessor-declarations "}" ;
--------------------cs::csharp-iso-23270-2006.bgf--------------------
set-accessor-declaration ::= attributes? accessor-modifier? "set" accessor-body ;
accessor-declarations ::= (get-accessor-declaration set-accessor-declaration?) | (set-accessor-declaration get-accessor-declaration?) ;
specific-catch-clause ::= "catch" "(" class-type identifier? ")" block ;
method-header ::= attributes? method-modifiers? return-type member-name type-parameter-list? "(" formal-parameter-list? ")" type-parameter-constraints-clauses? ;
interface-accessors ::= (attributes? "get" ";") | (attributes? "set" ";") | (attributes? "get" ";" attributes? "set" ";") | (attributes? "set" ";" attributes? "get" ";") ;
member-access ::= (primary-expression "." identifier type-argument-list?) | (predefined-type "." identifier type-argument-list?) | (qualified-alias-member "." identifier type-argument-list?) ;
unbound-type-name ::= (identifier generic-dimension-specifier?) | (identifier "::" identifier generic-dimension-specifier?) | (unbound-type-name "." identifier generic-dimension-specifier?) ;
invocation-expression ::= primary-expression "(" argument-list? ")" ;
enum-body ::= ("{" enum-member-declarations? "}") | ("{" enum-member-declarations "," "}") ;
array-initializer ::= ("{" variable-initializer-list? "}") | ("{" variable-initializer-list "," "}") ;
for-statement ::= "for" "(" for-initializer? ";" for-condition? ";" for-iterator? ")" embedded-statement ;
interface-declaration ::= attributes? interface-modifiers? "partial"? "interface" identifier type-parameter-list? interface-base? type-parameter-constraints-clauses? interface-body ";"? ;
attribute-arguments ::= ("(" positional-argument-list? ")") | ("(" positional-argument-list "," named-argument-list ")") | ("(" named-argument-list ")") ;
constructor-declarator ::= identifier "(" formal-parameter-list? ")" constructor-initializer? ;
base-access ::= ("base" "." identifier type-argument-list?) | ("base" "[" expression-list "]") ;
try-statement ::= ("try" block catch-clauses) | ("try" block catch-clauses? finally-clause) ;
type-parameters ::= (attributes? type-parameter) | (type-parameters "," attributes? type-parameter) ;
rank-specifier ::= "[" dim-separators? "]" ;
class-body ::= "{" class-member-declarations? "}" ;
namespace-body ::= "{" extern-alias-directives? using-directives? namespace-member-declarations? "}" ;
catch-clauses ::= specific-catch-clauses | (specific-catch-clauses? general-catch-clause) ;
array-creation-expression ::= ("new" non-array-type "[" expression-list "]" rank-specifiers? array-initializer?) | ("new" array-type array-initializer) ;
operator-declaration ::= attributes? operator-modifiers operator-declarator operator-body ;
constant-declaration ::= attributes? constant-modifiers? "const" type constant-declarators ";" ;
compilation-unit ::= extern-alias-directives? using-directives? global-attributes? namespace-member-declarations? ;
static-constructor-modifiers ::= ("extern"? "static") | ("static" "extern"?) ;
qualified-alias-member ::= identifier "::" identifier type-argument-list? ;
static-constructor-declaration ::= attributes? static-constructor-modifiers identifier "(" ")" static-constructor-body ;
throw-statement ::= "throw" expression? ";" ;
event-declaration ::= (attributes? event-modifiers? "event" type variable-declarators ";") | (attributes? event-modifiers? "event" type member-name "{" event-accessor-declarations "}") ;
simple-name ::= identifier type-argument-list? ;
finalizer-declaration ::= attributes? "extern"? "~" identifier "(" ")" finalizer-body ;
object-creation-expression ::= "new" type "(" argument-list? ")" ;
interface-body ::= "{" interface-member-declarations? "}" ;
parameter-array ::= attributes? "params" array-type identifier ;
attribute-section ::= ("[" attribute-target-specifier? attribute-list "]") | ("[" attribute-target-specifier? attribute-list "," "]") ;
switch-block ::= "{" switch-sections? "}" ;
interface-event-declaration ::= attributes? "new"? "event" type identifier ";" ;
delegate-declaration ::= attributes? delegate-modifiers? "delegate" return-type identifier type-parameter-list? "(" formal-parameter-list? ")" type-parameter-constraints-clauses? ";" ;
enum-declaration ::= attributes? enum-modifiers? "enum" identifier enum-base? enum-body ";"? ;
indexer-declaration ::= attributes? indexer-modifiers? indexer-declarator "{" accessor-declarations "}" ;
anonymous-method-signature ::= "(" anonymous-method-parameter-list? ")" ;
constructor-declaration ::= attributes? constructor-modifiers? constructor-declarator constructor-body ;
field-declaration ::= attributes? field-modifiers? type variable-declarators ";" ;
class-declaration ::= attributes? class-modifiers? "partial"? "class" identifier type-parameter-list? class-base? type-parameter-constraints-clauses? class-body ";"? ;
anonymous-method-expression ::= "delegate" anonymous-method-signature? block ;
interface-method-declaration ::= attributes? "new"? return-type identifier type-parameter-list? "(" formal-parameter-list? ")" type-parameter-constraints-clauses? ";" ;
generic-dimension-specifier ::= "<" commas? ">" ;
add-accessor-declaration ::= attributes? "add" block ;
anonymous-method-parameter ::= parameter-modifier? type identifier ;
remove-accessor-declaration ::= attributes? "remove" block ;
attribute ::= attribute-name attribute-arguments? ;
struct-body ::= "{" struct-member-declarations? "}" ;
interface-indexer-declaration ::= attributes? "new"? type "this" "[" formal-parameter-list "]" "{" interface-accessors "}" ;
interface-property-declaration ::= attributes? "new"? type identifier "{" interface-accessors "}" ;
enum-member-declaration ::= (attributes? identifier) | (attributes? identifier "=" constant-expression) ;
return-statement ::= "return" expression? ";" ;
fixed-parameter ::= attributes? parameter-modifier? type identifier ;
constructor-initializer ::= (":" "base" "(" argument-list? ")") | (":" "this" "(" argument-list? ")") ;
block ::= "{" statement-list? "}" ;
get-accessor-declaration ::= attributes? accessor-modifier? "get" accessor-body ;
namespace-declaration ::= "namespace" qualified-identifier namespace-body ";"? ;
namespace-or-type-name ::= (identifier type-argument-list?) | qualified-alias-member | (namespace-or-type-name "." identifier type-argument-list?) ;
struct-declaration ::= attributes? struct-modifiers? "partial"? "struct" identifier type-parameter-list? struct-interfaces? type-parameter-constraints-clauses? struct-body ";"? ;
property-declaration ::= attributes? property-modifiers? type member-name "{" accessor-declarations "}" ;
--------------------cs::csharp-msft-ls-1.0.bgf--------------------
set-accessor-declaration ::= attributes? "set" accessor-body ;
accessor-declarations ::= (get-accessor-declaration set-accessor-declaration?) | (set-accessor-declaration get-accessor-declaration?) ;
specific-catch-clause ::= "catch" "(" class-type identifier? ")" block ;
method-header ::= attributes? method-modifiers? return-type member-name "(" formal-parameter-list? ")" ;
interface-accessors ::= (attributes? "get" ";") | (attributes? "set" ";") | (attributes? "get" ";" attributes? "set" ";") | (attributes? "set" ";" attributes? "get" ";") ;
object-creation-expression ::= "new" type "(" argument-list? ")" ;
interface-body ::= "{" interface-member-declarations? "}" ;
parameter-array ::= attributes? "params" array-type identifier ;
invocation-expression ::= primary-expression "(" argument-list? ")" ;
attribute-section ::= ("[" attribute-target-specifier? attribute-list "]") | ("[" attribute-target-specifier? attribute-list "," "]") ;
switch-block ::= "{" switch-sections? "}" ;
interface-event-declaration ::= attributes? "new"? "event" type identifier ";" ;
delegate-declaration ::= (attributes? delegate-modifiers? "delegate" return-type identifier) | ("(" formal-parameter-list? ")" ";") ;
enum-body ::= ("{" enum-member-declarations? "}") | ("{" enum-member-declarations "," "}") ;
enum-declaration ::= attributes? enum-modifiers? "enum" identifier enum-base? enum-body ";"? ;
array-initializer ::= ("{" variable-initializer-list? "}") | ("{" variable-initializer-list "," "}") ;
indexer-declaration ::= attributes? indexer-modifiers? indexer-declarator "{" accessor-declarations "}" ;
for-statement ::= "for" "(" for-initializer? ";" for-condition? ";" for-iterator? ")" embedded-statement ;
constructor-declaration ::= attributes? constructor-modifiers? constructor-declarator constructor-body ;
field-declaration ::= attributes? field-modifiers? type variable-declarators ";" ;
interface-declaration ::= attributes? interface-modifiers? "interface" identifier interface-base? interface-body ";"? ;
destructor-declaration ::= attributes? "extern"? "~" identifier "(" ")" destructor-body ;
class-declaration ::= attributes? class-modifiers? "class" identifier class-base? class-body ";"? ;
attribute-arguments ::= ("(" positional-argument-list? ")") | ("(" positional-argument-list "," named-argument-list ")") | ("(" named-argument-list ")") ;
constructor-declarator ::= identifier "(" formal-parameter-list? ")" constructor-initializer? ;
interface-method-declaration ::= attributes? "new"? return-type identifier "(" formal-parameter-list? ")" ";" ;
add-accessor-declaration ::= attributes? "add" block ;
remove-accessor-declaration ::= attributes? "remove" block ;
rank-specifier ::= "[" dim-separators? "]" ;
attribute ::= attribute-name attribute-arguments? ;
struct-body ::= "{" struct-member-declarations? "}" ;
interface-indexer-declaration ::= attributes? "new"? type "this" "[" formal-parameter-list "]" "{" interface-accessors "}" ;
class-body ::= "{" class-member-declarations? "}" ;
interface-property-declaration ::= attributes? "new"? type identifier "{" interface-accessors "}" ;
namespace-body ::= "{" using-directives? namespace-member-declarations? "}" ;
enum-member-declaration ::= (attributes? identifier) | (attributes? identifier "=" constant-expression) ;
catch-clauses ::= (specific-catch-clauses general-catch-clause?) | (specific-catch-clauses? general-catch-clause) ;
return-statement ::= "return" expression? ";" ;
array-creation-expression ::= ("new" non-array-type "[" expression-list "]" rank-specifiers? array-initializer?) | ("new" array-type array-initializer) ;
operator-declaration ::= attributes? operator-modifiers operator-declarator operator-body ;
constant-declaration ::= attributes? constant-modifiers? "const" type constant-declarators ";" ;
fixed-parameter ::= attributes? parameter-modifier? type identifier ;
constructor-initializer ::= (":" "base" "(" argument-list? ")") | (":" "this" "(" argument-list? ")") ;
compilation-unit ::= using-directives? global-attributes? namespace-member-declarations? ;
block ::= "{" statement-list? "}" ;
get-accessor-declaration ::= attributes? "get" accessor-body ;
static-constructor-modifiers ::= ("extern"? "static") | ("static" "extern"?) ;
static-constructor-declaration ::= attributes? static-constructor-modifiers identifier "(" ")" static-constructor-body ;
throw-statement ::= "throw" expression? ";" ;
namespace-declaration ::= "namespace" qualified-identifier namespace-body ";"? ;
event-declaration ::= (attributes? event-modifiers? "event" type variable-declarators ";") | (attributes? event-modifiers? "event" type member-name "{" event-accessor-declarations "}") ;
struct-declaration ::= attributes? struct-modifiers? "struct" identifier struct-interfaces? struct-body ";"? ;
property-declaration ::= attributes? property-modifiers? type member-name "{" accessor-declarations "}" ;
--------------------cs::csharp-msft-ls-1.2.bgf--------------------
set-accessor-declaration ::= attributes? "set" accessor-body ;
accessor-declarations ::= (get-accessor-declaration set-accessor-declaration?) | (set-accessor-declaration get-accessor-declaration?) ;
specific-catch-clause ::= "catch" "(" class-type identifier? ")" block ;
method-header ::= attributes? method-modifiers? return-type member-name "(" formal-parameter-list? ")" ;
interface-accessors ::= (attributes? "get" ";") | (attributes? "set" ";") | (attributes? "get" ";" attributes? "set" ";") | (attributes? "set" ";" attributes? "get" ";") ;
object-creation-expression ::= "new" type "(" argument-list? ")" ;
interface-body ::= "{" interface-member-declarations? "}" ;
parameter-array ::= attributes? "params" array-type identifier ;
invocation-expression ::= primary-expression "(" argument-list? ")" ;
attribute-section ::= ("[" attribute-target-specifier? attribute-list "]") | ("[" attribute-target-specifier? attribute-list "," "]") ;
switch-block ::= "{" switch-sections? "}" ;
interface-event-declaration ::= attributes? "new"? "event" type identifier ";" ;
delegate-declaration ::= (attributes? delegate-modifiers? "delegate" return-type identifier) | ("(" formal-parameter-list? ")" ";") ;
enum-body ::= ("{" enum-member-declarations? "}") | ("{" enum-member-declarations "," "}") ;
enum-declaration ::= attributes? enum-modifiers? "enum" identifier enum-base? enum-body ";"? ;
array-initializer ::= ("{" variable-initializer-list? "}") | ("{" variable-initializer-list "," "}") ;
indexer-declaration ::= attributes? indexer-modifiers? indexer-declarator "{" accessor-declarations "}" ;
for-statement ::= "for" "(" for-initializer? ";" for-condition? ";" for-iterator? ")" embedded-statement ;
constructor-declaration ::= attributes? constructor-modifiers? constructor-declarator constructor-body ;
field-declaration ::= attributes? field-modifiers? type variable-declarators ";" ;
interface-declaration ::= attributes? interface-modifiers? "interface" identifier interface-base? interface-body ";"? ;
destructor-declaration ::= attributes? "extern"? "~" identifier "(" ")" destructor-body ;
class-declaration ::= attributes? class-modifiers? "class" identifier class-base? class-body ";"? ;
attribute-arguments ::= ("(" positional-argument-list? ")") | ("(" positional-argument-list "," named-argument-list ")") | ("(" named-argument-list ")") ;
constructor-declarator ::= identifier "(" formal-parameter-list? ")" constructor-initializer? ;
interface-method-declaration ::= attributes? "new"? return-type identifier "(" formal-parameter-list? ")" ";" ;
add-accessor-declaration ::= attributes? "add" block ;
remove-accessor-declaration ::= attributes? "remove" block ;
rank-specifier ::= "[" dim-separators? "]" ;
attribute ::= attribute-name attribute-arguments? ;
struct-body ::= "{" struct-member-declarations? "}" ;
interface-indexer-declaration ::= attributes? "new"? type "this" "[" formal-parameter-list "]" "{" interface-accessors "}" ;
class-body ::= "{" class-member-declarations? "}" ;
interface-property-declaration ::= attributes? "new"? type identifier "{" interface-accessors "}" ;
namespace-body ::= "{" using-directives? namespace-member-declarations? "}" ;
enum-member-declaration ::= (attributes? identifier) | (attributes? identifier "=" constant-expression) ;
catch-clauses ::= (specific-catch-clauses general-catch-clause?) | (specific-catch-clauses? general-catch-clause) ;
return-statement ::= "return" expression? ";" ;
array-creation-expression ::= ("new" non-array-type "[" expression-list "]" rank-specifiers? array-initializer?) | ("new" array-type array-initializer) ;
operator-declaration ::= attributes? operator-modifiers operator-declarator operator-body ;
constant-declaration ::= attributes? constant-modifiers? "const" type constant-declarators ";" ;
fixed-parameter ::= attributes? parameter-modifier? type identifier ;
constructor-initializer ::= (":" "base" "(" argument-list? ")") | (":" "this" "(" argument-list? ")") ;
compilation-unit ::= using-directives? global-attributes? namespace-member-declarations? ;
block ::= "{" statement-list? "}" ;
get-accessor-declaration ::= attributes? "get" accessor-body ;
static-constructor-modifiers ::= ("extern"? "static") | ("static" "extern"?) ;
static-constructor-declaration ::= attributes? static-constructor-modifiers identifier "(" ")" static-constructor-body ;
throw-statement ::= "throw" expression? ";" ;
namespace-declaration ::= "namespace" qualified-identifier namespace-body ";"? ;
event-declaration ::= (attributes? event-modifiers? "event" type variable-declarators ";") | (attributes? event-modifiers? "event" type member-name "{" event-accessor-declarations "}") ;
struct-declaration ::= attributes? struct-modifiers? "struct" identifier struct-interfaces? struct-body ";"? ;
property-declaration ::= attributes? property-modifiers? type member-name "{" accessor-declarations "}" ;
--------------------cs::csharp-msft-ls-3.0.bgf--------------------
set-accessor-declaration ::= attributes? accessor-modifier? "set" accessor-body ;
accessor-declarations ::= (get-accessor-declaration set-accessor-declaration?) | (set-accessor-declaration get-accessor-declaration?) ;
specific-catch-clause ::= "catch" "(" class-type identifier? ")" block ;
method-header ::= (attributes? method-modifiers? "partial"? return-type member-name type-parameter-list?) | ("(" formal-parameter-list? ")" type-parameter-constraints-clauses?) ;
interface-accessors ::= (attributes? "get" ";") | (attributes? "set" ";") | (attributes? "get" ";" attributes? "set" ";") | (attributes? "set" ";" attributes? "get" ";") ;
member-access ::= (primary-expression "." identifier type-argument-list?) | (predefined-type "." identifier type-argument-list?) | (qualified-alias-member "." identifier) ;
unbound-type-name ::= (identifier generic-dimension-specifier?) | (identifier "::" identifier generic-dimension-specifier?) | (unbound-type-name "." identifier generic-dimension-specifier?) ;
invocation-expression ::= primary-expression "(" argument-list? ")" ;
from-clause ::= "from" type? identifier "in" expression ;
join-clause ::= "join" type? identifier "in" expression "on" expression "equals" expression ;
enum-body ::= ("{" enum-member-declarations? "}") | ("{" enum-member-declarations "," "}") ;
array-initializer ::= ("{" variable-initializer-list? "}") | ("{" variable-initializer-list "," "}") ;
for-statement ::= "for" "(" for-initializer? ";" for-condition? ";" for-iterator? ")" embedded-statement ;
interface-declaration ::= (attributes? interface-modifiers? "partial"? "interface" identifier type-parameter-list?) | (interface-base? type-parameter-constraints-clauses? interface-body ";"?) ;
attribute-arguments ::= ("(" positional-argument-list? ")") | ("(" positional-argument-list "," named-argument-list ")") | ("(" named-argument-list ")") ;
constructor-declarator ::= identifier "(" formal-parameter-list? ")" constructor-initializer? ;
type-parameters ::= (attributes? type-parameter) | (type-parameters "," attributes? type-parameter) ;
rank-specifier ::= "[" dim-separators? "]" ;
explicit-anonymous-function-signature ::= "(" explicit-anonymous-function-parameter-list? ")" ;
join-into-clause ::= "join" type? identifier "in" expression "on" expression "equals" expression "into" identifier ;
class-body ::= "{" class-member-declarations? "}" ;
namespace-body ::= "{" extern-alias-directives? using-directives? namespace-member-declarations? "}" ;
ordering ::= expression ordering-direction? ;
object-initializer ::= ("{" member-initializer-list? "}") | ("{" member-initializer-list "," "}") ;
catch-clauses ::= (specific-catch-clauses general-catch-clause?) | (specific-catch-clauses? general-catch-clause) ;
array-creation-expression ::= ("new" non-array-type "[" expression-list "]" rank-specifiers? array-initializer?) | ("new" array-type array-initializer) | ("new" rank-specifier array-initializer) ;
operator-declaration ::= attributes? operator-modifiers operator-declarator operator-body ;
constant-declaration ::= attributes? constant-modifiers? "const" type constant-declarators ";" ;
compilation-unit ::= (extern-alias-directives? using-directives? global-attributes?) | (namespace-member-declarations?) ;
explicit-anonymous-function-parameter ::= anonymous-function-parameter-modifier? type identifier ;
implicit-anonymous-function-signature ::= ("(" implicit-anonymous-function-parameter-list? ")") | implicit-anonymous-function-parameter ;
static-constructor-modifiers ::= ("extern"? "static") | ("static" "extern"?) ;
static-constructor-declaration ::= attributes? static-constructor-modifiers identifier "(" ")" static-constructor-body ;
throw-statement ::= "throw" expression? ";" ;
qualified-alias-member ::= identifier "::" identifier type-argument-list? ;
event-declaration ::= (attributes? event-modifiers? "event" type variable-declarators ";") | (attributes? event-modifiers? "event" type member-name "{" event-accessor-declarations "}") ;
simple-name ::= identifier type-argument-list? ;
object-creation-expression ::= ("new" type "(" argument-list? ")" object-or-collection-initializer?) | ("new" type object-or-collection-initializer) ;
interface-body ::= "{" interface-member-declarations? "}" ;
parameter-array ::= attributes? "params" array-type identifier ;
attribute-section ::= ("[" attribute-target-specifier? attribute-list "]") | ("[" attribute-target-specifier? attribute-list "," "]") ;
anonymous-object-initializer ::= ("{" member-declarator-list? "}") | ("{" member-declarator-list "," "}") ;
switch-block ::= "{" switch-sections? "}" ;
interface-event-declaration ::= attributes? "new"? "event" type identifier ";" ;
delegate-declaration ::= (attributes? delegate-modifiers? "delegate" return-type identifier type-parameter-list?) | ("(" formal-parameter-list? ")" type-parameter-constraints-clauses? ";") ;
enum-declaration ::= attributes? enum-modifiers? "enum" identifier enum-base? enum-body ";"? ;
indexer-declaration ::= attributes? indexer-modifiers? indexer-declarator "{" accessor-declarations "}" ;
constructor-declaration ::= attributes? constructor-modifiers? constructor-declarator constructor-body ;
field-declaration ::= attributes? field-modifiers? type variable-declarators ";" ;
destructor-declaration ::= attributes? "extern"? "~" identifier "(" ")" destructor-body ;
class-declaration ::= (attributes? class-modifiers? "partial"? "class" identifier type-parameter-list?) | (class-base? type-parameter-constraints-clauses? class-body ";"?) ;
anonymous-method-expression ::= "delegate" explicit-anonymous-function-signature? block ;
interface-method-declaration ::= (attributes? "new"? return-type identifier type-parameter-list) | ("(" formal-parameter-list? ")" type-parameter-constraints-clauses? ";") ;
generic-dimension-specifier ::= "<" commas? ">" ;
add-accessor-declaration ::= attributes? "add" block ;
remove-accessor-declaration ::= attributes? "remove" block ;
attribute ::= attribute-name attribute-arguments? ;
struct-body ::= "{" struct-member-declarations? "}" ;
interface-indexer-declaration ::= attributes? "new"? type "this" "[" formal-parameter-list "]" "{" interface-accessors "}" ;
interface-property-declaration ::= attributes? "new"? type identifier "{" interface-accessors "}" ;
enum-member-declaration ::= (attributes? identifier) | (attributes? identifier "=" constant-expression) ;
return-statement ::= "return" expression? ";" ;
fixed-parameter ::= attributes? parameter-modifier? type identifier ;
constructor-initializer ::= (":" "base" "(" argument-list? ")") | (":" "this" "(" argument-list? ")") ;
block ::= "{" statement-list? "}" ;
get-accessor-declaration ::= attributes? accessor-modifier? "get" accessor-body ;
namespace-declaration ::= "namespace" qualified-identifier namespace-body ";"? ;
query-body ::= query-body-clauses? select-or-group-clause query-continuation? ;
namespace-or-type-name ::= (identifier type-argument-list?) | (namespace-or-type-name "." identifier type-argument-list?) | qualified-alias-member ;
struct-declaration ::= (attributes? struct-modifiers? "partial"? "struct" identifier type-parameter-list?) | (struct-interfaces? type-parameter-constraints-clauses? struct-body ";"?) ;
property-declaration ::= attributes? property-modifiers? type member-name "{" accessor-declarations "}" ;
--------------------cs::csharp-msft-ls-4.0.bgf--------------------
set-accessor-declaration ::= attributes? accessor-modifier? "set" accessor-body ;
accessor-declarations ::= (get-accessor-declaration set-accessor-declaration?) | (set-accessor-declaration get-accessor-declaration?) ;
specific-catch-clause ::= "catch" "(" class-type identifier? ")" block ;
method-header ::= (attributes? method-modifiers? "partial"? return-type member-name type-parameter-list?) | ("(" formal-parameter-list? ")" type-parameter-constraints-clauses?) ;
interface-accessors ::= (attributes? "get" ";") | (attributes? "set" ";") | (attributes? "get" ";" attributes? "set" ";") | (attributes? "set" ";" attributes? "get" ";") ;
member-access ::= (primary-expression "." identifier type-argument-list?) | (predefined-type "." identifier type-argument-list?) | (qualified-alias-member "." identifier) ;
unbound-type-name ::= (identifier generic-dimension-specifier?) | (identifier "::" identifier generic-dimension-specifier?) | (unbound-type-name "." identifier generic-dimension-specifier?) ;
invocation-expression ::= primary-expression "(" argument-list? ")" ;
from-clause ::= "from" type? identifier "in" expression ;
join-clause ::= "join" type? identifier "in" expression "on" expression "equals" expression ;
enum-body ::= ("{" enum-member-declarations? "}") | ("{" enum-member-declarations "," "}") ;
array-initializer ::= ("{" variable-initializer-list? "}") | ("{" variable-initializer-list "," "}") ;
for-statement ::= "for" "(" for-initializer? ";" for-condition? ";" for-iterator? ")" embedded-statement ;
interface-declaration ::= (attributes? interface-modifiers? "partial"? "interface") | (identifier variant-type-parameter-list? interface-base?) | (type-parameter-constraints-clauses? interface-body ";"?) ;
attribute-arguments ::= ("(" positional-argument-list? ")") | ("(" positional-argument-list "," named-argument-list ")") | ("(" named-argument-list ")") ;
constructor-declarator ::= identifier "(" formal-parameter-list? ")" constructor-initializer? ;
type-parameters ::= (attributes? type-parameter) | (type-parameters "," attributes? type-parameter) ;
rank-specifier ::= "[" dim-separators? "]" ;
explicit-anonymous-function-signature ::= "(" explicit-anonymous-function-parameter-list? ")" ;
join-into-clause ::= "join" type? identifier "in" expression "on" expression "equals" expression "into" identifier ;
class-body ::= "{" class-member-declarations? "}" ;
positional-argument ::= argument-name? attribute-argument-expression ;
namespace-body ::= "{" extern-alias-directives? using-directives? namespace-member-declarations? "}" ;
ordering ::= expression ordering-direction? ;
object-initializer ::= ("{" member-initializer-list? "}") | ("{" member-initializer-list "," "}") ;
catch-clauses ::= (specific-catch-clauses general-catch-clause?) | (specific-catch-clauses? general-catch-clause) ;
array-creation-expression ::= ("new" non-array-type "[" expression-list "]" rank-specifiers? array-initializer?) | ("new" array-type array-initializer) | ("new" rank-specifier array-initializer) ;
operator-declaration ::= attributes? operator-modifiers operator-declarator operator-body ;
constant-declaration ::= attributes? constant-modifiers? "const" type constant-declarators ";" ;
compilation-unit ::= (extern-alias-directives? using-directives? global-attributes?) | (namespace-member-declarations?) ;
explicit-anonymous-function-parameter ::= anonymous-function-parameter-modifier? type identifier ;
implicit-anonymous-function-signature ::= ("(" implicit-anonymous-function-parameter-list? ")") | implicit-anonymous-function-parameter ;
static-constructor-modifiers ::= ("extern"? "static") | ("static" "extern"?) ;
static-constructor-declaration ::= attributes? static-constructor-modifiers identifier "(" ")" static-constructor-body ;
throw-statement ::= "throw" expression? ";" ;
qualified-alias-member ::= identifier "::" identifier type-argument-list? ;
event-declaration ::= (attributes? event-modifiers? "event" type variable-declarators ";") | (attributes? event-modifiers? "event" type member-name "{" event-accessor-declarations "}") ;
simple-name ::= identifier type-argument-list? ;
argument ::= argument-name? argument-value ;
object-creation-expression ::= ("new" type "(" argument-list? ")" object-or-collection-initializer?) | ("new" type object-or-collection-initializer) ;
interface-body ::= "{" interface-member-declarations? "}" ;
parameter-array ::= attributes? "params" array-type identifier ;
attribute-section ::= ("[" attribute-target-specifier? attribute-list "]") | ("[" attribute-target-specifier? attribute-list "," "]") ;
anonymous-object-initializer ::= ("{" member-declarator-list? "}") | ("{" member-declarator-list "," "}") ;
switch-block ::= "{" switch-sections? "}" ;
interface-event-declaration ::= attributes? "new"? "event" type identifier ";" ;
delegate-declaration ::= (attributes? delegate-modifiers? "delegate" return-type) | (identifier variant-type-parameter-list?) | ("(" formal-parameter-list? ")" type-parameter-constraints-clauses? ";") ;
enum-declaration ::= attributes? enum-modifiers? "enum" identifier enum-base? enum-body ";"? ;
indexer-declaration ::= attributes? indexer-modifiers? indexer-declarator "{" accessor-declarations "}" ;
constructor-declaration ::= attributes? constructor-modifiers? constructor-declarator constructor-body ;
field-declaration ::= attributes? field-modifiers? type variable-declarators ";" ;
destructor-declaration ::= attributes? "extern"? "~" identifier "(" ")" destructor-body ;
class-declaration ::= (attributes? class-modifiers? "partial"? "class" identifier type-parameter-list?) | (class-base? type-parameter-constraints-clauses? class-body ";"?) ;
anonymous-method-expression ::= "delegate" explicit-anonymous-function-signature? block ;
interface-method-declaration ::= (attributes? "new"? return-type identifier type-parameter-list) | ("(" formal-parameter-list? ")" type-parameter-constraints-clauses? ";") ;
generic-dimension-specifier ::= "<" commas? ">" ;
add-accessor-declaration ::= attributes? "add" block ;
remove-accessor-declaration ::= attributes? "remove" block ;
attribute ::= attribute-name attribute-arguments? ;
struct-body ::= "{" struct-member-declarations? "}" ;
interface-indexer-declaration ::= attributes? "new"? type "this" "[" formal-parameter-list "]" "{" interface-accessors "}" ;
interface-property-declaration ::= attributes? "new"? type identifier "{" interface-accessors "}" ;
variant-type-parameters ::= (attributes? variance-annotation? type-parameter) | (variant-type-parameters "," attributes? variance-annotation? type-parameter) ;
enum-member-declaration ::= (attributes? identifier) | (attributes? identifier "=" constant-expression) ;
return-statement ::= "return" expression? ";" ;
fixed-parameter ::= attributes? parameter-modifier? type identifier default-argument? ;
constructor-initializer ::= (":" "base" "(" argument-list? ")") | (":" "this" "(" argument-list? ")") ;
block ::= "{" statement-list? "}" ;
get-accessor-declaration ::= attributes? accessor-modifier? "get" accessor-body ;
namespace-declaration ::= "namespace" qualified-identifier namespace-body ";"? ;
query-body ::= query-body-clauses? select-or-group-clause query-continuation? ;
namespace-or-type-name ::= (identifier type-argument-list?) | (namespace-or-type-name "." identifier type-argument-list?) | qualified-alias-member ;
struct-declaration ::= (attributes? struct-modifiers? "partial"? "struct" identifier type-parameter-list?) | (struct-interfaces? type-parameter-constraints-clauses? struct-body ";"?) ;
property-declaration ::= attributes? property-modifiers? type member-name "{" accessor-declarations "}" ;
--------------------cs::csharp-zaytsev.bgf--------------------
accessor-declarations ::= (get-accessor-declaration set-accessor-declaration?) | (set-accessor-declaration get-accessor-declaration?) ;
if-statement ::= "if" "(" expression ")" embedded-statement else-part? ;
argument ::= ref-or-out? expression ;
specific-catch-clause ::= ("catch" "(" built-in-class-type lex-csharp/identifier? ")" block) | ("catch" "(" qualified-identifier lex-csharp/identifier? ")" block) ;
method-header ::= attributes method-modifier* type-or-void qualified-identifier "(" formal-parameter-list? ")" ;
interface-accessors ::= (attributes "get" ";" (attributes "set" ";")?) | (attributes "set" ";" (attributes "get" ";")?) ;
attribute-section ::= "[" (attribute-target ":")? attribute-list ","? "]" ;
interface-event-declaration ::= attributes "new"? "event" type lex-csharp/identifier ";" ;
delegate-declaration ::= attributes delegate-modifier* "delegate" type-or-void lex-csharp/identifier "(" formal-parameter-list? ")" ";" ;
enum-body ::= ("{" "}") | ("{" {enum-member-declaration ","}+ ","? "}") ;
enum-declaration ::= attributes enum-modifier* "enum" lex-csharp/identifier (":" integral-type)? enum-body ";"? ;
array-initializer ::= ("{" "}") | ("{" {variable-initializer ","}+ ","? "}") ;
for-statement ::= "for" "(" for-initializer? ";" expression? ";" statement-expression-list? ")" embedded-statement ;
destructor-declaration ::= attributes "extern"? "~" lex-csharp/identifier "(" ")" maybe-empty-block ;
interface-declaration ::= attributes interface-modifier* "interface" lex-csharp/identifier (":" qualified-identifier-list)? interface-body ";"? ;
attribute-arguments ::= "(" expression-list? ")" ;
class-declaration ::= attributes class-modifier* "class" lex-csharp/identifier class-base? class-body ";"? ;
constructor-declarator ::= lex-csharp/identifier "(" formal-parameter-list? ")" constructor-initializer? ;
interface-method-declaration ::= attributes "new"? type-or-void lex-csharp/identifier "(" formal-parameter-list? ")" ";" ;
try-statement ::= ("try" block catch-clauses finally-clause?) | ("try" block finally-clause) ;
attribute ::= attribute-name attribute-arguments? ;
interface-indexer-declaration ::= attributes "new"? type "this" "[" formal-parameter-list "]" "{" interface-accessors "}" ;
interface-property-declaration ::= attributes "new"? type lex-csharp/identifier "{" interface-accessors "}" ;
enum-member-declaration ::= attributes lex-csharp/identifier ("=" expression)? ;
catch-clauses ::= (specific-catch-clause+ general-catch-clause?) | (specific-catch-clause* general-catch-clause) ;
return-statement ::= "return" expression? ";" ;
fixed-parameter ::= attributes parameter-modifier? type lex-csharp/identifier ;
global-attribute-section ::= "[" "assembly" ":" attribute-list ","? "]" ;
static-constructor-modifiers ::= ("extern"? "static") | ("static" "extern") ;
namespace-declaration ::= "namespace" qualified-identifier namespace-body ";"? ;
throw-statement ::= "throw" expression? ";" ;
class-base ::= (":" qualified-identifier-list) | (":" built-in-class-type ("," qualified-identifier-list)?) ;
using-directive ::= "using" (lex-csharp/identifier "=")? qualified-identifier ";" ;
primary-expression ::= ("new" non-array-type "[" expression-list "]" rank-specifier* array-initializer?) | ("new" array-type array-initializer) | lex-csharp/literal | lex-csharp/identifier | ("(" expression ")") | (primary-expression "." lex-csharp/identifier) | (predefined-type "." lex-csharp/identifier) | (primary-expression "(" argument-list ")") | (primary-expression "[" expression-list "]") | "this" | ("base" "." lex-csharp/identifier) | ("base" "[" expression-list "]") | (primary-expression increment-decrement) | ("new" type "(" argument-list ")") | ("typeof" "(" type-or-void ")") | ("checked" "(" expression ")") | ("unchecked" "(" expression ")") ;
struct-declaration ::= attributes struct-modifier* "struct" lex-csharp/identifier (":" qualified-identifier-list)? struct-body ";"? ;
--------------------cs::csharp-antoniol.bgf--------------------
else_part ::= "//"? elsedef_line newline line* ;
elsif_part ::= "//"? elsifdef_line newline line* ;
ifdef ::= "//"? ifdef_line newline line* elsif_part* else_part? "//"? endifdef_line newline ;
line ::= ifdef | ("//"? other_preprocessor_line newline) | ("//"? any_other_line newline) ;
--------------------cs::csharp-cordy.bgf--------------------
array_initializer ::= "{" variable_initializer_list? ","? "}" ;
member_access_operator ::= "." id type_argument_list? ;
for_statement ::= "for" "(" for_initializer? ";" for_condition? ";" for_iterator? ")" nested_statement NL ;
object_creation_expression ::= "new" type "(" argument_list? ")" ;
simple_name ::= id type_argument_list? ;
namespace_or_type_name ::= "this"? id colon_colon_id? dot_id* type_argument_list? ;
interface_declaration ::= attributes? interface_modifiers? "partial"? "interface" id type_parameter_list? interface_base? type_parameter_constraints_clauses? NL interface_body NL ;
input_parameter ::= type? id ;
indexer_declarator ::= type interface_type_dot? "this" "[" formal_parameter_list "]" ;
anonymous_method_signature ::= "(" anonymous_method_parameter_list? ")" ;
try_statement ::= "try" block NL catch_clauses? finally_clause? ;
key_expr_ascending_descending ::= key_expr ascending_descending? ;
interface_body ::= "{" NL IN interface_member_declarations? EX "}" ";"? NL ;
static_constructor_modifiers ::= ("extern"? "static") | ("static" "extern"?) ;
 static_constructor_modifiers ::= ("extern"? "unsafe"? "static") | ("unsafe"? "extern"? "static") | ("extern"? "static" "unsafe"?) | ("unsafe"? "static" "extern"?) | ("static" "extern"? "unsafe"?) | ("static" "unsafe"? "extern"?) ;
static_constructor_declaration ::= attributes? static_constructor_modifiers id "(" ")" NL static_constructor_body NL ;
anonymous_method_expression ::= "delegate" anonymous_method_signature? block ;
object_formals ::= "(" formal_parameter_list? ")" ;
interface_method_declaration ::= attributes? "new"? return_type id type_parameter_list? "(" formal_parameter_list? ")" type_parameter_constraints_clauses? ";" NL ;
object_initializer ::= "{" member_initializer_list? ","? "}" ;
add_accessor_declaration ::= attributes? "add" block NL ;
catch_clauses ::= specific_catch_clauses? general_catch_clause? ;
specific_catch_clause ::= "catch" "(" class_type id? ")" block NL ;
operator_declaration ::= attributes? operator_modifiers? operator_declarator operator_body ;
constant_declaration ::= attributes? constant_modifiers? "const" type constant_declarators ";" NL ;
remove_accessor_declaration ::= attributes? "remove" block NL ;
anonymous_method_parameter ::= parameter_modifier? type id ;
interface_property_declaration ::= attributes? "new"? type id NL "{" NL IN interface_accessors EX "}" NL ;
throw_statement ::= "throw" expression? ";" NL ;
event_declaration ::= (attributes? event_modifiers? "event" type variable_declarators ";" NL) | (attributes? event_modifiers? "event" type member_name "{" NL IN event_accessor_declarations EX "}" NL EX) ;
variable_declarator ::= id equals_variable_initializer? ;
enum_member_declaration ::= attributes? id equals_constant_expression? ;
interface_event_declaration ::= attributes? "new"? "event" type id ";" NL ;
finalizer_declaration ::= attributes? "extern"? "~" id "(" ")" finalizer_body ;
 finalizer_declaration ::= (attributes? "extern"? "unsafe"? "~" id "(" ")" NL finalizer_body NL) | (attributes? "unsafe"? "extern"? "~" id "(" ")" NL finalizer_body NL) ;
dot_id_generic_dimension_specifier ::= "." id generic_dimension_specifier? ;
if_statement ::= "if" "(" boolean_expression ")" nested_statement else_if_clause* else_clause? NL ;
attributes_type_parameter ::= attributes? type_parameter ;
struct_body ::= "{" NL IN struct_member_declarations? EX "}" ";"? NL ;
get_accessor_declaration ::= attributes? accessor_modifier? "get" accessor_body ;
formal_parameter_list ::= fixed_parameters comma_parameter_array? ;
parameter_array ::= attributes? "params" array_type id ;
attribute_section ::= "[" attribute_target_specifier? attribute_list ","? "]" ;
delegate_declaration ::= attributes? delegate_modifiers? "delegate" return_type id type_parameter_list? "(" formal_parameter_list? ")" type_parameter_constraints_clauses? ";" NL ;
set_accessor_declaration ::= attributes? accessor_modifier? "set" accessor_body ;
member_initializer ::= (member_name_equals? expression) | (member_name_equals? array_initializer) ;
pointer_member_access_operator ::= "->" id type_argument_list? ;
enum_declaration ::= attributes? enum_modifiers? "enum" id enum_base? enum_body NL ;
indexer_declaration ::= attributes? indexer_modifiers? indexer_declarator "{" NL IN accessor_declarations EX "}" NL ;
query_body ::= query_body_clause* final_query_clause query_continuation? ;
item_name ::= type? simple_name ;
unbound_type_name ::= id colon_colon_id? generic_dimension_specifier? dot_id_generic_dimension_specifier* ;
constructor_declaration ::= attributes? constructor_modifiers? constructor_declarator NL constructor_body NL ;
field_declaration ::= attributes? field_modifiers? type variable_declarators ";" NL ;
interface_indexer_declaration ::= attributes? "new"? type "this" "[" formal_parameter_list "]" "{" NL IN interface_accessors EX "}" NL ;
class_declaration ::= attributes? class_modifiers? "partial"? "class" id type_parameter_list? class_base? type_parameter_constraints_clauses? NL class_body ;
accessor_declarations ::= (get_accessor_declaration set_accessor_declaration?) | (set_accessor_declaration get_accessor_declaration?) ;
qualified_alias_member ::= id "::" id type_argument_list? ;
method_header ::= attributes? method_modifiers? return_type member_name type_parameter_list? "(" formal_parameter_list? ")" type_parameter_constraints_clauses? ;
global_attribute_section ::= "[" global_attribute_target_specifier attribute_list ","? "]" ;
join_clause ::= "join" item_name "in" src_expr "on" key_expr "equals" key_expr into_item_name? ;
enum_body ::= "{" NL IN enum_member_declarations? ","? EX "}" ";"? NL ;
return_statement ::= "return" expression? ";" NL ;
fixed_parameter ::= (attributes? parameter_modifier? type id) | parameter_array ;
constructor_initializer ::= (":" "base" "(" argument_list? ")") | (":" "this" "(" argument_list? ")") ;
attribute ::= attribute_name attribute_arguments? ;
object_or_delegate_creation_expression ::= "new" type "(" argument_list? ")" ;
constructor_declarator ::= id "(" formal_parameter_list? ")" constructor_initializer? ;
object_initializer_expression ::= "new" array_type? object_formals? rank_specifiers? object_initializer ;
array_creation_expression ::= ("new" non_array_type "[" expression_list "]" rank_specifiers? array_initializer?) | ("new" array_type array_initializer) ;
base_access ::= ("base" "." id type_argument_list?) | ("base" "[" expression+ "]") ;
struct_declaration ::= attributes? struct_modifiers? "partial"? "struct" id type_parameter_list? struct_interfaces? type_parameter_constraints_clauses? NL struct_body NL ;
property_declaration ::= NL attributes? property_modifiers? type member_name "{" NL IN accessor_declarations EX "}" NL ;
member_name ::= interface_type_dot? id ;
block ::= "{" NL IN statement_list? EX "}" ";"? ;
class_body ::= "{" NL IN class_member_declarations? EX "}" ";"? NL ;
interface_accessors ::= (attributes? "get" ";") | (attributes? "set" ";") | (attributes? "get" ";" attributes? "set" ";") | (attributes? "set" ";" attributes? "get" ";") ;
namespace_body ::= "{" NL IN extern_alias_directives? using_directives? namespace_member_declarations? EX "}" ";"? NL ;
local_variable_declarator ::= id equals_local_variable_initializer? ;
compilation_unit ::= extern_alias_directives? using_directives? global_attributes? namespace_member_declarations? ;
--------------------cs::csharp-ecma-334-1.bgf--------------------
set-accessor-declaration ::= attributes? "set" accessor-body ;
accessor-declarations ::= (get-accessor-declaration set-accessor-declaration?) | (set-accessor-declaration get-accessor-declaration?) ;
specific-catch-clause ::= "catch" "(" class-type identifier? ")" block ;
method-header ::= attributes? method-modifiers? return-type member-name "(" formal-parameter-list? ")" ;
interface-accessors ::= (attributes? "get" ";") | (attributes? "set" ";") | (attributes? "get" ";" attributes? "set" ";") | (attributes? "set" ";" attributes? "get" ";") ;
object-creation-expression ::= "new" type "(" argument-list? ")" ;
interface-body ::= "{" interface-member-declarations? "}" ;
parameter-array ::= attributes? "params" array-type identifier ;
invocation-expression ::= primary-expression "(" argument-list? ")" ;
attribute-section ::= ("[" attribute-target-specifier? attribute-list "]") | ("[" attribute-target-specifier? attribute-list "," "]") ;
switch-block ::= "{" switch-sections? "}" ;
interface-event-declaration ::= attributes? "new"? "event" type identifier ";" ;
delegate-declaration ::= attributes? delegate-modifiers? "delegate" type identifier "(" formal-parameter-list? ")" ";" ;
enum-body ::= ("{" enum-member-declarations? "}") | ("{" enum-member-declarations "," "}") ;
enum-declaration ::= attributes? enum-modifiers? "enum" identifier enum-base? enum-body ";"? ;
array-initializer ::= ("{" variable-initializer-list? "}") | ("{" variable-initializer-list "," "}") ;
indexer-declaration ::= attributes? indexer-modifiers? indexer-declarator "{" accessor-declarations "}" ;
for-statement ::= "for" "(" for-initializer? ";" for-condition? ";" for-iterator? ")" embedded-statement ;
constructor-declaration ::= attributes? constructor-modifiers? constructor-declarator constructor-body ;
field-declaration ::= attributes? field-modifiers? type variable-declarators ";" ;
interface-declaration ::= attributes? interface-modifiers? "interface" identifier interface-base? interface-body ";"? ;
destructor-declaration ::= attributes? "extern"? "~" identifier "(" ")" destructor-body ;
attribute-arguments ::= ("(" positional-argument-list? ")") | ("(" positional-argument-list "," named-argument-list ")") | ("(" named-argument-list ")") ;
class-declaration ::= attributes? class-modifiers? "class" identifier class-base? class-body ";"? ;
constructor-declarator ::= identifier "(" formal-parameter-list? ")" constructor-initializer? ;
interface-method-declaration ::= attributes? "new"? return-type identifier "(" formal-parameter-list? ")" ";" ;
add-accessor-declaration ::= attributes? "add" block ;
remove-accessor-declaration ::= attributes? "remove" block ;
rank-specifier ::= "[" dim-separators? "]" ;
attribute ::= attribute-name attribute-arguments? ;
struct-body ::= "{" struct-member-declarations? "}" ;
interface-indexer-declaration ::= attributes? "new"? type "this" "[" formal-parameter-list "]" "{" interface-accessors "}" ;
class-body ::= "{" class-member-declarations? "}" ;
interface-property-declaration ::= attributes? "new"? type identifier "{" interface-accessors "}" ;
namespace-body ::= "{" using-directives? namespace-member-declarations? "}" ;
enum-member-declaration ::= (attributes? identifier) | (attributes? identifier "=" constant-expression) ;
catch-clauses ::= (specific-catch-clauses general-catch-clause?) | (specific-catch-clauses? general-catch-clause) ;
return-statement ::= "return" expression? ";" ;
array-creation-expression ::= ("new" non-array-type "[" expression-list "]" rank-specifiers? array-initializer?) | ("new" array-type array-initializer) ;
operator-declaration ::= attributes? operator-modifiers operator-declarator operator-body ;
constant-declaration ::= attributes? constant-modifiers? "const" type constant-declarators ";" ;
fixed-parameter ::= attributes? parameter-modifier? type identifier ;
constructor-initializer ::= (":" "base" "(" argument-list? ")") | (":" "this" "(" argument-list? ")") ;
compilation-unit ::= using-directives? global-attributes? namespace-member-declarations? ;
block ::= "{" statement-list? "}" ;
get-accessor-declaration ::= attributes? "get" accessor-body ;
static-constructor-modifiers ::= ("extern"? "static") | ("static" "extern"?) ;
static-constructor-declaration ::= attributes? static-constructor-modifiers identifier "(" ")" static-constructor-body ;
throw-statement ::= "throw" expression? ";" ;
namespace-declaration ::= "namespace" qualified-identifier namespace-body ";"? ;
event-declaration ::= (attributes? event-modifiers? "event" type variable-declarators ";") | (attributes? event-modifiers? "event" type member-name "{" event-accessor-declarations) | "}" ;
struct-declaration ::= attributes? struct-modifiers? "struct" identifier struct-interfaces? struct-body ";"? ;
property-declaration ::= attributes? property-modifiers? type member-name "{" accessor-declarations "}" ;
--------------------dart::spec-0.01.bgf--------------------
functionTypeAlias ::= "typedef" functionPrefix typeParameters? formalParameterList ";" ;
scriptDefinition ::= scriptTag? libraryName? libraryImport* include* resource* topLevelDefinition* ;
conditionalExpression ::= logicalOrExpression ("?" expression ":" expression)? ;
constantObjectExpression ::= "const" type ("." identifier)? arguments ;
type ::= qualified typeArguments? ;
declaration ::= (constantConstructorSignature (redirection | initializers)?) | (constructorSignature (redirection | initializers)?) | (functionSignature redirection) | (namedConstructorSignature redirection) | ("abstract" getterSignature) | ("abstract" setterSignature) | ("abstract" operatorSignature) | ("abstract" functionSignature) | ("static" "final" type? staticFinalDeclarationList) | ("static"? initializedVariableDeclaration) ;
setterSignature ::= "static"? returnType? "set" identifier formalParameterList ;
defaultFormalParameter ::= normalFormalParameter ("=" expression)? ;
formalParameterList ::= ("(" ")") | ("(" normalFormalParameters ("," namedFormalParameters)? ")") | namedFormalParameters ;
expressionStatement ::= expression? ";" ;
HEX_DIGIT_SEQUENCE ::= HEX_DIGIT HEX_DIGIT? HEX_DIGIT? HEX_DIGIT? HEX_DIGIT? HEX_DIGIT? HEX_DIGIT? ;
tryStatement ::= "try" block (catchPart+ finallyPart?) | finallyPart ;
operatorSignature ::= returnType? "operator" operator formalParameterList ;
mapLiteral ::= "const"? typeArguments? "{" (mapLiteralEntry ("," mapLiteralEntry)* ","?)? "}" ;
equalityExpression ::= (relationalExpression (equalityOperator relationalExpression)?) | ("super" equalityOperator relationalExpression) ;
listLiteral ::= "const"? typeArguments? "[" (expressionList ","?)? "]" ;
breakStatement ::= "break" identifier? ";" ;
EXPONENT ::= "e" | "E" ("+" | "-")? DIGIT+ ;
libraryDefinition ::= scriptTag? libraryName libraryImport* include* resource* topLevelDefinition* ;
isOperator ::= "is" "!"? ;
finalVarOrType ::= ("final" type?) | "var" | type ;
getterSignature ::= "static"? returnType? "get" identifier formalParameterList ;
interfaceDefinition ::= "interface" identifier typeParameters? superinterfaces? factorySpecification? "{" interfaceMemberDefinition* "}" ;
redirection ::= ":" "this" ("." identifier)? arguments ;
classDefinition ::= "class" identifier typeParameters? superclass? interfaces? "{" classMemberDefinition* "}" ;
initializedVariableDeclaration ::= declaredIdentifier ("=" expression)? ("," initializedIdentifier)* ;
throwStatement ::= "throw" expression? ";" ;
interfaceMemberDefinition ::= ("static" "final" type? initializedIdentifierList ";") | (functionSignature ";") | (constantConstructorSignature ";") | (namedConstructorSignature ";") | (getterSignature ";") | (setterSignature ";") | (operatorSignature ";") | (variableDeclaration ";") ;
topLevelDefinition ::= classDefinition | interfaceDefinition | functionTypeAlias | (functionSignature functionBody) | (returnType? getOrSet identifier formalParameterList functionBody) | ("final" type? staticFinalDeclarationList ";") | (variableDeclaration ";") ;
fieldFormalParameter ::= finalVarOrType? "this" "." identifier ;
returnStatement ::= "return" expression? ";" ;
relationalExpression ::= (shiftExpression ((isOperator type) | (relationalOperator shiftExpression))?) | ("super" relationalOperator shiftExpression) ;
stringLiteral ::= ("@"? MULTI_LINE_STRING) | SINGLE_LINE_STRING ;
initializedIdentifier ::= identifier ("=" expression)? ;
qualified ::= identifier ("." identifier)? ;
compoundAssignmentOperator ::= "*=" | "/=" | "~/=" | "%=" | "+=" | "-=" | "<<=" | (">" ">" ">" "="?) | ("<" "<" "="?) | "&=" | "^=" | "|=" ;
switchStatement ::= "switch" "(" expression ")" "{" switchCase* defaultCase? "}" ;
factorySpecification ::= "factory" identifier typeParameters? ;
newExpression ::= "new" type ("." identifier)? arguments ;
methodSignature ::= factoryConstructorSignature | ("static" functionSignature) | getterSignature | setterSignature | operatorSignature | (functionSignature initializers?) | (namedConstructorSignature initializers?) ;
forInitializerStatement ::= (initializedVariableDeclaration ";") | (expression? ";") ;
arguments ::= "(" argumentList? ")" ;
forLoopParts ::= (forInitializerStatement expression? ";" expressionList?) | (declaredIdentifier "in" expression) | (identifier "in" expression) ;
ifStatement ::= "if" "(" expression ")" statement ("else" statement)? ;
defaultCase ::= label? ("case" expression ":")* "default" ":" statements ;
functionExpression ::= (returnType? identifier)? formalParameterList functionExpressionBody ;
typeParameter ::= identifier ("extends" type)? ;
catchPart ::= "catch" "(" declaredIndentifier ("," declaredIndentifier)? ")" block ;
SINGLE_LINE_COMMENT ::= "//" Î±* NEWLINE? ;
functionPrefix ::= returnType? identifier ;
NUMBER ::= (DIGIT+ ("." DIGIT*)? EXPONENT?) | ("." DIGIT+ EXPONENT?) ;
continueStatement ::= "continue" identifier? ";" ;
fieldInitializer ::= ("this" ".")? identifier "=" conditionalExpression ;
factoryConstructorSignature ::= "factory" qualified typeVariables? ("." identifier)? formalParameterList ;
switchCase ::= label? ("case" expression ":")+ statements ;
libraryImport ::= "#" "import" "(" stringLiteral ("," "prefix:" stringLiteral)? ")" ";" ;
functionSignature ::= returnType? identifier formalParameterList ;
--------------------dart::google.bgf--------------------
functionTypeAlias ::= TYPEDEF functionPrefix typeParameters? formalParameterList ";" ;
conditionalExpression ::= logicalOrExpression ("?" expression ":" expression)? ;
libraryBody ::= libraryImport? librarySource? ;
constInitializedIdentifier ::= identifier ("=" constantExpression)? ;
declaration ::= (constantConstructorDeclaration (redirection | initializers)?) | (functionDeclaration redirection) | (namedConstructorDeclaration redirection) | (ABSTRACT specialSignatureDefinition) | (ABSTRACT functionDeclaration) | (STATIC FINAL type? staticFinalDeclarationList) | (STATIC? constInitializedVariableDeclaration) ;
type ::= qualified typeArguments? ;
defaultFormalParameter ::= normalFormalParameter ("=" constantExpression)? ;
formalParameterList ::= ("(" namedFormalParameters? ")") | ("(" normalFormalParameter normalFormalParameterTail? ")") ;
librarySource ::= SOURCE "=" "[" sourceUrls? "]" ;
tryStatement ::= TRY block (catchPart+ finallyPart?) | finallyPart ;
mapLiteral ::= "{" (mapLiteralEntry ("," mapLiteralEntry)* ","?)? "}" ;
specialSignatureDefinition ::= (STATIC? returnType? getOrSet identifier formalParameterList) | (returnType? OPERATOR userDefinableOperator formalParameterList) ;
equalityExpression ::= (relationalExpression (equalityOperator relationalExpression)?) | (SUPER equalityOperator relationalExpression) ;
listLiteral ::= "[" (expressionList ","?)? "]" ;
EXPONENT ::= "e" | "E" ("+" | "-")? DIGIT+ ;
isOperator ::= IS "!"? ;
finalVarOrType ::= (FINAL type?) | VAR | type ;
constInitializedVariableDeclaration ::= declaredIdentifier ("=" constantExpression)? ("," constInitializedIdentifier)* ;
interfaceDefinition ::= INTERFACE identifier typeParameters? superinterfaces? factorySpecification? "{" interfaceMemberDefinition* "}" ;
redirection ::= ":" THIS ("." identifier)? arguments ;
classDefinition ::= (CLASS identifier typeParameters? superclass? interfaces? "{" classMemberDefinition* "}") | (CLASS identifier typeParameters? interfaces? NATIVE STRING "{" classMemberDefinition* "}") ;
initializedVariableDeclaration ::= declaredIdentifier ("=" expression)? ("," initializedIdentifier)* ;
compilationUnit ::= HASHBANG? directive* topLevelDefinition* EOF ;
importReference ::= (IDENTIFIER ":")? STRING ;
interfaceMemberDefinition ::= (STATIC FINAL type? initializedIdentifierList ";") | (functionDeclaration ";") | (constantConstructorDeclaration ";") | (namedConstructorDeclaration ";") | (specialSignatureDefinition ";") | (variableDeclaration ";") ;
topLevelDefinition ::= classDefinition | interfaceDefinition | functionTypeAlias | (functionDeclaration functionBodyOrNative) | (returnType? getOrSet identifier formalParameterList functionBodyOrNative) | (FINAL type? staticFinalDeclarationList ";") | (constInitializedVariableDeclaration ";") ;
primaryNoFE ::= THIS | (SUPER assignableSelector) | literal | identifier | (CONST? typeArguments? compoundLiteral) | (NEW | CONST type ("." identifier)? arguments) | expressionInParentheses ;
constructorDeclaration ::= (identifier formalParameterList (redirection | initializers)?) | (namedConstructorDeclaration (redirection | initializers)?) ;
fieldFormalParameter ::= finalVarOrType? THIS "." identifier ;
sourceUrls ::= STRING ("," STRING)* ","? ;
relationalExpression ::= (shiftExpression ((isOperator type) | (relationalOperator shiftExpression))?) | (SUPER relationalOperator shiftExpression) ;
initializedIdentifier ::= identifier ("=" expression)? ;
qualified ::= identifier ("." identifier)? ;
methodDeclaration ::= factoryConstructorDeclaration | (STATIC functionDeclaration) | specialSignatureDefinition | (functionDeclaration initializers?) | (namedConstructorDeclaration initializers?) ;
forInitializerStatement ::= (initializedVariableDeclaration ";") | (expression? ";") ;
arguments ::= "(" argumentList? ")" ;
forLoopParts ::= (forInitializerStatement expression? ";" expressionList?) | (declaredIdentifier IN expression) | (identifier IN expression) ;
defaultCase ::= label? (CASE expression ":")* DEFAULT ":" statements ;
STRING ::= ("@"? MULTI_LINE_STRING) | SINGLE_LINE_STRING ;
functionExpression ::= (returnType? identifier)? formalParameterList functionExpressionBody ;
functionNative ::= NATIVE STRING? ";" ;
typeParameter ::= identifier (EXTENDS type)? ;
catchPart ::= CATCH "(" declaredIdentifier ("," declaredIdentifier)? ")" block ;
importReferences ::= importReference ("," importReference)* ","? ;
nonLabelledStatement ::= block | (initializedVariableDeclaration ";") | iterationStatement | selectionStatement | tryStatement | (BREAK identifier? ";") | (CONTINUE identifier? ";") | (RETURN expression? ";") | (THROW expression? ";") | (expression? ";") | (ASSERT "(" conditionalExpression ")" ";") | (functionDeclaration functionBody) ;
functionPrefix ::= returnType? identifier ;
factoryConstructorDeclaration ::= FACTORY qualified typeParameters? ("." identifier)? formalParameterList ;
NUMBER ::= (DIGIT+ NUMBER_OPT_FRACTIONAL_PART EXPONENT? NUMBER_OPT_ILLEGAL_END) | ("." DIGIT+ EXPONENT? NUMBER_OPT_ILLEGAL_END) ;
fieldInitializer ::= (THIS ".")? identifier "=" conditionalExpression ;
HASHBANG ::= "#!" Î±* NEWLINE? ;
switchCase ::= label? (CASE expression ":")+ statements ;
selectionStatement ::= (IF "(" expression ")" statement (ELSE statement)?) | (SWITCH "(" expression ")" "{" switchCase* defaultCase? "}") ;
normalFormalParameterTail ::= ("," namedFormalParameters) | ("," normalFormalParameter normalFormalParameterTail?) ;
declaredIdentifier ::= (FINAL type? identifier) | (VAR identifier) | (type identifier) ;
functionDeclaration ::= returnType? identifier formalParameterList ;
libraryImport ::= IMPORT "=" "[" importReferences? "]" ;
--------------------dart::spec-0.05.bgf--------------------
functionTypeAlias ::= "typedef" functionPrefix typeParameters? formalParameterList ";" ;
scriptDefinition ::= scriptTag? libraryName? import* include* resource* topLevelDefinition* ;
conditionalExpression ::= logicalOrExpression ("?" expression ":" expression)? ;
type ::= qualified typeArguments? ;
constObjectExpression ::= "const" type ("." identifier)? arguments ;
declaration ::= (constantConstructorSignature (redirection | initializers)?) | (functionSignature redirection) | (namedConstructorSignature redirection) | ("abstract" getterSignature) | ("abstract" setterSignature) | ("abstract" operatorSignature) | ("abstract" functionSignature) | ("static" "final" type? staticFinalDeclarationList) | ("static"? initializedVariableDeclaration) ;
setterSignature ::= "static"? returnType? "set" identifier formalParameterList ;
defaultFormalParameter ::= normalFormalParameter ("=" constantExpression)? ;
formalParameterList ::= ("(" ")") | ("(" normalFormalParameters ("," namedFormalParameters)? ")") | ("(" namedFormalParameters ")") ;
expressionStatement ::= expression? ";" ;
HEX_DIGIT_SEQUENCE ::= HEX_DIGIT HEX_DIGIT? HEX_DIGIT? HEX_DIGIT? HEX_DIGIT? HEX_DIGIT? HEX_DIGIT? ;
tryStatement ::= "try" block (catchPart+ finallyPart?) | finallyPart ;
operatorSignature ::= returnType? operator operator formalParameterList ;
mapLiteral ::= "const"? typeArguments? "{" (mapLiteralEntry ("," mapLiteralEntry)* ","?)? "}" ;
equalityExpression ::= (relationalExpression (equalityOperator relationalExpression)?) | ("super" equalityOperator relationalExpression) ;
listLiteral ::= "const"? typeArguments? "[" (expressionList ","?)? "]" ;
breakStatement ::= "break" identifier? ";" ;
EXPONENT ::= "e" | "E" ("+" | "-")? DIGIT+ ;
libraryDefinition ::= scriptTag? libraryName import* include* resource* topLevelDefinition* ;
isOperator ::= "is" "!"? ;
finalVarOrType ::= ("final" type?) | "var" | type ;
getterSignature ::= "static"? returnType? "get" identifier formalParameterList ;
interfaceDefinition ::= "interface" identifier typeParameters? superinterfaces? factorySpecification? "{" interfaceMemberDefinition* "}" ;
redirection ::= ":" "this" ("." identifier)? arguments ;
classDefinition ::= "class" identifier typeParameters? superclass? interfaces? "{" classMemberDefinition* "}" ;
initializedVariableDeclaration ::= declaredIdentifier ("=" expression)? ("," initializedIdentifier)* ;
throwStatement ::= "throw" expression? ";" ;
interfaceMemberDefinition ::= ("static" "final" type? initializedIdentifierList ";") | (functionSignature ";") | (constantConstructorSignature ";") | (namedConstructorSignature ";") | (getterSignature ";") | (setterSignature ";") | (operatorSignature ";") | (variableDeclaration ";") ;
import ::= "#" "import" "(" stringLiteral ("," "prefix:" stringLiteral)? ")" ";" ;
topLevelDefinition ::= classDefinition | interfaceDefinition | functionTypeAlias | (functionSignature functionBody) | (returnType? getOrSet identifier formalParameterList functionBody) | ("final" type? staticFinalDeclarationList ";") | (variableDeclaration ";") ;
fieldFormalParameter ::= finalVarOrType? "this" "." identifier ;
returnStatement ::= "return" expression? ";" ;
relationalExpression ::= (shiftExpression ((isOperator type) | (relationalOperator shiftExpression))?) | ("super" relationalOperator shiftExpression) ;
stringLiteral ::= ("@"? MULTI_LINE_STRING) | SINGLE_LINE_STRING ;
initializedIdentifier ::= identifier ("=" expression)? ;
qualified ::= identifier ("." identifier)? ;
switchStatement ::= "switch" "(" expression ")" "{" switchCase* defaultCase? "}" ;
factorySpecification ::= "factory" qualified typeParameters? ;
newExpression ::= "new" type ("." identifier)? arguments ;
methodSignature ::= factoryConstructorSignature | ("static" functionSignature) | getterSignature | setterSignature | operatorSignature | (functionSignature initializers?) | (namedConstructorSignature initializers?) ;
forInitializerStatement ::= (initializedVariableDeclaration ";") | (expression? ";") ;
arguments ::= "(" argumentList? ")" ;
forLoopParts ::= (forInitializerStatement expression? ";" expressionList?) | (declaredIdentifier "in" expression) | (identifier "in" expression) ;
ifStatement ::= "if" "(" expression ")" statement ("else" statement)? ;
defaultCase ::= label? ("case" expression ":")* "default" ":" statements ;
functionExpression ::= (returnType? identifier)? formalParameterList functionExpressionBody ;
typeParameter ::= identifier ("extends" type)? ;
catchPart ::= "catch" "(" simpleFormalParameter ("," simpleFormalParameter)? ")" block ;
SINGLE_LINE_COMMENT ::= "//" "~" NEWLINE* NEWLINE? ;
functionPrefix ::= returnType? identifier ;
NUMBER ::= ("+"? DIGIT+ ("." DIGIT+)? EXPONENT?) | ("+"? "." DIGIT+ EXPONENT?) ;
continueStatement ::= "continue" identifier? ";" ;
fieldInitializer ::= ("this" ".")? identifier "=" conditionalExpression ;
factoryConstructorSignature ::= "factory" qualified typeParameters? ("." identifier)? formalParameterList ;
switchCase ::= label? ("case" expression ":")+ statements ;
functionSignature ::= returnType? identifier formalParameterList ;
--------------------eiffel::bezault.bgf--------------------
Creation ::= "!" Type? "!" Writable Creation_call? ;
Integer ::= (Decimal_digit+) | (Decimal_digit (Decimal_digit Decimal_digit?)? ("_" Decimal_digit Decimal_digit Decimal_digit)+) ;
Creation_call ::= "." Procedure_name Actuals? ;
Feature_adaptation ::= Rename? New_exports? Undefine? Redefine? Select? "end" ;
Index_clause ::= Index? Index_terms ;
Postcondition ::= "ensure" "then"? Assertion ;
Unqualified_call ::= Identifier Actuals? ;
Precursor ::= Parent_qualification? "Precursor" Actuals? ;
Precondition ::= "require" "else"? Assertion ;
Feature_clause ::= Clients? Header_comment? Feature_declaration_list ;
New_feature ::= "frozen"? Feature_name ;
Class_header ::= Header_mark? "class" Class_name ;
Debug ::= "debug" Debug_keys? Compound "end" ;
Class_declaration ::= Indexing? Class_header Formal_generics? Obsolete? Inheritance? Creators? Features? Invariant? "end" ("--" "class" Class_name)? ;
Creation_clause ::= Clients? Header_comment? Procedure_list ;
Actual_generics ::= Type_list? ;
Formal_generics ::= Formal_generic_list? ;
Assertion_clause ::= Tag_mark? Unlabeled_assertion_clause ;
External ::= "external" Language_name External_name? ;
Parent ::= Class_type Feature_adaptation? ;
Multi_branch ::= "inspect" Expression When_part_list? Else_part? "end" ;
Declaration_body ::= Formal_arguments? Type_mark? Constant_or_routine? ;
Formal_generic ::= Formal_generic_name Constraint? ;
Conditional ::= "if" Then_part_list Else_part? "end" ;
Real_constant ::= Sign? Real ;
Integer_constant ::= Sign? Integer ;
Variant ::= "variant" Tag_mark? Expression ;
Loop ::= Initialization Invariant? Variant? Loop_body "end" ;
Routine ::= Obsolete? Header_comment? Precondition? Local_declarations? Routine_body Postcondition? Rescue? "end" ("--" Feature_name)? ;
Qualified_call ::= Call_qualifier? Call_chain ;
Class_type ::= Class_name Actual_generics? ;
--------------------eiffel::cordy.bgf--------------------
Creation ::= ("!!" Writable Creation_call?) | ("!" Type? "!" Writable Creation_call?) ;
Call ::= Parenthesized_qualifier? Call_chain ;
Feature_adaptation ::= NL IN Rename? New_exports? Undefine? Redefine? Select? EX "end" ;
Index_clause ::= Index? Index_terms ;
Postcondition ::= "ensure" "then"? Assertion ;
Unqualified_call ::= Entity Actuals? ;
Precondition ::= "require" "else"? Assertion ;
Feature_clause ::= Header_comment? Feature_declaration_list ;
New_feature ::= "frozen"? Feature_name ;
Formal_entity_declaration_group_Separator ::= Entity_declaration_group ";"? ;
Class_header ::= Header_mark? "class" Class_name ;
Debug ::= "debug" Debug_keys? Compound "end" ;
Class_declaration ::= Indexing? NL Class_header Formal_generics? NL IN Obsolete? Inheritance? Creators? Features? Invariant? EX "end" ;
Creation_clause ::= Clients? Header_comment? Feature_list NL ;
Assertion_clause ::= Tag_mark? Unlabeled_assertion_clause ;
External ::= "external" Language_name External_name? NL ;
Parent ::= Restricted_class_type Feature_adaptation? ;
Multi_branch ::= "inspect" Expression When_part_list? Else_part? "end" ;
Declaration_body ::= Formal_arguments? Type_mark? is_Constant? ;
Formal_generic ::= Formal_generic_name Constraint? ;
Conditional ::= "if" Then_part_list Else_part? "end" ;
Real_constant ::= Sign? Real ;
Integer_constant ::= Sign? Integer ;
Separator ::= ";"? NL ;
Restricted_class_type ::= Class_name Restricted_actual_generics? ;
Variant ::= "variant" Tag_mark? Expression ;
Loop ::= Initialization Invariant? Variant? Loop_body "end" ;
Routine ::= Obsolete? Header_comment? Precondition? Local_declarations? Routine_body Postcondition? Rescue? "end" ;
Routine_declaration_body ::= Formal_arguments? Type_mark? is_Routine? ;
Class_type ::= Class_name Actual_generics? ;
feature_Feature_clause ::= NL "feature" Clients? Feature_clause ;
--------------------eiffel::iso-25436-2006.bgf--------------------
Comment_break ::= New_line Blanks_or_tabs? "--" ;
Verbatim_string_closer ::= Close_bracket Simple_string? """ ;
Inline_agent ::= "agent" Formal_arguments? Type_mark? Attribute_or_routine? Agent_actuals? ;
New_export_item ::= Clients Header_comment? Feature_set ;
Object_call ::= (Target ".")? Unqualified_call ;
Constraint ::= "->" Constraining_types Constraint_creators? ;
Verbatim_string_opener ::= """ Simple_string? Open_bracket ;
Precondition ::= "require" "else"? Assertion ;
Feature_clause ::= "feature" Clients? Header_comment? Feature_declaration_list ;
New_feature ::= "frozen"? Extended_feature_name ;
Anchored ::= Attachment_mark? "like" Anchor ;
Debug ::= "debug" ("(" Key_list ")")? Compound "end" ;
Tuple_type ::= "TUPLE" Tuple_parameter_list? ;
Alias ::= "alias" """ Alias_name """ "convert"? ;
Creation_clause ::= "create" Clients? Header_comment? Creation_procedure_list ;
Local_declarations ::= "local" Entity_declaration_list? ;
Assertion_clause ::= Tag_mark? Unlabeled_assertion_clause ;
External ::= "external" External_language External_name? ;
Check ::= "check" Assertion Notes? "end" ;
Formal_generic ::= "frozen"? Formal_generic_name Constraint? ;
Declaration_body ::= Formal_arguments? Query_mark? Feature_value? ;
DLL_external ::= """ "dll" "windows"? DLL_identifier DLL_index? External_signature? External_file_use? """ ;
Conditional ::= "if" Then_part_list Else_part? "end" ;
Integer_constant ::= Sign? Integer ;
Variant ::= "variant" Tag_mark? Expression ;
External_signature ::= "signature" External_argument_types? (":" External_type)? ;
Formal_generic_name ::= "?"? Identifier ;
Once ::= "once" ("(" Key_list ")")? ;
Integer ::= Integer_base? Digit_sequence ;
Creation_call ::= Variable Explicit_creation_call? ;
Feature_adaptation ::= Undefine? Redefine? Rename? New_exports? Select? "end" ;
Postcondition ::= "ensure" "then"? Assertion Only? ;
Unqualified_call ::= Feature_name Actuals? ;
Extended_feature_name ::= Feature_name Alias? ;
Precursor ::= Precursor Parent_qualification? Actuals? ;
Creation_expression ::= "create" Explicit_creation_type Explicit_creation_call? ;
Manifest_constant ::= Manifest_type? Manifest_value ;
Single_constraint ::= Type Renaming? ;
Class_header ::= Header_mark? "class" Class_name ;
Placeholder ::= Manifest_type? "?" ;
Inherit_clause ::= "inherit" Non_conformance? Parent_list ;
Class_declaration ::= Notes? Class_header Formal_generics? Obsolete? Inheritance? Creators? Converters? Features? Invariant? Notes? "end" ;
Creation_instruction ::= "create" Explicit_creation_type? Creation_call ;
Only ::= "only" Feature_list? ;
Attribute_or_routine ::= Precondition? Local_declarations? Feature_body Postcondition? Rescue? "end" ;
Parent ::= Class_type Feature_adaptation? ;
Agent_unqualified ::= Feature_name Agent_actuals? ;
Multi_branch ::= "inspect" Expression When_part_list? Else_part? "end" ;
Feature_value ::= Explicit_value? Obsolete? Header_comment? Attribute_or_routine? ;
CPP_external ::= """ "C++" "inline" External_signature? External_file_use? """ ;
C_external ::= """ "C" "inline"? External_signature? External_file_use? """ ;
Real_constant ::= Sign? Real ;
Loop ::= Initialization Invariant? Exit_condition Loop_body Variant? "end" ;
Query_mark ::= Type_mark Assigner_mark? ;
Class_type ::= Attachment_mark? Class_name Actual_generics? ;
--------------------fortran::derricks.bgf--------------------
EndSelectStmt ::= LblDef "end" "select" EndName? EOS ;
FormatStmt ::= LblDef "format" "(" FormatItemList? ")" EOS ;
EndTypeStmt ::= LblDef "end" "type" TypeName? EOS ;
SubroutineRange ::= (SubroutineParList? EOS Body? EndSubroutineStmt) | (SubroutineParList EOS InternalSubProgPart EndSubroutineStmt) ;
LoopControl ::= ("while" "(" Expr ")") | (VariableName "=" Int-Real-Dp-Expression "," Int-Real-Dp-Expression ("," Int-Real-Dp-Expression)?) ;
ArrayAllocation ::= ArrayName ("(" DeferredShapeSpecList ")")? ;
PrintStmt ::= LblDef "print" FormatIdentifier ("," OutputItemList)? EOS ;
CharSelector ::= ("(" "len" "=" TypeParamValue "," "kind" "=" Expr ")") | ("(" "len" "=" TypeParamValue "," Expr ")") | ("(" "len" "=" TypeParamValue ")") | ("(" ("kind" "=")? Expr ")") ;
CommonStmt ::= LblDef "common" Comblock? CommonBlockObjectList (","? Comblock CommonBlockObjectList)* EOS ;
EndModuleStmt ::= (LblDef "end" EOS) | (LblDef "end" "module" EndName? EOS) ;
DataEditDescr ::= ("I" Icon ("." Icon)?) | ("O" Icon ("." Icon)?) | ("B" Icon ("." Icon)?) | ("Z" Icon ("." Icon)?) | ("F" Icon "." Icon) | ("E" Icon "." Icon ("E" Icon)?) | ("EN" Icon "." Icon ("E" Icon)?) | ("ES" Icon "." Icon ("E" Icon)?) | ("G" Icon "." Icon ("E" Icon)?) | ("L" Icon) | ("A" Icon?) | ("D" Icon "." Icon) ;
AccessStmt ::= (LblDef AccessSpec ":" ":" AccessIdList EOS) | (LblDef AccessSpec AccessIdList? EOS) ;
SubscriptTriplet ::= Expr? ":" Expr? (":" Expr)? ;
MainProgram ::= ProgramStmt? MainRange ;
LabelDoStmt ::= LblDef "do" LblRef ","? LoopControl EOS ;
CallStmt ::= (LblDef "call" SubroutineNameUse EOS) | (LblDef "call" SubroutineNameUse "(" (ActualArg ("," ActualArg)*)? ")" EOS) ;
Level5Expr ::= (Level5Expr EquivOp)? EquivOperand ;
Level4Expr ::= (Level3Expr RelOp)? Level3Expr ;
Level3Expr ::= (Level3Expr ConcatOp)? Level2Expr ;
Level2Expr ::= ((Level2Expr AddOp)? AddOperand) | (Sign AddOperand) ;
IfThenStmt ::= LblDef (IfConstructName ":")? "if" "(" ScalarLogicalExpr ")" "then" EOS ;
Level1Expr ::= DefinedUnaryOp? Primary ;
ControlEditDescr ::= PositionEditDescr | (Icon? "/") | ":" | SignEditDescr | (("-" | "+")? Icon "P" (Icon? DataEditDescr)?) | BlankInterpEditDescr ;
AssignedGotoStmt ::= (LblDef GoToKw VariableName EOS) | (LblDef GoToKw VariableName ","? "(" LblRef ("," LblRef)* ")" EOS) ;
MultOperand ::= Level1Expr (PowerOp MultOperand)? ;
CExpr ::= (CExpr ConcatOp)? CPrimary ;
EquivOperand ::= (EquivOperand OrOp)? OrOperand ;
WhereConstruct ::= WhereConstructStmt AssignmentStmt* (ElsewhereStmt AssignmentStmt*)? EndWhereStmt ;
IoControlSpecList ::= (UnitIdentifier "," FormatIdentifier?) | (UnitIdentifier "," IoControlSpec) | IoControlSpec | (IoControlSpecList "," IoControlSpec) ;
ComponentDefStmt ::= (LblDef TypeSpec ("," ComponentAttrSpecList)? ":" ":" ComponentDeclList EOS) | (LblDef TypeSpec ComponentDeclList EOS) ;
UseStmt ::= (LblDef "use" Name ("," RenameList)? EOS) | (LblDef "use" Name "," "only" ":" OnlyList? EOS) ;
Only ::= GenericSpec | ((Ident "=>")? UseName) ;
Comblock ::= "/" CommonBlockName? "/" ;
FormatItem ::= (Icon? DataEditDescr) | ControlEditDescr | CharStringEditDescr | (Icon? "(" FormatItemList ")") | (FormatItem ":" FormatItem) ;
ActualArg ::= ((Name "=")? Expr) | ((Name "=")? "*" LblRef) ;
FunctionParList ::= "(" (FunctionPar ("," FunctionPar)*)? ")" ;
OrOperand ::= (OrOperand AndOp)? AndOperand ;
EndBlockDataStmt ::= (LblDef "end" "block" "data" EndName? EOS) | (LblDef "end" EOS) ;
AssumedShapeSpec ::= LowerBound? ":" ;
ElseStmt ::= LblDef "else" IfConstructName? EOS ;
ElseIfStmt ::= LblDef "else" "if" "(" ScalarLogicalExpr ")" "then" IfConstructName? EOS ;
PauseStmt ::= LblDef "pause" (Icon | Scon)? EOS ;
ExecutableProgram ::= StartCommentBlock? ProgramUnit+ ;
CaseStmt ::= LblDef "case" CaseSelector Name? EOS ;
ReturnStmt ::= LblDef "return" Expr? EOS ;
FunctionReference ::= Name "(" FunctionArgList? ")" ;
KindSelector ::= ("(" ("kind" "=")? Expr ")") | ("*" Icon) ;
EndProgramStmt ::= (LblDef "end" EOS) | (LblDef "end" "program" EndName? EOS) ;
NamelistStmt ::= LblDef "namelist" NamelistGroup (","? NamelistGroup)* EOS ;
CycleStmt ::= LblDef "cycle" EndName? EOS ;
FunctionPrefix ::= ("recursive" "function") | ("recursive" TypeSpec "function") | (TypeSpec "recursive" "function") | (TypeSpec? "function") ;
DataImpliedDo ::= "(" DataIDoObjectList "," ImpliedDoVariable "=" Expr "," Expr ("," Expr)? ")" ;
WriteStmt ::= LblDef "write" "(" IoControlSpecList ")" OutputItemList? EOS ;
ComponentDecl ::= ComponentName ("(" ComponentArraySpec ")")? ("*" CharLength)? ;
ExitStmt ::= LblDef "exit" EndName? EOS ;
FunctionRange ::= (FunctionParList EOS Body? EndFunctionStmt) | (FunctionParList "result" "(" Name ")" EOS InternalSubProgPart EndFunctionStmt) | (FunctionParList "result" "(" Name ")" EOS Body EndFunctionStmt) | (FunctionParList "result" "(" Name ")" EOS EndFunctionStmt) | (FunctionParList EOS InternalSubProgPart EndFunctionStmt) ;
PositionSpec ::= ("unit="? UnitIdentifier) | ("iostat=" ScalarVariable) | ("err=" LblRef) ;
LetterSpec ::= Letter ("-" Letter)? ;
EndIfStmt ::= LblDef "end" "if" IfConstructName? EOS ;
BlockDataStmt ::= LblDef "block" "data" BlockDataName? EOS ;
ReadStmt ::= (LblDef "read" RdCtlSpec InputItemList? EOS) | (LblDef "read" RdFmtId EOS) | (LblDef "read" RdFmtId "," InputItemList EOS) ;
EndFunctionStmt ::= (LblDef "end" EOS) | (LblDef "end" "function" EndName? EOS) ;
SubroutineParList ::= "(" (SubroutinePar ("," SubroutinePar)*)? ")" ;
IfConstruct ::= IfThenStmt ExecutionPartConstruct* (ElseIfStmt ExecutionPartConstruct*)* (ElseStmt ExecutionPartConstruct*)? EndIfStmt ;
ComputedGotoStmt ::= LblDef GoToKw "(" LblRef ("," LblRef)* ")" ","? ScalarIntExpr EOS ;
Expr ::= (Expr DefinedBinaryOp)? Level5Expr ;
AssumedSizeSpec ::= ((LowerBound ":")? "*") | (ExplicitShapeSpecList "," "*") | (ExplicitShapeSpecList "," LowerBound ":" "*") ;
AndOperand ::= NotOp? Level4Expr ;
LblDef ::= Label? ;
EndDoStmt ::= LblDef "end" "do" Name? EOS ;
StopStmt ::= LblDef "stop" (Icon | Scon)? EOS ;
SubroutineSubprogram ::= LblDef "recursive"? "subroutine" SubroutineName SubroutineRange ;
ExplicitShapeSpec ::= (LowerBound ":")? UpperBound ;
AddOperand ::= (AddOperand MultOp)? MultOperand ;
EndSubroutineStmt ::= (LblDef "end" "subroutine" EndName? EOS) | (LblDef "end" EOS) ;
SaveStmt ::= (LblDef "save" ":" ":" SavedEntityList EOS) | (LblDef "save" SavedEntityList? EOS) ;
Allocation ::= AllocateObject AllocatedShape? ;
--------------------fortran::waite-cordy.bgf--------------------
EndSelectStmt ::= (LblDef "endselect" EndName? EOS) | (LblDef "end" "select" EndName? EOS) ;
Comlist ::= (Comblock? CommonBlockObject) | (Comlist "," Comblock? CommonBlockObject) | (Comlist Comblock CommonBlockObject) ;
FormatStmt ::= LblDef "format" "(" FmtSpec? ")" EOS ;
PauseStmt ::= LblDef "pause" IconOrScon? EOS ;
StmtFunctionRange ::= "(" SFDummyArgNameList? ")" "=" Expr EOS ;
LoopControl ::= VariableName "=" Expr "," Expr CommaExpr? ;
 LoopControl ::= "while" "(" Expr ")" ;
SubroutineRange ::= SubroutineParList EOS Body? EndSubroutineStmt ;
 SubroutineRange ::= SubroutineParList EOS BodyPlusInternals EndSubroutineStmt ;
ReturnStmt ::= LblDef "return" Expr? EOS ;
PointerAssignmentStmt ::= (LblDef Name "=>" Target EOS) | (LblDef Name SFExprListRef? "%" NameDataRef "=>" Target EOS) ;
OutputImpliedDo ::= ("(" Expr "," ImpliedDoVariable "=" Expr "," Expr CommaExpr? ")") | ("(" OutputItemList1 "," ImpliedDoVariable "=" Expr "," Expr CommaExpr? ")") ;
CloseSpecList ::= UnitIdentifierComma? {CloseSpec ","}* ;
EndProgramStmt ::= LblDef "end" EOS ;
 EndProgramStmt ::= (LblDef "endprogram" EndName? EOS) | (LblDef "end" "program" EndName? EOS) ;
EndModuleStmt ::= (LblDef "endmodule" EndName? EOS) | (LblDef "end" "module" EndName? EOS) | (LblDef "end" EOS) ;
CycleStmt ::= LblDef "cycle" EndName? EOS ;
AccessStmt ::= (LblDef AccessSpec ColonColon? AccessIdList EOS) | (LblDef AccessSpec EOS) ;
InquireSpecList ::= UnitIdentifier? {InquireSpec ","}* ;
MainProgram ::= ProgramStmt? MainRange ;
OptionalStmt ::= LblDef "optional" ColonColon? OptionalParList EOS ;
Datalist ::= DataStmtSet | (Datalist? ","? DataStmtSet) ;
TypeDeclarationStmt ::= LblDef TypeSpec EntityDeclList EOS ;
 TypeDeclarationStmt ::= LblDef TypeSpec AttrSpecSeq? "::" EntityDeclList EOS ;
WriteStmt ::= LblDef "write" "(" IoControlSpecList ")" OutputItemList? EOS ;
ExitStmt ::= LblDef "exit" EndName? EOS ;
SFExprList ::= (Expr ":"? Expr?) | (":" Expr?) ;
 SFExprList ::= (Expr? ":" Expr ":" Expr) | (Expr? "::" Expr) ;
FunctionRange ::= FunctionParList EOS Body? EndFunctionStmt ;
 FunctionRange ::= (FunctionParList "result" "(" Name ")" EOS BodyPlusInternals EndFunctionStmt) | (FunctionParList "result" "(" Name ")" EOS Body EndFunctionStmt) | (FunctionParList "result" "(" Name ")" EOS EndFunctionStmt) | (FunctionParList EOS BodyPlusInternals EndFunctionStmt) ;
IntentStmt ::= LblDef "intent" "(" IntentSpec ")" ColonColon? IntentParList EOS ;
CommaLoopControl ::= ","? LoopControl ;
MainRange ::= Body? EndProgramStmt ;
 MainRange ::= BodyPlusInternals EndProgramStmt ;
Level2Expr ::= Sign? AddOperand AddOpAddOperand* ;
ConnectSpecList ::= UnitIdentifierComma? {ConnectSpec ","}* ;
PositionSpecList ::= UnitIdentifierComma? PositionSpec+ ;
BlockDoConstruct ::= LblDef NameColon? "do" CommaLoopControl? EOS IN_2 ExecutionPartConstruct* EX_2 EndDoStmt ;
BlockDataStmt ::= LblDef "blockdata" BlockDataName? EOS ;
 BlockDataStmt ::= LblDef "block" "data" BlockDataName? EOS ;
ReadStmt ::= (LblDef "read" RdCtlSpec InputItemList? EOS) | (LblDef "read" RdFmtId CommaInputItemList? EOS) ;
PointerField ::= (Name SFExprListRef? "%" Name) | (PointerField FieldSelector) ;
FunctionInterfaceRange ::= FunctionParList EOS SubprogramInterfaceBody? EndFunctionStmt ;
Variable ::= VariableName SubscriptListRef? SubstringRange? ;
SubscriptTripletTail ::= ":" Expr? ;
 SubscriptTripletTail ::= (":" Expr ":" Expr) | ("::" Expr) ;
EndFunctionStmt ::= LblDef "end" EOS ;
 EndFunctionStmt ::= (LblDef "endfunction" EndName? EOS) | (LblDef "end" "function" EndName? EOS) ;
IfConstruct ::= IfThenStmt ConditionalBody ElseIfConstruct* ElseConstruct? EndIfStmt ;
TargetStmt ::= LblDef "target" ColonColon? TargetObjectList EOS ;
MultOperand ::= Level1Expr PowerUpMultOperand? ;
ComputedGotoStmt ::= LblDef GoToKw "(" LblRefList ")" ","? Expr EOS ;
AssignmentStmt ::= LblDef Name SFExprListRef? SubstringRange? "=" Expr EOS ;
 AssignmentStmt ::= (LblDef Name SFExprListRef? "%" NameDataRef "=" Expr EOS) | (LblDef Name "(" SFDummyArgNameList ")" "%" NameDataRef "=" Expr EOS) ;
AndOperand ::= NotOp? Level4Expr ;
EndDoStmt ::= (LblDef "enddo" EndName? EOS) | (LblDef "end" "do" EndName? EOS) ;
ComplexComponent ::= (Sign? Icon) | RDcon | Name ;
SubstringRange ::= "(" Expr? SubscriptTripletTail ")" ;
AllocatableStmt ::= LblDef "allocatable" ColonColon? ArrayAllocationList EOS ;
StopStmt ::= LblDef "stop" IconOrScon? EOS ;
InputImpliedDo ::= "(" InputItemList "," ImpliedDoVariable "=" Expr "," Expr CommaExpr? ")" ;
SubroutineInterfaceRange ::= SubroutineParList EOS SubprogramInterfaceBody? EndSubroutineStmt ;
EndSubroutineStmt ::= LblDef "end" EOS ;
 EndSubroutineStmt ::= (LblDef "endsubroutine" EndName? EOS) | (LblDef "end" "subroutine" EndName? EOS) ;
SectionSubscript ::= (Expr SubscriptTripletTail?) | SubscriptTripletTail ;
PointerStmt ::= LblDef "pointer" ColonColon? PointerStmtObjectList EOS ;
Constant ::= NamedConstantUse | (PlusMinus? UnsignedArithmeticConstant) | Scon | Hcon | LogicalConstant ;
 Constant ::= (Icon "_" Scon) | (NamedConstantUse "_" Scon) ;
 Constant ::= StructureConstructor | BozLiteralConstant ;
EndBlockDataStmt ::= LblDef "end" EOS ;
 EndBlockDataStmt ::= (LblDef "endblockdata" EndName? EOS) | (LblDef "end" "blockdata" EndName? EOS) | (LblDef "endblock" "data" EndName? EOS) | (LblDef "end" "block" "data" EndName? EOS) ;
--------------------java::java-1-jls-impl.bgf--------------------
ReturnStatement ::= "return" Expression? ";" ;
ConstructorBody ::= "{" ExplicitConstructorInvocation? BlockStatements? "}" ;
InterfaceBody ::= "{" InterfaceMemberDeclarations? "}" ;
ClassBody ::= "{" ClassBodyDeclarations? "}" ;
SwitchBlock ::= "{" SwitchBlockStatementGroups? SwitchLabels? "}" ;
CastExpression ::= "(" PrimitiveType Dims? ")" UnaryExpression ;
 CastExpression ::= "(" Expression ")" UnaryExpressionNotPlusMinus ;
 CastExpression ::= "(" Name Dims ")" UnaryExpressionNotPlusMinus ;
ExplicitConstructorInvocation ::= "this" "(" ArgumentList? ")" ";" ;
 ExplicitConstructorInvocation ::= "super" "(" ArgumentList? ")" ";" ;
TryStatement ::= "try" Block Catches ;
 TryStatement ::= "try" Block Catches? Finally ;
ForStatementNoShortIf ::= "for" "(" ForInit? ";" Expression? ";" ForUpdate? ")" StatementNoShortIf ;
MethodDeclarator ::= Identifier "(" FormalParameterList? ")" ;
 MethodDeclarator ::= MethodDeclarator "[" "]" ;
MethodInvocation ::= Name "(" ArgumentList? ")" ;
 MethodInvocation ::= Primary "." Identifier "(" ArgumentList? ")" ;
 MethodInvocation ::= "super" "." Identifier "(" ArgumentList? ")" ;
ArrayCreationExpression ::= "new" PrimitiveType DimExprs Dims? ;
 ArrayCreationExpression ::= "new" ClassOrInterfaceType DimExprs Dims? ;
BreakStatement ::= "break" Identifier? ";" ;
MethodHeader ::= Modifiers? Type MethodDeclarator Throws? ;
 MethodHeader ::= Modifiers? "void" MethodDeclarator Throws? ;
Block ::= "{" BlockStatements? "}" ;
ConstructorDeclarator ::= SimpleName "(" FormalParameterList? ")" ;
ArrayInitializer ::= "{" VariableInitializers? ","? "}" ;
ContinueStatement ::= "continue" Identifier? ";" ;
CompilationUnit ::= PackageDeclaration? ImportDeclarations? TypeDeclarations? ;
ForStatement ::= "for" "(" ForInit? ";" Expression? ";" ForUpdate? ")" Statement ;
ClassInstanceCreationExpression ::= "new" ClassType "(" ArgumentList? ")" ;
ClassDeclaration ::= Modifiers? "class" Identifier Super? Interfaces? ClassBody ;
InterfaceDeclaration ::= Modifiers? "interface" Identifier ExtendsInterfaces? InterfaceBody ;
FieldDeclaration ::= Modifiers? Type VariableDeclarators ";" ;
ConstructorDeclaration ::= Modifiers? ConstructorDeclarator Throws? ConstructorBody ;
--------------------java::java-1-jls-read.bgf--------------------
ReturnStatement ::= "return" Expression? ";" ;
ConstructorBody ::= "{" ExplicitConstructorInvocation? BlockStatements? "}" ;
InterfaceBody ::= "{" InterfaceMemberDeclarations? "}" ;
ClassBody ::= "{" ClassBodyDeclarations? "}" ;
SwitchBlock ::= "{" SwitchBlockStatementGroups? SwitchLabels? "}" ;
CastExpression ::= "(" PrimitiveType Dims? ")" UnaryExpression ;
 CastExpression ::= "(" ReferenceType ")" UnaryExpressionNotPlusMinus ;
AbstractMethodDeclaration ::= AbstractMethodModifiers? ResultType MethodDeclarator Throws? ";" ;
ConstantDeclaration ::= ConstantModifiers? Type VariableDeclarator ;
ExplicitConstructorInvocation ::= "this" "(" ArgumentList? ")" ";" ;
 ExplicitConstructorInvocation ::= "super" "(" ArgumentList? ")" ";" ;
TryStatement ::= "try" Block Catches ;
 TryStatement ::= "try" Block Catches? Finally ;
ForStatementNoShortIf ::= "for" "(" ForInit? ";" Expression? ";" ForUpdate? ")" StatementNoShortIf ;
MethodDeclarator ::= Identifier "(" FormalParameterList? ")" ;
 MethodDeclarator ::= MethodDeclarator "[" "]" ;
MethodInvocation ::= MethodName "(" ArgumentList? ")" ;
 MethodInvocation ::= Primary "." Identifier "(" ArgumentList? ")" ;
 MethodInvocation ::= "super" "." Identifier "(" ArgumentList? ")" ;
ArrayCreationExpression ::= "new" PrimitiveType DimExprs Dims? ;
 ArrayCreationExpression ::= "new" TypeName DimExprs Dims? ;
BreakStatement ::= "break" Identifier? ";" ;
MethodHeader ::= MethodModifiers? ResultType MethodDeclarator Throws? ;
Block ::= "{" BlockStatements? "}" ;
ConstructorDeclarator ::= Identifier "(" FormalParameterList? ")" ;
ArrayInitializer ::= "{" VariableInitializers? ","? "}" ;
ContinueStatement ::= "continue" Identifier? ";" ;
CompilationUnit ::= PackageDeclaration? ImportDeclarations? TypeDeclarations? ;
ForStatement ::= "for" "(" ForInit? ";" Expression? ";" ForUpdate? ")" Statement ;
ClassInstanceCreationExpression ::= "new" ClassType "(" ArgumentList? ")" ;
ClassDeclaration ::= ClassModifiers? "class" Identifier Super? Interfaces? ClassBody ;
InterfaceDeclaration ::= InterfaceModifiers? "interface" Identifier ExtendsInterfaces? InterfaceBody ;
FieldDeclaration ::= FieldModifiers? Type VariableDeclarators ";" ;
ConstructorDeclaration ::= ConstructorModifiers? ConstructorDeclarator Throws? ConstructorBody ;
--------------------java::java-2-jls-impl.bgf--------------------
ConstructorDeclaratorRest ::= FormalParameters ("throws" QualifiedIdentifierList)? MethodBody ;
InterfaceMethodDeclaratorRest ::= FormalParameters BracketsOpt ("throws" QualifiedIdentifierList)? ";" ;
Selector ::= "." Identifier Arguments? ;
 Selector ::= "." "this" ;
 Selector ::= "." "super" SuperSuffix ;
 Selector ::= "." "new" InnerCreator ;
 Selector ::= "[" Expression "]" ;
LocalVariableDeclarationStatement ::= "final"? Type VariableDeclarators ";" ;
Expression2 ::= Expression3 Expression2Rest? ;
FormalParameter ::= "final"? Type VariableDeclaratorId ;
FormalParameters ::= "(" (FormalParameter ("," FormalParameter)*)? ")" ;
ForInit ::= StatementExpression MoreStatementExpressions ;
 ForInit ::= "final"? Type VariableDeclarators ;
Expression1 ::= Expression2 Expression1Rest? ;
Expression ::= Expression1 (AssignmentOperator Expression1)? ;
Arguments ::= "(" (Expression ("," Expression)*)? ")" ;
ImportDeclaration ::= "import" Identifier ("." Identifier)* ("." "*")? ";" ;
Statement ::= Block ;
 Statement ::= "if" ParExpression Statement ("else" Statement)? ;
 Statement ::= "for" "(" ForInit? ";" Expression? ";" ForUpdate? ")" Statement ;
 Statement ::= "while" ParExpression Statement ;
 Statement ::= "do" Statement "while" ParExpression ";" ;
 Statement ::= "try" Block Catches | (Catches? "finally" Block) ;
 Statement ::= "switch" ParExpression "{" SwitchBlockStatementGroups "}" ;
 Statement ::= "synchronized" ParExpression Block ;
 Statement ::= "return" Expression? ";" ;
 Statement ::= "throw" Expression ";" ;
 Statement ::= "break" Identifier? ";" ;
 Statement ::= "continue" Identifier? ";" ;
 Statement ::= ";" ;
 Statement ::= ExpressionStatement ;
 Statement ::= Identifier ":" Statement ;
Expression1Rest ::= ("?" Expression ":" Expression1)? ;
SuperSuffix ::= Arguments ;
 SuperSuffix ::= "." Identifier Arguments? ;
VoidInterfaceMethodDeclaratorRest ::= FormalParameters BracketsOpt ("throws" QualifiedIdentifierList)? ";" ;
ArrayInitializer ::= "{" (VariableInitializer ("," VariableInitializer)* ","?)? "}" ;
ClassCreatorRest ::= Arguments ClassBody? ;
CompilationUnit ::= ("package" QualifiedIdentifier ";")? ImportDeclaration* TypeDeclaration* ;
MethodDeclaratorRest ::= FormalParameters BracketsOpt ("throws" QualifiedIdentifierList)? MethodBody | ";" ;
ClassDeclaration ::= "class" Identifier ("extends" Type)? ("implements" TypeList)? ClassBody ;
Primary ::= "(" Expression ")" ;
 Primary ::= "this" Arguments? ;
 Primary ::= "super" SuperSuffix ;
 Primary ::= Literal ;
 Primary ::= "new" Creator ;
 Primary ::= Identifier ("." Identifier)* IdentifierSuffix? ;
 Primary ::= BasicType BracketsOpt "." "class" ;
 Primary ::= "void" "." "class" ;
BlockStatement ::= LocalVariableDeclarationStatement ;
 BlockStatement ::= ClassOrInterfaceDeclaration ;
 BlockStatement ::= (Identifier ":")? Statement ;
VariableDeclaratorRest ::= BracketsOpt ("=" VariableInitializer)? ;
InterfaceDeclaration ::= "interface" Identifier ("extends" TypeList)? InterfaceBody ;
ClassBodyDeclaration ::= ";" ;
 ClassBodyDeclaration ::= "static"? Block ;
 ClassBodyDeclaration ::= ModifiersOpt MemberDecl ;
--------------------java::java-2-jls-read.bgf--------------------
ReturnStatement ::= "return" Expression? ";" ;
ConstructorBody ::= "{" ExplicitConstructorInvocation? BlockStatements? "}" ;
InterfaceBody ::= "{" InterfaceMemberDeclarations? "}" ;
ClassBody ::= "{" ClassBodyDeclarations? "}" ;
FormalParameter ::= "final"? Type VariableDeclaratorId ;
SwitchBlock ::= "{" SwitchBlockStatementGroups? SwitchLabels? "}" ;
CastExpression ::= "(" PrimitiveType Dims? ")" UnaryExpression ;
 CastExpression ::= "(" ReferenceType ")" UnaryExpressionNotPlusMinus ;
AbstractMethodDeclaration ::= AbstractMethodModifiers? ResultType MethodDeclarator Throws? ";" ;
ExplicitConstructorInvocation ::= "this" "(" ArgumentList? ")" ";" ;
 ExplicitConstructorInvocation ::= "super" "(" ArgumentList? ")" ";" ;
 ExplicitConstructorInvocation ::= Primary "." "super" "(" ArgumentList? ")" ";" ;
ConstantDeclaration ::= ConstantModifiers? Type VariableDeclarators ;
TryStatement ::= "try" Block Catches ;
 TryStatement ::= "try" Block Catches? Finally ;
LocalVariableDeclaration ::= "final"? Type VariableDeclarators ;
ForStatementNoShortIf ::= "for" "(" ForInit? ";" Expression? ";" ForUpdate? ")" StatementNoShortIf ;
MethodDeclarator ::= Identifier "(" FormalParameterList? ")" ;
 MethodDeclarator ::= MethodDeclarator "[" "]" ;
MethodInvocation ::= MethodName "(" ArgumentList? ")" ;
 MethodInvocation ::= Primary "." Identifier "(" ArgumentList? ")" ;
 MethodInvocation ::= "super" "." Identifier "(" ArgumentList? ")" ;
 MethodInvocation ::= ClassName "." "super" "." Identifier "(" ArgumentList? ")" ;
BreakStatement ::= "break" Identifier? ";" ;
ArrayCreationExpression ::= "new" PrimitiveType DimExprs Dims? ;
 ArrayCreationExpression ::= "new" TypeName DimExprs Dims? ;
 ArrayCreationExpression ::= "new" PrimitiveType Dims ArrayInitializer ;
 ArrayCreationExpression ::= "new" TypeName Dims ArrayInitializer ;
MethodHeader ::= MethodModifiers? ResultType MethodDeclarator Throws? ;
Block ::= "{" BlockStatements? "}" ;
ConstructorDeclarator ::= Identifier "(" FormalParameterList? ")" ;
ArrayInitializer ::= "{" VariableInitializers? ","? "}" ;
ContinueStatement ::= "continue" Identifier? ";" ;
CompilationUnit ::= PackageDeclaration? ImportDeclarations? TypeDeclarations? ;
ForStatement ::= "for" "(" ForInit? ";" Expression? ";" ForUpdate? ")" Statement ;
ClassInstanceCreationExpression ::= "new" ClassOrInterfaceType "(" ArgumentList? ")" ClassBody? ;
 ClassInstanceCreationExpression ::= Primary "." "new" Identifier "(" ArgumentList? ")" ClassBody? ;
ClassDeclaration ::= ClassModifiers? "class" Identifier Super? Interfaces? ClassBody ;
InterfaceDeclaration ::= InterfaceModifiers? "interface" Identifier ExtendsInterfaces? InterfaceBody ;
ConstructorDeclaration ::= ConstructorModifiers? ConstructorDeclarator Throws? ConstructorBody ;
FieldDeclaration ::= FieldModifiers? Type VariableDeclarators ";" ;
--------------------java::java-5-habelitz.bgf--------------------
annotationScopeDeclarations ::= (modifierList type (IDENT LPAREN RPAREN annotationDefaultValue? SEMI) | (classFieldDeclaratorList SEMI)) | typeDeclaration ;
conditionalExpression ::= logicalOrExpression (QUESTION assignmentExpression COLON conditionalExpression)? ;
OCTAL_LITERAL ::= "0" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7")+ INTEGER_TYPE_SUFFIX? ;
primaryExpression ::= parenthesizedExpression | literal | newExpression | qualifiedIdentExpression | (genericTypeArgumentListSimplified (SUPER arguments | (DOT IDENT arguments)) | (IDENT arguments) | (THIS arguments)) | (THIS arguments?) | (SUPER arguments) | (SUPER DOT IDENT arguments | Îµ) | (primitiveType arrayDeclarator* DOT CLASS) | (VOID DOT CLASS) ;
genericTypeParameter ::= IDENT bound? ;
formalParameterList ::= LPAREN (formalParameterStandardDecl (COMMA formalParameterStandardDecl)* (COMMA formalParameterVarArgDecl)?) | formalParameterVarArgDecl | Îµ RPAREN ;
interfaceScopeDeclarations ::= (modifierList (genericTypeParameterList? (type IDENT formalParameterList arrayDeclaratorList? throwsClause? SEMI) | (VOID IDENT formalParameterList throwsClause? SEMI)) | (type interfaceFieldDeclaratorList SEMI)) | typeDeclaration | SEMI ;
classFieldDeclarator ::= variableDeclaratorId (ASSIGN variableInitializer)? ;
statement ::= block | (ASSERT expr1::expression (COLON expr2::expression SEMI) | SEMI) | (IF parenthesizedExpression ifStat::statement (ELSE elseStat::statement) | Îµ) | (FOR LPAREN (forInit SEMI forCondition SEMI forUpdater RPAREN statement) | (localModifierList type IDENT COLON expression RPAREN statement)) | (WHILE parenthesizedExpression statement) | (DO statement WHILE parenthesizedExpression SEMI) | (TRY block (catches finallyClause?) | finallyClause) | (SWITCH parenthesizedExpression LCURLY switchBlockLabels RCURLY) | (SYNCHRONIZED parenthesizedExpression block) | (RETURN expression? SEMI) | (THROW expression SEMI) | (BREAK IDENT? SEMI) | (CONTINUE IDENT? SEMI) | (IDENT COLON statement) | (expression SEMI) | SEMI ;
EXPONENT ::= "e" | "E" ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
annotation ::= AT qualifiedIdentifier annotationInit? ;
qualifiedIdentExpression ::= qualifiedIdentifier ((arrayDeclarator+ DOT CLASS) | arguments | (outerDot::DOT CLASS | (genericTypeArgumentListSimplified (Super::SUPER arguments) | (SUPER innerDot::DOT IDENT arguments) | (IDENT arguments)) | THIS | (Super::SUPER arguments) | innerNewExpression))? ;
enumScopeDeclarations ::= enumConstants COMMA? enumClassScopeDeclarations? ;
interfaceTypeDeclaration ::= INTERFACE IDENT genericTypeParameterList? interfaceExtendsClause? interfaceBody ;
compilationUnit ::= annotationList packageDeclaration? importDeclaration* typeDecls* ;
innerNewExpression ::= NEW genericTypeArgumentListSimplified? IDENT arguments classBody? ;
enumTypeDeclaration ::= ENUM IDENT implementsClause? enumBody ;
objectType ::= qualifiedTypeIdent arrayDeclaratorList? ;
switchBlockLabels ::= switchCaseLabels switchDefaultLabel? switchCaseLabels ;
newExpression ::= NEW (primitiveType newArrayConstruction) | (genericTypeArgumentListSimplified? qualifiedTypeIdentSimplified newArrayConstruction | (arguments classBody?)) ;
arguments ::= LPAREN expressionList? RPAREN ;
typeIdent ::= IDENT genericTypeArgumentList? ;
importDeclaration ::= IMPORT STATIC? qualifiedIdentifier DOTSTAR? SEMI ;
classScopeDeclarations ::= block | (STATIC block) | (modifierList (genericTypeParameterList? (type IDENT formalParameterList arrayDeclaratorList? throwsClause? block | SEMI) | (VOID IDENT formalParameterList throwsClause? block | SEMI) | (ident::IDENT formalParameterList throwsClause? block)) | (type classFieldDeclaratorList SEMI)) | typeDeclaration | SEMI ;
forCondition ::= expression? ;
typeIdentSimplified ::= IDENT genericTypeArgumentListSimplified? ;
genericTypeArgument ::= type | (QUESTION genericWildcardBoundType?) ;
annotationElementValueArrayInitializer ::= LCURLY (annotationElementValue (COMMA annotationElementValue)*)? COMMA? RCURLY ;
simpleType ::= primitiveType arrayDeclaratorList? ;
postfixedExpression ::= primaryExpression ((outerDot::DOT (genericTypeArgumentListSimplified? IDENT arguments?) | THIS | (Super::SUPER arguments) | (SUPER innerDot::DOT IDENT arguments?) | innerNewExpression) | (LBRACK expression RBRACK))* (INC | DEC)? ;
HEX_LITERAL ::= "0" "x" | "X" HEX_DIGIT+ INTEGER_TYPE_SUFFIX? ;
newArrayConstruction ::= (arrayDeclaratorList arrayInitializer) | (LBRACK expression RBRACK (LBRACK expression RBRACK)* arrayDeclaratorList?) ;
arrayInitializer ::= LCURLY (variableInitializer (COMMA variableInitializer)* COMMA?)? RCURLY ;
classTypeDeclaration ::= CLASS IDENT genericTypeParameterList? classExtendsClause? implementsClause? classBody ;
variableDeclaratorId ::= IDENT arrayDeclaratorList? ;
FLOATING_POINT_LITERAL ::= (("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ (DOT ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* EXPONENT? FLOAT_TYPE_SUFFIX?) | (EXPONENT FLOAT_TYPE_SUFFIX?) | FLOAT_TYPE_SUFFIX) | (DOT ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ EXPONENT? FLOAT_TYPE_SUFFIX?) ;
enumConstant ::= annotationList IDENT arguments? classBody? ;
assignmentExpression ::= conditionalExpression (ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | STAR_ASSIGN | DIV_ASSIGN | AND_ASSIGN | OR_ASSIGN | XOR_ASSIGN | MOD_ASSIGN | SHIFT_LEFT_ASSIGN | SHIFT_RIGHT_ASSIGN | BIT_SHIFT_RIGHT_ASSIGN assignmentExpression)? ;
instanceOfExpression ::= relationalExpression (INSTANCEOF type)? ;
DECIMAL_LITERAL ::= "0" | ("1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")*) INTEGER_TYPE_SUFFIX? ;
forUpdater ::= expressionList? ;
--------------------java::java-5-jls-impl.bgf--------------------
ForVarControl ::= "final"? Annotations? Type Identifier ForVarControlRest ;
Selector ::= "." Identifier Arguments? ;
 Selector ::= "." ExplicitGenericInvocation ;
 Selector ::= "." "this" ;
 Selector ::= "." "super" SuperSuffix ;
 Selector ::= "." "new" NonWildcardTypeArguments? InnerCreator ;
 Selector ::= Expression? ;
Expression2 ::= Expression3 Expression2Rest? ;
VoidMethodDeclaratorRest ::= FormalParameters ("throws" QualifiedIdentifierList)? MethodBody | ";" ;
IdentifierSuffix ::= "[" ("]" ("[" "]")* "." "class") | (Expression "]") ;
 IdentifierSuffix ::= Arguments ;
 IdentifierSuffix ::= "." "class" | ExplicitGenericInvocation | "this" | ("super" Arguments) | ("new" NonWildcardTypeArguments? InnerCreator) ;
Expression1 ::= Expression2 Expression1Rest? ;
Expression ::= Expression1 (AssignmentOperator Expression1)? ;
TypeArgument ::= Type ;
 TypeArgument ::= "?" ("extends" | "super" Type)? ;
Arguments ::= "(" (Expression ("," Expression)*)? ")" ;
ImportDeclaration ::= "import" "static"? Identifier ("." Identifier)* ("." "*")? ";" ;
ForControl ::= ForVarControl ;
 ForControl ::= ForInit ";" Expression? ";" ForUpdate? ;
ForVarControlRest ::= VariableDeclaratorsRest ";" Expression? ";" ForUpdate? ;
 ForVarControlRest ::= ":" Expression ;
CreatedName ::= Identifier NonWildcardTypeArguments? ("." Identifier NonWildcardTypeArguments?)* ;
TypeParameter ::= Identifier ("extends" Bound)? ;
AnnotationTypeBody ::= "{" AnnotationTypeElementDeclarations? "}" ;
VoidInterfaceMethodDeclaratorRest ::= FormalParameters ("throws" QualifiedIdentifierList)? ";" ;
ArrayInitializer ::= "{" (VariableInitializer ("," VariableInitializer)* ","?)? "}" ;
NormalInterfaceDeclaration ::= "interface" Identifier TypeParameters? ("extends" TypeList)? InterfaceBody ;
ClassCreatorRest ::= Arguments ClassBody? ;
EnumConstant ::= Annotations Identifier Arguments? ClassBody? ;
EnumBody ::= (EnumConstants? ","? EnumBodyDeclarations?)* ;
Primary ::= ParExpression ;
 Primary ::= NonWildcardTypeArguments ExplicitGenericInvocationSuffix | ("this" Arguments) ;
 Primary ::= "this" Arguments? ;
 Primary ::= "super" SuperSuffix ;
 Primary ::= Literal ;
 Primary ::= "new" Creator ;
 Primary ::= Identifier ("." Identifier)* IdentifierSuffix? ;
 Primary ::= BasicType ("[" "]")* "." "class" ;
 Primary ::= "void" "." "class" ;
VariableDeclaratorRest ::= ("[" "]")* ("=" VariableInitializer)? ;
InterfaceMethodDeclaratorRest ::= FormalParameters ("[" "]")* ("throws" QualifiedIdentifierList)? ";" ;
ConstructorDeclaratorRest ::= FormalParameters ("throws" QualifiedIdentifierList)? MethodBody ;
ElementValueArrayInitializer ::= "{" ElementValues? ","? "}" ;
ElementValues ::= ElementValue ("," ElementValues)? ;
LocalVariableDeclarationStatement ::= "final"? Type VariableDeclarators ";" ;
FormalParameter ::= "final"? Type VariableDeclaratorId ;
Type ::= Identifier TypeArguments? ("." Identifier TypeArguments?)* ("[" "]")* ;
 Type ::= BasicType ;
EnumDeclaration ::= "enum" Identifier ("implements" TypeList)? EnumBody ;
FormalParameters ::= "(" FormalParameterDecls? ")" ;
Annotation ::= "@" QualifiedIdentifier ("(" (Identifier "=")? ElementValue ")")? ;
FormalParameterDecls ::= ("final" Annotations? Type FormalParameterDeclsRest)? ;
Statement ::= Block ;
 Statement ::= "assert" Expression (":" Expression)? ";" ;
 Statement ::= "if" ParExpression Statement ("else" Statement)? ;
 Statement ::= "for" "(" ForControl ")" Statement ;
 Statement ::= "while" ParExpression Statement ;
 Statement ::= "do" Statement "while" ParExpression ";" ;
 Statement ::= "try" Block Catches | (Catches? "finally" Block) ;
 Statement ::= "switch" ParExpression "{" SwitchBlockStatementGroups "}" ;
 Statement ::= "synchronized" ParExpression Block ;
 Statement ::= "return" Expression? ";" ;
 Statement ::= "throw" Expression ";" ;
 Statement ::= "break" Identifier? ";" ;
 Statement ::= "continue" Identifier? ";" ;
 Statement ::= ";" ;
 Statement ::= StatementExpression ";" ;
 Statement ::= Identifier ":" Statement ;
SuperSuffix ::= Arguments ;
 SuperSuffix ::= "." Identifier Arguments? ;
Creator ::= NonWildcardTypeArguments? CreatedName ArrayCreatorRest | ClassCreatorRest ;
NormalClassDeclaration ::= "class" Identifier TypeParameters? ("extends" Type)? ("implements" TypeList)? ClassBody ;
CompilationUnit ::= (Annotations? "package" QualifiedIdentifier ";")? ImportDeclaration* TypeDeclaration* ;
MethodDeclaratorRest ::= FormalParameters ("[" "]")* ("throws" QualifiedIdentifierList)? MethodBody | ";" ;
AnnotationMethodRest ::= "(" ")" ("[" "]")* DefaultValue? ;
Annotations ::= Annotation Annotations? ;
FormalParameterDeclsRest ::= VariableDeclaratorId ("," FormalParameterDecls)? ;
 FormalParameterDeclsRest ::= "..." VariableDeclaratorId ;
BlockStatement ::= LocalVariableDeclarationStatement ;
 BlockStatement ::= ClassOrInterfaceDeclaration ;
 BlockStatement ::= (Identifier ":")? Statement ;
ClassBodyDeclaration ::= ";" ;
 ClassBodyDeclaration ::= "static"? Block ;
 ClassBodyDeclaration ::= Modifier* MemberDecl ;
--------------------java::java-5-jls-read.bgf--------------------
ReturnStatement ::= "return" Expression? ";" ;
EnumBodyDeclarations ::= ";" ClassBodyDeclarations? ;
Wildcard ::= "?" WildcardBounds? ;
AbstractMethodDeclaration ::= AbstractMethodModifiers? TypeParameters? ResultType MethodDeclarator Throws? ";" ;
Arguments ::= "(" ArgumentList? ")" ;
ExplicitConstructorInvocation ::= NonWildTypeArguments? "this" "(" ArgumentList? ")" ";" ;
 ExplicitConstructorInvocation ::= NonWildTypeArguments? "super" "(" ArgumentList? ")" ";" ;
 ExplicitConstructorInvocation ::= Primary "." NonWildTypeArguments? "super" "(" ArgumentList? ")" ";" ;
PackageDeclaration ::= Annotations? "package" PackageName ";" ;
InterfaceType ::= TypeDeclSpecifier TypeArguments? ;
ClassType ::= TypeDeclSpecifier TypeArguments? ;
MethodInvocation ::= MethodName "(" ArgumentList? ")" ;
 MethodInvocation ::= Primary "." NonWildTypeArguments? Identifier "(" ArgumentList? ")" ;
 MethodInvocation ::= "super" "." NonWildTypeArguments? Identifier "(" ArgumentList? ")" ;
 MethodInvocation ::= ClassName "." "super" "." NonWildTypeArguments? Identifier "(" ArgumentList? ")" ;
 MethodInvocation ::= TypeName "." NonWildTypeArguments Identifier "(" ArgumentList? ")" ;
ArrayCreationExpression ::= "new" PrimitiveType DimExprs Dims? ;
 ArrayCreationExpression ::= "new" ClassOrInterfaceType DimExprs Dims? ;
 ArrayCreationExpression ::= "new" PrimitiveType Dims ArrayInitializer ;
 ArrayCreationExpression ::= "new" ClassOrInterfaceType Dims ArrayInitializer ;
TypeParameter ::= TypeVariable TypeBound? ;
MethodHeader ::= MethodModifiers? TypeParameters? ResultType MethodDeclarator Throws? ;
Block ::= "{" BlockStatements? "}" ;
AnnotationTypeBody ::= "{" AnnotationTypeElementDeclarations? "}" ;
ConstructorDeclarator ::= TypeParameters? Identifier "(" FormalParameterList? ")" ;
ArrayInitializer ::= "{" VariableInitializers? ","? "}" ;
NormalInterfaceDeclaration ::= InterfaceModifiers? "interface" Identifier ExtendsInterfaces? InterfaceBody ;
ContinueStatement ::= "continue" Identifier? ";" ;
AnnotationTypeElementDeclaration ::= AbstractMethodModifiers? Type Identifier "(" ")" Dims? DefaultValue? ";" ;
 AnnotationTypeElementDeclaration ::= ConstantDeclaration ;
 AnnotationTypeElementDeclaration ::= ClassDeclaration ;
 AnnotationTypeElementDeclaration ::= InterfaceDeclaration ;
 AnnotationTypeElementDeclaration ::= EnumDeclaration ;
 AnnotationTypeElementDeclaration ::= AnnotationTypeDeclaration ;
 AnnotationTypeElementDeclaration ::= ";" ;
EnumConstant ::= Annotations Identifier Arguments? ClassBody? ;
LastFormalParameter ::= VariableModifiers? Type "..."? VariableDeclaratorId ;
 LastFormalParameter ::= FormalParameter ;
EnumBody ::= (EnumConstants? ","? EnumBodyDeclarations?)* ;
ElementValueArrayInitializer ::= "{" ElementValues? ","? "}" ;
EnhancedForStatement ::= "for" "(" VariableModifiers? Type Identifier ":" Expression ")" Statement ;
ConstructorBody ::= "{" ExplicitConstructorInvocation? BlockStatements? "}" ;
InterfaceBody ::= "{" InterfaceMemberDeclarations? "}" ;
ClassBody ::= "{" ClassBodyDeclarations? "}" ;
FormalParameter ::= VariableModifiers? Type VariableDeclaratorId ;
EnumDeclaration ::= ClassModifiers? "enum" Identifier Interfaces? EnumBody ;
SwitchBlock ::= "{" SwitchBlockStatementGroups? SwitchLabels? "}" ;
CastExpression ::= "(" PrimitiveType Dims? ")" UnaryExpression ;
 CastExpression ::= "(" ReferenceType ")" UnaryExpressionNotPlusMinus ;
NormalAnnotation ::= "@" TypeName "(" ElementValuePairs? ")" ;
ConstantDeclaration ::= ConstantModifiers? Type VariableDeclarators ";" ;
BasicForStatement ::= "for" "(" ForInit? ";" Expression? ";" ForUpdate? ")" Statement ;
TryStatement ::= "try" Block Catches ;
 TryStatement ::= "try" Block Catches? Finally ;
LocalVariableDeclaration ::= VariableModifiers? Type VariableDeclarators ;
ForStatementNoShortIf ::= "for" "(" ForInit? ";" Expression? ";" ForUpdate? ")" StatementNoShortIf ;
MethodDeclarator ::= Identifier "(" FormalParameterList? ")" ;
 MethodDeclarator ::= MethodDeclarator "[" "]" ;
AnnotationTypeDeclaration ::= InterfaceModifiers? "@" "interface" Identifier AnnotationTypeBody ;
BreakStatement ::= "break" Identifier? ";" ;
NormalClassDeclaration ::= ClassModifiers? "class" Identifier TypeParameters? Super? Interfaces? ClassBody ;
CompilationUnit ::= PackageDeclaration? ImportDeclarations? TypeDeclarations? ;
TypeBound ::= "extends" ClassOrInterfaceType AdditionalBoundList? ;
ClassInstanceCreationExpression ::= "new" TypeArguments? ClassOrInterfaceType "(" ArgumentList? ")" ClassBody? ;
 ClassInstanceCreationExpression ::= Primary "." "new" TypeArguments? Identifier TypeArguments? "(" ArgumentList? ")" ClassBody? ;
ConstructorDeclaration ::= ConstructorModifiers? ConstructorDeclarator Throws? ConstructorBody ;
FieldDeclaration ::= FieldModifiers? Type VariableDeclarators ";" ;
--------------------java::java-5-parr.bgf--------------------
constructorDeclaratorRest ::= formalParameters ("throws" qualifiedNameList)? constructorBody ;
interfaceMethodDeclaratorRest ::= formalParameters ("[" "]")* ("throws" qualifiedNameList)? ";" ;
elementValueArrayInitializer ::= "{" (elementValue ("," elementValue)*)? ","? "}" ;
DecimalLiteral ::= "0" | ("1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")*) IntegerTypeSuffix? ;
conditionalExpression ::= conditionalOrExpression ("?" expression ":" expression)? ;
constructorBody ::= "{" explicitConstructorInvocation? blockStatement* "}" ;
formalParameters ::= "(" formalParameterDecls? ")" ;
enumDeclaration ::= ENUM Identifier ("implements" typeList)? enumBody ;
innerCreator ::= nonWildcardTypeArguments? Identifier classCreatorRest ;
HexLiteral ::= "0" "x" | "X" HexDigit+ IntegerTypeSuffix? ;
statement ::= block | (ASSERT expression (":" expression)? ";") | ("if" parExpression statement ("else" statement)?) | ("for" "(" forControl ")" statement) | ("while" parExpression statement) | ("do" statement "while" parExpression ";") | ("try" block (catches "finally" block) | catches | ("finally" block)) | ("switch" parExpression "{" switchBlockStatementGroups "}") | ("synchronized" parExpression block) | ("return" expression? ";") | ("throw" expression ";") | ("break" Identifier? ";") | ("continue" Identifier? ";") | ";" | (statementExpression ";") | (Identifier ":" statement) ;
annotation ::= "@" annotationName ("(" (elementValuePairs | elementValue)? ")")? ;
superSuffix ::= arguments | ("." Identifier arguments?) ;
unaryExpressionNotPlusMinus ::= ("~" unaryExpression) | ("!" unaryExpression) | castExpression | (primary selector* ("++" | "--")?) ;
normalClassDeclaration ::= "class" Identifier typeParameters? ("extends" type)? ("implements" typeList)? classBody ;
relationalOp ::= (t1::"<" t2::("="?)) | (t1::">" t2::("="?)) | "<" | ">" ;
annotationTypeElementRest ::= (type annotationMethodOrConstantRest ";") | (normalClassDeclaration ";"?) | (normalInterfaceDeclaration ";"?) | (enumDeclaration ";"?) | (annotationTypeDeclaration ";"?) ;
compilationUnit ::= (annotations (packageDeclaration importDeclaration* typeDeclaration*) | (classOrInterfaceDeclaration typeDeclaration*)) | (packageDeclaration? importDeclaration* typeDeclaration*) ;
methodDeclaratorRest ::= formalParameters ("[" "]")* ("throws" qualifiedNameList)? methodBody | ";" ;
annotationMethodRest ::= Identifier "(" ")" defaultValue? ;
formalParameterDeclsRest ::= (variableDeclaratorId ("," formalParameterDecls)?) | ("..." variableDeclaratorId) ;
classBodyDeclaration ::= ";" | ("static"? block) | (modifiers memberDecl) ;
selector ::= ("." Identifier arguments?) | ("." "this") | ("." "super" superSuffix) | ("." "new" innerCreator) | ("[" expression "]") ;
voidMethodDeclaratorRest ::= formalParameters ("throws" qualifiedNameList)? methodBody | ";" ;
expression ::= conditionalExpression (assignmentOperator expression)? ;
classOrInterfaceType ::= Identifier typeArguments? ("." Identifier typeArguments?)* ;
typeArgument ::= type | ("?" ("extends" | "super" type)?) ;
explicitConstructorInvocation ::= (nonWildcardTypeArguments? "this" | "super" arguments ";") | (primary "." nonWildcardTypeArguments? "super" arguments ";") ;
arguments ::= "(" expressionList? ")" ;
importDeclaration ::= "import" "static"? qualifiedName ("." "*")? ";" ;
forControl ::= enhancedForControl | (forInit? ";" expression? ";" forUpdate?) ;
assignmentOperator ::= "=" | "+=" | "-=" | "*=" | "/=" | "&=" | "|=" | "^=" | "%=" | (t1::"<" t2::"<" t3::"=") | (t1::">" t2::">" t3::">" t4::("="?)) | (t1::">" t2::">" t3::"=") ;
Exponent ::= "e" | "E" ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
typeParameter ::= Identifier ("extends" typeBound)? ;
variableDeclarator ::= variableDeclaratorId ("=" variableInitializer)? ;
voidInterfaceMethodDeclaratorRest ::= formalParameters ("throws" qualifiedNameList)? ";" ;
arrayInitializer ::= "{" (variableInitializer ("," variableInitializer)* ","?)? "}" ;
normalInterfaceDeclaration ::= "interface" Identifier typeParameters? ("extends" typeList)? interfaceBody ;
classCreatorRest ::= arguments classBody? ;
FloatingPointLiteral ::= (("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* Exponent? FloatTypeSuffix?) | ("." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ Exponent? FloatTypeSuffix?) | (("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ Exponent FloatTypeSuffix?) | (("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ FloatTypeSuffix) ;
enumConstant ::= annotations? Identifier arguments? classBody? ;
OctalLiteral ::= "0" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7")+ IntegerTypeSuffix? ;
instanceOfExpression ::= relationalExpression ("instanceof" type)? ;
shiftOp ::= (t1::"<" t2::("<"?)) | (t1::">" t2::">" t3::">") | (t1::">" t2::(">"?)) ;
enumBody ::= "{" enumConstants? ","? enumBodyDeclarations? "}" ;
primary ::= parExpression | ("this" ("." Identifier)* identifierSuffix?) | ("super" superSuffix) | literal | ("new" creator) | (Identifier ("." Identifier)* identifierSuffix?) | (primitiveType ("[" "]")* "." "class") | ("void" "." "class") ;
--------------------java::java-5-stahl.bgf--------------------
implementsClause ::= (i::"implements" classOrInterfaceType (COMMA classOrInterfaceType)*)? ;
conditionalExpression ::= logicalOrExpression (QUESTION assignmentExpression COLON conditionalExpression)? ;
constructorBody ::= lc::LCURLY explicitConstructorInvocation? statement* RCURLY ;
typeArguments ::= (lt::LT typeArgument (COMMA typeArgument)* typeArgumentsEnd?) | Îµ ;
varInitializer ::= (ASSIGN initializer)? ;
primaryExpression ::= (identPrimary (DOT "class")?) | constant | "true" | "false" | "null" | newExpression | "this" | "super" | (LPAREN assignmentExpression RPAREN) | (builtInType (lbt::LBRACK RBRACK)* DOT "class") ;
forInit ::= (declaration | expressionList)? ;
NUM_INT ::= ("." ("." ".") | ((("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ EXPONENT? (f1::FLOAT_SUFFIX)?)?)) | (("0" (("x" | "X" HEX_DIGIT+) | (("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+) | (("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7")+))?) | ("1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")*) ("l" | "L" | ("." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* EXPONENT? (f2::FLOAT_SUFFIX)?) | (EXPONENT (f3::FLOAT_SUFFIX)?) | (f4::FLOAT_SUFFIX))?) ;
identPrimary ::= ta1::typeArguments IDENT ((DOT ta2::typeArguments IDENT) | Îµ)* ((lp::LPAREN argList RPAREN) | ((lbc::LBRACK RBRACK)+))? ;
defaultValue ::= ("default" annotationMemberValue)? ;
statement ::= compoundStatement | (declaration SEMI) | (expression SEMI) | (m::modifiers enumDefinition | classDefinition) | (IDENT c::COLON statement) | ("if" LPAREN expression RPAREN statement ("else" statement)?) | ("for" LPAREN (parameterDeclaration COLON expression) | (forInit SEMI forCond SEMI forIter) RPAREN statement) | ("while" LPAREN expression RPAREN statement) | ("do" statement "while" LPAREN expression RPAREN SEMI) | ("break" IDENT? SEMI) | ("continue" IDENT? SEMI) | ("return" expression? SEMI) | ("switch" LPAREN expression RPAREN LCURLY casesGroup* RCURLY) | tryBlock | ("throw" expression SEMI) | ("synchronized" LPAREN expression RPAREN compoundStatement) | (ASSERT expression (COLON expression)? SEMI) | (s::SEMI) ;
EXPONENT ::= "e" | "E" ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
postfixExpression ::= primaryExpression ((DOT "this") | (DOT ta1::typeArguments (IDENT (lp::LPAREN argList RPAREN)?) | ("super" (lp3::LPAREN argList RPAREN) | (DOT ta2::typeArguments IDENT (lps::LPAREN argList RPAREN)?))) | (DOT newExpression) | (lb::LBRACK expression RBRACK))* ((in::INC) | (de::DEC))? ;
newArrayDeclarator ::= (lb::LBRACK expression? RBRACK)+ ;
NUM_FLOAT ::= ("." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ EXPONENT? "f" | "F") | ("0" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ "." | EXPONENT | "f" | "F") | (("1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* (("." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")*)? EXPONENT? "f" | "F") | EXPONENT) ;
enumConst ::= annotations IDENT enumConstInit classBlock? ;
interfaceExtends ::= (e::"extends" classOrInterfaceType (COMMA classOrInterfaceType)*)? ;
identifierStar ::= IDENT (DOT IDENT)* (DOT STAR)? ;
importDefinition ::= i::"import" "static"? identifierStar SEMI ;
newExpression ::= "new" typeArguments type (LPAREN argList RPAREN classBlock?) | (newArrayDeclarator arrayInitializer?) ;
typeArgument ::= (q::QUESTION (("extends" referenceTypeSpec) | ("super" referenceTypeSpec))?) | referenceTypeSpec ;
ESC ::= "\\" "n" | "r" | "t" | "b" | "f" | """ | "\'" | "\\" | ("u"+ HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT) | ("0" | "1" | "2" | "3" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7")?)?) | ("4" | "5" | "6" | "7" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7")?) ;
ctorHead ::= IDENT LPAREN parameterDeclarationList RPAREN throwsClause? ;
annotationMemberArrayInitializer ::= lc::LCURLY (annotationMemberValue (COMMA annotationMemberValue)*)? COMMA? RCURLY ;
tryBlock ::= "try" compoundStatement handler* finallyClause? ;
parameterDeclaration ::= pm::parameterModifier t::typeSpec (el::ELLIPSIS)? id::IDENT pd::declaratorBrackets ;
typeParameter ::= IDENT ("extends" classOrInterfaceType (BAND classOrInterfaceType)*)? ;
parameterDeclarationList ::= (parameterDeclaration (COMMA parameterDeclaration)*)? ;
superClassClause ::= ("extends" classOrInterfaceType)? ;
enumBlock ::= LCURLY (enumConst (COMMA enumConst)*)? COMMA? (SEMI (classField | SEMI)*)? RCURLY ;
forCond ::= expression? ;
memberDef ::= t::typeSpec (IDENT LPAREN param::parameterDeclarationList RPAREN rt::declaratorBrackets (tc::throwsClause)? SEMI | (s2::compoundStatement)) | (v::variableDefinitions SEMI) ;
NUM_DOUBLE ::= ("." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ EXPONENT? "d" | "D") | ("0" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ "." | EXPONENT | "d" | "D") | (("1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* (("." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")*)? EXPONENT? "d" | "D") | EXPONENT) ;
arrayInitializer ::= lc::LCURLY (initializer (COMMA initializer)*)? COMMA? RCURLY ;
assignmentExpression ::= conditionalExpression (ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | STAR_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | SR_ASSIGN | BSR_ASSIGN | SL_ASSIGN | BAND_ASSIGN | BXOR_ASSIGN | BOR_ASSIGN assignmentExpression)? ;
typeParameters ::= (lt::LT typeParameter (COMMA typeParameter)* typeArgumentsEnd?) | Îµ ;
forIter ::= expressionList? ;
--------------------java::java-5-studman.bgf--------------------
implementsClause ::= (i::"implements" classOrInterfaceType (COMMA classOrInterfaceType)*)? ;
conditionalExpression ::= logicalOrExpression (QUESTION assignmentExpression COLON conditionalExpression)? ;
constructorBody ::= lc::LCURLY explicitConstructorInvocation? statement* RCURLY ;
typeArguments ::= LT typeArgument (COMMA typeArgument)* typeArgumentsOrParametersEnd? ;
varInitializer ::= (ASSIGN initializer)? ;
primaryExpression ::= (identPrimary (DOT "class")?) | constant | "true" | "false" | "null" | newExpression | "this" | "super" | (LPAREN assignmentExpression RPAREN) | (builtInType (lbt::LBRACK RBRACK)* DOT "class") ;
forInit ::= (declaration | expressionList)? ;
NUM_INT ::= ("." ((("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ EXPONENT? (f1::FLOAT_SUFFIX)?) | "..")?) | (("0" (("x" | "X" HEX_DIGIT+) | (("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+) | (("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7")+))?) | ("1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")*) ("l" | "L" | ("." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* EXPONENT? (f2::FLOAT_SUFFIX)?) | (EXPONENT (f3::FLOAT_SUFFIX)?) | (f4::FLOAT_SUFFIX))?) ;
enumConstantField ::= (mods::modifiers (td::typeDefinitionInternal) | ((tp::typeParameters)? t::typeSpec (IDENT LPAREN param::parameterDeclarationList RPAREN rt::declaratorBrackets (tc::throwsClause)? (s2::compoundStatement) | SEMI) | (v::variableDefinitions SEMI))) | (s4::compoundStatement) ;
wildcardType ::= q::QUESTION typeArgumentBounds? ;
identPrimary ::= (ta1::typeArguments)? IDENT ((DOT (ta2::typeArguments)? IDENT) | Îµ)* ((lp::LPAREN argList RPAREN) | ((lbc::LBRACK RBRACK)+))? ;
statement ::= compoundStatement | (declaration SEMI) | (expression SEMI) | (m::modifiers classDefinition) | (IDENT c::COLON statement) | ("if" LPAREN expression RPAREN statement ("else" statement)?) | forStatement | ("while" LPAREN expression RPAREN statement) | ("do" statement "while" LPAREN expression RPAREN SEMI) | ("break" IDENT? SEMI) | ("continue" IDENT? SEMI) | ("return" expression? SEMI) | ("switch" LPAREN expression RPAREN LCURLY casesGroup* RCURLY) | tryBlock | ("throw" expression SEMI) | ("synchronized" LPAREN expression RPAREN compoundStatement) | ("assert" expression (COLON expression)? SEMI) | (s::SEMI) ;
EXPONENT ::= "e" | "E" ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
annotation ::= AT i::identifier (LPAREN (args::annotationArguments)? RPAREN)? ;
postfixExpression ::= primaryExpression ((DOT typeArguments? (IDENT (lp::LPAREN argList RPAREN)?) | ("super" (lp3::LPAREN argList RPAREN) | (DOT typeArguments? IDENT (lps::LPAREN argList RPAREN)?))) | (DOT "this") | (DOT newExpression) | (lb::LBRACK expression RBRACK))* ((in::INC) | (de::DEC))? ;
interfaceDefinition ::= "interface" IDENT (tp::typeParameters)? ie::interfaceExtends ib::interfaceBlock ;
classDefinition ::= "class" IDENT (tp::typeParameters)? sc::superClassClause ic::implementsClause cb::classBlock ;
newArrayDeclarator ::= (lb::LBRACK expression? RBRACK)+ ;
NUM_FLOAT ::= ("." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ EXPONENT? "f" | "F") | ("0" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ "." | EXPONENT | "f" | "F") | (("1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* (("." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")*)? EXPONENT? "f" | "F") | EXPONENT) ;
classField ::= (mods::modifiers (td::typeDefinitionInternal) | ((tp::typeParameters)? (h::ctorHead s::constructorBody) | (t::typeSpec (IDENT LPAREN param::parameterDeclarationList RPAREN rt::declaratorBrackets (tc::throwsClause)? (s2::compoundStatement) | SEMI) | (v::variableDefinitions SEMI)))) | ("static" s3::compoundStatement) | (s4::compoundStatement) ;
parameterModifier ::= annotation* (f::"final")? annotation* ;
interfaceExtends ::= (e::"extends" classOrInterfaceType (COMMA classOrInterfaceType)*)? ;
identifierStar ::= IDENT (DOT IDENT)* (DOT STAR)? ;
importDefinition ::= i::"import" "static"? identifierStar SEMI ;
newExpression ::= "new" typeArguments? type (LPAREN argList RPAREN classBlock?) | (newArrayDeclarator arrayInitializer?) ;
classOrInterfaceType ::= IDENT typeArguments? (DOT IDENT typeArguments?)* ;
explicitConstructorInvocation ::= typeArguments? ("this" lp1::LPAREN argList RPAREN SEMI) | ("super" lp2::LPAREN argList RPAREN SEMI) ;
ESC ::= "\\" "n" | "r" | "t" | "b" | "f" | """ | "\'" | "\\" | ("u"+ HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT) | ("0" | "1" | "2" | "3" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7")?)?) | ("4" | "5" | "6" | "7" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7")?) ;
ctorHead ::= IDENT LPAREN parameterDeclarationList RPAREN throwsClause? ;
annotationMemberArrayInitializer ::= lc::LCURLY (annotationMemberArrayValueInitializer (COMMA annotationMemberArrayValueInitializer)* COMMA?)? RCURLY ;
tryBlock ::= "try" compoundStatement handler* finallyClause? ;
typeParameter ::= id::IDENT typeParameterBounds? ;
parameterDeclarationList ::= ((parameterDeclaration (COMMA parameterDeclaration)* (COMMA variableLengthParameterDeclaration)?) | variableLengthParameterDeclaration)? ;
enumBlock ::= LCURLY (enumConstant (COMMA enumConstant)* COMMA?)? (SEMI (classField | SEMI)*)? RCURLY ;
superClassClause ::= ("extends" c::classOrInterfaceType)? ;
annotationField ::= mods::modifiers (td::typeDefinitionInternal) | (t::typeSpec (i::IDENT LPAREN RPAREN rt::declaratorBrackets ("default" amvi::annotationMemberValueInitializer)? SEMI) | (v::variableDefinitions SEMI)) ;
forCond ::= expression? ;
NUM_DOUBLE ::= ("." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ EXPONENT? "d" | "D") | ("0" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ "." | EXPONENT | "d" | "D") | (("1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* (("." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")*)? EXPONENT? "d" | "D") | EXPONENT) ;
arrayInitializer ::= lc::LCURLY (initializer (COMMA initializer)* COMMA?)? RCURLY ;
enumConstant ::= an::annotations i::IDENT (LPAREN a::argList RPAREN)? (b::enumConstantBlock)? ;
assignmentExpression ::= conditionalExpression (ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | STAR_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | SR_ASSIGN | BSR_ASSIGN | SL_ASSIGN | BAND_ASSIGN | BXOR_ASSIGN | BOR_ASSIGN assignmentExpression)? ;
typeParameters ::= LT typeParameter (COMMA typeParameter)* typeArgumentsOrParametersEnd? ;
forIter ::= expressionList? ;
interfaceField ::= mods::modifiers (td::typeDefinitionInternal) | ((tp::typeParameters)? t::typeSpec (IDENT LPAREN param::parameterDeclarationList RPAREN rt::declaratorBrackets (tc::throwsClause)? SEMI) | (v::variableDefinitions SEMI)) ;
--------------------java::java-1-cordy-guo.bgf--------------------
class_or_interface_body ::= "{" NL IN class_body_declaration* EX "}" ";"? NL NL ;
method_declaration ::= NL modifier* type_specifier method_declarator throws? method_body ;
array_initializer ::= "{" {variable_initializer ","}* ","? "}" ;
formal_parameter ::= "final"? type_specifier formal_parameter_name ;
continue_statement ::= "continue" label_name? ";" NL ;
class_instance_creation_expression ::= "new" class_or_interface_name "(" {argument ","}* ")" class_body? ;
constructor_declaration ::= NL modifier* constructor_declarator throws? constructor_body NL NL ;
variable_declarator ::= variable_name equals_variable_initializer? ;
class_header ::= modifier* "class" class_name extends_clause? implements_clause? ;
interface_header ::= modifier* "interface" interface_name extends_clause? implements_clause? ;
array_creation_expression ::= "new" array_type_specifier array_initializer? ;
conditional_expression ::= conditional_or_expression conditional_choice? ;
break_statement ::= "break" label_name? ";" NL ;
for_expression ::= expression? ";" ;
if_statement ::= "if" "(" expression ")" statement else_clause? NL ;
try_statement ::= "try" block catch_clause* finally_clause? NL ;
dimension ::= "[" expression? "]" ;
imported_name ::= package_or_type_name dot_star? ;
package_declaration ::= package_header? import_declaration* type_declaration* ;
return_statement ::= "return" expression? ";" NL ;
--------------------java::java-4-sdf.bgf--------------------
ReturnStatement ::= "return" Expression? ";" ;
MethodHeader ::= Modifier* MethodRes MethodDeclarator Throws? ;
ConstructorBody ::= "{" ExplicitConstructorInvocation? BlockStatement* "}" ;
ConstructorDeclarator ::= SimpleName "(" (FormalParameter ("," FormalParameter)*)? ")" ;
ArrayInitializer ::= "{" (VariableInitializer ("," VariableInitializer)*)? ","? "}" ;
ContinueStatement ::= "continue" Identifier? ";" ;
DimExprInitialized ::= "[" Expression? "]" ;
CompilationUnit ::= PackageDeclaration? ImportDeclaration* TypeDeclaration+ ;
ExplicitConstructorInvocation ::= "this" "(" (Expression ("," Expression)*)? ")" ";" ;
 ExplicitConstructorInvocation ::= "super" "(" (Expression ("," Expression)*)? ")" ";" ;
ForStatement ::= "for" "(" ForInit? ";" Expression? ";" ForUpdate? ")" Statement ;
ClassInstanceCreationExpression ::= "new" ClassType "(" (Expression ("," Expression)*)? ")" ;
 ClassInstanceCreationExpression ::= "new" ClassType "(" (Expression ("," Expression)*)? ")" ClassBody ;
MethodDeclarator ::= Identifier "(" (FormalParameter ("," FormalParameter)*)? ")" ;
 MethodDeclarator ::= MethodDeclarator "[" "]" ;
ClassDeclaration ::= Modifier* "class" Identifier Super? Interfaces? ClassBody ;
InterfaceDeclaration ::= Modifier* "interface" Identifier ExtendsInterfaces? InterfaceBody ;
MethodInvocation ::= Name "(" (Expression ("," Expression)*)? ")" ;
 MethodInvocation ::= Primary "." Identifier "(" (Expression ("," Expression)*)? ")" ;
 MethodInvocation ::= Primary "." ClassInstanceCreationExpression ;
 MethodInvocation ::= "super" "." Identifier "(" (Expression ("," Expression)*)? ")" ;
ConstructorDeclaration ::= Modifier* ConstructorDeclarator Throws? ConstructorBody ;
BreakStatement ::= "break" Identifier? ";" ;
--------------------java::java-5-cordy-guo-dean.bgf--------------------
wildcard_type ::= ("?" wildcard_type_bound?) | (id wildcard_type_bound?) ;
enum_element ::= NL id method_argument? ;
class_or_interface_body ::= "{" NL IN class_body_declaration* EX "}" ";"? NL NL ;
method_declaration ::= NL modifier* generic_parameter? type_specifier method_declarator throws? method_body ;
array_initializer ::= "{" {variable_initializer ","}* ","? "}" ;
formal_parameter ::= annotation* "final"? type_specifier var_arg_specifier? formal_parameter_name ;
continue_statement ::= "continue" label_name? ";" NL ;
assert_statement ::= "assert" expression assert_error_code? ";" NL ;
class_instance_creation_expression ::= "new" class_or_interface_name "(" {argument ","}* ")" class_body? ;
constructor_declaration ::= NL modifier* generic_parameter? constructor_declarator throws? constructor_body NL NL ;
variable_declarator ::= variable_name equals_variable_initializer? ;
class_header ::= modifier* "class" class_name extends_clause? implements_clause? ;
interface_header ::= modifier* annot_marker? "interface" interface_name extends_clause? implements_clause? ;
array_creation_expression ::= "new" array_type_specifier array_initializer? ;
dot_id ::= ("." generic_argument? id) | ("." "class") | ("." class_instance_declaration) ;
conditional_expression ::= conditional_or_expression conditional_choice? ;
declared_name ::= id generic_parameter? ;
break_statement ::= "break" label_name? ";" NL ;
annotation ::= SPOFF "@" reference "@"? SPON annotation_value_spec? NL ;
for_expression ::= expression? ";" ;
if_statement ::= "if" "(" expression ")" statement else_clause? NL ;
try_statement ::= "try" block catch_clause* finally_clause? NL ;
enum_header ::= modifier* id? "enum" declared_name? implements_clause? ;
dimension ::= "[" expression? "]" ;
imported_name ::= package_or_type_name dot_star? ;
type_parameter ::= declared_name type_bound_clause? ;
package_declaration ::= package_header? import_declaration* type_declaration* ;
return_statement ::= "return" expression? ";" NL ;
enum_body ::= "{" IN {enum_element ","}* ","? class_body_declaration* EX "}" ";"? NL NL ;
method_body ::= (block NL NL) | (annotation_default? ";" NL NL) ;
import_declaration ::= ("import" "static"? imported_name ";" NL NL) | (";" NL) ;
--------------------java::java-5-landman.bgf--------------------
AbstractMethodDec ::= [abstractMethodDec] TypeParams? ResultType Id "(" {FormalParam ","}* ")" Throws? ";" ;
 AbstractMethodDec ::= [deprAbstractMethodDec] TypeParams? ResultType Id "(" {FormalParam ","}* ")" Dim+ Throws? ";" ;
MethodSpec ::= [method] MethodName ;
 MethodSpec ::= [superMethod] "super" "." TypeArgs? Id ;
 MethodSpec ::= [genericMethod] AmbName "." TypeArgs Id ;
 MethodSpec ::= [qSuperMethod] TypeName "." "super" "." TypeArgs? Id ;
 MethodSpec ::= [method] "." TypeArgs? Id ;
ClassOrInterfaceType ::= [classOrInterfaceType] TypeDecSpec TypeArgs? ;
Expr ::= [postDecr] Expr "--" ;
 Expr ::= [postIncr] Expr "++" ;
 Expr ::= [castPrim] "(" PrimType ")" Expr ;
 Expr ::= [castRef] "(" RefType ")" Expr ;
 Expr ::= [minus] Expr ;
 Expr ::= [preIncr] "++" Expr ;
 Expr ::= [plus] Expr ;
 Expr ::= [preDecr] "--" Expr ;
 Expr ::= [this] "this" ;
 Expr ::= [mul] Expr "*" Expr ;
 Expr ::= [div] Expr Expr ;
 Expr ::= [remain] Expr "%" Expr ;
 Expr ::= [qThis] TypeName "." "this" ;
 Expr ::= [complement] "~" Expr ;
 Expr ::= [not] "!" Expr ;
 Expr ::= [plus] Expr Expr ;
 Expr ::= [minus] Expr Expr ;
 Expr ::= [uRightShift] Expr ">>>" Expr ;
 Expr ::= [rightShift] Expr ">>" Expr ;
 Expr ::= [leftShift] Expr "<<" Expr ;
 Expr ::= [ltEq] Expr "<=" Expr ;
 Expr ::= [lt] Expr "<" Expr ;
 Expr ::= [gtEq] Expr ">=" Expr ;
 Expr ::= [instanceOf] Expr "instanceof" RefType ;
 Expr ::= [gt] Expr ">" Expr ;
 Expr ::= [eq] Expr "==" Expr ;
 Expr ::= [notEq] Expr "!=" Expr ;
 Expr ::= [and] Expr "&" Expr ;
 Expr ::= [excOr] Expr "^" Expr ;
 Expr ::= [or] Expr "|" Expr ;
 Expr ::= [lazyAnd] Expr "&&" Expr ;
 Expr ::= [lazyOr] Expr "||" Expr ;
 Expr ::= [cond] Expr CondMid Expr ;
 Expr ::= [assignMinus] LHS "-=" Expr ;
 Expr ::= [assignExcOr] LHS "^=" Expr ;
 Expr ::= [assignPlus] LHS "+=" Expr ;
 Expr ::= [assignURightShift] LHS ">>>=" Expr ;
 Expr ::= [assignAnd] LHS "&=" Expr ;
 Expr ::= [assignDiv] LHS "/=" Expr ;
 Expr ::= [assignMul] LHS "*=" Expr ;
 Expr ::= [assignRemain] LHS "%=" Expr ;
 Expr ::= [assignLeftShift] LHS "<<=" Expr ;
 Expr ::= [assignRightShift] LHS ">>=" Expr ;
 Expr ::= [assignOr] LHS "|=" Expr ;
 Expr ::= [assign] LHS "=" Expr ;
 Expr ::= [qNewInstance] Expr "." "new" TypeArgs? Id TypeArgs? "(" {Expr ","}* ")" ClassBody? ;
 Expr ::= [lit] Literal ;
 Expr ::= [newInstance] "new" TypeArgs? ClassOrInterfaceType "(" {Expr ","}* ")" ClassBody? ;
 Expr ::= [exprName] ExprName ;
 Expr ::= ArrayCreationExpr ;
 Expr ::= "(" Expr ")" ;
 Expr ::= Îµ ;
 Expr ::= [invoke] MethodSpec "(" {Expr ","}* ")" ;
TypeParam ::= [typeParam] TypeVarId TypeBound? ;
InterfaceType ::= [interfaceType] TypeDecSpec TypeArgs? ;
ClassType ::= [classType] TypeDecSpec TypeArgs? ;
ConstrBody ::= [constrBody] "{" ConstrInv? BlockStm* "}" ;
ConstrHead ::= [constrDecHead] TypeParams? Id "(" {FormalParam ","}* ")" Throws? ;
ActualTypeArg ::= Type ;
 ActualTypeArg ::= [wildcard] "?" WildcardBound? ;
Stm ::= [synchronized] "synchronized" "(" Expr ")" Block ;
 Stm ::= [exprStm] Expr ";" ;
 Stm ::= [for] "for" "(" {Expr ","}* ";" Expr? ";" {Expr ","}* ")" Stm ;
 Stm ::= [for] "for" "(" LocalVarDec ";" Expr? ";" {Expr ","}* ")" Stm ;
 Stm ::= Block ;
 Stm ::= [continue] "continue" Id? ";" ;
 Stm ::= [try] "try" Block CatchClause+ ;
 Stm ::= [throw] "throw" Expr ";" ;
 Stm ::= [switch] "switch" "(" Expr ")" SwitchBlock ;
 Stm ::= [if] "if" "(" Expr ")" Stm ;
 Stm ::= [break] "break" Id? ";" ;
 Stm ::= [empty] ";" ;
 Stm ::= [labeled] Id ":" Stm ;
 Stm ::= [assertStm] "assert" Expr ":" Expr ";" ;
 Stm ::= [forEach] "for" "(" FormalParam ":" Expr ")" Stm ;
 Stm ::= [assertStm] "assert" Expr ";" ;
 Stm ::= [try] "try" Block CatchClause* "finally" Block ;
 Stm ::= [return] "return" Expr? ";" ;
 Stm ::= [doWhile] "do" Stm "while" "(" Expr ")" ";" ;
 Stm ::= [while] "while" "(" Expr ")" Stm ;
 Stm ::= [if] "if" "(" Expr ")" Stm "else" Stm ;
ClassDecHead ::= [classDecHead] "class" Id TypeParams? Super? Interfaces? ;
InterfaceDecHead ::= [interfaceDecHead] "interface" Id TypeParams? ExtendsInterfaces? ;
CompilationUnit ::= [compilationUnit] PackageDec? ImportDec* TypeDec* ;
AnnoElemDec ::= EnumDec ;
 AnnoElemDec ::= [semicolon] ";" ;
 AnnoElemDec ::= ClassDec ;
 AnnoElemDec ::= ConstantDec ;
 AnnoElemDec ::= InterfaceDec ;
 AnnoElemDec ::= [annoMethodDec] AbstractMethodMod* Type Id "(" ")" DefaultVal? ";" ;
EnumBody ::= [enumBody] "{" {EnumConst ","}* EnumBodyDecs? "}" ;
 EnumBody ::= [enumBody] "{" {EnumConst ","}* "," EnumBodyDecs? "}" ;
EnumConst ::= [enumConst] Id EnumConstArgs? ClassBody? ;
ConstrInv ::= [qSuperConstrInv] Expr "." TypeArgs? "super" "(" {Expr ","}* ")" ";" ;
 ConstrInv ::= [superConstrInv] TypeArgs? "super" "(" {Expr ","}* ")" ";" ;
 ConstrInv ::= [altConstrInv] TypeArgs? "this" "(" {Expr ","}* ")" ";" ;
MethodDecHead ::= [deprMethodDecHead] TypeParams? ResultType Id "(" {FormalParam ","}* ")" Dim+ Throws? ;
 MethodDecHead ::= [methodDecHead] TypeParams? ResultType Id "(" {FormalParam ","}* ")" Throws? ;
EnumDecHead ::= [enumDecHead] "enum" Id Interfaces? ;
--------------------modula::sdf.bgf--------------------
Selector ::= "^" | ("." Id) | ("[" Expr ("," Expr)* "]") | ("(" (Actual ("," Actual)*)? ")") ;
EnumType ::= "{" IdList? "}" ;
ExceptionDecl ::= Id ("(" Type ")")? ;
ObjectType ::= Ancestor? Brand? "OBJECT" Fields ("METHODS" Methods)? ("OVERRIDES" Overrides)? "END" ;
CaseStmt ::= "CASE" Expr "OF" "|"? Case ("|" Case)* ("ELSE" Stmts)? "END" ;
ReturnStmt ::= "RETURN" Expr? ;
RaiseStmt ::= "RAISE" QualId ("(" Expr ")")? ;
Actual ::= TypeLiteral | ((Id ":=")? Expr) ;
QualId ::= Id ("." Id)? ;
Handler ::= QualId ("," QualId)* ("(" Id ")")? "=>" Stmts ;
Raises ::= ("{" (QualId ("," QualId)*)? "}") | "ANY" ;
Brand ::= "BRANDED" TextLiteral? ;
CallStmt ::= Expr "(" (Actual ("," Actual)*)? ")" ;
IfStmt ::= "IF" Expr "THEN" Stmts ("ELSIF" Expr "THEN" Stmts)* ("ELSE" Stmts)? "END" ;
TCase ::= Type ("," Type)* ("(" Id ")")? "=>" Stmts ;
Compilation ::= "UNSAFE"? Interface | Module | GenInf | GenMod ;
GenFmls ::= "(" IdList? ")" ;
AnyCons ::= Elt ("," Elt)* ("," "..")? ;
Constructor ::= Type "{" AnyCons? "}" ;
Fields ::= (Field (";" Field)* ";"?)? ;
Signature ::= "(" Formals ")" (":" Type)? ("RAISES" Raises)? ;
Label ::= Expr (".." Expr)? ;
ArrayType ::= "ARRAY" (Type ("," Type)*)? "OF" Type ;
Methods ::= (Method (";" Method)* ";"?)? ;
ForStmt ::= "FOR" Id ":=" Expr "TO" Expr ("BY" Expr)? "DO" Stmts "END" ;
Formal ::= (Mode? IdList ":" Type ":=" Expr) | (Mode? IdList ":" Type) | (Mode? IdList ":=" Expr) ;
RefType ::= "UNTRACED"? Brand? "REF" Type ;
ConstDecl ::= Id (":" Type)? "=" Expr ;
Module ::= ("MODULE" Id ("EXPORTS" IdList)? ";" Import* Block Id ".") | ("MODULE" Id ("EXPORTS" IdList)? "=" Id GenActls "END" Id ".") ;
TCaseStmt ::= "TYPECASE" Expr "OF" "|"? TCase ("|" TCase)* ("ELSE" Stmts)? "END" ;
Stmts ::= (Stmt (";" Stmt)* ";"?)? ;
Decl ::= ("CONST" (ConstDecl ";")*) | ("TYPE" (TypeDecl ";")*) | ("EXCEPTION" (ExceptionDecl ";")*) | ("VAR" (VariableDecl ";")*) | (ProcedureHead ("=" Block Id)? ";") | ("REVEAL" (QualId "=" | "<:" Type ";")*) ;
GenActls ::= "(" IdList? ")" ;
TryXptStmt ::= "TRY" Stmts "EXCEPT" "|"? Handler ("|" Handler)* ("ELSE" Stmts)? "END" ;
Overrides ::= (Override (";" Override)* ";"?)? ;
Formals ::= (Formal (";" Formal)* ";"?)? ;
Method ::= Id Signature (":=" Expr)? ;
--------------------modula::src-052.bgf--------------------
Selector ::= "^" | ("." Ident) | ("[" Expr ("," Expr)* "]") | ("(" (Actual ("," Actual)*)? ")") ;
RecordElt ::= (Ident ":=")? Expr ;
EnumType ::= "{" IDList? "}" ;
ObjectType ::= Ancestor? Brand? "OBJECT" Fields ("METHODS" Methods)? "END" ;
ExceptionDecl ::= Ident ("(" Type ")")? ;
CaseStmt ::= "CASE" Expr "OF" Case? ("|" Case)* ("ELSE" Stmts)? "END" ;
ReturnStmt ::= "RETURN" Expr? ;
RaiseStmt ::= "RAISE" ExceptionID ("(" Expr ")")? ;
Actual ::= ((Ident ":=")? Expr) | Type ;
Handler ::= ExceptionID ("," ExceptionID)* ("(" Ident ")")? "=>" Stmts ;
Number ::= (Digit+) | (Digit+ "_" HexDigit+) | (Digit+ "." Digit+ Exponent?) ;
Brand ::= "BRANDED" TextLiteral? ;
Raises ::= "{" (ExceptionID ("," ExceptionID)*)? "}" ;
CallStmt ::= Expr "(" (Actual ("," Actual)*)? ")" ;
IfStmt ::= "IF" Expr "THEN" Stmts ("ELSIF" Expt "THEN" Stmts)* ("ELSE" Stmts)? "END" ;
Compilation ::= "UNSAFE"? Interface | Module ;
Labels ::= ConstExpr (".." ConstExpr)? ;
Constructor ::= Type "{" (SetCons | RecordCons | ArrayCons)? "}" ;
Declaration ::= ("CONST" (ConstDecl ";")*) | ("TYPE" (TypeDecl ";")*) | ("EXCEPTION" (ExceptionDecl ";")*) | ("VAR" (VariableDecl ";")*) | (ProcedureHead ("=" Block Ident)? ";") | ("REVEAL" (TypeID "=" | "<:" Type ";")*) ;
Fields ::= (Field (";" Field)* ";"?)? ;
Signature ::= "(" Formals ")" (":" Type)? ("RAISES" Raises)? ;
ArrayType ::= "ARRAY" (Type ("," Type)*)? "OF" Type ;
Methods ::= (Method (";" Method)* ";"?)? ;
ForStmt ::= "FOR" Ident ":=" Expt "TO" Expr ("BY" Expr)? "DO" Stmts "END" ;
Exponent ::= "E" | "e" | "D" | "d" ("+" | "-")? Digit+ ;
Formal ::= ("VALUE" | "VAR" | "READONLY")? IDList ":" Type "&" ":=" ConstExpr ;
ProcedureID ::= Ident ("." Ident)? ;
RefType ::= "UNTRACED"? Brand? "REF" Type ;
ConstDecl ::= Ident (":" Type)? "=" ConstExpr ;
TCaseStmt ::= "TYPECASE" Expr "OF" Tcase? ("|" Tcase)* ("ELSE" Stmts)? "END" ;
Module ::= "MODULE" Ident ("EXPORTS" IDList)? ";" Import* Block Ident "." ;
SetElt ::= Expr (".." Expr)? ;
Stmts ::= (Stmt (";" Stmt)* ";"?)? ;
ExceptionID ::= Ident ("." Ident)? ;
ArrayCons ::= Expr ("," Expr)* ("," "..")? ;
TryXptStmt ::= "TRY" Stmts "EXCEPT" Handler? ("|" Handler)* ("ELSE" Stmts)? "END" ;
TypeName ::= (Ident ("." Ident)?) | "ROOT" | ("UNTRACED" "ROOT") ;
Import ::= ("FROM" Ident)? "IMPORT" IDList ";" ;
Tcase ::= Type ("," Type)* ("(" Ident ")")? "=>" Stmts ;
Formals ::= (Formal (";" Formal)* ";"?)? ;
--------------------modula::dagenais-cordy.bgf--------------------
MethodList ::= IN Method SemiColonMethod* ";"? EX NL ;
RecordElt ::= Expr EqualExpr? ;
ExceptionDecl ::= id ParenthesizedType? ";" NL ;
ObjectType ::= ObjectOrTypeName? Brand? "OBJECT" IN NL Fields TheMethods? TheOverrides? "END" EX ;
CaseStmt ::= "CASE" Expr "OF" NL Case? VerticalCase* ElseStmts? "END" ;
ReturnStmt ::= "RETURN" Expr? ;
ImportItem ::= id AsId? ;
RaiseStmt ::= "RAISE" QualId ParenthesizedExpr? ;
TypecaseStmt ::= "TYPECASE" Expr "OF" NL TCase? VerticalTCase* ElseStmts? "END" ;
IInterface ::= "UNSAFE"? "INTERFACE" id "=" id GenActls "END" id "." NL ;
QualId ::= id DotId? ;
OverrideList ::= IN Override SemiColonOverride* ";"? EX NL ;
Handler ::= {QualId ","}* ParenthesizedId? "=>" Stmts ;
Brand ::= "BRANDED" ConstExpr? ;
ExceptOrFinally ::= ("EXCEPT" NL Handler? VerticalHandler* ElseStmts?) | ("FINALLY" Stmts) ;
VariableDecl ::= IdList ColonType? EqualExpr? ";" NL ;
IfStmt ::= "IF" Expr "THEN" Stmts Elsif* ElseStmts? "END" ;
TCase ::= {Type ","}* ParenthesizedId? "=>" Stmts ;
Labels ::= ConstExpr DotDotConstExpr? ;
GenFmls ::= "(" IdList? ")" ;
Field ::= IdList ColonType? EqualConstExpr? ;
Fields ::= FieldList? ;
Interface ::= "UNSAFE"? "INTERFACE" id ";" NL NL Import* Decl* NL "END" id "." NL ;
Signature ::= "(" Formals? ")" ColonType? Raises? ;
OptStmts ::= Stmt SemiColonStmt* ";"? NL ;
FieldList ::= IN Field SemiColonField* ";"? EX NL ;
IModule ::= "UNSAFE"? "MODULE" id Exports? "=" id GenActls "END" id "." NL ;
Methods ::= MethodList? ;
ForStmt ::= "FOR" id ":=" Expr "TO" Expr ByExpr? "DO" Stmts "END" ;
Formal ::= Mode? IdList ColonType? EqualConstExpr? ;
RefType ::= "UNTRACED"? Brand? "REF" Type ;
ConstDecl ::= id ColonType? "=" ConstExpr ";" NL ;
Module ::= "UNSAFE"? "MODULE" id Exports? ";" NL NL Import* Block id "." NL ;
SetElt ::= Expr DotDotExpr? ;
Stmts ::= IN NL OptStmts? EX ;
ArrayCons ::= {Expr ","}* ComaDotDot? ;
Decl ::= (ProcedureHead EqualBlock? ";" NL NL) | ("VAR" IN NL VariableDecl* EX) | ("TYPE" IN NL TypeDecl* EX NL) | ("CONST" IN NL ConstDecl* EX NL) | ("EXCEPTION" IN NL ExceptionDecl* EX NL) | ("REVEAL" IN NL RevealDecl* EX NL) ;
GenActls ::= "(" IdList? ")" ;
Overrides ::= OverrideList? ;
Formals ::= Formal SemicolonFormal* ";"? ;
Method ::= id Signature EqualConstExpr? ;
EnumerationType ::= "{" IdList? "}" ;
--------------------xpath::w3c-xpath1.bgf--------------------
Number ::= [NT-Number] (Digits ("." Digits?)?) | ("." Digits) ;
FunctionCall ::= [NT-FunctionCall] FunctionName "(" (Argument ("," Argument)*)? ")" ;
AbbreviatedAxisSpecifier ::= [NT-AbbreviatedAxisSpecifier] "@"? ;
AbsoluteLocationPath ::= [NT-AbsoluteLocationPath] ("/" RelativeLocationPath?) | AbbreviatedAbsoluteLocationPath ;
--------------------assembly::delphi.bgf--------------------
asm_opcode_prefix ::= "lock" space? ;
asm_stm ::= asmlabel_colon? asm_unlabeledstm_semi? ;
asm_register ::= ("ST" "(" integernumber ")") | ("ST") | "FS" | ("GS") | "EAX" | "EBX" | "ECX" | ("EDX") | "ESP" | "EBP" | "ESI" | ("EDI") | "AX" | "BX" | "CX" | ("DX") | "SP" | "BP" | "SI" | ("DI") | "AL" | "BL" | "CL" | ("DL") | "CS" | "DS" | "SS" | ("ES") | "AH" | "BH" | "CH" | ("DH") | ("CS" segmt_overr?) | ("DS" segmt_overr?) | ("SS" segmt_overr?) | ("FS" segmt_overr?) | ("GS" segmt_overr?) | ("ES" segmt_overr?) ;
asm_unlabeledstm_semi ::= asm_unlabeledstm ";"? NL ;
asm_unlabeledstm ::= (asm_directive {asm_directive_arg ","}*) | (asm_opcode_prefix? asm_opcode {asm_expr ","}*) ;
asm_directive_arg ::= charlit | (sign? anynumber) | asm_expr ;
--------------------basic::vb6-cordy.bgf--------------------
subprogram_declaration ::= access_modifier? "static"? sub_or_function id lib_description? subprogram_argument_description? as_type? eol IN sub_scope EX "end" sub_or_function ;
put_statement ::= "put" filenumber comma_expn? "," reference ;
preprocessor_if_statement ::= "#if" expn "then" eol IN sub_scope EX preprocessor_elsif_clause* preprocessor_else_clause? "#end" "if" ;
full_if_statement ::= "if" expn "then" eol IN sub_scope EX elsif_clause* else_clause? "end" "if" ;
assignment_statement ::= "let"? reference "=" expn ;
short_for_next_statement ::= "for" id "=" expn to_or_downto expn step_clause? colon_declaration_or_statement* ":" "next" id? ;
spc_tab ::= ("spc" "(" expn? ")") | ("tab" "(" expn? ")") ;
enum_declaration ::= access_modifier? "enum" id eol IN enum_member_definition* EX "end" "enum" ;
do_statement ::= "do" while_or_until_clause? eol IN sub_scope EX "loop" while_or_until_clause? ;
open_statement ::= "open" filepath "for" mode access_spec? lock? "as" filenumber length_spec? ;
type_declaration ::= access_modifier? "type" id eol IN type_member_definition* EX "end" "type" ;
unlock_statement ::= "unlock" filenumber comma_recordrange? ;
declare_subprogram_declaration ::= access_modifier? "declare" sub_or_function id lib_description alias_description? subprogram_argument_description? as_type? ;
short_if_statement ::= "if" expn "then" single_declaration_or_statement short_else_clause? ;
class_begin_block ::= "begin" reference? IN class_begin_item* EX "end" ;
single_var_description ::= id initial_value? as_type? ;
optional_subscript ::= (expn to_expn?) | (SP Îµ) ;
property_argument ::= "optional"? byref_or_byval? "paramarray"? id parens? as_type? equals_expn? ;
as_type ::= "as" "new"? reference star_size? ;
print_item ::= (spc_tab? expn charpos?) | spc_tab ;
subscript_expn ::= expn to_expn? ;
comma_recordrange ::= "," number to_number? ;
randomize_statement ::= "randomize" number? ;
filepath ::= (drive? id slash_id*) | stringlit ;
constant_description ::= id as_type? initial_value ;
case_expn ::= expn to_expn? ;
constant_declaration ::= access_modifier? "const" constant_description ;
case_alternative ::= eol* "case" is_operator? case_expn+ eol IN sub_scope EX ;
resume_statement ::= ("resume" "next") | ("resume" number?) ;
lock_statement ::= "lock" filenumber comma_recordrange? ;
is_operator ::= "is" op? ;
on_error_statement ::= "on" "local"? "error" on_error_action ;
subprogram_argument ::= "optional"? byref_or_byval? id? parens? as_type? equals_expn? ;
colon_declaration_or_statement ::= ":" declaration_or_statement? ;
full_for_each_statement ::= "for" "each" id "in" expn eol IN sub_scope EX "next" id? ;
array_description ::= "withevents"? "preserve"? id "(" {subscript_expn ","}* ")" as_type? ;
set_object_expn ::= ("new"? expn) | "nothing" ;
goto_statement ::= on_expn? "goto" expn ;
type_member_definition ::= (id parens? as_type? eol) | eol ;
call_statement ::= "call"? reference subroutine_bracketless_params? ;
reference ::= ("."? "!"? id component_selector*) | ("." key component_selector*) ;
short_for_each_statement ::= "for" "each" id "in" expn eol colon_declaration_or_statement* ":" "next" id? ;
event_statement ::= "public"? "event" id event_argument_list? ;
full_for_next_statement ::= "for" id "=" expn to_or_downto expn step_clause? eol IN sub_scope EX "next" id? ;
gosub_statement ::= on_expn? "gosub" expn ;
get_statement ::= "get" filenumber comma_recordnumber? "," reference ;
property_statement ::= access_modifier? "static"? "property" get_let_set id property_argument_list? as_type? eol IN sub_scope EX "end" "property" ;
program ::= class_file_header? declaration_or_statement* ;
select_case_statement ::= "select" "case" expn eol IN case_alternative* last_case_alternative? EX "end" "select" ;
eol ::= (tab_vbcomment? newline) | ":" ;
event_argument ::= byref_or_byval? id parens? as_type? ;
app_activate_statement ::= "appactivate" expn comma_expn? ;
--------------------dot::rascal-concrete.bgf--------------------
StatementOptional ::= Statement ";"? ;
Subgraph ::= ("subgraph" Id?)? "{" StatementList "}" ;
DOT ::= LAYOUT* Graph Id "{" StatementList "}" "\n"? ;
Port ::= ":" Id Id? ;
--------------------html::clark-basic.bgf--------------------
table.attlist ::= Common.attrib (summary::Text.datatype)? ;
param.attlist ::= id.attrib name::string() (value::string())? (valuetype::("data" | "ref" | "object"))? (type::ContentType.datatype)? ;
id.attrib ::= (id::ID.datatype)? ;
input.attlist ::= Common.attrib (type::InputType.class)? (name::string())? (value::string())? (checked::"checked")? (size::string())? (maxlength::Number.datatype)? (src::URI.datatype)? (accesskey::Character.datatype)? ;
profile.attlist ::= (profile::URI.datatype)? ;
CellHAlign.attrib ::= (align::("left" | "center" | "right"))? ;
Cell.attrib ::= Common.attrib (abbr::Text.datatype)? (axis::string())? (headers::IDREFS.datatype)? scope.attrib (rowspan::Number.datatype)? (colspan::Number.datatype)? CellHAlign.attrib CellVAlign.attrib ;
meta.attlist ::= I18n.attrib (http-equiv::NMTOKEN.datatype)? (name::NMTOKEN.datatype)? (content::string())? (scheme::string())? ;
option ::= option::(Common.attrib (selected::"selected")? (value::string())? string()) ;
form.attlist ::= Common.attrib action::URI.datatype (method::("get" | "post"))? (enctype::ContentType.datatype)? ;
pre.attlist ::= Common.attrib (xml:space::"preserve")? ;
img.attlist ::= Common.attrib src::URI.datatype alt::Text.datatype (longdesc::URI.datatype)? (height::Length.datatype)? (width::Length.datatype)? ;
a.attlist ::= Common.attrib (href::URI.datatype)? (charset::Charset.datatype)? (type::ContentType.datatype)? (hreflang::LanguageCode.datatype)? (rel::LinkTypes.datatype)? (rev::LinkTypes.datatype)? (accesskey::Character.datatype)? (tabindex::Number.datatype)? ;
object.attlist ::= Common.attrib (declare::"declare")? (classid::URI.datatype)? (codebase::URI.datatype)? (data::URI.datatype)? (type::ContentType.datatype)? (codetype::ContentType.datatype)? (archive::URIs.datatype)? (standby::Text.datatype)? (height::Length.datatype)? (width::Length.datatype)? (name::string())? (tabindex::Number.datatype)? ;
table ::= table::(table.attlist caption? tr+) ;
select.attlist ::= Common.attrib (name::string())? (size::Number.datatype)? (multiple::"multiple")? ;
XHTML.version.attrib ::= (version::FPI.datatype)? ;
textarea.attlist ::= Common.attrib (name::string())? rows::Number.datatype cols::Number.datatype (accesskey::Character.datatype)? string() ;
link.attlist ::= Common.attrib (charset::Charset.datatype)? (href::URI.datatype)? (hreflang::LanguageCode.datatype)? (type::ContentType.datatype)? (rel::LinkTypes.datatype)? (rev::LinkTypes.datatype)? (media::MediaDesc.datatype)? ;
head.content ::= base? ;
 head.content ::= link* ;
 head.content ::= meta* ;
 head.content ::= title ;
lang.attrib ::= (xml:lang::LanguageCode.datatype)? ;
CellVAlign.attrib ::= (valign::("top" | "middle" | "bottom"))? ;
label.attlist ::= Common.attrib (for::IDREF.datatype)? (accesskey::Character.datatype)? ;
scope.attrib ::= (scope::("row" | "col"))? ;
q.attlist ::= Common.attrib (cite::URI.datatype)? ;
blockquote.attlist ::= Common.attrib (cite::URI.datatype)? ;
title.attrib ::= (title::Text.datatype)? ;
class.attrib ::= (class::NMTOKENS.datatype)? ;
--------------------html::clark.bgf--------------------
optgroup.attlist ::= Common.attrib (disabled::"disabled")? label::Text.datatype ;
id.attrib ::= (id::ID.datatype)? ;
profile.attlist ::= (profile::URI.datatype)? ;
I18n.attrib ::= lang.attrib ;
 I18n.attrib ::= dir.attrib? ;
CellHAlign.attrib ::= (align::("left" | "center" | "right" | "justify" | "char"))? (char::Character.datatype)? (charoff::Length.datatype)? ;
 CellHAlign.attrib ::= (align::("left" | "center" | "right"))? ;
option ::= option::(Common.attrib (selected::"selected")? (value::string())? string()) ;
iframe.attlist ::= Core.attrib (longdesc::URI.datatype)? (src::URI.datatype)? (frameborder::("1" | "0"))? (width::Length.datatype)? (height::Length.datatype)? (marginwidth::Pixels.datatype)? (marginheight::Pixels.datatype)? (scrolling::("yes" | "no" | "auto"))? ;
 iframe.attlist ::= name.attlist ;
pre.attlist ::= (width::Length.datatype)? ;
 pre.attlist ::= Common.attrib (xml:space::"preserve")? ;
body.attlist ::= (onload::Script.datatype)? (onunload::Script.datatype)? ;
 body.attlist ::= (background::URI.datatype)? (bgcolor::Color.datatype)? (text::Color.datatype)? (link::Color.datatype)? (vlink::Color.datatype)? (alink::Color.datatype)? ;
 body.attlist ::= Common.attrib ;
head.content ::= base? ;
 head.content ::= isindex? ;
 head.content ::= link* ;
 head.content ::= meta* ;
 head.content ::= script* ;
 head.content ::= title ;
 head.content ::= style* ;
frame.attrib ::= name.attlist ;
 frame.attrib ::= (frame::("void" | "above" | "below" | "hsides" | "lhs" | "rhs" | "vsides" | "box" | "border"))? ;
XHTML.version.attrib ::= (version::FPI.datatype)? ;
ul.attlist ::= (type::string())? (compact::"compact")? ;
 ul.attlist ::= Common.attrib ;
blockquote.attlist ::= Common.attrib (cite::URI.datatype)? ;
param.attlist ::= id.attrib name::string() (value::string())? (valuetype::("data" | "ref" | "object"))? (type::ContentType.datatype)? ;
dir.attlist ::= Common.attrib (compact::"compact")? ;
legend.attlist ::= Common.attrib (accesskey::Character.datatype)? ;
 legend.attlist ::= (align::("top" | "bottom" | "left" | "right"))? ;
area.attlist ::= Common.attrib (href::URI.datatype)? shape.attrib coords.attrib (nohref::"nohref")? alt::Text.datatype (tabindex::Number.datatype)? (accesskey::Character.datatype)? ;
 area.attlist ::= (onblur::Script.datatype)? (onfocus::Script.datatype)? ;
 area.attlist ::= target.attrib ;
name.attlist ::= (name::string())? ;
hr.attlist ::= (align::("left" | "center" | "right"))? (noshade::"noshade")? (size::Pixels.datatype)? (width::Pixels.datatype)? ;
 hr.attlist ::= Common.attrib ;
dl.attlist ::= (compact::"compact")? ;
 dl.attlist ::= Common.attrib ;
Core.attrib ::= id.attrib class.attrib title.attrib ;
 Core.attrib ::= (style::string())? ;
meta.attlist ::= I18n.attrib (http-equiv::NMTOKEN.datatype)? (name::NMTOKEN.datatype)? (content::string())? (scheme::string())? ;
frameset ::= frameset::(frameset.attlist (frameset | frame)+ noframes?) ;
 frameset ::= body ;
align.attrib ::= (align::("left" | "all" | "right" | "none"))? ;
col.attlist ::= Common.attrib (span::Number.datatype)? (width::MultiLength.datatype)? CellHAlign.attrib CellVAlign.attrib ;
colgroup.attlist ::= Common.attrib (span::Number.datatype)? (width::MultiLength.datatype)? CellHAlign.attrib CellVAlign.attrib ;
tr.attlist ::= (bgcolor::Color.datatype)? ;
 tr.attlist ::= Common.attrib CellHAlign.attrib CellVAlign.attrib ;
li.attlist ::= (type::string())? (value::string())? ;
 li.attlist ::= Common.attrib ;
table ::= table::(table.attlist caption? (col*) | (colgroup*) (thead? tfoot? tbody+) | (tr+)) ;
 table ::= table::(table.attlist caption? tr+) ;
select.attlist ::= (onblur::Script.datatype)? (onchange::Script.datatype)? (onfocus::Script.datatype)? ;
 select.attlist ::= (disabled::"disabled")? (tabindex::Number.datatype)? ;
 select.attlist ::= Common.attrib (name::string())? (size::Number.datatype)? (multiple::"multiple")? ;
link.attlist ::= Common.attrib (charset::Charset.datatype)? (href::URI.datatype)? (hreflang::LanguageCode.datatype)? (type::ContentType.datatype)? (rel::LinkTypes.datatype)? (rev::LinkTypes.datatype)? (media::MediaDesc.datatype)? ;
lang.attrib ::= (xml:lang::LanguageCode.datatype)? ;
 lang.attrib ::= (lang::LanguageCode.datatype)? ;
target.attrib ::= (target::string())? ;
option.attlist ::= (disabled::"disabled")? (label::Text.datatype)? ;
usemap.attlist ::= (usemap::IDREF.datatype)? ;
label.attlist ::= (onblur::Script.datatype)? (onfocus::Script.datatype)? ;
 label.attlist ::= Common.attrib (for::IDREF.datatype)? (accesskey::Character.datatype)? ;
q.attlist ::= Common.attrib (cite::URI.datatype)? ;
frame.attlist ::= Core.attrib (longdesc::URI.datatype)? (src::URI.datatype)? (frameborder::("1" | "0"))? (marginwidth::Pixels.datatype)? (marginheight::Pixels.datatype)? (noresize::"noresize")? (scrolling::("yes" | "no" | "auto"))? ;
isindex.attlist ::= Core.attrib I18n.attrib (prompt::Text.datatype)? ;
shape.attrib ::= (shape::("rect" | "circle" | "poly" | "default"))? ;
Cell.attrib ::= (nowrap::"nowrap")? (bgcolor::Color.datatype)? (width::Pixels.datatype)? (height::Pixels.datatype)? ;
 Cell.attrib ::= Common.attrib (abbr::Text.datatype)? (axis::string())? (headers::IDREFS.datatype)? scope.attrib (rowspan::Number.datatype)? (colspan::Number.datatype)? CellHAlign.attrib CellVAlign.attrib ;
a.attlist ::= shape.attrib coords.attrib ;
 a.attlist ::= (onblur::Script.datatype)? (onfocus::Script.datatype)? ;
 a.attlist ::= Common.attrib (href::URI.datatype)? (charset::Charset.datatype)? (type::ContentType.datatype)? (hreflang::LanguageCode.datatype)? (rel::LinkTypes.datatype)? (rev::LinkTypes.datatype)? (accesskey::Character.datatype)? (tabindex::Number.datatype)? ;
 a.attlist ::= name.attlist ;
 a.attlist ::= target.attrib ;
menu.attlist ::= Common.attrib (compact::"compact")? ;
ol.attlist ::= (type::string())? (compact::"compact")? (start::string())? ;
 ol.attlist ::= Common.attrib ;
applet.attlist ::= Core.attrib alt::Text.datatype (archive::string())? (code::string())? (codebase::URI.datatype)? (object::string())? height::Length.datatype width::Length.datatype ;
 applet.attlist ::= (align::("top" | "middle" | "bottom" | "left" | "right"))? (hspace::Pixels.datatype)? (vspace::Pixels.datatype)? ;
 applet.attlist ::= name.attlist ;
Font.attrib ::= (size::string())? (color::Color.datatype)? (face::string())? ;
frameset.attlist ::= Core.attrib (cols::MultiLength.datatype)? (rows::MultiLength.datatype)? ;
scope.attrib ::= (scope::("row" | "col" | "rowgroup" | "colgroup"))? ;
 scope.attrib ::= (scope::("row" | "col"))? ;
rules.attrib ::= (rules::("none" | "groups" | "rows" | "cols" | "all"))? ;
br.attlist ::= (clear::("left" | "all" | "right" | "none"))? ;
 br.attlist ::= Core.attrib ;
title.attrib ::= (title::Text.datatype)? ;
table.attlist ::= align.attrib (bgcolor::Color.datatype)? ;
 table.attlist ::= (width::Length.datatype)? (border::Pixels.datatype)? frame.attrib rules.attrib (cellspacing::Length.datatype)? (cellpadding::Length.datatype)? ;
 table.attlist ::= Common.attrib (summary::Text.datatype)? ;
Events.attrib ::= (onclick::Script.datatype)? (ondblclick::Script.datatype)? (onmousedown::Script.datatype)? (onmouseup::Script.datatype)? (onmouseover::Script.datatype)? (onmousemove::Script.datatype)? (onmouseout::Script.datatype)? (onkeypress::Script.datatype)? (onkeydown::Script.datatype)? (onkeyup::Script.datatype)? ;
script.attlist ::= (language::ContentType.datatype)? ;
 script.attlist ::= (charset::Charset.datatype)? type::ContentType.datatype (src::URI.datatype)? (defer::"defer")? (xml:space::"preserve")? ;
input.attlist ::= (onblur::Script.datatype)? (onchange::Script.datatype)? (onfocus::Script.datatype)? (onselect::Script.datatype)? ;
 input.attlist ::= (disabled::"disabled")? (readonly::"readonly")? (alt::string())? (tabindex::Number.datatype)? (accept::ContentTypes.datatype)? ;
 input.attlist ::= Common.attrib (type::InputType.class)? (name::string())? (value::string())? (checked::"checked")? (size::string())? (maxlength::Number.datatype)? (src::URI.datatype)? (accesskey::Character.datatype)? ;
 input.attlist ::= align.attrib ;
coords.attrib ::= (coords::string())? ;
form.attlist ::= (onreset::Script.datatype)? (onsubmit::Script.datatype)? ;
 form.attlist ::= (accept-charset::Charsets.datatype)? (accept::ContentTypes.datatype)? ;
 form.attlist ::= Common.attrib action::URI.datatype (method::("get" | "post"))? (enctype::ContentType.datatype)? ;
 form.attlist ::= name.attlist ;
 form.attlist ::= target.attrib ;
img.attlist ::= usemap.attlist ;
 img.attlist ::= Common.attrib src::URI.datatype alt::Text.datatype (longdesc::URI.datatype)? (height::Length.datatype)? (width::Length.datatype)? ;
 img.attlist ::= (align::("top" | "middle" | "bottom" | "left" | "right"))? (border::Pixels.datatype)? (hspace::Pixels.datatype)? (vspace::Pixels.datatype)? ;
 img.attlist ::= name.attlist ;
 img.attlist ::= (ismap::"ismap")? ;
object.attlist ::= usemap.attlist ;
 object.attlist ::= (align::("top" | "middle" | "bottom" | "left" | "right"))? (border::Pixels.datatype)? (hspace::Pixels.datatype)? (vspace::Pixels.datatype)? ;
 object.attlist ::= Common.attrib (declare::"declare")? (classid::URI.datatype)? (codebase::URI.datatype)? (data::URI.datatype)? (type::ContentType.datatype)? (codetype::ContentType.datatype)? (archive::URIs.datatype)? (standby::Text.datatype)? (height::Length.datatype)? (width::Length.datatype)? (name::string())? (tabindex::Number.datatype)? ;
Edit.attrib ::= (cite::URI.datatype)? (datetime::Datetime.datatype)? ;
textarea.attlist ::= (onblur::Script.datatype)? (onchange::Script.datatype)? (onfocus::Script.datatype)? (onselect::Script.datatype)? ;
 textarea.attlist ::= (disabled::"disabled")? (readonly::"readonly")? (tabindex::Number.datatype)? ;
 textarea.attlist ::= Common.attrib (name::string())? rows::Number.datatype cols::Number.datatype (accesskey::Character.datatype)? string() ;
CellVAlign.attrib ::= (valign::("top" | "middle" | "bottom" | "baseline"))? ;
 CellVAlign.attrib ::= (valign::("top" | "middle" | "bottom"))? ;
button.attlist ::= (onblur::Script.datatype)? (onfocus::Script.datatype)? ;
 button.attlist ::= Common.attrib (name::string())? (value::string())? (type::("button" | "submit" | "reset"))? (disabled::"disabled")? (tabindex::Number.datatype)? (accesskey::Character.datatype)? ;
style.attlist ::= title.attrib I18n.attrib type::ContentType.datatype (media::MediaDesc.datatype)? (xml:space::"preserve")? ;
class.attrib ::= (class::NMTOKENS.datatype)? ;
--------------------html::cordy.bgf--------------------
attribute ::= SP attribute_id equals_attribute_value? ;
singleton_tag ::= ("<" singleton_id attributes ">" singleton_tag_end? NL) | ("<" id attributes "/>" NL) ;
--------------------html::clark-strict.bgf--------------------
optgroup.attlist ::= Common.attrib (disabled::"disabled")? label::Text.datatype ;
id.attrib ::= (id::ID.datatype)? ;
profile.attlist ::= (profile::URI.datatype)? ;
I18n.attrib ::= lang.attrib ;
 I18n.attrib ::= dir.attrib? ;
CellHAlign.attrib ::= (align::("left" | "center" | "right" | "justify" | "char"))? (char::Character.datatype)? (charoff::Length.datatype)? ;
 CellHAlign.attrib ::= (align::("left" | "center" | "right"))? ;
shape.attrib ::= (shape::("rect" | "circle" | "poly" | "default"))? ;
Cell.attrib ::= Common.attrib (abbr::Text.datatype)? (axis::string())? (headers::IDREFS.datatype)? scope.attrib (rowspan::Number.datatype)? (colspan::Number.datatype)? CellHAlign.attrib CellVAlign.attrib ;
option ::= option::(Common.attrib (selected::"selected")? (value::string())? string()) ;
iframe.attlist ::= Core.attrib (longdesc::URI.datatype)? (src::URI.datatype)? (frameborder::("1" | "0"))? (width::Length.datatype)? (height::Length.datatype)? (marginwidth::Pixels.datatype)? (marginheight::Pixels.datatype)? (scrolling::("yes" | "no" | "auto"))? ;
 iframe.attlist ::= name.attlist ;
pre.attlist ::= Common.attrib (xml:space::"preserve")? ;
body.attlist ::= (onload::Script.datatype)? (onunload::Script.datatype)? ;
 body.attlist ::= Common.attrib ;
a.attlist ::= shape.attrib coords.attrib ;
 a.attlist ::= (onblur::Script.datatype)? (onfocus::Script.datatype)? ;
 a.attlist ::= Common.attrib (href::URI.datatype)? (charset::Charset.datatype)? (type::ContentType.datatype)? (hreflang::LanguageCode.datatype)? (rel::LinkTypes.datatype)? (rev::LinkTypes.datatype)? (accesskey::Character.datatype)? (tabindex::Number.datatype)? ;
 a.attlist ::= name.attlist ;
 a.attlist ::= target.attrib ;
XHTML.version.attrib ::= (version::FPI.datatype)? ;
frame.attrib ::= name.attlist ;
 frame.attrib ::= (frame::("void" | "above" | "below" | "hsides" | "lhs" | "rhs" | "vsides" | "box" | "border"))? ;
head.content ::= base? ;
 head.content ::= link* ;
 head.content ::= meta* ;
 head.content ::= script* ;
 head.content ::= title ;
 head.content ::= style* ;
applet.attlist ::= Core.attrib alt::Text.datatype (archive::string())? (code::string())? (codebase::URI.datatype)? (object::string())? height::Length.datatype width::Length.datatype ;
 applet.attlist ::= name.attlist ;
scope.attrib ::= (scope::("row" | "col" | "rowgroup" | "colgroup"))? ;
 scope.attrib ::= (scope::("row" | "col"))? ;
rules.attrib ::= (rules::("none" | "groups" | "rows" | "cols" | "all"))? ;
blockquote.attlist ::= Common.attrib (cite::URI.datatype)? ;
title.attrib ::= (title::Text.datatype)? ;
table.attlist ::= (width::Length.datatype)? (border::Pixels.datatype)? frame.attrib rules.attrib (cellspacing::Length.datatype)? (cellpadding::Length.datatype)? ;
 table.attlist ::= Common.attrib (summary::Text.datatype)? ;
Events.attrib ::= (onclick::Script.datatype)? (ondblclick::Script.datatype)? (onmousedown::Script.datatype)? (onmouseup::Script.datatype)? (onmouseover::Script.datatype)? (onmousemove::Script.datatype)? (onmouseout::Script.datatype)? (onkeypress::Script.datatype)? (onkeydown::Script.datatype)? (onkeyup::Script.datatype)? ;
param.attlist ::= id.attrib name::string() (value::string())? (valuetype::("data" | "ref" | "object"))? (type::ContentType.datatype)? ;
legend.attlist ::= Common.attrib (accesskey::Character.datatype)? ;
area.attlist ::= Common.attrib (href::URI.datatype)? shape.attrib coords.attrib (nohref::"nohref")? alt::Text.datatype (tabindex::Number.datatype)? (accesskey::Character.datatype)? ;
 area.attlist ::= (onblur::Script.datatype)? (onfocus::Script.datatype)? ;
 area.attlist ::= target.attrib ;
script.attlist ::= (charset::Charset.datatype)? type::ContentType.datatype (src::URI.datatype)? (defer::"defer")? (xml:space::"preserve")? ;
name.attlist ::= (name::string())? ;
input.attlist ::= (onblur::Script.datatype)? (onchange::Script.datatype)? (onfocus::Script.datatype)? (onselect::Script.datatype)? ;
 input.attlist ::= (disabled::"disabled")? (readonly::"readonly")? (alt::string())? (tabindex::Number.datatype)? (accept::ContentTypes.datatype)? ;
 input.attlist ::= Common.attrib (type::InputType.class)? (name::string())? (value::string())? (checked::"checked")? (size::string())? (maxlength::Number.datatype)? (src::URI.datatype)? (accesskey::Character.datatype)? ;
coords.attrib ::= (coords::string())? ;
Core.attrib ::= id.attrib class.attrib title.attrib ;
 Core.attrib ::= (style::string())? ;
meta.attlist ::= I18n.attrib (http-equiv::NMTOKEN.datatype)? (name::NMTOKEN.datatype)? (content::string())? (scheme::string())? ;
form.attlist ::= (onreset::Script.datatype)? (onsubmit::Script.datatype)? ;
 form.attlist ::= (accept-charset::Charsets.datatype)? (accept::ContentTypes.datatype)? ;
 form.attlist ::= Common.attrib action::URI.datatype (method::("get" | "post"))? (enctype::ContentType.datatype)? ;
 form.attlist ::= name.attlist ;
 form.attlist ::= target.attrib ;
img.attlist ::= usemap.attlist ;
 img.attlist ::= Common.attrib src::URI.datatype alt::Text.datatype (longdesc::URI.datatype)? (height::Length.datatype)? (width::Length.datatype)? ;
 img.attlist ::= name.attlist ;
 img.attlist ::= (ismap::"ismap")? ;
col.attlist ::= Common.attrib (span::Number.datatype)? (width::MultiLength.datatype)? CellHAlign.attrib CellVAlign.attrib ;
colgroup.attlist ::= Common.attrib (span::Number.datatype)? (width::MultiLength.datatype)? CellHAlign.attrib CellVAlign.attrib ;
object.attlist ::= usemap.attlist ;
 object.attlist ::= Common.attrib (declare::"declare")? (classid::URI.datatype)? (codebase::URI.datatype)? (data::URI.datatype)? (type::ContentType.datatype)? (codetype::ContentType.datatype)? (archive::URIs.datatype)? (standby::Text.datatype)? (height::Length.datatype)? (width::Length.datatype)? (name::string())? (tabindex::Number.datatype)? ;
table ::= table::(table.attlist caption? (col*) | (colgroup*) (thead? tfoot? tbody+) | (tr+)) ;
 table ::= table::(table.attlist caption? tr+) ;
Edit.attrib ::= (cite::URI.datatype)? (datetime::Datetime.datatype)? ;
select.attlist ::= (onblur::Script.datatype)? (onchange::Script.datatype)? (onfocus::Script.datatype)? ;
 select.attlist ::= (disabled::"disabled")? (tabindex::Number.datatype)? ;
 select.attlist ::= Common.attrib (name::string())? (size::Number.datatype)? (multiple::"multiple")? ;
textarea.attlist ::= (onblur::Script.datatype)? (onchange::Script.datatype)? (onfocus::Script.datatype)? (onselect::Script.datatype)? ;
 textarea.attlist ::= (disabled::"disabled")? (readonly::"readonly")? (tabindex::Number.datatype)? ;
 textarea.attlist ::= Common.attrib (name::string())? rows::Number.datatype cols::Number.datatype (accesskey::Character.datatype)? string() ;
link.attlist ::= Common.attrib (charset::Charset.datatype)? (href::URI.datatype)? (hreflang::LanguageCode.datatype)? (type::ContentType.datatype)? (rel::LinkTypes.datatype)? (rev::LinkTypes.datatype)? (media::MediaDesc.datatype)? ;
lang.attrib ::= (xml:lang::LanguageCode.datatype)? ;
target.attrib ::= (target::string())? ;
CellVAlign.attrib ::= (valign::("top" | "middle" | "bottom" | "baseline"))? ;
 CellVAlign.attrib ::= (valign::("top" | "middle" | "bottom"))? ;
option.attlist ::= (disabled::"disabled")? (label::Text.datatype)? ;
usemap.attlist ::= (usemap::IDREF.datatype)? ;
label.attlist ::= (onblur::Script.datatype)? (onfocus::Script.datatype)? ;
 label.attlist ::= Common.attrib (for::IDREF.datatype)? (accesskey::Character.datatype)? ;
button.attlist ::= (onblur::Script.datatype)? (onfocus::Script.datatype)? ;
 button.attlist ::= Common.attrib (name::string())? (value::string())? (type::("button" | "submit" | "reset"))? (disabled::"disabled")? (tabindex::Number.datatype)? (accesskey::Character.datatype)? ;
q.attlist ::= Common.attrib (cite::URI.datatype)? ;
style.attlist ::= title.attrib I18n.attrib type::ContentType.datatype (media::MediaDesc.datatype)? (xml:space::"preserve")? ;
class.attrib ::= (class::NMTOKENS.datatype)? ;
--------------------javascript::synytskyy-cordy.bgf--------------------
js_variable_description ::= id js_variable_initialization? ;
js_declaration_or_statement ::= (js_declaration NL) | (js_label? js_statement NL) | (comment NL) ;
js_continue_statement ::= "continue" id? ;
js_break_statement ::= "break" id? ;
js_statement ::= (js_compound_statement ";"?) | (js_expression_statement ";"?) | (js_if_statement ";"?) | (js_for_statement ";"?) | (js_while_statement ";"?) | (js_break_statement ";"?) | (js_continue_statement ";"?) | (js_return_statement ";"?) | (js_with_statement ";"?) | (js_switch_statement ";"?) | (js_do_statement ";"?) | (js_try_catch_statement ";"?) | (js_throw_statement ";"?) | (js_debugger_statement ";"?) | js_empty_statement ;
js_return_statement ::= "return" js_expn? ;
js_lefthand_side_expn ::= "new"? js_member_expn ;
js_object_literal ::= "{" {js_property_assignment ","}* ","? "}" ;
js_declaration ::= (js_variable_declaration ";"?) | (js_constant_declaration ";"?) | (js_function_declaration ";"?) ;
js_for_statement ::= ("for" "(" {js_declaration_or_statement_no_nl ","}* ";" js_expn? ";" js_expn? ")" js_statement) | ("for" "each"? "(" js_declaration_or_statement_no_nl "in" js_expn ")" js_statement) ;
js_if_statement ::= "if" "(" js_expn ")" js_declaration_or_statement js_else_clause? ;
js_function_expn ::= "function" id? "(" {js_formal_parameter ","}* ")" NL "{" NL IN js_subscope EX "}" ;
js_try_catch_statement ::= "try" js_compound_statement js_catch_clause? js_finally_clause? ;
js_postfix_expn ::= js_lefthand_side_expn js_postfix_op? ;
js_array_element ::= js_assignment_expn? ;
js_conditional_expn ::= js_logical_or_expn js_conditional_clause? ;
--------------------occam::mu-mitchell.bgf--------------------
iteration-statement ::= "while" "(" condition ")" statement "do" statement "while" "(" expression ")" ";" "for" "(" for-init-statement condition? ";" expression? ")" statement ;
new-declarator ::= ptr-operator new-declarator? direct-new-declarator ;
type-specifier-seq ::= type-specifier type-specifier-seq? ;
abstract-declarator ::= ptr-operator abstract-declarator? direct-abstract-declarator ;
linkage-specification ::= "extern" string-literal "{" declaration-seq? "}" "extern" string-literal declaration ;
elaborated-type-specifier ::= class-key "::"? nested-name-specifier? identifier "enum" "::"? nested-name-specifier? identifier "typename" "::"? nested-name-specifier identifier "typename" "::"? nested-name-specifier "template"? template-id ;
initializer-clause ::= assignment-expression "{" initializer-list ","? "}" "{" "}" ;
expression-statement ::= expression? ";" ;
delete-expression ::= "::"? "delete" cast-expression "::"? "delete" "[" "]" cast-expression ;
declarator-id ::= id-expression "::"? nested-name-specifier? type-name ;
new-initializer ::= "(" expression-list? ")" ;
enum-specifier ::= "enum" identifier? "{" enumerator-list? "}" ;
using-declaration ::= "using" "typename"? "::"? nested-name-specifier unqualified-id ";" "using" "::" unqualified-id ";" ;
postfix-expression ::= primary-expression postfix-expression "[" expression "]" postfix-expression "(" expression-list? ")" simple-type-specifier "(" expression-list? ")" "typename" "::"? nested-name-specifier identifier "(" expression-list? ")" "typename" "::"? nested-name-specifier "template"? template-id "(" expression-list? ")" postfix-expression "." "template"? id-expression postfix-expression "->" "template"? id-expression postfix-expression "." pseudo-destructor-name postfix-expression "->" pseudo-destructor-name postfix-expression "++" postfix-expression "--" "dynamic_cast" "<" type-id ">" "(" expression ")" "static_cast" "<" type-id ">" "(" expression ")" "reinterpret_cast" "<" type-id ">" "(" expression ")" "const_cast" "<" type-id ">" "(" expression ")" "typeid" "(" expression ")" "typeid" "(" type-id ")" ;
decl-specifier-seq ::= decl-specifier-seq? decl-specifier ;
qualified-id ::= "::"? nested-name-specifier "template"? unqualified-id "::" identifier "::" operator-function-id "::" template-id ;
mem-initializer ::= mem-initializer-id "(" expression-list? ")" ;
class-specifier ::= class-head "{" member-specification? "}" ;
function-definition ::= decl-specifier-seq? declarator ctor-initializer? function-body decl-specifier-seq? declarator function-try-block ;
template-declaration ::= "export"? "template" "<" template-parameter-list ">" declaration ;
simple-type-specifier ::= "::"? nested-name-specifier? type-name "::"? nested-name-specifier "template" template-id "char" "wchar_t" "bool" "short" "int" "long" "signed" "unsigned" "float" "double" "void" ;
new-expression ::= "::"? "new" new-placement? new-type-id new-initializer? "::"? "new" new-placement? "(" type-id ")" new-initializer? ;
ptr-operator ::= "*" cv-qualifier-seq? "&" "::"? nested-name-specifier "*" cv-qualifier-seq? ;
cv-qualifier-seq ::= cv-qualifier cv-qualifier-seq? ;
new-type-id ::= type-specifier-seq new-declarator? ;
translation-unit ::= declaration-seq? ;
throw-expression ::= "throw" assignment-expression? ;
simple-declaration ::= decl-specifier-seq? init-declarator-list? ";" ;
mem-initializer-id ::= "::"? nested-name-specifier? class-name identifier ;
handler-seq ::= handler handler-seq? ;
qualified-namespace-specifier ::= "::"? nested-name-specifier? namespace-name ;
direct-abstract-declarator ::= direct-abstract-declarator? "(" parameter-declaration-clause ")" cv-qualifier-seq? exception-specification? direct-abstract-declarator? "[" constant-expression? "]" "(" abstract-declarator ")" ;
conversion-type-id ::= type-specifier-seq conversion-declarator? ;
type-parameter ::= "class" identifier? "class" identifier? "=" type-id "typename" identifier? "typename" identifier? "=" type-id "template" "<" template-parameter-list ">" "class" identifier? "template" "<" template-parameter-list ">" "class" identifier? "=" id-expression ;
parameter-declaration ::= decl-specifier-seq declarator decl-specifier-seq declarator "=" assignment-expression decl-specifier-seq abstract-declarator? decl-specifier-seq abstract-declarator? "=" assignment-expression ;
class-head ::= class-key identifier? base-clause? class-key nested-name-specifier identifier base-clause? class-key nested-name-specifier? template-id base-clause? ;
direct-declarator ::= declarator-id direct-declarator "(" parameter-declaration-clause ")" cv-qualifier-seq? exception-specification? direct-declarator "[" constant-expression? "]" "(" declarator ")" ;
namespace-body ::= declaration-seq? ;
nested-name-specifier ::= class-or-namespace-name "::" nested-name-specifier? class-or-namespace-name "::" "template" nested-name-specifier ;
member-specification ::= member-declaration member-specification? access-specifier ":" member-specification? ;
pseudo-destructor-name ::= "::"? nested-name-specifier? type-name "::" "~" type-name "::"? nested-name-specifier "template" template-id "::" "~" type-name "::"? nested-name-specifier? "~" type-name ;
jump-statement ::= "break" ";" "continue" ";" "return" expression? ";" "goto" identifier ";" ;
template-id ::= template-name "<" template-argument-list? ">" ;
type-id ::= type-specifier-seq abstract-declarator? ;
init-declarator ::= declarator initializer? ;
compound-statement ::= "{" statement-seq? "}" ;
conversion-declarator ::= ptr-operator conversion-declarator? ;
member-declaration ::= decl-specifier-seq? member-declarator-list? ";" function-definition ";"? "::"? nested-name-specifier "template"? unqualified-id ";" using-declaration template-declaration ;
function-try-block ::= "try" ctor-initializer? function-body handler-seq ;
parameter-declaration-clause ::= parameter-declaration-list? "..."? parameter-declaration-list "," "..." ;
using-directive ::= "using" "namespace" "::"? nested-name-specifier? namespace-name ";" ;
exception-specification ::= "throw" "(" type-id-list? ")" ;
member-declarator ::= declarator pure-specifier? declarator constant-initializer? identifier? ":" constant-expression ;
base-specifier ::= "::"? nested-name-specifier? class-name "virtual" access-specifier? "::"? nested-name-specifier? class-name access-specifier "virtual"? "::"? nested-name-specifier? class-name ;
--------------------odf::opendoc-1.0-manifest.bgf--------------------
file-entry-attlist ::= manifest:full-path::string() ;
 file-entry-attlist ::= (manifest:size::integer())? ;
 file-entry-attlist ::= manifest:media-type::string() ;
file-entry ::= manifest:file-entry::(file-entry-attlist encryption-data?) ;
--------------------odf::opendoc-1.0-strict.bgf--------------------
style-footnote-sep-attlist ::= (style:width::length)? (style:rel-width::percent)? (style:color::color)? (style:line-style::lineStyle)? (style:adjustment::("left" | "center" | "right"))? (style:distance-before-sep::length)? (style:distance-after-sep::length)? ;
style-font-face ::= style:font-face::(style-font-face-attlist svg-font-face-src? svg-definition-src?) ;
svg-linearGradient ::= svg:linearGradient::(common-svg-gradient-attlist (svg:x1::(coordinate | percent))? (svg:y1::(coordinate | percent))? (svg:x2::(coordinate | percent))? (svg:y2::(coordinate | percent))? svg-stop*) ;
style-page-layout-attlist ::= style:name::styleName ;
 style-page-layout-attlist ::= (style:page-usage::("all" | "left" | "right" | "mirrored"))? ;
number-currency-style ::= number:currency-style::(common-data-style-attlist common-auto-reorder-attlist style-text-properties? number-text? ((number-and-text currency-symbol-and-text?) | (currency-symbol-and-text number-and-text?))? style-map*) ;
number-fraction-attlist ::= (number:min-numerator-digits::integer)? ;
 number-fraction-attlist ::= (number:min-denominator-digits::integer)? ;
 number-fraction-attlist ::= (number:denominator-value::integer)? ;
text-notes-configuration-content ::= text-note-class ;
 text-notes-configuration-content ::= (text:citation-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:citation-body-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:default-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:master-page-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:start-value::nonNegativeInteger)? ;
 text-notes-configuration-content ::= common-num-format-prefix-suffix-attlist common-num-format-attlist? ;
 text-notes-configuration-content ::= (text:start-numbering-at::("document" | "chapter" | "page"))? ;
 text-notes-configuration-content ::= (text:footnotes-position::("text" | "page" | "section" | "document"))? ;
 text-notes-configuration-content ::= (text:note-continuation-notice-forward::string())? ;
 text-notes-configuration-content ::= (text:note-continuation-notice-backward::string())? ;
style-column-sep-attlist ::= (style:style::("none" | "solid" | "dotted" | "dashed" | "dot-dashed"))? ;
 style-column-sep-attlist ::= style:width::length ;
 style-column-sep-attlist ::= (style:height::percent)? ;
 style-column-sep-attlist ::= (style:vertical-align::("top" | "middle" | "bottom"))? ;
 style-column-sep-attlist ::= (style:color::color)? ;
draw-applet-attlist ::= (draw:code::string())? ;
 draw-applet-attlist ::= (draw:object::string())? ;
 draw-applet-attlist ::= (draw:archive::string())? ;
 draw-applet-attlist ::= (draw:may-script::boolean)? ;
text-list-item-content ::= text-number? (text-p | text-h | text-list)* ;
presentation-hide-shape ::= presentation:hide-shape::(common-presentation-effect-attlist presentation-sound?) ;
common-title-attlist ::= (form:title::string())? ;
common-form-control-attlist ::= (form:name::string)? ;
 common-form-control-attlist ::= (form:control-implementation::namespacedToken)? ;
common-svg-font-face-xlink-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? ;
table-data-pilot-table-attlist ::= table:name::string ;
 table-data-pilot-table-attlist ::= (table:application-data::string)? ;
 table-data-pilot-table-attlist ::= (table:grand-total::("none" | "row" | "column" | "both"))? ;
 table-data-pilot-table-attlist ::= (table:ignore-empty-rows::boolean)? ;
 table-data-pilot-table-attlist ::= (table:identify-categories::boolean)? ;
 table-data-pilot-table-attlist ::= table:target-range-address::cellRangeAddress ;
 table-data-pilot-table-attlist ::= (table:buttons::cellRangeAddressList)? ;
 table-data-pilot-table-attlist ::= (table:show-filter-button::boolean)? ;
 table-data-pilot-table-attlist ::= (table:drill-down-on-double-click::boolean)? ;
presentation-hide-text ::= presentation:hide-text::(common-presentation-effect-attlist presentation-sound?) ;
draw-area-polygon ::= draw:area-polygon::(common-draw-area-attlist svg:x::coordinate svg:y::coordinate svg:width::length svg:height::length common-draw-viewbox-attlist common-draw-points-attlist svg-desc? office-event-listeners?) ;
table-deletion-attlist ::= table:type::("row" | "column" | "table") ;
 table-deletion-attlist ::= table:position::integer ;
 table-deletion-attlist ::= (table:table::integer)? ;
 table-deletion-attlist ::= (table:multi-deletion-spanned::integer)? ;
office-forms ::= (office:forms::(office-forms-attlist (form-form | xforms-model)*))? ;
common-restart-timing-attlist ::= (smil:restart::("never" | "always" | "whenNotActive" | "default"))? ;
common-maxlength-attlist ::= (form:max-length::nonNegativeInteger)? ;
draw-object-attlist ::= (draw:notify-on-update-of-ranges::string)? ;
common-rotation-angle-attlist ::= (style:rotation-angle::nonNegativeInteger)? ;
draw-area-rectangle ::= draw:area-rectangle::(common-draw-area-attlist svg:x::coordinate svg:y::coordinate svg:width::length svg:height::length svg-desc? office-event-listeners?) ;
number-date-style ::= number:date-style::(common-data-style-attlist common-auto-reorder-attlist common-format-source-attlist style-text-properties? number-text? (any-date number-text?)+ style-map*) ;
common-readonly-attlist ::= (form:readonly::boolean)? ;
draw-marker-attlist ::= draw:name::styleName ;
 draw-marker-attlist ::= (draw:display-name::string)? ;
draw-measure ::= draw:measure::(draw-measure-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
table-table-cell-attlist-extra ::= (table:number-columns-spanned::positiveInteger)? (table:number-rows-spanned::positiveInteger)? ;
 table-table-cell-attlist-extra ::= (table:number-matrix-columns-spanned::positiveInteger)? (table:number-matrix-rows-spanned::positiveInteger)? ;
common-text-spreadsheet-shape-attlist ::= (table:end-cell-address::cellAddress)? (table:end-x::coordinate)? (table:end-y::coordinate)? ;
 common-text-spreadsheet-shape-attlist ::= (table:table-background::boolean)? ;
 common-text-spreadsheet-shape-attlist ::= common-text-anchor-attlist ;
text-sequence-ref-content ::= (text:reference-format::("page" | "chapter" | "direction" | "text" | "category-and-value" | "caption" | "value"))? ;
common-draw-text-style-name-attlist ::= (draw:text-style-name::styleNameRef)? ;
style-graphic-properties-elements ::= Îµ ;
 style-graphic-properties-elements ::= text-list-style? ;
 style-graphic-properties-elements ::= style-background-image ;
 style-graphic-properties-elements ::= style-columns ;
office-forms-attlist ::= (form:automatic-focus::boolean)? ;
 office-forms-attlist ::= (form:apply-design-mode::boolean)? ;
common-style-header-footer-attlist ::= (style:display::boolean)? ;
draw-plugin-attlist ::= (draw:mime-type::string())? ;
table-movement ::= table:movement::(common-table-change-attlist table-source-range-address table-target-range-address office-change-info table-dependencies? table-deletions?) ;
svg-stop ::= svg:stop::(svg:offset::(double | percent) (svg:stop-color::color)? (svg:stop-opacity::double)?) ;
table-validation-attlist ::= table:name::string ;
 table-validation-attlist ::= (table:condition::string)? ;
 table-validation-attlist ::= (table:base-cell-address::cellAddress)? ;
 table-validation-attlist ::= (table:allow-empty-cell::boolean)? ;
 table-validation-attlist ::= (table:display-list::("none" | "unsorted" | "sort-ascending"))? ;
draw-page-thumbnail-attlist ::= (draw:page-number::positiveInteger)? ;
text-tab-attr ::= (text:tab-ref::nonNegativeInteger)? ;
style-tab-stop-attlist ::= style:position::nonNegativeLength ;
 style-tab-stop-attlist ::= ((style:type::("left" | "center" | "right"))?) | (style:type::"char" style-tab-stop-char-attlist) ;
 style-tab-stop-attlist ::= (style:leader-type::lineType)? ;
 style-tab-stop-attlist ::= (style:leader-style::lineStyle)? ;
 style-tab-stop-attlist ::= (style:leader-width::lineWidth)? ;
 style-tab-stop-attlist ::= (style:leader-color::("font-color" | color))? ;
 style-tab-stop-attlist ::= (style:leader-text::string)? ;
 style-tab-stop-attlist ::= (style:leader-text-style::styleNameRef)? ;
text-h ::= text:h::(heading-attrs paragraph-attrs text-number? paragraph-content*) ;
text-style-name ::= (form:text-style-name::styleNameRef)? ;
table-table-column-attlist ::= (table:number-columns-repeated::positiveInteger)? ;
 table-table-column-attlist ::= (table:style-name::styleNameRef)? ;
 table-table-column-attlist ::= (table:visibility::table-visibility-value)? ;
 table-table-column-attlist ::= (table:default-cell-style-name::styleNameRef)? ;
text-table-of-content-source ::= text:table-of-content-source::(text-table-of-content-source-attlist text-index-title-template? text-table-of-content-entry-template* text-index-source-styles*) ;
table-source-cell-range ::= table:source-cell-range::(table-source-cell-range-attlist table-filter?) ;
text-index-entry-tab-stop-attrs ::= (style:leader-char::character)? ;
 text-index-entry-tab-stop-attrs ::= (style:type::"right") | (style:type::"left" style:position::length) ;
draw-handle-attlist ::= (draw:handle-mirror-vertical::boolean)? ;
 draw-handle-attlist ::= (draw:handle-mirror-horizontal::boolean)? ;
 draw-handle-attlist ::= (draw:handle-switched::boolean)? ;
 draw-handle-attlist ::= draw:handle-position::string ;
 draw-handle-attlist ::= (draw:handle-range-x-minimum::string)? ;
 draw-handle-attlist ::= (draw:handle-range-x-maximum::string)? ;
 draw-handle-attlist ::= (draw:handle-range-y-minimum::string)? ;
 draw-handle-attlist ::= (draw:handle-range-y-maximum::string)? ;
 draw-handle-attlist ::= (draw:handle-polar::string)? ;
 draw-handle-attlist ::= (draw:handle-radius-range-minimum::string)? ;
 draw-handle-attlist ::= (draw:handle-radius-range-maximum::string)? ;
common-field-database-table-attlist ::= text:table-name::string ;
 common-field-database-table-attlist ::= (text:table-type::("table" | "query" | "command"))? ;
common-margin-attlist ::= (fo:margin::(nonNegativeLength | percent))? ;
style-columns ::= (style:columns::(style-columns-attlist style-column-sep? style-column*))? ;
common-spline-anim-value-attlist ::= (smil:keyTimes::string)? ;
 common-spline-anim-value-attlist ::= (smil:keySplines::string)? ;
common-draw-layer-name-attlist ::= (draw:layer::string())? ;
draw-rect-attlist ::= (draw:corner-radius::nonNegativeLength)? ;
table-calculation-setting-attlist ::= (table:case-sensitive::boolean)? ;
 table-calculation-setting-attlist ::= (table:precision-as-shown::boolean)? ;
 table-calculation-setting-attlist ::= (table:search-criteria-must-apply-to-whole-cell::boolean)? ;
 table-calculation-setting-attlist ::= (table:automatic-find-labels::boolean)? ;
 table-calculation-setting-attlist ::= (table:use-regular-expressions::boolean)? ;
 table-calculation-setting-attlist ::= (table:null-year::positiveInteger)? ;
table-subtotal-rules-attlist ::= (table:bind-styles-to-content::boolean)? ;
 table-subtotal-rules-attlist ::= (table:case-sensitive::boolean)? ;
 table-subtotal-rules-attlist ::= (table:page-breaks-on-group-change::boolean)? ;
common-field-display-value-formula-attlist ::= (text:display::("value" | "formula"))? ;
text-table-of-content-source-attlist ::= (text:outline-level::positiveInteger)? ;
 text-table-of-content-source-attlist ::= (text:use-outline-level::boolean)? ;
 text-table-of-content-source-attlist ::= (text:use-index-marks::boolean)? ;
 text-table-of-content-source-attlist ::= (text:use-index-source-styles::boolean)? ;
 text-table-of-content-source-attlist ::= (text:index-scope::("document" | "chapter"))? ;
 text-table-of-content-source-attlist ::= (text:relative-tab-stop-position::boolean)? ;
number-time-style ::= number:time-style::(number-time-style-attlist common-data-style-attlist common-format-source-attlist style-text-properties? number-text? (any-time number-text?)+ style-map*) ;
draw-object-ole-attlist ::= (draw:class-id::string())? ;
text-table-index-source ::= text:table-index-source::(text-illustration-index-source-attrs text-index-title-template? text-table-index-entry-template?) ;
office-automatic-styles ::= (office:automatic-styles::(styles style-page-layout*))? ;
draw-polygon ::= draw:polygon::(common-draw-points-attlist common-draw-position-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
anim-animate-color-attlist ::= (anim:color-interpolation::("rgb" | "hsl"))? ;
 anim-animate-color-attlist ::= (anim:color-interpolation-direction::("clockwise" | "counter-clockwise"))? ;
style-section-properties-attlist ::= common-background-color-attlist ;
 style-section-properties-attlist ::= common-horizontal-margin-attlist ;
 style-section-properties-attlist ::= (style:protect::boolean)? ;
 style-section-properties-attlist ::= (text:dont-balance-text-columns::boolean)? ;
 style-section-properties-attlist ::= common-writing-mode-attlist ;
chart-title ::= chart:title::(chart-title-attlist text-p?) ;
common-tab-attlist ::= (form:tab-index::nonNegativeInteger)? ;
 common-tab-attlist ::= (form:tab-stop::boolean)? ;
common-anim-attlist ::= (presentation:node-type::("default" | "on-click" | "with-previous" | "after-previous" | "timing-root" | "main-sequence" | "interactive-sequence"))? ;
 common-anim-attlist ::= (presentation:preset-id::string)? ;
 common-anim-attlist ::= (presentation:preset-sub-type::string)? ;
 common-anim-attlist ::= (presentation:preset-class::("custom" | "entrance" | "exit" | "emphasis" | "motion-path" | "ole-action" | "media-call"))? ;
 common-anim-attlist ::= (presentation:master-element::IDREF)? ;
 common-anim-attlist ::= (presentation:group-id::string)? ;
 common-anim-attlist ::= (anim:id::ID)? ;
draw-frame ::= draw:frame::(common-draw-shape-with-text-and-styles-attlist common-draw-position-attlist common-draw-rel-size-attlist presentation-shape-attlist draw-frame-attlist (draw-text-box | draw-image | draw-object | draw-object-ole | draw-applet | draw-floating-frame | draw-plugin)* office-event-listeners? draw-glue-point* draw-image-map? svg-desc? (draw-contour-polygon | draw-contour-path)?) ;
common-form-control-content ::= form-properties? office-event-listeners? ;
table-scenario-attlist ::= table:scenario-ranges::cellRangeAddressList ;
 table-scenario-attlist ::= table:is-active::boolean ;
 table-scenario-attlist ::= (table:display-border::boolean)? ;
 table-scenario-attlist ::= (table:border-color::color)? ;
 table-scenario-attlist ::= (table:copy-back::boolean)? ;
 table-scenario-attlist ::= (table:copy-styles::boolean)? ;
 table-scenario-attlist ::= (table:copy-formulas::boolean)? ;
 table-scenario-attlist ::= (table:comment::string)? ;
 table-scenario-attlist ::= (table:protected::boolean)? ;
table-iteration ::= table:iteration::((table:status::("enable" | "disable"))? (table:steps::positiveInteger)? (table:maximum-difference::double)?) ;
table-data-pilot-level-attlist ::= (table:show-empty::boolean)? ;
style-footer-style ::= style:footer-style::(style-header-footer-properties?) ;
presentation-event-listener ::= presentation:event-listener::(presentation-event-listener-attlist presentation-sound?) ;
text-outline-level ::= (text:outline-level::positiveInteger)? ;
common-background-color-attlist ::= (fo:background-color::("transparent" | color))? ;
text-user-index-source ::= text:user-index-source::(text-user-index-source-attr text-index-title-template? text-user-index-entry-template* text-index-source-styles*) ;
text-index-entry-chapter ::= text:index-entry-chapter::((text:style-name::styleNameRef)? text-index-entry-chapter-attrs) ;
draw-frame-attlist ::= (draw:copy-of::string)? ;
common-restart-default-attlist ::= (smil:restartDefault::("never" | "always" | "whenNotActive" | "inherit"))? ;
chart-domain ::= chart:domain::((table:cell-range-address::cellRangeAddress)?) ;
office-text-attlist ::= (text:global::boolean)? ;
common-break-attlist ::= (fo:break-before::("auto" | "column" | "page"))? (fo:break-after::("auto" | "column" | "page"))? ;
text-file-name-attlist ::= (text:display::("full" | "path" | "name" | "name-and-extension"))? ;
 text-file-name-attlist ::= common-field-fixed-attlist ;
chart-error-indicator-attlist ::= (chart:style-name::styleNameRef)? ;
presentation-event-listener-attlist ::= script:event-name::string ;
 presentation-event-listener-attlist ::= presentation:action::("none" | "previous-page" | "next-page" | "first-page" | "last-page" | "hide" | "stop" | "execute" | "show" | "verb" | "fade-out" | "sound") ;
 presentation-event-listener-attlist ::= (presentation:effect::presentationEffects)? ;
 presentation-event-listener-attlist ::= (presentation:direction::presentationEffectDirections)? ;
 presentation-event-listener-attlist ::= (presentation:speed::presentationSpeeds)? ;
 presentation-event-listener-attlist ::= (presentation:start-scale::percent)? ;
 presentation-event-listener-attlist ::= (xlink:href::anyURI)? (xlink:type::"simple")? (xlink:show::"embed")? (xlink:actuate::"onRequest")? ;
 presentation-event-listener-attlist ::= (presentation:verb::nonNegativeInteger)? ;
common-fill-default-attlist ::= (smil:fillDefault::("remove" | "freeze" | "hold" | "transition" | "auto" | "inherit"))? ;
table-table-source-attlist ::= (table:mode::("copy-all" | "copy-results-only"))? ;
 table-table-source-attlist ::= (table:table-name::string)? ;
common-form-visual-effect-attlist ::= (form:visual-effect::("flat" | "3d"))? ;
common-text-align ::= (fo:text-align::("start" | "end" | "left" | "right" | "center" | "justify"))? ;
header-footer-content ::= (text-decls (text-h | text-p | text-list | table-table | text-section | text-table-of-content | text-illustration-index | text-table-index | text-object-index | text-user-index | text-alphabetical-index | text-bibliography | text-index-title | change-marks)*) | (style-region-left? style-region-center? style-region-right?) ;
style-style-attlist ::= style:name::styleName ;
 style-style-attlist ::= (style:display-name::string)? ;
 style-style-attlist ::= (style:parent-style-name::styleNameRef)? ;
 style-style-attlist ::= (style:next-style-name::styleNameRef)? ;
 style-style-attlist ::= (style:list-style-name::(styleName | Îµ))? ;
 style-style-attlist ::= (style:master-page-name::styleNameRef)? ;
 style-style-attlist ::= (style:auto-update::boolean)? ;
 style-style-attlist ::= (style:data-style-name::styleNameRef)? ;
 style-style-attlist ::= (style:class::string)? ;
 style-style-attlist ::= (style:default-outline-level::positiveInteger)? ;
style-page-layout-properties-attlist ::= (fo:page-width::length)? (fo:page-height::length)? ;
 style-page-layout-properties-attlist ::= common-num-format-attlist? common-num-format-prefix-suffix-attlist ;
 style-page-layout-properties-attlist ::= (style:paper-tray-name::("default" | string))? ;
 style-page-layout-properties-attlist ::= (style:print-orientation::("portrait" | "landscape"))? ;
 style-page-layout-properties-attlist ::= common-horizontal-margin-attlist common-vertical-margin-attlist common-margin-attlist ;
 style-page-layout-properties-attlist ::= common-border-attlist ;
 style-page-layout-properties-attlist ::= common-border-line-width-attlist ;
 style-page-layout-properties-attlist ::= common-padding-attlist ;
 style-page-layout-properties-attlist ::= common-shadow-attlist ;
 style-page-layout-properties-attlist ::= common-background-color-attlist ;
 style-page-layout-properties-attlist ::= (style:register-truth-ref-style-name::styleNameRef)? ;
 style-page-layout-properties-attlist ::= (style:print::(("headers" | "grid" | "annotations" | "objects" | "charts" | "drawings" | "formulas" | "zero-values")*))? ;
 style-page-layout-properties-attlist ::= (style:print-page-order::("ttb" | "ltr"))? ;
 style-page-layout-properties-attlist ::= (style:first-page-number::(positiveInteger | "continue"))? ;
 style-page-layout-properties-attlist ::= (style:scale-to::percent)? (style:scale-to-pages::positiveInteger)? ;
 style-page-layout-properties-attlist ::= (style:table-centering::("horizontal" | "vertical" | "both" | "none"))? ;
 style-page-layout-properties-attlist ::= (style:footnote-max-height::length)? ;
 style-page-layout-properties-attlist ::= common-writing-mode-attlist ;
 style-page-layout-properties-attlist ::= (style:layout-grid-mode::("none" | "line" | "both"))? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-base-height::length)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-ruby-height::length)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-lines::positiveInteger)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-color::color)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-ruby-below::boolean)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-print::boolean)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-display::boolean)? ;
draw-text-box-attlist ::= (draw:chain-next-name::string)? ;
 draw-text-box-attlist ::= (draw:corner-radius::nonNegativeLength)? ;
 draw-text-box-attlist ::= (fo:min-height::(length | percent))? (fo:min-width::(length | percent))? ;
 draw-text-box-attlist ::= (fo:max-height::(length | percent))? (fo:max-width::(length | percent))? ;
draw-image-attlist ::= (draw:filter-name::string)? ;
table-error-message ::= table:error-message::((table:title::string)? (table:display::boolean)? (table:message-type::("stop" | "warning" | "information"))? text-p*) ;
paragraph-attrs ::= (text:style-name::styleNameRef)? (text:class-names::styleNameRefs)? (text:cond-style-name::styleNameRef)? ;
 paragraph-attrs ::= text-id? ;
table-columns-no-group ::= (table-columns (table-table-header-columns table-columns?)?) | (table-table-header-columns table-columns?) ;
form-fixed-text-attlist ::= form-control-attlist for common-disabled-attlist label common-printable-attlist common-title-attlist ;
 form-fixed-text-attlist ::= (form:multi-line::boolean)? ;
draw-floating-frame-attlist ::= (draw:frame-name::string)? ;
style-paragraph-properties-attlist ::= (fo:line-height::("normal" | nonNegativeLength | percent))? ;
 style-paragraph-properties-attlist ::= (style:line-height-at-least::nonNegativeLength)? ;
 style-paragraph-properties-attlist ::= (style:line-spacing::length)? ;
 style-paragraph-properties-attlist ::= (style:font-independent-line-spacing::boolean)? ;
 style-paragraph-properties-attlist ::= common-text-align ;
 style-paragraph-properties-attlist ::= (fo:text-align-last::("start" | "center" | "justify"))? ;
 style-paragraph-properties-attlist ::= (style:justify-single-word::boolean)? ;
 style-paragraph-properties-attlist ::= (fo:keep-together::("auto" | "always"))? ;
 style-paragraph-properties-attlist ::= (fo:widows::nonNegativeInteger)? ;
 style-paragraph-properties-attlist ::= (fo:orphans::nonNegativeInteger)? ;
 style-paragraph-properties-attlist ::= (style:tab-stop-distance::nonNegativeLength)? ;
 style-paragraph-properties-attlist ::= (fo:hyphenation-keep::("auto" | "page"))? ;
 style-paragraph-properties-attlist ::= (fo:hyphenation-ladder-count::("no-limit" | positiveInteger))? ;
 style-paragraph-properties-attlist ::= (style:register-true::boolean)? ;
 style-paragraph-properties-attlist ::= common-horizontal-margin-attlist ;
 style-paragraph-properties-attlist ::= (fo:text-indent::(length | percent))? ;
 style-paragraph-properties-attlist ::= (style:auto-text-indent::boolean)? ;
 style-paragraph-properties-attlist ::= common-vertical-margin-attlist ;
 style-paragraph-properties-attlist ::= common-margin-attlist ;
 style-paragraph-properties-attlist ::= common-break-attlist ;
 style-paragraph-properties-attlist ::= common-background-color-attlist ;
 style-paragraph-properties-attlist ::= common-border-attlist ;
 style-paragraph-properties-attlist ::= common-border-line-width-attlist ;
 style-paragraph-properties-attlist ::= common-padding-attlist ;
 style-paragraph-properties-attlist ::= common-shadow-attlist ;
 style-paragraph-properties-attlist ::= common-keep-with-next-attlist ;
 style-paragraph-properties-attlist ::= (text:number-lines::boolean)? ;
 style-paragraph-properties-attlist ::= (text:line-number::nonNegativeInteger)? ;
 style-paragraph-properties-attlist ::= (style:text-autospace::("none" | "ideograph-alpha"))? ;
 style-paragraph-properties-attlist ::= (style:punctuation-wrap::("simple" | "hanging"))? ;
 style-paragraph-properties-attlist ::= (style:line-break::("normal" | "strict"))? ;
 style-paragraph-properties-attlist ::= (style:vertical-align::("top" | "middle" | "bottom" | "auto"))? ;
 style-paragraph-properties-attlist ::= common-writing-mode-attlist ;
 style-paragraph-properties-attlist ::= (style:writing-mode-automatic::boolean)? ;
 style-paragraph-properties-attlist ::= (style:snap-to-layout-grid::boolean)? ;
 style-paragraph-properties-attlist ::= common-page-number-attlist ;
 style-paragraph-properties-attlist ::= (style:background-transparency::percent)? ;
table-table-row-group-attlist ::= (table:display::boolean)? ;
draw-regular-polygon ::= draw:regular-polygon::(draw-regular-polygon-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
style-drawing-page-properties-elements ::= presentation-sound? ;
common-border-line-width-attlist ::= (style:border-line-width::borderWidths)? (style:border-line-width-top::borderWidths)? (style:border-line-width-bottom::borderWidths)? (style:border-line-width-left::borderWidths)? (style:border-line-width-right::borderWidths)? ;
common-draw-size-attlist ::= (svg:width::length)? (svg:height::length)? ;
draw-layer-attlist ::= draw:name::string ;
 draw-layer-attlist ::= (draw:protected::boolean)? ;
 draw-layer-attlist ::= (draw:display::("always" | "screen" | "printer" | "none"))? ;
draw-circle ::= draw:circle::(draw-circle-attlist common-draw-circle-ellipse-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
table-table-template ::= table:table-template::(table-table-template-attlist table-first-row? table-last-row? table-first-column? table-last-column? table-body | (table-even-rows table-odd-rows) | (table-even-columns table-odd-columns)) ;
draw-page ::= draw:page::(common-presentation-header-footer-attlist draw-page-attlist office-forms? shape* (presentation-animations | animation-element)? presentation-notes?) ;
form-password-attlist ::= form-control-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist ;
 form-password-attlist ::= (form:echo-char::character)? ;
presentation-settings ::= (presentation:settings::(presentation-settings-attlist presentation-show*))? ;
common-style-direction-attlist ::= (style:direction::("ltr" | "ttb"))? ;
text-sequence-ref-name ::= (text:ref-name::string)? ;
table-insertion ::= table:insertion::(table-insertion-attlist common-table-change-attlist office-change-info table-dependencies? table-deletions?) ;
text-outline-level-style-attlist ::= text:level::positiveInteger ;
 text-outline-level-style-attlist ::= (text:style-name::styleNameRef)? ;
 text-outline-level-style-attlist ::= common-num-format-attlist common-num-format-prefix-suffix-attlist ;
 text-outline-level-style-attlist ::= (text:display-levels::positiveInteger)? ;
 text-outline-level-style-attlist ::= (text:start-value::positiveInteger)? ;
common-anim-values-attlist ::= (smil:values::string)? ;
 common-anim-values-attlist ::= (anim:formula::string)? ;
 common-anim-values-attlist ::= common-anim-set-values-attlist (smil:from::string)? (smil:by::string)? ;
chart-categories ::= chart:categories::((table:cell-range-address::cellRangeAddress)?) ;
draw-page-attlist ::= (draw:name::string)? ;
 draw-page-attlist ::= (draw:style-name::styleNameRef)? ;
 draw-page-attlist ::= draw:master-page-name::styleNameRef ;
 draw-page-attlist ::= (presentation:presentation-page-layout-name::styleNameRef)? ;
 draw-page-attlist ::= (draw:id::ID)? ;
draw-hatch-attlist ::= draw:name::styleName ;
 draw-hatch-attlist ::= (draw:display-name::string)? ;
 draw-hatch-attlist ::= draw:style::("single" | "double" | "triple") ;
 draw-hatch-attlist ::= (draw:color::color)? ;
 draw-hatch-attlist ::= (draw:distance::length)? ;
 draw-hatch-attlist ::= (draw:rotation::integer)? ;
presentation-settings-attlist ::= (presentation:start-page::string)? ;
 presentation-settings-attlist ::= (presentation:show::string)? ;
 presentation-settings-attlist ::= (presentation:full-screen::boolean)? ;
 presentation-settings-attlist ::= (presentation:endless::boolean)? ;
 presentation-settings-attlist ::= (presentation:pause::duration)? ;
 presentation-settings-attlist ::= (presentation:show-logo::boolean)? ;
 presentation-settings-attlist ::= (presentation:force-manual::boolean)? ;
 presentation-settings-attlist ::= (presentation:mouse-visible::boolean)? ;
 presentation-settings-attlist ::= (presentation:mouse-as-pen::boolean)? ;
 presentation-settings-attlist ::= (presentation:start-with-navigator::boolean)? ;
 presentation-settings-attlist ::= (presentation:animations::("enabled" | "disabled"))? ;
 presentation-settings-attlist ::= (presentation:transition-on-click::("enabled" | "disabled"))? ;
 presentation-settings-attlist ::= (presentation:stay-on-top::boolean)? ;
number-day-of-week-attlist ::= (number:style::("short" | "long"))? ;
number-and-text ::= number-number number-text? ;
common-keep-with-next-attlist ::= (fo:keep-with-next::("auto" | "always"))? ;
common-text-anchor-attlist ::= (text:anchor-type::("page" | "frame" | "paragraph" | "char" | "as-char"))? ;
 common-text-anchor-attlist ::= (text:anchor-page-number::positiveInteger)? ;
common-field-num-format-attlist ::= common-num-format-attlist? ;
presentation-show-shape ::= presentation:show-shape::(common-presentation-effect-attlist presentation-sound?) ;
table-insertion-attlist ::= table:type::("row" | "column" | "table") ;
 table-insertion-attlist ::= table:position::integer ;
 table-insertion-attlist ::= (table:count::positiveInteger)? ;
 table-insertion-attlist ::= (table:table::integer)? ;
office-document-common-attrs ::= (office:version::string)? ;
common-draw-style-name-attlist ::= ((draw:style-name::styleNameRef)? (draw:class-names::styleNameRefs)?) | ((presentation:style-name::styleNameRef)? (presentation:class-names::styleNameRefs)?) ;
table-consolidation-attlist ::= table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string) ;
 table-consolidation-attlist ::= table:source-cell-range-addresses::cellRangeAddressList ;
 table-consolidation-attlist ::= table:target-cell-address::cellAddress ;
 table-consolidation-attlist ::= (table:use-labels::("none" | "row" | "column" | "both"))? ;
 table-consolidation-attlist ::= (table:link-to-source-data::boolean)? ;
style-tab-stops ::= (style:tab-stops::(style-tab-stop*))? ;
text-bibliography-configuration-attlist ::= (text:prefix::string)? (text:suffix::string)? ;
 text-bibliography-configuration-attlist ::= (text:numbered-entries::boolean)? ;
 text-bibliography-configuration-attlist ::= (text:sort-by-position::boolean)? (fo:language::languageCode)? (fo:country::countryCode)? (text:sort-algorithm::string)? ;
style-data-style-attlist ::= (style:display-name::string)? ;
office-master-styles ::= (office:master-styles::(style-master-page* style-handout-master? draw-layer-set?))? ;
dr3d-light-attlist ::= (dr3d:diffuse-color::color)? ;
 dr3d-light-attlist ::= dr3d:direction::vector3D ;
 dr3d-light-attlist ::= (dr3d:enabled::boolean)? ;
 dr3d-light-attlist ::= (dr3d:specular::boolean)? ;
style-drawing-page-properties-attlist ::= (presentation:transition-type::("manual" | "automatic" | "semi-automatic"))? ;
 style-drawing-page-properties-attlist ::= (presentation:transition-style::("none" | "fade-from-left" | "fade-from-top" | "fade-from-right" | "fade-from-bottom" | "fade-from-upperleft" | "fade-from-upperright" | "fade-from-lowerleft" | "fade-from-lowerright" | "move-from-left" | "move-from-top" | "move-from-right" | "move-from-bottom" | "move-from-upperleft" | "move-from-upperright" | "move-from-lowerleft" | "move-from-lowerright" | "uncover-to-left" | "uncover-to-top" | "uncover-to-right" | "uncover-to-bottom" | "uncover-to-upperleft" | "uncover-to-upperright" | "uncover-to-lowerleft" | "uncover-to-lowerright" | "fade-to-center" | "fade-from-center" | "vertical-stripes" | "horizontal-stripes" | "clockwise" | "counterclockwise" | "open-vertical" | "open-horizontal" | "close-vertical" | "close-horizontal" | "wavyline-from-left" | "wavyline-from-top" | "wavyline-from-right" | "wavyline-from-bottom" | "spiralin-left" | "spiralin-right" | "spiralout-left" | "spiralout-right" | "roll-from-top" | "roll-from-left" | "roll-from-right" | "roll-from-bottom" | "stretch-from-left" | "stretch-from-top" | "stretch-from-right" | "stretch-from-bottom" | "vertical-lines" | "horizontal-lines" | "dissolve" | "random" | "vertical-checkerboard" | "horizontal-checkerboard" | "interlocking-horizontal-left" | "interlocking-horizontal-right" | "interlocking-vertical-top" | "interlocking-vertical-bottom" | "fly-away" | "open" | "close" | "melt"))? ;
 style-drawing-page-properties-attlist ::= (presentation:transition-speed::presentationSpeeds)? ;
 style-drawing-page-properties-attlist ::= (smil:subtype::string)? ;
 style-drawing-page-properties-attlist ::= (smil:direction::("forward" | "reverse"))? ;
 style-drawing-page-properties-attlist ::= (smil:fadeColor::("forward" | "reverse"))? ;
 style-drawing-page-properties-attlist ::= (presentation:duration::duration)? ;
 style-drawing-page-properties-attlist ::= (presentation:visibility::("visible" | "hidden"))? ;
 style-drawing-page-properties-attlist ::= (draw:background-size::("full" | "border"))? ;
 style-drawing-page-properties-attlist ::= (presentation:background-objects-visible::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:background-visible::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:display-header::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:display-footer::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:display-page-number::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:display-date-time::boolean)? ;
 style-drawing-page-properties-attlist ::= (smil:type::string)? ;
table-sort-groups-attlist ::= (table:data-type::("text" | "number" | "automatic" | string))? ;
 table-sort-groups-attlist ::= (table:order::("ascending" | "descending"))? ;
presentation-dim ::= presentation:dim::(presentation-dim-attlist presentation-sound?) ;
table-table-cell-attlist ::= (table:number-columns-repeated::positiveInteger)? ;
 table-table-cell-attlist ::= (table:style-name::styleNameRef)? ;
 table-table-cell-attlist ::= (table:content-validation-name::string)? ;
 table-table-cell-attlist ::= (table:formula::string)? ;
 table-table-cell-attlist ::= common-value-and-type-attlist? ;
 table-table-cell-attlist ::= (table:protect::boolean)? ;
anim-animate-motion-attlist ::= (svg:path::pathData)? ;
 anim-animate-motion-attlist ::= (svg:origin::string)? ;
 anim-animate-motion-attlist ::= (smil:calcMode::("discrete" | "linear" | "paced" | "spline"))? ;
presentation-date-time-decl-attlist ::= presentation:name::string ;
 presentation-date-time-decl-attlist ::= presentation:source::("fixed" | "current-date") ;
 presentation-date-time-decl-attlist ::= (style:data-style-name::styleNameRef)? ;
text-template-name-attlist ::= (text:display::("full" | "path" | "name" | "name-and-extension" | "area" | "title"))? ;
draw-caption-attlist ::= (draw:caption-point-x::coordinate draw:caption-point-y::coordinate)? ;
 draw-caption-attlist ::= (draw:corner-radius::nonNegativeLength)? ;
number-minutes-attlist ::= (number:style::("short" | "long"))? ;
form-button-attlist ::= form-control-attlist button-type common-disabled-attlist label image-data common-printable-attlist common-tab-attlist target-frame target-location common-title-attlist common-value-attlist common-form-relative-image-position-attlist ;
 form-button-attlist ::= (form:default-button::boolean)? ;
 form-button-attlist ::= (form:toggle::boolean)? ;
 form-button-attlist ::= (form:focus-on-click::boolean)? ;
 form-button-attlist ::= (form:xforms-submission::string)? ;
table-change-deletion ::= table:change-deletion::((table:id::string)?) ;
chart-wall-attlist ::= (svg:width::length)? ;
 chart-wall-attlist ::= (chart:style-name::styleNameRef)? ;
text-index-title-template ::= text:index-title-template::((text:style-name::styleNameRef)? string()) ;
table-filter-attlist ::= (table:target-range-address::cellRangeAddress)? ;
 table-filter-attlist ::= (table:condition-source::("self" | "cell-range"))? ;
 table-filter-attlist ::= (table:condition-source-range-address::cellRangeAddress)? ;
 table-filter-attlist ::= (table:display-duplicates::boolean)? ;
draw-ellipse-attlist ::= (svg:rx::length svg:ry::length)? ;
common-field-display-value-none-attlist ::= (text:display::("value" | "none"))? ;
chart-series ::= chart:series::(chart-series-attlist chart-domain* chart-mean-value? chart-regression-curve? chart-error-indicator? chart-data-point*) ;
table-calculation-settings ::= table:calculation-settings::(table-calculation-setting-attlist table-null-date? table-iteration?) ;
text-index-entry-link-start ::= text:index-entry-link-start::((text:style-name::styleNameRef)?) ;
table-data-pilot-member-attlist ::= table:name::string ;
 table-data-pilot-member-attlist ::= (table:display::boolean)? ;
 table-data-pilot-member-attlist ::= (table:show-details::boolean)? ;
common-convert-empty-attlist ::= (form:convert-empty-to-null::boolean)? ;
style-style-content ::= style:family::"text" style-text-properties? ;
 style-style-content ::= style:family::"paragraph" style-paragraph-properties? style-text-properties? ;
 style-style-content ::= style:family::"section" style-section-properties? ;
 style-style-content ::= style:family::"ruby" style-ruby-properties? ;
 style-style-content ::= style:family::"table" style-table-properties? ;
 style-style-content ::= style:family::"table-column" style-table-column-properties? ;
 style-style-content ::= style:family::"table-row" style-table-row-properties? ;
 style-style-content ::= style:family::"table-cell" style-table-cell-properties? style-paragraph-properties? style-text-properties? ;
 style-style-content ::= style:family::("graphic" | "presentation") style-graphic-properties? style-paragraph-properties? style-text-properties? ;
 style-style-content ::= style:family::"drawing-page" style-drawing-page-properties? ;
 style-style-content ::= style:family::"chart" style-chart-properties? style-graphic-properties? style-paragraph-properties? style-text-properties? ;
common-format-source-attlist ::= (number:format-source::("fixed" | "language"))? ;
number-number-attlist ::= (number:decimal-replacement::string())? ;
 number-number-attlist ::= (number:display-factor::double)? ;
text-list ::= text:list::(text-list-attr text-list-header? text-list-item*) ;
common-anim-set-values-attlist ::= (smil:to::string)? ;
common-field-description-attlist ::= (text:description::string())? ;
chart-series-attlist ::= (chart:values-cell-range-address::cellRangeAddress)? ;
 chart-series-attlist ::= (chart:label-cell-address::cellAddress)? ;
 chart-series-attlist ::= (chart:class::namespacedToken)? ;
 chart-series-attlist ::= (chart:attached-axis::string)? ;
 chart-series-attlist ::= (chart:style-name::styleNameRef)? ;
table-table-column-group-attlist ::= (table:display::boolean)? ;
common-draw-transform-attlist ::= (draw:transform::string)? ;
common-shadow-attlist ::= (style:shadow::shadowType)? ;
number-year-attlist ::= (number:style::("short" | "long"))? ;
svg-font-face-format ::= svg:font-face-format::((svg:string::string())?) ;
style-map-attlist ::= style:condition::string ;
 style-map-attlist ::= style:apply-style-name::styleNameRef ;
 style-map-attlist ::= (style:base-cell-address::cellAddress)? ;
text-index-entry-tab-stop ::= text:index-entry-tab-stop::((text:style-name::styleNameRef)? text-index-entry-tab-stop-attrs) ;
chart-chart ::= chart:chart::(chart-chart-attlist chart-title? chart-subtitle? chart-footer? chart-legend? chart-plot-area table-table?) ;
table-sort-attlist ::= (table:bind-styles-to-content::boolean)? ;
 table-sort-attlist ::= (table:target-range-address::cellRangeAddress)? ;
 table-sort-attlist ::= (table:case-sensitive::boolean)? ;
 table-sort-attlist ::= (table:language::languageCode)? ;
 table-sort-attlist ::= (table:country::countryCode)? ;
 table-sort-attlist ::= (table:algorithm::string)? ;
office-spreadsheet-attlist ::= (table:structure-protected::boolean)? (table:protection-key::string)? ;
common-data-field-attlist ::= (form:data-field::string)? ;
table-rows-no-group ::= (table-rows (table-table-header-rows table-rows?)?) | (table-table-header-rows table-rows?) ;
common-field-database-name ::= (text:database-name::string)? ;
 common-field-database-name ::= form-connection-resource ;
chart-subtitle ::= chart:subtitle::(chart-title-attlist text-p?) ;
common-draw-position-attlist ::= (svg:x::coordinate)? (svg:y::coordinate)? ;
common-padding-attlist ::= (fo:padding::nonNegativeLength)? (fo:padding-top::nonNegativeLength)? (fo:padding-bottom::nonNegativeLength)? (fo:padding-left::nonNegativeLength)? (fo:padding-right::nonNegativeLength)? ;
table-database-source-sql-attlist ::= table:database-name::string ;
 table-database-source-sql-attlist ::= table:sql-statement::string ;
 table-database-source-sql-attlist ::= (table:parse-sql-statement::boolean)? ;
style-table-properties-attlist ::= (style:width::positiveLength)? (style:rel-width::percent)? ;
 style-table-properties-attlist ::= (table:align::("left" | "center" | "right" | "margins"))? ;
 style-table-properties-attlist ::= common-horizontal-margin-attlist ;
 style-table-properties-attlist ::= common-vertical-margin-attlist ;
 style-table-properties-attlist ::= common-margin-attlist ;
 style-table-properties-attlist ::= common-page-number-attlist ;
 style-table-properties-attlist ::= common-break-attlist ;
 style-table-properties-attlist ::= common-background-color-attlist ;
 style-table-properties-attlist ::= common-shadow-attlist ;
 style-table-properties-attlist ::= common-keep-with-next-attlist ;
 style-table-properties-attlist ::= (style:may-break-between-rows::boolean)? ;
 style-table-properties-attlist ::= (table:border-model::("collapsing" | "separating"))? ;
 style-table-properties-attlist ::= common-writing-mode-attlist ;
 style-table-properties-attlist ::= (table:display::boolean)? ;
presentation-shape-attlist ::= (presentation:class::presentation-classes)? ;
 presentation-shape-attlist ::= (presentation:placeholder::boolean)? ;
 presentation-shape-attlist ::= (presentation:user-transformed::boolean)? ;
text-alphabetical-index-source-attrs ::= text-index-scope-attr text-relative-tab-stop-position-attr ;
 text-alphabetical-index-source-attrs ::= (text:ignore-case::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:main-entry-style-name::styleNameRef)? ;
 text-alphabetical-index-source-attrs ::= (text:alphabetical-separators::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:combine-entries::boolean)? (text:combine-entries-with-dash::boolean)? (text:combine-entries-with-pp::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:use-keys-as-entries::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:capitalize-entries::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:comma-separated::boolean)? ;
 text-alphabetical-index-source-attrs ::= (fo:language::languageCode)? ;
 text-alphabetical-index-source-attrs ::= (fo:country::countryCode)? ;
 text-alphabetical-index-source-attrs ::= (text:sort-algorithm::string)? ;
text-list-attr ::= (text:style-name::styleNameRef)? ;
 text-list-attr ::= (text:continue-numbering::boolean)? ;
form-form-attlist ::= (xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")?)? ;
 form-form-attlist ::= (office:target-frame::targetFrameName)? ;
 form-form-attlist ::= (form:method::("get" | "post" | string))? ;
 form-form-attlist ::= (form:enctype::string)? ;
 form-form-attlist ::= (form:allow-deletes::boolean)? ;
 form-form-attlist ::= (form:allow-inserts::boolean)? ;
 form-form-attlist ::= (form:allow-updates::boolean)? ;
 form-form-attlist ::= (form:apply-filter::boolean)? ;
 form-form-attlist ::= (form:command-type::("table" | "query" | "command"))? ;
 form-form-attlist ::= (form:command::string())? ;
 form-form-attlist ::= (form:datasource::(anyURI | string))? ;
 form-form-attlist ::= (form:master-fields::string)? ;
 form-form-attlist ::= (form:detail-fields::string)? ;
 form-form-attlist ::= (form:escape-processing::boolean)? ;
 form-form-attlist ::= (form:filter::string)? ;
 form-form-attlist ::= (form:ignore-result::boolean)? ;
 form-form-attlist ::= (form:navigation-mode::navigation)? ;
 form-form-attlist ::= (form:order::string)? ;
 form-form-attlist ::= (form:tab-cycle::tab-cycles)? ;
text-tracked-changes-attr ::= (text:track-changes::boolean)? ;
table-help-message ::= table:help-message::((table:title::string)? (table:display::boolean)? text-p*) ;
paragraph-content ::= string() ;
 paragraph-content ::= text:s::((text:c::nonNegativeInteger)?) ;
 paragraph-content ::= text:tab::text-tab-attr ;
 paragraph-content ::= text:line-break::Îµ ;
 paragraph-content ::= text:span::((text:style-name::styleNameRef)? (text:class-names::styleNameRefs)? paragraph-content*) ;
 paragraph-content ::= text:a::(text-a-attlist office-event-listeners? paragraph-content*) ;
 paragraph-content ::= (text:bookmark::(text:name::string)) | (text:bookmark-start::(text:name::string)) | (text:bookmark-end::(text:name::string)) ;
 paragraph-content ::= text:reference-mark::(text:name::string) ;
 paragraph-content ::= (text:reference-mark-start::(text:name::string)) | (text:reference-mark-end::(text:name::string)) ;
 paragraph-content ::= text:note::(text-note-class (text:id::string)? text:note-citation::((text:label::string)? string()) text:note-body::(text-content*)) ;
 paragraph-content ::= text:ruby::((text:style-name::styleNameRef)? text:ruby-base::paragraph-content text:ruby-text::((text:style-name::styleNameRef)? string())) ;
 paragraph-content ::= office-annotation ;
 paragraph-content ::= change-marks ;
 paragraph-content ::= shape | draw-a ;
 paragraph-content ::= text:date::(text-date-attlist string()) ;
 paragraph-content ::= text:time::(text-time-attlist string()) ;
 paragraph-content ::= text:page-number::(text-page-number-attlist string()) ;
 paragraph-content ::= text:page-continuation::(text-page-continuation-attlist string()) ;
 paragraph-content ::= text:sender-firstname::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-lastname::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-initials::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-title::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-position::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-email::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-phone-private::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-fax::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-company::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-phone-work::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-street::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-city::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-postal-code::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-country::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-state-or-province::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:author-name::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:author-initials::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:chapter::(text-chapter-attlist string()) ;
 paragraph-content ::= text:file-name::(text-file-name-attlist string()) ;
 paragraph-content ::= text:template-name::(text-template-name-attlist string()) ;
 paragraph-content ::= text:sheet-name::string() ;
 paragraph-content ::= text:variable-set::(common-field-name-attlist common-field-formula-attlist common-value-and-type-attlist common-field-display-value-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:variable-get::(common-field-name-attlist common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:variable-input::(common-field-name-attlist common-field-description-attlist common-value-type-attlist common-field-display-value-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:user-field-get::(common-field-name-attlist common-field-display-value-formula-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:user-field-input::(common-field-name-attlist common-field-description-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:sequence::(common-field-name-attlist common-field-formula-attlist common-field-num-format-attlist text-sequence-ref-name string()) ;
 paragraph-content ::= text:expression::(common-field-formula-attlist common-value-and-type-attlist? common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:text-input::(common-field-description-attlist string()) ;
 paragraph-content ::= text:initial-creator::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:creation-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::dateOrDateTime)? string()) ;
 paragraph-content ::= text:creation-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::timeOrDateTime)? string()) ;
 paragraph-content ::= text:description::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:user-defined::(common-field-fixed-attlist text:name::string common-field-data-style-name-attlist (office:value::double)? (office:date-value::dateOrDateTime)? (office:time-value::duration)? (office:boolean-value::boolean)? (office:string-value::string)? string()) ;
 paragraph-content ::= text:print-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::time)? string()) ;
 paragraph-content ::= text:print-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::date)? string()) ;
 paragraph-content ::= text:printed-by::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:title::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:subject::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:keywords::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:editing-cycles::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:editing-duration::(common-field-fixed-attlist common-field-data-style-name-attlist (text:duration::duration)? string()) ;
 paragraph-content ::= text:modification-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::time)? string()) ;
 paragraph-content ::= text:modification-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::date)? string()) ;
 paragraph-content ::= text:creator::(common-field-fixed-attlist string()) ;
 paragraph-content ::= (text:page-count::(common-field-num-format-attlist string())) | (text:paragraph-count::(common-field-num-format-attlist string())) | (text:word-count::(common-field-num-format-attlist string())) | (text:character-count::(common-field-num-format-attlist string())) | (text:table-count::(common-field-num-format-attlist string())) | (text:image-count::(common-field-num-format-attlist string())) | (text:object-count::(common-field-num-format-attlist string())) ;
 paragraph-content ::= text:database-display::(text-database-display-attlist string()) ;
 paragraph-content ::= text:database-next::text-database-next-attlist ;
 paragraph-content ::= text:database-row-select::text-database-row-select-attlist ;
 paragraph-content ::= text:database-row-number::(common-field-database-table common-field-num-format-attlist (text:value::nonNegativeInteger)? string()) ;
 paragraph-content ::= text:database-name::(common-field-database-table string()) ;
 paragraph-content ::= text:page-variable-set::(text-set-page-variable-attlist string()) ;
 paragraph-content ::= text:page-variable-get::(text-get-page-variable-attlist string()) ;
 paragraph-content ::= text:placeholder::(text-placeholder-attlist string()) ;
 paragraph-content ::= text:conditional-text::(text-conditional-text-attlist string()) ;
 paragraph-content ::= text:hidden-text::(text-hidden-text-attlist string()) ;
 paragraph-content ::= (text:reference-ref::(text-common-ref-content text-ref-content)) | (text:bookmark-ref::(text-common-ref-content text-ref-content)) ;
 paragraph-content ::= text:note-ref::(text-common-ref-content text-note-ref-content text-ref-content) ;
 paragraph-content ::= text:sequence-ref::(text-common-ref-content text-sequence-ref-content) ;
 paragraph-content ::= text:script::((xlink:href::anyURI (xlink:type::"simple")?) | string() (script:language::string)?) ;
 paragraph-content ::= text:execute-macro::((text:name::string)? office-event-listeners? string()) ;
 paragraph-content ::= text:hidden-paragraph::(text-hidden-paragraph-attlist string()) ;
 paragraph-content ::= text:dde-connection::(text:connection-name::string string()) ;
 paragraph-content ::= text:measure::(text:kind::("value" | "unit" | "gap") string()) ;
 paragraph-content ::= text:table-formula::(common-field-formula-attlist common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:toc-mark-start::text-toc-mark-start-attrs ;
 paragraph-content ::= text:toc-mark-end::text-id ;
 paragraph-content ::= text:toc-mark::(text:string-value::string text-outline-level) ;
 paragraph-content ::= text:user-index-mark-start::(text-id text-outline-level text-index-name) ;
 paragraph-content ::= text:user-index-mark-end::(text-id text-outline-level) ;
 paragraph-content ::= text:user-index-mark::(text:string-value::string text-outline-level text-index-name) ;
 paragraph-content ::= text:alphabetical-index-mark-start::(text-id text-alphabetical-index-mark-attrs) ;
 paragraph-content ::= text:alphabetical-index-mark-end::text-id ;
 paragraph-content ::= text:alphabetical-index-mark::(text:string-value::string text-alphabetical-index-mark-attrs) ;
 paragraph-content ::= text:bibliography-mark::(text:bibliography-type::text-bibliography-types ((text:identifier::string) | (text:address::string) | (text:annote::string) | (text:author::string) | (text:booktitle::string) | (text:chapter::string) | (text:edition::string) | (text:editor::string) | (text:howpublished::string) | (text:institution::string) | (text:journal::string) | (text:month::string) | (text:note::string) | (text:number::string) | (text:organizations::string) | (text:pages::string) | (text:publisher::string) | (text:school::string) | (text:series::string) | (text:title::string) | (text:report-type::string) | (text:volume::string) | (text:year::string) | (text:url::string) | (text:custom1::string) | (text:custom2::string) | (text:custom3::string) | (text:custom4::string) | (text:custom5::string) | (text:isbn::string) | (text:issn::string))* string()) ;
 paragraph-content ::= presentation:header::Îµ ;
 paragraph-content ::= presentation:footer::Îµ ;
 paragraph-content ::= presentation:date-time::Îµ ;
config-config-item-map-entry-attlist ::= (config:name::string)? ;
common-printable-attlist ::= (form:printable::boolean)? ;
heading-attrs ::= text:outline-level::positiveInteger ;
 heading-attrs ::= (text:restart-numbering::boolean)? ;
 heading-attrs ::= (text:start-value::nonNegativeInteger)? ;
 heading-attrs ::= (text:is-list-header::boolean)? ;
common-time-manip-attlist ::= (smil:accelerate::double)? ;
 common-time-manip-attlist ::= (smil:decelerate::double)? ;
 common-time-manip-attlist ::= (smil:autoReverse::boolean)? ;
common-endsync-timing-attlist ::= (smil:endsync::("first" | "last" | "all" | "media"))? ;
text-numbered-paragraph-attr ::= (text:level::positiveInteger)? ;
 text-numbered-paragraph-attr ::= text-list-attr ;
 text-numbered-paragraph-attr ::= text-list-item-attr ;
table-data-pilot-field-attlist ::= table:source-field-name::string ;
 table-data-pilot-field-attlist ::= (table:orientation::("row" | "column" | "data" | "hidden")) | (table:orientation::"page" table:selected-page::string) ;
 table-data-pilot-field-attlist ::= (table:is-data-layout-field::string)? ;
 table-data-pilot-field-attlist ::= (table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string))? ;
 table-data-pilot-field-attlist ::= (table:used-hierarchy::integer)? ;
office-styles ::= (office:styles::(styles style-default-style* text-outline-style? text-notes-configuration* text-bibliography-configuration? text-linenumbering-configuration? draw-gradient* svg-linearGradient* svg-radialGradient* draw-hatch* draw-fill-image* draw-marker* draw-stroke-dash* draw-opacity* style-presentation-page-layout*))? ;
common-vertical-pos-attlist ::= (style:vertical-pos::("top" | "middle" | "bottom" | "from-top" | "below"))? (svg:y::coordinate)? ;
style-chart-properties-attlist ::= (chart:scale-text::boolean)? ;
 style-chart-properties-attlist ::= (chart:three-dimensional::boolean)? ;
 style-chart-properties-attlist ::= (chart:deep::boolean)? ;
 style-chart-properties-attlist ::= (chart:symbol-type::"none") | (chart:symbol-type::"automatic") | (chart:symbol-type::"named-symbol" chart:symbol-name::("square" | "diamond" | "arrow-down" | "arrow-up" | "arrow-right" | "arrow-left" | "bow-tie" | "hourglass" | "circle" | "star" | "x" | "plus" | "asterisk" | "horizontal-bar" | "vertical-bar")) | (chart:symbol-type::"image" chart:symbol-image::(xlink:href::anyURI)) | Îµ ;
 style-chart-properties-attlist ::= (chart:symbol-width::nonNegativeLength)? (chart:symbol-height::nonNegativeLength)? ;
 style-chart-properties-attlist ::= (chart:vertical::boolean)? ;
 style-chart-properties-attlist ::= (chart:connect-bars::boolean)? ;
 style-chart-properties-attlist ::= (chart:gap-width::integer)? (chart:overlap::integer)? ;
 style-chart-properties-attlist ::= (chart:japanese-candle-stick::boolean)? ;
 style-chart-properties-attlist ::= (chart:interpolation::("none" | "cubic-spline" | "b-spline"))? (chart:spline-order::positiveInteger)? (chart:spline-resolution::positiveInteger)? ;
 style-chart-properties-attlist ::= (chart:pie-offset::nonNegativeInteger)? ;
 style-chart-properties-attlist ::= (chart:lines::boolean)? ;
 style-chart-properties-attlist ::= (chart:solid-type::("cuboid" | "cylinder" | "cone" | "pyramid"))? ;
 style-chart-properties-attlist ::= (chart:stacked::boolean)? (chart:percentage::boolean)? ;
 style-chart-properties-attlist ::= (chart:link-data-style-to-source::boolean)? ;
 style-chart-properties-attlist ::= (chart:visible::boolean)? ;
 style-chart-properties-attlist ::= (chart:logarithmic::boolean)? ;
 style-chart-properties-attlist ::= (chart:maximum::double)? (chart:minimum::double)? (chart:origin::double)? (chart:interval-major::double)? (chart:interval-minor::positiveInteger)? ;
 style-chart-properties-attlist ::= (chart:tick-marks-major-inner::boolean)? (chart:tick-marks-major-outer::boolean)? (chart:tick-marks-minor-inner::boolean)? (chart:tick-marks-minor-outer::boolean)? ;
 style-chart-properties-attlist ::= (chart:display-label::boolean)? (chart:text-overlap::boolean)? (text:line-break::boolean)? (chart:label-arrangement::("side-by-side" | "stagger-even" | "stagger-odd"))? ;
 style-chart-properties-attlist ::= common-style-direction-attlist ;
 style-chart-properties-attlist ::= common-rotation-angle-attlist ;
 style-chart-properties-attlist ::= (chart:data-label-number::("none" | "value" | "percentage"))? ;
 style-chart-properties-attlist ::= (chart:data-label-text::boolean)? ;
 style-chart-properties-attlist ::= (chart:data-label-symbol::boolean)? ;
 style-chart-properties-attlist ::= (chart:mean-value::boolean)? ;
 style-chart-properties-attlist ::= (chart:error-category::("none" | "variance" | "standard-deviation" | "percentage" | "error-margin" | "constant"))? ;
 style-chart-properties-attlist ::= (chart:error-percentage::double)? ;
 style-chart-properties-attlist ::= (chart:error-margin::double)? ;
 style-chart-properties-attlist ::= (chart:error-lower-limit::double)? (chart:error-upper-limit::double)? ;
 style-chart-properties-attlist ::= (chart:error-upper-indicator::boolean)? (chart:error-lower-indicator::boolean)? ;
 style-chart-properties-attlist ::= (chart:series-source::("columns" | "rows"))? ;
 style-chart-properties-attlist ::= (chart:regression-type::("none" | "linear" | "logarithmic" | "exponential" | "power"))? ;
table-table ::= table:table::(table-table-attlist table-table-source? office-dde-source? table-scenario? office-forms? table-shapes? table-columns-and-groups table-rows-and-groups) ;
text-linenumbering-configuration ::= text:linenumbering-configuration::(text-linenumbering-configuration-attlist text-linenumbering-separator?) ;
draw-path ::= draw:path::(common-draw-path-data-attlist common-draw-position-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
style-footnote-sep ::= (style:footnote-sep::style-footnote-sep-attlist)? ;
style-header-style ::= style:header-style::(style-header-footer-properties?) ;
anim-audio-attlist ::= (xlink:href::anyURI)? ;
 anim-audio-attlist ::= (anim:audio-level::double)? ;
table-table-cell-content ::= table-cell-range-source? office-annotation? table-detective? text-content* ;
number-day-attlist ::= (number:style::("short" | "long"))? ;
presentation-show-text ::= presentation:show-text::(common-presentation-effect-attlist presentation-sound?) ;
common-horizontal-margin-attlist ::= (fo:margin-left::(length | percent))? (fo:margin-right::(length | percent))? ;
text-page-continuation-attlist ::= text:select-page::("previous" | "next") ;
 text-page-continuation-attlist ::= (text:string-value::string)? ;
draw-area-circle ::= draw:area-circle::(common-draw-area-attlist svg:cx::coordinate svg:cy::coordinate svg:r::length svg-desc? office-event-listeners?) ;
text-user-index-source-attr ::= text-index-scope-attr text-relative-tab-stop-position-attr text:index-name::string ;
 text-user-index-source-attr ::= (text:use-index-marks::boolean)? (text:use-graphics::boolean)? (text:use-tables::boolean)? (text:use-floating-frames::boolean)? (text:use-objects::boolean)? ;
 text-user-index-source-attr ::= (text:copy-outline-levels::boolean)? ;
common-anim-add-accum-attlist ::= (smil:accumulate::("none" | "sum"))? ;
 common-anim-add-accum-attlist ::= (smil:additive::("replace" | "sum"))? ;
draw-connector ::= draw:connector::(draw-connector-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
anyElements ::= (string()? anyAttListOrElements string()?)* ;
draw-applet ::= draw:applet::(draw-applet-attlist common-draw-data-attlist? draw-param*) ;
text-linenumbering-configuration-attlist ::= (text:number-lines::boolean)? ;
 text-linenumbering-configuration-attlist ::= common-num-format-attlist? ;
 text-linenumbering-configuration-attlist ::= (text:style-name::styleNameRef)? ;
 text-linenumbering-configuration-attlist ::= (text:increment::nonNegativeInteger)? ;
 text-linenumbering-configuration-attlist ::= (text:number-position::("left" | "rigth" | "inner" | "outer"))? ;
 text-linenumbering-configuration-attlist ::= (text:offset::nonNegativeLength)? ;
 text-linenumbering-configuration-attlist ::= (text:count-empty-lines::boolean)? ;
 text-linenumbering-configuration-attlist ::= (text:count-in-text-boxes::boolean)? ;
 text-linenumbering-configuration-attlist ::= (text:restart-on-page::boolean)? ;
style-master-page ::= style:master-page::(style-master-page-attlist (style-header style-header-left?)? (style-footer style-footer-left?)? office-forms? style-style* shape* presentation-notes?) ;
style-handout-master-attlist ::= (presentation:presentation-page-layout-name::styleNameRef)? ;
 style-handout-master-attlist ::= style:page-layout-name::styleNameRef ;
 style-handout-master-attlist ::= (draw:style-name::styleNameRef)? ;
text-linenumbering-separator ::= text:linenumbering-separator::((text:increment::nonNegativeInteger)? string()) ;
list-source-type ::= (form:list-source-type::("table" | "query" | "sql" | "sql-pass-through" | "value-list" | "table-fields"))? ;
text-common-ref-content ::= string() ;
 text-common-ref-content ::= (text:ref-name::string)? ;
office-script ::= office:script::(office-script-attlist string()? anyElements string()?) ;
presentation-play-attlist ::= draw:shape-id::IDREF (presentation:speed::presentationSpeeds)? ;
svg-radialGradient ::= svg:radialGradient::(common-svg-gradient-attlist (svg:cx::(coordinate | percent))? (svg:cy::(coordinate | percent))? (svg:r::(coordinate | percent))? (svg:fx::(coordinate | percent))? (svg:fy::(coordinate | percent))? svg-stop*) ;
common-anim-spline-mode-attlist ::= (smil:calcMode::("discrete" | "linear" | "paced" | "spline"))? ;
office-scripts ::= (office:scripts::(office-script* office-event-listeners?))? ;
draw-connector-attlist ::= (draw:type::("standard" | "lines" | "line" | "curve"))? ;
 draw-connector-attlist ::= (svg:x1::coordinate svg:y1::coordinate)? ;
 draw-connector-attlist ::= (draw:start-shape::IDREF)? ;
 draw-connector-attlist ::= (draw:start-glue-point::nonNegativeInteger)? ;
 draw-connector-attlist ::= (svg:x2::coordinate svg:y2::coordinate)? ;
 draw-connector-attlist ::= (draw:end-shape::IDREF)? ;
 draw-connector-attlist ::= (draw:end-glue-point::nonNegativeInteger)? ;
 draw-connector-attlist ::= (draw:line-skew::(length (length length?)?))? ;
table-highlighted-range-attlist ::= (table:cell-range-address::cellRangeAddress)? ;
 table-highlighted-range-attlist ::= table:direction::("from-another-table" | "to-another-table" | "from-same-table") ;
 table-highlighted-range-attlist ::= (table:contains-error::boolean)? ;
common-vertical-margin-attlist ::= (fo:margin-top::(nonNegativeLength | percent))? (fo:margin-bottom::(nonNegativeLength | percent))? ;
button-type ::= (form:button-type::types)? ;
table-data-pilot-table ::= table:data-pilot-table::(table-data-pilot-table-attlist (table-database-source-sql | table-database-source-table | table-database-source-query | table-source-service | table-source-cell-range)? table-data-pilot-field+) ;
table-null-date ::= table:null-date::((table:value-type::valueType)? (table:date-value-type::date)?) ;
label ::= (form:label::string)? ;
style-header-footer-properties-attlist ::= (svg:height::length)? (fo:min-height::length)? ;
 style-header-footer-properties-attlist ::= common-horizontal-margin-attlist common-vertical-margin-attlist common-margin-attlist ;
 style-header-footer-properties-attlist ::= common-border-attlist ;
 style-header-footer-properties-attlist ::= common-border-line-width-attlist ;
 style-header-footer-properties-attlist ::= common-padding-attlist ;
 style-header-footer-properties-attlist ::= common-background-color-attlist ;
 style-header-footer-properties-attlist ::= common-shadow-attlist ;
style-font-face-attlist ::= (svg:font-family::string)? (svg:font-style::fontStyle)? (svg:font-variant::fontVariant)? (svg:font-weight::fontWeight)? (svg:font-stretch::("normal" | "ultra-condensed" | "extra-condensed" | "condensed" | "semi-condensed" | "semi-expanded" | "expanded" | "extra-expanded" | "ultra-expanded"))? (svg:font-size::positiveLength)? (svg:unicode-range::string())? (svg:units-per-em::integer)? (svg:panose-1::string())? (svg:stemv::integer)? (svg:stemh::integer)? (svg:slope::integer)? (svg:cap-height::integer)? (svg:x-height::integer)? (svg:accent-height::integer)? (svg:ascent::integer)? (svg:descent::integer)? (svg:widths::string())? (svg:bbox::string())? (svg:ideographic::integer)? (svg:alphabetic::integer)? (svg:mathematical::integer)? (svg:hanging::integer)? (svg:v-ideographic::integer)? (svg:v-alphabetic::integer)? (svg:v-mathematical::integer)? (svg:v-hanging::integer)? (svg:underline-position::integer)? (svg:underline-thickness::integer)? (svg:strikethrough-position::integer)? (svg:strikethrough-thickness::integer)? (svg:overline-position::integer)? (svg:overline-thickness::integer)? ;
 style-font-face-attlist ::= style:name::string ;
 style-font-face-attlist ::= (style:font-adornments::string)? ;
 style-font-face-attlist ::= (style:font-family-generic::fontFamilyGeneric)? ;
 style-font-face-attlist ::= (style:font-pitch::fontPitch)? ;
 style-font-face-attlist ::= (style:font-charset::textEncoding)? ;
style-num-letter-sync-attlist ::= (style:num-letter-sync::boolean)? ;
common-field-fixed-attlist ::= (text:fixed::boolean)? ;
draw-stroke-dash-attlist ::= draw:name::styleName ;
 draw-stroke-dash-attlist ::= (draw:display-name::string)? ;
 draw-stroke-dash-attlist ::= (draw:style::("rect" | "round"))? ;
 draw-stroke-dash-attlist ::= (draw:dots1::integer)? (draw:dots1-length::length)? (draw:dots2::integer)? (draw:dots2-length::length)? ;
 draw-stroke-dash-attlist ::= (draw:distance::length)? ;
style-master-page-attlist ::= style:name::styleName ;
 style-master-page-attlist ::= (style:display-name::string)? ;
 style-master-page-attlist ::= style:page-layout-name::styleNameRef ;
 style-master-page-attlist ::= (draw:style-name::styleNameRef)? ;
 style-master-page-attlist ::= (style:next-style-name::styleNameRef)? ;
number-month-attlist ::= (number:textual::boolean)? ;
 number-month-attlist ::= (number:possessive-form::boolean)? ;
 number-month-attlist ::= (number:style::("short" | "long"))? ;
table-cell-content-deletion ::= table:cell-content-deletion::((table:id::string)? table-cell-address? table-change-track-table-cell?) ;
chart-data-point-attlist ::= (chart:repeated::nonNegativeInteger)? ;
 chart-data-point-attlist ::= (chart:style-name::styleNameRef)? ;
number-seconds-attlist ::= (number:style::("short" | "long"))? ;
 number-seconds-attlist ::= (number:decimal-places::integer)? ;
table-deletion ::= table:deletion::(table-deletion-attlist common-table-change-attlist office-change-info table-dependencies? table-deletions? table-cut-offs?) ;
text-index-entry-bibliography-attrs ::= (text:style-name::styleNameRef)? ;
 text-index-entry-bibliography-attrs ::= text:bibliography-data-field::("address" | "annote" | "author" | "bibliography-type" | "booktitle" | "chapter" | "custom1" | "custom2" | "custom3" | "custom4" | "custom5" | "edition" | "editor" | "howpublished" | "identifier" | "institution" | "isbn" | "issn" | "journal" | "month" | "note" | "number" | "organizations" | "pages" | "publisher" | "report-type" | "school" | "series" | "title" | "url" | "volume" | "year") ;
text-index-entry-chapter-attrs ::= (text:display::("name" | "number" | "number-and-name"))? ;
common-field-data-style-name-attlist ::= (style:data-style-name::styleNameRef)? ;
style-column-attlist ::= style:rel-width::relativeLength ;
 style-column-attlist ::= (fo:start-indent::length)? ;
 style-column-attlist ::= (fo:end-indent::length)? ;
 style-column-attlist ::= (fo:space-before::length)? ;
 style-column-attlist ::= (fo:space-after::length)? ;
common-fill-timing-attlist ::= (smil:fill::("remove" | "freeze" | "hold" | "auto" | "default" | "transition"))? ;
common-data-style-attlist ::= style:name::styleName ;
 common-data-style-attlist ::= (number:language::languageCode)? ;
 common-data-style-attlist ::= (number:country::countryCode)? ;
 common-data-style-attlist ::= (number:title::string())? ;
 common-data-style-attlist ::= (style:volatile::boolean)? ;
 common-data-style-attlist ::= (number:transliteration-format::string)? ;
 common-data-style-attlist ::= (number:transliteration-language::countryCode)? ;
 common-data-style-attlist ::= (number:transliteration-country::countryCode)? ;
 common-data-style-attlist ::= (number:transliteration-style::("short" | "medium" | "long"))? ;
office-annotation ::= office:annotation::(office-annotation-attlist draw-caption-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist dc-creator? dc-date? meta-date-string? (text-p | text-list)*) ;
common-anim-target-attlist ::= (smil:targetElement::IDREF)? ;
 common-anim-target-attlist ::= (anim:sub-item::string)? ;
draw-line ::= draw:line::(draw-line-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
style-ruby-properties-attlist ::= (style:ruby-position::("above" | "below"))? ;
 style-ruby-properties-attlist ::= (style:ruby-align::("left" | "center" | "right" | "distribute-letter" | "distribute-space"))? ;
image-data ::= (form:image-data::anyURI)? ;
number-scientific-number-attlist ::= (number:min-exponent-digits::integer)? ;
text-section-source-attr ::= (xlink:href::anyURI (xlink:type::"simple")? (xlink:show::"embed")?)? ;
 text-section-source-attr ::= (text:section-name::string)? ;
 text-section-source-attr ::= (text:filter-name::string)? ;
table-sort-by-attlist ::= table:field-number::nonNegativeInteger ;
 table-sort-by-attlist ::= (table:data-type::("text" | "number" | "automatic" | string))? ;
 table-sort-by-attlist ::= (table:order::("ascending" | "descending"))? ;
table-source-service-attlist ::= table:name::string ;
 table-source-service-attlist ::= table:source-name::string ;
 table-source-service-attlist ::= table:object-name::string ;
 table-source-service-attlist ::= (table:user-name::string)? ;
 table-source-service-attlist ::= (table:password::string)? ;
common-calendar-attlist ::= (number:calendar::("gregorian" | "gengou" | "ROC" | "hanja_yoil" | "hanja" | "hijri" | "jewish" | "buddhist" | string))? ;
office-annotation-attlist ::= (office:display::boolean)? ;
common-dr3d-transform-attlist ::= (dr3d:transform::string())? ;
dr3d-scene-attlist ::= (dr3d:vrp::vector3D)? (dr3d:vpn::vector3D)? (dr3d:vup::vector3D)? ;
 dr3d-scene-attlist ::= (dr3d:projection::("parallel" | "perspective"))? ;
 dr3d-scene-attlist ::= (dr3d:distance::length)? ;
 dr3d-scene-attlist ::= (dr3d:focal-length::length)? ;
 dr3d-scene-attlist ::= (dr3d:shadow-slant::nonNegativeInteger)? ;
 dr3d-scene-attlist ::= (dr3d:shade-mode::("flat" | "phong" | "gouraud" | "draft"))? ;
 dr3d-scene-attlist ::= (dr3d:ambient-color::color)? ;
 dr3d-scene-attlist ::= (dr3d:lighting-mode::boolean)? ;
table-cell-content-change ::= table:cell-content-change::(common-table-change-attlist table-cell-address office-change-info table-dependencies? table-deletions? table-previous) ;
chart-legend-attlist ::= (chart:legend-position::("start" | "end" | "top" | "bottom") (chart:legend-align::("start" | "center" | "end"))?) | (chart:legend-position::("top-start" | "bottom-start" | "top-end" | "bottom-end")) | Îµ ;
 chart-legend-attlist ::= common-draw-position-attlist ;
 chart-legend-attlist ::= (style:legend-expansion::("wide" | "high" | "balanced")) | (style:legend-expansion::"custom" style:legend-expansion-aspect-ratio::double) | Îµ ;
 chart-legend-attlist ::= (chart:style-name::styleNameRef)? ;
draw-rect ::= draw:rect::(draw-rect-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
table-subtotal-rules ::= table:subtotal-rules::(table-subtotal-rules-attlist table-sort-groups? table-subtotal-rule*) ;
text-alphabetical-index-source ::= text:alphabetical-index-source::(text-alphabetical-index-source-attrs text-index-title-template? text-alphabetical-index-entry-template*) ;
common-draw-z-index-attlist ::= (draw:z-index::nonNegativeInteger)? ;
chart-plot-area ::= chart:plot-area::(chart-plot-area-attlist dr3d-light* chart-axis* chart-series* chart-stock-gain-marker? chart-stock-loss-marker? chart-stock-range-line? chart-wall? chart-floor?) ;
for ::= (form:for::string)? ;
chart-grid-attlist ::= (chart:class::("major" | "minor"))? ;
 chart-grid-attlist ::= (chart:style-name::styleNameRef)? ;
style-graphic-properties-attlist ::= (draw:stroke::("none" | "dash" | "solid"))? ;
 style-graphic-properties-attlist ::= (draw:stroke-dash::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:stroke-dash-names::styleNameRefs)? ;
 style-graphic-properties-attlist ::= (svg:stroke-width::length)? ;
 style-graphic-properties-attlist ::= (svg:stroke-color::color)? ;
 style-graphic-properties-attlist ::= (draw:marker-start::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:marker-end::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:marker-start-width::length)? ;
 style-graphic-properties-attlist ::= (draw:marker-end-width::length)? ;
 style-graphic-properties-attlist ::= (draw:marker-start-center::boolean)? ;
 style-graphic-properties-attlist ::= (draw:marker-end-center::boolean)? ;
 style-graphic-properties-attlist ::= (svg:stroke-opacity::(string() | percent))? ;
 style-graphic-properties-attlist ::= (draw:stroke-linejoin::("miter" | "round" | "bevel" | "middle" | "none" | "inherit"))? ;
 style-graphic-properties-attlist ::= (draw:symbol-color::color)? ;
 style-graphic-properties-attlist ::= (text:animation::("none" | "scroll" | "alternate" | "slide"))? ;
 style-graphic-properties-attlist ::= (text:animation-direction::("left" | "right" | "up" | "down"))? ;
 style-graphic-properties-attlist ::= (text:animation-start-inside::boolean)? ;
 style-graphic-properties-attlist ::= (text:animation-stop-inside::boolean)? ;
 style-graphic-properties-attlist ::= (text:animation-repeat::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (text:animation-delay::duration)? ;
 style-graphic-properties-attlist ::= (text:animation-steps::length)? ;
 style-graphic-properties-attlist ::= (draw:auto-grow-width::boolean)? (draw:auto-grow-height::boolean)? ;
 style-graphic-properties-attlist ::= (draw:fit-to-size::boolean)? ;
 style-graphic-properties-attlist ::= (draw:fit-to-contour::boolean)? ;
 style-graphic-properties-attlist ::= (draw:textarea-vertical-align::("top" | "middle" | "bottom" | "justify"))? ;
 style-graphic-properties-attlist ::= (draw:textarea-horizontal-align::("left" | "center" | "right" | "justify"))? ;
 style-graphic-properties-attlist ::= (fo:wrap-option::("no-wrap" | "wrap"))? ;
 style-graphic-properties-attlist ::= (draw:color-mode::("greyscale" | "mono" | "watermark" | "standard"))? ;
 style-graphic-properties-attlist ::= (draw:color-inversion::boolean)? ;
 style-graphic-properties-attlist ::= (draw:luminance::percent)? ;
 style-graphic-properties-attlist ::= (draw:contrast::percent)? ;
 style-graphic-properties-attlist ::= (draw:gamma::percent)? ;
 style-graphic-properties-attlist ::= (draw:red::percent)? ;
 style-graphic-properties-attlist ::= (draw:green::percent)? ;
 style-graphic-properties-attlist ::= (draw:blue::percent)? ;
 style-graphic-properties-attlist ::= (draw:image-opacity::percent)? ;
 style-graphic-properties-attlist ::= (draw:shadow::("visible" | "hidden"))? ;
 style-graphic-properties-attlist ::= (draw:shadow-offset-x::length)? (draw:shadow-offset-y::length)? ;
 style-graphic-properties-attlist ::= (draw:shadow-color::color)? ;
 style-graphic-properties-attlist ::= (draw:shadow-opacity::percent)? ;
 style-graphic-properties-attlist ::= (draw:start-line-spacing-horizontal::distance)? (draw:start-line-spacing-vertical::distance)? ;
 style-graphic-properties-attlist ::= (draw:end-line-spacing-horizontal::distance)? (draw:end-line-spacing-vertical::distance)? ;
 style-graphic-properties-attlist ::= (draw:line-distance::distance)? ;
 style-graphic-properties-attlist ::= (draw:guide-overhang::length)? ;
 style-graphic-properties-attlist ::= (draw:guide-distance::distance)? ;
 style-graphic-properties-attlist ::= (draw:start-guide::length)? ;
 style-graphic-properties-attlist ::= (draw:end-guide::length)? ;
 style-graphic-properties-attlist ::= (draw:placing::("below" | "above"))? ;
 style-graphic-properties-attlist ::= (draw:parallel::boolean)? ;
 style-graphic-properties-attlist ::= (draw:measure-align::("automatic" | "left-outside" | "inside" | "right-outside"))? (draw:measure-vertical-align::("automatic" | "above" | "below" | "center"))? ;
 style-graphic-properties-attlist ::= (draw:unit::("automatic" | "mm" | "cm" | "m" | "km" | "pt" | "pc" | "inch" | "ft" | "mi"))? ;
 style-graphic-properties-attlist ::= (draw:show-unit::boolean)? ;
 style-graphic-properties-attlist ::= (draw:decimal-places::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (draw:caption-type::("straight-line" | "angled-line" | "angled-connector-line"))? ;
 style-graphic-properties-attlist ::= (draw:caption-angle-type::("fixed" | "free"))? ;
 style-graphic-properties-attlist ::= (draw:caption-angle::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (draw:caption-gap::distance)? ;
 style-graphic-properties-attlist ::= (draw:caption-escape-direction::("horizontal" | "vertical" | "auto"))? ;
 style-graphic-properties-attlist ::= (draw:caption-escape::(length | percent))? ;
 style-graphic-properties-attlist ::= (draw:caption-line-length::length)? ;
 style-graphic-properties-attlist ::= (draw:caption-fit-line-length::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:horizontal-segments::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:vertical-segments::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:edge-rounding::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:edge-rounding-mode::("correct" | "attractive"))? ;
 style-graphic-properties-attlist ::= (dr3d:back-scale::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:depth::length)? ;
 style-graphic-properties-attlist ::= (dr3d:backface-culling::("enabled" | "disabled"))? ;
 style-graphic-properties-attlist ::= (dr3d:end-angle::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:close-front::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:close-back::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:lighting-mode::("standard" | "double-sided"))? ;
 style-graphic-properties-attlist ::= (dr3d:normals-kind::("object" | "flat" | "sphere"))? ;
 style-graphic-properties-attlist ::= (dr3d:normals-direction::("normal" | "inverse"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-generation-mode-x::("object" | "parallel" | "sphere"))? (dr3d:texture-generation-mode-y::("object" | "parallel" | "sphere"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-kind::("luminance" | "intesity" | "color"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-filter::("enabled" | "disabled"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-mode::("replace" | "modulate" | "blend"))? ;
 style-graphic-properties-attlist ::= (dr3d:ambient-color::color)? (dr3d:emissive-color::color)? (dr3d:specular-color::color)? (dr3d:diffuse-color::color)? ;
 style-graphic-properties-attlist ::= (dr3d:shininess::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:shadow::("visible" | "hidden"))? ;
 style-graphic-properties-attlist ::= common-draw-rel-size-attlist (fo:min-width::(length | percent))? ;
 style-graphic-properties-attlist ::= (fo:min-height::(length | percent))? ;
 style-graphic-properties-attlist ::= (fo:max-height::(length | percent))? (fo:max-width::(length | percent))? ;
 style-graphic-properties-attlist ::= common-horizontal-margin-attlist ;
 style-graphic-properties-attlist ::= common-vertical-margin-attlist ;
 style-graphic-properties-attlist ::= common-margin-attlist ;
 style-graphic-properties-attlist ::= (style:print-content::boolean)? ;
 style-graphic-properties-attlist ::= (style:protect::("none" | (("content" | "position" | "size")+)))? ;
 style-graphic-properties-attlist ::= (style:horizontal-pos::("left" | "center" | "right" | "from-left" | "inside" | "outside" | "from-inside"))? (svg:x::coordinate)? ;
 style-graphic-properties-attlist ::= (style:horizontal-rel::("page" | "page-content" | "page-start-margin" | "page-end-margin" | "frame" | "frame-content" | "frame-start-margin" | "frame-end-margin" | "paragraph" | "paragraph-content" | "paragraph-start-margin" | "paragraph-end-margin" | "char"))? ;
 style-graphic-properties-attlist ::= common-vertical-pos-attlist ;
 style-graphic-properties-attlist ::= common-vertical-rel-attlist ;
 style-graphic-properties-attlist ::= common-text-anchor-attlist ;
 style-graphic-properties-attlist ::= common-border-attlist ;
 style-graphic-properties-attlist ::= common-border-line-width-attlist ;
 style-graphic-properties-attlist ::= common-padding-attlist ;
 style-graphic-properties-attlist ::= common-shadow-attlist ;
 style-graphic-properties-attlist ::= common-background-color-attlist ;
 style-graphic-properties-attlist ::= (style:editable::boolean)? ;
 style-graphic-properties-attlist ::= (style:wrap::("none" | "left" | "right" | "parallel" | "dynamic" | "run-through" | "biggest"))? ;
 style-graphic-properties-attlist ::= (style:wrap-dynamic-treshold::nonNegativeLength)? ;
 style-graphic-properties-attlist ::= (style:number-wrapped-paragraphs::("no-limit" | positiveInteger))? ;
 style-graphic-properties-attlist ::= (style:wrap-contour::boolean)? ;
 style-graphic-properties-attlist ::= (style:wrap-contour-mode::("full" | "outside"))? ;
 style-graphic-properties-attlist ::= (style:run-through::("foreground" | "background"))? ;
 style-graphic-properties-attlist ::= (style:flow-with-text::boolean)? ;
 style-graphic-properties-attlist ::= (style:overflow-behavior::("clip" | "auto-create-new-frame"))? ;
 style-graphic-properties-attlist ::= (style:mirror::("none" | "vertical" | horizontal-mirror | ("vertical" horizontal-mirror) | (horizontal-mirror "vertical")))? ;
 style-graphic-properties-attlist ::= (fo:clip::string)? ;
 style-graphic-properties-attlist ::= (draw:wrap-influence-on-position::("iterative" | "once-concurrent" | "once-successive"))? ;
 style-graphic-properties-attlist ::= (draw:frame-display-scrollbar::boolean)? ;
 style-graphic-properties-attlist ::= (draw:frame-display-border::boolean)? ;
 style-graphic-properties-attlist ::= (draw:frame-margin-horizontal::nonNegativePixelLength)? (draw:frame-margin-vertical::nonNegativePixelLength)? ;
 style-graphic-properties-attlist ::= (draw:visible-area-left::nonNegativeLength)? (draw:visible-area-top::nonNegativeLength)? (draw:visible-area-width::positiveLength)? (draw:visible-area-height::positiveLength)? ;
 style-graphic-properties-attlist ::= (draw:ole-draw-aspect::nonNegativeInteger)? ;
office-font-face-decls ::= (office:font-face-decls::(style-font-face*))? ;
number-era-attlist ::= (number:style::("short" | "long"))? ;
number-percentage-style ::= number:percentage-style::(common-data-style-attlist style-text-properties? number-text? number-and-text? style-map*) ;
text-hidden-text-attlist ::= text:condition::formula ;
 text-hidden-text-attlist ::= text:string-value::string ;
 text-hidden-text-attlist ::= (text:is-hidden::boolean)? ;
table-named-expression-attlist ::= table:name::string table:expression::string (table:base-cell-address::cellAddress)? ;
chart-plot-area-attlist ::= common-draw-position-attlist common-draw-size-attlist ;
 chart-plot-area-attlist ::= (chart:style-name::styleNameRef)? ;
 chart-plot-area-attlist ::= (table:cell-range-address::cellRangeAddress)? ;
 chart-plot-area-attlist ::= (chart:data-source-has-labels::("none" | "row" | "column" | "both"))? ;
 chart-plot-area-attlist ::= dr3d-scene-attlist common-dr3d-transform-attlist ;
script-event-listener-attlist ::= script:event-name::string ;
 script-event-listener-attlist ::= script:language::string ;
 script-event-listener-attlist ::= (script:macro-name::string) | (xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")?) ;
draw-fill-image ::= draw:fill-image::(draw-fill-image-attlist xlink:href::anyURI (xlink:type::"simple")? (xlink:show::"embed")? (xlink:actuate::"onLoad")?) ;
form-formatted-text-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist ;
 form-formatted-text-attlist ::= (form:max-value::string)? ;
 form-formatted-text-attlist ::= (form:min-value::string)? ;
 form-formatted-text-attlist ::= (form:validation::boolean)? ;
draw-param-attlist ::= (draw:name::string())? ;
 draw-param-attlist ::= (draw:value::string())? ;
common-begin-end-timing-attlist ::= (smil:begin::string)? ;
 common-begin-end-timing-attlist ::= (smil:end::string)? ;
common-presentation-effect-attlist ::= draw:shape-id::IDREF ;
 common-presentation-effect-attlist ::= (presentation:effect::presentationEffects)? ;
 common-presentation-effect-attlist ::= (presentation:direction::presentationEffectDirections)? ;
 common-presentation-effect-attlist ::= (presentation:speed::presentationSpeeds)? ;
 common-presentation-effect-attlist ::= (presentation:delay::duration)? ;
 common-presentation-effect-attlist ::= (presentation:start-scale::percent)? ;
 common-presentation-effect-attlist ::= (presentation:path-id::string())? ;
style-columns-attlist ::= fo:column-count::positiveInteger ;
 style-columns-attlist ::= (fo:column-gap::length)? ;
text-a-attlist ::= (office:name::string)? ;
 text-a-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? ;
 text-a-attlist ::= (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? ;
 text-a-attlist ::= (text:style-name::styleNameRef)? (text:visited-style-name::styleNameRef)? ;
style-header-footer-attlist ::= (style:dynamic-spacing::boolean)? ;
anin-iterate-attlist ::= (smil:targetElement::IDREF)? ;
 anin-iterate-attlist ::= (anim:iterate-type::string)? ;
 anin-iterate-attlist ::= (anim:iterate-interval::duration)? ;
style-graphic-fill-properties-attlist ::= (draw:fill::("none" | "solid" | "bitmap" | "gradient" | "hatch"))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-color::color)? ;
 style-graphic-fill-properties-attlist ::= (draw:secondary-fill-color::color)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-gradient-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (draw:gradient-step-count::nonNegativeInteger)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-hatch-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-hatch-solid::boolean)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (style:repeat::("no-repeat" | "repeat" | "stretch"))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-width::(length | percent))? (draw:fill-image-height::(length | percent))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-ref-point-x::percent)? (draw:fill-image-ref-point-y::percent)? (draw:fill-image-ref-point::("top-left" | "top" | "top-right" | "left" | "center" | "right" | "bottom-left" | "bottom" | "bottom-right"))? ;
 style-graphic-fill-properties-attlist ::= (draw:tile-repeat-offset::string())? ;
 style-graphic-fill-properties-attlist ::= (draw:opacity::percent)? ;
 style-graphic-fill-properties-attlist ::= (draw:opacity-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (svg:fill-rule::("nonzero" | "evenodd"))? ;
common-draw-rel-size-attlist ::= common-draw-size-attlist (style:rel-width::(percent | "scale" | "scale-min"))? (style:rel-height::(percent | "scale" | "scale-min"))? ;
common-current-value-attlist ::= (form:current-value::string)? ;
dr3d-sphere-attlist ::= (dr3d:center::vector3D)? ;
 dr3d-sphere-attlist ::= (dr3d:size::vector3D)? ;
draw-fill-image-attlist ::= draw:name::styleName ;
 draw-fill-image-attlist ::= (draw:display-name::string)? ;
 draw-fill-image-attlist ::= (svg:width::length)? (svg:height::length)? ;
table-content-validation ::= table:content-validation::(table-validation-attlist table-help-message? (table-error-message | (table-error-macro office-event-listeners?))?) ;
table-data-pilot-level ::= table:data-pilot-level::(table-data-pilot-level-attlist table-data-pilot-subtotals? table-data-pilot-members? table-data-pilot-display-info? table-data-pilot-sort-info? table-data-pilot-layout-info?) ;
common-dur-timing-attlist ::= (smil:dur::string)? ;
chart-mean-value-attlist ::= (chart:style-name::styleNameRef)? ;
style-text-properties-attlist ::= (fo:font-variant::fontVariant)? ;
 style-text-properties-attlist ::= (fo:text-transform::("none" | "lowercase" | "uppercase" | "capitalize"))? ;
 style-text-properties-attlist ::= (fo:color::color)? ;
 style-text-properties-attlist ::= (style:use-window-font-color::boolean)? ;
 style-text-properties-attlist ::= (style:text-outline::boolean)? ;
 style-text-properties-attlist ::= (style:text-line-through-type::lineType)? ;
 style-text-properties-attlist ::= (style:text-line-through-style::lineStyle)? ;
 style-text-properties-attlist ::= (style:text-line-through-width::lineWidth)? ;
 style-text-properties-attlist ::= (style:text-line-through-color::("font-color" | color))? ;
 style-text-properties-attlist ::= (style:text-line-through-text::string)? ;
 style-text-properties-attlist ::= (style:text-line-through-text-style::styleNameRef)? ;
 style-text-properties-attlist ::= (style:text-position::(percent | "super" | "sub" percent?))? ;
 style-text-properties-attlist ::= (style:font-name::string)? (style:font-name-asian::string)? (style:font-name-complex::string)? ;
 style-text-properties-attlist ::= (fo:font-family::string)? (style:font-family-asian::string)? (style:font-family-complex::string)? ;
 style-text-properties-attlist ::= (style:font-family-generic::fontFamilyGeneric)? (style:font-family-generic-asian::fontFamilyGeneric)? (style:font-family-generic-complex::fontFamilyGeneric)? ;
 style-text-properties-attlist ::= (style:font-style-name::string)? (style:font-style-name-asian::string)? (style:font-style-name-complex::string)? ;
 style-text-properties-attlist ::= (style:font-pitch::fontPitch)? (style:font-pitch-asian::fontPitch)? (style:font-pitch-complex::fontPitch)? ;
 style-text-properties-attlist ::= (style:font-charset::textEncoding)? ;
 style-text-properties-attlist ::= (fo:font-size::(positiveLength | percent))? (style:font-size-asian::(positiveLength | percent))? (style:font-size-complex::(positiveLength | percent))? ;
 style-text-properties-attlist ::= (style:font-size-rel::length)? (style:font-size-rel-asian::length)? (style:font-size-rel-complex::length)? ;
 style-text-properties-attlist ::= (style:script-type::("latin" | "asian" | "complex" | "ignore"))? ;
 style-text-properties-attlist ::= (fo:letter-spacing::(length | "normal"))? ;
 style-text-properties-attlist ::= (fo:language::languageCode)? (style:language-asian::languageCode)? (style:language-complex::languageCode)? ;
 style-text-properties-attlist ::= (fo:country::countryCode)? (style:country-asian::countryCode)? (style:country-complex::countryCode)? ;
 style-text-properties-attlist ::= (fo:font-style::fontStyle)? (style:font-style-asian::fontStyle)? (style:font-style-complex::fontStyle)? ;
 style-text-properties-attlist ::= (style:font-relief::("none" | "embossed" | "engraved"))? ;
 style-text-properties-attlist ::= (fo:text-shadow::shadowType)? ;
 style-text-properties-attlist ::= (style:text-underline-type::lineType)? ;
 style-text-properties-attlist ::= (style:text-underline-style::lineStyle)? ;
 style-text-properties-attlist ::= (style:text-underline-width::lineWidth)? ;
 style-text-properties-attlist ::= (style:text-underline-color::("font-color" | color))? ;
 style-text-properties-attlist ::= (fo:font-weight::fontWeight)? (style:font-weight-asian::fontWeight)? (style:font-weight-complex::fontWeight)? ;
 style-text-properties-attlist ::= (style:text-underline-mode::lineMode)? ;
 style-text-properties-attlist ::= (style:text-line-through-mode::lineMode)? ;
 style-text-properties-attlist ::= (style:letter-kerning::boolean)? ;
 style-text-properties-attlist ::= (style:text-blinking::boolean)? ;
 style-text-properties-attlist ::= common-background-color-attlist ;
 style-text-properties-attlist ::= (style:text-combine::("none" | "letters" | "lines"))? ;
 style-text-properties-attlist ::= (style:text-combine-start-char::character)? (style:text-combine-end-char::character)? ;
 style-text-properties-attlist ::= (style:text-emphasize::("none" | ("none" | "accent" | "dot" | "circle" | "disc" "above" | "below")))? ;
 style-text-properties-attlist ::= (style:text-scale::percent)? ;
 style-text-properties-attlist ::= (style:text-rotation-angle::integer)? ;
 style-text-properties-attlist ::= (style:text-rotation-scale::("fixed" | "line-height"))? ;
 style-text-properties-attlist ::= (fo:hyphenate::boolean)? ;
 style-text-properties-attlist ::= (fo:hyphenation-remain-char-count::positiveInteger)? ;
 style-text-properties-attlist ::= (fo:hyphenation-push-char-count::positiveInteger)? ;
 style-text-properties-attlist ::= (text:display::"true") | (text:display::"none") | (text:display::"condition" text:condition::"none") | Îµ ;
number-time-style-attlist ::= (number:truncate-on-overflow::boolean)? ;
draw-equation-attlist ::= (draw:name::string)? ;
 draw-equation-attlist ::= (draw:formula::string)? ;
office-dde-source-attlist ::= (office:name::string)? ;
 office-dde-source-attlist ::= (office:conversion-mode::("into-default-style-data-style" | "into-english-number" | "keep-text"))? ;
text-conditional-text-attlist ::= text:condition::formula ;
 text-conditional-text-attlist ::= text:string-value-if-true::string ;
 text-conditional-text-attlist ::= text:string-value-if-false::string ;
 text-conditional-text-attlist ::= (text:current-value::boolean)? ;
text-object-index-source ::= text:object-index-source::(text-object-index-source-attrs text-index-title-template? text-object-index-entry-template?) ;
style-table-column-properties-attlist ::= (style:column-width::positiveLength)? (style:rel-column-width::relativeLength)? ;
 style-table-column-properties-attlist ::= (style:use-optimal-column-width::boolean)? ;
 style-table-column-properties-attlist ::= common-break-attlist ;
office-meta-data ::= meta:generator::string ;
 office-meta-data ::= dc:title::string ;
 office-meta-data ::= dc:description::string ;
 office-meta-data ::= dc:subject::string ;
 office-meta-data ::= meta:keyword::string ;
 office-meta-data ::= meta:initial-creator::string ;
 office-meta-data ::= dc-creator ;
 office-meta-data ::= meta:printed-by::string ;
 office-meta-data ::= meta:creation-date::dateTime ;
 office-meta-data ::= dc-date ;
 office-meta-data ::= meta:print-date::dateTime ;
 office-meta-data ::= meta:template::(xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? (xlink:title::string)? (meta:date::dateTime)?) ;
 office-meta-data ::= meta:auto-reload::((xlink:type::"simple")? (xlink:show::"replace")? (xlink:actuate::"onLoad")? (xlink:href::anyURI)? (meta:delay::duration)?) ;
 office-meta-data ::= meta:hyperlink-behaviour::((office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))?) ;
 office-meta-data ::= dc:language::language ;
 office-meta-data ::= meta:editing-cycles::nonNegativeInteger ;
 office-meta-data ::= meta:editing-duration::duration ;
 office-meta-data ::= meta:document-statistic::((meta:page-count::nonNegativeInteger)? (meta:table-count::nonNegativeInteger)? (meta:draw-count::nonNegativeInteger)? (meta:image-count::nonNegativeInteger)? (meta:ole-object-count::nonNegativeInteger)? (meta:paragraph-count::nonNegativeInteger)? (meta:word-count::nonNegativeInteger)? (meta:character-count::nonNegativeInteger)? (frame-count::nonNegativeInteger)? (sentence-count::nonNegativeInteger)? (syllable-count::nonNegativeInteger)? (non-whitespace-character-count::nonNegativeInteger)? (meta:row-count::nonNegativeInteger)? (meta:cell-count::nonNegativeInteger)? (meta:object-count::nonNegativeInteger)?) ;
 office-meta-data ::= meta:user-defined::(meta:name::string (meta:value-type::"float" double) | (meta:value-type::"date" dateOrDateTime) | (meta:value-type::"time" duration) | (meta:value-type::"boolean" boolean) | (meta:value-type::"string" string) | string()) ;
text-ref-content ::= (text:reference-format::("page" | "chapter" | "direction" | "text"))? ;
form-checkbox-attlist ::= form-control-attlist common-disabled-attlist label common-printable-attlist common-tab-attlist common-title-attlist common-value-attlist common-data-field-attlist common-form-visual-effect-attlist common-form-relative-image-position-attlist ;
 form-checkbox-attlist ::= (form:current-state::states)? ;
 form-checkbox-attlist ::= (form:is-tristate::boolean)? ;
 form-checkbox-attlist ::= (form:state::states)? ;
text-hidden-paragraph-attlist ::= text:condition::formula ;
 text-hidden-paragraph-attlist ::= (text:is-hidden::boolean)? ;
presentation-sound ::= presentation:sound::(presentation-sound-attlist xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? (xlink:show::("new" | "replace"))?) ;
text-list-item-attr ::= (text:start-value::nonNegativeInteger)? ;
selected ::= (form:selected::boolean)? ;
chart-title-attlist ::= (table:cell-range::cellAddress)? ;
 chart-title-attlist ::= common-draw-position-attlist ;
 chart-title-attlist ::= (chart:style-name::styleNameRef)? ;
common-draw-circle-ellipse-attlist ::= (svg:cx::coordinate svg:cy::coordinate)? ;
 common-draw-circle-ellipse-attlist ::= (draw:kind::("full" | "section" | "cut" | "arc"))? ;
 common-draw-circle-ellipse-attlist ::= (draw:start-angle::double)? ;
 common-draw-circle-ellipse-attlist ::= (draw:end-angle::double)? ;
text-page-number-attlist ::= common-field-num-format-attlist common-field-fixed-attlist ;
 text-page-number-attlist ::= (text:page-adjust::integer)? ;
 text-page-number-attlist ::= (text:select-page::("previous" | "current" | "next"))? ;
style-background-image ::= (style:background-image::(style-background-image-attlist common-draw-data-attlist | office-binary-data | Îµ))? ;
dr3d-cube-attlist ::= (dr3d:min-edge::vector3D)? (dr3d:max-edge::vector3D)? ;
form-property-type-and-value-list ::= (office:value-type::"float" (form:list-value::(office:value::double))*) | (office:value-type::"percentage" (form:list-value::(office:value::double))*) | (office:value-type::"currency" (form:list-value::(office:value::double (office:currency::string)?))*) | (office:value-type::"date" (form:list-value::(office:date-value::dateOrDateTime))*) | (office:value-type::"time" (form:list-value::(office:time-value::duration))*) | (office:value-type::"boolean" (form:list-value::(office:boolean-value::boolean))*) | (office:value-type::"string" (form:list-value::(office:string-value::string))*) | (office:value-type::"void") ;
draw-enhanced-geometry-attlist ::= (draw:type::custom-shape-type)? ;
 draw-enhanced-geometry-attlist ::= (svg:viewBox::(integer integer integer integer))? ;
 draw-enhanced-geometry-attlist ::= (draw:mirror-vertical::boolean)? (draw:mirror-horizontal::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-rotate-angle::double)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:concentric-gradient-fill-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-brightness::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-depth::(length double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-diffusion::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-number-of-line-segments::integer)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-light-face::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-harsh::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-harsh::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-level::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-level::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-direction::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-direction::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-metal::boolean)? ;
 draw-enhanced-geometry-attlist ::= (dr3d:shade-mode::("flat" | "phong" | "gouraud" | "draft"))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-rotation-angle::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-rotation-center::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-shininess::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-skew::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-specularity::percent)? ;
 draw-enhanced-geometry-attlist ::= (dr3d:projection::("parallel" | "perspective"))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-viewpoint::point3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-origin::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-color::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:enhanced-path::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:path-stretchpoint-x::double)? (draw:path-stretchpoint-y::double)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-areas::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-points::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-point-type::("none" | "segments" | "rectangle"))? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-point-leaving-directions::string())? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-mode::("normal" | "path" | "shape"))? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-scale::("path" | "shape"))? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-same-letter-heights::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:modifiers::string)? ;
style-presentation-page-layout ::= style:presentation-page-layout::(style:name::styleName (style:display-name::string)? presentation-placeholder*) ;
text-index-entry-page-number ::= text:index-entry-page-number::((text:style-name::styleNameRef)?) ;
style-drop-cap ::= (style:drop-cap::style-drop-cap-attlist)? ;
text-alphabetical-index-auto-mark-file ::= text:alphabetical-index-auto-mark-file::(xlink:href::anyURI (xlink:type::"simple")?) ;
presentation-sound-attlist ::= (presentation:play-full::boolean)? ;
draw-gradient-attlist ::= (draw:start-color::color)? (draw:end-color::color)? ;
 draw-gradient-attlist ::= (draw:start-intensity::percent)? (draw:end-intensity::percent)? ;
style-background-image-attlist ::= (style:repeat::("no-repeat" | "repeat" | "stretch"))? ;
 style-background-image-attlist ::= (style:position::("left" | "center" | "right" | "top" | "bottom" | (horiBackPos vertBackPos) | (vertBackPos horiBackPos)))? ;
 style-background-image-attlist ::= (style:filter-name::string)? ;
 style-background-image-attlist ::= (draw:opacity::percent)? ;
common-writing-mode-attlist ::= (style:writing-mode::("lr-tb" | "rl-tb" | "tb-rl" | "tb-lr" | "lr" | "rl" | "tb" | "page"))? ;
text-illustration-index-source-attrs ::= text-index-scope-attr ;
 text-illustration-index-source-attrs ::= text-relative-tab-stop-position-attr ;
 text-illustration-index-source-attrs ::= (text:use-caption::boolean)? ;
 text-illustration-index-source-attrs ::= (text:caption-sequence-name::string)? ;
 text-illustration-index-source-attrs ::= (text:caption-sequence-format::("text" | "category-and-value" | "caption"))? ;
text-sequence-decl-attlist ::= common-field-name-attlist ;
 text-sequence-decl-attlist ::= text:display-outline-level::nonNegativeInteger ;
 text-sequence-decl-attlist ::= (text:separation-character::character)? ;
svg-font-face-name ::= svg:font-face-name::((name::string())?) ;
bound-column ::= (form:bound-column::string)? ;
xforms-bind-attlist ::= (xforms:bind::string)? ;
style-drop-cap-attlist ::= (style:length::("word" | positiveInteger))? ;
 style-drop-cap-attlist ::= (style:lines::positiveInteger)? ;
 style-drop-cap-attlist ::= (style:distance::length)? ;
 style-drop-cap-attlist ::= (style:style-name::styleNameRef)? ;
table-linked-source-attlist ::= (xlink:type::"simple")? (xlink:actuate::"onRequest")? xlink:href::anyURI ;
 table-linked-source-attlist ::= (table:filter-name::string)? ;
 table-linked-source-attlist ::= (table:filter-options::string)? ;
 table-linked-source-attlist ::= (table:refresh-delay::duration)? ;
text-tracked-changes ::= (text:tracked-changes::(text-tracked-changes-attr text-changed-region*))? ;
text-index-entry-link-end ::= text:index-entry-link-end::((text:style-name::styleNameRef)?) ;
text-outline-level-style ::= text:outline-level-style::(text-outline-level-style-attlist style-list-level-properties? style-text-properties?) ;
number-hours-attlist ::= (number:style::("short" | "long"))? ;
text-list-style-attr ::= style:name::styleName ;
 text-list-style-attr ::= (style:display-name::string)? ;
 text-list-style-attr ::= (text:consecutive-numbering::boolean)? ;
common-presentation-header-footer-attlist ::= (presentation:use-header-name::string)? ;
 common-presentation-header-footer-attlist ::= (presentation:use-footer-name::string)? ;
 common-presentation-header-footer-attlist ::= (presentation:use-date-time-name::string)? ;
sectionAttr ::= (text:style-name::styleNameRef)? ;
 sectionAttr ::= text:name::string ;
 sectionAttr ::= (text:protected::boolean)? ;
 sectionAttr ::= (text:protection-key::string)? ;
office-meta ::= (office:meta::office-meta-content)? ;
draw-opacity-attlist ::= (draw:start::percent)? (draw:end::percent)? ;
style-table-row-properties-attlist ::= (style:row-height::positiveLength)? (style:min-row-height::nonNegativeLength)? ;
 style-table-row-properties-attlist ::= (style:use-optimal-row-height::boolean)? ;
 style-table-row-properties-attlist ::= common-background-color-attlist ;
 style-table-row-properties-attlist ::= common-break-attlist ;
 style-table-row-properties-attlist ::= (fo:keep-together::("auto" | "always"))? ;
common-auto-reorder-attlist ::= (number:automatic-order::boolean)? ;
target-location ::= (xlink:href::anyURI)? ;
current-selected ::= (form:current-selected::boolean)? ;
draw-circle-attlist ::= (svg:r::length)? ;
chart-footer ::= chart:footer::(chart-title-attlist text-p?) ;
text-decls ::= (text:variable-decls::(text-variable-decl*))? (text:sequence-decls::(text-sequence-decl*))? (text:user-field-decls::(text-user-field-decl*))? (text:dde-connection-decls::(text-dde-connection-decl*))? text-alphabetical-index-auto-mark-file? ;
common-stock-marker-attlist ::= (chart:style-name::styleNameRef)? ;
form-number-attlist ::= (form:value::double)? ;
 form-number-attlist ::= (form:current-value::double)? ;
 form-number-attlist ::= (form:min-value::double)? ;
 form-number-attlist ::= (form:max-value::double)? ;
chart-regression-curve-attlist ::= (chart:style-name::styleNameRef)? ;
common-dde-connection-decl-attlist ::= office:dde-application::string ;
 common-dde-connection-decl-attlist ::= office:dde-topic::string ;
 common-dde-connection-decl-attlist ::= office:dde-item::string ;
 common-dde-connection-decl-attlist ::= (office:automatic-update::boolean)? ;
common-value-and-type-attlist ::= (office:value-type::"float" office:value::double) | (office:value-type::"percentage" office:value::double) | (office:value-type::"currency" office:value::double (office:currency::string)?) | (office:value-type::"date" office:date-value::dateOrDateTime) | (office:value-type::"time" office:time-value::duration) | (office:value-type::"boolean" office:boolean-value::boolean) | (office:value-type::"string" (office:string-value::string)?) ;
text-time-attlist ::= common-field-fixed-attlist common-field-data-style-name-attlist ;
 text-time-attlist ::= (text:time-value::timeOrDateTime)? ;
 text-time-attlist ::= (text:time-adjust::duration)? ;
common-number-attlist ::= (number:min-integer-digits::integer)? ;
 common-number-attlist ::= (number:grouping::boolean)? ;
draw-caption ::= draw:caption::(draw-caption-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
common-decimal-places-attlist ::= (number:decimal-places::integer)? ;
table-functions ::= table-named-expressions? table-database-ranges? table-data-pilot-tables? table-consolidation? table-dde-links? ;
form-combobox-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist dropdown common-maxlength-attlist common-printable-attlist common-readonly-attlist size common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist list-source list-source-type ;
 form-combobox-attlist ::= (form:auto-complete::boolean)? ;
common-page-number-attlist ::= (style:page-number::positiveInteger)? ;
text-database-next-attlist ::= common-field-database-table ;
 text-database-next-attlist ::= (text:condition::formula)? ;
common-vertical-rel-attlist ::= (style:vertical-rel::("page" | "page-content" | "frame" | "frame-content" | "paragraph" | "paragraph-content" | "char" | "line" | "baseline" | "text"))? ;
form-listbox-attlist ::= form-control-attlist common-disabled-attlist dropdown common-printable-attlist size common-tab-attlist common-title-attlist bound-column common-data-field-attlist list-source list-source-type ;
 form-listbox-attlist ::= (form:multiple::boolean)? ;
 form-listbox-attlist ::= (form:xforms-list-source::string)? ;
style-table-cell-properties-attlist ::= (style:vertical-align::("top" | "middle" | "bottom" | "automatic"))? ;
 style-table-cell-properties-attlist ::= (style:text-align-source::("fix" | "value-type"))? ;
 style-table-cell-properties-attlist ::= common-style-direction-attlist ;
 style-table-cell-properties-attlist ::= (style:glyph-orientation-vertical::("auto" | "0"))? ;
 style-table-cell-properties-attlist ::= common-shadow-attlist ;
 style-table-cell-properties-attlist ::= common-background-color-attlist ;
 style-table-cell-properties-attlist ::= common-border-attlist ;
 style-table-cell-properties-attlist ::= (style:diagonal-tl-br::string)? (style:diagonal-tl-br-widths::borderWidths)? (style:diagonal-bl-tr::string)? (style:diagonal-bl-tr-widths::borderWidths)? ;
 style-table-cell-properties-attlist ::= common-border-line-width-attlist ;
 style-table-cell-properties-attlist ::= common-padding-attlist ;
 style-table-cell-properties-attlist ::= (fo:wrap-option::("no-wrap" | "wrap"))? ;
 style-table-cell-properties-attlist ::= common-rotation-angle-attlist ;
 style-table-cell-properties-attlist ::= (style:rotation-align::("none" | "bottom" | "top" | "center"))? ;
 style-table-cell-properties-attlist ::= (style:cell-protect::("none" | "hidden-and-protected" | (("protected" | "formula-hidden")+)))? ;
 style-table-cell-properties-attlist ::= (style:print-content::boolean)? ;
 style-table-cell-properties-attlist ::= (style:decimal-places::nonNegativeInteger)? ;
 style-table-cell-properties-attlist ::= (style:repeat-content::boolean)? ;
 style-table-cell-properties-attlist ::= (style:shrink-to-fit::boolean)? ;
draw-ellipse ::= draw:ellipse::(common-draw-circle-ellipse-attlist draw-ellipse-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
common-draw-id-attlist ::= (draw:id::ID)? ;
text-alphabetical-index-mark-attrs ::= (text:key1::string)? (text:key2::string)? ;
 text-alphabetical-index-mark-attrs ::= (text:string-value-phonetic::string)? (text:key1-phonetic::string)? (text:key2-phonetic::string)? ;
 text-alphabetical-index-mark-attrs ::= (text:main-entry::boolean)? ;
chart-floor-attlist ::= (svg:width::length)? ;
 chart-floor-attlist ::= (chart:style-name::styleNameRef)? ;
common-field-display-value-formula-none-attlist ::= (text:display::("value" | "formula" | "none"))? ;
common-repeat-timing-attlist ::= (smil:repeatDur::string smil:repeatCount::nonNegativeInteger)? ;
form-value-range-attlist ::= form-control-attlist common-disabled-attlist common-printable-attlist common-tab-attlist common-title-attlist common-value-attlist ;
 form-value-range-attlist ::= (form:max-value::string)? ;
 form-value-range-attlist ::= (form:min-value::string)? ;
 form-value-range-attlist ::= (form:step-size::positiveInteger)? ;
 form-value-range-attlist ::= (form:page-step-size::positiveInteger)? ;
 form-value-range-attlist ::= (form:delay-for-repeat::duration)? ;
 form-value-range-attlist ::= (form:orientation::("horizontal" | "vertical"))? ;
table-database-range ::= table:database-range::(table-database-range-attlist (table-database-source-sql | table-database-source-table | table-database-source-query)? table-filter? table-sort? table-subtotal-rules?) ;
table-decls ::= table-calculation-settings? table-content-validations? table-label-ranges? ;
number-boolean-style ::= number:boolean-style::(common-data-style-attlist style-text-properties? number-text? (number-boolean number-text?)? style-map*) ;
table-error-macro ::= table:error-macro::((table:execute::boolean)?) ;
text-bibliography-source ::= text:bibliography-source::(text-index-title-template? text-bibliography-entry-template*) ;
text-index-scope-attr ::= (text:index-scope::("document" | "chapter"))? ;
text-relative-tab-stop-position-attr ::= (text:relative-tab-stop-position::boolean)? ;
text-sort-key-attlist ::= text:key::("address" | "annote" | "author" | "bibliography-type" | "booktitle" | "chapter" | "custom1" | "custom2" | "custom3" | "custom4" | "custom5" | "edition" | "editor" | "howpublished" | "identifier" | "institution" | "isbn" | "issn" | "journal" | "month" | "note" | "number" | "organizations" | "pages" | "publisher" | "report-type" | "school" | "series" | "title" | "url" | "volume" | "year") (text:sort-ascending::boolean)? ;
number-currency-symbol-attlist ::= (number:language::languageCode)? (number:country::countryCode)? ;
style-list-level-properties-attlist ::= common-text-align ;
 style-list-level-properties-attlist ::= (text:space-before::nonNegativeLength)? ;
 style-list-level-properties-attlist ::= (text:min-label-width::nonNegativeLength)? ;
 style-list-level-properties-attlist ::= (text:min-label-distance::nonNegativeLength)? ;
 style-list-level-properties-attlist ::= (style:font-name::string)? ;
 style-list-level-properties-attlist ::= (fo:width::positiveLength)? (fo:height::positiveLength)? ;
 style-list-level-properties-attlist ::= common-vertical-rel-attlist common-vertical-pos-attlist ;
text-list-level-style-number-attr ::= (text:style-name::styleNameRef)? ;
 text-list-level-style-number-attr ::= common-num-format-attlist common-num-format-prefix-suffix-attlist ;
 text-list-level-style-number-attr ::= (text:display-levels::positiveInteger)? ;
 text-list-level-style-number-attr ::= (text:start-value::positiveInteger)? ;
common-border-attlist ::= (fo:border::string)? (fo:border-top::string)? (fo:border-bottom::string)? (fo:border-left::string)? (fo:border-right::string)? ;
presentation-notes-attlist ::= (style:page-layout-name::styleNameRef)? ;
 presentation-notes-attlist ::= (draw:style-name::styleNameRef)? ;
text-index-entry-span ::= text:index-entry-span::((text:style-name::styleNameRef)? string()) ;
text-date-attlist ::= common-field-fixed-attlist common-field-data-style-name-attlist ;
 text-date-attlist ::= (text:date-value::dateOrDateTime)? ;
 text-date-attlist ::= (text:date-adjust::duration)? ;
text-user-field-decl ::= text:user-field-decl::(common-field-name-attlist common-field-formula-attlist? common-value-and-type-attlist) ;
currency-symbol-and-text ::= number-currency-symbol number-text? ;
table-database-range-attlist ::= (table:name::string)? ;
 table-database-range-attlist ::= (table:is-selection::boolean)? ;
 table-database-range-attlist ::= (table:on-update-keep-styles::boolean)? ;
 table-database-range-attlist ::= (table:on-update-keep-size::boolean)? ;
 table-database-range-attlist ::= (table:has-persistent-data::boolean)? ;
 table-database-range-attlist ::= (table:orientation::("column" | "row"))? ;
 table-database-range-attlist ::= (table:contains-header::boolean)? ;
 table-database-range-attlist ::= (table:display-filter-buttons::boolean)? ;
 table-database-range-attlist ::= table:target-range-address::cellRangeAddress ;
 table-database-range-attlist ::= (table:refresh-delay::boolean)? ;
text-object-index-source-attrs ::= text-index-scope-attr ;
 text-object-index-source-attrs ::= text-relative-tab-stop-position-attr ;
 text-object-index-source-attrs ::= (text:use-spreadsheet-objects::boolean)? ;
 text-object-index-source-attrs ::= (text:use-math-objects::boolean)? ;
 text-object-index-source-attrs ::= (text:use-draw-objects::boolean)? ;
 text-object-index-source-attrs ::= (text:use-chart-objects::boolean)? ;
 text-object-index-source-attrs ::= (text:use-other-objects::boolean)? ;
table-change-track-table-cell-attlist ::= (table:cell-address::cellAddress)? ;
 table-change-track-table-cell-attlist ::= (table:matrix-covered::boolean)? ;
 table-change-track-table-cell-attlist ::= (table:formula::string)? (table:number-matrix-columns-spanned::positiveInteger)? (table:number-matrix-rows-spanned::positiveInteger)? common-value-and-type-attlist? ;
text-database-row-select-attlist ::= common-field-database-table ;
 text-database-row-select-attlist ::= (text:condition::formula)? ;
 text-database-row-select-attlist ::= (text:row-number::nonNegativeInteger)? ;
text-illustration-index-source ::= text:illustration-index-source::(text-illustration-index-source-attrs text-index-title-template? text-illustration-index-entry-template?) ;
number-number-style ::= number:number-style::(common-data-style-attlist style-text-properties? number-text? (any-number number-text?)? style-map*) ;
target-frame ::= (office:target-frame::targetFrameName)? ;
chart-axis ::= chart:axis::(chart-axis-attlist chart-title? chart-categories? chart-grid*) ;
draw-custom-shape ::= draw:custom-shape::(draw-custom-shape-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text draw-enhanced-geometry?) ;
form-form ::= form:form::(common-form-control-attlist form-form-attlist form-properties? office-event-listeners? (controls | form-form)* form-connection-resource?) ;
list-source ::= (form:list-source::string)? ;
common-draw-gradient-attlist ::= (draw:name::styleName)? ;
 common-draw-gradient-attlist ::= (draw:display-name::string)? ;
 common-draw-gradient-attlist ::= draw:style::gradient-style ;
 common-draw-gradient-attlist ::= (draw:cx::percent)? (draw:cy::percent)? ;
 common-draw-gradient-attlist ::= (draw:angle::integer)? ;
 common-draw-gradient-attlist ::= (draw:border::percent)? ;
draw-polyline ::= draw:polyline::(common-draw-points-attlist common-draw-position-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
text-numbered-paragraph ::= text:numbered-paragraph::(text-numbered-paragraph-attr text-number? text-p | text-h) ;
text-list-level-style-bullet-attr ::= (text:style-name::styleNameRef)? ;
 text-list-level-style-bullet-attr ::= text:bullet-char::character ;
 text-list-level-style-bullet-attr ::= common-num-format-prefix-suffix-attlist ;
 text-list-level-style-bullet-attr ::= (text:bullet-relative-size::percent)? ;
form-time-attlist ::= (form:value::time)? ;
 form-time-attlist ::= (form:current-value::time)? ;
 form-time-attlist ::= (form:min-value::time)? ;
 form-time-attlist ::= (form:max-value::time)? ;
anim-transition-filter-attlist ::= smil:type::string ;
 anim-transition-filter-attlist ::= (smil:subtype::string)? ;
 anim-transition-filter-attlist ::= (smil:direction::("forward" | "reverse"))? ;
 anim-transition-filter-attlist ::= (smil:fadeColor::("forward" | "reverse"))? ;
 anim-transition-filter-attlist ::= (smil:mode::("in" | "out"))? ;
common-draw-data-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:show::"embed")? (xlink:actuate::"onLoad")? ;
common-table-change-attlist ::= table:id::string ;
 common-table-change-attlist ::= (table:acceptance-state::("accepted" | "rejected" | "pending"))? ;
 common-table-change-attlist ::= (table:rejecting-change-id::string)? ;
text-index-entry-text ::= text:index-entry-text::((text:style-name::styleNameRef)?) ;
common-field-formula-attlist ::= (text:formula::formula)? ;
chart-axis-attlist ::= chart:dimension::("x" | "y" | "z") ;
 chart-axis-attlist ::= (chart:name::string)? ;
 chart-axis-attlist ::= (chart:style-name::styleNameRef)? ;
table-data-pilot-field ::= table:data-pilot-field::(table-data-pilot-field-attlist table-data-pilot-level? table-data-pilot-field-reference? table-data-pilot-groups?) ;
chart-chart-attlist ::= chart:class::namespacedToken ;
 chart-chart-attlist ::= common-draw-size-attlist ;
 chart-chart-attlist ::= (chart:column-mapping::string)? ;
 chart-chart-attlist ::= (chart:row-mapping::string)? ;
 chart-chart-attlist ::= (chart:style-name::styleNameRef)? ;
text-set-page-variable-attlist ::= (text:active::boolean)? ;
 text-set-page-variable-attlist ::= (text:page-adjust::integer)? ;
draw-custom-shape-attlist ::= (draw:engine::namespacedToken)? ;
 draw-custom-shape-attlist ::= (draw:data::string)? ;
draw-g ::= draw:g::(draw-g-attlist common-draw-z-index-attlist common-draw-name-attlist common-draw-id-attlist common-draw-style-name-attlist common-text-spreadsheet-shape-attlist office-event-listeners? draw-glue-point* shape*) ;
table-named-range-attlist ::= table:name::string table:cell-range-address::cellRangeAddress (table:base-cell-address::cellAddress)? (table:range-usable-as::("none" | (("print-range" | "filter" | "repeat-row" | "repeat-column")+)))? ;
number-quarter-attlist ::= (number:style::("short" | "long"))? ;
table-filter-condition-attlist ::= table:field-number::nonNegativeInteger ;
 table-filter-condition-attlist ::= table:value::string ;
 table-filter-condition-attlist ::= table:operator::string ;
 table-filter-condition-attlist ::= (table:case-sensitive::string)? ;
 table-filter-condition-attlist ::= (table:data-type::("text" | "number"))? ;
table-previous ::= table:previous::((table:id::string)? table-change-track-table-cell) ;
number-text-style ::= number:text-style::(common-data-style-attlist style-text-properties? number-text? (number-text-content number-text?)* style-map*) ;
office-settings ::= (office:settings::(config-config-item-set+))? ;
table-tracked-changes-attlist ::= (table:track-changes::boolean)? ;
common-num-format-prefix-suffix-attlist ::= (style:num-prefix::string)? (style:num-suffix::string)? ;
dropdown ::= (form:dropdown::boolean)? ;
common-disabled-attlist ::= (form:disabled::boolean)? ;
draw-g-attlist ::= (svg:y::coordinate)? ;
text-list-style-content ::= text:list-level-style-number::(text-list-level-style-attr text-list-level-style-number-attr style-list-level-properties? style-text-properties?) ;
 text-list-style-content ::= text:list-level-style-bullet::(text-list-level-style-attr text-list-level-style-bullet-attr style-list-level-properties? style-text-properties?) ;
 text-list-style-content ::= text:list-level-style-image::(text-list-level-style-attr text-list-level-style-image-attr style-list-level-properties?) ;
table-table-row-attlist ::= (table:number-rows-repeated::positiveInteger)? ;
 table-table-row-attlist ::= (table:style-name::styleNameRef)? ;
 table-table-row-attlist ::= (table:default-cell-style-name::styleNameRef)? ;
 table-table-row-attlist ::= (table:visibility::table-visibility-value)? ;
common-svg-gradient-attlist ::= (svg:gradientUnits::"objectBoundingBox")? (svg:gradientTransform::string)? (svg:spreadMethod::("pad" | "reflect" | "repeat"))? ;
 common-svg-gradient-attlist ::= draw:name::styleName ;
 common-svg-gradient-attlist ::= (draw:display-name::string)? ;
style-page-layout ::= style:page-layout::(style-page-layout-attlist style-page-layout-properties? style-header-style? style-footer-style?) ;
draw-a-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? ;
 draw-a-attlist ::= (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? ;
 draw-a-attlist ::= (office:name::string)? ;
 draw-a-attlist ::= (office:server-map::boolean)? ;
office-process-content ::= (office:process-content::boolean)? ;
form-date-attlist ::= (form:value::date)? ;
 form-date-attlist ::= (form:current-value::date)? ;
 form-date-attlist ::= (form:min-value::date)? ;
 form-date-attlist ::= (form:max-value::date)? ;
common-form-relative-image-position-attlist ::= ((form:image-position::"center")?) | (form:image-position::("start" | "end" | "top" | "bottom") (form:image-align::("start" | "center" | "end"))?) ;
office-spreadsheet-content-prelude ::= table-tracked-changes? text-decls table-decls ;
common-draw-area-attlist ::= (xlink:href::anyURI)? (xlink:type::"simple")? (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? ;
 common-draw-area-attlist ::= (office:name::string)? ;
 common-draw-area-attlist ::= (draw:nohref::"nohref")? ;
common-draw-name-attlist ::= (draw:name::string)? ;
size ::= (form:size::nonNegativeInteger)? ;
common-value-attlist ::= (form:value::string)? ;
table-table-attlist ::= (table:name::string)? ;
 table-table-attlist ::= (table:style-name::styleNameRef)? ;
 table-table-attlist ::= (table:protected::boolean)? (table:protection-key::string())? ;
 table-table-attlist ::= (table:print::boolean)? ;
 table-table-attlist ::= (table:print-ranges::cellRangeAddressList)? ;
 table-table-attlist ::= (table:is-sub-table::boolean)? ;
--------------------odf::opendoc-1.0.bgf--------------------
style-footnote-sep-attlist ::= (style:width::length)? (style:rel-width::percent)? (style:color::color)? (style:line-style::lineStyle)? (style:adjustment::("left" | "center" | "right"))? (style:distance-before-sep::length)? (style:distance-after-sep::length)? ;
style-font-face ::= style:font-face::(style-font-face-attlist svg-font-face-src? svg-definition-src?) ;
svg-linearGradient ::= svg:linearGradient::(common-svg-gradient-attlist (svg:x1::(coordinate | percent))? (svg:y1::(coordinate | percent))? (svg:x2::(coordinate | percent))? (svg:y2::(coordinate | percent))? svg-stop*) ;
style-page-layout-attlist ::= style:name::styleName ;
 style-page-layout-attlist ::= (style:page-usage::("all" | "left" | "right" | "mirrored"))? ;
number-currency-style ::= number:currency-style::(common-data-style-attlist common-auto-reorder-attlist style-text-properties? number-text? ((number-and-text currency-symbol-and-text?) | (currency-symbol-and-text number-and-text?))? style-map*) ;
number-fraction-attlist ::= (number:min-numerator-digits::integer)? ;
 number-fraction-attlist ::= (number:min-denominator-digits::integer)? ;
 number-fraction-attlist ::= (number:denominator-value::integer)? ;
text-notes-configuration-content ::= text-note-class ;
 text-notes-configuration-content ::= (text:citation-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:citation-body-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:default-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:master-page-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:start-value::nonNegativeInteger)? ;
 text-notes-configuration-content ::= common-num-format-prefix-suffix-attlist common-num-format-attlist? ;
 text-notes-configuration-content ::= (text:start-numbering-at::("document" | "chapter" | "page"))? ;
 text-notes-configuration-content ::= (text:footnotes-position::("text" | "page" | "section" | "document"))? ;
 text-notes-configuration-content ::= (text:note-continuation-notice-forward::string())? ;
 text-notes-configuration-content ::= (text:note-continuation-notice-backward::string())? ;
style-column-sep-attlist ::= (style:style::("none" | "solid" | "dotted" | "dashed" | "dot-dashed"))? ;
 style-column-sep-attlist ::= style:width::length ;
 style-column-sep-attlist ::= (style:height::percent)? ;
 style-column-sep-attlist ::= (style:vertical-align::("top" | "middle" | "bottom"))? ;
 style-column-sep-attlist ::= (style:color::color)? ;
draw-applet-attlist ::= (draw:code::string())? ;
 draw-applet-attlist ::= (draw:object::string())? ;
 draw-applet-attlist ::= (draw:archive::string())? ;
 draw-applet-attlist ::= (draw:may-script::boolean)? ;
text-list-item-content ::= text-number? (text-p | text-h | text-list)* ;
presentation-hide-shape ::= presentation:hide-shape::(common-presentation-effect-attlist presentation-sound?) ;
common-title-attlist ::= (form:title::string())? ;
common-form-control-attlist ::= (form:name::string)? ;
 common-form-control-attlist ::= (form:control-implementation::namespacedToken)? ;
common-svg-font-face-xlink-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? ;
table-data-pilot-table-attlist ::= table:name::string ;
 table-data-pilot-table-attlist ::= (table:application-data::string)? ;
 table-data-pilot-table-attlist ::= (table:grand-total::("none" | "row" | "column" | "both"))? ;
 table-data-pilot-table-attlist ::= (table:ignore-empty-rows::boolean)? ;
 table-data-pilot-table-attlist ::= (table:identify-categories::boolean)? ;
 table-data-pilot-table-attlist ::= table:target-range-address::cellRangeAddress ;
 table-data-pilot-table-attlist ::= (table:buttons::cellRangeAddressList)? ;
 table-data-pilot-table-attlist ::= (table:show-filter-button::boolean)? ;
 table-data-pilot-table-attlist ::= (table:drill-down-on-double-click::boolean)? ;
presentation-hide-text ::= presentation:hide-text::(common-presentation-effect-attlist presentation-sound?) ;
draw-area-polygon ::= draw:area-polygon::(common-draw-area-attlist svg:x::coordinate svg:y::coordinate svg:width::length svg:height::length common-draw-viewbox-attlist common-draw-points-attlist svg-desc? office-event-listeners?) ;
table-deletion-attlist ::= table:type::("row" | "column" | "table") ;
 table-deletion-attlist ::= table:position::integer ;
 table-deletion-attlist ::= (table:table::integer)? ;
 table-deletion-attlist ::= (table:multi-deletion-spanned::integer)? ;
office-forms ::= (office:forms::(office-forms-attlist (form-form | xforms-model)*))? ;
common-restart-timing-attlist ::= (smil:restart::("never" | "always" | "whenNotActive" | "default"))? ;
common-maxlength-attlist ::= (form:max-length::nonNegativeInteger)? ;
draw-object-attlist ::= (draw:notify-on-update-of-ranges::string)? ;
common-rotation-angle-attlist ::= (style:rotation-angle::nonNegativeInteger)? ;
draw-area-rectangle ::= draw:area-rectangle::(common-draw-area-attlist svg:x::coordinate svg:y::coordinate svg:width::length svg:height::length svg-desc? office-event-listeners?) ;
number-date-style ::= number:date-style::(common-data-style-attlist common-auto-reorder-attlist common-format-source-attlist style-text-properties? number-text? (any-date number-text?)+ style-map*) ;
common-readonly-attlist ::= (form:readonly::boolean)? ;
draw-marker-attlist ::= draw:name::styleName ;
 draw-marker-attlist ::= (draw:display-name::string)? ;
draw-measure ::= draw:measure::(draw-measure-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
table-table-cell-attlist-extra ::= (table:number-columns-spanned::positiveInteger)? (table:number-rows-spanned::positiveInteger)? ;
 table-table-cell-attlist-extra ::= (table:number-matrix-columns-spanned::positiveInteger)? (table:number-matrix-rows-spanned::positiveInteger)? ;
common-text-spreadsheet-shape-attlist ::= (table:end-cell-address::cellAddress)? (table:end-x::coordinate)? (table:end-y::coordinate)? ;
 common-text-spreadsheet-shape-attlist ::= (table:table-background::boolean)? ;
 common-text-spreadsheet-shape-attlist ::= common-text-anchor-attlist ;
text-sequence-ref-content ::= (text:reference-format::("page" | "chapter" | "direction" | "text" | "category-and-value" | "caption" | "value"))? ;
common-draw-text-style-name-attlist ::= (draw:text-style-name::styleNameRef)? ;
style-graphic-properties-elements ::= Îµ ;
 style-graphic-properties-elements ::= text-list-style? ;
 style-graphic-properties-elements ::= style-background-image ;
 style-graphic-properties-elements ::= style-columns ;
office-forms-attlist ::= (form:automatic-focus::boolean)? ;
 office-forms-attlist ::= (form:apply-design-mode::boolean)? ;
common-style-header-footer-attlist ::= (style:display::boolean)? ;
draw-plugin-attlist ::= (draw:mime-type::string())? ;
table-movement ::= table:movement::(common-table-change-attlist table-source-range-address table-target-range-address office-change-info table-dependencies? table-deletions?) ;
svg-stop ::= svg:stop::(svg:offset::(double | percent) (svg:stop-color::color)? (svg:stop-opacity::double)?) ;
table-validation-attlist ::= table:name::string ;
 table-validation-attlist ::= (table:condition::string)? ;
 table-validation-attlist ::= (table:base-cell-address::cellAddress)? ;
 table-validation-attlist ::= (table:allow-empty-cell::boolean)? ;
 table-validation-attlist ::= (table:display-list::("none" | "unsorted" | "sort-ascending"))? ;
draw-page-thumbnail-attlist ::= (draw:page-number::positiveInteger)? ;
text-tab-attr ::= (text:tab-ref::nonNegativeInteger)? ;
style-tab-stop-attlist ::= style:position::nonNegativeLength ;
 style-tab-stop-attlist ::= ((style:type::("left" | "center" | "right"))?) | (style:type::"char" style-tab-stop-char-attlist) ;
 style-tab-stop-attlist ::= (style:leader-type::lineType)? ;
 style-tab-stop-attlist ::= (style:leader-style::lineStyle)? ;
 style-tab-stop-attlist ::= (style:leader-width::lineWidth)? ;
 style-tab-stop-attlist ::= (style:leader-color::("font-color" | color))? ;
 style-tab-stop-attlist ::= (style:leader-text::string)? ;
 style-tab-stop-attlist ::= (style:leader-text-style::styleNameRef)? ;
text-h ::= text:h::(heading-attrs paragraph-attrs text-number? paragraph-content*) ;
text-style-name ::= (form:text-style-name::styleNameRef)? ;
table-table-column-attlist ::= (table:number-columns-repeated::positiveInteger)? ;
 table-table-column-attlist ::= (table:style-name::styleNameRef)? ;
 table-table-column-attlist ::= (table:visibility::table-visibility-value)? ;
 table-table-column-attlist ::= (table:default-cell-style-name::styleNameRef)? ;
text-table-of-content-source ::= text:table-of-content-source::(text-table-of-content-source-attlist text-index-title-template? text-table-of-content-entry-template* text-index-source-styles*) ;
table-source-cell-range ::= table:source-cell-range::(table-source-cell-range-attlist table-filter?) ;
text-index-entry-tab-stop-attrs ::= (style:leader-char::character)? ;
 text-index-entry-tab-stop-attrs ::= (style:type::"right") | (style:type::"left" style:position::length) ;
draw-handle-attlist ::= (draw:handle-mirror-vertical::boolean)? ;
 draw-handle-attlist ::= (draw:handle-mirror-horizontal::boolean)? ;
 draw-handle-attlist ::= (draw:handle-switched::boolean)? ;
 draw-handle-attlist ::= draw:handle-position::string ;
 draw-handle-attlist ::= (draw:handle-range-x-minimum::string)? ;
 draw-handle-attlist ::= (draw:handle-range-x-maximum::string)? ;
 draw-handle-attlist ::= (draw:handle-range-y-minimum::string)? ;
 draw-handle-attlist ::= (draw:handle-range-y-maximum::string)? ;
 draw-handle-attlist ::= (draw:handle-polar::string)? ;
 draw-handle-attlist ::= (draw:handle-radius-range-minimum::string)? ;
 draw-handle-attlist ::= (draw:handle-radius-range-maximum::string)? ;
common-field-database-table-attlist ::= text:table-name::string ;
 common-field-database-table-attlist ::= (text:table-type::("table" | "query" | "command"))? ;
common-margin-attlist ::= (fo:margin::(nonNegativeLength | percent))? ;
style-columns ::= (style:columns::(style-columns-attlist style-column-sep? style-column*))? ;
common-spline-anim-value-attlist ::= (smil:keyTimes::string)? ;
 common-spline-anim-value-attlist ::= (smil:keySplines::string)? ;
common-draw-layer-name-attlist ::= (draw:layer::string())? ;
draw-rect-attlist ::= (draw:corner-radius::nonNegativeLength)? ;
table-calculation-setting-attlist ::= (table:case-sensitive::boolean)? ;
 table-calculation-setting-attlist ::= (table:precision-as-shown::boolean)? ;
 table-calculation-setting-attlist ::= (table:search-criteria-must-apply-to-whole-cell::boolean)? ;
 table-calculation-setting-attlist ::= (table:automatic-find-labels::boolean)? ;
 table-calculation-setting-attlist ::= (table:use-regular-expressions::boolean)? ;
 table-calculation-setting-attlist ::= (table:null-year::positiveInteger)? ;
table-subtotal-rules-attlist ::= (table:bind-styles-to-content::boolean)? ;
 table-subtotal-rules-attlist ::= (table:case-sensitive::boolean)? ;
 table-subtotal-rules-attlist ::= (table:page-breaks-on-group-change::boolean)? ;
common-field-display-value-formula-attlist ::= (text:display::("value" | "formula"))? ;
text-table-of-content-source-attlist ::= (text:outline-level::positiveInteger)? ;
 text-table-of-content-source-attlist ::= (text:use-outline-level::boolean)? ;
 text-table-of-content-source-attlist ::= (text:use-index-marks::boolean)? ;
 text-table-of-content-source-attlist ::= (text:use-index-source-styles::boolean)? ;
 text-table-of-content-source-attlist ::= (text:index-scope::("document" | "chapter"))? ;
 text-table-of-content-source-attlist ::= (text:relative-tab-stop-position::boolean)? ;
number-time-style ::= number:time-style::(number-time-style-attlist common-data-style-attlist common-format-source-attlist style-text-properties? number-text? (any-time number-text?)+ style-map*) ;
draw-object-ole-attlist ::= (draw:class-id::string())? ;
text-table-index-source ::= text:table-index-source::(text-illustration-index-source-attrs text-index-title-template? text-table-index-entry-template?) ;
office-automatic-styles ::= (office:automatic-styles::(styles style-page-layout*))? ;
draw-polygon ::= draw:polygon::(common-draw-points-attlist common-draw-position-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
anim-animate-color-attlist ::= (anim:color-interpolation::("rgb" | "hsl"))? ;
 anim-animate-color-attlist ::= (anim:color-interpolation-direction::("clockwise" | "counter-clockwise"))? ;
style-section-properties-attlist ::= common-background-color-attlist ;
 style-section-properties-attlist ::= common-horizontal-margin-attlist ;
 style-section-properties-attlist ::= (style:protect::boolean)? ;
 style-section-properties-attlist ::= (text:dont-balance-text-columns::boolean)? ;
 style-section-properties-attlist ::= common-writing-mode-attlist ;
chart-title ::= chart:title::(chart-title-attlist text-p?) ;
common-tab-attlist ::= (form:tab-index::nonNegativeInteger)? ;
 common-tab-attlist ::= (form:tab-stop::boolean)? ;
common-anim-attlist ::= (presentation:node-type::("default" | "on-click" | "with-previous" | "after-previous" | "timing-root" | "main-sequence" | "interactive-sequence"))? ;
 common-anim-attlist ::= (presentation:preset-id::string)? ;
 common-anim-attlist ::= (presentation:preset-sub-type::string)? ;
 common-anim-attlist ::= (presentation:preset-class::("custom" | "entrance" | "exit" | "emphasis" | "motion-path" | "ole-action" | "media-call"))? ;
 common-anim-attlist ::= (presentation:master-element::IDREF)? ;
 common-anim-attlist ::= (presentation:group-id::string)? ;
 common-anim-attlist ::= (anim:id::ID)? ;
draw-frame ::= draw:frame::(common-draw-shape-with-text-and-styles-attlist common-draw-position-attlist common-draw-rel-size-attlist presentation-shape-attlist draw-frame-attlist (draw-text-box | draw-image | draw-object | draw-object-ole | draw-applet | draw-floating-frame | draw-plugin)* office-event-listeners? draw-glue-point* draw-image-map? svg-desc? (draw-contour-polygon | draw-contour-path)?) ;
common-form-control-content ::= form-properties? office-event-listeners? ;
table-scenario-attlist ::= table:scenario-ranges::cellRangeAddressList ;
 table-scenario-attlist ::= table:is-active::boolean ;
 table-scenario-attlist ::= (table:display-border::boolean)? ;
 table-scenario-attlist ::= (table:border-color::color)? ;
 table-scenario-attlist ::= (table:copy-back::boolean)? ;
 table-scenario-attlist ::= (table:copy-styles::boolean)? ;
 table-scenario-attlist ::= (table:copy-formulas::boolean)? ;
 table-scenario-attlist ::= (table:comment::string)? ;
 table-scenario-attlist ::= (table:protected::boolean)? ;
table-iteration ::= table:iteration::((table:status::("enable" | "disable"))? (table:steps::positiveInteger)? (table:maximum-difference::double)?) ;
table-data-pilot-level-attlist ::= (table:show-empty::boolean)? ;
style-footer-style ::= style:footer-style::(style-header-footer-properties?) ;
presentation-event-listener ::= presentation:event-listener::(presentation-event-listener-attlist presentation-sound?) ;
text-outline-level ::= (text:outline-level::positiveInteger)? ;
common-background-color-attlist ::= (fo:background-color::("transparent" | color))? ;
text-user-index-source ::= text:user-index-source::(text-user-index-source-attr text-index-title-template? text-user-index-entry-template* text-index-source-styles*) ;
text-index-entry-chapter ::= text:index-entry-chapter::((text:style-name::styleNameRef)? text-index-entry-chapter-attrs) ;
draw-frame-attlist ::= (draw:copy-of::string)? ;
common-restart-default-attlist ::= (smil:restartDefault::("never" | "always" | "whenNotActive" | "inherit"))? ;
chart-domain ::= chart:domain::((table:cell-range-address::cellRangeAddress)?) ;
office-text-attlist ::= (text:global::boolean)? ;
common-break-attlist ::= (fo:break-before::("auto" | "column" | "page"))? (fo:break-after::("auto" | "column" | "page"))? ;
text-file-name-attlist ::= (text:display::("full" | "path" | "name" | "name-and-extension"))? ;
 text-file-name-attlist ::= common-field-fixed-attlist ;
chart-error-indicator-attlist ::= (chart:style-name::styleNameRef)? ;
presentation-event-listener-attlist ::= script:event-name::string ;
 presentation-event-listener-attlist ::= presentation:action::("none" | "previous-page" | "next-page" | "first-page" | "last-page" | "hide" | "stop" | "execute" | "show" | "verb" | "fade-out" | "sound") ;
 presentation-event-listener-attlist ::= (presentation:effect::presentationEffects)? ;
 presentation-event-listener-attlist ::= (presentation:direction::presentationEffectDirections)? ;
 presentation-event-listener-attlist ::= (presentation:speed::presentationSpeeds)? ;
 presentation-event-listener-attlist ::= (presentation:start-scale::percent)? ;
 presentation-event-listener-attlist ::= (xlink:href::anyURI)? (xlink:type::"simple")? (xlink:show::"embed")? (xlink:actuate::"onRequest")? ;
 presentation-event-listener-attlist ::= (presentation:verb::nonNegativeInteger)? ;
common-fill-default-attlist ::= (smil:fillDefault::("remove" | "freeze" | "hold" | "transition" | "auto" | "inherit"))? ;
table-table-source-attlist ::= (table:mode::("copy-all" | "copy-results-only"))? ;
 table-table-source-attlist ::= (table:table-name::string)? ;
common-form-visual-effect-attlist ::= (form:visual-effect::("flat" | "3d"))? ;
common-text-align ::= (fo:text-align::("start" | "end" | "left" | "right" | "center" | "justify"))? ;
header-footer-content ::= (text-decls (text-h | text-p | text-list | table-table | text-section | text-table-of-content | text-illustration-index | text-table-index | text-object-index | text-user-index | text-alphabetical-index | text-bibliography | text-index-title | change-marks)*) | (style-region-left? style-region-center? style-region-right?) ;
style-style-attlist ::= style:name::styleName ;
 style-style-attlist ::= (style:display-name::string)? ;
 style-style-attlist ::= (style:parent-style-name::styleNameRef)? ;
 style-style-attlist ::= (style:next-style-name::styleNameRef)? ;
 style-style-attlist ::= (style:list-style-name::(styleName | Îµ))? ;
 style-style-attlist ::= (style:master-page-name::styleNameRef)? ;
 style-style-attlist ::= (style:auto-update::boolean)? ;
 style-style-attlist ::= (style:data-style-name::styleNameRef)? ;
 style-style-attlist ::= (style:class::string)? ;
 style-style-attlist ::= (style:default-outline-level::positiveInteger)? ;
style-page-layout-properties-attlist ::= (fo:page-width::length)? (fo:page-height::length)? ;
 style-page-layout-properties-attlist ::= common-num-format-attlist? common-num-format-prefix-suffix-attlist ;
 style-page-layout-properties-attlist ::= (style:paper-tray-name::("default" | string))? ;
 style-page-layout-properties-attlist ::= (style:print-orientation::("portrait" | "landscape"))? ;
 style-page-layout-properties-attlist ::= common-horizontal-margin-attlist common-vertical-margin-attlist common-margin-attlist ;
 style-page-layout-properties-attlist ::= common-border-attlist ;
 style-page-layout-properties-attlist ::= common-border-line-width-attlist ;
 style-page-layout-properties-attlist ::= common-padding-attlist ;
 style-page-layout-properties-attlist ::= common-shadow-attlist ;
 style-page-layout-properties-attlist ::= common-background-color-attlist ;
 style-page-layout-properties-attlist ::= (style:register-truth-ref-style-name::styleNameRef)? ;
 style-page-layout-properties-attlist ::= (style:print::(("headers" | "grid" | "annotations" | "objects" | "charts" | "drawings" | "formulas" | "zero-values")*))? ;
 style-page-layout-properties-attlist ::= (style:print-page-order::("ttb" | "ltr"))? ;
 style-page-layout-properties-attlist ::= (style:first-page-number::(positiveInteger | "continue"))? ;
 style-page-layout-properties-attlist ::= (style:scale-to::percent)? (style:scale-to-pages::positiveInteger)? ;
 style-page-layout-properties-attlist ::= (style:table-centering::("horizontal" | "vertical" | "both" | "none"))? ;
 style-page-layout-properties-attlist ::= (style:footnote-max-height::length)? ;
 style-page-layout-properties-attlist ::= common-writing-mode-attlist ;
 style-page-layout-properties-attlist ::= (style:layout-grid-mode::("none" | "line" | "both"))? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-base-height::length)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-ruby-height::length)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-lines::positiveInteger)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-color::color)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-ruby-below::boolean)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-print::boolean)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-display::boolean)? ;
draw-text-box-attlist ::= (draw:chain-next-name::string)? ;
 draw-text-box-attlist ::= (draw:corner-radius::nonNegativeLength)? ;
 draw-text-box-attlist ::= (fo:min-height::(length | percent))? (fo:min-width::(length | percent))? ;
 draw-text-box-attlist ::= (fo:max-height::(length | percent))? (fo:max-width::(length | percent))? ;
draw-image-attlist ::= (draw:filter-name::string)? ;
table-error-message ::= table:error-message::((table:title::string)? (table:display::boolean)? (table:message-type::("stop" | "warning" | "information"))? text-p*) ;
paragraph-attrs ::= (text:style-name::styleNameRef)? (text:class-names::styleNameRefs)? (text:cond-style-name::styleNameRef)? ;
 paragraph-attrs ::= text-id? ;
table-columns-no-group ::= (table-columns (table-table-header-columns table-columns?)?) | (table-table-header-columns table-columns?) ;
form-fixed-text-attlist ::= form-control-attlist for common-disabled-attlist label common-printable-attlist common-title-attlist ;
 form-fixed-text-attlist ::= (form:multi-line::boolean)? ;
draw-floating-frame-attlist ::= (draw:frame-name::string)? ;
style-paragraph-properties-attlist ::= (fo:line-height::("normal" | nonNegativeLength | percent))? ;
 style-paragraph-properties-attlist ::= (style:line-height-at-least::nonNegativeLength)? ;
 style-paragraph-properties-attlist ::= (style:line-spacing::length)? ;
 style-paragraph-properties-attlist ::= (style:font-independent-line-spacing::boolean)? ;
 style-paragraph-properties-attlist ::= common-text-align ;
 style-paragraph-properties-attlist ::= (fo:text-align-last::("start" | "center" | "justify"))? ;
 style-paragraph-properties-attlist ::= (style:justify-single-word::boolean)? ;
 style-paragraph-properties-attlist ::= (fo:keep-together::("auto" | "always"))? ;
 style-paragraph-properties-attlist ::= (fo:widows::nonNegativeInteger)? ;
 style-paragraph-properties-attlist ::= (fo:orphans::nonNegativeInteger)? ;
 style-paragraph-properties-attlist ::= (style:tab-stop-distance::nonNegativeLength)? ;
 style-paragraph-properties-attlist ::= (fo:hyphenation-keep::("auto" | "page"))? ;
 style-paragraph-properties-attlist ::= (fo:hyphenation-ladder-count::("no-limit" | positiveInteger))? ;
 style-paragraph-properties-attlist ::= (style:register-true::boolean)? ;
 style-paragraph-properties-attlist ::= common-horizontal-margin-attlist ;
 style-paragraph-properties-attlist ::= (fo:text-indent::(length | percent))? ;
 style-paragraph-properties-attlist ::= (style:auto-text-indent::boolean)? ;
 style-paragraph-properties-attlist ::= common-vertical-margin-attlist ;
 style-paragraph-properties-attlist ::= common-margin-attlist ;
 style-paragraph-properties-attlist ::= common-break-attlist ;
 style-paragraph-properties-attlist ::= common-background-color-attlist ;
 style-paragraph-properties-attlist ::= common-border-attlist ;
 style-paragraph-properties-attlist ::= common-border-line-width-attlist ;
 style-paragraph-properties-attlist ::= common-padding-attlist ;
 style-paragraph-properties-attlist ::= common-shadow-attlist ;
 style-paragraph-properties-attlist ::= common-keep-with-next-attlist ;
 style-paragraph-properties-attlist ::= (text:number-lines::boolean)? ;
 style-paragraph-properties-attlist ::= (text:line-number::nonNegativeInteger)? ;
 style-paragraph-properties-attlist ::= (style:text-autospace::("none" | "ideograph-alpha"))? ;
 style-paragraph-properties-attlist ::= (style:punctuation-wrap::("simple" | "hanging"))? ;
 style-paragraph-properties-attlist ::= (style:line-break::("normal" | "strict"))? ;
 style-paragraph-properties-attlist ::= (style:vertical-align::("top" | "middle" | "bottom" | "auto"))? ;
 style-paragraph-properties-attlist ::= common-writing-mode-attlist ;
 style-paragraph-properties-attlist ::= (style:writing-mode-automatic::boolean)? ;
 style-paragraph-properties-attlist ::= (style:snap-to-layout-grid::boolean)? ;
 style-paragraph-properties-attlist ::= common-page-number-attlist ;
 style-paragraph-properties-attlist ::= (style:background-transparency::percent)? ;
table-table-row-group-attlist ::= (table:display::boolean)? ;
draw-regular-polygon ::= draw:regular-polygon::(draw-regular-polygon-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
style-drawing-page-properties-elements ::= presentation-sound? ;
common-border-line-width-attlist ::= (style:border-line-width::borderWidths)? (style:border-line-width-top::borderWidths)? (style:border-line-width-bottom::borderWidths)? (style:border-line-width-left::borderWidths)? (style:border-line-width-right::borderWidths)? ;
common-draw-size-attlist ::= (svg:width::length)? (svg:height::length)? ;
draw-layer-attlist ::= draw:name::string ;
 draw-layer-attlist ::= (draw:protected::boolean)? ;
 draw-layer-attlist ::= (draw:display::("always" | "screen" | "printer" | "none"))? ;
draw-circle ::= draw:circle::(draw-circle-attlist common-draw-circle-ellipse-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
table-table-template ::= table:table-template::(table-table-template-attlist table-first-row? table-last-row? table-first-column? table-last-column? table-body | (table-even-rows table-odd-rows) | (table-even-columns table-odd-columns)) ;
draw-page ::= draw:page::(common-presentation-header-footer-attlist draw-page-attlist office-forms? shape* (presentation-animations | animation-element)? presentation-notes?) ;
form-password-attlist ::= form-control-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist ;
 form-password-attlist ::= (form:echo-char::character)? ;
presentation-settings ::= (presentation:settings::(presentation-settings-attlist presentation-show*))? ;
common-style-direction-attlist ::= (style:direction::("ltr" | "ttb"))? ;
text-sequence-ref-name ::= (text:ref-name::string)? ;
table-insertion ::= table:insertion::(table-insertion-attlist common-table-change-attlist office-change-info table-dependencies? table-deletions?) ;
text-outline-level-style-attlist ::= text:level::positiveInteger ;
 text-outline-level-style-attlist ::= (text:style-name::styleNameRef)? ;
 text-outline-level-style-attlist ::= common-num-format-attlist common-num-format-prefix-suffix-attlist ;
 text-outline-level-style-attlist ::= (text:display-levels::positiveInteger)? ;
 text-outline-level-style-attlist ::= (text:start-value::positiveInteger)? ;
common-anim-values-attlist ::= (smil:values::string)? ;
 common-anim-values-attlist ::= (anim:formula::string)? ;
 common-anim-values-attlist ::= common-anim-set-values-attlist (smil:from::string)? (smil:by::string)? ;
chart-categories ::= chart:categories::((table:cell-range-address::cellRangeAddress)?) ;
draw-page-attlist ::= (draw:name::string)? ;
 draw-page-attlist ::= (draw:style-name::styleNameRef)? ;
 draw-page-attlist ::= draw:master-page-name::styleNameRef ;
 draw-page-attlist ::= (presentation:presentation-page-layout-name::styleNameRef)? ;
 draw-page-attlist ::= (draw:id::ID)? ;
draw-hatch-attlist ::= draw:name::styleName ;
 draw-hatch-attlist ::= (draw:display-name::string)? ;
 draw-hatch-attlist ::= draw:style::("single" | "double" | "triple") ;
 draw-hatch-attlist ::= (draw:color::color)? ;
 draw-hatch-attlist ::= (draw:distance::length)? ;
 draw-hatch-attlist ::= (draw:rotation::integer)? ;
presentation-settings-attlist ::= (presentation:start-page::string)? ;
 presentation-settings-attlist ::= (presentation:show::string)? ;
 presentation-settings-attlist ::= (presentation:full-screen::boolean)? ;
 presentation-settings-attlist ::= (presentation:endless::boolean)? ;
 presentation-settings-attlist ::= (presentation:pause::duration)? ;
 presentation-settings-attlist ::= (presentation:show-logo::boolean)? ;
 presentation-settings-attlist ::= (presentation:force-manual::boolean)? ;
 presentation-settings-attlist ::= (presentation:mouse-visible::boolean)? ;
 presentation-settings-attlist ::= (presentation:mouse-as-pen::boolean)? ;
 presentation-settings-attlist ::= (presentation:start-with-navigator::boolean)? ;
 presentation-settings-attlist ::= (presentation:animations::("enabled" | "disabled"))? ;
 presentation-settings-attlist ::= (presentation:transition-on-click::("enabled" | "disabled"))? ;
 presentation-settings-attlist ::= (presentation:stay-on-top::boolean)? ;
number-day-of-week-attlist ::= (number:style::("short" | "long"))? ;
number-and-text ::= number-number number-text? ;
common-keep-with-next-attlist ::= (fo:keep-with-next::("auto" | "always"))? ;
common-text-anchor-attlist ::= (text:anchor-type::("page" | "frame" | "paragraph" | "char" | "as-char"))? ;
 common-text-anchor-attlist ::= (text:anchor-page-number::positiveInteger)? ;
common-field-num-format-attlist ::= common-num-format-attlist? ;
presentation-show-shape ::= presentation:show-shape::(common-presentation-effect-attlist presentation-sound?) ;
table-insertion-attlist ::= table:type::("row" | "column" | "table") ;
 table-insertion-attlist ::= table:position::integer ;
 table-insertion-attlist ::= (table:count::positiveInteger)? ;
 table-insertion-attlist ::= (table:table::integer)? ;
office-document-common-attrs ::= (office:version::string)? ;
common-draw-style-name-attlist ::= ((draw:style-name::styleNameRef)? (draw:class-names::styleNameRefs)?) | ((presentation:style-name::styleNameRef)? (presentation:class-names::styleNameRefs)?) ;
table-consolidation-attlist ::= table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string) ;
 table-consolidation-attlist ::= table:source-cell-range-addresses::cellRangeAddressList ;
 table-consolidation-attlist ::= table:target-cell-address::cellAddress ;
 table-consolidation-attlist ::= (table:use-labels::("none" | "row" | "column" | "both"))? ;
 table-consolidation-attlist ::= (table:link-to-source-data::boolean)? ;
style-tab-stops ::= (style:tab-stops::(style-tab-stop*))? ;
text-bibliography-configuration-attlist ::= (text:prefix::string)? (text:suffix::string)? ;
 text-bibliography-configuration-attlist ::= (text:numbered-entries::boolean)? ;
 text-bibliography-configuration-attlist ::= (text:sort-by-position::boolean)? (fo:language::languageCode)? (fo:country::countryCode)? (text:sort-algorithm::string)? ;
style-data-style-attlist ::= (style:display-name::string)? ;
office-master-styles ::= (office:master-styles::(style-master-page* style-handout-master? draw-layer-set?))? ;
dr3d-light-attlist ::= (dr3d:diffuse-color::color)? ;
 dr3d-light-attlist ::= dr3d:direction::vector3D ;
 dr3d-light-attlist ::= (dr3d:enabled::boolean)? ;
 dr3d-light-attlist ::= (dr3d:specular::boolean)? ;
style-drawing-page-properties-attlist ::= (presentation:transition-type::("manual" | "automatic" | "semi-automatic"))? ;
 style-drawing-page-properties-attlist ::= (presentation:transition-style::("none" | "fade-from-left" | "fade-from-top" | "fade-from-right" | "fade-from-bottom" | "fade-from-upperleft" | "fade-from-upperright" | "fade-from-lowerleft" | "fade-from-lowerright" | "move-from-left" | "move-from-top" | "move-from-right" | "move-from-bottom" | "move-from-upperleft" | "move-from-upperright" | "move-from-lowerleft" | "move-from-lowerright" | "uncover-to-left" | "uncover-to-top" | "uncover-to-right" | "uncover-to-bottom" | "uncover-to-upperleft" | "uncover-to-upperright" | "uncover-to-lowerleft" | "uncover-to-lowerright" | "fade-to-center" | "fade-from-center" | "vertical-stripes" | "horizontal-stripes" | "clockwise" | "counterclockwise" | "open-vertical" | "open-horizontal" | "close-vertical" | "close-horizontal" | "wavyline-from-left" | "wavyline-from-top" | "wavyline-from-right" | "wavyline-from-bottom" | "spiralin-left" | "spiralin-right" | "spiralout-left" | "spiralout-right" | "roll-from-top" | "roll-from-left" | "roll-from-right" | "roll-from-bottom" | "stretch-from-left" | "stretch-from-top" | "stretch-from-right" | "stretch-from-bottom" | "vertical-lines" | "horizontal-lines" | "dissolve" | "random" | "vertical-checkerboard" | "horizontal-checkerboard" | "interlocking-horizontal-left" | "interlocking-horizontal-right" | "interlocking-vertical-top" | "interlocking-vertical-bottom" | "fly-away" | "open" | "close" | "melt"))? ;
 style-drawing-page-properties-attlist ::= (presentation:transition-speed::presentationSpeeds)? ;
 style-drawing-page-properties-attlist ::= (smil:subtype::string)? ;
 style-drawing-page-properties-attlist ::= (smil:direction::("forward" | "reverse"))? ;
 style-drawing-page-properties-attlist ::= (smil:fadeColor::("forward" | "reverse"))? ;
 style-drawing-page-properties-attlist ::= (presentation:duration::duration)? ;
 style-drawing-page-properties-attlist ::= (presentation:visibility::("visible" | "hidden"))? ;
 style-drawing-page-properties-attlist ::= (draw:background-size::("full" | "border"))? ;
 style-drawing-page-properties-attlist ::= (presentation:background-objects-visible::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:background-visible::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:display-header::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:display-footer::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:display-page-number::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:display-date-time::boolean)? ;
 style-drawing-page-properties-attlist ::= (smil:type::string)? ;
table-sort-groups-attlist ::= (table:data-type::("text" | "number" | "automatic" | string))? ;
 table-sort-groups-attlist ::= (table:order::("ascending" | "descending"))? ;
presentation-dim ::= presentation:dim::(presentation-dim-attlist presentation-sound?) ;
table-table-cell-attlist ::= (table:number-columns-repeated::positiveInteger)? ;
 table-table-cell-attlist ::= (table:style-name::styleNameRef)? ;
 table-table-cell-attlist ::= (table:content-validation-name::string)? ;
 table-table-cell-attlist ::= (table:formula::string)? ;
 table-table-cell-attlist ::= common-value-and-type-attlist? ;
 table-table-cell-attlist ::= (table:protect::boolean)? ;
anim-animate-motion-attlist ::= (svg:path::pathData)? ;
 anim-animate-motion-attlist ::= (svg:origin::string)? ;
 anim-animate-motion-attlist ::= (smil:calcMode::("discrete" | "linear" | "paced" | "spline"))? ;
presentation-date-time-decl-attlist ::= presentation:name::string ;
 presentation-date-time-decl-attlist ::= presentation:source::("fixed" | "current-date") ;
 presentation-date-time-decl-attlist ::= (style:data-style-name::styleNameRef)? ;
text-template-name-attlist ::= (text:display::("full" | "path" | "name" | "name-and-extension" | "area" | "title"))? ;
draw-caption-attlist ::= (draw:caption-point-x::coordinate draw:caption-point-y::coordinate)? ;
 draw-caption-attlist ::= (draw:corner-radius::nonNegativeLength)? ;
number-minutes-attlist ::= (number:style::("short" | "long"))? ;
form-button-attlist ::= form-control-attlist button-type common-disabled-attlist label image-data common-printable-attlist common-tab-attlist target-frame target-location common-title-attlist common-value-attlist common-form-relative-image-position-attlist ;
 form-button-attlist ::= (form:default-button::boolean)? ;
 form-button-attlist ::= (form:toggle::boolean)? ;
 form-button-attlist ::= (form:focus-on-click::boolean)? ;
 form-button-attlist ::= (form:xforms-submission::string)? ;
table-change-deletion ::= table:change-deletion::((table:id::string)?) ;
chart-wall-attlist ::= (svg:width::length)? ;
 chart-wall-attlist ::= (chart:style-name::styleNameRef)? ;
text-index-title-template ::= text:index-title-template::((text:style-name::styleNameRef)? string()) ;
table-filter-attlist ::= (table:target-range-address::cellRangeAddress)? ;
 table-filter-attlist ::= (table:condition-source::("self" | "cell-range"))? ;
 table-filter-attlist ::= (table:condition-source-range-address::cellRangeAddress)? ;
 table-filter-attlist ::= (table:display-duplicates::boolean)? ;
draw-ellipse-attlist ::= (svg:rx::length svg:ry::length)? ;
common-field-display-value-none-attlist ::= (text:display::("value" | "none"))? ;
chart-series ::= chart:series::(chart-series-attlist chart-domain* chart-mean-value? chart-regression-curve? chart-error-indicator? chart-data-point*) ;
table-calculation-settings ::= table:calculation-settings::(table-calculation-setting-attlist table-null-date? table-iteration?) ;
text-index-entry-link-start ::= text:index-entry-link-start::((text:style-name::styleNameRef)?) ;
table-data-pilot-member-attlist ::= table:name::string ;
 table-data-pilot-member-attlist ::= (table:display::boolean)? ;
 table-data-pilot-member-attlist ::= (table:show-details::boolean)? ;
common-convert-empty-attlist ::= (form:convert-empty-to-null::boolean)? ;
style-style-content ::= style:family::"text" style-text-properties? ;
 style-style-content ::= style:family::"paragraph" style-paragraph-properties? style-text-properties? ;
 style-style-content ::= style:family::"section" style-section-properties? ;
 style-style-content ::= style:family::"ruby" style-ruby-properties? ;
 style-style-content ::= style:family::"table" style-table-properties? ;
 style-style-content ::= style:family::"table-column" style-table-column-properties? ;
 style-style-content ::= style:family::"table-row" style-table-row-properties? ;
 style-style-content ::= style:family::"table-cell" style-table-cell-properties? style-paragraph-properties? style-text-properties? ;
 style-style-content ::= style:family::("graphic" | "presentation") style-graphic-properties? style-paragraph-properties? style-text-properties? ;
 style-style-content ::= style:family::"drawing-page" style-drawing-page-properties? ;
 style-style-content ::= style:family::"chart" style-chart-properties? style-graphic-properties? style-paragraph-properties? style-text-properties? ;
common-format-source-attlist ::= (number:format-source::("fixed" | "language"))? ;
number-number-attlist ::= (number:decimal-replacement::string())? ;
 number-number-attlist ::= (number:display-factor::double)? ;
text-list ::= text:list::(text-list-attr text-list-header? text-list-item*) ;
common-anim-set-values-attlist ::= (smil:to::string)? ;
common-field-description-attlist ::= (text:description::string())? ;
chart-series-attlist ::= (chart:values-cell-range-address::cellRangeAddress)? ;
 chart-series-attlist ::= (chart:label-cell-address::cellAddress)? ;
 chart-series-attlist ::= (chart:class::namespacedToken)? ;
 chart-series-attlist ::= (chart:attached-axis::string)? ;
 chart-series-attlist ::= (chart:style-name::styleNameRef)? ;
table-table-column-group-attlist ::= (table:display::boolean)? ;
common-draw-transform-attlist ::= (draw:transform::string)? ;
common-shadow-attlist ::= (style:shadow::shadowType)? ;
number-year-attlist ::= (number:style::("short" | "long"))? ;
svg-font-face-format ::= svg:font-face-format::((svg:string::string())?) ;
style-map-attlist ::= style:condition::string ;
 style-map-attlist ::= style:apply-style-name::styleNameRef ;
 style-map-attlist ::= (style:base-cell-address::cellAddress)? ;
text-index-entry-tab-stop ::= text:index-entry-tab-stop::((text:style-name::styleNameRef)? text-index-entry-tab-stop-attrs) ;
chart-chart ::= chart:chart::(chart-chart-attlist chart-title? chart-subtitle? chart-footer? chart-legend? chart-plot-area table-table?) ;
table-sort-attlist ::= (table:bind-styles-to-content::boolean)? ;
 table-sort-attlist ::= (table:target-range-address::cellRangeAddress)? ;
 table-sort-attlist ::= (table:case-sensitive::boolean)? ;
 table-sort-attlist ::= (table:language::languageCode)? ;
 table-sort-attlist ::= (table:country::countryCode)? ;
 table-sort-attlist ::= (table:algorithm::string)? ;
office-spreadsheet-attlist ::= (table:structure-protected::boolean)? (table:protection-key::string)? ;
common-data-field-attlist ::= (form:data-field::string)? ;
table-rows-no-group ::= (table-rows (table-table-header-rows table-rows?)?) | (table-table-header-rows table-rows?) ;
common-field-database-name ::= (text:database-name::string)? ;
 common-field-database-name ::= form-connection-resource ;
chart-subtitle ::= chart:subtitle::(chart-title-attlist text-p?) ;
common-draw-position-attlist ::= (svg:x::coordinate)? (svg:y::coordinate)? ;
common-padding-attlist ::= (fo:padding::nonNegativeLength)? (fo:padding-top::nonNegativeLength)? (fo:padding-bottom::nonNegativeLength)? (fo:padding-left::nonNegativeLength)? (fo:padding-right::nonNegativeLength)? ;
table-database-source-sql-attlist ::= table:database-name::string ;
 table-database-source-sql-attlist ::= table:sql-statement::string ;
 table-database-source-sql-attlist ::= (table:parse-sql-statement::boolean)? ;
style-table-properties-attlist ::= (style:width::positiveLength)? (style:rel-width::percent)? ;
 style-table-properties-attlist ::= (table:align::("left" | "center" | "right" | "margins"))? ;
 style-table-properties-attlist ::= common-horizontal-margin-attlist ;
 style-table-properties-attlist ::= common-vertical-margin-attlist ;
 style-table-properties-attlist ::= common-margin-attlist ;
 style-table-properties-attlist ::= common-page-number-attlist ;
 style-table-properties-attlist ::= common-break-attlist ;
 style-table-properties-attlist ::= common-background-color-attlist ;
 style-table-properties-attlist ::= common-shadow-attlist ;
 style-table-properties-attlist ::= common-keep-with-next-attlist ;
 style-table-properties-attlist ::= (style:may-break-between-rows::boolean)? ;
 style-table-properties-attlist ::= (table:border-model::("collapsing" | "separating"))? ;
 style-table-properties-attlist ::= common-writing-mode-attlist ;
 style-table-properties-attlist ::= (table:display::boolean)? ;
presentation-shape-attlist ::= (presentation:class::presentation-classes)? ;
 presentation-shape-attlist ::= (presentation:placeholder::boolean)? ;
 presentation-shape-attlist ::= (presentation:user-transformed::boolean)? ;
text-alphabetical-index-source-attrs ::= text-index-scope-attr text-relative-tab-stop-position-attr ;
 text-alphabetical-index-source-attrs ::= (text:ignore-case::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:main-entry-style-name::styleNameRef)? ;
 text-alphabetical-index-source-attrs ::= (text:alphabetical-separators::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:combine-entries::boolean)? (text:combine-entries-with-dash::boolean)? (text:combine-entries-with-pp::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:use-keys-as-entries::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:capitalize-entries::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:comma-separated::boolean)? ;
 text-alphabetical-index-source-attrs ::= (fo:language::languageCode)? ;
 text-alphabetical-index-source-attrs ::= (fo:country::countryCode)? ;
 text-alphabetical-index-source-attrs ::= (text:sort-algorithm::string)? ;
text-list-attr ::= (text:style-name::styleNameRef)? ;
 text-list-attr ::= (text:continue-numbering::boolean)? ;
form-form-attlist ::= (xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")?)? ;
 form-form-attlist ::= (office:target-frame::targetFrameName)? ;
 form-form-attlist ::= (form:method::("get" | "post" | string))? ;
 form-form-attlist ::= (form:enctype::string)? ;
 form-form-attlist ::= (form:allow-deletes::boolean)? ;
 form-form-attlist ::= (form:allow-inserts::boolean)? ;
 form-form-attlist ::= (form:allow-updates::boolean)? ;
 form-form-attlist ::= (form:apply-filter::boolean)? ;
 form-form-attlist ::= (form:command-type::("table" | "query" | "command"))? ;
 form-form-attlist ::= (form:command::string())? ;
 form-form-attlist ::= (form:datasource::(anyURI | string))? ;
 form-form-attlist ::= (form:master-fields::string)? ;
 form-form-attlist ::= (form:detail-fields::string)? ;
 form-form-attlist ::= (form:escape-processing::boolean)? ;
 form-form-attlist ::= (form:filter::string)? ;
 form-form-attlist ::= (form:ignore-result::boolean)? ;
 form-form-attlist ::= (form:navigation-mode::navigation)? ;
 form-form-attlist ::= (form:order::string)? ;
 form-form-attlist ::= (form:tab-cycle::tab-cycles)? ;
text-tracked-changes-attr ::= (text:track-changes::boolean)? ;
table-help-message ::= table:help-message::((table:title::string)? (table:display::boolean)? text-p*) ;
paragraph-content ::= string() ;
 paragraph-content ::= text:s::((text:c::nonNegativeInteger)?) ;
 paragraph-content ::= text:tab::text-tab-attr ;
 paragraph-content ::= text:line-break::Îµ ;
 paragraph-content ::= text:span::((text:style-name::styleNameRef)? (text:class-names::styleNameRefs)? paragraph-content*) ;
 paragraph-content ::= text:a::(text-a-attlist office-event-listeners? paragraph-content*) ;
 paragraph-content ::= (text:bookmark::(text:name::string)) | (text:bookmark-start::(text:name::string)) | (text:bookmark-end::(text:name::string)) ;
 paragraph-content ::= text:reference-mark::(text:name::string) ;
 paragraph-content ::= (text:reference-mark-start::(text:name::string)) | (text:reference-mark-end::(text:name::string)) ;
 paragraph-content ::= text:note::(text-note-class (text:id::string)? text:note-citation::((text:label::string)? string()) text:note-body::(text-content*)) ;
 paragraph-content ::= text:ruby::((text:style-name::styleNameRef)? text:ruby-base::paragraph-content text:ruby-text::((text:style-name::styleNameRef)? string())) ;
 paragraph-content ::= office-annotation ;
 paragraph-content ::= change-marks ;
 paragraph-content ::= shape | draw-a ;
 paragraph-content ::= text:date::(text-date-attlist string()) ;
 paragraph-content ::= text:time::(text-time-attlist string()) ;
 paragraph-content ::= text:page-number::(text-page-number-attlist string()) ;
 paragraph-content ::= text:page-continuation::(text-page-continuation-attlist string()) ;
 paragraph-content ::= text:sender-firstname::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-lastname::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-initials::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-title::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-position::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-email::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-phone-private::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-fax::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-company::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-phone-work::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-street::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-city::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-postal-code::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-country::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-state-or-province::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:author-name::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:author-initials::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:chapter::(text-chapter-attlist string()) ;
 paragraph-content ::= text:file-name::(text-file-name-attlist string()) ;
 paragraph-content ::= text:template-name::(text-template-name-attlist string()) ;
 paragraph-content ::= text:sheet-name::string() ;
 paragraph-content ::= text:variable-set::(common-field-name-attlist common-field-formula-attlist common-value-and-type-attlist common-field-display-value-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:variable-get::(common-field-name-attlist common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:variable-input::(common-field-name-attlist common-field-description-attlist common-value-type-attlist common-field-display-value-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:user-field-get::(common-field-name-attlist common-field-display-value-formula-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:user-field-input::(common-field-name-attlist common-field-description-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:sequence::(common-field-name-attlist common-field-formula-attlist common-field-num-format-attlist text-sequence-ref-name string()) ;
 paragraph-content ::= text:expression::(common-field-formula-attlist common-value-and-type-attlist? common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:text-input::(common-field-description-attlist string()) ;
 paragraph-content ::= text:initial-creator::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:creation-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::dateOrDateTime)? string()) ;
 paragraph-content ::= text:creation-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::timeOrDateTime)? string()) ;
 paragraph-content ::= text:description::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:user-defined::(common-field-fixed-attlist text:name::string common-field-data-style-name-attlist (office:value::double)? (office:date-value::dateOrDateTime)? (office:time-value::duration)? (office:boolean-value::boolean)? (office:string-value::string)? string()) ;
 paragraph-content ::= text:print-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::time)? string()) ;
 paragraph-content ::= text:print-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::date)? string()) ;
 paragraph-content ::= text:printed-by::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:title::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:subject::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:keywords::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:editing-cycles::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:editing-duration::(common-field-fixed-attlist common-field-data-style-name-attlist (text:duration::duration)? string()) ;
 paragraph-content ::= text:modification-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::time)? string()) ;
 paragraph-content ::= text:modification-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::date)? string()) ;
 paragraph-content ::= text:creator::(common-field-fixed-attlist string()) ;
 paragraph-content ::= (text:page-count::(common-field-num-format-attlist string())) | (text:paragraph-count::(common-field-num-format-attlist string())) | (text:word-count::(common-field-num-format-attlist string())) | (text:character-count::(common-field-num-format-attlist string())) | (text:table-count::(common-field-num-format-attlist string())) | (text:image-count::(common-field-num-format-attlist string())) | (text:object-count::(common-field-num-format-attlist string())) ;
 paragraph-content ::= text:database-display::(text-database-display-attlist string()) ;
 paragraph-content ::= text:database-next::text-database-next-attlist ;
 paragraph-content ::= text:database-row-select::text-database-row-select-attlist ;
 paragraph-content ::= text:database-row-number::(common-field-database-table common-field-num-format-attlist (text:value::nonNegativeInteger)? string()) ;
 paragraph-content ::= text:database-name::(common-field-database-table string()) ;
 paragraph-content ::= text:page-variable-set::(text-set-page-variable-attlist string()) ;
 paragraph-content ::= text:page-variable-get::(text-get-page-variable-attlist string()) ;
 paragraph-content ::= text:placeholder::(text-placeholder-attlist string()) ;
 paragraph-content ::= text:conditional-text::(text-conditional-text-attlist string()) ;
 paragraph-content ::= text:hidden-text::(text-hidden-text-attlist string()) ;
 paragraph-content ::= (text:reference-ref::(text-common-ref-content text-ref-content)) | (text:bookmark-ref::(text-common-ref-content text-ref-content)) ;
 paragraph-content ::= text:note-ref::(text-common-ref-content text-note-ref-content text-ref-content) ;
 paragraph-content ::= text:sequence-ref::(text-common-ref-content text-sequence-ref-content) ;
 paragraph-content ::= text:script::((xlink:href::anyURI (xlink:type::"simple")?) | string() (script:language::string)?) ;
 paragraph-content ::= text:execute-macro::((text:name::string)? office-event-listeners? string()) ;
 paragraph-content ::= text:hidden-paragraph::(text-hidden-paragraph-attlist string()) ;
 paragraph-content ::= text:dde-connection::(text:connection-name::string string()) ;
 paragraph-content ::= text:measure::(text:kind::("value" | "unit" | "gap") string()) ;
 paragraph-content ::= text:table-formula::(common-field-formula-attlist common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:toc-mark-start::text-toc-mark-start-attrs ;
 paragraph-content ::= text:toc-mark-end::text-id ;
 paragraph-content ::= text:toc-mark::(text:string-value::string text-outline-level) ;
 paragraph-content ::= text:user-index-mark-start::(text-id text-outline-level text-index-name) ;
 paragraph-content ::= text:user-index-mark-end::(text-id text-outline-level) ;
 paragraph-content ::= text:user-index-mark::(text:string-value::string text-outline-level text-index-name) ;
 paragraph-content ::= text:alphabetical-index-mark-start::(text-id text-alphabetical-index-mark-attrs) ;
 paragraph-content ::= text:alphabetical-index-mark-end::text-id ;
 paragraph-content ::= text:alphabetical-index-mark::(text:string-value::string text-alphabetical-index-mark-attrs) ;
 paragraph-content ::= text:bibliography-mark::(text:bibliography-type::text-bibliography-types ((text:identifier::string) | (text:address::string) | (text:annote::string) | (text:author::string) | (text:booktitle::string) | (text:chapter::string) | (text:edition::string) | (text:editor::string) | (text:howpublished::string) | (text:institution::string) | (text:journal::string) | (text:month::string) | (text:note::string) | (text:number::string) | (text:organizations::string) | (text:pages::string) | (text:publisher::string) | (text:school::string) | (text:series::string) | (text:title::string) | (text:report-type::string) | (text:volume::string) | (text:year::string) | (text:url::string) | (text:custom1::string) | (text:custom2::string) | (text:custom3::string) | (text:custom4::string) | (text:custom5::string) | (text:isbn::string) | (text:issn::string))* string()) ;
 paragraph-content ::= presentation:header::Îµ ;
 paragraph-content ::= presentation:footer::Îµ ;
 paragraph-content ::= presentation:date-time::Îµ ;
config-config-item-map-entry-attlist ::= (config:name::string)? ;
common-printable-attlist ::= (form:printable::boolean)? ;
heading-attrs ::= text:outline-level::positiveInteger ;
 heading-attrs ::= (text:restart-numbering::boolean)? ;
 heading-attrs ::= (text:start-value::nonNegativeInteger)? ;
 heading-attrs ::= (text:is-list-header::boolean)? ;
common-time-manip-attlist ::= (smil:accelerate::double)? ;
 common-time-manip-attlist ::= (smil:decelerate::double)? ;
 common-time-manip-attlist ::= (smil:autoReverse::boolean)? ;
common-endsync-timing-attlist ::= (smil:endsync::("first" | "last" | "all" | "media"))? ;
text-numbered-paragraph-attr ::= (text:level::positiveInteger)? ;
 text-numbered-paragraph-attr ::= text-list-attr ;
 text-numbered-paragraph-attr ::= text-list-item-attr ;
table-data-pilot-field-attlist ::= table:source-field-name::string ;
 table-data-pilot-field-attlist ::= (table:orientation::("row" | "column" | "data" | "hidden")) | (table:orientation::"page" table:selected-page::string) ;
 table-data-pilot-field-attlist ::= (table:is-data-layout-field::string)? ;
 table-data-pilot-field-attlist ::= (table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string))? ;
 table-data-pilot-field-attlist ::= (table:used-hierarchy::integer)? ;
office-styles ::= (office:styles::(styles style-default-style* text-outline-style? text-notes-configuration* text-bibliography-configuration? text-linenumbering-configuration? draw-gradient* svg-linearGradient* svg-radialGradient* draw-hatch* draw-fill-image* draw-marker* draw-stroke-dash* draw-opacity* style-presentation-page-layout*))? ;
common-vertical-pos-attlist ::= (style:vertical-pos::("top" | "middle" | "bottom" | "from-top" | "below"))? (svg:y::coordinate)? ;
style-chart-properties-attlist ::= (chart:scale-text::boolean)? ;
 style-chart-properties-attlist ::= (chart:three-dimensional::boolean)? ;
 style-chart-properties-attlist ::= (chart:deep::boolean)? ;
 style-chart-properties-attlist ::= (chart:symbol-type::"none") | (chart:symbol-type::"automatic") | (chart:symbol-type::"named-symbol" chart:symbol-name::("square" | "diamond" | "arrow-down" | "arrow-up" | "arrow-right" | "arrow-left" | "bow-tie" | "hourglass" | "circle" | "star" | "x" | "plus" | "asterisk" | "horizontal-bar" | "vertical-bar")) | (chart:symbol-type::"image" chart:symbol-image::(xlink:href::anyURI)) | Îµ ;
 style-chart-properties-attlist ::= (chart:symbol-width::nonNegativeLength)? (chart:symbol-height::nonNegativeLength)? ;
 style-chart-properties-attlist ::= (chart:vertical::boolean)? ;
 style-chart-properties-attlist ::= (chart:connect-bars::boolean)? ;
 style-chart-properties-attlist ::= (chart:gap-width::integer)? (chart:overlap::integer)? ;
 style-chart-properties-attlist ::= (chart:japanese-candle-stick::boolean)? ;
 style-chart-properties-attlist ::= (chart:interpolation::("none" | "cubic-spline" | "b-spline"))? (chart:spline-order::positiveInteger)? (chart:spline-resolution::positiveInteger)? ;
 style-chart-properties-attlist ::= (chart:pie-offset::nonNegativeInteger)? ;
 style-chart-properties-attlist ::= (chart:lines::boolean)? ;
 style-chart-properties-attlist ::= (chart:solid-type::("cuboid" | "cylinder" | "cone" | "pyramid"))? ;
 style-chart-properties-attlist ::= (chart:stacked::boolean)? (chart:percentage::boolean)? ;
 style-chart-properties-attlist ::= (chart:link-data-style-to-source::boolean)? ;
 style-chart-properties-attlist ::= (chart:visible::boolean)? ;
 style-chart-properties-attlist ::= (chart:logarithmic::boolean)? ;
 style-chart-properties-attlist ::= (chart:maximum::double)? (chart:minimum::double)? (chart:origin::double)? (chart:interval-major::double)? (chart:interval-minor::positiveInteger)? ;
 style-chart-properties-attlist ::= (chart:tick-marks-major-inner::boolean)? (chart:tick-marks-major-outer::boolean)? (chart:tick-marks-minor-inner::boolean)? (chart:tick-marks-minor-outer::boolean)? ;
 style-chart-properties-attlist ::= (chart:display-label::boolean)? (chart:text-overlap::boolean)? (text:line-break::boolean)? (chart:label-arrangement::("side-by-side" | "stagger-even" | "stagger-odd"))? ;
 style-chart-properties-attlist ::= common-style-direction-attlist ;
 style-chart-properties-attlist ::= common-rotation-angle-attlist ;
 style-chart-properties-attlist ::= (chart:data-label-number::("none" | "value" | "percentage"))? ;
 style-chart-properties-attlist ::= (chart:data-label-text::boolean)? ;
 style-chart-properties-attlist ::= (chart:data-label-symbol::boolean)? ;
 style-chart-properties-attlist ::= (chart:mean-value::boolean)? ;
 style-chart-properties-attlist ::= (chart:error-category::("none" | "variance" | "standard-deviation" | "percentage" | "error-margin" | "constant"))? ;
 style-chart-properties-attlist ::= (chart:error-percentage::double)? ;
 style-chart-properties-attlist ::= (chart:error-margin::double)? ;
 style-chart-properties-attlist ::= (chart:error-lower-limit::double)? (chart:error-upper-limit::double)? ;
 style-chart-properties-attlist ::= (chart:error-upper-indicator::boolean)? (chart:error-lower-indicator::boolean)? ;
 style-chart-properties-attlist ::= (chart:series-source::("columns" | "rows"))? ;
 style-chart-properties-attlist ::= (chart:regression-type::("none" | "linear" | "logarithmic" | "exponential" | "power"))? ;
table-table ::= table:table::(table-table-attlist table-table-source? office-dde-source? table-scenario? office-forms? table-shapes? table-columns-and-groups table-rows-and-groups) ;
text-linenumbering-configuration ::= text:linenumbering-configuration::(text-linenumbering-configuration-attlist text-linenumbering-separator?) ;
draw-path ::= draw:path::(common-draw-path-data-attlist common-draw-position-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
style-footnote-sep ::= (style:footnote-sep::style-footnote-sep-attlist)? ;
style-header-style ::= style:header-style::(style-header-footer-properties?) ;
anim-audio-attlist ::= (xlink:href::anyURI)? ;
 anim-audio-attlist ::= (anim:audio-level::double)? ;
table-table-cell-content ::= table-cell-range-source? office-annotation? table-detective? text-content* ;
number-day-attlist ::= (number:style::("short" | "long"))? ;
presentation-show-text ::= presentation:show-text::(common-presentation-effect-attlist presentation-sound?) ;
common-horizontal-margin-attlist ::= (fo:margin-left::(length | percent))? (fo:margin-right::(length | percent))? ;
text-page-continuation-attlist ::= text:select-page::("previous" | "next") ;
 text-page-continuation-attlist ::= (text:string-value::string)? ;
draw-area-circle ::= draw:area-circle::(common-draw-area-attlist svg:cx::coordinate svg:cy::coordinate svg:r::length svg-desc? office-event-listeners?) ;
text-user-index-source-attr ::= text-index-scope-attr text-relative-tab-stop-position-attr text:index-name::string ;
 text-user-index-source-attr ::= (text:use-index-marks::boolean)? (text:use-graphics::boolean)? (text:use-tables::boolean)? (text:use-floating-frames::boolean)? (text:use-objects::boolean)? ;
 text-user-index-source-attr ::= (text:copy-outline-levels::boolean)? ;
common-anim-add-accum-attlist ::= (smil:accumulate::("none" | "sum"))? ;
 common-anim-add-accum-attlist ::= (smil:additive::("replace" | "sum"))? ;
draw-connector ::= draw:connector::(draw-connector-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
anyElements ::= (string()? anyAttListOrElements string()?)* ;
draw-applet ::= draw:applet::(draw-applet-attlist common-draw-data-attlist? draw-param*) ;
text-linenumbering-configuration-attlist ::= (text:number-lines::boolean)? ;
 text-linenumbering-configuration-attlist ::= common-num-format-attlist? ;
 text-linenumbering-configuration-attlist ::= (text:style-name::styleNameRef)? ;
 text-linenumbering-configuration-attlist ::= (text:increment::nonNegativeInteger)? ;
 text-linenumbering-configuration-attlist ::= (text:number-position::("left" | "rigth" | "inner" | "outer"))? ;
 text-linenumbering-configuration-attlist ::= (text:offset::nonNegativeLength)? ;
 text-linenumbering-configuration-attlist ::= (text:count-empty-lines::boolean)? ;
 text-linenumbering-configuration-attlist ::= (text:count-in-text-boxes::boolean)? ;
 text-linenumbering-configuration-attlist ::= (text:restart-on-page::boolean)? ;
style-master-page ::= style:master-page::(style-master-page-attlist (style-header style-header-left?)? (style-footer style-footer-left?)? office-forms? style-style* shape* presentation-notes?) ;
style-handout-master-attlist ::= (presentation:presentation-page-layout-name::styleNameRef)? ;
 style-handout-master-attlist ::= style:page-layout-name::styleNameRef ;
 style-handout-master-attlist ::= (draw:style-name::styleNameRef)? ;
text-linenumbering-separator ::= text:linenumbering-separator::((text:increment::nonNegativeInteger)? string()) ;
list-source-type ::= (form:list-source-type::("table" | "query" | "sql" | "sql-pass-through" | "value-list" | "table-fields"))? ;
text-common-ref-content ::= string() ;
 text-common-ref-content ::= (text:ref-name::string)? ;
office-script ::= office:script::(office-script-attlist string()? anyElements string()?) ;
presentation-play-attlist ::= draw:shape-id::IDREF (presentation:speed::presentationSpeeds)? ;
svg-radialGradient ::= svg:radialGradient::(common-svg-gradient-attlist (svg:cx::(coordinate | percent))? (svg:cy::(coordinate | percent))? (svg:r::(coordinate | percent))? (svg:fx::(coordinate | percent))? (svg:fy::(coordinate | percent))? svg-stop*) ;
common-anim-spline-mode-attlist ::= (smil:calcMode::("discrete" | "linear" | "paced" | "spline"))? ;
office-scripts ::= (office:scripts::(office-script* office-event-listeners?))? ;
draw-connector-attlist ::= (draw:type::("standard" | "lines" | "line" | "curve"))? ;
 draw-connector-attlist ::= (svg:x1::coordinate svg:y1::coordinate)? ;
 draw-connector-attlist ::= (draw:start-shape::IDREF)? ;
 draw-connector-attlist ::= (draw:start-glue-point::nonNegativeInteger)? ;
 draw-connector-attlist ::= (svg:x2::coordinate svg:y2::coordinate)? ;
 draw-connector-attlist ::= (draw:end-shape::IDREF)? ;
 draw-connector-attlist ::= (draw:end-glue-point::nonNegativeInteger)? ;
 draw-connector-attlist ::= (draw:line-skew::(length (length length?)?))? ;
table-highlighted-range-attlist ::= (table:cell-range-address::cellRangeAddress)? ;
 table-highlighted-range-attlist ::= table:direction::("from-another-table" | "to-another-table" | "from-same-table") ;
 table-highlighted-range-attlist ::= (table:contains-error::boolean)? ;
common-vertical-margin-attlist ::= (fo:margin-top::(nonNegativeLength | percent))? (fo:margin-bottom::(nonNegativeLength | percent))? ;
button-type ::= (form:button-type::types)? ;
table-data-pilot-table ::= table:data-pilot-table::(table-data-pilot-table-attlist (table-database-source-sql | table-database-source-table | table-database-source-query | table-source-service | table-source-cell-range)? table-data-pilot-field+) ;
table-null-date ::= table:null-date::((table:value-type::valueType)? (table:date-value-type::date)?) ;
label ::= (form:label::string)? ;
style-header-footer-properties-attlist ::= (svg:height::length)? (fo:min-height::length)? ;
 style-header-footer-properties-attlist ::= common-horizontal-margin-attlist common-vertical-margin-attlist common-margin-attlist ;
 style-header-footer-properties-attlist ::= common-border-attlist ;
 style-header-footer-properties-attlist ::= common-border-line-width-attlist ;
 style-header-footer-properties-attlist ::= common-padding-attlist ;
 style-header-footer-properties-attlist ::= common-background-color-attlist ;
 style-header-footer-properties-attlist ::= common-shadow-attlist ;
style-font-face-attlist ::= (svg:font-family::string)? (svg:font-style::fontStyle)? (svg:font-variant::fontVariant)? (svg:font-weight::fontWeight)? (svg:font-stretch::("normal" | "ultra-condensed" | "extra-condensed" | "condensed" | "semi-condensed" | "semi-expanded" | "expanded" | "extra-expanded" | "ultra-expanded"))? (svg:font-size::positiveLength)? (svg:unicode-range::string())? (svg:units-per-em::integer)? (svg:panose-1::string())? (svg:stemv::integer)? (svg:stemh::integer)? (svg:slope::integer)? (svg:cap-height::integer)? (svg:x-height::integer)? (svg:accent-height::integer)? (svg:ascent::integer)? (svg:descent::integer)? (svg:widths::string())? (svg:bbox::string())? (svg:ideographic::integer)? (svg:alphabetic::integer)? (svg:mathematical::integer)? (svg:hanging::integer)? (svg:v-ideographic::integer)? (svg:v-alphabetic::integer)? (svg:v-mathematical::integer)? (svg:v-hanging::integer)? (svg:underline-position::integer)? (svg:underline-thickness::integer)? (svg:strikethrough-position::integer)? (svg:strikethrough-thickness::integer)? (svg:overline-position::integer)? (svg:overline-thickness::integer)? ;
 style-font-face-attlist ::= style:name::string ;
 style-font-face-attlist ::= (style:font-adornments::string)? ;
 style-font-face-attlist ::= (style:font-family-generic::fontFamilyGeneric)? ;
 style-font-face-attlist ::= (style:font-pitch::fontPitch)? ;
 style-font-face-attlist ::= (style:font-charset::textEncoding)? ;
style-num-letter-sync-attlist ::= (style:num-letter-sync::boolean)? ;
common-field-fixed-attlist ::= (text:fixed::boolean)? ;
draw-stroke-dash-attlist ::= draw:name::styleName ;
 draw-stroke-dash-attlist ::= (draw:display-name::string)? ;
 draw-stroke-dash-attlist ::= (draw:style::("rect" | "round"))? ;
 draw-stroke-dash-attlist ::= (draw:dots1::integer)? (draw:dots1-length::length)? (draw:dots2::integer)? (draw:dots2-length::length)? ;
 draw-stroke-dash-attlist ::= (draw:distance::length)? ;
style-master-page-attlist ::= style:name::styleName ;
 style-master-page-attlist ::= (style:display-name::string)? ;
 style-master-page-attlist ::= style:page-layout-name::styleNameRef ;
 style-master-page-attlist ::= (draw:style-name::styleNameRef)? ;
 style-master-page-attlist ::= (style:next-style-name::styleNameRef)? ;
number-month-attlist ::= (number:textual::boolean)? ;
 number-month-attlist ::= (number:possessive-form::boolean)? ;
 number-month-attlist ::= (number:style::("short" | "long"))? ;
table-cell-content-deletion ::= table:cell-content-deletion::((table:id::string)? table-cell-address? table-change-track-table-cell?) ;
chart-data-point-attlist ::= (chart:repeated::nonNegativeInteger)? ;
 chart-data-point-attlist ::= (chart:style-name::styleNameRef)? ;
number-seconds-attlist ::= (number:style::("short" | "long"))? ;
 number-seconds-attlist ::= (number:decimal-places::integer)? ;
table-deletion ::= table:deletion::(table-deletion-attlist common-table-change-attlist office-change-info table-dependencies? table-deletions? table-cut-offs?) ;
text-index-entry-bibliography-attrs ::= (text:style-name::styleNameRef)? ;
 text-index-entry-bibliography-attrs ::= text:bibliography-data-field::("address" | "annote" | "author" | "bibliography-type" | "booktitle" | "chapter" | "custom1" | "custom2" | "custom3" | "custom4" | "custom5" | "edition" | "editor" | "howpublished" | "identifier" | "institution" | "isbn" | "issn" | "journal" | "month" | "note" | "number" | "organizations" | "pages" | "publisher" | "report-type" | "school" | "series" | "title" | "url" | "volume" | "year") ;
text-index-entry-chapter-attrs ::= (text:display::("name" | "number" | "number-and-name"))? ;
common-field-data-style-name-attlist ::= (style:data-style-name::styleNameRef)? ;
style-column-attlist ::= style:rel-width::relativeLength ;
 style-column-attlist ::= (fo:start-indent::length)? ;
 style-column-attlist ::= (fo:end-indent::length)? ;
 style-column-attlist ::= (fo:space-before::length)? ;
 style-column-attlist ::= (fo:space-after::length)? ;
common-fill-timing-attlist ::= (smil:fill::("remove" | "freeze" | "hold" | "auto" | "default" | "transition"))? ;
common-data-style-attlist ::= style:name::styleName ;
 common-data-style-attlist ::= (number:language::languageCode)? ;
 common-data-style-attlist ::= (number:country::countryCode)? ;
 common-data-style-attlist ::= (number:title::string())? ;
 common-data-style-attlist ::= (style:volatile::boolean)? ;
 common-data-style-attlist ::= (number:transliteration-format::string)? ;
 common-data-style-attlist ::= (number:transliteration-language::countryCode)? ;
 common-data-style-attlist ::= (number:transliteration-country::countryCode)? ;
 common-data-style-attlist ::= (number:transliteration-style::("short" | "medium" | "long"))? ;
office-annotation ::= office:annotation::(office-annotation-attlist draw-caption-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist dc-creator? dc-date? meta-date-string? (text-p | text-list)*) ;
common-anim-target-attlist ::= (smil:targetElement::IDREF)? ;
 common-anim-target-attlist ::= (anim:sub-item::string)? ;
draw-line ::= draw:line::(draw-line-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
style-ruby-properties-attlist ::= (style:ruby-position::("above" | "below"))? ;
 style-ruby-properties-attlist ::= (style:ruby-align::("left" | "center" | "right" | "distribute-letter" | "distribute-space"))? ;
image-data ::= (form:image-data::anyURI)? ;
number-scientific-number-attlist ::= (number:min-exponent-digits::integer)? ;
text-section-source-attr ::= (xlink:href::anyURI (xlink:type::"simple")? (xlink:show::"embed")?)? ;
 text-section-source-attr ::= (text:section-name::string)? ;
 text-section-source-attr ::= (text:filter-name::string)? ;
table-sort-by-attlist ::= table:field-number::nonNegativeInteger ;
 table-sort-by-attlist ::= (table:data-type::("text" | "number" | "automatic" | string))? ;
 table-sort-by-attlist ::= (table:order::("ascending" | "descending"))? ;
table-source-service-attlist ::= table:name::string ;
 table-source-service-attlist ::= table:source-name::string ;
 table-source-service-attlist ::= table:object-name::string ;
 table-source-service-attlist ::= (table:user-name::string)? ;
 table-source-service-attlist ::= (table:password::string)? ;
common-calendar-attlist ::= (number:calendar::("gregorian" | "gengou" | "ROC" | "hanja_yoil" | "hanja" | "hijri" | "jewish" | "buddhist" | string))? ;
office-annotation-attlist ::= (office:display::boolean)? ;
common-dr3d-transform-attlist ::= (dr3d:transform::string())? ;
dr3d-scene-attlist ::= (dr3d:vrp::vector3D)? (dr3d:vpn::vector3D)? (dr3d:vup::vector3D)? ;
 dr3d-scene-attlist ::= (dr3d:projection::("parallel" | "perspective"))? ;
 dr3d-scene-attlist ::= (dr3d:distance::length)? ;
 dr3d-scene-attlist ::= (dr3d:focal-length::length)? ;
 dr3d-scene-attlist ::= (dr3d:shadow-slant::nonNegativeInteger)? ;
 dr3d-scene-attlist ::= (dr3d:shade-mode::("flat" | "phong" | "gouraud" | "draft"))? ;
 dr3d-scene-attlist ::= (dr3d:ambient-color::color)? ;
 dr3d-scene-attlist ::= (dr3d:lighting-mode::boolean)? ;
table-cell-content-change ::= table:cell-content-change::(common-table-change-attlist table-cell-address office-change-info table-dependencies? table-deletions? table-previous) ;
chart-legend-attlist ::= (chart:legend-position::("start" | "end" | "top" | "bottom") (chart:legend-align::("start" | "center" | "end"))?) | (chart:legend-position::("top-start" | "bottom-start" | "top-end" | "bottom-end")) | Îµ ;
 chart-legend-attlist ::= common-draw-position-attlist ;
 chart-legend-attlist ::= (style:legend-expansion::("wide" | "high" | "balanced")) | (style:legend-expansion::"custom" style:legend-expansion-aspect-ratio::double) | Îµ ;
 chart-legend-attlist ::= (chart:style-name::styleNameRef)? ;
draw-rect ::= draw:rect::(draw-rect-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
table-subtotal-rules ::= table:subtotal-rules::(table-subtotal-rules-attlist table-sort-groups? table-subtotal-rule*) ;
text-alphabetical-index-source ::= text:alphabetical-index-source::(text-alphabetical-index-source-attrs text-index-title-template? text-alphabetical-index-entry-template*) ;
common-draw-z-index-attlist ::= (draw:z-index::nonNegativeInteger)? ;
chart-plot-area ::= chart:plot-area::(chart-plot-area-attlist dr3d-light* chart-axis* chart-series* chart-stock-gain-marker? chart-stock-loss-marker? chart-stock-range-line? chart-wall? chart-floor?) ;
for ::= (form:for::string)? ;
chart-grid-attlist ::= (chart:class::("major" | "minor"))? ;
 chart-grid-attlist ::= (chart:style-name::styleNameRef)? ;
style-graphic-properties-attlist ::= (draw:stroke::("none" | "dash" | "solid"))? ;
 style-graphic-properties-attlist ::= (draw:stroke-dash::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:stroke-dash-names::styleNameRefs)? ;
 style-graphic-properties-attlist ::= (svg:stroke-width::length)? ;
 style-graphic-properties-attlist ::= (svg:stroke-color::color)? ;
 style-graphic-properties-attlist ::= (draw:marker-start::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:marker-end::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:marker-start-width::length)? ;
 style-graphic-properties-attlist ::= (draw:marker-end-width::length)? ;
 style-graphic-properties-attlist ::= (draw:marker-start-center::boolean)? ;
 style-graphic-properties-attlist ::= (draw:marker-end-center::boolean)? ;
 style-graphic-properties-attlist ::= (svg:stroke-opacity::(string() | percent))? ;
 style-graphic-properties-attlist ::= (draw:stroke-linejoin::("miter" | "round" | "bevel" | "middle" | "none" | "inherit"))? ;
 style-graphic-properties-attlist ::= (draw:symbol-color::color)? ;
 style-graphic-properties-attlist ::= (text:animation::("none" | "scroll" | "alternate" | "slide"))? ;
 style-graphic-properties-attlist ::= (text:animation-direction::("left" | "right" | "up" | "down"))? ;
 style-graphic-properties-attlist ::= (text:animation-start-inside::boolean)? ;
 style-graphic-properties-attlist ::= (text:animation-stop-inside::boolean)? ;
 style-graphic-properties-attlist ::= (text:animation-repeat::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (text:animation-delay::duration)? ;
 style-graphic-properties-attlist ::= (text:animation-steps::length)? ;
 style-graphic-properties-attlist ::= (draw:auto-grow-width::boolean)? (draw:auto-grow-height::boolean)? ;
 style-graphic-properties-attlist ::= (draw:fit-to-size::boolean)? ;
 style-graphic-properties-attlist ::= (draw:fit-to-contour::boolean)? ;
 style-graphic-properties-attlist ::= (draw:textarea-vertical-align::("top" | "middle" | "bottom" | "justify"))? ;
 style-graphic-properties-attlist ::= (draw:textarea-horizontal-align::("left" | "center" | "right" | "justify"))? ;
 style-graphic-properties-attlist ::= (fo:wrap-option::("no-wrap" | "wrap"))? ;
 style-graphic-properties-attlist ::= (draw:color-mode::("greyscale" | "mono" | "watermark" | "standard"))? ;
 style-graphic-properties-attlist ::= (draw:color-inversion::boolean)? ;
 style-graphic-properties-attlist ::= (draw:luminance::percent)? ;
 style-graphic-properties-attlist ::= (draw:contrast::percent)? ;
 style-graphic-properties-attlist ::= (draw:gamma::percent)? ;
 style-graphic-properties-attlist ::= (draw:red::percent)? ;
 style-graphic-properties-attlist ::= (draw:green::percent)? ;
 style-graphic-properties-attlist ::= (draw:blue::percent)? ;
 style-graphic-properties-attlist ::= (draw:image-opacity::percent)? ;
 style-graphic-properties-attlist ::= (draw:shadow::("visible" | "hidden"))? ;
 style-graphic-properties-attlist ::= (draw:shadow-offset-x::length)? (draw:shadow-offset-y::length)? ;
 style-graphic-properties-attlist ::= (draw:shadow-color::color)? ;
 style-graphic-properties-attlist ::= (draw:shadow-opacity::percent)? ;
 style-graphic-properties-attlist ::= (draw:start-line-spacing-horizontal::distance)? (draw:start-line-spacing-vertical::distance)? ;
 style-graphic-properties-attlist ::= (draw:end-line-spacing-horizontal::distance)? (draw:end-line-spacing-vertical::distance)? ;
 style-graphic-properties-attlist ::= (draw:line-distance::distance)? ;
 style-graphic-properties-attlist ::= (draw:guide-overhang::length)? ;
 style-graphic-properties-attlist ::= (draw:guide-distance::distance)? ;
 style-graphic-properties-attlist ::= (draw:start-guide::length)? ;
 style-graphic-properties-attlist ::= (draw:end-guide::length)? ;
 style-graphic-properties-attlist ::= (draw:placing::("below" | "above"))? ;
 style-graphic-properties-attlist ::= (draw:parallel::boolean)? ;
 style-graphic-properties-attlist ::= (draw:measure-align::("automatic" | "left-outside" | "inside" | "right-outside"))? (draw:measure-vertical-align::("automatic" | "above" | "below" | "center"))? ;
 style-graphic-properties-attlist ::= (draw:unit::("automatic" | "mm" | "cm" | "m" | "km" | "pt" | "pc" | "inch" | "ft" | "mi"))? ;
 style-graphic-properties-attlist ::= (draw:show-unit::boolean)? ;
 style-graphic-properties-attlist ::= (draw:decimal-places::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (draw:caption-type::("straight-line" | "angled-line" | "angled-connector-line"))? ;
 style-graphic-properties-attlist ::= (draw:caption-angle-type::("fixed" | "free"))? ;
 style-graphic-properties-attlist ::= (draw:caption-angle::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (draw:caption-gap::distance)? ;
 style-graphic-properties-attlist ::= (draw:caption-escape-direction::("horizontal" | "vertical" | "auto"))? ;
 style-graphic-properties-attlist ::= (draw:caption-escape::(length | percent))? ;
 style-graphic-properties-attlist ::= (draw:caption-line-length::length)? ;
 style-graphic-properties-attlist ::= (draw:caption-fit-line-length::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:horizontal-segments::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:vertical-segments::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:edge-rounding::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:edge-rounding-mode::("correct" | "attractive"))? ;
 style-graphic-properties-attlist ::= (dr3d:back-scale::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:depth::length)? ;
 style-graphic-properties-attlist ::= (dr3d:backface-culling::("enabled" | "disabled"))? ;
 style-graphic-properties-attlist ::= (dr3d:end-angle::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:close-front::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:close-back::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:lighting-mode::("standard" | "double-sided"))? ;
 style-graphic-properties-attlist ::= (dr3d:normals-kind::("object" | "flat" | "sphere"))? ;
 style-graphic-properties-attlist ::= (dr3d:normals-direction::("normal" | "inverse"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-generation-mode-x::("object" | "parallel" | "sphere"))? (dr3d:texture-generation-mode-y::("object" | "parallel" | "sphere"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-kind::("luminance" | "intesity" | "color"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-filter::("enabled" | "disabled"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-mode::("replace" | "modulate" | "blend"))? ;
 style-graphic-properties-attlist ::= (dr3d:ambient-color::color)? (dr3d:emissive-color::color)? (dr3d:specular-color::color)? (dr3d:diffuse-color::color)? ;
 style-graphic-properties-attlist ::= (dr3d:shininess::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:shadow::("visible" | "hidden"))? ;
 style-graphic-properties-attlist ::= common-draw-rel-size-attlist (fo:min-width::(length | percent))? ;
 style-graphic-properties-attlist ::= (fo:min-height::(length | percent))? ;
 style-graphic-properties-attlist ::= (fo:max-height::(length | percent))? (fo:max-width::(length | percent))? ;
 style-graphic-properties-attlist ::= common-horizontal-margin-attlist ;
 style-graphic-properties-attlist ::= common-vertical-margin-attlist ;
 style-graphic-properties-attlist ::= common-margin-attlist ;
 style-graphic-properties-attlist ::= (style:print-content::boolean)? ;
 style-graphic-properties-attlist ::= (style:protect::("none" | (("content" | "position" | "size")+)))? ;
 style-graphic-properties-attlist ::= (style:horizontal-pos::("left" | "center" | "right" | "from-left" | "inside" | "outside" | "from-inside"))? (svg:x::coordinate)? ;
 style-graphic-properties-attlist ::= (style:horizontal-rel::("page" | "page-content" | "page-start-margin" | "page-end-margin" | "frame" | "frame-content" | "frame-start-margin" | "frame-end-margin" | "paragraph" | "paragraph-content" | "paragraph-start-margin" | "paragraph-end-margin" | "char"))? ;
 style-graphic-properties-attlist ::= common-vertical-pos-attlist ;
 style-graphic-properties-attlist ::= common-vertical-rel-attlist ;
 style-graphic-properties-attlist ::= common-text-anchor-attlist ;
 style-graphic-properties-attlist ::= common-border-attlist ;
 style-graphic-properties-attlist ::= common-border-line-width-attlist ;
 style-graphic-properties-attlist ::= common-padding-attlist ;
 style-graphic-properties-attlist ::= common-shadow-attlist ;
 style-graphic-properties-attlist ::= common-background-color-attlist ;
 style-graphic-properties-attlist ::= (style:editable::boolean)? ;
 style-graphic-properties-attlist ::= (style:wrap::("none" | "left" | "right" | "parallel" | "dynamic" | "run-through" | "biggest"))? ;
 style-graphic-properties-attlist ::= (style:wrap-dynamic-treshold::nonNegativeLength)? ;
 style-graphic-properties-attlist ::= (style:number-wrapped-paragraphs::("no-limit" | positiveInteger))? ;
 style-graphic-properties-attlist ::= (style:wrap-contour::boolean)? ;
 style-graphic-properties-attlist ::= (style:wrap-contour-mode::("full" | "outside"))? ;
 style-graphic-properties-attlist ::= (style:run-through::("foreground" | "background"))? ;
 style-graphic-properties-attlist ::= (style:flow-with-text::boolean)? ;
 style-graphic-properties-attlist ::= (style:overflow-behavior::("clip" | "auto-create-new-frame"))? ;
 style-graphic-properties-attlist ::= (style:mirror::("none" | "vertical" | horizontal-mirror | ("vertical" horizontal-mirror) | (horizontal-mirror "vertical")))? ;
 style-graphic-properties-attlist ::= (fo:clip::string)? ;
 style-graphic-properties-attlist ::= (draw:wrap-influence-on-position::("iterative" | "once-concurrent" | "once-successive"))? ;
 style-graphic-properties-attlist ::= (draw:frame-display-scrollbar::boolean)? ;
 style-graphic-properties-attlist ::= (draw:frame-display-border::boolean)? ;
 style-graphic-properties-attlist ::= (draw:frame-margin-horizontal::nonNegativePixelLength)? (draw:frame-margin-vertical::nonNegativePixelLength)? ;
 style-graphic-properties-attlist ::= (draw:visible-area-left::nonNegativeLength)? (draw:visible-area-top::nonNegativeLength)? (draw:visible-area-width::positiveLength)? (draw:visible-area-height::positiveLength)? ;
 style-graphic-properties-attlist ::= (draw:ole-draw-aspect::nonNegativeInteger)? ;
office-font-face-decls ::= (office:font-face-decls::(style-font-face*))? ;
number-era-attlist ::= (number:style::("short" | "long"))? ;
number-percentage-style ::= number:percentage-style::(common-data-style-attlist style-text-properties? number-text? number-and-text? style-map*) ;
text-hidden-text-attlist ::= text:condition::formula ;
 text-hidden-text-attlist ::= text:string-value::string ;
 text-hidden-text-attlist ::= (text:is-hidden::boolean)? ;
table-named-expression-attlist ::= table:name::string table:expression::string (table:base-cell-address::cellAddress)? ;
chart-plot-area-attlist ::= common-draw-position-attlist common-draw-size-attlist ;
 chart-plot-area-attlist ::= (chart:style-name::styleNameRef)? ;
 chart-plot-area-attlist ::= (table:cell-range-address::cellRangeAddress)? ;
 chart-plot-area-attlist ::= (chart:data-source-has-labels::("none" | "row" | "column" | "both"))? ;
 chart-plot-area-attlist ::= dr3d-scene-attlist common-dr3d-transform-attlist ;
script-event-listener-attlist ::= script:event-name::string ;
 script-event-listener-attlist ::= script:language::string ;
 script-event-listener-attlist ::= (script:macro-name::string) | (xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")?) ;
draw-fill-image ::= draw:fill-image::(draw-fill-image-attlist xlink:href::anyURI (xlink:type::"simple")? (xlink:show::"embed")? (xlink:actuate::"onLoad")?) ;
form-formatted-text-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist ;
 form-formatted-text-attlist ::= (form:max-value::string)? ;
 form-formatted-text-attlist ::= (form:min-value::string)? ;
 form-formatted-text-attlist ::= (form:validation::boolean)? ;
draw-param-attlist ::= (draw:name::string())? ;
 draw-param-attlist ::= (draw:value::string())? ;
common-begin-end-timing-attlist ::= (smil:begin::string)? ;
 common-begin-end-timing-attlist ::= (smil:end::string)? ;
common-presentation-effect-attlist ::= draw:shape-id::IDREF ;
 common-presentation-effect-attlist ::= (presentation:effect::presentationEffects)? ;
 common-presentation-effect-attlist ::= (presentation:direction::presentationEffectDirections)? ;
 common-presentation-effect-attlist ::= (presentation:speed::presentationSpeeds)? ;
 common-presentation-effect-attlist ::= (presentation:delay::duration)? ;
 common-presentation-effect-attlist ::= (presentation:start-scale::percent)? ;
 common-presentation-effect-attlist ::= (presentation:path-id::string())? ;
style-columns-attlist ::= fo:column-count::positiveInteger ;
 style-columns-attlist ::= (fo:column-gap::length)? ;
text-a-attlist ::= (office:name::string)? ;
 text-a-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? ;
 text-a-attlist ::= (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? ;
 text-a-attlist ::= (text:style-name::styleNameRef)? (text:visited-style-name::styleNameRef)? ;
style-header-footer-attlist ::= (style:dynamic-spacing::boolean)? ;
anin-iterate-attlist ::= (smil:targetElement::IDREF)? ;
 anin-iterate-attlist ::= (anim:iterate-type::string)? ;
 anin-iterate-attlist ::= (anim:iterate-interval::duration)? ;
style-graphic-fill-properties-attlist ::= (draw:fill::("none" | "solid" | "bitmap" | "gradient" | "hatch"))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-color::color)? ;
 style-graphic-fill-properties-attlist ::= (draw:secondary-fill-color::color)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-gradient-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (draw:gradient-step-count::nonNegativeInteger)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-hatch-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-hatch-solid::boolean)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (style:repeat::("no-repeat" | "repeat" | "stretch"))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-width::(length | percent))? (draw:fill-image-height::(length | percent))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-ref-point-x::percent)? (draw:fill-image-ref-point-y::percent)? (draw:fill-image-ref-point::("top-left" | "top" | "top-right" | "left" | "center" | "right" | "bottom-left" | "bottom" | "bottom-right"))? ;
 style-graphic-fill-properties-attlist ::= (draw:tile-repeat-offset::string())? ;
 style-graphic-fill-properties-attlist ::= (draw:opacity::percent)? ;
 style-graphic-fill-properties-attlist ::= (draw:opacity-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (svg:fill-rule::("nonzero" | "evenodd"))? ;
common-draw-rel-size-attlist ::= common-draw-size-attlist (style:rel-width::(percent | "scale" | "scale-min"))? (style:rel-height::(percent | "scale" | "scale-min"))? ;
common-current-value-attlist ::= (form:current-value::string)? ;
dr3d-sphere-attlist ::= (dr3d:center::vector3D)? ;
 dr3d-sphere-attlist ::= (dr3d:size::vector3D)? ;
draw-fill-image-attlist ::= draw:name::styleName ;
 draw-fill-image-attlist ::= (draw:display-name::string)? ;
 draw-fill-image-attlist ::= (svg:width::length)? (svg:height::length)? ;
table-content-validation ::= table:content-validation::(table-validation-attlist table-help-message? (table-error-message | (table-error-macro office-event-listeners?))?) ;
table-data-pilot-level ::= table:data-pilot-level::(table-data-pilot-level-attlist table-data-pilot-subtotals? table-data-pilot-members? table-data-pilot-display-info? table-data-pilot-sort-info? table-data-pilot-layout-info?) ;
common-dur-timing-attlist ::= (smil:dur::string)? ;
chart-mean-value-attlist ::= (chart:style-name::styleNameRef)? ;
style-text-properties-attlist ::= (fo:font-variant::fontVariant)? ;
 style-text-properties-attlist ::= (fo:text-transform::("none" | "lowercase" | "uppercase" | "capitalize"))? ;
 style-text-properties-attlist ::= (fo:color::color)? ;
 style-text-properties-attlist ::= (style:use-window-font-color::boolean)? ;
 style-text-properties-attlist ::= (style:text-outline::boolean)? ;
 style-text-properties-attlist ::= (style:text-line-through-type::lineType)? ;
 style-text-properties-attlist ::= (style:text-line-through-style::lineStyle)? ;
 style-text-properties-attlist ::= (style:text-line-through-width::lineWidth)? ;
 style-text-properties-attlist ::= (style:text-line-through-color::("font-color" | color))? ;
 style-text-properties-attlist ::= (style:text-line-through-text::string)? ;
 style-text-properties-attlist ::= (style:text-line-through-text-style::styleNameRef)? ;
 style-text-properties-attlist ::= (style:text-position::(percent | "super" | "sub" percent?))? ;
 style-text-properties-attlist ::= (style:font-name::string)? (style:font-name-asian::string)? (style:font-name-complex::string)? ;
 style-text-properties-attlist ::= (fo:font-family::string)? (style:font-family-asian::string)? (style:font-family-complex::string)? ;
 style-text-properties-attlist ::= (style:font-family-generic::fontFamilyGeneric)? (style:font-family-generic-asian::fontFamilyGeneric)? (style:font-family-generic-complex::fontFamilyGeneric)? ;
 style-text-properties-attlist ::= (style:font-style-name::string)? (style:font-style-name-asian::string)? (style:font-style-name-complex::string)? ;
 style-text-properties-attlist ::= (style:font-pitch::fontPitch)? (style:font-pitch-asian::fontPitch)? (style:font-pitch-complex::fontPitch)? ;
 style-text-properties-attlist ::= (style:font-charset::textEncoding)? ;
 style-text-properties-attlist ::= (fo:font-size::(positiveLength | percent))? (style:font-size-asian::(positiveLength | percent))? (style:font-size-complex::(positiveLength | percent))? ;
 style-text-properties-attlist ::= (style:font-size-rel::length)? (style:font-size-rel-asian::length)? (style:font-size-rel-complex::length)? ;
 style-text-properties-attlist ::= (style:script-type::("latin" | "asian" | "complex" | "ignore"))? ;
 style-text-properties-attlist ::= (fo:letter-spacing::(length | "normal"))? ;
 style-text-properties-attlist ::= (fo:language::languageCode)? (style:language-asian::languageCode)? (style:language-complex::languageCode)? ;
 style-text-properties-attlist ::= (fo:country::countryCode)? (style:country-asian::countryCode)? (style:country-complex::countryCode)? ;
 style-text-properties-attlist ::= (fo:font-style::fontStyle)? (style:font-style-asian::fontStyle)? (style:font-style-complex::fontStyle)? ;
 style-text-properties-attlist ::= (style:font-relief::("none" | "embossed" | "engraved"))? ;
 style-text-properties-attlist ::= (fo:text-shadow::shadowType)? ;
 style-text-properties-attlist ::= (style:text-underline-type::lineType)? ;
 style-text-properties-attlist ::= (style:text-underline-style::lineStyle)? ;
 style-text-properties-attlist ::= (style:text-underline-width::lineWidth)? ;
 style-text-properties-attlist ::= (style:text-underline-color::("font-color" | color))? ;
 style-text-properties-attlist ::= (fo:font-weight::fontWeight)? (style:font-weight-asian::fontWeight)? (style:font-weight-complex::fontWeight)? ;
 style-text-properties-attlist ::= (style:text-underline-mode::lineMode)? ;
 style-text-properties-attlist ::= (style:text-line-through-mode::lineMode)? ;
 style-text-properties-attlist ::= (style:letter-kerning::boolean)? ;
 style-text-properties-attlist ::= (style:text-blinking::boolean)? ;
 style-text-properties-attlist ::= common-background-color-attlist ;
 style-text-properties-attlist ::= (style:text-combine::("none" | "letters" | "lines"))? ;
 style-text-properties-attlist ::= (style:text-combine-start-char::character)? (style:text-combine-end-char::character)? ;
 style-text-properties-attlist ::= (style:text-emphasize::("none" | ("none" | "accent" | "dot" | "circle" | "disc" "above" | "below")))? ;
 style-text-properties-attlist ::= (style:text-scale::percent)? ;
 style-text-properties-attlist ::= (style:text-rotation-angle::integer)? ;
 style-text-properties-attlist ::= (style:text-rotation-scale::("fixed" | "line-height"))? ;
 style-text-properties-attlist ::= (fo:hyphenate::boolean)? ;
 style-text-properties-attlist ::= (fo:hyphenation-remain-char-count::positiveInteger)? ;
 style-text-properties-attlist ::= (fo:hyphenation-push-char-count::positiveInteger)? ;
 style-text-properties-attlist ::= (text:display::"true") | (text:display::"none") | (text:display::"condition" text:condition::"none") | Îµ ;
number-time-style-attlist ::= (number:truncate-on-overflow::boolean)? ;
draw-equation-attlist ::= (draw:name::string)? ;
 draw-equation-attlist ::= (draw:formula::string)? ;
office-dde-source-attlist ::= (office:name::string)? ;
 office-dde-source-attlist ::= (office:conversion-mode::("into-default-style-data-style" | "into-english-number" | "keep-text"))? ;
text-conditional-text-attlist ::= text:condition::formula ;
 text-conditional-text-attlist ::= text:string-value-if-true::string ;
 text-conditional-text-attlist ::= text:string-value-if-false::string ;
 text-conditional-text-attlist ::= (text:current-value::boolean)? ;
text-object-index-source ::= text:object-index-source::(text-object-index-source-attrs text-index-title-template? text-object-index-entry-template?) ;
style-table-column-properties-attlist ::= (style:column-width::positiveLength)? (style:rel-column-width::relativeLength)? ;
 style-table-column-properties-attlist ::= (style:use-optimal-column-width::boolean)? ;
 style-table-column-properties-attlist ::= common-break-attlist ;
office-meta-data ::= meta:generator::string ;
 office-meta-data ::= dc:title::string ;
 office-meta-data ::= dc:description::string ;
 office-meta-data ::= dc:subject::string ;
 office-meta-data ::= meta:keyword::string ;
 office-meta-data ::= meta:initial-creator::string ;
 office-meta-data ::= dc-creator ;
 office-meta-data ::= meta:printed-by::string ;
 office-meta-data ::= meta:creation-date::dateTime ;
 office-meta-data ::= dc-date ;
 office-meta-data ::= meta:print-date::dateTime ;
 office-meta-data ::= meta:template::(xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? (xlink:title::string)? (meta:date::dateTime)?) ;
 office-meta-data ::= meta:auto-reload::((xlink:type::"simple")? (xlink:show::"replace")? (xlink:actuate::"onLoad")? (xlink:href::anyURI)? (meta:delay::duration)?) ;
 office-meta-data ::= meta:hyperlink-behaviour::((office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))?) ;
 office-meta-data ::= dc:language::language ;
 office-meta-data ::= meta:editing-cycles::nonNegativeInteger ;
 office-meta-data ::= meta:editing-duration::duration ;
 office-meta-data ::= meta:document-statistic::((meta:page-count::nonNegativeInteger)? (meta:table-count::nonNegativeInteger)? (meta:draw-count::nonNegativeInteger)? (meta:image-count::nonNegativeInteger)? (meta:ole-object-count::nonNegativeInteger)? (meta:paragraph-count::nonNegativeInteger)? (meta:word-count::nonNegativeInteger)? (meta:character-count::nonNegativeInteger)? (frame-count::nonNegativeInteger)? (sentence-count::nonNegativeInteger)? (syllable-count::nonNegativeInteger)? (non-whitespace-character-count::nonNegativeInteger)? (meta:row-count::nonNegativeInteger)? (meta:cell-count::nonNegativeInteger)? (meta:object-count::nonNegativeInteger)?) ;
 office-meta-data ::= meta:user-defined::(meta:name::string (meta:value-type::"float" double) | (meta:value-type::"date" dateOrDateTime) | (meta:value-type::"time" duration) | (meta:value-type::"boolean" boolean) | (meta:value-type::"string" string) | string()) ;
text-ref-content ::= (text:reference-format::("page" | "chapter" | "direction" | "text"))? ;
form-checkbox-attlist ::= form-control-attlist common-disabled-attlist label common-printable-attlist common-tab-attlist common-title-attlist common-value-attlist common-data-field-attlist common-form-visual-effect-attlist common-form-relative-image-position-attlist ;
 form-checkbox-attlist ::= (form:current-state::states)? ;
 form-checkbox-attlist ::= (form:is-tristate::boolean)? ;
 form-checkbox-attlist ::= (form:state::states)? ;
text-hidden-paragraph-attlist ::= text:condition::formula ;
 text-hidden-paragraph-attlist ::= (text:is-hidden::boolean)? ;
presentation-sound ::= presentation:sound::(presentation-sound-attlist xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? (xlink:show::("new" | "replace"))?) ;
text-list-item-attr ::= (text:start-value::nonNegativeInteger)? ;
selected ::= (form:selected::boolean)? ;
chart-title-attlist ::= (table:cell-range::cellAddress)? ;
 chart-title-attlist ::= common-draw-position-attlist ;
 chart-title-attlist ::= (chart:style-name::styleNameRef)? ;
common-draw-circle-ellipse-attlist ::= (svg:cx::coordinate svg:cy::coordinate)? ;
 common-draw-circle-ellipse-attlist ::= (draw:kind::("full" | "section" | "cut" | "arc"))? ;
 common-draw-circle-ellipse-attlist ::= (draw:start-angle::double)? ;
 common-draw-circle-ellipse-attlist ::= (draw:end-angle::double)? ;
text-page-number-attlist ::= common-field-num-format-attlist common-field-fixed-attlist ;
 text-page-number-attlist ::= (text:page-adjust::integer)? ;
 text-page-number-attlist ::= (text:select-page::("previous" | "current" | "next"))? ;
style-background-image ::= (style:background-image::(style-background-image-attlist common-draw-data-attlist | office-binary-data | Îµ))? ;
dr3d-cube-attlist ::= (dr3d:min-edge::vector3D)? (dr3d:max-edge::vector3D)? ;
form-property-type-and-value-list ::= (office:value-type::"float" (form:list-value::(office:value::double))*) | (office:value-type::"percentage" (form:list-value::(office:value::double))*) | (office:value-type::"currency" (form:list-value::(office:value::double (office:currency::string)?))*) | (office:value-type::"date" (form:list-value::(office:date-value::dateOrDateTime))*) | (office:value-type::"time" (form:list-value::(office:time-value::duration))*) | (office:value-type::"boolean" (form:list-value::(office:boolean-value::boolean))*) | (office:value-type::"string" (form:list-value::(office:string-value::string))*) | (office:value-type::"void") ;
draw-enhanced-geometry-attlist ::= (draw:type::custom-shape-type)? ;
 draw-enhanced-geometry-attlist ::= (svg:viewBox::(integer integer integer integer))? ;
 draw-enhanced-geometry-attlist ::= (draw:mirror-vertical::boolean)? (draw:mirror-horizontal::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-rotate-angle::double)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:concentric-gradient-fill-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-brightness::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-depth::(length double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-diffusion::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-number-of-line-segments::integer)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-light-face::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-harsh::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-harsh::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-level::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-level::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-direction::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-direction::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-metal::boolean)? ;
 draw-enhanced-geometry-attlist ::= (dr3d:shade-mode::("flat" | "phong" | "gouraud" | "draft"))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-rotation-angle::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-rotation-center::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-shininess::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-skew::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-specularity::percent)? ;
 draw-enhanced-geometry-attlist ::= (dr3d:projection::("parallel" | "perspective"))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-viewpoint::point3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-origin::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-color::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:enhanced-path::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:path-stretchpoint-x::double)? (draw:path-stretchpoint-y::double)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-areas::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-points::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-point-type::("none" | "segments" | "rectangle"))? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-point-leaving-directions::string())? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-mode::("normal" | "path" | "shape"))? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-scale::("path" | "shape"))? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-same-letter-heights::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:modifiers::string)? ;
style-presentation-page-layout ::= style:presentation-page-layout::(style:name::styleName (style:display-name::string)? presentation-placeholder*) ;
text-index-entry-page-number ::= text:index-entry-page-number::((text:style-name::styleNameRef)?) ;
style-drop-cap ::= (style:drop-cap::style-drop-cap-attlist)? ;
text-alphabetical-index-auto-mark-file ::= text:alphabetical-index-auto-mark-file::(xlink:href::anyURI (xlink:type::"simple")?) ;
presentation-sound-attlist ::= (presentation:play-full::boolean)? ;
draw-gradient-attlist ::= (draw:start-color::color)? (draw:end-color::color)? ;
 draw-gradient-attlist ::= (draw:start-intensity::percent)? (draw:end-intensity::percent)? ;
style-background-image-attlist ::= (style:repeat::("no-repeat" | "repeat" | "stretch"))? ;
 style-background-image-attlist ::= (style:position::("left" | "center" | "right" | "top" | "bottom" | (horiBackPos vertBackPos) | (vertBackPos horiBackPos)))? ;
 style-background-image-attlist ::= (style:filter-name::string)? ;
 style-background-image-attlist ::= (draw:opacity::percent)? ;
common-writing-mode-attlist ::= (style:writing-mode::("lr-tb" | "rl-tb" | "tb-rl" | "tb-lr" | "lr" | "rl" | "tb" | "page"))? ;
text-illustration-index-source-attrs ::= text-index-scope-attr ;
 text-illustration-index-source-attrs ::= text-relative-tab-stop-position-attr ;
 text-illustration-index-source-attrs ::= (text:use-caption::boolean)? ;
 text-illustration-index-source-attrs ::= (text:caption-sequence-name::string)? ;
 text-illustration-index-source-attrs ::= (text:caption-sequence-format::("text" | "category-and-value" | "caption"))? ;
text-sequence-decl-attlist ::= common-field-name-attlist ;
 text-sequence-decl-attlist ::= text:display-outline-level::nonNegativeInteger ;
 text-sequence-decl-attlist ::= (text:separation-character::character)? ;
svg-font-face-name ::= svg:font-face-name::((name::string())?) ;
bound-column ::= (form:bound-column::string)? ;
xforms-bind-attlist ::= (xforms:bind::string)? ;
style-drop-cap-attlist ::= (style:length::("word" | positiveInteger))? ;
 style-drop-cap-attlist ::= (style:lines::positiveInteger)? ;
 style-drop-cap-attlist ::= (style:distance::length)? ;
 style-drop-cap-attlist ::= (style:style-name::styleNameRef)? ;
table-linked-source-attlist ::= (xlink:type::"simple")? (xlink:actuate::"onRequest")? xlink:href::anyURI ;
 table-linked-source-attlist ::= (table:filter-name::string)? ;
 table-linked-source-attlist ::= (table:filter-options::string)? ;
 table-linked-source-attlist ::= (table:refresh-delay::duration)? ;
text-tracked-changes ::= (text:tracked-changes::(text-tracked-changes-attr text-changed-region*))? ;
text-index-entry-link-end ::= text:index-entry-link-end::((text:style-name::styleNameRef)?) ;
text-outline-level-style ::= text:outline-level-style::(text-outline-level-style-attlist style-list-level-properties? style-text-properties?) ;
number-hours-attlist ::= (number:style::("short" | "long"))? ;
text-list-style-attr ::= style:name::styleName ;
 text-list-style-attr ::= (style:display-name::string)? ;
 text-list-style-attr ::= (text:consecutive-numbering::boolean)? ;
common-presentation-header-footer-attlist ::= (presentation:use-header-name::string)? ;
 common-presentation-header-footer-attlist ::= (presentation:use-footer-name::string)? ;
 common-presentation-header-footer-attlist ::= (presentation:use-date-time-name::string)? ;
sectionAttr ::= (text:style-name::styleNameRef)? ;
 sectionAttr ::= text:name::string ;
 sectionAttr ::= (text:protected::boolean)? ;
 sectionAttr ::= (text:protection-key::string)? ;
office-meta ::= (office:meta::office-meta-content)? ;
draw-opacity-attlist ::= (draw:start::percent)? (draw:end::percent)? ;
style-table-row-properties-attlist ::= (style:row-height::positiveLength)? (style:min-row-height::nonNegativeLength)? ;
 style-table-row-properties-attlist ::= (style:use-optimal-row-height::boolean)? ;
 style-table-row-properties-attlist ::= common-background-color-attlist ;
 style-table-row-properties-attlist ::= common-break-attlist ;
 style-table-row-properties-attlist ::= (fo:keep-together::("auto" | "always"))? ;
common-auto-reorder-attlist ::= (number:automatic-order::boolean)? ;
target-location ::= (xlink:href::anyURI)? ;
current-selected ::= (form:current-selected::boolean)? ;
draw-circle-attlist ::= (svg:r::length)? ;
chart-footer ::= chart:footer::(chart-title-attlist text-p?) ;
text-decls ::= (text:variable-decls::(text-variable-decl*))? (text:sequence-decls::(text-sequence-decl*))? (text:user-field-decls::(text-user-field-decl*))? (text:dde-connection-decls::(text-dde-connection-decl*))? text-alphabetical-index-auto-mark-file? ;
common-stock-marker-attlist ::= (chart:style-name::styleNameRef)? ;
form-number-attlist ::= (form:value::double)? ;
 form-number-attlist ::= (form:current-value::double)? ;
 form-number-attlist ::= (form:min-value::double)? ;
 form-number-attlist ::= (form:max-value::double)? ;
chart-regression-curve-attlist ::= (chart:style-name::styleNameRef)? ;
common-dde-connection-decl-attlist ::= office:dde-application::string ;
 common-dde-connection-decl-attlist ::= office:dde-topic::string ;
 common-dde-connection-decl-attlist ::= office:dde-item::string ;
 common-dde-connection-decl-attlist ::= (office:automatic-update::boolean)? ;
common-value-and-type-attlist ::= (office:value-type::"float" office:value::double) | (office:value-type::"percentage" office:value::double) | (office:value-type::"currency" office:value::double (office:currency::string)?) | (office:value-type::"date" office:date-value::dateOrDateTime) | (office:value-type::"time" office:time-value::duration) | (office:value-type::"boolean" office:boolean-value::boolean) | (office:value-type::"string" (office:string-value::string)?) ;
text-time-attlist ::= common-field-fixed-attlist common-field-data-style-name-attlist ;
 text-time-attlist ::= (text:time-value::timeOrDateTime)? ;
 text-time-attlist ::= (text:time-adjust::duration)? ;
common-number-attlist ::= (number:min-integer-digits::integer)? ;
 common-number-attlist ::= (number:grouping::boolean)? ;
draw-caption ::= draw:caption::(draw-caption-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
common-decimal-places-attlist ::= (number:decimal-places::integer)? ;
table-functions ::= table-named-expressions? table-database-ranges? table-data-pilot-tables? table-consolidation? table-dde-links? ;
form-combobox-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist dropdown common-maxlength-attlist common-printable-attlist common-readonly-attlist size common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist list-source list-source-type ;
 form-combobox-attlist ::= (form:auto-complete::boolean)? ;
common-page-number-attlist ::= (style:page-number::positiveInteger)? ;
text-database-next-attlist ::= common-field-database-table ;
 text-database-next-attlist ::= (text:condition::formula)? ;
common-vertical-rel-attlist ::= (style:vertical-rel::("page" | "page-content" | "frame" | "frame-content" | "paragraph" | "paragraph-content" | "char" | "line" | "baseline" | "text"))? ;
form-listbox-attlist ::= form-control-attlist common-disabled-attlist dropdown common-printable-attlist size common-tab-attlist common-title-attlist bound-column common-data-field-attlist list-source list-source-type ;
 form-listbox-attlist ::= (form:multiple::boolean)? ;
 form-listbox-attlist ::= (form:xforms-list-source::string)? ;
style-table-cell-properties-attlist ::= (style:vertical-align::("top" | "middle" | "bottom" | "automatic"))? ;
 style-table-cell-properties-attlist ::= (style:text-align-source::("fix" | "value-type"))? ;
 style-table-cell-properties-attlist ::= common-style-direction-attlist ;
 style-table-cell-properties-attlist ::= (style:glyph-orientation-vertical::("auto" | "0"))? ;
 style-table-cell-properties-attlist ::= common-shadow-attlist ;
 style-table-cell-properties-attlist ::= common-background-color-attlist ;
 style-table-cell-properties-attlist ::= common-border-attlist ;
 style-table-cell-properties-attlist ::= (style:diagonal-tl-br::string)? (style:diagonal-tl-br-widths::borderWidths)? (style:diagonal-bl-tr::string)? (style:diagonal-bl-tr-widths::borderWidths)? ;
 style-table-cell-properties-attlist ::= common-border-line-width-attlist ;
 style-table-cell-properties-attlist ::= common-padding-attlist ;
 style-table-cell-properties-attlist ::= (fo:wrap-option::("no-wrap" | "wrap"))? ;
 style-table-cell-properties-attlist ::= common-rotation-angle-attlist ;
 style-table-cell-properties-attlist ::= (style:rotation-align::("none" | "bottom" | "top" | "center"))? ;
 style-table-cell-properties-attlist ::= (style:cell-protect::("none" | "hidden-and-protected" | (("protected" | "formula-hidden")+)))? ;
 style-table-cell-properties-attlist ::= (style:print-content::boolean)? ;
 style-table-cell-properties-attlist ::= (style:decimal-places::nonNegativeInteger)? ;
 style-table-cell-properties-attlist ::= (style:repeat-content::boolean)? ;
 style-table-cell-properties-attlist ::= (style:shrink-to-fit::boolean)? ;
draw-ellipse ::= draw:ellipse::(common-draw-circle-ellipse-attlist draw-ellipse-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
common-draw-id-attlist ::= (draw:id::ID)? ;
text-alphabetical-index-mark-attrs ::= (text:key1::string)? (text:key2::string)? ;
 text-alphabetical-index-mark-attrs ::= (text:string-value-phonetic::string)? (text:key1-phonetic::string)? (text:key2-phonetic::string)? ;
 text-alphabetical-index-mark-attrs ::= (text:main-entry::boolean)? ;
chart-floor-attlist ::= (svg:width::length)? ;
 chart-floor-attlist ::= (chart:style-name::styleNameRef)? ;
common-field-display-value-formula-none-attlist ::= (text:display::("value" | "formula" | "none"))? ;
common-repeat-timing-attlist ::= (smil:repeatDur::string smil:repeatCount::nonNegativeInteger)? ;
form-value-range-attlist ::= form-control-attlist common-disabled-attlist common-printable-attlist common-tab-attlist common-title-attlist common-value-attlist ;
 form-value-range-attlist ::= (form:max-value::string)? ;
 form-value-range-attlist ::= (form:min-value::string)? ;
 form-value-range-attlist ::= (form:step-size::positiveInteger)? ;
 form-value-range-attlist ::= (form:page-step-size::positiveInteger)? ;
 form-value-range-attlist ::= (form:delay-for-repeat::duration)? ;
 form-value-range-attlist ::= (form:orientation::("horizontal" | "vertical"))? ;
table-database-range ::= table:database-range::(table-database-range-attlist (table-database-source-sql | table-database-source-table | table-database-source-query)? table-filter? table-sort? table-subtotal-rules?) ;
table-decls ::= table-calculation-settings? table-content-validations? table-label-ranges? ;
number-boolean-style ::= number:boolean-style::(common-data-style-attlist style-text-properties? number-text? (number-boolean number-text?)? style-map*) ;
table-error-macro ::= table:error-macro::((table:execute::boolean)?) ;
text-bibliography-source ::= text:bibliography-source::(text-index-title-template? text-bibliography-entry-template*) ;
text-index-scope-attr ::= (text:index-scope::("document" | "chapter"))? ;
text-relative-tab-stop-position-attr ::= (text:relative-tab-stop-position::boolean)? ;
text-sort-key-attlist ::= text:key::("address" | "annote" | "author" | "bibliography-type" | "booktitle" | "chapter" | "custom1" | "custom2" | "custom3" | "custom4" | "custom5" | "edition" | "editor" | "howpublished" | "identifier" | "institution" | "isbn" | "issn" | "journal" | "month" | "note" | "number" | "organizations" | "pages" | "publisher" | "report-type" | "school" | "series" | "title" | "url" | "volume" | "year") (text:sort-ascending::boolean)? ;
number-currency-symbol-attlist ::= (number:language::languageCode)? (number:country::countryCode)? ;
style-list-level-properties-attlist ::= common-text-align ;
 style-list-level-properties-attlist ::= (text:space-before::nonNegativeLength)? ;
 style-list-level-properties-attlist ::= (text:min-label-width::nonNegativeLength)? ;
 style-list-level-properties-attlist ::= (text:min-label-distance::nonNegativeLength)? ;
 style-list-level-properties-attlist ::= (style:font-name::string)? ;
 style-list-level-properties-attlist ::= (fo:width::positiveLength)? (fo:height::positiveLength)? ;
 style-list-level-properties-attlist ::= common-vertical-rel-attlist common-vertical-pos-attlist ;
text-list-level-style-number-attr ::= (text:style-name::styleNameRef)? ;
 text-list-level-style-number-attr ::= common-num-format-attlist common-num-format-prefix-suffix-attlist ;
 text-list-level-style-number-attr ::= (text:display-levels::positiveInteger)? ;
 text-list-level-style-number-attr ::= (text:start-value::positiveInteger)? ;
common-border-attlist ::= (fo:border::string)? (fo:border-top::string)? (fo:border-bottom::string)? (fo:border-left::string)? (fo:border-right::string)? ;
presentation-notes-attlist ::= (style:page-layout-name::styleNameRef)? ;
 presentation-notes-attlist ::= (draw:style-name::styleNameRef)? ;
text-index-entry-span ::= text:index-entry-span::((text:style-name::styleNameRef)? string()) ;
text-date-attlist ::= common-field-fixed-attlist common-field-data-style-name-attlist ;
 text-date-attlist ::= (text:date-value::dateOrDateTime)? ;
 text-date-attlist ::= (text:date-adjust::duration)? ;
text-user-field-decl ::= text:user-field-decl::(common-field-name-attlist common-field-formula-attlist? common-value-and-type-attlist) ;
currency-symbol-and-text ::= number-currency-symbol number-text? ;
table-database-range-attlist ::= (table:name::string)? ;
 table-database-range-attlist ::= (table:is-selection::boolean)? ;
 table-database-range-attlist ::= (table:on-update-keep-styles::boolean)? ;
 table-database-range-attlist ::= (table:on-update-keep-size::boolean)? ;
 table-database-range-attlist ::= (table:has-persistent-data::boolean)? ;
 table-database-range-attlist ::= (table:orientation::("column" | "row"))? ;
 table-database-range-attlist ::= (table:contains-header::boolean)? ;
 table-database-range-attlist ::= (table:display-filter-buttons::boolean)? ;
 table-database-range-attlist ::= table:target-range-address::cellRangeAddress ;
 table-database-range-attlist ::= (table:refresh-delay::boolean)? ;
text-object-index-source-attrs ::= text-index-scope-attr ;
 text-object-index-source-attrs ::= text-relative-tab-stop-position-attr ;
 text-object-index-source-attrs ::= (text:use-spreadsheet-objects::boolean)? ;
 text-object-index-source-attrs ::= (text:use-math-objects::boolean)? ;
 text-object-index-source-attrs ::= (text:use-draw-objects::boolean)? ;
 text-object-index-source-attrs ::= (text:use-chart-objects::boolean)? ;
 text-object-index-source-attrs ::= (text:use-other-objects::boolean)? ;
table-change-track-table-cell-attlist ::= (table:cell-address::cellAddress)? ;
 table-change-track-table-cell-attlist ::= (table:matrix-covered::boolean)? ;
 table-change-track-table-cell-attlist ::= (table:formula::string)? (table:number-matrix-columns-spanned::positiveInteger)? (table:number-matrix-rows-spanned::positiveInteger)? common-value-and-type-attlist? ;
text-database-row-select-attlist ::= common-field-database-table ;
 text-database-row-select-attlist ::= (text:condition::formula)? ;
 text-database-row-select-attlist ::= (text:row-number::nonNegativeInteger)? ;
text-illustration-index-source ::= text:illustration-index-source::(text-illustration-index-source-attrs text-index-title-template? text-illustration-index-entry-template?) ;
number-number-style ::= number:number-style::(common-data-style-attlist style-text-properties? number-text? (any-number number-text?)? style-map*) ;
target-frame ::= (office:target-frame::targetFrameName)? ;
chart-axis ::= chart:axis::(chart-axis-attlist chart-title? chart-categories? chart-grid*) ;
draw-custom-shape ::= draw:custom-shape::(draw-custom-shape-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text draw-enhanced-geometry?) ;
form-form ::= form:form::(common-form-control-attlist form-form-attlist form-properties? office-event-listeners? (controls | form-form)* form-connection-resource?) ;
list-source ::= (form:list-source::string)? ;
common-draw-gradient-attlist ::= (draw:name::styleName)? ;
 common-draw-gradient-attlist ::= (draw:display-name::string)? ;
 common-draw-gradient-attlist ::= draw:style::gradient-style ;
 common-draw-gradient-attlist ::= (draw:cx::percent)? (draw:cy::percent)? ;
 common-draw-gradient-attlist ::= (draw:angle::integer)? ;
 common-draw-gradient-attlist ::= (draw:border::percent)? ;
draw-polyline ::= draw:polyline::(common-draw-points-attlist common-draw-position-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
text-numbered-paragraph ::= text:numbered-paragraph::(text-numbered-paragraph-attr text-number? text-p | text-h) ;
text-list-level-style-bullet-attr ::= (text:style-name::styleNameRef)? ;
 text-list-level-style-bullet-attr ::= text:bullet-char::character ;
 text-list-level-style-bullet-attr ::= common-num-format-prefix-suffix-attlist ;
 text-list-level-style-bullet-attr ::= (text:bullet-relative-size::percent)? ;
form-time-attlist ::= (form:value::time)? ;
 form-time-attlist ::= (form:current-value::time)? ;
 form-time-attlist ::= (form:min-value::time)? ;
 form-time-attlist ::= (form:max-value::time)? ;
anim-transition-filter-attlist ::= smil:type::string ;
 anim-transition-filter-attlist ::= (smil:subtype::string)? ;
 anim-transition-filter-attlist ::= (smil:direction::("forward" | "reverse"))? ;
 anim-transition-filter-attlist ::= (smil:fadeColor::("forward" | "reverse"))? ;
 anim-transition-filter-attlist ::= (smil:mode::("in" | "out"))? ;
common-draw-data-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:show::"embed")? (xlink:actuate::"onLoad")? ;
common-table-change-attlist ::= table:id::string ;
 common-table-change-attlist ::= (table:acceptance-state::("accepted" | "rejected" | "pending"))? ;
 common-table-change-attlist ::= (table:rejecting-change-id::string)? ;
text-index-entry-text ::= text:index-entry-text::((text:style-name::styleNameRef)?) ;
common-field-formula-attlist ::= (text:formula::formula)? ;
chart-axis-attlist ::= chart:dimension::("x" | "y" | "z") ;
 chart-axis-attlist ::= (chart:name::string)? ;
 chart-axis-attlist ::= (chart:style-name::styleNameRef)? ;
table-data-pilot-field ::= table:data-pilot-field::(table-data-pilot-field-attlist table-data-pilot-level? table-data-pilot-field-reference? table-data-pilot-groups?) ;
chart-chart-attlist ::= chart:class::namespacedToken ;
 chart-chart-attlist ::= common-draw-size-attlist ;
 chart-chart-attlist ::= (chart:column-mapping::string)? ;
 chart-chart-attlist ::= (chart:row-mapping::string)? ;
 chart-chart-attlist ::= (chart:style-name::styleNameRef)? ;
text-set-page-variable-attlist ::= (text:active::boolean)? ;
 text-set-page-variable-attlist ::= (text:page-adjust::integer)? ;
draw-custom-shape-attlist ::= (draw:engine::namespacedToken)? ;
 draw-custom-shape-attlist ::= (draw:data::string)? ;
draw-g ::= draw:g::(draw-g-attlist common-draw-z-index-attlist common-draw-name-attlist common-draw-id-attlist common-draw-style-name-attlist common-text-spreadsheet-shape-attlist office-event-listeners? draw-glue-point* shape*) ;
table-named-range-attlist ::= table:name::string table:cell-range-address::cellRangeAddress (table:base-cell-address::cellAddress)? (table:range-usable-as::("none" | (("print-range" | "filter" | "repeat-row" | "repeat-column")+)))? ;
number-quarter-attlist ::= (number:style::("short" | "long"))? ;
table-filter-condition-attlist ::= table:field-number::nonNegativeInteger ;
 table-filter-condition-attlist ::= table:value::string ;
 table-filter-condition-attlist ::= table:operator::string ;
 table-filter-condition-attlist ::= (table:case-sensitive::string)? ;
 table-filter-condition-attlist ::= (table:data-type::("text" | "number"))? ;
table-previous ::= table:previous::((table:id::string)? table-change-track-table-cell) ;
number-text-style ::= number:text-style::(common-data-style-attlist style-text-properties? number-text? (number-text-content number-text?)* style-map*) ;
office-settings ::= (office:settings::(config-config-item-set+))? ;
table-tracked-changes-attlist ::= (table:track-changes::boolean)? ;
common-num-format-prefix-suffix-attlist ::= (style:num-prefix::string)? (style:num-suffix::string)? ;
dropdown ::= (form:dropdown::boolean)? ;
common-disabled-attlist ::= (form:disabled::boolean)? ;
draw-g-attlist ::= (svg:y::coordinate)? ;
text-list-style-content ::= text:list-level-style-number::(text-list-level-style-attr text-list-level-style-number-attr style-list-level-properties? style-text-properties?) ;
 text-list-style-content ::= text:list-level-style-bullet::(text-list-level-style-attr text-list-level-style-bullet-attr style-list-level-properties? style-text-properties?) ;
 text-list-style-content ::= text:list-level-style-image::(text-list-level-style-attr text-list-level-style-image-attr style-list-level-properties?) ;
table-table-row-attlist ::= (table:number-rows-repeated::positiveInteger)? ;
 table-table-row-attlist ::= (table:style-name::styleNameRef)? ;
 table-table-row-attlist ::= (table:default-cell-style-name::styleNameRef)? ;
 table-table-row-attlist ::= (table:visibility::table-visibility-value)? ;
common-svg-gradient-attlist ::= (svg:gradientUnits::"objectBoundingBox")? (svg:gradientTransform::string)? (svg:spreadMethod::("pad" | "reflect" | "repeat"))? ;
 common-svg-gradient-attlist ::= draw:name::styleName ;
 common-svg-gradient-attlist ::= (draw:display-name::string)? ;
style-page-layout ::= style:page-layout::(style-page-layout-attlist style-page-layout-properties? style-header-style? style-footer-style?) ;
draw-a-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? ;
 draw-a-attlist ::= (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? ;
 draw-a-attlist ::= (office:name::string)? ;
 draw-a-attlist ::= (office:server-map::boolean)? ;
office-process-content ::= (office:process-content::boolean)? ;
form-date-attlist ::= (form:value::date)? ;
 form-date-attlist ::= (form:current-value::date)? ;
 form-date-attlist ::= (form:min-value::date)? ;
 form-date-attlist ::= (form:max-value::date)? ;
common-form-relative-image-position-attlist ::= ((form:image-position::"center")?) | (form:image-position::("start" | "end" | "top" | "bottom") (form:image-align::("start" | "center" | "end"))?) ;
office-spreadsheet-content-prelude ::= table-tracked-changes? text-decls table-decls ;
common-draw-area-attlist ::= (xlink:href::anyURI)? (xlink:type::"simple")? (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? ;
 common-draw-area-attlist ::= (office:name::string)? ;
 common-draw-area-attlist ::= (draw:nohref::"nohref")? ;
common-draw-name-attlist ::= (draw:name::string)? ;
size ::= (form:size::nonNegativeInteger)? ;
common-value-attlist ::= (form:value::string)? ;
table-table-attlist ::= (table:name::string)? ;
 table-table-attlist ::= (table:style-name::styleNameRef)? ;
 table-table-attlist ::= (table:protected::boolean)? (table:protection-key::string())? ;
 table-table-attlist ::= (table:print::boolean)? ;
 table-table-attlist ::= (table:print-ranges::cellRangeAddressList)? ;
 table-table-attlist ::= (table:is-sub-table::boolean)? ;
--------------------odf::opendoc-1.1-manifest.bgf--------------------
file-entry-attlist ::= manifest:full-path::string() ;
 file-entry-attlist ::= (manifest:size::integer())? ;
 file-entry-attlist ::= manifest:media-type::string() ;
file-entry ::= manifest:file-entry::(file-entry-attlist encryption-data?) ;
--------------------odf::opendoc-1.1-strict.bgf--------------------
style-footnote-sep-attlist ::= (style:width::length)? (style:rel-width::percent)? (style:color::color)? (style:line-style::lineStyle)? (style:adjustment::("left" | "center" | "right"))? (style:distance-before-sep::length)? (style:distance-after-sep::length)? ;
style-font-face ::= style:font-face::(style-font-face-attlist svg-font-face-src? svg-definition-src?) ;
svg-linearGradient ::= svg:linearGradient::(common-svg-gradient-attlist (svg:x1::(coordinate | percent))? (svg:y1::(coordinate | percent))? (svg:x2::(coordinate | percent))? (svg:y2::(coordinate | percent))? svg-stop*) ;
style-page-layout-attlist ::= style:name::styleName ;
 style-page-layout-attlist ::= (style:page-usage::("all" | "left" | "right" | "mirrored"))? ;
number-currency-style ::= number:currency-style::(common-data-style-attlist common-auto-reorder-attlist style-text-properties? number-text? ((number-and-text currency-symbol-and-text?) | (currency-symbol-and-text number-and-text?))? style-map*) ;
number-fraction-attlist ::= (number:min-numerator-digits::integer)? ;
 number-fraction-attlist ::= (number:min-denominator-digits::integer)? ;
 number-fraction-attlist ::= (number:denominator-value::integer)? ;
text-notes-configuration-content ::= text-note-class ;
 text-notes-configuration-content ::= (text:citation-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:citation-body-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:default-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:master-page-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:start-value::nonNegativeInteger)? ;
 text-notes-configuration-content ::= common-num-format-prefix-suffix-attlist common-num-format-attlist? ;
 text-notes-configuration-content ::= (text:start-numbering-at::("document" | "chapter" | "page"))? ;
 text-notes-configuration-content ::= (text:footnotes-position::("text" | "page" | "section" | "document"))? ;
 text-notes-configuration-content ::= (text:note-continuation-notice-forward::string())? ;
 text-notes-configuration-content ::= (text:note-continuation-notice-backward::string())? ;
style-column-sep-attlist ::= (style:style::("none" | "solid" | "dotted" | "dashed" | "dot-dashed"))? ;
 style-column-sep-attlist ::= style:width::length ;
 style-column-sep-attlist ::= (style:height::percent)? ;
 style-column-sep-attlist ::= (style:vertical-align::("top" | "middle" | "bottom"))? ;
 style-column-sep-attlist ::= (style:color::color)? ;
draw-applet-attlist ::= (draw:code::string())? ;
 draw-applet-attlist ::= (draw:object::string())? ;
 draw-applet-attlist ::= (draw:archive::string())? ;
 draw-applet-attlist ::= (draw:may-script::boolean)? ;
text-list-item-content ::= text-number? (text-p | text-h | text-list | text-soft-page-break)* ;
presentation-hide-shape ::= presentation:hide-shape::(common-presentation-effect-attlist presentation-sound?) ;
common-title-attlist ::= (form:title::string())? ;
common-form-control-attlist ::= (form:name::string)? ;
 common-form-control-attlist ::= (form:control-implementation::namespacedToken)? ;
common-svg-font-face-xlink-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? ;
table-data-pilot-table-attlist ::= table:name::string ;
 table-data-pilot-table-attlist ::= (table:application-data::string)? ;
 table-data-pilot-table-attlist ::= (table:grand-total::("none" | "row" | "column" | "both"))? ;
 table-data-pilot-table-attlist ::= (table:ignore-empty-rows::boolean)? ;
 table-data-pilot-table-attlist ::= (table:identify-categories::boolean)? ;
 table-data-pilot-table-attlist ::= table:target-range-address::cellRangeAddress ;
 table-data-pilot-table-attlist ::= (table:buttons::cellRangeAddressList)? ;
 table-data-pilot-table-attlist ::= (table:show-filter-button::boolean)? ;
 table-data-pilot-table-attlist ::= (table:drill-down-on-double-click::boolean)? ;
presentation-hide-text ::= presentation:hide-text::(common-presentation-effect-attlist presentation-sound?) ;
draw-area-polygon ::= draw:area-polygon::(common-draw-area-attlist svg:x::coordinate svg:y::coordinate svg:width::length svg:height::length common-draw-viewbox-attlist common-draw-points-attlist svg-title? svg-desc? office-event-listeners?) ;
table-deletion-attlist ::= table:type::("row" | "column" | "table") ;
 table-deletion-attlist ::= table:position::integer ;
 table-deletion-attlist ::= (table:table::integer)? ;
 table-deletion-attlist ::= (table:multi-deletion-spanned::integer)? ;
office-forms ::= (office:forms::(office-forms-attlist (form-form | xforms-model)*))? ;
common-restart-timing-attlist ::= (smil:restart::("never" | "always" | "whenNotActive" | "default"))? ;
common-maxlength-attlist ::= (form:max-length::nonNegativeInteger)? ;
draw-object-attlist ::= (draw:notify-on-update-of-ranges::string)? ;
common-rotation-angle-attlist ::= (style:rotation-angle::nonNegativeInteger)? ;
draw-area-rectangle ::= draw:area-rectangle::(common-draw-area-attlist svg:x::coordinate svg:y::coordinate svg:width::length svg:height::length svg-title? svg-desc? office-event-listeners?) ;
table-table-rows ::= table:table-rows::((text-soft-page-break? table-table-row)+) ;
number-date-style ::= number:date-style::(common-data-style-attlist common-auto-reorder-attlist common-format-source-attlist style-text-properties? number-text? (any-date number-text?)+ style-map*) ;
common-readonly-attlist ::= (form:readonly::boolean)? ;
draw-marker-attlist ::= draw:name::styleName ;
 draw-marker-attlist ::= (draw:display-name::string)? ;
draw-measure ::= draw:measure::(draw-measure-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
table-table-cell-attlist-extra ::= (table:number-columns-spanned::positiveInteger)? (table:number-rows-spanned::positiveInteger)? ;
 table-table-cell-attlist-extra ::= (table:number-matrix-columns-spanned::positiveInteger)? (table:number-matrix-rows-spanned::positiveInteger)? ;
draw-control ::= draw:control::(draw-control-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? draw-glue-point*) ;
common-text-spreadsheet-shape-attlist ::= (table:end-cell-address::cellAddress)? (table:end-x::coordinate)? (table:end-y::coordinate)? ;
 common-text-spreadsheet-shape-attlist ::= (table:table-background::boolean)? ;
 common-text-spreadsheet-shape-attlist ::= common-text-anchor-attlist ;
text-sequence-ref-content ::= (text:reference-format::("page" | "chapter" | "direction" | "text" | "category-and-value" | "caption" | "value"))? ;
common-draw-text-style-name-attlist ::= (draw:text-style-name::styleNameRef)? ;
style-graphic-properties-elements ::= Îµ ;
 style-graphic-properties-elements ::= text-list-style? ;
 style-graphic-properties-elements ::= style-background-image ;
 style-graphic-properties-elements ::= style-columns ;
office-forms-attlist ::= (form:automatic-focus::boolean)? ;
 office-forms-attlist ::= (form:apply-design-mode::boolean)? ;
common-style-header-footer-attlist ::= (style:display::boolean)? ;
draw-plugin-attlist ::= (draw:mime-type::string())? ;
table-movement ::= table:movement::(common-table-change-attlist table-source-range-address table-target-range-address office-change-info table-dependencies? table-deletions?) ;
svg-stop ::= svg:stop::(svg:offset::(double | percent) (svg:stop-color::color)? (svg:stop-opacity::double)?) ;
table-validation-attlist ::= table:name::string ;
 table-validation-attlist ::= (table:condition::string)? ;
 table-validation-attlist ::= (table:base-cell-address::cellAddress)? ;
 table-validation-attlist ::= (table:allow-empty-cell::boolean)? ;
 table-validation-attlist ::= (table:display-list::("none" | "unsorted" | "sort-ascending"))? ;
draw-page-thumbnail-attlist ::= (draw:page-number::positiveInteger)? ;
text-tab-attr ::= (text:tab-ref::nonNegativeInteger)? ;
style-tab-stop-attlist ::= style:position::nonNegativeLength ;
 style-tab-stop-attlist ::= ((style:type::("left" | "center" | "right"))?) | (style:type::"char" style-tab-stop-char-attlist) ;
 style-tab-stop-attlist ::= (style:leader-type::lineType)? ;
 style-tab-stop-attlist ::= (style:leader-style::lineStyle)? ;
 style-tab-stop-attlist ::= (style:leader-width::lineWidth)? ;
 style-tab-stop-attlist ::= (style:leader-color::("font-color" | color))? ;
 style-tab-stop-attlist ::= (style:leader-text::string)? ;
 style-tab-stop-attlist ::= (style:leader-text-style::styleNameRef)? ;
text-h ::= text:h::(heading-attrs paragraph-attrs text-number? paragraph-content*) ;
text-style-name ::= (form:text-style-name::styleNameRef)? ;
table-table-column-attlist ::= (table:number-columns-repeated::positiveInteger)? ;
 table-table-column-attlist ::= (table:style-name::styleNameRef)? ;
 table-table-column-attlist ::= (table:visibility::table-visibility-value)? ;
 table-table-column-attlist ::= (table:default-cell-style-name::styleNameRef)? ;
text-table-of-content-source ::= text:table-of-content-source::(text-table-of-content-source-attlist text-index-title-template? text-table-of-content-entry-template* text-index-source-styles*) ;
table-source-cell-range ::= table:source-cell-range::(table-source-cell-range-attlist table-filter?) ;
text-index-entry-tab-stop-attrs ::= (style:leader-char::character)? ;
 text-index-entry-tab-stop-attrs ::= (style:type::"right") | (style:type::"left" style:position::length) ;
draw-handle-attlist ::= (draw:handle-mirror-vertical::boolean)? ;
 draw-handle-attlist ::= (draw:handle-mirror-horizontal::boolean)? ;
 draw-handle-attlist ::= (draw:handle-switched::boolean)? ;
 draw-handle-attlist ::= draw:handle-position::string ;
 draw-handle-attlist ::= (draw:handle-range-x-minimum::string)? ;
 draw-handle-attlist ::= (draw:handle-range-x-maximum::string)? ;
 draw-handle-attlist ::= (draw:handle-range-y-minimum::string)? ;
 draw-handle-attlist ::= (draw:handle-range-y-maximum::string)? ;
 draw-handle-attlist ::= (draw:handle-polar::string)? ;
 draw-handle-attlist ::= (draw:handle-radius-range-minimum::string)? ;
 draw-handle-attlist ::= (draw:handle-radius-range-maximum::string)? ;
common-field-database-table-attlist ::= text:table-name::string ;
 common-field-database-table-attlist ::= (text:table-type::("table" | "query" | "command"))? ;
common-margin-attlist ::= (fo:margin::(nonNegativeLength | percent))? ;
style-columns ::= (style:columns::(style-columns-attlist style-column-sep? style-column*))? ;
common-spline-anim-value-attlist ::= (smil:keyTimes::string)? ;
 common-spline-anim-value-attlist ::= (smil:keySplines::string)? ;
common-draw-layer-name-attlist ::= (draw:layer::string())? ;
draw-rect-attlist ::= (draw:corner-radius::nonNegativeLength)? ;
table-calculation-setting-attlist ::= (table:case-sensitive::boolean)? ;
 table-calculation-setting-attlist ::= (table:precision-as-shown::boolean)? ;
 table-calculation-setting-attlist ::= (table:search-criteria-must-apply-to-whole-cell::boolean)? ;
 table-calculation-setting-attlist ::= (table:automatic-find-labels::boolean)? ;
 table-calculation-setting-attlist ::= (table:use-regular-expressions::boolean)? ;
 table-calculation-setting-attlist ::= (table:null-year::positiveInteger)? ;
table-subtotal-rules-attlist ::= (table:bind-styles-to-content::boolean)? ;
 table-subtotal-rules-attlist ::= (table:case-sensitive::boolean)? ;
 table-subtotal-rules-attlist ::= (table:page-breaks-on-group-change::boolean)? ;
common-field-display-value-formula-attlist ::= (text:display::("value" | "formula"))? ;
text-table-of-content-source-attlist ::= (text:outline-level::positiveInteger)? ;
 text-table-of-content-source-attlist ::= (text:use-outline-level::boolean)? ;
 text-table-of-content-source-attlist ::= (text:use-index-marks::boolean)? ;
 text-table-of-content-source-attlist ::= (text:use-index-source-styles::boolean)? ;
 text-table-of-content-source-attlist ::= (text:index-scope::("document" | "chapter"))? ;
 text-table-of-content-source-attlist ::= (text:relative-tab-stop-position::boolean)? ;
number-time-style ::= number:time-style::(number-time-style-attlist common-data-style-attlist common-format-source-attlist style-text-properties? number-text? (any-time number-text?)+ style-map*) ;
draw-object-ole-attlist ::= (draw:class-id::string())? ;
text-table-index-source ::= text:table-index-source::(text-illustration-index-source-attrs text-index-title-template? text-table-index-entry-template?) ;
office-automatic-styles ::= (office:automatic-styles::(styles style-page-layout*))? ;
draw-polygon ::= draw:polygon::(common-draw-points-attlist common-draw-position-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
anim-animate-color-attlist ::= (anim:color-interpolation::("rgb" | "hsl"))? ;
 anim-animate-color-attlist ::= (anim:color-interpolation-direction::("clockwise" | "counter-clockwise"))? ;
style-section-properties-attlist ::= common-background-color-attlist ;
 style-section-properties-attlist ::= common-horizontal-margin-attlist ;
 style-section-properties-attlist ::= (style:protect::boolean)? ;
 style-section-properties-attlist ::= (text:dont-balance-text-columns::boolean)? ;
 style-section-properties-attlist ::= common-writing-mode-attlist ;
chart-title ::= chart:title::(chart-title-attlist text-p?) ;
common-tab-attlist ::= (form:tab-index::nonNegativeInteger)? ;
 common-tab-attlist ::= (form:tab-stop::boolean)? ;
common-anim-attlist ::= (presentation:node-type::("default" | "on-click" | "with-previous" | "after-previous" | "timing-root" | "main-sequence" | "interactive-sequence"))? ;
 common-anim-attlist ::= (presentation:preset-id::string)? ;
 common-anim-attlist ::= (presentation:preset-sub-type::string)? ;
 common-anim-attlist ::= (presentation:preset-class::("custom" | "entrance" | "exit" | "emphasis" | "motion-path" | "ole-action" | "media-call"))? ;
 common-anim-attlist ::= (presentation:master-element::IDREF)? ;
 common-anim-attlist ::= (presentation:group-id::string)? ;
 common-anim-attlist ::= (anim:id::ID)? ;
draw-frame ::= draw:frame::(common-draw-shape-with-text-and-styles-attlist common-draw-position-attlist common-draw-rel-size-attlist common-draw-caption-id-attlist presentation-shape-attlist draw-frame-attlist (draw-text-box | draw-image | draw-object | draw-object-ole | draw-applet | draw-floating-frame | draw-plugin)* office-event-listeners? draw-glue-point* draw-image-map? svg-title? svg-desc? (draw-contour-polygon | draw-contour-path)?) ;
common-form-control-content ::= form-properties? office-event-listeners? ;
table-scenario-attlist ::= table:scenario-ranges::cellRangeAddressList ;
 table-scenario-attlist ::= table:is-active::boolean ;
 table-scenario-attlist ::= (table:display-border::boolean)? ;
 table-scenario-attlist ::= (table:border-color::color)? ;
 table-scenario-attlist ::= (table:copy-back::boolean)? ;
 table-scenario-attlist ::= (table:copy-styles::boolean)? ;
 table-scenario-attlist ::= (table:copy-formulas::boolean)? ;
 table-scenario-attlist ::= (table:comment::string)? ;
 table-scenario-attlist ::= (table:protected::boolean)? ;
table-iteration ::= table:iteration::((table:status::("enable" | "disable"))? (table:steps::positiveInteger)? (table:maximum-difference::double)?) ;
table-data-pilot-level-attlist ::= (table:show-empty::boolean)? ;
style-footer-style ::= style:footer-style::(style-header-footer-properties?) ;
common-draw-caption-id-attlist ::= (draw:caption-id::IDREF)? ;
presentation-event-listener ::= presentation:event-listener::(presentation-event-listener-attlist presentation-sound?) ;
text-outline-level ::= (text:outline-level::positiveInteger)? ;
common-background-color-attlist ::= (fo:background-color::("transparent" | color))? ;
text-user-index-source ::= text:user-index-source::(text-user-index-source-attr text-index-title-template? text-user-index-entry-template* text-index-source-styles*) ;
text-index-entry-chapter ::= text:index-entry-chapter::((text:style-name::styleNameRef)? text-index-entry-chapter-attrs) ;
draw-frame-attlist ::= (draw:copy-of::string)? ;
common-restart-default-attlist ::= (smil:restartDefault::("never" | "always" | "whenNotActive" | "inherit"))? ;
chart-domain ::= chart:domain::((table:cell-range-address::cellRangeAddress)?) ;
office-text-attlist ::= (text:global::boolean)? ;
 office-text-attlist ::= (text:use-soft-page-breaks::boolean)? ;
common-break-attlist ::= (fo:break-before::("auto" | "column" | "page"))? (fo:break-after::("auto" | "column" | "page"))? ;
text-file-name-attlist ::= (text:display::("full" | "path" | "name" | "name-and-extension"))? ;
 text-file-name-attlist ::= common-field-fixed-attlist ;
chart-error-indicator-attlist ::= (chart:style-name::styleNameRef)? ;
presentation-event-listener-attlist ::= script:event-name::string ;
 presentation-event-listener-attlist ::= presentation:action::("none" | "previous-page" | "next-page" | "first-page" | "last-page" | "hide" | "stop" | "execute" | "show" | "verb" | "fade-out" | "sound") ;
 presentation-event-listener-attlist ::= (presentation:effect::presentationEffects)? ;
 presentation-event-listener-attlist ::= (presentation:direction::presentationEffectDirections)? ;
 presentation-event-listener-attlist ::= (presentation:speed::presentationSpeeds)? ;
 presentation-event-listener-attlist ::= (presentation:start-scale::percent)? ;
 presentation-event-listener-attlist ::= (xlink:href::anyURI)? (xlink:type::"simple")? (xlink:show::"embed")? (xlink:actuate::"onRequest")? ;
 presentation-event-listener-attlist ::= (presentation:verb::nonNegativeInteger)? ;
common-fill-default-attlist ::= (smil:fillDefault::("remove" | "freeze" | "hold" | "transition" | "auto" | "inherit"))? ;
table-table-source-attlist ::= (table:mode::("copy-all" | "copy-results-only"))? ;
 table-table-source-attlist ::= (table:table-name::string)? ;
common-form-visual-effect-attlist ::= (form:visual-effect::("flat" | "3d"))? ;
draw-layer ::= draw:layer::(draw-layer-attlist svg-title? svg-desc?) ;
common-text-align ::= (fo:text-align::("start" | "end" | "left" | "right" | "center" | "justify"))? ;
header-footer-content ::= (text-tracked-changes text-decls (text-h | text-p | text-list | table-table | text-section | text-table-of-content | text-illustration-index | text-table-index | text-object-index | text-user-index | text-alphabetical-index | text-bibliography | text-index-title | change-marks)*) | (style-region-left? style-region-center? style-region-right?) ;
style-style-attlist ::= style:name::styleName ;
 style-style-attlist ::= (style:display-name::string)? ;
 style-style-attlist ::= (style:parent-style-name::styleNameRef)? ;
 style-style-attlist ::= (style:next-style-name::styleNameRef)? ;
 style-style-attlist ::= (style:list-style-name::(styleName | Îµ))? ;
 style-style-attlist ::= (style:master-page-name::styleNameRef)? ;
 style-style-attlist ::= (style:auto-update::boolean)? ;
 style-style-attlist ::= (style:data-style-name::styleNameRef)? ;
 style-style-attlist ::= (style:class::string)? ;
 style-style-attlist ::= (style:default-outline-level::positiveInteger)? ;
style-page-layout-properties-attlist ::= (fo:page-width::length)? (fo:page-height::length)? ;
 style-page-layout-properties-attlist ::= common-num-format-attlist? common-num-format-prefix-suffix-attlist ;
 style-page-layout-properties-attlist ::= (style:paper-tray-name::("default" | string))? ;
 style-page-layout-properties-attlist ::= (style:print-orientation::("portrait" | "landscape"))? ;
 style-page-layout-properties-attlist ::= common-horizontal-margin-attlist common-vertical-margin-attlist common-margin-attlist ;
 style-page-layout-properties-attlist ::= common-border-attlist ;
 style-page-layout-properties-attlist ::= common-border-line-width-attlist ;
 style-page-layout-properties-attlist ::= common-padding-attlist ;
 style-page-layout-properties-attlist ::= common-shadow-attlist ;
 style-page-layout-properties-attlist ::= common-background-color-attlist ;
 style-page-layout-properties-attlist ::= (style:register-truth-ref-style-name::styleNameRef)? ;
 style-page-layout-properties-attlist ::= (style:print::(("headers" | "grid" | "annotations" | "objects" | "charts" | "drawings" | "formulas" | "zero-values")*))? ;
 style-page-layout-properties-attlist ::= (style:print-page-order::("ttb" | "ltr"))? ;
 style-page-layout-properties-attlist ::= (style:first-page-number::(positiveInteger | "continue"))? ;
 style-page-layout-properties-attlist ::= (style:scale-to::percent)? (style:scale-to-pages::positiveInteger)? ;
 style-page-layout-properties-attlist ::= (style:table-centering::("horizontal" | "vertical" | "both" | "none"))? ;
 style-page-layout-properties-attlist ::= (style:footnote-max-height::length)? ;
 style-page-layout-properties-attlist ::= common-writing-mode-attlist ;
 style-page-layout-properties-attlist ::= (style:layout-grid-mode::("none" | "line" | "both"))? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-base-height::length)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-ruby-height::length)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-lines::positiveInteger)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-color::color)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-ruby-below::boolean)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-print::boolean)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-display::boolean)? ;
draw-text-box-attlist ::= (draw:chain-next-name::string)? ;
 draw-text-box-attlist ::= (draw:corner-radius::nonNegativeLength)? ;
 draw-text-box-attlist ::= (fo:min-height::(length | percent))? (fo:min-width::(length | percent))? ;
 draw-text-box-attlist ::= (fo:max-height::(length | percent))? (fo:max-width::(length | percent))? ;
 draw-text-box-attlist ::= text-id? ;
draw-image-attlist ::= (draw:filter-name::string)? ;
table-error-message ::= table:error-message::((table:title::string)? (table:display::boolean)? (table:message-type::("stop" | "warning" | "information"))? text-p*) ;
paragraph-attrs ::= (text:style-name::styleNameRef)? (text:class-names::styleNameRefs)? (text:cond-style-name::styleNameRef)? ;
 paragraph-attrs ::= text-id? ;
table-columns-no-group ::= (table-columns (table-table-header-columns table-columns?)?) | (table-table-header-columns table-columns?) ;
form-fixed-text-attlist ::= form-control-attlist for common-disabled-attlist label common-printable-attlist common-title-attlist ;
 form-fixed-text-attlist ::= (form:multi-line::boolean)? ;
draw-floating-frame-attlist ::= (draw:frame-name::string)? ;
style-paragraph-properties-attlist ::= (fo:line-height::("normal" | nonNegativeLength | percent))? ;
 style-paragraph-properties-attlist ::= (style:line-height-at-least::nonNegativeLength)? ;
 style-paragraph-properties-attlist ::= (style:line-spacing::length)? ;
 style-paragraph-properties-attlist ::= (style:font-independent-line-spacing::boolean)? ;
 style-paragraph-properties-attlist ::= common-text-align ;
 style-paragraph-properties-attlist ::= (fo:text-align-last::("start" | "center" | "justify"))? ;
 style-paragraph-properties-attlist ::= (style:justify-single-word::boolean)? ;
 style-paragraph-properties-attlist ::= (fo:keep-together::("auto" | "always"))? ;
 style-paragraph-properties-attlist ::= (fo:widows::nonNegativeInteger)? ;
 style-paragraph-properties-attlist ::= (fo:orphans::nonNegativeInteger)? ;
 style-paragraph-properties-attlist ::= (style:tab-stop-distance::nonNegativeLength)? ;
 style-paragraph-properties-attlist ::= (fo:hyphenation-keep::("auto" | "page"))? ;
 style-paragraph-properties-attlist ::= (fo:hyphenation-ladder-count::("no-limit" | positiveInteger))? ;
 style-paragraph-properties-attlist ::= (style:register-true::boolean)? ;
 style-paragraph-properties-attlist ::= common-horizontal-margin-attlist ;
 style-paragraph-properties-attlist ::= (fo:text-indent::(length | percent))? ;
 style-paragraph-properties-attlist ::= (style:auto-text-indent::boolean)? ;
 style-paragraph-properties-attlist ::= common-vertical-margin-attlist ;
 style-paragraph-properties-attlist ::= common-margin-attlist ;
 style-paragraph-properties-attlist ::= common-break-attlist ;
 style-paragraph-properties-attlist ::= common-background-color-attlist ;
 style-paragraph-properties-attlist ::= common-border-attlist ;
 style-paragraph-properties-attlist ::= common-border-line-width-attlist ;
 style-paragraph-properties-attlist ::= common-padding-attlist ;
 style-paragraph-properties-attlist ::= common-shadow-attlist ;
 style-paragraph-properties-attlist ::= common-keep-with-next-attlist ;
 style-paragraph-properties-attlist ::= (text:number-lines::boolean)? ;
 style-paragraph-properties-attlist ::= (text:line-number::nonNegativeInteger)? ;
 style-paragraph-properties-attlist ::= (style:text-autospace::("none" | "ideograph-alpha"))? ;
 style-paragraph-properties-attlist ::= (style:punctuation-wrap::("simple" | "hanging"))? ;
 style-paragraph-properties-attlist ::= (style:line-break::("normal" | "strict"))? ;
 style-paragraph-properties-attlist ::= (style:vertical-align::("top" | "middle" | "bottom" | "auto" | "baseline"))? ;
 style-paragraph-properties-attlist ::= common-writing-mode-attlist ;
 style-paragraph-properties-attlist ::= (style:writing-mode-automatic::boolean)? ;
 style-paragraph-properties-attlist ::= (style:snap-to-layout-grid::boolean)? ;
 style-paragraph-properties-attlist ::= common-page-number-attlist ;
 style-paragraph-properties-attlist ::= (style:background-transparency::percent)? ;
table-table-row-group-attlist ::= (table:display::boolean)? ;
draw-regular-polygon ::= draw:regular-polygon::(draw-regular-polygon-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
style-drawing-page-properties-elements ::= presentation-sound? ;
common-border-line-width-attlist ::= (style:border-line-width::borderWidths)? (style:border-line-width-top::borderWidths)? (style:border-line-width-bottom::borderWidths)? (style:border-line-width-left::borderWidths)? (style:border-line-width-right::borderWidths)? ;
common-draw-size-attlist ::= (svg:width::length)? (svg:height::length)? ;
draw-layer-attlist ::= draw:name::string ;
 draw-layer-attlist ::= (draw:protected::boolean)? ;
 draw-layer-attlist ::= (draw:display::("always" | "screen" | "printer" | "none"))? ;
draw-circle ::= draw:circle::(draw-circle-attlist common-draw-circle-ellipse-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
table-table-template ::= table:table-template::(table-table-template-attlist table-first-row? table-last-row? table-first-column? table-last-column? table-body | (table-even-rows table-odd-rows) | (table-even-columns table-odd-columns)) ;
draw-page ::= draw:page::(common-presentation-header-footer-attlist draw-page-attlist office-forms? shape* (presentation-animations | animation-element)? presentation-notes?) ;
form-password-attlist ::= form-control-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist ;
 form-password-attlist ::= (form:echo-char::character)? ;
presentation-settings ::= (presentation:settings::(presentation-settings-attlist presentation-show*))? ;
common-style-direction-attlist ::= (style:direction::("ltr" | "ttb"))? ;
text-sequence-ref-name ::= (text:ref-name::string)? ;
table-insertion ::= table:insertion::(table-insertion-attlist common-table-change-attlist office-change-info table-dependencies? table-deletions?) ;
text-outline-level-style-attlist ::= text:level::positiveInteger ;
 text-outline-level-style-attlist ::= (text:style-name::styleNameRef)? ;
 text-outline-level-style-attlist ::= common-num-format-attlist common-num-format-prefix-suffix-attlist ;
 text-outline-level-style-attlist ::= (text:display-levels::positiveInteger)? ;
 text-outline-level-style-attlist ::= (text:start-value::positiveInteger)? ;
common-anim-values-attlist ::= (smil:values::string)? ;
 common-anim-values-attlist ::= (anim:formula::string)? ;
 common-anim-values-attlist ::= common-anim-set-values-attlist (smil:from::string)? (smil:by::string)? ;
chart-categories ::= chart:categories::((table:cell-range-address::cellRangeAddress)?) ;
draw-page-attlist ::= (draw:name::string)? ;
 draw-page-attlist ::= (draw:style-name::styleNameRef)? ;
 draw-page-attlist ::= draw:master-page-name::styleNameRef ;
 draw-page-attlist ::= (presentation:presentation-page-layout-name::styleNameRef)? ;
 draw-page-attlist ::= (draw:id::ID)? ;
 draw-page-attlist ::= (draw:nav-order::IDREFS)? ;
draw-hatch-attlist ::= draw:name::styleName ;
 draw-hatch-attlist ::= (draw:display-name::string)? ;
 draw-hatch-attlist ::= draw:style::("single" | "double" | "triple") ;
 draw-hatch-attlist ::= (draw:color::color)? ;
 draw-hatch-attlist ::= (draw:distance::length)? ;
 draw-hatch-attlist ::= (draw:rotation::integer)? ;
presentation-settings-attlist ::= (presentation:start-page::string)? ;
 presentation-settings-attlist ::= (presentation:show::string)? ;
 presentation-settings-attlist ::= (presentation:full-screen::boolean)? ;
 presentation-settings-attlist ::= (presentation:endless::boolean)? ;
 presentation-settings-attlist ::= (presentation:pause::duration)? ;
 presentation-settings-attlist ::= (presentation:show-logo::boolean)? ;
 presentation-settings-attlist ::= (presentation:force-manual::boolean)? ;
 presentation-settings-attlist ::= (presentation:mouse-visible::boolean)? ;
 presentation-settings-attlist ::= (presentation:mouse-as-pen::boolean)? ;
 presentation-settings-attlist ::= (presentation:start-with-navigator::boolean)? ;
 presentation-settings-attlist ::= (presentation:animations::("enabled" | "disabled"))? ;
 presentation-settings-attlist ::= (presentation:transition-on-click::("enabled" | "disabled"))? ;
 presentation-settings-attlist ::= (presentation:stay-on-top::boolean)? ;
 presentation-settings-attlist ::= (presentation:show-end-of-presentation-slide::boolean)? ;
number-day-of-week-attlist ::= (number:style::("short" | "long"))? ;
number-and-text ::= number-number number-text? ;
common-keep-with-next-attlist ::= (fo:keep-with-next::("auto" | "always"))? ;
common-text-anchor-attlist ::= (text:anchor-type::("page" | "frame" | "paragraph" | "char" | "as-char"))? ;
 common-text-anchor-attlist ::= (text:anchor-page-number::positiveInteger)? ;
common-field-num-format-attlist ::= common-num-format-attlist? ;
presentation-show-shape ::= presentation:show-shape::(common-presentation-effect-attlist presentation-sound?) ;
table-insertion-attlist ::= table:type::("row" | "column" | "table") ;
 table-insertion-attlist ::= table:position::integer ;
 table-insertion-attlist ::= (table:count::positiveInteger)? ;
 table-insertion-attlist ::= (table:table::integer)? ;
office-document-common-attrs ::= (office:version::string)? ;
common-draw-style-name-attlist ::= ((draw:style-name::styleNameRef)? (draw:class-names::styleNameRefs)?) | ((presentation:style-name::styleNameRef)? (presentation:class-names::styleNameRefs)?) ;
table-consolidation-attlist ::= table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string) ;
 table-consolidation-attlist ::= table:source-cell-range-addresses::cellRangeAddressList ;
 table-consolidation-attlist ::= table:target-cell-address::cellAddress ;
 table-consolidation-attlist ::= (table:use-labels::("none" | "row" | "column" | "both"))? ;
 table-consolidation-attlist ::= (table:link-to-source-data::boolean)? ;
style-tab-stops ::= (style:tab-stops::(style-tab-stop*))? ;
text-bibliography-configuration-attlist ::= (text:prefix::string)? (text:suffix::string)? ;
 text-bibliography-configuration-attlist ::= (text:numbered-entries::boolean)? ;
 text-bibliography-configuration-attlist ::= (text:sort-by-position::boolean)? (fo:language::languageCode)? (fo:country::countryCode)? (text:sort-algorithm::string)? ;
style-data-style-attlist ::= (style:display-name::string)? ;
office-master-styles ::= (office:master-styles::(style-master-page* style-handout-master? draw-layer-set?))? ;
table-table-header-rows ::= table:table-header-rows::((text-soft-page-break? table-table-row)+) ;
dr3d-light-attlist ::= (dr3d:diffuse-color::color)? ;
 dr3d-light-attlist ::= dr3d:direction::vector3D ;
 dr3d-light-attlist ::= (dr3d:enabled::boolean)? ;
 dr3d-light-attlist ::= (dr3d:specular::boolean)? ;
style-drawing-page-properties-attlist ::= (presentation:transition-type::("manual" | "automatic" | "semi-automatic"))? ;
 style-drawing-page-properties-attlist ::= (presentation:transition-style::("none" | "fade-from-left" | "fade-from-top" | "fade-from-right" | "fade-from-bottom" | "fade-from-upperleft" | "fade-from-upperright" | "fade-from-lowerleft" | "fade-from-lowerright" | "move-from-left" | "move-from-top" | "move-from-right" | "move-from-bottom" | "move-from-upperleft" | "move-from-upperright" | "move-from-lowerleft" | "move-from-lowerright" | "uncover-to-left" | "uncover-to-top" | "uncover-to-right" | "uncover-to-bottom" | "uncover-to-upperleft" | "uncover-to-upperright" | "uncover-to-lowerleft" | "uncover-to-lowerright" | "fade-to-center" | "fade-from-center" | "vertical-stripes" | "horizontal-stripes" | "clockwise" | "counterclockwise" | "open-vertical" | "open-horizontal" | "close-vertical" | "close-horizontal" | "wavyline-from-left" | "wavyline-from-top" | "wavyline-from-right" | "wavyline-from-bottom" | "spiralin-left" | "spiralin-right" | "spiralout-left" | "spiralout-right" | "roll-from-top" | "roll-from-left" | "roll-from-right" | "roll-from-bottom" | "stretch-from-left" | "stretch-from-top" | "stretch-from-right" | "stretch-from-bottom" | "vertical-lines" | "horizontal-lines" | "dissolve" | "random" | "vertical-checkerboard" | "horizontal-checkerboard" | "interlocking-horizontal-left" | "interlocking-horizontal-right" | "interlocking-vertical-top" | "interlocking-vertical-bottom" | "fly-away" | "open" | "close" | "melt"))? ;
 style-drawing-page-properties-attlist ::= (presentation:transition-speed::presentationSpeeds)? ;
 style-drawing-page-properties-attlist ::= (smil:subtype::string)? ;
 style-drawing-page-properties-attlist ::= (smil:direction::("forward" | "reverse"))? ;
 style-drawing-page-properties-attlist ::= (smil:fadeColor::color)? ;
 style-drawing-page-properties-attlist ::= (presentation:duration::duration)? ;
 style-drawing-page-properties-attlist ::= (presentation:visibility::("visible" | "hidden"))? ;
 style-drawing-page-properties-attlist ::= (draw:background-size::("full" | "border"))? ;
 style-drawing-page-properties-attlist ::= (presentation:background-objects-visible::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:background-visible::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:display-header::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:display-footer::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:display-page-number::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:display-date-time::boolean)? ;
 style-drawing-page-properties-attlist ::= (smil:type::string)? ;
table-sort-groups-attlist ::= (table:data-type::("text" | "number" | "automatic" | string))? ;
 table-sort-groups-attlist ::= (table:order::("ascending" | "descending"))? ;
presentation-dim ::= presentation:dim::(presentation-dim-attlist presentation-sound?) ;
table-table-cell-attlist ::= (table:number-columns-repeated::positiveInteger)? ;
 table-table-cell-attlist ::= (table:style-name::styleNameRef)? ;
 table-table-cell-attlist ::= (table:content-validation-name::string)? ;
 table-table-cell-attlist ::= (table:formula::string)? ;
 table-table-cell-attlist ::= common-value-and-type-attlist? ;
 table-table-cell-attlist ::= (table:protect::boolean)? ;
anim-animate-motion-attlist ::= (svg:path::pathData)? ;
 anim-animate-motion-attlist ::= (svg:origin::string)? ;
 anim-animate-motion-attlist ::= (smil:calcMode::("discrete" | "linear" | "paced" | "spline"))? ;
presentation-date-time-decl-attlist ::= presentation:name::string ;
 presentation-date-time-decl-attlist ::= presentation:source::("fixed" | "current-date") ;
 presentation-date-time-decl-attlist ::= (style:data-style-name::styleNameRef)? ;
text-template-name-attlist ::= (text:display::("full" | "path" | "name" | "name-and-extension" | "area" | "title"))? ;
draw-caption-attlist ::= (draw:caption-point-x::coordinate draw:caption-point-y::coordinate)? ;
 draw-caption-attlist ::= (draw:corner-radius::nonNegativeLength)? ;
number-minutes-attlist ::= (number:style::("short" | "long"))? ;
form-button-attlist ::= form-control-attlist button-type common-disabled-attlist label image-data common-printable-attlist common-tab-attlist target-frame target-location common-title-attlist common-value-attlist common-form-relative-image-position-attlist ;
 form-button-attlist ::= (form:default-button::boolean)? ;
 form-button-attlist ::= (form:toggle::boolean)? ;
 form-button-attlist ::= (form:focus-on-click::boolean)? ;
 form-button-attlist ::= (form:xforms-submission::string)? ;
table-change-deletion ::= table:change-deletion::((table:id::string)?) ;
chart-wall-attlist ::= (svg:width::length)? ;
 chart-wall-attlist ::= (chart:style-name::styleNameRef)? ;
text-index-title-template ::= text:index-title-template::((text:style-name::styleNameRef)? string()) ;
table-filter-attlist ::= (table:target-range-address::cellRangeAddress)? ;
 table-filter-attlist ::= (table:condition-source::("self" | "cell-range"))? ;
 table-filter-attlist ::= (table:condition-source-range-address::cellRangeAddress)? ;
 table-filter-attlist ::= (table:display-duplicates::boolean)? ;
draw-ellipse-attlist ::= (svg:rx::length svg:ry::length)? ;
common-field-display-value-none-attlist ::= (text:display::("value" | "none"))? ;
chart-series ::= chart:series::(chart-series-attlist chart-domain* chart-mean-value? chart-regression-curve? chart-error-indicator? chart-data-point*) ;
table-calculation-settings ::= table:calculation-settings::(table-calculation-setting-attlist table-null-date? table-iteration?) ;
text-index-entry-link-start ::= text:index-entry-link-start::((text:style-name::styleNameRef)?) ;
table-data-pilot-member-attlist ::= table:name::string ;
 table-data-pilot-member-attlist ::= (table:display::boolean)? ;
 table-data-pilot-member-attlist ::= (table:show-details::boolean)? ;
common-convert-empty-attlist ::= (form:convert-empty-to-null::boolean)? ;
style-style-content ::= style:family::"text" style-text-properties? ;
 style-style-content ::= style:family::"paragraph" style-paragraph-properties? style-text-properties? ;
 style-style-content ::= style:family::"section" style-section-properties? ;
 style-style-content ::= style:family::"ruby" style-ruby-properties? ;
 style-style-content ::= style:family::"table" style-table-properties? ;
 style-style-content ::= style:family::"table-column" style-table-column-properties? ;
 style-style-content ::= style:family::"table-row" style-table-row-properties? ;
 style-style-content ::= style:family::"table-cell" style-table-cell-properties? style-paragraph-properties? style-text-properties? ;
 style-style-content ::= style:family::("graphic" | "presentation") style-graphic-properties? style-paragraph-properties? style-text-properties? ;
 style-style-content ::= style:family::"drawing-page" style-drawing-page-properties? ;
 style-style-content ::= style:family::"chart" style-chart-properties? style-graphic-properties? style-paragraph-properties? style-text-properties? ;
common-format-source-attlist ::= (number:format-source::("fixed" | "language"))? ;
number-number-attlist ::= (number:decimal-replacement::string())? ;
 number-number-attlist ::= (number:display-factor::double)? ;
text-list ::= text:list::(text-list-attr text-list-header? text-list-item*) ;
common-anim-set-values-attlist ::= (smil:to::string)? ;
common-field-description-attlist ::= (text:description::string())? ;
chart-series-attlist ::= (chart:values-cell-range-address::cellRangeAddress)? ;
 chart-series-attlist ::= (chart:label-cell-address::cellAddress)? ;
 chart-series-attlist ::= (chart:class::namespacedToken)? ;
 chart-series-attlist ::= (chart:attached-axis::string)? ;
 chart-series-attlist ::= (chart:style-name::styleNameRef)? ;
table-table-column-group-attlist ::= (table:display::boolean)? ;
common-draw-transform-attlist ::= (draw:transform::string)? ;
common-shadow-attlist ::= (style:shadow::shadowType)? ;
number-year-attlist ::= (number:style::("short" | "long"))? ;
svg-font-face-format ::= svg:font-face-format::((svg:string::string())?) ;
style-map-attlist ::= style:condition::string ;
 style-map-attlist ::= style:apply-style-name::styleNameRef ;
 style-map-attlist ::= (style:base-cell-address::cellAddress)? ;
text-index-entry-tab-stop ::= text:index-entry-tab-stop::((text:style-name::styleNameRef)? text-index-entry-tab-stop-attrs) ;
chart-chart ::= chart:chart::(chart-chart-attlist chart-title? chart-subtitle? chart-footer? chart-legend? chart-plot-area table-table?) ;
table-sort-attlist ::= (table:bind-styles-to-content::boolean)? ;
 table-sort-attlist ::= (table:target-range-address::cellRangeAddress)? ;
 table-sort-attlist ::= (table:case-sensitive::boolean)? ;
 table-sort-attlist ::= (table:language::languageCode)? ;
 table-sort-attlist ::= (table:country::countryCode)? ;
 table-sort-attlist ::= (table:algorithm::string)? ;
office-spreadsheet-attlist ::= (table:structure-protected::boolean)? (table:protection-key::string)? ;
common-data-field-attlist ::= (form:data-field::string)? ;
table-rows-no-group ::= (table-rows (table-table-header-rows table-rows?)?) | (table-table-header-rows table-rows?) ;
common-field-database-name ::= (text:database-name::string)? ;
 common-field-database-name ::= form-connection-resource ;
chart-subtitle ::= chart:subtitle::(chart-title-attlist text-p?) ;
common-draw-position-attlist ::= (svg:x::coordinate)? (svg:y::coordinate)? ;
common-padding-attlist ::= (fo:padding::nonNegativeLength)? (fo:padding-top::nonNegativeLength)? (fo:padding-bottom::nonNegativeLength)? (fo:padding-left::nonNegativeLength)? (fo:padding-right::nonNegativeLength)? ;
table-database-source-sql-attlist ::= table:database-name::string ;
 table-database-source-sql-attlist ::= table:sql-statement::string ;
 table-database-source-sql-attlist ::= (table:parse-sql-statement::boolean)? ;
style-table-properties-attlist ::= (style:width::positiveLength)? (style:rel-width::percent)? ;
 style-table-properties-attlist ::= (table:align::("left" | "center" | "right" | "margins"))? ;
 style-table-properties-attlist ::= common-horizontal-margin-attlist ;
 style-table-properties-attlist ::= common-vertical-margin-attlist ;
 style-table-properties-attlist ::= common-margin-attlist ;
 style-table-properties-attlist ::= common-page-number-attlist ;
 style-table-properties-attlist ::= common-break-attlist ;
 style-table-properties-attlist ::= common-background-color-attlist ;
 style-table-properties-attlist ::= common-shadow-attlist ;
 style-table-properties-attlist ::= common-keep-with-next-attlist ;
 style-table-properties-attlist ::= (style:may-break-between-rows::boolean)? ;
 style-table-properties-attlist ::= (table:border-model::("collapsing" | "separating"))? ;
 style-table-properties-attlist ::= common-writing-mode-attlist ;
 style-table-properties-attlist ::= (table:display::boolean)? ;
presentation-shape-attlist ::= (presentation:class::presentation-classes)? ;
 presentation-shape-attlist ::= (presentation:placeholder::boolean)? ;
 presentation-shape-attlist ::= (presentation:user-transformed::boolean)? ;
text-alphabetical-index-source-attrs ::= text-index-scope-attr text-relative-tab-stop-position-attr ;
 text-alphabetical-index-source-attrs ::= (text:ignore-case::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:main-entry-style-name::styleNameRef)? ;
 text-alphabetical-index-source-attrs ::= (text:alphabetical-separators::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:combine-entries::boolean)? (text:combine-entries-with-dash::boolean)? (text:combine-entries-with-pp::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:use-keys-as-entries::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:capitalize-entries::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:comma-separated::boolean)? ;
 text-alphabetical-index-source-attrs ::= (fo:language::languageCode)? ;
 text-alphabetical-index-source-attrs ::= (fo:country::countryCode)? ;
 text-alphabetical-index-source-attrs ::= (text:sort-algorithm::string)? ;
text-list-attr ::= (text:style-name::styleNameRef)? ;
 text-list-attr ::= (text:continue-numbering::boolean)? ;
form-form-attlist ::= (xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")?)? ;
 form-form-attlist ::= (office:target-frame::targetFrameName)? ;
 form-form-attlist ::= (form:method::("get" | "post" | string))? ;
 form-form-attlist ::= (form:enctype::string)? ;
 form-form-attlist ::= (form:allow-deletes::boolean)? ;
 form-form-attlist ::= (form:allow-inserts::boolean)? ;
 form-form-attlist ::= (form:allow-updates::boolean)? ;
 form-form-attlist ::= (form:apply-filter::boolean)? ;
 form-form-attlist ::= (form:command-type::("table" | "query" | "command"))? ;
 form-form-attlist ::= (form:command::string())? ;
 form-form-attlist ::= (form:datasource::(anyURI | string))? ;
 form-form-attlist ::= (form:master-fields::string)? ;
 form-form-attlist ::= (form:detail-fields::string)? ;
 form-form-attlist ::= (form:escape-processing::boolean)? ;
 form-form-attlist ::= (form:filter::string)? ;
 form-form-attlist ::= (form:ignore-result::boolean)? ;
 form-form-attlist ::= (form:navigation-mode::navigation)? ;
 form-form-attlist ::= (form:order::string)? ;
 form-form-attlist ::= (form:tab-cycle::tab-cycles)? ;
text-tracked-changes-attr ::= (text:track-changes::boolean)? ;
table-help-message ::= table:help-message::((table:title::string)? (table:display::boolean)? text-p*) ;
paragraph-content ::= string() ;
 paragraph-content ::= text:s::((text:c::nonNegativeInteger)?) ;
 paragraph-content ::= text:tab::text-tab-attr ;
 paragraph-content ::= text:line-break::Îµ ;
 paragraph-content ::= text-soft-page-break ;
 paragraph-content ::= text:span::((text:style-name::styleNameRef)? (text:class-names::styleNameRefs)? paragraph-content*) ;
 paragraph-content ::= text:a::(text-a-attlist office-event-listeners? paragraph-content*) ;
 paragraph-content ::= (text:bookmark::(text:name::string)) | (text:bookmark-start::(text:name::string)) | (text:bookmark-end::(text:name::string)) ;
 paragraph-content ::= text:reference-mark::(text:name::string) ;
 paragraph-content ::= (text:reference-mark-start::(text:name::string)) | (text:reference-mark-end::(text:name::string)) ;
 paragraph-content ::= text:note::(text-note-class (text:id::string)? text:note-citation::((text:label::string)? string()) text:note-body::(text-content*)) ;
 paragraph-content ::= text:ruby::((text:style-name::styleNameRef)? text:ruby-base::paragraph-content text:ruby-text::((text:style-name::styleNameRef)? string())) ;
 paragraph-content ::= office-annotation ;
 paragraph-content ::= change-marks ;
 paragraph-content ::= shape | draw-a ;
 paragraph-content ::= text:date::(text-date-attlist string()) ;
 paragraph-content ::= text:time::(text-time-attlist string()) ;
 paragraph-content ::= text:page-number::(text-page-number-attlist string()) ;
 paragraph-content ::= text:page-continuation::(text-page-continuation-attlist string()) ;
 paragraph-content ::= text:sender-firstname::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-lastname::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-initials::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-title::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-position::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-email::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-phone-private::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-fax::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-company::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-phone-work::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-street::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-city::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-postal-code::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-country::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-state-or-province::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:author-name::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:author-initials::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:chapter::(text-chapter-attlist string()) ;
 paragraph-content ::= text:file-name::(text-file-name-attlist string()) ;
 paragraph-content ::= text:template-name::(text-template-name-attlist string()) ;
 paragraph-content ::= text:sheet-name::string() ;
 paragraph-content ::= text:variable-set::(common-field-name-attlist common-field-formula-attlist common-value-and-type-attlist common-field-display-value-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:variable-get::(common-field-name-attlist common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:variable-input::(common-field-name-attlist common-field-description-attlist common-value-type-attlist common-field-display-value-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:user-field-get::(common-field-name-attlist common-field-display-value-formula-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:user-field-input::(common-field-name-attlist common-field-description-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:sequence::(common-field-name-attlist common-field-formula-attlist common-field-num-format-attlist text-sequence-ref-name string()) ;
 paragraph-content ::= text:expression::(common-field-formula-attlist common-value-and-type-attlist? common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:text-input::(common-field-description-attlist string()) ;
 paragraph-content ::= text:initial-creator::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:creation-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::dateOrDateTime)? string()) ;
 paragraph-content ::= text:creation-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::timeOrDateTime)? string()) ;
 paragraph-content ::= text:description::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:user-defined::(common-field-fixed-attlist text:name::string common-field-data-style-name-attlist (office:value::double)? (office:date-value::dateOrDateTime)? (office:time-value::duration)? (office:boolean-value::boolean)? (office:string-value::string)? string()) ;
 paragraph-content ::= text:print-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::time)? string()) ;
 paragraph-content ::= text:print-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::date)? string()) ;
 paragraph-content ::= text:printed-by::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:title::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:subject::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:keywords::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:editing-cycles::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:editing-duration::(common-field-fixed-attlist common-field-data-style-name-attlist (text:duration::duration)? string()) ;
 paragraph-content ::= text:modification-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::time)? string()) ;
 paragraph-content ::= text:modification-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::date)? string()) ;
 paragraph-content ::= text:creator::(common-field-fixed-attlist string()) ;
 paragraph-content ::= (text:page-count::(common-field-num-format-attlist string())) | (text:paragraph-count::(common-field-num-format-attlist string())) | (text:word-count::(common-field-num-format-attlist string())) | (text:character-count::(common-field-num-format-attlist string())) | (text:table-count::(common-field-num-format-attlist string())) | (text:image-count::(common-field-num-format-attlist string())) | (text:object-count::(common-field-num-format-attlist string())) ;
 paragraph-content ::= text:database-display::(text-database-display-attlist string()) ;
 paragraph-content ::= text:database-next::text-database-next-attlist ;
 paragraph-content ::= text:database-row-select::text-database-row-select-attlist ;
 paragraph-content ::= text:database-row-number::(common-field-database-table common-field-num-format-attlist (text:value::nonNegativeInteger)? string()) ;
 paragraph-content ::= text:database-name::(common-field-database-table string()) ;
 paragraph-content ::= text:page-variable-set::(text-set-page-variable-attlist string()) ;
 paragraph-content ::= text:page-variable-get::(text-get-page-variable-attlist string()) ;
 paragraph-content ::= text:placeholder::(text-placeholder-attlist string()) ;
 paragraph-content ::= text:conditional-text::(text-conditional-text-attlist string()) ;
 paragraph-content ::= text:hidden-text::(text-hidden-text-attlist string()) ;
 paragraph-content ::= (text:reference-ref::(text-common-ref-content text-ref-content)) | (text:bookmark-ref::(text-common-ref-content text-ref-content)) ;
 paragraph-content ::= text:note-ref::(text-common-ref-content text-note-ref-content text-ref-content) ;
 paragraph-content ::= text:sequence-ref::(text-common-ref-content text-sequence-ref-content) ;
 paragraph-content ::= text:script::((xlink:href::anyURI (xlink:type::"simple")?) | string() (script:language::string)?) ;
 paragraph-content ::= text:execute-macro::((text:name::string)? office-event-listeners? string()) ;
 paragraph-content ::= text:hidden-paragraph::(text-hidden-paragraph-attlist string()) ;
 paragraph-content ::= text:dde-connection::(text:connection-name::string string()) ;
 paragraph-content ::= text:measure::(text:kind::("value" | "unit" | "gap") string()) ;
 paragraph-content ::= text:table-formula::(common-field-formula-attlist common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:toc-mark-start::text-toc-mark-start-attrs ;
 paragraph-content ::= text:toc-mark-end::text-id ;
 paragraph-content ::= text:toc-mark::(text:string-value::string text-outline-level) ;
 paragraph-content ::= text:user-index-mark-start::(text-id text-outline-level text-index-name) ;
 paragraph-content ::= text:user-index-mark-end::(text-id text-outline-level) ;
 paragraph-content ::= text:user-index-mark::(text:string-value::string text-outline-level text-index-name) ;
 paragraph-content ::= text:alphabetical-index-mark-start::(text-id text-alphabetical-index-mark-attrs) ;
 paragraph-content ::= text:alphabetical-index-mark-end::text-id ;
 paragraph-content ::= text:alphabetical-index-mark::(text:string-value::string text-alphabetical-index-mark-attrs) ;
 paragraph-content ::= text:bibliography-mark::(text:bibliography-type::text-bibliography-types ((text:identifier::string) | (text:address::string) | (text:annote::string) | (text:author::string) | (text:booktitle::string) | (text:chapter::string) | (text:edition::string) | (text:editor::string) | (text:howpublished::string) | (text:institution::string) | (text:journal::string) | (text:month::string) | (text:note::string) | (text:number::string) | (text:organizations::string) | (text:pages::string) | (text:publisher::string) | (text:school::string) | (text:series::string) | (text:title::string) | (text:report-type::string) | (text:volume::string) | (text:year::string) | (text:url::string) | (text:custom1::string) | (text:custom2::string) | (text:custom3::string) | (text:custom4::string) | (text:custom5::string) | (text:isbn::string) | (text:issn::string))* string()) ;
 paragraph-content ::= presentation:header::Îµ ;
 paragraph-content ::= presentation:footer::Îµ ;
 paragraph-content ::= presentation:date-time::Îµ ;
config-config-item-map-entry-attlist ::= (config:name::string)? ;
common-printable-attlist ::= (form:printable::boolean)? ;
heading-attrs ::= text:outline-level::positiveInteger ;
 heading-attrs ::= (text:restart-numbering::boolean)? ;
 heading-attrs ::= (text:start-value::nonNegativeInteger)? ;
 heading-attrs ::= (text:is-list-header::boolean)? ;
common-time-manip-attlist ::= (smil:accelerate::double)? ;
 common-time-manip-attlist ::= (smil:decelerate::double)? ;
 common-time-manip-attlist ::= (smil:autoReverse::boolean)? ;
common-endsync-timing-attlist ::= (smil:endsync::("first" | "last" | "all" | "media"))? ;
text-numbered-paragraph-attr ::= (text:level::positiveInteger)? ;
 text-numbered-paragraph-attr ::= text-list-attr ;
 text-numbered-paragraph-attr ::= text-list-item-attr ;
draw-glue-point-attlist ::= draw:id::nonNegativeInteger ;
 draw-glue-point-attlist ::= svg:x::(distance | percent) svg:y::(distance | percent) ;
 draw-glue-point-attlist ::= (draw:align::("top-left" | "top" | "top-right" | "left" | "center" | "right" | "bottom-left" | "bottom-right"))? ;
table-data-pilot-field-attlist ::= table:source-field-name::string ;
 table-data-pilot-field-attlist ::= (table:orientation::("row" | "column" | "data" | "hidden")) | (table:orientation::"page" table:selected-page::string) ;
 table-data-pilot-field-attlist ::= (table:is-data-layout-field::string)? ;
 table-data-pilot-field-attlist ::= (table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string))? ;
 table-data-pilot-field-attlist ::= (table:used-hierarchy::integer)? ;
office-styles ::= (office:styles::(styles style-default-style* text-outline-style? text-notes-configuration* text-bibliography-configuration? text-linenumbering-configuration? draw-gradient* svg-linearGradient* svg-radialGradient* draw-hatch* draw-fill-image* draw-marker* draw-stroke-dash* draw-opacity* style-presentation-page-layout*))? ;
common-vertical-pos-attlist ::= (style:vertical-pos::("top" | "middle" | "bottom" | "from-top" | "below"))? (svg:y::coordinate)? ;
style-chart-properties-attlist ::= (chart:scale-text::boolean)? ;
 style-chart-properties-attlist ::= (chart:three-dimensional::boolean)? ;
 style-chart-properties-attlist ::= (chart:deep::boolean)? ;
 style-chart-properties-attlist ::= (chart:symbol-type::"none") | (chart:symbol-type::"automatic") | (chart:symbol-type::"named-symbol" chart:symbol-name::("square" | "diamond" | "arrow-down" | "arrow-up" | "arrow-right" | "arrow-left" | "bow-tie" | "hourglass" | "circle" | "star" | "x" | "plus" | "asterisk" | "horizontal-bar" | "vertical-bar")) | (chart:symbol-type::"image" chart:symbol-image::(xlink:href::anyURI)) | Îµ ;
 style-chart-properties-attlist ::= (chart:symbol-width::nonNegativeLength)? (chart:symbol-height::nonNegativeLength)? ;
 style-chart-properties-attlist ::= (chart:vertical::boolean)? ;
 style-chart-properties-attlist ::= (chart:connect-bars::boolean)? ;
 style-chart-properties-attlist ::= (chart:gap-width::integer)? (chart:overlap::integer)? ;
 style-chart-properties-attlist ::= (chart:japanese-candle-stick::boolean)? ;
 style-chart-properties-attlist ::= (chart:interpolation::("none" | "cubic-spline" | "b-spline"))? (chart:spline-order::positiveInteger)? (chart:spline-resolution::positiveInteger)? ;
 style-chart-properties-attlist ::= (chart:pie-offset::nonNegativeInteger)? ;
 style-chart-properties-attlist ::= (chart:lines::boolean)? ;
 style-chart-properties-attlist ::= (chart:solid-type::("cuboid" | "cylinder" | "cone" | "pyramid"))? ;
 style-chart-properties-attlist ::= (chart:stacked::boolean)? (chart:percentage::boolean)? ;
 style-chart-properties-attlist ::= (chart:link-data-style-to-source::boolean)? ;
 style-chart-properties-attlist ::= (chart:visible::boolean)? ;
 style-chart-properties-attlist ::= (chart:logarithmic::boolean)? ;
 style-chart-properties-attlist ::= (chart:maximum::double)? (chart:minimum::double)? (chart:origin::double)? (chart:interval-major::double)? (chart:interval-minor-divisor::positiveInteger)? ;
 style-chart-properties-attlist ::= (chart:tick-marks-major-inner::boolean)? (chart:tick-marks-major-outer::boolean)? (chart:tick-marks-minor-inner::boolean)? (chart:tick-marks-minor-outer::boolean)? ;
 style-chart-properties-attlist ::= (chart:display-label::boolean)? (chart:text-overlap::boolean)? (text:line-break::boolean)? (chart:label-arrangement::("side-by-side" | "stagger-even" | "stagger-odd"))? ;
 style-chart-properties-attlist ::= common-style-direction-attlist ;
 style-chart-properties-attlist ::= common-rotation-angle-attlist ;
 style-chart-properties-attlist ::= (chart:data-label-number::("none" | "value" | "percentage"))? ;
 style-chart-properties-attlist ::= (chart:data-label-text::boolean)? ;
 style-chart-properties-attlist ::= (chart:data-label-symbol::boolean)? ;
 style-chart-properties-attlist ::= (chart:mean-value::boolean)? ;
 style-chart-properties-attlist ::= (chart:error-category::("none" | "variance" | "standard-deviation" | "percentage" | "error-margin" | "constant"))? ;
 style-chart-properties-attlist ::= (chart:error-percentage::double)? ;
 style-chart-properties-attlist ::= (chart:error-margin::double)? ;
 style-chart-properties-attlist ::= (chart:error-lower-limit::double)? (chart:error-upper-limit::double)? ;
 style-chart-properties-attlist ::= (chart:error-upper-indicator::boolean)? (chart:error-lower-indicator::boolean)? ;
 style-chart-properties-attlist ::= (chart:series-source::("columns" | "rows"))? ;
 style-chart-properties-attlist ::= (chart:regression-type::("none" | "linear" | "logarithmic" | "exponential" | "power"))? ;
table-table ::= table:table::(table-table-attlist table-table-source? office-dde-source? table-scenario? office-forms? table-shapes? table-columns-and-groups table-rows-and-groups) ;
text-linenumbering-configuration ::= text:linenumbering-configuration::(text-linenumbering-configuration-attlist text-linenumbering-separator?) ;
draw-path ::= draw:path::(common-draw-path-data-attlist common-draw-position-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
style-footnote-sep ::= (style:footnote-sep::style-footnote-sep-attlist)? ;
style-header-style ::= style:header-style::(style-header-footer-properties?) ;
anim-audio-attlist ::= (xlink:href::anyURI)? ;
 anim-audio-attlist ::= (anim:audio-level::double)? ;
table-table-cell-content ::= table-cell-range-source? office-annotation? table-detective? text-content* ;
number-day-attlist ::= (number:style::("short" | "long"))? ;
presentation-show-text ::= presentation:show-text::(common-presentation-effect-attlist presentation-sound?) ;
common-horizontal-margin-attlist ::= (fo:margin-left::(length | percent))? (fo:margin-right::(length | percent))? ;
text-page-continuation-attlist ::= text:select-page::("previous" | "next") ;
 text-page-continuation-attlist ::= (text:string-value::string)? ;
draw-area-circle ::= draw:area-circle::(common-draw-area-attlist svg:cx::coordinate svg:cy::coordinate svg:r::length svg-title? svg-desc? office-event-listeners?) ;
text-user-index-source-attr ::= text-index-scope-attr text-relative-tab-stop-position-attr text:index-name::string ;
 text-user-index-source-attr ::= (text:use-index-marks::boolean)? (text:use-graphics::boolean)? (text:use-tables::boolean)? (text:use-floating-frames::boolean)? (text:use-objects::boolean)? ;
 text-user-index-source-attr ::= (text:copy-outline-levels::boolean)? ;
common-anim-add-accum-attlist ::= (smil:accumulate::("none" | "sum"))? ;
 common-anim-add-accum-attlist ::= (smil:additive::("replace" | "sum"))? ;
draw-connector ::= draw:connector::(draw-connector-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
anyElements ::= (string()? anyAttListOrElements string()?)* ;
draw-applet ::= draw:applet::(draw-applet-attlist common-draw-data-attlist? draw-param*) ;
text-linenumbering-configuration-attlist ::= (text:number-lines::boolean)? ;
 text-linenumbering-configuration-attlist ::= common-num-format-attlist? ;
 text-linenumbering-configuration-attlist ::= (text:style-name::styleNameRef)? ;
 text-linenumbering-configuration-attlist ::= (text:increment::nonNegativeInteger)? ;
 text-linenumbering-configuration-attlist ::= (text:number-position::("left" | "right" | "inner" | "outer"))? ;
 text-linenumbering-configuration-attlist ::= (text:offset::nonNegativeLength)? ;
 text-linenumbering-configuration-attlist ::= (text:count-empty-lines::boolean)? ;
 text-linenumbering-configuration-attlist ::= (text:count-in-text-boxes::boolean)? ;
 text-linenumbering-configuration-attlist ::= (text:restart-on-page::boolean)? ;
style-master-page ::= style:master-page::(style-master-page-attlist (style-header style-header-left?)? (style-footer style-footer-left?)? office-forms? style-style* shape* presentation-notes?) ;
style-handout-master-attlist ::= (presentation:presentation-page-layout-name::styleNameRef)? ;
 style-handout-master-attlist ::= style:page-layout-name::styleNameRef ;
 style-handout-master-attlist ::= (draw:style-name::styleNameRef)? ;
text-linenumbering-separator ::= text:linenumbering-separator::((text:increment::nonNegativeInteger)? string()) ;
list-source-type ::= (form:list-source-type::("table" | "query" | "sql" | "sql-pass-through" | "value-list" | "table-fields"))? ;
text-common-ref-content ::= string() ;
 text-common-ref-content ::= (text:ref-name::string)? ;
office-script ::= office:script::(office-script-attlist string()? anyElements string()?) ;
presentation-play-attlist ::= draw:shape-id::IDREF (presentation:speed::presentationSpeeds)? ;
svg-radialGradient ::= svg:radialGradient::(common-svg-gradient-attlist (svg:cx::(coordinate | percent))? (svg:cy::(coordinate | percent))? (svg:r::(coordinate | percent))? (svg:fx::(coordinate | percent))? (svg:fy::(coordinate | percent))? svg-stop*) ;
common-anim-spline-mode-attlist ::= (smil:calcMode::("discrete" | "linear" | "paced" | "spline"))? ;
office-scripts ::= (office:scripts::(office-script* office-event-listeners?))? ;
draw-connector-attlist ::= (draw:type::("standard" | "lines" | "line" | "curve"))? ;
 draw-connector-attlist ::= (svg:x1::coordinate svg:y1::coordinate)? ;
 draw-connector-attlist ::= (draw:start-shape::IDREF)? ;
 draw-connector-attlist ::= (draw:start-glue-point::nonNegativeInteger)? ;
 draw-connector-attlist ::= (svg:x2::coordinate svg:y2::coordinate)? ;
 draw-connector-attlist ::= (draw:end-shape::IDREF)? ;
 draw-connector-attlist ::= (draw:end-glue-point::nonNegativeInteger)? ;
 draw-connector-attlist ::= (draw:line-skew::(length (length length?)?))? ;
table-highlighted-range-attlist ::= (table:cell-range-address::cellRangeAddress)? ;
 table-highlighted-range-attlist ::= table:direction::("from-another-table" | "to-another-table" | "from-same-table") ;
 table-highlighted-range-attlist ::= (table:contains-error::boolean)? ;
common-vertical-margin-attlist ::= (fo:margin-top::(nonNegativeLength | percent))? (fo:margin-bottom::(nonNegativeLength | percent))? ;
button-type ::= (form:button-type::types)? ;
table-data-pilot-table ::= table:data-pilot-table::(table-data-pilot-table-attlist (table-database-source-sql | table-database-source-table | table-database-source-query | table-source-service | table-source-cell-range)? table-data-pilot-field+) ;
table-null-date ::= table:null-date::((table:value-type::valueType)? (table:date-value::date)?) ;
label ::= (form:label::string)? ;
style-header-footer-properties-attlist ::= (svg:height::length)? (fo:min-height::length)? ;
 style-header-footer-properties-attlist ::= common-horizontal-margin-attlist common-vertical-margin-attlist common-margin-attlist ;
 style-header-footer-properties-attlist ::= common-border-attlist ;
 style-header-footer-properties-attlist ::= common-border-line-width-attlist ;
 style-header-footer-properties-attlist ::= common-padding-attlist ;
 style-header-footer-properties-attlist ::= common-background-color-attlist ;
 style-header-footer-properties-attlist ::= common-shadow-attlist ;
 style-header-footer-properties-attlist ::= (style:dynamic-spacing::boolean)? ;
style-font-face-attlist ::= (svg:font-family::string)? (svg:font-style::fontStyle)? (svg:font-variant::fontVariant)? (svg:font-weight::fontWeight)? (svg:font-stretch::("normal" | "ultra-condensed" | "extra-condensed" | "condensed" | "semi-condensed" | "semi-expanded" | "expanded" | "extra-expanded" | "ultra-expanded"))? (svg:font-size::positiveLength)? (svg:unicode-range::string())? (svg:units-per-em::integer)? (svg:panose-1::string())? (svg:stemv::integer)? (svg:stemh::integer)? (svg:slope::integer)? (svg:cap-height::integer)? (svg:x-height::integer)? (svg:accent-height::integer)? (svg:ascent::integer)? (svg:descent::integer)? (svg:widths::string())? (svg:bbox::string())? (svg:ideographic::integer)? (svg:alphabetic::integer)? (svg:mathematical::integer)? (svg:hanging::integer)? (svg:v-ideographic::integer)? (svg:v-alphabetic::integer)? (svg:v-mathematical::integer)? (svg:v-hanging::integer)? (svg:underline-position::integer)? (svg:underline-thickness::integer)? (svg:strikethrough-position::integer)? (svg:strikethrough-thickness::integer)? (svg:overline-position::integer)? (svg:overline-thickness::integer)? ;
 style-font-face-attlist ::= style:name::string ;
 style-font-face-attlist ::= (style:font-adornments::string)? ;
 style-font-face-attlist ::= (style:font-family-generic::fontFamilyGeneric)? ;
 style-font-face-attlist ::= (style:font-pitch::fontPitch)? ;
 style-font-face-attlist ::= (style:font-charset::textEncoding)? ;
style-num-letter-sync-attlist ::= (style:num-letter-sync::boolean)? ;
common-field-fixed-attlist ::= (text:fixed::boolean)? ;
draw-stroke-dash-attlist ::= draw:name::styleName ;
 draw-stroke-dash-attlist ::= (draw:display-name::string)? ;
 draw-stroke-dash-attlist ::= (draw:style::("rect" | "round"))? ;
 draw-stroke-dash-attlist ::= (draw:dots1::integer)? (draw:dots1-length::length)? (draw:dots2::integer)? (draw:dots2-length::length)? ;
 draw-stroke-dash-attlist ::= (draw:distance::length)? ;
style-master-page-attlist ::= style:name::styleName ;
 style-master-page-attlist ::= (style:display-name::string)? ;
 style-master-page-attlist ::= style:page-layout-name::styleNameRef ;
 style-master-page-attlist ::= (draw:style-name::styleNameRef)? ;
 style-master-page-attlist ::= (style:next-style-name::styleNameRef)? ;
number-month-attlist ::= (number:textual::boolean)? ;
 number-month-attlist ::= (number:possessive-form::boolean)? ;
 number-month-attlist ::= (number:style::("short" | "long"))? ;
table-cell-content-deletion ::= table:cell-content-deletion::((table:id::string)? table-cell-address? table-change-track-table-cell?) ;
chart-data-point-attlist ::= (chart:repeated::nonNegativeInteger)? ;
 chart-data-point-attlist ::= (chart:style-name::styleNameRef)? ;
number-seconds-attlist ::= (number:style::("short" | "long"))? ;
 number-seconds-attlist ::= (number:decimal-places::integer)? ;
table-deletion ::= table:deletion::(table-deletion-attlist common-table-change-attlist office-change-info table-dependencies? table-deletions? table-cut-offs?) ;
text-index-entry-bibliography-attrs ::= (text:style-name::styleNameRef)? ;
 text-index-entry-bibliography-attrs ::= text:bibliography-data-field::("address" | "annote" | "author" | "bibliography-type" | "booktitle" | "chapter" | "custom1" | "custom2" | "custom3" | "custom4" | "custom5" | "edition" | "editor" | "howpublished" | "identifier" | "institution" | "isbn" | "issn" | "journal" | "month" | "note" | "number" | "organizations" | "pages" | "publisher" | "report-type" | "school" | "series" | "title" | "url" | "volume" | "year") ;
text-index-entry-chapter-attrs ::= (text:display::("name" | "number" | "number-and-name"))? ;
common-field-data-style-name-attlist ::= (style:data-style-name::styleNameRef)? ;
style-column-attlist ::= style:rel-width::relativeLength ;
 style-column-attlist ::= (fo:start-indent::length)? ;
 style-column-attlist ::= (fo:end-indent::length)? ;
 style-column-attlist ::= (fo:space-before::length)? ;
 style-column-attlist ::= (fo:space-after::length)? ;
common-fill-timing-attlist ::= (smil:fill::("remove" | "freeze" | "hold" | "auto" | "default" | "transition"))? ;
common-data-style-attlist ::= style:name::styleName ;
 common-data-style-attlist ::= (number:language::languageCode)? ;
 common-data-style-attlist ::= (number:country::countryCode)? ;
 common-data-style-attlist ::= (number:title::string())? ;
 common-data-style-attlist ::= (style:volatile::boolean)? ;
 common-data-style-attlist ::= (number:transliteration-format::string)? ;
 common-data-style-attlist ::= (number:transliteration-language::countryCode)? ;
 common-data-style-attlist ::= (number:transliteration-country::countryCode)? ;
 common-data-style-attlist ::= (number:transliteration-style::("short" | "medium" | "long"))? ;
office-annotation ::= office:annotation::(office-annotation-attlist draw-caption-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist dc-creator? dc-date? meta-date-string? (text-p | text-list)*) ;
dr3d-scene ::= dr3d:scene::(dr3d-scene-attlist common-draw-position-attlist common-draw-size-attlist common-draw-style-name-attlist common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-text-spreadsheet-shape-attlist common-dr3d-transform-attlist common-draw-caption-id-attlist svg-title? svg-desc? dr3d-light* shapes3d*) ;
common-anim-target-attlist ::= (smil:targetElement::IDREF)? ;
 common-anim-target-attlist ::= (anim:sub-item::string)? ;
draw-line ::= draw:line::(draw-line-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
style-ruby-properties-attlist ::= (style:ruby-position::("above" | "below"))? ;
 style-ruby-properties-attlist ::= (style:ruby-align::("left" | "center" | "right" | "distribute-letter" | "distribute-space"))? ;
image-data ::= (form:image-data::anyURI)? ;
number-scientific-number-attlist ::= (number:min-exponent-digits::integer)? ;
text-section-source-attr ::= (xlink:href::anyURI (xlink:type::"simple")? (xlink:show::"embed")?)? ;
 text-section-source-attr ::= (text:section-name::string)? ;
 text-section-source-attr ::= (text:filter-name::string)? ;
table-sort-by-attlist ::= table:field-number::nonNegativeInteger ;
 table-sort-by-attlist ::= (table:data-type::("text" | "number" | "automatic" | string))? ;
 table-sort-by-attlist ::= (table:order::("ascending" | "descending"))? ;
draw-page-thumbnail ::= draw:page-thumbnail::(draw-page-thumbnail-attlist common-draw-position-attlist common-draw-size-attlist presentation-shape-attlist common-draw-shape-with-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc?) ;
table-source-service-attlist ::= table:name::string ;
 table-source-service-attlist ::= table:source-name::string ;
 table-source-service-attlist ::= table:object-name::string ;
 table-source-service-attlist ::= (table:user-name::string)? ;
 table-source-service-attlist ::= (table:password::string)? ;
common-calendar-attlist ::= (number:calendar::("gregorian" | "gengou" | "ROC" | "hanja_yoil" | "hanja" | "hijri" | "jewish" | "buddhist" | string))? ;
office-annotation-attlist ::= (office:display::boolean)? ;
common-dr3d-transform-attlist ::= (dr3d:transform::string())? ;
dr3d-scene-attlist ::= (dr3d:vrp::vector3D)? (dr3d:vpn::vector3D)? (dr3d:vup::vector3D)? ;
 dr3d-scene-attlist ::= (dr3d:projection::("parallel" | "perspective"))? ;
 dr3d-scene-attlist ::= (dr3d:distance::length)? ;
 dr3d-scene-attlist ::= (dr3d:focal-length::length)? ;
 dr3d-scene-attlist ::= (dr3d:shadow-slant::nonNegativeInteger)? ;
 dr3d-scene-attlist ::= (dr3d:shade-mode::("flat" | "phong" | "gouraud" | "draft"))? ;
 dr3d-scene-attlist ::= (dr3d:ambient-color::color)? ;
 dr3d-scene-attlist ::= (dr3d:lighting-mode::boolean)? ;
table-cell-content-change ::= table:cell-content-change::(common-table-change-attlist table-cell-address office-change-info table-dependencies? table-deletions? table-previous) ;
chart-legend-attlist ::= (chart:legend-position::("start" | "end" | "top" | "bottom") (chart:legend-align::("start" | "center" | "end"))?) | (chart:legend-position::("top-start" | "bottom-start" | "top-end" | "bottom-end")) | Îµ ;
 chart-legend-attlist ::= common-draw-position-attlist ;
 chart-legend-attlist ::= (style:legend-expansion::("wide" | "high" | "balanced")) | (style:legend-expansion::"custom" style:legend-expansion-aspect-ratio::double) | Îµ ;
 chart-legend-attlist ::= (chart:style-name::styleNameRef)? ;
draw-rect ::= draw:rect::(draw-rect-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
table-subtotal-rules ::= table:subtotal-rules::(table-subtotal-rules-attlist table-sort-groups? table-subtotal-rule*) ;
text-alphabetical-index-source ::= text:alphabetical-index-source::(text-alphabetical-index-source-attrs text-index-title-template? text-alphabetical-index-entry-template*) ;
common-draw-z-index-attlist ::= (draw:z-index::nonNegativeInteger)? ;
chart-plot-area ::= chart:plot-area::(chart-plot-area-attlist dr3d-light* chart-axis* chart-series* chart-stock-gain-marker? chart-stock-loss-marker? chart-stock-range-line? chart-wall? chart-floor?) ;
for ::= (form:for::string)? ;
chart-grid-attlist ::= (chart:class::("major" | "minor"))? ;
 chart-grid-attlist ::= (chart:style-name::styleNameRef)? ;
style-graphic-properties-attlist ::= (draw:stroke::("none" | "dash" | "solid"))? ;
 style-graphic-properties-attlist ::= (draw:stroke-dash::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:stroke-dash-names::styleNameRefs)? ;
 style-graphic-properties-attlist ::= (svg:stroke-width::length)? ;
 style-graphic-properties-attlist ::= (svg:stroke-color::color)? ;
 style-graphic-properties-attlist ::= (draw:marker-start::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:marker-end::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:marker-start-width::length)? ;
 style-graphic-properties-attlist ::= (draw:marker-end-width::length)? ;
 style-graphic-properties-attlist ::= (draw:marker-start-center::boolean)? ;
 style-graphic-properties-attlist ::= (draw:marker-end-center::boolean)? ;
 style-graphic-properties-attlist ::= (svg:stroke-opacity::(string() | percent))? ;
 style-graphic-properties-attlist ::= (draw:stroke-linejoin::("miter" | "round" | "bevel" | "middle" | "none" | "inherit"))? ;
 style-graphic-properties-attlist ::= (draw:symbol-color::color)? ;
 style-graphic-properties-attlist ::= (text:animation::("none" | "scroll" | "alternate" | "slide"))? ;
 style-graphic-properties-attlist ::= (text:animation-direction::("left" | "right" | "up" | "down"))? ;
 style-graphic-properties-attlist ::= (text:animation-start-inside::boolean)? ;
 style-graphic-properties-attlist ::= (text:animation-stop-inside::boolean)? ;
 style-graphic-properties-attlist ::= (text:animation-repeat::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (text:animation-delay::duration)? ;
 style-graphic-properties-attlist ::= (text:animation-steps::length)? ;
 style-graphic-properties-attlist ::= (draw:auto-grow-width::boolean)? (draw:auto-grow-height::boolean)? ;
 style-graphic-properties-attlist ::= (draw:fit-to-size::boolean)? ;
 style-graphic-properties-attlist ::= (draw:fit-to-contour::boolean)? ;
 style-graphic-properties-attlist ::= (draw:textarea-vertical-align::("top" | "middle" | "bottom" | "justify"))? ;
 style-graphic-properties-attlist ::= (draw:textarea-horizontal-align::("left" | "center" | "right" | "justify"))? ;
 style-graphic-properties-attlist ::= (fo:wrap-option::("no-wrap" | "wrap"))? ;
 style-graphic-properties-attlist ::= (draw:color-mode::("greyscale" | "mono" | "watermark" | "standard"))? ;
 style-graphic-properties-attlist ::= (draw:color-inversion::boolean)? ;
 style-graphic-properties-attlist ::= (draw:luminance::percent)? ;
 style-graphic-properties-attlist ::= (draw:contrast::percent)? ;
 style-graphic-properties-attlist ::= (draw:gamma::percent)? ;
 style-graphic-properties-attlist ::= (draw:red::percent)? ;
 style-graphic-properties-attlist ::= (draw:green::percent)? ;
 style-graphic-properties-attlist ::= (draw:blue::percent)? ;
 style-graphic-properties-attlist ::= (draw:image-opacity::percent)? ;
 style-graphic-properties-attlist ::= (draw:shadow::("visible" | "hidden"))? ;
 style-graphic-properties-attlist ::= (draw:shadow-offset-x::length)? (draw:shadow-offset-y::length)? ;
 style-graphic-properties-attlist ::= (draw:shadow-color::color)? ;
 style-graphic-properties-attlist ::= (draw:shadow-opacity::percent)? ;
 style-graphic-properties-attlist ::= (draw:start-line-spacing-horizontal::distance)? (draw:start-line-spacing-vertical::distance)? ;
 style-graphic-properties-attlist ::= (draw:end-line-spacing-horizontal::distance)? (draw:end-line-spacing-vertical::distance)? ;
 style-graphic-properties-attlist ::= (draw:line-distance::distance)? ;
 style-graphic-properties-attlist ::= (draw:guide-overhang::length)? ;
 style-graphic-properties-attlist ::= (draw:guide-distance::distance)? ;
 style-graphic-properties-attlist ::= (draw:start-guide::length)? ;
 style-graphic-properties-attlist ::= (draw:end-guide::length)? ;
 style-graphic-properties-attlist ::= (draw:placing::("below" | "above"))? ;
 style-graphic-properties-attlist ::= (draw:parallel::boolean)? ;
 style-graphic-properties-attlist ::= (draw:measure-align::("automatic" | "left-outside" | "inside" | "right-outside"))? (draw:measure-vertical-align::("automatic" | "above" | "below" | "center"))? ;
 style-graphic-properties-attlist ::= (draw:unit::("automatic" | "mm" | "cm" | "m" | "km" | "pt" | "pc" | "inch" | "ft" | "mi"))? ;
 style-graphic-properties-attlist ::= (draw:show-unit::boolean)? ;
 style-graphic-properties-attlist ::= (draw:decimal-places::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (draw:caption-type::("straight-line" | "angled-line" | "angled-connector-line"))? ;
 style-graphic-properties-attlist ::= (draw:caption-angle-type::("fixed" | "free"))? ;
 style-graphic-properties-attlist ::= (draw:caption-angle::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (draw:caption-gap::distance)? ;
 style-graphic-properties-attlist ::= (draw:caption-escape-direction::("horizontal" | "vertical" | "auto"))? ;
 style-graphic-properties-attlist ::= (draw:caption-escape::(length | percent))? ;
 style-graphic-properties-attlist ::= (draw:caption-line-length::length)? ;
 style-graphic-properties-attlist ::= (draw:caption-fit-line-length::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:horizontal-segments::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:vertical-segments::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:edge-rounding::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:edge-rounding-mode::("correct" | "attractive"))? ;
 style-graphic-properties-attlist ::= (dr3d:back-scale::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:depth::length)? ;
 style-graphic-properties-attlist ::= (dr3d:backface-culling::("enabled" | "disabled"))? ;
 style-graphic-properties-attlist ::= (dr3d:end-angle::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:close-front::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:close-back::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:lighting-mode::("standard" | "double-sided"))? ;
 style-graphic-properties-attlist ::= (dr3d:normals-kind::("object" | "flat" | "sphere"))? ;
 style-graphic-properties-attlist ::= (dr3d:normals-direction::("normal" | "inverse"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-generation-mode-x::("object" | "parallel" | "sphere"))? (dr3d:texture-generation-mode-y::("object" | "parallel" | "sphere"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-kind::("luminance" | "intensity" | "color"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-filter::("enabled" | "disabled"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-mode::("replace" | "modulate" | "blend"))? ;
 style-graphic-properties-attlist ::= (dr3d:ambient-color::color)? (dr3d:emissive-color::color)? (dr3d:specular-color::color)? (dr3d:diffuse-color::color)? ;
 style-graphic-properties-attlist ::= (dr3d:shininess::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:shadow::("visible" | "hidden"))? ;
 style-graphic-properties-attlist ::= common-draw-rel-size-attlist (fo:min-width::(length | percent))? ;
 style-graphic-properties-attlist ::= (fo:min-height::(length | percent))? ;
 style-graphic-properties-attlist ::= (fo:max-height::(length | percent))? (fo:max-width::(length | percent))? ;
 style-graphic-properties-attlist ::= common-horizontal-margin-attlist ;
 style-graphic-properties-attlist ::= common-vertical-margin-attlist ;
 style-graphic-properties-attlist ::= common-margin-attlist ;
 style-graphic-properties-attlist ::= (style:print-content::boolean)? ;
 style-graphic-properties-attlist ::= (style:protect::("none" | (("content" | "position" | "size")+)))? ;
 style-graphic-properties-attlist ::= (style:horizontal-pos::("left" | "center" | "right" | "from-left" | "inside" | "outside" | "from-inside"))? (svg:x::coordinate)? ;
 style-graphic-properties-attlist ::= (style:horizontal-rel::("page" | "page-content" | "page-start-margin" | "page-end-margin" | "frame" | "frame-content" | "frame-start-margin" | "frame-end-margin" | "paragraph" | "paragraph-content" | "paragraph-start-margin" | "paragraph-end-margin" | "char"))? ;
 style-graphic-properties-attlist ::= common-vertical-pos-attlist ;
 style-graphic-properties-attlist ::= common-vertical-rel-attlist ;
 style-graphic-properties-attlist ::= common-text-anchor-attlist ;
 style-graphic-properties-attlist ::= common-border-attlist ;
 style-graphic-properties-attlist ::= common-border-line-width-attlist ;
 style-graphic-properties-attlist ::= common-padding-attlist ;
 style-graphic-properties-attlist ::= common-shadow-attlist ;
 style-graphic-properties-attlist ::= common-background-color-attlist ;
 style-graphic-properties-attlist ::= (style:editable::boolean)? ;
 style-graphic-properties-attlist ::= (style:wrap::("none" | "left" | "right" | "parallel" | "dynamic" | "run-through" | "biggest"))? ;
 style-graphic-properties-attlist ::= (style:wrap-dynamic-threshold::nonNegativeLength)? ;
 style-graphic-properties-attlist ::= (style:number-wrapped-paragraphs::("no-limit" | positiveInteger))? ;
 style-graphic-properties-attlist ::= (style:wrap-contour::boolean)? ;
 style-graphic-properties-attlist ::= (style:wrap-contour-mode::("full" | "outside"))? ;
 style-graphic-properties-attlist ::= (style:run-through::("foreground" | "background"))? ;
 style-graphic-properties-attlist ::= (style:flow-with-text::boolean)? ;
 style-graphic-properties-attlist ::= (style:overflow-behavior::("clip" | "auto-create-new-frame"))? ;
 style-graphic-properties-attlist ::= (style:mirror::("none" | "vertical" | horizontal-mirror | ("vertical" horizontal-mirror) | (horizontal-mirror "vertical")))? ;
 style-graphic-properties-attlist ::= (fo:clip::string)? ;
 style-graphic-properties-attlist ::= (draw:wrap-influence-on-position::("iterative" | "once-concurrent" | "once-successive"))? ;
 style-graphic-properties-attlist ::= common-writing-mode-attlist ;
 style-graphic-properties-attlist ::= (draw:frame-display-scrollbar::boolean)? ;
 style-graphic-properties-attlist ::= (draw:frame-display-border::boolean)? ;
 style-graphic-properties-attlist ::= (draw:frame-margin-horizontal::nonNegativePixelLength)? (draw:frame-margin-vertical::nonNegativePixelLength)? ;
 style-graphic-properties-attlist ::= (draw:visible-area-left::nonNegativeLength)? (draw:visible-area-top::nonNegativeLength)? (draw:visible-area-width::positiveLength)? (draw:visible-area-height::positiveLength)? ;
 style-graphic-properties-attlist ::= (draw:ole-draw-aspect::nonNegativeInteger)? ;
office-font-face-decls ::= (office:font-face-decls::(style-font-face*))? ;
number-era-attlist ::= (number:style::("short" | "long"))? ;
number-percentage-style ::= number:percentage-style::(common-data-style-attlist style-text-properties? number-text? number-and-text? style-map*) ;
text-hidden-text-attlist ::= text:condition::formula ;
 text-hidden-text-attlist ::= text:string-value::string ;
 text-hidden-text-attlist ::= (text:is-hidden::boolean)? ;
table-named-expression-attlist ::= table:name::string table:expression::string (table:base-cell-address::cellAddress)? ;
chart-plot-area-attlist ::= common-draw-position-attlist common-draw-size-attlist ;
 chart-plot-area-attlist ::= (chart:style-name::styleNameRef)? ;
 chart-plot-area-attlist ::= (table:cell-range-address::cellRangeAddress)? ;
 chart-plot-area-attlist ::= (chart:data-source-has-labels::("none" | "row" | "column" | "both"))? ;
 chart-plot-area-attlist ::= dr3d-scene-attlist common-dr3d-transform-attlist ;
script-event-listener-attlist ::= script:event-name::string ;
 script-event-listener-attlist ::= script:language::string ;
 script-event-listener-attlist ::= (script:macro-name::string) | (xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")?) ;
draw-fill-image ::= draw:fill-image::(draw-fill-image-attlist xlink:href::anyURI (xlink:type::"simple")? (xlink:show::"embed")? (xlink:actuate::"onLoad")?) ;
form-formatted-text-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist ;
 form-formatted-text-attlist ::= (form:max-value::string)? ;
 form-formatted-text-attlist ::= (form:min-value::string)? ;
 form-formatted-text-attlist ::= (form:validation::boolean)? ;
draw-param-attlist ::= (draw:name::string())? ;
 draw-param-attlist ::= (draw:value::string())? ;
common-begin-end-timing-attlist ::= (smil:begin::string)? ;
 common-begin-end-timing-attlist ::= (smil:end::string)? ;
common-presentation-effect-attlist ::= draw:shape-id::IDREF ;
 common-presentation-effect-attlist ::= (presentation:effect::presentationEffects)? ;
 common-presentation-effect-attlist ::= (presentation:direction::presentationEffectDirections)? ;
 common-presentation-effect-attlist ::= (presentation:speed::presentationSpeeds)? ;
 common-presentation-effect-attlist ::= (presentation:delay::duration)? ;
 common-presentation-effect-attlist ::= (presentation:start-scale::percent)? ;
 common-presentation-effect-attlist ::= (presentation:path-id::string())? ;
style-columns-attlist ::= fo:column-count::positiveInteger ;
 style-columns-attlist ::= (fo:column-gap::length)? ;
text-a-attlist ::= (office:name::string)? ;
 text-a-attlist ::= (office:title::string)? ;
 text-a-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? ;
 text-a-attlist ::= (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? ;
 text-a-attlist ::= (text:style-name::styleNameRef)? (text:visited-style-name::styleNameRef)? ;
anim-iterate-attlist ::= common-anim-target-attlist ;
 anim-iterate-attlist ::= (anim:iterate-type::string)? ;
 anim-iterate-attlist ::= (anim:iterate-interval::duration)? ;
style-graphic-fill-properties-attlist ::= (draw:fill::("none" | "solid" | "bitmap" | "gradient" | "hatch"))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-color::color)? ;
 style-graphic-fill-properties-attlist ::= (draw:secondary-fill-color::color)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-gradient-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (draw:gradient-step-count::nonNegativeInteger)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-hatch-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-hatch-solid::boolean)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (style:repeat::("no-repeat" | "repeat" | "stretch"))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-width::(length | percent))? (draw:fill-image-height::(length | percent))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-ref-point-x::percent)? (draw:fill-image-ref-point-y::percent)? (draw:fill-image-ref-point::("top-left" | "top" | "top-right" | "left" | "center" | "right" | "bottom-left" | "bottom" | "bottom-right"))? ;
 style-graphic-fill-properties-attlist ::= (draw:tile-repeat-offset::string())? ;
 style-graphic-fill-properties-attlist ::= (draw:opacity::percent)? ;
 style-graphic-fill-properties-attlist ::= (draw:opacity-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (svg:fill-rule::("nonzero" | "evenodd"))? ;
common-draw-rel-size-attlist ::= common-draw-size-attlist (style:rel-width::(percent | "scale" | "scale-min"))? (style:rel-height::(percent | "scale" | "scale-min"))? ;
common-table-template-attlist ::= text:style-name::styleNameRef text:paragraph-style-name::(styleNameRef?) ;
common-current-value-attlist ::= (form:current-value::string)? ;
dr3d-sphere-attlist ::= (dr3d:center::vector3D)? ;
 dr3d-sphere-attlist ::= (dr3d:size::vector3D)? ;
draw-fill-image-attlist ::= draw:name::styleName ;
 draw-fill-image-attlist ::= (draw:display-name::string)? ;
 draw-fill-image-attlist ::= (svg:width::length)? (svg:height::length)? ;
table-content-validation ::= table:content-validation::(table-validation-attlist table-help-message? (table-error-message | (table-error-macro office-event-listeners?))?) ;
table-data-pilot-level ::= table:data-pilot-level::(table-data-pilot-level-attlist table-data-pilot-subtotals? table-data-pilot-members? table-data-pilot-display-info? table-data-pilot-sort-info? table-data-pilot-layout-info?) ;
common-dur-timing-attlist ::= (smil:dur::string)? ;
chart-mean-value-attlist ::= (chart:style-name::styleNameRef)? ;
style-text-properties-attlist ::= (fo:font-variant::fontVariant)? ;
 style-text-properties-attlist ::= (fo:text-transform::("none" | "lowercase" | "uppercase" | "capitalize"))? ;
 style-text-properties-attlist ::= (fo:color::color)? ;
 style-text-properties-attlist ::= (style:use-window-font-color::boolean)? ;
 style-text-properties-attlist ::= (style:text-outline::boolean)? ;
 style-text-properties-attlist ::= (style:text-line-through-type::lineType)? ;
 style-text-properties-attlist ::= (style:text-line-through-style::lineStyle)? ;
 style-text-properties-attlist ::= (style:text-line-through-width::lineWidth)? ;
 style-text-properties-attlist ::= (style:text-line-through-color::("font-color" | color))? ;
 style-text-properties-attlist ::= (style:text-line-through-text::string)? ;
 style-text-properties-attlist ::= (style:text-line-through-text-style::styleNameRef)? ;
 style-text-properties-attlist ::= (style:text-position::(percent | "super" | "sub" percent?))? ;
 style-text-properties-attlist ::= (style:font-name::string)? (style:font-name-asian::string)? (style:font-name-complex::string)? ;
 style-text-properties-attlist ::= (fo:font-family::string)? (style:font-family-asian::string)? (style:font-family-complex::string)? ;
 style-text-properties-attlist ::= (style:font-family-generic::fontFamilyGeneric)? (style:font-family-generic-asian::fontFamilyGeneric)? (style:font-family-generic-complex::fontFamilyGeneric)? ;
 style-text-properties-attlist ::= (style:font-style-name::string)? (style:font-style-name-asian::string)? (style:font-style-name-complex::string)? ;
 style-text-properties-attlist ::= (style:font-pitch::fontPitch)? (style:font-pitch-asian::fontPitch)? (style:font-pitch-complex::fontPitch)? ;
 style-text-properties-attlist ::= (style:font-charset::textEncoding)? (style:font-charset-asian::textEncoding)? (style:font-charset-complex::textEncoding)? ;
 style-text-properties-attlist ::= (fo:font-size::(positiveLength | percent))? (style:font-size-asian::(positiveLength | percent))? (style:font-size-complex::(positiveLength | percent))? ;
 style-text-properties-attlist ::= (style:font-size-rel::length)? (style:font-size-rel-asian::length)? (style:font-size-rel-complex::length)? ;
 style-text-properties-attlist ::= (style:script-type::("latin" | "asian" | "complex" | "ignore"))? ;
 style-text-properties-attlist ::= (fo:letter-spacing::(length | "normal"))? ;
 style-text-properties-attlist ::= (fo:language::languageCode)? (style:language-asian::languageCode)? (style:language-complex::languageCode)? ;
 style-text-properties-attlist ::= (fo:country::countryCode)? (style:country-asian::countryCode)? (style:country-complex::countryCode)? ;
 style-text-properties-attlist ::= (fo:font-style::fontStyle)? (style:font-style-asian::fontStyle)? (style:font-style-complex::fontStyle)? ;
 style-text-properties-attlist ::= (style:font-relief::("none" | "embossed" | "engraved"))? ;
 style-text-properties-attlist ::= (fo:text-shadow::shadowType)? ;
 style-text-properties-attlist ::= (style:text-underline-type::lineType)? ;
 style-text-properties-attlist ::= (style:text-underline-style::lineStyle)? ;
 style-text-properties-attlist ::= (style:text-underline-width::lineWidth)? ;
 style-text-properties-attlist ::= (style:text-underline-color::("font-color" | color))? ;
 style-text-properties-attlist ::= (fo:font-weight::fontWeight)? (style:font-weight-asian::fontWeight)? (style:font-weight-complex::fontWeight)? ;
 style-text-properties-attlist ::= (style:text-underline-mode::lineMode)? ;
 style-text-properties-attlist ::= (style:text-line-through-mode::lineMode)? ;
 style-text-properties-attlist ::= (style:letter-kerning::boolean)? ;
 style-text-properties-attlist ::= (style:text-blinking::boolean)? ;
 style-text-properties-attlist ::= common-background-color-attlist ;
 style-text-properties-attlist ::= (style:text-combine::("none" | "letters" | "lines"))? ;
 style-text-properties-attlist ::= (style:text-combine-start-char::character)? (style:text-combine-end-char::character)? ;
 style-text-properties-attlist ::= (style:text-emphasize::("none" | ("none" | "accent" | "dot" | "circle" | "disc" "above" | "below")))? ;
 style-text-properties-attlist ::= (style:text-scale::percent)? ;
 style-text-properties-attlist ::= (style:text-rotation-angle::integer)? ;
 style-text-properties-attlist ::= (style:text-rotation-scale::("fixed" | "line-height"))? ;
 style-text-properties-attlist ::= (fo:hyphenate::boolean)? ;
 style-text-properties-attlist ::= (fo:hyphenation-remain-char-count::positiveInteger)? ;
 style-text-properties-attlist ::= (fo:hyphenation-push-char-count::positiveInteger)? ;
 style-text-properties-attlist ::= (text:display::"true") | (text:display::"none") | (text:display::"condition" text:condition::"none") | Îµ ;
number-time-style-attlist ::= (number:truncate-on-overflow::boolean)? ;
draw-equation-attlist ::= (draw:name::string)? ;
 draw-equation-attlist ::= (draw:formula::string)? ;
office-dde-source-attlist ::= (office:name::string)? ;
 office-dde-source-attlist ::= (office:conversion-mode::("into-default-style-data-style" | "into-english-number" | "keep-text"))? ;
text-conditional-text-attlist ::= text:condition::formula ;
 text-conditional-text-attlist ::= text:string-value-if-true::string ;
 text-conditional-text-attlist ::= text:string-value-if-false::string ;
 text-conditional-text-attlist ::= (text:current-value::boolean)? ;
text-object-index-source ::= text:object-index-source::(text-object-index-source-attrs text-index-title-template? text-object-index-entry-template?) ;
style-table-column-properties-attlist ::= (style:column-width::positiveLength)? (style:rel-column-width::relativeLength)? ;
 style-table-column-properties-attlist ::= (style:use-optimal-column-width::boolean)? ;
 style-table-column-properties-attlist ::= common-break-attlist ;
office-meta-data ::= meta:generator::string ;
 office-meta-data ::= dc:title::string ;
 office-meta-data ::= dc:description::string ;
 office-meta-data ::= dc:subject::string ;
 office-meta-data ::= meta:keyword::string ;
 office-meta-data ::= meta:initial-creator::string ;
 office-meta-data ::= dc-creator ;
 office-meta-data ::= meta:printed-by::string ;
 office-meta-data ::= meta:creation-date::dateTime ;
 office-meta-data ::= dc-date ;
 office-meta-data ::= meta:print-date::dateTime ;
 office-meta-data ::= meta:template::(xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? (xlink:title::string)? (meta:date::dateTime)?) ;
 office-meta-data ::= meta:auto-reload::((xlink:type::"simple")? (xlink:show::"replace")? (xlink:actuate::"onLoad")? (xlink:href::anyURI)? (meta:delay::duration)?) ;
 office-meta-data ::= meta:hyperlink-behaviour::((office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))?) ;
 office-meta-data ::= dc:language::language ;
 office-meta-data ::= meta:editing-cycles::nonNegativeInteger ;
 office-meta-data ::= meta:editing-duration::duration ;
 office-meta-data ::= meta:document-statistic::((meta:page-count::nonNegativeInteger)? (meta:table-count::nonNegativeInteger)? (meta:draw-count::nonNegativeInteger)? (meta:image-count::nonNegativeInteger)? (meta:ole-object-count::nonNegativeInteger)? (meta:object-count::nonNegativeInteger)? (meta:paragraph-count::nonNegativeInteger)? (meta:word-count::nonNegativeInteger)? (meta:character-count::nonNegativeInteger)? (frame-count::nonNegativeInteger)? (sentence-count::nonNegativeInteger)? (syllable-count::nonNegativeInteger)? (non-whitespace-character-count::nonNegativeInteger)? (meta:row-count::nonNegativeInteger)? (meta:cell-count::nonNegativeInteger)?) ;
 office-meta-data ::= meta:user-defined::(meta:name::string (meta:value-type::"float" double) | (meta:value-type::"date" dateOrDateTime) | (meta:value-type::"time" duration) | (meta:value-type::"boolean" boolean) | (meta:value-type::"string" string) | string()) ;
text-ref-content ::= (text:reference-format::("page" | "chapter" | "direction" | "text"))? ;
form-checkbox-attlist ::= form-control-attlist common-disabled-attlist label common-printable-attlist common-tab-attlist common-title-attlist common-value-attlist common-data-field-attlist common-form-visual-effect-attlist common-form-relative-image-position-attlist ;
 form-checkbox-attlist ::= (form:current-state::states)? ;
 form-checkbox-attlist ::= (form:is-tristate::boolean)? ;
 form-checkbox-attlist ::= (form:state::states)? ;
text-hidden-paragraph-attlist ::= text:condition::formula ;
 text-hidden-paragraph-attlist ::= (text:is-hidden::boolean)? ;
presentation-sound ::= presentation:sound::(presentation-sound-attlist xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? (xlink:show::("new" | "replace"))?) ;
text-list-item-attr ::= (text:start-value::nonNegativeInteger)? ;
selected ::= (form:selected::boolean)? ;
chart-title-attlist ::= (table:cell-range::cellAddress)? ;
 chart-title-attlist ::= common-draw-position-attlist ;
 chart-title-attlist ::= (chart:style-name::styleNameRef)? ;
common-draw-circle-ellipse-attlist ::= (svg:cx::coordinate svg:cy::coordinate)? ;
 common-draw-circle-ellipse-attlist ::= (draw:kind::("full" | "section" | "cut" | "arc"))? ;
 common-draw-circle-ellipse-attlist ::= (draw:start-angle::double)? ;
 common-draw-circle-ellipse-attlist ::= (draw:end-angle::double)? ;
text-page-number-attlist ::= common-field-num-format-attlist common-field-fixed-attlist ;
 text-page-number-attlist ::= (text:page-adjust::integer)? ;
 text-page-number-attlist ::= (text:select-page::("previous" | "current" | "next"))? ;
style-background-image ::= (style:background-image::(style-background-image-attlist common-draw-data-attlist | office-binary-data | Îµ))? ;
dr3d-cube-attlist ::= (dr3d:min-edge::vector3D)? (dr3d:max-edge::vector3D)? ;
form-property-type-and-value-list ::= (office:value-type::"float" (form:list-value::(office:value::double))*) | (office:value-type::"percentage" (form:list-value::(office:value::double))*) | (office:value-type::"currency" (form:list-value::(office:value::double (office:currency::string)?))*) | (office:value-type::"date" (form:list-value::(office:date-value::dateOrDateTime))*) | (office:value-type::"time" (form:list-value::(office:time-value::duration))*) | (office:value-type::"boolean" (form:list-value::(office:boolean-value::boolean))*) | (office:value-type::"string" (form:list-value::(office:string-value::string))*) | (office:value-type::"void") ;
draw-enhanced-geometry-attlist ::= (draw:type::custom-shape-type)? ;
 draw-enhanced-geometry-attlist ::= (svg:viewBox::(integer integer integer integer))? ;
 draw-enhanced-geometry-attlist ::= (draw:mirror-vertical::boolean)? (draw:mirror-horizontal::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-rotate-angle::double)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:concentric-gradient-fill-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-brightness::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-depth::(length double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-diffusion::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-number-of-line-segments::integer)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-light-face::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-harsh::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-harsh::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-level::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-level::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-direction::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-direction::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-metal::boolean)? ;
 draw-enhanced-geometry-attlist ::= (dr3d:shade-mode::("flat" | "phong" | "gouraud" | "draft"))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-rotation-angle::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-rotation-center::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-shininess::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-skew::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-specularity::percent)? ;
 draw-enhanced-geometry-attlist ::= (dr3d:projection::("parallel" | "perspective"))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-viewpoint::point3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-origin::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-color::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:enhanced-path::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:path-stretchpoint-x::double)? (draw:path-stretchpoint-y::double)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-areas::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-points::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-point-type::("none" | "segments" | "rectangle"))? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-point-leaving-directions::string())? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-mode::("normal" | "path" | "shape"))? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-scale::("path" | "shape"))? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-same-letter-heights::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:modifiers::string)? ;
style-presentation-page-layout ::= style:presentation-page-layout::(style:name::styleName (style:display-name::string)? presentation-placeholder*) ;
text-index-entry-page-number ::= text:index-entry-page-number::((text:style-name::styleNameRef)?) ;
style-drop-cap ::= (style:drop-cap::style-drop-cap-attlist)? ;
text-alphabetical-index-auto-mark-file ::= text:alphabetical-index-auto-mark-file::(xlink:href::anyURI (xlink:type::"simple")?) ;
presentation-sound-attlist ::= (presentation:play-full::boolean)? ;
draw-gradient-attlist ::= (draw:start-color::color)? (draw:end-color::color)? ;
 draw-gradient-attlist ::= (draw:start-intensity::percent)? (draw:end-intensity::percent)? ;
style-background-image-attlist ::= (style:repeat::("no-repeat" | "repeat" | "stretch"))? ;
 style-background-image-attlist ::= (style:position::("left" | "center" | "right" | "top" | "bottom" | (horiBackPos vertBackPos) | (vertBackPos horiBackPos)))? ;
 style-background-image-attlist ::= (style:filter-name::string)? ;
 style-background-image-attlist ::= (draw:opacity::percent)? ;
common-writing-mode-attlist ::= (style:writing-mode::("lr-tb" | "rl-tb" | "tb-rl" | "tb-lr" | "lr" | "rl" | "tb" | "page"))? ;
text-illustration-index-source-attrs ::= text-index-scope-attr ;
 text-illustration-index-source-attrs ::= text-relative-tab-stop-position-attr ;
 text-illustration-index-source-attrs ::= (text:use-caption::boolean)? ;
 text-illustration-index-source-attrs ::= (text:caption-sequence-name::string)? ;
 text-illustration-index-source-attrs ::= (text:caption-sequence-format::("text" | "category-and-value" | "caption"))? ;
text-sequence-decl-attlist ::= common-field-name-attlist ;
 text-sequence-decl-attlist ::= text:display-outline-level::nonNegativeInteger ;
 text-sequence-decl-attlist ::= (text:separation-character::character)? ;
svg-font-face-name ::= svg:font-face-name::((svg:name::string())?) ;
bound-column ::= (form:bound-column::string)? ;
xforms-bind-attlist ::= (xforms:bind::string)? ;
style-drop-cap-attlist ::= (style:length::("word" | positiveInteger))? ;
 style-drop-cap-attlist ::= (style:lines::positiveInteger)? ;
 style-drop-cap-attlist ::= (style:distance::length)? ;
 style-drop-cap-attlist ::= (style:style-name::styleNameRef)? ;
table-linked-source-attlist ::= (xlink:type::"simple")? (xlink:actuate::"onRequest")? xlink:href::anyURI ;
 table-linked-source-attlist ::= (table:filter-name::string)? ;
 table-linked-source-attlist ::= (table:filter-options::string)? ;
 table-linked-source-attlist ::= (table:refresh-delay::duration)? ;
text-tracked-changes ::= (text:tracked-changes::(text-tracked-changes-attr text-changed-region*))? ;
text-index-entry-link-end ::= text:index-entry-link-end::((text:style-name::styleNameRef)?) ;
text-outline-level-style ::= text:outline-level-style::(text-outline-level-style-attlist style-list-level-properties? style-text-properties?) ;
number-hours-attlist ::= (number:style::("short" | "long"))? ;
text-list-style-attr ::= style:name::styleName ;
 text-list-style-attr ::= (style:display-name::string)? ;
 text-list-style-attr ::= (text:consecutive-numbering::boolean)? ;
common-presentation-header-footer-attlist ::= (presentation:use-header-name::string)? ;
 common-presentation-header-footer-attlist ::= (presentation:use-footer-name::string)? ;
 common-presentation-header-footer-attlist ::= (presentation:use-date-time-name::string)? ;
table-rows ::= table-table-rows | ((text-soft-page-break? table-table-row)+) ;
sectionAttr ::= (text:style-name::styleNameRef)? ;
 sectionAttr ::= text:name::string ;
 sectionAttr ::= (text:protected::boolean)? ;
 sectionAttr ::= (text:protection-key::string)? ;
office-meta ::= (office:meta::office-meta-content)? ;
draw-opacity-attlist ::= (draw:start::percent)? (draw:end::percent)? ;
style-table-row-properties-attlist ::= (style:row-height::positiveLength)? (style:min-row-height::nonNegativeLength)? ;
 style-table-row-properties-attlist ::= (style:use-optimal-row-height::boolean)? ;
 style-table-row-properties-attlist ::= common-background-color-attlist ;
 style-table-row-properties-attlist ::= common-break-attlist ;
 style-table-row-properties-attlist ::= (fo:keep-together::("auto" | "always"))? ;
common-auto-reorder-attlist ::= (number:automatic-order::boolean)? ;
target-location ::= (xlink:href::anyURI)? ;
current-selected ::= (form:current-selected::boolean)? ;
draw-circle-attlist ::= (svg:r::length)? ;
chart-footer ::= chart:footer::(chart-title-attlist text-p?) ;
text-decls ::= (text:variable-decls::(text-variable-decl*))? (text:sequence-decls::(text-sequence-decl*))? (text:user-field-decls::(text-user-field-decl*))? (text:dde-connection-decls::(text-dde-connection-decl*))? text-alphabetical-index-auto-mark-file? ;
common-stock-marker-attlist ::= (chart:style-name::styleNameRef)? ;
form-number-attlist ::= (form:value::double)? ;
 form-number-attlist ::= (form:current-value::double)? ;
 form-number-attlist ::= (form:min-value::double)? ;
 form-number-attlist ::= (form:max-value::double)? ;
chart-regression-curve-attlist ::= (chart:style-name::styleNameRef)? ;
common-dde-connection-decl-attlist ::= office:dde-application::string ;
 common-dde-connection-decl-attlist ::= office:dde-topic::string ;
 common-dde-connection-decl-attlist ::= office:dde-item::string ;
 common-dde-connection-decl-attlist ::= (office:automatic-update::boolean)? ;
common-value-and-type-attlist ::= (office:value-type::"float" office:value::double) | (office:value-type::"percentage" office:value::double) | (office:value-type::"currency" office:value::double (office:currency::string)?) | (office:value-type::"date" office:date-value::dateOrDateTime) | (office:value-type::"time" office:time-value::duration) | (office:value-type::"boolean" office:boolean-value::boolean) | (office:value-type::"string" (office:string-value::string)?) ;
text-time-attlist ::= common-field-fixed-attlist common-field-data-style-name-attlist ;
 text-time-attlist ::= (text:time-value::timeOrDateTime)? ;
 text-time-attlist ::= (text:time-adjust::duration)? ;
common-number-attlist ::= (number:min-integer-digits::integer)? ;
 common-number-attlist ::= (number:grouping::boolean)? ;
draw-caption ::= draw:caption::(draw-caption-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
common-decimal-places-attlist ::= (number:decimal-places::integer)? ;
table-functions ::= table-named-expressions? table-database-ranges? table-data-pilot-tables? table-consolidation? table-dde-links? ;
form-combobox-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist dropdown common-maxlength-attlist common-printable-attlist common-readonly-attlist size common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist list-source list-source-type ;
 form-combobox-attlist ::= (form:auto-complete::boolean)? ;
common-page-number-attlist ::= (style:page-number::(positiveInteger | "auto"))? ;
text-database-next-attlist ::= common-field-database-table ;
 text-database-next-attlist ::= (text:condition::formula)? ;
common-vertical-rel-attlist ::= (style:vertical-rel::("page" | "page-content" | "frame" | "frame-content" | "paragraph" | "paragraph-content" | "char" | "line" | "baseline" | "text"))? ;
form-listbox-attlist ::= form-control-attlist common-disabled-attlist dropdown common-printable-attlist size common-tab-attlist common-title-attlist bound-column common-data-field-attlist list-source list-source-type ;
 form-listbox-attlist ::= (form:multiple::boolean)? ;
 form-listbox-attlist ::= (form:xforms-list-source::string)? ;
style-table-cell-properties-attlist ::= (style:vertical-align::("top" | "middle" | "bottom" | "automatic"))? ;
 style-table-cell-properties-attlist ::= (style:text-align-source::("fix" | "value-type"))? ;
 style-table-cell-properties-attlist ::= common-style-direction-attlist ;
 style-table-cell-properties-attlist ::= (style:glyph-orientation-vertical::("auto" | "0"))? ;
 style-table-cell-properties-attlist ::= common-shadow-attlist ;
 style-table-cell-properties-attlist ::= common-background-color-attlist ;
 style-table-cell-properties-attlist ::= common-border-attlist ;
 style-table-cell-properties-attlist ::= (style:diagonal-tl-br::string)? (style:diagonal-tl-br-widths::borderWidths)? (style:diagonal-bl-tr::string)? (style:diagonal-bl-tr-widths::borderWidths)? ;
 style-table-cell-properties-attlist ::= common-border-line-width-attlist ;
 style-table-cell-properties-attlist ::= common-padding-attlist ;
 style-table-cell-properties-attlist ::= (fo:wrap-option::("no-wrap" | "wrap"))? ;
 style-table-cell-properties-attlist ::= common-rotation-angle-attlist ;
 style-table-cell-properties-attlist ::= (style:rotation-align::("none" | "bottom" | "top" | "center"))? ;
 style-table-cell-properties-attlist ::= (style:cell-protect::("none" | "hidden-and-protected" | (("protected" | "formula-hidden")+)))? ;
 style-table-cell-properties-attlist ::= (style:print-content::boolean)? ;
 style-table-cell-properties-attlist ::= (style:decimal-places::nonNegativeInteger)? ;
 style-table-cell-properties-attlist ::= (style:repeat-content::boolean)? ;
 style-table-cell-properties-attlist ::= (style:shrink-to-fit::boolean)? ;
draw-ellipse ::= draw:ellipse::(common-draw-circle-ellipse-attlist draw-ellipse-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
common-draw-id-attlist ::= (draw:id::ID)? ;
text-alphabetical-index-mark-attrs ::= (text:key1::string)? (text:key2::string)? ;
 text-alphabetical-index-mark-attrs ::= (text:string-value-phonetic::string)? (text:key1-phonetic::string)? (text:key2-phonetic::string)? ;
 text-alphabetical-index-mark-attrs ::= (text:main-entry::boolean)? ;
chart-floor-attlist ::= (svg:width::length)? ;
 chart-floor-attlist ::= (chart:style-name::styleNameRef)? ;
common-field-display-value-formula-none-attlist ::= (text:display::("value" | "formula" | "none"))? ;
common-repeat-timing-attlist ::= (smil:repeatDur::string)? (smil:repeatCount::(nonNegativeInteger | "indefinite"))? ;
form-value-range-attlist ::= form-control-attlist common-disabled-attlist common-printable-attlist common-tab-attlist common-title-attlist common-value-attlist ;
 form-value-range-attlist ::= (form:max-value::string)? ;
 form-value-range-attlist ::= (form:min-value::string)? ;
 form-value-range-attlist ::= (form:step-size::positiveInteger)? ;
 form-value-range-attlist ::= (form:page-step-size::positiveInteger)? ;
 form-value-range-attlist ::= (form:delay-for-repeat::duration)? ;
 form-value-range-attlist ::= (form:orientation::("horizontal" | "vertical"))? ;
table-database-range ::= table:database-range::(table-database-range-attlist (table-database-source-sql | table-database-source-table | table-database-source-query)? table-filter? table-sort? table-subtotal-rules?) ;
table-decls ::= table-calculation-settings? table-content-validations? table-label-ranges? ;
number-boolean-style ::= number:boolean-style::(common-data-style-attlist style-text-properties? number-text? (number-boolean number-text?)? style-map*) ;
table-error-macro ::= table:error-macro::((table:execute::boolean)?) ;
text-bibliography-source ::= text:bibliography-source::(text-index-title-template? text-bibliography-entry-template*) ;
text-index-scope-attr ::= (text:index-scope::("document" | "chapter"))? ;
text-relative-tab-stop-position-attr ::= (text:relative-tab-stop-position::boolean)? ;
text-sort-key-attlist ::= text:key::("address" | "annote" | "author" | "bibliography-type" | "booktitle" | "chapter" | "custom1" | "custom2" | "custom3" | "custom4" | "custom5" | "edition" | "editor" | "howpublished" | "identifier" | "institution" | "isbn" | "issn" | "journal" | "month" | "note" | "number" | "organizations" | "pages" | "publisher" | "report-type" | "school" | "series" | "title" | "url" | "volume" | "year") (text:sort-ascending::boolean)? ;
number-currency-symbol-attlist ::= (number:language::languageCode)? (number:country::countryCode)? ;
style-list-level-properties-attlist ::= common-text-align ;
 style-list-level-properties-attlist ::= (text:space-before::nonNegativeLength)? ;
 style-list-level-properties-attlist ::= (text:min-label-width::nonNegativeLength)? ;
 style-list-level-properties-attlist ::= (text:min-label-distance::nonNegativeLength)? ;
 style-list-level-properties-attlist ::= (style:font-name::string)? ;
 style-list-level-properties-attlist ::= (fo:width::positiveLength)? (fo:height::positiveLength)? ;
 style-list-level-properties-attlist ::= common-vertical-rel-attlist common-vertical-pos-attlist ;
text-list-level-style-number-attr ::= (text:style-name::styleNameRef)? ;
 text-list-level-style-number-attr ::= common-num-format-attlist common-num-format-prefix-suffix-attlist ;
 text-list-level-style-number-attr ::= (text:display-levels::positiveInteger)? ;
 text-list-level-style-number-attr ::= (text:start-value::positiveInteger)? ;
common-border-attlist ::= (fo:border::string)? (fo:border-top::string)? (fo:border-bottom::string)? (fo:border-left::string)? (fo:border-right::string)? ;
presentation-notes-attlist ::= (style:page-layout-name::styleNameRef)? ;
 presentation-notes-attlist ::= (draw:style-name::styleNameRef)? ;
text-index-entry-span ::= text:index-entry-span::((text:style-name::styleNameRef)? string()) ;
text-date-attlist ::= common-field-fixed-attlist common-field-data-style-name-attlist ;
 text-date-attlist ::= (text:date-value::dateOrDateTime)? ;
 text-date-attlist ::= (text:date-adjust::duration)? ;
text-user-field-decl ::= text:user-field-decl::(common-field-name-attlist common-field-formula-attlist? common-value-and-type-attlist) ;
currency-symbol-and-text ::= number-currency-symbol number-text? ;
table-database-range-attlist ::= (table:name::string)? ;
 table-database-range-attlist ::= (table:is-selection::boolean)? ;
 table-database-range-attlist ::= (table:on-update-keep-styles::boolean)? ;
 table-database-range-attlist ::= (table:on-update-keep-size::boolean)? ;
 table-database-range-attlist ::= (table:has-persistent-data::boolean)? ;
 table-database-range-attlist ::= (table:orientation::("column" | "row"))? ;
 table-database-range-attlist ::= (table:contains-header::boolean)? ;
 table-database-range-attlist ::= (table:display-filter-buttons::boolean)? ;
 table-database-range-attlist ::= table:target-range-address::cellRangeAddress ;
 table-database-range-attlist ::= (table:refresh-delay::boolean)? ;
text-object-index-source-attrs ::= text-index-scope-attr ;
 text-object-index-source-attrs ::= text-relative-tab-stop-position-attr ;
 text-object-index-source-attrs ::= (text:use-spreadsheet-objects::boolean)? ;
 text-object-index-source-attrs ::= (text:use-math-objects::boolean)? ;
 text-object-index-source-attrs ::= (text:use-draw-objects::boolean)? ;
 text-object-index-source-attrs ::= (text:use-chart-objects::boolean)? ;
 text-object-index-source-attrs ::= (text:use-other-objects::boolean)? ;
table-change-track-table-cell-attlist ::= (table:cell-address::cellAddress)? ;
 table-change-track-table-cell-attlist ::= (table:matrix-covered::boolean)? ;
 table-change-track-table-cell-attlist ::= (table:formula::string)? (table:number-matrix-columns-spanned::positiveInteger)? (table:number-matrix-rows-spanned::positiveInteger)? common-value-and-type-attlist? ;
text-database-row-select-attlist ::= common-field-database-table ;
 text-database-row-select-attlist ::= (text:condition::formula)? ;
 text-database-row-select-attlist ::= (text:row-number::nonNegativeInteger)? ;
text-illustration-index-source ::= text:illustration-index-source::(text-illustration-index-source-attrs text-index-title-template? text-illustration-index-entry-template?) ;
number-number-style ::= number:number-style::(common-data-style-attlist style-text-properties? number-text? (any-number number-text?)? style-map*) ;
target-frame ::= (office:target-frame::targetFrameName)? ;
chart-axis ::= chart:axis::(chart-axis-attlist chart-title? chart-categories? chart-grid*) ;
draw-custom-shape ::= draw:custom-shape::(draw-custom-shape-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text draw-enhanced-geometry?) ;
form-form ::= form:form::(common-form-control-attlist form-form-attlist form-properties? office-event-listeners? (controls | form-form)* form-connection-resource?) ;
list-source ::= (form:list-source::string)? ;
common-draw-gradient-attlist ::= (draw:name::styleName)? ;
 common-draw-gradient-attlist ::= (draw:display-name::string)? ;
 common-draw-gradient-attlist ::= draw:style::gradient-style ;
 common-draw-gradient-attlist ::= (draw:cx::percent)? (draw:cy::percent)? ;
 common-draw-gradient-attlist ::= (draw:angle::integer)? ;
 common-draw-gradient-attlist ::= (draw:border::percent)? ;
draw-polyline ::= draw:polyline::(common-draw-points-attlist common-draw-position-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
text-numbered-paragraph ::= text:numbered-paragraph::(text-numbered-paragraph-attr text-number? text-p | text-h) ;
text-list-level-style-bullet-attr ::= (text:style-name::styleNameRef)? ;
 text-list-level-style-bullet-attr ::= text:bullet-char::character ;
 text-list-level-style-bullet-attr ::= common-num-format-prefix-suffix-attlist ;
 text-list-level-style-bullet-attr ::= (text:bullet-relative-size::percent)? ;
form-time-attlist ::= (form:value::time)? ;
 form-time-attlist ::= (form:current-value::time)? ;
 form-time-attlist ::= (form:min-value::time)? ;
 form-time-attlist ::= (form:max-value::time)? ;
anim-transition-filter-attlist ::= smil:type::string ;
 anim-transition-filter-attlist ::= (smil:subtype::string)? ;
 anim-transition-filter-attlist ::= (smil:direction::("forward" | "reverse"))? ;
 anim-transition-filter-attlist ::= (smil:fadeColor::("forward" | "reverse"))? ;
 anim-transition-filter-attlist ::= (smil:mode::("in" | "out"))? ;
common-draw-data-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:show::"embed")? (xlink:actuate::"onLoad")? ;
common-table-change-attlist ::= table:id::string ;
 common-table-change-attlist ::= (table:acceptance-state::("accepted" | "rejected" | "pending"))? ;
 common-table-change-attlist ::= (table:rejecting-change-id::string)? ;
text-index-entry-text ::= text:index-entry-text::((text:style-name::styleNameRef)?) ;
common-field-formula-attlist ::= (text:formula::formula)? ;
chart-axis-attlist ::= chart:dimension::("x" | "y" | "z") ;
 chart-axis-attlist ::= (chart:name::string)? ;
 chart-axis-attlist ::= (chart:style-name::styleNameRef)? ;
table-data-pilot-field ::= table:data-pilot-field::(table-data-pilot-field-attlist table-data-pilot-level? table-data-pilot-field-reference? table-data-pilot-groups?) ;
chart-chart-attlist ::= chart:class::namespacedToken ;
 chart-chart-attlist ::= common-draw-size-attlist ;
 chart-chart-attlist ::= (chart:column-mapping::string)? ;
 chart-chart-attlist ::= (chart:row-mapping::string)? ;
 chart-chart-attlist ::= (chart:style-name::styleNameRef)? ;
text-set-page-variable-attlist ::= (text:active::boolean)? ;
 text-set-page-variable-attlist ::= (text:page-adjust::integer)? ;
draw-custom-shape-attlist ::= (draw:engine::namespacedToken)? ;
 draw-custom-shape-attlist ::= (draw:data::string)? ;
draw-g ::= draw:g::(draw-g-attlist common-draw-z-index-attlist common-draw-name-attlist common-draw-id-attlist common-draw-style-name-attlist common-text-spreadsheet-shape-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* shape*) ;
table-named-range-attlist ::= table:name::string table:cell-range-address::cellRangeAddress (table:base-cell-address::cellAddress)? (table:range-usable-as::("none" | (("print-range" | "filter" | "repeat-row" | "repeat-column")+)))? ;
number-quarter-attlist ::= (number:style::("short" | "long"))? ;
table-filter-condition-attlist ::= table:field-number::nonNegativeInteger ;
 table-filter-condition-attlist ::= table:value::string ;
 table-filter-condition-attlist ::= table:operator::string ;
 table-filter-condition-attlist ::= (table:case-sensitive::string)? ;
 table-filter-condition-attlist ::= (table:data-type::("text" | "number"))? ;
table-previous ::= table:previous::((table:id::string)? table-change-track-table-cell) ;
number-text-style ::= number:text-style::(common-data-style-attlist style-text-properties? number-text? (number-text-content number-text?)* style-map*) ;
office-settings ::= (office:settings::(config-config-item-set+))? ;
table-tracked-changes-attlist ::= (table:track-changes::boolean)? ;
common-num-format-prefix-suffix-attlist ::= (style:num-prefix::string)? (style:num-suffix::string)? ;
dropdown ::= (form:dropdown::boolean)? ;
common-disabled-attlist ::= (form:disabled::boolean)? ;
draw-g-attlist ::= (svg:y::coordinate)? ;
text-list-style-content ::= text:list-level-style-number::(text-list-level-style-attr text-list-level-style-number-attr style-list-level-properties? style-text-properties?) ;
 text-list-style-content ::= text:list-level-style-bullet::(text-list-level-style-attr text-list-level-style-bullet-attr style-list-level-properties? style-text-properties?) ;
 text-list-style-content ::= text:list-level-style-image::(text-list-level-style-attr text-list-level-style-image-attr style-list-level-properties?) ;
table-table-row-attlist ::= (table:number-rows-repeated::positiveInteger)? ;
 table-table-row-attlist ::= (table:style-name::styleNameRef)? ;
 table-table-row-attlist ::= (table:default-cell-style-name::styleNameRef)? ;
 table-table-row-attlist ::= (table:visibility::table-visibility-value)? ;
common-svg-gradient-attlist ::= (svg:gradientUnits::"objectBoundingBox")? (svg:gradientTransform::string)? (svg:spreadMethod::("pad" | "reflect" | "repeat"))? ;
 common-svg-gradient-attlist ::= draw:name::styleName ;
 common-svg-gradient-attlist ::= (draw:display-name::string)? ;
style-page-layout ::= style:page-layout::(style-page-layout-attlist style-page-layout-properties? style-header-style? style-footer-style?) ;
draw-a-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? ;
 draw-a-attlist ::= (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? ;
 draw-a-attlist ::= (office:name::string)? ;
 draw-a-attlist ::= (office:title::string)? ;
 draw-a-attlist ::= (office:server-map::boolean)? ;
office-process-content ::= (office:process-content::boolean)? ;
form-date-attlist ::= (form:value::date)? ;
 form-date-attlist ::= (form:current-value::date)? ;
 form-date-attlist ::= (form:min-value::date)? ;
 form-date-attlist ::= (form:max-value::date)? ;
common-form-relative-image-position-attlist ::= ((form:image-position::"center")?) | (form:image-position::("start" | "end" | "top" | "bottom") (form:image-align::("start" | "center" | "end"))?) ;
office-spreadsheet-content-prelude ::= table-tracked-changes? text-decls table-decls ;
common-draw-area-attlist ::= (xlink:href::anyURI)? (xlink:type::"simple")? (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? ;
 common-draw-area-attlist ::= (office:name::string)? ;
 common-draw-area-attlist ::= (draw:nohref::"nohref")? ;
common-draw-name-attlist ::= (draw:name::string)? ;
size ::= (form:size::nonNegativeInteger)? ;
common-value-attlist ::= (form:value::string)? ;
table-table-attlist ::= (table:name::string)? ;
 table-table-attlist ::= (table:style-name::styleNameRef)? ;
 table-table-attlist ::= (table:protected::boolean)? (table:protection-key::string())? ;
 table-table-attlist ::= (table:print::boolean)? ;
 table-table-attlist ::= (table:print-ranges::cellRangeAddressList)? ;
 table-table-attlist ::= (table:is-sub-table::boolean)? ;
--------------------odf::opendoc-1.1.bgf--------------------
style-footnote-sep-attlist ::= (style:width::length)? (style:rel-width::percent)? (style:color::color)? (style:line-style::lineStyle)? (style:adjustment::("left" | "center" | "right"))? (style:distance-before-sep::length)? (style:distance-after-sep::length)? ;
style-font-face ::= style:font-face::(style-font-face-attlist svg-font-face-src? svg-definition-src?) ;
svg-linearGradient ::= svg:linearGradient::(common-svg-gradient-attlist (svg:x1::(coordinate | percent))? (svg:y1::(coordinate | percent))? (svg:x2::(coordinate | percent))? (svg:y2::(coordinate | percent))? svg-stop*) ;
style-page-layout-attlist ::= style:name::styleName ;
 style-page-layout-attlist ::= (style:page-usage::("all" | "left" | "right" | "mirrored"))? ;
number-currency-style ::= number:currency-style::(common-data-style-attlist common-auto-reorder-attlist style-text-properties? number-text? ((number-and-text currency-symbol-and-text?) | (currency-symbol-and-text number-and-text?))? style-map*) ;
number-fraction-attlist ::= (number:min-numerator-digits::integer)? ;
 number-fraction-attlist ::= (number:min-denominator-digits::integer)? ;
 number-fraction-attlist ::= (number:denominator-value::integer)? ;
text-notes-configuration-content ::= text-note-class ;
 text-notes-configuration-content ::= (text:citation-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:citation-body-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:default-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:master-page-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:start-value::nonNegativeInteger)? ;
 text-notes-configuration-content ::= common-num-format-prefix-suffix-attlist common-num-format-attlist? ;
 text-notes-configuration-content ::= (text:start-numbering-at::("document" | "chapter" | "page"))? ;
 text-notes-configuration-content ::= (text:footnotes-position::("text" | "page" | "section" | "document"))? ;
 text-notes-configuration-content ::= (text:note-continuation-notice-forward::string())? ;
 text-notes-configuration-content ::= (text:note-continuation-notice-backward::string())? ;
style-column-sep-attlist ::= (style:style::("none" | "solid" | "dotted" | "dashed" | "dot-dashed"))? ;
 style-column-sep-attlist ::= style:width::length ;
 style-column-sep-attlist ::= (style:height::percent)? ;
 style-column-sep-attlist ::= (style:vertical-align::("top" | "middle" | "bottom"))? ;
 style-column-sep-attlist ::= (style:color::color)? ;
draw-applet-attlist ::= (draw:code::string())? ;
 draw-applet-attlist ::= (draw:object::string())? ;
 draw-applet-attlist ::= (draw:archive::string())? ;
 draw-applet-attlist ::= (draw:may-script::boolean)? ;
text-list-item-content ::= text-number? (text-p | text-h | text-list | text-soft-page-break)* ;
presentation-hide-shape ::= presentation:hide-shape::(common-presentation-effect-attlist presentation-sound?) ;
common-title-attlist ::= (form:title::string())? ;
common-form-control-attlist ::= (form:name::string)? ;
 common-form-control-attlist ::= (form:control-implementation::namespacedToken)? ;
common-svg-font-face-xlink-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? ;
table-data-pilot-table-attlist ::= table:name::string ;
 table-data-pilot-table-attlist ::= (table:application-data::string)? ;
 table-data-pilot-table-attlist ::= (table:grand-total::("none" | "row" | "column" | "both"))? ;
 table-data-pilot-table-attlist ::= (table:ignore-empty-rows::boolean)? ;
 table-data-pilot-table-attlist ::= (table:identify-categories::boolean)? ;
 table-data-pilot-table-attlist ::= table:target-range-address::cellRangeAddress ;
 table-data-pilot-table-attlist ::= (table:buttons::cellRangeAddressList)? ;
 table-data-pilot-table-attlist ::= (table:show-filter-button::boolean)? ;
 table-data-pilot-table-attlist ::= (table:drill-down-on-double-click::boolean)? ;
presentation-hide-text ::= presentation:hide-text::(common-presentation-effect-attlist presentation-sound?) ;
draw-area-polygon ::= draw:area-polygon::(common-draw-area-attlist svg:x::coordinate svg:y::coordinate svg:width::length svg:height::length common-draw-viewbox-attlist common-draw-points-attlist svg-title? svg-desc? office-event-listeners?) ;
table-deletion-attlist ::= table:type::("row" | "column" | "table") ;
 table-deletion-attlist ::= table:position::integer ;
 table-deletion-attlist ::= (table:table::integer)? ;
 table-deletion-attlist ::= (table:multi-deletion-spanned::integer)? ;
office-forms ::= (office:forms::(office-forms-attlist (form-form | xforms-model)*))? ;
common-restart-timing-attlist ::= (smil:restart::("never" | "always" | "whenNotActive" | "default"))? ;
common-maxlength-attlist ::= (form:max-length::nonNegativeInteger)? ;
draw-object-attlist ::= (draw:notify-on-update-of-ranges::string)? ;
common-rotation-angle-attlist ::= (style:rotation-angle::nonNegativeInteger)? ;
draw-area-rectangle ::= draw:area-rectangle::(common-draw-area-attlist svg:x::coordinate svg:y::coordinate svg:width::length svg:height::length svg-title? svg-desc? office-event-listeners?) ;
table-table-rows ::= table:table-rows::((text-soft-page-break? table-table-row)+) ;
number-date-style ::= number:date-style::(common-data-style-attlist common-auto-reorder-attlist common-format-source-attlist style-text-properties? number-text? (any-date number-text?)+ style-map*) ;
common-readonly-attlist ::= (form:readonly::boolean)? ;
draw-marker-attlist ::= draw:name::styleName ;
 draw-marker-attlist ::= (draw:display-name::string)? ;
draw-measure ::= draw:measure::(draw-measure-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
table-table-cell-attlist-extra ::= (table:number-columns-spanned::positiveInteger)? (table:number-rows-spanned::positiveInteger)? ;
 table-table-cell-attlist-extra ::= (table:number-matrix-columns-spanned::positiveInteger)? (table:number-matrix-rows-spanned::positiveInteger)? ;
draw-control ::= draw:control::(draw-control-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? draw-glue-point*) ;
common-text-spreadsheet-shape-attlist ::= (table:end-cell-address::cellAddress)? (table:end-x::coordinate)? (table:end-y::coordinate)? ;
 common-text-spreadsheet-shape-attlist ::= (table:table-background::boolean)? ;
 common-text-spreadsheet-shape-attlist ::= common-text-anchor-attlist ;
text-sequence-ref-content ::= (text:reference-format::("page" | "chapter" | "direction" | "text" | "category-and-value" | "caption" | "value"))? ;
common-draw-text-style-name-attlist ::= (draw:text-style-name::styleNameRef)? ;
style-graphic-properties-elements ::= Îµ ;
 style-graphic-properties-elements ::= text-list-style? ;
 style-graphic-properties-elements ::= style-background-image ;
 style-graphic-properties-elements ::= style-columns ;
office-forms-attlist ::= (form:automatic-focus::boolean)? ;
 office-forms-attlist ::= (form:apply-design-mode::boolean)? ;
common-style-header-footer-attlist ::= (style:display::boolean)? ;
draw-plugin-attlist ::= (draw:mime-type::string())? ;
table-movement ::= table:movement::(common-table-change-attlist table-source-range-address table-target-range-address office-change-info table-dependencies? table-deletions?) ;
svg-stop ::= svg:stop::(svg:offset::(double | percent) (svg:stop-color::color)? (svg:stop-opacity::double)?) ;
table-validation-attlist ::= table:name::string ;
 table-validation-attlist ::= (table:condition::string)? ;
 table-validation-attlist ::= (table:base-cell-address::cellAddress)? ;
 table-validation-attlist ::= (table:allow-empty-cell::boolean)? ;
 table-validation-attlist ::= (table:display-list::("none" | "unsorted" | "sort-ascending"))? ;
draw-page-thumbnail-attlist ::= (draw:page-number::positiveInteger)? ;
text-tab-attr ::= (text:tab-ref::nonNegativeInteger)? ;
style-tab-stop-attlist ::= style:position::nonNegativeLength ;
 style-tab-stop-attlist ::= ((style:type::("left" | "center" | "right"))?) | (style:type::"char" style-tab-stop-char-attlist) ;
 style-tab-stop-attlist ::= (style:leader-type::lineType)? ;
 style-tab-stop-attlist ::= (style:leader-style::lineStyle)? ;
 style-tab-stop-attlist ::= (style:leader-width::lineWidth)? ;
 style-tab-stop-attlist ::= (style:leader-color::("font-color" | color))? ;
 style-tab-stop-attlist ::= (style:leader-text::string)? ;
 style-tab-stop-attlist ::= (style:leader-text-style::styleNameRef)? ;
text-h ::= text:h::(heading-attrs paragraph-attrs text-number? paragraph-content*) ;
text-style-name ::= (form:text-style-name::styleNameRef)? ;
table-table-column-attlist ::= (table:number-columns-repeated::positiveInteger)? ;
 table-table-column-attlist ::= (table:style-name::styleNameRef)? ;
 table-table-column-attlist ::= (table:visibility::table-visibility-value)? ;
 table-table-column-attlist ::= (table:default-cell-style-name::styleNameRef)? ;
text-table-of-content-source ::= text:table-of-content-source::(text-table-of-content-source-attlist text-index-title-template? text-table-of-content-entry-template* text-index-source-styles*) ;
table-source-cell-range ::= table:source-cell-range::(table-source-cell-range-attlist table-filter?) ;
text-index-entry-tab-stop-attrs ::= (style:leader-char::character)? ;
 text-index-entry-tab-stop-attrs ::= (style:type::"right") | (style:type::"left" style:position::length) ;
draw-handle-attlist ::= (draw:handle-mirror-vertical::boolean)? ;
 draw-handle-attlist ::= (draw:handle-mirror-horizontal::boolean)? ;
 draw-handle-attlist ::= (draw:handle-switched::boolean)? ;
 draw-handle-attlist ::= draw:handle-position::string ;
 draw-handle-attlist ::= (draw:handle-range-x-minimum::string)? ;
 draw-handle-attlist ::= (draw:handle-range-x-maximum::string)? ;
 draw-handle-attlist ::= (draw:handle-range-y-minimum::string)? ;
 draw-handle-attlist ::= (draw:handle-range-y-maximum::string)? ;
 draw-handle-attlist ::= (draw:handle-polar::string)? ;
 draw-handle-attlist ::= (draw:handle-radius-range-minimum::string)? ;
 draw-handle-attlist ::= (draw:handle-radius-range-maximum::string)? ;
common-field-database-table-attlist ::= text:table-name::string ;
 common-field-database-table-attlist ::= (text:table-type::("table" | "query" | "command"))? ;
common-margin-attlist ::= (fo:margin::(nonNegativeLength | percent))? ;
style-columns ::= (style:columns::(style-columns-attlist style-column-sep? style-column*))? ;
common-spline-anim-value-attlist ::= (smil:keyTimes::string)? ;
 common-spline-anim-value-attlist ::= (smil:keySplines::string)? ;
common-draw-layer-name-attlist ::= (draw:layer::string())? ;
draw-rect-attlist ::= (draw:corner-radius::nonNegativeLength)? ;
table-calculation-setting-attlist ::= (table:case-sensitive::boolean)? ;
 table-calculation-setting-attlist ::= (table:precision-as-shown::boolean)? ;
 table-calculation-setting-attlist ::= (table:search-criteria-must-apply-to-whole-cell::boolean)? ;
 table-calculation-setting-attlist ::= (table:automatic-find-labels::boolean)? ;
 table-calculation-setting-attlist ::= (table:use-regular-expressions::boolean)? ;
 table-calculation-setting-attlist ::= (table:null-year::positiveInteger)? ;
table-subtotal-rules-attlist ::= (table:bind-styles-to-content::boolean)? ;
 table-subtotal-rules-attlist ::= (table:case-sensitive::boolean)? ;
 table-subtotal-rules-attlist ::= (table:page-breaks-on-group-change::boolean)? ;
common-field-display-value-formula-attlist ::= (text:display::("value" | "formula"))? ;
text-table-of-content-source-attlist ::= (text:outline-level::positiveInteger)? ;
 text-table-of-content-source-attlist ::= (text:use-outline-level::boolean)? ;
 text-table-of-content-source-attlist ::= (text:use-index-marks::boolean)? ;
 text-table-of-content-source-attlist ::= (text:use-index-source-styles::boolean)? ;
 text-table-of-content-source-attlist ::= (text:index-scope::("document" | "chapter"))? ;
 text-table-of-content-source-attlist ::= (text:relative-tab-stop-position::boolean)? ;
number-time-style ::= number:time-style::(number-time-style-attlist common-data-style-attlist common-format-source-attlist style-text-properties? number-text? (any-time number-text?)+ style-map*) ;
draw-object-ole-attlist ::= (draw:class-id::string())? ;
text-table-index-source ::= text:table-index-source::(text-illustration-index-source-attrs text-index-title-template? text-table-index-entry-template?) ;
office-automatic-styles ::= (office:automatic-styles::(styles style-page-layout*))? ;
draw-polygon ::= draw:polygon::(common-draw-points-attlist common-draw-position-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
anim-animate-color-attlist ::= (anim:color-interpolation::("rgb" | "hsl"))? ;
 anim-animate-color-attlist ::= (anim:color-interpolation-direction::("clockwise" | "counter-clockwise"))? ;
style-section-properties-attlist ::= common-background-color-attlist ;
 style-section-properties-attlist ::= common-horizontal-margin-attlist ;
 style-section-properties-attlist ::= (style:protect::boolean)? ;
 style-section-properties-attlist ::= (text:dont-balance-text-columns::boolean)? ;
 style-section-properties-attlist ::= common-writing-mode-attlist ;
chart-title ::= chart:title::(chart-title-attlist text-p?) ;
common-tab-attlist ::= (form:tab-index::nonNegativeInteger)? ;
 common-tab-attlist ::= (form:tab-stop::boolean)? ;
common-anim-attlist ::= (presentation:node-type::("default" | "on-click" | "with-previous" | "after-previous" | "timing-root" | "main-sequence" | "interactive-sequence"))? ;
 common-anim-attlist ::= (presentation:preset-id::string)? ;
 common-anim-attlist ::= (presentation:preset-sub-type::string)? ;
 common-anim-attlist ::= (presentation:preset-class::("custom" | "entrance" | "exit" | "emphasis" | "motion-path" | "ole-action" | "media-call"))? ;
 common-anim-attlist ::= (presentation:master-element::IDREF)? ;
 common-anim-attlist ::= (presentation:group-id::string)? ;
 common-anim-attlist ::= (anim:id::ID)? ;
draw-frame ::= draw:frame::(common-draw-shape-with-text-and-styles-attlist common-draw-position-attlist common-draw-rel-size-attlist common-draw-caption-id-attlist presentation-shape-attlist draw-frame-attlist (draw-text-box | draw-image | draw-object | draw-object-ole | draw-applet | draw-floating-frame | draw-plugin)* office-event-listeners? draw-glue-point* draw-image-map? svg-title? svg-desc? (draw-contour-polygon | draw-contour-path)?) ;
common-form-control-content ::= form-properties? office-event-listeners? ;
table-scenario-attlist ::= table:scenario-ranges::cellRangeAddressList ;
 table-scenario-attlist ::= table:is-active::boolean ;
 table-scenario-attlist ::= (table:display-border::boolean)? ;
 table-scenario-attlist ::= (table:border-color::color)? ;
 table-scenario-attlist ::= (table:copy-back::boolean)? ;
 table-scenario-attlist ::= (table:copy-styles::boolean)? ;
 table-scenario-attlist ::= (table:copy-formulas::boolean)? ;
 table-scenario-attlist ::= (table:comment::string)? ;
 table-scenario-attlist ::= (table:protected::boolean)? ;
table-iteration ::= table:iteration::((table:status::("enable" | "disable"))? (table:steps::positiveInteger)? (table:maximum-difference::double)?) ;
table-data-pilot-level-attlist ::= (table:show-empty::boolean)? ;
style-footer-style ::= style:footer-style::(style-header-footer-properties?) ;
common-draw-caption-id-attlist ::= (draw:caption-id::IDREF)? ;
presentation-event-listener ::= presentation:event-listener::(presentation-event-listener-attlist presentation-sound?) ;
text-outline-level ::= (text:outline-level::positiveInteger)? ;
common-background-color-attlist ::= (fo:background-color::("transparent" | color))? ;
text-user-index-source ::= text:user-index-source::(text-user-index-source-attr text-index-title-template? text-user-index-entry-template* text-index-source-styles*) ;
text-index-entry-chapter ::= text:index-entry-chapter::((text:style-name::styleNameRef)? text-index-entry-chapter-attrs) ;
draw-frame-attlist ::= (draw:copy-of::string)? ;
common-restart-default-attlist ::= (smil:restartDefault::("never" | "always" | "whenNotActive" | "inherit"))? ;
chart-domain ::= chart:domain::((table:cell-range-address::cellRangeAddress)?) ;
office-text-attlist ::= (text:global::boolean)? ;
 office-text-attlist ::= (text:use-soft-page-breaks::boolean)? ;
common-break-attlist ::= (fo:break-before::("auto" | "column" | "page"))? (fo:break-after::("auto" | "column" | "page"))? ;
text-file-name-attlist ::= (text:display::("full" | "path" | "name" | "name-and-extension"))? ;
 text-file-name-attlist ::= common-field-fixed-attlist ;
chart-error-indicator-attlist ::= (chart:style-name::styleNameRef)? ;
presentation-event-listener-attlist ::= script:event-name::string ;
 presentation-event-listener-attlist ::= presentation:action::("none" | "previous-page" | "next-page" | "first-page" | "last-page" | "hide" | "stop" | "execute" | "show" | "verb" | "fade-out" | "sound") ;
 presentation-event-listener-attlist ::= (presentation:effect::presentationEffects)? ;
 presentation-event-listener-attlist ::= (presentation:direction::presentationEffectDirections)? ;
 presentation-event-listener-attlist ::= (presentation:speed::presentationSpeeds)? ;
 presentation-event-listener-attlist ::= (presentation:start-scale::percent)? ;
 presentation-event-listener-attlist ::= (xlink:href::anyURI)? (xlink:type::"simple")? (xlink:show::"embed")? (xlink:actuate::"onRequest")? ;
 presentation-event-listener-attlist ::= (presentation:verb::nonNegativeInteger)? ;
common-fill-default-attlist ::= (smil:fillDefault::("remove" | "freeze" | "hold" | "transition" | "auto" | "inherit"))? ;
table-table-source-attlist ::= (table:mode::("copy-all" | "copy-results-only"))? ;
 table-table-source-attlist ::= (table:table-name::string)? ;
common-form-visual-effect-attlist ::= (form:visual-effect::("flat" | "3d"))? ;
draw-layer ::= draw:layer::(draw-layer-attlist svg-title? svg-desc?) ;
common-text-align ::= (fo:text-align::("start" | "end" | "left" | "right" | "center" | "justify"))? ;
header-footer-content ::= (text-tracked-changes text-decls (text-h | text-p | text-list | table-table | text-section | text-table-of-content | text-illustration-index | text-table-index | text-object-index | text-user-index | text-alphabetical-index | text-bibliography | text-index-title | change-marks)*) | (style-region-left? style-region-center? style-region-right?) ;
style-style-attlist ::= style:name::styleName ;
 style-style-attlist ::= (style:display-name::string)? ;
 style-style-attlist ::= (style:parent-style-name::styleNameRef)? ;
 style-style-attlist ::= (style:next-style-name::styleNameRef)? ;
 style-style-attlist ::= (style:list-style-name::(styleName | Îµ))? ;
 style-style-attlist ::= (style:master-page-name::styleNameRef)? ;
 style-style-attlist ::= (style:auto-update::boolean)? ;
 style-style-attlist ::= (style:data-style-name::styleNameRef)? ;
 style-style-attlist ::= (style:class::string)? ;
 style-style-attlist ::= (style:default-outline-level::positiveInteger)? ;
style-page-layout-properties-attlist ::= (fo:page-width::length)? (fo:page-height::length)? ;
 style-page-layout-properties-attlist ::= common-num-format-attlist? common-num-format-prefix-suffix-attlist ;
 style-page-layout-properties-attlist ::= (style:paper-tray-name::("default" | string))? ;
 style-page-layout-properties-attlist ::= (style:print-orientation::("portrait" | "landscape"))? ;
 style-page-layout-properties-attlist ::= common-horizontal-margin-attlist common-vertical-margin-attlist common-margin-attlist ;
 style-page-layout-properties-attlist ::= common-border-attlist ;
 style-page-layout-properties-attlist ::= common-border-line-width-attlist ;
 style-page-layout-properties-attlist ::= common-padding-attlist ;
 style-page-layout-properties-attlist ::= common-shadow-attlist ;
 style-page-layout-properties-attlist ::= common-background-color-attlist ;
 style-page-layout-properties-attlist ::= (style:register-truth-ref-style-name::styleNameRef)? ;
 style-page-layout-properties-attlist ::= (style:print::(("headers" | "grid" | "annotations" | "objects" | "charts" | "drawings" | "formulas" | "zero-values")*))? ;
 style-page-layout-properties-attlist ::= (style:print-page-order::("ttb" | "ltr"))? ;
 style-page-layout-properties-attlist ::= (style:first-page-number::(positiveInteger | "continue"))? ;
 style-page-layout-properties-attlist ::= (style:scale-to::percent)? (style:scale-to-pages::positiveInteger)? ;
 style-page-layout-properties-attlist ::= (style:table-centering::("horizontal" | "vertical" | "both" | "none"))? ;
 style-page-layout-properties-attlist ::= (style:footnote-max-height::length)? ;
 style-page-layout-properties-attlist ::= common-writing-mode-attlist ;
 style-page-layout-properties-attlist ::= (style:layout-grid-mode::("none" | "line" | "both"))? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-base-height::length)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-ruby-height::length)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-lines::positiveInteger)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-color::color)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-ruby-below::boolean)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-print::boolean)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-display::boolean)? ;
draw-text-box-attlist ::= (draw:chain-next-name::string)? ;
 draw-text-box-attlist ::= (draw:corner-radius::nonNegativeLength)? ;
 draw-text-box-attlist ::= (fo:min-height::(length | percent))? (fo:min-width::(length | percent))? ;
 draw-text-box-attlist ::= (fo:max-height::(length | percent))? (fo:max-width::(length | percent))? ;
 draw-text-box-attlist ::= text-id? ;
draw-image-attlist ::= (draw:filter-name::string)? ;
table-error-message ::= table:error-message::((table:title::string)? (table:display::boolean)? (table:message-type::("stop" | "warning" | "information"))? text-p*) ;
paragraph-attrs ::= (text:style-name::styleNameRef)? (text:class-names::styleNameRefs)? (text:cond-style-name::styleNameRef)? ;
 paragraph-attrs ::= text-id? ;
table-columns-no-group ::= (table-columns (table-table-header-columns table-columns?)?) | (table-table-header-columns table-columns?) ;
form-fixed-text-attlist ::= form-control-attlist for common-disabled-attlist label common-printable-attlist common-title-attlist ;
 form-fixed-text-attlist ::= (form:multi-line::boolean)? ;
draw-floating-frame-attlist ::= (draw:frame-name::string)? ;
style-paragraph-properties-attlist ::= (fo:line-height::("normal" | nonNegativeLength | percent))? ;
 style-paragraph-properties-attlist ::= (style:line-height-at-least::nonNegativeLength)? ;
 style-paragraph-properties-attlist ::= (style:line-spacing::length)? ;
 style-paragraph-properties-attlist ::= (style:font-independent-line-spacing::boolean)? ;
 style-paragraph-properties-attlist ::= common-text-align ;
 style-paragraph-properties-attlist ::= (fo:text-align-last::("start" | "center" | "justify"))? ;
 style-paragraph-properties-attlist ::= (style:justify-single-word::boolean)? ;
 style-paragraph-properties-attlist ::= (fo:keep-together::("auto" | "always"))? ;
 style-paragraph-properties-attlist ::= (fo:widows::nonNegativeInteger)? ;
 style-paragraph-properties-attlist ::= (fo:orphans::nonNegativeInteger)? ;
 style-paragraph-properties-attlist ::= (style:tab-stop-distance::nonNegativeLength)? ;
 style-paragraph-properties-attlist ::= (fo:hyphenation-keep::("auto" | "page"))? ;
 style-paragraph-properties-attlist ::= (fo:hyphenation-ladder-count::("no-limit" | positiveInteger))? ;
 style-paragraph-properties-attlist ::= (style:register-true::boolean)? ;
 style-paragraph-properties-attlist ::= common-horizontal-margin-attlist ;
 style-paragraph-properties-attlist ::= (fo:text-indent::(length | percent))? ;
 style-paragraph-properties-attlist ::= (style:auto-text-indent::boolean)? ;
 style-paragraph-properties-attlist ::= common-vertical-margin-attlist ;
 style-paragraph-properties-attlist ::= common-margin-attlist ;
 style-paragraph-properties-attlist ::= common-break-attlist ;
 style-paragraph-properties-attlist ::= common-background-color-attlist ;
 style-paragraph-properties-attlist ::= common-border-attlist ;
 style-paragraph-properties-attlist ::= common-border-line-width-attlist ;
 style-paragraph-properties-attlist ::= common-padding-attlist ;
 style-paragraph-properties-attlist ::= common-shadow-attlist ;
 style-paragraph-properties-attlist ::= common-keep-with-next-attlist ;
 style-paragraph-properties-attlist ::= (text:number-lines::boolean)? ;
 style-paragraph-properties-attlist ::= (text:line-number::nonNegativeInteger)? ;
 style-paragraph-properties-attlist ::= (style:text-autospace::("none" | "ideograph-alpha"))? ;
 style-paragraph-properties-attlist ::= (style:punctuation-wrap::("simple" | "hanging"))? ;
 style-paragraph-properties-attlist ::= (style:line-break::("normal" | "strict"))? ;
 style-paragraph-properties-attlist ::= (style:vertical-align::("top" | "middle" | "bottom" | "auto" | "baseline"))? ;
 style-paragraph-properties-attlist ::= common-writing-mode-attlist ;
 style-paragraph-properties-attlist ::= (style:writing-mode-automatic::boolean)? ;
 style-paragraph-properties-attlist ::= (style:snap-to-layout-grid::boolean)? ;
 style-paragraph-properties-attlist ::= common-page-number-attlist ;
 style-paragraph-properties-attlist ::= (style:background-transparency::percent)? ;
table-table-row-group-attlist ::= (table:display::boolean)? ;
draw-regular-polygon ::= draw:regular-polygon::(draw-regular-polygon-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
style-drawing-page-properties-elements ::= presentation-sound? ;
common-border-line-width-attlist ::= (style:border-line-width::borderWidths)? (style:border-line-width-top::borderWidths)? (style:border-line-width-bottom::borderWidths)? (style:border-line-width-left::borderWidths)? (style:border-line-width-right::borderWidths)? ;
common-draw-size-attlist ::= (svg:width::length)? (svg:height::length)? ;
draw-layer-attlist ::= draw:name::string ;
 draw-layer-attlist ::= (draw:protected::boolean)? ;
 draw-layer-attlist ::= (draw:display::("always" | "screen" | "printer" | "none"))? ;
draw-circle ::= draw:circle::(draw-circle-attlist common-draw-circle-ellipse-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
table-table-template ::= table:table-template::(table-table-template-attlist table-first-row? table-last-row? table-first-column? table-last-column? table-body | (table-even-rows table-odd-rows) | (table-even-columns table-odd-columns)) ;
draw-page ::= draw:page::(common-presentation-header-footer-attlist draw-page-attlist office-forms? shape* (presentation-animations | animation-element)? presentation-notes?) ;
form-password-attlist ::= form-control-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist ;
 form-password-attlist ::= (form:echo-char::character)? ;
presentation-settings ::= (presentation:settings::(presentation-settings-attlist presentation-show*))? ;
common-style-direction-attlist ::= (style:direction::("ltr" | "ttb"))? ;
text-sequence-ref-name ::= (text:ref-name::string)? ;
table-insertion ::= table:insertion::(table-insertion-attlist common-table-change-attlist office-change-info table-dependencies? table-deletions?) ;
text-outline-level-style-attlist ::= text:level::positiveInteger ;
 text-outline-level-style-attlist ::= (text:style-name::styleNameRef)? ;
 text-outline-level-style-attlist ::= common-num-format-attlist common-num-format-prefix-suffix-attlist ;
 text-outline-level-style-attlist ::= (text:display-levels::positiveInteger)? ;
 text-outline-level-style-attlist ::= (text:start-value::positiveInteger)? ;
common-anim-values-attlist ::= (smil:values::string)? ;
 common-anim-values-attlist ::= (anim:formula::string)? ;
 common-anim-values-attlist ::= common-anim-set-values-attlist (smil:from::string)? (smil:by::string)? ;
chart-categories ::= chart:categories::((table:cell-range-address::cellRangeAddress)?) ;
draw-page-attlist ::= (draw:name::string)? ;
 draw-page-attlist ::= (draw:style-name::styleNameRef)? ;
 draw-page-attlist ::= draw:master-page-name::styleNameRef ;
 draw-page-attlist ::= (presentation:presentation-page-layout-name::styleNameRef)? ;
 draw-page-attlist ::= (draw:id::ID)? ;
 draw-page-attlist ::= (draw:nav-order::IDREFS)? ;
draw-hatch-attlist ::= draw:name::styleName ;
 draw-hatch-attlist ::= (draw:display-name::string)? ;
 draw-hatch-attlist ::= draw:style::("single" | "double" | "triple") ;
 draw-hatch-attlist ::= (draw:color::color)? ;
 draw-hatch-attlist ::= (draw:distance::length)? ;
 draw-hatch-attlist ::= (draw:rotation::integer)? ;
presentation-settings-attlist ::= (presentation:start-page::string)? ;
 presentation-settings-attlist ::= (presentation:show::string)? ;
 presentation-settings-attlist ::= (presentation:full-screen::boolean)? ;
 presentation-settings-attlist ::= (presentation:endless::boolean)? ;
 presentation-settings-attlist ::= (presentation:pause::duration)? ;
 presentation-settings-attlist ::= (presentation:show-logo::boolean)? ;
 presentation-settings-attlist ::= (presentation:force-manual::boolean)? ;
 presentation-settings-attlist ::= (presentation:mouse-visible::boolean)? ;
 presentation-settings-attlist ::= (presentation:mouse-as-pen::boolean)? ;
 presentation-settings-attlist ::= (presentation:start-with-navigator::boolean)? ;
 presentation-settings-attlist ::= (presentation:animations::("enabled" | "disabled"))? ;
 presentation-settings-attlist ::= (presentation:transition-on-click::("enabled" | "disabled"))? ;
 presentation-settings-attlist ::= (presentation:stay-on-top::boolean)? ;
 presentation-settings-attlist ::= (presentation:show-end-of-presentation-slide::boolean)? ;
number-day-of-week-attlist ::= (number:style::("short" | "long"))? ;
number-and-text ::= number-number number-text? ;
common-keep-with-next-attlist ::= (fo:keep-with-next::("auto" | "always"))? ;
common-text-anchor-attlist ::= (text:anchor-type::("page" | "frame" | "paragraph" | "char" | "as-char"))? ;
 common-text-anchor-attlist ::= (text:anchor-page-number::positiveInteger)? ;
common-field-num-format-attlist ::= common-num-format-attlist? ;
presentation-show-shape ::= presentation:show-shape::(common-presentation-effect-attlist presentation-sound?) ;
table-insertion-attlist ::= table:type::("row" | "column" | "table") ;
 table-insertion-attlist ::= table:position::integer ;
 table-insertion-attlist ::= (table:count::positiveInteger)? ;
 table-insertion-attlist ::= (table:table::integer)? ;
office-document-common-attrs ::= (office:version::string)? ;
common-draw-style-name-attlist ::= ((draw:style-name::styleNameRef)? (draw:class-names::styleNameRefs)?) | ((presentation:style-name::styleNameRef)? (presentation:class-names::styleNameRefs)?) ;
table-consolidation-attlist ::= table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string) ;
 table-consolidation-attlist ::= table:source-cell-range-addresses::cellRangeAddressList ;
 table-consolidation-attlist ::= table:target-cell-address::cellAddress ;
 table-consolidation-attlist ::= (table:use-labels::("none" | "row" | "column" | "both"))? ;
 table-consolidation-attlist ::= (table:link-to-source-data::boolean)? ;
style-tab-stops ::= (style:tab-stops::(style-tab-stop*))? ;
text-bibliography-configuration-attlist ::= (text:prefix::string)? (text:suffix::string)? ;
 text-bibliography-configuration-attlist ::= (text:numbered-entries::boolean)? ;
 text-bibliography-configuration-attlist ::= (text:sort-by-position::boolean)? (fo:language::languageCode)? (fo:country::countryCode)? (text:sort-algorithm::string)? ;
style-data-style-attlist ::= (style:display-name::string)? ;
office-master-styles ::= (office:master-styles::(style-master-page* style-handout-master? draw-layer-set?))? ;
table-table-header-rows ::= table:table-header-rows::((text-soft-page-break? table-table-row)+) ;
dr3d-light-attlist ::= (dr3d:diffuse-color::color)? ;
 dr3d-light-attlist ::= dr3d:direction::vector3D ;
 dr3d-light-attlist ::= (dr3d:enabled::boolean)? ;
 dr3d-light-attlist ::= (dr3d:specular::boolean)? ;
style-drawing-page-properties-attlist ::= (presentation:transition-type::("manual" | "automatic" | "semi-automatic"))? ;
 style-drawing-page-properties-attlist ::= (presentation:transition-style::("none" | "fade-from-left" | "fade-from-top" | "fade-from-right" | "fade-from-bottom" | "fade-from-upperleft" | "fade-from-upperright" | "fade-from-lowerleft" | "fade-from-lowerright" | "move-from-left" | "move-from-top" | "move-from-right" | "move-from-bottom" | "move-from-upperleft" | "move-from-upperright" | "move-from-lowerleft" | "move-from-lowerright" | "uncover-to-left" | "uncover-to-top" | "uncover-to-right" | "uncover-to-bottom" | "uncover-to-upperleft" | "uncover-to-upperright" | "uncover-to-lowerleft" | "uncover-to-lowerright" | "fade-to-center" | "fade-from-center" | "vertical-stripes" | "horizontal-stripes" | "clockwise" | "counterclockwise" | "open-vertical" | "open-horizontal" | "close-vertical" | "close-horizontal" | "wavyline-from-left" | "wavyline-from-top" | "wavyline-from-right" | "wavyline-from-bottom" | "spiralin-left" | "spiralin-right" | "spiralout-left" | "spiralout-right" | "roll-from-top" | "roll-from-left" | "roll-from-right" | "roll-from-bottom" | "stretch-from-left" | "stretch-from-top" | "stretch-from-right" | "stretch-from-bottom" | "vertical-lines" | "horizontal-lines" | "dissolve" | "random" | "vertical-checkerboard" | "horizontal-checkerboard" | "interlocking-horizontal-left" | "interlocking-horizontal-right" | "interlocking-vertical-top" | "interlocking-vertical-bottom" | "fly-away" | "open" | "close" | "melt"))? ;
 style-drawing-page-properties-attlist ::= (presentation:transition-speed::presentationSpeeds)? ;
 style-drawing-page-properties-attlist ::= (smil:subtype::string)? ;
 style-drawing-page-properties-attlist ::= (smil:direction::("forward" | "reverse"))? ;
 style-drawing-page-properties-attlist ::= (smil:fadeColor::color)? ;
 style-drawing-page-properties-attlist ::= (presentation:duration::duration)? ;
 style-drawing-page-properties-attlist ::= (presentation:visibility::("visible" | "hidden"))? ;
 style-drawing-page-properties-attlist ::= (draw:background-size::("full" | "border"))? ;
 style-drawing-page-properties-attlist ::= (presentation:background-objects-visible::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:background-visible::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:display-header::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:display-footer::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:display-page-number::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:display-date-time::boolean)? ;
 style-drawing-page-properties-attlist ::= (smil:type::string)? ;
table-sort-groups-attlist ::= (table:data-type::("text" | "number" | "automatic" | string))? ;
 table-sort-groups-attlist ::= (table:order::("ascending" | "descending"))? ;
presentation-dim ::= presentation:dim::(presentation-dim-attlist presentation-sound?) ;
table-table-cell-attlist ::= (table:number-columns-repeated::positiveInteger)? ;
 table-table-cell-attlist ::= (table:style-name::styleNameRef)? ;
 table-table-cell-attlist ::= (table:content-validation-name::string)? ;
 table-table-cell-attlist ::= (table:formula::string)? ;
 table-table-cell-attlist ::= common-value-and-type-attlist? ;
 table-table-cell-attlist ::= (table:protect::boolean)? ;
anim-animate-motion-attlist ::= (svg:path::pathData)? ;
 anim-animate-motion-attlist ::= (svg:origin::string)? ;
 anim-animate-motion-attlist ::= (smil:calcMode::("discrete" | "linear" | "paced" | "spline"))? ;
presentation-date-time-decl-attlist ::= presentation:name::string ;
 presentation-date-time-decl-attlist ::= presentation:source::("fixed" | "current-date") ;
 presentation-date-time-decl-attlist ::= (style:data-style-name::styleNameRef)? ;
text-template-name-attlist ::= (text:display::("full" | "path" | "name" | "name-and-extension" | "area" | "title"))? ;
draw-caption-attlist ::= (draw:caption-point-x::coordinate draw:caption-point-y::coordinate)? ;
 draw-caption-attlist ::= (draw:corner-radius::nonNegativeLength)? ;
number-minutes-attlist ::= (number:style::("short" | "long"))? ;
form-button-attlist ::= form-control-attlist button-type common-disabled-attlist label image-data common-printable-attlist common-tab-attlist target-frame target-location common-title-attlist common-value-attlist common-form-relative-image-position-attlist ;
 form-button-attlist ::= (form:default-button::boolean)? ;
 form-button-attlist ::= (form:toggle::boolean)? ;
 form-button-attlist ::= (form:focus-on-click::boolean)? ;
 form-button-attlist ::= (form:xforms-submission::string)? ;
table-change-deletion ::= table:change-deletion::((table:id::string)?) ;
chart-wall-attlist ::= (svg:width::length)? ;
 chart-wall-attlist ::= (chart:style-name::styleNameRef)? ;
text-index-title-template ::= text:index-title-template::((text:style-name::styleNameRef)? string()) ;
table-filter-attlist ::= (table:target-range-address::cellRangeAddress)? ;
 table-filter-attlist ::= (table:condition-source::("self" | "cell-range"))? ;
 table-filter-attlist ::= (table:condition-source-range-address::cellRangeAddress)? ;
 table-filter-attlist ::= (table:display-duplicates::boolean)? ;
draw-ellipse-attlist ::= (svg:rx::length svg:ry::length)? ;
common-field-display-value-none-attlist ::= (text:display::("value" | "none"))? ;
chart-series ::= chart:series::(chart-series-attlist chart-domain* chart-mean-value? chart-regression-curve? chart-error-indicator? chart-data-point*) ;
table-calculation-settings ::= table:calculation-settings::(table-calculation-setting-attlist table-null-date? table-iteration?) ;
text-index-entry-link-start ::= text:index-entry-link-start::((text:style-name::styleNameRef)?) ;
table-data-pilot-member-attlist ::= table:name::string ;
 table-data-pilot-member-attlist ::= (table:display::boolean)? ;
 table-data-pilot-member-attlist ::= (table:show-details::boolean)? ;
common-convert-empty-attlist ::= (form:convert-empty-to-null::boolean)? ;
style-style-content ::= style:family::"text" style-text-properties? ;
 style-style-content ::= style:family::"paragraph" style-paragraph-properties? style-text-properties? ;
 style-style-content ::= style:family::"section" style-section-properties? ;
 style-style-content ::= style:family::"ruby" style-ruby-properties? ;
 style-style-content ::= style:family::"table" style-table-properties? ;
 style-style-content ::= style:family::"table-column" style-table-column-properties? ;
 style-style-content ::= style:family::"table-row" style-table-row-properties? ;
 style-style-content ::= style:family::"table-cell" style-table-cell-properties? style-paragraph-properties? style-text-properties? ;
 style-style-content ::= style:family::("graphic" | "presentation") style-graphic-properties? style-paragraph-properties? style-text-properties? ;
 style-style-content ::= style:family::"drawing-page" style-drawing-page-properties? ;
 style-style-content ::= style:family::"chart" style-chart-properties? style-graphic-properties? style-paragraph-properties? style-text-properties? ;
common-format-source-attlist ::= (number:format-source::("fixed" | "language"))? ;
number-number-attlist ::= (number:decimal-replacement::string())? ;
 number-number-attlist ::= (number:display-factor::double)? ;
text-list ::= text:list::(text-list-attr text-list-header? text-list-item*) ;
common-anim-set-values-attlist ::= (smil:to::string)? ;
common-field-description-attlist ::= (text:description::string())? ;
chart-series-attlist ::= (chart:values-cell-range-address::cellRangeAddress)? ;
 chart-series-attlist ::= (chart:label-cell-address::cellAddress)? ;
 chart-series-attlist ::= (chart:class::namespacedToken)? ;
 chart-series-attlist ::= (chart:attached-axis::string)? ;
 chart-series-attlist ::= (chart:style-name::styleNameRef)? ;
table-table-column-group-attlist ::= (table:display::boolean)? ;
common-draw-transform-attlist ::= (draw:transform::string)? ;
common-shadow-attlist ::= (style:shadow::shadowType)? ;
number-year-attlist ::= (number:style::("short" | "long"))? ;
svg-font-face-format ::= svg:font-face-format::((svg:string::string())?) ;
style-map-attlist ::= style:condition::string ;
 style-map-attlist ::= style:apply-style-name::styleNameRef ;
 style-map-attlist ::= (style:base-cell-address::cellAddress)? ;
text-index-entry-tab-stop ::= text:index-entry-tab-stop::((text:style-name::styleNameRef)? text-index-entry-tab-stop-attrs) ;
chart-chart ::= chart:chart::(chart-chart-attlist chart-title? chart-subtitle? chart-footer? chart-legend? chart-plot-area table-table?) ;
table-sort-attlist ::= (table:bind-styles-to-content::boolean)? ;
 table-sort-attlist ::= (table:target-range-address::cellRangeAddress)? ;
 table-sort-attlist ::= (table:case-sensitive::boolean)? ;
 table-sort-attlist ::= (table:language::languageCode)? ;
 table-sort-attlist ::= (table:country::countryCode)? ;
 table-sort-attlist ::= (table:algorithm::string)? ;
office-spreadsheet-attlist ::= (table:structure-protected::boolean)? (table:protection-key::string)? ;
common-data-field-attlist ::= (form:data-field::string)? ;
table-rows-no-group ::= (table-rows (table-table-header-rows table-rows?)?) | (table-table-header-rows table-rows?) ;
common-field-database-name ::= (text:database-name::string)? ;
 common-field-database-name ::= form-connection-resource ;
chart-subtitle ::= chart:subtitle::(chart-title-attlist text-p?) ;
common-draw-position-attlist ::= (svg:x::coordinate)? (svg:y::coordinate)? ;
common-padding-attlist ::= (fo:padding::nonNegativeLength)? (fo:padding-top::nonNegativeLength)? (fo:padding-bottom::nonNegativeLength)? (fo:padding-left::nonNegativeLength)? (fo:padding-right::nonNegativeLength)? ;
table-database-source-sql-attlist ::= table:database-name::string ;
 table-database-source-sql-attlist ::= table:sql-statement::string ;
 table-database-source-sql-attlist ::= (table:parse-sql-statement::boolean)? ;
style-table-properties-attlist ::= (style:width::positiveLength)? (style:rel-width::percent)? ;
 style-table-properties-attlist ::= (table:align::("left" | "center" | "right" | "margins"))? ;
 style-table-properties-attlist ::= common-horizontal-margin-attlist ;
 style-table-properties-attlist ::= common-vertical-margin-attlist ;
 style-table-properties-attlist ::= common-margin-attlist ;
 style-table-properties-attlist ::= common-page-number-attlist ;
 style-table-properties-attlist ::= common-break-attlist ;
 style-table-properties-attlist ::= common-background-color-attlist ;
 style-table-properties-attlist ::= common-shadow-attlist ;
 style-table-properties-attlist ::= common-keep-with-next-attlist ;
 style-table-properties-attlist ::= (style:may-break-between-rows::boolean)? ;
 style-table-properties-attlist ::= (table:border-model::("collapsing" | "separating"))? ;
 style-table-properties-attlist ::= common-writing-mode-attlist ;
 style-table-properties-attlist ::= (table:display::boolean)? ;
presentation-shape-attlist ::= (presentation:class::presentation-classes)? ;
 presentation-shape-attlist ::= (presentation:placeholder::boolean)? ;
 presentation-shape-attlist ::= (presentation:user-transformed::boolean)? ;
text-alphabetical-index-source-attrs ::= text-index-scope-attr text-relative-tab-stop-position-attr ;
 text-alphabetical-index-source-attrs ::= (text:ignore-case::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:main-entry-style-name::styleNameRef)? ;
 text-alphabetical-index-source-attrs ::= (text:alphabetical-separators::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:combine-entries::boolean)? (text:combine-entries-with-dash::boolean)? (text:combine-entries-with-pp::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:use-keys-as-entries::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:capitalize-entries::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:comma-separated::boolean)? ;
 text-alphabetical-index-source-attrs ::= (fo:language::languageCode)? ;
 text-alphabetical-index-source-attrs ::= (fo:country::countryCode)? ;
 text-alphabetical-index-source-attrs ::= (text:sort-algorithm::string)? ;
text-list-attr ::= (text:style-name::styleNameRef)? ;
 text-list-attr ::= (text:continue-numbering::boolean)? ;
form-form-attlist ::= (xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")?)? ;
 form-form-attlist ::= (office:target-frame::targetFrameName)? ;
 form-form-attlist ::= (form:method::("get" | "post" | string))? ;
 form-form-attlist ::= (form:enctype::string)? ;
 form-form-attlist ::= (form:allow-deletes::boolean)? ;
 form-form-attlist ::= (form:allow-inserts::boolean)? ;
 form-form-attlist ::= (form:allow-updates::boolean)? ;
 form-form-attlist ::= (form:apply-filter::boolean)? ;
 form-form-attlist ::= (form:command-type::("table" | "query" | "command"))? ;
 form-form-attlist ::= (form:command::string())? ;
 form-form-attlist ::= (form:datasource::(anyURI | string))? ;
 form-form-attlist ::= (form:master-fields::string)? ;
 form-form-attlist ::= (form:detail-fields::string)? ;
 form-form-attlist ::= (form:escape-processing::boolean)? ;
 form-form-attlist ::= (form:filter::string)? ;
 form-form-attlist ::= (form:ignore-result::boolean)? ;
 form-form-attlist ::= (form:navigation-mode::navigation)? ;
 form-form-attlist ::= (form:order::string)? ;
 form-form-attlist ::= (form:tab-cycle::tab-cycles)? ;
text-tracked-changes-attr ::= (text:track-changes::boolean)? ;
table-help-message ::= table:help-message::((table:title::string)? (table:display::boolean)? text-p*) ;
paragraph-content ::= string() ;
 paragraph-content ::= text:s::((text:c::nonNegativeInteger)?) ;
 paragraph-content ::= text:tab::text-tab-attr ;
 paragraph-content ::= text:line-break::Îµ ;
 paragraph-content ::= text-soft-page-break ;
 paragraph-content ::= text:span::((text:style-name::styleNameRef)? (text:class-names::styleNameRefs)? paragraph-content*) ;
 paragraph-content ::= text:a::(text-a-attlist office-event-listeners? paragraph-content*) ;
 paragraph-content ::= (text:bookmark::(text:name::string)) | (text:bookmark-start::(text:name::string)) | (text:bookmark-end::(text:name::string)) ;
 paragraph-content ::= text:reference-mark::(text:name::string) ;
 paragraph-content ::= (text:reference-mark-start::(text:name::string)) | (text:reference-mark-end::(text:name::string)) ;
 paragraph-content ::= text:note::(text-note-class (text:id::string)? text:note-citation::((text:label::string)? string()) text:note-body::(text-content*)) ;
 paragraph-content ::= text:ruby::((text:style-name::styleNameRef)? text:ruby-base::paragraph-content text:ruby-text::((text:style-name::styleNameRef)? string())) ;
 paragraph-content ::= office-annotation ;
 paragraph-content ::= change-marks ;
 paragraph-content ::= shape | draw-a ;
 paragraph-content ::= text:date::(text-date-attlist string()) ;
 paragraph-content ::= text:time::(text-time-attlist string()) ;
 paragraph-content ::= text:page-number::(text-page-number-attlist string()) ;
 paragraph-content ::= text:page-continuation::(text-page-continuation-attlist string()) ;
 paragraph-content ::= text:sender-firstname::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-lastname::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-initials::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-title::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-position::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-email::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-phone-private::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-fax::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-company::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-phone-work::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-street::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-city::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-postal-code::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-country::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-state-or-province::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:author-name::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:author-initials::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:chapter::(text-chapter-attlist string()) ;
 paragraph-content ::= text:file-name::(text-file-name-attlist string()) ;
 paragraph-content ::= text:template-name::(text-template-name-attlist string()) ;
 paragraph-content ::= text:sheet-name::string() ;
 paragraph-content ::= text:variable-set::(common-field-name-attlist common-field-formula-attlist common-value-and-type-attlist common-field-display-value-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:variable-get::(common-field-name-attlist common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:variable-input::(common-field-name-attlist common-field-description-attlist common-value-type-attlist common-field-display-value-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:user-field-get::(common-field-name-attlist common-field-display-value-formula-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:user-field-input::(common-field-name-attlist common-field-description-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:sequence::(common-field-name-attlist common-field-formula-attlist common-field-num-format-attlist text-sequence-ref-name string()) ;
 paragraph-content ::= text:expression::(common-field-formula-attlist common-value-and-type-attlist? common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:text-input::(common-field-description-attlist string()) ;
 paragraph-content ::= text:initial-creator::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:creation-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::dateOrDateTime)? string()) ;
 paragraph-content ::= text:creation-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::timeOrDateTime)? string()) ;
 paragraph-content ::= text:description::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:user-defined::(common-field-fixed-attlist text:name::string common-field-data-style-name-attlist (office:value::double)? (office:date-value::dateOrDateTime)? (office:time-value::duration)? (office:boolean-value::boolean)? (office:string-value::string)? string()) ;
 paragraph-content ::= text:print-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::time)? string()) ;
 paragraph-content ::= text:print-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::date)? string()) ;
 paragraph-content ::= text:printed-by::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:title::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:subject::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:keywords::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:editing-cycles::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:editing-duration::(common-field-fixed-attlist common-field-data-style-name-attlist (text:duration::duration)? string()) ;
 paragraph-content ::= text:modification-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::time)? string()) ;
 paragraph-content ::= text:modification-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::date)? string()) ;
 paragraph-content ::= text:creator::(common-field-fixed-attlist string()) ;
 paragraph-content ::= (text:page-count::(common-field-num-format-attlist string())) | (text:paragraph-count::(common-field-num-format-attlist string())) | (text:word-count::(common-field-num-format-attlist string())) | (text:character-count::(common-field-num-format-attlist string())) | (text:table-count::(common-field-num-format-attlist string())) | (text:image-count::(common-field-num-format-attlist string())) | (text:object-count::(common-field-num-format-attlist string())) ;
 paragraph-content ::= text:database-display::(text-database-display-attlist string()) ;
 paragraph-content ::= text:database-next::text-database-next-attlist ;
 paragraph-content ::= text:database-row-select::text-database-row-select-attlist ;
 paragraph-content ::= text:database-row-number::(common-field-database-table common-field-num-format-attlist (text:value::nonNegativeInteger)? string()) ;
 paragraph-content ::= text:database-name::(common-field-database-table string()) ;
 paragraph-content ::= text:page-variable-set::(text-set-page-variable-attlist string()) ;
 paragraph-content ::= text:page-variable-get::(text-get-page-variable-attlist string()) ;
 paragraph-content ::= text:placeholder::(text-placeholder-attlist string()) ;
 paragraph-content ::= text:conditional-text::(text-conditional-text-attlist string()) ;
 paragraph-content ::= text:hidden-text::(text-hidden-text-attlist string()) ;
 paragraph-content ::= (text:reference-ref::(text-common-ref-content text-ref-content)) | (text:bookmark-ref::(text-common-ref-content text-ref-content)) ;
 paragraph-content ::= text:note-ref::(text-common-ref-content text-note-ref-content text-ref-content) ;
 paragraph-content ::= text:sequence-ref::(text-common-ref-content text-sequence-ref-content) ;
 paragraph-content ::= text:script::((xlink:href::anyURI (xlink:type::"simple")?) | string() (script:language::string)?) ;
 paragraph-content ::= text:execute-macro::((text:name::string)? office-event-listeners? string()) ;
 paragraph-content ::= text:hidden-paragraph::(text-hidden-paragraph-attlist string()) ;
 paragraph-content ::= text:dde-connection::(text:connection-name::string string()) ;
 paragraph-content ::= text:measure::(text:kind::("value" | "unit" | "gap") string()) ;
 paragraph-content ::= text:table-formula::(common-field-formula-attlist common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:toc-mark-start::text-toc-mark-start-attrs ;
 paragraph-content ::= text:toc-mark-end::text-id ;
 paragraph-content ::= text:toc-mark::(text:string-value::string text-outline-level) ;
 paragraph-content ::= text:user-index-mark-start::(text-id text-outline-level text-index-name) ;
 paragraph-content ::= text:user-index-mark-end::(text-id text-outline-level) ;
 paragraph-content ::= text:user-index-mark::(text:string-value::string text-outline-level text-index-name) ;
 paragraph-content ::= text:alphabetical-index-mark-start::(text-id text-alphabetical-index-mark-attrs) ;
 paragraph-content ::= text:alphabetical-index-mark-end::text-id ;
 paragraph-content ::= text:alphabetical-index-mark::(text:string-value::string text-alphabetical-index-mark-attrs) ;
 paragraph-content ::= text:bibliography-mark::(text:bibliography-type::text-bibliography-types ((text:identifier::string) | (text:address::string) | (text:annote::string) | (text:author::string) | (text:booktitle::string) | (text:chapter::string) | (text:edition::string) | (text:editor::string) | (text:howpublished::string) | (text:institution::string) | (text:journal::string) | (text:month::string) | (text:note::string) | (text:number::string) | (text:organizations::string) | (text:pages::string) | (text:publisher::string) | (text:school::string) | (text:series::string) | (text:title::string) | (text:report-type::string) | (text:volume::string) | (text:year::string) | (text:url::string) | (text:custom1::string) | (text:custom2::string) | (text:custom3::string) | (text:custom4::string) | (text:custom5::string) | (text:isbn::string) | (text:issn::string))* string()) ;
 paragraph-content ::= presentation:header::Îµ ;
 paragraph-content ::= presentation:footer::Îµ ;
 paragraph-content ::= presentation:date-time::Îµ ;
config-config-item-map-entry-attlist ::= (config:name::string)? ;
common-printable-attlist ::= (form:printable::boolean)? ;
heading-attrs ::= text:outline-level::positiveInteger ;
 heading-attrs ::= (text:restart-numbering::boolean)? ;
 heading-attrs ::= (text:start-value::nonNegativeInteger)? ;
 heading-attrs ::= (text:is-list-header::boolean)? ;
common-time-manip-attlist ::= (smil:accelerate::double)? ;
 common-time-manip-attlist ::= (smil:decelerate::double)? ;
 common-time-manip-attlist ::= (smil:autoReverse::boolean)? ;
common-endsync-timing-attlist ::= (smil:endsync::("first" | "last" | "all" | "media"))? ;
text-numbered-paragraph-attr ::= (text:level::positiveInteger)? ;
 text-numbered-paragraph-attr ::= text-list-attr ;
 text-numbered-paragraph-attr ::= text-list-item-attr ;
draw-glue-point-attlist ::= draw:id::nonNegativeInteger ;
 draw-glue-point-attlist ::= svg:x::(distance | percent) svg:y::(distance | percent) ;
 draw-glue-point-attlist ::= (draw:align::("top-left" | "top" | "top-right" | "left" | "center" | "right" | "bottom-left" | "bottom-right"))? ;
table-data-pilot-field-attlist ::= table:source-field-name::string ;
 table-data-pilot-field-attlist ::= (table:orientation::("row" | "column" | "data" | "hidden")) | (table:orientation::"page" table:selected-page::string) ;
 table-data-pilot-field-attlist ::= (table:is-data-layout-field::string)? ;
 table-data-pilot-field-attlist ::= (table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string))? ;
 table-data-pilot-field-attlist ::= (table:used-hierarchy::integer)? ;
office-styles ::= (office:styles::(styles style-default-style* text-outline-style? text-notes-configuration* text-bibliography-configuration? text-linenumbering-configuration? draw-gradient* svg-linearGradient* svg-radialGradient* draw-hatch* draw-fill-image* draw-marker* draw-stroke-dash* draw-opacity* style-presentation-page-layout*))? ;
common-vertical-pos-attlist ::= (style:vertical-pos::("top" | "middle" | "bottom" | "from-top" | "below"))? (svg:y::coordinate)? ;
style-chart-properties-attlist ::= (chart:scale-text::boolean)? ;
 style-chart-properties-attlist ::= (chart:three-dimensional::boolean)? ;
 style-chart-properties-attlist ::= (chart:deep::boolean)? ;
 style-chart-properties-attlist ::= (chart:symbol-type::"none") | (chart:symbol-type::"automatic") | (chart:symbol-type::"named-symbol" chart:symbol-name::("square" | "diamond" | "arrow-down" | "arrow-up" | "arrow-right" | "arrow-left" | "bow-tie" | "hourglass" | "circle" | "star" | "x" | "plus" | "asterisk" | "horizontal-bar" | "vertical-bar")) | (chart:symbol-type::"image" chart:symbol-image::(xlink:href::anyURI)) | Îµ ;
 style-chart-properties-attlist ::= (chart:symbol-width::nonNegativeLength)? (chart:symbol-height::nonNegativeLength)? ;
 style-chart-properties-attlist ::= (chart:vertical::boolean)? ;
 style-chart-properties-attlist ::= (chart:connect-bars::boolean)? ;
 style-chart-properties-attlist ::= (chart:gap-width::integer)? (chart:overlap::integer)? ;
 style-chart-properties-attlist ::= (chart:japanese-candle-stick::boolean)? ;
 style-chart-properties-attlist ::= (chart:interpolation::("none" | "cubic-spline" | "b-spline"))? (chart:spline-order::positiveInteger)? (chart:spline-resolution::positiveInteger)? ;
 style-chart-properties-attlist ::= (chart:pie-offset::nonNegativeInteger)? ;
 style-chart-properties-attlist ::= (chart:lines::boolean)? ;
 style-chart-properties-attlist ::= (chart:solid-type::("cuboid" | "cylinder" | "cone" | "pyramid"))? ;
 style-chart-properties-attlist ::= (chart:stacked::boolean)? (chart:percentage::boolean)? ;
 style-chart-properties-attlist ::= (chart:link-data-style-to-source::boolean)? ;
 style-chart-properties-attlist ::= (chart:visible::boolean)? ;
 style-chart-properties-attlist ::= (chart:logarithmic::boolean)? ;
 style-chart-properties-attlist ::= (chart:maximum::double)? (chart:minimum::double)? (chart:origin::double)? (chart:interval-major::double)? (chart:interval-minor-divisor::positiveInteger)? ;
 style-chart-properties-attlist ::= (chart:tick-marks-major-inner::boolean)? (chart:tick-marks-major-outer::boolean)? (chart:tick-marks-minor-inner::boolean)? (chart:tick-marks-minor-outer::boolean)? ;
 style-chart-properties-attlist ::= (chart:display-label::boolean)? (chart:text-overlap::boolean)? (text:line-break::boolean)? (chart:label-arrangement::("side-by-side" | "stagger-even" | "stagger-odd"))? ;
 style-chart-properties-attlist ::= common-style-direction-attlist ;
 style-chart-properties-attlist ::= common-rotation-angle-attlist ;
 style-chart-properties-attlist ::= (chart:data-label-number::("none" | "value" | "percentage"))? ;
 style-chart-properties-attlist ::= (chart:data-label-text::boolean)? ;
 style-chart-properties-attlist ::= (chart:data-label-symbol::boolean)? ;
 style-chart-properties-attlist ::= (chart:mean-value::boolean)? ;
 style-chart-properties-attlist ::= (chart:error-category::("none" | "variance" | "standard-deviation" | "percentage" | "error-margin" | "constant"))? ;
 style-chart-properties-attlist ::= (chart:error-percentage::double)? ;
 style-chart-properties-attlist ::= (chart:error-margin::double)? ;
 style-chart-properties-attlist ::= (chart:error-lower-limit::double)? (chart:error-upper-limit::double)? ;
 style-chart-properties-attlist ::= (chart:error-upper-indicator::boolean)? (chart:error-lower-indicator::boolean)? ;
 style-chart-properties-attlist ::= (chart:series-source::("columns" | "rows"))? ;
 style-chart-properties-attlist ::= (chart:regression-type::("none" | "linear" | "logarithmic" | "exponential" | "power"))? ;
table-table ::= table:table::(table-table-attlist table-table-source? office-dde-source? table-scenario? office-forms? table-shapes? table-columns-and-groups table-rows-and-groups) ;
text-linenumbering-configuration ::= text:linenumbering-configuration::(text-linenumbering-configuration-attlist text-linenumbering-separator?) ;
draw-path ::= draw:path::(common-draw-path-data-attlist common-draw-position-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
style-footnote-sep ::= (style:footnote-sep::style-footnote-sep-attlist)? ;
style-header-style ::= style:header-style::(style-header-footer-properties?) ;
anim-audio-attlist ::= (xlink:href::anyURI)? ;
 anim-audio-attlist ::= (anim:audio-level::double)? ;
table-table-cell-content ::= table-cell-range-source? office-annotation? table-detective? text-content* ;
number-day-attlist ::= (number:style::("short" | "long"))? ;
presentation-show-text ::= presentation:show-text::(common-presentation-effect-attlist presentation-sound?) ;
common-horizontal-margin-attlist ::= (fo:margin-left::(length | percent))? (fo:margin-right::(length | percent))? ;
text-page-continuation-attlist ::= text:select-page::("previous" | "next") ;
 text-page-continuation-attlist ::= (text:string-value::string)? ;
draw-area-circle ::= draw:area-circle::(common-draw-area-attlist svg:cx::coordinate svg:cy::coordinate svg:r::length svg-title? svg-desc? office-event-listeners?) ;
text-user-index-source-attr ::= text-index-scope-attr text-relative-tab-stop-position-attr text:index-name::string ;
 text-user-index-source-attr ::= (text:use-index-marks::boolean)? (text:use-graphics::boolean)? (text:use-tables::boolean)? (text:use-floating-frames::boolean)? (text:use-objects::boolean)? ;
 text-user-index-source-attr ::= (text:copy-outline-levels::boolean)? ;
common-anim-add-accum-attlist ::= (smil:accumulate::("none" | "sum"))? ;
 common-anim-add-accum-attlist ::= (smil:additive::("replace" | "sum"))? ;
draw-connector ::= draw:connector::(draw-connector-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
anyElements ::= (string()? anyAttListOrElements string()?)* ;
draw-applet ::= draw:applet::(draw-applet-attlist common-draw-data-attlist? draw-param*) ;
text-linenumbering-configuration-attlist ::= (text:number-lines::boolean)? ;
 text-linenumbering-configuration-attlist ::= common-num-format-attlist? ;
 text-linenumbering-configuration-attlist ::= (text:style-name::styleNameRef)? ;
 text-linenumbering-configuration-attlist ::= (text:increment::nonNegativeInteger)? ;
 text-linenumbering-configuration-attlist ::= (text:number-position::("left" | "right" | "inner" | "outer"))? ;
 text-linenumbering-configuration-attlist ::= (text:offset::nonNegativeLength)? ;
 text-linenumbering-configuration-attlist ::= (text:count-empty-lines::boolean)? ;
 text-linenumbering-configuration-attlist ::= (text:count-in-text-boxes::boolean)? ;
 text-linenumbering-configuration-attlist ::= (text:restart-on-page::boolean)? ;
style-master-page ::= style:master-page::(style-master-page-attlist (style-header style-header-left?)? (style-footer style-footer-left?)? office-forms? style-style* shape* presentation-notes?) ;
style-handout-master-attlist ::= (presentation:presentation-page-layout-name::styleNameRef)? ;
 style-handout-master-attlist ::= style:page-layout-name::styleNameRef ;
 style-handout-master-attlist ::= (draw:style-name::styleNameRef)? ;
text-linenumbering-separator ::= text:linenumbering-separator::((text:increment::nonNegativeInteger)? string()) ;
list-source-type ::= (form:list-source-type::("table" | "query" | "sql" | "sql-pass-through" | "value-list" | "table-fields"))? ;
text-common-ref-content ::= string() ;
 text-common-ref-content ::= (text:ref-name::string)? ;
office-script ::= office:script::(office-script-attlist string()? anyElements string()?) ;
presentation-play-attlist ::= draw:shape-id::IDREF (presentation:speed::presentationSpeeds)? ;
svg-radialGradient ::= svg:radialGradient::(common-svg-gradient-attlist (svg:cx::(coordinate | percent))? (svg:cy::(coordinate | percent))? (svg:r::(coordinate | percent))? (svg:fx::(coordinate | percent))? (svg:fy::(coordinate | percent))? svg-stop*) ;
common-anim-spline-mode-attlist ::= (smil:calcMode::("discrete" | "linear" | "paced" | "spline"))? ;
office-scripts ::= (office:scripts::(office-script* office-event-listeners?))? ;
draw-connector-attlist ::= (draw:type::("standard" | "lines" | "line" | "curve"))? ;
 draw-connector-attlist ::= (svg:x1::coordinate svg:y1::coordinate)? ;
 draw-connector-attlist ::= (draw:start-shape::IDREF)? ;
 draw-connector-attlist ::= (draw:start-glue-point::nonNegativeInteger)? ;
 draw-connector-attlist ::= (svg:x2::coordinate svg:y2::coordinate)? ;
 draw-connector-attlist ::= (draw:end-shape::IDREF)? ;
 draw-connector-attlist ::= (draw:end-glue-point::nonNegativeInteger)? ;
 draw-connector-attlist ::= (draw:line-skew::(length (length length?)?))? ;
table-highlighted-range-attlist ::= (table:cell-range-address::cellRangeAddress)? ;
 table-highlighted-range-attlist ::= table:direction::("from-another-table" | "to-another-table" | "from-same-table") ;
 table-highlighted-range-attlist ::= (table:contains-error::boolean)? ;
common-vertical-margin-attlist ::= (fo:margin-top::(nonNegativeLength | percent))? (fo:margin-bottom::(nonNegativeLength | percent))? ;
button-type ::= (form:button-type::types)? ;
table-data-pilot-table ::= table:data-pilot-table::(table-data-pilot-table-attlist (table-database-source-sql | table-database-source-table | table-database-source-query | table-source-service | table-source-cell-range)? table-data-pilot-field+) ;
table-null-date ::= table:null-date::((table:value-type::valueType)? (table:date-value::date)?) ;
label ::= (form:label::string)? ;
style-header-footer-properties-attlist ::= (svg:height::length)? (fo:min-height::length)? ;
 style-header-footer-properties-attlist ::= common-horizontal-margin-attlist common-vertical-margin-attlist common-margin-attlist ;
 style-header-footer-properties-attlist ::= common-border-attlist ;
 style-header-footer-properties-attlist ::= common-border-line-width-attlist ;
 style-header-footer-properties-attlist ::= common-padding-attlist ;
 style-header-footer-properties-attlist ::= common-background-color-attlist ;
 style-header-footer-properties-attlist ::= common-shadow-attlist ;
 style-header-footer-properties-attlist ::= (style:dynamic-spacing::boolean)? ;
style-font-face-attlist ::= (svg:font-family::string)? (svg:font-style::fontStyle)? (svg:font-variant::fontVariant)? (svg:font-weight::fontWeight)? (svg:font-stretch::("normal" | "ultra-condensed" | "extra-condensed" | "condensed" | "semi-condensed" | "semi-expanded" | "expanded" | "extra-expanded" | "ultra-expanded"))? (svg:font-size::positiveLength)? (svg:unicode-range::string())? (svg:units-per-em::integer)? (svg:panose-1::string())? (svg:stemv::integer)? (svg:stemh::integer)? (svg:slope::integer)? (svg:cap-height::integer)? (svg:x-height::integer)? (svg:accent-height::integer)? (svg:ascent::integer)? (svg:descent::integer)? (svg:widths::string())? (svg:bbox::string())? (svg:ideographic::integer)? (svg:alphabetic::integer)? (svg:mathematical::integer)? (svg:hanging::integer)? (svg:v-ideographic::integer)? (svg:v-alphabetic::integer)? (svg:v-mathematical::integer)? (svg:v-hanging::integer)? (svg:underline-position::integer)? (svg:underline-thickness::integer)? (svg:strikethrough-position::integer)? (svg:strikethrough-thickness::integer)? (svg:overline-position::integer)? (svg:overline-thickness::integer)? ;
 style-font-face-attlist ::= style:name::string ;
 style-font-face-attlist ::= (style:font-adornments::string)? ;
 style-font-face-attlist ::= (style:font-family-generic::fontFamilyGeneric)? ;
 style-font-face-attlist ::= (style:font-pitch::fontPitch)? ;
 style-font-face-attlist ::= (style:font-charset::textEncoding)? ;
style-num-letter-sync-attlist ::= (style:num-letter-sync::boolean)? ;
common-field-fixed-attlist ::= (text:fixed::boolean)? ;
draw-stroke-dash-attlist ::= draw:name::styleName ;
 draw-stroke-dash-attlist ::= (draw:display-name::string)? ;
 draw-stroke-dash-attlist ::= (draw:style::("rect" | "round"))? ;
 draw-stroke-dash-attlist ::= (draw:dots1::integer)? (draw:dots1-length::length)? (draw:dots2::integer)? (draw:dots2-length::length)? ;
 draw-stroke-dash-attlist ::= (draw:distance::length)? ;
style-master-page-attlist ::= style:name::styleName ;
 style-master-page-attlist ::= (style:display-name::string)? ;
 style-master-page-attlist ::= style:page-layout-name::styleNameRef ;
 style-master-page-attlist ::= (draw:style-name::styleNameRef)? ;
 style-master-page-attlist ::= (style:next-style-name::styleNameRef)? ;
number-month-attlist ::= (number:textual::boolean)? ;
 number-month-attlist ::= (number:possessive-form::boolean)? ;
 number-month-attlist ::= (number:style::("short" | "long"))? ;
table-cell-content-deletion ::= table:cell-content-deletion::((table:id::string)? table-cell-address? table-change-track-table-cell?) ;
chart-data-point-attlist ::= (chart:repeated::nonNegativeInteger)? ;
 chart-data-point-attlist ::= (chart:style-name::styleNameRef)? ;
number-seconds-attlist ::= (number:style::("short" | "long"))? ;
 number-seconds-attlist ::= (number:decimal-places::integer)? ;
table-deletion ::= table:deletion::(table-deletion-attlist common-table-change-attlist office-change-info table-dependencies? table-deletions? table-cut-offs?) ;
text-index-entry-bibliography-attrs ::= (text:style-name::styleNameRef)? ;
 text-index-entry-bibliography-attrs ::= text:bibliography-data-field::("address" | "annote" | "author" | "bibliography-type" | "booktitle" | "chapter" | "custom1" | "custom2" | "custom3" | "custom4" | "custom5" | "edition" | "editor" | "howpublished" | "identifier" | "institution" | "isbn" | "issn" | "journal" | "month" | "note" | "number" | "organizations" | "pages" | "publisher" | "report-type" | "school" | "series" | "title" | "url" | "volume" | "year") ;
text-index-entry-chapter-attrs ::= (text:display::("name" | "number" | "number-and-name"))? ;
common-field-data-style-name-attlist ::= (style:data-style-name::styleNameRef)? ;
style-column-attlist ::= style:rel-width::relativeLength ;
 style-column-attlist ::= (fo:start-indent::length)? ;
 style-column-attlist ::= (fo:end-indent::length)? ;
 style-column-attlist ::= (fo:space-before::length)? ;
 style-column-attlist ::= (fo:space-after::length)? ;
common-fill-timing-attlist ::= (smil:fill::("remove" | "freeze" | "hold" | "auto" | "default" | "transition"))? ;
common-data-style-attlist ::= style:name::styleName ;
 common-data-style-attlist ::= (number:language::languageCode)? ;
 common-data-style-attlist ::= (number:country::countryCode)? ;
 common-data-style-attlist ::= (number:title::string())? ;
 common-data-style-attlist ::= (style:volatile::boolean)? ;
 common-data-style-attlist ::= (number:transliteration-format::string)? ;
 common-data-style-attlist ::= (number:transliteration-language::countryCode)? ;
 common-data-style-attlist ::= (number:transliteration-country::countryCode)? ;
 common-data-style-attlist ::= (number:transliteration-style::("short" | "medium" | "long"))? ;
office-annotation ::= office:annotation::(office-annotation-attlist draw-caption-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist dc-creator? dc-date? meta-date-string? (text-p | text-list)*) ;
dr3d-scene ::= dr3d:scene::(dr3d-scene-attlist common-draw-position-attlist common-draw-size-attlist common-draw-style-name-attlist common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-text-spreadsheet-shape-attlist common-dr3d-transform-attlist common-draw-caption-id-attlist svg-title? svg-desc? dr3d-light* shapes3d*) ;
common-anim-target-attlist ::= (smil:targetElement::IDREF)? ;
 common-anim-target-attlist ::= (anim:sub-item::string)? ;
draw-line ::= draw:line::(draw-line-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
style-ruby-properties-attlist ::= (style:ruby-position::("above" | "below"))? ;
 style-ruby-properties-attlist ::= (style:ruby-align::("left" | "center" | "right" | "distribute-letter" | "distribute-space"))? ;
image-data ::= (form:image-data::anyURI)? ;
number-scientific-number-attlist ::= (number:min-exponent-digits::integer)? ;
text-section-source-attr ::= (xlink:href::anyURI (xlink:type::"simple")? (xlink:show::"embed")?)? ;
 text-section-source-attr ::= (text:section-name::string)? ;
 text-section-source-attr ::= (text:filter-name::string)? ;
table-sort-by-attlist ::= table:field-number::nonNegativeInteger ;
 table-sort-by-attlist ::= (table:data-type::("text" | "number" | "automatic" | string))? ;
 table-sort-by-attlist ::= (table:order::("ascending" | "descending"))? ;
draw-page-thumbnail ::= draw:page-thumbnail::(draw-page-thumbnail-attlist common-draw-position-attlist common-draw-size-attlist presentation-shape-attlist common-draw-shape-with-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc?) ;
table-source-service-attlist ::= table:name::string ;
 table-source-service-attlist ::= table:source-name::string ;
 table-source-service-attlist ::= table:object-name::string ;
 table-source-service-attlist ::= (table:user-name::string)? ;
 table-source-service-attlist ::= (table:password::string)? ;
common-calendar-attlist ::= (number:calendar::("gregorian" | "gengou" | "ROC" | "hanja_yoil" | "hanja" | "hijri" | "jewish" | "buddhist" | string))? ;
office-annotation-attlist ::= (office:display::boolean)? ;
common-dr3d-transform-attlist ::= (dr3d:transform::string())? ;
dr3d-scene-attlist ::= (dr3d:vrp::vector3D)? (dr3d:vpn::vector3D)? (dr3d:vup::vector3D)? ;
 dr3d-scene-attlist ::= (dr3d:projection::("parallel" | "perspective"))? ;
 dr3d-scene-attlist ::= (dr3d:distance::length)? ;
 dr3d-scene-attlist ::= (dr3d:focal-length::length)? ;
 dr3d-scene-attlist ::= (dr3d:shadow-slant::nonNegativeInteger)? ;
 dr3d-scene-attlist ::= (dr3d:shade-mode::("flat" | "phong" | "gouraud" | "draft"))? ;
 dr3d-scene-attlist ::= (dr3d:ambient-color::color)? ;
 dr3d-scene-attlist ::= (dr3d:lighting-mode::boolean)? ;
table-cell-content-change ::= table:cell-content-change::(common-table-change-attlist table-cell-address office-change-info table-dependencies? table-deletions? table-previous) ;
chart-legend-attlist ::= (chart:legend-position::("start" | "end" | "top" | "bottom") (chart:legend-align::("start" | "center" | "end"))?) | (chart:legend-position::("top-start" | "bottom-start" | "top-end" | "bottom-end")) | Îµ ;
 chart-legend-attlist ::= common-draw-position-attlist ;
 chart-legend-attlist ::= (style:legend-expansion::("wide" | "high" | "balanced")) | (style:legend-expansion::"custom" style:legend-expansion-aspect-ratio::double) | Îµ ;
 chart-legend-attlist ::= (chart:style-name::styleNameRef)? ;
draw-rect ::= draw:rect::(draw-rect-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
table-subtotal-rules ::= table:subtotal-rules::(table-subtotal-rules-attlist table-sort-groups? table-subtotal-rule*) ;
text-alphabetical-index-source ::= text:alphabetical-index-source::(text-alphabetical-index-source-attrs text-index-title-template? text-alphabetical-index-entry-template*) ;
common-draw-z-index-attlist ::= (draw:z-index::nonNegativeInteger)? ;
chart-plot-area ::= chart:plot-area::(chart-plot-area-attlist dr3d-light* chart-axis* chart-series* chart-stock-gain-marker? chart-stock-loss-marker? chart-stock-range-line? chart-wall? chart-floor?) ;
for ::= (form:for::string)? ;
chart-grid-attlist ::= (chart:class::("major" | "minor"))? ;
 chart-grid-attlist ::= (chart:style-name::styleNameRef)? ;
style-graphic-properties-attlist ::= (draw:stroke::("none" | "dash" | "solid"))? ;
 style-graphic-properties-attlist ::= (draw:stroke-dash::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:stroke-dash-names::styleNameRefs)? ;
 style-graphic-properties-attlist ::= (svg:stroke-width::length)? ;
 style-graphic-properties-attlist ::= (svg:stroke-color::color)? ;
 style-graphic-properties-attlist ::= (draw:marker-start::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:marker-end::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:marker-start-width::length)? ;
 style-graphic-properties-attlist ::= (draw:marker-end-width::length)? ;
 style-graphic-properties-attlist ::= (draw:marker-start-center::boolean)? ;
 style-graphic-properties-attlist ::= (draw:marker-end-center::boolean)? ;
 style-graphic-properties-attlist ::= (svg:stroke-opacity::(string() | percent))? ;
 style-graphic-properties-attlist ::= (draw:stroke-linejoin::("miter" | "round" | "bevel" | "middle" | "none" | "inherit"))? ;
 style-graphic-properties-attlist ::= (draw:symbol-color::color)? ;
 style-graphic-properties-attlist ::= (text:animation::("none" | "scroll" | "alternate" | "slide"))? ;
 style-graphic-properties-attlist ::= (text:animation-direction::("left" | "right" | "up" | "down"))? ;
 style-graphic-properties-attlist ::= (text:animation-start-inside::boolean)? ;
 style-graphic-properties-attlist ::= (text:animation-stop-inside::boolean)? ;
 style-graphic-properties-attlist ::= (text:animation-repeat::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (text:animation-delay::duration)? ;
 style-graphic-properties-attlist ::= (text:animation-steps::length)? ;
 style-graphic-properties-attlist ::= (draw:auto-grow-width::boolean)? (draw:auto-grow-height::boolean)? ;
 style-graphic-properties-attlist ::= (draw:fit-to-size::boolean)? ;
 style-graphic-properties-attlist ::= (draw:fit-to-contour::boolean)? ;
 style-graphic-properties-attlist ::= (draw:textarea-vertical-align::("top" | "middle" | "bottom" | "justify"))? ;
 style-graphic-properties-attlist ::= (draw:textarea-horizontal-align::("left" | "center" | "right" | "justify"))? ;
 style-graphic-properties-attlist ::= (fo:wrap-option::("no-wrap" | "wrap"))? ;
 style-graphic-properties-attlist ::= (draw:color-mode::("greyscale" | "mono" | "watermark" | "standard"))? ;
 style-graphic-properties-attlist ::= (draw:color-inversion::boolean)? ;
 style-graphic-properties-attlist ::= (draw:luminance::percent)? ;
 style-graphic-properties-attlist ::= (draw:contrast::percent)? ;
 style-graphic-properties-attlist ::= (draw:gamma::percent)? ;
 style-graphic-properties-attlist ::= (draw:red::percent)? ;
 style-graphic-properties-attlist ::= (draw:green::percent)? ;
 style-graphic-properties-attlist ::= (draw:blue::percent)? ;
 style-graphic-properties-attlist ::= (draw:image-opacity::percent)? ;
 style-graphic-properties-attlist ::= (draw:shadow::("visible" | "hidden"))? ;
 style-graphic-properties-attlist ::= (draw:shadow-offset-x::length)? (draw:shadow-offset-y::length)? ;
 style-graphic-properties-attlist ::= (draw:shadow-color::color)? ;
 style-graphic-properties-attlist ::= (draw:shadow-opacity::percent)? ;
 style-graphic-properties-attlist ::= (draw:start-line-spacing-horizontal::distance)? (draw:start-line-spacing-vertical::distance)? ;
 style-graphic-properties-attlist ::= (draw:end-line-spacing-horizontal::distance)? (draw:end-line-spacing-vertical::distance)? ;
 style-graphic-properties-attlist ::= (draw:line-distance::distance)? ;
 style-graphic-properties-attlist ::= (draw:guide-overhang::length)? ;
 style-graphic-properties-attlist ::= (draw:guide-distance::distance)? ;
 style-graphic-properties-attlist ::= (draw:start-guide::length)? ;
 style-graphic-properties-attlist ::= (draw:end-guide::length)? ;
 style-graphic-properties-attlist ::= (draw:placing::("below" | "above"))? ;
 style-graphic-properties-attlist ::= (draw:parallel::boolean)? ;
 style-graphic-properties-attlist ::= (draw:measure-align::("automatic" | "left-outside" | "inside" | "right-outside"))? (draw:measure-vertical-align::("automatic" | "above" | "below" | "center"))? ;
 style-graphic-properties-attlist ::= (draw:unit::("automatic" | "mm" | "cm" | "m" | "km" | "pt" | "pc" | "inch" | "ft" | "mi"))? ;
 style-graphic-properties-attlist ::= (draw:show-unit::boolean)? ;
 style-graphic-properties-attlist ::= (draw:decimal-places::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (draw:caption-type::("straight-line" | "angled-line" | "angled-connector-line"))? ;
 style-graphic-properties-attlist ::= (draw:caption-angle-type::("fixed" | "free"))? ;
 style-graphic-properties-attlist ::= (draw:caption-angle::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (draw:caption-gap::distance)? ;
 style-graphic-properties-attlist ::= (draw:caption-escape-direction::("horizontal" | "vertical" | "auto"))? ;
 style-graphic-properties-attlist ::= (draw:caption-escape::(length | percent))? ;
 style-graphic-properties-attlist ::= (draw:caption-line-length::length)? ;
 style-graphic-properties-attlist ::= (draw:caption-fit-line-length::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:horizontal-segments::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:vertical-segments::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:edge-rounding::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:edge-rounding-mode::("correct" | "attractive"))? ;
 style-graphic-properties-attlist ::= (dr3d:back-scale::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:depth::length)? ;
 style-graphic-properties-attlist ::= (dr3d:backface-culling::("enabled" | "disabled"))? ;
 style-graphic-properties-attlist ::= (dr3d:end-angle::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:close-front::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:close-back::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:lighting-mode::("standard" | "double-sided"))? ;
 style-graphic-properties-attlist ::= (dr3d:normals-kind::("object" | "flat" | "sphere"))? ;
 style-graphic-properties-attlist ::= (dr3d:normals-direction::("normal" | "inverse"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-generation-mode-x::("object" | "parallel" | "sphere"))? (dr3d:texture-generation-mode-y::("object" | "parallel" | "sphere"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-kind::("luminance" | "intensity" | "color"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-filter::("enabled" | "disabled"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-mode::("replace" | "modulate" | "blend"))? ;
 style-graphic-properties-attlist ::= (dr3d:ambient-color::color)? (dr3d:emissive-color::color)? (dr3d:specular-color::color)? (dr3d:diffuse-color::color)? ;
 style-graphic-properties-attlist ::= (dr3d:shininess::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:shadow::("visible" | "hidden"))? ;
 style-graphic-properties-attlist ::= common-draw-rel-size-attlist (fo:min-width::(length | percent))? ;
 style-graphic-properties-attlist ::= (fo:min-height::(length | percent))? ;
 style-graphic-properties-attlist ::= (fo:max-height::(length | percent))? (fo:max-width::(length | percent))? ;
 style-graphic-properties-attlist ::= common-horizontal-margin-attlist ;
 style-graphic-properties-attlist ::= common-vertical-margin-attlist ;
 style-graphic-properties-attlist ::= common-margin-attlist ;
 style-graphic-properties-attlist ::= (style:print-content::boolean)? ;
 style-graphic-properties-attlist ::= (style:protect::("none" | (("content" | "position" | "size")+)))? ;
 style-graphic-properties-attlist ::= (style:horizontal-pos::("left" | "center" | "right" | "from-left" | "inside" | "outside" | "from-inside"))? (svg:x::coordinate)? ;
 style-graphic-properties-attlist ::= (style:horizontal-rel::("page" | "page-content" | "page-start-margin" | "page-end-margin" | "frame" | "frame-content" | "frame-start-margin" | "frame-end-margin" | "paragraph" | "paragraph-content" | "paragraph-start-margin" | "paragraph-end-margin" | "char"))? ;
 style-graphic-properties-attlist ::= common-vertical-pos-attlist ;
 style-graphic-properties-attlist ::= common-vertical-rel-attlist ;
 style-graphic-properties-attlist ::= common-text-anchor-attlist ;
 style-graphic-properties-attlist ::= common-border-attlist ;
 style-graphic-properties-attlist ::= common-border-line-width-attlist ;
 style-graphic-properties-attlist ::= common-padding-attlist ;
 style-graphic-properties-attlist ::= common-shadow-attlist ;
 style-graphic-properties-attlist ::= common-background-color-attlist ;
 style-graphic-properties-attlist ::= (style:editable::boolean)? ;
 style-graphic-properties-attlist ::= (style:wrap::("none" | "left" | "right" | "parallel" | "dynamic" | "run-through" | "biggest"))? ;
 style-graphic-properties-attlist ::= (style:wrap-dynamic-threshold::nonNegativeLength)? ;
 style-graphic-properties-attlist ::= (style:number-wrapped-paragraphs::("no-limit" | positiveInteger))? ;
 style-graphic-properties-attlist ::= (style:wrap-contour::boolean)? ;
 style-graphic-properties-attlist ::= (style:wrap-contour-mode::("full" | "outside"))? ;
 style-graphic-properties-attlist ::= (style:run-through::("foreground" | "background"))? ;
 style-graphic-properties-attlist ::= (style:flow-with-text::boolean)? ;
 style-graphic-properties-attlist ::= (style:overflow-behavior::("clip" | "auto-create-new-frame"))? ;
 style-graphic-properties-attlist ::= (style:mirror::("none" | "vertical" | horizontal-mirror | ("vertical" horizontal-mirror) | (horizontal-mirror "vertical")))? ;
 style-graphic-properties-attlist ::= (fo:clip::string)? ;
 style-graphic-properties-attlist ::= (draw:wrap-influence-on-position::("iterative" | "once-concurrent" | "once-successive"))? ;
 style-graphic-properties-attlist ::= common-writing-mode-attlist ;
 style-graphic-properties-attlist ::= (draw:frame-display-scrollbar::boolean)? ;
 style-graphic-properties-attlist ::= (draw:frame-display-border::boolean)? ;
 style-graphic-properties-attlist ::= (draw:frame-margin-horizontal::nonNegativePixelLength)? (draw:frame-margin-vertical::nonNegativePixelLength)? ;
 style-graphic-properties-attlist ::= (draw:visible-area-left::nonNegativeLength)? (draw:visible-area-top::nonNegativeLength)? (draw:visible-area-width::positiveLength)? (draw:visible-area-height::positiveLength)? ;
 style-graphic-properties-attlist ::= (draw:ole-draw-aspect::nonNegativeInteger)? ;
office-font-face-decls ::= (office:font-face-decls::(style-font-face*))? ;
number-era-attlist ::= (number:style::("short" | "long"))? ;
number-percentage-style ::= number:percentage-style::(common-data-style-attlist style-text-properties? number-text? number-and-text? style-map*) ;
text-hidden-text-attlist ::= text:condition::formula ;
 text-hidden-text-attlist ::= text:string-value::string ;
 text-hidden-text-attlist ::= (text:is-hidden::boolean)? ;
table-named-expression-attlist ::= table:name::string table:expression::string (table:base-cell-address::cellAddress)? ;
chart-plot-area-attlist ::= common-draw-position-attlist common-draw-size-attlist ;
 chart-plot-area-attlist ::= (chart:style-name::styleNameRef)? ;
 chart-plot-area-attlist ::= (table:cell-range-address::cellRangeAddress)? ;
 chart-plot-area-attlist ::= (chart:data-source-has-labels::("none" | "row" | "column" | "both"))? ;
 chart-plot-area-attlist ::= dr3d-scene-attlist common-dr3d-transform-attlist ;
script-event-listener-attlist ::= script:event-name::string ;
 script-event-listener-attlist ::= script:language::string ;
 script-event-listener-attlist ::= (script:macro-name::string) | (xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")?) ;
draw-fill-image ::= draw:fill-image::(draw-fill-image-attlist xlink:href::anyURI (xlink:type::"simple")? (xlink:show::"embed")? (xlink:actuate::"onLoad")?) ;
form-formatted-text-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist ;
 form-formatted-text-attlist ::= (form:max-value::string)? ;
 form-formatted-text-attlist ::= (form:min-value::string)? ;
 form-formatted-text-attlist ::= (form:validation::boolean)? ;
draw-param-attlist ::= (draw:name::string())? ;
 draw-param-attlist ::= (draw:value::string())? ;
common-begin-end-timing-attlist ::= (smil:begin::string)? ;
 common-begin-end-timing-attlist ::= (smil:end::string)? ;
common-presentation-effect-attlist ::= draw:shape-id::IDREF ;
 common-presentation-effect-attlist ::= (presentation:effect::presentationEffects)? ;
 common-presentation-effect-attlist ::= (presentation:direction::presentationEffectDirections)? ;
 common-presentation-effect-attlist ::= (presentation:speed::presentationSpeeds)? ;
 common-presentation-effect-attlist ::= (presentation:delay::duration)? ;
 common-presentation-effect-attlist ::= (presentation:start-scale::percent)? ;
 common-presentation-effect-attlist ::= (presentation:path-id::string())? ;
style-columns-attlist ::= fo:column-count::positiveInteger ;
 style-columns-attlist ::= (fo:column-gap::length)? ;
text-a-attlist ::= (office:name::string)? ;
 text-a-attlist ::= (office:title::string)? ;
 text-a-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? ;
 text-a-attlist ::= (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? ;
 text-a-attlist ::= (text:style-name::styleNameRef)? (text:visited-style-name::styleNameRef)? ;
anim-iterate-attlist ::= common-anim-target-attlist ;
 anim-iterate-attlist ::= (anim:iterate-type::string)? ;
 anim-iterate-attlist ::= (anim:iterate-interval::duration)? ;
style-graphic-fill-properties-attlist ::= (draw:fill::("none" | "solid" | "bitmap" | "gradient" | "hatch"))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-color::color)? ;
 style-graphic-fill-properties-attlist ::= (draw:secondary-fill-color::color)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-gradient-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (draw:gradient-step-count::nonNegativeInteger)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-hatch-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-hatch-solid::boolean)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (style:repeat::("no-repeat" | "repeat" | "stretch"))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-width::(length | percent))? (draw:fill-image-height::(length | percent))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-ref-point-x::percent)? (draw:fill-image-ref-point-y::percent)? (draw:fill-image-ref-point::("top-left" | "top" | "top-right" | "left" | "center" | "right" | "bottom-left" | "bottom" | "bottom-right"))? ;
 style-graphic-fill-properties-attlist ::= (draw:tile-repeat-offset::string())? ;
 style-graphic-fill-properties-attlist ::= (draw:opacity::percent)? ;
 style-graphic-fill-properties-attlist ::= (draw:opacity-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (svg:fill-rule::("nonzero" | "evenodd"))? ;
common-draw-rel-size-attlist ::= common-draw-size-attlist (style:rel-width::(percent | "scale" | "scale-min"))? (style:rel-height::(percent | "scale" | "scale-min"))? ;
common-table-template-attlist ::= text:style-name::styleNameRef text:paragraph-style-name::(styleNameRef?) ;
common-current-value-attlist ::= (form:current-value::string)? ;
dr3d-sphere-attlist ::= (dr3d:center::vector3D)? ;
 dr3d-sphere-attlist ::= (dr3d:size::vector3D)? ;
draw-fill-image-attlist ::= draw:name::styleName ;
 draw-fill-image-attlist ::= (draw:display-name::string)? ;
 draw-fill-image-attlist ::= (svg:width::length)? (svg:height::length)? ;
table-content-validation ::= table:content-validation::(table-validation-attlist table-help-message? (table-error-message | (table-error-macro office-event-listeners?))?) ;
table-data-pilot-level ::= table:data-pilot-level::(table-data-pilot-level-attlist table-data-pilot-subtotals? table-data-pilot-members? table-data-pilot-display-info? table-data-pilot-sort-info? table-data-pilot-layout-info?) ;
common-dur-timing-attlist ::= (smil:dur::string)? ;
chart-mean-value-attlist ::= (chart:style-name::styleNameRef)? ;
style-text-properties-attlist ::= (fo:font-variant::fontVariant)? ;
 style-text-properties-attlist ::= (fo:text-transform::("none" | "lowercase" | "uppercase" | "capitalize"))? ;
 style-text-properties-attlist ::= (fo:color::color)? ;
 style-text-properties-attlist ::= (style:use-window-font-color::boolean)? ;
 style-text-properties-attlist ::= (style:text-outline::boolean)? ;
 style-text-properties-attlist ::= (style:text-line-through-type::lineType)? ;
 style-text-properties-attlist ::= (style:text-line-through-style::lineStyle)? ;
 style-text-properties-attlist ::= (style:text-line-through-width::lineWidth)? ;
 style-text-properties-attlist ::= (style:text-line-through-color::("font-color" | color))? ;
 style-text-properties-attlist ::= (style:text-line-through-text::string)? ;
 style-text-properties-attlist ::= (style:text-line-through-text-style::styleNameRef)? ;
 style-text-properties-attlist ::= (style:text-position::(percent | "super" | "sub" percent?))? ;
 style-text-properties-attlist ::= (style:font-name::string)? (style:font-name-asian::string)? (style:font-name-complex::string)? ;
 style-text-properties-attlist ::= (fo:font-family::string)? (style:font-family-asian::string)? (style:font-family-complex::string)? ;
 style-text-properties-attlist ::= (style:font-family-generic::fontFamilyGeneric)? (style:font-family-generic-asian::fontFamilyGeneric)? (style:font-family-generic-complex::fontFamilyGeneric)? ;
 style-text-properties-attlist ::= (style:font-style-name::string)? (style:font-style-name-asian::string)? (style:font-style-name-complex::string)? ;
 style-text-properties-attlist ::= (style:font-pitch::fontPitch)? (style:font-pitch-asian::fontPitch)? (style:font-pitch-complex::fontPitch)? ;
 style-text-properties-attlist ::= (style:font-charset::textEncoding)? (style:font-charset-asian::textEncoding)? (style:font-charset-complex::textEncoding)? ;
 style-text-properties-attlist ::= (fo:font-size::(positiveLength | percent))? (style:font-size-asian::(positiveLength | percent))? (style:font-size-complex::(positiveLength | percent))? ;
 style-text-properties-attlist ::= (style:font-size-rel::length)? (style:font-size-rel-asian::length)? (style:font-size-rel-complex::length)? ;
 style-text-properties-attlist ::= (style:script-type::("latin" | "asian" | "complex" | "ignore"))? ;
 style-text-properties-attlist ::= (fo:letter-spacing::(length | "normal"))? ;
 style-text-properties-attlist ::= (fo:language::languageCode)? (style:language-asian::languageCode)? (style:language-complex::languageCode)? ;
 style-text-properties-attlist ::= (fo:country::countryCode)? (style:country-asian::countryCode)? (style:country-complex::countryCode)? ;
 style-text-properties-attlist ::= (fo:font-style::fontStyle)? (style:font-style-asian::fontStyle)? (style:font-style-complex::fontStyle)? ;
 style-text-properties-attlist ::= (style:font-relief::("none" | "embossed" | "engraved"))? ;
 style-text-properties-attlist ::= (fo:text-shadow::shadowType)? ;
 style-text-properties-attlist ::= (style:text-underline-type::lineType)? ;
 style-text-properties-attlist ::= (style:text-underline-style::lineStyle)? ;
 style-text-properties-attlist ::= (style:text-underline-width::lineWidth)? ;
 style-text-properties-attlist ::= (style:text-underline-color::("font-color" | color))? ;
 style-text-properties-attlist ::= (fo:font-weight::fontWeight)? (style:font-weight-asian::fontWeight)? (style:font-weight-complex::fontWeight)? ;
 style-text-properties-attlist ::= (style:text-underline-mode::lineMode)? ;
 style-text-properties-attlist ::= (style:text-line-through-mode::lineMode)? ;
 style-text-properties-attlist ::= (style:letter-kerning::boolean)? ;
 style-text-properties-attlist ::= (style:text-blinking::boolean)? ;
 style-text-properties-attlist ::= common-background-color-attlist ;
 style-text-properties-attlist ::= (style:text-combine::("none" | "letters" | "lines"))? ;
 style-text-properties-attlist ::= (style:text-combine-start-char::character)? (style:text-combine-end-char::character)? ;
 style-text-properties-attlist ::= (style:text-emphasize::("none" | ("none" | "accent" | "dot" | "circle" | "disc" "above" | "below")))? ;
 style-text-properties-attlist ::= (style:text-scale::percent)? ;
 style-text-properties-attlist ::= (style:text-rotation-angle::integer)? ;
 style-text-properties-attlist ::= (style:text-rotation-scale::("fixed" | "line-height"))? ;
 style-text-properties-attlist ::= (fo:hyphenate::boolean)? ;
 style-text-properties-attlist ::= (fo:hyphenation-remain-char-count::positiveInteger)? ;
 style-text-properties-attlist ::= (fo:hyphenation-push-char-count::positiveInteger)? ;
 style-text-properties-attlist ::= (text:display::"true") | (text:display::"none") | (text:display::"condition" text:condition::"none") | Îµ ;
number-time-style-attlist ::= (number:truncate-on-overflow::boolean)? ;
draw-equation-attlist ::= (draw:name::string)? ;
 draw-equation-attlist ::= (draw:formula::string)? ;
office-dde-source-attlist ::= (office:name::string)? ;
 office-dde-source-attlist ::= (office:conversion-mode::("into-default-style-data-style" | "into-english-number" | "keep-text"))? ;
text-conditional-text-attlist ::= text:condition::formula ;
 text-conditional-text-attlist ::= text:string-value-if-true::string ;
 text-conditional-text-attlist ::= text:string-value-if-false::string ;
 text-conditional-text-attlist ::= (text:current-value::boolean)? ;
text-object-index-source ::= text:object-index-source::(text-object-index-source-attrs text-index-title-template? text-object-index-entry-template?) ;
style-table-column-properties-attlist ::= (style:column-width::positiveLength)? (style:rel-column-width::relativeLength)? ;
 style-table-column-properties-attlist ::= (style:use-optimal-column-width::boolean)? ;
 style-table-column-properties-attlist ::= common-break-attlist ;
office-meta-data ::= meta:generator::string ;
 office-meta-data ::= dc:title::string ;
 office-meta-data ::= dc:description::string ;
 office-meta-data ::= dc:subject::string ;
 office-meta-data ::= meta:keyword::string ;
 office-meta-data ::= meta:initial-creator::string ;
 office-meta-data ::= dc-creator ;
 office-meta-data ::= meta:printed-by::string ;
 office-meta-data ::= meta:creation-date::dateTime ;
 office-meta-data ::= dc-date ;
 office-meta-data ::= meta:print-date::dateTime ;
 office-meta-data ::= meta:template::(xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? (xlink:title::string)? (meta:date::dateTime)?) ;
 office-meta-data ::= meta:auto-reload::((xlink:type::"simple")? (xlink:show::"replace")? (xlink:actuate::"onLoad")? (xlink:href::anyURI)? (meta:delay::duration)?) ;
 office-meta-data ::= meta:hyperlink-behaviour::((office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))?) ;
 office-meta-data ::= dc:language::language ;
 office-meta-data ::= meta:editing-cycles::nonNegativeInteger ;
 office-meta-data ::= meta:editing-duration::duration ;
 office-meta-data ::= meta:document-statistic::((meta:page-count::nonNegativeInteger)? (meta:table-count::nonNegativeInteger)? (meta:draw-count::nonNegativeInteger)? (meta:image-count::nonNegativeInteger)? (meta:ole-object-count::nonNegativeInteger)? (meta:object-count::nonNegativeInteger)? (meta:paragraph-count::nonNegativeInteger)? (meta:word-count::nonNegativeInteger)? (meta:character-count::nonNegativeInteger)? (frame-count::nonNegativeInteger)? (sentence-count::nonNegativeInteger)? (syllable-count::nonNegativeInteger)? (non-whitespace-character-count::nonNegativeInteger)? (meta:row-count::nonNegativeInteger)? (meta:cell-count::nonNegativeInteger)?) ;
 office-meta-data ::= meta:user-defined::(meta:name::string (meta:value-type::"float" double) | (meta:value-type::"date" dateOrDateTime) | (meta:value-type::"time" duration) | (meta:value-type::"boolean" boolean) | (meta:value-type::"string" string) | string()) ;
text-ref-content ::= (text:reference-format::("page" | "chapter" | "direction" | "text"))? ;
form-checkbox-attlist ::= form-control-attlist common-disabled-attlist label common-printable-attlist common-tab-attlist common-title-attlist common-value-attlist common-data-field-attlist common-form-visual-effect-attlist common-form-relative-image-position-attlist ;
 form-checkbox-attlist ::= (form:current-state::states)? ;
 form-checkbox-attlist ::= (form:is-tristate::boolean)? ;
 form-checkbox-attlist ::= (form:state::states)? ;
text-hidden-paragraph-attlist ::= text:condition::formula ;
 text-hidden-paragraph-attlist ::= (text:is-hidden::boolean)? ;
presentation-sound ::= presentation:sound::(presentation-sound-attlist xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? (xlink:show::("new" | "replace"))?) ;
text-list-item-attr ::= (text:start-value::nonNegativeInteger)? ;
selected ::= (form:selected::boolean)? ;
chart-title-attlist ::= (table:cell-range::cellAddress)? ;
 chart-title-attlist ::= common-draw-position-attlist ;
 chart-title-attlist ::= (chart:style-name::styleNameRef)? ;
common-draw-circle-ellipse-attlist ::= (svg:cx::coordinate svg:cy::coordinate)? ;
 common-draw-circle-ellipse-attlist ::= (draw:kind::("full" | "section" | "cut" | "arc"))? ;
 common-draw-circle-ellipse-attlist ::= (draw:start-angle::double)? ;
 common-draw-circle-ellipse-attlist ::= (draw:end-angle::double)? ;
text-page-number-attlist ::= common-field-num-format-attlist common-field-fixed-attlist ;
 text-page-number-attlist ::= (text:page-adjust::integer)? ;
 text-page-number-attlist ::= (text:select-page::("previous" | "current" | "next"))? ;
style-background-image ::= (style:background-image::(style-background-image-attlist common-draw-data-attlist | office-binary-data | Îµ))? ;
dr3d-cube-attlist ::= (dr3d:min-edge::vector3D)? (dr3d:max-edge::vector3D)? ;
form-property-type-and-value-list ::= (office:value-type::"float" (form:list-value::(office:value::double))*) | (office:value-type::"percentage" (form:list-value::(office:value::double))*) | (office:value-type::"currency" (form:list-value::(office:value::double (office:currency::string)?))*) | (office:value-type::"date" (form:list-value::(office:date-value::dateOrDateTime))*) | (office:value-type::"time" (form:list-value::(office:time-value::duration))*) | (office:value-type::"boolean" (form:list-value::(office:boolean-value::boolean))*) | (office:value-type::"string" (form:list-value::(office:string-value::string))*) | (office:value-type::"void") ;
draw-enhanced-geometry-attlist ::= (draw:type::custom-shape-type)? ;
 draw-enhanced-geometry-attlist ::= (svg:viewBox::(integer integer integer integer))? ;
 draw-enhanced-geometry-attlist ::= (draw:mirror-vertical::boolean)? (draw:mirror-horizontal::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-rotate-angle::double)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:concentric-gradient-fill-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-brightness::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-depth::(length double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-diffusion::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-number-of-line-segments::integer)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-light-face::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-harsh::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-harsh::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-level::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-level::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-direction::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-direction::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-metal::boolean)? ;
 draw-enhanced-geometry-attlist ::= (dr3d:shade-mode::("flat" | "phong" | "gouraud" | "draft"))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-rotation-angle::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-rotation-center::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-shininess::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-skew::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-specularity::percent)? ;
 draw-enhanced-geometry-attlist ::= (dr3d:projection::("parallel" | "perspective"))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-viewpoint::point3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-origin::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-color::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:enhanced-path::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:path-stretchpoint-x::double)? (draw:path-stretchpoint-y::double)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-areas::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-points::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-point-type::("none" | "segments" | "rectangle"))? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-point-leaving-directions::string())? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-mode::("normal" | "path" | "shape"))? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-scale::("path" | "shape"))? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-same-letter-heights::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:modifiers::string)? ;
style-presentation-page-layout ::= style:presentation-page-layout::(style:name::styleName (style:display-name::string)? presentation-placeholder*) ;
text-index-entry-page-number ::= text:index-entry-page-number::((text:style-name::styleNameRef)?) ;
style-drop-cap ::= (style:drop-cap::style-drop-cap-attlist)? ;
text-alphabetical-index-auto-mark-file ::= text:alphabetical-index-auto-mark-file::(xlink:href::anyURI (xlink:type::"simple")?) ;
presentation-sound-attlist ::= (presentation:play-full::boolean)? ;
draw-gradient-attlist ::= (draw:start-color::color)? (draw:end-color::color)? ;
 draw-gradient-attlist ::= (draw:start-intensity::percent)? (draw:end-intensity::percent)? ;
style-background-image-attlist ::= (style:repeat::("no-repeat" | "repeat" | "stretch"))? ;
 style-background-image-attlist ::= (style:position::("left" | "center" | "right" | "top" | "bottom" | (horiBackPos vertBackPos) | (vertBackPos horiBackPos)))? ;
 style-background-image-attlist ::= (style:filter-name::string)? ;
 style-background-image-attlist ::= (draw:opacity::percent)? ;
common-writing-mode-attlist ::= (style:writing-mode::("lr-tb" | "rl-tb" | "tb-rl" | "tb-lr" | "lr" | "rl" | "tb" | "page"))? ;
text-illustration-index-source-attrs ::= text-index-scope-attr ;
 text-illustration-index-source-attrs ::= text-relative-tab-stop-position-attr ;
 text-illustration-index-source-attrs ::= (text:use-caption::boolean)? ;
 text-illustration-index-source-attrs ::= (text:caption-sequence-name::string)? ;
 text-illustration-index-source-attrs ::= (text:caption-sequence-format::("text" | "category-and-value" | "caption"))? ;
text-sequence-decl-attlist ::= common-field-name-attlist ;
 text-sequence-decl-attlist ::= text:display-outline-level::nonNegativeInteger ;
 text-sequence-decl-attlist ::= (text:separation-character::character)? ;
svg-font-face-name ::= svg:font-face-name::((svg:name::string())?) ;
bound-column ::= (form:bound-column::string)? ;
xforms-bind-attlist ::= (xforms:bind::string)? ;
style-drop-cap-attlist ::= (style:length::("word" | positiveInteger))? ;
 style-drop-cap-attlist ::= (style:lines::positiveInteger)? ;
 style-drop-cap-attlist ::= (style:distance::length)? ;
 style-drop-cap-attlist ::= (style:style-name::styleNameRef)? ;
table-linked-source-attlist ::= (xlink:type::"simple")? (xlink:actuate::"onRequest")? xlink:href::anyURI ;
 table-linked-source-attlist ::= (table:filter-name::string)? ;
 table-linked-source-attlist ::= (table:filter-options::string)? ;
 table-linked-source-attlist ::= (table:refresh-delay::duration)? ;
text-tracked-changes ::= (text:tracked-changes::(text-tracked-changes-attr text-changed-region*))? ;
text-index-entry-link-end ::= text:index-entry-link-end::((text:style-name::styleNameRef)?) ;
text-outline-level-style ::= text:outline-level-style::(text-outline-level-style-attlist style-list-level-properties? style-text-properties?) ;
number-hours-attlist ::= (number:style::("short" | "long"))? ;
text-list-style-attr ::= style:name::styleName ;
 text-list-style-attr ::= (style:display-name::string)? ;
 text-list-style-attr ::= (text:consecutive-numbering::boolean)? ;
common-presentation-header-footer-attlist ::= (presentation:use-header-name::string)? ;
 common-presentation-header-footer-attlist ::= (presentation:use-footer-name::string)? ;
 common-presentation-header-footer-attlist ::= (presentation:use-date-time-name::string)? ;
table-rows ::= table-table-rows | ((text-soft-page-break? table-table-row)+) ;
sectionAttr ::= (text:style-name::styleNameRef)? ;
 sectionAttr ::= text:name::string ;
 sectionAttr ::= (text:protected::boolean)? ;
 sectionAttr ::= (text:protection-key::string)? ;
office-meta ::= (office:meta::office-meta-content)? ;
draw-opacity-attlist ::= (draw:start::percent)? (draw:end::percent)? ;
style-table-row-properties-attlist ::= (style:row-height::positiveLength)? (style:min-row-height::nonNegativeLength)? ;
 style-table-row-properties-attlist ::= (style:use-optimal-row-height::boolean)? ;
 style-table-row-properties-attlist ::= common-background-color-attlist ;
 style-table-row-properties-attlist ::= common-break-attlist ;
 style-table-row-properties-attlist ::= (fo:keep-together::("auto" | "always"))? ;
common-auto-reorder-attlist ::= (number:automatic-order::boolean)? ;
target-location ::= (xlink:href::anyURI)? ;
current-selected ::= (form:current-selected::boolean)? ;
draw-circle-attlist ::= (svg:r::length)? ;
chart-footer ::= chart:footer::(chart-title-attlist text-p?) ;
text-decls ::= (text:variable-decls::(text-variable-decl*))? (text:sequence-decls::(text-sequence-decl*))? (text:user-field-decls::(text-user-field-decl*))? (text:dde-connection-decls::(text-dde-connection-decl*))? text-alphabetical-index-auto-mark-file? ;
common-stock-marker-attlist ::= (chart:style-name::styleNameRef)? ;
form-number-attlist ::= (form:value::double)? ;
 form-number-attlist ::= (form:current-value::double)? ;
 form-number-attlist ::= (form:min-value::double)? ;
 form-number-attlist ::= (form:max-value::double)? ;
chart-regression-curve-attlist ::= (chart:style-name::styleNameRef)? ;
common-dde-connection-decl-attlist ::= office:dde-application::string ;
 common-dde-connection-decl-attlist ::= office:dde-topic::string ;
 common-dde-connection-decl-attlist ::= office:dde-item::string ;
 common-dde-connection-decl-attlist ::= (office:automatic-update::boolean)? ;
common-value-and-type-attlist ::= (office:value-type::"float" office:value::double) | (office:value-type::"percentage" office:value::double) | (office:value-type::"currency" office:value::double (office:currency::string)?) | (office:value-type::"date" office:date-value::dateOrDateTime) | (office:value-type::"time" office:time-value::duration) | (office:value-type::"boolean" office:boolean-value::boolean) | (office:value-type::"string" (office:string-value::string)?) ;
text-time-attlist ::= common-field-fixed-attlist common-field-data-style-name-attlist ;
 text-time-attlist ::= (text:time-value::timeOrDateTime)? ;
 text-time-attlist ::= (text:time-adjust::duration)? ;
common-number-attlist ::= (number:min-integer-digits::integer)? ;
 common-number-attlist ::= (number:grouping::boolean)? ;
draw-caption ::= draw:caption::(draw-caption-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
common-decimal-places-attlist ::= (number:decimal-places::integer)? ;
table-functions ::= table-named-expressions? table-database-ranges? table-data-pilot-tables? table-consolidation? table-dde-links? ;
form-combobox-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist dropdown common-maxlength-attlist common-printable-attlist common-readonly-attlist size common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist list-source list-source-type ;
 form-combobox-attlist ::= (form:auto-complete::boolean)? ;
common-page-number-attlist ::= (style:page-number::(positiveInteger | "auto"))? ;
text-database-next-attlist ::= common-field-database-table ;
 text-database-next-attlist ::= (text:condition::formula)? ;
common-vertical-rel-attlist ::= (style:vertical-rel::("page" | "page-content" | "frame" | "frame-content" | "paragraph" | "paragraph-content" | "char" | "line" | "baseline" | "text"))? ;
form-listbox-attlist ::= form-control-attlist common-disabled-attlist dropdown common-printable-attlist size common-tab-attlist common-title-attlist bound-column common-data-field-attlist list-source list-source-type ;
 form-listbox-attlist ::= (form:multiple::boolean)? ;
 form-listbox-attlist ::= (form:xforms-list-source::string)? ;
style-table-cell-properties-attlist ::= (style:vertical-align::("top" | "middle" | "bottom" | "automatic"))? ;
 style-table-cell-properties-attlist ::= (style:text-align-source::("fix" | "value-type"))? ;
 style-table-cell-properties-attlist ::= common-style-direction-attlist ;
 style-table-cell-properties-attlist ::= (style:glyph-orientation-vertical::("auto" | "0"))? ;
 style-table-cell-properties-attlist ::= common-shadow-attlist ;
 style-table-cell-properties-attlist ::= common-background-color-attlist ;
 style-table-cell-properties-attlist ::= common-border-attlist ;
 style-table-cell-properties-attlist ::= (style:diagonal-tl-br::string)? (style:diagonal-tl-br-widths::borderWidths)? (style:diagonal-bl-tr::string)? (style:diagonal-bl-tr-widths::borderWidths)? ;
 style-table-cell-properties-attlist ::= common-border-line-width-attlist ;
 style-table-cell-properties-attlist ::= common-padding-attlist ;
 style-table-cell-properties-attlist ::= (fo:wrap-option::("no-wrap" | "wrap"))? ;
 style-table-cell-properties-attlist ::= common-rotation-angle-attlist ;
 style-table-cell-properties-attlist ::= (style:rotation-align::("none" | "bottom" | "top" | "center"))? ;
 style-table-cell-properties-attlist ::= (style:cell-protect::("none" | "hidden-and-protected" | (("protected" | "formula-hidden")+)))? ;
 style-table-cell-properties-attlist ::= (style:print-content::boolean)? ;
 style-table-cell-properties-attlist ::= (style:decimal-places::nonNegativeInteger)? ;
 style-table-cell-properties-attlist ::= (style:repeat-content::boolean)? ;
 style-table-cell-properties-attlist ::= (style:shrink-to-fit::boolean)? ;
draw-ellipse ::= draw:ellipse::(common-draw-circle-ellipse-attlist draw-ellipse-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
common-draw-id-attlist ::= (draw:id::ID)? ;
text-alphabetical-index-mark-attrs ::= (text:key1::string)? (text:key2::string)? ;
 text-alphabetical-index-mark-attrs ::= (text:string-value-phonetic::string)? (text:key1-phonetic::string)? (text:key2-phonetic::string)? ;
 text-alphabetical-index-mark-attrs ::= (text:main-entry::boolean)? ;
chart-floor-attlist ::= (svg:width::length)? ;
 chart-floor-attlist ::= (chart:style-name::styleNameRef)? ;
common-field-display-value-formula-none-attlist ::= (text:display::("value" | "formula" | "none"))? ;
common-repeat-timing-attlist ::= (smil:repeatDur::string)? (smil:repeatCount::(nonNegativeInteger | "indefinite"))? ;
form-value-range-attlist ::= form-control-attlist common-disabled-attlist common-printable-attlist common-tab-attlist common-title-attlist common-value-attlist ;
 form-value-range-attlist ::= (form:max-value::string)? ;
 form-value-range-attlist ::= (form:min-value::string)? ;
 form-value-range-attlist ::= (form:step-size::positiveInteger)? ;
 form-value-range-attlist ::= (form:page-step-size::positiveInteger)? ;
 form-value-range-attlist ::= (form:delay-for-repeat::duration)? ;
 form-value-range-attlist ::= (form:orientation::("horizontal" | "vertical"))? ;
table-database-range ::= table:database-range::(table-database-range-attlist (table-database-source-sql | table-database-source-table | table-database-source-query)? table-filter? table-sort? table-subtotal-rules?) ;
table-decls ::= table-calculation-settings? table-content-validations? table-label-ranges? ;
number-boolean-style ::= number:boolean-style::(common-data-style-attlist style-text-properties? number-text? (number-boolean number-text?)? style-map*) ;
table-error-macro ::= table:error-macro::((table:execute::boolean)?) ;
text-bibliography-source ::= text:bibliography-source::(text-index-title-template? text-bibliography-entry-template*) ;
text-index-scope-attr ::= (text:index-scope::("document" | "chapter"))? ;
text-relative-tab-stop-position-attr ::= (text:relative-tab-stop-position::boolean)? ;
text-sort-key-attlist ::= text:key::("address" | "annote" | "author" | "bibliography-type" | "booktitle" | "chapter" | "custom1" | "custom2" | "custom3" | "custom4" | "custom5" | "edition" | "editor" | "howpublished" | "identifier" | "institution" | "isbn" | "issn" | "journal" | "month" | "note" | "number" | "organizations" | "pages" | "publisher" | "report-type" | "school" | "series" | "title" | "url" | "volume" | "year") (text:sort-ascending::boolean)? ;
number-currency-symbol-attlist ::= (number:language::languageCode)? (number:country::countryCode)? ;
style-list-level-properties-attlist ::= common-text-align ;
 style-list-level-properties-attlist ::= (text:space-before::nonNegativeLength)? ;
 style-list-level-properties-attlist ::= (text:min-label-width::nonNegativeLength)? ;
 style-list-level-properties-attlist ::= (text:min-label-distance::nonNegativeLength)? ;
 style-list-level-properties-attlist ::= (style:font-name::string)? ;
 style-list-level-properties-attlist ::= (fo:width::positiveLength)? (fo:height::positiveLength)? ;
 style-list-level-properties-attlist ::= common-vertical-rel-attlist common-vertical-pos-attlist ;
text-list-level-style-number-attr ::= (text:style-name::styleNameRef)? ;
 text-list-level-style-number-attr ::= common-num-format-attlist common-num-format-prefix-suffix-attlist ;
 text-list-level-style-number-attr ::= (text:display-levels::positiveInteger)? ;
 text-list-level-style-number-attr ::= (text:start-value::positiveInteger)? ;
common-border-attlist ::= (fo:border::string)? (fo:border-top::string)? (fo:border-bottom::string)? (fo:border-left::string)? (fo:border-right::string)? ;
presentation-notes-attlist ::= (style:page-layout-name::styleNameRef)? ;
 presentation-notes-attlist ::= (draw:style-name::styleNameRef)? ;
text-index-entry-span ::= text:index-entry-span::((text:style-name::styleNameRef)? string()) ;
text-date-attlist ::= common-field-fixed-attlist common-field-data-style-name-attlist ;
 text-date-attlist ::= (text:date-value::dateOrDateTime)? ;
 text-date-attlist ::= (text:date-adjust::duration)? ;
text-user-field-decl ::= text:user-field-decl::(common-field-name-attlist common-field-formula-attlist? common-value-and-type-attlist) ;
currency-symbol-and-text ::= number-currency-symbol number-text? ;
table-database-range-attlist ::= (table:name::string)? ;
 table-database-range-attlist ::= (table:is-selection::boolean)? ;
 table-database-range-attlist ::= (table:on-update-keep-styles::boolean)? ;
 table-database-range-attlist ::= (table:on-update-keep-size::boolean)? ;
 table-database-range-attlist ::= (table:has-persistent-data::boolean)? ;
 table-database-range-attlist ::= (table:orientation::("column" | "row"))? ;
 table-database-range-attlist ::= (table:contains-header::boolean)? ;
 table-database-range-attlist ::= (table:display-filter-buttons::boolean)? ;
 table-database-range-attlist ::= table:target-range-address::cellRangeAddress ;
 table-database-range-attlist ::= (table:refresh-delay::boolean)? ;
text-object-index-source-attrs ::= text-index-scope-attr ;
 text-object-index-source-attrs ::= text-relative-tab-stop-position-attr ;
 text-object-index-source-attrs ::= (text:use-spreadsheet-objects::boolean)? ;
 text-object-index-source-attrs ::= (text:use-math-objects::boolean)? ;
 text-object-index-source-attrs ::= (text:use-draw-objects::boolean)? ;
 text-object-index-source-attrs ::= (text:use-chart-objects::boolean)? ;
 text-object-index-source-attrs ::= (text:use-other-objects::boolean)? ;
table-change-track-table-cell-attlist ::= (table:cell-address::cellAddress)? ;
 table-change-track-table-cell-attlist ::= (table:matrix-covered::boolean)? ;
 table-change-track-table-cell-attlist ::= (table:formula::string)? (table:number-matrix-columns-spanned::positiveInteger)? (table:number-matrix-rows-spanned::positiveInteger)? common-value-and-type-attlist? ;
text-database-row-select-attlist ::= common-field-database-table ;
 text-database-row-select-attlist ::= (text:condition::formula)? ;
 text-database-row-select-attlist ::= (text:row-number::nonNegativeInteger)? ;
text-illustration-index-source ::= text:illustration-index-source::(text-illustration-index-source-attrs text-index-title-template? text-illustration-index-entry-template?) ;
number-number-style ::= number:number-style::(common-data-style-attlist style-text-properties? number-text? (any-number number-text?)? style-map*) ;
target-frame ::= (office:target-frame::targetFrameName)? ;
chart-axis ::= chart:axis::(chart-axis-attlist chart-title? chart-categories? chart-grid*) ;
draw-custom-shape ::= draw:custom-shape::(draw-custom-shape-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text draw-enhanced-geometry?) ;
form-form ::= form:form::(common-form-control-attlist form-form-attlist form-properties? office-event-listeners? (controls | form-form)* form-connection-resource?) ;
list-source ::= (form:list-source::string)? ;
common-draw-gradient-attlist ::= (draw:name::styleName)? ;
 common-draw-gradient-attlist ::= (draw:display-name::string)? ;
 common-draw-gradient-attlist ::= draw:style::gradient-style ;
 common-draw-gradient-attlist ::= (draw:cx::percent)? (draw:cy::percent)? ;
 common-draw-gradient-attlist ::= (draw:angle::integer)? ;
 common-draw-gradient-attlist ::= (draw:border::percent)? ;
draw-polyline ::= draw:polyline::(common-draw-points-attlist common-draw-position-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
text-numbered-paragraph ::= text:numbered-paragraph::(text-numbered-paragraph-attr text-number? text-p | text-h) ;
text-list-level-style-bullet-attr ::= (text:style-name::styleNameRef)? ;
 text-list-level-style-bullet-attr ::= text:bullet-char::character ;
 text-list-level-style-bullet-attr ::= common-num-format-prefix-suffix-attlist ;
 text-list-level-style-bullet-attr ::= (text:bullet-relative-size::percent)? ;
form-time-attlist ::= (form:value::time)? ;
 form-time-attlist ::= (form:current-value::time)? ;
 form-time-attlist ::= (form:min-value::time)? ;
 form-time-attlist ::= (form:max-value::time)? ;
anim-transition-filter-attlist ::= smil:type::string ;
 anim-transition-filter-attlist ::= (smil:subtype::string)? ;
 anim-transition-filter-attlist ::= (smil:direction::("forward" | "reverse"))? ;
 anim-transition-filter-attlist ::= (smil:fadeColor::("forward" | "reverse"))? ;
 anim-transition-filter-attlist ::= (smil:mode::("in" | "out"))? ;
common-draw-data-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:show::"embed")? (xlink:actuate::"onLoad")? ;
common-table-change-attlist ::= table:id::string ;
 common-table-change-attlist ::= (table:acceptance-state::("accepted" | "rejected" | "pending"))? ;
 common-table-change-attlist ::= (table:rejecting-change-id::string)? ;
text-index-entry-text ::= text:index-entry-text::((text:style-name::styleNameRef)?) ;
common-field-formula-attlist ::= (text:formula::formula)? ;
chart-axis-attlist ::= chart:dimension::("x" | "y" | "z") ;
 chart-axis-attlist ::= (chart:name::string)? ;
 chart-axis-attlist ::= (chart:style-name::styleNameRef)? ;
table-data-pilot-field ::= table:data-pilot-field::(table-data-pilot-field-attlist table-data-pilot-level? table-data-pilot-field-reference? table-data-pilot-groups?) ;
chart-chart-attlist ::= chart:class::namespacedToken ;
 chart-chart-attlist ::= common-draw-size-attlist ;
 chart-chart-attlist ::= (chart:column-mapping::string)? ;
 chart-chart-attlist ::= (chart:row-mapping::string)? ;
 chart-chart-attlist ::= (chart:style-name::styleNameRef)? ;
text-set-page-variable-attlist ::= (text:active::boolean)? ;
 text-set-page-variable-attlist ::= (text:page-adjust::integer)? ;
draw-custom-shape-attlist ::= (draw:engine::namespacedToken)? ;
 draw-custom-shape-attlist ::= (draw:data::string)? ;
draw-g ::= draw:g::(draw-g-attlist common-draw-z-index-attlist common-draw-name-attlist common-draw-id-attlist common-draw-style-name-attlist common-text-spreadsheet-shape-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* shape*) ;
table-named-range-attlist ::= table:name::string table:cell-range-address::cellRangeAddress (table:base-cell-address::cellAddress)? (table:range-usable-as::("none" | (("print-range" | "filter" | "repeat-row" | "repeat-column")+)))? ;
number-quarter-attlist ::= (number:style::("short" | "long"))? ;
table-filter-condition-attlist ::= table:field-number::nonNegativeInteger ;
 table-filter-condition-attlist ::= table:value::string ;
 table-filter-condition-attlist ::= table:operator::string ;
 table-filter-condition-attlist ::= (table:case-sensitive::string)? ;
 table-filter-condition-attlist ::= (table:data-type::("text" | "number"))? ;
table-previous ::= table:previous::((table:id::string)? table-change-track-table-cell) ;
number-text-style ::= number:text-style::(common-data-style-attlist style-text-properties? number-text? (number-text-content number-text?)* style-map*) ;
office-settings ::= (office:settings::(config-config-item-set+))? ;
table-tracked-changes-attlist ::= (table:track-changes::boolean)? ;
common-num-format-prefix-suffix-attlist ::= (style:num-prefix::string)? (style:num-suffix::string)? ;
dropdown ::= (form:dropdown::boolean)? ;
common-disabled-attlist ::= (form:disabled::boolean)? ;
draw-g-attlist ::= (svg:y::coordinate)? ;
text-list-style-content ::= text:list-level-style-number::(text-list-level-style-attr text-list-level-style-number-attr style-list-level-properties? style-text-properties?) ;
 text-list-style-content ::= text:list-level-style-bullet::(text-list-level-style-attr text-list-level-style-bullet-attr style-list-level-properties? style-text-properties?) ;
 text-list-style-content ::= text:list-level-style-image::(text-list-level-style-attr text-list-level-style-image-attr style-list-level-properties?) ;
table-table-row-attlist ::= (table:number-rows-repeated::positiveInteger)? ;
 table-table-row-attlist ::= (table:style-name::styleNameRef)? ;
 table-table-row-attlist ::= (table:default-cell-style-name::styleNameRef)? ;
 table-table-row-attlist ::= (table:visibility::table-visibility-value)? ;
common-svg-gradient-attlist ::= (svg:gradientUnits::"objectBoundingBox")? (svg:gradientTransform::string)? (svg:spreadMethod::("pad" | "reflect" | "repeat"))? ;
 common-svg-gradient-attlist ::= draw:name::styleName ;
 common-svg-gradient-attlist ::= (draw:display-name::string)? ;
style-page-layout ::= style:page-layout::(style-page-layout-attlist style-page-layout-properties? style-header-style? style-footer-style?) ;
draw-a-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? ;
 draw-a-attlist ::= (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? ;
 draw-a-attlist ::= (office:name::string)? ;
 draw-a-attlist ::= (office:title::string)? ;
 draw-a-attlist ::= (office:server-map::boolean)? ;
office-process-content ::= (office:process-content::boolean)? ;
form-date-attlist ::= (form:value::date)? ;
 form-date-attlist ::= (form:current-value::date)? ;
 form-date-attlist ::= (form:min-value::date)? ;
 form-date-attlist ::= (form:max-value::date)? ;
common-form-relative-image-position-attlist ::= ((form:image-position::"center")?) | (form:image-position::("start" | "end" | "top" | "bottom") (form:image-align::("start" | "center" | "end"))?) ;
office-spreadsheet-content-prelude ::= table-tracked-changes? text-decls table-decls ;
common-draw-area-attlist ::= (xlink:href::anyURI)? (xlink:type::"simple")? (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? ;
 common-draw-area-attlist ::= (office:name::string)? ;
 common-draw-area-attlist ::= (draw:nohref::"nohref")? ;
common-draw-name-attlist ::= (draw:name::string)? ;
size ::= (form:size::nonNegativeInteger)? ;
common-value-attlist ::= (form:value::string)? ;
table-table-attlist ::= (table:name::string)? ;
 table-table-attlist ::= (table:style-name::styleNameRef)? ;
 table-table-attlist ::= (table:protected::boolean)? (table:protection-key::string())? ;
 table-table-attlist ::= (table:print::boolean)? ;
 table-table-attlist ::= (table:print-ranges::cellRangeAddressList)? ;
 table-table-attlist ::= (table:is-sub-table::boolean)? ;
--------------------odf::opendoc-1.2-manifest.bgf--------------------
key-derivation-attlist ::= manifest:key-derivation-name::("PBKDF2" | anyURI) manifest:salt::base64Binary manifest:iteration-count::nonNegativeInteger (manifest:key-size::nonNegativeInteger)? ;
encryption-data ::= manifest:encryption-data::(encryption-data-attlist algorithm start-key-generation? key-derivation) ;
start-key-generation-attlist ::= manifest:start-key-generation-name::("SHA1" | anyURI) (manifest:key-size::nonNegativeInteger)? ;
anyElements ::= (string()? anyAttListOrElements string()?)* ;
file-entry-attlist ::= manifest:full-path::string (manifest:size::nonNegativeInteger)? manifest:media-type::string (manifest:preferred-view-mode::("edit" | "presentation-slide-show" | "read-only" | namespacedToken))? (manifest:version::string)? ;
file-entry ::= manifest:file-entry::(file-entry-attlist encryption-data?) ;
--------------------odf::opendoc-1.2.bgf--------------------
style-font-face ::= style:font-face::(style-font-face-attlist svg-font-face-src? svg-definition-src?) ;
svg-linearGradient ::= svg:linearGradient::(common-svg-gradient-attlist (svg:x1::(coordinate | percent))? (svg:y1::(coordinate | percent))? (svg:x2::(coordinate | percent))? (svg:y2::(coordinate | percent))? svg-stop*) ;
style-page-layout-attlist ::= style:name::styleName (style:page-usage::("all" | "left" | "right" | "mirrored"))? ;
number-currency-style ::= number:currency-style::(common-data-style-attlist common-auto-reorder-attlist style-text-properties? number-text? ((number-and-text currency-symbol-and-text?) | (currency-symbol-and-text number-and-text?))? style-map*) ;
common-editable-attlist ::= (style:editable::boolean)? ;
number-fraction-attlist ::= (number:min-numerator-digits::integer)? (number:min-denominator-digits::integer)? (number:denominator-value::integer)? ;
text-notes-configuration-content ::= text-note-class (text:citation-style-name::styleNameRef)? (text:citation-body-style-name::styleNameRef)? (text:default-style-name::styleNameRef)? (text:master-page-name::styleNameRef)? (text:start-value::nonNegativeInteger)? common-num-format-prefix-suffix-attlist common-num-format-attlist? (text:start-numbering-at::("document" | "chapter" | "page"))? (text:footnotes-position::("text" | "page" | "section" | "document"))? (text:note-continuation-notice-forward::string())? (text:note-continuation-notice-backward::string())? ;
draw-applet-attlist ::= (draw:code::string)? (draw:object::string)? (draw:archive::string)? (draw:may-script::boolean)? xml-id? ;
common-section-attlist ::= (text:style-name::styleNameRef)? text:name::string (text:protected::boolean)? (text:protection-key::string)? (text:protection-key-digest-algorithm::anyIRI)? xml-id? ;
db-auto-increment-attlist ::= (db:additional-column-statement::string)? (db:row-retrieving-statement::string)? ;
text-list-item-content ::= text-number? (text-p | text-h | text-list | text-soft-page-break)* ;
presentation-hide-shape ::= presentation:hide-shape::(common-presentation-effect-attlist presentation-sound?) ;
common-title-attlist ::= (form:title::string)? ;
table-data-pilot-table-attlist ::= table:name::string (table:application-data::string)? (table:grand-total::("none" | "row" | "column" | "both"))? (table:ignore-empty-rows::boolean)? (table:identify-categories::boolean)? table:target-range-address::cellRangeAddress (table:buttons::cellRangeAddressList)? (table:show-filter-button::boolean)? (table:drill-down-on-double-click::boolean)? ;
presentation-hide-text ::= presentation:hide-text::(common-presentation-effect-attlist presentation-sound?) ;
table-deletion-attlist ::= table:type::("row" | "column" | "table") table:position::integer (table:table::integer)? (table:multi-deletion-spanned::integer)? ;
draw-area-rectangle ::= draw:area-rectangle::(common-draw-area-attlist svg:x::coordinate svg:y::coordinate svg:width::length svg:height::length svg-title? svg-desc? office-event-listeners?) ;
table-table-rows ::= table:table-rows::((text-soft-page-break? table-table-row)+) ;
number-date-style ::= number:date-style::(common-data-style-attlist common-auto-reorder-attlist common-format-source-attlist style-text-properties? number-text? (any-date number-text?)+ style-map*) ;
draw-marker-attlist ::= draw:name::styleName (draw:display-name::string)? ;
table-table-cell-attlist-extra ::= (table:number-columns-spanned::positiveInteger)? (table:number-rows-spanned::positiveInteger)? (table:number-matrix-columns-spanned::positiveInteger)? (table:number-matrix-rows-spanned::positiveInteger)? ;
common-text-spreadsheet-shape-attlist ::= (table:end-cell-address::cellAddress)? (table:end-x::coordinate)? (table:end-y::coordinate)? (table:table-background::boolean)? common-text-anchor-attlist ;
common-draw-text-style-name-attlist ::= (draw:text-style-name::styleNameRef)? ;
style-graphic-properties-elements ::= text-list-style? style-background-image style-columns ;
common-style-header-footer-attlist ::= (style:display::boolean)? ;
table-movement ::= table:movement::(common-table-change-attlist table-source-range-address table-target-range-address office-change-info table-dependencies? table-deletions?) ;
text-bookmark-ref-content ::= (text:reference-format::(common-ref-format-values | "number-no-superior" | "number-all-superior" | "number"))? ;
style-tab-stop-attlist ::= style:position::length ((style:type::("left" | "center" | "right"))?) | (style:type::"char" style-tab-stop-char-attlist) (style:leader-type::lineType)? (style:leader-style::lineStyle)? (style:leader-width::lineWidth)? (style:leader-color::("font-color" | color))? (style:leader-text::character)? (style:leader-text-style::styleNameRef)? ;
text-h ::= text:h::(heading-attrs paragraph-attrs text-number? paragraph-content-or-hyperlink*) ;
table-table-column-attlist ::= (table:number-columns-repeated::positiveInteger)? (table:style-name::styleNameRef)? (table:visibility::table-visibility-value)? (table:default-cell-style-name::styleNameRef)? xml-id? ;
draw-handle-attlist ::= (draw:handle-mirror-vertical::boolean)? (draw:handle-mirror-horizontal::boolean)? (draw:handle-switched::boolean)? draw:handle-position::string (draw:handle-range-x-minimum::string)? (draw:handle-range-x-maximum::string)? (draw:handle-range-y-minimum::string)? (draw:handle-range-y-maximum::string)? (draw:handle-polar::string)? (draw:handle-radius-range-minimum::string)? (draw:handle-radius-range-maximum::string)? ;
style-columns ::= (style:columns::(style-columns-attlist style-column-sep? style-column*))? ;
text-a ::= text:a::(text-a-attlist office-event-listeners? paragraph-content*) ;
table-subtotal-rules-attlist ::= (table:bind-styles-to-content::boolean)? (table:case-sensitive::boolean)? (table:page-breaks-on-group-change::boolean)? ;
table-calculation-setting-attlist ::= (table:case-sensitive::boolean)? (table:precision-as-shown::boolean)? (table:search-criteria-must-apply-to-whole-cell::boolean)? (table:automatic-find-labels::boolean)? (table:use-regular-expressions::boolean)? (table:use-wildcards::boolean)? (table:null-year::positiveInteger)? ;
common-repeat ::= (form:repeat::boolean)? ;
number-time-style ::= number:time-style::(number-time-style-attlist common-data-style-attlist common-format-source-attlist style-text-properties? number-text? (any-time number-text?)+ style-map*) ;
common-linked-cell ::= (form:linked-cell::(cellAddress | string))? ;
style-list-level-label-alignment ::= (style:list-level-label-alignment::style-list-level-label-alignment-attlist)? ;
db-query-attlist ::= db:command::string (db:escape-processing::boolean)? ;
chart-title ::= chart:title::(chart-title-attlist text-p?) ;
common-tab-attlist ::= (form:tab-index::nonNegativeInteger)? (form:tab-stop::boolean)? ;
common-anim-attlist ::= (presentation:node-type::("default" | "on-click" | "with-previous" | "after-previous" | "timing-root" | "main-sequence" | "interactive-sequence"))? (presentation:preset-id::string)? (presentation:preset-sub-type::string)? (presentation:preset-class::("custom" | "entrance" | "exit" | "emphasis" | "motion-path" | "ole-action" | "media-call"))? (presentation:master-element::IDREF)? (presentation:group-id::string)? (xml-id (anim:id::NCName)?)? ;
draw-frame ::= draw:frame::(common-draw-shape-with-text-and-styles-attlist common-draw-position-attlist common-draw-rel-size-attlist common-draw-caption-id-attlist presentation-shape-attlist draw-frame-attlist (draw-text-box | draw-image | draw-object | draw-object-ole | draw-applet | draw-floating-frame | draw-plugin | table-table)* office-event-listeners? draw-glue-point* draw-image-map? svg-title? svg-desc? (draw-contour-polygon | draw-contour-path)?) ;
common-form-control-content ::= form-properties? office-event-listeners? ;
db-character-set-attlist ::= (db:encoding::textEncoding)? ;
style-list-level-label-alignment-attlist ::= text:label-followed-by::("listtab" | "space" | "nothing") (text:list-tab-stop-position::length)? (fo:text-indent::length)? (fo:margin-left::length)? ;
table-iteration ::= table:iteration::((table:status::("enable" | "disable"))? (table:steps::positiveInteger)? (table:maximum-difference::double)?) ;
common-draw-caption-id-attlist ::= (draw:caption-id::IDREF)? ;
text-user-index-source ::= text:user-index-source::(text-user-index-source-attr text-index-title-template? text-user-index-entry-template* text-index-source-styles*) ;
text-meta-attlist ::= common-in-content-meta-attlist? xml-id? ;
text-index-entry-chapter ::= text:index-entry-chapter::((text:style-name::styleNameRef)? text-index-entry-chapter-attrs) ;
db-index-column-attlist ::= db:name::string (db:is-ascending::boolean)? ;
common-break-attlist ::= (fo:break-before::("auto" | "column" | "page"))? (fo:break-after::("auto" | "column" | "page"))? ;
db-column-definition-attlist ::= db:name::string (db:data-type::db-data-types)? (db:type-name::string)? (db:precision::positiveInteger)? (db:scale::positiveInteger)? (db:is-nullable::("no-nulls" | "nullable"))? (db:is-empty-allowed::boolean)? (db:is-autoincrement::boolean)? ;
chart-error-indicator-attlist ::= (chart:style-name::styleNameRef)? chart:dimension::chart-dimension ;
table-table-source-attlist ::= (table:mode::("copy-all" | "copy-results-only"))? (table:table-name::string)? ;
draw-layer ::= draw:layer::(draw-layer-attlist svg-title? svg-desc?) ;
common-text-align ::= (fo:text-align::("start" | "end" | "left" | "right" | "center" | "justify"))? ;
style-style-attlist ::= style:name::styleName (style:display-name::string)? (style:parent-style-name::styleNameRef)? (style:next-style-name::styleNameRef)? (style:list-level::(positiveInteger | Îµ))? (style:list-style-name::(styleName | Îµ))? (style:master-page-name::styleNameRef)? (style:auto-update::boolean)? (style:data-style-name::styleNameRef)? (style:percentage-data-style-name::styleNameRef)? (style:class::string)? (style:default-outline-level::(positiveInteger | Îµ))? ;
draw-image-attlist ::= (draw:filter-name::string)? xml-id? ;
paragraph-attrs ::= (text:style-name::styleNameRef)? (text:class-names::styleNameRefs)? (text:cond-style-name::styleNameRef)? (xml-id (text:id::NCName)?)? common-in-content-meta-attlist? ;
table-columns-no-group ::= (table-columns (table-table-header-columns table-columns?)?) | (table-table-header-columns table-columns?) ;
form-fixed-text-attlist ::= form-control-attlist for common-disabled-attlist label common-printable-attlist common-title-attlist (form:multi-line::boolean)? ;
draw-floating-frame-attlist ::= (draw:frame-name::string)? xml-id? ;
style-drawing-page-properties-elements ::= presentation-sound? ;
common-draw-size-attlist ::= (svg:width::length)? (svg:height::length)? ;
common-db-default-value ::= common-value-and-type-attlist? ;
table-table-template ::= table:table-template::(table-table-template-attlist table-first-row? table-last-row? table-first-column? table-last-column? table-body table-even-rows? table-odd-rows? table-even-columns? table-odd-columns? table-background?) ;
form-password-attlist ::= form-control-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-linked-cell (form:echo-char::character)? ;
common-style-direction-attlist ::= (style:direction::("ltr" | "ttb"))? ;
text-sequence-ref-name ::= (text:ref-name::string)? ;
table-insertion ::= table:insertion::(table-insertion-attlist common-table-change-attlist office-change-info table-dependencies? table-deletions?) ;
chart-categories ::= chart:categories::((table:cell-range-address::cellRangeAddressList)?) ;
draw-page-attlist ::= (draw:name::string)? (draw:style-name::styleNameRef)? draw:master-page-name::styleNameRef (presentation:presentation-page-layout-name::styleNameRef)? (xml-id (draw:id::NCName)?)? (draw:nav-order::IDREFS)? ;
table-consolidation-attlist ::= table:function::("average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string) table:source-cell-range-addresses::cellRangeAddressList table:target-cell-address::cellAddress (table:use-labels::("none" | "row" | "column" | "both"))? (table:link-to-source-data::boolean)? ;
style-tab-stops ::= (style:tab-stops::(style-tab-stop*))? ;
dr3d-light-attlist ::= (dr3d:diffuse-color::color)? dr3d:direction::vector3D (dr3d:enabled::boolean)? (dr3d:specular::boolean)? ;
style-drawing-page-properties-attlist ::= (presentation:transition-type::("manual" | "automatic" | "semi-automatic"))? (presentation:transition-style::("none" | "fade-from-left" | "fade-from-top" | "fade-from-right" | "fade-from-bottom" | "fade-from-upperleft" | "fade-from-upperright" | "fade-from-lowerleft" | "fade-from-lowerright" | "move-from-left" | "move-from-top" | "move-from-right" | "move-from-bottom" | "move-from-upperleft" | "move-from-upperright" | "move-from-lowerleft" | "move-from-lowerright" | "uncover-to-left" | "uncover-to-top" | "uncover-to-right" | "uncover-to-bottom" | "uncover-to-upperleft" | "uncover-to-upperright" | "uncover-to-lowerleft" | "uncover-to-lowerright" | "fade-to-center" | "fade-from-center" | "vertical-stripes" | "horizontal-stripes" | "clockwise" | "counterclockwise" | "open-vertical" | "open-horizontal" | "close-vertical" | "close-horizontal" | "wavyline-from-left" | "wavyline-from-top" | "wavyline-from-right" | "wavyline-from-bottom" | "spiralin-left" | "spiralin-right" | "spiralout-left" | "spiralout-right" | "roll-from-top" | "roll-from-left" | "roll-from-right" | "roll-from-bottom" | "stretch-from-left" | "stretch-from-top" | "stretch-from-right" | "stretch-from-bottom" | "vertical-lines" | "horizontal-lines" | "dissolve" | "random" | "vertical-checkerboard" | "horizontal-checkerboard" | "interlocking-horizontal-left" | "interlocking-horizontal-right" | "interlocking-vertical-top" | "interlocking-vertical-bottom" | "fly-away" | "open" | "close" | "melt"))? (presentation:transition-speed::presentationSpeeds)? (smil:type::string)? (smil:subtype::string)? (smil:direction::("forward" | "reverse"))? (smil:fadeColor::color)? (presentation:duration::duration)? (presentation:visibility::("visible" | "hidden"))? (draw:background-size::("full" | "border"))? (presentation:background-objects-visible::boolean)? (presentation:background-visible::boolean)? (presentation:display-header::boolean)? (presentation:display-footer::boolean)? (presentation:display-page-number::boolean)? (presentation:display-date-time::boolean)? ;
common-db-object-title ::= (db:title::string)? ;
table-sort-groups-attlist ::= (table:data-type::("text" | "number" | "automatic" | string))? (table:order::("ascending" | "descending"))? ;
presentation-dim ::= presentation:dim::(presentation-dim-attlist presentation-sound?) ;
anim-animate-motion-attlist ::= (svg:path::pathData)? (svg:origin::string)? (smil:calcMode::("discrete" | "linear" | "paced" | "spline"))? ;
presentation-date-time-decl-attlist ::= presentation:name::string presentation:source::("fixed" | "current-date") (style:data-style-name::styleNameRef)? ;
text-template-name-attlist ::= (text:display::("full" | "path" | "name" | "name-and-extension" | "area" | "title"))? ;
draw-caption-attlist ::= (draw:caption-point-x::coordinate draw:caption-point-y::coordinate)? (draw:corner-radius::nonNegativeLength)? ;
form-button-attlist ::= form-control-attlist button-type common-disabled-attlist label image-data common-printable-attlist common-tab-attlist target-frame target-location common-title-attlist common-value-attlist common-form-relative-image-position-attlist common-repeat common-delay-for-repeat (form:default-button::boolean)? (form:toggle::boolean)? (form:focus-on-click::boolean)? (form:xforms-submission::string)? ;
chart-equation-attlist ::= (chart:automatic-content::boolean)? (chart:display-r-square::boolean)? (chart:display-equation::boolean)? common-draw-position-attlist (chart:style-name::styleNameRef)? ;
chart-wall-attlist ::= (svg:width::length)? (chart:style-name::styleNameRef)? ;
text-index-title-template ::= text:index-title-template::((text:style-name::styleNameRef)? string()) ;
db-table-filter ::= db:table-filter::(db-table-filter-attlist db-table-include-filter? db-table-exclude-filter?) ;
chart-series ::= chart:series::(chart-series-attlist chart-domain* chart-mean-value? chart-regression-curve* chart-error-indicator* chart-data-point* chart-data-label?) ;
common-field-display-value-none-attlist ::= (text:display::("value" | "none"))? ;
table-calculation-settings ::= table:calculation-settings::(table-calculation-setting-attlist table-null-date? table-iteration?) ;
table-data-pilot-member-attlist ::= table:name::string (table:display::boolean)? (table:show-details::boolean)? ;
db-data-source-setting-attlist ::= (db:data-source-setting-is-list::boolean)? db:data-source-setting-name::string db:data-source-setting-type::db-data-source-setting-types ;
number-number-attlist ::= (number:decimal-replacement::string)? (number:display-factor::double)? ;
common-field-description-attlist ::= (text:description::string)? ;
chart-series-attlist ::= (chart:values-cell-range-address::cellRangeAddressList)? (chart:label-cell-address::cellRangeAddressList)? (chart:class::namespacedToken)? (chart:attached-axis::string)? (chart:style-name::styleNameRef)? xml-id? ;
common-draw-transform-attlist ::= (draw:transform::string)? ;
common-shadow-attlist ::= (style:shadow::shadowType)? ;
common-data-field-attlist ::= (form:data-field::string)? ;
text-list-header-attr ::= xml-id? ;
table-database-source-sql-attlist ::= table:database-name::string table:sql-statement::string (table:parse-sql-statement::boolean)? ;
presentation-shape-attlist ::= (presentation:class::presentation-classes)? (presentation:placeholder::boolean)? (presentation:user-transformed::boolean)? ;
paragraph-content ::= string() | (text:s::((text:c::nonNegativeInteger)?)) | (text:tab::text-tab-attr) | (text:line-break::Îµ) | text-soft-page-break | (text:span::((text:style-name::styleNameRef)? (text:class-names::styleNameRefs)? paragraph-content-or-hyperlink*)) | (text:meta::(text-meta-attlist paragraph-content-or-hyperlink*)) | text-bookmark | text-bookmark-start | text-bookmark-end | (text:reference-mark::(text:name::string)) | (text:reference-mark-start::(text:name::string)) | (text:reference-mark-end::(text:name::string)) | (text:note::(text-note-class (text:id::string)? text:note-citation::((text:label::string)? string()) text:note-body::(text-content*))) | (text:ruby::((text:style-name::styleNameRef)? text:ruby-base::(paragraph-content-or-hyperlink*) text:ruby-text::((text:style-name::styleNameRef)? string()))) | office-annotation | office-annotation-end | change-marks | shape | (text:date::(text-date-attlist string())) | (text:time::(text-time-attlist string())) | (text:page-number::(text-page-number-attlist string())) | (text:page-continuation::(text-page-continuation-attlist string())) | (text:sender-firstname::(common-field-fixed-attlist string())) | (text:sender-lastname::(common-field-fixed-attlist string())) | (text:sender-initials::(common-field-fixed-attlist string())) | (text:sender-title::(common-field-fixed-attlist string())) | (text:sender-position::(common-field-fixed-attlist string())) | (text:sender-email::(common-field-fixed-attlist string())) | (text:sender-phone-private::(common-field-fixed-attlist string())) | (text:sender-fax::(common-field-fixed-attlist string())) | (text:sender-company::(common-field-fixed-attlist string())) | (text:sender-phone-work::(common-field-fixed-attlist string())) | (text:sender-street::(common-field-fixed-attlist string())) | (text:sender-city::(common-field-fixed-attlist string())) | (text:sender-postal-code::(common-field-fixed-attlist string())) | (text:sender-country::(common-field-fixed-attlist string())) | (text:sender-state-or-province::(common-field-fixed-attlist string())) | (text:author-name::(common-field-fixed-attlist string())) | (text:author-initials::(common-field-fixed-attlist string())) | (text:chapter::(text-chapter-attlist string())) | (text:file-name::(text-file-name-attlist string())) | (text:template-name::(text-template-name-attlist string())) | (text:sheet-name::string()) | (text:variable-set::(common-field-name-attlist common-field-formula-attlist common-value-and-type-attlist common-field-display-value-none-attlist common-field-data-style-name-attlist string())) | (text:variable-get::(common-field-name-attlist common-field-display-value-formula-attlist common-field-data-style-name-attlist string())) | (text:variable-input::(common-field-name-attlist common-field-description-attlist common-value-type-attlist common-field-display-value-none-attlist common-field-data-style-name-attlist string())) | (text:user-field-get::(common-field-name-attlist common-field-display-value-formula-none-attlist common-field-data-style-name-attlist string())) | (text:user-field-input::(common-field-name-attlist common-field-description-attlist common-field-data-style-name-attlist string())) | (text:sequence::(common-field-name-attlist common-field-formula-attlist common-field-num-format-attlist text-sequence-ref-name string())) | (text:expression::(common-field-formula-attlist common-value-and-type-attlist? common-field-display-value-formula-attlist common-field-data-style-name-attlist string())) | (text:text-input::(common-field-description-attlist string())) | (text:initial-creator::(common-field-fixed-attlist string())) | (text:creation-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::dateOrDateTime)? string())) | (text:creation-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::timeOrDateTime)? string())) | (text:description::(common-field-fixed-attlist string())) | (text:user-defined::(common-field-fixed-attlist text:name::string common-field-data-style-name-attlist (office:value::double)? (office:date-value::dateOrDateTime)? (office:time-value::duration)? (office:boolean-value::boolean)? (office:string-value::string)? string())) | (text:print-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::time)? string())) | (text:print-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::date)? string())) | (text:printed-by::(common-field-fixed-attlist string())) | (text:title::(common-field-fixed-attlist string())) | (text:subject::(common-field-fixed-attlist string())) | (text:keywords::(common-field-fixed-attlist string())) | (text:editing-cycles::(common-field-fixed-attlist string())) | (text:editing-duration::(common-field-fixed-attlist common-field-data-style-name-attlist (text:duration::duration)? string())) | (text:modification-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::time)? string())) | (text:modification-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::date)? string())) | (text:creator::(common-field-fixed-attlist string())) | (text:page-count::(common-field-num-format-attlist string())) | (text:paragraph-count::(common-field-num-format-attlist string())) | (text:word-count::(common-field-num-format-attlist string())) | (text:character-count::(common-field-num-format-attlist string())) | (text:table-count::(common-field-num-format-attlist string())) | (text:image-count::(common-field-num-format-attlist string())) | (text:object-count::(common-field-num-format-attlist string())) | (text:database-display::(text-database-display-attlist string())) | (text:database-next::text-database-next-attlist) | (text:database-row-select::text-database-row-select-attlist) | (text:database-row-number::(common-field-database-table common-field-num-format-attlist (text:value::nonNegativeInteger)? string())) | (text:database-name::(common-field-database-table string())) | (text:page-variable-set::(text-set-page-variable-attlist string())) | (text:page-variable-get::(text-get-page-variable-attlist string())) | (text:placeholder::(text-placeholder-attlist string())) | (text:conditional-text::(text-conditional-text-attlist string())) | (text:hidden-text::(text-hidden-text-attlist string())) | (text:reference-ref::(text-common-ref-content text-bookmark-ref-content)) | (text:bookmark-ref::(text-common-ref-content text-bookmark-ref-content)) | (text:note-ref::(text-common-ref-content text-note-ref-content)) | (text:sequence-ref::(text-common-ref-content text-sequence-ref-content)) | (text:script::((xlink:type::"simple" xlink:href::anyIRI) | string() (script:language::string)?)) | (text:execute-macro::((text:name::string)? office-event-listeners? string())) | (text:hidden-paragraph::(text-hidden-paragraph-attlist string())) | (text:dde-connection::(text:connection-name::string string())) | (text:measure::(text:kind::("value" | "unit" | "gap") string())) | (text:table-formula::(common-field-formula-attlist common-field-display-value-formula-attlist common-field-data-style-name-attlist string())) | (text:meta-field::(text-meta-field-attlist paragraph-content-or-hyperlink*)) | (text:toc-mark-start::text-toc-mark-start-attrs) | (text:toc-mark-end::text-id) | (text:toc-mark::(text:string-value::string text-outline-level)) | (text:user-index-mark-start::(text-id text-outline-level text-index-name)) | (text:user-index-mark-end::text-id) | (text:user-index-mark::(text:string-value::string text-outline-level text-index-name)) | (text:alphabetical-index-mark-start::(text-id text-alphabetical-index-mark-attrs)) | (text:alphabetical-index-mark-end::text-id) | (text:alphabetical-index-mark::(text:string-value::string text-alphabetical-index-mark-attrs)) | (text:bibliography-mark::(text:bibliography-type::text-bibliography-types ((text:identifier::string) | (text:address::string) | (text:annote::string) | (text:author::string) | (text:booktitle::string) | (text:chapter::string) | (text:edition::string) | (text:editor::string) | (text:howpublished::string) | (text:institution::string) | (text:journal::string) | (text:month::string) | (text:note::string) | (text:number::string) | (text:organizations::string) | (text:pages::string) | (text:publisher::string) | (text:school::string) | (text:series::string) | (text:title::string) | (text:report-type::string) | (text:volume::string) | (text:year::string) | (text:url::string) | (text:custom1::string) | (text:custom2::string) | (text:custom3::string) | (text:custom4::string) | (text:custom5::string) | (text:isbn::string) | (text:issn::string))* string())) | (presentation:header::Îµ) | (presentation:footer::Îµ) | (presentation:date-time::Îµ) ;
config-config-item-map-entry-attlist ::= (config:name::string)? ;
common-endsync-timing-attlist ::= (smil:endsync::("first" | "last" | "all" | "media" | IDREF))? ;
common-db-table-style-name ::= (db:style-name::styleNameRef)? (db:default-row-style-name::styleNameRef)? ;
db-table-definition-attlist ::= (db:type::string)? ;
common-vertical-pos-attlist ::= (style:vertical-pos::("top" | "middle" | "bottom" | "from-top" | "below"))? (svg:y::coordinate)? ;
style-chart-properties-attlist ::= (chart:scale-text::boolean)? (chart:three-dimensional::boolean)? (chart:deep::boolean)? (chart:right-angled-axes::boolean)? (chart:symbol-type::"none") | (chart:symbol-type::"automatic") | (chart:symbol-type::"named-symbol" chart:symbol-name::("square" | "diamond" | "arrow-down" | "arrow-up" | "arrow-right" | "arrow-left" | "bow-tie" | "hourglass" | "circle" | "star" | "x" | "plus" | "asterisk" | "horizontal-bar" | "vertical-bar")) | (chart:symbol-type::"image" chart:symbol-image::(xlink:href::anyIRI)) | Îµ (chart:symbol-width::nonNegativeLength)? (chart:symbol-height::nonNegativeLength)? (chart:sort-by-x-values::boolean)? (chart:vertical::boolean)? (chart:connect-bars::boolean)? (chart:gap-width::integer)? (chart:overlap::integer)? (chart:group-bars-per-axis::boolean)? (chart:japanese-candle-stick::boolean)? (chart:interpolation::("none" | "cubic-spline" | "b-spline"))? (chart:spline-order::positiveInteger)? (chart:spline-resolution::positiveInteger)? (chart:pie-offset::nonNegativeInteger)? (chart:angle-offset::angle)? (chart:hole-size::percent)? (chart:lines::boolean)? (chart:solid-type::("cuboid" | "cylinder" | "cone" | "pyramid"))? (chart:stacked::boolean)? (chart:percentage::boolean)? (chart:treat-empty-cells::("use-zero" | "leave-gap" | "ignore"))? (chart:link-data-style-to-source::boolean)? (chart:logarithmic::boolean)? (chart:maximum::double)? (chart:minimum::double)? (chart:origin::double)? (chart:interval-major::double)? (chart:interval-minor-divisor::positiveInteger)? (chart:tick-marks-major-inner::boolean)? (chart:tick-marks-major-outer::boolean)? (chart:tick-marks-minor-inner::boolean)? (chart:tick-marks-minor-outer::boolean)? (chart:reverse-direction::boolean)? (chart:display-label::boolean)? (chart:text-overlap::boolean)? (text:line-break::boolean)? (chart:label-arrangement::("side-by-side" | "stagger-even" | "stagger-odd"))? common-style-direction-attlist common-rotation-angle-attlist (chart:data-label-number::("none" | "value" | "percentage" | "value-and-percentage"))? (chart:data-label-text::boolean)? (chart:data-label-symbol::boolean)? (chart:label-separator::text-p)? (chart:label-position::labelPositions)? (chart:label-position-negative::labelPositions)? (chart:visible::boolean)? (chart:auto-position::boolean)? (chart:auto-size::boolean)? (chart:mean-value::boolean)? (chart:error-category::("none" | "variance" | "standard-deviation" | "percentage" | "error-margin" | "constant" | "standard-error" | "cell-range"))? (chart:error-percentage::double)? (chart:error-margin::double)? (chart:error-lower-limit::double)? (chart:error-upper-limit::double)? (chart:error-upper-indicator::boolean)? (chart:error-lower-indicator::boolean)? (chart:error-lower-range::cellRangeAddressList)? (chart:error-upper-range::cellRangeAddressList)? (chart:series-source::("columns" | "rows"))? (chart:regression-type::("none" | "linear" | "logarithmic" | "exponential" | "power"))? (chart:axis-position::("start" | "end" | double))? (chart:axis-label-position::("near-axis" | "near-axis-other-side" | "outside-start" | "outside-end"))? (chart:tick-mark-position::("at-labels" | "at-axis" | "at-labels-and-axis"))? (chart:include-hidden-cells::boolean)? ;
text-linenumbering-configuration ::= text:linenumbering-configuration::(text-linenumbering-configuration-attlist text-linenumbering-separator?) ;
draw-path ::= draw:path::(common-draw-path-data-attlist common-draw-position-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
table-table-cell-content ::= table-cell-range-source? office-annotation? table-detective? text-content* ;
presentation-show-text ::= presentation:show-text::(common-presentation-effect-attlist presentation-sound?) ;
draw-area-circle ::= draw:area-circle::(common-draw-area-attlist svg:cx::coordinate svg:cy::coordinate svg:r::length svg-title? svg-desc? office-event-listeners?) ;
text-user-index-source-attr ::= text-index-scope-attr text-relative-tab-stop-position-attr (text:use-index-marks::boolean)? (text:use-index-source-styles::boolean)? (text:use-graphics::boolean)? (text:use-tables::boolean)? (text:use-floating-frames::boolean)? (text:use-objects::boolean)? (text:copy-outline-levels::boolean)? text:index-name::string ;
draw-connector ::= draw:connector::(draw-connector-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist common-draw-viewbox-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
anyElements ::= (string()? anyAttListOrElements string()?)* ;
text-linenumbering-configuration-attlist ::= (text:number-lines::boolean)? common-num-format-attlist? (text:style-name::styleNameRef)? (text:increment::nonNegativeInteger)? (text:number-position::("left" | "right" | "inner" | "outer"))? (text:offset::nonNegativeLength)? (text:count-empty-lines::boolean)? (text:count-in-text-boxes::boolean)? (text:restart-on-page::boolean)? ;
list-source-type ::= (form:list-source-type::("table" | "query" | "sql" | "sql-pass-through" | "value-list" | "table-fields"))? ;
chart-data-point ::= chart:data-point::(chart-data-point-attlist chart-data-label?) ;
office-scripts ::= (office:scripts::(office-script* office-event-listeners?))? ;
common-vertical-margin-attlist ::= (fo:margin-top::(nonNegativeLength | percent))? (fo:margin-bottom::(nonNegativeLength | percent))? ;
table-data-pilot-table ::= table:data-pilot-table::(table-data-pilot-table-attlist (table-database-source-sql | table-database-source-table | table-database-source-query | table-source-service | table-source-cell-range)? table-data-pilot-field+) ;
label ::= (form:label::string)? ;
style-header-footer-properties-attlist ::= (svg:height::length)? (fo:min-height::length)? common-horizontal-margin-attlist common-vertical-margin-attlist common-margin-attlist common-border-attlist common-border-line-width-attlist common-padding-attlist common-background-color-attlist common-shadow-attlist (style:dynamic-spacing::boolean)? ;
style-font-face-attlist ::= (svg:font-family::string)? (svg:font-style::fontStyle)? (svg:font-variant::fontVariant)? (svg:font-weight::fontWeight)? (svg:font-stretch::("normal" | "ultra-condensed" | "extra-condensed" | "condensed" | "semi-condensed" | "semi-expanded" | "expanded" | "extra-expanded" | "ultra-expanded"))? (svg:font-size::positiveLength)? (svg:unicode-range::string)? (svg:units-per-em::integer)? (svg:panose-1::string)? (svg:stemv::integer)? (svg:stemh::integer)? (svg:slope::integer)? (svg:cap-height::integer)? (svg:x-height::integer)? (svg:accent-height::integer)? (svg:ascent::integer)? (svg:descent::integer)? (svg:widths::string)? (svg:bbox::string)? (svg:ideographic::integer)? (svg:alphabetic::integer)? (svg:mathematical::integer)? (svg:hanging::integer)? (svg:v-ideographic::integer)? (svg:v-alphabetic::integer)? (svg:v-mathematical::integer)? (svg:v-hanging::integer)? (svg:underline-position::integer)? (svg:underline-thickness::integer)? (svg:strikethrough-position::integer)? (svg:strikethrough-thickness::integer)? (svg:overline-position::integer)? (svg:overline-thickness::integer)? style:name::string (style:font-adornments::string)? (style:font-family-generic::fontFamilyGeneric)? (style:font-pitch::fontPitch)? (style:font-charset::textEncoding)? ;
style-num-letter-sync-attlist ::= (style:num-letter-sync::boolean)? ;
common-field-fixed-attlist ::= (text:fixed::boolean)? ;
text-changed-region-attr ::= xml-id (text:id::NCName)? ;
draw-stroke-dash-attlist ::= draw:name::styleName (draw:display-name::string)? (draw:style::("rect" | "round"))? (draw:dots1::integer)? (draw:dots1-length::(length | percent))? (draw:dots2::integer)? (draw:dots2-length::(length | percent))? (draw:distance::(length | percent))? ;
table-cell-content-deletion ::= table:cell-content-deletion::((table:id::string)? table-cell-address? table-change-track-table-cell?) ;
table-deletion ::= table:deletion::(table-deletion-attlist common-table-change-attlist office-change-info table-dependencies? table-deletions? table-cut-offs?) ;
number-seconds-attlist ::= (number:style::("short" | "long"))? (number:decimal-places::integer)? ;
text-index-entry-chapter-attrs ::= (text:display::("name" | "number" | "number-and-name" | "plain-number" | "plain-number-and-name"))? (text:outline-level::positiveInteger)? ;
common-field-data-style-name-attlist ::= (style:data-style-name::styleNameRef)? ;
style-column-attlist ::= style:rel-width::relativeLength (fo:start-indent::length)? (fo:end-indent::length)? (fo:space-before::length)? (fo:space-after::length)? ;
common-fill-timing-attlist ::= (smil:fill::("remove" | "freeze" | "hold" | "auto" | "default" | "transition"))? ;
office-annotation ::= office:annotation::(office-annotation-attlist draw-caption-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist dc-creator? dc-date? meta-date-string? (text-p | text-list)*) ;
common-anim-target-attlist ::= (smil:targetElement::IDREF)? (anim:sub-item::string)? ;
draw-line ::= draw:line::(draw-line-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
style-ruby-properties-attlist ::= (style:ruby-position::("above" | "below"))? (style:ruby-align::("left" | "center" | "right" | "distribute-letter" | "distribute-space"))? ;
table-sort-by-attlist ::= table:field-number::nonNegativeInteger (table:data-type::("text" | "number" | "automatic" | string))? (table:order::("ascending" | "descending"))? ;
draw-page-thumbnail ::= draw:page-thumbnail::(draw-page-thumbnail-attlist common-draw-position-attlist common-draw-size-attlist presentation-shape-attlist common-draw-shape-with-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc?) ;
table-source-service-attlist ::= table:name::string table:source-name::string table:object-name::string (table:user-name::string)? (table:password::string)? ;
common-calendar-attlist ::= (number:calendar::("gregorian" | "gengou" | "ROC" | "hanja_yoil" | "hanja" | "hijri" | "jewish" | "buddhist" | string))? ;
table-cell-content-change ::= table:cell-content-change::(common-table-change-attlist table-cell-address office-change-info table-dependencies? table-deletions? table-previous) ;
chart-legend-attlist ::= (chart:legend-position::("start" | "end" | "top" | "bottom") (chart:legend-align::("start" | "center" | "end"))?) | (chart:legend-position::("top-start" | "bottom-start" | "top-end" | "bottom-end")) | Îµ common-draw-position-attlist (style:legend-expansion::("wide" | "high" | "balanced")) | (style:legend-expansion::"custom" style:legend-expansion-aspect-ratio::double) | Îµ (chart:style-name::styleNameRef)? ;
table-subtotal-rules ::= table:subtotal-rules::(table-subtotal-rules-attlist table-sort-groups? table-subtotal-rule*) ;
chart-plot-area ::= chart:plot-area::(chart-plot-area-attlist dr3d-light* chart-axis* chart-series* chart-stock-gain-marker? chart-stock-loss-marker? chart-stock-range-line? chart-wall? chart-floor?) ;
number-percentage-style ::= number:percentage-style::(common-data-style-attlist style-text-properties? number-text? number-and-text? style-map*) ;
number-era-attlist ::= (number:style::("short" | "long"))? ;
chart-plot-area-attlist ::= common-draw-position-attlist common-draw-size-attlist (chart:style-name::styleNameRef)? (table:cell-range-address::cellRangeAddressList)? (chart:data-source-has-labels::("none" | "row" | "column" | "both"))? dr3d-scene-attlist common-dr3d-transform-attlist xml-id? ;
form-formatted-text-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist common-linked-cell common-spin-button common-repeat common-delay-for-repeat (form:max-value::string)? (form:min-value::string)? (form:validation::boolean)? ;
db-query ::= db:query::(db-query-attlist common-db-object-name common-db-object-title common-db-object-description common-db-table-style-name db-order-statement? db-filter-statement? db-columns? db-update-table?) ;
common-current-value-attlist ::= (form:current-value::string)? ;
common-table-template-attlist ::= table:style-name::styleNameRef (table:paragraph-style-name::styleNameRef)? ;
table-content-validation ::= table:content-validation::(table-validation-attlist table-help-message? (table-error-message | (table-error-macro office-event-listeners))?) ;
table-data-pilot-level ::= table:data-pilot-level::(table-data-pilot-level-attlist table-data-pilot-subtotals? table-data-pilot-members? table-data-pilot-display-info? table-data-pilot-sort-info? table-data-pilot-layout-info?) ;
draw-equation-attlist ::= (draw:name::string)? (draw:formula::string)? ;
text-conditional-text-attlist ::= text:condition::string text:string-value-if-true::string text:string-value-if-false::string (text:current-value::boolean)? ;
common-source-cell-range ::= (form:source-cell-range::(cellRangeAddress | string))? ;
style-table-column-properties-attlist ::= (style:column-width::positiveLength)? (style:rel-column-width::relativeLength)? (style:use-optimal-column-width::boolean)? common-break-attlist ;
text-list-item-attr ::= (text:start-value::nonNegativeInteger)? (text:style-override::styleNameRef)? xml-id? ;
selected ::= (form:selected::boolean)? ;
common-draw-circle-ellipse-attlist ::= (draw:kind::("full" | "section" | "cut" | "arc"))? (draw:start-angle::angle)? (draw:end-angle::angle)? ;
text-page-number-attlist ::= common-field-num-format-attlist common-field-fixed-attlist (text:page-adjust::integer)? (text:select-page::("previous" | "current" | "next"))? ;
draw-enhanced-geometry-attlist ::= (draw:type::custom-shape-type)? (svg:viewBox::(integer integer integer integer))? (draw:mirror-vertical::boolean)? (draw:mirror-horizontal::boolean)? (draw:text-rotate-angle::angle)? (draw:extrusion-allowed::boolean)? (draw:text-path-allowed::boolean)? (draw:concentric-gradient-fill-allowed::boolean)? (draw:extrusion::boolean)? (draw:extrusion-brightness::zeroToHundredPercent)? (draw:extrusion-depth::(length double))? (draw:extrusion-diffusion::percent)? (draw:extrusion-number-of-line-segments::integer)? (draw:extrusion-light-face::boolean)? (draw:extrusion-first-light-harsh::boolean)? (draw:extrusion-second-light-harsh::boolean)? (draw:extrusion-first-light-level::zeroToHundredPercent)? (draw:extrusion-second-light-level::zeroToHundredPercent)? (draw:extrusion-first-light-direction::vector3D)? (draw:extrusion-second-light-direction::vector3D)? (draw:extrusion-metal::boolean)? (dr3d:shade-mode::("flat" | "phong" | "gouraud" | "draft"))? (draw:extrusion-rotation-angle::(angle angle))? (draw:extrusion-rotation-center::vector3D)? (draw:extrusion-shininess::zeroToHundredPercent)? (draw:extrusion-skew::(double angle))? (draw:extrusion-specularity::zeroToHundredPercent)? (dr3d:projection::("parallel" | "perspective"))? (draw:extrusion-viewpoint::point3D)? (draw:extrusion-origin::(extrusionOrigin extrusionOrigin))? (draw:extrusion-color::boolean)? (draw:enhanced-path::string)? (draw:path-stretchpoint-x::double)? (draw:path-stretchpoint-y::double)? (draw:text-areas::string)? (draw:glue-points::string)? (draw:glue-point-type::("none" | "segments" | "rectangle"))? (draw:glue-point-leaving-directions::string)? (draw:text-path::boolean)? (draw:text-path-mode::("normal" | "path" | "shape"))? (draw:text-path-scale::("path" | "shape"))? (draw:text-path-same-letter-heights::boolean)? (draw:modifiers::string)? ;
style-presentation-page-layout ::= style:presentation-page-layout::(style:name::styleName (style:display-name::string)? presentation-placeholder*) ;
text-index-entry-page-number ::= text:index-entry-page-number::((text:style-name::styleNameRef)?) ;
presentation-sound-attlist ::= (presentation:play-full::boolean)? xml-id? ;
draw-gradient-attlist ::= (draw:start-color::color)? (draw:end-color::color)? (draw:start-intensity::zeroToHundredPercent)? (draw:end-intensity::zeroToHundredPercent)? ;
style-background-image-attlist ::= (style:repeat::("no-repeat" | "repeat" | "stretch"))? (style:position::("left" | "center" | "right" | "top" | "bottom" | (horiBackPos vertBackPos) | (vertBackPos horiBackPos)))? (style:filter-name::string)? (draw:opacity::zeroToHundredPercent)? ;
text-sequence-decl-attlist ::= common-field-name-attlist text:display-outline-level::nonNegativeInteger (text:separation-character::character)? ;
svg-font-face-name ::= svg:font-face-name::((svg:name::string)?) ;
bound-column ::= (form:bound-column::string)? ;
db-key-attlist ::= (db:name::string)? db:type::("primary" | "unique" | "foreign") (db:referenced-table-name::string)? (db:update-rule::("cascade" | "restrict" | "set-null" | "no-action" | "set-default"))? (db:delete-rule::("cascade" | "restrict" | "set-null" | "no-action" | "set-default"))? ;
style-drop-cap-attlist ::= (style:length::("word" | positiveInteger))? (style:lines::positiveInteger)? (style:distance::length)? (style:style-name::styleNameRef)? ;
text-tracked-changes ::= (text:tracked-changes::(text-tracked-changes-attr text-changed-region*))? ;
text-index-entry-link-end ::= text:index-entry-link-end::((text:style-name::styleNameRef)?) ;
number-hours-attlist ::= (number:style::("short" | "long"))? ;
common-meta-literal-attlist ::= (xhtml:datatype::CURIE)? (xhtml:content::string)? ;
office-meta ::= (office:meta::office-meta-content-strict)? ;
style-table-row-properties-attlist ::= (style:row-height::positiveLength)? (style:min-row-height::nonNegativeLength)? (style:use-optimal-row-height::boolean)? common-background-color-attlist common-break-attlist (fo:keep-together::("auto" | "always"))? ;
chart-regression-curve ::= chart:regression-curve::(chart-regression-curve-attlist chart-equation?) ;
common-auto-reorder-attlist ::= (number:automatic-order::boolean)? ;
db-component ::= db:component::(db-component-attlist common-db-object-name common-db-object-title common-db-object-description (office-document | math-math)?) ;
chart-footer ::= chart:footer::(chart-title-attlist text-p?) ;
common-stock-marker-attlist ::= (chart:style-name::styleNameRef)? ;
chart-regression-curve-attlist ::= (chart:style-name::styleNameRef)? ;
db-component-attlist ::= (xlink:type::"simple" xlink:href::anyIRI (xlink:show::"none")? (xlink:actuate::"onRequest")?)? (db:as-template::boolean)? ;
common-value-and-type-attlist ::= (office:value-type::"float" office:value::double) | (office:value-type::"percentage" office:value::double) | (office:value-type::"currency" office:value::double (office:currency::string)?) | (office:value-type::"date" office:date-value::dateOrDateTime) | (office:value-type::"time" office:time-value::duration) | (office:value-type::"boolean" office:boolean-value::boolean) | (office:value-type::"string" (office:string-value::string)?) ;
draw-caption ::= draw:caption::(draw-caption-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
common-decimal-places-attlist ::= (number:decimal-places::integer)? ;
form-listbox-attlist ::= form-control-attlist common-disabled-attlist dropdown common-printable-attlist size common-tab-attlist common-title-attlist bound-column common-data-field-attlist list-source list-source-type common-linked-cell list-linkage-type common-source-cell-range (form:multiple::boolean)? (form:xforms-list-source::string)? ;
style-table-cell-properties-attlist ::= (style:vertical-align::("top" | "middle" | "bottom" | "automatic"))? (style:text-align-source::("fix" | "value-type"))? common-style-direction-attlist (style:glyph-orientation-vertical::("auto" | "0" | "0deg" | "0rad" | "0grad"))? common-writing-mode-attlist common-shadow-attlist common-background-color-attlist common-border-attlist (style:diagonal-tl-br::string)? (style:diagonal-tl-br-widths::borderWidths)? (style:diagonal-bl-tr::string)? (style:diagonal-bl-tr-widths::borderWidths)? common-border-line-width-attlist common-padding-attlist (fo:wrap-option::("no-wrap" | "wrap"))? common-rotation-angle-attlist (style:rotation-align::("none" | "bottom" | "top" | "center"))? (style:cell-protect::("none" | "hidden-and-protected" | (("protected" | "formula-hidden")+)))? (style:print-content::boolean)? (style:decimal-places::nonNegativeInteger)? (style:repeat-content::boolean)? (style:shrink-to-fit::boolean)? ;
chart-data-label-attlist ::= common-draw-position-attlist (chart:style-name::styleNameRef)? ;
text-alphabetical-index-mark-attrs ::= (text:key1::string)? (text:key2::string)? (text:string-value-phonetic::string)? (text:key1-phonetic::string)? (text:key2-phonetic::string)? (text:main-entry::boolean)? ;
chart-floor-attlist ::= (svg:width::length)? (chart:style-name::styleNameRef)? ;
table-database-range ::= table:database-range::(table-database-range-attlist (table-database-source-sql | table-database-source-table | table-database-source-query)? table-filter? table-sort? table-subtotal-rules?) ;
table-decls ::= table-calculation-settings? table-content-validations? table-label-ranges? ;
text-index-scope-attr ::= (text:index-scope::("document" | "chapter"))? ;
text-relative-tab-stop-position-attr ::= (text:relative-tab-stop-position::boolean)? ;
number-currency-symbol-attlist ::= (number:language::languageCode)? (number:country::countryCode)? (number:script::scriptCode)? (number:rfc-language-tag::language)? ;
text-list-level-style-number-attr ::= (text:style-name::styleNameRef)? common-num-format-attlist common-num-format-prefix-suffix-attlist (text:display-levels::positiveInteger)? (text:start-value::positiveInteger)? ;
db-connection-resource-attlist ::= xlink:type::"simple" xlink:href::anyIRI (xlink:show::"none")? (xlink:actuate::"onRequest")? ;
presentation-notes-attlist ::= (style:page-layout-name::styleNameRef)? (draw:style-name::styleNameRef)? ;
common-border-attlist ::= (fo:border::string)? (fo:border-top::string)? (fo:border-bottom::string)? (fo:border-left::string)? (fo:border-right::string)? ;
currency-symbol-and-text ::= number-currency-symbol number-text? ;
table-database-range-attlist ::= (table:name::string)? (table:is-selection::boolean)? (table:on-update-keep-styles::boolean)? (table:on-update-keep-size::boolean)? (table:has-persistent-data::boolean)? (table:orientation::("column" | "row"))? (table:contains-header::boolean)? (table:display-filter-buttons::boolean)? table:target-range-address::cellRangeAddress (table:refresh-delay::boolean)? ;
common-spin-button ::= (form:spin-button::boolean)? ;
text-object-index-source-attrs ::= text-index-scope-attr text-relative-tab-stop-position-attr (text:use-spreadsheet-objects::boolean)? (text:use-math-objects::boolean)? (text:use-draw-objects::boolean)? (text:use-chart-objects::boolean)? (text:use-other-objects::boolean)? ;
db-show-deleted ::= (db:show-deleted::boolean)? ;
table-change-track-table-cell-attlist ::= (table:cell-address::cellAddress)? (table:matrix-covered::boolean)? (table:formula::string)? (table:number-matrix-columns-spanned::positiveInteger)? (table:number-matrix-rows-spanned::positiveInteger)? common-value-and-type-attlist? ;
text-illustration-index-source ::= text:illustration-index-source::(text-illustration-index-source-attrs text-index-title-template? text-illustration-index-entry-template?) ;
number-number-style ::= number:number-style::(common-data-style-attlist style-text-properties? number-text? (any-number number-text?)? style-map*) ;
target-frame ::= (office:target-frame::targetFrameName)? ;
db-host-and-port ::= db:hostname::string (db:port::positiveInteger)? ;
form-time-attlist ::= (form:value::time)? (form:current-value::time)? (form:min-value::time)? (form:max-value::time)? ;
db-key-column-attlist ::= (db:name::string)? (db:related-column-name::string)? ;
text-index-entry-text ::= text:index-entry-text::((text:style-name::styleNameRef)?) ;
common-draw-data-attlist ::= xlink:type::"simple" xlink:href::anyIRI (xlink:show::"embed")? (xlink:actuate::"onLoad")? ;
chart-axis-attlist ::= chart:dimension::chart-dimension (chart:name::string)? (chart:style-name::styleNameRef)? ;
db-table-definition ::= db:table-definition::(common-db-table-name-attlist db-table-definition-attlist db-column-definitions db-keys? db-indices?) ;
draw-g ::= draw:g::(draw-g-attlist common-draw-z-index-attlist common-draw-name-attlist common-draw-id-attlist common-draw-style-name-attlist common-text-spreadsheet-shape-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* shape*) ;
table-named-range-attlist ::= table:name::string table:cell-range-address::cellRangeAddress (table:base-cell-address::cellAddress)? (table:range-usable-as::("none" | (("print-range" | "filter" | "repeat-row" | "repeat-column")+)))? ;
number-quarter-attlist ::= (number:style::("short" | "long"))? ;
table-filter-condition-attlist ::= table:field-number::nonNegativeInteger table:value::(string | double) table:operator::string (table:case-sensitive::string)? (table:data-type::("text" | "number"))? ;
table-previous ::= table:previous::((table:id::string)? table-change-track-table-cell) ;
number-text-style ::= number:text-style::(common-data-style-attlist style-text-properties? number-text? (number-text-content number-text?)* style-map*) ;
list-linkage-type ::= (form:list-linkage-type::("selection" | "selection-indices"))? ;
draw-g-attlist ::= (svg:y::coordinate)? ;
text-list-style-content ::= (text:list-level-style-number::(text-list-level-style-attr text-list-level-style-number-attr style-list-level-properties? style-text-properties?)) | (text:list-level-style-bullet::(text-list-level-style-attr text-list-level-style-bullet-attr style-list-level-properties? style-text-properties?)) | (text:list-level-style-image::(text-list-level-style-attr text-list-level-style-image-attr style-list-level-properties?)) ;
table-table-row-attlist ::= (table:number-rows-repeated::positiveInteger)? (table:style-name::styleNameRef)? (table:default-cell-style-name::styleNameRef)? (table:visibility::table-visibility-value)? xml-id? ;
office-process-content ::= (office:process-content::boolean)? ;
form-date-attlist ::= (form:value::date)? (form:current-value::date)? (form:min-value::date)? (form:max-value::date)? ;
common-form-relative-image-position-attlist ::= ((form:image-position::"center")?) | (form:image-position::("start" | "end" | "top" | "bottom") (form:image-align::("start" | "center" | "end"))?) ;
common-value-attlist ::= (form:value::string)? ;
style-footnote-sep-attlist ::= (style:width::length)? (style:rel-width::percent)? (style:color::color)? (style:line-style::lineStyle)? (style:adjustment::("left" | "center" | "right"))? (style:distance-before-sep::length)? (style:distance-after-sep::length)? ;
style-column-sep-attlist ::= (style:style::("none" | "solid" | "dotted" | "dashed" | "dot-dashed"))? style:width::length (style:height::zeroToHundredPercent)? (style:vertical-align::("top" | "middle" | "bottom"))? (style:color::color)? ;
db-connection-data ::= db:connection-data::(db-connection-data-attlist db-database-description | db-connection-resource db-login?) ;
db-file-based-database-attlist ::= xlink:type::"simple" xlink:href::anyIRI db:media-type::string (db:extension::string)? ;
common-form-control-attlist ::= (form:name::string)? (form:control-implementation::namespacedToken)? ;
common-svg-font-face-xlink-attlist ::= xlink:type::"simple" xlink:href::anyIRI (xlink:actuate::"onRequest")? ;
draw-area-polygon ::= draw:area-polygon::(common-draw-area-attlist svg:x::coordinate svg:y::coordinate svg:width::length svg:height::length common-draw-viewbox-attlist common-draw-points-attlist svg-title? svg-desc? office-event-listeners?) ;
office-forms ::= (office:forms::(office-forms-attlist (form-form | xforms-model)*))? ;
common-restart-timing-attlist ::= (smil:restart::("never" | "always" | "whenNotActive" | "default"))? ;
common-maxlength-attlist ::= (form:max-length::nonNegativeInteger)? ;
draw-object-attlist ::= (draw:notify-on-update-of-ranges::(cellRangeAddressList | string))? xml-id? ;
common-rotation-angle-attlist ::= (style:rotation-angle::angle)? ;
common-readonly-attlist ::= (form:readonly::boolean)? ;
draw-measure ::= draw:measure::(draw-measure-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
draw-control ::= draw:control::(draw-control-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? draw-glue-point*) ;
text-sequence-ref-content ::= (text:reference-format::(common-ref-format-values | "category-and-value" | "caption" | "value"))? ;
office-forms-attlist ::= (form:automatic-focus::boolean)? (form:apply-design-mode::boolean)? ;
draw-plugin-attlist ::= (draw:mime-type::string)? xml-id? ;
svg-stop ::= svg:stop::(svg:offset::(double | percent) (svg:stop-color::color)? (svg:stop-opacity::double)?) ;
db-driver-settings-attlist ::= db-show-deleted (db:system-driver-settings::string)? (db:base-dn::string)? db-is-first-row-header-line (db:parameter-name-substitution::boolean)? ;
table-validation-attlist ::= table:name::string (table:condition::string)? (table:base-cell-address::cellAddress)? (table:allow-empty-cell::boolean)? (table:display-list::("none" | "unsorted" | "sort-ascending"))? ;
draw-page-thumbnail-attlist ::= (draw:page-number::positiveInteger)? ;
text-tab-attr ::= (text:tab-ref::nonNegativeInteger)? ;
text-bookmark-attlist ::= text:name::string xml-id? ;
text-style-name ::= (form:text-style-name::styleNameRef)? ;
text-table-of-content-source ::= text:table-of-content-source::(text-table-of-content-source-attlist text-index-title-template? text-table-of-content-entry-template* text-index-source-styles*) ;
table-source-cell-range ::= table:source-cell-range::(table-source-cell-range-attlist table-filter?) ;
text-index-entry-tab-stop-attrs ::= (style:leader-char::character)? (style:type::"right") | (style:type::"left" style:position::length) ;
common-field-database-table-attlist ::= text:table-name::string (text:table-type::("table" | "query" | "command"))? ;
common-margin-attlist ::= (fo:margin::(nonNegativeLength | percent))? ;
common-spline-anim-value-attlist ::= (smil:keyTimes::string)? (smil:keySplines::string)? ;
common-draw-layer-name-attlist ::= (draw:layer::string)? ;
draw-rect-attlist ::= ((draw:corner-radius::nonNegativeLength)?) | ((svg:rx::nonNegativeLength)? (svg:ry::nonNegativeLength)?) ;
common-field-display-value-formula-attlist ::= (text:display::("value" | "formula"))? ;
common-db-object-description ::= (db:description::string)? ;
style-page-layout-content ::= style-page-layout-properties? style-header-style? style-footer-style? ;
text-table-of-content-source-attlist ::= (text:outline-level::positiveInteger)? (text:use-outline-level::boolean)? (text:use-index-marks::boolean)? (text:use-index-source-styles::boolean)? (text:index-scope::("document" | "chapter"))? (text:relative-tab-stop-position::boolean)? ;
db-index-attlist ::= db:name::string (db:catalog-name::string)? (db:is-unique::boolean)? (db:is-clustered::boolean)? ;
draw-object-ole-attlist ::= (draw:class-id::string)? xml-id? ;
text-table-index-source ::= text:table-index-source::(text-illustration-index-source-attrs text-index-title-template? text-table-index-entry-template?) ;
office-automatic-styles ::= (office:automatic-styles::(styles style-page-layout*))? ;
db-local-socket-name ::= (db:local-socket::string)? ;
draw-polygon ::= draw:polygon::(common-draw-points-attlist common-draw-position-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
anim-animate-color-attlist ::= (anim:color-interpolation::("rgb" | "hsl"))? (anim:color-interpolation-direction::("clockwise" | "counter-clockwise"))? ;
style-section-properties-attlist ::= common-background-color-attlist common-horizontal-margin-attlist (style:protect::boolean)? common-editable-attlist (text:dont-balance-text-columns::boolean)? common-writing-mode-attlist ;
table-scenario-attlist ::= table:scenario-ranges::cellRangeAddressList table:is-active::boolean (table:display-border::boolean)? (table:border-color::color)? (table:copy-back::boolean)? (table:copy-styles::boolean)? (table:copy-formulas::boolean)? (table:comment::string)? (table:protected::boolean)? ;
common-control-id-attlist ::= xml-id (form:id::NCName)? ;
table-data-pilot-level-attlist ::= (table:show-empty::boolean)? ;
style-footer-style ::= style:footer-style::(style-header-footer-properties?) ;
presentation-event-listener ::= presentation:event-listener::(presentation-event-listener-attlist presentation-sound?) ;
text-outline-level ::= (text:outline-level::positiveInteger)? ;
common-background-color-attlist ::= (fo:background-color::("transparent" | color))? ;
draw-frame-attlist ::= (draw:copy-of::string)? ;
common-restart-default-attlist ::= (smil:restartDefault::("never" | "always" | "whenNotActive" | "inherit"))? ;
chart-domain ::= chart:domain::((table:cell-range-address::cellRangeAddressList)?) ;
office-text-attlist ::= (text:global::boolean)? (text:use-soft-page-breaks::boolean)? ;
text-file-name-attlist ::= (text:display::("full" | "path" | "name" | "name-and-extension"))? common-field-fixed-attlist ;
presentation-event-listener-attlist ::= script:event-name::string presentation:action::("none" | "previous-page" | "next-page" | "first-page" | "last-page" | "hide" | "stop" | "execute" | "show" | "verb" | "fade-out" | "sound" | "last-visited-page") (presentation:effect::presentationEffects)? (presentation:direction::presentationEffectDirections)? (presentation:speed::presentationSpeeds)? (presentation:start-scale::percent)? (xlink:type::"simple" xlink:href::anyIRI (xlink:show::"embed")? (xlink:actuate::"onRequest")?)? (presentation:verb::nonNegativeInteger)? ;
common-fill-default-attlist ::= (smil:fillDefault::("remove" | "freeze" | "hold" | "transition" | "auto" | "inherit"))? ;
common-form-visual-effect-attlist ::= (form:visual-effect::("flat" | "3d"))? ;
header-footer-content ::= (text-tracked-changes text-decls (text-h | text-p | text-list | table-table | text-section | text-table-of-content | text-illustration-index | text-table-index | text-object-index | text-user-index | text-alphabetical-index | text-bibliography | text-index-title | change-marks)*) | (style-region-left? style-region-center? style-region-right?) ;
style-page-layout-properties-attlist ::= (fo:page-width::length)? (fo:page-height::length)? common-num-format-attlist? common-num-format-prefix-suffix-attlist (style:paper-tray-name::("default" | string))? (style:print-orientation::("portrait" | "landscape"))? common-horizontal-margin-attlist common-vertical-margin-attlist common-margin-attlist common-border-attlist common-border-line-width-attlist common-padding-attlist common-shadow-attlist common-background-color-attlist (style:register-truth-ref-style-name::styleNameRef)? (style:print::(("headers" | "grid" | "annotations" | "objects" | "charts" | "drawings" | "formulas" | "zero-values")*))? (style:print-page-order::("ttb" | "ltr"))? (style:first-page-number::(positiveInteger | "continue"))? (style:scale-to::percent)? (style:scale-to-pages::positiveInteger)? (style:table-centering::("horizontal" | "vertical" | "both" | "none"))? (style:footnote-max-height::length)? common-writing-mode-attlist (style:layout-grid-mode::("none" | "line" | "both"))? (style:layout-grid-standard-mode::boolean)? (style:layout-grid-base-height::length)? (style:layout-grid-ruby-height::length)? (style:layout-grid-lines::positiveInteger)? (style:layout-grid-base-width::length)? (style:layout-grid-color::color)? (style:layout-grid-ruby-below::boolean)? (style:layout-grid-print::boolean)? (style:layout-grid-display::boolean)? (style:layout-grid-snap-to::boolean)? ;
draw-text-box-attlist ::= (draw:chain-next-name::string)? (draw:corner-radius::nonNegativeLength)? (fo:min-height::(length | percent))? (fo:min-width::(length | percent))? (fo:max-height::(length | percent))? (fo:max-width::(length | percent))? (xml-id (text:id::NCName)?)? ;
table-error-message ::= table:error-message::((table:title::string)? (table:display::boolean)? (table:message-type::("stop" | "warning" | "information"))? text-p*) ;
style-paragraph-properties-attlist ::= (fo:line-height::("normal" | nonNegativeLength | percent))? (style:line-height-at-least::nonNegativeLength)? (style:line-spacing::length)? (style:font-independent-line-spacing::boolean)? common-text-align (fo:text-align-last::("start" | "center" | "justify"))? (style:justify-single-word::boolean)? (fo:keep-together::("auto" | "always"))? (fo:widows::nonNegativeInteger)? (fo:orphans::nonNegativeInteger)? (style:tab-stop-distance::nonNegativeLength)? (fo:hyphenation-keep::("auto" | "page"))? (fo:hyphenation-ladder-count::("no-limit" | positiveInteger))? (style:register-true::boolean)? common-horizontal-margin-attlist (fo:text-indent::(length | percent))? (style:auto-text-indent::boolean)? common-vertical-margin-attlist common-margin-attlist common-break-attlist common-background-color-attlist common-border-attlist common-border-line-width-attlist (style:join-border::boolean)? common-padding-attlist common-shadow-attlist common-keep-with-next-attlist (text:number-lines::boolean)? (text:line-number::nonNegativeInteger)? (style:text-autospace::("none" | "ideograph-alpha"))? (style:punctuation-wrap::("simple" | "hanging"))? (style:line-break::("normal" | "strict"))? (style:vertical-align::("top" | "middle" | "bottom" | "auto" | "baseline"))? common-writing-mode-attlist (style:writing-mode-automatic::boolean)? (style:snap-to-layout-grid::boolean)? common-page-number-attlist common-background-transparency-attlist ;
table-table-row-group-attlist ::= (table:display::boolean)? ;
draw-regular-polygon ::= draw:regular-polygon::(draw-regular-polygon-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
common-border-line-width-attlist ::= (style:border-line-width::borderWidths)? (style:border-line-width-top::borderWidths)? (style:border-line-width-bottom::borderWidths)? (style:border-line-width-left::borderWidths)? (style:border-line-width-right::borderWidths)? ;
draw-layer-attlist ::= draw:name::string (draw:protected::boolean)? (draw:display::("always" | "screen" | "printer" | "none"))? ;
draw-circle ::= draw:circle::((draw-circle-attlist common-draw-circle-ellipse-pos-attlist) | (common-draw-position-attlist common-draw-size-attlist) common-draw-circle-ellipse-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
draw-page ::= draw:page::(common-presentation-header-footer-attlist draw-page-attlist svg-title? svg-desc? draw-layer-set? office-forms? shape* (presentation-animations | animation-element)? presentation-notes?) ;
presentation-settings ::= (presentation:settings::(presentation-settings-attlist presentation-show*))? ;
text-outline-level-style-attlist ::= text:level::positiveInteger (text:style-name::styleNameRef)? common-num-format-attlist common-num-format-prefix-suffix-attlist (text:display-levels::positiveInteger)? (text:start-value::positiveInteger)? ;
common-anim-values-attlist ::= (smil:values::string)? (anim:formula::string)? common-anim-set-values-attlist (smil:from::string)? (smil:by::string)? ;
office-database ::= office:database::(db-data-source db-forms? db-reports? db-queries? db-table-presentations? db-schema-definition?) ;
db-delimiter-attlist ::= (db:field::string)? (db:string::string)? (db:decimal::string)? (db:thousand::string)? ;
draw-hatch-attlist ::= draw:name::styleName (draw:display-name::string)? draw:style::("single" | "double" | "triple") (draw:color::color)? (draw:distance::length)? (draw:rotation::angle)? ;
db-server-database-attlist ::= db:type::namespacedToken db-host-and-port | db-local-socket-name (db:database-name::string)? ;
presentation-settings-attlist ::= (presentation:start-page::string)? (presentation:show::string)? (presentation:full-screen::boolean)? (presentation:endless::boolean)? (presentation:pause::duration)? (presentation:show-logo::boolean)? (presentation:force-manual::boolean)? (presentation:mouse-visible::boolean)? (presentation:mouse-as-pen::boolean)? (presentation:start-with-navigator::boolean)? (presentation:animations::("enabled" | "disabled"))? (presentation:transition-on-click::("enabled" | "disabled"))? (presentation:stay-on-top::boolean)? (presentation:show-end-of-presentation-slide::boolean)? ;
number-day-of-week-attlist ::= (number:style::("short" | "long"))? ;
number-and-text ::= number-number number-text? ;
common-keep-with-next-attlist ::= (fo:keep-with-next::("auto" | "always"))? ;
common-text-anchor-attlist ::= (text:anchor-type::("page" | "frame" | "paragraph" | "char" | "as-char"))? (text:anchor-page-number::positiveInteger)? ;
common-field-num-format-attlist ::= common-num-format-attlist? ;
presentation-show-shape ::= presentation:show-shape::(common-presentation-effect-attlist presentation-sound?) ;
table-insertion-attlist ::= table:type::("row" | "column" | "table") table:position::integer (table:count::positiveInteger)? (table:table::integer)? ;
office-document-common-attrs ::= office:version::"1.2" (grddl:transformation::(anyIRI*))? ;
common-draw-style-name-attlist ::= ((draw:style-name::styleNameRef)? (draw:class-names::styleNameRefs)?) | ((presentation:style-name::styleNameRef)? (presentation:class-names::styleNameRefs)?) ;
text-bibliography-configuration-attlist ::= (text:prefix::string)? (text:suffix::string)? (text:numbered-entries::boolean)? (text:sort-by-position::boolean)? (fo:language::languageCode)? (fo:country::countryCode)? (fo:script::scriptCode)? (style:rfc-language-tag::language)? (text:sort-algorithm::string)? ;
office-master-styles ::= (office:master-styles::(style-master-page* style-handout-master? draw-layer-set?))? ;
table-table-header-rows ::= table:table-header-rows::((text-soft-page-break? table-table-row)+) ;
table-table-cell-attlist ::= (table:number-columns-repeated::positiveInteger)? (table:style-name::styleNameRef)? (table:content-validation-name::string)? (table:formula::string)? common-value-and-type-attlist? (table:protect::boolean)? (table:protected::boolean)? xml-id? common-in-content-meta-attlist? ;
number-minutes-attlist ::= (number:style::("short" | "long"))? ;
db-login-attlist ::= ((db:user-name::string) | (db:use-system-user::boolean))? (db:is-password-required::boolean)? (db:login-timeout::positiveInteger)? ;
table-change-deletion ::= table:change-deletion::((table:id::string)?) ;
common-delay-for-repeat ::= (form:delay-for-repeat::duration)? ;
table-filter-attlist ::= (table:target-range-address::cellRangeAddress)? (table:condition-source::("self" | "cell-range"))? (table:condition-source-range-address::cellRangeAddress)? (table:display-duplicates::boolean)? ;
text-index-entry-link-start ::= text:index-entry-link-start::((text:style-name::styleNameRef)?) ;
common-convert-empty-attlist ::= (form:convert-empty-to-null::boolean)? ;
style-style-content ::= (style:family::"text" style-text-properties?) | (style:family::"paragraph" style-paragraph-properties? style-text-properties?) | (style:family::"section" style-section-properties?) | (style:family::"ruby" style-ruby-properties?) | (style:family::"table" style-table-properties?) | (style:family::"table-column" style-table-column-properties?) | (style:family::"table-row" style-table-row-properties?) | (style:family::"table-cell" style-table-cell-properties? style-paragraph-properties? style-text-properties?) | (style:family::("graphic" | "presentation") style-graphic-properties? style-paragraph-properties? style-text-properties?) | (style:family::"drawing-page" style-drawing-page-properties?) | (style:family::"chart" style-chart-properties? style-graphic-properties? style-paragraph-properties? style-text-properties?) ;
common-format-source-attlist ::= (number:format-source::("fixed" | "language"))? ;
text-list ::= text:list::(text-list-attr text-list-header? text-list-item*) ;
common-anim-set-values-attlist ::= (smil:to::string)? ;
table-table-column-group-attlist ::= (table:display::boolean)? ;
number-year-attlist ::= (number:style::("short" | "long"))? ;
svg-font-face-format ::= svg:font-face-format::((svg:string::string)?) ;
style-map-attlist ::= style:condition::string style:apply-style-name::styleNameRef (style:base-cell-address::cellAddress)? ;
text-index-entry-tab-stop ::= text:index-entry-tab-stop::((text:style-name::styleNameRef)? text-index-entry-tab-stop-attrs) ;
chart-chart ::= chart:chart::(chart-chart-attlist chart-title? chart-subtitle? chart-footer? chart-legend? chart-plot-area table-table?) ;
table-sort-attlist ::= (table:bind-styles-to-content::boolean)? (table:target-range-address::cellRangeAddress)? (table:case-sensitive::boolean)? (table:language::languageCode)? (table:country::countryCode)? (table:script::scriptCode)? (table:rfc-language-tag::language)? (table:algorithm::string)? (table:embedded-number-behavior::("alpha-numeric" | "integer" | "double"))? ;
office-spreadsheet-attlist ::= (table:structure-protected::boolean)? (table:protection-key::string)? (table:protection-key-digest-algorithm::anyIRI)? ;
table-rows-no-group ::= (table-rows (table-table-header-rows table-rows?)?) | (table-table-header-rows table-rows?) ;
common-field-database-name ::= ((text:database-name::string)?) | form-connection-resource ;
chart-subtitle ::= chart:subtitle::(chart-title-attlist text-p?) ;
common-draw-position-attlist ::= (svg:x::coordinate)? (svg:y::coordinate)? ;
common-padding-attlist ::= (fo:padding::nonNegativeLength)? (fo:padding-top::nonNegativeLength)? (fo:padding-bottom::nonNegativeLength)? (fo:padding-left::nonNegativeLength)? (fo:padding-right::nonNegativeLength)? ;
style-table-properties-attlist ::= (style:width::positiveLength)? (style:rel-width::percent)? (table:align::("left" | "center" | "right" | "margins"))? common-horizontal-margin-attlist common-vertical-margin-attlist common-margin-attlist common-page-number-attlist common-break-attlist common-background-color-attlist common-shadow-attlist common-keep-with-next-attlist (style:may-break-between-rows::boolean)? (table:border-model::("collapsing" | "separating"))? common-writing-mode-attlist (table:display::boolean)? ;
text-alphabetical-index-source-attrs ::= text-index-scope-attr text-relative-tab-stop-position-attr (text:ignore-case::boolean)? (text:main-entry-style-name::styleNameRef)? (text:alphabetical-separators::boolean)? (text:combine-entries::boolean)? (text:combine-entries-with-dash::boolean)? (text:combine-entries-with-pp::boolean)? (text:use-keys-as-entries::boolean)? (text:capitalize-entries::boolean)? (text:comma-separated::boolean)? (fo:language::languageCode)? (fo:country::countryCode)? (fo:script::scriptCode)? (style:rfc-language-tag::language)? (text:sort-algorithm::string)? ;
text-list-attr ::= (text:style-name::styleNameRef)? (text:continue-numbering::boolean)? (text:continue-list::IDREF)? xml-id? ;
form-form-attlist ::= (xlink:type::"simple" xlink:href::anyIRI (xlink:actuate::"onRequest")?)? (office:target-frame::targetFrameName)? (form:method::("get" | "post" | string))? (form:enctype::string)? (form:allow-deletes::boolean)? (form:allow-inserts::boolean)? (form:allow-updates::boolean)? (form:apply-filter::boolean)? (form:command-type::("table" | "query" | "command"))? (form:command::string)? (form:datasource::(anyIRI | string))? (form:master-fields::string)? (form:detail-fields::string)? (form:escape-processing::boolean)? (form:filter::string)? (form:ignore-result::boolean)? (form:navigation-mode::navigation)? (form:order::string)? (form:tab-cycle::tab-cycles)? ;
text-tracked-changes-attr ::= (text:track-changes::boolean)? ;
table-help-message ::= table:help-message::((table:title::string)? (table:display::boolean)? text-p*) ;
common-printable-attlist ::= (form:printable::boolean)? ;
heading-attrs ::= text:outline-level::positiveInteger (text:restart-numbering::boolean)? (text:start-value::nonNegativeInteger)? (text:is-list-header::boolean)? ;
common-time-manip-attlist ::= (smil:accelerate::zeroToOneDecimal)? (smil:decelerate::zeroToOneDecimal)? (smil:autoReverse::boolean)? ;
text-numbered-paragraph-attr ::= text:list-id::NCName (text:level::positiveInteger)? (text:style-name::styleNameRef text:continue-numbering::boolean text:start-value::nonNegativeInteger)? xml-id? ;
draw-glue-point-attlist ::= draw:id::nonNegativeInteger svg:x::(distance | percent) svg:y::(distance | percent) (draw:align::("top-left" | "top" | "top-right" | "left" | "center" | "right" | "bottom-left" | "bottom-right"))? draw:escape-direction::("auto" | "left" | "right" | "up" | "down" | "horizontal" | "vertical") ;
table-data-pilot-field-attlist ::= table:source-field-name::string (table:orientation::("row" | "column" | "data" | "hidden")) | (table:orientation::"page" table:selected-page::string) (table:is-data-layout-field::string)? (table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string))? (table:used-hierarchy::integer)? ;
office-styles ::= (office:styles::(styles style-default-style* style-default-page-layout? text-outline-style? text-notes-configuration* text-bibliography-configuration? text-linenumbering-configuration? draw-gradient* svg-linearGradient* svg-radialGradient* draw-hatch* draw-fill-image* draw-marker* draw-stroke-dash* draw-opacity* style-presentation-page-layout* table-table-template*))? ;
table-table ::= table:table::(table-table-attlist table-title? table-desc? table-table-source? office-dde-source? table-scenario? office-forms? table-shapes? table-columns-and-groups table-rows-and-groups table-named-expressions?) ;
style-footnote-sep ::= (style:footnote-sep::style-footnote-sep-attlist)? ;
style-header-style ::= style:header-style::(style-header-footer-properties?) ;
anim-audio-attlist ::= (xlink:href::anyIRI)? (anim:audio-level::double)? ;
number-day-attlist ::= (number:style::("short" | "long"))? ;
text-page-continuation-attlist ::= text:select-page::("previous" | "next") (text:string-value::string)? ;
common-horizontal-margin-attlist ::= (fo:margin-left::(length | percent))? (fo:margin-right::(length | percent))? ;
common-anim-add-accum-attlist ::= (smil:accumulate::("none" | "sum"))? (smil:additive::("replace" | "sum"))? ;
draw-applet ::= draw:applet::(draw-applet-attlist common-draw-data-attlist? draw-param*) ;
style-master-page ::= style:master-page::(style-master-page-attlist (style-header style-header-left?)? (style-footer style-footer-left?)? draw-layer-set? office-forms? shape* animation-element? presentation-notes?) ;
style-handout-master-attlist ::= (presentation:presentation-page-layout-name::styleNameRef)? style:page-layout-name::styleNameRef (draw:style-name::styleNameRef)? ;
text-linenumbering-separator ::= text:linenumbering-separator::((text:increment::nonNegativeInteger)? string()) ;
text-common-ref-content ::= string() (text:ref-name::string)? ;
office-script ::= office:script::(office-script-attlist string()? anyElements string()?) ;
presentation-play-attlist ::= draw:shape-id::IDREF (presentation:speed::presentationSpeeds)? ;
svg-radialGradient ::= svg:radialGradient::(common-svg-gradient-attlist (svg:cx::(coordinate | percent))? (svg:cy::(coordinate | percent))? (svg:r::(coordinate | percent))? (svg:fx::(coordinate | percent))? (svg:fy::(coordinate | percent))? svg-stop*) ;
common-anim-spline-mode-attlist ::= (smil:calcMode::("discrete" | "linear" | "paced" | "spline"))? ;
draw-connector-attlist ::= (draw:type::("standard" | "lines" | "line" | "curve"))? (svg:x1::coordinate svg:y1::coordinate)? (draw:start-shape::IDREF)? (draw:start-glue-point::nonNegativeInteger)? (svg:x2::coordinate svg:y2::coordinate)? (draw:end-shape::IDREF)? (draw:end-glue-point::nonNegativeInteger)? (draw:line-skew::(length (length length?)?))? (svg:d::pathData)? ;
table-highlighted-range-attlist ::= (table:cell-range-address::cellRangeAddress)? table:direction::("from-another-table" | "to-another-table" | "from-same-table") (table:contains-error::boolean)? ;
table-null-date ::= table:null-date::((table:value-type::"date")? (table:date-value::date)?) ;
button-type ::= (form:button-type::types)? ;
style-master-page-attlist ::= style:name::styleName (style:display-name::string)? style:page-layout-name::styleNameRef (draw:style-name::styleNameRef)? (style:next-style-name::styleNameRef)? ;
chart-data-point-attlist ::= (chart:repeated::positiveInteger)? (chart:style-name::styleNameRef)? xml-id? ;
number-month-attlist ::= (number:textual::boolean)? (number:possessive-form::boolean)? (number:style::("short" | "long"))? ;
text-index-entry-bibliography-attrs ::= (text:style-name::styleNameRef)? text:bibliography-data-field::("address" | "annote" | "author" | "bibliography-type" | "booktitle" | "chapter" | "custom1" | "custom2" | "custom3" | "custom4" | "custom5" | "edition" | "editor" | "howpublished" | "identifier" | "institution" | "isbn" | "issn" | "journal" | "month" | "note" | "number" | "organizations" | "pages" | "publisher" | "report-type" | "school" | "series" | "title" | "url" | "volume" | "year") ;
db-application-connection-settings ::= db:application-connection-settings::(db-application-connection-settings-attlist db-table-filter? db-table-type-filter? db-data-source-settings?) ;
common-data-style-attlist ::= style:name::styleName (style:display-name::string)? (number:language::languageCode)? (number:country::countryCode)? (number:script::scriptCode)? (number:rfc-language-tag::language)? (number:title::string)? (style:volatile::boolean)? (number:transliteration-format::string)? (number:transliteration-language::countryCode)? (number:transliteration-country::countryCode)? (number:transliteration-style::("short" | "medium" | "long"))? ;
dr3d-scene ::= dr3d:scene::(dr3d-scene-attlist common-draw-position-attlist common-draw-size-attlist common-draw-style-name-attlist common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-text-spreadsheet-shape-attlist common-dr3d-transform-attlist common-draw-caption-id-attlist svg-title? svg-desc? dr3d-light* shapes3d* draw-glue-point*) ;
db-apply-command ::= (db:apply-command::boolean)? ;
image-data ::= (form:image-data::anyIRI)? ;
chart-legend ::= chart:legend::(chart-legend-attlist text-p?) ;
number-scientific-number-attlist ::= (number:min-exponent-digits::integer)? ;
text-section-source-attr ::= (xlink:type::"simple" xlink:href::anyIRI (xlink:show::"embed")?)? (text:section-name::string)? (text:filter-name::string)? ;
db-driver-settings ::= db:driver-settings::(db-driver-settings-attlist db-auto-increment? db-delimiter? db-character-set? db-table-settings?) ;
db-application-connection-settings-attlist ::= (db:is-table-name-length-limited::boolean)? (db:enable-sql92-check::boolean)? (db:append-table-alias-name::boolean)? (db:ignore-driver-privileges::boolean)? (db:boolean-comparison-mode::("equal-integer" | "is-boolean" | "equal-boolean" | "equal-use-only-zero"))? (db:use-catalog::boolean)? (db:max-row-count::integer)? (db:suppress-version-columns::boolean)? ;
office-annotation-attlist ::= (office:display::boolean)? common-office-annotation-name-attlist? ;
common-dr3d-transform-attlist ::= (dr3d:transform::string)? ;
dr3d-scene-attlist ::= (dr3d:vrp::vector3D)? (dr3d:vpn::vector3D)? (dr3d:vup::vector3D)? (dr3d:projection::("parallel" | "perspective"))? (dr3d:distance::length)? (dr3d:focal-length::length)? (dr3d:shadow-slant::angle)? (dr3d:shade-mode::("flat" | "phong" | "gouraud" | "draft"))? (dr3d:ambient-color::color)? (dr3d:lighting-mode::boolean)? ;
db-data-source ::= db:data-source::(db-data-source-attlist db-connection-data db-driver-settings? db-application-connection-settings?) ;
draw-rect ::= draw:rect::(draw-rect-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
text-alphabetical-index-source ::= text:alphabetical-index-source::(text-alphabetical-index-source-attrs text-index-title-template? text-alphabetical-index-entry-template*) ;
common-draw-z-index-attlist ::= (draw:z-index::nonNegativeInteger)? ;
for ::= (form:for::string)? ;
chart-grid-attlist ::= (chart:class::("major" | "minor"))? (chart:style-name::styleNameRef)? ;
style-graphic-properties-attlist ::= (draw:stroke::("none" | "dash" | "solid"))? (draw:stroke-dash::styleNameRef)? (draw:stroke-dash-names::styleNameRefs)? (svg:stroke-width::length)? (svg:stroke-color::color)? (draw:marker-start::styleNameRef)? (draw:marker-end::styleNameRef)? (draw:marker-start-width::length)? (draw:marker-end-width::length)? (draw:marker-start-center::boolean)? (draw:marker-end-center::boolean)? (svg:stroke-opacity::(string() | zeroToHundredPercent))? (draw:stroke-linejoin::("miter" | "round" | "bevel" | "middle" | "none"))? (svg:stroke-linecap::("butt" | "square" | "round"))? (draw:symbol-color::color)? (text:animation::("none" | "scroll" | "alternate" | "slide"))? (text:animation-direction::("left" | "right" | "up" | "down"))? (text:animation-start-inside::boolean)? (text:animation-stop-inside::boolean)? (text:animation-repeat::nonNegativeInteger)? (text:animation-delay::duration)? (text:animation-steps::length)? (draw:auto-grow-width::boolean)? (draw:auto-grow-height::boolean)? (draw:fit-to-size::boolean)? (draw:fit-to-contour::boolean)? (draw:textarea-vertical-align::("top" | "middle" | "bottom" | "justify"))? (draw:textarea-horizontal-align::("left" | "center" | "right" | "justify"))? (fo:wrap-option::("no-wrap" | "wrap"))? (style:shrink-to-fit::boolean)? (draw:color-mode::("greyscale" | "mono" | "watermark" | "standard"))? (draw:color-inversion::boolean)? (draw:luminance::zeroToHundredPercent)? (draw:contrast::percent)? (draw:gamma::percent)? (draw:red::signedZeroToHundredPercent)? (draw:green::signedZeroToHundredPercent)? (draw:blue::signedZeroToHundredPercent)? (draw:image-opacity::zeroToHundredPercent)? (draw:shadow::("visible" | "hidden"))? (draw:shadow-offset-x::length)? (draw:shadow-offset-y::length)? (draw:shadow-color::color)? (draw:shadow-opacity::zeroToHundredPercent)? (draw:start-line-spacing-horizontal::distance)? (draw:start-line-spacing-vertical::distance)? (draw:end-line-spacing-horizontal::distance)? (draw:end-line-spacing-vertical::distance)? (draw:line-distance::distance)? (draw:guide-overhang::length)? (draw:guide-distance::distance)? (draw:start-guide::length)? (draw:end-guide::length)? (draw:placing::("below" | "above"))? (draw:parallel::boolean)? (draw:measure-align::("automatic" | "left-outside" | "inside" | "right-outside"))? (draw:measure-vertical-align::("automatic" | "above" | "below" | "center"))? (draw:unit::("automatic" | "mm" | "cm" | "m" | "km" | "pt" | "pc" | "inch" | "ft" | "mi"))? (draw:show-unit::boolean)? (draw:decimal-places::nonNegativeInteger)? (draw:caption-type::("straight-line" | "angled-line" | "angled-connector-line"))? (draw:caption-angle-type::("fixed" | "free"))? (draw:caption-angle::angle)? (draw:caption-gap::distance)? (draw:caption-escape-direction::("horizontal" | "vertical" | "auto"))? (draw:caption-escape::(length | percent))? (draw:caption-line-length::length)? (draw:caption-fit-line-length::boolean)? (dr3d:horizontal-segments::nonNegativeInteger)? (dr3d:vertical-segments::nonNegativeInteger)? (dr3d:edge-rounding::percent)? (dr3d:edge-rounding-mode::("correct" | "attractive"))? (dr3d:back-scale::percent)? (dr3d:depth::length)? (dr3d:backface-culling::("enabled" | "disabled"))? (dr3d:end-angle::angle)? (dr3d:close-front::boolean)? (dr3d:close-back::boolean)? (dr3d:lighting-mode::("standard" | "double-sided"))? (dr3d:normals-kind::("object" | "flat" | "sphere"))? (dr3d:normals-direction::("normal" | "inverse"))? (dr3d:texture-generation-mode-x::("object" | "parallel" | "sphere"))? (dr3d:texture-generation-mode-y::("object" | "parallel" | "sphere"))? (dr3d:texture-kind::("luminance" | "intensity" | "color"))? (dr3d:texture-filter::("enabled" | "disabled"))? (dr3d:texture-mode::("replace" | "modulate" | "blend"))? (dr3d:ambient-color::color)? (dr3d:emissive-color::color)? (dr3d:specular-color::color)? (dr3d:diffuse-color::color)? (dr3d:shininess::percent)? (dr3d:shadow::("visible" | "hidden"))? common-draw-rel-size-attlist (fo:min-width::(length | percent))? (fo:min-height::(length | percent))? (fo:max-height::(length | percent))? (fo:max-width::(length | percent))? common-horizontal-margin-attlist common-vertical-margin-attlist common-margin-attlist (style:print-content::boolean)? (style:protect::("none" | (("content" | "position" | "size")+)))? (style:horizontal-pos::("left" | "center" | "right" | "from-left" | "inside" | "outside" | "from-inside"))? (svg:x::coordinate)? (style:horizontal-rel::("page" | "page-content" | "page-start-margin" | "page-end-margin" | "frame" | "frame-content" | "frame-start-margin" | "frame-end-margin" | "paragraph" | "paragraph-content" | "paragraph-start-margin" | "paragraph-end-margin" | "char"))? common-vertical-pos-attlist common-vertical-rel-attlist common-text-anchor-attlist common-border-attlist common-border-line-width-attlist common-padding-attlist common-shadow-attlist common-background-color-attlist common-background-transparency-attlist common-editable-attlist (style:wrap::("none" | "left" | "right" | "parallel" | "dynamic" | "run-through" | "biggest"))? (style:wrap-dynamic-threshold::nonNegativeLength)? (style:number-wrapped-paragraphs::("no-limit" | positiveInteger))? (style:wrap-contour::boolean)? (style:wrap-contour-mode::("full" | "outside"))? (style:run-through::("foreground" | "background"))? (style:flow-with-text::boolean)? (style:overflow-behavior::("clip" | "auto-create-new-frame"))? (style:mirror::("none" | "vertical" | horizontal-mirror | ("vertical" horizontal-mirror) | (horizontal-mirror "vertical")))? (fo:clip::("auto" | clipShape))? (draw:wrap-influence-on-position::("iterative" | "once-concurrent" | "once-successive"))? common-writing-mode-attlist (draw:frame-display-scrollbar::boolean)? (draw:frame-display-border::boolean)? (draw:frame-margin-horizontal::nonNegativePixelLength)? (draw:frame-margin-vertical::nonNegativePixelLength)? (draw:visible-area-left::nonNegativeLength)? (draw:visible-area-top::nonNegativeLength)? (draw:visible-area-width::positiveLength)? (draw:visible-area-height::positiveLength)? (draw:draw-aspect::("content" | "thumbnail" | "icon" | "print-view"))? (draw:ole-draw-aspect::nonNegativeInteger)? ;
office-font-face-decls ::= (office:font-face-decls::(style-font-face*))? ;
text-hidden-text-attlist ::= text:condition::string text:string-value::string (text:is-hidden::boolean)? ;
table-named-expression-attlist ::= table:name::string table:expression::string (table:base-cell-address::cellAddress)? ;
script-event-listener-attlist ::= script:event-name::string script:language::string (script:macro-name::string) | (xlink:type::"simple" xlink:href::anyIRI (xlink:actuate::"onRequest")?) ;
draw-fill-image ::= draw:fill-image::(draw-fill-image-attlist xlink:type::"simple" xlink:href::anyIRI (xlink:show::"embed")? (xlink:actuate::"onLoad")?) ;
draw-param-attlist ::= (draw:name::string)? (draw:value::string)? ;
common-begin-end-timing-attlist ::= (smil:begin::string)? (smil:end::string)? ;
common-presentation-effect-attlist ::= draw:shape-id::IDREF (presentation:effect::presentationEffects)? (presentation:direction::presentationEffectDirections)? (presentation:speed::presentationSpeeds)? (presentation:delay::duration)? (presentation:start-scale::percent)? (presentation:path-id::string)? ;
style-columns-attlist ::= fo:column-count::positiveInteger (fo:column-gap::length)? ;
text-a-attlist ::= (office:name::string)? (office:title::string)? xlink:type::"simple" xlink:href::anyIRI (xlink:actuate::"onRequest")? (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? (text:style-name::styleNameRef)? (text:visited-style-name::styleNameRef)? ;
anim-iterate-attlist ::= common-anim-target-attlist (anim:iterate-type::string)? (anim:iterate-interval::duration)? ;
db-is-first-row-header-line ::= (db:is-first-row-header-line::boolean)? ;
style-graphic-fill-properties-attlist ::= (draw:fill::("none" | "solid" | "bitmap" | "gradient" | "hatch"))? (draw:fill-color::color)? (draw:secondary-fill-color::color)? (draw:fill-gradient-name::styleNameRef)? (draw:gradient-step-count::nonNegativeInteger)? (draw:fill-hatch-name::styleNameRef)? (draw:fill-hatch-solid::boolean)? (draw:fill-image-name::styleNameRef)? (style:repeat::("no-repeat" | "repeat" | "stretch"))? (draw:fill-image-width::(length | percent))? (draw:fill-image-height::(length | percent))? (draw:fill-image-ref-point-x::percent)? (draw:fill-image-ref-point-y::percent)? (draw:fill-image-ref-point::("top-left" | "top" | "top-right" | "left" | "center" | "right" | "bottom-left" | "bottom" | "bottom-right"))? (draw:tile-repeat-offset::(zeroToHundredPercent "horizontal" | "vertical"))? (draw:opacity::zeroToHundredPercent)? (draw:opacity-name::styleNameRef)? (svg:fill-rule::("nonzero" | "evenodd"))? ;
common-draw-rel-size-attlist ::= common-draw-size-attlist (style:rel-width::(percent | "scale" | "scale-min"))? (style:rel-height::(percent | "scale" | "scale-min"))? ;
dr3d-sphere-attlist ::= (dr3d:center::vector3D)? (dr3d:size::vector3D)? ;
draw-fill-image-attlist ::= draw:name::styleName (draw:display-name::string)? (svg:width::length)? (svg:height::length)? ;
common-dur-timing-attlist ::= (smil:dur::string)? ;
chart-mean-value-attlist ::= (chart:style-name::styleNameRef)? ;
style-text-properties-attlist ::= (fo:font-variant::fontVariant)? (fo:text-transform::("none" | "lowercase" | "uppercase" | "capitalize"))? (fo:color::color)? (style:use-window-font-color::boolean)? (style:text-outline::boolean)? (style:text-line-through-type::lineType)? (style:text-line-through-style::lineStyle)? (style:text-line-through-width::lineWidth)? (style:text-line-through-color::("font-color" | color))? (style:text-line-through-text::string)? (style:text-line-through-text-style::styleNameRef)? (style:text-position::(percent | "super" | "sub" percent?))? (style:font-name::string)? (style:font-name-asian::string)? (style:font-name-complex::string)? (fo:font-family::string)? (style:font-family-asian::string)? (style:font-family-complex::string)? (style:font-family-generic::fontFamilyGeneric)? (style:font-family-generic-asian::fontFamilyGeneric)? (style:font-family-generic-complex::fontFamilyGeneric)? (style:font-style-name::string)? (style:font-style-name-asian::string)? (style:font-style-name-complex::string)? (style:font-pitch::fontPitch)? (style:font-pitch-asian::fontPitch)? (style:font-pitch-complex::fontPitch)? (style:font-charset::textEncoding)? (style:font-charset-asian::textEncoding)? (style:font-charset-complex::textEncoding)? (fo:font-size::(positiveLength | percent))? (style:font-size-asian::(positiveLength | percent))? (style:font-size-complex::(positiveLength | percent))? (style:font-size-rel::length)? (style:font-size-rel-asian::length)? (style:font-size-rel-complex::length)? (style:script-type::("latin" | "asian" | "complex" | "ignore"))? (fo:letter-spacing::(length | "normal"))? (fo:language::languageCode)? (style:language-asian::languageCode)? (style:language-complex::languageCode)? (fo:country::countryCode)? (style:country-asian::countryCode)? (style:country-complex::countryCode)? (fo:script::scriptCode)? (style:script-asian::scriptCode)? (style:script-complex::scriptCode)? (style:rfc-language-tag::language)? (style:rfc-language-tag-asian::language)? (style:rfc-language-tag-complex::language)? (fo:font-style::fontStyle)? (style:font-style-asian::fontStyle)? (style:font-style-complex::fontStyle)? (style:font-relief::("none" | "embossed" | "engraved"))? (fo:text-shadow::shadowType)? (style:text-underline-type::lineType)? (style:text-underline-style::lineStyle)? (style:text-underline-width::lineWidth)? (style:text-underline-color::("font-color" | color))? (style:text-overline-type::lineType)? (style:text-overline-style::lineStyle)? (style:text-overline-width::lineWidth)? (style:text-overline-color::("font-color" | color))? (style:text-overline-mode::lineMode)? (fo:font-weight::fontWeight)? (style:font-weight-asian::fontWeight)? (style:font-weight-complex::fontWeight)? (style:text-underline-mode::lineMode)? (style:text-line-through-mode::lineMode)? (style:letter-kerning::boolean)? (style:text-blinking::boolean)? common-background-color-attlist (style:text-combine::("none" | "letters" | "lines"))? (style:text-combine-start-char::character)? (style:text-combine-end-char::character)? (style:text-emphasize::("none" | ("none" | "accent" | "dot" | "circle" | "disc" "above" | "below")))? (style:text-scale::percent)? (style:text-rotation-angle::angle)? (style:text-rotation-scale::("fixed" | "line-height"))? (fo:hyphenate::boolean)? (fo:hyphenation-remain-char-count::positiveInteger)? (fo:hyphenation-push-char-count::positiveInteger)? (text:display::"true") | (text:display::"none") | (text:display::"condition" text:condition::"none") | Îµ ;
number-time-style-attlist ::= (number:truncate-on-overflow::boolean)? ;
common-background-transparency-attlist ::= (style:background-transparency::zeroToHundredPercent)? ;
office-dde-source-attlist ::= (office:name::string)? (office:conversion-mode::("into-default-style-data-style" | "into-english-number" | "keep-text"))? ;
text-object-index-source ::= text:object-index-source::(text-object-index-source-attrs text-index-title-template? text-object-index-entry-template?) ;
office-meta-data ::= (meta:generator::string) | (dc:title::string) | (dc:description::string) | (dc:subject::string) | (meta:keyword::string) | (meta:initial-creator::string) | dc-creator | (meta:printed-by::string) | (meta:creation-date::dateTime) | dc-date | (meta:print-date::dateTime) | (meta:template::(xlink:type::"simple" xlink:href::anyIRI (xlink:actuate::"onRequest")? (xlink:title::string)? (meta:date::dateTime)?)) | (meta:auto-reload::((xlink:type::"simple" xlink:href::anyIRI (xlink:show::"replace")? (xlink:actuate::"onLoad")?)? (meta:delay::duration)?)) | (meta:hyperlink-behaviour::((office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))?)) | (dc:language::language) | (meta:editing-cycles::nonNegativeInteger) | (meta:editing-duration::duration) | (meta:document-statistic::((meta:page-count::nonNegativeInteger)? (meta:table-count::nonNegativeInteger)? (meta:draw-count::nonNegativeInteger)? (meta:image-count::nonNegativeInteger)? (meta:ole-object-count::nonNegativeInteger)? (meta:object-count::nonNegativeInteger)? (meta:paragraph-count::nonNegativeInteger)? (meta:word-count::nonNegativeInteger)? (meta:character-count::nonNegativeInteger)? (meta:frame-count::nonNegativeInteger)? (meta:sentence-count::nonNegativeInteger)? (meta:syllable-count::nonNegativeInteger)? (meta:non-whitespace-character-count::nonNegativeInteger)? (meta:row-count::nonNegativeInteger)? (meta:cell-count::nonNegativeInteger)?)) | (meta:user-defined::(meta:name::string (meta:value-type::"float" double) | (meta:value-type::"date" dateOrDateTime) | (meta:value-type::"time" duration) | (meta:value-type::"boolean" boolean) | (meta:value-type::"string" string) | string())) ;
form-checkbox-attlist ::= form-control-attlist common-disabled-attlist label common-printable-attlist common-tab-attlist common-title-attlist common-value-attlist common-data-field-attlist common-form-visual-effect-attlist common-form-relative-image-position-attlist common-linked-cell (form:current-state::states)? (form:is-tristate::boolean)? (form:state::states)? ;
text-hidden-paragraph-attlist ::= text:condition::string (text:is-hidden::boolean)? ;
text-bookmark-start-attlist ::= text:name::string xml-id? common-in-content-meta-attlist? ;
presentation-sound ::= presentation:sound::(presentation-sound-attlist xlink:type::"simple" xlink:href::anyIRI (xlink:actuate::"onRequest")? (xlink:show::("new" | "replace"))?) ;
chart-title-attlist ::= (table:cell-range::cellRangeAddressList)? common-draw-position-attlist (chart:style-name::styleNameRef)? ;
style-background-image ::= (style:background-image::(style-background-image-attlist common-draw-data-attlist | office-binary-data | Îµ))? ;
dr3d-cube-attlist ::= (dr3d:min-edge::vector3D)? (dr3d:max-edge::vector3D)? ;
form-property-type-and-value-list ::= (office:value-type::"float" (form:list-value::(office:value::double))*) | (office:value-type::"percentage" (form:list-value::(office:value::double))*) | (office:value-type::"currency" (form:list-value::(office:value::double (office:currency::string)?))*) | (office:value-type::"date" (form:list-value::(office:date-value::dateOrDateTime))*) | (office:value-type::"time" (form:list-value::(office:time-value::duration))*) | (office:value-type::"boolean" (form:list-value::(office:boolean-value::boolean))*) | (office:value-type::"string" (form:list-value::(office:string-value::string))*) | (office:value-type::"void") ;
style-drop-cap ::= (style:drop-cap::style-drop-cap-attlist)? ;
text-illustration-index-source-attrs ::= text-index-scope-attr text-relative-tab-stop-position-attr (text:use-caption::boolean)? (text:caption-sequence-name::string)? (text:caption-sequence-format::("text" | "category-and-value" | "caption"))? ;
common-writing-mode-attlist ::= (style:writing-mode::("lr-tb" | "rl-tb" | "tb-rl" | "tb-lr" | "lr" | "rl" | "tb" | "page"))? ;
xforms-bind-attlist ::= (xforms:bind::string)? ;
text-note-ref-content ::= (text:reference-format::common-ref-format-values)? text-note-class ;
table-linked-source-attlist ::= xlink:type::"simple" xlink:href::anyIRI (xlink:actuate::"onRequest")? (table:filter-name::string)? (table:filter-options::string)? (table:refresh-delay::duration)? ;
text-outline-level-style ::= text:outline-level-style::(text-outline-level-style-attlist style-list-level-properties? style-text-properties?) ;
text-list-style-attr ::= style:name::styleName (style:display-name::string)? (text:consecutive-numbering::boolean)? ;
common-presentation-header-footer-attlist ::= (presentation:use-header-name::string)? (presentation:use-footer-name::string)? (presentation:use-date-time-name::string)? ;
table-rows ::= table-table-rows | ((text-soft-page-break? table-table-row)+) ;
db-column-attlist ::= (db:visible::boolean)? (db:style-name::styleNameRef)? (db:default-cell-style-name::styleNameRef)? ;
draw-opacity-attlist ::= (draw:start::zeroToHundredPercent)? (draw:end::zeroToHundredPercent)? ;
target-location ::= (xlink:href::anyIRI)? ;
current-selected ::= (form:current-selected::boolean)? ;
common-db-table-name-attlist ::= db:name::string (db:catalog-name::string)? (db:schema-name::string)? ;
text-decls ::= (text:variable-decls::(text-variable-decl*))? (text:sequence-decls::(text-sequence-decl*))? (text:user-field-decls::(text-user-field-decl*))? (text:dde-connection-decls::(text-dde-connection-decl*))? text-alphabetical-index-auto-mark-file? ;
db-table-presentation ::= db:table-representation::(db-table-presentation-attlist common-db-table-name-attlist common-db-object-title common-db-object-description common-db-table-style-name db-order-statement? db-filter-statement? db-columns?) ;
form-number-attlist ::= (form:value::double)? (form:current-value::double)? (form:min-value::double)? (form:max-value::double)? ;
common-dde-connection-decl-attlist ::= office:dde-application::string office:dde-topic::string office:dde-item::string (office:automatic-update::boolean)? ;
chart-data-label ::= chart:data-label::(chart-data-label-attlist text-p?) ;
text-time-attlist ::= common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::timeOrDateTime)? (text:time-adjust::duration)? ;
common-number-attlist ::= (number:min-integer-digits::integer)? (number:grouping::boolean)? ;
table-functions ::= table-named-expressions? table-database-ranges? table-data-pilot-tables? table-consolidation? table-dde-links? ;
chart-equation ::= chart:equation::(chart-equation-attlist text-p?) ;
form-combobox-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist dropdown common-maxlength-attlist common-printable-attlist common-readonly-attlist size common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist list-source list-source-type common-linked-cell common-source-cell-range (form:auto-complete::boolean)? ;
common-page-number-attlist ::= (style:page-number::(positiveInteger | "auto"))? ;
text-database-next-attlist ::= common-field-database-table (text:condition::string)? ;
common-vertical-rel-attlist ::= (style:vertical-rel::("page" | "page-content" | "frame" | "frame-content" | "paragraph" | "paragraph-content" | "char" | "line" | "baseline" | "text"))? ;
draw-ellipse ::= draw:ellipse::((draw-ellipse-attlist common-draw-circle-ellipse-pos-attlist) | (common-draw-position-attlist common-draw-size-attlist) common-draw-circle-ellipse-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
common-draw-id-attlist ::= (xml-id (draw:id::NCName)?)? ;
common-field-display-value-formula-none-attlist ::= (text:display::("value" | "formula" | "none"))? ;
common-repeat-timing-attlist ::= (smil:repeatDur::string)? (smil:repeatCount::(nonNegativeDecimal | "indefinite"))? ;
form-value-range-attlist ::= form-control-attlist common-disabled-attlist common-printable-attlist common-tab-attlist common-title-attlist common-value-attlist common-linked-cell common-repeat common-delay-for-repeat (form:max-value::integer)? (form:min-value::integer)? (form:step-size::positiveInteger)? (form:page-step-size::positiveInteger)? (form:orientation::("horizontal" | "vertical"))? ;
number-boolean-style ::= number:boolean-style::(common-data-style-attlist style-text-properties? number-text? (number-boolean number-text?)? style-map*) ;
table-error-macro ::= table:error-macro::((table:execute::boolean)?) ;
text-bibliography-source ::= text:bibliography-source::(text-index-title-template? text-bibliography-entry-template*) ;
text-sort-key-attlist ::= text:key::("address" | "annote" | "author" | "bibliography-type" | "booktitle" | "chapter" | "custom1" | "custom2" | "custom3" | "custom4" | "custom5" | "edition" | "editor" | "howpublished" | "identifier" | "institution" | "isbn" | "issn" | "journal" | "month" | "note" | "number" | "organizations" | "pages" | "publisher" | "report-type" | "school" | "series" | "title" | "url" | "volume" | "year") (text:sort-ascending::boolean)? ;
db-table-setting ::= db:table-setting::(db-table-setting-attlist db-delimiter? db-character-set?) ;
style-list-level-properties-attlist ::= common-text-align (text:space-before::length)? (text:min-label-width::nonNegativeLength)? (text:min-label-distance::nonNegativeLength)? (style:font-name::string)? (fo:width::positiveLength)? (fo:height::positiveLength)? common-vertical-rel-attlist common-vertical-pos-attlist (text:list-level-position-and-space-mode::("label-width-and-position" | "label-alignment"))? ;
text-index-entry-span ::= text:index-entry-span::((text:style-name::styleNameRef)? string()) ;
text-date-attlist ::= common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::dateOrDateTime)? (text:date-adjust::duration)? ;
text-user-field-decl ::= text:user-field-decl::(common-field-name-attlist common-field-formula-attlist? common-value-and-type-attlist) ;
text-database-row-select-attlist ::= common-field-database-table (text:condition::string)? (text:row-number::nonNegativeInteger)? ;
chart-axis ::= chart:axis::(chart-axis-attlist chart-title? chart-categories? chart-grid*) ;
draw-custom-shape ::= draw:custom-shape::(draw-custom-shape-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text draw-enhanced-geometry?) ;
form-form ::= form:form::(common-form-control-attlist form-form-attlist form-properties? office-event-listeners? (controls | form-form)* form-connection-resource?) ;
list-source ::= (form:list-source::string)? ;
common-draw-gradient-attlist ::= (draw:name::styleName)? (draw:display-name::string)? draw:style::gradient-style (draw:cx::percent)? (draw:cy::percent)? (draw:angle::angle)? (draw:border::percent)? ;
draw-polyline ::= draw:polyline::(common-draw-points-attlist common-draw-position-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
text-numbered-paragraph ::= text:numbered-paragraph::(text-numbered-paragraph-attr text-number? text-p | text-h) ;
text-list-level-style-bullet-attr ::= (text:style-name::styleNameRef)? text:bullet-char::character common-num-format-prefix-suffix-attlist (text:bullet-relative-size::percent)? ;
anim-transition-filter-attlist ::= smil:type::string (smil:subtype::string)? (smil:direction::("forward" | "reverse"))? (smil:fadeColor::color)? (smil:mode::("in" | "out"))? ;
common-table-change-attlist ::= table:id::string (table:acceptance-state::("accepted" | "rejected" | "pending"))? (table:rejecting-change-id::string)? ;
common-field-formula-attlist ::= (text:formula::string)? ;
table-data-pilot-field ::= table:data-pilot-field::(table-data-pilot-field-attlist table-data-pilot-level? table-data-pilot-field-reference? table-data-pilot-groups?) ;
chart-chart-attlist ::= chart:class::namespacedToken common-draw-size-attlist (chart:column-mapping::string)? (chart:row-mapping::string)? (chart:style-name::styleNameRef)? (xlink:type::"simple" xlink:href::anyIRI)? xml-id? ;
text-set-page-variable-attlist ::= (text:active::boolean)? (text:page-adjust::integer)? ;
draw-custom-shape-attlist ::= (draw:engine::namespacedToken)? (draw:data::string)? ;
office-settings ::= (office:settings::(config-config-item-set+))? ;
table-tracked-changes-attlist ::= (table:track-changes::boolean)? ;
dropdown ::= (form:dropdown::boolean)? ;
common-num-format-prefix-suffix-attlist ::= (style:num-prefix::string)? (style:num-suffix::string)? ;
common-disabled-attlist ::= (form:disabled::boolean)? ;
common-svg-gradient-attlist ::= (svg:gradientUnits::"objectBoundingBox")? (svg:gradientTransform::string)? (svg:spreadMethod::("pad" | "reflect" | "repeat"))? draw:name::styleName (draw:display-name::string)? ;
draw-a-attlist ::= xlink:type::"simple" xlink:href::anyIRI (xlink:actuate::"onRequest")? (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? (office:name::string)? (office:title::string)? (office:server-map::boolean)? xml-id? ;
office-spreadsheet-content-prelude ::= table-tracked-changes? text-decls table-decls ;
common-draw-area-attlist ::= (xlink:type::"simple" xlink:href::anyIRI (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))?)? (office:name::string)? (draw:nohref::"nohref")? ;
common-draw-name-attlist ::= (draw:name::string)? ;
size ::= (form:size::nonNegativeInteger)? ;
table-table-attlist ::= (table:name::string)? (table:style-name::styleNameRef)? (table:template-name::string)? (table:use-first-row-styles::boolean)? (table:use-last-row-styles::boolean)? (table:use-first-column-styles::boolean)? (table:use-last-column-styles::boolean)? (table:use-banding-rows-styles::boolean)? (table:use-banding-columns-styles::boolean)? (table:protected::boolean)? (table:protection-key::string)? (table:protection-key-digest-algorithm::anyIRI)? (table:print::boolean)? (table:print-ranges::cellRangeAddressList)? xml-id? (table:is-sub-table::boolean)? ;
--------------------pascal::delphi.bgf--------------------
statement_semi ::= statement? ";" NL ;
semi_directive ::= ";"? directive ;
procedural_type ::= procedure_intf_decl of_object? semi_calling_spec* ;
selection_stm ::= ("if" expr "then" nested_stm else_stm?) | ("case" expr "of" case_selector* case_else? end_struct) ;
enum_spec ::= id param_init? ;
prop_index_name ::= prop_index_modifier? qualified_id ;
procedure_external_decl ::= procedure_intf_decl external_directive semi_calling_spec? ";"? NL ;
exports_entry ::= procedure_id formal_parameters? external_name? ;
statement ::= labelid_colon? unlabeled_stm ;
statement_list ::= IN statement_semi* statement? EX ;
variant_section ::= "case" id_colon? type_spec "of" record_variant+ ;
parameter ::= {id ","}* parameter_type? ;
procedure_intf_decl ::= procedure_signature semi_directive* ";"? NL ;
uses_item ::= qualified_id in_filename? ;
case_label ::= expr dotdot_expr? ;
array_subscript ::= "[" expression? semi_expression* "]" ;
constant_decl ::= identlist constant_spec hint_directive? ";" NL ;
nested_stm ::= sequence_stm | (NL IN statement? EX) ;
exception_handler_list ::= exception_handler_semi* exception_handler? ;
class_type ::= "packed"? class_keyword heritage_list? NL class_body? ;
array_type ::= ("array" of_const) | ("packed"? "array" array_index_list* of_basetype) ;
set_element ::= expression dotdot_expr? ;
interface_section ::= interface_kw uses_clause? intfdecl_block ;
exception_block ::= (exception_handler_list case_else?) | statement_list ;
set_constructor ::= "[" set_element? semi_set_element* "]" ;
file_type ::= "file" of_basetype? ;
external_directive ::= "external" expr? external_name? ;
exception_handler ::= "on" exception_var? type_spec "do" nested_stm ;
raise_stm ::= "raise" expr? at_address? ;
formal_parameter ::= parm_qual? parameter ;
implementation_section ::= implementation_kw uses_clause? impldecl_block ;
argm ::= expression argmfmt? argmfmt? ;
record_variant ::= expr+ colon "(" visibility_default ")" ";"? NL ;
program_file ::= program_decl uses_clause? impldecl_block procedure_body file_end ;
unit_file ::= unit_decl interface_section implementation_section initialization_section? finalization_section? end_struct file_end ;
arguments ::= "(" argm? semi_argm* ")" ;
package_file ::= package_decl requires_clause? contains_clause? end_struct file_end ;
property_decl ::= "property" id prop_indexes? colon_type? prop_specifier* defaultarray_spec? ";" NL ;
prop_index_decl ::= prop_index_name+ colon_type ";"? ;
record_constant ::= "(" record_field_constant_semi* record_field_constant? ")" ;
visibility ::= "public" | "protected" | ("strict"? "private") | "published" | "automated" ;
parameter_type ::= colon_type param_init? ;
directive ::= "dynamic" | "virtual" | "abstract" | ("message" qualified_id?) | ("dispid" sign? anynumber) | "override" | "overload" | "reintroduce" | "static" | "assembler" | "far" | "export" | hint_directive | calling_spec ;
type_decl ::= identlist equal "type"? type_spec hint_directive? ";" NL ;
case_selector ::= {case_label ","}* colon nested_stm ";"? ;
procedure_signature ::= "class"? procedure_keyword procedure_id? formal_parameters? colon_type? ;
procedure_id ::= namespace? id ;
semi_calling_spec ::= ";"? calling_spec ;
unit_decl ::= "unit" qualified_id hint_directive? ";" NL ;
program_decl ::= ("program" qualified_id program_file_list? ";" NL) | ("library" qualified_id ";" NL) ;
var_decl ::= identlist colon_type hint_directive? var_init? ";" NL ;
interface_type ::= interface_keyword heritage_list? guid_decl? interface_body? ;
--------------------pascal::delphipp.bgf--------------------
pp_boolexpr ::= booleanlit | (boolfunc space? "(" id ")") | ("NOT" space? pp_boolexpr) | id | (pp_boolexpr "pp_boolopr" pp_boolexpr) | (pp_litexpr "pp_compareopr" pp_litexpr) | ("(" pp_boolexpr ")") ;
pp_elseifexpr ::= ("{$" space? else_alt space? bracketbody* "}") | ("(*$" space? else_alt space? starbody* "*)") ;
pp_endif ::= ("{$" space? endif_alt bracketbody* "}") | ("(*$" space? endif_alt starbody* "*)") ;
pp_directivestmt ::= ("{$" space? {pp_directive ","}* bracketbody* "}") | ("(*$" space? {pp_directive ","}* starbody* "*)") ;
if_alt ::= ("IF" space? pp_boolexpr) | ("IFDEF" space? id) | ("IFNDEF" space? id) | ("IFOPT" space? pp_switch) ;
else_alt ::= ("ELSEIF" space? pp_boolexpr) | ("ELSE" space?) ;
pp_switch ::= id space? pp_switchopt ;
pp_ifexpr ::= ("{$" space? if_alt bracketbody* "}") | ("(*$" space? if_alt starbody* "*)") ;
pp_directive ::= ("DEFINE" space id) | ("UNDEF" space id) | ("INCLUDE" space? filenamelit) | ("I" space? filenamelit) | ("LINK" space? filenamelit) | ("L" space? filenamelit) | ("RESOURCE" space? filenamelit space? filenamelit?) | ("R" space? filenamelit space? filenamelit?) | ("HPPEMIT" space? charlit) | ("EXTERNALSYM" space id) | "NODEFINE" | "MINENUMSIZE" | "DENYPACKAGEUNIT" | "WEAKPACKAGEUNIT" | ("IMAGEBASE" space? anynumber) | ("C" space id) | ("MINENUMSIZE" space anynumber) | pp_minenumsize | ("ALIGN" space? anynumber) | pp_align | ("M" space? {anynumber ","}*) | ("MAXSTACKSIZE" space anynumber) | ("MINSTACKSIZE" space anynumber) | ("RESOURCERESERVE" space anynumber) | "NOINCLUDE" | "WARN" | "MESSAGE" | "APPTYPE" | ("LIBPREFIX" space? charlit) | ("LIBSUFIX" space? charlit) | ("LIBVERSION" space? charlit) | ("DESCRIPTION" space? charlit) | ("D" space? charlit) | ("EXTENSION" space id) | ("E" space id) | (pp_switch space?) ;
--------------------pascal::object.bgf--------------------
array_of ::= array_word set_constructor? "of" ;
constructor_heading ::= "constructor" decl_name formal_parameters? ;
destructor_heading ::= "destructor" decl_name formal_parameters? ;
init_section ::= ("intitialization" IN NL statement_list fin_statement_list? EX NL "end") | compound_statement | "end" ;
interface_declaration ::= constant_section | type_section | var_section | (exported_heading directive?) ;
arrayType ::= array_word square_ordinalType? "of" type ;
statement ::= (labelId_colon? unlabeled_statement) | Îµ ;
structType ::= (arrayType "packed"?) | (setType "packed"?) | (fileType "packed"?) | (recordType "packed"?) ;
program_definition ::= "program" decl_name program_file_list? ";" NL program_block "." ;
procedureType ::= proc_or_func_heading of_object? ;
package_definition ::= "package" decl_name ";" NL requires_clause? contains_clause? "end" "." ;
variant_section ::= "case" id_colon? typeId "of" record_variant_semicolon+ ";"? ;
exception_else ::= exception_handler_list NL EX else_statement? ;
else_statement ::= "else" statement? ;
parameter ::= {decl_name ","}* parameter_type? ;
vis_spec_element_list ::= NL class_visibility class_element_list? ;
uses_item ::= ref_name in_clause? ;
case_label ::= expression dotDot_expression? ;
exception_handler_list ::= exception_handler semi_exception_handler* ";"? ;
simple_statement ::= (ref_name assign_expression?) | ("inherited" ref_name?) | ("goto" labelId) ;
var_declaration ::= decl_name+ ":" type var_assignment? ;
case_statement ::= "case" expression "of" case_selector IN NL semi_case_selector* ";"? EX NL else_statement? ";"? NL "end" ;
set_element ::= expression dotDot_expression? ;
interface_section ::= "interface" NL NL uses_clause? NL interface_declaration* ;
raise_statement ::= "raise" ref_name? at_address? ;
function_heading ::= function_word decl_name formal_parameters? ":" type_or_string ;
exception_handler ::= "on" exception_var? type do IN NL statement EX ;
formal_parameter ::= parm_qual? parameter ;
objectType ::= "object" object_heritage? object_field_list? method_list? "end" ;
virtual_method_heading ::= method_heading semi_directive? semicolon_virtual? ;
implementation_section ::= "implementation" IN NL uses_clause? declaration_section* EX NL ;
repeating_statement ::= "repeat" statement ";"? "until" expression ;
record_variant ::= expression+ ":" "(" field_list? ")" ;
procedure_heading ::= procedure decl_name formal_parameters? ;
interfaceType ::= "interface" interface_heritage? class_method_list? class_property_list? "end" ;
function_declaration ::= function_heading semi_directive? ";" IN NL block EX NL ";" NL ;
classType ::= "class" class_heritage? IN NL class_element_list? vis_spec_element_list* EX NL "end"? ;
program_block ::= uses_clause? block ;
parameter_type ::= ":" array_of? type param_init? ;
directive ::= "cdecl" | "register" | "dynamic" | "virtual" | "export" | "external" | "far" | "forward" | ("message" ref_name?) | "override" | "overload" | "pascal" | "reintroduce" | "safecall" | "stdcall" | "Override" ;
factor ::= ref_name | charlit | (pond_number+) | ("@" "@"? ref_name) | "nil" | ("(" expression ")") | (not_word factor) | set_constructor | (predefinedType "(" expression ")") | bool_value | ("-"? number) ;
property_interface ::= property_parameter_list? ":" type ;
try_except_statement ::= "try" IN NL statement_list EX NL except ";"? IN NL exception_block EX NL "end" ;
if_statement ::= if expression "then" statement? else_statement? ;
property_list ::= property_word decl_name property_interface? property_specifiers* ;
simple_expression ::= term? add_op_term* ;
field_list ::= field_declaration+ variant_section? ;
--------------------xml::zhang-cordy.bgf--------------------
children ::= children_body repetition? ;
cp ::= cp_body repetition? ;
dtd_body ::= misc* doctypedecl? ;
doctypedecl ::= "<!DOCTYPE" spaces name spaces sp_external_id? spaces declbody? spaces ">" spaces ;
defaultdecl ::= "#REQUIRED" | "#IMPLIED" | (fixed? attvalue) ;
pi ::= "<?" pitarget sub1_pi? "?>" ;
entitydef ::= entityvalue | (external_id ndatadecl?) ;
--------------------xslt::clark.bgf--------------------
output.element ::= output::(extension.atts (method::("xml" | "html" | "text" | qname-but-not-ncname.datatype))? (version::string())? (encoding::string())? (omit-xml-declaration::("yes" | "no"))? (standalone::("yes" | "no"))? (doctype-public::string())? (doctype-system::string())? (cdata-section-elements::qnames.datatype)? (indent::("yes" | "no"))? (media-type::string())?) ;
attribute-set.element ::= attribute-set::(extension.atts name::qname.datatype (use-attribute-sets::qnames.datatype)? attribute.element*) ;
sort.element ::= sort::(extension.atts (select::expression.datatype)? (lang::(string() | expr-avt.datatype))? (data-type::("text" | "number" | qname-but-not-ncname.datatype | expr-avt.datatype))? (order::("ascending" | "descending" | expr-avt.datatype))? (case-order::("upper-first" | "lower-first" | expr-avt.datatype))?) ;
text.element ::= text::(extension.atts (disable-output-escaping::("yes" | "no"))? string()) ;
attribute.element ::= attribute::(extension.atts name::(qname.datatype | expr-avt.datatype) (namespace::(string() | brace-avt.datatype))? template.model) ;
element.element ::= element::(extension.atts name::(qname.datatype | expr-avt.datatype) (namespace::(string() | brace-avt.datatype))? (use-attribute-sets::qnames.datatype)? template.model) ;
stylesheet.model ::= extension.atts (id::string())? (extension-element-prefixes::prefixes.datatype)? (exclude-result-prefixes::prefixes.datatype)? version::version import.element* top-level-elements.model ;
apply-templates.element ::= apply-templates::(extension.atts (select::expression.datatype)? (mode::qname.datatype)? (sort.element | with-param.element)*) ;
template.element ::= template::(extension.atts (match::pattern.datatype)? (name::qname.datatype)? (priority::number.datatype)? (mode::qname.datatype)? param.element* template.model) ;
number.element ::= number::(extension.atts (level::("single" | "multiple" | "any"))? (count::pattern.datatype)? (from::pattern.datatype)? (value::expression.datatype)? (format::avt.datatype)? (lang::(string() | expr-avt.datatype))? (letter-value::("alphabetic" | "traditional" | expr-avt.datatype))? (grouping-separator::(char.datatype | expr-avt.datatype))? (grouping-size::(number.datatype | expr-avt.datatype))?) ;
literal-result-element.atts ::= literal-result-element-no-version.atts (version::version)? ;
message.element ::= message::(extension.atts (terminate::("yes" | "no"))? template.model) ;
choose.element ::= choose::(extension.atts when.element+ otherwise.element?) ;
copy.element ::= copy::(extension.atts (use-attribute-sets::qnames.datatype)? template.model) ;
decimal-format.element ::= decimal-format::(extension.atts (name::qname.datatype)? (decimal-separator::char.datatype)? (grouping-separator::char.datatype)? (infinity::string())? (minus-sign::char.datatype)? (NaN::string())? (percent::char.datatype)? (per-mille::char.datatype)? (zero-digit::char.datatype)? (digit::char.datatype)? (pattern-separator::char.datatype)?) ;
value-of.element ::= value-of::(extension.atts select::expression.datatype (disable-output-escaping::("yes" | "no"))?) ;
--------------------php::cordy.bgf--------------------
ArrowObjectProperty ::= "->" ObjectProperty CallParams? ;
SwitchStatement ::= ("switch" "(" Expr ")" NL "{" ";"? NL IN Case* EX "}" NL) | ("switch" "(" Expr ")" ":" ";"? NL IN Case* EX "endswitch" ";" NL) ;
Document ::= (PHPOpenTag? PHPSection PHPCloseTagDocumentSection?) | (HTMLSection PHPOpenTagPHPSection? PHPCloseTagDocumentSection?) ;
ExprStatement ::= Expr ";"? NL ;
tag ::= ("<" SPOFF bigtag_id tag_attribute* ">" SPON IN NL) | (EX FL "<" SPOFF "/" bigtag_id ">" SPON FL) | ("<" SPOFF "!"? id_or_key tag_attribute* ">" SPON NL) | ("<" SPOFF "/" id_or_key ">" SPON NL) | ("<" SPOFF id_or_key tag_attribute* "/>" SPON NL) ;
Array ::= "array" "(" IN {ArrayPair ","}* ","? EX ")" ;
tag_attribute ::= SP xml_colon? id_or_key "=" token ;
InternalFunction ::= ("new" Primary) | ("clone" Primary) | ("isset" "(" {ObjectCVar ","}+ ")") | ("empty" "(" ObjectCVar ")") | ("intval" "(" ObjectCVar ")") | ("eval" "(" Expr ")") | ("exit" exit_value?) | ("include" Expr) | ("include_once" Expr) | ("require" Expr) | ("require_once" Expr) ;
ArrayPair ::= NL ArrayKey? ArrayValue ;
InterfaceMember ::= VarModifiers? "function" "&"? id "(" {Param ","}* ")" ";" NL ;
ClassMember ::= (VarModifiers? FunctionDecl) | (VarModifiers? "abstract" VarModifiers? "function" "&"? id "(" {Param ","}* ")" ";" NL) | ("var" {InstanceVariable ","}+ ";" NL) | ("const" id "=" StaticScalar ";" NL) | (VarModifiers {InstanceVariable ","}+ ";" NL) ;
IfStatement ::= ("if" "(" Expr ")" NL Statement ElseIfStatement* ElseStatement?) | ("if" "(" Expr ")" ":" NL IN TopStatement* EX AltElseifStatement* AltElseStatement? "endif" ";" NL) ;
ControlStatement ::= ("break" Expr? ";" NL) | ("continue" Expr? ";" NL) | ("return" Expr? ";" NL) ;
InstanceVariable ::= TVariable EqualsStaticScalar? ;
exit_value ::= "(" Expr? ")" ;
ScalarConstant ::= (PlusMinus? NumericConstant) | StringConstant | MagicConstant | BooleanConstant | "null" ;
PHPCloseTagDocumentSection ::= PHPCloseTag HTMLSection PHPCloseTagDocumentSection? ;
CallParam ::= "&"? Expr ;
Param ::= (TypeHint? "&"? TVariable EqualsStaticScalar?) | ("const" TVariable) ;
InstanceExpr ::= UnaryExpr InstanceOfUnaryExpr? ;
EchoStatement ::= "echo" {Expr ","}+ ";"? NL ;
StaticVariable ::= TVariable EqualsStaticScalar? ;
id_or_key ::= (id "-"? id?) | key ;
ForEachPattern ::= ForEachKey? ForEachVar ;
VariableExtension ::= ("[" Expr? "]") | ("{" Expr "}") ;
ObjectCVar ::= ClassNameColonColon? CVar CallParams? ArrowObjectProperty* ;
InterfaceDecl ::= "interface" id NL InterfaceExtendsClause? "{" NL IN InterfaceMember* EX NL "}" ;
PrintStatement ::= "print" {Expr ","}+ ";"? NL ;
ClassDecl ::= ClassType id NL ExtendsClause? ImplementsClause? "{" NL IN ClassMember* EX "}" NL ;
FunctionDecl ::= "function" "&"? id "(" {Param ","}* ")" NL Block ;
--------------------python::indent-cordy.bgf--------------------
endofline ::= tab_space* comment? newline ;
line ::= tab_space* linetoken* indent? endofline+ dedent* ;
--------------------python::sorochan-cordy.bgf--------------------
for_stmt ::= "for" exprlist "in" testlist ":" suite else_clause? ;
argument ::= endofline* test argument_value? endofline* ;
comma_test ::= endofline? "," test ;
lambdef ::= "lambda" varargslist? ":" test ;
raise_stmt ::= "raise" test_list? ;
fpdef ::= (id endofline?) | (SPOFF "(" SPON fplist endofline* ")" endofline?) ;
decorator ::= "@" dotted_name decorator_arglist? endofline endofline* ;
and_test ::= not_test andop_and_test? ;
testplist_gexp ::= (test+ endofline? ","?) | (test endofline? gen_for) ;
except_test ::= test as_or_comma_test? ;
return_stmt ::= "return" testlist? ;
exec_stmt ::= "exec" expr in_test? comma_test? ;
expr ::= xor_expr orop_expr? ;
simple_stmt ::= (small_stmt semicolon_small_stmt* ";"?) | comment ;
arglist ::= star_test? {argument ","}* comma_opt_star_test? ;
sliceop ::= ":" test? ;
integerliteral ::= integer long? imag? ;
testlist ::= test+ endofline* ","? ;
testplist_safe ::= old_test+ ","? ;
decorator_arglist ::= SPOFF "(" SPON IN arglist? endofline* ")" EX ;
argument_value ::= (endofline* gen_for?) | ("=" endofline* test) ;
plist_if ::= "if" old_test plist_iter? ;
shiftop_shift_expr ::= endofline? shift_op endofline? shift_expr ;
or_test ::= and_test orop_or_test? ;
gen_if ::= "if" old_test gen_iter? ;
test_list ::= test comma_test? comma_test? ;
if_stmt ::= "if" test ":" suite elif_clause* else_clause? ;
parameters ::= SPOFF "(" SPON varargslist? endofline* ")" ;
comma_opt_star_test ::= "," star_test? comma_opt_star_test? ;
fplist ::= fpdef+ ","? ;
listmaker ::= (endofline* test endofline* plist_for endofline*) | (endofline* {test ","}* ","? endofline*) ;
endofline ::= comment? newline ;
old_lambdef ::= "lambda" varargslist? ":" old_test ;
dotted_as_name ::= dotted_name as_id? ;
varargslist ::= (fpdef_test_comma* endofline* "*" id) | (fpdef_test_comma* endofline* "*" id endofline? "," endofline* "**" id) | (fpdef_test_comma* endofline* "**" id) | (fpdef_test+ ","?) ;
with_stmt ::= "with" test with_var? ":" suite ;
assert_stmt ::= "assert" test comma_test? ;
import_as_name ::= endofline* id as_name? ;
and_expr ::= shift_expr andop_and_expr? ;
gen_for ::= "for" exprlist "in" or_test gen_iter? ;
print_stmt ::= "print" ">>"? {test ","}* ","? ;
xor_expr ::= and_expr xorop_expr? ;
plist_for ::= "for" endofline* exprlist "in" testplist_safe plist_iter? ;
while_stmt ::= "while" test ":" suite else_clause? ;
fpdef_test ::= endofline* fpdef is_test? endofline? ;
import_as_names ::= import_as_name+ ","? ;
except_clause ::= "except" except_test? ;
floatliteral ::= (number imag?) | (pointfloat imag?) ;
exprlist ::= expr+ endofline* ","? ;
test ::= (endofline* or_test if_test? endofline?) | (endofline* lambdef endofline?) ;
atom ::= id | literal | ("(" IN endofline* yield_expr? endofline* ")" EX) | ("(" IN endofline* testplist_gexp endofline* ")" EX) | ("[" IN endofline* listmaker? "]" EX) | ("{" IN endofline* dictmaker? endofline* "}" EX) | ("`" testlist1 "`") ;
dictmaker ::= {dict_entry ","}* endofline* ","? endofline* ;
classdef ::= ("class" id? ":" suite) | ("class" id? SPOFF "(" SPON testlist? endofline* ")" ":" suite) ;
try_stmt ::= "try" ":" suite except_clause_suite* else_clause? finally_clause? ;
subscript ::= (endofline* "." "." "." endofline?) | (endofline* test endofline?) | (endofline* test? ":" test? sliceop? endofline?) ;
comparison ::= expr comp_op_comparison? ;
power ::= atom trailer* exp_factor? ;
import_from ::= "from" "."* dotted_name? endofline* "import" import_items ;
dotted_name ::= id dot_dotted_name? ;
--------------------markup::docbook-walsh.bgf--------------------
refmiscinfo.attlist ::= (class::string())? common.attrib refmiscinfo.role.attrib local.refmiscinfo.attrib ;
subject.attlist ::= (weight::string())? common.attrib subject.role.attrib local.subject.attrib ;
id.attrib ::= (id::string())? ;
condition.attrib ::= (condition::string())? ;
informaltable ::= informaltable::(informaltable.attlist blockinfo? textobject* (graphic+) | (mediaobject+) | (tgroup+)) ;
qandaset.attlist ::= (defaultlabel::("qanda" | "number" | "none"))? common.attrib qandaset.role.attrib local.qandaset.attrib ;
qandaentry ::= qandaentry::(qandaentry.attlist blockinfo? revhistory? question answer*) ;
article ::= article::(article.attlist div.title.content? articleinfo? tocchap? lot* bookcomponent.content (nav.class | appendix.class | ackno)*) ;
part ::= part::(part.attlist beginpage? partinfo? bookcomponent.title.content partintro? partcontent.mix+) ;
note ::= note::(note.attlist title? admon.mix+) ;
width.attrib ::= (width::string())? ;
refsection ::= refsection::(refsection.attlist refsectioninfo? refsect.title.content (refcomponent.mix+ refsection*) | (refsection+)) ;
affiliation ::= affiliation::(affiliation.attlist shortaffil? jobtitle* orgname? orgdiv* address*) ;
epigraph ::= epigraph::(epigraph.attlist attribution? (para.class | literallayout)+) ;
objectdata.attrib ::= (entityref::string())? (fileref::string())? (format::notation.class)? (srccredit::string())? local.objectdata.attrib ;
tbl.tgroup.att ::= (tgroupstyle::string())? ;
xref.attlist ::= (endterm::string())? linkendreq.attrib common.attrib xref.role.attrib local.xref.attrib ;
variablelist.attlist ::= (termlength::string())? common.attrib variablelist.role.attrib local.variablelist.attrib ;
inlinemediaobject ::= inlinemediaobject::(inlinemediaobject.attlist objectinfo? mediaobject.mix+) ;
book ::= book::(book.attlist div.title.content? bookinfo? (dedication | toc | lot | glossary | bibliography | preface | chapter.class | reference | part | article.class | appendix.class | index.class | colophon)*) ;
bookinfo.attlist ::= (contents::string())? common.attrib bookinfo.role.attrib local.bookinfo.attrib ;
tbody.attlist ::= (valign::("top" | "middle" | "bottom"))? secur ;
question ::= question::(question.attlist label? qandaset.mix+) ;
section ::= section::(section.attlist sectioninfo? sect.title.content nav.class* (divcomponent.mix+ (refentry.class*) | (section.class*) | (simplesect*)) | (refentry.class+) | (section.class+) | (simplesect+) nav.class*) ;
figure ::= figure::(figure.attlist blockinfo? formalobject.title.content (figure.mix | link.char.class)+) ;
formalobject.title.content ::= title titleabbrev? ;
setinfo.attlist ::= (contents::string())? common.attrib setinfo.role.attrib local.setinfo.attrib ;
replaceable.attlist ::= (class::("command" | "function" | "option" | "parameter"))? common.attrib replaceable.role.attrib local.replaceable.attrib ;
classsynopsis.attlist ::= (language::string())? (class::("class" | "interface"))? common.attrib classsynopsis.role.attrib local.classsynopsis.attrib ;
bibliomset.attlist ::= (relation::string())? common.attrib bibliomset.role.attrib local.bibliomset.attrib ;
entrytbl.attlist ::= cols::string() tbl.tgroup.att (colname::string())? (spanname::string())? (namest::string())? (nameend::string())? (colsep::yesorno)? (rowsep::yesorno)? (align::("left" | "right" | "center" | "justify" | "char"))? (char::string())? (charoff::string())? secur ;
revision ::= revision::(revision.attlist revnumber date authorinitials* (revremark | revdescription)?) ;
glosssee.attlist ::= (otherterm::string())? common.attrib glosssee.role.attrib local.glosssee.attrib ;
filename.attlist ::= (class::("headerfile" | "partition" | "devicefile" | "libraryfile" | "directory" | "extension" | "symlink"))? (path::string())? moreinfo.attrib common.attrib filename.role.attrib local.filename.attrib ;
biblio.class.attrib ::= (class::("uri" | "doi" | "isbn" | "issn" | "libraryofcongress" | "pubnumber" | "other"))? (otherclass::string())? ;
equation.content ::= alt? (graphic+) | (mediaobject+) ;
spanspec.attlist ::= namest::string() nameend::string() spanname::string() (colsep::yesorno)? (rowsep::yesorno)? (align::("left" | "right" | "center" | "justify" | "char"))? (char::string())? (charoff::string())? ;
primary.attlist ::= (sortas::string())? common.attrib primsecter.role.attrib local.primsecter.attrib ;
procedure ::= procedure::(procedure.attlist blockinfo? formalobject.title.content? component.mix* step+) ;
index ::= index::(index.attlist indexinfo? bookcomponent.title.content? component.mix* (indexdiv*) | (indexentry*)) ;
legalnotice ::= legalnotice::(legalnotice.attlist blockinfo? title? legalnotice.mix+) ;
revisionflag.attrib ::= (revisionflag::("changed" | "added" | "deleted" | "off"))? ;
mediaobjectco ::= mediaobjectco::(mediaobjectco.attlist objectinfo? imageobjectco (imageobjectco | textobject)*) ;
calloutlist ::= calloutlist::(calloutlist.attlist formalobject.title.content? callout+) ;
step ::= step::(step.attlist title? (component.mix+ (substeps component.mix*)?) | (substeps component.mix*)) ;
link.attlist ::= (endterm::string())? linkendreq.attrib (type::string())? common.attrib link.role.attrib local.link.attrib ;
productname.attlist ::= (class::("service" | "trade" | "registered" | "copyright"))? common.attrib productname.role.attrib local.productname.attrib ;
informaltable.attlist ::= (frame::("top" | "bottom" | "topbot" | "all" | "sides" | "none"))? (colsep::yesorno.attvals)? (rowsep::yesorno.attvals)? common.table.attribs tbl.table.att local.informaltable.attrib ;
lang.attrib ::= (lang::string())? ;
appendix ::= appendix::(appendix.attlist beginpage? appendixinfo? bookcomponent.title.content nav.class* tocchap? bookcomponent.content nav.class*) ;
article.attlist ::= (class::("journalarticle" | "productsheet" | "whitepaper" | "techreport" | "specification" | "faq"))? (parentbook::string())? status.attrib common.attrib article.role.attrib local.article.attrib ;
ulink.attlist ::= url::string() (type::string())? common.attrib ulink.role.attrib local.ulink.attrib ;
menuchoice ::= menuchoice::(menuchoice.attlist shortcut? (guibutton | guiicon | guilabel | guimenu | guimenuitem | guisubmenu | interface)+) ;
userlevel.attrib ::= (userlevel::string())? ;
refentry ::= refentry::(refentry.attlist beginpage? ndxterm.class* refentryinfo? refmeta? (remark | link.char.class)* refnamediv refsynopsisdiv? (refsect1+) | (refsection+)) ;
answer ::= answer::(answer.attlist label? qandaset.mix* qandaentry*) ;
olink.attlist ::= (targetdocent::string())? (linkmode::string())? (localinfo::string())? (type::string())? (targetdoc::string())? (targetptr::string())? common.attrib olink.role.attrib local.olink.attrib ;
bridgehead.attlist ::= (renderas::("other" | "sect1" | "sect2" | "sect3" | "sect4" | "sect5"))? common.attrib bridgehead.role.attrib local.bridgehead.attrib ;
msgmain ::= msgmain::(msgmain.attlist title? msgtext) ;
book.attlist ::= (fpi::string())? label.attrib status.attrib common.attrib book.role.attrib local.book.attrib ;
substeps.attlist ::= (performance::("optional" | "required"))? common.attrib substeps.role.attrib local.substeps.attrib ;
dedication ::= dedication::(dedication.attlist sect.title.content? legalnotice.mix+) ;
linkend.attrib ::= (linkend::string())? ;
figure.attlist ::= (float::yesorno.attvals)? (pgwide::yesorno.attvals)? label.attrib common.attrib figure.role.attrib local.figure.attrib ;
tfoot.attlist ::= (valign::("top" | "middle" | "bottom"))? secur ;
segmentedlist ::= segmentedlist::(segmentedlist.attlist formalobject.title.content? segtitle+ seglistitem+) ;
setindex ::= setindex::(setindex.attlist setindexinfo? bookcomponent.title.content? component.mix* (indexdiv*) | (indexentry*)) ;
modespec.attlist ::= (application::notation.class)? common.attrib modespec.role.attrib local.modespec.attrib ;
textobject ::= textobject::(textobject.attlist objectinfo? phrase | textdata | (textobject.mix+)) ;
row.attlist ::= (rowsep::yesorno)? (valign::("top" | "middle" | "bottom"))? secur ;
bookcomponent.title.content ::= title subtitle? titleabbrev? ;
glossentry ::= glossentry::(glossentry.attlist glossterm acronym? abbrev? ndxterm.class* revhistory? glosssee | (glossdef+)) ;
personblurb ::= personblurb::(personblurb.attlist title? para.class+) ;
informalequation ::= informalequation::(informalequation.attlist blockinfo? equation.content) ;
cmdsynopsis.attlist ::= label.attrib (sepchar::string())? (cmdlength::string())? common.attrib cmdsynopsis.role.attrib local.cmdsynopsis.attrib ;
xreflabel.attrib ::= (xreflabel::string())? ;
table.attlist ::= (frame::("top" | "bottom" | "topbot" | "all" | "sides" | "none"))? (colsep::yesorno)? (rowsep::yesorno)? tbl.table.att bodyatt secur ;
step.attlist ::= (performance::("optional" | "required"))? common.attrib step.role.attrib local.step.attrib ;
refsect3 ::= refsect3::(refsect3.attlist refsect3info? refsect.title.content refcomponent.mix+) ;
warning ::= warning::(warning.attlist title? admon.mix+) ;
refsect2 ::= refsect2::(refsect2.attlist refsect2info? refsect.title.content (refcomponent.mix+ refsect3*) | (refsect3+)) ;
refsect1 ::= refsect1::(refsect1.attlist refsect1info? refsect.title.content (refcomponent.mix+ refsect2*) | (refsect2+)) ;
tip ::= tip::(tip.attlist title? admon.mix+) ;
areaspec.attlist ::= (units::("calspair" | "linecolumn" | "linerange" | "linecolumnpair" | "other"))? (otherunits::string())? common.attrib areaspec.role.attrib local.areaspec.attrib ;
sgmltag.attlist ::= (class::("attribute" | "attvalue" | "element" | "endtag" | "emptytag" | "genentity" | "numcharref" | "paramentity" | "pi" | "xmlpi" | "starttag" | "sgmlcomment"))? common.attrib sgmltag.role.attrib local.sgmltag.attrib ;
informalexample ::= informalexample::(informalexample.attlist blockinfo? example.mix+) ;
audioobject ::= audioobject::(audioobject.attlist objectinfo? audiodata) ;
moreinfo.attrib ::= (moreinfo::("refentry" | "none"))? ;
systemitem.attlist ::= (class::("constant" | "event" | "eventhandler" | "domainname" | "fqdomainname" | "ipaddress" | "netmask" | "etheraddress" | "groupname" | "library" | "macro" | "osname" | "filesystem" | "resource" | "systemname" | "username" | "newsgroup"))? moreinfo.attrib common.attrib systemitem.role.attrib local.systemitem.attrib ;
linespecific.attrib ::= (format::"linespecific")? (linenumbering::("numbered" | "unnumbered"))? ;
lotentry.attlist ::= linkend.attrib pagenum.attrib (srccredit::string())? common.attrib lotentry.role.attrib local.lotentry.attrib ;
msgentry ::= msgentry::(msgentry.attlist msg+ msginfo? msgexplan*) ;
constructorsynopsis ::= constructorsynopsis::(constructorsynopsis.attlist modifier* methodname? (methodparam+) | void exceptionname*) ;
fieldsynopsis ::= fieldsynopsis::(fieldsynopsis.attlist modifier* type? varname initializer?) ;
destructorsynopsis ::= destructorsynopsis::(destructorsynopsis.attlist modifier* methodname? (methodparam+) | void exceptionname*) ;
graphics.attrib ::= (entityref::string())? (fileref::string())? (format::notation.class)? (srccredit::string())? (width::string())? (contentwidth::string())? (depth::string())? (contentdepth::string())? (align::("left" | "right" | "center"))? (valign::("top" | "middle" | "bottom"))? (scale::string())? (scalefit::yesorno.attvals)? local.graphics.attrib ;
glossdef.attlist ::= (subject::string())? common.attrib glossdef.role.attrib local.glossdef.attrib ;
orderedlist ::= orderedlist::(orderedlist.attlist blockinfo? formalobject.title.content? listpreamble.mix* listitem+) ;
subjectset.attlist ::= (scheme::string())? common.attrib subjectset.role.attrib local.subjectset.attrib ;
areaset.attlist ::= label.attrib (units::("calspair" | "linecolumn" | "linerange" | "linecolumnpair" | "other"))? (otherunits::string())? coords::string() idreq.common.attrib areaset.role.attrib local.areaset.attrib ;
keyaction.attrib ::= (action::("click" | "double-click" | "press" | "seq" | "simul" | "other"))? (otheraction::string())? local.keyaction.attrib ;
listitem.attlist ::= (override::string())? common.attrib listitem.role.attrib local.listitem.attrib ;
msg ::= msg::(msg.attlist title? msgmain (msgsub | msgrel)*) ;
preface ::= preface::(preface.attlist beginpage? prefaceinfo? bookcomponent.title.content nav.class* tocchap? bookcomponent.content nav.class*) ;
indexdiv ::= indexdiv::(indexdiv.attlist sect.title.content? indexdivcomponent.mix* (indexentry+) | segmentedlist) ;
parameter.attlist ::= (class::("command" | "function" | "option"))? moreinfo.attrib common.attrib parameter.role.attrib local.parameter.attrib ;
videoobject ::= videoobject::(videoobject.attlist objectinfo? videodata) ;
bibliodiv ::= bibliodiv::(bibliodiv.attlist sect.title.content? component.mix* (biblioentry | bibliomixed)+) ;
glossentry.attlist ::= (sortas::string())? common.attrib glossentry.role.attrib local.glossentry.attrib ;
msgrel ::= msgrel::(msgrel.attlist title? msgtext) ;
sect.title.content ::= title subtitle? titleabbrev? ;
videodata.attlist ::= (width::string())? (contentwidth::string())? (depth::string())? (contentdepth::string())? (align::("left" | "right" | "center"))? (valign::("top" | "middle" | "bottom"))? (scale::string())? (scalefit::yesorno.attvals)? objectdata.attrib common.attrib videodata.role.attrib local.videodata.attrib ;
constant.attlist ::= (class::"limit")? common.attrib constant.role.attrib local.constant.attrib ;
methodsynopsis ::= methodsynopsis::(methodsynopsis.attlist modifier* (type | void)? methodname (methodparam+) | void exceptionname* modifier*) ;
bibliocoverage.attlist ::= (spatial::("dcmipoint" | "iso3166" | "dcmibox" | "tgn" | "otherspatial"))? (otherspatial::string())? (temporal::("dcmiperiod" | "w3c-dtf" | "othertemporal"))? (othertemporal::string())? common.attrib bibliocoverage.role.attrib local.bibliocoverage.attrib ;
inlineequation.content ::= alt? (graphic+) | (inlinemediaobject+) ;
caution ::= caution::(caution.attlist title? admon.mix+) ;
literallayout.attlist ::= width.attrib linespecific.attrib (class::("monospaced" | "normal"))? common.attrib literallayout.role.attrib local.literallayout.attrib ;
example ::= example::(example.attlist blockinfo? formalobject.title.content example.mix+) ;
symbol.attlist ::= (class::"limit")? common.attrib symbol.role.attrib local.symbol.attrib ;
screenshot ::= screenshot::(screenshot.attlist screeninfo? graphic | graphicco | mediaobject | mediaobjectco) ;
tbl.table.mdl ::= blockinfo? formalobject.title.content ndxterm.class* textobject* (graphic+) | (mediaobject+) | (tgroup+) ;
arch.attrib ::= (arch::string())? ;
bibliography ::= bibliography::(bibliography.attlist bibliographyinfo? bookcomponent.title.content? component.mix* (bibliodiv+) | ((biblioentry | bibliomixed)+)) ;
set ::= set::(set.attlist div.title.content? setinfo? toc? book.class+ setindex?) ;
medialabel.attlist ::= (class::("cartridge" | "cdrom" | "disk" | "tape"))? common.attrib medialabel.role.attrib local.medialabel.attrib ;
constructorsynopsis.attlist ::= (language::string())? common.attrib constructorsynopsis.role.attrib local.constructorsynopsis.attrib ;
fieldsynopsis.attlist ::= (language::string())? common.attrib fieldsynopsis.role.attrib local.fieldsynopsis.attrib ;
destructorsynopsis.attlist ::= (language::string())? common.attrib destructorsynopsis.role.attrib local.destructorsynopsis.attrib ;
area.attlist ::= label.attrib linkends.attrib (units::("calspair" | "linecolumn" | "linerange" | "linecolumnpair" | "other"))? (otherunits::string())? coords::string() idreq.common.attrib area.role.attrib local.area.attrib ;
orderedlist.attlist ::= (numeration::("arabic" | "upperalpha" | "loweralpha" | "upperroman" | "lowerroman"))? (inheritnum::("inherit" | "ignore"))? (continuation::("continues" | "restarts"))? (spacing::("normal" | "compact"))? common.attrib orderedlist.role.attrib local.orderedlist.attrib ;
sidebar ::= sidebar::(sidebar.attlist sidebarinfo? formalobject.title.content? sidebar.mix+) ;
tgroup.attlist ::= cols::string() tbl.tgroup.att (colsep::yesorno)? (rowsep::yesorno)? (align::("left" | "right" | "center" | "justify" | "char"))? (char::string())? (charoff::string())? secur ;
imageobject ::= imageobject::(imageobject.attlist objectinfo? imagedata) ;
partintro ::= partintro::(partintro.attlist div.title.content? bookcomponent.content) ;
imagedata.attlist ::= (width::string())? (contentwidth::string())? (depth::string())? (contentdepth::string())? (align::("left" | "right" | "center"))? (valign::("top" | "middle" | "bottom"))? (scale::string())? (scalefit::yesorno.attvals)? objectdata.attrib common.attrib imagedata.role.attrib local.imagedata.attrib ;
qandadiv ::= qandadiv::(qandadiv.attlist blockinfo? formalobject.title.content? qandaset.mix* (qandadiv+) | (qandaentry+)) ;
sect5 ::= sect5::(sect5.attlist sect5info? sect.title.content nav.class* (divcomponent.mix+ (refentry.class*) | (simplesect*)) | (refentry.class+) | (simplesect+) nav.class*) ;
sect4 ::= sect4::(sect4.attlist sect4info? sect.title.content nav.class* (divcomponent.mix+ (refentry.class*) | (sect5*) | (simplesect*)) | (refentry.class+) | (sect5+) | (simplesect+) nav.class*) ;
lot ::= lot::(lot.attlist beginpage? bookcomponent.title.content? lotentry*) ;
tbl.table.att ::= (tabstyle::string())? (tocentry::yesorno)? (shortentry::yesorno)? (orient::("port" | "land"))? (pgwide::yesorno)? ;
group.attlist ::= (choice::("opt" | "req" | "plain"))? (rep::("norepeat" | "repeat"))? common.attrib group.role.attrib local.group.attrib ;
sect3 ::= sect3::(sect3.attlist sect3info? sect.title.content nav.class* (divcomponent.mix+ (refentry.class*) | (sect4*) | (simplesect*)) | (refentry.class+) | (sect4+) | (simplesect+) nav.class*) ;
sect2 ::= sect2::(sect2.attlist sect2info? sect.title.content nav.class* (divcomponent.mix+ (refentry.class*) | (sect3*) | (simplesect*)) | (refentry.class+) | (sect3+) | (simplesect+) nav.class*) ;
sect1 ::= sect1::(sect1.attlist sect1info? sect.title.content nav.class* (divcomponent.mix+ (refentry.class*) | (sect2*) | (simplesect*)) | (refentry.class+) | (sect2+) | (simplesect+) nav.class*) ;
chapter ::= chapter::(chapter.attlist beginpage? chapterinfo? bookcomponent.title.content nav.class* tocchap? bookcomponent.content nav.class*) ;
database.attlist ::= (class::("name" | "table" | "field" | "key1" | "key2" | "record"))? moreinfo.attrib common.attrib database.role.attrib local.database.attrib ;
methodparam ::= methodparam::(methodparam.attlist modifier* type? (parameter initializer?) | funcparams modifier*) ;
equation ::= equation::(equation.attlist blockinfo? formalobject.title.content? informalequation | equation.content) ;
reference ::= reference::(reference.attlist beginpage? referenceinfo? bookcomponent.title.content partintro? refentry.class+) ;
refsect.title.content ::= title subtitle? titleabbrev? ;
toc ::= toc::(toc.attlist beginpage? bookcomponent.title.content? tocfront* (tocpart | tocchap)* tocback*) ;
glossterm.attlist ::= linkend.attrib (baseform::string())? common.attrib glossterm.role.attrib local.glossterm.attrib ;
methodsynopsis.attlist ::= (language::string())? common.attrib methodsynopsis.role.attrib local.methodsynopsis.attrib ;
status.attrib ::= (status::string())? local.status.attrib ;
linkends.attrib ::= (linkends::string())? ;
colophon ::= colophon::(colophon.attlist sect.title.content? textobject.mix+) ;
div.title.content ::= title subtitle? titleabbrev? ;
secondary.attlist ::= (sortas::string())? common.attrib primsecter.role.attrib local.primsecter.attrib ;
bibliorelation.type.attrib ::= (type::("isversionof" | "hasversion" | "isreplacedby" | "replaces" | "isrequiredby" | "requires" | "ispartof" | "haspart" | "isreferencedby" | "references" | "isformatof" | "hasformat" | "othertype" | local.bibliorelation.types))? (othertype::string())? ;
conformance.attrib ::= (conformance::string())? ;
entry.attlist ::= (colname::string())? (namest::string())? (nameend::string())? (spanname::string())? (morerows::string())? (colsep::yesorno)? (rowsep::yesorno)? (align::("left" | "right" | "center" | "justify" | "char"))? (char::string())? (charoff::string())? (rotate::yesorno)? (valign::("top" | "middle" | "bottom"))? secur ;
role.attrib ::= (role::string())? ;
itemizedlist ::= itemizedlist::(itemizedlist.attlist blockinfo? formalobject.title.content? listpreamble.mix* listitem+) ;
msgset ::= msgset::(msgset.attlist blockinfo? formalobject.title.content? (msgentry+) | (simplemsgentry+)) ;
orgname.attlist ::= common.attrib (class::("corporation" | "nonprofit" | "consortium" | "informal" | "other"))? (otherclass::string())? orgname.role.attrib local.orgname.attrib ;
indexterm ::= indexterm::(indexterm.attlist primary? ((secondary ((tertiary (see | (seealso+))?) | see | (seealso+))?) | see | (seealso+))?) ;
revision.attrib ::= (revision::string())? ;
informalfigure ::= informalfigure::(informalfigure.attlist blockinfo? (figure.mix | link.char.class)+) ;
security.attrib ::= (security::string())? ;
set.attlist ::= (fpi::string())? status.attrib common.attrib set.role.attrib local.set.attrib ;
refnamediv ::= refnamediv::(refnamediv.attlist refdescriptor? refname+ refpurpose refclass* (remark | link.char.class)*) ;
citetitle.attlist ::= (pubwork::("article" | "book" | "chapter" | "part" | "refentry" | "section" | "journal" | "series" | "set" | "manuscript"))? common.attrib citetitle.role.attrib local.citetitle.attrib ;
vendor.attrib ::= (vendor::string())? ;
authorblurb ::= authorblurb::(authorblurb.attlist title? para.class+) ;
textdata.attlist ::= (encoding::string())? objectdata.attrib common.attrib textdata.role.attrib local.textdata.attrib ;
arg.attlist ::= (choice::("opt" | "req" | "plain"))? (rep::("norepeat" | "repeat"))? common.attrib arg.role.attrib local.arg.attrib ;
qandaset ::= qandaset::(qandaset.attlist blockinfo? formalobject.title.content? qandaset.mix* (qandadiv+) | (qandaentry+)) ;
thead.attlist ::= (valign::("top" | "middle" | "bottom"))? secur ;
tertiary.attlist ::= (sortas::string())? common.attrib primsecter.role.attrib local.primsecter.attrib ;
mediaobject ::= mediaobject::(mediaobject.attlist objectinfo? mediaobject.mix+ caption?) ;
sect5.attlist ::= (renderas::("sect1" | "sect2" | "sect3" | "sect4"))? label.attrib status.attrib common.attrib sect5.role.attrib local.sect5.attrib ;
important ::= important::(important.attlist title? admon.mix+) ;
abstract ::= abstract::(abstract.attlist title? para.class+) ;
sect4.attlist ::= (renderas::("sect1" | "sect2" | "sect3" | "sect5"))? label.attrib status.attrib common.attrib sect4.role.attrib local.sect4.attrib ;
application.attlist ::= (class::("hardware" | "software"))? moreinfo.attrib common.attrib application.role.attrib local.application.attrib ;
simplelist.attlist ::= (columns::string())? (type::("inline" | "vert" | "horiz"))? common.attrib simplelist.role.attrib local.simplelist.attrib ;
glossseealso.attlist ::= (otherterm::string())? common.attrib glossseealso.role.attrib local.glossseealso.attrib ;
sect3.attlist ::= (renderas::("sect1" | "sect2" | "sect4" | "sect5"))? label.attrib status.attrib common.attrib sect3.role.attrib local.sect3.attrib ;
sect2.attlist ::= (renderas::("sect1" | "sect3" | "sect4" | "sect5"))? label.attrib status.attrib common.attrib sect2.role.attrib local.sect2.attrib ;
sect1.attlist ::= (renderas::("sect2" | "sect3" | "sect4" | "sect5"))? label.attrib status.attrib common.attrib sect1.role.attrib local.sect1.attrib ;
msgsub ::= msgsub::(msgsub.attlist title? msgtext) ;
glossary ::= glossary::(glossary.attlist glossaryinfo? bookcomponent.title.content? component.mix* (glossdiv+) | (glossentry+) bibliography?) ;
methodparam.attlist ::= (choice::("opt" | "req" | "plain"))? (rep::("norepeat" | "repeat"))? common.attrib methodparam.role.attrib local.methodparam.attrib ;
msgexplan ::= msgexplan::(msgexplan.attlist title? component.mix+) ;
biblioset.attlist ::= (relation::string())? common.attrib biblioset.role.attrib local.biblioset.attrib ;
titles ::= title? ;
variablelist ::= variablelist::(variablelist.attlist blockinfo? formalobject.title.content? listpreamble.mix* varlistentry+) ;
refmeta ::= refmeta::(refmeta.attlist ndxterm.class* refentrytitle manvolnum? refmiscinfo* ndxterm.class*) ;
citerefentry ::= citerefentry::(citerefentry.attlist refentrytitle manvolnum?) ;
simplemsgentry.attlist ::= (audience::string())? (level::string())? (origin::string())? common.attrib simplemsgentry.role.attrib local.simplemsgentry.attrib ;
os.attrib ::= (os::string())? ;
itemizedlist.attlist ::= (spacing::("normal" | "compact"))? mark.attrib common.attrib itemizedlist.role.attrib local.itemizedlist.attrib ;
indexterm.attlist ::= pagenum.attrib (scope::("all" | "global" | "local"))? (significance::("preferred" | "normal"))? (class::("singular" | "startofrange" | "endofrange"))? (startref::string())? (zone::string())? common.attrib indexterm.role.attrib local.indexterm.attrib ;
blockquote ::= blockquote::(blockquote.attlist title? attribution? component.mix+) ;
remap.attrib ::= (remap::string())? ;
colspec.attlist ::= (colnum::string())? (colname::string())? (colwidth::string())? (colsep::yesorno)? (rowsep::yesorno)? (align::("left" | "right" | "center" | "justify" | "char"))? (char::string())? (charoff::string())? ;
mark.attrib ::= (mark::string())? local.mark.attrib ;
refsynopsisdiv ::= refsynopsisdiv::(refsynopsisdiv.attlist refsynopsisdivinfo? refsect.title.content? (refcomponent.mix+ refsect2*) | (refsect2+)) ;
informalfigure.attlist ::= (float::yesorno.attvals)? (pgwide::yesorno.attvals)? label.attrib common.attrib informalfigure.role.attrib local.informalfigure.attrib ;
label.attrib ::= (label::string())? ;
tbl.entrytbl.mdl ::= colspec* spanspec* thead? tbody ;
trademark.attlist ::= (class::("service" | "trade" | "registered" | "copyright"))? common.attrib trademark.role.attrib local.trademark.attrib ;
tbl.tgroup.mdl ::= colspec* spanspec* thead? tfoot? tbody ;
pagenum.attrib ::= (pagenum::string())? ;
--------------------markup::json-zaytsev-concrete.bgf--------------------
JSONNumber ::= "-"? Digits ("." Digits)? ;
--------------------markup::mathml-furubayashi.bgf--------------------
mml.att-actiontype ::= ((actiontype::"toggle" selection::mml.positiveinteger.datatype) | (actiontype::"statusline") | (actiontype::"tooltip") | (actiontype::"highlight" mml.color.datatype*) | (actiontype::"menu" selection::mml.positiveinteger.datatype))? ;
mml.piecewise.qname ::= piecewise::(mml.piece.qname* mml.otherwise.qname? mml.Common.attrib) ;
mml.att-nargs ::= (nargs::("nary" | mml.number.datatype))? ;
mml.att-veryverythickmathspace ::= (veryverythickmathspace::mml.length.datatype)? ;
mml.att-rowalign ::= (rowalign::mml.rowalign.datatype)? ;
mml.att-width ::= (width::mml.namedspace.datatype)? ;
mml.att-depth ::= (depth::mml.length.datatype)? ;
mml.att-groupalign ::= (groupalign::mml.groupalign.datatype)? ;
mml.att-fontstyle ::= (fontstyle::("normal" | "italic"))? ;
mml.att-display ::= (display::string())? ;
mml.att-rowlines ::= (rowlines::mml.lines.datatype)? ;
mml.att-closure ::= (closure::("open" | "closed" | "open-closed" | "closed-open"))? ;
mml.Common.attrib ::= (xlink:href::mml.uri.datatype)? (class::string())? (style::string())? (id::mml.id.datatype)? (xref::mml.idref.datatype)? (other::string())? ;
mml.att-symmetric ::= (symmetric::("true" | "false"))? ;
mml.att-subscriptshift ::= (subscriptshift::mml.length.datatype)? ;
mml.att-fence ::= (fence::("true" | "false"))? ;
mml.att-columnwidth ::= (columnwidth::mml.columnwidth.datatype)? ;
mml.att-rspace ::= (rspace::mml.namedspace.datatype)? ;
mml.att-encoding ::= (encoding::string())? ;
mml.att-definition ::= (definitionURL::mml.uri.datatype)? ;
mml.att-bevelled ::= (bevelled::("true" | "false"))? ;
mml.att-columnspacing ::= (columnspacing::mml.columnspacing.datatype)? ;
mml.att-alignmentscope ::= (alignmentscope::mml.alignmentscope.datatype)? ;
mml.att-occurrence ::= (occurrence::("prefix" | "infix" | "function-model"))? ;
mml.att-base ::= (base::mml.number.datatype)? ;
mml.att-fontsize ::= (fontsize::mml.length.datatype)? ;
mml.att-alt ::= (alt::string())? ;
mml.att-mediummathspace ::= (mediummathspace::mml.length.datatype)? ;
mml.att-scriptminsize ::= (scriptminsize::mml.length.datatype)? ;
mml.att-open ::= (open::string())? ;
mml.att-rquote ::= (rquote::string())? ;
mml.att-accent ::= (accent::("true" | "false"))? ;
mml.att-rowspan ::= (rowspan::("top" | "bottom" | "center" | "baseline" | "axis"))? ;
mml.att-baseline ::= (baseline::string())? ;
mml.menclose.qname ::= menclose::(mml.PresExpression mml.Common.attrib (notation::("longdiv" | "actuarial" | "radical"))?) ;
mml.att-form ::= (form::("prefix" | "infix" | "postfix"))? ;
mml.att-edge ::= (edge::("left" | "right"))? ;
mml.att-veryverythinmathspace ::= (veryverythinmathspace::mml.length.datatype)? ;
mml.att-scriptlevel ::= (scriptlevel::mml.number.datatype)? ;
mml.att-superscriptshift ::= (superscriptshift::mml.length.datatype)? ;
mml.att-type ::= (type::("e-notation" | "integer" | "rational" | "real" | "float" | "complex-polar" | "complex-cartesian" | "constant"))? ;
mml.att-verythickmathspace ::= (verythickmathspace::mml.length.datatype)? ;
mml.att-framespacing ::= (framespacing::mml.framespacing.datatype)? ;
mml.att-mathbackground ::= (mathbackground::mml.color.datatype)? ;
mml.att-verythinmathspace ::= (verythinmathspace::mml.length.datatype)? ;
mml.att-equalrows ::= (equalrows::("true" | "false"))? ;
mml.att-linebreak ::= (linebreak::("auto" | "newline" | "indentingnewline" | "nobreak" | "goodbreak" | "badbreak"))? ;
mml.att-displaystyle ::= (displaystyle::("true" | "false"))? ;
mml.att-separators ::= (separators::string())? ;
mml.att-background ::= (background::mml.color.datatype)? ;
mml.att-movablelimits ::= (movablelimits::("true" | "false"))? ;
mml.att-equalcolumns ::= (equalcolumns::("true" | "false"))? ;
mml.att-rowspacing ::= (rowspacing::mml.rowspacing.datatype)? ;
mml.att-align ::= (align::mml.align.datatype)? ;
mml.att-thinmathspace ::= (thinmathspace::mml.length.datatype)? ;
mml.att-height ::= (height::mml.length.datatype)? ;
mml.att-macros ::= (macros::string())? ;
mml.att-linethickness ::= (linethickness::(mml.length.datatype | "thin" | "medium" | "thick"))? ;
mml.att-mode ::= (mode::string())? ;
mml.att-mathvariant ::= (mathvariant::("normal" | "bold" | "italic" | "bold-italic" | "double-struck" | "bold-fraktur" | "script" | "bold-script" | "fraktur" | "sans-serif" | "bold-sans-serif" | "sans-serif-italic" | "sans-serif-bold-italic" | "monospace"))? ;
mml.att-columnspan ::= (columnspan::mml.columnspan.datatype)? ;
mml.att-close ::= (close::string())? ;
mml.att-lspace ::= (lspace::mml.namedspace.datatype)? ;
mml.att-stretchy ::= (stretchy::("true" | "false"))? ;
mml.att-columnalign ::= (columnalign::mml.columnalign.datatype)? ;
mml.att-frame ::= (frame::("none" | "solid" | "dashed"))? ;
mml.att-lquote ::= (lquote::string())? ;
mml.att-columnlines ::= (columnlines::mml.lines.datatype)? ;
mml.att-scriptsizemultiplier ::= (scriptsizemultiplier::mml.nonnegativefloat.datatype)? ;
mml.att-name ::= (name::string())? ;
mml.att-maxsize ::= (maxsize::(mml.namedspace.datatype | "infinity"))? ;
mml.att-separator ::= (separator::("true" | "false"))? ;
mml.att-mathsize ::= (mathsize::("small" | "normal" | "big" | mml.length.datatype))? ;
mml.att-fontweight ::= (fontweight::("normal" | "bold"))? ;
mml.att-color ::= (color::mml.color.datatype)? ;
mml.att-overflow ::= (overflow::("scroll" | "elide" | "truncate" | "scale"))? ;
mml.att-thickmathspace ::= (thickmathspace::mml.length.datatype)? ;
mml.align.datatype ::= "top" | "bottom" | "center" | "baseline" | "axis" integer()? ;
mml.att-largeop ::= (largeop::("true" | "false"))? ;
mml.att-mathcolor ::= (mathcolor::mml.color.datatype)? ;
mml.att-altimg ::= (altimg::mml.uri.datatype)? ;
mml.att-alttext ::= (alttext::string())? ;
mml.att-scope ::= (scope::("local" | "global"))? ;
mml.att-minsize ::= (minsize::mml.namedspace.datatype)? ;
mml.att-index ::= (index::mml.number.datatype)? ;
mml.att-fontfamily ::= (fontfamily::string())? ;
mml.att-accentunder ::= (accentunder::("true" | "false"))? ;
mml.att-order ::= (order::("lexicographic" | "numeric"))? ;
--------------------markup::pnml-ext-inhibitor.bgf--------------------
font.element ::= font::((family::string())? (style::string())? (weight::string())? (size::string())? (decoration::("underline" | "overline" | "line-through"))? (align::("left" | "center" | "right"))? (rotation::integer())?) ;
arc.content ::= arc::(identifier.content source::string() target::string() Name? arc.labels (graphics::edgegraphics.content)? toolspecific.element*) ;
node.content ::= (graphics::nodegraphics.content)? ;
net.element ::= net::(identifier.content nettype.uri Name? net.labels page.content+ toolspecific.element*) ;
arc.labels ::= ArcType ;
 arc.labels ::= PTArcAnnotation? ;
 arc.labels ::= Îµ ;
simpletext.content ::= (text::string())? ;
page.content ::= page::(identifier.content basicobject.content page.labels netobject.content* (graphics::pagegraphics.content)?) ;
nodegraphics.content ::= position.element dimension.element? fill.element? line.element? ;
basicobject.content ::= Name? toolspecific.element* ;
annotationstandard.content ::= (graphics::annotationgraphics.content)? toolspecific.element* ;
place.labels ::= PTMarking? ;
 place.labels ::= Îµ ;
annotationgraphics.content ::= offset.element fill.element? line.element? font.element? ;
edgegraphics.content ::= position.element* line.element? ;
line.element ::= line::((shape::("line" | "curve"))? (color::color.type)? (width::positiveDecimal.content)? (style::("solid" | "dash" | "dot"))?) ;
fill.element ::= fill::((color::color.type)? (gradient-color::color.type)? (gradient-rotation::("vertical" | "horizontal" | "diagonal"))? (image::string())?) ;
--------------------markup::pnml-ext-reset.bgf--------------------
font.element ::= font::((family::string())? (style::string())? (weight::string())? (size::string())? (decoration::("underline" | "overline" | "line-through"))? (align::("left" | "center" | "right"))? (rotation::integer())?) ;
arc.content ::= arc::(identifier.content source::string() target::string() Name? arc.labels (graphics::edgegraphics.content)? toolspecific.element*) ;
node.content ::= (graphics::nodegraphics.content)? ;
net.element ::= net::(identifier.content nettype.uri Name? net.labels page.content+ toolspecific.element*) ;
arc.labels ::= ArcType ;
 arc.labels ::= PTArcAnnotation? ;
 arc.labels ::= Îµ ;
simpletext.content ::= (text::string())? ;
page.content ::= page::(identifier.content basicobject.content page.labels netobject.content* (graphics::pagegraphics.content)?) ;
nodegraphics.content ::= position.element dimension.element? fill.element? line.element? ;
basicobject.content ::= Name? toolspecific.element* ;
annotationstandard.content ::= (graphics::annotationgraphics.content)? toolspecific.element* ;
place.labels ::= PTMarking? ;
 place.labels ::= Îµ ;
annotationgraphics.content ::= offset.element fill.element? line.element? font.element? ;
edgegraphics.content ::= position.element* line.element? ;
line.element ::= line::((shape::("line" | "curve"))? (color::color.type)? (width::positiveDecimal.content)? (style::("solid" | "dash" | "dot"))?) ;
fill.element ::= fill::((color::color.type)? (gradient-color::color.type)? (gradient-rotation::("vertical" | "horizontal" | "diagonal"))? (image::string())?) ;
--------------------markup::pnml-ext-resetinhibitor.bgf--------------------
font.element ::= font::((family::string())? (style::string())? (weight::string())? (size::string())? (decoration::("underline" | "overline" | "line-through"))? (align::("left" | "center" | "right"))? (rotation::integer())?) ;
arc.content ::= arc::(identifier.content source::string() target::string() Name? arc.labels (graphics::edgegraphics.content)? toolspecific.element*) ;
node.content ::= (graphics::nodegraphics.content)? ;
net.element ::= net::(identifier.content nettype.uri Name? net.labels page.content+ toolspecific.element*) ;
arc.labels ::= ArcType ;
 arc.labels ::= PTArcAnnotation? ;
 arc.labels ::= Îµ ;
simpletext.content ::= (text::string())? ;
page.content ::= page::(identifier.content basicobject.content page.labels netobject.content* (graphics::pagegraphics.content)?) ;
nodegraphics.content ::= position.element dimension.element? fill.element? line.element? ;
basicobject.content ::= Name? toolspecific.element* ;
annotationstandard.content ::= (graphics::annotationgraphics.content)? toolspecific.element* ;
place.labels ::= PTMarking? ;
 place.labels ::= Îµ ;
annotationgraphics.content ::= offset.element fill.element? line.element? font.element? ;
edgegraphics.content ::= position.element* line.element? ;
line.element ::= line::((shape::("line" | "curve"))? (color::color.type)? (width::positiveDecimal.content)? (style::("solid" | "dash" | "dot"))?) ;
fill.element ::= fill::((color::color.type)? (gradient-color::color.type)? (gradient-rotation::("vertical" | "horizontal" | "diagonal"))? (image::string())?) ;
--------------------markup::pnml-highlevelnet.bgf--------------------
font.element ::= font::((family::string())? (style::string())? (weight::string())? (size::string())? (decoration::("underline" | "overline" | "line-through"))? (align::("left" | "center" | "right"))? (rotation::integer())?) ;
arc.content ::= arc::(identifier.content source::string() target::string() Name? arc.labels (graphics::edgegraphics.content)? toolspecific.element*) ;
Condition ::= condition::(simpletextlabel.content (structure::Term)?) ;
arc.labels ::= HLAnnotation? ;
 arc.labels ::= Îµ ;
page.content ::= page::(identifier.content basicobject.content page.labels netobject.content* (graphics::pagegraphics.content)?) ;
Type ::= type::(simpletextlabel.content (structure::Sort)?) ;
nodegraphics.content ::= position.element dimension.element? fill.element? line.element? ;
basicobject.content ::= Name? toolspecific.element* ;
transition.labels ::= Condition? ;
 transition.labels ::= Îµ ;
annotationstandard.content ::= (graphics::annotationgraphics.content)? toolspecific.element* ;
HLDeclaration ::= declaration::(simpletextlabel.content (structure::Declarations)?) ;
edgegraphics.content ::= position.element* line.element? ;
HLAnnotation ::= hlinscription::(simpletextlabel.content (structure::Term)?) ;
fill.element ::= fill::((color::color.type)? (gradient-color::color.type)? (gradient-rotation::("vertical" | "horizontal" | "diagonal"))? (image::string())?) ;
HLMarking ::= hlinitialMarking::(simpletextlabel.content (structure::Term)?) ;
node.content ::= (graphics::nodegraphics.content)? ;
net.element ::= net::(identifier.content nettype.uri Name? net.labels page.content+ toolspecific.element*) ;
simpletext.content ::= (text::string())? ;
place.labels ::= Type? HLMarking? ;
 place.labels ::= Îµ ;
annotationgraphics.content ::= offset.element fill.element? line.element? font.element? ;
line.element ::= line::((shape::("line" | "curve"))? (color::color.type)? (width::positiveDecimal.content)? (style::("solid" | "dash" | "dot"))?) ;
--------------------markup::pnml-hlcorestructure.bgf--------------------
Condition ::= condition::(simpletextlabel.content (structure::Term)?) ;
arc.labels ::= HLAnnotation? ;
Type ::= type::(simpletextlabel.content (structure::Sort)?) ;
transition.labels ::= Condition? ;
HLDeclaration ::= declaration::(simpletextlabel.content (structure::Declarations)?) ;
place.labels ::= Type? HLMarking? ;
HLAnnotation ::= hlinscription::(simpletextlabel.content (structure::Term)?) ;
HLMarking ::= hlinitialMarking::(simpletextlabel.content (structure::Term)?) ;
--------------------markup::pnml-hlpng.bgf--------------------
arc.content ::= arc::(identifier.content source::string() target::string() Name? arc.labels (graphics::edgegraphics.content)? toolspecific.element*) ;
font.element ::= font::((family::string())? (style::string())? (weight::string())? (size::string())? (decoration::("underline" | "overline" | "line-through"))? (align::("left" | "center" | "right"))? (rotation::integer())?) ;
Condition ::= condition::(simpletextlabel.content (structure::Term)?) ;
arc.labels ::= Îµ ;
 arc.labels ::= HLAnnotation? ;
Type ::= type::(simpletextlabel.content (structure::Sort)?) ;
page.content ::= page::(identifier.content basicobject.content page.labels netobject.content* (graphics::pagegraphics.content)?) ;
nodegraphics.content ::= position.element dimension.element? fill.element? line.element? ;
transition.labels ::= Îµ ;
 transition.labels ::= Condition? ;
basicobject.content ::= Name? toolspecific.element* ;
annotationstandard.content ::= (graphics::annotationgraphics.content)? toolspecific.element* ;
HLDeclaration ::= declaration::(simpletextlabel.content (structure::Declarations)?) ;
HLAnnotation ::= hlinscription::(simpletextlabel.content (structure::Term)?) ;
edgegraphics.content ::= position.element* line.element? ;
HLMarking ::= hlinitialMarking::(simpletextlabel.content (structure::Term)?) ;
fill.element ::= fill::((color::color.type)? (gradient-color::color.type)? (gradient-rotation::("vertical" | "horizontal" | "diagonal"))? (image::string())?) ;
node.content ::= (graphics::nodegraphics.content)? ;
net.element ::= net::(identifier.content nettype.uri Name? net.labels page.content+ toolspecific.element*) ;
simpletext.content ::= (text::string())? ;
place.labels ::= Îµ ;
 place.labels ::= Type? HLMarking? ;
annotationgraphics.content ::= offset.element fill.element? line.element? font.element? ;
line.element ::= line::((shape::("line" | "curve"))? (color::color.type)? (width::positiveDecimal.content)? (style::("solid" | "dash" | "dot"))?) ;
--------------------markup::pnml-pnmlcoremodel.bgf--------------------
font.element ::= font::((family::string())? (style::string())? (weight::string())? (size::string())? (decoration::("underline" | "overline" | "line-through"))? (align::("left" | "center" | "right"))? (rotation::integer())?) ;
arc.content ::= arc::(identifier.content source::string() target::string() Name? arc.labels (graphics::edgegraphics.content)? toolspecific.element*) ;
node.content ::= (graphics::nodegraphics.content)? ;
net.element ::= net::(identifier.content nettype.uri Name? net.labels page.content+ toolspecific.element*) ;
simpletext.content ::= (text::string())? ;
page.content ::= page::(identifier.content basicobject.content page.labels netobject.content* (graphics::pagegraphics.content)?) ;
nodegraphics.content ::= position.element dimension.element? fill.element? line.element? ;
basicobject.content ::= Name? toolspecific.element* ;
annotationstandard.content ::= (graphics::annotationgraphics.content)? toolspecific.element* ;
annotationgraphics.content ::= offset.element fill.element? line.element? font.element? ;
edgegraphics.content ::= position.element* line.element? ;
line.element ::= line::((shape::("line" | "curve"))? (color::color.type)? (width::positiveDecimal.content)? (style::("solid" | "dash" | "dot"))?) ;
fill.element ::= fill::((color::color.type)? (gradient-color::color.type)? (gradient-rotation::("vertical" | "horizontal" | "diagonal"))? (image::string())?) ;
--------------------markup::pnml-ptnet.bgf--------------------
font.element ::= font::((family::string())? (style::string())? (weight::string())? (size::string())? (decoration::("underline" | "overline" | "line-through"))? (align::("left" | "center" | "right"))? (rotation::integer())?) ;
arc.content ::= arc::(identifier.content source::string() target::string() Name? arc.labels (graphics::edgegraphics.content)? toolspecific.element*) ;
node.content ::= (graphics::nodegraphics.content)? ;
net.element ::= net::(identifier.content nettype.uri Name? net.labels page.content+ toolspecific.element*) ;
arc.labels ::= PTArcAnnotation? ;
 arc.labels ::= Îµ ;
simpletext.content ::= (text::string())? ;
page.content ::= page::(identifier.content basicobject.content page.labels netobject.content* (graphics::pagegraphics.content)?) ;
nodegraphics.content ::= position.element dimension.element? fill.element? line.element? ;
basicobject.content ::= Name? toolspecific.element* ;
annotationstandard.content ::= (graphics::annotationgraphics.content)? toolspecific.element* ;
place.labels ::= PTMarking? ;
 place.labels ::= Îµ ;
annotationgraphics.content ::= offset.element fill.element? line.element? font.element? ;
edgegraphics.content ::= position.element* line.element? ;
line.element ::= line::((shape::("line" | "curve"))? (color::color.type)? (width::positiveDecimal.content)? (style::("solid" | "dash" | "dot"))?) ;
fill.element ::= fill::((color::color.type)? (gradient-color::color.type)? (gradient-rotation::("vertical" | "horizontal" | "diagonal"))? (image::string())?) ;
--------------------markup::pnml-symmetricnet.bgf--------------------
font.element ::= font::((family::string())? (style::string())? (weight::string())? (size::string())? (decoration::("underline" | "overline" | "line-through"))? (align::("left" | "center" | "right"))? (rotation::integer())?) ;
arc.content ::= arc::(identifier.content source::string() target::string() Name? arc.labels (graphics::edgegraphics.content)? toolspecific.element*) ;
Condition ::= condition::(simpletextlabel.content (structure::Term)?) ;
arc.labels ::= HLAnnotation? ;
 arc.labels ::= Îµ ;
page.content ::= page::(identifier.content basicobject.content page.labels netobject.content* (graphics::pagegraphics.content)?) ;
Type ::= type::(simpletextlabel.content (structure::Sort)?) ;
nodegraphics.content ::= position.element dimension.element? fill.element? line.element? ;
basicobject.content ::= Name? toolspecific.element* ;
transition.labels ::= Condition? ;
 transition.labels ::= Îµ ;
annotationstandard.content ::= (graphics::annotationgraphics.content)? toolspecific.element* ;
HLDeclaration ::= declaration::(simpletextlabel.content (structure::Declarations)?) ;
edgegraphics.content ::= position.element* line.element? ;
HLAnnotation ::= hlinscription::(simpletextlabel.content (structure::Term)?) ;
fill.element ::= fill::((color::color.type)? (gradient-color::color.type)? (gradient-rotation::("vertical" | "horizontal" | "diagonal"))? (image::string())?) ;
HLMarking ::= hlinitialMarking::(simpletextlabel.content (structure::Term)?) ;
node.content ::= (graphics::nodegraphics.content)? ;
net.element ::= net::(identifier.content nettype.uri Name? net.labels page.content+ toolspecific.element*) ;
simpletext.content ::= (text::string())? ;
place.labels ::= Type? HLMarking? ;
 place.labels ::= Îµ ;
annotationgraphics.content ::= offset.element fill.element? line.element? font.element? ;
line.element ::= line::((shape::("line" | "curve"))? (color::color.type)? (width::positiveDecimal.content)? (style::("solid" | "dash" | "dot"))?) ;
--------------------markup::svg-furubayashi-basic.bgf--------------------
SVG.Font.attrib ::= Îµ ;
 SVG.Font.attrib ::= (font-family::SVG.FontFamilyValue.datatype)? (font-size::SVG.FontSizeValue.datatype)? (font-size-adjust::SVG.FontSizeAdjustValue.datatype)? (font-stretch::("normal" | "wider" | "narrower" | "ultra-condensed" | "extra-condensed" | "condensed" | "semi-condensed" | "semi-expanded" | "expanded" | "extra-expanded" | "ultra-expanded" | "inherit"))? (font-style::("normal" | "italic" | "oblique" | "inherit"))? (font-variant::("normal" | "small-caps" | "inherit"))? (font-weight::("normal" | "bold" | "bolder" | "lighter" | "100" | "200" | "300" | "400" | "500" | "600" | "700" | "800" | "900" | "inherit"))? SVG.Font.extra.attrib ;
SVG.clipPath ::= clipPath::(SVG.Description.class* (SVG.Animation.class | SVG.Use.class)* SVG.Shape.class? SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Text.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.Cursor.attrib SVG.External.attrib (transform::SVG.TransformList.datatype)? (clipPathUnits::("userSpaceOnUse" | "objectBoundingBox"))?) ;
SVG.clip.attrib ::= (clip::SVG.ClipValue.datatype)? ;
SVG.Gradient.attrib ::= Îµ ;
 SVG.Gradient.attrib ::= (stop-color::SVG.SVGColor.datatype)? (stop-opacity::SVG.OpacityValue.datatype)? SVG.Gradient.extra.attrib ;
SVG.AnimationAddtion.attrib ::= (additive::("replace" | "sum"))? (accumulate::("none" | "sum"))? SVG.AnimationAddition.extra.attrib ;
SVG.visibility.attrib ::= (visibility::("visible" | "hidden" | "inherit"))? ;
SVG.defs ::= defs::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.External.attrib (transform::SVG.TransformList.datatype)?) ;
SVG.onbegin.attrib ::= (onbegin::SVG.Script.datatype)? ;
SVG.stroke-miterlimit.attrib ::= (stroke-miterlimit::SVG.StrokeMiterLimitValue.datatype)? ;
SVG.opacity.attrib ::= (opacity::SVG.OpacityValue.datatype)? ;
SVG.TextContent.attrib ::= Îµ ;
 SVG.TextContent.attrib ::= (alignment-baseline::("baseline" | "top" | "before-edge" | "text-top" | "text-before-edge" | "middle" | "bottom" | "after-edge" | "text-bottom" | "text-after-edge" | "ideographic" | "lower" | "hanging" | "mathematical" | "inherit"))? (baseline-shift::SVG.BaselineShiftValue.datatype)? (direction::("ltr" | "rtl" | "inherit"))? (dominant-baseline::("auto" | "autosense-script" | "no-change" | "reset" | "ideographic" | "lower" | "hanging" | "mathematical" | "inherit"))? (glyph-orientation-horizontal::SVG.GlyphOrientationHorizontalValue.datatype)? (glyph-orientation-vertical::SVG.GlyphOrientationVerticalValue.datatype)? (kerning::SVG.KerningValue.datatype)? (letter-spacing::SVG.SpacingValue.datatype)? (text-anchor::("start" | "middle" | "end" | "inherit"))? (text-decoration::SVG.TextDecorationValue.datatype)? (unicode-bidi::("normal" | "embed" | "bidi-override" | "inherit"))? (word-spacing::SVG.SpacingValue.datatype)? SVG.TextContent.extra.attrib ;
SVG.animateTransform ::= animateTransform::(SVG.Description.class* SVG.Core.attrib SVG.Conditional.attrib SVG.AnimationEvents.attrib SVG.External.attrib SVG.Animation.attrib SVG.AnimationAttribute.attrib SVG.AnimationTiming.attrib SVG.AnimationValue.attrib SVG.AnimationAddtion.attrib (type::("translate" | "scale" | "rotate" | "skewX" | "skewY"))?) ;
SVG.font-face ::= font-face::(SVG.Description.class* SVG.font-face-src? SVG.definition-src? SVG.Core.attrib (font-family::string())? (font-style::string())? (font-variant::string())? (font-weight::string())? (font-stretch::string())? (font-size::string())? (unicode-range::string())? (units-per-em::SVG.Number.datatype)? (panose-1::string())? (stemv::SVG.Number.datatype)? (stemh::SVG.Number.datatype)? (slope::SVG.Number.datatype)? (cap-height::SVG.Number.datatype)? (x-height::SVG.Number.datatype)? (accent-height::SVG.Number.datatype)? (ascent::SVG.Number.datatype)? (descent::SVG.Number.datatype)? (widths::string())? (bbox::string())? (ideographic::SVG.Number.datatype)? (alphabetic::SVG.Number.datatype)? (mathematical::SVG.Number.datatype)? (hanging::SVG.Number.datatype)? (v-ideographic::SVG.Number.datatype)? (v-alphabetic::SVG.Number.datatype)? (v-mathematical::SVG.Number.datatype)? (v-hanging::SVG.Number.datatype)? (underline-position::SVG.Number.datatype)? (underline-thickness::SVG.Number.datatype)? (strikethrough-position::SVG.Number.datatype)? (strikethrough-thickness::SVG.Number.datatype)? (overline-position::SVG.Number.datatype)? (overline-thickness::SVG.Number.datatype)?) ;
SVG.onunload.attrib ::= (onunload::SVG.Script.datatype)? ;
SVG.stroke-linejoin.attrib ::= (stroke-linejoin::("miter" | "round" | "bevel" | "inherit"))? ;
SVG.altGlyph ::= altGlyph::(string() SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.XLink.attrib SVG.External.attrib (x::SVG.Coordinates.datatype)? (y::SVG.Coordinates.datatype)? (dx::SVG.Lengths.datatype)? (dy::SVG.Lengths.datatype)? (glyphRef::string())? (format::string())? (rotate::SVG.Numbers.datatype)?) ;
SVG.fill-opacity.attrib ::= (fill-opacity::SVG.OpacityValue.datatype)? ;
SVG.fill.attrib ::= (fill::SVG.Paint.datatype)? ;
SVG.onload.attrib ::= (onload::SVG.Script.datatype)? ;
SVG.externalResourcesRequired.attrib ::= (externalResourcesRequired::SVG.Boolean.datatype)? ;
SVG.color-interpolation.attrib ::= (color-interpolation::("auto" | "sRGB" | "linearRGB" | "inherit"))? ;
SVG.XLinkEmbed.attrib ::= (xlink:type::"simple")? xlink:href::SVG.URI.datatype (xlink:role::SVG.URI.datatype)? (xlink:arcrole::SVG.URI.datatype)? (xlink:title::string())? (xlink:show::"embed")? (xlink:actuate::"onLoad")? SVG.XLinkEmbed.extra.attrib ;
SVG.font-face-name ::= font-face-name::(Îµ SVG.Core.attrib (name::string())?) ;
SVG.pattern ::= pattern::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.XLink.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? (width::SVG.Length.datatype)? (height::SVG.Length.datatype)? (patternUnits::("userSpaceOnUse" | "objectBoundingBox"))? (patternContentUnits::("userSpaceOnUse" | "objectBoundingBox"))? (patternTransform::SVG.TransformList.datatype)? (viewBox::SVG.ViewBoxSpec.datatype)? (preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype)?) ;
SVG.onmouseout.attrib ::= (onmouseout::SVG.Script.datatype)? ;
SVG.stroke-linecap.attrib ::= (stroke-linecap::("butt" | "round" | "square" | "inherit"))? ;
SVG.feFuncR ::= feFuncR::((SVG.animate | SVG.set)* SVG.Core.attrib type::("identity" | "table" | "discrete" | "linear" | "gamma") (tableValues::string())? (slope::SVG.Number.datatype)? (intercept::SVG.Number.datatype)? (amplitude::SVG.Number.datatype)? (exponent::SVG.Number.datatype)? (offset::SVG.Number.datatype)?) ;
SVG.onfocusin.attrib ::= (onfocusin::SVG.Script.datatype)? ;
SVG.text-rendering.attrib ::= (text-rendering::("auto" | "optimizeSpeed" | "optimizeLegibility" | "geometricPrecision" | "inherit"))? ;
SVG.vkern ::= vkern::(Îµ SVG.Core.attrib (u1::string())? (g1::string())? (u2::string())? (g2::string())? k::SVG.Number.datatype) ;
SVG.onscroll.attrib ::= (onscroll::SVG.Script.datatype)? ;
SVG.filter ::= filter::(SVG.Description.class* (SVG.animate | SVG.set | SVG.FilterPrimitive.class)* SVG.Core.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.XLink.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? (width::SVG.Length.datatype)? (height::SVG.Length.datatype)? (filterRes::SVG.NumberOptionalNumber.datatype)? (filterUnits::("userSpaceOnUse" | "objectBoundingBox"))? (primitiveUnits::("userSpaceOnUse" | "objectBoundingBox"))?) ;
SVG.Text.attrib ::= Îµ ;
 SVG.Text.attrib ::= (writing-mode::("lr-tb" | "rl-tb" | "tb-rl" | "lr" | "rl" | "tb" | "inherit"))? SVG.Text.extra.attrib ;
SVG.display.attrib ::= (display::("inline" | "block" | "list-item" | "run-in" | "compact" | "marker" | "table" | "inline-table" | "table-row-group" | "table-header-group" | "table-footer-group" | "table-row" | "table-column-group" | "table-column" | "table-cell" | "table-caption" | "none" | "inherit"))? ;
SVG.linearGradient ::= linearGradient::(SVG.Description.class* (SVG.stop | SVG.animate | SVG.set | SVG.animateTransform)* SVG.Core.attrib SVG.Style.attrib SVG.Color.attrib SVG.Gradient.attrib SVG.XLink.attrib SVG.External.attrib (x1::SVG.Coordinate.datatype)? (y1::SVG.Coordinate.datatype)? (x2::SVG.Coordinate.datatype)? (y2::SVG.Coordinate.datatype)? (gradientUnits::("userSpaceOnUse" | "objectBoundingBox"))? (gradientTransform::SVG.TransformList.datatype)? (spreadMethod::("pad" | "reflect" | "repeat"))?) ;
SVG.feComponentTransfer ::= feComponentTransfer::(SVG.feFuncR? SVG.feFuncG? SVG.feFuncB? SVG.feFuncA? SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib) ;
SVG.line ::= line::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Marker.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib (x1::SVG.Coordinate.datatype)? (y1::SVG.Coordinate.datatype)? (x2::SVG.Coordinate.datatype)? (y2::SVG.Coordinate.datatype)? (transform::SVG.TransformList.datatype)?) ;
SVG.feComposite ::= feComposite::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib in2::string() (operator::("over" | "in" | "out" | "atop" | "xor" | "arithmetic"))? (k1::SVG.Number.datatype)? (k2::SVG.Number.datatype)? (k3::SVG.Number.datatype)? (k4::SVG.Number.datatype)?) ;
SVG.Clip.attrib ::= (clip-path::SVG.ClipPathValue.datatype)? (clip-rule::SVG.ClipFillRule.datatype)? SVG.Clip.extra.attrib ;
 SVG.Clip.attrib ::= Îµ ;
SVG.use ::= use::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.XLinkEmbed.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? (width::SVG.Length.datatype)? (height::SVG.Length.datatype)? (transform::SVG.TransformList.datatype)?) ;
SVG.base.attrib ::= (xml:base::SVG.URI.datatype)? ;
SVG.textPath ::= textPath::((string() | SVG.tspan | SVG.tref | SVG.altGlyph | SVG.animate | SVG.set | SVG.animateColor | SVG.Description.class | SVG.Hyperlink.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.XLinkRequired.attrib SVG.External.attrib (startOffset::SVG.Length.datatype)? (textLength::SVG.Length.datatype)? (lengthAdjust::("spacing" | "spacingAndGlyphs"))? (method::("align" | "stretch"))? (spacing::("auto" | "exact"))?) ;
SVG.stroke-dasharray.attrib ::= (stroke-dasharray::SVG.StrokeDashArrayValue.datatype)? ;
SVG.onzoom.attrib ::= (onzoom::SVG.Script.datatype)? ;
SVG.missing-glyph ::= missing-glyph::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Style.attrib SVG.Presentation.attrib (d::SVG.PathData.datatype)? (horiz-adv-x::SVG.Number.datatype)? (vert-origin-x::SVG.Number.datatype)? (vert-origin-y::SVG.Number.datatype)? (vert-adv-y::SVG.Number.datatype)?) ;
SVG.feFuncG ::= feFuncG::((SVG.animate | SVG.set)* SVG.Core.attrib type::("identity" | "table" | "discrete" | "linear" | "gamma") (tableValues::string())? (slope::SVG.Number.datatype)? (intercept::SVG.Number.datatype)? (amplitude::SVG.Number.datatype)? (exponent::SVG.Number.datatype)? (offset::SVG.Number.datatype)?) ;
SVG.onfocusout.attrib ::= (onfocusout::SVG.Script.datatype)? ;
SVG.radialGradient ::= radialGradient::(SVG.Description.class* (SVG.stop | SVG.animate | SVG.set | SVG.animateTransform)* SVG.Core.attrib SVG.Style.attrib SVG.Color.attrib SVG.Gradient.attrib SVG.XLink.attrib SVG.External.attrib (cx::SVG.Coordinate.datatype)? (cy::SVG.Coordinate.datatype)? (r::SVG.Length.datatype)? (fx::SVG.Coordinate.datatype)? (fy::SVG.Coordinate.datatype)? (gradientUnits::("userSpaceOnUse" | "objectBoundingBox"))? (gradientTransform::SVG.TransformList.datatype)? (spreadMethod::("pad" | "reflect" | "repeat"))?) ;
SVG.FilterColor.attrib ::= (color-interpolation-filters::("auto" | "sRGB" | "linearRGB" | "inherit"))? SVG.FilterColor.extra.attrib ;
 SVG.FilterColor.attrib ::= Îµ ;
SVG.mask ::= mask::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? (width::SVG.Length.datatype)? (height::SVG.Length.datatype)? (maskUnits::("userSpaceOnUse" | "objectBoundingBox"))? (maskContentUnits::("userSpaceOnUse" | "objectBoundingBox"))?) ;
SVG.feFlood ::= feFlood::((SVG.animate | SVG.set | SVG.animateColor)* SVG.Core.attrib SVG.Style.attrib SVG.Color.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib (flood-color::SVG.SVGColor.datatype)? (flood-opacity::SVG.OpacityValue.datatype)?) ;
SVG.feFuncB ::= feFuncB::((SVG.animate | SVG.set)* SVG.Core.attrib type::("identity" | "table" | "discrete" | "linear" | "gamma") (tableValues::string())? (slope::SVG.Number.datatype)? (intercept::SVG.Number.datatype)? (amplitude::SVG.Number.datatype)? (exponent::SVG.Number.datatype)? (offset::SVG.Number.datatype)?) ;
SVG.hkern ::= hkern::(Îµ SVG.Core.attrib (u1::string())? (g1::string())? (u2::string())? (g2::string())? k::SVG.Number.datatype) ;
SVG.Presentation.attrib ::= SVG.Container.attrib SVG.Viewport.attrib SVG.Text.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Marker.attrib SVG.Profile.attrib SVG.Gradient.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.FilterColor.attrib SVG.Cursor.attrib (flood-color::SVG.SVGColor.datatype)? (flood-opacity::SVG.OpacityValue.datatype)? (lighting-color::SVG.SVGColor.datatype)? SVG.Presentation.extra.attrib ;
SVG.feFuncA ::= feFuncA::((SVG.animate | SVG.set)* SVG.Core.attrib type::("identity" | "table" | "discrete" | "linear" | "gamma") (tableValues::string())? (slope::SVG.Number.datatype)? (intercept::SVG.Number.datatype)? (amplitude::SVG.Number.datatype)? (exponent::SVG.Number.datatype)? (offset::SVG.Number.datatype)?) ;
SVG.onrepeat.attrib ::= (onrepeat::SVG.Script.datatype)? ;
SVG.AnimationTiming.attrib ::= (begin::string())? (dur::string())? (end::string())? (min::string())? (max::string())? (restart::("always" | "never" | "whenNotActive"))? (repeatCount::string())? (repeatDur::string())? (fill::("remove" | "freeze"))? SVG.AnimationTiming.extra.attrib ;
SVG.font-face-format ::= font-face-format::(Îµ SVG.Core.attrib (string::string())?) ;
SVG.id.attrib ::= (id::SVG.ID.datatype)? ;
SVG.FilterPrimitive.attrib ::= (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? (width::SVG.Length.datatype)? (height::SVG.Length.datatype)? (result::string())? SVG.FilterPrimitive.extra.attrib ;
SVG.rect ::= rect::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? width::SVG.Length.datatype height::SVG.Length.datatype (rx::SVG.Length.datatype)? (ry::SVG.Length.datatype)? (transform::SVG.TransformList.datatype)?) ;
SVG.animateMotion ::= animateMotion::(SVG.Description.class* SVG.mpath? SVG.Core.attrib SVG.Conditional.attrib SVG.AnimationEvents.attrib SVG.External.attrib SVG.Animation.attrib SVG.AnimationTiming.attrib SVG.AnimationAddtion.attrib (calcMode::("discrete" | "linear" | "paced" | "spline"))? (values::string())? (keyTimes::string())? (Splines::string())? (from::string())? (to::string())? (by::string())? (path::string())? (keyPoints::string())? (rotate::string())? (origin::string())?) ;
SVG.feGaussianBlur ::= feGaussianBlur::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib (stdDeviation::SVG.NumberOptionalNumber.datatype)?) ;
SVG.stroke-dashoffset.attrib ::= (stroke-dashoffset::SVG.StrokeDashOffsetValue.datatype)? ;
SVG.onend.attrib ::= (onend::SVG.Script.datatype)? ;
SVG.Mask.attrib ::= Îµ ;
 SVG.Mask.attrib ::= (mask::SVG.MaskValue.datatype)? SVG.Mask.extra.attrib ;
SVG.AnimationValue.attrib ::= (calcMode::("discrete" | "linear" | "paced" | "spline"))? (values::string())? (keyTimes::string())? (keySplines::string())? (from::string())? (to::string())? (by::string())? SVG.AnimationValue.extra.attrib ;
SVG.g ::= g::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.External.attrib (transform::SVG.TransformList.datatype)?) ;
SVG.stroke-width.attrib ::= (stroke-width::SVG.StrokeWidthValue.datatype)? ;
SVG.onactivate.attrib ::= (onactivate::SVG.Script.datatype)? ;
SVG.Conditional.attrib ::= (requiredFeatures::SVG.FeatureList.datatype)? (requiredExtensions::SVG.ExtensionList.datatype)? (systemLanguage::SVG.LanguageCodes.datatype)? SVG.Conditional.extra.attrib ;
 SVG.Conditional.attrib ::= Îµ ;
SVG.svg ::= svg::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.DocumentEvents.attrib SVG.GraphicalEvents.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? (width::SVG.Length.datatype)? (height::SVG.Length.datatype)? (viewBox::SVG.ViewBoxSpec.datatype)? (preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype)? (zoomAndPan::("disable" | "magnify"))? version::SVG.Number.datatype (baseProfile::SVG.Text.datatype)? (contentScriptType::SVG.ContentType.datatype)? (contentStyleType::SVG.ContentType.datatype)?) ;
SVG.circle ::= circle::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib (cx::SVG.Coordinate.datatype)? (cy::SVG.Coordinate.datatype)? r::SVG.Length.datatype (transform::SVG.TransformList.datatype)?) ;
SVG.onclick.attrib ::= (onclick::SVG.Script.datatype)? ;
SVG.font ::= font::(SVG.Description.class* SVG.font-face SVG.missing-glyph (SVG.glyph | SVG.hkern | SVG.vkern)* SVG.Core.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.External.attrib (horiz-origin-x::SVG.Number.datatype)? (horiz-origin-y::SVG.Number.datatype)? horiz-adv-x::SVG.Number.datatype (vert-origin-x::SVG.Number.datatype)? (vert-origin-y::SVG.Number.datatype)? (vert-adv-y::SVG.Number.datatype)?) ;
SVG.onerror.attrib ::= (onerror::SVG.Script.datatype)? ;
SVG.Profile.attrib ::= Îµ ;
 SVG.Profile.attrib ::= (color-profile::string())? SVG.Profile.extra.attrib ;
SVG.set ::= set::(SVG.Description.class* SVG.Core.attrib SVG.Conditional.attrib SVG.AnimationEvents.attrib SVG.External.attrib SVG.Animation.attrib SVG.AnimationAttribute.attrib SVG.AnimationTiming.attrib (to::string())?) ;
SVG.a ::= a::((string() | SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.XLinkReplace.attrib SVG.External.attrib (transform::SVG.TransformList.datatype)? (target::SVG.LinkTarget.datatype)?) ;
SVG.Filter.attrib ::= (filter::SVG.FilterValue.datatype)? SVG.Filter.extra.attrib ;
 SVG.Filter.attrib ::= Îµ ;
SVG.AnimationAttribute.attrib ::= attributeName::string() (attributeType::string())? SVG.AnimationAttribute.extra.attrib ;
SVG.ellipse ::= ellipse::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib (cx::SVG.Coordinate.datatype)? (cy::SVG.Coordinate.datatype)? rx::SVG.Length.datatype ry::SVG.Length.datatype (transform::SVG.TransformList.datatype)?) ;
SVG.feImage ::= feImage::((SVG.animate | SVG.set | SVG.animateTransform)* SVG.Core.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.FilterPrimitive.attrib SVG.XLinkEmbed.attrib SVG.External.attrib (preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype)?) ;
SVG.glyphRef ::= glyphRef::(Îµ SVG.Core.attrib SVG.Style.attrib SVG.Font.attrib SVG.XLink.attrib (x::SVG.Coordinates.datatype)? (y::SVG.Coordinates.datatype)? (dx::SVG.Lengths.datatype)? (dy::SVG.Lengths.datatype)? (glyphRef::string())? (format::string())?) ;
SVG.image ::= image::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Viewport.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Profile.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.XLinkEmbed.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? width::SVG.Length.datatype height::SVG.Length.datatype (preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype)? (transform::SVG.TransformList.datatype)?) ;
SVG.Style.attrib ::= Îµ ;
 SVG.Style.attrib ::= (style::SVG.StyleSheet.datatype)? (class::SVG.ClassList.datatype)? SVG.Style.extra.attrib ;
SVG.feMergeNode ::= feMergeNode::((SVG.animate | SVG.set)* SVG.Core.attrib (in::string())?) ;
SVG.XLink.attrib ::= Îµ ;
 SVG.XLink.attrib ::= (xlink:type::"simple")? (xlink:href::SVG.URI.datatype)? (xlink:role::SVG.URI.datatype)? (xlink:arcrole::SVG.URI.datatype)? (xlink:title::string())? (xlink:show::"other")? (xlink:actuate::"onLoad")? SVG.XLink.extra.attrib ;
SVG.XLinkReplace.attrib ::= (xlink:type::"simple")? xlink:href::SVG.URI.datatype (xlink:role::SVG.URI.datatype)? (xlink:arcrole::SVG.URI.datatype)? (xlink:title::string())? (xlink:show::("new" | "replace"))? (xlink:actuate::"onRequest")? SVG.XLinkReplace.extra.attrib ;
SVG.polyline ::= polyline::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Marker.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib points::SVG.Points.datatype (transform::SVG.TransformList.datatype)?) ;
SVG.onmouseover.attrib ::= (onmouseover::SVG.Script.datatype)? ;
SVG.feBlend ::= feBlend::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib in2::string() (mode::("normal" | "multiply" | "screen" | "darken" | "lighten"))?) ;
SVG.lang.attrib ::= (xml:lang::SVG.LanguageCode.datatype)? ;
SVG.color.attrib ::= (color::SVG.Color.datatype)? ;
SVG.switch ::= switch::(SVG.Description.class* (SVG.svg | SVG.g | SVG.use | SVG.text | SVG.text | SVG.Animation.class | SVG.Conditional.class | SVG.Image.class | SVG.Shape.class | SVG.Hyperlink.class | SVG.Extensibility.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.External.attrib (transform::SVG.TransformList.datatype)?) ;
SVG.fill-rule.attrib ::= (fill-rule::SVG.ClipFillRule.datatype)? ;
SVG.space.attrib ::= (xml:space::("default" | "preserve"))? ;
SVG.feOffset ::= feOffset::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib (dx::SVG.Number.datatype)? (dy::SVG.Number.datatype)?) ;
SVG.onresize.attrib ::= (onresize::SVG.Script.datatype)? ;
SVG.feColorMatrix ::= feColorMatrix::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib (type::("matrix" | "saturate" | "hueRotate" | "luminanceToAlpha"))? (values::string())?) ;
SVG.onmousedown.attrib ::= (onmousedown::SVG.Script.datatype)? ;
SVG.stroke-opacity.attrib ::= (stroke-opacity::SVG.OpacityValue.datatype)? ;
SVG.text ::= text::((string() | SVG.Description.class | SVG.Animation.class | SVG.TextContent.class | SVG.Hyperlink.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Text.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib (x::SVG.Coordinates.datatype)? (y::SVG.Coordinates.datatype)? (dx::SVG.Lengths.datatype)? (dy::SVG.Lengths.datatype)? (rotate::SVG.Numbers.datatype)? (textLength::SVG.Length.datatype)? (lengthAdjust::("spacing" | "spacingAndGlyphs"))? (transform::SVG.TransformList.datatype)?) ;
SVG.stroke.attrib ::= (stroke::SVG.Paint.datatype)? ;
SVG.color-profile ::= color-profile::(SVG.Description.class* SVG.Core.attrib SVG.XLink.attrib (local::string())? name::string() (rendering-intent::("auto" | "perceptual" | "relative-colorimetric" | "saturation" | "absolute-colorimetric"))?) ;
SVG.tspan ::= tspan::((string() | SVG.tspan | SVG.tref | SVG.altGlyph | SVG.animate | SVG.set | SVG.animateColor | SVG.Description.class | SVG.Hyperlink.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib (x::SVG.Coordinates.datatype)? (y::SVG.Coordinates.datatype)? (dx::SVG.Lengths.datatype)? (dy::SVG.Lengths.datatype)? (rotate::SVG.Numbers.datatype)? (textLength::SVG.Length.datatype)? (lengthAdjust::("spacing" | "spacingAndGlyphs"))?) ;
SVG.XLinkRequired.attrib ::= (xlink:type::"simple")? xlink:href::SVG.URI.datatype (xlink:role::SVG.URI.datatype)? (xlink:arcrole::SVG.URI.datatype)? (xlink:title::string())? (xlink:show::"other")? (xlink:actuate::"onLoad")? SVG.XLinkRequired.extra.attrib ;
SVG.onabort.attrib ::= (onabort::SVG.Script.datatype)? ;
SVG.polygon ::= polygon::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Marker.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib points::SVG.Points.datatype (transform::SVG.TransformList.datatype)?) ;
SVG.view ::= view::(SVG.Description.class* SVG.Core.attrib SVG.External.attrib (viewBox::SVG.ViewBoxSpec.datatype)? (preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype)? (zoomAndPan::("disable" | "magnify"))? (viewTarget::string())?) ;
SVG.path ::= path::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Marker.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib d::SVG.PathData.datatype (pathLength::SVG.Number.datatype)? (transform::SVG.TransformList.datatype)?) ;
SVG.overflow.attrib ::= (overflow::("visible" | "hidden" | "scroll" | "auto" | "inherit"))? ;
SVG.onmousemove.attrib ::= (onmousemove::SVG.Script.datatype)? ;
SVG.tref ::= tref::((SVG.animate | SVG.set | SVG.animateColor | SVG.Description.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.XLinkRequired.attrib SVG.External.attrib (x::SVG.Coordinates.datatype)? (y::SVG.Coordinates.datatype)? (dx::SVG.Lengths.datatype)? (dy::SVG.Lengths.datatype)? (rotate::SVG.Numbers.datatype)? (textLength::SVG.Length.datatype)? (lengthAdjust::("spacing" | "spacingAndGlyphs"))?) ;
SVG.foreignObject ::= foreignObject::(SVG.foreignObject.content SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? width::SVG.Length.datatype height::SVG.Length.datatype (transform::SVG.TransformList.datatype)?) ;
SVG.image-rendering.attrib ::= (image-rendering::("auto" | "optimizeSpeed" | "optimizeQuality" | "inherit"))? ;
SVG.FilterPrimitiveWithIn.attrib ::= SVG.FilterPrimitive.attrib (in::string())? SVG.FilterPrimitiveWithIn.extra.attrib ;
SVG.style ::= style::(string() SVG.Core.attrib type::SVG.ContentType.datatype (media::SVG.MediaDesc.datatype)? (title::SVG.Text.datatype)?) ;
SVG.pointer-events.attrib ::= (pointer-events::("visiblePainted" | "visibleFill" | "visibleStroke" | "visible" | "painted" | "fill" | "stroke" | "all" | "none" | "inherit"))? ;
SVG.symbol ::= symbol::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.External.attrib (viewBox::SVG.ViewBoxSpec.datatype)? (preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype)?) ;
SVG.shape-rendering.attrib ::= (shape-rendering::("auto" | "optimizeSpeed" | "crispEdges" | "geometricPrecision" | "inherit"))? ;
SVG.glyph ::= glyph::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Style.attrib SVG.Presentation.attrib (unicode::string())? (glyph-name::string())? (d::SVG.PathData.datatype)? (orientation::string())? (arabic-form::string())? (lang::SVG.LanguageCodes.datatype)? (horiz-adv-x::SVG.Number.datatype)? (vert-origin-x::SVG.Number.datatype)? (vert-origin-y::SVG.Number.datatype)? (vert-adv-y::SVG.Number.datatype)?) ;
SVG.onmouseup.attrib ::= (onmouseup::SVG.Script.datatype)? ;
SVG.color-rendering.attrib ::= (color-rendering::("auto" | "optimizeSpeed" | "optimizeQuality" | "inherit"))? ;
--------------------markup::svg-furubayashi-tiny.bgf--------------------
SVG.Font.attrib ::= (font-family::SVG.FontFamilyValue.datatype)? (font-size::SVG.FontSizeValue.datatype)? (font-style::("normal" | "italic" | "oblique" | "inherit"))? (font-weight::("normal" | "bold" | "bolder" | "lighter" | "100" | "200" | "300" | "400" | "500" | "600" | "700" | "800" | "900" | "inherit"))? SVG.Font.extra.attrib ;
 SVG.Font.attrib ::= Îµ ;
SVG.g ::= g::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.External.attrib (transform::SVG.TransformList.datatype)?) ;
SVG.stroke-width.attrib ::= (stroke-width::SVG.StrokeWidthValue.datatype)? ;
SVG.AnimationAddtion.attrib ::= (additive::("replace" | "sum"))? (accumulate::("none" | "sum"))? SVG.AnimationAddition.extra.attrib ;
SVG.Conditional.attrib ::= (requiredFeatures::SVG.FeatureList.datatype)? (requiredExtensions::SVG.ExtensionList.datatype)? (systemLanguage::SVG.LanguageCodes.datatype)? SVG.Conditional.extra.attrib ;
 SVG.Conditional.attrib ::= Îµ ;
SVG.visibility.attrib ::= (visibility::("visible" | "hidden" | "inherit"))? ;
SVG.circle ::= circle::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib (cx::SVG.Coordinate.datatype)? (cy::SVG.Coordinate.datatype)? r::SVG.Length.datatype (transform::SVG.TransformList.datatype)?) ;
SVG.svg ::= svg::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.DocumentEvents.attrib SVG.GraphicalEvents.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? (width::SVG.Length.datatype)? (height::SVG.Length.datatype)? (viewBox::SVG.ViewBoxSpec.datatype)? (preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype)? (zoomAndPan::("disable" | "magnify"))? version::SVG.Number.datatype (baseProfile::SVG.Text.datatype)?) ;
SVG.font ::= font::(SVG.Description.class* SVG.font-face SVG.missing-glyph (SVG.glyph | SVG.hkern)* SVG.Core.attrib SVG.Style.attrib SVG.External.attrib (horiz-origin-x::SVG.Number.datatype)? horiz-adv-x::SVG.Number.datatype) ;
SVG.defs ::= defs::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.External.attrib (transform::SVG.TransformList.datatype)?) ;
SVG.set ::= set::(SVG.Description.class* SVG.Core.attrib SVG.Conditional.attrib SVG.AnimationEvents.attrib SVG.External.attrib SVG.Animation.attrib SVG.AnimationAttribute.attrib SVG.AnimationTiming.attrib (to::string())?) ;
SVG.a ::= a::((string() | SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.XLinkReplace.attrib SVG.External.attrib (transform::SVG.TransformList.datatype)? (target::SVG.LinkTarget.datatype)?) ;
SVG.stroke-miterlimit.attrib ::= (stroke-miterlimit::SVG.StrokeMiterLimitValue.datatype)? ;
SVG.TextContent.attrib ::= (text-anchor::("start" | "middle" | "end" | "inherit"))? SVG.TextContent.extra.attrib ;
 SVG.TextContent.attrib ::= Îµ ;
SVG.AnimationAttribute.attrib ::= attributeName::string() (attributeType::string())? SVG.AnimationAttribute.extra.attrib ;
SVG.animateTransform ::= animateTransform::(SVG.Description.class* SVG.Core.attrib SVG.Conditional.attrib SVG.AnimationEvents.attrib SVG.External.attrib SVG.Animation.attrib SVG.AnimationAttribute.attrib SVG.AnimationTiming.attrib SVG.AnimationValue.attrib SVG.AnimationAddtion.attrib (type::("translate" | "scale" | "rotate" | "skewX" | "skewY"))?) ;
SVG.ellipse ::= ellipse::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib (cx::SVG.Coordinate.datatype)? (cy::SVG.Coordinate.datatype)? rx::SVG.Length.datatype ry::SVG.Length.datatype (transform::SVG.TransformList.datatype)?) ;
SVG.image ::= image::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Viewport.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Profile.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.XLinkEmbed.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? width::SVG.Length.datatype height::SVG.Length.datatype (preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype)? (transform::SVG.TransformList.datatype)?) ;
SVG.Style.attrib ::= Îµ ;
 SVG.Style.attrib ::= (style::SVG.StyleSheet.datatype)? (class::SVG.ClassList.datatype)? SVG.Style.extra.attrib ;
SVG.font-face ::= font-face::(SVG.Description.class* SVG.font-face-src? SVG.Core.attrib (font-family::string())? (font-style::string())? (font-variant::string())? (font-weight::string())? (font-stretch::string())? (font-size::string())? (unicode-range::string())? (units-per-em::SVG.Number.datatype)? (panose-1::string())? (stemv::SVG.Number.datatype)? (stemh::SVG.Number.datatype)? (slope::SVG.Number.datatype)? (cap-height::SVG.Number.datatype)? (x-height::SVG.Number.datatype)? (accent-height::SVG.Number.datatype)? (ascent::SVG.Number.datatype)? (descent::SVG.Number.datatype)? (widths::string())? (bbox::string())? (ideographic::SVG.Number.datatype)? (alphabetic::SVG.Number.datatype)? (mathematical::SVG.Number.datatype)? (hanging::SVG.Number.datatype)? (underline-position::SVG.Number.datatype)? (underline-thickness::SVG.Number.datatype)? (strikethrough-position::SVG.Number.datatype)? (strikethrough-thickness::SVG.Number.datatype)? (overline-position::SVG.Number.datatype)? (overline-thickness::SVG.Number.datatype)?) ;
SVG.XLink.attrib ::= Îµ ;
 SVG.XLink.attrib ::= (xlink:type::"simple")? (xlink:href::SVG.URI.datatype)? (xlink:role::SVG.URI.datatype)? (xlink:arcrole::SVG.URI.datatype)? (xlink:title::string())? (xlink:show::"other")? (xlink:actuate::"onLoad")? SVG.XLink.extra.attrib ;
SVG.stroke-linejoin.attrib ::= (stroke-linejoin::("miter" | "round" | "bevel" | "inherit"))? ;
SVG.XLinkReplace.attrib ::= (xlink:type::"simple")? xlink:href::SVG.URI.datatype (xlink:role::SVG.URI.datatype)? (xlink:arcrole::SVG.URI.datatype)? (xlink:title::string())? (xlink:show::("new" | "replace"))? (xlink:actuate::"onRequest")? SVG.XLinkReplace.extra.attrib ;
SVG.fill.attrib ::= (fill::SVG.Paint.datatype)? ;
SVG.polyline ::= polyline::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Marker.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib points::SVG.Points.datatype (transform::SVG.TransformList.datatype)?) ;
SVG.externalResourcesRequired.attrib ::= (externalResourcesRequired::SVG.Boolean.datatype)? ;
SVG.XLinkEmbed.attrib ::= (xlink:type::"simple")? xlink:href::SVG.URI.datatype (xlink:role::SVG.URI.datatype)? (xlink:arcrole::SVG.URI.datatype)? (xlink:title::string())? (xlink:show::"embed")? (xlink:actuate::"onLoad")? SVG.XLinkEmbed.extra.attrib ;
SVG.font-face-name ::= font-face-name::(Îµ SVG.Core.attrib (name::string())?) ;
SVG.stroke-linecap.attrib ::= (stroke-linecap::("butt" | "round" | "square" | "inherit"))? ;
SVG.lang.attrib ::= (xml:lang::SVG.LanguageCode.datatype)? ;
SVG.display.attrib ::= (display::("inline" | "block" | "list-item" | "run-in" | "compact" | "marker" | "table" | "inline-table" | "table-row-group" | "table-header-group" | "table-footer-group" | "table-row" | "table-column-group" | "table-column" | "table-cell" | "table-caption" | "none" | "inherit"))? ;
SVG.color.attrib ::= (color::SVG.Color.datatype)? ;
SVG.line ::= line::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Marker.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib (x1::SVG.Coordinate.datatype)? (y1::SVG.Coordinate.datatype)? (x2::SVG.Coordinate.datatype)? (y2::SVG.Coordinate.datatype)? (transform::SVG.TransformList.datatype)?) ;
SVG.switch ::= switch::(SVG.Description.class* (SVG.svg | SVG.g | SVG.use | SVG.text | SVG.text | SVG.Animation.class | SVG.Conditional.class | SVG.Image.class | SVG.Shape.class | SVG.Hyperlink.class | SVG.Extensibility.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.External.attrib (transform::SVG.TransformList.datatype)?) ;
SVG.base.attrib ::= (xml:base::SVG.URI.datatype)? ;
SVG.use ::= use::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.XLinkEmbed.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? (width::SVG.Length.datatype)? (height::SVG.Length.datatype)? (transform::SVG.TransformList.datatype)?) ;
SVG.space.attrib ::= (xml:space::("default" | "preserve"))? ;
SVG.fill-rule.attrib ::= (fill-rule::SVG.ClipFillRule.datatype)? ;
SVG.stroke-dasharray.attrib ::= (stroke-dasharray::SVG.StrokeDashArrayValue.datatype)? ;
SVG.missing-glyph ::= missing-glyph::(SVG.Description.class* SVG.Core.attrib SVG.Style.attrib (d::SVG.PathData.datatype)? (horiz-adv-x::SVG.Number.datatype)?) ;
SVG.text ::= text::((string() | SVG.Description.class | SVG.Animation.class | SVG.Hyperlink.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib (x::SVG.Coordinates.datatype)? (y::SVG.Coordinates.datatype)? (rotate::SVG.Numbers.datatype)? (transform::SVG.TransformList.datatype)?) ;
SVG.stroke.attrib ::= (stroke::SVG.Paint.datatype)? ;
SVG.Presentation.attrib ::= SVG.Container.attrib SVG.Viewport.attrib SVG.Text.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Marker.attrib SVG.Profile.attrib SVG.Gradient.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.FilterColor.attrib SVG.Cursor.attrib (flood-color::SVG.SVGColor.datatype)? (flood-opacity::SVG.OpacityValue.datatype)? (lighting-color::SVG.SVGColor.datatype)? SVG.Presentation.extra.attrib ;
SVG.hkern ::= hkern::(Îµ SVG.Core.attrib (u1::string())? (g1::string())? (u2::string())? (g2::string())? k::SVG.Number.datatype) ;
SVG.AnimationTiming.attrib ::= (begin::string())? (dur::string())? (end::string())? (min::string())? (max::string())? (restart::("always" | "never" | "whenNotActive"))? (repeatCount::string())? (repeatDur::string())? (fill::("remove" | "freeze"))? SVG.AnimationTiming.extra.attrib ;
SVG.id.attrib ::= (id::SVG.ID.datatype)? ;
SVG.XLinkRequired.attrib ::= (xlink:type::"simple")? xlink:href::SVG.URI.datatype (xlink:role::SVG.URI.datatype)? (xlink:arcrole::SVG.URI.datatype)? (xlink:title::string())? (xlink:show::"other")? (xlink:actuate::"onLoad")? SVG.XLinkRequired.extra.attrib ;
SVG.polygon ::= polygon::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Marker.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib points::SVG.Points.datatype (transform::SVG.TransformList.datatype)?) ;
SVG.view ::= view::(SVG.Description.class* SVG.Core.attrib SVG.External.attrib (viewBox::SVG.ViewBoxSpec.datatype)? (preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype)? (zoomAndPan::("disable" | "magnify"))? (viewTarget::string())?) ;
SVG.path ::= path::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Marker.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib d::SVG.PathData.datatype (pathLength::SVG.Number.datatype)? (transform::SVG.TransformList.datatype)?) ;
SVG.rect ::= rect::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? width::SVG.Length.datatype height::SVG.Length.datatype (rx::SVG.Length.datatype)? (ry::SVG.Length.datatype)? (transform::SVG.TransformList.datatype)?) ;
SVG.animateMotion ::= animateMotion::(SVG.Description.class* SVG.mpath? SVG.Core.attrib SVG.Conditional.attrib SVG.AnimationEvents.attrib SVG.External.attrib SVG.Animation.attrib SVG.AnimationTiming.attrib SVG.AnimationAddtion.attrib (calcMode::("discrete" | "linear" | "paced" | "spline"))? (values::string())? (keyTimes::string())? (Splines::string())? (from::string())? (to::string())? (by::string())? (path::string())? (keyPoints::string())? (rotate::string())? (origin::string())?) ;
SVG.foreignObject ::= foreignObject::(SVG.foreignObject.content SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? width::SVG.Length.datatype height::SVG.Length.datatype (transform::SVG.TransformList.datatype)?) ;
SVG.stroke-dashoffset.attrib ::= (stroke-dashoffset::SVG.StrokeDashOffsetValue.datatype)? ;
SVG.style ::= style::(string() SVG.Core.attrib type::SVG.ContentType.datatype (media::SVG.MediaDesc.datatype)? (title::SVG.Text.datatype)?) ;
SVG.glyph ::= glyph::(SVG.Description.class* SVG.Core.attrib SVG.Style.attrib (unicode::string())? (glyph-name::string())? (d::SVG.PathData.datatype)? (arabic-form::string())? (lang::SVG.LanguageCodes.datatype)? (horiz-adv-x::SVG.Number.datatype)?) ;
SVG.AnimationValue.attrib ::= (calcMode::("discrete" | "linear" | "paced" | "spline"))? (values::string())? (keyTimes::string())? (keySplines::string())? (from::string())? (to::string())? (by::string())? SVG.AnimationValue.extra.attrib ;
SVG.color-rendering.attrib ::= (color-rendering::("auto" | "optimizeSpeed" | "optimizeQuality" | "inherit"))? ;
--------------------markup::svg-furubayashi.bgf--------------------
SVG.clipPath ::= clipPath::(SVG.Description.class* (SVG.Animation.class | SVG.Use.class | SVG.Shape.class | SVG.Text.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Text.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.Cursor.attrib SVG.External.attrib (transform::SVG.TransformList.datatype)? (clipPathUnits::("userSpaceOnUse" | "objectBoundingBox"))?) ;
SVG.visibility.attrib ::= (visibility::("visible" | "hidden" | "inherit"))? ;
SVG.onbegin.attrib ::= (onbegin::SVG.Script.datatype)? ;
SVG.stroke-miterlimit.attrib ::= (stroke-miterlimit::SVG.StrokeMiterLimitValue.datatype)? ;
SVG.opacity.attrib ::= (opacity::SVG.OpacityValue.datatype)? ;
SVG.animateTransform ::= animateTransform::(SVG.Description.class* SVG.Core.attrib SVG.Conditional.attrib SVG.AnimationEvents.attrib SVG.External.attrib SVG.Animation.attrib SVG.AnimationAttribute.attrib SVG.AnimationTiming.attrib SVG.AnimationValue.attrib SVG.AnimationAddtion.attrib (type::("translate" | "scale" | "rotate" | "skewX" | "skewY"))?) ;
SVG.font-face ::= font-face::(SVG.Description.class* SVG.font-face-src? SVG.definition-src? SVG.Core.attrib (font-family::string())? (font-style::string())? (font-variant::string())? (font-weight::string())? (font-stretch::string())? (font-size::string())? (unicode-range::string())? (units-per-em::SVG.Number.datatype)? (panose-1::string())? (stemv::SVG.Number.datatype)? (stemh::SVG.Number.datatype)? (slope::SVG.Number.datatype)? (cap-height::SVG.Number.datatype)? (x-height::SVG.Number.datatype)? (accent-height::SVG.Number.datatype)? (ascent::SVG.Number.datatype)? (descent::SVG.Number.datatype)? (widths::string())? (bbox::string())? (ideographic::SVG.Number.datatype)? (alphabetic::SVG.Number.datatype)? (mathematical::SVG.Number.datatype)? (hanging::SVG.Number.datatype)? (v-ideographic::SVG.Number.datatype)? (v-alphabetic::SVG.Number.datatype)? (v-mathematical::SVG.Number.datatype)? (v-hanging::SVG.Number.datatype)? (underline-position::SVG.Number.datatype)? (underline-thickness::SVG.Number.datatype)? (strikethrough-position::SVG.Number.datatype)? (strikethrough-thickness::SVG.Number.datatype)? (overline-position::SVG.Number.datatype)? (overline-thickness::SVG.Number.datatype)?) ;
SVG.stroke-linejoin.attrib ::= (stroke-linejoin::("miter" | "round" | "bevel" | "inherit"))? ;
SVG.fePointLight ::= fePointLight::((SVG.animate | SVG.set)* SVG.Core.attrib (x::SVG.Number.datatype)? (y::SVG.Number.datatype)? (z::SVG.Number.datatype)?) ;
SVG.fill-opacity.attrib ::= (fill-opacity::SVG.OpacityValue.datatype)? ;
SVG.fill.attrib ::= (fill::SVG.Paint.datatype)? ;
SVG.XLinkEmbed.attrib ::= (xlink:type::"simple")? xlink:href::SVG.URI.datatype (xlink:role::SVG.URI.datatype)? (xlink:arcrole::SVG.URI.datatype)? (xlink:title::string())? (xlink:show::"embed")? (xlink:actuate::"onLoad")? SVG.XLinkEmbed.extra.attrib ;
SVG.font-face-name ::= font-face-name::(Îµ SVG.Core.attrib (name::string())?) ;
SVG.pattern ::= pattern::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.XLink.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? (width::SVG.Length.datatype)? (height::SVG.Length.datatype)? (patternUnits::("userSpaceOnUse" | "objectBoundingBox"))? (patternContentUnits::("userSpaceOnUse" | "objectBoundingBox"))? (patternTransform::SVG.TransformList.datatype)? (viewBox::SVG.ViewBoxSpec.datatype)? (preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype)?) ;
SVG.onmouseout.attrib ::= (onmouseout::SVG.Script.datatype)? ;
SVG.feFuncR ::= feFuncR::((SVG.animate | SVG.set)* SVG.Core.attrib type::("identity" | "table" | "discrete" | "linear" | "gamma") (tableValues::string())? (slope::SVG.Number.datatype)? (intercept::SVG.Number.datatype)? (amplitude::SVG.Number.datatype)? (exponent::SVG.Number.datatype)? (offset::SVG.Number.datatype)?) ;
SVG.onfocusin.attrib ::= (onfocusin::SVG.Script.datatype)? ;
SVG.text-rendering.attrib ::= (text-rendering::("auto" | "optimizeSpeed" | "optimizeLegibility" | "geometricPrecision" | "inherit"))? ;
SVG.onscroll.attrib ::= (onscroll::SVG.Script.datatype)? ;
SVG.Text.attrib ::= Îµ ;
 SVG.Text.attrib ::= (writing-mode::("lr-tb" | "rl-tb" | "tb-rl" | "lr" | "rl" | "tb" | "inherit"))? SVG.Text.extra.attrib ;
SVG.feComposite ::= feComposite::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib in2::string() (operator::("over" | "in" | "out" | "atop" | "xor" | "arithmetic"))? (k1::SVG.Number.datatype)? (k2::SVG.Number.datatype)? (k3::SVG.Number.datatype)? (k4::SVG.Number.datatype)?) ;
SVG.use ::= use::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.XLinkEmbed.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? (width::SVG.Length.datatype)? (height::SVG.Length.datatype)? (transform::SVG.TransformList.datatype)?) ;
SVG.base.attrib ::= (xml:base::SVG.URI.datatype)? ;
SVG.stroke-dasharray.attrib ::= (stroke-dasharray::SVG.StrokeDashArrayValue.datatype)? ;
SVG.onzoom.attrib ::= (onzoom::SVG.Script.datatype)? ;
SVG.feDisplacementMap ::= feDisplacementMap::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib in2::string() (scale::SVG.Number.datatype)? (xChannelSelector::("R" | "G" | "B" | "A"))? (yChannelSelector::("R" | "G" | "B" | "A"))?) ;
SVG.missing-glyph ::= missing-glyph::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Style.attrib SVG.Presentation.attrib (d::SVG.PathData.datatype)? (horiz-adv-x::SVG.Number.datatype)? (vert-origin-x::SVG.Number.datatype)? (vert-origin-y::SVG.Number.datatype)? (vert-adv-y::SVG.Number.datatype)?) ;
SVG.feFuncG ::= feFuncG::((SVG.animate | SVG.set)* SVG.Core.attrib type::("identity" | "table" | "discrete" | "linear" | "gamma") (tableValues::string())? (slope::SVG.Number.datatype)? (intercept::SVG.Number.datatype)? (amplitude::SVG.Number.datatype)? (exponent::SVG.Number.datatype)? (offset::SVG.Number.datatype)?) ;
SVG.feFuncB ::= feFuncB::((SVG.animate | SVG.set)* SVG.Core.attrib type::("identity" | "table" | "discrete" | "linear" | "gamma") (tableValues::string())? (slope::SVG.Number.datatype)? (intercept::SVG.Number.datatype)? (amplitude::SVG.Number.datatype)? (exponent::SVG.Number.datatype)? (offset::SVG.Number.datatype)?) ;
SVG.feFlood ::= feFlood::((SVG.animate | SVG.set | SVG.animateColor)* SVG.Core.attrib SVG.Style.attrib SVG.Color.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib (flood-color::SVG.SVGColor.datatype)? (flood-opacity::SVG.OpacityValue.datatype)?) ;
SVG.feFuncA ::= feFuncA::((SVG.animate | SVG.set)* SVG.Core.attrib type::("identity" | "table" | "discrete" | "linear" | "gamma") (tableValues::string())? (slope::SVG.Number.datatype)? (intercept::SVG.Number.datatype)? (amplitude::SVG.Number.datatype)? (exponent::SVG.Number.datatype)? (offset::SVG.Number.datatype)?) ;
SVG.AnimationTiming.attrib ::= (begin::string())? (dur::string())? (end::string())? (min::string())? (max::string())? (restart::("always" | "never" | "whenNotActive"))? (repeatCount::string())? (repeatDur::string())? (fill::("remove" | "freeze"))? SVG.AnimationTiming.extra.attrib ;
SVG.id.attrib ::= (id::SVG.ID.datatype)? ;
SVG.animateMotion ::= animateMotion::(SVG.Description.class* SVG.mpath? SVG.Core.attrib SVG.Conditional.attrib SVG.AnimationEvents.attrib SVG.External.attrib SVG.Animation.attrib SVG.AnimationTiming.attrib SVG.AnimationAddtion.attrib (calcMode::("discrete" | "linear" | "paced" | "spline"))? (values::string())? (keyTimes::string())? (Splines::string())? (from::string())? (to::string())? (by::string())? (path::string())? (keyPoints::string())? (rotate::string())? (origin::string())?) ;
SVG.onend.attrib ::= (onend::SVG.Script.datatype)? ;
SVG.stroke-width.attrib ::= (stroke-width::SVG.StrokeWidthValue.datatype)? ;
SVG.svg ::= svg::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.DocumentEvents.attrib SVG.GraphicalEvents.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? (width::SVG.Length.datatype)? (height::SVG.Length.datatype)? (viewBox::SVG.ViewBoxSpec.datatype)? (preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype)? (zoomAndPan::("disable" | "magnify"))? version::SVG.Number.datatype (baseProfile::SVG.Text.datatype)? (contentScriptType::SVG.ContentType.datatype)? (contentStyleType::SVG.ContentType.datatype)?) ;
SVG.circle ::= circle::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib (cx::SVG.Coordinate.datatype)? (cy::SVG.Coordinate.datatype)? r::SVG.Length.datatype (transform::SVG.TransformList.datatype)?) ;
SVG.font ::= font::(SVG.Description.class* SVG.font-face SVG.missing-glyph (SVG.glyph | SVG.hkern | SVG.vkern)* SVG.Core.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.External.attrib (horiz-origin-x::SVG.Number.datatype)? (horiz-origin-y::SVG.Number.datatype)? horiz-adv-x::SVG.Number.datatype (vert-origin-x::SVG.Number.datatype)? (vert-origin-y::SVG.Number.datatype)? (vert-adv-y::SVG.Number.datatype)?) ;
SVG.onerror.attrib ::= (onerror::SVG.Script.datatype)? ;
SVG.Profile.attrib ::= Îµ ;
 SVG.Profile.attrib ::= (color-profile::string())? SVG.Profile.extra.attrib ;
SVG.set ::= set::(SVG.Description.class* SVG.Core.attrib SVG.Conditional.attrib SVG.AnimationEvents.attrib SVG.External.attrib SVG.Animation.attrib SVG.AnimationAttribute.attrib SVG.AnimationTiming.attrib (to::string())?) ;
SVG.Filter.attrib ::= Îµ ;
 SVG.Filter.attrib ::= (filter::SVG.FilterValue.datatype)? SVG.Filter.extra.attrib ;
SVG.AnimationAttribute.attrib ::= attributeName::string() (attributeType::string())? SVG.AnimationAttribute.extra.attrib ;
SVG.Marker.attrib ::= Îµ ;
 SVG.Marker.attrib ::= (marker-start::SVG.MarkerValue.datatype)? (marker-mid::SVG.MarkerValue.datatype)? (marker-end::SVG.MarkerValue.datatype)? SVG.Marker.extra.attrib ;
SVG.feMergeNode ::= feMergeNode::((SVG.animate | SVG.set)* SVG.Core.attrib (in::string())?) ;
SVG.XLinkReplace.attrib ::= (xlink:type::"simple")? xlink:href::SVG.URI.datatype (xlink:role::SVG.URI.datatype)? (xlink:arcrole::SVG.URI.datatype)? (xlink:title::string())? (xlink:show::("new" | "replace"))? (xlink:actuate::"onRequest")? SVG.XLinkReplace.extra.attrib ;
SVG.feDiffuseLighting ::= feDiffuseLighting::(SVG.feDistantLight | SVG.fePointLight | SVG.feSpotLight (SVG.animate | SVG.set | SVG.animateColor)* SVG.Core.attrib SVG.Style.attrib SVG.Color.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib (lighting-color::SVG.SVGColor.datatype)? (surfaceScale::SVG.Number.datatype)? (diffuseConstant::SVG.Number.datatype)? (kernelUnitLength::SVG.NumberOptionalNumber.datatype)?) ;
SVG.feOffset ::= feOffset::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib (dx::SVG.Number.datatype)? (dy::SVG.Number.datatype)?) ;
SVG.feColorMatrix ::= feColorMatrix::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib (type::("matrix" | "saturate" | "hueRotate" | "luminanceToAlpha"))? (values::string())?) ;
SVG.onmousedown.attrib ::= (onmousedown::SVG.Script.datatype)? ;
SVG.text ::= text::((string() | SVG.Description.class | SVG.Animation.class | SVG.TextContent.class | SVG.Hyperlink.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Text.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib (x::SVG.Coordinates.datatype)? (y::SVG.Coordinates.datatype)? (dx::SVG.Lengths.datatype)? (dy::SVG.Lengths.datatype)? (rotate::SVG.Numbers.datatype)? (textLength::SVG.Length.datatype)? (lengthAdjust::("spacing" | "spacingAndGlyphs"))? (transform::SVG.TransformList.datatype)?) ;
SVG.tspan ::= tspan::((string() | SVG.tspan | SVG.tref | SVG.altGlyph | SVG.animate | SVG.set | SVG.animateColor | SVG.Description.class | SVG.Hyperlink.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib (x::SVG.Coordinates.datatype)? (y::SVG.Coordinates.datatype)? (dx::SVG.Lengths.datatype)? (dy::SVG.Lengths.datatype)? (rotate::SVG.Numbers.datatype)? (textLength::SVG.Length.datatype)? (lengthAdjust::("spacing" | "spacingAndGlyphs"))?) ;
SVG.XLinkRequired.attrib ::= (xlink:type::"simple")? xlink:href::SVG.URI.datatype (xlink:role::SVG.URI.datatype)? (xlink:arcrole::SVG.URI.datatype)? (xlink:title::string())? (xlink:show::"other")? (xlink:actuate::"onLoad")? SVG.XLinkRequired.extra.attrib ;
SVG.onabort.attrib ::= (onabort::SVG.Script.datatype)? ;
SVG.polygon ::= polygon::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Marker.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib points::SVG.Points.datatype (transform::SVG.TransformList.datatype)?) ;
SVG.path ::= path::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Marker.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib d::SVG.PathData.datatype (pathLength::SVG.Number.datatype)? (transform::SVG.TransformList.datatype)?) ;
SVG.overflow.attrib ::= (overflow::("visible" | "hidden" | "scroll" | "auto" | "inherit"))? ;
SVG.onmousemove.attrib ::= (onmousemove::SVG.Script.datatype)? ;
SVG.feSpotLight ::= feSpotLight::((SVG.animate | SVG.set)* SVG.Core.attrib (x::SVG.Number.datatype)? (y::SVG.Number.datatype)? (z::SVG.Number.datatype)? (pointsAtX::SVG.Number.datatype)? (pointsAtY::SVG.Number.datatype)? (pointsAtZ::SVG.Number.datatype)? (specularExponent::SVG.Number.datatype)? (limitingConeAngle::SVG.Number.datatype)?) ;
SVG.image-rendering.attrib ::= (image-rendering::("auto" | "optimizeSpeed" | "optimizeQuality" | "inherit"))? ;
SVG.style ::= style::(string() SVG.Core.attrib type::SVG.ContentType.datatype (media::SVG.MediaDesc.datatype)? (title::SVG.Text.datatype)?) ;
SVG.pointer-events.attrib ::= (pointer-events::("visiblePainted" | "visibleFill" | "visibleStroke" | "visible" | "painted" | "fill" | "stroke" | "all" | "none" | "inherit"))? ;
SVG.symbol ::= symbol::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.External.attrib (viewBox::SVG.ViewBoxSpec.datatype)? (preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype)?) ;
SVG.onmouseup.attrib ::= (onmouseup::SVG.Script.datatype)? ;
SVG.color-rendering.attrib ::= (color-rendering::("auto" | "optimizeSpeed" | "optimizeQuality" | "inherit"))? ;
SVG.Font.attrib ::= Îµ ;
 SVG.Font.attrib ::= (font-family::SVG.FontFamilyValue.datatype)? (font-size::SVG.FontSizeValue.datatype)? (font-size-adjust::SVG.FontSizeAdjustValue.datatype)? (font-stretch::("normal" | "wider" | "narrower" | "ultra-condensed" | "extra-condensed" | "condensed" | "semi-condensed" | "semi-expanded" | "expanded" | "extra-expanded" | "ultra-expanded" | "inherit"))? (font-style::("normal" | "italic" | "oblique" | "inherit"))? (font-variant::("normal" | "small-caps" | "inherit"))? (font-weight::("normal" | "bold" | "bolder" | "lighter" | "100" | "200" | "300" | "400" | "500" | "600" | "700" | "800" | "900" | "inherit"))? SVG.Font.extra.attrib ;
SVG.clip.attrib ::= (clip::SVG.ClipValue.datatype)? ;
SVG.Gradient.attrib ::= Îµ ;
 SVG.Gradient.attrib ::= (stop-color::SVG.SVGColor.datatype)? (stop-opacity::SVG.OpacityValue.datatype)? SVG.Gradient.extra.attrib ;
SVG.AnimationAddtion.attrib ::= (additive::("replace" | "sum"))? (accumulate::("none" | "sum"))? SVG.AnimationAddition.extra.attrib ;
SVG.defs ::= defs::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.External.attrib (transform::SVG.TransformList.datatype)?) ;
SVG.TextContent.attrib ::= Îµ ;
 SVG.TextContent.attrib ::= (alignment-baseline::("baseline" | "top" | "before-edge" | "text-top" | "text-before-edge" | "middle" | "bottom" | "after-edge" | "text-bottom" | "text-after-edge" | "ideographic" | "lower" | "hanging" | "mathematical" | "inherit"))? (baseline-shift::SVG.BaselineShiftValue.datatype)? (direction::("ltr" | "rtl" | "inherit"))? (dominant-baseline::("auto" | "autosense-script" | "no-change" | "reset" | "ideographic" | "lower" | "hanging" | "mathematical" | "inherit"))? (glyph-orientation-horizontal::SVG.GlyphOrientationHorizontalValue.datatype)? (glyph-orientation-vertical::SVG.GlyphOrientationVerticalValue.datatype)? (kerning::SVG.KerningValue.datatype)? (letter-spacing::SVG.SpacingValue.datatype)? (text-anchor::("start" | "middle" | "end" | "inherit"))? (text-decoration::SVG.TextDecorationValue.datatype)? (unicode-bidi::("normal" | "embed" | "bidi-override" | "inherit"))? (word-spacing::SVG.SpacingValue.datatype)? SVG.TextContent.extra.attrib ;
SVG.onunload.attrib ::= (onunload::SVG.Script.datatype)? ;
SVG.altGlyph ::= altGlyph::(string() SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.XLink.attrib SVG.External.attrib (x::SVG.Coordinates.datatype)? (y::SVG.Coordinates.datatype)? (dx::SVG.Lengths.datatype)? (dy::SVG.Lengths.datatype)? (glyphRef::string())? (format::string())? (rotate::SVG.Numbers.datatype)?) ;
SVG.feConvolveMatrix ::= feConvolveMatrix::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib order::SVG.NumberOptionalNumber.datatype kernelMatrix::string() (divisor::SVG.Number.datatype)? (bias::SVG.Number.datatype)? (targetX::SVG.Integer.datatype)? (targetY::SVG.Integer.datatype)? (edgeMode::("duplicate" | "wrap" | "none"))? (kernelUnitLength::SVG.NumberOptionalNumber.datatype)? (preserveAlpha::SVG.Boolean.datatype)?) ;
SVG.onload.attrib ::= (onload::SVG.Script.datatype)? ;
SVG.externalResourcesRequired.attrib ::= (externalResourcesRequired::SVG.Boolean.datatype)? ;
SVG.color-interpolation.attrib ::= (color-interpolation::("auto" | "sRGB" | "linearRGB" | "inherit"))? ;
SVG.stroke-linecap.attrib ::= (stroke-linecap::("butt" | "round" | "square" | "inherit"))? ;
SVG.filter ::= filter::(SVG.Description.class* (SVG.animate | SVG.set | SVG.FilterPrimitive.class)* SVG.Core.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.XLink.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? (width::SVG.Length.datatype)? (height::SVG.Length.datatype)? (filterRes::SVG.NumberOptionalNumber.datatype)? (filterUnits::("userSpaceOnUse" | "objectBoundingBox"))? (primitiveUnits::("userSpaceOnUse" | "objectBoundingBox"))?) ;
SVG.vkern ::= vkern::(Îµ SVG.Core.attrib (u1::string())? (g1::string())? (u2::string())? (g2::string())? k::SVG.Number.datatype) ;
SVG.display.attrib ::= (display::("inline" | "block" | "list-item" | "run-in" | "compact" | "marker" | "table" | "inline-table" | "table-row-group" | "table-header-group" | "table-footer-group" | "table-row" | "table-column-group" | "table-column" | "table-cell" | "table-caption" | "none" | "inherit"))? ;
SVG.linearGradient ::= linearGradient::(SVG.Description.class* (SVG.stop | SVG.animate | SVG.set | SVG.animateTransform)* SVG.Core.attrib SVG.Style.attrib SVG.Color.attrib SVG.Gradient.attrib SVG.XLink.attrib SVG.External.attrib (x1::SVG.Coordinate.datatype)? (y1::SVG.Coordinate.datatype)? (x2::SVG.Coordinate.datatype)? (y2::SVG.Coordinate.datatype)? (gradientUnits::("userSpaceOnUse" | "objectBoundingBox"))? (gradientTransform::SVG.TransformList.datatype)? (spreadMethod::("pad" | "reflect" | "repeat"))?) ;
SVG.feComponentTransfer ::= feComponentTransfer::(SVG.feFuncR? SVG.feFuncG? SVG.feFuncB? SVG.feFuncA? SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib) ;
SVG.line ::= line::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Marker.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib (x1::SVG.Coordinate.datatype)? (y1::SVG.Coordinate.datatype)? (x2::SVG.Coordinate.datatype)? (y2::SVG.Coordinate.datatype)? (transform::SVG.TransformList.datatype)?) ;
SVG.feDistantLight ::= feDistantLight::((SVG.animate | SVG.set)* SVG.Core.attrib (azimuth::SVG.Number.datatype)? (elevation::SVG.Number.datatype)?) ;
SVG.Clip.attrib ::= (clip-path::SVG.ClipPathValue.datatype)? (clip-rule::SVG.ClipFillRule.datatype)? SVG.Clip.extra.attrib ;
 SVG.Clip.attrib ::= Îµ ;
SVG.textPath ::= textPath::((string() | SVG.tspan | SVG.tref | SVG.altGlyph | SVG.animate | SVG.set | SVG.animateColor | SVG.Description.class | SVG.Hyperlink.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.XLinkRequired.attrib SVG.External.attrib (startOffset::SVG.Length.datatype)? (textLength::SVG.Length.datatype)? (lengthAdjust::("spacing" | "spacingAndGlyphs"))? (method::("align" | "stretch"))? (spacing::("auto" | "exact"))?) ;
SVG.onfocusout.attrib ::= (onfocusout::SVG.Script.datatype)? ;
SVG.radialGradient ::= radialGradient::(SVG.Description.class* (SVG.stop | SVG.animate | SVG.set | SVG.animateTransform)* SVG.Core.attrib SVG.Style.attrib SVG.Color.attrib SVG.Gradient.attrib SVG.XLink.attrib SVG.External.attrib (cx::SVG.Coordinate.datatype)? (cy::SVG.Coordinate.datatype)? (r::SVG.Length.datatype)? (fx::SVG.Coordinate.datatype)? (fy::SVG.Coordinate.datatype)? (gradientUnits::("userSpaceOnUse" | "objectBoundingBox"))? (gradientTransform::SVG.TransformList.datatype)? (spreadMethod::("pad" | "reflect" | "repeat"))?) ;
SVG.FilterColor.attrib ::= Îµ ;
 SVG.FilterColor.attrib ::= (color-interpolation-filters::("auto" | "sRGB" | "linearRGB" | "inherit"))? SVG.FilterColor.extra.attrib ;
SVG.mask ::= mask::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? (width::SVG.Length.datatype)? (height::SVG.Length.datatype)? (maskUnits::("userSpaceOnUse" | "objectBoundingBox"))? (maskContentUnits::("userSpaceOnUse" | "objectBoundingBox"))?) ;
SVG.onrepeat.attrib ::= (onrepeat::SVG.Script.datatype)? ;
SVG.Presentation.attrib ::= SVG.Container.attrib SVG.Viewport.attrib SVG.Text.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Marker.attrib SVG.Profile.attrib SVG.Gradient.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.FilterColor.attrib SVG.Cursor.attrib (flood-color::SVG.SVGColor.datatype)? (flood-opacity::SVG.OpacityValue.datatype)? (lighting-color::SVG.SVGColor.datatype)? SVG.Presentation.extra.attrib ;
SVG.hkern ::= hkern::(Îµ SVG.Core.attrib (u1::string())? (g1::string())? (u2::string())? (g2::string())? k::SVG.Number.datatype) ;
SVG.FilterPrimitive.attrib ::= (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? (width::SVG.Length.datatype)? (height::SVG.Length.datatype)? (result::string())? SVG.FilterPrimitive.extra.attrib ;
SVG.font-face-format ::= font-face-format::(Îµ SVG.Core.attrib (string::string())?) ;
SVG.rect ::= rect::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? width::SVG.Length.datatype height::SVG.Length.datatype (rx::SVG.Length.datatype)? (ry::SVG.Length.datatype)? (transform::SVG.TransformList.datatype)?) ;
SVG.feGaussianBlur ::= feGaussianBlur::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib (stdDeviation::SVG.NumberOptionalNumber.datatype)?) ;
SVG.stroke-dashoffset.attrib ::= (stroke-dashoffset::SVG.StrokeDashOffsetValue.datatype)? ;
SVG.Mask.attrib ::= Îµ ;
 SVG.Mask.attrib ::= (mask::SVG.MaskValue.datatype)? SVG.Mask.extra.attrib ;
SVG.AnimationValue.attrib ::= (calcMode::("discrete" | "linear" | "paced" | "spline"))? (values::string())? (keyTimes::string())? (keySplines::string())? (from::string())? (to::string())? (by::string())? SVG.AnimationValue.extra.attrib ;
SVG.cursor ::= cursor::(SVG.Description.class* SVG.Core.attrib SVG.Conditional.attrib SVG.XLinkRequired.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)?) ;
SVG.g ::= g::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.External.attrib (transform::SVG.TransformList.datatype)?) ;
SVG.onactivate.attrib ::= (onactivate::SVG.Script.datatype)? ;
SVG.Conditional.attrib ::= (requiredFeatures::SVG.FeatureList.datatype)? (requiredExtensions::SVG.ExtensionList.datatype)? (systemLanguage::SVG.LanguageCodes.datatype)? SVG.Conditional.extra.attrib ;
 SVG.Conditional.attrib ::= Îµ ;
SVG.onclick.attrib ::= (onclick::SVG.Script.datatype)? ;
SVG.feSpecularLighting ::= feSpecularLighting::(SVG.feDistantLight | SVG.fePointLight | SVG.feSpotLight (SVG.animate | SVG.set | SVG.animateColor)* SVG.Core.attrib SVG.Style.attrib SVG.Color.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib (lighting-color::SVG.SVGColor.datatype)? (surfaceScale::SVG.Number.datatype)? (specularConstant::SVG.Number.datatype)? (specularExponent::SVG.Number.datatype)? (kernelUnitLength::SVG.NumberOptionalNumber.datatype)?) ;
SVG.a ::= a::((string() | SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.XLinkReplace.attrib SVG.External.attrib (transform::SVG.TransformList.datatype)? (target::SVG.LinkTarget.datatype)?) ;
SVG.ellipse ::= ellipse::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib (cx::SVG.Coordinate.datatype)? (cy::SVG.Coordinate.datatype)? rx::SVG.Length.datatype ry::SVG.Length.datatype (transform::SVG.TransformList.datatype)?) ;
SVG.feImage ::= feImage::((SVG.animate | SVG.set | SVG.animateTransform)* SVG.Core.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.FilterPrimitive.attrib SVG.XLinkEmbed.attrib SVG.External.attrib (preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype)?) ;
SVG.glyphRef ::= glyphRef::(Îµ SVG.Core.attrib SVG.Style.attrib SVG.Font.attrib SVG.XLink.attrib (x::SVG.Coordinates.datatype)? (y::SVG.Coordinates.datatype)? (dx::SVG.Lengths.datatype)? (dy::SVG.Lengths.datatype)? (glyphRef::string())? (format::string())?) ;
SVG.image ::= image::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Viewport.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Profile.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.XLinkEmbed.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? width::SVG.Length.datatype height::SVG.Length.datatype (preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype)? (transform::SVG.TransformList.datatype)?) ;
SVG.Style.attrib ::= Îµ ;
 SVG.Style.attrib ::= (style::SVG.StyleSheet.datatype)? (class::SVG.ClassList.datatype)? SVG.Style.extra.attrib ;
SVG.XLink.attrib ::= Îµ ;
 SVG.XLink.attrib ::= (xlink:type::"simple")? (xlink:href::SVG.URI.datatype)? (xlink:role::SVG.URI.datatype)? (xlink:arcrole::SVG.URI.datatype)? (xlink:title::string())? (xlink:show::"other")? (xlink:actuate::"onLoad")? SVG.XLink.extra.attrib ;
SVG.polyline ::= polyline::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Marker.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib points::SVG.Points.datatype (transform::SVG.TransformList.datatype)?) ;
SVG.onmouseover.attrib ::= (onmouseover::SVG.Script.datatype)? ;
SVG.feBlend ::= feBlend::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib in2::string() (mode::("normal" | "multiply" | "screen" | "darken" | "lighten"))?) ;
SVG.feMorphology ::= feMorphology::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib (operator::("erode" | "dilate"))? (radius::SVG.NumberOptionalNumber.datatype)?) ;
SVG.marker ::= marker::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.External.attrib (refX::SVG.Coordinate.datatype)? (refY::SVG.Coordinate.datatype)? (markerUnits::("strokeWidth" | "userSpaceOnUse"))? (markerWidth::SVG.Length.datatype)? (markerHeight::SVG.Length.datatype)? (orient::string())? (viewBox::SVG.ViewBoxSpec.datatype)? (preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype)?) ;
SVG.lang.attrib ::= (xml:lang::SVG.LanguageCode.datatype)? ;
SVG.color.attrib ::= (color::SVG.Color.datatype)? ;
SVG.switch ::= switch::(SVG.Description.class* (SVG.svg | SVG.g | SVG.use | SVG.text | SVG.text | SVG.Animation.class | SVG.Conditional.class | SVG.Image.class | SVG.Shape.class | SVG.Hyperlink.class | SVG.Extensibility.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.External.attrib (transform::SVG.TransformList.datatype)?) ;
SVG.fill-rule.attrib ::= (fill-rule::SVG.ClipFillRule.datatype)? ;
SVG.feTurbulence ::= feTurbulence::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitive.attrib (baseFrequency::SVG.NumberOptionalNumber.datatype)? (numOctaves::SVG.Integer.datatype)? (seed::SVG.Number.datatype)? (stitchTiles::("stitch" | "noStitch"))? (type::("fractalNoise" | "turbulence"))?) ;
SVG.space.attrib ::= (xml:space::("default" | "preserve"))? ;
SVG.onresize.attrib ::= (onresize::SVG.Script.datatype)? ;
SVG.stroke-opacity.attrib ::= (stroke-opacity::SVG.OpacityValue.datatype)? ;
SVG.stroke.attrib ::= (stroke::SVG.Paint.datatype)? ;
SVG.color-profile ::= color-profile::(SVG.Description.class* SVG.Core.attrib SVG.XLink.attrib (local::string())? name::string() (rendering-intent::("auto" | "perceptual" | "relative-colorimetric" | "saturation" | "absolute-colorimetric"))?) ;
SVG.view ::= view::(SVG.Description.class* SVG.Core.attrib SVG.External.attrib (viewBox::SVG.ViewBoxSpec.datatype)? (preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype)? (zoomAndPan::("disable" | "magnify"))? (viewTarget::string())?) ;
SVG.tref ::= tref::((SVG.animate | SVG.set | SVG.animateColor | SVG.Description.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.XLinkRequired.attrib SVG.External.attrib (x::SVG.Coordinates.datatype)? (y::SVG.Coordinates.datatype)? (dx::SVG.Lengths.datatype)? (dy::SVG.Lengths.datatype)? (rotate::SVG.Numbers.datatype)? (textLength::SVG.Length.datatype)? (lengthAdjust::("spacing" | "spacingAndGlyphs"))?) ;
SVG.foreignObject ::= foreignObject::(SVG.foreignObject.content SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? width::SVG.Length.datatype height::SVG.Length.datatype (transform::SVG.TransformList.datatype)?) ;
SVG.FilterPrimitiveWithIn.attrib ::= SVG.FilterPrimitive.attrib (in::string())? SVG.FilterPrimitiveWithIn.extra.attrib ;
SVG.shape-rendering.attrib ::= (shape-rendering::("auto" | "optimizeSpeed" | "crispEdges" | "geometricPrecision" | "inherit"))? ;
SVG.glyph ::= glyph::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Style.attrib SVG.Presentation.attrib (unicode::string())? (glyph-name::string())? (d::SVG.PathData.datatype)? (orientation::string())? (arabic-form::string())? (lang::SVG.LanguageCodes.datatype)? (horiz-adv-x::SVG.Number.datatype)? (vert-origin-x::SVG.Number.datatype)? (vert-origin-y::SVG.Number.datatype)? (vert-adv-y::SVG.Number.datatype)?) ;
--------------------markup::wiki-mediawiki-bnf.bgf--------------------
bullet-item ::= "*" (list-item | item-body)? ;
html-comment ::= "<!--" characters? "-->" ;
whitespace ::= (whitespace-char whitespace?) | EOF ;
external-link ::= (external-link-start url whitespace? link-description? external-link-end) | url ;
pre-opening-tag ::= "<pre" (whitespace characters?)? ">" ;
nowiki-block ::= nowiki-opening-tag whitespace? nowiki-body whitespace? nowiki-closing-tag? ;
article-link ::= (interwiki-prefix | ":")? namespace-prefix? article-title ;
 article-link ::= ((interwiki-prefix | ":")? namespace-prefix? article-title) | ("/" article-title) | ("../"* article-title?) ;
defined-term ::= ";" text definition? ;
image-param-upright ::= "upright" ("="? digits)? ;
paragraph ::= (newline lines-of-text?) | lines-of-text ;
space-block-2 ::= space inline-text? newline ;
html-block ::= html-opening-tag whitespace? html-body whitespace? html-closing-tag? ;
category-link ::= internal-link-start category-namespace ":" article-title (pipe sort-key)? internal-link-end ;
nowiki-closing-tag ::= "</nowiki" whitespace? ">" ;
pre-block ::= pre-opening-tag whitespace? pre-body whitespace? pre-closing-tag? ;
inline-text ::= inline-element inline-text? ;
gallery-image ::= image-name ("|" caption)? ;
html-closing-tag ::= "</html" whitespace? ">" ;
special-block-and-more ::= special-block EOF | (newline? special-block-and-more) | (newline? paragraph-and-more) ;
item-body ::= defined-term | (whitespace? inline-text) ;
table-row ::= "|-" CSS? newline table-column table-row? ;
pre-closing-tag ::= "</pre" whitespace? ">" ;
lines-of-text ::= line-of-text lines-of-text? ;
table-column-multiline ::= "|" (table-cell-parameters "|")? any-text newline table-column-multiline? ;
indent-item ::= ":" (list-item | item-body)? ;
gallery-block ::= "<gallery>" newline? gallery-image (newline? gallery-image)* newline? "</gallery>" ;
plain-text ::= unicode-wiki | ("<nowiki>" ("|" | "[" | "]" | "<" | ">" | "{" | "}")* "</nowiki>") | (unicode-wiki space* "*" | "#" | ":" | ";") | (unicode-wiki space? "=" space? unicode-wiki) | (unicode-wiki "'") | ("'" unicode-wiki) ;
table ::= "{|" (space table-parameters)? newline table-first-row "|}" ;
table-column-line ::= "|" inline-text ("|" table-column-line)? ;
wiki-page ::= (redirect article?) | (article?) ;
paragraph-and-more ::= paragraph EOF | (newline? special-block-and-more) | (newline paragraph-and-more) ;
internal-link ::= internal-link-start article-link ("#" section-id)? (pipe link-description?)? internal-link-end extra-description? ;
page-name ::= title-character (space? title-character)* ;
nowiki-opening-tag ::= "<nowiki" (whitespace characters?)? ">" ;
horizontal-rule ::= "----" dashes? inline-text? newline ;
namespace-prefix ::= namespace? ":" ;
html-opening-tag ::= "<html" (whitespace characters?)? ">" ;
url-path ::= url-char url-path? ;
enumerated-item ::= "#" (list-item | item-body)? ;
isbn-number ::= "97" "8" | "9" (space | "-")? decimal-digit (space | "-")? "9"* decimal-digit | "X" | "x" ;
--------------------markup::wiki-mediawiki-ebnf.bgf--------------------
comment ::= "<!--" Text? "-->" ;
table ::= table_start table_header? table_row? table_body table_end ;
external_link ::= URL | (start_link URL (whitespace label)? end_link label_extension) ;
internal_link ::= start_link full_pagename ("|" label)? end_link label_extension ;
definition_list ::= text? ":" text ;
full_pagename ::= ((namespace ":") | ":")? pagename ;
Commentary ::= "<comment" Text? ">" Text? "</comment>" ;
header6 ::= line_break "======" whitespace? text whitespace? "======" header_end ;
header_end ::= whitespace? line_break ;
header5 ::= line_break "=====" whitespace? text whitespace? "=====" header_end ;
header4 ::= line_break "====" whitespace? text whitespace? "====" header_end ;
header3 ::= line_break "===" whitespace? text whitespace? "===" header_end ;
header2 ::= line_break "==" whitespace? text whitespace? "==" header_end ;
header1 ::= line_break "=" whitespace? text whitespace? "=" header_end ;
part ::= (name "=")? value ;
ISBN_link ::= digit ("-" | " ")? digit digit digit ("-" | " ")? digit digit digit digit digit ("-" | " " digit | "X" | "x")? ;
--------------------fl::python.bgf--------------------
literal ::= "-"? integer() ;
--------------------metasyntax::txl.bgf--------------------
literal ::= quotedLiteral | unquotedLiteral | (SP comment NEWoptNL?) ;
ruleApplications ::= IN IN commentNL* ruleApplication+ EX EX ruleoptNL? ;
commentNL ::= SP SP comment NEWoptNL? ;
condition ::= (EX "where" "not"? "all"? NL IN commentNL* expression NL) | (EX "assert" "not"? "all"? NL IN commentNL* expression NL) ;
deconstructor ::= EX skippingType? "deconstruct" "not"? "*"? type? varid NL IN pattern ;
expression ::= varid ruleApplications? ;
functionStatement ::= ("function" ruleid formalArgument* NL IN IN constructDeconstructImportExportOrCondition* EX skippingType? "replace" dollarStar? SP type NL IN pattern constructDeconstructImportExportOrCondition* EX "by" NL IN replacement EX EX "end" "function" NL NL) | ("function" ruleid formalArgument* NL IN IN constructDeconstructImportExportOrCondition* EX skippingType? "match" dollarStar? SP type NL IN pattern constructDeconstructImportExportOrCondition* EX EX "end" "function" NL NL) ;
formatCues ::= IN IN formatCue+ EX EX optNL? ;
tokenPattern ::= (typeid TAB_24 stringlit NL) | (TAB_16 "|" TAB_24 stringlit NL) | (typeid TAB_16 "..."? "|" TAB_24 stringlit NL) | (typeid TAB_16 "+" TAB_24 stringlit NL) | (comment NL) ;
typeSpec ::= (typeModifier? typeid typeRepeater?) | "!" ;
ruleApplication ::= (SP "[" ruleid varidOrLiteral* eachArgs? "]" commentNL*) | (SP lengthrule varidOrLiteral* eachArgs? "]" commentNL*) ;
ruleStatement ::= ("rule" ruleid formalArgument* NL IN IN constructDeconstructImportExportOrCondition* EX skippingType? "replace" dollarStar? SP type NL IN pattern constructDeconstructImportExportOrCondition* EX "by" NL IN replacement EX EX "end" "rule" NL NL) | ("rule" ruleid formalArgument* NL IN IN constructDeconstructImportExportOrCondition* EX skippingType? "match" dollarStar? SP type NL IN pattern EX EX constructDeconstructImportExportOrCondition* "end" "rule" NL NL) ;
importer ::= EX "import" varid type? NL IN pattern? ;
exporter ::= EX "export" varid type? NL IN replacement? ;
redefineStatement ::= "redefine" typeid NL IN IN dotDotDotBar? literalOrType* NL barLiteralsAndTypes* barDotDotDot? EX EX "end" redefineOrDefine NL NL RESET ;
--------------------metasyntax::ebnf-bgf.bgf--------------------
production ::= label? string() defining-metasymbol right-hand-side terminator-metasymbol ;
--------------------metasyntax::ebnf-iso-1.bgf--------------------
syntactic_factor ::= (integer repetition_symbol)? syntactic_primary ;
syntactic_term ::= syntactic_factor (except_symbol syntactic_exception)? ;
--------------------metasyntax::ebnf-iso-2.bgf--------------------
factor ::= (integer "*")? primary ;
term ::= factor ("-" exception)? ;
--------------------metasyntax::ebnf-iso-3.bgf--------------------
FACTOR ::= (INTEGER "*")? PRIMARY ;
TERM ::= FACTOR ("-" EXCEPTION)? ;
--------------------metasyntax::relaxng.bgf--------------------
except-name-class ::= other (except::open-name-classes)? ;
common-atts ::= (ns::string())? (datatypeLibrary::string())? Î±* ;
combine-att ::= (combine::("choice" | "interleave"))? ;
pattern ::= (element::((name::string()) | open-name-class common-atts open-patterns)) | (attribute::(common-atts (name::string()) | open-name-class other pattern?)) | (group::(common-atts open-patterns)) | (interleave::(common-atts open-patterns)) | (choice::(common-atts open-patterns)) | (optional::(common-atts open-patterns)) | (zeroOrMore::(common-atts open-patterns)) | (oneOrMore::(common-atts open-patterns)) | (list::(common-atts open-patterns)) | (mixed::(common-atts open-patterns)) | (ref::(name::string() common-atts other)) | (parentRef::(name::string() common-atts other)) | (empty::(common-atts other)) | (text::(common-atts other)) | (value::((type::string())? common-atts string())) | (data::(type::string() common-atts other (param::(name::string() common-atts string()))* (except::(common-atts open-patterns))?)) | (notAllowed::(common-atts other)) | (externalRef::(href::string() common-atts other)) | (grammar::(common-atts grammar-content)) ;
--------------------metasyntax::lll-kort.bgf--------------------
term ::= basis repetition? ;
--------------------metasyntax::lll-ldta.bgf--------------------
term ::= basis repetition? ;
--------------------metasyntax::yacc-sdf.bgf--------------------
Rule ::= NonTerminal ":" (Expression? ("|" Expression?)*)? ";" ;
Yacc-declaration ::= ("%token" | "%left" | "%right" | "%nonassoc" (Terminal | Literal)+ String?) | ("%start" Terminal) ;
--------------------metasyntax::yacc-txl.bgf--------------------
productionDefinition ::= (yac_id ":" NL IN SP SP literalsAndTypes barLiteralsAndTypes* ";"? NL EX) | ("define" yac_id NL IN SP SP literalsAndTypes NL barLiteralsAndTypes* EX "end" "define" NL NL) ;
type ::= (SP "[" yac_id "]") | (SP "[" "opt" yac_idOrQuotedLiteral "]") | (SP "[" "repeat" yac_idOrQuotedLiteral plusOrStar? "]") | (SP "[" "list" yac_idOrQuotedLiteral plusOrStar? "]") ;
tokenDefinitions ::= tokenDefinition* endSection? ;
--------------------metasyntax::xsd-tennison.bgf--------------------
complexTypeModel ::= simpleContent | ((mixed::("true" | "false"))? complexContent | (typeDefParticle? attrDecls)) ;
complexRestriction ::= restriction::(annotated base::string() typeDefParticle? attrDecls) ;
topLevelSimpleType ::= simpleType::(simpleType name::string() (final::simpleDerivationSet)?) ;
rangeFacets ::= (minExclusive | minInclusive)? (maxExclusive | maxInclusive)? ;
attrDecls ::= (localAttribute | attributeGroupRef)* anyAttribute? ;
annotated ::= openAttrs (id::string())? annotation? ;
facet ::= annotated (fixed::("true" | "false"))? ;
importOptionalNamespace ::= import::(import (namespace::string())?) ;
localElement ::= element::(occurs (ref::string()) | (element name::string() (form::formChoice)?)) ;
localAttribute ::= attribute::(annotated (use::("optional" | "prohibited" | "required"))? fixedOrDefault (ref::string()) | (name::string() (form::formChoice)? attributeType)) ;
union ::= union::(annotated (memberTypes::(string()+) localSimpleType*) | ((memberTypes::Îµ)? localSimpleType+)) ;
simpleRestrictionModel ::= (base::"xs:anySimpleType" rangeFacets digitFacets lengthFacets whiteSpace? enumeration* pattern*) | (base::"xs:string" lengthFacets whiteSpace? enumeration* pattern*) | (base::"xs:normalizedString" lengthFacets whiteSpaceReplaceOrCollapse? enumeration* pattern*) | (base::("xs:token" | "xs:language" | "xs:Name" | "xs:NCName" | "xs:ID" | "xs:IDREF" | "xs:IDREFS" | "xs:NMTOKEN" | "xs:NMTOKENS" | "xs:ENTITY" | "xs:ENTITIES" | "xs:hexBinary" | "xs:base64Binary" | "xs:anyURI" | "xs:QName" | "xs:NOTATION") lengthFacets commonFacets) | (base::"xs:boolean" whiteSpaceCollapse? pattern*) | (base::("xs:decimal" | "xs:integer" | "xs:nonPositiveInteger" | "xs:nonNegativeInteger" | "xs:positiveInteger" | "xs:negativeInteger" | "xs:unsignedLong" | "xs:unsignedInt" | "xs:unsignedShort" | "xs:unsignedByte" | "xs:long" | "xs:int" | "xs:short" | "xs:byte") digitFacets rangeFacets commonFacets) | (base::("xs:float" | "xs:double" | "xs:duration" | "xs:dateTime" | "xs:time" | "xs:date" | "xs:gYearMonth" | "xs:gYear" | "xs:gMonthDay" | "xs:gMonth" | "xs:gDay") rangeFacets commonFacets) | ((base::string()) | localSimpleType rangeFacets digitFacets lengthFacets whiteSpace? enumeration* pattern*) ;
complexExtension ::= extension::(extensionType typeDefParticle? attrDecls) ;
appinfo ::= appinfo::((source::string())? appinfoContent) ;
annotation ::= annotation::(openAttrs (id::string())? (documentation | appinfo)*) ;
redefine ::= redefine::(openAttrs (id::string())? schemaLocation::string() (annotation | redefinable)*) ;
digitFacets ::= totalDigits? fractionDigits? ;
complexContent ::= complexContent::(annotated (mixed::("true" | "false"))? complexRestriction | complexExtension) ;
allModel ::= annotated (element::(((minOccurs::("0" | "1")) | (maxOccurs::("0" | "1")))* (ref::string()) | (element name::string() (form::formChoice)?)))* ;
commonFacets ::= enumeration* whiteSpaceCollapse? pattern* ;
import ::= annotated (schemaLocation::string())? ;
lengthFacets ::= length | (minLength? maxLength?) ;
notation ::= notation::(annotated name::string() public::string() (system::string())?) ;
--------------------tescol::00000.bgf--------------------
INT ::= ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
expoexp ::= negateexp (EXPO negateexp)? ;
DOUBLE ::= INT? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ("e" | "E" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+)? ;
arithexp ::= connexp (QMARK connexp COLON connexp)? ;
--------------------tescol::00001.bgf--------------------
paramlist ::= (ID COLON types)? (COM ID COLON types)* ;
INTG ::= ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
expr ::= boolExpr (MIXFIX expr COLON expr)? ;
arglist ::= OPAR (expr (COM expr)*)? CPAR ;
compExpr ::= plusexpr (GT | LT | GTE | LTE | EQ | NEQ plusexpr)? ;
DOUBLE ::= ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" | "E" INTG)? ;
atom ::= INTG | DOUBLE | (ID arglist?) | (CID arglist?) | (OPAR expr CPAR) ;
--------------------tescol::00010.bgf--------------------
EXPONENT ::= "e" | "E" ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
procApply ::= VAR_ID LPAR args? RPAR ;
cond ::= IF LPAR b::booleanExpr RPAR THEN ts::stat (ELSE es::stat)? ;
DOUBLE ::= DIGIT* "." DIGIT* EXPONENT? ;
procDecl ::= PROC VAR_ID LPAR parameter? RPAR COLON type DEFINED_AS stat ;
--------------------tescol::00011.bgf--------------------
INT ::= ("+" | "-")? "0" | ("1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")*) ;
procdeclaration ::= PROC ID OPARAN paramlist? CPARAN COLON type ASSIGN statement SEMI ;
program ::= TROLLEY CONSTID CONTAINS declarations CHECKOUT statement? SEMI? DONE SEMI ;
DOUBLE ::= INT? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" INT)? ;
--------------------tescol::00100.bgf--------------------
procedureApp ::= ID LPAREN realParameters? RPAREN ;
sign ::= ("+" | negation)? atom ;
DOUBLE_NUMBER ::= ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" | "E" INT_NUMBER)? ;
condExpr ::= booleanDisj (QUESTION aritExpr COLON aritExpr)? ;
orderExpr ::= sign (expOperand sign)? ;
booleanExpression ::= aritExpr (relational aritExpr)? ;
--------------------tescol::00101.bgf--------------------
proc_call ::= id OPENPAR (a::expr (COMMA b::expr)*)? CLOSEPAR ;
expr ::= a::boolean_expr (MIXFIX b::expr COLON c::expr)? ;
arith_atom ::= ((ADDITION | SUBTRACTION)? number) | id | (OPENPAR expr CLOSEPAR) | proc_call ;
parameter_list ::= OPENPAR parameter_list_inside? CLOSEPAR ;
DOUBLE_VAL ::= INT_VAL? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" | "E" ("+" | "-")? INT_VAL)? ;
boolean_predicate ::= a::arith_expr (relationals b::arith_expr)? ;
--------------------tescol::00110.bgf--------------------
condExpr ::= add (Q_MARK add COLON add)? ;
DOUBLE ::= INTEGER? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" | "E" INTEGER)? ;
--------------------tescol::00111.bgf--------------------
unary ::= (ADDITION | SUBTRACTION)? atom ;
booleanExpr ::= arithEx (EQUALITY | NON_EQUALITY | LESS | LESS_EQUAL | GREATER | GREATER_EQUAL arithEx)? ;
conditionalExpr ::= disjBooleanExpr (QUESTION conditionalExpr COLON conditionalExpr)? ;
exponentialExpr ::= unary (EXPONENTIATION unary)? ;
DOUBLE_NUMBER ::= ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" | "E" ("-" | "+")? INT_NUMBER)? ;
NEWLINE ::= "\r"? "\n" ;
procDeclaration ::= PROC identifier LPAREN parameterList? RPAREN COLON type COLON_EQUALS compoundStatement ;
commaSeparatedArithEx ::= (arithEx (COMMA arithEx)*)? ;
--------------------tescol::01000.bgf--------------------
DOUBNUM ::= INTNUM? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" | "E" INTNUM)? ;
param ::= (l::id COL ltype::type (COMMA r::id COL rtype::type)*)? ;
arith ::= orExpr (QUES arith COL arith)? ;
INTNUM ::= ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
--------------------tescol::01001.bgf--------------------
comp_exp ::= plus_min_exp (rel_operator plus_min_exp)? ;
exp_exp ::= minus (EXP minus)? ;
arith_exp ::= bool_exp (QUEST arith_exp COLON arith_exp)? ;
DOUBLE_T ::= INT_T? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" | "E" INT_T)? ;
INT_T ::= ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
params_given ::= (arith_exp (COMMA arith_exp)*)? ;
param_list ::= (param_item (COMMA param_item)*)? ;
--------------------tescol::01010.bgf--------------------
paramdecs ::= (paramdec (COMMA paramdec)* COMMA?)? ;
argslist ::= LPARA (expr (COMMA expr)* COMMA?)? RPARA ;
NUM ::= INUM? "." INUM? ("e" | "E" (POSITIVE | NEGATIVE)? INUM)? ;
unsignedatom ::= bracketexpr | (id argslist?) | (sign number) | number ;
expr ::= cond (QUEST expr COLON expr)? ;
expexpr ::= atom (EXP expexpr)? ;
pred ::= sub_add_expr (comparator sub_add_expr)? ;
--------------------tescol::01011.bgf--------------------
procedureapp ::= ID "(" (expression (COMMA expression)*)? ")" SEMI? ;
expression ::= disj ("\?" disj COLON disj)? ;
conditional ::= IF expression THEN statement+ (ELSE statement+)? ;
INUMB ::= ("+" | "-")? "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ;
DNUMB ::= ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* "." "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")*)? ;
--------------------tescol::01100.bgf--------------------
number ::= (ADDITION? INT) | (ADDITION? DOUBLE) | (SUBSTRACTION INT) | (SUBSTRACTION DOUBLE) ;
DOUBLE ::= INT? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("E" | "e" (ADDITION | SUBSTRACTION)? INT)? ;
--------------------tescol::01101.bgf--------------------
proc_para ::= varIDs OPENPARENTHESIS (parameter COMMA?)* CLOSEDPARENTHESIS ;
mix_fix ::= bool_disjunction (MIX_FIX arithmetic_expression COLON atom)? ;
DOUBLE ::= INT? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" | "E" (ADD | SUB)? INT)? ;
--------------------tescol::01110.bgf--------------------
procDec ::= PROC name::ID LPAREN (a::ID COLON a_t::type (COMMA b::ID COLON b_t::type)*)? RPAREN COLON r_t::type COLON_EQUALS c::statement ;
type ::= (INT | DOUBLE)? ;
DOUBLE_NUMBER ::= ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" | "E" INT_NUMBER)? ;
procCall ::= (name::ID) | (name::CID) LPAREN (a::mixFix (COMMA b::mixFix)*)? RPAREN ;
--------------------tescol::01111.bgf--------------------
boolExpr ::= subExpr (operations subExpr)? ;
procDec ::= p::VARANDPROCID OPAR paramList? CPAR COLON number DEFINEDAS stat ;
arithmeticExpression ::= disjBool (QUESTION arithmeticExpression COLON arithmeticExpression)? ;
atom ::= CONSTID | VARANDPROCID | (("+" | "-")? INTVALUE) | (("+" | "-")? DOUBLEVALUE) | applyProc | (OPAR arithmeticExpression CPAR) ;
DOUBLEVALUE ::= INTVALUE? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" | "E" ("+" | "-")? INTVALUE)? ;
--------------------tescol::10000.bgf--------------------
decl ::= (VAR ID COLON INT | DOUBLE SEMI NEWLINE*) | (CONST CID COLON INT | DOUBLE COLON_EQUALS condExpr SEMI NEWLINE*) | (PROC a::ID LPAREN (decl (COMMA decl)*)? RPAREN COLON_EQUALS stat SEMI NEWLINE*) ;
INT_NUMBER ::= ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
DOUBLE_NUMBER ::= ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" | "E" INT_NUMBER)? ;
expoExpr ::= atom EXPONENTIATION? ;
condExpr ::= boolExpr (QUESTION condExpr COLON condExpr)? ;
NEWLINE ::= "\r"? "\n" ;
compExpr ::= expr (GREATER_EQUAL | LESS_EQUAL | EQUALITY | NON_EQUALITY | GREATER | LESS expr)? ;
ifthenelse ::= IF LPAREN boolExpr RPAREN THEN stat (SEMI ELSE stat)? ;
atom ::= INT_NUMBER | DOUBLE_NUMBER | (a::(CID | ID) (LPAREN (expr (COMMA expr)*)? RPAREN)?) | (LPAREN condExpr RPAREN) ;
--------------------tescol::10001.bgf--------------------
INT_NUMBER ::= ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
DOUBLE_NUMBER ::= INT_NUMBER? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" INT_NUMBER)? ;
condExpr ::= boolExpr (QUESTION condExpr COLON condExpr)? ;
checkout ::= CHECKOUT stat SEMI? DONE SEMI ;
proccall ::= i::id LPAREN (a::atom (COMMA a::atom)*)? RPAREN ;
compExpr ::= expr (GREATER_EQUAL | LESS_EQUAL | EQUALITY | NON_EQUALITY | LESS | GREATER expr)? ;
procedure ::= PROC i::id LPAREN (a::vartypedef (COMMA a::vartypedef)*)? RPAREN COLON_EQUALS s::stat ;
--------------------tescol::10010.bgf--------------------
INT ::= ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
conditionalExpression ::= booleanExpression (QUESTION conditional COLON conditional)? ;
procedureApplication ::= arithmetic (ID LPAREN expressionList RPAREN)? ;
disjExpression ::= expression (relationalOperator expression)? ;
arithmeticExpression ::= procedureApplication (conditionalExpression QUESTION arithmeticExpression COLON arithmeticExpression)? ;
DOUBLE ::= INT? "." (("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")*) | ("e" | "E" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+) ;
--------------------tescol::10011.bgf--------------------
sign ::= (MINUS | PLUS)? atom ;
ropexpr ::= expr (rop expr)? ;
cexpr ::= bexpr (QM cexpr COLON cexpr)? ;
DUB ::= INT? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" | "E" INT)? ;
--------------------tescol::10100.bgf--------------------
relationalExpression ::= addExpression (GREATER_EQUAL | GREATER | LESS_EQUAL | LESS | EQUALITY | NON_EQUALITY addExpression)? ;
paramlist ::= LPAREN (ID COLON type (COMMA ID COLON type)*)? RPAREN ;
INT_NUMBER ::= ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
expression ::= andExpression (QUESTION andExpression COLON andExpression)? ;
DOUBLE_NUMBER ::= ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" | "E" INT_NUMBER)? ;
NEWLINE ::= "\r"? "\n" ;
--------------------tescol::10101.bgf--------------------
FLOATINGPOINT ::= INTEGER? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ("e" | "E" (ADDITION | SUBTRACTION)* INTEGER)? ;
condExpr ::= boolExpr (MIXFIX condExpr COLON condExpr)? ;
--------------------tescol::10110.bgf--------------------
EXPONENT ::= "e" | "E" ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
condExpr ::= boolExpr (QUESTION condExpr COLON condExpr)? ;
expr ::= negation? expr2 ;
compExpr ::= expr (comparator expr)? ;
program ::= TROLLEY cidentifier CONTAINS dec* CHECKOUT CURLY_L (statement (SEMI statement)*)? CURLY_R SEMI DONE SEMI EOF ;
DOUBLE ::= (INT "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* EXPONENT?) | ("." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ EXPONENT?) | (INT EXPONENT) | "." ;
--------------------tescol::10111.bgf--------------------
EXPONENT ::= "e" | "E" (SYM_ADD | SYM_SUB)? INT ;
mixfix ::= predicate (SYM_QM mixfix SYM_COLON mixfix)? ;
integerNum ::= (SYM_ADD | SYM_SUB)? INT ;
arg_list ::= SYM_OPEN_PAREN (expr (SYM_COMMA expr)*)? SYM_CLOSE_PAREN ;
molecule ::= atom (SYM_EXP molecule)? ;
doubleNum ::= (SYM_ADD | SYM_SUB)? DOUBLE ;
var_decl ::= KW_VAR id::varproc_id SYM_COLON t::type (SYM_ASS expr)? ;
DOUBLE ::= INT? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* EXPONENT? ;
param_decl_list ::= SYM_OPEN_PAREN (param_and_type (SYM_COMMA param_and_type)*)? SYM_CLOSE_PAREN ;
--------------------tescol::11000.bgf--------------------
DOU ::= INT? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* EXPONENT? ;
parameters ::= (parameter (COMMA parameter)*)? ;
booleanop ::= subtraction (relationships subtraction)? ;
divide ::= negation (DIVISION negation)? ;
negation ::= (ADDITION | SUBTRACTION)? expo ;
expo ::= atom (EXPONENTIATION atom)? ;
runproc ::= conditexpr | (ID | CID LEFTBRACKET (expression (COMMA expression)*)? RIGHTBRACKET) ;
--------------------tescol::11001.bgf--------------------
INT ::= ("+" | "-")? UINT ;
statement ::= SKIP | (LBRACE statement (SEMI statement)* SEMI? RBRACE) | assignment | ifstatement | whilestatement ;
unary_exp ::= MINUS? (num::number) | (var::id) ;
FLOAT ::= INT? "." UINT? EXPONENT? ;
argumentlist ::= (exp::expression (COMMA args::argumentlist)?) | Îµ ;
comparison ::= l::addition_exp (c::conditional r::addition_exp)? ;
mixfix ::= e::conjunction (QUESTION t::mixfix COLON f::mixfix)? ;
parameterlist ::= (name::varid COLON t::type (COMMA params::parameterlist)?) | Îµ ;
--------------------tescol::11010.bgf--------------------
INT ::= ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
condExpr ::= boolExpr (QUESTION condExpr COLON condExpr)? ;
compExpr ::= subExpr (EQUALITY | NOTEQUAL | LESSTHAN | LESSTHANEQUAL | MORETHAN | MORETHANEQUAL subExpr)? ;
DOUBLE ::= ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" | "E" INT)? ;
--------------------tescol::11011.bgf--------------------
INT ::= ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
expr ::= exp_bools (QMARK expr COLON expr)? ;
DOUBLE ::= ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+)? ;
atom ::= INT | DOUBLE | (ids argument_list?) | (LPAR expr RPAR) ;
exp_comp ::= exp_addsub (COND_COMP_GREATE | COND_COMP_GREAT | COND_COMP_LESS | COND_COMP_LESSE | COND_EQUAL | COND_NONEQUAL exp_addsub)? ;
argument_list ::= LPAR (expr (COMMA expr)*)? RPAR ;
param_list ::= param_element? (COMMA param_element)* ;
--------------------tescol::11100.bgf--------------------
INT ::= ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
expression ::= boolexp (QMARK t::mult COLON f::mult)? ;
predicate ::= t::addition (COMPARISON u::addition)? ;
program ::= TROLLEY CONSTID CONTAINS (definition SEMI?)* CHECKOUT statement SEMI? DONE SEMI ;
definition ::= (CONST CONSTID COLON type ASSIGNMENT expression) | (VAR ID COLON type) | (PROC ID LEFTBRACKET parameters? RIGHTBRACKET COLON type ASSIGNMENT statement) ;
DOUBLE ::= INT? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" | "E" INT)? ;
procedurecall ::= ID LEFTBRACKET arguments? RIGHTBRACKET ;
--------------------tescol::11101.bgf--------------------
INTEGER ::= ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
expression ::= (p1::procedureapplication) | (b1::booleanexpression (QUESTION expression COLON expression)?) ;
compexpression ::= ar1::arithexpression (ROP arithexpression)? ;
parameterlist ::= PARENTHESISL (parameter (COMMA parameter)*)? PARENTHESISR ;
DOUBLE ::= INTEGER? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* EXPONENT? ;
--------------------tescol::11110.bgf--------------------
relationalExpression ::= addtExpr (LESS_EQUAL | GREATER_EQUAL | LESS | GREATER addtExpr)? ;
INTEGER ::= ("+" | "-")? "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ;
FLOAT ::= ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" | "E" ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+)? ;
conditionalExpr ::= booleanExpr (QUESTION conditionalExpr COLON conditionalExpr)? ;
condStm ::= IF LPAREN? a::booleanExpr RPAREN? THEN? b::statement (ELSE c::statement)? ;
loopStm ::= WHILE LPAREN? e::booleanExpr RPAREN? DO? s::statement ;
equalityExpression ::= relationalExpression (EQUALITY | NON_EQUALITY relationalExpression)? ;
--------------------tescol::11111.bgf--------------------
INT_NUMBER ::= ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
expression ::= disjunction (MIXFIX expression COLON expression)? ;
DOUBLE_NUMBER ::= (("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+)? "." (("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+)? ("e" | "E" ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+)? ;
proc ::= id LPAREN (term (COMMA term)*)? RPAREN ;
NEWLINE ::= "\r"? "\n" ;
param_list ::= (id COLON type (COMMA id COLON type)*)? ;
--------------------tescol::reference.bgf--------------------
INTEGER ::= ("+" | "-")? DIGIT+ ;
relation ::= a::add (RELOP b::add)? ;
equality ::= a::relation (EQOP b::relation)? ;
expression ::= a::conj (TE b::expression COLON c::expression)? ;
DOUBLE ::= INTEGER? "." DIGIT* ("e" | "E" INTEGER)? ;
--------------------hats::abs.bgf--------------------
IncompleteExp ::= callee::PureExpPrefix b::BANG (method::IDENTIFIER)? ;
 IncompleteExp ::= callee::PureExpPrefix d::DOT (method::IDENTIFIER)? ;
 IncompleteExp ::= NEW (c::Cog)? ;
NewExp ::= NEW (c::Cog)? i::TypeName LPAREN (l::DataExpList)? RPAREN ;
SyncCall ::= callee::PureExpPrefix DOT method::IDENTIFIER LPAREN (params::DataExpList)? RPAREN ;
 SyncCall ::= callee::THIS DOT method::IDENTIFIER LPAREN (params::DataExpList)? RPAREN ;
Fextension ::= f::TYPE_IDENTIFIER LBRACE (g::Group)? acl::AttributeConstraintList RBRACE ;
TypesynDecl ::= (al::AnnotationList)? TYPE lhs::TYPE_IDENTIFIER ASSIGN rhs::Datatypeuse SEMICOLON ;
OoModifier ::= REMOVES CLASS id::TypeName SEMICOLON ;
 OoModifier ::= MODIFIES INTERFACE id::TypeName LBRACE (fragments::InfModifierFragmentList)? RBRACE ;
 OoModifier ::= ADDS ifacedecl::QualifiedInterfaceDecl ;
 OoModifier ::= MODIFIES CLASS id::TypeName (ifadd::ImplementInterfacesAdd)? (ifremove::ImplementInterfacesRemove)? LBRACE (fragments::ModifierFragmentList)? RBRACE ;
 OoModifier ::= ADDS classdecl::QualifiedClassDecl ;
ParamDecl ::= (an::AnnotationList)? t::TypeExp i::IDENTIFIER ;
DataConstructorParams ::= LPAREN (l::ConstructorArgList)? RPAREN ;
MainBlock ::= (al::AnnotationList)? LBRACE (s::StmtList)? RBRACE ;
DeltaParamDecls ::= LPAREN (f::DeltaParamDeclList)? RPAREN ;
Methodsig ::= (al::AnnotationList)? returntype::TypeExp id::IDENTIFIER LPAREN (params::ParamDeclList)? RPAREN ;
OriginalCall ::= ORIGINAL LPAREN (params::DataExpList)? RPAREN ;
 OriginalCall ::= delta::DeltaId DOTORIGINAL LPAREN (params::DataExpList)? RPAREN ;
 OriginalCall ::= CORE DOTORIGINAL LPAREN (params::DataExpList)? RPAREN ;
Block ::= (al::AnnotationList)? b::BlockWithoutAnnotations ;
CaseExp ::= CASE caseterm::DataExp LBRACE (branches::CaseBranchList)? RBRACE ;
Stmt ::= (al::AnnotationList)? s::CompoundStmt ;
 Stmt ::= (al::AnnotationList)? s::StmtWithoutAnnotations SEMICOLON ;
DeltaClause ::= DELTA d::Deltaspec (a::AfterCondition)? (f::FromCondition)? (w::WhenCondition)? ;
QualifiedInterfaceDecl ::= (al::AnnotationList)? INTERFACE id::TypeName (i::ExtendsInterfaces)? LBRACE (l::MethodsigList)? RBRACE ;
QualifiedClassDecl ::= (annotations::AnnotationList)? CLASS id::TypeName (params::ParamDecls)? (i::ImplementInterfaces)? LBRACE (fields::FieldDeclList)? (initBlock::InitBlock)? (methods::MethodList)? RBRACE ;
FnappExp ::= f::Name LPAREN (l::DataExpList)? RPAREN ;
FieldDecl ::= (an::AnnotationList)? PORT t::TypeExp i::IDENTIFIER ;
 FieldDecl ::= (an::AnnotationList)? t::TypeExp i::IDENTIFIER ;
 FieldDecl ::= (an::AnnotationList)? PORT t::TypeExp i::IDENTIFIER ASSIGN e::DataExp ;
 FieldDecl ::= (an::AnnotationList)? t::TypeExp i::IDENTIFIER ASSIGN e::DataExp ;
InterfaceDecl ::= (al::AnnotationList)? INTERFACE id::TYPE_IDENTIFIER (i::ExtendsInterfaces)? LBRACE (l::MethodsigList)? RBRACE ;
ConstructorExp ::= [f] TypeName ;
 ConstructorExp ::= f::TypeName LPAREN (l::DataExpList)? RPAREN ;
VarOrFieldRef ::= callee::THIS b::BANG (method::IDENTIFIER)? ;
 VarOrFieldRef ::= [n] IDENTIFIER ;
 VarOrFieldRef ::= callee::THIS d::DOT ;
 VarOrFieldRef ::= THIS DOT id::IDENTIFIER ;
ClassDecl ::= (annotations::AnnotationList)? CLASS id::TYPE_IDENTIFIER (params::ParamDecls)? (i::ImplementInterfaces)? LBRACE (fields::FieldDeclList)? (initBlock::InitBlock)? (methods::MethodList)? RBRACE ;
DeltaDecl ::= DELTA id::TYPE_IDENTIFIER (params::DeltaParamDecls)? SEMICOLON (uses::DeltaAccessList)? (modifiers::ModuleModifierList)? ;
FeatureDecl ::= [f] TYPE_IDENTIFIER ;
 FeatureDecl ::= f::TYPE_IDENTIFIER LBRACE (g::Group)? acl::AttributeConstraintList RBRACE ;
ParamDecls ::= LPAREN (f::ParamDeclList)? RPAREN ;
Cog ::= (annotations::AnnotationList)? COG ;
AsyncCall ::= callee::PureExpPrefix BANG method::IDENTIFIER LPAREN (params::DataExpList)? RPAREN ;
 AsyncCall ::= callee::THIS BANG method::IDENTIFIER LPAREN (params::DataExpList)? RPAREN ;
ModuleDecl ::= n::ModuleNameDecl (el::ExportList)? (il::ImportList)? (dl::DeclList)? (b::MainBlock)? ;
PatternParams ::= LPAREN (l::PatternList)? RPAREN ;
ConstructorPattern ::= co::TypeName (p::PatternParams)? ;
Feature ::= id::TYPE_IDENTIFIER PRIME (attrs::AttrAssignments)? ;
 Feature ::= id::TYPE_IDENTIFIER (attrs::AttrAssignments)? ;
Deltaspec ::= id::TYPE_IDENTIFIER (params::Deltaparams)? ;
DataConstructor ::= co::TYPE_IDENTIFIER (p::DataConstructorParams)? ;
Product ::= PRODUCT id::TYPE_IDENTIFIER LPAREN (l::FeatureList)? RPAREN SEMICOLON ;
 Product ::= PRODUCT id::TYPE_IDENTIFIER LPAREN (l::FeatureList)? RPAREN LBRACE al::AdaptationList RBRACE ;
DatatypeDecl ::= (al::AnnotationList)? DATA id::TYPE_IDENTIFIER (p::DatatypeparamListDecl)? SEMICOLON ;
 DatatypeDecl ::= (al::AnnotationList)? DATA id::TYPE_IDENTIFIER (p::DatatypeparamListDecl)? ASSIGN l::DataConstructorList SEMICOLON ;
ListLiteralExp ::= LBRACKET (l::DataExpList)? RBRACKET ;
BlockWithoutAnnotations ::= LBRACE (s::StmtList)? RBRACE ;
CompilationUnit ::= (m::ModuleDeclList)? (d::DeltaDeclList)? (pl::ProductLine)? (p::ProductList)? fm::Featuremodeldecl ;
Datatypeuse ::= (l::AnnotationList)? n::TypeName LT p::DatatypeuseList GT ;
 Datatypeuse ::= (l::AnnotationList)? n::TypeName ;
FunctionDecl ::= (al::AnnotationList)? DEF t::Datatypeuse fn::IDENTIFIER p::DatatypeparamListDecl LPAREN (l::ParamDeclList)? RPAREN ASSIGN ef::ExpFunctionDef SEMICOLON ;
 FunctionDecl ::= (al::AnnotationList)? DEF t::Datatypeuse fn::IDENTIFIER LPAREN (l::ParamDeclList)? RPAREN ASSIGN ef::ExpFunctionDef SEMICOLON ;
 FunctionDecl ::= (al::AnnotationList)? DEF t::Datatypeuse fn::IDENTIFIER LPAREN (l::ParamDeclList)? RPAREN ASSIGN BUILTIN SEMICOLON ;
 FunctionDecl ::= (al::AnnotationList)? DEF t::Datatypeuse fn::IDENTIFIER p::DatatypeparamListDecl LPAREN (l::ParamDeclList)? RPAREN ASSIGN BUILTIN SEMICOLON ;
--------------------slps::bgf-1.0-xsd.bgf--------------------
production ::= (label::label)? nonterminal::nonterminal expression ;
grammar ::= (name::string())? (root::nonterminal)* production* ;
--------------------slps::bgf-2.0-xsd.bgf--------------------
production ::= (label::label)? nonterminal::nonterminal expression ;
--------------------slps::bgf-2.1-xsd.bgf--------------------
production ::= (label::label)? nonterminal::nonterminal expression ;
--------------------slps::btf.bgf--------------------
tree ::= (epsilon::Îµ) | (any::Î±) | (terminal::terminal) | (nonterminal::(production tree)) | (selectable::(selector::selector tree)) | (value::((int::integer()) | (string::string()))) | (sequence::(tree*)) | (choice::(expression tree)) | (optional::(tree?)) | (plus::(tree+)) | (star::(tree*)) ;
production ::= (label::label)? nonterminal::nonterminal expression ;
--------------------slps::bgf-3.0-xsd.bgf--------------------
production ::= (label::label)? nonterminal::nonterminal expression ;
--------------------slps::bgf-3.1-xsd.bgf--------------------
production ::= (label::label)? nonterminal::nonterminal expression ;
--------------------slps::bgf-4.0-xsd.bgf--------------------
production ::= (label::label)? nonterminal::nonterminal expression ;
--------------------slps::bgf-5.2-xsd.bgf--------------------
production ::= (label::label)? nonterminal::nonterminal expression ;
--------------------slps::bgf-v1.0-xsd.bgf--------------------
production ::= (label::label)? nonterminal::nonterminal expression ;
grammar ::= (name::string())? (root::nonterminal)* production* ;
--------------------slps::bgf-v2.0-xsd.bgf--------------------
production ::= (label::label)? nonterminal::nonterminal expression ;
--------------------slps::bgf-v2.1-xsd.bgf--------------------
production ::= (label::label)? nonterminal::nonterminal expression ;
--------------------slps::bgf-v3.0-xsd.bgf--------------------
production ::= (label::label)? nonterminal::nonterminal expression ;
--------------------slps::bgf-v3.1-xsd.bgf--------------------
production ::= (label::label)? nonterminal::nonterminal expression ;
--------------------slps::bgf-v4.0-xsd.bgf--------------------
production ::= (label::label)? nonterminal::nonterminal expression ;
--------------------slps::bgf-v5.2-xsd.bgf--------------------
production ::= (label::label)? nonterminal::nonterminal expression ;
--------------------slps::cbgf-xsd.bgf--------------------
rename ::= (label::(from::label to::label)) | (nonterminal::(from::nonterminal to::nonterminal)) | (selector::((in::label)? from::selector to::selector)) | (terminal::(from::terminal to::terminal)) ;
narrow ::= expression expression (in::scope)? ;
widen ::= expression expression (in::scope)? ;
replace-replace ::= expression expression (in::scope)? tag::string() ;
splitT ::= terminal::terminal into::((terminal::terminal)+) (in::scope)? ;
unfold ::= nonterminal::nonterminal (in::scope)? ;
production ::= (label::label)? nonterminal::nonterminal expression ;
 production ::= (label::label)? nonterminal::nonterminal expression ;
replace ::= expression expression (in::scope)? tag::string() ;
unfold-fold ::= nonterminal::nonterminal (in::scope)? ;
factor ::= expression expression (in::scope)? ;
rename-rename ::= (label::(from::label to::label)) | (nonterminal::(from::nonterminal to::nonterminal)) | (selector::((in::label)? from::selector to::selector)) | (terminal::(from::terminal to::terminal)) ;
widen-narrow ::= expression expression (in::scope)? ;
factor-factor ::= expression expression (in::scope)? ;
inline-extract ::= production (in::scope)? ;
massage ::= expression expression (in::scope)? ;
massage-massage ::= expression expression (in::scope)? ;
narrow-widen ::= expression expression (in::scope)? ;
fold-unfold ::= nonterminal::nonterminal (in::scope)? ;
extract-inline ::= production (in::scope)? ;
extract ::= production (in::scope)? ;
fold ::= nonterminal::nonterminal (in::scope)? ;
--------------------slps::ldf-Readable.bgf--------------------
named-link ::= title::string() version-or-edition? (uri::anyURI)? ;
production ::= (label::label)? nonterminal::nonterminal expression ;
part-metadata ::= (id::ID)? part-role (title::string())? (author::person)* ;
subsection-metadata ::= (id::ID)? subsection-role type? (title::string())? (author::person)* ;
section-metadata ::= (id::ID)? section-role type? (title::string())? (author::person)* ;
person ::= name::string() (affiliation::string())? (email::string())? ;
document-metadata ::= body? (number::string())? (author::person)* topic::string() status version-or-edition (previous::named-link)* date::timestamp ;
--------------------slps::ldf-v1.0-xsd.bgf--------------------
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? ;
contentType ::= ((text::mixedType) | (grammar::(Î± language::string() (version::string())?)) | (sample::sampleType) | (runnable::runnableType))* (section::sectionType)* ;
--------------------slps::ldf-v10.0-xsd.bgf--------------------
document ::= titlePage::titlePage (placeholder::generated)* frontMatter::(front-simple-section+) (lists::(front-list+))? (lexicalPart::(LexicalSection+))? (core::StructuredSection)+ (annex::StructuredSection)* ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
ListOfInternalLinks ::= (link::(text::string() (linktext::string())? reference::string()))+ ;
StructuredSection ::= title::string() (author::string())* StructuredSectionElement+ (id::string())? ;
SimpleSection ::= (title::string())? (author::string())* content::SimpleText (id::string())? ;
ListOfTerms ::= (title::string())? (author::string())* (term::(name::string() definition::SimpleText))+ (id::string())? ;
--------------------slps::ldf-v11.0-xsd.bgf--------------------
document ::= titlePage::titlePage (placeholder::generated)* frontMatter::(front-simple-section+) (lists::(front-list+))? (lexicalPart::(LexicalSection+))? (core::StructuredSection)+ (annex::StructuredSection)* ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
ListOfInternalLinks ::= (link::(text::string() (linktext::string())? reference::string()))+ ;
SimpleFigure ::= caption::string() type::string() file::string() (id::string())? ;
StructuredSection ::= title::string() (author::string())* StructuredSectionElement+ (id::string())? ;
SimpleSection ::= (title::string())? (author::string())* content::SimpleText (id::string())? ;
ListOfTerms ::= (title::string())? (author::string())* (term::(name::string() definition::SimpleText))+ (id::string())? ;
--------------------slps::ldf-v11.1-xsd.bgf--------------------
document ::= titlePage::titlePage (placeholder::generated)* frontMatter::(frontSection+) (lists::(frontList+))? (lexicalPart::(lexicalSection+))? (core::structuredSection)+ (annex::structuredSection)* ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
listOfInternalLinks ::= (link::(text::string() (linkText::string())? reference::string()))+ ;
simpleFigure ::= caption::string() type::string() file::string() (id::string())? ;
structuredSection ::= title::string() (author::string())* structuredSectionElement+ (id::string())? ;
simpleSection ::= (title::string())? (author::string())* content::simpleText (id::string())? ;
listOfTerms ::= (title::string())? (author::string())* (term::(name::string() definition::simpleText))+ (id::string())? ;
--------------------slps::ldf-v11.2-xsd.bgf--------------------
document ::= titlePage::titlePage (placeholder::generated)* frontMatter::(frontSection+) (lists::(frontList+))? (lexicalPart::(lexicalSection+))? (core::structuredSection)+ (annex::structuredSection)* ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
listOfInternalLinks ::= (link::(text::string() (linkText::string())? reference::string()))+ ;
simpleFigure ::= caption::string() type::string() file::string() (id::string())? ;
structuredSection ::= title::string() (author::string())* structuredSectionElement+ (id::string())? ;
simpleSection ::= (title::string())? (author::string())* content::simpleText (id::string())? ;
listOfTerms ::= (title::string())? (author::string())* (term::(name::string() definition::simpleText))+ (id::string())? ;
--------------------slps::ldf-v12.0-xsd.bgf--------------------
document ::= titlePage::titlePage (placeholder::generated)* frontMatter::(frontSection+) (lists::(frontList+))? (lexicalPart::(lexicalSection+))? (core::structuredSection)+ (annex::structuredSection)* ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
listOfInternalLinks ::= (link::(text::string() (linkText::string())? reference::string()))+ ;
simpleFigure ::= caption::string() type::string() file::string() (id::string())? ;
structuredSection ::= title::string() (author::string())* structuredSectionElement+ (id::string())? ;
simpleSection ::= (title::string())? (author::string())* content::simpleText (id::string())? ;
listOfTerms ::= (title::string())? (author::string())* (term::(name::string() definition::simpleText))+ (id::string())? ;
--------------------slps::ldf-v13.0-xsd.bgf--------------------
document ::= titlePage::titlePage (placeholder::generated)* frontMatter::(frontSection+) (lists::(frontList+))? (lexicalPart::(lexicalSection+))? (core::structuredSection)+ (annex::structuredSection)* ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
listOfInternalLinks ::= (link::(text::string() (linkText::string())? reference::string()))+ ;
simpleFigure ::= caption::string() type::string() file::string() (id::string())? ;
structuredSection ::= title::string() (author::string())* structuredSectionElement+ (id::string())? ;
simpleSection ::= (title::string())? (author::string())* content::simpleText (id::string())? ;
listOfTerms ::= (title::string())? (author::string())* (term::(name::string() definition::simpleText))+ (id::string())? ;
--------------------slps::ldf-v13.1-xsd.bgf--------------------
document ::= titlePage::titlePage (placeholder::generated)* frontMatter::(frontSection+) (lists::(frontList+))? (lexicalPart::(lexicalSection+))? (core::structuredSection)+ (annex::structuredSection)* ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
listOfInternalLinks ::= (link::(text::string() (linkText::string())? reference::string()))+ ;
simpleFigure ::= caption::string() type::string() file::string() (id::string())? ;
structuredSection ::= title::string() (author::string())* structuredSectionElement+ (id::string())? ;
simpleSection ::= (title::string())? (author::string())* content::simpleText (id::string())? ;
listOfTerms ::= (title::string())? (author::string())* (term::(name::string() definition::simpleText))+ (id::string())? ;
--------------------slps::ldf-v14.0-xsd.bgf--------------------
document ::= titlePage::titlePage (placeholder::generated)* frontMatter::(frontSection+) (lists::(frontList+))? (lexicalPart::(lexicalSection+))? (core::structuredSection)+ (annex::structuredSection)* ;
link ::= (text::string())? reference::string() ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
simpleFigure ::= caption::string() type::string() file::string() (id::string())? ;
structuredSection ::= title::string() (author::string())* structuredSectionElement+ (id::string())? ;
simpleSection ::= (title::string())? (author::string())* content::simpleText (id::string())? ;
listOfTerms ::= (title::string())? (author::string())* (term::(name::string() definition::simpleText))+ (id::string())? ;
--------------------slps::ldf-v15.0-xsd.bgf--------------------
document ::= titlePage::titlePage (placeholder::generated)* frontMatter::(frontSection+) (lists::(frontList+))? (lexicalPart::(lexicalSection+))? (core::structuredSection)+ (annex::structuredSection)* ;
link ::= (text::string())? reference::string() ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
simpleFigure ::= caption::string() type::string() file::string() (id::string())? ;
structuredSection ::= title::string() (author::string())* structuredSectionElement+ (id::string())? ;
simpleSection ::= (title::string())? (author::string())* content::simpleText (id::string())? ;
listOfTerms ::= (title::string())? (author::string())* (term::(name::string() definition::simpleText))+ (id::string())? ;
--------------------slps::ldf-v15.1-xsd.bgf--------------------
document ::= titlePage::titlePage (placeholder::generated)* frontMatter::(frontSection+) (lists::(frontList+))? (lexicalPart::(lexicalSection+))? (core::structuredSection)+ (annex::structuredSection)* ;
link ::= (text::string())? reference::string() ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
simpleFigure ::= caption::string() type::string() file::string() (id::string())? ;
structuredSection ::= title::string() (author::string())* structuredSectionElement+ (id::string())? ;
simpleSection ::= (title::string())? (author::string())* content::simpleText (id::string())? ;
listOfTerms ::= (title::string())? (author::string())* (term::(name::string() definition::simpleText))+ (id::string())? ;
--------------------slps::ldf-v16.0-xsd.bgf--------------------
document ::= titlePage::titlePage frontMatter::(topSection*) (lists::(frontList+))? (lexicalPart::(lexicalSection+))? ((core::structuredSection)+) | ((part::((core::structuredSection)+))+) (backMatter::(topSection*))? (annex::structuredSection)* ;
link ::= (text::string())? reference::string() ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
simpleFigure ::= caption::string() type::string() file::string() (id::string())? ;
structuredSection ::= title::string() (author::string())* structuredSectionElement+ (id::string())? ;
simpleSection ::= (title::string())? (author::string())* content::simpleText (id::string())? ;
listOfTerms ::= (title::string())? (author::string())* (term::(name::string() definition::simpleText))+ (id::string())? ;
--------------------slps::ldf-v17.0-xsd.bgf--------------------
document ::= titlePage::titlePage frontMatter::(topSection*) (lists::(frontList+))? (lexicalPart::(lexicalSection+))? ((core::structuredSection)+) | ((part::((core::structuredSection)+))+) (backMatter::(topSection*))? (annex::structuredSection)* ;
link ::= (text::string())? reference::string() ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
simpleFigure ::= (shortcaption::string())? caption::string() (source::(type::figureType (localfile::string()) | (url::string())))+ (id::string())? ;
structuredSection ::= title::string() (author::string())* structuredSectionElement+ (id::string())? ;
simpleSection ::= (title::string())? (author::string())* content::simpleText (id::string())? ;
listOfTerms ::= (title::string())? (author::string())* (term::(name::string() definition::simpleText))+ (id::string())? ;
--------------------slps::ldf-v18.0-xsd.bgf--------------------
document ::= titlePage::titlePage frontMatter::(topSection*) (lists::(frontList+))? (lexicalPart::(lexicalSection+))? ((core::structuredSection)+) | ((part::((core::structuredSection)+))+) (backMatter::(topSection*))? (annex::structuredSection)* ;
link ::= (text::string())? reference::string() ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
simpleFigure ::= (shortcaption::string())? caption::string() (source::(type::figureType (localfile::string()) | (url::string())))+ (id::string())? ;
structuredSection ::= title::string() (author::string())* structuredSectionElement+ (id::string())? ;
simpleSection ::= (title::string())? (author::string())* content::simpleText (id::string())? ;
listOfTerms ::= (title::string())? (author::string())* (term::(name::string() definition::simpleText))+ (id::string())? ;
--------------------slps::ldf-v18.1-xsd.bgf--------------------
document ::= titlePage::titlePage frontMatter::(topSection*) (lists::(frontList+))? (lexicalPart::(lexicalSection+))? ((core::structuredSection)+) | ((part::((core::structuredSection)+))+) (backMatter::(topSection*))? (annex::structuredSection)* ;
link ::= (text::string())? (reference::string()) | (external::string()) ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
simpleFigure ::= (shortcaption::string())? caption::string() (source::(type::figureType (localfile::string()) | (url::string())))+ (id::string())? ;
structuredSection ::= title::string() (author::string())* structuredSectionElement+ (id::string())? ;
simpleSection ::= (title::string())? (author::string())* content::simpleText (id::string())? ;
listOfTerms ::= (title::string())? (author::string())* (term::(name::string() definition::simpleText))+ (id::string())? ;
--------------------slps::ldf-v19.0-xsd.bgf--------------------
part-metainfo ::= part-role::part-role (title::string())? (author::string())* (id::string())? ;
figure-metainfo ::= (short-caption::string())? caption::string() (id::string())? ;
link ::= (text::string())? (reference::string()) | (external::string()) ;
list-section-metainfo ::= list-section-role::list-section-role (title::string())? (author::string())* (id::string())? ;
structured-section-metainfo ::= title::string() (author::string())* (id::string())? ;
previous ::= title::string() (version::string()) | (edition::string()) (uri::string())? ;
simple-section-metainfo ::= simple-section-role::simple-section-role (title::string())? (author::string())* (id::string())? ;
lexical-section-metainfo ::= lexical-section-role::lexical-section-role (title::string())? (author::string())* (id::string())? ;
--------------------slps::ldf-v2.0-xsd.bgf--------------------
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? ;
contentType ::= ((text::mixedType) | (grammar::(Î± language::string() (version::string())?)) | (sample::sampleType) | (runnable::runnableType))* (section::sectionType)* ;
--------------------slps::ldf-v2.1-xsd.bgf--------------------
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
contentType ::= ((text::mixedType) | (grammar::(Î± language::string() (version::string())?)) | (sample::sampleType) | (runnable::runnableType))* (section::sectionType)* ;
--------------------slps::ldf-v20.0-xsd.bgf--------------------
link ::= (text::string())? (reference::string()) | (external::string()) ;
structured-section-element ::= (subtopic::structured-section) | (references::list) | placeholder | (value::(key::string() data::string())) | ((normative-role | informative-role)? simple-section) ;
previous ::= title::string() (version::string()) | (edition::string()) (uri::string())? ;
title-page ::= (body number::string())? metainfo status (version::string()) | (edition::string()) previous* date::string() ;
metainfo ::= (id::string())? (title::string())? (author::string())* ;
--------------------slps::ldf-v20.1-xsd.bgf--------------------
link ::= (text::string())? (reference::string()) | (external::string()) ;
structured-section-element ::= (subtopic::structured-section) | (references::list) | placeholder | (value::(key::string() data::string())) | ((normative-role | informative-role)? simple-section) ;
previous ::= title::string() ((version::string()) | (edition::string()))? (uri::string())? ;
title-page ::= (body number::string())? metainfo status (version::string()) | (edition::string()) previous* date::string() ;
metainfo ::= (id::string())? (title::string())? (author::string())* ;
--------------------slps::ldf-v21.0-xsd.bgf--------------------
link ::= (text::string())? (reference::string()) | (external::string()) ;
structured-section-element ::= (subtopic::structured-section) | (references::list) | placeholder | (value::(key::string() data::string())) | ((normative-role | informative-role)? simple-section) ;
previous ::= title::string() ((version::string()) | (edition::string()))? (uri::string())? ;
title-page ::= (body number::string())? metainfo status (version::string()) | (edition::string()) previous* date::string() ;
metainfo ::= (id::string())? (title::string())? (author::string())* ;
--------------------slps::ldf-v21.1-xsd.bgf--------------------
link ::= (text::string())? (reference::string()) | (external::string()) ;
structured-section-element ::= (subtopic::structured-section) | (references::list) | placeholder | (value::(key::string() data::string())) | ((normative-role | informative-role)? simple-section) ;
previous ::= title::string() ((version::string()) | (edition::string()))? (uri::string())? ;
title-page ::= (body number::string())? metainfo status (version::string()) | (edition::string()) previous* date::string() ;
metainfo ::= (id::string())? (title::string())? (author::string())* ;
--------------------slps::ldf-v22.0-xsd.bgf--------------------
document ::= metadata::((body::((ansi::Îµ) | (ecma::Îµ) | (ieee::Îµ) | (iso::Îµ) | (iso/iet::Îµ) | (itu::Îµ) | (iec::Îµ) | (ietf::Îµ) | (oasis::Îµ) | (omg::Îµ) | (wsa::Îµ) | (w3c::Îµ)))? (number::string())? (author::person)* topic::string() status::((unknown::Îµ) | (draft::Îµ) | (candidate::Îµ) | (proposed::Îµ) | (approved::Îµ) | (revised::Îµ) | (obsolete::Îµ) | (withdrawn::Îµ) | (collection::Îµ) | (trial::Îµ) | (errata::Îµ) | (report::Îµ)) (version::string()) | (edition::string()) (previous::title-ve-uri)* date::string()) (part::part-type)+ ;
link ::= (text::string())? (nonterminal::string()) | (reference::string()) | (external::string()) ;
structured-section-element ::= (subtopic::structured-section) | (references::list-type) | placeholder | (value::(key::string() data::string())) | ((normative-role | informative-role)? simple-section) ;
person ::= name::string() (affiliation::string())? (email::string())? ;
part-type ::= metadata::((id::string())? role::((front-matter::Îµ) | (core-part::Îµ) | (back-matter::Îµ) | (annex::Îµ)) (title::string())? (author::person)*) (section::section-type)+ ;
metainfo ::= (id::string())? (title::string())? (author::string())* ;
title-ve-uri ::= title::string() ((version::string()) | (edition::string()))? (uri::string())? ;
subsection-type ::= metadata::((id::string())? role::((synopsis::Îµ) | (description::Îµ) | (syntax::Îµ) | (constraints::Îµ) | (relationship::Îµ) | (semantics::Îµ) | (default::Îµ) | (rationale::Îµ) | (example::Îµ) | (update::Îµ) | (subtopic::Îµ) | (section::Îµ)) (type::((normative::Îµ) | (informative::Îµ)))? (title::string())? (author::person)*) (content::(content-content+)) | (placeholder::Î±) | ((subsection::subsection-type)+) ;
section-type ::= metadata::((id::string())? role::((abstract::Îµ) | (conformance::Îµ) | (compatibility::Îµ) | (design-goals::Îµ) | (document-structure::Îµ) | (foreword::Îµ) | (references::Îµ) | (notation::Îµ) | (scope::Îµ) | (what-is-new::Îµ) | (index::Îµ) | (full-grammar::Îµ) | (list-of-tables::Îµ) | (list-of-authors::Îµ) | (list-of-contents::Îµ) | (list-of-references::Îµ) | (top-section::Îµ) | (lexical-section::Îµ) | (description::Îµ) | (syntax::Îµ) | (example::Îµ) | (subsection::Îµ)) (type::((normative::Îµ) | (informative::Îµ)))? (title::string())? (author::person)*) (content::(content-content+)) | (placeholder::Î±) | ((subsection::subsection-type)+) ;
--------------------slps::ldf-v23.0-xsd.bgf--------------------
named-link ::= title::string() ((version::string()) | (edition::string()))? (uri::string())? ;
document ::= metadata::((body::((ansi::Îµ) | (ecma::Îµ) | (ieee::Îµ) | (iso::Îµ) | (iso/iet::Îµ) | (itu::Îµ) | (iec::Îµ) | (ietf::Îµ) | (oasis::Îµ) | (omg::Îµ) | (wsa::Îµ) | (w3c::Îµ)))? (number::string())? (author::person)* topic::string() status::((unknown::Îµ) | (draft::Îµ) | (candidate::Îµ) | (proposed::Îµ) | (approved::Îµ) | (revised::Îµ) | (obsolete::Îµ) | (withdrawn::Îµ) | (collection::Îµ) | (trial::Îµ) | (errata::Îµ) | (report::Îµ)) (version::string()) | (edition::string()) (previous::named-link)* date::string()) (part::part-type)+ ;
link ::= (text::string())? (nonterminal::string()) | (reference::string()) | (external::string()) ;
structured-section-element ::= (subtopic::structured-section) | (references::list-type) | placeholder | (value::(key::string() data::string())) | ((normative-role | informative-role)? simple-section) ;
person ::= name::string() (affiliation::string())? (email::string())? ;
part-type ::= metadata::((id::string())? role::((front-matter::Îµ) | (core-part::Îµ) | (back-matter::Îµ) | (annex::Îµ)) (title::string())? (author::person)*) (section::section-type)+ ;
metainfo ::= (id::string())? (title::string())? (author::string())* ;
subsection-type ::= metadata::((id::string())? role::((synopsis::Îµ) | (description::Îµ) | (syntax::Îµ) | (constraints::Îµ) | (relationship::Îµ) | (semantics::Îµ) | (default::Îµ) | (rationale::Îµ) | (example::Îµ) | (update::Îµ) | (subtopic::Îµ) | (section::Îµ)) (type::((normative::Îµ) | (informative::Îµ)))? (title::string())? (author::person)*) (content::(content-content+)) | (placeholder::Î±) | ((subsection::subsection-type)+) ;
section-type ::= metadata::((id::string())? role::((abstract::Îµ) | (conformance::Îµ) | (compatibility::Îµ) | (design-goals::Îµ) | (document-structure::Îµ) | (foreword::Îµ) | (references::Îµ) | (notation::Îµ) | (scope::Îµ) | (what-is-new::Îµ) | (index::Îµ) | (full-grammar::Îµ) | (list-of-tables::Îµ) | (list-of-authors::Îµ) | (list-of-contents::Îµ) | (list-of-references::Îµ) | (top-section::Îµ) | (lexical-section::Îµ)) (type::((normative::Îµ) | (informative::Îµ)))? (title::string())? (author::person)*) (content::(content-content+)) | (placeholder::Î±) | ((subsection::subsection-type)+) ;
--------------------slps::ldf-v3.0-xsd.bgf--------------------
document ::= title::title (placeholder::generated)* frontMatter::frontMatter (languageOverview::ListOfTerms)? (lexicalSection::LexicalSection)+ top-section+ (annex::TopSection)* ;
frontMatter ::= foreword::SimpleText designGoals::SimpleList top-section+ normativeReferences::SimpleList (definitions::ListOfTerms)? (abbreviations::ListOfTerms)? documentStructure::TopSection whatsnew::SimpleList ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
SimpleSection ::= (id::string())? (title::string())? ((author::string())+)? content::SimpleText ;
LexicalSection ::= id::string() type::lexical title::string() ((author::string())+)? ((placeholder::generated) | normative | informative | production | (relationship::ListOfInternalLinks) | (subtopic::TopSection))+ ;
TopSection ::= id::string() title::string() ((author::string())+)? ((placeholder::generated) | normative | informative | production | (relationship::ListOfInternalLinks) | (subtopic::TopSection))+ ;
--------------------slps::ldf-v4.0-xsd.bgf--------------------
document ::= title::title (placeholder::generated)* frontMatter::frontMatter (languageOverview::ListOfTerms)? lexical+ (core::StructuredSection)+ (annex::StructuredSection)* ;
frontMatter ::= foreword::SimpleText designGoals::SimpleList top-section+ normativeReferences::SimpleList (definitions::ListOfTerms)? (abbreviations::ListOfTerms)? documentStructure::SimpleSection whatsnew::SimpleList ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
StructuredSection ::= id::string() title::string() ((author::string())+)? ((placeholder::generated) | normative | informative | lexical | production | (relationship::ListOfInternalLinks) | (subtopic::StructuredSection))+ ;
SimpleSection ::= (id::string())? (title::string())? ((author::string())+)? content::SimpleText ;
--------------------slps::ldf-v5.0-xsd.bgf--------------------
frontLists ::= (((definitions::ListOfTerms) | (abbreviations::ListOfTerms) | (languageOverview::ListOfTerms))+)? ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
StructuredSection ::= id::string() title::string() ((author::string())+)? ((placeholder::generated) | normative | informative | lexicals | production | (relationship::ListOfInternalLinks) | (subtopic::StructuredSection))+ ;
SimpleSection ::= (id::string())? (title::string())? ((author::string())+)? content::SimpleText ;
ListOfTerms ::= (id::string())? (title::string())? ((author::string())+)? (term::(name::string() definition::SimpleText))+ ;
--------------------slps::ldf-v6.0-xsd.bgf--------------------
frontLists ::= (((definitions::ListOfTerms) | (abbreviations::ListOfTerms) | (languageOverview::ListOfTerms))+)? ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
ListOfInternalLinks ::= (link::(text::string() (linktext::string())? reference::string()))+ ;
StructuredSection ::= (id::string())? title::string() ((author::string())+)? ((placeholder::generated) | normative | informative | production | (relationship::ListOfInternalLinks) | (subtopic::StructuredSection))+ ;
SimpleSection ::= (id::string())? (title::string())? ((author::string())+)? content::SimpleText ;
ListOfTerms ::= (id::string())? (title::string())? ((author::string())+)? (term::(name::string() definition::SimpleText))+ ;
--------------------slps::ldf-v7.0-xsd.bgf--------------------
frontLists ::= (((definitions::ListOfTerms) | (abbreviations::ListOfTerms) | (languageOverview::ListOfTerms))+)? ;
document ::= titlePage::titlePage (placeholder::generated)* frontMatter::frontMatter (lists::frontLists)? (lexicalPart::lexical)? (core::StructuredSection)+ (annex::StructuredSection)* ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
ListOfInternalLinks ::= (link::(text::string() (linktext::string())? reference::string()))+ ;
StructuredSection ::= (id::string())? title::string() ((author::string())+)? ((placeholder::generated) | normative | informative | production | (relationship::ListOfInternalLinks) | (subtopic::StructuredSection))+ ;
SimpleSection ::= (id::string())? (title::string())? ((author::string())+)? content::SimpleText ;
ListOfTerms ::= (id::string())? (title::string())? ((author::string())+)? (term::(name::string() definition::SimpleText))+ ;
--------------------slps::slps-btf.bgf--------------------
tree ::= (epsilon::Îµ) | (any::Î±) | (terminal::terminal) | (nonterminal::(production tree)) | (selectable::(selector::selector tree)) | (value::((int::integer()) | (string::string()))) | (sequence::(tree*)) | (choice::(expression tree)) | (optional::(tree?)) | (plus::(tree+)) | (star::(tree*)) ;
production ::= (label::label)? nonterminal::nonterminal expression ;
--------------------slps::ldf-v7.1-xsd.bgf--------------------
frontLists ::= (((definitions::ListOfTerms) | (abbreviations::ListOfTerms) | (languageOverview::ListOfTerms))+)? ;
document ::= titlePage::titlePage (placeholder::generated)* frontMatter::(front-simple-sections+) (lists::frontLists)? (lexicalPart::lexical)? (core::StructuredSection)+ (annex::StructuredSection)* ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
ListOfInternalLinks ::= (link::(text::string() (linktext::string())? reference::string()))+ ;
StructuredSection ::= (id::string())? title::string() ((author::string())+)? ((placeholder::generated) | normative | informative | production | (relationship::ListOfInternalLinks) | (subtopic::StructuredSection))+ ;
SimpleSection ::= (id::string())? (title::string())? ((author::string())+)? content::SimpleText ;
ListOfTerms ::= (id::string())? (title::string())? ((author::string())+)? (term::(name::string() definition::SimpleText))+ ;
--------------------slps::ldf-v8.0-xsd.bgf--------------------
document ::= titlePage::titlePage (placeholder::generated)* frontMatter::(front-simple-section+) (lists::(front-list+))? (lexicalPart::(lexical+))? (core::StructuredSection)+ (annex::StructuredSection)* ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
ListOfInternalLinks ::= (link::(text::string() (linktext::string())? reference::string()))+ ;
StructuredSection ::= (id::string())? title::string() ((author::string())+)? ((placeholder::generated) | normative | informative | production | (relationship::ListOfInternalLinks) | (subtopic::StructuredSection))+ ;
SimpleSection ::= (id::string())? (title::string())? ((author::string())+)? content::SimpleText ;
ListOfTerms ::= (id::string())? (title::string())? ((author::string())+)? (term::(name::string() definition::SimpleText))+ ;
--------------------slps::ldf-v8.1-xsd.bgf--------------------
document ::= titlePage::titlePage (placeholder::generated)* frontMatter::(front-simple-section+) (lists::(front-list+))? (lexicalPart::(lexical+))? (core::StructuredSection)+ (annex::StructuredSection)* ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
ListOfInternalLinks ::= (link::(text::string() (linktext::string())? reference::string()))+ ;
StructuredSection ::= (id::string())? title::string() ((author::string())+)? ((placeholder::generated) | normative | informative | production | (relationship::ListOfInternalLinks) | (subtopic::StructuredSection))+ ;
SimpleSection ::= (id::string())? (title::string())? ((author::string())+)? content::SimpleText ;
ListOfTerms ::= (id::string())? (title::string())? ((author::string())+)? (term::(name::string() definition::SimpleText))+ ;
--------------------slps::ldf-v9.0-xsd.bgf--------------------
document ::= titlePage::titlePage (placeholder::generated)* frontMatter::(front-simple-section+) (lists::(front-list+))? (lexicalPart::(lexical+))? (core::StructuredSection)+ (annex::StructuredSection)* ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
ListOfInternalLinks ::= (link::(text::string() (linktext::string())? reference::string()))+ ;
StructuredSection ::= (id::string())? title::string() ((author::string())+)? ((placeholder::generated) | normative | informative | production | (relationship::ListOfInternalLinks) | (subtopic::StructuredSection))+ ;
SimpleSection ::= (id::string())? (title::string())? ((author::string())+)? content::SimpleText ;
ListOfTerms ::= (id::string())? (title::string())? ((author::string())+)? (term::(name::string() definition::SimpleText))+ ;
--------------------slps::ldf-v9.1-xsd.bgf--------------------
document ::= titlePage::titlePage (placeholder::generated)* frontMatter::(front-simple-section+) (lists::(front-list+))? (lexicalPart::(lexical+))? (core::StructuredSection)+ (annex::StructuredSection)* ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
ListOfInternalLinks ::= (link::(text::string() (linktext::string())? reference::string()))+ ;
StructuredSection ::= (id::string())? title::string() ((author::string())+)? ((placeholder::generated) | normative | informative | production | (relationship::ListOfInternalLinks) | (subtopic::StructuredSection))+ ;
SimpleSection ::= (id::string())? (title::string())? ((author::string())+)? content::SimpleText ;
ListOfTerms ::= (id::string())? (title::string())? ((author::string())+)? (term::(name::string() definition::SimpleText))+ ;
--------------------slps::slps-cbgf-xsd.bgf--------------------
rename ::= (label::(from::label to::label)) | (nonterminal::(from::nonterminal to::nonterminal)) | (selector::((in::label)? from::selector to::selector)) | (terminal::(from::terminal to::terminal)) ;
narrow ::= expression expression (in::scope)? ;
widen ::= expression expression (in::scope)? ;
replace-replace ::= expression expression (in::scope)? tag::string() ;
splitT ::= terminal::terminal into::((terminal::terminal)+) (in::scope)? ;
unfold ::= nonterminal::nonterminal (in::scope)? ;
production ::= (label::label)? nonterminal::nonterminal expression ;
 production ::= (label::label)? nonterminal::nonterminal expression ;
replace ::= expression expression (in::scope)? tag::string() ;
unfold-fold ::= nonterminal::nonterminal (in::scope)? ;
factor ::= expression expression (in::scope)? ;
rename-rename ::= (label::(from::label to::label)) | (nonterminal::(from::nonterminal to::nonterminal)) | (selector::((in::label)? from::selector to::selector)) | (terminal::(from::terminal to::terminal)) ;
widen-narrow ::= expression expression (in::scope)? ;
factor-factor ::= expression expression (in::scope)? ;
inline-extract ::= production (in::scope)? ;
massage ::= expression expression (in::scope)? ;
massage-massage ::= expression expression (in::scope)? ;
narrow-widen ::= expression expression (in::scope)? ;
fold-unfold ::= nonterminal::nonterminal (in::scope)? ;
extract-inline ::= production (in::scope)? ;
extract ::= production (in::scope)? ;
fold ::= nonterminal::nonterminal (in::scope)? ;
--------------------slps::slps-lcf.bgf--------------------
source ::= name::string() derived? source-grammar source-tree? test-set::(xstring*) ;
tools ::= transformer::tool comparator::tool (validator::tool)? generator* ;
tool ::= grammar::xstring (tree::xstring)? ;
source-grammar ::= extraction::xstring (parsing::xstring)? (evaluation::xstring)? ;
branch ::= input::string() (preparation::phase)? (nominal-matching::phase)? (normalizing::phase)? (structural-matching::phase)? ((extension::phase) | (correction::phase) | (relaxation::phase))* ;
source-tree ::= extraction::xstring (evaluation::xstring)? ;
--------------------slps::slps-xbgf-xsd.bgf--------------------
factor ::= expression expression (in::scope)? ;
rename ::= (label::(from::label to::label)) | (nonterminal::(from::nonterminal to::nonterminal)) | (selector::((in::label)? from::selector to::selector)) | (terminal::(from::terminal to::terminal)) ;
narrow ::= expression expression (in::scope)? ;
widen ::= expression expression (in::scope)? ;
massage ::= expression expression (in::scope)? ;
splitT ::= terminal::terminal into::((terminal::terminal)+) (in::scope)? ;
unfold ::= nonterminal::nonterminal (in::scope)? ;
production ::= (label::label)? nonterminal::nonterminal expression ;
replace ::= expression expression (in::scope)? tag::string() ;
extract ::= production (in::scope)? ;
fold ::= nonterminal::nonterminal (in::scope)? ;
--------------------slps::slps-xldf.bgf--------------------
factor ::= expression expression (in::scope)? ;
importSample ::= target::string() file::string() (prettyprinter::string())? ;
rename ::= (label::(from::label to::label)) | (nonterminal::(from::nonterminal to::nonterminal)) | (selector::((in::label)? from::selector to::selector)) | (terminal::(from::terminal to::terminal)) ;
narrow ::= expression expression (in::scope)? ;
widen ::= expression expression (in::scope)? ;
massage ::= expression expression (in::scope)? ;
splitT ::= terminal::terminal into::((terminal::terminal)+) (in::scope)? ;
unfold ::= nonterminal::nonterminal (in::scope)? ;
production ::= (label::label)? nonterminal::nonterminal expression ;
 production ::= (label::label)? nonterminal::nonterminal expression ;
extractSubsection ::= from::string() content::simpleText title::string() id::string() (to::string())? (role::sectionRole)? ;
replace ::= expression expression (in::scope)? tag::string() ;
extract ::= production (in::scope)? ;
fold ::= nonterminal::nonterminal (in::scope)? ;
removeSection ::= id::string() (from::string())? ;
--------------------slps::xbgf-xsd.bgf--------------------
factor ::= expression expression (in::scope)? ;
rename ::= (label::(from::label to::label)) | (nonterminal::(from::nonterminal to::nonterminal)) | (selector::((in::label)? from::selector to::selector)) | (terminal::(from::terminal to::terminal)) ;
narrow ::= expression expression (in::scope)? ;
widen ::= expression expression (in::scope)? ;
massage ::= expression expression (in::scope)? ;
splitT ::= terminal::terminal into::((terminal::terminal)+) (in::scope)? ;
unfold ::= nonterminal::nonterminal (in::scope)? ;
production ::= (label::label)? nonterminal::nonterminal expression ;
replace ::= expression expression (in::scope)? tag::string() ;
extract ::= production (in::scope)? ;
fold ::= nonterminal::nonterminal (in::scope)? ;
--------------------pico::sdf.bgf--------------------
STATEMENT ::= (PICO-ID ":=" EXP) | ("if" EXP "then" (STATEMENT (";" STATEMENT)*)? "else" (STATEMENT (";" STATEMENT)*)? "fi") | ("while" EXP "do" (STATEMENT (";" STATEMENT)*)? "od") ;
DECLS ::= "declare" (ID-TYPE ("," ID-TYPE)*)? ";" ;
PROGRAM ::= "begin" DECLS (STATEMENT (";" STATEMENT)*)? "end" ;
