--------------------ada::kellogg.bgf--------------------
component_items ::= (pragma | comp_decl)+ ;
package_body ::= p::PACKAGE body_is pkg_body_part end_id_opt SEMI ;
prot_op_bodies_opt ::= (entry_body | subprog_decl_or_body | pragma)* ;
derived_or_private_or_record ::= (abstract_opt NEW subtype_ind WITH) | (NEW subtype_ind) | (abstract_tagged_limited_opt PRIVATE | record_definition) ;
private_opt ::= PRIVATE? ;
pragma_args_opt ::= (LPAREN pragma_arg (COMMA pragma_arg)* RPAREN)? ;
discriminant_specifications ::= discriminant_specification (SEMI discriminant_specification)* ;
defining_identifier_list ::= IDENTIFIER (COMMA IDENTIFIER)* ;
declarative_item ::= (pkg::PACKAGE (body_is separate | (pkg_body_part end_id_opt) SEMI) | (def_id spec_decl_part)) | (tsk::TASK (body_is separate | body_part SEMI) | task_type_or_single_decl) | (pro::PROTECTED (body_is separate | (prot_op_bodies_opt end_id_opt)) | prot_type_or_single_decl SEMI) | subprog_decl_or_rename_or_inst_or_body | decl_common ;
OR ::= "or" ;
separate_or_abstract ::= SEPARATE | ABSTRACT ;
range_attrib_ref ::= prefix TIC r::RANGE (LPAREN expression RPAREN)? ;
comp_decl ::= def_ids_colon component_subtype_def init_opt SEMI ;
discriminable_type_definition ::= (abstract_opt NEW subtype_ind WITH) | (NEW subtype_ind) | (abstract_tagged_limited_opt PRIVATE) ;
RPAREN ::= ")" ;
FUNCTION ::= "function" ;
OF ::= "of" ;
reverse_opt ::= REVERSE? ;
task_type_or_single_decl ::= (TYPE def_id discrim_part_opt task_definition_opt) | (def_id task_definition_opt) ;
RAISE ::= "raise" ;
enumeration_aggregate ::= parenth_values ;
discriminant_direct_name ::= IDENTIFIER ;
task_definition_opt ::= (IS task_items_opt private_task_items_opt end_id_opt SEMI) | SEMI ;
elsifs_opt ::= (ELSIF cond_clause)* ;
identifier_colon_opt ::= (IDENTIFIER COLON)? ;
pkg_body_part ::= declarative_part block_body_opt ;
except_choice_s ::= exception_choice (PIPE exception_choice)* ;
iteration_scheme_opt ::= ((WHILE condition) | (FOR IDENTIFIER IN reverse_opt discrete_subtype_definition))? ;
basic_declarative_items ::= (basic_decl_item | pragma)+ ;
NE ::= "/=" ;
AND ::= "and" ;
GENERIC ::= "generic" ;
operator_call_tail ::= LPAREN value_s RPAREN ;
private_task_items_opt ::= (PRIVATE pragma* entrydecls_repspecs_opt)? ;
signed_term ::= (p::PLUS term) | (m::MINUS term) | term ;
formal_package_actual_part_opt ::= (LPAREN BOX | defining_identifier_list RPAREN)? ;
PIPE ::= "|" ;
generic_inst ::= NEW compound_name (LPAREN value_s RPAREN)? ;
BOX ::= "<>" ;
if_stmt ::= s::IF cond_clause elsifs_opt else_opt END IF SEMI ;
NuLL ::= "null" ;
CONSTANT ::= "constant" ;
BODY ::= "body" ;
LT_LT ::= "<<" ;
attribute_id ::= RANGE | DIGITS | DELTA | ACCESS | IDENTIFIER ;
PLUS ::= "+" ;
subtype_ind ::= subtype_mark constraint_opt ;
DELTA ::= "delta" ;
definable_operator_symbol ::= op::CHAR_STRING ;
def_id ::= (cn::compound_name) | (n::IDENTIFIER) ;
protected_body ::= p::PROTECTED body_is prot_op_bodies_opt end_id_opt SEMI ;
array_type_definition ::= ARRAY LPAREN index_or_discrete_range_s RPAREN OF component_subtype_def ;
exception_choice ::= compound_name | OTHERS ;
id_opt ::= (endid::definable_operator_symbol) | (n::compound_name) | ε ;
PROTECTED ::= "protected" ;
known_discrim_part ::= LPAREN discriminant_specifications RPAREN ;
discrete_with_range ::= mark_with_constraint | range ;
TASK ::= "task" ;
discrim_part_opt ::= discrim_part_text? ;
mark_with_constraint ::= subtype_mark range_constraint ;
parenth_values ::= LPAREN value (COMMA value)* RPAREN ;
ALL ::= "all" ;
type_def ::= (LPAREN enum_id_s RPAREN) | (RANGE range) | (MOD expression) | (DIGITS expression range_constraint_opt) | (DELTA expression (RANGE range) | (DIGITS expression range_constraint_opt)) | array_type_definition | access_type_definition | (empty_discrim_opt derived_or_private_or_record) ;
null_stmt ::= s::NuLL SEMI ;
NEW ::= "new" ;
GT_GT ::= ">>" ;
component_subtype_def ::= aliased_opt subtype_ind ;
entry_call_stmt ::= name SEMI ;
enumeration_literal_specification ::= IDENTIFIER | CHARACTER_LITERAL ;
LIMITED ::= "limited" ;
constant_all_opt ::= (CONSTANT | ALL)? ;
task_items_opt ::= pragma* entrydecls_repspecs_opt ;
LE ::= "<=" ;
statement_identifier ::= n::IDENTIFIER COLON ;
entry_call_alternative ::= entry_call_stmt stmts_opt ;
abstract_tagged_limited_opt ::= ((ABSTRACT TAGGED) | TAGGED)? LIMITED? ;
entrydecls_repspecs_opt ::= (entry_declaration (pragma | rep_spec)*)* ;
case_stmt ::= s::CASE expression IS alternative_s END CASE SEMI ;
return_stmt ::= s::RETURN expression? SEMI ;
abort_stmt ::= a::ABORT name (COMMA name)* SEMI ;
end_id_opt ::= END id_opt ;
prot_op_decl ::= entry_declaration | (p::PROCEDURE def_id formal_part_opt SEMI) | (f::FUNCTION def_designator function_tail SEMI) | rep_spec | pragma ;
SEMI ::= ";" ;
variant_part ::= c::CASE discriminant_direct_name IS variant_s END CASE SEMI ;
TAGGED ::= "tagged" ;
index_constraint ::= p::LPAREN discrete_range (COMMA discrete_range)* RPAREN ;
USE ::= "use" ;
ACCESS ::= "access" ;
prot_op_decl_s ::= prot_op_decl* ;
PRIVATE ::= "private" ;
OTHERS ::= "others" ;
GOTO ::= "goto" ;
DELAY ::= "delay" ;
aliased_opt ::= ALIASED? ;
def_ids_colon ::= defining_identifier_list COLON ;
SUBTYPE ::= "subtype" ;
exception_handler ::= w::WHEN identifier_colon_opt except_choice_s RIGHT_SHAFT statements ;
CHARACTER_LITERAL ::= "'" α "'" ;
access_opt ::= ACCESS? ;
choice_s ::= choice (PIPE choice)* ;
entry_body_formal_part ::= entry_index_spec_opt formal_part_opt ;
func_param ::= def_ids_colon in_access_opt subtype_mark init_opt ;
constraint_opt ::= (range_constraint | digits_constraint | delta_constraint | index_constraint | discriminant_constraint)? ;
entry_body ::= e::ENTRY def_id entry_body_formal_part entry_barrier IS body_part SEMI ;
DECLARE ::= "declare" ;
simple_expression ::= signed_term ((PLUS signed_term) | (MINUS signed_term) | (CONCAT signed_term))* ;
pkg_spec_part ::= basic_declarative_items_opt (PRIVATE basic_declarative_items_opt)? end_id_opt ;
COLON ::= ":" ;
UNTIL ::= "until" ;
PRAGMA ::= "pragma" ;
func_formal_part_opt ::= (LPAREN func_param (SEMI func_param)* RPAREN)? ;
TYPE ::= "type" ;
WHEN ::= "when" ;
ELSE ::= "else" ;
variant_s ::= variant+ ;
local_enum_name ::= IDENTIFIER ;
RETURN ::= "return" ;
CASE ::= "case" ;
OUT ::= "out" ;
def_label_opt ::= (LT_LT IDENTIFIER GT_GT)? ;
entry_declaration ::= e::ENTRY IDENTIFIER discrete_subtype_def_opt formal_part_opt SEMI ;
cond_clause ::= condition c::THEN statements ;
subprog_decl_or_rename_or_inst_or_body ::= (p::PROCEDURE def_id generic_subp_inst | (formal_part_opt renames | (IS separate_or_abstract | body_part) | ε SEMI)) | (f::FUNCTION def_designator generic_subp_inst | (function_tail renames | (IS separate_or_abstract | body_part) | ε SEMI)) ;
select_stmt ::= s::SELECT (triggering_alternative THEN ABORT) | selective_accept | (entry_call_alternative (OR delay_alternative) | (ELSE statements)) END SELECT SEMI ;
IS ::= "is" ;
DOT ::= "." ;
use_clause ::= u::USE (TYPE subtype_mark (COMMA subtype_mark)*) | c_name_list SEMI ;
IN ::= "in" ;
value_s ::= value (COMMA value)* ;
discriminant_specification ::= def_ids_colon access_opt subtype_mark init_opt ;
goto_stmt ::= s::GOTO label_name SEMI ;
context_items_opt ::= pragma* (with_clause (use_clause | pragma)*)* ;
SEPARATE ::= "separate" ;
discriminant_association ::= selector_names_opt expression ;
ranged_expr_s ::= ranged_expr (PIPE ranged_expr)* ;
decl_common ::= (t::TYPE IDENTIFIER (IS type_def) | (discrim_part (IS derived_or_private_or_record) | ε) | empty_discrim_opt SEMI) | (s::SUBTYPE IDENTIFIER IS subtype_ind SEMI) | generic_decl | use_clause | (r::FOR (local_enum_name USE) | (subtype_mark USE rep_spec_part) SEMI) | (IDENTIFIER erd::COLON EXCEPTION RENAMES compound_name) | (IDENTIFIER ord::COLON subtype_mark RENAMES name) | (defining_identifier_list od::COLON EXCEPTION | (CONSTANT ASSIGN) | (aliased_constant_opt (array_type_definition init_opt) | (subtype_ind init_opt)) SEMI) ;
EXIT ::= "exit" ;
is_separate_or_abstract_or_decl ::= (IS separate_or_abstract) | ε ;
IF ::= "if" ;
RANGE ::= "range" ;
CHAR_STRING ::= """ α* """ ;
operator_call ::= cs::CHAR_STRING operator_call_tail ;
abstract_opt ::= ABSTRACT? ;
CONCAT ::= "&" ;
DOT_DOT ::= ".." ;
WHILE ::= "while" ;
ABORT ::= "abort" ;
case_statement_alternative ::= s::WHEN choice_s RIGHT_SHAFT statements ;
DIGIT ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
empty_component_items ::= ε ;
ACCEPT ::= "accept" ;
with_clause ::= w::WITH c_name_list SEMI ;
init_opt ::= (ASSIGN expression)? ;
delay_stmt ::= d::DELAY until_opt expression SEMI ;
SELECT ::= "select" ;
discriminant_constraint ::= p::LPAREN discriminant_association (COMMA discriminant_association)* RPAREN ;
accept_alternative ::= accept_stmt stmts_opt ;
label_name ::= IDENTIFIER ;
c_name_list ::= compound_name (COMMA compound_name)* ;
delay_alternative ::= delay_stmt stmts_opt ;
ASSIGN ::= ":=" ;
GT ::= ">" ;
parameter_specification ::= def_ids_colon mode_opt subtype_mark init_opt ;
selector_name ::= IDENTIFIER ;
select_alternative ::= accept_alternative | delay_alternative | (t::TERMINATE SEMI) ;
entry_barrier ::= WHEN condition ;
aliased_constant_opt ::= ALIASED? CONSTANT? ;
body_is ::= BODY def_id IS ;
DIGITS ::= "digits" ;
spec_decl_part ::= (IS generic_inst | pkg_spec_part) | renames SEMI ;
empty_discrim_opt ::= ε ;
MOD ::= "mod" ;
GE ::= ">=" ;
association_head ::= selector_name (PIPE selector_name)* RIGHT_SHAFT ;
selector_names_opt ::= association_head | ε ;
digits_constraint ::= d::DIGITS expression range_constraint_opt ;
RENAMES ::= "renames" ;
rep_spec_part ::= (RECORD align_opt comp_loc_s END RECORD) | (AT expression) | expression ;
pragma_arg ::= (IDENTIFIER RIGHT_SHAFT)? expression ;
ALIASED ::= "aliased" ;
enum_id_s ::= enumeration_literal_specification (COMMA enumeration_literal_specification)* ;
or_select_opt ::= (OR guard_opt select_alternative)* ;
declarative_part ::= (pragma | declarative_item)* ;
WITH ::= "with" ;
delta_constraint ::= d::DELTA expression range_constraint_opt ;
REVERSE ::= "reverse" ;
generic_formal_parameter ::= (t::TYPE def_id (IS (LPAREN BOX RPAREN) | (RANGE BOX) | (MOD BOX) | (DELTA BOX (DIGITS BOX) | ε) | (DIGITS BOX) | array_type_definition | access_type_definition | (empty_discrim_opt discriminable_type_definition)) | (discrim_part IS discriminable_type_definition)) | (w::WITH (PROCEDURE def_id formal_part_opt subprogram_default_opt) | (FUNCTION def_designator function_tail subprogram_default_opt) | (PACKAGE def_id IS NEW compound_name formal_package_actual_part_opt)) | parameter_specification SEMI ;
subprogram_body ::= (p::PROCEDURE def_id formal_part_opt IS body_part SEMI) | (f::FUNCTION function_tail IS body_part SEMI) ;
END ::= "end" ;
formal_part_opt ::= (LPAREN parameter_specification (SEMI parameter_specification)* RPAREN)? ;
basic_decl_item ::= (pkg::PACKAGE def_id spec_decl_part) | (tsk::TASK task_type_or_single_decl) | (pro::PROTECTED prot_type_or_single_decl SEMI) | subprog_decl | decl_common ;
COMMA ::= "," ;
PROCEDURE ::= "procedure" ;
NOT ::= "not" ;
extension_opt ::= (WITH (NuLL RECORD) | value_s)? ;
prot_type_or_single_decl ::= (TYPE def_id discrim_part_opt protected_definition) | (def_id protected_definition) ;
in_access_opt ::= (IN | ACCESS)? ;
EXPONENT ::= "e" ("+" | "-")? DIGIT+ ;
basic_declarative_items_opt ::= (basic_decl_item | pragma)* ;
else_opt ::= (ELSE statements)? ;
EQ ::= "=" ;
IDENTIFIER ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" ("_"? "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ;
FOR ::= "for" ;
ELSIF ::= "elsif" ;
requeue_stmt ::= r::REQUEUE name (WITH ABORT)? SEMI ;
range_or_mark ::= range | subtype_mark ;
LOOP ::= "loop" ;
protected_opt ::= PROTECTED? ;
component_list ::= (NuLL SEMI) | (component_items variant_part?) | (empty_component_items variant_part) ;
accept_stmt ::= a::ACCEPT def_id entry_index_opt formal_part_opt (DO handled_stmt_s end_id_opt SEMI) | SEMI ;
compound_name ::= IDENTIFIER (DOT IDENTIFIER)* ;
REQUEUE ::= "requeue" ;
access_type_definition ::= ACCESS (protected_opt (PROCEDURE formal_part_opt) | (FUNCTION func_formal_part_opt RETURN subtype_mark)) | (constant_all_opt subtype_ind) ;
EXPON ::= "**" ;
discrim_part_text ::= LPAREN BOX | discriminant_specifications RPAREN ;
index_or_discrete_range_s ::= index_or_discrete_range (COMMA index_or_discrete_range)* ;
range_constraint_opt ::= range_constraint? ;
def_designator ::= (n::compound_name) | (d::designator) ;
generic_subp_inst ::= IS generic_inst SEMI ;
DO ::= "do" ;
prot_member_decl_s ::= (prot_op_decl | comp_decl)* ;
BEGIN ::= "begin" ;
abortable_part ::= stmts_opt ;
call_or_assignment ::= name (ASSIGN expression) | ε SEMI ;
EXTENDED_DIGIT ::= DIGIT | "a" | "b" | "c" | "d" | "e" | "f" ;
protected_definition ::= IS prot_op_decl_s (PRIVATE prot_member_decl_s)? end_id_opt ;
loop_stmt ::= iteration_scheme_opt LOOP statements END LOOP ;
compilation_unit ::= context_items_opt library_item | subunit pragma* ;
parenthesized_primary ::= pp::LPAREN (NuLL RECORD) | (value_s extension_opt) RPAREN ;
REM ::= "rem" ;
align_opt ::= (AT MOD expression SEMI)? ;
discrete_range ::= range | subtype_ind ;
name_or_qualified ::= IDENTIFIER ((DOT ALL | IDENTIFIER | CHARACTER_LITERAL | (dummy::is_operator)) | (p::LPAREN value_s RPAREN) | (TIC parenthesized_primary | attribute_id))* ;
BASED_INTEGER ::= EXTENDED_DIGIT ("_"? EXTENDED_DIGIT)* ;
subtype_mark ::= compound_name (TIC attribute_id)? ;
DIV ::= "/" ;
body_part ::= declarative_part block_body end_id_opt ;
TIC ::= "'" ;
subprog_decl_or_body ::= (p::PROCEDURE def_id formal_part_opt (IS body_part) | ε SEMI) | (f::FUNCTION def_designator function_tail (IS body_part) | ε SEMI) ;
discrete_subtype_def_opt ::= (LPAREN discrete_subtype_definition) | ε ;
ranged_expr ::= expression ((DOT_DOT simple_expression) | (RANGE range))? ;
entry_index_spec_opt ::= (LPAREN FOR def_id IN discrete_subtype_definition) | ε ;
alternative_s ::= case_statement_alternative+ ;
declare_opt ::= (DECLARE declarative_part)? ;
RIGHT_SHAFT ::= "=>" ;
function_tail ::= func_formal_part_opt RETURN subtype_mark ;
STAR ::= "*" ;
until_opt ::= UNTIL? ;
ABS ::= "abs" ;
ENTRY ::= "entry" ;
RECORD ::= "record" ;
MINUS ::= "-" ;
generic_formal_part_opt ::= (use_clause | pragma | generic_formal_parameter)* ;
COMMENT_INTRO ::= "--" ;
selective_accept ::= guard_opt select_alternative or_select_opt else_opt ;
exit_stmt ::= s::EXIT label_name? (WHEN condition)? SEMI ;
TERMINATE ::= "terminate" ;
COMMENT ::= COMMENT_INTRO α* "\n" | ("\r" "\n"?) ;
discrete_subtype_definition ::= range | subtype_ind ;
XOR ::= "xor" ;
raise_stmt ::= r::RAISE compound_name? SEMI ;
subprogram_default_opt ::= (IS BOX | name)? ;
entry_index_opt ::= (LPAREN expression) | ε ;
ARRAY ::= "array" ;
AT ::= "at" ;
EXCEPTION ::= "exception" ;
subprog_decl ::= (p::PROCEDURE def_id generic_subp_inst | (formal_part_opt renames | is_separate_or_abstract_or_decl SEMI)) | (f::FUNCTION def_designator generic_subp_inst | (function_tail renames | is_separate_or_abstract_or_decl SEMI)) ;
PACKAGE ::= "package" ;
index_or_discrete_range ::= simple_expression ((DOT_DOT simple_expression) | (RANGE BOX | range))? ;
NUMERIC_LIT ::= DIGIT+ (("#" BASED_INTEGER ("." BASED_INTEGER)? "#") | (("_" DIGIT+)+))? (("." DIGIT+ ("_" DIGIT+)* EXPONENT?) | EXPONENT)? ;
ABSTRACT ::= "abstract" ;
except_handler_part_opt ::= (EXCEPTION exception_handler+)? ;
stmts_opt ::= (pragma | statement)* ;
range_constraint ::= RANGE range ;
handled_stmt_s ::= statements except_handler_part_opt ;
LPAREN ::= "(" ;
THEN ::= "then" ;
rep_spec ::= r::FOR subtype_mark USE rep_spec_part SEMI ;
task_body ::= t::TASK body_is body_part SEMI ;
guard_opt ::= (WHEN condition RIGHT_SHAFT pragma*)? ;
is_operator ::= op::CHAR_STRING ;
triggering_alternative ::= delay_stmt | entry_call_stmt stmts_opt ;
library_item ::= private_opt lib_pkg_spec_or_body | subprog_decl_or_rename_or_inst_or_body | generic_decl ;
mode_opt ::= ((IN OUT?) | OUT | ACCESS)? ;
block_body ::= b::BEGIN handled_stmt_s ;
generic_decl ::= g::GENERIC generic_formal_part_opt (PACKAGE def_id renames | (IS pkg_spec_part)) | (PROCEDURE def_id formal_part_opt renames | ε) | (FUNCTION def_designator function_tail renames | ε) SEMI ;
discrim_part ::= discrim_part_text ;
range_dots ::= simple_expression DOT_DOT simple_expression ;
block_body_opt ::= (BEGIN handled_stmt_s)? ;
lib_pkg_spec_or_body ::= pkg::PACKAGE (BODY def_id IS pkg_body_part end_id_opt SEMI) | (def_id spec_decl_part) ;
comp_loc_s ::= (pragma | (subtype_mark AT expression RANGE range SEMI))* ;
record_definition ::= (RECORD component_list END RECORD) | (NuLL RECORD) ;
--------------------ada::kempe.bgf--------------------
context_clause ::= context_item* ;
subprogram_declaration ::= subprogram_specification ";" ;
first_bit ::= static_simple_expression ;
generic_formal_parameter_declaration ::= formal_object_declaration | formal_type_declaration | formal_subprogram_declaration | formal_package_declaration ;
at_clause ::= "for" direct_name "use" "at" expression ";" ;
package_body ::= "package" body defining_program_unit_name "is" declarative_part ("begin" handled_sequence_of_statements)? "end" ((parent_unit_name ".")? identifier)? ";" ;
discriminant_constraint ::= "(" discriminant_association ("," discriminant_association)* ")" ;
general_access_modifier ::= "all" | "constant" ;
defining_designator ::= defining_program_unit_name | defining_operator_symbol ;
library_unit_body ::= subprogram_body | package_body ;
attribute_definition_clause ::= ("for" local_name "'" attribute_designator "use" expression ";") | ("for" local_name "'" attribute_designator "use" name ";") ;
delay_relative_statement ::= "delay" delay_expression ";" ;
accept_statement ::= "accept" entry_direct_name ("(" entry_index ")")? parameter_profile ("do" handled_sequence_of_statements "end" entry_identifier?)? ";" ;
accept_alternative ::= accept_statement sequence_of_statements? ;
type_declaration ::= full_type_declaration | incomplete_type_declaration | private_type_declaration | private_extension_declaration ;
formal_modular_type_definition ::= "mod" "<>" ;
component_clause ::= component_local_name "at" position "range" first_bit ".." last_bit ";" ;
task_body_stub ::= "task" body defining_identifier "is" "separate" ";" ;
delay_alternative ::= delay_statement sequence_of_statements? ;
subprogram_body_stub ::= subprogram_specification "is" "separate" ";" ;
formal_access_type_definition ::= access_type_definition ;
parameter_specification ::= (defining_identifier_list ":" mode subtype_mark (":=" default_expression)?) | (defining_identifier_list ":" access_definition (":=" default_expression)?) ;
defining_identifier_list ::= defining_identifier ("," defining_identifier)* ;
select_statement ::= selective_accept | timed_entry_call | conditional_entry_call | asynchronous_select ;
parameter_association ::= (formal_parameter_selector_name "=>")? explicit_actual_parameter ;
selector_name ::= identifier | character_literal | operator_symbol ;
select_alternative ::= accept_alternative | delay_alternative | terminate_alternative ;
entry_barrier ::= "when" condition ;
basic_declaration ::= type_declaration | subtype_declaration | object_declaration | number_declaration | subprogram_declaration | abstract_subprogram_declaration | package_declaration | renaming_declaration | exception_declaration | generic_declaration | generic_instantiation ;
declarative_item ::= basic_declarative_item | body ;
generic_instantiation ::= ("package" defining_program_unit_name "is" "new" generic_package_name generic_actual_part? ";") | ("procedure" defining_program_unit_name "is" "new" generic_procedure_name generic_actual_part? ";") | ("function" defining_designator "is" "new" generic_function_name generic_actual_part? ";") ;
access_to_subprogram_definition ::= ("access" "protected"? "procedure" parameter_profile) | ("access" "protected"? "function" parameter_and_result_profile) ;
last_bit ::= static_simple_expression ;
explicit_actual_parameter ::= expression | variable_name ;
local_name ::= direct_name | (direct_name "'" attribute_designator) | library_unit_name ;
ancestor_part ::= expression | subtype_mark ;
raise_statement ::= "raise" exception_name? ";" ;
unknown_discriminant_part ::= "(<>)" ;
generic_formal_part ::= "generic" (generic_formal_parameter_declaration | use_clause)* ;
compound_statement ::= if_statement | case_statement | loop_statement | block_statement | accept_statement | select_statement ;
unconstrained_array_definition ::= "array" "(" index_subtype_definition ("," index_subtype_definition)* ")" "of" component_definition ;
protected_body_stub ::= "protected" body defining_identifier "is" "separate" ";" ;
array_component_association ::= discrete_choice_list "=>" expression ;
basic_declarative_item ::= basic_declaration | representation_clause | use_clause ;
single_task_declaration ::= "task" defining_identifier ("is" task_definition)? ";" ;
real_type_definition ::= floating_point_definition | fixed_point_definition ;
digits_constraint ::= "digits" static_expression range_constraint? ;
component_definition ::= "aliased"? subtype_indication ;
asynchronous_select ::= "select" triggering_alternative "then" "abort" abortable_part "end" "select" ";" ;
defining_character_literal ::= character_literal ;
protected_operation_declaration ::= subprogram_declaration | entry_declaration | representation_clause ;
subprogram_renaming_declaration ::= subprogram_specification "renames" callable_entity_name ";" ;
record_component_association ::= (component_choice_list "=>")? expression ;
terminate_alternative ::= "terminate" ";" ;
string_element ::= """" | non_quotation_mark_graphic_character ;
if_statement ::= "if" condition "then" sequence_of_statements ("elsif" condition "then" sequence_of_statements)* ("else" sequence_of_statements)? "end" "if" ";" ;
fixed_point_definition ::= ordinary_fixed_point_definition | decimal_fixed_point_definition ;
formal_decimal_fixed_point_definition ::= "delta" "<>" "digits" "<>" ;
formal_object_declaration ::= defining_identifier_list ":" mode subtype_mark (":=" default_expression)? ";" ;
package_specification ::= "package" defining_program_unit_name "is" basic_declarative_item* ("private" basic_declarative_item*)? "end" ((parent_unit_name ".")? identifier)? ;
ordinary_fixed_point_definition ::= "delta" static_expression real_range_specification ;
letter_or_digit ::= identifier_letter | digit ;
default_name ::= name ;
declarative_part ::= declarative_item* ;
enumeration_aggregate ::= array_aggregate ;
entry_index ::= expression ;
index_subtype_definition ::= subtype_mark "range" "<>" ;
delta_constraint ::= "delta" static_expression range_constraint? ;
constrained_array_definition ::= "array" "(" discrete_subtype_definition ("," discrete_subtype_definition)* ")" "of" component_definition ;
decimal_literal ::= numeral ("." numeral)? exponent? ;
extension_aggregate ::= "(" ancestor_part "with" record_component_association_list ")" ;
private_extension_declaration ::= "type" defining_identifier discriminant_part? "is" "abstract"? "new" ancestor_subtype_indication "with" "private" ";" ;
subprogram_body ::= subprogram_specification "is" declarative_part "begin" handled_sequence_of_statements "end" designator? ";" ;
abstract_subprogram_declaration ::= subprogram_specification "is" "abstract" ";" ;
relational_operator ::= "=" | "/=" | "<" | "<=" | ">" | ">=" ;
procedure_call_statement ::= (procedure_name ";") | (procedure_prefix actual_parameter_part ";") ;
null_statement ::= "null" ";" ;
object_renaming_declaration ::= defining_identifier ":" subtype_mark "renames" object_name ";" ;
renaming_declaration ::= object_renaming_declaration | exception_renaming_declaration | package_renaming_declaration | subprogram_renaming_declaration | generic_renaming_declaration ;
incomplete_type_declaration ::= "type" defining_identifier discriminant_part? ";" ;
record_representation_clause ::= "for" first_subtype_local_name "use" "record" mod_clause? component_clause* "end" "record" ";" ;
delay_statement ::= delay_until_statement | delay_relative_statement ;
single_protected_declaration ::= "protected" defining_identifier "is" protected_definition ";" ;
formal_package_declaration ::= "with" "package" defining_identifier "is" "new" generic_package_name formal_package_actual_part ";" ;
handled_sequence_of_statements ::= sequence_of_statements ("exception" exception_handler exception_handler*)? ;
discrete_choice ::= expression | discrete_range | "others" ;
extended_digit ::= digit | "A" | "B" | "C" | "D" | "E" | "F" ;
protected_element_declaration ::= protected_operation_declaration | component_declaration ;
exception_renaming_declaration ::= defining_identifier ":" "exception" "renames" exception_name ";" ;
full_type_declaration ::= ("type" defining_identifier known_discriminant_part? "is" type_definition ";") | task_type_declaration | protected_type_declaration ;
formal_signed_integer_type_definition ::= "range" "<>" ;
defining_program_unit_name ::= (parent_unit_name ".")? defining_identifier ;
context_item ::= with_clause | use_clause ;
record_extension_part ::= "with" record_definition ;
component_list ::= (component_item component_item*) | (component_item* variant_part) | ("null" ";") ;
code_statement ::= qualified_expression ";" ;
access_type_definition ::= access_to_object_definition | access_to_subprogram_definition ;
generic_actual_part ::= "(" generic_association ("," generic_association)* ")" ;
protected_operation_item ::= subprogram_declaration | subprogram_body | entry_body | representation_clause ;
triggering_statement ::= entry_call_statement | delay_statement ;
actual_parameter_part ::= "(" parameter_association ("," parameter_association)* ")" ;
generic_package_declaration ::= generic_formal_part package_specification ";" ;
character_literal ::= "'" graphic_character "'" ;
attribute_designator ::= (identifier ("(" static_expression ")")?) | "Access" | "Delta" | "Digits" ;
known_discriminant_part ::= "(" discriminant_specification (";" discriminant_specification)* ")" ;
composite_constraint ::= index_constraint | discriminant_constraint ;
loop_statement ::= (loop_statement_identifier ":")? iteration_scheme? "loop" sequence_of_statements "end" "loop" loop_identifier? ";" ;
protected_body ::= "protected" body defining_identifier "is" protected_operation_item* "end" protected_identifier? ";" ;
operator_symbol ::= string_literal ;
goto_statement ::= "goto" label_name ";" ;
array_type_definition ::= unconstrained_array_definition | constrained_array_definition ;
based_numeral ::= extended_digit (underline? extended_digit)* ;
graphic_character ::= identifier_letter | digit | space_character | special_character ;
exception_choice ::= exception_name | "others" ;
discriminant_part ::= unknown_discriminant_part | known_discriminant_part ;
implicit_dereference ::= name ;
defining_identifier ::= identifier ;
exit_statement ::= "exit" loop_name? ("when" condition)? ";" ;
task_item ::= entry_declaration | representation_clause ;
exception_declaration ::= defining_identifier_list ":" "exception" ";" ;
record_type_definition ::= ("abstract"? "tagged")? "limited"? record_definition ;
access_to_object_definition ::= "access" general_access_modifier? subtype_indication ;
abortable_part ::= sequence_of_statements ;
multiplying_operator ::= "*" | "/" | "mod" | "rem" ;
protected_definition ::= protected_operation_declaration* ("private" protected_element_declaration*)? "end" protected_identifier? ;
number_declaration ::= defining_identifier_list ":" "constant" ":=" static_expression ";" ;
formal_discrete_type_definition ::= "(<>)" ;
string_literal ::= """ string_element* """ ;
compilation_unit ::= (context_clause library_item) | (context_clause subunit) ;
enumeration_type_definition ::= "(" enumeration_literal_specification ("," enumeration_literal_specification)* ")" ;
assignment_statement ::= variable_name ":=" expression ";" ;
numeric_literal ::= decimal_literal | based_literal ;
decimal_fixed_point_definition ::= "delta" static_expression "digits" static_expression real_range_specification? ;
floating_point_definition ::= "digits" static_expression real_range_specification? ;
enumeration_literal_specification ::= defining_identifier | defining_character_literal ;
formal_ordinary_fixed_point_definition ::= "delta" "<>" ;
object_declaration ::= (defining_identifier_list ":" "aliased"? "constant"? subtype_indication (":=" expression)? ";") | (defining_identifier_list ":" "aliased"? "constant"? array_type_definition (":=" expression)? ";") | single_task_declaration | single_protected_declaration ;
entry_call_alternative ::= entry_call_statement sequence_of_statements? ;
statement_identifier ::= direct_name ;
type_definition ::= enumeration_type_definition | integer_type_definition | real_type_definition | array_type_definition | record_type_definition | access_type_definition | derived_type_definition ;
discrete_range ::= discrete_subtype_indication | range ;
integer_type_definition ::= signed_integer_type_definition | modular_type_definition ;
package_body_stub ::= "package" body defining_identifier "is" "separate" ";" ;
unary_adding_operator ::= "+" | "-" ;
subtype_mark ::= subtype_name ;
task_type_declaration ::= "task" "type" defining_identifier known_discriminant_part? ("is" task_definition)? ";" ;
variant_part ::= "case" discriminant_direct_name "is" variant variant* "end" "case" ";" ;
formal_private_type_definition ::= ("abstract"? "tagged")? "limited"? "private" ;
index_constraint ::= "(" discrete_range ("," discrete_range)* ")" ;
attribute_reference ::= prefix "'" attribute_designator ;
generic_subprogram_declaration ::= generic_formal_part subprogram_specification ";" ;
protected_type_declaration ::= "protected" "type" defining_identifier known_discriminant_part? "is" protected_definition ";" ;
range_attribute_reference ::= prefix "'" range_attribute_designator ;
function_call ::= function_name | (function_prefix actual_parameter_part) ;
conditional_entry_call ::= "select" entry_call_alternative "else" sequence_of_statements "end" "select" ";" ;
real_range_specification ::= "range" static_simple_expression ".." static_simple_expression ;
explicit_dereference ::= name "." "all" ;
use_type_clause ::= "use" "type" subtype_mark ("," subtype_mark)* ";" ;
exception_handler ::= "when" (choice_parameter_specification ":")? exception_choice ("|" exception_choice)* "=>" sequence_of_statements ;
selected_component ::= prefix "." selector_name ;
range_attribute_designator ::= "Range" ("(" static_expression ")")? ;
array_aggregate ::= positional_array_aggregate | named_array_aggregate ;
default_expression ::= expression ;
derived_type_definition ::= "abstract"? "new" parent_subtype_indication record_extension_part? ;
signed_integer_type_definition ::= "range" static_simple_expression ".." static_simple_expression ;
entry_body_formal_part ::= ("(" entry_index_specification ")")? parameter_profile ;
named_array_aggregate ::= "(" array_component_association ("," array_component_association)* ")" ;
loop_parameter_specification ::= defining_identifier "in" "reverse"? discrete_subtype_definition ;
record_aggregate ::= "(" record_component_association_list ")" ;
formal_subprogram_declaration ::= "with" subprogram_specification ("is" subprogram_default)? ";" ;
choice_parameter_specification ::= defining_identifier ;
entry_body ::= "entry" defining_identifier entry_body_formal_part entry_barrier "is" declarative_part "begin" handled_sequence_of_statements "end" entry_identifier? ";" ;
sequence_of_statements ::= statement statement* ;
task_definition ::= task_item* ("private" task_item*)? "end" task_identifier? ;
mod_clause ::= "at" "mod" static_expression ";" ;
record_component_association_list ::= (record_component_association ("," record_component_association)*) | ("null" "record") ;
explicit_generic_actual_parameter ::= expression | variable_name | subprogram_name | entry_name | subtype_mark | package_instance_name ;
selective_accept ::= "select" guard? select_alternative ("or" guard? select_alternative)* ("else" sequence_of_statements)? "end" "select" ";" ;
subprogram_specification ::= ("procedure" defining_program_unit_name parameter_profile) | ("function" defining_designator parameter_and_result_profile) ;
iteration_scheme ::= ("while" condition) | ("for" loop_parameter_specification) ;
subprogram_default ::= default_name | "<>" ;
formal_type_declaration ::= "type" defining_identifier discriminant_part? "is" formal_type_definition ";" ;
simple_expression ::= unary_adding_operator? term (binary_adding_operator term)* ;
parameter_and_result_profile ::= formal_part? "return" subtype_mark ;
binary_adding_operator ::= "+" | "-" | "&" ;
library_unit_declaration ::= subprogram_declaration | package_declaration | generic_declaration | generic_instantiation ;
formal_part ::= "(" parameter_specification (";" parameter_specification)* ")" ;
modular_type_definition ::= "mod" static_expression ;
formal_array_type_definition ::= array_type_definition ;
subtype_indication ::= subtype_mark constraint? ;
use_package_clause ::= "use" package_name ("," package_name)* ";" ;
discrete_subtype_definition ::= discrete_subtype_indication | "range" ;
block_statement ::= (block_statement_identifier ":")? ("declare" declarative_part)? "begin" handled_sequence_of_statements "end" block_identifier? ";" ;
formal_package_actual_part ::= "(<>)" | (generic_actual_part?) ;
entry_call_statement ::= entry_name actual_parameter_part? ";" ;
type_conversion ::= (subtype_mark "(" expression ")") | (subtype_mark "(" name ")") ;
component_choice_list ::= (component_selector_name ("|" component_selector_name)*) | "others" ;
component_declaration ::= defining_identifier_list ":" component_definition (":=" default_expression)? ";" ;
discrete_choice_list ::= discrete_choice ("|" discrete_choice)* ;
subtype_declaration ::= "subtype" defining_identifier "is" subtype_indication ";" ;
private_type_declaration ::= "type" defining_identifier discriminant_part? "is" ("abstract"? "tagged")? "limited"? "private" ";" ;
proper_body ::= subprogram_body | package_body | task_body | protected_body ;
indexed_component ::= prefix "(" expression ("," expression)* ")" ;
requeue_statement ::= "requeue" entry_name ("with" "abort")? ";" ;
positional_array_aggregate ::= ("(" expression "," expression ("," expression)* ")") | ("(" expression ("," expression)* "," "others" "=>" expression ")") ;
entry_declaration ::= "entry" defining_identifier ("(" discrete_subtype_definition ")")? parameter_profile ";" ;
formal_floating_point_definition ::= "digits" "<>" ;
body_stub ::= subprogram_body_stub | package_body_stub | task_body_stub | protected_body_stub ;
enumeration_representation_clause ::= "for" first_subtype_local_name "use" enumeration_aggregate ";" ;
formal_type_definition ::= formal_private_type_definition | formal_derived_type_definition | formal_discrete_type_definition | formal_signed_integer_type_definition | formal_modular_type_definition | formal_floating_point_definition | formal_ordinary_fixed_point_definition | formal_decimal_fixed_point_definition | formal_array_type_definition | formal_access_type_definition ;
use_clause ::= use_package_clause | use_type_clause ;
discriminant_specification ::= (defining_identifier_list ":" subtype_mark (":=" default_expression)?) | (defining_identifier_list ":" access_definition (":=" default_expression)?) ;
discriminant_association ::= (discriminant_selector_name ("|" discriminant_selector_name)* "=>")? expression ;
based_literal ::= base "#" based_numeral ("." based_numeral)? "#" exponent? ;
simple_statement ::= null_statement | assignment_statement | exit_statement | goto_statement | procedure_call_statement | return_statement | entry_call_statement | requeue_statement | delay_statement | abort_statement | raise_statement | code_statement ;
pragma_argument_association ::= ((pragma_argument_identifier "=>")? name) | ((pragma_argument_identifier "=>")? expression) ;
representation_clause ::= attribute_definition_clause | enumeration_representation_clause | record_representation_clause | at_clause ;
direct_name ::= identifier | operator_symbol ;
abort_statement ::= "abort" task_name ("," task_name)* ";" ;
return_statement ::= "return" expression? ";" ;
case_statement ::= "case" expression "is" case_statement_alternative case_statement_alternative* "end" "case" ";" ;
range_constraint ::= "range" range ;
generic_renaming_declaration ::= ("generic" "package" defining_program_unit_name "renames" generic_package_name ";") | ("generic" "procedure" defining_program_unit_name "renames" generic_procedure_name ";") | ("generic" "function" defining_program_unit_name "renames" generic_function_name ";") ;
highest_precedence_operator ::= "**" | "abs" | "not" ;
task_body ::= "task" body defining_identifier "is" declarative_part "begin" handled_sequence_of_statements "end" task_identifier? ";" ;
qualified_expression ::= (subtype_mark "'(" expression ")") | (subtype_mark "'" aggregate) ;
logical_operator ::= "and" | "or" | "xor" ;
generic_association ::= (generic_formal_parameter_selector_name "=>")? explicit_generic_actual_parameter ;
triggering_alternative ::= triggering_statement sequence_of_statements? ;
library_item ::= ("private"? library_unit_declaration) | library_unit_body | ("private"? library_unit_renaming_declaration) ;
component_item ::= component_declaration | representation_clause ;
timed_entry_call ::= "select" entry_call_alternative "or" delay_alternative "end" "select" ";" ;
parameter_profile ::= formal_part? ;
generic_declaration ::= generic_subprogram_declaration | generic_package_declaration ;
delay_until_statement ::= "delay" "until" delay_expression ";" ;
parent_unit_name ::= name ;
scalar_constraint ::= range_constraint | digits_constraint | delta_constraint ;
package_renaming_declaration ::= "package" defining_program_unit_name renamespackage_name ";" ;
case_statement_alternative ::= "when" discrete_choice_list "=>" sequence_of_statements ;
access_definition ::= "access" subtype_mark ;
library_unit_renaming_declaration ::= package_renaming_declaration | generic_renaming_declaration | subprogram_renaming_declaration ;
defining_operator_symbol ::= operator_symbol ;
entry_index_specification ::= "for" defining_identifier "in" discrete_subtype_definition ;
with_clause ::= "with" library_unit_name ("," library_unit_name)* ";" ;
formal_derived_type_definition ::= "abstract"? "new" subtype_mark ("with" "private")? ;
package_declaration ::= package_specification ";" ;
record_definition ::= ("record" component_list "end" "record") | ("null" "record") ;
--------------------ada::laemmel-verhoef.bgf--------------------
context_clause ::= context_item* ;
subprogram_declaration ::= subprogram_specification ";" ;
first_bit ::= static_simple_expression ;
generic_formal_parameter_declaration ::= formal_object_declaration | formal_type_declaration | formal_subprogram_declaration | formal_package_declaration ;
at_clause ::= "for" direct_name "use" "at" expression ";" ;
discriminant_constraint ::= "(" discriminant_association ("," discriminant_association)* ")" ;
general_access_modifier ::= "all" | "constant" ;
defining_designator ::= defining_program_unit_name | defining_operator_symbol ;
package_body ::= "package" body defining_program_unit_name "is" declarative_part ("begin" handled_sequence_of_statements)? "end" ((parent_unit_name ".")? identifier)? ";" ;
library_unit_body ::= subprogram_body | package_body ;
attribute_definition_clause ::= ("for" local_name "'" attribute_designator "use" expression ";") | ("for" local_name "'" attribute_designator "use" name ";") ;
delay_relative_statement ::= "delay" delay_expression ";" ;
accept_statement ::= "accept" entry_direct_name ("(" entry_index ")")? parameter_profile ("do" handled_sequence_of_statements "end" entry_identifier?)? ";" ;
accept_alternative ::= accept_statement sequence_of_statements? ;
type_declaration ::= full_type_declaration | incomplete_type_declaration | private_type_declaration | private_extension_declaration ;
formal_modular_type_definition ::= "mod" "<>" ;
component_clause ::= component_local_name "at" position "range" first_bit ".." last_bit ";" ;
task_body_stub ::= "task" body defining_identifier "is" "separate" ";" ;
delay_alternative ::= delay_statement sequence_of_statements? ;
subprogram_body_stub ::= subprogram_specification "is" "separate" ";" ;
formal_access_type_definition ::= access_type_definition ;
parameter_specification ::= (defining_identifier_list ":" mode subtype_mark (":=" default_expression)?) | (defining_identifier_list ":" access_definition (":=" default_expression)?) ;
defining_identifier_list ::= defining_identifier ("," defining_identifier)* ;
select_statement ::= selective_accept | timed_entry_call | conditional_entry_call | asynchronous_select ;
parameter_association ::= (formal_parameter_selector_name "=>")? explicit_actual_parameter ;
selector_name ::= identifier | character_literal | operator_symbol ;
select_alternative ::= accept_alternative | delay_alternative | terminate_alternative ;
entry_barrier ::= "when" condition ;
basic_declaration ::= type_declaration | subtype_declaration | object_declaration | number_declaration | subprogram_declaration | abstract_subprogram_declaration | package_declaration | renaming_declaration | exception_declaration | generic_declaration | generic_instantiation ;
declarative_item ::= basic_declarative_item | body ;
generic_instantiation ::= ("package" defining_program_unit_name "is" "new" generic_package_name generic_actual_part? ";") | ("procedure" defining_program_unit_name "is" "new" generic_procedure_name generic_actual_part? ";") | ("function" defining_designator "is" "new" generic_function_name generic_actual_part? ";") ;
access_to_subprogram_definition ::= ("access" "protected"? "procedure" parameter_profile) | ("access" "protected"? "function" parameter_and_result_profile) ;
last_bit ::= static_simple_expression ;
explicit_actual_parameter ::= expression | variable_name ;
local_name ::= direct_name | (direct_name "'" attribute_designator) | library_unit_name ;
ancestor_part ::= expression | subtype_mark ;
raise_statement ::= "raise" exception_name? ";" ;
unknown_discriminant_part ::= "(" "<>" ")" ;
generic_formal_part ::= "generic" (generic_formal_parameter_declaration | use_clause)* ;
compound_statement ::= if_statement | case_statement | loop_statement | block_statement | accept_statement | select_statement ;
unconstrained_array_definition ::= "array" "(" index_subtype_definition ("," index_subtype_definition)* ")" "of" component_definition ;
protected_body_stub ::= "protected" body defining_identifier "is" "separate" ";" ;
array_component_association ::= discrete_choice_list "=>" expression ;
basic_declarative_item ::= basic_declaration | representation_clause | use_clause ;
single_task_declaration ::= "task" defining_identifier ("is" task_definition)? ";" ;
real_type_definition ::= floating_point_definition | fixed_point_definition ;
digits_constraint ::= "digits" static_expression range_constraint? ;
component_definition ::= "aliased"? subtype_indication ;
asynchronous_select ::= "select" triggering_alternative "then" "abort" abortable_part "end" "select" ";" ;
defining_character_literal ::= character_literal ;
protected_operation_declaration ::= subprogram_declaration | entry_declaration | representation_clause ;
subprogram_renaming_declaration ::= subprogram_specification "renames" callable_entity_name ";" ;
record_component_association ::= (component_choice_list "=>")? expression ;
terminate_alternative ::= "terminate" ";" ;
if_statement ::= "if" condition "then" sequence_of_statements ("elsif" condition "then" sequence_of_statements)* ("else" sequence_of_statements)? "end" "if" ";" ;
fixed_point_definition ::= ordinary_fixed_point_definition | decimal_fixed_point_definition ;
formal_decimal_fixed_point_definition ::= "delta" "<>" "digits" "<>" ;
formal_object_declaration ::= defining_identifier_list ":" mode subtype_mark (":=" default_expression)? ";" ;
package_specification ::= "package" defining_program_unit_name "is" basic_declarative_item* ("private" basic_declarative_item*)? "end" ((parent_unit_name ".")? identifier)? ;
ordinary_fixed_point_definition ::= "delta" static_expression real_range_specification ;
default_name ::= name ;
declarative_part ::= declarative_item* ;
enumeration_aggregate ::= array_aggregate ;
entry_index ::= expression ;
index_subtype_definition ::= subtype_mark "range" "<>" ;
delta_constraint ::= "delta" static_expression range_constraint? ;
constrained_array_definition ::= "array" "(" discrete_subtype_definition ("," discrete_subtype_definition)* ")" "of" component_definition ;
extension_aggregate ::= "(" ancestor_part "with" record_component_association_list ")" ;
private_extension_declaration ::= "type" defining_identifier discriminant_part? "is" "abstract"? "new" ancestor_subtype_indication "with" "private" ";" ;
subprogram_body ::= subprogram_specification "is" declarative_part "begin" handled_sequence_of_statements "end" designator? ";" ;
abstract_subprogram_declaration ::= subprogram_specification "is" "abstract" ";" ;
relational_operator ::= "=" | "/=" | "<" | "<=" | ">" | ">=" ;
procedure_call_statement ::= (procedure_name ";") | (procedure_prefix actual_parameter_part ";") ;
null_statement ::= "null" ";" ;
object_renaming_declaration ::= defining_identifier ":" subtype_mark "renames" object_name ";" ;
renaming_declaration ::= object_renaming_declaration | exception_renaming_declaration | package_renaming_declaration | subprogram_renaming_declaration | generic_renaming_declaration ;
incomplete_type_declaration ::= "type" defining_identifier discriminant_part? ";" ;
record_representation_clause ::= "for" first_subtype_local_name "use" "record" mod_clause? component_clause* "end" "record" ";" ;
delay_statement ::= delay_until_statement | delay_relative_statement ;
single_protected_declaration ::= "protected" defining_identifier "is" protected_definition ";" ;
formal_package_declaration ::= "with" "package" defining_identifier "is" "new" generic_package_name formal_package_actual_part ";" ;
handled_sequence_of_statements ::= sequence_of_statements ("exception" exception_handler exception_handler*)? ;
discrete_choice ::= expression | discrete_range | "others" ;
protected_element_declaration ::= protected_operation_declaration | component_declaration ;
exception_renaming_declaration ::= defining_identifier ":" "exception" "renames" exception_name ";" ;
full_type_declaration ::= ("type" defining_identifier known_discriminant_part? "is" type_definition ";") | task_type_declaration | protected_type_declaration ;
formal_signed_integer_type_definition ::= "range" "<>" ;
defining_program_unit_name ::= (parent_unit_name ".")? defining_identifier ;
context_item ::= with_clause | use_clause ;
record_extension_part ::= "with" record_definition ;
component_list ::= (component_item component_item*) | (component_item* variant_part) | ("null" ";") ;
code_statement ::= qualified_expression ";" ;
access_type_definition ::= access_to_object_definition | access_to_subprogram_definition ;
generic_actual_part ::= "(" generic_association ("," generic_association)* ")" ;
protected_operation_item ::= subprogram_declaration | subprogram_body | entry_body | representation_clause ;
triggering_statement ::= entry_call_statement | delay_statement ;
actual_parameter_part ::= "(" parameter_association ("," parameter_association)* ")" ;
generic_package_declaration ::= generic_formal_part package_specification ";" ;
attribute_designator ::= (identifier ("(" static_expression ")")?) | "Access" | "Delta" | "Digits" ;
known_discriminant_part ::= "(" discriminant_specification (";" discriminant_specification)* ")" ;
range_definition ::= range_attribute_reference | (simple_expression ".." simple_expression) ;
composite_constraint ::= index_constraint | discriminant_constraint ;
loop_statement ::= (loop_statement_identifier ":")? iteration_scheme? "loop" sequence_of_statements "end" "loop" loop_identifier? ";" ;
protected_body ::= "protected" body defining_identifier "is" protected_operation_item* "end" protected_identifier? ";" ;
operator_symbol ::= string_literal ;
goto_statement ::= "goto" label_name ";" ;
array_type_definition ::= unconstrained_array_definition | constrained_array_definition ;
exception_choice ::= exception_name | "others" ;
discriminant_part ::= unknown_discriminant_part | known_discriminant_part ;
implicit_dereference ::= name ;
defining_identifier ::= identifier ;
exit_statement ::= "exit" loop_name? ("when" condition)? ";" ;
task_item ::= entry_declaration | representation_clause ;
exception_declaration ::= defining_identifier_list ":" "exception" ";" ;
record_type_definition ::= ("abstract"? "tagged")? "limited"? record_definition ;
access_to_object_definition ::= "access" general_access_modifier? subtype_indication ;
abortable_part ::= sequence_of_statements ;
multiplying_operator ::= "*" | "/" | "mod" | "rem" ;
protected_definition ::= protected_operation_declaration* ("private" protected_element_declaration*)? "end" protected_identifier? ;
number_declaration ::= defining_identifier_list ":" "constant" ":=" static_expression ";" ;
formal_discrete_type_definition ::= "(" "<>" ")" ;
compilation_unit ::= (context_clause library_item) | (context_clause subunit) ;
enumeration_type_definition ::= "(" enumeration_literal_specification ("," enumeration_literal_specification)* ")" ;
assignment_statement ::= variable_name ":=" expression ";" ;
decimal_fixed_point_definition ::= "delta" static_expression "digits" static_expression real_range_specification? ;
floating_point_definition ::= "digits" static_expression real_range_specification? ;
enumeration_literal_specification ::= defining_identifier | defining_character_literal ;
formal_ordinary_fixed_point_definition ::= "delta" "<>" ;
object_declaration ::= (defining_identifier_list ":" "aliased"? "constant"? subtype_indication (":=" expression)? ";") | (defining_identifier_list ":" "aliased"? "constant"? array_type_definition (":=" expression)? ";") | single_task_declaration | single_protected_declaration ;
entry_call_alternative ::= entry_call_statement sequence_of_statements? ;
statement_identifier ::= direct_name ;
type_definition ::= enumeration_type_definition | integer_type_definition | real_type_definition | array_type_definition | record_type_definition | access_type_definition | derived_type_definition ;
discrete_range ::= discrete_subtype_indication | range_definition ;
integer_type_definition ::= signed_integer_type_definition | modular_type_definition ;
package_body_stub ::= "package" body defining_identifier "is" "separate" ";" ;
unary_adding_operator ::= "+" | "-" ;
subtype_mark ::= subtype_name ;
task_type_declaration ::= "task" "type" defining_identifier known_discriminant_part? ("is" task_definition)? ";" ;
variant_part ::= "case" discriminant_direct_name "is" variant variant* "end" "case" ";" ;
formal_private_type_definition ::= ("abstract"? "tagged")? "limited"? "private" ;
index_constraint ::= "(" discrete_range ("," discrete_range)* ")" ;
attribute_reference ::= prefix "'" attribute_designator ;
generic_subprogram_declaration ::= generic_formal_part subprogram_specification ";" ;
protected_type_declaration ::= "protected" "type" defining_identifier known_discriminant_part? "is" protected_definition ";" ;
range_attribute_reference ::= prefix "'" range_attribute_designator ;
function_call ::= function_name | (function_prefix actual_parameter_part) ;
conditional_entry_call ::= "select" entry_call_alternative "else" sequence_of_statements "end" "select" ";" ;
real_range_specification ::= "range" static_simple_expression ".." static_simple_expression ;
explicit_dereference ::= name "." "all" ;
use_type_clause ::= "use" "type" subtype_mark ("," subtype_mark)* ";" ;
exception_handler ::= "when" (choice_parameter_specification ":")? exception_choice ("|" exception_choice)* "=>" sequence_of_statements ;
selected_component ::= prefix "." selector_name ;
range_attribute_designator ::= "Range" ("(" static_expression ")")? ;
array_aggregate ::= positional_array_aggregate | named_array_aggregate ;
default_expression ::= expression ;
derived_type_definition ::= "abstract"? "new" parent_subtype_indication record_extension_part? ;
signed_integer_type_definition ::= "range" static_simple_expression ".." static_simple_expression ;
entry_body_formal_part ::= ("(" entry_index_specification ")")? parameter_profile ;
named_array_aggregate ::= "(" array_component_association ("," array_component_association)* ")" ;
loop_parameter_specification ::= defining_identifier "in" "reverse"? discrete_subtype_definition ;
record_aggregate ::= "(" record_component_association_list ")" ;
formal_subprogram_declaration ::= "with" subprogram_specification ("is" subprogram_default)? ";" ;
choice_parameter_specification ::= defining_identifier ;
entry_body ::= "entry" defining_identifier entry_body_formal_part entry_barrier "is" declarative_part "begin" handled_sequence_of_statements "end" entry_identifier? ";" ;
sequence_of_statements ::= statement statement* ;
task_definition ::= task_item* ("private" task_item*)? "end" task_identifier? ;
mod_clause ::= "at" "mod" static_expression ";" ;
record_component_association_list ::= (record_component_association ("," record_component_association)*) | ("null" "record") ;
explicit_generic_actual_parameter ::= expression | variable_name | subprogram_name | entry_name | subtype_mark | package_instance_name ;
selective_accept ::= "select" guard? select_alternative ("or" guard? select_alternative)* ("else" sequence_of_statements)? "end" "select" ";" ;
subprogram_specification ::= ("procedure" defining_program_unit_name parameter_profile) | ("function" defining_designator parameter_and_result_profile) ;
iteration_scheme ::= ("while" condition) | ("for" loop_parameter_specification) ;
subprogram_default ::= default_name | "<>" ;
formal_type_declaration ::= "type" defining_identifier discriminant_part? "is" formal_type_definition ";" ;
simple_expression ::= unary_adding_operator? term (binary_adding_operator term)* ;
parameter_and_result_profile ::= formal_part? "return" subtype_mark ;
binary_adding_operator ::= "+" | "-" | "&" ;
library_unit_declaration ::= subprogram_declaration | package_declaration | generic_declaration | generic_instantiation ;
formal_part ::= "(" parameter_specification (";" parameter_specification)* ")" ;
modular_type_definition ::= "mod" static_expression ;
formal_array_type_definition ::= array_type_definition ;
subtype_indication ::= subtype_mark constraint? ;
use_package_clause ::= "use" package_name ("," package_name)* ";" ;
discrete_subtype_definition ::= discrete_subtype_indication | "range" ;
block_statement ::= (block_statement_identifier ":")? ("declare" declarative_part)? "begin" handled_sequence_of_statements "end" block_identifier? ";" ;
formal_package_actual_part ::= ("(" "<>" ")") | (generic_actual_part?) ;
entry_call_statement ::= entry_name actual_parameter_part? ";" ;
type_conversion ::= (subtype_mark "(" expression ")") | (subtype_mark "(" name ")") ;
component_choice_list ::= (component_selector_name ("|" component_selector_name)*) | "others" ;
component_declaration ::= defining_identifier_list ":" component_definition (":=" default_expression)? ";" ;
discrete_choice_list ::= discrete_choice ("|" discrete_choice)* ;
subtype_declaration ::= "subtype" defining_identifier "is" subtype_indication ";" ;
private_type_declaration ::= "type" defining_identifier discriminant_part? "is" ("abstract"? "tagged")? "limited"? "private" ";" ;
proper_body ::= subprogram_body | package_body | task_body | protected_body ;
indexed_component ::= prefix "(" expression ("," expression)* ")" ;
requeue_statement ::= "requeue" entry_name ("with" "abort")? ";" ;
positional_array_aggregate ::= ("(" expression "," expression ("," expression)* ")") | ("(" expression ("," expression)* "," "others" "=>" expression ")") ;
entry_declaration ::= "entry" defining_identifier ("(" discrete_subtype_definition ")")? parameter_profile ";" ;
formal_floating_point_definition ::= "digits" "<>" ;
body_stub ::= subprogram_body_stub | package_body_stub | task_body_stub | protected_body_stub ;
enumeration_representation_clause ::= "for" first_subtype_local_name "use" enumeration_aggregate ";" ;
formal_type_definition ::= formal_private_type_definition | formal_derived_type_definition | formal_discrete_type_definition | formal_signed_integer_type_definition | formal_modular_type_definition | formal_floating_point_definition | formal_ordinary_fixed_point_definition | formal_decimal_fixed_point_definition | formal_array_type_definition | formal_access_type_definition ;
use_clause ::= use_package_clause | use_type_clause ;
discriminant_specification ::= (defining_identifier_list ":" subtype_mark (":=" default_expression)?) | (defining_identifier_list ":" access_definition (":=" default_expression)?) ;
discriminant_association ::= (discriminant_selector_name ("|" discriminant_selector_name)* "=>")? expression ;
simple_statement ::= null_statement | assignment_statement | exit_statement | goto_statement | procedure_call_statement | return_statement | entry_call_statement | requeue_statement | delay_statement | abort_statement | raise_statement | code_statement ;
pragma_argument_association ::= ((pragma_argument_identifier "=>")? name) | ((pragma_argument_identifier "=>")? expression) ;
representation_clause ::= attribute_definition_clause | enumeration_representation_clause | record_representation_clause | at_clause ;
direct_name ::= identifier | operator_symbol ;
abort_statement ::= "abort" task_name ("," task_name)* ";" ;
case_statement ::= "case" expression "is" case_statement_alternative case_statement_alternative* "end" "case" ";" ;
return_statement ::= "return" expression? ";" ;
range_constraint ::= "range" range_definition ;
generic_renaming_declaration ::= ("generic" "package" defining_program_unit_name "renames" generic_package_name ";") | ("generic" "procedure" defining_program_unit_name "renames" generic_procedure_name ";") | ("generic" "function" defining_program_unit_name "renames" generic_function_name ";") ;
highest_precedence_operator ::= "**" | "abs" | "not" ;
task_body ::= "task" body defining_identifier "is" declarative_part "begin" handled_sequence_of_statements "end" task_identifier? ";" ;
qualified_expression ::= (subtype_mark "'" "(" expression ")") | (subtype_mark "'" aggregate) ;
logical_operator ::= "and" | "or" | "xor" ;
generic_association ::= (generic_formal_parameter_selector_name "=>")? explicit_generic_actual_parameter ;
triggering_alternative ::= triggering_statement sequence_of_statements? ;
library_item ::= ("private"? library_unit_declaration) | library_unit_body | ("private"? library_unit_renaming_declaration) ;
component_item ::= component_declaration | representation_clause ;
timed_entry_call ::= "select" entry_call_alternative "or" delay_alternative "end" "select" ";" ;
parameter_profile ::= formal_part? ;
generic_declaration ::= generic_subprogram_declaration | generic_package_declaration ;
delay_until_statement ::= "delay" "until" delay_expression ";" ;
parent_unit_name ::= name ;
scalar_constraint ::= range_constraint | digits_constraint | delta_constraint ;
package_renaming_declaration ::= "package" defining_program_unit_name renamespackage_name ";" ;
case_statement_alternative ::= "when" discrete_choice_list "=>" sequence_of_statements ;
access_definition ::= "access" subtype_mark ;
library_unit_renaming_declaration ::= package_renaming_declaration | generic_renaming_declaration | subprogram_renaming_declaration ;
defining_operator_symbol ::= operator_symbol ;
entry_index_specification ::= "for" defining_identifier "in" discrete_subtype_definition ;
with_clause ::= "with" library_unit_name ("," library_unit_name)* ";" ;
formal_derived_type_definition ::= "abstract"? "new" subtype_mark ("with" "private")? ;
package_declaration ::= package_specification ";" ;
record_definition ::= ("record" component_list "end" "record") | ("null" "record") ;
--------------------ada::lncs-2219.bgf--------------------
context_clause ::= context_item* ;
subprogram_declaration ::= subprogram_specification ";" ;
first_bit ::= static_simple_expression ;
generic_formal_parameter_declaration ::= formal_object_declaration | formal_type_declaration | formal_subprogram_declaration | formal_package_declaration ;
at_clause ::= "for" direct_name "use" "at" expression ";" ;
package_body ::= "package" "body" defining_program_unit_name "is" declarative_part ("begin" handled_sequence_of_statements)? "end" ((parent_unit_name ".")? identifier)? ";" ;
discriminant_constraint ::= "(" discriminant_association ("," discriminant_association)* ")" ;
general_access_modifier ::= "all" | "constant" ;
defining_designator ::= defining_program_unit_name | defining_operator_symbol ;
library_unit_body ::= subprogram_body | package_body ;
attribute_definition_clause ::= ("for" local_name "'" attribute_designator "use" expression ";") | ("for" local_name "'" attribute_designator "use" name ";") ;
delay_relative_statement ::= "delay" delay_expression ";" ;
accept_statement ::= "accept" entry_direct_name ("(" entry_index ")")? parameter_profile ("do" handled_sequence_of_statements "end" entry_identifier?)? ";" ;
accept_alternative ::= accept_statement sequence_of_statements? ;
type_declaration ::= full_type_declaration | incomplete_type_declaration | private_type_declaration | private_extension_declaration ;
formal_modular_type_definition ::= "mod" "<>" ;
component_clause ::= component_local_name "at" position "range" first_bit ".." last_bit ";" ;
task_body_stub ::= "task" "body" defining_identifier "is" "separate" ";" ;
delay_alternative ::= delay_statement sequence_of_statements? ;
subprogram_body_stub ::= subprogram_specification "is" "separate" ";" ;
formal_access_type_definition ::= access_type_definition ;
parameter_specification ::= (defining_identifier_list ":" mode subtype_mark (":=" default_expression)?) | (defining_identifier_list ":" access_definition (":=" default_expression)?) ;
defining_identifier_list ::= defining_identifier ("," defining_identifier)* ;
select_statement ::= selective_accept | timed_entry_call | conditional_entry_call | asynchronous_select ;
parameter_association ::= (formal_parameter_selector_name "=>")? explicit_actual_parameter ;
selector_name ::= identifier | character_literal | operator_symbol ;
select_alternative ::= accept_alternative | delay_alternative | terminate_alternative ;
entry_barrier ::= "when" condition ;
basic_declaration ::= type_declaration | object_declaration | subprogram_declaration | package_declaration | exception_declaration | generic_instantiation | subtype_declaration | number_declaration | abstract_subprogram_declaration | renaming_declaration | generic_declaration ;
declarative_item ::= basic_declarative_item | body ;
generic_instantiation ::= ("package" defining_program_unit_name "is" "new" generic_package_name generic_actual_part? ";") | ("procedure" defining_program_unit_name "is" "new" generic_procedure_name generic_actual_part? ";") | ("function" defining_designator "is" "new" generic_function_name generic_actual_part? ";") ;
access_to_subprogram_definition ::= ("access" "protected"? "procedure" parameter_profile) | ("access" "protected"? "function" parameter_and_result_profile) ;
last_bit ::= static_simple_expression ;
explicit_actual_parameter ::= expression | variable_name ;
local_name ::= direct_name | (direct_name "'" attribute_designator) | library_unit_name ;
ancestor_part ::= expression | subtype_mark ;
raise_statement ::= "raise" exception_name? ";" ;
unknown_discriminant_part ::= "(<>)" ;
generic_formal_part ::= "generic" (generic_formal_parameter_declaration | use_clause)* ;
compound_statement ::= if_statement | loop_statement | accept_statement | case_statement | block_statement | select_statement ;
unconstrained_array_definition ::= "array" "(" index_subtype_definition ("," index_subtype_definition)* ")" "of" component_definition ;
protected_body_stub ::= "protected" "body" defining_identifier "is" "separate" ";" ;
array_component_association ::= discrete_choice_list "=>" expression ;
basic_declarative_item ::= basic_declaration | aspect_clause | use_clause ;
single_task_declaration ::= "task" defining_identifier ("is" task_definition)? ";" ;
real_type_definition ::= floating_point_definition | fixed_point_definition ;
digits_constraint ::= "digits" static_expression range_constraint? ;
component_definition ::= "aliased"? subtype_indication ;
asynchronous_select ::= "select" triggering_alternative "then" "abort" abortable_part "end" "select" ";" ;
defining_character_literal ::= character_literal ;
protected_operation_declaration ::= subprogram_declaration | entry_declaration | aspect_clause ;
subprogram_renaming_declaration ::= subprogram_specification "renames" callable_entity_name ";" ;
record_component_association ::= (component_choice_list "=>")? expression ;
terminate_alternative ::= "terminate" ";" ;
string_element ::= """" | non_quotation_mark_graphic_character ;
if_statement ::= "if" condition "then" sequence_of_statements ("elsif" condition "then" sequence_of_statements)* ("else" sequence_of_statements)? "end" "if" ";" ;
fixed_point_definition ::= ordinary_fixed_point_definition | decimal_fixed_point_definition ;
formal_decimal_fixed_point_definition ::= "delta" "<>" "digits" "<>" ;
formal_object_declaration ::= defining_identifier_list ":" mode subtype_mark (":=" default_expression)? ";" ;
package_specification ::= "package" defining_program_unit_name "is" basic_declarative_item* ("private" basic_declarative_item*)? "end" ((parent_unit_name ".")? identifier)? ;
ordinary_fixed_point_definition ::= "delta" static_expression real_range_specification ;
letter_or_digit ::= identifier_letter | digit ;
default_name ::= name ;
declarative_part ::= declarative_item* ;
enumeration_aggregate ::= array_aggregate ;
entry_index ::= expression ;
index_subtype_definition ::= subtype_mark "range" "<>" ;
delta_constraint ::= "delta" static_expression range_constraint? ;
constrained_array_definition ::= "array" "(" discrete_subtype_definition ("," discrete_subtype_definition)* ")" "of" component_definition ;
decimal_literal ::= numeral ("." numeral)? exponent? ;
extension_aggregate ::= "(" ancestor_part "with" record_component_association_list ")" ;
private_extension_declaration ::= "type" defining_identifier discriminant_part? "is" "abstract"? "new" ancestor_subtype_indication "with" "private" ";" ;
subprogram_body ::= subprogram_specification "is" declarative_part "begin" handled_sequence_of_statements "end" designator? ";" ;
abstract_subprogram_declaration ::= subprogram_specification "is" "abstract" ";" ;
relational_operator ::= "=" | "/=" | "<" | "<=" | ">" | ">=" ;
procedure_call_statement ::= (procedure_name ";") | (procedure_prefix actual_parameter_part ";") ;
null_statement ::= "null" ";" ;
object_renaming_declaration ::= defining_identifier ":" subtype_mark "renames" object_name ";" ;
renaming_declaration ::= object_renaming_declaration | exception_renaming_declaration | package_renaming_declaration | subprogram_renaming_declaration | generic_renaming_declaration ;
incomplete_type_declaration ::= "type" defining_identifier discriminant_part? ";" ;
record_representation_clause ::= "for" first_subtype_local_name "use" "record" mod_clause? component_clause* "end" "record" ";" ;
delay_statement ::= delay_until_statement | delay_relative_statement ;
single_protected_declaration ::= "protected" defining_identifier "is" protected_definition ";" ;
formal_package_declaration ::= "with" "package" defining_identifier "is" "new" generic_package_name formal_package_actual_part ";" ;
handled_sequence_of_statements ::= sequence_of_statements ("exception" exception_handler exception_handler*)? ;
discrete_choice ::= expression | discrete_range | "others" ;
extended_digit ::= digit | "A" | "B" | "C" | "D" | "E" | "F" ;
protected_element_declaration ::= protected_operation_declaration | component_declaration ;
exception_renaming_declaration ::= defining_identifier ":" "exception" "renames" exception_name ";" ;
full_type_declaration ::= ("type" defining_identifier known_discriminant_part? "is" type_definition ";") | task_type_declaration | protected_type_declaration ;
formal_signed_integer_type_definition ::= "range" "<>" ;
defining_program_unit_name ::= (parent_unit_name ".")? defining_identifier ;
context_item ::= with_clause | use_clause ;
record_extension_part ::= "with" record_definition ;
component_list ::= (component_item component_item*) | (component_item* variant_part) | ("null" ";") ;
code_statement ::= qualified_expression ";" ;
access_type_definition ::= access_to_object_definition | access_to_subprogram_definition ;
generic_actual_part ::= "(" generic_association ("," generic_association)* ")" ;
protected_operation_item ::= subprogram_declaration | subprogram_body | entry_body | aspect_clause ;
triggering_statement ::= entry_call_statement | delay_statement ;
actual_parameter_part ::= "(" parameter_association ("," parameter_association)* ")" ;
generic_package_declaration ::= generic_formal_part package_specification ";" ;
character_literal ::= "'" graphic_character "'" ;
attribute_designator ::= (identifier ("(" static_expression ")")?) | "Access" | "Delta" | "Digits" ;
known_discriminant_part ::= "(" discriminant_specification (";" discriminant_specification)* ")" ;
composite_constraint ::= index_constraint | discriminant_constraint ;
loop_statement ::= (loop_statement_identifier ":")? iteration_scheme? "loop" sequence_of_statements "end" "loop" loop_identifier? ";" ;
protected_body ::= "protected" "body" defining_identifier "is" protected_operation_item* "end" protected_identifier? ";" ;
operator_symbol ::= string_literal ;
goto_statement ::= "goto" label_name ";" ;
array_type_definition ::= unconstrained_array_definition | constrained_array_definition ;
based_numeral ::= extended_digit (underline? extended_digit)* ;
graphic_character ::= identifier_letter | digit | space_character | special_character ;
exception_choice ::= exception_name | "others" ;
discriminant_part ::= unknown_discriminant_part | known_discriminant_part ;
implicit_dereference ::= name ;
defining_identifier ::= identifier ;
exit_statement ::= "exit" loop_name? ("when" condition)? ";" ;
task_item ::= entry_declaration | aspect_clause ;
exception_declaration ::= defining_identifier_list ":" "exception" ";" ;
record_type_definition ::= ("abstract"? "tagged")? "limited"? record_definition ;
access_to_object_definition ::= "access" general_access_modifier? subtype_indication ;
abortable_part ::= sequence_of_statements ;
multiplying_operator ::= "*" | "/" | "mod" | "rem" ;
protected_definition ::= protected_operation_declaration* ("private" protected_element_declaration*)? "end" protected_identifier? ;
number_declaration ::= defining_identifier_list ":" "constant" ":=" static_expression ";" ;
formal_discrete_type_definition ::= "(<>)" ;
string_literal ::= """ string_element* """ ;
compilation_unit ::= (context_clause library_item) | (context_clause subunit) ;
enumeration_type_definition ::= "(" enumeration_literal_specification ("," enumeration_literal_specification)* ")" ;
assignment_statement ::= variable_name ":=" expression ";" ;
numeric_literal ::= decimal_literal | based_literal ;
decimal_fixed_point_definition ::= "delta" static_expression "digits" static_expression real_range_specification? ;
floating_point_definition ::= "digits" static_expression real_range_specification? ;
enumeration_literal_specification ::= defining_identifier | defining_character_literal ;
formal_ordinary_fixed_point_definition ::= "delta" "<>" ;
object_declaration ::= (defining_identifier_list ":" "aliased"? "constant"? subtype_indication (":=" expression)? ";") | (defining_identifier_list ":" "aliased"? "constant"? array_type_definition (":=" expression)? ";") | single_task_declaration | single_protected_declaration ;
entry_call_alternative ::= entry_call_statement sequence_of_statements? ;
statement_identifier ::= direct_name ;
type_definition ::= enumeration_type_definition | real_type_definition | record_type_definition | derived_type_definition | integer_type_definition | array_type_definition | access_type_definition ;
discrete_range ::= discrete_subtype_indication | range ;
integer_type_definition ::= signed_integer_type_definition | modular_type_definition ;
package_body_stub ::= "package" "body" defining_identifier "is" "separate" ";" ;
unary_adding_operator ::= "+" | "-" ;
subtype_mark ::= subtype_name ;
task_type_declaration ::= "task" "type" defining_identifier known_discriminant_part? ("is" task_definition)? ";" ;
variant_part ::= "case" discriminant_direct_name "is" variant+ "end" "case" ";" ;
formal_private_type_definition ::= ("abstract"? "tagged")? "limited"? "private" ;
index_constraint ::= "(" discrete_range ("," discrete_range)* ")" ;
attribute_reference ::= prefix "'" attribute_designator ;
generic_subprogram_declaration ::= generic_formal_part subprogram_specification ";" ;
protected_type_declaration ::= "protected" "type" defining_identifier known_discriminant_part? "is" protected_definition ";" ;
range_attribute_reference ::= prefix "'" range_attribute_designator ;
function_call ::= function_name | (function_prefix actual_parameter_part) ;
conditional_entry_call ::= "select" entry_call_alternative "else" sequence_of_statements "end" "select" ";" ;
real_range_specification ::= "range" static_simple_expression ".." static_simple_expression ;
explicit_dereference ::= name "." "all" ;
use_type_clause ::= "use" "type" subtype_mark ("," subtype_mark)* ";" ;
exception_handler ::= "when" (choice_parameter_specification ":")? exception_choice ("|" exception_choice)* "=>" sequence_of_statements ;
selected_component ::= prefix "." selector_name ;
range_attribute_designator ::= "Range" ("(" static_expression ")")? ;
array_aggregate ::= positional_array_aggregate | named_array_aggregate ;
default_expression ::= expression ;
derived_type_definition ::= "abstract"? "new" parent_subtype_indication record_extension_part? ;
signed_integer_type_definition ::= "range" static_simple_expression ".." static_simple_expression ;
entry_body_formal_part ::= ("(" entry_index_specification ")")? parameter_profile ;
named_array_aggregate ::= "(" array_component_association ("," array_component_association)* ")" ;
loop_parameter_specification ::= defining_identifier "in" "reverse"? discrete_subtype_definition ;
record_aggregate ::= "(" record_component_association_list ")" ;
formal_subprogram_declaration ::= "with" subprogram_specification ("is" subprogram_default)? ";" ;
choice_parameter_specification ::= defining_identifier ;
entry_body ::= "entry" defining_identifier entry_body_formal_part entry_barrier "is" declarative_part "begin" handled_sequence_of_statements "end" entry_identifier? ";" ;
sequence_of_statements ::= statement statement* ;
task_definition ::= task_item* ("private" task_item*)? "end" task_identifier? ;
mod_clause ::= "at" "mod" static_expression ";" ;
record_component_association_list ::= (record_component_association ("," record_component_association)*) | ("null" "record") ;
explicit_generic_actual_parameter ::= expression | variable_name | subprogram_name | entry_name | subtype_mark | package_instance_name ;
selective_accept ::= "select" guard? select_alternative ("or" guard? select_alternative)* ("else" sequence_of_statements)? "end" "select" ";" ;
subprogram_specification ::= ("procedure" defining_program_unit_name parameter_profile) | ("function" defining_designator parameter_and_result_profile) ;
iteration_scheme ::= ("while" condition) | ("for" loop_parameter_specification) ;
subprogram_default ::= default_name | "<>" ;
formal_type_declaration ::= "type" defining_identifier discriminant_part? "is" formal_type_definition ";" ;
simple_expression ::= unary_adding_operator? term (binary_adding_operator term)* ;
parameter_and_result_profile ::= formal_part? "return" subtype_mark ;
binary_adding_operator ::= "+" | "-" | "&" ;
library_unit_declaration ::= subprogram_declaration | package_declaration | generic_declaration | generic_instantiation ;
formal_part ::= "(" parameter_specification (";" parameter_specification)* ")" ;
modular_type_definition ::= "mod" static_expression ;
formal_array_type_definition ::= array_type_definition ;
subtype_indication ::= subtype_mark constraint? ;
use_package_clause ::= "use" package_name ("," package_name)* ";" ;
discrete_subtype_definition ::= discrete_subtype_indication | range ;
block_statement ::= (block_statement_identifier ":")? ("declare" declarative_part)? "begin" handled_sequence_of_statements "end" block_identifier? ";" ;
formal_package_actual_part ::= "(<>)" | (generic_actual_part?) ;
entry_call_statement ::= entry_name actual_parameter_part? ";" ;
type_conversion ::= (subtype_mark "(" expression ")") | (subtype_mark "(" name ")") ;
component_choice_list ::= (component_selector_name ("|" component_selector_name)*) | "others" ;
component_declaration ::= defining_identifier_list ":" component_definition (":=" default_expression)? ";" ;
aspect_clause ::= attribute_definition_clause | enumeration_representation_clause | record_representation_clause | at_clause ;
discrete_choice_list ::= discrete_choice ("|" discrete_choice)* ;
subtype_declaration ::= "subtype" defining_identifier "is" subtype_indication ";" ;
private_type_declaration ::= "type" defining_identifier discriminant_part? "is" ("abstract"? "tagged")? "limited"? "private" ";" ;
proper_body ::= subprogram_body | package_body | task_body | protected_body ;
indexed_component ::= prefix "(" expression ("," expression)* ")" ;
requeue_statement ::= "requeue" entry_name ("with" "abort")? ";" ;
positional_array_aggregate ::= ("(" expression "," expression ("," expression)* ")") | ("(" expression ("," expression)* "," "others" "=>" expression ")") ;
entry_declaration ::= "entry" defining_identifier ("(" discrete_subtype_definition ")")? parameter_profile ";" ;
formal_floating_point_definition ::= "digits" "<>" ;
body_stub ::= subprogram_body_stub | package_body_stub | task_body_stub | protected_body_stub ;
enumeration_representation_clause ::= "for" first_subtype_local_name "use" enumeration_aggregate ";" ;
formal_type_definition ::= formal_private_type_definition | formal_derived_type_definition | formal_discrete_type_definition | formal_signed_integer_type_definition | formal_modular_type_definition | formal_floating_point_definition | formal_ordinary_fixed_point_definition | formal_decimal_fixed_point_definition | formal_array_type_definition | formal_access_type_definition ;
use_clause ::= use_package_clause | use_type_clause ;
discriminant_specification ::= (defining_identifier_list ":" subtype_mark (":=" default_expression)?) | (defining_identifier_list ":" access_definition (":=" default_expression)?) ;
discriminant_association ::= (discriminant_selector_name ("|" discriminant_selector_name)* "=>")? expression ;
based_literal ::= base "#" based_numeral ("." based_numeral)? "#" exponent? ;
simple_statement ::= null_statement | assignment_statement | goto_statement | return_statement | requeue_statement | abort_statement | code_statement | exit_statement | procedure_call_statement | entry_call_statement | delay_statement | raise_statement ;
pragma_argument_association ::= ((pragma_argument_identifier "=>")? name) | ((pragma_argument_identifier "=>")? expression) ;
direct_name ::= identifier | operator_symbol ;
abort_statement ::= "abort" task_name ("," task_name)* ";" ;
return_statement ::= "return" expression? ";" ;
case_statement ::= "case" expression "is" case_statement_alternative case_statement_alternative* "end" "case" ";" ;
range_constraint ::= "range" range ;
generic_renaming_declaration ::= ("generic" "package" defining_program_unit_name "renames" generic_package_name ";") | ("generic" "procedure" defining_program_unit_name "renames" generic_procedure_name ";") | ("generic" "function" defining_program_unit_name "renames" generic_function_name ";") ;
highest_precedence_operator ::= "**" | "abs" | "not" ;
task_body ::= "task" "body" defining_identifier "is" declarative_part "begin" handled_sequence_of_statements "end" task_identifier? ";" ;
qualified_expression ::= (subtype_mark "'(" expression ")") | (subtype_mark "'" aggregate) ;
logical_operator ::= "and" | "or" | "xor" ;
generic_association ::= (generic_formal_parameter_selector_name "=>")? explicit_generic_actual_parameter ;
triggering_alternative ::= triggering_statement sequence_of_statements? ;
library_item ::= ("private"? library_unit_declaration) | library_unit_body | ("private"? library_unit_renaming_declaration) ;
component_item ::= component_declaration | aspect_clause ;
timed_entry_call ::= "select" entry_call_alternative "or" delay_alternative "end" "select" ";" ;
parameter_profile ::= formal_part? ;
generic_declaration ::= generic_subprogram_declaration | generic_package_declaration ;
delay_until_statement ::= "delay" "until" delay_expression ";" ;
parent_unit_name ::= name ;
scalar_constraint ::= range_constraint | digits_constraint | delta_constraint ;
package_renaming_declaration ::= "package" defining_program_unit_name "renames" package_name ";" ;
case_statement_alternative ::= "when" discrete_choice_list "=>" sequence_of_statements ;
access_definition ::= "access" subtype_mark ;
library_unit_renaming_declaration ::= package_renaming_declaration | generic_renaming_declaration | subprogram_renaming_declaration ;
defining_operator_symbol ::= operator_symbol ;
entry_index_specification ::= "for" defining_identifier "in" discrete_subtype_definition ;
with_clause ::= "with" library_unit_name ("," library_unit_name)* ";" ;
formal_derived_type_definition ::= "abstract"? "new" subtype_mark ("with" "private")? ;
package_declaration ::= package_specification ";" ;
record_definition ::= ("record" component_list "end" "record") | ("null" "record") ;
--------------------ada::lncs-4348.bgf--------------------
context_clause ::= context_item* ;
subprogram_declaration ::= overriding_indicator? subprogram_specification ";" ;
general_access_modifier ::= "all" | "constant" ;
package_body ::= "package" "body" defining_program_unit_name "is" declarative_part ("begin" handled_sequence_of_statements)? "end" ((parent_unit_name ".")? identifier)? ";" ;
delay_relative_statement ::= "delay" delay_expression ";" ;
nonlimited_with_clause ::= "private"? "with" library_unit_name ("," library_unit_name)* ";" ;
type_declaration ::= full_type_declaration | incomplete_type_declaration | private_type_declaration | private_extension_declaration ;
formal_modular_type_definition ::= "mod" "<>" ;
generic_formal_parameter_selector_name ::= selector_name ;
defining_identifier_list ::= defining_identifier ("," defining_identifier)* ;
select_statement ::= selective_accept | timed_entry_call | conditional_entry_call | asynchronous_select ;
block_statement_identifier ::= statement_identifier ;
pragma_argument_identifier ::= identifier ;
declarative_item ::= basic_declarative_item | body ;
restriction_parameter_argument ::= name | expression ;
access_to_subprogram_definition ::= ("access" "protected"? "procedure" parameter_profile) | ("access" "protected"? "function" parameter_and_result_profile) ;
label_statement_identifier ::= statement_identifier ;
last_bit ::= static_simple_expression ;
interface_list ::= interface_subtype_mark ("and" interface_subtype_mark)* ;
limited_with_clause ::= "limited" "private"? "with" library_unit_name ("," library_unit_name)* ";" ;
library_unit_name ::= name ;
generic_procedure_name ::= name ;
compound_statement ::= if_statement | loop_statement | extended_return_statement | accept_statement | case_statement | block_statement | select_statement ;
generic_formal_part ::= "generic" (generic_formal_parameter_declaration | use_clause)* ;
protected_identifier ::= identifier ;
protected_body_stub ::= "protected" "body" defining_identifier "is" "separate" ";" ;
basic_declarative_item ::= basic_declaration | aspect_clause | use_clause ;
component_definition ::= ("aliased"? subtype_indication) | ("aliased"? access_definition) ;
formal_decimal_fixed_point_definition ::= "delta" "<>" "digits" "<>" ;
default_name ::= name ;
enumeration_aggregate ::= array_aggregate ;
index_subtype_definition ::= subtype_mark "range" "<>" ;
discriminant_direct_name ::= direct_name ;
constrained_array_definition ::= "array" "(" discrete_subtype_definition ("," discrete_subtype_definition)* ")" "of" component_definition ;
decimal_literal ::= numeral ("." numeral)? exponent? ;
extension_aggregate ::= "(" ancestor_part "with" record_component_association_list ")" ;
private_extension_declaration ::= "type" defining_identifier discriminant_part? "is" "abstract"? ("limited" | "synchronized")? "new" ancestor_subtype_indication ("and" interface_list)? "with" "private" ";" ;
package_instance_name ::= name ;
procedure_call_statement ::= (procedure_name ";") | (procedure_prefix actual_parameter_part ";") ;
interface_subtype_mark ::= subtype_mark ;
formal_package_association ::= generic_association | (generic_formal_parameter_selector_name "=><>") ;
renaming_declaration ::= object_renaming_declaration | exception_renaming_declaration | package_renaming_declaration | subprogram_renaming_declaration | generic_renaming_declaration ;
static_simple_expression ::= simple_expression ;
record_representation_clause ::= "for" first_subtype_local_name "use" "record" mod_clause? component_clause* "end" "record" ";" ;
delay_statement ::= delay_until_statement | delay_relative_statement ;
single_protected_declaration ::= "protected" defining_identifier "is" ("new" interface_list "with")? protected_definition ";" ;
non_end_of_line_character ::= "character" ;
discrete_choice ::= expression | discrete_range | "others" ;
subprogram_name ::= name ;
exception_renaming_declaration ::= defining_identifier ":" "exception" "renames" exception_name ";" ;
full_type_declaration ::= ("type" defining_identifier known_discriminant_part? "is" type_definition ";") | task_type_declaration | protected_type_declaration ;
defining_program_unit_name ::= (parent_unit_name ".")? defining_identifier ;
task_identifier ::= identifier ;
context_item ::= with_clause | use_clause ;
record_extension_part ::= "with" record_definition ;
code_statement ::= qualified_expression ";" ;
generic_actual_part ::= "(" generic_association ("," generic_association)* ")" ;
protected_operation_item ::= subprogram_declaration | subprogram_body | entry_body | aspect_clause ;
block_identifier ::= identifier ;
actual_parameter_part ::= "(" parameter_association ("," parameter_association)* ")" ;
character_literal ::= "'" graphic_character "'" ;
attribute_designator ::= (identifier ("(" static_expression ")")?) | "Access" | "Delta" | "Digits" ;
known_discriminant_part ::= "(" discriminant_specification (";" discriminant_specification)* ")" ;
loop_statement ::= (loop_statement_identifier ":")? iteration_scheme? "loop" sequence_of_statements "end" "loop" loop_identifier? ";" ;
protected_body ::= "protected" "body" defining_identifier "is" protected_operation_item* "end" protected_identifier? ";" ;
operator_symbol ::= string_literal ;
goto_statement ::= "goto" label_name ";" ;
restriction_parameter_identifier ::= identifier ;
array_type_definition ::= unconstrained_array_definition | constrained_array_definition ;
based_numeral ::= extended_digit (underline? extended_digit)* ;
exception_choice ::= exception_name | "others" ;
discriminant_part ::= unknown_discriminant_part | known_discriminant_part ;
defining_identifier ::= identifier ;
exit_statement ::= "exit" loop_name? ("when" condition)? ";" ;
task_item ::= entry_declaration | aspect_clause ;
object_name ::= name ;
exception_declaration ::= defining_identifier_list ":" "exception" ";" ;
access_to_object_definition ::= "access" general_access_modifier? subtype_indication ;
record_type_definition ::= ("abstract"? "tagged")? "limited"? record_definition ;
string_expression ::= expression ;
number_declaration ::= defining_identifier_list ":" "constant" ":=" static_expression ";" ;
enumeration_type_definition ::= "(" enumeration_literal_specification ("," enumeration_literal_specification)* ")" ;
procedure_prefix ::= prefix ;
numeric_literal ::= decimal_literal | based_literal ;
decimal_fixed_point_definition ::= "delta" static_expression "digits" static_expression real_range_specification? ;
procedure_or_entry_call ::= procedure_call_statement | entry_call_statement ;
enumeration_literal_specification ::= defining_identifier | defining_character_literal ;
entry_call_alternative ::= procedure_or_entry_call sequence_of_statements? ;
statement_identifier ::= direct_name ;
type_definition ::= enumeration_type_definition | real_type_definition | record_type_definition | derived_type_definition | integer_type_definition | array_type_definition | access_type_definition | interface_type_definition ;
identifier_extend ::= mark_non_spacing | mark_spacing_combining | number_decimal | punctuation_connector | other_format ;
task_type_declaration ::= "task" "type" defining_identifier known_discriminant_part? ("is" ("new" interface_list "with")? task_definition)? ";" ;
variant_part ::= "case" discriminant_direct_name "is" variant+ "end" "case" ";" ;
index_constraint ::= "(" discrete_range ("," discrete_range)* ")" ;
attribute_reference ::= prefix "'" attribute_designator ;
generic_subprogram_declaration ::= generic_formal_part subprogram_specification ";" ;
extended_return_statement ::= "return" defining_identifier ":" "aliased"? return_subtype_indication (":=" expression)? ("do" handled_sequence_of_statements "end" "return")? ";" ;
range_attribute_reference ::= prefix "'" range_attribute_designator ;
conditional_entry_call ::= "select" entry_call_alternative "else" sequence_of_statements "end" "select" ";" ;
component_local_name ::= local_name ;
real_range_specification ::= "range" static_simple_expression ".." static_simple_expression ;
use_type_clause ::= "use" "type" subtype_mark ("," subtype_mark)* ";" ;
exception_handler ::= "when" (choice_parameter_specification ":")? exception_choice ("|" exception_choice)* "=>" sequence_of_statements ;
range_attribute_designator ::= "Range" ("(" static_expression ")")? ;
array_aggregate ::= positional_array_aggregate | named_array_aggregate ;
null_procedure_declaration ::= overriding_indicator? procedure_specification "is" "null" ";" ;
default_expression ::= expression ;
derived_type_definition ::= "abstract"? "limited"? "new" parent_subtype_indication (("and" interface_list)? record_extension_part)? ;
entry_body_formal_part ::= ("(" entry_index_specification ")")? parameter_profile ;
record_aggregate ::= "(" record_component_association_list ")" ;
entry_body ::= "entry" defining_identifier entry_body_formal_part entry_barrier "is" declarative_part "begin" handled_sequence_of_statements "end" entry_identifier? ";" ;
mod_clause ::= "at" "mod" static_expression ";" ;
record_component_association_list ::= (record_component_association ("," record_component_association)*) | ("null" "record") ;
identifier_start ::= letter_uppercase | letter_lowercase | letter_titlecase | letter_modifier | letter_other | number_letter ;
explicit_generic_actual_parameter ::= expression | variable_name | subprogram_name | entry_name | subtype_mark | package_instance_name ;
iteration_scheme ::= ("while" condition) | ("for" loop_parameter_specification) ;
loop_name ::= name ;
subprogram_default ::= default_name | "<>" | "null" ;
parameter_and_result_profile ::= (formal_part? "return" null_exclusion? subtype_mark) | (formal_part? "return" access_definition) ;
simple_expression ::= unary_adding_operator? term (binary_adding_operator term)* ;
binary_adding_operator ::= "+" | "-" | "&" ;
formal_array_type_definition ::= array_type_definition ;
subtype_indication ::= null_exclusion? subtype_mark constraint? ;
use_package_clause ::= "use" package_name ("," package_name)* ";" ;
formal_package_actual_part ::= ("(" ("others" "=>")? "<>)") | (generic_actual_part?) | ("(" formal_package_association ("," formal_package_association)* ("," "others" "=><>")? ")") ;
type_conversion ::= (subtype_mark "(" expression ")") | (subtype_mark "(" name ")") ;
component_declaration ::= defining_identifier_list ":" component_definition (":=" default_expression)? ";" ;
aspect_clause ::= attribute_definition_clause | enumeration_representation_clause | record_representation_clause | at_clause ;
private_type_declaration ::= "type" defining_identifier discriminant_part? "is" ("abstract"? "tagged")? "limited"? "private" ";" ;
proper_body ::= subprogram_body | package_body | task_body | protected_body ;
indexed_component ::= prefix "(" expression ("," expression)* ")" ;
requeue_statement ::= "requeue" entry_name ("with" "abort")? ";" ;
ancestor_subtype_indication ::= subtype_indication ;
entry_declaration ::= overriding_indicator? "entry" defining_identifier ("(" discrete_subtype_definition ")")? parameter_profile ";" ;
body_stub ::= subprogram_body_stub | package_body_stub | task_body_stub | protected_body_stub ;
component_selector_name ::= selector_name ;
enumeration_representation_clause ::= "for" first_subtype_local_name "use" enumeration_aggregate ";" ;
formal_type_definition ::= formal_private_type_definition | formal_derived_type_definition | formal_discrete_type_definition | formal_signed_integer_type_definition | formal_modular_type_definition | formal_floating_point_definition | formal_ordinary_fixed_point_definition | formal_decimal_fixed_point_definition | formal_array_type_definition | formal_access_type_definition | formal_interface_type_definition ;
use_clause ::= use_package_clause | use_type_clause ;
discriminant_specification ::= (defining_identifier_list ":" null_exclusion? subtype_mark (":=" default_expression)?) | (defining_identifier_list ":" access_definition (":=" default_expression)?) ;
loop_identifier ::= identifier ;
discriminant_association ::= (discriminant_selector_name ("|" discriminant_selector_name)* "=>")? expression ;
simple_statement ::= null_statement | assignment_statement | goto_statement | simple_return_statement | requeue_statement | abort_statement | code_statement | exit_statement | procedure_call_statement | entry_call_statement | delay_statement | raise_statement ;
pragma_argument_association ::= ((pragma_argument_identifier "=>")? name) | ((pragma_argument_identifier "=>")? expression) ;
direct_name ::= identifier | operator_symbol ;
abort_statement ::= "abort" task_name ("," task_name)* ";" ;
case_statement ::= "case" expression "is" case_statement_alternative case_statement_alternative* "end" "case" ";" ;
generic_renaming_declaration ::= ("generic" "package" defining_program_unit_name "renames" generic_package_name ";") | ("generic" "procedure" defining_program_unit_name "renames" generic_procedure_name ";") | ("generic" "function" defining_program_unit_name "renames" generic_function_name ";") ;
highest_precedence_operator ::= "**" | "abs" | "not" ;
null_exclusion ::= "not" "null" ;
component_item ::= component_declaration | aspect_clause ;
parameter_profile ::= formal_part? ;
generic_declaration ::= generic_subprogram_declaration | generic_package_declaration ;
delay_until_statement ::= "delay" "until" delay_expression ";" ;
parent_unit_name ::= name ;
boolean_expression ::= expression ;
case_statement_alternative ::= "when" discrete_choice_list "=>" sequence_of_statements ;
access_definition ::= (null_exclusion? "access" "constant"? subtype_mark) | (null_exclusion? "access" "protected"? "procedure" parameter_profile) | (null_exclusion? "access" "protected"? "function" parameter_and_result_profile) ;
discriminant_selector_name ::= selector_name ;
library_unit_renaming_declaration ::= package_renaming_declaration | generic_renaming_declaration | subprogram_renaming_declaration ;
defining_operator_symbol ::= operator_symbol ;
static_expression ::= expression ;
entry_index_specification ::= "for" defining_identifier "in" discrete_subtype_definition ;
with_clause ::= limited_with_clause | nonlimited_with_clause ;
formal_derived_type_definition ::= "abstract"? ("limited" | "synchronized")? "new" subtype_mark (("and" interface_list)? "with" "private")? ;
task_name ::= name ;
package_declaration ::= package_specification ";" ;
first_bit ::= static_simple_expression ;
restriction_identifier ::= identifier ;
generic_formal_parameter_declaration ::= formal_object_declaration | formal_type_declaration | formal_subprogram_declaration | formal_package_declaration ;
at_clause ::= "for" direct_name "use" "at" expression ";" ;
discriminant_constraint ::= "(" discriminant_association ("," discriminant_association)* ")" ;
defining_designator ::= defining_program_unit_name | defining_operator_symbol ;
library_unit_body ::= subprogram_body | package_body ;
attribute_definition_clause ::= ("for" local_name "'" attribute_designator "use" expression ";") | ("for" local_name "'" attribute_designator "use" name ";") ;
accept_statement ::= "accept" entry_direct_name ("(" entry_index ")")? parameter_profile ("do" handled_sequence_of_statements "end" entry_identifier?)? ";" ;
label_name ::= name ;
parent_subtype_indication ::= subtype_indication ;
accept_alternative ::= accept_statement sequence_of_statements? ;
component_clause ::= component_local_name "at" position "range" first_bit ".." last_bit ";" ;
task_body_stub ::= "task" "body" defining_identifier "is" "separate" ";" ;
delay_alternative ::= delay_statement sequence_of_statements? ;
subprogram_body_stub ::= overriding_indicator? subprogram_specification "is" "separate" ";" ;
parameter_specification ::= (defining_identifier_list ":" mode null_exclusion? subtype_mark (":=" default_expression)?) | (defining_identifier_list ":" access_definition (":=" default_expression)?) ;
formal_access_type_definition ::= access_type_definition ;
parameter_association ::= (formal_parameter_selector_name "=>")? explicit_actual_parameter ;
selector_name ::= identifier | character_literal | operator_symbol ;
select_alternative ::= accept_alternative | delay_alternative | terminate_alternative ;
entry_barrier ::= "when" condition ;
basic_declaration ::= type_declaration | object_declaration | subprogram_declaration | null_procedure_declaration | renaming_declaration | generic_declaration | subtype_declaration | number_declaration | abstract_subprogram_declaration | package_declaration | exception_declaration | generic_instantiation ;
non_quotation_mark_graphic_character ::= graphic_character ;
generic_instantiation ::= ("package" defining_program_unit_name "is" "new" generic_package_name generic_actual_part? ";") | (overriding_indicator? "procedure" defining_program_unit_name "is" "new" generic_procedure_name generic_actual_part? ";") | (overriding_indicator? "function" defining_designator "is" "new" generic_function_name generic_actual_part? ";") ;
package_name ::= name ;
explicit_actual_parameter ::= expression | variable_name ;
local_name ::= direct_name | (direct_name "'" attribute_designator) | library_unit_name ;
ancestor_part ::= expression | subtype_mark ;
raise_statement ::= ("raise" ";") | ("raise" exception_name ("with" string_expression)? ";") ;
function_specification ::= "function" defining_designator parameter_and_result_profile ;
unknown_discriminant_part ::= "(<>)" ;
unconstrained_array_definition ::= "array" "(" index_subtype_definition ("," index_subtype_definition)* ")" "of" component_definition ;
function_prefix ::= prefix ;
array_component_association ::= (discrete_choice_list "=>" expression) | (discrete_choice_list "=><>") ;
overriding_indicator ::= "not"? "overriding" ;
single_task_declaration ::= "task" defining_identifier ("is" ("new" interface_list "with")? task_definition)? ";" ;
real_type_definition ::= floating_point_definition | fixed_point_definition ;
digits_constraint ::= "digits" static_expression range_constraint? ;
delay_expression ::= expression ;
entry_direct_name ::= direct_name ;
asynchronous_select ::= "select" triggering_alternative "then" "abort" abortable_part "end" "select" ";" ;
defining_character_literal ::= character_literal ;
protected_operation_declaration ::= subprogram_declaration | entry_declaration | aspect_clause ;
subprogram_renaming_declaration ::= overriding_indicator? subprogram_specification "renames" callable_entity_name ";" ;
record_component_association ::= ((component_choice_list "=>")? expression) | (component_choice_list "=><>") ;
terminate_alternative ::= "terminate" ";" ;
string_element ::= """" | non_quotation_mark_graphic_character ;
if_statement ::= "if" condition "then" sequence_of_statements ("elsif" condition "then" sequence_of_statements)* ("else" sequence_of_statements)? "end" "if" ";" ;
fixed_point_definition ::= ordinary_fixed_point_definition | decimal_fixed_point_definition ;
formal_object_declaration ::= defining_identifier_list ":" mode null_exclusion? subtype_mark (":=" default_expression)? ";" defining_identifier_list ":" mode access_definition (":=" default_expression)? ";" ;
package_specification ::= "package" defining_program_unit_name "is" basic_declarative_item* ("private" basic_declarative_item*)? "end" ((parent_unit_name ".")? identifier)? ;
ordinary_fixed_point_definition ::= "delta" static_expression real_range_specification ;
declarative_part ::= declarative_item* ;
entry_index ::= expression ;
delta_constraint ::= "delta" static_expression range_constraint? ;
subprogram_body ::= overriding_indicator? subprogram_specification "is" declarative_part "begin" handled_sequence_of_statements "end" designator? ";" ;
relational_operator ::= "=" | "/=" | "<" | "<=" | ">" | ">=" ;
abstract_subprogram_declaration ::= overriding_indicator? subprogram_specification "is" "abstract" ";" ;
null_statement ::= "null" ";" ;
object_renaming_declaration ::= (defining_identifier ":" null_exclusion? subtype_mark "renames" object_name ";") | (defining_identifier ":" access_definition "renames" object_name ";") ;
incomplete_type_declaration ::= "type" defining_identifier discriminant_part? ("is" "tagged")? ";" ;
first_subtype_local_name ::= local_name ;
formal_package_declaration ::= "with" "package" defining_identifier "is" "new" generic_package_name formal_package_actual_part ";" ;
handled_sequence_of_statements ::= sequence_of_statements ("exception" exception_handler exception_handler*)? ;
return_subtype_indication ::= subtype_indication | access_definition ;
formal_concrete_subprogram_declaration ::= "with" subprogram_specification ("is" subprogram_default)? ";" ;
extended_digit ::= digit | "A" | "B" | "C" | "D" | "E" | "F" ;
protected_element_declaration ::= protected_operation_declaration | component_declaration ;
formal_signed_integer_type_definition ::= "range" "<>" ;
component_list ::= (component_item component_item*) | (component_item* variant_part) | ("null" ";") ;
access_type_definition ::= (null_exclusion? access_to_object_definition) | (null_exclusion? access_to_subprogram_definition) ;
triggering_statement ::= procedure_or_entry_call | delay_statement ;
generic_package_declaration ::= generic_formal_part package_specification ";" ;
procedure_specification ::= "procedure" defining_program_unit_name parameter_profile ;
entry_identifier ::= identifier ;
composite_constraint ::= index_constraint | discriminant_constraint ;
function_name ::= name ;
implicit_dereference ::= name ;
abortable_part ::= sequence_of_statements ;
formal_parameter_selector_name ::= selector_name ;
multiplying_operator ::= "*" | "/" | "mod" | "rem" ;
protected_definition ::= protected_operation_declaration* ("private" protected_element_declaration*)? "end" protected_identifier? ;
formal_discrete_type_definition ::= "(<>)" ;
string_literal ::= """ string_element* """ ;
compilation_unit ::= (context_clause library_item) | (context_clause subunit) ;
assignment_statement ::= variable_name ":=" expression ";" ;
exception_name ::= name ;
floating_point_definition ::= "digits" static_expression real_range_specification? ;
formal_ordinary_fixed_point_definition ::= "delta" "<>" ;
object_declaration ::= (defining_identifier_list ":" "aliased"? "constant"? subtype_indication (":=" expression)? ";") | (defining_identifier_list ":" "aliased"? "constant"? access_definition (":=" expression)? ";") | (defining_identifier_list ":" "aliased"? "constant"? array_type_definition (":=" expression)? ";") | single_task_declaration | single_protected_declaration ;
procedure_name ::= name ;
discrete_range ::= discrete_subtype_indication | range ;
integer_type_definition ::= signed_integer_type_definition | modular_type_definition ;
package_body_stub ::= "package" "body" defining_identifier "is" "separate" ";" ;
unary_adding_operator ::= "+" | "-" ;
interface_type_definition ::= ("limited" | "task" | "protected" | "synchronized")? "interface" ("and" interface_list)? ;
subtype_mark ::= subtype_name ;
variable_name ::= name ;
formal_abstract_subprogram_declaration ::= "with" subprogram_specification "is" "abstract" subprogram_default? ";" ;
formal_private_type_definition ::= ("abstract"? "tagged")? "limited"? "private" ;
protected_type_declaration ::= "protected" "type" defining_identifier known_discriminant_part? "is" ("new" interface_list "with")? protected_definition ";" ;
function_call ::= function_name | (function_prefix actual_parameter_part) ;
callable_entity_name ::= name ;
explicit_dereference ::= name "." "all" ;
selected_component ::= prefix "." selector_name ;
signed_integer_type_definition ::= "range" static_simple_expression ".." static_simple_expression ;
named_array_aggregate ::= "(" array_component_association ("," array_component_association)* ")" ;
loop_parameter_specification ::= defining_identifier "in" "reverse"? discrete_subtype_definition ;
choice_parameter_specification ::= defining_identifier ;
formal_subprogram_declaration ::= formal_concrete_subprogram_declaration | formal_abstract_subprogram_declaration ;
sequence_of_statements ::= statement statement* ;
task_definition ::= task_item* ("private" task_item*)? "end" task_identifier? ;
generic_package_name ::= name ;
selective_accept ::= "select" guard? select_alternative ("or" guard? select_alternative)* ("else" sequence_of_statements)? "end" "select" ";" ;
subprogram_specification ::= procedure_specification | function_specification ;
discrete_subtype_indication ::= subtype_indication ;
formal_type_declaration ::= "type" defining_identifier discriminant_part? "is" formal_type_definition ";" ;
library_unit_declaration ::= subprogram_declaration | package_declaration | generic_declaration | generic_instantiation ;
formal_part ::= "(" parameter_specification (";" parameter_specification)* ")" ;
modular_type_definition ::= "mod" static_expression ;
discrete_subtype_definition ::= discrete_subtype_indication | range ;
block_statement ::= (block_statement_identifier ":")? ("declare" declarative_part)? "begin" handled_sequence_of_statements "end" block_identifier? ";" ;
entry_call_statement ::= entry_name actual_parameter_part? ";" ;
component_choice_list ::= (component_selector_name ("|" component_selector_name)*) | "others" ;
entry_name ::= name ;
discrete_choice_list ::= discrete_choice ("|" discrete_choice)* ;
subtype_declaration ::= "subtype" defining_identifier "is" subtype_indication ";" ;
loop_statement_identifier ::= statement_identifier ;
subtype_name ::= name ;
positional_array_aggregate ::= ("(" expression "," expression ("," expression)* ")") | ("(" expression ("," expression)* "," "others" "=>" expression ")") | ("(" expression ("," expression)* "," "others" "=><>)") ;
formal_floating_point_definition ::= "digits" "<>" ;
generic_function_name ::= name ;
based_literal ::= base "#" based_numeral ("." based_numeral)? "#" exponent? ;
formal_interface_type_definition ::= interface_type_definition ;
range_constraint ::= "range" range ;
task_body ::= "task" "body" defining_identifier "is" declarative_part "begin" handled_sequence_of_statements "end" task_identifier? ";" ;
qualified_expression ::= (subtype_mark "'(" expression ")") | (subtype_mark "'" aggregate) ;
logical_operator ::= "and" | "or" | "xor" ;
generic_association ::= (generic_formal_parameter_selector_name "=>")? explicit_generic_actual_parameter ;
triggering_alternative ::= triggering_statement sequence_of_statements? ;
library_item ::= ("private"? library_unit_declaration) | library_unit_body | ("private"? library_unit_renaming_declaration) ;
timed_entry_call ::= "select" entry_call_alternative "or" delay_alternative "end" "select" ";" ;
scalar_constraint ::= range_constraint | digits_constraint | delta_constraint ;
package_renaming_declaration ::= "package" defining_program_unit_name "renames" package_name ";" ;
simple_return_statement ::= "return" expression? ";" ;
record_definition ::= ("record" component_list "end" "record") | ("null" "record") ;
--------------------ada::cordy-hyaric.bgf--------------------
context_clause ::= context_item* ;
subprogram_declaration ::= overriding_indicator? subprogram_specification blocksemi ;
accept_statement_entry_index ::= "(" entry_index ")" ;
package_body ::= NL "package" "body" defining_program_unit_name "is" IN blockeol declarative_part EX package_body_statements? "end" package_body_identifier? unitsemi ;
general_access_modifier ::= "all" | "constant" ;
delay_relative_statement ::= "delay" expression semi ;
nonlimited_with_clause ::= "private"? "with" {with_name ","}+ semi ;
type_declaration ::= full_type_declaration | incomplete_type_declaration | private_type_declaration | private_extension_declaration ;
formal_modular_type_definition ::= "mod" "<>" ;
formal_derived_type_definition_modifier ::= "limited" | "synchronized" ;
indexed_component_component ::= "(" {index_expression ","}+ ")" ;
defining_identifier_list ::= {defining_identifier ","}+ ;
select_statement ::= selective_accept | timed_entry_call | conditional_entry_call | asynchronous_select ;
subtype_access_or_array_type_definition ::= subtype_indication | access_definition | array_type_definition ;
declarative_item ::= basic_declarative_item | body ;
restriction_parameter_argument ::= expression ;
access_to_subprogram_definition ::= ("access" "protected"? "procedure" parameter_profile) | ("access" "protected"? "function" parameter_and_result_profile) ;
last_bit ::= simple_expression ;
interface_list ::= subtype_mark | (subtype_mark "and" interface_list) ;
limited_with_clause ::= "limited" "private"? "with" {with_name ","}+ semi ;
library_unit_name ::= name ;
designator_parent_unit_name ::= parent_unit_name "." ;
generic_formal_part ::= "generic" generic_formal_parameter_declaration_or_use_clause* ;
raise_statement_expression ::= "with" expression ;
compound_statement ::= if_statement | case_statement | loop_statement | block_statement | extended_return_statement | accept_statement | select_statement ;
protected_body_stub ::= "protected" "body" defining_identifier "is" "separate" blocksemi ;
basic_declarative_item ::= basic_declaration | aspect_clause | use_clause ;
component_definition ::= ("aliased"? subtype_indication) | ("aliased"? access_definition) ;
and_or_xor_relation ::= and_or_xor relation ;
elsif_expression ::= "elsif" expression "then" expression ;
used_name ::= name ;
formal_object_declaration_default ::= colon_equals default_expression ;
formal_decimal_fixed_point_definition ::= "delta" "<>" "digits" "<>" ;
default_name ::= name ;
enumeration_aggregate ::= array_aggregate ;
selective_accept_or_alternative ::= EX "or" IN eol guard? select_alternative ;
index_subtype_definition ::= subtype_mark "range" "<>" ;
constrained_array_definition ::= "array" "(" {discrete_subtype_definition ","}+ ")" "of" component_definition ;
record_type_definition_tagged ::= "abstract"? "tagged" ;
extension_aggregate ::= "(" ancestor_part "with" record_component_association_list ")" ;
private_extension_declaration ::= "type" defining_identifier discriminant_part? "is" blockeol "abstract"? private_extension_declaration_modifier? "new" subtype_indication private_extension_declaration_interface_list? "with" "private" blocksemi ;
expression_or_null ::= expression | "<>" ;
single_task_declaration_definition ::= "is" IN blockeol single_task_declaration_definition_interface_list? EX task_definition ;
procedure_call_statement ::= prefix actual_parameter_part? semi ;
formal_package_association ::= generic_association | (selector_name arrow "<>") ;
renaming_declaration ::= object_renaming_declaration | exception_renaming_declaration | package_renaming_declaration | subprogram_renaming_declaration | generic_renaming_declaration ;
used_subtype_mark ::= subtype_mark ;
record_representation_clause ::= "for" local_name "use" IN eol "record" mod_clause? IN eol component_clause* EX "end" "record" blocksemi EX ;
delay_statement ::= delay_until_statement | delay_relative_statement ;
single_protected_declaration ::= "protected" defining_identifier "is" blockeol single_protected_declaration_interface_list? protected_definition unitsemi ;
package_body_statements ::= "begin" IN eol handled_sequence_of_statements EX ;
discrete_choice ::= expression | discrete_range | "others" ;
exception_renaming_declaration ::= defining_identifier colon "exception" "renames" name semi ;
defining_program_unit_name_parent ::= parent_unit_name "." ;
full_type_declaration ::= ("type" defining_identifier known_discriminant_part? "is" type_definition blocksemi) | task_type_declaration | protected_type_declaration ;
defining_program_unit_name ::= defining_program_unit_name_parent? defining_identifier ;
context_item ::= with_clause | use_clause ;
function_call_component ::= actual_parameter_part ;
record_extension_part ::= "with" record_definition ;
code_statement ::= qualified_expression semi ;
generic_actual_part ::= "(" {generic_association ","}+ ")" ;
protected_operation_item ::= subprogram_declaration | subprogram_body | entry_body | aspect_clause ;
actual_parameter_part ::= "(" {parameter_association ","}+ ")" ;
character_literal ::= charlit ;
attribute_designator ::= (identifier attribute_designator_expression?) | "access" | "delta" | "digits" ;
known_discriminant_part ::= "(" discriminant_specification_list ")" ;
wide_identifier ::= "[" stringlit "]" ;
loop_statement ::= loop_statement_identifier? iteration_scheme? "loop" IN eol sequence_of_statements EX "end" "loop" identifier? blocksemi ;
protected_body ::= "protected" "body" defining_identifier "is" IN blockeol protected_operation_item* EX "end" identifier? unitsemi ;
operator_symbol ::= string_literal ;
goto_statement ::= "goto" name semi ;
array_type_definition ::= unconstrained_array_definition | constrained_array_definition ;
exception_choice ::= name | "others" ;
task_definition_private ::= "private" IN eol task_item* EX ;
discriminant_part ::= unknown_discriminant_part | known_discriminant_part ;
defining_identifier ::= identifier ;
or_selector_name ::= orbar selector_name ;
exit_statement ::= "exit" name? exit_statement_when_condition? semi ;
task_item ::= entry_declaration | aspect_clause | pragma ;
index_or_parameter_value ::= expression | discrete_range | parameter_association ;
exception_declaration ::= defining_identifier_list colon "exception" semi ;
parent_name_dot ::= parent_unit_name "." ;
access_to_object_definition ::= "access" general_access_modifier? subtype_indication ;
record_type_definition ::= record_type_definition_tagged? "limited"? record_definition ;
number_declaration ::= defining_identifier_list colon "constant" colon_equals expression semi ;
task_type_declaration_definition_interface_list ::= "new" interface_list "with" ;
enumeration_type_definition ::= "(" {enumeration_literal_specification ","}+ ")" ;
object_declaration_expression ::= colon_equals expression ;
numeric_literal ::= decimal_literal | based_literal ;
procedure_or_entry_call ::= procedure_call_statement | entry_call_statement ;
decimal_fixed_point_definition ::= "delta" expression "digits" expression real_range_specification? ;
enumeration_literal_specification ::= defining_identifier | defining_character_literal ;
entry_call_alternative ::= procedure_or_entry_call sequence_of_statements? ;
statement_identifier ::= direct_name ;
discriminant_specification_list ::= discriminant_specification semi_discriminant_specification* ;
type_definition ::= enumeration_type_definition | integer_type_definition | real_type_definition | array_type_definition | record_type_definition | access_type_definition | derived_type_definition | interface_type_definition ;
comma_others_arrow_null ::= "," "others" arrow "<>" ;
task_type_declaration ::= "task" "type" defining_identifier known_discriminant_part? task_type_declaration_definition? blocksemi ;
package_body_identifier ::= parent_name_dot? identifier ;
variant_part ::= "case" direct_name "is" IN blockeol variant+ EX "end" "case" blocksemi ;
if_statement_else ::= EX "else" IN eol sequence_of_statements ;
index_constraint ::= "(" {discrete_range ","}+ ")" ;
attribute_reference ::= prefix attribute_reference_component ;
generic_subprogram_declaration ::= generic_formal_part subprogram_specification blocksemi ;
and_or_xor ::= ("and" "then"?) | ("or" "else"?) | "xor" ;
extended_return_statement ::= "return" defining_identifier colon "aliased"? return_subtype_indication extended_return_statement_expression? extended_return_statement_do? unitsemi ;
range_attribute_reference ::= prefix SPOFF "'" range_attribute_designator ;
conditional_entry_call ::= "select" IN eol entry_call_alternative EX "else" IN eol sequence_of_statements EX "end" "select" unitsemi ;
real_range_specification ::= "range" simple_expression SP ".." SP simple_expression ;
else_expression ::= "else" expression ;
use_type_clause ::= "use" "type" {used_subtype_mark ","}+ semi ;
exception_handler ::= "when" exception_handler_specification? exception_choice or_exception_choice* arrow sequence_of_statements ;
range_attribute_designator ::= "range" SPON range_attribute_designator_expression? ;
array_aggregate ::= positional_array_aggregate | named_array_aggregate ;
subtype_or_access_definition ::= (null_exclusion? subtype_mark) | access_definition ;
null_procedure_declaration ::= overriding_indicator? procedure_specification "is" "null" blocksemi ;
default_expression ::= expression ;
derived_type_definition ::= "abstract"? "limited"? "new" subtype_indication interface_and_record_extension_specification? ;
entry_body_formal_part ::= entry_body_formal_part_specification? parameter_profile ;
record_aggregate ::= "(" record_component_association_list ")" ;
entry_body ::= NL "entry" defining_identifier entry_body_formal_part entry_barrier "is" IN blockeol declarative_part EX "begin" IN eol handled_sequence_of_statements EX "end" identifier? unitsemi ;
mod_clause ::= "at" "mod" expression semi ;
and_interface_list ::= "and" interface_list ;
record_component_association_list ::= ({record_component_association ","}+) | ("null" "record") ;
explicit_generic_actual_parameter ::= expression | name | subtype_mark ;
or_discrete_choice ::= orbar discrete_choice ;
unlabeled_statement ::= simple_statement | compound_statement ;
iteration_scheme ::= ("while" condition) | ("for" loop_parameter_specification) ;
subprogram_default ::= default_name | "<>" | "null" ;
generic_association_selector_name ::= selector_name arrow ;
parameter_and_result_profile ::= formal_part? "return" subtype_or_access_definition ;
simple_expression ::= unary_adding_operator? term binary_adding_operator_term* ;
binary_adding_operator ::= "+" | "-" | (IN NL "&" EX) ;
interface_and_record_extension_specification ::= ("and" interface_list record_extension_part?) | record_extension_part ;
formal_array_type_definition ::= array_type_definition ;
subtype_indication ::= null_exclusion? subtype_mark constraint? ;
use_package_clause ::= "use" {used_name ","}+ semi ;
range_attribute_designator_expression ::= "(" expression ")" ;
package_specification_identifier ::= parent_name_dot? identifier ;
formal_package_actual_part ::= ("(" others_arrow? "<>" ")") | (generic_actual_part?) | ("(" {formal_package_association ","}+ comma_others_arrow_null? ")") ;
type_conversion ::= subtype_mark "(" expression ")" ;
component_declaration ::= defining_identifier_list colon component_definition component_declaration_default? semi ;
aspect_clause ::= attribute_definition_clause | enumeration_representation_clause | record_representation_clause | at_clause ;
private_type_declaration ::= "type" defining_identifier discriminant_part? "is" blockeol private_type_declaration_tagged? "limited"? "private" blocksemi ;
proper_body ::= subprogram_body | package_body | task_body | protected_body ;
indexed_component ::= prefix indexed_component_component ;
requeue_statement ::= "requeue" name requeue_statement_with_abort? semi ;
entry_declaration ::= overriding_indicator? "entry" defining_identifier entry_declaration_subtype? parameter_profile blocksemi ;
body_stub ::= subprogram_body_stub | package_body_stub | task_body_stub | protected_body_stub ;
enumeration_representation_clause ::= "for" local_name "use" enumeration_aggregate blocksemi ;
formal_type_definition ::= formal_private_type_definition | formal_derived_type_definition | formal_discrete_type_definition | formal_signed_integer_type_definition | formal_modular_type_definition | formal_floating_point_definition | formal_ordinary_fixed_point_definition | formal_decimal_fixed_point_definition | formal_array_type_definition | formal_access_type_definition | formal_interface_type_definition ;
use_clause ::= use_package_clause | use_type_clause ;
exit_statement_when_condition ::= "when" condition ;
discriminant_specification_default ::= colon_equals default_expression ;
discriminant_specification ::= (defining_identifier_list colon null_exclusion? subtype_mark discriminant_specification_default?) | (defining_identifier_list colon access_definition discriminant_specification_default?) ;
discriminant_association ::= discriminant_selector_name_arrow? expression ;
simple_statement ::= null_statement | procedure_call_statement | assignment_statement | exit_statement | goto_statement | simple_return_statement | entry_call_statement | requeue_statement | delay_statement | abort_statement | raise_statement | code_statement | pragma ;
pragma_argument_association ::= identifier_arrow? expression ;
direct_name ::= identifier | operator_symbol ;
abort_statement ::= "abort" {abort_name ","}+ semi ;
case_statement ::= "case" expression "is" IN blockeol case_statement_alternative+ EX "end" "case" blocksemi ;
generic_renaming_declaration ::= ("generic" "package" defining_program_unit_name "renames" name blocksemi) | ("generic" "procedure" defining_program_unit_name "renames" name blocksemi) | ("generic" "function" defining_program_unit_name "renames" name blocksemi) ;
highest_precedence_operator ::= "**" | "abs" | "not" ;
explicit_dereference_component ::= "." "all" ;
semi_parameter_specification ::= ";" parameter_specification ;
selective_accept_else_alternative ::= "else" sequence_of_statements ;
entry_body_formal_part_specification ::= "(" entry_index_specification ")" ;
null_exclusion ::= "not" "null" ;
component_item ::= component_declaration | aspect_clause | pragma ;
parameter_type_specification ::= (mode null_exclusion? subtype_mark parameter_specification_default?) | (access_definition parameter_specification_default?) ;
parameter_profile ::= formal_part? ;
generic_declaration ::= generic_subprogram_declaration | generic_package_declaration ;
delay_until_statement ::= "delay" "until" expression semi ;
parent_unit_name ::= name ;
extended_return_statement_expression ::= colon_equals expression ;
package_specification_private ::= "private" IN eol basic_declarative_item* EX ;
case_statement_alternative ::= "when" discrete_choice_list arrow sequence_of_statements ;
access_definition ::= (null_exclusion? "access" "constant"? subtype_mark) | (null_exclusion? "access" "protected"? "procedure" parameter_profile) | (null_exclusion? "access" "protected"? "function" parameter_and_result_profile) ;
library_unit_renaming_declaration ::= package_renaming_declaration | generic_renaming_declaration | subprogram_renaming_declaration | pragma ;
defining_operator_symbol ::= operator_symbol ;
entry_index_specification ::= "for" defining_identifier "in" discrete_subtype_definition ;
with_clause ::= limited_with_clause | nonlimited_with_clause ;
formal_derived_type_definition ::= "abstract"? formal_derived_type_definition_modifier? "new" subtype_mark formal_derived_type_definition_interface_list? ;
package_declaration ::= package_specification unitsemi ;
generic_formal_parameter_declaration_or_use_clause ::= generic_formal_parameter_declaration | use_clause | pragma ;
first_bit ::= simple_expression ;
declare_declarative_part ::= "declare" IN eol declarative_part EX ;
generic_formal_parameter_declaration ::= formal_object_declaration | formal_type_declaration | formal_subprogram_declaration | formal_package_declaration ;
at_clause ::= "for" direct_name "use" "at" expression semi ;
discriminant_constraint ::= "(" {discriminant_association ","}* ")" ;
defining_designator ::= defining_program_unit_name | defining_operator_symbol ;
if_expression ::= "if" expression "then" expression elsif_expression* else_expression? ;
library_unit_body ::= subprogram_body | package_body ;
attribute_definition_clause ::= "for" local_name SPOFF "'" attribute_designator SPON "use" expression blocksemi ;
accept_statement ::= "accept" direct_name accept_statement_entry_index? parameter_profile accept_statement_statements? unitsemi ;
accept_alternative ::= accept_statement sequence_of_statements? ;
identifier_arrow ::= identifier arrow ;
component_clause ::= local_name "at" position "range" first_bit SP ".." SP last_bit semi ;
task_body_stub ::= "task" "body" defining_identifier "is" "separate" blocksemi ;
delay_alternative ::= delay_statement sequence_of_statements? ;
subprogram_body_stub ::= overriding_indicator? subprogram_specification "is" "separate" blocksemi ;
parameter_specification_default ::= colon_equals default_expression ;
formal_access_type_definition ::= access_type_definition ;
parameter_specification ::= defining_identifier_list colon parameter_type_specification ;
parameter_association ::= parameter_association_selector_name explicit_actual_parameter ;
selector_name ::= identifier | character_literal | operator_symbol ;
select_alternative ::= accept_alternative | delay_alternative | terminate_alternative ;
entry_barrier ::= "when" condition ;
basic_declaration ::= type_declaration | subtype_declaration | object_declaration | number_declaration | subprogram_declaration | abstract_subprogram_declaration | null_procedure_declaration | package_declaration | renaming_declaration | exception_declaration | generic_declaration | generic_instantiation | pragma ;
single_task_declaration_definition_interface_list ::= "new" interface_list "with" ;
attribute_reference_component ::= SPOFF "'" attribute_designator SPON ;
generic_instantiation ::= ("package" defining_program_unit_name "is" generic_instantiation_clause) | (overriding_indicator? "procedure" defining_program_unit_name "is" generic_instantiation_clause) | (overriding_indicator? "function" defining_designator "is" generic_instantiation_clause) ;
explicit_actual_parameter ::= expression ;
local_name ::= direct_name | (direct_name SPOFF "'" attribute_designator SPON) ;
ancestor_part ::= expression | subtype_mark ;
exception_handler_specification ::= choice_parameter_specification colon ;
protected_type_declaration_interface_list ::= "new" interface_list "with" ;
arrow_restriction_parameter_argument ::= arrow restriction_parameter_argument ;
raise_statement ::= ("raise" semi) | ("raise" name raise_statement_expression? semi) ;
function_specification ::= "function" defining_designator parameter_and_result_profile ;
unknown_discriminant_part ::= "(" "<>" ")" ;
unconstrained_array_definition ::= "array" "(" {index_subtype_definition ","}+ ")" "of" component_definition ;
array_component_association ::= discrete_choice_list arrow expression_or_null ;
overriding_indicator ::= "not"? "overriding" ;
single_task_declaration ::= "task" defining_identifier single_task_declaration_definition? unitsemi ;
if_statement_elsif ::= EX "elsif" condition "then" IN eol sequence_of_statements ;
real_type_definition ::= floating_point_definition | fixed_point_definition ;
digits_constraint ::= "digits" expression range_constraint? ;
asynchronous_select ::= "select" IN eol triggering_alternative EX EX "then" "abort" IN eol abortable_part EX "end" "select" unitsemi ;
defining_character_literal ::= character_literal ;
protected_operation_declaration ::= subprogram_declaration | entry_declaration | aspect_clause | pragma ;
subprogram_renaming_declaration ::= overriding_indicator? subprogram_specification "renames" name blocksemi ;
record_component_association ::= expression | (component_choice_list arrow expression_or_null) ;
terminate_alternative ::= "terminate" semi ;
if_statement ::= "if" condition "then" IN eol sequence_of_statements if_statement_elsif* if_statement_else? EX "end" "if" semi ;
fixed_point_definition ::= ordinary_fixed_point_definition | decimal_fixed_point_definition ;
formal_object_declaration ::= (defining_identifier_list colon mode null_exclusion? subtype_mark formal_object_declaration_default? semi) | (defining_identifier_list colon mode access_definition formal_object_declaration_default? semi) ;
package_specification ::= NL "package" defining_program_unit_name "is" IN blockeol basic_declarative_item* EX package_specification_private? "end" package_specification_identifier? ;
ordinary_fixed_point_definition ::= "delta" expression real_range_specification ;
protected_definition_private ::= EX "private" IN eol protected_element_declaration* ;
indexed_slice_type_conv_or_function_call_component ::= "(" {index_or_parameter_value ","}+ ")" ;
declarative_part ::= declarative_item* ;
entry_index ::= expression ;
delta_constraint ::= "delta" expression range_constraint? ;
subprogram_body ::= NL overriding_indicator? subprogram_specification "is" IN blockeol declarative_part EX "begin" IN eol handled_sequence_of_statements EX "end" designator? unitsemi ;
relational_operator ::= "=" | "/=" | "<" | "<=" | ">" | ">=" ;
abstract_subprogram_declaration ::= overriding_indicator? subprogram_specification "is" "abstract" blocksemi ;
null_statement ::= "null" semi ;
object_renaming_declaration ::= (defining_identifier colon null_exclusion? subtype_mark "renames" name semi) | (defining_identifier colon access_definition "renames" name semi) ;
incomplete_type_declaration ::= "type" defining_identifier discriminant_part? incomplete_type_declaration_modifier? blocksemi ;
formal_package_declaration ::= "with" "package" defining_identifier "is" "new" name formal_package_actual_part semi ;
handled_sequence_of_statements ::= sequence_of_statements handled_sequence_of_statements_exception? ;
return_subtype_indication ::= subtype_indication | access_definition ;
formal_concrete_subprogram_declaration_default ::= "is" subprogram_default ;
expression_or_aggregate ::= ("(" SPON expression ")") | (SPON aggregate) ;
formal_concrete_subprogram_declaration ::= "with" subprogram_specification formal_concrete_subprogram_declaration_default? semi ;
protected_element_declaration ::= protected_operation_declaration | component_declaration ;
formal_signed_integer_type_definition ::= "range" "<>" ;
component_list ::= (component_item+) | (component_item* variant_part) | ("null" semi) ;
formal_private_type_definition_tagged ::= "abstract"? "tagged" ;
colon_equals ::= ":=" ;
access_type_definition ::= (null_exclusion? access_to_object_definition) | (null_exclusion? access_to_subprogram_definition) ;
triggering_statement ::= procedure_or_entry_call | delay_statement ;
generic_package_declaration ::= generic_formal_part package_specification blocksemi ;
procedure_specification ::= "procedure" defining_program_unit_name parameter_profile ;
parameter_association_selector_name ::= selector_name arrow ;
selected_component_component ::= "." selector_name ;
semi_discriminant_specification ::= ";" discriminant_specification ;
composite_constraint ::= index_constraint | discriminant_constraint ;
slice_component ::= "(" discrete_range ")" ;
implicit_dereference ::= name ;
accept_statement_statements ::= "do" IN eol handled_sequence_of_statements EX "end" identifier? ;
abortable_part ::= sequence_of_statements ;
binary_adding_operator_term ::= binary_adding_operator term ;
private_extension_declaration_interface_list ::= "and" interface_list ;
multiplying_operator ::= "*" | "/" | "mod" | "rem" ;
protected_definition ::= IN protected_operation_declaration* protected_definition_private? EX "end" identifier? ;
formal_discrete_type_definition ::= "(" "<>" ")" ;
relational_operator_simple_expression ::= relational_operator simple_expression ;
string_literal ::= stringlit ;
compilation_unit ::= (context_clause library_item) | (context_clause subunit) | pragma ;
assignment_statement ::= name colon_equals expression semi ;
floating_point_definition ::= "digits" expression real_range_specification? ;
formal_ordinary_fixed_point_definition ::= "delta" "<>" ;
object_declaration ::= (defining_identifier_list colon "aliased"? "constant"? subtype_access_or_array_type_definition object_declaration_expression? semi) | single_task_declaration | single_protected_declaration ;
discrete_range ::= subtype_indication | range ;
integer_type_definition ::= signed_integer_type_definition | modular_type_definition ;
package_body_stub ::= NL "package" "body" defining_identifier "is" "separate" blocksemi ;
unary_adding_operator ::= "+" | "-" ;
interface_type_definition ::= interface_type_definition_modifier? "interface" interface_type_definition_list? ;
subtype_mark ::= name ;
or_exception_choice ::= orbar exception_choice ;
formal_abstract_subprogram_declaration ::= "with" subprogram_specification "is" "abstract" subprogram_default? semi ;
formal_private_type_definition ::= formal_private_type_definition_tagged? "limited"? "private" ;
entry_declaration_subtype ::= "(" discrete_subtype_definition ")" ;
starstar_primary ::= "**" primary ;
protected_type_declaration ::= NL "protected" "type" defining_identifier known_discriminant_part? "is" protected_type_declaration_interface_list? eol protected_definition unitsemi ;
function_call ::= prefix function_call_component ;
with_name ::= name ;
explicit_dereference ::= name explicit_dereference_component ;
selected_component ::= prefix selected_component_component ;
discriminant_selector_name_arrow ::= selector_name or_selector_name* arrow ;
signed_integer_type_definition ::= "range" simple_expression SP ".." SP simple_expression ;
named_array_aggregate ::= "(" {array_component_association ","}+ ")" ;
loop_parameter_specification ::= defining_identifier "in" "reverse"? discrete_subtype_definition ;
formal_subprogram_declaration ::= formal_concrete_subprogram_declaration | formal_abstract_subprogram_declaration ;
choice_parameter_specification ::= defining_identifier ;
sequence_of_statements ::= statement+ ;
task_definition ::= IN task_item* task_definition_private? EX "end" identifier? ;
selective_accept ::= "select" IN eol guard? select_alternative selective_accept_or_alternative* selective_accept_else_alternative? EX "end" "select" unitsemi ;
interface_type_definition_list ::= "and" interface_list ;
multiplying_operator_factor ::= multiplying_operator factor ;
name_component ::= explicit_dereference_component | indexed_slice_type_conv_or_function_call_component | selected_component_component | attribute_reference_component ;
subprogram_specification ::= procedure_specification | function_specification ;
formal_type_declaration ::= "type" defining_identifier discriminant_part? "is" formal_type_definition blocksemi ;
library_unit_declaration ::= subprogram_declaration | package_declaration | generic_declaration | generic_instantiation | pragma ;
modular_type_definition ::= "mod" expression ;
formal_part ::= "(" parameter_specification semi_parameter_specification* ")" ;
handled_sequence_of_statements_exception ::= "exception" IN eol exception_handler+ EX ;
attribute_designator_expression ::= "(" expression ")" ;
incomplete_type_declaration_modifier ::= "is" "tagged" ;
discrete_subtype_definition ::= subtype_indication | range ;
formal_derived_type_definition_interface_list ::= and_interface_list? "with" "private" ;
block_statement ::= block_statement_identifier_colon? declare_declarative_part? "begin" IN eol handled_sequence_of_statements EX "end" identifier? unitsemi ;
entry_call_statement ::= name actual_parameter_part? semi ;
abort_name ::= name ;
private_type_declaration_tagged ::= "abstract"? "tagged" ;
component_choice_list ::= (selector_name or_selector_name*) | "others" ;
component_declaration_default ::= colon_equals default_expression ;
private_extension_declaration_modifier ::= "limited" | "synchronized" ;
discrete_choice_list ::= discrete_choice or_discrete_choice* ;
subtype_declaration ::= "subtype" defining_identifier "is" subtype_indication semi ;
loop_statement_identifier ::= statement_identifier colon ;
positional_array_aggregate ::= "(" {index_expression ","}+ comma_others* ")" ;
others_arrow ::= "others" arrow ;
formal_floating_point_definition ::= "digits" "<>" ;
requeue_statement_with_abort ::= "with" "abort" ;
index_expression ::= expression ;
task_type_declaration_definition ::= "is" IN blockeol task_type_declaration_definition_interface_list? task_definition EX ;
formal_interface_type_definition ::= interface_type_definition ;
range_constraint ::= "range" range ;
task_body ::= NL "task" "body" defining_identifier "is" IN blockeol declarative_part EX "begin" IN eol handled_sequence_of_statements EX "end" identifier? unitsemi ;
qualified_expression ::= subtype_mark SPOFF "'" expression_or_aggregate ;
logical_operator ::= "and" | "or" | "xor" ;
generic_association ::= generic_association_selector_name? explicit_generic_actual_parameter ;
triggering_alternative ::= triggering_statement sequence_of_statements? ;
library_item ::= ("private"? library_unit_declaration) | library_unit_body | ("private"? library_unit_renaming_declaration) ;
timed_entry_call ::= "select" IN eol entry_call_alternative EX "or" IN eol delay_alternative EX "end" "select" unitsemi ;
pragma_arguments ::= "(" {pragma_argument_association ","}+ ")" ;
single_protected_declaration_interface_list ::= "new" interface_list "with" ;
scalar_constraint ::= range_constraint | digits_constraint | delta_constraint ;
package_renaming_declaration ::= NL "package" defining_program_unit_name "renames" name blocksemi ;
simple_return_statement ::= "return" expression? semi ;
comma_others ::= "," "others" arrow expression_or_null ;
block_statement_identifier_colon ::= statement_identifier colon ;
generic_instantiation_clause ::= "new" name generic_actual_part? blocksemi ;
extended_return_statement_do ::= "do" IN eol handled_sequence_of_statements EX "end" "return" ;
interface_type_definition_modifier ::= "limited" | "task" | "protected" | "synchronized" ;
record_definition ::= (IN eol "record" IN eol component_list EX "end" "record" EX) | ("null" "record") ;
--------------------c::iso-9899-1999.bgf--------------------
iteration-statement ::= ("while" "(" expression ")" statement) | ("do" statement "while" "(" expression ")" ";") | ("for" "(" expression? ";" expression? ";" expression? ")" statement) | ("for" "(" declaration expression? ";" expression? ")" statement) ;
conditional-expression ::= logical-OR-expression | (logical-OR-expression "?" expression ":" conditional-expression) ;
type-name ::= specifier-qualifier-list abstract-declarator? ;
relational-expression ::= shift-expression | (relational-expression "<" shift-expression) | (relational-expression ">" shift-expression) | (relational-expression "<=" shift-expression) | (relational-expression ">=" shift-expression) ;
logical-OR-expression ::= logical-AND-expression | (logical-OR-expression "||" logical-AND-expression) ;
init-declarator-list ::= init-declarator | (init-declarator-list "," init-declarator) ;
abstract-declarator ::= pointer | (pointer? direct-abstract-declarator) ;
expression-statement ::= expression? ";" ;
additive-expression ::= multiplicative-expression | (additive-expression "+" multiplicative-expression) | (additive-expression "-" multiplicative-expression) ;
external-declaration ::= function-definition | declaration ;
designator-list ::= designator | (designator-list designator) ;
unary-expression ::= postfix-expression | ("++" unary-expression) | ("--" unary-expression) | (unary-operator cast-expression) | ("sizeof" unary-expression) | ("sizeof" "(" type-name ")") ;
labeled-statement ::= (identifier ":" statement) | ("case" constant-expression ":" statement) | ("default" ":" statement) ;
enum-specifier ::= ("enum" identifier? "{" enumerator-list "}") | ("enum" identifier? "{" enumerator-list "," "}") | ("enum" identifier) ;
logical-AND-expression ::= inclusive-OR-expression | (logical-AND-expression "&&" inclusive-OR-expression) ;
postfix-expression ::= primary-expression | (postfix-expression "[" expression "]") | (postfix-expression "(" argument-expression-list? ")") | (postfix-expression "." identifier) | (postfix-expression "->" identifier) | (postfix-expression "++") | (postfix-expression "--") | ("(" type-name ")" "{" initializer-list "}") | ("(" type-name ")" "{" initializer-list "," "}") ;
multiplicative-expression ::= cast-expression | (multiplicative-expression "*" cast-expression) | (multiplicative-expression "/" cast-expression) | (multiplicative-expression "%" cast-expression) ;
selection-statement ::= ("if" "(" expression ")" statement) | ("if" "(" expression ")" statement "else" statement) | ("switch" "(" expression ")" statement) ;
AND-expression ::= equality-expression | (AND-expression "&" equality-expression) ;
parameter-type-list ::= parameter-list | (parameter-list "," "...") ;
type-specifier ::= "void" | "char" | "short" | "int" | "long" | "float" | "double" | "signed" | "unsigned" | "_Bool" | "_Complex" | "_Imaginary" | struct-or-union-specifier | enum-specifier | typedef-name ;
initializer-list ::= (designation? initializer) | (initializer-list "," designation? initializer) ;
struct-declarator ::= declarator | (declarator? ":" constant-expression) ;
function-definition ::= declaration-specifiers declarator declaration-list? compound-statement ;
declaration-specifiers ::= (storage-class-specifier declaration-specifiers?) | (type-specifier declaration-specifiers?) | (type-qualifier declaration-specifiers?) | (function-specifier declaration-specifiers?) ;
cast-expression ::= unary-expression | ("(" type-name ")" cast-expression) ;
assignment-operator ::= "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | "&=" | "^=" | "|=" ;
argument-expression-list ::= assignment-expression | (argument-expression-list "," assignment-expression) ;
constant-expression ::= conditional-expression ;
inclusive-OR-expression ::= exclusive-OR-expression | (inclusive-OR-expression "|" exclusive-OR-expression) ;
translation-unit ::= external-declaration | (translation-unit external-declaration) ;
struct-or-union ::= "struct" | "union" ;
block-item-list ::= block-item | (block-item-list block-item) ;
direct-abstract-declarator ::= ("(" abstract-declarator ")") | (direct-abstract-declarator? "[" assignment-expression? "]") | (direct-abstract-declarator? "[" "*" "]") | (direct-abstract-declarator? "(" parameter-type-list? ")") ;
assignment-expression ::= conditional-expression | (unary-expression assignment-operator assignment-expression) ;
type-qualifier ::= "const" | "restrict" | "volatile" ;
storage-class-specifier ::= "typedef" | "extern" | "static" | "auto" | "register" ;
parameter-declaration ::= (declaration-specifiers declarator) | (declaration-specifiers abstract-declarator?) ;
direct-declarator ::= identifier | ("(" declarator ")") | (direct-declarator "[" type-qualifier-list? assignment-expression? "]") | (direct-declarator "[" "static" type-qualifier-list? assignment-expression "]") | (direct-declarator "[" type-qualifier-list "static" assignment-expression "]") | (direct-declarator "[" type-qualifier-list? "*" "]") | (direct-declarator "(" parameter-type-list ")") | (direct-declarator "(" identifier-list? ")") ;
type-qualifier-list ::= type-qualifier | (type-qualifier-list type-qualifier) ;
block-item ::= declaration | statement ;
exclusive-OR-expression ::= AND-expression | (exclusive-OR-expression "^" AND-expression) ;
declaration-list ::= declaration | (declaration-list declaration) ;
jump-statement ::= ("goto" identifier ";") | ("continue" ";") | ("break" ";") | ("return" expression? ";") ;
specifier-qualifier-list ::= (type-specifier specifier-qualifier-list?) | (type-qualifier specifier-qualifier-list?) ;
init-declarator ::= declarator | (declarator "=" initializer) ;
struct-or-union-specifier ::= (struct-or-union identifier? "{" struct-declaration-list "}") | (struct-or-union identifier) ;
compound-statement ::= "{" block-item-list? "}" ;
typedef-name ::= identifier ;
equality-expression ::= relational-expression | (equality-expression "==" relational-expression) | (equality-expression "!=" relational-expression) ;
function-specifier ::= "inline" ;
struct-declaration-list ::= struct-declaration | (struct-declaration-list struct-declaration) ;
enumerator-list ::= enumerator | (enumerator-list "," enumerator) ;
primary-expression ::= identifier | constant | string-literal | ("(" expression ")") ;
shift-expression ::= additive-expression | (shift-expression "<<" additive-expression) | (shift-expression ">>" additive-expression) ;
identifier-list ::= identifier | (identifier-list "," identifier) ;
unary-operator ::= "&" | "*" | "+" | "-" | "~" | "!" ;
parameter-list ::= parameter-declaration | (parameter-list "," parameter-declaration) ;
struct-declarator-list ::= struct-declarator | (struct-declarator-list "," struct-declarator) ;
struct-declaration ::= specifier-qualifier-list struct-declarator-list ";" ;
--------------------c::iso-9899-tc2.bgf--------------------
iteration-statement ::= ("while" "(" expression ")" statement) | ("do" statement "while" "(" expression ")" ";") | ("for" "(" expression? ";" expression? ";" expression? ")" statement) | ("for" "(" declaration expression? ";" expression? ")" statement) ;
conditional-expression ::= logical-OR-expression | (logical-OR-expression "?" expression ":" conditional-expression) ;
type-name ::= specifier-qualifier-list abstract-declarator? ;
relational-expression ::= shift-expression | (relational-expression "<" shift-expression) | (relational-expression ">" shift-expression) | (relational-expression "<=" shift-expression) | (relational-expression ">=" shift-expression) ;
logical-OR-expression ::= logical-AND-expression | (logical-OR-expression "||" logical-AND-expression) ;
init-declarator-list ::= init-declarator | (init-declarator-list "," init-declarator) ;
abstract-declarator ::= pointer | (pointer? direct-abstract-declarator) ;
expression-statement ::= expression? ";" ;
additive-expression ::= multiplicative-expression | (additive-expression "+" multiplicative-expression) | (additive-expression "-" multiplicative-expression) ;
external-declaration ::= function-definition | declaration ;
designator-list ::= designator | (designator-list designator) ;
unary-expression ::= postfix-expression | ("++" unary-expression) | ("--" unary-expression) | (unary-operator cast-expression) | ("sizeof" unary-expression) | ("sizeof" "(" type-name ")") ;
labeled-statement ::= (identifier ":" statement) | ("case" constant-expression ":" statement) | ("default" ":" statement) ;
enum-specifier ::= ("enum" identifier? "{" enumerator-list "}") | ("enum" identifier? "{" enumerator-list "," "}") | ("enum" identifier) ;
logical-AND-expression ::= inclusive-OR-expression | (logical-AND-expression "&&" inclusive-OR-expression) ;
postfix-expression ::= primary-expression | (postfix-expression "[" expression "]") | (postfix-expression "(" argument-expression-list? ")") | (postfix-expression "." identifier) | (postfix-expression "->" identifier) | (postfix-expression "++") | (postfix-expression "--") | ("(" type-name ")" "{" initializer-list "}") | ("(" type-name ")" "{" initializer-list "," "}") ;
multiplicative-expression ::= cast-expression | (multiplicative-expression "*" cast-expression) | (multiplicative-expression "/" cast-expression) | (multiplicative-expression "%" cast-expression) ;
selection-statement ::= ("if" "(" expression ")" statement) | ("if" "(" expression ")" statement "else" statement) | ("switch" "(" expression ")" statement) ;
AND-expression ::= equality-expression | (AND-expression "&" equality-expression) ;
parameter-type-list ::= parameter-list | (parameter-list "," "...") ;
type-specifier ::= "void" | "char" | "short" | "int" | "long" | "float" | "double" | "signed" | "unsigned" | "_Bool" | "_Complex" | struct-or-union-specifier | enum-specifier | typedef-name ;
initializer-list ::= (designation? initializer) | (initializer-list "," designation? initializer) ;
struct-declarator ::= declarator | (declarator? ":" constant-expression) ;
function-definition ::= declaration-specifiers declarator declaration-list? compound-statement ;
declaration-specifiers ::= (storage-class-specifier declaration-specifiers?) | (type-specifier declaration-specifiers?) | (type-qualifier declaration-specifiers?) | (function-specifier declaration-specifiers?) ;
cast-expression ::= unary-expression | ("(" type-name ")" cast-expression) ;
assignment-operator ::= "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | "&=" | "^=" | "|=" ;
argument-expression-list ::= assignment-expression | (argument-expression-list "," assignment-expression) ;
constant-expression ::= conditional-expression ;
inclusive-OR-expression ::= exclusive-OR-expression | (inclusive-OR-expression "|" exclusive-OR-expression) ;
translation-unit ::= external-declaration | (translation-unit external-declaration) ;
struct-or-union ::= "struct" | "union" ;
block-item-list ::= block-item | (block-item-list block-item) ;
direct-abstract-declarator ::= ("(" abstract-declarator ")") | (direct-abstract-declarator? "[" assignment-expression? "]") | (direct-abstract-declarator? "[" "*" "]") | (direct-abstract-declarator? "(" parameter-type-list? ")") ;
assignment-expression ::= conditional-expression | (unary-expression assignment-operator assignment-expression) ;
type-qualifier ::= "const" | "restrict" | "volatile" ;
storage-class-specifier ::= "typedef" | "extern" | "static" | "auto" | "register" ;
parameter-declaration ::= (declaration-specifiers declarator) | (declaration-specifiers abstract-declarator?) ;
direct-declarator ::= identifier | ("(" declarator ")") | (direct-declarator "[" type-qualifier-list? assignment-expression? "]") | (direct-declarator "[" "static" type-qualifier-list? assignment-expression "]") | (direct-declarator "[" type-qualifier-list "static" assignment-expression "]") | (direct-declarator "[" type-qualifier-list? "*" "]") | (direct-declarator "(" parameter-type-list ")") | (direct-declarator "(" identifier-list? ")") ;
type-qualifier-list ::= type-qualifier | (type-qualifier-list type-qualifier) ;
block-item ::= declaration | statement ;
exclusive-OR-expression ::= AND-expression | (exclusive-OR-expression "^" AND-expression) ;
declaration-list ::= declaration | (declaration-list declaration) ;
jump-statement ::= ("goto" identifier ";") | ("continue" ";") | ("break" ";") | ("return" expression? ";") ;
specifier-qualifier-list ::= (type-specifier specifier-qualifier-list?) | (type-qualifier specifier-qualifier-list?) ;
init-declarator ::= declarator | (declarator "=" initializer) ;
struct-or-union-specifier ::= (struct-or-union identifier? "{" struct-declaration-list "}") | (struct-or-union identifier) ;
compound-statement ::= "{" block-item-list? "}" ;
typedef-name ::= identifier ;
equality-expression ::= relational-expression | (equality-expression "==" relational-expression) | (equality-expression "!=" relational-expression) ;
function-specifier ::= "inline" ;
struct-declaration-list ::= struct-declaration | (struct-declaration-list struct-declaration) ;
enumerator-list ::= enumerator | (enumerator-list "," enumerator) ;
primary-expression ::= identifier | constant | string-literal | ("(" expression ")") ;
shift-expression ::= additive-expression | (shift-expression "<<" additive-expression) | (shift-expression ">>" additive-expression) ;
identifier-list ::= identifier | (identifier-list "," identifier) ;
unary-operator ::= "&" | "*" | "+" | "-" | "~" | "!" ;
parameter-list ::= parameter-declaration | (parameter-list "," parameter-declaration) ;
struct-declarator-list ::= struct-declarator | (struct-declarator-list "," struct-declarator) ;
struct-declaration ::= specifier-qualifier-list struct-declarator-list ";" ;
--------------------c::iso-9899-tc3.bgf--------------------
iteration-statement ::= ("while" "(" expression ")" statement) | ("do" statement "while" "(" expression ")" ";") | ("for" "(" expression? ";" expression? ";" expression? ")" statement) | ("for" "(" declaration expression? ";" expression? ")" statement) ;
conditional-expression ::= logical-OR-expression | (logical-OR-expression "?" expression ":" conditional-expression) ;
type-name ::= specifier-qualifier-list abstract-declarator? ;
relational-expression ::= shift-expression | (relational-expression "<" shift-expression) | (relational-expression ">" shift-expression) | (relational-expression "<=" shift-expression) | (relational-expression ">=" shift-expression) ;
logical-OR-expression ::= logical-AND-expression | (logical-OR-expression "||" logical-AND-expression) ;
init-declarator-list ::= init-declarator | (init-declarator-list "," init-declarator) ;
abstract-declarator ::= pointer | (pointer? direct-abstract-declarator) ;
expression-statement ::= expression? ";" ;
additive-expression ::= multiplicative-expression | (additive-expression "+" multiplicative-expression) | (additive-expression "-" multiplicative-expression) ;
external-declaration ::= function-definition | declaration ;
designator-list ::= designator | (designator-list designator) ;
unary-expression ::= postfix-expression | ("++" unary-expression) | ("--" unary-expression) | (unary-operator cast-expression) | ("sizeof" unary-expression) | ("sizeof" "(" type-name ")") ;
labeled-statement ::= (identifier ":" statement) | ("case" constant-expression ":" statement) | ("default" ":" statement) ;
enum-specifier ::= ("enum" identifier? "{" enumerator-list "}") | ("enum" identifier? "{" enumerator-list "," "}") | ("enum" identifier) ;
logical-AND-expression ::= inclusive-OR-expression | (logical-AND-expression "&&" inclusive-OR-expression) ;
postfix-expression ::= primary-expression | (postfix-expression "[" expression "]") | (postfix-expression "(" argument-expression-list? ")") | (postfix-expression "." identifier) | (postfix-expression "->" identifier) | (postfix-expression "++") | (postfix-expression "--") | ("(" type-name ")" "{" initializer-list "}") | ("(" type-name ")" "{" initializer-list "," "}") ;
multiplicative-expression ::= cast-expression | (multiplicative-expression "*" cast-expression) | (multiplicative-expression "/" cast-expression) | (multiplicative-expression "%" cast-expression) ;
selection-statement ::= ("if" "(" expression ")" statement) | ("if" "(" expression ")" statement "else" statement) | ("switch" "(" expression ")" statement) ;
AND-expression ::= equality-expression | (AND-expression "&" equality-expression) ;
parameter-type-list ::= parameter-list | (parameter-list "," "...") ;
type-specifier ::= "void" | "char" | "short" | "int" | "long" | "float" | "double" | "signed" | "unsigned" | "_Bool" | "_Complex" | struct-or-union-specifier | enum-specifier | typedef-name ;
initializer-list ::= (designation? initializer) | (initializer-list "," designation? initializer) ;
struct-declarator ::= declarator | (declarator? ":" constant-expression) ;
function-definition ::= declaration-specifiers declarator declaration-list? compound-statement ;
declaration-specifiers ::= (storage-class-specifier declaration-specifiers?) | (type-specifier declaration-specifiers?) | (type-qualifier declaration-specifiers?) | (function-specifier declaration-specifiers?) ;
cast-expression ::= unary-expression | ("(" type-name ")" cast-expression) ;
assignment-operator ::= "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | "&=" | "^=" | "|=" ;
argument-expression-list ::= assignment-expression | (argument-expression-list "," assignment-expression) ;
constant-expression ::= conditional-expression ;
inclusive-OR-expression ::= exclusive-OR-expression | (inclusive-OR-expression "|" exclusive-OR-expression) ;
translation-unit ::= external-declaration | (translation-unit external-declaration) ;
struct-or-union ::= "struct" | "union" ;
block-item-list ::= block-item | (block-item-list block-item) ;
direct-abstract-declarator ::= ("(" abstract-declarator ")") | (direct-abstract-declarator? "[" type-qualifier-list? assignment-expression? "]") | (direct-abstract-declarator? "[" "static" type-qualifier-list? assignment-expression "]") | (direct-abstract-declarator? "[" type-qualifier-list "static" assignment-expression "]") | (direct-abstract-declarator? "[" "*" "]") | (direct-abstract-declarator? "(" parameter-type-list? ")") ;
assignment-expression ::= conditional-expression | (unary-expression assignment-operator assignment-expression) ;
type-qualifier ::= "const" | "restrict" | "volatile" ;
storage-class-specifier ::= "typedef" | "extern" | "static" | "auto" | "register" ;
parameter-declaration ::= (declaration-specifiers declarator) | (declaration-specifiers abstract-declarator?) ;
direct-declarator ::= identifier | ("(" declarator ")") | (direct-declarator "[" type-qualifier-list? assignment-expression? "]") | (direct-declarator "[" "static" type-qualifier-list? assignment-expression "]") | (direct-declarator "[" type-qualifier-list "static" assignment-expression "]") | (direct-declarator "[" type-qualifier-list? "*" "]") | (direct-declarator "(" parameter-type-list ")") | (direct-declarator "(" identifier-list? ")") ;
type-qualifier-list ::= type-qualifier | (type-qualifier-list type-qualifier) ;
block-item ::= declaration | statement ;
exclusive-OR-expression ::= AND-expression | (exclusive-OR-expression "^" AND-expression) ;
declaration-list ::= declaration | (declaration-list declaration) ;
jump-statement ::= ("goto" identifier ";") | ("continue" ";") | ("break" ";") | ("return" expression? ";") ;
specifier-qualifier-list ::= (type-specifier specifier-qualifier-list?) | (type-qualifier specifier-qualifier-list?) ;
init-declarator ::= declarator | (declarator "=" initializer) ;
struct-or-union-specifier ::= (struct-or-union identifier? "{" struct-declaration-list "}") | (struct-or-union identifier) ;
compound-statement ::= "{" block-item-list? "}" ;
typedef-name ::= identifier ;
equality-expression ::= relational-expression | (equality-expression "==" relational-expression) | (equality-expression "!=" relational-expression) ;
function-specifier ::= "inline" ;
struct-declaration-list ::= struct-declaration | (struct-declaration-list struct-declaration) ;
enumerator-list ::= enumerator | (enumerator-list "," enumerator) ;
primary-expression ::= identifier | constant | string-literal | ("(" expression ")") ;
shift-expression ::= additive-expression | (shift-expression "<<" additive-expression) | (shift-expression ">>" additive-expression) ;
identifier-list ::= identifier | (identifier-list "," identifier) ;
unary-operator ::= "&" | "*" | "+" | "-" | "~" | "!" ;
parameter-list ::= parameter-declaration | (parameter-list "," parameter-declaration) ;
struct-declarator-list ::= struct-declarator | (struct-declarator-list "," struct-declarator) ;
struct-declaration ::= specifier-qualifier-list struct-declarator-list ";" ;
--------------------c::antoniol.bgf--------------------
long_comment ::= comment+ ;
else_part ::= "//"? elsedef_line newline line* ;
elsif_part ::= "//"? elsifdef_line newline line* ;
not_newline ::= long_comment | (token) ;
any_other_line ::= not_newline* ;
ifdef_token ::= ifdef_line | elsedef_line | elsifdef_line | endifdef_line ;
--------------------c::malton-dahn.bgf--------------------
asm_spec ::= asm_or_cv+ "(" asm_template asm_output_operands? asm_input_operands? asm_clobbered_registers? ")" ;
C_compilation_unit ::= declaration_or_function_definition* ;
attribute_format ::= "__format__" | "__format" | "format__" | "format" ;
type_specifier ::= simple_type_name | enum_specifier | struct_or_union_specifier ;
 type_specifier ::= typeof_expression | complex_specifier ;
bit_qualifier ::= "long" | "short" | "signed" | "unsigned" | "__signed__" | "__signed" ;
argument_declaration ::= (decl_specifiers argument_declarator?) | "..." ;
 argument_declaration ::= comment_NL* "..." ;
 argument_declaration ::= "..." comment_NL* ;
struct_or_union_designator ::= "."? id postfix_extension* ;
member_declarator ::= (declarator bitfieldsize?) | bitfieldsize ;
 member_declarator ::= (declarator bitfieldsize? attributes_or_asm*) | bitfieldsize ;
postfix_extension ::= ("[" expression "]") | ("(" expression? ")") | ("." id) | ("->" id) | "++" | "--" ;
 postfix_extension ::= ("[" expression "]") | ("(" {argument_expression ","}* ")") | ("." id) | ("->" id) | "++" | "--" ;
attribute_far ::= "__far__" | "__far" | "far__" | "far" ;
designated_initializer ::= assignment_expression | (designator* designator_assignment? assignment_expression) | (designator* designator_assignment? NL "{" IN {designated_initializer ","}* ","? EX "}") ;
argument_declarator ::= declarator | abstract_declarator ;
conditional_expression ::= binary_expression conditional_operation? ;
 conditional_expression ::= binary_expression conditional_operation* ;
complex_specifier ::= "_Complex" simple_type_or_qualifier* ;
conditional_operation ::= "?" expression ":" conditional_expression ;
 conditional_operation ::= "?" expression? ":" binary_expression ;
attribute_alias ::= "alias" | "__alias__" | "__alias" | "alias__" ;
attribute_malloc ::= "malloc" | "__malloc__" | "__malloc" | "malloc__" ;
attribute_near ::= "__near__" | "__near" | "near__" | "near" ;
else_statement ::= "else" statement ;
restrict_qualifier ::= "__restrict" | "restrict__" | "restrict" | "__restrict__" ;
simple_type_or_qualifier ::= simple_type_name | type_qualifier ;
type_qualifier ::= "long" | "short" | "signed" | "unsigned" ;
 type_qualifier ::= bit_qualifier | inline_qualifier | cv_qualifier | restrict_qualifier ;
asm_input_operands ::= ":" {asm_operand ","}* ;
attribute_no_check_mem ::= "no_check_memory_usage" | "__no_check_memory_usage__" | "__no_check_memory_usage" | "no_check_memory_usage__" ;
while_statement ::= "while" "(" expression ")" statement ;
nonreferential_primary ::= constant | string | ("(" expression ")") ;
 nonreferential_primary ::= constant | string | ("(" expression ")") | compound_statement_expression | compound_literal | (extension_specifier compound_statement_expression) | (extension_specifier "(" expression ")") ;
cv_qualifier ::= "const" | "volatile" ;
 cv_qualifier ::= "const" | "volatile" | "__const" | "__const__" | "const__" | "__volatile__" | "__volatile" | "volatile__" ;
attribute_regparm ::= "regparm" | "__regparm__" | "__regparm" | "regparm__" ;
attribute_noinline ::= "__noinline__" | "__noinline" | "noinline__" | "noinline" ;
compound_statement ::= "{" IN NL compound_statement_body "}" ";"? NL ;
 compound_statement ::= comment_NL* "..." ;
 compound_statement ::= "{" NL compound_statement_body* "}" ";"? NL ;
attribute_unused ::= "__unused__" | "__unused" | "unused__" | "unused" ;
designator_assignment ::= ":" | "=" ;
attribute_constructor ::= "constructor" | "__constructor__" | "__constructor" | "constructor__" ;
array_declarator_extension ::= "[" constant_expression? "]" ;
assignment_operator ::= "=" | "*=" | "/=" | "%=" | "+=" | "-=" | ">>=" | "<<=" | "&=" | "^=" | "|=" ;
ptr_operator ::= "*" cv_qualifier* SPOFF ;
 ptr_operator ::= "*" ptr_qualifier* ;
if_statement ::= "if" "(" expression ")" statement else_statement? ;
 if_statement ::= "if" "(" expression ")" comment_NL* statement else_statement? ;
exception_function ::= (stringlit* stringlit) | tagged_attribute_id ;
attribute_model ::= "model" | "__model__" | "__model" | "model__" ;
attribute_short_call ::= "short_call" | "__short_call__" | "__short_call" | "short_call__" ;
attribute_tiny ::= "tiny_data" | "__tiny_data__" | "__tiny_data" | "tiny_data__" ;
attribute_no_instrument ::= "no_instrument_function" | "__no_instrument_function__" | "__no_instrument_function" | "no_instrument_function__" ;
null_declaration ::= semi ;
attribute_aligned ::= "__aligned__" | "__aligned" | "aligned__" | "aligned" ;
init_declarator ::= declarator initialization? ;
 init_declarator ::= declarator initialization? attributes_or_asm* ;
tagged_attribute_number ::= number ;
asm_template ::= string ;
extension_specifier ::= "__extension__" ;
file_id ::= id | key ;
attribute_pure ::= "__pure__" | "__pure" | "pure__" | "pure" ;
do_statement ::= "do" statement "while" "(" expression ")" semi ;
array_designator ::= ("[" constant_expression "]" postfix_extension*) | ("[" constant_expression SP "..." SP constant_expression "]" postfix_extension*) ;
function_declarator_extension ::= "(" argument_declaration_list ")" cv_qualifier* ;
null_statement ::= semi ;
attribute_dllexport ::= "__dllexport__" | "__dllexport" | "dllexport__" | "dllexport" ;
unary_operator ::= "*" | "&" | "+" | "-" | "!" | "~" | "++" | "--" ;
 unary_operator ::= "&&" ;
declarator_extension ::= function_declarator_extension | array_declarator_extension ;
asm_statement ::= asm_spec semi ;
attribute_signal ::= "signal" | "__signal__" | "__signal" | "signal__" ;
unary_expression ::= postfix_expression | (unary_operator SPOFF unary_expression SPON) | ("(" type_name ")" unary_expression) | sizeof_expression ;
 unary_expression ::= alignof_expression ;
attribute_dllimport ::= "dllimport" | "__dllimport__" | "__dllimport" | "dllimport__" ;
postfix_expression ::= reference | nonreference ;
gnu_long_int_charlit ::= "L" SPOFF charlit SPON ;
attribute_funvector ::= "function_vector" | "__function_vector__" | "__function_vector" | "function_vector__" ;
sizeof_expression ::= ("sizeof" "(" type_name ")") | ("sizeof" unary_expression) ;
 sizeof_expression ::= ("sizeof" unary_expression) | ("sizeof" "(" type_name ")") ;
jump_statement ::= ("goto" label_id semi) | ("continue" semi) | ("break" semi) | ("return" expression? semi) ;
 jump_statement ::= "goto" ptr_operator expression semi ;
comment_NL ::= comment NL ;
struct_or_union ::= "struct" | "union" ;
struct_or_union_specifier ::= (struct_or_union tagged_reference_id? "{" IN NL member_declaration* EX "}") | (struct_or_union tagged_reference_id) ;
 struct_or_union_specifier ::= (struct_or_union attribute_spec* tagged_reference_id? "{" IN NL member_declaration* EX "}" attribute_spec*) | (struct_or_union attribute_spec* tagged_reference_id) ;
type_specifiers ::= (type_qualifier+ type_specifier? type_qualifier*) | (type_specifier type_qualifier*) ;
 type_specifiers ::= (type_qualifier* type_specifier type_qualifier*) | (type_qualifier*) ;
ptr_qualifier ::= restrict_qualifier | cv_qualifier ;
slash_fileid ::= slash file_id ;
binary_expression ::= unary_expression | (binary_expression binary_operator unary_expression) ;
attribute_visibility ::= "__visibility__" | "__visibility" | "visibility__" | "visibility" ;
attribute_format_arg ::= "__format_arg__" | "__format_arg" | "format_arg__" | "format_arg" ;
tagged_attribute_id ::= id ;
typeof_specifier ::= "__typeof" | "typeof" | "__typeof__" | "typeof__" ;
sc_specifier ::= "auto" | "register" | "static" | "extern" | "typedef" ;
reference_id ::= id ;
asm_or_cv ::= "__asm__" | "asm" | "asm__" | "__asm" | cv_qualifier ;
attribute_interrupt_handler ::= "interrupt_handler" | "__interrupt_handler__" | "__interrupt_handler" | "interrupt_handler__" ;
expression_statement ::= expression semi ;
compound_statement_body ::= (statement* EX) | (declaration compound_statement_body) ;
 compound_statement_body ::= (IN declaration EX) | (IN function_definition EX) | (IN statement EX) ;
argument_declaration_list ::= {argument_declaration ","}* ;
 argument_declaration_list ::= "..." comment_NL* ;
asm_output_operands ::= ":" {asm_operand ","}* ;
inline_qualifier ::= "__inline" | "__inline__" | "inline__" | "inline" ;
tagged_reference_id ::= reference_id ;
attribute_used ::= "__used__" | "__used" | "used__" | "used" ;
attribute_interrupt ::= "interrupt" | "__interrupt__" | "__interrupt" | "interrupt__" ;
attribute_spec ::= "__attribute__" "('(" {attribute_extension ","}* ")')" ;
compound_statement_expression ::= "(" compound_statement ")" ;
attribute_destructor ::= "destructor" | "__destructor__" | "__destructor" | "destructor__" ;
compound_literal_array_declarator ::= (ptr_operator* array_declarator_extension*) | ("(" compound_literal_array_declarator ")" array_declarator_extension*) ;
attribute_packed ::= "__packed__" | "__packed" | "packed__" | "packed" ;
for_statement ::= "for" "(" expression? ";" expression? ";" expression? ")" statement ;
 for_statement ::= "for" "(" declaration_body ";" expression? ";" expression? ")" statement ;
assignment_operation ::= assignment_operator assignment_expression ;
attribute_noreturn ::= "__noreturn__" | "__noreturn" | "noreturn__" | "noreturn" ;
attribute_sp_switch ::= "sp_switch" | "__sp_switch__" | "__sp_switch" | "sp_switch__" ;
type_name ::= type_specifiers abstract_declarator? ;
abstract_declarator ::= (ptr_operator+ declarator_extension*) | ("(" abstract_declarator ")" declarator_extension*) ;
 abstract_declarator ::= (ptr_operator+ declarator_extension*) | (array_declarator_extension*) | ("(" abstract_declarator ")" declarator_extension*) ;
attribute_exception ::= "exception" | "__exception__" | "__exception" | "exception__" ;
attribute_shared ::= "shared" | "__shared__" | "__shared" | "shared__" ;
exception_arg ::= (stringlit* stringlit) | tagged_attribute_id ;
attribute_mode ::= "__mode__" | "__mode" | "mode__" | "mode" ;
attribute_always_inline ::= "__always_inline__" | "__always_inline" | "always_inline__" | "always_inline" ;
unannotated_reference_base ::= reference_id | nonreferential_primary ;
attribute_model_name ::= "small" | "__small__" | "__small" | "small__" | "medium" | "__medium__" | "__medium" | "medium__" | "large" | "__large__" | "__large" | "large__" ;
attribute_eightbit ::= "eightbit_data" | "__eightbit_data__" | "__eightbit_data" | "eightbit_data__" ;
asm_clobbered_registers ::= ":" {string ","}* ;
base_declarator ::= reference_id | ("(" declarator ")") ;
 base_declarator ::= (attribute_spec* reference_id) | (attribute_spec* "(" declarator ")") ;
attribute_stdcall ::= "stdcall" | "__stdcall__" | "__stdcall" | "stdcall__" ;
attribute_long_call ::= "long_call" | "__long_call__" | "__long_call" | "long_call__" ;
gnu_long_int ::= gnu_long_int_string | gnu_long_int_charlit ;
attribute_extension ::= (attribute_alias "(" string ")") | attribute_aligned | (attribute_aligned "(" tagged_attribute_number ")") | (attribute_aligned "(" alignof_expression ")") | attribute_always_inline | attribute_cdecl | (attribute_cleanup "(" tagged_attribute_id ")") | attribute_const | attribute_constructor | attribute_deprecated | attribute_destructor | attribute_dllexport | attribute_dllimport | attribute_eightbit | (attribute_exception "(" exception_function {exception_arg ","}* ")") | attribute_far | attribute_funvector | (attribute_format "(" format_archetype "," tagged_attribute_number "," tagged_attribute_number ")") | (attribute_format_arg "(" tagged_attribute_number ")") | attribute_interrupt | (attribute_interrupt "(" string ")") | attribute_interrupt_handler | (attribute_interrupt_handler "(" string ")") | attribute_longcall | attribute_long_call | attribute_malloc | attribute_may_alias | (attribute_mode "(" tagged_attribute_id ")") | (attribute_model "(" attribute_model_name ")") | attribute_naked | attribute_near | attribute_no_check_mem | attribute_no_instrument | attribute_nocommon | attribute_noinline | attribute_nonnull | (attribute_nonnull "(" tagged_attribute_number+ ")") | attribute_noreturn | attribute_nothrow | attribute_packed | attribute_pure | (attribute_regparm "(" tagged_attribute_number ")") | (attribute_section "(" string ")") | attribute_shared | attribute_short_call | (attribute_signal "(" string ")") | (attribute_sp_switch "(" string ")") | attribute_stdcall | attribute_tiny | (attribute_tls_model "(" tls_model_type ")") | attribute_trans_union | (attribute_trap_exit "(" tagged_attribute_number ")") | attribute_used | attribute_unused | (attribute_vector_size "(" tagged_attribute_number ")") | (attribute_visibility "(" visibility_type ")") | attribute_weak ;
argument_expression ::= assignment_expression | type_name ;
attribute_vector_size ::= "__vector_size__" | "__vector_size" | "vector_size__" | "vector_size" ;
attribute_trans_union ::= "__transparent_union__" | "__transparent_union" | "transparent_union__" | "transparent_union" ;
member_declaration ::= (decl_specifiers member_declarator+ semi) | preprocessor ;
 member_declaration ::= comment_NL ;
 member_declaration ::= (decl_specifiers member_declarator+ semi) | (decl_qualifier* struct_or_union_specifier semi) | semi | preprocessor ;
decl_qualifier ::= sc_specifier | cv_qualifier | type_qualifier ;
 decl_qualifier ::= sc_specifier | type_qualifier | attribute_spec | extension_specifier ;
attribute_naked ::= "naked" | "__naked__" | "__naked" | "naked__" ;
tls_model_type ::= "global-dynamic" | "local-dynamic" | "initial-exec" | "local-exec" ;
unlabeled_statement ::= expression_statement | if_statement | for_statement | while_statement | switch_statement | do_statement | null_statement | jump_statement | compound_statement ;
 unlabeled_statement ::= asm_statement ;
assignment_expression ::= conditional_expression assignment_operation? ;
 assignment_expression ::= conditional_expression | (conditional_expression assignment_operation) ;
visibility_type ::= "default" | "hidden" | "protected" | "internal" ;
declaration_body ::= (decl_specifiers init_declarator+) | enum_specifier | struct_or_union_specifier ;
 declaration_body ::= (decl_specifiers init_declarator+) | (decl_qualifier* struct_or_union_specifier) | (decl_qualifier* enum_specifier attribute_spec*) | (local_label declarator+) | asm_spec ;
label_id ::= id ;
attribute_section ::= "section" | "__section__" | "__section" | "section__" ;
format_archetype ::= "printf" | "__printf__" | "__printf" | "printf__" | "scanf" | "__scanf__" | "__scanf" | "scanf__" | "strftime" | "__strftime__" | "__strftime" | "strftime__" | "strfmon" | "__strfmon__" | "__strfmon" | "strfmon__" ;
type_id ::= reference_id ;
attribute_weak ::= "weak" | "__weak__" | "__weak" | "weak__" ;
attribute_deprecated ::= "__deprecated__" | "__deprecated" | "deprecated__" | "deprecated" ;
enumerator_value ::= "=" constant_expression ;
gnu_long_int_string ::= "L" SPOFF string SPON ;
attribute_nonnull ::= "__nonnull__" | "__nonnull" | "nonnull__" | "nonnull" ;
attribute_nocommon ::= "nocommon" | "__nocommon__" | "nocommon__" | "__nocommon" ;
attribute_cdecl ::= "cdecl" | "__cdecl__" | "__cdecl" | "cdecl__" ;
decl_specifiers ::= decl_qualifier* type_specifier? decl_qualifier* ;
 decl_specifiers ::= (decl_qualifier* type_specifier decl_qualifier*) | (decl_qualifier*) ;
switch_statement ::= "switch" "(" expression ")" statement ;
 switch_statement ::= "switch" "(" expression ")" comment_NL* statement ;
declaration_or_function_definition ::= declaration | function_definition ;
simple_type_name ::= "char" | "int" | "void" | "float" | "double" | type_id ;
attribute_nothrow ::= "__nothrow__" | "__nothrow" | "nothrow__" | "nothrow" ;
binary_operator ::= "+" | "-" | "*" | "/" | "%" | "==" | "!=" | "<" | ">" | "<=" | ">=" | "||" | "&&" | "|" | "^" | "&" | "<<" | ">>" ;
local_label ::= "__label__" ;
attribute_longcall ::= "longcall" | "__longcall__" | "__longcall" | "longcall__" ;
alignof_expression ::= ("__alignof__" "(" unary_expression ")") | ("__alignof" "(" unary_expression ")") | ("__alignof__" "(" type_name ")") | ("__alignof" "(" type_name ")") ;
compound_literal ::= ("(" struct_or_union_specifier ")" "{" {designated_initializer ","}* ","? "}") | ("(" compound_literal_array_type ")" "{" {designated_initializer ","}* ","? "}") | ("(" compound_literal ")") ;
KR_parameter_decls ::= NL IN declaration+ EX ;
function_definition ::= NL decl_specifiers declarator KR_parameter_decls? compound_statement NL ;
attribute_may_alias ::= "__may_alias__" | "__may_alias" | "may_alias__" | "may_alias" ;
constant_expression ::= conditional_expression ;
 constant_expression ::= restrict_qualifier ;
attribute_trap_exit ::= "trap_exit" | "__trap_exit__" | "__trap_exit" | "trap_exit__" ;
reference_expression ::= unannotated_reference_base postfix_extension* ;
attributes_or_asm ::= attribute_spec | asm_spec ;
typeof_expression ::= (typeof_specifier "(" simple_type_name ")") | (typeof_specifier "(" expression ")") ;
asm_operand ::= string "(" expression ")" ;
compound_literal_array_type ::= type_specifiers compound_literal_array_declarator ;
attribute_tls_model ::= "__tls_model__" | "__tls_model" | "tls_model__" | "tls_model" ;
attribute_cleanup ::= "__cleanup__" | "__cleanup" | "cleanup__" | "cleanup" ;
attribute_const ::= "__const__" | "__const" | "const__" | "const" ;
enum_specifier ::= ("enum" tagged_reference_id? "{" {enumerator ","}* "}") | ("enum" tagged_reference_id) ;
 enum_specifier ::= ("enum" tagged_reference_id) | ("enum" tagged_reference_id? "{" {enumerator ","}* ","? "}") ;
--------------------c::bruneliere.bgf--------------------
CLong ::= ε ;
CFunction ::= isVarArg::Boolean ;
CLongLong ::= ε ;
BehavioralFeature ::= CFunction ;
 BehavioralFeature ::= (parameters::CParameter)+ ;
CChar ::= CSignedChar ;
 CChar ::= CUnsignedChar ;
 CChar ::= CWChar ;
 CChar ::= CSignedChar | CUnsignedChar | CWChar ;
CFloat ::= ε ;
CShort ::= ε ;
CStruct ::= (contains::CStructureContents)+ ;
CField ::= ε ;
CVoid ::= ε ;
CUnsignedInt ::= UnsignedLong ;
 CUnsignedInt ::= UnsignedLongLong ;
 CUnsignedInt ::= UnsignedShort ;
 CUnsignedInt ::= UnsignedLong | UnsignedLongLong | UnsignedShort ;
CStructuralFeature ::= CField ;
CTypedElement ::= CParameter ;
 CTypedElement ::= CStructuralFeature ;
 CTypedElement ::= type::CClassifier source::CSourceText ;
CSignedChar ::= ε ;
CStructured ::= CStruct ;
 CStructured ::= CUnion ;
 CStructured ::= (contains::CStructureContents)+ ;
CDouble ::= ε ;
UnsignedLong ::= ε ;
CLongDouble ::= ε ;
CBitField ::= ε ;
CIntegral ::= CEnumeration ;
 CIntegral ::= CInt ;
 CIntegral ::= CChar ;
 CIntegral ::= CEnumeration | CInt | CChar ;
CUnsignedChar ::= ε ;
UnsignedLongLong ::= ε ;
CUnion ::= (contains::CStructureContents)+ ;
CInt ::= CUnsignedInt ;
 CInt ::= CLong ;
 CInt ::= CLongLong ;
 CInt ::= CShort ;
 CInt ::= CUnsignedInt | CLong | CLongLong | CShort ;
CSourceText ::= source::String fileName::String ;
CStructureContents ::= CStructuralFeature ;
 CStructureContents ::= CStructured ;
 CStructureContents ::= sc_container::CStructured ;
CWChar ::= ε ;
CFloating ::= CDouble ;
 CFloating ::= CFloat ;
 CFloating ::= CLongDouble ;
 CFloating ::= CDouble | CFloat | CLongDouble ;
UnsignedShort ::= ε ;
CDataType ::= CIntegral ;
 CDataType ::= CFloating ;
 CDataType ::= CBitField ;
 CDataType ::= CVoid ;
 CDataType ::= CIntegral | CFloating | CBitField | CVoid ;
CParameter ::= behavioralFeature::BehavioralFeature ;
CClassifier ::= CDataType ;
 CClassifier ::= Derived ;
 CClassifier ::= CStructured ;
 CClassifier ::= CDataType | Derived ;
CEnumeration ::= ε ;
--------------------c::cordy-malton-dahn.bgf--------------------
asm_spec ::= (asm cv_qualifier* "(" IN asm_template asm_output_operands? asm_input_operands? asm_clobbered_registers? EX ")") | (asm cv_qualifier* "{" IN asm_instruction_semi* asm_instruction semi? EX "}") ;
comma_dotdotdot ::= "," SP "..." SP ;
constructor_expression ::= ("(" constructor_type ")" "{" {initializer ","}* ","? "}") | ("(" constructor_expression ")") ;
equality_expression ::= relational_expression equality_relational_expression* ;
colon_equals_or_equals ::= ":" | "=" | "|=" ;
KR_simple_type_name ::= simple_type_name | (struct_or_union id) | enum_specifier | bit_qualifier ;
assign_assignment_expression ::= assignment_operator assignment_expression ;
extern_langauge_declaration ::= "extern" stringlit "{" IN NL declaration* EX "}" ";"? NL ;
type_specifier ::= simple_type_name | enum_specifier | struct_or_union_specifier | typeof_expression | complex_specifier ;
error_statement ::= "error" ":"? id+ "+"? id* semi? ;
argument_declaration ::= (decl_specifiers argument_declarator?) | ("(" argument_declaration ")") ;
bit_qualifier ::= "long" | "short" | "signed" | "unsigned" | "__signed__" | "__signed" ;
simple_statement_opt_semi ::= simple_statement semi? ;
member_declarator ::= (declarator bitfieldsize? sub_member_declarators? attributes_or_asm*) | bitfieldsize ;
postfix_extension ::= ("[" SPON assignment_expression SPOFF "]") | (SP "(" SPON {argument_expression ","}* dotdot? SPOFF ")") | ("." id) | ("->" id macro_call?) | "++" | "--" ;
argument_declarator ::= (declarator attributes_or_asm*) | (abstract_declarator attributes_or_asm*) ;
string_unit ::= stringlit | pseudo_string | register_spec | preprocessor ;
OR_logical_AND_expression ::= logical_OR_operator logical_AND_expression ;
macro_call ::= macro_name "(" macro_arguments ")" ;
conditional_expression ::= logical_OR_expression conditional_operation? ;
element_label ::= "."? element_name element_name_extension* ;
macro_type_argument ::= argument_expression ;
complex_specifier ::= complex simple_type_or_qualifier* ;
element_name ::= id ;
conditional_operation ::= "?" expression? ":" conditional_expression ;
acquires_releases ::= "__acquires" | "__releases" ;
additive_expression ::= multiplicative_expression add_subtract_multiplicative_expression* ;
else_statement ::= preprocessor* "else" else_sub_statement ;
unknown_item ::= ("{" unknown_item* "}") | token | key ;
asm_register ::= string | pseudo_string ;
restrict_qualifier ::= "__restrict" | "restrict__" | "restrict" | "__restrict__" ;
simple_type_or_qualifier ::= simple_type_name | type_qualifier ;
expression_list ::= expression+ ;
type_qualifier ::= bit_qualifier | cv_qualifier | inline_qualifier | restrict_qualifier | init_qualifier | exit_qualifier | user_qualifier | force_qualifier | asmlinkage_qualifier | zexport_qualifier | attribute_spec ;
preprocessor_function_header ::= (NL preprocessor function_header) | (NL function_header) ;
asm_input_operands ::= ":" {asm_operand ","}* NL ;
nf_qualifier ::= "near" | "far" | "NEAR" | "FAR" ;
function_definition_or_declaration ::= function_definition | declaration | preprocessor | (compound_statement NL) | macro_declaration_or_statement | unknown_declaration_or_statement ;
while_statement ::= ("while" "(" expression_list ")" sub_statement else_statement?) | (whileeachid "(" expression_list ")" sub_statement else_statement?) ;
gnu_statement ::= error_statement | else_statement ;
cv_qualifier ::= "const" | "volatile" | "CONST" | "__const" | "__const__" | "const__" | "__volatile__" | "__volatile" | "volatile__" | "__iomem" | initdata | "internal_function" | "yyconst" | "pascal" | upper_macro_name ;
upper_macro_name ::= upperlowerid ;
alignof_specifier ::= "__alignof__" | "__alignof" ;
compound_statement ::= "{" IN NL compound_statement_body EX "}" ";"? NL preprocessor* ;
attribute_specifier ::= "__attribute__" | "__attribute" ;
AND_inclusive_OR_expression ::= preprocessor* logical_AND_operator inclusive_OR_expression ;
register_spec ::= ("%" SPOFF "%"? id SPON) | ("%" SPOFF "%"? integernumber id? SPON) ;
array_declarator_extension ::= "[" constant_expression? "]" ;
assignment_operator ::= "=" | "*=" | "/=" | "%=" | "+=" | "-=" | ">>=" | "<<=" | "&=" | "^=" | "|=" ;
ptr_operator ::= (nf_qualifier? "*" SPOFF ptr_qualifier*) | (nf_qualifier? "(" "*" ")" SPOFF ptr_qualifier*) ;
function_header ::= (decl_specifiers? declarator function_declarator_extension attribute_spec*) | ("YY_DECL" NL) ;
macro_argument ::= ("(" macro_arguments ")") | token | key ;
if_statement ::= ("if" "(" expression_list preprocessor* ")" sub_statement else_statement?) | ("if" postfix_expression sub_statement else_statement?) ;
macro_declaration_or_statement ::= (reference_id_equals? macro_call equals_initializer? ";"? NL) | (upper_macro_name ";"? NL) ;
asm_instruction ::= asm_unit+ NL ;
exit_qualifier ::= "__exit" | "exit__" | "exit" | "__exit__" ;
asm_unit ::= token_or_key ;
sub_unary_expression ::= postfix_expression | (unary_operator SPOFF cast_expression SPON) | (SPON sizeof_expression) | (SPON alignof_expression) ;
asm_instruction_semi ::= asm_unit+ ";" NL ;
null_declaration ::= semi ;
shift_operator ::= "<<" | ">>" ;
initializer_unit ::= assignment_expression | compound_initializer | (NL element_label colon_equals_or_equals? initializer ";"?) | (NL "[" constant_expression dotdotdot? constant_expression? "]" "="? initializer ";"?) | macro_call ;
init_declarator ::= declarator attributes_or_asm* initialization? ;
logical_OR_expression ::= logical_AND_expression OR_logical_AND_expression* ;
asm_template ::= string_unit_NL+ ;
extension_specifier ::= "__extension__" | "__extension" ;
relational_operator ::= "<" | ">" | "<=" | ">=" ;
do_statement ::= ("do" sub_statement "while" "(" expression_list ")" semi) | ("do" sub_statement "while" macro_call semi) | ("do" sub_statement whileeachid "(" expression_list ")" semi) ;
declaration_or_statement ::= declaration | statement | preprocessor | function_definition | macro_declaration_or_statement | unknown_declaration_or_statement ;
function_declarator_extension ::= "(" argument_declaration_list ")" cv_qualifier* ;
additive_operator ::= "+" | "-" ;
null_statement ::= ε ;
weak_specifier ::= "__weak__" | "__weak" ;
machinestart_declaration ::= "MACHINE_START" "(" expression_list ")" IN {initializer ","}* ","? EX NL "MACHINE_END" ";"? NL ;
statement_declaration_or_end ::= declaration_or_statement | "}" ;
unary_operator ::= "&" | "*" | "+" | "-" | "~" | "!" | "&&" | "NOT" | "not" ;
pseudo_string ::= ps_name ps_arguments? ;
comma_expression_statement ::= "," expression_statement ;
preprocessor_list_initializer ::= preprocessor {initializer ","}* ","? ;
declarator_extension ::= function_declarator_extension | array_declarator_extension ;
relational_expression ::= shift_expression relational_shift_expression* ;
multipy_divide_cast_expression ::= multiplicative_operator cast_expression ;
shift_additive_expression ::= shift_operator additive_expression ;
nosemiNL ::= NL ;
asm_statement ::= asm_spec ;
else_sub_statement ::= if_statement | sub_statement ;
unary_expression ::= pre_increment_operator* sub_unary_expression SPON ;
ps_argument_list ::= {ps_argument ","}* ;
cast_operator ::= "(" type_name ")" ;
macro_arguments ::= macro_argument* ;
postfix_expression ::= primary SPOFF postfix_extension* SPON ;
logical_AND_operator ::= "&&" | "AND" | "and" | "ANDP" ;
gnu_long_int_charlit ::= "L" SPOFF charlit SPON ;
sizeof_expression ::= ("sizeof" "(" type_name ")") | ("sizeof" unary_expression) ;
jump_statement ::= ("goto" label_id) | "continue" | "break" | ("return" expression?) | ("goto" ptr_operator expression) | ("return" expression attribute_spec?) ;
struct_or_union ::= "struct" | "union" ;
sub_member_declarators ::= "(" {member_declarator ","}* ")" ;
struct_or_union_specifier ::= (struct_or_union attribute_spec* reference_id? struct_or_union_body attribute_spec*) | (struct_or_union attribute_spec* reference_id attribute_spec*) ;
exclusive_OR_AND_expression ::= bit_XOR_operator AND_expression ;
type_specifiers ::= (type_qualifier* type_specifier type_qualifier*) | (type_qualifier+) ;
ptr_qualifier ::= (SPON cv_qualifier) | (SPON inline_qualifier) | (SPON restrict_qualifier) | (SPON init_qualifier) | (SPON exit_qualifier) | (SPON user_qualifier) | (SPON zexport_qualifier) ;
cast_expression ::= cast_operator* unary_expression ;
asmlinkage_qualifier ::= "asmlinkage" ;
exclusive_OR_expression ::= AND_expression exclusive_OR_AND_expression* ;
pre_increment_operator ::= ("++" SPOFF) | ("--" SPOFF) ;
typeof_specifier ::= "__typeof" | "typeof" | "__typeof__" | "typeof__" ;
reference_id ::= id | foreachid | whileeachid ;
sc_specifier ::= "auto" | "register" | "static" | "extern" | "far" | "near" | "typedef" | "local" | "vector" | "const_debug" | "INIT" | "STATIC" | "NEAR" | "FAR" ;
relational_shift_expression ::= relational_operator shift_expression ;
expression_statement ::= pre_increment_operator* assignment_expression assign_assignment_expression* comma_expression_statement? ;
compound_statement_body ::= declaration_or_statement* ;
argument_declaration_list ::= {argument_declaration ","}* comma_dotdotdot? ;
inline_qualifier ::= "__inline" | "__inline__" | "inline__" | "inline" | "SBA_INLINE" ;
asm_output_operands ::= ":" {asm_operand ","}* NL ;
compilation_unit ::= function_definition_or_declaration* ;
attribute_spec ::= (attribute_specifier "('(" {attribute_extension ","}* ")')") | (IN NL acquires_releases "(" expression ")" EX) | upper_macro_name ;
compound_statement_expression ::= "(" compound_statement ")" ;
ps_argument ::= constant_expression | register_spec ;
for_statement ::= ("for" "(" expression_list? ";" expression_list? ";" expression_list? ")" sub_statement) | ("for" "(" decl_specifiers init_declarator+ ";" expression_list? ";" expression_list? ")" sub_statement) | ("for" "(" expression_list? ";" expression_list? ")" sub_statement) | (foreachid "(" expression_list ")" sub_statement) ;
shift_expression ::= additive_expression shift_additive_expression* ;
AND_equality_expression ::= bit_AND_operator equality_expression ;
attribute_arguments ::= "(" attribute_argument+ ")" ;
type_name ::= type_specifiers abstract_declarator* ;
reference_id_equals ::= reference_id "=" ;
abstract_declarator ::= (ptr_operator+ declarator_extension* SPON) | array_declarator_extension | ("(" abstract_declarator+ ")" declarator_extension*) | ("(" type_name+ ")") | "static" ;
c_unlabeled_statement ::= (simple_statement semi) | structured_statement ;
multiplicative_operator ::= "*" | "/" | "%" | "DIV" | "MOD" ;
decl_qualifier_or_type_specifier ::= decl_qualifier | type_specifier | (macro_specifier nosemiNL?) ;
unary_expression_assign ::= unary_expression assignment_operator ;
macro_type_arguments ::= "(" {macro_type_argument ","}* ")" ;
declspec_specifier ::= "__declspec" "(" decl_specifiers ")" ;
equals_initializer ::= ("=" initializer) | initializer ;
inclusive_OR_expression ::= exclusive_OR_expression OR_exclusive_OR_expression* ;
constructor_type ::= struct_or_union_specifier | (type_specifiers ptr_operator* array_declarator_extension*) ;
asm_clobbered_registers ::= ":" {asm_register ","}* NL ;
base_declarator ::= reference_id | (SPON "(" decl_specifiers? declarator ")") ;
gnu_long_int ::= gnu_long_int_string | gnu_long_int_charlit ;
attribute_extension ::= attribute_name attribute_arguments? ;
expression_or_type_name ::= type_name | expression ;
argument_expression ::= (preprocessor* id? assignment_expression id? colon_number? preprocessor*) | type_name | structured_statement | equality_operator | relational_operator | (assignment_operator assignment_expression) | "do" | "extern" | "continue" | ε ;
zexport_qualifier ::= "ZEXPORT" ;
force_qualifier ::= "__force" | "force__" | "force" | "__force__" ;
decl_qualifier ::= sc_specifier | type_qualifier | extension_specifier | weak_specifier | declspec_specifier ;
member_declaration ::= (decl_specifiers {member_declarator ","}* semi) | null_declaration | preprocessor ;
bit_OR_operator ::= "|" | "BIT_OR" | "bit_or" ;
compound_initializer ::= ("{" "}") | ("{" IN {initializer ","}* ","? ";"? preprocessor_list_initializer* EX NL "}") ;
attribute_name ::= id | cv_qualifier ;
assignment_expression ::= conditional_expression | (unary_expression_assign assignment_expression) ;
logical_OR_operator ::= "||" | "OR" | "or" ;
unlabeled_statement ::= c_unlabeled_statement | gnu_statement ;
equality_operator ::= "==" | "!=" ;
ps_name ::= id ;
label_id ::= id ;
KR_simple_declaration ::= decl_specifiers? KR_simple_type_name decl_specifiers? declarator+ semi ;
type_id ::= reference_id ;
init_qualifier ::= "__init" | "init__" | "init" | "__init__" ;
device_attr ::= "DEVICE_ATTR" | "SYSDEV_ATTR" | "DEFINE_TIMER" | "DECLARE_TASKLET" ;
OR_exclusive_OR_expression ::= bit_OR_operator exclusive_OR_expression ;
user_qualifier ::= "__user" | "user__" | "user" | "__user__" ;
enumerator_value ::= "=" constant_expression ;
gnu_long_int_string ::= "L" SPOFF string SPON ;
sub_statement ::= compound_statement | (IN NL statement EX) | (IN NL macro_declaration_or_statement EX) ;
element_name_extension ::= ("." element_name) | ("[" constant_expression "]") ;
equality_relational_expression ::= equality_operator relational_expression ;
string_unit_NL ::= string_unit NL ;
decl_specifiers ::= decl_qualifier_or_type_specifier+ ;
colon_number ::= ":" number ;
switch_statement ::= ("switch" "(" expression_list ")" sub_statement) | ("switch" macro_call sub_statement) ;
simple_type_name ::= "char" | "int" | "void" | "float" | "double" | type_id ;
simple_statement ::= jump_statement | null_statement | expression_statement ;
multiplicative_expression ::= cast_expression multipy_divide_cast_expression* ;
AND_expression ::= equality_expression AND_equality_expression* ;
local_label ::= "__label__" ;
macro_name ::= id ;
bit_AND_operator ::= "&" | "BIT_AND" | "bit_and" ;
alignof_expression ::= alignof_specifier "(" expression_or_type_name ")" ;
KR_parameter_decls ::= NL IN KR_simple_declaration+ EX ;
ps_arguments ::= "(" ps_argument_list ")" ;
bit_XOR_operator ::= "^" | "BIT_XOR" | "bit_xor" ;
function_definition ::= NL function_header preprocessor_function_header* KR_parameter_decls? compound_statement NL ;
logical_AND_expression ::= inclusive_OR_expression AND_inclusive_OR_expression* ;
add_subtract_multiplicative_expression ::= additive_operator multiplicative_expression ;
constant_expression ::= conditional_expression ;
bracketed_id ::= "[" id "]" ;
unknown_declaration_or_statement ::= (unknown_item+ ";" NL) | (unknown_item+ NL) ;
macro_specifier ::= macro_call ;
token_or_key ::= token | key ;
attributes_or_asm ::= attribute_spec | asm_spec ;
typeof_expression ::= typeof_specifier "(" expression_or_type_name ")" ;
asm_operand ::= (bracketed_id? string "(" expression ")") | (pseudo_string "(" expression ")") ;
struct_or_union_body ::= "{" IN NL member_declaration* EX "}" ;
structured_statement ::= if_statement | for_statement | while_statement | switch_statement | do_statement | compound_statement | asm_statement ;
attribute_argument ::= ("(" attribute_argument* ")") | token_or_key ;
enum_specifier ::= ("enum" reference_id) | ("enum" reference_id? "{" {enumerator ","}* ","? preprocessor* "}") ;
--------------------c::cordy-malton.bgf--------------------
file_id ::= id | key ;
C_compilation_unit ::= declaration_or_function_definition* ;
do_statement ::= "do" statement "while" "(" expression ")" semi ;
for_statement ::= "for" "(" expression? ";" expression? ";" expression? ")" statement ;
type_specifier ::= simple_type_name | enum_specifier | struct_or_union_specifier ;
argument_declaration ::= (decl_specifiers argument_declarator?) | "..." ;
function_declarator_extension ::= "(" argument_declaration_list ")" cv_qualifier* ;
null_statement ::= semi ;
member_declarator ::= (declarator bitfieldsize?) | bitfieldsize ;
enumerator_value ::= "=" constant_expression ;
postfix_extension ::= ("[" expression "]") | ("(" expression? ")") | ("." id) | ("->" id) | "++" | "--" ;
assignment_operation ::= assignment_operator assignment_expression ;
unary_operator ::= "*" | "&" | "+" | "-" | "!" | "~" | "++" | "--" ;
argument_declarator ::= declarator | abstract_declarator ;
declarator_extension ::= function_declarator_extension | array_declarator_extension ;
conditional_expression ::= binary_expression conditional_operation? ;
type_name ::= type_specifiers abstract_declarator? ;
abstract_declarator ::= (ptr_operator+ declarator_extension*) | ("(" abstract_declarator ")" declarator_extension*) ;
conditional_operation ::= "?" expression ":" conditional_expression ;
decl_specifiers ::= decl_qualifier* type_specifier? decl_qualifier* ;
else_statement ::= "else" statement ;
unary_expression ::= postfix_expression | (unary_operator SPOFF unary_expression SPON) | ("(" type_name ")" unary_expression) | sizeof_expression ;
type_qualifier ::= "long" | "short" | "signed" | "unsigned" ;
unannotated_reference_base ::= reference_id | nonreferential_primary ;
switch_statement ::= "switch" "(" expression ")" statement ;
declaration_or_function_definition ::= declaration | function_definition ;
simple_type_name ::= "char" | "int" | "void" | "float" | "double" | type_id ;
postfix_expression ::= reference | nonreference ;
binary_operator ::= "+" | "-" | "*" | "/" | "%" | "==" | "!=" | "<" | ">" | "<=" | ">=" | "||" | "&&" | "|" | "^" | "&" | "<<" | ">>" ;
while_statement ::= "while" "(" expression ")" statement ;
base_declarator ::= reference_id | ("(" declarator ")") ;
nonreferential_primary ::= constant | string | ("(" expression ")") ;
sizeof_expression ::= ("sizeof" "(" type_name ")") | ("sizeof" unary_expression) ;
jump_statement ::= ("goto" label_id semi) | ("continue" semi) | ("break" semi) | ("return" expression? semi) ;
cv_qualifier ::= "const" | "volatile" ;
struct_or_union ::= "struct" | "union" ;
struct_or_union_specifier ::= (struct_or_union tagged_reference_id? "{" IN NL member_declaration* EX "}") | (struct_or_union tagged_reference_id) ;
KR_parameter_decls ::= NL IN declaration+ EX ;
compound_statement ::= "{" IN NL compound_statement_body "}" ";"? NL ;
function_definition ::= NL decl_specifiers declarator KR_parameter_decls? compound_statement NL ;
type_specifiers ::= (type_qualifier+ type_specifier? type_qualifier*) | (type_specifier type_qualifier*) ;
slash_fileid ::= slash file_id ;
array_declarator_extension ::= "[" constant_expression? "]" ;
binary_expression ::= unary_expression | (binary_expression binary_operator unary_expression) ;
assignment_operator ::= "=" | "*=" | "/=" | "%=" | "+=" | "-=" | ">>=" | "<<=" | "&=" | "^=" | "|=" ;
ptr_operator ::= "*" cv_qualifier* SPOFF ;
member_declaration ::= (decl_specifiers member_declarator+ semi) | preprocessor ;
decl_qualifier ::= sc_specifier | cv_qualifier | type_qualifier ;
constant_expression ::= conditional_expression ;
sc_specifier ::= "auto" | "register" | "static" | "extern" | "typedef" ;
reference_id ::= id ;
if_statement ::= "if" "(" expression ")" statement else_statement? ;
reference_expression ::= unannotated_reference_base postfix_extension* ;
unlabeled_statement ::= expression_statement | if_statement | for_statement | while_statement | switch_statement | do_statement | null_statement | jump_statement | compound_statement ;
assignment_expression ::= conditional_expression assignment_operation? ;
expression_statement ::= expression semi ;
declaration_body ::= (decl_specifiers init_declarator+) | enum_specifier | struct_or_union_specifier ;
compound_statement_body ::= (statement* EX) | (declaration compound_statement_body) ;
label_id ::= id ;
argument_declaration_list ::= {argument_declaration ","}* ;
tagged_reference_id ::= reference_id ;
init_declarator ::= declarator initialization? ;
enum_specifier ::= ("enum" tagged_reference_id? "{" {enumerator ","}* "}") | ("enum" tagged_reference_id) ;
type_id ::= reference_id ;
--------------------c::lankamp.bgf--------------------
MoreParameters ::= "," "..." ;
StorageClass ::= "register" ;
 StorageClass ::= "static" ;
 StorageClass ::= "extern" ;
 StorageClass ::= "auto" ;
 StorageClass ::= [TypeDef] "typedef" ;
GlobalDeclaration ::= [GlobalDeclarationWithoutInitDecls] specs::(Specifier+) ";" ;
 GlobalDeclaration ::= [GlobalDeclarationWithInitDecls] specs::(Specifier*) initDeclarators::({InitDeclarator ","}+) ";" ;
AnonymousIdentifier ::= ε ;
TranslationUnit ::= ExternalDeclaration+ ;
AbstractDeclarator ::= [Identifier] AnonymousIdentifier ;
 AbstractDeclarator ::= [ArrayDeclarator] decl::AbstractDeclarator "[" exp::(Expression?) "]" ;
 AbstractDeclarator ::= [Bracket] "(" decl::AbstractDeclarator ")" ;
 AbstractDeclarator ::= [FunctionDeclarator] decl::AbstractDeclarator "(" params::(Parameters?) ")" ;
 AbstractDeclarator ::= [PointerDeclarator] "*" qualifiers::(TypeQualifier*) decl::AbstractDeclarator ;
PrototypeDeclarator ::= [FunctionDeclarator] decl::PrototypeDeclarator "(" params::(PrototypeParameters?) ")" ;
 PrototypeDeclarator ::= [Identifier] Identifier ;
 PrototypeDeclarator ::= [Bracket] "(" decl::AbstractDeclarator ")" ;
 PrototypeDeclarator ::= [ArrayDeclarator] decl::PrototypeDeclarator "[" exp::(Expression?) "]" ;
 PrototypeDeclarator ::= [PointerDeclarator] "*" qualifiers::(TypeQualifier*) decl::PrototypeDeclarator ;
TypeQualifier ::= "const" ;
 TypeQualifier ::= "volatile" ;
ExternalDeclaration ::= FunctionPrototype ;
 ExternalDeclaration ::= FunctionDefinition ;
 ExternalDeclaration ::= GlobalDeclaration ;
PrototypeParameters ::= "void" ;
 PrototypeParameters ::= {PrototypeParameter ","}+ MoreParameters? ;
FunctionDefinition ::= [DefaultFunctionDefinition] specs::(Specifier*) Declarator Declaration* "{" Declaration* Statement* "}" ;
FunctionPrototype ::= [DefaultFunctionPrototype] specs::(Specifier*) decl::PrototypeDeclarator ";" ;
PrototypeParameter ::= Specifier* AbstractDeclarator ;
StructDeclarator ::= Declarator ;
 StructDeclarator ::= Declarator? ":" Expression ;
TypeName ::= Specifier+ AbstractDeclarator ;
StructDeclaration ::= [StructDeclWithoutDecl] specs::(Specifier+) ";" ;
 StructDeclaration ::= [StructDeclWithDecl] specs::(Specifier+) {StructDeclarator ","}+ ";" ;
TypeSpecifier ::= [StructDecl] "struct" Identifier "{" StructDeclaration* "}" ;
 TypeSpecifier ::= [Union] "union" Identifier ;
 TypeSpecifier ::= [Int] "int" ;
 TypeSpecifier ::= [Void] "void" ;
 TypeSpecifier ::= [StructAnonDecl] "struct" "{" StructDeclaration* "}" ;
 TypeSpecifier ::= [Short] "short" ;
 TypeSpecifier ::= [Identifier] Identifier ;
 TypeSpecifier ::= [EnumDecl] "enum" Identifier "{" {Enumerator ","}+ "}" ;
 TypeSpecifier ::= "signed" ;
 TypeSpecifier ::= [UnionDecl] "union" Identifier "{" StructDeclaration* "}" ;
 TypeSpecifier ::= [UnionAnonDecl] "union" "{" StructDeclaration* "}" ;
 TypeSpecifier ::= [Enum] "enum" Identifier ;
 TypeSpecifier ::= [Struct] "struct" Identifier ;
 TypeSpecifier ::= "unsigned" ;
 TypeSpecifier ::= [Long] "long" ;
 TypeSpecifier ::= [Double] "double" ;
 TypeSpecifier ::= [Float] "float" ;
 TypeSpecifier ::= [EnumAnonDecl] "enum" "{" {Enumerator ","}+ "}" ;
 TypeSpecifier ::= [Char] "char" ;
InitDeclarator ::= decl::Declarator "=" Initializer ;
 InitDeclarator ::= [decl] Declarator ;
NonCommaExpression ::= [NonCommaExpression] expr::Expression ;
--------------------cpp::iso-n2723.bgf--------------------
braced-init-list ::= ("{" initializer-list ","? "}") | ("{" "}") ;
template-name ::= identifier ;
logical-or-expression ::= logical-and-expression | (logical-or-expression "||" logical-and-expression) ;
relational-expression ::= shift-expression | (relational-expression "<" shift-expression) | (relational-expression ">" shift-expression) | (relational-expression "<=" shift-expression) | (relational-expression ">=" shift-expression) ;
init-declarator-list ::= init-declarator | (init-declarator-list "," init-declarator) ;
enumerator-definition ::= enumerator | (enumerator "=" constant-expression) ;
exception-declaration ::= (type-specifier-seq declarator) | (type-specifier-seq abstract-declarator) | type-specifier-seq | "..." ;
linkage-specification ::= ("extern" string-literal "{" declaration-seq? "}") | ("extern" string-literal declaration) ;
try-block ::= "try" compound-statement handler-seq ;
delete-expression ::= ("::"? "delete" cast-expression) | ("::"? "delete" "[" "]" cast-expression) ;
conversion-function-id ::= "operator" conversion-type-id ;
lambda-introducer ::= "[" lambda-capture? "]" ;
new-placement ::= "(" expression-list ")" ;
unary-expression ::= postfix-expression | ("++" cast-expression) | ("--" cast-expression) | (unary-operator cast-expression) | ("sizeof" unary-expression) | ("sizeof" "(" type-id ")") | ("sizeof" "..." "(" identifier ")") | ("alignof" "(" type-id ")") | new-expression | delete-expression ;
template-parameter-list ::= template-parameter | (template-parameter-list "," template-parameter) ;
enum-specifier ::= (enum-key identifier? enum-base? "{" enumerator-list? "}") | (enum-key identifier? enum-base? "{" enumerator-list "," "}") ;
ref-qualifier ::= "&" | "&&" ;
postfix-expression ::= primary-expression | (postfix-expression "[" expression "]") | (postfix-expression "[" braced-init-list "]") | (postfix-expression "(" expression-list? ")") | (simple-type-specifier "(" expression-list? ")") | (typename-specifier "(" expression-list? ")") | (simple-type-specifier braced-init-list) | (typename-specifier braced-init-list) | (postfix-expression "." "template"? id-expression) | (postfix-expression "->" "template"? id-expression) | (postfix-expression "." pseudo-destructor-name) | (postfix-expression "->" pseudo-destructor-name) | (postfix-expression "++") | (postfix-expression "--") | ("dynamic_cast" "<" type-id ">" "(" expression ")") | ("static_cast" "<" type-id ">" "(" expression ")") | ("reinterpret_cast" "<" type-id ">" "(" expression ")") | ("const_cast" "<" type-id ">" "(" expression ")") | ("typeid" "(" expression ")") | ("typeid" "(" type-id ")") ;
decl-specifier-seq ::= decl-specifier-seq? decl-specifier ;
qualified-id ::= ("::"? nested-name-specifier "template"? unqualified-id) | ("::" identifier) | ("::" operator-function-id) | ("::" template-id) ;
base-clause ::= ":" base-specifier-list ;
type-specifier ::= simple-type-specifier | class-specifier | enum-specifier | elaborated-type-specifier | typename-specifier | cv-qualifier ;
mem-initializer ::= (mem-initializer-id "(" expression-list? ")") | (mem-initializer-id braced-init-list) ;
cast-expression ::= unary-expression | ("(" type-id ")" cast-expression) ;
asm-definition ::= "asm" "(" string-literal ")" ";" ;
new-expression ::= ("::"? "new" new-placement? new-type-id new-initializer?) | ("::"? "new" new-placement? "(" type-id ")" new-initializer?) ;
static_assert-declaration ::= "static_assert" "(" constant-expression "," string-literal ")" ";" ;
direct-new-declarator ::= ("[" expression "]") | (direct-new-declarator "[" constant-expression "]") ;
cv-qualifier-seq ::= cv-qualifier cv-qualifier-seq? ;
throw-expression ::= "throw" assignment-expression? ;
simple-declaration ::= decl-specifier-seq? init-declarator-list? ";" ;
mem-initializer-id ::= ("::"? nested-name-specifier? class-name) | identifier ;
declaration-statement ::= block-declaration ;
direct-abstract-declarator ::= (direct-abstract-declarator? "(" parameter-declaration-clause ")" cv-qualifier-seq? ref-qualifier? exception-specification?) | (direct-abstract-declarator? "(" parameter-declaration-clause ")" cv-qualifier-seq? ref-qualifier? exception-specification? "->" type-id) | (direct-abstract-declarator? "[" constant-expression? "]") | ("(" abstract-declarator ")") ;
conversion-type-id ::= type-specifier-seq conversion-declarator? ;
enum-name ::= identifier ;
type-parameter ::= ("class" "..."? identifier?) | ("class" identifier? "=" type-id) | ("typename" "..."? identifier?) | ("typename" identifier? "=" type-id) | ("template" "<" template-parameter-list ">" "class" "..."? identifier?) | ("template" "<" template-parameter-list ">" "class" identifier? "=" id-expression) ;
namespace-body ::= declaration-seq? ;
extension-namespace-definition ::= "inline"? "namespace" original-namespace-name "{" namespace-body "}" ;
exclusive-or-expression ::= and-expression | (exclusive-or-expression "^" and-expression) ;
pseudo-destructor-name ::= ("::"? nested-name-specifier? type-name "::" "~" type-name) | ("::"? nested-name-specifier "template" simple-template-id "::" "~" type-name) | ("::"? nested-name-specifier? "~" type-name) ;
lambda-parameter-declaration ::= "(" lambda-parameter-declaration-list? ")" "mutable"? exception-specification? lambda-return-type-clause? ;
cv-qualifier ::= "const" | "volatile" ;
compound-statement ::= "{" statement-seq? "}" ;
base-specifier-list ::= (base-specifier "..."?) | (base-specifier-list "," base-specifier "..."?) ;
member-declaration ::= (decl-specifier-seq? member-declarator-list? ";") | (function-definition ";"?) | ("::"? nested-name-specifier "template"? unqualified-id ";") | using-declaration | static_assert-declaration | template-declaration ;
parameter-declaration-clause ::= (parameter-declaration-list? "..."?) | (parameter-declaration-list "," "...") ;
capture-list ::= capture | (capture-list "," capture) ;
shift-expression ::= additive-expression | (shift-expression "<<" additive-expression) | (shift-expression ">>" additive-expression) ;
base-specifier ::= ("::"? nested-name-specifier? class-name) | ("virtual" access-specifier? "::"? nested-name-specifier? class-name) | (access-specifier "virtual"? "::"? nested-name-specifier? class-name) ;
class-name ::= identifier | simple-template-id ;
namespace-name ::= original-namespace-name | namespace-alias ;
abstract-declarator ::= (ptr-operator abstract-declarator?) | direct-abstract-declarator | "..." ;
initializer-clause ::= assignment-expression | braced-init-list ;
capture-default ::= "&" | "=" ;
typename-specifier ::= ("typename" "::"? nested-name-specifier identifier) | ("typename" "::"? nested-name-specifier "template"? simple-template-id) ;
labeled-statement ::= (identifier ":" statement) | ("case" constant-expression ":" statement) | ("default" ":" statement) ;
parameter-declaration-list ::= parameter-declaration | (parameter-declaration-list "," parameter-declaration) ;
expression-list ::= initializer-list ;
simple-template-id ::= template-name "<" template-argument-list? ">" ;
using-declaration ::= ("using" "typename"? "::"? nested-name-specifier unqualified-id ";") | ("using" "::" unqualified-id ";") ;
template-argument ::= constant-expression | type-id | id-expression ;
ctor-initializer ::= ":" mem-initializer-list ;
class-specifier ::= class-head "{" member-specification? "}" ;
initializer-list ::= (initializer-clause "..."?) | (initializer-list "," initializer-clause "..."?) ;
template-declaration ::= "export"? "template" "<" template-parameter-list ">" declaration ;
assignment-operator ::= "=" | "*=" | "/=" | "%=" | "+=" | "-=" | ">>=" | "<<=" | "&=" | "^=" | "|=" ;
ptr-operator ::= ("*" cv-qualifier-seq?) | "&" | "&&" | ("::"? nested-name-specifier "*" cv-qualifier-seq?) ;
mem-initializer-list ::= (mem-initializer "..."?) | (mem-initializer "," mem-initializer-list "..."?) ;
inclusive-or-expression ::= exclusive-or-expression | (inclusive-or-expression "|" exclusive-or-expression) ;
template-argument-list ::= (template-argument "..."?) | (template-argument-list "," template-argument "..."?) ;
assignment-expression ::= conditional-expression | (logical-or-expression assignment-operator initializer-clause) | throw-expression ;
access-specifier ::= "private" | "protected" | "public" ;
direct-declarator ::= declarator-id | (direct-declarator "(" parameter-declaration-clause ")" cv-qualifier-seq? ref-qualifier? exception-specification?) | (direct-declarator "(" parameter-declaration-clause ")" cv-qualifier-seq? ref-qualifier? exception-specification? "->" type-id) | (direct-declarator "[" constant-expression? "]") | ("(" declarator ")") ;
enum-key ::= "enum" | ("enum" "class") | ("enum" "struct") ;
logical-and-expression ::= inclusive-or-expression | (logical-and-expression "&&" inclusive-or-expression) ;
nested-name-specifier ::= (type-name "::") | (namespace-name "::") | (nested-name-specifier identifier "::") | (nested-name-specifier "template"? simple-template-id "::") ;
jump-statement ::= ("break" ";") | ("continue" ";") | ("return" expression? ";") | ("return" braced-init-list ";") | ("goto" identifier ";") ;
type-id ::= type-specifier-seq abstract-declarator? ;
typedef-name ::= identifier ;
declaration-seq ::= declaration | (declaration-seq declaration) ;
class-key ::= "class" | "struct" | "union" ;
id-expression ::= unqualified-id | qualified-id ;
member-declarator-list ::= member-declarator | (member-declarator-list "," member-declarator) ;
operator-function-id ::= "operator" operator ;
unary-operator ::= "*" | "&" | "+" | "-" | "!" | "~" ;
original-namespace-definition ::= "inline"? "namespace" identifier "{" namespace-body "}" ;
iteration-statement ::= ("while" "(" condition ")" statement) | ("do" statement "while" "(" expression ")" ";") | ("for" "(" for-init-statement condition? ";" expression? ")" statement) ;
new-declarator ::= (ptr-operator new-declarator?) | direct-new-declarator ;
alias-declaration ::= "using" identifier "=" type-id ";" ;
type-id-list ::= (type-id "..."?) | (type-id-list "," type-id "..."?) ;
type-specifier-seq ::= type-specifier type-specifier-seq? ;
lambda-parameter-declaration-list ::= lambda-parameter | (lambda-parameter "," lambda-parameter-declaration-list) ;
expression-statement ::= expression? ";" ;
function-body ::= (ctor-initializer? compound-statement) | function-try-block ;
for-init-statement ::= expression-statement | simple-declaration ;
explicit-instantiation ::= "extern"? "template" declaration ;
unnamed-namespace-definition ::= "inline"? "namespace" "{" namespace-body "}" ;
multiplicative-expression ::= pm-expression | (multiplicative-expression "*" pm-expression) | (multiplicative-expression "/" pm-expression) | (multiplicative-expression "%" pm-expression) ;
selection-statement ::= ("if" "(" condition ")" statement) | ("if" "(" condition ")" statement "else" statement) | ("switch" "(" condition ")" statement) ;
function-definition ::= (decl-specifier-seq? declarator function-body) | (decl-specifier-seq? declarator "=" "default" ";") | (decl-specifier-seq? declarator "=" "delete" ";") ;
pm-expression ::= cast-expression | (pm-expression ".*" cast-expression) | (pm-expression "->*" cast-expression) ;
simple-type-specifier ::= ("::"? nested-name-specifier? type-name) | ("::"? nested-name-specifier "template" simple-template-id) | "char" | "char16_t" | "char32_t" | "wchar_t" | "bool" | "short" | "int" | "long" | "signed" | "unsigned" | "float" | "double" | "void" | "auto" | ("decltype" "(" expression ")") ;
new-type-id ::= type-specifier-seq new-declarator? ;
constant-expression ::= conditional-expression ;
namespace-alias ::= identifier ;
lambda-expression ::= lambda-introducer lambda-parameter-declaration? compound-statement ;
handler-seq ::= handler handler-seq? ;
decl-specifier ::= storage-class-specifier | type-specifier | function-specifier | "friend" | "typedef" | "constexpr" | alignment-specifier ;
storage-class-specifier ::= "register" | "static" | "thread_local" | "extern" | "mutable" ;
parameter-declaration ::= (decl-specifier-seq declarator) | (decl-specifier-seq declarator "=" assignment-expression) | (decl-specifier-seq abstract-declarator?) | (decl-specifier-seq abstract-declarator? "=" assignment-expression) ;
alignment-specifier ::= ("alignas" "(" constant-expression ")") | ("alignas" "(" type-id ")") ;
template-id ::= simple-template-id | (operator-function-id "<" template-argument-list? ">") ;
and-expression ::= equality-expression | (and-expression "&" equality-expression) ;
equality-expression ::= relational-expression | (equality-expression "==" relational-expression) | (equality-expression "!=" relational-expression) ;
conversion-declarator ::= ptr-operator conversion-declarator? ;
using-directive ::= "using" "namespace" "::"? nested-name-specifier? namespace-name ";" ;
function-try-block ::= "try" ctor-initializer? compound-statement handler-seq ;
explicit-specialization ::= "template" "<" ">" declaration ;
member-declarator ::= (declarator pure-specifier?) | (declarator constant-initializer?) | (identifier? ":" constant-expression) ;
primary-expression ::= literal | "this" | ("(" expression ")") | id-expression | lambda-expression ;
lambda-capture ::= capture-default | capture-list | (capture-default "," capture-list) ;
conditional-expression ::= logical-or-expression | (logical-or-expression "?" expression ":" assignment-expression) ;
type-name ::= class-name | enum-name | typedef-name ;
elaborated-type-specifier ::= (class-key "::"? nested-name-specifier? identifier) | (class-key "::"? nested-name-specifier? "template"? simple-template-id) | (enum-key "::"? nested-name-specifier? identifier) ;
block-declaration ::= simple-declaration | asm-definition | namespace-alias-definition | using-declaration | using-directive | static_assert-declaration | alias-declaration ;
constant-initializer ::= "=" constant-expression ;
original-namespace-name ::= identifier ;
additive-expression ::= multiplicative-expression | (additive-expression "+" multiplicative-expression) | (additive-expression "-" multiplicative-expression) ;
declarator-id ::= ("..."? id-expression) | ("::"? nested-name-specifier? class-name) ;
new-initializer ::= ("(" expression-list? ")") | braced-init-list ;
pure-specifier ::= "=" "0" ;
lambda-parameter ::= decl-specifier-seq declarator ;
namespace-alias-definition ::= "namespace" identifier "=" qualified-namespace-specifier ";" ;
translation-unit ::= declaration-seq? ;
enum-base ::= ":" type-specifier-seq ;
qualified-namespace-specifier ::= "::"? nested-name-specifier? namespace-name ;
named-namespace-definition ::= original-namespace-definition | extension-namespace-definition ;
template-parameter ::= type-parameter | parameter-declaration ;
class-head ::= (class-key identifier? base-clause?) | (class-key nested-name-specifier identifier base-clause?) | (class-key nested-name-specifier? simple-template-id base-clause?) ;
member-specification ::= (member-declaration member-specification?) | (access-specifier ":" member-specification?) ;
init-declarator ::= declarator initializer? ;
lambda-return-type-clause ::= "->" type-id ;
function-specifier ::= "inline" | "virtual" | "explicit" ;
enumerator-list ::= enumerator-definition | (enumerator-list "," enumerator-definition) ;
namespace-definition ::= named-namespace-definition | unnamed-namespace-definition ;
exception-specification ::= "throw" "(" type-id-list? ")" ;
unqualified-id ::= identifier | operator-function-id | conversion-function-id | ("~" class-name) | template-id ;
statement-seq ::= statement | (statement-seq statement) ;
--------------------cpp::bruneliere.bgf--------------------
CPPGeneralization ::= visibility::VisibilityKind isVirtual::Boolean supertype::CPPClass ;
CDerivableType ::= ε ;
CPPMember ::= isStatic::Boolean isVolatile::Boolean isRegister::Boolean visibility::VisibilityKind ;
CPPTemplate ::= (classes::CPPClass)+ ;
CBehavorialFeature ::= CFunction ;
CFunction ::= CPPOperation ;
 CFunction ::= isVsrArg::Boolean ;
CStructureContents ::= CPPOperator ;
 CStructureContents ::= CPPOperation ;
CDerived ::= CPPReference ;
 CDerived ::= CPPExtern ;
 CDerived ::= CPPConst ;
 CDerived ::= CPPTemplate ;
 CDerived ::= CPPReference | CPPExtern | CPPConst | CPPTemplate ;
CPPReference ::= ε ;
CPPOperator ::= isInline::Boolean visibility::VisibilityKind ;
CField ::= ε ;
VisibilityKind ::= (vk_public::ε) | (vk_private::ε) | (vk_protected::ε) ;
CPPClass ::= isAbstract::Boolean isVolatile::Boolean visibility::VisibilityKind (templates::CPPTemplate)+ (generalizations::CPPGeneralization)+ ;
CPPOperation ::= isStatic::Boolean isExtern::Boolean isInline::Boolean isVirtual::Boolean isPure::Boolean visibility::VisibilityKind isCtor::Boolean isDtor::Boolean (throws::CPPClass)+ ;
CStructured ::= CPPClass ;
CPPExtern ::= linkage::String ;
CPPConst ::= ε ;
--------------------cpp::elges-cordy.bgf--------------------
comma_dotdotdot ::= ","? "..." ;
selection_statement ::= ("if" "(" expression ")" statement else_statement?) | ("switch" "(" expression ")" statement) ;
parenthesized_parameter_declaration_list ::= ("(" parameter_declaration_list ")") | ("(" parenthesized_parameter_declaration_list ")") ;
elaborated_type_specifier ::= (class_key "::"? nested_name_spec? class_name) | ("enum" "::"? nested_name_spec? id) ;
character_constant ::= charlit ;
class_definition ::= NL storage_class_specifier* class_specifier declarator_list? ";" NL NL ;
type_specifier ::= simple_type_name | class_specifier | enum_specifier | elaborated_type_specifier | const_volatile_qualifier ;
declared_item ::= declared_name | ("(" declarator ")") ;
function_declarator ::= pointer_operator* declared_item declarator_extension+ ;
mem_initializer ::= "::"? nested_name_spec? class_name "(" expression_list? ")" ;
class_component ::= class_name | ("~" SPOFF class_name SPON) | operator_function_name | conversion_function_name | qualified_name ;
deallocation_expression ::= ("::"? "delete" cast_expression) | ("::"? "delete" "[" expression? "]" cast_expression) ;
member_declarator ::= (declarator initializer?) | (id? SPOFF ":" SPON constant_expression) ;
non_gt_binary_expression ::= cast_expression non_gt_binary_operation* ;
primary_expression ::= literal | "this" | ("::" id) | ("::" operator_function_name) | ("(" expression ")") | name ;
postfix_extension ::= ("[" expression? "]") | ("(" expression_list? ")") | ("." name) | ("->" name) | "++" | "--" ;
handler_list ::= handler handler_list? ;
storage_class_specifier ::= "auto" | "register" | "static" | "extern" ;
class_name ::= id template_arguments? ;
conditional_expression ::= binary_expression conditional_operation? ;
allocation_declarator ::= allocation_array_declarator | ("*" const_volatile_qualifier_list? allocation_declarator?) | ("::"? nested_name_spec "*" const_volatile_qualifier_list? allocation_declarator?) | (qualified_name "::" "*" const_volatile_qualifier_list? allocation_declarator?) ;
type_name ::= type_specifiers abstract_declarator? ;
declared_name ::= (nested_name_spec? name) | ("~" SPOFF id SPON) ;
namespace_name ::= id ;
conditional_operation ::= "?" expression ":" conditional_expression ;
statement_list ::= statement+ ;
abstract_declarator ::= (abstract_extension+) | ("(" abstract_declarator ")" abstract_extension*) ;
declarator_list ::= init_declarator+ ;
declaration_statement ::= declaration ;
else_statement ::= "else" statement ;
decl_specifier ::= storage_class_specifier | type_specifier | function_specifier | "friend" | "typedef" ;
base_spec ::= ":" base_list ;
pointer_operator ::= (stars const_volatile_qualifier_list?) | ("&" const_volatile_qualifier_list?) | (id "::" stars const_volatile_qualifier_list?) | ("::"? nested_name_spec "*" const_volatile_qualifier_list) ;
expression_list ::= assignment_expression+ ;
parameter_declaration ::= decl_specifiers parameter_declarator equal_expression? ;
type_parameter ::= "class" id ;
abstract_extension ::= ("(" parameter_declaration_list ")" const_volatile_qualifier_list?) | ("[" constant_expression? "]") | pointer_operator | ("(" abstract_declarator ")") ;
template_argument ::= type_name | non_gt_binary_expression ;
dot_slash_identifier ::= "."? "/"? file_identifier ;
compound_statement ::= "{" NL IN statement_list? EX "}" NL ;
template_argument_list ::= template_argument | (template_argument_list "," template_argument) ;
initializer_list ::= initializer_element+ ;
number_constant ::= ("-"? number) | hexnumber ;
template_parameter_list ::= template_parameter | (template_parameter_list "," template_parameter) ;
for_body ::= compound_statement | (IN NL statement EX) ;
allocation_expression ::= "::"? "new" placement? allocation_type_name initializer? ;
template_class_name ::= id template_arguments ;
allocation_array_declarator ::= ("[" expression? "]") | (allocation_array_declarator "[" expression? "]") ;
assignment_operator ::= "=" | "*=" | "/=" | "%=" | "+=" | "-=" | ">>=" | "<<=" | "&=" | "^=" | "|=" ;
member_declaration ::= (function_definition ";"?) | (qualified_name ";" NL) | using_declaration | (decl_specifiers? member_declarator_list ";" NL) | (decl_specifiers ";" NL) | (";" NL) | (preprocessor NL) ;
allocation_type_name ::= (type_specifiers allocation_declarator?) | ("(" type_name ")" allocation_declarator?) ;
template_arguments ::= "<" template_argument_list ">" ;
base_specifier ::= ("::"? nested_name_spec? class_name) | ("virtual" access_specifier? "::"? nested_name_spec? class_name) | (access_specifier "virtual"? "::"? nested_name_spec? class_name) ;
qualified_name ::= class_name "::" class_component ;
file_identifier ::= id | key ;
base_list ::= base_specifier ","? {base_specifier ","}* ;
assignment_expression ::= conditional_expression | (unary_expression assignment_operator assignment_expression) ;
unlabeled_statement ::= null_statement | expression_statement | compound_statement | selection_statement | iteration_statement | jump_statement | declaration_statement | try_block ;
non_gt_binary_operation ::= non_gt_binary_operator cast_expression ;
class_head ::= (class_key id? base_spec?) | (class_key nested_name_spec id base_spec?) | (class_key class_name base_spec?) ;
member_declarator_list ::= member_declarator+ ;
class_or_namespace_name ::= class_name | namespace_name ;
access_specifier_colon ::= EX_2 NL access_specifier SPOFF ":" SPON IN_2 NL ;
declaration_list ::= declaration* ;
init_declarator ::= declarator initializer? ;
using_declaration ::= ("using" "::"? nested_name_spec? name ";") | ("using" "namespace" "::"? nested_name_spec? id ";") ;
const_volatile_qualifier_list ::= const_volatile_qualifier+ ;
null_statement ::= ";" NL ;
operator_function_name ::= "operator" operator ;
namespace_definition ::= ("namespace" id? "{" NL IN declaration_list? EX "}" NL NL) | ("namespace" id "=" qualified_namespace_spec) ;
ctor_initializer ::= SPOFF ":" SPON mem_initializer_list ;
class_specifier ::= class_head "{" NL IN member* EX "}" ;
for_init_statement ::= (expression ";") | (decl_specifiers? declarator_list ";") | (decl_specifiers ";") | ";" ;
initial_value ::= assignment_expression | ("{" IN initializer_list ","? EX "}") ;
asm_declaration ::= "asm" "(" string_constant ")" ";" NL ;
template_declaration ::= "template" "<" template_parameter_list ">" declaration ;
unary_operator ::= "**" | "*" | "&" | "+" | "-" | "!" | "~" ;
declarator_extension ::= (parenthesized_parameter_declaration_list const_volatile_qualifier_list?) | ("[" constant_expression? "]") ;
decl_specifiers ::= decl_specifier+ ;
binary_operation ::= binary_operator cast_expression ;
conversion_function_name ::= "operator" conversion_type_name ;
function_body ::= (NL compound_statement ";"? NL) | ("try" ctor_initializer? NL compound_statement ";"? NL handler_list) ;
unary_expression ::= postfix_expression | ("++" unary_expression) | ("--" unary_expression) | (unary_operator cast_expression) | ("sizeof" unary_expression) | ("sizeof" "(" type_name ")") | allocation_expression | deallocation_expression | throw_expression ;
nested_name_spec ::= class_or_namespace_name "::" nested_name_spec? ;
NL_stringlit ::= NL stringlit ;
template_parameter ::= type_parameter | parameter_declaration ;
simple_type_name ::= "char" | "bool" | "short" | "int" | "long" | "signed" | "unsigned" | "float" | "double" | "void" | ("::"? nested_name_spec? id) | ("::"? nested_name_spec? template_class_name) ;
const_volatile_qualifier ::= "const" | "volatile" ;
access_specifier ::= "private" | "protected" | "public" ;
postfix_expression ::= (primary_expression postfix_extension*) | (simple_type_name "(" expression_list? ")" postfix_extension*) ;
binary_operator ::= "||" | "&&" | "|" | "^" | "&" | "==" | "!=" | "<" | ">" | "<=" | ">=" | "<<" | ">>" | "+" | "-" | "*" | "/" | "%" | ".*" | "->*" ;
qualified_namespace_spec ::= "::"? nested_name_spec? class_or_namespace_name ;
exception_declarator ::= declarator | abstract_declarator ;
initializer_element ::= assignment_expression | (NL "{" IN initializer_list ","? EX "}") ;
jump_statement ::= ("break" ";" NL) | ("continue" ";" NL) | ("return" expression? ";" NL) | ("goto" id ";" NL) ;
enum_list ::= enumerator+ ","? ;
type_specifiers ::= type_specifier+ ;
function_definition ::= NL decl_specifiers? function_declarator ctor_initializer? exception_specification? function_body ;
parameter_declaration_list ::= {parameter_declaration ","}* comma_dotdotdot? ;
cast_expression ::= unary_expression | ("(" type_name ")" cast_expression) ;
class_key ::= "class" | "struct" | "union" ;
function_specifier ::= "inline" | "virtual" ;
binary_expression ::= cast_expression binary_operation* ;
constant_expression ::= conditional_expression ;
exception_specification ::= "throw" "(" type_list? ")" ;
string_constant ::= stringlit IN NL_stringlit* EX ;
throw_expression ::= "throw" assignment_expression? ;
iteration_statement ::= ("while" "(" expression ")" statement) | ("do" statement "while" "(" expression ")" ";" NL) | ("for" "(" for_init_statement expression? ";" expression? ")" for_body) ;
exception_declaration ::= (type_specifiers exception_declarator?) | "..." ;
try_block ::= "try" compound_statement handler_list ;
linkage_specification ::= (NL "extern" stringlit "{" NL IN declaration_list EX "}" ";"? NL NL) | ("extern" stringlit declaration) ;
expression_statement ::= expression ";" NL ;
equal_constant_expression ::= "=" constant_expression ;
conversion_type_name ::= type_specifiers pointer_operator? ;
parameter_declarator ::= declarator | (abstract_declarator?) ;
mem_initializer_list ::= mem_initializer+ ;
type_list ::= type_name | (type_list "," type_name) ;
equal_expression ::= "=" expression ;
non_gt_binary_operator ::= "||" | "&&" | "|" | "^" | "&" | "==" | "!=" | "<" | "<=" | ">=" | "<<" | ">>" | "+" | "-" | "*" | "/" | "%" | ".*" | "->*" ;
enum_specifier ::= "enum" id? "{" enum_list? "}" ;
--------------------cpp::iso-14882-1998.bgf--------------------
relational-expression ::= shift-expression | (relational-expression "<" shift-expression) | (relational-expression ">" shift-expression) | (relational-expression "<=" shift-expression) | (relational-expression ">=" shift-expression) ;
logical-or-expression ::= logical-and-expression | (logical-or-expression "||" logical-and-expression) ;
template-name ::= identifier ;
init-declarator-list ::= init-declarator | (init-declarator-list "," init-declarator) ;
enumerator-definition ::= enumerator | (enumerator "=" constant-expression) ;
exception-declaration ::= (type-specifier-seq declarator) | (type-specifier-seq abstract-declarator) | type-specifier-seq | "..." ;
linkage-specification ::= ("extern" string-literal "{" declaration-seq? "}") | ("extern" string-literal declaration) ;
try-block ::= "try" compound-statement handler-seq ;
delete-expression ::= ("::"? "delete" cast-expression) | ("::"? "delete" "[" "]" cast-expression) ;
conversion-function-id ::= "operator" conversion-type-id ;
new-placement ::= "(" expression-list ")" ;
unary-expression ::= postfix-expression | ("++" cast-expression) | ("--" cast-expression) | (unary-operator cast-expression) | ("sizeof" unary-expression) | ("sizeof" "(" type-id ")") | new-expression | delete-expression ;
template-parameter-list ::= template-parameter | (template-parameter-list "," template-parameter) ;
enum-specifier ::= "enum" identifier? "{" enumerator-list? "}" ;
postfix-expression ::= primary-expression | (postfix-expression "[" expression "]") | (postfix-expression "(" expression-list? ")") | (simple-type-specifier "(" expression-list? ")") | ("typename" "::"? nested-name-specifier identifier "(" expression-list? ")") | ("typename" "::"? nested-name-specifier "template"? template-id "(" expression-list? ")") | (postfix-expression "." "template"? id-expression) | (postfix-expression "->" "template"? id-expression) | (postfix-expression "." pseudo-destructor-name) | (postfix-expression "->" pseudo-destructor-name) | (postfix-expression "++") | (postfix-expression "--") | ("dynamic_cast" "<" type-id ">" "(" expression ")") | ("static_cast" "<" type-id ">" "(" expression ")") | ("reinterpret_cast" "<" type-id ">" "(" expression ")") | ("const_cast" "<" type-id ">" "(" expression ")") | ("typeid" "(" expression ")") | ("typeid" "(" type-id ")") ;
decl-specifier-seq ::= decl-specifier-seq? decl-specifier ;
qualified-id ::= ("::"? nested-name-specifier "template"? unqualified-id) | ("::" identifier) | ("::" operator-function-id) | ("::" template-id) ;
base-clause ::= ":" base-specifier-list ;
type-specifier ::= simple-type-specifier | class-specifier | enum-specifier | elaborated-type-specifier | cv-qualifier ;
mem-initializer ::= mem-initializer-id "(" expression-list? ")" ;
cast-expression ::= unary-expression | ("(" type-id ")" cast-expression) ;
asm-definition ::= "asm" "(" string-literal ")" ";" ;
new-expression ::= ("::"? "new" new-placement? new-type-id new-initializer?) | ("::"? "new" new-placement? "(" type-id ")" new-initializer?) ;
direct-new-declarator ::= ("[" expression "]") | (direct-new-declarator "[" constant-expression "]") ;
cv-qualifier-seq ::= cv-qualifier cv-qualifier-seq? ;
throw-expression ::= "throw" assignment-expression? ;
simple-declaration ::= decl-specifier-seq? init-declarator-list? ";" ;
mem-initializer-id ::= ("::"? nested-name-specifier? class-name) | identifier ;
declaration-statement ::= block-declaration ;
direct-abstract-declarator ::= (direct-abstract-declarator? "(" parameter-declaration-clause ")" cv-qualifier-seq? exception-specification?) | (direct-abstract-declarator? "[" constant-expression? "]") | ("(" abstract-declarator ")") ;
conversion-type-id ::= type-specifier-seq conversion-declarator? ;
enum-name ::= identifier ;
type-parameter ::= ("class" identifier?) | ("class" identifier? "=" type-id) | ("typename" identifier?) | ("typename" identifier? "=" type-id) | ("template" "<" template-parameter-list ">" "class" identifier?) | ("template" "<" template-parameter-list ">" "class" identifier? "=" id-expression) ;
namespace-body ::= declaration-seq? ;
extension-namespace-definition ::= "namespace" original-namespace-name "{" namespace-body "}" ;
exclusive-or-expression ::= and-expression | (exclusive-or-expression "^" and-expression) ;
class-or-namespace-name ::= class-name | namespace-name ;
pseudo-destructor-name ::= ("::"? nested-name-specifier? type-name "::" "~" type-name) | ("::"? nested-name-specifier "template" template-id "::" "~" type-name) | ("::"? nested-name-specifier? "~" type-name) ;
cv-qualifier ::= "const" | "volatile" ;
compound-statement ::= "{" statement-seq? "}" ;
base-specifier-list ::= base-specifier | (base-specifier-list "," base-specifier) ;
member-declaration ::= (decl-specifier-seq? member-declarator-list? ";") | (function-definition ";"?) | ("::"? nested-name-specifier "template"? unqualified-id ";") | using-declaration | template-declaration ;
parameter-declaration-clause ::= (parameter-declaration-list? "..."?) | (parameter-declaration-list "," "...") ;
shift-expression ::= additive-expression | (shift-expression "<<" additive-expression) | (shift-expression ">>" additive-expression) ;
base-specifier ::= ("::"? nested-name-specifier? class-name) | ("virtual" access-specifier? "::"? nested-name-specifier? class-name) | (access-specifier "virtual"? "::"? nested-name-specifier? class-name) ;
class-name ::= identifier | template-id ;
namespace-name ::= original-namespace-name | namespace-alias ;
abstract-declarator ::= (ptr-operator abstract-declarator?) | direct-abstract-declarator ;
initializer-clause ::= assignment-expression | ("{" initializer-list ","? "}") | ("{" "}") ;
labeled-statement ::= (identifier ":" statement) | ("case" constant-expression ":" statement) | ("default" ":" statement) ;
parameter-declaration-list ::= parameter-declaration | (parameter-declaration-list "," parameter-declaration) ;
expression-list ::= assignment-expression | (expression-list "," assignment-expression) ;
using-declaration ::= ("using" "typename"? "::"? nested-name-specifier unqualified-id ";") | ("using" "::" unqualified-id ";") ;
template-argument ::= assignment-expression | type-id | id-expression ;
ctor-initializer ::= ":" mem-initializer-list ;
initializer-list ::= initializer-clause | (initializer-list "," initializer-clause) ;
class-specifier ::= class-head "{" member-specification? "}" ;
template-declaration ::= "export"? "template" "<" template-parameter-list ">" declaration ;
assignment-operator ::= "=" | "*=" | "/=" | "%=" | "+=" | "-=" | ">>=" | "<<=" | "&=" | "^=" | "|=" ;
ptr-operator ::= ("*" cv-qualifier-seq?) | "&" | ("::"? nested-name-specifier "*" cv-qualifier-seq?) ;
mem-initializer-list ::= mem-initializer | (mem-initializer "," mem-initializer-list) ;
inclusive-or-expression ::= exclusive-or-expression | (inclusive-or-expression "|" exclusive-or-expression) ;
template-argument-list ::= template-argument | (template-argument-list "," template-argument) ;
assignment-expression ::= conditional-expression | (logical-or-expression assignment-operator assignment-expression) | throw-expression ;
access-specifier ::= "private" | "protected" | "public" ;
direct-declarator ::= declarator-id | (direct-declarator "(" parameter-declaration-clause ")" cv-qualifier-seq? exception-specification?) | (direct-declarator "[" constant-expression? "]") | ("(" declarator ")") ;
logical-and-expression ::= inclusive-or-expression | (logical-and-expression "&&" inclusive-or-expression) ;
nested-name-specifier ::= (class-or-namespace-name "::" nested-name-specifier?) | (class-or-namespace-name "::" "template" nested-name-specifier) ;
jump-statement ::= ("break" ";") | ("continue" ";") | ("return" expression? ";") | ("goto" identifier ";") ;
type-id ::= type-specifier-seq abstract-declarator? ;
typedef-name ::= identifier ;
declaration-seq ::= declaration | (declaration-seq declaration) ;
class-key ::= "class" | "struct" | "union" ;
id-expression ::= unqualified-id | qualified-id ;
member-declarator-list ::= member-declarator | (member-declarator-list "," member-declarator) ;
operator-function-id ::= "operator" operator ;
unary-operator ::= "*" | "&" | "+" | "-" | "!" | "~" ;
original-namespace-definition ::= "namespace" identifier "{" namespace-body "}" ;
iteration-statement ::= ("while" "(" condition ")" statement) | ("do" statement "while" "(" expression ")" ";") | ("for" "(" for-init-statement condition? ";" expression? ")" statement) ;
new-declarator ::= (ptr-operator new-declarator?) | direct-new-declarator ;
type-id-list ::= type-id | (type-id-list "," type-id) ;
type-specifier-seq ::= type-specifier type-specifier-seq? ;
expression-statement ::= expression? ";" ;
function-body ::= compound-statement ;
for-init-statement ::= expression-statement | simple-declaration ;
explicit-instantiation ::= "template" declaration ;
unnamed-namespace-definition ::= "namespace" "{" namespace-body "}" ;
multiplicative-expression ::= pm-expression | (multiplicative-expression "*" pm-expression) | (multiplicative-expression "/" pm-expression) | (multiplicative-expression "%" pm-expression) ;
selection-statement ::= ("if" "(" condition ")" statement) | ("if" "(" condition ")" statement "else" statement) | ("switch" "(" condition ")" statement) ;
function-definition ::= (decl-specifier-seq? declarator ctor-initializer? function-body) | (decl-specifier-seq? declarator function-try-block) ;
pm-expression ::= cast-expression | (pm-expression ".*" cast-expression) | (pm-expression "->*" cast-expression) ;
simple-type-specifier ::= ("::"? nested-name-specifier? type-name) | ("::"? nested-name-specifier "template" template-id) | "char" | "wchar_t" | "bool" | "short" | "int" | "long" | "signed" | "unsigned" | "float" | "double" | "void" ;
constant-expression ::= conditional-expression ;
new-type-id ::= type-specifier-seq new-declarator? ;
namespace-alias ::= identifier ;
handler-seq ::= handler handler-seq? ;
decl-specifier ::= storage-class-specifier | type-specifier | function-specifier | "friend" | "typedef" ;
storage-class-specifier ::= "auto" | "register" | "static" | "extern" | "mutable" ;
parameter-declaration ::= (decl-specifier-seq declarator) | (decl-specifier-seq declarator "=" assignment-expression) | (decl-specifier-seq abstract-declarator?) | (decl-specifier-seq abstract-declarator? "=" assignment-expression) ;
and-expression ::= equality-expression | (and-expression "&" equality-expression) ;
template-id ::= template-name "<" template-argument-list? ">" ;
equality-expression ::= relational-expression | (equality-expression "==" relational-expression) | (equality-expression "!=" relational-expression) ;
conversion-declarator ::= ptr-operator conversion-declarator? ;
function-try-block ::= "try" ctor-initializer? function-body handler-seq ;
using-directive ::= "using" "namespace" "::"? nested-name-specifier? namespace-name ";" ;
explicit-specialization ::= "template" "<" ">" declaration ;
member-declarator ::= (declarator pure-specifier?) | (declarator constant-initializer?) | (identifier? ":" constant-expression) ;
primary-expression ::= literal | "this" | ("(" expression ")") | id-expression ;
conditional-expression ::= logical-or-expression | (logical-or-expression "?" expression ":" assignment-expression) ;
type-name ::= class-name | enum-name | typedef-name ;
elaborated-type-specifier ::= (class-key "::"? nested-name-specifier? identifier) | ("enum" "::"? nested-name-specifier? identifier) | ("typename" "::"? nested-name-specifier identifier) | ("typename" "::"? nested-name-specifier "template"? template-id) ;
block-declaration ::= simple-declaration | asm-definition | namespace-alias-definition | using-declaration | using-directive ;
constant-initializer ::= "=" constant-expression ;
original-namespace-name ::= identifier ;
additive-expression ::= multiplicative-expression | (additive-expression "+" multiplicative-expression) | (additive-expression "-" multiplicative-expression) ;
declarator-id ::= id-expression | ("::"? nested-name-specifier? type-name) ;
new-initializer ::= "(" expression-list? ")" ;
pure-specifier ::= "=" "0" ;
namespace-alias-definition ::= "namespace" identifier "=" qualified-namespace-specifier ";" ;
translation-unit ::= declaration-seq? ;
qualified-namespace-specifier ::= "::"? nested-name-specifier? namespace-name ;
named-namespace-definition ::= original-namespace-definition | extension-namespace-definition ;
template-parameter ::= type-parameter | parameter-declaration ;
class-head ::= (class-key identifier? base-clause?) | (class-key nested-name-specifier identifier base-clause?) | (class-key nested-name-specifier? template-id base-clause?) ;
member-specification ::= (member-declaration member-specification?) | (access-specifier ":" member-specification?) ;
init-declarator ::= declarator initializer? ;
function-specifier ::= "inline" | "virtual" | "explicit" ;
enumerator-list ::= enumerator-definition | (enumerator-list "," enumerator-definition) ;
namespace-definition ::= named-namespace-definition | unnamed-namespace-definition ;
exception-specification ::= "throw" "(" type-id-list? ")" ;
unqualified-id ::= identifier | operator-function-id | conversion-function-id | ("~" class-name) | template-id ;
statement-seq ::= statement | (statement-seq statement) ;
--------------------cs::csharp-ecma-334-2.bgf--------------------
accessor-declarations ::= (get-accessor-declaration set-accessor-declaration?) | (set-accessor-declaration get-accessor-declaration?) ;
relational-expression ::= shift-expression | (relational-expression "<" shift-expression) | (relational-expression ">" shift-expression) | (relational-expression "<=" shift-expression) | (relational-expression ">=" shift-expression) | (relational-expression "is" type) | (relational-expression "as" type) ;
delegate-creation-expression ::= "new" delegate-type "(" expression ")" ;
global-attribute-target-specifier ::= global-attribute-target ":" ;
pre-decrement-expression ::= "--" unary-expression ;
operator-declarator ::= unary-operator-declarator | binary-operator-declarator | conversion-operator-declarator ;
constant-declarator ::= identifier "=" constant-expression ;
numeric-type ::= integral-type | floating-point-type | "decimal" ;
method-header ::= attributes? method-modifiers? return-type member-name "(" formal-parameter-list? ")" ;
finally-clause ::= "finally" block ;
interface-member-declarations ::= interface-member-declaration | (interface-member-declarations interface-member-declaration) ;
attribute-argument-expression ::= expression ;
member-access ::= (primary-expression "." identifier) | (predefined-type "." identifier) ;
destructor-body ::= block | ";" ;
unary-expression ::= primary-expression | ("+" unary-expression) | ("-" unary-expression) | ("!" unary-expression) | ("~" unary-expression) | pre-increment-expression | pre-decrement-expression | cast-expression ;
invocation-expression ::= primary-expression "(" argument-list? ")" ;
local-constant-declaration ::= "const" type constant-declarators ;
for-iterator ::= statement-expression-list ;
empty-statement ::= ";" ;
enum-body ::= ("{" enum-member-declarations? "}") | ("{" enum-member-declarations "," "}") ;
using-directives ::= using-directive | (using-directives using-directive) ;
embedded-statement ::= block | empty-statement | expression-statement | selection-statement | iteration-statement | jump-statement | try-statement | checked-statement | unchecked-statement | lock-statement | using-statement ;
interface-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
interface-modifiers ::= interface-modifier | (interface-modifiers interface-modifier) ;
interface-declaration ::= attributes? interface-modifiers? "interface" identifier interface-base? interface-body ";"? ;
cast-expression ::= "(" type ")" unary-expression ;
interface-base ::= ":" interface-type-list ;
indexer-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
constructor-declarator ::= identifier "(" formal-parameter-list? ")" constructor-initializer? ;
fixed-parameters ::= fixed-parameter | (fixed-parameters "," fixed-parameter) ;
attribute-target ::= "field" | "event" | "method" | "param" | "property" | "return" | type ;
operator-modifier ::= "public" | "static" | "extern" ;
formal-parameter-list ::= fixed-parameters | (fixed-parameters "," parameter-array) | parameter-array ;
constant-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
base-access ::= ("base" "." identifier) | ("base" "[" expression-list "]") ;
member-name ::= identifier | (interface-type "." identifier) ;
for-initializer ::= local-variable-declaration | statement-expression-list ;
try-statement ::= ("try" block catch-clauses) | ("try" block finally-clause) | ("try" block catch-clauses finally-clause) ;
declaration-statement ::= (local-variable-declaration ";") | (local-constant-declaration ";") ;
interface-member-declaration ::= interface-method-declaration | interface-property-declaration | interface-event-declaration | interface-indexer-declaration ;
variable-initializer-list ::= variable-initializer | (variable-initializer-list "," variable-initializer) ;
class-body ::= "{" class-member-declarations? "}" ;
unchecked-expression ::= "unchecked" "(" expression ")" ;
namespace-body ::= "{" using-directives? namespace-member-declarations? "}" ;
while-statement ::= "while" "(" boolean-expression ")" embedded-statement ;
exclusive-or-expression ::= and-expression | (exclusive-or-expression "^" and-expression) ;
catch-clauses ::= (specific-catch-clauses general-catch-clause?) | (specific-catch-clauses? general-catch-clause) ;
array-creation-expression ::= ("new" non-array-type "[" expression-list "]" rank-specifiers? array-initializer?) | ("new" array-type array-initializer) ;
named-argument ::= identifier "=" attribute-argument-expression ;
operator-declaration ::= attributes? operator-modifiers operator-declarator operator-body ;
constant-declaration ::= attributes? constant-modifiers? "const" type constant-declarators ";" ;
struct-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
property-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
global-attribute-target ::= "assembly" ;
local-variable-declaration ::= type local-variable-declarators ;
continue-statement ::= "continue" ";" ;
checked-statement ::= "checked" block ;
using-alias-directive ::= "using" identifier "=" namespace-or-type-name ";" ;
static-constructor-declaration ::= attributes? static-constructor-modifiers identifier "(" ")" static-constructor-body ;
event-declaration ::= (attributes? event-modifiers? "event" type variable-declarators ";") | (attributes? event-modifiers? "event" type member-name "{" event-accessor-declarations "}") ;
simple-name ::= identifier ;
conversion-operator-declarator ::= ("implicit" "operator" type "(" type identifier ")") | ("explicit" "operator" type "(" type identifier ")") ;
post-increment-expression ::= primary-expression "++" ;
shift-expression ::= additive-expression | (shift-expression "<<" additive-expression) | (shift-expression ">>" additive-expression) ;
global-attributes ::= global-attribute-sections ;
enum-member-declarations ::= enum-member-declaration | (enum-member-declarations "," enum-member-declaration) ;
local-variable-declarator ::= identifier | (identifier "=" local-variable-initializer) ;
struct-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | static-constructor-declaration | type-declaration ;
indexer-declarator ::= (type "this" "[" formal-parameter-list "]") | (type interface-type "." "this" "[" formal-parameter-list "]") ;
if-statement ::= ("if" "(" boolean-expression ")" embedded-statement) | ("if" "(" boolean-expression ")" embedded-statement "else" embedded-statement) ;
interface-type-list ::= interface-type | (interface-type-list "," interface-type) ;
namespace-name ::= namespace-or-type-name ;
conditional-or-expression ::= conditional-and-expression | (conditional-or-expression "||" conditional-and-expression) ;
integral-type ::= "sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong" | "char" ;
constant-declarators ::= constant-declarator | (constant-declarators "," constant-declarator) ;
switch-labels ::= switch-label | (switch-labels switch-label) ;
object-creation-expression ::= "new" type "(" argument-list? ")" ;
return-type ::= type | "void" ;
class-member-declarations ::= class-member-declaration | (class-member-declarations class-member-declaration) ;
interface-body ::= "{" interface-member-declarations? "}" ;
statement-expression ::= invocation-expression | object-creation-expression | assignment | post-increment-expression | post-decrement-expression | pre-increment-expression | pre-decrement-expression ;
rank-specifiers ::= rank-specifier | (rank-specifiers rank-specifier) ;
positional-argument-list ::= positional-argument | (positional-argument-list "," positional-argument) ;
labeled-statement ::= identifier ":" statement ;
attribute-section ::= ("[" attribute-target-specifier? attribute-list "]") | ("[" attribute-target-specifier? attribute-list "," "]") ;
switch-block ::= "{" switch-sections? "}" ;
local-variable-declarators ::= local-variable-declarator | (local-variable-declarators "," local-variable-declarator) ;
expression-list ::= expression | (expression-list "," expression) ;
primary-no-array-creation-expression ::= literal | simple-name | parenthesized-expression | member-access | invocation-expression | element-access | this-access | base-access | post-increment-expression | post-decrement-expression | object-creation-expression | delegate-creation-expression | typeof-expression | checked-expression | unchecked-expression ;
enum-modifiers ::= enum-modifier | (enum-modifiers enum-modifier) ;
enum-declaration ::= attributes? enum-modifiers? "enum" identifier enum-base? enum-body ";"? ;
argument-list ::= argument | (argument-list "," argument) ;
do-statement ::= "do" embedded-statement "while" "(" boolean-expression ")" ";" ;
indexer-declaration ::= attributes? indexer-modifiers? indexer-declarator "{" accessor-declarations "}" ;
foreach-statement ::= "foreach" "(" type identifier "in" expression ")" embedded-statement ;
event-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
global-attribute-sections ::= global-attribute-section | (global-attribute-sections global-attribute-section) ;
switch-sections ::= switch-section | (switch-sections switch-section) ;
destructor-declaration ::= attributes? "extern"? "~" identifier "(" ")" destructor-body ;
class-declaration ::= attributes? class-modifiers? "class" identifier class-base? class-body ";"? ;
assignment-operator ::= "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | ">>=" ;
interface-method-declaration ::= attributes? "new"? return-type identifier "(" formal-parameter-list? ")" ";" ;
inclusive-or-expression ::= exclusive-or-expression | (inclusive-or-expression "|" exclusive-or-expression) ;
predefined-type ::= "bool" | "byte" | "char" | "decimal" | "double" | "float" | "int" | "long" | "object" | "sbyte" | "short" | "string" | "uint" | "ulong" | "ushort" ;
add-accessor-declaration ::= attributes? "add" block ;
pre-increment-expression ::= "++" unary-expression ;
remove-accessor-declaration ::= attributes? "remove" block ;
struct-body ::= "{" struct-member-declarations? "}" ;
interface-property-declaration ::= attributes? "new"? type identifier "{" interface-accessors "}" ;
constructor-body ::= block | ";" ;
struct-member-declarations ::= struct-member-declaration | (struct-member-declarations struct-member-declaration) ;
using-namespace-directive ::= "using" namespace-name ";" ;
attribute-target-specifier ::= attribute-target ":" ;
operator-modifiers ::= operator-modifier | (operator-modifiers operator-modifier) ;
constant-modifiers ::= constant-modifier | (constant-modifiers constant-modifier) ;
dim-separators ::= "," | (dim-separators ",") ;
variable-declarators ::= variable-declarator | (variable-declarators "," variable-declarator) ;
fixed-parameter ::= attributes? parameter-modifier? type identifier ;
method-modifiers ::= method-modifier | (method-modifiers method-modifier) ;
jump-statement ::= break-statement | continue-statement | goto-statement | return-statement | throw-statement ;
constructor-initializer ::= (":" "base" "(" argument-list? ")") | (":" "this" "(" argument-list? ")") ;
method-declaration ::= method-header method-body ;
class-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "abstract" | "sealed" ;
enum-type ::= type-name ;
general-catch-clause ::= "catch" block ;
goto-statement ::= ("goto" identifier ";") | ("goto" "case" constant-expression ";") | ("goto" "default" ";") ;
struct-modifiers ::= struct-modifier | (struct-modifiers struct-modifier) ;
property-modifiers ::= property-modifier | (property-modifiers property-modifier) ;
struct-declaration ::= attributes? struct-modifiers? "struct" identifier struct-interfaces? struct-body ";"? ;
property-declaration ::= attributes? property-modifiers? type member-name "{" accessor-declarations "}" ;
delegate-type ::= type-name ;
set-accessor-declaration ::= attributes? "set" accessor-body ;
iteration-statement ::= while-statement | do-statement | for-statement | foreach-statement ;
checked-expression ::= "checked" "(" expression ")" ;
floating-point-type ::= "float" | "double" ;
specific-catch-clause ::= "catch" "(" class-type identifier? ")" block ;
reference-type ::= class-type | interface-type | array-type | delegate-type ;
parameter-modifier ::= "ref" | "out" ;
expression-statement ::= statement-expression ";" ;
qualified-identifier ::= identifier | (qualified-identifier "." identifier) ;
namespace-member-declaration ::= namespace-declaration | type-declaration ;
interface-accessors ::= (attributes? "get" ";") | (attributes? "set" ";") | (attributes? "get" ";" attributes? "set" ";") | (attributes? "set" ";" attributes? "get" ";") ;
specific-catch-clauses ::= specific-catch-clause | (specific-catch-clauses specific-catch-clause) ;
conditional-and-expression ::= inclusive-or-expression | (conditional-and-expression "&&" inclusive-or-expression) ;
simple-type ::= numeric-type | "bool" ;
this-access ::= "this" ;
multiplicative-expression ::= unary-expression | (multiplicative-expression "*" unary-expression) | (multiplicative-expression "/" unary-expression) | (multiplicative-expression "%" unary-expression) ;
class-type ::= type-name | "object" | "string" ;
array-initializer ::= ("{" variable-initializer-list? "}") | ("{" variable-initializer-list "," "}") ;
selection-statement ::= if-statement | switch-statement ;
for-statement ::= "for" "(" for-initializer? ";" for-condition? ";" for-iterator? ")" embedded-statement ;
constructor-modifiers ::= constructor-modifier | (constructor-modifiers constructor-modifier) ;
field-modifiers ::= field-modifier | (field-modifiers field-modifier) ;
accessor-body ::= block | ";" ;
class-modifiers ::= class-modifier | (class-modifiers class-modifier) ;
type-declaration ::= class-declaration | struct-declaration | interface-declaration | enum-declaration | delegate-declaration ;
using-statement ::= "using" "(" resource-acquisition ")" embedded-statement ;
attribute-arguments ::= ("(" positional-argument-list? ")") | ("(" positional-argument-list "," named-argument-list ")") | ("(" named-argument-list ")") ;
constant-expression ::= expression ;
boolean-expression ::= expression ;
rank-specifier ::= "[" dim-separators? "]" ;
unary-operator-declarator ::= type "operator" overloadable-unary-operator "(" type identifier ")" ;
overloadable-unary-operator ::= "+" | "-" | "!" | "~" | "++" | "--" | "true" | "false" ;
positional-argument ::= attribute-argument-expression ;
statement-expression-list ::= statement-expression | (statement-expression-list "," statement-expression) ;
element-access ::= primary-no-array-creation-expression "[" expression-list "]" ;
typeof-expression ::= ("typeof" "(" type ")") | ("typeof" "(" "void" ")") ;
struct-interfaces ::= ":" interface-type-list ;
unchecked-statement ::= "unchecked" block ;
resource-acquisition ::= local-variable-declaration | expression ;
and-expression ::= equality-expression | (and-expression "&" equality-expression) ;
interface-type ::= type-name ;
compilation-unit ::= using-directives? global-attributes? namespace-member-declarations? ;
lock-statement ::= "lock" "(" expression ")" embedded-statement ;
switch-section ::= switch-labels statement-list ;
equality-expression ::= relational-expression | (equality-expression "==" relational-expression) | (equality-expression "!=" relational-expression) ;
static-constructor-modifiers ::= ("extern"? "static") | ("static" "extern"?) ;
constructor-modifier ::= "public" | "protected" | "internal" | "private" | "extern" ;
field-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "readonly" | "volatile" ;
parenthesized-expression ::= "(" expression ")" ;
throw-statement ::= "throw" expression? ";" ;
using-directive ::= using-alias-directive | using-namespace-directive ;
method-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
primary-expression ::= array-creation-expression | primary-no-array-creation-expression ;
attribute-sections ::= attribute-section | (attribute-sections attribute-section) ;
conditional-expression ::= conditional-or-expression | (conditional-or-expression "?" expression ":" expression) ;
type-name ::= namespace-or-type-name ;
class-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | destructor-declaration | static-constructor-declaration | type-declaration ;
statement-list ::= statement | (statement-list statement) ;
variable-reference ::= expression ;
additive-expression ::= multiplicative-expression | (additive-expression "+" multiplicative-expression) | (additive-expression "-" multiplicative-expression) ;
overloadable-binary-operator ::= "+" | "-" | "*" | "/" | "%" | "&" | "|" | "^" | "<<" | ">>" | "==" | "!=" | ">" | "<" | ">=" | "<=" ;
parameter-array ::= attributes? "params" array-type identifier ;
delegate-modifiers ::= delegate-modifier | (delegate-modifiers delegate-modifier) ;
interface-event-declaration ::= attributes? "new"? "event" type identifier ";" ;
local-variable-initializer ::= expression | array-initializer ;
delegate-declaration ::= attributes? delegate-modifiers? "delegate" type identifier "(" formal-parameter-list? ")" ";" ;
struct-type ::= type-name | simple-type ;
attribute-list ::= attribute | (attribute-list "," attribute) ;
binary-operator-declarator ::= type "operator" overloadable-binary-operator "(" type identifier "," type identifier ")" ;
indexer-modifiers ::= indexer-modifier | (indexer-modifiers indexer-modifier) ;
array-type ::= non-array-type rank-specifiers ;
non-array-type ::= type ;
operator-body ::= block | ";" ;
constructor-declaration ::= attributes? constructor-modifiers? constructor-declarator constructor-body ;
field-declaration ::= attributes? field-modifiers? type variable-declarators ";" ;
enum-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
variable-declarator ::= identifier | (identifier "=" variable-initializer) ;
break-statement ::= "break" ";" ;
delegate-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
post-decrement-expression ::= primary-expression "--" ;
enum-base ::= ":" integral-type ;
attribute-name ::= type-name ;
switch-label ::= ("case" constant-expression ":") | ("default" ":") ;
named-argument-list ::= named-argument | (named-argument-list "," named-argument) ;
namespace-member-declarations ::= namespace-member-declaration | (namespace-member-declarations namespace-member-declaration) ;
interface-indexer-declaration ::= attributes? "new"? type "this" "[" formal-parameter-list "]" "{" interface-accessors "}" ;
for-condition ::= boolean-expression ;
switch-statement ::= "switch" "(" expression ")" switch-block ;
value-type ::= struct-type | enum-type ;
static-constructor-body ::= block | ";" ;
enum-member-declaration ::= (attributes? identifier) | (attributes? identifier "=" constant-expression) ;
return-statement ::= "return" expression? ";" ;
variable-initializer ::= expression | array-initializer ;
method-body ::= block | ";" ;
event-accessor-declarations ::= (add-accessor-declaration remove-accessor-declaration) | (remove-accessor-declaration add-accessor-declaration) ;
get-accessor-declaration ::= attributes? "get" accessor-body ;
global-attribute-section ::= ("[" global-attribute-target-specifier attribute-list "]") | ("[" global-attribute-target-specifier attribute-list "," "]") ;
event-modifiers ::= event-modifier | (event-modifiers event-modifier) ;
namespace-declaration ::= "namespace" qualified-identifier namespace-body ";"? ;
class-base ::= (":" class-type) | (":" interface-type-list) | (":" class-type "," interface-type-list) ;
namespace-or-type-name ::= identifier | (namespace-or-type-name "." identifier) ;
--------------------cs::csharp-ecma-334-3.bgf--------------------
accessor-declarations ::= (get-accessor-declaration set-accessor-declaration?) | (set-accessor-declaration get-accessor-declaration?) ;
delegate-creation-expression ::= "new" delegate-type "(" expression ")" ;
global-attribute-target-specifier ::= global-attribute-target ":" ;
constant-declarator ::= identifier "=" constant-expression ;
numeric-type ::= integral-type | floating-point-type | "decimal" ;
interface-member-declarations ::= interface-member-declaration | (interface-member-declarations interface-member-declaration) ;
member-access ::= (primary-expression "." identifier type-argument-list?) | (predefined-type "." identifier type-argument-list?) | (qualified-alias-member "." identifier type-argument-list?) ;
unbound-type-name ::= (identifier generic-dimension-specifier?) | (identifier "::" identifier generic-dimension-specifier?) | (unbound-type-name "." identifier generic-dimension-specifier?) ;
unary-expression ::= primary-expression | ("+" unary-expression) | ("-" unary-expression) | ("!" unary-expression) | ("~" unary-expression) | pre-increment-expression | pre-decrement-expression | cast-expression ;
invocation-expression ::= primary-expression "(" argument-list? ")" ;
local-constant-declaration ::= "const" type constant-declarators ;
type-argument ::= type ;
embedded-statement ::= block | empty-statement | expression-statement | selection-statement | iteration-statement | jump-statement | try-statement | checked-statement | unchecked-statement | lock-statement | using-statement | yield-statement ;
cast-expression ::= "(" type ")" unary-expression ;
indexer-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
constructor-declarator ::= identifier "(" formal-parameter-list? ")" constructor-initializer? ;
fixed-parameters ::= fixed-parameter | (fixed-parameters "," fixed-parameter) ;
attribute-target ::= identifier | keyword ;
formal-parameter-list ::= fixed-parameters | (fixed-parameters "," parameter-array) | parameter-array ;
operator-modifier ::= "public" | "static" | "extern" ;
base-access ::= ("base" "." identifier type-argument-list?) | ("base" "[" expression-list "]") ;
member-name ::= identifier | (interface-type "." identifier) ;
for-initializer ::= local-variable-declaration | statement-expression-list ;
try-statement ::= ("try" block catch-clauses) | ("try" block catch-clauses? finally-clause) ;
interface-member-declaration ::= interface-method-declaration | interface-property-declaration | interface-event-declaration | interface-indexer-declaration ;
variable-initializer-list ::= variable-initializer | (variable-initializer-list "," variable-initializer) ;
while-statement ::= "while" "(" boolean-expression ")" embedded-statement ;
exclusive-or-expression ::= and-expression | (exclusive-or-expression "^" and-expression) ;
catch-clauses ::= specific-catch-clauses | (specific-catch-clauses? general-catch-clause) ;
operator-declaration ::= attributes? operator-modifiers operator-declarator operator-body ;
struct-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
property-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
continue-statement ::= "continue" ";" ;
using-alias-directive ::= "using" identifier "=" namespace-or-type-name ";" ;
static-constructor-declaration ::= attributes? static-constructor-modifiers identifier "(" ")" static-constructor-body ;
simple-name ::= identifier type-argument-list? ;
conversion-operator-declarator ::= ("implicit" "operator" type "(" type identifier ")") | ("explicit" "operator" type "(" type identifier ")") ;
global-attributes ::= global-attribute-sections ;
enum-member-declarations ::= enum-member-declaration | (enum-member-declarations "," enum-member-declaration) ;
indexer-declarator ::= (type "this" "[" formal-parameter-list "]") | (type interface-type "." "this" "[" formal-parameter-list "]") ;
struct-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | static-constructor-declaration | type-declaration ;
type-parameter-constraints ::= primary-constraint | secondary-constraints | constructor-constraint | (primary-constraint "," secondary-constraints) | (primary-constraint "," constructor-constraint) | (secondary-constraints "," constructor-constraint) | (primary-constraint "," secondary-constraints "," constructor-constraint) ;
interface-type-list ::= interface-type | (interface-type-list "," interface-type) ;
namespace-name ::= namespace-or-type-name ;
conditional-or-expression ::= conditional-and-expression | (conditional-or-expression "||" conditional-and-expression) ;
finalizer-body ::= block | ";" ;
constant-declarators ::= constant-declarator | (constant-declarators "," constant-declarator) ;
return-type ::= type | "void" ;
statement-expression ::= invocation-expression | object-creation-expression | assignment | post-increment-expression | post-decrement-expression | pre-increment-expression | pre-decrement-expression ;
interface-body ::= "{" interface-member-declarations? "}" ;
local-variable-declarators ::= local-variable-declarator | (local-variable-declarators "," local-variable-declarator) ;
primary-no-array-creation-expression ::= literal | simple-name | parenthesized-expression | member-access | invocation-expression | element-access | this-access | base-access | post-increment-expression | post-decrement-expression | object-creation-expression | delegate-creation-expression | typeof-expression | checked-expression | unchecked-expression | default-value-expression | anonymous-method-expression ;
argument-list ::= argument | (argument-list "," argument) ;
indexer-declaration ::= attributes? indexer-modifiers? indexer-declarator "{" accessor-declarations "}" ;
foreach-statement ::= "foreach" "(" type identifier "in" expression ")" embedded-statement ;
assignment-operator ::= "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | right-shift-assignment ;
anonymous-method-expression ::= "delegate" anonymous-method-signature? block ;
interface-method-declaration ::= attributes? "new"? return-type identifier type-parameter-list? "(" formal-parameter-list? ")" type-parameter-constraints-clauses? ";" ;
accessor-modifier ::= "protected" | "internal" | "private" | ("protected" "internal") | ("internal" "protected") ;
null-coalescing-expression ::= conditional-or-expression | (conditional-or-expression "??" null-coalescing-expression) ;
interface-property-declaration ::= attributes? "new"? type identifier "{" interface-accessors "}" ;
constructor-body ::= block | ";" ;
using-namespace-directive ::= "using" namespace-name ";" ;
constant-modifiers ::= constant-modifier | (constant-modifiers constant-modifier) ;
attribute-target-specifier ::= attribute-target ":" ;
constructor-constraint ::= "new" "(" ")" ;
constructor-initializer ::= (":" "base" "(" argument-list? ")") | (":" "this" "(" argument-list? ")") ;
class-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "abstract" | "sealed" | "static" ;
general-catch-clause ::= "catch" block ;
goto-statement ::= ("goto" identifier ";") | ("goto" "case" constant-expression ";") | ("goto" "default" ";") ;
property-declaration ::= attributes? property-modifiers? type member-name "{" accessor-declarations "}" ;
struct-declaration ::= attributes? struct-modifiers? "partial"? "struct" identifier type-parameter-list? struct-interfaces? type-parameter-constraints-clauses? struct-body ";"? ;
set-accessor-declaration ::= attributes? accessor-modifier? "set" accessor-body ;
floating-point-type ::= "float" | "double" ;
specific-catch-clause ::= "catch" "(" class-type identifier? ")" block ;
interface-accessors ::= (attributes? "get" ";") | (attributes? "set" ";") | (attributes? "get" ";" attributes? "set" ";") | (attributes? "set" ";" attributes? "get" ";") ;
this-access ::= "this" ;
array-initializer ::= ("{" variable-initializer-list? "}") | ("{" variable-initializer-list "," "}") ;
for-statement ::= "for" "(" for-initializer? ";" for-condition? ";" for-iterator? ")" embedded-statement ;
field-modifiers ::= field-modifier | (field-modifiers field-modifier) ;
accessor-body ::= block | ";" ;
type-declaration ::= class-declaration | struct-declaration | interface-declaration | enum-declaration | delegate-declaration ;
using-statement ::= "using" "(" resource-acquisition ")" embedded-statement ;
attribute-arguments ::= ("(" positional-argument-list? ")") | ("(" positional-argument-list "," named-argument-list ")") | ("(" named-argument-list ")") ;
secondary-constraints ::= interface-type | type-parameter | (secondary-constraints "," interface-type) | (secondary-constraints "," type-parameter) ;
boolean-expression ::= expression ;
rank-specifier ::= "[" dim-separators? "]" ;
unary-operator-declarator ::= type "operator" overloadable-unary-operator "(" type identifier ")" ;
positional-argument ::= attribute-argument-expression ;
element-access ::= primary-no-array-creation-expression "[" expression-list "]" ;
typeof-expression ::= ("typeof" "(" type ")") | ("typeof" "(" unbound-type-name ")") | ("typeof" "(" "void" ")") ;
struct-interfaces ::= ":" interface-type-list ;
unchecked-statement ::= "unchecked" block ;
anonymous-method-parameter-list ::= anonymous-method-parameter | (anonymous-method-parameter-list "," anonymous-method-parameter) ;
interface-type ::= type-name ;
compilation-unit ::= extern-alias-directives? using-directives? global-attributes? namespace-member-declarations? ;
lock-statement ::= "lock" "(" expression ")" embedded-statement ;
switch-section ::= switch-labels statement-list ;
equality-expression ::= relational-expression | (equality-expression "==" relational-expression) | (equality-expression "!=" relational-expression) ;
constructor-modifier ::= "public" | "protected" | "internal" | "private" | "extern" ;
parenthesized-expression ::= "(" expression ")" ;
throw-statement ::= "throw" expression? ";" ;
primary-expression ::= array-creation-expression | primary-no-array-creation-expression ;
finalizer-declaration ::= attributes? "extern"? "~" identifier "(" ")" finalizer-body ;
type-name ::= namespace-or-type-name ;
type-parameter-constraints-clause ::= "where" type-parameter ":" type-parameter-constraints ;
class-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | finalizer-declaration | static-constructor-declaration | type-declaration ;
variable-reference ::= expression ;
additive-expression ::= multiplicative-expression | (additive-expression "+" multiplicative-expression) | (additive-expression "-" multiplicative-expression) ;
overloadable-binary-operator ::= "+" | "-" | "*" | "/" | "%" | "&" | "|" | "^" | "<<" | right-shift | "==" | "!=" | ">" | "<" | ">=" | "<=" ;
type-parameter-list ::= "<" type-parameters ">" ;
parameter-array ::= attributes? "params" array-type identifier ;
interface-event-declaration ::= attributes? "new"? "event" type identifier ";" ;
delegate-declaration ::= attributes? delegate-modifiers? "delegate" return-type identifier type-parameter-list? "(" formal-parameter-list? ")" type-parameter-constraints-clauses? ";" ;
attribute-list ::= attribute | (attribute-list "," attribute) ;
yield-statement ::= ("yield" "return" expression ";") | ("yield" "break" ";") ;
non-array-type ::= value-type | class-type | interface-type | delegate-type | type-parameter ;
indexer-modifiers ::= indexer-modifier | (indexer-modifiers indexer-modifier) ;
binary-operator-declarator ::= type "operator" overloadable-binary-operator "(" type identifier "," type identifier ")" ;
operator-body ::= block | ";" ;
field-declaration ::= attributes? field-modifiers? type variable-declarators ";" ;
generic-dimension-specifier ::= "<" commas? ">" ;
post-decrement-expression ::= primary-expression "--" ;
anonymous-method-parameter ::= parameter-modifier? type identifier ;
attribute-name ::= type-name ;
switch-label ::= ("case" constant-expression ":") | ("default" ":") ;
namespace-member-declarations ::= namespace-member-declaration | (namespace-member-declarations namespace-member-declaration) ;
interface-indexer-declaration ::= attributes? "new"? type "this" "[" formal-parameter-list "]" "{" interface-accessors "}" ;
for-condition ::= boolean-expression ;
static-constructor-body ::= block | ";" ;
enum-member-declaration ::= (attributes? identifier) | (attributes? identifier "=" constant-expression) ;
return-statement ::= "return" expression? ";" ;
variable-initializer ::= expression | array-initializer ;
method-body ::= block | ";" ;
event-accessor-declarations ::= (add-accessor-declaration remove-accessor-declaration) | (remove-accessor-declaration add-accessor-declaration) ;
get-accessor-declaration ::= attributes? accessor-modifier? "get" accessor-body ;
global-attribute-section ::= ("[" global-attribute-target-specifier attribute-list "]") | ("[" global-attribute-target-specifier attribute-list "," "]") ;
event-modifiers ::= event-modifier | (event-modifiers event-modifier) ;
namespace-or-type-name ::= (identifier type-argument-list?) | qualified-alias-member | (namespace-or-type-name "." identifier type-argument-list?) ;
non-nullable-value-type ::= enum-type | type-name | simple-type ;
relational-expression ::= shift-expression | (relational-expression "<" shift-expression) | (relational-expression ">" shift-expression) | (relational-expression "<=" shift-expression) | (relational-expression ">=" shift-expression) | (relational-expression "is" type) | (relational-expression "as" type) ;
pre-decrement-expression ::= "--" unary-expression ;
operator-declarator ::= unary-operator-declarator | binary-operator-declarator | conversion-operator-declarator ;
method-header ::= attributes? method-modifiers? return-type member-name type-parameter-list? "(" formal-parameter-list? ")" type-parameter-constraints-clauses? ;
finally-clause ::= "finally" block ;
attribute-argument-expression ::= expression ;
for-iterator ::= statement-expression-list ;
empty-statement ::= ";" ;
enum-body ::= ("{" enum-member-declarations? "}") | ("{" enum-member-declarations "," "}") ;
using-directives ::= using-directive | (using-directives using-directive) ;
interface-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
interface-modifiers ::= interface-modifier | (interface-modifiers interface-modifier) ;
interface-declaration ::= attributes? interface-modifiers? "partial"? "interface" identifier type-parameter-list? interface-base? type-parameter-constraints-clauses? interface-body ";"? ;
interface-base ::= ":" interface-type-list ;
extern-alias-directive ::= "extern" "alias" identifier ";" ;
constant-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
declaration-statement ::= (local-variable-declaration ";") | (local-constant-declaration ";") ;
class-body ::= "{" class-member-declarations? "}" ;
unchecked-expression ::= "unchecked" "(" expression ")" ;
type-parameter-constraints-clauses ::= type-parameter-constraints-clause | (type-parameter-constraints-clauses type-parameter-constraints-clause) ;
type-parameter ::= identifier ;
namespace-body ::= "{" extern-alias-directives? using-directives? namespace-member-declarations? "}" ;
array-creation-expression ::= ("new" non-array-type "[" expression-list "]" rank-specifiers? array-initializer?) | ("new" array-type array-initializer) ;
named-argument ::= identifier "=" attribute-argument-expression ;
constant-declaration ::= attributes? constant-modifiers? "const" type constant-declarators ";" ;
global-attribute-target ::= identifier | keyword ;
local-variable-declaration ::= type local-variable-declarators ;
checked-statement ::= "checked" block ;
event-declaration ::= (attributes? event-modifiers? "event" type variable-declarators ";") | (attributes? event-modifiers? "event" type member-name "{" event-accessor-declarations "}") ;
post-increment-expression ::= primary-expression "++" ;
shift-expression ::= additive-expression | (shift-expression "<<" additive-expression) | (shift-expression right-shift additive-expression) ;
local-variable-declarator ::= identifier | (identifier "=" local-variable-initializer) ;
if-statement ::= ("if" "(" boolean-expression ")" embedded-statement) | ("if" "(" boolean-expression ")" embedded-statement "else" embedded-statement) ;
integral-type ::= "sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong" | "char" ;
switch-labels ::= switch-label | (switch-labels switch-label) ;
object-creation-expression ::= "new" type "(" argument-list? ")" ;
class-member-declarations ::= class-member-declaration | (class-member-declarations class-member-declaration) ;
rank-specifiers ::= rank-specifier | (rank-specifiers rank-specifier) ;
positional-argument-list ::= positional-argument | (positional-argument-list "," positional-argument) ;
labeled-statement ::= identifier ":" statement ;
attribute-section ::= ("[" attribute-target-specifier? attribute-list "]") | ("[" attribute-target-specifier? attribute-list "," "]") ;
switch-block ::= "{" switch-sections? "}" ;
expression-list ::= expression | (expression-list "," expression) ;
enum-modifiers ::= enum-modifier | (enum-modifiers enum-modifier) ;
enum-declaration ::= attributes? enum-modifiers? "enum" identifier enum-base? enum-body ";"? ;
do-statement ::= "do" embedded-statement "while" "(" boolean-expression ")" ";" ;
event-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
global-attribute-sections ::= global-attribute-section | (global-attribute-sections global-attribute-section) ;
switch-sections ::= switch-section | (switch-sections switch-section) ;
class-declaration ::= attributes? class-modifiers? "partial"? "class" identifier type-parameter-list? class-base? type-parameter-constraints-clauses? class-body ";"? ;
inclusive-or-expression ::= exclusive-or-expression | (inclusive-or-expression "|" exclusive-or-expression) ;
predefined-type ::= "bool" | "byte" | "char" | "decimal" | "double" | "float" | "int" | "long" | "object" | "sbyte" | "short" | "string" | "uint" | "ulong" | "ushort" ;
add-accessor-declaration ::= attributes? "add" block ;
pre-increment-expression ::= "++" unary-expression ;
remove-accessor-declaration ::= attributes? "remove" block ;
struct-body ::= "{" struct-member-declarations? "}" ;
struct-member-declarations ::= struct-member-declaration | (struct-member-declarations struct-member-declaration) ;
operator-modifiers ::= operator-modifier | (operator-modifiers operator-modifier) ;
dim-separators ::= "," | (dim-separators ",") ;
variable-declarators ::= variable-declarator | (variable-declarators "," variable-declarator) ;
fixed-parameter ::= attributes? parameter-modifier? type identifier ;
method-modifiers ::= method-modifier | (method-modifiers method-modifier) ;
jump-statement ::= break-statement | continue-statement | goto-statement | return-statement | throw-statement ;
method-declaration ::= method-header method-body ;
primary-constraint ::= class-type | "class" | "struct" ;
enum-type ::= type-name ;
struct-modifiers ::= struct-modifier | (struct-modifiers struct-modifier) ;
property-modifiers ::= property-modifier | (property-modifiers property-modifier) ;
type-arguments ::= type-argument | (type-arguments "," type-argument) ;
delegate-type ::= type-name ;
default-value-expression ::= "default" "(" type ")" ;
iteration-statement ::= while-statement | do-statement | for-statement | foreach-statement ;
checked-expression ::= "checked" "(" expression ")" ;
reference-type ::= class-type | interface-type | array-type | delegate-type ;
parameter-modifier ::= "ref" | "out" ;
expression-statement ::= statement-expression ";" ;
qualified-identifier ::= identifier | (qualified-identifier "." identifier) ;
namespace-member-declaration ::= namespace-declaration | type-declaration ;
specific-catch-clauses ::= specific-catch-clause | (specific-catch-clauses specific-catch-clause) ;
conditional-and-expression ::= inclusive-or-expression | (conditional-and-expression "&&" inclusive-or-expression) ;
simple-type ::= numeric-type | "bool" ;
multiplicative-expression ::= unary-expression | (multiplicative-expression "*" unary-expression) | (multiplicative-expression "/" unary-expression) | (multiplicative-expression "%" unary-expression) ;
class-type ::= type-name | "object" | "string" ;
selection-statement ::= if-statement | switch-statement ;
constructor-modifiers ::= constructor-modifier | (constructor-modifiers constructor-modifier) ;
class-modifiers ::= class-modifier | (class-modifiers class-modifier) ;
constant-expression ::= expression ;
type-parameters ::= (attributes? type-parameter) | (type-parameters "," attributes? type-parameter) ;
type-argument-list ::= "<" type-arguments ">" ;
overloadable-unary-operator ::= "+" | "-" | "!" | "~" | "++" | "--" | "true" | "false" ;
statement-expression-list ::= statement-expression | (statement-expression-list "," statement-expression) ;
and-expression ::= equality-expression | (and-expression "&" equality-expression) ;
resource-acquisition ::= local-variable-declaration | expression ;
static-constructor-modifiers ::= ("extern"? "static") | ("static" "extern"?) ;
field-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "readonly" | "volatile" ;
qualified-alias-member ::= identifier "::" identifier type-argument-list? ;
using-directive ::= using-alias-directive | using-namespace-directive ;
method-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
attribute-sections ::= attribute-section | (attribute-sections attribute-section) ;
conditional-expression ::= null-coalescing-expression | (null-coalescing-expression "?" expression ":" expression) ;
statement-list ::= statement | (statement-list statement) ;
delegate-modifiers ::= delegate-modifier | (delegate-modifiers delegate-modifier) ;
local-variable-initializer ::= expression | array-initializer ;
struct-type ::= type-name | simple-type | nullable-type ;
array-type ::= non-array-type rank-specifiers ;
extern-alias-directives ::= extern-alias-directive | (extern-alias-directives extern-alias-directive) ;
anonymous-method-signature ::= "(" anonymous-method-parameter-list? ")" ;
constructor-declaration ::= attributes? constructor-modifiers? constructor-declarator constructor-body ;
nullable-type ::= non-nullable-value-type "?" ;
enum-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
variable-declarator ::= identifier | (identifier "=" variable-initializer) ;
break-statement ::= "break" ";" ;
delegate-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
enum-base ::= ":" integral-type ;
named-argument-list ::= named-argument | (named-argument-list "," named-argument) ;
switch-statement ::= "switch" "(" expression ")" switch-block ;
value-type ::= struct-type | enum-type ;
namespace-declaration ::= "namespace" qualified-identifier namespace-body ";"? ;
class-base ::= (":" class-type) | (":" interface-type-list) | (":" class-type "," interface-type-list) ;
--------------------cs::csharp-ecma-334-4.bgf--------------------
accessor-declarations ::= (get-accessor-declaration set-accessor-declaration?) | (set-accessor-declaration get-accessor-declaration?) ;
delegate-creation-expression ::= "new" delegate-type "(" expression ")" ;
global-attribute-target-specifier ::= global-attribute-target ":" ;
constant-declarator ::= identifier "=" constant-expression ;
numeric-type ::= integral-type | floating-point-type | "decimal" ;
interface-member-declarations ::= interface-member-declaration | (interface-member-declarations interface-member-declaration) ;
member-access ::= (primary-expression "." identifier type-argument-list?) | (predefined-type "." identifier type-argument-list?) | (qualified-alias-member "." identifier type-argument-list?) ;
unbound-type-name ::= (identifier generic-dimension-specifier?) | (identifier "::" identifier generic-dimension-specifier?) | (unbound-type-name "." identifier generic-dimension-specifier?) ;
unary-expression ::= primary-expression | ("+" unary-expression) | ("-" unary-expression) | ("!" unary-expression) | ("~" unary-expression) | pre-increment-expression | pre-decrement-expression | cast-expression ;
invocation-expression ::= primary-expression "(" argument-list? ")" ;
local-constant-declaration ::= "const" type constant-declarators ;
type-argument ::= type ;
embedded-statement ::= block | empty-statement | expression-statement | selection-statement | iteration-statement | jump-statement | try-statement | checked-statement | unchecked-statement | lock-statement | using-statement | yield-statement ;
cast-expression ::= "(" type ")" unary-expression ;
indexer-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
constructor-declarator ::= identifier "(" formal-parameter-list? ")" constructor-initializer? ;
fixed-parameters ::= fixed-parameter | (fixed-parameters "," fixed-parameter) ;
attribute-target ::= identifier | keyword ;
formal-parameter-list ::= fixed-parameters | (fixed-parameters "," parameter-array) | parameter-array ;
operator-modifier ::= "public" | "static" | "extern" ;
base-access ::= ("base" "." identifier type-argument-list?) | ("base" "[" expression-list "]") ;
member-name ::= identifier | (interface-type "." identifier) ;
for-initializer ::= local-variable-declaration | statement-expression-list ;
try-statement ::= ("try" block catch-clauses) | ("try" block catch-clauses? finally-clause) ;
interface-member-declaration ::= interface-method-declaration | interface-property-declaration | interface-event-declaration | interface-indexer-declaration ;
variable-initializer-list ::= variable-initializer | (variable-initializer-list "," variable-initializer) ;
while-statement ::= "while" "(" boolean-expression ")" embedded-statement ;
exclusive-or-expression ::= and-expression | (exclusive-or-expression "^" and-expression) ;
catch-clauses ::= specific-catch-clauses | (specific-catch-clauses? general-catch-clause) ;
operator-declaration ::= attributes? operator-modifiers operator-declarator operator-body ;
struct-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
property-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
continue-statement ::= "continue" ";" ;
using-alias-directive ::= "using" identifier "=" namespace-or-type-name ";" ;
static-constructor-declaration ::= attributes? static-constructor-modifiers identifier "(" ")" static-constructor-body ;
simple-name ::= identifier type-argument-list? ;
conversion-operator-declarator ::= ("implicit" "operator" type "(" type identifier ")") | ("explicit" "operator" type "(" type identifier ")") ;
global-attributes ::= global-attribute-sections ;
enum-member-declarations ::= enum-member-declaration | (enum-member-declarations "," enum-member-declaration) ;
type-parameter-constraints ::= primary-constraint | secondary-constraints | constructor-constraint | (primary-constraint "," secondary-constraints) | (primary-constraint "," constructor-constraint) | (secondary-constraints "," constructor-constraint) | (primary-constraint "," secondary-constraints "," constructor-constraint) ;
indexer-declarator ::= (type "this" "[" formal-parameter-list "]") | (type interface-type "." "this" "[" formal-parameter-list "]") ;
struct-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | static-constructor-declaration | type-declaration ;
interface-type-list ::= interface-type | (interface-type-list "," interface-type) ;
namespace-name ::= namespace-or-type-name ;
conditional-or-expression ::= conditional-and-expression | (conditional-or-expression "||" conditional-and-expression) ;
finalizer-body ::= block | ";" ;
constant-declarators ::= constant-declarator | (constant-declarators "," constant-declarator) ;
return-type ::= type | "void" ;
statement-expression ::= invocation-expression | object-creation-expression | assignment | post-increment-expression | post-decrement-expression | pre-increment-expression | pre-decrement-expression ;
interface-body ::= "{" interface-member-declarations? "}" ;
local-variable-declarators ::= local-variable-declarator | (local-variable-declarators "," local-variable-declarator) ;
primary-no-array-creation-expression ::= literal | simple-name | parenthesized-expression | member-access | invocation-expression | element-access | this-access | base-access | post-increment-expression | post-decrement-expression | object-creation-expression | delegate-creation-expression | typeof-expression | checked-expression | unchecked-expression | default-value-expression | anonymous-method-expression ;
argument-list ::= argument | (argument-list "," argument) ;
indexer-declaration ::= attributes? indexer-modifiers? indexer-declarator "{" accessor-declarations "}" ;
foreach-statement ::= "foreach" "(" type identifier "in" expression ")" embedded-statement ;
assignment-operator ::= "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | right-shift-assignment ;
anonymous-method-expression ::= "delegate" anonymous-method-signature? block ;
interface-method-declaration ::= attributes? "new"? return-type identifier type-parameter-list? "(" formal-parameter-list? ")" type-parameter-constraints-clauses? ";" ;
accessor-modifier ::= "protected" | "internal" | "private" | ("protected" "internal") | ("internal" "protected") ;
null-coalescing-expression ::= conditional-or-expression | (conditional-or-expression "??" null-coalescing-expression) ;
interface-property-declaration ::= attributes? "new"? type identifier "{" interface-accessors "}" ;
constructor-body ::= block | ";" ;
using-namespace-directive ::= "using" namespace-name ";" ;
attribute-target-specifier ::= attribute-target ":" ;
constant-modifiers ::= constant-modifier | (constant-modifiers constant-modifier) ;
right-shift ::= ">>" ;
constructor-constraint ::= "new" "(" ")" ;
constructor-initializer ::= (":" "base" "(" argument-list? ")") | (":" "this" "(" argument-list? ")") ;
class-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "abstract" | "sealed" | "static" ;
general-catch-clause ::= "catch" block ;
goto-statement ::= ("goto" identifier ";") | ("goto" "case" constant-expression ";") | ("goto" "default" ";") ;
property-declaration ::= attributes? property-modifiers? type member-name "{" accessor-declarations "}" ;
struct-declaration ::= attributes? struct-modifiers? "partial"? "struct" identifier type-parameter-list? struct-interfaces? type-parameter-constraints-clauses? struct-body ";"? ;
set-accessor-declaration ::= attributes? accessor-modifier? "set" accessor-body ;
floating-point-type ::= "float" | "double" ;
specific-catch-clause ::= "catch" "(" class-type identifier? ")" block ;
interface-accessors ::= (attributes? "get" ";") | (attributes? "set" ";") | (attributes? "get" ";" attributes? "set" ";") | (attributes? "set" ";" attributes? "get" ";") ;
this-access ::= "this" ;
array-initializer ::= ("{" variable-initializer-list? "}") | ("{" variable-initializer-list "," "}") ;
for-statement ::= "for" "(" for-initializer? ";" for-condition? ";" for-iterator? ")" embedded-statement ;
field-modifiers ::= field-modifier | (field-modifiers field-modifier) ;
accessor-body ::= block | ";" ;
type-declaration ::= class-declaration | struct-declaration | interface-declaration | enum-declaration | delegate-declaration ;
using-statement ::= "using" "(" resource-acquisition ")" embedded-statement ;
attribute-arguments ::= ("(" positional-argument-list? ")") | ("(" positional-argument-list "," named-argument-list ")") | ("(" named-argument-list ")") ;
secondary-constraints ::= interface-type | type-parameter | (secondary-constraints "," interface-type) | (secondary-constraints "," type-parameter) ;
boolean-expression ::= expression ;
rank-specifier ::= "[" dim-separators? "]" ;
unary-operator-declarator ::= type "operator" overloadable-unary-operator "(" type identifier ")" ;
positional-argument ::= attribute-argument-expression ;
element-access ::= primary-no-array-creation-expression "[" expression-list "]" ;
typeof-expression ::= ("typeof" "(" type ")") | ("typeof" "(" unbound-type-name ")") | ("typeof" "(" "void" ")") ;
struct-interfaces ::= ":" interface-type-list ;
unchecked-statement ::= "unchecked" block ;
anonymous-method-parameter-list ::= anonymous-method-parameter | (anonymous-method-parameter-list "," anonymous-method-parameter) ;
interface-type ::= type-name ;
compilation-unit ::= extern-alias-directives? using-directives? global-attributes? namespace-member-declarations? ;
lock-statement ::= "lock" "(" expression ")" embedded-statement ;
switch-section ::= switch-labels statement-list ;
equality-expression ::= relational-expression | (equality-expression "==" relational-expression) | (equality-expression "!=" relational-expression) ;
constructor-modifier ::= "public" | "protected" | "internal" | "private" | "extern" ;
parenthesized-expression ::= "(" expression ")" ;
throw-statement ::= "throw" expression? ";" ;
primary-expression ::= array-creation-expression | primary-no-array-creation-expression ;
finalizer-declaration ::= attributes? "extern"? "~" identifier "(" ")" finalizer-body ;
type-name ::= namespace-or-type-name ;
type-parameter-constraints-clause ::= "where" type-parameter ":" type-parameter-constraints ;
class-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | finalizer-declaration | static-constructor-declaration | type-declaration ;
variable-reference ::= expression ;
additive-expression ::= multiplicative-expression | (additive-expression "+" multiplicative-expression) | (additive-expression "-" multiplicative-expression) ;
overloadable-binary-operator ::= "+" | "-" | "*" | "/" | "%" | "&" | "|" | "^" | "<<" | right-shift | "==" | "!=" | ">" | "<" | ">=" | "<=" ;
parameter-array ::= attributes? "params" array-type identifier ;
type-parameter-list ::= "<" type-parameters ">" ;
interface-event-declaration ::= attributes? "new"? "event" type identifier ";" ;
delegate-declaration ::= attributes? delegate-modifiers? "delegate" return-type identifier type-parameter-list? "(" formal-parameter-list? ")" type-parameter-constraints-clauses? ";" ;
yield-statement ::= ("yield" "return" expression ";") | ("yield" "break" ";") ;
attribute-list ::= attribute | (attribute-list "," attribute) ;
indexer-modifiers ::= indexer-modifier | (indexer-modifiers indexer-modifier) ;
binary-operator-declarator ::= type "operator" overloadable-binary-operator "(" type identifier "," type identifier ")" ;
non-array-type ::= value-type | class-type | interface-type | delegate-type | type-parameter ;
operator-body ::= block | ";" ;
field-declaration ::= attributes? field-modifiers? type variable-declarators ";" ;
generic-dimension-specifier ::= "<" commas? ">" ;
post-decrement-expression ::= primary-expression "--" ;
anonymous-method-parameter ::= parameter-modifier? type identifier ;
attribute-name ::= type-name ;
switch-label ::= ("case" constant-expression ":") | ("default" ":") ;
namespace-member-declarations ::= namespace-member-declaration | (namespace-member-declarations namespace-member-declaration) ;
interface-indexer-declaration ::= attributes? "new"? type "this" "[" formal-parameter-list "]" "{" interface-accessors "}" ;
for-condition ::= boolean-expression ;
static-constructor-body ::= block | ";" ;
enum-member-declaration ::= (attributes? identifier) | (attributes? identifier "=" constant-expression) ;
return-statement ::= "return" expression? ";" ;
variable-initializer ::= expression | array-initializer ;
method-body ::= block | ";" ;
event-accessor-declarations ::= (add-accessor-declaration remove-accessor-declaration) | (remove-accessor-declaration add-accessor-declaration) ;
get-accessor-declaration ::= attributes? accessor-modifier? "get" accessor-body ;
global-attribute-section ::= ("[" global-attribute-target-specifier attribute-list "]") | ("[" global-attribute-target-specifier attribute-list "," "]") ;
event-modifiers ::= event-modifier | (event-modifiers event-modifier) ;
namespace-or-type-name ::= (identifier type-argument-list?) | qualified-alias-member | (namespace-or-type-name "." identifier type-argument-list?) ;
non-nullable-value-type ::= enum-type | type-name | simple-type ;
relational-expression ::= shift-expression | (relational-expression "<" shift-expression) | (relational-expression ">" shift-expression) | (relational-expression "<=" shift-expression) | (relational-expression ">=" shift-expression) | (relational-expression "is" type) | (relational-expression "as" type) ;
pre-decrement-expression ::= "--" unary-expression ;
operator-declarator ::= unary-operator-declarator | binary-operator-declarator | conversion-operator-declarator ;
method-header ::= attributes? method-modifiers? return-type member-name type-parameter-list? "(" formal-parameter-list? ")" type-parameter-constraints-clauses? ;
finally-clause ::= "finally" block ;
attribute-argument-expression ::= expression ;
for-iterator ::= statement-expression-list ;
empty-statement ::= ";" ;
enum-body ::= ("{" enum-member-declarations? "}") | ("{" enum-member-declarations "," "}") ;
using-directives ::= using-directive | (using-directives using-directive) ;
interface-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
interface-modifiers ::= interface-modifier | (interface-modifiers interface-modifier) ;
interface-declaration ::= attributes? interface-modifiers? "partial"? "interface" identifier type-parameter-list? interface-base? type-parameter-constraints-clauses? interface-body ";"? ;
interface-base ::= ":" interface-type-list ;
extern-alias-directive ::= "extern" "alias" identifier ";" ;
constant-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
declaration-statement ::= (local-variable-declaration ";") | (local-constant-declaration ";") ;
class-body ::= "{" class-member-declarations? "}" ;
unchecked-expression ::= "unchecked" "(" expression ")" ;
type-parameter-constraints-clauses ::= type-parameter-constraints-clause | (type-parameter-constraints-clauses type-parameter-constraints-clause) ;
type-parameter ::= identifier ;
namespace-body ::= "{" extern-alias-directives? using-directives? namespace-member-declarations? "}" ;
array-creation-expression ::= ("new" non-array-type "[" expression-list "]" rank-specifiers? array-initializer?) | ("new" array-type array-initializer) ;
constant-declaration ::= attributes? constant-modifiers? "const" type constant-declarators ";" ;
named-argument ::= identifier "=" attribute-argument-expression ;
global-attribute-target ::= identifier | keyword ;
local-variable-declaration ::= type local-variable-declarators ;
checked-statement ::= "checked" block ;
event-declaration ::= (attributes? event-modifiers? "event" type variable-declarators ";") | (attributes? event-modifiers? "event" type member-name "{" event-accessor-declarations "}") ;
shift-expression ::= additive-expression | (shift-expression "<<" additive-expression) | (shift-expression right-shift additive-expression) ;
post-increment-expression ::= primary-expression "++" ;
local-variable-declarator ::= identifier | (identifier "=" local-variable-initializer) ;
if-statement ::= ("if" "(" boolean-expression ")" embedded-statement) | ("if" "(" boolean-expression ")" embedded-statement "else" embedded-statement) ;
integral-type ::= "sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong" | "char" ;
switch-labels ::= switch-label | (switch-labels switch-label) ;
object-creation-expression ::= "new" type "(" argument-list? ")" ;
class-member-declarations ::= class-member-declaration | (class-member-declarations class-member-declaration) ;
rank-specifiers ::= rank-specifier | (rank-specifiers rank-specifier) ;
labeled-statement ::= identifier ":" statement ;
positional-argument-list ::= positional-argument | (positional-argument-list "," positional-argument) ;
attribute-section ::= ("[" attribute-target-specifier? attribute-list "]") | ("[" attribute-target-specifier? attribute-list "," "]") ;
switch-block ::= "{" switch-sections? "}" ;
expression-list ::= expression | (expression-list "," expression) ;
enum-modifiers ::= enum-modifier | (enum-modifiers enum-modifier) ;
enum-declaration ::= attributes? enum-modifiers? "enum" identifier enum-base? enum-body ";"? ;
do-statement ::= "do" embedded-statement "while" "(" boolean-expression ")" ";" ;
event-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
global-attribute-sections ::= global-attribute-section | (global-attribute-sections global-attribute-section) ;
switch-sections ::= switch-section | (switch-sections switch-section) ;
class-declaration ::= attributes? class-modifiers? "partial"? "class" identifier type-parameter-list? class-base? type-parameter-constraints-clauses? class-body ";"? ;
predefined-type ::= "bool" | "byte" | "char" | "decimal" | "double" | "float" | "int" | "long" | "object" | "sbyte" | "short" | "string" | "uint" | "ulong" | "ushort" ;
inclusive-or-expression ::= exclusive-or-expression | (inclusive-or-expression "|" exclusive-or-expression) ;
add-accessor-declaration ::= attributes? "add" block ;
pre-increment-expression ::= "++" unary-expression ;
remove-accessor-declaration ::= attributes? "remove" block ;
struct-body ::= "{" struct-member-declarations? "}" ;
struct-member-declarations ::= struct-member-declaration | (struct-member-declarations struct-member-declaration) ;
operator-modifiers ::= operator-modifier | (operator-modifiers operator-modifier) ;
dim-separators ::= "," | (dim-separators ",") ;
variable-declarators ::= variable-declarator | (variable-declarators "," variable-declarator) ;
method-modifiers ::= method-modifier | (method-modifiers method-modifier) ;
fixed-parameter ::= attributes? parameter-modifier? type identifier ;
jump-statement ::= break-statement | continue-statement | goto-statement | return-statement | throw-statement ;
method-declaration ::= method-header method-body ;
right-shift-assignment ::= ">>=" ;
primary-constraint ::= class-type | "class" | "struct" ;
enum-type ::= type-name ;
struct-modifiers ::= struct-modifier | (struct-modifiers struct-modifier) ;
property-modifiers ::= property-modifier | (property-modifiers property-modifier) ;
type-arguments ::= type-argument | (type-arguments "," type-argument) ;
delegate-type ::= type-name ;
default-value-expression ::= "default" "(" type ")" ;
iteration-statement ::= while-statement | do-statement | for-statement | foreach-statement ;
checked-expression ::= "checked" "(" expression ")" ;
reference-type ::= class-type | interface-type | array-type | delegate-type ;
parameter-modifier ::= "ref" | "out" ;
qualified-identifier ::= identifier | (qualified-identifier "." identifier) ;
expression-statement ::= statement-expression ";" ;
namespace-member-declaration ::= namespace-declaration | type-declaration ;
specific-catch-clauses ::= specific-catch-clause | (specific-catch-clauses specific-catch-clause) ;
conditional-and-expression ::= inclusive-or-expression | (conditional-and-expression "&&" inclusive-or-expression) ;
simple-type ::= numeric-type | "bool" ;
multiplicative-expression ::= unary-expression | (multiplicative-expression "*" unary-expression) | (multiplicative-expression "/" unary-expression) | (multiplicative-expression "%" unary-expression) ;
class-type ::= type-name | "object" | "string" ;
selection-statement ::= if-statement | switch-statement ;
constructor-modifiers ::= constructor-modifier | (constructor-modifiers constructor-modifier) ;
class-modifiers ::= class-modifier | (class-modifiers class-modifier) ;
constant-expression ::= expression ;
type-parameters ::= (attributes? type-parameter) | (type-parameters "," attributes? type-parameter) ;
overloadable-unary-operator ::= "+" | "-" | "!" | "~" | "++" | "--" | "true" | "false" ;
type-argument-list ::= "<" type-arguments ">" ;
statement-expression-list ::= statement-expression | (statement-expression-list "," statement-expression) ;
and-expression ::= equality-expression | (and-expression "&" equality-expression) ;
resource-acquisition ::= local-variable-declaration | expression ;
static-constructor-modifiers ::= ("extern"? "static") | ("static" "extern"?) ;
field-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "readonly" | "volatile" ;
qualified-alias-member ::= identifier "::" identifier type-argument-list? ;
using-directive ::= using-alias-directive | using-namespace-directive ;
method-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
attribute-sections ::= attribute-section | (attribute-sections attribute-section) ;
conditional-expression ::= null-coalescing-expression | (null-coalescing-expression "?" expression ":" expression) ;
statement-list ::= statement | (statement-list statement) ;
delegate-modifiers ::= delegate-modifier | (delegate-modifiers delegate-modifier) ;
local-variable-initializer ::= expression | array-initializer ;
struct-type ::= type-name | simple-type | nullable-type ;
array-type ::= non-array-type rank-specifiers ;
extern-alias-directives ::= extern-alias-directive | (extern-alias-directives extern-alias-directive) ;
anonymous-method-signature ::= "(" anonymous-method-parameter-list? ")" ;
constructor-declaration ::= attributes? constructor-modifiers? constructor-declarator constructor-body ;
nullable-type ::= non-nullable-value-type "?" ;
enum-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
variable-declarator ::= identifier | (identifier "=" variable-initializer) ;
break-statement ::= "break" ";" ;
delegate-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
enum-base ::= ":" integral-type ;
named-argument-list ::= named-argument | (named-argument-list "," named-argument) ;
switch-statement ::= "switch" "(" expression ")" switch-block ;
value-type ::= struct-type | enum-type ;
namespace-declaration ::= "namespace" qualified-identifier namespace-body ";"? ;
class-base ::= (":" class-type) | (":" interface-type-list) | (":" class-type "," interface-type-list) ;
--------------------cs::csharp-iso-23270-2003.bgf--------------------
accessor-declarations ::= (get-accessor-declaration set-accessor-declaration?) | (set-accessor-declaration get-accessor-declaration?) ;
relational-expression ::= shift-expression | (relational-expression "<" shift-expression) | (relational-expression ">" shift-expression) | (relational-expression "<=" shift-expression) | (relational-expression ">=" shift-expression) | (relational-expression "is" type) | (relational-expression "as" type) ;
delegate-creation-expression ::= "new" delegate-type "(" expression ")" ;
global-attribute-target-specifier ::= global-attribute-target ":" ;
pre-decrement-expression ::= "--" unary-expression ;
operator-declarator ::= unary-operator-declarator | binary-operator-declarator | conversion-operator-declarator ;
constant-declarator ::= identifier "=" constant-expression ;
numeric-type ::= integral-type | floating-point-type | "decimal" ;
method-header ::= attributes? method-modifiers? return-type member-name "(" formal-parameter-list? ")" ;
finally-clause ::= "finally" block ;
interface-member-declarations ::= interface-member-declaration | (interface-member-declarations interface-member-declaration) ;
attribute-argument-expression ::= expression ;
member-access ::= (primary-expression "." identifier) | (predefined-type "." identifier) ;
destructor-body ::= block | ";" ;
unary-expression ::= primary-expression | ("+" unary-expression) | ("-" unary-expression) | ("!" unary-expression) | ("~" unary-expression) | ("*" unary-expression) | pre-increment-expression | pre-decrement-expression | cast-expression ;
invocation-expression ::= primary-expression "(" argument-list? ")" ;
local-constant-declaration ::= "const" type constant-declarators ;
for-iterator ::= statement-expression-list ;
empty-statement ::= ";" ;
enum-body ::= ("{" enum-member-declarations? "}") | ("{" enum-member-declarations "," "}") ;
using-directives ::= using-directive | (using-directives using-directive) ;
embedded-statement ::= block | empty-statement | expression-statement | selection-statement | iteration-statement | jump-statement | try-statement | checked-statement | unchecked-statement | lock-statement | using-statement ;
interface-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
interface-modifiers ::= interface-modifier | (interface-modifiers interface-modifier) ;
interface-declaration ::= attributes? interface-modifiers? "interface" identifier interface-base? interface-body ";"? ;
cast-expression ::= "(" type ")" unary-expression ;
interface-base ::= ":" interface-type-list ;
indexer-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
constructor-declarator ::= identifier "(" formal-parameter-list? ")" constructor-initializer? ;
fixed-parameters ::= fixed-parameter | (fixed-parameters "," fixed-parameter) ;
attribute-target ::= "field" | "event" | "method" | "module" | "param" | "property" | "return" | "type" ;
operator-modifier ::= "public" | "static" | "extern" ;
formal-parameter-list ::= fixed-parameters | (fixed-parameters "," parameter-array) | parameter-array ;
constant-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
base-access ::= ("base" "." identifier) | ("base" "[" expression-list "]") ;
member-name ::= identifier | (interface-type "." identifier) ;
for-initializer ::= local-variable-declaration | statement-expression-list ;
try-statement ::= ("try" block catch-clauses) | ("try" block finally-clause) | ("try" block catch-clauses finally-clause) ;
declaration-statement ::= (local-variable-declaration ";") | (local-constant-declaration ";") ;
interface-member-declaration ::= interface-method-declaration | interface-property-declaration | interface-event-declaration | interface-indexer-declaration ;
variable-initializer-list ::= variable-initializer | (variable-initializer-list "," variable-initializer) ;
class-body ::= "{" class-member-declarations? "}" ;
unchecked-expression ::= "unchecked" "(" expression ")" ;
namespace-body ::= "{" using-directives? namespace-member-declarations? "}" ;
while-statement ::= "while" "(" boolean-expression ")" embedded-statement ;
exclusive-or-expression ::= and-expression | (exclusive-or-expression "^" and-expression) ;
catch-clauses ::= (specific-catch-clauses general-catch-clause?) | (specific-catch-clauses? general-catch-clause) ;
array-creation-expression ::= ("new" non-array-type "[" expression-list "]" rank-specifiers? array-initializer?) | ("new" array-type array-initializer) ;
named-argument ::= identifier "=" attribute-argument-expression ;
operator-declaration ::= attributes? operator-modifiers operator-declarator operator-body ;
constant-declaration ::= attributes? constant-modifiers? "const" type constant-declarators ";" ;
struct-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
property-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
global-attribute-target ::= "assembly" ;
local-variable-declaration ::= type local-variable-declarators ;
continue-statement ::= "continue" ";" ;
checked-statement ::= "checked" block ;
using-alias-directive ::= "using" identifier "=" namespace-or-type-name ";" ;
static-constructor-declaration ::= attributes? static-constructor-modifiers identifier "(" ")" static-constructor-body ;
event-declaration ::= (attributes? event-modifiers? "event" type variable-declarators ";") | (attributes? event-modifiers? "event" type member-name "{" event-accessor-declarations "}") ;
simple-name ::= identifier ;
conversion-operator-declarator ::= ("implicit" "operator" type "(" type identifier ")") | ("explicit" "operator" type "(" type identifier ")") ;
post-increment-expression ::= primary-expression "++" ;
shift-expression ::= additive-expression | (shift-expression "<<" additive-expression) | (shift-expression ">>" additive-expression) ;
global-attributes ::= global-attribute-sections ;
enum-member-declarations ::= enum-member-declaration | (enum-member-declarations "," enum-member-declaration) ;
local-variable-declarator ::= identifier | (identifier "=" local-variable-initializer) ;
struct-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | static-constructor-declaration | type-declaration ;
indexer-declarator ::= (type "this" "[" formal-parameter-list "]") | (type interface-type "." "this" "[" formal-parameter-list "]") ;
if-statement ::= ("if" "(" boolean-expression ")" embedded-statement) | ("if" "(" boolean-expression ")" embedded-statement "else" embedded-statement) ;
interface-type-list ::= interface-type | (interface-type-list "," interface-type) ;
namespace-name ::= namespace-or-type-name ;
conditional-or-expression ::= conditional-and-expression | (conditional-or-expression "||" conditional-and-expression) ;
integral-type ::= "sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong" | "char" ;
constant-declarators ::= constant-declarator | (constant-declarators "," constant-declarator) ;
switch-labels ::= switch-label | (switch-labels switch-label) ;
object-creation-expression ::= "new" type "(" argument-list? ")" ;
return-type ::= type | "void" ;
class-member-declarations ::= class-member-declaration | (class-member-declarations class-member-declaration) ;
interface-body ::= "{" interface-member-declarations? "}" ;
rank-specifiers ::= rank-specifier | (rank-specifiers rank-specifier) ;
statement-expression ::= invocation-expression | object-creation-expression | assignment | post-increment-expression | post-decrement-expression | pre-increment-expression | pre-decrement-expression ;
positional-argument-list ::= positional-argument | (positional-argument-list "," positional-argument) ;
labeled-statement ::= identifier ":" statement ;
attribute-section ::= ("[" attribute-target-specifier? attribute-list "]") | ("[" attribute-target-specifier? attribute-list "," "]") ;
switch-block ::= "{" switch-sections? "}" ;
local-variable-declarators ::= local-variable-declarator | (local-variable-declarators "," local-variable-declarator) ;
expression-list ::= expression | (expression-list "," expression) ;
primary-no-array-creation-expression ::= literal | simple-name | parenthesized-expression | member-access | invocation-expression | element-access | this-access | base-access | post-increment-expression | post-decrement-expression | object-creation-expression | delegate-creation-expression | typeof-expression | checked-expression | unchecked-expression ;
enum-modifiers ::= enum-modifier | (enum-modifiers enum-modifier) ;
enum-declaration ::= attributes? enum-modifiers? "enum" identifier enum-base? enum-body ";"? ;
argument-list ::= argument | (argument-list "," argument) ;
do-statement ::= "do" embedded-statement "while" "(" boolean-expression ")" ";" ;
indexer-declaration ::= attributes? indexer-modifiers? indexer-declarator "{" accessor-declarations "}" ;
foreach-statement ::= "foreach" "(" type identifier "in" expression ")" embedded-statement ;
event-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
global-attribute-sections ::= global-attribute-section | (global-attribute-sections global-attribute-section) ;
switch-sections ::= switch-section | (switch-sections switch-section) ;
destructor-declaration ::= attributes? "extern"? "~" identifier "(" ")" destructor-body ;
class-declaration ::= attributes? class-modifiers? "class" identifier class-base? class-body ";"? ;
assignment-operator ::= "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | ">>=" ;
interface-method-declaration ::= attributes? "new"? return-type identifier "(" formal-parameter-list? ")" ";" ;
inclusive-or-expression ::= exclusive-or-expression | (inclusive-or-expression "|" exclusive-or-expression) ;
predefined-type ::= "bool" | "byte" | "char" | "decimal" | "double" | "float" | "int" | "long" | "object" | "sbyte" | "short" | "string" | "uint" | "ulong" | "ushort" ;
add-accessor-declaration ::= attributes? "add" block ;
pre-increment-expression ::= "++" unary-expression ;
remove-accessor-declaration ::= attributes? "remove" block ;
struct-body ::= "{" struct-member-declarations? "}" ;
interface-property-declaration ::= attributes? "new"? type identifier "{" interface-accessors "}" ;
constructor-body ::= block | ";" ;
struct-member-declarations ::= struct-member-declaration | (struct-member-declarations struct-member-declaration) ;
using-namespace-directive ::= "using" namespace-name ";" ;
attribute-target-specifier ::= attribute-target ":" ;
dim-separators ::= "," | (dim-separators ",") ;
operator-modifiers ::= operator-modifier | (operator-modifiers operator-modifier) ;
constant-modifiers ::= constant-modifier | (constant-modifiers constant-modifier) ;
variable-declarators ::= variable-declarator | (variable-declarators "," variable-declarator) ;
fixed-parameter ::= attributes? parameter-modifier? type identifier ;
method-modifiers ::= method-modifier | (method-modifiers method-modifier) ;
jump-statement ::= break-statement | continue-statement | goto-statement | return-statement | throw-statement ;
constructor-initializer ::= (":" "base" "(" argument-list? ")") | (":" "this" "(" argument-list? ")") ;
method-declaration ::= method-header method-body ;
class-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "abstract" | "sealed" ;
enum-type ::= type-name ;
general-catch-clause ::= "catch" block ;
goto-statement ::= ("goto" identifier ";") | ("goto" "case" constant-expression ";") | ("goto" "default" ";") ;
struct-modifiers ::= struct-modifier | (struct-modifiers struct-modifier) ;
property-modifiers ::= property-modifier | (property-modifiers property-modifier) ;
struct-declaration ::= attributes? struct-modifiers? "struct" identifier struct-interfaces? struct-body ";"? ;
property-declaration ::= attributes? property-modifiers? type member-name "{" accessor-declarations "}" ;
delegate-type ::= type-name ;
set-accessor-declaration ::= attributes? "set" accessor-body ;
iteration-statement ::= while-statement | do-statement | for-statement | foreach-statement ;
checked-expression ::= "checked" "(" expression ")" ;
floating-point-type ::= "float" | "double" ;
specific-catch-clause ::= "catch" "(" class-type identifier? ")" block ;
reference-type ::= class-type | interface-type | array-type | delegate-type ;
parameter-modifier ::= "ref" | "out" ;
expression-statement ::= statement-expression ";" ;
qualified-identifier ::= identifier | (qualified-identifier "." identifier) ;
namespace-member-declaration ::= namespace-declaration | type-declaration ;
interface-accessors ::= (attributes? "get" ";") | (attributes? "set" ";") | (attributes? "get" ";" attributes? "set" ";") | (attributes? "set" ";" attributes? "get" ";") ;
specific-catch-clauses ::= specific-catch-clause | (specific-catch-clauses specific-catch-clause) ;
conditional-and-expression ::= inclusive-or-expression | (conditional-and-expression "&&" inclusive-or-expression) ;
simple-type ::= numeric-type | "bool" ;
this-access ::= "this" ;
multiplicative-expression ::= unary-expression | (multiplicative-expression "*" unary-expression) | (multiplicative-expression "/" unary-expression) | (multiplicative-expression "%" unary-expression) ;
class-type ::= type-name | "object" | "string" ;
array-initializer ::= ("{" variable-initializer-list? "}") | ("{" variable-initializer-list "," "}") ;
selection-statement ::= if-statement | switch-statement ;
for-statement ::= "for" "(" for-initializer? ";" for-condition? ";" for-iterator? ")" embedded-statement ;
constructor-modifiers ::= constructor-modifier | (constructor-modifiers constructor-modifier) ;
field-modifiers ::= field-modifier | (field-modifiers field-modifier) ;
accessor-body ::= block | ";" ;
class-modifiers ::= class-modifier | (class-modifiers class-modifier) ;
type-declaration ::= class-declaration | struct-declaration | interface-declaration | enum-declaration | delegate-declaration ;
using-statement ::= "using" "(" resource-acquisition ")" embedded-statement ;
attribute-arguments ::= ("(" positional-argument-list? ")") | ("(" positional-argument-list "," named-argument-list ")") | ("(" named-argument-list ")") ;
constant-expression ::= expression ;
rank-specifier ::= "[" dim-separators? "]" ;
boolean-expression ::= expression ;
unary-operator-declarator ::= type "operator" overloadable-unary-operator "(" type identifier ")" ;
overloadable-unary-operator ::= "+" | "-" | "!" | "~" | "++" | "--" | "true" | "false" ;
positional-argument ::= attribute-argument-expression ;
statement-expression-list ::= statement-expression | (statement-expression-list "," statement-expression) ;
element-access ::= primary-no-array-creation-expression "[" expression-list "]" ;
typeof-expression ::= ("typeof" "(" type ")") | ("typeof" "(" "void" ")") ;
struct-interfaces ::= ":" interface-type-list ;
unchecked-statement ::= "unchecked" block ;
resource-acquisition ::= local-variable-declaration | expression ;
and-expression ::= equality-expression | (and-expression "&" equality-expression) ;
interface-type ::= type-name ;
compilation-unit ::= using-directives? global-attributes? namespace-member-declarations? ;
lock-statement ::= "lock" "(" expression ")" embedded-statement ;
switch-section ::= switch-labels statement-list ;
equality-expression ::= relational-expression | (equality-expression "==" relational-expression) | (equality-expression "!=" relational-expression) ;
static-constructor-modifiers ::= ("extern"? "static") | ("static" "extern"?) ;
constructor-modifier ::= "public" | "protected" | "internal" | "private" | "extern" ;
field-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "readonly" | "volatile" ;
parenthesized-expression ::= "(" expression ")" ;
throw-statement ::= "throw" expression? ";" ;
using-directive ::= using-alias-directive | using-namespace-directive ;
method-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
primary-expression ::= array-creation-expression | primary-no-array-creation-expression ;
attribute-sections ::= attribute-section | (attribute-sections attribute-section) ;
conditional-expression ::= conditional-or-expression | (conditional-or-expression "?" expression ":" expression) ;
type-name ::= namespace-or-type-name ;
class-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | destructor-declaration | static-constructor-declaration | type-declaration ;
statement-list ::= statement | (statement-list statement) ;
variable-reference ::= expression ;
additive-expression ::= multiplicative-expression | (additive-expression "+" multiplicative-expression) | (additive-expression "-" multiplicative-expression) ;
overloadable-binary-operator ::= "+" | "-" | "*" | "/" | "%" | "&" | "|" | "^" | "<<" | ">>" | "==" | "!=" | ">" | "<" | ">=" | "<=" ;
parameter-array ::= attributes? "params" array-type identifier ;
delegate-modifiers ::= delegate-modifier | (delegate-modifiers delegate-modifier) ;
interface-event-declaration ::= attributes "new"? "event" type identifier ";" ;
local-variable-initializer ::= expression | array-initializer ;
delegate-declaration ::= attributes? delegate-modifiers? "delegate" type identifier "(" formal-parameter-list? ")" ";" ;
struct-type ::= type-name | simple-type ;
attribute-list ::= attribute | (attribute-list "," attribute) ;
non-array-type ::= type ;
array-type ::= non-array-type rank-specifiers ;
binary-operator-declarator ::= type "operator" overloadable-binary-operator "(" type identifier "," type identifier ")" ;
indexer-modifiers ::= indexer-modifier | (indexer-modifiers indexer-modifier) ;
operator-body ::= block | ";" ;
constructor-declaration ::= attributes? constructor-modifiers? constructor-declarator constructor-body ;
field-declaration ::= attributes? field-modifiers? type variable-declarators ";" ;
enum-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
variable-declarator ::= identifier | (identifier "=" variable-initializer) ;
break-statement ::= "break" ";" ;
delegate-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
post-decrement-expression ::= primary-expression "--" ;
enum-base ::= ":" integral-type ;
attribute-name ::= type-name ;
switch-label ::= ("case" constant-expression ":") | ("default" ":") ;
named-argument-list ::= named-argument | (named-argument-list "," named-argument) ;
namespace-member-declarations ::= namespace-member-declaration | (namespace-member-declarations namespace-member-declaration) ;
interface-indexer-declaration ::= attributes "new"? type "this" "[" formal-parameter-list "]" "{" interface-accessors "}" ;
for-condition ::= boolean-expression ;
switch-statement ::= "switch" "(" expression ")" switch-block ;
value-type ::= struct-type | enum-type ;
static-constructor-body ::= block | ";" ;
enum-member-declaration ::= (attributes? identifier) | (attributes? identifier "=" constant-expression) ;
return-statement ::= "return" expression? ";" ;
variable-initializer ::= expression | array-initializer ;
method-body ::= block | ";" ;
event-accessor-declarations ::= (add-accessor-declaration remove-accessor-declaration) | (remove-accessor-declaration add-accessor-declaration) ;
get-accessor-declaration ::= attributes? "get" accessor-body ;
global-attribute-section ::= ("[" global-attribute-target-specifier attribute-list "]") | ("[" global-attribute-target-specifier attribute-list "," "]") ;
event-modifiers ::= event-modifier | (event-modifiers event-modifier) ;
namespace-declaration ::= "namespace" qualified-identifier namespace-body ";"? ;
class-base ::= (":" class-type) | (":" interface-type-list) | (":" class-type "," interface-type-list) ;
namespace-or-type-name ::= identifier | (namespace-or-type-name "." identifier) ;
--------------------cs::csharp-iso-23270-2006.bgf--------------------
accessor-declarations ::= (get-accessor-declaration set-accessor-declaration?) | (set-accessor-declaration get-accessor-declaration?) ;
delegate-creation-expression ::= "new" delegate-type "(" expression ")" ;
global-attribute-target-specifier ::= global-attribute-target ":" ;
constant-declarator ::= identifier "=" constant-expression ;
numeric-type ::= integral-type | floating-point-type | "decimal" ;
interface-member-declarations ::= interface-member-declaration | (interface-member-declarations interface-member-declaration) ;
member-access ::= (primary-expression "." identifier type-argument-list?) | (predefined-type "." identifier type-argument-list?) | (qualified-alias-member "." identifier type-argument-list?) ;
unbound-type-name ::= (identifier generic-dimension-specifier?) | (identifier "::" identifier generic-dimension-specifier?) | (unbound-type-name "." identifier generic-dimension-specifier?) ;
unary-expression ::= primary-expression | ("+" unary-expression) | ("-" unary-expression) | ("!" unary-expression) | ("~" unary-expression) | pre-increment-expression | pre-decrement-expression | cast-expression ;
invocation-expression ::= primary-expression "(" argument-list? ")" ;
local-constant-declaration ::= "const" type constant-declarators ;
type-argument ::= type ;
embedded-statement ::= block | empty-statement | expression-statement | selection-statement | iteration-statement | jump-statement | try-statement | checked-statement | unchecked-statement | lock-statement | using-statement | yield-statement ;
cast-expression ::= "(" type ")" unary-expression ;
indexer-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
constructor-declarator ::= identifier "(" formal-parameter-list? ")" constructor-initializer? ;
fixed-parameters ::= fixed-parameter | (fixed-parameters "," fixed-parameter) ;
attribute-target ::= identifier | keyword ;
formal-parameter-list ::= fixed-parameters | (fixed-parameters "," parameter-array) | parameter-array ;
operator-modifier ::= "public" | "static" | "extern" ;
base-access ::= ("base" "." identifier type-argument-list?) | ("base" "[" expression-list "]") ;
member-name ::= identifier | (interface-type "." identifier) ;
for-initializer ::= local-variable-declaration | statement-expression-list ;
try-statement ::= ("try" block catch-clauses) | ("try" block catch-clauses? finally-clause) ;
interface-member-declaration ::= interface-method-declaration | interface-property-declaration | interface-event-declaration | interface-indexer-declaration ;
variable-initializer-list ::= variable-initializer | (variable-initializer-list "," variable-initializer) ;
while-statement ::= "while" "(" boolean-expression ")" embedded-statement ;
exclusive-or-expression ::= and-expression | (exclusive-or-expression "^" and-expression) ;
catch-clauses ::= specific-catch-clauses | (specific-catch-clauses? general-catch-clause) ;
operator-declaration ::= attributes? operator-modifiers operator-declarator operator-body ;
struct-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
property-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
continue-statement ::= "continue" ";" ;
using-alias-directive ::= "using" identifier "=" namespace-or-type-name ";" ;
static-constructor-declaration ::= attributes? static-constructor-modifiers identifier "(" ")" static-constructor-body ;
simple-name ::= identifier type-argument-list? ;
conversion-operator-declarator ::= ("implicit" "operator" type "(" type identifier ")") | ("explicit" "operator" type "(" type identifier ")") ;
global-attributes ::= global-attribute-sections ;
enum-member-declarations ::= enum-member-declaration | (enum-member-declarations "," enum-member-declaration) ;
indexer-declarator ::= (type "this" "[" formal-parameter-list "]") | (type interface-type "." "this" "[" formal-parameter-list "]") ;
struct-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | static-constructor-declaration | type-declaration ;
type-parameter-constraints ::= primary-constraint | secondary-constraints | constructor-constraint | (primary-constraint "," secondary-constraints) | (primary-constraint "," constructor-constraint) | (secondary-constraints "," constructor-constraint) | (primary-constraint "," secondary-constraints "," constructor-constraint) ;
interface-type-list ::= interface-type | (interface-type-list "," interface-type) ;
namespace-name ::= namespace-or-type-name ;
conditional-or-expression ::= conditional-and-expression | (conditional-or-expression "||" conditional-and-expression) ;
finalizer-body ::= block | ";" ;
constant-declarators ::= constant-declarator | (constant-declarators "," constant-declarator) ;
return-type ::= type | "void" ;
statement-expression ::= invocation-expression | object-creation-expression | assignment | post-increment-expression | post-decrement-expression | pre-increment-expression | pre-decrement-expression ;
interface-body ::= "{" interface-member-declarations? "}" ;
local-variable-declarators ::= local-variable-declarator | (local-variable-declarators "," local-variable-declarator) ;
primary-no-array-creation-expression ::= literal | simple-name | parenthesized-expression | member-access | invocation-expression | element-access | this-access | base-access | post-increment-expression | post-decrement-expression | object-creation-expression | delegate-creation-expression | typeof-expression | checked-expression | unchecked-expression | default-value-expression | anonymous-method-expression ;
argument-list ::= argument | (argument-list "," argument) ;
indexer-declaration ::= attributes? indexer-modifiers? indexer-declarator "{" accessor-declarations "}" ;
foreach-statement ::= "foreach" "(" type identifier "in" expression ")" embedded-statement ;
assignment-operator ::= "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | right-shift-assignment ;
anonymous-method-expression ::= "delegate" anonymous-method-signature? block ;
interface-method-declaration ::= attributes? "new"? return-type identifier type-parameter-list? "(" formal-parameter-list? ")" type-parameter-constraints-clauses? ";" ;
accessor-modifier ::= "protected" | "internal" | "private" | ("protected" "internal") | ("internal" "protected") ;
null-coalescing-expression ::= conditional-or-expression | (conditional-or-expression "??" null-coalescing-expression) ;
interface-property-declaration ::= attributes? "new"? type identifier "{" interface-accessors "}" ;
constructor-body ::= block | ";" ;
using-namespace-directive ::= "using" namespace-name ";" ;
constant-modifiers ::= constant-modifier | (constant-modifiers constant-modifier) ;
attribute-target-specifier ::= attribute-target ":" ;
constructor-constraint ::= "new" "(" ")" ;
constructor-initializer ::= (":" "base" "(" argument-list? ")") | (":" "this" "(" argument-list? ")") ;
class-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "abstract" | "sealed" | "static" ;
general-catch-clause ::= "catch" block ;
goto-statement ::= ("goto" identifier ";") | ("goto" "case" constant-expression ";") | ("goto" "default" ";") ;
property-declaration ::= attributes? property-modifiers? type member-name "{" accessor-declarations "}" ;
struct-declaration ::= attributes? struct-modifiers? "partial"? "struct" identifier type-parameter-list? struct-interfaces? type-parameter-constraints-clauses? struct-body ";"? ;
set-accessor-declaration ::= attributes? accessor-modifier? "set" accessor-body ;
floating-point-type ::= "float" | "double" ;
specific-catch-clause ::= "catch" "(" class-type identifier? ")" block ;
interface-accessors ::= (attributes? "get" ";") | (attributes? "set" ";") | (attributes? "get" ";" attributes? "set" ";") | (attributes? "set" ";" attributes? "get" ";") ;
this-access ::= "this" ;
array-initializer ::= ("{" variable-initializer-list? "}") | ("{" variable-initializer-list "," "}") ;
for-statement ::= "for" "(" for-initializer? ";" for-condition? ";" for-iterator? ")" embedded-statement ;
field-modifiers ::= field-modifier | (field-modifiers field-modifier) ;
accessor-body ::= block | ";" ;
type-declaration ::= class-declaration | struct-declaration | interface-declaration | enum-declaration | delegate-declaration ;
using-statement ::= "using" "(" resource-acquisition ")" embedded-statement ;
attribute-arguments ::= ("(" positional-argument-list? ")") | ("(" positional-argument-list "," named-argument-list ")") | ("(" named-argument-list ")") ;
secondary-constraints ::= interface-type | type-parameter | (secondary-constraints "," interface-type) | (secondary-constraints "," type-parameter) ;
boolean-expression ::= expression ;
rank-specifier ::= "[" dim-separators? "]" ;
unary-operator-declarator ::= type "operator" overloadable-unary-operator "(" type identifier ")" ;
positional-argument ::= attribute-argument-expression ;
element-access ::= primary-no-array-creation-expression "[" expression-list "]" ;
typeof-expression ::= ("typeof" "(" type ")") | ("typeof" "(" unbound-type-name ")") | ("typeof" "(" "void" ")") ;
struct-interfaces ::= ":" interface-type-list ;
unchecked-statement ::= "unchecked" block ;
anonymous-method-parameter-list ::= anonymous-method-parameter | (anonymous-method-parameter-list "," anonymous-method-parameter) ;
interface-type ::= type-name ;
compilation-unit ::= extern-alias-directives? using-directives? global-attributes? namespace-member-declarations? ;
lock-statement ::= "lock" "(" expression ")" embedded-statement ;
switch-section ::= switch-labels statement-list ;
equality-expression ::= relational-expression | (equality-expression "==" relational-expression) | (equality-expression "!=" relational-expression) ;
constructor-modifier ::= "public" | "protected" | "internal" | "private" | "extern" ;
parenthesized-expression ::= "(" expression ")" ;
throw-statement ::= "throw" expression? ";" ;
primary-expression ::= array-creation-expression | primary-no-array-creation-expression ;
finalizer-declaration ::= attributes? "extern"? "~" identifier "(" ")" finalizer-body ;
type-name ::= namespace-or-type-name ;
type-parameter-constraints-clause ::= "where" type-parameter ":" type-parameter-constraints ;
class-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | finalizer-declaration | static-constructor-declaration | type-declaration ;
variable-reference ::= expression ;
additive-expression ::= multiplicative-expression | (additive-expression "+" multiplicative-expression) | (additive-expression "-" multiplicative-expression) ;
overloadable-binary-operator ::= "+" | "-" | "*" | "/" | "%" | "&" | "|" | "^" | "<<" | right-shift | "==" | "!=" | ">" | "<" | ">=" | "<=" ;
type-parameter-list ::= "<" type-parameters ">" ;
parameter-array ::= attributes? "params" array-type identifier ;
interface-event-declaration ::= attributes? "new"? "event" type identifier ";" ;
delegate-declaration ::= attributes? delegate-modifiers? "delegate" return-type identifier type-parameter-list? "(" formal-parameter-list? ")" type-parameter-constraints-clauses? ";" ;
attribute-list ::= attribute | (attribute-list "," attribute) ;
yield-statement ::= ("yield" "return" expression ";") | ("yield" "break" ";") ;
non-array-type ::= value-type | class-type | interface-type | delegate-type | type-parameter ;
indexer-modifiers ::= indexer-modifier | (indexer-modifiers indexer-modifier) ;
binary-operator-declarator ::= type "operator" overloadable-binary-operator "(" type identifier "," type identifier ")" ;
operator-body ::= block | ";" ;
field-declaration ::= attributes? field-modifiers? type variable-declarators ";" ;
generic-dimension-specifier ::= "<" commas? ">" ;
post-decrement-expression ::= primary-expression "--" ;
anonymous-method-parameter ::= parameter-modifier? type identifier ;
attribute-name ::= type-name ;
switch-label ::= ("case" constant-expression ":") | ("default" ":") ;
namespace-member-declarations ::= namespace-member-declaration | (namespace-member-declarations namespace-member-declaration) ;
interface-indexer-declaration ::= attributes? "new"? type "this" "[" formal-parameter-list "]" "{" interface-accessors "}" ;
for-condition ::= boolean-expression ;
static-constructor-body ::= block | ";" ;
enum-member-declaration ::= (attributes? identifier) | (attributes? identifier "=" constant-expression) ;
return-statement ::= "return" expression? ";" ;
variable-initializer ::= expression | array-initializer ;
method-body ::= block | ";" ;
event-accessor-declarations ::= (add-accessor-declaration remove-accessor-declaration) | (remove-accessor-declaration add-accessor-declaration) ;
get-accessor-declaration ::= attributes? accessor-modifier? "get" accessor-body ;
global-attribute-section ::= ("[" global-attribute-target-specifier attribute-list "]") | ("[" global-attribute-target-specifier attribute-list "," "]") ;
event-modifiers ::= event-modifier | (event-modifiers event-modifier) ;
namespace-or-type-name ::= (identifier type-argument-list?) | qualified-alias-member | (namespace-or-type-name "." identifier type-argument-list?) ;
non-nullable-value-type ::= enum-type | type-name | simple-type ;
relational-expression ::= shift-expression | (relational-expression "<" shift-expression) | (relational-expression ">" shift-expression) | (relational-expression "<=" shift-expression) | (relational-expression ">=" shift-expression) | (relational-expression "is" type) | (relational-expression "as" type) ;
pre-decrement-expression ::= "--" unary-expression ;
operator-declarator ::= unary-operator-declarator | binary-operator-declarator | conversion-operator-declarator ;
method-header ::= attributes? method-modifiers? return-type member-name type-parameter-list? "(" formal-parameter-list? ")" type-parameter-constraints-clauses? ;
finally-clause ::= "finally" block ;
attribute-argument-expression ::= expression ;
for-iterator ::= statement-expression-list ;
empty-statement ::= ";" ;
enum-body ::= ("{" enum-member-declarations? "}") | ("{" enum-member-declarations "," "}") ;
using-directives ::= using-directive | (using-directives using-directive) ;
interface-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
interface-modifiers ::= interface-modifier | (interface-modifiers interface-modifier) ;
interface-declaration ::= attributes? interface-modifiers? "partial"? "interface" identifier type-parameter-list? interface-base? type-parameter-constraints-clauses? interface-body ";"? ;
interface-base ::= ":" interface-type-list ;
extern-alias-directive ::= "extern" "alias" identifier ";" ;
constant-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
declaration-statement ::= (local-variable-declaration ";") | (local-constant-declaration ";") ;
class-body ::= "{" class-member-declarations? "}" ;
unchecked-expression ::= "unchecked" "(" expression ")" ;
type-parameter-constraints-clauses ::= type-parameter-constraints-clause | (type-parameter-constraints-clauses type-parameter-constraints-clause) ;
type-parameter ::= identifier ;
namespace-body ::= "{" extern-alias-directives? using-directives? namespace-member-declarations? "}" ;
array-creation-expression ::= ("new" non-array-type "[" expression-list "]" rank-specifiers? array-initializer?) | ("new" array-type array-initializer) ;
named-argument ::= identifier "=" attribute-argument-expression ;
constant-declaration ::= attributes? constant-modifiers? "const" type constant-declarators ";" ;
global-attribute-target ::= identifier | keyword ;
local-variable-declaration ::= type local-variable-declarators ;
checked-statement ::= "checked" block ;
event-declaration ::= (attributes? event-modifiers? "event" type variable-declarators ";") | (attributes? event-modifiers? "event" type member-name "{" event-accessor-declarations "}") ;
post-increment-expression ::= primary-expression "++" ;
shift-expression ::= additive-expression | (shift-expression "<<" additive-expression) | (shift-expression right-shift additive-expression) ;
local-variable-declarator ::= identifier | (identifier "=" local-variable-initializer) ;
if-statement ::= ("if" "(" boolean-expression ")" embedded-statement) | ("if" "(" boolean-expression ")" embedded-statement "else" embedded-statement) ;
integral-type ::= "sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong" | "char" ;
switch-labels ::= switch-label | (switch-labels switch-label) ;
object-creation-expression ::= "new" type "(" argument-list? ")" ;
class-member-declarations ::= class-member-declaration | (class-member-declarations class-member-declaration) ;
rank-specifiers ::= rank-specifier | (rank-specifiers rank-specifier) ;
positional-argument-list ::= positional-argument | (positional-argument-list "," positional-argument) ;
labeled-statement ::= identifier ":" statement ;
attribute-section ::= ("[" attribute-target-specifier? attribute-list "]") | ("[" attribute-target-specifier? attribute-list "," "]") ;
switch-block ::= "{" switch-sections? "}" ;
expression-list ::= expression | (expression-list "," expression) ;
enum-modifiers ::= enum-modifier | (enum-modifiers enum-modifier) ;
enum-declaration ::= attributes? enum-modifiers? "enum" identifier enum-base? enum-body ";"? ;
do-statement ::= "do" embedded-statement "while" "(" boolean-expression ")" ";" ;
event-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
global-attribute-sections ::= global-attribute-section | (global-attribute-sections global-attribute-section) ;
switch-sections ::= switch-section | (switch-sections switch-section) ;
class-declaration ::= attributes? class-modifiers? "partial"? "class" identifier type-parameter-list? class-base? type-parameter-constraints-clauses? class-body ";"? ;
inclusive-or-expression ::= exclusive-or-expression | (inclusive-or-expression "|" exclusive-or-expression) ;
predefined-type ::= "bool" | "byte" | "char" | "decimal" | "double" | "float" | "int" | "long" | "object" | "sbyte" | "short" | "string" | "uint" | "ulong" | "ushort" ;
add-accessor-declaration ::= attributes? "add" block ;
pre-increment-expression ::= "++" unary-expression ;
remove-accessor-declaration ::= attributes? "remove" block ;
struct-body ::= "{" struct-member-declarations? "}" ;
struct-member-declarations ::= struct-member-declaration | (struct-member-declarations struct-member-declaration) ;
operator-modifiers ::= operator-modifier | (operator-modifiers operator-modifier) ;
dim-separators ::= "," | (dim-separators ",") ;
variable-declarators ::= variable-declarator | (variable-declarators "," variable-declarator) ;
fixed-parameter ::= attributes? parameter-modifier? type identifier ;
method-modifiers ::= method-modifier | (method-modifiers method-modifier) ;
jump-statement ::= break-statement | continue-statement | goto-statement | return-statement | throw-statement ;
method-declaration ::= method-header method-body ;
primary-constraint ::= class-type | "class" | "struct" ;
enum-type ::= type-name ;
struct-modifiers ::= struct-modifier | (struct-modifiers struct-modifier) ;
property-modifiers ::= property-modifier | (property-modifiers property-modifier) ;
type-arguments ::= type-argument | (type-arguments "," type-argument) ;
delegate-type ::= type-name ;
default-value-expression ::= "default" "(" type ")" ;
iteration-statement ::= while-statement | do-statement | for-statement | foreach-statement ;
checked-expression ::= "checked" "(" expression ")" ;
reference-type ::= class-type | interface-type | array-type | delegate-type ;
parameter-modifier ::= "ref" | "out" ;
expression-statement ::= statement-expression ";" ;
qualified-identifier ::= identifier | (qualified-identifier "." identifier) ;
namespace-member-declaration ::= namespace-declaration | type-declaration ;
specific-catch-clauses ::= specific-catch-clause | (specific-catch-clauses specific-catch-clause) ;
conditional-and-expression ::= inclusive-or-expression | (conditional-and-expression "&&" inclusive-or-expression) ;
simple-type ::= numeric-type | "bool" ;
multiplicative-expression ::= unary-expression | (multiplicative-expression "*" unary-expression) | (multiplicative-expression "/" unary-expression) | (multiplicative-expression "%" unary-expression) ;
class-type ::= type-name | "object" | "string" ;
selection-statement ::= if-statement | switch-statement ;
constructor-modifiers ::= constructor-modifier | (constructor-modifiers constructor-modifier) ;
class-modifiers ::= class-modifier | (class-modifiers class-modifier) ;
constant-expression ::= expression ;
type-parameters ::= (attributes? type-parameter) | (type-parameters "," attributes? type-parameter) ;
type-argument-list ::= "<" type-arguments ">" ;
overloadable-unary-operator ::= "+" | "-" | "!" | "~" | "++" | "--" | "true" | "false" ;
statement-expression-list ::= statement-expression | (statement-expression-list "," statement-expression) ;
and-expression ::= equality-expression | (and-expression "&" equality-expression) ;
resource-acquisition ::= local-variable-declaration | expression ;
static-constructor-modifiers ::= ("extern"? "static") | ("static" "extern"?) ;
field-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "readonly" | "volatile" ;
qualified-alias-member ::= identifier "::" identifier type-argument-list? ;
using-directive ::= using-alias-directive | using-namespace-directive ;
method-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
attribute-sections ::= attribute-section | (attribute-sections attribute-section) ;
conditional-expression ::= null-coalescing-expression | (null-coalescing-expression "?" expression ":" expression) ;
statement-list ::= statement | (statement-list statement) ;
delegate-modifiers ::= delegate-modifier | (delegate-modifiers delegate-modifier) ;
local-variable-initializer ::= expression | array-initializer ;
struct-type ::= type-name | simple-type | nullable-type ;
array-type ::= non-array-type rank-specifiers ;
extern-alias-directives ::= extern-alias-directive | (extern-alias-directives extern-alias-directive) ;
anonymous-method-signature ::= "(" anonymous-method-parameter-list? ")" ;
constructor-declaration ::= attributes? constructor-modifiers? constructor-declarator constructor-body ;
nullable-type ::= non-nullable-value-type "?" ;
enum-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
variable-declarator ::= identifier | (identifier "=" variable-initializer) ;
break-statement ::= "break" ";" ;
delegate-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
enum-base ::= ":" integral-type ;
named-argument-list ::= named-argument | (named-argument-list "," named-argument) ;
switch-statement ::= "switch" "(" expression ")" switch-block ;
value-type ::= struct-type | enum-type ;
namespace-declaration ::= "namespace" qualified-identifier namespace-body ";"? ;
class-base ::= (":" class-type) | (":" interface-type-list) | (":" class-type "," interface-type-list) ;
--------------------cs::csharp-msft-ls-1.0.bgf--------------------
accessor-declarations ::= (get-accessor-declaration set-accessor-declaration?) | (set-accessor-declaration get-accessor-declaration?) ;
relational-expression ::= shift-expression | (relational-expression "<" shift-expression) | (relational-expression ">" shift-expression) | (relational-expression "<=" shift-expression) | (relational-expression ">=" shift-expression) | (relational-expression "is" type) | (relational-expression "as" type) ;
delegate-creation-expression ::= "new" delegate-type "(" expression ")" ;
global-attribute-target-specifier ::= global-attribute-target ":" ;
pre-decrement-expression ::= "--" unary-expression ;
operator-declarator ::= unary-operator-declarator | binary-operator-declarator | conversion-operator-declarator ;
constant-declarator ::= identifier "=" constant-expression ;
numeric-type ::= integral-type | floating-point-type | "decimal" ;
finally-clause ::= "finally" block ;
method-header ::= attributes? method-modifiers? return-type member-name "(" formal-parameter-list? ")" ;
interface-member-declarations ::= interface-member-declaration | (interface-member-declarations interface-member-declaration) ;
member-access ::= (primary-expression "." identifier) | (predefined-type "." identifier) ;
attribute-argument-expression ::= expression ;
destructor-body ::= block | ";" ;
unary-expression ::= primary-expression | ("+" unary-expression) | ("-" unary-expression) | ("!" unary-expression) | ("~" unary-expression) | pre-increment-expression | pre-decrement-expression | cast-expression ;
invocation-expression ::= primary-expression "(" argument-list? ")" ;
local-constant-declaration ::= "const" type constant-declarators ;
for-iterator ::= statement-expression-list ;
empty-statement ::= ";" ;
enum-body ::= ("{" enum-member-declarations? "}") | ("{" enum-member-declarations "," "}") ;
using-directives ::= using-directive | (using-directives using-directive) ;
embedded-statement ::= block | empty-statement | expression-statement | selection-statement | iteration-statement | jump-statement | try-statement | checked-statement | unchecked-statement | lock-statement | using-statement ;
interface-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
interface-modifiers ::= interface-modifier | (interface-modifiers interface-modifier) ;
interface-declaration ::= attributes? interface-modifiers? "interface" identifier interface-base? interface-body ";"? ;
cast-expression ::= "(" type ")" unary-expression ;
interface-base ::= ":" interface-type-list ;
indexer-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
constructor-declarator ::= identifier "(" formal-parameter-list? ")" constructor-initializer? ;
fixed-parameters ::= fixed-parameter | (fixed-parameters "," fixed-parameter) ;
attribute-target ::= "field" | "event" | "method" | "param" | "property" | "return" | type ;
operator-modifier ::= "public" | "static" | "extern" ;
formal-parameter-list ::= fixed-parameters | (fixed-parameters "," parameter-array) | parameter-array ;
constant-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
base-access ::= ("base" "." identifier) | ("base" "[" expression-list "]") ;
for-initializer ::= local-variable-declaration | statement-expression-list ;
member-name ::= identifier | (interface-type "." identifier) ;
try-statement ::= ("try" block catch-clauses) | ("try" block finally-clause) | ("try" block catch-clauses finally-clause) ;
declaration-statement ::= (local-variable-declaration ";") | (local-constant-declaration ";") ;
interface-member-declaration ::= interface-method-declaration | interface-property-declaration | interface-event-declaration | interface-indexer-declaration ;
variable-initializer-list ::= variable-initializer | (variable-initializer-list "," variable-initializer) ;
class-body ::= "{" class-member-declarations? "}" ;
unchecked-expression ::= "unchecked" "(" expression ")" ;
namespace-body ::= "{" using-directives? namespace-member-declarations? "}" ;
while-statement ::= "while" "(" boolean-expression ")" embedded-statement ;
exclusive-or-expression ::= and-expression | (exclusive-or-expression "^" and-expression) ;
catch-clauses ::= (specific-catch-clauses general-catch-clause?) | (specific-catch-clauses? general-catch-clause) ;
array-creation-expression ::= ("new" non-array-type "[" expression-list "]" rank-specifiers? array-initializer?) | ("new" array-type array-initializer) ;
operator-declaration ::= attributes? operator-modifiers operator-declarator operator-body ;
constant-declaration ::= attributes? constant-modifiers? "const" type constant-declarators ";" ;
named-argument ::= identifier "=" attribute-argument-expression ;
struct-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
property-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
global-attribute-target ::= "assembly" | "module" ;
local-variable-declaration ::= type local-variable-declarators ;
checked-statement ::= "checked" block ;
continue-statement ::= "continue" ";" ;
using-alias-directive ::= "using" identifier "=" namespace-or-type-name ";" ;
static-constructor-declaration ::= attributes? static-constructor-modifiers identifier "(" ")" static-constructor-body ;
event-declaration ::= (attributes? event-modifiers? "event" type variable-declarators ";") | (attributes? event-modifiers? "event" type member-name "{" event-accessor-declarations "}") ;
simple-name ::= identifier ;
conversion-operator-declarator ::= ("implicit" "operator" type "(" type identifier ")") | ("explicit" "operator" type "(" type identifier ")") ;
post-increment-expression ::= primary-expression "++" ;
shift-expression ::= additive-expression | (shift-expression "<<" additive-expression) | (shift-expression ">>" additive-expression) ;
global-attributes ::= global-attribute-sections ;
enum-member-declarations ::= enum-member-declaration | (enum-member-declarations "," enum-member-declaration) ;
local-variable-declarator ::= identifier | (identifier "=" local-variable-initializer) ;
struct-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | static-constructor-declaration | type-declaration ;
indexer-declarator ::= (type "this" "[" formal-parameter-list "]") | (type interface-type "." "this" "[" formal-parameter-list "]") ;
if-statement ::= ("if" "(" boolean-expression ")" embedded-statement) | ("if" "(" boolean-expression ")" embedded-statement "else" embedded-statement) ;
interface-type-list ::= interface-type | (interface-type-list "," interface-type) ;
namespace-name ::= namespace-or-type-name ;
integral-type ::= "sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong" | "char" ;
conditional-or-expression ::= conditional-and-expression | (conditional-or-expression "||" conditional-and-expression) ;
constant-declarators ::= constant-declarator | (constant-declarators "," constant-declarator) ;
switch-labels ::= switch-label | (switch-labels switch-label) ;
object-creation-expression ::= "new" type "(" argument-list? ")" ;
return-type ::= type | "void" ;
class-member-declarations ::= class-member-declaration | (class-member-declarations class-member-declaration) ;
interface-body ::= "{" interface-member-declarations? "}" ;
statement-expression ::= invocation-expression | object-creation-expression | assignment | post-increment-expression | post-decrement-expression | pre-increment-expression | pre-decrement-expression ;
rank-specifiers ::= rank-specifier | (rank-specifiers rank-specifier) ;
labeled-statement ::= identifier ":" statement ;
positional-argument-list ::= positional-argument | (positional-argument-list "," positional-argument) ;
switch-block ::= "{" switch-sections? "}" ;
attribute-section ::= ("[" attribute-target-specifier? attribute-list "]") | ("[" attribute-target-specifier? attribute-list "," "]") ;
local-variable-declarators ::= local-variable-declarator | (local-variable-declarators "," local-variable-declarator) ;
expression-list ::= expression | (expression-list "," expression) ;
primary-no-array-creation-expression ::= literal | simple-name | parenthesized-expression | member-access | invocation-expression | element-access | this-access | base-access | post-increment-expression | post-decrement-expression | object-creation-expression | delegate-creation-expression | typeof-expression | checked-expression | unchecked-expression ;
enum-modifiers ::= enum-modifier | (enum-modifiers enum-modifier) ;
enum-declaration ::= attributes? enum-modifiers? "enum" identifier enum-base? enum-body ";"? ;
argument-list ::= argument | (argument-list "," argument) ;
do-statement ::= "do" embedded-statement "while" "(" boolean-expression ")" ";" ;
indexer-declaration ::= attributes? indexer-modifiers? indexer-declarator "{" accessor-declarations "}" ;
foreach-statement ::= "foreach" "(" type identifier "in" expression ")" embedded-statement ;
event-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
global-attribute-sections ::= global-attribute-section | (global-attribute-sections global-attribute-section) ;
switch-sections ::= switch-section | (switch-sections switch-section) ;
destructor-declaration ::= attributes? "extern"? "~" identifier "(" ")" destructor-body ;
class-declaration ::= attributes? class-modifiers? "class" identifier class-base? class-body ";"? ;
assignment-operator ::= "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | ">>=" ;
interface-method-declaration ::= attributes? "new"? return-type identifier "(" formal-parameter-list? ")" ";" ;
predefined-type ::= "bool" | "byte" | "char" | "decimal" | "double" | "float" | "int" | "long" | "object" | "sbyte" | "short" | "string" | "uint" | "ulong" | "ushort" ;
inclusive-or-expression ::= exclusive-or-expression | (inclusive-or-expression "|" exclusive-or-expression) ;
add-accessor-declaration ::= attributes? "add" block ;
pre-increment-expression ::= "++" unary-expression ;
remove-accessor-declaration ::= attributes? "remove" block ;
struct-body ::= "{" struct-member-declarations? "}" ;
interface-property-declaration ::= attributes? "new"? type identifier "{" interface-accessors "}" ;
constructor-body ::= block | ";" ;
struct-member-declarations ::= struct-member-declaration | (struct-member-declarations struct-member-declaration) ;
using-namespace-directive ::= "using" namespace-name ";" ;
operator-modifiers ::= operator-modifier | (operator-modifiers operator-modifier) ;
constant-modifiers ::= constant-modifier | (constant-modifiers constant-modifier) ;
attribute-target-specifier ::= attribute-target ":" ;
dim-separators ::= "," | (dim-separators ",") ;
variable-declarators ::= variable-declarator | (variable-declarators "," variable-declarator) ;
jump-statement ::= break-statement | continue-statement | goto-statement | return-statement | throw-statement ;
fixed-parameter ::= attributes? parameter-modifier? type identifier ;
method-modifiers ::= method-modifier | (method-modifiers method-modifier) ;
constructor-initializer ::= (":" "base" "(" argument-list? ")") | (":" "this" "(" argument-list? ")") ;
method-declaration ::= method-header method-body ;
class-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "abstract" | "sealed" ;
general-catch-clause ::= "catch" block ;
enum-type ::= type-name ;
goto-statement ::= ("goto" identifier ";") | ("goto" "case" constant-expression ";") | ("goto" "default" ";") ;
struct-modifiers ::= struct-modifier | (struct-modifiers struct-modifier) ;
property-modifiers ::= property-modifier | (property-modifiers property-modifier) ;
struct-declaration ::= attributes? struct-modifiers? "struct" identifier struct-interfaces? struct-body ";"? ;
property-declaration ::= attributes? property-modifiers? type member-name "{" accessor-declarations "}" ;
delegate-type ::= type-name ;
set-accessor-declaration ::= attributes? "set" accessor-body ;
iteration-statement ::= while-statement | do-statement | for-statement | foreach-statement ;
floating-point-type ::= "float" | "double" ;
checked-expression ::= "checked" "(" expression ")" ;
specific-catch-clause ::= "catch" "(" class-type identifier? ")" block ;
reference-type ::= class-type | interface-type | array-type | delegate-type ;
parameter-modifier ::= "ref" | "out" ;
qualified-identifier ::= identifier | (qualified-identifier "." identifier) ;
expression-statement ::= statement-expression ";" ;
namespace-member-declaration ::= namespace-declaration | type-declaration ;
interface-accessors ::= (attributes? "get" ";") | (attributes? "set" ";") | (attributes? "get" ";" attributes? "set" ";") | (attributes? "set" ";" attributes? "get" ";") ;
specific-catch-clauses ::= specific-catch-clause | (specific-catch-clauses specific-catch-clause) ;
conditional-and-expression ::= inclusive-or-expression | (conditional-and-expression "&&" inclusive-or-expression) ;
simple-type ::= numeric-type | "bool" ;
this-access ::= "this" ;
multiplicative-expression ::= unary-expression | (multiplicative-expression "*" unary-expression) | (multiplicative-expression "/" unary-expression) | (multiplicative-expression "%" unary-expression) ;
class-type ::= type-name | "object" | "string" ;
selection-statement ::= if-statement | switch-statement ;
array-initializer ::= ("{" variable-initializer-list? "}") | ("{" variable-initializer-list "," "}") ;
for-statement ::= "for" "(" for-initializer? ";" for-condition? ";" for-iterator? ")" embedded-statement ;
constructor-modifiers ::= constructor-modifier | (constructor-modifiers constructor-modifier) ;
field-modifiers ::= field-modifier | (field-modifiers field-modifier) ;
accessor-body ::= block | ";" ;
class-modifiers ::= class-modifier | (class-modifiers class-modifier) ;
type-declaration ::= class-declaration | struct-declaration | interface-declaration | enum-declaration | delegate-declaration ;
using-statement ::= "using" "(" resource-acquisition ")" embedded-statement ;
attribute-arguments ::= ("(" positional-argument-list? ")") | ("(" positional-argument-list "," named-argument-list ")") | ("(" named-argument-list ")") ;
constant-expression ::= expression ;
boolean-expression ::= expression ;
rank-specifier ::= "[" dim-separators? "]" ;
unary-operator-declarator ::= type "operator" overloadable-unary-operator "(" type identifier ")" ;
overloadable-unary-operator ::= "+" | "-" | "!" | "~" | "++" | "--" | "true" | "false" ;
positional-argument ::= attribute-argument-expression ;
statement-expression-list ::= statement-expression | (statement-expression-list "," statement-expression) ;
element-access ::= primary-no-array-creation-expression "[" expression-list "]" ;
typeof-expression ::= ("typeof" "(" type ")") | ("typeof" "(" "void" ")") ;
struct-interfaces ::= ":" interface-type-list ;
unchecked-statement ::= "unchecked" block ;
resource-acquisition ::= local-variable-declaration | expression ;
interface-type ::= type-name ;
and-expression ::= equality-expression | (and-expression "&" equality-expression) ;
compilation-unit ::= using-directives? global-attributes? namespace-member-declarations? ;
lock-statement ::= "lock" "(" expression ")" embedded-statement ;
switch-section ::= switch-labels statement-list ;
equality-expression ::= relational-expression | (equality-expression "==" relational-expression) | (equality-expression "!=" relational-expression) ;
static-constructor-modifiers ::= ("extern"? "static") | ("static" "extern"?) ;
constructor-modifier ::= "public" | "protected" | "internal" | "private" | "extern" ;
field-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "readonly" | "volatile" ;
parenthesized-expression ::= "(" expression ")" ;
throw-statement ::= "throw" expression? ";" ;
using-directive ::= using-alias-directive | using-namespace-directive ;
primary-expression ::= primary-no-array-creation-expression | array-creation-expression ;
method-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
attribute-sections ::= attribute-section | (attribute-sections attribute-section) ;
conditional-expression ::= conditional-or-expression | (conditional-or-expression "?" expression ":" expression) ;
type-name ::= namespace-or-type-name ;
statement-list ::= statement | (statement-list statement) ;
class-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | destructor-declaration | static-constructor-declaration | type-declaration ;
variable-reference ::= expression ;
additive-expression ::= multiplicative-expression | (additive-expression "+" multiplicative-expression) | (additive-expression "-" multiplicative-expression) ;
overloadable-binary-operator ::= "+" | "-" | "*" | "/" | "%" | "&" | "|" | "^" | "<<" | ">>" | "==" | "!=" | ">" | "<" | ">=" | "<=" ;
parameter-array ::= attributes? "params" array-type identifier ;
delegate-modifiers ::= delegate-modifier | (delegate-modifiers delegate-modifier) ;
interface-event-declaration ::= attributes? "new"? "event" type identifier ";" ;
local-variable-initializer ::= expression | array-initializer ;
delegate-declaration ::= (attributes? delegate-modifiers? "delegate" return-type identifier) | ("(" formal-parameter-list? ")" ";") ;
struct-type ::= type-name | simple-type ;
attribute-list ::= attribute | (attribute-list "," attribute) ;
binary-operator-declarator ::= type "operator" overloadable-binary-operator "(" type identifier "," type identifier ")" ;
indexer-modifiers ::= indexer-modifier | (indexer-modifiers indexer-modifier) ;
array-type ::= non-array-type rank-specifiers ;
non-array-type ::= type ;
operator-body ::= block | ";" ;
constructor-declaration ::= attributes? constructor-modifiers? constructor-declarator constructor-body ;
field-declaration ::= attributes? field-modifiers? type variable-declarators ";" ;
enum-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
variable-declarator ::= identifier | (identifier "=" variable-initializer) ;
break-statement ::= "break" ";" ;
delegate-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
post-decrement-expression ::= primary-expression "--" ;
enum-base ::= ":" integral-type ;
attribute-name ::= type-name ;
switch-label ::= ("case" constant-expression ":") | ("default" ":") ;
namespace-member-declarations ::= namespace-member-declaration | (namespace-member-declarations namespace-member-declaration) ;
named-argument-list ::= named-argument | (named-argument-list "," named-argument) ;
interface-indexer-declaration ::= attributes? "new"? type "this" "[" formal-parameter-list "]" "{" interface-accessors "}" ;
for-condition ::= boolean-expression ;
switch-statement ::= "switch" "(" expression ")" switch-block ;
value-type ::= struct-type | enum-type ;
static-constructor-body ::= block | ";" ;
enum-member-declaration ::= (attributes? identifier) | (attributes? identifier "=" constant-expression) ;
return-statement ::= "return" expression? ";" ;
variable-initializer ::= expression | array-initializer ;
method-body ::= block | ";" ;
event-accessor-declarations ::= (add-accessor-declaration remove-accessor-declaration) | (remove-accessor-declaration add-accessor-declaration) ;
get-accessor-declaration ::= attributes? "get" accessor-body ;
global-attribute-section ::= ("[" global-attribute-target-specifier attribute-list "]") | ("[" global-attribute-target-specifier attribute-list "," "]") ;
event-modifiers ::= event-modifier | (event-modifiers event-modifier) ;
namespace-declaration ::= "namespace" qualified-identifier namespace-body ";"? ;
namespace-or-type-name ::= identifier | (namespace-or-type-name "." identifier) ;
class-base ::= (":" class-type) | (":" interface-type-list) | (":" class-type "," interface-type-list) ;
--------------------cs::csharp-msft-ls-1.2.bgf--------------------
accessor-declarations ::= (get-accessor-declaration set-accessor-declaration?) | (set-accessor-declaration get-accessor-declaration?) ;
relational-expression ::= shift-expression | (relational-expression "<" shift-expression) | (relational-expression ">" shift-expression) | (relational-expression "<=" shift-expression) | (relational-expression ">=" shift-expression) | (relational-expression "is" type) | (relational-expression "as" type) ;
delegate-creation-expression ::= "new" delegate-type "(" expression ")" ;
global-attribute-target-specifier ::= global-attribute-target ":" ;
pre-decrement-expression ::= "--" unary-expression ;
operator-declarator ::= unary-operator-declarator | binary-operator-declarator | conversion-operator-declarator ;
constant-declarator ::= identifier "=" constant-expression ;
numeric-type ::= integral-type | floating-point-type | "decimal" ;
finally-clause ::= "finally" block ;
method-header ::= attributes? method-modifiers? return-type member-name "(" formal-parameter-list? ")" ;
interface-member-declarations ::= interface-member-declaration | (interface-member-declarations interface-member-declaration) ;
member-access ::= (primary-expression "." identifier) | (predefined-type "." identifier) ;
attribute-argument-expression ::= expression ;
destructor-body ::= block | ";" ;
unary-expression ::= primary-expression | ("+" unary-expression) | ("-" unary-expression) | ("!" unary-expression) | ("~" unary-expression) | pre-increment-expression | pre-decrement-expression | cast-expression ;
invocation-expression ::= primary-expression "(" argument-list? ")" ;
local-constant-declaration ::= "const" type constant-declarators ;
for-iterator ::= statement-expression-list ;
empty-statement ::= ";" ;
enum-body ::= ("{" enum-member-declarations? "}") | ("{" enum-member-declarations "," "}") ;
using-directives ::= using-directive | (using-directives using-directive) ;
embedded-statement ::= block | empty-statement | expression-statement | selection-statement | iteration-statement | jump-statement | try-statement | checked-statement | unchecked-statement | lock-statement | using-statement ;
interface-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
interface-modifiers ::= interface-modifier | (interface-modifiers interface-modifier) ;
interface-declaration ::= attributes? interface-modifiers? "interface" identifier interface-base? interface-body ";"? ;
cast-expression ::= "(" type ")" unary-expression ;
interface-base ::= ":" interface-type-list ;
indexer-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
constructor-declarator ::= identifier "(" formal-parameter-list? ")" constructor-initializer? ;
fixed-parameters ::= fixed-parameter | (fixed-parameters "," fixed-parameter) ;
attribute-target ::= "field" | "event" | "method" | "param" | "property" | "return" | type ;
operator-modifier ::= "public" | "static" | "extern" ;
formal-parameter-list ::= fixed-parameters | (fixed-parameters "," parameter-array) | parameter-array ;
constant-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
base-access ::= ("base" "." identifier) | ("base" "[" expression-list "]") ;
for-initializer ::= local-variable-declaration | statement-expression-list ;
member-name ::= identifier | (interface-type "." identifier) ;
try-statement ::= ("try" block catch-clauses) | ("try" block finally-clause) | ("try" block catch-clauses finally-clause) ;
declaration-statement ::= (local-variable-declaration ";") | (local-constant-declaration ";") ;
interface-member-declaration ::= interface-method-declaration | interface-property-declaration | interface-event-declaration | interface-indexer-declaration ;
variable-initializer-list ::= variable-initializer | (variable-initializer-list "," variable-initializer) ;
class-body ::= "{" class-member-declarations? "}" ;
unchecked-expression ::= "unchecked" "(" expression ")" ;
namespace-body ::= "{" using-directives? namespace-member-declarations? "}" ;
while-statement ::= "while" "(" boolean-expression ")" embedded-statement ;
exclusive-or-expression ::= and-expression | (exclusive-or-expression "^" and-expression) ;
catch-clauses ::= (specific-catch-clauses general-catch-clause?) | (specific-catch-clauses? general-catch-clause) ;
array-creation-expression ::= ("new" non-array-type "[" expression-list "]" rank-specifiers? array-initializer?) | ("new" array-type array-initializer) ;
operator-declaration ::= attributes? operator-modifiers operator-declarator operator-body ;
constant-declaration ::= attributes? constant-modifiers? "const" type constant-declarators ";" ;
named-argument ::= identifier "=" attribute-argument-expression ;
struct-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
property-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
global-attribute-target ::= "assembly" | "module" ;
local-variable-declaration ::= type local-variable-declarators ;
checked-statement ::= "checked" block ;
continue-statement ::= "continue" ";" ;
using-alias-directive ::= "using" identifier "=" namespace-or-type-name ";" ;
static-constructor-declaration ::= attributes? static-constructor-modifiers identifier "(" ")" static-constructor-body ;
event-declaration ::= (attributes? event-modifiers? "event" type variable-declarators ";") | (attributes? event-modifiers? "event" type member-name "{" event-accessor-declarations "}") ;
simple-name ::= identifier ;
conversion-operator-declarator ::= ("implicit" "operator" type "(" type identifier ")") | ("explicit" "operator" type "(" type identifier ")") ;
post-increment-expression ::= primary-expression "++" ;
shift-expression ::= additive-expression | (shift-expression "<<" additive-expression) | (shift-expression ">>" additive-expression) ;
global-attributes ::= global-attribute-sections ;
enum-member-declarations ::= enum-member-declaration | (enum-member-declarations "," enum-member-declaration) ;
local-variable-declarator ::= identifier | (identifier "=" local-variable-initializer) ;
struct-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | static-constructor-declaration | type-declaration ;
indexer-declarator ::= (type "this" "[" formal-parameter-list "]") | (type interface-type "." "this" "[" formal-parameter-list "]") ;
if-statement ::= ("if" "(" boolean-expression ")" embedded-statement) | ("if" "(" boolean-expression ")" embedded-statement "else" embedded-statement) ;
interface-type-list ::= interface-type | (interface-type-list "," interface-type) ;
namespace-name ::= namespace-or-type-name ;
integral-type ::= "sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong" | "char" ;
conditional-or-expression ::= conditional-and-expression | (conditional-or-expression "||" conditional-and-expression) ;
constant-declarators ::= constant-declarator | (constant-declarators "," constant-declarator) ;
switch-labels ::= switch-label | (switch-labels switch-label) ;
object-creation-expression ::= "new" type "(" argument-list? ")" ;
return-type ::= type | "void" ;
class-member-declarations ::= class-member-declaration | (class-member-declarations class-member-declaration) ;
interface-body ::= "{" interface-member-declarations? "}" ;
statement-expression ::= invocation-expression | object-creation-expression | assignment | post-increment-expression | post-decrement-expression | pre-increment-expression | pre-decrement-expression ;
rank-specifiers ::= rank-specifier | (rank-specifiers rank-specifier) ;
labeled-statement ::= identifier ":" statement ;
positional-argument-list ::= positional-argument | (positional-argument-list "," positional-argument) ;
switch-block ::= "{" switch-sections? "}" ;
attribute-section ::= ("[" attribute-target-specifier? attribute-list "]") | ("[" attribute-target-specifier? attribute-list "," "]") ;
local-variable-declarators ::= local-variable-declarator | (local-variable-declarators "," local-variable-declarator) ;
expression-list ::= expression | (expression-list "," expression) ;
primary-no-array-creation-expression ::= literal | simple-name | parenthesized-expression | member-access | invocation-expression | element-access | this-access | base-access | post-increment-expression | post-decrement-expression | object-creation-expression | delegate-creation-expression | typeof-expression | checked-expression | unchecked-expression ;
enum-modifiers ::= enum-modifier | (enum-modifiers enum-modifier) ;
enum-declaration ::= attributes? enum-modifiers? "enum" identifier enum-base? enum-body ";"? ;
argument-list ::= argument | (argument-list "," argument) ;
do-statement ::= "do" embedded-statement "while" "(" boolean-expression ")" ";" ;
indexer-declaration ::= attributes? indexer-modifiers? indexer-declarator "{" accessor-declarations "}" ;
foreach-statement ::= "foreach" "(" type identifier "in" expression ")" embedded-statement ;
event-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
global-attribute-sections ::= global-attribute-section | (global-attribute-sections global-attribute-section) ;
switch-sections ::= switch-section | (switch-sections switch-section) ;
destructor-declaration ::= attributes? "extern"? "~" identifier "(" ")" destructor-body ;
class-declaration ::= attributes? class-modifiers? "class" identifier class-base? class-body ";"? ;
assignment-operator ::= "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | ">>=" ;
interface-method-declaration ::= attributes? "new"? return-type identifier "(" formal-parameter-list? ")" ";" ;
predefined-type ::= "bool" | "byte" | "char" | "decimal" | "double" | "float" | "int" | "long" | "object" | "sbyte" | "short" | "string" | "uint" | "ulong" | "ushort" ;
inclusive-or-expression ::= exclusive-or-expression | (inclusive-or-expression "|" exclusive-or-expression) ;
add-accessor-declaration ::= attributes? "add" block ;
pre-increment-expression ::= "++" unary-expression ;
remove-accessor-declaration ::= attributes? "remove" block ;
struct-body ::= "{" struct-member-declarations? "}" ;
interface-property-declaration ::= attributes? "new"? type identifier "{" interface-accessors "}" ;
constructor-body ::= block | ";" ;
struct-member-declarations ::= struct-member-declaration | (struct-member-declarations struct-member-declaration) ;
using-namespace-directive ::= "using" namespace-name ";" ;
operator-modifiers ::= operator-modifier | (operator-modifiers operator-modifier) ;
constant-modifiers ::= constant-modifier | (constant-modifiers constant-modifier) ;
attribute-target-specifier ::= attribute-target ":" ;
dim-separators ::= "," | (dim-separators ",") ;
variable-declarators ::= variable-declarator | (variable-declarators "," variable-declarator) ;
jump-statement ::= break-statement | continue-statement | goto-statement | return-statement | throw-statement ;
fixed-parameter ::= attributes? parameter-modifier? type identifier ;
method-modifiers ::= method-modifier | (method-modifiers method-modifier) ;
constructor-initializer ::= (":" "base" "(" argument-list? ")") | (":" "this" "(" argument-list? ")") ;
method-declaration ::= method-header method-body ;
class-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "abstract" | "sealed" ;
general-catch-clause ::= "catch" block ;
enum-type ::= type-name ;
goto-statement ::= ("goto" identifier ";") | ("goto" "case" constant-expression ";") | ("goto" "default" ";") ;
struct-modifiers ::= struct-modifier | (struct-modifiers struct-modifier) ;
property-modifiers ::= property-modifier | (property-modifiers property-modifier) ;
struct-declaration ::= attributes? struct-modifiers? "struct" identifier struct-interfaces? struct-body ";"? ;
property-declaration ::= attributes? property-modifiers? type member-name "{" accessor-declarations "}" ;
delegate-type ::= type-name ;
set-accessor-declaration ::= attributes? "set" accessor-body ;
iteration-statement ::= while-statement | do-statement | for-statement | foreach-statement ;
floating-point-type ::= "float" | "double" ;
checked-expression ::= "checked" "(" expression ")" ;
specific-catch-clause ::= "catch" "(" class-type identifier? ")" block ;
reference-type ::= class-type | interface-type | array-type | delegate-type ;
parameter-modifier ::= "ref" | "out" ;
qualified-identifier ::= identifier | (qualified-identifier "." identifier) ;
expression-statement ::= statement-expression ";" ;
namespace-member-declaration ::= namespace-declaration | type-declaration ;
interface-accessors ::= (attributes? "get" ";") | (attributes? "set" ";") | (attributes? "get" ";" attributes? "set" ";") | (attributes? "set" ";" attributes? "get" ";") ;
specific-catch-clauses ::= specific-catch-clause | (specific-catch-clauses specific-catch-clause) ;
conditional-and-expression ::= inclusive-or-expression | (conditional-and-expression "&&" inclusive-or-expression) ;
simple-type ::= numeric-type | "bool" ;
this-access ::= "this" ;
multiplicative-expression ::= unary-expression | (multiplicative-expression "*" unary-expression) | (multiplicative-expression "/" unary-expression) | (multiplicative-expression "%" unary-expression) ;
class-type ::= type-name | "object" | "string" ;
selection-statement ::= if-statement | switch-statement ;
array-initializer ::= ("{" variable-initializer-list? "}") | ("{" variable-initializer-list "," "}") ;
for-statement ::= "for" "(" for-initializer? ";" for-condition? ";" for-iterator? ")" embedded-statement ;
constructor-modifiers ::= constructor-modifier | (constructor-modifiers constructor-modifier) ;
field-modifiers ::= field-modifier | (field-modifiers field-modifier) ;
accessor-body ::= block | ";" ;
class-modifiers ::= class-modifier | (class-modifiers class-modifier) ;
type-declaration ::= class-declaration | struct-declaration | interface-declaration | enum-declaration | delegate-declaration ;
using-statement ::= "using" "(" resource-acquisition ")" embedded-statement ;
attribute-arguments ::= ("(" positional-argument-list? ")") | ("(" positional-argument-list "," named-argument-list ")") | ("(" named-argument-list ")") ;
constant-expression ::= expression ;
boolean-expression ::= expression ;
rank-specifier ::= "[" dim-separators? "]" ;
unary-operator-declarator ::= type "operator" overloadable-unary-operator "(" type identifier ")" ;
overloadable-unary-operator ::= "+" | "-" | "!" | "~" | "++" | "--" | "true" | "false" ;
positional-argument ::= attribute-argument-expression ;
statement-expression-list ::= statement-expression | (statement-expression-list "," statement-expression) ;
element-access ::= primary-no-array-creation-expression "[" expression-list "]" ;
typeof-expression ::= ("typeof" "(" type ")") | ("typeof" "(" "void" ")") ;
struct-interfaces ::= ":" interface-type-list ;
unchecked-statement ::= "unchecked" block ;
resource-acquisition ::= local-variable-declaration | expression ;
interface-type ::= type-name ;
and-expression ::= equality-expression | (and-expression "&" equality-expression) ;
compilation-unit ::= using-directives? global-attributes? namespace-member-declarations? ;
lock-statement ::= "lock" "(" expression ")" embedded-statement ;
switch-section ::= switch-labels statement-list ;
equality-expression ::= relational-expression | (equality-expression "==" relational-expression) | (equality-expression "!=" relational-expression) ;
static-constructor-modifiers ::= ("extern"? "static") | ("static" "extern"?) ;
constructor-modifier ::= "public" | "protected" | "internal" | "private" | "extern" ;
field-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "readonly" | "volatile" ;
parenthesized-expression ::= "(" expression ")" ;
throw-statement ::= "throw" expression? ";" ;
using-directive ::= using-alias-directive | using-namespace-directive ;
primary-expression ::= primary-no-array-creation-expression | array-creation-expression ;
method-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
attribute-sections ::= attribute-section | (attribute-sections attribute-section) ;
conditional-expression ::= conditional-or-expression | (conditional-or-expression "?" expression ":" expression) ;
type-name ::= namespace-or-type-name ;
statement-list ::= statement | (statement-list statement) ;
class-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | destructor-declaration | static-constructor-declaration | type-declaration ;
variable-reference ::= expression ;
additive-expression ::= multiplicative-expression | (additive-expression "+" multiplicative-expression) | (additive-expression "-" multiplicative-expression) ;
overloadable-binary-operator ::= "+" | "-" | "*" | "/" | "%" | "&" | "|" | "^" | "<<" | ">>" | "==" | "!=" | ">" | "<" | ">=" | "<=" ;
parameter-array ::= attributes? "params" array-type identifier ;
delegate-modifiers ::= delegate-modifier | (delegate-modifiers delegate-modifier) ;
interface-event-declaration ::= attributes? "new"? "event" type identifier ";" ;
local-variable-initializer ::= expression | array-initializer ;
delegate-declaration ::= (attributes? delegate-modifiers? "delegate" return-type identifier) | ("(" formal-parameter-list? ")" ";") ;
struct-type ::= type-name | simple-type ;
attribute-list ::= attribute | (attribute-list "," attribute) ;
binary-operator-declarator ::= type "operator" overloadable-binary-operator "(" type identifier "," type identifier ")" ;
indexer-modifiers ::= indexer-modifier | (indexer-modifiers indexer-modifier) ;
array-type ::= non-array-type rank-specifiers ;
non-array-type ::= type ;
operator-body ::= block | ";" ;
constructor-declaration ::= attributes? constructor-modifiers? constructor-declarator constructor-body ;
field-declaration ::= attributes? field-modifiers? type variable-declarators ";" ;
enum-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
variable-declarator ::= identifier | (identifier "=" variable-initializer) ;
break-statement ::= "break" ";" ;
delegate-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
post-decrement-expression ::= primary-expression "--" ;
enum-base ::= ":" integral-type ;
attribute-name ::= type-name ;
switch-label ::= ("case" constant-expression ":") | ("default" ":") ;
namespace-member-declarations ::= namespace-member-declaration | (namespace-member-declarations namespace-member-declaration) ;
named-argument-list ::= named-argument | (named-argument-list "," named-argument) ;
interface-indexer-declaration ::= attributes? "new"? type "this" "[" formal-parameter-list "]" "{" interface-accessors "}" ;
for-condition ::= boolean-expression ;
switch-statement ::= "switch" "(" expression ")" switch-block ;
value-type ::= struct-type | enum-type ;
static-constructor-body ::= block | ";" ;
enum-member-declaration ::= (attributes? identifier) | (attributes? identifier "=" constant-expression) ;
return-statement ::= "return" expression? ";" ;
variable-initializer ::= expression | array-initializer ;
method-body ::= block | ";" ;
event-accessor-declarations ::= (add-accessor-declaration remove-accessor-declaration) | (remove-accessor-declaration add-accessor-declaration) ;
get-accessor-declaration ::= attributes? "get" accessor-body ;
global-attribute-section ::= ("[" global-attribute-target-specifier attribute-list "]") | ("[" global-attribute-target-specifier attribute-list "," "]") ;
event-modifiers ::= event-modifier | (event-modifiers event-modifier) ;
namespace-declaration ::= "namespace" qualified-identifier namespace-body ";"? ;
namespace-or-type-name ::= identifier | (namespace-or-type-name "." identifier) ;
class-base ::= (":" class-type) | (":" interface-type-list) | (":" class-type "," interface-type-list) ;
--------------------cs::csharp-msft-ls-3.0.bgf--------------------
accessor-declarations ::= (get-accessor-declaration set-accessor-declaration?) | (set-accessor-declaration get-accessor-declaration?) ;
delegate-creation-expression ::= "new" delegate-type "(" expression ")" ;
global-attribute-target-specifier ::= global-attribute-target ":" ;
constant-declarator ::= identifier "=" constant-expression ;
numeric-type ::= integral-type | floating-point-type | "decimal" ;
interface-member-declarations ::= interface-member-declaration | (interface-member-declarations interface-member-declaration) ;
member-access ::= (primary-expression "." identifier type-argument-list?) | (predefined-type "." identifier type-argument-list?) | (qualified-alias-member "." identifier) ;
unbound-type-name ::= (identifier generic-dimension-specifier?) | (identifier "::" identifier generic-dimension-specifier?) | (unbound-type-name "." identifier generic-dimension-specifier?) ;
unary-expression ::= primary-expression | ("+" unary-expression) | ("-" unary-expression) | ("!" unary-expression) | ("~" unary-expression) | pre-increment-expression | pre-decrement-expression | cast-expression ;
invocation-expression ::= primary-expression "(" argument-list? ")" ;
local-constant-declaration ::= "const" type constant-declarators ;
type-argument ::= type ;
embedded-statement ::= block | empty-statement | expression-statement | selection-statement | iteration-statement | jump-statement | try-statement | checked-statement | unchecked-statement | lock-statement | using-statement | yield-statement ;
cast-expression ::= "(" type ")" unary-expression ;
indexer-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
constructor-declarator ::= identifier "(" formal-parameter-list? ")" constructor-initializer? ;
fixed-parameters ::= fixed-parameter | (fixed-parameters "," fixed-parameter) ;
attribute-target ::= "field" | "event" | "method" | "param" | "property" | "return" | type ;
formal-parameter-list ::= fixed-parameters | (fixed-parameters "," parameter-array) | parameter-array ;
operator-modifier ::= "public" | "static" | "extern" ;
base-access ::= ("base" "." identifier) | ("base" "[" expression-list "]") ;
member-name ::= identifier | (interface-type "." identifier) ;
for-initializer ::= local-variable-declaration | statement-expression-list ;
try-statement ::= ("try" block catch-clauses) | ("try" block finally-clause) | ("try" block catch-clauses finally-clause) ;
interface-member-declaration ::= interface-method-declaration | interface-property-declaration | interface-event-declaration | interface-indexer-declaration ;
variable-initializer-list ::= variable-initializer | (variable-initializer-list "," variable-initializer) ;
while-statement ::= "while" "(" boolean-expression ")" embedded-statement ;
exclusive-or-expression ::= and-expression | (exclusive-or-expression "^" and-expression) ;
catch-clauses ::= (specific-catch-clauses general-catch-clause?) | (specific-catch-clauses? general-catch-clause) ;
operator-declaration ::= attributes? operator-modifiers operator-declarator operator-body ;
struct-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
property-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
continue-statement ::= "continue" ";" ;
using-alias-directive ::= "using" identifier "=" namespace-or-type-name ";" ;
static-constructor-declaration ::= attributes? static-constructor-modifiers identifier "(" ")" static-constructor-body ;
simple-name ::= identifier type-argument-list? ;
conversion-operator-declarator ::= ("implicit" "operator" type "(" type identifier ")") | ("explicit" "operator" type "(" type identifier ")") ;
global-attributes ::= global-attribute-sections ;
enum-member-declarations ::= enum-member-declaration | (enum-member-declarations "," enum-member-declaration) ;
struct-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | static-constructor-declaration | type-declaration ;
type-parameter-constraints ::= primary-constraint | secondary-constraints | constructor-constraint | (primary-constraint "," secondary-constraints) | (primary-constraint "," constructor-constraint) | (secondary-constraints "," constructor-constraint) | (primary-constraint "," secondary-constraints "," constructor-constraint) ;
indexer-declarator ::= (type "this" "[" formal-parameter-list "]") | (type interface-type "." "this" "[" formal-parameter-list "]") ;
interface-type-list ::= interface-type | (interface-type-list "," interface-type) ;
namespace-name ::= namespace-or-type-name ;
conditional-or-expression ::= conditional-and-expression | (conditional-or-expression "||" conditional-and-expression) ;
constant-declarators ::= constant-declarator | (constant-declarators "," constant-declarator) ;
return-type ::= type | "void" ;
interface-body ::= "{" interface-member-declarations? "}" ;
statement-expression ::= invocation-expression | object-creation-expression | assignment | post-increment-expression | post-decrement-expression | pre-increment-expression | pre-decrement-expression ;
local-variable-declarators ::= local-variable-declarator | (local-variable-declarators "," local-variable-declarator) ;
primary-no-array-creation-expression ::= literal | simple-name | parenthesized-expression | member-access | invocation-expression | element-access | this-access | base-access | post-increment-expression | post-decrement-expression | object-creation-expression | delegate-creation-expression | anonymous-object-creation-expression | typeof-expression | checked-expression | unchecked-expression | default-value-expression | anonymous-method-expression ;
argument-list ::= argument | (argument-list "," argument) ;
indexer-declaration ::= attributes? indexer-modifiers? indexer-declarator "{" accessor-declarations "}" ;
foreach-statement ::= "foreach" "(" local-variable-type identifier "in" expression ")" embedded-statement ;
destructor-declaration ::= attributes? "extern"? "~" identifier "(" ")" destructor-body ;
assignment-operator ::= "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | right-shift-assignment ;
anonymous-method-expression ::= "delegate" explicit-anonymous-function-signature? block ;
interface-method-declaration ::= (attributes? "new"? return-type identifier type-parameter-list) | ("(" formal-parameter-list? ")" type-parameter-constraints-clauses? ";") ;
accessor-modifier ::= "protected" | "internal" | "private" | ("protected" "internal") | ("internal" "protected") ;
null-coalescing-expression ::= conditional-or-expression | (conditional-or-expression "??" null-coalescing-expression) ;
interface-property-declaration ::= attributes? "new"? type identifier "{" interface-accessors "}" ;
constructor-body ::= block | ";" ;
using-namespace-directive ::= "using" namespace-name ";" ;
attribute-target-specifier ::= attribute-target ":" ;
constant-modifiers ::= constant-modifier | (constant-modifiers constant-modifier) ;
right-shift ::= ">>" ;
element-initializer ::= non-assignment-expression | ("{" expression-list "}") ;
constructor-constraint ::= "new" "(" ")" ;
constructor-initializer ::= (":" "base" "(" argument-list? ")") | (":" "this" "(" argument-list? ")") ;
implicit-anonymous-function-parameter-list ::= implicit-anonymous-function-parameter | (implicit-anonymous-function-parameter-list "," implicit-anonymous-function-parameter) ;
class-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "abstract" | "sealed" | "static" ;
query-body ::= query-body-clauses? select-or-group-clause query-continuation? ;
member-declarator-list ::= member-declarator | (member-declarator-list "," member-declarator) ;
general-catch-clause ::= "catch" block ;
goto-statement ::= ("goto" identifier ";") | ("goto" "case" constant-expression ";") | ("goto" "default" ";") ;
struct-declaration ::= (attributes? struct-modifiers? "partial"? "struct" identifier type-parameter-list?) | (struct-interfaces? type-parameter-constraints-clauses? struct-body ";"?) ;
property-declaration ::= attributes? property-modifiers? type member-name "{" accessor-declarations "}" ;
set-accessor-declaration ::= attributes? accessor-modifier? "set" accessor-body ;
floating-point-type ::= "float" | "double" ;
member-initializer-list ::= member-initializer | (member-initializer-list "," member-initializer) ;
specific-catch-clause ::= "catch" "(" class-type identifier? ")" block ;
interface-accessors ::= (attributes? "get" ";") | (attributes? "set" ";") | (attributes? "get" ";" attributes? "set" ";") | (attributes? "set" ";" attributes? "get" ";") ;
this-access ::= "this" ;
join-clause ::= "join" type? identifier "in" expression "on" expression "equals" expression ;
array-initializer ::= ("{" variable-initializer-list? "}") | ("{" variable-initializer-list "," "}") ;
for-statement ::= "for" "(" for-initializer? ";" for-condition? ";" for-iterator? ")" embedded-statement ;
field-modifiers ::= field-modifier | (field-modifiers field-modifier) ;
accessor-body ::= block | ";" ;
type-declaration ::= class-declaration | struct-declaration | interface-declaration | enum-declaration | delegate-declaration ;
using-statement ::= "using" "(" resource-acquisition ")" embedded-statement ;
attribute-arguments ::= ("(" positional-argument-list? ")") | ("(" positional-argument-list "," named-argument-list ")") | ("(" named-argument-list ")") ;
let-clause ::= "let" identifier "=" expression ;
select-clause ::= "select" expression ;
secondary-constraints ::= interface-type | type-parameter | (secondary-constraints "," interface-type) | (secondary-constraints "," type-parameter) ;
boolean-expression ::= expression ;
rank-specifier ::= "[" dim-separators? "]" ;
unary-operator-declarator ::= type "operator" overloadable-unary-operator "(" type identifier ")" ;
explicit-anonymous-function-signature ::= "(" explicit-anonymous-function-parameter-list? ")" ;
element-initializer-list ::= element-initializer | (element-initializer-list "," element-initializer) ;
join-into-clause ::= "join" type? identifier "in" expression "on" expression "equals" expression "into" identifier ;
select-or-group-clause ::= select-clause | group-clause ;
positional-argument ::= attribute-argument-expression ;
element-access ::= primary-no-array-creation-expression "[" expression-list "]" ;
typeof-expression ::= ("typeof" "(" type ")") | ("typeof" "(" unbound-type-name ")") | ("typeof" "(" "void" ")") ;
object-initializer ::= ("{" member-initializer-list? "}") | ("{" member-initializer-list "," "}") ;
struct-interfaces ::= ":" interface-type-list ;
unchecked-statement ::= "unchecked" block ;
interface-type ::= type-name ;
compilation-unit ::= (extern-alias-directives? using-directives? global-attributes?) | (namespace-member-declarations?) ;
lock-statement ::= "lock" "(" expression ")" embedded-statement ;
switch-section ::= switch-labels statement-list ;
implicit-anonymous-function-signature ::= ("(" implicit-anonymous-function-parameter-list? ")") | implicit-anonymous-function-parameter ;
equality-expression ::= relational-expression | (equality-expression "==" relational-expression) | (equality-expression "!=" relational-expression) ;
constructor-modifier ::= "public" | "protected" | "internal" | "private" | "extern" ;
parenthesized-expression ::= "(" expression ")" ;
throw-statement ::= "throw" expression? ";" ;
member-declarator ::= simple-name | member-access | (identifier "=" expression) ;
primary-expression ::= primary-no-array-creation-expression | array-creation-expression ;
type-name ::= namespace-or-type-name ;
type-parameter-constraints-clause ::= "where" type-parameter ":" type-parameter-constraints ;
class-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | destructor-declaration | static-constructor-declaration | type-declaration ;
variable-reference ::= expression ;
additive-expression ::= multiplicative-expression | (additive-expression "+" multiplicative-expression) | (additive-expression "-" multiplicative-expression) ;
overloadable-binary-operator ::= "+" | "-" | "*" | "/" | "%" | "&" | "|" | "^" | "<<" | right-shift | "==" | "!=" | ">" | "<" | ">=" | "<=" ;
parameter-array ::= attributes? "params" array-type identifier ;
type-parameter-list ::= "<" type-parameters ">" ;
interface-event-declaration ::= attributes? "new"? "event" type identifier ";" ;
delegate-declaration ::= (attributes? delegate-modifiers? "delegate" return-type identifier type-parameter-list?) | ("(" formal-parameter-list? ")" type-parameter-constraints-clauses? ";") ;
anonymous-function-parameter-modifier ::= "ref" | "out" ;
yield-statement ::= ("yield" "return" expression ";") | ("yield" "break" ";") ;
attribute-list ::= attribute | (attribute-list "," attribute) ;
indexer-modifiers ::= indexer-modifier | (indexer-modifiers indexer-modifier) ;
binary-operator-declarator ::= type "operator" overloadable-binary-operator "(" type identifier "," type identifier ")" ;
non-array-type ::= type ;
operator-body ::= block | ";" ;
field-declaration ::= attributes? field-modifiers? type variable-declarators ";" ;
generic-dimension-specifier ::= "<" commas? ">" ;
post-decrement-expression ::= primary-expression "--" ;
query-continuation ::= "into" identifier query-body ;
attribute-name ::= type-name ;
switch-label ::= ("case" constant-expression ":") | ("default" ":") ;
namespace-member-declarations ::= namespace-member-declaration | (namespace-member-declarations namespace-member-declaration) ;
interface-indexer-declaration ::= attributes? "new"? type "this" "[" formal-parameter-list "]" "{" interface-accessors "}" ;
anonymous-function-body ::= expression | block ;
for-condition ::= boolean-expression ;
where-clause ::= "where" boolean-expression ;
static-constructor-body ::= block | ";" ;
enum-member-declaration ::= (attributes? identifier) | (attributes? identifier "=" constant-expression) ;
return-statement ::= "return" expression? ";" ;
variable-initializer ::= expression | array-initializer ;
method-body ::= block | ";" ;
event-accessor-declarations ::= (add-accessor-declaration remove-accessor-declaration) | (remove-accessor-declaration add-accessor-declaration) ;
get-accessor-declaration ::= attributes? accessor-modifier? "get" accessor-body ;
global-attribute-section ::= ("[" global-attribute-target-specifier attribute-list "]") | ("[" global-attribute-target-specifier attribute-list "," "]") ;
event-modifiers ::= event-modifier | (event-modifiers event-modifier) ;
local-variable-type ::= type | "var" ;
namespace-or-type-name ::= (identifier type-argument-list?) | (namespace-or-type-name "." identifier type-argument-list?) | qualified-alias-member ;
non-nullable-value-type ::= type ;
relational-expression ::= shift-expression | (relational-expression "<" shift-expression) | (relational-expression ">" shift-expression) | (relational-expression "<=" shift-expression) | (relational-expression ">=" shift-expression) | (relational-expression "is" type) | (relational-expression "as" type) ;
pre-decrement-expression ::= "--" unary-expression ;
operator-declarator ::= unary-operator-declarator | binary-operator-declarator | conversion-operator-declarator ;
method-header ::= (attributes? method-modifiers? "partial"? return-type member-name type-parameter-list?) | ("(" formal-parameter-list? ")" type-parameter-constraints-clauses?) ;
finally-clause ::= "finally" block ;
attribute-argument-expression ::= expression ;
destructor-body ::= block | ";" ;
from-clause ::= "from" type? identifier "in" expression ;
for-iterator ::= statement-expression-list ;
empty-statement ::= ";" ;
enum-body ::= ("{" enum-member-declarations? "}") | ("{" enum-member-declarations "," "}") ;
using-directives ::= using-directive | (using-directives using-directive) ;
interface-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
interface-modifiers ::= interface-modifier | (interface-modifiers interface-modifier) ;
interface-declaration ::= (attributes? interface-modifiers? "partial"? "interface" identifier type-parameter-list?) | (interface-base? type-parameter-constraints-clauses? interface-body ";"?) ;
interface-base ::= ":" interface-type-list ;
extern-alias-directive ::= "extern" "alias" identifier ";" ;
constant-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
declaration-statement ::= (local-variable-declaration ";") | (local-constant-declaration ";") ;
class-body ::= "{" class-member-declarations? "}" ;
unchecked-expression ::= "unchecked" "(" expression ")" ;
type-parameter-constraints-clauses ::= type-parameter-constraints-clause | (type-parameter-constraints-clauses type-parameter-constraints-clause) ;
type-parameter ::= identifier ;
namespace-body ::= "{" extern-alias-directives? using-directives? namespace-member-declarations? "}" ;
array-creation-expression ::= ("new" non-array-type "[" expression-list "]" rank-specifiers? array-initializer?) | ("new" array-type array-initializer) | ("new" rank-specifier array-initializer) ;
constant-declaration ::= attributes? constant-modifiers? "const" type constant-declarators ";" ;
named-argument ::= identifier "=" attribute-argument-expression ;
global-attribute-target ::= "assembly" | "module" ;
local-variable-declaration ::= local-variable-type local-variable-declarators ;
checked-statement ::= "checked" block ;
event-declaration ::= (attributes? event-modifiers? "event" type variable-declarators ";") | (attributes? event-modifiers? "event" type member-name "{" event-accessor-declarations "}") ;
ordering-direction ::= "ascending" | "descending" ;
initializer-value ::= expression | object-or-collection-initializer ;
shift-expression ::= additive-expression | (shift-expression "<<" additive-expression) | (shift-expression right-shift additive-expression) ;
post-increment-expression ::= primary-expression "++" ;
local-variable-declarator ::= identifier | (identifier "=" local-variable-initializer) ;
if-statement ::= ("if" "(" boolean-expression ")" embedded-statement) | ("if" "(" boolean-expression ")" embedded-statement "else" embedded-statement) ;
query-expression ::= from-clause query-body ;
integral-type ::= "sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong" | "char" ;
switch-labels ::= switch-label | (switch-labels switch-label) ;
object-creation-expression ::= ("new" type "(" argument-list? ")" object-or-collection-initializer?) | ("new" type object-or-collection-initializer) ;
class-member-declarations ::= class-member-declaration | (class-member-declarations class-member-declaration) ;
rank-specifiers ::= rank-specifier | (rank-specifiers rank-specifier) ;
labeled-statement ::= identifier ":" statement ;
positional-argument-list ::= positional-argument | (positional-argument-list "," positional-argument) ;
attribute-section ::= ("[" attribute-target-specifier? attribute-list "]") | ("[" attribute-target-specifier? attribute-list "," "]") ;
switch-block ::= "{" switch-sections? "}" ;
anonymous-object-initializer ::= ("{" member-declarator-list? "}") | ("{" member-declarator-list "," "}") ;
expression-list ::= expression | (expression-list "," expression) ;
enum-modifiers ::= enum-modifier | (enum-modifiers enum-modifier) ;
enum-declaration ::= attributes? enum-modifiers? "enum" identifier enum-base? enum-body ";"? ;
do-statement ::= "do" embedded-statement "while" "(" boolean-expression ")" ";" ;
event-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
global-attribute-sections ::= global-attribute-section | (global-attribute-sections global-attribute-section) ;
switch-sections ::= switch-section | (switch-sections switch-section) ;
class-declaration ::= (attributes? class-modifiers? "partial"? "class" identifier type-parameter-list?) | (class-base? type-parameter-constraints-clauses? class-body ";"?) ;
predefined-type ::= "bool" | "byte" | "char" | "decimal" | "double" | "float" | "int" | "long" | "object" | "sbyte" | "short" | "string" | "uint" | "ulong" | "ushort" ;
inclusive-or-expression ::= exclusive-or-expression | (inclusive-or-expression "|" exclusive-or-expression) ;
add-accessor-declaration ::= attributes? "add" block ;
pre-increment-expression ::= "++" unary-expression ;
query-body-clauses ::= query-body-clause | (query-body-clauses query-body-clause) ;
remove-accessor-declaration ::= attributes? "remove" block ;
struct-body ::= "{" struct-member-declarations? "}" ;
non-assignment-expression ::= conditional-expression | lambda-expression | query-expression ;
struct-member-declarations ::= struct-member-declaration | (struct-member-declarations struct-member-declaration) ;
operator-modifiers ::= operator-modifier | (operator-modifiers operator-modifier) ;
dim-separators ::= "," | (dim-separators ",") ;
variable-declarators ::= variable-declarator | (variable-declarators "," variable-declarator) ;
method-modifiers ::= method-modifier | (method-modifiers method-modifier) ;
fixed-parameter ::= attributes? parameter-modifier? type identifier ;
jump-statement ::= break-statement | continue-statement | goto-statement | return-statement | throw-statement ;
method-declaration ::= method-header method-body ;
right-shift-assignment ::= ">>=" ;
primary-constraint ::= class-type | "class" | "struct" ;
enum-type ::= type-name ;
struct-modifiers ::= struct-modifier | (struct-modifiers struct-modifier) ;
property-modifiers ::= property-modifier | (property-modifiers property-modifier) ;
type-arguments ::= type-argument | (type-arguments "," type-argument) ;
delegate-type ::= type-name ;
default-value-expression ::= "default" "(" type ")" ;
iteration-statement ::= while-statement | do-statement | for-statement | foreach-statement ;
checked-expression ::= "checked" "(" expression ")" ;
group-clause ::= "group" expression "by" expression ;
reference-type ::= class-type | interface-type | array-type | delegate-type ;
parameter-modifier ::= "ref" | "out" | "this" ;
qualified-identifier ::= identifier | (qualified-identifier "." identifier) ;
expression-statement ::= statement-expression ";" ;
namespace-member-declaration ::= namespace-declaration | type-declaration ;
specific-catch-clauses ::= specific-catch-clause | (specific-catch-clauses specific-catch-clause) ;
query-body-clause ::= from-clause | let-clause | where-clause | join-clause | join-into-clause | orderby-clause ;
conditional-and-expression ::= inclusive-or-expression | (conditional-and-expression "&&" inclusive-or-expression) ;
simple-type ::= numeric-type | "bool" ;
multiplicative-expression ::= unary-expression | (multiplicative-expression "*" unary-expression) | (multiplicative-expression "/" unary-expression) | (multiplicative-expression "%" unary-expression) ;
class-type ::= type-name | "object" | "string" ;
selection-statement ::= if-statement | switch-statement ;
constructor-modifiers ::= constructor-modifier | (constructor-modifiers constructor-modifier) ;
class-modifiers ::= class-modifier | (class-modifiers class-modifier) ;
anonymous-function-signature ::= explicit-anonymous-function-signature | implicit-anonymous-function-signature ;
constant-expression ::= expression ;
lambda-expression ::= anonymous-function-signature "=>" anonymous-function-body ;
type-parameters ::= (attributes? type-parameter) | (type-parameters "," attributes? type-parameter) ;
overloadable-unary-operator ::= "+" | "-" | "!" | "~" | "++" | "--" | "true" | "false" ;
type-argument-list ::= "<" type-arguments ">" ;
statement-expression-list ::= statement-expression | (statement-expression-list "," statement-expression) ;
object-or-collection-initializer ::= object-initializer | collection-initializer ;
and-expression ::= equality-expression | (and-expression "&" equality-expression) ;
resource-acquisition ::= local-variable-declaration | expression ;
explicit-anonymous-function-parameter ::= anonymous-function-parameter-modifier? type identifier ;
static-constructor-modifiers ::= ("extern"? "static") | ("static" "extern"?) ;
field-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "readonly" | "volatile" ;
qualified-alias-member ::= identifier "::" identifier type-argument-list? ;
using-directive ::= using-alias-directive | using-namespace-directive ;
method-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
attribute-sections ::= attribute-section | (attribute-sections attribute-section) ;
conditional-expression ::= null-coalescing-expression | (null-coalescing-expression "?" expression ":" expression) ;
implicit-anonymous-function-parameter ::= identifier ;
statement-list ::= statement | (statement-list statement) ;
delegate-modifiers ::= delegate-modifier | (delegate-modifiers delegate-modifier) ;
collection-initializer ::= ("{" element-initializer-list "}") | ("{" element-initializer-list "," "}") ;
local-variable-initializer ::= expression | array-initializer ;
struct-type ::= type-name | simple-type | nullable-type ;
member-initializer ::= identifier "=" initializer-value ;
array-type ::= non-array-type rank-specifiers ;
extern-alias-directives ::= extern-alias-directive | (extern-alias-directives extern-alias-directive) ;
constructor-declaration ::= attributes? constructor-modifiers? constructor-declarator constructor-body ;
nullable-type ::= non-nullable-value-type "?" ;
enum-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
variable-declarator ::= identifier | (identifier "=" variable-initializer) ;
break-statement ::= "break" ";" ;
delegate-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
explicit-anonymous-function-parameter-list ::= explicit-anonymous-function-parameter | (explicit-anonymous-function-parameter-list "," explicit-anonymous-function-parameter) ;
enum-base ::= ":" integral-type ;
named-argument-list ::= named-argument | (named-argument-list "," named-argument) ;
anonymous-object-creation-expression ::= "new" anonymous-object-initializer ;
orderby-clause ::= "orderby" orderings ;
switch-statement ::= "switch" "(" expression ")" switch-block ;
value-type ::= struct-type | enum-type ;
namespace-declaration ::= "namespace" qualified-identifier namespace-body ";"? ;
class-base ::= (":" class-type) | (":" interface-type-list) | (":" class-type "," interface-type-list) ;
--------------------cs::csharp-msft-ls-4.0.bgf--------------------
accessor-declarations ::= (get-accessor-declaration set-accessor-declaration?) | (set-accessor-declaration get-accessor-declaration?) ;
delegate-creation-expression ::= "new" delegate-type "(" expression ")" ;
global-attribute-target-specifier ::= global-attribute-target ":" ;
constant-declarator ::= identifier "=" constant-expression ;
numeric-type ::= integral-type | floating-point-type | "decimal" ;
interface-member-declarations ::= interface-member-declaration | (interface-member-declarations interface-member-declaration) ;
member-access ::= (primary-expression "." identifier type-argument-list?) | (predefined-type "." identifier type-argument-list?) | (qualified-alias-member "." identifier) ;
unbound-type-name ::= (identifier generic-dimension-specifier?) | (identifier "::" identifier generic-dimension-specifier?) | (unbound-type-name "." identifier generic-dimension-specifier?) ;
unary-expression ::= primary-expression | ("+" unary-expression) | ("-" unary-expression) | ("!" unary-expression) | ("~" unary-expression) | pre-increment-expression | pre-decrement-expression | cast-expression ;
invocation-expression ::= primary-expression "(" argument-list? ")" ;
local-constant-declaration ::= "const" type constant-declarators ;
type-argument ::= type ;
variant-type-parameter-list ::= "<" variant-type-parameters ">" ;
embedded-statement ::= block | empty-statement | expression-statement | selection-statement | iteration-statement | jump-statement | try-statement | checked-statement | unchecked-statement | lock-statement | using-statement | yield-statement ;
cast-expression ::= "(" type ")" unary-expression ;
indexer-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
constructor-declarator ::= identifier "(" formal-parameter-list? ")" constructor-initializer? ;
fixed-parameters ::= fixed-parameter | (fixed-parameters "," fixed-parameter) ;
attribute-target ::= "field" | "event" | "method" | "param" | "property" | "return" | type ;
formal-parameter-list ::= fixed-parameters | (fixed-parameters "," parameter-array) | parameter-array ;
operator-modifier ::= "public" | "static" | "extern" ;
base-access ::= ("base" "." identifier) | ("base" "[" argument-list "]") ;
member-name ::= identifier | (interface-type "." identifier) ;
for-initializer ::= local-variable-declaration | statement-expression-list ;
try-statement ::= ("try" block catch-clauses) | ("try" block finally-clause) | ("try" block catch-clauses finally-clause) ;
interface-member-declaration ::= interface-method-declaration | interface-property-declaration | interface-event-declaration | interface-indexer-declaration ;
variable-initializer-list ::= variable-initializer | (variable-initializer-list "," variable-initializer) ;
while-statement ::= "while" "(" boolean-expression ")" embedded-statement ;
exclusive-or-expression ::= and-expression | (exclusive-or-expression "^" and-expression) ;
catch-clauses ::= (specific-catch-clauses general-catch-clause?) | (specific-catch-clauses? general-catch-clause) ;
operator-declaration ::= attributes? operator-modifiers operator-declarator operator-body ;
struct-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
property-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
continue-statement ::= "continue" ";" ;
using-alias-directive ::= "using" identifier "=" namespace-or-type-name ";" ;
static-constructor-declaration ::= attributes? static-constructor-modifiers identifier "(" ")" static-constructor-body ;
simple-name ::= identifier type-argument-list? ;
conversion-operator-declarator ::= ("implicit" "operator" type "(" type identifier ")") | ("explicit" "operator" type "(" type identifier ")") ;
global-attributes ::= global-attribute-sections ;
enum-member-declarations ::= enum-member-declaration | (enum-member-declarations "," enum-member-declaration) ;
struct-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | static-constructor-declaration | type-declaration ;
type-parameter-constraints ::= primary-constraint | secondary-constraints | constructor-constraint | (primary-constraint "," secondary-constraints) | (primary-constraint "," constructor-constraint) | (secondary-constraints "," constructor-constraint) | (primary-constraint "," secondary-constraints "," constructor-constraint) ;
indexer-declarator ::= (type "this" "[" formal-parameter-list "]") | (type interface-type "." "this" "[" formal-parameter-list "]") ;
interface-type-list ::= interface-type | (interface-type-list "," interface-type) ;
namespace-name ::= namespace-or-type-name ;
conditional-or-expression ::= conditional-and-expression | (conditional-or-expression "||" conditional-and-expression) ;
constant-declarators ::= constant-declarator | (constant-declarators "," constant-declarator) ;
return-type ::= type | "void" ;
interface-body ::= "{" interface-member-declarations? "}" ;
statement-expression ::= invocation-expression | object-creation-expression | assignment | post-increment-expression | post-decrement-expression | pre-increment-expression | pre-decrement-expression ;
local-variable-declarators ::= local-variable-declarator | (local-variable-declarators "," local-variable-declarator) ;
primary-no-array-creation-expression ::= literal | simple-name | parenthesized-expression | member-access | invocation-expression | element-access | this-access | base-access | post-increment-expression | post-decrement-expression | object-creation-expression | delegate-creation-expression | anonymous-object-creation-expression | typeof-expression | checked-expression | unchecked-expression | default-value-expression | anonymous-method-expression ;
argument-list ::= argument | (argument-list "," argument) ;
indexer-declaration ::= attributes? indexer-modifiers? indexer-declarator "{" accessor-declarations "}" ;
foreach-statement ::= "foreach" "(" local-variable-type identifier "in" expression ")" embedded-statement ;
destructor-declaration ::= attributes? "extern"? "~" identifier "(" ")" destructor-body ;
assignment-operator ::= "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | right-shift-assignment ;
anonymous-method-expression ::= "delegate" explicit-anonymous-function-signature? block ;
interface-method-declaration ::= (attributes? "new"? return-type identifier type-parameter-list) | ("(" formal-parameter-list? ")" type-parameter-constraints-clauses? ";") ;
accessor-modifier ::= "protected" | "internal" | "private" | ("protected" "internal") | ("internal" "protected") ;
argument-name ::= identifier ":" ;
null-coalescing-expression ::= conditional-or-expression | (conditional-or-expression "??" null-coalescing-expression) ;
interface-property-declaration ::= attributes? "new"? type identifier "{" interface-accessors "}" ;
constructor-body ::= block | ";" ;
using-namespace-directive ::= "using" namespace-name ";" ;
attribute-target-specifier ::= attribute-target ":" ;
constant-modifiers ::= constant-modifier | (constant-modifiers constant-modifier) ;
right-shift ::= ">>" ;
element-initializer ::= non-assignment-expression | ("{" expression-list "}") ;
constructor-constraint ::= "new" "(" ")" ;
constructor-initializer ::= (":" "base" "(" argument-list? ")") | (":" "this" "(" argument-list? ")") ;
implicit-anonymous-function-parameter-list ::= implicit-anonymous-function-parameter | (implicit-anonymous-function-parameter-list "," implicit-anonymous-function-parameter) ;
class-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "abstract" | "sealed" | "static" ;
query-body ::= query-body-clauses? select-or-group-clause query-continuation? ;
member-declarator-list ::= member-declarator | (member-declarator-list "," member-declarator) ;
general-catch-clause ::= "catch" block ;
goto-statement ::= ("goto" identifier ";") | ("goto" "case" constant-expression ";") | ("goto" "default" ";") ;
struct-declaration ::= (attributes? struct-modifiers? "partial"? "struct" identifier type-parameter-list?) | (struct-interfaces? type-parameter-constraints-clauses? struct-body ";"?) ;
property-declaration ::= attributes? property-modifiers? type member-name "{" accessor-declarations "}" ;
set-accessor-declaration ::= attributes? accessor-modifier? "set" accessor-body ;
floating-point-type ::= "float" | "double" ;
member-initializer-list ::= member-initializer | (member-initializer-list "," member-initializer) ;
specific-catch-clause ::= "catch" "(" class-type identifier? ")" block ;
interface-accessors ::= (attributes? "get" ";") | (attributes? "set" ";") | (attributes? "get" ";" attributes? "set" ";") | (attributes? "set" ";" attributes? "get" ";") ;
this-access ::= "this" ;
join-clause ::= "join" type? identifier "in" expression "on" expression "equals" expression ;
array-initializer ::= ("{" variable-initializer-list? "}") | ("{" variable-initializer-list "," "}") ;
for-statement ::= "for" "(" for-initializer? ";" for-condition? ";" for-iterator? ")" embedded-statement ;
field-modifiers ::= field-modifier | (field-modifiers field-modifier) ;
accessor-body ::= block | ";" ;
type-declaration ::= class-declaration | struct-declaration | interface-declaration | enum-declaration | delegate-declaration ;
using-statement ::= "using" "(" resource-acquisition ")" embedded-statement ;
attribute-arguments ::= ("(" positional-argument-list? ")") | ("(" positional-argument-list "," named-argument-list ")") | ("(" named-argument-list ")") ;
let-clause ::= "let" identifier "=" expression ;
select-clause ::= "select" expression ;
secondary-constraints ::= interface-type | type-parameter | (secondary-constraints "," interface-type) | (secondary-constraints "," type-parameter) ;
boolean-expression ::= expression ;
rank-specifier ::= "[" dim-separators? "]" ;
unary-operator-declarator ::= type "operator" overloadable-unary-operator "(" type identifier ")" ;
explicit-anonymous-function-signature ::= "(" explicit-anonymous-function-parameter-list? ")" ;
element-initializer-list ::= element-initializer | (element-initializer-list "," element-initializer) ;
join-into-clause ::= "join" type? identifier "in" expression "on" expression "equals" expression "into" identifier ;
select-or-group-clause ::= select-clause | group-clause ;
positional-argument ::= argument-name? attribute-argument-expression ;
element-access ::= primary-no-array-creation-expression "[" argument-list "]" ;
typeof-expression ::= ("typeof" "(" type ")") | ("typeof" "(" unbound-type-name ")") | ("typeof" "(" "void" ")") ;
object-initializer ::= ("{" member-initializer-list? "}") | ("{" member-initializer-list "," "}") ;
struct-interfaces ::= ":" interface-type-list ;
unchecked-statement ::= "unchecked" block ;
interface-type ::= type-name ;
compilation-unit ::= (extern-alias-directives? using-directives? global-attributes?) | (namespace-member-declarations?) ;
lock-statement ::= "lock" "(" expression ")" embedded-statement ;
switch-section ::= switch-labels statement-list ;
implicit-anonymous-function-signature ::= ("(" implicit-anonymous-function-parameter-list? ")") | implicit-anonymous-function-parameter ;
equality-expression ::= relational-expression | (equality-expression "==" relational-expression) | (equality-expression "!=" relational-expression) ;
constructor-modifier ::= "public" | "protected" | "internal" | "private" | "extern" ;
parenthesized-expression ::= "(" expression ")" ;
throw-statement ::= "throw" expression? ";" ;
member-declarator ::= simple-name | member-access | (identifier "=" expression) ;
primary-expression ::= primary-no-array-creation-expression | array-creation-expression ;
type-name ::= namespace-or-type-name ;
type-parameter-constraints-clause ::= "where" type-parameter ":" type-parameter-constraints ;
class-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | destructor-declaration | static-constructor-declaration | type-declaration ;
variable-reference ::= expression ;
additive-expression ::= multiplicative-expression | (additive-expression "+" multiplicative-expression) | (additive-expression "-" multiplicative-expression) ;
overloadable-binary-operator ::= "+" | "-" | "*" | "/" | "%" | "&" | "|" | "^" | "<<" | right-shift | "==" | "!=" | ">" | "<" | ">=" | "<=" ;
parameter-array ::= attributes? "params" array-type identifier ;
type-parameter-list ::= "<" type-parameters ">" ;
interface-event-declaration ::= attributes? "new"? "event" type identifier ";" ;
delegate-declaration ::= (attributes? delegate-modifiers? "delegate" return-type) | (identifier variant-type-parameter-list?) | ("(" formal-parameter-list? ")" type-parameter-constraints-clauses? ";") ;
anonymous-function-parameter-modifier ::= "ref" | "out" ;
yield-statement ::= ("yield" "return" expression ";") | ("yield" "break" ";") ;
attribute-list ::= attribute | (attribute-list "," attribute) ;
indexer-modifiers ::= indexer-modifier | (indexer-modifiers indexer-modifier) ;
binary-operator-declarator ::= type "operator" overloadable-binary-operator "(" type identifier "," type identifier ")" ;
non-array-type ::= type ;
operator-body ::= block | ";" ;
field-declaration ::= attributes? field-modifiers? type variable-declarators ";" ;
generic-dimension-specifier ::= "<" commas? ">" ;
post-decrement-expression ::= primary-expression "--" ;
query-continuation ::= "into" identifier query-body ;
attribute-name ::= type-name ;
switch-label ::= ("case" constant-expression ":") | ("default" ":") ;
namespace-member-declarations ::= namespace-member-declaration | (namespace-member-declarations namespace-member-declaration) ;
interface-indexer-declaration ::= attributes? "new"? type "this" "[" formal-parameter-list "]" "{" interface-accessors "}" ;
anonymous-function-body ::= expression | block ;
for-condition ::= boolean-expression ;
variant-type-parameters ::= (attributes? variance-annotation? type-parameter) | (variant-type-parameters "," attributes? variance-annotation? type-parameter) ;
where-clause ::= "where" boolean-expression ;
static-constructor-body ::= block | ";" ;
enum-member-declaration ::= (attributes? identifier) | (attributes? identifier "=" constant-expression) ;
return-statement ::= "return" expression? ";" ;
variable-initializer ::= expression | array-initializer ;
method-body ::= block | ";" ;
event-accessor-declarations ::= (add-accessor-declaration remove-accessor-declaration) | (remove-accessor-declaration add-accessor-declaration) ;
get-accessor-declaration ::= attributes? accessor-modifier? "get" accessor-body ;
global-attribute-section ::= ("[" global-attribute-target-specifier attribute-list "]") | ("[" global-attribute-target-specifier attribute-list "," "]") ;
event-modifiers ::= event-modifier | (event-modifiers event-modifier) ;
local-variable-type ::= type | "var" ;
namespace-or-type-name ::= (identifier type-argument-list?) | (namespace-or-type-name "." identifier type-argument-list?) | qualified-alias-member ;
non-nullable-value-type ::= type ;
relational-expression ::= shift-expression | (relational-expression "<" shift-expression) | (relational-expression ">" shift-expression) | (relational-expression "<=" shift-expression) | (relational-expression ">=" shift-expression) | (relational-expression "is" type) | (relational-expression "as" type) ;
pre-decrement-expression ::= "--" unary-expression ;
operator-declarator ::= unary-operator-declarator | binary-operator-declarator | conversion-operator-declarator ;
method-header ::= (attributes? method-modifiers? "partial"? return-type member-name type-parameter-list?) | ("(" formal-parameter-list? ")" type-parameter-constraints-clauses?) ;
finally-clause ::= "finally" block ;
attribute-argument-expression ::= expression ;
destructor-body ::= block | ";" ;
from-clause ::= "from" type? identifier "in" expression ;
for-iterator ::= statement-expression-list ;
empty-statement ::= ";" ;
enum-body ::= ("{" enum-member-declarations? "}") | ("{" enum-member-declarations "," "}") ;
using-directives ::= using-directive | (using-directives using-directive) ;
interface-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
interface-modifiers ::= interface-modifier | (interface-modifiers interface-modifier) ;
interface-declaration ::= (attributes? interface-modifiers? "partial"? "interface") | (identifier variant-type-parameter-list? interface-base?) | (type-parameter-constraints-clauses? interface-body ";"?) ;
interface-base ::= ":" interface-type-list ;
extern-alias-directive ::= "extern" "alias" identifier ";" ;
constant-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
declaration-statement ::= (local-variable-declaration ";") | (local-constant-declaration ";") ;
class-body ::= "{" class-member-declarations? "}" ;
unchecked-expression ::= "unchecked" "(" expression ")" ;
type-parameter-constraints-clauses ::= type-parameter-constraints-clause | (type-parameter-constraints-clauses type-parameter-constraints-clause) ;
type-parameter ::= identifier ;
namespace-body ::= "{" extern-alias-directives? using-directives? namespace-member-declarations? "}" ;
array-creation-expression ::= ("new" non-array-type "[" expression-list "]" rank-specifiers? array-initializer?) | ("new" array-type array-initializer) | ("new" rank-specifier array-initializer) ;
constant-declaration ::= attributes? constant-modifiers? "const" type constant-declarators ";" ;
named-argument ::= identifier "=" attribute-argument-expression ;
global-attribute-target ::= "assembly" | "module" ;
local-variable-declaration ::= local-variable-type local-variable-declarators ;
checked-statement ::= "checked" block ;
default-argument ::= "=" expression ;
event-declaration ::= (attributes? event-modifiers? "event" type variable-declarators ";") | (attributes? event-modifiers? "event" type member-name "{" event-accessor-declarations "}") ;
ordering-direction ::= "ascending" | "descending" ;
initializer-value ::= expression | object-or-collection-initializer ;
shift-expression ::= additive-expression | (shift-expression "<<" additive-expression) | (shift-expression right-shift additive-expression) ;
post-increment-expression ::= primary-expression "++" ;
local-variable-declarator ::= identifier | (identifier "=" local-variable-initializer) ;
if-statement ::= ("if" "(" boolean-expression ")" embedded-statement) | ("if" "(" boolean-expression ")" embedded-statement "else" embedded-statement) ;
query-expression ::= from-clause query-body ;
integral-type ::= "sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong" | "char" ;
switch-labels ::= switch-label | (switch-labels switch-label) ;
object-creation-expression ::= ("new" type "(" argument-list? ")" object-or-collection-initializer?) | ("new" type object-or-collection-initializer) ;
class-member-declarations ::= class-member-declaration | (class-member-declarations class-member-declaration) ;
rank-specifiers ::= rank-specifier | (rank-specifiers rank-specifier) ;
labeled-statement ::= identifier ":" statement ;
positional-argument-list ::= positional-argument | (positional-argument-list "," positional-argument) ;
attribute-section ::= ("[" attribute-target-specifier? attribute-list "]") | ("[" attribute-target-specifier? attribute-list "," "]") ;
switch-block ::= "{" switch-sections? "}" ;
anonymous-object-initializer ::= ("{" member-declarator-list? "}") | ("{" member-declarator-list "," "}") ;
expression-list ::= expression | (expression-list "," expression) ;
enum-modifiers ::= enum-modifier | (enum-modifiers enum-modifier) ;
enum-declaration ::= attributes? enum-modifiers? "enum" identifier enum-base? enum-body ";"? ;
do-statement ::= "do" embedded-statement "while" "(" boolean-expression ")" ";" ;
event-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
global-attribute-sections ::= global-attribute-section | (global-attribute-sections global-attribute-section) ;
switch-sections ::= switch-section | (switch-sections switch-section) ;
class-declaration ::= (attributes? class-modifiers? "partial"? "class" identifier type-parameter-list?) | (class-base? type-parameter-constraints-clauses? class-body ";"?) ;
predefined-type ::= "bool" | "byte" | "char" | "decimal" | "double" | "float" | "int" | "long" | "object" | "sbyte" | "short" | "string" | "uint" | "ulong" | "ushort" ;
inclusive-or-expression ::= exclusive-or-expression | (inclusive-or-expression "|" exclusive-or-expression) ;
add-accessor-declaration ::= attributes? "add" block ;
pre-increment-expression ::= "++" unary-expression ;
query-body-clauses ::= query-body-clause | (query-body-clauses query-body-clause) ;
remove-accessor-declaration ::= attributes? "remove" block ;
struct-body ::= "{" struct-member-declarations? "}" ;
non-assignment-expression ::= conditional-expression | lambda-expression | query-expression ;
struct-member-declarations ::= struct-member-declaration | (struct-member-declarations struct-member-declaration) ;
operator-modifiers ::= operator-modifier | (operator-modifiers operator-modifier) ;
dim-separators ::= "," | (dim-separators ",") ;
variable-declarators ::= variable-declarator | (variable-declarators "," variable-declarator) ;
method-modifiers ::= method-modifier | (method-modifiers method-modifier) ;
fixed-parameter ::= attributes? parameter-modifier? type identifier default-argument? ;
jump-statement ::= break-statement | continue-statement | goto-statement | return-statement | throw-statement ;
method-declaration ::= method-header method-body ;
right-shift-assignment ::= ">>=" ;
primary-constraint ::= class-type | "class" | "struct" ;
enum-type ::= type-name ;
struct-modifiers ::= struct-modifier | (struct-modifiers struct-modifier) ;
property-modifiers ::= property-modifier | (property-modifiers property-modifier) ;
type-arguments ::= type-argument | (type-arguments "," type-argument) ;
delegate-type ::= type-name ;
default-value-expression ::= "default" "(" type ")" ;
iteration-statement ::= while-statement | do-statement | for-statement | foreach-statement ;
checked-expression ::= "checked" "(" expression ")" ;
group-clause ::= "group" expression "by" expression ;
reference-type ::= class-type | interface-type | array-type | delegate-type ;
parameter-modifier ::= "ref" | "out" | "this" ;
qualified-identifier ::= identifier | (qualified-identifier "." identifier) ;
expression-statement ::= statement-expression ";" ;
namespace-member-declaration ::= namespace-declaration | type-declaration ;
specific-catch-clauses ::= specific-catch-clause | (specific-catch-clauses specific-catch-clause) ;
query-body-clause ::= from-clause | let-clause | where-clause | join-clause | join-into-clause | orderby-clause ;
conditional-and-expression ::= inclusive-or-expression | (conditional-and-expression "&&" inclusive-or-expression) ;
simple-type ::= numeric-type | "bool" ;
multiplicative-expression ::= unary-expression | (multiplicative-expression "*" unary-expression) | (multiplicative-expression "/" unary-expression) | (multiplicative-expression "%" unary-expression) ;
class-type ::= type-name | "object" | "dynamic" | "string" ;
selection-statement ::= if-statement | switch-statement ;
constructor-modifiers ::= constructor-modifier | (constructor-modifiers constructor-modifier) ;
class-modifiers ::= class-modifier | (class-modifiers class-modifier) ;
anonymous-function-signature ::= explicit-anonymous-function-signature | implicit-anonymous-function-signature ;
constant-expression ::= expression ;
argument-value ::= expression | ("ref" variable-reference) | ("out" variable-reference) ;
lambda-expression ::= anonymous-function-signature "=>" anonymous-function-body ;
type-parameters ::= (attributes? type-parameter) | (type-parameters "," attributes? type-parameter) ;
overloadable-unary-operator ::= "+" | "-" | "!" | "~" | "++" | "--" | "true" | "false" ;
type-argument-list ::= "<" type-arguments ">" ;
statement-expression-list ::= statement-expression | (statement-expression-list "," statement-expression) ;
object-or-collection-initializer ::= object-initializer | collection-initializer ;
and-expression ::= equality-expression | (and-expression "&" equality-expression) ;
resource-acquisition ::= local-variable-declaration | expression ;
explicit-anonymous-function-parameter ::= anonymous-function-parameter-modifier? type identifier ;
static-constructor-modifiers ::= ("extern"? "static") | ("static" "extern"?) ;
field-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "readonly" | "volatile" ;
qualified-alias-member ::= identifier "::" identifier type-argument-list? ;
using-directive ::= using-alias-directive | using-namespace-directive ;
method-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
attribute-sections ::= attribute-section | (attribute-sections attribute-section) ;
conditional-expression ::= null-coalescing-expression | (null-coalescing-expression "?" expression ":" expression) ;
implicit-anonymous-function-parameter ::= identifier ;
statement-list ::= statement | (statement-list statement) ;
delegate-modifiers ::= delegate-modifier | (delegate-modifiers delegate-modifier) ;
local-variable-initializer ::= expression | array-initializer ;
collection-initializer ::= ("{" element-initializer-list "}") | ("{" element-initializer-list "," "}") ;
struct-type ::= type-name | simple-type | nullable-type ;
member-initializer ::= identifier "=" initializer-value ;
array-type ::= non-array-type rank-specifiers ;
extern-alias-directives ::= extern-alias-directive | (extern-alias-directives extern-alias-directive) ;
constructor-declaration ::= attributes? constructor-modifiers? constructor-declarator constructor-body ;
nullable-type ::= non-nullable-value-type "?" ;
enum-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
variable-declarator ::= identifier | (identifier "=" variable-initializer) ;
break-statement ::= "break" ";" ;
delegate-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
explicit-anonymous-function-parameter-list ::= explicit-anonymous-function-parameter | (explicit-anonymous-function-parameter-list "," explicit-anonymous-function-parameter) ;
enum-base ::= ":" integral-type ;
named-argument-list ::= named-argument | (named-argument-list "," named-argument) ;
anonymous-object-creation-expression ::= "new" anonymous-object-initializer ;
orderby-clause ::= "orderby" orderings ;
switch-statement ::= "switch" "(" expression ")" switch-block ;
value-type ::= struct-type | enum-type ;
variance-annotation ::= "in" | "out" ;
namespace-declaration ::= "namespace" qualified-identifier namespace-body ";"? ;
class-base ::= (":" class-type) | (":" interface-type-list) | (":" class-type "," interface-type-list) ;
--------------------cs::csharp-zaytsev.bgf--------------------
accessor-declarations ::= (get-accessor-declaration set-accessor-declaration?) | (set-accessor-declaration get-accessor-declaration?) ;
operator-declarator ::= unary-operator-declarator | binary-operator-declarator | conversion-operator-declarator ;
constant-declarator ::= lex-csharp/identifier "=" expression ;
method-header ::= attributes method-modifier* type-or-void qualified-identifier "(" formal-parameter-list? ")" ;
finally-clause ::= "finally" block ;
unary-expression ::= (expression-unary-operator unary-expression) | ("(" type ")" unary-expression) | primary-expression ;
local-constant-declaration ::= "const" type {constant-declarator ","}+ ;
enum-body ::= ("{" "}") | ("{" {enum-member-declaration ","}+ ","? "}") ;
embedded-statement ::= maybe-empty-block | (statement-expression ";") | selection-statement | iteration-statement | jump-statement | try-statement | ("checked" block) | ("unchecked" block) | lock-statement | using-statement ;
interface-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
conversion-kind ::= "implicit" | "explicit" ;
interface-declaration ::= attributes interface-modifier* "interface" lex-csharp/identifier (":" qualified-identifier-list)? interface-body ";"? ;
indexer-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
constructor-declarator ::= lex-csharp/identifier "(" formal-parameter-list? ")" constructor-initializer? ;
fixed-parameters ::= {fixed-parameter ","}+ ;
attribute-target ::= "field" | "event" | "method" | "module" | "param" | "property" | "return" | "type" ;
operator-modifier ::= "public" | "static" | "extern" ;
formal-parameter-list ::= fixed-parameters | (fixed-parameters "," parameter-array) | parameter-array ;
constant-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
for-initializer ::= local-variable-declaration | statement-expression-list ;
ref-or-out ::= "ref" | "out" ;
try-statement ::= ("try" block catch-clauses finally-clause?) | ("try" block finally-clause) ;
declaration-statement ::= (local-variable-declaration ";") | (local-constant-declaration ";") ;
interface-member-declaration ::= interface-method-declaration | interface-property-declaration | interface-event-declaration | interface-indexer-declaration ;
class-body ::= "{" class-member-declaration* "}" ;
expression-relational-operator ::= lex-csharp-extra/less-than | lex-csharp-extra/greater-than | "<=" | ">=" | "is" | "as" ;
namespace-body ::= "{" using-directive* namespace-member-declaration* "}" ;
while-statement ::= "while" "(" expression ")" embedded-statement ;
catch-clauses ::= (specific-catch-clause+ general-catch-clause?) | (specific-catch-clause* general-catch-clause) ;
operator-declaration ::= attributes operator-modifier+ operator-declarator maybe-empty-block ;
constant-declaration ::= attributes constant-modifier* "const" type {constant-declarator ","}+ ";" ;
struct-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
property-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
local-variable-declaration ::= type {variable-declarator ","}+ ;
continue-statement ::= "continue" ";" ;
static-constructor-declaration ::= attributes static-constructor-modifiers lex-csharp/identifier "(" ")" maybe-empty-block ;
event-declaration ::= (attributes event-modifier* "event" type {variable-declarator ","}+ ";") | (attributes event-modifier* "event" type qualified-identifier "{" event-accessor-declarations "}") ;
conversion-operator-declarator ::= conversion-kind "operator" type "(" type lex-csharp/identifier ")" ;
global-attributes ::= global-attribute-section* ;
struct-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | static-constructor-declaration | type-declaration ;
indexer-declarator ::= (type "this" "[" formal-parameter-list "]") | (type qualified-identifier "." "this" "[" formal-parameter-list "]") ;
if-statement ::= "if" "(" expression ")" embedded-statement else-part? ;
integral-type ::= "sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong" | "char" ;
interface-body ::= "{" interface-member-declaration* "}" ;
statement-expression ::= (primary-expression "(" argument-list ")") | ("new" type "(" argument-list ")") | (unary-expression assignment-operator expression) | (primary-expression increment-decrement) | (increment-decrement primary-expression) ;
labeled-statement ::= lex-csharp/identifier ":" statement ;
increment-decrement ::= "++" | "--" ;
attribute-section ::= "[" (attribute-target ":")? attribute-list ","? "]" ;
expression-list ::= {expression ","}+ ;
enum-declaration ::= attributes enum-modifier* "enum" lex-csharp/identifier (":" integral-type)? enum-body ";"? ;
argument-list ::= {argument ","}* ;
do-statement ::= "do" embedded-statement "while" "(" expression ")" ";" ;
indexer-declaration ::= attributes indexer-modifier* indexer-declarator "{" accessor-declarations "}" ;
foreach-statement ::= "foreach" "(" type lex-csharp/identifier "in" expression ")" embedded-statement ;
type-or-void ::= type | "void" ;
event-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
destructor-declaration ::= attributes "extern"? "~" lex-csharp/identifier "(" ")" maybe-empty-block ;
class-declaration ::= attributes class-modifier* "class" lex-csharp/identifier class-base? class-body ";"? ;
assignment-operator ::= "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | ">>=" ;
interface-method-declaration ::= attributes "new"? type-or-void lex-csharp/identifier "(" formal-parameter-list? ")" ";" ;
predefined-type ::= "bool" | "byte" | "char" | "decimal" | "double" | "float" | "int" | "long" | "object" | "sbyte" | "short" | "string" | "uint" | "ulong" | "ushort" ;
add-accessor-declaration ::= attributes "add" block ;
remove-accessor-declaration ::= attributes "remove" block ;
struct-body ::= "{" struct-member-declaration* "}" ;
interface-property-declaration ::= attributes "new"? type lex-csharp/identifier "{" interface-accessors "}" ;
struct-member-declarations ::= struct-member-declaration | (struct-member-declarations struct-member-declaration) ;
built-in-type ::= integral-type | built-in-class-type | "bool" | "decimal" | "float" | "double" ;
fixed-parameter ::= attributes parameter-modifier? type lex-csharp/identifier ;
jump-statement ::= break-statement | continue-statement | goto-statement | return-statement | throw-statement ;
constructor-initializer ::= (":" "base" "(" argument-list ")") | (":" "this" "(" argument-list ")") ;
method-declaration ::= method-header maybe-empty-block ;
class-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "abstract" | "sealed" ;
general-catch-clause ::= "catch" block ;
goto-statement ::= ("goto" lex-csharp/identifier ";") | ("goto" "case" expression ";") | ("goto" "default" ";") ;
struct-declaration ::= attributes struct-modifier* "struct" lex-csharp/identifier (":" qualified-identifier-list)? struct-body ";"? ;
property-declaration ::= attributes property-modifier* type qualified-identifier "{" accessor-declarations "}" ;
set-accessor-declaration ::= attributes "set" maybe-empty-block ;
iteration-statement ::= while-statement | do-statement | for-statement | foreach-statement ;
specific-catch-clause ::= ("catch" "(" built-in-class-type lex-csharp/identifier? ")" block) | ("catch" "(" qualified-identifier lex-csharp/identifier? ")" block) ;
parameter-modifier ::= "ref" | "out" ;
qualified-identifier ::= {lex-csharp/identifier "."}+ ;
namespace-member-declaration ::= namespace-declaration | type-declaration ;
interface-accessors ::= (attributes "get" ";" (attributes "set" ";")?) | (attributes "set" ";" (attributes "get" ";")?) ;
array-initializer ::= ("{" "}") | ("{" {variable-initializer ","}+ ","? "}") ;
selection-statement ::= if-statement | switch-statement ;
for-statement ::= "for" "(" for-initializer? ";" expression? ";" statement-expression-list? ")" embedded-statement ;
type-declaration ::= class-declaration | struct-declaration | interface-declaration | enum-declaration | delegate-declaration ;
using-statement ::= "using" "(" resource-acquisition ")" embedded-statement ;
attribute-arguments ::= "(" expression-list? ")" ;
expression-shift-operator ::= "<<" | ">>" ;
rank-specifier ::= "[" ","* "]" ;
unary-operator-declarator ::= type "operator" overloadable-unary-operator "(" type lex-csharp/identifier ")" ;
overloadable-unary-operator ::= lex-csharp-extra/plus | lex-csharp-extra/minus | increment-decrement | "!" | "~" | "true" | "false" ;
expression-unary-operator ::= lex-csharp-extra/plus | lex-csharp-extra/minus | increment-decrement | "!" | "~" | "*" ;
statement-expression-list ::= {statement-expression ","}+ ;
resource-acquisition ::= local-variable-declaration | expression ;
compilation-unit ::= using-directive* global-attributes namespace-member-declaration* ;
lock-statement ::= "lock" "(" expression ")" embedded-statement ;
switch-section ::= switch-label+ statement+ ;
static-constructor-modifiers ::= ("extern"? "static") | ("static" "extern") ;
constructor-modifier ::= "public" | "protected" | "internal" | "private" | "extern" ;
field-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "readonly" | "volatile" ;
throw-statement ::= "throw" expression? ";" ;
using-directive ::= "using" (lex-csharp/identifier "=")? qualified-identifier ";" ;
method-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
primary-expression ::= ("new" non-array-type "[" expression-list "]" rank-specifier* array-initializer?) | ("new" array-type array-initializer) | lex-csharp/literal | lex-csharp/identifier | ("(" expression ")") | (primary-expression "." lex-csharp/identifier) | (predefined-type "." lex-csharp/identifier) | (primary-expression "(" argument-list ")") | (primary-expression "[" expression-list "]") | "this" | ("base" "." lex-csharp/identifier) | ("base" "[" expression-list "]") | (primary-expression increment-decrement) | ("new" type "(" argument-list ")") | ("typeof" "(" type-or-void ")") | ("checked" "(" expression ")") | ("unchecked" "(" expression ")") ;
class-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | destructor-declaration | static-constructor-declaration | type-declaration ;
overloadable-binary-operator ::= lex-csharp-extra/plus | lex-csharp-extra/minus | "*" | "/" | "%" | lex-csharp-extra/ampersand | lex-csharp-extra/bar | "^" | "<<" | ">>" | "==" | "!=" | lex-csharp-extra/greater-than | lex-csharp-extra/less-than | ">=" | "<=" ;
parameter-array ::= attributes "params" array-type lex-csharp/identifier ;
interface-event-declaration ::= attributes "new"? "event" type lex-csharp/identifier ";" ;
delegate-declaration ::= attributes delegate-modifier* "delegate" type-or-void lex-csharp/identifier "(" formal-parameter-list? ")" ";" ;
attribute-list ::= {attribute ","}+ ;
binary-operator-declarator ::= type "operator" overloadable-binary-operator "(" type lex-csharp/identifier "," type lex-csharp/identifier ")" ;
array-type ::= non-array-type rank-specifier+ ;
non-array-type ::= qualified-identifier | built-in-type ;
maybe-empty-block ::= ("{" statement* "}") | ";" ;
constructor-declaration ::= attributes constructor-modifier* constructor-declarator maybe-empty-block ;
field-declaration ::= attributes field-modifier* type {variable-declarator ","}+ ";" ;
enum-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
variable-declarator ::= lex-csharp/identifier | (lex-csharp/identifier "=" variable-initializer) ;
expression-equality-operator ::= "==" | "!=" ;
break-statement ::= "break" ";" ;
delegate-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
attribute-name ::= qualified-identifier ;
switch-label ::= ("case" expression ":") | ("default" ":") ;
interface-indexer-declaration ::= attributes "new"? type "this" "[" formal-parameter-list "]" "{" interface-accessors "}" ;
switch-statement ::= "switch" "(" expression ")" "{" switch-section* "}" ;
enum-member-declaration ::= attributes lex-csharp/identifier ("=" expression)? ;
return-statement ::= "return" expression? ";" ;
variable-initializer ::= expression | array-initializer ;
qualified-identifier-list ::= {qualified-identifier ","}+ ;
event-accessor-declarations ::= (add-accessor-declaration remove-accessor-declaration) | (remove-accessor-declaration add-accessor-declaration) ;
get-accessor-declaration ::= attributes "get" maybe-empty-block ;
global-attribute-section ::= "[" "assembly" ":" attribute-list ","? "]" ;
namespace-declaration ::= "namespace" qualified-identifier namespace-body ";"? ;
built-in-class-type ::= "object" | "string" ;
else-part ::= "else" embedded-statement ;
class-base ::= (":" qualified-identifier-list) | (":" built-in-class-type ("," qualified-identifier-list)?) ;
--------------------cs::csharp-antoniol.bgf--------------------
long_comment ::= comment+ ;
else_part ::= "//"? elsedef_line newline line* ;
elsif_part ::= "//"? elsifdef_line newline line* ;
not_newline ::= long_comment | (token) ;
any_other_line ::= not_newline* ;
ifdef_token ::= ifdef_line | elsedef_line | elsifdef_line | endifdef_line ;
--------------------cs::csharp-bruneliere.bgf--------------------
MethodBase ::= Constructor ;
 MethodBase ::= Method ;
 MethodBase ::= visibility::String isAbstract::Boolean isFinal::Boolean isStatic::Boolean (parameters::Parameter)+ ;
TypedAttribute ::= Field ;
 TypedAttribute ::= Property ;
 TypedAttribute ::= type::Type ;
--------------------cs::csharp-cordy.bgf--------------------
struct_member_declaration ::= constant_declaration | field_declaration | method_declaration | property_declaration | event_declaration | indexer_declaration | operator_declaration | constructor_declaration | static_constructor_declaration | type_declaration ;
pointer_type ::= (unmanaged_type "*"*) | ("void" "*" "*"*) ;
array_initializer ::= "{" variable_initializer_list? ","? "}" ;
embedded_statement ::= block | empty_statement | expression_statement | selection_statement | iteration_statement | jump_statement | try_statement | checked_statement | unchecked_statement | lock_statement | using_statement | yield_statement ;
 embedded_statement ::= unsafe_statement ;
 embedded_statement ::= fixed_statement ;
null_literal ::= "null" ;
type_declaration ::= class_declaration | struct_declaration | interface_declaration | enum_declaration | delegate_declaration ;
local_variable_initializer ::= expression | array_initializer ;
 local_variable_initializer ::= expression | array_initializer | stackalloc_initializer ;
conditional_expression ::= null_coalescing_expression | (null_coalescing_expression "?" expression ":" expression) ;
global_attribute_target_specifier ::= global_attribute_target ":" ;
integral_type ::= "sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong" | "char" ;
try_statement ::= "try" block NL catch_clauses? finally_clause? ;
expression_list ::= expression+ ;
static_constructor_declaration ::= attributes? static_constructor_modifiers id "(" ")" NL static_constructor_body NL ;
interface_method_declaration ::= attributes? "new"? return_type id type_parameter_list? "(" formal_parameter_list? ")" type_parameter_constraints_clauses? ";" NL ;
object_initializer ::= "{" member_initializer_list? ","? "}" ;
while_statement ::= "while" "(" boolean_expression ")" nested_statement NL ;
pre_decrement_expression ::= "--" unary_expression ;
element_access_operator ::= "[" expression+ "]" ;
pointer_element_access_operator ::= "[" expression "]" ;
continue_statement ::= "continue" ";" NL ;
assignment_operator ::= "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | ">>=" ;
key_expr ::= expression ;
variable_declarator ::= id equals_variable_initializer? ;
attribute_target_specifier ::= attribute_target ":" ;
predefined_type ::= "bool" | "byte" | "char" | "decimal" | "double" | "float" | "int" | "long" | "object" | "sbyte" | "short" | "string" | "uint" | "ulong" | "ushort" ;
dot_id ::= "." id ;
interface_event_declaration ::= attributes? "new"? "event" type id ";" NL ;
accessor_modifier ::= "protected" | "internal" | "private" | ("protected" "internal") | ("internal" "protected") ;
finalizer_declaration ::= attributes? "extern"? "~" id "(" ")" finalizer_body ;
 finalizer_declaration ::= (attributes? "extern"? "unsafe"? "~" id "(" ")" NL finalizer_body NL) | (attributes? "unsafe"? "extern"? "~" id "(" ")" NL finalizer_body NL) ;
member_name_equals ::= simple_name "=" ;
struct_body ::= "{" NL IN struct_member_declarations? EX "}" ";"? NL ;
where_clause ::= "where" pred_expr ;
formal_parameter_list ::= fixed_parameters comma_parameter_array? ;
switch_block ::= "{" NL IN switch_sections EX "}" NL ;
delegate_declaration ::= attributes? delegate_modifiers? "delegate" return_type id type_parameter_list? "(" formal_parameter_list? ")" type_parameter_constraints_clauses? ";" NL ;
class_modifier ::= "new" | "public" | "protected" | "internal" | "private" | "abstract" | "sealed" | "static" ;
 class_modifier ::= "unsafe" ;
generic_dimension_specifier ::= "<" ","* ">" ;
pointer_member_access_operator ::= "->" id type_argument_list? ;
foreach_statement ::= "foreach" "(" type id "in" expression ")" nested_statement NL ;
interface_member_declarations ::= interface_member_declaration+ ;
enum_type ::= type_name ;
field_declaration ::= attributes? field_modifiers? type variable_declarators ";" NL ;
query_body_clause ::= (NL from_clause) | (NL join_clause) | (NL let_clause) | (NL where_clause) | (NL orderby_clause) ;
delegate_type ::= type_name ;
local_constant_declaration ::= "const" type constant_declarators ;
global_attribute_target ::= id | key ;
reference_type ::= class_type | interface_type | array_type | delegate_type ;
constant_declarator ::= id "=" constant_expression ;
method_header ::= attributes? method_modifiers? return_type member_name type_parameter_list? "(" formal_parameter_list? ")" type_parameter_constraints_clauses? ;
finally_clause ::= "finally" block NL ;
unary_expression ::= primary_expression | ("+" unary_expression) | ("-" unary_expression) | ("!" unary_expression) | ("~" unary_expression) | pre_increment_expression | pre_decrement_expression | cast_expression ;
 unary_expression ::= pointer_indirection_expression | addressof_expression ;
simple_type ::= numeric_type | "bool" ;
from_clause ::= "from" item_name "in" src_expr ;
constant_modifiers ::= constant_modifier+ ;
class_type ::= type_name | "object" | "string" ;
sizeof_expression ::= "sizeof" "(" unmanaged_type ")" ;
variable_initializer ::= expression | array_initializer ;
unary_operator_declarator ::= type "operator" overloadable_unary_operator "(" type id ")" ;
character_literal ::= charlit ;
cast_expression ::= "(" type ")" unary_expression ;
boolean_literal ::= "true" | "false" ;
constructor_declarator ::= id "(" formal_parameter_list? ")" constructor_initializer? ;
fixed_parameters ::= fixed_parameter+ ;
equals_constant_expression ::= "=" constant_expression ;
goto_statement ::= ("goto" id ";" NL) | ("goto" "case" constant_expression ";" NL) | ("goto" "default" ";" NL) ;
secondary_constraint ::= interface_type | type_parameter ;
positional_argument ::= attribute_argument_expression ;
interface_accessors ::= (attributes? "get" ";") | (attributes? "set" ";") | (attributes? "get" ";" attributes? "set" ";") | (attributes? "set" ";" attributes? "get" ";") ;
pre_increment_expression ::= "++" unary_expression ;
enum_member_declarations ::= enum_member_declaration+ ;
input_parameters ::= input_parameter | ("(" {input_parameter ","}* ")") ;
class_member_declaration ::= constant_declaration | field_declaration | method_declaration | property_declaration | event_declaration | indexer_declaration | operator_declaration | constructor_declaration | finalizer_declaration | static_constructor_declaration | type_declaration ;
constructor_modifier ::= "public" | "protected" | "internal" | "private" | "extern" ;
 constructor_modifier ::= "unsafe" ;
member_access_operator ::= "." id type_argument_list? ;
for_statement ::= "for" "(" for_initializer? ";" for_condition? ";" for_iterator? ")" nested_statement NL ;
namespace_or_type_name ::= "this"? id colon_colon_id? dot_id* type_argument_list? ;
field_modifiers ::= field_modifier+ ;
input_parameter ::= type? id ;
using_statement ::= "using" "(" resource_acquisition ")" NL embedded_statement ;
interface_declaration ::= attributes? interface_modifiers? "partial"? "interface" id type_parameter_list? interface_base? type_parameter_constraints_clauses? NL interface_body NL ;
attribute_arguments ::= "(" attribute_argument_list ")" ;
global_attributes ::= global_attribute_sections ;
local_variable_declarators ::= local_variable_declarator+ ;
post_increment_operator ::= "++" ;
invocation_operator ::= "(" {argument ","}* ")" ;
 invocation_operator ::= "((" argument_list_or_key* "))" ;
indexer_declarator ::= type interface_type_dot? "this" "[" formal_parameter_list "]" ;
src_expr ::= expression ;
binary_operator_declarator ::= type "operator" overloadable_binary_operator "(" type id ")" ;
statement_list ::= statement+ ;
rank_specifier ::= "[" ","* "]" ;
general_catch_clause ::= "catch" block NL ;
switch_labels ::= switch_label+ ;
statement_expression ::= primary_no_array_creation_expression | object_creation_expression | assignment | pre_increment_expression | pre_decrement_expression ;
static_constructor_modifiers ::= ("extern"? "static") | ("static" "extern"?) ;
 static_constructor_modifiers ::= ("extern"? "unsafe"? "static") | ("unsafe"? "extern"? "static") | ("extern"? "static" "unsafe"?) | ("unsafe"? "static" "extern"?) | ("static" "extern"? "unsafe"?) | ("static" "unsafe"? "extern"?) ;
using_alias_directive ::= "using" id "=" namespace_or_type_name ";" NL ;
anonymous_method_expression ::= "delegate" anonymous_method_signature? block ;
object_formals ::= "(" formal_parameter_list? ")" ;
struct_type ::= type_name | simple_type | nullable_type ;
inclusive_or_expression ::= exclusive_or_expression | (inclusive_or_expression "|" exclusive_or_expression) ;
specific_catch_clause ::= "catch" "(" class_type id? ")" block NL ;
catch_clauses ::= specific_catch_clauses? general_catch_clause? ;
array_type ::= non_array_type rank_specifiers ;
constant_declaration ::= attributes? constant_modifiers? "const" type constant_declarators ";" NL ;
unchecked_statement ::= "unchecked" block NL ;
anonymous_method_parameter ::= parameter_modifier? type id ;
type_parameter_constraints ::= {type_parameter_constraint ","}* ;
lock_statement ::= "lock" "(" expression ")" NL embedded_statement ;
nullable_type ::= non_nullable_value_type "?" ;
interface_property_declaration ::= attributes? "new"? type id NL "{" NL IN interface_accessors EX "}" NL ;
throw_statement ::= "throw" expression? ";" NL ;
event_declaration ::= (attributes? event_modifiers? "event" type variable_declarators ";" NL) | (attributes? event_modifiers? "event" type member_name "{" NL IN event_accessor_declarations EX "}" NL EX) ;
class_or_interface_type ::= class_type | interface_type ;
enum_member_declaration ::= attributes? id equals_constant_expression? ;
pred_expr ::= expression ;
stackalloc_initializer ::= "stackalloc" unmanaged_type "[" expression "]" ;
enum_base ::= ":" integral_type ;
event_accessor_declarations ::= (add_accessor_declaration remove_accessor_declaration) | (remove_accessor_declaration add_accessor_declaration) ;
else_if_clause ::= "else" "if" "(" boolean_expression ")" nested_statement ;
variable_reference ::= expression ;
value_type ::= struct_type | enum_type ;
constructor_constraint ::= "new" "(" ")" ;
overloadable_unary_operator ::= "+" | "-" | "!" | "~" | "++" | "--" | "true" | "false" ;
set_accessor_declaration ::= attributes? accessor_modifier? "set" accessor_body ;
variable_initializer_list ::= variable_initializer+ ;
yield_statement ::= ("yield" "return" expression ";" NL) | ("yield" "break" ";" NL) ;
enum_declaration ::= attributes? enum_modifiers? "enum" id enum_base? enum_body NL ;
indexer_modifiers ::= indexer_modifier+ ;
class_base ::= ":" class_and_interface_type_ist ;
attribute_argument_expression ::= expression ;
unbound_type_name ::= id colon_colon_id? generic_dimension_specifier? dot_id_generic_dimension_specifier* ;
else_clause ::= "else" nested_statement ;
class_declaration ::= attributes? class_modifiers? "partial"? "class" id type_parameter_list? class_base? type_parameter_constraints_clauses? NL class_body ;
accessor_declarations ::= (get_accessor_declaration set_accessor_declaration?) | (set_accessor_declaration get_accessor_declaration?) ;
primary_no_array_creation_expression ::= simple_primary_expression primary_expression_modifier* ;
 primary_no_array_creation_expression ::= sizeof_expression ;
numeric_type ::= integral_type | floating_point_type | "decimal" ;
for_condition ::= boolean_expression ;
for_iterator ::= statement_expression_list ;
return_statement ::= "return" expression? ";" NL ;
variable_declarators ::= variable_declarator+ ;
interface_modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
 interface_modifier ::= "unsafe" ;
method_declaration ::= method_header NL method_body NL ;
type_parameter_list ::= "<" type_parameters ">" ;
into_item_name ::= "into" item_name ;
event_modifiers ::= event_modifier+ ;
statement_expression_list ::= statement_expression+ ;
object_initializer_expression ::= "new" array_type? object_formals? rank_specifiers? object_initializer ;
specific_catch_clauses ::= specific_catch_clause+ ;
array_creation_expression ::= ("new" non_array_type "[" expression_list "]" rank_specifiers? array_initializer?) | ("new" array_type array_initializer) ;
constant_modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
member_name ::= interface_type_dot? id ;
boolean_expression ::= expression ;
interface_type_dot ::= interface_type "." ;
typeof_expression ::= ("typeof" "(" type ")") | ("typeof" "(" unbound_type_name ")") | ("typeof" "(" "void" ")") | ("typeof" "(" ")") ;
struct_interfaces ::= ":" interface_type_list ;
named_argument ::= id "=" attribute_argument_expression ;
attribute_argument ::= positional_argument | named_argument ;
local_variable_declarator ::= id equals_local_variable_initializer? ;
interface_type_list ::= interface_type+ ;
empty_statement ::= ";" ;
equality_expression ::= relational_expression | (equality_expression "==" relational_expression) | (equality_expression "!=" relational_expression) ;
parenthesized_expression ::= "(" expression ")" ;
object_creation_expression ::= "new" type "(" argument_list? ")" ;
simple_name ::= id type_argument_list? ;
overloadable_binary_operator ::= "+" | "-" | "*" | "/" | "%" | "&" | "|" | "^" | "<<" | ">>" | "==" | "!=" | ">" | "<" | ">=" | "<=" ;
interface_modifiers ::= interface_modifier* ;
primary_expression ::= array_creation_expression | primary_no_array_creation_expression | object_initializer_expression ;
unmanaged_type ::= value_type | reference_type | type_parameter ;
final_query_clause ::= (NL select_clause) | (NL groupby_clause) ;
namespace_name ::= namespace_or_type_name ;
finalizer_body ::= (block NL) | (";" NL) ;
additive_expression ::= multiplicative_expression | (additive_expression "+" multiplicative_expression) | (additive_expression "-" multiplicative_expression) ;
declaration_statement ::= (local_variable_declaration ";" NL) | (local_constant_declaration ";" NL) ;
return_type ::= type | "void" ;
key_expr_ascending_descending ::= key_expr ascending_descending? ;
interface_body ::= "{" NL IN interface_member_declarations? EX "}" ";"? NL ;
type_parameter ::= id ;
primary_expression_modifier ::= member_access_operator | invocation_operator | element_access_operator | post_increment_operator | post_decrement_operator ;
 primary_expression_modifier ::= pointer_member_access_operator | pointer_element_access_operator ;
member_initializer_list ::= member_initializer+ ;
argument_list ::= {argument ","}* ;
resource_acquisition ::= local_variable_declaration | expression ;
event_modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
 event_modifier ::= "unsafe" ;
colon_colon_id ::= "::" id ;
namespace_member_declarations ::= namespace_member_declaration+ ;
switch_section ::= switch_labels NL IN statement_list EX ;
comma_parameter_array ::= "," parameter_array ;
switch_sections ::= switch_section+ ;
conditional_and_expression ::= inclusive_or_expression | (conditional_and_expression "&&" inclusive_or_expression) ;
checked_statement ::= "checked" block NL ;
type_parameter_constraints_clause ::= "where" type_parameter ":" type_parameter_constraints ;
post_decrement_operator ::= "--" ;
if_statement ::= "if" "(" boolean_expression ")" nested_statement else_if_clause* else_clause? NL ;
attributes_type_parameter ::= attributes? type_parameter ;
get_accessor_declaration ::= attributes? accessor_modifier? "get" accessor_body ;
orderby_clause ::= "orderby" {key_expr_ascending_descending ","}* ;
constructor_body ::= (block NL) | (";" NL) ;
labeled_statement ::= id ":" statement ;
ascending_descending ::= "ascending" | "descending" ;
enum_modifiers ::= enum_modifier+ ;
member_initializer ::= (member_name_equals? expression) | (member_name_equals? array_initializer) ;
do_statement ::= "do" NL IN embedded_statement EX "while" "(" boolean_expression ")" ";" NL ;
sel_expr ::= expression ;
namespace_member_declaration ::= (namespace_declaration NL) | (type_declaration NL) ;
query_body ::= query_body_clause* final_query_clause query_continuation? ;
groupby_clause ::= "group" sel_expr "by" key_expr ;
constructor_declaration ::= attributes? constructor_modifiers? constructor_declarator NL constructor_body NL ;
relational_expression ::= shift_expression | (relational_expression "<" shift_expression) | (relational_expression ">" shift_expression) | (relational_expression "<=" shift_expression) | (relational_expression ">=" shift_expression) | (relational_expression "is" type) | (relational_expression "as" type) ;
integer_literal ::= decimal_integer_literal | hexadecimal_integer_literal ;
parameter_modifier ::= "ref" | "out" ;
operator_declarator ::= unary_operator_declarator | binary_operator_declarator | conversion_operator_declarator ;
global_attribute_section ::= "[" global_attribute_target_specifier attribute_list ","? "]" ;
simple_primary_expression ::= literal | simple_name | parenthesized_expression | this_access | base_access | object_or_delegate_creation_expression | typeof_expression | checked_expression | unchecked_expression | default_value_expression | anonymous_method_expression | (predefined_type member_access_operator) | (qualified_alias_member member_access_operator) ;
operator_modifiers ::= operator_modifier+ ;
using_directives ::= using_directive+ NL ;
fixed_parameter ::= (attributes? parameter_modifier? type id) | parameter_array ;
method_modifiers ::= method_modifier+ ;
jump_statement ::= break_statement | continue_statement | goto_statement | return_statement | throw_statement ;
type_argument_list ::= "<" type_argument+ ">" ;
accessor_body ::= (block NL) | (";" NL) ;
namespace_declaration ::= "namespace" qualified_identifier NL namespace_body ;
fixed_pointer_initializer ::= ("&" variable_reference) | expression ;
attribute_target ::= id | key ;
exclusive_or_expression ::= and_expression | (exclusive_or_expression "^" and_expression) ;
struct_modifiers ::= struct_modifier+ ;
property_modifiers ::= property_modifier+ ;
base_access ::= ("base" "." id type_argument_list?) | ("base" "[" expression+ "]") ;
global_attribute_sections ::= global_attribute_section+ ;
iteration_statement ::= while_statement | do_statement | for_statement | foreach_statement ;
addressof_expression ::= "&" unary_expression ;
local_variable_declaration ::= type local_variable_declarators ;
unchecked_expression ::= "unchecked" "(" expression ")" ;
expression_statement ::= statement_expression ";" NL ;
extern_alias_directive ::= "extern" id id ";" NL ;
string_literal ::= stringlit ;
interface_type ::= type_name ;
compilation_unit ::= extern_alias_directives? using_directives? global_attributes? namespace_member_declarations? ;
attribute_argument_list ::= {attribute_argument ","}* ;
field_modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "readonly" | "volatile" ;
 field_modifier ::= "unsafe" ;
selection_statement ::= if_statement | switch_statement ;
conditional_or_expression ::= conditional_and_expression | (conditional_or_expression "||" conditional_and_expression) ;
static_constructor_body ::= (block NL) | (";" NL) ;
constructor_modifiers ::= constructor_modifier+ ;
class_member_declarations ::= class_member_declaration+ ;
method_modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" | "partial" ;
 method_modifier ::= "unsafe" ;
class_modifiers ::= class_modifier+ ;
shift_expression ::= additive_expression | (shift_expression "<<" additive_expression) | (shift_expression ">>" additive_expression) ;
non_nullable_value_type ::= enum_type | type_name | simple_type ;
equals_local_variable_initializer ::= "=" local_variable_initializer ;
attribute_sections ::= attribute_section+ ;
type_name ::= namespace_or_type_name ;
query_expression ::= from_clause IN query_body EX ;
for_initializer ::= local_variable_declaration | statement_expression_list ;
anonymous_method_signature ::= "(" anonymous_method_parameter_list? ")" ;
rank_specifiers ::= rank_specifier* ;
fixed_statement ::= "fixed" "(" pointer_type fixed_pointer_declarators ")" embedded_statement ;
default_value_expression ::= "default" "(" type ")" ;
floating_point_type ::= "float" | "double" ;
attribute_list ::= attribute+ ;
add_accessor_declaration ::= attributes? "add" block NL ;
operator_declaration ::= attributes? operator_modifiers? operator_declarator operator_body ;
remove_accessor_declaration ::= attributes? "remove" block NL ;
operator_body ::= (block NL) | (";" NL) ;
null_coalescing_expression ::= conditional_or_expression | (conditional_or_expression "??" null_coalescing_expression) ;
class_and_interface_type_ist ::= class_or_interface_type+ ;
enum_modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
struct_member_declarations ::= struct_member_declaration+ ;
using_directive ::= using_alias_directive | using_namespace_directive ;
delegate_modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
 delegate_modifier ::= "unsafe" ;
dot_id_generic_dimension_specifier ::= "." id generic_dimension_specifier? ;
attribute_name ::= type_name ;
query_continuation ::= "into" item_name query_body ;
constant_declarators ::= constant_declarator+ ;
parameter_array ::= attributes? "params" array_type id ;
argument_list_or_key ::= argument_list | "in" ;
attribute_section ::= "[" attribute_target_specifier? attribute_list ","? "]" ;
delegate_modifiers ::= delegate_modifier+ ;
method_body ::= (block NL) | (";" NL) ;
anonymous_method_parameter_list ::= anonymous_method_parameter+ ;
pointer_indirection_expression ::= "*" unary_expression ;
primary_constraint ::= class_type | "class" | "struct" ;
indexer_declaration ::= attributes? indexer_modifiers? indexer_declarator "{" NL IN accessor_declarations EX "}" NL ;
item_name ::= type? simple_name ;
interface_indexer_declaration ::= attributes? "new"? type "this" "[" formal_parameter_list "]" "{" NL IN interface_accessors EX "}" NL ;
using_namespace_directive ::= "using" namespace_name ";" NL ;
checked_expression ::= "checked" "(" expression ")" ;
break_statement ::= "break" ";" NL ;
qualified_identifier ::= id dot_id* ;
qualified_alias_member ::= id "::" id type_argument_list? ;
switch_label ::= ("case" constant_expression ":") | ("default" ":") ;
nested_statement ::= block | (IN NL embedded_statement EX) ;
this_access ::= "this" ;
join_clause ::= "join" item_name "in" src_expr "on" key_expr "equals" key_expr into_item_name? ;
switch_statement ::= "switch" "(" expression ")" switch_block ;
type_argument ::= type ;
multiplicative_expression ::= unary_expression | (multiplicative_expression "*" unary_expression) | (multiplicative_expression "/" unary_expression) | (multiplicative_expression "%" unary_expression) ;
enum_body ::= "{" NL IN enum_member_declarations? ","? EX "}" ";"? NL ;
equals_variable_initializer ::= "=" variable_initializer ;
fixed_pointer_declarator ::= id "=" fixed_pointer_initializer ;
constructor_initializer ::= (":" "base" "(" argument_list? ")") | (":" "this" "(" argument_list? ")") ;
interface_member_declaration ::= interface_method_declaration | interface_property_declaration | interface_event_declaration | interface_indexer_declaration ;
object_or_delegate_creation_expression ::= "new" type "(" argument_list? ")" ;
type_parameter_constraint ::= primary_constraint | secondary_constraint | constructor_constraint ;
interface_base ::= ":" interface_type_list ;
indexer_modifier ::= "new" | "public" | "protected" | "internal" | "private" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
 indexer_modifier ::= "unsafe" ;
unsafe_statement ::= "unsafe" block ;
fixed_pointer_declarators ::= fixed_pointer_declarator+ ;
constant_expression ::= expression ;
let_clause ::= "let" item_name "=" sel_expr ;
extern_alias_directives ::= extern_alias_directive+ NL ;
operator_modifier ::= "public" | "static" | "extern" ;
 operator_modifier ::= "unsafe" ;
select_clause ::= "select" sel_expr ;
non_array_type ::= value_type | class_type | interface_type | delegate_type | type_parameter ;
property_declaration ::= NL attributes? property_modifiers? type member_name "{" NL IN accessor_declarations EX "}" NL ;
struct_declaration ::= attributes? struct_modifiers? "partial"? "struct" id type_parameter_list? struct_interfaces? type_parameter_constraints_clauses? NL struct_body NL ;
lambda_expression ::= (input_parameters "=>" expression) | (input_parameters "=>" block) ;
type_parameters ::= attributes_type_parameter+ ;
class_body ::= "{" NL IN class_member_declarations? EX "}" ";"? NL ;
namespace_body ::= "{" NL IN extern_alias_directives? using_directives? namespace_member_declarations? EX "}" ";"? NL ;
conversion_operator_declarator ::= ("implicit" "operator" type "(" type id ")") | ("explicit" "operator" type "(" type id ")") ;
struct_modifier ::= "new" | "public" | "proctected" | "internal" | "private" ;
 struct_modifier ::= "unsafe" ;
property_modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
 property_modifier ::= "unsafe" ;
type_parameter_constraints_clauses ::= type_parameter_constraints_clause+ ;
and_expression ::= equality_expression | (and_expression "&" equality_expression) ;
--------------------cs::csharp-ecma-334-1.bgf--------------------
accessor-declarations ::= (get-accessor-declaration set-accessor-declaration?) | (set-accessor-declaration get-accessor-declaration?) ;
delegate-creation-expression ::= "new" delegate-type "(" expression ")" ;
relational-expression ::= shift-expression | (relational-expression "<" shift-expression) | (relational-expression ">" shift-expression) | (relational-expression "<=" shift-expression) | (relational-expression ">=" shift-expression) | (relational-expression "is" type) | (relational-expression "as" type) ;
global-attribute-target-specifier ::= global-attribute-target ":" ;
pre-decrement-expression ::= "--" unary-expression ;
operator-declarator ::= unary-operator-declarator | binary-operator-declarator | conversion-operator-declarator ;
constant-declarator ::= identifier "=" constant-expression ;
numeric-type ::= integral-type | floating-point-type | "decimal" ;
method-header ::= attributes? method-modifiers? return-type member-name "(" formal-parameter-list? ")" ;
finally-clause ::= "finally" block ;
interface-member-declarations ::= interface-member-declaration | (interface-member-declarations interface-member-declaration) ;
attribute-argument-expression ::= expression ;
member-access ::= (primary-expression "." identifier) | (predefined-type "." identifier) ;
destructor-body ::= block | ";" ;
unary-expression ::= primary-expression | ("+" unary-expression) | ("-" unary-expression) | ("!" unary-expression) | ("~" unary-expression) | ("*" unary-expression) | pre-increment-expression | pre-decrement-expression | cast-expression ;
invocation-expression ::= primary-expression "(" argument-list? ")" ;
local-constant-declaration ::= "const" type constant-declarators ;
for-iterator ::= statement-expression-list ;
empty-statement ::= ";" ;
enum-body ::= ("{" enum-member-declarations? "}") | ("{" enum-member-declarations "," "}") ;
using-directives ::= using-directive | (using-directives using-directive) ;
embedded-statement ::= block | empty-statement | expression-statement | selection-statement | iteration-statement | jump-statement | try-statement | checked-statement | unchecked-statement | lock-statement | using-statement ;
interface-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
interface-modifiers ::= interface-modifier | (interface-modifiers interface-modifier) ;
interface-declaration ::= attributes? interface-modifiers? "interface" identifier interface-base? interface-body ";"? ;
cast-expression ::= "(" type ")" unary-expression ;
interface-base ::= ":" interface-type-list ;
indexer-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
constructor-declarator ::= identifier "(" formal-parameter-list? ")" constructor-initializer? ;
fixed-parameters ::= fixed-parameter | (fixed-parameters "," fixed-parameter) ;
attribute-target ::= "field" | "event" | "method" | "module" | "param" | "property" | "return" | type ;
operator-modifier ::= "public" | "static" | "extern" ;
formal-parameter-list ::= fixed-parameters | (fixed-parameters "," parameter-array) | parameter-array ;
constant-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
base-access ::= ("base" "." identifier) | ("base" "[" expression-list "]") ;
member-name ::= identifier | (interface-type "." identifier) ;
for-initializer ::= local-variable-declaration | statement-expression-list ;
try-statement ::= ("try" block catch-clauses) | ("try" block finally-clause) | ("try" block catch-clauses finally-clause) ;
declaration-statement ::= (local-variable-declaration ";") | (local-constant-declaration ";") ;
interface-member-declaration ::= interface-method-declaration | interface-property-declaration | interface-event-declaration | interface-indexer-declaration ;
variable-initializer-list ::= variable-initializer | (variable-initializer-list "," variable-initializer) ;
class-body ::= "{" class-member-declarations? "}" ;
unchecked-expression ::= "unchecked" "(" expression ")" ;
namespace-body ::= "{" using-directives? namespace-member-declarations? "}" ;
while-statement ::= "while" "(" boolean-expression ")" embedded-statement ;
exclusive-or-expression ::= and-expression | (exclusive-or-expression "^" and-expression) ;
catch-clauses ::= (specific-catch-clauses general-catch-clause?) | (specific-catch-clauses? general-catch-clause) ;
array-creation-expression ::= ("new" non-array-type "[" expression-list "]" rank-specifiers? array-initializer?) | ("new" array-type array-initializer) ;
named-argument ::= identifier "=" attribute-argument-expression ;
operator-declaration ::= attributes? operator-modifiers operator-declarator operator-body ;
constant-declaration ::= attributes? constant-modifiers? "const" type constant-declarators ";" ;
struct-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
property-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
global-attribute-target ::= "assembly" ;
local-variable-declaration ::= type local-variable-declarators ;
continue-statement ::= "continue" ";" ;
checked-statement ::= "checked" block ;
using-alias-directive ::= "using" identifier "=" namespace-or-type-name ";" ;
static-constructor-declaration ::= attributes? static-constructor-modifiers identifier "(" ")" static-constructor-body ;
event-declaration ::= (attributes? event-modifiers? "event" type variable-declarators ";") | (attributes? event-modifiers? "event" type member-name "{" event-accessor-declarations) | "}" ;
simple-name ::= identifier ;
conversion-operator-declarator ::= ("implicit" "operator" type "(" type identifier ")") | ("explicit" "operator" type "(" type identifier ")") ;
post-increment-expression ::= primary-expression "++" ;
shift-expression ::= additive-expression | (shift-expression "<<" additive-expression) | (shift-expression ">>" additive-expression) ;
global-attributes ::= global-attribute-sections ;
enum-member-declarations ::= enum-member-declaration | (enum-member-declarations "," enum-member-declaration) ;
local-variable-declarator ::= identifier | (identifier "=" local-variable-initializer) ;
struct-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | static-constructor-declaration | type-declaration ;
indexer-declarator ::= (type "this" "[" formal-parameter-list "]") | (type interface-type "." "this" "[" formal-parameter-list "]") ;
if-statement ::= ("if" "(" boolean-expression ")" embedded-statement) | ("if" "(" boolean-expression ")" embedded-statement "else" embedded-statement) ;
interface-type-list ::= interface-type | (interface-type-list "," interface-type) ;
namespace-name ::= namespace-or-type-name ;
conditional-or-expression ::= conditional-and-expression | (conditional-or-expression "||" conditional-and-expression) ;
integral-type ::= "sbyte" | "byte" | "short" | "ushort" | "int" | "uint" | "long" | "ulong" | "char" ;
constant-declarators ::= constant-declarator | (constant-declarators "," constant-declarator) ;
switch-labels ::= switch-label | (switch-labels switch-label) ;
object-creation-expression ::= "new" type "(" argument-list? ")" ;
return-type ::= type | "void" ;
class-member-declarations ::= class-member-declaration | (class-member-declarations class-member-declaration) ;
interface-body ::= "{" interface-member-declarations? "}" ;
statement-expression ::= invocation-expression | object-creation-expression | assignment | post-increment-expression | post-decrement-expression | pre-increment-expression | pre-decrement-expression ;
rank-specifiers ::= rank-specifier | (rank-specifiers rank-specifier) ;
positional-argument-list ::= positional-argument | (positional-argument-list "," positional-argument) ;
labeled-statement ::= identifier ":" statement ;
attribute-section ::= ("[" attribute-target-specifier? attribute-list "]") | ("[" attribute-target-specifier? attribute-list "," "]") ;
switch-block ::= "{" switch-sections? "}" ;
expression-list ::= expression | (expression-list "," expression) ;
local-variable-declarators ::= local-variable-declarator | (local-variable-declarators "," local-variable-declarator) ;
primary-no-array-creation-expression ::= literal | simple-name | parenthesized-expression | member-access | invocation-expression | element-access | this-access | base-access | post-increment-expression | post-decrement-expression | object-creation-expression | delegate-creation-expression | typeof-expression | checked-expression | unchecked-expression ;
enum-modifiers ::= enum-modifier | (enum-modifiers enum-modifier) ;
enum-declaration ::= attributes? enum-modifiers? "enum" identifier enum-base? enum-body ";"? ;
argument-list ::= argument | (argument-list "," argument) ;
do-statement ::= "do" embedded-statement "while" "(" boolean-expression ")" ";" ;
indexer-declaration ::= attributes? indexer-modifiers? indexer-declarator "{" accessor-declarations "}" ;
foreach-statement ::= "foreach" "(" type identifier "in" expression ")" embedded-statement ;
event-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
global-attribute-sections ::= global-attribute-section | (global-attribute-sections global-attribute-section) ;
switch-sections ::= switch-section | (switch-sections switch-section) ;
destructor-declaration ::= attributes? "extern"? "~" identifier "(" ")" destructor-body ;
class-declaration ::= attributes? class-modifiers? "class" identifier class-base? class-body ";"? ;
assignment-operator ::= "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | ">>=" ;
interface-method-declaration ::= attributes? "new"? return-type identifier "(" formal-parameter-list? ")" ";" ;
inclusive-or-expression ::= exclusive-or-expression | (inclusive-or-expression "|" exclusive-or-expression) ;
predefined-type ::= "bool" | "byte" | "char" | "decimal" | "double" | "float" | "int" | "long" | "object" | "sbyte" | "short" | "string" | "uint" | "ulong" | "ushort" ;
add-accessor-declaration ::= attributes? "add" block ;
pre-increment-expression ::= "++" unary-expression ;
remove-accessor-declaration ::= attributes? "remove" block ;
struct-body ::= "{" struct-member-declarations? "}" ;
interface-property-declaration ::= attributes? "new"? type identifier "{" interface-accessors "}" ;
constructor-body ::= block | ";" ;
struct-member-declarations ::= struct-member-declaration | (struct-member-declarations struct-member-declaration) ;
using-namespace-directive ::= "using" namespace-name ";" ;
attribute-target-specifier ::= attribute-target ":" ;
operator-modifiers ::= operator-modifier | (operator-modifiers operator-modifier) ;
constant-modifiers ::= constant-modifier | (constant-modifiers constant-modifier) ;
dim-separators ::= "," | (dim-separators ",") ;
variable-declarators ::= variable-declarator | (variable-declarators "," variable-declarator) ;
fixed-parameter ::= attributes? parameter-modifier? type identifier ;
method-modifiers ::= method-modifier | (method-modifiers method-modifier) ;
jump-statement ::= break-statement | continue-statement | goto-statement | return-statement | throw-statement ;
constructor-initializer ::= (":" "base" "(" argument-list? ")") | (":" "this" "(" argument-list? ")") ;
method-declaration ::= method-header method-body ;
class-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "abstract" | "sealed" ;
enum-type ::= type-name ;
general-catch-clause ::= "catch" block ;
goto-statement ::= ("goto" identifier ";") | ("goto" "case" constant-expression ";") | ("goto" "default" ";") ;
struct-modifiers ::= struct-modifier | (struct-modifiers struct-modifier) ;
property-modifiers ::= property-modifier | (property-modifiers property-modifier) ;
struct-declaration ::= attributes? struct-modifiers? "struct" identifier struct-interfaces? struct-body ";"? ;
property-declaration ::= attributes? property-modifiers? type member-name "{" accessor-declarations "}" ;
delegate-type ::= type-name ;
set-accessor-declaration ::= attributes? "set" accessor-body ;
iteration-statement ::= while-statement | do-statement | for-statement | foreach-statement ;
checked-expression ::= "checked" "(" expression ")" ;
floating-point-type ::= "float" | "double" ;
specific-catch-clause ::= "catch" "(" class-type identifier? ")" block ;
reference-type ::= class-type | interface-type | array-type | delegate-type ;
parameter-modifier ::= "ref" | "out" ;
expression-statement ::= statement-expression ";" ;
qualified-identifier ::= identifier | (qualified-identifier "." identifier) ;
namespace-member-declaration ::= namespace-declaration | type-declaration ;
interface-accessors ::= (attributes? "get" ";") | (attributes? "set" ";") | (attributes? "get" ";" attributes? "set" ";") | (attributes? "set" ";" attributes? "get" ";") ;
specific-catch-clauses ::= specific-catch-clause | (specific-catch-clauses specific-catch-clause) ;
conditional-and-expression ::= inclusive-or-expression | (conditional-and-expression "&&" inclusive-or-expression) ;
simple-type ::= numeric-type | "bool" ;
this-access ::= "this" ;
multiplicative-expression ::= unary-expression | (multiplicative-expression "*" unary-expression) | (multiplicative-expression "/" unary-expression) | (multiplicative-expression "%" unary-expression) ;
class-type ::= type-name | "object" | "string" ;
array-initializer ::= ("{" variable-initializer-list? "}") | ("{" variable-initializer-list "," "}") ;
selection-statement ::= if-statement | switch-statement ;
for-statement ::= "for" "(" for-initializer? ";" for-condition? ";" for-iterator? ")" embedded-statement ;
constructor-modifiers ::= constructor-modifier | (constructor-modifiers constructor-modifier) ;
field-modifiers ::= field-modifier | (field-modifiers field-modifier) ;
accessor-body ::= block | ";" ;
class-modifiers ::= class-modifier | (class-modifiers class-modifier) ;
type-declaration ::= class-declaration | struct-declaration | interface-declaration | enum-declaration | delegate-declaration ;
using-statement ::= "using" "(" resource-acquisition ")" embedded-statement ;
attribute-arguments ::= ("(" positional-argument-list? ")") | ("(" positional-argument-list "," named-argument-list ")") | ("(" named-argument-list ")") ;
constant-expression ::= expression ;
boolean-expression ::= expression ;
rank-specifier ::= "[" dim-separators? "]" ;
unary-operator-declarator ::= type "operator" overloadable-unary-operator "(" type identifier ")" ;
overloadable-unary-operator ::= "+" | "-" | "!" | "~" | "++" | "--" | "true" | "false" ;
positional-argument ::= attribute-argument-expression ;
statement-expression-list ::= statement-expression | (statement-expression-list "," statement-expression) ;
element-access ::= primary-no-array-creation-expression "[" expression-list "]" ;
typeof-expression ::= ("typeof" "(" type ")") | ("typeof" "(" "void" ")") ;
struct-interfaces ::= ":" interface-type-list ;
unchecked-statement ::= "unchecked" block ;
compilation-unit ::= using-directives? global-attributes? namespace-member-declarations? ;
resource-acquisition ::= local-variable-declaration | expression ;
and-expression ::= equality-expression | (and-expression "&" equality-expression) ;
interface-type ::= type-name ;
lock-statement ::= "lock" "(" expression ")" embedded-statement ;
switch-section ::= switch-labels statement-list ;
equality-expression ::= relational-expression | (equality-expression "==" relational-expression) | (equality-expression "!=" relational-expression) ;
static-constructor-modifiers ::= ("extern"? "static") | ("static" "extern"?) ;
constructor-modifier ::= "public" | "protected" | "internal" | "private" | "extern" ;
field-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "readonly" | "volatile" ;
parenthesized-expression ::= "(" expression ")" ;
throw-statement ::= "throw" expression? ";" ;
using-directive ::= using-alias-directive | using-namespace-directive ;
method-modifier ::= "new" | "public" | "protected" | "internal" | "private" | "static" | "virtual" | "sealed" | "override" | "abstract" | "extern" ;
primary-expression ::= array-creation-expression | primary-no-array-creation-expression ;
attribute-sections ::= attribute-section | (attribute-sections attribute-section) ;
conditional-expression ::= conditional-or-expression | (conditional-or-expression "?" expression ":" expression) ;
type-name ::= namespace-or-type-name ;
class-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | destructor-declaration | static-constructor-declaration | type-declaration ;
statement-list ::= statement | (statement-list statement) ;
variable-reference ::= expression ;
additive-expression ::= multiplicative-expression | (additive-expression "+" multiplicative-expression) | (additive-expression "-" multiplicative-expression) ;
overloadable-binary-operator ::= "+" | "-" | "*" | "/" | "%" | "&" | "|" | "^" | "<<" | ">>" | "==" | "!=" | ">" | "<" | ">=" | "<=" ;
parameter-array ::= attributes? "params" array-type identifier ;
delegate-modifiers ::= delegate-modifier | (delegate-modifiers delegate-modifier) ;
interface-event-declaration ::= attributes? "new"? "event" type identifier ";" ;
local-variable-initializer ::= expression | array-initializer ;
delegate-declaration ::= attributes? delegate-modifiers? "delegate" type identifier "(" formal-parameter-list? ")" ";" ;
struct-type ::= type-name | simple-type ;
attribute-list ::= attribute | (attribute-list "," attribute) ;
binary-operator-declarator ::= type "operator" overloadable-binary-operator "(" type identifier "," type identifier ")" ;
indexer-modifiers ::= indexer-modifier | (indexer-modifiers indexer-modifier) ;
array-type ::= non-array-type rank-specifiers ;
non-array-type ::= type ;
operator-body ::= block | ";" ;
constructor-declaration ::= attributes? constructor-modifiers? constructor-declarator constructor-body ;
field-declaration ::= attributes? field-modifiers? type variable-declarators ";" ;
enum-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
variable-declarator ::= identifier | (identifier "=" variable-initializer) ;
break-statement ::= "break" ";" ;
delegate-modifier ::= "new" | "public" | "protected" | "internal" | "private" ;
post-decrement-expression ::= primary-expression "--" ;
enum-base ::= ":" integral-type ;
attribute-name ::= type-name ;
switch-label ::= ("case" constant-expression ":") | ("default" ":") ;
named-argument-list ::= named-argument | (named-argument-list "," named-argument) ;
namespace-member-declarations ::= namespace-member-declaration | (namespace-member-declarations namespace-member-declaration) ;
interface-indexer-declaration ::= attributes? "new"? type "this" "[" formal-parameter-list "]" "{" interface-accessors "}" ;
for-condition ::= boolean-expression ;
switch-statement ::= "switch" "(" expression ")" switch-block ;
value-type ::= struct-type | enum-type ;
static-constructor-body ::= block | ";" ;
enum-member-declaration ::= (attributes? identifier) | (attributes? identifier "=" constant-expression) ;
return-statement ::= "return" expression? ";" ;
variable-initializer ::= expression | array-initializer ;
method-body ::= block | ";" ;
event-accessor-declarations ::= (add-accessor-declaration remove-accessor-declaration) | (remove-accessor-declaration add-accessor-declaration) ;
get-accessor-declaration ::= attributes? "get" accessor-body ;
global-attribute-section ::= ("[" global-attribute-target-specifier attribute-list "]") | ("[" global-attribute-target-specifier attribute-list "," "]") ;
event-modifiers ::= event-modifier | (event-modifiers event-modifier) ;
namespace-declaration ::= "namespace" qualified-identifier namespace-body ";"? ;
class-base ::= (":" class-type) | (":" interface-type-list) | (":" class-type "," interface-type-list) ;
namespace-or-type-name ::= identifier | (namespace-or-type-name "." identifier) ;
--------------------dart::spec-0.01.bgf--------------------
argumentList ::= (namedArgument ("," namedArgument)*) | (expressionList ("," namedArgument)*) ;
constantObjectExpression ::= "const" type ("." identifier)? arguments ;
setterSignature ::= "static"? returnType? "set" identifier formalParameterList ;
defaultFormalParameter ::= normalFormalParameter ("=" expression)? ;
typeList ::= type ("," type)* ;
bitwiseOperator ::= "&" | "^" | "|" ;
tryStatement ::= "try" block (catchPart+ finallyPart?) | finallyPart ;
unaryOperator ::= negateOperator ;
STRING_CONTENT_SQ ::= α | ("\" α) | STRING_INTERPOLATION ;
isOperator ::= "is" "!"? ;
finalVarOrType ::= ("final" type?) | "var" | type ;
postfixExpression ::= (assignableExpression postfixOperator) | (primary selector*) ;
getterSignature ::= "static"? returnType? "get" identifier formalParameterList ;
relationalOperator ::= ">=" | ">" | "<=" | "<" ;
classDefinition ::= "class" identifier typeParameters? superclass? interfaces? "{" classMemberDefinition* "}" ;
initializedVariableDeclaration ::= declaredIdentifier ("=" expression)? ("," initializedIdentifier)* ;
compilationUnit ::= topLevelDefinition* EOF ;
libraryName ::= "#" "library" "(" stringLiteral ")" ";" ;
interfaceMemberDefinition ::= ("static" "final" type? initializedIdentifierList ";") | (functionSignature ";") | (constantConstructorSignature ";") | (namedConstructorSignature ";") | (getterSignature ";") | (setterSignature ";") | (operatorSignature ";") | (variableDeclaration ";") ;
IDENTIFIER_NO_DOLLAR ::= IDENTIFIER_START_NO_DOLLAR IDENTIFIER_PART_NO_DOLLAR* ;
superCallOrFieldInitializer ::= ("super" arguments) | ("super" "." identifier arguments) | fieldInitializer ;
topLevelDefinition ::= classDefinition | interfaceDefinition | functionTypeAlias | (functionSignature functionBody) | (returnType? getOrSet identifier formalParameterList functionBody) | ("final" type? staticFinalDeclarationList ";") | (variableDeclaration ";") ;
BUILT_IN_IDENTIFIER ::= "abstract" | "assert" | "class" | "extends" | "factory" | "get" | "implements" | "import" | "interface" | "is" | "library" | "negate" | "operator" | "set" | "source" | "static" | "typedef" ;
numericLiteral ::= NUMBER | HEX_NUMBER ;
constructorSignature ::= (identifier formalParameterList) | namedConstructorSignature ;
initializedIdentifierList ::= initializedIdentifier ("," initializedIdentifier)* ;
methodSignature ::= factoryConstructorSignature | ("static" functionSignature) | getterSignature | setterSignature | operatorSignature | (functionSignature initializers?) | (namedConstructorSignature initializers?) ;
thisExpression ::= "this" ;
STRING_INTERPOLATION ::= ("$" IDENTIFIER_NO_DOLLAR) | ("$" "{" expression "}") ;
forLoopParts ::= (forInitializerStatement expression? ";" expressionList?) | (declaredIdentifier "in" expression) | (identifier "in" expression) ;
ifStatement ::= "if" "(" expression ")" statement ("else" statement)? ;
scriptTag ::= "#!" α* NEWLINE ;
prefixExpression ::= prefixOperator unaryExpression ;
HEX_DIGIT ::= "a" | "b" | "c" | "d" | "e" | "f" | "A" | "B" | "C" | "D" | "E" | "F" | DIGIT ;
IDENTIFIER_PART ::= IDENTIFIER_START | DIGIT ;
assertStatement ::= "assert" "(" conditionalExpression ")" ";" ;
getOrSet ::= "get" | "set" ;
assignableSelector ::= ("[" expression "]") | ("." identifier) ;
negateOperator ::= "!" | "~" ;
binaryOperator ::= multiplicativeOperator | additiveOperator | shiftOperator | relationalOperator | equalityOperator | bitwiseOperator ;
typeParameters ::= "<" typeParameter ("," typeParameter)* ">" ;
functionSignature ::= returnType? identifier formalParameterList ;
ESCAPE_SEQUENCE ::= ("\" "n") | ("\" "r") | ("\" "f") | ("\" "b") | ("\" "t") | ("\" "v") | ("\" "x" HEX_DIGIT HEX_DIGIT) | ("\" "u" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT) | ("\" "u") ;
equalityOperator ::= "==" | "!=" | "===" | "!==" ;
conditionalExpression ::= logicalOrExpression ("?" expression ":" expression)? ;
shiftExpression ::= (additiveExpression (shiftOperator additiveExpression)*) | ("super" (shiftOperator additiveExpression)+) ;
expressionStatement ::= expression? ";" ;
namedConstructorSignature ::= identifier "." identifier formalParameterList ;
mapLiteral ::= "const"? typeArguments? "{" (mapLiteralEntry ("," mapLiteralEntry)* ","?)? "}" ;
staticFinalDeclaration ::= identifier "=" expression ;
EXPONENT ::= "e" | "E" ("+" | "-")? DIGIT+ ;
bitwiseOrExpression ::= (bitwiseXorExpression ("|" bitwiseXorExpression)*) | ("super" ("|" bitwiseXorExpression)+) ;
IDENTIFIER ::= IDENTIFIER_START IDENTIFIER_PART* ;
IDENTIFIER_START_NO_DOLLAR ::= LETTER | "_" ;
forStatement ::= "for" "(" forLoopParts ")" statement ;
bitwiseXorExpression ::= (bitwiseAndExpression ("^" bitwiseAndExpression)*) | ("super" ("^" bitwiseAndExpression)+) ;
constantConstructorSignature ::= "const" qualified formalParameterList ;
initializedIdentifier ::= identifier ("=" expression)? ;
compoundAssignmentOperator ::= "*=" | "/=" | "~/=" | "%=" | "+=" | "-=" | "<<=" | (">" ">" ">" "="?) | ("<" "<" "="?) | "&=" | "^=" | "|=" ;
switchStatement ::= "switch" "(" expression ")" "{" switchCase* defaultCase? "}" ;
functionBody ::= ("=>" expression ";") | block ;
MULTI_LINE_STRING ::= (""""" α* """"") | ("'''" α* "'''") ;
normalFormalParameter ::= functionSignature | fieldFormalParameter | simpleFormalParameter ;
namedFormalParameters ::= "[" defaultFormalParameter ("," defaultFormalParameter)* "]" ;
assignmentOperator ::= "=" | compoundAssignmentOperator ;
additiveOperator ::= "+" | "-" ;
functionExpression ::= (returnType? identifier)? formalParameterList functionExpressionBody ;
typeParameter ::= identifier ("extends" type)? ;
multiplicativeExpression ::= (unaryExpression (multiplicativeOperator unaryExpression)*) | ("super" (multiplicativeOperator unaryExpression)+) ;
SINGLE_LINE_COMMENT ::= "//" α* NEWLINE? ;
returnType ::= "void" | type ;
functionPrefix ::= returnType? identifier ;
fieldInitializer ::= ("this" ".")? identifier "=" conditionalExpression ;
continueStatement ::= "continue" identifier? ";" ;
switchCase ::= label? ("case" expression ":")+ statements ;
additiveExpression ::= (multiplicativeExpression (additiveOperator multiplicativeExpression)*) | ("super" (additiveOperator multiplicativeExpression)+) ;
logicalOrExpression ::= logicalAndExpression ("||" logicalAndExpression)* ;
declaredIdentifier ::= finalVarOrType identifier ;
mapLiteralEntry ::= (identifier ":" expression) | (stringLiteral ":" expression) ;
scriptDefinition ::= scriptTag? libraryName? libraryImport* include* resource* topLevelDefinition* ;
WHITESPACE ::= ("\t" | " " | NEWLINE)+ ;
HEX_DIGIT_SEQUENCE ::= HEX_DIGIT HEX_DIGIT? HEX_DIGIT? HEX_DIGIT? HEX_DIGIT? HEX_DIGIT? HEX_DIGIT? ;
NEWLINE ::= "\n" | "\r" ;
operatorSignature ::= returnType? "operator" operator formalParameterList ;
staticFinalDeclarationList ::= staticFinalDeclaration ("," staticFinalDeclaration)* ;
libraryDefinition ::= scriptTag? libraryName libraryImport* include* resource* topLevelDefinition* ;
interfaceDefinition ::= "interface" identifier typeParameters? superinterfaces? factorySpecification? "{" interfaceMemberDefinition* "}" ;
simpleFormalParameter ::= declaredIdentifier | identifier ;
booleanLiteral ::= "true" | "false" ;
stringLiteral ::= ("@"? MULTI_LINE_STRING) | SINGLE_LINE_STRING ;
variableDeclaration ::= declaredIdentifier ("," identifier)* ;
MULTI_LINE_COMMENT ::= "/*" α* ;
newExpression ::= "new" type ("." identifier)? arguments ;
expressionList ::= expression ("," expression)* ;
prefixOperator ::= additiveOperator | negateOperator ;
functionExpressionBody ::= ("=>" expression) | block ;
catchPart ::= "catch" "(" declaredIndentifier ("," declaredIndentifier)? ")" block ;
nonLabelledStatement ::= block | (initializedVariableDeclaration ";") | forStatement | whileStatement | doStatement | switchStatement | ifStatement | tryStatement | breakStatement | continueStatement | returnStatement | throwStatement | expressionStatement | assertStatement | (functionSignature functionBody) ;
NUMBER ::= (DIGIT+ ("." DIGIT*)? EXPONENT?) | ("." DIGIT+ EXPONENT?) ;
logicalAndExpression ::= bitwiseOrExpression ("&&" bitwiseOrExpression)* ;
shiftOperator ::= "<<" | ">>>" | ">>" ;
SINGLE_LINE_STRING ::= (""" STRING_CONTENT_DQ* """) | ("'" STRING_CONTENT_SQ* "'") | ("@" "'" α* "'") | ("@" """ α* """) ;
assignableExpression ::= (primary (arguments* assignableSelector)+) | ("super" assignableSelector) | identifier ;
normalFormalParameters ::= normalFormalParameter ("," normalFormalParameter)* ;
libraryImport ::= "#" "import" "(" stringLiteral ("," "prefix:" stringLiteral)? ")" ";" ;
functionTypeAlias ::= "typedef" functionPrefix typeParameters? formalParameterList ";" ;
whileStatement ::= "while" "(" expression ")" statement ;
typeArguments ::= "<" typeList ">" ;
postfixOperator ::= incrementOperator ;
formalParameterList ::= ("(" ")") | ("(" normalFormalParameters ("," namedFormalParameters)? ")") | namedFormalParameters ;
incrementOperator ::= "++" | "--" ;
equalityExpression ::= (relationalExpression (equalityOperator relationalExpression)?) | ("super" equalityOperator relationalExpression) ;
listLiteral ::= "const"? typeArguments? "[" (expressionList ","?)? "]" ;
breakStatement ::= "break" identifier? ";" ;
IDENTIFIER_START ::= IDENTIFIER_START_NO_DOLLAR | "$" ;
throwStatement ::= "throw" expression? ";" ;
nullLiteral ::= "null" ;
unaryExpression ::= prefixExpression | postfixExpression | (unaryOperator "super") | ("-" "super") | (incrementOperator assignableExpression) ;
LETTER ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ;
classMemberDefinition ::= (declaration ";") | (methodSignature functionBody) ;
doStatement ::= "do" statement "while" "(" expression ")" ";" ;
STRING_CONTENT_DQ ::= α | ("\" α) | STRING_INTERPOLATION ;
fieldFormalParameter ::= finalVarOrType? "this" "." identifier ;
returnStatement ::= "return" expression? ";" ;
relationalExpression ::= (shiftExpression ((isOperator type) | (relationalOperator shiftExpression))?) | ("super" relationalOperator shiftExpression) ;
bitwiseAndExpression ::= (equalityExpression ("&" equalityExpression)*) | ("super" ("&" equalityExpression)+) ;
multiplicativeOperator ::= "*" | "/" | "%" | "~/" ;
factorySpecification ::= "factory" identifier typeParameters? ;
namedArgument ::= label expression ;
forInitializerStatement ::= (initializedVariableDeclaration ";") | (expression? ";") ;
finallyPart ::= "finally" block ;
defaultCase ::= label? ("case" expression ":")* "default" ":" statements ;
DIGIT ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
HEX_NUMBER ::= ("0x" HEX_DIGIT+) | ("0X" HEX_DIGIT+) ;
factoryConstructorSignature ::= "factory" qualified typeVariables? ("." identifier)? formalParameterList ;
IDENTIFIER_PART_NO_DOLLAR ::= IDENTIFIER_START_NO_DOLLAR | DIGIT ;
--------------------dart::google.bgf--------------------
libraryBody ::= libraryImport? librarySource? ;
argumentList ::= (namedArgument ("," namedArgument)*) | (expressionList ("," namedArgument)*) ;
constInitializedIdentifier ::= identifier ("=" constantExpression)? ;
defaultFormalParameter ::= normalFormalParameter ("=" constantExpression)? ;
typeList ::= type ("," type)* ;
bitwiseOperator ::= "&" | "^" | "|" ;
tryStatement ::= TRY block (catchPart+ finallyPart?) | finallyPart ;
STRING_CONTENT_SQ ::= α | ("\\" α) ;
finalVarOrType ::= (FINAL type?) | VAR | type ;
isOperator ::= IS "!"? ;
postfixExpression ::= (assignableExpression postfixOperator) | (primary selector*) ;
classDefinition ::= (CLASS identifier typeParameters? superclass? interfaces? "{" classMemberDefinition* "}") | (CLASS identifier typeParameters? interfaces? NATIVE STRING "{" classMemberDefinition* "}") ;
relationalOperator ::= ">=" | ">" | "<=" | "<" ;
initializedVariableDeclaration ::= declaredIdentifier ("=" expression)? ("," initializedIdentifier)* ;
FACTORY ::= "factory" ;
compilationUnit ::= HASHBANG? directive* topLevelDefinition* EOF ;
interfaceMemberDefinition ::= (STATIC FINAL type? initializedIdentifierList ";") | (functionDeclaration ";") | (constantConstructorDeclaration ";") | (namedConstructorDeclaration ";") | (specialSignatureDefinition ";") | (variableDeclaration ";") ;
superCallOrFieldInitializer ::= (SUPER arguments) | (SUPER "." identifier arguments) | fieldInitializer ;
constantConstructorDeclaration ::= CONST qualified formalParameterList ;
IDENTIFIER_NO_DOLLAR ::= IDENTIFIER_START_NO_DOLLAR IDENTIFIER_PART_NO_DOLLAR* ;
topLevelDefinition ::= classDefinition | interfaceDefinition | functionTypeAlias | (functionDeclaration functionBodyOrNative) | (returnType? getOrSet identifier formalParameterList functionBodyOrNative) | (FINAL type? staticFinalDeclarationList ";") | (constInitializedVariableDeclaration ";") ;
libraryUnit ::= libraryDefinition EOF ;
BREAK ::= "break" ;
initializedIdentifierList ::= initializedIdentifier ("," initializedIdentifier)* ;
methodDeclaration ::= factoryConstructorDeclaration | (STATIC functionDeclaration) | specialSignatureDefinition | (functionDeclaration initializers?) | (namedConstructorDeclaration initializers?) ;
forLoopParts ::= (forInitializerStatement expression? ";" expressionList?) | (declaredIdentifier IN expression) | (identifier IN expression) ;
factoryConstructorDeclaration ::= FACTORY qualified typeParameters? ("." identifier)? formalParameterList ;
getOrSet ::= GET | SET ;
HEX_DIGIT ::= "a" | "b" | "c" | "d" | "e" | "f" | "A" | "B" | "C" | "D" | "E" | "F" | DIGIT ;
IDENTIFIER_PART ::= IDENTIFIER_START | DIGIT ;
assignableSelector ::= ("[" expression "]") | ("." identifier) ;
THROW ::= "throw" ;
negateOperator ::= "!" | "~" ;
typeParameters ::= "<" typeParameter ("," typeParameter)* ">" ;
equalityOperator ::= "==" | "!=" | "===" | "!==" ;
conditionalExpression ::= logicalOrExpression ("?" expression ":" expression)? ;
expressionInParentheses ::= "(" expression ")" ;
shiftExpression ::= (additiveExpression (shiftOperator additiveExpression)*) | (SUPER (shiftOperator additiveExpression)+) ;
namedConstructorDeclaration ::= identifier "." identifier formalParameterList ;
librarySource ::= SOURCE "=" "[" sourceUrls? "]" ;
mapLiteral ::= "{" (mapLiteralEntry ("," mapLiteralEntry)* ","?)? "}" ;
staticFinalDeclaration ::= identifier "=" constantExpression ;
specialSignatureDefinition ::= (STATIC? returnType? getOrSet identifier formalParameterList) | (returnType? OPERATOR userDefinableOperator formalParameterList) ;
NUMBER_OPT_ILLEGAL_END ::= ε ;
IMPLEMENTS ::= "implements" ;
EXPONENT ::= "e" | "E" ("+" | "-")? DIGIT+ ;
bitwiseOrExpression ::= (bitwiseXorExpression ("|" bitwiseXorExpression)*) | (SUPER ("|" bitwiseXorExpression)+) ;
FOR ::= "for" ;
IDENTIFIER ::= IDENTIFIER_START IDENTIFIER_PART* ;
CONTINUE ::= "continue" ;
IDENTIFIER_START_NO_DOLLAR ::= LETTER | "_" ;
IMPORT ::= "import" ;
OPERATOR ::= "operator" ;
NUMBER_OPT_FRACTIONAL_PART ::= ("." DIGIT+) | ε ;
bitwiseXorExpression ::= (bitwiseAndExpression ("^" bitwiseAndExpression)*) | (SUPER ("^" bitwiseAndExpression)+) ;
sourceUrls ::= STRING ("," STRING)* ","? ;
THIS ::= "this" ;
initializedIdentifier ::= identifier ("=" expression)? ;
TRY ::= "try" ;
CATCH ::= "catch" ;
LIBRARY ::= "library" ;
functionBody ::= ("=>" expression ";") | block ;
MULTI_LINE_STRING ::= (""""" α* """"") | ("\'\'\'" α* "\'\'\'") ;
functionBodyOrNative ::= (NATIVE functionBody) | functionNative | functionBody ;
VOID ::= "void" ;
normalFormalParameter ::= functionDeclaration | fieldFormalParameter | simpleFormalParameter ;
namedFormalParameters ::= "[" defaultFormalParameter ("," defaultFormalParameter)* "]" ;
assignmentOperator ::= "=" | "*=" | "/=" | "~/=" | "%=" | "+=" | "-=" | "<<=" | ">>>=" | ">>=" | "&=" | "^=" | "|=" ;
additiveOperator ::= "+" | "-" ;
functionExpression ::= (returnType? identifier)? formalParameterList functionExpressionBody ;
typeParameter ::= identifier (EXTENDS type)? ;
multiplicativeExpression ::= (unaryExpression (multiplicativeOperator unaryExpression)*) | (SUPER (multiplicativeOperator unaryExpression)+) ;
TRUE ::= "true" ;
DO ::= "do" ;
functionPrefix ::= returnType? identifier ;
returnType ::= VOID | type ;
fieldInitializer ::= (THIS ".")? identifier "=" conditionalExpression ;
NULL ::= "null" ;
compoundLiteral ::= listLiteral | mapLiteral ;
switchCase ::= label? (CASE expression ":")+ statements ;
logicalOrExpression ::= logicalAndExpression ("||" logicalAndExpression)* ;
additiveExpression ::= (multiplicativeExpression (additiveOperator multiplicativeExpression)*) | (SUPER (additiveOperator multiplicativeExpression)+) ;
declaredIdentifier ::= (FINAL type? identifier) | (VAR identifier) | (type identifier) ;
normalFormalParameterTail ::= ("," namedFormalParameters) | ("," normalFormalParameter normalFormalParameterTail?) ;
functionDeclaration ::= returnType? identifier formalParameterList ;
NEW ::= "new" ;
mapLiteralEntry ::= STRING ":" expression ;
userDefinableOperator ::= multiplicativeOperator | additiveOperator | shiftOperator | relationalOperator | bitwiseOperator | "==" | "~" | NEGATE | ("[" "]") | ("[" "]" "=") ;
EXTENDS ::= "extends" ;
NEWLINE ::= "\n" | "\r" ;
staticFinalDeclarationList ::= staticFinalDeclaration ("," staticFinalDeclaration)* ;
libraryDefinition ::= LIBRARY "{" libraryBody "}" ;
STATIC ::= "static" ;
interfaceDefinition ::= INTERFACE identifier typeParameters? superinterfaces? factorySpecification? "{" interfaceMemberDefinition* "}" ;
TYPEDEF ::= "typedef" ;
simpleFormalParameter ::= declaredIdentifier | identifier ;
FINALLY ::= "finally" ;
primaryNoFE ::= THIS | (SUPER assignableSelector) | literal | identifier | (CONST? typeArguments? compoundLiteral) | (NEW | CONST type ("." identifier)? arguments) | expressionInParentheses ;
variableDeclaration ::= declaredIdentifier ("," identifier)* ;
constantExpression ::= expression ;
SUPER ::= "super" ;
CLASS ::= "class" ;
prefixOperator ::= additiveOperator | negateOperator ;
FINAL ::= "final" ;
expressionList ::= expression ("," expression)* ;
functionExpressionBody ::= ("=>" expression) | block ;
catchPart ::= CATCH "(" declaredIdentifier ("," declaredIdentifier)? ")" block ;
nonLabelledStatement ::= block | (initializedVariableDeclaration ";") | iterationStatement | selectionStatement | tryStatement | (BREAK identifier? ";") | (CONTINUE identifier? ";") | (RETURN expression? ";") | (THROW expression? ";") | (expression? ";") | (ASSERT "(" conditionalExpression ")" ";") | (functionDeclaration functionBody) ;
NUMBER ::= (DIGIT+ NUMBER_OPT_FRACTIONAL_PART EXPONENT? NUMBER_OPT_ILLEGAL_END) | ("." DIGIT+ EXPONENT? NUMBER_OPT_ILLEGAL_END) ;
logicalAndExpression ::= bitwiseOrExpression ("&&" bitwiseOrExpression)* ;
shiftOperator ::= "<<" | ">>>" | ">>" ;
ASSERT ::= "assert" ;
HASHBANG ::= "#!" α* NEWLINE? ;
SINGLE_LINE_STRING ::= (""" STRING_CONTENT_DQ* """) | ("\'" STRING_CONTENT_SQ* "\'") | ("@" "\'" α* "\'") | ("@" """ α* """) ;
selectionStatement ::= (IF "(" expression ")" statement (ELSE statement)?) | (SWITCH "(" expression ")" "{" switchCase* defaultCase? "}") ;
CONST ::= "const" ;
SET ::= "set" ;
primaryFE ::= functionExpression | primaryNoFE ;
assignableExpression ::= (primary (arguments* assignableSelector)+) | (SUPER assignableSelector) | identifier ;
libraryImport ::= IMPORT "=" "[" importReferences? "]" ;
functionTypeAlias ::= TYPEDEF functionPrefix typeParameters? formalParameterList ";" ;
typeArguments ::= "<" typeList ">" ;
postfixOperator ::= incrementOperator ;
ELSE ::= "else" ;
formalParameterList ::= ("(" namedFormalParameters? ")") | ("(" normalFormalParameter normalFormalParameterTail? ")") ;
GET ::= "get" ;
SWITCH ::= "switch" ;
incrementOperator ::= "++" | "--" ;
equalityExpression ::= (relationalExpression (equalityOperator relationalExpression)?) | (SUPER equalityOperator relationalExpression) ;
listLiteral ::= "[" (expressionList ","?)? "]" ;
CASE ::= "case" ;
RETURN ::= "return" ;
constInitializedVariableDeclaration ::= declaredIdentifier ("=" constantExpression)? ("," constInitializedIdentifier)* ;
IDENTIFIER_START ::= IDENTIFIER_START_NO_DOLLAR | "$" ;
IS ::= "is" ;
unaryExpression ::= postfixExpression | (prefixOperator unaryExpression) | (negateOperator SUPER) | ("-" SUPER) | (incrementOperator assignableExpression) ;
importReference ::= (IDENTIFIER ":")? STRING ;
LETTER ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ;
classMemberDefinition ::= (declaration ";") | (constructorDeclaration ";") | (methodDeclaration functionBodyOrNative) | (CONST factoryConstructorDeclaration functionNative) ;
IN ::= "in" ;
ABSTRACT ::= "abstract" ;
DEFAULT ::= "default" ;
STRING_CONTENT_DQ ::= α | ("\\" α) ;
constructorDeclaration ::= (identifier formalParameterList (redirection | initializers)?) | (namedConstructorDeclaration (redirection | initializers)?) ;
fieldFormalParameter ::= finalVarOrType? THIS "." identifier ;
relationalExpression ::= (shiftExpression ((isOperator type) | (relationalOperator shiftExpression))?) | (SUPER relationalOperator shiftExpression) ;
bitwiseAndExpression ::= (equalityExpression ("&" equalityExpression)*) | (SUPER ("&" equalityExpression)+) ;
IF ::= "if" ;
SOURCE ::= "source" ;
multiplicativeOperator ::= "*" | "/" | "%" | "~/" ;
factorySpecification ::= FACTORY type ;
INTERFACE ::= "interface" ;
NATIVE ::= "native" ;
forInitializerStatement ::= (initializedVariableDeclaration ";") | (expression? ";") ;
finallyPart ::= FINALLY block ;
namedArgument ::= label expression ;
iterationStatement ::= (WHILE "(" expression ")" statement) | (DO statement WHILE "(" expression ")" ";") | (FOR "(" forLoopParts ")" statement) ;
defaultCase ::= label? (CASE expression ":")* DEFAULT ":" statements ;
WHILE ::= "while" ;
STRING ::= ("@"? MULTI_LINE_STRING) | SINGLE_LINE_STRING ;
functionNative ::= NATIVE STRING? ";" ;
importReferences ::= importReference ("," importReference)* ","? ;
HEX_NUMBER ::= ("0x" HEX_DIGIT+) | ("0X" HEX_DIGIT+) ;
DIGIT ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
VAR ::= "var" ;
IDENTIFIER_PART_NO_DOLLAR ::= IDENTIFIER_START_NO_DOLLAR | DIGIT ;
FALSE ::= "false" ;
NEGATE ::= "negate" ;
--------------------dart::spec-0.05.bgf--------------------
argumentList ::= (namedArgument ("," namedArgument)*) | (expressionList ("," namedArgument)*) ;
setterSignature ::= "static"? returnType? "set" identifier formalParameterList ;
defaultFormalParameter ::= normalFormalParameter ("=" constantExpression)? ;
typeList ::= type ("," type)* ;
bitwiseOperator ::= "&" | "^" | "|" ;
tryStatement ::= "try" block (catchPart+ finallyPart?) | finallyPart ;
unaryOperator ::= negateOperator ;
STRING_CONTENT_SQ ::= ("~" "\\" | "\'" | "$" | NEWLINE) | ("\\" "~" NEWLINE) | STRING_INTERPOLATION ;
isOperator ::= "is" "!"? ;
finalVarOrType ::= ("final" type?) | "var" | type ;
postfixExpression ::= (assignableExpression postfixOperator) | (primary selector*) ;
getterSignature ::= "static"? returnType? "get" identifier formalParameterList ;
relationalOperator ::= ">=" | ">" | "<=" | "<" ;
classDefinition ::= "class" identifier typeParameters? superclass? interfaces? "{" classMemberDefinition* "}" ;
initializedVariableDeclaration ::= declaredIdentifier ("=" expression)? ("," initializedIdentifier)* ;
compilationUnit ::= topLevelDefinition* EOF ;
libraryName ::= "#" "library" "(" stringLiteral ")" ";" ;
interfaceMemberDefinition ::= ("static" "final" type? initializedIdentifierList ";") | (functionSignature ";") | (constantConstructorSignature ";") | (namedConstructorSignature ";") | (getterSignature ";") | (setterSignature ";") | (operatorSignature ";") | (variableDeclaration ";") ;
IDENTIFIER_NO_DOLLAR ::= IDENTIFIER_START_NO_DOLLAR IDENTIFIER_PART_NO_DOLLAR* ;
superCallOrFieldInitializer ::= ("super" arguments) | ("super" "." identifier arguments) | fieldInitializer ;
topLevelDefinition ::= classDefinition | interfaceDefinition | functionTypeAlias | (functionSignature functionBody) | (returnType? getOrSet identifier formalParameterList functionBody) | ("final" type? staticFinalDeclarationList ";") | (variableDeclaration ";") ;
BUILT_IN_IDENTIFIER ::= "abstract" | "assert" | "Dynamic" | "factory" | "get" | "implements" | import | "interface" | "library" | "negate" | operator | "set" | "source" | "static" | "typedef" ;
numericLiteral ::= NUMBER | HEX_NUMBER ;
constructorSignature ::= (identifier formalParameterList) | namedConstructorSignature ;
methodSignature ::= factoryConstructorSignature | ("static" functionSignature) | getterSignature | setterSignature | operatorSignature | (functionSignature initializers?) | (namedConstructorSignature initializers?) ;
thisExpression ::= "this" ;
STRING_INTERPOLATION ::= ("$" IDENTIFIER_NO_DOLLAR) | ("$" "{" "Expression" "}") ;
forLoopParts ::= (forInitializerStatement expression? ";" expressionList?) | (declaredIdentifier "in" expression) | (identifier "in" expression) ;
ifStatement ::= "if" "(" expression ")" statement ("else" statement)? ;
scriptTag ::= "#!" ("~" NEWLINE)* NEWLINE ;
HEX_DIGIT ::= ("a" "." "." "f") | ("A" "." "." "F") | DIGIT ;
IDENTIFIER_PART ::= IDENTIFIER_START | DIGIT ;
assertStatement ::= "assert" "(" conditionalExpression ")" ";" ;
getOrSet ::= "get" | "set" ;
assignableSelector ::= ("[" expression "]") | ("." identifier) ;
negateOperator ::= "!" | "~" ;
binaryOperator ::= multiplicativeOperator | additiveOperator | shiftOperator | relationalOperator | equalityOperator | bitwiseOperator ;
typeParameters ::= "<" typeParameter ("," typeParameter)* ">" ;
functionSignature ::= returnType? identifier formalParameterList ;
ESCAPE_SEQUENCE ::= "\n" | "\r" | "\f" | "\b" | "\t" | "\v" | ("\x" HEX_DIGIT HEX_DIGIT) | ("\u" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT) | ("\u{" HEX_DIGIT_SEQUENCE "}") ;
equalityOperator ::= "==" | "!=" | "===" | "!==" ;
conditionalExpression ::= logicalOrExpression ("?" expression ":" expression)? ;
shiftExpression ::= (additiveExpression (shiftOperator additiveExpression)*) | ("super" (shiftOperator additiveExpression)+) ;
constObjectExpression ::= "const" type ("." identifier)? arguments ;
expressionStatement ::= expression? ";" ;
namedConstructorSignature ::= identifier "." identifier formalParameterList ;
mapLiteral ::= "const"? typeArguments? "{" (mapLiteralEntry ("," mapLiteralEntry)* ","?)? "}" ;
EXPONENT ::= "e" | "E" ("+" | "-")? DIGIT+ ;
bitwiseOrExpression ::= (bitwiseXorExpression ("|" bitwiseXorExpression)*) | ("super" ("|" bitwiseXorExpression)+) ;
IDENTIFIER ::= IDENTIFIER_START IDENTIFIER_PART* ;
IDENTIFIER_START_NO_DOLLAR ::= "LETTER" | "_" ;
forStatement ::= "for" "(" forLoopParts ")" statement ;
bitwiseXorExpression ::= (bitwiseAndExpression ("^" bitwiseAndExpression)*) | ("super" ("^" bitwiseAndExpression)+) ;
constantConstructorSignature ::= "const" qualified formalParameterList ;
initializedIdentifier ::= identifier ("=" expression)? ;
compoundAssignmentOperator ::= "*=" | "/=" | "~/=" | "%=" | "+=" | "-=" | "<<=" | ">>>=" | ">>=" | "&=" | "^=" | "|=" ;
switchStatement ::= "switch" "(" expression ")" "{" switchCase* defaultCase? "}" ;
functionBody ::= ("=>" expression ";") | block ;
MULTI_LINE_STRING ::= (""""" ("~" """"")* """"") | ("'''" ("~" "'''")* "'''") ;
normalFormalParameter ::= functionSignature | fieldFormalParameter | simpleFormalParameter ;
namedFormalParameters ::= "[" defaultFormalParameter ("," defaultFormalParameter)* "]" ;
assignmentOperator ::= "=" | compoundAssignmentOperator ;
additiveOperator ::= "+" | "-" ;
functionExpression ::= (returnType? identifier)? formalParameterList functionExpressionBody ;
typeParameter ::= identifier ("extends" type)? ;
multiplicativeExpression ::= (unaryExpression (multiplicativeOperator unaryExpression)*) | ("super" (multiplicativeOperator unaryExpression)+) ;
SINGLE_LINE_COMMENT ::= "//" "~" NEWLINE* NEWLINE? ;
functionPrefix ::= returnType? identifier ;
returnType ::= "void" | type ;
fieldInitializer ::= ("this" ".")? identifier "=" conditionalExpression ;
continueStatement ::= "continue" identifier? ";" ;
switchCase ::= label? ("case" expression ":")+ statements ;
additiveExpression ::= (multiplicativeExpression (additiveOperator multiplicativeExpression)*) | ("super" (additiveOperator multiplicativeExpression)+) ;
logicalOrExpression ::= logicalAndExpression ("||" logicalAndExpression)* ;
declaredIdentifier ::= finalVarOrType identifier ;
mapLiteralEntry ::= (identifier ":" expression) | (stringLiteral ":" expression) ;
scriptDefinition ::= scriptTag? libraryName? import* include* resource* topLevelDefinition* ;
WHITESPACE ::= ("\t" | " " | NEWLINE)+ ;
HEX_DIGIT_SEQUENCE ::= HEX_DIGIT HEX_DIGIT? HEX_DIGIT? HEX_DIGIT? HEX_DIGIT? HEX_DIGIT? HEX_DIGIT? ;
NEWLINE ::= "\n" | "\r" ;
operatorSignature ::= returnType? operator operator formalParameterList ;
staticFinalDeclarationList ::= staticFinalDeclaration ("," staticFinalDeclaration)* ;
libraryDefinition ::= scriptTag? libraryName import* include* resource* topLevelDefinition* ;
interfaceDefinition ::= "interface" identifier typeParameters? superinterfaces? factorySpecification? "{" interfaceMemberDefinition* "}" ;
simpleFormalParameter ::= declaredIdentifier | identifier ;
booleanLiteral ::= "true" | "false" ;
stringLiteral ::= ("@"? MULTI_LINE_STRING) | SINGLE_LINE_STRING ;
variableDeclaration ::= declaredIdentifier ("," identifier)* ;
MULTI_LINE_COMMENT ::= "/*" (MULTI_LINE_COMMENT | ("~" "*/"))* "*/" ;
newExpression ::= "new" type ("." identifier)? arguments ;
expressionList ::= expression ("," expression)* ;
prefixOperator ::= "-" | negateOperator ;
functionExpressionBody ::= ("=>" expression) | block ;
catchPart ::= "catch" "(" simpleFormalParameter ("," simpleFormalParameter)? ")" block ;
nonLabelledStatement ::= block | (initializedVariableDeclaration ";") | forStatement | whileStatement | doStatement | switchStatement | ifStatement | tryStatement | breakStatement | continueStatement | returnStatement | throwStatement | expressionStatement | assertStatement | (functionSignature functionBody) ;
NUMBER ::= ("+"? DIGIT+ ("." DIGIT+)? EXPONENT?) | ("+"? "." DIGIT+ EXPONENT?) ;
logicalAndExpression ::= bitwiseOrExpression ("&&" bitwiseOrExpression)* ;
shiftOperator ::= "<<" | ">>>" | ">>" ;
SINGLE_LINE_STRING ::= (""" STRING_CONTENT_DQ* """) | ("'" STRING_CONTENT_SQ* "'") | ("@' ' '" ("~" "'" | NEWLINE)* "'") | ("@" """ ("~" """ | NEWLINE)* """) ;
assignableExpression ::= (primary (arguments* assignableSelector)+) | ("super" assignableSelector) | identifier ;
normalFormalParameters ::= normalFormalParameter ("," normalFormalParameter)* ;
whileStatement ::= "while" "(" expression ")" statement ;
functionTypeAlias ::= "typedef" functionPrefix typeParameters? formalParameterList ";" ;
typeArguments ::= "<" typeList ">" ;
postfixOperator ::= incrementOperator ;
formalParameterList ::= ("(" ")") | ("(" normalFormalParameters ("," namedFormalParameters)? ")") | ("(" namedFormalParameters ")") ;
incrementOperator ::= "++" | "--" ;
equalityExpression ::= (relationalExpression (equalityOperator relationalExpression)?) | ("super" equalityOperator relationalExpression) ;
listLiteral ::= "const"? typeArguments? "[" (expressionList ","?)? "]" ;
breakStatement ::= "break" identifier? ";" ;
IDENTIFIER_START ::= IDENTIFIER_START_NO_DOLLAR | "$" ;
throwStatement ::= "throw" expression? ";" ;
nullLiteral ::= "null" ;
unaryExpression ::= (prefixOperator unaryExpression) | postfixExpression | (unaryOperator "super") | ("-" "super") | (incrementOperator assignableExpression) ;
classMemberDefinition ::= (declaration ";") | (methodSignature functionBody) ;
doStatement ::= "do" statement "while" "(" expression ")" ";" ;
STRING_CONTENT_DQ ::= ("~" "\\" | """ | "$" | NEWLINE) | ("\\" "~" NEWLINE) | STRING_INTERPOLATION ;
fieldFormalParameter ::= finalVarOrType? "this" "." identifier ;
returnStatement ::= "return" expression? ";" ;
relationalExpression ::= (shiftExpression ((isOperator type) | (relationalOperator shiftExpression))?) | ("super" relationalOperator shiftExpression) ;
bitwiseAndExpression ::= (equalityExpression ("&" equalityExpression)*) | ("super" ("&" equalityExpression)+) ;
multiplicativeOperator ::= "*" | "/" | "%" | "~/" ;
factorySpecification ::= "factory" qualified typeParameters? ;
forInitializerStatement ::= (initializedVariableDeclaration ";") | (expression? ";") ;
finallyPart ::= "finally" block ;
namedArgument ::= label expression ;
defaultCase ::= label? ("case" expression ":")* "default" ":" statements ;
DIGIT ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
HEX_NUMBER ::= ("0x" HEX_DIGIT+) | ("0X" HEX_DIGIT+) ;
factoryConstructorSignature ::= "factory" qualified typeParameters? ("." identifier)? formalParameterList ;
IDENTIFIER_PART_NO_DOLLAR ::= IDENTIFIER_START_NO_DOLLAR | DIGIT ;
--------------------eiffel::bezault.bgf--------------------
Entity_declaration_list ::= (Entity_declaration_group ";")* ;
New_export_item ::= Clients Feature_set ;
Boolean_constant ::= "True" | "False" ;
Assignment_attempt ::= Writable "?=" Expression ;
Feature_set ::= Feature_list | "all" ;
Bit_length ::= Integer_constant | Attribute ;
Feature_clause ::= Clients? Header_comment? Feature_declaration_list ;
Class_type_expanded ::= "expanded" Class_type ;
Binary_expression ::= Expression Infix_operator Expression ;
Null_instruction ::= ε ;
Operator_expression ::= Parenthesized | Unary_expression | Binary_expression ;
Parent_list ::= (Parent ";")* ;
Call_target ::= Parenthesized | "Result" | "Current" | Precursor ;
Tag_mark ::= Tag ":" ;
Language_name ::= Manifest_string ;
Actual_generics ::= Type_list? ;
Assertion_clause ::= Tag_mark? Unlabeled_assertion_clause ;
Manifest_array ::= "<<" Expression_list ">>" ;
Then_part_list ::= (Then_part "elseif")+ ;
Feature_list ::= (Feature_name ",")* ;
Declaration_body ::= Formal_arguments? Type_mark? Constant_or_routine? ;
Type_list ::= (Type ",")* ;
Choice_constant ::= Integer_constant | Character_constant | Attribute ;
Class_type_separate ::= "separate" Class_type ;
Rename_list ::= (Rename_pair ",")* ;
External_name ::= "alias" Manifest_string ;
Routine_body ::= Effective | Deferred ;
Address_mark ::= Feature_name | "Current" | "Result" ;
Wide_manifest_string ::= "$" Manifest_string ;
Identifier_list ::= (Identifier ",")+ ;
Feature_name ::= Identifier | Prefix | Infix ;
Class_header ::= Header_mark? "class" Class_name ;
Debug_key ::= Manifest_string ;
Infix_operator ::= Binary | Free_operator ;
Bit_type ::= "BIT" Bit_length ;
Unary_expression ::= Prefix_operator Expression ;
Feature_value ::= Manifest_constant | Unique | Routine ;
Wide_character_constant ::= "$" Character_constant ;
Expression_list ::= (Expression ",")* ;
When_part_list ::= "when" (When_part "when")+ ;
Constant_or_routine ::= "is" Feature_value ;
Qualified_call ::= Call_qualifier? Call_chain ;
Class_type ::= Class_name Actual_generics? ;
Call_chain ::= (Unqualified_call ".")+ ;
Entity_declaration_group ::= Identifier_list Type_mark ;
Loop_body ::= Exit "loop" Compound ;
Parent_qualification ::= "{" Class_name "}" ;
Index_terms ::= (Index_value ",")+ ;
When_part ::= Choices "then" Compound ;
New_feature ::= "frozen"? Feature_name ;
Formal_generic_list ::= (Formal_generic ",")* ;
Then_part ::= Boolean_expression "then" Compound ;
Unlabeled_assertion_clause ::= Boolean_expression | Comment ;
Boolean_expression ::= Expression ;
Creation_clause ::= Clients? Header_comment? Procedure_list ;
Local_declarations ::= "local" Entity_declaration_list ;
Formal_generics ::= Formal_generic_list? ;
Procedure_list ::= (Procedure_name ",")* ;
Call_qualifier ::= Call_target "." ;
Formal_generic ::= Formal_generic_name Constraint? ;
Formal_arguments ::= "(" Entity_declaration_list ")" ;
New_feature_list ::= (New_feature ",")+ ;
Integer_constant ::= Sign? Integer ;
Class_list ::= (Class_name ",")* ;
Index_value ::= Identifier | Manifest_constant ;
Formal_generic_name ::= Identifier ;
Header_mark ::= "deferred" | "expanded" | "separate" ;
Creation_call ::= "." Procedure_name Actuals? ;
Feature_adaptation ::= Rename? New_exports? Undefine? Redefine? Select? "end" ;
Index_clause ::= Index? Index_terms ;
Rename_pair ::= Feature_name "as" Feature_name ;
Unqualified_call ::= Identifier Actuals? ;
Else_part ::= "else" Compound ;
Procedure_name ::= Identifier ;
Manifest_constant ::= Boolean_constant | Character_constant | Integer_constant | Real_constant | Manifest_string | Bit_constant | Wide_character_constant | Wide_manifest_string | Hexadecimal_constant ;
Class_declaration ::= Indexing? Class_header Formal_generics? Obsolete? Inheritance? Creators? Features? Invariant? "end" ("--" "class" Class_name)? ;
Type_mark ::= ":" Type ;
Class_name ::= Identifier ;
Prefix_operator ::= Unary | Free_operator ;
Feature_declaration ::= New_feature_list Declaration_body ;
Actual_list ::= (Actual ",")* ;
Feature_declaration_list ::= (Feature_declaration ";")* ;
Index_list ::= (Index_clause ";")* ;
Debug_key_list ::= (Debug_key ",")* ;
New_export_list ::= (New_export_item ";")* ;
Routine_mark ::= "do" | "once" ;
Multi_branch ::= "inspect" Expression When_part_list? Else_part? "end" ;
Real_constant ::= Sign? Real ;
Attribute_list ::= (Attribute ",")* ;
Debug_keys ::= "(" Debug_key_list ")" ;
New_exports ::= "export" New_export_list ;
--------------------eiffel::cordy.bgf--------------------
Entity_declaration_list ::= IN NL Entity_declaration_group_Separator* EX ;
New_export_item ::= Clients Feature_set ;
Restricted_type ::= Restricted_class_type | Formal_generic_name ;
Boolean_constant ::= "true" | "false" ;
Assignment_attempt ::= Writable "?=" Expression ;
Feature_set ::= Feature_list | "all" ;
Prefix_name ::= Manifest_string ;
Feature_clause ::= Header_comment? Feature_declaration_list ;
Free_operator ::= free_operator ;
Class_type_expanded ::= "expanded" Class_type ;
Binary_expression ::= Unary_expression Infix_operator_Unary_expression* ;
Operator_expression ::= Parenthesized | Binary_expression ;
when_When_part ::= "when" When_part ;
Parent_list ::= Parent_Separator* ;
Language_name ::= Manifest_string ;
Tag_mark ::= Tag ":" ;
Formal_entity_declaration_list ::= Formal_entity_declaration_group_Separator* ;
Actual_generics ::= "[" Type_list "]" ;
Assertion_clause ::= Tag_mark? Unlabeled_assertion_clause ;
Manifest_array ::= "<<" Expression_list ">>" ;
Then_part_list ::= Then_part elseif_Then_part* ;
Declaration_body ::= Formal_arguments? Type_mark? is_Constant? ;
Feature_list ::= IN NL {Feature_name ","}* EX ;
Restricted_class_type ::= Class_name Restricted_actual_generics? ;
Type_list ::= {Type ","}* ;
Index_clause_Separator ::= Index_clause Separator ;
Constant_attribute ::= Entity ;
feature_Feature_clause ::= NL "feature" Clients? Feature_clause ;
External_name ::= "alias" Manifest_string ;
Rename_list ::= {Rename_pair ","}* ;
Comparison_Operator_expression ::= Comparison Operator_expression ;
Routine_body ::= Effective | Deferred ;
Address_mark ::= Feature_name | "Current" | "Result" ;
Identifier_list ::= Identifier+ ;
Feature_name ::= Identifier | Prefix | Infix ;
Class_header ::= Header_mark? "class" Class_name ;
Bit_sequence ::= bit_sequence ;
Infix_operator ::= Binary | Free_operator ;
Debug_key ::= Manifest_string ;
dot_Unqualified_call ::= "." Unqualified_call ;
creation_Creation_clause ::= NL "creation" Creation_clause ;
Header_comment ::= Comment ;
elseif_Then_part ::= "elseif" Then_part ;
Bit_type ::= "BIT" Constant ;
Restricted_actual_generics ::= "[" Restricted_type_list "]" ;
Unary_expression ::= Prefix_operator* Primitive_expression ;
Feature_value ::= Manifest_constant | Unique ;
Parenthesized_qualifier ::= Parenthesized "." ;
Expression_list ::= {Expression ","}* ;
When_part_list ::= when_When_part+ ;
Class_type ::= Class_name Actual_generics? ;
Call_chain ::= Unqualified_call dot_Unqualified_call* ;
Restricted_type_list ::= {Restricted_type ","}* ;
Entity_declaration_group ::= Identifier_list Type_mark ;
Loop_body ::= Exit NL "loop" Compound ;
Infix_name ::= Manifest_string ;
Index_terms ::= {Index_value ","}* ;
is_Constant ::= "is" Feature_value ;
When_part ::= Choices "then" Compound ;
New_feature ::= "frozen"? Feature_name ;
Bit_constant ::= Bit_sequence ;
Formal_generic_list ::= {Formal_generic ","}* ;
Then_part ::= Boolean_expression "then" Compound ;
Infix_operator_Unary_expression ::= Infix_operator Unary_expression ;
Instruction_Separator ::= Instruction Separator ;
Assertion_clause_Separator ::= Assertion_clause Separator ;
Unlabeled_assertion_clause ::= Boolean_expression | Comment ;
Boolean_expression ::= Expression ;
Creation_clause ::= Clients? Header_comment? Feature_list NL ;
Local_declarations ::= "local" Entity_declaration_list ;
Formal_generics ::= "[" Formal_generic_list "]" ;
Formal_generic ::= Formal_generic_name Constraint? ;
Formal_arguments ::= "(" Formal_entity_declaration_list ")" ;
New_feature_list ::= New_feature+ ;
Integer_constant ::= Sign? Integer ;
Class_list ::= {Class_name ","}* ;
Index_value ::= (Identifier+) | Manifest_constant ;
Formal_generic_name ::= Identifier ;
Header_mark ::= "deferred" | "expanded" ;
Creation_call ::= "." Unqualified_call ;
Feature_adaptation ::= NL IN Rename? New_exports? Undefine? Redefine? Select? EX "end" ;
Index_clause ::= Index? Index_terms ;
Rename_pair ::= Feature_name "as" Feature_name ;
Character_constant ::= character_constant ;
Unqualified_call ::= Entity Actuals? ;
Else_part ::= "else" Compound ;
Feature_declaration_Separator ::= (Feature_declaration Separator) | (Routine_feature_declaration Separator) ;
Routine_feature_declaration ::= NL New_feature_list Routine_declaration_body ;
Read_only ::= Formal | "Current" ;
Manifest_constant ::= Boolean_constant | Character_constant | Integer_constant | Real_constant | Manifest_string | Bit_constant ;
Formal_entity_declaration_group_Separator ::= Entity_declaration_group ";"? ;
Class_declaration ::= Indexing? NL Class_header Formal_generics? NL IN Obsolete? Inheritance? Creators? Features? Invariant? EX "end" ;
Type_mark ::= ":" Type ;
Class_name ::= Identifier ;
Prefix_operator ::= Unary | Free_operator ;
Feature_declaration ::= New_feature_list Declaration_body ;
Primitive_expression ::= Call | Manifest_constant | Manifest_array | Old | Strip | Parenthesized ;
Parent_Separator ::= Parent Separator ;
Actual_list ::= {Actual ","}* ;
is_Routine ::= "is" NL Routine ;
Feature_declaration_list ::= IN NL Feature_declaration_Separator* EX ;
Index_list ::= NL IN Index_clause_Separator* EX ;
Debug_key_list ::= {Debug_key ","}* ;
New_export_list ::= New_export_item_Separator* ;
Multi_branch ::= "inspect" Expression When_part_list? Else_part? "end" ;
Routine_mark ::= "do" | "once" ;
Real_constant ::= Sign? Real ;
New_export_item_Separator ::= New_export_item Separator ;
Entity_declaration_group_Separator ::= Entity_declaration_group Separator ;
Routine_declaration_body ::= Formal_arguments? Type_mark? is_Routine? ;
Manifest_string ::= string ;
Attribute_list ::= {Identifier ","}* ;
Debug_keys ::= "(" Debug_key_list ")" ;
New_exports ::= "export" New_export_list NL ;
--------------------eiffel::iso-25436-2006.bgf--------------------
Comment_break ::= New_line Blanks_or_tabs? "--" ;
Entity_declaration_list ::= {Entity_declaration_group ";"}+ ;
Inline_agent ::= "agent" Formal_arguments? Type_mark? Attribute_or_routine? Agent_actuals? ;
Special_expression ::= Manifest_constant | Manifest_tuple | Agent | Object_test | Once_string | Address ;
Call_agent_body ::= Agent_qualified | Agent_unqualified ;
Converter_list ::= {Converter ","}+ ;
Boolean_constant ::= "True" | "False" ;
Feature_clause ::= "feature" Clients? Header_comment? Feature_declaration_list ;
Operator_expression ::= Unary_expression | Binary_expression ;
Parent_list ::= {Parent ";"}+ ;
Basic_manifest_string ::= """ String_content """ ;
Explicit_creation_type ::= "{" Type "}" ;
Note_values ::= {Note_item ","}+ ;
Actual_generics ::= "[" Type_list "]" ;
Tuple_parameter_list ::= "[" Tuple_parameters "]" ;
Then_part_list ::= {Then_part "elseif"}+ ;
DLL_external ::= """ "dll" "windows"? DLL_identifier DLL_index? External_signature? External_file_use? """ ;
Constant_attribute ::= Feature_name ;
Tuple_parameters ::= Type_list | Entity_declaration_list ;
Constant_interval ::= Constant ".." Constant ;
Rename_list ::= {Rename_pair ","}+ ;
Creation_expression ::= "create" Explicit_creation_type Explicit_creation_call? ;
Manifest_tuple ::= "[" Expression_list "]" ;
Open_bracket ::= "[" | "{" ;
Header_comment ::= Comment ;
Non_object_call ::= "{" Type "}." Unqualified_call ;
Creation_procedure_list ::= {Creation_procedure ","}+ ;
Constraint_creators ::= "create" Feature_list "end" ;
Agent_unqualified ::= Feature_name Agent_actuals? ;
Unary_expression ::= Unary Expression ;
Feature_value ::= Explicit_value? Obsolete? Header_comment? Attribute_or_routine? ;
Explicit_value ::= "=" Manifest_constant ;
When_part_list ::= When_part+ ;
Expression_list ::= {Expression ","}* ;
Agent_qualified ::= Agent_target "." Agent_unqualified ;
Assigner_call ::= Expression ":=" Expression ;
Class_type ::= Attachment_mark? Class_name Actual_generics? ;
Variable_attribute ::= Feature_name ;
When_part ::= "when" Choices "then" Compound ;
Then_part ::= Boolean_expression "then" Compound ;
Digit_sequence ::= Digit+ ;
Integer_base_letter ::= "b" | "c" | "x" | "B" | "C" | "X" ;
Bracket_expression ::= Bracket_target "[" Actuals "]" ;
Creation_clause ::= "create" Clients? Header_comment? Creation_procedure_list ;
Local_declarations ::= "local" Entity_declaration_list? ;
Formal_generics ::= "[" Formal_generic_list "]" ;
Note_list ::= {Note_entry ";"}* ;
Formal_generic ::= "frozen"? Formal_generic_name Constraint? ;
New_feature_list ::= {New_feature ","}+ ;
Integer_constant ::= Sign? Integer ;
Constraint_list ::= {Single_constraint ","}+ ;
Creation_call ::= Variable Explicit_creation_call? ;
Key_list ::= {Manifest_string ","}+ ;
Note_name ::= Identifier ":" ;
DLL_index ::= Integer ;
Read_only ::= Formal | Constant_attribute | "Current" ;
Parenthesized_target ::= "(|" Expression "|)" ;
Manifest_constant ::= Manifest_type? Manifest_value ;
Creation_procedure ::= Feature_name ;
Type_mark ::= ":" Type ;
Feature_declaration ::= New_feature_list Declaration_body ;
Actual_list ::= {Expression ","}+ ;
Feature_declaration_list ::= {Feature_declaration ";"}* ;
Multi_branch ::= "inspect" Expression When_part_list? Else_part? "end" ;
Routine_mark ::= "do" | Once ;
Class_or_tuple_type ::= Class_type | Tuple_type ;
Manifest_value ::= Boolean_constant | Character_constant | Integer_constant | Real_constant | Manifest_string | Manifest_type ;
New_exports ::= "export" New_export_list ;
Conversion_query ::= Feature_name ":{" Type_list "}" ;
New_export_item ::= Clients Header_comment? Feature_set ;
Feature_set ::= Feature_list | "all" ;
Binary_expression ::= Expression Binary Expression ;
Object_test ::= "{" Identifier ":" Type "}" Expression ;
Tag_mark ::= Tag ":" ;
Tuple_type ::= "TUPLE" Tuple_parameter_list? ;
Once_string ::= "once" Manifest_string ;
Assertion_clause ::= Tag_mark? Unlabeled_assertion_clause ;
String_content ::= {Simple_string Line_wrapping_part}+ ;
Feature_body ::= Deferred | Effective_routine | Attribute ;
Basic_expression ::= Read_only | Local | Call | Precursor | Equality | Parenthesized | Old | Operator_expression | Bracket_expression | Creation_expression ;
Feature_list ::= {Feature_name ","}+ ;
Declaration_body ::= Formal_arguments? Query_mark? Feature_value? ;
Constraining_types ::= Single_constraint | Multiple_constraint ;
External_signature ::= "signature" External_argument_types? (":" External_type)? ;
Type_list ::= {Type ","}+ ;
External_name ::= "alias" Manifest_string ;
Exit_condition ::= "until" Boolean_expression ;
Extended_feature_name ::= Feature_name Alias? ;
Registered_language ::= C_external | CPP_external | DLL_external ;
Agent_actual_list ::= {Agent_actual ","}+ ;
Identifier_list ::= {Identifier ","}+ ;
Feature_name ::= Identifier ;
Class_header ::= Header_mark? "class" Class_name ;
Inherit_clause ::= "inherit" Non_conformance? Parent_list ;
Integer_base ::= "0" Integer_base_letter ;
External_file ::= External_user_file | External_system_file ;
Creation_instruction ::= "create" Explicit_creation_type? Creation_call ;
Multiple_constraint ::= "{" Constraint_list "}" ;
External_argument_types ::= "(" External_type_list ")" ;
Agent_actuals ::= "(" Agent_actual_list ")" ;
Attachment_mark ::= "?" | "!" ;
C_external ::= """ "C" "inline"? External_signature? External_file_use? """ ;
Close_bracket ::= "]" | "}" ;
Verbatim_string_closer ::= Close_bracket Simple_string? """ ;
Object_call ::= (Target ".")? Unqualified_call ;
Entity_declaration_group ::= Identifier_list Type_mark ;
Loop_body ::= "loop" Compound ;
Verbatim_string_opener ::= """ Simple_string? Open_bracket ;
Parent_qualification ::= "{" Class_name "}" ;
Alias_name ::= Operator | Bracket ;
External_system_file ::= "<" Simple_string ">" ;
New_feature ::= "frozen"? Extended_feature_name ;
Formal_generic_list ::= {Formal_generic ","}+ ;
Unlabeled_assertion_clause ::= Boolean_expression | Comment ;
Assigner_mark ::= "assign" Feature_name ;
External_type_list ::= {External_type ","}* ;
Boolean_expression ::= Basic_expression | Boolean_constant | Object_test ;
External_file_list ::= {External_file ","}+ ;
External_language ::= Unregistered_language | Registered_language ;
Agent_target ::= Entity | Parenthesized | Manifest_type ;
Manifest_type ::= "{" Type "}" ;
Bracket_target ::= Target | Once_string | Manifest_constant | Manifest_tuple ;
Agent_actual ::= Expression | Placeholder ;
Formal_arguments ::= "(" Entity_declaration_list ")" ;
Class_list ::= {Class_name ","}+ ;
Formal_generic_name ::= "?"? Identifier ;
Note_item ::= Identifier | Manifest_constant ;
Header_mark ::= "deferred" | "expanded" | "frozen" ;
External_user_file ::= """ Simple_string """ ;
Unregistered_language ::= Manifest_string ;
Feature_adaptation ::= Undefine? Redefine? Rename? New_exports? Select? "end" ;
Rename_pair ::= Feature_name "as" Extended_feature_name ;
Verbatim_string ::= Verbatim_string_opener Line_sequence Verbatim_string_closer ;
Character_constant ::= "'" Character "'" ;
Unqualified_call ::= Feature_name Actuals? ;
Else_part ::= "else" Compound ;
External_file_use ::= "use" External_file_list ;
Single_constraint ::= Type Renaming? ;
Explicit_creation_call ::= "." Unqualified_call ;
Class_declaration ::= Notes? Class_header Formal_generics? Obsolete? Inheritance? Creators? Converters? Features? Invariant? Notes? "end" ;
Class_name ::= Identifier ;
External_type ::= Simple_string ;
Effective_routine ::= Internal | External ;
Attribute_or_routine ::= Precondition? Local_declarations? Feature_body Postcondition? Rescue? "end" ;
Type_interval ::= Manifest_type ".." Manifest_type ;
Conversion_procedure ::= Feature_name "({" Type_list "})" ;
New_export_list ::= {New_export_item ";"}+ ;
CPP_external ::= """ "C++" "inline" External_signature? External_file_use? """ ;
Real_constant ::= Sign? Real ;
Note_entry ::= Note_name Note_values ;
DLL_identifier ::= Simple_string ;
Call_agent ::= "agent" Call_agent_body ;
Query_mark ::= Type_mark Assigner_mark? ;
Non_conformance ::= "{" "NONE" "}" ;
Manifest_string ::= Basic_manifest_string | Verbatim_string ;
--------------------fortran::derricks.bgf--------------------
EndSelectStmt ::= LblDef "end" "select" EndName? EOS ;
EndTypeStmt ::= LblDef "end" "type" TypeName? EOS ;
EntryName ::= Ident ;
RdIoCtlSpecList ::= (UnitIdentifier "," IoControlSpec) | (UnitIdentifier "," FormatIdentifier) | IoControlSpec | (RdIoCtlSpecList "," IoControlSpec) ;
CharLength ::= ("(" TypeParamValue ")") | ScalarIntLiteralConstant ;
InquireStmt ::= (LblDef "inquire" "(" InquireSpecList ")" EOS) | (LblDef "inquire" "(" "iolength" "=" ScalarVariable ")" OutputItemList EOS) ;
DeferredShapeSpecList ::= DeferredShapeSpec ("," DeferredShapeSpec)* ;
BlockDataBody ::= BlockDataBodyConstruct+ ;
LoopControl ::= ("while" "(" Expr ")") | (VariableName "=" Int-Real-Dp-Expression "," Int-Real-Dp-Expression ("," Int-Real-Dp-Expression)?) ;
ArrayAllocation ::= ArrayName ("(" DeferredShapeSpecList ")")? ;
AndOp ::= ".and." ;
PrintStmt ::= LblDef "print" FormatIdentifier ("," OutputItemList)? EOS ;
NotOp ::= ".not." ;
ScalarLogicalExpr ::= Expr ;
ModuleSubprogram ::= FunctionSubprogram | SubroutineSubprogram ;
ArithmeticIfStmt ::= LblDef "if" "(" ScalarNumericExpr ")" LblRef "," LblRef "," LblRef EOS ;
InquireSpec ::= ("unit" "=" UnitIdentifier) | ("file" "=" CExpr) | ("iostat" "=" ScalarVariable) | ("err" "=" LblRef) | ("exist" "=" ScalarVariable) | ("opened" "=" ScalarVariable) | ("number" "=" ScalarVariable) | ("named" "=" ScalarVariable) | ("name" "=" ScalarVariable) | ("access" "=" ScalarVariable) | ("sequential" "=" ScalarVariable) | ("direct" "=" ScalarVariable) | ("form" "=" ScalarVariable) | ("formatted" "=" ScalarVariable) | ("unformatted" "=" ScalarVariable) | ("recl" "=" Expr) | ("nextrec" "=" ScalarVariable) | ("blank" "=" ScalarVariable) | ("position" "=" ScalarVariable) | ("action" "=" ScalarVariable) | ("read" "=" ScalarVariable) | ("write" "=" ScalarVariable) | ("readwrite" "=" ScalarVariable) | ("delim" "=" ScalarVariable) | ("pad" "=" ScalarVariable) ;
GotoStmt ::= LblDef GoToKw LblRef EOS ;
EndName ::= Ident ;
Level3Expr ::= (Level3Expr ConcatOp)? Level2Expr ;
ConnectSpecList ::= ConnectSpec ("," ConnectSpec)* ;
IfThenStmt ::= LblDef (IfConstructName ":")? "if" "(" ScalarLogicalExpr ")" "then" EOS ;
PointerStmtObjectList ::= PointerStmtObject ("," PointerStmtObject)* ;
NamelistGroupName ::= Ident ;
DataStmtValue ::= Constant | (NamedConstantUse "*" Constant) ;
BlockDataBodyConstruct ::= SpecificationPartConstruct ;
ProcedureName ::= Ident ;
TypeParamValue ::= SpecificationExpr | "*" ;
InputItem ::= Name | DataRef | InputImpliedDo ;
NamedConstant ::= Ident ;
AssignedGotoStmt ::= (LblDef GoToKw VariableName EOS) | (LblDef GoToKw VariableName ","? "(" LblRef ("," LblRef)* ")" EOS) ;
OutputItem ::= Expr | OutputImpliedDo ;
EquivOperand ::= (EquivOperand OrOp)? OrOperand ;
ComponentDefStmt ::= (LblDef TypeSpec ("," ComponentAttrSpecList)? ":" ":" ComponentDeclList EOS) | (LblDef TypeSpec ComponentDeclList EOS) ;
UseStmt ::= (LblDef "use" Name ("," RenameList)? EOS) | (LblDef "use" Name "," "only" ":" OnlyList? EOS) ;
FormatItem ::= (Icon? DataEditDescr) | ControlEditDescr | CharStringEditDescr | (Icon? "(" FormatItemList ")") | (FormatItem ":" FormatItem) ;
ActualArg ::= ((Name "=")? Expr) | ((Name "=")? "*" LblRef) ;
FunctionParList ::= "(" (FunctionPar ("," FunctionPar)*)? ")" ;
DeallocateStmt ::= (LblDef "deallocate" "(" AllocateObjectList "," "stat" "=" Variable ")" EOS) | (LblDef "deallocate" "(" AllocateObjectList ")" EOS) ;
SectionSubscript ::= Expr | SubscriptTriplet ;
ExplicitShapeSpecList ::= ExplicitShapeSpec ("," ExplicitShapeSpec)* ;
RdCtlSpec ::= RdUnitId | ("(" RdIoCtlSpecList ")") ;
CloseStmt ::= LblDef "close" "(" CloseSpecList ")" EOS ;
AccessId ::= GenericName | GenericSpec ;
AllocationList ::= Allocation ("," Allocation)* ;
DeferredShapeSpec ::= ":" ;
CaseValueRange ::= Expr | (Expr ":") | (":" Expr) | (Expr ":" Expr) ;
PointerObject ::= Name | PointerField ;
AllocateObjectList ::= AllocateObject ("," AllocateObject)* ;
SubroutineNameUse ::= Ident ;
EquivalenceSet ::= "(" EquivalenceObject "," EquivalenceObject ("," EquivalenceObject)* ")" ;
CloseSpec ::= UnitIdentifier | ("unit" "=" UnitIdentifier) | ("iostat" "=" ScalarVariable) | ("err" "=" LblRef) | ("status" "=" CExpr) ;
KindSelector ::= ("(" ("kind" "=")? Expr ")") | ("*" Icon) ;
PointerAssignmentStmt ::= (LblDef Name "=>" Target EOS) | (LblDef Name "%" Name "=>" Target EOS) | (LblDef Name "%" DataRef "=>" Target EOS) | (LblDef Name "(" SFExprList ")" "%" Name "=>" Target EOS) | (LblDef Name "(" SFExprList ")" "%" DataRef "=>" Target EOS) | (LblDef Name "(" SFDummyArgNameList ")" "%" Name "=>" Target EOS) | (LblDef Name "(" SFDummyArgNameList ")" "%" DataRef "=>" Target EOS) ;
InternalSubProgPart ::= (Body ContainsStmt InternalSubprogram) | (ContainsStmt InternalSubprogram) | (InternalSubProgPart InternalSubprogram) ;
CycleStmt ::= LblDef "cycle" EndName? EOS ;
DerivedTypeDef ::= DerivedTypeStmt DerivedTypeBody+ EndTypeStmt ;
DefinedOperator ::= Dop | PowerOp | MultOp | AddOp | ConcatOp | RelOp | NotOp | AndOp | OrOp | EquivOp ;
InquireSpecList ::= (UnitIdentifier "," InquireSpec ("," InquireSpec)*) | (InquireSpec ("," InquireSpec)*) ;
TypeDeclarationStmt ::= (LblDef TypeSpec ("," AttrSpec)* ":" ":" EntityDecl ("," EntityDecl)* EOS) | (LblDef TypeSpec EntityDecl ("," EntityDecl)* EOS) ;
SFExprList ::= (SFExpr ":" Expr ":" Expr) | (SFExpr ":" ":" Expr) | (":" Expr ":" Expr) | (":" ":" Expr) | ":" | (":" Expr) | SFExpr | (SFExpr ":") | (SFExpr ":" Expr) | (SFExprList "," SectionSubscript) | (SFDummyArgNameList "," ":") | (SFDummyArgNameList "," ":" Expr) | (SFDummyArgNameList "," SFExpr ":") | (SFDummyArgNameList "," SFExpr ":" Expr) ;
EndInterfaceStmt ::= LblDef "end" "interface" EOS ;
PowerOp ::= "**" ;
NamedConstantDefList ::= NamedConstantDef ("," NamedConstantDef)* ;
ConnectSpec ::= UnitIdentifier | ("unit" "=" UnitIdentifier) | ("iostat" "=" ScalarVariable) | ("err" "=" LblRef) | ("file" "=" CExpr) | ("status" "=" CExpr) | ("access" "=" CExpr) | ("form" "=" CExpr) | ("recl" "=" Expr) | ("blank" "=" CExpr) | ("position" "=" CExpr) | ("action" "=" CExpr) | ("delim" "=" CExpr) | ("pad" "=" CExpr) ;
DeclarationConstruct ::= TypeDeclarationStmt | SpecificationStmt | DerivedTypeDef | InterfaceBlock ;
ProcedureNameList ::= ProcedureName ("," ProcedureName)* ;
FunctionInterfaceRange ::= (FunctionParList EOS SubprogramInterfaceBody EndFunctionStmt) | (FunctionParList EOS EndFunctionStmt) ;
SubroutineParList ::= "(" (SubroutinePar ("," SubroutinePar)*)? ")" ;
ArraySpec ::= AssumedShapeSpecList | DeferredShapeSpecList | ExplicitShapeSpecList | AssumedSizeSpec ;
IoControlSpec ::= ("unit" "=" UnitIdentifier) | ("fmt" "=" FormatIdentifier) | ("nml" "=" NamelistGroupName) | ("rec" "=" Expr) | ("iostat" "=" ScalarVariable) | ("err" "=" LblRef) | ("end" "=" LblRef) | ("advance" "=" CExpr) | ("size" "=" Variable) | ("eor" "=" LblRef) ;
BlankInterpEditDescr ::= "BN" | "BZ" ;
EndDoStmt ::= LblDef "end" "do" Name? EOS ;
AcValueList ::= AcValue ("," AcValue)* ;
SubstringRange ::= "(" SubscriptTriplet ")" ;
FunctionPar ::= DummyArgName ;
FormatItemList ::= FormatItem ("," FormatItem)* ;
ComponentAttrSpecList ::= ComponentAttrSpec ("," ComponentAttrSpec)* ;
PointerStmt ::= (LblDef "pointer" ":" ":" PointerStmtObjectList EOS) | (LblDef "pointer" PointerStmtObjectList EOS) ;
SectionSubscriptList ::= SectionSubscript ("," SectionSubscript)* ;
SFFactor ::= SFPrimary | (SFPrimary PowerOp MultOperand) ;
AssumedShapeSpecList ::= (LowerBound ":") | (DeferredShapeSpecList "," LowerBound ":") | (AssumedShapeSpecList "," AssumedShapeSpec) ;
SpecificationExpr ::= Expr ;
AssignStmt ::= LblDef "assign" LblRef "to" VariableName EOS ;
CharSelector ::= ("(" "len" "=" TypeParamValue "," "kind" "=" Expr ")") | ("(" "len" "=" TypeParamValue "," Expr ")") | ("(" "len" "=" TypeParamValue ")") | ("(" ("kind" "=")? Expr ")") ;
EquivalenceSetList ::= EquivalenceSet ("," EquivalenceSet)* ;
EndModuleStmt ::= (LblDef "end" EOS) | (LblDef "end" "module" EndName? EOS) ;
UnitIdentifier ::= UFExpr | "*" ;
DataEditDescr ::= ("I" Icon ("." Icon)?) | ("O" Icon ("." Icon)?) | ("B" Icon ("." Icon)?) | ("Z" Icon ("." Icon)?) | ("F" Icon "." Icon) | ("E" Icon "." Icon ("E" Icon)?) | ("EN" Icon "." Icon ("E" Icon)?) | ("ES" Icon "." Icon ("E" Icon)?) | ("G" Icon "." Icon ("E" Icon)?) | ("L" Icon) | ("A" Icon?) | ("D" Icon "." Icon) ;
ImplicitStmt ::= (LblDef "implicit" "none" EOS) | (LblDef "implicit" ImplicitSpec ("," ImplicitSpec)* EOS) ;
DoConstruct ::= BlockDoConstruct | LabelDoStmt ;
AccessStmt ::= (LblDef AccessSpec ":" ":" AccessIdList EOS) | (LblDef AccessSpec AccessIdList? EOS) ;
AttrSpec ::= "parameter" | AccessSpec | "allocatable" | ("dimension" "(" ArraySpec ")") | "external" | ("intent" "(" IntentSpec ")") | "intrinsic" | "optional" | "pointer" | "save" | "target" ;
EquivalenceObject ::= ArrayName | Variable ;
Int-Real-Dp-Expression ::= Expr ;
OptionalStmt ::= (LblDef "optional" ":" ":" OptionalParList EOS) | (LblDef "optional" OptionalParList EOS) ;
CallStmt ::= (LblDef "call" SubroutineNameUse EOS) | (LblDef "call" SubroutineNameUse "(" (ActualArg ("," ActualArg)*)? ")" EOS) ;
Level4Expr ::= (Level3Expr RelOp)? Level3Expr ;
ImplicitSpec ::= TypeSpec "(" LetterSpec ("," LetterSpec)* ")" ;
SFTerm ::= SFFactor | (SFTerm MultOp MultOperand) ;
CommonBlockObjectList ::= CommonBlockObject ("," CommonBlockObject)* ;
AccessSpec ::= "public" | "private" ;
NullifyStmt ::= LblDef "nullify" "(" PointerObjectList ")" EOS ;
SubroutinePar ::= DummyArgName | "*" ;
BlockDataSubprogram ::= (BlockDataStmt BlockDataBody EndBlockDataStmt) | (BlockDataStmt EndBlockDataStmt) ;
ControlEditDescr ::= PositionEditDescr | (Icon? "/") | ":" | SignEditDescr | (("-" | "+")? Icon "P" (Icon? DataEditDescr)?) | BlankInterpEditDescr ;
MultOperand ::= Level1Expr (PowerOp MultOperand)? ;
ComponentArraySpec ::= ExplicitShapeSpecList | DeferredShapeSpecList ;
RdFmtId ::= LblRef | "*" | COperand | (COperand ConcatOp CPrimary) | (RdFmtIdExpr ConcatOp CPrimary) ;
OpenStmt ::= LblDef "open" "(" ConnectSpecList ")" EOS ;
MultOp ::= "*" | "/" ;
IoControlSpecList ::= (UnitIdentifier "," FormatIdentifier?) | (UnitIdentifier "," IoControlSpec) | IoControlSpec | (IoControlSpecList "," IoControlSpec) ;
CaseSelector ::= ("(" CaseValueRange ("," CaseValueRange)* ")") | "default" ;
SubroutineName ::= Ident ;
EntityDecl ::= (ObjectName "=" Expr) | (ObjectName "(" ArraySpec ")" "=" Expr) | (ObjectName "*" CharLength "=" Expr) | (ObjectName "*" CharLength "(" ArraySpec ")" "=" Expr) | ObjectName | (ObjectName "*" CharLength) | (ObjectName "(" ArraySpec ")") | (ObjectName "(" ArraySpec ")" "*" CharLength) ;
SpecificationStmt ::= AccessStmt | AllocatableStmt | CommonStmt | DataStmt | DimensionStmt | EquivalenceStmt | ExternalStmt | IntrinsicStmt | SaveStmt | IntentStmt | NamelistStmt | OptionalStmt | PointerStmt | TargetStmt ;
ArrayDeclarator ::= VariableName "(" ArraySpec ")" ;
ComponentAttrSpec ::= "pointer" | ("dimension" "(" ComponentArraySpec ")") ;
SubroutineInterfaceRange ::= (SubroutineParList EOS SubprogramInterfaceBody EndSubroutineStmt) | (SubroutineParList EOS EndSubroutineStmt) ;
VariableName ::= Ident ;
DefinedUnaryOp ::= Dop ;
OrOperand ::= (OrOperand AndOp)? AndOperand ;
EndBlockDataStmt ::= (LblDef "end" "block" "data" EndName? EOS) | (LblDef "end" EOS) ;
OrOp ::= ".or." ;
RewindStmt ::= (LblDef "rewind" UnitIdentifier EOS) | (LblDef "rewind" "(" PositionSpec ("," PositionSpec)* ")" EOS) ;
UFFactor ::= UFPrimary | (UFPrimary PowerOp UFFactor) ;
DerivedTypeStmt ::= (LblDef "type" TypeName EOS) | (LblDef "type" ":" ":" TypeName EOS) | (LblDef "type" "," AccessSpec ":" ":" TypeName EOS) ;
OptionalParList ::= OptionalPar ("," OptionalPar)* ;
ElseIfStmt ::= LblDef "else" "if" "(" ScalarLogicalExpr ")" "then" IfConstructName? EOS ;
ActionStmt ::= AllocateStmt | CycleStmt | DeallocateStmt | ExitStmt | NullifyStmt | PointerAssignmentStmt | WhereStmt | ArithmeticIfStmt | AssignmentStmt | AssignStmt | BackspaceStmt | CallStmt | CloseStmt | ContinueStmt | EndfileStmt | GotoStmt | ComputedGotoStmt | AssignedGotoStmt | IfStmt | InquireStmt | OpenStmt | PauseStmt | PrintStmt | ReadStmt | ReturnStmt | RewindStmt | StopStmt | WriteStmt ;
FunctionArg ::= Name "=" Expr ;
AllocatedShape ::= "(" SectionSubscriptList ")" ;
EntryStmt ::= (LblDef "entry" EntryName SubroutineParList EOS) | (LblDef "entry" EntryName SubroutineParList "result" "(" Name ")" EOS) ;
KindParam ::= Icon | NamedConstantUse ;
CaseStmt ::= LblDef "case" CaseSelector Name? EOS ;
ReturnStmt ::= LblDef "return" Expr? EOS ;
ModuleName ::= Ident ;
OutputImpliedDo ::= ("(" OutputItemList "," ImpliedDoVariable "=" Expr "," Expr ")") | ("(" OutputItemList "," ImpliedDoVariable "=" Expr "," Expr "," Expr ")") ;
NamelistStmt ::= LblDef "namelist" NamelistGroup (","? NamelistGroup)* EOS ;
AcImpliedDo ::= ("(" Expr "," ImpliedDoVariable "=" Expr "," Expr ")") | ("(" Expr "," ImpliedDoVariable "=" Expr "," Expr "," Expr ")") | ("(" AcImpliedDo "," ImpliedDoVariable "=" Expr "," Expr ")") | ("(" AcImpliedDo "," ImpliedDoVariable "=" Expr "," Expr "," Expr ")") ;
WhereStmt ::= LblDef "where" "(" MaskExpr ")" AssignmentStmt ;
ContinueStmt ::= LblDef "continue" EOS ;
SavedEntity ::= VariableName | ("/" CommonBlockName "/") ;
ComponentDecl ::= ComponentName ("(" ComponentArraySpec ")")? ("*" CharLength)? ;
PointerStmtObject ::= ObjectName | (ObjectName "(" DeferredShapeSpecList ")") ;
MaskExpr ::= Expr ;
CommonBlockObject ::= VariableName | ArrayDeclarator ;
LetterSpec ::= Letter ("-" Letter)? ;
EndIfStmt ::= LblDef "end" "if" IfConstructName? EOS ;
EndfileStmt ::= (LblDef "end" "file" UnitIdentifier EOS) | (LblDef "end" "file" "(" PositionSpec ("," PositionSpec)* ")" EOS) ;
LblRef ::= Icon ;
LowerBound ::= SpecificationExpr ;
DataStmtValueList ::= DataStmtValue ("," DataStmtValue)* ;
RenameList ::= Rename ("," Rename)* ;
IfConstruct ::= IfThenStmt ExecutionPartConstruct* (ElseIfStmt ExecutionPartConstruct*)* (ElseStmt ExecutionPartConstruct*)? EndIfStmt ;
DerivedTypeBody ::= PrivateSequenceStmt | ComponentDefStmt ;
TargetStmt ::= (LblDef "target" ":" ":" TargetObjectList EOS) | (LblDef "target" TargetObjectList EOS) ;
IntrinsicProcedureName ::= Ident ;
ExternalName ::= Ident ;
NamelistGroupObject ::= VariableName ;
ModuleSubprogramPartConstruct ::= ContainsStmt | ModuleSubprogram ;
AndOperand ::= NotOp? Level4Expr ;
ProgramName ::= Ident ;
TargetObjectList ::= TargetObject ("," TargetObject)* ;
ExecutionPartConstruct ::= ExecutableConstruct | FormatStmt | DataStmt | EntryStmt ;
StopStmt ::= LblDef "stop" (Icon | Scon)? EOS ;
AddOperand ::= (AddOperand MultOp)? MultOperand ;
ArrayDeclaratorList ::= ArrayDeclarator ("," ArrayDeclarator)* ;
ExplicitShapeSpec ::= (LowerBound ":")? UpperBound ;
ComponentName ::= Ident ;
InterfaceBlockPart ::= InterfaceBody | ModuleProcedureStmt ;
COperand ::= Scon | Name | DataRef | FunctionReference ;
SaveStmt ::= (LblDef "save" ":" ":" SavedEntityList EOS) | (LblDef "save" SavedEntityList? EOS) ;
LengthSelector ::= ("(" TypeParamValue ")") | ("*" CharLength) ;
TypeName ::= Ident ;
InternalSubprogram ::= FunctionSubprogram | SubroutineSubprogram ;
OptionalPar ::= DummyArgName ;
SpecificationPartConstruct ::= ImplicitStmt | ParameterStmt | FormatStmt | EntryStmt | DeclarationConstruct | UseStmt ;
AccessIdList ::= AccessId ("," AccessId)* ;
AllocateObject ::= VariableName | (AllocateObject FieldSelector) ;
FunctionArgList ::= FunctionArg | (FunctionArgList "," FunctionArg) | (SectionSubscriptList "," FunctionArg) ;
SubroutineRange ::= (SubroutineParList? EOS Body? EndSubroutineStmt) | (SubroutineParList EOS InternalSubProgPart EndSubroutineStmt) ;
ScalarNumericExpr ::= Expr ;
EquivalenceStmt ::= LblDef "equivalence" EquivalenceSetList EOS ;
InterfaceBlock ::= InterfaceStmt InterfaceBlockPart+ EndInterfaceStmt ;
CloseSpecList ::= CloseSpec ("," CloseSpec)* ;
ParameterStmt ::= LblDef "parameter" "(" NamedConstantDefList ")" EOS ;
CommonBlockName ::= Ident ;
SFDummyArgNameList ::= SFDummyArgName ("," SFDummyArgName)* ;
StructureComponent ::= (VariableName FieldSelector) | (StructureComponent FieldSelector) ;
SFExpr ::= SFTerm | (Sign AddOperand) | (SFExpr AddOp AddOperand) ;
SavedEntityList ::= SavedEntity ("," SavedEntity)* ;
NamedConstantDef ::= NamedConstant "=" Expr ;
LabelDoStmt ::= LblDef "do" LblRef ","? LoopControl EOS ;
Level5Expr ::= (Level5Expr EquivOp)? EquivOperand ;
CaseBodyConstruct ::= CaseStmt | ExecutionPartConstruct ;
MainRange ::= (BodyConstruct+ EndProgramStmt) | (InternalSubProgPart EndProgramStmt) | EndProgramStmt ;
BlockDataName ::= Ident ;
GenericName ::= Ident ;
Level1Expr ::= DefinedUnaryOp? Primary ;
BlockDoConstruct ::= (LblDef "do" LblRef EOS) | (LblDef "do" LoopControl EOS) | (LblDef "do" EOS) | (LblDef Name ":" "do" LblRef LoopControl EOS) | (LblDef Name ":" "do" LblRef EOS) | (LblDef Name ":" "do" LoopControl EOS) | (LblDef Name ":" "do" EOS) ;
PointerField ::= (Name "(" SFExprList ")" "%" Name) | (Name "(" SFDummyArgNameList ")" "%" Name) | (Name "%" Name) | (PointerField FieldSelector) ;
FieldSelector ::= ("(" SectionSubscriptList ")" "%" Name) | ("%" Name) ;
ScalarIntExpr ::= Expr ;
CExpr ::= (CExpr ConcatOp)? CPrimary ;
EndWhereStmt ::= LblDef "end" "where" EOS ;
WhereConstruct ::= WhereConstructStmt AssignmentStmt* (ElsewhereStmt AssignmentStmt*)? EndWhereStmt ;
DataStmtObjectList ::= DataStmtObject ("," DataStmtObject)* ;
ImpliedDoVariable ::= Ident ;
PositionEditDescr ::= ("T" Icon) | ("TL" Icon) | ("TR" Icon) | (Icon "X") ;
DefinedBinaryOp ::= Dop ;
InputImpliedDo ::= ("(" InputItemList "," ImpliedDoVariable "=" Expr "," Expr ")") | ("(" InputItemList "," ImpliedDoVariable "=" Expr "," Expr "," Expr ")") ;
BackspaceStmt ::= (LblDef "backspace" UnitIdentifier EOS) | (LblDef "backspace" "(" PositionSpec ("," PositionSpec)* ")" EOS) ;
DataIDoObjectList ::= DataIDoObject ("," DataIDoObject)* ;
IfConstructName ::= Ident ;
AllocateStmt ::= (LblDef "allocate" "(" AllocationList "," "stat" "=" Variable ")" EOS) | (LblDef "allocate" "(" AllocationList ")" EOS) ;
AssumedShapeSpec ::= LowerBound? ":" ;
ElseStmt ::= LblDef "else" IfConstructName? EOS ;
PauseStmt ::= LblDef "pause" (Icon | Scon)? EOS ;
SignEditDescr ::= "S" | "SP" | "SS" ;
ExecutableProgram ::= StartCommentBlock? ProgramUnit+ ;
WhereConstructStmt ::= LblDef "where" "(" MaskExpr ")" EOS ;
ComplexConst ::= "(" Expr "," Expr ")" ;
DataStmt ::= LblDef "data" Datalist EOS ;
EndProgramStmt ::= (LblDef "end" EOS) | (LblDef "end" "program" EndName? EOS) ;
RdUnitId ::= ("(" UFExpr ")") | ("(" "*" ")") ;
CharStringEditDescr ::= Scon | (Icon "H" Character+) ;
LogicalConstant ::= (".true." "_" KindParam) | (".false." "_" KindParam) | ".true." | ".false." ;
FunctionPrefix ::= ("recursive" "function") | ("recursive" TypeSpec "function") | (TypeSpec "recursive" "function") | (TypeSpec? "function") ;
DataImpliedDo ::= "(" DataIDoObjectList "," ImpliedDoVariable "=" Expr "," Expr ("," Expr)? ")" ;
ScalarVariable ::= VariableName | ArrayElement ;
ContainsStmt ::= LblDef "contains" EOS ;
StructureConstructor ::= TypeName "(" Expr ("," Expr)* ")" ;
IfStmt ::= LblDef "if" "(" ScalarLogicalExpr ")" ActionStmt ;
PositionSpec ::= ("unit="? UnitIdentifier) | ("iostat=" ScalarVariable) | ("err=" LblRef) ;
IntentStmt ::= (LblDef "intent" "(" IntentSpec ")" ":" ":" IntentParList EOS) | (LblDef "intent" "(" IntentSpec ")" IntentParList EOS) ;
FunctionName ::= Ident ;
ReadStmt ::= (LblDef "read" RdCtlSpec InputItemList? EOS) | (LblDef "read" RdFmtId EOS) | (LblDef "read" RdFmtId "," InputItemList EOS) ;
UFTerm ::= UFFactor | (UFTerm MultOp UFFactor) | (UFTerm ConcatOp UFPrimary) ;
IntentSpec ::= "in" | "out" | ("in" "out") ;
EquivOp ::= ".eqv." | ".neqv." ;
AssumedSizeSpec ::= ((LowerBound ":")? "*") | (ExplicitShapeSpecList "," "*") | (ExplicitShapeSpecList "," LowerBound ":" "*") ;
OutputItemList ::= OutputItem ("," OutputItem)* ;
UseName ::= Ident ;
DataStmtObject ::= Variable | DataImpliedDo ;
LblDef ::= Label? ;
ExecutableConstruct ::= ActionStmt | DoConstruct | IfConstruct | CaseConstruct | WhereConstruct | EndDoStmt ;
OnlyList ::= Only ("," Only)* ;
ObjectName ::= Ident ;
DataIDoObject ::= ArrayElement | DataImpliedDo | StructureComponent ;
IntentParList ::= IntentPar ("," IntentPar)* ;
ArrayElement ::= (StructureComponent "(" SectionSubscriptList ")") | (VariableName "(" SectionSubscriptList ")") ;
InterfaceStmt ::= (LblDef "interface" GenericName EOS) | (LblDef "interface" GenericSpec EOS) | (LblDef "interface" EOS) ;
FormatStmt ::= LblDef "format" "(" FormatItemList? ")" EOS ;
PointerObjectList ::= PointerObject ("," PointerObject)* ;
SubprogramInterfaceBody ::= SpecificationPartConstruct | (SubprogramInterfaceBody SpecificationPartConstruct) ;
ModuleStmt ::= LblDef "module" ModuleName EOS ;
CommonStmt ::= LblDef "common" Comblock? CommonBlockObjectList (","? Comblock CommonBlockObjectList)* EOS ;
GoToKw ::= "go" "to" ;
RdFmtIdExpr ::= "(" UFExpr ")" ;
SubscriptTriplet ::= Expr? ":" Expr? (":" Expr)? ;
MainProgram ::= ProgramStmt? MainRange ;
NamedConstantUse ::= Ident ;
DataRef ::= (Name "%" Name) | (DataRef "%" Name) | (Name "(" SectionSubscriptList ")") | (DataRef "(" SectionSubscriptList ")") ;
CaseConstruct ::= (LblDef Name ":" "select" "case" "(" Expr ")" EOS SelectCaseRange) | (LblDef "select" "case" "(" Expr ")" EOS SelectCaseRange) ;
ComponentDeclList ::= ComponentDecl ("," ComponentDecl)* ;
ArrayName ::= Ident ;
UnsignedArithmeticConstant ::= (Icon "_" KindParam) | (Rcon "_" KindParam) | Icon | Rcon | ComplexConst ;
Level2Expr ::= ((Level2Expr AddOp)? AddOperand) | (Sign AddOperand) ;
FunctionSubprogram ::= LblDef FunctionPrefix FunctionName FunctionRange ;
InterfaceBody ::= (LblDef FunctionPrefix FunctionName FunctionInterfaceRange) | (LblDef "subroutine" SubroutineName SubroutineInterfaceRange) ;
DummyArgName ::= Ident ;
AssignmentStmt ::= (LblDef Name "%" Name "=" Expr EOS) | (LblDef Name "%" DataRef "=" Expr EOS) | (LblDef Name "(" SFExprList ")" "%" Name "=" Expr EOS) | (LblDef Name "(" SFExprList ")" "%" DataRef "=" Expr EOS) | (LblDef Name "(" SFDummyArgNameList ")" "%" Name "=" Expr EOS) | (LblDef Name "(" SFDummyArgNameList ")" "%" DataRef "=" Expr EOS) | (LblDef Name "=" Expr EOS) | (LblDef Name "(" SFExprList ")" "=" Expr EOS) | (LblDef Name "(" SFExprList ")" SubstringRange "=" Expr EOS) ;
ExternalStmt ::= LblDef "external" ExternalName ("," ExternalName)* EOS ;
TargetObject ::= ObjectName | (ObjectName "(" ArraySpec ")") ;
DataStmtSet ::= DataStmtObjectList "/" DataStmtValueList "/" ;
AcValue ::= Expr | AcImpliedDo ;
ModuleBody ::= SpecificationPartConstruct | ModuleSubprogramPartConstruct | (ModuleBody SpecificationPartConstruct) | (ModuleBody ModuleSubprogramPartConstruct) ;
IntrinsicStmt ::= LblDef "intrinsic" IntrinsicProcedureName ("," IntrinsicProcedureName)* EOS ;
ProgramStmt ::= LblDef "program" ProgramName EOS ;
AllocatableStmt ::= (LblDef "allocatable" ":" ":" ArrayAllocationList EOS) | (LblDef "allocatable" ArrayAllocationList EOS) ;
IntentPar ::= DummyArgName ;
AddOp ::= "+" | "-" ;
CPrimary ::= COperand | ("(" CExpr ")") ;
RelOp ::= "==" | "/=" | "<" | "<=" | ">" | ">=" | ".eq." | ".ne." | ".lt." | ".le." | ".gt." | ".ge." ;
ArrayAllocationList ::= ArrayAllocation ("," ArrayAllocation)* ;
NamelistGroup ::= "/" NamelistGroupName "/" NamelistGroupObject ("," NamelistGroupObject)* ;
ConcatOp ::= "//" ;
TypeSpec ::= ("integer" KindSelector) | ("real" KindSelector) | ("double" "precision") | ("complex" KindSelector) | ("character" CharSelector) | ("logical" KindSelector) | ("type" "(" TypeName ")") | "integer" | "real" | "complex" | "logical" | "character" | ("character" LengthSelector) ;
BodyConstruct ::= SpecificationPartConstruct | ExecutableConstruct ;
FunctionReference ::= Name "(" FunctionArgList? ")" ;
SelectCaseRange ::= (SelectCaseBody EndSelectStmt) | EndSelectStmt ;
UFPrimary ::= Icon | Scon | Name | FunctionReference | DataRef | ("(" UFExpr ")") ;
SFPrimary ::= ArrayConstructor | Icon | Name | DataRef | FunctionReference | ("(" Expr ")") ;
SelectCaseBody ::= CaseBodyConstruct+ ;
DimensionStmt ::= (LblDef "dimension" ":" ":" ArrayDeclaratorList EOS) | (LblDef "dimension" ArrayDeclaratorList EOS) ;
SFDummyArgName ::= Ident ;
PrivateSequenceStmt ::= (LblDef "private" EOS) | (LblDef "sequence" EOS) ;
WriteStmt ::= LblDef "write" "(" IoControlSpecList ")" OutputItemList? EOS ;
UFExpr ::= UFTerm | (Sign UFTerm) | (UFExpr AddOp UFTerm) ;
ExitStmt ::= LblDef "exit" EndName? EOS ;
FunctionRange ::= (FunctionParList EOS Body? EndFunctionStmt) | (FunctionParList "result" "(" Name ")" EOS InternalSubProgPart EndFunctionStmt) | (FunctionParList "result" "(" Name ")" EOS Body EndFunctionStmt) | (FunctionParList "result" "(" Name ")" EOS EndFunctionStmt) | (FunctionParList EOS InternalSubProgPart EndFunctionStmt) ;
FormatIdentifier ::= LblRef | CExpr | "*" ;
BlockDataStmt ::= LblDef "block" "data" BlockDataName? EOS ;
UpperBound ::= SpecificationExpr ;
InputItemList ::= InputItem ("," InputItem)* ;
EndFunctionStmt ::= (LblDef "end" EOS) | (LblDef "end" "function" EndName? EOS) ;
ComputedGotoStmt ::= LblDef GoToKw "(" LblRef ("," LblRef)* ")" ","? ScalarIntExpr EOS ;
ElsewhereStmt ::= LblDef "elsewhere" EOS ;
GenericSpec ::= ("operator" "(" DefinedOperator ")") | ("assignment" "(" "=" ")") ;
ModuleProcedureStmt ::= LblDef "module" "procedure" ProcedureNameList EOS ;
SubroutineSubprogram ::= LblDef "recursive"? "subroutine" SubroutineName SubroutineRange ;
ProgramUnit ::= MainProgram | FunctionSubprogram | SubroutineSubprogram | Module | BlockDataSubprogram ;
EndSubroutineStmt ::= (LblDef "end" "subroutine" EndName? EOS) | (LblDef "end" EOS) ;
BozLiteralConstant ::= BinaryConstant | OctalConstant | HexConstant ;
ArrayConstructor ::= "(/" AcValueList "/)" ;
--------------------fortran::waite-cordy.bgf--------------------
EndSelectStmt ::= (LblDef "endselect" EndName? EOS) | (LblDef "end" "select" EndName? EOS) ;
EndTypeStmt ::= (LblDef "endtype" TypeName EOS) | (LblDef "endtype" EOS) | (LblDef "end" "type" TypeName EOS) | (LblDef "end" "type" EOS) ;
EntryName ::= Ident ;
RdIoCtlSpecList ::= (UnitIdentifier "," IoControlSpec) | (UnitIdentifier "," FormatIdentifier) | IoControlSpec | (RdIoCtlSpecList "," IoControlSpec) ;
CharLength ::= ("(" TypeParamValue ")") | Constant ;
DeferredShapeSpecList ::= DeferredShapeSpec+ ;
InquireStmt ::= LblDef "inquire" "(" InquireSpecList ")" EOS ;
 InquireStmt ::= LblDef "inquire" "(" "iolength=" ScalarVariable ")" OutputItemList EOS ;
ArrayAllocation ::= ArrayName | (ArrayName "(" DeferredShapeSpecList ")") ;
BlockDataBody ::= BlockDataBodyConstruct | (BlockDataBody BlockDataBodyConstruct) ;
LoopControl ::= VariableName "=" Expr "," Expr CommaExpr? ;
 LoopControl ::= "while" "(" Expr ")" ;
AndOp ::= SP ".and." SP ;
PrintStmt ::= (LblDef "print" FormatIdentifier "," OutputItemList EOS) | (LblDef "print" FormatIdentifier EOS) ;
NotOp ::= SP ".not." SP ;
ModuleSubprogram ::= FunctionSubprogram | SubroutineSubprogram ;
ArithmeticIfStmt ::= LblDef "if" "(" Expr ")" LblRef "," LblRef "," LblRef EOS ;
InquireSpec ::= ("unit=" UnitIdentifier) | ("file=" CExpr) | ("err=" LblRef) | ("iostat=" ScalarVariable) | ("exist=" ScalarVariable) | ("opened=" ScalarVariable) | ("number=" ScalarVariable) | ("named=" ScalarVariable) | ("name=" ScalarVariable) | ("access=" ScalarVariable) | ("sequential=" ScalarVariable) | ("direct=" ScalarVariable) | ("form=" ScalarVariable) | ("formatted=" ScalarVariable) | ("unformatted=" ScalarVariable) | ("recl=" Expr) | ("nextrec=" ScalarVariable) | ("blank=" ScalarVariable) ;
 InquireSpec ::= ("position=" ScalarVariable) | ("action=" ScalarVariable) | ("read=" ScalarVariable) | ("write=" ScalarVariable) | ("readwrite=" ScalarVariable) | ("delim=" ScalarVariable) | ("pad=" ScalarVariable) ;
GotoStmt ::= LblDef GoToKw LblRef EOS ;
EquivOpEquivOperand ::= EquivOp EquivOperand ;
EndName ::= Ident ;
Level3Expr ::= Level2Expr ConcatOpLevel2Expr* ;
ConnectSpecList ::= UnitIdentifierComma? {ConnectSpec ","}* ;
PointerStmtObjectList ::= PointerStmtObject+ ;
IfThenStmt ::= LblDef "if" "(" Expr ")" "then" EOS IN_2 ;
NamelistGroupName ::= Ident ;
OutputItemList1 ::= (Expr "," Expr) | (Expr "," OutputImpliedDo) | OutputImpliedDo | (OutputItemList1 "," Expr) | (OutputItemList1 "," OutputImpliedDo) ;
DataStmtValue ::= Constant | (Constant "*" Constant) | (NamedConstantUse "*" Constant) ;
ProcedureName ::= Ident ;
TypeParamValue ::= Expr | "*" ;
BlockDataBodyConstruct ::= SpecificationPartConstruct ;
InputItem ::= NameDataRef | InputImpliedDo ;
NamedConstant ::= Ident ;
AssignedGotoStmt ::= (LblDef GoToKw VariableName EOS) | (LblDef GoToKw VariableName "(" LblRefList ")" EOS) | (LblDef GoToKw VariableComma "(" LblRefList ")" EOS) ;
EquivOperand ::= OrOperand OrUpOrOperand* ;
ComponentDefStmt ::= (LblDef TypeSpec "," ComponentAttrSpecList "::" ComponentDeclList EOS) | (LblDef TypeSpec "::" ComponentDeclList EOS) | (LblDef TypeSpec ComponentDeclList EOS) ;
UseStmt ::= (LblDef "use" Name EOS) | (LblDef "use" Name "," "only" ":" EOS) | (LblDef "use" Name "," RenameList EOS) | (LblDef "use" Name "," "only" ":" OnlyList EOS) ;
ComplexDataRefTail ::= SectionSubscriptRef ;
 ComplexDataRefTail ::= "%" Name ;
StmtFunctionStmt ::= LblDef Name StmtFunctionRange ;
FmtSpec ::= Formatedit | Formatsep | (Formatsep Formatedit) | (FmtSpec Formatsep) | (FmtSpec Formatsep Formatedit) | (FmtSpec "," Formatedit) | (FmtSpec "," Formatsep) | (FmtSpec "," Formatsep Formatedit) ;
FunctionParList ::= ("(" FunctionPars ")") | ε ;
DeallocateStmt ::= (LblDef "deallocate" "(" AllocateObjectList "," "stat=" Variable ")" EOS) | (LblDef "deallocate" "(" AllocateObjectList ")" EOS) ;
SectionSubscript ::= (Expr SubscriptTripletTail?) | SubscriptTripletTail ;
ExplicitShapeSpecList ::= ExplicitShapeSpec+ ;
RdCtlSpec ::= RdUnitId | ("(" RdIoCtlSpecList ")") ;
CloseStmt ::= LblDef "close" "(" CloseSpecList ")" EOS ;
AccessId ::= GenericName | GenericSpec ;
AllocationList ::= Allocation+ ;
DeferredShapeSpec ::= ":" ;
CaseValueRange ::= Expr | (Expr ":") | (":" Expr) | (Expr ":" Expr) ;
PointerObject ::= Name | PointerField ;
AllocateObjectList ::= AllocateObject+ ;
SubroutineNameUse ::= Ident ;
EquivalenceSet ::= "(" EquivalenceObject "," EquivalenceObjectList ")" ;
KindSelector ::= ("(" "kind=" Expr ")") | ("(" Expr ")") ;
CloseSpec ::= ("unit=" UnitIdentifier) | ("err=" LblRef) | ("status=" CExpr) | ("iostat=" ScalarVariable) ;
PointerAssignmentStmt ::= (LblDef Name "=>" Target EOS) | (LblDef Name SFExprListRef? "%" NameDataRef "=>" Target EOS) ;
CycleStmt ::= LblDef "cycle" EndName? EOS ;
DerivedTypeDef ::= DerivedTypeStmt DerivedTypeBody EndTypeStmt ;
DefinedOperator ::= Dop | PowerOp | MultOp | AddOp | RelOp | ConcatOp | NotOp | AndOp | OrOp | EquivOp ;
InquireSpecList ::= UnitIdentifier? {InquireSpec ","}* ;
SubscriptListRef ::= "(" SubscriptList ")" ;
TypeDeclarationStmt ::= LblDef TypeSpec EntityDeclList EOS ;
 TypeDeclarationStmt ::= LblDef TypeSpec AttrSpecSeq? "::" EntityDeclList EOS ;
EndInterfaceStmt ::= (LblDef "endinterface" EOS) | (LblDef "end" "interface" EOS) ;
PowerOp ::= "**" ;
SFExprList ::= (Expr ":"? Expr?) | (":" Expr?) ;
 SFExprList ::= (Expr? ":" Expr ":" Expr) | (Expr? "::" Expr) ;
NamedConstantDefList ::= NamedConstantDef+ ;
ConnectSpec ::= ("unit=" UnitIdentifier) | ("err=" LblRef) | ("file=" CExpr) | ("status=" CExpr) | ("access=" CExpr) | ("form=" CExpr) | ("recl=" Expr) | ("blank=" CExpr) | ("iostat=" ScalarVariable) ;
 ConnectSpec ::= ("position=" CExpr) | ("action=" CExpr) | ("delim=" CExpr) | ("pad=" CExpr) ;
RelOpLevel3Expr ::= RelOp Level3Expr ;
DeclarationConstruct ::= TypeDeclarationStmt | SpecificationStmt ;
 DeclarationConstruct ::= DerivedTypeDef | InterfaceBlock ;
ProcedureNameList ::= ProcedureName+ ;
FunctionInterfaceRange ::= FunctionParList EOS SubprogramInterfaceBody? EndFunctionStmt ;
SubroutineParList ::= ("(" SubroutinePars ")") | ε ;
VariableComma ::= VariableName "," ;
ArraySpec ::= ExplicitShapeSpecList | AssumedSizeSpec ;
 ArraySpec ::= AssumedShapeSpecList | DeferredShapeSpecList ;
IoControlSpec ::= ("fmt=" FormatIdentifier) | ("unit=" UnitIdentifier) | ("rec=" Expr) | ("end=" LblRef) | ("err=" LblRef) | ("iostat=" ScalarVariable) ;
 IoControlSpec ::= ("nml=" NamelistGroupName) | ("advance=" CExpr) | ("size=" Variable) | ("eor=" LblRef) ;
EndDoStmt ::= (LblDef "enddo" EndName? EOS) | (LblDef "end" "do" EndName? EOS) ;
AcValueList ::= Expr | AcValueList1 ;
SubstringRange ::= "(" Expr? SubscriptTripletTail ")" ;
EntityDeclList ::= EntityDecl+ ;
FunctionPar ::= DummyArgName ;
DoLblRef ::= Icon ;
ComponentAttrSpecList ::= ComponentAttrSpec+ ;
CommaInputItemList ::= "," InputItemList ;
PointerStmt ::= LblDef "pointer" ColonColon? PointerStmtObjectList EOS ;
SectionSubscriptList ::= SectionSubscript+ ;
AssumedShapeSpecList ::= (LowerBound ":") | (DeferredShapeSpecList "," LowerBound ":") | (AssumedShapeSpecList "," AssumedShapeSpec) ;
AssignStmt ::= LblDef "assign" LblRef "to" VariableName EOS ;
CharSelector ::= ("(" "len=" TypeParamValue "," "kind=" Expr ")") | ("(" "len=" TypeParamValue "," Expr ")") | ("(" "len=" TypeParamValue ")") | ("(" "kind=" Expr ")") | ("(" Expr ")") ;
NameColon ::= Name ":" ;
CPrimaryConcatOp ::= CPrimary ConcatOp ;
EquivalenceSetList ::= EquivalenceSet+ ;
EditElement ::= Fcon | MislexedFcon | Scon | Hcon | Ident | ("(" FmtSpec ")") ;
EndModuleStmt ::= (LblDef "endmodule" EndName? EOS) | (LblDef "end" "module" EndName? EOS) | (LblDef "end" EOS) ;
UnitIdentifier ::= UFExpr | "*" ;
ImplicitStmt ::= LblDef "implicit" ImplicitSpecList EOS ;
 ImplicitStmt ::= LblDef "implicit" "none" EOS ;
AccessStmt ::= (LblDef AccessSpec ColonColon? AccessIdList EOS) | (LblDef AccessSpec EOS) ;
AttrSpec ::= "parameter" | AccessSpec | "allocatable" | ("dimension" "(" ArraySpec ")") | "external" | ("intent" "(" IntentSpec ")") | "intrinsic" | "optional" | "pointer" | "save" | "target" ;
DoConstruct ::= LabelDoStmt ;
 DoConstruct ::= BlockDoConstruct ;
EquivalenceObject ::= Variable ;
OptionalStmt ::= LblDef "optional" ColonColon? OptionalParList EOS ;
MultOpMultOperand ::= MultOp MultOperand ;
UnitIdentifierComma ::= UnitIdentifier "," ;
CallStmt ::= (LblDef "call" SubroutineNameUse EOS) | (LblDef "call" SubroutineNameUse "(" SubroutineArgList ")" EOS) ;
Level4Expr ::= Level3Expr RelOpLevel3Expr* ;
PositionSpecList ::= UnitIdentifierComma? PositionSpec+ ;
ColonColon ::= "::" ;
ImplicitSpec ::= (TypeSpec ImplicitRanges) | (TypeSpec "(" ImplicitRanges ")") ;
AccessSpec ::= "public" | "private" ;
NameDataRef ::= Name ComplexDataRefTail* ;
NullifyStmt ::= LblDef "nullify" "(" PointerObjectList ")" EOS ;
SubroutinePar ::= DummyArgName | "*" ;
SubscriptTripletTail ::= ":" Expr? ;
 SubscriptTripletTail ::= (":" Expr ":" Expr) | ("::" Expr) ;
LblRefList ::= LblRef+ ;
BlockDataSubprogram ::= (BlockDataStmt BlockDataBody EndBlockDataStmt) | (BlockDataStmt EndBlockDataStmt) ;
MultOperand ::= Level1Expr PowerUpMultOperand? ;
ComponentArraySpec ::= ExplicitShapeSpecList | DeferredShapeSpecList ;
RdFmtId ::= LblRef | "*" | COperand | (COperand ConcatOp CPrimary) | (RdFmtIdExpr ConcatOp CPrimary) ;
AttrSpecSeq ::= ("," AttrSpec) | (AttrSpecSeq "," AttrSpec) ;
OpenStmt ::= LblDef "open" "(" ConnectSpecList ")" EOS ;
MultOp ::= "*" | "/" ;
IoControlSpecList ::= (UnitIdentifier "$" ",") | (UnitIdentifier "," FormatIdentifier) | (UnitIdentifier "," IoControlSpec) | IoControlSpec | (IoControlSpecList "," IoControlSpec) ;
CaseSelector ::= ("(" CaseValueRangeList ")") | "default" ;
SubroutineName ::= Ident ;
EntityDecl ::= ObjectName | (ObjectName "(" ArraySpec ")") | (ObjectName "*" CharLength) | (ObjectName "(" ArraySpec ")" "*" CharLength) ;
 EntityDecl ::= (ObjectName "=" Expr) | (ObjectName "(" ArraySpec ")" "=" Expr) | (ObjectName "*" CharLength "=" Expr) | (ObjectName "*" CharLength "(" ArraySpec ")" "=" Expr) ;
SpecificationStmt ::= CommonStmt | DataStmt | DimensionStmt | EquivalenceStmt | ExternalStmt | IntrinsicStmt | SaveStmt ;
 SpecificationStmt ::= AccessStmt | AllocatableStmt | IntentStmt | NamelistStmt | OptionalStmt | PointerStmt | TargetStmt ;
ArrayDeclarator ::= VariableName "(" ArraySpec ")" ;
ComponentAttrSpec ::= "pointer" | ("dimension" "(" ComponentArraySpec ")") ;
SubroutineInterfaceRange ::= SubroutineParList EOS SubprogramInterfaceBody? EndSubroutineStmt ;
DefinedUnaryOp ::= Dop ;
VariableName ::= Ident ;
OrOperand ::= AndOperand AndOpAndOperand* ;
OrOp ::= SP ".or." SP ;
EndBlockDataStmt ::= LblDef "end" EOS ;
 EndBlockDataStmt ::= (LblDef "endblockdata" EndName? EOS) | (LblDef "end" "blockdata" EndName? EOS) | (LblDef "endblock" "data" EndName? EOS) | (LblDef "end" "block" "data" EndName? EOS) ;
RewindStmt ::= (LblDef "rewind" UnitIdentifier EOS) | (LblDef "rewind" "(" PositionSpecList ")" EOS) ;
UFFactor ::= UFPrimary | (UFPrimary PowerOp UFFactor) ;
OptionalParList ::= OptionalPar+ ;
DerivedTypeStmt ::= (LblDef "type" TypeName EOS) | (LblDef "type" "::" TypeName EOS) | (LblDef "type" "," AccessSpec "::" TypeName EOS) ;
FunctionArg ::= Name "=" Expr ;
ElseIfStmt ::= LblDef EX_2 "elseif" "(" Expr ")" "then" EOS IN_2 ;
 ElseIfStmt ::= LblDef EX_2 "else" "if" "(" Expr ")" "then" EOS IN_2 ;
ActionStmt ::= ArithmeticIfStmt | AssignmentStmt | AssignStmt | BackspaceStmt | CallStmt | CloseStmt | ContinueStmt | EndfileStmt | GotoStmt | ComputedGotoStmt | AssignedGotoStmt | IfStmt | InquireStmt | OpenStmt | PauseStmt | PrintStmt | ReadStmt | ReturnStmt | RewindStmt | StmtFunctionStmt | StopStmt | WriteStmt ;
 ActionStmt ::= AllocateStmt | CycleStmt | DeallocateStmt | ExitStmt | NullifyStmt | PointerAssignmentStmt | WhereStmt ;
StmtFunctionRange ::= "(" SFDummyArgNameList? ")" "=" Expr EOS ;
ImplicitRanges ::= {ImplicitRange ","}* ;
AllocatedShape ::= "(" SectionSubscriptList ")" ;
EntryStmt ::= LblDef "entry" EntryName SubroutineParList "result" "(" Name ")" EOS ;
KindParam ::= Icon | NamedConstantUse ;
CaseStmt ::= (LblDef "case" CaseSelector EOS) | (LblDef "case" CaseSelector Name EOS) ;
ReturnStmt ::= LblDef "return" Expr? EOS ;
ModuleName ::= Ident ;
OutputImpliedDo ::= ("(" Expr "," ImpliedDoVariable "=" Expr "," Expr CommaExpr? ")") | ("(" OutputItemList1 "," ImpliedDoVariable "=" Expr "," Expr CommaExpr? ")") ;
NamelistStmt ::= LblDef "namelist" NamelistGroups EOS ;
AcImpliedDo ::= ("(" Expr "," ImpliedDoVariable "=" Expr "," Expr ")") | ("(" Expr "," ImpliedDoVariable "=" Expr "," Expr "," Expr ")") | ("(" AcImpliedDo "," ImpliedDoVariable "=" Expr "," Expr ")") | ("(" AcImpliedDo "," ImpliedDoVariable "=" Expr "," Expr "," Expr ")") ;
WhereStmt ::= LblDef "where" "(" MaskExpr ")" AssignmentStmt ;
ContinueStmt ::= LblDef "continue" EOS ;
SavedEntity ::= VariableName | SavedCommonBlock ;
ConditionalBody ::= ExecutionPartConstruct* ;
ComponentDecl ::= (ComponentName "(" ComponentArraySpec ")" "*" CharLength) | (ComponentName "(" ComponentArraySpec ")") | (ComponentName "*" CharLength) | ComponentName ;
PointerStmtObject ::= ObjectName | (ObjectName "(" DeferredShapeSpecList ")") ;
MislexedFcon ::= (RDcon SPOFF RDcon SPON) | (Ident SPOFF RDcon SPON) ;
IntrinsicList ::= IntrinsicProcedureName+ ;
MaskExpr ::= Expr ;
CommonBlockObject ::= VariableName | ArrayDeclarator ;
EndIfStmt ::= LblDef EX_2 "endif" EOS ;
 EndIfStmt ::= LblDef EX_2 "end" "if" EOS ;
EndfileStmt ::= (LblDef "endfile" UnitIdentifier EOS) | (LblDef "endfile" "(" PositionSpecList ")" EOS) ;
 EndfileStmt ::= (LblDef "end" "file" UnitIdentifier EOS) | (LblDef "end" "file" "(" PositionSpecList ")" EOS) ;
LowerBound ::= Expr ;
DataStmtValueList ::= DataStmtValue+ ;
LblRef ::= Label ;
RenameList ::= Rename+ ;
IfConstruct ::= IfThenStmt ConditionalBody ElseIfConstruct* ElseConstruct? EndIfStmt ;
TargetStmt ::= LblDef "target" ColonColon? TargetObjectList EOS ;
DerivedTypeBody ::= DerivedTypeBodyConstruct | (DerivedTypeBody DerivedTypeBodyConstruct) ;
IntrinsicProcedureName ::= Ident ;
ExternalName ::= Ident ;
NamelistGroupObject ::= VariableName ;
ModuleSubprogramPartConstruct ::= ContainsStmt | ModuleSubprogram ;
AndOperand ::= NotOp? Level4Expr ;
SubroutineArg ::= Expr | Hcon | ("*" LblRef) ;
 SubroutineArg ::= (Name "=" Expr) | (Name "=" Hcon) | (Name "=" "*" LblRef) ;
ProgramName ::= Ident ;
ElseWhere ::= (Where ElsewhereStmt) | (ElseWhere AssignmentStmt) ;
TargetObjectList ::= TargetObject+ ;
SFExprListRef ::= "(" SFExprList CommaSectionSubscript* ")" ;
ExecutionPartConstruct ::= ExecutableConstruct | FormatStmt | DataStmt | EntryStmt ;
 ExecutionPartConstruct ::= LblDef DoubleDoStmt ;
StopStmt ::= LblDef "stop" IconOrScon? EOS ;
AndOpAndOperand ::= AndOp AndOperand ;
ComponentName ::= Ident ;
ArrayDeclaratorList ::= ArrayDeclarator+ ;
ExplicitShapeSpec ::= (LowerBound ":" UpperBound) | UpperBound ;
AddOperand ::= MultOperand MultOpMultOperand* ;
OrUpOrOperand ::= OrOp OrOperand ;
COperand ::= Scon | NameDataRef | FunctionReference ;
TypeName ::= Ident ;
SaveStmt ::= (LblDef "save" EOS) | (LblDef "save" SavedEntityList EOS) ;
 SaveStmt ::= LblDef "save" "::" SavedEntityList EOS ;
LengthSelector ::= "*" CharLength ;
 LengthSelector ::= "(" TypeParamValue ")" ;
OptionalPar ::= DummyArgName ;
InternalSubprogram ::= FunctionSubprogram | SubroutineSubprogram ;
SpecificationPartConstruct ::= ImplicitStmt | ParameterStmt | FormatStmt | EntryStmt | DeclarationConstruct | IncludeStmt ;
 SpecificationPartConstruct ::= UseStmt ;
NamelistGroups ::= ("/" NamelistGroupName "/" NamelistGroupObject) | (NamelistGroups "/" NamelistGroupName "/" NamelistGroupObject) | (NamelistGroups "," "/" NamelistGroupName "/" NamelistGroupObject) | (NamelistGroups "," NamelistGroupObject) ;
AccessIdList ::= AccessId+ ;
FunctionArgList ::= FunctionArg | (FunctionArgList "," FunctionArg) | (SectionSubscriptList "," FunctionArg) ;
AllocateObject ::= VariableName | (AllocateObject FieldSelector) ;
DoLblDef ::= TAB_2 Icon TAB_9 ;
PowerUpMultOperand ::= PowerOp MultOperand ;
SubroutineRange ::= SubroutineParList EOS Body? EndSubroutineStmt ;
 SubroutineRange ::= SubroutineParList EOS BodyPlusInternals EndSubroutineStmt ;
InterfaceBlock ::= InterfaceStmt InterfaceBlockBody EndInterfaceStmt ;
EquivalenceStmt ::= LblDef "equivalence" EquivalenceSetList EOS ;
CloseSpecList ::= UnitIdentifierComma? {CloseSpec ","}* ;
ParameterStmt ::= LblDef "parameter" "(" NamedConstantDefList ")" EOS ;
CommonBlockName ::= Ident ;
SectionSubscriptRef ::= "(" SectionSubscriptList ")" ;
StructureComponent ::= (VariableName FieldSelector) | (StructureComponent FieldSelector) ;
SFDummyArgNameList ::= SFDummyArgName+ ;
EOS ::= CommentOrNewline CommentOrNewline* ;
SavedEntityList ::= SavedEntity+ ;
NamedConstantDef ::= NamedConstant "=" Expr ;
LabelDoStmt ::= LblDef "do" DoLblRef CommaLoopControl EOS IN_2 ExecutionPartConstruct* EX_2 DoLblDef DoLabelStmt ;
Level5Expr ::= EquivOperand EquivOpEquivOperand* ;
CaseBodyConstruct ::= CaseStmt | ExecutionPartConstruct ;
MainRange ::= Body? EndProgramStmt ;
 MainRange ::= BodyPlusInternals EndProgramStmt ;
GenericName ::= Ident ;
Level1Expr ::= Primary ;
 Level1Expr ::= DefinedUnaryOp Primary ;
BlockDataName ::= Ident ;
BlockDoConstruct ::= LblDef NameColon? "do" CommaLoopControl? EOS IN_2 ExecutionPartConstruct* EX_2 EndDoStmt ;
PointerField ::= (Name SFExprListRef? "%" Name) | (PointerField FieldSelector) ;
FieldSelector ::= ("(" SectionSubscriptList ")" "%" Name) | ("%" Name) ;
CExpr ::= CPrimary CPrimaryConcatOp* ;
PlusMinus ::= "+" | "-" ;
EndWhereStmt ::= (LblDef "endwhere" EOS) | (LblDef "end" "where" EOS) ;
ExternalNameList ::= ExternalName+ ;
WhereConstruct ::= (Where EndWhereStmt) | (ElseWhere EndWhereStmt) ;
SubroutineArgList ::= {SubroutineArg ","}* ;
ImpliedDoVariable ::= Ident ;
DataStmtObjectList ::= DataStmtObject+ ;
DefinedBinaryOp ::= Dop ;
AddOpAddOperand ::= AddOp AddOperand ;
InputImpliedDo ::= "(" InputItemList "," ImpliedDoVariable "=" Expr "," Expr CommaExpr? ")" ;
DataIDoObjectList ::= DataIDoObject+ ;
BackspaceStmt ::= (LblDef "backspace" UnitIdentifier EOS) | (LblDef "backspace" "(" PositionSpecList ")" EOS) ;
AllocateStmt ::= (LblDef "allocate" "(" AllocationList "," "stat=" Variable ")" EOS) | (LblDef "allocate" "(" AllocationList ")" EOS) ;
AssumedShapeSpec ::= (LowerBound ":") | ":" ;
ElseStmt ::= LblDef EX_2 "else" EOS IN_2 ;
DerivedTypeBodyConstruct ::= PrivateSequenceStmt | ComponentDefStmt ;
PauseStmt ::= LblDef "pause" IconOrScon? EOS ;
ExecutableProgram ::= ProgramUnit+ ;
WhereConstructStmt ::= LblDef "where" "(" MaskExpr ")" EOS ;
InterfaceBlockBody ::= InterfaceBodyPartConstruct | (InterfaceBlockBody InterfaceBodyPartConstruct) ;
SubroutinePars ::= {SubroutinePar ","}* ;
ComplexConst ::= "(" ComplexComponent "," ComplexComponent ")" ;
DataStmt ::= LblDef "data" Datalist EOS ;
CommentOrNewline ::= comment | newline ;
RdUnitId ::= ("(" UFExpr ")") | ("(" "*" ")") ;
EndProgramStmt ::= LblDef "end" EOS ;
 EndProgramStmt ::= (LblDef "endprogram" EndName? EOS) | (LblDef "end" "program" EndName? EOS) ;
LogicalConstant ::= (SP ".true." SP) | (SP ".false." SP) ;
 LogicalConstant ::= (SP ".true." SP "_" KindParam) | (SP ".false." SP "_" KindParam ".") ;
IconOrScon ::= Icon | Scon ;
FunctionPrefix ::= "function" | (TypeSpec "function") ;
 FunctionPrefix ::= ("recursive" "function") | ("recursive" TypeSpec "function") | (TypeSpec "recursive" "function") ;
DataImpliedDo ::= ("(" DataIDoObjectList "," ImpliedDoVariable "=" Expr "," Expr ")") | ("(" DataIDoObjectList "," ImpliedDoVariable "=" Expr "," Expr "," Expr ")") ;
EquivalenceObjectList ::= EquivalenceObject+ ;
ScalarVariable ::= VariableName | ArrayElement ;
ContainsStmt ::= LblDef "contains" EOS ;
StructureConstructor ::= TypeName "(" ExprList ")" ;
IfStmt ::= LblDef "if" "(" Expr ")" ActionStmt ;
IntentStmt ::= LblDef "intent" "(" IntentSpec ")" ColonColon? IntentParList EOS ;
PositionSpec ::= ("unit=" UnitIdentifier) | ("err=" LblRef) | ("iostat=" ScalarVariable) ;
FunctionName ::= Ident ;
ReadStmt ::= (LblDef "read" RdCtlSpec InputItemList? EOS) | (LblDef "read" RdFmtId CommaInputItemList? EOS) ;
UFTerm ::= UFFactor | (UFTerm MultOp UFFactor) | (UFTerm ConcatOp UFPrimary) ;
IntentSpec ::= "in" | "out" | "inout" ;
EquivOp ::= (SP ".eqv." SP) | (SP ".neqv." SP) ;
AssumedSizeSpec ::= "*" | (LowerBound ":" "*") | (ExplicitShapeSpecList "," "*") | (ExplicitShapeSpecList "," LowerBound ":" "*") ;
UseName ::= Ident ;
OutputItemList ::= Expr | OutputItemList1 ;
DataStmtObject ::= Variable | DataImpliedDo ;
LblDef ::= ε | (TAB_2 Label TAB_7) ;
ExecutableConstruct ::= ActionStmt | DoConstruct | IfConstruct ;
 ExecutableConstruct ::= CaseConstruct | WhereConstruct ;
OnlyList ::= Only+ ;
ObjectName ::= Ident ;
InterfaceBodyPartConstruct ::= InterfaceBody | ModuleProcedureStmt ;
DataIDoObject ::= ArrayElement | DataImpliedDo ;
 DataIDoObject ::= StructureComponent ;
IntentParList ::= IntentPar+ ;
ArrayElement ::= VariableName "(" SectionSubscriptList ")" ;
 ArrayElement ::= StructureComponent "(" SectionSubscriptList ")" ;
InterfaceStmt ::= (LblDef "interface" GenericName EOS) | (LblDef "interface" GenericSpec EOS) | (LblDef "interface" EOS) ;
SFVarName ::= Ident ;
FormatStmt ::= LblDef "format" "(" FmtSpec? ")" EOS ;
ElseConstruct ::= ElseStmt ConditionalBody ;
CommaSectionSubscript ::= "," SectionSubscript ;
SavedCommonBlock ::= "/" CommonBlockName "/" ;
CaseValueRangeList ::= CaseValueRange+ ;
PointerObjectList ::= PointerObject+ ;
SubprogramInterfaceBody ::= SpecificationPartConstruct | (SubprogramInterfaceBody SpecificationPartConstruct) ;
ModuleStmt ::= LblDef "module" ModuleName EOS ;
CommonStmt ::= LblDef "common" Comlist EOS ;
DoLabelStmt ::= ActionStmt ;
IncludeStmt ::= "include" Scon EOS ;
GoToKw ::= "goto" ;
 GoToKw ::= "go" "to" ;
RdFmtIdExpr ::= "(" UFExpr ")" ;
MainProgram ::= ProgramStmt? MainRange ;
NamedConstantUse ::= Ident ;
CaseConstruct ::= (LblDef Name ":" "selectcase" "(" Expr ")" EOS SelectCaseRange) | (LblDef "selectcase" "(" Expr ")" EOS SelectCaseRange) | (LblDef Name ":" "select" "case" "(" Expr ")" EOS SelectCaseRange) | (LblDef "select" "case" "(" Expr ")" EOS SelectCaseRange) ;
ComponentDeclList ::= ComponentDecl+ ;
ArrayName ::= Ident ;
UnsignedArithmeticConstant ::= Icon | RDcon | ComplexConst ;
 UnsignedArithmeticConstant ::= Icon "_" KindParam ;
 UnsignedArithmeticConstant ::= RDcon "_" KindParam ;
Level2Expr ::= Sign? AddOperand AddOpAddOperand* ;
FunctionSubprogram ::= LblDef FunctionPrefix FunctionName FunctionRange ;
InterfaceBody ::= (LblDef FunctionPrefix FunctionName FunctionInterfaceRange) | (LblDef "subroutine" SubroutineName SubroutineInterfaceRange) ;
DummyArgName ::= Ident ;
ConcatOpLevel2Expr ::= ConcatOp Level2Expr ;
AssignmentStmt ::= LblDef Name SFExprListRef? SubstringRange? "=" Expr EOS ;
 AssignmentStmt ::= (LblDef Name SFExprListRef? "%" NameDataRef "=" Expr EOS) | (LblDef Name "(" SFDummyArgNameList ")" "%" NameDataRef "=" Expr EOS) ;
ExprList ::= Expr+ ;
ExternalStmt ::= LblDef "external" ExternalNameList EOS ;
TargetObject ::= ObjectName | (ObjectName "(" ArraySpec ")") ;
DataStmtSet ::= DataStmtObjectList "/" DataStmtValueList "/" ;
ModuleBody ::= SpecificationPartConstruct | ModuleSubprogramPartConstruct | (ModuleBody SpecificationPartConstruct) | (ModuleBody ModuleSubprogramPartConstruct) ;
IntrinsicStmt ::= LblDef "intrinsic" IntrinsicList EOS ;
ComplexComponent ::= (Sign? Icon) | RDcon | Name ;
ProgramStmt ::= LblDef "program" ProgramName EOS ;
AllocatableStmt ::= LblDef "allocatable" ColonColon? ArrayAllocationList EOS ;
CommaExpr ::= "," Expr ;
IntentPar ::= DummyArgName ;
DoubleDoStmt ::= "do" LblRef CommaLoopControl EOS ;
AcValueList1 ::= (Expr "," Expr) | (Expr "," AcImpliedDo) | AcImpliedDo | (AcValueList1 "," Expr) | (AcValueList1 "," AcImpliedDo) ;
AddOp ::= "+" | "-" ;
CPrimary ::= COperand | ("(" CExpr ")") ;
RelOp ::= (SP ".eq." SP) | (SP ".ne." SP) | (SP ".lt." SP) | (SP ".le." SP) | (SP ".gt." SP) | (SP ".ge." SP) ;
 RelOp ::= "==" | "/=" | "<" | "<=" | ">" | ">=" ;
BodyPlusInternals ::= (Body ContainsStmt InternalSubprogram) | (ContainsStmt InternalSubprogram) | (BodyPlusInternals InternalSubprogram) ;
ImplicitRange ::= Ident "-" Ident ;
ArrayAllocationList ::= ArrayAllocation+ ;
ConcatOp ::= "/" SPOFF "/" SPON ;
TypeSpec ::= "integer" | "real" | "doubleprecision" | "complex" | "logical" | "character" | ("character" LengthSelector) ;
 TypeSpec ::= ("integer" KindSelector) | ("real" KindSelector) | ("double" "precision") | ("complex" KindSelector) | ("character" CharSelector) | ("logical" KindSelector) | ("type" "(" TypeName ")") ;
BodyConstruct ::= SpecificationPartConstruct | ExecutableConstruct ;
FunctionReference ::= Name "(" ")" ;
 FunctionReference ::= Name "(" FunctionArgList ")" ;
SelectCaseRange ::= (SelectCaseBody EndSelectStmt) | EndSelectStmt ;
UFPrimary ::= Icon | Scon | NameDataRef | FunctionReference | ("(" UFExpr ")") ;
SelectCaseBody ::= CaseStmt | (SelectCaseBody CaseBodyConstruct) ;
DimensionStmt ::= LblDef "dimension" ArrayDeclaratorList EOS ;
 DimensionStmt ::= LblDef "dimension" "::" ArrayDeclaratorList EOS ;
PrivateSequenceStmt ::= (LblDef "private" EOS) | (LblDef "sequence" EOS) ;
SFDummyArgName ::= Ident ;
SubscriptList ::= Subscript+ ;
WriteStmt ::= LblDef "write" "(" IoControlSpecList ")" OutputItemList? EOS ;
ExitStmt ::= LblDef "exit" EndName? EOS ;
UFExpr ::= UFTerm | (Sign UFTerm) | (UFExpr AddOp UFTerm) ;
FunctionRange ::= FunctionParList EOS Body? EndFunctionStmt ;
 FunctionRange ::= (FunctionParList "result" "(" Name ")" EOS BodyPlusInternals EndFunctionStmt) | (FunctionParList "result" "(" Name ")" EOS Body EndFunctionStmt) | (FunctionParList "result" "(" Name ")" EOS EndFunctionStmt) | (FunctionParList EOS BodyPlusInternals EndFunctionStmt) ;
CommaLoopControl ::= ","? LoopControl ;
ElseIfConstruct ::= ElseIfStmt ConditionalBody ;
FormatIdentifier ::= LblRef | CExpr | "*" ;
BlockDataStmt ::= LblDef "blockdata" BlockDataName? EOS ;
 BlockDataStmt ::= LblDef "block" "data" BlockDataName? EOS ;
ImplicitSpecList ::= ImplicitSpec+ ;
UpperBound ::= Expr ;
InputItemList ::= InputItem+ ;
EndFunctionStmt ::= LblDef "end" EOS ;
 EndFunctionStmt ::= (LblDef "endfunction" EndName? EOS) | (LblDef "end" "function" EndName? EOS) ;
ComputedGotoStmt ::= LblDef GoToKw "(" LblRefList ")" ","? Expr EOS ;
ElsewhereStmt ::= LblDef "elsewhere" EOS ;
GenericSpec ::= ("operator" "(" DefinedOperator ")") | ("assignment" "(" "=" ")") ;
ModuleProcedureStmt ::= LblDef "module" "procedure" ProcedureNameList EOS ;
FunctionPars ::= {FunctionPar ","}* ;
SubroutineSubprogram ::= LblDef "subroutine" SubroutineName SubroutineRange ;
 SubroutineSubprogram ::= LblDef "recursive" "subroutine" SubroutineName SubroutineRange ;
ProgramUnit ::= MainProgram | FunctionSubprogram | SubroutineSubprogram | BlockDataSubprogram ;
 ProgramUnit ::= Module ;
EndSubroutineStmt ::= LblDef "end" EOS ;
 EndSubroutineStmt ::= (LblDef "endsubroutine" EndName? EOS) | (LblDef "end" "subroutine" EndName? EOS) ;
BozLiteralConstant ::= Bcon | Ocon | Zcon ;
ArrayConstructor ::= "(/" AcValueList "/)" ;
--------------------java::java-1-jls-impl.bgf--------------------
ReturnStatement ::= "return" Expression? ";" ;
SimpleName ::= Identifier ;
ArrayAccess ::= Name "[" Expression "]" ;
 ArrayAccess ::= PrimaryNoNewArray "[" Expression "]" ;
DimExpr ::= "[" Expression "]" ;
ConstantExpression ::= Expression ;
PrimaryNoNewArray ::= Literal ;
 PrimaryNoNewArray ::= "this" ;
 PrimaryNoNewArray ::= "(" Expression ")" ;
 PrimaryNoNewArray ::= ClassInstanceCreationExpression ;
 PrimaryNoNewArray ::= FieldAccess ;
 PrimaryNoNewArray ::= MethodInvocation ;
 PrimaryNoNewArray ::= ArrayAccess ;
SwitchStatement ::= "switch" "(" Expression ")" SwitchBlock ;
WhileStatementNoShortIf ::= "while" "(" Expression ")" StatementNoShortIf ;
ExclusiveOrExpression ::= AndExpression ;
 ExclusiveOrExpression ::= ExclusiveOrExpression "^" AndExpression ;
ClassOrInterfaceType ::= Name ;
ImportDeclaration ::= SingleTypeImportDeclaration ;
 ImportDeclaration ::= TypeImportOnDemandDeclaration ;
StaticInitializer ::= "static" Block ;
PackageDeclaration ::= "package" Name ";" ;
SwitchLabels ::= SwitchLabel ;
 SwitchLabels ::= SwitchLabels SwitchLabel ;
SingleTypeImportDeclaration ::= "import" Name ";" ;
InterfaceType ::= ClassOrInterfaceType ;
ClassBodyDeclarations ::= ClassBodyDeclaration ;
 ClassBodyDeclarations ::= ClassBodyDeclarations ClassBodyDeclaration ;
TypeImportOnDemandDeclaration ::= "import" Name "." "*" ";" ;
MethodInvocation ::= Name "(" ArgumentList? ")" ;
 MethodInvocation ::= Primary "." Identifier "(" ArgumentList? ")" ;
 MethodInvocation ::= "super" "." Identifier "(" ArgumentList? ")" ;
ArrayCreationExpression ::= "new" PrimitiveType DimExprs Dims? ;
 ArrayCreationExpression ::= "new" ClassOrInterfaceType DimExprs Dims? ;
ClassTypeList ::= ClassType ;
 ClassTypeList ::= ClassTypeList "," ClassType ;
MethodHeader ::= Modifiers? Type MethodDeclarator Throws? ;
 MethodHeader ::= Modifiers? "void" MethodDeclarator Throws? ;
VariableDeclarator ::= VariableDeclaratorId ;
 VariableDeclarator ::= VariableDeclaratorId "=" VariableInitializer ;
InterfaceMemberDeclarations ::= InterfaceMemberDeclaration ;
 InterfaceMemberDeclarations ::= InterfaceMemberDeclarations InterfaceMemberDeclaration ;
CatchClause ::= "catch" "(" FormalParameter ")" Block ;
ArrayInitializer ::= "{" VariableInitializers? ","? "}" ;
VariableDeclaratorId ::= Identifier ;
 VariableDeclaratorId ::= VariableDeclaratorId "[" "]" ;
ContinueStatement ::= "continue" Identifier? ";" ;
InterfaceMemberDeclaration ::= ConstantDeclaration ;
 InterfaceMemberDeclaration ::= AbstractMethodDeclaration ;
AssignmentExpression ::= ConditionalExpression ;
 AssignmentExpression ::= Assignment ;
FloatingPointType ::= "float" ;
 FloatingPointType ::= "double" ;
PreIncrementExpression ::= "++" UnaryExpression ;
ConditionalOrExpression ::= ConditionalAndExpression ;
 ConditionalOrExpression ::= ConditionalOrExpression "||" ConditionalAndExpression ;
FieldAccess ::= Primary "." Identifier ;
 FieldAccess ::= "super" "." Identifier ;
WhileStatement ::= "while" "(" Expression ")" Statement ;
LabeledStatementNoShortIf ::= Identifier ":" StatementNoShortIf ;
IfThenElseStatement ::= "if" "(" Expression ")" StatementNoShortIf "else" Statement ;
InterfaceBody ::= "{" InterfaceMemberDeclarations? "}" ;
FormalParameter ::= Type VariableDeclaratorId ;
ForInit ::= StatementExpressionList ;
 ForInit ::= LocalVariableDeclaration ;
CastExpression ::= "(" PrimitiveType Dims? ")" UnaryExpression ;
 CastExpression ::= "(" Expression ")" UnaryExpressionNotPlusMinus ;
 CastExpression ::= "(" Name Dims ")" UnaryExpressionNotPlusMinus ;
ForUpdate ::= StatementExpressionList ;
EqualityExpression ::= RelationalExpression ;
 EqualityExpression ::= EqualityExpression "==" RelationalExpression ;
 EqualityExpression ::= EqualityExpression "!=" RelationalExpression ;
BreakStatement ::= "break" Identifier? ";" ;
PostfixExpression ::= Primary ;
 PostfixExpression ::= Name ;
 PostfixExpression ::= PostIncrementExpression ;
 PostfixExpression ::= PostDecrementExpression ;
SwitchBlockStatementGroups ::= SwitchBlockStatementGroup ;
 SwitchBlockStatementGroups ::= SwitchBlockStatementGroups SwitchBlockStatementGroup ;
SwitchBlockStatementGroup ::= SwitchLabels BlockStatements ;
ThrowStatement ::= "throw" Expression ";" ;
CompilationUnit ::= PackageDeclaration? ImportDeclarations? TypeDeclarations? ;
NumericType ::= IntegralType ;
 NumericType ::= FloatingPointType ;
StatementExpression ::= Assignment ;
 StatementExpression ::= PreIncrementExpression ;
 StatementExpression ::= PreDecrementExpression ;
 StatementExpression ::= PostIncrementExpression ;
 StatementExpression ::= PostDecrementExpression ;
 StatementExpression ::= MethodInvocation ;
 StatementExpression ::= ClassInstanceCreationExpression ;
InclusiveOrExpression ::= ExclusiveOrExpression ;
 InclusiveOrExpression ::= InclusiveOrExpression "|" ExclusiveOrExpression ;
ForStatement ::= "for" "(" ForInit? ";" Expression? ";" ForUpdate? ")" Statement ;
ClassInstanceCreationExpression ::= "new" ClassType "(" ArgumentList? ")" ;
MethodBody ::= Block ;
 MethodBody ::= ";" ;
EmptyStatement ::= ";" ;
TypeDeclaration ::= ClassDeclaration ;
 TypeDeclaration ::= InterfaceDeclaration ;
 TypeDeclaration ::= ";" ;
FieldDeclaration ::= Modifiers? Type VariableDeclarators ";" ;
ConstructorDeclaration ::= Modifiers? ConstructorDeclarator Throws? ConstructorBody ;
RelationalExpression ::= ShiftExpression ;
 RelationalExpression ::= RelationalExpression "<" ShiftExpression ;
 RelationalExpression ::= RelationalExpression ">" ShiftExpression ;
 RelationalExpression ::= RelationalExpression "<=" ShiftExpression ;
 RelationalExpression ::= RelationalExpression ">=" ShiftExpression ;
 RelationalExpression ::= RelationalExpression "instanceof" ReferenceType ;
IfThenElseStatementNoShortIf ::= "if" "(" Expression ")" StatementNoShortIf "else" StatementNoShortIf ;
LabeledStatement ::= Identifier ":" Statement ;
MethodDeclaration ::= MethodHeader MethodBody ;
AbstractMethodDeclaration ::= MethodHeader ";" ;
ExplicitConstructorInvocation ::= "this" "(" ArgumentList? ")" ";" ;
 ExplicitConstructorInvocation ::= "super" "(" ArgumentList? ")" ";" ;
TypeDeclarations ::= TypeDeclaration ;
 TypeDeclarations ::= TypeDeclarations TypeDeclaration ;
ExtendsInterfaces ::= "extends" InterfaceType ;
 ExtendsInterfaces ::= ExtendsInterfaces "," InterfaceType ;
ClassType ::= ClassOrInterfaceType ;
AssignmentOperator ::= "=" ;
 AssignmentOperator ::= "*=" ;
 AssignmentOperator ::= "/=" ;
 AssignmentOperator ::= "%=" ;
 AssignmentOperator ::= "+=" ;
 AssignmentOperator ::= "-=" ;
 AssignmentOperator ::= "<<=" ;
 AssignmentOperator ::= ">>=" ;
 AssignmentOperator ::= ">>>=" ;
 AssignmentOperator ::= "&=" ;
 AssignmentOperator ::= "^=" ;
 AssignmentOperator ::= "|=" ;
BlockStatements ::= BlockStatement ;
 BlockStatements ::= BlockStatements BlockStatement ;
InterfaceTypeList ::= InterfaceType ;
 InterfaceTypeList ::= InterfaceTypeList "," InterfaceType ;
AndExpression ::= EqualityExpression ;
 AndExpression ::= AndExpression "&" EqualityExpression ;
MultiplicativeExpression ::= UnaryExpression ;
 MultiplicativeExpression ::= MultiplicativeExpression "*" UnaryExpression ;
 MultiplicativeExpression ::= MultiplicativeExpression "/" UnaryExpression ;
 MultiplicativeExpression ::= MultiplicativeExpression "%" UnaryExpression ;
LeftHandSide ::= Name ;
 LeftHandSide ::= FieldAccess ;
 LeftHandSide ::= ArrayAccess ;
ConstructorDeclarator ::= SimpleName "(" FormalParameterList? ")" ;
PostDecrementExpression ::= PostfixExpression "--" ;
StatementNoShortIf ::= StatementWithoutTrailingSubstatement ;
 StatementNoShortIf ::= LabeledStatementNoShortIf ;
 StatementNoShortIf ::= IfThenElseStatementNoShortIf ;
 StatementNoShortIf ::= WhileStatementNoShortIf ;
 StatementNoShortIf ::= ForStatementNoShortIf ;
QualifiedName ::= Name "." Identifier ;
IntegralType ::= "byte" ;
 IntegralType ::= "short" ;
 IntegralType ::= "int" ;
 IntegralType ::= "long" ;
 IntegralType ::= "char" ;
VariableInitializer ::= Expression ;
 VariableInitializer ::= ArrayInitializer ;
VariableDeclarators ::= VariableDeclarator ;
 VariableDeclarators ::= VariableDeclarators "," VariableDeclarator ;
AdditiveExpression ::= MultiplicativeExpression ;
 AdditiveExpression ::= AdditiveExpression "+" MultiplicativeExpression ;
 AdditiveExpression ::= AdditiveExpression "-" MultiplicativeExpression ;
InterfaceDeclaration ::= Modifiers? "interface" Identifier ExtendsInterfaces? InterfaceBody ;
PrimitiveType ::= NumericType ;
 PrimitiveType ::= "boolean" ;
ImportDeclarations ::= ImportDeclaration ;
 ImportDeclarations ::= ImportDeclarations ImportDeclaration ;
ConditionalExpression ::= ConditionalOrExpression ;
 ConditionalExpression ::= ConditionalOrExpression "?" Expression ":" ConditionalExpression ;
LocalVariableDeclarationStatement ::= LocalVariableDeclaration ";" ;
ConstructorBody ::= "{" ExplicitConstructorInvocation? BlockStatements? "}" ;
SynchronizedStatement ::= "synchronized" "(" Expression ")" Block ;
ArgumentList ::= Expression ;
 ArgumentList ::= ArgumentList "," Expression ;
ShiftExpression ::= AdditiveExpression ;
 ShiftExpression ::= ShiftExpression "<<" AdditiveExpression ;
 ShiftExpression ::= ShiftExpression ">>" AdditiveExpression ;
 ShiftExpression ::= ShiftExpression ">>>" AdditiveExpression ;
ClassBody ::= "{" ClassBodyDeclarations? "}" ;
SwitchBlock ::= "{" SwitchBlockStatementGroups? SwitchLabels? "}" ;
FormalParameterList ::= FormalParameter ;
 FormalParameterList ::= FormalParameterList "," FormalParameter ;
ExpressionStatement ::= StatementExpression ";" ;
DimExprs ::= DimExpr ;
 DimExprs ::= DimExprs DimExpr ;
ConstantDeclaration ::= FieldDeclaration ;
IfThenStatement ::= "if" "(" Expression ")" Statement ;
TryStatement ::= "try" Block Catches ;
 TryStatement ::= "try" Block Catches? Finally ;
ArrayType ::= PrimitiveType "[" "]" ;
 ArrayType ::= Name "[" "]" ;
 ArrayType ::= ArrayType "[" "]" ;
LocalVariableDeclaration ::= Type VariableDeclarators ;
ForStatementNoShortIf ::= "for" "(" ForInit? ";" Expression? ";" ForUpdate? ")" StatementNoShortIf ;
MethodDeclarator ::= Identifier "(" FormalParameterList? ")" ;
 MethodDeclarator ::= MethodDeclarator "[" "]" ;
VariableInitializers ::= VariableInitializer ;
 VariableInitializers ::= VariableInitializers "," VariableInitializer ;
UnaryExpressionNotPlusMinus ::= PostfixExpression ;
 UnaryExpressionNotPlusMinus ::= "~" UnaryExpression ;
 UnaryExpressionNotPlusMinus ::= "!" UnaryExpression ;
 UnaryExpressionNotPlusMinus ::= CastExpression ;
ConditionalAndExpression ::= InclusiveOrExpression ;
 ConditionalAndExpression ::= ConditionalAndExpression "&&" InclusiveOrExpression ;
PreDecrementExpression ::= "--" UnaryExpression ;
ClassMemberDeclaration ::= FieldDeclaration ;
 ClassMemberDeclaration ::= MethodDeclaration ;
UnaryExpression ::= PreIncrementExpression ;
 UnaryExpression ::= PreDecrementExpression ;
 UnaryExpression ::= "+" UnaryExpression ;
 UnaryExpression ::= "-" UnaryExpression ;
 UnaryExpression ::= UnaryExpressionNotPlusMinus ;
PostIncrementExpression ::= PostfixExpression "++" ;
ReferenceType ::= ClassOrInterfaceType ;
 ReferenceType ::= ArrayType ;
StatementExpressionList ::= StatementExpression ;
 StatementExpressionList ::= StatementExpressionList "," StatementExpression ;
StatementWithoutTrailingSubstatement ::= Block ;
 StatementWithoutTrailingSubstatement ::= EmptyStatement ;
 StatementWithoutTrailingSubstatement ::= ExpressionStatement ;
 StatementWithoutTrailingSubstatement ::= SwitchStatement ;
 StatementWithoutTrailingSubstatement ::= DoStatement ;
 StatementWithoutTrailingSubstatement ::= BreakStatement ;
 StatementWithoutTrailingSubstatement ::= ContinueStatement ;
 StatementWithoutTrailingSubstatement ::= ReturnStatement ;
 StatementWithoutTrailingSubstatement ::= SynchronizedStatement ;
 StatementWithoutTrailingSubstatement ::= ThrowStatement ;
 StatementWithoutTrailingSubstatement ::= TryStatement ;
DoStatement ::= "do" Statement "while" "(" Expression ")" ";" ;
ClassDeclaration ::= Modifiers? "class" Identifier Super? Interfaces? ClassBody ;
BlockStatement ::= LocalVariableDeclarationStatement ;
 BlockStatement ::= Statement ;
ClassBodyDeclaration ::= ClassMemberDeclaration ;
 ClassBodyDeclaration ::= StaticInitializer ;
 ClassBodyDeclaration ::= ConstructorDeclaration ;
SwitchLabel ::= "case" ConstantExpression ":" ;
 SwitchLabel ::= "default" ":" ;
--------------------java::java-1-jls-read.bgf--------------------
ReturnStatement ::= "return" Expression? ";" ;
ArrayAccess ::= ExpressionName "[" Expression "]" ;
 ArrayAccess ::= PrimaryNoNewArray "[" Expression "]" ;
PrimaryNoNewArray ::= Literal ;
 PrimaryNoNewArray ::= "this" ;
 PrimaryNoNewArray ::= "(" Expression ")" ;
 PrimaryNoNewArray ::= ClassInstanceCreationExpression ;
 PrimaryNoNewArray ::= FieldAccess ;
 PrimaryNoNewArray ::= MethodInvocation ;
 PrimaryNoNewArray ::= ArrayAccess ;
WhileStatementNoShortIf ::= "while" "(" Expression ")" StatementNoShortIf ;
AbstractMethodModifiers ::= AbstractMethodModifier ;
 AbstractMethodModifiers ::= AbstractMethodModifiers AbstractMethodModifier ;
MethodModifier ::= "public" ;
 MethodModifier ::= "protected" ;
 MethodModifier ::= "private" ;
 MethodModifier ::= "abstract" ;
 MethodModifier ::= "static" ;
 MethodModifier ::= "final" ;
 MethodModifier ::= "synchronized" ;
 MethodModifier ::= "native" ;
InterfaceType ::= TypeName ;
SingleTypeImportDeclaration ::= "import" TypeName ";" ;
TypeImportOnDemandDeclaration ::= "import" PackageName "." "*" ";" ;
ArrayCreationExpression ::= "new" PrimitiveType DimExprs Dims? ;
 ArrayCreationExpression ::= "new" TypeName DimExprs Dims? ;
MethodHeader ::= MethodModifiers? ResultType MethodDeclarator Throws? ;
VariableDeclarator ::= VariableDeclaratorId ;
 VariableDeclarator ::= VariableDeclaratorId "=" VariableInitializer ;
InterfaceMemberDeclarations ::= InterfaceMemberDeclaration ;
 InterfaceMemberDeclarations ::= InterfaceMemberDeclarations InterfaceMemberDeclaration ;
CatchClause ::= "catch" "(" FormalParameter ")" Block ;
ArrayInitializer ::= "{" VariableInitializers? ","? "}" ;
VariableDeclaratorId ::= Identifier ;
 VariableDeclaratorId ::= VariableDeclaratorId "[" "]" ;
PreIncrementExpression ::= "++" UnaryExpression ;
FieldAccess ::= Primary "." Identifier ;
 FieldAccess ::= "super" "." Identifier ;
LabeledStatementNoShortIf ::= Identifier ":" StatementNoShortIf ;
ForUpdate ::= StatementExpressionList ;
FieldModifier ::= "public" ;
 FieldModifier ::= "protected" ;
 FieldModifier ::= "private" ;
 FieldModifier ::= "final" ;
 FieldModifier ::= "static" ;
 FieldModifier ::= "transient" ;
 FieldModifier ::= "volatile" ;
ConstructorModifier ::= "public" ;
 ConstructorModifier ::= "protected" ;
 ConstructorModifier ::= "private" ;
PackageName ::= Identifier ;
 PackageName ::= PackageName "." Identifier ;
PostfixExpression ::= Primary ;
 PostfixExpression ::= ExpressionName ;
 PostfixExpression ::= PostIncrementExpression ;
 PostfixExpression ::= PostDecrementExpression ;
NumericType ::= IntegralType ;
 NumericType ::= FloatingPointType ;
InclusiveOrExpression ::= ExclusiveOrExpression ;
 InclusiveOrExpression ::= InclusiveOrExpression "|" ExclusiveOrExpression ;
CompilationUnit ::= PackageDeclaration? ImportDeclarations? TypeDeclarations? ;
ForStatement ::= "for" "(" ForInit? ";" Expression? ";" ForUpdate? ")" Statement ;
ClassInstanceCreationExpression ::= "new" ClassType "(" ArgumentList? ")" ;
ConstructorModifiers ::= ConstructorModifier ;
 ConstructorModifiers ::= ConstructorModifiers ConstructorModifier ;
FieldModifiers ::= FieldModifier ;
 FieldModifiers ::= FieldModifiers FieldModifier ;
EmptyStatement ::= ";" ;
TypeDeclaration ::= ClassDeclaration ;
 TypeDeclaration ::= InterfaceDeclaration ;
 TypeDeclaration ::= ";" ;
IfThenElseStatementNoShortIf ::= "if" "(" Expression ")" StatementNoShortIf "else" StatementNoShortIf ;
ConstantModifier ::= "public" ;
 ConstantModifier ::= "static" ;
 ConstantModifier ::= "final" ;
AbstractMethodModifier ::= "public" ;
 AbstractMethodModifier ::= "abstract" ;
MethodDeclaration ::= MethodHeader MethodBody ;
AbstractMethodDeclaration ::= AbstractMethodModifiers? ResultType MethodDeclarator Throws? ";" ;
TypeDeclarations ::= TypeDeclaration ;
 TypeDeclarations ::= TypeDeclarations TypeDeclaration ;
ExtendsInterfaces ::= "extends" InterfaceType ;
 ExtendsInterfaces ::= ExtendsInterfaces "," InterfaceType ;
ClassType ::= TypeName ;
AssignmentOperator ::= "=" ;
 AssignmentOperator ::= "*=" ;
 AssignmentOperator ::= "/=" ;
 AssignmentOperator ::= "%=" ;
 AssignmentOperator ::= "+=" ;
 AssignmentOperator ::= "-=" ;
 AssignmentOperator ::= "<<=" ;
 AssignmentOperator ::= ">>=" ;
 AssignmentOperator ::= ">>>=" ;
 AssignmentOperator ::= "&=" ;
 AssignmentOperator ::= "^=" ;
 AssignmentOperator ::= "|=" ;
AndExpression ::= EqualityExpression ;
 AndExpression ::= AndExpression "&" EqualityExpression ;
MultiplicativeExpression ::= UnaryExpression ;
 MultiplicativeExpression ::= MultiplicativeExpression "*" UnaryExpression ;
 MultiplicativeExpression ::= MultiplicativeExpression "/" UnaryExpression ;
 MultiplicativeExpression ::= MultiplicativeExpression "%" UnaryExpression ;
LeftHandSide ::= ExpressionName ;
 LeftHandSide ::= FieldAccess ;
 LeftHandSide ::= ArrayAccess ;
ConstructorDeclarator ::= Identifier "(" FormalParameterList? ")" ;
PostDecrementExpression ::= PostfixExpression "--" ;
VariableInitializer ::= Expression ;
 VariableInitializer ::= ArrayInitializer ;
AdditiveExpression ::= MultiplicativeExpression ;
 AdditiveExpression ::= AdditiveExpression "+" MultiplicativeExpression ;
 AdditiveExpression ::= AdditiveExpression "-" MultiplicativeExpression ;
InterfaceDeclaration ::= InterfaceModifiers? "interface" Identifier ExtendsInterfaces? InterfaceBody ;
PrimitiveType ::= NumericType ;
 PrimitiveType ::= "boolean" ;
ImportDeclarations ::= ImportDeclaration ;
 ImportDeclarations ::= ImportDeclarations ImportDeclaration ;
ConditionalExpression ::= ConditionalOrExpression ;
 ConditionalExpression ::= ConditionalOrExpression "?" Expression ":" ConditionalExpression ;
LocalVariableDeclarationStatement ::= LocalVariableDeclaration ";" ;
ConstructorBody ::= "{" ExplicitConstructorInvocation? BlockStatements? "}" ;
SynchronizedStatement ::= "synchronized" "(" Expression ")" Block ;
ShiftExpression ::= AdditiveExpression ;
 ShiftExpression ::= ShiftExpression "<<" AdditiveExpression ;
 ShiftExpression ::= ShiftExpression ">>" AdditiveExpression ;
 ShiftExpression ::= ShiftExpression ">>>" AdditiveExpression ;
SwitchBlock ::= "{" SwitchBlockStatementGroups? SwitchLabels? "}" ;
AmbiguousName ::= Identifier ;
 AmbiguousName ::= AmbiguousName "." Identifier ;
ExpressionStatement ::= StatementExpression ";" ;
DimExprs ::= DimExpr ;
 DimExprs ::= DimExprs DimExpr ;
IfThenStatement ::= "if" "(" Expression ")" Statement ;
ForStatementNoShortIf ::= "for" "(" ForInit? ";" Expression? ";" ForUpdate? ")" StatementNoShortIf ;
VariableInitializers ::= VariableInitializer ;
 VariableInitializers ::= VariableInitializers "," VariableInitializer ;
PostIncrementExpression ::= PostfixExpression "++" ;
StatementExpressionList ::= StatementExpression ;
 StatementExpressionList ::= StatementExpressionList "," StatementExpression ;
StatementWithoutTrailingSubstatement ::= Block ;
 StatementWithoutTrailingSubstatement ::= EmptyStatement ;
 StatementWithoutTrailingSubstatement ::= ExpressionStatement ;
 StatementWithoutTrailingSubstatement ::= SwitchStatement ;
 StatementWithoutTrailingSubstatement ::= DoStatement ;
 StatementWithoutTrailingSubstatement ::= BreakStatement ;
 StatementWithoutTrailingSubstatement ::= ContinueStatement ;
 StatementWithoutTrailingSubstatement ::= ReturnStatement ;
 StatementWithoutTrailingSubstatement ::= SynchronizedStatement ;
 StatementWithoutTrailingSubstatement ::= ThrowStatement ;
 StatementWithoutTrailingSubstatement ::= TryStatement ;
BlockStatement ::= LocalVariableDeclarationStatement ;
 BlockStatement ::= Statement ;
DimExpr ::= "[" Expression "]" ;
ConstantExpression ::= Expression ;
SwitchStatement ::= "switch" "(" Expression ")" SwitchBlock ;
MethodModifiers ::= MethodModifier ;
 MethodModifiers ::= MethodModifiers MethodModifier ;
ExclusiveOrExpression ::= AndExpression ;
 ExclusiveOrExpression ::= ExclusiveOrExpression "^" AndExpression ;
ClassOrInterfaceType ::= ClassType ;
 ClassOrInterfaceType ::= InterfaceType ;
ImportDeclaration ::= SingleTypeImportDeclaration ;
 ImportDeclaration ::= TypeImportOnDemandDeclaration ;
StaticInitializer ::= "static" Block ;
PackageDeclaration ::= "package" PackageName ";" ;
SwitchLabels ::= SwitchLabel ;
 SwitchLabels ::= SwitchLabels SwitchLabel ;
ClassBodyDeclarations ::= ClassBodyDeclaration ;
 ClassBodyDeclarations ::= ClassBodyDeclarations ClassBodyDeclaration ;
MethodInvocation ::= MethodName "(" ArgumentList? ")" ;
 MethodInvocation ::= Primary "." Identifier "(" ArgumentList? ")" ;
 MethodInvocation ::= "super" "." Identifier "(" ArgumentList? ")" ;
ClassTypeList ::= ClassType ;
 ClassTypeList ::= ClassTypeList "," ClassType ;
ContinueStatement ::= "continue" Identifier? ";" ;
InterfaceMemberDeclaration ::= ConstantDeclaration ;
 InterfaceMemberDeclaration ::= AbstractMethodDeclaration ;
AssignmentExpression ::= ConditionalExpression ;
 AssignmentExpression ::= Assignment ;
FloatingPointType ::= "float" ;
 FloatingPointType ::= "double" ;
ExpressionName ::= Identifier ;
 ExpressionName ::= AmbiguousName "." Identifier ;
InterfaceModifiers ::= InterfaceModifier ;
 InterfaceModifiers ::= InterfaceModifiers InterfaceModifier ;
ConditionalOrExpression ::= ConditionalAndExpression ;
 ConditionalOrExpression ::= ConditionalOrExpression "||" ConditionalAndExpression ;
WhileStatement ::= "while" "(" Expression ")" Statement ;
IfThenElseStatement ::= "if" "(" Expression ")" StatementNoShortIf "else" Statement ;
InterfaceBody ::= "{" InterfaceMemberDeclarations? "}" ;
FormalParameter ::= Type VariableDeclaratorId ;
ForInit ::= StatementExpressionList ;
 ForInit ::= LocalVariableDeclaration ;
CastExpression ::= "(" PrimitiveType Dims? ")" UnaryExpression ;
 CastExpression ::= "(" ReferenceType ")" UnaryExpressionNotPlusMinus ;
EqualityExpression ::= RelationalExpression ;
 EqualityExpression ::= EqualityExpression "==" RelationalExpression ;
 EqualityExpression ::= EqualityExpression "!=" RelationalExpression ;
BreakStatement ::= "break" Identifier? ";" ;
ClassModifier ::= "public" ;
 ClassModifier ::= "abstract" ;
 ClassModifier ::= "final" ;
SwitchBlockStatementGroups ::= SwitchBlockStatementGroup ;
 SwitchBlockStatementGroups ::= SwitchBlockStatementGroups SwitchBlockStatementGroup ;
SwitchBlockStatementGroup ::= SwitchLabels BlockStatements ;
ThrowStatement ::= "throw" Expression ";" ;
StatementExpression ::= Assignment ;
 StatementExpression ::= PreIncrementExpression ;
 StatementExpression ::= PreDecrementExpression ;
 StatementExpression ::= PostIncrementExpression ;
 StatementExpression ::= PostDecrementExpression ;
 StatementExpression ::= MethodInvocation ;
 StatementExpression ::= ClassInstanceCreationExpression ;
MethodBody ::= Block ;
 MethodBody ::= ";" ;
ConstructorDeclaration ::= ConstructorModifiers? ConstructorDeclarator Throws? ConstructorBody ;
FieldDeclaration ::= FieldModifiers? Type VariableDeclarators ";" ;
RelationalExpression ::= ShiftExpression ;
 RelationalExpression ::= RelationalExpression "<" ShiftExpression ;
 RelationalExpression ::= RelationalExpression ">" ShiftExpression ;
 RelationalExpression ::= RelationalExpression "<=" ShiftExpression ;
 RelationalExpression ::= RelationalExpression ">=" ShiftExpression ;
 RelationalExpression ::= RelationalExpression "instanceof" ReferenceType ;
LabeledStatement ::= Identifier ":" Statement ;
ExplicitConstructorInvocation ::= "this" "(" ArgumentList? ")" ";" ;
 ExplicitConstructorInvocation ::= "super" "(" ArgumentList? ")" ";" ;
BlockStatements ::= BlockStatement ;
 BlockStatements ::= BlockStatements BlockStatement ;
InterfaceTypeList ::= InterfaceType ;
 InterfaceTypeList ::= InterfaceTypeList "," InterfaceType ;
MethodName ::= Identifier ;
 MethodName ::= AmbiguousName "." Identifier ;
StatementNoShortIf ::= StatementWithoutTrailingSubstatement ;
 StatementNoShortIf ::= LabeledStatementNoShortIf ;
 StatementNoShortIf ::= IfThenElseStatementNoShortIf ;
 StatementNoShortIf ::= WhileStatementNoShortIf ;
 StatementNoShortIf ::= ForStatementNoShortIf ;
IntegralType ::= "byte" ;
 IntegralType ::= "short" ;
 IntegralType ::= "int" ;
 IntegralType ::= "long" ;
 IntegralType ::= "char" ;
VariableDeclarators ::= VariableDeclarator ;
 VariableDeclarators ::= VariableDeclarators "," VariableDeclarator ;
ArgumentList ::= Expression ;
 ArgumentList ::= ArgumentList "," Expression ;
ClassBody ::= "{" ClassBodyDeclarations? "}" ;
ConstantModifiers ::= ConstantModifier ;
 ConstantModifiers ::= ConstantModifiers ConstantModifier ;
FormalParameterList ::= FormalParameter ;
 FormalParameterList ::= FormalParameterList "," FormalParameter ;
ResultType ::= Type ;
 ResultType ::= "void" ;
ConstantDeclaration ::= ConstantModifiers? Type VariableDeclarator ;
TryStatement ::= "try" Block Catches ;
 TryStatement ::= "try" Block Catches? Finally ;
ArrayType ::= Type "[" "]" ;
LocalVariableDeclaration ::= Type VariableDeclarators ;
MethodDeclarator ::= Identifier "(" FormalParameterList? ")" ;
 MethodDeclarator ::= MethodDeclarator "[" "]" ;
InterfaceModifier ::= "public" ;
 InterfaceModifier ::= "abstract" ;
UnaryExpressionNotPlusMinus ::= PostfixExpression ;
 UnaryExpressionNotPlusMinus ::= "~" UnaryExpression ;
 UnaryExpressionNotPlusMinus ::= "!" UnaryExpression ;
 UnaryExpressionNotPlusMinus ::= CastExpression ;
ConditionalAndExpression ::= InclusiveOrExpression ;
 ConditionalAndExpression ::= ConditionalAndExpression "&&" InclusiveOrExpression ;
PreDecrementExpression ::= "--" UnaryExpression ;
ClassMemberDeclaration ::= FieldDeclaration ;
 ClassMemberDeclaration ::= MethodDeclaration ;
UnaryExpression ::= PreIncrementExpression ;
 UnaryExpression ::= PreDecrementExpression ;
 UnaryExpression ::= "+" UnaryExpression ;
 UnaryExpression ::= "-" UnaryExpression ;
 UnaryExpression ::= UnaryExpressionNotPlusMinus ;
ReferenceType ::= ClassOrInterfaceType ;
 ReferenceType ::= ArrayType ;
TypeName ::= Identifier ;
 TypeName ::= PackageName "." Identifier ;
ClassModifiers ::= ClassModifier ;
 ClassModifiers ::= ClassModifiers ClassModifier ;
DoStatement ::= "do" Statement "while" "(" Expression ")" ";" ;
ClassDeclaration ::= ClassModifiers? "class" Identifier Super? Interfaces? ClassBody ;
ClassBodyDeclaration ::= ClassMemberDeclaration ;
 ClassBodyDeclaration ::= StaticInitializer ;
 ClassBodyDeclaration ::= ConstructorDeclaration ;
SwitchLabel ::= "case" ConstantExpression ":" ;
 SwitchLabel ::= "default" ":" ;
--------------------java::java-2-jls-impl.bgf--------------------
ClassOrInterfaceDeclaration ::= ModifiersOpt ClassDeclaration | InterfaceDeclaration ;
ConstantExpression ::= Expression ;
Expression3 ::= PrefixOp Expression3 ;
 Expression3 ::= "(" Expression | Type ")" Expression3 ;
 Expression3 ::= Primary Selector* PostfixOp* ;
IdentifierSuffix ::= "[" ("]" BracketsOpt "." "class") | (Expression "]") ;
 IdentifierSuffix ::= Arguments ;
 IdentifierSuffix ::= "." "class" | "this" | ("super" Arguments) | ("new" InnerCreator) ;
Expression2 ::= Expression3 Expression2Rest? ;
ParExpression ::= "(" Expression ")" ;
Expression1 ::= Expression2 Expression1Rest? ;
ModifiersOpt ::= Modifier* ;
ImportDeclaration ::= "import" Identifier ("." Identifier)* ("." "*")? ";" ;
PrefixOp ::= "++" ;
 PrefixOp ::= "--" ;
 PrefixOp ::= "!" ;
 PrefixOp ::= "~" ;
 PrefixOp ::= "+" ;
 PrefixOp ::= "-" ;
ConstantDeclaratorsRest ::= ConstantDeclaratorRest ("," ConstantDeclarator)* ;
AssignmentOperator ::= "=" ;
 AssignmentOperator ::= "+=" ;
 AssignmentOperator ::= "-=" ;
 AssignmentOperator ::= "*=" ;
 AssignmentOperator ::= "/=" ;
 AssignmentOperator ::= "&=" ;
 AssignmentOperator ::= "|=" ;
 AssignmentOperator ::= "^=" ;
 AssignmentOperator ::= "%=" ;
 AssignmentOperator ::= "<<=" ;
 AssignmentOperator ::= ">>=" ;
 AssignmentOperator ::= ">>>=" ;
BlockStatements ::= BlockStatement* ;
Expression2Rest ::= (Infixop Expression3)* ;
 Expression2Rest ::= "instanceof" Type ;
VariableDeclarator ::= Identifier VariableDeclaratorRest ;
Expression1Rest ::= ("?" Expression ":" Expression1)? ;
VoidInterfaceMethodDeclaratorRest ::= FormalParameters BracketsOpt ("throws" QualifiedIdentifierList)? ";" ;
CatchClause ::= "catch" "(" FormalParameter ")" Block ;
ArrayInitializer ::= "{" (VariableInitializer ("," VariableInitializer)* ","?)? "}" ;
ClassCreatorRest ::= Arguments ClassBody? ;
BasicType ::= "byte" ;
 BasicType ::= "short" ;
 BasicType ::= "char" ;
 BasicType ::= "int" ;
 BasicType ::= "long" ;
 BasicType ::= "float" ;
 BasicType ::= "double" ;
 BasicType ::= "boolean" ;
VariableDeclaratorId ::= Identifier BracketsOpt ;
ArrayCreatorRest ::= "[" ("]" BracketsOpt ArrayInitializer) | (Expression "]" ("[" Expression "]")* BracketsOpt) ;
InterfaceMethodOrFieldDecl ::= Type Identifier InterfaceMethodOrFieldRest ;
VariableDeclarators ::= VariableDeclarator ("," VariableDeclarator)* ;
VariableInitializer ::= ArrayInitializer ;
 VariableInitializer ::= Expression ;
VariableDeclaratorRest ::= BracketsOpt ("=" VariableInitializer)? ;
InterfaceDeclaration ::= "interface" Identifier ("extends" TypeList)? InterfaceBody ;
MethodOrFieldDecl ::= Type Identifier MethodOrFieldRest ;
ConstructorDeclaratorRest ::= FormalParameters ("throws" QualifiedIdentifierList)? MethodBody ;
InterfaceMethodDeclaratorRest ::= FormalParameters BracketsOpt ("throws" QualifiedIdentifierList)? ";" ;
InterfaceBodyDeclaration ::= ";" ;
 InterfaceBodyDeclaration ::= ModifiersOpt InterfaceMemberDecl ;
InterfaceMemberDecl ::= InterfaceMethodOrFieldDecl ;
 InterfaceMemberDecl ::= "void" Identifier VoidInterfaceMethodDeclaratorRest ;
 InterfaceMemberDecl ::= ClassOrInterfaceDeclaration ;
LocalVariableDeclarationStatement ::= "final"? Type VariableDeclarators ";" ;
InterfaceBody ::= "{" InterfaceBodyDeclaration* "}" ;
ClassBody ::= "{" ClassBodyDeclaration* "}" ;
FormalParameter ::= "final"? Type VariableDeclaratorId ;
FormalParameters ::= "(" (FormalParameter ("," FormalParameter)*)? ")" ;
ForInit ::= StatementExpression MoreStatementExpressions ;
 ForInit ::= "final"? Type VariableDeclarators ;
TypeList ::= Type ("," Type)* ;
ExpressionStatement ::= StatementExpression ";" ;
InnerCreator ::= Identifier ClassCreatorRest ;
PostfixOp ::= "++" ;
 PostfixOp ::= "--" ;
ConstantDeclarator ::= Identifier ConstantDeclaratorRest ;
ForUpdate ::= StatementExpression MoreStatementExpressions ;
InterfaceMethodOrFieldRest ::= ConstantDeclaratorsRest ";" ;
 InterfaceMethodOrFieldRest ::= InterfaceMethodDeclaratorRest ;
SuperSuffix ::= Arguments ;
 SuperSuffix ::= "." Identifier Arguments? ;
SwitchBlockStatementGroups ::= SwitchBlockStatementGroup* ;
MethodOrFieldRest ::= VariableDeclaratorRest ;
 MethodOrFieldRest ::= MethodDeclaratorRest ;
SwitchBlockStatementGroup ::= SwitchLabel BlockStatements ;
ConstantDeclaratorRest ::= BracketsOpt "=" VariableInitializer ;
BracketsOpt ::= ("[" "]")* ;
CompilationUnit ::= ("package" QualifiedIdentifier ";")? ImportDeclaration* TypeDeclaration* ;
StatementExpression ::= Expression ;
MethodDeclaratorRest ::= FormalParameters BracketsOpt ("throws" QualifiedIdentifierList)? MethodBody | ";" ;
QualifiedIdentifier ::= Identifier ("." Identifier)* ;
MemberDecl ::= MethodOrFieldDecl ;
 MemberDecl ::= "void" Identifier MethodDeclaratorRest ;
 MemberDecl ::= Identifier ConstructorDeclaratorRest ;
 MemberDecl ::= ClassOrInterfaceDeclaration ;
MethodBody ::= Block ;
QualifiedIdentifierList ::= QualifiedIdentifier ("," QualifiedIdentifier)* ;
ClassDeclaration ::= "class" Identifier ("extends" Type)? ("implements" TypeList)? ClassBody ;
BlockStatement ::= LocalVariableDeclarationStatement ;
 BlockStatement ::= ClassOrInterfaceDeclaration ;
 BlockStatement ::= (Identifier ":")? Statement ;
MoreStatementExpressions ::= ("," StatementExpression)* ;
ClassBodyDeclaration ::= ";" ;
 ClassBodyDeclaration ::= "static"? Block ;
 ClassBodyDeclaration ::= ModifiersOpt MemberDecl ;
TypeDeclaration ::= ClassOrInterfaceDeclaration ;
 TypeDeclaration ::= ";" ;
SwitchLabel ::= "case" ConstantExpression ":" ;
 SwitchLabel ::= "default" ":" ;
--------------------java::jdt.bgf--------------------
ReturnStatement ::= expression::α ;
SimpleName ::= identifier::α declaration::α ;
ArrayAccess ::= array::α index::α ;
SwitchStatement ::= expression::α (statements::α)+ ;
MemberRef ::= name::α qualifier::α ;
MethodRefParameter ::= name::α type::α varargs::α ;
VariableDeclarationExpression ::= (fragments::α)+ (modifiers::α)+ type::α ;
ThisExpression ::= qualifier::α ;
TypeLiteral ::= type::α ;
ImportDeclaration ::= onDemand::α static::α name::α ;
PackageDeclaration ::= (annotations::α)+ javadoc::α name::α ;
ParameterizedType ::= type::α (typeArguments::α)+ ;
SingleMemberAnnotation ::= value::α ;
MethodInvocation ::= (arguments::α)+ expression::α name::α (typeArguments::α)+ ;
TextElement ::= text::α ;
TypeParameter ::= name::α (typeBounds::α)+ ;
PrefixExpression ::= operand::α operator::α ;
CatchClause ::= body::α exception::α ;
ArrayInitializer ::= (expressions::α)+ ;
ContinueStatement ::= label::α ;
InfixExpression ::= (extendedOperands::α)+ leftOperand::α operator::α rightOperand::α ;
CharacterLiteral ::= charValue::α escapedValue::α ;
AST ::= root::α ;
InfixExpressionOperatorKind ::= (GREATER_EQUALS::ε) | (OR::ε) | (RIGHT_SHIFT_SIGNED::ε) | (MINUS::ε) | (XOR::ε) | (LESS_EQUALS::ε) | (EQUALS::ε) | (NOT_EQUALS::ε) | (AND::ε) | (PLUS::ε) | (GREATER::ε) | (CONDITIONAL_OR::ε) | (REMAINDER::ε) | (LESS::ε) | (LEFT_SHIFT::ε) | (RIGHT_SHIFT_UNSIGNED::ε) | (CONDITIONAL_AND::ε) | (TIMES::ε) | (DIVIDE::ε) ;
WhileStatement ::= body::α expression::α ;
FieldAccess ::= expression::α name::α ;
EnhancedForStatement ::= body::α expression::α parameter::α ;
BodyDeclaration ::= AbstractTypeDeclaration ;
 BodyDeclaration ::= AnnotationTypeMemberDeclaration ;
 BodyDeclaration ::= EnumConstantDeclaration ;
 BodyDeclaration ::= FieldDeclaration ;
 BodyDeclaration ::= Initializer ;
 BodyDeclaration ::= MethodDeclaration ;
AnnotationTypeMemberDeclaration ::= default::α name::α type::α ;
CastExpression ::= expression::α type::α ;
SingleVariableDeclaration ::= type::α varargs::α (modifiers::α)+ ;
QualifiedType ::= name::α qualifier::α ;
EnumConstantDeclaration ::= (arguments::α)+ anonymousClassDeclaration::α name::α ;
WildcardType ::= bound::α upperBound::α ;
ParenthesizedExpression ::= expression::α ;
MethodRef ::= name::α qualifier::α (parameters::α)+ ;
VariableDeclarationStatement ::= (fragments::α)+ (modifiers::α)+ type::α ;
MemberValuePair ::= name::α value::α ;
BreakStatement ::= label::α ;
ExtendedModifier ::= Modifier ;
 ExtendedModifier ::= Annotation ;
AnonymousClassDeclaration ::= (bodyDeclarations::α)+ ;
PostfixExpression ::= operand::α operator::α ;
SuperMethodInvocation ::= (arguments::α)+ name::α qualifier::α (typeArguments::α)+ ;
ThrowStatement ::= expression::α ;
CompilationUnit ::= (comments::α)+ package::α (imports::α)+ (types::α)+ ;
ForStatement ::= body::α expression::α (initializers::α)+ (updaters::α)+ ;
EmptyStatement ::= ε ;
TypeDeclaration ::= superclassType::α interface::α (superInterfaceTypes::α)+ (typeParameters::α)+ ;
FieldDeclaration ::= (fragments::α)+ type::α ;
StringLiteral ::= escapedValue::α literalValue::α ;
AbstractTypeDeclaration ::= AnnotationTypeDeclaration ;
 AbstractTypeDeclaration ::= EnumDeclaration ;
 AbstractTypeDeclaration ::= TypeDeclaration ;
VariableDeclaration ::= SingleVariableDeclaration ;
 VariableDeclaration ::= VariableDeclarationFragment ;
LabeledStatement ::= body::α label::α ;
MethodDeclaration ::= body::α extraDimensions::α name::α returnType::α constructor::α varargs::α (parameters::α)+ (thrownExceptions::α)+ (typeParameters::α)+ ;
ArrayCreation ::= (dimensions::α)+ initializer::α type::α ;
IfStatement ::= elseStatement::α expression::α thenStatement::α ;
BlockComment ::= alternateRoot::α ;
VariableDeclarationFragment ::= extraDimensions::α initializer::α name::α ;
SimpleType ::= name::α ;
LineComment ::= alternateRoot::α ;
MarkerAnnotation ::= typeName::α ;
AssertStatement ::= expression::α message::α ;
QualifiedName ::= name::α qualifier::α ;
SwitchCase ::= expression::α default::α ;
SuperFieldAccess ::= name::α qualifier::α ;
TagElement ::= (fragments::α)+ tagName::α nested::α ;
PrimitiveType ::= code::α ;
ConditionalExpression ::= elseExpression::α expression::α thenExpression::α ;
SynchronizedStatement ::= body::α expression::α ;
EnumDeclaration ::= (superInterfaceTypes::α)+ (enumConstants::α)+ ;
ExpressionStatement ::= expression::α ;
NormalAnnotation ::= (values::α)+ ;
TryStatement ::= (catchClauses::α)+ body::α finally::α ;
ArrayType ::= componentType::α dimensions::α elementType::α ;
AnnotationTypeDeclaration ::= (bodyDeclarations::α)+ name::α localTypeDeclaration::α memberTypeDeclaration::α packageMemberTypeDeclaration::α ;
TypeDeclarationStatement ::= declaration::α ;
SuperConstructorInvocation ::= (arguments::α)+ expression::α (typeArguments::α)+ ;
ClassInstanceCreation ::= (arguments::α)+ anonymousClassDeclaration::α expression::α type::α (typeArguments::α)+ ;
AssignementOperatorKind ::= (RIGHT_SHIFT_SIGNED_ASSIGN::ε) | (BIT_XOR_ASSIGN::ε) | (TIMES_ASSIGN::ε) | (LEFT_SHIFT_ASSIGN::ε) | (MINUS_ASSIGN::ε) | (BIT_OR_ASSIGN::ε) | (PLUS_ASSIGN::ε) | (ASSIGN::ε) | (RIGHT_SHIFT_UNSIGNED_ASSIGN::ε) | (REMAINDER_ASSIGN::ε) | (DIVIDE_ASSIGN::ε) | (BIT_AND_ASSIGN::ε) ;
PrefixExpresssionOperatorKind ::= (MINUS::ε) | (NOT::ε) | (DECREMENT::ε) | (COMPLEMENT::ε) | (INCREMENT::ε) | (PLUS::ε) ;
ConstructorInvocation ::= (arguments::α)+ (typeArguments::α)+ ;
PostfixExpresssionOperatorKind ::= (INCREMENT::ε) | (DECREMENT::ε) ;
NullLiteral ::= resolveBoxing::α resolveUnboxing::α ;
BooleanLiteral ::= booleanValue::α ;
NumberLiteral ::= token::α ;
DoStatement ::= body::α expression::α ;
InstanceofExpression ::= leftOperand::α rightOperand::α ;
ASTNode ::= AnonymousClassDeclaration ;
 ASTNode ::= BodyDeclaration ;
 ASTNode ::= CatchClause ;
 ASTNode ::= Comment ;
 ASTNode ::= CompilationUnit ;
 ASTNode ::= Expression ;
 ASTNode ::= ImportDeclaration ;
 ASTNode ::= MemberRef ;
 ASTNode ::= MemberValuePair ;
 ASTNode ::= MethodRef ;
 ASTNode ::= MethodRefParameter ;
 ASTNode ::= PackageDeclaration ;
 ASTNode ::= Statement ;
 ASTNode ::= TagElement ;
 ASTNode ::= TextElement ;
 ASTNode ::= Type ;
 ASTNode ::= TypeParameter ;
 ASTNode ::= VariableDeclaration ;
 ASTNode ::= Modifier ;
--------------------java::java-2-jls-read.bgf--------------------
ReturnStatement ::= "return" Expression? ";" ;
ArrayAccess ::= ExpressionName "[" Expression "]" ;
 ArrayAccess ::= PrimaryNoNewArray "[" Expression "]" ;
PrimaryNoNewArray ::= Literal ;
 PrimaryNoNewArray ::= Type "." "class" ;
 PrimaryNoNewArray ::= "void" "." "class" ;
 PrimaryNoNewArray ::= "this" ;
 PrimaryNoNewArray ::= ClassName "." "this" ;
 PrimaryNoNewArray ::= "(" Expression ")" ;
 PrimaryNoNewArray ::= ClassInstanceCreationExpression ;
 PrimaryNoNewArray ::= FieldAccess ;
 PrimaryNoNewArray ::= MethodInvocation ;
 PrimaryNoNewArray ::= ArrayAccess ;
WhileStatementNoShortIf ::= "while" "(" Expression ")" StatementNoShortIf ;
AbstractMethodModifiers ::= AbstractMethodModifier ;
 AbstractMethodModifiers ::= AbstractMethodModifiers AbstractMethodModifier ;
MethodModifier ::= "public" ;
 MethodModifier ::= "protected" ;
 MethodModifier ::= "private" ;
 MethodModifier ::= "abstract" ;
 MethodModifier ::= "static" ;
 MethodModifier ::= "final" ;
 MethodModifier ::= "synchronized" ;
 MethodModifier ::= "native" ;
 MethodModifier ::= "strictfp" ;
InterfaceType ::= TypeName ;
SingleTypeImportDeclaration ::= "import" TypeName ";" ;
TypeImportOnDemandDeclaration ::= "import" PackageOrTypeName "." "*" ";" ;
ArrayCreationExpression ::= "new" PrimitiveType DimExprs Dims? ;
 ArrayCreationExpression ::= "new" TypeName DimExprs Dims? ;
 ArrayCreationExpression ::= "new" PrimitiveType Dims ArrayInitializer ;
 ArrayCreationExpression ::= "new" TypeName Dims ArrayInitializer ;
MethodHeader ::= MethodModifiers? ResultType MethodDeclarator Throws? ;
InstanceInitializer ::= Block ;
VariableDeclarator ::= VariableDeclaratorId ;
 VariableDeclarator ::= VariableDeclaratorId "=" VariableInitializer ;
InterfaceMemberDeclarations ::= InterfaceMemberDeclaration ;
 InterfaceMemberDeclarations ::= InterfaceMemberDeclarations InterfaceMemberDeclaration ;
CatchClause ::= "catch" "(" FormalParameter ")" Block ;
ArrayInitializer ::= "{" VariableInitializers? ","? "}" ;
VariableDeclaratorId ::= Identifier ;
 VariableDeclaratorId ::= VariableDeclaratorId "[" "]" ;
PreIncrementExpression ::= "++" UnaryExpression ;
FieldAccess ::= Primary "." Identifier ;
 FieldAccess ::= "super" "." Identifier ;
 FieldAccess ::= ClassName "." "super" "." Identifier ;
LabeledStatementNoShortIf ::= Identifier ":" StatementNoShortIf ;
ForUpdate ::= StatementExpressionList ;
FieldModifier ::= "public" ;
 FieldModifier ::= "protected" ;
 FieldModifier ::= "private" ;
 FieldModifier ::= "static" ;
 FieldModifier ::= "final" ;
 FieldModifier ::= "transient" ;
 FieldModifier ::= "volatile" ;
ConstructorModifier ::= "public" ;
 ConstructorModifier ::= "protected" ;
 ConstructorModifier ::= "private" ;
PackageName ::= Identifier ;
 PackageName ::= PackageName "." Identifier ;
PostfixExpression ::= Primary ;
 PostfixExpression ::= ExpressionName ;
 PostfixExpression ::= PostIncrementExpression ;
 PostfixExpression ::= PostDecrementExpression ;
NumericType ::= IntegralType ;
 NumericType ::= FloatingPointType ;
InclusiveOrExpression ::= ExclusiveOrExpression ;
 InclusiveOrExpression ::= InclusiveOrExpression "|" ExclusiveOrExpression ;
CompilationUnit ::= PackageDeclaration? ImportDeclarations? TypeDeclarations? ;
ForStatement ::= "for" "(" ForInit? ";" Expression? ";" ForUpdate? ")" Statement ;
ClassInstanceCreationExpression ::= "new" ClassOrInterfaceType "(" ArgumentList? ")" ClassBody? ;
 ClassInstanceCreationExpression ::= Primary "." "new" Identifier "(" ArgumentList? ")" ClassBody? ;
ConstructorModifiers ::= ConstructorModifier ;
 ConstructorModifiers ::= ConstructorModifiers ConstructorModifier ;
FieldModifiers ::= FieldModifier ;
 FieldModifiers ::= FieldModifiers FieldModifier ;
EmptyStatement ::= ";" ;
TypeDeclaration ::= ClassDeclaration ;
 TypeDeclaration ::= InterfaceDeclaration ;
 TypeDeclaration ::= ";" ;
IfThenElseStatementNoShortIf ::= "if" "(" Expression ")" StatementNoShortIf "else" StatementNoShortIf ;
ConstantModifier ::= "public" ;
 ConstantModifier ::= "static" ;
 ConstantModifier ::= "final" ;
AbstractMethodModifier ::= "public" ;
 AbstractMethodModifier ::= "abstract" ;
MethodDeclaration ::= MethodHeader MethodBody ;
AbstractMethodDeclaration ::= AbstractMethodModifiers? ResultType MethodDeclarator Throws? ";" ;
TypeDeclarations ::= TypeDeclaration ;
 TypeDeclarations ::= TypeDeclarations TypeDeclaration ;
ExtendsInterfaces ::= "extends" InterfaceType ;
 ExtendsInterfaces ::= ExtendsInterfaces "," InterfaceType ;
ClassType ::= TypeName ;
AssignmentOperator ::= "=" ;
 AssignmentOperator ::= "*=" ;
 AssignmentOperator ::= "/=" ;
 AssignmentOperator ::= "%=" ;
 AssignmentOperator ::= "+=" ;
 AssignmentOperator ::= "-=" ;
 AssignmentOperator ::= "<<=" ;
 AssignmentOperator ::= ">>=" ;
 AssignmentOperator ::= ">>>=" ;
 AssignmentOperator ::= "&=" ;
 AssignmentOperator ::= "^=" ;
 AssignmentOperator ::= "|=" ;
AndExpression ::= EqualityExpression ;
 AndExpression ::= AndExpression "&" EqualityExpression ;
PackageOrTypeName ::= Identifier ;
 PackageOrTypeName ::= PackageOrTypeName "." Identifier ;
MultiplicativeExpression ::= UnaryExpression ;
 MultiplicativeExpression ::= MultiplicativeExpression "*" UnaryExpression ;
 MultiplicativeExpression ::= MultiplicativeExpression "/" UnaryExpression ;
 MultiplicativeExpression ::= MultiplicativeExpression "%" UnaryExpression ;
LeftHandSide ::= ExpressionName ;
 LeftHandSide ::= FieldAccess ;
 LeftHandSide ::= ArrayAccess ;
ConstructorDeclarator ::= Identifier "(" FormalParameterList? ")" ;
PostDecrementExpression ::= PostfixExpression "--" ;
VariableInitializer ::= Expression ;
 VariableInitializer ::= ArrayInitializer ;
AdditiveExpression ::= MultiplicativeExpression ;
 AdditiveExpression ::= AdditiveExpression "+" MultiplicativeExpression ;
 AdditiveExpression ::= AdditiveExpression "-" MultiplicativeExpression ;
InterfaceDeclaration ::= InterfaceModifiers? "interface" Identifier ExtendsInterfaces? InterfaceBody ;
PrimitiveType ::= NumericType ;
 PrimitiveType ::= "boolean" ;
ImportDeclarations ::= ImportDeclaration ;
 ImportDeclarations ::= ImportDeclarations ImportDeclaration ;
ConditionalExpression ::= ConditionalOrExpression ;
 ConditionalExpression ::= ConditionalOrExpression "?" Expression ":" ConditionalExpression ;
ConstructorBody ::= "{" ExplicitConstructorInvocation? BlockStatements? "}" ;
LocalVariableDeclarationStatement ::= LocalVariableDeclaration ";" ;
SynchronizedStatement ::= "synchronized" "(" Expression ")" Block ;
ShiftExpression ::= AdditiveExpression ;
 ShiftExpression ::= ShiftExpression "<<" AdditiveExpression ;
 ShiftExpression ::= ShiftExpression ">>" AdditiveExpression ;
 ShiftExpression ::= ShiftExpression ">>>" AdditiveExpression ;
SwitchBlock ::= "{" SwitchBlockStatementGroups? SwitchLabels? "}" ;
AmbiguousName ::= Identifier ;
 AmbiguousName ::= AmbiguousName "." Identifier ;
ExpressionStatement ::= StatementExpression ";" ;
DimExprs ::= DimExpr ;
 DimExprs ::= DimExprs DimExpr ;
IfThenStatement ::= "if" "(" Expression ")" Statement ;
ForStatementNoShortIf ::= "for" "(" ForInit? ";" Expression? ";" ForUpdate? ")" StatementNoShortIf ;
VariableInitializers ::= VariableInitializer ;
 VariableInitializers ::= VariableInitializers "," VariableInitializer ;
PostIncrementExpression ::= PostfixExpression "++" ;
StatementExpressionList ::= StatementExpression ;
 StatementExpressionList ::= StatementExpressionList "," StatementExpression ;
StatementWithoutTrailingSubstatement ::= Block ;
 StatementWithoutTrailingSubstatement ::= EmptyStatement ;
 StatementWithoutTrailingSubstatement ::= ExpressionStatement ;
 StatementWithoutTrailingSubstatement ::= SwitchStatement ;
 StatementWithoutTrailingSubstatement ::= DoStatement ;
 StatementWithoutTrailingSubstatement ::= BreakStatement ;
 StatementWithoutTrailingSubstatement ::= ContinueStatement ;
 StatementWithoutTrailingSubstatement ::= ReturnStatement ;
 StatementWithoutTrailingSubstatement ::= SynchronizedStatement ;
 StatementWithoutTrailingSubstatement ::= ThrowStatement ;
 StatementWithoutTrailingSubstatement ::= TryStatement ;
BlockStatement ::= LocalVariableDeclarationStatement ;
 BlockStatement ::= ClassDeclaration ;
 BlockStatement ::= Statement ;
DimExpr ::= "[" Expression "]" ;
ConstantExpression ::= Expression ;
SwitchStatement ::= "switch" "(" Expression ")" SwitchBlock ;
MethodModifiers ::= MethodModifier ;
 MethodModifiers ::= MethodModifiers MethodModifier ;
ExclusiveOrExpression ::= AndExpression ;
 ExclusiveOrExpression ::= ExclusiveOrExpression "^" AndExpression ;
ClassOrInterfaceType ::= ClassType ;
 ClassOrInterfaceType ::= InterfaceType ;
ImportDeclaration ::= SingleTypeImportDeclaration ;
 ImportDeclaration ::= TypeImportOnDemandDeclaration ;
StaticInitializer ::= "static" Block ;
PackageDeclaration ::= "package" PackageName ";" ;
SwitchLabels ::= SwitchLabel ;
 SwitchLabels ::= SwitchLabels SwitchLabel ;
ClassBodyDeclarations ::= ClassBodyDeclaration ;
 ClassBodyDeclarations ::= ClassBodyDeclarations ClassBodyDeclaration ;
MethodInvocation ::= MethodName "(" ArgumentList? ")" ;
 MethodInvocation ::= Primary "." Identifier "(" ArgumentList? ")" ;
 MethodInvocation ::= "super" "." Identifier "(" ArgumentList? ")" ;
 MethodInvocation ::= ClassName "." "super" "." Identifier "(" ArgumentList? ")" ;
ClassTypeList ::= ClassType ;
 ClassTypeList ::= ClassTypeList "," ClassType ;
ContinueStatement ::= "continue" Identifier? ";" ;
InterfaceMemberDeclaration ::= ConstantDeclaration ;
 InterfaceMemberDeclaration ::= AbstractMethodDeclaration ;
 InterfaceMemberDeclaration ::= ClassDeclaration ;
 InterfaceMemberDeclaration ::= InterfaceDeclaration ;
 InterfaceMemberDeclaration ::= ";" ;
AssignmentExpression ::= ConditionalExpression ;
 AssignmentExpression ::= Assignment ;
FloatingPointType ::= "float" ;
 FloatingPointType ::= "double" ;
ExpressionName ::= Identifier ;
 ExpressionName ::= AmbiguousName "." Identifier ;
InterfaceModifiers ::= InterfaceModifier ;
 InterfaceModifiers ::= InterfaceModifiers InterfaceModifier ;
ConditionalOrExpression ::= ConditionalAndExpression ;
 ConditionalOrExpression ::= ConditionalOrExpression "||" ConditionalAndExpression ;
WhileStatement ::= "while" "(" Expression ")" Statement ;
IfThenElseStatement ::= "if" "(" Expression ")" StatementNoShortIf "else" Statement ;
InterfaceBody ::= "{" InterfaceMemberDeclarations? "}" ;
FormalParameter ::= "final"? Type VariableDeclaratorId ;
ForInit ::= StatementExpressionList ;
 ForInit ::= LocalVariableDeclaration ;
CastExpression ::= "(" PrimitiveType Dims? ")" UnaryExpression ;
 CastExpression ::= "(" ReferenceType ")" UnaryExpressionNotPlusMinus ;
EqualityExpression ::= RelationalExpression ;
 EqualityExpression ::= EqualityExpression "==" RelationalExpression ;
 EqualityExpression ::= EqualityExpression "!=" RelationalExpression ;
BreakStatement ::= "break" Identifier? ";" ;
ClassModifier ::= "public" ;
 ClassModifier ::= "protected" ;
 ClassModifier ::= "private" ;
 ClassModifier ::= "abstract" ;
 ClassModifier ::= "static" ;
 ClassModifier ::= "final" ;
 ClassModifier ::= "strictfp" ;
SwitchBlockStatementGroups ::= SwitchBlockStatementGroup ;
 SwitchBlockStatementGroups ::= SwitchBlockStatementGroups SwitchBlockStatementGroup ;
SwitchBlockStatementGroup ::= SwitchLabels BlockStatements ;
ThrowStatement ::= "throw" Expression ";" ;
StatementExpression ::= Assignment ;
 StatementExpression ::= PreIncrementExpression ;
 StatementExpression ::= PreDecrementExpression ;
 StatementExpression ::= PostIncrementExpression ;
 StatementExpression ::= PostDecrementExpression ;
 StatementExpression ::= MethodInvocation ;
 StatementExpression ::= ClassInstanceCreationExpression ;
MethodBody ::= Block ;
 MethodBody ::= ";" ;
ConstructorDeclaration ::= ConstructorModifiers? ConstructorDeclarator Throws? ConstructorBody ;
FieldDeclaration ::= FieldModifiers? Type VariableDeclarators ";" ;
RelationalExpression ::= ShiftExpression ;
 RelationalExpression ::= RelationalExpression "<" ShiftExpression ;
 RelationalExpression ::= RelationalExpression ">" ShiftExpression ;
 RelationalExpression ::= RelationalExpression "<=" ShiftExpression ;
 RelationalExpression ::= RelationalExpression ">=" ShiftExpression ;
 RelationalExpression ::= RelationalExpression "instanceof" ReferenceType ;
LabeledStatement ::= Identifier ":" Statement ;
ExplicitConstructorInvocation ::= "this" "(" ArgumentList? ")" ";" ;
 ExplicitConstructorInvocation ::= "super" "(" ArgumentList? ")" ";" ;
 ExplicitConstructorInvocation ::= Primary "." "super" "(" ArgumentList? ")" ";" ;
BlockStatements ::= BlockStatement ;
 BlockStatements ::= BlockStatements BlockStatement ;
InterfaceTypeList ::= InterfaceType ;
 InterfaceTypeList ::= InterfaceTypeList "," InterfaceType ;
MethodName ::= Identifier ;
 MethodName ::= AmbiguousName "." Identifier ;
StatementNoShortIf ::= StatementWithoutTrailingSubstatement ;
 StatementNoShortIf ::= LabeledStatementNoShortIf ;
 StatementNoShortIf ::= IfThenElseStatementNoShortIf ;
 StatementNoShortIf ::= WhileStatementNoShortIf ;
 StatementNoShortIf ::= ForStatementNoShortIf ;
IntegralType ::= "byte" ;
 IntegralType ::= "short" ;
 IntegralType ::= "int" ;
 IntegralType ::= "long" ;
 IntegralType ::= "char" ;
VariableDeclarators ::= VariableDeclarator ;
 VariableDeclarators ::= VariableDeclarators "," VariableDeclarator ;
ArgumentList ::= Expression ;
 ArgumentList ::= ArgumentList "," Expression ;
ClassBody ::= "{" ClassBodyDeclarations? "}" ;
ConstantModifiers ::= ConstantModifier ;
 ConstantModifiers ::= ConstantModifiers ConstantModifier ;
FormalParameterList ::= FormalParameter ;
 FormalParameterList ::= FormalParameterList "," FormalParameter ;
ResultType ::= Type ;
 ResultType ::= "void" ;
ConstantDeclaration ::= ConstantModifiers? Type VariableDeclarators ;
TryStatement ::= "try" Block Catches ;
 TryStatement ::= "try" Block Catches? Finally ;
ArrayType ::= Type "[" "]" ;
LocalVariableDeclaration ::= "final"? Type VariableDeclarators ;
MethodDeclarator ::= Identifier "(" FormalParameterList? ")" ;
 MethodDeclarator ::= MethodDeclarator "[" "]" ;
InterfaceModifier ::= "public" ;
 InterfaceModifier ::= "protected" ;
 InterfaceModifier ::= "private" ;
 InterfaceModifier ::= "abstract" ;
 InterfaceModifier ::= "static" ;
 InterfaceModifier ::= "strictfp" ;
UnaryExpressionNotPlusMinus ::= PostfixExpression ;
 UnaryExpressionNotPlusMinus ::= "~" UnaryExpression ;
 UnaryExpressionNotPlusMinus ::= "!" UnaryExpression ;
 UnaryExpressionNotPlusMinus ::= CastExpression ;
ConditionalAndExpression ::= InclusiveOrExpression ;
 ConditionalAndExpression ::= ConditionalAndExpression "&&" InclusiveOrExpression ;
PreDecrementExpression ::= "--" UnaryExpression ;
ClassMemberDeclaration ::= FieldDeclaration ;
 ClassMemberDeclaration ::= MethodDeclaration ;
 ClassMemberDeclaration ::= ClassDeclaration ;
 ClassMemberDeclaration ::= InterfaceDeclaration ;
 ClassMemberDeclaration ::= ";" ;
UnaryExpression ::= PreIncrementExpression ;
 UnaryExpression ::= PreDecrementExpression ;
 UnaryExpression ::= "+" UnaryExpression ;
 UnaryExpression ::= "-" UnaryExpression ;
 UnaryExpression ::= UnaryExpressionNotPlusMinus ;
ReferenceType ::= ClassOrInterfaceType ;
 ReferenceType ::= ArrayType ;
TypeName ::= Identifier ;
 TypeName ::= PackageOrTypeName "." Identifier ;
ClassModifiers ::= ClassModifier ;
 ClassModifiers ::= ClassModifiers ClassModifier ;
DoStatement ::= "do" Statement "while" "(" Expression ")" ";" ;
ClassName ::= Identifier ;
 ClassName ::= AmbiguousName "." Identifier ;
ClassDeclaration ::= ClassModifiers? "class" Identifier Super? Interfaces? ClassBody ;
ClassBodyDeclaration ::= ClassMemberDeclaration ;
 ClassBodyDeclaration ::= InstanceInitializer ;
 ClassBodyDeclaration ::= StaticInitializer ;
 ClassBodyDeclaration ::= ConstructorDeclaration ;
SwitchLabel ::= "case" ConstantExpression ":" ;
 SwitchLabel ::= "default" ":" ;
--------------------java::java-5-habelitz.bgf--------------------
DOTSTAR ::= ".*" ;
LOGICAL_OR ::= "||" ;
typeList ::= type (COMMA type)* ;
genericTypeParameter ::= IDENT bound? ;
localVariableDeclaration ::= localModifierList type classFieldDeclaratorList ;
typeDecls ::= typeDeclaration | SEMI ;
ASSIGN ::= "=" ;
MOD_ASSIGN ::= "%=" ;
inclusiveOrExpression ::= exclusiveOrExpression (OR exclusiveOrExpression)* ;
compilationUnit ::= annotationList packageDeclaration? importDeclaration* typeDecls* ;
GREATER_THAN ::= ">" ;
QUESTION ::= "?" ;
OR ::= "|" ;
MOD ::= "%" ;
DEC ::= "--" ;
LCURLY ::= "{" ;
BIT_SHIFT_RIGHT_ASSIGN ::= ">>>=" ;
typeDeclaration ::= modifierList classTypeDeclaration | interfaceTypeDeclaration | enumTypeDeclaration | annotationTypeDeclaration ;
BREAK ::= "break" ;
SHIFT_RIGHT ::= ">>" ;
annotationInit ::= LPAREN annotationInitializers RPAREN ;
javaSource ::= compilationUnit ;
RPAREN ::= ")" ;
typeIdent ::= IDENT genericTypeArgumentList? ;
finallyClause ::= FINALLY block ;
ELLIPSIS ::= "..." ;
DOUBLE ::= "double" ;
switchCaseLabel ::= CASE expression COLON blockStatement* ;
classExtendsClause ::= EXTENDS type ;
IDENT ::= JAVA_ID_START JAVA_ID_PART* ;
INT ::= "int" ;
andExpression ::= equalityExpression (AND equalityExpression)* ;
typeIdentSimplified ::= IDENT genericTypeArgumentListSimplified? ;
OR_ASSIGN ::= "|=" ;
SHIFT_LEFT_ASSIGN ::= "<<=" ;
arrayInitializer ::= LCURLY (variableInitializer (COMMA variableInitializer)* COMMA?)? RCURLY ;
HEX_DIGIT ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "a" | "b" | "c" | "d" | "e" | "f" | "A" | "B" | "C" | "D" | "E" | "F" ;
variableDeclaratorId ::= IDENT arrayDeclaratorList? ;
THROW ::= "throw" ;
variableInitializer ::= arrayInitializer | expression ;
genericTypeListClosing ::= GREATER_THAN | SHIFT_RIGHT | BIT_SHIFT_RIGHT | ε ;
enumConstant ::= annotationList IDENT arguments? classBody? ;
SHIFT_LEFT ::= "<<" ;
genericTypeArgumentListSimplified ::= LESS_THAN genericTypeArgumentSimplified (COMMA genericTypeArgumentSimplified)* genericTypeListClosing ;
primitiveType ::= BOOLEAN | CHAR | BYTE | SHORT | INT | LONG | FLOAT | DOUBLE ;
forUpdater ::= expressionList? ;
ESCAPE_SEQUENCE ::= ("\\" "b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | UNICODE_ESCAPE | OCTAL_ESCAPE ;
MINUS_ASSIGN ::= "-=" ;
conditionalExpression ::= logicalOrExpression (QUESTION assignmentExpression COLON conditionalExpression)? ;
INC ::= "++" ;
shiftExpression ::= additiveExpression (BIT_SHIFT_RIGHT | SHIFT_RIGHT | SHIFT_LEFT additiveExpression)* ;
AND ::= "&" ;
genericTypeParameterList ::= LESS_THAN genericTypeParameter (COMMA genericTypeParameter)* genericTypeListClosing ;
COMMA ::= "," ;
NOT ::= "~" ;
annotationTypeDeclaration ::= AT INTERFACE IDENT annotationBody ;
IMPLEMENTS ::= "implements" ;
interfaceExtendsClause ::= EXTENDS typeList ;
EXPONENT ::= "e" | "E" ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
enumScopeDeclarations ::= enumConstants COMMA? enumClassScopeDeclarations? ;
FOR ::= "for" ;
CONTINUE ::= "continue" ;
IMPORT ::= "import" ;
annotationElementValue ::= annotationElementValueExpression | annotation | annotationElementValueArrayInitializer ;
switchCaseLabels ::= switchCaseLabel* ;
innerNewExpression ::= NEW genericTypeArgumentListSimplified? IDENT arguments classBody? ;
formalParameterStandardDecl ::= localModifierList type variableDeclaratorId ;
annotationInitializers ::= (annotationInitializer (COMMA annotationInitializer)*) | annotationElementValue ;
enumTypeDeclaration ::= ENUM IDENT implementsClause? enumBody ;
LESS_OR_EQUAL ::= "<=" ;
THIS ::= "this" ;
VOLATILE ::= "volatile" ;
CATCH ::= "catch" ;
TRY ::= "try" ;
RCURLY ::= "}" ;
JAVA_ID_START ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ;
qualifiedTypeIdent ::= typeIdent (DOT typeIdent)* ;
PLUS ::= "+" ;
exclusiveOrExpression ::= andExpression (XOR andExpression)* ;
importDeclaration ::= IMPORT STATIC? qualifiedIdentifier DOTSTAR? SEMI ;
VOID ::= "void" ;
qualifiedTypeIdentSimplified ::= typeIdentSimplified (DOT typeIdentSimplified)* ;
PROTECTED ::= "protected" ;
genericTypeArgument ::= type | (QUESTION genericWildcardBoundType?) ;
TRUE ::= "true" ;
multiplicativeExpression ::= unaryExpression (STAR | DIV | MOD unaryExpression)* ;
annotationElementValueArrayInitializer ::= LCURLY (annotationElementValue (COMMA annotationElementValue)*)? COMMA? RCURLY ;
BIT_SHIFT_RIGHT ::= ">>>" ;
postfixedExpression ::= primaryExpression ((outerDot::DOT (genericTypeArgumentListSimplified? IDENT arguments?) | THIS | (Super::SUPER arguments) | (SUPER innerDot::DOT IDENT arguments?) | innerNewExpression) | (LBRACK expression RBRACK))* (INC | DEC)? ;
DO ::= "do" ;
NOT_EQUAL ::= "!=" ;
switchDefaultLabel ::= DEFAULT COLON blockStatement* ;
LESS_THAN ::= "<" ;
NULL ::= "null" ;
genericTypeArgumentSimplified ::= type | QUESTION ;
logicalOrExpression ::= logicalAndExpression (LOGICAL_OR logicalAndExpression)* ;
additiveExpression ::= multiplicativeExpression (PLUS | MINUS multiplicativeExpression)* ;
DECIMAL_LITERAL ::= "0" | ("1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")*) INTEGER_TYPE_SUFFIX? ;
NEW ::= "new" ;
annotationDefaultValue ::= DEFAULT annotationElementValue ;
GREATER_OR_EQUAL ::= ">=" ;
DIV_ASSIGN ::= "/=" ;
LONG ::= "long" ;
STAR_ASSIGN ::= "*=" ;
interfaceBody ::= LCURLY interfaceScopeDeclarations* RCURLY ;
OCTAL_LITERAL ::= "0" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7")+ INTEGER_TYPE_SUFFIX? ;
JAVA_ID_PART ::= JAVA_ID_START | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
forInit ::= localVariableDeclaration | expressionList | ε ;
EXTENDS ::= "extends" ;
AND_ASSIGN ::= "&=" ;
enumClassScopeDeclarations ::= SEMI classScopeDeclarations* ;
interfaceScopeDeclarations ::= (modifierList (genericTypeParameterList? (type IDENT formalParameterList arrayDeclaratorList? throwsClause? SEMI) | (VOID IDENT formalParameterList throwsClause? SEMI)) | (type interfaceFieldDeclaratorList SEMI)) | typeDeclaration | SEMI ;
parenthesizedExpression ::= LPAREN expression RPAREN ;
XOR_ASSIGN ::= "^=" ;
FLOAT_TYPE_SUFFIX ::= "f" | "F" | "d" | "D" ;
qualifiedIdentList ::= qualifiedIdentifier (COMMA qualifiedIdentifier)* ;
DIV ::= "/" ;
annotationBody ::= LCURLY annotationScopeDeclarations* RCURLY ;
classFieldDeclaratorList ::= classFieldDeclarator (COMMA classFieldDeclarator)* ;
STATIC ::= "static" ;
SEMI ::= ";" ;
annotationList ::= annotation* ;
qualifiedIdentExpression ::= qualifiedIdentifier ((arrayDeclarator+ DOT CLASS) | arguments | (outerDot::DOT CLASS | (genericTypeArgumentListSimplified (Super::SUPER arguments) | (SUPER innerDot::DOT IDENT arguments) | (IDENT arguments)) | THIS | (Super::SUPER arguments) | innerNewExpression))? ;
TRANSIENT ::= "transient" ;
arrayDeclarator ::= LBRACK RBRACK ;
PUBLIC ::= "public" ;
interfaceTypeDeclaration ::= INTERFACE IDENT genericTypeParameterList? interfaceExtendsClause? interfaceBody ;
qualifiedIdentifier ::= IDENT (DOT ident::IDENT)* ;
FINALLY ::= "finally" ;
PRIVATE ::= "private" ;
localModifier ::= FINAL | annotation ;
blockStatement ::= (localVariableDeclaration SEMI) | typeDeclaration | statement ;
LOGICAL_AND ::= "&&" ;
STRING_LITERAL ::= """ (ESCAPE_SEQUENCE | string())* """ ;
LOGICAL_NOT ::= "!" ;
SHORT ::= "short" ;
annotationElementValueExpression ::= conditionalExpression ;
SUPER ::= "super" ;
CHARACTER_LITERAL ::= "\'" ESCAPE_SEQUENCE | string() "\'" ;
CLASS ::= "class" ;
newExpression ::= NEW (primitiveType newArrayConstruction) | (genericTypeArgumentListSimplified? qualifiedTypeIdentSimplified newArrayConstruction | (arguments classBody?)) ;
expressionList ::= expression (COMMA expression)* ;
FINAL ::= "final" ;
CHAR ::= "char" ;
INTEGER_TYPE_SUFFIX ::= "l" | "L" ;
packageDeclaration ::= PACKAGE qualifiedIdentifier SEMI ;
STRICTFP ::= "strictfp" ;
STAR ::= "*" ;
forCondition ::= expression? ;
interfaceFieldDeclarator ::= variableDeclaratorId ASSIGN variableInitializer ;
MINUS ::= "-" ;
SHIFT_RIGHT_ASSIGN ::= ">>=" ;
enumConstants ::= enumConstant (COMMA enumConstant)* ;
THROWS ::= "throws" ;
LBRACK ::= "[" ;
genericTypeArgumentList ::= LESS_THAN genericTypeArgument (COMMA genericTypeArgument)* genericTypeListClosing ;
HEX_LITERAL ::= "0" "x" | "X" HEX_DIGIT+ INTEGER_TYPE_SUFFIX? ;
classTypeDeclaration ::= CLASS IDENT genericTypeParameterList? classExtendsClause? implementsClause? classBody ;
FLOATING_POINT_LITERAL ::= (("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ (DOT ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* EXPONENT? FLOAT_TYPE_SUFFIX?) | (EXPONENT FLOAT_TYPE_SUFFIX?) | FLOAT_TYPE_SUFFIX) | (DOT ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ EXPONENT? FLOAT_TYPE_SUFFIX?) ;
ASSERT ::= "assert" ;
logicalAndExpression ::= inclusiveOrExpression (LOGICAL_AND inclusiveOrExpression)* ;
assignmentExpression ::= conditionalExpression (ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | STAR_ASSIGN | DIV_ASSIGN | AND_ASSIGN | OR_ASSIGN | XOR_ASSIGN | MOD_ASSIGN | SHIFT_LEFT_ASSIGN | SHIFT_RIGHT_ASSIGN | BIT_SHIFT_RIGHT_ASSIGN assignmentExpression)? ;
enumBody ::= LCURLY enumScopeDeclarations RCURLY ;
UNICODE_ESCAPE ::= "\\" "u" HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT ;
COLON ::= ":" ;
implementsClause ::= IMPLEMENTS typeList ;
annotationScopeDeclarations ::= (modifierList type (IDENT LPAREN RPAREN annotationDefaultValue? SEMI) | (classFieldDeclaratorList SEMI)) | typeDeclaration ;
FLOAT ::= "float" ;
XOR ::= "^" ;
classBody ::= LCURLY classScopeDeclarations* RCURLY ;
primaryExpression ::= parenthesizedExpression | literal | newExpression | qualifiedIdentExpression | (genericTypeArgumentListSimplified (SUPER arguments | (DOT IDENT arguments)) | (IDENT arguments) | (THIS arguments)) | (THIS arguments?) | (SUPER arguments) | (SUPER DOT IDENT arguments | ε) | (primitiveType arrayDeclarator* DOT CLASS) | (VOID DOT CLASS) ;
ELSE ::= "else" ;
formalParameterList ::= LPAREN (formalParameterStandardDecl (COMMA formalParameterStandardDecl)* (COMMA formalParameterVarArgDecl)?) | formalParameterVarArgDecl | ε RPAREN ;
SWITCH ::= "switch" ;
PLUS_ASSIGN ::= "+=" ;
classFieldDeclarator ::= variableDeclaratorId (ASSIGN variableInitializer)? ;
annotationInitializer ::= IDENT ASSIGN annotationElementValue ;
AT ::= "@" ;
equalityExpression ::= instanceOfExpression (EQUAL | NOT_EQUAL instanceOfExpression)* ;
RETURN ::= "return" ;
CASE ::= "case" ;
INSTANCEOF ::= "instanceof" ;
unaryExpressionNotPlusMinus ::= (NOT unaryExpression) | (LOGICAL_NOT unaryExpression) | (LPAREN type RPAREN unaryExpression) | postfixedExpression ;
DOT ::= "." ;
arrayDeclaratorList ::= arrayDeclarator+ ;
unaryExpression ::= (PLUS unaryExpression) | (MINUS unaryExpression) | (INC postfixedExpression) | (DEC postfixedExpression) | unaryExpressionNotPlusMinus ;
PACKAGE ::= "package" ;
ABSTRACT ::= "abstract" ;
DEFAULT ::= "default" ;
localModifierList ::= localModifier* ;
relationalExpression ::= shiftExpression (LESS_OR_EQUAL | GREATER_OR_EQUAL | LESS_THAN | GREATER_THAN shiftExpression)* ;
LPAREN ::= "(" ;
IF ::= "if" ;
throwsClause ::= THROWS qualifiedIdentList ;
INTERFACE ::= "interface" ;
objectType ::= qualifiedTypeIdent arrayDeclaratorList? ;
switchBlockLabels ::= switchCaseLabels switchDefaultLabel? switchCaseLabels ;
NATIVE ::= "native" ;
modifierList ::= modifier* ;
classScopeDeclarations ::= block | (STATIC block) | (modifierList (genericTypeParameterList? (type IDENT formalParameterList arrayDeclaratorList? throwsClause? block | SEMI) | (VOID IDENT formalParameterList throwsClause? block | SEMI) | (ident::IDENT formalParameterList throwsClause? block)) | (type classFieldDeclaratorList SEMI)) | typeDeclaration | SEMI ;
OCTAL_ESCAPE ::= ("0" | "1" | "2" | "3" "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7") | ("\\" "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7") | ("\\" "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7") ;
EQUAL ::= "==" ;
SYNCHRONIZED ::= "synchronized" ;
formalParameterVarArgDecl ::= localModifierList type ELLIPSIS variableDeclaratorId ;
WHILE ::= "while" ;
interfaceFieldDeclaratorList ::= interfaceFieldDeclarator (COMMA interfaceFieldDeclarator)* ;
simpleType ::= primitiveType arrayDeclaratorList? ;
catchClause ::= CATCH LPAREN formalParameterStandardDecl RPAREN block ;
newArrayConstruction ::= (arrayDeclaratorList arrayInitializer) | (LBRACK expression RBRACK (LBRACK expression RBRACK)* arrayDeclaratorList?) ;
BYTE ::= "byte" ;
BOOLEAN ::= "boolean" ;
RBRACK ::= "]" ;
genericWildcardBoundType ::= EXTENDS | SUPER type ;
instanceOfExpression ::= relationalExpression (INSTANCEOF type)? ;
FALSE ::= "false" ;
ENUM ::= "enum" ;
--------------------java::java-5-jls-impl.bgf--------------------
ClassOrInterfaceDeclaration ::= Modifier* ClassDeclaration | InterfaceDeclaration ;
ConstantExpression ::= Expression ;
Expression3 ::= PrefixOp Expression3 ;
 Expression3 ::= "(" Expression | Type ")" Expression3 ;
 Expression3 ::= Primary Selector* PostfixOp* ;
Expression2 ::= Expression3 Expression2Rest? ;
IdentifierSuffix ::= "[" ("]" ("[" "]")* "." "class") | (Expression "]") ;
 IdentifierSuffix ::= Arguments ;
 IdentifierSuffix ::= "." "class" | ExplicitGenericInvocation | "this" | ("super" Arguments) | ("new" NonWildcardTypeArguments? InnerCreator) ;
Expression1 ::= Expression2 Expression1Rest? ;
ParExpression ::= "(" Expression ")" ;
ImportDeclaration ::= "import" "static"? Identifier ("." Identifier)* ("." "*")? ";" ;
ElementValue ::= ConditionalExpression ;
 ElementValue ::= Annotation ;
 ElementValue ::= ElementValueArrayInitializer ;
ForControl ::= ForVarControl ;
 ForControl ::= ForInit ";" Expression? ";" ForUpdate? ;
CreatedName ::= Identifier NonWildcardTypeArguments? ("." Identifier NonWildcardTypeArguments?)* ;
GenericMethodOrConstructorRest ::= Type | "void" Identifier MethodDeclaratorRest ;
 GenericMethodOrConstructorRest ::= Identifier ConstructorDeclaratorRest ;
ConstantDeclaratorsRest ::= ConstantDeclaratorRest ("," ConstantDeclarator)* ;
TypeParameter ::= Identifier ("extends" Bound)? ;
Expression2Rest ::= (InfixOp Expression3)* ;
 Expression2Rest ::= "instanceof" Type ;
Expression1Rest ::= "?" Expression ":" Expression1 ;
VariableDeclarator ::= Identifier VariableDeclaratorRest ;
AnnotationTypeElementDeclarations ::= AnnotationTypeElementDeclaration ;
 AnnotationTypeElementDeclarations ::= AnnotationTypeElementDeclarations AnnotationTypeElementDeclaration ;
AnnotationTypeBody ::= "{" AnnotationTypeElementDeclarations? "}" ;
VoidInterfaceMethodDeclaratorRest ::= FormalParameters ("throws" QualifiedIdentifierList)? ";" ;
CatchClause ::= "catch" "(" FormalParameter ")" Block ;
ArrayInitializer ::= "{" (VariableInitializer ("," VariableInitializer)* ","?)? "}" ;
VariableDeclaratorId ::= Identifier ("[" "]")* ;
BasicType ::= "byte" ;
 BasicType ::= "short" ;
 BasicType ::= "char" ;
 BasicType ::= "int" ;
 BasicType ::= "long" ;
 BasicType ::= "float" ;
 BasicType ::= "double" ;
 BasicType ::= "boolean" ;
AnnotationTypeElementDeclaration ::= Modifier* AnnotationTypeElementRest ;
InterfaceMethodOrFieldDecl ::= Type Identifier InterfaceMethodOrFieldRest ;
EnumConstant ::= Annotations Identifier Arguments? ClassBody? ;
TypeParameters ::= "<" TypeParameter ("," TypeParameter)* ">" ;
EnumBody ::= (EnumConstants? ","? EnumBodyDeclarations?)* ;
VariableDeclaratorRest ::= ("[" "]")* ("=" VariableInitializer)? ;
MethodOrFieldDecl ::= Type Identifier MethodOrFieldRest ;
ElementValueArrayInitializer ::= "{" ElementValues? ","? "}" ;
InterfaceMemberDecl ::= InterfaceMethodOrFieldDecl ;
 InterfaceMemberDecl ::= InterfaceGenericMethodDecl ;
 InterfaceMemberDecl ::= "void" Identifier VoidInterfaceMethodDeclaratorRest ;
 InterfaceMemberDecl ::= InterfaceDeclaration ;
 InterfaceMemberDecl ::= ClassDeclaration ;
InterfaceBody ::= "{" InterfaceBodyDeclaration* "}" ;
FormalParameter ::= "final"? Type VariableDeclaratorId ;
ForInit ::= StatementExpression Expressions ;
FormalParameters ::= "(" FormalParameterDecls? ")" ;
NonWildcardTypeArguments ::= "<" TypeList ">" ;
ExplicitGenericInvocation ::= NonWildcardTypeArguments ExplicitGenericInvocationSuffix ;
ForUpdate ::= StatementExpression Expressions ;
DefaultValue ::= "default" ElementValue ;
FormalParameterDecls ::= ("final" Annotations? Type FormalParameterDeclsRest)? ;
AnnotationMethodOrConstantRest ::= Identifier AnnotationMethodRest ;
 AnnotationMethodOrConstantRest ::= AnnotationConstantRest ;
SwitchBlockStatementGroups ::= SwitchBlockStatementGroup* ;
InterfaceGenericMethodDecl ::= TypeParameters Type | "void" Identifier InterfaceMethodDeclaratorRest ;
GenericMethodOrConstructorDecl ::= TypeParameters GenericMethodOrConstructorRest ;
SwitchBlockStatementGroup ::= SwitchLabel BlockStatements ;
CompilationUnit ::= (Annotations? "package" QualifiedIdentifier ";")? ImportDeclaration* TypeDeclaration* ;
StatementExpression ::= Expression ;
QualifiedIdentifier ::= Identifier ("." Identifier)* ;
MethodBody ::= Block ;
FormalParameterDeclsRest ::= VariableDeclaratorId ("," FormalParameterDecls)? ;
 FormalParameterDeclsRest ::= "..." VariableDeclaratorId ;
TypeDeclaration ::= ClassOrInterfaceDeclaration ;
 TypeDeclaration ::= ";" ;
ForVarControl ::= "final"? Annotations? Type Identifier ForVarControlRest ;
EnumBodyDeclarations ::= ";" ClassBodyDeclaration* ;
VoidMethodDeclaratorRest ::= FormalParameters ("throws" QualifiedIdentifierList)? MethodBody | ";" ;
TypeArgument ::= Type ;
 TypeArgument ::= "?" ("extends" | "super" Type)? ;
ForVarControlRest ::= VariableDeclaratorsRest ";" Expression? ";" ForUpdate? ;
 ForVarControlRest ::= ":" Expression ;
PrefixOp ::= "++" ;
 PrefixOp ::= "--" ;
 PrefixOp ::= "!" ;
 PrefixOp ::= "~" ;
 PrefixOp ::= "+" ;
 PrefixOp ::= "-" ;
InfixOp ::= "||" ;
 InfixOp ::= "&&" ;
 InfixOp ::= "|" ;
 InfixOp ::= "^" ;
 InfixOp ::= "&" ;
 InfixOp ::= "==" ;
 InfixOp ::= "!=" ;
 InfixOp ::= "<" ;
 InfixOp ::= ">" ;
 InfixOp ::= "<=" ;
 InfixOp ::= ">=" ;
 InfixOp ::= "<<" ;
 InfixOp ::= ">>" ;
 InfixOp ::= ">>>" ;
 InfixOp ::= "+" ;
 InfixOp ::= "-" ;
 InfixOp ::= "*" ;
 InfixOp ::= "/" ;
 InfixOp ::= "%" ;
AssignmentOperator ::= "=" ;
 AssignmentOperator ::= "+=" ;
 AssignmentOperator ::= "-=" ;
 AssignmentOperator ::= "*=" ;
 AssignmentOperator ::= "/=" ;
 AssignmentOperator ::= "&=" ;
 AssignmentOperator ::= "|=" ;
 AssignmentOperator ::= "^=" ;
 AssignmentOperator ::= "%=" ;
 AssignmentOperator ::= "<<=" ;
 AssignmentOperator ::= ">>=" ;
 AssignmentOperator ::= ">>>=" ;
BlockStatements ::= BlockStatement* ;
EnumConstants ::= EnumConstant ;
 EnumConstants ::= EnumConstants "," EnumConstant ;
NormalInterfaceDeclaration ::= "interface" Identifier TypeParameters? ("extends" TypeList)? InterfaceBody ;
ClassCreatorRest ::= Arguments ClassBody? ;
ArrayCreatorRest ::= "[" ("]" ("[" "]")* ArrayInitializer) | (Expression "]" ("[" Expression "]")* ("[" "]")*) ;
VariableInitializer ::= ArrayInitializer ;
 VariableInitializer ::= Expression ;
VariableDeclarators ::= VariableDeclarator ("," VariableDeclarator)* ;
InterfaceDeclaration ::= NormalInterfaceDeclaration ;
 InterfaceDeclaration ::= AnnotationTypeDeclaration ;
ConstructorDeclaratorRest ::= FormalParameters ("throws" QualifiedIdentifierList)? MethodBody ;
InterfaceBodyDeclaration ::= ";" ;
 InterfaceBodyDeclaration ::= Modifier* InterfaceMemberDecl ;
InterfaceMethodDeclaratorRest ::= FormalParameters ("[" "]")* ("throws" QualifiedIdentifierList)? ";" ;
ConditionalExpression ::= Expression2 Expression1Rest ;
ElementValues ::= ElementValue ("," ElementValues)? ;
LocalVariableDeclarationStatement ::= "final"? Type VariableDeclarators ";" ;
TypeArguments ::= "<" TypeArgument ("," TypeArgument)* ">" ;
ClassBody ::= "{" ClassBodyDeclaration* "}" ;
VariableDeclaratorsRest ::= VariableDeclaratorRest ("," VariableDeclarator)* ;
EnumDeclaration ::= "enum" Identifier ("implements" TypeList)? EnumBody ;
TypeList ::= Type ("," Type)* ;
InnerCreator ::= Identifier ClassCreatorRest ;
PostfixOp ::= "++" ;
 PostfixOp ::= "--" ;
ConstantDeclarator ::= Identifier ConstantDeclaratorRest ;
InterfaceMethodOrFieldRest ::= ConstantDeclaratorsRest ";" ;
 InterfaceMethodOrFieldRest ::= InterfaceMethodDeclaratorRest ;
AnnotationTypeDeclaration ::= "@" "interface" Identifier AnnotationTypeBody ;
EnumConstantName ::= Identifier ;
SuperSuffix ::= Arguments ;
 SuperSuffix ::= "." Identifier Arguments? ;
MethodOrFieldRest ::= VariableDeclaratorRest ;
 MethodOrFieldRest ::= MethodDeclaratorRest ;
ConstantDeclaratorRest ::= ("[" "]")* "=" VariableInitializer ;
NormalClassDeclaration ::= "class" Identifier TypeParameters? ("extends" Type)? ("implements" TypeList)? ClassBody ;
AnnotationTypeElementRest ::= Type AnnotationMethodOrConstantRest ";" ;
 AnnotationTypeElementRest ::= ClassDeclaration ;
 AnnotationTypeElementRest ::= InterfaceDeclaration ;
 AnnotationTypeElementRest ::= EnumDeclaration ;
 AnnotationTypeElementRest ::= AnnotationTypeDeclaration ;
AnnotationConstantRest ::= VariableDeclarators ;
MethodDeclaratorRest ::= FormalParameters ("[" "]")* ("throws" QualifiedIdentifierList)? MethodBody | ";" ;
AnnotationMethodRest ::= "(" ")" ("[" "]")* DefaultValue? ;
MemberDecl ::= GenericMethodOrConstructorDecl ;
 MemberDecl ::= MethodOrFieldDecl ;
 MemberDecl ::= "void" Identifier VoidMethodDeclaratorRest ;
 MemberDecl ::= Identifier ConstructorDeclaratorRest ;
 MemberDecl ::= InterfaceDeclaration ;
 MemberDecl ::= ClassDeclaration ;
ExplicitGenericInvocationSuffix ::= "super" SuperSuffix ;
 ExplicitGenericInvocationSuffix ::= Identifier Arguments ;
QualifiedIdentifierList ::= QualifiedIdentifier ("," QualifiedIdentifier)* ;
ClassDeclaration ::= NormalClassDeclaration ;
 ClassDeclaration ::= EnumDeclaration ;
BlockStatement ::= LocalVariableDeclarationStatement ;
 BlockStatement ::= ClassOrInterfaceDeclaration ;
 BlockStatement ::= (Identifier ":")? Statement ;
SwitchLabel ::= "case" ConstantExpression ":" ;
 SwitchLabel ::= "case" EnumConstantName ":" ;
 SwitchLabel ::= "default" ":" ;
ClassBodyDeclaration ::= ";" ;
 ClassBodyDeclaration ::= "static"? Block ;
 ClassBodyDeclaration ::= Modifier* MemberDecl ;
--------------------java::java-5-jls-read.bgf--------------------
ReturnStatement ::= "return" Expression? ";" ;
ArrayAccess ::= ExpressionName "[" Expression "]" ;
 ArrayAccess ::= PrimaryNoNewArray "[" Expression "]" ;
PrimaryNoNewArray ::= Literal ;
 PrimaryNoNewArray ::= Type "." "class" ;
 PrimaryNoNewArray ::= "void" "." "class" ;
 PrimaryNoNewArray ::= "this" ;
 PrimaryNoNewArray ::= ClassName "." "this" ;
 PrimaryNoNewArray ::= "(" Expression ")" ;
 PrimaryNoNewArray ::= ClassInstanceCreationExpression ;
 PrimaryNoNewArray ::= FieldAccess ;
 PrimaryNoNewArray ::= MethodInvocation ;
 PrimaryNoNewArray ::= ArrayAccess ;
TypeDeclSpecifier ::= TypeName ;
 TypeDeclSpecifier ::= ClassOrInterfaceType "." Identifier ;
WhileStatementNoShortIf ::= "while" "(" Expression ")" StatementNoShortIf ;
AbstractMethodModifiers ::= AbstractMethodModifier ;
 AbstractMethodModifiers ::= AbstractMethodModifiers AbstractMethodModifier ;
MethodModifier ::= Annotation ;
 MethodModifier ::= "public" ;
 MethodModifier ::= "protected" ;
 MethodModifier ::= "private" ;
 MethodModifier ::= "abstract" ;
 MethodModifier ::= "static" ;
 MethodModifier ::= "final" ;
 MethodModifier ::= "synchronized" ;
 MethodModifier ::= "native" ;
 MethodModifier ::= "strictfp" ;
TypeVariable ::= Identifier ;
ElementValue ::= ConditionalExpression ;
 ElementValue ::= Annotation ;
 ElementValue ::= ElementValueArrayInitializer ;
InterfaceType ::= TypeDeclSpecifier TypeArguments? ;
SingleTypeImportDeclaration ::= "import" TypeName ";" ;
TypeImportOnDemandDeclaration ::= "import" PackageOrTypeName "." "*" ";" ;
ArrayCreationExpression ::= "new" PrimitiveType DimExprs Dims? ;
 ArrayCreationExpression ::= "new" ClassOrInterfaceType DimExprs Dims? ;
 ArrayCreationExpression ::= "new" PrimitiveType Dims ArrayInitializer ;
 ArrayCreationExpression ::= "new" ClassOrInterfaceType Dims ArrayInitializer ;
MethodHeader ::= MethodModifiers? TypeParameters? ResultType MethodDeclarator Throws? ;
InstanceInitializer ::= Block ;
VariableDeclarator ::= VariableDeclaratorId ;
 VariableDeclarator ::= VariableDeclaratorId "=" VariableInitializer ;
InterfaceMemberDeclarations ::= InterfaceMemberDeclaration ;
 InterfaceMemberDeclarations ::= InterfaceMemberDeclarations InterfaceMemberDeclaration ;
CatchClause ::= "catch" "(" FormalParameter ")" Block ;
ArrayInitializer ::= "{" VariableInitializers? ","? "}" ;
VariableDeclaratorId ::= Identifier ;
 VariableDeclaratorId ::= VariableDeclaratorId "[" "]" ;
AnnotationTypeElementDeclaration ::= AbstractMethodModifiers? Type Identifier "(" ")" Dims? DefaultValue? ";" ;
 AnnotationTypeElementDeclaration ::= ConstantDeclaration ;
 AnnotationTypeElementDeclaration ::= ClassDeclaration ;
 AnnotationTypeElementDeclaration ::= InterfaceDeclaration ;
 AnnotationTypeElementDeclaration ::= EnumDeclaration ;
 AnnotationTypeElementDeclaration ::= AnnotationTypeDeclaration ;
 AnnotationTypeElementDeclaration ::= ";" ;
ActualTypeArgument ::= ReferenceType ;
 ActualTypeArgument ::= Wildcard ;
EnumConstant ::= Annotations Identifier Arguments? ClassBody? ;
TypeParameters ::= "<" TypeParameterList ">" ;
LastFormalParameter ::= VariableModifiers? Type "..."? VariableDeclaratorId ;
 LastFormalParameter ::= FormalParameter ;
ElementValuePairs ::= ElementValuePair ;
 ElementValuePairs ::= ElementValuePairs "," ElementValuePair ;
PreIncrementExpression ::= "++" UnaryExpression ;
ElementValueArrayInitializer ::= "{" ElementValues? ","? "}" ;
FieldAccess ::= Primary "." Identifier ;
 FieldAccess ::= "super" "." Identifier ;
 FieldAccess ::= ClassName "." "super" "." Identifier ;
LabeledStatementNoShortIf ::= Identifier ":" StatementNoShortIf ;
BasicForStatement ::= "for" "(" ForInit? ";" Expression? ";" ForUpdate? ")" Statement ;
ForUpdate ::= StatementExpressionList ;
FieldModifier ::= Annotation ;
 FieldModifier ::= "public" ;
 FieldModifier ::= "protected" ;
 FieldModifier ::= "private" ;
 FieldModifier ::= "static" ;
 FieldModifier ::= "final" ;
 FieldModifier ::= "transient" ;
 FieldModifier ::= "volatile" ;
PackageName ::= Identifier ;
 PackageName ::= PackageName "." Identifier ;
ConstructorModifier ::= Annotation ;
 ConstructorModifier ::= "public" ;
 ConstructorModifier ::= "protected" ;
 ConstructorModifier ::= "private" ;
DefaultValue ::= "default" ElementValue ;
PostfixExpression ::= Primary ;
 PostfixExpression ::= ExpressionName ;
 PostfixExpression ::= PostIncrementExpression ;
 PostfixExpression ::= PostDecrementExpression ;
NumericType ::= IntegralType ;
 NumericType ::= FloatingPointType ;
CompilationUnit ::= PackageDeclaration? ImportDeclarations? TypeDeclarations? ;
InclusiveOrExpression ::= ExclusiveOrExpression ;
 InclusiveOrExpression ::= InclusiveOrExpression "|" ExclusiveOrExpression ;
ForStatement ::= BasicForStatement ;
 ForStatement ::= EnhancedForStatement ;
ClassInstanceCreationExpression ::= "new" TypeArguments? ClassOrInterfaceType "(" ArgumentList? ")" ClassBody? ;
 ClassInstanceCreationExpression ::= Primary "." "new" TypeArguments? Identifier TypeArguments? "(" ArgumentList? ")" ClassBody? ;
SingleElementAnnotation ::= "@" TypeName "(" ElementValue ")" ;
ConstructorModifiers ::= ConstructorModifier ;
 ConstructorModifiers ::= ConstructorModifiers ConstructorModifier ;
FieldModifiers ::= FieldModifier ;
 FieldModifiers ::= FieldModifiers FieldModifier ;
EmptyStatement ::= ";" ;
TypeDeclaration ::= ClassDeclaration ;
 TypeDeclaration ::= InterfaceDeclaration ;
 TypeDeclaration ::= ";" ;
IfThenElseStatementNoShortIf ::= "if" "(" Expression ")" StatementNoShortIf "else" StatementNoShortIf ;
ConstantModifier ::= Annotation ;
 ConstantModifier ::= "public" ;
 ConstantModifier ::= "static" ;
 ConstantModifier ::= "final" ;
AbstractMethodModifier ::= Annotation ;
 AbstractMethodModifier ::= "public" ;
 AbstractMethodModifier ::= "abstract" ;
MethodDeclaration ::= MethodHeader MethodBody ;
AbstractMethodDeclaration ::= AbstractMethodModifiers? TypeParameters? ResultType MethodDeclarator Throws? ";" ;
AdditionalBoundList ::= AdditionalBound AdditionalBoundList ;
 AdditionalBoundList ::= AdditionalBound ;
TypeDeclarations ::= TypeDeclaration ;
 TypeDeclarations ::= TypeDeclarations TypeDeclaration ;
ExtendsInterfaces ::= "extends" InterfaceType ;
 ExtendsInterfaces ::= ExtendsInterfaces "," InterfaceType ;
ClassType ::= TypeDeclSpecifier TypeArguments? ;
AssignmentOperator ::= "=" ;
 AssignmentOperator ::= "*=" ;
 AssignmentOperator ::= "/=" ;
 AssignmentOperator ::= "%=" ;
 AssignmentOperator ::= "+=" ;
 AssignmentOperator ::= "-=" ;
 AssignmentOperator ::= "<<=" ;
 AssignmentOperator ::= ">>=" ;
 AssignmentOperator ::= ">>>=" ;
 AssignmentOperator ::= "&=" ;
 AssignmentOperator ::= "^=" ;
 AssignmentOperator ::= "|=" ;
AndExpression ::= EqualityExpression ;
 AndExpression ::= AndExpression "&" EqualityExpression ;
PackageOrTypeName ::= Identifier ;
 PackageOrTypeName ::= PackageOrTypeName "." Identifier ;
MultiplicativeExpression ::= UnaryExpression ;
 MultiplicativeExpression ::= MultiplicativeExpression "*" UnaryExpression ;
 MultiplicativeExpression ::= MultiplicativeExpression "/" UnaryExpression ;
 MultiplicativeExpression ::= MultiplicativeExpression "%" UnaryExpression ;
TypeParameterList ::= TypeParameterList "," TypeParameter ;
 TypeParameterList ::= TypeParameter ;
LeftHandSide ::= ExpressionName ;
 LeftHandSide ::= FieldAccess ;
 LeftHandSide ::= ArrayAccess ;
ConstructorDeclarator ::= TypeParameters? Identifier "(" FormalParameterList? ")" ;
PostDecrementExpression ::= PostfixExpression "--" ;
AssertStatement ::= "assert" Expression ";" ;
 AssertStatement ::= "assert" Expression ":" Expression ";" ;
VariableInitializer ::= Expression ;
 VariableInitializer ::= ArrayInitializer ;
AdditiveExpression ::= MultiplicativeExpression ;
 AdditiveExpression ::= AdditiveExpression "+" MultiplicativeExpression ;
 AdditiveExpression ::= AdditiveExpression "-" MultiplicativeExpression ;
InterfaceDeclaration ::= NormalInterfaceDeclaration ;
 InterfaceDeclaration ::= AnnotationTypeDeclaration ;
PrimitiveType ::= NumericType ;
 PrimitiveType ::= "boolean" ;
ImportDeclarations ::= ImportDeclaration ;
 ImportDeclarations ::= ImportDeclarations ImportDeclaration ;
ConditionalExpression ::= ConditionalOrExpression ;
 ConditionalExpression ::= ConditionalOrExpression "?" Expression ":" ConditionalExpression ;
LocalVariableDeclarationStatement ::= LocalVariableDeclaration ";" ;
ConstructorBody ::= "{" ExplicitConstructorInvocation? BlockStatements? "}" ;
SynchronizedStatement ::= "synchronized" "(" Expression ")" Block ;
ShiftExpression ::= AdditiveExpression ;
 ShiftExpression ::= ShiftExpression "<<" AdditiveExpression ;
 ShiftExpression ::= ShiftExpression ">>" AdditiveExpression ;
 ShiftExpression ::= ShiftExpression ">>>" AdditiveExpression ;
EnumDeclaration ::= ClassModifiers? "enum" Identifier Interfaces? EnumBody ;
SwitchBlock ::= "{" SwitchBlockStatementGroups? SwitchLabels? "}" ;
ExpressionStatement ::= StatementExpression ";" ;
AmbiguousName ::= Identifier ;
 AmbiguousName ::= AmbiguousName "." Identifier ;
DimExprs ::= DimExpr ;
 DimExprs ::= DimExprs DimExpr ;
NormalAnnotation ::= "@" TypeName "(" ElementValuePairs? ")" ;
IfThenStatement ::= "if" "(" Expression ")" Statement ;
VariableModifier ::= "final" ;
 VariableModifier ::= Annotation ;
ForStatementNoShortIf ::= "for" "(" ForInit? ";" Expression? ";" ForUpdate? ")" StatementNoShortIf ;
AnnotationTypeDeclaration ::= InterfaceModifiers? "@" "interface" Identifier AnnotationTypeBody ;
VariableInitializers ::= VariableInitializer ;
 VariableInitializers ::= VariableInitializers "," VariableInitializer ;
PostIncrementExpression ::= PostfixExpression "++" ;
StatementExpressionList ::= StatementExpression ;
 StatementExpressionList ::= StatementExpressionList "," StatementExpression ;
StatementWithoutTrailingSubstatement ::= Block ;
 StatementWithoutTrailingSubstatement ::= EmptyStatement ;
 StatementWithoutTrailingSubstatement ::= ExpressionStatement ;
 StatementWithoutTrailingSubstatement ::= AssertStatement ;
 StatementWithoutTrailingSubstatement ::= SwitchStatement ;
 StatementWithoutTrailingSubstatement ::= DoStatement ;
 StatementWithoutTrailingSubstatement ::= BreakStatement ;
 StatementWithoutTrailingSubstatement ::= ContinueStatement ;
 StatementWithoutTrailingSubstatement ::= ReturnStatement ;
 StatementWithoutTrailingSubstatement ::= SynchronizedStatement ;
 StatementWithoutTrailingSubstatement ::= ThrowStatement ;
 StatementWithoutTrailingSubstatement ::= TryStatement ;
BlockStatement ::= LocalVariableDeclarationStatement ;
 BlockStatement ::= ClassDeclaration ;
 BlockStatement ::= Statement ;
DimExpr ::= "[" Expression "]" ;
ConstantExpression ::= Expression ;
SwitchStatement ::= "switch" "(" Expression ")" SwitchBlock ;
MethodModifiers ::= MethodModifier ;
 MethodModifiers ::= MethodModifiers MethodModifier ;
ExclusiveOrExpression ::= AndExpression ;
 ExclusiveOrExpression ::= ExclusiveOrExpression "^" AndExpression ;
ClassOrInterfaceType ::= ClassType ;
 ClassOrInterfaceType ::= InterfaceType ;
AdditionalBound ::= "&" InterfaceType ;
ImportDeclaration ::= SingleTypeImportDeclaration ;
 ImportDeclaration ::= TypeImportOnDemandDeclaration ;
 ImportDeclaration ::= SingleStaticImportDeclaration ;
 ImportDeclaration ::= StaticImportOnDemandDeclaration ;
StaticInitializer ::= "static" Block ;
PackageDeclaration ::= Annotations? "package" PackageName ";" ;
SwitchLabels ::= SwitchLabel ;
 SwitchLabels ::= SwitchLabels SwitchLabel ;
ClassBodyDeclarations ::= ClassBodyDeclaration ;
 ClassBodyDeclarations ::= ClassBodyDeclarations ClassBodyDeclaration ;
MethodInvocation ::= MethodName "(" ArgumentList? ")" ;
 MethodInvocation ::= Primary "." NonWildTypeArguments? Identifier "(" ArgumentList? ")" ;
 MethodInvocation ::= "super" "." NonWildTypeArguments? Identifier "(" ArgumentList? ")" ;
 MethodInvocation ::= ClassName "." "super" "." NonWildTypeArguments? Identifier "(" ArgumentList? ")" ;
 MethodInvocation ::= TypeName "." NonWildTypeArguments Identifier "(" ArgumentList? ")" ;
ElementValuePair ::= Identifier "=" ElementValue ;
TypeParameter ::= TypeVariable TypeBound? ;
AnnotationTypeElementDeclarations ::= AnnotationTypeElementDeclaration ;
 AnnotationTypeElementDeclarations ::= AnnotationTypeElementDeclarations AnnotationTypeElementDeclaration ;
AnnotationTypeBody ::= "{" AnnotationTypeElementDeclarations? "}" ;
ContinueStatement ::= "continue" Identifier? ";" ;
InterfaceMemberDeclaration ::= ConstantDeclaration ;
 InterfaceMemberDeclaration ::= AbstractMethodDeclaration ;
 InterfaceMemberDeclaration ::= ClassDeclaration ;
 InterfaceMemberDeclaration ::= InterfaceDeclaration ;
 InterfaceMemberDeclaration ::= ";" ;
AssignmentExpression ::= ConditionalExpression ;
 AssignmentExpression ::= Assignment ;
NonWildTypeArguments ::= "<" ReferenceTypeList ">" ;
FloatingPointType ::= "float" ;
 FloatingPointType ::= "double" ;
EnumBody ::= (EnumConstants? ","? EnumBodyDeclarations?)* ;
ExpressionName ::= Identifier ;
 ExpressionName ::= AmbiguousName "." Identifier ;
InterfaceModifiers ::= InterfaceModifier ;
 InterfaceModifiers ::= InterfaceModifiers InterfaceModifier ;
ConditionalOrExpression ::= ConditionalAndExpression ;
 ConditionalOrExpression ::= ConditionalOrExpression "||" ConditionalAndExpression ;
WhileStatement ::= "while" "(" Expression ")" Statement ;
EnhancedForStatement ::= "for" "(" VariableModifiers? Type Identifier ":" Expression ")" Statement ;
IfThenElseStatement ::= "if" "(" Expression ")" StatementNoShortIf "else" Statement ;
InterfaceBody ::= "{" InterfaceMemberDeclarations? "}" ;
FormalParameter ::= VariableModifiers? Type VariableDeclaratorId ;
FormalParameters ::= FormalParameter ;
 FormalParameters ::= FormalParameters "," FormalParameter ;
ForInit ::= StatementExpressionList ;
 ForInit ::= LocalVariableDeclaration ;
CastExpression ::= "(" PrimitiveType Dims? ")" UnaryExpression ;
 CastExpression ::= "(" ReferenceType ")" UnaryExpressionNotPlusMinus ;
EqualityExpression ::= RelationalExpression ;
 EqualityExpression ::= EqualityExpression "==" RelationalExpression ;
 EqualityExpression ::= EqualityExpression "!=" RelationalExpression ;
BreakStatement ::= "break" Identifier? ";" ;
WildcardBounds ::= "extends" ReferenceType ;
 WildcardBounds ::= "super" ReferenceType ;
ClassModifier ::= Annotation ;
 ClassModifier ::= "public" ;
 ClassModifier ::= "protected" ;
 ClassModifier ::= "private" ;
 ClassModifier ::= "abstract" ;
 ClassModifier ::= "static" ;
 ClassModifier ::= "final" ;
 ClassModifier ::= "strictfp" ;
SwitchBlockStatementGroups ::= SwitchBlockStatementGroup ;
 SwitchBlockStatementGroups ::= SwitchBlockStatementGroups SwitchBlockStatementGroup ;
SwitchBlockStatementGroup ::= SwitchLabels BlockStatements ;
ThrowStatement ::= "throw" Expression ";" ;
StatementExpression ::= Assignment ;
 StatementExpression ::= PreIncrementExpression ;
 StatementExpression ::= PreDecrementExpression ;
 StatementExpression ::= PostIncrementExpression ;
 StatementExpression ::= PostDecrementExpression ;
 StatementExpression ::= MethodInvocation ;
 StatementExpression ::= ClassInstanceCreationExpression ;
ExceptionTypeList ::= ExceptionType ;
 ExceptionTypeList ::= ExceptionTypeList "," ExceptionType ;
TypeBound ::= "extends" ClassOrInterfaceType AdditionalBoundList? ;
MethodBody ::= Block ;
 MethodBody ::= ";" ;
ReferenceTypeList ::= ReferenceType ;
 ReferenceTypeList ::= ReferenceTypeList "," ReferenceType ;
ConstructorDeclaration ::= ConstructorModifiers? ConstructorDeclarator Throws? ConstructorBody ;
VariableModifiers ::= VariableModifier ;
 VariableModifiers ::= VariableModifiers VariableModifier ;
FieldDeclaration ::= FieldModifiers? Type VariableDeclarators ";" ;
SingleStaticImportDeclaration ::= "import" "static" TypeName "." Identifier ";" ;
RelationalExpression ::= ShiftExpression ;
 RelationalExpression ::= RelationalExpression "<" ShiftExpression ;
 RelationalExpression ::= RelationalExpression ">" ShiftExpression ;
 RelationalExpression ::= RelationalExpression "<=" ShiftExpression ;
 RelationalExpression ::= RelationalExpression ">=" ShiftExpression ;
 RelationalExpression ::= RelationalExpression "instanceof" ReferenceType ;
StaticImportOnDemandDeclaration ::= "import" "static" TypeName "." "*" ";" ;
LabeledStatement ::= Identifier ":" Statement ;
EnumBodyDeclarations ::= ";" ClassBodyDeclarations? ;
ExplicitConstructorInvocation ::= NonWildTypeArguments? "this" "(" ArgumentList? ")" ";" ;
 ExplicitConstructorInvocation ::= NonWildTypeArguments? "super" "(" ArgumentList? ")" ";" ;
 ExplicitConstructorInvocation ::= Primary "." NonWildTypeArguments? "super" "(" ArgumentList? ")" ";" ;
BlockStatements ::= BlockStatement ;
 BlockStatements ::= BlockStatements BlockStatement ;
InterfaceTypeList ::= InterfaceType ;
 InterfaceTypeList ::= InterfaceTypeList "," InterfaceType ;
EnumConstants ::= EnumConstant ;
 EnumConstants ::= EnumConstants "," EnumConstant ;
MethodName ::= Identifier ;
 MethodName ::= AmbiguousName "." Identifier ;
MarkerAnnotation ::= "@" TypeName ;
StatementNoShortIf ::= StatementWithoutTrailingSubstatement ;
 StatementNoShortIf ::= LabeledStatementNoShortIf ;
 StatementNoShortIf ::= IfThenElseStatementNoShortIf ;
 StatementNoShortIf ::= WhileStatementNoShortIf ;
 StatementNoShortIf ::= ForStatementNoShortIf ;
NormalInterfaceDeclaration ::= InterfaceModifiers? "interface" Identifier ExtendsInterfaces? InterfaceBody ;
IntegralType ::= "byte" ;
 IntegralType ::= "short" ;
 IntegralType ::= "int" ;
 IntegralType ::= "long" ;
 IntegralType ::= "char" ;
VariableDeclarators ::= VariableDeclarator ;
 VariableDeclarators ::= VariableDeclarators "," VariableDeclarator ;
ActualTypeArgumentList ::= ActualTypeArgument ;
 ActualTypeArgumentList ::= ActualTypeArgumentList "," ActualTypeArgument ;
ElementValues ::= ElementValue ;
 ElementValues ::= ElementValues "," ElementValue ;
TypeArguments ::= "<" ActualTypeArgumentList ">" ;
ArgumentList ::= Expression ;
 ArgumentList ::= ArgumentList "," Expression ;
ClassBody ::= "{" ClassBodyDeclarations? "}" ;
ConstantModifiers ::= ConstantModifier ;
 ConstantModifiers ::= ConstantModifier ConstantModifiers ;
FormalParameterList ::= LastFormalParameter ;
 FormalParameterList ::= FormalParameters "," LastFormalParameter ;
ResultType ::= Type ;
 ResultType ::= "void" ;
ConstantDeclaration ::= ConstantModifiers? Type VariableDeclarators ";" ;
TryStatement ::= "try" Block Catches ;
 TryStatement ::= "try" Block Catches? Finally ;
ArrayType ::= Type "[" "]" ;
LocalVariableDeclaration ::= VariableModifiers? Type VariableDeclarators ;
MethodDeclarator ::= Identifier "(" FormalParameterList? ")" ;
 MethodDeclarator ::= MethodDeclarator "[" "]" ;
EnumConstantName ::= Identifier ;
InterfaceModifier ::= Annotation ;
 InterfaceModifier ::= "public" ;
 InterfaceModifier ::= "protected" ;
 InterfaceModifier ::= "private" ;
 InterfaceModifier ::= "abstract" ;
 InterfaceModifier ::= "static" ;
 InterfaceModifier ::= "strictfp" ;
UnaryExpressionNotPlusMinus ::= PostfixExpression ;
 UnaryExpressionNotPlusMinus ::= "~" UnaryExpression ;
 UnaryExpressionNotPlusMinus ::= "!" UnaryExpression ;
 UnaryExpressionNotPlusMinus ::= CastExpression ;
ExceptionType ::= ClassType ;
 ExceptionType ::= TypeVariable ;
ConditionalAndExpression ::= InclusiveOrExpression ;
 ConditionalAndExpression ::= ConditionalAndExpression "&&" InclusiveOrExpression ;
NormalClassDeclaration ::= ClassModifiers? "class" Identifier TypeParameters? Super? Interfaces? ClassBody ;
PreDecrementExpression ::= "--" UnaryExpression ;
ClassMemberDeclaration ::= FieldDeclaration ;
 ClassMemberDeclaration ::= MethodDeclaration ;
 ClassMemberDeclaration ::= ClassDeclaration ;
 ClassMemberDeclaration ::= InterfaceDeclaration ;
 ClassMemberDeclaration ::= ";" ;
UnaryExpression ::= PreIncrementExpression ;
 UnaryExpression ::= PreDecrementExpression ;
 UnaryExpression ::= "+" UnaryExpression ;
 UnaryExpression ::= "-" UnaryExpression ;
 UnaryExpression ::= UnaryExpressionNotPlusMinus ;
ReferenceType ::= ClassOrInterfaceType ;
 ReferenceType ::= TypeVariable ;
 ReferenceType ::= ArrayType ;
TypeName ::= Identifier ;
 TypeName ::= PackageOrTypeName "." Identifier ;
ClassModifiers ::= ClassModifier ;
 ClassModifiers ::= ClassModifiers ClassModifier ;
DoStatement ::= "do" Statement "while" "(" Expression ")" ";" ;
ClassName ::= Identifier ;
 ClassName ::= AmbiguousName "." Identifier ;
ClassDeclaration ::= NormalClassDeclaration ;
 ClassDeclaration ::= EnumDeclaration ;
ClassBodyDeclaration ::= ClassMemberDeclaration ;
 ClassBodyDeclaration ::= InstanceInitializer ;
 ClassBodyDeclaration ::= StaticInitializer ;
 ClassBodyDeclaration ::= ConstructorDeclaration ;
SwitchLabel ::= "case" ConstantExpression ":" ;
 SwitchLabel ::= "case" EnumConstantName ":" ;
 SwitchLabel ::= "default" ":" ;
--------------------java::jvm-level0.bgf--------------------
TryCatchBlock ::= (tryCatchBlock::(startLabelIndex::integer() endLabelIndex::integer() handlerLabelIndex::integer() type::string())) | (finallyBlock::(startLabelIndex::integer() endLabelIndex::integer() handlerLabelIndex::integer())) ;
LocalVariable ::= localVariable::(name::string() description::string() signature::string() startLabelIndex::integer() endLabelIndex::integer() index::integer()) ;
InnerClass ::= (innerClass::(name::string() outerName::string() innerName::string() access::integer())) | (innerClass::(name::string() access::integer())) ;
--------------------java::java-5-parr.bgf--------------------
interfaceBodyDeclaration ::= (modifiers interfaceMemberDecl) | ";" ;
typeList ::= type ("," type)* ;
innerCreator ::= nonWildcardTypeArguments? Identifier classCreatorRest ;
constantDeclarator ::= Identifier constantDeclaratorRest ;
classOrInterfaceModifier ::= annotation | "public" | "protected" | "private" | "abstract" | "static" | "final" | "strictfp" ;
localVariableDeclaration ::= variableModifiers type variableDeclarators ;
explicitGenericInvocation ::= nonWildcardTypeArguments Identifier arguments ;
HexDigit ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "a" | "b" | "c" | "d" | "e" | "f" | "A" | "B" | "C" | "D" | "E" | "F" ;
forUpdate ::= expressionList ;
enumConstantName ::= Identifier ;
IntegerTypeSuffix ::= "l" | "L" ;
normalClassDeclaration ::= "class" Identifier typeParameters? ("extends" type)? ("implements" typeList)? classBody ;
conditionalAndExpression ::= inclusiveOrExpression ("&&" inclusiveOrExpression)* ;
inclusiveOrExpression ::= exclusiveOrExpression ("|" exclusiveOrExpression)* ;
compilationUnit ::= (annotations (packageDeclaration importDeclaration* typeDeclaration*) | (classOrInterfaceDeclaration typeDeclaration*)) | (packageDeclaration? importDeclaration* typeDeclaration*) ;
methodDeclaratorRest ::= formalParameters ("[" "]")* ("throws" qualifiedNameList)? methodBody | ";" ;
annotationMethodRest ::= Identifier "(" ")" defaultValue? ;
classDeclaration ::= normalClassDeclaration | enumDeclaration ;
typeDeclaration ::= classOrInterfaceDeclaration | ";" ;
classBodyDeclaration ::= ";" | ("static"? block) | (modifiers memberDecl) ;
methodDeclaration ::= Identifier methodDeclaratorRest ;
elementValue ::= conditionalExpression | annotation | elementValueArrayInitializer ;
genericMethodOrConstructorRest ::= (type | "void" Identifier methodDeclaratorRest) | (Identifier constructorDeclaratorRest) ;
andExpression ::= equalityExpression ("&" equalityExpression)* ;
variableDeclarator ::= variableDeclaratorId ("=" variableInitializer)? ;
arrayInitializer ::= "{" (variableInitializer ("," variableInitializer)* ","?)? "}" ;
variableDeclaratorId ::= Identifier ("[" "]")* ;
annotationTypeElementDeclaration ::= modifiers annotationTypeElementRest ;
variableInitializer ::= arrayInitializer | expression ;
enumConstant ::= annotations? Identifier arguments? classBody? ;
typeParameters ::= "<" typeParameter ("," typeParameter)* ">" ;
primitiveType ::= "boolean" | "char" | "byte" | "short" | "int" | "long" | "float" | "double" ;
interfaceMethodDeclaratorRest ::= formalParameters ("[" "]")* ("throws" qualifiedNameList)? ";" ;
elementValueArrayInitializer ::= "{" (elementValue ("," elementValue)*)? ","? "}" ;
conditionalExpression ::= conditionalOrExpression ("?" expression ":" expression)? ;
localVariableDeclarationStatement ::= localVariableDeclaration ";" ;
constructorBody ::= "{" explicitConstructorInvocation? blockStatement* "}" ;
shiftExpression ::= additiveExpression (shiftOp additiveExpression)* ;
enumDeclaration ::= ENUM Identifier ("implements" typeList)? enumBody ;
nonWildcardTypeArguments ::= "<" typeList ">" ;
annotationTypeDeclaration ::= "@" "interface" Identifier annotationTypeBody ;
defaultValue ::= "default" elementValue ;
formalParameterDecls ::= variableModifiers type formalParameterDeclsRest ;
superSuffix ::= arguments | ("." Identifier arguments?) ;
genericMethodOrConstructorDecl ::= typeParameters genericMethodOrConstructorRest ;
UnicodeEscape ::= "\\" "u" HexDigit HexDigit HexDigit HexDigit ;
classOrInterfaceDeclaration ::= classOrInterfaceModifiers classDeclaration | interfaceDeclaration ;
voidMethodDeclaratorRest ::= formalParameters ("throws" qualifiedNameList)? methodBody | ";" ;
exclusiveOrExpression ::= andExpression ("^" andExpression)* ;
importDeclaration ::= "import" "static"? qualifiedName ("." "*")? ";" ;
createdName ::= classOrInterfaceType | primitiveType ;
integerLiteral ::= HexLiteral | OctalLiteral | DecimalLiteral ;
assignmentOperator ::= "=" | "+=" | "-=" | "*=" | "/=" | "&=" | "|=" | "^=" | "%=" | (t1::"<" t2::"<" t3::"=") | (t1::">" t2::">" t3::">" t4::("="?)) | (t1::">" t2::">" t3::"=") ;
typeParameter ::= Identifier ("extends" typeBound)? ;
multiplicativeExpression ::= unaryExpression ("*" | "/" | "%" unaryExpression)* ;
OctalEscape ::= ("\\" "0" | "1" | "2" | "3" "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7") | ("\\" "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7") | ("\\" "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7") ;
voidInterfaceMethodDeclaratorRest ::= formalParameters ("throws" qualifiedNameList)? ";" ;
classCreatorRest ::= arguments classBody? ;
FloatTypeSuffix ::= "f" | "F" | "d" | "D" ;
qualifiedNameList ::= qualifiedName ("," qualifiedName)* ;
additiveExpression ::= multiplicativeExpression ("+" | "-" multiplicativeExpression)* ;
EscapeSequence ::= ("\\" "b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | UnicodeEscape | OctalEscape ;
interfaceDeclaration ::= normalInterfaceDeclaration | annotationTypeDeclaration ;
conditionalOrExpression ::= conditionalAndExpression ("||" conditionalAndExpression)* ;
memberDeclaration ::= type methodDeclaration | fieldDeclaration ;
interfaceMemberDecl ::= interfaceMethodOrFieldDecl | interfaceGenericMethodDecl | ("void" Identifier voidInterfaceMethodDeclaratorRest) | interfaceDeclaration | classDeclaration ;
interfaceBody ::= "{" interfaceBodyDeclaration* "}" ;
formalParameter ::= variableModifiers type variableDeclaratorId ;
forInit ::= localVariableDeclaration | expressionList ;
variableModifier ::= "final" | annotation ;
interfaceMethodOrFieldRest ::= (constantDeclaratorsRest ";") | interfaceMethodDeclaratorRest ;
enhancedForControl ::= variableModifiers type Identifier ":" expression ;
constantDeclaratorRest ::= ("[" "]")* "=" variableInitializer ;
switchBlockStatementGroup ::= switchLabel+ blockStatement* ;
relationalOp ::= (t1::"<" t2::("="?)) | (t1::">" t2::("="?)) | "<" | ">" ;
annotationConstantRest ::= variableDeclarators ;
statementExpression ::= expression ;
booleanLiteral ::= "true" | "false" ;
CharacterLiteral ::= "\'" EscapeSequence | string() "\'" ;
memberDecl ::= genericMethodOrConstructorDecl | memberDeclaration | ("void" Identifier voidMethodDeclaratorRest) | (Identifier constructorDeclaratorRest) | interfaceDeclaration | classDeclaration ;
typeBound ::= type ("&" type)* ;
blockStatement ::= localVariableDeclarationStatement | classOrInterfaceDeclaration | statement ;
variableModifiers ::= variableModifier* ;
constantExpression ::= expression ;
identifierSuffix ::= (("[" "]")+ "." "class") | (("[" expression "]")+) | arguments | ("." "class") | ("." explicitGenericInvocation) | ("." "this") | ("." "super" arguments) | ("." "new" innerCreator) ;
annotationName ::= Identifier ("." Identifier)* ;
classOrInterfaceType ::= Identifier typeArguments? ("." Identifier typeArguments?)* ;
explicitConstructorInvocation ::= (nonWildcardTypeArguments? "this" | "super" arguments ";") | (primary "." nonWildcardTypeArguments? "super" arguments ";") ;
expressionList ::= expression ("," expression)* ;
packageDeclaration ::= "package" qualifiedName ";" ;
forControl ::= enhancedForControl | (forInit? ";" expression? ";" forUpdate?) ;
JavaIDDigit ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ;
elementValuePair ::= Identifier "=" elementValue ;
enumConstants ::= enumConstant ("," enumConstant)* ;
annotationTypeBody ::= "{" annotationTypeElementDeclaration* "}" ;
qualifiedName ::= Identifier ("." Identifier)* ;
interfaceMethodOrFieldDecl ::= type Identifier interfaceMethodOrFieldRest ;
ASSERT ::= "assert" ;
variableDeclarators ::= variableDeclarator ("," variableDeclarator)* ;
FloatingPointLiteral ::= (("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* Exponent? FloatTypeSuffix?) | ("." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ Exponent? FloatTypeSuffix?) | (("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ Exponent FloatTypeSuffix?) | (("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ FloatTypeSuffix) ;
enumBody ::= "{" enumConstants? ","? enumBodyDeclarations? "}" ;
constructorDeclaratorRest ::= formalParameters ("throws" qualifiedNameList)? constructorBody ;
DecimalLiteral ::= "0" | ("1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")*) IntegerTypeSuffix? ;
StringLiteral ::= """ (EscapeSequence | string())* """ ;
typeArguments ::= "<" typeArgument ("," typeArgument)* ">" ;
classBody ::= "{" classBodyDeclaration* "}" ;
formalParameters ::= "(" formalParameterDecls? ")" ;
castExpression ::= ("(" primitiveType ")" unaryExpression) | ("(" type | expression ")" unaryExpressionNotPlusMinus) ;
HexLiteral ::= "0" "x" | "X" HexDigit+ IntegerTypeSuffix? ;
equalityExpression ::= instanceOfExpression ("==" | "!=" instanceOfExpression)* ;
annotationMethodOrConstantRest ::= annotationMethodRest | annotationConstantRest ;
switchBlockStatementGroups ::= switchBlockStatementGroup* ;
unaryExpressionNotPlusMinus ::= ("~" unaryExpression) | ("!" unaryExpression) | castExpression | (primary selector* ("++" | "--")?) ;
interfaceGenericMethodDecl ::= typeParameters type | "void" Identifier interfaceMethodDeclaratorRest ;
annotationTypeElementRest ::= (type annotationMethodOrConstantRest ";") | (normalClassDeclaration ";"?) | (normalInterfaceDeclaration ";"?) | (enumDeclaration ";"?) | (annotationTypeDeclaration ";"?) ;
unaryExpression ::= ("+" unaryExpression) | ("-" unaryExpression) | ("++" unaryExpression) | ("--" unaryExpression) | unaryExpressionNotPlusMinus ;
methodBody ::= block ;
formalParameterDeclsRest ::= (variableDeclaratorId ("," formalParameterDecls)?) | ("..." variableDeclaratorId) ;
fieldDeclaration ::= variableDeclarators ";" ;
switchLabel ::= ("case" constantExpression ":") | ("case" enumConstantName ":") | ("default" ":") ;
relationalExpression ::= shiftExpression (relationalOp shiftExpression)* ;
classOrInterfaceModifiers ::= classOrInterfaceModifier* ;
enumBodyDeclarations ::= ";" classBodyDeclaration* ;
parExpression ::= "(" expression ")" ;
typeArgument ::= type | ("?" ("extends" | "super" type)?) ;
constantDeclaratorsRest ::= constantDeclaratorRest ("," constantDeclarator)* ;
catchClause ::= "catch" "(" formalParameter ")" block ;
normalInterfaceDeclaration ::= "interface" Identifier typeParameters? ("extends" typeList)? interfaceBody ;
arrayCreatorRest ::= "[" ("]" ("[" "]")* arrayInitializer) | (expression "]" ("[" expression "]")* ("[" "]")*) ;
OctalLiteral ::= "0" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7")+ IntegerTypeSuffix? ;
instanceOfExpression ::= relationalExpression ("instanceof" type)? ;
elementValuePairs ::= elementValuePair ("," elementValuePair)* ;
shiftOp ::= (t1::"<" t2::("<"?)) | (t1::">" t2::">" t3::">") | (t1::">" t2::(">"?)) ;
ENUM ::= "enum" ;
--------------------java::java-5-stahl.bgf--------------------
typeArgumentsEnd ::= GT | SR | BSR ;
casesGroup ::= aCase+ caseSList ;
classBlock ::= LCURLY (classField | SEMI)* RCURLY ;
identPrimary ::= ta1::typeArguments IDENT ((DOT ta2::typeArguments IDENT) | ε)* ((lp::LPAREN argList RPAREN) | ((lbc::LBRACK RBRACK)+))? ;
ASSIGN ::= "=" ;
GT ::= ">" ;
postfixExpression ::= primaryExpression ((DOT "this") | (DOT ta1::typeArguments (IDENT (lp::LPAREN argList RPAREN)?) | ("super" (lp3::LPAREN argList RPAREN) | (DOT ta2::typeArguments IDENT (lps::LPAREN argList RPAREN)?))) | (DOT newExpression) | (lb::LBRACK expression RBRACK))* ((in::INC) | (de::DEC))? ;
MOD_ASSIGN ::= "%=" ;
LAND ::= "&&" ;
classDefinition ::= "class" IDENT tp::typeParameters sc::superClassClause ic::implementsClause cb::classBlock ;
LNOT ::= "!" ;
inclusiveOrExpression ::= exclusiveOrExpression (BOR exclusiveOrExpression)* ;
compilationUnit ::= packageDefinition | ε importDefinition* typeDefinition* ;
QUESTION ::= "?" ;
MOD ::= "%" ;
enumConst ::= annotations IDENT enumConstInit classBlock? ;
DEC ::= "--" ;
LCURLY ::= "{" ;
annotationInit ::= (lp::LPAREN (annotationMemberInit (COMMA annotationMemberInit)*) | annotationMemberValue | ε RPAREN) | ε ;
GE ::= ">=" ;
importDefinition ::= i::"import" "static"? identifierStar SEMI ;
RPAREN ::= ")" ;
interfaceBlock ::= LCURLY (interfaceField | SEMI)* RCURLY ;
finallyClause ::= "finally" compoundStatement ;
ELLIPSIS ::= "..." ;
IDENT ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "_" | "$" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "_" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "$")* ;
SR_ASSIGN ::= ">>=" ;
andExpression ::= equalityExpression (BAND equalityExpression)* ;
BSR_ASSIGN ::= ">>>=" ;
variableDeclarator ::= id::IDENT d::declaratorBrackets v::varInitializer ;
NUM_DOUBLE ::= ("." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ EXPONENT? "d" | "D") | ("0" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ "." | EXPONENT | "d" | "D") | (("1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* (("." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")*)? EXPONENT? "d" | "D") | EXPONENT) ;
arrayInitializer ::= lc::LCURLY (initializer (COMMA initializer)*)? COMMA? RCURLY ;
HEX_DIGIT ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "A" | "B" | "C" | "D" | "E" | "F" | "a" | "b" | "c" | "d" | "e" | "f" ;
BOR_ASSIGN ::= "|=" ;
typeParameters ::= (lt::LT typeParameter (COMMA typeParameter)* typeArgumentsEnd?) | ε ;
MINUS_ASSIGN ::= "-=" ;
conditionalExpression ::= logicalOrExpression (QUESTION assignmentExpression COLON conditionalExpression)? ;
INC ::= "++" ;
constructorBody ::= lc::LCURLY explicitConstructorInvocation? statement* RCURLY ;
shiftExpression ::= additiveExpression (SL | SR | BSR additiveExpression)* ;
BXOR ::= "^" ;
NUM_LONG ::= ("1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* "l" | "L" ;
COMMA ::= "," ;
FLOAT_SUFFIX ::= "f" | "F" | "d" | "D" ;
defaultValue ::= ("default" annotationMemberValue)? ;
EXPONENT ::= "e" | "E" ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
classTypeSpec ::= classOrInterfaceType (lb::LBRACK RBRACK)* ;
newArrayDeclarator ::= (lb::LBRACK expression? RBRACK)+ ;
CHAR_LITERAL ::= "\'" ESC | string() "\'" ;
BOR ::= "|" ;
parameterModifier ::= ("final" | annotation)* ;
annotationBlock ::= LCURLY (annotationField | SEMI)* RCURLY ;
identifierStar ::= IDENT (DOT IDENT)* (DOT STAR)? ;
RCURLY ::= "}" ;
PLUS ::= "+" ;
exclusiveOrExpression ::= andExpression (BXOR andExpression)* ;
SL_ASSIGN ::= "<<=" ;
annotationMemberArrayInitializer ::= lc::LCURLY (annotationMemberValue (COMMA annotationMemberValue)*)? COMMA? RCURLY ;
tryBlock ::= "try" compoundStatement handler* finallyClause? ;
typeParameter ::= IDENT ("extends" classOrInterfaceType (BAND classOrInterfaceType)*)? ;
arrayTypeSpec ::= builtInType (lb::LBRACK RBRACK)+ ;
multiplicativeExpression ::= unaryExpression (STAR | DIV | MOD unaryExpression)* ;
superClassClause ::= ("extends" classOrInterfaceType)? ;
forCond ::= expression? ;
NOT_EQUAL ::= "!=" ;
LT ::= "<" ;
additiveExpression ::= multiplicativeExpression (PLUS | MINUS multiplicativeExpression)* ;
logicalOrExpression ::= logicalAndExpression (LOR logicalAndExpression)* ;
forIter ::= expressionList? ;
referenceTypeSpec ::= classTypeSpec | arrayTypeSpec ;
DIV_ASSIGN ::= "/=" ;
STAR_ASSIGN ::= "*=" ;
LE ::= "<=" ;
forInit ::= (declaration | expressionList)? ;
builtInTypeSpec ::= builtInType (lb::LBRACK RBRACK)* ;
NUM_INT ::= ("." ("." ".") | ((("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ EXPONENT? (f1::FLOAT_SUFFIX)?)?)) | (("0" (("x" | "X" HEX_DIGIT+) | (("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+) | (("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7")+))?) | ("1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")*) ("l" | "L" | ("." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* EXPONENT? (f2::FLOAT_SUFFIX)?) | (EXPONENT (f3::FLOAT_SUFFIX)?) | (f4::FLOAT_SUFFIX))?) ;
DIV ::= "/" ;
SEMI ::= ";" ;
interfaceDefinition ::= "interface" IDENT tp::typeParameters ie::interfaceExtends ib::interfaceBlock ;
variableDefinitions ::= variableDeclarator (COMMA variableDeclarator)* ;
classField ::= (mods::modifiers (it::innerTypeDef) | (tp::typeParameters (h::ctorHead s::constructorBody) | (md::memberDef))) | ("static" s3::compoundStatement) | (s4::compoundStatement) ;
caseSList ::= statement* ;
STRING_LITERAL ::= """ (ESC | string())* """ ;
SR ::= ">>" ;
SL ::= "<<" ;
annotationMemberInit ::= IDENT ASSIGN annotationMemberValue ;
classOrInterfaceType ::= IDENT typeArguments (DOT IDENT typeArguments)* ;
newExpression ::= "new" typeArguments type (LPAREN argList RPAREN classBlock?) | (newArrayDeclarator arrayInitializer?) ;
explicitConstructorInvocation ::= typeArguments ("this" lp1::LPAREN argList RPAREN SEMI) | ("super" lp2::LPAREN argList RPAREN SEMI) ;
expressionList ::= expression (COMMA expression)* ;
ESC ::= "\\" "n" | "r" | "t" | "b" | "f" | """ | "\'" | "\\" | ("u"+ HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT) | ("0" | "1" | "2" | "3" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7")?)?) | ("4" | "5" | "6" | "7" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7")?) ;
STAR ::= "*" ;
MINUS ::= "-" ;
parameterDeclarationList ::= (parameterDeclaration (COMMA parameterDeclaration)*)? ;
LBRACK ::= "[" ;
annotationMemberValue ::= annotation | conditionalExpression | annotationMemberArrayInitializer ;
ASSERT ::= "assert" ;
logicalAndExpression ::= inclusiveOrExpression (LAND inclusiveOrExpression)* ;
assignmentExpression ::= conditionalExpression (ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | STAR_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | SR_ASSIGN | BSR_ASSIGN | SL_ASSIGN | BAND_ASSIGN | BXOR_ASSIGN | BOR_ASSIGN assignmentExpression)? ;
interfaceField ::= mods::modifiers (it::innerTypeDef) | (tp::typeParameters md::memberDef) ;
COLON ::= ":" ;
implementsClause ::= (i::"implements" classOrInterfaceType (COMMA classOrInterfaceType)*)? ;
annotationTypeDefinition ::= AT "interface" IDENT ab::annotationBlock ;
typeArguments ::= (lt::LT typeArgument (COMMA typeArgument)* typeArgumentsEnd?) | ε ;
varInitializer ::= (ASSIGN initializer)? ;
primaryExpression ::= (identPrimary (DOT "class")?) | constant | "true" | "false" | "null" | newExpression | "this" | "super" | (LPAREN assignmentExpression RPAREN) | (builtInType (lbt::LBRACK RBRACK)* DOT "class") ;
BAND_ASSIGN ::= "&=" ;
packageDefinition ::= annotations p::"package" identifier SEMI ;
BXOR_ASSIGN ::= "^=" ;
innerTypeDef ::= (ed::enumDefinition) | (cd::classDefinition) | (id::interfaceDefinition) | (ad::annotationTypeDefinition) ;
BAND ::= "&" ;
enumDefinition ::= ENUM IDENT ic::implementsClause eb::enumBlock ;
PLUS_ASSIGN ::= "+=" ;
AT ::= "@" ;
equalityExpression ::= relationalExpression (NOT_EQUAL | EQUAL relationalExpression)* ;
aCase ::= ("case" expression) | "default" COLON ;
BNOT ::= "~" ;
LOR ::= "||" ;
typeDefinition ::= (m::modifiers classDefinition | enumDefinition | interfaceDefinition | annotationTypeDefinition) | SEMI ;
unaryExpressionNotPlusMinus ::= (BNOT unaryExpression) | (LNOT unaryExpression) | (lpb::LPAREN builtInTypeSpec RPAREN unaryExpression) | (lp::LPAREN classTypeSpec RPAREN unaryExpressionNotPlusMinus) | postfixExpression ;
DOT ::= "." ;
unaryExpression ::= (INC unaryExpression) | (DEC unaryExpression) | (MINUS unaryExpression) | (PLUS unaryExpression) | unaryExpressionNotPlusMinus ;
NUM_FLOAT ::= ("." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ EXPONENT? "f" | "F") | ("0" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ "." | EXPONENT | "f" | "F") | (("1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* (("." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")*)? EXPONENT? "f" | "F") | EXPONENT) ;
BSR ::= ">>>" ;
interfaceExtends ::= (e::"extends" classOrInterfaceType (COMMA classOrInterfaceType)*)? ;
relationalExpression ::= shiftExpression ((LT | GT | LE | GE shiftExpression)*) | ("instanceof" typeSpec) ;
LPAREN ::= "(" ;
builtInType ::= "void" | "boolean" | "byte" | "char" | "short" | "int" | "float" | "long" | "double" ;
throwsClause ::= "throws" identifier (COMMA identifier)* ;
declaratorBrackets ::= (lb::LBRACK RBRACK)* ;
typeArgument ::= (q::QUESTION (("extends" referenceTypeSpec) | ("super" referenceTypeSpec))?) | referenceTypeSpec ;
typeSpec ::= classTypeSpec | builtInTypeSpec ;
EQUAL ::= "==" ;
ctorHead ::= IDENT LPAREN parameterDeclarationList RPAREN throwsClause? ;
argList ::= expressionList | ε ;
enumConstInit ::= (lp::LPAREN argList RPAREN) | ε ;
parameterDeclaration ::= pm::parameterModifier t::typeSpec (el::ELLIPSIS)? id::IDENT pd::declaratorBrackets ;
enumBlock ::= LCURLY (enumConst (COMMA enumConst)*)? COMMA? (SEMI (classField | SEMI)*)? RCURLY ;
annotationField ::= mods::modifiers (it::innerTypeDef) | (ts::typeSpec (i::IDENT LPAREN RPAREN dv::defaultValue SEMI) | (v::variableDefinitions SEMI)) ;
memberDef ::= t::typeSpec (IDENT LPAREN param::parameterDeclarationList RPAREN rt::declaratorBrackets (tc::throwsClause)? SEMI | (s2::compoundStatement)) | (v::variableDefinitions SEMI) ;
RBRACK ::= "]" ;
compoundStatement ::= lc::LCURLY statement* RCURLY ;
ENUM ::= "enum" ;
--------------------java::java-5-studman.bgf--------------------
casesGroup ::= aCase+ caseSList ;
classBlock ::= LCURLY (classField | SEMI)* RCURLY ;
identPrimary ::= (ta1::typeArguments)? IDENT ((DOT (ta2::typeArguments)? IDENT) | ε)* ((lp::LPAREN argList RPAREN) | ((lbc::LBRACK RBRACK)+))? ;
ASSIGN ::= "=" ;
GT ::= ">" ;
postfixExpression ::= primaryExpression ((DOT typeArguments? (IDENT (lp::LPAREN argList RPAREN)?) | ("super" (lp3::LPAREN argList RPAREN) | (DOT typeArguments? IDENT (lps::LPAREN argList RPAREN)?))) | (DOT "this") | (DOT newExpression) | (lb::LBRACK expression RBRACK))* ((in::INC) | (de::DEC))? ;
MOD_ASSIGN ::= "%=" ;
LAND ::= "&&" ;
classDefinition ::= "class" IDENT (tp::typeParameters)? sc::superClassClause ic::implementsClause cb::classBlock ;
LNOT ::= "!" ;
inclusiveOrExpression ::= exclusiveOrExpression (BOR exclusiveOrExpression)* ;
annotationArguments ::= annotationMemberValueInitializer | anntotationMemberValuePairs ;
compilationUnit ::= packageDefinition | ε importDefinition* typeDefinition* ;
QUESTION ::= "?" ;
MOD ::= "%" ;
annotationDefinition ::= AT "interface" IDENT ab::annotationBlock ;
DEC ::= "--" ;
LCURLY ::= "{" ;
GE ::= ">=" ;
importDefinition ::= i::"import" "static"? identifierStar SEMI ;
RPAREN ::= ")" ;
interfaceBlock ::= LCURLY (interfaceField | SEMI)* RCURLY ;
finallyClause ::= "finally" compoundStatement ;
IDENT ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "_" | "$" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "_" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "$")* ;
SR_ASSIGN ::= ">>=" ;
andExpression ::= equalityExpression (BAND equalityExpression)* ;
BSR_ASSIGN ::= ">>>=" ;
variableDeclarator ::= id::IDENT d::declaratorBrackets v::varInitializer ;
NUM_DOUBLE ::= ("." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ EXPONENT? "d" | "D") | ("0" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ "." | EXPONENT | "d" | "D") | (("1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* (("." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")*)? EXPONENT? "d" | "D") | EXPONENT) ;
arrayInitializer ::= lc::LCURLY (initializer (COMMA initializer)* COMMA?)? RCURLY ;
HEX_DIGIT ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "A" | "B" | "C" | "D" | "E" | "F" | "a" | "b" | "c" | "d" | "e" | "f" ;
BOR_ASSIGN ::= "|=" ;
enumConstantBlock ::= LCURLY (enumConstantField | SEMI)* RCURLY ;
TRIPLE_DOT ::= "..." ;
enumConstant ::= an::annotations i::IDENT (LPAREN a::argList RPAREN)? (b::enumConstantBlock)? ;
typeParameters ::= LT typeParameter (COMMA typeParameter)* typeArgumentsOrParametersEnd? ;
MINUS_ASSIGN ::= "-=" ;
conditionalExpression ::= logicalOrExpression (QUESTION assignmentExpression COLON conditionalExpression)? ;
INC ::= "++" ;
constructorBody ::= lc::LCURLY explicitConstructorInvocation? statement* RCURLY ;
shiftExpression ::= additiveExpression (SL | SR | BSR additiveExpression)* ;
BXOR ::= "^" ;
NUM_LONG ::= ("1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* "l" | "L" ;
COMMA ::= "," ;
FLOAT_SUFFIX ::= "f" | "F" | "d" | "D" ;
variableLengthParameterDeclaration ::= pm::parameterModifier t::typeSpec TRIPLE_DOT id::IDENT pd::declaratorBrackets ;
traditionalForClause ::= forInit SEMI forCond SEMI forIter ;
EXPONENT ::= "e" | "E" ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
classTypeSpec ::= classOrInterfaceType (lb::LBRACK RBRACK)* ;
typeArgumentBounds ::= "extends" | "super" classOrInterfaceType ;
newArrayDeclarator ::= (lb::LBRACK expression? RBRACK)+ ;
forStatement ::= f::"for" LPAREN traditionalForClause | forEachClause RPAREN statement ;
CHAR_LITERAL ::= "\'" ESC | string() "\'" ;
BOR ::= "|" ;
parameterModifier ::= annotation* (f::"final")? annotation* ;
annotationBlock ::= LCURLY (annotationField | SEMI)* RCURLY ;
identifierStar ::= IDENT (DOT IDENT)* (DOT STAR)? ;
RCURLY ::= "}" ;
PLUS ::= "+" ;
exclusiveOrExpression ::= andExpression (BXOR andExpression)* ;
SL_ASSIGN ::= "<<=" ;
annotationMemberArrayInitializer ::= lc::LCURLY (annotationMemberArrayValueInitializer (COMMA annotationMemberArrayValueInitializer)* COMMA?)? RCURLY ;
tryBlock ::= "try" compoundStatement handler* finallyClause? ;
typeArgumentsOrParametersEnd ::= GT | SR | BSR ;
typeParameter ::= id::IDENT typeParameterBounds? ;
multiplicativeExpression ::= unaryExpression (STAR | DIV | MOD unaryExpression)* ;
superClassClause ::= ("extends" c::classOrInterfaceType)? ;
forCond ::= expression? ;
NOT_EQUAL ::= "!=" ;
LT ::= "<" ;
additiveExpression ::= multiplicativeExpression (PLUS | MINUS multiplicativeExpression)* ;
logicalOrExpression ::= logicalAndExpression (LOR logicalAndExpression)* ;
forIter ::= expressionList? ;
DIV_ASSIGN ::= "/=" ;
STAR_ASSIGN ::= "*=" ;
annotationMemberValueInitializer ::= conditionalExpression | annotation | annotationMemberArrayInitializer ;
LE ::= "<=" ;
forEachClause ::= p::parameterDeclaration COLON expression ;
forInit ::= (declaration | expressionList)? ;
builtInTypeSpec ::= builtInType (lb::LBRACK RBRACK)* ;
NUM_INT ::= ("." ((("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ EXPONENT? (f1::FLOAT_SUFFIX)?) | "..")?) | (("0" (("x" | "X" HEX_DIGIT+) | (("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+) | (("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7")+))?) | ("1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")*) ("l" | "L" | ("." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* EXPONENT? (f2::FLOAT_SUFFIX)?) | (EXPONENT (f3::FLOAT_SUFFIX)?) | (f4::FLOAT_SUFFIX))?) ;
typeArgumentSpec ::= classTypeSpec | builtInTypeArraySpec ;
DIV ::= "/" ;
SEMI ::= ";" ;
interfaceDefinition ::= "interface" IDENT (tp::typeParameters)? ie::interfaceExtends ib::interfaceBlock ;
variableDefinitions ::= variableDeclarator (COMMA variableDeclarator)* ;
classField ::= (mods::modifiers (td::typeDefinitionInternal) | ((tp::typeParameters)? (h::ctorHead s::constructorBody) | (t::typeSpec (IDENT LPAREN param::parameterDeclarationList RPAREN rt::declaratorBrackets (tc::throwsClause)? (s2::compoundStatement) | SEMI) | (v::variableDefinitions SEMI)))) | ("static" s3::compoundStatement) | (s4::compoundStatement) ;
caseSList ::= statement* ;
STRING_LITERAL ::= """ (ESC | string())* """ ;
anntotationMemberValuePairs ::= annotationMemberValuePair (COMMA annotationMemberValuePair)* ;
SR ::= ">>" ;
SL ::= "<<" ;
classOrInterfaceType ::= IDENT typeArguments? (DOT IDENT typeArguments?)* ;
newExpression ::= "new" typeArguments? type (LPAREN argList RPAREN classBlock?) | (newArrayDeclarator arrayInitializer?) ;
explicitConstructorInvocation ::= typeArguments? ("this" lp1::LPAREN argList RPAREN SEMI) | ("super" lp2::LPAREN argList RPAREN SEMI) ;
expressionList ::= expression (COMMA expression)* ;
ESC ::= "\\" "n" | "r" | "t" | "b" | "f" | """ | "\'" | "\\" | ("u"+ HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT) | ("0" | "1" | "2" | "3" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7")?)?) | ("4" | "5" | "6" | "7" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7")?) ;
STAR ::= "*" ;
MINUS ::= "-" ;
parameterDeclarationList ::= ((parameterDeclaration (COMMA parameterDeclaration)* (COMMA variableLengthParameterDeclaration)?) | variableLengthParameterDeclaration)? ;
LBRACK ::= "[" ;
logicalAndExpression ::= inclusiveOrExpression (LAND inclusiveOrExpression)* ;
assignmentExpression ::= conditionalExpression (ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | STAR_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | SR_ASSIGN | BSR_ASSIGN | SL_ASSIGN | BAND_ASSIGN | BXOR_ASSIGN | BOR_ASSIGN assignmentExpression)? ;
annotationMemberValuePair ::= i::IDENT ASSIGN v::annotationMemberValueInitializer ;
interfaceField ::= mods::modifiers (td::typeDefinitionInternal) | ((tp::typeParameters)? t::typeSpec (IDENT LPAREN param::parameterDeclarationList RPAREN rt::declaratorBrackets (tc::throwsClause)? SEMI) | (v::variableDefinitions SEMI)) ;
COLON ::= ":" ;
implementsClause ::= (i::"implements" classOrInterfaceType (COMMA classOrInterfaceType)*)? ;
typeArguments ::= LT typeArgument (COMMA typeArgument)* typeArgumentsOrParametersEnd? ;
varInitializer ::= (ASSIGN initializer)? ;
primaryExpression ::= (identPrimary (DOT "class")?) | constant | "true" | "false" | "null" | newExpression | "this" | "super" | (LPAREN assignmentExpression RPAREN) | (builtInType (lbt::LBRACK RBRACK)* DOT "class") ;
BAND_ASSIGN ::= "&=" ;
packageDefinition ::= annotations p::"package" identifier SEMI ;
BXOR_ASSIGN ::= "^=" ;
BAND ::= "&" ;
enumConstantField ::= (mods::modifiers (td::typeDefinitionInternal) | ((tp::typeParameters)? t::typeSpec (IDENT LPAREN param::parameterDeclarationList RPAREN rt::declaratorBrackets (tc::throwsClause)? (s2::compoundStatement) | SEMI) | (v::variableDefinitions SEMI))) | (s4::compoundStatement) ;
enumDefinition ::= "enum" IDENT ic::implementsClause eb::enumBlock ;
PLUS_ASSIGN ::= "+=" ;
wildcardType ::= q::QUESTION typeArgumentBounds? ;
AT ::= "@" ;
equalityExpression ::= relationalExpression (NOT_EQUAL | EQUAL relationalExpression)* ;
aCase ::= ("case" expression) | "default" COLON ;
BNOT ::= "~" ;
LOR ::= "||" ;
typeDefinition ::= (m::modifiers typeDefinitionInternal) | SEMI ;
unaryExpressionNotPlusMinus ::= (BNOT unaryExpression) | (LNOT unaryExpression) | (lpb::LPAREN builtInTypeSpec RPAREN unaryExpression) | (lp::LPAREN classTypeSpec RPAREN unaryExpressionNotPlusMinus) | postfixExpression ;
DOT ::= "." ;
unaryExpression ::= (INC unaryExpression) | (DEC unaryExpression) | (MINUS unaryExpression) | (PLUS unaryExpression) | unaryExpressionNotPlusMinus ;
typeParameterBounds ::= "extends" classOrInterfaceType (BAND classOrInterfaceType)* ;
NUM_FLOAT ::= ("." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ EXPONENT? "f" | "F") | ("0" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ "." | EXPONENT | "f" | "F") | (("1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* (("." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")*)? EXPONENT? "f" | "F") | EXPONENT) ;
BSR ::= ">>>" ;
interfaceExtends ::= (e::"extends" classOrInterfaceType (COMMA classOrInterfaceType)*)? ;
relationalExpression ::= shiftExpression ((LT | GT | LE | GE shiftExpression)*) | ("instanceof" typeSpec) ;
LPAREN ::= "(" ;
builtInType ::= "void" | "boolean" | "byte" | "char" | "short" | "int" | "float" | "long" | "double" ;
throwsClause ::= "throws" identifier (COMMA identifier)* ;
declaratorBrackets ::= (lb::LBRACK RBRACK)* ;
builtInTypeArraySpec ::= builtInType (lb::LBRACK RBRACK)+ ;
typeArgument ::= typeArgumentSpec | wildcardType ;
typeSpec ::= classTypeSpec | builtInTypeSpec ;
EQUAL ::= "==" ;
ctorHead ::= IDENT LPAREN parameterDeclarationList RPAREN throwsClause? ;
argList ::= expressionList | ε ;
parameterDeclaration ::= pm::parameterModifier t::typeSpec id::IDENT pd::declaratorBrackets ;
enumBlock ::= LCURLY (enumConstant (COMMA enumConstant)* COMMA?)? (SEMI (classField | SEMI)*)? RCURLY ;
annotationField ::= mods::modifiers (td::typeDefinitionInternal) | (t::typeSpec (i::IDENT LPAREN RPAREN rt::declaratorBrackets ("default" amvi::annotationMemberValueInitializer)? SEMI) | (v::variableDefinitions SEMI)) ;
typeDefinitionInternal ::= classDefinition | interfaceDefinition | enumDefinition | annotationDefinition ;
RBRACK ::= "]" ;
compoundStatement ::= lc::LCURLY statement* RCURLY ;
annotationMemberArrayValueInitializer ::= conditionalExpression | annotation ;
--------------------java::java-1-cordy-guo.bgf--------------------
for_update ::= {expression ","}* ;
numeric_literal ::= number ;
equality_expression ::= relational_expression equality_op_relational_expression* ;
empty_statement ::= ";" NL ;
array_initializer ::= "{" {variable_initializer ","}* ","? "}" ;
relational_op_shift_expression ::= (relational_op shift_expression) | ("instanceof" type_specifier) ;
conditional_or_expression ::= conditional_and_expression or_conditional_and_expression* ;
conditional_choice ::= "?" expression ":" conditional_expression ;
relational_op ::= "<" | ">" | "<=" | ">=" ;
and_inclusive_or_expression ::= "&&" inclusive_or_expression ;
for_statement ::= "for" "(" for_init for_expression for_update ")" statement NL ;
type_specifier ::= type_name | array_type_specifier ;
null_literal ::= "null" ;
equality_op_relational_expression ::= equality_op relational_expression ;
method_or_constructor_declaration ::= method_declaration | constructor_declaration ;
label_name ::= reference ;
shift_expression ::= additive_expression shift_additive_expression* ;
type_declaration ::= (class_declaration NL NL) | (interface_declaration NL NL) ;
interface_declaration ::= interface_header interface_body ;
catch_clause ::= "catch" "(" type_specifier variable_name ")" block ;
class_name ::= declared_name ;
unary_op ::= "+" | "-" | "~" | "!" ;
conditional_expression ::= conditional_or_expression conditional_choice? ;
type_name ::= primitive_type | qualified_name ;
declared_name ::= reference ;
variable_name ::= declared_name dimension* ;
package_or_type_name ::= qualified_name ;
additive_expression ::= multiplicative_expression add_op_multiplicative_expression* ;
try_statement ::= "try" block catch_clause* finally_clause? NL ;
interface_body ::= class_or_interface_body ;
imported_name ::= package_or_type_name dot_star? ;
label_statement ::= label_name ":" NL ;
package_name ::= qualified_name ;
inclusive_or_expression ::= exclusive_or_expression or_exclusive_or_expression* ;
while_statement ::= "while" "(" expression ")" statement NL ;
import_declaration ::= "import" imported_name ";" NL NL ;
implements_clause ::= "implements" qualified_name+ ;
or_and_expression ::= "^" and_expression ;
method_argument ::= "(" {argument ","}* ")" ;
conditional_and_expression ::= inclusive_or_expression and_inclusive_or_expression* ;
formal_parameter ::= "final"? type_specifier formal_parameter_name ;
continue_statement ::= "continue" label_name? ";" NL ;
assignment_operator ::= "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | ">>>=" | "&=" | "^=" | "|=" ;
throw_statement ::= "throw" expression ";" NL ;
extends_clause ::= "extends" type_name+ ;
member_declaration ::= method_or_constructor_declaration | type_declaration ;
variable_declarator ::= variable_name equals_variable_initializer? ;
interface_header ::= modifier* "interface" interface_name extends_clause? implements_clause? ;
dot_id ::= "." id ;
interface_name ::= declared_name ;
mult_op ::= "*" | "/" | "%" ;
method_declarator ::= method_name "(" {formal_parameter ","}* ")" dimension* ;
qualified_name ::= reference ;
for_expression ::= expression? ";" ;
if_statement ::= "if" "(" expression ")" statement else_clause? NL ;
assignment_expression ::= conditional_expression | (unary_expression assignment_operator assignment_expression) ;
constructor_body ::= block NL ;
equality_op ::= "==" | "!=" ;
for_init ::= ({expression ","}* ";") | local_variable_declaration ;
class_body_declaration ::= empty_declaration | member_declaration | instance_initializer | static_initializer | field_declaration ;
switch_block ::= "{" IN NL switch_alternative* EX "}" ;
method_body ::= (block NL NL) | (";" NL NL) ;
add_op ::= "+" | "-" ;
shift_op ::= "<<" | ">>" | ">>>" ;
class_or_interface_body ::= "{" NL IN class_body_declaration* EX "}" ";"? NL NL ;
do_statement ::= "do" statement "while" "(" expression ")" ";" NL ;
declaration_or_statement ::= local_variable_declaration | class_declaration | statement ;
instance_initializer ::= NL block NL NL ;
mult_op_unary_expression ::= mult_op unary_expression ;
or_exclusive_or_expression ::= "|" exclusive_or_expression ;
variable_declaration ::= modifier* type_specifier variable_declarators ";" NL ;
class_instance_creation_expression ::= "new" class_or_interface_name "(" {argument ","}* ")" class_body? ;
or_conditional_and_expression ::= "||" conditional_and_expression ;
field_declaration ::= variable_declaration ;
constructor_declaration ::= NL modifier* constructor_declarator throws? constructor_body NL NL ;
else_clause ::= "else" statement ;
class_header ::= modifier* "class" class_name extends_clause? implements_clause? ;
class_declaration ::= class_header class_body ;
formal_parameter_name ::= variable_name ;
relational_expression ::= shift_expression relational_op_shift_expression* ;
break_statement ::= "break" label_name? ";" NL ;
shift_additive_expression ::= shift_op additive_expression ;
finally_clause ::= "finally" block ;
switch_label ::= ("case" constant_expression ":") | ("default" ":") ;
method_name ::= declared_name ;
unary_expression ::= (pre_inc_dec unary_expression) | (unary_op unary_expression) | postfix_expression | cast_expression ;
class_or_interface_name ::= qualified_name ;
package_header ::= "package" package_name ";" NL NL ;
switch_statement ::= "switch" "(" expression ")" switch_block NL ;
postfix_expression ::= primary post_inc_dec* ;
switch_alternative ::= switch_label IN NL declaration_or_statement* EX ;
multiplicative_expression ::= unary_expression mult_op_unary_expression* ;
add_op_multiplicative_expression ::= add_op multiplicative_expression ;
return_statement ::= "return" expression? ";" NL ;
array_type_specifier ::= type_name dimension+ ;
variable_initializer ::= expression | array_initializer ;
equals_variable_initializer ::= "=" variable_initializer ;
variable_declarators ::= variable_declarator+ ;
method_declaration ::= NL modifier* type_specifier method_declarator throws? method_body ;
character_literal ::= charlit ;
boolean_literal ::= "true" | "false" ;
cast_expression ::= "(" type_specifier ")" unary_expression ;
constructor_declarator ::= class_name "(" {formal_parameter ","}* ")" ;
and_equality_expression ::= "&" equality_expression ;
exclusive_or_expression ::= and_expression or_and_expression* ;
constant_expression ::= expression ;
array_creation_expression ::= "new" array_type_specifier array_initializer? ;
primitive_type ::= "boolean" | "char" | "byte" | "short" | "int" | "long" | "float" | "double" | "void" ;
static_initializer ::= NL "static" block NL NL ;
local_variable_declaration ::= variable_declaration ;
class_body ::= class_or_interface_body ;
expression_statement ::= expression ";" NL ;
empty_declaration ::= ";" NL ;
dot_star ::= "." "*" ;
pre_inc_dec ::= "++" | "--" ;
synchronized_statement ::= "synchronized" "(" expression ")" statement NL ;
post_inc_dec ::= "++" | "--" ;
string_literal ::= stringlit ;
package_declaration ::= package_header? import_declaration* type_declaration* ;
and_expression ::= equality_expression and_equality_expression* ;
--------------------java::java-1-jouault.bgf--------------------
ClassFeature ::= ClassMember ;
 ClassFeature ::= JavaClass ;
 ClassFeature ::= FeatureParameter ;
JavaElement ::= ClassFeature ;
 JavaElement ::= Package ;
JavaClass ::= PrimitiveType ;
 JavaClass ::= (members::ClassMember)+ package::Package (typedElements::ClassMember)+ (parameters::FeatureParameter)+ isAbstract::Boolean isStatic::Boolean isPublic::Boolean ;
FeatureParameter ::= type::JavaClass method::Method ;
ClassMember ::= Field ;
 ClassMember ::= Method ;
PrimitiveType ::= (members::ClassMember)+ package::Package (typedElements::ClassMember)+ (parameters::FeatureParameter)+ isAbstract::Boolean isStatic::Boolean isPublic::Boolean ;
--------------------java::java-1-touzet.bgf--------------------
JavaSource ::= (classes::ClassDeclaration)+ ;
MethodDefinition ::= class::ClassDeclaration (invocations::MethodInvocation)+ ;
NamedElement ::= ClassDeclaration ;
 NamedElement ::= MethodDefinition ;
ClassDeclaration ::= superclass::ClassDeclaration (methods::MethodDefinition)+ ;
MethodInvocation ::= method::MethodDefinition ;
--------------------java::java-3-bruneliere.bgf--------------------
ReferenceType ::= reference::Class ;
PrimitiveType ::= Int ;
--------------------java::java-4-sdf.bgf--------------------
ReturnStatement ::= "return" Expression? ";" ;
SimpleName ::= Identifier ;
DimExpr ::= "[" Expression "]" ;
ArrayAccess ::= Name "[" Expression "]" ;
 ArrayAccess ::= PrimaryNoNewArray "[" Expression "]" ;
PrimaryNoNewArray ::= Literal ;
 PrimaryNoNewArray ::= "this" ;
 PrimaryNoNewArray ::= Name "." "this" ;
 PrimaryNoNewArray ::= "(" Expression ")" ;
 PrimaryNoNewArray ::= ClassInstanceCreationExpression ;
 PrimaryNoNewArray ::= FieldAccess ;
 PrimaryNoNewArray ::= MethodInvocation ;
 PrimaryNoNewArray ::= ArrayAccess ;
SwitchStatement ::= "switch" "(" Expression ")" SwitchBlock ;
WhileStatementNoShortIf ::= "while" "(" Expression ")" StatementNoShortIf ;
ClassOrInterfaceType ::= Name ;
ImportDeclaration ::= SingleTypeImportDeclaration ;
 ImportDeclaration ::= TypeImportOnDemandDeclaration ;
StaticInitializer ::= "static" Block ;
PackageDeclaration ::= "package" Name ";" ;
SingleTypeImportDeclaration ::= "import" Name ";" ;
InterfaceType ::= ClassOrInterfaceType ;
LongLiteral ::= DecimalLongLiteral ;
 LongLiteral ::= HexLongLiteral ;
 LongLiteral ::= OctalLongLiteral ;
MethodInvocation ::= Name "(" (Expression ("," Expression)*)? ")" ;
 MethodInvocation ::= Primary "." Identifier "(" (Expression ("," Expression)*)? ")" ;
 MethodInvocation ::= Primary "." ClassInstanceCreationExpression ;
 MethodInvocation ::= "super" "." Identifier "(" (Expression ("," Expression)*)? ")" ;
TypeImportOnDemandDeclaration ::= "import" Name "." "*" ";" ;
ArrayCreationExpression ::= "new" PrimitiveType DimExpr+ Dim* ;
 ArrayCreationExpression ::= "new" ClassOrInterfaceType DimExpr+ Dim* ;
 ArrayCreationExpression ::= "new" PrimitiveType DimExprInitialized+ ArrayInitializer ;
 ArrayCreationExpression ::= "new" ClassOrInterfaceType DimExprInitialized+ ArrayInitializer ;
MethodHeader ::= Modifier* MethodRes MethodDeclarator Throws? ;
VariableDeclarator ::= VariableDeclaratorId ;
 VariableDeclarator ::= VariableDeclaratorId "=" VariableInitializer ;
CatchClause ::= "catch" "(" FormalParameter ")" Block ;
ArrayInitializer ::= "{" (VariableInitializer ("," VariableInitializer)*)? ","? "}" ;
ContinueStatement ::= "continue" Identifier? ";" ;
VariableDeclaratorId ::= Identifier ;
 VariableDeclaratorId ::= VariableDeclaratorId "[" "]" ;
InterfaceMemberDeclaration ::= ConstantDeclaration ;
 InterfaceMemberDeclaration ::= AbstractMethodDeclaration ;
 InterfaceMemberDeclaration ::= InterfaceDeclaration ;
 InterfaceMemberDeclaration ::= ClassDeclaration ;
FloatingPointType ::= "float" ;
 FloatingPointType ::= "double" ;
MethodRes ::= "void" ;
 MethodRes ::= Type ;
WhileStatement ::= "while" "(" Expression ")" Statement ;
FieldAccess ::= Name ;
 FieldAccess ::= Primary "." Identifier ;
 FieldAccess ::= "super" "." Identifier ;
LabeledStatementNoShortIf ::= Identifier ":" StatementNoShortIf ;
IfThenElseStatement ::= "if" "(" Expression ")" StatementNoShortIf "else" Statement ;
InterfaceBody ::= "{" InterfaceMemberDeclaration* "}" ;
FormalParameter ::= Modifier* Type VariableDeclaratorId ;
ForInit ::= StatementExpressionList ;
 ForInit ::= LocalVariableDeclaration ;
ForUpdate ::= StatementExpressionList ;
BreakStatement ::= "break" Identifier? ";" ;
ThrowStatement ::= "throw" Expression ";" ;
SwitchBlockStatementGroup ::= SwitchLabel+ BlockStatement+ ;
StatementExpression ::= Expression "++" ;
 StatementExpression ::= Expression "--" ;
 StatementExpression ::= "++" Expression ;
 StatementExpression ::= "--" Expression ;
 StatementExpression ::= Assignment ;
 StatementExpression ::= Expression "++" ;
 StatementExpression ::= Expression "--" ;
 StatementExpression ::= "++" Expression ;
 StatementExpression ::= "--" Expression ;
 StatementExpression ::= MethodInvocation ;
 StatementExpression ::= ClassInstanceCreationExpression ;
NumericType ::= IntegralType ;
 NumericType ::= FloatingPointType ;
CompilationUnit ::= PackageDeclaration? ImportDeclaration* TypeDeclaration+ ;
ForStatement ::= "for" "(" ForInit? ";" Expression? ";" ForUpdate? ")" Statement ;
ClassInstanceCreationExpression ::= "new" ClassType "(" (Expression ("," Expression)*)? ")" ;
 ClassInstanceCreationExpression ::= "new" ClassType "(" (Expression ("," Expression)*)? ")" ClassBody ;
MethodBody ::= Block ;
 MethodBody ::= ";" ;
EmptyStatement ::= ";" ;
ConstructorDeclaration ::= Modifier* ConstructorDeclarator Throws? ConstructorBody ;
FieldDeclaration ::= Modifier* Type VariableDeclarator ("," VariableDeclarator)* ";" ;
TypeDeclaration ::= ClassDeclaration ;
 TypeDeclaration ::= InterfaceDeclaration ;
 TypeDeclaration ::= ";" ;
LabeledStatement ::= Identifier ":" Statement ;
MethodDeclaration ::= MethodHeader MethodBody ;
AbstractMethodDeclaration ::= MethodHeader ";" ;
ExplicitConstructorInvocation ::= "this" "(" (Expression ("," Expression)*)? ")" ";" ;
 ExplicitConstructorInvocation ::= "super" "(" (Expression ("," Expression)*)? ")" ";" ;
Top-sort ::= CompilationUnits ;
ExtendsInterfaces ::= "extends" InterfaceType ("," InterfaceType)* ;
ClassType ::= ClassOrInterfaceType ;
IntegerLiteral ::= DecimalIntegerLiteral ;
 IntegerLiteral ::= HexIntegerLiteral ;
 IntegerLiteral ::= OctalIntegerLiteral ;
AssignmentOperator ::= "=" ;
 AssignmentOperator ::= "*=" ;
 AssignmentOperator ::= "/=" ;
 AssignmentOperator ::= "%=" ;
 AssignmentOperator ::= "+=" ;
 AssignmentOperator ::= "-=" ;
 AssignmentOperator ::= "<<=" ;
 AssignmentOperator ::= ">>=" ;
 AssignmentOperator ::= ">>>=" ;
 AssignmentOperator ::= "&=" ;
 AssignmentOperator ::= "^=" ;
 AssignmentOperator ::= "|=" ;
LeftHandSide ::= FieldAccess ;
 LeftHandSide ::= ArrayAccess ;
ConstructorDeclarator ::= SimpleName "(" (FormalParameter ("," FormalParameter)*)? ")" ;
AssertStatement ::= "assert" Expression ";" ;
StatementNoShortIf ::= StatementWithoutTrailingSubstatement ;
 StatementNoShortIf ::= LabeledStatementNoShortIf ;
 StatementNoShortIf ::= IfThenElseStatementNoShortIf ;
 StatementNoShortIf ::= WhileStatementNoShortIf ;
 StatementNoShortIf ::= ForStatementNoShortIf ;
VariableInitializer ::= Expression ;
 VariableInitializer ::= ArrayInitializer ;
IntegralType ::= "byte" ;
 IntegralType ::= "short" ;
 IntegralType ::= "int" ;
 IntegralType ::= "long" ;
 IntegralType ::= "char" ;
InterfaceDeclaration ::= Modifier* "interface" Identifier ExtendsInterfaces? InterfaceBody ;
PrimitiveType ::= NumericType ;
 PrimitiveType ::= "boolean" ;
ConstructorBody ::= "{" ExplicitConstructorInvocation? BlockStatement* "}" ;
LocalVariableDeclarationStatement ::= LocalVariableDeclaration ";" ;
SynchronizedStatement ::= "synchronized" "(" Expression ")" Block ;
ClassBody ::= "{" ClassBodyDeclaration* "}" ;
SwitchBlock ::= "{" SwitchBlockStatementGroup* SwitchLabel* "}" ;
ExpressionStatement ::= StatementExpression ";" ;
DimExprInitialized ::= "[" Expression? "]" ;
ConstantDeclaration ::= FieldDeclaration ;
IfThenStatement ::= "if" "(" Expression ")" Statement ;
TryStatement ::= "try" Block CatchClause+ ;
 TryStatement ::= "try" Block CatchClause* Finally ;
LocalVariableDeclaration ::= Type VariableDeclarator ("," VariableDeclarator)* ;
ArrayType ::= PrimitiveType "[" "]" ;
 ArrayType ::= Name "[" "]" ;
 ArrayType ::= ArrayType "[" "]" ;
MethodDeclarator ::= Identifier "(" (FormalParameter ("," FormalParameter)*)? ")" ;
 MethodDeclarator ::= MethodDeclarator "[" "]" ;
CompilationUnits ::= CompilationUnit* ;
ClassMemberDeclaration ::= FieldDeclaration ;
 ClassMemberDeclaration ::= MethodDeclaration ;
 ClassMemberDeclaration ::= Block ;
StatementExpressionList ::= StatementExpression ("," StatementExpression)* ;
ReferenceType ::= ClassOrInterfaceType ;
 ReferenceType ::= ArrayType ;
StatementWithoutTrailingSubstatement ::= Block ;
 StatementWithoutTrailingSubstatement ::= EmptyStatement ;
 StatementWithoutTrailingSubstatement ::= ExpressionStatement ;
 StatementWithoutTrailingSubstatement ::= SwitchStatement ;
 StatementWithoutTrailingSubstatement ::= DoStatement ;
 StatementWithoutTrailingSubstatement ::= BreakStatement ;
 StatementWithoutTrailingSubstatement ::= ContinueStatement ;
 StatementWithoutTrailingSubstatement ::= ReturnStatement ;
 StatementWithoutTrailingSubstatement ::= SynchronizedStatement ;
 StatementWithoutTrailingSubstatement ::= ThrowStatement ;
 StatementWithoutTrailingSubstatement ::= TryStatement ;
DoStatement ::= "do" Statement "while" "(" Expression ")" ";" ;
BlockStatement ::= Modifier* LocalVariableDeclarationStatement ;
 BlockStatement ::= Statement ;
ClassDeclaration ::= Modifier* "class" Identifier Super? Interfaces? ClassBody ;
ClassBodyDeclaration ::= ClassMemberDeclaration ;
 ClassBodyDeclaration ::= StaticInitializer ;
 ClassBodyDeclaration ::= ConstructorDeclaration ;
 ClassBodyDeclaration ::= ";" ;
 ClassBodyDeclaration ::= ClassDeclaration ;
 ClassBodyDeclaration ::= InterfaceDeclaration ;
SwitchLabel ::= "case" Expression ":" ;
 SwitchLabel ::= "default" ":" ;
--------------------java::java-5-cordy-guo-dean.bgf--------------------
for_update ::= {expression ","}* ;
equality_expression ::= relational_expression equality_op_relational_expression* ;
var_arg_specifier ::= "..." ;
empty_statement ::= ";" NL ;
array_initializer ::= "{" {variable_initializer ","}* ","? "}" ;
relational_op_shift_expression ::= (relational_op shift_expression) | ("instanceof" type_specifier) ;
and_inclusive_or_expression ::= "&&" inclusive_or_expression ;
relational_op ::= "<" | ">" | "<=" | ">=" ;
type_specifier ::= type_name | array_type_specifier ;
null_literal ::= "null" ;
label_name ::= reference ;
type_declaration ::= (class_declaration NL NL) | (interface_declaration NL NL) | (enum_declaration NL) ;
class_name ::= declared_name ;
unary_op ::= "+" | "-" | "~" | "!" ;
conditional_expression ::= conditional_or_expression conditional_choice? ;
additive_expression ::= multiplicative_expression add_op_multiplicative_expression* ;
try_statement ::= "try" block catch_clause* finally_clause? NL ;
interface_body ::= class_or_interface_body ;
imported_name ::= package_or_type_name dot_star? ;
type_parameter ::= declared_name type_bound_clause? ;
label_statement ::= label_name ":" statement ;
package_name ::= qualified_name ;
while_statement ::= "while" "(" expression ")" statement NL ;
import_declaration ::= ("import" "static"? imported_name ";" NL NL) | (";" NL) ;
implements_clause ::= "implements" qualified_name+ ;
or_and_expression ::= "^" and_expression ;
annotation_value_spec ::= "(" annotation_value_list ")" ;
conditional_and_expression ::= inclusive_or_expression and_inclusive_or_expression* ;
continue_statement ::= "continue" label_name? ";" NL ;
assignment_operator ::= "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | (SPOFF ">" ">=" SPON) | (SPOFF ">" ">" ">=" SPON) | "&=" | "^=" | "|=" ;
extends_clause ::= "extends" type_name+ ;
variable_declarator ::= variable_name equals_variable_initializer? ;
dot_id ::= ("." generic_argument? id) | ("." "class") | ("." class_instance_declaration) ;
interface_name ::= declared_name ;
for_expression ::= expression? ";" ;
if_statement ::= "if" "(" expression ")" statement else_clause? NL ;
constructor_body ::= block NL ;
for_init ::= ({expression ","}* ";") | local_variable_declaration ;
class_or_interface_component ::= (dot_id) | generic_argument ;
switch_block ::= "{" IN NL switch_alternative* EX "}" ;
wildcard_type_bound ::= ("extends" type_specifier) | ("super" type_specifier) ;
shift_op ::= "<<" | (SPOFF ">" ">" SPON) | (SPOFF ">" ">" ">" SPON) ;
enum_element ::= NL id method_argument? ;
class_or_interface_body ::= "{" NL IN class_body_declaration* EX "}" ";"? NL NL ;
annotation_value_list ::= (single_annotation_value) | ({keyed_annotation_value ","}*) ;
do_statement ::= "do" statement "while" "(" expression ")" ";" NL ;
declaration_or_statement ::= declaration | statement ;
mult_op_unary_expression ::= mult_op unary_expression ;
assert_statement ::= "assert" expression assert_error_code? ";" NL ;
class_instance_creation_expression ::= "new" class_or_interface_name "(" {argument ","}* ")" class_body? ;
or_conditional_and_expression ::= "||" conditional_and_expression ;
constructor_declaration ::= NL modifier* generic_parameter? constructor_declarator throws? constructor_body NL NL ;
field_declaration ::= variable_declaration ;
formal_parameter_name ::= variable_name ;
relational_expression ::= shift_expression relational_op_shift_expression* ;
shift_additive_expression ::= shift_op additive_expression ;
finally_clause ::= "finally" block ;
unary_expression ::= (pre_inc_dec unary_expression) | (unary_op unary_expression) | postfix_expression | cast_expression ;
class_or_interface_name ::= id class_or_interface_component* ;
package_header ::= annotation* "package" package_name ";" NL NL ;
postfix_expression ::= primary post_inc_dec* ;
variable_initializer ::= expression | array_initializer ;
array_type_specifier ::= type_name dimension+ ;
character_literal ::= charlit ;
boolean_literal ::= "true" | "false" ;
cast_expression ::= "(" type_specifier ")" unary_expression ;
constructor_declarator ::= class_name "(" {formal_parameter ","}* ")" ;
and_equality_expression ::= "&" equality_expression ;
exclusive_or_expression ::= and_expression or_and_expression* ;
primitive_type ::= "boolean" | "char" | "byte" | "short" | "int" | "long" | "float" | "double" | "void" ;
static_initializer ::= NL "static" block NL NL ;
for_in_statement ::= "for" "(" for_in_init ":" expression ")" statement NL ;
local_variable_declaration ::= variable_declaration ;
enum_header ::= modifier* id? "enum" declared_name? implements_clause? ;
expression_statement ::= expression ";" NL ;
empty_declaration ::= ";" NL ;
dot_star ::= "." "*" ;
pre_inc_dec ::= "++" | "--" ;
post_inc_dec ::= "++" | "--" ;
string_literal ::= stringlit ;
wildcard_type ::= ("?" wildcard_type_bound?) | (id wildcard_type_bound?) ;
numeric_literal ::= number ;
conditional_or_expression ::= conditional_and_expression or_conditional_and_expression* ;
conditional_choice ::= "?" expression ":" conditional_expression ;
for_statement ::= "for" "(" for_init for_expression for_update ")" statement NL ;
single_annotation_value ::= (expression) | nested_annotation | ("{" {expression_or_nested_annotation ","}* "}") ;
equality_op_relational_expression ::= equality_op relational_expression ;
nested_annotation ::= annotation ;
method_or_constructor_declaration ::= method_declaration | constructor_declaration ;
shift_expression ::= additive_expression shift_additive_expression* ;
for_in_init ::= modifier* type_specifier variable_name ;
interface_declaration ::= interface_header interface_body ;
catch_clause ::= "catch" "(" modifier* type_specifier variable_name ")" block ;
type_name ::= primitive_type | qualified_name ;
declared_name ::= id generic_parameter? ;
variable_name ::= declared_name dimension* ;
package_or_type_name ::= qualified_name ;
expression_or_nested_annotation ::= expression | nested_annotation ;
inclusive_or_expression ::= exclusive_or_expression or_exclusive_or_expression* ;
assert_error_code ::= ":" expression ;
method_argument ::= "(" {argument ","}* ")" ;
formal_parameter ::= annotation* "final"? type_specifier var_arg_specifier? formal_parameter_name ;
throw_statement ::= "throw" expression ";" NL ;
member_declaration ::= method_or_constructor_declaration | (type_declaration) ;
interface_header ::= modifier* annot_marker? "interface" interface_name extends_clause? implements_clause? ;
mult_op ::= "*" | "/" | "%" ;
method_declarator ::= method_name "(" {formal_parameter ","}* ")" dimension* ;
qualified_name ::= reference ;
assignment_expression ::= conditional_expression | (unary_expression assignment_operator assignment_expression) ;
equality_op ::= "==" | "!=" ;
class_body_declaration ::= empty_declaration | member_declaration | instance_initializer | static_initializer | field_declaration ;
keyed_annotation_value ::= id "=" single_annotation_value ;
generic_parameter ::= "<" {type_parameter ","}* ">" ;
method_body ::= (block NL NL) | (annotation_default? ";" NL NL) ;
add_op ::= "+" | "-" ;
enum_declaration ::= enum_header enum_body ;
type_bound ::= type_specifier and_type_spec* ;
and_type_spec ::= "&" type_specifier ;
instance_initializer ::= NL block NL NL ;
class_instance_declaration ::= class_instance_creation_expression | "class" ;
or_exclusive_or_expression ::= "|" exclusive_or_expression ;
variable_declaration ::= modifier* type_specifier variable_declarators ";" NL ;
type_bound_clause ::= "extends" type_bound ;
else_clause ::= "else" statement ;
class_header ::= modifier* "class" class_name extends_clause? implements_clause? ;
class_declaration ::= class_header class_body ;
annotation_default ::= ("default" expression) | ("default" array_initializer) ;
break_statement ::= "break" label_name? ";" NL ;
switch_label ::= ("case" constant_expression ":") | ("default" ":") ;
method_name ::= declared_name ;
generic_argument ::= "<" {type_argument ","}* ">" ;
switch_statement ::= "switch" "(" expression ")" switch_block NL ;
type_argument ::= type_specifier | wildcard_type ;
switch_alternative ::= switch_label IN NL declaration_or_statement* EX ;
multiplicative_expression ::= unary_expression mult_op_unary_expression* ;
add_op_multiplicative_expression ::= add_op multiplicative_expression ;
return_statement ::= "return" expression? ";" NL ;
enum_body ::= "{" IN {enum_element ","}* ","? class_body_declaration* EX "}" ";"? NL NL ;
equals_variable_initializer ::= "=" variable_initializer ;
variable_declarators ::= variable_declarator+ ;
method_declaration ::= NL modifier* generic_parameter? type_specifier method_declarator throws? method_body ;
constant_expression ::= expression ;
annot_marker ::= "@" ;
array_creation_expression ::= "new" array_type_specifier array_initializer? ;
class_body ::= class_or_interface_body ;
synchronized_statement ::= "synchronized" "(" expression ")" statement NL ;
package_declaration ::= package_header? import_declaration* type_declaration* ;
and_expression ::= equality_expression and_equality_expression* ;
--------------------java::java-5-giquel.bgf--------------------
ReturnStatement ::= expression::Expression ;
ArrayAccess ::= index::Expression array::Expression ;
SwitchStatement ::= (statements::Statement)+ expression::Expression ;
MemberRef ::= qualifier::NamedElementRef member::NamedElementRef ;
MethodRefParameter ::= name::String isVarargs::Boolean type::NamedElementRef ;
VariableDeclarationExpression ::= modifiers::String type::NamedElementRef ;
ThisExpression ::= qualifier::NamedElementRef ;
TypeLiteral ::= type::NamedElementRef ;
ImportDeclaration ::= static::Boolean importedElement::NamedElementRef ;
WildCardType ::= isUpperBound::Boolean bound::NamedElementRef ;
PackageDeclaration ::= model::Model (ownedElements::AbstractTypeDeclaration)+ ;
ParameterizedType ::= (typeArguments::NamedElementRef)+ type::NamedElementRef ;
MethodInvocation ::= method::NamedElementRef (arguments::Expression)+ expression::Expression ;
NamedElementRef ::= extraArrayDimensions::Integer element::NamedElement qualifier::NamedElementRef ;
TypeParameter ::= (bounds::NamedElementRef)+ ;
TextElement ::= text::String ;
PrefixExpression ::= operator::String operand::Expression ;
CatchClause ::= exception::SingleVariableDeclaration body::Block ;
ArrayInitializer ::= (expressions::Expression)+ ;
InfixExpression ::= operator::String (extendedOperands::Expression)+ rightOperand::Expression leftOperand::Expression ;
ContinueStatement ::= label::NamedElementRef ;
UnresolvedItem ::= name::String proxy::Boolean (comments::Comment)+ ;
WhileStatement ::= expression::Expression body::Statement ;
FieldAccess ::= field::NamedElementRef expression::Expression ;
EnhancedForStatement ::= parameter::SingleVariableDeclaration expression::Expression body::Statement ;
BodyDeclaration ::= Initializer ;
 BodyDeclaration ::= EnumConstantDeclaration ;
 BodyDeclaration ::= FieldDeclaration ;
 BodyDeclaration ::= AbstractTypeDeclaration ;
 BodyDeclaration ::= AnnotationTypeMemberDeclaration ;
 BodyDeclaration ::= MethodDeclaration ;
CastExpression ::= type::NamedElementRef expression::Expression ;
AnnotationTypeMemberDeclaration ::= type::NamedElementRef default::Expression ;
ValuedNamedElement ::= MultipleValuedNamedElement ;
 ValuedNamedElement ::= SingleVariableDeclaration ;
SingleVariableDeclaration ::= modifiers::String isVarargs::Boolean type::NamedElementRef ;
EnumConstantDeclaration ::= (arguments::Expression)+ anonymousClassDeclaration::AnonymousClassDeclaration ;
ParenthesizedExpression ::= expression::Expression ;
MethodRef ::= qualifier::NamedElementRef (parameters::MethodRefParameter)+ method::NamedElementRef ;
VariableDeclarationStatement ::= modifiers::String type::NamedElementRef ;
BreakStatement ::= label::NamedElementRef ;
AnonymousClassDeclaration ::= (bodyDeclarations::BodyDeclaration)+ ;
PostfixExpression ::= operator::String operand::Expression ;
SuperMethodInvocation ::= (arguments::Expression)+ qualifier::NamedElementRef method::NamedElementRef ;
ThrowStatement ::= expression::Expression ;
ForStatement ::= body::Statement expression::Expression (initializers::Expression)+ (updaters::Expression)+ ;
ArrayLengthAccess ::= array::Expression ;
EmptyStatement ::= ε ;
TypeDeclaration ::= isInterface::Boolean (typeParameters::TypeParameter)+ superclass::NamedElementRef ;
FieldDeclaration ::= type::NamedElementRef ;
AbstractTypeDeclaration ::= AnnotationTypeDeclaration ;
 AbstractTypeDeclaration ::= EnumDeclaration ;
 AbstractTypeDeclaration ::= TypeDeclaration ;
LabeledStatement ::= body::Statement ;
MethodDeclaration ::= extraArrayDimensions::Integer constructor::Boolean varargs::Boolean body::Block (parameters::SingleVariableDeclaration)+ (typeParameters::TypeParameter)+ (thrownExceptions::NamedElementRef)+ returnType::NamedElementRef ;
ArrayCreation ::= (dimensions::Expression)+ initializer::ArrayInitializer type::NamedElementRef ;
IfStatement ::= expression::Expression elseStatement::Statement thenStatement::Statement ;
BlockComment ::= content::String isEnclosedByParent::Boolean isPrefixOfParent::Boolean ;
LineComment ::= content::String isEnclosedByParent::Boolean isPrefixOfParent::Boolean ;
AssertStatement ::= message::Expression expression::Expression ;
SwitchCase ::= expressionInitialized::Boolean expression::Expression ;
SuperFieldAccess ::= qualifier::NamedElementRef field::NamedElementRef ;
NamedElement ::= OrphanType ;
 NamedElement ::= ValuedNamedElement ;
 NamedElement ::= AbstractTypeDeclaration ;
 NamedElement ::= AnnotationTypeMemberDeclaration ;
 NamedElement ::= MethodDeclaration ;
 NamedElement ::= UnresolvedItem ;
 NamedElement ::= EnumConstantDeclaration ;
 NamedElement ::= LabeledStatement ;
 NamedElement ::= PackageDeclaration ;
 NamedElement ::= TypeParameter ;
TagElement ::= tagName::String (fragments::ASTNode)+ ;
AnnotationMemberValuePair ::= member::NamedElementRef value::Expression ;
PrimitiveType ::= (comments::Comment)+ ;
ConditionalExpression ::= elseExpression::Expression thenExpression::Expression expression::Expression ;
SynchronizedStatement ::= body::Block expression::Expression ;
EnumDeclaration ::= (enumConstants::EnumConstantDeclaration)+ ;
ExpressionStatement ::= expression::Expression ;
TryStatement ::= finally::Block body::Block (catchClauses::CatchClause)+ ;
AnnotationTypeDeclaration ::= originalFileContent::String package::PackageDeclaration (bodyDeclarations::BodyDeclaration)+ (superInterfaces::NamedElementRef)+ (commentsAfterBody::Comment)+ (imports::ImportDeclaration)+ (commentsBeforeBody::Comment)+ ;
SuperConstructorInvocation ::= (arguments::Expression)+ expression::Expression ;
TypeDeclarationStatement ::= declaration::AbstractTypeDeclaration ;
ClassInstanceCreation ::= (arguments::Expression)+ type::NamedElementRef expression::Expression anonymousClassDeclaration::AnonymousClassDeclaration ;
ConstructorInvocation ::= (arguments::Expression)+ ;
MultipleValuedNamedElement ::= FieldDeclaration ;
InstanceofExpression ::= leftOperand::Expression rightOperand::NamedElementRef ;
DoStatement ::= expression::Expression body::Statement ;
ASTNode ::= AnnotationMemberValuePair ;
 ASTNode ::= AnonymousClassDeclaration ;
 ASTNode ::= BodyDeclaration ;
 ASTNode ::= CatchClause ;
 ASTNode ::= Comment ;
 ASTNode ::= Expression ;
 ASTNode ::= ImportDeclaration ;
 ASTNode ::= MemberRef ;
 ASTNode ::= MethodRef ;
 ASTNode ::= MethodRefParameter ;
 ASTNode ::= Statement ;
 ASTNode ::= TagElement ;
 ASTNode ::= TextElement ;
 ASTNode ::= PackageDeclaration ;
 ASTNode ::= ParameterizedType ;
 ASTNode ::= PrimitiveType ;
 ASTNode ::= SingleVariableDeclaration ;
 ASTNode ::= TypeParameter ;
 ASTNode ::= UnresolvedItem ;
 ASTNode ::= WildCardType ;
OrphanType ::= WildCardType ;
 OrphanType ::= ParameterizedType ;
 OrphanType ::= PrimitiveType ;
 OrphanType ::= name::String proxy::Boolean ;
--------------------java::java-5-landman.bgf--------------------
BlockStm ::= Stm ;
 BlockStm ::= [classDecStm] ClassDec ;
 BlockStm ::= LocalVarDecStm ;
DimExpr ::= [dim] "[" Expr "]" ;
ImportDec ::= [typeImportOnDemandDec] "import" PackageName "." "*" ";" ;
 ImportDec ::= [typeImportDec] "import" TypeName ";" ;
 ImportDec ::= [staticImportDec] "import" "static" TypeName "." Id ";" ;
 ImportDec ::= [staticImportOnDemandDec] "import" "static" TypeName "." "*" ";" ;
ArrayAccess ::= [arrayAccess] ArraySubscript ;
PackageDec ::= [packageDec] Anno* "package" PackageName ";" ;
VarDec ::= [varDec] VarDecId "=" VarInit ;
 VarDec ::= [varDec] VarDecId ;
VarMod ::= "final" ;
ClassOrInterfaceType ::= [classOrInterfaceType] TypeDecSpec TypeArgs? ;
VarDecId ::= Id ;
 VarDecId ::= [arrayVarDecId] Id Dim+ ;
ConstrDec ::= [constrDec] ConstrHead ConstrBody ;
ConstrMod ::= "protected" ;
 ConstrMod ::= "private" ;
 ConstrMod ::= "public" ;
InterfaceType ::= [interfaceType] TypeDecSpec TypeArgs? ;
ElemVal ::= [elemValArrayInit] "{" {ElemVal ","}* "}" ;
 ElemVal ::= Expr ;
 ElemVal ::= Anno ;
 ElemVal ::= [elemValArrayInit] "{" {ElemVal ","}* "," "}" ;
InterfaceMemberDec ::= [semicolon] ";" ;
 InterfaceMemberDec ::= InterfaceDec ;
 InterfaceMemberDec ::= AbstractMethodDec ;
 InterfaceMemberDec ::= ClassDec ;
 InterfaceMemberDec ::= ConstantDec ;
TypeVar ::= [typeVar] TypeVarId ;
ElemValPair ::= [elemValPair] Id "=" ;
CatchClause ::= [catch] "catch" "(" FormalParam ")" Block ;
ArrayInit ::= [arrayInit] "{" {VarInit ","}* "," "}" ;
 ArrayInit ::= [arrayInit] "{" {VarInit ","}* "}" ;
TypeVarId ::= Id ;
InstanceInit ::= [instanceInit] Block ;
EnumBody ::= [enumBody] "{" {EnumConst ","}* EnumBodyDecs? "}" ;
 EnumBody ::= [enumBody] "{" {EnumConst ","}* "," EnumBodyDecs? "}" ;
ConstrInv ::= [qSuperConstrInv] Expr "." TypeArgs? "super" "(" {Expr ","}* ")" ";" ;
 ConstrInv ::= [superConstrInv] TypeArgs? "super" "(" {Expr ","}* ")" ";" ;
 ConstrInv ::= [altConstrInv] TypeArgs? "this" "(" {Expr ","}* ")" ";" ;
IntLiteral ::= [octa] ε ;
 IntLiteral ::= [hexa] ε ;
 IntLiteral ::= [deci] ε ;
FieldAccess ::= [qSuperField] TypeName "." "super" "." Id ;
 FieldAccess ::= [field] "." Id ;
 FieldAccess ::= [superField] "super" "." Id ;
MethodSpec ::= [method] MethodName ;
 MethodSpec ::= [superMethod] "super" "." TypeArgs? Id ;
 MethodSpec ::= [genericMethod] AmbName "." TypeArgs Id ;
 MethodSpec ::= [qSuperMethod] TypeName "." "super" "." TypeArgs? Id ;
 MethodSpec ::= [method] "." TypeArgs? Id ;
CharLiteral ::= ε ;
LHS ::= ExprName ;
 LHS ::= ε ;
TypeArgs ::= [typeArgs] "<" {ActualTypeArg ","}+ ">" ;
AnnoDecHead ::= [annoDecHead] "@" "interface" Id ;
TypeParam ::= [typeParam] TypeVarId TypeBound? ;
FloatLiteral ::= [float] ε ;
ArraySubscript ::= "[" Expr "]" ;
PackageName ::= [packageName] {Id "."}+ ;
ConstrBody ::= [constrBody] "{" ConstrInv? BlockStm* "}" ;
RefType ::= ClassOrInterfaceType ;
 RefType ::= ArrayType ;
ArrayCreationExpr ::= [newArray] "new" ArrayBaseType DimExpr+ ;
 ArrayCreationExpr ::= [newArray] "new" ArrayBaseType ArrayInit ;
TypeDec ::= InterfaceDec ;
 TypeDec ::= ClassDec ;
 TypeDec ::= [semicolon] ";" ;
FieldDec ::= [fieldDec] Type {VarDec ","}+ ";" ;
FieldMod ::= "public" ;
 FieldMod ::= "static" ;
 FieldMod ::= "transient" ;
 FieldMod ::= "final" ;
 FieldMod ::= "volatile" ;
 FieldMod ::= "private" ;
 FieldMod ::= "protected" ;
CompilationUnit ::= [compilationUnit] PackageDec? ImportDec* TypeDec* ;
LocalVarDecStm ::= [localVarDecStm] LocalVarDec ";" ;
BoolLiteral ::= [false] "false" ;
 BoolLiteral ::= [true] "true" ;
AnnoElemDec ::= EnumDec ;
 AnnoElemDec ::= [semicolon] ";" ;
 AnnoElemDec ::= ClassDec ;
 AnnoElemDec ::= ConstantDec ;
 AnnoElemDec ::= InterfaceDec ;
 AnnoElemDec ::= [annoMethodDec] AbstractMethodMod* Type Id "(" ")" DefaultVal? ";" ;
TypeBound ::= [typeBound] "extends" {ClassOrInterfaceType "&"}+ ;
MethodBody ::= [noMethodBody] ";" ;
 MethodBody ::= Block ;
EnumConst ::= [enumConst] Id EnumConstArgs? ClassBody? ;
MethodMod ::= "final" ;
 MethodMod ::= "strictfp" ;
 MethodMod ::= "synchronized" ;
 MethodMod ::= "protected" ;
 MethodMod ::= "private" ;
 MethodMod ::= "static" ;
 MethodMod ::= "public" ;
 MethodMod ::= "abstract" ;
 MethodMod ::= "native" ;
AmbName ::= [ambName] AmbName "." Id ;
 AmbName ::= [ambName] Id ;
MethodDec ::= [methodDec] MethodDecHead MethodBody ;
MethodDecHead ::= [deprMethodDecHead] TypeParams? ResultType Id "(" {FormalParam ","}* ")" Dim+ Throws? ;
 MethodDecHead ::= [methodDecHead] TypeParams? ResultType Id "(" {FormalParam ","}* ")" Throws? ;
DefaultVal ::= [defaultVal] "default" ;
ExprName ::= [exprName] Id ;
 ExprName ::= [exprName] AmbName "." Id ;
NumType ::= FloatType ;
 NumType ::= IntType ;
AbstractMethodDec ::= [abstractMethodDec] TypeParams? ResultType Id "(" {FormalParam ","}* ")" Throws? ";" ;
 AbstractMethodDec ::= [deprAbstractMethodDec] TypeParams? ResultType Id "(" {FormalParam ","}* ")" Dim+ Throws? ";" ;
AbstractMethodMod ::= "abstract" ;
 AbstractMethodMod ::= "public" ;
EnumConstArgs ::= "(" {Expr ","}* ")" ;
StringLiteral ::= ε ;
StaticInit ::= [staticInit] "static" Block ;
FormalParam ::= [varArityParam] Type "..." VarDecId ;
 FormalParam ::= [param] Type VarDecId ;
ClassLiteral ::= [voidClass] "void" "." "class" ;
 ClassLiteral ::= [class] Type "." "class" ;
VarInit ::= Expr ;
 VarInit ::= ArrayInit ;
EnumBodyDecs ::= [enumBodyDecs] ";" ClassBodyDec* ;
ExtendsInterfaces ::= [extendsInterfaces] "extends" {InterfaceType ","}+ ;
ClassType ::= [classType] TypeDecSpec TypeArgs? ;
ActualTypeArg ::= Type ;
 ActualTypeArg ::= [wildcard] "?" WildcardBound? ;
PackageOrTypeName ::= [packageOrTypeName] Id ;
 PackageOrTypeName ::= [packageOrTypeName] PackageOrTypeName "." Id ;
MethodName ::= [methodName] AmbName "." Id ;
 MethodName ::= [methodName] Id ;
InterfaceMod ::= "public" ;
 InterfaceMod ::= "static" ;
 InterfaceMod ::= "abstract" ;
 InterfaceMod ::= "strictfp" ;
 InterfaceMod ::= "protected" ;
 InterfaceMod ::= "private" ;
InterfaceDec ::= InterfaceDecHead "{" InterfaceMemberDec* "}" ;
 InterfaceDec ::= AnnoDecHead "{" AnnoElemDec* "}" ;
IntType ::= [int] "int" ;
 IntType ::= [byte] "byte" ;
 IntType ::= [long] "long" ;
 IntType ::= [short] "short" ;
 IntType ::= [char] "char" ;
InterfaceDecHead ::= [interfaceDecHead] "interface" Id TypeParams? ExtendsInterfaces? ;
CondMid ::= "?" Expr ":" ;
WildcardBound ::= [wildcardUpperBound] "extends" RefType ;
 WildcardBound ::= [wildcardLowerBound] "super" RefType ;
TypeDecSpec ::= TypeName ;
 TypeDecSpec ::= [member] TypeDecSpec TypeArgs "." Id ;
EnumDec ::= [enumDec] EnumDecHead EnumBody ;
EnumDecHead ::= [enumDecHead] "enum" Id Interfaces? ;
PrimType ::= NumType ;
 PrimType ::= [boolean] "boolean" ;
ConstantDec ::= [constantDec] Type {VarDec ","}+ ";" ;
ConstantMod ::= "static" ;
 ConstantMod ::= "public" ;
 ConstantMod ::= "final" ;
ClassBody ::= [classBody] "{" ClassBodyDec* "}" ;
SwitchBlock ::= [switchBlock] "{" SwitchGroup* SwitchLabel* "}" ;
ResultType ::= Type ;
 ResultType ::= [void] "void" ;
FloatType ::= [double] "double" ;
 FloatType ::= [float] "float" ;
ArrayType ::= [arrayType] Type "[" "]" ;
ClassMemberDec ::= ClassDec ;
 ClassMemberDec ::= MethodDec ;
 ClassMemberDec ::= FieldDec ;
 ClassMemberDec ::= [semicolon] ";" ;
 ClassMemberDec ::= InterfaceDec ;
ConstrHead ::= [constrDecHead] TypeParams? Id "(" {FormalParam ","}* ")" Throws? ;
SwitchGroup ::= [switchGroup] SwitchLabel+ BlockStm+ ;
ClassDec ::= EnumDec ;
 ClassDec ::= [classDec] ClassDecHead ClassBody ;
ClassDecHead ::= [classDecHead] "class" Id TypeParams? Super? Interfaces? ;
ClassMod ::= "abstract" ;
 ClassMod ::= "static" ;
 ClassMod ::= "public" ;
 ClassMod ::= "strictfp" ;
 ClassMod ::= "final" ;
 ClassMod ::= "private" ;
 ClassMod ::= "protected" ;
ExceptionType ::= ClassType ;
NullLiteral ::= [null] "null" ;
ClassBodyDec ::= ClassMemberDec ;
 ClassBodyDec ::= StaticInit ;
 ClassBodyDec ::= ConstrDec ;
 ClassBodyDec ::= InstanceInit ;
LocalVarDec ::= [localVarDec] Type {VarDec ","}+ ;
TypeName ::= [typeName] PackageOrTypeName "." Id ;
 TypeName ::= [typeName] Id ;
ArrayBaseType ::= TypeName ;
 ArrayBaseType ::= PrimType ;
 ArrayBaseType ::= [unboundWld] TypeName "<" "?" ">" ;
SwitchLabel ::= [case] "case" Expr ":" ;
 SwitchLabel ::= [default] "default" ":" ;
TypeParams ::= [typeParams] "<" {TypeParam ","}+ ">" ;
--------------------java::jvm-level1.bgf--------------------
ClassModifier ::= (access::(access::AccessModifier)) | (final::ε) | (super::ε) | (interface::ε) | (abstract::ε) | (synthetic::ε) | (annotation::ε) | (enum::ε) | (deprecated::ε) ;
TypeSignature ::= (primitive::(type::PrimitiveTypeDescriptor)) | (fieldType::(sig::FieldTypeSignature)) ;
TryCatchBlock ::= (tryCatchBlock::(startLabelIndex::integer() endLabelIndex::integer() handlerLabelIndex::integer() type::string())) | (finallyBlock::(startLabelIndex::integer() endLabelIndex::integer() handlerLabelIndex::integer())) ;
TypeArg ::= (type::(fieldType::FieldTypeSignature)) | (wildcard::ε) | (extends::(fieldType::FieldTypeSignature)) | (super::(fieldType::FieldTypeSignature)) ;
AccessModifier ::= (public::ε) | (private::ε) | (protected::ε) ;
MethodDescription ::= methodDescriptor::(arguments::(TypeDescriptor*) returnType::TypeDescriptor) ;
TypeDescriptor ::= (primitive::(type::PrimitiveTypeDescriptor)) | (object::(internalName::string())) | (array::(type::TypeDescriptor)) ;
MethodModifier ::= (access::(access::AccessModifier)) | (static::ε) | (final::ε) | (synchronized::ε) | (bridge::ε) | (varags::ε) | (native::ε) | (abstract::ε) | (strict::ε) | (synthetic::ε) ;
LocalVariable ::= localVariable::(name::string() description::string() signature::string() startLabelIndex::integer() endLabelIndex::integer() index::integer()) ;
ClassTypeSignature ::= (topLevel::(internalName::string() args::(TypeArg*))) | (inner::(class::ClassTypeSignature name::string() args::(TypeArg*))) ;
FieldTypeSignature ::= (classType::(class::ClassTypeSignature)) | (array::(type::TypeSignature)) | (typeVar::(name::string())) ;
InnerClass ::= (innerClass::(name::string() outerName::string() innerName::string() modifiers::(ClassModifier*))) | (innerClass::(name::string() modifiers::(ClassModifier*))) ;
FieldModifier ::= (access::(access::AccessModifier)) | (static::ε) | (final::ε) | (volatile::ε) | (transient::ε) | (synthetic::ε) | (enum::ε) ;
PrimitiveTypeDescriptor ::= (boolean::ε) | (char::ε) | (byte::ε) | (short::ε) | (int::ε) | (float::ε) | (long::ε) | (double::ε) ;
--------------------modula::sdf.bgf--------------------
EnumType ::= "{" IdList? "}" ;
WhileStmt ::= "WHILE" Expr "DO" Stmts "END" ;
ExceptionDecl ::= Id ("(" Type ")")? ;
ObjectType ::= Ancestor? Brand? "OBJECT" Fields ("METHODS" Methods)? ("OVERRIDES" Overrides)? "END" ;
IdList ::= Id ("," Id)* ;
ReturnStmt ::= "RETURN" Expr? ;
CaseStmt ::= "CASE" Expr "OF" "|"? Case ("|" Case)* ("ELSE" Stmts)? "END" ;
ImportItem ::= Id | (Id "AS" Id) ;
SubrangeType ::= "[" Expr ".." Expr "]" ;
AssignStmt ::= Expr ":=" Expr ;
TypeLiteral ::= ArrayType | PackedType | EnumType | ObjectType | ProcedureType | RecordType | RefType | SetType | SubrangeType | ("(" Type ")") | TypeName ;
RaiseStmt ::= "RAISE" QualId ("(" Expr ")")? ;
ProcedureHead ::= "PROCEDURE" Id Signature ;
LockStmt ::= "LOCK" Expr "DO" Stmts "END" ;
GenMod ::= "GENERIC" "MODULE" Id GenFmls ";" Import* Block Id "." ;
PackedType ::= "BITS" Expr "FOR" Type ;
LoopStmt ::= "LOOP" Stmts "END" ;
QualId ::= Id ("." Id)? ;
ExitStmt ::= "EXIT" ;
CallStmt ::= Expr "(" (Actual ("," Actual)*)? ")" ;
VariableDecl ::= (IdList ":" Type ":=" Expr) | (IdList ":" Type) | (IdList ":=" Expr) ;
IfStmt ::= "IF" Expr "THEN" Stmts ("ELSIF" Expr "THEN" Stmts)* ("ELSE" Stmts)? "END" ;
TCase ::= Type ("," Type)* ("(" Id ")")? "=>" Stmts ;
EvalStmt ::= "EVAL" Expr ;
TypeDecl ::= Id "=" | "<:" Type ;
RepeatStmt ::= "REPEAT" Stmts "UNTIL" Expr ;
GenFmls ::= "(" IdList? ")" ;
AnyCons ::= Elt ("," Elt)* ("," "..")? ;
SetType ::= "SET" "OF" Type ;
TryFinStmt ::= "TRY" Stmts "FINALLY" Stmts "END" ;
AsImport ::= "IMPORT" ImportItem ("," ImportItem)* ";" ;
ArrayType ::= "ARRAY" (Type ("," Type)*)? "OF" Type ;
GenInf ::= "GENERIC" "INTERFACE" Id GenFmls ";" Import* Decl* "END" Id "." ;
ForStmt ::= "FOR" Id ":=" Expr "TO" Expr ("BY" Expr)? "DO" Stmts "END" ;
FromImport ::= "FROM" Id "IMPORT" IdList ";" ;
WithStmt ::= "WITH" Binding ("," Binding)* "DO" Stmts "END" ;
ProcedureType ::= "PROCEDURE" Signature ;
RefType ::= "UNTRACED"? Brand? "REF" Type ;
ConstDecl ::= Id (":" Type)? "=" Expr ;
TCaseStmt ::= "TYPECASE" Expr "OF" "|"? TCase ("|" TCase)* ("ELSE" Stmts)? "END" ;
RecordType ::= "RECORD" Fields "END" ;
GenActls ::= "(" IdList? ")" ;
TryXptStmt ::= "TRY" Stmts "EXCEPT" "|"? Handler ("|" Handler)* ("ELSE" Stmts)? "END" ;
TypeName ::= "ROOT" | ("UNTRACED" "ROOT") ;
--------------------modula::src-052.bgf--------------------
RecordElt ::= (Ident ":=")? Expr ;
EnumType ::= "{" IDList? "}" ;
ObjectType ::= Ancestor? Brand? "OBJECT" Fields ("METHODS" Methods)? "END" ;
WhileStmt ::= "WHILE" Expt "DO" Stmts "END" ;
ExceptionDecl ::= Ident ("(" Type ")")? ;
ReturnStmt ::= "RETURN" Expr? ;
CaseStmt ::= "CASE" Expr "OF" Case? ("|" Case)* ("ELSE" Stmts)? "END" ;
SubrangeType ::= "[" ConstExpr ".." ConstExpr "]" ;
AssignStmt ::= Expr ":=" Expr ;
RaiseStmt ::= "RAISE" ExceptionID ("(" Expr ")")? ;
LockStmt ::= "LOCK" Expr "DO" Stmts "END" ;
ProcedureHead ::= "PROCEDURE" Ident Signature ;
HexDigit ::= Digit | "A" | "B" | "C" | "D" | "E" | "F" | "a" | "b" | "c" | "d" | "e" | "f" ;
PackedType ::= "BITS" ConstExpr "FOR" Type ;
LoopStmt ::= "LOOP" Stmts "END" ;
PrintingChar ::= Letter | Digit | UtherChar ;
OtherChar ::= " " | "!" | "#" | "$" | "%" | "&" | "(" | ")" | "*" | "+" | "," | "-" | "." | "/" | ":" | ";" | "<" | "=" | ">" | "?" | "@" | "[" | "]" | "^" | "_" | "‘" | "{" | "|" | "}" | "~" | ExtendedChar ;
ExitStmt ::= "EXIT" ;
CallStmt ::= Expr "(" (Actual ("," Actual)*)? ")" ;
VariableDecl ::= IDList ":" Type "&" ":=" Expr ;
IfStmt ::= "IF" Expr "THEN" Stmts ("ELSIF" Expt "THEN" Stmts)* ("ELSE" Stmts)? "END" ;
EvalStmt ::= "EVAL" Expr ;
TypeDecl ::= Ident "=" | "<:" Type ;
TextLiteral ::= """ (PrintingChar | Escape)* """ ;
SetType ::= "SET" "OF" Type ;
CharLiteral ::= "’" PrintingChar | Escape "’" ;
IDList ::= Ident ("," Ident)* ;
TryFinStmt ::= "TRY" Stmts "FINALLY" Stmts "END" ;
ConstExpr ::= Expr ;
SetCons ::= SetElt ("." SetElt)* ;
E8 ::= Ident | Number | CharLiteral | TextLiteral | Constructor | ("(" Expr ")") ;
ArrayType ::= "ARRAY" (Type ("," Type)*)? "OF" Type ;
E7 ::= E8 Selector* ;
E6 ::= ("+" | "-")* E7 ;
ForStmt ::= "FOR" Ident ":=" Expt "TO" Expr ("BY" Expr)? "DO" Stmts "END" ;
E5 ::= E6 (Mulop E6)* ;
ExtendedChar ::= " " | "¡" | "¢" | "£" | "¤" | "¥" | "¦" | "§" | "¨" | "©" | "ª" | "«" | "¬" | "­" | "®" | "¯" | "°" | "±" | "²" | "³" | "´" | "µ" | "¶" | "·" | "¸" | "¹" | "º" | "»" | "¼" | "½" | "¾" | "¿" | "À" | "Á" | "Â" | "Ã" | "Ä" | "Å" | "Æ" | "Ç" | "È" | "É" | "Ê" | "Ë" | "Ì" | "Í" | "Î" | "Ï" | "Ð" | "Ñ" | "Ò" | "Ó" | "Ô" | "Õ" | "Ö" | "×" | "Ø" | "Ù" | "Ú" | "Û" | "Ü" | "Ý" | "Þ" | "ß" | "à" | "á" | "â" | "ã" | "ä" | "å" | "æ" | "ç" | "è" | "é" | "ê" | "ë" | "ì" | "í" | "î" | "ï" | "ð" | "ñ" | "ò" | "ó" | "ô" | "õ" | "ö" | "÷" | "ø" | "ù" | "ú" | "û" | "ü" | "ý" | "þ" | "ÿ" ;
E4 ::= E5 (Addop E5)* ;
ProcedureID ::= Ident ("." Ident)? ;
E3 ::= E4 (Relop E4)* ;
WithStmt ::= "WITH" Binding ("," Binding)* "DO" Stmts "END" ;
E2 ::= "NOT"* E3 ;
RefType ::= "UNTRACED"? Brand? "REF" Type ;
ProcedureType ::= "PROCEDURE" Signature ;
ConstDecl ::= Ident (":" Type)? "=" ConstExpr ;
TCaseStmt ::= "TYPECASE" Expr "OF" Tcase? ("|" Tcase)* ("ELSE" Stmts)? "END" ;
E1 ::= E2 ("AND" E2)* ;
SetElt ::= Expr (".." Expr)? ;
RecordType ::= "RECORD" Fields "END" ;
ExceptionID ::= Ident ("." Ident)? ;
ArrayCons ::= Expr ("," Expr)* ("," "..")? ;
TryXptStmt ::= "TRY" Stmts "EXCEPT" Handler? ("|" Handler)* ("ELSE" Stmts)? "END" ;
TypeName ::= (Ident ("." Ident)?) | "ROOT" | ("UNTRACED" "ROOT") ;
OctalDigit ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" ;
RecordCons ::= RecordElt ("," RecordElt)* ;
--------------------modula::dagenais-cordy.bgf--------------------
RecordElt ::= Expr EqualExpr? ;
IdList ::= {id ","}* ;
WhileStmt ::= "WHILE" Expr "DO" Stmts "END" ;
ExceptionDecl ::= id ParenthesizedType? ";" NL ;
ImportItem ::= id AsId? ;
DotDotConstExpr ::= ".." ConstExpr ;
SubrangeType ::= "[" ConstExpr ".." ConstExpr "]" ;
AssignStmt ::= Expr ":=" Expr ;
MulOpE6 ::= MulOp E6 ;
ParenthesizedType ::= "(" Type ")" ;
DotDotExpr ::= ".." Expr ;
TypecaseStmt ::= "TYPECASE" Expr "OF" NL TCase? VerticalTCase* ElseStmts? "END" ;
PackedType ::= "BITS" ConstExpr "FOR" Type ;
IInterface ::= "UNSAFE"? "INTERFACE" id "=" id GenActls "END" id "." NL ;
QualId ::= id DotId? ;
ExceptOrFinally ::= ("EXCEPT" NL Handler? VerticalHandler* ElseStmts?) | ("FINALLY" Stmts) ;
VerticalCase ::= "|" Case ;
CallStmt ::= Expr "(" {Actual ","}* ")" ;
VariableDecl ::= IdList ColonType? EqualExpr? ";" NL ;
RaisesList ::= ("{" {QualId ","}* "}") | "ANY" ;
SemicolonFormal ::= ";" Formal ;
GenFmls ::= "(" IdList? ")" ;
SemiColonOverride ::= ";" NL Override ;
SemiColonStmt ::= ";" NL Stmt ;
EqualBlock ::= "=" IN NL Block id EX ;
ConstExpr ::= Expr ;
OptStmts ::= Stmt SemiColonStmt* ";"? NL ;
ParenthesizedId ::= "(" id ")" ;
TheOverrides ::= "OVERRIDES" NL Overrides ;
VerticalHandler ::= "|" Handler ;
AddOpE5 ::= AddOp E5 ;
ElseStmts ::= "ELSE" Stmts ;
OrE1 ::= "OR" E1 ;
WithStmt ::= "WITH" Binding+ "DO" Stmts "END" ;
VerticalTCase ::= "|" TCase ;
RefType ::= "UNTRACED"? Brand? "REF" Type ;
RecordType ::= "RECORD" IN NL Fields "END" EX ;
RelOpE4 ::= RelOp E4 ;
GenActls ::= "(" IdList? ")" ;
EqualConstExpr ::= ":=" ConstExpr ;
RecordCons ::= {RecordElt ","}* ;
AddOp ::= "+" | "-" | "&" ;
MethodList ::= IN Method SemiColonMethod* ";"? EX NL ;
RelOp ::= "=" | "#" | "<" | "<=" | ">" | ">=" | "IN" ;
ObjectType ::= ObjectOrTypeName? Brand? "OBJECT" IN NL Fields TheMethods? TheOverrides? "END" EX ;
ReturnStmt ::= "RETURN" Expr? ;
CaseStmt ::= "CASE" Expr "OF" NL Case? VerticalCase* ElseStmts? "END" ;
RevealDecl ::= (QualId "=" Type ";" NL) | (QualId "<:" Type ";" NL) ;
ComaExpr ::= "," Expr ;
RaiseStmt ::= "RAISE" QualId ParenthesizedExpr? ;
LockStmt ::= "LOCK" Expr "DO" Stmts "END" ;
ProcedureHead ::= "PROCEDURE" id Signature ;
SemiColonMethod ::= ";" NL Method ;
GInterface ::= "GENERIC" "INTERFACE" id GenFmls ";" Import* Decl* NL "END" id "." NL ;
ParenthesizedExpr ::= "(" Expr ")" ;
LoopStmt ::= "LOOP" Stmts "END" ;
OverrideList ::= IN Override SemiColonOverride* ";"? EX NL ;
EqualExpr ::= ":=" Expr ;
ObjectOrTypeName ::= TypeName | ObjectType ;
ExitStmt ::= "EXIT" ;
MulOp ::= "*" | "/" | "DIV" | "MOD" ;
IfStmt ::= "IF" Expr "THEN" Stmts Elsif* ElseStmts? "END" ;
DotId ::= "." id ;
TCase ::= {Type ","}* ParenthesizedId? "=>" Stmts ;
EvalStmt ::= "EVAL" Expr ;
TypeDecl ::= (id "=" Type ";" NL) | (id "<:" Type ";" NL) ;
RepeatStmt ::= "REPEAT" Stmts "UNTIL" Expr ;
TheMethods ::= "METHODS" NL Methods ;
SignOp ::= "+" | "-" ;
AnyCons ::= SetCons | RecordCons | ArrayCons ;
SetType ::= "SET" "OF" Type ;
ColonType ::= ":" Type ;
FieldList ::= IN Field SemiColonField* ";"? EX NL ;
ComaImportItem ::= "," ImportItem ;
AsImport ::= "IMPORT" ImportItem ComaImportItem* ";" NL NL ;
IModule ::= "UNSAFE"? "MODULE" id Exports? "=" id GenActls "END" id "." NL ;
SetCons ::= {SetElt ","}* ;
E8 ::= id | Number | charlit | stringlit | ("(" Expr ")") | Constructor ;
ArrayType ::= "ARRAY" {Type ","}* "OF" Type ;
GModule ::= "GENERIC" "MODULE" id GenFmls ";" NL NL Import* Block id "." NL ;
E7 ::= E8 Selector* ;
E6 ::= SignOp* E7 ;
ForStmt ::= "FOR" id ":=" Expr "TO" Expr ByExpr? "DO" Stmts "END" ;
E5 ::= E6 MulOpE6* ;
E4 ::= E5 AddOpE5* ;
FromImport ::= "FROM" id "IMPORT" IdList ";" NL NL ;
E3 ::= E4 RelOpE4* ;
E2 ::= "NOT"* E3 ;
ProcedureType ::= "PROCEDURE" Signature ;
ConstDecl ::= id ColonType? "=" ConstExpr ";" NL ;
AsId ::= "AS" id ;
E1 ::= E2 AndE2* ;
ByExpr ::= "BY" Expr ;
SetElt ::= Expr DotDotExpr? ;
ArrayCons ::= {Expr ","}* ComaDotDot? ;
SemiColonField ::= ";" NL Field ;
TypeName ::= QualId | "ROOT" | ("UNTRACED" "ROOT") ;
AndE2 ::= "AND" E2 ;
TryStmt ::= "TRY" Stmts ExceptOrFinally "END" ;
EnumerationType ::= "{" IdList? "}" ;
ComaDotDot ::= "," ".." ;
--------------------xpath::w3c-xpath1.bgf--------------------
AbbreviatedRelativeLocationPath ::= [NT-AbbreviatedRelativeLocationPath] RelativeLocationPath "//" Step ;
NameTest ::= [NT-NameTest] "*" | (NCName ":" "*") | QName ;
AxisSpecifier ::= [NT-AxisSpecifier] (AxisName "::") | AbbreviatedAxisSpecifier ;
NodeType ::= [NT-NodeType] "comment" | "text" | "processing-instruction" | "node" ;
RelationalExpr ::= [NT-RelationalExpr] AdditiveExpr | (RelationalExpr "<" AdditiveExpr) | (RelationalExpr ">" AdditiveExpr) | (RelationalExpr "<=" AdditiveExpr) | (RelationalExpr ">=" AdditiveExpr) ;
PathExpr ::= [NT-PathExpr] LocationPath | FilterExpr | (FilterExpr "/" RelativeLocationPath) | (FilterExpr "//" RelativeLocationPath) ;
LocationPath ::= [NT-LocationPath] RelativeLocationPath | AbsoluteLocationPath ;
OrExpr ::= [NT-OrExpr] AndExpr | (OrExpr "or" AndExpr) ;
PrimaryExpr ::= [NT-PrimaryExpr] VariableReference | ("(" Expr ")") | Literal | Number | FunctionCall ;
FunctionCall ::= [NT-FunctionCall] FunctionName "(" (Argument ("," Argument)*)? ")" ;
NodeTest ::= [NT-NodeTest] NameTest | (NodeType "(" ")") | ("processing-instruction" "(" Literal ")") ;
ExprWhitespace ::= [NT-ExprWhitespace] S ;
AbsoluteLocationPath ::= [NT-AbsoluteLocationPath] ("/" RelativeLocationPath?) | AbbreviatedAbsoluteLocationPath ;
VariableReference ::= [NT-VariableReference] "$" QName ;
OperatorName ::= [NT-OperatorName] "and" | "or" | "mod" | "div" ;
EqualityExpr ::= [NT-EqualityExpr] RelationalExpr | (EqualityExpr "=" RelationalExpr) | (EqualityExpr "!=" RelationalExpr) ;
FilterExpr ::= [NT-FilterExpr] PrimaryExpr | (FilterExpr Predicate) ;
AndExpr ::= [NT-AndExpr] EqualityExpr | (AndExpr "and" EqualityExpr) ;
PredicateExpr ::= [NT-PredicateExpr] Expr ;
AxisName ::= [NT-AxisName] "ancestor" | "ancestor-or-self" | "attribute" | "child" | "descendant" | "descendant-or-self" | "following" | "following-sibling" | "namespace" | "parent" | "preceding" | "preceding-sibling" | "self" ;
MultiplicativeExpr ::= [NT-MultiplicativeExpr] UnaryExpr | (MultiplicativeExpr MultiplyOperator UnaryExpr) | (MultiplicativeExpr "div" UnaryExpr) | (MultiplicativeExpr "mod" UnaryExpr) ;
AbbreviatedAbsoluteLocationPath ::= [NT-AbbreviatedAbsoluteLocationPath] "//" RelativeLocationPath ;
MultiplyOperator ::= [NT-MultiplyOperator] "*" ;
RelativeLocationPath ::= [NT-RelativeLocationPath] Step | (RelativeLocationPath "/" Step) | AbbreviatedRelativeLocationPath ;
AbbreviatedStep ::= [NT-AbbreviatedStep] "." | ".." ;
ExprToken ::= [NT-ExprToken] "(" | ")" | "[" | "]" | "." | ".." | "@" | "," | "::" | NameTest | NodeType | Operator | FunctionName | AxisName | Literal | Number | VariableReference ;
UnaryExpr ::= [NT-UnaryExpr] UnionExpr | ("-" UnaryExpr) ;
AbbreviatedAxisSpecifier ::= [NT-AbbreviatedAxisSpecifier] "@"? ;
UnionExpr ::= [NT-UnionExpr] PathExpr | (UnionExpr "|" PathExpr) ;
AdditiveExpr ::= [NT-AdditiveExpr] MultiplicativeExpr | (AdditiveExpr "+" MultiplicativeExpr) | (AdditiveExpr "-" MultiplicativeExpr) ;
--------------------assembly::delphi.bgf--------------------
asm_opcode_prefix ::= "lock" space? ;
asm_primary ::= ("[" asm_expr "]") | ("(" asm_expr ")") | asm_register | id | anynumber | charlit | stringlit | asmhex | (SP asmlabel) ;
segmt_overr ::= SPOFF ":" asm_expr SPON ;
asm_expr ::= asm_term asm_infix_expr* ;
asmlabel_colon ::= asmlabel colon ;
asm_prefixop ::= "high" | "low" | "offset" | "dmtindex" | "vmtoffset" | "type" | "not" | "&" | sign | "@" ;
asm_unlabeledstm_semi ::= asm_unlabeledstm ";"? NL ;
asm_unlabeledstm ::= (asm_directive {asm_directive_arg ","}*) | (asm_opcode_prefix? asm_opcode {asm_expr ","}*) ;
asm_postfixop ::= ("[" asm_expr "]") | ("." asm_expr) ;
asm_opcode ::= "adc" | "add" | "and" | "bswap" | "bt" | "btr" | "bts" | "call" | "cdq" | "cld" | "cmp" | "dec" | "div" | "f2xm1" | "fabs" | "fadd" | "faddp" | "fbstp" | "fchs" | "fclex" | "fcom" | "fcomp" | "fcos" | "fdiv" | "fdivp" | "fdivrp" | "ffree" | "fiadd" | "fidiv" | "fild" | "fimul" | "fistp" | "fld" | "fld1" | "fldcw" | "fldl2e" | "fldlg2" | "fldln2" | "fldz" | "fmul" | "fmulp" | "fnclex" | "fninit" | "fnstcw" | "fnstsw" | "fpatan" | "fprem" | "fptan" | "frndint" | "fscale" | "fsin" | "fsincos" | "fsqrt" | "fstcw" | "fstp" | "fstsw" | "fsub" | "fsubp" | "fsubr" | "fwait" | "fxch" | "fxtract" | "fyl2x" | "fyl2xp1" | "imul" | "inc" | "int" | "ja" | "jae" | "jb" | "jbe" | "jc" | "je" | "jecxz" | "jg" | "jge" | "jl" | "jle" | "jmp" | "jnc" | "jne" | "jnl" | "jns" | "jnz" | "jo" | "jp" | "js" | "jz" | "lea" | "leave" | "lodsb" | "lodsw" | "loop" | "mov" | "movsb" | "movsx" | "movzx" | "mul" | "neg" | "not" | "or" | "pop" | "popfd" | "push" | "pushfd" | "rcl" | "rcr" | "rep" | "repe" | "repne" | "ret" | "rol" | "ror" | "sahf" | "sar" | "sbb" | "seto" | "shl" | "shld" | "shr" | "shrd" | "std" | "stosb" | "stosd" | "stosw" | "sub" | "test" | "wait" | "xadd" | "xchg" | "xor" ;
asm_term ::= asm_prefixop* asm_primary asm_postfixop* ;
procedure_body ::= asm_stmtblock ;
asm_infixop ::= "." | "+" | "-" | "*" | "/" | "ptr" | "mod" | "xor" | "and" | "or" | "shr" | "shl" ;
asm_directive ::= "DB" | "DW" | "DD" | "DQ" ;
asm_infix_expr ::= asm_infixop asm_term ;
asm_stm ::= asmlabel_colon? asm_unlabeledstm_semi? ;
unlabeled_stm ::= asm_stmtblock ;
asm_register ::= ("ST" "(" integernumber ")") | ("ST") | "FS" | ("GS") | "EAX" | "EBX" | "ECX" | ("EDX") | "ESP" | "EBP" | "ESI" | ("EDI") | "AX" | "BX" | "CX" | ("DX") | "SP" | "BP" | "SI" | ("DI") | "AL" | "BL" | "CL" | ("DL") | "CS" | "DS" | "SS" | ("ES") | "AH" | "BH" | "CH" | ("DH") | ("CS" segmt_overr?) | ("DS" segmt_overr?) | ("SS" segmt_overr?) | ("FS" segmt_overr?) | ("GS" segmt_overr?) | ("ES" segmt_overr?) ;
asm_directive_arg ::= charlit | (sign? anynumber) | asm_expr ;
asm_stmtblock ::= "asm" asm_stm* end_struct ;
--------------------basic::vb6-cordy.bgf--------------------
subprogram_declaration ::= access_modifier? "static"? sub_or_function id lib_description? subprogram_argument_description? as_type? eol IN sub_scope EX "end" sub_or_function ;
short_for_next_statement ::= "for" id "=" expn to_or_downto expn step_clause? colon_declaration_or_statement* ":" "next" id? ;
event_argument_list ::= "(" event_argument+ ")" ;
error_statement ::= "error" expn ;
chdir_statement ::= "chdir" filepath ;
property_argument_list ::= "(" {property_argument ","}* ")" ;
deletesetting_statement ::= "deletesetting" expn+ ;
chdrive_statement ::= "chdrive" drive ;
type_declaration ::= access_modifier? "type" id eol IN type_member_definition* EX "end" "type" ;
short_else_clause ::= "else" single_declaration_or_statement ;
line_input_statement ::= "line" "input" filenumber "," reference ;
single_var_description ::= id initial_value? as_type? ;
optional_subscript ::= (expn to_expn?) | (SP ε) ;
close_statement ::= "close" {filenumber ","}* ;
property_argument ::= "optional"? byref_or_byval? "paramarray"? id parens? as_type? equals_expn? ;
for_each_statement ::= full_for_each_statement | short_for_each_statement ;
lset_statement ::= "lset" reference "=" expn ;
label_statement ::= EX id ":" IN ;
rmdir_statement ::= "rmdir" filepath ;
while_statement ::= "while" expn eol IN sub_scope EX "wend" ;
component_selector ::= ("." id) | ("." key) | subscript ;
constant_description ::= id as_type? initial_value ;
variable_declaration_keyword ::= "dim" | "redim" | access_modifier ;
subroutine_bracketless_params ::= expn {optional_expn ","}* ;
resume_statement ::= ("resume" "next") | ("resume" number?) ;
attribute_definition ::= reference "=" expn+ ;
set_statement ::= "set" reference "=" set_object_expn ;
single_declaration_or_statement ::= (declaration colon_declaration_or_statement*) | (statement colon_declaration_or_statement*) ;
call_statement ::= "call"? reference subroutine_bracketless_params? ;
kill_statement ::= "kill" filepath ;
star_size ::= "*" expn ;
if_statement ::= full_if_statement | short_if_statement ;
get_statement ::= "get" filenumber comma_recordnumber? "," reference ;
select_case_statement ::= "select" "case" expn eol IN case_alternative* last_case_alternative? EX "end" "select" ;
event_argument ::= byref_or_byval? id parens? as_type? ;
preprocessor_if_statement ::= "#if" expn "then" eol IN sub_scope EX preprocessor_elsif_clause* preprocessor_else_clause? "#end" "if" ;
compare_mode ::= "binary" | "text" | "database" ;
do_statement ::= "do" while_or_until_clause? eol IN sub_scope EX "loop" while_or_until_clause? ;
name_statement ::= "name" filepath "as" filepath ;
open_statement ::= "open" filepath "for" mode access_spec? lock? "as" filenumber length_spec? ;
variable_description ::= array_description | single_var_description ;
declaration_or_statement ::= (declaration eol) | (statement eol) | eol ;
access_spec ::= "access" access_mode ;
initial_value ::= "=" expn ;
to_or_downto ::= "to" | "downto" ;
short_if_statement ::= "if" expn "then" single_declaration_or_statement short_else_clause? ;
def_keyword ::= "defbool" | "defbyte" | "defcur" | "defdate" | "defdbl" | "defdec" | "defint" | "deflng" | "defobj" | "defsng" | "defstr" | "defvar" ;
prefix_op ::= "+" | "-" | "not" | "typeof" | "addressof" ;
on_error_action ::= ("resume" "next") | ("goto" expn) ;
last_case_alternative ::= eol* "case" "else" eol IN sub_scope EX ;
defletter_declaration ::= def_keyword letterrange+ ;
elsif_clause ::= "elseif" expn "then" eol IN sub_scope EX ;
subscript_expn ::= expn to_expn? ;
filecopy_statement ::= "filecopy" filepath "," filepath ;
case_expn ::= expn to_expn? ;
rset_statement ::= "rset" reference "=" expn ;
access_mode ::= "read" | "write" | ("read" "write") ;
beep_statement ::= "beep" ;
on_error_statement ::= "on" "local"? "error" on_error_action ;
colon_declaration_or_statement ::= ":" declaration_or_statement? ;
full_for_each_statement ::= "for" "each" id "in" expn eol IN sub_scope EX "next" id? ;
preprocessor_elsif_clause ::= "#elseif" expn "then" eol IN sub_scope EX ;
exit_what_indicator ::= "do" | "for" | "function" | "property" | "sub" ;
sub_scope ::= declaration_or_statement* ;
subprogram_argument_description ::= "(" {subprogram_argument ","}* ")" ;
set_object_expn ::= ("new"? expn) | "nothing" ;
goto_statement ::= on_expn? "goto" expn ;
savepicture_statement ::= "savepicture" expn "," expn ;
exit_statement ::= "exit" exit_what_indicator ;
to_number ::= "to" number ;
alias_description ::= "alias" stringlit ;
attribute_statement ::= "attribute" attribute_definition+ ;
short_for_each_statement ::= "for" "each" id "in" expn eol colon_declaration_or_statement* ":" "next" id? ;
property_statement ::= access_modifier? "static"? "property" get_let_set id property_argument_list? as_type? eol IN sub_scope EX "end" "property" ;
setattr_statement ::= "setattr" filepath "," expn ;
reset_statement ::= "reset" ;
full_if_statement ::= "if" expn "then" eol IN sub_scope EX elsif_clause* else_clause? "end" "if" ;
time_statement ::= "time" "=" expn ;
assignment_statement ::= "let"? reference "=" expn ;
spc_tab ::= ("spc" "(" expn? ")") | ("tab" "(" expn? ")") ;
length_spec ::= "len" "=" expn ;
declare_subprogram_declaration ::= access_modifier? "declare" sub_or_function id lib_description alias_description? subprogram_argument_description? as_type? ;
stop_statement ::= "stop" ;
equals_expn ::= "=" expn ;
optional_expn ::= expn | (ε SP) ;
until_clause ::= "until" expn ;
implements_declaration ::= "implements" id ;
class_file_header ::= "version" number "class" eol+ class_begin_block ;
seek_statement ::= "seek" filenumber "," expn ;
operator_primary ::= op primary ;
print_item ::= (spc_tab? expn charpos?) | spc_tab ;
savesetting_statement ::= "savesetting" {expn ","}* ;
randomize_statement ::= "randomize" number? ;
mkdir_statement ::= "mkdir" filepath ;
constant_declaration ::= access_modifier? "const" constant_description ;
print_statement ::= "print" filenumber "," {print_item ","}* ;
lock_statement ::= "lock" filenumber comma_recordrange? ;
enum_member_definition ::= (id "=" expn eol) | eol ;
for_next_statement ::= full_for_next_statement | short_for_next_statement ;
subprogram_argument ::= "optional"? byref_or_byval? id? parens? as_type? equals_expn? ;
load_statement ::= "load" expn ;
get_let_set ::= "get" | "let" | "set" ;
type_member_definition ::= (id parens? as_type? eol) | eol ;
access_modifier ::= "public" | "private" | "friend" | "static" ;
on_expn ::= "on" expn ;
gosub_statement ::= on_expn? "gosub" expn ;
preprocessor_else_clause ::= "#else" eol IN sub_scope EX ;
step_clause ::= "step" expn ;
lib_description ::= "lib" stringlit ;
put_statement ::= "put" filenumber comma_expn? "," reference ;
while_or_until_clause ::= while_clause | until_clause ;
while_clause ::= "while" expn ;
enum_declaration ::= access_modifier? "enum" id eol IN enum_member_definition* EX "end" "enum" ;
input_statement ::= "input" filenumber "," {reference ","}* ;
mid_statement ::= "mid" reference "=" stringlit ;
variable_declaration ::= variable_declaration_keyword variable_description+ ;
width_statement ::= "width" filenumber "," expn ;
with_statement ::= "with" reference eol IN sub_scope EX "end" "with" ;
to_expn ::= "to" expn ;
else_clause ::= "else" eol IN sub_scope EX ;
sub_or_function ::= "sub" | "function" ;
unlock_statement ::= "unlock" filenumber comma_recordrange? ;
class_declaration ::= "class" id eol IN sub_scope EX "end" "class" ;
class_begin_block ::= "begin" reference? IN class_begin_item* EX "end" ;
unload_statement ::= "unload" expn ;
as_type ::= "as" "new"? reference star_size? ;
option_statement ::= ("option" "base" number) | ("option" "compare" compare_mode) | ("option" "explicit") | ("option" "private" "module") ;
comma_recordrange ::= "," number to_number? ;
return_statement ::= "return" ;
date_statement ::= "date" "=" expn ;
case_alternative ::= eol* "case" is_operator? case_expn+ eol IN sub_scope EX ;
slash_id ::= ("\" id) | ("/" id) ;
comma_expn ::= "," expn ;
is_operator ::= "is" op? ;
erase_statement ::= "erase" {id ","}* ;
array_description ::= "withevents"? "preserve"? id "(" {subscript_expn ","}* ")" as_type? ;
byref_or_byval ::= "byref" | "byval" ;
class_begin_item ::= assignment_statement | class_begin_block | eol ;
write_statement ::= "write" filenumber "," {print_item ","}* ;
end_statement ::= "end" ;
event_statement ::= "public"? "event" id event_argument_list? ;
full_for_next_statement ::= "for" id "=" expn to_or_downto expn step_clause? eol IN sub_scope EX "next" id? ;
tab_vbcomment ::= TAB vbcomment ;
comma_recordnumber ::= "," expn ;
app_activate_statement ::= "appactivate" expn comma_expn? ;
--------------------basic::vb-glineur.bgf--------------------
obeo/psm/vb/projects/VB_1/features/VB_Property ::= visibility::obeo/psm/vb/projects/VB_1/enumerations/VisibilityEnum isShared::Boolean isGetOnly::Boolean isSet::Boolean isLet::Boolean name::String (parameters::obeo/psm/vb/projects/VB_1/features/VB_Parameter)+ type::obeo/psm/vb/projects/VB_1/references/VB_FullTypeRef (modifiers::obeo/psm/vb/projects/VB_1/features/VB_Modifier)+ (statements::obeo/psm/vb/projects/VB_1/statements/VB_Statement)+ ;
obeo/psm/vb/projects/VB_1/core/VB_Implements ::= implements::obeo/psm/vb/projects/VB_1/references/VB_FullTypeRef ;
obeo/psm/vb/projects/VB_1/features/VB_Sub ::= hasAnnotation::Boolean annotation::obeo/psm/vb/projects/VB_1/statements/VB_Call isFriend::Boolean hasVisibility::Boolean visibility::obeo/psm/vb/projects/VB_1/enumerations/VisibilityEnum isOverloads::Boolean isOverrides::Boolean name::String (parameters::obeo/psm/vb/projects/VB_1/features/VB_Parameter)+ hasHandles::Boolean (handles::obeo/psm/vb/projects/VB_1/references/VB_FullTypeRef)+ (statements::obeo/psm/vb/projects/VB_1/statements/VB_Statement)+ ;
obeo/psm/vb/projects/VB_1/expressions/VB_ParenthesisExpression ::= expression::obeo/psm/vb/projects/VB_1/expressions/VB_Expression ;
obeo/psm/vb/projects/VB_1/references/VB_FullTypeRef ::= (members::obeo/psm/vb/projects/VB_1/references/VB_TypeRef)+ ;
obeo/psm/vb/projects/VB_1/references/VB_LabelRef ::= label::obeo/psm/vb/resources/VB_LangElement labelValue::String ;
obeo/psm/vb/projects/VB_1/core/VB_Assembly ::= call::obeo/psm/vb/projects/VB_1/statements/VB_Call ;
obeo/psm/vb/projects/VB_1/graphicals/VB_GraphicalPropertySet ::= name::String hasArguments::Boolean (arguments::obeo/psm/vb/projects/VB_1/expressions/VB_Expression)+ hasBrackets::Boolean (fields::obeo/psm/vb/projects/VB_1/graphicals/VB_GraphicalField)+ ;
obeo/psm/vb/projects/VB_1/expressions/VB_NegativeExpression ::= expression::obeo/psm/vb/projects/VB_1/expressions/VB_Expression ;
obeo/psm/vb/projects/VB_1/features/VB_DeclareSub ::= hasVisibility::Boolean visibility::obeo/psm/vb/projects/VB_1/enumerations/VisibilityEnum isAuto::Boolean name::String lib::String isAlias::Boolean alias::String (parameters::obeo/psm/vb/projects/VB_1/features/VB_Parameter)+ ;
obeo/psm/vb/projects/VB_1/enumerations/EnablementEnum ::= (Off::ε) | (On::ε) ;
obeo/psm/vb/projects/VB_1/features/VB_Region ::= name::String (features::obeo/psm/vb/projects/VB_1/features/VB_Feature)+ ;
obeo/psm/vb/projects/VB_1/graphicals/VB_GraphicalProperty ::= property::obeo/psm/vb/projects/VB_1/references/VB_FullDataRef value::obeo/psm/vb/projects/VB_1/expressions/VB_Expression ;
obeo/psm/vb/projects/VB_1/expressions/VB_Value ::= obeo/psm/vb/projects/VB_1/expressions/VB_NegativeValue ;
 obeo/psm/vb/projects/VB_1/expressions/VB_Value ::= obeo/psm/vb/projects/VB_1/expressions/VB_VariableSystem ;
 obeo/psm/vb/projects/VB_1/expressions/VB_Value ::= obeo/psm/vb/projects/VB_1/expressions/VB_Literal ;
obeo/psm/vb/projects/VB_1/expressions/VB_Literal ::= obeo/psm/vb/projects/VB_1/expressions/VB_Literal_Literal ;
 obeo/psm/vb/projects/VB_1/expressions/VB_Literal ::= obeo/psm/vb/projects/VB_1/expressions/VB_Literal_Number ;
 obeo/psm/vb/projects/VB_1/expressions/VB_Literal ::= obeo/psm/vb/projects/VB_1/expressions/VB_Literal_Value ;
obeo/psm/vb/projects/VB_1/core/VB_SimpleType ::= visibility::obeo/psm/vb/projects/VB_1/enumerations/VisibilityEnum name::String (features::obeo/psm/vb/projects/VB_1/features/VB_Feature)+ ;
obeo/psm/vb/projects/VB_1/core/VB_FileAttribute ::= name::String (initialValue::obeo/psm/vb/projects/VB_1/expressions/VB_Expression)+ ;
obeo/psm/vb/projects/VB_1/graphicals/VB_GraphicalField ::= obeo/psm/vb/projects/VB_1/graphicals/VB_GraphicalPropertySet ;
 obeo/psm/vb/projects/VB_1/graphicals/VB_GraphicalField ::= obeo/psm/vb/projects/VB_1/graphicals/VB_GraphicalProperty ;
obeo/psm/vb/projects/VB_1/expressions/VB_Expression ::= obeo/psm/vb/projects/VB_1/expressions/VB_AssignmentExpression ;
 obeo/psm/vb/projects/VB_1/expressions/VB_Expression ::= obeo/psm/vb/projects/VB_1/expressions/VB_TypeOfExpression ;
 obeo/psm/vb/projects/VB_1/expressions/VB_Expression ::= obeo/psm/vb/projects/VB_1/expressions/VB_OperatorExpression ;
 obeo/psm/vb/projects/VB_1/expressions/VB_Expression ::= obeo/psm/vb/projects/VB_1/expressions/VB_NewExpression ;
 obeo/psm/vb/projects/VB_1/expressions/VB_Expression ::= obeo/psm/vb/projects/VB_1/expressions/VB_NotExpression ;
 obeo/psm/vb/projects/VB_1/expressions/VB_Expression ::= obeo/psm/vb/projects/VB_1/expressions/VB_NegativeExpression ;
 obeo/psm/vb/projects/VB_1/expressions/VB_Expression ::= obeo/psm/vb/projects/VB_1/expressions/VB_ParenthesisExpression ;
 obeo/psm/vb/projects/VB_1/expressions/VB_Expression ::= obeo/psm/vb/projects/VB_1/expressions/VB_TabValuesExpression ;
 obeo/psm/vb/projects/VB_1/expressions/VB_Expression ::= obeo/psm/vb/projects/VB_1/expressions/VB_ByValExpression ;
 obeo/psm/vb/projects/VB_1/expressions/VB_Expression ::= obeo/psm/vb/projects/VB_1/expressions/VB_Value ;
 obeo/psm/vb/projects/VB_1/expressions/VB_Expression ::= obeo/psm/vb/projects/VB_1/references/VB_FullDataRef ;
obeo/psm/vb/projects/VB_1/core/VB_Class ::= isFriend::Boolean hasVisibility::Boolean visibility::obeo/psm/vb/projects/VB_1/enumerations/VisibilityEnum name::String hasInherits::Boolean inherits::obeo/psm/vb/projects/VB_1/references/VB_FullTypeRef (features::obeo/psm/vb/projects/VB_1/features/VB_Feature)+ ;
obeo/psm/vb/projects/VB_1/enumerations/NameEnum ::= (trueLit::ε) | (falseLit::ε) | (nothing::ε) ;
obeo/psm/vb/projects/VB_1/core/VB_Type ::= obeo/psm/vb/projects/VB_1/core/VB_Class ;
obeo/psm/vb/projects/VB_1/statements/VB_CallExpressionArgument ::= expression::obeo/psm/vb/projects/VB_1/expressions/VB_Expression hasSeparator::Boolean ;
obeo/psm/vb/projects/VB_1/expressions/VB_NewExpression ::= type::obeo/psm/vb/projects/VB_1/references/VB_FullTypeRef hasArguments::Boolean (arguments::obeo/psm/vb/projects/VB_1/expressions/VB_Expression)+ hasInitialization::Boolean (initializations::obeo/psm/vb/projects/VB_1/expressions/VB_Expression)+ ;
obeo/psm/vb/projects/VB_1/core/VB_Option ::= name::String hasEnablement::Boolean enablement::obeo/psm/vb/projects/VB_1/enumerations/EnablementEnum ;
obeo/psm/vb/projects/VB_1/expressions/VB_AssignmentExpression ::= variable::obeo/psm/vb/projects/VB_1/references/VB_FullDataRef expression::obeo/psm/vb/projects/VB_1/expressions/VB_Expression ;
obeo/psm/vb/projects/VB_1/expressions/VB_TabValuesExpression ::= (arguments::obeo/psm/vb/projects/VB_1/expressions/VB_Expression)+ ;
obeo/psm/vb/projects/VB_1/core/VB_Module ::= name::String (features::obeo/psm/vb/projects/VB_1/features/VB_Feature)+ ;
obeo/psm/vb/projects/VB_1/core/VB_Data ::= obeo/psm/vb/projects/VB_1/features/VB_Parameter ;
 obeo/psm/vb/projects/VB_1/core/VB_Data ::= obeo/psm/vb/projects/VB_1/features/VB_Feature ;
 obeo/psm/vb/projects/VB_1/core/VB_Data ::= obeo/psm/vb/projects/VB_1/graphicals/VB_GraphicalProperty ;
 obeo/psm/vb/projects/VB_1/core/VB_Data ::= obeo/psm/vb/projects/VB_1/graphicals/VB_GraphicalElement ;
obeo/psm/vb/projects/VB_1/expressions/VB_NotExpression ::= expression::obeo/psm/vb/projects/VB_1/expressions/VB_Expression ;
obeo/psm/vb/projects/VB_1/expressions/VB_Literal_Number ::= ε ;
obeo/psm/vb/projects/VB_1/statements/VB_Call ::= expression::obeo/psm/vb/projects/VB_1/references/VB_FullDataRef (arguments::obeo/psm/vb/projects/VB_1/statements/VB_CallArgument)+ ;
obeo/psm/vb/projects/VB_1/features/VB_Feature ::= obeo/psm/vb/projects/VB_1/features/VB_Region ;
 obeo/psm/vb/projects/VB_1/features/VB_Feature ::= obeo/psm/vb/projects/VB_1/features/VB_Sub ;
 obeo/psm/vb/projects/VB_1/features/VB_Feature ::= obeo/psm/vb/projects/VB_1/features/VB_Function ;
 obeo/psm/vb/projects/VB_1/features/VB_Feature ::= obeo/psm/vb/projects/VB_1/features/VB_DeclareFunction ;
 obeo/psm/vb/projects/VB_1/features/VB_Feature ::= obeo/psm/vb/projects/VB_1/features/VB_DeclareSub ;
 obeo/psm/vb/projects/VB_1/features/VB_Feature ::= obeo/psm/vb/projects/VB_1/features/VB_Property ;
 obeo/psm/vb/projects/VB_1/features/VB_Feature ::= obeo/psm/vb/projects/VB_1/features/VB_Attribute ;
obeo/psm/vb/projects/VB_1/expressions/VB_ByValExpression ::= value::obeo/psm/vb/projects/VB_1/expressions/VB_Expression ;
obeo/psm/vb/projects/VB_1/expressions/VB_Literal_Value ::= ε ;
obeo/psm/vb/projects/VB_1/expressions/VB_Literal_Literal ::= ε ;
obeo/psm/vb/projects/VB_1/expressions/VB_NegativeValue ::= value::obeo/psm/vb/projects/VB_1/expressions/VB_Value ;
obeo/psm/vb/projects/VB_1/preprocessing/VB_PreprocIf ::= condition::obeo/psm/vb/projects/VB_1/expressions/VB_Expression (features::obeo/psm/vb/projects/VB_1/features/VB_Feature)+ ;
obeo/psm/vb/projects/VB_1/expressions/VB_TypeOfExpression ::= variable::obeo/psm/vb/projects/VB_1/references/VB_FullDataRef type::obeo/psm/vb/projects/VB_1/references/VB_FullTypeRef ;
obeo/psm/vb/projects/VB_1/features/VB_Parameter ::= isOptional::Boolean hasQualifier::Boolean qualifier::obeo/psm/vb/projects/VB_1/enumerations/QualifierEnum name::String isArray::Boolean arrayExpression::obeo/psm/vb/projects/VB_1/expressions/VB_Expression hasType::Boolean type::obeo/psm/vb/projects/VB_1/references/VB_FullTypeRef hasInitialValue::Boolean value::obeo/psm/vb/projects/VB_1/expressions/VB_Expression ;
obeo/psm/vb/projects/VB_1/statements/VB_Statement ::= obeo/psm/vb/projects/VB_1/statements/VB_Call ;
 obeo/psm/vb/projects/VB_1/statements/VB_Statement ::= obeo/psm/vb/projects/VB_1/statements/VB_RawBody ;
obeo/psm/vb/projects/VB_1/statements/VB_CallEmptyArgument ::= ε ;
obeo/psm/vb/projects/VB_1/statements/VB_RawBody ::= value::String ;
obeo/psm/vb/projects/VB_1/features/VB_Set ::= hasParameters::Boolean (parameters::obeo/psm/vb/projects/VB_1/features/VB_Parameter)+ (statements::obeo/psm/vb/projects/VB_1/statements/VB_Statement)+ ;
obeo/psm/vb/projects/VB_1/features/VB_DeclareFunction ::= hasVisibility::Boolean visibility::obeo/psm/vb/projects/VB_1/enumerations/VisibilityEnum isAuto::Boolean name::String lib::String isAlias::Boolean alias::String (parameters::obeo/psm/vb/projects/VB_1/features/VB_Parameter)+ return::obeo/psm/vb/projects/VB_1/references/VB_FullTypeRef ;
obeo/psm/vb/projects/VB_1/graphicals/VB_GraphicalElement ::= type::obeo/psm/vb/projects/VB_1/references/VB_FullTypeRef name::String (fields::obeo/psm/vb/projects/VB_1/graphicals/VB_GraphicalField)+ (children::obeo/psm/vb/projects/VB_1/graphicals/VB_GraphicalElement)+ ;
obeo/psm/vb/projects/VB_1/references/VB_DataRef ::= data::obeo/psm/vb/resources/VB_LangElement dataValue::String hasArguments::Boolean (arguments::obeo/psm/vb/projects/VB_1/statements/VB_CallArgument)+ hasRefMarker::Boolean hasSubMarker::Boolean ;
obeo/psm/vb/projects/VB_1/expressions/VB_OperatorExpression ::= leftHand::obeo/psm/vb/projects/VB_1/expressions/VB_Expression rightHand::obeo/psm/vb/projects/VB_1/expressions/VB_Expression operatorName::String ;
obeo/psm/vb/projects/VB_1/features/VB_Attribute ::= hasVisibility::Boolean visibility::obeo/psm/vb/projects/VB_1/enumerations/VisibilityEnum hasQualifier::Boolean qualifier::obeo/psm/vb/projects/VB_1/enumerations/Qualifier_2Enum isFriend::Boolean isWithEvents::Boolean isShared::Boolean name::String isArray::Boolean (arrayExpressions::obeo/psm/vb/projects/VB_1/expressions/VB_Expression)+ hasType::Boolean type::obeo/psm/vb/projects/VB_1/expressions/VB_Expression hasInitialValue::Boolean initialValue::obeo/psm/vb/projects/VB_1/expressions/VB_Expression hasNext::Boolean ;
obeo/psm/vb/resources/VB_LangElement ::= obeo/psm/vb/projects/VB_1/core/VB_Content ;
 obeo/psm/vb/resources/VB_LangElement ::= obeo/psm/vb/projects/VB_1/core/VB_GlobalVariable ;
 obeo/psm/vb/resources/VB_LangElement ::= obeo/psm/vb/projects/VB_1/core/VB_ContentElement ;
 obeo/psm/vb/resources/VB_LangElement ::= obeo/psm/vb/projects/VB_1/core/VB_Type ;
 obeo/psm/vb/resources/VB_LangElement ::= obeo/psm/vb/projects/VB_1/core/VB_Data ;
 obeo/psm/vb/resources/VB_LangElement ::= obeo/psm/vb/projects/VB_1/features/VB_Modifier ;
 obeo/psm/vb/resources/VB_LangElement ::= obeo/psm/vb/projects/VB_1/graphicals/VB_GraphicalField ;
 obeo/psm/vb/resources/VB_LangElement ::= obeo/psm/vb/projects/VB_1/statements/VB_CallArgument ;
 obeo/psm/vb/resources/VB_LangElement ::= obeo/psm/vb/projects/VB_1/statements/VB_Case ;
 obeo/psm/vb/resources/VB_LangElement ::= obeo/psm/vb/projects/VB_1/expressions/VB_Expression ;
 obeo/psm/vb/resources/VB_LangElement ::= obeo/psm/vb/projects/VB_1/references/VB_FullTypeRef ;
 obeo/psm/vb/resources/VB_LangElement ::= obeo/psm/vb/projects/VB_1/references/VB_TypeRef ;
 obeo/psm/vb/resources/VB_LangElement ::= obeo/psm/vb/projects/VB_1/references/VB_DataRef ;
 obeo/psm/vb/resources/VB_LangElement ::= obeo/psm/vb/projects/VB_1/references/VB_LabelRef ;
obeo/psm/vb/projects/VB_1/enumerations/QualifierEnum ::= (byRef::ε) | (byVal::ε) ;
obeo/psm/vb/projects/VB_1/enumerations/VisibilityEnum ::= (private::ε) | (protected::ε) | (public::ε) ;
obeo/psm/vb/projects/VB_1/core/VB_ContentElement ::= obeo/psm/vb/projects/VB_1/core/VB_FileAttribute ;
 obeo/psm/vb/projects/VB_1/core/VB_ContentElement ::= obeo/psm/vb/projects/VB_1/core/VB_Option ;
 obeo/psm/vb/projects/VB_1/core/VB_ContentElement ::= obeo/psm/vb/projects/VB_1/core/VB_Imports ;
 obeo/psm/vb/projects/VB_1/core/VB_ContentElement ::= obeo/psm/vb/projects/VB_1/core/VB_Implements ;
 obeo/psm/vb/projects/VB_1/core/VB_ContentElement ::= obeo/psm/vb/projects/VB_1/core/VB_Assembly ;
 obeo/psm/vb/projects/VB_1/core/VB_ContentElement ::= obeo/psm/vb/projects/VB_1/core/VB_Module ;
 obeo/psm/vb/projects/VB_1/core/VB_ContentElement ::= obeo/psm/vb/projects/VB_1/core/VB_SimpleType ;
 obeo/psm/vb/projects/VB_1/core/VB_ContentElement ::= obeo/psm/vb/projects/VB_1/core/VB_Enum ;
 obeo/psm/vb/projects/VB_1/core/VB_ContentElement ::= obeo/psm/vb/projects/VB_1/preprocessing/VB_PreprocIf ;
 obeo/psm/vb/projects/VB_1/core/VB_ContentElement ::= obeo/psm/vb/projects/VB_1/core/VB_Class ;
 obeo/psm/vb/projects/VB_1/core/VB_ContentElement ::= obeo/psm/vb/projects/VB_1/graphicals/VB_GraphicalElement ;
 obeo/psm/vb/projects/VB_1/core/VB_ContentElement ::= obeo/psm/vb/projects/VB_1/features/VB_Feature ;
obeo/psm/vb/projects/VB_1/core/VB_Content ::= hasVersion::Boolean version::String hasClass::Boolean hasBeginEnd::Boolean (beginEndGlobalVariables::obeo/psm/vb/projects/VB_1/core/VB_GlobalVariable)+ (globalVariables::obeo/psm/vb/projects/VB_1/core/VB_GlobalVariable)+ (elements::obeo/psm/vb/projects/VB_1/core/VB_ContentElement)+ ;
obeo/psm/vb/projects/VB_1/features/VB_Get ::= hasParameters::Boolean (parameters::obeo/psm/vb/projects/VB_1/features/VB_Parameter)+ (statements::obeo/psm/vb/projects/VB_1/statements/VB_Statement)+ ;
obeo/psm/vb/projects/VB_1/core/VB_Enum ::= visibility::obeo/psm/vb/projects/VB_1/enumerations/VisibilityEnum name::String (features::obeo/psm/vb/projects/VB_1/features/VB_Feature)+ ;
obeo/psm/vb/projects/VB_1/statements/VB_CallArgument ::= obeo/psm/vb/projects/VB_1/statements/VB_CallEmptyArgument ;
 obeo/psm/vb/projects/VB_1/statements/VB_CallArgument ::= obeo/psm/vb/projects/VB_1/statements/VB_CallExpressionArgument ;
obeo/psm/vb/projects/VB_1/core/VB_GlobalVariable ::= name::String (value::obeo/psm/vb/projects/VB_1/expressions/VB_Expression)+ ;
obeo/psm/vb/projects/VB_1/references/VB_FullDataRef ::= self::Boolean (members::obeo/psm/vb/projects/VB_1/references/VB_DataRef)+ hasRecSet::Boolean recSetMember::obeo/psm/vb/projects/VB_1/references/VB_DataRef ;
obeo/psm/vb/projects/VB_1/references/VB_TypeRef ::= type::obeo/psm/vb/resources/VB_LangElement typeValue::String ;
obeo/psm/vb/projects/VB_1/enumerations/Qualifier_2Enum ::= (static::ε) | (const::ε) | (dim::ε) ;
obeo/psm/vb/projects/VB_1/core/VB_Imports ::= imports::obeo/psm/vb/projects/VB_1/references/VB_FullTypeRef ;
obeo/psm/vb/projects/VB_1/expressions/VB_VariableSystem ::= name::obeo/psm/vb/projects/VB_1/enumerations/NameEnum ;
obeo/psm/vb/projects/VB_1/features/VB_Function ::= isFriend::Boolean hasVisibility::Boolean visibility::obeo/psm/vb/projects/VB_1/enumerations/VisibilityEnum name::String (parameters::obeo/psm/vb/projects/VB_1/features/VB_Parameter)+ return::obeo/psm/vb/projects/VB_1/references/VB_FullTypeRef (statements::obeo/psm/vb/projects/VB_1/statements/VB_Statement)+ ;
obeo/psm/vb/projects/VB_1/features/VB_Modifier ::= obeo/psm/vb/projects/VB_1/features/VB_Set ;
 obeo/psm/vb/projects/VB_1/features/VB_Modifier ::= obeo/psm/vb/projects/VB_1/features/VB_Get ;
 obeo/psm/vb/projects/VB_1/features/VB_Modifier ::= obeo/psm/vb/projects/VB_1/statements/VB_Statement ;
obeo/psm/vb/projects/VB_1/statements/VB_Case ::= (values::obeo/psm/vb/projects/VB_1/expressions/VB_Expression)+ hasSeparator::Boolean (statements::obeo/psm/vb/projects/VB_1/statements/VB_Statement)+ ;
obeo/psm/vb/resources/LocatedElement ::= obeo/psm/vb/resources/VB_LangElement ;
--------------------bibtex::bibtex-1.1.bgf--------------------
MasterThesis ::= school::String ;
InBook ::= chapter::Integer ;
BookTitledEntry ::= InCollection ;
DatedEntry ::= Booklet ;
 DatedEntry ::= Proceedings ;
InProceedings ::= ε ;
TechReport ::= (authors::Author)+ ;
PhDThesis ::= school::String ;
AuthoredEntry ::= Article ;
 AuthoredEntry ::= TechReport ;
 AuthoredEntry ::= Unpublished ;
 AuthoredEntry ::= Book ;
 AuthoredEntry ::= ThesisEntry ;
BibTeXFile ::= (entries::BibTeXEntry)+ ;
ThesisEntry ::= PhDThesis ;
 ThesisEntry ::= MasterThesis ;
TitledEntry ::= Manual ;
 TitledEntry ::= Unpublished ;
 TitledEntry ::= Proceedings ;
BibTeXEntry ::= AuthoredEntry ;
 BibTeXEntry ::= DatedEntry ;
 BibTeXEntry ::= TitledEntry ;
 BibTeXEntry ::= BookTitledEntry ;
 BibTeXEntry ::= Misc ;
InCollection ::= publisher::String booktitle::String ;
--------------------bibtex::bibtex-1.2.bgf--------------------
InBook ::= chapter::String type::String ;
MastersThesis ::= type::String address::String note::String ;
BookTitledEntry ::= InCollection ;
DatedEntry ::= Booklet ;
 DatedEntry ::= Proceedings ;
InProceedings ::= Conference ;
 InProceedings ::= pages::String ;
TechReport ::= type::String number::String address::String note::String ;
PhdThesis ::= type::String address::String note::String ;
AuthoredEntry ::= Article ;
 AuthoredEntry ::= Book ;
 AuthoredEntry ::= TechReport ;
 AuthoredEntry ::= ThesisEntry ;
 AuthoredEntry ::= InProceedings ;
 AuthoredEntry ::= Unpublished ;
BibtexFile ::= (entries::Entry)+ ;
ThesisEntry ::= PhdThesis ;
 ThesisEntry ::= MastersThesis ;
TitledEntry ::= Manual ;
 TitledEntry ::= Booklet ;
 TitledEntry ::= Proceedings ;
InCollection ::= chapter::String type::String ;
--------------------bibtex::bibtex-1.bgf--------------------
BookTitle ::= value::String ;
AuthorUrls ::= value::String ;
MastersThesis ::= key::String (fields::Field)+ ;
LocatedElement ::= Entry ;
AbstractField ::= value::String ;
PhdThesis ::= key::String (fields::Field)+ ;
--------------------bibtex::bql.bgf--------------------
LocatedElement ::= Entry ;
--------------------dot::doux.bgf--------------------
SubGraph ::= type::String rankDir::String dim::Integer (contents::GraphElement)+ label::String color::String z::Integer graph::Graph ;
GraphElement ::= DirectedArc ;
 GraphElement ::= Constraint ;
 GraphElement ::= Node ;
 GraphElement ::= SubGraph ;
DirectedArc ::= sourceNode::String sourcePart::String targetNode::String targetPart::String shape::String ;
LocatedElement ::= NamedElement ;
NamedElement ::= Graph ;
 NamedElement ::= GraphElement ;
 NamedElement ::= Node ;
--------------------dot::palies.bgf--------------------
ComplexNodeShape ::= PolygonNodeShape ;
 ComplexNodeShape ::= MNodeShape ;
 ComplexNodeShape ::= RecordNodeShape ;
PointNodeShape ::= ε ;
NodeShape ::= SimpleNodeShape ;
 NodeShape ::= PointNodeShape ;
 NodeShape ::= ComplexNodeShape ;
RecordNodeShape ::= ε ;
SubGraph ::= (nodes::Nodelike)+ labelloc::String ;
GraphElement ::= Graph ;
 GraphElement ::= Layer ;
 GraphElement ::= Nodelike ;
 GraphElement ::= Arc ;
 GraphElement ::= Shape ;
HorizontalCompartment ::= complexLabel::ComplexLabel compartments::Compartment anchor::Anchor ;
SimpleNodeShape ::= ε ;
VerticalCompartment ::= complexLabel::ComplexLabel compartments::Compartment anchor::Anchor ;
DirectedArc ::= arrowHead::ArrowShape headlabel::Label taillabel::Label arrowTail::ArrowShape tail_lp::Double head_lp::Double ;
ArrowShape ::= clipping::String isPlain::Boolean size::Integer ;
PolygonNodeShape ::= sides::Integer skew::Integer distortion::Integer isRegular::Boolean orientation::Integer ;
ComplexLabel ::= (compartments::Compartment)+ ;
MNodeShape ::= toplabel::Label bottomlabel::Label ;
SimpleLabel ::= content::String ;
UndirectedArc ::= fromNode::Nodelike toNode::Nodelike (layers::Layer)+ constraint::Boolean group::String minlen::Integer sameHead::String sameTail::String lhead::Nodelike ltail::Nodelike decorate::Boolean ;
SimpleCompartment ::= content::String ;
--------------------dot::rascal-abstract.bgf--------------------
NodeId ::= Id PortId ;
PortId ::= Id CompassPt ;
CompassPt ::= (N::ε) | (NE::ε) | (E::ε) | (SE::ε) | (S::ε) | (SW::ε) | (W::ε) | (NW::ε) | (C::ε) | (_::ε) ;
DotGraph ::= (graph::(id::Id stmts::Stms)) | (digraph::(id::Id stmts::Stms)) ;
--------------------dot::rascal-concrete.bgf--------------------
StatementOptional ::= Statement ";"? ;
AttrList ::= AttrList0* ;
EdgeOp ::= "->" ;
 EdgeOp ::= "--" ;
AttrStatement ::= AttrTag AttrList ;
NodeId ::= Id Port ;
 NodeId ::= Id ;
StatementList ::= StatementOptional* ;
NodeStatement ::= Nod AttrList ;
DotAttr ::= Id "=" Id ;
 DotAttr ::= Id "=" Id "," ;
AttrTag ::= "node" ;
 AttrTag ::= "graph" ;
 AttrTag ::= "edge" ;
DOT ::= LAYOUT* Graph Id "{" StatementList "}" "\n"? ;
EdgeStatement ::= Nod EdgeRhs AttrList ;
AttrList0 ::= "[" DotAttr* "]" ;
EdgeRhs ::= Edg+ ;
--------------------html::allilaire.bgf--------------------
OBJECT ::= classid::String id::String data::String type::String standby::String ;
TR ::= valign::String align::String table::TABLE (tds::TD)+ ;
LI ::= liValue::String ;
SELECT ::= multiple::String size::String name::String ;
MAP ::= body::BODY ;
HEADElement ::= LINK ;
 HEADElement ::= TITLE ;
TEXTAREA ::= name::String rows::String cols::String ;
BODYElement ::= H1 ;
 BODYElement ::= H2 ;
 BODYElement ::= H3 ;
 BODYElement ::= H4 ;
 BODYElement ::= EM ;
 BODYElement ::= STRONG ;
 BODYElement ::= B ;
 BODYElement ::= I ;
 BODYElement ::= TT ;
 BODYElement ::= PRE ;
 BODYElement ::= BIG ;
 BODYElement ::= SMALL ;
 BODYElement ::= SUB ;
 BODYElement ::= SUP ;
 BODYElement ::= STRIKE ;
 BODYElement ::= FONT ;
 BODYElement ::= IMG ;
 BODYElement ::= BR ;
 BODYElement ::= MAP ;
 BODYElement ::= AREA ;
 BODYElement ::= STYLE ;
 BODYElement ::= EMBED ;
 BODYElement ::= NOEMBED ;
 BODYElement ::= SPAN ;
 BODYElement ::= A ;
 BODYElement ::= DIV ;
 BODYElement ::= P ;
 BODYElement ::= TABLEElement ;
LINK ::= rel::String title::String ahref::String type::String ;
EMBED ::= src::String width::String height::String align::String vspace::String hspace::String border::String ;
TITLE ::= head::HEAD ;
OPTION ::= selected::String optionValue::String ;
TH ::= colspan::String rowspan::String valign::String align::String width::String tr::TR ;
STRIKE ::= body::BODY ;
DIV ::= align::String ;
TD ::= TH ;
 TD ::= colspan::String rowspan::String valign::String align::String width::String tr::TR ;
TABLE ::= border::String width::String cellspacing::String cellpadding::String (trs::TR)+ ;
TABLEElement ::= TABLE ;
 TABLEElement ::= TR ;
 TABLEElement ::= TD ;
SUP ::= body::BODY ;
PARAM ::= name::String paramValue::String ;
NOFRAME ::= ε ;
H4 ::= body::BODY ;
H3 ::= body::BODY ;
HTML ::= head::HEAD body::BODY ;
INPUT ::= align::String maxlength::String size::String checked::String src::String inputValue::String name::String type::String ;
H2 ::= body::BODY ;
H1 ::= body::BODY ;
EM ::= body::BODY ;
SMALL ::= body::BODY ;
IFRAME ::= src::String name::String marginwidth::String marginheight::String scrolling::String noresize::String ;
IMG ::= src::String width::String height::String alt::String align::String vspace::String hspace::String ismap::String usemap::String border::String ;
BODY ::= background::String bgcolor::String text::String link::String alink::String vlink::String (bodyElements::BODYElement)+ html::HTML ;
BIG ::= body::BODY ;
SUB ::= body::BODY ;
HEAD ::= (headElements::HEADElement)+ html::HTML ;
ListElement ::= OL ;
 ListElement ::= UL ;
 ListElement ::= LI ;
OL ::= start::String ;
APPLET ::= applet::String class::String src::String align::String width::String height::String ;
NOEMBED ::= body::BODY ;
UL ::= type::String ;
STRONG ::= body::BODY ;
FRAMESET ::= rows::String cols::String framespacing::String frameborder::String border::String ;
STYLE ::= body::BODY ;
HTMLElement ::= HEAD ;
 HTMLElement ::= HEADElement ;
 HTMLElement ::= BODY ;
 HTMLElement ::= BODYElement ;
 HTMLElement ::= value::String (children::HTMLElement)+ parent::HTMLElement ;
DT ::= ε ;
BR ::= clear::String ;
FONT ::= color::String face::String size::String ;
FRAME ::= IFRAME ;
 FRAME ::= src::String name::String marginwidth::String marginheight::String scrolling::String noresize::String ;
AREA ::= shape::String coords::String ahref::String ;
SPAN ::= style::String ;
DL ::= ε ;
FORM ::= action::String method::String ;
PRE ::= body::BODY ;
DD ::= ε ;
TT ::= body::BODY ;
--------------------html::clark-basic.bgf--------------------
dfn.attlist ::= Common.attrib ;
id.attrib ::= (id::ID.datatype)? ;
html.attlist ::= XHTML.version.attrib I18n.attrib ;
profile.attlist ::= (profile::URI.datatype)? ;
I18n.attrib ::= lang.attrib ;
em.attlist ::= Common.attrib ;
CellHAlign.attrib ::= (align::("left" | "center" | "right"))? ;
var.attlist ::= Common.attrib ;
pre.attlist ::= Common.attrib (xml:space::"preserve")? ;
LinkTypes.datatype ::= NMTOKENS.datatype ;
body.attlist ::= Common.attrib ;
ContentTypes.datatype ::= string() ;
Form.class ::= form ;
Heading.content ::= Inline.model ;
Heading.class ::= h1 | h2 | h3 | h4 | h5 | h6 ;
XHTML.version.attrib ::= (version::FPI.datatype)? ;
head.content ::= base? ;
 head.content ::= link* ;
 head.content ::= meta* ;
 head.content ::= title ;
Block.model ::= Block.mix+ ;
strong.attlist ::= Common.attrib ;
ul.attlist ::= Common.attrib ;
Charset.datatype ::= string() ;
Text.datatype ::= string() ;
Pixels.datatype ::= string() ;
div.attlist ::= Common.attrib ;
dt.attlist ::= Common.attrib ;
blockquote.attlist ::= Common.attrib (cite::URI.datatype)? ;
param.attlist ::= id.attrib name::string() (value::string())? (valuetype::("data" | "ref" | "object"))? (type::ContentType.datatype)? ;
Block.mix ::= Block.class ;
dl.attlist ::= Common.attrib ;
Core.attrib ::= id.attrib class.attrib title.attrib ;
NMTOKEN.datatype ::= string() ;
ID.datatype ::= string() ;
Datetime.datatype ::= string() ;
Heading.attrib ::= Common.attrib ;
meta.attlist ::= I18n.attrib (http-equiv::NMTOKEN.datatype)? (name::NMTOKEN.datatype)? (content::string())? (scheme::string())? ;
dd.attlist ::= Common.attrib ;
tr.attlist ::= Common.attrib CellHAlign.attrib CellVAlign.attrib ;
h6 ::= h6::(Heading.attrib Heading.content) ;
li.attlist ::= Common.attrib ;
h5 ::= h5::(Heading.attrib Heading.content) ;
select.attlist ::= Common.attrib (name::string())? (size::Number.datatype)? (multiple::"multiple")? ;
h4 ::= h4::(Heading.attrib Heading.content) ;
Length.datatype ::= string() ;
h3 ::= h3::(Heading.attrib Heading.content) ;
link.attlist ::= Common.attrib (charset::Charset.datatype)? (href::URI.datatype)? (hreflang::LanguageCode.datatype)? (type::ContentType.datatype)? (rel::LinkTypes.datatype)? (rev::LinkTypes.datatype)? (media::MediaDesc.datatype)? ;
URIs.datatype ::= string() ;
h2 ::= h2::(Heading.attrib Heading.content) ;
lang.attrib ::= (xml:lang::LanguageCode.datatype)? ;
h1 ::= h1::(Heading.attrib Heading.content) ;
Number.datatype ::= string() ;
List.class ::= ul | ol | dl ;
URI.datatype ::= string() ;
address.attlist ::= Common.attrib ;
th.attlist ::= Cell.attrib ;
label.attlist ::= Common.attrib (for::IDREF.datatype)? (accesskey::Character.datatype)? ;
samp.attlist ::= Common.attrib ;
q.attlist ::= Common.attrib (cite::URI.datatype)? ;
p.attlist ::= Common.attrib ;
td.attlist ::= Cell.attrib ;
ContentType.datatype ::= string() ;
kbd.attlist ::= Common.attrib ;
code.attlist ::= Common.attrib ;
MediaDesc.datatype ::= string() ;
caption.attlist ::= Common.attrib ;
Block.class ::= Form.class ;
 Block.class ::= List.class ;
 Block.class ::= table ;
 Block.class ::= address | blockquote | div | p | pre | Heading.class ;
Cell.attrib ::= Common.attrib (abbr::Text.datatype)? (axis::string())? (headers::IDREFS.datatype)? scope.attrib (rowspan::Number.datatype)? (colspan::Number.datatype)? CellHAlign.attrib CellVAlign.attrib ;
Inline.model ::= (string() | Inline.class)* ;
FPI.datatype ::= string() ;
a.attlist ::= Common.attrib (href::URI.datatype)? (charset::Charset.datatype)? (type::ContentType.datatype)? (hreflang::LanguageCode.datatype)? (rel::LinkTypes.datatype)? (rev::LinkTypes.datatype)? (accesskey::Character.datatype)? (tabindex::Number.datatype)? ;
head.attlist ::= I18n.attrib profile.attlist ;
ol.attlist ::= Common.attrib ;
LanguageCode.datatype ::= string() ;
Charsets.datatype ::= string() ;
title.attlist ::= I18n.attrib ;
Character.datatype ::= string() ;
cite.attlist ::= Common.attrib ;
scope.attrib ::= (scope::("row" | "col"))? ;
base.attlist ::= href::URI.datatype ;
br.attlist ::= Core.attrib ;
title.attrib ::= (title::Text.datatype)? ;
table.attlist ::= Common.attrib (summary::Text.datatype)? ;
span.attlist ::= Common.attrib ;
input.attlist ::= Common.attrib (type::InputType.class)? (name::string())? (value::string())? (checked::"checked")? (size::string())? (maxlength::Number.datatype)? (src::URI.datatype)? (accesskey::Character.datatype)? ;
IDREF.datatype ::= string() ;
NMTOKENS.datatype ::= string() ;
Formctrl.class ::= input | label | select | textarea ;
IDREFS.datatype ::= string() ;
form.attlist ::= Common.attrib action::URI.datatype (method::("get" | "post"))? (enctype::ContentType.datatype)? ;
acronym.attlist ::= Common.attrib ;
img.attlist ::= Common.attrib src::URI.datatype alt::Text.datatype (longdesc::URI.datatype)? (height::Length.datatype)? (width::Length.datatype)? ;
MultiLength.datatype ::= string() ;
CommonIdRequired.attrib ::= id::ID.datatype class.attrib title.attrib I18n.attrib ;
object.attlist ::= Common.attrib (declare::"declare")? (classid::URI.datatype)? (codebase::URI.datatype)? (data::URI.datatype)? (type::ContentType.datatype)? (codetype::ContentType.datatype)? (archive::URIs.datatype)? (standby::Text.datatype)? (height::Length.datatype)? (width::Length.datatype)? (name::string())? (tabindex::Number.datatype)? ;
InputType.class ::= "text" | "password" | "checkbox" | "radio" | "submit" | "reset" | "hidden" ;
Common.attrib ::= Core.attrib I18n.attrib ;
textarea.attlist ::= Common.attrib (name::string())? rows::Number.datatype cols::Number.datatype (accesskey::Character.datatype)? string() ;
Flow.model ::= (string() | Inline.class | Block.class)* ;
CellVAlign.attrib ::= (valign::("top" | "middle" | "bottom"))? ;
Script.datatype ::= string() ;
Inline.class ::= Formctrl.class ;
 Inline.class ::= a ;
 Inline.class ::= img ;
 Inline.class ::= object ;
 Inline.class ::= abbr | acronym | br | cite | code | dfn | em | kbd | q | samp | span | strong | var ;
abbr.attlist ::= Common.attrib ;
class.attrib ::= (class::NMTOKENS.datatype)? ;
--------------------html::clark.bgf--------------------
dfn.attlist ::= Common.attrib ;
id.attrib ::= (id::ID.datatype)? ;
li.noblock ::= li::(li.attlist Inline.model) ;
CellHAlign.attrib ::= (align::("left" | "center" | "right" | "justify" | "char"))? (char::Character.datatype)? (charoff::Length.datatype)? ;
 CellHAlign.attrib ::= (align::("left" | "center" | "right"))? ;
fieldset.attlist ::= Common.attrib ;
var.attlist ::= Common.attrib ;
Form.class ::= fieldset ;
 Form.class ::= form ;
XHTML.version.attrib ::= (version::FPI.datatype)? ;
tbody.attlist ::= Common.attrib CellHAlign.attrib CellVAlign.attrib ;
Pixels.datatype ::= string() ;
blockquote.attlist ::= Common.attrib (cite::URI.datatype)? ;
legend.attlist ::= Common.attrib (accesskey::Character.datatype)? ;
 legend.attlist ::= (align::("top" | "bottom" | "left" | "right"))? ;
del.attlist ::= Edit.attrib ;
hr.attlist ::= (align::("left" | "center" | "right"))? (noshade::"noshade")? (size::Pixels.datatype)? (width::Pixels.datatype)? ;
 hr.attlist ::= Common.attrib ;
Core.attrib ::= id.attrib class.attrib title.attrib ;
 Core.attrib ::= (style::string())? ;
small.attlist ::= Common.attrib ;
NMTOKEN.datatype ::= string() ;
Datetime.datatype ::= string() ;
meta.attlist ::= I18n.attrib (http-equiv::NMTOKEN.datatype)? (name::NMTOKEN.datatype)? (content::string())? (scheme::string())? ;
align.attrib ::= (align::("left" | "all" | "right" | "none"))? ;
big.attlist ::= Common.attrib ;
colgroup.attlist ::= Common.attrib (span::Number.datatype)? (width::MultiLength.datatype)? CellHAlign.attrib CellVAlign.attrib ;
h6 ::= h6::(Heading.attrib Heading.content) ;
h5 ::= h5::(Heading.attrib Heading.content) ;
select.attlist ::= (onblur::Script.datatype)? (onchange::Script.datatype)? (onfocus::Script.datatype)? ;
 select.attlist ::= (disabled::"disabled")? (tabindex::Number.datatype)? ;
 select.attlist ::= Common.attrib (name::string())? (size::Number.datatype)? (multiple::"multiple")? ;
h4 ::= h4::(Heading.attrib Heading.content) ;
Length.datatype ::= string() ;
h3 ::= h3::(Heading.attrib Heading.content) ;
link.attlist ::= Common.attrib (charset::Charset.datatype)? (href::URI.datatype)? (hreflang::LanguageCode.datatype)? (type::ContentType.datatype)? (rel::LinkTypes.datatype)? (rev::LinkTypes.datatype)? (media::MediaDesc.datatype)? ;
h2 ::= h2::(Heading.attrib Heading.content) ;
lang.attrib ::= (xml:lang::LanguageCode.datatype)? ;
 lang.attrib ::= (lang::LanguageCode.datatype)? ;
h1 ::= h1::(Heading.attrib Heading.content) ;
Number.datatype ::= string() ;
target.attrib ::= (target::string())? ;
address.attlist ::= Common.attrib ;
label.attlist ::= (onblur::Script.datatype)? (onfocus::Script.datatype)? ;
 label.attlist ::= Common.attrib (for::IDREF.datatype)? (accesskey::Character.datatype)? ;
ins.attlist ::= Edit.attrib ;
kbd.attlist ::= Common.attrib ;
code.attlist ::= Common.attrib ;
isindex.attlist ::= Core.attrib I18n.attrib (prompt::Text.datatype)? ;
caption.attlist ::= align.attrib ;
 caption.attlist ::= Common.attrib ;
Block.class ::= Edit.class ;
 Block.class ::= Form.class ;
 Block.class ::= center | isindex ;
 Block.class ::= List.class ;
 Block.class ::= hr ;
 Block.class ::= Script.class ;
 Block.class ::= table ;
 Block.class ::= address | blockquote | div | p | pre | Heading.class ;
shape.attrib ::= (shape::("rect" | "circle" | "poly" | "default"))? ;
Cell.attrib ::= (nowrap::"nowrap")? (bgcolor::Color.datatype)? (width::Pixels.datatype)? (height::Pixels.datatype)? ;
 Cell.attrib ::= Common.attrib (abbr::Text.datatype)? (axis::string())? (headers::IDREFS.datatype)? scope.attrib (rowspan::Number.datatype)? (colspan::Number.datatype)? CellHAlign.attrib CellVAlign.attrib ;
Script.class ::= noscript | script ;
Inline.model ::= (string() | Inline.class)* ;
Edit.class ::= del | ins ;
tfoot.attlist ::= Common.attrib CellHAlign.attrib CellVAlign.attrib ;
head.attlist ::= I18n.attrib profile.attlist ;
ol.attlist ::= (type::string())? (compact::"compact")? (start::string())? ;
 ol.attlist ::= Common.attrib ;
frameset.attlist ::= Core.attrib (cols::MultiLength.datatype)? (rows::MultiLength.datatype)? ;
scope.attrib ::= (scope::("row" | "col" | "rowgroup" | "colgroup"))? ;
 scope.attrib ::= (scope::("row" | "col"))? ;
base.attlist ::= href::URI.datatype ;
 base.attlist ::= target.attrib ;
rules.attrib ::= (rules::("none" | "groups" | "rows" | "cols" | "all"))? ;
table.attlist ::= align.attrib (bgcolor::Color.datatype)? ;
 table.attlist ::= (width::Length.datatype)? (border::Pixels.datatype)? frame.attrib rules.attrib (cellspacing::Length.datatype)? (cellpadding::Length.datatype)? ;
 table.attlist ::= Common.attrib (summary::Text.datatype)? ;
noscript.attlist ::= Common.attrib ;
script.attlist ::= (language::ContentType.datatype)? ;
 script.attlist ::= (charset::Charset.datatype)? type::ContentType.datatype (src::URI.datatype)? (defer::"defer")? (xml:space::"preserve")? ;
input.attlist ::= (onblur::Script.datatype)? (onchange::Script.datatype)? (onfocus::Script.datatype)? (onselect::Script.datatype)? ;
 input.attlist ::= (disabled::"disabled")? (readonly::"readonly")? (alt::string())? (tabindex::Number.datatype)? (accept::ContentTypes.datatype)? ;
 input.attlist ::= Common.attrib (type::InputType.class)? (name::string())? (value::string())? (checked::"checked")? (size::string())? (maxlength::Number.datatype)? (src::URI.datatype)? (accesskey::Character.datatype)? ;
 input.attlist ::= align.attrib ;
IDREF.datatype ::= string() ;
coords.attrib ::= (coords::string())? ;
IDREFS.datatype ::= string() ;
form.attlist ::= (onreset::Script.datatype)? (onsubmit::Script.datatype)? ;
 form.attlist ::= (accept-charset::Charsets.datatype)? (accept::ContentTypes.datatype)? ;
 form.attlist ::= Common.attrib action::URI.datatype (method::("get" | "post"))? (enctype::ContentType.datatype)? ;
 form.attlist ::= name.attlist ;
 form.attlist ::= target.attrib ;
acronym.attlist ::= Common.attrib ;
img.attlist ::= usemap.attlist ;
 img.attlist ::= Common.attrib src::URI.datatype alt::Text.datatype (longdesc::URI.datatype)? (height::Length.datatype)? (width::Length.datatype)? ;
 img.attlist ::= (align::("top" | "middle" | "bottom" | "left" | "right"))? (border::Pixels.datatype)? (hspace::Pixels.datatype)? (vspace::Pixels.datatype)? ;
 img.attlist ::= name.attlist ;
 img.attlist ::= (ismap::"ismap")? ;
MultiLength.datatype ::= string() ;
CommonIdRequired.attrib ::= id::ID.datatype class.attrib title.attrib I18n.attrib ;
 CommonIdRequired.attrib ::= Events.attrib ;
Flow.model ::= (string() | Inline.class | Block.class)* ;
Script.datatype ::= string() ;
strike.attlist ::= Common.attrib ;
style.attlist ::= title.attrib I18n.attrib type::ContentType.datatype (media::MediaDesc.datatype)? (xml:space::"preserve")? ;
optgroup.attlist ::= Common.attrib (disabled::"disabled")? label::Text.datatype ;
html.attlist ::= XHTML.version.attrib I18n.attrib ;
profile.attlist ::= (profile::URI.datatype)? ;
I18n.attrib ::= lang.attrib ;
 I18n.attrib ::= dir.attrib? ;
em.attlist ::= Common.attrib ;
noframes.attlist ::= Common.attrib ;
iframe.attlist ::= Core.attrib (longdesc::URI.datatype)? (src::URI.datatype)? (frameborder::("1" | "0"))? (width::Length.datatype)? (height::Length.datatype)? (marginwidth::Pixels.datatype)? (marginheight::Pixels.datatype)? (scrolling::("yes" | "no" | "auto"))? ;
 iframe.attlist ::= name.attlist ;
pre.attlist ::= (width::Length.datatype)? ;
 pre.attlist ::= Common.attrib (xml:space::"preserve")? ;
body.attlist ::= (onload::Script.datatype)? (onunload::Script.datatype)? ;
 body.attlist ::= (background::URI.datatype)? (bgcolor::Color.datatype)? (text::Color.datatype)? (link::Color.datatype)? (vlink::Color.datatype)? (alink::Color.datatype)? ;
 body.attlist ::= Common.attrib ;
LinkTypes.datatype ::= NMTOKENS.datatype ;
ContentTypes.datatype ::= string() ;
basefont.attlist ::= id.attrib Font.attrib ;
Heading.content ::= Inline.model ;
Heading.class ::= h1 | h2 | h3 | h4 | h5 | h6 ;
frame.attrib ::= name.attlist ;
 frame.attrib ::= (frame::("void" | "above" | "below" | "hsides" | "lhs" | "rhs" | "vsides" | "box" | "border"))? ;
head.content ::= base? ;
 head.content ::= isindex? ;
 head.content ::= link* ;
 head.content ::= meta* ;
 head.content ::= script* ;
 head.content ::= title ;
 head.content ::= style* ;
Block.model ::= Block.mix+ ;
strong.attlist ::= Common.attrib ;
ul.attlist ::= (type::string())? (compact::"compact")? ;
 ul.attlist ::= Common.attrib ;
Charset.datatype ::= string() ;
Text.datatype ::= string() ;
div.attlist ::= align.attrib ;
 div.attlist ::= Common.attrib ;
dt.attlist ::= Common.attrib ;
dir.attlist ::= Common.attrib (compact::"compact")? ;
param.attlist ::= id.attrib name::string() (value::string())? (valuetype::("data" | "ref" | "object"))? (type::ContentType.datatype)? ;
area.attlist ::= Common.attrib (href::URI.datatype)? shape.attrib coords.attrib (nohref::"nohref")? alt::Text.datatype (tabindex::Number.datatype)? (accesskey::Character.datatype)? ;
 area.attlist ::= (onblur::Script.datatype)? (onfocus::Script.datatype)? ;
 area.attlist ::= target.attrib ;
name.attlist ::= (name::string())? ;
Block.mix ::= string() | Inline.class ;
 Block.mix ::= Block.class ;
dl.attlist ::= (compact::"compact")? ;
 dl.attlist ::= Common.attrib ;
ID.datatype ::= string() ;
Heading.attrib ::= align.attrib ;
 Heading.attrib ::= Common.attrib ;
tt.attlist ::= Common.attrib ;
col.attlist ::= Common.attrib (span::Number.datatype)? (width::MultiLength.datatype)? CellHAlign.attrib CellVAlign.attrib ;
dd.attlist ::= Common.attrib ;
tr.attlist ::= (bgcolor::Color.datatype)? ;
 tr.attlist ::= Common.attrib CellHAlign.attrib CellVAlign.attrib ;
li.attlist ::= (type::string())? (value::string())? ;
 li.attlist ::= Common.attrib ;
URIs.datatype ::= string() ;
dir.attrib ::= dir::("ltr" | "rtl") ;
List.class ::= dir | menu ;
 List.class ::= ul | ol | dl ;
u.attlist ::= Common.attrib ;
option.attlist ::= (disabled::"disabled")? (label::Text.datatype)? ;
URI.datatype ::= string() ;
usemap.attlist ::= (usemap::IDREF.datatype)? ;
th.attlist ::= Cell.attrib ;
s.attlist ::= Common.attrib ;
samp.attlist ::= Common.attrib ;
q.attlist ::= Common.attrib (cite::URI.datatype)? ;
td.attlist ::= Cell.attrib ;
p.attlist ::= align.attrib ;
 p.attlist ::= Common.attrib ;
ContentType.datatype ::= string() ;
link.attrib ::= target.attrib ;
frame.attlist ::= Core.attrib (longdesc::URI.datatype)? (src::URI.datatype)? (frameborder::("1" | "0"))? (marginwidth::Pixels.datatype)? (marginheight::Pixels.datatype)? (noresize::"noresize")? (scrolling::("yes" | "no" | "auto"))? ;
bdo.attlist ::= Core.attrib lang.attrib dir.attrib ;
MediaDesc.datatype ::= string() ;
i.attlist ::= Common.attrib ;
b.attlist ::= Common.attrib ;
FPI.datatype ::= string() ;
a.attlist ::= shape.attrib coords.attrib ;
 a.attlist ::= (onblur::Script.datatype)? (onfocus::Script.datatype)? ;
 a.attlist ::= Common.attrib (href::URI.datatype)? (charset::Charset.datatype)? (type::ContentType.datatype)? (hreflang::LanguageCode.datatype)? (rel::LinkTypes.datatype)? (rev::LinkTypes.datatype)? (accesskey::Character.datatype)? (tabindex::Number.datatype)? ;
 a.attlist ::= name.attlist ;
 a.attlist ::= target.attrib ;
menu.attlist ::= Common.attrib (compact::"compact")? ;
Color.datatype ::= string() ;
LanguageCode.datatype ::= string() ;
map.attlist ::= CommonIdRequired.attrib ;
 map.attlist ::= name.attlist ;
Charsets.datatype ::= string() ;
applet.attlist ::= Core.attrib alt::Text.datatype (archive::string())? (code::string())? (codebase::URI.datatype)? (object::string())? height::Length.datatype width::Length.datatype ;
 applet.attlist ::= (align::("top" | "middle" | "bottom" | "left" | "right"))? (hspace::Pixels.datatype)? (vspace::Pixels.datatype)? ;
 applet.attlist ::= name.attlist ;
title.attlist ::= I18n.attrib ;
Font.attrib ::= (size::string())? (color::Color.datatype)? (face::string())? ;
Character.datatype ::= string() ;
cite.attlist ::= Common.attrib ;
center.attlist ::= Common.attrib ;
thead.attlist ::= Common.attrib CellHAlign.attrib CellVAlign.attrib ;
br.attlist ::= (clear::("left" | "all" | "right" | "none"))? ;
 br.attlist ::= Core.attrib ;
font.attlist ::= Core.attrib I18n.attrib Font.attrib ;
title.attrib ::= (title::Text.datatype)? ;
sup.attlist ::= Common.attrib ;
Events.attrib ::= (onclick::Script.datatype)? (ondblclick::Script.datatype)? (onmousedown::Script.datatype)? (onmouseup::Script.datatype)? (onmouseover::Script.datatype)? (onmousemove::Script.datatype)? (onmouseout::Script.datatype)? (onkeypress::Script.datatype)? (onkeydown::Script.datatype)? (onkeyup::Script.datatype)? ;
span.attlist ::= Common.attrib ;
NMTOKENS.datatype ::= string() ;
Formctrl.class ::= button ;
 Formctrl.class ::= input | label | select | textarea ;
sub.attlist ::= Common.attrib ;
object.attlist ::= usemap.attlist ;
 object.attlist ::= (align::("top" | "middle" | "bottom" | "left" | "right"))? (border::Pixels.datatype)? (hspace::Pixels.datatype)? (vspace::Pixels.datatype)? ;
 object.attlist ::= Common.attrib (declare::"declare")? (classid::URI.datatype)? (codebase::URI.datatype)? (data::URI.datatype)? (type::ContentType.datatype)? (codetype::ContentType.datatype)? (archive::URIs.datatype)? (standby::Text.datatype)? (height::Length.datatype)? (width::Length.datatype)? (name::string())? (tabindex::Number.datatype)? ;
InputType.class ::= "image" | "button" ;
 InputType.class ::= "text" | "password" | "checkbox" | "radio" | "submit" | "reset" | "hidden" ;
Edit.attrib ::= (cite::URI.datatype)? (datetime::Datetime.datatype)? ;
Common.attrib ::= Core.attrib I18n.attrib ;
 Common.attrib ::= Events.attrib ;
textarea.attlist ::= (onblur::Script.datatype)? (onchange::Script.datatype)? (onfocus::Script.datatype)? (onselect::Script.datatype)? ;
 textarea.attlist ::= (disabled::"disabled")? (readonly::"readonly")? (tabindex::Number.datatype)? ;
 textarea.attlist ::= Common.attrib (name::string())? rows::Number.datatype cols::Number.datatype (accesskey::Character.datatype)? string() ;
CellVAlign.attrib ::= (valign::("top" | "middle" | "bottom" | "baseline"))? ;
 CellVAlign.attrib ::= (valign::("top" | "middle" | "bottom"))? ;
button.attlist ::= (onblur::Script.datatype)? (onfocus::Script.datatype)? ;
 button.attlist ::= Common.attrib (name::string())? (value::string())? (type::("button" | "submit" | "reset"))? (disabled::"disabled")? (tabindex::Number.datatype)? (accesskey::Character.datatype)? ;
Inline.class ::= applet ;
 Inline.class ::= bdo ;
 Inline.class ::= map ;
 Inline.class ::= Edit.class ;
 Inline.class ::= Formctrl.class ;
 Inline.class ::= a ;
 Inline.class ::= iframe ;
 Inline.class ::= img ;
 Inline.class ::= font | basefont | s | strike | u ;
 Inline.class ::= object ;
 Inline.class ::= b | big | i | small | sub | sup | tt ;
 Inline.class ::= Script.class ;
 Inline.class ::= abbr | acronym | br | cite | code | dfn | em | kbd | q | samp | span | strong | var ;
abbr.attlist ::= Common.attrib ;
class.attrib ::= (class::NMTOKENS.datatype)? ;
--------------------html::cordy.bgf--------------------
tag_beg ::= "<" id attributes ">" NL ;
singleton_id ::= "br" | "hr" | ("|" "img") | "meta" | "base" | "basefont" | x_id | "dt" ;
attribute_value ::= stringlit | number | id | url | fileref ;
equals_attribute_value ::= "=" attribute_value ;
attribute_id ::= id | x_id ;
comment_text ::= (punctuation SP) | token ;
tag_elements ::= element* ;
comment_tag ::= "<!" comment_text* ">" NL ;
text_unit ::= (punctuation SP) | (")" SP) | (SP "(") | token | ("<" number) ;
tag_end ::= "</" id ">" NL ;
singleton_tag ::= ("<" singleton_id attributes ">" singleton_tag_end? NL) | ("<" id attributes "/>" NL) ;
singleton_tag_end ::= "</" singleton_id ">" ;
--------------------html::guyard.bgf--------------------
LinkTypes ::= ε ;
TrElement ::= Th ;
 TrElement ::= Td ;
I18n ::= Map ;
ColElement ::= (cols::Col)+ (colgroup::Colgroup)+ ;
NMTOKEN ::= LanguageCode ;
TFrame ::= (void::ε) | (above::ε) | (below::ε) | (hsides::ε) | (lhs::ε) | (rhs::ε) | (vsides::ε) | (box::ε) | (border::ε) ;
IDREF ::= value::String ;
PreContent ::= Specialpre ;
MediaDesc ::= ε ;
DlElement ::= Dt ;
 DlElement ::= Dd ;
ContentType ::= ε ;
TableElement ::= (tbody::Tbody)+ (tr::Tr)+ ;
H6 ::= (h6Elements::Inline)+ ;
H5 ::= (h5Elements::Inline)+ ;
EMPTY ::= Base ;
 EMPTY ::= Meta ;
 EMPTY ::= Link ;
 EMPTY ::= Hr ;
 EMPTY ::= Br ;
 EMPTY ::= Param ;
 EMPTY ::= Img ;
 EMPTY ::= Area ;
 EMPTY ::= Input ;
 EMPTY ::= Col ;
CDATA ::= ContentType ;
 CDATA ::= Charset ;
 CDATA ::= Character ;
 CDATA ::= Number ;
 CDATA ::= LinkTypes ;
 CDATA ::= MediaDesc ;
 CDATA ::= URI ;
 CDATA ::= Datetime ;
 CDATA ::= ScriptExpression ;
 CDATA ::= StyleSheet ;
 CDATA ::= Text ;
 CDATA ::= Length ;
 CDATA ::= MultiLength ;
 CDATA ::= Pixels ;
 CDATA ::= ContentType | Charset | Character | Number | LinkTypes | MediaDesc | URI | Datetime | ScriptExpression | StyleSheet | Text | Length | MultiLength | Pixels ;
ButtonType ::= (button::ε) | (submit::ε) | (reset::ε) ;
H4 ::= (h4Elements::Inline)+ ;
ValueType ::= (data::ε) | (ref::ε) | (object::ε) ;
H3 ::= (h3Elements::Inline)+ ;
H2 ::= (h2Elements::Inline)+ ;
H1 ::= (h1Elements::Inline)+ ;
TitleHeadElement ::= title::Title (headmisc::HeadMisc)+ (baseTitleHeadElement::BaseTitleHeadElement)+ ;
CoreAttrs ::= Attrs ;
 CoreAttrs ::= Bdo ;
ScriptExpression ::= ε ;
ContentTypes ::= contentTypes::ContentType ;
CellHAlign ::= (left::ε) | (center::ε) | (right::ε) | (justify::ε) | (char::ε) ;
MultiLength ::= ε ;
MapContent ::= (mapElements::MapElement)+ ;
ObjectElement ::= Param ;
PCDATA ::= Title ;
 PCDATA ::= Style ;
 PCDATA ::= Script ;
 PCDATA ::= Textarea ;
HeadElement ::= TitleHeadElement ;
 HeadElement ::= BaseHeadElement ;
ID ::= value::String ;
IDREFS ::= (idrefs::IDREF)+ ;
BaseTitleHeadElement ::= base::Base (headmisc::HeadMisc)+ ;
FieldsetElement ::= Legend ;
TitleBaseHeadElement ::= title::Title (headmisc::HeadMisc)+ ;
CellVAlign ::= (top::ε) | (middle::ε) | (bottom::ε) | (baseline::ε) ;
StyleSheet ::= ε ;
HeadMisc ::= Meta ;
 HeadMisc ::= Style ;
URI ::= ε ;
BaseHeadElement ::= base::Base (headmisc::HeadMisc)+ (titleBaseHeadElement::TitleBaseHeadElement)+ ;
UriList ::= uris::URI ;
ValuedElement ::= CDATA ;
 ValuedElement ::= PCDATA ;
 ValuedElement ::= NMTOKEN ;
 ValuedElement ::= IDREF ;
 ValuedElement ::= ID ;
ButtonContent ::= Special ;
 ButtonContent ::= Heading ;
 ButtonContent ::= Lists ;
 ButtonContent ::= Blocktext ;
LanguageCode ::= ε ;
InputType ::= (text::ε) | (password::ε) | (checkbox::ε) | (radio::ε) | (submit::ε) | (reset::ε) | (file::ε) | (hidden::ε) | (image::ε) | (button::ε) ;
TRules ::= (none::ε) | (groups::ε) | (rows::ε) | (cols::ε) | (all::ε) ;
FomeMethod ::= (get::ε) | (post::ε) ;
SelectElement ::= Optgroup ;
 SelectElement ::= Option ;
--------------------html::clark-strict.bgf--------------------
dfn.attlist ::= Common.attrib ;
id.attrib ::= (id::ID.datatype)? ;
CellHAlign.attrib ::= (align::("left" | "center" | "right" | "justify" | "char"))? (char::Character.datatype)? (charoff::Length.datatype)? ;
 CellHAlign.attrib ::= (align::("left" | "center" | "right"))? ;
fieldset.attlist ::= Common.attrib ;
var.attlist ::= Common.attrib ;
Form.class ::= fieldset ;
 Form.class ::= form ;
XHTML.version.attrib ::= (version::FPI.datatype)? ;
tbody.attlist ::= Common.attrib CellHAlign.attrib CellVAlign.attrib ;
Pixels.datatype ::= string() ;
blockquote.attlist ::= Common.attrib (cite::URI.datatype)? ;
legend.attlist ::= Common.attrib (accesskey::Character.datatype)? ;
del.attlist ::= Edit.attrib ;
hr.attlist ::= Common.attrib ;
Core.attrib ::= id.attrib class.attrib title.attrib ;
 Core.attrib ::= (style::string())? ;
small.attlist ::= Common.attrib ;
NMTOKEN.datatype ::= string() ;
Datetime.datatype ::= string() ;
meta.attlist ::= I18n.attrib (http-equiv::NMTOKEN.datatype)? (name::NMTOKEN.datatype)? (content::string())? (scheme::string())? ;
big.attlist ::= Common.attrib ;
colgroup.attlist ::= Common.attrib (span::Number.datatype)? (width::MultiLength.datatype)? CellHAlign.attrib CellVAlign.attrib ;
h6 ::= h6::(Heading.attrib Heading.content) ;
h5 ::= h5::(Heading.attrib Heading.content) ;
select.attlist ::= (onblur::Script.datatype)? (onchange::Script.datatype)? (onfocus::Script.datatype)? ;
 select.attlist ::= (disabled::"disabled")? (tabindex::Number.datatype)? ;
 select.attlist ::= Common.attrib (name::string())? (size::Number.datatype)? (multiple::"multiple")? ;
h4 ::= h4::(Heading.attrib Heading.content) ;
Length.datatype ::= string() ;
h3 ::= h3::(Heading.attrib Heading.content) ;
link.attlist ::= Common.attrib (charset::Charset.datatype)? (href::URI.datatype)? (hreflang::LanguageCode.datatype)? (type::ContentType.datatype)? (rel::LinkTypes.datatype)? (rev::LinkTypes.datatype)? (media::MediaDesc.datatype)? ;
h2 ::= h2::(Heading.attrib Heading.content) ;
lang.attrib ::= (xml:lang::LanguageCode.datatype)? ;
h1 ::= h1::(Heading.attrib Heading.content) ;
Number.datatype ::= string() ;
target.attrib ::= (target::string())? ;
address.attlist ::= Common.attrib ;
label.attlist ::= (onblur::Script.datatype)? (onfocus::Script.datatype)? ;
 label.attlist ::= Common.attrib (for::IDREF.datatype)? (accesskey::Character.datatype)? ;
ins.attlist ::= Edit.attrib ;
code.attlist ::= Common.attrib ;
kbd.attlist ::= Common.attrib ;
caption.attlist ::= Common.attrib ;
Block.class ::= Edit.class ;
 Block.class ::= Form.class ;
 Block.class ::= List.class ;
 Block.class ::= hr ;
 Block.class ::= Script.class ;
 Block.class ::= table ;
 Block.class ::= address | blockquote | div | p | pre | Heading.class ;
shape.attrib ::= (shape::("rect" | "circle" | "poly" | "default"))? ;
Cell.attrib ::= Common.attrib (abbr::Text.datatype)? (axis::string())? (headers::IDREFS.datatype)? scope.attrib (rowspan::Number.datatype)? (colspan::Number.datatype)? CellHAlign.attrib CellVAlign.attrib ;
Script.class ::= noscript | script ;
Inline.model ::= (string() | Inline.class)* ;
Edit.class ::= del | ins ;
tfoot.attlist ::= Common.attrib CellHAlign.attrib CellVAlign.attrib ;
head.attlist ::= I18n.attrib profile.attlist ;
ol.attlist ::= Common.attrib ;
scope.attrib ::= (scope::("row" | "col" | "rowgroup" | "colgroup"))? ;
 scope.attrib ::= (scope::("row" | "col"))? ;
base.attlist ::= href::URI.datatype ;
 base.attlist ::= target.attrib ;
rules.attrib ::= (rules::("none" | "groups" | "rows" | "cols" | "all"))? ;
table.attlist ::= (width::Length.datatype)? (border::Pixels.datatype)? frame.attrib rules.attrib (cellspacing::Length.datatype)? (cellpadding::Length.datatype)? ;
 table.attlist ::= Common.attrib (summary::Text.datatype)? ;
noscript.attlist ::= Common.attrib ;
script.attlist ::= (charset::Charset.datatype)? type::ContentType.datatype (src::URI.datatype)? (defer::"defer")? (xml:space::"preserve")? ;
input.attlist ::= (onblur::Script.datatype)? (onchange::Script.datatype)? (onfocus::Script.datatype)? (onselect::Script.datatype)? ;
 input.attlist ::= (disabled::"disabled")? (readonly::"readonly")? (alt::string())? (tabindex::Number.datatype)? (accept::ContentTypes.datatype)? ;
 input.attlist ::= Common.attrib (type::InputType.class)? (name::string())? (value::string())? (checked::"checked")? (size::string())? (maxlength::Number.datatype)? (src::URI.datatype)? (accesskey::Character.datatype)? ;
IDREF.datatype ::= string() ;
coords.attrib ::= (coords::string())? ;
IDREFS.datatype ::= string() ;
form.attlist ::= (onreset::Script.datatype)? (onsubmit::Script.datatype)? ;
 form.attlist ::= (accept-charset::Charsets.datatype)? (accept::ContentTypes.datatype)? ;
 form.attlist ::= Common.attrib action::URI.datatype (method::("get" | "post"))? (enctype::ContentType.datatype)? ;
 form.attlist ::= name.attlist ;
 form.attlist ::= target.attrib ;
acronym.attlist ::= Common.attrib ;
img.attlist ::= usemap.attlist ;
 img.attlist ::= Common.attrib src::URI.datatype alt::Text.datatype (longdesc::URI.datatype)? (height::Length.datatype)? (width::Length.datatype)? ;
 img.attlist ::= name.attlist ;
 img.attlist ::= (ismap::"ismap")? ;
MultiLength.datatype ::= string() ;
CommonIdRequired.attrib ::= id::ID.datatype class.attrib title.attrib I18n.attrib ;
 CommonIdRequired.attrib ::= Events.attrib ;
Flow.model ::= (string() | Inline.class | Block.class)* ;
Script.datatype ::= string() ;
style.attlist ::= title.attrib I18n.attrib type::ContentType.datatype (media::MediaDesc.datatype)? (xml:space::"preserve")? ;
optgroup.attlist ::= Common.attrib (disabled::"disabled")? label::Text.datatype ;
html.attlist ::= XHTML.version.attrib I18n.attrib ;
profile.attlist ::= (profile::URI.datatype)? ;
I18n.attrib ::= lang.attrib ;
 I18n.attrib ::= dir.attrib? ;
em.attlist ::= Common.attrib ;
iframe.attlist ::= Core.attrib (longdesc::URI.datatype)? (src::URI.datatype)? (frameborder::("1" | "0"))? (width::Length.datatype)? (height::Length.datatype)? (marginwidth::Pixels.datatype)? (marginheight::Pixels.datatype)? (scrolling::("yes" | "no" | "auto"))? ;
 iframe.attlist ::= name.attlist ;
pre.attlist ::= Common.attrib (xml:space::"preserve")? ;
body.attlist ::= (onload::Script.datatype)? (onunload::Script.datatype)? ;
 body.attlist ::= Common.attrib ;
LinkTypes.datatype ::= NMTOKENS.datatype ;
ContentTypes.datatype ::= string() ;
Heading.content ::= Inline.model ;
Heading.class ::= h1 | h2 | h3 | h4 | h5 | h6 ;
frame.attrib ::= name.attlist ;
 frame.attrib ::= (frame::("void" | "above" | "below" | "hsides" | "lhs" | "rhs" | "vsides" | "box" | "border"))? ;
head.content ::= base? ;
 head.content ::= link* ;
 head.content ::= meta* ;
 head.content ::= script* ;
 head.content ::= title ;
 head.content ::= style* ;
Block.model ::= Block.mix+ ;
strong.attlist ::= Common.attrib ;
ul.attlist ::= Common.attrib ;
Charset.datatype ::= string() ;
Text.datatype ::= string() ;
div.attlist ::= Common.attrib ;
dt.attlist ::= Common.attrib ;
param.attlist ::= id.attrib name::string() (value::string())? (valuetype::("data" | "ref" | "object"))? (type::ContentType.datatype)? ;
area.attlist ::= Common.attrib (href::URI.datatype)? shape.attrib coords.attrib (nohref::"nohref")? alt::Text.datatype (tabindex::Number.datatype)? (accesskey::Character.datatype)? ;
 area.attlist ::= (onblur::Script.datatype)? (onfocus::Script.datatype)? ;
 area.attlist ::= target.attrib ;
name.attlist ::= (name::string())? ;
Block.mix ::= Block.class ;
dl.attlist ::= Common.attrib ;
ID.datatype ::= string() ;
Heading.attrib ::= Common.attrib ;
tt.attlist ::= Common.attrib ;
col.attlist ::= Common.attrib (span::Number.datatype)? (width::MultiLength.datatype)? CellHAlign.attrib CellVAlign.attrib ;
dd.attlist ::= Common.attrib ;
tr.attlist ::= Common.attrib CellHAlign.attrib CellVAlign.attrib ;
li.attlist ::= Common.attrib ;
URIs.datatype ::= string() ;
dir.attrib ::= dir::("ltr" | "rtl") ;
List.class ::= ul | ol | dl ;
option.attlist ::= (disabled::"disabled")? (label::Text.datatype)? ;
URI.datatype ::= string() ;
usemap.attlist ::= (usemap::IDREF.datatype)? ;
th.attlist ::= Cell.attrib ;
samp.attlist ::= Common.attrib ;
q.attlist ::= Common.attrib (cite::URI.datatype)? ;
p.attlist ::= Common.attrib ;
td.attlist ::= Cell.attrib ;
ContentType.datatype ::= string() ;
link.attrib ::= target.attrib ;
bdo.attlist ::= Core.attrib lang.attrib dir.attrib ;
MediaDesc.datatype ::= string() ;
i.attlist ::= Common.attrib ;
b.attlist ::= Common.attrib ;
FPI.datatype ::= string() ;
a.attlist ::= shape.attrib coords.attrib ;
 a.attlist ::= (onblur::Script.datatype)? (onfocus::Script.datatype)? ;
 a.attlist ::= Common.attrib (href::URI.datatype)? (charset::Charset.datatype)? (type::ContentType.datatype)? (hreflang::LanguageCode.datatype)? (rel::LinkTypes.datatype)? (rev::LinkTypes.datatype)? (accesskey::Character.datatype)? (tabindex::Number.datatype)? ;
 a.attlist ::= name.attlist ;
 a.attlist ::= target.attrib ;
LanguageCode.datatype ::= string() ;
map.attlist ::= CommonIdRequired.attrib ;
 map.attlist ::= name.attlist ;
Charsets.datatype ::= string() ;
applet.attlist ::= Core.attrib alt::Text.datatype (archive::string())? (code::string())? (codebase::URI.datatype)? (object::string())? height::Length.datatype width::Length.datatype ;
 applet.attlist ::= name.attlist ;
title.attlist ::= I18n.attrib ;
Character.datatype ::= string() ;
cite.attlist ::= Common.attrib ;
thead.attlist ::= Common.attrib CellHAlign.attrib CellVAlign.attrib ;
br.attlist ::= Core.attrib ;
title.attrib ::= (title::Text.datatype)? ;
sup.attlist ::= Common.attrib ;
Events.attrib ::= (onclick::Script.datatype)? (ondblclick::Script.datatype)? (onmousedown::Script.datatype)? (onmouseup::Script.datatype)? (onmouseover::Script.datatype)? (onmousemove::Script.datatype)? (onmouseout::Script.datatype)? (onkeypress::Script.datatype)? (onkeydown::Script.datatype)? (onkeyup::Script.datatype)? ;
span.attlist ::= Common.attrib ;
NMTOKENS.datatype ::= string() ;
Formctrl.class ::= button ;
 Formctrl.class ::= input | label | select | textarea ;
sub.attlist ::= Common.attrib ;
object.attlist ::= usemap.attlist ;
 object.attlist ::= Common.attrib (declare::"declare")? (classid::URI.datatype)? (codebase::URI.datatype)? (data::URI.datatype)? (type::ContentType.datatype)? (codetype::ContentType.datatype)? (archive::URIs.datatype)? (standby::Text.datatype)? (height::Length.datatype)? (width::Length.datatype)? (name::string())? (tabindex::Number.datatype)? ;
InputType.class ::= "image" | "button" ;
 InputType.class ::= "text" | "password" | "checkbox" | "radio" | "submit" | "reset" | "hidden" ;
Edit.attrib ::= (cite::URI.datatype)? (datetime::Datetime.datatype)? ;
Common.attrib ::= Core.attrib I18n.attrib ;
 Common.attrib ::= Events.attrib ;
textarea.attlist ::= (onblur::Script.datatype)? (onchange::Script.datatype)? (onfocus::Script.datatype)? (onselect::Script.datatype)? ;
 textarea.attlist ::= (disabled::"disabled")? (readonly::"readonly")? (tabindex::Number.datatype)? ;
 textarea.attlist ::= Common.attrib (name::string())? rows::Number.datatype cols::Number.datatype (accesskey::Character.datatype)? string() ;
CellVAlign.attrib ::= (valign::("top" | "middle" | "bottom" | "baseline"))? ;
 CellVAlign.attrib ::= (valign::("top" | "middle" | "bottom"))? ;
button.attlist ::= (onblur::Script.datatype)? (onfocus::Script.datatype)? ;
 button.attlist ::= Common.attrib (name::string())? (value::string())? (type::("button" | "submit" | "reset"))? (disabled::"disabled")? (tabindex::Number.datatype)? (accesskey::Character.datatype)? ;
Inline.class ::= applet ;
 Inline.class ::= bdo ;
 Inline.class ::= map ;
 Inline.class ::= Edit.class ;
 Inline.class ::= Formctrl.class ;
 Inline.class ::= a ;
 Inline.class ::= iframe ;
 Inline.class ::= img ;
 Inline.class ::= object ;
 Inline.class ::= b | big | i | small | sub | sup | tt ;
 Inline.class ::= Script.class ;
 Inline.class ::= abbr | acronym | br | cite | code | dfn | em | kbd | q | samp | span | strong | var ;
abbr.attlist ::= Common.attrib ;
class.attrib ::= (class::NMTOKENS.datatype)? ;
--------------------javascript::synytskyy-cordy.bgf--------------------
js_logical_or_logical_and_expn ::= "||" js_logical_and_expn ;
js_subscripts ::= "[" js_expn "]" ;
js_conditional_clause ::= "?" js_assignment_expn ":" js_assignment_expn ;
js_label ::= id ":" ;
js_bitwise_or_bitwise_xor_expn ::= "|" js_bitwise_xor_expn ;
js_statement ::= (js_compound_statement ";"?) | (js_expression_statement ";"?) | (js_if_statement ";"?) | (js_for_statement ";"?) | (js_while_statement ";"?) | (js_break_statement ";"?) | (js_continue_statement ";"?) | (js_return_statement ";"?) | (js_with_statement ";"?) | (js_switch_statement ";"?) | (js_do_statement ";"?) | (js_try_catch_statement ";"?) | (js_throw_statement ";"?) | (js_debugger_statement ";"?) | js_empty_statement ;
js_shift_op_additive_expn ::= js_shift_op js_additive_expn ;
js_multiplicative_op ::= "*" | "/" | "%" ;
js_shift_op ::= "<<" | ">>" | ">>>" ;
js_try_catch_statement ::= "try" js_compound_statement js_catch_clause? js_finally_clause? ;
js_do_statement ::= "do" js_statement "while" "(" js_expn ")" ;
assign_js_conditional_expn ::= js_assignment_op js_conditional_expn ;
js_variable_description ::= id js_variable_initialization? ;
js_declaration_or_statement ::= (js_declaration NL) | (js_label? js_statement NL) | (comment NL) ;
js_variable_declaration ::= "var" {js_variable_description ","}* ;
js_with_statement ::= "with" "(" js_expn ")" js_statement ;
js_while_statement ::= "while" "(" js_expn ")" js_statement ;
js_declaration_or_statement_no_nl ::= (js_declaration) | js_statement ;
js_case_clause ::= js_case_clause_value NL IN js_subscope EX ;
js_object_literal ::= "{" {js_property_assignment ","}* ","? "}" ;
js_finally_clause ::= NL "finally" js_compound_statement ;
js_throw_statement ::= "throw" js_expn ;
js_arguments ::= "(" {js_assignment_expn ","}* ")" ;
js_bitwise_and_expn ::= js_equality_expn js_bitwise_and_equality_expn* ;
js_case_clause_value ::= ("case" js_expn ":") | ("default" ":") ;
js_switch_statement ::= "switch" "(" js_expn ")" "{" NL js_case_clause* "}" ;
js_regular_expn_literal ::= js_regexp ;
js_bitwise_xor_expn ::= js_bitwise_and_expn js_bitwise_xor_bitwise_and_expn* ;
js_property_set_parameter ::= id ;
js_return_statement ::= "return" js_expn? ;
js_array_literal ::= "[" {js_array_element ","}* "]" ;
js_equality_op ::= "==" | "!=" | "===" | "!==" | "in" | "instanceof" ;
js_variable_initialization ::= "=" js_assignment_expn ;
js_relational_op_shift_expn ::= js_relational_op js_shift_expn ;
js_subscope ::= js_declaration_or_statement* ;
js_bitwise_or_expn ::= js_bitwise_xor_expn js_bitwise_or_bitwise_xor_expn* ;
js_function_declaration ::= NL "function" id "(" {js_formal_parameter ","}* ")" NL "{" NL IN js_subscope EX "}" NL ;
js_shift_expn ::= js_additive_expn js_shift_op_additive_expn* ;
js_multiplicative_expn ::= js_unary_expn js_multiplicative_op_unary_expn* ;
js_primary_expn ::= "this" | "class" | id | js_literal | js_array_literal | js_object_literal | js_function_expn | ("(" js_expn ")") ;
js_conditional_expn ::= js_logical_or_expn js_conditional_clause? ;
js_else_clause ::= "else" js_declaration_or_statement ;
js_property_name ::= id | js_string_literal | number ;
js_expression_statement ::= js_expn ;
js_additive_op ::= "+" | "-" ;
js_field_selector ::= "." id ;
js_break_statement ::= "break" id? ;
js_additive_op_multiplicative_expn ::= js_additive_op js_multiplicative_expn ;
js_literal ::= "null" | "true" | "false" | js_numeric_literal | js_string_literal | js_regular_expn_literal ;
js_string_literal ::= stringlit | charlit ;
js_unary_expn ::= js_unary_op* js_postfix_expn ;
js_postfix_expn ::= js_lefthand_side_expn js_postfix_op? ;
js_assignment_expn ::= js_conditional_expn assign_js_conditional_expn* ;
js_multiplicative_op_unary_expn ::= js_multiplicative_op js_unary_expn ;
js_logical_and_bitwise_or_expn ::= "&&" js_bitwise_or_expn ;
js_bitwise_and_equality_expn ::= "&" js_equality_expn ;
js_catch_clause ::= NL "catch" "(" id ")" js_compound_statement ;
js_unary_op ::= "delete" | "void" | "typeof" | "++" | "--" | "+" | "-" | "~" | "!" ;
js_expn ::= js_assignment_expn+ ;
js_postfix_op ::= "++" | "--" ;
js_logical_or_expn ::= js_logical_and_expn js_logical_or_logical_and_expn* ;
js_array_element ::= js_assignment_expn? ;
js_equality_expn ::= js_relational_expn js_equality_op_relational_expn* ;
js_assignment_op ::= "=" | "*=" | ("/" SPOFF "=" SPON) | "%=" | "+=" | "-=" | "<<=" | ">>=" | ">>>=" | "&=" | "^=" | "|=" ;
js_equality_op_relational_expn ::= js_equality_op js_relational_expn ;
js_constant_description ::= id js_variable_initialization ;
js_selector ::= js_arguments | js_subscripts | js_field_selector ;
js_constant_declaration ::= "const" {js_constant_description ","}* ;
js_relational_expn ::= js_shift_expn js_relational_op_shift_expn* ;
js_compound_statement ::= "{" NL IN js_subscope EX "}" ;
js_formal_parameter ::= id ;
js_bitwise_xor_bitwise_and_expn ::= "^" js_bitwise_and_expn ;
js_additive_expn ::= js_multiplicative_expn js_additive_op_multiplicative_expn* ;
js_program ::= js_declaration_or_statement* ;
js_continue_statement ::= "continue" id? ;
js_debugger_statement ::= "debugger" ;
js_empty_statement ::= ";" ;
js_numeric_literal ::= number | js_hex_number ;
js_lefthand_side_expn ::= "new"? js_member_expn ;
js_logical_and_expn ::= js_bitwise_or_expn js_logical_and_bitwise_or_expn* ;
js_declaration ::= (js_variable_declaration ";"?) | (js_constant_declaration ";"?) | (js_function_declaration ";"?) ;
js_for_statement ::= ("for" "(" {js_declaration_or_statement_no_nl ","}* ";" js_expn? ";" js_expn? ")" js_statement) | ("for" "each"? "(" js_declaration_or_statement_no_nl "in" js_expn ")" js_statement) ;
js_if_statement ::= "if" "(" js_expn ")" js_declaration_or_statement js_else_clause? ;
js_relational_op ::= "<" | ">" | "<=" | ">=" ;
js_function_expn ::= "function" id? "(" {js_formal_parameter ","}* ")" NL "{" NL IN js_subscope EX "}" ;
js_property_assignment ::= (js_property_name ":" js_expn) | ("get" js_property_name "(" ")" "{" js_subscope "}") | ("set" js_property_name "(" js_property_set_parameter ")" "{" js_subscope "}") ;
js_member_expn ::= js_primary_expn js_selector* ;
--------------------occam::mu-mitchell.bgf--------------------
relational-expression ::= shift-expression relational-expression "<" shift-expression relational-expression ">" shift-expression relational-expression "<=" shift-expression relational-expression ">=" shift-expression ;
logical-or-expression ::= logical-and-expression logical-or-expression "||" logical-and-expression ;
template-name ::= identifier ;
init-declarator-list ::= init-declarator init-declarator-list "," init-declarator ;
exception-declaration ::= type-specifier-seq declarator type-specifier-seq abstract-declarator type-specifier-seq "..." ;
enumerator-definition ::= enumerator enumerator "=" constant-expression ;
try-block ::= "try" compound-statement handler-seq ;
linkage-specification ::= "extern" string-literal "{" declaration-seq? "}" "extern" string-literal declaration ;
delete-expression ::= "::"? "delete" cast-expression "::"? "delete" "[" "]" cast-expression ;
conversion-function-id ::= "operator" conversion-type-id ;
new-placement ::= "(" expression-list ")" ;
unary-expression ::= postfix-expression "++" cast-expression "--" cast-expression unary-operator cast-expression "sizeof" unary-expression "sizeof" "(" type-id ")" new-expression delete-expression ;
template-parameter-list ::= template-parameter template-parameter-list "," template-parameter ;
enum-specifier ::= "enum" identifier? "{" enumerator-list? "}" ;
postfix-expression ::= primary-expression postfix-expression "[" expression "]" postfix-expression "(" expression-list? ")" simple-type-specifier "(" expression-list? ")" "typename" "::"? nested-name-specifier identifier "(" expression-list? ")" "typename" "::"? nested-name-specifier "template"? template-id "(" expression-list? ")" postfix-expression "." "template"? id-expression postfix-expression "->" "template"? id-expression postfix-expression "." pseudo-destructor-name postfix-expression "->" pseudo-destructor-name postfix-expression "++" postfix-expression "--" "dynamic_cast" "<" type-id ">" "(" expression ")" "static_cast" "<" type-id ">" "(" expression ")" "reinterpret_cast" "<" type-id ">" "(" expression ")" "const_cast" "<" type-id ">" "(" expression ")" "typeid" "(" expression ")" "typeid" "(" type-id ")" ;
decl-specifier-seq ::= decl-specifier-seq? decl-specifier ;
qualified-id ::= "::"? nested-name-specifier "template"? unqualified-id "::" identifier "::" operator-function-id "::" template-id ;
base-clause ::= ":" base-specifier-list ;
type-specifier ::= simple-type-specifier class-specifier enum-specifier elaborated-type-specifier cv-qualifier ;
mem-initializer ::= mem-initializer-id "(" expression-list? ")" ;
cast-expression ::= unary-expression "(" type-id ")" cast-expression ;
asm-definition ::= "asm" "(" string-literal ")" ";" ;
new-expression ::= "::"? "new" new-placement? new-type-id new-initializer? "::"? "new" new-placement? "(" type-id ")" new-initializer? ;
cv-qualifier-seq ::= cv-qualifier cv-qualifier-seq? ;
direct-new-declarator ::= "[" expression "]" direct-new-declarator "[" constant-expression "]" ;
throw-expression ::= "throw" assignment-expression? ;
simple-declaration ::= decl-specifier-seq? init-declarator-list? ";" ;
mem-initializer-id ::= "::"? nested-name-specifier? class-name identifier ;
declaration-statement ::= block-declaration ;
direct-abstract-declarator ::= direct-abstract-declarator? "(" parameter-declaration-clause ")" cv-qualifier-seq? exception-specification? direct-abstract-declarator? "[" constant-expression? "]" "(" abstract-declarator ")" ;
enum-name ::= identifier ;
conversion-type-id ::= type-specifier-seq conversion-declarator? ;
type-parameter ::= "class" identifier? "class" identifier? "=" type-id "typename" identifier? "typename" identifier? "=" type-id "template" "<" template-parameter-list ">" "class" identifier? "template" "<" template-parameter-list ">" "class" identifier? "=" id-expression ;
namespace-body ::= declaration-seq? ;
extension-namespace-definition ::= "namespace" original-namespace-name "{" namespace-body "}" ;
exclusive-or-expression ::= and-expression exclusive-or-expression "^" and-expression ;
class-or-namespace-name ::= class-name namespace-name ;
cv-qualifier ::= "const" "volatile" ;
pseudo-destructor-name ::= "::"? nested-name-specifier? type-name "::" "~" type-name "::"? nested-name-specifier "template" template-id "::" "~" type-name "::"? nested-name-specifier? "~" type-name ;
compound-statement ::= "{" statement-seq? "}" ;
base-specifier-list ::= base-specifier base-specifier-list "," base-specifier ;
member-declaration ::= decl-specifier-seq? member-declarator-list? ";" function-definition ";"? "::"? nested-name-specifier "template"? unqualified-id ";" using-declaration template-declaration ;
parameter-declaration-clause ::= parameter-declaration-list? "..."? parameter-declaration-list "," "..." ;
shift-expression ::= additive-expression shift-expression "<<" additive-expression shift-expression ">>" additive-expression ;
base-specifier ::= "::"? nested-name-specifier? class-name "virtual" access-specifier? "::"? nested-name-specifier? class-name access-specifier "virtual"? "::"? nested-name-specifier? class-name ;
class-name ::= identifier template-id ;
namespace-name ::= original-namespace-name namespace-alias ;
abstract-declarator ::= ptr-operator abstract-declarator? direct-abstract-declarator ;
initializer-clause ::= assignment-expression "{" initializer-list ","? "}" "{" "}" ;
labeled-statement ::= identifier ":" statement "case" constant-expression ":" statement "default" ":" statement ;
parameter-declaration-list ::= parameter-declaration parameter-declaration-list "," parameter-declaration ;
expression-list ::= assignment-expression expression-list "," assignment-expression ;
using-declaration ::= "using" "typename"? "::"? nested-name-specifier unqualified-id ";" "using" "::" unqualified-id ";" ;
template-argument ::= assignment-expression type-id id-expression ;
ctor-initializer ::= ":" mem-initializer-list ;
class-specifier ::= class-head "{" member-specification? "}" ;
initializer-list ::= initializer-clause initializer-list "," initializer-clause ;
template-declaration ::= "export"? "template" "<" template-parameter-list ">" declaration ;
assignment-operator ::= "=" | "*=" | "/=" | "%=" | "+=" | "-=" | ">>=" | "<<=" | "&=" | "^=" | "|=" ;
ptr-operator ::= "*" cv-qualifier-seq? "&" "::"? nested-name-specifier "*" cv-qualifier-seq? ;
mem-initializer-list ::= mem-initializer mem-initializer "," mem-initializer-list ;
inclusive-or-expression ::= exclusive-or-expression inclusive-or-expression "|" exclusive-or-expression ;
template-argument-list ::= template-argument template-argument-list "," template-argument ;
assignment-expression ::= conditional-expression logical-or-expression assignment-operator assignment-expression throw-expression ;
access-specifier ::= "private" "protected" "public" ;
direct-declarator ::= declarator-id direct-declarator "(" parameter-declaration-clause ")" cv-qualifier-seq? exception-specification? direct-declarator "[" constant-expression? "]" "(" declarator ")" ;
logical-and-expression ::= inclusive-or-expression logical-and-expression "&&" inclusive-or-expression ;
nested-name-specifier ::= class-or-namespace-name "::" nested-name-specifier? class-or-namespace-name "::" "template" nested-name-specifier ;
jump-statement ::= "break" ";" "continue" ";" "return" expression? ";" "goto" identifier ";" ;
type-id ::= type-specifier-seq abstract-declarator? ;
typedef-name ::= identifier ;
declaration-seq ::= declaration declaration-seq declaration ;
class-key ::= "class" "struct" "union" ;
id-expression ::= unqualified-id qualified-id ;
member-declarator-list ::= member-declarator member-declarator-list "," member-declarator ;
operator-function-id ::= "operator" operator ;
unary-operator ::= "*" | "&" | "+" | "-" | "!" | "~" ;
original-namespace-definition ::= "namespace" identifier "{" namespace-body "}" ;
iteration-statement ::= "while" "(" condition ")" statement "do" statement "while" "(" expression ")" ";" "for" "(" for-init-statement condition? ";" expression? ")" statement ;
new-declarator ::= ptr-operator new-declarator? direct-new-declarator ;
type-id-list ::= type-id type-id-list "," type-id ;
type-specifier-seq ::= type-specifier type-specifier-seq? ;
expression-statement ::= expression? ";" ;
function-body ::= compound-statement ;
for-init-statement ::= expression-statement simple-declaration ;
explicit-instantiation ::= "template" declaration ;
unnamed-namespace-definition ::= "namespace" "{" namespace-body "}" ;
multiplicative-expression ::= pm-expression multiplicative-expression "*" pm-expression multiplicative-expression "/" pm-expression multiplicative-expression "%" pm-expression ;
selection-statement ::= "if" "(" condition ")" statement "if" "(" condition ")" statement "else" statement "switch" "(" condition ")" statement ;
function-definition ::= decl-specifier-seq? declarator ctor-initializer? function-body decl-specifier-seq? declarator function-try-block ;
pm-expression ::= cast-expression pm-expression ".*" cast-expression pm-expression "->*" cast-expression ;
simple-type-specifier ::= "::"? nested-name-specifier? type-name "::"? nested-name-specifier "template" template-id "char" "wchar_t" "bool" "short" "int" "long" "signed" "unsigned" "float" "double" "void" ;
constant-expression ::= conditional-expression ;
new-type-id ::= type-specifier-seq new-declarator? ;
namespace-alias ::= identifier ;
handler-seq ::= handler handler-seq? ;
decl-specifier ::= storage-class-specifier type-specifier function-specifier "friend" "typedef" ;
storage-class-specifier ::= "auto" "register" "static" "extern" "mutable" ;
parameter-declaration ::= decl-specifier-seq declarator decl-specifier-seq declarator "=" assignment-expression decl-specifier-seq abstract-declarator? decl-specifier-seq abstract-declarator? "=" assignment-expression ;
template-id ::= template-name "<" template-argument-list? ">" ;
and-expression ::= equality-expression and-expression "&" equality-expression ;
equality-expression ::= relational-expression equality-expression "==" relational-expression equality-expression "!=" relational-expression ;
conversion-declarator ::= ptr-operator conversion-declarator? ;
function-try-block ::= "try" ctor-initializer? function-body handler-seq ;
using-directive ::= "using" "namespace" "::"? nested-name-specifier? namespace-name ";" ;
explicit-specialization ::= "template" "<" ">" declaration ;
member-declarator ::= declarator pure-specifier? declarator constant-initializer? identifier? ":" constant-expression ;
primary-expression ::= literal "this" "(" expression ")" id-expression ;
conditional-expression ::= logical-or-expression logical-or-expression "?" expression ":" assignment-expression ;
type-name ::= class-name enum-name typedef-name ;
elaborated-type-specifier ::= class-key "::"? nested-name-specifier? identifier "enum" "::"? nested-name-specifier? identifier "typename" "::"? nested-name-specifier identifier "typename" "::"? nested-name-specifier "template"? template-id ;
block-declaration ::= simple-declaration asm-definition namespace-alias-definition using-declaration using-directive ;
constant-initializer ::= "=" constant-expression ;
original-namespace-name ::= identifier ;
additive-expression ::= multiplicative-expression additive-expression "+" multiplicative-expression additive-expression "-" multiplicative-expression ;
declarator-id ::= id-expression "::"? nested-name-specifier? type-name ;
new-initializer ::= "(" expression-list? ")" ;
pure-specifier ::= "=" "0" ;
namespace-alias-definition ::= "namespace" identifier "=" qualified-namespace-specifier ";" ;
translation-unit ::= declaration-seq? ;
qualified-namespace-specifier ::= "::"? nested-name-specifier? namespace-name ;
named-namespace-definition ::= original-namespace-definition extension-namespace-definition ;
template-parameter ::= type-parameter parameter-declaration ;
class-head ::= class-key identifier? base-clause? class-key nested-name-specifier identifier base-clause? class-key nested-name-specifier? template-id base-clause? ;
member-specification ::= member-declaration member-specification? access-specifier ":" member-specification? ;
init-declarator ::= declarator initializer? ;
function-specifier ::= "inline" "virtual" "explicit" ;
enumerator-list ::= enumerator-definition enumerator-list "," enumerator-definition ;
exception-specification ::= "throw" "(" type-id-list? ")" ;
namespace-definition ::= named-namespace-definition unnamed-namespace-definition ;
unqualified-id ::= identifier operator-function-id conversion-function-id "~" class-name template-id ;
statement-seq ::= statement statement-seq statement ;
--------------------occam::mu-srour.bgf--------------------
NormalConditional ::= choice::Choice ;
ReplicatorAlternation ::= replicator::Replicator ;
BooleanGuard ::= boolean::BooleanRef ;
InputGuard ::= input::Input ;
LiteralOperand ::= integer::Integer ;
ValDeclaration ::= name::String expression::Expression ;
DyadicOperator ::= plus::Boolean minus::Boolean star::Boolean slash::Boolean or::Boolean inverseSlash::Boolean and::Boolean eq::Boolean ne::Boolean lt::Boolean gt::Boolean le::Boolean ge::Boolean ;
NormalAlternation ::= process::Process ;
ProcedureBody ::= name::String process::Process ;
ExpressionOperand ::= operand::Operand ;
SkipProcess ::= ε ;
NormalParallel ::= process::Process ;
MonadicOperator ::= minus::Boolean not::Boolean ;
VariableOPerand ::= element::Element ;
StopProcess ::= ε ;
IntDeclaration ::= name::String expression::Expression ;
BooleanRef ::= expression::Expression ;
SimpleExpression ::= operand::Operand ;
DyadicExpression ::= operandRight::Operand dyadicOperator::DyadicOperator ;
NormalSequence ::= process::Process ;
ReplicatorConditional ::= replicator::Replicator ;
ReplicatorParallel ::= replicator::Replicator ;
MonadicExpression ::= monadicOperator::MonadicOperator ;
PrimitiveType ::= isInt::Boolean isChan::Boolean ;
TypeDeclaration ::= type::Type ;
ReplicatorSequence ::= replicator::Replicator ;
--------------------occam::srour.bgf--------------------
OCCAM_Element ::= Process ;
 OCCAM_Element ::= Action ;
 OCCAM_Element ::= Constructor ;
 OCCAM_Element ::= DataType ;
 OCCAM_Element ::= name::String ;
DataType ::= dataType::String ;
OCCAM_Program ::= (occam_Elements::OCCAM_Element)+ (files::File)+ ;
--------------------odf::opendoc-1.0-manifest.bgf--------------------
key-derivation-attlist ::= manifest:key-derivation-name::string() ;
 key-derivation-attlist ::= manifest:salt::string() ;
 key-derivation-attlist ::= manifest:iteration-count::integer() ;
encryption-data-attlist ::= manifest:checksum-type::string() ;
 encryption-data-attlist ::= manifest:checksum::string() ;
key-derivation ::= manifest:key-derivation::key-derivation-attlist ;
encryption-data ::= manifest:encryption-data::(encryption-data-attlist algorithm key-derivation) ;
file-entry-attlist ::= manifest:full-path::string() ;
 file-entry-attlist ::= (manifest:size::integer())? ;
 file-entry-attlist ::= manifest:media-type::string() ;
algorithm-attlist ::= manifest:algorithm-name::string() ;
 algorithm-attlist ::= manifest:initialisation-vector::string() ;
file-entry ::= manifest:file-entry::(file-entry-attlist encryption-data?) ;
--------------------odf::opendoc-1.0-strict.bgf--------------------
style-font-face ::= style:font-face::(style-font-face-attlist svg-font-face-src? svg-definition-src?) ;
svg-linearGradient ::= svg:linearGradient::(common-svg-gradient-attlist (svg:x1::(coordinate | percent))? (svg:y1::(coordinate | percent))? (svg:x2::(coordinate | percent))? (svg:y2::(coordinate | percent))? svg-stop*) ;
style-page-layout-attlist ::= style:name::styleName ;
 style-page-layout-attlist ::= (style:page-usage::("all" | "left" | "right" | "mirrored"))? ;
number-seconds ::= number:seconds::number-seconds-attlist ;
number-currency-style ::= number:currency-style::(common-data-style-attlist common-auto-reorder-attlist style-text-properties? number-text? ((number-and-text currency-symbol-and-text?) | (currency-symbol-and-text number-and-text?))? style-map*) ;
number-fraction-attlist ::= (number:min-numerator-digits::integer)? ;
 number-fraction-attlist ::= (number:min-denominator-digits::integer)? ;
 number-fraction-attlist ::= (number:denominator-value::integer)? ;
table-covered-table-cell ::= table:covered-table-cell::(table-table-cell-attlist table-table-cell-content) ;
text-notes-configuration-content ::= text-note-class ;
 text-notes-configuration-content ::= (text:citation-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:citation-body-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:default-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:master-page-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:start-value::nonNegativeInteger)? ;
 text-notes-configuration-content ::= common-num-format-prefix-suffix-attlist common-num-format-attlist? ;
 text-notes-configuration-content ::= (text:start-numbering-at::("document" | "chapter" | "page"))? ;
 text-notes-configuration-content ::= (text:footnotes-position::("text" | "page" | "section" | "document"))? ;
 text-notes-configuration-content ::= (text:note-continuation-notice-forward::string())? ;
 text-notes-configuration-content ::= (text:note-continuation-notice-backward::string())? ;
draw-applet-attlist ::= (draw:code::string())? ;
 draw-applet-attlist ::= (draw:object::string())? ;
 draw-applet-attlist ::= (draw:archive::string())? ;
 draw-applet-attlist ::= (draw:may-script::boolean)? ;
text-list-item-content ::= text-number? (text-p | text-h | text-list)* ;
style-header-footer-properties-content-strict ::= style-header-footer-properties-attlist style-header-footer-properties-elements ;
number-scientific-number ::= number:scientific-number::(number-scientific-number-attlist common-decimal-places-attlist common-number-attlist) ;
presentation-hide-shape ::= presentation:hide-shape::(common-presentation-effect-attlist presentation-sound?) ;
text-number ::= text:number::string ;
common-title-attlist ::= (form:title::string())? ;
draw-object ::= draw:object::(draw-object-attlist common-draw-data-attlist | office-document | math-math) ;
table-data-pilot-table-attlist ::= table:name::string ;
 table-data-pilot-table-attlist ::= (table:application-data::string)? ;
 table-data-pilot-table-attlist ::= (table:grand-total::("none" | "row" | "column" | "both"))? ;
 table-data-pilot-table-attlist ::= (table:ignore-empty-rows::boolean)? ;
 table-data-pilot-table-attlist ::= (table:identify-categories::boolean)? ;
 table-data-pilot-table-attlist ::= table:target-range-address::cellRangeAddress ;
 table-data-pilot-table-attlist ::= (table:buttons::cellRangeAddressList)? ;
 table-data-pilot-table-attlist ::= (table:show-filter-button::boolean)? ;
 table-data-pilot-table-attlist ::= (table:drill-down-on-double-click::boolean)? ;
table-sort-by ::= table:sort-by::table-sort-by-attlist ;
presentation-hide-text ::= presentation:hide-text::(common-presentation-effect-attlist presentation-sound?) ;
style-drawing-page-properties-content-strict ::= style-graphic-fill-properties-attlist style-drawing-page-properties-attlist style-drawing-page-properties-elements ;
anyURI ::= string() ;
style-ruby-properties-content-strict ::= style-ruby-properties-attlist style-ruby-properties-elements ;
style-tab-stop-char-attlist ::= style:char::character ;
table-deletion-attlist ::= table:type::("row" | "column" | "table") ;
 table-deletion-attlist ::= table:position::integer ;
 table-deletion-attlist ::= (table:table::integer)? ;
 table-deletion-attlist ::= (table:multi-deletion-spanned::integer)? ;
number-text-content ::= number:text-content::ε ;
styleName ::= string() ;
draw-plugin ::= draw:plugin::(draw-plugin-attlist common-draw-data-attlist draw-param*) ;
table-database-source-query-attlist ::= table:database-name::string ;
 table-database-source-query-attlist ::= table:query-name::string ;
office-drawing-content-prelude ::= text-decls table-decls ;
text-content ::= text-h | text-p | text-list | text-numbered-paragraph | table-table | draw-a | text-section | text-table-of-content | text-illustration-index | text-table-index | text-object-index | text-user-index | text-alphabetical-index | text-bibliography | shape | change-marks ;
draw-area-rectangle ::= draw:area-rectangle::(common-draw-area-attlist svg:x::coordinate svg:y::coordinate svg:width::length svg:height::length svg-desc? office-event-listeners?) ;
table-table-rows ::= table:table-rows::(table-table-row+) ;
style-tab-stop ::= style:tab-stop::style-tab-stop-attlist ;
number-date-style ::= number:date-style::(common-data-style-attlist common-auto-reorder-attlist common-format-source-attlist style-text-properties? number-text? (any-date number-text?)+ style-map*) ;
draw-marker-attlist ::= draw:name::styleName ;
 draw-marker-attlist ::= (draw:display-name::string)? ;
chart-grid ::= chart:grid::chart-grid-attlist ;
table-table-cell-attlist-extra ::= (table:number-columns-spanned::positiveInteger)? (table:number-rows-spanned::positiveInteger)? ;
 table-table-cell-attlist-extra ::= (table:number-matrix-columns-spanned::positiveInteger)? (table:number-matrix-rows-spanned::positiveInteger)? ;
common-text-spreadsheet-shape-attlist ::= (table:end-cell-address::cellAddress)? (table:end-x::coordinate)? (table:end-y::coordinate)? ;
 common-text-spreadsheet-shape-attlist ::= (table:table-background::boolean)? ;
 common-text-spreadsheet-shape-attlist ::= common-text-anchor-attlist ;
common-draw-text-style-name-attlist ::= (draw:text-style-name::styleNameRef)? ;
table-shapes ::= table:shapes::(shape+) ;
style-graphic-properties-elements ::= ε ;
 style-graphic-properties-elements ::= text-list-style? ;
 style-graphic-properties-elements ::= style-background-image ;
 style-graphic-properties-elements ::= style-columns ;
text-p ::= text:p::(paragraph-attrs paragraph-content*) ;
common-style-header-footer-attlist ::= (style:display::boolean)? ;
draw-line-attlist ::= svg:x1::coordinate svg:y1::coordinate ;
 draw-line-attlist ::= svg:x2::coordinate svg:y2::coordinate ;
table-movement ::= table:movement::(common-table-change-attlist table-source-range-address table-target-range-address office-change-info table-dependencies? table-deletions?) ;
script-event-listener ::= script:event-listener::script-event-listener-attlist ;
style-tab-stop-attlist ::= style:position::nonNegativeLength ;
 style-tab-stop-attlist ::= ((style:type::("left" | "center" | "right"))?) | (style:type::"char" style-tab-stop-char-attlist) ;
 style-tab-stop-attlist ::= (style:leader-type::lineType)? ;
 style-tab-stop-attlist ::= (style:leader-style::lineStyle)? ;
 style-tab-stop-attlist ::= (style:leader-width::lineWidth)? ;
 style-tab-stop-attlist ::= (style:leader-color::("font-color" | color))? ;
 style-tab-stop-attlist ::= (style:leader-text::string)? ;
 style-tab-stop-attlist ::= (style:leader-text-style::styleNameRef)? ;
text-h ::= text:h::(heading-attrs paragraph-attrs text-number? paragraph-content*) ;
text-outline-style ::= text:outline-style::(text-outline-level-style+) ;
draw-control-attlist ::= draw:control::IDREF ;
table-table-column-attlist ::= (table:number-columns-repeated::positiveInteger)? ;
 table-table-column-attlist ::= (table:style-name::styleNameRef)? ;
 table-table-column-attlist ::= (table:visibility::table-visibility-value)? ;
 table-table-column-attlist ::= (table:default-cell-style-name::styleNameRef)? ;
text-placeholder-attlist ::= text:placeholder-type::("text" | "table" | "text-box" | "image" | "object") ;
 text-placeholder-attlist ::= common-field-description-attlist ;
office-document-settings ::= office:document-settings::(office-document-common-attrs office-settings) ;
style-table-row-properties-elements ::= style-background-image ;
draw-handle-attlist ::= (draw:handle-mirror-vertical::boolean)? ;
 draw-handle-attlist ::= (draw:handle-mirror-horizontal::boolean)? ;
 draw-handle-attlist ::= (draw:handle-switched::boolean)? ;
 draw-handle-attlist ::= draw:handle-position::string ;
 draw-handle-attlist ::= (draw:handle-range-x-minimum::string)? ;
 draw-handle-attlist ::= (draw:handle-range-x-maximum::string)? ;
 draw-handle-attlist ::= (draw:handle-range-y-minimum::string)? ;
 draw-handle-attlist ::= (draw:handle-range-y-maximum::string)? ;
 draw-handle-attlist ::= (draw:handle-polar::string)? ;
 draw-handle-attlist ::= (draw:handle-radius-range-minimum::string)? ;
 draw-handle-attlist ::= (draw:handle-radius-range-maximum::string)? ;
presentation-show-attlist ::= presentation:name::string ;
 presentation-show-attlist ::= presentation:pages::string() ;
style-columns ::= (style:columns::(style-columns-attlist style-column-sep? style-column*))? ;
table-subtotal-rules-attlist ::= (table:bind-styles-to-content::boolean)? ;
 table-subtotal-rules-attlist ::= (table:case-sensitive::boolean)? ;
 table-subtotal-rules-attlist ::= (table:page-breaks-on-group-change::boolean)? ;
table-calculation-setting-attlist ::= (table:case-sensitive::boolean)? ;
 table-calculation-setting-attlist ::= (table:precision-as-shown::boolean)? ;
 table-calculation-setting-attlist ::= (table:search-criteria-must-apply-to-whole-cell::boolean)? ;
 table-calculation-setting-attlist ::= (table:automatic-find-labels::boolean)? ;
 table-calculation-setting-attlist ::= (table:use-regular-expressions::boolean)? ;
 table-calculation-setting-attlist ::= (table:null-year::positiveInteger)? ;
text-section-source-dde ::= office-dde-source ;
number-am-pm ::= number:am-pm::ε ;
lineMode ::= "continuous" | "skip-white-space" ;
style-list-level-properties-elements ::= ε ;
number-time-style ::= number:time-style::(number-time-style-attlist common-data-style-attlist common-format-source-attlist style-text-properties? number-text? (any-time number-text?)+ style-map*) ;
text-dde-connection-decl ::= text:dde-connection-decl::(text-dde-connection-decl-attlist common-dde-connection-decl-attlist) ;
style-table-column-properties ::= style:table-column-properties::style-table-column-properties-content ;
anyAttListOrElements ::= string()* anyElements ;
chart-stock-range-line ::= chart:stock-range-line::common-stock-marker-attlist ;
chart-title ::= chart:title::(chart-title-attlist text-p?) ;
nonNegativeLength ::= string() ;
index-content-main ::= text-content | text-index-title ;
fontWeight ::= "normal" | "bold" | "100" | "200" | "300" | "400" | "500" | "600" | "700" | "800" | "900" ;
common-tab-attlist ::= (form:tab-index::nonNegativeInteger)? ;
 common-tab-attlist ::= (form:tab-stop::boolean)? ;
common-anim-attlist ::= (presentation:node-type::("default" | "on-click" | "with-previous" | "after-previous" | "timing-root" | "main-sequence" | "interactive-sequence"))? ;
 common-anim-attlist ::= (presentation:preset-id::string)? ;
 common-anim-attlist ::= (presentation:preset-sub-type::string)? ;
 common-anim-attlist ::= (presentation:preset-class::("custom" | "entrance" | "exit" | "emphasis" | "motion-path" | "ole-action" | "media-call"))? ;
 common-anim-attlist ::= (presentation:master-element::IDREF)? ;
 common-anim-attlist ::= (presentation:group-id::string)? ;
 common-anim-attlist ::= (anim:id::ID)? ;
config-config-item-attlist ::= config:name::string ;
 config-config-item-attlist ::= config:type::("boolean" | "short" | "int" | "long" | "double" | "string" | "datetime" | "base64Binary") ;
draw-frame ::= draw:frame::(common-draw-shape-with-text-and-styles-attlist common-draw-position-attlist common-draw-rel-size-attlist presentation-shape-attlist draw-frame-attlist (draw-text-box | draw-image | draw-object | draw-object-ole | draw-applet | draw-floating-frame | draw-plugin)* office-event-listeners? draw-glue-point* draw-image-map? svg-desc? (draw-contour-polygon | draw-contour-path)?) ;
common-form-control-content ::= form-properties? office-event-listeners? ;
table-iteration ::= table:iteration::((table:status::("enable" | "disable"))? (table:steps::positiveInteger)? (table:maximum-difference::double)?) ;
dateTime ::= string() ;
text-user-index-source ::= text:user-index-source::(text-user-index-source-attr text-index-title-template? text-user-index-entry-template* text-index-source-styles*) ;
text-index-entry-chapter ::= text:index-entry-chapter::((text:style-name::styleNameRef)? text-index-entry-chapter-attrs) ;
table-data-pilot-subtotals ::= table:data-pilot-subtotals::(table-data-pilot-subtotal*) ;
style-page-layout-properties ::= style:page-layout-properties::style-page-layout-properties-content ;
form-connection-resource ::= form:connection-resource::(xlink:href::anyURI) ;
draw-text-box ::= draw:text-box::(draw-text-box-attlist text-content*) ;
draw-image ::= draw:image::(draw-image-attlist common-draw-data-attlist | office-binary-data draw-text) ;
table-data-pilot-field-reference-attlist ::= table:field-name::string ;
 table-data-pilot-field-reference-attlist ::= (table:member-type::"named" table:member-name::string) | (table:member-type::("previous" | "next")) ;
 table-data-pilot-field-reference-attlist ::= table:type::("none" | "member-difference" | "member-percentage" | "member-percentage-difference" | "running-total" | "row-percentage" | "column-percentage" | "total-percentage" | "index") ;
common-break-attlist ::= (fo:break-before::("auto" | "column" | "page"))? (fo:break-after::("auto" | "column" | "page"))? ;
common-table-range-attlist ::= common-table-cell-address-attlist | common-table-cell-range-address-attlist ;
chart-error-indicator-attlist ::= (chart:style-name::styleNameRef)? ;
table-data-pilot-groups ::= table:data-pilot-groups::(table-data-pilot-groups-attlist table-data-pilot-group+) ;
number-hours ::= number:hours::number-hours-attlist ;
table-table-source-attlist ::= (table:mode::("copy-all" | "copy-results-only"))? ;
 table-table-source-attlist ::= (table:table-name::string)? ;
draw-layer ::= draw:layer::draw-layer-attlist ;
common-text-align ::= (fo:text-align::("start" | "end" | "left" | "right" | "center" | "justify"))? ;
style-style-attlist ::= style:name::styleName ;
 style-style-attlist ::= (style:display-name::string)? ;
 style-style-attlist ::= (style:parent-style-name::styleNameRef)? ;
 style-style-attlist ::= (style:next-style-name::styleNameRef)? ;
 style-style-attlist ::= (style:list-style-name::(styleName | ε))? ;
 style-style-attlist ::= (style:master-page-name::styleNameRef)? ;
 style-style-attlist ::= (style:auto-update::boolean)? ;
 style-style-attlist ::= (style:data-style-name::styleNameRef)? ;
 style-style-attlist ::= (style:class::string)? ;
 style-style-attlist ::= (style:default-outline-level::positiveInteger)? ;
draw-image-attlist ::= (draw:filter-name::string)? ;
paragraph-attrs ::= (text:style-name::styleNameRef)? (text:class-names::styleNameRefs)? (text:cond-style-name::styleNameRef)? ;
 paragraph-attrs ::= text-id? ;
table-columns-no-group ::= (table-columns (table-table-header-columns table-columns?)?) | (table-table-header-columns table-columns?) ;
form-fixed-text-attlist ::= form-control-attlist for common-disabled-attlist label common-printable-attlist common-title-attlist ;
 form-fixed-text-attlist ::= (form:multi-line::boolean)? ;
draw-floating-frame-attlist ::= (draw:frame-name::string)? ;
style-drawing-page-properties-elements ::= presentation-sound? ;
presentation-decl ::= presentation:header-decl::(presentation-header-decl-attlist string()) ;
 presentation-decl ::= presentation:footer-decl::(presentation-footer-decl-attlist string()) ;
 presentation-decl ::= presentation:date-time-decl::(presentation-date-time-decl-attlist string()) ;
style-properties-content ::= anyAttListOrElements ;
common-draw-size-attlist ::= (svg:width::length)? (svg:height::length)? ;
text-changed-region-content ::= text:insertion::office-change-info ;
 text-changed-region-content ::= text:deletion::(office-change-info text-content*) ;
 text-changed-region-content ::= text:format-change::office-change-info ;
table-table-template ::= table:table-template::(table-table-template-attlist table-first-row? table-last-row? table-first-column? table-last-column? table-body | (table-even-rows table-odd-rows) | (table-even-columns table-odd-columns)) ;
dr3d-extrude ::= dr3d:extrude::(common-draw-path-data-attlist common-draw-viewbox-attlist common-draw-id-attlist common-draw-z-index-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-dr3d-transform-attlist) ;
form-password-attlist ::= form-control-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist ;
 form-password-attlist ::= (form:echo-char::character)? ;
common-style-direction-attlist ::= (style:direction::("ltr" | "ttb"))? ;
draw-regular-polygon-attlist ::= (draw:concave::"false") | (draw:concave::"true" draw-regular-polygon-sharpness-attlist) ;
 draw-regular-polygon-attlist ::= draw:corners::positiveInteger ;
form-column-attlist ::= common-form-control-attlist label text-style-name ;
text-sequence-ref-name ::= (text:ref-name::string)? ;
table-insertion ::= table:insertion::(table-insertion-attlist common-table-change-attlist office-change-info table-dependencies? table-deletions?) ;
table-label-ranges ::= table:label-ranges::(table-label-range*) ;
table-even-rows ::= table:even-rows::common-table-template-attlist ;
chart-categories ::= chart:categories::((table:cell-range-address::cellRangeAddress)?) ;
draw-page-attlist ::= (draw:name::string)? ;
 draw-page-attlist ::= (draw:style-name::styleNameRef)? ;
 draw-page-attlist ::= draw:master-page-name::styleNameRef ;
 draw-page-attlist ::= (presentation:presentation-page-layout-name::styleNameRef)? ;
 draw-page-attlist ::= (draw:id::ID)? ;
table-database-ranges ::= table:database-ranges::(table-database-range*) ;
style-drawing-page-properties ::= style:drawing-page-properties::style-drawing-page-properties-content ;
config-config-item-map-indexed ::= config:config-item-map-indexed::(config-config-item-map-indexed-attlist config-config-item-map-entry+) ;
style-table-cell-properties ::= style:table-cell-properties::style-table-cell-properties-content ;
style-section-properties-content ::= style-section-properties-content-strict ;
 style-section-properties-content ::= style-properties-content ;
table-table-cell ::= table:table-cell::(table-table-cell-attlist table-table-cell-attlist-extra table-table-cell-content) ;
table-consolidation-attlist ::= table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string) ;
 table-consolidation-attlist ::= table:source-cell-range-addresses::cellRangeAddressList ;
 table-consolidation-attlist ::= table:target-cell-address::cellAddress ;
 table-consolidation-attlist ::= (table:use-labels::("none" | "row" | "column" | "both"))? ;
 table-consolidation-attlist ::= (table:link-to-source-data::boolean)? ;
style-tab-stops ::= (style:tab-stops::(style-tab-stop*))? ;
style-data-style-attlist ::= (style:display-name::string)? ;
dr3d-light-attlist ::= (dr3d:diffuse-color::color)? ;
 dr3d-light-attlist ::= dr3d:direction::vector3D ;
 dr3d-light-attlist ::= (dr3d:enabled::boolean)? ;
 dr3d-light-attlist ::= (dr3d:specular::boolean)? ;
office-chart-content-prelude ::= text-decls table-decls ;
style-drawing-page-properties-attlist ::= (presentation:transition-type::("manual" | "automatic" | "semi-automatic"))? ;
 style-drawing-page-properties-attlist ::= (presentation:transition-style::("none" | "fade-from-left" | "fade-from-top" | "fade-from-right" | "fade-from-bottom" | "fade-from-upperleft" | "fade-from-upperright" | "fade-from-lowerleft" | "fade-from-lowerright" | "move-from-left" | "move-from-top" | "move-from-right" | "move-from-bottom" | "move-from-upperleft" | "move-from-upperright" | "move-from-lowerleft" | "move-from-lowerright" | "uncover-to-left" | "uncover-to-top" | "uncover-to-right" | "uncover-to-bottom" | "uncover-to-upperleft" | "uncover-to-upperright" | "uncover-to-lowerleft" | "uncover-to-lowerright" | "fade-to-center" | "fade-from-center" | "vertical-stripes" | "horizontal-stripes" | "clockwise" | "counterclockwise" | "open-vertical" | "open-horizontal" | "close-vertical" | "close-horizontal" | "wavyline-from-left" | "wavyline-from-top" | "wavyline-from-right" | "wavyline-from-bottom" | "spiralin-left" | "spiralin-right" | "spiralout-left" | "spiralout-right" | "roll-from-top" | "roll-from-left" | "roll-from-right" | "roll-from-bottom" | "stretch-from-left" | "stretch-from-top" | "stretch-from-right" | "stretch-from-bottom" | "vertical-lines" | "horizontal-lines" | "dissolve" | "random" | "vertical-checkerboard" | "horizontal-checkerboard" | "interlocking-horizontal-left" | "interlocking-horizontal-right" | "interlocking-vertical-top" | "interlocking-vertical-bottom" | "fly-away" | "open" | "close" | "melt"))? ;
 style-drawing-page-properties-attlist ::= (presentation:transition-speed::presentationSpeeds)? ;
 style-drawing-page-properties-attlist ::= (smil:subtype::string)? ;
 style-drawing-page-properties-attlist ::= (smil:direction::("forward" | "reverse"))? ;
 style-drawing-page-properties-attlist ::= (smil:fadeColor::("forward" | "reverse"))? ;
 style-drawing-page-properties-attlist ::= (presentation:duration::duration)? ;
 style-drawing-page-properties-attlist ::= (presentation:visibility::("visible" | "hidden"))? ;
 style-drawing-page-properties-attlist ::= (draw:background-size::("full" | "border"))? ;
 style-drawing-page-properties-attlist ::= (presentation:background-objects-visible::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:background-visible::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:display-header::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:display-footer::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:display-page-number::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:display-date-time::boolean)? ;
 style-drawing-page-properties-attlist ::= (smil:type::string)? ;
table-data-pilot-layout-info ::= table:data-pilot-layout-info::table-data-pilot-layout-info-attlist ;
config-config-item-map-indexed-attlist ::= config:name::string ;
table-sort-groups-attlist ::= (table:data-type::("text" | "number" | "automatic" | string))? ;
 table-sort-groups-attlist ::= (table:order::("ascending" | "descending"))? ;
presentation-dim ::= presentation:dim::(presentation-dim-attlist presentation-sound?) ;
anim-animate-motion-attlist ::= (svg:path::pathData)? ;
 anim-animate-motion-attlist ::= (svg:origin::string)? ;
 anim-animate-motion-attlist ::= (smil:calcMode::("discrete" | "linear" | "paced" | "spline"))? ;
mathMarkup ::= (α | string() | mathMarkup)* ;
presentation-date-time-decl-attlist ::= presentation:name::string ;
 presentation-date-time-decl-attlist ::= presentation:source::("fixed" | "current-date") ;
 presentation-date-time-decl-attlist ::= (style:data-style-name::styleNameRef)? ;
text-template-name-attlist ::= (text:display::("full" | "path" | "name" | "name-and-extension" | "area" | "title"))? ;
draw-caption-attlist ::= (draw:caption-point-x::coordinate draw:caption-point-y::coordinate)? ;
 draw-caption-attlist ::= (draw:corner-radius::nonNegativeLength)? ;
style-section-properties-elements ::= style-background-image ;
 style-section-properties-elements ::= style-columns ;
 style-section-properties-elements ::= text-notes-configuration* ;
form-button-attlist ::= form-control-attlist button-type common-disabled-attlist label image-data common-printable-attlist common-tab-attlist target-frame target-location common-title-attlist common-value-attlist common-form-relative-image-position-attlist ;
 form-button-attlist ::= (form:default-button::boolean)? ;
 form-button-attlist ::= (form:toggle::boolean)? ;
 form-button-attlist ::= (form:focus-on-click::boolean)? ;
 form-button-attlist ::= (form:xforms-submission::string)? ;
column-controls ::= form:text::(form-text-attlist common-form-control-content) ;
 column-controls ::= form:textarea::(form-textarea-attlist common-form-control-content text-p*) ;
 column-controls ::= form:formatted-text::(form-formatted-text-attlist common-form-control-content) ;
 column-controls ::= form:number::(form-number-attlist common-numeric-control-attlist common-form-control-content) ;
 column-controls ::= form:date::(form-date-attlist common-numeric-control-attlist common-form-control-content) ;
 column-controls ::= form:combobox::(form-combobox-attlist common-form-control-content form-item*) ;
 column-controls ::= form:listbox::(form-listbox-attlist common-form-control-content form-option*) ;
 column-controls ::= form:checkbox::(form-checkbox-attlist common-form-control-content) ;
chart-wall-attlist ::= (svg:width::length)? ;
 chart-wall-attlist ::= (chart:style-name::styleNameRef)? ;
text-index-title-template ::= text:index-title-template::((text:style-name::styleNameRef)? string()) ;
dr3d-rotate ::= dr3d:rotate::(common-draw-viewbox-attlist common-draw-path-data-attlist common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-dr3d-transform-attlist) ;
meta-date-string ::= meta:date-string::string ;
table-content-validations ::= table:content-validations::(table-content-validation+) ;
form-control-attlist ::= common-form-control-attlist common-control-id-attlist xforms-bind-attlist ;
chart-series ::= chart:series::(chart-series-attlist chart-domain* chart-mean-value? chart-regression-curve? chart-error-indicator? chart-data-point*) ;
table-calculation-settings ::= table:calculation-settings::(table-calculation-setting-attlist table-null-date? table-iteration?) ;
text-index-name ::= text:index-name::string ;
common-field-display-value-none-attlist ::= (text:display::("value" | "none"))? ;
table-data-pilot-member-attlist ::= table:name::string ;
 table-data-pilot-member-attlist ::= (table:display::boolean)? ;
 table-data-pilot-member-attlist ::= (table:show-details::boolean)? ;
style-header-footer-properties-elements ::= style-background-image ;
presentation-placeholder ::= presentation:placeholder::(presentation:object::presentation-classes svg:x::(coordinate | percent) svg:y::(coordinate | percent) svg:width::(length | percent) svg:height::(length | percent)) ;
style-map ::= style:map::style-map-attlist ;
style-page-layout-properties-content ::= style-page-layout-properties-content-strict ;
 style-page-layout-properties-content ::= style-properties-content ;
number-number-attlist ::= (number:decimal-replacement::string())? ;
 number-number-attlist ::= (number:display-factor::double)? ;
text-index-source-style ::= text:index-source-style::(text:style-name::styleName) ;
style-paragraph-properties-content ::= style-paragraph-properties-content-strict ;
 style-paragraph-properties-content ::= style-properties-content ;
common-field-description-attlist ::= (text:description::string())? ;
chart-series-attlist ::= (chart:values-cell-range-address::cellRangeAddress)? ;
 chart-series-attlist ::= (chart:label-cell-address::cellAddress)? ;
 chart-series-attlist ::= (chart:class::namespacedToken)? ;
 chart-series-attlist ::= (chart:attached-axis::string)? ;
 chart-series-attlist ::= (chart:style-name::styleNameRef)? ;
common-draw-transform-attlist ::= (draw:transform::string)? ;
common-shadow-attlist ::= (style:shadow::shadowType)? ;
common-num-format-attlist ::= (style:num-format::("1" | "i" | "I" | string | ε)) | (style:num-format::("a" | "A") style-num-letter-sync-attlist) | ε ;
text-page ::= text:page::text-page-attlist ;
common-data-field-attlist ::= (form:data-field::string)? ;
variableName ::= string() ;
draw-regular-polygon-sharpness-attlist ::= draw:sharpness::percent ;
table-deletions ::= table:deletions::((table-cell-content-deletion | table-change-deletion)+) ;
text-list-level-style-attr ::= text:level::positiveInteger ;
table-data-pilot-sort-info ::= table:data-pilot-sort-info::table-data-pilot-sort-info-attlist ;
table-tracked-changes ::= table:tracked-changes::(table-tracked-changes-attlist (table-cell-content-change | table-insertion | table-deletion | table-movement)*) ;
table-database-source-sql-attlist ::= table:database-name::string ;
 table-database-source-sql-attlist ::= table:sql-statement::string ;
 table-database-source-sql-attlist ::= (table:parse-sql-statement::boolean)? ;
presentation-shape-attlist ::= (presentation:class::presentation-classes)? ;
 presentation-shape-attlist ::= (presentation:placeholder::boolean)? ;
 presentation-shape-attlist ::= (presentation:user-transformed::boolean)? ;
style-chart-properties ::= style:chart-properties::style-chart-properties-content ;
text-alphabetical-index ::= text:alphabetical-index::(sectionAttr text-alphabetical-index-source text-index-body) ;
office-change-info ::= office:change-info::(dc-creator dc-date text-p*) ;
paragraph-content ::= string() ;
 paragraph-content ::= text:s::((text:c::nonNegativeInteger)?) ;
 paragraph-content ::= text:tab::text-tab-attr ;
 paragraph-content ::= text:line-break::ε ;
 paragraph-content ::= text:span::((text:style-name::styleNameRef)? (text:class-names::styleNameRefs)? paragraph-content*) ;
 paragraph-content ::= text:a::(text-a-attlist office-event-listeners? paragraph-content*) ;
 paragraph-content ::= (text:bookmark::(text:name::string)) | (text:bookmark-start::(text:name::string)) | (text:bookmark-end::(text:name::string)) ;
 paragraph-content ::= text:reference-mark::(text:name::string) ;
 paragraph-content ::= (text:reference-mark-start::(text:name::string)) | (text:reference-mark-end::(text:name::string)) ;
 paragraph-content ::= text:note::(text-note-class (text:id::string)? text:note-citation::((text:label::string)? string()) text:note-body::(text-content*)) ;
 paragraph-content ::= text:ruby::((text:style-name::styleNameRef)? text:ruby-base::paragraph-content text:ruby-text::((text:style-name::styleNameRef)? string())) ;
 paragraph-content ::= office-annotation ;
 paragraph-content ::= change-marks ;
 paragraph-content ::= shape | draw-a ;
 paragraph-content ::= text:date::(text-date-attlist string()) ;
 paragraph-content ::= text:time::(text-time-attlist string()) ;
 paragraph-content ::= text:page-number::(text-page-number-attlist string()) ;
 paragraph-content ::= text:page-continuation::(text-page-continuation-attlist string()) ;
 paragraph-content ::= text:sender-firstname::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-lastname::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-initials::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-title::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-position::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-email::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-phone-private::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-fax::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-company::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-phone-work::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-street::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-city::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-postal-code::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-country::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-state-or-province::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:author-name::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:author-initials::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:chapter::(text-chapter-attlist string()) ;
 paragraph-content ::= text:file-name::(text-file-name-attlist string()) ;
 paragraph-content ::= text:template-name::(text-template-name-attlist string()) ;
 paragraph-content ::= text:sheet-name::string() ;
 paragraph-content ::= text:variable-set::(common-field-name-attlist common-field-formula-attlist common-value-and-type-attlist common-field-display-value-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:variable-get::(common-field-name-attlist common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:variable-input::(common-field-name-attlist common-field-description-attlist common-value-type-attlist common-field-display-value-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:user-field-get::(common-field-name-attlist common-field-display-value-formula-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:user-field-input::(common-field-name-attlist common-field-description-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:sequence::(common-field-name-attlist common-field-formula-attlist common-field-num-format-attlist text-sequence-ref-name string()) ;
 paragraph-content ::= text:expression::(common-field-formula-attlist common-value-and-type-attlist? common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:text-input::(common-field-description-attlist string()) ;
 paragraph-content ::= text:initial-creator::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:creation-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::dateOrDateTime)? string()) ;
 paragraph-content ::= text:creation-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::timeOrDateTime)? string()) ;
 paragraph-content ::= text:description::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:user-defined::(common-field-fixed-attlist text:name::string common-field-data-style-name-attlist (office:value::double)? (office:date-value::dateOrDateTime)? (office:time-value::duration)? (office:boolean-value::boolean)? (office:string-value::string)? string()) ;
 paragraph-content ::= text:print-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::time)? string()) ;
 paragraph-content ::= text:print-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::date)? string()) ;
 paragraph-content ::= text:printed-by::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:title::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:subject::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:keywords::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:editing-cycles::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:editing-duration::(common-field-fixed-attlist common-field-data-style-name-attlist (text:duration::duration)? string()) ;
 paragraph-content ::= text:modification-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::time)? string()) ;
 paragraph-content ::= text:modification-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::date)? string()) ;
 paragraph-content ::= text:creator::(common-field-fixed-attlist string()) ;
 paragraph-content ::= (text:page-count::(common-field-num-format-attlist string())) | (text:paragraph-count::(common-field-num-format-attlist string())) | (text:word-count::(common-field-num-format-attlist string())) | (text:character-count::(common-field-num-format-attlist string())) | (text:table-count::(common-field-num-format-attlist string())) | (text:image-count::(common-field-num-format-attlist string())) | (text:object-count::(common-field-num-format-attlist string())) ;
 paragraph-content ::= text:database-display::(text-database-display-attlist string()) ;
 paragraph-content ::= text:database-next::text-database-next-attlist ;
 paragraph-content ::= text:database-row-select::text-database-row-select-attlist ;
 paragraph-content ::= text:database-row-number::(common-field-database-table common-field-num-format-attlist (text:value::nonNegativeInteger)? string()) ;
 paragraph-content ::= text:database-name::(common-field-database-table string()) ;
 paragraph-content ::= text:page-variable-set::(text-set-page-variable-attlist string()) ;
 paragraph-content ::= text:page-variable-get::(text-get-page-variable-attlist string()) ;
 paragraph-content ::= text:placeholder::(text-placeholder-attlist string()) ;
 paragraph-content ::= text:conditional-text::(text-conditional-text-attlist string()) ;
 paragraph-content ::= text:hidden-text::(text-hidden-text-attlist string()) ;
 paragraph-content ::= (text:reference-ref::(text-common-ref-content text-ref-content)) | (text:bookmark-ref::(text-common-ref-content text-ref-content)) ;
 paragraph-content ::= text:note-ref::(text-common-ref-content text-note-ref-content text-ref-content) ;
 paragraph-content ::= text:sequence-ref::(text-common-ref-content text-sequence-ref-content) ;
 paragraph-content ::= text:script::((xlink:href::anyURI (xlink:type::"simple")?) | string() (script:language::string)?) ;
 paragraph-content ::= text:execute-macro::((text:name::string)? office-event-listeners? string()) ;
 paragraph-content ::= text:hidden-paragraph::(text-hidden-paragraph-attlist string()) ;
 paragraph-content ::= text:dde-connection::(text:connection-name::string string()) ;
 paragraph-content ::= text:measure::(text:kind::("value" | "unit" | "gap") string()) ;
 paragraph-content ::= text:table-formula::(common-field-formula-attlist common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:toc-mark-start::text-toc-mark-start-attrs ;
 paragraph-content ::= text:toc-mark-end::text-id ;
 paragraph-content ::= text:toc-mark::(text:string-value::string text-outline-level) ;
 paragraph-content ::= text:user-index-mark-start::(text-id text-outline-level text-index-name) ;
 paragraph-content ::= text:user-index-mark-end::(text-id text-outline-level) ;
 paragraph-content ::= text:user-index-mark::(text:string-value::string text-outline-level text-index-name) ;
 paragraph-content ::= text:alphabetical-index-mark-start::(text-id text-alphabetical-index-mark-attrs) ;
 paragraph-content ::= text:alphabetical-index-mark-end::text-id ;
 paragraph-content ::= text:alphabetical-index-mark::(text:string-value::string text-alphabetical-index-mark-attrs) ;
 paragraph-content ::= text:bibliography-mark::(text:bibliography-type::text-bibliography-types ((text:identifier::string) | (text:address::string) | (text:annote::string) | (text:author::string) | (text:booktitle::string) | (text:chapter::string) | (text:edition::string) | (text:editor::string) | (text:howpublished::string) | (text:institution::string) | (text:journal::string) | (text:month::string) | (text:note::string) | (text:number::string) | (text:organizations::string) | (text:pages::string) | (text:publisher::string) | (text:school::string) | (text:series::string) | (text:title::string) | (text:report-type::string) | (text:volume::string) | (text:year::string) | (text:url::string) | (text:custom1::string) | (text:custom2::string) | (text:custom3::string) | (text:custom4::string) | (text:custom5::string) | (text:isbn::string) | (text:issn::string))* string()) ;
 paragraph-content ::= presentation:header::ε ;
 paragraph-content ::= presentation:footer::ε ;
 paragraph-content ::= presentation:date-time::ε ;
config-config-item-map-entry-attlist ::= (config:name::string)? ;
number-day ::= number:day::(number-day-attlist common-calendar-attlist) ;
styleNameRef ::= string() | ε ;
common-endsync-timing-attlist ::= (smil:endsync::("first" | "last" | "all" | "media"))? ;
table-visibility-value ::= "visible" | "collapse" | "filter" ;
change-mark-attr ::= text:change-id::IDREF ;
common-vertical-pos-attlist ::= (style:vertical-pos::("top" | "middle" | "bottom" | "from-top" | "below"))? (svg:y::coordinate)? ;
style-chart-properties-attlist ::= (chart:scale-text::boolean)? ;
 style-chart-properties-attlist ::= (chart:three-dimensional::boolean)? ;
 style-chart-properties-attlist ::= (chart:deep::boolean)? ;
 style-chart-properties-attlist ::= (chart:symbol-type::"none") | (chart:symbol-type::"automatic") | (chart:symbol-type::"named-symbol" chart:symbol-name::("square" | "diamond" | "arrow-down" | "arrow-up" | "arrow-right" | "arrow-left" | "bow-tie" | "hourglass" | "circle" | "star" | "x" | "plus" | "asterisk" | "horizontal-bar" | "vertical-bar")) | (chart:symbol-type::"image" chart:symbol-image::(xlink:href::anyURI)) | ε ;
 style-chart-properties-attlist ::= (chart:symbol-width::nonNegativeLength)? (chart:symbol-height::nonNegativeLength)? ;
 style-chart-properties-attlist ::= (chart:vertical::boolean)? ;
 style-chart-properties-attlist ::= (chart:connect-bars::boolean)? ;
 style-chart-properties-attlist ::= (chart:gap-width::integer)? (chart:overlap::integer)? ;
 style-chart-properties-attlist ::= (chart:japanese-candle-stick::boolean)? ;
 style-chart-properties-attlist ::= (chart:interpolation::("none" | "cubic-spline" | "b-spline"))? (chart:spline-order::positiveInteger)? (chart:spline-resolution::positiveInteger)? ;
 style-chart-properties-attlist ::= (chart:pie-offset::nonNegativeInteger)? ;
 style-chart-properties-attlist ::= (chart:lines::boolean)? ;
 style-chart-properties-attlist ::= (chart:solid-type::("cuboid" | "cylinder" | "cone" | "pyramid"))? ;
 style-chart-properties-attlist ::= (chart:stacked::boolean)? (chart:percentage::boolean)? ;
 style-chart-properties-attlist ::= (chart:link-data-style-to-source::boolean)? ;
 style-chart-properties-attlist ::= (chart:visible::boolean)? ;
 style-chart-properties-attlist ::= (chart:logarithmic::boolean)? ;
 style-chart-properties-attlist ::= (chart:maximum::double)? (chart:minimum::double)? (chart:origin::double)? (chart:interval-major::double)? (chart:interval-minor::positiveInteger)? ;
 style-chart-properties-attlist ::= (chart:tick-marks-major-inner::boolean)? (chart:tick-marks-major-outer::boolean)? (chart:tick-marks-minor-inner::boolean)? (chart:tick-marks-minor-outer::boolean)? ;
 style-chart-properties-attlist ::= (chart:display-label::boolean)? (chart:text-overlap::boolean)? (text:line-break::boolean)? (chart:label-arrangement::("side-by-side" | "stagger-even" | "stagger-odd"))? ;
 style-chart-properties-attlist ::= common-style-direction-attlist ;
 style-chart-properties-attlist ::= common-rotation-angle-attlist ;
 style-chart-properties-attlist ::= (chart:data-label-number::("none" | "value" | "percentage"))? ;
 style-chart-properties-attlist ::= (chart:data-label-text::boolean)? ;
 style-chart-properties-attlist ::= (chart:data-label-symbol::boolean)? ;
 style-chart-properties-attlist ::= (chart:mean-value::boolean)? ;
 style-chart-properties-attlist ::= (chart:error-category::("none" | "variance" | "standard-deviation" | "percentage" | "error-margin" | "constant"))? ;
 style-chart-properties-attlist ::= (chart:error-percentage::double)? ;
 style-chart-properties-attlist ::= (chart:error-margin::double)? ;
 style-chart-properties-attlist ::= (chart:error-lower-limit::double)? (chart:error-upper-limit::double)? ;
 style-chart-properties-attlist ::= (chart:error-upper-indicator::boolean)? (chart:error-lower-indicator::boolean)? ;
 style-chart-properties-attlist ::= (chart:series-source::("columns" | "rows"))? ;
 style-chart-properties-attlist ::= (chart:regression-type::("none" | "linear" | "logarithmic" | "exponential" | "power"))? ;
style-page-layout-properties-elements ::= style-background-image ;
 style-page-layout-properties-elements ::= style-columns ;
 style-page-layout-properties-elements ::= style-footnote-sep ;
text-table-index-entry-template ::= text:table-index-entry-template::text-illustration-index-entry-content ;
text-linenumbering-configuration ::= text:linenumbering-configuration::(text-linenumbering-configuration-attlist text-linenumbering-separator?) ;
draw-path ::= draw:path::(common-draw-path-data-attlist common-draw-position-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
number-embedded-text ::= number:embedded-text::(number-embedded-text-attlist string()) ;
table-table-cell-content ::= table-cell-range-source? office-annotation? table-detective? text-content* ;
style-handout-master ::= style:handout-master::(common-presentation-header-footer-attlist style-handout-master-attlist shape*) ;
presentation-show-text ::= presentation:show-text::(common-presentation-effect-attlist presentation-sound?) ;
targetFrameName ::= "_self" | "_blank" | "_parent" | "_top" | string ;
draw-area-circle ::= draw:area-circle::(common-draw-area-attlist svg:cx::coordinate svg:cy::coordinate svg:r::length svg-desc? office-event-listeners?) ;
text-user-index-source-attr ::= text-index-scope-attr text-relative-tab-stop-position-attr text:index-name::string ;
 text-user-index-source-attr ::= (text:use-index-marks::boolean)? (text:use-graphics::boolean)? (text:use-tables::boolean)? (text:use-floating-frames::boolean)? (text:use-objects::boolean)? ;
 text-user-index-source-attr ::= (text:copy-outline-levels::boolean)? ;
form-image-attlist ::= form-control-attlist button-type common-disabled-attlist image-data common-printable-attlist common-tab-attlist target-frame target-location common-title-attlist common-value-attlist ;
draw-connector ::= draw:connector::(draw-connector-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
table-highlighted-range ::= table:highlighted-range::(table-highlighted-range-attlist | table-highlighted-range-attlist-invalid) ;
anyElements ::= (string()? anyAttListOrElements string()?)* ;
style-column-sep ::= style:column-sep::style-column-sep-attlist ;
shapes3d ::= dr3d-scene | dr3d-extrude | dr3d-sphere | dr3d-rotate | dr3d-cube ;
text-linenumbering-configuration-attlist ::= (text:number-lines::boolean)? ;
 text-linenumbering-configuration-attlist ::= common-num-format-attlist? ;
 text-linenumbering-configuration-attlist ::= (text:style-name::styleNameRef)? ;
 text-linenumbering-configuration-attlist ::= (text:increment::nonNegativeInteger)? ;
 text-linenumbering-configuration-attlist ::= (text:number-position::("left" | "rigth" | "inner" | "outer"))? ;
 text-linenumbering-configuration-attlist ::= (text:offset::nonNegativeLength)? ;
 text-linenumbering-configuration-attlist ::= (text:count-empty-lines::boolean)? ;
 text-linenumbering-configuration-attlist ::= (text:count-in-text-boxes::boolean)? ;
 text-linenumbering-configuration-attlist ::= (text:restart-on-page::boolean)? ;
table-rows-and-groups ::= (table-table-row-group | table-rows-no-group)+ ;
office-drawing-attlist ::= ε ;
draw-stroke-dash ::= draw:stroke-dash::draw-stroke-dash-attlist ;
text-object-index-entry-template ::= text:object-index-entry-template::text-illustration-index-entry-content ;
list-source-type ::= (form:list-source-type::("table" | "query" | "sql" | "sql-pass-through" | "value-list" | "table-fields"))? ;
number-month ::= number:month::(number-month-attlist common-calendar-attlist) ;
chart-data-point ::= chart:data-point::chart-data-point-attlist ;
text-toc-mark-start-attrs ::= text-id text-outline-level ;
office-image-attlist ::= ε ;
office-scripts ::= (office:scripts::(office-script* office-event-listeners?))? ;
common-vertical-margin-attlist ::= (fo:margin-top::(nonNegativeLength | percent))? (fo:margin-bottom::(nonNegativeLength | percent))? ;
table-data-pilot-table ::= table:data-pilot-table::(table-data-pilot-table-attlist (table-database-source-sql | table-database-source-table | table-database-source-query | table-source-service | table-source-cell-range)? table-data-pilot-field+) ;
vector3D ::= string() ;
style-header-footer-properties-attlist ::= (svg:height::length)? (fo:min-height::length)? ;
 style-header-footer-properties-attlist ::= common-horizontal-margin-attlist common-vertical-margin-attlist common-margin-attlist ;
 style-header-footer-properties-attlist ::= common-border-attlist ;
 style-header-footer-properties-attlist ::= common-border-line-width-attlist ;
 style-header-footer-properties-attlist ::= common-padding-attlist ;
 style-header-footer-properties-attlist ::= common-background-color-attlist ;
 style-header-footer-properties-attlist ::= common-shadow-attlist ;
style-column ::= style:column::style-column-attlist ;
style-font-face-attlist ::= (svg:font-family::string)? (svg:font-style::fontStyle)? (svg:font-variant::fontVariant)? (svg:font-weight::fontWeight)? (svg:font-stretch::("normal" | "ultra-condensed" | "extra-condensed" | "condensed" | "semi-condensed" | "semi-expanded" | "expanded" | "extra-expanded" | "ultra-expanded"))? (svg:font-size::positiveLength)? (svg:unicode-range::string())? (svg:units-per-em::integer)? (svg:panose-1::string())? (svg:stemv::integer)? (svg:stemh::integer)? (svg:slope::integer)? (svg:cap-height::integer)? (svg:x-height::integer)? (svg:accent-height::integer)? (svg:ascent::integer)? (svg:descent::integer)? (svg:widths::string())? (svg:bbox::string())? (svg:ideographic::integer)? (svg:alphabetic::integer)? (svg:mathematical::integer)? (svg:hanging::integer)? (svg:v-ideographic::integer)? (svg:v-alphabetic::integer)? (svg:v-mathematical::integer)? (svg:v-hanging::integer)? (svg:underline-position::integer)? (svg:underline-thickness::integer)? (svg:strikethrough-position::integer)? (svg:strikethrough-thickness::integer)? (svg:overline-position::integer)? (svg:overline-thickness::integer)? ;
 style-font-face-attlist ::= style:name::string ;
 style-font-face-attlist ::= (style:font-adornments::string)? ;
 style-font-face-attlist ::= (style:font-family-generic::fontFamilyGeneric)? ;
 style-font-face-attlist ::= (style:font-pitch::fontPitch)? ;
 style-font-face-attlist ::= (style:font-charset::textEncoding)? ;
style-num-letter-sync-attlist ::= (style:num-letter-sync::boolean)? ;
common-field-fixed-attlist ::= (text:fixed::boolean)? ;
text-changed-region-attr ::= text:id::ID ;
draw-stroke-dash-attlist ::= draw:name::styleName ;
 draw-stroke-dash-attlist ::= (draw:display-name::string)? ;
 draw-stroke-dash-attlist ::= (draw:style::("rect" | "round"))? ;
 draw-stroke-dash-attlist ::= (draw:dots1::integer)? (draw:dots1-length::length)? (draw:dots2::integer)? (draw:dots2-length::length)? ;
 draw-stroke-dash-attlist ::= (draw:distance::length)? ;
any-date ::= number-day | number-month | number-year | number-era | number-day-of-week | number-week-of-year | number-quarter | number-hours | number-am-pm | number-minutes | number-seconds ;
table-last-column ::= table:last-column::common-table-template-attlist ;
table-cell-content-deletion ::= table:cell-content-deletion::((table:id::string)? table-cell-address? table-change-track-table-cell?) ;
text-bibliography-types ::= "article" | "book" | "booklet" | "conference" | "custom1" | "custom2" | "custom3" | "custom4" | "custom5" | "email" | "inbook" | "incollection" | "inproceedings" | "journal" | "manual" | "mastersthesis" | "misc" | "phdthesis" | "proceedings" | "techreport" | "unpublished" | "www" ;
office-script-attlist ::= script:language::string ;
config-config-item-map-named ::= config:config-item-map-named::(config-config-item-map-named-attlist config-config-item-map-entry+) ;
number-seconds-attlist ::= (number:style::("short" | "long"))? ;
 number-seconds-attlist ::= (number:decimal-places::integer)? ;
table-deletion ::= table:deletion::(table-deletion-attlist common-table-change-attlist office-change-info table-dependencies? table-deletions? table-cut-offs?) ;
text-index-entry-chapter-attrs ::= (text:display::("name" | "number" | "number-and-name"))? ;
style-ruby-properties ::= style:ruby-properties::style-ruby-properties-content ;
common-contour-attlist ::= draw:recreate-on-edit::boolean ;
table-database-source-query ::= table:database-source-table::table-database-source-table-attlist ;
change-marks ::= (text:change::change-mark-attr) | (text:change-start::change-mark-attr) | (text:change-end::change-mark-attr) ;
common-field-data-style-name-attlist ::= (style:data-style-name::styleNameRef)? ;
style-column-attlist ::= style:rel-width::relativeLength ;
 style-column-attlist ::= (fo:start-indent::length)? ;
 style-column-attlist ::= (fo:end-indent::length)? ;
 style-column-attlist ::= (fo:space-before::length)? ;
 style-column-attlist ::= (fo:space-after::length)? ;
common-fill-timing-attlist ::= (smil:fill::("remove" | "freeze" | "hold" | "auto" | "default" | "transition"))? ;
form-image-frame-attlist ::= form-control-attlist common-disabled-attlist image-data common-printable-attlist common-readonly-attlist common-title-attlist common-data-field-attlist ;
rowOrCol ::= "row" | "column" ;
table-source-service ::= table:source-service::table-source-service-attlist ;
office-annotation ::= office:annotation::(office-annotation-attlist draw-caption-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist dc-creator? dc-date? meta-date-string? (text-p | text-list)*) ;
config-config-item-map-named-attlist ::= config:name::string ;
style-footer-left ::= style:footer-left::(common-style-header-footer-attlist header-footer-content) ;
common-anim-target-attlist ::= (smil:targetElement::IDREF)? ;
 common-anim-target-attlist ::= (anim:sub-item::string)? ;
draw-line ::= draw:line::(draw-line-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
style-ruby-properties-attlist ::= (style:ruby-position::("above" | "below"))? ;
 style-ruby-properties-attlist ::= (style:ruby-align::("left" | "center" | "right" | "distribute-letter" | "distribute-space"))? ;
style-list-level-properties-content-strict ::= style-list-level-properties-attlist style-list-level-properties-elements ;
style-table-properties-content ::= style-table-properties-content-strict ;
 style-table-properties-content ::= style-properties-content ;
table-sort-by-attlist ::= table:field-number::nonNegativeInteger ;
 table-sort-by-attlist ::= (table:data-type::("text" | "number" | "automatic" | string))? ;
 table-sort-by-attlist ::= (table:order::("ascending" | "descending"))? ;
table-columns-and-groups ::= (table-table-column-group | table-columns-no-group)+ ;
draw-page-thumbnail ::= draw:page-thumbnail::(draw-page-thumbnail-attlist common-draw-position-attlist common-draw-size-attlist presentation-shape-attlist common-draw-shape-with-styles-attlist) ;
table-odd-rows ::= table:odd-rows::common-table-template-attlist ;
office-image-content-prelude ::= ε ;
style-graphic-properties ::= style:graphic-properties::style-graphic-properties-content ;
table-source-service-attlist ::= table:name::string ;
 table-source-service-attlist ::= table:source-name::string ;
 table-source-service-attlist ::= table:object-name::string ;
 table-source-service-attlist ::= (table:user-name::string)? ;
 table-source-service-attlist ::= (table:password::string)? ;
office-meta-content-strict ::= office-meta-data* ;
common-calendar-attlist ::= (number:calendar::("gregorian" | "gengou" | "ROC" | "hanja_yoil" | "hanja" | "hijri" | "jewish" | "buddhist" | string))? ;
draw-handle ::= draw:handle::draw-handle-attlist ;
table-cell-content-change ::= table:cell-content-change::(common-table-change-attlist table-cell-address office-change-info table-dependencies? table-deletions? table-previous) ;
table-subtotal-field ::= table:subtotal-field::table-subtotal-field-attlist ;
chart-legend-attlist ::= (chart:legend-position::("start" | "end" | "top" | "bottom") (chart:legend-align::("start" | "center" | "end"))?) | (chart:legend-position::("top-start" | "bottom-start" | "top-end" | "bottom-end")) | ε ;
 chart-legend-attlist ::= common-draw-position-attlist ;
 chart-legend-attlist ::= (style:legend-expansion::("wide" | "high" | "balanced")) | (style:legend-expansion::"custom" style:legend-expansion-aspect-ratio::double) | ε ;
 chart-legend-attlist ::= (chart:style-name::styleNameRef)? ;
office-chart-content-main ::= chart-chart ;
table-subtotal-rules ::= table:subtotal-rules::(table-subtotal-rules-attlist table-sort-groups? table-subtotal-rule*) ;
chart-plot-area ::= chart:plot-area::(chart-plot-area-attlist dr3d-light* chart-axis* chart-series* chart-stock-gain-marker? chart-stock-loss-marker? chart-stock-range-line? chart-wall? chart-floor?) ;
draw-measure-attlist ::= svg:x1::coordinate svg:y1::coordinate ;
 draw-measure-attlist ::= svg:x2::coordinate svg:y2::coordinate ;
style-chart-properties-elements ::= ε ;
draw-param ::= draw:param::draw-param-attlist ;
draw-object-ole ::= draw:object-ole::(draw-object-ole-attlist common-draw-data-attlist | office-binary-data) ;
number-era-attlist ::= (number:style::("short" | "long"))? ;
number-percentage-style ::= number:percentage-style::(common-data-style-attlist style-text-properties? number-text? number-and-text? style-map*) ;
office-body-content ::= office:text::(office-text-attlist office-text-content-prelude office-text-content-main* office-text-content-epilogue) ;
 office-body-content ::= office:drawing::(office-drawing-attlist office-drawing-content-prelude office-drawing-content-main office-drawing-content-epilogue) ;
 office-body-content ::= office:presentation::(office-presentation-attlist office-presentation-content-prelude office-presentation-content-main office-presentation-content-epilogue) ;
 office-body-content ::= office:spreadsheet::(office-spreadsheet-attlist office-spreadsheet-content-prelude office-spreadsheet-content-main office-spreadsheet-content-epilogue) ;
 office-body-content ::= office:chart::(office-chart-attlist office-chart-content-prelude office-chart-content-main office-chart-content-epilogue) ;
 office-body-content ::= office:image::(office-image-attlist office-image-content-prelude office-image-content-main office-image-content-epilogue) ;
draw-contour-polygon ::= draw:contour-polygon::(common-contour-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-points-attlist) ;
chart-plot-area-attlist ::= common-draw-position-attlist common-draw-size-attlist ;
 chart-plot-area-attlist ::= (chart:style-name::styleNameRef)? ;
 chart-plot-area-attlist ::= (table:cell-range-address::cellRangeAddress)? ;
 chart-plot-area-attlist ::= (chart:data-source-has-labels::("none" | "row" | "column" | "both"))? ;
 chart-plot-area-attlist ::= dr3d-scene-attlist common-dr3d-transform-attlist ;
borderWidths ::= positiveLength positiveLength positiveLength ;
form-formatted-text-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist ;
 form-formatted-text-attlist ::= (form:max-value::string)? ;
 form-formatted-text-attlist ::= (form:min-value::string)? ;
 form-formatted-text-attlist ::= (form:validation::boolean)? ;
chart-mean-value ::= chart:mean-value::chart-mean-value-attlist ;
style-section-properties ::= style:section-properties::style-section-properties-content ;
table-source-cell-range-attlist ::= table:cell-range-address::cellRangeAddress ;
cellRangeAddressList ::= string() ;
style-table-properties-elements ::= style-background-image ;
style-graphic-properties-content-strict ::= style-graphic-properties-attlist style-graphic-fill-properties-attlist style-graphic-properties-elements ;
text-illustration-index ::= text:illustration-index::(sectionAttr text-illustration-index-source text-index-body) ;
office-dde-source ::= office:dde-source::(office-dde-source-attlist common-dde-connection-decl-attlist) ;
presentation-animation-elements ::= presentation-show-shape | presentation-show-text | presentation-hide-shape | presentation-hide-text | presentation-dim | presentation-play ;
anin-iterate-attlist ::= (smil:targetElement::IDREF)? ;
 anin-iterate-attlist ::= (anim:iterate-type::string)? ;
 anin-iterate-attlist ::= (anim:iterate-interval::duration)? ;
table-scenario ::= table:scenario::table-scenario-attlist ;
common-table-template-attlist ::= text:style-name::styleNameRef ;
math-math ::= math:math::mathMarkup ;
common-current-value-attlist ::= (form:current-value::string)? ;
table-content-validation ::= table:content-validation::(table-validation-attlist table-help-message? (table-error-message | (table-error-macro office-event-listeners?))?) ;
table-data-pilot-level ::= table:data-pilot-level::(table-data-pilot-level-attlist table-data-pilot-subtotals? table-data-pilot-members? table-data-pilot-display-info? table-data-pilot-sort-info? table-data-pilot-layout-info?) ;
table-dependency ::= table:dependency::(table:id::string) ;
draw-equation-attlist ::= (draw:name::string)? ;
 draw-equation-attlist ::= (draw:formula::string)? ;
text-conditional-text-attlist ::= text:condition::formula ;
 text-conditional-text-attlist ::= text:string-value-if-true::string ;
 text-conditional-text-attlist ::= text:string-value-if-false::string ;
 text-conditional-text-attlist ::= (text:current-value::boolean)? ;
countryCode ::= string() ;
fontStyle ::= "normal" | "italic" | "oblique" ;
style-table-column-properties-attlist ::= (style:column-width::positiveLength)? (style:rel-column-width::relativeLength)? ;
 style-table-column-properties-attlist ::= (style:use-optimal-column-width::boolean)? ;
 style-table-column-properties-attlist ::= common-break-attlist ;
region-content ::= text-p* ;
text-list-item-attr ::= (text:start-value::nonNegativeInteger)? ;
office-spreadsheet-content-epilogue ::= table-functions ;
common-draw-circle-ellipse-attlist ::= (svg:cx::coordinate svg:cy::coordinate)? ;
 common-draw-circle-ellipse-attlist ::= (draw:kind::("full" | "section" | "cut" | "arc"))? ;
 common-draw-circle-ellipse-attlist ::= (draw:start-angle::double)? ;
 common-draw-circle-ellipse-attlist ::= (draw:end-angle::double)? ;
table-table-source ::= table:table-source::(table-table-source-attlist table-linked-source-attlist) ;
text-page-number-attlist ::= common-field-num-format-attlist common-field-fixed-attlist ;
 text-page-number-attlist ::= (text:page-adjust::integer)? ;
 text-page-number-attlist ::= (text:select-page::("previous" | "current" | "next"))? ;
table-label-range-attlist ::= table:label-cell-range-address::cellRangeAddress ;
 table-label-range-attlist ::= table:data-cell-range-address::cellRangeAddress ;
 table-label-range-attlist ::= table:orientation::("column" | "row") ;
text-sequence-decl ::= text:sequence-decl::text-sequence-decl-attlist ;
style-style ::= style:style::(style-style-attlist style-style-content style-map*) ;
draw-enhanced-geometry-attlist ::= (draw:type::custom-shape-type)? ;
 draw-enhanced-geometry-attlist ::= (svg:viewBox::(integer integer integer integer))? ;
 draw-enhanced-geometry-attlist ::= (draw:mirror-vertical::boolean)? (draw:mirror-horizontal::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-rotate-angle::double)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:concentric-gradient-fill-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-brightness::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-depth::(length double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-diffusion::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-number-of-line-segments::integer)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-light-face::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-harsh::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-harsh::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-level::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-level::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-direction::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-direction::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-metal::boolean)? ;
 draw-enhanced-geometry-attlist ::= (dr3d:shade-mode::("flat" | "phong" | "gouraud" | "draft"))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-rotation-angle::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-rotation-center::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-shininess::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-skew::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-specularity::percent)? ;
 draw-enhanced-geometry-attlist ::= (dr3d:projection::("parallel" | "perspective"))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-viewpoint::point3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-origin::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-color::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:enhanced-path::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:path-stretchpoint-x::double)? (draw:path-stretchpoint-y::double)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-areas::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-points::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-point-type::("none" | "segments" | "rectangle"))? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-point-leaving-directions::string())? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-mode::("normal" | "path" | "shape"))? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-scale::("path" | "shape"))? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-same-letter-heights::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:modifiers::string)? ;
common-field-name-attlist ::= text:name::variableName ;
style-presentation-page-layout ::= style:presentation-page-layout::(style:name::styleName (style:display-name::string)? presentation-placeholder*) ;
text-index-entry-page-number ::= text:index-entry-page-number::((text:style-name::styleNameRef)?) ;
office-presentation-content-main ::= draw-page* ;
presentation-sound-attlist ::= (presentation:play-full::boolean)? ;
text-alphabetical-index-auto-mark-file ::= text:alphabetical-index-auto-mark-file::(xlink:href::anyURI (xlink:type::"simple")?) ;
draw-gradient-attlist ::= (draw:start-color::color)? (draw:end-color::color)? ;
 draw-gradient-attlist ::= (draw:start-intensity::percent)? (draw:end-intensity::percent)? ;
style-background-image-attlist ::= (style:repeat::("no-repeat" | "repeat" | "stretch"))? ;
 style-background-image-attlist ::= (style:position::("left" | "center" | "right" | "top" | "bottom" | (horiBackPos vertBackPos) | (vertBackPos horiBackPos)))? ;
 style-background-image-attlist ::= (style:filter-name::string)? ;
 style-background-image-attlist ::= (draw:opacity::percent)? ;
svg-font-face-src ::= svg:font-face-src::((svg-font-face-uri | svg-font-face-name)+) ;
text-sequence-decl-attlist ::= common-field-name-attlist ;
 text-sequence-decl-attlist ::= text:display-outline-level::nonNegativeInteger ;
 text-sequence-decl-attlist ::= (text:separation-character::character)? ;
svg-font-face-name ::= svg:font-face-name::((name::string())?) ;
bound-column ::= (form:bound-column::string)? ;
style-drop-cap-attlist ::= (style:length::("word" | positiveInteger))? ;
 style-drop-cap-attlist ::= (style:lines::positiveInteger)? ;
 style-drop-cap-attlist ::= (style:distance::length)? ;
 style-drop-cap-attlist ::= (style:style-name::styleNameRef)? ;
text-table-of-content ::= text:table-of-content::(sectionAttr text-table-of-content-source text-index-body) ;
anim-command-attlist ::= anim:command::string ;
table-data-pilot-members ::= table:data-pilot-members::(table-data-pilot-member*) ;
text-tracked-changes ::= (text:tracked-changes::(text-tracked-changes-attr text-changed-region*))? ;
style-graphic-properties-content ::= style-graphic-properties-content-strict ;
 style-graphic-properties-content ::= style-properties-content ;
office-chart-attlist ::= ε ;
text-index-entry-link-end ::= text:index-entry-link-end::((text:style-name::styleNameRef)?) ;
number-hours-attlist ::= (number:style::("short" | "long"))? ;
form-item ::= form:item::(form-item-attlist string()) ;
cellRangeAddress ::= string() ;
draw-hatch ::= draw:hatch::draw-hatch-attlist ;
sectionAttr ::= (text:style-name::styleNameRef)? ;
 sectionAttr ::= text:name::string ;
 sectionAttr ::= (text:protected::boolean)? ;
 sectionAttr ::= (text:protection-key::string)? ;
office-meta ::= (office:meta::office-meta-content)? ;
style-table-row-properties-attlist ::= (style:row-height::positiveLength)? (style:min-row-height::nonNegativeLength)? ;
 style-table-row-properties-attlist ::= (style:use-optimal-row-height::boolean)? ;
 style-table-row-properties-attlist ::= common-background-color-attlist ;
 style-table-row-properties-attlist ::= common-break-attlist ;
 style-table-row-properties-attlist ::= (fo:keep-together::("auto" | "always"))? ;
chart-regression-curve ::= chart:regression-curve::chart-regression-curve-attlist ;
common-auto-reorder-attlist ::= (number:automatic-order::boolean)? ;
table-consolidation ::= table:consolidation::table-consolidation-attlist ;
text-bibliography-configuration ::= text:bibliography-configuration::(text-bibliography-configuration-attlist text-sort-key*) ;
draw-circle-attlist ::= (svg:r::length)? ;
chart-footer ::= chart:footer::(chart-title-attlist text-p?) ;
table-subtotal-rule ::= table:subtotal-rule::(table-subtotal-rule-attlist table-subtotal-field*) ;
common-stock-marker-attlist ::= (chart:style-name::styleNameRef)? ;
chart-regression-curve-attlist ::= (chart:style-name::styleNameRef)? ;
style-text-properties-content ::= style-text-properties-content-strict ;
 style-text-properties-content ::= style-properties-content ;
common-value-and-type-attlist ::= (office:value-type::"float" office:value::double) | (office:value-type::"percentage" office:value::double) | (office:value-type::"currency" office:value::double (office:currency::string)?) | (office:value-type::"date" office:date-value::dateOrDateTime) | (office:value-type::"time" office:time-value::duration) | (office:value-type::"boolean" office:boolean-value::boolean) | (office:value-type::"string" (office:string-value::string)?) ;
common-basic-timing-attlist ::= common-begin-end-timing-attlist common-dur-timing-attlist common-repeat-timing-attlist ;
draw-caption ::= draw:caption::(draw-caption-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
text-index-body ::= text:index-body::(index-content-main*) ;
common-decimal-places-attlist ::= (number:decimal-places::integer)? ;
office-text-content-main ::= (text-content*) | (text-page-sequence (draw-a | shape)*) ;
number-minutes ::= number:minutes::number-minutes-attlist ;
chart-wall ::= chart:wall::chart-wall-attlist ;
table-subtotal-rule-attlist ::= table:group-by-field-number::nonNegativeInteger ;
text-index-entry-bibliography ::= text:index-entry-bibliography::text-index-entry-bibliography-attrs ;
table-filter ::= table:filter::(table-filter-attlist table-filter-condition | table-filter-and | table-filter-or) ;
style-paragraph-properties-elements ::= style-tab-stops ;
 style-paragraph-properties-elements ::= style-drop-cap ;
 style-paragraph-properties-elements ::= style-background-image ;
form-listbox-attlist ::= form-control-attlist common-disabled-attlist dropdown common-printable-attlist size common-tab-attlist common-title-attlist bound-column common-data-field-attlist list-source list-source-type ;
 form-listbox-attlist ::= (form:multiple::boolean)? ;
 form-listbox-attlist ::= (form:xforms-list-source::string)? ;
style-table-cell-properties-attlist ::= (style:vertical-align::("top" | "middle" | "bottom" | "automatic"))? ;
 style-table-cell-properties-attlist ::= (style:text-align-source::("fix" | "value-type"))? ;
 style-table-cell-properties-attlist ::= common-style-direction-attlist ;
 style-table-cell-properties-attlist ::= (style:glyph-orientation-vertical::("auto" | "0"))? ;
 style-table-cell-properties-attlist ::= common-shadow-attlist ;
 style-table-cell-properties-attlist ::= common-background-color-attlist ;
 style-table-cell-properties-attlist ::= common-border-attlist ;
 style-table-cell-properties-attlist ::= (style:diagonal-tl-br::string)? (style:diagonal-tl-br-widths::borderWidths)? (style:diagonal-bl-tr::string)? (style:diagonal-bl-tr-widths::borderWidths)? ;
 style-table-cell-properties-attlist ::= common-border-line-width-attlist ;
 style-table-cell-properties-attlist ::= common-padding-attlist ;
 style-table-cell-properties-attlist ::= (fo:wrap-option::("no-wrap" | "wrap"))? ;
 style-table-cell-properties-attlist ::= common-rotation-angle-attlist ;
 style-table-cell-properties-attlist ::= (style:rotation-align::("none" | "bottom" | "top" | "center"))? ;
 style-table-cell-properties-attlist ::= (style:cell-protect::("none" | "hidden-and-protected" | (("protected" | "formula-hidden")+)))? ;
 style-table-cell-properties-attlist ::= (style:print-content::boolean)? ;
 style-table-cell-properties-attlist ::= (style:decimal-places::nonNegativeInteger)? ;
 style-table-cell-properties-attlist ::= (style:repeat-content::boolean)? ;
 style-table-cell-properties-attlist ::= (style:shrink-to-fit::boolean)? ;
text-alphabetical-index-mark-attrs ::= (text:key1::string)? (text:key2::string)? ;
 text-alphabetical-index-mark-attrs ::= (text:string-value-phonetic::string)? (text:key1-phonetic::string)? (text:key2-phonetic::string)? ;
 text-alphabetical-index-mark-attrs ::= (text:main-entry::boolean)? ;
text-sort-key ::= text:sort-key::text-sort-key-attlist ;
chart-floor-attlist ::= (svg:width::length)? ;
 chart-floor-attlist ::= (chart:style-name::styleNameRef)? ;
presentation-notes ::= presentation:notes::(common-presentation-header-footer-attlist presentation-notes-attlist shape*) ;
number-number ::= number:number::(number-number-attlist common-decimal-places-attlist common-number-attlist number-embedded-text*) ;
office-drawing-content-main ::= draw-page* ;
text-notes-configuration ::= text:notes-configuration::text-notes-configuration-content ;
any-number ::= number-number | number-scientific-number | number-fraction ;
table-database-range ::= table:database-range::(table-database-range-attlist (table-database-source-sql | table-database-source-table | table-database-source-query)? table-filter? table-sort? table-subtotal-rules?) ;
table-decls ::= table-calculation-settings? table-content-validations? table-label-ranges? ;
style-table-cell-properties-content-strict ::= style-table-cell-properties-attlist style-table-cell-properties-elements ;
text-index-scope-attr ::= (text:index-scope::("document" | "chapter"))? ;
text-section ::= text:section::(text-section-attr text-section-source | text-section-source-dde | ε text-content*) ;
presentation-animation-group ::= presentation:animation-group::(presentation-animation-elements*) ;
text-relative-tab-stop-position-attr ::= (text:relative-tab-stop-position::boolean)? ;
number-currency-symbol-attlist ::= (number:language::languageCode)? (number:country::countryCode)? ;
text-list-item ::= text:list-item::(text-list-item-attr text-list-item-content) ;
text-list-level-style-number-attr ::= (text:style-name::styleNameRef)? ;
 text-list-level-style-number-attr ::= common-num-format-attlist common-num-format-prefix-suffix-attlist ;
 text-list-level-style-number-attr ::= (text:display-levels::positiveInteger)? ;
 text-list-level-style-number-attr ::= (text:start-value::positiveInteger)? ;
common-border-attlist ::= (fo:border::string)? (fo:border-top::string)? (fo:border-bottom::string)? (fo:border-left::string)? (fo:border-right::string)? ;
presentation-notes-attlist ::= (style:page-layout-name::styleNameRef)? ;
 presentation-notes-attlist ::= (draw:style-name::styleNameRef)? ;
positiveLength ::= string() ;
currency-symbol-and-text ::= number-currency-symbol number-text? ;
table-database-range-attlist ::= (table:name::string)? ;
 table-database-range-attlist ::= (table:is-selection::boolean)? ;
 table-database-range-attlist ::= (table:on-update-keep-styles::boolean)? ;
 table-database-range-attlist ::= (table:on-update-keep-size::boolean)? ;
 table-database-range-attlist ::= (table:has-persistent-data::boolean)? ;
 table-database-range-attlist ::= (table:orientation::("column" | "row"))? ;
 table-database-range-attlist ::= (table:contains-header::boolean)? ;
 table-database-range-attlist ::= (table:display-filter-buttons::boolean)? ;
 table-database-range-attlist ::= table:target-range-address::cellRangeAddress ;
 table-database-range-attlist ::= (table:refresh-delay::boolean)? ;
form-property-name ::= form:property-name::string ;
config-config-item-set-attlist ::= config:name::string ;
text-object-index-source-attrs ::= text-index-scope-attr ;
 text-object-index-source-attrs ::= text-relative-tab-stop-position-attr ;
 text-object-index-source-attrs ::= (text:use-spreadsheet-objects::boolean)? ;
 text-object-index-source-attrs ::= (text:use-math-objects::boolean)? ;
 text-object-index-source-attrs ::= (text:use-draw-objects::boolean)? ;
 text-object-index-source-attrs ::= (text:use-chart-objects::boolean)? ;
 text-object-index-source-attrs ::= (text:use-other-objects::boolean)? ;
text-illustration-index-source ::= text:illustration-index-source::(text-illustration-index-source-attrs text-index-title-template? text-illustration-index-entry-template?) ;
table-change-track-table-cell-attlist ::= (table:cell-address::cellAddress)? ;
 table-change-track-table-cell-attlist ::= (table:matrix-covered::boolean)? ;
 table-change-track-table-cell-attlist ::= (table:formula::string)? (table:number-matrix-columns-spanned::positiveInteger)? (table:number-matrix-rows-spanned::positiveInteger)? common-value-and-type-attlist? ;
lineWidth ::= "auto" | "normal" | "bold" | "thin" | "dash" | "medium" | "thick" | positiveInteger | percent | positiveLength ;
style-region-center ::= style:region-center::region-content ;
number-number-style ::= number:number-style::(common-data-style-attlist style-text-properties? number-text? (any-number number-text?)? style-map*) ;
target-frame ::= (office:target-frame::targetFrameName)? ;
base64Binary ::= string() ;
form-property-value-and-type-attlist ::= common-value-and-type-attlist | (office:value-type::"void") ;
table-named-range ::= table:named-range::table-named-range-attlist ;
style-header ::= style:header::(common-style-header-footer-attlist header-footer-content) ;
form-time-attlist ::= (form:value::time)? ;
 form-time-attlist ::= (form:current-value::time)? ;
 form-time-attlist ::= (form:min-value::time)? ;
 form-time-attlist ::= (form:max-value::time)? ;
table-cell-address ::= table:cell-address::common-table-cell-address-attlist ;
table-operation ::= table:operation::table-operation-attlist ;
office-document-meta ::= office:document-meta::(office-document-common-attrs office-meta) ;
text-index-entry-text ::= text:index-entry-text::((text:style-name::styleNameRef)?) ;
common-draw-data-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:show::"embed")? (xlink:actuate::"onLoad")? ;
chart-axis-attlist ::= chart:dimension::("x" | "y" | "z") ;
 chart-axis-attlist ::= (chart:name::string)? ;
 chart-axis-attlist ::= (chart:style-name::styleNameRef)? ;
text-page-attlist ::= text:master-page-name::styleNameRef ;
text-table-of-content-entry-template ::= text:table-of-content-entry-template::(text-table-of-content-entry-template-attlist text-table-of-content-children*) ;
draw-g ::= draw:g::(draw-g-attlist common-draw-z-index-attlist common-draw-name-attlist common-draw-id-attlist common-draw-style-name-attlist common-text-spreadsheet-shape-attlist office-event-listeners? draw-glue-point* shape*) ;
lineStyle ::= "none" | "solid" | "dotted" | "dash" | "long-dash" | "dot-dash" | "dot-dot-dash" | "wave" ;
common-draw-path-data-attlist ::= svg:d::pathData ;
table-named-range-attlist ::= table:name::string table:cell-range-address::cellRangeAddress (table:base-cell-address::cellAddress)? (table:range-usable-as::("none" | (("print-range" | "filter" | "repeat-row" | "repeat-column")+)))? ;
number-quarter-attlist ::= (number:style::("short" | "long"))? ;
draw-a ::= draw:a::(draw-a-attlist draw-frame) ;
table-filter-condition-attlist ::= table:field-number::nonNegativeInteger ;
 table-filter-condition-attlist ::= table:value::string ;
 table-filter-condition-attlist ::= table:operator::string ;
 table-filter-condition-attlist ::= (table:case-sensitive::string)? ;
 table-filter-condition-attlist ::= (table:data-type::("text" | "number"))? ;
table-previous ::= table:previous::((table:id::string)? table-change-track-table-cell) ;
common-draw-shape-with-text-and-styles-attlist ::= common-draw-shape-with-styles-attlist common-draw-text-style-name-attlist ;
number-text-style ::= number:text-style::(common-data-style-attlist style-text-properties? number-text? (number-text-content number-text?)* style-map*) ;
office-body ::= office:body::office-body-content ;
svg-font-face-uri ::= svg:font-face-uri::(common-svg-font-face-xlink-attlist svg-font-face-format*) ;
draw-g-attlist ::= (svg:y::coordinate)? ;
text-list-style-content ::= text:list-level-style-number::(text-list-level-style-attr text-list-level-style-number-attr style-list-level-properties? style-text-properties?) ;
 text-list-style-content ::= text:list-level-style-bullet::(text-list-level-style-attr text-list-level-style-bullet-attr style-list-level-properties? style-text-properties?) ;
 text-list-style-content ::= text:list-level-style-image::(text-list-level-style-attr text-list-level-style-image-attr style-list-level-properties?) ;
any-time ::= number-hours | number-am-pm | number-minutes | number-seconds ;
table-table-row-attlist ::= (table:number-rows-repeated::positiveInteger)? ;
 table-table-row-attlist ::= (table:style-name::styleNameRef)? ;
 table-table-row-attlist ::= (table:default-cell-style-name::styleNameRef)? ;
 table-table-row-attlist ::= (table:visibility::table-visibility-value)? ;
style-page-layout ::= style:page-layout::(style-page-layout-attlist style-page-layout-properties? style-header-style? style-footer-style?) ;
office-process-content ::= (office:process-content::boolean)? ;
form-date-attlist ::= (form:value::date)? ;
 form-date-attlist ::= (form:current-value::date)? ;
 form-date-attlist ::= (form:min-value::date)? ;
 form-date-attlist ::= (form:max-value::date)? ;
common-form-relative-image-position-attlist ::= ((form:image-position::"center")?) | (form:image-position::("start" | "end" | "top" | "bottom") (form:image-align::("start" | "center" | "end"))?) ;
table-insertion-cut-off ::= table:insertion-cut-off::table-insertion-cut-off-attlist ;
presentation-play ::= presentation:play::presentation-play-attlist ;
presentation-animations ::= presentation:animations::((presentation-animation-elements | presentation-animation-group)*) ;
style-header-footer-properties ::= style:header-footer-properties::style-header-footer-properties-content ;
common-value-attlist ::= (form:value::string)? ;
style-footnote-sep-attlist ::= (style:width::length)? (style:rel-width::percent)? (style:color::color)? (style:line-style::lineStyle)? (style:adjustment::("left" | "center" | "right"))? (style:distance-before-sep::length)? (style:distance-after-sep::length)? ;
table-first-row ::= table:first-row::common-table-template-attlist ;
text-list-header ::= text:list-header::text-list-item-content ;
style-list-level-properties-content ::= style-list-level-properties-content-strict ;
 style-list-level-properties-content ::= style-properties-content ;
style-page-layout-properties-content-strict ::= style-page-layout-properties-attlist style-page-layout-properties-elements ;
style-column-sep-attlist ::= (style:style::("none" | "solid" | "dotted" | "dashed" | "dot-dashed"))? ;
 style-column-sep-attlist ::= style:width::length ;
 style-column-sep-attlist ::= (style:height::percent)? ;
 style-column-sep-attlist ::= (style:vertical-align::("top" | "middle" | "bottom"))? ;
 style-column-sep-attlist ::= (style:color::color)? ;
text-user-index-entry-template ::= text:user-index-entry-template::(text-user-index-entry-template-attrs (text-index-entry-chapter | text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop)*) ;
table-database-source-table ::= table:database-source-query::table-database-source-query-attlist ;
table-table-cell-range-source-attlist ::= table:name::string ;
 table-table-cell-range-source-attlist ::= table:last-column-spanned::positiveInteger table:last-row-spanned::positiveInteger ;
common-form-control-attlist ::= (form:name::string)? ;
 common-form-control-attlist ::= (form:control-implementation::namespacedToken)? ;
common-svg-font-face-xlink-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? ;
draw-area-polygon ::= draw:area-polygon::(common-draw-area-attlist svg:x::coordinate svg:y::coordinate svg:width::length svg:height::length common-draw-viewbox-attlist common-draw-points-attlist svg-desc? office-event-listeners?) ;
chart-stock-gain-marker ::= chart:stock-gain-marker::common-stock-marker-attlist ;
office-forms ::= (office:forms::(office-forms-attlist (form-form | xforms-model)*))? ;
common-restart-timing-attlist ::= (smil:restart::("never" | "always" | "whenNotActive" | "default"))? ;
form-properties ::= form:properties::(form-property+) ;
common-maxlength-attlist ::= (form:max-length::nonNegativeInteger)? ;
draw-object-attlist ::= (draw:notify-on-update-of-ranges::string)? ;
common-rotation-angle-attlist ::= (style:rotation-angle::nonNegativeInteger)? ;
form-file-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist ;
common-readonly-attlist ::= (form:readonly::boolean)? ;
draw-measure ::= draw:measure::(draw-measure-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
draw-control ::= draw:control::(draw-control-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist draw-glue-point*) ;
table-table-column ::= table:table-column::table-table-column-attlist ;
text-sequence-ref-content ::= (text:reference-format::("page" | "chapter" | "direction" | "text" | "category-and-value" | "caption" | "value"))? ;
table-data-pilot-display-info ::= table:data-pilot-display-info::table-data-pilot-display-info-attlist ;
table-source-range-address ::= table:source-range-address::common-table-range-attlist ;
office-forms-attlist ::= (form:automatic-focus::boolean)? ;
 office-forms-attlist ::= (form:apply-design-mode::boolean)? ;
presentation-show ::= presentation:show::presentation-show-attlist ;
draw-plugin-attlist ::= (draw:mime-type::string())? ;
svg-stop ::= svg:stop::(svg:offset::(double | percent) (svg:stop-color::color)? (svg:stop-opacity::double)?) ;
table-named-expression ::= table:named-expression::table-named-expression-attlist ;
table-validation-attlist ::= table:name::string ;
 table-validation-attlist ::= (table:condition::string)? ;
 table-validation-attlist ::= (table:base-cell-address::cellAddress)? ;
 table-validation-attlist ::= (table:allow-empty-cell::boolean)? ;
 table-validation-attlist ::= (table:display-list::("none" | "unsorted" | "sort-ascending"))? ;
table-even-columns ::= table:even-columns::common-table-template-attlist ;
draw-page-thumbnail-attlist ::= (draw:page-number::positiveInteger)? ;
text-tab-attr ::= (text:tab-ref::nonNegativeInteger)? ;
text-style-name ::= (form:text-style-name::styleNameRef)? ;
text-table-of-content-source ::= text:table-of-content-source::(text-table-of-content-source-attlist text-index-title-template? text-table-of-content-entry-template* text-index-source-styles*) ;
form-hidden-attlist ::= form-control-attlist common-value-attlist ;
text-index-entry-tab-stop-attrs ::= (style:leader-char::character)? ;
 text-index-entry-tab-stop-attrs ::= (style:type::"right") | (style:type::"left" style:position::length) ;
table-source-cell-range ::= table:source-cell-range::(table-source-cell-range-attlist table-filter?) ;
fontFamilyGeneric ::= "roman" | "swiss" | "modern" | "decorative" | "script" | "system" ;
table-data-pilot-display-info-attlist ::= table:enabled::boolean ;
 table-data-pilot-display-info-attlist ::= table:data-field::string ;
 table-data-pilot-display-info-attlist ::= table:member-count::nonNegativeInteger ;
 table-data-pilot-display-info-attlist ::= table:display-member-mode::("from-top" | "from-bottom") ;
common-field-database-table-attlist ::= text:table-name::string ;
 common-field-database-table-attlist ::= (text:table-type::("table" | "query" | "command"))? ;
common-margin-attlist ::= (fo:margin::(nonNegativeLength | percent))? ;
custom-shape-type ::= "non-primitive" | string ;
common-spline-anim-value-attlist ::= (smil:keyTimes::string)? ;
 common-spline-anim-value-attlist ::= (smil:keySplines::string)? ;
table-odd-columns ::= table:odd-columns::common-table-template-attlist ;
common-draw-layer-name-attlist ::= (draw:layer::string())? ;
draw-rect-attlist ::= (draw:corner-radius::nonNegativeLength)? ;
chart-stock-loss-marker ::= chart:stock-loss-marker::common-stock-marker-attlist ;
common-field-display-value-formula-attlist ::= (text:display::("value" | "formula"))? ;
office-event-listeners ::= office:event-listeners::((script-event-listener | presentation-event-listener)*) ;
text-id ::= text:id::string ;
dr3d-sphere ::= dr3d:sphere::(dr3d-sphere-attlist common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-dr3d-transform-attlist) ;
text-table-of-content-source-attlist ::= (text:outline-level::positiveInteger)? ;
 text-table-of-content-source-attlist ::= (text:use-outline-level::boolean)? ;
 text-table-of-content-source-attlist ::= (text:use-index-marks::boolean)? ;
 text-table-of-content-source-attlist ::= (text:use-index-source-styles::boolean)? ;
 text-table-of-content-source-attlist ::= (text:index-scope::("document" | "chapter"))? ;
 text-table-of-content-source-attlist ::= (text:relative-tab-stop-position::boolean)? ;
style-text-properties ::= style:text-properties::style-text-properties-content ;
draw-equation ::= draw:equation::draw-equation-attlist ;
draw-object-ole-attlist ::= (draw:class-id::string())? ;
text-table-index-source ::= text:table-index-source::(text-illustration-index-source-attrs text-index-title-template? text-table-index-entry-template?) ;
office-automatic-styles ::= (office:automatic-styles::(styles style-page-layout*))? ;
animation-element ::= anim:animate::(common-anim-target-attlist common-anim-named-target-attlist common-anim-values-attlist common-anim-spline-mode-attlist common-spline-anim-value-attlist common-repeat-timing-attlist common-fill-timing-attlist common-anim-add-accum-attlist) ;
 animation-element ::= anim:set::(common-anim-target-attlist common-anim-named-target-attlist common-anim-set-values-attlist common-fill-timing-attlist common-anim-add-accum-attlist) ;
 animation-element ::= anim:animateMotion::(anim-animate-motion-attlist common-anim-target-attlist common-anim-named-target-attlist common-anim-add-accum-attlist common-anim-values-attlist common-fill-timing-attlist common-spline-anim-value-attlist) ;
 animation-element ::= anim:animateColor::(common-anim-target-attlist common-anim-named-target-attlist common-anim-add-accum-attlist common-anim-values-attlist common-anim-spline-mode-attlist common-spline-anim-value-attlist anim-animate-color-attlist common-fill-timing-attlist) ;
 animation-element ::= anim:animateTransform::(common-anim-target-attlist common-anim-named-target-attlist common-anim-add-accum-attlist common-anim-values-attlist anim-animate-transform-attlist common-fill-timing-attlist) ;
 animation-element ::= anim:transitionFilter::(common-anim-target-attlist common-anim-add-accum-attlist common-anim-values-attlist common-anim-spline-mode-attlist anim-transition-filter-attlist common-fill-timing-attlist) ;
 animation-element ::= anim:par::(common-anim-attlist common-timing-attlist common-endsync-timing-attlist animation-element*) ;
 animation-element ::= anim:seq::(common-anim-attlist common-endsync-timing-attlist common-timing-attlist) ;
 animation-element ::= anim:iterate::(common-anim-attlist anin-iterate-attlist common-timing-attlist common-endsync-timing-attlist animation-element*) ;
 animation-element ::= anim:audio::(common-anim-attlist anim-audio-attlist common-basic-timing-attlist) ;
 animation-element ::= anim:command::(common-anim-attlist anim-command-attlist common-begin-end-timing-attlist common-anim-target-attlist (anim:param::(anim:name::string() anim:value::string()))*) ;
draw-polygon ::= draw:polygon::(common-draw-points-attlist common-draw-position-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
anim-animate-color-attlist ::= (anim:color-interpolation::("rgb" | "hsl"))? ;
 anim-animate-color-attlist ::= (anim:color-interpolation-direction::("clockwise" | "counter-clockwise"))? ;
common-numeric-control-attlist ::= form-control-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-convert-empty-attlist common-data-field-attlist ;
office-image-content-epilogue ::= ε ;
style-section-properties-attlist ::= common-background-color-attlist ;
 style-section-properties-attlist ::= common-horizontal-margin-attlist ;
 style-section-properties-attlist ::= (style:protect::boolean)? ;
 style-section-properties-attlist ::= (text:dont-balance-text-columns::boolean)? ;
 style-section-properties-attlist ::= common-writing-mode-attlist ;
table-data-pilot-group ::= table:data-pilot-group::(table-data-pilot-group-attlist table-data-pilot-group-member+) ;
table-label-range ::= table:label-range::table-label-range-attlist ;
number-boolean ::= number:boolean::ε ;
form-radio-attlist ::= form-control-attlist current-selected common-disabled-attlist label common-printable-attlist selected common-tab-attlist common-title-attlist common-value-attlist common-data-field-attlist common-form-visual-effect-attlist common-form-relative-image-position-attlist ;
dr3d-cube ::= dr3d:cube::(dr3d-cube-attlist common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-dr3d-transform-attlist) ;
form-grid-attlist ::= form-control-attlist common-disabled-attlist common-printable-attlist common-tab-attlist common-title-attlist ;
table-scenario-attlist ::= table:scenario-ranges::cellRangeAddressList ;
 table-scenario-attlist ::= table:is-active::boolean ;
 table-scenario-attlist ::= (table:display-border::boolean)? ;
 table-scenario-attlist ::= (table:border-color::color)? ;
 table-scenario-attlist ::= (table:copy-back::boolean)? ;
 table-scenario-attlist ::= (table:copy-styles::boolean)? ;
 table-scenario-attlist ::= (table:copy-formulas::boolean)? ;
 table-scenario-attlist ::= (table:comment::string)? ;
 table-scenario-attlist ::= (table:protected::boolean)? ;
textEncoding ::= string() ;
common-control-id-attlist ::= form:id::ID ;
number-week-of-year ::= number:week-of-year::common-calendar-attlist ;
form-option ::= form:option::(form-option-attlist string()) ;
table-data-pilot-level-attlist ::= (table:show-empty::boolean)? ;
style-footer-style ::= style:footer-style::(style-header-footer-properties?) ;
presentation-event-listener ::= presentation:event-listener::(presentation-event-listener-attlist presentation-sound?) ;
draw-gradient ::= draw:gradient::(common-draw-gradient-attlist draw-gradient-attlist) ;
office-text-content-epilogue ::= table-functions ;
text-outline-level ::= (text:outline-level::positiveInteger)? ;
common-background-color-attlist ::= (fo:background-color::("transparent" | color))? ;
table-data-pilot-group-attlist ::= table:name::string ;
draw-frame-attlist ::= (draw:copy-of::string)? ;
common-restart-default-attlist ::= (smil:restartDefault::("never" | "always" | "whenNotActive" | "inherit"))? ;
chart-domain ::= chart:domain::((table:cell-range-address::cellRangeAddress)?) ;
table-data-pilot-group-member-attlist ::= table:name::string ;
form-option-attlist ::= current-selected selected label common-value-attlist ;
office-text-attlist ::= (text:global::boolean)? ;
style-paragraph-properties ::= style:paragraph-properties::style-paragraph-properties-content ;
table-table-row-group ::= table:table-row-group::(table-table-row-group-attlist table-rows-and-groups) ;
text-file-name-attlist ::= (text:display::("full" | "path" | "name" | "name-and-extension"))? ;
 text-file-name-attlist ::= common-field-fixed-attlist ;
text-illustration-index-entry-template ::= text:illustration-index-entry-template::text-illustration-index-entry-content ;
presentation-event-listener-attlist ::= script:event-name::string ;
 presentation-event-listener-attlist ::= presentation:action::("none" | "previous-page" | "next-page" | "first-page" | "last-page" | "hide" | "stop" | "execute" | "show" | "verb" | "fade-out" | "sound") ;
 presentation-event-listener-attlist ::= (presentation:effect::presentationEffects)? ;
 presentation-event-listener-attlist ::= (presentation:direction::presentationEffectDirections)? ;
 presentation-event-listener-attlist ::= (presentation:speed::presentationSpeeds)? ;
 presentation-event-listener-attlist ::= (presentation:start-scale::percent)? ;
 presentation-event-listener-attlist ::= (xlink:href::anyURI)? (xlink:type::"simple")? (xlink:show::"embed")? (xlink:actuate::"onRequest")? ;
 presentation-event-listener-attlist ::= (presentation:verb::nonNegativeInteger)? ;
common-fill-default-attlist ::= (smil:fillDefault::("remove" | "freeze" | "hold" | "transition" | "auto" | "inherit"))? ;
nonNegativePixelLength ::= string() ;
office-chart-content-epilogue ::= table-functions ;
common-form-visual-effect-attlist ::= (form:visual-effect::("flat" | "3d"))? ;
horizontal-mirror ::= "horizontal" | "horizontal-on-odd" | "horizontal-on-even" ;
header-footer-content ::= (text-decls (text-h | text-p | text-list | table-table | text-section | text-table-of-content | text-illustration-index | text-table-index | text-object-index | text-user-index | text-alphabetical-index | text-bibliography | text-index-title | change-marks)*) | (style-region-left? style-region-center? style-region-right?) ;
style-page-layout-properties-attlist ::= (fo:page-width::length)? (fo:page-height::length)? ;
 style-page-layout-properties-attlist ::= common-num-format-attlist? common-num-format-prefix-suffix-attlist ;
 style-page-layout-properties-attlist ::= (style:paper-tray-name::("default" | string))? ;
 style-page-layout-properties-attlist ::= (style:print-orientation::("portrait" | "landscape"))? ;
 style-page-layout-properties-attlist ::= common-horizontal-margin-attlist common-vertical-margin-attlist common-margin-attlist ;
 style-page-layout-properties-attlist ::= common-border-attlist ;
 style-page-layout-properties-attlist ::= common-border-line-width-attlist ;
 style-page-layout-properties-attlist ::= common-padding-attlist ;
 style-page-layout-properties-attlist ::= common-shadow-attlist ;
 style-page-layout-properties-attlist ::= common-background-color-attlist ;
 style-page-layout-properties-attlist ::= (style:register-truth-ref-style-name::styleNameRef)? ;
 style-page-layout-properties-attlist ::= (style:print::(("headers" | "grid" | "annotations" | "objects" | "charts" | "drawings" | "formulas" | "zero-values")*))? ;
 style-page-layout-properties-attlist ::= (style:print-page-order::("ttb" | "ltr"))? ;
 style-page-layout-properties-attlist ::= (style:first-page-number::(positiveInteger | "continue"))? ;
 style-page-layout-properties-attlist ::= (style:scale-to::percent)? (style:scale-to-pages::positiveInteger)? ;
 style-page-layout-properties-attlist ::= (style:table-centering::("horizontal" | "vertical" | "both" | "none"))? ;
 style-page-layout-properties-attlist ::= (style:footnote-max-height::length)? ;
 style-page-layout-properties-attlist ::= common-writing-mode-attlist ;
 style-page-layout-properties-attlist ::= (style:layout-grid-mode::("none" | "line" | "both"))? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-base-height::length)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-ruby-height::length)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-lines::positiveInteger)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-color::color)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-ruby-below::boolean)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-print::boolean)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-display::boolean)? ;
draw-text-box-attlist ::= (draw:chain-next-name::string)? ;
 draw-text-box-attlist ::= (draw:corner-radius::nonNegativeLength)? ;
 draw-text-box-attlist ::= (fo:min-height::(length | percent))? (fo:min-width::(length | percent))? ;
 draw-text-box-attlist ::= (fo:max-height::(length | percent))? (fo:max-width::(length | percent))? ;
tab-cycles ::= "records" | "current" | "page" ;
table-error-message ::= table:error-message::((table:title::string)? (table:display::boolean)? (table:message-type::("stop" | "warning" | "information"))? text-p*) ;
style-table-row-properties ::= style:table-row-properties::style-table-row-properties-content ;
style-paragraph-properties-attlist ::= (fo:line-height::("normal" | nonNegativeLength | percent))? ;
 style-paragraph-properties-attlist ::= (style:line-height-at-least::nonNegativeLength)? ;
 style-paragraph-properties-attlist ::= (style:line-spacing::length)? ;
 style-paragraph-properties-attlist ::= (style:font-independent-line-spacing::boolean)? ;
 style-paragraph-properties-attlist ::= common-text-align ;
 style-paragraph-properties-attlist ::= (fo:text-align-last::("start" | "center" | "justify"))? ;
 style-paragraph-properties-attlist ::= (style:justify-single-word::boolean)? ;
 style-paragraph-properties-attlist ::= (fo:keep-together::("auto" | "always"))? ;
 style-paragraph-properties-attlist ::= (fo:widows::nonNegativeInteger)? ;
 style-paragraph-properties-attlist ::= (fo:orphans::nonNegativeInteger)? ;
 style-paragraph-properties-attlist ::= (style:tab-stop-distance::nonNegativeLength)? ;
 style-paragraph-properties-attlist ::= (fo:hyphenation-keep::("auto" | "page"))? ;
 style-paragraph-properties-attlist ::= (fo:hyphenation-ladder-count::("no-limit" | positiveInteger))? ;
 style-paragraph-properties-attlist ::= (style:register-true::boolean)? ;
 style-paragraph-properties-attlist ::= common-horizontal-margin-attlist ;
 style-paragraph-properties-attlist ::= (fo:text-indent::(length | percent))? ;
 style-paragraph-properties-attlist ::= (style:auto-text-indent::boolean)? ;
 style-paragraph-properties-attlist ::= common-vertical-margin-attlist ;
 style-paragraph-properties-attlist ::= common-margin-attlist ;
 style-paragraph-properties-attlist ::= common-break-attlist ;
 style-paragraph-properties-attlist ::= common-background-color-attlist ;
 style-paragraph-properties-attlist ::= common-border-attlist ;
 style-paragraph-properties-attlist ::= common-border-line-width-attlist ;
 style-paragraph-properties-attlist ::= common-padding-attlist ;
 style-paragraph-properties-attlist ::= common-shadow-attlist ;
 style-paragraph-properties-attlist ::= common-keep-with-next-attlist ;
 style-paragraph-properties-attlist ::= (text:number-lines::boolean)? ;
 style-paragraph-properties-attlist ::= (text:line-number::nonNegativeInteger)? ;
 style-paragraph-properties-attlist ::= (style:text-autospace::("none" | "ideograph-alpha"))? ;
 style-paragraph-properties-attlist ::= (style:punctuation-wrap::("simple" | "hanging"))? ;
 style-paragraph-properties-attlist ::= (style:line-break::("normal" | "strict"))? ;
 style-paragraph-properties-attlist ::= (style:vertical-align::("top" | "middle" | "bottom" | "auto"))? ;
 style-paragraph-properties-attlist ::= common-writing-mode-attlist ;
 style-paragraph-properties-attlist ::= (style:writing-mode-automatic::boolean)? ;
 style-paragraph-properties-attlist ::= (style:snap-to-layout-grid::boolean)? ;
 style-paragraph-properties-attlist ::= common-page-number-attlist ;
 style-paragraph-properties-attlist ::= (style:background-transparency::percent)? ;
draw-regular-polygon ::= draw:regular-polygon::(draw-regular-polygon-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
table-table-row-group-attlist ::= (table:display::boolean)? ;
common-border-line-width-attlist ::= (style:border-line-width::borderWidths)? (style:border-line-width-top::borderWidths)? (style:border-line-width-bottom::borderWidths)? (style:border-line-width-left::borderWidths)? (style:border-line-width-right::borderWidths)? ;
office-presentation-attlist ::= ε ;
vertBackPos ::= "top" | "center" | "bottom" ;
draw-layer-attlist ::= draw:name::string ;
 draw-layer-attlist ::= (draw:protected::boolean)? ;
 draw-layer-attlist ::= (draw:display::("always" | "screen" | "printer" | "none"))? ;
draw-circle ::= draw:circle::(draw-circle-attlist common-draw-circle-ellipse-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
IDREF ::= string() ;
draw-page ::= draw:page::(common-presentation-header-footer-attlist draw-page-attlist office-forms? shape* (presentation-animations | animation-element)? presentation-notes?) ;
presentation-settings ::= (presentation:settings::(presentation-settings-attlist presentation-show*))? ;
config-items ::= (config-config-item | config-config-item-set | config-config-item-map-named | config-config-item-map-indexed)+ ;
style-text-properties-content-strict ::= style-text-properties-attlist style-text-properties-elements ;
text-table-index ::= text:table-index::(sectionAttr text-table-index-source text-index-body) ;
pathData ::= string() ;
text-outline-level-style-attlist ::= text:level::positiveInteger ;
 text-outline-level-style-attlist ::= (text:style-name::styleNameRef)? ;
 text-outline-level-style-attlist ::= common-num-format-attlist common-num-format-prefix-suffix-attlist ;
 text-outline-level-style-attlist ::= (text:display-levels::positiveInteger)? ;
 text-outline-level-style-attlist ::= (text:start-value::positiveInteger)? ;
table-data-pilot-subtotal-attlist ::= table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string) ;
common-anim-values-attlist ::= (smil:values::string)? ;
 common-anim-values-attlist ::= (anim:formula::string)? ;
 common-anim-values-attlist ::= common-anim-set-values-attlist (smil:from::string)? (smil:by::string)? ;
table-table-template-attlist ::= text:name::string ;
 table-table-template-attlist ::= text:first-row-start-column::rowOrCol ;
 table-table-template-attlist ::= text:first-row-end-column::rowOrCol ;
 table-table-template-attlist ::= text:last-row-start-column::rowOrCol ;
 table-table-template-attlist ::= text:last-row-end-column::rowOrCol ;
office-text-content-prelude ::= office-forms text-tracked-changes text-decls table-decls ;
draw-hatch-attlist ::= draw:name::styleName ;
 draw-hatch-attlist ::= (draw:display-name::string)? ;
 draw-hatch-attlist ::= draw:style::("single" | "double" | "triple") ;
 draw-hatch-attlist ::= (draw:color::color)? ;
 draw-hatch-attlist ::= (draw:distance::length)? ;
 draw-hatch-attlist ::= (draw:rotation::integer)? ;
presentation-settings-attlist ::= (presentation:start-page::string)? ;
 presentation-settings-attlist ::= (presentation:show::string)? ;
 presentation-settings-attlist ::= (presentation:full-screen::boolean)? ;
 presentation-settings-attlist ::= (presentation:endless::boolean)? ;
 presentation-settings-attlist ::= (presentation:pause::duration)? ;
 presentation-settings-attlist ::= (presentation:show-logo::boolean)? ;
 presentation-settings-attlist ::= (presentation:force-manual::boolean)? ;
 presentation-settings-attlist ::= (presentation:mouse-visible::boolean)? ;
 presentation-settings-attlist ::= (presentation:mouse-as-pen::boolean)? ;
 presentation-settings-attlist ::= (presentation:start-with-navigator::boolean)? ;
 presentation-settings-attlist ::= (presentation:animations::("enabled" | "disabled"))? ;
 presentation-settings-attlist ::= (presentation:transition-on-click::("enabled" | "disabled"))? ;
 presentation-settings-attlist ::= (presentation:stay-on-top::boolean)? ;
dr3d-light ::= dr3d:light::dr3d-light-attlist ;
common-draw-shape-with-styles-attlist ::= common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-draw-transform-attlist common-draw-name-attlist common-text-spreadsheet-shape-attlist ;
number-day-of-week-attlist ::= (number:style::("short" | "long"))? ;
number-and-text ::= number-number number-text? ;
common-keep-with-next-attlist ::= (fo:keep-with-next::("auto" | "always"))? ;
languageCode ::= string() ;
common-text-anchor-attlist ::= (text:anchor-type::("page" | "frame" | "paragraph" | "char" | "as-char"))? ;
 common-text-anchor-attlist ::= (text:anchor-page-number::positiveInteger)? ;
common-field-num-format-attlist ::= common-num-format-attlist? ;
presentation-show-shape ::= presentation:show-shape::(common-presentation-effect-attlist presentation-sound?) ;
table-sort-groups ::= table:sort-groups::table-sort-groups-attlist ;
text-object-index ::= text:object-index::(sectionAttr text-object-index-source text-index-body) ;
table-insertion-attlist ::= table:type::("row" | "column" | "table") ;
 table-insertion-attlist ::= table:position::integer ;
 table-insertion-attlist ::= (table:count::positiveInteger)? ;
 table-insertion-attlist ::= (table:table::integer)? ;
table-filter-and ::= table:filter-and::((table-filter-or | table-filter-condition)+) ;
office-document-common-attrs ::= (office:version::string)? ;
common-draw-style-name-attlist ::= ((draw:style-name::styleNameRef)? (draw:class-names::styleNameRefs)?) | ((presentation:style-name::styleNameRef)? (presentation:class-names::styleNameRefs)?) ;
text-bibliography-configuration-attlist ::= (text:prefix::string)? (text:suffix::string)? ;
 text-bibliography-configuration-attlist ::= (text:numbered-entries::boolean)? ;
 text-bibliography-configuration-attlist ::= (text:sort-by-position::boolean)? (fo:language::languageCode)? (fo:country::countryCode)? (text:sort-algorithm::string)? ;
chart-floor ::= chart:floor::chart-floor-attlist ;
office-master-styles ::= (office:master-styles::(style-master-page* style-handout-master? draw-layer-set?))? ;
table-table-header-rows ::= table:table-header-rows::(table-table-row+) ;
text-list-level-style-image-attr ::= common-draw-data-attlist | office-binary-data ;
table-movement-cut-off-attlist ::= (table:position::integer) | (table:start-position::integer table:end-position::integer) ;
style-table-column-properties-elements ::= ε ;
table-table-cell-attlist ::= (table:number-columns-repeated::positiveInteger)? ;
 table-table-cell-attlist ::= (table:style-name::styleNameRef)? ;
 table-table-cell-attlist ::= (table:content-validation-name::string)? ;
 table-table-cell-attlist ::= (table:formula::string)? ;
 table-table-cell-attlist ::= common-value-and-type-attlist? ;
 table-table-cell-attlist ::= (table:protect::boolean)? ;
style-list-level-properties ::= style:list-level-properties::style-list-level-properties-content ;
lineType ::= "none" | "single" | "double" ;
number-minutes-attlist ::= (number:style::("short" | "long"))? ;
table-change-deletion ::= table:change-deletion::((table:id::string)?) ;
timeOrDateTime ::= string() ;
table-data-pilot-layout-info-attlist ::= table:layout-mode::("tabular-layout" | "outline-subtotals-top" | "outline-subtotals-bottom") ;
 table-data-pilot-layout-info-attlist ::= table:add-empty-lines::boolean ;
table-filter-attlist ::= (table:target-range-address::cellRangeAddress)? ;
 table-filter-attlist ::= (table:condition-source::("self" | "cell-range"))? ;
 table-filter-attlist ::= (table:condition-source-range-address::cellRangeAddress)? ;
 table-filter-attlist ::= (table:display-duplicates::boolean)? ;
draw-ellipse-attlist ::= (svg:rx::length svg:ry::length)? ;
table-table-column-group ::= table:table-column-group::(table-table-column-group-attlist table-columns-and-groups) ;
text-index-entry-link-start ::= text:index-entry-link-start::((text:style-name::styleNameRef)?) ;
common-convert-empty-attlist ::= (form:convert-empty-to-null::boolean)? ;
table-last-row ::= table:last-row::common-table-template-attlist ;
style-style-content ::= style:family::"text" style-text-properties? ;
 style-style-content ::= style:family::"paragraph" style-paragraph-properties? style-text-properties? ;
 style-style-content ::= style:family::"section" style-section-properties? ;
 style-style-content ::= style:family::"ruby" style-ruby-properties? ;
 style-style-content ::= style:family::"table" style-table-properties? ;
 style-style-content ::= style:family::"table-column" style-table-column-properties? ;
 style-style-content ::= style:family::"table-row" style-table-row-properties? ;
 style-style-content ::= style:family::"table-cell" style-table-cell-properties? style-paragraph-properties? style-text-properties? ;
 style-style-content ::= style:family::("graphic" | "presentation") style-graphic-properties? style-paragraph-properties? style-text-properties? ;
 style-style-content ::= style:family::"drawing-page" style-drawing-page-properties? ;
 style-style-content ::= style:family::"chart" style-chart-properties? style-graphic-properties? style-paragraph-properties? style-text-properties? ;
common-format-source-attlist ::= (number:format-source::("fixed" | "language"))? ;
table-change-track-table-cell ::= table:change-track-table-cell::(table-change-track-table-cell-attlist text-p*) ;
text-list ::= text:list::(text-list-attr text-list-header? text-list-item*) ;
common-table-cell-address-attlist ::= table:column::integer table:row::integer table:table::integer ;
common-anim-set-values-attlist ::= (smil:to::string)? ;
table-table-column-group-attlist ::= (table:display::boolean)? ;
style-footer ::= style:footer::(common-style-header-footer-attlist header-footer-content) ;
fontVariant ::= "normal" | "small-caps" ;
text-bibliography-entry-template-attrs ::= text:bibliography-type::text-bibliography-types ;
 text-bibliography-entry-template-attrs ::= text:style-name::styleNameRef ;
number-year-attlist ::= (number:style::("short" | "long"))? ;
svg-font-face-format ::= svg:font-face-format::((svg:string::string())?) ;
style-map-attlist ::= style:condition::string ;
 style-map-attlist ::= style:apply-style-name::styleNameRef ;
 style-map-attlist ::= (style:base-cell-address::cellAddress)? ;
number-text ::= number:text::string() ;
text-index-entry-tab-stop ::= text:index-entry-tab-stop::((text:style-name::styleNameRef)? text-index-entry-tab-stop-attrs) ;
table-sort-attlist ::= (table:bind-styles-to-content::boolean)? ;
 table-sort-attlist ::= (table:target-range-address::cellRangeAddress)? ;
 table-sort-attlist ::= (table:case-sensitive::boolean)? ;
 table-sort-attlist ::= (table:language::languageCode)? ;
 table-sort-attlist ::= (table:country::countryCode)? ;
 table-sort-attlist ::= (table:algorithm::string)? ;
chart-chart ::= chart:chart::(chart-chart-attlist chart-title? chart-subtitle? chart-footer? chart-legend? chart-plot-area table-table?) ;
style-table-properties ::= style:table-properties::style-table-properties-content ;
office-spreadsheet-attlist ::= (table:structure-protected::boolean)? (table:protection-key::string)? ;
style-chart-properties-content-strict ::= style-chart-properties-attlist style-chart-properties-elements ;
style-header-left ::= style:header-left::(common-style-header-footer-attlist header-footer-content) ;
common-value-type-attlist ::= office:value-type::valueType ;
table-rows-no-group ::= (table-rows (table-table-header-rows table-rows?)?) | (table-table-header-rows table-rows?) ;
common-field-database-name ::= (text:database-name::string)? ;
 common-field-database-name ::= form-connection-resource ;
chart-subtitle ::= chart:subtitle::(chart-title-attlist text-p?) ;
table-filter-condition ::= table:filter-condition::table-filter-condition-attlist ;
style-region-left ::= style:region-left::region-content ;
common-draw-position-attlist ::= (svg:x::coordinate)? (svg:y::coordinate)? ;
common-padding-attlist ::= (fo:padding::nonNegativeLength)? (fo:padding-top::nonNegativeLength)? (fo:padding-bottom::nonNegativeLength)? (fo:padding-left::nonNegativeLength)? (fo:padding-right::nonNegativeLength)? ;
draw-contour-path ::= draw:contour-path::(common-contour-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-path-data-attlist) ;
style-table-properties-attlist ::= (style:width::positiveLength)? (style:rel-width::percent)? ;
 style-table-properties-attlist ::= (table:align::("left" | "center" | "right" | "margins"))? ;
 style-table-properties-attlist ::= common-horizontal-margin-attlist ;
 style-table-properties-attlist ::= common-vertical-margin-attlist ;
 style-table-properties-attlist ::= common-margin-attlist ;
 style-table-properties-attlist ::= common-page-number-attlist ;
 style-table-properties-attlist ::= common-break-attlist ;
 style-table-properties-attlist ::= common-background-color-attlist ;
 style-table-properties-attlist ::= common-shadow-attlist ;
 style-table-properties-attlist ::= common-keep-with-next-attlist ;
 style-table-properties-attlist ::= (style:may-break-between-rows::boolean)? ;
 style-table-properties-attlist ::= (table:border-model::("collapsing" | "separating"))? ;
 style-table-properties-attlist ::= common-writing-mode-attlist ;
 style-table-properties-attlist ::= (table:display::boolean)? ;
text-alphabetical-index-source-attrs ::= text-index-scope-attr text-relative-tab-stop-position-attr ;
 text-alphabetical-index-source-attrs ::= (text:ignore-case::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:main-entry-style-name::styleNameRef)? ;
 text-alphabetical-index-source-attrs ::= (text:alphabetical-separators::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:combine-entries::boolean)? (text:combine-entries-with-dash::boolean)? (text:combine-entries-with-pp::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:use-keys-as-entries::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:capitalize-entries::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:comma-separated::boolean)? ;
 text-alphabetical-index-source-attrs ::= (fo:language::languageCode)? ;
 text-alphabetical-index-source-attrs ::= (fo:country::countryCode)? ;
 text-alphabetical-index-source-attrs ::= (text:sort-algorithm::string)? ;
text-list-attr ::= (text:style-name::styleNameRef)? ;
 text-list-attr ::= (text:continue-numbering::boolean)? ;
form-form-attlist ::= (xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")?)? ;
 form-form-attlist ::= (office:target-frame::targetFrameName)? ;
 form-form-attlist ::= (form:method::("get" | "post" | string))? ;
 form-form-attlist ::= (form:enctype::string)? ;
 form-form-attlist ::= (form:allow-deletes::boolean)? ;
 form-form-attlist ::= (form:allow-inserts::boolean)? ;
 form-form-attlist ::= (form:allow-updates::boolean)? ;
 form-form-attlist ::= (form:apply-filter::boolean)? ;
 form-form-attlist ::= (form:command-type::("table" | "query" | "command"))? ;
 form-form-attlist ::= (form:command::string())? ;
 form-form-attlist ::= (form:datasource::(anyURI | string))? ;
 form-form-attlist ::= (form:master-fields::string)? ;
 form-form-attlist ::= (form:detail-fields::string)? ;
 form-form-attlist ::= (form:escape-processing::boolean)? ;
 form-form-attlist ::= (form:filter::string)? ;
 form-form-attlist ::= (form:ignore-result::boolean)? ;
 form-form-attlist ::= (form:navigation-mode::navigation)? ;
 form-form-attlist ::= (form:order::string)? ;
 form-form-attlist ::= (form:tab-cycle::tab-cycles)? ;
table-table-columns ::= table:table-columns::(table-table-column+) ;
text-tracked-changes-attr ::= (text:track-changes::boolean)? ;
style-table-properties-content-strict ::= style-table-properties-attlist style-table-properties-elements ;
ID ::= string() ;
table-table-header-columns ::= table:table-header-columns::(table-table-column+) ;
table-help-message ::= table:help-message::((table:title::string)? (table:display::boolean)? text-p*) ;
table-filter-or ::= table:filter-or::((table-filter-and | table-filter-condition)+) ;
common-printable-attlist ::= (form:printable::boolean)? ;
heading-attrs ::= text:outline-level::positiveInteger ;
 heading-attrs ::= (text:restart-numbering::boolean)? ;
 heading-attrs ::= (text:start-value::nonNegativeInteger)? ;
 heading-attrs ::= (text:is-list-header::boolean)? ;
form-frame-attlist ::= form-control-attlist common-disabled-attlist for label common-printable-attlist common-title-attlist ;
table-data-pilot-sort-info-attlist ::= (table:sort-mode::"data" table:data-field::string) | (table:sort-mode::("none" | "manual" | "name")) ;
 table-data-pilot-sort-info-attlist ::= table:order::("ascending" | "descending") ;
common-time-manip-attlist ::= (smil:accelerate::double)? ;
 common-time-manip-attlist ::= (smil:decelerate::double)? ;
 common-time-manip-attlist ::= (smil:autoReverse::boolean)? ;
form-textarea-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist ;
text-numbered-paragraph-attr ::= (text:level::positiveInteger)? ;
 text-numbered-paragraph-attr ::= text-list-attr ;
 text-numbered-paragraph-attr ::= text-list-item-attr ;
draw-glue-point-attlist ::= draw:id::nonNegativeInteger ;
 draw-glue-point-attlist ::= svg:x::(distance | percent) svg:y::(distance | percent) ;
 draw-glue-point-attlist ::= draw:align::("top-left" | "top" | "top-right" | "left" | "center" | "right" | "bottom-left" | "bottom-right") ;
table-data-pilot-field-attlist ::= table:source-field-name::string ;
 table-data-pilot-field-attlist ::= (table:orientation::("row" | "column" | "data" | "hidden")) | (table:orientation::"page" table:selected-page::string) ;
 table-data-pilot-field-attlist ::= (table:is-data-layout-field::string)? ;
 table-data-pilot-field-attlist ::= (table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string))? ;
 table-data-pilot-field-attlist ::= (table:used-hierarchy::integer)? ;
office-styles ::= (office:styles::(styles style-default-style* text-outline-style? text-notes-configuration* text-bibliography-configuration? text-linenumbering-configuration? draw-gradient* svg-linearGradient* svg-radialGradient* draw-hatch* draw-fill-image* draw-marker* draw-stroke-dash* draw-opacity* style-presentation-page-layout*))? ;
style-drawing-page-properties-content ::= style-drawing-page-properties-content-strict ;
 style-drawing-page-properties-content ::= style-properties-content ;
common-draw-viewbox-attlist ::= svg:viewBox::(integer integer integer integer) ;
namespacedToken ::= string() ;
table-table ::= table:table::(table-table-attlist table-table-source? office-dde-source? table-scenario? office-forms? table-shapes? table-columns-and-groups table-rows-and-groups) ;
style-footnote-sep ::= (style:footnote-sep::style-footnote-sep-attlist)? ;
style-header-style ::= style:header-style::(style-header-footer-properties?) ;
anim-audio-attlist ::= (xlink:href::anyURI)? ;
 anim-audio-attlist ::= (anim:audio-level::double)? ;
office-document ::= office:document::(office-document-attrs office-document-common-attrs office-meta office-settings office-scripts office-font-face-decls office-styles office-automatic-styles office-master-styles office-body) ;
number-day-attlist ::= (number:style::("short" | "long"))? ;
office-drawing-content-epilogue ::= table-functions ;
common-horizontal-margin-attlist ::= (fo:margin-left::(length | percent))? (fo:margin-right::(length | percent))? ;
text-page-continuation-attlist ::= text:select-page::("previous" | "next") ;
 text-page-continuation-attlist ::= (text:string-value::string)? ;
text-user-index-entry-template-attrs ::= text:outline-level::positiveInteger ;
 text-user-index-entry-template-attrs ::= text:style-name::styleNameRef ;
text-illustration-index-entry-content ::= text-illustration-index-entry-template-attrs (text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop)* ;
positiveInteger ::= integer() ;
common-anim-add-accum-attlist ::= (smil:accumulate::("none" | "sum"))? ;
 common-anim-add-accum-attlist ::= (smil:additive::("replace" | "sum"))? ;
draw-applet ::= draw:applet::(draw-applet-attlist common-draw-data-attlist? draw-param*) ;
text-database-display-attlist ::= common-field-database-table ;
 text-database-display-attlist ::= common-field-data-style-name-attlist ;
 text-database-display-attlist ::= text:column-name::string ;
number-embedded-text-attlist ::= number:position::integer ;
style-master-page ::= style:master-page::(style-master-page-attlist (style-header style-header-left?)? (style-footer style-footer-left?)? office-forms? style-style* shape* presentation-notes?) ;
style-handout-master-attlist ::= (presentation:presentation-page-layout-name::styleNameRef)? ;
 style-handout-master-attlist ::= style:page-layout-name::styleNameRef ;
 style-handout-master-attlist ::= (draw:style-name::styleNameRef)? ;
text-linenumbering-separator ::= text:linenumbering-separator::((text:increment::nonNegativeInteger)? string()) ;
text-index-title ::= text:index-title::(sectionAttr index-content-main*) ;
text-common-ref-content ::= string() ;
 text-common-ref-content ::= (text:ref-name::string)? ;
office-script ::= office:script::(office-script-attlist string()? anyElements string()?) ;
text-alphabetical-index-entry-template-attrs ::= text:outline-level::("1" | "2" | "3" | "separator") ;
 text-alphabetical-index-entry-template-attrs ::= text:style-name::styleNameRef ;
presentation-play-attlist ::= draw:shape-id::IDREF (presentation:speed::presentationSpeeds)? ;
table-insertion-cut-off-attlist ::= table:id::string ;
 table-insertion-cut-off-attlist ::= table:position::integer ;
svg-radialGradient ::= svg:radialGradient::(common-svg-gradient-attlist (svg:cx::(coordinate | percent))? (svg:cy::(coordinate | percent))? (svg:r::(coordinate | percent))? (svg:fx::(coordinate | percent))? (svg:fy::(coordinate | percent))? svg-stop*) ;
common-anim-spline-mode-attlist ::= (smil:calcMode::("discrete" | "linear" | "paced" | "spline"))? ;
table-cell-range-source ::= table:cell-range-source::(table-table-cell-range-source-attlist table-linked-source-attlist) ;
draw-connector-attlist ::= (draw:type::("standard" | "lines" | "line" | "curve"))? ;
 draw-connector-attlist ::= (svg:x1::coordinate svg:y1::coordinate)? ;
 draw-connector-attlist ::= (draw:start-shape::IDREF)? ;
 draw-connector-attlist ::= (draw:start-glue-point::nonNegativeInteger)? ;
 draw-connector-attlist ::= (svg:x2::coordinate svg:y2::coordinate)? ;
 draw-connector-attlist ::= (draw:end-shape::IDREF)? ;
 draw-connector-attlist ::= (draw:end-glue-point::nonNegativeInteger)? ;
 draw-connector-attlist ::= (draw:line-skew::(length (length length?)?))? ;
table-highlighted-range-attlist ::= (table:cell-range-address::cellRangeAddress)? ;
 table-highlighted-range-attlist ::= table:direction::("from-another-table" | "to-another-table" | "from-same-table") ;
 table-highlighted-range-attlist ::= (table:contains-error::boolean)? ;
button-type ::= (form:button-type::types)? ;
table-null-date ::= table:null-date::((table:value-type::valueType)? (table:date-value-type::date)?) ;
svg-definition-src ::= svg:definition-src::common-svg-font-face-xlink-attlist ;
style-master-page-attlist ::= style:name::styleName ;
 style-master-page-attlist ::= (style:display-name::string)? ;
 style-master-page-attlist ::= style:page-layout-name::styleNameRef ;
 style-master-page-attlist ::= (draw:style-name::styleNameRef)? ;
 style-master-page-attlist ::= (style:next-style-name::styleNameRef)? ;
text-user-index ::= text:user-index::(sectionAttr text-user-index-source text-index-body) ;
number-month-attlist ::= (number:textual::boolean)? ;
 number-month-attlist ::= (number:possessive-form::boolean)? ;
 number-month-attlist ::= (number:style::("short" | "long"))? ;
chart-data-point-attlist ::= (chart:repeated::nonNegativeInteger)? ;
 chart-data-point-attlist ::= (chart:style-name::styleNameRef)? ;
text-index-entry-bibliography-attrs ::= (text:style-name::styleNameRef)? ;
 text-index-entry-bibliography-attrs ::= text:bibliography-data-field::("address" | "annote" | "author" | "bibliography-type" | "booktitle" | "chapter" | "custom1" | "custom2" | "custom3" | "custom4" | "custom5" | "edition" | "editor" | "howpublished" | "identifier" | "institution" | "isbn" | "issn" | "journal" | "month" | "note" | "number" | "organizations" | "pages" | "publisher" | "report-type" | "school" | "series" | "title" | "url" | "volume" | "year") ;
dateOrDateTime ::= string() ;
text-table-of-content-children ::= text-index-entry-chapter | text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop | text-index-entry-link-start | text-index-entry-link-end ;
draw-marker ::= draw:marker::(draw-marker-attlist common-draw-viewbox-attlist common-draw-path-data-attlist) ;
common-data-style-attlist ::= style:name::styleName ;
 common-data-style-attlist ::= (number:language::languageCode)? ;
 common-data-style-attlist ::= (number:country::countryCode)? ;
 common-data-style-attlist ::= (number:title::string())? ;
 common-data-style-attlist ::= (style:volatile::boolean)? ;
 common-data-style-attlist ::= (number:transliteration-format::string)? ;
 common-data-style-attlist ::= (number:transliteration-language::countryCode)? ;
 common-data-style-attlist ::= (number:transliteration-country::countryCode)? ;
 common-data-style-attlist ::= (number:transliteration-style::("short" | "medium" | "long"))? ;
table-database-source-table-attlist ::= table:database-name::string ;
 table-database-source-table-attlist ::= table:database-table-name::string ;
office-spreadsheet-content-main ::= table-table* ;
dr3d-scene ::= dr3d:scene::(dr3d-scene-attlist common-draw-position-attlist common-draw-size-attlist common-draw-style-name-attlist common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-text-spreadsheet-shape-attlist common-dr3d-transform-attlist dr3d-light* shapes3d*) ;
table-columns ::= table-table-columns | (table-table-column+) ;
dc-creator ::= dc:creator::string ;
image-data ::= (form:image-data::anyURI)? ;
chart-legend ::= chart:legend::chart-legend-attlist ;
number-scientific-number-attlist ::= (number:min-exponent-digits::integer)? ;
text-section-source-attr ::= (xlink:href::anyURI (xlink:type::"simple")? (xlink:show::"embed")?)? ;
 text-section-source-attr ::= (text:section-name::string)? ;
 text-section-source-attr ::= (text:filter-name::string)? ;
gradient-style ::= "linear" | "axial" | "radial" | "ellipsoid" | "square" | "rectangular" ;
relativeLength ::= string() ;
office-annotation-attlist ::= (office:display::boolean)? ;
common-dr3d-transform-attlist ::= (dr3d:transform::string())? ;
common-field-database-table ::= common-field-database-table-attlist common-field-database-name ;
number-era ::= number:era::(number-era-attlist common-calendar-attlist) ;
dr3d-scene-attlist ::= (dr3d:vrp::vector3D)? (dr3d:vpn::vector3D)? (dr3d:vup::vector3D)? ;
 dr3d-scene-attlist ::= (dr3d:projection::("parallel" | "perspective"))? ;
 dr3d-scene-attlist ::= (dr3d:distance::length)? ;
 dr3d-scene-attlist ::= (dr3d:focal-length::length)? ;
 dr3d-scene-attlist ::= (dr3d:shadow-slant::nonNegativeInteger)? ;
 dr3d-scene-attlist ::= (dr3d:shade-mode::("flat" | "phong" | "gouraud" | "draft"))? ;
 dr3d-scene-attlist ::= (dr3d:ambient-color::color)? ;
 dr3d-scene-attlist ::= (dr3d:lighting-mode::boolean)? ;
draw-rect ::= draw:rect::(draw-rect-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
text-changed-region ::= text:changed-region::(text-changed-region-attr text-changed-region-content) ;
text-alphabetical-index-source ::= text:alphabetical-index-source::(text-alphabetical-index-source-attrs text-index-title-template? text-alphabetical-index-entry-template*) ;
common-draw-z-index-attlist ::= (draw:z-index::nonNegativeInteger)? ;
style-chart-properties-content ::= style-properties-content ;
table-dependencies ::= table:dependencies::(table-dependency+) ;
chart-grid-attlist ::= (chart:class::("major" | "minor"))? ;
 chart-grid-attlist ::= (chart:style-name::styleNameRef)? ;
table-target-range-address ::= table:target-range-address::common-table-range-attlist ;
style-graphic-properties-attlist ::= (draw:stroke::("none" | "dash" | "solid"))? ;
 style-graphic-properties-attlist ::= (draw:stroke-dash::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:stroke-dash-names::styleNameRefs)? ;
 style-graphic-properties-attlist ::= (svg:stroke-width::length)? ;
 style-graphic-properties-attlist ::= (svg:stroke-color::color)? ;
 style-graphic-properties-attlist ::= (draw:marker-start::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:marker-end::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:marker-start-width::length)? ;
 style-graphic-properties-attlist ::= (draw:marker-end-width::length)? ;
 style-graphic-properties-attlist ::= (draw:marker-start-center::boolean)? ;
 style-graphic-properties-attlist ::= (draw:marker-end-center::boolean)? ;
 style-graphic-properties-attlist ::= (svg:stroke-opacity::(string() | percent))? ;
 style-graphic-properties-attlist ::= (draw:stroke-linejoin::("miter" | "round" | "bevel" | "middle" | "none" | "inherit"))? ;
 style-graphic-properties-attlist ::= (draw:symbol-color::color)? ;
 style-graphic-properties-attlist ::= (text:animation::("none" | "scroll" | "alternate" | "slide"))? ;
 style-graphic-properties-attlist ::= (text:animation-direction::("left" | "right" | "up" | "down"))? ;
 style-graphic-properties-attlist ::= (text:animation-start-inside::boolean)? ;
 style-graphic-properties-attlist ::= (text:animation-stop-inside::boolean)? ;
 style-graphic-properties-attlist ::= (text:animation-repeat::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (text:animation-delay::duration)? ;
 style-graphic-properties-attlist ::= (text:animation-steps::length)? ;
 style-graphic-properties-attlist ::= (draw:auto-grow-width::boolean)? (draw:auto-grow-height::boolean)? ;
 style-graphic-properties-attlist ::= (draw:fit-to-size::boolean)? ;
 style-graphic-properties-attlist ::= (draw:fit-to-contour::boolean)? ;
 style-graphic-properties-attlist ::= (draw:textarea-vertical-align::("top" | "middle" | "bottom" | "justify"))? ;
 style-graphic-properties-attlist ::= (draw:textarea-horizontal-align::("left" | "center" | "right" | "justify"))? ;
 style-graphic-properties-attlist ::= (fo:wrap-option::("no-wrap" | "wrap"))? ;
 style-graphic-properties-attlist ::= (draw:color-mode::("greyscale" | "mono" | "watermark" | "standard"))? ;
 style-graphic-properties-attlist ::= (draw:color-inversion::boolean)? ;
 style-graphic-properties-attlist ::= (draw:luminance::percent)? ;
 style-graphic-properties-attlist ::= (draw:contrast::percent)? ;
 style-graphic-properties-attlist ::= (draw:gamma::percent)? ;
 style-graphic-properties-attlist ::= (draw:red::percent)? ;
 style-graphic-properties-attlist ::= (draw:green::percent)? ;
 style-graphic-properties-attlist ::= (draw:blue::percent)? ;
 style-graphic-properties-attlist ::= (draw:image-opacity::percent)? ;
 style-graphic-properties-attlist ::= (draw:shadow::("visible" | "hidden"))? ;
 style-graphic-properties-attlist ::= (draw:shadow-offset-x::length)? (draw:shadow-offset-y::length)? ;
 style-graphic-properties-attlist ::= (draw:shadow-color::color)? ;
 style-graphic-properties-attlist ::= (draw:shadow-opacity::percent)? ;
 style-graphic-properties-attlist ::= (draw:start-line-spacing-horizontal::distance)? (draw:start-line-spacing-vertical::distance)? ;
 style-graphic-properties-attlist ::= (draw:end-line-spacing-horizontal::distance)? (draw:end-line-spacing-vertical::distance)? ;
 style-graphic-properties-attlist ::= (draw:line-distance::distance)? ;
 style-graphic-properties-attlist ::= (draw:guide-overhang::length)? ;
 style-graphic-properties-attlist ::= (draw:guide-distance::distance)? ;
 style-graphic-properties-attlist ::= (draw:start-guide::length)? ;
 style-graphic-properties-attlist ::= (draw:end-guide::length)? ;
 style-graphic-properties-attlist ::= (draw:placing::("below" | "above"))? ;
 style-graphic-properties-attlist ::= (draw:parallel::boolean)? ;
 style-graphic-properties-attlist ::= (draw:measure-align::("automatic" | "left-outside" | "inside" | "right-outside"))? (draw:measure-vertical-align::("automatic" | "above" | "below" | "center"))? ;
 style-graphic-properties-attlist ::= (draw:unit::("automatic" | "mm" | "cm" | "m" | "km" | "pt" | "pc" | "inch" | "ft" | "mi"))? ;
 style-graphic-properties-attlist ::= (draw:show-unit::boolean)? ;
 style-graphic-properties-attlist ::= (draw:decimal-places::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (draw:caption-type::("straight-line" | "angled-line" | "angled-connector-line"))? ;
 style-graphic-properties-attlist ::= (draw:caption-angle-type::("fixed" | "free"))? ;
 style-graphic-properties-attlist ::= (draw:caption-angle::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (draw:caption-gap::distance)? ;
 style-graphic-properties-attlist ::= (draw:caption-escape-direction::("horizontal" | "vertical" | "auto"))? ;
 style-graphic-properties-attlist ::= (draw:caption-escape::(length | percent))? ;
 style-graphic-properties-attlist ::= (draw:caption-line-length::length)? ;
 style-graphic-properties-attlist ::= (draw:caption-fit-line-length::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:horizontal-segments::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:vertical-segments::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:edge-rounding::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:edge-rounding-mode::("correct" | "attractive"))? ;
 style-graphic-properties-attlist ::= (dr3d:back-scale::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:depth::length)? ;
 style-graphic-properties-attlist ::= (dr3d:backface-culling::("enabled" | "disabled"))? ;
 style-graphic-properties-attlist ::= (dr3d:end-angle::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:close-front::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:close-back::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:lighting-mode::("standard" | "double-sided"))? ;
 style-graphic-properties-attlist ::= (dr3d:normals-kind::("object" | "flat" | "sphere"))? ;
 style-graphic-properties-attlist ::= (dr3d:normals-direction::("normal" | "inverse"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-generation-mode-x::("object" | "parallel" | "sphere"))? (dr3d:texture-generation-mode-y::("object" | "parallel" | "sphere"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-kind::("luminance" | "intesity" | "color"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-filter::("enabled" | "disabled"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-mode::("replace" | "modulate" | "blend"))? ;
 style-graphic-properties-attlist ::= (dr3d:ambient-color::color)? (dr3d:emissive-color::color)? (dr3d:specular-color::color)? (dr3d:diffuse-color::color)? ;
 style-graphic-properties-attlist ::= (dr3d:shininess::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:shadow::("visible" | "hidden"))? ;
 style-graphic-properties-attlist ::= common-draw-rel-size-attlist (fo:min-width::(length | percent))? ;
 style-graphic-properties-attlist ::= (fo:min-height::(length | percent))? ;
 style-graphic-properties-attlist ::= (fo:max-height::(length | percent))? (fo:max-width::(length | percent))? ;
 style-graphic-properties-attlist ::= common-horizontal-margin-attlist ;
 style-graphic-properties-attlist ::= common-vertical-margin-attlist ;
 style-graphic-properties-attlist ::= common-margin-attlist ;
 style-graphic-properties-attlist ::= (style:print-content::boolean)? ;
 style-graphic-properties-attlist ::= (style:protect::("none" | (("content" | "position" | "size")+)))? ;
 style-graphic-properties-attlist ::= (style:horizontal-pos::("left" | "center" | "right" | "from-left" | "inside" | "outside" | "from-inside"))? (svg:x::coordinate)? ;
 style-graphic-properties-attlist ::= (style:horizontal-rel::("page" | "page-content" | "page-start-margin" | "page-end-margin" | "frame" | "frame-content" | "frame-start-margin" | "frame-end-margin" | "paragraph" | "paragraph-content" | "paragraph-start-margin" | "paragraph-end-margin" | "char"))? ;
 style-graphic-properties-attlist ::= common-vertical-pos-attlist ;
 style-graphic-properties-attlist ::= common-vertical-rel-attlist ;
 style-graphic-properties-attlist ::= common-text-anchor-attlist ;
 style-graphic-properties-attlist ::= common-border-attlist ;
 style-graphic-properties-attlist ::= common-border-line-width-attlist ;
 style-graphic-properties-attlist ::= common-padding-attlist ;
 style-graphic-properties-attlist ::= common-shadow-attlist ;
 style-graphic-properties-attlist ::= common-background-color-attlist ;
 style-graphic-properties-attlist ::= (style:editable::boolean)? ;
 style-graphic-properties-attlist ::= (style:wrap::("none" | "left" | "right" | "parallel" | "dynamic" | "run-through" | "biggest"))? ;
 style-graphic-properties-attlist ::= (style:wrap-dynamic-treshold::nonNegativeLength)? ;
 style-graphic-properties-attlist ::= (style:number-wrapped-paragraphs::("no-limit" | positiveInteger))? ;
 style-graphic-properties-attlist ::= (style:wrap-contour::boolean)? ;
 style-graphic-properties-attlist ::= (style:wrap-contour-mode::("full" | "outside"))? ;
 style-graphic-properties-attlist ::= (style:run-through::("foreground" | "background"))? ;
 style-graphic-properties-attlist ::= (style:flow-with-text::boolean)? ;
 style-graphic-properties-attlist ::= (style:overflow-behavior::("clip" | "auto-create-new-frame"))? ;
 style-graphic-properties-attlist ::= (style:mirror::("none" | "vertical" | horizontal-mirror | ("vertical" horizontal-mirror) | (horizontal-mirror "vertical")))? ;
 style-graphic-properties-attlist ::= (fo:clip::string)? ;
 style-graphic-properties-attlist ::= (draw:wrap-influence-on-position::("iterative" | "once-concurrent" | "once-successive"))? ;
 style-graphic-properties-attlist ::= (draw:frame-display-scrollbar::boolean)? ;
 style-graphic-properties-attlist ::= (draw:frame-display-border::boolean)? ;
 style-graphic-properties-attlist ::= (draw:frame-margin-horizontal::nonNegativePixelLength)? (draw:frame-margin-vertical::nonNegativePixelLength)? ;
 style-graphic-properties-attlist ::= (draw:visible-area-left::nonNegativeLength)? (draw:visible-area-top::nonNegativeLength)? (draw:visible-area-width::positiveLength)? (draw:visible-area-height::positiveLength)? ;
 style-graphic-properties-attlist ::= (draw:ole-draw-aspect::nonNegativeInteger)? ;
presentationSpeeds ::= "slow" | "medium" | "fast" ;
office-font-face-decls ::= (office:font-face-decls::(style-font-face*))? ;
office-document-styles ::= office:document-styles::(office-document-common-attrs office-font-face-decls office-styles office-automatic-styles office-master-styles) ;
table-subtotal-field-attlist ::= table:field-number::nonNegativeInteger ;
 table-subtotal-field-attlist ::= table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string) ;
text-hidden-text-attlist ::= text:condition::formula ;
 text-hidden-text-attlist ::= text:string-value::string ;
 text-hidden-text-attlist ::= (text:is-hidden::boolean)? ;
form-property ::= form:property::(form-property-name form-property-value-and-type-attlist) ;
 form-property ::= form:list-property::(form-property-name form-property-type-and-value-list) ;
table-named-expression-attlist ::= table:name::string table:expression::string (table:base-cell-address::cellAddress)? ;
nonNegativeInteger ::= integer() ;
style-paragraph-properties-content-strict ::= style-paragraph-properties-attlist style-paragraph-properties-elements ;
script-event-listener-attlist ::= script:event-name::string ;
 script-event-listener-attlist ::= script:language::string ;
 script-event-listener-attlist ::= (script:macro-name::string) | (xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")?) ;
text-variable-decl ::= text:variable-decl::(common-field-name-attlist common-value-type-attlist) ;
draw-fill-image ::= draw:fill-image::(draw-fill-image-attlist xlink:href::anyURI (xlink:type::"simple")? (xlink:show::"embed")? (xlink:actuate::"onLoad")?) ;
office-document-content ::= office:document-content::(office-document-common-attrs office-scripts office-font-face-decls office-automatic-styles office-body) ;
anim-animate-transform-attlist ::= svg:type::("translate" | "scale" | "rotate" | "skewX" | "skewY") ;
draw-param-attlist ::= (draw:name::string())? ;
 draw-param-attlist ::= (draw:value::string())? ;
common-begin-end-timing-attlist ::= (smil:begin::string)? ;
 common-begin-end-timing-attlist ::= (smil:end::string)? ;
common-presentation-effect-attlist ::= draw:shape-id::IDREF ;
 common-presentation-effect-attlist ::= (presentation:effect::presentationEffects)? ;
 common-presentation-effect-attlist ::= (presentation:direction::presentationEffectDirections)? ;
 common-presentation-effect-attlist ::= (presentation:speed::presentationSpeeds)? ;
 common-presentation-effect-attlist ::= (presentation:delay::duration)? ;
 common-presentation-effect-attlist ::= (presentation:start-scale::percent)? ;
 common-presentation-effect-attlist ::= (presentation:path-id::string())? ;
style-columns-attlist ::= fo:column-count::positiveInteger ;
 style-columns-attlist ::= (fo:column-gap::length)? ;
text-a-attlist ::= (office:name::string)? ;
 text-a-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? ;
 text-a-attlist ::= (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? ;
 text-a-attlist ::= (text:style-name::styleNameRef)? (text:visited-style-name::styleNameRef)? ;
config-config-item ::= config:config-item::(config-config-item-attlist string()) ;
table-first-column ::= table:first-column::common-table-template-attlist ;
style-header-footer-attlist ::= (style:dynamic-spacing::boolean)? ;
style-graphic-fill-properties-attlist ::= (draw:fill::("none" | "solid" | "bitmap" | "gradient" | "hatch"))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-color::color)? ;
 style-graphic-fill-properties-attlist ::= (draw:secondary-fill-color::color)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-gradient-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (draw:gradient-step-count::nonNegativeInteger)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-hatch-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-hatch-solid::boolean)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (style:repeat::("no-repeat" | "repeat" | "stretch"))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-width::(length | percent))? (draw:fill-image-height::(length | percent))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-ref-point-x::percent)? (draw:fill-image-ref-point-y::percent)? (draw:fill-image-ref-point::("top-left" | "top" | "top-right" | "left" | "center" | "right" | "bottom-left" | "bottom" | "bottom-right"))? ;
 style-graphic-fill-properties-attlist ::= (draw:tile-repeat-offset::string())? ;
 style-graphic-fill-properties-attlist ::= (draw:opacity::percent)? ;
 style-graphic-fill-properties-attlist ::= (draw:opacity-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (svg:fill-rule::("nonzero" | "evenodd"))? ;
common-draw-rel-size-attlist ::= common-draw-size-attlist (style:rel-width::(percent | "scale" | "scale-min"))? (style:rel-height::(percent | "scale" | "scale-min"))? ;
table-cut-offs ::= table:cut-offs::((table-movement-cut-off+) | (table-insertion-cut-off table-movement-cut-off*)) ;
dr3d-sphere-attlist ::= (dr3d:center::vector3D)? ;
 dr3d-sphere-attlist ::= (dr3d:size::vector3D)? ;
style-header-footer-properties-content ::= style-header-footer-properties-content-strict ;
 style-header-footer-properties-content ::= style-properties-content ;
draw-fill-image-attlist ::= draw:name::styleName ;
 draw-fill-image-attlist ::= (draw:display-name::string)? ;
 draw-fill-image-attlist ::= (svg:width::length)? (svg:height::length)? ;
common-dur-timing-attlist ::= (smil:dur::string)? ;
chart-mean-value-attlist ::= (chart:style-name::styleNameRef)? ;
style-text-properties-attlist ::= (fo:font-variant::fontVariant)? ;
 style-text-properties-attlist ::= (fo:text-transform::("none" | "lowercase" | "uppercase" | "capitalize"))? ;
 style-text-properties-attlist ::= (fo:color::color)? ;
 style-text-properties-attlist ::= (style:use-window-font-color::boolean)? ;
 style-text-properties-attlist ::= (style:text-outline::boolean)? ;
 style-text-properties-attlist ::= (style:text-line-through-type::lineType)? ;
 style-text-properties-attlist ::= (style:text-line-through-style::lineStyle)? ;
 style-text-properties-attlist ::= (style:text-line-through-width::lineWidth)? ;
 style-text-properties-attlist ::= (style:text-line-through-color::("font-color" | color))? ;
 style-text-properties-attlist ::= (style:text-line-through-text::string)? ;
 style-text-properties-attlist ::= (style:text-line-through-text-style::styleNameRef)? ;
 style-text-properties-attlist ::= (style:text-position::(percent | "super" | "sub" percent?))? ;
 style-text-properties-attlist ::= (style:font-name::string)? (style:font-name-asian::string)? (style:font-name-complex::string)? ;
 style-text-properties-attlist ::= (fo:font-family::string)? (style:font-family-asian::string)? (style:font-family-complex::string)? ;
 style-text-properties-attlist ::= (style:font-family-generic::fontFamilyGeneric)? (style:font-family-generic-asian::fontFamilyGeneric)? (style:font-family-generic-complex::fontFamilyGeneric)? ;
 style-text-properties-attlist ::= (style:font-style-name::string)? (style:font-style-name-asian::string)? (style:font-style-name-complex::string)? ;
 style-text-properties-attlist ::= (style:font-pitch::fontPitch)? (style:font-pitch-asian::fontPitch)? (style:font-pitch-complex::fontPitch)? ;
 style-text-properties-attlist ::= (style:font-charset::textEncoding)? ;
 style-text-properties-attlist ::= (fo:font-size::(positiveLength | percent))? (style:font-size-asian::(positiveLength | percent))? (style:font-size-complex::(positiveLength | percent))? ;
 style-text-properties-attlist ::= (style:font-size-rel::length)? (style:font-size-rel-asian::length)? (style:font-size-rel-complex::length)? ;
 style-text-properties-attlist ::= (style:script-type::("latin" | "asian" | "complex" | "ignore"))? ;
 style-text-properties-attlist ::= (fo:letter-spacing::(length | "normal"))? ;
 style-text-properties-attlist ::= (fo:language::languageCode)? (style:language-asian::languageCode)? (style:language-complex::languageCode)? ;
 style-text-properties-attlist ::= (fo:country::countryCode)? (style:country-asian::countryCode)? (style:country-complex::countryCode)? ;
 style-text-properties-attlist ::= (fo:font-style::fontStyle)? (style:font-style-asian::fontStyle)? (style:font-style-complex::fontStyle)? ;
 style-text-properties-attlist ::= (style:font-relief::("none" | "embossed" | "engraved"))? ;
 style-text-properties-attlist ::= (fo:text-shadow::shadowType)? ;
 style-text-properties-attlist ::= (style:text-underline-type::lineType)? ;
 style-text-properties-attlist ::= (style:text-underline-style::lineStyle)? ;
 style-text-properties-attlist ::= (style:text-underline-width::lineWidth)? ;
 style-text-properties-attlist ::= (style:text-underline-color::("font-color" | color))? ;
 style-text-properties-attlist ::= (fo:font-weight::fontWeight)? (style:font-weight-asian::fontWeight)? (style:font-weight-complex::fontWeight)? ;
 style-text-properties-attlist ::= (style:text-underline-mode::lineMode)? ;
 style-text-properties-attlist ::= (style:text-line-through-mode::lineMode)? ;
 style-text-properties-attlist ::= (style:letter-kerning::boolean)? ;
 style-text-properties-attlist ::= (style:text-blinking::boolean)? ;
 style-text-properties-attlist ::= common-background-color-attlist ;
 style-text-properties-attlist ::= (style:text-combine::("none" | "letters" | "lines"))? ;
 style-text-properties-attlist ::= (style:text-combine-start-char::character)? (style:text-combine-end-char::character)? ;
 style-text-properties-attlist ::= (style:text-emphasize::("none" | ("none" | "accent" | "dot" | "circle" | "disc" "above" | "below")))? ;
 style-text-properties-attlist ::= (style:text-scale::percent)? ;
 style-text-properties-attlist ::= (style:text-rotation-angle::integer)? ;
 style-text-properties-attlist ::= (style:text-rotation-scale::("fixed" | "line-height"))? ;
 style-text-properties-attlist ::= (fo:hyphenate::boolean)? ;
 style-text-properties-attlist ::= (fo:hyphenation-remain-char-count::positiveInteger)? ;
 style-text-properties-attlist ::= (fo:hyphenation-push-char-count::positiveInteger)? ;
 style-text-properties-attlist ::= (text:display::"true") | (text:display::"none") | (text:display::"condition" text:condition::"none") | ε ;
presentation-header-decl-attlist ::= presentation:name::string ;
number-time-style-attlist ::= (number:truncate-on-overflow::boolean)? ;
office-dde-source-attlist ::= (office:name::string)? ;
 office-dde-source-attlist ::= (office:conversion-mode::("into-default-style-data-style" | "into-english-number" | "keep-text"))? ;
text-object-index-source ::= text:object-index-source::(text-object-index-source-attrs text-index-title-template? text-object-index-entry-template?) ;
text-dde-connection-decl-attlist ::= office:name::string ;
text-section-source ::= text:section-source::text-section-source-attr ;
draw-image-map ::= draw:image-map::((draw-area-rectangle | draw-area-circle | draw-area-polygon)*) ;
table-data-pilot-group-member ::= table:data-pilot-group-member::table-data-pilot-group-member-attlist ;
office-meta-data ::= meta:generator::string ;
 office-meta-data ::= dc:title::string ;
 office-meta-data ::= dc:description::string ;
 office-meta-data ::= dc:subject::string ;
 office-meta-data ::= meta:keyword::string ;
 office-meta-data ::= meta:initial-creator::string ;
 office-meta-data ::= dc-creator ;
 office-meta-data ::= meta:printed-by::string ;
 office-meta-data ::= meta:creation-date::dateTime ;
 office-meta-data ::= dc-date ;
 office-meta-data ::= meta:print-date::dateTime ;
 office-meta-data ::= meta:template::(xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? (xlink:title::string)? (meta:date::dateTime)?) ;
 office-meta-data ::= meta:auto-reload::((xlink:type::"simple")? (xlink:show::"replace")? (xlink:actuate::"onLoad")? (xlink:href::anyURI)? (meta:delay::duration)?) ;
 office-meta-data ::= meta:hyperlink-behaviour::((office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))?) ;
 office-meta-data ::= dc:language::language ;
 office-meta-data ::= meta:editing-cycles::nonNegativeInteger ;
 office-meta-data ::= meta:editing-duration::duration ;
 office-meta-data ::= meta:document-statistic::((meta:page-count::nonNegativeInteger)? (meta:table-count::nonNegativeInteger)? (meta:draw-count::nonNegativeInteger)? (meta:image-count::nonNegativeInteger)? (meta:ole-object-count::nonNegativeInteger)? (meta:paragraph-count::nonNegativeInteger)? (meta:word-count::nonNegativeInteger)? (meta:character-count::nonNegativeInteger)? (frame-count::nonNegativeInteger)? (sentence-count::nonNegativeInteger)? (syllable-count::nonNegativeInteger)? (non-whitespace-character-count::nonNegativeInteger)? (meta:row-count::nonNegativeInteger)? (meta:cell-count::nonNegativeInteger)? (meta:object-count::nonNegativeInteger)?) ;
 office-meta-data ::= meta:user-defined::(meta:name::string (meta:value-type::"float" double) | (meta:value-type::"date" dateOrDateTime) | (meta:value-type::"time" duration) | (meta:value-type::"boolean" boolean) | (meta:value-type::"string" string) | string()) ;
office-document-attrs ::= office:mimetype::string ;
draw-enhanced-geometry ::= draw:enhanced-geometry::(draw-enhanced-geometry-attlist draw-equation* draw-handle*) ;
text-bibliography-entry-template ::= text:bibliography-entry-template::(text-bibliography-entry-template-attrs (text-index-entry-span | text-index-entry-tab-stop | text-index-entry-bibliography)*) ;
style-region-right ::= style:region-right::region-content ;
table-data-pilot-field-reference ::= table:data-pilot-field-reference::table-data-pilot-field-reference-attlist ;
text-ref-content ::= (text:reference-format::("page" | "chapter" | "direction" | "text"))? ;
text-chapter-attlist ::= text:display::("name" | "number" | "number-and-name" | "plain-number-and-name" | "plain-number") ;
 text-chapter-attlist ::= text:outline-level::nonNegativeInteger ;
text-page-sequence ::= text:page-sequence::(text-page+) ;
form-checkbox-attlist ::= form-control-attlist common-disabled-attlist label common-printable-attlist common-tab-attlist common-title-attlist common-value-attlist common-data-field-attlist common-form-visual-effect-attlist common-form-relative-image-position-attlist ;
 form-checkbox-attlist ::= (form:current-state::states)? ;
 form-checkbox-attlist ::= (form:is-tristate::boolean)? ;
 form-checkbox-attlist ::= (form:state::states)? ;
draw-layer-set ::= draw:layer-set::(draw-layer*) ;
text-hidden-paragraph-attlist ::= text:condition::formula ;
 text-hidden-paragraph-attlist ::= (text:is-hidden::boolean)? ;
common-draw-points-attlist ::= draw:points::points ;
presentation-sound ::= presentation:sound::(presentation-sound-attlist xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? (xlink:show::("new" | "replace"))?) ;
chart-error-indicator ::= chart:error-indicator::chart-error-indicator-attlist ;
chart-title-attlist ::= (table:cell-range::cellAddress)? ;
 chart-title-attlist ::= common-draw-position-attlist ;
 chart-title-attlist ::= (chart:style-name::styleNameRef)? ;
style-background-image ::= (style:background-image::(style-background-image-attlist common-draw-data-attlist | office-binary-data | ε))? ;
presentation-decls ::= presentation-decl* ;
style-ruby-properties-content ::= style-ruby-properties-content-strict ;
 style-ruby-properties-content ::= style-properties-content ;
dr3d-cube-attlist ::= (dr3d:min-edge::vector3D)? (dr3d:max-edge::vector3D)? ;
form-property-type-and-value-list ::= (office:value-type::"float" (form:list-value::(office:value::double))*) | (office:value-type::"percentage" (form:list-value::(office:value::double))*) | (office:value-type::"currency" (form:list-value::(office:value::double (office:currency::string)?))*) | (office:value-type::"date" (form:list-value::(office:date-value::dateOrDateTime))*) | (office:value-type::"time" (form:list-value::(office:time-value::duration))*) | (office:value-type::"boolean" (form:list-value::(office:boolean-value::boolean))*) | (office:value-type::"string" (form:list-value::(office:string-value::string))*) | (office:value-type::"void") ;
xforms-model ::= xforms:model::anyAttListOrElements ;
table-dde-links ::= table:dde-links::(table-dde-link+) ;
style-drop-cap ::= (style:drop-cap::style-drop-cap-attlist)? ;
horiBackPos ::= "left" | "center" | "right" ;
draw-floating-frame ::= draw:floating-frame::(draw-floating-frame-attlist common-draw-data-attlist) ;
common-writing-mode-attlist ::= (style:writing-mode::("lr-tb" | "rl-tb" | "tb-rl" | "tb-lr" | "lr" | "rl" | "tb" | "page"))? ;
form-text-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist ;
text-illustration-index-source-attrs ::= text-index-scope-attr ;
 text-illustration-index-source-attrs ::= text-relative-tab-stop-position-attr ;
 text-illustration-index-source-attrs ::= (text:use-caption::boolean)? ;
 text-illustration-index-source-attrs ::= (text:caption-sequence-name::string)? ;
 text-illustration-index-source-attrs ::= (text:caption-sequence-format::("text" | "category-and-value" | "caption"))? ;
presentationEffects ::= "none" | "fade" | "move" | "stripes" | "open" | "close" | "dissolve" | "wavyline" | "random" | "lines" | "laser" | "appear" | "hide" | "move-short" | "checkerboard" | "rotate" | "stretch" ;
xforms-bind-attlist ::= (xforms:bind::string)? ;
text-note-ref-content ::= text-note-class ;
draw-opacity ::= draw:opacity::(common-draw-gradient-attlist draw-opacity-attlist) ;
table-linked-source-attlist ::= (xlink:type::"simple")? (xlink:actuate::"onRequest")? xlink:href::anyURI ;
 table-linked-source-attlist ::= (table:filter-name::string)? ;
 table-linked-source-attlist ::= (table:filter-options::string)? ;
 table-linked-source-attlist ::= (table:refresh-delay::duration)? ;
form-column ::= form:column::(form-column-attlist column-controls+) ;
table-data-pilot-groups-attlist ::= table:source-field-name::string ;
 table-data-pilot-groups-attlist ::= (table:date-start::(dateOrDateTime | "auto")) | (table:start::(double | "auto")) ;
 table-data-pilot-groups-attlist ::= (table:date-end::(dateOrDateTime | "auto")) | (table:end::(double | "auto")) ;
 table-data-pilot-groups-attlist ::= table:step::double ;
 table-data-pilot-groups-attlist ::= table:grouped-by::("seconds" | "minutes" | "hours" | "days" | "months" | "quarters" | "years") ;
presentationEffectDirections ::= "none" | "from-left" | "from-top" | "from-right" | "from-bottom" | "from-center" | "from-upper-left" | "from-upper-right" | "from-lower-left" | "from-lower-right" | "to-left" | "to-top" | "to-right" | "to-bottom" | "to-upper-left" | "to-upper-right" | "to-lower-right" | "to-lower-left" | "path" | "spiral-inward-left" | "spiral-inward-right" | "spiral-outward-left" | "spiral-outward-right" | "vertical" | "horizontal" | "to-center" | "clockwise" | "counter-clockwise" ;
text-outline-level-style ::= text:outline-level-style::(text-outline-level-style-attlist style-list-level-properties? style-text-properties?) ;
table-data-pilot-subtotal ::= table:data-pilot-subtotal::table-data-pilot-subtotal-attlist ;
text-note-class ::= text:note-class::("footnote" | "endnote") ;
text-list-style-attr ::= style:name::styleName ;
 text-list-style-attr ::= (style:display-name::string)? ;
 text-list-style-attr ::= (text:consecutive-numbering::boolean)? ;
common-presentation-header-footer-attlist ::= (presentation:use-header-name::string)? ;
 common-presentation-header-footer-attlist ::= (presentation:use-footer-name::string)? ;
 common-presentation-header-footer-attlist ::= (presentation:use-date-time-name::string)? ;
style-table-column-properties-content-strict ::= style-table-column-properties-attlist style-table-column-properties-elements ;
style-ruby-properties-elements ::= ε ;
shadowType ::= "none" | string ;
text-index-source-styles ::= text:index-source-styles::(text:outline-level::positiveInteger text-index-source-style*) ;
text-section-attr ::= sectionAttr ;
 text-section-attr ::= (text:display::("true" | "none")) | (text:display::"condition" text:condition::string) | ε ;
table-rows ::= table-table-rows | (table-table-row+) ;
number-day-of-week ::= number:day-of-week::(number-day-of-week-attlist common-calendar-attlist) ;
draw-opacity-attlist ::= (draw:start::percent)? (draw:end::percent)? ;
style-section-properties-content-strict ::= style-section-properties-attlist style-section-properties-elements ;
presentation-classes ::= "title" | "outline" | "subtitle" | "text" | "graphic" | "object" | "chart" | "table" | "orgchart" | "page" | "notes" | "handout" | "header" | "footer" | "date-time" | "page-number" ;
common-anim-named-target-attlist ::= smil:attributeName::string ;
target-location ::= (xlink:href::anyURI)? ;
office-image-content-main ::= draw-frame ;
current-selected ::= (form:current-selected::boolean)? ;
form-item-attlist ::= label ;
style-table-row-properties-content-strict ::= style-table-row-properties-attlist style-table-row-properties-elements ;
text-decls ::= (text:variable-decls::(text-variable-decl*))? (text:sequence-decls::(text-sequence-decl*))? (text:user-field-decls::(text-user-field-decl*))? (text:dde-connection-decls::(text-dde-connection-decl*))? text-alphabetical-index-auto-mark-file? ;
office-binary-data ::= office:binary-data::base64Binary ;
table-movement-cut-off ::= table:movement-cut-off::table-movement-cut-off-attlist ;
form-number-attlist ::= (form:value::double)? ;
 form-number-attlist ::= (form:current-value::double)? ;
 form-number-attlist ::= (form:min-value::double)? ;
 form-number-attlist ::= (form:max-value::double)? ;
draw-glue-points-attlist ::= draw:escape-direction::("auto" | "left" | "right" | "up" | "down" | "horizontal" | "vertical") ;
text-list-style ::= text:list-style::(text-list-style-attr text-list-style-content*) ;
text-illustration-index-entry-template-attrs ::= text:style-name::styleNameRef ;
common-dde-connection-decl-attlist ::= office:dde-application::string ;
 common-dde-connection-decl-attlist ::= office:dde-topic::string ;
 common-dde-connection-decl-attlist ::= office:dde-item::string ;
 common-dde-connection-decl-attlist ::= (office:automatic-update::boolean)? ;
text-time-attlist ::= common-field-fixed-attlist common-field-data-style-name-attlist ;
 text-time-attlist ::= (text:time-value::timeOrDateTime)? ;
 text-time-attlist ::= (text:time-adjust::duration)? ;
common-timing-attlist ::= common-basic-timing-attlist common-restart-timing-attlist common-restart-default-attlist common-fill-timing-attlist common-fill-default-attlist common-time-manip-attlist ;
common-number-attlist ::= (number:min-integer-digits::integer)? ;
 common-number-attlist ::= (number:grouping::boolean)? ;
table-functions ::= table-named-expressions? table-database-ranges? table-data-pilot-tables? table-consolidation? table-dde-links? ;
presentation-footer-decl-attlist ::= presentation:name::string ;
style-table-column-properties-content ::= style-table-column-properties-content-strict ;
 style-table-column-properties-content ::= style-properties-content ;
svg-desc ::= svg:desc::string() ;
form-combobox-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist dropdown common-maxlength-attlist common-printable-attlist common-readonly-attlist size common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist list-source list-source-type ;
 form-combobox-attlist ::= (form:auto-complete::boolean)? ;
common-page-number-attlist ::= (style:page-number::positiveInteger)? ;
text-database-next-attlist ::= common-field-database-table ;
 text-database-next-attlist ::= (text:condition::formula)? ;
office-presentation-content-prelude ::= text-decls table-decls presentation-decls ;
common-vertical-rel-attlist ::= (style:vertical-rel::("page" | "page-content" | "frame" | "frame-content" | "paragraph" | "paragraph-content" | "char" | "line" | "baseline" | "text"))? ;
draw-ellipse ::= draw:ellipse::(common-draw-circle-ellipse-attlist draw-ellipse-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
common-draw-id-attlist ::= (draw:id::ID)? ;
table-data-pilot-member ::= table:data-pilot-member::table-data-pilot-member-attlist ;
number-currency-symbol ::= number:currency-symbol::(number-currency-symbol-attlist string()) ;
form-generic-control-attlist ::= form-control-attlist ;
style-text-properties-elements ::= ε ;
common-field-display-value-formula-none-attlist ::= (text:display::("value" | "formula" | "none"))? ;
common-repeat-timing-attlist ::= (smil:repeatDur::string smil:repeatCount::nonNegativeInteger)? ;
office-presentation-content-epilogue ::= presentation-settings table-functions ;
valueType ::= "float" | "time" | "date" | "percentage" | "currency" | "boolean" | "string" ;
form-value-range-attlist ::= form-control-attlist common-disabled-attlist common-printable-attlist common-tab-attlist common-title-attlist common-value-attlist ;
 form-value-range-attlist ::= (form:max-value::string)? ;
 form-value-range-attlist ::= (form:min-value::string)? ;
 form-value-range-attlist ::= (form:step-size::positiveInteger)? ;
 form-value-range-attlist ::= (form:page-step-size::positiveInteger)? ;
 form-value-range-attlist ::= (form:delay-for-repeat::duration)? ;
 form-value-range-attlist ::= (form:orientation::("horizontal" | "vertical"))? ;
number-boolean-style ::= number:boolean-style::(common-data-style-attlist style-text-properties? number-text? (number-boolean number-text?)? style-map*) ;
table-error-macro ::= table:error-macro::((table:execute::boolean)?) ;
config-config-item-set ::= config:config-item-set::(config-config-item-set-attlist config-items) ;
presentation-dim-attlist ::= draw:shape-id::IDREF ;
 presentation-dim-attlist ::= draw:color::color ;
text-bibliography-source ::= text:bibliography-source::(text-index-title-template? text-bibliography-entry-template*) ;
text-sort-key-attlist ::= text:key::("address" | "annote" | "author" | "bibliography-type" | "booktitle" | "chapter" | "custom1" | "custom2" | "custom3" | "custom4" | "custom5" | "edition" | "editor" | "howpublished" | "identifier" | "institution" | "isbn" | "issn" | "journal" | "month" | "note" | "number" | "organizations" | "pages" | "publisher" | "report-type" | "school" | "series" | "title" | "url" | "volume" | "year") (text:sort-ascending::boolean)? ;
style-list-level-properties-attlist ::= common-text-align ;
 style-list-level-properties-attlist ::= (text:space-before::nonNegativeLength)? ;
 style-list-level-properties-attlist ::= (text:min-label-width::nonNegativeLength)? ;
 style-list-level-properties-attlist ::= (text:min-label-distance::nonNegativeLength)? ;
 style-list-level-properties-attlist ::= (style:font-name::string)? ;
 style-list-level-properties-attlist ::= (fo:width::positiveLength)? (fo:height::positiveLength)? ;
 style-list-level-properties-attlist ::= common-vertical-rel-attlist common-vertical-pos-attlist ;
number-year ::= number:year::(number-year-attlist common-calendar-attlist) ;
table-body ::= table:body::common-table-template-attlist ;
text-date-attlist ::= common-field-fixed-attlist common-field-data-style-name-attlist ;
 text-date-attlist ::= (text:date-value::dateOrDateTime)? ;
 text-date-attlist ::= (text:date-adjust::duration)? ;
text-index-entry-span ::= text:index-entry-span::((text:style-name::styleNameRef)? string()) ;
text-user-field-decl ::= text:user-field-decl::(common-field-name-attlist common-field-formula-attlist? common-value-and-type-attlist) ;
table-sort ::= table:sort::(table-sort-attlist table-sort-by+) ;
styleNameRefs ::= string()* ;
dc-date ::= dc:date::dateTime ;
text-database-row-select-attlist ::= common-field-database-table ;
 text-database-row-select-attlist ::= (text:condition::formula)? ;
 text-database-row-select-attlist ::= (text:row-number::nonNegativeInteger)? ;
cellAddress ::= string() ;
fontPitch ::= "fixed" | "variable" ;
chart-axis ::= chart:axis::(chart-axis-attlist chart-title? chart-categories? chart-grid*) ;
table-database-source-sql ::= table:database-source-sql::table-database-source-sql-attlist ;
draw-custom-shape ::= draw:custom-shape::(draw-custom-shape-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text draw-enhanced-geometry?) ;
form-form ::= form:form::(common-form-control-attlist form-form-attlist form-properties? office-event-listeners? (controls | form-form)* form-connection-resource?) ;
style-table-row-properties-content ::= style-table-row-properties-content-strict ;
 style-table-row-properties-content ::= style-properties-content ;
common-table-cell-range-address-attlist ::= table:start-column::integer table:start-row::integer table:start-table::integer table:end-column::integer table:end-row::integer table:end-table::integer ;
list-source ::= (form:list-source::string)? ;
common-draw-gradient-attlist ::= (draw:name::styleName)? ;
 common-draw-gradient-attlist ::= (draw:display-name::string)? ;
 common-draw-gradient-attlist ::= draw:style::gradient-style ;
 common-draw-gradient-attlist ::= (draw:cx::percent)? (draw:cy::percent)? ;
 common-draw-gradient-attlist ::= (draw:angle::integer)? ;
 common-draw-gradient-attlist ::= (draw:border::percent)? ;
draw-polyline ::= draw:polyline::(common-draw-points-attlist common-draw-position-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
text-numbered-paragraph ::= text:numbered-paragraph::(text-numbered-paragraph-attr text-number? text-p | text-h) ;
text-list-level-style-bullet-attr ::= (text:style-name::styleNameRef)? ;
 text-list-level-style-bullet-attr ::= text:bullet-char::character ;
 text-list-level-style-bullet-attr ::= common-num-format-prefix-suffix-attlist ;
 text-list-level-style-bullet-attr ::= (text:bullet-relative-size::percent)? ;
number-quarter ::= number:quarter::(number-quarter-attlist common-calendar-attlist) ;
config-config-item-map-entry ::= config:config-item-map-entry::(config-config-item-map-entry-attlist config-items) ;
anim-transition-filter-attlist ::= smil:type::string ;
 anim-transition-filter-attlist ::= (smil:subtype::string)? ;
 anim-transition-filter-attlist ::= (smil:direction::("forward" | "reverse"))? ;
 anim-transition-filter-attlist ::= (smil:fadeColor::("forward" | "reverse"))? ;
 anim-transition-filter-attlist ::= (smil:mode::("in" | "out"))? ;
text-alphabetical-index-entry-template ::= text:alphabetical-index-entry-template::(text-alphabetical-index-entry-template-attrs (text-index-entry-chapter | text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop)*) ;
common-table-change-attlist ::= table:id::string ;
 common-table-change-attlist ::= (table:acceptance-state::("accepted" | "rejected" | "pending"))? ;
 common-table-change-attlist ::= (table:rejecting-change-id::string)? ;
common-field-formula-attlist ::= (text:formula::formula)? ;
office-meta-content ::= office-meta-content-strict ;
 office-meta-content ::= anyElements ;
style-table-cell-properties-elements ::= style-background-image ;
table-data-pilot-field ::= table:data-pilot-field::(table-data-pilot-field-attlist table-data-pilot-level? table-data-pilot-field-reference? table-data-pilot-groups?) ;
draw-glue-point ::= draw:glue-point::draw-glue-point-attlist ;
chart-chart-attlist ::= chart:class::namespacedToken ;
 chart-chart-attlist ::= common-draw-size-attlist ;
 chart-chart-attlist ::= (chart:column-mapping::string)? ;
 chart-chart-attlist ::= (chart:row-mapping::string)? ;
 chart-chart-attlist ::= (chart:style-name::styleNameRef)? ;
text-set-page-variable-attlist ::= (text:active::boolean)? ;
 text-set-page-variable-attlist ::= (text:page-adjust::integer)? ;
draw-custom-shape-attlist ::= (draw:engine::namespacedToken)? ;
 draw-custom-shape-attlist ::= (draw:data::string)? ;
table-highlighted-range-attlist-invalid ::= table:marked-invalid::boolean ;
table-data-pilot-tables ::= table:data-pilot-tables::(table-data-pilot-table*) ;
table-table-row ::= table:table-row::(table-table-row-attlist (table-table-cell | table-covered-table-cell)+) ;
table-operation-attlist ::= table:name::("trace-dependents" | "remove-dependents" | "trace-precedents" | "remove-precedents" | "trace-errors") ;
 table-operation-attlist ::= table:index::nonNegativeInteger ;
draw-text ::= (text-p | text-list)* ;
table-detective ::= table:detective::(table-highlighted-range* table-operation*) ;
text-get-page-variable-attlist ::= common-field-num-format-attlist ;
office-settings ::= (office:settings::(config-config-item-set+))? ;
table-tracked-changes-attlist ::= (table:track-changes::boolean)? ;
text-table-of-content-entry-template-attlist ::= text:outline-level::positiveInteger ;
 text-table-of-content-entry-template-attlist ::= text:style-name::styleNameRef ;
common-num-format-prefix-suffix-attlist ::= (style:num-prefix::string)? (style:num-suffix::string)? ;
common-disabled-attlist ::= (form:disabled::boolean)? ;
style-table-cell-properties-content ::= style-table-cell-properties-content-strict ;
 style-table-cell-properties-content ::= style-properties-content ;
common-svg-gradient-attlist ::= (svg:gradientUnits::"objectBoundingBox")? (svg:gradientTransform::string)? (svg:spreadMethod::("pad" | "reflect" | "repeat"))? ;
 common-svg-gradient-attlist ::= draw:name::styleName ;
 common-svg-gradient-attlist ::= (draw:display-name::string)? ;
draw-a-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? ;
 draw-a-attlist ::= (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? ;
 draw-a-attlist ::= (office:name::string)? ;
 draw-a-attlist ::= (office:server-map::boolean)? ;
style-default-style ::= style:default-style::style-style-content ;
table-named-expressions ::= table:named-expressions::((table-named-range | table-named-expression)*) ;
office-spreadsheet-content-prelude ::= table-tracked-changes? text-decls table-decls ;
number-fraction ::= number:fraction::(number-fraction-attlist common-number-attlist) ;
common-draw-area-attlist ::= (xlink:href::anyURI)? (xlink:type::"simple")? (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? ;
 common-draw-area-attlist ::= (office:name::string)? ;
 common-draw-area-attlist ::= (draw:nohref::"nohref")? ;
common-draw-name-attlist ::= (draw:name::string)? ;
text-bibliography ::= text:bibliography::(sectionAttr text-bibliography-source text-index-body) ;
table-dde-link ::= table:dde-link::(office-dde-source table-table) ;
point3D ::= string() ;
table-table-attlist ::= (table:name::string)? ;
 table-table-attlist ::= (table:style-name::styleNameRef)? ;
 table-table-attlist ::= (table:protected::boolean)? (table:protection-key::string())? ;
 table-table-attlist ::= (table:print::boolean)? ;
 table-table-attlist ::= (table:print-ranges::cellRangeAddressList)? ;
 table-table-attlist ::= (table:is-sub-table::boolean)? ;
--------------------odf::opendoc-1.0.bgf--------------------
style-font-face ::= style:font-face::(style-font-face-attlist svg-font-face-src? svg-definition-src?) ;
svg-linearGradient ::= svg:linearGradient::(common-svg-gradient-attlist (svg:x1::(coordinate | percent))? (svg:y1::(coordinate | percent))? (svg:x2::(coordinate | percent))? (svg:y2::(coordinate | percent))? svg-stop*) ;
style-page-layout-attlist ::= style:name::styleName ;
 style-page-layout-attlist ::= (style:page-usage::("all" | "left" | "right" | "mirrored"))? ;
number-seconds ::= number:seconds::number-seconds-attlist ;
number-currency-style ::= number:currency-style::(common-data-style-attlist common-auto-reorder-attlist style-text-properties? number-text? ((number-and-text currency-symbol-and-text?) | (currency-symbol-and-text number-and-text?))? style-map*) ;
number-fraction-attlist ::= (number:min-numerator-digits::integer)? ;
 number-fraction-attlist ::= (number:min-denominator-digits::integer)? ;
 number-fraction-attlist ::= (number:denominator-value::integer)? ;
table-covered-table-cell ::= table:covered-table-cell::(table-table-cell-attlist table-table-cell-content) ;
text-notes-configuration-content ::= text-note-class ;
 text-notes-configuration-content ::= (text:citation-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:citation-body-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:default-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:master-page-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:start-value::nonNegativeInteger)? ;
 text-notes-configuration-content ::= common-num-format-prefix-suffix-attlist common-num-format-attlist? ;
 text-notes-configuration-content ::= (text:start-numbering-at::("document" | "chapter" | "page"))? ;
 text-notes-configuration-content ::= (text:footnotes-position::("text" | "page" | "section" | "document"))? ;
 text-notes-configuration-content ::= (text:note-continuation-notice-forward::string())? ;
 text-notes-configuration-content ::= (text:note-continuation-notice-backward::string())? ;
draw-applet-attlist ::= (draw:code::string())? ;
 draw-applet-attlist ::= (draw:object::string())? ;
 draw-applet-attlist ::= (draw:archive::string())? ;
 draw-applet-attlist ::= (draw:may-script::boolean)? ;
text-list-item-content ::= text-number? (text-p | text-h | text-list)* ;
style-header-footer-properties-content-strict ::= style-header-footer-properties-attlist style-header-footer-properties-elements ;
number-scientific-number ::= number:scientific-number::(number-scientific-number-attlist common-decimal-places-attlist common-number-attlist) ;
presentation-hide-shape ::= presentation:hide-shape::(common-presentation-effect-attlist presentation-sound?) ;
text-number ::= text:number::string ;
common-title-attlist ::= (form:title::string())? ;
draw-object ::= draw:object::(draw-object-attlist common-draw-data-attlist | office-document | math-math) ;
table-data-pilot-table-attlist ::= table:name::string ;
 table-data-pilot-table-attlist ::= (table:application-data::string)? ;
 table-data-pilot-table-attlist ::= (table:grand-total::("none" | "row" | "column" | "both"))? ;
 table-data-pilot-table-attlist ::= (table:ignore-empty-rows::boolean)? ;
 table-data-pilot-table-attlist ::= (table:identify-categories::boolean)? ;
 table-data-pilot-table-attlist ::= table:target-range-address::cellRangeAddress ;
 table-data-pilot-table-attlist ::= (table:buttons::cellRangeAddressList)? ;
 table-data-pilot-table-attlist ::= (table:show-filter-button::boolean)? ;
 table-data-pilot-table-attlist ::= (table:drill-down-on-double-click::boolean)? ;
table-sort-by ::= table:sort-by::table-sort-by-attlist ;
presentation-hide-text ::= presentation:hide-text::(common-presentation-effect-attlist presentation-sound?) ;
style-drawing-page-properties-content-strict ::= style-graphic-fill-properties-attlist style-drawing-page-properties-attlist style-drawing-page-properties-elements ;
anyURI ::= string() ;
style-ruby-properties-content-strict ::= style-ruby-properties-attlist style-ruby-properties-elements ;
style-tab-stop-char-attlist ::= style:char::character ;
table-deletion-attlist ::= table:type::("row" | "column" | "table") ;
 table-deletion-attlist ::= table:position::integer ;
 table-deletion-attlist ::= (table:table::integer)? ;
 table-deletion-attlist ::= (table:multi-deletion-spanned::integer)? ;
number-text-content ::= number:text-content::ε ;
styleName ::= string() ;
draw-plugin ::= draw:plugin::(draw-plugin-attlist common-draw-data-attlist draw-param*) ;
table-database-source-query-attlist ::= table:database-name::string ;
 table-database-source-query-attlist ::= table:query-name::string ;
office-drawing-content-prelude ::= text-decls table-decls ;
text-content ::= text-h | text-p | text-list | text-numbered-paragraph | table-table | draw-a | text-section | text-table-of-content | text-illustration-index | text-table-index | text-object-index | text-user-index | text-alphabetical-index | text-bibliography | shape | change-marks ;
draw-area-rectangle ::= draw:area-rectangle::(common-draw-area-attlist svg:x::coordinate svg:y::coordinate svg:width::length svg:height::length svg-desc? office-event-listeners?) ;
table-table-rows ::= table:table-rows::(table-table-row+) ;
style-tab-stop ::= style:tab-stop::style-tab-stop-attlist ;
number-date-style ::= number:date-style::(common-data-style-attlist common-auto-reorder-attlist common-format-source-attlist style-text-properties? number-text? (any-date number-text?)+ style-map*) ;
draw-marker-attlist ::= draw:name::styleName ;
 draw-marker-attlist ::= (draw:display-name::string)? ;
chart-grid ::= chart:grid::chart-grid-attlist ;
table-table-cell-attlist-extra ::= (table:number-columns-spanned::positiveInteger)? (table:number-rows-spanned::positiveInteger)? ;
 table-table-cell-attlist-extra ::= (table:number-matrix-columns-spanned::positiveInteger)? (table:number-matrix-rows-spanned::positiveInteger)? ;
common-text-spreadsheet-shape-attlist ::= (table:end-cell-address::cellAddress)? (table:end-x::coordinate)? (table:end-y::coordinate)? ;
 common-text-spreadsheet-shape-attlist ::= (table:table-background::boolean)? ;
 common-text-spreadsheet-shape-attlist ::= common-text-anchor-attlist ;
common-draw-text-style-name-attlist ::= (draw:text-style-name::styleNameRef)? ;
table-shapes ::= table:shapes::(shape+) ;
style-graphic-properties-elements ::= ε ;
 style-graphic-properties-elements ::= text-list-style? ;
 style-graphic-properties-elements ::= style-background-image ;
 style-graphic-properties-elements ::= style-columns ;
text-p ::= text:p::(paragraph-attrs paragraph-content*) ;
common-style-header-footer-attlist ::= (style:display::boolean)? ;
draw-line-attlist ::= svg:x1::coordinate svg:y1::coordinate ;
 draw-line-attlist ::= svg:x2::coordinate svg:y2::coordinate ;
table-movement ::= table:movement::(common-table-change-attlist table-source-range-address table-target-range-address office-change-info table-dependencies? table-deletions?) ;
script-event-listener ::= script:event-listener::script-event-listener-attlist ;
style-tab-stop-attlist ::= style:position::nonNegativeLength ;
 style-tab-stop-attlist ::= ((style:type::("left" | "center" | "right"))?) | (style:type::"char" style-tab-stop-char-attlist) ;
 style-tab-stop-attlist ::= (style:leader-type::lineType)? ;
 style-tab-stop-attlist ::= (style:leader-style::lineStyle)? ;
 style-tab-stop-attlist ::= (style:leader-width::lineWidth)? ;
 style-tab-stop-attlist ::= (style:leader-color::("font-color" | color))? ;
 style-tab-stop-attlist ::= (style:leader-text::string)? ;
 style-tab-stop-attlist ::= (style:leader-text-style::styleNameRef)? ;
text-h ::= text:h::(heading-attrs paragraph-attrs text-number? paragraph-content*) ;
text-outline-style ::= text:outline-style::(text-outline-level-style+) ;
draw-control-attlist ::= draw:control::IDREF ;
table-table-column-attlist ::= (table:number-columns-repeated::positiveInteger)? ;
 table-table-column-attlist ::= (table:style-name::styleNameRef)? ;
 table-table-column-attlist ::= (table:visibility::table-visibility-value)? ;
 table-table-column-attlist ::= (table:default-cell-style-name::styleNameRef)? ;
text-placeholder-attlist ::= text:placeholder-type::("text" | "table" | "text-box" | "image" | "object") ;
 text-placeholder-attlist ::= common-field-description-attlist ;
office-document-settings ::= office:document-settings::(office-document-common-attrs office-settings) ;
style-table-row-properties-elements ::= style-background-image ;
draw-handle-attlist ::= (draw:handle-mirror-vertical::boolean)? ;
 draw-handle-attlist ::= (draw:handle-mirror-horizontal::boolean)? ;
 draw-handle-attlist ::= (draw:handle-switched::boolean)? ;
 draw-handle-attlist ::= draw:handle-position::string ;
 draw-handle-attlist ::= (draw:handle-range-x-minimum::string)? ;
 draw-handle-attlist ::= (draw:handle-range-x-maximum::string)? ;
 draw-handle-attlist ::= (draw:handle-range-y-minimum::string)? ;
 draw-handle-attlist ::= (draw:handle-range-y-maximum::string)? ;
 draw-handle-attlist ::= (draw:handle-polar::string)? ;
 draw-handle-attlist ::= (draw:handle-radius-range-minimum::string)? ;
 draw-handle-attlist ::= (draw:handle-radius-range-maximum::string)? ;
presentation-show-attlist ::= presentation:name::string ;
 presentation-show-attlist ::= presentation:pages::string() ;
style-columns ::= (style:columns::(style-columns-attlist style-column-sep? style-column*))? ;
table-subtotal-rules-attlist ::= (table:bind-styles-to-content::boolean)? ;
 table-subtotal-rules-attlist ::= (table:case-sensitive::boolean)? ;
 table-subtotal-rules-attlist ::= (table:page-breaks-on-group-change::boolean)? ;
table-calculation-setting-attlist ::= (table:case-sensitive::boolean)? ;
 table-calculation-setting-attlist ::= (table:precision-as-shown::boolean)? ;
 table-calculation-setting-attlist ::= (table:search-criteria-must-apply-to-whole-cell::boolean)? ;
 table-calculation-setting-attlist ::= (table:automatic-find-labels::boolean)? ;
 table-calculation-setting-attlist ::= (table:use-regular-expressions::boolean)? ;
 table-calculation-setting-attlist ::= (table:null-year::positiveInteger)? ;
text-section-source-dde ::= office-dde-source ;
number-am-pm ::= number:am-pm::ε ;
lineMode ::= "continuous" | "skip-white-space" ;
style-list-level-properties-elements ::= ε ;
number-time-style ::= number:time-style::(number-time-style-attlist common-data-style-attlist common-format-source-attlist style-text-properties? number-text? (any-time number-text?)+ style-map*) ;
text-dde-connection-decl ::= text:dde-connection-decl::(text-dde-connection-decl-attlist common-dde-connection-decl-attlist) ;
style-table-column-properties ::= style:table-column-properties::style-table-column-properties-content ;
anyAttListOrElements ::= string()* anyElements ;
chart-stock-range-line ::= chart:stock-range-line::common-stock-marker-attlist ;
chart-title ::= chart:title::(chart-title-attlist text-p?) ;
nonNegativeLength ::= string() ;
index-content-main ::= text-content | text-index-title ;
fontWeight ::= "normal" | "bold" | "100" | "200" | "300" | "400" | "500" | "600" | "700" | "800" | "900" ;
common-tab-attlist ::= (form:tab-index::nonNegativeInteger)? ;
 common-tab-attlist ::= (form:tab-stop::boolean)? ;
common-anim-attlist ::= (presentation:node-type::("default" | "on-click" | "with-previous" | "after-previous" | "timing-root" | "main-sequence" | "interactive-sequence"))? ;
 common-anim-attlist ::= (presentation:preset-id::string)? ;
 common-anim-attlist ::= (presentation:preset-sub-type::string)? ;
 common-anim-attlist ::= (presentation:preset-class::("custom" | "entrance" | "exit" | "emphasis" | "motion-path" | "ole-action" | "media-call"))? ;
 common-anim-attlist ::= (presentation:master-element::IDREF)? ;
 common-anim-attlist ::= (presentation:group-id::string)? ;
 common-anim-attlist ::= (anim:id::ID)? ;
config-config-item-attlist ::= config:name::string ;
 config-config-item-attlist ::= config:type::("boolean" | "short" | "int" | "long" | "double" | "string" | "datetime" | "base64Binary") ;
draw-frame ::= draw:frame::(common-draw-shape-with-text-and-styles-attlist common-draw-position-attlist common-draw-rel-size-attlist presentation-shape-attlist draw-frame-attlist (draw-text-box | draw-image | draw-object | draw-object-ole | draw-applet | draw-floating-frame | draw-plugin)* office-event-listeners? draw-glue-point* draw-image-map? svg-desc? (draw-contour-polygon | draw-contour-path)?) ;
common-form-control-content ::= form-properties? office-event-listeners? ;
table-iteration ::= table:iteration::((table:status::("enable" | "disable"))? (table:steps::positiveInteger)? (table:maximum-difference::double)?) ;
dateTime ::= string() ;
text-user-index-source ::= text:user-index-source::(text-user-index-source-attr text-index-title-template? text-user-index-entry-template* text-index-source-styles*) ;
text-index-entry-chapter ::= text:index-entry-chapter::((text:style-name::styleNameRef)? text-index-entry-chapter-attrs) ;
table-data-pilot-subtotals ::= table:data-pilot-subtotals::(table-data-pilot-subtotal*) ;
style-page-layout-properties ::= style:page-layout-properties::style-page-layout-properties-content ;
form-connection-resource ::= form:connection-resource::(xlink:href::anyURI) ;
draw-text-box ::= draw:text-box::(draw-text-box-attlist text-content*) ;
draw-image ::= draw:image::(draw-image-attlist common-draw-data-attlist | office-binary-data draw-text) ;
table-data-pilot-field-reference-attlist ::= table:field-name::string ;
 table-data-pilot-field-reference-attlist ::= (table:member-type::"named" table:member-name::string) | (table:member-type::("previous" | "next")) ;
 table-data-pilot-field-reference-attlist ::= table:type::("none" | "member-difference" | "member-percentage" | "member-percentage-difference" | "running-total" | "row-percentage" | "column-percentage" | "total-percentage" | "index") ;
common-break-attlist ::= (fo:break-before::("auto" | "column" | "page"))? (fo:break-after::("auto" | "column" | "page"))? ;
common-table-range-attlist ::= common-table-cell-address-attlist | common-table-cell-range-address-attlist ;
table-data-pilot-groups ::= table:data-pilot-groups::(table-data-pilot-groups-attlist table-data-pilot-group+) ;
chart-error-indicator-attlist ::= (chart:style-name::styleNameRef)? ;
number-hours ::= number:hours::number-hours-attlist ;
table-table-source-attlist ::= (table:mode::("copy-all" | "copy-results-only"))? ;
 table-table-source-attlist ::= (table:table-name::string)? ;
draw-layer ::= draw:layer::draw-layer-attlist ;
common-text-align ::= (fo:text-align::("start" | "end" | "left" | "right" | "center" | "justify"))? ;
style-style-attlist ::= style:name::styleName ;
 style-style-attlist ::= (style:display-name::string)? ;
 style-style-attlist ::= (style:parent-style-name::styleNameRef)? ;
 style-style-attlist ::= (style:next-style-name::styleNameRef)? ;
 style-style-attlist ::= (style:list-style-name::(styleName | ε))? ;
 style-style-attlist ::= (style:master-page-name::styleNameRef)? ;
 style-style-attlist ::= (style:auto-update::boolean)? ;
 style-style-attlist ::= (style:data-style-name::styleNameRef)? ;
 style-style-attlist ::= (style:class::string)? ;
 style-style-attlist ::= (style:default-outline-level::positiveInteger)? ;
draw-image-attlist ::= (draw:filter-name::string)? ;
paragraph-attrs ::= (text:style-name::styleNameRef)? (text:class-names::styleNameRefs)? (text:cond-style-name::styleNameRef)? ;
 paragraph-attrs ::= text-id? ;
table-columns-no-group ::= (table-columns (table-table-header-columns table-columns?)?) | (table-table-header-columns table-columns?) ;
form-fixed-text-attlist ::= form-control-attlist for common-disabled-attlist label common-printable-attlist common-title-attlist ;
 form-fixed-text-attlist ::= (form:multi-line::boolean)? ;
draw-floating-frame-attlist ::= (draw:frame-name::string)? ;
style-drawing-page-properties-elements ::= presentation-sound? ;
presentation-decl ::= presentation:header-decl::(presentation-header-decl-attlist string()) ;
 presentation-decl ::= presentation:footer-decl::(presentation-footer-decl-attlist string()) ;
 presentation-decl ::= presentation:date-time-decl::(presentation-date-time-decl-attlist string()) ;
style-properties-content ::= anyAttListOrElements ;
common-draw-size-attlist ::= (svg:width::length)? (svg:height::length)? ;
text-changed-region-content ::= text:insertion::office-change-info ;
 text-changed-region-content ::= text:deletion::(office-change-info text-content*) ;
 text-changed-region-content ::= text:format-change::office-change-info ;
table-table-template ::= table:table-template::(table-table-template-attlist table-first-row? table-last-row? table-first-column? table-last-column? table-body | (table-even-rows table-odd-rows) | (table-even-columns table-odd-columns)) ;
dr3d-extrude ::= dr3d:extrude::(common-draw-path-data-attlist common-draw-viewbox-attlist common-draw-id-attlist common-draw-z-index-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-dr3d-transform-attlist) ;
form-password-attlist ::= form-control-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist ;
 form-password-attlist ::= (form:echo-char::character)? ;
common-style-direction-attlist ::= (style:direction::("ltr" | "ttb"))? ;
draw-regular-polygon-attlist ::= (draw:concave::"false") | (draw:concave::"true" draw-regular-polygon-sharpness-attlist) ;
 draw-regular-polygon-attlist ::= draw:corners::positiveInteger ;
form-column-attlist ::= common-form-control-attlist label text-style-name ;
text-sequence-ref-name ::= (text:ref-name::string)? ;
table-insertion ::= table:insertion::(table-insertion-attlist common-table-change-attlist office-change-info table-dependencies? table-deletions?) ;
table-label-ranges ::= table:label-ranges::(table-label-range*) ;
table-even-rows ::= table:even-rows::common-table-template-attlist ;
chart-categories ::= chart:categories::((table:cell-range-address::cellRangeAddress)?) ;
draw-page-attlist ::= (draw:name::string)? ;
 draw-page-attlist ::= (draw:style-name::styleNameRef)? ;
 draw-page-attlist ::= draw:master-page-name::styleNameRef ;
 draw-page-attlist ::= (presentation:presentation-page-layout-name::styleNameRef)? ;
 draw-page-attlist ::= (draw:id::ID)? ;
table-database-ranges ::= table:database-ranges::(table-database-range*) ;
style-drawing-page-properties ::= style:drawing-page-properties::style-drawing-page-properties-content ;
config-config-item-map-indexed ::= config:config-item-map-indexed::(config-config-item-map-indexed-attlist config-config-item-map-entry+) ;
style-table-cell-properties ::= style:table-cell-properties::style-table-cell-properties-content ;
style-section-properties-content ::= style-properties-content ;
table-table-cell ::= table:table-cell::(table-table-cell-attlist table-table-cell-attlist-extra table-table-cell-content) ;
table-consolidation-attlist ::= table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string) ;
 table-consolidation-attlist ::= table:source-cell-range-addresses::cellRangeAddressList ;
 table-consolidation-attlist ::= table:target-cell-address::cellAddress ;
 table-consolidation-attlist ::= (table:use-labels::("none" | "row" | "column" | "both"))? ;
 table-consolidation-attlist ::= (table:link-to-source-data::boolean)? ;
style-tab-stops ::= (style:tab-stops::(style-tab-stop*))? ;
style-data-style-attlist ::= (style:display-name::string)? ;
dr3d-light-attlist ::= (dr3d:diffuse-color::color)? ;
 dr3d-light-attlist ::= dr3d:direction::vector3D ;
 dr3d-light-attlist ::= (dr3d:enabled::boolean)? ;
 dr3d-light-attlist ::= (dr3d:specular::boolean)? ;
office-chart-content-prelude ::= text-decls table-decls ;
style-drawing-page-properties-attlist ::= (presentation:transition-type::("manual" | "automatic" | "semi-automatic"))? ;
 style-drawing-page-properties-attlist ::= (presentation:transition-style::("none" | "fade-from-left" | "fade-from-top" | "fade-from-right" | "fade-from-bottom" | "fade-from-upperleft" | "fade-from-upperright" | "fade-from-lowerleft" | "fade-from-lowerright" | "move-from-left" | "move-from-top" | "move-from-right" | "move-from-bottom" | "move-from-upperleft" | "move-from-upperright" | "move-from-lowerleft" | "move-from-lowerright" | "uncover-to-left" | "uncover-to-top" | "uncover-to-right" | "uncover-to-bottom" | "uncover-to-upperleft" | "uncover-to-upperright" | "uncover-to-lowerleft" | "uncover-to-lowerright" | "fade-to-center" | "fade-from-center" | "vertical-stripes" | "horizontal-stripes" | "clockwise" | "counterclockwise" | "open-vertical" | "open-horizontal" | "close-vertical" | "close-horizontal" | "wavyline-from-left" | "wavyline-from-top" | "wavyline-from-right" | "wavyline-from-bottom" | "spiralin-left" | "spiralin-right" | "spiralout-left" | "spiralout-right" | "roll-from-top" | "roll-from-left" | "roll-from-right" | "roll-from-bottom" | "stretch-from-left" | "stretch-from-top" | "stretch-from-right" | "stretch-from-bottom" | "vertical-lines" | "horizontal-lines" | "dissolve" | "random" | "vertical-checkerboard" | "horizontal-checkerboard" | "interlocking-horizontal-left" | "interlocking-horizontal-right" | "interlocking-vertical-top" | "interlocking-vertical-bottom" | "fly-away" | "open" | "close" | "melt"))? ;
 style-drawing-page-properties-attlist ::= (presentation:transition-speed::presentationSpeeds)? ;
 style-drawing-page-properties-attlist ::= (smil:subtype::string)? ;
 style-drawing-page-properties-attlist ::= (smil:direction::("forward" | "reverse"))? ;
 style-drawing-page-properties-attlist ::= (smil:fadeColor::("forward" | "reverse"))? ;
 style-drawing-page-properties-attlist ::= (presentation:duration::duration)? ;
 style-drawing-page-properties-attlist ::= (presentation:visibility::("visible" | "hidden"))? ;
 style-drawing-page-properties-attlist ::= (draw:background-size::("full" | "border"))? ;
 style-drawing-page-properties-attlist ::= (presentation:background-objects-visible::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:background-visible::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:display-header::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:display-footer::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:display-page-number::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:display-date-time::boolean)? ;
 style-drawing-page-properties-attlist ::= (smil:type::string)? ;
table-data-pilot-layout-info ::= table:data-pilot-layout-info::table-data-pilot-layout-info-attlist ;
config-config-item-map-indexed-attlist ::= config:name::string ;
table-sort-groups-attlist ::= (table:data-type::("text" | "number" | "automatic" | string))? ;
 table-sort-groups-attlist ::= (table:order::("ascending" | "descending"))? ;
presentation-dim ::= presentation:dim::(presentation-dim-attlist presentation-sound?) ;
anim-animate-motion-attlist ::= (svg:path::pathData)? ;
 anim-animate-motion-attlist ::= (svg:origin::string)? ;
 anim-animate-motion-attlist ::= (smil:calcMode::("discrete" | "linear" | "paced" | "spline"))? ;
mathMarkup ::= (α | string() | mathMarkup)* ;
presentation-date-time-decl-attlist ::= presentation:name::string ;
 presentation-date-time-decl-attlist ::= presentation:source::("fixed" | "current-date") ;
 presentation-date-time-decl-attlist ::= (style:data-style-name::styleNameRef)? ;
text-template-name-attlist ::= (text:display::("full" | "path" | "name" | "name-and-extension" | "area" | "title"))? ;
draw-caption-attlist ::= (draw:caption-point-x::coordinate draw:caption-point-y::coordinate)? ;
 draw-caption-attlist ::= (draw:corner-radius::nonNegativeLength)? ;
style-section-properties-elements ::= style-background-image ;
 style-section-properties-elements ::= style-columns ;
 style-section-properties-elements ::= text-notes-configuration* ;
form-button-attlist ::= form-control-attlist button-type common-disabled-attlist label image-data common-printable-attlist common-tab-attlist target-frame target-location common-title-attlist common-value-attlist common-form-relative-image-position-attlist ;
 form-button-attlist ::= (form:default-button::boolean)? ;
 form-button-attlist ::= (form:toggle::boolean)? ;
 form-button-attlist ::= (form:focus-on-click::boolean)? ;
 form-button-attlist ::= (form:xforms-submission::string)? ;
column-controls ::= form:text::(form-text-attlist common-form-control-content) ;
 column-controls ::= form:textarea::(form-textarea-attlist common-form-control-content text-p*) ;
 column-controls ::= form:formatted-text::(form-formatted-text-attlist common-form-control-content) ;
 column-controls ::= form:number::(form-number-attlist common-numeric-control-attlist common-form-control-content) ;
 column-controls ::= form:date::(form-date-attlist common-numeric-control-attlist common-form-control-content) ;
 column-controls ::= form:combobox::(form-combobox-attlist common-form-control-content form-item*) ;
 column-controls ::= form:listbox::(form-listbox-attlist common-form-control-content form-option*) ;
 column-controls ::= form:checkbox::(form-checkbox-attlist common-form-control-content) ;
chart-wall-attlist ::= (svg:width::length)? ;
 chart-wall-attlist ::= (chart:style-name::styleNameRef)? ;
text-index-title-template ::= text:index-title-template::((text:style-name::styleNameRef)? string()) ;
dr3d-rotate ::= dr3d:rotate::(common-draw-viewbox-attlist common-draw-path-data-attlist common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-dr3d-transform-attlist) ;
meta-date-string ::= meta:date-string::string ;
table-content-validations ::= table:content-validations::(table-content-validation+) ;
form-control-attlist ::= common-form-control-attlist common-control-id-attlist xforms-bind-attlist ;
chart-series ::= chart:series::(chart-series-attlist chart-domain* chart-mean-value? chart-regression-curve? chart-error-indicator? chart-data-point*) ;
table-calculation-settings ::= table:calculation-settings::(table-calculation-setting-attlist table-null-date? table-iteration?) ;
text-index-name ::= text:index-name::string ;
common-field-display-value-none-attlist ::= (text:display::("value" | "none"))? ;
table-data-pilot-member-attlist ::= table:name::string ;
 table-data-pilot-member-attlist ::= (table:display::boolean)? ;
 table-data-pilot-member-attlist ::= (table:show-details::boolean)? ;
style-header-footer-properties-elements ::= style-background-image ;
style-page-layout-properties-content ::= style-properties-content ;
presentation-placeholder ::= presentation:placeholder::(presentation:object::presentation-classes svg:x::(coordinate | percent) svg:y::(coordinate | percent) svg:width::(length | percent) svg:height::(length | percent)) ;
style-map ::= style:map::style-map-attlist ;
number-number-attlist ::= (number:decimal-replacement::string())? ;
 number-number-attlist ::= (number:display-factor::double)? ;
style-paragraph-properties-content ::= style-properties-content ;
text-index-source-style ::= text:index-source-style::(text:style-name::styleName) ;
common-field-description-attlist ::= (text:description::string())? ;
chart-series-attlist ::= (chart:values-cell-range-address::cellRangeAddress)? ;
 chart-series-attlist ::= (chart:label-cell-address::cellAddress)? ;
 chart-series-attlist ::= (chart:class::namespacedToken)? ;
 chart-series-attlist ::= (chart:attached-axis::string)? ;
 chart-series-attlist ::= (chart:style-name::styleNameRef)? ;
common-draw-transform-attlist ::= (draw:transform::string)? ;
common-shadow-attlist ::= (style:shadow::shadowType)? ;
common-num-format-attlist ::= (style:num-format::("1" | "i" | "I" | string | ε)) | (style:num-format::("a" | "A") style-num-letter-sync-attlist) | ε ;
text-page ::= text:page::text-page-attlist ;
common-data-field-attlist ::= (form:data-field::string)? ;
variableName ::= string() ;
draw-regular-polygon-sharpness-attlist ::= draw:sharpness::percent ;
table-deletions ::= table:deletions::((table-cell-content-deletion | table-change-deletion)+) ;
text-list-level-style-attr ::= text:level::positiveInteger ;
table-data-pilot-sort-info ::= table:data-pilot-sort-info::table-data-pilot-sort-info-attlist ;
table-tracked-changes ::= table:tracked-changes::(table-tracked-changes-attlist (table-cell-content-change | table-insertion | table-deletion | table-movement)*) ;
table-database-source-sql-attlist ::= table:database-name::string ;
 table-database-source-sql-attlist ::= table:sql-statement::string ;
 table-database-source-sql-attlist ::= (table:parse-sql-statement::boolean)? ;
presentation-shape-attlist ::= (presentation:class::presentation-classes)? ;
 presentation-shape-attlist ::= (presentation:placeholder::boolean)? ;
 presentation-shape-attlist ::= (presentation:user-transformed::boolean)? ;
style-chart-properties ::= style:chart-properties::style-chart-properties-content ;
text-alphabetical-index ::= text:alphabetical-index::(sectionAttr text-alphabetical-index-source text-index-body) ;
office-change-info ::= office:change-info::(dc-creator dc-date text-p*) ;
paragraph-content ::= string() ;
 paragraph-content ::= text:s::((text:c::nonNegativeInteger)?) ;
 paragraph-content ::= text:tab::text-tab-attr ;
 paragraph-content ::= text:line-break::ε ;
 paragraph-content ::= text:span::((text:style-name::styleNameRef)? (text:class-names::styleNameRefs)? paragraph-content*) ;
 paragraph-content ::= text:a::(text-a-attlist office-event-listeners? paragraph-content*) ;
 paragraph-content ::= (text:bookmark::(text:name::string)) | (text:bookmark-start::(text:name::string)) | (text:bookmark-end::(text:name::string)) ;
 paragraph-content ::= text:reference-mark::(text:name::string) ;
 paragraph-content ::= (text:reference-mark-start::(text:name::string)) | (text:reference-mark-end::(text:name::string)) ;
 paragraph-content ::= text:note::(text-note-class (text:id::string)? text:note-citation::((text:label::string)? string()) text:note-body::(text-content*)) ;
 paragraph-content ::= text:ruby::((text:style-name::styleNameRef)? text:ruby-base::paragraph-content text:ruby-text::((text:style-name::styleNameRef)? string())) ;
 paragraph-content ::= office-annotation ;
 paragraph-content ::= change-marks ;
 paragraph-content ::= shape | draw-a ;
 paragraph-content ::= text:date::(text-date-attlist string()) ;
 paragraph-content ::= text:time::(text-time-attlist string()) ;
 paragraph-content ::= text:page-number::(text-page-number-attlist string()) ;
 paragraph-content ::= text:page-continuation::(text-page-continuation-attlist string()) ;
 paragraph-content ::= text:sender-firstname::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-lastname::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-initials::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-title::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-position::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-email::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-phone-private::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-fax::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-company::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-phone-work::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-street::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-city::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-postal-code::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-country::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-state-or-province::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:author-name::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:author-initials::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:chapter::(text-chapter-attlist string()) ;
 paragraph-content ::= text:file-name::(text-file-name-attlist string()) ;
 paragraph-content ::= text:template-name::(text-template-name-attlist string()) ;
 paragraph-content ::= text:sheet-name::string() ;
 paragraph-content ::= text:variable-set::(common-field-name-attlist common-field-formula-attlist common-value-and-type-attlist common-field-display-value-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:variable-get::(common-field-name-attlist common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:variable-input::(common-field-name-attlist common-field-description-attlist common-value-type-attlist common-field-display-value-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:user-field-get::(common-field-name-attlist common-field-display-value-formula-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:user-field-input::(common-field-name-attlist common-field-description-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:sequence::(common-field-name-attlist common-field-formula-attlist common-field-num-format-attlist text-sequence-ref-name string()) ;
 paragraph-content ::= text:expression::(common-field-formula-attlist common-value-and-type-attlist? common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:text-input::(common-field-description-attlist string()) ;
 paragraph-content ::= text:initial-creator::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:creation-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::dateOrDateTime)? string()) ;
 paragraph-content ::= text:creation-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::timeOrDateTime)? string()) ;
 paragraph-content ::= text:description::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:user-defined::(common-field-fixed-attlist text:name::string common-field-data-style-name-attlist (office:value::double)? (office:date-value::dateOrDateTime)? (office:time-value::duration)? (office:boolean-value::boolean)? (office:string-value::string)? string()) ;
 paragraph-content ::= text:print-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::time)? string()) ;
 paragraph-content ::= text:print-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::date)? string()) ;
 paragraph-content ::= text:printed-by::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:title::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:subject::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:keywords::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:editing-cycles::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:editing-duration::(common-field-fixed-attlist common-field-data-style-name-attlist (text:duration::duration)? string()) ;
 paragraph-content ::= text:modification-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::time)? string()) ;
 paragraph-content ::= text:modification-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::date)? string()) ;
 paragraph-content ::= text:creator::(common-field-fixed-attlist string()) ;
 paragraph-content ::= (text:page-count::(common-field-num-format-attlist string())) | (text:paragraph-count::(common-field-num-format-attlist string())) | (text:word-count::(common-field-num-format-attlist string())) | (text:character-count::(common-field-num-format-attlist string())) | (text:table-count::(common-field-num-format-attlist string())) | (text:image-count::(common-field-num-format-attlist string())) | (text:object-count::(common-field-num-format-attlist string())) ;
 paragraph-content ::= text:database-display::(text-database-display-attlist string()) ;
 paragraph-content ::= text:database-next::text-database-next-attlist ;
 paragraph-content ::= text:database-row-select::text-database-row-select-attlist ;
 paragraph-content ::= text:database-row-number::(common-field-database-table common-field-num-format-attlist (text:value::nonNegativeInteger)? string()) ;
 paragraph-content ::= text:database-name::(common-field-database-table string()) ;
 paragraph-content ::= text:page-variable-set::(text-set-page-variable-attlist string()) ;
 paragraph-content ::= text:page-variable-get::(text-get-page-variable-attlist string()) ;
 paragraph-content ::= text:placeholder::(text-placeholder-attlist string()) ;
 paragraph-content ::= text:conditional-text::(text-conditional-text-attlist string()) ;
 paragraph-content ::= text:hidden-text::(text-hidden-text-attlist string()) ;
 paragraph-content ::= (text:reference-ref::(text-common-ref-content text-ref-content)) | (text:bookmark-ref::(text-common-ref-content text-ref-content)) ;
 paragraph-content ::= text:note-ref::(text-common-ref-content text-note-ref-content text-ref-content) ;
 paragraph-content ::= text:sequence-ref::(text-common-ref-content text-sequence-ref-content) ;
 paragraph-content ::= text:script::((xlink:href::anyURI (xlink:type::"simple")?) | string() (script:language::string)?) ;
 paragraph-content ::= text:execute-macro::((text:name::string)? office-event-listeners? string()) ;
 paragraph-content ::= text:hidden-paragraph::(text-hidden-paragraph-attlist string()) ;
 paragraph-content ::= text:dde-connection::(text:connection-name::string string()) ;
 paragraph-content ::= text:measure::(text:kind::("value" | "unit" | "gap") string()) ;
 paragraph-content ::= text:table-formula::(common-field-formula-attlist common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:toc-mark-start::text-toc-mark-start-attrs ;
 paragraph-content ::= text:toc-mark-end::text-id ;
 paragraph-content ::= text:toc-mark::(text:string-value::string text-outline-level) ;
 paragraph-content ::= text:user-index-mark-start::(text-id text-outline-level text-index-name) ;
 paragraph-content ::= text:user-index-mark-end::(text-id text-outline-level) ;
 paragraph-content ::= text:user-index-mark::(text:string-value::string text-outline-level text-index-name) ;
 paragraph-content ::= text:alphabetical-index-mark-start::(text-id text-alphabetical-index-mark-attrs) ;
 paragraph-content ::= text:alphabetical-index-mark-end::text-id ;
 paragraph-content ::= text:alphabetical-index-mark::(text:string-value::string text-alphabetical-index-mark-attrs) ;
 paragraph-content ::= text:bibliography-mark::(text:bibliography-type::text-bibliography-types ((text:identifier::string) | (text:address::string) | (text:annote::string) | (text:author::string) | (text:booktitle::string) | (text:chapter::string) | (text:edition::string) | (text:editor::string) | (text:howpublished::string) | (text:institution::string) | (text:journal::string) | (text:month::string) | (text:note::string) | (text:number::string) | (text:organizations::string) | (text:pages::string) | (text:publisher::string) | (text:school::string) | (text:series::string) | (text:title::string) | (text:report-type::string) | (text:volume::string) | (text:year::string) | (text:url::string) | (text:custom1::string) | (text:custom2::string) | (text:custom3::string) | (text:custom4::string) | (text:custom5::string) | (text:isbn::string) | (text:issn::string))* string()) ;
 paragraph-content ::= presentation:header::ε ;
 paragraph-content ::= presentation:footer::ε ;
 paragraph-content ::= presentation:date-time::ε ;
config-config-item-map-entry-attlist ::= (config:name::string)? ;
number-day ::= number:day::(number-day-attlist common-calendar-attlist) ;
styleNameRef ::= string() | ε ;
common-endsync-timing-attlist ::= (smil:endsync::("first" | "last" | "all" | "media"))? ;
table-visibility-value ::= "visible" | "collapse" | "filter" ;
change-mark-attr ::= text:change-id::IDREF ;
common-vertical-pos-attlist ::= (style:vertical-pos::("top" | "middle" | "bottom" | "from-top" | "below"))? (svg:y::coordinate)? ;
style-chart-properties-attlist ::= (chart:scale-text::boolean)? ;
 style-chart-properties-attlist ::= (chart:three-dimensional::boolean)? ;
 style-chart-properties-attlist ::= (chart:deep::boolean)? ;
 style-chart-properties-attlist ::= (chart:symbol-type::"none") | (chart:symbol-type::"automatic") | (chart:symbol-type::"named-symbol" chart:symbol-name::("square" | "diamond" | "arrow-down" | "arrow-up" | "arrow-right" | "arrow-left" | "bow-tie" | "hourglass" | "circle" | "star" | "x" | "plus" | "asterisk" | "horizontal-bar" | "vertical-bar")) | (chart:symbol-type::"image" chart:symbol-image::(xlink:href::anyURI)) | ε ;
 style-chart-properties-attlist ::= (chart:symbol-width::nonNegativeLength)? (chart:symbol-height::nonNegativeLength)? ;
 style-chart-properties-attlist ::= (chart:vertical::boolean)? ;
 style-chart-properties-attlist ::= (chart:connect-bars::boolean)? ;
 style-chart-properties-attlist ::= (chart:gap-width::integer)? (chart:overlap::integer)? ;
 style-chart-properties-attlist ::= (chart:japanese-candle-stick::boolean)? ;
 style-chart-properties-attlist ::= (chart:interpolation::("none" | "cubic-spline" | "b-spline"))? (chart:spline-order::positiveInteger)? (chart:spline-resolution::positiveInteger)? ;
 style-chart-properties-attlist ::= (chart:pie-offset::nonNegativeInteger)? ;
 style-chart-properties-attlist ::= (chart:lines::boolean)? ;
 style-chart-properties-attlist ::= (chart:solid-type::("cuboid" | "cylinder" | "cone" | "pyramid"))? ;
 style-chart-properties-attlist ::= (chart:stacked::boolean)? (chart:percentage::boolean)? ;
 style-chart-properties-attlist ::= (chart:link-data-style-to-source::boolean)? ;
 style-chart-properties-attlist ::= (chart:visible::boolean)? ;
 style-chart-properties-attlist ::= (chart:logarithmic::boolean)? ;
 style-chart-properties-attlist ::= (chart:maximum::double)? (chart:minimum::double)? (chart:origin::double)? (chart:interval-major::double)? (chart:interval-minor::positiveInteger)? ;
 style-chart-properties-attlist ::= (chart:tick-marks-major-inner::boolean)? (chart:tick-marks-major-outer::boolean)? (chart:tick-marks-minor-inner::boolean)? (chart:tick-marks-minor-outer::boolean)? ;
 style-chart-properties-attlist ::= (chart:display-label::boolean)? (chart:text-overlap::boolean)? (text:line-break::boolean)? (chart:label-arrangement::("side-by-side" | "stagger-even" | "stagger-odd"))? ;
 style-chart-properties-attlist ::= common-style-direction-attlist ;
 style-chart-properties-attlist ::= common-rotation-angle-attlist ;
 style-chart-properties-attlist ::= (chart:data-label-number::("none" | "value" | "percentage"))? ;
 style-chart-properties-attlist ::= (chart:data-label-text::boolean)? ;
 style-chart-properties-attlist ::= (chart:data-label-symbol::boolean)? ;
 style-chart-properties-attlist ::= (chart:mean-value::boolean)? ;
 style-chart-properties-attlist ::= (chart:error-category::("none" | "variance" | "standard-deviation" | "percentage" | "error-margin" | "constant"))? ;
 style-chart-properties-attlist ::= (chart:error-percentage::double)? ;
 style-chart-properties-attlist ::= (chart:error-margin::double)? ;
 style-chart-properties-attlist ::= (chart:error-lower-limit::double)? (chart:error-upper-limit::double)? ;
 style-chart-properties-attlist ::= (chart:error-upper-indicator::boolean)? (chart:error-lower-indicator::boolean)? ;
 style-chart-properties-attlist ::= (chart:series-source::("columns" | "rows"))? ;
 style-chart-properties-attlist ::= (chart:regression-type::("none" | "linear" | "logarithmic" | "exponential" | "power"))? ;
style-page-layout-properties-elements ::= style-background-image ;
 style-page-layout-properties-elements ::= style-columns ;
 style-page-layout-properties-elements ::= style-footnote-sep ;
text-table-index-entry-template ::= text:table-index-entry-template::text-illustration-index-entry-content ;
text-linenumbering-configuration ::= text:linenumbering-configuration::(text-linenumbering-configuration-attlist text-linenumbering-separator?) ;
draw-path ::= draw:path::(common-draw-path-data-attlist common-draw-position-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
number-embedded-text ::= number:embedded-text::(number-embedded-text-attlist string()) ;
table-table-cell-content ::= table-cell-range-source? office-annotation? table-detective? text-content* ;
style-handout-master ::= style:handout-master::(common-presentation-header-footer-attlist style-handout-master-attlist shape*) ;
presentation-show-text ::= presentation:show-text::(common-presentation-effect-attlist presentation-sound?) ;
targetFrameName ::= "_self" | "_blank" | "_parent" | "_top" | string ;
draw-area-circle ::= draw:area-circle::(common-draw-area-attlist svg:cx::coordinate svg:cy::coordinate svg:r::length svg-desc? office-event-listeners?) ;
text-user-index-source-attr ::= text-index-scope-attr text-relative-tab-stop-position-attr text:index-name::string ;
 text-user-index-source-attr ::= (text:use-index-marks::boolean)? (text:use-graphics::boolean)? (text:use-tables::boolean)? (text:use-floating-frames::boolean)? (text:use-objects::boolean)? ;
 text-user-index-source-attr ::= (text:copy-outline-levels::boolean)? ;
form-image-attlist ::= form-control-attlist button-type common-disabled-attlist image-data common-printable-attlist common-tab-attlist target-frame target-location common-title-attlist common-value-attlist ;
draw-connector ::= draw:connector::(draw-connector-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
table-highlighted-range ::= table:highlighted-range::(table-highlighted-range-attlist | table-highlighted-range-attlist-invalid) ;
anyElements ::= (string()? anyAttListOrElements string()?)* ;
style-column-sep ::= style:column-sep::style-column-sep-attlist ;
shapes3d ::= dr3d-scene | dr3d-extrude | dr3d-sphere | dr3d-rotate | dr3d-cube ;
text-linenumbering-configuration-attlist ::= (text:number-lines::boolean)? ;
 text-linenumbering-configuration-attlist ::= common-num-format-attlist? ;
 text-linenumbering-configuration-attlist ::= (text:style-name::styleNameRef)? ;
 text-linenumbering-configuration-attlist ::= (text:increment::nonNegativeInteger)? ;
 text-linenumbering-configuration-attlist ::= (text:number-position::("left" | "rigth" | "inner" | "outer"))? ;
 text-linenumbering-configuration-attlist ::= (text:offset::nonNegativeLength)? ;
 text-linenumbering-configuration-attlist ::= (text:count-empty-lines::boolean)? ;
 text-linenumbering-configuration-attlist ::= (text:count-in-text-boxes::boolean)? ;
 text-linenumbering-configuration-attlist ::= (text:restart-on-page::boolean)? ;
table-rows-and-groups ::= (table-table-row-group | table-rows-no-group)+ ;
office-drawing-attlist ::= ε ;
draw-stroke-dash ::= draw:stroke-dash::draw-stroke-dash-attlist ;
text-object-index-entry-template ::= text:object-index-entry-template::text-illustration-index-entry-content ;
list-source-type ::= (form:list-source-type::("table" | "query" | "sql" | "sql-pass-through" | "value-list" | "table-fields"))? ;
number-month ::= number:month::(number-month-attlist common-calendar-attlist) ;
text-toc-mark-start-attrs ::= text-id text-outline-level ;
chart-data-point ::= chart:data-point::chart-data-point-attlist ;
office-image-attlist ::= ε ;
office-scripts ::= (office:scripts::(office-script* office-event-listeners?))? ;
common-vertical-margin-attlist ::= (fo:margin-top::(nonNegativeLength | percent))? (fo:margin-bottom::(nonNegativeLength | percent))? ;
table-data-pilot-table ::= table:data-pilot-table::(table-data-pilot-table-attlist (table-database-source-sql | table-database-source-table | table-database-source-query | table-source-service | table-source-cell-range)? table-data-pilot-field+) ;
vector3D ::= string() ;
style-header-footer-properties-attlist ::= (svg:height::length)? (fo:min-height::length)? ;
 style-header-footer-properties-attlist ::= common-horizontal-margin-attlist common-vertical-margin-attlist common-margin-attlist ;
 style-header-footer-properties-attlist ::= common-border-attlist ;
 style-header-footer-properties-attlist ::= common-border-line-width-attlist ;
 style-header-footer-properties-attlist ::= common-padding-attlist ;
 style-header-footer-properties-attlist ::= common-background-color-attlist ;
 style-header-footer-properties-attlist ::= common-shadow-attlist ;
style-column ::= style:column::style-column-attlist ;
style-font-face-attlist ::= (svg:font-family::string)? (svg:font-style::fontStyle)? (svg:font-variant::fontVariant)? (svg:font-weight::fontWeight)? (svg:font-stretch::("normal" | "ultra-condensed" | "extra-condensed" | "condensed" | "semi-condensed" | "semi-expanded" | "expanded" | "extra-expanded" | "ultra-expanded"))? (svg:font-size::positiveLength)? (svg:unicode-range::string())? (svg:units-per-em::integer)? (svg:panose-1::string())? (svg:stemv::integer)? (svg:stemh::integer)? (svg:slope::integer)? (svg:cap-height::integer)? (svg:x-height::integer)? (svg:accent-height::integer)? (svg:ascent::integer)? (svg:descent::integer)? (svg:widths::string())? (svg:bbox::string())? (svg:ideographic::integer)? (svg:alphabetic::integer)? (svg:mathematical::integer)? (svg:hanging::integer)? (svg:v-ideographic::integer)? (svg:v-alphabetic::integer)? (svg:v-mathematical::integer)? (svg:v-hanging::integer)? (svg:underline-position::integer)? (svg:underline-thickness::integer)? (svg:strikethrough-position::integer)? (svg:strikethrough-thickness::integer)? (svg:overline-position::integer)? (svg:overline-thickness::integer)? ;
 style-font-face-attlist ::= style:name::string ;
 style-font-face-attlist ::= (style:font-adornments::string)? ;
 style-font-face-attlist ::= (style:font-family-generic::fontFamilyGeneric)? ;
 style-font-face-attlist ::= (style:font-pitch::fontPitch)? ;
 style-font-face-attlist ::= (style:font-charset::textEncoding)? ;
style-num-letter-sync-attlist ::= (style:num-letter-sync::boolean)? ;
common-field-fixed-attlist ::= (text:fixed::boolean)? ;
text-changed-region-attr ::= text:id::ID ;
draw-stroke-dash-attlist ::= draw:name::styleName ;
 draw-stroke-dash-attlist ::= (draw:display-name::string)? ;
 draw-stroke-dash-attlist ::= (draw:style::("rect" | "round"))? ;
 draw-stroke-dash-attlist ::= (draw:dots1::integer)? (draw:dots1-length::length)? (draw:dots2::integer)? (draw:dots2-length::length)? ;
 draw-stroke-dash-attlist ::= (draw:distance::length)? ;
any-date ::= number-day | number-month | number-year | number-era | number-day-of-week | number-week-of-year | number-quarter | number-hours | number-am-pm | number-minutes | number-seconds ;
table-last-column ::= table:last-column::common-table-template-attlist ;
table-cell-content-deletion ::= table:cell-content-deletion::((table:id::string)? table-cell-address? table-change-track-table-cell?) ;
text-bibliography-types ::= "article" | "book" | "booklet" | "conference" | "custom1" | "custom2" | "custom3" | "custom4" | "custom5" | "email" | "inbook" | "incollection" | "inproceedings" | "journal" | "manual" | "mastersthesis" | "misc" | "phdthesis" | "proceedings" | "techreport" | "unpublished" | "www" ;
office-script-attlist ::= script:language::string ;
config-config-item-map-named ::= config:config-item-map-named::(config-config-item-map-named-attlist config-config-item-map-entry+) ;
number-seconds-attlist ::= (number:style::("short" | "long"))? ;
 number-seconds-attlist ::= (number:decimal-places::integer)? ;
table-deletion ::= table:deletion::(table-deletion-attlist common-table-change-attlist office-change-info table-dependencies? table-deletions? table-cut-offs?) ;
text-index-entry-chapter-attrs ::= (text:display::("name" | "number" | "number-and-name"))? ;
style-ruby-properties ::= style:ruby-properties::style-ruby-properties-content ;
common-contour-attlist ::= draw:recreate-on-edit::boolean ;
table-database-source-query ::= table:database-source-table::table-database-source-table-attlist ;
change-marks ::= (text:change::change-mark-attr) | (text:change-start::change-mark-attr) | (text:change-end::change-mark-attr) ;
common-field-data-style-name-attlist ::= (style:data-style-name::styleNameRef)? ;
style-column-attlist ::= style:rel-width::relativeLength ;
 style-column-attlist ::= (fo:start-indent::length)? ;
 style-column-attlist ::= (fo:end-indent::length)? ;
 style-column-attlist ::= (fo:space-before::length)? ;
 style-column-attlist ::= (fo:space-after::length)? ;
common-fill-timing-attlist ::= (smil:fill::("remove" | "freeze" | "hold" | "auto" | "default" | "transition"))? ;
form-image-frame-attlist ::= form-control-attlist common-disabled-attlist image-data common-printable-attlist common-readonly-attlist common-title-attlist common-data-field-attlist ;
rowOrCol ::= "row" | "column" ;
table-source-service ::= table:source-service::table-source-service-attlist ;
office-annotation ::= office:annotation::(office-annotation-attlist draw-caption-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist dc-creator? dc-date? meta-date-string? (text-p | text-list)*) ;
config-config-item-map-named-attlist ::= config:name::string ;
style-footer-left ::= style:footer-left::(common-style-header-footer-attlist header-footer-content) ;
common-anim-target-attlist ::= (smil:targetElement::IDREF)? ;
 common-anim-target-attlist ::= (anim:sub-item::string)? ;
draw-line ::= draw:line::(draw-line-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
style-ruby-properties-attlist ::= (style:ruby-position::("above" | "below"))? ;
 style-ruby-properties-attlist ::= (style:ruby-align::("left" | "center" | "right" | "distribute-letter" | "distribute-space"))? ;
style-list-level-properties-content-strict ::= style-list-level-properties-attlist style-list-level-properties-elements ;
style-table-properties-content ::= style-properties-content ;
table-sort-by-attlist ::= table:field-number::nonNegativeInteger ;
 table-sort-by-attlist ::= (table:data-type::("text" | "number" | "automatic" | string))? ;
 table-sort-by-attlist ::= (table:order::("ascending" | "descending"))? ;
table-columns-and-groups ::= (table-table-column-group | table-columns-no-group)+ ;
draw-page-thumbnail ::= draw:page-thumbnail::(draw-page-thumbnail-attlist common-draw-position-attlist common-draw-size-attlist presentation-shape-attlist common-draw-shape-with-styles-attlist) ;
table-odd-rows ::= table:odd-rows::common-table-template-attlist ;
office-image-content-prelude ::= ε ;
style-graphic-properties ::= style:graphic-properties::style-graphic-properties-content ;
table-source-service-attlist ::= table:name::string ;
 table-source-service-attlist ::= table:source-name::string ;
 table-source-service-attlist ::= table:object-name::string ;
 table-source-service-attlist ::= (table:user-name::string)? ;
 table-source-service-attlist ::= (table:password::string)? ;
office-meta-content-strict ::= office-meta-data* ;
common-calendar-attlist ::= (number:calendar::("gregorian" | "gengou" | "ROC" | "hanja_yoil" | "hanja" | "hijri" | "jewish" | "buddhist" | string))? ;
draw-handle ::= draw:handle::draw-handle-attlist ;
table-cell-content-change ::= table:cell-content-change::(common-table-change-attlist table-cell-address office-change-info table-dependencies? table-deletions? table-previous) ;
table-subtotal-field ::= table:subtotal-field::table-subtotal-field-attlist ;
chart-legend-attlist ::= (chart:legend-position::("start" | "end" | "top" | "bottom") (chart:legend-align::("start" | "center" | "end"))?) | (chart:legend-position::("top-start" | "bottom-start" | "top-end" | "bottom-end")) | ε ;
 chart-legend-attlist ::= common-draw-position-attlist ;
 chart-legend-attlist ::= (style:legend-expansion::("wide" | "high" | "balanced")) | (style:legend-expansion::"custom" style:legend-expansion-aspect-ratio::double) | ε ;
 chart-legend-attlist ::= (chart:style-name::styleNameRef)? ;
office-chart-content-main ::= chart-chart ;
table-subtotal-rules ::= table:subtotal-rules::(table-subtotal-rules-attlist table-sort-groups? table-subtotal-rule*) ;
chart-plot-area ::= chart:plot-area::(chart-plot-area-attlist dr3d-light* chart-axis* chart-series* chart-stock-gain-marker? chart-stock-loss-marker? chart-stock-range-line? chart-wall? chart-floor?) ;
draw-measure-attlist ::= svg:x1::coordinate svg:y1::coordinate ;
 draw-measure-attlist ::= svg:x2::coordinate svg:y2::coordinate ;
style-chart-properties-elements ::= ε ;
draw-param ::= draw:param::draw-param-attlist ;
draw-object-ole ::= draw:object-ole::(draw-object-ole-attlist common-draw-data-attlist | office-binary-data) ;
number-era-attlist ::= (number:style::("short" | "long"))? ;
number-percentage-style ::= number:percentage-style::(common-data-style-attlist style-text-properties? number-text? number-and-text? style-map*) ;
office-body-content ::= office:text::(office-text-attlist office-text-content-prelude office-text-content-main* office-text-content-epilogue) ;
 office-body-content ::= office:drawing::(office-drawing-attlist office-drawing-content-prelude office-drawing-content-main office-drawing-content-epilogue) ;
 office-body-content ::= office:presentation::(office-presentation-attlist office-presentation-content-prelude office-presentation-content-main office-presentation-content-epilogue) ;
 office-body-content ::= office:spreadsheet::(office-spreadsheet-attlist office-spreadsheet-content-prelude office-spreadsheet-content-main office-spreadsheet-content-epilogue) ;
 office-body-content ::= office:chart::(office-chart-attlist office-chart-content-prelude office-chart-content-main office-chart-content-epilogue) ;
 office-body-content ::= office:image::(office-image-attlist office-image-content-prelude office-image-content-main office-image-content-epilogue) ;
draw-contour-polygon ::= draw:contour-polygon::(common-contour-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-points-attlist) ;
chart-plot-area-attlist ::= common-draw-position-attlist common-draw-size-attlist ;
 chart-plot-area-attlist ::= (chart:style-name::styleNameRef)? ;
 chart-plot-area-attlist ::= (table:cell-range-address::cellRangeAddress)? ;
 chart-plot-area-attlist ::= (chart:data-source-has-labels::("none" | "row" | "column" | "both"))? ;
 chart-plot-area-attlist ::= dr3d-scene-attlist common-dr3d-transform-attlist ;
borderWidths ::= positiveLength positiveLength positiveLength ;
form-formatted-text-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist ;
 form-formatted-text-attlist ::= (form:max-value::string)? ;
 form-formatted-text-attlist ::= (form:min-value::string)? ;
 form-formatted-text-attlist ::= (form:validation::boolean)? ;
chart-mean-value ::= chart:mean-value::chart-mean-value-attlist ;
style-section-properties ::= style:section-properties::style-section-properties-content ;
table-source-cell-range-attlist ::= table:cell-range-address::cellRangeAddress ;
cellRangeAddressList ::= string() ;
style-table-properties-elements ::= style-background-image ;
style-graphic-properties-content-strict ::= style-graphic-properties-attlist style-graphic-fill-properties-attlist style-graphic-properties-elements ;
text-illustration-index ::= text:illustration-index::(sectionAttr text-illustration-index-source text-index-body) ;
office-dde-source ::= office:dde-source::(office-dde-source-attlist common-dde-connection-decl-attlist) ;
presentation-animation-elements ::= presentation-show-shape | presentation-show-text | presentation-hide-shape | presentation-hide-text | presentation-dim | presentation-play ;
anin-iterate-attlist ::= (smil:targetElement::IDREF)? ;
 anin-iterate-attlist ::= (anim:iterate-type::string)? ;
 anin-iterate-attlist ::= (anim:iterate-interval::duration)? ;
table-scenario ::= table:scenario::table-scenario-attlist ;
common-table-template-attlist ::= text:style-name::styleNameRef ;
math-math ::= math:math::mathMarkup ;
common-current-value-attlist ::= (form:current-value::string)? ;
table-content-validation ::= table:content-validation::(table-validation-attlist table-help-message? (table-error-message | (table-error-macro office-event-listeners?))?) ;
table-data-pilot-level ::= table:data-pilot-level::(table-data-pilot-level-attlist table-data-pilot-subtotals? table-data-pilot-members? table-data-pilot-display-info? table-data-pilot-sort-info? table-data-pilot-layout-info?) ;
table-dependency ::= table:dependency::(table:id::string) ;
draw-equation-attlist ::= (draw:name::string)? ;
 draw-equation-attlist ::= (draw:formula::string)? ;
text-conditional-text-attlist ::= text:condition::formula ;
 text-conditional-text-attlist ::= text:string-value-if-true::string ;
 text-conditional-text-attlist ::= text:string-value-if-false::string ;
 text-conditional-text-attlist ::= (text:current-value::boolean)? ;
countryCode ::= string() ;
fontStyle ::= "normal" | "italic" | "oblique" ;
style-table-column-properties-attlist ::= (style:column-width::positiveLength)? (style:rel-column-width::relativeLength)? ;
 style-table-column-properties-attlist ::= (style:use-optimal-column-width::boolean)? ;
 style-table-column-properties-attlist ::= common-break-attlist ;
region-content ::= text-p* ;
text-list-item-attr ::= (text:start-value::nonNegativeInteger)? ;
office-spreadsheet-content-epilogue ::= table-functions ;
common-draw-circle-ellipse-attlist ::= (svg:cx::coordinate svg:cy::coordinate)? ;
 common-draw-circle-ellipse-attlist ::= (draw:kind::("full" | "section" | "cut" | "arc"))? ;
 common-draw-circle-ellipse-attlist ::= (draw:start-angle::double)? ;
 common-draw-circle-ellipse-attlist ::= (draw:end-angle::double)? ;
table-table-source ::= table:table-source::(table-table-source-attlist table-linked-source-attlist) ;
text-page-number-attlist ::= common-field-num-format-attlist common-field-fixed-attlist ;
 text-page-number-attlist ::= (text:page-adjust::integer)? ;
 text-page-number-attlist ::= (text:select-page::("previous" | "current" | "next"))? ;
table-label-range-attlist ::= table:label-cell-range-address::cellRangeAddress ;
 table-label-range-attlist ::= table:data-cell-range-address::cellRangeAddress ;
 table-label-range-attlist ::= table:orientation::("column" | "row") ;
text-sequence-decl ::= text:sequence-decl::text-sequence-decl-attlist ;
style-style ::= style:style::(style-style-attlist style-style-content style-map*) ;
draw-enhanced-geometry-attlist ::= (draw:type::custom-shape-type)? ;
 draw-enhanced-geometry-attlist ::= (svg:viewBox::(integer integer integer integer))? ;
 draw-enhanced-geometry-attlist ::= (draw:mirror-vertical::boolean)? (draw:mirror-horizontal::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-rotate-angle::double)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:concentric-gradient-fill-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-brightness::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-depth::(length double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-diffusion::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-number-of-line-segments::integer)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-light-face::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-harsh::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-harsh::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-level::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-level::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-direction::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-direction::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-metal::boolean)? ;
 draw-enhanced-geometry-attlist ::= (dr3d:shade-mode::("flat" | "phong" | "gouraud" | "draft"))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-rotation-angle::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-rotation-center::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-shininess::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-skew::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-specularity::percent)? ;
 draw-enhanced-geometry-attlist ::= (dr3d:projection::("parallel" | "perspective"))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-viewpoint::point3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-origin::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-color::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:enhanced-path::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:path-stretchpoint-x::double)? (draw:path-stretchpoint-y::double)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-areas::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-points::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-point-type::("none" | "segments" | "rectangle"))? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-point-leaving-directions::string())? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-mode::("normal" | "path" | "shape"))? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-scale::("path" | "shape"))? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-same-letter-heights::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:modifiers::string)? ;
common-field-name-attlist ::= text:name::variableName ;
style-presentation-page-layout ::= style:presentation-page-layout::(style:name::styleName (style:display-name::string)? presentation-placeholder*) ;
text-index-entry-page-number ::= text:index-entry-page-number::((text:style-name::styleNameRef)?) ;
office-presentation-content-main ::= draw-page* ;
presentation-sound-attlist ::= (presentation:play-full::boolean)? ;
text-alphabetical-index-auto-mark-file ::= text:alphabetical-index-auto-mark-file::(xlink:href::anyURI (xlink:type::"simple")?) ;
draw-gradient-attlist ::= (draw:start-color::color)? (draw:end-color::color)? ;
 draw-gradient-attlist ::= (draw:start-intensity::percent)? (draw:end-intensity::percent)? ;
style-background-image-attlist ::= (style:repeat::("no-repeat" | "repeat" | "stretch"))? ;
 style-background-image-attlist ::= (style:position::("left" | "center" | "right" | "top" | "bottom" | (horiBackPos vertBackPos) | (vertBackPos horiBackPos)))? ;
 style-background-image-attlist ::= (style:filter-name::string)? ;
 style-background-image-attlist ::= (draw:opacity::percent)? ;
svg-font-face-src ::= svg:font-face-src::((svg-font-face-uri | svg-font-face-name)+) ;
text-sequence-decl-attlist ::= common-field-name-attlist ;
 text-sequence-decl-attlist ::= text:display-outline-level::nonNegativeInteger ;
 text-sequence-decl-attlist ::= (text:separation-character::character)? ;
svg-font-face-name ::= svg:font-face-name::((name::string())?) ;
bound-column ::= (form:bound-column::string)? ;
style-drop-cap-attlist ::= (style:length::("word" | positiveInteger))? ;
 style-drop-cap-attlist ::= (style:lines::positiveInteger)? ;
 style-drop-cap-attlist ::= (style:distance::length)? ;
 style-drop-cap-attlist ::= (style:style-name::styleNameRef)? ;
text-table-of-content ::= text:table-of-content::(sectionAttr text-table-of-content-source text-index-body) ;
anim-command-attlist ::= anim:command::string ;
style-graphic-properties-content ::= style-properties-content ;
table-data-pilot-members ::= table:data-pilot-members::(table-data-pilot-member*) ;
text-tracked-changes ::= (text:tracked-changes::(text-tracked-changes-attr text-changed-region*))? ;
office-chart-attlist ::= ε ;
text-index-entry-link-end ::= text:index-entry-link-end::((text:style-name::styleNameRef)?) ;
number-hours-attlist ::= (number:style::("short" | "long"))? ;
form-item ::= form:item::(form-item-attlist string()) ;
cellRangeAddress ::= string() ;
draw-hatch ::= draw:hatch::draw-hatch-attlist ;
sectionAttr ::= (text:style-name::styleNameRef)? ;
 sectionAttr ::= text:name::string ;
 sectionAttr ::= (text:protected::boolean)? ;
 sectionAttr ::= (text:protection-key::string)? ;
office-meta ::= (office:meta::office-meta-content)? ;
style-table-row-properties-attlist ::= (style:row-height::positiveLength)? (style:min-row-height::nonNegativeLength)? ;
 style-table-row-properties-attlist ::= (style:use-optimal-row-height::boolean)? ;
 style-table-row-properties-attlist ::= common-background-color-attlist ;
 style-table-row-properties-attlist ::= common-break-attlist ;
 style-table-row-properties-attlist ::= (fo:keep-together::("auto" | "always"))? ;
chart-regression-curve ::= chart:regression-curve::chart-regression-curve-attlist ;
common-auto-reorder-attlist ::= (number:automatic-order::boolean)? ;
table-consolidation ::= table:consolidation::table-consolidation-attlist ;
text-bibliography-configuration ::= text:bibliography-configuration::(text-bibliography-configuration-attlist text-sort-key*) ;
draw-circle-attlist ::= (svg:r::length)? ;
chart-footer ::= chart:footer::(chart-title-attlist text-p?) ;
table-subtotal-rule ::= table:subtotal-rule::(table-subtotal-rule-attlist table-subtotal-field*) ;
common-stock-marker-attlist ::= (chart:style-name::styleNameRef)? ;
chart-regression-curve-attlist ::= (chart:style-name::styleNameRef)? ;
style-text-properties-content ::= style-properties-content ;
common-value-and-type-attlist ::= (office:value-type::"float" office:value::double) | (office:value-type::"percentage" office:value::double) | (office:value-type::"currency" office:value::double (office:currency::string)?) | (office:value-type::"date" office:date-value::dateOrDateTime) | (office:value-type::"time" office:time-value::duration) | (office:value-type::"boolean" office:boolean-value::boolean) | (office:value-type::"string" (office:string-value::string)?) ;
common-basic-timing-attlist ::= common-begin-end-timing-attlist common-dur-timing-attlist common-repeat-timing-attlist ;
draw-caption ::= draw:caption::(draw-caption-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
text-index-body ::= text:index-body::(index-content-main*) ;
common-decimal-places-attlist ::= (number:decimal-places::integer)? ;
office-text-content-main ::= (text-content*) | (text-page-sequence (draw-a | shape)*) ;
number-minutes ::= number:minutes::number-minutes-attlist ;
chart-wall ::= chart:wall::chart-wall-attlist ;
table-subtotal-rule-attlist ::= table:group-by-field-number::nonNegativeInteger ;
text-index-entry-bibliography ::= text:index-entry-bibliography::text-index-entry-bibliography-attrs ;
table-filter ::= table:filter::(table-filter-attlist table-filter-condition | table-filter-and | table-filter-or) ;
style-paragraph-properties-elements ::= style-tab-stops ;
 style-paragraph-properties-elements ::= style-drop-cap ;
 style-paragraph-properties-elements ::= style-background-image ;
form-listbox-attlist ::= form-control-attlist common-disabled-attlist dropdown common-printable-attlist size common-tab-attlist common-title-attlist bound-column common-data-field-attlist list-source list-source-type ;
 form-listbox-attlist ::= (form:multiple::boolean)? ;
 form-listbox-attlist ::= (form:xforms-list-source::string)? ;
style-table-cell-properties-attlist ::= (style:vertical-align::("top" | "middle" | "bottom" | "automatic"))? ;
 style-table-cell-properties-attlist ::= (style:text-align-source::("fix" | "value-type"))? ;
 style-table-cell-properties-attlist ::= common-style-direction-attlist ;
 style-table-cell-properties-attlist ::= (style:glyph-orientation-vertical::("auto" | "0"))? ;
 style-table-cell-properties-attlist ::= common-shadow-attlist ;
 style-table-cell-properties-attlist ::= common-background-color-attlist ;
 style-table-cell-properties-attlist ::= common-border-attlist ;
 style-table-cell-properties-attlist ::= (style:diagonal-tl-br::string)? (style:diagonal-tl-br-widths::borderWidths)? (style:diagonal-bl-tr::string)? (style:diagonal-bl-tr-widths::borderWidths)? ;
 style-table-cell-properties-attlist ::= common-border-line-width-attlist ;
 style-table-cell-properties-attlist ::= common-padding-attlist ;
 style-table-cell-properties-attlist ::= (fo:wrap-option::("no-wrap" | "wrap"))? ;
 style-table-cell-properties-attlist ::= common-rotation-angle-attlist ;
 style-table-cell-properties-attlist ::= (style:rotation-align::("none" | "bottom" | "top" | "center"))? ;
 style-table-cell-properties-attlist ::= (style:cell-protect::("none" | "hidden-and-protected" | (("protected" | "formula-hidden")+)))? ;
 style-table-cell-properties-attlist ::= (style:print-content::boolean)? ;
 style-table-cell-properties-attlist ::= (style:decimal-places::nonNegativeInteger)? ;
 style-table-cell-properties-attlist ::= (style:repeat-content::boolean)? ;
 style-table-cell-properties-attlist ::= (style:shrink-to-fit::boolean)? ;
text-alphabetical-index-mark-attrs ::= (text:key1::string)? (text:key2::string)? ;
 text-alphabetical-index-mark-attrs ::= (text:string-value-phonetic::string)? (text:key1-phonetic::string)? (text:key2-phonetic::string)? ;
 text-alphabetical-index-mark-attrs ::= (text:main-entry::boolean)? ;
text-sort-key ::= text:sort-key::text-sort-key-attlist ;
chart-floor-attlist ::= (svg:width::length)? ;
 chart-floor-attlist ::= (chart:style-name::styleNameRef)? ;
presentation-notes ::= presentation:notes::(common-presentation-header-footer-attlist presentation-notes-attlist shape*) ;
number-number ::= number:number::(number-number-attlist common-decimal-places-attlist common-number-attlist number-embedded-text*) ;
office-drawing-content-main ::= draw-page* ;
text-notes-configuration ::= text:notes-configuration::text-notes-configuration-content ;
any-number ::= number-number | number-scientific-number | number-fraction ;
table-database-range ::= table:database-range::(table-database-range-attlist (table-database-source-sql | table-database-source-table | table-database-source-query)? table-filter? table-sort? table-subtotal-rules?) ;
table-decls ::= table-calculation-settings? table-content-validations? table-label-ranges? ;
style-table-cell-properties-content-strict ::= style-table-cell-properties-attlist style-table-cell-properties-elements ;
text-index-scope-attr ::= (text:index-scope::("document" | "chapter"))? ;
text-section ::= text:section::(text-section-attr text-section-source | text-section-source-dde | ε text-content*) ;
presentation-animation-group ::= presentation:animation-group::(presentation-animation-elements*) ;
text-relative-tab-stop-position-attr ::= (text:relative-tab-stop-position::boolean)? ;
number-currency-symbol-attlist ::= (number:language::languageCode)? (number:country::countryCode)? ;
text-list-item ::= text:list-item::(text-list-item-attr text-list-item-content) ;
text-list-level-style-number-attr ::= (text:style-name::styleNameRef)? ;
 text-list-level-style-number-attr ::= common-num-format-attlist common-num-format-prefix-suffix-attlist ;
 text-list-level-style-number-attr ::= (text:display-levels::positiveInteger)? ;
 text-list-level-style-number-attr ::= (text:start-value::positiveInteger)? ;
common-border-attlist ::= (fo:border::string)? (fo:border-top::string)? (fo:border-bottom::string)? (fo:border-left::string)? (fo:border-right::string)? ;
presentation-notes-attlist ::= (style:page-layout-name::styleNameRef)? ;
 presentation-notes-attlist ::= (draw:style-name::styleNameRef)? ;
positiveLength ::= string() ;
currency-symbol-and-text ::= number-currency-symbol number-text? ;
table-database-range-attlist ::= (table:name::string)? ;
 table-database-range-attlist ::= (table:is-selection::boolean)? ;
 table-database-range-attlist ::= (table:on-update-keep-styles::boolean)? ;
 table-database-range-attlist ::= (table:on-update-keep-size::boolean)? ;
 table-database-range-attlist ::= (table:has-persistent-data::boolean)? ;
 table-database-range-attlist ::= (table:orientation::("column" | "row"))? ;
 table-database-range-attlist ::= (table:contains-header::boolean)? ;
 table-database-range-attlist ::= (table:display-filter-buttons::boolean)? ;
 table-database-range-attlist ::= table:target-range-address::cellRangeAddress ;
 table-database-range-attlist ::= (table:refresh-delay::boolean)? ;
form-property-name ::= form:property-name::string ;
config-config-item-set-attlist ::= config:name::string ;
text-object-index-source-attrs ::= text-index-scope-attr ;
 text-object-index-source-attrs ::= text-relative-tab-stop-position-attr ;
 text-object-index-source-attrs ::= (text:use-spreadsheet-objects::boolean)? ;
 text-object-index-source-attrs ::= (text:use-math-objects::boolean)? ;
 text-object-index-source-attrs ::= (text:use-draw-objects::boolean)? ;
 text-object-index-source-attrs ::= (text:use-chart-objects::boolean)? ;
 text-object-index-source-attrs ::= (text:use-other-objects::boolean)? ;
text-illustration-index-source ::= text:illustration-index-source::(text-illustration-index-source-attrs text-index-title-template? text-illustration-index-entry-template?) ;
table-change-track-table-cell-attlist ::= (table:cell-address::cellAddress)? ;
 table-change-track-table-cell-attlist ::= (table:matrix-covered::boolean)? ;
 table-change-track-table-cell-attlist ::= (table:formula::string)? (table:number-matrix-columns-spanned::positiveInteger)? (table:number-matrix-rows-spanned::positiveInteger)? common-value-and-type-attlist? ;
lineWidth ::= "auto" | "normal" | "bold" | "thin" | "dash" | "medium" | "thick" | positiveInteger | percent | positiveLength ;
style-region-center ::= style:region-center::region-content ;
number-number-style ::= number:number-style::(common-data-style-attlist style-text-properties? number-text? (any-number number-text?)? style-map*) ;
target-frame ::= (office:target-frame::targetFrameName)? ;
base64Binary ::= string() ;
form-property-value-and-type-attlist ::= common-value-and-type-attlist | (office:value-type::"void") ;
table-named-range ::= table:named-range::table-named-range-attlist ;
style-header ::= style:header::(common-style-header-footer-attlist header-footer-content) ;
form-time-attlist ::= (form:value::time)? ;
 form-time-attlist ::= (form:current-value::time)? ;
 form-time-attlist ::= (form:min-value::time)? ;
 form-time-attlist ::= (form:max-value::time)? ;
table-cell-address ::= table:cell-address::common-table-cell-address-attlist ;
table-operation ::= table:operation::table-operation-attlist ;
office-document-meta ::= office:document-meta::(office-document-common-attrs office-meta) ;
text-index-entry-text ::= text:index-entry-text::((text:style-name::styleNameRef)?) ;
common-draw-data-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:show::"embed")? (xlink:actuate::"onLoad")? ;
chart-axis-attlist ::= chart:dimension::("x" | "y" | "z") ;
 chart-axis-attlist ::= (chart:name::string)? ;
 chart-axis-attlist ::= (chart:style-name::styleNameRef)? ;
text-page-attlist ::= text:master-page-name::styleNameRef ;
text-table-of-content-entry-template ::= text:table-of-content-entry-template::(text-table-of-content-entry-template-attlist text-table-of-content-children*) ;
draw-g ::= draw:g::(draw-g-attlist common-draw-z-index-attlist common-draw-name-attlist common-draw-id-attlist common-draw-style-name-attlist common-text-spreadsheet-shape-attlist office-event-listeners? draw-glue-point* shape*) ;
lineStyle ::= "none" | "solid" | "dotted" | "dash" | "long-dash" | "dot-dash" | "dot-dot-dash" | "wave" ;
common-draw-path-data-attlist ::= svg:d::pathData ;
table-named-range-attlist ::= table:name::string table:cell-range-address::cellRangeAddress (table:base-cell-address::cellAddress)? (table:range-usable-as::("none" | (("print-range" | "filter" | "repeat-row" | "repeat-column")+)))? ;
number-quarter-attlist ::= (number:style::("short" | "long"))? ;
draw-a ::= draw:a::(draw-a-attlist draw-frame) ;
table-filter-condition-attlist ::= table:field-number::nonNegativeInteger ;
 table-filter-condition-attlist ::= table:value::string ;
 table-filter-condition-attlist ::= table:operator::string ;
 table-filter-condition-attlist ::= (table:case-sensitive::string)? ;
 table-filter-condition-attlist ::= (table:data-type::("text" | "number"))? ;
table-previous ::= table:previous::((table:id::string)? table-change-track-table-cell) ;
common-draw-shape-with-text-and-styles-attlist ::= common-draw-shape-with-styles-attlist common-draw-text-style-name-attlist ;
number-text-style ::= number:text-style::(common-data-style-attlist style-text-properties? number-text? (number-text-content number-text?)* style-map*) ;
office-body ::= office:body::office-body-content ;
svg-font-face-uri ::= svg:font-face-uri::(common-svg-font-face-xlink-attlist svg-font-face-format*) ;
draw-g-attlist ::= (svg:y::coordinate)? ;
text-list-style-content ::= text:list-level-style-number::(text-list-level-style-attr text-list-level-style-number-attr style-list-level-properties? style-text-properties?) ;
 text-list-style-content ::= text:list-level-style-bullet::(text-list-level-style-attr text-list-level-style-bullet-attr style-list-level-properties? style-text-properties?) ;
 text-list-style-content ::= text:list-level-style-image::(text-list-level-style-attr text-list-level-style-image-attr style-list-level-properties?) ;
any-time ::= number-hours | number-am-pm | number-minutes | number-seconds ;
table-table-row-attlist ::= (table:number-rows-repeated::positiveInteger)? ;
 table-table-row-attlist ::= (table:style-name::styleNameRef)? ;
 table-table-row-attlist ::= (table:default-cell-style-name::styleNameRef)? ;
 table-table-row-attlist ::= (table:visibility::table-visibility-value)? ;
style-page-layout ::= style:page-layout::(style-page-layout-attlist style-page-layout-properties? style-header-style? style-footer-style?) ;
office-process-content ::= (office:process-content::boolean)? ;
form-date-attlist ::= (form:value::date)? ;
 form-date-attlist ::= (form:current-value::date)? ;
 form-date-attlist ::= (form:min-value::date)? ;
 form-date-attlist ::= (form:max-value::date)? ;
common-form-relative-image-position-attlist ::= ((form:image-position::"center")?) | (form:image-position::("start" | "end" | "top" | "bottom") (form:image-align::("start" | "center" | "end"))?) ;
table-insertion-cut-off ::= table:insertion-cut-off::table-insertion-cut-off-attlist ;
presentation-play ::= presentation:play::presentation-play-attlist ;
presentation-animations ::= presentation:animations::((presentation-animation-elements | presentation-animation-group)*) ;
style-header-footer-properties ::= style:header-footer-properties::style-header-footer-properties-content ;
common-value-attlist ::= (form:value::string)? ;
style-footnote-sep-attlist ::= (style:width::length)? (style:rel-width::percent)? (style:color::color)? (style:line-style::lineStyle)? (style:adjustment::("left" | "center" | "right"))? (style:distance-before-sep::length)? (style:distance-after-sep::length)? ;
table-first-row ::= table:first-row::common-table-template-attlist ;
text-list-header ::= text:list-header::text-list-item-content ;
style-list-level-properties-content ::= style-properties-content ;
style-page-layout-properties-content-strict ::= style-page-layout-properties-attlist style-page-layout-properties-elements ;
style-column-sep-attlist ::= (style:style::("none" | "solid" | "dotted" | "dashed" | "dot-dashed"))? ;
 style-column-sep-attlist ::= style:width::length ;
 style-column-sep-attlist ::= (style:height::percent)? ;
 style-column-sep-attlist ::= (style:vertical-align::("top" | "middle" | "bottom"))? ;
 style-column-sep-attlist ::= (style:color::color)? ;
text-user-index-entry-template ::= text:user-index-entry-template::(text-user-index-entry-template-attrs (text-index-entry-chapter | text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop)*) ;
table-database-source-table ::= table:database-source-query::table-database-source-query-attlist ;
table-table-cell-range-source-attlist ::= table:name::string ;
 table-table-cell-range-source-attlist ::= table:last-column-spanned::positiveInteger table:last-row-spanned::positiveInteger ;
common-form-control-attlist ::= (form:name::string)? ;
 common-form-control-attlist ::= (form:control-implementation::namespacedToken)? ;
common-svg-font-face-xlink-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? ;
draw-area-polygon ::= draw:area-polygon::(common-draw-area-attlist svg:x::coordinate svg:y::coordinate svg:width::length svg:height::length common-draw-viewbox-attlist common-draw-points-attlist svg-desc? office-event-listeners?) ;
chart-stock-gain-marker ::= chart:stock-gain-marker::common-stock-marker-attlist ;
office-forms ::= (office:forms::(office-forms-attlist (form-form | xforms-model)*))? ;
common-restart-timing-attlist ::= (smil:restart::("never" | "always" | "whenNotActive" | "default"))? ;
form-properties ::= form:properties::(form-property+) ;
common-maxlength-attlist ::= (form:max-length::nonNegativeInteger)? ;
draw-object-attlist ::= (draw:notify-on-update-of-ranges::string)? ;
common-rotation-angle-attlist ::= (style:rotation-angle::nonNegativeInteger)? ;
form-file-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist ;
common-readonly-attlist ::= (form:readonly::boolean)? ;
draw-measure ::= draw:measure::(draw-measure-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
draw-control ::= draw:control::(draw-control-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist draw-glue-point*) ;
table-table-column ::= table:table-column::table-table-column-attlist ;
text-sequence-ref-content ::= (text:reference-format::("page" | "chapter" | "direction" | "text" | "category-and-value" | "caption" | "value"))? ;
table-data-pilot-display-info ::= table:data-pilot-display-info::table-data-pilot-display-info-attlist ;
table-source-range-address ::= table:source-range-address::common-table-range-attlist ;
office-forms-attlist ::= (form:automatic-focus::boolean)? ;
 office-forms-attlist ::= (form:apply-design-mode::boolean)? ;
presentation-show ::= presentation:show::presentation-show-attlist ;
draw-plugin-attlist ::= (draw:mime-type::string())? ;
svg-stop ::= svg:stop::(svg:offset::(double | percent) (svg:stop-color::color)? (svg:stop-opacity::double)?) ;
table-named-expression ::= table:named-expression::table-named-expression-attlist ;
table-validation-attlist ::= table:name::string ;
 table-validation-attlist ::= (table:condition::string)? ;
 table-validation-attlist ::= (table:base-cell-address::cellAddress)? ;
 table-validation-attlist ::= (table:allow-empty-cell::boolean)? ;
 table-validation-attlist ::= (table:display-list::("none" | "unsorted" | "sort-ascending"))? ;
table-even-columns ::= table:even-columns::common-table-template-attlist ;
draw-page-thumbnail-attlist ::= (draw:page-number::positiveInteger)? ;
text-tab-attr ::= (text:tab-ref::nonNegativeInteger)? ;
text-style-name ::= (form:text-style-name::styleNameRef)? ;
text-table-of-content-source ::= text:table-of-content-source::(text-table-of-content-source-attlist text-index-title-template? text-table-of-content-entry-template* text-index-source-styles*) ;
form-hidden-attlist ::= form-control-attlist common-value-attlist ;
text-index-entry-tab-stop-attrs ::= (style:leader-char::character)? ;
 text-index-entry-tab-stop-attrs ::= (style:type::"right") | (style:type::"left" style:position::length) ;
table-source-cell-range ::= table:source-cell-range::(table-source-cell-range-attlist table-filter?) ;
fontFamilyGeneric ::= "roman" | "swiss" | "modern" | "decorative" | "script" | "system" ;
table-data-pilot-display-info-attlist ::= table:enabled::boolean ;
 table-data-pilot-display-info-attlist ::= table:data-field::string ;
 table-data-pilot-display-info-attlist ::= table:member-count::nonNegativeInteger ;
 table-data-pilot-display-info-attlist ::= table:display-member-mode::("from-top" | "from-bottom") ;
common-field-database-table-attlist ::= text:table-name::string ;
 common-field-database-table-attlist ::= (text:table-type::("table" | "query" | "command"))? ;
common-margin-attlist ::= (fo:margin::(nonNegativeLength | percent))? ;
custom-shape-type ::= "non-primitive" | string ;
common-spline-anim-value-attlist ::= (smil:keyTimes::string)? ;
 common-spline-anim-value-attlist ::= (smil:keySplines::string)? ;
table-odd-columns ::= table:odd-columns::common-table-template-attlist ;
common-draw-layer-name-attlist ::= (draw:layer::string())? ;
draw-rect-attlist ::= (draw:corner-radius::nonNegativeLength)? ;
chart-stock-loss-marker ::= chart:stock-loss-marker::common-stock-marker-attlist ;
common-field-display-value-formula-attlist ::= (text:display::("value" | "formula"))? ;
office-event-listeners ::= office:event-listeners::((script-event-listener | presentation-event-listener)*) ;
text-id ::= text:id::string ;
dr3d-sphere ::= dr3d:sphere::(dr3d-sphere-attlist common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-dr3d-transform-attlist) ;
text-table-of-content-source-attlist ::= (text:outline-level::positiveInteger)? ;
 text-table-of-content-source-attlist ::= (text:use-outline-level::boolean)? ;
 text-table-of-content-source-attlist ::= (text:use-index-marks::boolean)? ;
 text-table-of-content-source-attlist ::= (text:use-index-source-styles::boolean)? ;
 text-table-of-content-source-attlist ::= (text:index-scope::("document" | "chapter"))? ;
 text-table-of-content-source-attlist ::= (text:relative-tab-stop-position::boolean)? ;
style-text-properties ::= style:text-properties::style-text-properties-content ;
draw-equation ::= draw:equation::draw-equation-attlist ;
draw-object-ole-attlist ::= (draw:class-id::string())? ;
text-table-index-source ::= text:table-index-source::(text-illustration-index-source-attrs text-index-title-template? text-table-index-entry-template?) ;
office-automatic-styles ::= (office:automatic-styles::(styles style-page-layout*))? ;
animation-element ::= anim:animate::(common-anim-target-attlist common-anim-named-target-attlist common-anim-values-attlist common-anim-spline-mode-attlist common-spline-anim-value-attlist common-repeat-timing-attlist common-fill-timing-attlist common-anim-add-accum-attlist) ;
 animation-element ::= anim:set::(common-anim-target-attlist common-anim-named-target-attlist common-anim-set-values-attlist common-fill-timing-attlist common-anim-add-accum-attlist) ;
 animation-element ::= anim:animateMotion::(anim-animate-motion-attlist common-anim-target-attlist common-anim-named-target-attlist common-anim-add-accum-attlist common-anim-values-attlist common-fill-timing-attlist common-spline-anim-value-attlist) ;
 animation-element ::= anim:animateColor::(common-anim-target-attlist common-anim-named-target-attlist common-anim-add-accum-attlist common-anim-values-attlist common-anim-spline-mode-attlist common-spline-anim-value-attlist anim-animate-color-attlist common-fill-timing-attlist) ;
 animation-element ::= anim:animateTransform::(common-anim-target-attlist common-anim-named-target-attlist common-anim-add-accum-attlist common-anim-values-attlist anim-animate-transform-attlist common-fill-timing-attlist) ;
 animation-element ::= anim:transitionFilter::(common-anim-target-attlist common-anim-add-accum-attlist common-anim-values-attlist common-anim-spline-mode-attlist anim-transition-filter-attlist common-fill-timing-attlist) ;
 animation-element ::= anim:par::(common-anim-attlist common-timing-attlist common-endsync-timing-attlist animation-element*) ;
 animation-element ::= anim:seq::(common-anim-attlist common-endsync-timing-attlist common-timing-attlist) ;
 animation-element ::= anim:iterate::(common-anim-attlist anin-iterate-attlist common-timing-attlist common-endsync-timing-attlist animation-element*) ;
 animation-element ::= anim:audio::(common-anim-attlist anim-audio-attlist common-basic-timing-attlist) ;
 animation-element ::= anim:command::(common-anim-attlist anim-command-attlist common-begin-end-timing-attlist common-anim-target-attlist (anim:param::(anim:name::string() anim:value::string()))*) ;
draw-polygon ::= draw:polygon::(common-draw-points-attlist common-draw-position-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
anim-animate-color-attlist ::= (anim:color-interpolation::("rgb" | "hsl"))? ;
 anim-animate-color-attlist ::= (anim:color-interpolation-direction::("clockwise" | "counter-clockwise"))? ;
common-numeric-control-attlist ::= form-control-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-convert-empty-attlist common-data-field-attlist ;
office-image-content-epilogue ::= ε ;
style-section-properties-attlist ::= common-background-color-attlist ;
 style-section-properties-attlist ::= common-horizontal-margin-attlist ;
 style-section-properties-attlist ::= (style:protect::boolean)? ;
 style-section-properties-attlist ::= (text:dont-balance-text-columns::boolean)? ;
 style-section-properties-attlist ::= common-writing-mode-attlist ;
table-data-pilot-group ::= table:data-pilot-group::(table-data-pilot-group-attlist table-data-pilot-group-member+) ;
table-label-range ::= table:label-range::table-label-range-attlist ;
number-boolean ::= number:boolean::ε ;
form-radio-attlist ::= form-control-attlist current-selected common-disabled-attlist label common-printable-attlist selected common-tab-attlist common-title-attlist common-value-attlist common-data-field-attlist common-form-visual-effect-attlist common-form-relative-image-position-attlist ;
dr3d-cube ::= dr3d:cube::(dr3d-cube-attlist common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-dr3d-transform-attlist) ;
form-grid-attlist ::= form-control-attlist common-disabled-attlist common-printable-attlist common-tab-attlist common-title-attlist ;
table-scenario-attlist ::= table:scenario-ranges::cellRangeAddressList ;
 table-scenario-attlist ::= table:is-active::boolean ;
 table-scenario-attlist ::= (table:display-border::boolean)? ;
 table-scenario-attlist ::= (table:border-color::color)? ;
 table-scenario-attlist ::= (table:copy-back::boolean)? ;
 table-scenario-attlist ::= (table:copy-styles::boolean)? ;
 table-scenario-attlist ::= (table:copy-formulas::boolean)? ;
 table-scenario-attlist ::= (table:comment::string)? ;
 table-scenario-attlist ::= (table:protected::boolean)? ;
textEncoding ::= string() ;
common-control-id-attlist ::= form:id::ID ;
number-week-of-year ::= number:week-of-year::common-calendar-attlist ;
form-option ::= form:option::(form-option-attlist string()) ;
table-data-pilot-level-attlist ::= (table:show-empty::boolean)? ;
style-footer-style ::= style:footer-style::(style-header-footer-properties?) ;
presentation-event-listener ::= presentation:event-listener::(presentation-event-listener-attlist presentation-sound?) ;
draw-gradient ::= draw:gradient::(common-draw-gradient-attlist draw-gradient-attlist) ;
office-text-content-epilogue ::= table-functions ;
text-outline-level ::= (text:outline-level::positiveInteger)? ;
common-background-color-attlist ::= (fo:background-color::("transparent" | color))? ;
table-data-pilot-group-attlist ::= table:name::string ;
draw-frame-attlist ::= (draw:copy-of::string)? ;
common-restart-default-attlist ::= (smil:restartDefault::("never" | "always" | "whenNotActive" | "inherit"))? ;
chart-domain ::= chart:domain::((table:cell-range-address::cellRangeAddress)?) ;
table-data-pilot-group-member-attlist ::= table:name::string ;
form-option-attlist ::= current-selected selected label common-value-attlist ;
office-text-attlist ::= (text:global::boolean)? ;
style-paragraph-properties ::= style:paragraph-properties::style-paragraph-properties-content ;
table-table-row-group ::= table:table-row-group::(table-table-row-group-attlist table-rows-and-groups) ;
text-file-name-attlist ::= (text:display::("full" | "path" | "name" | "name-and-extension"))? ;
 text-file-name-attlist ::= common-field-fixed-attlist ;
text-illustration-index-entry-template ::= text:illustration-index-entry-template::text-illustration-index-entry-content ;
presentation-event-listener-attlist ::= script:event-name::string ;
 presentation-event-listener-attlist ::= presentation:action::("none" | "previous-page" | "next-page" | "first-page" | "last-page" | "hide" | "stop" | "execute" | "show" | "verb" | "fade-out" | "sound") ;
 presentation-event-listener-attlist ::= (presentation:effect::presentationEffects)? ;
 presentation-event-listener-attlist ::= (presentation:direction::presentationEffectDirections)? ;
 presentation-event-listener-attlist ::= (presentation:speed::presentationSpeeds)? ;
 presentation-event-listener-attlist ::= (presentation:start-scale::percent)? ;
 presentation-event-listener-attlist ::= (xlink:href::anyURI)? (xlink:type::"simple")? (xlink:show::"embed")? (xlink:actuate::"onRequest")? ;
 presentation-event-listener-attlist ::= (presentation:verb::nonNegativeInteger)? ;
common-fill-default-attlist ::= (smil:fillDefault::("remove" | "freeze" | "hold" | "transition" | "auto" | "inherit"))? ;
nonNegativePixelLength ::= string() ;
office-chart-content-epilogue ::= table-functions ;
common-form-visual-effect-attlist ::= (form:visual-effect::("flat" | "3d"))? ;
horizontal-mirror ::= "horizontal" | "horizontal-on-odd" | "horizontal-on-even" ;
header-footer-content ::= (text-decls (text-h | text-p | text-list | table-table | text-section | text-table-of-content | text-illustration-index | text-table-index | text-object-index | text-user-index | text-alphabetical-index | text-bibliography | text-index-title | change-marks)*) | (style-region-left? style-region-center? style-region-right?) ;
style-page-layout-properties-attlist ::= (fo:page-width::length)? (fo:page-height::length)? ;
 style-page-layout-properties-attlist ::= common-num-format-attlist? common-num-format-prefix-suffix-attlist ;
 style-page-layout-properties-attlist ::= (style:paper-tray-name::("default" | string))? ;
 style-page-layout-properties-attlist ::= (style:print-orientation::("portrait" | "landscape"))? ;
 style-page-layout-properties-attlist ::= common-horizontal-margin-attlist common-vertical-margin-attlist common-margin-attlist ;
 style-page-layout-properties-attlist ::= common-border-attlist ;
 style-page-layout-properties-attlist ::= common-border-line-width-attlist ;
 style-page-layout-properties-attlist ::= common-padding-attlist ;
 style-page-layout-properties-attlist ::= common-shadow-attlist ;
 style-page-layout-properties-attlist ::= common-background-color-attlist ;
 style-page-layout-properties-attlist ::= (style:register-truth-ref-style-name::styleNameRef)? ;
 style-page-layout-properties-attlist ::= (style:print::(("headers" | "grid" | "annotations" | "objects" | "charts" | "drawings" | "formulas" | "zero-values")*))? ;
 style-page-layout-properties-attlist ::= (style:print-page-order::("ttb" | "ltr"))? ;
 style-page-layout-properties-attlist ::= (style:first-page-number::(positiveInteger | "continue"))? ;
 style-page-layout-properties-attlist ::= (style:scale-to::percent)? (style:scale-to-pages::positiveInteger)? ;
 style-page-layout-properties-attlist ::= (style:table-centering::("horizontal" | "vertical" | "both" | "none"))? ;
 style-page-layout-properties-attlist ::= (style:footnote-max-height::length)? ;
 style-page-layout-properties-attlist ::= common-writing-mode-attlist ;
 style-page-layout-properties-attlist ::= (style:layout-grid-mode::("none" | "line" | "both"))? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-base-height::length)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-ruby-height::length)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-lines::positiveInteger)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-color::color)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-ruby-below::boolean)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-print::boolean)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-display::boolean)? ;
draw-text-box-attlist ::= (draw:chain-next-name::string)? ;
 draw-text-box-attlist ::= (draw:corner-radius::nonNegativeLength)? ;
 draw-text-box-attlist ::= (fo:min-height::(length | percent))? (fo:min-width::(length | percent))? ;
 draw-text-box-attlist ::= (fo:max-height::(length | percent))? (fo:max-width::(length | percent))? ;
tab-cycles ::= "records" | "current" | "page" ;
table-error-message ::= table:error-message::((table:title::string)? (table:display::boolean)? (table:message-type::("stop" | "warning" | "information"))? text-p*) ;
style-table-row-properties ::= style:table-row-properties::style-table-row-properties-content ;
style-paragraph-properties-attlist ::= (fo:line-height::("normal" | nonNegativeLength | percent))? ;
 style-paragraph-properties-attlist ::= (style:line-height-at-least::nonNegativeLength)? ;
 style-paragraph-properties-attlist ::= (style:line-spacing::length)? ;
 style-paragraph-properties-attlist ::= (style:font-independent-line-spacing::boolean)? ;
 style-paragraph-properties-attlist ::= common-text-align ;
 style-paragraph-properties-attlist ::= (fo:text-align-last::("start" | "center" | "justify"))? ;
 style-paragraph-properties-attlist ::= (style:justify-single-word::boolean)? ;
 style-paragraph-properties-attlist ::= (fo:keep-together::("auto" | "always"))? ;
 style-paragraph-properties-attlist ::= (fo:widows::nonNegativeInteger)? ;
 style-paragraph-properties-attlist ::= (fo:orphans::nonNegativeInteger)? ;
 style-paragraph-properties-attlist ::= (style:tab-stop-distance::nonNegativeLength)? ;
 style-paragraph-properties-attlist ::= (fo:hyphenation-keep::("auto" | "page"))? ;
 style-paragraph-properties-attlist ::= (fo:hyphenation-ladder-count::("no-limit" | positiveInteger))? ;
 style-paragraph-properties-attlist ::= (style:register-true::boolean)? ;
 style-paragraph-properties-attlist ::= common-horizontal-margin-attlist ;
 style-paragraph-properties-attlist ::= (fo:text-indent::(length | percent))? ;
 style-paragraph-properties-attlist ::= (style:auto-text-indent::boolean)? ;
 style-paragraph-properties-attlist ::= common-vertical-margin-attlist ;
 style-paragraph-properties-attlist ::= common-margin-attlist ;
 style-paragraph-properties-attlist ::= common-break-attlist ;
 style-paragraph-properties-attlist ::= common-background-color-attlist ;
 style-paragraph-properties-attlist ::= common-border-attlist ;
 style-paragraph-properties-attlist ::= common-border-line-width-attlist ;
 style-paragraph-properties-attlist ::= common-padding-attlist ;
 style-paragraph-properties-attlist ::= common-shadow-attlist ;
 style-paragraph-properties-attlist ::= common-keep-with-next-attlist ;
 style-paragraph-properties-attlist ::= (text:number-lines::boolean)? ;
 style-paragraph-properties-attlist ::= (text:line-number::nonNegativeInteger)? ;
 style-paragraph-properties-attlist ::= (style:text-autospace::("none" | "ideograph-alpha"))? ;
 style-paragraph-properties-attlist ::= (style:punctuation-wrap::("simple" | "hanging"))? ;
 style-paragraph-properties-attlist ::= (style:line-break::("normal" | "strict"))? ;
 style-paragraph-properties-attlist ::= (style:vertical-align::("top" | "middle" | "bottom" | "auto"))? ;
 style-paragraph-properties-attlist ::= common-writing-mode-attlist ;
 style-paragraph-properties-attlist ::= (style:writing-mode-automatic::boolean)? ;
 style-paragraph-properties-attlist ::= (style:snap-to-layout-grid::boolean)? ;
 style-paragraph-properties-attlist ::= common-page-number-attlist ;
 style-paragraph-properties-attlist ::= (style:background-transparency::percent)? ;
draw-regular-polygon ::= draw:regular-polygon::(draw-regular-polygon-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
table-table-row-group-attlist ::= (table:display::boolean)? ;
common-border-line-width-attlist ::= (style:border-line-width::borderWidths)? (style:border-line-width-top::borderWidths)? (style:border-line-width-bottom::borderWidths)? (style:border-line-width-left::borderWidths)? (style:border-line-width-right::borderWidths)? ;
office-presentation-attlist ::= ε ;
vertBackPos ::= "top" | "center" | "bottom" ;
draw-layer-attlist ::= draw:name::string ;
 draw-layer-attlist ::= (draw:protected::boolean)? ;
 draw-layer-attlist ::= (draw:display::("always" | "screen" | "printer" | "none"))? ;
draw-circle ::= draw:circle::(draw-circle-attlist common-draw-circle-ellipse-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
IDREF ::= string() ;
draw-page ::= draw:page::(common-presentation-header-footer-attlist draw-page-attlist office-forms? shape* (presentation-animations | animation-element)? presentation-notes?) ;
presentation-settings ::= (presentation:settings::(presentation-settings-attlist presentation-show*))? ;
config-items ::= (config-config-item | config-config-item-set | config-config-item-map-named | config-config-item-map-indexed)+ ;
style-text-properties-content-strict ::= style-text-properties-attlist style-text-properties-elements ;
text-table-index ::= text:table-index::(sectionAttr text-table-index-source text-index-body) ;
pathData ::= string() ;
text-outline-level-style-attlist ::= text:level::positiveInteger ;
 text-outline-level-style-attlist ::= (text:style-name::styleNameRef)? ;
 text-outline-level-style-attlist ::= common-num-format-attlist common-num-format-prefix-suffix-attlist ;
 text-outline-level-style-attlist ::= (text:display-levels::positiveInteger)? ;
 text-outline-level-style-attlist ::= (text:start-value::positiveInteger)? ;
table-data-pilot-subtotal-attlist ::= table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string) ;
common-anim-values-attlist ::= (smil:values::string)? ;
 common-anim-values-attlist ::= (anim:formula::string)? ;
 common-anim-values-attlist ::= common-anim-set-values-attlist (smil:from::string)? (smil:by::string)? ;
table-table-template-attlist ::= text:name::string ;
 table-table-template-attlist ::= text:first-row-start-column::rowOrCol ;
 table-table-template-attlist ::= text:first-row-end-column::rowOrCol ;
 table-table-template-attlist ::= text:last-row-start-column::rowOrCol ;
 table-table-template-attlist ::= text:last-row-end-column::rowOrCol ;
office-text-content-prelude ::= office-forms text-tracked-changes text-decls table-decls ;
draw-hatch-attlist ::= draw:name::styleName ;
 draw-hatch-attlist ::= (draw:display-name::string)? ;
 draw-hatch-attlist ::= draw:style::("single" | "double" | "triple") ;
 draw-hatch-attlist ::= (draw:color::color)? ;
 draw-hatch-attlist ::= (draw:distance::length)? ;
 draw-hatch-attlist ::= (draw:rotation::integer)? ;
presentation-settings-attlist ::= (presentation:start-page::string)? ;
 presentation-settings-attlist ::= (presentation:show::string)? ;
 presentation-settings-attlist ::= (presentation:full-screen::boolean)? ;
 presentation-settings-attlist ::= (presentation:endless::boolean)? ;
 presentation-settings-attlist ::= (presentation:pause::duration)? ;
 presentation-settings-attlist ::= (presentation:show-logo::boolean)? ;
 presentation-settings-attlist ::= (presentation:force-manual::boolean)? ;
 presentation-settings-attlist ::= (presentation:mouse-visible::boolean)? ;
 presentation-settings-attlist ::= (presentation:mouse-as-pen::boolean)? ;
 presentation-settings-attlist ::= (presentation:start-with-navigator::boolean)? ;
 presentation-settings-attlist ::= (presentation:animations::("enabled" | "disabled"))? ;
 presentation-settings-attlist ::= (presentation:transition-on-click::("enabled" | "disabled"))? ;
 presentation-settings-attlist ::= (presentation:stay-on-top::boolean)? ;
dr3d-light ::= dr3d:light::dr3d-light-attlist ;
common-draw-shape-with-styles-attlist ::= common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-draw-transform-attlist common-draw-name-attlist common-text-spreadsheet-shape-attlist ;
number-day-of-week-attlist ::= (number:style::("short" | "long"))? ;
number-and-text ::= number-number number-text? ;
common-keep-with-next-attlist ::= (fo:keep-with-next::("auto" | "always"))? ;
languageCode ::= string() ;
common-text-anchor-attlist ::= (text:anchor-type::("page" | "frame" | "paragraph" | "char" | "as-char"))? ;
 common-text-anchor-attlist ::= (text:anchor-page-number::positiveInteger)? ;
common-field-num-format-attlist ::= common-num-format-attlist? ;
presentation-show-shape ::= presentation:show-shape::(common-presentation-effect-attlist presentation-sound?) ;
table-sort-groups ::= table:sort-groups::table-sort-groups-attlist ;
text-object-index ::= text:object-index::(sectionAttr text-object-index-source text-index-body) ;
table-insertion-attlist ::= table:type::("row" | "column" | "table") ;
 table-insertion-attlist ::= table:position::integer ;
 table-insertion-attlist ::= (table:count::positiveInteger)? ;
 table-insertion-attlist ::= (table:table::integer)? ;
table-filter-and ::= table:filter-and::((table-filter-or | table-filter-condition)+) ;
office-document-common-attrs ::= (office:version::string)? ;
common-draw-style-name-attlist ::= ((draw:style-name::styleNameRef)? (draw:class-names::styleNameRefs)?) | ((presentation:style-name::styleNameRef)? (presentation:class-names::styleNameRefs)?) ;
text-bibliography-configuration-attlist ::= (text:prefix::string)? (text:suffix::string)? ;
 text-bibliography-configuration-attlist ::= (text:numbered-entries::boolean)? ;
 text-bibliography-configuration-attlist ::= (text:sort-by-position::boolean)? (fo:language::languageCode)? (fo:country::countryCode)? (text:sort-algorithm::string)? ;
chart-floor ::= chart:floor::chart-floor-attlist ;
office-master-styles ::= (office:master-styles::(style-master-page* style-handout-master? draw-layer-set?))? ;
table-table-header-rows ::= table:table-header-rows::(table-table-row+) ;
text-list-level-style-image-attr ::= common-draw-data-attlist | office-binary-data ;
table-movement-cut-off-attlist ::= (table:position::integer) | (table:start-position::integer table:end-position::integer) ;
style-table-column-properties-elements ::= ε ;
table-table-cell-attlist ::= (table:number-columns-repeated::positiveInteger)? ;
 table-table-cell-attlist ::= (table:style-name::styleNameRef)? ;
 table-table-cell-attlist ::= (table:content-validation-name::string)? ;
 table-table-cell-attlist ::= (table:formula::string)? ;
 table-table-cell-attlist ::= common-value-and-type-attlist? ;
 table-table-cell-attlist ::= (table:protect::boolean)? ;
style-list-level-properties ::= style:list-level-properties::style-list-level-properties-content ;
lineType ::= "none" | "single" | "double" ;
number-minutes-attlist ::= (number:style::("short" | "long"))? ;
table-change-deletion ::= table:change-deletion::((table:id::string)?) ;
timeOrDateTime ::= string() ;
table-data-pilot-layout-info-attlist ::= table:layout-mode::("tabular-layout" | "outline-subtotals-top" | "outline-subtotals-bottom") ;
 table-data-pilot-layout-info-attlist ::= table:add-empty-lines::boolean ;
table-filter-attlist ::= (table:target-range-address::cellRangeAddress)? ;
 table-filter-attlist ::= (table:condition-source::("self" | "cell-range"))? ;
 table-filter-attlist ::= (table:condition-source-range-address::cellRangeAddress)? ;
 table-filter-attlist ::= (table:display-duplicates::boolean)? ;
draw-ellipse-attlist ::= (svg:rx::length svg:ry::length)? ;
table-table-column-group ::= table:table-column-group::(table-table-column-group-attlist table-columns-and-groups) ;
text-index-entry-link-start ::= text:index-entry-link-start::((text:style-name::styleNameRef)?) ;
common-convert-empty-attlist ::= (form:convert-empty-to-null::boolean)? ;
table-last-row ::= table:last-row::common-table-template-attlist ;
style-style-content ::= style:family::"text" style-text-properties? ;
 style-style-content ::= style:family::"paragraph" style-paragraph-properties? style-text-properties? ;
 style-style-content ::= style:family::"section" style-section-properties? ;
 style-style-content ::= style:family::"ruby" style-ruby-properties? ;
 style-style-content ::= style:family::"table" style-table-properties? ;
 style-style-content ::= style:family::"table-column" style-table-column-properties? ;
 style-style-content ::= style:family::"table-row" style-table-row-properties? ;
 style-style-content ::= style:family::"table-cell" style-table-cell-properties? style-paragraph-properties? style-text-properties? ;
 style-style-content ::= style:family::("graphic" | "presentation") style-graphic-properties? style-paragraph-properties? style-text-properties? ;
 style-style-content ::= style:family::"drawing-page" style-drawing-page-properties? ;
 style-style-content ::= style:family::"chart" style-chart-properties? style-graphic-properties? style-paragraph-properties? style-text-properties? ;
common-format-source-attlist ::= (number:format-source::("fixed" | "language"))? ;
table-change-track-table-cell ::= table:change-track-table-cell::(table-change-track-table-cell-attlist text-p*) ;
text-list ::= text:list::(text-list-attr text-list-header? text-list-item*) ;
common-table-cell-address-attlist ::= table:column::integer table:row::integer table:table::integer ;
common-anim-set-values-attlist ::= (smil:to::string)? ;
table-table-column-group-attlist ::= (table:display::boolean)? ;
style-footer ::= style:footer::(common-style-header-footer-attlist header-footer-content) ;
fontVariant ::= "normal" | "small-caps" ;
text-bibliography-entry-template-attrs ::= text:bibliography-type::text-bibliography-types ;
 text-bibliography-entry-template-attrs ::= text:style-name::styleNameRef ;
number-year-attlist ::= (number:style::("short" | "long"))? ;
svg-font-face-format ::= svg:font-face-format::((svg:string::string())?) ;
style-map-attlist ::= style:condition::string ;
 style-map-attlist ::= style:apply-style-name::styleNameRef ;
 style-map-attlist ::= (style:base-cell-address::cellAddress)? ;
number-text ::= number:text::string() ;
text-index-entry-tab-stop ::= text:index-entry-tab-stop::((text:style-name::styleNameRef)? text-index-entry-tab-stop-attrs) ;
table-sort-attlist ::= (table:bind-styles-to-content::boolean)? ;
 table-sort-attlist ::= (table:target-range-address::cellRangeAddress)? ;
 table-sort-attlist ::= (table:case-sensitive::boolean)? ;
 table-sort-attlist ::= (table:language::languageCode)? ;
 table-sort-attlist ::= (table:country::countryCode)? ;
 table-sort-attlist ::= (table:algorithm::string)? ;
chart-chart ::= chart:chart::(chart-chart-attlist chart-title? chart-subtitle? chart-footer? chart-legend? chart-plot-area table-table?) ;
style-table-properties ::= style:table-properties::style-table-properties-content ;
office-spreadsheet-attlist ::= (table:structure-protected::boolean)? (table:protection-key::string)? ;
style-chart-properties-content-strict ::= style-chart-properties-attlist style-chart-properties-elements ;
style-header-left ::= style:header-left::(common-style-header-footer-attlist header-footer-content) ;
common-value-type-attlist ::= office:value-type::valueType ;
table-rows-no-group ::= (table-rows (table-table-header-rows table-rows?)?) | (table-table-header-rows table-rows?) ;
common-field-database-name ::= (text:database-name::string)? ;
 common-field-database-name ::= form-connection-resource ;
chart-subtitle ::= chart:subtitle::(chart-title-attlist text-p?) ;
table-filter-condition ::= table:filter-condition::table-filter-condition-attlist ;
style-region-left ::= style:region-left::region-content ;
common-draw-position-attlist ::= (svg:x::coordinate)? (svg:y::coordinate)? ;
common-padding-attlist ::= (fo:padding::nonNegativeLength)? (fo:padding-top::nonNegativeLength)? (fo:padding-bottom::nonNegativeLength)? (fo:padding-left::nonNegativeLength)? (fo:padding-right::nonNegativeLength)? ;
draw-contour-path ::= draw:contour-path::(common-contour-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-path-data-attlist) ;
style-table-properties-attlist ::= (style:width::positiveLength)? (style:rel-width::percent)? ;
 style-table-properties-attlist ::= (table:align::("left" | "center" | "right" | "margins"))? ;
 style-table-properties-attlist ::= common-horizontal-margin-attlist ;
 style-table-properties-attlist ::= common-vertical-margin-attlist ;
 style-table-properties-attlist ::= common-margin-attlist ;
 style-table-properties-attlist ::= common-page-number-attlist ;
 style-table-properties-attlist ::= common-break-attlist ;
 style-table-properties-attlist ::= common-background-color-attlist ;
 style-table-properties-attlist ::= common-shadow-attlist ;
 style-table-properties-attlist ::= common-keep-with-next-attlist ;
 style-table-properties-attlist ::= (style:may-break-between-rows::boolean)? ;
 style-table-properties-attlist ::= (table:border-model::("collapsing" | "separating"))? ;
 style-table-properties-attlist ::= common-writing-mode-attlist ;
 style-table-properties-attlist ::= (table:display::boolean)? ;
text-alphabetical-index-source-attrs ::= text-index-scope-attr text-relative-tab-stop-position-attr ;
 text-alphabetical-index-source-attrs ::= (text:ignore-case::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:main-entry-style-name::styleNameRef)? ;
 text-alphabetical-index-source-attrs ::= (text:alphabetical-separators::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:combine-entries::boolean)? (text:combine-entries-with-dash::boolean)? (text:combine-entries-with-pp::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:use-keys-as-entries::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:capitalize-entries::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:comma-separated::boolean)? ;
 text-alphabetical-index-source-attrs ::= (fo:language::languageCode)? ;
 text-alphabetical-index-source-attrs ::= (fo:country::countryCode)? ;
 text-alphabetical-index-source-attrs ::= (text:sort-algorithm::string)? ;
text-list-attr ::= (text:style-name::styleNameRef)? ;
 text-list-attr ::= (text:continue-numbering::boolean)? ;
form-form-attlist ::= (xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")?)? ;
 form-form-attlist ::= (office:target-frame::targetFrameName)? ;
 form-form-attlist ::= (form:method::("get" | "post" | string))? ;
 form-form-attlist ::= (form:enctype::string)? ;
 form-form-attlist ::= (form:allow-deletes::boolean)? ;
 form-form-attlist ::= (form:allow-inserts::boolean)? ;
 form-form-attlist ::= (form:allow-updates::boolean)? ;
 form-form-attlist ::= (form:apply-filter::boolean)? ;
 form-form-attlist ::= (form:command-type::("table" | "query" | "command"))? ;
 form-form-attlist ::= (form:command::string())? ;
 form-form-attlist ::= (form:datasource::(anyURI | string))? ;
 form-form-attlist ::= (form:master-fields::string)? ;
 form-form-attlist ::= (form:detail-fields::string)? ;
 form-form-attlist ::= (form:escape-processing::boolean)? ;
 form-form-attlist ::= (form:filter::string)? ;
 form-form-attlist ::= (form:ignore-result::boolean)? ;
 form-form-attlist ::= (form:navigation-mode::navigation)? ;
 form-form-attlist ::= (form:order::string)? ;
 form-form-attlist ::= (form:tab-cycle::tab-cycles)? ;
table-table-columns ::= table:table-columns::(table-table-column+) ;
text-tracked-changes-attr ::= (text:track-changes::boolean)? ;
style-table-properties-content-strict ::= style-table-properties-attlist style-table-properties-elements ;
ID ::= string() ;
table-table-header-columns ::= table:table-header-columns::(table-table-column+) ;
table-help-message ::= table:help-message::((table:title::string)? (table:display::boolean)? text-p*) ;
table-filter-or ::= table:filter-or::((table-filter-and | table-filter-condition)+) ;
common-printable-attlist ::= (form:printable::boolean)? ;
heading-attrs ::= text:outline-level::positiveInteger ;
 heading-attrs ::= (text:restart-numbering::boolean)? ;
 heading-attrs ::= (text:start-value::nonNegativeInteger)? ;
 heading-attrs ::= (text:is-list-header::boolean)? ;
form-frame-attlist ::= form-control-attlist common-disabled-attlist for label common-printable-attlist common-title-attlist ;
table-data-pilot-sort-info-attlist ::= (table:sort-mode::"data" table:data-field::string) | (table:sort-mode::("none" | "manual" | "name")) ;
 table-data-pilot-sort-info-attlist ::= table:order::("ascending" | "descending") ;
common-time-manip-attlist ::= (smil:accelerate::double)? ;
 common-time-manip-attlist ::= (smil:decelerate::double)? ;
 common-time-manip-attlist ::= (smil:autoReverse::boolean)? ;
form-textarea-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist ;
text-numbered-paragraph-attr ::= (text:level::positiveInteger)? ;
 text-numbered-paragraph-attr ::= text-list-attr ;
 text-numbered-paragraph-attr ::= text-list-item-attr ;
draw-glue-point-attlist ::= draw:id::nonNegativeInteger ;
 draw-glue-point-attlist ::= svg:x::(distance | percent) svg:y::(distance | percent) ;
 draw-glue-point-attlist ::= draw:align::("top-left" | "top" | "top-right" | "left" | "center" | "right" | "bottom-left" | "bottom-right") ;
table-data-pilot-field-attlist ::= table:source-field-name::string ;
 table-data-pilot-field-attlist ::= (table:orientation::("row" | "column" | "data" | "hidden")) | (table:orientation::"page" table:selected-page::string) ;
 table-data-pilot-field-attlist ::= (table:is-data-layout-field::string)? ;
 table-data-pilot-field-attlist ::= (table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string))? ;
 table-data-pilot-field-attlist ::= (table:used-hierarchy::integer)? ;
office-styles ::= (office:styles::(styles style-default-style* text-outline-style? text-notes-configuration* text-bibliography-configuration? text-linenumbering-configuration? draw-gradient* svg-linearGradient* svg-radialGradient* draw-hatch* draw-fill-image* draw-marker* draw-stroke-dash* draw-opacity* style-presentation-page-layout*))? ;
style-drawing-page-properties-content ::= style-properties-content ;
common-draw-viewbox-attlist ::= svg:viewBox::(integer integer integer integer) ;
namespacedToken ::= string() ;
table-table ::= table:table::(table-table-attlist table-table-source? office-dde-source? table-scenario? office-forms? table-shapes? table-columns-and-groups table-rows-and-groups) ;
style-footnote-sep ::= (style:footnote-sep::style-footnote-sep-attlist)? ;
style-header-style ::= style:header-style::(style-header-footer-properties?) ;
anim-audio-attlist ::= (xlink:href::anyURI)? ;
 anim-audio-attlist ::= (anim:audio-level::double)? ;
office-document ::= office:document::(office-document-attrs office-document-common-attrs office-meta office-settings office-scripts office-font-face-decls office-styles office-automatic-styles office-master-styles office-body) ;
number-day-attlist ::= (number:style::("short" | "long"))? ;
office-drawing-content-epilogue ::= table-functions ;
common-horizontal-margin-attlist ::= (fo:margin-left::(length | percent))? (fo:margin-right::(length | percent))? ;
text-page-continuation-attlist ::= text:select-page::("previous" | "next") ;
 text-page-continuation-attlist ::= (text:string-value::string)? ;
text-user-index-entry-template-attrs ::= text:outline-level::positiveInteger ;
 text-user-index-entry-template-attrs ::= text:style-name::styleNameRef ;
text-illustration-index-entry-content ::= text-illustration-index-entry-template-attrs (text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop)* ;
positiveInteger ::= integer() ;
common-anim-add-accum-attlist ::= (smil:accumulate::("none" | "sum"))? ;
 common-anim-add-accum-attlist ::= (smil:additive::("replace" | "sum"))? ;
draw-applet ::= draw:applet::(draw-applet-attlist common-draw-data-attlist? draw-param*) ;
text-database-display-attlist ::= common-field-database-table ;
 text-database-display-attlist ::= common-field-data-style-name-attlist ;
 text-database-display-attlist ::= text:column-name::string ;
number-embedded-text-attlist ::= number:position::integer ;
style-master-page ::= style:master-page::(style-master-page-attlist (style-header style-header-left?)? (style-footer style-footer-left?)? office-forms? style-style* shape* presentation-notes?) ;
style-handout-master-attlist ::= (presentation:presentation-page-layout-name::styleNameRef)? ;
 style-handout-master-attlist ::= style:page-layout-name::styleNameRef ;
 style-handout-master-attlist ::= (draw:style-name::styleNameRef)? ;
text-linenumbering-separator ::= text:linenumbering-separator::((text:increment::nonNegativeInteger)? string()) ;
text-index-title ::= text:index-title::(sectionAttr index-content-main*) ;
text-common-ref-content ::= string() ;
 text-common-ref-content ::= (text:ref-name::string)? ;
office-script ::= office:script::(office-script-attlist string()? anyElements string()?) ;
text-alphabetical-index-entry-template-attrs ::= text:outline-level::("1" | "2" | "3" | "separator") ;
 text-alphabetical-index-entry-template-attrs ::= text:style-name::styleNameRef ;
presentation-play-attlist ::= draw:shape-id::IDREF (presentation:speed::presentationSpeeds)? ;
table-insertion-cut-off-attlist ::= table:id::string ;
 table-insertion-cut-off-attlist ::= table:position::integer ;
svg-radialGradient ::= svg:radialGradient::(common-svg-gradient-attlist (svg:cx::(coordinate | percent))? (svg:cy::(coordinate | percent))? (svg:r::(coordinate | percent))? (svg:fx::(coordinate | percent))? (svg:fy::(coordinate | percent))? svg-stop*) ;
common-anim-spline-mode-attlist ::= (smil:calcMode::("discrete" | "linear" | "paced" | "spline"))? ;
table-cell-range-source ::= table:cell-range-source::(table-table-cell-range-source-attlist table-linked-source-attlist) ;
draw-connector-attlist ::= (draw:type::("standard" | "lines" | "line" | "curve"))? ;
 draw-connector-attlist ::= (svg:x1::coordinate svg:y1::coordinate)? ;
 draw-connector-attlist ::= (draw:start-shape::IDREF)? ;
 draw-connector-attlist ::= (draw:start-glue-point::nonNegativeInteger)? ;
 draw-connector-attlist ::= (svg:x2::coordinate svg:y2::coordinate)? ;
 draw-connector-attlist ::= (draw:end-shape::IDREF)? ;
 draw-connector-attlist ::= (draw:end-glue-point::nonNegativeInteger)? ;
 draw-connector-attlist ::= (draw:line-skew::(length (length length?)?))? ;
table-highlighted-range-attlist ::= (table:cell-range-address::cellRangeAddress)? ;
 table-highlighted-range-attlist ::= table:direction::("from-another-table" | "to-another-table" | "from-same-table") ;
 table-highlighted-range-attlist ::= (table:contains-error::boolean)? ;
button-type ::= (form:button-type::types)? ;
table-null-date ::= table:null-date::((table:value-type::valueType)? (table:date-value-type::date)?) ;
svg-definition-src ::= svg:definition-src::common-svg-font-face-xlink-attlist ;
style-master-page-attlist ::= style:name::styleName ;
 style-master-page-attlist ::= (style:display-name::string)? ;
 style-master-page-attlist ::= style:page-layout-name::styleNameRef ;
 style-master-page-attlist ::= (draw:style-name::styleNameRef)? ;
 style-master-page-attlist ::= (style:next-style-name::styleNameRef)? ;
text-user-index ::= text:user-index::(sectionAttr text-user-index-source text-index-body) ;
number-month-attlist ::= (number:textual::boolean)? ;
 number-month-attlist ::= (number:possessive-form::boolean)? ;
 number-month-attlist ::= (number:style::("short" | "long"))? ;
chart-data-point-attlist ::= (chart:repeated::nonNegativeInteger)? ;
 chart-data-point-attlist ::= (chart:style-name::styleNameRef)? ;
text-index-entry-bibliography-attrs ::= (text:style-name::styleNameRef)? ;
 text-index-entry-bibliography-attrs ::= text:bibliography-data-field::("address" | "annote" | "author" | "bibliography-type" | "booktitle" | "chapter" | "custom1" | "custom2" | "custom3" | "custom4" | "custom5" | "edition" | "editor" | "howpublished" | "identifier" | "institution" | "isbn" | "issn" | "journal" | "month" | "note" | "number" | "organizations" | "pages" | "publisher" | "report-type" | "school" | "series" | "title" | "url" | "volume" | "year") ;
dateOrDateTime ::= string() ;
text-table-of-content-children ::= text-index-entry-chapter | text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop | text-index-entry-link-start | text-index-entry-link-end ;
draw-marker ::= draw:marker::(draw-marker-attlist common-draw-viewbox-attlist common-draw-path-data-attlist) ;
common-data-style-attlist ::= style:name::styleName ;
 common-data-style-attlist ::= (number:language::languageCode)? ;
 common-data-style-attlist ::= (number:country::countryCode)? ;
 common-data-style-attlist ::= (number:title::string())? ;
 common-data-style-attlist ::= (style:volatile::boolean)? ;
 common-data-style-attlist ::= (number:transliteration-format::string)? ;
 common-data-style-attlist ::= (number:transliteration-language::countryCode)? ;
 common-data-style-attlist ::= (number:transliteration-country::countryCode)? ;
 common-data-style-attlist ::= (number:transliteration-style::("short" | "medium" | "long"))? ;
table-database-source-table-attlist ::= table:database-name::string ;
 table-database-source-table-attlist ::= table:database-table-name::string ;
office-spreadsheet-content-main ::= table-table* ;
dr3d-scene ::= dr3d:scene::(dr3d-scene-attlist common-draw-position-attlist common-draw-size-attlist common-draw-style-name-attlist common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-text-spreadsheet-shape-attlist common-dr3d-transform-attlist dr3d-light* shapes3d*) ;
table-columns ::= table-table-columns | (table-table-column+) ;
dc-creator ::= dc:creator::string ;
image-data ::= (form:image-data::anyURI)? ;
chart-legend ::= chart:legend::chart-legend-attlist ;
number-scientific-number-attlist ::= (number:min-exponent-digits::integer)? ;
text-section-source-attr ::= (xlink:href::anyURI (xlink:type::"simple")? (xlink:show::"embed")?)? ;
 text-section-source-attr ::= (text:section-name::string)? ;
 text-section-source-attr ::= (text:filter-name::string)? ;
gradient-style ::= "linear" | "axial" | "radial" | "ellipsoid" | "square" | "rectangular" ;
relativeLength ::= string() ;
office-annotation-attlist ::= (office:display::boolean)? ;
common-dr3d-transform-attlist ::= (dr3d:transform::string())? ;
common-field-database-table ::= common-field-database-table-attlist common-field-database-name ;
number-era ::= number:era::(number-era-attlist common-calendar-attlist) ;
dr3d-scene-attlist ::= (dr3d:vrp::vector3D)? (dr3d:vpn::vector3D)? (dr3d:vup::vector3D)? ;
 dr3d-scene-attlist ::= (dr3d:projection::("parallel" | "perspective"))? ;
 dr3d-scene-attlist ::= (dr3d:distance::length)? ;
 dr3d-scene-attlist ::= (dr3d:focal-length::length)? ;
 dr3d-scene-attlist ::= (dr3d:shadow-slant::nonNegativeInteger)? ;
 dr3d-scene-attlist ::= (dr3d:shade-mode::("flat" | "phong" | "gouraud" | "draft"))? ;
 dr3d-scene-attlist ::= (dr3d:ambient-color::color)? ;
 dr3d-scene-attlist ::= (dr3d:lighting-mode::boolean)? ;
draw-rect ::= draw:rect::(draw-rect-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
text-changed-region ::= text:changed-region::(text-changed-region-attr text-changed-region-content) ;
text-alphabetical-index-source ::= text:alphabetical-index-source::(text-alphabetical-index-source-attrs text-index-title-template? text-alphabetical-index-entry-template*) ;
style-chart-properties-content ::= style-properties-content ;
common-draw-z-index-attlist ::= (draw:z-index::nonNegativeInteger)? ;
table-dependencies ::= table:dependencies::(table-dependency+) ;
chart-grid-attlist ::= (chart:class::("major" | "minor"))? ;
 chart-grid-attlist ::= (chart:style-name::styleNameRef)? ;
table-target-range-address ::= table:target-range-address::common-table-range-attlist ;
style-graphic-properties-attlist ::= (draw:stroke::("none" | "dash" | "solid"))? ;
 style-graphic-properties-attlist ::= (draw:stroke-dash::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:stroke-dash-names::styleNameRefs)? ;
 style-graphic-properties-attlist ::= (svg:stroke-width::length)? ;
 style-graphic-properties-attlist ::= (svg:stroke-color::color)? ;
 style-graphic-properties-attlist ::= (draw:marker-start::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:marker-end::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:marker-start-width::length)? ;
 style-graphic-properties-attlist ::= (draw:marker-end-width::length)? ;
 style-graphic-properties-attlist ::= (draw:marker-start-center::boolean)? ;
 style-graphic-properties-attlist ::= (draw:marker-end-center::boolean)? ;
 style-graphic-properties-attlist ::= (svg:stroke-opacity::(string() | percent))? ;
 style-graphic-properties-attlist ::= (draw:stroke-linejoin::("miter" | "round" | "bevel" | "middle" | "none" | "inherit"))? ;
 style-graphic-properties-attlist ::= (draw:symbol-color::color)? ;
 style-graphic-properties-attlist ::= (text:animation::("none" | "scroll" | "alternate" | "slide"))? ;
 style-graphic-properties-attlist ::= (text:animation-direction::("left" | "right" | "up" | "down"))? ;
 style-graphic-properties-attlist ::= (text:animation-start-inside::boolean)? ;
 style-graphic-properties-attlist ::= (text:animation-stop-inside::boolean)? ;
 style-graphic-properties-attlist ::= (text:animation-repeat::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (text:animation-delay::duration)? ;
 style-graphic-properties-attlist ::= (text:animation-steps::length)? ;
 style-graphic-properties-attlist ::= (draw:auto-grow-width::boolean)? (draw:auto-grow-height::boolean)? ;
 style-graphic-properties-attlist ::= (draw:fit-to-size::boolean)? ;
 style-graphic-properties-attlist ::= (draw:fit-to-contour::boolean)? ;
 style-graphic-properties-attlist ::= (draw:textarea-vertical-align::("top" | "middle" | "bottom" | "justify"))? ;
 style-graphic-properties-attlist ::= (draw:textarea-horizontal-align::("left" | "center" | "right" | "justify"))? ;
 style-graphic-properties-attlist ::= (fo:wrap-option::("no-wrap" | "wrap"))? ;
 style-graphic-properties-attlist ::= (draw:color-mode::("greyscale" | "mono" | "watermark" | "standard"))? ;
 style-graphic-properties-attlist ::= (draw:color-inversion::boolean)? ;
 style-graphic-properties-attlist ::= (draw:luminance::percent)? ;
 style-graphic-properties-attlist ::= (draw:contrast::percent)? ;
 style-graphic-properties-attlist ::= (draw:gamma::percent)? ;
 style-graphic-properties-attlist ::= (draw:red::percent)? ;
 style-graphic-properties-attlist ::= (draw:green::percent)? ;
 style-graphic-properties-attlist ::= (draw:blue::percent)? ;
 style-graphic-properties-attlist ::= (draw:image-opacity::percent)? ;
 style-graphic-properties-attlist ::= (draw:shadow::("visible" | "hidden"))? ;
 style-graphic-properties-attlist ::= (draw:shadow-offset-x::length)? (draw:shadow-offset-y::length)? ;
 style-graphic-properties-attlist ::= (draw:shadow-color::color)? ;
 style-graphic-properties-attlist ::= (draw:shadow-opacity::percent)? ;
 style-graphic-properties-attlist ::= (draw:start-line-spacing-horizontal::distance)? (draw:start-line-spacing-vertical::distance)? ;
 style-graphic-properties-attlist ::= (draw:end-line-spacing-horizontal::distance)? (draw:end-line-spacing-vertical::distance)? ;
 style-graphic-properties-attlist ::= (draw:line-distance::distance)? ;
 style-graphic-properties-attlist ::= (draw:guide-overhang::length)? ;
 style-graphic-properties-attlist ::= (draw:guide-distance::distance)? ;
 style-graphic-properties-attlist ::= (draw:start-guide::length)? ;
 style-graphic-properties-attlist ::= (draw:end-guide::length)? ;
 style-graphic-properties-attlist ::= (draw:placing::("below" | "above"))? ;
 style-graphic-properties-attlist ::= (draw:parallel::boolean)? ;
 style-graphic-properties-attlist ::= (draw:measure-align::("automatic" | "left-outside" | "inside" | "right-outside"))? (draw:measure-vertical-align::("automatic" | "above" | "below" | "center"))? ;
 style-graphic-properties-attlist ::= (draw:unit::("automatic" | "mm" | "cm" | "m" | "km" | "pt" | "pc" | "inch" | "ft" | "mi"))? ;
 style-graphic-properties-attlist ::= (draw:show-unit::boolean)? ;
 style-graphic-properties-attlist ::= (draw:decimal-places::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (draw:caption-type::("straight-line" | "angled-line" | "angled-connector-line"))? ;
 style-graphic-properties-attlist ::= (draw:caption-angle-type::("fixed" | "free"))? ;
 style-graphic-properties-attlist ::= (draw:caption-angle::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (draw:caption-gap::distance)? ;
 style-graphic-properties-attlist ::= (draw:caption-escape-direction::("horizontal" | "vertical" | "auto"))? ;
 style-graphic-properties-attlist ::= (draw:caption-escape::(length | percent))? ;
 style-graphic-properties-attlist ::= (draw:caption-line-length::length)? ;
 style-graphic-properties-attlist ::= (draw:caption-fit-line-length::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:horizontal-segments::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:vertical-segments::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:edge-rounding::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:edge-rounding-mode::("correct" | "attractive"))? ;
 style-graphic-properties-attlist ::= (dr3d:back-scale::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:depth::length)? ;
 style-graphic-properties-attlist ::= (dr3d:backface-culling::("enabled" | "disabled"))? ;
 style-graphic-properties-attlist ::= (dr3d:end-angle::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:close-front::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:close-back::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:lighting-mode::("standard" | "double-sided"))? ;
 style-graphic-properties-attlist ::= (dr3d:normals-kind::("object" | "flat" | "sphere"))? ;
 style-graphic-properties-attlist ::= (dr3d:normals-direction::("normal" | "inverse"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-generation-mode-x::("object" | "parallel" | "sphere"))? (dr3d:texture-generation-mode-y::("object" | "parallel" | "sphere"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-kind::("luminance" | "intesity" | "color"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-filter::("enabled" | "disabled"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-mode::("replace" | "modulate" | "blend"))? ;
 style-graphic-properties-attlist ::= (dr3d:ambient-color::color)? (dr3d:emissive-color::color)? (dr3d:specular-color::color)? (dr3d:diffuse-color::color)? ;
 style-graphic-properties-attlist ::= (dr3d:shininess::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:shadow::("visible" | "hidden"))? ;
 style-graphic-properties-attlist ::= common-draw-rel-size-attlist (fo:min-width::(length | percent))? ;
 style-graphic-properties-attlist ::= (fo:min-height::(length | percent))? ;
 style-graphic-properties-attlist ::= (fo:max-height::(length | percent))? (fo:max-width::(length | percent))? ;
 style-graphic-properties-attlist ::= common-horizontal-margin-attlist ;
 style-graphic-properties-attlist ::= common-vertical-margin-attlist ;
 style-graphic-properties-attlist ::= common-margin-attlist ;
 style-graphic-properties-attlist ::= (style:print-content::boolean)? ;
 style-graphic-properties-attlist ::= (style:protect::("none" | (("content" | "position" | "size")+)))? ;
 style-graphic-properties-attlist ::= (style:horizontal-pos::("left" | "center" | "right" | "from-left" | "inside" | "outside" | "from-inside"))? (svg:x::coordinate)? ;
 style-graphic-properties-attlist ::= (style:horizontal-rel::("page" | "page-content" | "page-start-margin" | "page-end-margin" | "frame" | "frame-content" | "frame-start-margin" | "frame-end-margin" | "paragraph" | "paragraph-content" | "paragraph-start-margin" | "paragraph-end-margin" | "char"))? ;
 style-graphic-properties-attlist ::= common-vertical-pos-attlist ;
 style-graphic-properties-attlist ::= common-vertical-rel-attlist ;
 style-graphic-properties-attlist ::= common-text-anchor-attlist ;
 style-graphic-properties-attlist ::= common-border-attlist ;
 style-graphic-properties-attlist ::= common-border-line-width-attlist ;
 style-graphic-properties-attlist ::= common-padding-attlist ;
 style-graphic-properties-attlist ::= common-shadow-attlist ;
 style-graphic-properties-attlist ::= common-background-color-attlist ;
 style-graphic-properties-attlist ::= (style:editable::boolean)? ;
 style-graphic-properties-attlist ::= (style:wrap::("none" | "left" | "right" | "parallel" | "dynamic" | "run-through" | "biggest"))? ;
 style-graphic-properties-attlist ::= (style:wrap-dynamic-treshold::nonNegativeLength)? ;
 style-graphic-properties-attlist ::= (style:number-wrapped-paragraphs::("no-limit" | positiveInteger))? ;
 style-graphic-properties-attlist ::= (style:wrap-contour::boolean)? ;
 style-graphic-properties-attlist ::= (style:wrap-contour-mode::("full" | "outside"))? ;
 style-graphic-properties-attlist ::= (style:run-through::("foreground" | "background"))? ;
 style-graphic-properties-attlist ::= (style:flow-with-text::boolean)? ;
 style-graphic-properties-attlist ::= (style:overflow-behavior::("clip" | "auto-create-new-frame"))? ;
 style-graphic-properties-attlist ::= (style:mirror::("none" | "vertical" | horizontal-mirror | ("vertical" horizontal-mirror) | (horizontal-mirror "vertical")))? ;
 style-graphic-properties-attlist ::= (fo:clip::string)? ;
 style-graphic-properties-attlist ::= (draw:wrap-influence-on-position::("iterative" | "once-concurrent" | "once-successive"))? ;
 style-graphic-properties-attlist ::= (draw:frame-display-scrollbar::boolean)? ;
 style-graphic-properties-attlist ::= (draw:frame-display-border::boolean)? ;
 style-graphic-properties-attlist ::= (draw:frame-margin-horizontal::nonNegativePixelLength)? (draw:frame-margin-vertical::nonNegativePixelLength)? ;
 style-graphic-properties-attlist ::= (draw:visible-area-left::nonNegativeLength)? (draw:visible-area-top::nonNegativeLength)? (draw:visible-area-width::positiveLength)? (draw:visible-area-height::positiveLength)? ;
 style-graphic-properties-attlist ::= (draw:ole-draw-aspect::nonNegativeInteger)? ;
presentationSpeeds ::= "slow" | "medium" | "fast" ;
office-font-face-decls ::= (office:font-face-decls::(style-font-face*))? ;
office-document-styles ::= office:document-styles::(office-document-common-attrs office-font-face-decls office-styles office-automatic-styles office-master-styles) ;
table-subtotal-field-attlist ::= table:field-number::nonNegativeInteger ;
 table-subtotal-field-attlist ::= table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string) ;
text-hidden-text-attlist ::= text:condition::formula ;
 text-hidden-text-attlist ::= text:string-value::string ;
 text-hidden-text-attlist ::= (text:is-hidden::boolean)? ;
form-property ::= form:property::(form-property-name form-property-value-and-type-attlist) ;
 form-property ::= form:list-property::(form-property-name form-property-type-and-value-list) ;
table-named-expression-attlist ::= table:name::string table:expression::string (table:base-cell-address::cellAddress)? ;
nonNegativeInteger ::= integer() ;
style-paragraph-properties-content-strict ::= style-paragraph-properties-attlist style-paragraph-properties-elements ;
script-event-listener-attlist ::= script:event-name::string ;
 script-event-listener-attlist ::= script:language::string ;
 script-event-listener-attlist ::= (script:macro-name::string) | (xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")?) ;
text-variable-decl ::= text:variable-decl::(common-field-name-attlist common-value-type-attlist) ;
draw-fill-image ::= draw:fill-image::(draw-fill-image-attlist xlink:href::anyURI (xlink:type::"simple")? (xlink:show::"embed")? (xlink:actuate::"onLoad")?) ;
office-document-content ::= office:document-content::(office-document-common-attrs office-scripts office-font-face-decls office-automatic-styles office-body) ;
anim-animate-transform-attlist ::= svg:type::("translate" | "scale" | "rotate" | "skewX" | "skewY") ;
draw-param-attlist ::= (draw:name::string())? ;
 draw-param-attlist ::= (draw:value::string())? ;
common-begin-end-timing-attlist ::= (smil:begin::string)? ;
 common-begin-end-timing-attlist ::= (smil:end::string)? ;
common-presentation-effect-attlist ::= draw:shape-id::IDREF ;
 common-presentation-effect-attlist ::= (presentation:effect::presentationEffects)? ;
 common-presentation-effect-attlist ::= (presentation:direction::presentationEffectDirections)? ;
 common-presentation-effect-attlist ::= (presentation:speed::presentationSpeeds)? ;
 common-presentation-effect-attlist ::= (presentation:delay::duration)? ;
 common-presentation-effect-attlist ::= (presentation:start-scale::percent)? ;
 common-presentation-effect-attlist ::= (presentation:path-id::string())? ;
style-columns-attlist ::= fo:column-count::positiveInteger ;
 style-columns-attlist ::= (fo:column-gap::length)? ;
text-a-attlist ::= (office:name::string)? ;
 text-a-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? ;
 text-a-attlist ::= (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? ;
 text-a-attlist ::= (text:style-name::styleNameRef)? (text:visited-style-name::styleNameRef)? ;
config-config-item ::= config:config-item::(config-config-item-attlist string()) ;
table-first-column ::= table:first-column::common-table-template-attlist ;
style-header-footer-attlist ::= (style:dynamic-spacing::boolean)? ;
style-graphic-fill-properties-attlist ::= (draw:fill::("none" | "solid" | "bitmap" | "gradient" | "hatch"))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-color::color)? ;
 style-graphic-fill-properties-attlist ::= (draw:secondary-fill-color::color)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-gradient-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (draw:gradient-step-count::nonNegativeInteger)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-hatch-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-hatch-solid::boolean)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (style:repeat::("no-repeat" | "repeat" | "stretch"))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-width::(length | percent))? (draw:fill-image-height::(length | percent))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-ref-point-x::percent)? (draw:fill-image-ref-point-y::percent)? (draw:fill-image-ref-point::("top-left" | "top" | "top-right" | "left" | "center" | "right" | "bottom-left" | "bottom" | "bottom-right"))? ;
 style-graphic-fill-properties-attlist ::= (draw:tile-repeat-offset::string())? ;
 style-graphic-fill-properties-attlist ::= (draw:opacity::percent)? ;
 style-graphic-fill-properties-attlist ::= (draw:opacity-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (svg:fill-rule::("nonzero" | "evenodd"))? ;
common-draw-rel-size-attlist ::= common-draw-size-attlist (style:rel-width::(percent | "scale" | "scale-min"))? (style:rel-height::(percent | "scale" | "scale-min"))? ;
table-cut-offs ::= table:cut-offs::((table-movement-cut-off+) | (table-insertion-cut-off table-movement-cut-off*)) ;
style-header-footer-properties-content ::= style-properties-content ;
dr3d-sphere-attlist ::= (dr3d:center::vector3D)? ;
 dr3d-sphere-attlist ::= (dr3d:size::vector3D)? ;
draw-fill-image-attlist ::= draw:name::styleName ;
 draw-fill-image-attlist ::= (draw:display-name::string)? ;
 draw-fill-image-attlist ::= (svg:width::length)? (svg:height::length)? ;
common-dur-timing-attlist ::= (smil:dur::string)? ;
chart-mean-value-attlist ::= (chart:style-name::styleNameRef)? ;
style-text-properties-attlist ::= (fo:font-variant::fontVariant)? ;
 style-text-properties-attlist ::= (fo:text-transform::("none" | "lowercase" | "uppercase" | "capitalize"))? ;
 style-text-properties-attlist ::= (fo:color::color)? ;
 style-text-properties-attlist ::= (style:use-window-font-color::boolean)? ;
 style-text-properties-attlist ::= (style:text-outline::boolean)? ;
 style-text-properties-attlist ::= (style:text-line-through-type::lineType)? ;
 style-text-properties-attlist ::= (style:text-line-through-style::lineStyle)? ;
 style-text-properties-attlist ::= (style:text-line-through-width::lineWidth)? ;
 style-text-properties-attlist ::= (style:text-line-through-color::("font-color" | color))? ;
 style-text-properties-attlist ::= (style:text-line-through-text::string)? ;
 style-text-properties-attlist ::= (style:text-line-through-text-style::styleNameRef)? ;
 style-text-properties-attlist ::= (style:text-position::(percent | "super" | "sub" percent?))? ;
 style-text-properties-attlist ::= (style:font-name::string)? (style:font-name-asian::string)? (style:font-name-complex::string)? ;
 style-text-properties-attlist ::= (fo:font-family::string)? (style:font-family-asian::string)? (style:font-family-complex::string)? ;
 style-text-properties-attlist ::= (style:font-family-generic::fontFamilyGeneric)? (style:font-family-generic-asian::fontFamilyGeneric)? (style:font-family-generic-complex::fontFamilyGeneric)? ;
 style-text-properties-attlist ::= (style:font-style-name::string)? (style:font-style-name-asian::string)? (style:font-style-name-complex::string)? ;
 style-text-properties-attlist ::= (style:font-pitch::fontPitch)? (style:font-pitch-asian::fontPitch)? (style:font-pitch-complex::fontPitch)? ;
 style-text-properties-attlist ::= (style:font-charset::textEncoding)? ;
 style-text-properties-attlist ::= (fo:font-size::(positiveLength | percent))? (style:font-size-asian::(positiveLength | percent))? (style:font-size-complex::(positiveLength | percent))? ;
 style-text-properties-attlist ::= (style:font-size-rel::length)? (style:font-size-rel-asian::length)? (style:font-size-rel-complex::length)? ;
 style-text-properties-attlist ::= (style:script-type::("latin" | "asian" | "complex" | "ignore"))? ;
 style-text-properties-attlist ::= (fo:letter-spacing::(length | "normal"))? ;
 style-text-properties-attlist ::= (fo:language::languageCode)? (style:language-asian::languageCode)? (style:language-complex::languageCode)? ;
 style-text-properties-attlist ::= (fo:country::countryCode)? (style:country-asian::countryCode)? (style:country-complex::countryCode)? ;
 style-text-properties-attlist ::= (fo:font-style::fontStyle)? (style:font-style-asian::fontStyle)? (style:font-style-complex::fontStyle)? ;
 style-text-properties-attlist ::= (style:font-relief::("none" | "embossed" | "engraved"))? ;
 style-text-properties-attlist ::= (fo:text-shadow::shadowType)? ;
 style-text-properties-attlist ::= (style:text-underline-type::lineType)? ;
 style-text-properties-attlist ::= (style:text-underline-style::lineStyle)? ;
 style-text-properties-attlist ::= (style:text-underline-width::lineWidth)? ;
 style-text-properties-attlist ::= (style:text-underline-color::("font-color" | color))? ;
 style-text-properties-attlist ::= (fo:font-weight::fontWeight)? (style:font-weight-asian::fontWeight)? (style:font-weight-complex::fontWeight)? ;
 style-text-properties-attlist ::= (style:text-underline-mode::lineMode)? ;
 style-text-properties-attlist ::= (style:text-line-through-mode::lineMode)? ;
 style-text-properties-attlist ::= (style:letter-kerning::boolean)? ;
 style-text-properties-attlist ::= (style:text-blinking::boolean)? ;
 style-text-properties-attlist ::= common-background-color-attlist ;
 style-text-properties-attlist ::= (style:text-combine::("none" | "letters" | "lines"))? ;
 style-text-properties-attlist ::= (style:text-combine-start-char::character)? (style:text-combine-end-char::character)? ;
 style-text-properties-attlist ::= (style:text-emphasize::("none" | ("none" | "accent" | "dot" | "circle" | "disc" "above" | "below")))? ;
 style-text-properties-attlist ::= (style:text-scale::percent)? ;
 style-text-properties-attlist ::= (style:text-rotation-angle::integer)? ;
 style-text-properties-attlist ::= (style:text-rotation-scale::("fixed" | "line-height"))? ;
 style-text-properties-attlist ::= (fo:hyphenate::boolean)? ;
 style-text-properties-attlist ::= (fo:hyphenation-remain-char-count::positiveInteger)? ;
 style-text-properties-attlist ::= (fo:hyphenation-push-char-count::positiveInteger)? ;
 style-text-properties-attlist ::= (text:display::"true") | (text:display::"none") | (text:display::"condition" text:condition::"none") | ε ;
presentation-header-decl-attlist ::= presentation:name::string ;
number-time-style-attlist ::= (number:truncate-on-overflow::boolean)? ;
office-dde-source-attlist ::= (office:name::string)? ;
 office-dde-source-attlist ::= (office:conversion-mode::("into-default-style-data-style" | "into-english-number" | "keep-text"))? ;
text-object-index-source ::= text:object-index-source::(text-object-index-source-attrs text-index-title-template? text-object-index-entry-template?) ;
text-dde-connection-decl-attlist ::= office:name::string ;
text-section-source ::= text:section-source::text-section-source-attr ;
draw-image-map ::= draw:image-map::((draw-area-rectangle | draw-area-circle | draw-area-polygon)*) ;
table-data-pilot-group-member ::= table:data-pilot-group-member::table-data-pilot-group-member-attlist ;
office-document-attrs ::= office:mimetype::string ;
office-meta-data ::= meta:generator::string ;
 office-meta-data ::= dc:title::string ;
 office-meta-data ::= dc:description::string ;
 office-meta-data ::= dc:subject::string ;
 office-meta-data ::= meta:keyword::string ;
 office-meta-data ::= meta:initial-creator::string ;
 office-meta-data ::= dc-creator ;
 office-meta-data ::= meta:printed-by::string ;
 office-meta-data ::= meta:creation-date::dateTime ;
 office-meta-data ::= dc-date ;
 office-meta-data ::= meta:print-date::dateTime ;
 office-meta-data ::= meta:template::(xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? (xlink:title::string)? (meta:date::dateTime)?) ;
 office-meta-data ::= meta:auto-reload::((xlink:type::"simple")? (xlink:show::"replace")? (xlink:actuate::"onLoad")? (xlink:href::anyURI)? (meta:delay::duration)?) ;
 office-meta-data ::= meta:hyperlink-behaviour::((office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))?) ;
 office-meta-data ::= dc:language::language ;
 office-meta-data ::= meta:editing-cycles::nonNegativeInteger ;
 office-meta-data ::= meta:editing-duration::duration ;
 office-meta-data ::= meta:document-statistic::((meta:page-count::nonNegativeInteger)? (meta:table-count::nonNegativeInteger)? (meta:draw-count::nonNegativeInteger)? (meta:image-count::nonNegativeInteger)? (meta:ole-object-count::nonNegativeInteger)? (meta:paragraph-count::nonNegativeInteger)? (meta:word-count::nonNegativeInteger)? (meta:character-count::nonNegativeInteger)? (frame-count::nonNegativeInteger)? (sentence-count::nonNegativeInteger)? (syllable-count::nonNegativeInteger)? (non-whitespace-character-count::nonNegativeInteger)? (meta:row-count::nonNegativeInteger)? (meta:cell-count::nonNegativeInteger)? (meta:object-count::nonNegativeInteger)?) ;
 office-meta-data ::= meta:user-defined::(meta:name::string (meta:value-type::"float" double) | (meta:value-type::"date" dateOrDateTime) | (meta:value-type::"time" duration) | (meta:value-type::"boolean" boolean) | (meta:value-type::"string" string) | string()) ;
draw-enhanced-geometry ::= draw:enhanced-geometry::(draw-enhanced-geometry-attlist draw-equation* draw-handle*) ;
text-bibliography-entry-template ::= text:bibliography-entry-template::(text-bibliography-entry-template-attrs (text-index-entry-span | text-index-entry-tab-stop | text-index-entry-bibliography)*) ;
style-region-right ::= style:region-right::region-content ;
table-data-pilot-field-reference ::= table:data-pilot-field-reference::table-data-pilot-field-reference-attlist ;
text-ref-content ::= (text:reference-format::("page" | "chapter" | "direction" | "text"))? ;
text-chapter-attlist ::= text:display::("name" | "number" | "number-and-name" | "plain-number-and-name" | "plain-number") ;
 text-chapter-attlist ::= text:outline-level::nonNegativeInteger ;
text-page-sequence ::= text:page-sequence::(text-page+) ;
form-checkbox-attlist ::= form-control-attlist common-disabled-attlist label common-printable-attlist common-tab-attlist common-title-attlist common-value-attlist common-data-field-attlist common-form-visual-effect-attlist common-form-relative-image-position-attlist ;
 form-checkbox-attlist ::= (form:current-state::states)? ;
 form-checkbox-attlist ::= (form:is-tristate::boolean)? ;
 form-checkbox-attlist ::= (form:state::states)? ;
draw-layer-set ::= draw:layer-set::(draw-layer*) ;
text-hidden-paragraph-attlist ::= text:condition::formula ;
 text-hidden-paragraph-attlist ::= (text:is-hidden::boolean)? ;
common-draw-points-attlist ::= draw:points::points ;
presentation-sound ::= presentation:sound::(presentation-sound-attlist xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? (xlink:show::("new" | "replace"))?) ;
chart-error-indicator ::= chart:error-indicator::chart-error-indicator-attlist ;
chart-title-attlist ::= (table:cell-range::cellAddress)? ;
 chart-title-attlist ::= common-draw-position-attlist ;
 chart-title-attlist ::= (chart:style-name::styleNameRef)? ;
style-background-image ::= (style:background-image::(style-background-image-attlist common-draw-data-attlist | office-binary-data | ε))? ;
style-ruby-properties-content ::= style-properties-content ;
presentation-decls ::= presentation-decl* ;
dr3d-cube-attlist ::= (dr3d:min-edge::vector3D)? (dr3d:max-edge::vector3D)? ;
form-property-type-and-value-list ::= (office:value-type::"float" (form:list-value::(office:value::double))*) | (office:value-type::"percentage" (form:list-value::(office:value::double))*) | (office:value-type::"currency" (form:list-value::(office:value::double (office:currency::string)?))*) | (office:value-type::"date" (form:list-value::(office:date-value::dateOrDateTime))*) | (office:value-type::"time" (form:list-value::(office:time-value::duration))*) | (office:value-type::"boolean" (form:list-value::(office:boolean-value::boolean))*) | (office:value-type::"string" (form:list-value::(office:string-value::string))*) | (office:value-type::"void") ;
xforms-model ::= xforms:model::anyAttListOrElements ;
table-dde-links ::= table:dde-links::(table-dde-link+) ;
style-drop-cap ::= (style:drop-cap::style-drop-cap-attlist)? ;
horiBackPos ::= "left" | "center" | "right" ;
draw-floating-frame ::= draw:floating-frame::(draw-floating-frame-attlist common-draw-data-attlist) ;
common-writing-mode-attlist ::= (style:writing-mode::("lr-tb" | "rl-tb" | "tb-rl" | "tb-lr" | "lr" | "rl" | "tb" | "page"))? ;
form-text-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist ;
text-illustration-index-source-attrs ::= text-index-scope-attr ;
 text-illustration-index-source-attrs ::= text-relative-tab-stop-position-attr ;
 text-illustration-index-source-attrs ::= (text:use-caption::boolean)? ;
 text-illustration-index-source-attrs ::= (text:caption-sequence-name::string)? ;
 text-illustration-index-source-attrs ::= (text:caption-sequence-format::("text" | "category-and-value" | "caption"))? ;
presentationEffects ::= "none" | "fade" | "move" | "stripes" | "open" | "close" | "dissolve" | "wavyline" | "random" | "lines" | "laser" | "appear" | "hide" | "move-short" | "checkerboard" | "rotate" | "stretch" ;
xforms-bind-attlist ::= (xforms:bind::string)? ;
text-note-ref-content ::= text-note-class ;
draw-opacity ::= draw:opacity::(common-draw-gradient-attlist draw-opacity-attlist) ;
table-linked-source-attlist ::= (xlink:type::"simple")? (xlink:actuate::"onRequest")? xlink:href::anyURI ;
 table-linked-source-attlist ::= (table:filter-name::string)? ;
 table-linked-source-attlist ::= (table:filter-options::string)? ;
 table-linked-source-attlist ::= (table:refresh-delay::duration)? ;
form-column ::= form:column::(form-column-attlist column-controls+) ;
table-data-pilot-groups-attlist ::= table:source-field-name::string ;
 table-data-pilot-groups-attlist ::= (table:date-start::(dateOrDateTime | "auto")) | (table:start::(double | "auto")) ;
 table-data-pilot-groups-attlist ::= (table:date-end::(dateOrDateTime | "auto")) | (table:end::(double | "auto")) ;
 table-data-pilot-groups-attlist ::= table:step::double ;
 table-data-pilot-groups-attlist ::= table:grouped-by::("seconds" | "minutes" | "hours" | "days" | "months" | "quarters" | "years") ;
presentationEffectDirections ::= "none" | "from-left" | "from-top" | "from-right" | "from-bottom" | "from-center" | "from-upper-left" | "from-upper-right" | "from-lower-left" | "from-lower-right" | "to-left" | "to-top" | "to-right" | "to-bottom" | "to-upper-left" | "to-upper-right" | "to-lower-right" | "to-lower-left" | "path" | "spiral-inward-left" | "spiral-inward-right" | "spiral-outward-left" | "spiral-outward-right" | "vertical" | "horizontal" | "to-center" | "clockwise" | "counter-clockwise" ;
text-outline-level-style ::= text:outline-level-style::(text-outline-level-style-attlist style-list-level-properties? style-text-properties?) ;
table-data-pilot-subtotal ::= table:data-pilot-subtotal::table-data-pilot-subtotal-attlist ;
text-note-class ::= text:note-class::("footnote" | "endnote") ;
text-list-style-attr ::= style:name::styleName ;
 text-list-style-attr ::= (style:display-name::string)? ;
 text-list-style-attr ::= (text:consecutive-numbering::boolean)? ;
common-presentation-header-footer-attlist ::= (presentation:use-header-name::string)? ;
 common-presentation-header-footer-attlist ::= (presentation:use-footer-name::string)? ;
 common-presentation-header-footer-attlist ::= (presentation:use-date-time-name::string)? ;
style-table-column-properties-content-strict ::= style-table-column-properties-attlist style-table-column-properties-elements ;
style-ruby-properties-elements ::= ε ;
shadowType ::= "none" | string ;
text-index-source-styles ::= text:index-source-styles::(text:outline-level::positiveInteger text-index-source-style*) ;
text-section-attr ::= sectionAttr ;
 text-section-attr ::= (text:display::("true" | "none")) | (text:display::"condition" text:condition::string) | ε ;
table-rows ::= table-table-rows | (table-table-row+) ;
number-day-of-week ::= number:day-of-week::(number-day-of-week-attlist common-calendar-attlist) ;
draw-opacity-attlist ::= (draw:start::percent)? (draw:end::percent)? ;
style-section-properties-content-strict ::= style-section-properties-attlist style-section-properties-elements ;
presentation-classes ::= "title" | "outline" | "subtitle" | "text" | "graphic" | "object" | "chart" | "table" | "orgchart" | "page" | "notes" | "handout" | "header" | "footer" | "date-time" | "page-number" ;
common-anim-named-target-attlist ::= smil:attributeName::string ;
target-location ::= (xlink:href::anyURI)? ;
office-image-content-main ::= draw-frame ;
current-selected ::= (form:current-selected::boolean)? ;
form-item-attlist ::= label ;
style-table-row-properties-content-strict ::= style-table-row-properties-attlist style-table-row-properties-elements ;
text-decls ::= (text:variable-decls::(text-variable-decl*))? (text:sequence-decls::(text-sequence-decl*))? (text:user-field-decls::(text-user-field-decl*))? (text:dde-connection-decls::(text-dde-connection-decl*))? text-alphabetical-index-auto-mark-file? ;
office-binary-data ::= office:binary-data::base64Binary ;
table-movement-cut-off ::= table:movement-cut-off::table-movement-cut-off-attlist ;
form-number-attlist ::= (form:value::double)? ;
 form-number-attlist ::= (form:current-value::double)? ;
 form-number-attlist ::= (form:min-value::double)? ;
 form-number-attlist ::= (form:max-value::double)? ;
draw-glue-points-attlist ::= draw:escape-direction::("auto" | "left" | "right" | "up" | "down" | "horizontal" | "vertical") ;
text-list-style ::= text:list-style::(text-list-style-attr text-list-style-content*) ;
text-illustration-index-entry-template-attrs ::= text:style-name::styleNameRef ;
common-dde-connection-decl-attlist ::= office:dde-application::string ;
 common-dde-connection-decl-attlist ::= office:dde-topic::string ;
 common-dde-connection-decl-attlist ::= office:dde-item::string ;
 common-dde-connection-decl-attlist ::= (office:automatic-update::boolean)? ;
text-time-attlist ::= common-field-fixed-attlist common-field-data-style-name-attlist ;
 text-time-attlist ::= (text:time-value::timeOrDateTime)? ;
 text-time-attlist ::= (text:time-adjust::duration)? ;
common-timing-attlist ::= common-basic-timing-attlist common-restart-timing-attlist common-restart-default-attlist common-fill-timing-attlist common-fill-default-attlist common-time-manip-attlist ;
common-number-attlist ::= (number:min-integer-digits::integer)? ;
 common-number-attlist ::= (number:grouping::boolean)? ;
table-functions ::= table-named-expressions? table-database-ranges? table-data-pilot-tables? table-consolidation? table-dde-links? ;
style-table-column-properties-content ::= style-properties-content ;
presentation-footer-decl-attlist ::= presentation:name::string ;
svg-desc ::= svg:desc::string() ;
form-combobox-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist dropdown common-maxlength-attlist common-printable-attlist common-readonly-attlist size common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist list-source list-source-type ;
 form-combobox-attlist ::= (form:auto-complete::boolean)? ;
common-page-number-attlist ::= (style:page-number::positiveInteger)? ;
text-database-next-attlist ::= common-field-database-table ;
 text-database-next-attlist ::= (text:condition::formula)? ;
office-presentation-content-prelude ::= text-decls table-decls presentation-decls ;
common-vertical-rel-attlist ::= (style:vertical-rel::("page" | "page-content" | "frame" | "frame-content" | "paragraph" | "paragraph-content" | "char" | "line" | "baseline" | "text"))? ;
draw-ellipse ::= draw:ellipse::(common-draw-circle-ellipse-attlist draw-ellipse-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
common-draw-id-attlist ::= (draw:id::ID)? ;
table-data-pilot-member ::= table:data-pilot-member::table-data-pilot-member-attlist ;
number-currency-symbol ::= number:currency-symbol::(number-currency-symbol-attlist string()) ;
form-generic-control-attlist ::= form-control-attlist ;
style-text-properties-elements ::= ε ;
common-field-display-value-formula-none-attlist ::= (text:display::("value" | "formula" | "none"))? ;
common-repeat-timing-attlist ::= (smil:repeatDur::string smil:repeatCount::nonNegativeInteger)? ;
office-presentation-content-epilogue ::= presentation-settings table-functions ;
valueType ::= "float" | "time" | "date" | "percentage" | "currency" | "boolean" | "string" ;
form-value-range-attlist ::= form-control-attlist common-disabled-attlist common-printable-attlist common-tab-attlist common-title-attlist common-value-attlist ;
 form-value-range-attlist ::= (form:max-value::string)? ;
 form-value-range-attlist ::= (form:min-value::string)? ;
 form-value-range-attlist ::= (form:step-size::positiveInteger)? ;
 form-value-range-attlist ::= (form:page-step-size::positiveInteger)? ;
 form-value-range-attlist ::= (form:delay-for-repeat::duration)? ;
 form-value-range-attlist ::= (form:orientation::("horizontal" | "vertical"))? ;
number-boolean-style ::= number:boolean-style::(common-data-style-attlist style-text-properties? number-text? (number-boolean number-text?)? style-map*) ;
table-error-macro ::= table:error-macro::((table:execute::boolean)?) ;
config-config-item-set ::= config:config-item-set::(config-config-item-set-attlist config-items) ;
presentation-dim-attlist ::= draw:shape-id::IDREF ;
 presentation-dim-attlist ::= draw:color::color ;
text-bibliography-source ::= text:bibliography-source::(text-index-title-template? text-bibliography-entry-template*) ;
text-sort-key-attlist ::= text:key::("address" | "annote" | "author" | "bibliography-type" | "booktitle" | "chapter" | "custom1" | "custom2" | "custom3" | "custom4" | "custom5" | "edition" | "editor" | "howpublished" | "identifier" | "institution" | "isbn" | "issn" | "journal" | "month" | "note" | "number" | "organizations" | "pages" | "publisher" | "report-type" | "school" | "series" | "title" | "url" | "volume" | "year") (text:sort-ascending::boolean)? ;
style-list-level-properties-attlist ::= common-text-align ;
 style-list-level-properties-attlist ::= (text:space-before::nonNegativeLength)? ;
 style-list-level-properties-attlist ::= (text:min-label-width::nonNegativeLength)? ;
 style-list-level-properties-attlist ::= (text:min-label-distance::nonNegativeLength)? ;
 style-list-level-properties-attlist ::= (style:font-name::string)? ;
 style-list-level-properties-attlist ::= (fo:width::positiveLength)? (fo:height::positiveLength)? ;
 style-list-level-properties-attlist ::= common-vertical-rel-attlist common-vertical-pos-attlist ;
number-year ::= number:year::(number-year-attlist common-calendar-attlist) ;
table-body ::= table:body::common-table-template-attlist ;
text-index-entry-span ::= text:index-entry-span::((text:style-name::styleNameRef)? string()) ;
text-date-attlist ::= common-field-fixed-attlist common-field-data-style-name-attlist ;
 text-date-attlist ::= (text:date-value::dateOrDateTime)? ;
 text-date-attlist ::= (text:date-adjust::duration)? ;
text-user-field-decl ::= text:user-field-decl::(common-field-name-attlist common-field-formula-attlist? common-value-and-type-attlist) ;
table-sort ::= table:sort::(table-sort-attlist table-sort-by+) ;
styleNameRefs ::= string()* ;
dc-date ::= dc:date::dateTime ;
text-database-row-select-attlist ::= common-field-database-table ;
 text-database-row-select-attlist ::= (text:condition::formula)? ;
 text-database-row-select-attlist ::= (text:row-number::nonNegativeInteger)? ;
cellAddress ::= string() ;
fontPitch ::= "fixed" | "variable" ;
chart-axis ::= chart:axis::(chart-axis-attlist chart-title? chart-categories? chart-grid*) ;
table-database-source-sql ::= table:database-source-sql::table-database-source-sql-attlist ;
draw-custom-shape ::= draw:custom-shape::(draw-custom-shape-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text draw-enhanced-geometry?) ;
style-table-row-properties-content ::= style-properties-content ;
form-form ::= form:form::(common-form-control-attlist form-form-attlist form-properties? office-event-listeners? (controls | form-form)* form-connection-resource?) ;
common-table-cell-range-address-attlist ::= table:start-column::integer table:start-row::integer table:start-table::integer table:end-column::integer table:end-row::integer table:end-table::integer ;
list-source ::= (form:list-source::string)? ;
common-draw-gradient-attlist ::= (draw:name::styleName)? ;
 common-draw-gradient-attlist ::= (draw:display-name::string)? ;
 common-draw-gradient-attlist ::= draw:style::gradient-style ;
 common-draw-gradient-attlist ::= (draw:cx::percent)? (draw:cy::percent)? ;
 common-draw-gradient-attlist ::= (draw:angle::integer)? ;
 common-draw-gradient-attlist ::= (draw:border::percent)? ;
draw-polyline ::= draw:polyline::(common-draw-points-attlist common-draw-position-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-shape-with-text-and-styles-attlist office-event-listeners? draw-glue-point* draw-text) ;
text-numbered-paragraph ::= text:numbered-paragraph::(text-numbered-paragraph-attr text-number? text-p | text-h) ;
text-list-level-style-bullet-attr ::= (text:style-name::styleNameRef)? ;
 text-list-level-style-bullet-attr ::= text:bullet-char::character ;
 text-list-level-style-bullet-attr ::= common-num-format-prefix-suffix-attlist ;
 text-list-level-style-bullet-attr ::= (text:bullet-relative-size::percent)? ;
number-quarter ::= number:quarter::(number-quarter-attlist common-calendar-attlist) ;
config-config-item-map-entry ::= config:config-item-map-entry::(config-config-item-map-entry-attlist config-items) ;
anim-transition-filter-attlist ::= smil:type::string ;
 anim-transition-filter-attlist ::= (smil:subtype::string)? ;
 anim-transition-filter-attlist ::= (smil:direction::("forward" | "reverse"))? ;
 anim-transition-filter-attlist ::= (smil:fadeColor::("forward" | "reverse"))? ;
 anim-transition-filter-attlist ::= (smil:mode::("in" | "out"))? ;
text-alphabetical-index-entry-template ::= text:alphabetical-index-entry-template::(text-alphabetical-index-entry-template-attrs (text-index-entry-chapter | text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop)*) ;
common-table-change-attlist ::= table:id::string ;
 common-table-change-attlist ::= (table:acceptance-state::("accepted" | "rejected" | "pending"))? ;
 common-table-change-attlist ::= (table:rejecting-change-id::string)? ;
common-field-formula-attlist ::= (text:formula::formula)? ;
office-meta-content ::= anyElements ;
style-table-cell-properties-elements ::= style-background-image ;
table-data-pilot-field ::= table:data-pilot-field::(table-data-pilot-field-attlist table-data-pilot-level? table-data-pilot-field-reference? table-data-pilot-groups?) ;
draw-glue-point ::= draw:glue-point::draw-glue-point-attlist ;
chart-chart-attlist ::= chart:class::namespacedToken ;
 chart-chart-attlist ::= common-draw-size-attlist ;
 chart-chart-attlist ::= (chart:column-mapping::string)? ;
 chart-chart-attlist ::= (chart:row-mapping::string)? ;
 chart-chart-attlist ::= (chart:style-name::styleNameRef)? ;
text-set-page-variable-attlist ::= (text:active::boolean)? ;
 text-set-page-variable-attlist ::= (text:page-adjust::integer)? ;
draw-custom-shape-attlist ::= (draw:engine::namespacedToken)? ;
 draw-custom-shape-attlist ::= (draw:data::string)? ;
table-highlighted-range-attlist-invalid ::= table:marked-invalid::boolean ;
table-data-pilot-tables ::= table:data-pilot-tables::(table-data-pilot-table*) ;
table-table-row ::= table:table-row::(table-table-row-attlist (table-table-cell | table-covered-table-cell)+) ;
table-operation-attlist ::= table:name::("trace-dependents" | "remove-dependents" | "trace-precedents" | "remove-precedents" | "trace-errors") ;
 table-operation-attlist ::= table:index::nonNegativeInteger ;
draw-text ::= (text-p | text-list)* ;
table-detective ::= table:detective::(table-highlighted-range* table-operation*) ;
text-get-page-variable-attlist ::= common-field-num-format-attlist ;
office-settings ::= (office:settings::(config-config-item-set+))? ;
table-tracked-changes-attlist ::= (table:track-changes::boolean)? ;
text-table-of-content-entry-template-attlist ::= text:outline-level::positiveInteger ;
 text-table-of-content-entry-template-attlist ::= text:style-name::styleNameRef ;
common-num-format-prefix-suffix-attlist ::= (style:num-prefix::string)? (style:num-suffix::string)? ;
common-disabled-attlist ::= (form:disabled::boolean)? ;
style-table-cell-properties-content ::= style-properties-content ;
common-svg-gradient-attlist ::= (svg:gradientUnits::"objectBoundingBox")? (svg:gradientTransform::string)? (svg:spreadMethod::("pad" | "reflect" | "repeat"))? ;
 common-svg-gradient-attlist ::= draw:name::styleName ;
 common-svg-gradient-attlist ::= (draw:display-name::string)? ;
draw-a-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? ;
 draw-a-attlist ::= (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? ;
 draw-a-attlist ::= (office:name::string)? ;
 draw-a-attlist ::= (office:server-map::boolean)? ;
style-default-style ::= style:default-style::style-style-content ;
table-named-expressions ::= table:named-expressions::((table-named-range | table-named-expression)*) ;
office-spreadsheet-content-prelude ::= table-tracked-changes? text-decls table-decls ;
number-fraction ::= number:fraction::(number-fraction-attlist common-number-attlist) ;
common-draw-area-attlist ::= (xlink:href::anyURI)? (xlink:type::"simple")? (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? ;
 common-draw-area-attlist ::= (office:name::string)? ;
 common-draw-area-attlist ::= (draw:nohref::"nohref")? ;
common-draw-name-attlist ::= (draw:name::string)? ;
text-bibliography ::= text:bibliography::(sectionAttr text-bibliography-source text-index-body) ;
table-dde-link ::= table:dde-link::(office-dde-source table-table) ;
point3D ::= string() ;
table-table-attlist ::= (table:name::string)? ;
 table-table-attlist ::= (table:style-name::styleNameRef)? ;
 table-table-attlist ::= (table:protected::boolean)? (table:protection-key::string())? ;
 table-table-attlist ::= (table:print::boolean)? ;
 table-table-attlist ::= (table:print-ranges::cellRangeAddressList)? ;
 table-table-attlist ::= (table:is-sub-table::boolean)? ;
--------------------odf::opendoc-1.1-manifest.bgf--------------------
key-derivation-attlist ::= manifest:key-derivation-name::string() ;
 key-derivation-attlist ::= manifest:salt::string() ;
 key-derivation-attlist ::= manifest:iteration-count::integer() ;
encryption-data-attlist ::= manifest:checksum-type::string() ;
 encryption-data-attlist ::= manifest:checksum::string() ;
key-derivation ::= manifest:key-derivation::key-derivation-attlist ;
encryption-data ::= manifest:encryption-data::(encryption-data-attlist algorithm key-derivation) ;
file-entry-attlist ::= manifest:full-path::string() ;
 file-entry-attlist ::= (manifest:size::integer())? ;
 file-entry-attlist ::= manifest:media-type::string() ;
algorithm-attlist ::= manifest:algorithm-name::string() ;
 algorithm-attlist ::= manifest:initialisation-vector::string() ;
file-entry ::= manifest:file-entry::(file-entry-attlist encryption-data?) ;
--------------------odf::opendoc-1.1-strict.bgf--------------------
style-font-face ::= style:font-face::(style-font-face-attlist svg-font-face-src? svg-definition-src?) ;
svg-linearGradient ::= svg:linearGradient::(common-svg-gradient-attlist (svg:x1::(coordinate | percent))? (svg:y1::(coordinate | percent))? (svg:x2::(coordinate | percent))? (svg:y2::(coordinate | percent))? svg-stop*) ;
style-page-layout-attlist ::= style:name::styleName ;
 style-page-layout-attlist ::= (style:page-usage::("all" | "left" | "right" | "mirrored"))? ;
number-seconds ::= number:seconds::number-seconds-attlist ;
number-currency-style ::= number:currency-style::(common-data-style-attlist common-auto-reorder-attlist style-text-properties? number-text? ((number-and-text currency-symbol-and-text?) | (currency-symbol-and-text number-and-text?))? style-map*) ;
number-fraction-attlist ::= (number:min-numerator-digits::integer)? ;
 number-fraction-attlist ::= (number:min-denominator-digits::integer)? ;
 number-fraction-attlist ::= (number:denominator-value::integer)? ;
table-covered-table-cell ::= table:covered-table-cell::(table-table-cell-attlist table-table-cell-content) ;
text-notes-configuration-content ::= text-note-class ;
 text-notes-configuration-content ::= (text:citation-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:citation-body-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:default-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:master-page-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:start-value::nonNegativeInteger)? ;
 text-notes-configuration-content ::= common-num-format-prefix-suffix-attlist common-num-format-attlist? ;
 text-notes-configuration-content ::= (text:start-numbering-at::("document" | "chapter" | "page"))? ;
 text-notes-configuration-content ::= (text:footnotes-position::("text" | "page" | "section" | "document"))? ;
 text-notes-configuration-content ::= (text:note-continuation-notice-forward::string())? ;
 text-notes-configuration-content ::= (text:note-continuation-notice-backward::string())? ;
draw-applet-attlist ::= (draw:code::string())? ;
 draw-applet-attlist ::= (draw:object::string())? ;
 draw-applet-attlist ::= (draw:archive::string())? ;
 draw-applet-attlist ::= (draw:may-script::boolean)? ;
text-list-item-content ::= text-number? (text-p | text-h | text-list | text-soft-page-break)* ;
style-header-footer-properties-content-strict ::= style-header-footer-properties-attlist style-header-footer-properties-elements ;
number-scientific-number ::= number:scientific-number::(number-scientific-number-attlist common-decimal-places-attlist common-number-attlist) ;
presentation-hide-shape ::= presentation:hide-shape::(common-presentation-effect-attlist presentation-sound?) ;
text-number ::= text:number::string ;
common-title-attlist ::= (form:title::string())? ;
draw-object ::= draw:object::(draw-object-attlist common-draw-data-attlist | office-document | math-math) ;
table-data-pilot-table-attlist ::= table:name::string ;
 table-data-pilot-table-attlist ::= (table:application-data::string)? ;
 table-data-pilot-table-attlist ::= (table:grand-total::("none" | "row" | "column" | "both"))? ;
 table-data-pilot-table-attlist ::= (table:ignore-empty-rows::boolean)? ;
 table-data-pilot-table-attlist ::= (table:identify-categories::boolean)? ;
 table-data-pilot-table-attlist ::= table:target-range-address::cellRangeAddress ;
 table-data-pilot-table-attlist ::= (table:buttons::cellRangeAddressList)? ;
 table-data-pilot-table-attlist ::= (table:show-filter-button::boolean)? ;
 table-data-pilot-table-attlist ::= (table:drill-down-on-double-click::boolean)? ;
table-sort-by ::= table:sort-by::table-sort-by-attlist ;
presentation-hide-text ::= presentation:hide-text::(common-presentation-effect-attlist presentation-sound?) ;
style-drawing-page-properties-content-strict ::= style-graphic-fill-properties-attlist style-drawing-page-properties-attlist style-drawing-page-properties-elements ;
anyURI ::= string() ;
style-ruby-properties-content-strict ::= style-ruby-properties-attlist style-ruby-properties-elements ;
style-tab-stop-char-attlist ::= style:char::character ;
table-deletion-attlist ::= table:type::("row" | "column" | "table") ;
 table-deletion-attlist ::= table:position::integer ;
 table-deletion-attlist ::= (table:table::integer)? ;
 table-deletion-attlist ::= (table:multi-deletion-spanned::integer)? ;
number-text-content ::= number:text-content::ε ;
styleName ::= string() ;
draw-plugin ::= draw:plugin::(draw-plugin-attlist common-draw-data-attlist draw-param*) ;
table-database-source-query-attlist ::= table:database-name::string ;
 table-database-source-query-attlist ::= table:query-name::string ;
office-drawing-content-prelude ::= text-decls table-decls ;
text-content ::= text-h | text-p | text-list | text-numbered-paragraph | table-table | draw-a | text-section | text-soft-page-break | text-table-of-content | text-illustration-index | text-table-index | text-object-index | text-user-index | text-alphabetical-index | text-bibliography | shape | change-marks ;
draw-area-rectangle ::= draw:area-rectangle::(common-draw-area-attlist svg:x::coordinate svg:y::coordinate svg:width::length svg:height::length svg-title? svg-desc? office-event-listeners?) ;
table-table-rows ::= table:table-rows::((text-soft-page-break? table-table-row)+) ;
style-tab-stop ::= style:tab-stop::style-tab-stop-attlist ;
number-date-style ::= number:date-style::(common-data-style-attlist common-auto-reorder-attlist common-format-source-attlist style-text-properties? number-text? (any-date number-text?)+ style-map*) ;
draw-marker-attlist ::= draw:name::styleName ;
 draw-marker-attlist ::= (draw:display-name::string)? ;
chart-grid ::= chart:grid::chart-grid-attlist ;
table-table-cell-attlist-extra ::= (table:number-columns-spanned::positiveInteger)? (table:number-rows-spanned::positiveInteger)? ;
 table-table-cell-attlist-extra ::= (table:number-matrix-columns-spanned::positiveInteger)? (table:number-matrix-rows-spanned::positiveInteger)? ;
common-text-spreadsheet-shape-attlist ::= (table:end-cell-address::cellAddress)? (table:end-x::coordinate)? (table:end-y::coordinate)? ;
 common-text-spreadsheet-shape-attlist ::= (table:table-background::boolean)? ;
 common-text-spreadsheet-shape-attlist ::= common-text-anchor-attlist ;
common-draw-text-style-name-attlist ::= (draw:text-style-name::styleNameRef)? ;
table-shapes ::= table:shapes::(shape+) ;
style-graphic-properties-elements ::= ε ;
 style-graphic-properties-elements ::= text-list-style? ;
 style-graphic-properties-elements ::= style-background-image ;
 style-graphic-properties-elements ::= style-columns ;
text-p ::= text:p::(paragraph-attrs paragraph-content*) ;
common-style-header-footer-attlist ::= (style:display::boolean)? ;
draw-line-attlist ::= svg:x1::coordinate svg:y1::coordinate ;
 draw-line-attlist ::= svg:x2::coordinate svg:y2::coordinate ;
table-movement ::= table:movement::(common-table-change-attlist table-source-range-address table-target-range-address office-change-info table-dependencies? table-deletions?) ;
script-event-listener ::= script:event-listener::script-event-listener-attlist ;
style-tab-stop-attlist ::= style:position::nonNegativeLength ;
 style-tab-stop-attlist ::= ((style:type::("left" | "center" | "right"))?) | (style:type::"char" style-tab-stop-char-attlist) ;
 style-tab-stop-attlist ::= (style:leader-type::lineType)? ;
 style-tab-stop-attlist ::= (style:leader-style::lineStyle)? ;
 style-tab-stop-attlist ::= (style:leader-width::lineWidth)? ;
 style-tab-stop-attlist ::= (style:leader-color::("font-color" | color))? ;
 style-tab-stop-attlist ::= (style:leader-text::string)? ;
 style-tab-stop-attlist ::= (style:leader-text-style::styleNameRef)? ;
text-h ::= text:h::(heading-attrs paragraph-attrs text-number? paragraph-content*) ;
text-outline-style ::= text:outline-style::(text-outline-level-style+) ;
draw-control-attlist ::= draw:control::IDREF ;
table-table-column-attlist ::= (table:number-columns-repeated::positiveInteger)? ;
 table-table-column-attlist ::= (table:style-name::styleNameRef)? ;
 table-table-column-attlist ::= (table:visibility::table-visibility-value)? ;
 table-table-column-attlist ::= (table:default-cell-style-name::styleNameRef)? ;
text-placeholder-attlist ::= text:placeholder-type::("text" | "table" | "text-box" | "image" | "object") ;
 text-placeholder-attlist ::= common-field-description-attlist ;
office-document-settings ::= office:document-settings::(office-document-common-attrs office-settings) ;
style-table-row-properties-elements ::= style-background-image ;
draw-handle-attlist ::= (draw:handle-mirror-vertical::boolean)? ;
 draw-handle-attlist ::= (draw:handle-mirror-horizontal::boolean)? ;
 draw-handle-attlist ::= (draw:handle-switched::boolean)? ;
 draw-handle-attlist ::= draw:handle-position::string ;
 draw-handle-attlist ::= (draw:handle-range-x-minimum::string)? ;
 draw-handle-attlist ::= (draw:handle-range-x-maximum::string)? ;
 draw-handle-attlist ::= (draw:handle-range-y-minimum::string)? ;
 draw-handle-attlist ::= (draw:handle-range-y-maximum::string)? ;
 draw-handle-attlist ::= (draw:handle-polar::string)? ;
 draw-handle-attlist ::= (draw:handle-radius-range-minimum::string)? ;
 draw-handle-attlist ::= (draw:handle-radius-range-maximum::string)? ;
presentation-show-attlist ::= presentation:name::string ;
 presentation-show-attlist ::= presentation:pages::string() ;
style-columns ::= (style:columns::(style-columns-attlist style-column-sep? style-column*))? ;
table-subtotal-rules-attlist ::= (table:bind-styles-to-content::boolean)? ;
 table-subtotal-rules-attlist ::= (table:case-sensitive::boolean)? ;
 table-subtotal-rules-attlist ::= (table:page-breaks-on-group-change::boolean)? ;
table-calculation-setting-attlist ::= (table:case-sensitive::boolean)? ;
 table-calculation-setting-attlist ::= (table:precision-as-shown::boolean)? ;
 table-calculation-setting-attlist ::= (table:search-criteria-must-apply-to-whole-cell::boolean)? ;
 table-calculation-setting-attlist ::= (table:automatic-find-labels::boolean)? ;
 table-calculation-setting-attlist ::= (table:use-regular-expressions::boolean)? ;
 table-calculation-setting-attlist ::= (table:null-year::positiveInteger)? ;
text-section-source-dde ::= office-dde-source ;
number-am-pm ::= number:am-pm::ε ;
lineMode ::= "continuous" | "skip-white-space" ;
style-list-level-properties-elements ::= ε ;
number-time-style ::= number:time-style::(number-time-style-attlist common-data-style-attlist common-format-source-attlist style-text-properties? number-text? (any-time number-text?)+ style-map*) ;
text-dde-connection-decl ::= text:dde-connection-decl::(text-dde-connection-decl-attlist common-dde-connection-decl-attlist) ;
style-table-column-properties ::= style:table-column-properties::style-table-column-properties-content ;
anyAttListOrElements ::= string()* anyElements ;
chart-stock-range-line ::= chart:stock-range-line::common-stock-marker-attlist ;
chart-title ::= chart:title::(chart-title-attlist text-p?) ;
nonNegativeLength ::= string() ;
index-content-main ::= text-content | text-index-title ;
fontWeight ::= "normal" | "bold" | "100" | "200" | "300" | "400" | "500" | "600" | "700" | "800" | "900" ;
common-tab-attlist ::= (form:tab-index::nonNegativeInteger)? ;
 common-tab-attlist ::= (form:tab-stop::boolean)? ;
common-anim-attlist ::= (presentation:node-type::("default" | "on-click" | "with-previous" | "after-previous" | "timing-root" | "main-sequence" | "interactive-sequence"))? ;
 common-anim-attlist ::= (presentation:preset-id::string)? ;
 common-anim-attlist ::= (presentation:preset-sub-type::string)? ;
 common-anim-attlist ::= (presentation:preset-class::("custom" | "entrance" | "exit" | "emphasis" | "motion-path" | "ole-action" | "media-call"))? ;
 common-anim-attlist ::= (presentation:master-element::IDREF)? ;
 common-anim-attlist ::= (presentation:group-id::string)? ;
 common-anim-attlist ::= (anim:id::ID)? ;
config-config-item-attlist ::= config:name::string ;
 config-config-item-attlist ::= config:type::("boolean" | "short" | "int" | "long" | "double" | "string" | "datetime" | "base64Binary") ;
draw-frame ::= draw:frame::(common-draw-shape-with-text-and-styles-attlist common-draw-position-attlist common-draw-rel-size-attlist common-draw-caption-id-attlist presentation-shape-attlist draw-frame-attlist (draw-text-box | draw-image | draw-object | draw-object-ole | draw-applet | draw-floating-frame | draw-plugin)* office-event-listeners? draw-glue-point* draw-image-map? svg-title? svg-desc? (draw-contour-polygon | draw-contour-path)?) ;
common-form-control-content ::= form-properties? office-event-listeners? ;
table-iteration ::= table:iteration::((table:status::("enable" | "disable"))? (table:steps::positiveInteger)? (table:maximum-difference::double)?) ;
dateTime ::= string() ;
common-draw-caption-id-attlist ::= (draw:caption-id::IDREF)? ;
text-user-index-source ::= text:user-index-source::(text-user-index-source-attr text-index-title-template? text-user-index-entry-template* text-index-source-styles*) ;
text-index-entry-chapter ::= text:index-entry-chapter::((text:style-name::styleNameRef)? text-index-entry-chapter-attrs) ;
table-data-pilot-subtotals ::= table:data-pilot-subtotals::(table-data-pilot-subtotal*) ;
style-page-layout-properties ::= style:page-layout-properties::style-page-layout-properties-content ;
form-connection-resource ::= form:connection-resource::(xlink:href::anyURI) ;
draw-text-box ::= draw:text-box::(draw-text-box-attlist text-content*) ;
draw-image ::= draw:image::(draw-image-attlist common-draw-data-attlist | office-binary-data draw-text) ;
table-data-pilot-field-reference-attlist ::= table:field-name::string ;
 table-data-pilot-field-reference-attlist ::= (table:member-type::"named" table:member-name::string) | (table:member-type::("previous" | "next")) ;
 table-data-pilot-field-reference-attlist ::= table:type::("none" | "member-difference" | "member-percentage" | "member-percentage-difference" | "running-total" | "row-percentage" | "column-percentage" | "total-percentage" | "index") ;
common-break-attlist ::= (fo:break-before::("auto" | "column" | "page"))? (fo:break-after::("auto" | "column" | "page"))? ;
common-table-range-attlist ::= common-table-cell-address-attlist | common-table-cell-range-address-attlist ;
chart-error-indicator-attlist ::= (chart:style-name::styleNameRef)? ;
table-data-pilot-groups ::= table:data-pilot-groups::(table-data-pilot-groups-attlist table-data-pilot-group+) ;
number-hours ::= number:hours::number-hours-attlist ;
table-table-source-attlist ::= (table:mode::("copy-all" | "copy-results-only"))? ;
 table-table-source-attlist ::= (table:table-name::string)? ;
draw-layer ::= draw:layer::(draw-layer-attlist svg-title? svg-desc?) ;
common-text-align ::= (fo:text-align::("start" | "end" | "left" | "right" | "center" | "justify"))? ;
style-style-attlist ::= style:name::styleName ;
 style-style-attlist ::= (style:display-name::string)? ;
 style-style-attlist ::= (style:parent-style-name::styleNameRef)? ;
 style-style-attlist ::= (style:next-style-name::styleNameRef)? ;
 style-style-attlist ::= (style:list-style-name::(styleName | ε))? ;
 style-style-attlist ::= (style:master-page-name::styleNameRef)? ;
 style-style-attlist ::= (style:auto-update::boolean)? ;
 style-style-attlist ::= (style:data-style-name::styleNameRef)? ;
 style-style-attlist ::= (style:class::string)? ;
 style-style-attlist ::= (style:default-outline-level::positiveInteger)? ;
draw-image-attlist ::= (draw:filter-name::string)? ;
paragraph-attrs ::= (text:style-name::styleNameRef)? (text:class-names::styleNameRefs)? (text:cond-style-name::styleNameRef)? ;
 paragraph-attrs ::= text-id? ;
table-columns-no-group ::= (table-columns (table-table-header-columns table-columns?)?) | (table-table-header-columns table-columns?) ;
form-fixed-text-attlist ::= form-control-attlist for common-disabled-attlist label common-printable-attlist common-title-attlist ;
 form-fixed-text-attlist ::= (form:multi-line::boolean)? ;
draw-floating-frame-attlist ::= (draw:frame-name::string)? ;
style-drawing-page-properties-elements ::= presentation-sound? ;
presentation-decl ::= presentation:header-decl::(presentation-header-decl-attlist string()) ;
 presentation-decl ::= presentation:footer-decl::(presentation-footer-decl-attlist string()) ;
 presentation-decl ::= presentation:date-time-decl::(presentation-date-time-decl-attlist string()) ;
style-properties-content ::= anyAttListOrElements ;
common-draw-size-attlist ::= (svg:width::length)? (svg:height::length)? ;
text-changed-region-content ::= text:insertion::office-change-info ;
 text-changed-region-content ::= text:deletion::(office-change-info text-content*) ;
 text-changed-region-content ::= text:format-change::office-change-info ;
table-table-template ::= table:table-template::(table-table-template-attlist table-first-row? table-last-row? table-first-column? table-last-column? table-body | (table-even-rows table-odd-rows) | (table-even-columns table-odd-columns)) ;
dr3d-extrude ::= dr3d:extrude::(common-draw-path-data-attlist common-draw-viewbox-attlist common-draw-id-attlist common-draw-z-index-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-dr3d-transform-attlist) ;
form-password-attlist ::= form-control-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist ;
 form-password-attlist ::= (form:echo-char::character)? ;
common-style-direction-attlist ::= (style:direction::("ltr" | "ttb"))? ;
draw-regular-polygon-attlist ::= (draw:concave::"false") | (draw:concave::"true" draw-regular-polygon-sharpness-attlist) ;
 draw-regular-polygon-attlist ::= draw:corners::positiveInteger ;
form-column-attlist ::= common-form-control-attlist label text-style-name ;
text-sequence-ref-name ::= (text:ref-name::string)? ;
table-insertion ::= table:insertion::(table-insertion-attlist common-table-change-attlist office-change-info table-dependencies? table-deletions?) ;
table-label-ranges ::= table:label-ranges::(table-label-range*) ;
table-even-rows ::= table:even-rows::common-table-template-attlist ;
chart-categories ::= chart:categories::((table:cell-range-address::cellRangeAddress)?) ;
draw-page-attlist ::= (draw:name::string)? ;
 draw-page-attlist ::= (draw:style-name::styleNameRef)? ;
 draw-page-attlist ::= draw:master-page-name::styleNameRef ;
 draw-page-attlist ::= (presentation:presentation-page-layout-name::styleNameRef)? ;
 draw-page-attlist ::= (draw:id::ID)? ;
 draw-page-attlist ::= (draw:nav-order::IDREFS)? ;
table-database-ranges ::= table:database-ranges::(table-database-range*) ;
style-drawing-page-properties ::= style:drawing-page-properties::style-drawing-page-properties-content ;
config-config-item-map-indexed ::= config:config-item-map-indexed::(config-config-item-map-indexed-attlist config-config-item-map-entry+) ;
style-table-cell-properties ::= style:table-cell-properties::style-table-cell-properties-content ;
style-section-properties-content ::= style-section-properties-content-strict ;
 style-section-properties-content ::= style-properties-content ;
table-table-cell ::= table:table-cell::(table-table-cell-attlist table-table-cell-attlist-extra table-table-cell-content) ;
table-consolidation-attlist ::= table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string) ;
 table-consolidation-attlist ::= table:source-cell-range-addresses::cellRangeAddressList ;
 table-consolidation-attlist ::= table:target-cell-address::cellAddress ;
 table-consolidation-attlist ::= (table:use-labels::("none" | "row" | "column" | "both"))? ;
 table-consolidation-attlist ::= (table:link-to-source-data::boolean)? ;
style-tab-stops ::= (style:tab-stops::(style-tab-stop*))? ;
style-data-style-attlist ::= (style:display-name::string)? ;
dr3d-light-attlist ::= (dr3d:diffuse-color::color)? ;
 dr3d-light-attlist ::= dr3d:direction::vector3D ;
 dr3d-light-attlist ::= (dr3d:enabled::boolean)? ;
 dr3d-light-attlist ::= (dr3d:specular::boolean)? ;
office-chart-content-prelude ::= text-decls table-decls ;
style-drawing-page-properties-attlist ::= (presentation:transition-type::("manual" | "automatic" | "semi-automatic"))? ;
 style-drawing-page-properties-attlist ::= (presentation:transition-style::("none" | "fade-from-left" | "fade-from-top" | "fade-from-right" | "fade-from-bottom" | "fade-from-upperleft" | "fade-from-upperright" | "fade-from-lowerleft" | "fade-from-lowerright" | "move-from-left" | "move-from-top" | "move-from-right" | "move-from-bottom" | "move-from-upperleft" | "move-from-upperright" | "move-from-lowerleft" | "move-from-lowerright" | "uncover-to-left" | "uncover-to-top" | "uncover-to-right" | "uncover-to-bottom" | "uncover-to-upperleft" | "uncover-to-upperright" | "uncover-to-lowerleft" | "uncover-to-lowerright" | "fade-to-center" | "fade-from-center" | "vertical-stripes" | "horizontal-stripes" | "clockwise" | "counterclockwise" | "open-vertical" | "open-horizontal" | "close-vertical" | "close-horizontal" | "wavyline-from-left" | "wavyline-from-top" | "wavyline-from-right" | "wavyline-from-bottom" | "spiralin-left" | "spiralin-right" | "spiralout-left" | "spiralout-right" | "roll-from-top" | "roll-from-left" | "roll-from-right" | "roll-from-bottom" | "stretch-from-left" | "stretch-from-top" | "stretch-from-right" | "stretch-from-bottom" | "vertical-lines" | "horizontal-lines" | "dissolve" | "random" | "vertical-checkerboard" | "horizontal-checkerboard" | "interlocking-horizontal-left" | "interlocking-horizontal-right" | "interlocking-vertical-top" | "interlocking-vertical-bottom" | "fly-away" | "open" | "close" | "melt"))? ;
 style-drawing-page-properties-attlist ::= (presentation:transition-speed::presentationSpeeds)? ;
 style-drawing-page-properties-attlist ::= (smil:subtype::string)? ;
 style-drawing-page-properties-attlist ::= (smil:direction::("forward" | "reverse"))? ;
 style-drawing-page-properties-attlist ::= (smil:fadeColor::color)? ;
 style-drawing-page-properties-attlist ::= (presentation:duration::duration)? ;
 style-drawing-page-properties-attlist ::= (presentation:visibility::("visible" | "hidden"))? ;
 style-drawing-page-properties-attlist ::= (draw:background-size::("full" | "border"))? ;
 style-drawing-page-properties-attlist ::= (presentation:background-objects-visible::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:background-visible::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:display-header::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:display-footer::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:display-page-number::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:display-date-time::boolean)? ;
 style-drawing-page-properties-attlist ::= (smil:type::string)? ;
table-data-pilot-layout-info ::= table:data-pilot-layout-info::table-data-pilot-layout-info-attlist ;
config-config-item-map-indexed-attlist ::= config:name::string ;
table-sort-groups-attlist ::= (table:data-type::("text" | "number" | "automatic" | string))? ;
 table-sort-groups-attlist ::= (table:order::("ascending" | "descending"))? ;
presentation-dim ::= presentation:dim::(presentation-dim-attlist presentation-sound?) ;
anim-animate-motion-attlist ::= (svg:path::pathData)? ;
 anim-animate-motion-attlist ::= (svg:origin::string)? ;
 anim-animate-motion-attlist ::= (smil:calcMode::("discrete" | "linear" | "paced" | "spline"))? ;
mathMarkup ::= (α | string() | mathMarkup)* ;
presentation-date-time-decl-attlist ::= presentation:name::string ;
 presentation-date-time-decl-attlist ::= presentation:source::("fixed" | "current-date") ;
 presentation-date-time-decl-attlist ::= (style:data-style-name::styleNameRef)? ;
text-template-name-attlist ::= (text:display::("full" | "path" | "name" | "name-and-extension" | "area" | "title"))? ;
draw-caption-attlist ::= (draw:caption-point-x::coordinate draw:caption-point-y::coordinate)? ;
 draw-caption-attlist ::= (draw:corner-radius::nonNegativeLength)? ;
style-section-properties-elements ::= style-background-image ;
 style-section-properties-elements ::= style-columns ;
 style-section-properties-elements ::= text-notes-configuration* ;
form-button-attlist ::= form-control-attlist button-type common-disabled-attlist label image-data common-printable-attlist common-tab-attlist target-frame target-location common-title-attlist common-value-attlist common-form-relative-image-position-attlist ;
 form-button-attlist ::= (form:default-button::boolean)? ;
 form-button-attlist ::= (form:toggle::boolean)? ;
 form-button-attlist ::= (form:focus-on-click::boolean)? ;
 form-button-attlist ::= (form:xforms-submission::string)? ;
column-controls ::= form:text::(form-text-attlist common-form-control-content) ;
 column-controls ::= form:textarea::(form-textarea-attlist common-form-control-content text-p*) ;
 column-controls ::= form:formatted-text::(form-formatted-text-attlist common-form-control-content) ;
 column-controls ::= form:number::(form-number-attlist common-numeric-control-attlist common-form-control-content) ;
 column-controls ::= form:date::(form-date-attlist common-numeric-control-attlist common-form-control-content) ;
 column-controls ::= form:combobox::(form-combobox-attlist common-form-control-content form-item*) ;
 column-controls ::= form:listbox::(form-listbox-attlist common-form-control-content form-option*) ;
 column-controls ::= form:checkbox::(form-checkbox-attlist common-form-control-content) ;
chart-wall-attlist ::= (svg:width::length)? ;
 chart-wall-attlist ::= (chart:style-name::styleNameRef)? ;
text-index-title-template ::= text:index-title-template::((text:style-name::styleNameRef)? string()) ;
dr3d-rotate ::= dr3d:rotate::(common-draw-viewbox-attlist common-draw-path-data-attlist common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-dr3d-transform-attlist) ;
meta-date-string ::= meta:date-string::string ;
table-content-validations ::= table:content-validations::(table-content-validation+) ;
form-control-attlist ::= common-form-control-attlist common-control-id-attlist xforms-bind-attlist ;
chart-series ::= chart:series::(chart-series-attlist chart-domain* chart-mean-value? chart-regression-curve? chart-error-indicator? chart-data-point*) ;
table-calculation-settings ::= table:calculation-settings::(table-calculation-setting-attlist table-null-date? table-iteration?) ;
text-index-name ::= text:index-name::string ;
common-field-display-value-none-attlist ::= (text:display::("value" | "none"))? ;
table-data-pilot-member-attlist ::= table:name::string ;
 table-data-pilot-member-attlist ::= (table:display::boolean)? ;
 table-data-pilot-member-attlist ::= (table:show-details::boolean)? ;
style-header-footer-properties-elements ::= style-background-image ;
presentation-placeholder ::= presentation:placeholder::(presentation:object::presentation-classes svg:x::(coordinate | percent) svg:y::(coordinate | percent) svg:width::(length | percent) svg:height::(length | percent)) ;
style-map ::= style:map::style-map-attlist ;
style-page-layout-properties-content ::= style-page-layout-properties-content-strict ;
 style-page-layout-properties-content ::= style-properties-content ;
number-number-attlist ::= (number:decimal-replacement::string())? ;
 number-number-attlist ::= (number:display-factor::double)? ;
text-index-source-style ::= text:index-source-style::(text:style-name::styleName) ;
style-paragraph-properties-content ::= style-paragraph-properties-content-strict ;
 style-paragraph-properties-content ::= style-properties-content ;
common-field-description-attlist ::= (text:description::string())? ;
chart-series-attlist ::= (chart:values-cell-range-address::cellRangeAddress)? ;
 chart-series-attlist ::= (chart:label-cell-address::cellAddress)? ;
 chart-series-attlist ::= (chart:class::namespacedToken)? ;
 chart-series-attlist ::= (chart:attached-axis::string)? ;
 chart-series-attlist ::= (chart:style-name::styleNameRef)? ;
common-draw-transform-attlist ::= (draw:transform::string)? ;
common-shadow-attlist ::= (style:shadow::shadowType)? ;
common-num-format-attlist ::= (style:num-format::("1" | "i" | "I" | string | ε)) | (style:num-format::("a" | "A") style-num-letter-sync-attlist) | ε ;
text-page ::= text:page::text-page-attlist ;
common-data-field-attlist ::= (form:data-field::string)? ;
variableName ::= string() ;
draw-regular-polygon-sharpness-attlist ::= draw:sharpness::percent ;
table-deletions ::= table:deletions::((table-cell-content-deletion | table-change-deletion)+) ;
text-list-level-style-attr ::= text:level::positiveInteger ;
table-data-pilot-sort-info ::= table:data-pilot-sort-info::table-data-pilot-sort-info-attlist ;
table-tracked-changes ::= table:tracked-changes::(table-tracked-changes-attlist (table-cell-content-change | table-insertion | table-deletion | table-movement)*) ;
table-database-source-sql-attlist ::= table:database-name::string ;
 table-database-source-sql-attlist ::= table:sql-statement::string ;
 table-database-source-sql-attlist ::= (table:parse-sql-statement::boolean)? ;
presentation-shape-attlist ::= (presentation:class::presentation-classes)? ;
 presentation-shape-attlist ::= (presentation:placeholder::boolean)? ;
 presentation-shape-attlist ::= (presentation:user-transformed::boolean)? ;
style-chart-properties ::= style:chart-properties::style-chart-properties-content ;
text-alphabetical-index ::= text:alphabetical-index::(sectionAttr text-alphabetical-index-source text-index-body) ;
office-change-info ::= office:change-info::(dc-creator dc-date text-p*) ;
paragraph-content ::= string() ;
 paragraph-content ::= text:s::((text:c::nonNegativeInteger)?) ;
 paragraph-content ::= text:tab::text-tab-attr ;
 paragraph-content ::= text:line-break::ε ;
 paragraph-content ::= text-soft-page-break ;
 paragraph-content ::= text:span::((text:style-name::styleNameRef)? (text:class-names::styleNameRefs)? paragraph-content*) ;
 paragraph-content ::= text:a::(text-a-attlist office-event-listeners? paragraph-content*) ;
 paragraph-content ::= (text:bookmark::(text:name::string)) | (text:bookmark-start::(text:name::string)) | (text:bookmark-end::(text:name::string)) ;
 paragraph-content ::= text:reference-mark::(text:name::string) ;
 paragraph-content ::= (text:reference-mark-start::(text:name::string)) | (text:reference-mark-end::(text:name::string)) ;
 paragraph-content ::= text:note::(text-note-class (text:id::string)? text:note-citation::((text:label::string)? string()) text:note-body::(text-content*)) ;
 paragraph-content ::= text:ruby::((text:style-name::styleNameRef)? text:ruby-base::paragraph-content text:ruby-text::((text:style-name::styleNameRef)? string())) ;
 paragraph-content ::= office-annotation ;
 paragraph-content ::= change-marks ;
 paragraph-content ::= shape | draw-a ;
 paragraph-content ::= text:date::(text-date-attlist string()) ;
 paragraph-content ::= text:time::(text-time-attlist string()) ;
 paragraph-content ::= text:page-number::(text-page-number-attlist string()) ;
 paragraph-content ::= text:page-continuation::(text-page-continuation-attlist string()) ;
 paragraph-content ::= text:sender-firstname::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-lastname::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-initials::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-title::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-position::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-email::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-phone-private::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-fax::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-company::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-phone-work::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-street::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-city::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-postal-code::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-country::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-state-or-province::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:author-name::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:author-initials::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:chapter::(text-chapter-attlist string()) ;
 paragraph-content ::= text:file-name::(text-file-name-attlist string()) ;
 paragraph-content ::= text:template-name::(text-template-name-attlist string()) ;
 paragraph-content ::= text:sheet-name::string() ;
 paragraph-content ::= text:variable-set::(common-field-name-attlist common-field-formula-attlist common-value-and-type-attlist common-field-display-value-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:variable-get::(common-field-name-attlist common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:variable-input::(common-field-name-attlist common-field-description-attlist common-value-type-attlist common-field-display-value-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:user-field-get::(common-field-name-attlist common-field-display-value-formula-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:user-field-input::(common-field-name-attlist common-field-description-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:sequence::(common-field-name-attlist common-field-formula-attlist common-field-num-format-attlist text-sequence-ref-name string()) ;
 paragraph-content ::= text:expression::(common-field-formula-attlist common-value-and-type-attlist? common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:text-input::(common-field-description-attlist string()) ;
 paragraph-content ::= text:initial-creator::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:creation-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::dateOrDateTime)? string()) ;
 paragraph-content ::= text:creation-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::timeOrDateTime)? string()) ;
 paragraph-content ::= text:description::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:user-defined::(common-field-fixed-attlist text:name::string common-field-data-style-name-attlist (office:value::double)? (office:date-value::dateOrDateTime)? (office:time-value::duration)? (office:boolean-value::boolean)? (office:string-value::string)? string()) ;
 paragraph-content ::= text:print-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::time)? string()) ;
 paragraph-content ::= text:print-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::date)? string()) ;
 paragraph-content ::= text:printed-by::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:title::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:subject::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:keywords::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:editing-cycles::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:editing-duration::(common-field-fixed-attlist common-field-data-style-name-attlist (text:duration::duration)? string()) ;
 paragraph-content ::= text:modification-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::time)? string()) ;
 paragraph-content ::= text:modification-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::date)? string()) ;
 paragraph-content ::= text:creator::(common-field-fixed-attlist string()) ;
 paragraph-content ::= (text:page-count::(common-field-num-format-attlist string())) | (text:paragraph-count::(common-field-num-format-attlist string())) | (text:word-count::(common-field-num-format-attlist string())) | (text:character-count::(common-field-num-format-attlist string())) | (text:table-count::(common-field-num-format-attlist string())) | (text:image-count::(common-field-num-format-attlist string())) | (text:object-count::(common-field-num-format-attlist string())) ;
 paragraph-content ::= text:database-display::(text-database-display-attlist string()) ;
 paragraph-content ::= text:database-next::text-database-next-attlist ;
 paragraph-content ::= text:database-row-select::text-database-row-select-attlist ;
 paragraph-content ::= text:database-row-number::(common-field-database-table common-field-num-format-attlist (text:value::nonNegativeInteger)? string()) ;
 paragraph-content ::= text:database-name::(common-field-database-table string()) ;
 paragraph-content ::= text:page-variable-set::(text-set-page-variable-attlist string()) ;
 paragraph-content ::= text:page-variable-get::(text-get-page-variable-attlist string()) ;
 paragraph-content ::= text:placeholder::(text-placeholder-attlist string()) ;
 paragraph-content ::= text:conditional-text::(text-conditional-text-attlist string()) ;
 paragraph-content ::= text:hidden-text::(text-hidden-text-attlist string()) ;
 paragraph-content ::= (text:reference-ref::(text-common-ref-content text-ref-content)) | (text:bookmark-ref::(text-common-ref-content text-ref-content)) ;
 paragraph-content ::= text:note-ref::(text-common-ref-content text-note-ref-content text-ref-content) ;
 paragraph-content ::= text:sequence-ref::(text-common-ref-content text-sequence-ref-content) ;
 paragraph-content ::= text:script::((xlink:href::anyURI (xlink:type::"simple")?) | string() (script:language::string)?) ;
 paragraph-content ::= text:execute-macro::((text:name::string)? office-event-listeners? string()) ;
 paragraph-content ::= text:hidden-paragraph::(text-hidden-paragraph-attlist string()) ;
 paragraph-content ::= text:dde-connection::(text:connection-name::string string()) ;
 paragraph-content ::= text:measure::(text:kind::("value" | "unit" | "gap") string()) ;
 paragraph-content ::= text:table-formula::(common-field-formula-attlist common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:toc-mark-start::text-toc-mark-start-attrs ;
 paragraph-content ::= text:toc-mark-end::text-id ;
 paragraph-content ::= text:toc-mark::(text:string-value::string text-outline-level) ;
 paragraph-content ::= text:user-index-mark-start::(text-id text-outline-level text-index-name) ;
 paragraph-content ::= text:user-index-mark-end::(text-id text-outline-level) ;
 paragraph-content ::= text:user-index-mark::(text:string-value::string text-outline-level text-index-name) ;
 paragraph-content ::= text:alphabetical-index-mark-start::(text-id text-alphabetical-index-mark-attrs) ;
 paragraph-content ::= text:alphabetical-index-mark-end::text-id ;
 paragraph-content ::= text:alphabetical-index-mark::(text:string-value::string text-alphabetical-index-mark-attrs) ;
 paragraph-content ::= text:bibliography-mark::(text:bibliography-type::text-bibliography-types ((text:identifier::string) | (text:address::string) | (text:annote::string) | (text:author::string) | (text:booktitle::string) | (text:chapter::string) | (text:edition::string) | (text:editor::string) | (text:howpublished::string) | (text:institution::string) | (text:journal::string) | (text:month::string) | (text:note::string) | (text:number::string) | (text:organizations::string) | (text:pages::string) | (text:publisher::string) | (text:school::string) | (text:series::string) | (text:title::string) | (text:report-type::string) | (text:volume::string) | (text:year::string) | (text:url::string) | (text:custom1::string) | (text:custom2::string) | (text:custom3::string) | (text:custom4::string) | (text:custom5::string) | (text:isbn::string) | (text:issn::string))* string()) ;
 paragraph-content ::= presentation:header::ε ;
 paragraph-content ::= presentation:footer::ε ;
 paragraph-content ::= presentation:date-time::ε ;
config-config-item-map-entry-attlist ::= (config:name::string)? ;
number-day ::= number:day::(number-day-attlist common-calendar-attlist) ;
styleNameRef ::= string() | ε ;
common-endsync-timing-attlist ::= (smil:endsync::("first" | "last" | "all" | "media"))? ;
table-visibility-value ::= "visible" | "collapse" | "filter" ;
change-mark-attr ::= text:change-id::IDREF ;
common-vertical-pos-attlist ::= (style:vertical-pos::("top" | "middle" | "bottom" | "from-top" | "below"))? (svg:y::coordinate)? ;
style-chart-properties-attlist ::= (chart:scale-text::boolean)? ;
 style-chart-properties-attlist ::= (chart:three-dimensional::boolean)? ;
 style-chart-properties-attlist ::= (chart:deep::boolean)? ;
 style-chart-properties-attlist ::= (chart:symbol-type::"none") | (chart:symbol-type::"automatic") | (chart:symbol-type::"named-symbol" chart:symbol-name::("square" | "diamond" | "arrow-down" | "arrow-up" | "arrow-right" | "arrow-left" | "bow-tie" | "hourglass" | "circle" | "star" | "x" | "plus" | "asterisk" | "horizontal-bar" | "vertical-bar")) | (chart:symbol-type::"image" chart:symbol-image::(xlink:href::anyURI)) | ε ;
 style-chart-properties-attlist ::= (chart:symbol-width::nonNegativeLength)? (chart:symbol-height::nonNegativeLength)? ;
 style-chart-properties-attlist ::= (chart:vertical::boolean)? ;
 style-chart-properties-attlist ::= (chart:connect-bars::boolean)? ;
 style-chart-properties-attlist ::= (chart:gap-width::integer)? (chart:overlap::integer)? ;
 style-chart-properties-attlist ::= (chart:japanese-candle-stick::boolean)? ;
 style-chart-properties-attlist ::= (chart:interpolation::("none" | "cubic-spline" | "b-spline"))? (chart:spline-order::positiveInteger)? (chart:spline-resolution::positiveInteger)? ;
 style-chart-properties-attlist ::= (chart:pie-offset::nonNegativeInteger)? ;
 style-chart-properties-attlist ::= (chart:lines::boolean)? ;
 style-chart-properties-attlist ::= (chart:solid-type::("cuboid" | "cylinder" | "cone" | "pyramid"))? ;
 style-chart-properties-attlist ::= (chart:stacked::boolean)? (chart:percentage::boolean)? ;
 style-chart-properties-attlist ::= (chart:link-data-style-to-source::boolean)? ;
 style-chart-properties-attlist ::= (chart:visible::boolean)? ;
 style-chart-properties-attlist ::= (chart:logarithmic::boolean)? ;
 style-chart-properties-attlist ::= (chart:maximum::double)? (chart:minimum::double)? (chart:origin::double)? (chart:interval-major::double)? (chart:interval-minor-divisor::positiveInteger)? ;
 style-chart-properties-attlist ::= (chart:tick-marks-major-inner::boolean)? (chart:tick-marks-major-outer::boolean)? (chart:tick-marks-minor-inner::boolean)? (chart:tick-marks-minor-outer::boolean)? ;
 style-chart-properties-attlist ::= (chart:display-label::boolean)? (chart:text-overlap::boolean)? (text:line-break::boolean)? (chart:label-arrangement::("side-by-side" | "stagger-even" | "stagger-odd"))? ;
 style-chart-properties-attlist ::= common-style-direction-attlist ;
 style-chart-properties-attlist ::= common-rotation-angle-attlist ;
 style-chart-properties-attlist ::= (chart:data-label-number::("none" | "value" | "percentage"))? ;
 style-chart-properties-attlist ::= (chart:data-label-text::boolean)? ;
 style-chart-properties-attlist ::= (chart:data-label-symbol::boolean)? ;
 style-chart-properties-attlist ::= (chart:mean-value::boolean)? ;
 style-chart-properties-attlist ::= (chart:error-category::("none" | "variance" | "standard-deviation" | "percentage" | "error-margin" | "constant"))? ;
 style-chart-properties-attlist ::= (chart:error-percentage::double)? ;
 style-chart-properties-attlist ::= (chart:error-margin::double)? ;
 style-chart-properties-attlist ::= (chart:error-lower-limit::double)? (chart:error-upper-limit::double)? ;
 style-chart-properties-attlist ::= (chart:error-upper-indicator::boolean)? (chart:error-lower-indicator::boolean)? ;
 style-chart-properties-attlist ::= (chart:series-source::("columns" | "rows"))? ;
 style-chart-properties-attlist ::= (chart:regression-type::("none" | "linear" | "logarithmic" | "exponential" | "power"))? ;
style-page-layout-properties-elements ::= style-background-image ;
 style-page-layout-properties-elements ::= style-columns ;
 style-page-layout-properties-elements ::= style-footnote-sep ;
text-table-index-entry-template ::= text:table-index-entry-template::text-illustration-index-entry-content ;
text-linenumbering-configuration ::= text:linenumbering-configuration::(text-linenumbering-configuration-attlist text-linenumbering-separator?) ;
draw-path ::= draw:path::(common-draw-path-data-attlist common-draw-position-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
number-embedded-text ::= number:embedded-text::(number-embedded-text-attlist string()) ;
table-table-cell-content ::= table-cell-range-source? office-annotation? table-detective? text-content* ;
style-handout-master ::= style:handout-master::(common-presentation-header-footer-attlist style-handout-master-attlist shape*) ;
presentation-show-text ::= presentation:show-text::(common-presentation-effect-attlist presentation-sound?) ;
targetFrameName ::= "_self" | "_blank" | "_parent" | "_top" | string ;
draw-area-circle ::= draw:area-circle::(common-draw-area-attlist svg:cx::coordinate svg:cy::coordinate svg:r::length svg-title? svg-desc? office-event-listeners?) ;
text-user-index-source-attr ::= text-index-scope-attr text-relative-tab-stop-position-attr text:index-name::string ;
 text-user-index-source-attr ::= (text:use-index-marks::boolean)? (text:use-graphics::boolean)? (text:use-tables::boolean)? (text:use-floating-frames::boolean)? (text:use-objects::boolean)? ;
 text-user-index-source-attr ::= (text:copy-outline-levels::boolean)? ;
form-image-attlist ::= form-control-attlist button-type common-disabled-attlist image-data common-printable-attlist common-tab-attlist target-frame target-location common-title-attlist common-value-attlist ;
draw-connector ::= draw:connector::(draw-connector-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
table-highlighted-range ::= table:highlighted-range::(table-highlighted-range-attlist | table-highlighted-range-attlist-invalid) ;
anyElements ::= (string()? anyAttListOrElements string()?)* ;
style-column-sep ::= style:column-sep::style-column-sep-attlist ;
shapes3d ::= dr3d-scene | dr3d-extrude | dr3d-sphere | dr3d-rotate | dr3d-cube ;
text-linenumbering-configuration-attlist ::= (text:number-lines::boolean)? ;
 text-linenumbering-configuration-attlist ::= common-num-format-attlist? ;
 text-linenumbering-configuration-attlist ::= (text:style-name::styleNameRef)? ;
 text-linenumbering-configuration-attlist ::= (text:increment::nonNegativeInteger)? ;
 text-linenumbering-configuration-attlist ::= (text:number-position::("left" | "right" | "inner" | "outer"))? ;
 text-linenumbering-configuration-attlist ::= (text:offset::nonNegativeLength)? ;
 text-linenumbering-configuration-attlist ::= (text:count-empty-lines::boolean)? ;
 text-linenumbering-configuration-attlist ::= (text:count-in-text-boxes::boolean)? ;
 text-linenumbering-configuration-attlist ::= (text:restart-on-page::boolean)? ;
table-rows-and-groups ::= (table-table-row-group | table-rows-no-group)+ ;
office-drawing-attlist ::= ε ;
draw-stroke-dash ::= draw:stroke-dash::draw-stroke-dash-attlist ;
text-object-index-entry-template ::= text:object-index-entry-template::text-illustration-index-entry-content ;
list-source-type ::= (form:list-source-type::("table" | "query" | "sql" | "sql-pass-through" | "value-list" | "table-fields"))? ;
number-month ::= number:month::(number-month-attlist common-calendar-attlist) ;
chart-data-point ::= chart:data-point::chart-data-point-attlist ;
text-toc-mark-start-attrs ::= text-id text-outline-level ;
office-image-attlist ::= ε ;
office-scripts ::= (office:scripts::(office-script* office-event-listeners?))? ;
common-vertical-margin-attlist ::= (fo:margin-top::(nonNegativeLength | percent))? (fo:margin-bottom::(nonNegativeLength | percent))? ;
table-data-pilot-table ::= table:data-pilot-table::(table-data-pilot-table-attlist (table-database-source-sql | table-database-source-table | table-database-source-query | table-source-service | table-source-cell-range)? table-data-pilot-field+) ;
vector3D ::= string() ;
style-header-footer-properties-attlist ::= (svg:height::length)? (fo:min-height::length)? ;
 style-header-footer-properties-attlist ::= common-horizontal-margin-attlist common-vertical-margin-attlist common-margin-attlist ;
 style-header-footer-properties-attlist ::= common-border-attlist ;
 style-header-footer-properties-attlist ::= common-border-line-width-attlist ;
 style-header-footer-properties-attlist ::= common-padding-attlist ;
 style-header-footer-properties-attlist ::= common-background-color-attlist ;
 style-header-footer-properties-attlist ::= common-shadow-attlist ;
 style-header-footer-properties-attlist ::= (style:dynamic-spacing::boolean)? ;
style-column ::= style:column::style-column-attlist ;
style-font-face-attlist ::= (svg:font-family::string)? (svg:font-style::fontStyle)? (svg:font-variant::fontVariant)? (svg:font-weight::fontWeight)? (svg:font-stretch::("normal" | "ultra-condensed" | "extra-condensed" | "condensed" | "semi-condensed" | "semi-expanded" | "expanded" | "extra-expanded" | "ultra-expanded"))? (svg:font-size::positiveLength)? (svg:unicode-range::string())? (svg:units-per-em::integer)? (svg:panose-1::string())? (svg:stemv::integer)? (svg:stemh::integer)? (svg:slope::integer)? (svg:cap-height::integer)? (svg:x-height::integer)? (svg:accent-height::integer)? (svg:ascent::integer)? (svg:descent::integer)? (svg:widths::string())? (svg:bbox::string())? (svg:ideographic::integer)? (svg:alphabetic::integer)? (svg:mathematical::integer)? (svg:hanging::integer)? (svg:v-ideographic::integer)? (svg:v-alphabetic::integer)? (svg:v-mathematical::integer)? (svg:v-hanging::integer)? (svg:underline-position::integer)? (svg:underline-thickness::integer)? (svg:strikethrough-position::integer)? (svg:strikethrough-thickness::integer)? (svg:overline-position::integer)? (svg:overline-thickness::integer)? ;
 style-font-face-attlist ::= style:name::string ;
 style-font-face-attlist ::= (style:font-adornments::string)? ;
 style-font-face-attlist ::= (style:font-family-generic::fontFamilyGeneric)? ;
 style-font-face-attlist ::= (style:font-pitch::fontPitch)? ;
 style-font-face-attlist ::= (style:font-charset::textEncoding)? ;
style-num-letter-sync-attlist ::= (style:num-letter-sync::boolean)? ;
common-field-fixed-attlist ::= (text:fixed::boolean)? ;
text-changed-region-attr ::= text:id::ID ;
draw-stroke-dash-attlist ::= draw:name::styleName ;
 draw-stroke-dash-attlist ::= (draw:display-name::string)? ;
 draw-stroke-dash-attlist ::= (draw:style::("rect" | "round"))? ;
 draw-stroke-dash-attlist ::= (draw:dots1::integer)? (draw:dots1-length::length)? (draw:dots2::integer)? (draw:dots2-length::length)? ;
 draw-stroke-dash-attlist ::= (draw:distance::length)? ;
any-date ::= number-day | number-month | number-year | number-era | number-day-of-week | number-week-of-year | number-quarter | number-hours | number-am-pm | number-minutes | number-seconds ;
table-last-column ::= table:last-column::common-table-template-attlist ;
table-cell-content-deletion ::= table:cell-content-deletion::((table:id::string)? table-cell-address? table-change-track-table-cell?) ;
text-bibliography-types ::= "article" | "book" | "booklet" | "conference" | "custom1" | "custom2" | "custom3" | "custom4" | "custom5" | "email" | "inbook" | "incollection" | "inproceedings" | "journal" | "manual" | "mastersthesis" | "misc" | "phdthesis" | "proceedings" | "techreport" | "unpublished" | "www" ;
office-script-attlist ::= script:language::string ;
config-config-item-map-named ::= config:config-item-map-named::(config-config-item-map-named-attlist config-config-item-map-entry+) ;
number-seconds-attlist ::= (number:style::("short" | "long"))? ;
 number-seconds-attlist ::= (number:decimal-places::integer)? ;
table-deletion ::= table:deletion::(table-deletion-attlist common-table-change-attlist office-change-info table-dependencies? table-deletions? table-cut-offs?) ;
text-index-entry-chapter-attrs ::= (text:display::("name" | "number" | "number-and-name"))? ;
style-ruby-properties ::= style:ruby-properties::style-ruby-properties-content ;
common-contour-attlist ::= draw:recreate-on-edit::boolean ;
table-database-source-query ::= table:database-source-table::table-database-source-table-attlist ;
change-marks ::= (text:change::change-mark-attr) | (text:change-start::change-mark-attr) | (text:change-end::change-mark-attr) ;
common-field-data-style-name-attlist ::= (style:data-style-name::styleNameRef)? ;
style-column-attlist ::= style:rel-width::relativeLength ;
 style-column-attlist ::= (fo:start-indent::length)? ;
 style-column-attlist ::= (fo:end-indent::length)? ;
 style-column-attlist ::= (fo:space-before::length)? ;
 style-column-attlist ::= (fo:space-after::length)? ;
common-fill-timing-attlist ::= (smil:fill::("remove" | "freeze" | "hold" | "auto" | "default" | "transition"))? ;
form-image-frame-attlist ::= form-control-attlist common-disabled-attlist image-data common-printable-attlist common-readonly-attlist common-title-attlist common-data-field-attlist ;
rowOrCol ::= "row" | "column" ;
table-source-service ::= table:source-service::table-source-service-attlist ;
office-annotation ::= office:annotation::(office-annotation-attlist draw-caption-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist dc-creator? dc-date? meta-date-string? (text-p | text-list)*) ;
config-config-item-map-named-attlist ::= config:name::string ;
style-footer-left ::= style:footer-left::(common-style-header-footer-attlist header-footer-content) ;
common-anim-target-attlist ::= (smil:targetElement::IDREF)? ;
 common-anim-target-attlist ::= (anim:sub-item::string)? ;
draw-line ::= draw:line::(draw-line-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
style-ruby-properties-attlist ::= (style:ruby-position::("above" | "below"))? ;
 style-ruby-properties-attlist ::= (style:ruby-align::("left" | "center" | "right" | "distribute-letter" | "distribute-space"))? ;
style-list-level-properties-content-strict ::= style-list-level-properties-attlist style-list-level-properties-elements ;
style-table-properties-content ::= style-table-properties-content-strict ;
 style-table-properties-content ::= style-properties-content ;
table-sort-by-attlist ::= table:field-number::nonNegativeInteger ;
 table-sort-by-attlist ::= (table:data-type::("text" | "number" | "automatic" | string))? ;
 table-sort-by-attlist ::= (table:order::("ascending" | "descending"))? ;
table-columns-and-groups ::= (table-table-column-group | table-columns-no-group)+ ;
draw-page-thumbnail ::= draw:page-thumbnail::(draw-page-thumbnail-attlist common-draw-position-attlist common-draw-size-attlist presentation-shape-attlist common-draw-shape-with-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc?) ;
table-odd-rows ::= table:odd-rows::common-table-template-attlist ;
office-image-content-prelude ::= ε ;
style-graphic-properties ::= style:graphic-properties::style-graphic-properties-content ;
table-source-service-attlist ::= table:name::string ;
 table-source-service-attlist ::= table:source-name::string ;
 table-source-service-attlist ::= table:object-name::string ;
 table-source-service-attlist ::= (table:user-name::string)? ;
 table-source-service-attlist ::= (table:password::string)? ;
office-meta-content-strict ::= office-meta-data* ;
common-calendar-attlist ::= (number:calendar::("gregorian" | "gengou" | "ROC" | "hanja_yoil" | "hanja" | "hijri" | "jewish" | "buddhist" | string))? ;
draw-handle ::= draw:handle::draw-handle-attlist ;
table-cell-content-change ::= table:cell-content-change::(common-table-change-attlist table-cell-address office-change-info table-dependencies? table-deletions? table-previous) ;
table-subtotal-field ::= table:subtotal-field::table-subtotal-field-attlist ;
chart-legend-attlist ::= (chart:legend-position::("start" | "end" | "top" | "bottom") (chart:legend-align::("start" | "center" | "end"))?) | (chart:legend-position::("top-start" | "bottom-start" | "top-end" | "bottom-end")) | ε ;
 chart-legend-attlist ::= common-draw-position-attlist ;
 chart-legend-attlist ::= (style:legend-expansion::("wide" | "high" | "balanced")) | (style:legend-expansion::"custom" style:legend-expansion-aspect-ratio::double) | ε ;
 chart-legend-attlist ::= (chart:style-name::styleNameRef)? ;
office-chart-content-main ::= chart-chart ;
table-subtotal-rules ::= table:subtotal-rules::(table-subtotal-rules-attlist table-sort-groups? table-subtotal-rule*) ;
chart-plot-area ::= chart:plot-area::(chart-plot-area-attlist dr3d-light* chart-axis* chart-series* chart-stock-gain-marker? chart-stock-loss-marker? chart-stock-range-line? chart-wall? chart-floor?) ;
draw-measure-attlist ::= svg:x1::coordinate svg:y1::coordinate ;
 draw-measure-attlist ::= svg:x2::coordinate svg:y2::coordinate ;
style-chart-properties-elements ::= ε ;
draw-param ::= draw:param::draw-param-attlist ;
draw-object-ole ::= draw:object-ole::(draw-object-ole-attlist common-draw-data-attlist | office-binary-data) ;
number-era-attlist ::= (number:style::("short" | "long"))? ;
number-percentage-style ::= number:percentage-style::(common-data-style-attlist style-text-properties? number-text? number-and-text? style-map*) ;
office-body-content ::= office:text::(office-text-attlist office-text-content-prelude office-text-content-main* office-text-content-epilogue) ;
 office-body-content ::= office:drawing::(office-drawing-attlist office-drawing-content-prelude office-drawing-content-main office-drawing-content-epilogue) ;
 office-body-content ::= office:presentation::(office-presentation-attlist office-presentation-content-prelude office-presentation-content-main office-presentation-content-epilogue) ;
 office-body-content ::= office:spreadsheet::(office-spreadsheet-attlist office-spreadsheet-content-prelude office-spreadsheet-content-main office-spreadsheet-content-epilogue) ;
 office-body-content ::= office:chart::(office-chart-attlist office-chart-content-prelude office-chart-content-main office-chart-content-epilogue) ;
 office-body-content ::= office:image::(office-image-attlist office-image-content-prelude office-image-content-main office-image-content-epilogue) ;
draw-contour-polygon ::= draw:contour-polygon::(common-contour-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-points-attlist) ;
chart-plot-area-attlist ::= common-draw-position-attlist common-draw-size-attlist ;
 chart-plot-area-attlist ::= (chart:style-name::styleNameRef)? ;
 chart-plot-area-attlist ::= (table:cell-range-address::cellRangeAddress)? ;
 chart-plot-area-attlist ::= (chart:data-source-has-labels::("none" | "row" | "column" | "both"))? ;
 chart-plot-area-attlist ::= dr3d-scene-attlist common-dr3d-transform-attlist ;
borderWidths ::= positiveLength positiveLength positiveLength ;
form-formatted-text-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist ;
 form-formatted-text-attlist ::= (form:max-value::string)? ;
 form-formatted-text-attlist ::= (form:min-value::string)? ;
 form-formatted-text-attlist ::= (form:validation::boolean)? ;
chart-mean-value ::= chart:mean-value::chart-mean-value-attlist ;
style-section-properties ::= style:section-properties::style-section-properties-content ;
table-source-cell-range-attlist ::= table:cell-range-address::cellRangeAddress ;
cellRangeAddressList ::= string() ;
style-table-properties-elements ::= style-background-image ;
style-graphic-properties-content-strict ::= style-graphic-properties-attlist style-graphic-fill-properties-attlist style-graphic-properties-elements ;
text-illustration-index ::= text:illustration-index::(sectionAttr text-illustration-index-source text-index-body) ;
office-dde-source ::= office:dde-source::(office-dde-source-attlist common-dde-connection-decl-attlist) ;
presentation-animation-elements ::= presentation-show-shape | presentation-show-text | presentation-hide-shape | presentation-hide-text | presentation-dim | presentation-play ;
table-scenario ::= table:scenario::table-scenario-attlist ;
common-table-template-attlist ::= text:style-name::styleNameRef text:paragraph-style-name::(styleNameRef?) ;
math-math ::= math:math::mathMarkup ;
common-current-value-attlist ::= (form:current-value::string)? ;
table-content-validation ::= table:content-validation::(table-validation-attlist table-help-message? (table-error-message | (table-error-macro office-event-listeners?))?) ;
table-data-pilot-level ::= table:data-pilot-level::(table-data-pilot-level-attlist table-data-pilot-subtotals? table-data-pilot-members? table-data-pilot-display-info? table-data-pilot-sort-info? table-data-pilot-layout-info?) ;
table-dependency ::= table:dependency::(table:id::string) ;
draw-equation-attlist ::= (draw:name::string)? ;
 draw-equation-attlist ::= (draw:formula::string)? ;
text-conditional-text-attlist ::= text:condition::formula ;
 text-conditional-text-attlist ::= text:string-value-if-true::string ;
 text-conditional-text-attlist ::= text:string-value-if-false::string ;
 text-conditional-text-attlist ::= (text:current-value::boolean)? ;
countryCode ::= string() ;
fontStyle ::= "normal" | "italic" | "oblique" ;
style-table-column-properties-attlist ::= (style:column-width::positiveLength)? (style:rel-column-width::relativeLength)? ;
 style-table-column-properties-attlist ::= (style:use-optimal-column-width::boolean)? ;
 style-table-column-properties-attlist ::= common-break-attlist ;
region-content ::= text-p* ;
text-list-item-attr ::= (text:start-value::nonNegativeInteger)? ;
office-spreadsheet-content-epilogue ::= table-functions ;
common-draw-circle-ellipse-attlist ::= (svg:cx::coordinate svg:cy::coordinate)? ;
 common-draw-circle-ellipse-attlist ::= (draw:kind::("full" | "section" | "cut" | "arc"))? ;
 common-draw-circle-ellipse-attlist ::= (draw:start-angle::double)? ;
 common-draw-circle-ellipse-attlist ::= (draw:end-angle::double)? ;
table-table-source ::= table:table-source::(table-table-source-attlist table-linked-source-attlist) ;
text-page-number-attlist ::= common-field-num-format-attlist common-field-fixed-attlist ;
 text-page-number-attlist ::= (text:page-adjust::integer)? ;
 text-page-number-attlist ::= (text:select-page::("previous" | "current" | "next"))? ;
table-label-range-attlist ::= table:label-cell-range-address::cellRangeAddress ;
 table-label-range-attlist ::= table:data-cell-range-address::cellRangeAddress ;
 table-label-range-attlist ::= table:orientation::("column" | "row") ;
text-sequence-decl ::= text:sequence-decl::text-sequence-decl-attlist ;
style-style ::= style:style::(style-style-attlist style-style-content style-map*) ;
draw-enhanced-geometry-attlist ::= (draw:type::custom-shape-type)? ;
 draw-enhanced-geometry-attlist ::= (svg:viewBox::(integer integer integer integer))? ;
 draw-enhanced-geometry-attlist ::= (draw:mirror-vertical::boolean)? (draw:mirror-horizontal::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-rotate-angle::double)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:concentric-gradient-fill-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-brightness::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-depth::(length double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-diffusion::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-number-of-line-segments::integer)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-light-face::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-harsh::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-harsh::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-level::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-level::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-direction::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-direction::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-metal::boolean)? ;
 draw-enhanced-geometry-attlist ::= (dr3d:shade-mode::("flat" | "phong" | "gouraud" | "draft"))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-rotation-angle::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-rotation-center::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-shininess::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-skew::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-specularity::percent)? ;
 draw-enhanced-geometry-attlist ::= (dr3d:projection::("parallel" | "perspective"))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-viewpoint::point3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-origin::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-color::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:enhanced-path::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:path-stretchpoint-x::double)? (draw:path-stretchpoint-y::double)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-areas::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-points::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-point-type::("none" | "segments" | "rectangle"))? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-point-leaving-directions::string())? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-mode::("normal" | "path" | "shape"))? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-scale::("path" | "shape"))? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-same-letter-heights::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:modifiers::string)? ;
common-field-name-attlist ::= text:name::variableName ;
style-presentation-page-layout ::= style:presentation-page-layout::(style:name::styleName (style:display-name::string)? presentation-placeholder*) ;
text-index-entry-page-number ::= text:index-entry-page-number::((text:style-name::styleNameRef)?) ;
office-presentation-content-main ::= draw-page* ;
presentation-sound-attlist ::= (presentation:play-full::boolean)? ;
text-alphabetical-index-auto-mark-file ::= text:alphabetical-index-auto-mark-file::(xlink:href::anyURI (xlink:type::"simple")?) ;
draw-gradient-attlist ::= (draw:start-color::color)? (draw:end-color::color)? ;
 draw-gradient-attlist ::= (draw:start-intensity::percent)? (draw:end-intensity::percent)? ;
style-background-image-attlist ::= (style:repeat::("no-repeat" | "repeat" | "stretch"))? ;
 style-background-image-attlist ::= (style:position::("left" | "center" | "right" | "top" | "bottom" | (horiBackPos vertBackPos) | (vertBackPos horiBackPos)))? ;
 style-background-image-attlist ::= (style:filter-name::string)? ;
 style-background-image-attlist ::= (draw:opacity::percent)? ;
svg-font-face-src ::= svg:font-face-src::((svg-font-face-uri | svg-font-face-name)+) ;
text-sequence-decl-attlist ::= common-field-name-attlist ;
 text-sequence-decl-attlist ::= text:display-outline-level::nonNegativeInteger ;
 text-sequence-decl-attlist ::= (text:separation-character::character)? ;
svg-font-face-name ::= svg:font-face-name::((svg:name::string())?) ;
bound-column ::= (form:bound-column::string)? ;
style-drop-cap-attlist ::= (style:length::("word" | positiveInteger))? ;
 style-drop-cap-attlist ::= (style:lines::positiveInteger)? ;
 style-drop-cap-attlist ::= (style:distance::length)? ;
 style-drop-cap-attlist ::= (style:style-name::styleNameRef)? ;
text-table-of-content ::= text:table-of-content::(sectionAttr text-table-of-content-source text-index-body) ;
anim-command-attlist ::= anim:command::string ;
table-data-pilot-members ::= table:data-pilot-members::(table-data-pilot-member*) ;
text-tracked-changes ::= (text:tracked-changes::(text-tracked-changes-attr text-changed-region*))? ;
style-graphic-properties-content ::= style-graphic-properties-content-strict ;
 style-graphic-properties-content ::= style-properties-content ;
office-chart-attlist ::= ε ;
text-index-entry-link-end ::= text:index-entry-link-end::((text:style-name::styleNameRef)?) ;
number-hours-attlist ::= (number:style::("short" | "long"))? ;
form-item ::= form:item::(form-item-attlist string()) ;
cellRangeAddress ::= string() ;
draw-hatch ::= draw:hatch::draw-hatch-attlist ;
sectionAttr ::= (text:style-name::styleNameRef)? ;
 sectionAttr ::= text:name::string ;
 sectionAttr ::= (text:protected::boolean)? ;
 sectionAttr ::= (text:protection-key::string)? ;
office-meta ::= (office:meta::office-meta-content)? ;
style-table-row-properties-attlist ::= (style:row-height::positiveLength)? (style:min-row-height::nonNegativeLength)? ;
 style-table-row-properties-attlist ::= (style:use-optimal-row-height::boolean)? ;
 style-table-row-properties-attlist ::= common-background-color-attlist ;
 style-table-row-properties-attlist ::= common-break-attlist ;
 style-table-row-properties-attlist ::= (fo:keep-together::("auto" | "always"))? ;
chart-regression-curve ::= chart:regression-curve::chart-regression-curve-attlist ;
common-auto-reorder-attlist ::= (number:automatic-order::boolean)? ;
table-consolidation ::= table:consolidation::table-consolidation-attlist ;
text-bibliography-configuration ::= text:bibliography-configuration::(text-bibliography-configuration-attlist text-sort-key*) ;
draw-circle-attlist ::= (svg:r::length)? ;
chart-footer ::= chart:footer::(chart-title-attlist text-p?) ;
table-subtotal-rule ::= table:subtotal-rule::(table-subtotal-rule-attlist table-subtotal-field*) ;
common-stock-marker-attlist ::= (chart:style-name::styleNameRef)? ;
chart-regression-curve-attlist ::= (chart:style-name::styleNameRef)? ;
style-text-properties-content ::= style-text-properties-content-strict ;
 style-text-properties-content ::= style-properties-content ;
common-value-and-type-attlist ::= (office:value-type::"float" office:value::double) | (office:value-type::"percentage" office:value::double) | (office:value-type::"currency" office:value::double (office:currency::string)?) | (office:value-type::"date" office:date-value::dateOrDateTime) | (office:value-type::"time" office:time-value::duration) | (office:value-type::"boolean" office:boolean-value::boolean) | (office:value-type::"string" (office:string-value::string)?) ;
common-basic-timing-attlist ::= common-begin-end-timing-attlist common-dur-timing-attlist common-repeat-timing-attlist ;
draw-caption ::= draw:caption::(draw-caption-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
text-index-body ::= text:index-body::(index-content-main*) ;
common-decimal-places-attlist ::= (number:decimal-places::integer)? ;
office-text-content-main ::= (text-content*) | (text-page-sequence (draw-a | shape)*) ;
number-minutes ::= number:minutes::number-minutes-attlist ;
chart-wall ::= chart:wall::chart-wall-attlist ;
table-subtotal-rule-attlist ::= table:group-by-field-number::nonNegativeInteger ;
text-index-entry-bibliography ::= text:index-entry-bibliography::text-index-entry-bibliography-attrs ;
table-filter ::= table:filter::(table-filter-attlist table-filter-condition | table-filter-and | table-filter-or) ;
style-paragraph-properties-elements ::= style-tab-stops ;
 style-paragraph-properties-elements ::= style-drop-cap ;
 style-paragraph-properties-elements ::= style-background-image ;
form-listbox-attlist ::= form-control-attlist common-disabled-attlist dropdown common-printable-attlist size common-tab-attlist common-title-attlist bound-column common-data-field-attlist list-source list-source-type ;
 form-listbox-attlist ::= (form:multiple::boolean)? ;
 form-listbox-attlist ::= (form:xforms-list-source::string)? ;
style-table-cell-properties-attlist ::= (style:vertical-align::("top" | "middle" | "bottom" | "automatic"))? ;
 style-table-cell-properties-attlist ::= (style:text-align-source::("fix" | "value-type"))? ;
 style-table-cell-properties-attlist ::= common-style-direction-attlist ;
 style-table-cell-properties-attlist ::= (style:glyph-orientation-vertical::("auto" | "0"))? ;
 style-table-cell-properties-attlist ::= common-shadow-attlist ;
 style-table-cell-properties-attlist ::= common-background-color-attlist ;
 style-table-cell-properties-attlist ::= common-border-attlist ;
 style-table-cell-properties-attlist ::= (style:diagonal-tl-br::string)? (style:diagonal-tl-br-widths::borderWidths)? (style:diagonal-bl-tr::string)? (style:diagonal-bl-tr-widths::borderWidths)? ;
 style-table-cell-properties-attlist ::= common-border-line-width-attlist ;
 style-table-cell-properties-attlist ::= common-padding-attlist ;
 style-table-cell-properties-attlist ::= (fo:wrap-option::("no-wrap" | "wrap"))? ;
 style-table-cell-properties-attlist ::= common-rotation-angle-attlist ;
 style-table-cell-properties-attlist ::= (style:rotation-align::("none" | "bottom" | "top" | "center"))? ;
 style-table-cell-properties-attlist ::= (style:cell-protect::("none" | "hidden-and-protected" | (("protected" | "formula-hidden")+)))? ;
 style-table-cell-properties-attlist ::= (style:print-content::boolean)? ;
 style-table-cell-properties-attlist ::= (style:decimal-places::nonNegativeInteger)? ;
 style-table-cell-properties-attlist ::= (style:repeat-content::boolean)? ;
 style-table-cell-properties-attlist ::= (style:shrink-to-fit::boolean)? ;
text-alphabetical-index-mark-attrs ::= (text:key1::string)? (text:key2::string)? ;
 text-alphabetical-index-mark-attrs ::= (text:string-value-phonetic::string)? (text:key1-phonetic::string)? (text:key2-phonetic::string)? ;
 text-alphabetical-index-mark-attrs ::= (text:main-entry::boolean)? ;
text-sort-key ::= text:sort-key::text-sort-key-attlist ;
chart-floor-attlist ::= (svg:width::length)? ;
 chart-floor-attlist ::= (chart:style-name::styleNameRef)? ;
presentation-notes ::= presentation:notes::(common-presentation-header-footer-attlist presentation-notes-attlist office-forms shape*) ;
number-number ::= number:number::(number-number-attlist common-decimal-places-attlist common-number-attlist number-embedded-text*) ;
office-drawing-content-main ::= draw-page* ;
text-notes-configuration ::= text:notes-configuration::text-notes-configuration-content ;
any-number ::= number-number | number-scientific-number | number-fraction ;
table-database-range ::= table:database-range::(table-database-range-attlist (table-database-source-sql | table-database-source-table | table-database-source-query)? table-filter? table-sort? table-subtotal-rules?) ;
table-decls ::= table-calculation-settings? table-content-validations? table-label-ranges? ;
style-table-cell-properties-content-strict ::= style-table-cell-properties-attlist style-table-cell-properties-elements ;
text-index-scope-attr ::= (text:index-scope::("document" | "chapter"))? ;
text-section ::= text:section::(text-section-attr text-section-source | text-section-source-dde | ε text-content*) ;
presentation-animation-group ::= presentation:animation-group::(presentation-animation-elements*) ;
text-relative-tab-stop-position-attr ::= (text:relative-tab-stop-position::boolean)? ;
number-currency-symbol-attlist ::= (number:language::languageCode)? (number:country::countryCode)? ;
text-list-item ::= text:list-item::(text-list-item-attr text-list-item-content) ;
text-list-level-style-number-attr ::= (text:style-name::styleNameRef)? ;
 text-list-level-style-number-attr ::= common-num-format-attlist common-num-format-prefix-suffix-attlist ;
 text-list-level-style-number-attr ::= (text:display-levels::positiveInteger)? ;
 text-list-level-style-number-attr ::= (text:start-value::positiveInteger)? ;
common-border-attlist ::= (fo:border::string)? (fo:border-top::string)? (fo:border-bottom::string)? (fo:border-left::string)? (fo:border-right::string)? ;
presentation-notes-attlist ::= (style:page-layout-name::styleNameRef)? ;
 presentation-notes-attlist ::= (draw:style-name::styleNameRef)? ;
positiveLength ::= string() ;
currency-symbol-and-text ::= number-currency-symbol number-text? ;
table-database-range-attlist ::= (table:name::string)? ;
 table-database-range-attlist ::= (table:is-selection::boolean)? ;
 table-database-range-attlist ::= (table:on-update-keep-styles::boolean)? ;
 table-database-range-attlist ::= (table:on-update-keep-size::boolean)? ;
 table-database-range-attlist ::= (table:has-persistent-data::boolean)? ;
 table-database-range-attlist ::= (table:orientation::("column" | "row"))? ;
 table-database-range-attlist ::= (table:contains-header::boolean)? ;
 table-database-range-attlist ::= (table:display-filter-buttons::boolean)? ;
 table-database-range-attlist ::= table:target-range-address::cellRangeAddress ;
 table-database-range-attlist ::= (table:refresh-delay::boolean)? ;
form-property-name ::= form:property-name::string ;
config-config-item-set-attlist ::= config:name::string ;
text-object-index-source-attrs ::= text-index-scope-attr ;
 text-object-index-source-attrs ::= text-relative-tab-stop-position-attr ;
 text-object-index-source-attrs ::= (text:use-spreadsheet-objects::boolean)? ;
 text-object-index-source-attrs ::= (text:use-math-objects::boolean)? ;
 text-object-index-source-attrs ::= (text:use-draw-objects::boolean)? ;
 text-object-index-source-attrs ::= (text:use-chart-objects::boolean)? ;
 text-object-index-source-attrs ::= (text:use-other-objects::boolean)? ;
text-illustration-index-source ::= text:illustration-index-source::(text-illustration-index-source-attrs text-index-title-template? text-illustration-index-entry-template?) ;
table-change-track-table-cell-attlist ::= (table:cell-address::cellAddress)? ;
 table-change-track-table-cell-attlist ::= (table:matrix-covered::boolean)? ;
 table-change-track-table-cell-attlist ::= (table:formula::string)? (table:number-matrix-columns-spanned::positiveInteger)? (table:number-matrix-rows-spanned::positiveInteger)? common-value-and-type-attlist? ;
lineWidth ::= "auto" | "normal" | "bold" | "thin" | "dash" | "medium" | "thick" | positiveInteger | percent | positiveLength ;
style-region-center ::= style:region-center::region-content ;
number-number-style ::= number:number-style::(common-data-style-attlist style-text-properties? number-text? (any-number number-text?)? style-map*) ;
target-frame ::= (office:target-frame::targetFrameName)? ;
base64Binary ::= string() ;
form-property-value-and-type-attlist ::= common-value-and-type-attlist | (office:value-type::"void") ;
table-named-range ::= table:named-range::table-named-range-attlist ;
style-header ::= style:header::(common-style-header-footer-attlist header-footer-content) ;
form-time-attlist ::= (form:value::time)? ;
 form-time-attlist ::= (form:current-value::time)? ;
 form-time-attlist ::= (form:min-value::time)? ;
 form-time-attlist ::= (form:max-value::time)? ;
table-cell-address ::= table:cell-address::common-table-cell-address-attlist ;
table-operation ::= table:operation::table-operation-attlist ;
office-document-meta ::= office:document-meta::(office-document-common-attrs office-meta) ;
text-index-entry-text ::= text:index-entry-text::((text:style-name::styleNameRef)?) ;
common-draw-data-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:show::"embed")? (xlink:actuate::"onLoad")? ;
chart-axis-attlist ::= chart:dimension::("x" | "y" | "z") ;
 chart-axis-attlist ::= (chart:name::string)? ;
 chart-axis-attlist ::= (chart:style-name::styleNameRef)? ;
text-page-attlist ::= text:master-page-name::styleNameRef ;
text-table-of-content-entry-template ::= text:table-of-content-entry-template::(text-table-of-content-entry-template-attlist text-table-of-content-children*) ;
draw-g ::= draw:g::(draw-g-attlist common-draw-z-index-attlist common-draw-name-attlist common-draw-id-attlist common-draw-style-name-attlist common-text-spreadsheet-shape-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* shape*) ;
lineStyle ::= "none" | "solid" | "dotted" | "dash" | "long-dash" | "dot-dash" | "dot-dot-dash" | "wave" ;
common-draw-path-data-attlist ::= svg:d::pathData ;
table-named-range-attlist ::= table:name::string table:cell-range-address::cellRangeAddress (table:base-cell-address::cellAddress)? (table:range-usable-as::("none" | (("print-range" | "filter" | "repeat-row" | "repeat-column")+)))? ;
number-quarter-attlist ::= (number:style::("short" | "long"))? ;
draw-a ::= draw:a::(draw-a-attlist draw-frame) ;
table-filter-condition-attlist ::= table:field-number::nonNegativeInteger ;
 table-filter-condition-attlist ::= table:value::string ;
 table-filter-condition-attlist ::= table:operator::string ;
 table-filter-condition-attlist ::= (table:case-sensitive::string)? ;
 table-filter-condition-attlist ::= (table:data-type::("text" | "number"))? ;
table-previous ::= table:previous::((table:id::string)? table-change-track-table-cell) ;
common-draw-shape-with-text-and-styles-attlist ::= common-draw-shape-with-styles-attlist common-draw-text-style-name-attlist ;
number-text-style ::= number:text-style::(common-data-style-attlist style-text-properties? number-text? (number-text-content number-text?)* style-map*) ;
office-body ::= office:body::office-body-content ;
svg-font-face-uri ::= svg:font-face-uri::(common-svg-font-face-xlink-attlist svg-font-face-format*) ;
draw-g-attlist ::= (svg:y::coordinate)? ;
text-list-style-content ::= text:list-level-style-number::(text-list-level-style-attr text-list-level-style-number-attr style-list-level-properties? style-text-properties?) ;
 text-list-style-content ::= text:list-level-style-bullet::(text-list-level-style-attr text-list-level-style-bullet-attr style-list-level-properties? style-text-properties?) ;
 text-list-style-content ::= text:list-level-style-image::(text-list-level-style-attr text-list-level-style-image-attr style-list-level-properties?) ;
any-time ::= number-hours | number-am-pm | number-minutes | number-seconds ;
table-table-row-attlist ::= (table:number-rows-repeated::positiveInteger)? ;
 table-table-row-attlist ::= (table:style-name::styleNameRef)? ;
 table-table-row-attlist ::= (table:default-cell-style-name::styleNameRef)? ;
 table-table-row-attlist ::= (table:visibility::table-visibility-value)? ;
style-page-layout ::= style:page-layout::(style-page-layout-attlist style-page-layout-properties? style-header-style? style-footer-style?) ;
office-process-content ::= (office:process-content::boolean)? ;
form-date-attlist ::= (form:value::date)? ;
 form-date-attlist ::= (form:current-value::date)? ;
 form-date-attlist ::= (form:min-value::date)? ;
 form-date-attlist ::= (form:max-value::date)? ;
common-form-relative-image-position-attlist ::= ((form:image-position::"center")?) | (form:image-position::("start" | "end" | "top" | "bottom") (form:image-align::("start" | "center" | "end"))?) ;
table-insertion-cut-off ::= table:insertion-cut-off::table-insertion-cut-off-attlist ;
presentation-play ::= presentation:play::presentation-play-attlist ;
presentation-animations ::= presentation:animations::((presentation-animation-elements | presentation-animation-group)*) ;
style-header-footer-properties ::= style:header-footer-properties::style-header-footer-properties-content ;
common-value-attlist ::= (form:value::string)? ;
style-footnote-sep-attlist ::= (style:width::length)? (style:rel-width::percent)? (style:color::color)? (style:line-style::lineStyle)? (style:adjustment::("left" | "center" | "right"))? (style:distance-before-sep::length)? (style:distance-after-sep::length)? ;
table-first-row ::= table:first-row::common-table-template-attlist ;
text-list-header ::= text:list-header::text-list-item-content ;
style-list-level-properties-content ::= style-list-level-properties-content-strict ;
 style-list-level-properties-content ::= style-properties-content ;
style-page-layout-properties-content-strict ::= style-page-layout-properties-attlist style-page-layout-properties-elements ;
style-column-sep-attlist ::= (style:style::("none" | "solid" | "dotted" | "dashed" | "dot-dashed"))? ;
 style-column-sep-attlist ::= style:width::length ;
 style-column-sep-attlist ::= (style:height::percent)? ;
 style-column-sep-attlist ::= (style:vertical-align::("top" | "middle" | "bottom"))? ;
 style-column-sep-attlist ::= (style:color::color)? ;
text-user-index-entry-template ::= text:user-index-entry-template::(text-user-index-entry-template-attrs (text-index-entry-chapter | text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop)*) ;
table-database-source-table ::= table:database-source-query::table-database-source-query-attlist ;
table-table-cell-range-source-attlist ::= table:name::string ;
 table-table-cell-range-source-attlist ::= table:last-column-spanned::positiveInteger table:last-row-spanned::positiveInteger ;
common-form-control-attlist ::= (form:name::string)? ;
 common-form-control-attlist ::= (form:control-implementation::namespacedToken)? ;
common-svg-font-face-xlink-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? ;
draw-area-polygon ::= draw:area-polygon::(common-draw-area-attlist svg:x::coordinate svg:y::coordinate svg:width::length svg:height::length common-draw-viewbox-attlist common-draw-points-attlist svg-title? svg-desc? office-event-listeners?) ;
chart-stock-gain-marker ::= chart:stock-gain-marker::common-stock-marker-attlist ;
office-forms ::= (office:forms::(office-forms-attlist (form-form | xforms-model)*))? ;
common-restart-timing-attlist ::= (smil:restart::("never" | "always" | "whenNotActive" | "default"))? ;
form-properties ::= form:properties::(form-property+) ;
IDREFS ::= string() ;
common-maxlength-attlist ::= (form:max-length::nonNegativeInteger)? ;
draw-object-attlist ::= (draw:notify-on-update-of-ranges::string)? ;
common-rotation-angle-attlist ::= (style:rotation-angle::nonNegativeInteger)? ;
form-file-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist ;
common-readonly-attlist ::= (form:readonly::boolean)? ;
draw-measure ::= draw:measure::(draw-measure-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
draw-control ::= draw:control::(draw-control-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? draw-glue-point*) ;
table-table-column ::= table:table-column::table-table-column-attlist ;
text-sequence-ref-content ::= (text:reference-format::("page" | "chapter" | "direction" | "text" | "category-and-value" | "caption" | "value"))? ;
table-data-pilot-display-info ::= table:data-pilot-display-info::table-data-pilot-display-info-attlist ;
table-source-range-address ::= table:source-range-address::common-table-range-attlist ;
office-forms-attlist ::= (form:automatic-focus::boolean)? ;
 office-forms-attlist ::= (form:apply-design-mode::boolean)? ;
presentation-show ::= presentation:show::presentation-show-attlist ;
draw-plugin-attlist ::= (draw:mime-type::string())? ;
svg-stop ::= svg:stop::(svg:offset::(double | percent) (svg:stop-color::color)? (svg:stop-opacity::double)?) ;
table-named-expression ::= table:named-expression::table-named-expression-attlist ;
table-validation-attlist ::= table:name::string ;
 table-validation-attlist ::= (table:condition::string)? ;
 table-validation-attlist ::= (table:base-cell-address::cellAddress)? ;
 table-validation-attlist ::= (table:allow-empty-cell::boolean)? ;
 table-validation-attlist ::= (table:display-list::("none" | "unsorted" | "sort-ascending"))? ;
table-even-columns ::= table:even-columns::common-table-template-attlist ;
draw-page-thumbnail-attlist ::= (draw:page-number::positiveInteger)? ;
text-tab-attr ::= (text:tab-ref::nonNegativeInteger)? ;
text-style-name ::= (form:text-style-name::styleNameRef)? ;
text-table-of-content-source ::= text:table-of-content-source::(text-table-of-content-source-attlist text-index-title-template? text-table-of-content-entry-template* text-index-source-styles*) ;
form-hidden-attlist ::= form-control-attlist common-value-attlist ;
text-index-entry-tab-stop-attrs ::= (style:leader-char::character)? ;
 text-index-entry-tab-stop-attrs ::= (style:type::"right") | (style:type::"left" style:position::length) ;
table-source-cell-range ::= table:source-cell-range::(table-source-cell-range-attlist table-filter?) ;
fontFamilyGeneric ::= "roman" | "swiss" | "modern" | "decorative" | "script" | "system" ;
table-data-pilot-display-info-attlist ::= table:enabled::boolean ;
 table-data-pilot-display-info-attlist ::= table:data-field::string ;
 table-data-pilot-display-info-attlist ::= table:member-count::nonNegativeInteger ;
 table-data-pilot-display-info-attlist ::= table:display-member-mode::("from-top" | "from-bottom") ;
common-field-database-table-attlist ::= text:table-name::string ;
 common-field-database-table-attlist ::= (text:table-type::("table" | "query" | "command"))? ;
common-margin-attlist ::= (fo:margin::(nonNegativeLength | percent))? ;
custom-shape-type ::= "non-primitive" | string ;
common-spline-anim-value-attlist ::= (smil:keyTimes::string)? ;
 common-spline-anim-value-attlist ::= (smil:keySplines::string)? ;
table-odd-columns ::= table:odd-columns::common-table-template-attlist ;
common-draw-layer-name-attlist ::= (draw:layer::string())? ;
draw-rect-attlist ::= (draw:corner-radius::nonNegativeLength)? ;
chart-stock-loss-marker ::= chart:stock-loss-marker::common-stock-marker-attlist ;
common-field-display-value-formula-attlist ::= (text:display::("value" | "formula"))? ;
office-event-listeners ::= office:event-listeners::((script-event-listener | presentation-event-listener)*) ;
text-id ::= text:id::string ;
dr3d-sphere ::= dr3d:sphere::(dr3d-sphere-attlist common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-dr3d-transform-attlist) ;
text-table-of-content-source-attlist ::= (text:outline-level::positiveInteger)? ;
 text-table-of-content-source-attlist ::= (text:use-outline-level::boolean)? ;
 text-table-of-content-source-attlist ::= (text:use-index-marks::boolean)? ;
 text-table-of-content-source-attlist ::= (text:use-index-source-styles::boolean)? ;
 text-table-of-content-source-attlist ::= (text:index-scope::("document" | "chapter"))? ;
 text-table-of-content-source-attlist ::= (text:relative-tab-stop-position::boolean)? ;
style-text-properties ::= style:text-properties::style-text-properties-content ;
draw-equation ::= draw:equation::draw-equation-attlist ;
draw-object-ole-attlist ::= (draw:class-id::string())? ;
text-table-index-source ::= text:table-index-source::(text-illustration-index-source-attrs text-index-title-template? text-table-index-entry-template?) ;
office-automatic-styles ::= (office:automatic-styles::(styles style-page-layout*))? ;
animation-element ::= anim:animate::(common-anim-target-attlist common-anim-named-target-attlist common-anim-values-attlist common-anim-spline-mode-attlist common-spline-anim-value-attlist common-timing-attlist common-anim-add-accum-attlist) ;
 animation-element ::= anim:set::(common-anim-target-attlist common-anim-named-target-attlist common-anim-set-values-attlist common-timing-attlist common-anim-add-accum-attlist) ;
 animation-element ::= anim:animateMotion::(anim-animate-motion-attlist common-anim-target-attlist common-anim-named-target-attlist common-anim-add-accum-attlist common-anim-values-attlist common-timing-attlist common-spline-anim-value-attlist) ;
 animation-element ::= anim:animateColor::(common-anim-target-attlist common-anim-named-target-attlist common-anim-add-accum-attlist common-anim-values-attlist common-anim-spline-mode-attlist common-spline-anim-value-attlist anim-animate-color-attlist common-timing-attlist) ;
 animation-element ::= anim:animateTransform::(common-anim-target-attlist common-anim-named-target-attlist common-anim-add-accum-attlist common-anim-values-attlist anim-animate-transform-attlist common-timing-attlist) ;
 animation-element ::= anim:transitionFilter::(common-anim-target-attlist common-anim-add-accum-attlist common-anim-values-attlist common-anim-spline-mode-attlist anim-transition-filter-attlist common-timing-attlist) ;
 animation-element ::= anim:par::(common-anim-attlist common-timing-attlist common-endsync-timing-attlist animation-element*) ;
 animation-element ::= anim:seq::(common-anim-attlist common-endsync-timing-attlist common-timing-attlist animation-element*) ;
 animation-element ::= anim:iterate::(common-anim-attlist anim-iterate-attlist common-timing-attlist common-endsync-timing-attlist animation-element*) ;
 animation-element ::= anim:audio::(common-anim-attlist anim-audio-attlist common-basic-timing-attlist) ;
 animation-element ::= anim:command::(common-anim-attlist anim-command-attlist common-begin-end-timing-attlist common-anim-target-attlist (anim:param::(anim:name::string() anim:value::string()))*) ;
draw-polygon ::= draw:polygon::(common-draw-points-attlist common-draw-position-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
svg-title ::= svg:title::string() ;
anim-animate-color-attlist ::= (anim:color-interpolation::("rgb" | "hsl"))? ;
 anim-animate-color-attlist ::= (anim:color-interpolation-direction::("clockwise" | "counter-clockwise"))? ;
common-numeric-control-attlist ::= form-control-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-convert-empty-attlist common-data-field-attlist ;
office-image-content-epilogue ::= ε ;
style-section-properties-attlist ::= common-background-color-attlist ;
 style-section-properties-attlist ::= common-horizontal-margin-attlist ;
 style-section-properties-attlist ::= (style:protect::boolean)? ;
 style-section-properties-attlist ::= (text:dont-balance-text-columns::boolean)? ;
 style-section-properties-attlist ::= common-writing-mode-attlist ;
table-data-pilot-group ::= table:data-pilot-group::(table-data-pilot-group-attlist table-data-pilot-group-member+) ;
table-label-range ::= table:label-range::table-label-range-attlist ;
number-boolean ::= number:boolean::ε ;
form-radio-attlist ::= form-control-attlist current-selected common-disabled-attlist label common-printable-attlist selected common-tab-attlist common-title-attlist common-value-attlist common-data-field-attlist common-form-visual-effect-attlist common-form-relative-image-position-attlist ;
dr3d-cube ::= dr3d:cube::(dr3d-cube-attlist common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-dr3d-transform-attlist) ;
form-grid-attlist ::= form-control-attlist common-disabled-attlist common-printable-attlist common-tab-attlist common-title-attlist ;
table-scenario-attlist ::= table:scenario-ranges::cellRangeAddressList ;
 table-scenario-attlist ::= table:is-active::boolean ;
 table-scenario-attlist ::= (table:display-border::boolean)? ;
 table-scenario-attlist ::= (table:border-color::color)? ;
 table-scenario-attlist ::= (table:copy-back::boolean)? ;
 table-scenario-attlist ::= (table:copy-styles::boolean)? ;
 table-scenario-attlist ::= (table:copy-formulas::boolean)? ;
 table-scenario-attlist ::= (table:comment::string)? ;
 table-scenario-attlist ::= (table:protected::boolean)? ;
textEncoding ::= string() ;
common-control-id-attlist ::= form:id::ID ;
number-week-of-year ::= number:week-of-year::common-calendar-attlist ;
form-option ::= form:option::(form-option-attlist string()) ;
table-data-pilot-level-attlist ::= (table:show-empty::boolean)? ;
style-footer-style ::= style:footer-style::(style-header-footer-properties?) ;
presentation-event-listener ::= presentation:event-listener::(presentation-event-listener-attlist presentation-sound?) ;
draw-gradient ::= draw:gradient::(common-draw-gradient-attlist draw-gradient-attlist) ;
office-text-content-epilogue ::= table-functions ;
text-outline-level ::= (text:outline-level::positiveInteger)? ;
common-background-color-attlist ::= (fo:background-color::("transparent" | color))? ;
table-data-pilot-group-attlist ::= table:name::string ;
draw-frame-attlist ::= (draw:copy-of::string)? ;
common-restart-default-attlist ::= (smil:restartDefault::("never" | "always" | "whenNotActive" | "inherit"))? ;
chart-domain ::= chart:domain::((table:cell-range-address::cellRangeAddress)?) ;
table-data-pilot-group-member-attlist ::= table:name::string ;
form-option-attlist ::= current-selected selected label common-value-attlist ;
office-text-attlist ::= (text:global::boolean)? ;
 office-text-attlist ::= (text:use-soft-page-breaks::boolean)? ;
style-paragraph-properties ::= style:paragraph-properties::style-paragraph-properties-content ;
table-table-row-group ::= table:table-row-group::(table-table-row-group-attlist table-rows-and-groups) ;
text-file-name-attlist ::= (text:display::("full" | "path" | "name" | "name-and-extension"))? ;
 text-file-name-attlist ::= common-field-fixed-attlist ;
text-illustration-index-entry-template ::= text:illustration-index-entry-template::text-illustration-index-entry-content ;
presentation-event-listener-attlist ::= script:event-name::string ;
 presentation-event-listener-attlist ::= presentation:action::("none" | "previous-page" | "next-page" | "first-page" | "last-page" | "hide" | "stop" | "execute" | "show" | "verb" | "fade-out" | "sound") ;
 presentation-event-listener-attlist ::= (presentation:effect::presentationEffects)? ;
 presentation-event-listener-attlist ::= (presentation:direction::presentationEffectDirections)? ;
 presentation-event-listener-attlist ::= (presentation:speed::presentationSpeeds)? ;
 presentation-event-listener-attlist ::= (presentation:start-scale::percent)? ;
 presentation-event-listener-attlist ::= (xlink:href::anyURI)? (xlink:type::"simple")? (xlink:show::"embed")? (xlink:actuate::"onRequest")? ;
 presentation-event-listener-attlist ::= (presentation:verb::nonNegativeInteger)? ;
common-fill-default-attlist ::= (smil:fillDefault::("remove" | "freeze" | "hold" | "transition" | "auto" | "inherit"))? ;
nonNegativePixelLength ::= string() ;
office-chart-content-epilogue ::= table-functions ;
common-form-visual-effect-attlist ::= (form:visual-effect::("flat" | "3d"))? ;
horizontal-mirror ::= "horizontal" | "horizontal-on-odd" | "horizontal-on-even" ;
header-footer-content ::= (text-tracked-changes text-decls (text-h | text-p | text-list | table-table | text-section | text-table-of-content | text-illustration-index | text-table-index | text-object-index | text-user-index | text-alphabetical-index | text-bibliography | text-index-title | change-marks)*) | (style-region-left? style-region-center? style-region-right?) ;
style-page-layout-properties-attlist ::= (fo:page-width::length)? (fo:page-height::length)? ;
 style-page-layout-properties-attlist ::= common-num-format-attlist? common-num-format-prefix-suffix-attlist ;
 style-page-layout-properties-attlist ::= (style:paper-tray-name::("default" | string))? ;
 style-page-layout-properties-attlist ::= (style:print-orientation::("portrait" | "landscape"))? ;
 style-page-layout-properties-attlist ::= common-horizontal-margin-attlist common-vertical-margin-attlist common-margin-attlist ;
 style-page-layout-properties-attlist ::= common-border-attlist ;
 style-page-layout-properties-attlist ::= common-border-line-width-attlist ;
 style-page-layout-properties-attlist ::= common-padding-attlist ;
 style-page-layout-properties-attlist ::= common-shadow-attlist ;
 style-page-layout-properties-attlist ::= common-background-color-attlist ;
 style-page-layout-properties-attlist ::= (style:register-truth-ref-style-name::styleNameRef)? ;
 style-page-layout-properties-attlist ::= (style:print::(("headers" | "grid" | "annotations" | "objects" | "charts" | "drawings" | "formulas" | "zero-values")*))? ;
 style-page-layout-properties-attlist ::= (style:print-page-order::("ttb" | "ltr"))? ;
 style-page-layout-properties-attlist ::= (style:first-page-number::(positiveInteger | "continue"))? ;
 style-page-layout-properties-attlist ::= (style:scale-to::percent)? (style:scale-to-pages::positiveInteger)? ;
 style-page-layout-properties-attlist ::= (style:table-centering::("horizontal" | "vertical" | "both" | "none"))? ;
 style-page-layout-properties-attlist ::= (style:footnote-max-height::length)? ;
 style-page-layout-properties-attlist ::= common-writing-mode-attlist ;
 style-page-layout-properties-attlist ::= (style:layout-grid-mode::("none" | "line" | "both"))? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-base-height::length)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-ruby-height::length)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-lines::positiveInteger)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-color::color)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-ruby-below::boolean)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-print::boolean)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-display::boolean)? ;
draw-text-box-attlist ::= (draw:chain-next-name::string)? ;
 draw-text-box-attlist ::= (draw:corner-radius::nonNegativeLength)? ;
 draw-text-box-attlist ::= (fo:min-height::(length | percent))? (fo:min-width::(length | percent))? ;
 draw-text-box-attlist ::= (fo:max-height::(length | percent))? (fo:max-width::(length | percent))? ;
 draw-text-box-attlist ::= text-id? ;
tab-cycles ::= "records" | "current" | "page" ;
table-error-message ::= table:error-message::((table:title::string)? (table:display::boolean)? (table:message-type::("stop" | "warning" | "information"))? text-p*) ;
style-table-row-properties ::= style:table-row-properties::style-table-row-properties-content ;
style-paragraph-properties-attlist ::= (fo:line-height::("normal" | nonNegativeLength | percent))? ;
 style-paragraph-properties-attlist ::= (style:line-height-at-least::nonNegativeLength)? ;
 style-paragraph-properties-attlist ::= (style:line-spacing::length)? ;
 style-paragraph-properties-attlist ::= (style:font-independent-line-spacing::boolean)? ;
 style-paragraph-properties-attlist ::= common-text-align ;
 style-paragraph-properties-attlist ::= (fo:text-align-last::("start" | "center" | "justify"))? ;
 style-paragraph-properties-attlist ::= (style:justify-single-word::boolean)? ;
 style-paragraph-properties-attlist ::= (fo:keep-together::("auto" | "always"))? ;
 style-paragraph-properties-attlist ::= (fo:widows::nonNegativeInteger)? ;
 style-paragraph-properties-attlist ::= (fo:orphans::nonNegativeInteger)? ;
 style-paragraph-properties-attlist ::= (style:tab-stop-distance::nonNegativeLength)? ;
 style-paragraph-properties-attlist ::= (fo:hyphenation-keep::("auto" | "page"))? ;
 style-paragraph-properties-attlist ::= (fo:hyphenation-ladder-count::("no-limit" | positiveInteger))? ;
 style-paragraph-properties-attlist ::= (style:register-true::boolean)? ;
 style-paragraph-properties-attlist ::= common-horizontal-margin-attlist ;
 style-paragraph-properties-attlist ::= (fo:text-indent::(length | percent))? ;
 style-paragraph-properties-attlist ::= (style:auto-text-indent::boolean)? ;
 style-paragraph-properties-attlist ::= common-vertical-margin-attlist ;
 style-paragraph-properties-attlist ::= common-margin-attlist ;
 style-paragraph-properties-attlist ::= common-break-attlist ;
 style-paragraph-properties-attlist ::= common-background-color-attlist ;
 style-paragraph-properties-attlist ::= common-border-attlist ;
 style-paragraph-properties-attlist ::= common-border-line-width-attlist ;
 style-paragraph-properties-attlist ::= common-padding-attlist ;
 style-paragraph-properties-attlist ::= common-shadow-attlist ;
 style-paragraph-properties-attlist ::= common-keep-with-next-attlist ;
 style-paragraph-properties-attlist ::= (text:number-lines::boolean)? ;
 style-paragraph-properties-attlist ::= (text:line-number::nonNegativeInteger)? ;
 style-paragraph-properties-attlist ::= (style:text-autospace::("none" | "ideograph-alpha"))? ;
 style-paragraph-properties-attlist ::= (style:punctuation-wrap::("simple" | "hanging"))? ;
 style-paragraph-properties-attlist ::= (style:line-break::("normal" | "strict"))? ;
 style-paragraph-properties-attlist ::= (style:vertical-align::("top" | "middle" | "bottom" | "auto" | "baseline"))? ;
 style-paragraph-properties-attlist ::= common-writing-mode-attlist ;
 style-paragraph-properties-attlist ::= (style:writing-mode-automatic::boolean)? ;
 style-paragraph-properties-attlist ::= (style:snap-to-layout-grid::boolean)? ;
 style-paragraph-properties-attlist ::= common-page-number-attlist ;
 style-paragraph-properties-attlist ::= (style:background-transparency::percent)? ;
draw-regular-polygon ::= draw:regular-polygon::(draw-regular-polygon-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
table-table-row-group-attlist ::= (table:display::boolean)? ;
common-border-line-width-attlist ::= (style:border-line-width::borderWidths)? (style:border-line-width-top::borderWidths)? (style:border-line-width-bottom::borderWidths)? (style:border-line-width-left::borderWidths)? (style:border-line-width-right::borderWidths)? ;
office-presentation-attlist ::= ε ;
vertBackPos ::= "top" | "center" | "bottom" ;
draw-layer-attlist ::= draw:name::string ;
 draw-layer-attlist ::= (draw:protected::boolean)? ;
 draw-layer-attlist ::= (draw:display::("always" | "screen" | "printer" | "none"))? ;
draw-circle ::= draw:circle::(draw-circle-attlist common-draw-circle-ellipse-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
IDREF ::= string() ;
draw-page ::= draw:page::(common-presentation-header-footer-attlist draw-page-attlist office-forms? shape* (presentation-animations | animation-element)? presentation-notes?) ;
presentation-settings ::= (presentation:settings::(presentation-settings-attlist presentation-show*))? ;
config-items ::= (config-config-item | config-config-item-set | config-config-item-map-named | config-config-item-map-indexed)+ ;
style-text-properties-content-strict ::= style-text-properties-attlist style-text-properties-elements ;
text-table-index ::= text:table-index::(sectionAttr text-table-index-source text-index-body) ;
pathData ::= string() ;
text-outline-level-style-attlist ::= text:level::positiveInteger ;
 text-outline-level-style-attlist ::= (text:style-name::styleNameRef)? ;
 text-outline-level-style-attlist ::= common-num-format-attlist common-num-format-prefix-suffix-attlist ;
 text-outline-level-style-attlist ::= (text:display-levels::positiveInteger)? ;
 text-outline-level-style-attlist ::= (text:start-value::positiveInteger)? ;
table-data-pilot-subtotal-attlist ::= table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string) ;
common-anim-values-attlist ::= (smil:values::string)? ;
 common-anim-values-attlist ::= (anim:formula::string)? ;
 common-anim-values-attlist ::= common-anim-set-values-attlist (smil:from::string)? (smil:by::string)? ;
table-table-template-attlist ::= text:name::string ;
 table-table-template-attlist ::= text:first-row-start-column::rowOrCol ;
 table-table-template-attlist ::= text:first-row-end-column::rowOrCol ;
 table-table-template-attlist ::= text:last-row-start-column::rowOrCol ;
 table-table-template-attlist ::= text:last-row-end-column::rowOrCol ;
office-text-content-prelude ::= office-forms text-tracked-changes text-decls table-decls ;
draw-hatch-attlist ::= draw:name::styleName ;
 draw-hatch-attlist ::= (draw:display-name::string)? ;
 draw-hatch-attlist ::= draw:style::("single" | "double" | "triple") ;
 draw-hatch-attlist ::= (draw:color::color)? ;
 draw-hatch-attlist ::= (draw:distance::length)? ;
 draw-hatch-attlist ::= (draw:rotation::integer)? ;
presentation-settings-attlist ::= (presentation:start-page::string)? ;
 presentation-settings-attlist ::= (presentation:show::string)? ;
 presentation-settings-attlist ::= (presentation:full-screen::boolean)? ;
 presentation-settings-attlist ::= (presentation:endless::boolean)? ;
 presentation-settings-attlist ::= (presentation:pause::duration)? ;
 presentation-settings-attlist ::= (presentation:show-logo::boolean)? ;
 presentation-settings-attlist ::= (presentation:force-manual::boolean)? ;
 presentation-settings-attlist ::= (presentation:mouse-visible::boolean)? ;
 presentation-settings-attlist ::= (presentation:mouse-as-pen::boolean)? ;
 presentation-settings-attlist ::= (presentation:start-with-navigator::boolean)? ;
 presentation-settings-attlist ::= (presentation:animations::("enabled" | "disabled"))? ;
 presentation-settings-attlist ::= (presentation:transition-on-click::("enabled" | "disabled"))? ;
 presentation-settings-attlist ::= (presentation:stay-on-top::boolean)? ;
 presentation-settings-attlist ::= (presentation:show-end-of-presentation-slide::boolean)? ;
dr3d-light ::= dr3d:light::dr3d-light-attlist ;
common-draw-shape-with-styles-attlist ::= common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-draw-transform-attlist common-draw-name-attlist common-text-spreadsheet-shape-attlist ;
number-day-of-week-attlist ::= (number:style::("short" | "long"))? ;
number-and-text ::= number-number number-text? ;
common-keep-with-next-attlist ::= (fo:keep-with-next::("auto" | "always"))? ;
languageCode ::= string() ;
common-text-anchor-attlist ::= (text:anchor-type::("page" | "frame" | "paragraph" | "char" | "as-char"))? ;
 common-text-anchor-attlist ::= (text:anchor-page-number::positiveInteger)? ;
common-field-num-format-attlist ::= common-num-format-attlist? ;
presentation-show-shape ::= presentation:show-shape::(common-presentation-effect-attlist presentation-sound?) ;
table-sort-groups ::= table:sort-groups::table-sort-groups-attlist ;
text-object-index ::= text:object-index::(sectionAttr text-object-index-source text-index-body) ;
table-insertion-attlist ::= table:type::("row" | "column" | "table") ;
 table-insertion-attlist ::= table:position::integer ;
 table-insertion-attlist ::= (table:count::positiveInteger)? ;
 table-insertion-attlist ::= (table:table::integer)? ;
table-filter-and ::= table:filter-and::((table-filter-or | table-filter-condition)+) ;
office-document-common-attrs ::= (office:version::string)? ;
common-draw-style-name-attlist ::= ((draw:style-name::styleNameRef)? (draw:class-names::styleNameRefs)?) | ((presentation:style-name::styleNameRef)? (presentation:class-names::styleNameRefs)?) ;
text-bibliography-configuration-attlist ::= (text:prefix::string)? (text:suffix::string)? ;
 text-bibliography-configuration-attlist ::= (text:numbered-entries::boolean)? ;
 text-bibliography-configuration-attlist ::= (text:sort-by-position::boolean)? (fo:language::languageCode)? (fo:country::countryCode)? (text:sort-algorithm::string)? ;
chart-floor ::= chart:floor::chart-floor-attlist ;
office-master-styles ::= (office:master-styles::(style-master-page* style-handout-master? draw-layer-set?))? ;
table-table-header-rows ::= table:table-header-rows::((text-soft-page-break? table-table-row)+) ;
text-list-level-style-image-attr ::= common-draw-data-attlist | office-binary-data ;
table-movement-cut-off-attlist ::= (table:position::integer) | (table:start-position::integer table:end-position::integer) ;
style-table-column-properties-elements ::= ε ;
table-table-cell-attlist ::= (table:number-columns-repeated::positiveInteger)? ;
 table-table-cell-attlist ::= (table:style-name::styleNameRef)? ;
 table-table-cell-attlist ::= (table:content-validation-name::string)? ;
 table-table-cell-attlist ::= (table:formula::string)? ;
 table-table-cell-attlist ::= common-value-and-type-attlist? ;
 table-table-cell-attlist ::= (table:protect::boolean)? ;
style-list-level-properties ::= style:list-level-properties::style-list-level-properties-content ;
lineType ::= "none" | "single" | "double" ;
number-minutes-attlist ::= (number:style::("short" | "long"))? ;
table-change-deletion ::= table:change-deletion::((table:id::string)?) ;
timeOrDateTime ::= string() ;
table-data-pilot-layout-info-attlist ::= table:layout-mode::("tabular-layout" | "outline-subtotals-top" | "outline-subtotals-bottom") ;
 table-data-pilot-layout-info-attlist ::= table:add-empty-lines::boolean ;
table-filter-attlist ::= (table:target-range-address::cellRangeAddress)? ;
 table-filter-attlist ::= (table:condition-source::("self" | "cell-range"))? ;
 table-filter-attlist ::= (table:condition-source-range-address::cellRangeAddress)? ;
 table-filter-attlist ::= (table:display-duplicates::boolean)? ;
draw-ellipse-attlist ::= (svg:rx::length svg:ry::length)? ;
table-table-column-group ::= table:table-column-group::(table-table-column-group-attlist table-columns-and-groups) ;
text-index-entry-link-start ::= text:index-entry-link-start::((text:style-name::styleNameRef)?) ;
common-convert-empty-attlist ::= (form:convert-empty-to-null::boolean)? ;
table-last-row ::= table:last-row::common-table-template-attlist ;
style-style-content ::= style:family::"text" style-text-properties? ;
 style-style-content ::= style:family::"paragraph" style-paragraph-properties? style-text-properties? ;
 style-style-content ::= style:family::"section" style-section-properties? ;
 style-style-content ::= style:family::"ruby" style-ruby-properties? ;
 style-style-content ::= style:family::"table" style-table-properties? ;
 style-style-content ::= style:family::"table-column" style-table-column-properties? ;
 style-style-content ::= style:family::"table-row" style-table-row-properties? ;
 style-style-content ::= style:family::"table-cell" style-table-cell-properties? style-paragraph-properties? style-text-properties? ;
 style-style-content ::= style:family::("graphic" | "presentation") style-graphic-properties? style-paragraph-properties? style-text-properties? ;
 style-style-content ::= style:family::"drawing-page" style-drawing-page-properties? ;
 style-style-content ::= style:family::"chart" style-chart-properties? style-graphic-properties? style-paragraph-properties? style-text-properties? ;
common-format-source-attlist ::= (number:format-source::("fixed" | "language"))? ;
table-change-track-table-cell ::= table:change-track-table-cell::(table-change-track-table-cell-attlist text-p*) ;
text-list ::= text:list::(text-list-attr text-list-header? text-list-item*) ;
common-table-cell-address-attlist ::= table:column::integer table:row::integer table:table::integer ;
common-anim-set-values-attlist ::= (smil:to::string)? ;
table-table-column-group-attlist ::= (table:display::boolean)? ;
style-footer ::= style:footer::(common-style-header-footer-attlist header-footer-content) ;
fontVariant ::= "normal" | "small-caps" ;
text-bibliography-entry-template-attrs ::= text:bibliography-type::text-bibliography-types ;
 text-bibliography-entry-template-attrs ::= text:style-name::styleNameRef ;
number-year-attlist ::= (number:style::("short" | "long"))? ;
svg-font-face-format ::= svg:font-face-format::((svg:string::string())?) ;
style-map-attlist ::= style:condition::string ;
 style-map-attlist ::= style:apply-style-name::styleNameRef ;
 style-map-attlist ::= (style:base-cell-address::cellAddress)? ;
number-text ::= number:text::string() ;
text-index-entry-tab-stop ::= text:index-entry-tab-stop::((text:style-name::styleNameRef)? text-index-entry-tab-stop-attrs) ;
table-sort-attlist ::= (table:bind-styles-to-content::boolean)? ;
 table-sort-attlist ::= (table:target-range-address::cellRangeAddress)? ;
 table-sort-attlist ::= (table:case-sensitive::boolean)? ;
 table-sort-attlist ::= (table:language::languageCode)? ;
 table-sort-attlist ::= (table:country::countryCode)? ;
 table-sort-attlist ::= (table:algorithm::string)? ;
chart-chart ::= chart:chart::(chart-chart-attlist chart-title? chart-subtitle? chart-footer? chart-legend? chart-plot-area table-table?) ;
style-table-properties ::= style:table-properties::style-table-properties-content ;
office-spreadsheet-attlist ::= (table:structure-protected::boolean)? (table:protection-key::string)? ;
style-chart-properties-content-strict ::= style-chart-properties-attlist style-chart-properties-elements ;
style-header-left ::= style:header-left::(common-style-header-footer-attlist header-footer-content) ;
common-value-type-attlist ::= office:value-type::valueType ;
table-rows-no-group ::= (table-rows (table-table-header-rows table-rows?)?) | (table-table-header-rows table-rows?) ;
common-field-database-name ::= (text:database-name::string)? ;
 common-field-database-name ::= form-connection-resource ;
chart-subtitle ::= chart:subtitle::(chart-title-attlist text-p?) ;
table-filter-condition ::= table:filter-condition::table-filter-condition-attlist ;
style-region-left ::= style:region-left::region-content ;
text-soft-page-break ::= text:soft-page-break::ε ;
common-draw-position-attlist ::= (svg:x::coordinate)? (svg:y::coordinate)? ;
common-padding-attlist ::= (fo:padding::nonNegativeLength)? (fo:padding-top::nonNegativeLength)? (fo:padding-bottom::nonNegativeLength)? (fo:padding-left::nonNegativeLength)? (fo:padding-right::nonNegativeLength)? ;
draw-contour-path ::= draw:contour-path::(common-contour-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-path-data-attlist) ;
style-table-properties-attlist ::= (style:width::positiveLength)? (style:rel-width::percent)? ;
 style-table-properties-attlist ::= (table:align::("left" | "center" | "right" | "margins"))? ;
 style-table-properties-attlist ::= common-horizontal-margin-attlist ;
 style-table-properties-attlist ::= common-vertical-margin-attlist ;
 style-table-properties-attlist ::= common-margin-attlist ;
 style-table-properties-attlist ::= common-page-number-attlist ;
 style-table-properties-attlist ::= common-break-attlist ;
 style-table-properties-attlist ::= common-background-color-attlist ;
 style-table-properties-attlist ::= common-shadow-attlist ;
 style-table-properties-attlist ::= common-keep-with-next-attlist ;
 style-table-properties-attlist ::= (style:may-break-between-rows::boolean)? ;
 style-table-properties-attlist ::= (table:border-model::("collapsing" | "separating"))? ;
 style-table-properties-attlist ::= common-writing-mode-attlist ;
 style-table-properties-attlist ::= (table:display::boolean)? ;
text-alphabetical-index-source-attrs ::= text-index-scope-attr text-relative-tab-stop-position-attr ;
 text-alphabetical-index-source-attrs ::= (text:ignore-case::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:main-entry-style-name::styleNameRef)? ;
 text-alphabetical-index-source-attrs ::= (text:alphabetical-separators::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:combine-entries::boolean)? (text:combine-entries-with-dash::boolean)? (text:combine-entries-with-pp::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:use-keys-as-entries::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:capitalize-entries::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:comma-separated::boolean)? ;
 text-alphabetical-index-source-attrs ::= (fo:language::languageCode)? ;
 text-alphabetical-index-source-attrs ::= (fo:country::countryCode)? ;
 text-alphabetical-index-source-attrs ::= (text:sort-algorithm::string)? ;
text-list-attr ::= (text:style-name::styleNameRef)? ;
 text-list-attr ::= (text:continue-numbering::boolean)? ;
form-form-attlist ::= (xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")?)? ;
 form-form-attlist ::= (office:target-frame::targetFrameName)? ;
 form-form-attlist ::= (form:method::("get" | "post" | string))? ;
 form-form-attlist ::= (form:enctype::string)? ;
 form-form-attlist ::= (form:allow-deletes::boolean)? ;
 form-form-attlist ::= (form:allow-inserts::boolean)? ;
 form-form-attlist ::= (form:allow-updates::boolean)? ;
 form-form-attlist ::= (form:apply-filter::boolean)? ;
 form-form-attlist ::= (form:command-type::("table" | "query" | "command"))? ;
 form-form-attlist ::= (form:command::string())? ;
 form-form-attlist ::= (form:datasource::(anyURI | string))? ;
 form-form-attlist ::= (form:master-fields::string)? ;
 form-form-attlist ::= (form:detail-fields::string)? ;
 form-form-attlist ::= (form:escape-processing::boolean)? ;
 form-form-attlist ::= (form:filter::string)? ;
 form-form-attlist ::= (form:ignore-result::boolean)? ;
 form-form-attlist ::= (form:navigation-mode::navigation)? ;
 form-form-attlist ::= (form:order::string)? ;
 form-form-attlist ::= (form:tab-cycle::tab-cycles)? ;
table-table-columns ::= table:table-columns::(table-table-column+) ;
text-tracked-changes-attr ::= (text:track-changes::boolean)? ;
style-table-properties-content-strict ::= style-table-properties-attlist style-table-properties-elements ;
ID ::= string() ;
table-table-header-columns ::= table:table-header-columns::(table-table-column+) ;
table-help-message ::= table:help-message::((table:title::string)? (table:display::boolean)? text-p*) ;
table-filter-or ::= table:filter-or::((table-filter-and | table-filter-condition)+) ;
common-printable-attlist ::= (form:printable::boolean)? ;
heading-attrs ::= text:outline-level::positiveInteger ;
 heading-attrs ::= (text:restart-numbering::boolean)? ;
 heading-attrs ::= (text:start-value::nonNegativeInteger)? ;
 heading-attrs ::= (text:is-list-header::boolean)? ;
form-frame-attlist ::= form-control-attlist common-disabled-attlist for label common-printable-attlist common-title-attlist ;
table-data-pilot-sort-info-attlist ::= (table:sort-mode::"data" table:data-field::string) | (table:sort-mode::("none" | "manual" | "name")) ;
 table-data-pilot-sort-info-attlist ::= table:order::("ascending" | "descending") ;
common-time-manip-attlist ::= (smil:accelerate::double)? ;
 common-time-manip-attlist ::= (smil:decelerate::double)? ;
 common-time-manip-attlist ::= (smil:autoReverse::boolean)? ;
form-textarea-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist ;
text-numbered-paragraph-attr ::= (text:level::positiveInteger)? ;
 text-numbered-paragraph-attr ::= text-list-attr ;
 text-numbered-paragraph-attr ::= text-list-item-attr ;
draw-glue-point-attlist ::= draw:id::nonNegativeInteger ;
 draw-glue-point-attlist ::= svg:x::(distance | percent) svg:y::(distance | percent) ;
 draw-glue-point-attlist ::= (draw:align::("top-left" | "top" | "top-right" | "left" | "center" | "right" | "bottom-left" | "bottom-right"))? ;
table-data-pilot-field-attlist ::= table:source-field-name::string ;
 table-data-pilot-field-attlist ::= (table:orientation::("row" | "column" | "data" | "hidden")) | (table:orientation::"page" table:selected-page::string) ;
 table-data-pilot-field-attlist ::= (table:is-data-layout-field::string)? ;
 table-data-pilot-field-attlist ::= (table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string))? ;
 table-data-pilot-field-attlist ::= (table:used-hierarchy::integer)? ;
office-styles ::= (office:styles::(styles style-default-style* text-outline-style? text-notes-configuration* text-bibliography-configuration? text-linenumbering-configuration? draw-gradient* svg-linearGradient* svg-radialGradient* draw-hatch* draw-fill-image* draw-marker* draw-stroke-dash* draw-opacity* style-presentation-page-layout*))? ;
style-drawing-page-properties-content ::= style-drawing-page-properties-content-strict ;
 style-drawing-page-properties-content ::= style-properties-content ;
common-draw-viewbox-attlist ::= svg:viewBox::(integer integer integer integer) ;
namespacedToken ::= string() ;
table-table ::= table:table::(table-table-attlist table-table-source? office-dde-source? table-scenario? office-forms? table-shapes? table-columns-and-groups table-rows-and-groups) ;
style-footnote-sep ::= (style:footnote-sep::style-footnote-sep-attlist)? ;
style-header-style ::= style:header-style::(style-header-footer-properties?) ;
anim-audio-attlist ::= (xlink:href::anyURI)? ;
 anim-audio-attlist ::= (anim:audio-level::double)? ;
office-document ::= office:document::(office-document-attrs office-document-common-attrs office-meta office-settings office-scripts office-font-face-decls office-styles office-automatic-styles office-master-styles office-body) ;
number-day-attlist ::= (number:style::("short" | "long"))? ;
office-drawing-content-epilogue ::= table-functions ;
common-horizontal-margin-attlist ::= (fo:margin-left::(length | percent))? (fo:margin-right::(length | percent))? ;
text-page-continuation-attlist ::= text:select-page::("previous" | "next") ;
 text-page-continuation-attlist ::= (text:string-value::string)? ;
text-user-index-entry-template-attrs ::= text:outline-level::positiveInteger ;
 text-user-index-entry-template-attrs ::= text:style-name::styleNameRef ;
text-illustration-index-entry-content ::= text-illustration-index-entry-template-attrs (text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop)* ;
positiveInteger ::= integer() ;
common-anim-add-accum-attlist ::= (smil:accumulate::("none" | "sum"))? ;
 common-anim-add-accum-attlist ::= (smil:additive::("replace" | "sum"))? ;
draw-applet ::= draw:applet::(draw-applet-attlist common-draw-data-attlist? draw-param*) ;
text-database-display-attlist ::= common-field-database-table ;
 text-database-display-attlist ::= common-field-data-style-name-attlist ;
 text-database-display-attlist ::= text:column-name::string ;
number-embedded-text-attlist ::= number:position::integer ;
style-master-page ::= style:master-page::(style-master-page-attlist (style-header style-header-left?)? (style-footer style-footer-left?)? office-forms? style-style* shape* presentation-notes?) ;
style-handout-master-attlist ::= (presentation:presentation-page-layout-name::styleNameRef)? ;
 style-handout-master-attlist ::= style:page-layout-name::styleNameRef ;
 style-handout-master-attlist ::= (draw:style-name::styleNameRef)? ;
text-linenumbering-separator ::= text:linenumbering-separator::((text:increment::nonNegativeInteger)? string()) ;
text-index-title ::= text:index-title::(sectionAttr index-content-main*) ;
text-common-ref-content ::= string() ;
 text-common-ref-content ::= (text:ref-name::string)? ;
office-script ::= office:script::(office-script-attlist string()? anyElements string()?) ;
text-alphabetical-index-entry-template-attrs ::= text:outline-level::("1" | "2" | "3" | "separator") ;
 text-alphabetical-index-entry-template-attrs ::= text:style-name::styleNameRef ;
presentation-play-attlist ::= draw:shape-id::IDREF (presentation:speed::presentationSpeeds)? ;
table-insertion-cut-off-attlist ::= table:id::string ;
 table-insertion-cut-off-attlist ::= table:position::integer ;
svg-radialGradient ::= svg:radialGradient::(common-svg-gradient-attlist (svg:cx::(coordinate | percent))? (svg:cy::(coordinate | percent))? (svg:r::(coordinate | percent))? (svg:fx::(coordinate | percent))? (svg:fy::(coordinate | percent))? svg-stop*) ;
common-anim-spline-mode-attlist ::= (smil:calcMode::("discrete" | "linear" | "paced" | "spline"))? ;
table-cell-range-source ::= table:cell-range-source::(table-table-cell-range-source-attlist table-linked-source-attlist) ;
draw-connector-attlist ::= (draw:type::("standard" | "lines" | "line" | "curve"))? ;
 draw-connector-attlist ::= (svg:x1::coordinate svg:y1::coordinate)? ;
 draw-connector-attlist ::= (draw:start-shape::IDREF)? ;
 draw-connector-attlist ::= (draw:start-glue-point::nonNegativeInteger)? ;
 draw-connector-attlist ::= (svg:x2::coordinate svg:y2::coordinate)? ;
 draw-connector-attlist ::= (draw:end-shape::IDREF)? ;
 draw-connector-attlist ::= (draw:end-glue-point::nonNegativeInteger)? ;
 draw-connector-attlist ::= (draw:line-skew::(length (length length?)?))? ;
table-highlighted-range-attlist ::= (table:cell-range-address::cellRangeAddress)? ;
 table-highlighted-range-attlist ::= table:direction::("from-another-table" | "to-another-table" | "from-same-table") ;
 table-highlighted-range-attlist ::= (table:contains-error::boolean)? ;
button-type ::= (form:button-type::types)? ;
table-null-date ::= table:null-date::((table:value-type::valueType)? (table:date-value::date)?) ;
svg-definition-src ::= svg:definition-src::common-svg-font-face-xlink-attlist ;
style-master-page-attlist ::= style:name::styleName ;
 style-master-page-attlist ::= (style:display-name::string)? ;
 style-master-page-attlist ::= style:page-layout-name::styleNameRef ;
 style-master-page-attlist ::= (draw:style-name::styleNameRef)? ;
 style-master-page-attlist ::= (style:next-style-name::styleNameRef)? ;
text-user-index ::= text:user-index::(sectionAttr text-user-index-source text-index-body) ;
number-month-attlist ::= (number:textual::boolean)? ;
 number-month-attlist ::= (number:possessive-form::boolean)? ;
 number-month-attlist ::= (number:style::("short" | "long"))? ;
chart-data-point-attlist ::= (chart:repeated::nonNegativeInteger)? ;
 chart-data-point-attlist ::= (chart:style-name::styleNameRef)? ;
text-index-entry-bibliography-attrs ::= (text:style-name::styleNameRef)? ;
 text-index-entry-bibliography-attrs ::= text:bibliography-data-field::("address" | "annote" | "author" | "bibliography-type" | "booktitle" | "chapter" | "custom1" | "custom2" | "custom3" | "custom4" | "custom5" | "edition" | "editor" | "howpublished" | "identifier" | "institution" | "isbn" | "issn" | "journal" | "month" | "note" | "number" | "organizations" | "pages" | "publisher" | "report-type" | "school" | "series" | "title" | "url" | "volume" | "year") ;
dateOrDateTime ::= string() ;
text-table-of-content-children ::= text-index-entry-chapter | text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop | text-index-entry-link-start | text-index-entry-link-end ;
draw-marker ::= draw:marker::(draw-marker-attlist common-draw-viewbox-attlist common-draw-path-data-attlist) ;
common-data-style-attlist ::= style:name::styleName ;
 common-data-style-attlist ::= (number:language::languageCode)? ;
 common-data-style-attlist ::= (number:country::countryCode)? ;
 common-data-style-attlist ::= (number:title::string())? ;
 common-data-style-attlist ::= (style:volatile::boolean)? ;
 common-data-style-attlist ::= (number:transliteration-format::string)? ;
 common-data-style-attlist ::= (number:transliteration-language::countryCode)? ;
 common-data-style-attlist ::= (number:transliteration-country::countryCode)? ;
 common-data-style-attlist ::= (number:transliteration-style::("short" | "medium" | "long"))? ;
table-database-source-table-attlist ::= table:database-name::string ;
 table-database-source-table-attlist ::= table:database-table-name::string ;
office-spreadsheet-content-main ::= table-table* ;
dr3d-scene ::= dr3d:scene::(dr3d-scene-attlist common-draw-position-attlist common-draw-size-attlist common-draw-style-name-attlist common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-text-spreadsheet-shape-attlist common-dr3d-transform-attlist common-draw-caption-id-attlist svg-title? svg-desc? dr3d-light* shapes3d*) ;
table-columns ::= table-table-columns | (table-table-column+) ;
dc-creator ::= dc:creator::string ;
image-data ::= (form:image-data::anyURI)? ;
chart-legend ::= chart:legend::chart-legend-attlist ;
number-scientific-number-attlist ::= (number:min-exponent-digits::integer)? ;
text-section-source-attr ::= (xlink:href::anyURI (xlink:type::"simple")? (xlink:show::"embed")?)? ;
 text-section-source-attr ::= (text:section-name::string)? ;
 text-section-source-attr ::= (text:filter-name::string)? ;
gradient-style ::= "linear" | "axial" | "radial" | "ellipsoid" | "square" | "rectangular" ;
relativeLength ::= string() ;
office-annotation-attlist ::= (office:display::boolean)? ;
common-dr3d-transform-attlist ::= (dr3d:transform::string())? ;
common-field-database-table ::= common-field-database-table-attlist common-field-database-name ;
number-era ::= number:era::(number-era-attlist common-calendar-attlist) ;
dr3d-scene-attlist ::= (dr3d:vrp::vector3D)? (dr3d:vpn::vector3D)? (dr3d:vup::vector3D)? ;
 dr3d-scene-attlist ::= (dr3d:projection::("parallel" | "perspective"))? ;
 dr3d-scene-attlist ::= (dr3d:distance::length)? ;
 dr3d-scene-attlist ::= (dr3d:focal-length::length)? ;
 dr3d-scene-attlist ::= (dr3d:shadow-slant::nonNegativeInteger)? ;
 dr3d-scene-attlist ::= (dr3d:shade-mode::("flat" | "phong" | "gouraud" | "draft"))? ;
 dr3d-scene-attlist ::= (dr3d:ambient-color::color)? ;
 dr3d-scene-attlist ::= (dr3d:lighting-mode::boolean)? ;
draw-rect ::= draw:rect::(draw-rect-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
text-changed-region ::= text:changed-region::(text-changed-region-attr text-changed-region-content) ;
text-alphabetical-index-source ::= text:alphabetical-index-source::(text-alphabetical-index-source-attrs text-index-title-template? text-alphabetical-index-entry-template*) ;
common-draw-z-index-attlist ::= (draw:z-index::nonNegativeInteger)? ;
style-chart-properties-content ::= style-chart-properties-content-strict ;
 style-chart-properties-content ::= style-properties-content ;
table-dependencies ::= table:dependencies::(table-dependency+) ;
chart-grid-attlist ::= (chart:class::("major" | "minor"))? ;
 chart-grid-attlist ::= (chart:style-name::styleNameRef)? ;
table-target-range-address ::= table:target-range-address::common-table-range-attlist ;
style-graphic-properties-attlist ::= (draw:stroke::("none" | "dash" | "solid"))? ;
 style-graphic-properties-attlist ::= (draw:stroke-dash::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:stroke-dash-names::styleNameRefs)? ;
 style-graphic-properties-attlist ::= (svg:stroke-width::length)? ;
 style-graphic-properties-attlist ::= (svg:stroke-color::color)? ;
 style-graphic-properties-attlist ::= (draw:marker-start::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:marker-end::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:marker-start-width::length)? ;
 style-graphic-properties-attlist ::= (draw:marker-end-width::length)? ;
 style-graphic-properties-attlist ::= (draw:marker-start-center::boolean)? ;
 style-graphic-properties-attlist ::= (draw:marker-end-center::boolean)? ;
 style-graphic-properties-attlist ::= (svg:stroke-opacity::(string() | percent))? ;
 style-graphic-properties-attlist ::= (draw:stroke-linejoin::("miter" | "round" | "bevel" | "middle" | "none" | "inherit"))? ;
 style-graphic-properties-attlist ::= (draw:symbol-color::color)? ;
 style-graphic-properties-attlist ::= (text:animation::("none" | "scroll" | "alternate" | "slide"))? ;
 style-graphic-properties-attlist ::= (text:animation-direction::("left" | "right" | "up" | "down"))? ;
 style-graphic-properties-attlist ::= (text:animation-start-inside::boolean)? ;
 style-graphic-properties-attlist ::= (text:animation-stop-inside::boolean)? ;
 style-graphic-properties-attlist ::= (text:animation-repeat::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (text:animation-delay::duration)? ;
 style-graphic-properties-attlist ::= (text:animation-steps::length)? ;
 style-graphic-properties-attlist ::= (draw:auto-grow-width::boolean)? (draw:auto-grow-height::boolean)? ;
 style-graphic-properties-attlist ::= (draw:fit-to-size::boolean)? ;
 style-graphic-properties-attlist ::= (draw:fit-to-contour::boolean)? ;
 style-graphic-properties-attlist ::= (draw:textarea-vertical-align::("top" | "middle" | "bottom" | "justify"))? ;
 style-graphic-properties-attlist ::= (draw:textarea-horizontal-align::("left" | "center" | "right" | "justify"))? ;
 style-graphic-properties-attlist ::= (fo:wrap-option::("no-wrap" | "wrap"))? ;
 style-graphic-properties-attlist ::= (draw:color-mode::("greyscale" | "mono" | "watermark" | "standard"))? ;
 style-graphic-properties-attlist ::= (draw:color-inversion::boolean)? ;
 style-graphic-properties-attlist ::= (draw:luminance::percent)? ;
 style-graphic-properties-attlist ::= (draw:contrast::percent)? ;
 style-graphic-properties-attlist ::= (draw:gamma::percent)? ;
 style-graphic-properties-attlist ::= (draw:red::percent)? ;
 style-graphic-properties-attlist ::= (draw:green::percent)? ;
 style-graphic-properties-attlist ::= (draw:blue::percent)? ;
 style-graphic-properties-attlist ::= (draw:image-opacity::percent)? ;
 style-graphic-properties-attlist ::= (draw:shadow::("visible" | "hidden"))? ;
 style-graphic-properties-attlist ::= (draw:shadow-offset-x::length)? (draw:shadow-offset-y::length)? ;
 style-graphic-properties-attlist ::= (draw:shadow-color::color)? ;
 style-graphic-properties-attlist ::= (draw:shadow-opacity::percent)? ;
 style-graphic-properties-attlist ::= (draw:start-line-spacing-horizontal::distance)? (draw:start-line-spacing-vertical::distance)? ;
 style-graphic-properties-attlist ::= (draw:end-line-spacing-horizontal::distance)? (draw:end-line-spacing-vertical::distance)? ;
 style-graphic-properties-attlist ::= (draw:line-distance::distance)? ;
 style-graphic-properties-attlist ::= (draw:guide-overhang::length)? ;
 style-graphic-properties-attlist ::= (draw:guide-distance::distance)? ;
 style-graphic-properties-attlist ::= (draw:start-guide::length)? ;
 style-graphic-properties-attlist ::= (draw:end-guide::length)? ;
 style-graphic-properties-attlist ::= (draw:placing::("below" | "above"))? ;
 style-graphic-properties-attlist ::= (draw:parallel::boolean)? ;
 style-graphic-properties-attlist ::= (draw:measure-align::("automatic" | "left-outside" | "inside" | "right-outside"))? (draw:measure-vertical-align::("automatic" | "above" | "below" | "center"))? ;
 style-graphic-properties-attlist ::= (draw:unit::("automatic" | "mm" | "cm" | "m" | "km" | "pt" | "pc" | "inch" | "ft" | "mi"))? ;
 style-graphic-properties-attlist ::= (draw:show-unit::boolean)? ;
 style-graphic-properties-attlist ::= (draw:decimal-places::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (draw:caption-type::("straight-line" | "angled-line" | "angled-connector-line"))? ;
 style-graphic-properties-attlist ::= (draw:caption-angle-type::("fixed" | "free"))? ;
 style-graphic-properties-attlist ::= (draw:caption-angle::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (draw:caption-gap::distance)? ;
 style-graphic-properties-attlist ::= (draw:caption-escape-direction::("horizontal" | "vertical" | "auto"))? ;
 style-graphic-properties-attlist ::= (draw:caption-escape::(length | percent))? ;
 style-graphic-properties-attlist ::= (draw:caption-line-length::length)? ;
 style-graphic-properties-attlist ::= (draw:caption-fit-line-length::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:horizontal-segments::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:vertical-segments::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:edge-rounding::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:edge-rounding-mode::("correct" | "attractive"))? ;
 style-graphic-properties-attlist ::= (dr3d:back-scale::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:depth::length)? ;
 style-graphic-properties-attlist ::= (dr3d:backface-culling::("enabled" | "disabled"))? ;
 style-graphic-properties-attlist ::= (dr3d:end-angle::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:close-front::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:close-back::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:lighting-mode::("standard" | "double-sided"))? ;
 style-graphic-properties-attlist ::= (dr3d:normals-kind::("object" | "flat" | "sphere"))? ;
 style-graphic-properties-attlist ::= (dr3d:normals-direction::("normal" | "inverse"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-generation-mode-x::("object" | "parallel" | "sphere"))? (dr3d:texture-generation-mode-y::("object" | "parallel" | "sphere"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-kind::("luminance" | "intensity" | "color"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-filter::("enabled" | "disabled"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-mode::("replace" | "modulate" | "blend"))? ;
 style-graphic-properties-attlist ::= (dr3d:ambient-color::color)? (dr3d:emissive-color::color)? (dr3d:specular-color::color)? (dr3d:diffuse-color::color)? ;
 style-graphic-properties-attlist ::= (dr3d:shininess::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:shadow::("visible" | "hidden"))? ;
 style-graphic-properties-attlist ::= common-draw-rel-size-attlist (fo:min-width::(length | percent))? ;
 style-graphic-properties-attlist ::= (fo:min-height::(length | percent))? ;
 style-graphic-properties-attlist ::= (fo:max-height::(length | percent))? (fo:max-width::(length | percent))? ;
 style-graphic-properties-attlist ::= common-horizontal-margin-attlist ;
 style-graphic-properties-attlist ::= common-vertical-margin-attlist ;
 style-graphic-properties-attlist ::= common-margin-attlist ;
 style-graphic-properties-attlist ::= (style:print-content::boolean)? ;
 style-graphic-properties-attlist ::= (style:protect::("none" | (("content" | "position" | "size")+)))? ;
 style-graphic-properties-attlist ::= (style:horizontal-pos::("left" | "center" | "right" | "from-left" | "inside" | "outside" | "from-inside"))? (svg:x::coordinate)? ;
 style-graphic-properties-attlist ::= (style:horizontal-rel::("page" | "page-content" | "page-start-margin" | "page-end-margin" | "frame" | "frame-content" | "frame-start-margin" | "frame-end-margin" | "paragraph" | "paragraph-content" | "paragraph-start-margin" | "paragraph-end-margin" | "char"))? ;
 style-graphic-properties-attlist ::= common-vertical-pos-attlist ;
 style-graphic-properties-attlist ::= common-vertical-rel-attlist ;
 style-graphic-properties-attlist ::= common-text-anchor-attlist ;
 style-graphic-properties-attlist ::= common-border-attlist ;
 style-graphic-properties-attlist ::= common-border-line-width-attlist ;
 style-graphic-properties-attlist ::= common-padding-attlist ;
 style-graphic-properties-attlist ::= common-shadow-attlist ;
 style-graphic-properties-attlist ::= common-background-color-attlist ;
 style-graphic-properties-attlist ::= (style:editable::boolean)? ;
 style-graphic-properties-attlist ::= (style:wrap::("none" | "left" | "right" | "parallel" | "dynamic" | "run-through" | "biggest"))? ;
 style-graphic-properties-attlist ::= (style:wrap-dynamic-threshold::nonNegativeLength)? ;
 style-graphic-properties-attlist ::= (style:number-wrapped-paragraphs::("no-limit" | positiveInteger))? ;
 style-graphic-properties-attlist ::= (style:wrap-contour::boolean)? ;
 style-graphic-properties-attlist ::= (style:wrap-contour-mode::("full" | "outside"))? ;
 style-graphic-properties-attlist ::= (style:run-through::("foreground" | "background"))? ;
 style-graphic-properties-attlist ::= (style:flow-with-text::boolean)? ;
 style-graphic-properties-attlist ::= (style:overflow-behavior::("clip" | "auto-create-new-frame"))? ;
 style-graphic-properties-attlist ::= (style:mirror::("none" | "vertical" | horizontal-mirror | ("vertical" horizontal-mirror) | (horizontal-mirror "vertical")))? ;
 style-graphic-properties-attlist ::= (fo:clip::string)? ;
 style-graphic-properties-attlist ::= (draw:wrap-influence-on-position::("iterative" | "once-concurrent" | "once-successive"))? ;
 style-graphic-properties-attlist ::= common-writing-mode-attlist ;
 style-graphic-properties-attlist ::= (draw:frame-display-scrollbar::boolean)? ;
 style-graphic-properties-attlist ::= (draw:frame-display-border::boolean)? ;
 style-graphic-properties-attlist ::= (draw:frame-margin-horizontal::nonNegativePixelLength)? (draw:frame-margin-vertical::nonNegativePixelLength)? ;
 style-graphic-properties-attlist ::= (draw:visible-area-left::nonNegativeLength)? (draw:visible-area-top::nonNegativeLength)? (draw:visible-area-width::positiveLength)? (draw:visible-area-height::positiveLength)? ;
 style-graphic-properties-attlist ::= (draw:ole-draw-aspect::nonNegativeInteger)? ;
presentationSpeeds ::= "slow" | "medium" | "fast" ;
office-font-face-decls ::= (office:font-face-decls::(style-font-face*))? ;
office-document-styles ::= office:document-styles::(office-document-common-attrs office-font-face-decls office-styles office-automatic-styles office-master-styles) ;
table-subtotal-field-attlist ::= table:field-number::nonNegativeInteger ;
 table-subtotal-field-attlist ::= table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string) ;
text-hidden-text-attlist ::= text:condition::formula ;
 text-hidden-text-attlist ::= text:string-value::string ;
 text-hidden-text-attlist ::= (text:is-hidden::boolean)? ;
form-property ::= form:property::(form-property-name form-property-value-and-type-attlist) ;
 form-property ::= form:list-property::(form-property-name form-property-type-and-value-list) ;
table-named-expression-attlist ::= table:name::string table:expression::string (table:base-cell-address::cellAddress)? ;
nonNegativeInteger ::= integer() ;
style-paragraph-properties-content-strict ::= style-paragraph-properties-attlist style-paragraph-properties-elements ;
script-event-listener-attlist ::= script:event-name::string ;
 script-event-listener-attlist ::= script:language::string ;
 script-event-listener-attlist ::= (script:macro-name::string) | (xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")?) ;
text-variable-decl ::= text:variable-decl::(common-field-name-attlist common-value-type-attlist) ;
draw-fill-image ::= draw:fill-image::(draw-fill-image-attlist xlink:href::anyURI (xlink:type::"simple")? (xlink:show::"embed")? (xlink:actuate::"onLoad")?) ;
office-document-content ::= office:document-content::(office-document-common-attrs office-scripts office-font-face-decls office-automatic-styles office-body) ;
anim-animate-transform-attlist ::= svg:type::("translate" | "scale" | "rotate" | "skewX" | "skewY") ;
draw-param-attlist ::= (draw:name::string())? ;
 draw-param-attlist ::= (draw:value::string())? ;
common-begin-end-timing-attlist ::= (smil:begin::string)? ;
 common-begin-end-timing-attlist ::= (smil:end::string)? ;
common-presentation-effect-attlist ::= draw:shape-id::IDREF ;
 common-presentation-effect-attlist ::= (presentation:effect::presentationEffects)? ;
 common-presentation-effect-attlist ::= (presentation:direction::presentationEffectDirections)? ;
 common-presentation-effect-attlist ::= (presentation:speed::presentationSpeeds)? ;
 common-presentation-effect-attlist ::= (presentation:delay::duration)? ;
 common-presentation-effect-attlist ::= (presentation:start-scale::percent)? ;
 common-presentation-effect-attlist ::= (presentation:path-id::string())? ;
style-columns-attlist ::= fo:column-count::positiveInteger ;
 style-columns-attlist ::= (fo:column-gap::length)? ;
text-a-attlist ::= (office:name::string)? ;
 text-a-attlist ::= (office:title::string)? ;
 text-a-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? ;
 text-a-attlist ::= (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? ;
 text-a-attlist ::= (text:style-name::styleNameRef)? (text:visited-style-name::styleNameRef)? ;
config-config-item ::= config:config-item::(config-config-item-attlist string()) ;
table-first-column ::= table:first-column::common-table-template-attlist ;
anim-iterate-attlist ::= common-anim-target-attlist ;
 anim-iterate-attlist ::= (anim:iterate-type::string)? ;
 anim-iterate-attlist ::= (anim:iterate-interval::duration)? ;
style-graphic-fill-properties-attlist ::= (draw:fill::("none" | "solid" | "bitmap" | "gradient" | "hatch"))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-color::color)? ;
 style-graphic-fill-properties-attlist ::= (draw:secondary-fill-color::color)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-gradient-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (draw:gradient-step-count::nonNegativeInteger)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-hatch-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-hatch-solid::boolean)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (style:repeat::("no-repeat" | "repeat" | "stretch"))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-width::(length | percent))? (draw:fill-image-height::(length | percent))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-ref-point-x::percent)? (draw:fill-image-ref-point-y::percent)? (draw:fill-image-ref-point::("top-left" | "top" | "top-right" | "left" | "center" | "right" | "bottom-left" | "bottom" | "bottom-right"))? ;
 style-graphic-fill-properties-attlist ::= (draw:tile-repeat-offset::string())? ;
 style-graphic-fill-properties-attlist ::= (draw:opacity::percent)? ;
 style-graphic-fill-properties-attlist ::= (draw:opacity-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (svg:fill-rule::("nonzero" | "evenodd"))? ;
common-draw-rel-size-attlist ::= common-draw-size-attlist (style:rel-width::(percent | "scale" | "scale-min"))? (style:rel-height::(percent | "scale" | "scale-min"))? ;
table-cut-offs ::= table:cut-offs::((table-movement-cut-off+) | (table-insertion-cut-off table-movement-cut-off*)) ;
dr3d-sphere-attlist ::= (dr3d:center::vector3D)? ;
 dr3d-sphere-attlist ::= (dr3d:size::vector3D)? ;
style-header-footer-properties-content ::= style-header-footer-properties-content-strict ;
 style-header-footer-properties-content ::= style-properties-content ;
draw-fill-image-attlist ::= draw:name::styleName ;
 draw-fill-image-attlist ::= (draw:display-name::string)? ;
 draw-fill-image-attlist ::= (svg:width::length)? (svg:height::length)? ;
common-dur-timing-attlist ::= (smil:dur::string)? ;
chart-mean-value-attlist ::= (chart:style-name::styleNameRef)? ;
style-text-properties-attlist ::= (fo:font-variant::fontVariant)? ;
 style-text-properties-attlist ::= (fo:text-transform::("none" | "lowercase" | "uppercase" | "capitalize"))? ;
 style-text-properties-attlist ::= (fo:color::color)? ;
 style-text-properties-attlist ::= (style:use-window-font-color::boolean)? ;
 style-text-properties-attlist ::= (style:text-outline::boolean)? ;
 style-text-properties-attlist ::= (style:text-line-through-type::lineType)? ;
 style-text-properties-attlist ::= (style:text-line-through-style::lineStyle)? ;
 style-text-properties-attlist ::= (style:text-line-through-width::lineWidth)? ;
 style-text-properties-attlist ::= (style:text-line-through-color::("font-color" | color))? ;
 style-text-properties-attlist ::= (style:text-line-through-text::string)? ;
 style-text-properties-attlist ::= (style:text-line-through-text-style::styleNameRef)? ;
 style-text-properties-attlist ::= (style:text-position::(percent | "super" | "sub" percent?))? ;
 style-text-properties-attlist ::= (style:font-name::string)? (style:font-name-asian::string)? (style:font-name-complex::string)? ;
 style-text-properties-attlist ::= (fo:font-family::string)? (style:font-family-asian::string)? (style:font-family-complex::string)? ;
 style-text-properties-attlist ::= (style:font-family-generic::fontFamilyGeneric)? (style:font-family-generic-asian::fontFamilyGeneric)? (style:font-family-generic-complex::fontFamilyGeneric)? ;
 style-text-properties-attlist ::= (style:font-style-name::string)? (style:font-style-name-asian::string)? (style:font-style-name-complex::string)? ;
 style-text-properties-attlist ::= (style:font-pitch::fontPitch)? (style:font-pitch-asian::fontPitch)? (style:font-pitch-complex::fontPitch)? ;
 style-text-properties-attlist ::= (style:font-charset::textEncoding)? (style:font-charset-asian::textEncoding)? (style:font-charset-complex::textEncoding)? ;
 style-text-properties-attlist ::= (fo:font-size::(positiveLength | percent))? (style:font-size-asian::(positiveLength | percent))? (style:font-size-complex::(positiveLength | percent))? ;
 style-text-properties-attlist ::= (style:font-size-rel::length)? (style:font-size-rel-asian::length)? (style:font-size-rel-complex::length)? ;
 style-text-properties-attlist ::= (style:script-type::("latin" | "asian" | "complex" | "ignore"))? ;
 style-text-properties-attlist ::= (fo:letter-spacing::(length | "normal"))? ;
 style-text-properties-attlist ::= (fo:language::languageCode)? (style:language-asian::languageCode)? (style:language-complex::languageCode)? ;
 style-text-properties-attlist ::= (fo:country::countryCode)? (style:country-asian::countryCode)? (style:country-complex::countryCode)? ;
 style-text-properties-attlist ::= (fo:font-style::fontStyle)? (style:font-style-asian::fontStyle)? (style:font-style-complex::fontStyle)? ;
 style-text-properties-attlist ::= (style:font-relief::("none" | "embossed" | "engraved"))? ;
 style-text-properties-attlist ::= (fo:text-shadow::shadowType)? ;
 style-text-properties-attlist ::= (style:text-underline-type::lineType)? ;
 style-text-properties-attlist ::= (style:text-underline-style::lineStyle)? ;
 style-text-properties-attlist ::= (style:text-underline-width::lineWidth)? ;
 style-text-properties-attlist ::= (style:text-underline-color::("font-color" | color))? ;
 style-text-properties-attlist ::= (fo:font-weight::fontWeight)? (style:font-weight-asian::fontWeight)? (style:font-weight-complex::fontWeight)? ;
 style-text-properties-attlist ::= (style:text-underline-mode::lineMode)? ;
 style-text-properties-attlist ::= (style:text-line-through-mode::lineMode)? ;
 style-text-properties-attlist ::= (style:letter-kerning::boolean)? ;
 style-text-properties-attlist ::= (style:text-blinking::boolean)? ;
 style-text-properties-attlist ::= common-background-color-attlist ;
 style-text-properties-attlist ::= (style:text-combine::("none" | "letters" | "lines"))? ;
 style-text-properties-attlist ::= (style:text-combine-start-char::character)? (style:text-combine-end-char::character)? ;
 style-text-properties-attlist ::= (style:text-emphasize::("none" | ("none" | "accent" | "dot" | "circle" | "disc" "above" | "below")))? ;
 style-text-properties-attlist ::= (style:text-scale::percent)? ;
 style-text-properties-attlist ::= (style:text-rotation-angle::integer)? ;
 style-text-properties-attlist ::= (style:text-rotation-scale::("fixed" | "line-height"))? ;
 style-text-properties-attlist ::= (fo:hyphenate::boolean)? ;
 style-text-properties-attlist ::= (fo:hyphenation-remain-char-count::positiveInteger)? ;
 style-text-properties-attlist ::= (fo:hyphenation-push-char-count::positiveInteger)? ;
 style-text-properties-attlist ::= (text:display::"true") | (text:display::"none") | (text:display::"condition" text:condition::"none") | ε ;
presentation-header-decl-attlist ::= presentation:name::string ;
number-time-style-attlist ::= (number:truncate-on-overflow::boolean)? ;
office-dde-source-attlist ::= (office:name::string)? ;
 office-dde-source-attlist ::= (office:conversion-mode::("into-default-style-data-style" | "into-english-number" | "keep-text"))? ;
text-object-index-source ::= text:object-index-source::(text-object-index-source-attrs text-index-title-template? text-object-index-entry-template?) ;
text-dde-connection-decl-attlist ::= office:name::string ;
text-section-source ::= text:section-source::text-section-source-attr ;
draw-image-map ::= draw:image-map::((draw-area-rectangle | draw-area-circle | draw-area-polygon)*) ;
table-data-pilot-group-member ::= table:data-pilot-group-member::table-data-pilot-group-member-attlist ;
office-meta-data ::= meta:generator::string ;
 office-meta-data ::= dc:title::string ;
 office-meta-data ::= dc:description::string ;
 office-meta-data ::= dc:subject::string ;
 office-meta-data ::= meta:keyword::string ;
 office-meta-data ::= meta:initial-creator::string ;
 office-meta-data ::= dc-creator ;
 office-meta-data ::= meta:printed-by::string ;
 office-meta-data ::= meta:creation-date::dateTime ;
 office-meta-data ::= dc-date ;
 office-meta-data ::= meta:print-date::dateTime ;
 office-meta-data ::= meta:template::(xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? (xlink:title::string)? (meta:date::dateTime)?) ;
 office-meta-data ::= meta:auto-reload::((xlink:type::"simple")? (xlink:show::"replace")? (xlink:actuate::"onLoad")? (xlink:href::anyURI)? (meta:delay::duration)?) ;
 office-meta-data ::= meta:hyperlink-behaviour::((office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))?) ;
 office-meta-data ::= dc:language::language ;
 office-meta-data ::= meta:editing-cycles::nonNegativeInteger ;
 office-meta-data ::= meta:editing-duration::duration ;
 office-meta-data ::= meta:document-statistic::((meta:page-count::nonNegativeInteger)? (meta:table-count::nonNegativeInteger)? (meta:draw-count::nonNegativeInteger)? (meta:image-count::nonNegativeInteger)? (meta:ole-object-count::nonNegativeInteger)? (meta:object-count::nonNegativeInteger)? (meta:paragraph-count::nonNegativeInteger)? (meta:word-count::nonNegativeInteger)? (meta:character-count::nonNegativeInteger)? (frame-count::nonNegativeInteger)? (sentence-count::nonNegativeInteger)? (syllable-count::nonNegativeInteger)? (non-whitespace-character-count::nonNegativeInteger)? (meta:row-count::nonNegativeInteger)? (meta:cell-count::nonNegativeInteger)?) ;
 office-meta-data ::= meta:user-defined::(meta:name::string (meta:value-type::"float" double) | (meta:value-type::"date" dateOrDateTime) | (meta:value-type::"time" duration) | (meta:value-type::"boolean" boolean) | (meta:value-type::"string" string) | string()) ;
office-document-attrs ::= office:mimetype::string ;
draw-enhanced-geometry ::= draw:enhanced-geometry::(draw-enhanced-geometry-attlist draw-equation* draw-handle*) ;
text-bibliography-entry-template ::= text:bibliography-entry-template::(text-bibliography-entry-template-attrs (text-index-entry-span | text-index-entry-tab-stop | text-index-entry-bibliography)*) ;
style-region-right ::= style:region-right::region-content ;
table-data-pilot-field-reference ::= table:data-pilot-field-reference::table-data-pilot-field-reference-attlist ;
text-ref-content ::= (text:reference-format::("page" | "chapter" | "direction" | "text"))? ;
text-chapter-attlist ::= text:display::("name" | "number" | "number-and-name" | "plain-number-and-name" | "plain-number") ;
 text-chapter-attlist ::= text:outline-level::nonNegativeInteger ;
text-page-sequence ::= text:page-sequence::(text-page+) ;
form-checkbox-attlist ::= form-control-attlist common-disabled-attlist label common-printable-attlist common-tab-attlist common-title-attlist common-value-attlist common-data-field-attlist common-form-visual-effect-attlist common-form-relative-image-position-attlist ;
 form-checkbox-attlist ::= (form:current-state::states)? ;
 form-checkbox-attlist ::= (form:is-tristate::boolean)? ;
 form-checkbox-attlist ::= (form:state::states)? ;
draw-layer-set ::= draw:layer-set::(draw-layer*) ;
text-hidden-paragraph-attlist ::= text:condition::formula ;
 text-hidden-paragraph-attlist ::= (text:is-hidden::boolean)? ;
common-draw-points-attlist ::= draw:points::points ;
presentation-sound ::= presentation:sound::(presentation-sound-attlist xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? (xlink:show::("new" | "replace"))?) ;
chart-error-indicator ::= chart:error-indicator::chart-error-indicator-attlist ;
chart-title-attlist ::= (table:cell-range::cellAddress)? ;
 chart-title-attlist ::= common-draw-position-attlist ;
 chart-title-attlist ::= (chart:style-name::styleNameRef)? ;
style-background-image ::= (style:background-image::(style-background-image-attlist common-draw-data-attlist | office-binary-data | ε))? ;
presentation-decls ::= presentation-decl* ;
style-ruby-properties-content ::= style-ruby-properties-content-strict ;
 style-ruby-properties-content ::= style-properties-content ;
dr3d-cube-attlist ::= (dr3d:min-edge::vector3D)? (dr3d:max-edge::vector3D)? ;
form-property-type-and-value-list ::= (office:value-type::"float" (form:list-value::(office:value::double))*) | (office:value-type::"percentage" (form:list-value::(office:value::double))*) | (office:value-type::"currency" (form:list-value::(office:value::double (office:currency::string)?))*) | (office:value-type::"date" (form:list-value::(office:date-value::dateOrDateTime))*) | (office:value-type::"time" (form:list-value::(office:time-value::duration))*) | (office:value-type::"boolean" (form:list-value::(office:boolean-value::boolean))*) | (office:value-type::"string" (form:list-value::(office:string-value::string))*) | (office:value-type::"void") ;
xforms-model ::= xforms:model::anyAttListOrElements ;
table-dde-links ::= table:dde-links::(table-dde-link+) ;
style-drop-cap ::= (style:drop-cap::style-drop-cap-attlist)? ;
horiBackPos ::= "left" | "center" | "right" ;
draw-floating-frame ::= draw:floating-frame::(draw-floating-frame-attlist common-draw-data-attlist) ;
common-writing-mode-attlist ::= (style:writing-mode::("lr-tb" | "rl-tb" | "tb-rl" | "tb-lr" | "lr" | "rl" | "tb" | "page"))? ;
form-text-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist ;
text-illustration-index-source-attrs ::= text-index-scope-attr ;
 text-illustration-index-source-attrs ::= text-relative-tab-stop-position-attr ;
 text-illustration-index-source-attrs ::= (text:use-caption::boolean)? ;
 text-illustration-index-source-attrs ::= (text:caption-sequence-name::string)? ;
 text-illustration-index-source-attrs ::= (text:caption-sequence-format::("text" | "category-and-value" | "caption"))? ;
presentationEffects ::= "none" | "fade" | "move" | "stripes" | "open" | "close" | "dissolve" | "wavyline" | "random" | "lines" | "laser" | "appear" | "hide" | "move-short" | "checkerboard" | "rotate" | "stretch" ;
xforms-bind-attlist ::= (xforms:bind::string)? ;
text-note-ref-content ::= text-note-class ;
draw-opacity ::= draw:opacity::(common-draw-gradient-attlist draw-opacity-attlist) ;
table-linked-source-attlist ::= (xlink:type::"simple")? (xlink:actuate::"onRequest")? xlink:href::anyURI ;
 table-linked-source-attlist ::= (table:filter-name::string)? ;
 table-linked-source-attlist ::= (table:filter-options::string)? ;
 table-linked-source-attlist ::= (table:refresh-delay::duration)? ;
form-column ::= form:column::(form-column-attlist column-controls+) ;
table-data-pilot-groups-attlist ::= table:source-field-name::string ;
 table-data-pilot-groups-attlist ::= (table:date-start::(dateOrDateTime | "auto")) | (table:start::(double | "auto")) ;
 table-data-pilot-groups-attlist ::= (table:date-end::(dateOrDateTime | "auto")) | (table:end::(double | "auto")) ;
 table-data-pilot-groups-attlist ::= table:step::double ;
 table-data-pilot-groups-attlist ::= table:grouped-by::("seconds" | "minutes" | "hours" | "days" | "months" | "quarters" | "years") ;
presentationEffectDirections ::= "none" | "from-left" | "from-top" | "from-right" | "from-bottom" | "from-center" | "from-upper-left" | "from-upper-right" | "from-lower-left" | "from-lower-right" | "to-left" | "to-top" | "to-right" | "to-bottom" | "to-upper-left" | "to-upper-right" | "to-lower-right" | "to-lower-left" | "path" | "spiral-inward-left" | "spiral-inward-right" | "spiral-outward-left" | "spiral-outward-right" | "vertical" | "horizontal" | "to-center" | "clockwise" | "counter-clockwise" ;
text-outline-level-style ::= text:outline-level-style::(text-outline-level-style-attlist style-list-level-properties? style-text-properties?) ;
table-data-pilot-subtotal ::= table:data-pilot-subtotal::table-data-pilot-subtotal-attlist ;
text-note-class ::= text:note-class::("footnote" | "endnote") ;
text-list-style-attr ::= style:name::styleName ;
 text-list-style-attr ::= (style:display-name::string)? ;
 text-list-style-attr ::= (text:consecutive-numbering::boolean)? ;
common-presentation-header-footer-attlist ::= (presentation:use-header-name::string)? ;
 common-presentation-header-footer-attlist ::= (presentation:use-footer-name::string)? ;
 common-presentation-header-footer-attlist ::= (presentation:use-date-time-name::string)? ;
style-table-column-properties-content-strict ::= style-table-column-properties-attlist style-table-column-properties-elements ;
style-ruby-properties-elements ::= ε ;
shadowType ::= "none" | string ;
text-index-source-styles ::= text:index-source-styles::(text:outline-level::positiveInteger text-index-source-style*) ;
text-section-attr ::= sectionAttr ;
 text-section-attr ::= (text:display::("true" | "none")) | (text:display::"condition" text:condition::string) | ε ;
table-rows ::= table-table-rows | ((text-soft-page-break? table-table-row)+) ;
number-day-of-week ::= number:day-of-week::(number-day-of-week-attlist common-calendar-attlist) ;
draw-opacity-attlist ::= (draw:start::percent)? (draw:end::percent)? ;
style-section-properties-content-strict ::= style-section-properties-attlist style-section-properties-elements ;
presentation-classes ::= "title" | "outline" | "subtitle" | "text" | "graphic" | "object" | "chart" | "table" | "orgchart" | "page" | "notes" | "handout" | "header" | "footer" | "date-time" | "page-number" ;
common-anim-named-target-attlist ::= smil:attributeName::string ;
target-location ::= (xlink:href::anyURI)? ;
office-image-content-main ::= draw-frame ;
current-selected ::= (form:current-selected::boolean)? ;
form-item-attlist ::= label ;
style-table-row-properties-content-strict ::= style-table-row-properties-attlist style-table-row-properties-elements ;
text-decls ::= (text:variable-decls::(text-variable-decl*))? (text:sequence-decls::(text-sequence-decl*))? (text:user-field-decls::(text-user-field-decl*))? (text:dde-connection-decls::(text-dde-connection-decl*))? text-alphabetical-index-auto-mark-file? ;
office-binary-data ::= office:binary-data::base64Binary ;
table-movement-cut-off ::= table:movement-cut-off::table-movement-cut-off-attlist ;
form-number-attlist ::= (form:value::double)? ;
 form-number-attlist ::= (form:current-value::double)? ;
 form-number-attlist ::= (form:min-value::double)? ;
 form-number-attlist ::= (form:max-value::double)? ;
draw-glue-points-attlist ::= draw:escape-direction::("auto" | "left" | "right" | "up" | "down" | "horizontal" | "vertical") ;
text-list-style ::= text:list-style::(text-list-style-attr text-list-style-content*) ;
text-illustration-index-entry-template-attrs ::= text:style-name::styleNameRef ;
common-dde-connection-decl-attlist ::= office:dde-application::string ;
 common-dde-connection-decl-attlist ::= office:dde-topic::string ;
 common-dde-connection-decl-attlist ::= office:dde-item::string ;
 common-dde-connection-decl-attlist ::= (office:automatic-update::boolean)? ;
text-time-attlist ::= common-field-fixed-attlist common-field-data-style-name-attlist ;
 text-time-attlist ::= (text:time-value::timeOrDateTime)? ;
 text-time-attlist ::= (text:time-adjust::duration)? ;
common-timing-attlist ::= common-basic-timing-attlist common-restart-timing-attlist common-restart-default-attlist common-fill-timing-attlist common-fill-default-attlist common-time-manip-attlist ;
common-number-attlist ::= (number:min-integer-digits::integer)? ;
 common-number-attlist ::= (number:grouping::boolean)? ;
table-functions ::= table-named-expressions? table-database-ranges? table-data-pilot-tables? table-consolidation? table-dde-links? ;
presentation-footer-decl-attlist ::= presentation:name::string ;
style-table-column-properties-content ::= style-table-column-properties-content-strict ;
 style-table-column-properties-content ::= style-properties-content ;
svg-desc ::= svg:desc::string() ;
form-combobox-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist dropdown common-maxlength-attlist common-printable-attlist common-readonly-attlist size common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist list-source list-source-type ;
 form-combobox-attlist ::= (form:auto-complete::boolean)? ;
common-page-number-attlist ::= (style:page-number::(positiveInteger | "auto"))? ;
text-database-next-attlist ::= common-field-database-table ;
 text-database-next-attlist ::= (text:condition::formula)? ;
office-presentation-content-prelude ::= text-decls table-decls presentation-decls ;
common-vertical-rel-attlist ::= (style:vertical-rel::("page" | "page-content" | "frame" | "frame-content" | "paragraph" | "paragraph-content" | "char" | "line" | "baseline" | "text"))? ;
draw-ellipse ::= draw:ellipse::(common-draw-circle-ellipse-attlist draw-ellipse-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
common-draw-id-attlist ::= (draw:id::ID)? ;
table-data-pilot-member ::= table:data-pilot-member::table-data-pilot-member-attlist ;
number-currency-symbol ::= number:currency-symbol::(number-currency-symbol-attlist string()) ;
form-generic-control-attlist ::= form-control-attlist ;
style-text-properties-elements ::= ε ;
common-field-display-value-formula-none-attlist ::= (text:display::("value" | "formula" | "none"))? ;
common-repeat-timing-attlist ::= (smil:repeatDur::string)? (smil:repeatCount::(nonNegativeInteger | "indefinite"))? ;
office-presentation-content-epilogue ::= presentation-settings table-functions ;
valueType ::= "float" | "time" | "date" | "percentage" | "currency" | "boolean" | "string" ;
form-value-range-attlist ::= form-control-attlist common-disabled-attlist common-printable-attlist common-tab-attlist common-title-attlist common-value-attlist ;
 form-value-range-attlist ::= (form:max-value::string)? ;
 form-value-range-attlist ::= (form:min-value::string)? ;
 form-value-range-attlist ::= (form:step-size::positiveInteger)? ;
 form-value-range-attlist ::= (form:page-step-size::positiveInteger)? ;
 form-value-range-attlist ::= (form:delay-for-repeat::duration)? ;
 form-value-range-attlist ::= (form:orientation::("horizontal" | "vertical"))? ;
number-boolean-style ::= number:boolean-style::(common-data-style-attlist style-text-properties? number-text? (number-boolean number-text?)? style-map*) ;
table-error-macro ::= table:error-macro::((table:execute::boolean)?) ;
config-config-item-set ::= config:config-item-set::(config-config-item-set-attlist config-items) ;
presentation-dim-attlist ::= draw:shape-id::IDREF ;
 presentation-dim-attlist ::= draw:color::color ;
text-bibliography-source ::= text:bibliography-source::(text-index-title-template? text-bibliography-entry-template*) ;
text-sort-key-attlist ::= text:key::("address" | "annote" | "author" | "bibliography-type" | "booktitle" | "chapter" | "custom1" | "custom2" | "custom3" | "custom4" | "custom5" | "edition" | "editor" | "howpublished" | "identifier" | "institution" | "isbn" | "issn" | "journal" | "month" | "note" | "number" | "organizations" | "pages" | "publisher" | "report-type" | "school" | "series" | "title" | "url" | "volume" | "year") (text:sort-ascending::boolean)? ;
style-list-level-properties-attlist ::= common-text-align ;
 style-list-level-properties-attlist ::= (text:space-before::nonNegativeLength)? ;
 style-list-level-properties-attlist ::= (text:min-label-width::nonNegativeLength)? ;
 style-list-level-properties-attlist ::= (text:min-label-distance::nonNegativeLength)? ;
 style-list-level-properties-attlist ::= (style:font-name::string)? ;
 style-list-level-properties-attlist ::= (fo:width::positiveLength)? (fo:height::positiveLength)? ;
 style-list-level-properties-attlist ::= common-vertical-rel-attlist common-vertical-pos-attlist ;
number-year ::= number:year::(number-year-attlist common-calendar-attlist) ;
table-body ::= table:body::common-table-template-attlist ;
text-date-attlist ::= common-field-fixed-attlist common-field-data-style-name-attlist ;
 text-date-attlist ::= (text:date-value::dateOrDateTime)? ;
 text-date-attlist ::= (text:date-adjust::duration)? ;
text-index-entry-span ::= text:index-entry-span::((text:style-name::styleNameRef)? string()) ;
text-user-field-decl ::= text:user-field-decl::(common-field-name-attlist common-field-formula-attlist? common-value-and-type-attlist) ;
table-sort ::= table:sort::(table-sort-attlist table-sort-by+) ;
styleNameRefs ::= string()* ;
dc-date ::= dc:date::dateTime ;
text-database-row-select-attlist ::= common-field-database-table ;
 text-database-row-select-attlist ::= (text:condition::formula)? ;
 text-database-row-select-attlist ::= (text:row-number::nonNegativeInteger)? ;
cellAddress ::= string() ;
fontPitch ::= "fixed" | "variable" ;
chart-axis ::= chart:axis::(chart-axis-attlist chart-title? chart-categories? chart-grid*) ;
table-database-source-sql ::= table:database-source-sql::table-database-source-sql-attlist ;
draw-custom-shape ::= draw:custom-shape::(draw-custom-shape-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text draw-enhanced-geometry?) ;
form-form ::= form:form::(common-form-control-attlist form-form-attlist form-properties? office-event-listeners? (controls | form-form)* form-connection-resource?) ;
style-table-row-properties-content ::= style-table-row-properties-content-strict ;
 style-table-row-properties-content ::= style-properties-content ;
common-table-cell-range-address-attlist ::= table:start-column::integer table:start-row::integer table:start-table::integer table:end-column::integer table:end-row::integer table:end-table::integer ;
list-source ::= (form:list-source::string)? ;
common-draw-gradient-attlist ::= (draw:name::styleName)? ;
 common-draw-gradient-attlist ::= (draw:display-name::string)? ;
 common-draw-gradient-attlist ::= draw:style::gradient-style ;
 common-draw-gradient-attlist ::= (draw:cx::percent)? (draw:cy::percent)? ;
 common-draw-gradient-attlist ::= (draw:angle::integer)? ;
 common-draw-gradient-attlist ::= (draw:border::percent)? ;
draw-polyline ::= draw:polyline::(common-draw-points-attlist common-draw-position-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
text-numbered-paragraph ::= text:numbered-paragraph::(text-numbered-paragraph-attr text-number? text-p | text-h) ;
text-list-level-style-bullet-attr ::= (text:style-name::styleNameRef)? ;
 text-list-level-style-bullet-attr ::= text:bullet-char::character ;
 text-list-level-style-bullet-attr ::= common-num-format-prefix-suffix-attlist ;
 text-list-level-style-bullet-attr ::= (text:bullet-relative-size::percent)? ;
number-quarter ::= number:quarter::(number-quarter-attlist common-calendar-attlist) ;
config-config-item-map-entry ::= config:config-item-map-entry::(config-config-item-map-entry-attlist config-items) ;
anim-transition-filter-attlist ::= smil:type::string ;
 anim-transition-filter-attlist ::= (smil:subtype::string)? ;
 anim-transition-filter-attlist ::= (smil:direction::("forward" | "reverse"))? ;
 anim-transition-filter-attlist ::= (smil:fadeColor::("forward" | "reverse"))? ;
 anim-transition-filter-attlist ::= (smil:mode::("in" | "out"))? ;
text-alphabetical-index-entry-template ::= text:alphabetical-index-entry-template::(text-alphabetical-index-entry-template-attrs (text-index-entry-chapter | text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop)*) ;
common-table-change-attlist ::= table:id::string ;
 common-table-change-attlist ::= (table:acceptance-state::("accepted" | "rejected" | "pending"))? ;
 common-table-change-attlist ::= (table:rejecting-change-id::string)? ;
common-field-formula-attlist ::= (text:formula::formula)? ;
office-meta-content ::= office-meta-content-strict ;
 office-meta-content ::= anyElements ;
style-table-cell-properties-elements ::= style-background-image ;
table-data-pilot-field ::= table:data-pilot-field::(table-data-pilot-field-attlist table-data-pilot-level? table-data-pilot-field-reference? table-data-pilot-groups?) ;
draw-glue-point ::= draw:glue-point::draw-glue-point-attlist ;
chart-chart-attlist ::= chart:class::namespacedToken ;
 chart-chart-attlist ::= common-draw-size-attlist ;
 chart-chart-attlist ::= (chart:column-mapping::string)? ;
 chart-chart-attlist ::= (chart:row-mapping::string)? ;
 chart-chart-attlist ::= (chart:style-name::styleNameRef)? ;
text-set-page-variable-attlist ::= (text:active::boolean)? ;
 text-set-page-variable-attlist ::= (text:page-adjust::integer)? ;
draw-custom-shape-attlist ::= (draw:engine::namespacedToken)? ;
 draw-custom-shape-attlist ::= (draw:data::string)? ;
table-highlighted-range-attlist-invalid ::= table:marked-invalid::boolean ;
table-data-pilot-tables ::= table:data-pilot-tables::(table-data-pilot-table*) ;
table-table-row ::= table:table-row::(table-table-row-attlist (table-table-cell | table-covered-table-cell)+) ;
table-operation-attlist ::= table:name::("trace-dependents" | "remove-dependents" | "trace-precedents" | "remove-precedents" | "trace-errors") ;
 table-operation-attlist ::= table:index::nonNegativeInteger ;
draw-text ::= (text-p | text-list)* ;
table-detective ::= table:detective::(table-highlighted-range* table-operation*) ;
text-get-page-variable-attlist ::= common-field-num-format-attlist ;
office-settings ::= (office:settings::(config-config-item-set+))? ;
table-tracked-changes-attlist ::= (table:track-changes::boolean)? ;
text-table-of-content-entry-template-attlist ::= text:outline-level::positiveInteger ;
 text-table-of-content-entry-template-attlist ::= text:style-name::styleNameRef ;
common-num-format-prefix-suffix-attlist ::= (style:num-prefix::string)? (style:num-suffix::string)? ;
common-disabled-attlist ::= (form:disabled::boolean)? ;
style-table-cell-properties-content ::= style-table-cell-properties-content-strict ;
 style-table-cell-properties-content ::= style-properties-content ;
common-svg-gradient-attlist ::= (svg:gradientUnits::"objectBoundingBox")? (svg:gradientTransform::string)? (svg:spreadMethod::("pad" | "reflect" | "repeat"))? ;
 common-svg-gradient-attlist ::= draw:name::styleName ;
 common-svg-gradient-attlist ::= (draw:display-name::string)? ;
draw-a-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? ;
 draw-a-attlist ::= (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? ;
 draw-a-attlist ::= (office:name::string)? ;
 draw-a-attlist ::= (office:title::string)? ;
 draw-a-attlist ::= (office:server-map::boolean)? ;
style-default-style ::= style:default-style::style-style-content ;
table-named-expressions ::= table:named-expressions::((table-named-range | table-named-expression)*) ;
office-spreadsheet-content-prelude ::= table-tracked-changes? text-decls table-decls ;
number-fraction ::= number:fraction::(number-fraction-attlist common-number-attlist) ;
common-draw-area-attlist ::= (xlink:href::anyURI)? (xlink:type::"simple")? (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? ;
 common-draw-area-attlist ::= (office:name::string)? ;
 common-draw-area-attlist ::= (draw:nohref::"nohref")? ;
common-draw-name-attlist ::= (draw:name::string)? ;
text-bibliography ::= text:bibliography::(sectionAttr text-bibliography-source text-index-body) ;
table-dde-link ::= table:dde-link::(office-dde-source table-table) ;
point3D ::= string() ;
table-table-attlist ::= (table:name::string)? ;
 table-table-attlist ::= (table:style-name::styleNameRef)? ;
 table-table-attlist ::= (table:protected::boolean)? (table:protection-key::string())? ;
 table-table-attlist ::= (table:print::boolean)? ;
 table-table-attlist ::= (table:print-ranges::cellRangeAddressList)? ;
 table-table-attlist ::= (table:is-sub-table::boolean)? ;
--------------------odf::opendoc-1.1.bgf--------------------
style-font-face ::= style:font-face::(style-font-face-attlist svg-font-face-src? svg-definition-src?) ;
svg-linearGradient ::= svg:linearGradient::(common-svg-gradient-attlist (svg:x1::(coordinate | percent))? (svg:y1::(coordinate | percent))? (svg:x2::(coordinate | percent))? (svg:y2::(coordinate | percent))? svg-stop*) ;
style-page-layout-attlist ::= style:name::styleName ;
 style-page-layout-attlist ::= (style:page-usage::("all" | "left" | "right" | "mirrored"))? ;
number-seconds ::= number:seconds::number-seconds-attlist ;
number-currency-style ::= number:currency-style::(common-data-style-attlist common-auto-reorder-attlist style-text-properties? number-text? ((number-and-text currency-symbol-and-text?) | (currency-symbol-and-text number-and-text?))? style-map*) ;
number-fraction-attlist ::= (number:min-numerator-digits::integer)? ;
 number-fraction-attlist ::= (number:min-denominator-digits::integer)? ;
 number-fraction-attlist ::= (number:denominator-value::integer)? ;
table-covered-table-cell ::= table:covered-table-cell::(table-table-cell-attlist table-table-cell-content) ;
text-notes-configuration-content ::= text-note-class ;
 text-notes-configuration-content ::= (text:citation-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:citation-body-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:default-style-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:master-page-name::styleNameRef)? ;
 text-notes-configuration-content ::= (text:start-value::nonNegativeInteger)? ;
 text-notes-configuration-content ::= common-num-format-prefix-suffix-attlist common-num-format-attlist? ;
 text-notes-configuration-content ::= (text:start-numbering-at::("document" | "chapter" | "page"))? ;
 text-notes-configuration-content ::= (text:footnotes-position::("text" | "page" | "section" | "document"))? ;
 text-notes-configuration-content ::= (text:note-continuation-notice-forward::string())? ;
 text-notes-configuration-content ::= (text:note-continuation-notice-backward::string())? ;
draw-applet-attlist ::= (draw:code::string())? ;
 draw-applet-attlist ::= (draw:object::string())? ;
 draw-applet-attlist ::= (draw:archive::string())? ;
 draw-applet-attlist ::= (draw:may-script::boolean)? ;
text-list-item-content ::= text-number? (text-p | text-h | text-list | text-soft-page-break)* ;
style-header-footer-properties-content-strict ::= style-header-footer-properties-attlist style-header-footer-properties-elements ;
number-scientific-number ::= number:scientific-number::(number-scientific-number-attlist common-decimal-places-attlist common-number-attlist) ;
presentation-hide-shape ::= presentation:hide-shape::(common-presentation-effect-attlist presentation-sound?) ;
text-number ::= text:number::string ;
common-title-attlist ::= (form:title::string())? ;
draw-object ::= draw:object::(draw-object-attlist common-draw-data-attlist | office-document | math-math) ;
table-data-pilot-table-attlist ::= table:name::string ;
 table-data-pilot-table-attlist ::= (table:application-data::string)? ;
 table-data-pilot-table-attlist ::= (table:grand-total::("none" | "row" | "column" | "both"))? ;
 table-data-pilot-table-attlist ::= (table:ignore-empty-rows::boolean)? ;
 table-data-pilot-table-attlist ::= (table:identify-categories::boolean)? ;
 table-data-pilot-table-attlist ::= table:target-range-address::cellRangeAddress ;
 table-data-pilot-table-attlist ::= (table:buttons::cellRangeAddressList)? ;
 table-data-pilot-table-attlist ::= (table:show-filter-button::boolean)? ;
 table-data-pilot-table-attlist ::= (table:drill-down-on-double-click::boolean)? ;
table-sort-by ::= table:sort-by::table-sort-by-attlist ;
presentation-hide-text ::= presentation:hide-text::(common-presentation-effect-attlist presentation-sound?) ;
style-drawing-page-properties-content-strict ::= style-graphic-fill-properties-attlist style-drawing-page-properties-attlist style-drawing-page-properties-elements ;
anyURI ::= string() ;
style-ruby-properties-content-strict ::= style-ruby-properties-attlist style-ruby-properties-elements ;
style-tab-stop-char-attlist ::= style:char::character ;
table-deletion-attlist ::= table:type::("row" | "column" | "table") ;
 table-deletion-attlist ::= table:position::integer ;
 table-deletion-attlist ::= (table:table::integer)? ;
 table-deletion-attlist ::= (table:multi-deletion-spanned::integer)? ;
number-text-content ::= number:text-content::ε ;
styleName ::= string() ;
draw-plugin ::= draw:plugin::(draw-plugin-attlist common-draw-data-attlist draw-param*) ;
table-database-source-query-attlist ::= table:database-name::string ;
 table-database-source-query-attlist ::= table:query-name::string ;
office-drawing-content-prelude ::= text-decls table-decls ;
text-content ::= text-h | text-p | text-list | text-numbered-paragraph | table-table | draw-a | text-section | text-soft-page-break | text-table-of-content | text-illustration-index | text-table-index | text-object-index | text-user-index | text-alphabetical-index | text-bibliography | shape | change-marks ;
draw-area-rectangle ::= draw:area-rectangle::(common-draw-area-attlist svg:x::coordinate svg:y::coordinate svg:width::length svg:height::length svg-title? svg-desc? office-event-listeners?) ;
table-table-rows ::= table:table-rows::((text-soft-page-break? table-table-row)+) ;
style-tab-stop ::= style:tab-stop::style-tab-stop-attlist ;
number-date-style ::= number:date-style::(common-data-style-attlist common-auto-reorder-attlist common-format-source-attlist style-text-properties? number-text? (any-date number-text?)+ style-map*) ;
draw-marker-attlist ::= draw:name::styleName ;
 draw-marker-attlist ::= (draw:display-name::string)? ;
chart-grid ::= chart:grid::chart-grid-attlist ;
table-table-cell-attlist-extra ::= (table:number-columns-spanned::positiveInteger)? (table:number-rows-spanned::positiveInteger)? ;
 table-table-cell-attlist-extra ::= (table:number-matrix-columns-spanned::positiveInteger)? (table:number-matrix-rows-spanned::positiveInteger)? ;
common-text-spreadsheet-shape-attlist ::= (table:end-cell-address::cellAddress)? (table:end-x::coordinate)? (table:end-y::coordinate)? ;
 common-text-spreadsheet-shape-attlist ::= (table:table-background::boolean)? ;
 common-text-spreadsheet-shape-attlist ::= common-text-anchor-attlist ;
common-draw-text-style-name-attlist ::= (draw:text-style-name::styleNameRef)? ;
table-shapes ::= table:shapes::(shape+) ;
style-graphic-properties-elements ::= ε ;
 style-graphic-properties-elements ::= text-list-style? ;
 style-graphic-properties-elements ::= style-background-image ;
 style-graphic-properties-elements ::= style-columns ;
text-p ::= text:p::(paragraph-attrs paragraph-content*) ;
common-style-header-footer-attlist ::= (style:display::boolean)? ;
draw-line-attlist ::= svg:x1::coordinate svg:y1::coordinate ;
 draw-line-attlist ::= svg:x2::coordinate svg:y2::coordinate ;
table-movement ::= table:movement::(common-table-change-attlist table-source-range-address table-target-range-address office-change-info table-dependencies? table-deletions?) ;
script-event-listener ::= script:event-listener::script-event-listener-attlist ;
style-tab-stop-attlist ::= style:position::nonNegativeLength ;
 style-tab-stop-attlist ::= ((style:type::("left" | "center" | "right"))?) | (style:type::"char" style-tab-stop-char-attlist) ;
 style-tab-stop-attlist ::= (style:leader-type::lineType)? ;
 style-tab-stop-attlist ::= (style:leader-style::lineStyle)? ;
 style-tab-stop-attlist ::= (style:leader-width::lineWidth)? ;
 style-tab-stop-attlist ::= (style:leader-color::("font-color" | color))? ;
 style-tab-stop-attlist ::= (style:leader-text::string)? ;
 style-tab-stop-attlist ::= (style:leader-text-style::styleNameRef)? ;
text-h ::= text:h::(heading-attrs paragraph-attrs text-number? paragraph-content*) ;
text-outline-style ::= text:outline-style::(text-outline-level-style+) ;
draw-control-attlist ::= draw:control::IDREF ;
table-table-column-attlist ::= (table:number-columns-repeated::positiveInteger)? ;
 table-table-column-attlist ::= (table:style-name::styleNameRef)? ;
 table-table-column-attlist ::= (table:visibility::table-visibility-value)? ;
 table-table-column-attlist ::= (table:default-cell-style-name::styleNameRef)? ;
text-placeholder-attlist ::= text:placeholder-type::("text" | "table" | "text-box" | "image" | "object") ;
 text-placeholder-attlist ::= common-field-description-attlist ;
office-document-settings ::= office:document-settings::(office-document-common-attrs office-settings) ;
style-table-row-properties-elements ::= style-background-image ;
draw-handle-attlist ::= (draw:handle-mirror-vertical::boolean)? ;
 draw-handle-attlist ::= (draw:handle-mirror-horizontal::boolean)? ;
 draw-handle-attlist ::= (draw:handle-switched::boolean)? ;
 draw-handle-attlist ::= draw:handle-position::string ;
 draw-handle-attlist ::= (draw:handle-range-x-minimum::string)? ;
 draw-handle-attlist ::= (draw:handle-range-x-maximum::string)? ;
 draw-handle-attlist ::= (draw:handle-range-y-minimum::string)? ;
 draw-handle-attlist ::= (draw:handle-range-y-maximum::string)? ;
 draw-handle-attlist ::= (draw:handle-polar::string)? ;
 draw-handle-attlist ::= (draw:handle-radius-range-minimum::string)? ;
 draw-handle-attlist ::= (draw:handle-radius-range-maximum::string)? ;
presentation-show-attlist ::= presentation:name::string ;
 presentation-show-attlist ::= presentation:pages::string() ;
style-columns ::= (style:columns::(style-columns-attlist style-column-sep? style-column*))? ;
table-subtotal-rules-attlist ::= (table:bind-styles-to-content::boolean)? ;
 table-subtotal-rules-attlist ::= (table:case-sensitive::boolean)? ;
 table-subtotal-rules-attlist ::= (table:page-breaks-on-group-change::boolean)? ;
table-calculation-setting-attlist ::= (table:case-sensitive::boolean)? ;
 table-calculation-setting-attlist ::= (table:precision-as-shown::boolean)? ;
 table-calculation-setting-attlist ::= (table:search-criteria-must-apply-to-whole-cell::boolean)? ;
 table-calculation-setting-attlist ::= (table:automatic-find-labels::boolean)? ;
 table-calculation-setting-attlist ::= (table:use-regular-expressions::boolean)? ;
 table-calculation-setting-attlist ::= (table:null-year::positiveInteger)? ;
text-section-source-dde ::= office-dde-source ;
number-am-pm ::= number:am-pm::ε ;
lineMode ::= "continuous" | "skip-white-space" ;
style-list-level-properties-elements ::= ε ;
number-time-style ::= number:time-style::(number-time-style-attlist common-data-style-attlist common-format-source-attlist style-text-properties? number-text? (any-time number-text?)+ style-map*) ;
text-dde-connection-decl ::= text:dde-connection-decl::(text-dde-connection-decl-attlist common-dde-connection-decl-attlist) ;
style-table-column-properties ::= style:table-column-properties::style-table-column-properties-content ;
anyAttListOrElements ::= string()* anyElements ;
chart-stock-range-line ::= chart:stock-range-line::common-stock-marker-attlist ;
chart-title ::= chart:title::(chart-title-attlist text-p?) ;
nonNegativeLength ::= string() ;
index-content-main ::= text-content | text-index-title ;
fontWeight ::= "normal" | "bold" | "100" | "200" | "300" | "400" | "500" | "600" | "700" | "800" | "900" ;
common-tab-attlist ::= (form:tab-index::nonNegativeInteger)? ;
 common-tab-attlist ::= (form:tab-stop::boolean)? ;
common-anim-attlist ::= (presentation:node-type::("default" | "on-click" | "with-previous" | "after-previous" | "timing-root" | "main-sequence" | "interactive-sequence"))? ;
 common-anim-attlist ::= (presentation:preset-id::string)? ;
 common-anim-attlist ::= (presentation:preset-sub-type::string)? ;
 common-anim-attlist ::= (presentation:preset-class::("custom" | "entrance" | "exit" | "emphasis" | "motion-path" | "ole-action" | "media-call"))? ;
 common-anim-attlist ::= (presentation:master-element::IDREF)? ;
 common-anim-attlist ::= (presentation:group-id::string)? ;
 common-anim-attlist ::= (anim:id::ID)? ;
config-config-item-attlist ::= config:name::string ;
 config-config-item-attlist ::= config:type::("boolean" | "short" | "int" | "long" | "double" | "string" | "datetime" | "base64Binary") ;
draw-frame ::= draw:frame::(common-draw-shape-with-text-and-styles-attlist common-draw-position-attlist common-draw-rel-size-attlist common-draw-caption-id-attlist presentation-shape-attlist draw-frame-attlist (draw-text-box | draw-image | draw-object | draw-object-ole | draw-applet | draw-floating-frame | draw-plugin)* office-event-listeners? draw-glue-point* draw-image-map? svg-title? svg-desc? (draw-contour-polygon | draw-contour-path)?) ;
common-form-control-content ::= form-properties? office-event-listeners? ;
table-iteration ::= table:iteration::((table:status::("enable" | "disable"))? (table:steps::positiveInteger)? (table:maximum-difference::double)?) ;
dateTime ::= string() ;
common-draw-caption-id-attlist ::= (draw:caption-id::IDREF)? ;
text-user-index-source ::= text:user-index-source::(text-user-index-source-attr text-index-title-template? text-user-index-entry-template* text-index-source-styles*) ;
text-index-entry-chapter ::= text:index-entry-chapter::((text:style-name::styleNameRef)? text-index-entry-chapter-attrs) ;
table-data-pilot-subtotals ::= table:data-pilot-subtotals::(table-data-pilot-subtotal*) ;
style-page-layout-properties ::= style:page-layout-properties::style-page-layout-properties-content ;
form-connection-resource ::= form:connection-resource::(xlink:href::anyURI) ;
draw-text-box ::= draw:text-box::(draw-text-box-attlist text-content*) ;
draw-image ::= draw:image::(draw-image-attlist common-draw-data-attlist | office-binary-data draw-text) ;
table-data-pilot-field-reference-attlist ::= table:field-name::string ;
 table-data-pilot-field-reference-attlist ::= (table:member-type::"named" table:member-name::string) | (table:member-type::("previous" | "next")) ;
 table-data-pilot-field-reference-attlist ::= table:type::("none" | "member-difference" | "member-percentage" | "member-percentage-difference" | "running-total" | "row-percentage" | "column-percentage" | "total-percentage" | "index") ;
common-break-attlist ::= (fo:break-before::("auto" | "column" | "page"))? (fo:break-after::("auto" | "column" | "page"))? ;
common-table-range-attlist ::= common-table-cell-address-attlist | common-table-cell-range-address-attlist ;
chart-error-indicator-attlist ::= (chart:style-name::styleNameRef)? ;
table-data-pilot-groups ::= table:data-pilot-groups::(table-data-pilot-groups-attlist table-data-pilot-group+) ;
number-hours ::= number:hours::number-hours-attlist ;
table-table-source-attlist ::= (table:mode::("copy-all" | "copy-results-only"))? ;
 table-table-source-attlist ::= (table:table-name::string)? ;
draw-layer ::= draw:layer::(draw-layer-attlist svg-title? svg-desc?) ;
common-text-align ::= (fo:text-align::("start" | "end" | "left" | "right" | "center" | "justify"))? ;
style-style-attlist ::= style:name::styleName ;
 style-style-attlist ::= (style:display-name::string)? ;
 style-style-attlist ::= (style:parent-style-name::styleNameRef)? ;
 style-style-attlist ::= (style:next-style-name::styleNameRef)? ;
 style-style-attlist ::= (style:list-style-name::(styleName | ε))? ;
 style-style-attlist ::= (style:master-page-name::styleNameRef)? ;
 style-style-attlist ::= (style:auto-update::boolean)? ;
 style-style-attlist ::= (style:data-style-name::styleNameRef)? ;
 style-style-attlist ::= (style:class::string)? ;
 style-style-attlist ::= (style:default-outline-level::positiveInteger)? ;
draw-image-attlist ::= (draw:filter-name::string)? ;
paragraph-attrs ::= (text:style-name::styleNameRef)? (text:class-names::styleNameRefs)? (text:cond-style-name::styleNameRef)? ;
 paragraph-attrs ::= text-id? ;
table-columns-no-group ::= (table-columns (table-table-header-columns table-columns?)?) | (table-table-header-columns table-columns?) ;
form-fixed-text-attlist ::= form-control-attlist for common-disabled-attlist label common-printable-attlist common-title-attlist ;
 form-fixed-text-attlist ::= (form:multi-line::boolean)? ;
draw-floating-frame-attlist ::= (draw:frame-name::string)? ;
style-drawing-page-properties-elements ::= presentation-sound? ;
presentation-decl ::= presentation:header-decl::(presentation-header-decl-attlist string()) ;
 presentation-decl ::= presentation:footer-decl::(presentation-footer-decl-attlist string()) ;
 presentation-decl ::= presentation:date-time-decl::(presentation-date-time-decl-attlist string()) ;
style-properties-content ::= anyAttListOrElements ;
common-draw-size-attlist ::= (svg:width::length)? (svg:height::length)? ;
text-changed-region-content ::= text:insertion::office-change-info ;
 text-changed-region-content ::= text:deletion::(office-change-info text-content*) ;
 text-changed-region-content ::= text:format-change::office-change-info ;
table-table-template ::= table:table-template::(table-table-template-attlist table-first-row? table-last-row? table-first-column? table-last-column? table-body | (table-even-rows table-odd-rows) | (table-even-columns table-odd-columns)) ;
dr3d-extrude ::= dr3d:extrude::(common-draw-path-data-attlist common-draw-viewbox-attlist common-draw-id-attlist common-draw-z-index-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-dr3d-transform-attlist) ;
form-password-attlist ::= form-control-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist ;
 form-password-attlist ::= (form:echo-char::character)? ;
common-style-direction-attlist ::= (style:direction::("ltr" | "ttb"))? ;
draw-regular-polygon-attlist ::= (draw:concave::"false") | (draw:concave::"true" draw-regular-polygon-sharpness-attlist) ;
 draw-regular-polygon-attlist ::= draw:corners::positiveInteger ;
form-column-attlist ::= common-form-control-attlist label text-style-name ;
text-sequence-ref-name ::= (text:ref-name::string)? ;
table-insertion ::= table:insertion::(table-insertion-attlist common-table-change-attlist office-change-info table-dependencies? table-deletions?) ;
table-label-ranges ::= table:label-ranges::(table-label-range*) ;
table-even-rows ::= table:even-rows::common-table-template-attlist ;
chart-categories ::= chart:categories::((table:cell-range-address::cellRangeAddress)?) ;
draw-page-attlist ::= (draw:name::string)? ;
 draw-page-attlist ::= (draw:style-name::styleNameRef)? ;
 draw-page-attlist ::= draw:master-page-name::styleNameRef ;
 draw-page-attlist ::= (presentation:presentation-page-layout-name::styleNameRef)? ;
 draw-page-attlist ::= (draw:id::ID)? ;
 draw-page-attlist ::= (draw:nav-order::IDREFS)? ;
table-database-ranges ::= table:database-ranges::(table-database-range*) ;
style-drawing-page-properties ::= style:drawing-page-properties::style-drawing-page-properties-content ;
config-config-item-map-indexed ::= config:config-item-map-indexed::(config-config-item-map-indexed-attlist config-config-item-map-entry+) ;
style-table-cell-properties ::= style:table-cell-properties::style-table-cell-properties-content ;
style-section-properties-content ::= style-properties-content ;
table-table-cell ::= table:table-cell::(table-table-cell-attlist table-table-cell-attlist-extra table-table-cell-content) ;
table-consolidation-attlist ::= table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string) ;
 table-consolidation-attlist ::= table:source-cell-range-addresses::cellRangeAddressList ;
 table-consolidation-attlist ::= table:target-cell-address::cellAddress ;
 table-consolidation-attlist ::= (table:use-labels::("none" | "row" | "column" | "both"))? ;
 table-consolidation-attlist ::= (table:link-to-source-data::boolean)? ;
style-tab-stops ::= (style:tab-stops::(style-tab-stop*))? ;
style-data-style-attlist ::= (style:display-name::string)? ;
dr3d-light-attlist ::= (dr3d:diffuse-color::color)? ;
 dr3d-light-attlist ::= dr3d:direction::vector3D ;
 dr3d-light-attlist ::= (dr3d:enabled::boolean)? ;
 dr3d-light-attlist ::= (dr3d:specular::boolean)? ;
office-chart-content-prelude ::= text-decls table-decls ;
style-drawing-page-properties-attlist ::= (presentation:transition-type::("manual" | "automatic" | "semi-automatic"))? ;
 style-drawing-page-properties-attlist ::= (presentation:transition-style::("none" | "fade-from-left" | "fade-from-top" | "fade-from-right" | "fade-from-bottom" | "fade-from-upperleft" | "fade-from-upperright" | "fade-from-lowerleft" | "fade-from-lowerright" | "move-from-left" | "move-from-top" | "move-from-right" | "move-from-bottom" | "move-from-upperleft" | "move-from-upperright" | "move-from-lowerleft" | "move-from-lowerright" | "uncover-to-left" | "uncover-to-top" | "uncover-to-right" | "uncover-to-bottom" | "uncover-to-upperleft" | "uncover-to-upperright" | "uncover-to-lowerleft" | "uncover-to-lowerright" | "fade-to-center" | "fade-from-center" | "vertical-stripes" | "horizontal-stripes" | "clockwise" | "counterclockwise" | "open-vertical" | "open-horizontal" | "close-vertical" | "close-horizontal" | "wavyline-from-left" | "wavyline-from-top" | "wavyline-from-right" | "wavyline-from-bottom" | "spiralin-left" | "spiralin-right" | "spiralout-left" | "spiralout-right" | "roll-from-top" | "roll-from-left" | "roll-from-right" | "roll-from-bottom" | "stretch-from-left" | "stretch-from-top" | "stretch-from-right" | "stretch-from-bottom" | "vertical-lines" | "horizontal-lines" | "dissolve" | "random" | "vertical-checkerboard" | "horizontal-checkerboard" | "interlocking-horizontal-left" | "interlocking-horizontal-right" | "interlocking-vertical-top" | "interlocking-vertical-bottom" | "fly-away" | "open" | "close" | "melt"))? ;
 style-drawing-page-properties-attlist ::= (presentation:transition-speed::presentationSpeeds)? ;
 style-drawing-page-properties-attlist ::= (smil:subtype::string)? ;
 style-drawing-page-properties-attlist ::= (smil:direction::("forward" | "reverse"))? ;
 style-drawing-page-properties-attlist ::= (smil:fadeColor::color)? ;
 style-drawing-page-properties-attlist ::= (presentation:duration::duration)? ;
 style-drawing-page-properties-attlist ::= (presentation:visibility::("visible" | "hidden"))? ;
 style-drawing-page-properties-attlist ::= (draw:background-size::("full" | "border"))? ;
 style-drawing-page-properties-attlist ::= (presentation:background-objects-visible::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:background-visible::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:display-header::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:display-footer::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:display-page-number::boolean)? ;
 style-drawing-page-properties-attlist ::= (presentation:display-date-time::boolean)? ;
 style-drawing-page-properties-attlist ::= (smil:type::string)? ;
table-data-pilot-layout-info ::= table:data-pilot-layout-info::table-data-pilot-layout-info-attlist ;
config-config-item-map-indexed-attlist ::= config:name::string ;
table-sort-groups-attlist ::= (table:data-type::("text" | "number" | "automatic" | string))? ;
 table-sort-groups-attlist ::= (table:order::("ascending" | "descending"))? ;
presentation-dim ::= presentation:dim::(presentation-dim-attlist presentation-sound?) ;
anim-animate-motion-attlist ::= (svg:path::pathData)? ;
 anim-animate-motion-attlist ::= (svg:origin::string)? ;
 anim-animate-motion-attlist ::= (smil:calcMode::("discrete" | "linear" | "paced" | "spline"))? ;
mathMarkup ::= (α | string() | mathMarkup)* ;
presentation-date-time-decl-attlist ::= presentation:name::string ;
 presentation-date-time-decl-attlist ::= presentation:source::("fixed" | "current-date") ;
 presentation-date-time-decl-attlist ::= (style:data-style-name::styleNameRef)? ;
text-template-name-attlist ::= (text:display::("full" | "path" | "name" | "name-and-extension" | "area" | "title"))? ;
draw-caption-attlist ::= (draw:caption-point-x::coordinate draw:caption-point-y::coordinate)? ;
 draw-caption-attlist ::= (draw:corner-radius::nonNegativeLength)? ;
style-section-properties-elements ::= style-background-image ;
 style-section-properties-elements ::= style-columns ;
 style-section-properties-elements ::= text-notes-configuration* ;
form-button-attlist ::= form-control-attlist button-type common-disabled-attlist label image-data common-printable-attlist common-tab-attlist target-frame target-location common-title-attlist common-value-attlist common-form-relative-image-position-attlist ;
 form-button-attlist ::= (form:default-button::boolean)? ;
 form-button-attlist ::= (form:toggle::boolean)? ;
 form-button-attlist ::= (form:focus-on-click::boolean)? ;
 form-button-attlist ::= (form:xforms-submission::string)? ;
column-controls ::= form:text::(form-text-attlist common-form-control-content) ;
 column-controls ::= form:textarea::(form-textarea-attlist common-form-control-content text-p*) ;
 column-controls ::= form:formatted-text::(form-formatted-text-attlist common-form-control-content) ;
 column-controls ::= form:number::(form-number-attlist common-numeric-control-attlist common-form-control-content) ;
 column-controls ::= form:date::(form-date-attlist common-numeric-control-attlist common-form-control-content) ;
 column-controls ::= form:combobox::(form-combobox-attlist common-form-control-content form-item*) ;
 column-controls ::= form:listbox::(form-listbox-attlist common-form-control-content form-option*) ;
 column-controls ::= form:checkbox::(form-checkbox-attlist common-form-control-content) ;
chart-wall-attlist ::= (svg:width::length)? ;
 chart-wall-attlist ::= (chart:style-name::styleNameRef)? ;
text-index-title-template ::= text:index-title-template::((text:style-name::styleNameRef)? string()) ;
dr3d-rotate ::= dr3d:rotate::(common-draw-viewbox-attlist common-draw-path-data-attlist common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-dr3d-transform-attlist) ;
meta-date-string ::= meta:date-string::string ;
table-content-validations ::= table:content-validations::(table-content-validation+) ;
form-control-attlist ::= common-form-control-attlist common-control-id-attlist xforms-bind-attlist ;
chart-series ::= chart:series::(chart-series-attlist chart-domain* chart-mean-value? chart-regression-curve? chart-error-indicator? chart-data-point*) ;
table-calculation-settings ::= table:calculation-settings::(table-calculation-setting-attlist table-null-date? table-iteration?) ;
text-index-name ::= text:index-name::string ;
common-field-display-value-none-attlist ::= (text:display::("value" | "none"))? ;
table-data-pilot-member-attlist ::= table:name::string ;
 table-data-pilot-member-attlist ::= (table:display::boolean)? ;
 table-data-pilot-member-attlist ::= (table:show-details::boolean)? ;
style-header-footer-properties-elements ::= style-background-image ;
style-page-layout-properties-content ::= style-properties-content ;
presentation-placeholder ::= presentation:placeholder::(presentation:object::presentation-classes svg:x::(coordinate | percent) svg:y::(coordinate | percent) svg:width::(length | percent) svg:height::(length | percent)) ;
style-map ::= style:map::style-map-attlist ;
number-number-attlist ::= (number:decimal-replacement::string())? ;
 number-number-attlist ::= (number:display-factor::double)? ;
style-paragraph-properties-content ::= style-properties-content ;
text-index-source-style ::= text:index-source-style::(text:style-name::styleName) ;
common-field-description-attlist ::= (text:description::string())? ;
chart-series-attlist ::= (chart:values-cell-range-address::cellRangeAddress)? ;
 chart-series-attlist ::= (chart:label-cell-address::cellAddress)? ;
 chart-series-attlist ::= (chart:class::namespacedToken)? ;
 chart-series-attlist ::= (chart:attached-axis::string)? ;
 chart-series-attlist ::= (chart:style-name::styleNameRef)? ;
common-draw-transform-attlist ::= (draw:transform::string)? ;
common-shadow-attlist ::= (style:shadow::shadowType)? ;
common-num-format-attlist ::= (style:num-format::("1" | "i" | "I" | string | ε)) | (style:num-format::("a" | "A") style-num-letter-sync-attlist) | ε ;
text-page ::= text:page::text-page-attlist ;
common-data-field-attlist ::= (form:data-field::string)? ;
variableName ::= string() ;
draw-regular-polygon-sharpness-attlist ::= draw:sharpness::percent ;
table-deletions ::= table:deletions::((table-cell-content-deletion | table-change-deletion)+) ;
text-list-level-style-attr ::= text:level::positiveInteger ;
table-data-pilot-sort-info ::= table:data-pilot-sort-info::table-data-pilot-sort-info-attlist ;
table-tracked-changes ::= table:tracked-changes::(table-tracked-changes-attlist (table-cell-content-change | table-insertion | table-deletion | table-movement)*) ;
table-database-source-sql-attlist ::= table:database-name::string ;
 table-database-source-sql-attlist ::= table:sql-statement::string ;
 table-database-source-sql-attlist ::= (table:parse-sql-statement::boolean)? ;
presentation-shape-attlist ::= (presentation:class::presentation-classes)? ;
 presentation-shape-attlist ::= (presentation:placeholder::boolean)? ;
 presentation-shape-attlist ::= (presentation:user-transformed::boolean)? ;
style-chart-properties ::= style:chart-properties::style-chart-properties-content ;
text-alphabetical-index ::= text:alphabetical-index::(sectionAttr text-alphabetical-index-source text-index-body) ;
office-change-info ::= office:change-info::(dc-creator dc-date text-p*) ;
paragraph-content ::= string() ;
 paragraph-content ::= text:s::((text:c::nonNegativeInteger)?) ;
 paragraph-content ::= text:tab::text-tab-attr ;
 paragraph-content ::= text:line-break::ε ;
 paragraph-content ::= text-soft-page-break ;
 paragraph-content ::= text:span::((text:style-name::styleNameRef)? (text:class-names::styleNameRefs)? paragraph-content*) ;
 paragraph-content ::= text:a::(text-a-attlist office-event-listeners? paragraph-content*) ;
 paragraph-content ::= (text:bookmark::(text:name::string)) | (text:bookmark-start::(text:name::string)) | (text:bookmark-end::(text:name::string)) ;
 paragraph-content ::= text:reference-mark::(text:name::string) ;
 paragraph-content ::= (text:reference-mark-start::(text:name::string)) | (text:reference-mark-end::(text:name::string)) ;
 paragraph-content ::= text:note::(text-note-class (text:id::string)? text:note-citation::((text:label::string)? string()) text:note-body::(text-content*)) ;
 paragraph-content ::= text:ruby::((text:style-name::styleNameRef)? text:ruby-base::paragraph-content text:ruby-text::((text:style-name::styleNameRef)? string())) ;
 paragraph-content ::= office-annotation ;
 paragraph-content ::= change-marks ;
 paragraph-content ::= shape | draw-a ;
 paragraph-content ::= text:date::(text-date-attlist string()) ;
 paragraph-content ::= text:time::(text-time-attlist string()) ;
 paragraph-content ::= text:page-number::(text-page-number-attlist string()) ;
 paragraph-content ::= text:page-continuation::(text-page-continuation-attlist string()) ;
 paragraph-content ::= text:sender-firstname::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-lastname::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-initials::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-title::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-position::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-email::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-phone-private::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-fax::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-company::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-phone-work::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-street::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-city::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-postal-code::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-country::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:sender-state-or-province::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:author-name::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:author-initials::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:chapter::(text-chapter-attlist string()) ;
 paragraph-content ::= text:file-name::(text-file-name-attlist string()) ;
 paragraph-content ::= text:template-name::(text-template-name-attlist string()) ;
 paragraph-content ::= text:sheet-name::string() ;
 paragraph-content ::= text:variable-set::(common-field-name-attlist common-field-formula-attlist common-value-and-type-attlist common-field-display-value-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:variable-get::(common-field-name-attlist common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:variable-input::(common-field-name-attlist common-field-description-attlist common-value-type-attlist common-field-display-value-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:user-field-get::(common-field-name-attlist common-field-display-value-formula-none-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:user-field-input::(common-field-name-attlist common-field-description-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:sequence::(common-field-name-attlist common-field-formula-attlist common-field-num-format-attlist text-sequence-ref-name string()) ;
 paragraph-content ::= text:expression::(common-field-formula-attlist common-value-and-type-attlist? common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:text-input::(common-field-description-attlist string()) ;
 paragraph-content ::= text:initial-creator::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:creation-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::dateOrDateTime)? string()) ;
 paragraph-content ::= text:creation-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::timeOrDateTime)? string()) ;
 paragraph-content ::= text:description::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:user-defined::(common-field-fixed-attlist text:name::string common-field-data-style-name-attlist (office:value::double)? (office:date-value::dateOrDateTime)? (office:time-value::duration)? (office:boolean-value::boolean)? (office:string-value::string)? string()) ;
 paragraph-content ::= text:print-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::time)? string()) ;
 paragraph-content ::= text:print-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::date)? string()) ;
 paragraph-content ::= text:printed-by::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:title::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:subject::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:keywords::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:editing-cycles::(common-field-fixed-attlist string()) ;
 paragraph-content ::= text:editing-duration::(common-field-fixed-attlist common-field-data-style-name-attlist (text:duration::duration)? string()) ;
 paragraph-content ::= text:modification-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::time)? string()) ;
 paragraph-content ::= text:modification-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::date)? string()) ;
 paragraph-content ::= text:creator::(common-field-fixed-attlist string()) ;
 paragraph-content ::= (text:page-count::(common-field-num-format-attlist string())) | (text:paragraph-count::(common-field-num-format-attlist string())) | (text:word-count::(common-field-num-format-attlist string())) | (text:character-count::(common-field-num-format-attlist string())) | (text:table-count::(common-field-num-format-attlist string())) | (text:image-count::(common-field-num-format-attlist string())) | (text:object-count::(common-field-num-format-attlist string())) ;
 paragraph-content ::= text:database-display::(text-database-display-attlist string()) ;
 paragraph-content ::= text:database-next::text-database-next-attlist ;
 paragraph-content ::= text:database-row-select::text-database-row-select-attlist ;
 paragraph-content ::= text:database-row-number::(common-field-database-table common-field-num-format-attlist (text:value::nonNegativeInteger)? string()) ;
 paragraph-content ::= text:database-name::(common-field-database-table string()) ;
 paragraph-content ::= text:page-variable-set::(text-set-page-variable-attlist string()) ;
 paragraph-content ::= text:page-variable-get::(text-get-page-variable-attlist string()) ;
 paragraph-content ::= text:placeholder::(text-placeholder-attlist string()) ;
 paragraph-content ::= text:conditional-text::(text-conditional-text-attlist string()) ;
 paragraph-content ::= text:hidden-text::(text-hidden-text-attlist string()) ;
 paragraph-content ::= (text:reference-ref::(text-common-ref-content text-ref-content)) | (text:bookmark-ref::(text-common-ref-content text-ref-content)) ;
 paragraph-content ::= text:note-ref::(text-common-ref-content text-note-ref-content text-ref-content) ;
 paragraph-content ::= text:sequence-ref::(text-common-ref-content text-sequence-ref-content) ;
 paragraph-content ::= text:script::((xlink:href::anyURI (xlink:type::"simple")?) | string() (script:language::string)?) ;
 paragraph-content ::= text:execute-macro::((text:name::string)? office-event-listeners? string()) ;
 paragraph-content ::= text:hidden-paragraph::(text-hidden-paragraph-attlist string()) ;
 paragraph-content ::= text:dde-connection::(text:connection-name::string string()) ;
 paragraph-content ::= text:measure::(text:kind::("value" | "unit" | "gap") string()) ;
 paragraph-content ::= text:table-formula::(common-field-formula-attlist common-field-display-value-formula-attlist common-field-data-style-name-attlist string()) ;
 paragraph-content ::= text:toc-mark-start::text-toc-mark-start-attrs ;
 paragraph-content ::= text:toc-mark-end::text-id ;
 paragraph-content ::= text:toc-mark::(text:string-value::string text-outline-level) ;
 paragraph-content ::= text:user-index-mark-start::(text-id text-outline-level text-index-name) ;
 paragraph-content ::= text:user-index-mark-end::(text-id text-outline-level) ;
 paragraph-content ::= text:user-index-mark::(text:string-value::string text-outline-level text-index-name) ;
 paragraph-content ::= text:alphabetical-index-mark-start::(text-id text-alphabetical-index-mark-attrs) ;
 paragraph-content ::= text:alphabetical-index-mark-end::text-id ;
 paragraph-content ::= text:alphabetical-index-mark::(text:string-value::string text-alphabetical-index-mark-attrs) ;
 paragraph-content ::= text:bibliography-mark::(text:bibliography-type::text-bibliography-types ((text:identifier::string) | (text:address::string) | (text:annote::string) | (text:author::string) | (text:booktitle::string) | (text:chapter::string) | (text:edition::string) | (text:editor::string) | (text:howpublished::string) | (text:institution::string) | (text:journal::string) | (text:month::string) | (text:note::string) | (text:number::string) | (text:organizations::string) | (text:pages::string) | (text:publisher::string) | (text:school::string) | (text:series::string) | (text:title::string) | (text:report-type::string) | (text:volume::string) | (text:year::string) | (text:url::string) | (text:custom1::string) | (text:custom2::string) | (text:custom3::string) | (text:custom4::string) | (text:custom5::string) | (text:isbn::string) | (text:issn::string))* string()) ;
 paragraph-content ::= presentation:header::ε ;
 paragraph-content ::= presentation:footer::ε ;
 paragraph-content ::= presentation:date-time::ε ;
config-config-item-map-entry-attlist ::= (config:name::string)? ;
number-day ::= number:day::(number-day-attlist common-calendar-attlist) ;
styleNameRef ::= string() | ε ;
common-endsync-timing-attlist ::= (smil:endsync::("first" | "last" | "all" | "media"))? ;
table-visibility-value ::= "visible" | "collapse" | "filter" ;
change-mark-attr ::= text:change-id::IDREF ;
common-vertical-pos-attlist ::= (style:vertical-pos::("top" | "middle" | "bottom" | "from-top" | "below"))? (svg:y::coordinate)? ;
style-chart-properties-attlist ::= (chart:scale-text::boolean)? ;
 style-chart-properties-attlist ::= (chart:three-dimensional::boolean)? ;
 style-chart-properties-attlist ::= (chart:deep::boolean)? ;
 style-chart-properties-attlist ::= (chart:symbol-type::"none") | (chart:symbol-type::"automatic") | (chart:symbol-type::"named-symbol" chart:symbol-name::("square" | "diamond" | "arrow-down" | "arrow-up" | "arrow-right" | "arrow-left" | "bow-tie" | "hourglass" | "circle" | "star" | "x" | "plus" | "asterisk" | "horizontal-bar" | "vertical-bar")) | (chart:symbol-type::"image" chart:symbol-image::(xlink:href::anyURI)) | ε ;
 style-chart-properties-attlist ::= (chart:symbol-width::nonNegativeLength)? (chart:symbol-height::nonNegativeLength)? ;
 style-chart-properties-attlist ::= (chart:vertical::boolean)? ;
 style-chart-properties-attlist ::= (chart:connect-bars::boolean)? ;
 style-chart-properties-attlist ::= (chart:gap-width::integer)? (chart:overlap::integer)? ;
 style-chart-properties-attlist ::= (chart:japanese-candle-stick::boolean)? ;
 style-chart-properties-attlist ::= (chart:interpolation::("none" | "cubic-spline" | "b-spline"))? (chart:spline-order::positiveInteger)? (chart:spline-resolution::positiveInteger)? ;
 style-chart-properties-attlist ::= (chart:pie-offset::nonNegativeInteger)? ;
 style-chart-properties-attlist ::= (chart:lines::boolean)? ;
 style-chart-properties-attlist ::= (chart:solid-type::("cuboid" | "cylinder" | "cone" | "pyramid"))? ;
 style-chart-properties-attlist ::= (chart:stacked::boolean)? (chart:percentage::boolean)? ;
 style-chart-properties-attlist ::= (chart:link-data-style-to-source::boolean)? ;
 style-chart-properties-attlist ::= (chart:visible::boolean)? ;
 style-chart-properties-attlist ::= (chart:logarithmic::boolean)? ;
 style-chart-properties-attlist ::= (chart:maximum::double)? (chart:minimum::double)? (chart:origin::double)? (chart:interval-major::double)? (chart:interval-minor-divisor::positiveInteger)? ;
 style-chart-properties-attlist ::= (chart:tick-marks-major-inner::boolean)? (chart:tick-marks-major-outer::boolean)? (chart:tick-marks-minor-inner::boolean)? (chart:tick-marks-minor-outer::boolean)? ;
 style-chart-properties-attlist ::= (chart:display-label::boolean)? (chart:text-overlap::boolean)? (text:line-break::boolean)? (chart:label-arrangement::("side-by-side" | "stagger-even" | "stagger-odd"))? ;
 style-chart-properties-attlist ::= common-style-direction-attlist ;
 style-chart-properties-attlist ::= common-rotation-angle-attlist ;
 style-chart-properties-attlist ::= (chart:data-label-number::("none" | "value" | "percentage"))? ;
 style-chart-properties-attlist ::= (chart:data-label-text::boolean)? ;
 style-chart-properties-attlist ::= (chart:data-label-symbol::boolean)? ;
 style-chart-properties-attlist ::= (chart:mean-value::boolean)? ;
 style-chart-properties-attlist ::= (chart:error-category::("none" | "variance" | "standard-deviation" | "percentage" | "error-margin" | "constant"))? ;
 style-chart-properties-attlist ::= (chart:error-percentage::double)? ;
 style-chart-properties-attlist ::= (chart:error-margin::double)? ;
 style-chart-properties-attlist ::= (chart:error-lower-limit::double)? (chart:error-upper-limit::double)? ;
 style-chart-properties-attlist ::= (chart:error-upper-indicator::boolean)? (chart:error-lower-indicator::boolean)? ;
 style-chart-properties-attlist ::= (chart:series-source::("columns" | "rows"))? ;
 style-chart-properties-attlist ::= (chart:regression-type::("none" | "linear" | "logarithmic" | "exponential" | "power"))? ;
style-page-layout-properties-elements ::= style-background-image ;
 style-page-layout-properties-elements ::= style-columns ;
 style-page-layout-properties-elements ::= style-footnote-sep ;
text-table-index-entry-template ::= text:table-index-entry-template::text-illustration-index-entry-content ;
text-linenumbering-configuration ::= text:linenumbering-configuration::(text-linenumbering-configuration-attlist text-linenumbering-separator?) ;
draw-path ::= draw:path::(common-draw-path-data-attlist common-draw-position-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
number-embedded-text ::= number:embedded-text::(number-embedded-text-attlist string()) ;
table-table-cell-content ::= table-cell-range-source? office-annotation? table-detective? text-content* ;
style-handout-master ::= style:handout-master::(common-presentation-header-footer-attlist style-handout-master-attlist shape*) ;
presentation-show-text ::= presentation:show-text::(common-presentation-effect-attlist presentation-sound?) ;
targetFrameName ::= "_self" | "_blank" | "_parent" | "_top" | string ;
draw-area-circle ::= draw:area-circle::(common-draw-area-attlist svg:cx::coordinate svg:cy::coordinate svg:r::length svg-title? svg-desc? office-event-listeners?) ;
text-user-index-source-attr ::= text-index-scope-attr text-relative-tab-stop-position-attr text:index-name::string ;
 text-user-index-source-attr ::= (text:use-index-marks::boolean)? (text:use-graphics::boolean)? (text:use-tables::boolean)? (text:use-floating-frames::boolean)? (text:use-objects::boolean)? ;
 text-user-index-source-attr ::= (text:copy-outline-levels::boolean)? ;
form-image-attlist ::= form-control-attlist button-type common-disabled-attlist image-data common-printable-attlist common-tab-attlist target-frame target-location common-title-attlist common-value-attlist ;
draw-connector ::= draw:connector::(draw-connector-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
table-highlighted-range ::= table:highlighted-range::(table-highlighted-range-attlist | table-highlighted-range-attlist-invalid) ;
anyElements ::= (string()? anyAttListOrElements string()?)* ;
style-column-sep ::= style:column-sep::style-column-sep-attlist ;
shapes3d ::= dr3d-scene | dr3d-extrude | dr3d-sphere | dr3d-rotate | dr3d-cube ;
text-linenumbering-configuration-attlist ::= (text:number-lines::boolean)? ;
 text-linenumbering-configuration-attlist ::= common-num-format-attlist? ;
 text-linenumbering-configuration-attlist ::= (text:style-name::styleNameRef)? ;
 text-linenumbering-configuration-attlist ::= (text:increment::nonNegativeInteger)? ;
 text-linenumbering-configuration-attlist ::= (text:number-position::("left" | "right" | "inner" | "outer"))? ;
 text-linenumbering-configuration-attlist ::= (text:offset::nonNegativeLength)? ;
 text-linenumbering-configuration-attlist ::= (text:count-empty-lines::boolean)? ;
 text-linenumbering-configuration-attlist ::= (text:count-in-text-boxes::boolean)? ;
 text-linenumbering-configuration-attlist ::= (text:restart-on-page::boolean)? ;
table-rows-and-groups ::= (table-table-row-group | table-rows-no-group)+ ;
office-drawing-attlist ::= ε ;
draw-stroke-dash ::= draw:stroke-dash::draw-stroke-dash-attlist ;
text-object-index-entry-template ::= text:object-index-entry-template::text-illustration-index-entry-content ;
list-source-type ::= (form:list-source-type::("table" | "query" | "sql" | "sql-pass-through" | "value-list" | "table-fields"))? ;
number-month ::= number:month::(number-month-attlist common-calendar-attlist) ;
text-toc-mark-start-attrs ::= text-id text-outline-level ;
chart-data-point ::= chart:data-point::chart-data-point-attlist ;
office-image-attlist ::= ε ;
office-scripts ::= (office:scripts::(office-script* office-event-listeners?))? ;
common-vertical-margin-attlist ::= (fo:margin-top::(nonNegativeLength | percent))? (fo:margin-bottom::(nonNegativeLength | percent))? ;
table-data-pilot-table ::= table:data-pilot-table::(table-data-pilot-table-attlist (table-database-source-sql | table-database-source-table | table-database-source-query | table-source-service | table-source-cell-range)? table-data-pilot-field+) ;
vector3D ::= string() ;
style-header-footer-properties-attlist ::= (svg:height::length)? (fo:min-height::length)? ;
 style-header-footer-properties-attlist ::= common-horizontal-margin-attlist common-vertical-margin-attlist common-margin-attlist ;
 style-header-footer-properties-attlist ::= common-border-attlist ;
 style-header-footer-properties-attlist ::= common-border-line-width-attlist ;
 style-header-footer-properties-attlist ::= common-padding-attlist ;
 style-header-footer-properties-attlist ::= common-background-color-attlist ;
 style-header-footer-properties-attlist ::= common-shadow-attlist ;
 style-header-footer-properties-attlist ::= (style:dynamic-spacing::boolean)? ;
style-column ::= style:column::style-column-attlist ;
style-font-face-attlist ::= (svg:font-family::string)? (svg:font-style::fontStyle)? (svg:font-variant::fontVariant)? (svg:font-weight::fontWeight)? (svg:font-stretch::("normal" | "ultra-condensed" | "extra-condensed" | "condensed" | "semi-condensed" | "semi-expanded" | "expanded" | "extra-expanded" | "ultra-expanded"))? (svg:font-size::positiveLength)? (svg:unicode-range::string())? (svg:units-per-em::integer)? (svg:panose-1::string())? (svg:stemv::integer)? (svg:stemh::integer)? (svg:slope::integer)? (svg:cap-height::integer)? (svg:x-height::integer)? (svg:accent-height::integer)? (svg:ascent::integer)? (svg:descent::integer)? (svg:widths::string())? (svg:bbox::string())? (svg:ideographic::integer)? (svg:alphabetic::integer)? (svg:mathematical::integer)? (svg:hanging::integer)? (svg:v-ideographic::integer)? (svg:v-alphabetic::integer)? (svg:v-mathematical::integer)? (svg:v-hanging::integer)? (svg:underline-position::integer)? (svg:underline-thickness::integer)? (svg:strikethrough-position::integer)? (svg:strikethrough-thickness::integer)? (svg:overline-position::integer)? (svg:overline-thickness::integer)? ;
 style-font-face-attlist ::= style:name::string ;
 style-font-face-attlist ::= (style:font-adornments::string)? ;
 style-font-face-attlist ::= (style:font-family-generic::fontFamilyGeneric)? ;
 style-font-face-attlist ::= (style:font-pitch::fontPitch)? ;
 style-font-face-attlist ::= (style:font-charset::textEncoding)? ;
style-num-letter-sync-attlist ::= (style:num-letter-sync::boolean)? ;
common-field-fixed-attlist ::= (text:fixed::boolean)? ;
text-changed-region-attr ::= text:id::ID ;
draw-stroke-dash-attlist ::= draw:name::styleName ;
 draw-stroke-dash-attlist ::= (draw:display-name::string)? ;
 draw-stroke-dash-attlist ::= (draw:style::("rect" | "round"))? ;
 draw-stroke-dash-attlist ::= (draw:dots1::integer)? (draw:dots1-length::length)? (draw:dots2::integer)? (draw:dots2-length::length)? ;
 draw-stroke-dash-attlist ::= (draw:distance::length)? ;
any-date ::= number-day | number-month | number-year | number-era | number-day-of-week | number-week-of-year | number-quarter | number-hours | number-am-pm | number-minutes | number-seconds ;
table-last-column ::= table:last-column::common-table-template-attlist ;
table-cell-content-deletion ::= table:cell-content-deletion::((table:id::string)? table-cell-address? table-change-track-table-cell?) ;
text-bibliography-types ::= "article" | "book" | "booklet" | "conference" | "custom1" | "custom2" | "custom3" | "custom4" | "custom5" | "email" | "inbook" | "incollection" | "inproceedings" | "journal" | "manual" | "mastersthesis" | "misc" | "phdthesis" | "proceedings" | "techreport" | "unpublished" | "www" ;
office-script-attlist ::= script:language::string ;
config-config-item-map-named ::= config:config-item-map-named::(config-config-item-map-named-attlist config-config-item-map-entry+) ;
number-seconds-attlist ::= (number:style::("short" | "long"))? ;
 number-seconds-attlist ::= (number:decimal-places::integer)? ;
table-deletion ::= table:deletion::(table-deletion-attlist common-table-change-attlist office-change-info table-dependencies? table-deletions? table-cut-offs?) ;
text-index-entry-chapter-attrs ::= (text:display::("name" | "number" | "number-and-name"))? ;
style-ruby-properties ::= style:ruby-properties::style-ruby-properties-content ;
common-contour-attlist ::= draw:recreate-on-edit::boolean ;
table-database-source-query ::= table:database-source-table::table-database-source-table-attlist ;
change-marks ::= (text:change::change-mark-attr) | (text:change-start::change-mark-attr) | (text:change-end::change-mark-attr) ;
common-field-data-style-name-attlist ::= (style:data-style-name::styleNameRef)? ;
style-column-attlist ::= style:rel-width::relativeLength ;
 style-column-attlist ::= (fo:start-indent::length)? ;
 style-column-attlist ::= (fo:end-indent::length)? ;
 style-column-attlist ::= (fo:space-before::length)? ;
 style-column-attlist ::= (fo:space-after::length)? ;
common-fill-timing-attlist ::= (smil:fill::("remove" | "freeze" | "hold" | "auto" | "default" | "transition"))? ;
form-image-frame-attlist ::= form-control-attlist common-disabled-attlist image-data common-printable-attlist common-readonly-attlist common-title-attlist common-data-field-attlist ;
rowOrCol ::= "row" | "column" ;
table-source-service ::= table:source-service::table-source-service-attlist ;
office-annotation ::= office:annotation::(office-annotation-attlist draw-caption-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist dc-creator? dc-date? meta-date-string? (text-p | text-list)*) ;
config-config-item-map-named-attlist ::= config:name::string ;
style-footer-left ::= style:footer-left::(common-style-header-footer-attlist header-footer-content) ;
common-anim-target-attlist ::= (smil:targetElement::IDREF)? ;
 common-anim-target-attlist ::= (anim:sub-item::string)? ;
draw-line ::= draw:line::(draw-line-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
style-ruby-properties-attlist ::= (style:ruby-position::("above" | "below"))? ;
 style-ruby-properties-attlist ::= (style:ruby-align::("left" | "center" | "right" | "distribute-letter" | "distribute-space"))? ;
style-list-level-properties-content-strict ::= style-list-level-properties-attlist style-list-level-properties-elements ;
style-table-properties-content ::= style-properties-content ;
table-sort-by-attlist ::= table:field-number::nonNegativeInteger ;
 table-sort-by-attlist ::= (table:data-type::("text" | "number" | "automatic" | string))? ;
 table-sort-by-attlist ::= (table:order::("ascending" | "descending"))? ;
table-columns-and-groups ::= (table-table-column-group | table-columns-no-group)+ ;
draw-page-thumbnail ::= draw:page-thumbnail::(draw-page-thumbnail-attlist common-draw-position-attlist common-draw-size-attlist presentation-shape-attlist common-draw-shape-with-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc?) ;
table-odd-rows ::= table:odd-rows::common-table-template-attlist ;
office-image-content-prelude ::= ε ;
style-graphic-properties ::= style:graphic-properties::style-graphic-properties-content ;
table-source-service-attlist ::= table:name::string ;
 table-source-service-attlist ::= table:source-name::string ;
 table-source-service-attlist ::= table:object-name::string ;
 table-source-service-attlist ::= (table:user-name::string)? ;
 table-source-service-attlist ::= (table:password::string)? ;
office-meta-content-strict ::= office-meta-data* ;
common-calendar-attlist ::= (number:calendar::("gregorian" | "gengou" | "ROC" | "hanja_yoil" | "hanja" | "hijri" | "jewish" | "buddhist" | string))? ;
draw-handle ::= draw:handle::draw-handle-attlist ;
table-cell-content-change ::= table:cell-content-change::(common-table-change-attlist table-cell-address office-change-info table-dependencies? table-deletions? table-previous) ;
table-subtotal-field ::= table:subtotal-field::table-subtotal-field-attlist ;
chart-legend-attlist ::= (chart:legend-position::("start" | "end" | "top" | "bottom") (chart:legend-align::("start" | "center" | "end"))?) | (chart:legend-position::("top-start" | "bottom-start" | "top-end" | "bottom-end")) | ε ;
 chart-legend-attlist ::= common-draw-position-attlist ;
 chart-legend-attlist ::= (style:legend-expansion::("wide" | "high" | "balanced")) | (style:legend-expansion::"custom" style:legend-expansion-aspect-ratio::double) | ε ;
 chart-legend-attlist ::= (chart:style-name::styleNameRef)? ;
office-chart-content-main ::= chart-chart ;
table-subtotal-rules ::= table:subtotal-rules::(table-subtotal-rules-attlist table-sort-groups? table-subtotal-rule*) ;
chart-plot-area ::= chart:plot-area::(chart-plot-area-attlist dr3d-light* chart-axis* chart-series* chart-stock-gain-marker? chart-stock-loss-marker? chart-stock-range-line? chart-wall? chart-floor?) ;
draw-measure-attlist ::= svg:x1::coordinate svg:y1::coordinate ;
 draw-measure-attlist ::= svg:x2::coordinate svg:y2::coordinate ;
style-chart-properties-elements ::= ε ;
draw-param ::= draw:param::draw-param-attlist ;
draw-object-ole ::= draw:object-ole::(draw-object-ole-attlist common-draw-data-attlist | office-binary-data) ;
number-era-attlist ::= (number:style::("short" | "long"))? ;
number-percentage-style ::= number:percentage-style::(common-data-style-attlist style-text-properties? number-text? number-and-text? style-map*) ;
office-body-content ::= office:text::(office-text-attlist office-text-content-prelude office-text-content-main* office-text-content-epilogue) ;
 office-body-content ::= office:drawing::(office-drawing-attlist office-drawing-content-prelude office-drawing-content-main office-drawing-content-epilogue) ;
 office-body-content ::= office:presentation::(office-presentation-attlist office-presentation-content-prelude office-presentation-content-main office-presentation-content-epilogue) ;
 office-body-content ::= office:spreadsheet::(office-spreadsheet-attlist office-spreadsheet-content-prelude office-spreadsheet-content-main office-spreadsheet-content-epilogue) ;
 office-body-content ::= office:chart::(office-chart-attlist office-chart-content-prelude office-chart-content-main office-chart-content-epilogue) ;
 office-body-content ::= office:image::(office-image-attlist office-image-content-prelude office-image-content-main office-image-content-epilogue) ;
draw-contour-polygon ::= draw:contour-polygon::(common-contour-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-points-attlist) ;
chart-plot-area-attlist ::= common-draw-position-attlist common-draw-size-attlist ;
 chart-plot-area-attlist ::= (chart:style-name::styleNameRef)? ;
 chart-plot-area-attlist ::= (table:cell-range-address::cellRangeAddress)? ;
 chart-plot-area-attlist ::= (chart:data-source-has-labels::("none" | "row" | "column" | "both"))? ;
 chart-plot-area-attlist ::= dr3d-scene-attlist common-dr3d-transform-attlist ;
borderWidths ::= positiveLength positiveLength positiveLength ;
form-formatted-text-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist ;
 form-formatted-text-attlist ::= (form:max-value::string)? ;
 form-formatted-text-attlist ::= (form:min-value::string)? ;
 form-formatted-text-attlist ::= (form:validation::boolean)? ;
chart-mean-value ::= chart:mean-value::chart-mean-value-attlist ;
style-section-properties ::= style:section-properties::style-section-properties-content ;
table-source-cell-range-attlist ::= table:cell-range-address::cellRangeAddress ;
cellRangeAddressList ::= string() ;
style-table-properties-elements ::= style-background-image ;
style-graphic-properties-content-strict ::= style-graphic-properties-attlist style-graphic-fill-properties-attlist style-graphic-properties-elements ;
text-illustration-index ::= text:illustration-index::(sectionAttr text-illustration-index-source text-index-body) ;
office-dde-source ::= office:dde-source::(office-dde-source-attlist common-dde-connection-decl-attlist) ;
presentation-animation-elements ::= presentation-show-shape | presentation-show-text | presentation-hide-shape | presentation-hide-text | presentation-dim | presentation-play ;
table-scenario ::= table:scenario::table-scenario-attlist ;
common-table-template-attlist ::= text:style-name::styleNameRef text:paragraph-style-name::(styleNameRef?) ;
math-math ::= math:math::mathMarkup ;
common-current-value-attlist ::= (form:current-value::string)? ;
table-content-validation ::= table:content-validation::(table-validation-attlist table-help-message? (table-error-message | (table-error-macro office-event-listeners?))?) ;
table-data-pilot-level ::= table:data-pilot-level::(table-data-pilot-level-attlist table-data-pilot-subtotals? table-data-pilot-members? table-data-pilot-display-info? table-data-pilot-sort-info? table-data-pilot-layout-info?) ;
table-dependency ::= table:dependency::(table:id::string) ;
draw-equation-attlist ::= (draw:name::string)? ;
 draw-equation-attlist ::= (draw:formula::string)? ;
text-conditional-text-attlist ::= text:condition::formula ;
 text-conditional-text-attlist ::= text:string-value-if-true::string ;
 text-conditional-text-attlist ::= text:string-value-if-false::string ;
 text-conditional-text-attlist ::= (text:current-value::boolean)? ;
countryCode ::= string() ;
fontStyle ::= "normal" | "italic" | "oblique" ;
style-table-column-properties-attlist ::= (style:column-width::positiveLength)? (style:rel-column-width::relativeLength)? ;
 style-table-column-properties-attlist ::= (style:use-optimal-column-width::boolean)? ;
 style-table-column-properties-attlist ::= common-break-attlist ;
region-content ::= text-p* ;
text-list-item-attr ::= (text:start-value::nonNegativeInteger)? ;
office-spreadsheet-content-epilogue ::= table-functions ;
common-draw-circle-ellipse-attlist ::= (svg:cx::coordinate svg:cy::coordinate)? ;
 common-draw-circle-ellipse-attlist ::= (draw:kind::("full" | "section" | "cut" | "arc"))? ;
 common-draw-circle-ellipse-attlist ::= (draw:start-angle::double)? ;
 common-draw-circle-ellipse-attlist ::= (draw:end-angle::double)? ;
table-table-source ::= table:table-source::(table-table-source-attlist table-linked-source-attlist) ;
text-page-number-attlist ::= common-field-num-format-attlist common-field-fixed-attlist ;
 text-page-number-attlist ::= (text:page-adjust::integer)? ;
 text-page-number-attlist ::= (text:select-page::("previous" | "current" | "next"))? ;
table-label-range-attlist ::= table:label-cell-range-address::cellRangeAddress ;
 table-label-range-attlist ::= table:data-cell-range-address::cellRangeAddress ;
 table-label-range-attlist ::= table:orientation::("column" | "row") ;
text-sequence-decl ::= text:sequence-decl::text-sequence-decl-attlist ;
style-style ::= style:style::(style-style-attlist style-style-content style-map*) ;
draw-enhanced-geometry-attlist ::= (draw:type::custom-shape-type)? ;
 draw-enhanced-geometry-attlist ::= (svg:viewBox::(integer integer integer integer))? ;
 draw-enhanced-geometry-attlist ::= (draw:mirror-vertical::boolean)? (draw:mirror-horizontal::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-rotate-angle::double)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:concentric-gradient-fill-allowed::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-brightness::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-depth::(length double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-diffusion::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-number-of-line-segments::integer)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-light-face::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-harsh::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-harsh::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-level::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-level::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-first-light-direction::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-second-light-direction::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-metal::boolean)? ;
 draw-enhanced-geometry-attlist ::= (dr3d:shade-mode::("flat" | "phong" | "gouraud" | "draft"))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-rotation-angle::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-rotation-center::vector3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-shininess::percent)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-skew::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-specularity::percent)? ;
 draw-enhanced-geometry-attlist ::= (dr3d:projection::("parallel" | "perspective"))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-viewpoint::point3D)? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-origin::(double double))? ;
 draw-enhanced-geometry-attlist ::= (draw:extrusion-color::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:enhanced-path::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:path-stretchpoint-x::double)? (draw:path-stretchpoint-y::double)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-areas::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-points::string)? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-point-type::("none" | "segments" | "rectangle"))? ;
 draw-enhanced-geometry-attlist ::= (draw:glue-point-leaving-directions::string())? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-mode::("normal" | "path" | "shape"))? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-scale::("path" | "shape"))? ;
 draw-enhanced-geometry-attlist ::= (draw:text-path-same-letter-heights::boolean)? ;
 draw-enhanced-geometry-attlist ::= (draw:modifiers::string)? ;
common-field-name-attlist ::= text:name::variableName ;
style-presentation-page-layout ::= style:presentation-page-layout::(style:name::styleName (style:display-name::string)? presentation-placeholder*) ;
text-index-entry-page-number ::= text:index-entry-page-number::((text:style-name::styleNameRef)?) ;
office-presentation-content-main ::= draw-page* ;
presentation-sound-attlist ::= (presentation:play-full::boolean)? ;
text-alphabetical-index-auto-mark-file ::= text:alphabetical-index-auto-mark-file::(xlink:href::anyURI (xlink:type::"simple")?) ;
draw-gradient-attlist ::= (draw:start-color::color)? (draw:end-color::color)? ;
 draw-gradient-attlist ::= (draw:start-intensity::percent)? (draw:end-intensity::percent)? ;
style-background-image-attlist ::= (style:repeat::("no-repeat" | "repeat" | "stretch"))? ;
 style-background-image-attlist ::= (style:position::("left" | "center" | "right" | "top" | "bottom" | (horiBackPos vertBackPos) | (vertBackPos horiBackPos)))? ;
 style-background-image-attlist ::= (style:filter-name::string)? ;
 style-background-image-attlist ::= (draw:opacity::percent)? ;
svg-font-face-src ::= svg:font-face-src::((svg-font-face-uri | svg-font-face-name)+) ;
text-sequence-decl-attlist ::= common-field-name-attlist ;
 text-sequence-decl-attlist ::= text:display-outline-level::nonNegativeInteger ;
 text-sequence-decl-attlist ::= (text:separation-character::character)? ;
svg-font-face-name ::= svg:font-face-name::((svg:name::string())?) ;
bound-column ::= (form:bound-column::string)? ;
style-drop-cap-attlist ::= (style:length::("word" | positiveInteger))? ;
 style-drop-cap-attlist ::= (style:lines::positiveInteger)? ;
 style-drop-cap-attlist ::= (style:distance::length)? ;
 style-drop-cap-attlist ::= (style:style-name::styleNameRef)? ;
text-table-of-content ::= text:table-of-content::(sectionAttr text-table-of-content-source text-index-body) ;
anim-command-attlist ::= anim:command::string ;
style-graphic-properties-content ::= style-properties-content ;
table-data-pilot-members ::= table:data-pilot-members::(table-data-pilot-member*) ;
text-tracked-changes ::= (text:tracked-changes::(text-tracked-changes-attr text-changed-region*))? ;
office-chart-attlist ::= ε ;
text-index-entry-link-end ::= text:index-entry-link-end::((text:style-name::styleNameRef)?) ;
number-hours-attlist ::= (number:style::("short" | "long"))? ;
form-item ::= form:item::(form-item-attlist string()) ;
cellRangeAddress ::= string() ;
draw-hatch ::= draw:hatch::draw-hatch-attlist ;
sectionAttr ::= (text:style-name::styleNameRef)? ;
 sectionAttr ::= text:name::string ;
 sectionAttr ::= (text:protected::boolean)? ;
 sectionAttr ::= (text:protection-key::string)? ;
office-meta ::= (office:meta::office-meta-content)? ;
style-table-row-properties-attlist ::= (style:row-height::positiveLength)? (style:min-row-height::nonNegativeLength)? ;
 style-table-row-properties-attlist ::= (style:use-optimal-row-height::boolean)? ;
 style-table-row-properties-attlist ::= common-background-color-attlist ;
 style-table-row-properties-attlist ::= common-break-attlist ;
 style-table-row-properties-attlist ::= (fo:keep-together::("auto" | "always"))? ;
chart-regression-curve ::= chart:regression-curve::chart-regression-curve-attlist ;
common-auto-reorder-attlist ::= (number:automatic-order::boolean)? ;
table-consolidation ::= table:consolidation::table-consolidation-attlist ;
text-bibliography-configuration ::= text:bibliography-configuration::(text-bibliography-configuration-attlist text-sort-key*) ;
draw-circle-attlist ::= (svg:r::length)? ;
chart-footer ::= chart:footer::(chart-title-attlist text-p?) ;
table-subtotal-rule ::= table:subtotal-rule::(table-subtotal-rule-attlist table-subtotal-field*) ;
common-stock-marker-attlist ::= (chart:style-name::styleNameRef)? ;
chart-regression-curve-attlist ::= (chart:style-name::styleNameRef)? ;
style-text-properties-content ::= style-properties-content ;
common-value-and-type-attlist ::= (office:value-type::"float" office:value::double) | (office:value-type::"percentage" office:value::double) | (office:value-type::"currency" office:value::double (office:currency::string)?) | (office:value-type::"date" office:date-value::dateOrDateTime) | (office:value-type::"time" office:time-value::duration) | (office:value-type::"boolean" office:boolean-value::boolean) | (office:value-type::"string" (office:string-value::string)?) ;
common-basic-timing-attlist ::= common-begin-end-timing-attlist common-dur-timing-attlist common-repeat-timing-attlist ;
draw-caption ::= draw:caption::(draw-caption-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
text-index-body ::= text:index-body::(index-content-main*) ;
common-decimal-places-attlist ::= (number:decimal-places::integer)? ;
office-text-content-main ::= (text-content*) | (text-page-sequence (draw-a | shape)*) ;
number-minutes ::= number:minutes::number-minutes-attlist ;
chart-wall ::= chart:wall::chart-wall-attlist ;
table-subtotal-rule-attlist ::= table:group-by-field-number::nonNegativeInteger ;
text-index-entry-bibliography ::= text:index-entry-bibliography::text-index-entry-bibliography-attrs ;
table-filter ::= table:filter::(table-filter-attlist table-filter-condition | table-filter-and | table-filter-or) ;
style-paragraph-properties-elements ::= style-tab-stops ;
 style-paragraph-properties-elements ::= style-drop-cap ;
 style-paragraph-properties-elements ::= style-background-image ;
form-listbox-attlist ::= form-control-attlist common-disabled-attlist dropdown common-printable-attlist size common-tab-attlist common-title-attlist bound-column common-data-field-attlist list-source list-source-type ;
 form-listbox-attlist ::= (form:multiple::boolean)? ;
 form-listbox-attlist ::= (form:xforms-list-source::string)? ;
style-table-cell-properties-attlist ::= (style:vertical-align::("top" | "middle" | "bottom" | "automatic"))? ;
 style-table-cell-properties-attlist ::= (style:text-align-source::("fix" | "value-type"))? ;
 style-table-cell-properties-attlist ::= common-style-direction-attlist ;
 style-table-cell-properties-attlist ::= (style:glyph-orientation-vertical::("auto" | "0"))? ;
 style-table-cell-properties-attlist ::= common-shadow-attlist ;
 style-table-cell-properties-attlist ::= common-background-color-attlist ;
 style-table-cell-properties-attlist ::= common-border-attlist ;
 style-table-cell-properties-attlist ::= (style:diagonal-tl-br::string)? (style:diagonal-tl-br-widths::borderWidths)? (style:diagonal-bl-tr::string)? (style:diagonal-bl-tr-widths::borderWidths)? ;
 style-table-cell-properties-attlist ::= common-border-line-width-attlist ;
 style-table-cell-properties-attlist ::= common-padding-attlist ;
 style-table-cell-properties-attlist ::= (fo:wrap-option::("no-wrap" | "wrap"))? ;
 style-table-cell-properties-attlist ::= common-rotation-angle-attlist ;
 style-table-cell-properties-attlist ::= (style:rotation-align::("none" | "bottom" | "top" | "center"))? ;
 style-table-cell-properties-attlist ::= (style:cell-protect::("none" | "hidden-and-protected" | (("protected" | "formula-hidden")+)))? ;
 style-table-cell-properties-attlist ::= (style:print-content::boolean)? ;
 style-table-cell-properties-attlist ::= (style:decimal-places::nonNegativeInteger)? ;
 style-table-cell-properties-attlist ::= (style:repeat-content::boolean)? ;
 style-table-cell-properties-attlist ::= (style:shrink-to-fit::boolean)? ;
text-alphabetical-index-mark-attrs ::= (text:key1::string)? (text:key2::string)? ;
 text-alphabetical-index-mark-attrs ::= (text:string-value-phonetic::string)? (text:key1-phonetic::string)? (text:key2-phonetic::string)? ;
 text-alphabetical-index-mark-attrs ::= (text:main-entry::boolean)? ;
text-sort-key ::= text:sort-key::text-sort-key-attlist ;
chart-floor-attlist ::= (svg:width::length)? ;
 chart-floor-attlist ::= (chart:style-name::styleNameRef)? ;
presentation-notes ::= presentation:notes::(common-presentation-header-footer-attlist presentation-notes-attlist office-forms shape*) ;
number-number ::= number:number::(number-number-attlist common-decimal-places-attlist common-number-attlist number-embedded-text*) ;
office-drawing-content-main ::= draw-page* ;
text-notes-configuration ::= text:notes-configuration::text-notes-configuration-content ;
any-number ::= number-number | number-scientific-number | number-fraction ;
table-database-range ::= table:database-range::(table-database-range-attlist (table-database-source-sql | table-database-source-table | table-database-source-query)? table-filter? table-sort? table-subtotal-rules?) ;
table-decls ::= table-calculation-settings? table-content-validations? table-label-ranges? ;
style-table-cell-properties-content-strict ::= style-table-cell-properties-attlist style-table-cell-properties-elements ;
text-index-scope-attr ::= (text:index-scope::("document" | "chapter"))? ;
text-section ::= text:section::(text-section-attr text-section-source | text-section-source-dde | ε text-content*) ;
presentation-animation-group ::= presentation:animation-group::(presentation-animation-elements*) ;
text-relative-tab-stop-position-attr ::= (text:relative-tab-stop-position::boolean)? ;
number-currency-symbol-attlist ::= (number:language::languageCode)? (number:country::countryCode)? ;
text-list-item ::= text:list-item::(text-list-item-attr text-list-item-content) ;
text-list-level-style-number-attr ::= (text:style-name::styleNameRef)? ;
 text-list-level-style-number-attr ::= common-num-format-attlist common-num-format-prefix-suffix-attlist ;
 text-list-level-style-number-attr ::= (text:display-levels::positiveInteger)? ;
 text-list-level-style-number-attr ::= (text:start-value::positiveInteger)? ;
common-border-attlist ::= (fo:border::string)? (fo:border-top::string)? (fo:border-bottom::string)? (fo:border-left::string)? (fo:border-right::string)? ;
presentation-notes-attlist ::= (style:page-layout-name::styleNameRef)? ;
 presentation-notes-attlist ::= (draw:style-name::styleNameRef)? ;
positiveLength ::= string() ;
currency-symbol-and-text ::= number-currency-symbol number-text? ;
table-database-range-attlist ::= (table:name::string)? ;
 table-database-range-attlist ::= (table:is-selection::boolean)? ;
 table-database-range-attlist ::= (table:on-update-keep-styles::boolean)? ;
 table-database-range-attlist ::= (table:on-update-keep-size::boolean)? ;
 table-database-range-attlist ::= (table:has-persistent-data::boolean)? ;
 table-database-range-attlist ::= (table:orientation::("column" | "row"))? ;
 table-database-range-attlist ::= (table:contains-header::boolean)? ;
 table-database-range-attlist ::= (table:display-filter-buttons::boolean)? ;
 table-database-range-attlist ::= table:target-range-address::cellRangeAddress ;
 table-database-range-attlist ::= (table:refresh-delay::boolean)? ;
form-property-name ::= form:property-name::string ;
config-config-item-set-attlist ::= config:name::string ;
text-object-index-source-attrs ::= text-index-scope-attr ;
 text-object-index-source-attrs ::= text-relative-tab-stop-position-attr ;
 text-object-index-source-attrs ::= (text:use-spreadsheet-objects::boolean)? ;
 text-object-index-source-attrs ::= (text:use-math-objects::boolean)? ;
 text-object-index-source-attrs ::= (text:use-draw-objects::boolean)? ;
 text-object-index-source-attrs ::= (text:use-chart-objects::boolean)? ;
 text-object-index-source-attrs ::= (text:use-other-objects::boolean)? ;
text-illustration-index-source ::= text:illustration-index-source::(text-illustration-index-source-attrs text-index-title-template? text-illustration-index-entry-template?) ;
table-change-track-table-cell-attlist ::= (table:cell-address::cellAddress)? ;
 table-change-track-table-cell-attlist ::= (table:matrix-covered::boolean)? ;
 table-change-track-table-cell-attlist ::= (table:formula::string)? (table:number-matrix-columns-spanned::positiveInteger)? (table:number-matrix-rows-spanned::positiveInteger)? common-value-and-type-attlist? ;
lineWidth ::= "auto" | "normal" | "bold" | "thin" | "dash" | "medium" | "thick" | positiveInteger | percent | positiveLength ;
style-region-center ::= style:region-center::region-content ;
number-number-style ::= number:number-style::(common-data-style-attlist style-text-properties? number-text? (any-number number-text?)? style-map*) ;
target-frame ::= (office:target-frame::targetFrameName)? ;
base64Binary ::= string() ;
form-property-value-and-type-attlist ::= common-value-and-type-attlist | (office:value-type::"void") ;
table-named-range ::= table:named-range::table-named-range-attlist ;
style-header ::= style:header::(common-style-header-footer-attlist header-footer-content) ;
form-time-attlist ::= (form:value::time)? ;
 form-time-attlist ::= (form:current-value::time)? ;
 form-time-attlist ::= (form:min-value::time)? ;
 form-time-attlist ::= (form:max-value::time)? ;
table-cell-address ::= table:cell-address::common-table-cell-address-attlist ;
table-operation ::= table:operation::table-operation-attlist ;
office-document-meta ::= office:document-meta::(office-document-common-attrs office-meta) ;
text-index-entry-text ::= text:index-entry-text::((text:style-name::styleNameRef)?) ;
common-draw-data-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:show::"embed")? (xlink:actuate::"onLoad")? ;
chart-axis-attlist ::= chart:dimension::("x" | "y" | "z") ;
 chart-axis-attlist ::= (chart:name::string)? ;
 chart-axis-attlist ::= (chart:style-name::styleNameRef)? ;
text-page-attlist ::= text:master-page-name::styleNameRef ;
text-table-of-content-entry-template ::= text:table-of-content-entry-template::(text-table-of-content-entry-template-attlist text-table-of-content-children*) ;
draw-g ::= draw:g::(draw-g-attlist common-draw-z-index-attlist common-draw-name-attlist common-draw-id-attlist common-draw-style-name-attlist common-text-spreadsheet-shape-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* shape*) ;
lineStyle ::= "none" | "solid" | "dotted" | "dash" | "long-dash" | "dot-dash" | "dot-dot-dash" | "wave" ;
common-draw-path-data-attlist ::= svg:d::pathData ;
table-named-range-attlist ::= table:name::string table:cell-range-address::cellRangeAddress (table:base-cell-address::cellAddress)? (table:range-usable-as::("none" | (("print-range" | "filter" | "repeat-row" | "repeat-column")+)))? ;
number-quarter-attlist ::= (number:style::("short" | "long"))? ;
draw-a ::= draw:a::(draw-a-attlist draw-frame) ;
table-filter-condition-attlist ::= table:field-number::nonNegativeInteger ;
 table-filter-condition-attlist ::= table:value::string ;
 table-filter-condition-attlist ::= table:operator::string ;
 table-filter-condition-attlist ::= (table:case-sensitive::string)? ;
 table-filter-condition-attlist ::= (table:data-type::("text" | "number"))? ;
table-previous ::= table:previous::((table:id::string)? table-change-track-table-cell) ;
common-draw-shape-with-text-and-styles-attlist ::= common-draw-shape-with-styles-attlist common-draw-text-style-name-attlist ;
number-text-style ::= number:text-style::(common-data-style-attlist style-text-properties? number-text? (number-text-content number-text?)* style-map*) ;
office-body ::= office:body::office-body-content ;
svg-font-face-uri ::= svg:font-face-uri::(common-svg-font-face-xlink-attlist svg-font-face-format*) ;
draw-g-attlist ::= (svg:y::coordinate)? ;
text-list-style-content ::= text:list-level-style-number::(text-list-level-style-attr text-list-level-style-number-attr style-list-level-properties? style-text-properties?) ;
 text-list-style-content ::= text:list-level-style-bullet::(text-list-level-style-attr text-list-level-style-bullet-attr style-list-level-properties? style-text-properties?) ;
 text-list-style-content ::= text:list-level-style-image::(text-list-level-style-attr text-list-level-style-image-attr style-list-level-properties?) ;
any-time ::= number-hours | number-am-pm | number-minutes | number-seconds ;
table-table-row-attlist ::= (table:number-rows-repeated::positiveInteger)? ;
 table-table-row-attlist ::= (table:style-name::styleNameRef)? ;
 table-table-row-attlist ::= (table:default-cell-style-name::styleNameRef)? ;
 table-table-row-attlist ::= (table:visibility::table-visibility-value)? ;
style-page-layout ::= style:page-layout::(style-page-layout-attlist style-page-layout-properties? style-header-style? style-footer-style?) ;
office-process-content ::= (office:process-content::boolean)? ;
form-date-attlist ::= (form:value::date)? ;
 form-date-attlist ::= (form:current-value::date)? ;
 form-date-attlist ::= (form:min-value::date)? ;
 form-date-attlist ::= (form:max-value::date)? ;
common-form-relative-image-position-attlist ::= ((form:image-position::"center")?) | (form:image-position::("start" | "end" | "top" | "bottom") (form:image-align::("start" | "center" | "end"))?) ;
table-insertion-cut-off ::= table:insertion-cut-off::table-insertion-cut-off-attlist ;
presentation-play ::= presentation:play::presentation-play-attlist ;
presentation-animations ::= presentation:animations::((presentation-animation-elements | presentation-animation-group)*) ;
style-header-footer-properties ::= style:header-footer-properties::style-header-footer-properties-content ;
common-value-attlist ::= (form:value::string)? ;
style-footnote-sep-attlist ::= (style:width::length)? (style:rel-width::percent)? (style:color::color)? (style:line-style::lineStyle)? (style:adjustment::("left" | "center" | "right"))? (style:distance-before-sep::length)? (style:distance-after-sep::length)? ;
table-first-row ::= table:first-row::common-table-template-attlist ;
text-list-header ::= text:list-header::text-list-item-content ;
style-list-level-properties-content ::= style-properties-content ;
style-page-layout-properties-content-strict ::= style-page-layout-properties-attlist style-page-layout-properties-elements ;
style-column-sep-attlist ::= (style:style::("none" | "solid" | "dotted" | "dashed" | "dot-dashed"))? ;
 style-column-sep-attlist ::= style:width::length ;
 style-column-sep-attlist ::= (style:height::percent)? ;
 style-column-sep-attlist ::= (style:vertical-align::("top" | "middle" | "bottom"))? ;
 style-column-sep-attlist ::= (style:color::color)? ;
text-user-index-entry-template ::= text:user-index-entry-template::(text-user-index-entry-template-attrs (text-index-entry-chapter | text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop)*) ;
table-database-source-table ::= table:database-source-query::table-database-source-query-attlist ;
table-table-cell-range-source-attlist ::= table:name::string ;
 table-table-cell-range-source-attlist ::= table:last-column-spanned::positiveInteger table:last-row-spanned::positiveInteger ;
common-form-control-attlist ::= (form:name::string)? ;
 common-form-control-attlist ::= (form:control-implementation::namespacedToken)? ;
common-svg-font-face-xlink-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? ;
draw-area-polygon ::= draw:area-polygon::(common-draw-area-attlist svg:x::coordinate svg:y::coordinate svg:width::length svg:height::length common-draw-viewbox-attlist common-draw-points-attlist svg-title? svg-desc? office-event-listeners?) ;
chart-stock-gain-marker ::= chart:stock-gain-marker::common-stock-marker-attlist ;
office-forms ::= (office:forms::(office-forms-attlist (form-form | xforms-model)*))? ;
common-restart-timing-attlist ::= (smil:restart::("never" | "always" | "whenNotActive" | "default"))? ;
form-properties ::= form:properties::(form-property+) ;
IDREFS ::= string() ;
common-maxlength-attlist ::= (form:max-length::nonNegativeInteger)? ;
draw-object-attlist ::= (draw:notify-on-update-of-ranges::string)? ;
common-rotation-angle-attlist ::= (style:rotation-angle::nonNegativeInteger)? ;
form-file-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist ;
common-readonly-attlist ::= (form:readonly::boolean)? ;
draw-measure ::= draw:measure::(draw-measure-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
draw-control ::= draw:control::(draw-control-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? draw-glue-point*) ;
table-table-column ::= table:table-column::table-table-column-attlist ;
text-sequence-ref-content ::= (text:reference-format::("page" | "chapter" | "direction" | "text" | "category-and-value" | "caption" | "value"))? ;
table-data-pilot-display-info ::= table:data-pilot-display-info::table-data-pilot-display-info-attlist ;
table-source-range-address ::= table:source-range-address::common-table-range-attlist ;
office-forms-attlist ::= (form:automatic-focus::boolean)? ;
 office-forms-attlist ::= (form:apply-design-mode::boolean)? ;
presentation-show ::= presentation:show::presentation-show-attlist ;
draw-plugin-attlist ::= (draw:mime-type::string())? ;
svg-stop ::= svg:stop::(svg:offset::(double | percent) (svg:stop-color::color)? (svg:stop-opacity::double)?) ;
table-named-expression ::= table:named-expression::table-named-expression-attlist ;
table-validation-attlist ::= table:name::string ;
 table-validation-attlist ::= (table:condition::string)? ;
 table-validation-attlist ::= (table:base-cell-address::cellAddress)? ;
 table-validation-attlist ::= (table:allow-empty-cell::boolean)? ;
 table-validation-attlist ::= (table:display-list::("none" | "unsorted" | "sort-ascending"))? ;
table-even-columns ::= table:even-columns::common-table-template-attlist ;
draw-page-thumbnail-attlist ::= (draw:page-number::positiveInteger)? ;
text-tab-attr ::= (text:tab-ref::nonNegativeInteger)? ;
text-style-name ::= (form:text-style-name::styleNameRef)? ;
text-table-of-content-source ::= text:table-of-content-source::(text-table-of-content-source-attlist text-index-title-template? text-table-of-content-entry-template* text-index-source-styles*) ;
form-hidden-attlist ::= form-control-attlist common-value-attlist ;
text-index-entry-tab-stop-attrs ::= (style:leader-char::character)? ;
 text-index-entry-tab-stop-attrs ::= (style:type::"right") | (style:type::"left" style:position::length) ;
table-source-cell-range ::= table:source-cell-range::(table-source-cell-range-attlist table-filter?) ;
fontFamilyGeneric ::= "roman" | "swiss" | "modern" | "decorative" | "script" | "system" ;
table-data-pilot-display-info-attlist ::= table:enabled::boolean ;
 table-data-pilot-display-info-attlist ::= table:data-field::string ;
 table-data-pilot-display-info-attlist ::= table:member-count::nonNegativeInteger ;
 table-data-pilot-display-info-attlist ::= table:display-member-mode::("from-top" | "from-bottom") ;
common-field-database-table-attlist ::= text:table-name::string ;
 common-field-database-table-attlist ::= (text:table-type::("table" | "query" | "command"))? ;
common-margin-attlist ::= (fo:margin::(nonNegativeLength | percent))? ;
custom-shape-type ::= "non-primitive" | string ;
common-spline-anim-value-attlist ::= (smil:keyTimes::string)? ;
 common-spline-anim-value-attlist ::= (smil:keySplines::string)? ;
table-odd-columns ::= table:odd-columns::common-table-template-attlist ;
common-draw-layer-name-attlist ::= (draw:layer::string())? ;
draw-rect-attlist ::= (draw:corner-radius::nonNegativeLength)? ;
chart-stock-loss-marker ::= chart:stock-loss-marker::common-stock-marker-attlist ;
common-field-display-value-formula-attlist ::= (text:display::("value" | "formula"))? ;
office-event-listeners ::= office:event-listeners::((script-event-listener | presentation-event-listener)*) ;
text-id ::= text:id::string ;
dr3d-sphere ::= dr3d:sphere::(dr3d-sphere-attlist common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-dr3d-transform-attlist) ;
text-table-of-content-source-attlist ::= (text:outline-level::positiveInteger)? ;
 text-table-of-content-source-attlist ::= (text:use-outline-level::boolean)? ;
 text-table-of-content-source-attlist ::= (text:use-index-marks::boolean)? ;
 text-table-of-content-source-attlist ::= (text:use-index-source-styles::boolean)? ;
 text-table-of-content-source-attlist ::= (text:index-scope::("document" | "chapter"))? ;
 text-table-of-content-source-attlist ::= (text:relative-tab-stop-position::boolean)? ;
style-text-properties ::= style:text-properties::style-text-properties-content ;
draw-equation ::= draw:equation::draw-equation-attlist ;
draw-object-ole-attlist ::= (draw:class-id::string())? ;
text-table-index-source ::= text:table-index-source::(text-illustration-index-source-attrs text-index-title-template? text-table-index-entry-template?) ;
office-automatic-styles ::= (office:automatic-styles::(styles style-page-layout*))? ;
animation-element ::= anim:animate::(common-anim-target-attlist common-anim-named-target-attlist common-anim-values-attlist common-anim-spline-mode-attlist common-spline-anim-value-attlist common-timing-attlist common-anim-add-accum-attlist) ;
 animation-element ::= anim:set::(common-anim-target-attlist common-anim-named-target-attlist common-anim-set-values-attlist common-timing-attlist common-anim-add-accum-attlist) ;
 animation-element ::= anim:animateMotion::(anim-animate-motion-attlist common-anim-target-attlist common-anim-named-target-attlist common-anim-add-accum-attlist common-anim-values-attlist common-timing-attlist common-spline-anim-value-attlist) ;
 animation-element ::= anim:animateColor::(common-anim-target-attlist common-anim-named-target-attlist common-anim-add-accum-attlist common-anim-values-attlist common-anim-spline-mode-attlist common-spline-anim-value-attlist anim-animate-color-attlist common-timing-attlist) ;
 animation-element ::= anim:animateTransform::(common-anim-target-attlist common-anim-named-target-attlist common-anim-add-accum-attlist common-anim-values-attlist anim-animate-transform-attlist common-timing-attlist) ;
 animation-element ::= anim:transitionFilter::(common-anim-target-attlist common-anim-add-accum-attlist common-anim-values-attlist common-anim-spline-mode-attlist anim-transition-filter-attlist common-timing-attlist) ;
 animation-element ::= anim:par::(common-anim-attlist common-timing-attlist common-endsync-timing-attlist animation-element*) ;
 animation-element ::= anim:seq::(common-anim-attlist common-endsync-timing-attlist common-timing-attlist animation-element*) ;
 animation-element ::= anim:iterate::(common-anim-attlist anim-iterate-attlist common-timing-attlist common-endsync-timing-attlist animation-element*) ;
 animation-element ::= anim:audio::(common-anim-attlist anim-audio-attlist common-basic-timing-attlist) ;
 animation-element ::= anim:command::(common-anim-attlist anim-command-attlist common-begin-end-timing-attlist common-anim-target-attlist (anim:param::(anim:name::string() anim:value::string()))*) ;
draw-polygon ::= draw:polygon::(common-draw-points-attlist common-draw-position-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
svg-title ::= svg:title::string() ;
anim-animate-color-attlist ::= (anim:color-interpolation::("rgb" | "hsl"))? ;
 anim-animate-color-attlist ::= (anim:color-interpolation-direction::("clockwise" | "counter-clockwise"))? ;
common-numeric-control-attlist ::= form-control-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-convert-empty-attlist common-data-field-attlist ;
office-image-content-epilogue ::= ε ;
style-section-properties-attlist ::= common-background-color-attlist ;
 style-section-properties-attlist ::= common-horizontal-margin-attlist ;
 style-section-properties-attlist ::= (style:protect::boolean)? ;
 style-section-properties-attlist ::= (text:dont-balance-text-columns::boolean)? ;
 style-section-properties-attlist ::= common-writing-mode-attlist ;
table-data-pilot-group ::= table:data-pilot-group::(table-data-pilot-group-attlist table-data-pilot-group-member+) ;
table-label-range ::= table:label-range::table-label-range-attlist ;
number-boolean ::= number:boolean::ε ;
form-radio-attlist ::= form-control-attlist current-selected common-disabled-attlist label common-printable-attlist selected common-tab-attlist common-title-attlist common-value-attlist common-data-field-attlist common-form-visual-effect-attlist common-form-relative-image-position-attlist ;
dr3d-cube ::= dr3d:cube::(dr3d-cube-attlist common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-dr3d-transform-attlist) ;
form-grid-attlist ::= form-control-attlist common-disabled-attlist common-printable-attlist common-tab-attlist common-title-attlist ;
table-scenario-attlist ::= table:scenario-ranges::cellRangeAddressList ;
 table-scenario-attlist ::= table:is-active::boolean ;
 table-scenario-attlist ::= (table:display-border::boolean)? ;
 table-scenario-attlist ::= (table:border-color::color)? ;
 table-scenario-attlist ::= (table:copy-back::boolean)? ;
 table-scenario-attlist ::= (table:copy-styles::boolean)? ;
 table-scenario-attlist ::= (table:copy-formulas::boolean)? ;
 table-scenario-attlist ::= (table:comment::string)? ;
 table-scenario-attlist ::= (table:protected::boolean)? ;
textEncoding ::= string() ;
common-control-id-attlist ::= form:id::ID ;
number-week-of-year ::= number:week-of-year::common-calendar-attlist ;
form-option ::= form:option::(form-option-attlist string()) ;
table-data-pilot-level-attlist ::= (table:show-empty::boolean)? ;
style-footer-style ::= style:footer-style::(style-header-footer-properties?) ;
presentation-event-listener ::= presentation:event-listener::(presentation-event-listener-attlist presentation-sound?) ;
draw-gradient ::= draw:gradient::(common-draw-gradient-attlist draw-gradient-attlist) ;
office-text-content-epilogue ::= table-functions ;
text-outline-level ::= (text:outline-level::positiveInteger)? ;
common-background-color-attlist ::= (fo:background-color::("transparent" | color))? ;
table-data-pilot-group-attlist ::= table:name::string ;
draw-frame-attlist ::= (draw:copy-of::string)? ;
common-restart-default-attlist ::= (smil:restartDefault::("never" | "always" | "whenNotActive" | "inherit"))? ;
chart-domain ::= chart:domain::((table:cell-range-address::cellRangeAddress)?) ;
table-data-pilot-group-member-attlist ::= table:name::string ;
form-option-attlist ::= current-selected selected label common-value-attlist ;
office-text-attlist ::= (text:global::boolean)? ;
 office-text-attlist ::= (text:use-soft-page-breaks::boolean)? ;
style-paragraph-properties ::= style:paragraph-properties::style-paragraph-properties-content ;
table-table-row-group ::= table:table-row-group::(table-table-row-group-attlist table-rows-and-groups) ;
text-file-name-attlist ::= (text:display::("full" | "path" | "name" | "name-and-extension"))? ;
 text-file-name-attlist ::= common-field-fixed-attlist ;
text-illustration-index-entry-template ::= text:illustration-index-entry-template::text-illustration-index-entry-content ;
presentation-event-listener-attlist ::= script:event-name::string ;
 presentation-event-listener-attlist ::= presentation:action::("none" | "previous-page" | "next-page" | "first-page" | "last-page" | "hide" | "stop" | "execute" | "show" | "verb" | "fade-out" | "sound") ;
 presentation-event-listener-attlist ::= (presentation:effect::presentationEffects)? ;
 presentation-event-listener-attlist ::= (presentation:direction::presentationEffectDirections)? ;
 presentation-event-listener-attlist ::= (presentation:speed::presentationSpeeds)? ;
 presentation-event-listener-attlist ::= (presentation:start-scale::percent)? ;
 presentation-event-listener-attlist ::= (xlink:href::anyURI)? (xlink:type::"simple")? (xlink:show::"embed")? (xlink:actuate::"onRequest")? ;
 presentation-event-listener-attlist ::= (presentation:verb::nonNegativeInteger)? ;
common-fill-default-attlist ::= (smil:fillDefault::("remove" | "freeze" | "hold" | "transition" | "auto" | "inherit"))? ;
nonNegativePixelLength ::= string() ;
office-chart-content-epilogue ::= table-functions ;
common-form-visual-effect-attlist ::= (form:visual-effect::("flat" | "3d"))? ;
horizontal-mirror ::= "horizontal" | "horizontal-on-odd" | "horizontal-on-even" ;
header-footer-content ::= (text-tracked-changes text-decls (text-h | text-p | text-list | table-table | text-section | text-table-of-content | text-illustration-index | text-table-index | text-object-index | text-user-index | text-alphabetical-index | text-bibliography | text-index-title | change-marks)*) | (style-region-left? style-region-center? style-region-right?) ;
style-page-layout-properties-attlist ::= (fo:page-width::length)? (fo:page-height::length)? ;
 style-page-layout-properties-attlist ::= common-num-format-attlist? common-num-format-prefix-suffix-attlist ;
 style-page-layout-properties-attlist ::= (style:paper-tray-name::("default" | string))? ;
 style-page-layout-properties-attlist ::= (style:print-orientation::("portrait" | "landscape"))? ;
 style-page-layout-properties-attlist ::= common-horizontal-margin-attlist common-vertical-margin-attlist common-margin-attlist ;
 style-page-layout-properties-attlist ::= common-border-attlist ;
 style-page-layout-properties-attlist ::= common-border-line-width-attlist ;
 style-page-layout-properties-attlist ::= common-padding-attlist ;
 style-page-layout-properties-attlist ::= common-shadow-attlist ;
 style-page-layout-properties-attlist ::= common-background-color-attlist ;
 style-page-layout-properties-attlist ::= (style:register-truth-ref-style-name::styleNameRef)? ;
 style-page-layout-properties-attlist ::= (style:print::(("headers" | "grid" | "annotations" | "objects" | "charts" | "drawings" | "formulas" | "zero-values")*))? ;
 style-page-layout-properties-attlist ::= (style:print-page-order::("ttb" | "ltr"))? ;
 style-page-layout-properties-attlist ::= (style:first-page-number::(positiveInteger | "continue"))? ;
 style-page-layout-properties-attlist ::= (style:scale-to::percent)? (style:scale-to-pages::positiveInteger)? ;
 style-page-layout-properties-attlist ::= (style:table-centering::("horizontal" | "vertical" | "both" | "none"))? ;
 style-page-layout-properties-attlist ::= (style:footnote-max-height::length)? ;
 style-page-layout-properties-attlist ::= common-writing-mode-attlist ;
 style-page-layout-properties-attlist ::= (style:layout-grid-mode::("none" | "line" | "both"))? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-base-height::length)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-ruby-height::length)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-lines::positiveInteger)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-color::color)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-ruby-below::boolean)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-print::boolean)? ;
 style-page-layout-properties-attlist ::= (style:layout-grid-display::boolean)? ;
draw-text-box-attlist ::= (draw:chain-next-name::string)? ;
 draw-text-box-attlist ::= (draw:corner-radius::nonNegativeLength)? ;
 draw-text-box-attlist ::= (fo:min-height::(length | percent))? (fo:min-width::(length | percent))? ;
 draw-text-box-attlist ::= (fo:max-height::(length | percent))? (fo:max-width::(length | percent))? ;
 draw-text-box-attlist ::= text-id? ;
tab-cycles ::= "records" | "current" | "page" ;
table-error-message ::= table:error-message::((table:title::string)? (table:display::boolean)? (table:message-type::("stop" | "warning" | "information"))? text-p*) ;
style-table-row-properties ::= style:table-row-properties::style-table-row-properties-content ;
style-paragraph-properties-attlist ::= (fo:line-height::("normal" | nonNegativeLength | percent))? ;
 style-paragraph-properties-attlist ::= (style:line-height-at-least::nonNegativeLength)? ;
 style-paragraph-properties-attlist ::= (style:line-spacing::length)? ;
 style-paragraph-properties-attlist ::= (style:font-independent-line-spacing::boolean)? ;
 style-paragraph-properties-attlist ::= common-text-align ;
 style-paragraph-properties-attlist ::= (fo:text-align-last::("start" | "center" | "justify"))? ;
 style-paragraph-properties-attlist ::= (style:justify-single-word::boolean)? ;
 style-paragraph-properties-attlist ::= (fo:keep-together::("auto" | "always"))? ;
 style-paragraph-properties-attlist ::= (fo:widows::nonNegativeInteger)? ;
 style-paragraph-properties-attlist ::= (fo:orphans::nonNegativeInteger)? ;
 style-paragraph-properties-attlist ::= (style:tab-stop-distance::nonNegativeLength)? ;
 style-paragraph-properties-attlist ::= (fo:hyphenation-keep::("auto" | "page"))? ;
 style-paragraph-properties-attlist ::= (fo:hyphenation-ladder-count::("no-limit" | positiveInteger))? ;
 style-paragraph-properties-attlist ::= (style:register-true::boolean)? ;
 style-paragraph-properties-attlist ::= common-horizontal-margin-attlist ;
 style-paragraph-properties-attlist ::= (fo:text-indent::(length | percent))? ;
 style-paragraph-properties-attlist ::= (style:auto-text-indent::boolean)? ;
 style-paragraph-properties-attlist ::= common-vertical-margin-attlist ;
 style-paragraph-properties-attlist ::= common-margin-attlist ;
 style-paragraph-properties-attlist ::= common-break-attlist ;
 style-paragraph-properties-attlist ::= common-background-color-attlist ;
 style-paragraph-properties-attlist ::= common-border-attlist ;
 style-paragraph-properties-attlist ::= common-border-line-width-attlist ;
 style-paragraph-properties-attlist ::= common-padding-attlist ;
 style-paragraph-properties-attlist ::= common-shadow-attlist ;
 style-paragraph-properties-attlist ::= common-keep-with-next-attlist ;
 style-paragraph-properties-attlist ::= (text:number-lines::boolean)? ;
 style-paragraph-properties-attlist ::= (text:line-number::nonNegativeInteger)? ;
 style-paragraph-properties-attlist ::= (style:text-autospace::("none" | "ideograph-alpha"))? ;
 style-paragraph-properties-attlist ::= (style:punctuation-wrap::("simple" | "hanging"))? ;
 style-paragraph-properties-attlist ::= (style:line-break::("normal" | "strict"))? ;
 style-paragraph-properties-attlist ::= (style:vertical-align::("top" | "middle" | "bottom" | "auto" | "baseline"))? ;
 style-paragraph-properties-attlist ::= common-writing-mode-attlist ;
 style-paragraph-properties-attlist ::= (style:writing-mode-automatic::boolean)? ;
 style-paragraph-properties-attlist ::= (style:snap-to-layout-grid::boolean)? ;
 style-paragraph-properties-attlist ::= common-page-number-attlist ;
 style-paragraph-properties-attlist ::= (style:background-transparency::percent)? ;
draw-regular-polygon ::= draw:regular-polygon::(draw-regular-polygon-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
table-table-row-group-attlist ::= (table:display::boolean)? ;
common-border-line-width-attlist ::= (style:border-line-width::borderWidths)? (style:border-line-width-top::borderWidths)? (style:border-line-width-bottom::borderWidths)? (style:border-line-width-left::borderWidths)? (style:border-line-width-right::borderWidths)? ;
office-presentation-attlist ::= ε ;
vertBackPos ::= "top" | "center" | "bottom" ;
draw-layer-attlist ::= draw:name::string ;
 draw-layer-attlist ::= (draw:protected::boolean)? ;
 draw-layer-attlist ::= (draw:display::("always" | "screen" | "printer" | "none"))? ;
draw-circle ::= draw:circle::(draw-circle-attlist common-draw-circle-ellipse-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
IDREF ::= string() ;
draw-page ::= draw:page::(common-presentation-header-footer-attlist draw-page-attlist office-forms? shape* (presentation-animations | animation-element)? presentation-notes?) ;
presentation-settings ::= (presentation:settings::(presentation-settings-attlist presentation-show*))? ;
config-items ::= (config-config-item | config-config-item-set | config-config-item-map-named | config-config-item-map-indexed)+ ;
style-text-properties-content-strict ::= style-text-properties-attlist style-text-properties-elements ;
text-table-index ::= text:table-index::(sectionAttr text-table-index-source text-index-body) ;
pathData ::= string() ;
text-outline-level-style-attlist ::= text:level::positiveInteger ;
 text-outline-level-style-attlist ::= (text:style-name::styleNameRef)? ;
 text-outline-level-style-attlist ::= common-num-format-attlist common-num-format-prefix-suffix-attlist ;
 text-outline-level-style-attlist ::= (text:display-levels::positiveInteger)? ;
 text-outline-level-style-attlist ::= (text:start-value::positiveInteger)? ;
table-data-pilot-subtotal-attlist ::= table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string) ;
common-anim-values-attlist ::= (smil:values::string)? ;
 common-anim-values-attlist ::= (anim:formula::string)? ;
 common-anim-values-attlist ::= common-anim-set-values-attlist (smil:from::string)? (smil:by::string)? ;
table-table-template-attlist ::= text:name::string ;
 table-table-template-attlist ::= text:first-row-start-column::rowOrCol ;
 table-table-template-attlist ::= text:first-row-end-column::rowOrCol ;
 table-table-template-attlist ::= text:last-row-start-column::rowOrCol ;
 table-table-template-attlist ::= text:last-row-end-column::rowOrCol ;
office-text-content-prelude ::= office-forms text-tracked-changes text-decls table-decls ;
draw-hatch-attlist ::= draw:name::styleName ;
 draw-hatch-attlist ::= (draw:display-name::string)? ;
 draw-hatch-attlist ::= draw:style::("single" | "double" | "triple") ;
 draw-hatch-attlist ::= (draw:color::color)? ;
 draw-hatch-attlist ::= (draw:distance::length)? ;
 draw-hatch-attlist ::= (draw:rotation::integer)? ;
presentation-settings-attlist ::= (presentation:start-page::string)? ;
 presentation-settings-attlist ::= (presentation:show::string)? ;
 presentation-settings-attlist ::= (presentation:full-screen::boolean)? ;
 presentation-settings-attlist ::= (presentation:endless::boolean)? ;
 presentation-settings-attlist ::= (presentation:pause::duration)? ;
 presentation-settings-attlist ::= (presentation:show-logo::boolean)? ;
 presentation-settings-attlist ::= (presentation:force-manual::boolean)? ;
 presentation-settings-attlist ::= (presentation:mouse-visible::boolean)? ;
 presentation-settings-attlist ::= (presentation:mouse-as-pen::boolean)? ;
 presentation-settings-attlist ::= (presentation:start-with-navigator::boolean)? ;
 presentation-settings-attlist ::= (presentation:animations::("enabled" | "disabled"))? ;
 presentation-settings-attlist ::= (presentation:transition-on-click::("enabled" | "disabled"))? ;
 presentation-settings-attlist ::= (presentation:stay-on-top::boolean)? ;
 presentation-settings-attlist ::= (presentation:show-end-of-presentation-slide::boolean)? ;
dr3d-light ::= dr3d:light::dr3d-light-attlist ;
common-draw-shape-with-styles-attlist ::= common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-draw-transform-attlist common-draw-name-attlist common-text-spreadsheet-shape-attlist ;
number-day-of-week-attlist ::= (number:style::("short" | "long"))? ;
number-and-text ::= number-number number-text? ;
common-keep-with-next-attlist ::= (fo:keep-with-next::("auto" | "always"))? ;
languageCode ::= string() ;
common-text-anchor-attlist ::= (text:anchor-type::("page" | "frame" | "paragraph" | "char" | "as-char"))? ;
 common-text-anchor-attlist ::= (text:anchor-page-number::positiveInteger)? ;
common-field-num-format-attlist ::= common-num-format-attlist? ;
presentation-show-shape ::= presentation:show-shape::(common-presentation-effect-attlist presentation-sound?) ;
table-sort-groups ::= table:sort-groups::table-sort-groups-attlist ;
text-object-index ::= text:object-index::(sectionAttr text-object-index-source text-index-body) ;
table-insertion-attlist ::= table:type::("row" | "column" | "table") ;
 table-insertion-attlist ::= table:position::integer ;
 table-insertion-attlist ::= (table:count::positiveInteger)? ;
 table-insertion-attlist ::= (table:table::integer)? ;
table-filter-and ::= table:filter-and::((table-filter-or | table-filter-condition)+) ;
office-document-common-attrs ::= (office:version::string)? ;
common-draw-style-name-attlist ::= ((draw:style-name::styleNameRef)? (draw:class-names::styleNameRefs)?) | ((presentation:style-name::styleNameRef)? (presentation:class-names::styleNameRefs)?) ;
text-bibliography-configuration-attlist ::= (text:prefix::string)? (text:suffix::string)? ;
 text-bibliography-configuration-attlist ::= (text:numbered-entries::boolean)? ;
 text-bibliography-configuration-attlist ::= (text:sort-by-position::boolean)? (fo:language::languageCode)? (fo:country::countryCode)? (text:sort-algorithm::string)? ;
chart-floor ::= chart:floor::chart-floor-attlist ;
office-master-styles ::= (office:master-styles::(style-master-page* style-handout-master? draw-layer-set?))? ;
table-table-header-rows ::= table:table-header-rows::((text-soft-page-break? table-table-row)+) ;
text-list-level-style-image-attr ::= common-draw-data-attlist | office-binary-data ;
table-movement-cut-off-attlist ::= (table:position::integer) | (table:start-position::integer table:end-position::integer) ;
style-table-column-properties-elements ::= ε ;
table-table-cell-attlist ::= (table:number-columns-repeated::positiveInteger)? ;
 table-table-cell-attlist ::= (table:style-name::styleNameRef)? ;
 table-table-cell-attlist ::= (table:content-validation-name::string)? ;
 table-table-cell-attlist ::= (table:formula::string)? ;
 table-table-cell-attlist ::= common-value-and-type-attlist? ;
 table-table-cell-attlist ::= (table:protect::boolean)? ;
style-list-level-properties ::= style:list-level-properties::style-list-level-properties-content ;
lineType ::= "none" | "single" | "double" ;
number-minutes-attlist ::= (number:style::("short" | "long"))? ;
table-change-deletion ::= table:change-deletion::((table:id::string)?) ;
timeOrDateTime ::= string() ;
table-data-pilot-layout-info-attlist ::= table:layout-mode::("tabular-layout" | "outline-subtotals-top" | "outline-subtotals-bottom") ;
 table-data-pilot-layout-info-attlist ::= table:add-empty-lines::boolean ;
table-filter-attlist ::= (table:target-range-address::cellRangeAddress)? ;
 table-filter-attlist ::= (table:condition-source::("self" | "cell-range"))? ;
 table-filter-attlist ::= (table:condition-source-range-address::cellRangeAddress)? ;
 table-filter-attlist ::= (table:display-duplicates::boolean)? ;
draw-ellipse-attlist ::= (svg:rx::length svg:ry::length)? ;
table-table-column-group ::= table:table-column-group::(table-table-column-group-attlist table-columns-and-groups) ;
text-index-entry-link-start ::= text:index-entry-link-start::((text:style-name::styleNameRef)?) ;
common-convert-empty-attlist ::= (form:convert-empty-to-null::boolean)? ;
table-last-row ::= table:last-row::common-table-template-attlist ;
style-style-content ::= style:family::"text" style-text-properties? ;
 style-style-content ::= style:family::"paragraph" style-paragraph-properties? style-text-properties? ;
 style-style-content ::= style:family::"section" style-section-properties? ;
 style-style-content ::= style:family::"ruby" style-ruby-properties? ;
 style-style-content ::= style:family::"table" style-table-properties? ;
 style-style-content ::= style:family::"table-column" style-table-column-properties? ;
 style-style-content ::= style:family::"table-row" style-table-row-properties? ;
 style-style-content ::= style:family::"table-cell" style-table-cell-properties? style-paragraph-properties? style-text-properties? ;
 style-style-content ::= style:family::("graphic" | "presentation") style-graphic-properties? style-paragraph-properties? style-text-properties? ;
 style-style-content ::= style:family::"drawing-page" style-drawing-page-properties? ;
 style-style-content ::= style:family::"chart" style-chart-properties? style-graphic-properties? style-paragraph-properties? style-text-properties? ;
common-format-source-attlist ::= (number:format-source::("fixed" | "language"))? ;
table-change-track-table-cell ::= table:change-track-table-cell::(table-change-track-table-cell-attlist text-p*) ;
text-list ::= text:list::(text-list-attr text-list-header? text-list-item*) ;
common-table-cell-address-attlist ::= table:column::integer table:row::integer table:table::integer ;
common-anim-set-values-attlist ::= (smil:to::string)? ;
table-table-column-group-attlist ::= (table:display::boolean)? ;
style-footer ::= style:footer::(common-style-header-footer-attlist header-footer-content) ;
fontVariant ::= "normal" | "small-caps" ;
text-bibliography-entry-template-attrs ::= text:bibliography-type::text-bibliography-types ;
 text-bibliography-entry-template-attrs ::= text:style-name::styleNameRef ;
number-year-attlist ::= (number:style::("short" | "long"))? ;
svg-font-face-format ::= svg:font-face-format::((svg:string::string())?) ;
style-map-attlist ::= style:condition::string ;
 style-map-attlist ::= style:apply-style-name::styleNameRef ;
 style-map-attlist ::= (style:base-cell-address::cellAddress)? ;
number-text ::= number:text::string() ;
text-index-entry-tab-stop ::= text:index-entry-tab-stop::((text:style-name::styleNameRef)? text-index-entry-tab-stop-attrs) ;
table-sort-attlist ::= (table:bind-styles-to-content::boolean)? ;
 table-sort-attlist ::= (table:target-range-address::cellRangeAddress)? ;
 table-sort-attlist ::= (table:case-sensitive::boolean)? ;
 table-sort-attlist ::= (table:language::languageCode)? ;
 table-sort-attlist ::= (table:country::countryCode)? ;
 table-sort-attlist ::= (table:algorithm::string)? ;
chart-chart ::= chart:chart::(chart-chart-attlist chart-title? chart-subtitle? chart-footer? chart-legend? chart-plot-area table-table?) ;
style-table-properties ::= style:table-properties::style-table-properties-content ;
office-spreadsheet-attlist ::= (table:structure-protected::boolean)? (table:protection-key::string)? ;
style-chart-properties-content-strict ::= style-chart-properties-attlist style-chart-properties-elements ;
style-header-left ::= style:header-left::(common-style-header-footer-attlist header-footer-content) ;
common-value-type-attlist ::= office:value-type::valueType ;
table-rows-no-group ::= (table-rows (table-table-header-rows table-rows?)?) | (table-table-header-rows table-rows?) ;
common-field-database-name ::= (text:database-name::string)? ;
 common-field-database-name ::= form-connection-resource ;
chart-subtitle ::= chart:subtitle::(chart-title-attlist text-p?) ;
table-filter-condition ::= table:filter-condition::table-filter-condition-attlist ;
style-region-left ::= style:region-left::region-content ;
text-soft-page-break ::= text:soft-page-break::ε ;
common-draw-position-attlist ::= (svg:x::coordinate)? (svg:y::coordinate)? ;
common-padding-attlist ::= (fo:padding::nonNegativeLength)? (fo:padding-top::nonNegativeLength)? (fo:padding-bottom::nonNegativeLength)? (fo:padding-left::nonNegativeLength)? (fo:padding-right::nonNegativeLength)? ;
draw-contour-path ::= draw:contour-path::(common-contour-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-path-data-attlist) ;
style-table-properties-attlist ::= (style:width::positiveLength)? (style:rel-width::percent)? ;
 style-table-properties-attlist ::= (table:align::("left" | "center" | "right" | "margins"))? ;
 style-table-properties-attlist ::= common-horizontal-margin-attlist ;
 style-table-properties-attlist ::= common-vertical-margin-attlist ;
 style-table-properties-attlist ::= common-margin-attlist ;
 style-table-properties-attlist ::= common-page-number-attlist ;
 style-table-properties-attlist ::= common-break-attlist ;
 style-table-properties-attlist ::= common-background-color-attlist ;
 style-table-properties-attlist ::= common-shadow-attlist ;
 style-table-properties-attlist ::= common-keep-with-next-attlist ;
 style-table-properties-attlist ::= (style:may-break-between-rows::boolean)? ;
 style-table-properties-attlist ::= (table:border-model::("collapsing" | "separating"))? ;
 style-table-properties-attlist ::= common-writing-mode-attlist ;
 style-table-properties-attlist ::= (table:display::boolean)? ;
text-alphabetical-index-source-attrs ::= text-index-scope-attr text-relative-tab-stop-position-attr ;
 text-alphabetical-index-source-attrs ::= (text:ignore-case::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:main-entry-style-name::styleNameRef)? ;
 text-alphabetical-index-source-attrs ::= (text:alphabetical-separators::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:combine-entries::boolean)? (text:combine-entries-with-dash::boolean)? (text:combine-entries-with-pp::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:use-keys-as-entries::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:capitalize-entries::boolean)? ;
 text-alphabetical-index-source-attrs ::= (text:comma-separated::boolean)? ;
 text-alphabetical-index-source-attrs ::= (fo:language::languageCode)? ;
 text-alphabetical-index-source-attrs ::= (fo:country::countryCode)? ;
 text-alphabetical-index-source-attrs ::= (text:sort-algorithm::string)? ;
text-list-attr ::= (text:style-name::styleNameRef)? ;
 text-list-attr ::= (text:continue-numbering::boolean)? ;
form-form-attlist ::= (xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")?)? ;
 form-form-attlist ::= (office:target-frame::targetFrameName)? ;
 form-form-attlist ::= (form:method::("get" | "post" | string))? ;
 form-form-attlist ::= (form:enctype::string)? ;
 form-form-attlist ::= (form:allow-deletes::boolean)? ;
 form-form-attlist ::= (form:allow-inserts::boolean)? ;
 form-form-attlist ::= (form:allow-updates::boolean)? ;
 form-form-attlist ::= (form:apply-filter::boolean)? ;
 form-form-attlist ::= (form:command-type::("table" | "query" | "command"))? ;
 form-form-attlist ::= (form:command::string())? ;
 form-form-attlist ::= (form:datasource::(anyURI | string))? ;
 form-form-attlist ::= (form:master-fields::string)? ;
 form-form-attlist ::= (form:detail-fields::string)? ;
 form-form-attlist ::= (form:escape-processing::boolean)? ;
 form-form-attlist ::= (form:filter::string)? ;
 form-form-attlist ::= (form:ignore-result::boolean)? ;
 form-form-attlist ::= (form:navigation-mode::navigation)? ;
 form-form-attlist ::= (form:order::string)? ;
 form-form-attlist ::= (form:tab-cycle::tab-cycles)? ;
table-table-columns ::= table:table-columns::(table-table-column+) ;
text-tracked-changes-attr ::= (text:track-changes::boolean)? ;
style-table-properties-content-strict ::= style-table-properties-attlist style-table-properties-elements ;
ID ::= string() ;
table-table-header-columns ::= table:table-header-columns::(table-table-column+) ;
table-help-message ::= table:help-message::((table:title::string)? (table:display::boolean)? text-p*) ;
table-filter-or ::= table:filter-or::((table-filter-and | table-filter-condition)+) ;
common-printable-attlist ::= (form:printable::boolean)? ;
heading-attrs ::= text:outline-level::positiveInteger ;
 heading-attrs ::= (text:restart-numbering::boolean)? ;
 heading-attrs ::= (text:start-value::nonNegativeInteger)? ;
 heading-attrs ::= (text:is-list-header::boolean)? ;
form-frame-attlist ::= form-control-attlist common-disabled-attlist for label common-printable-attlist common-title-attlist ;
table-data-pilot-sort-info-attlist ::= (table:sort-mode::"data" table:data-field::string) | (table:sort-mode::("none" | "manual" | "name")) ;
 table-data-pilot-sort-info-attlist ::= table:order::("ascending" | "descending") ;
common-time-manip-attlist ::= (smil:accelerate::double)? ;
 common-time-manip-attlist ::= (smil:decelerate::double)? ;
 common-time-manip-attlist ::= (smil:autoReverse::boolean)? ;
form-textarea-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist ;
text-numbered-paragraph-attr ::= (text:level::positiveInteger)? ;
 text-numbered-paragraph-attr ::= text-list-attr ;
 text-numbered-paragraph-attr ::= text-list-item-attr ;
draw-glue-point-attlist ::= draw:id::nonNegativeInteger ;
 draw-glue-point-attlist ::= svg:x::(distance | percent) svg:y::(distance | percent) ;
 draw-glue-point-attlist ::= (draw:align::("top-left" | "top" | "top-right" | "left" | "center" | "right" | "bottom-left" | "bottom-right"))? ;
table-data-pilot-field-attlist ::= table:source-field-name::string ;
 table-data-pilot-field-attlist ::= (table:orientation::("row" | "column" | "data" | "hidden")) | (table:orientation::"page" table:selected-page::string) ;
 table-data-pilot-field-attlist ::= (table:is-data-layout-field::string)? ;
 table-data-pilot-field-attlist ::= (table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string))? ;
 table-data-pilot-field-attlist ::= (table:used-hierarchy::integer)? ;
office-styles ::= (office:styles::(styles style-default-style* text-outline-style? text-notes-configuration* text-bibliography-configuration? text-linenumbering-configuration? draw-gradient* svg-linearGradient* svg-radialGradient* draw-hatch* draw-fill-image* draw-marker* draw-stroke-dash* draw-opacity* style-presentation-page-layout*))? ;
style-drawing-page-properties-content ::= style-properties-content ;
common-draw-viewbox-attlist ::= svg:viewBox::(integer integer integer integer) ;
namespacedToken ::= string() ;
table-table ::= table:table::(table-table-attlist table-table-source? office-dde-source? table-scenario? office-forms? table-shapes? table-columns-and-groups table-rows-and-groups) ;
style-footnote-sep ::= (style:footnote-sep::style-footnote-sep-attlist)? ;
style-header-style ::= style:header-style::(style-header-footer-properties?) ;
anim-audio-attlist ::= (xlink:href::anyURI)? ;
 anim-audio-attlist ::= (anim:audio-level::double)? ;
office-document ::= office:document::(office-document-attrs office-document-common-attrs office-meta office-settings office-scripts office-font-face-decls office-styles office-automatic-styles office-master-styles office-body) ;
number-day-attlist ::= (number:style::("short" | "long"))? ;
office-drawing-content-epilogue ::= table-functions ;
common-horizontal-margin-attlist ::= (fo:margin-left::(length | percent))? (fo:margin-right::(length | percent))? ;
text-page-continuation-attlist ::= text:select-page::("previous" | "next") ;
 text-page-continuation-attlist ::= (text:string-value::string)? ;
text-user-index-entry-template-attrs ::= text:outline-level::positiveInteger ;
 text-user-index-entry-template-attrs ::= text:style-name::styleNameRef ;
text-illustration-index-entry-content ::= text-illustration-index-entry-template-attrs (text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop)* ;
positiveInteger ::= integer() ;
common-anim-add-accum-attlist ::= (smil:accumulate::("none" | "sum"))? ;
 common-anim-add-accum-attlist ::= (smil:additive::("replace" | "sum"))? ;
draw-applet ::= draw:applet::(draw-applet-attlist common-draw-data-attlist? draw-param*) ;
text-database-display-attlist ::= common-field-database-table ;
 text-database-display-attlist ::= common-field-data-style-name-attlist ;
 text-database-display-attlist ::= text:column-name::string ;
number-embedded-text-attlist ::= number:position::integer ;
style-master-page ::= style:master-page::(style-master-page-attlist (style-header style-header-left?)? (style-footer style-footer-left?)? office-forms? style-style* shape* presentation-notes?) ;
style-handout-master-attlist ::= (presentation:presentation-page-layout-name::styleNameRef)? ;
 style-handout-master-attlist ::= style:page-layout-name::styleNameRef ;
 style-handout-master-attlist ::= (draw:style-name::styleNameRef)? ;
text-linenumbering-separator ::= text:linenumbering-separator::((text:increment::nonNegativeInteger)? string()) ;
text-index-title ::= text:index-title::(sectionAttr index-content-main*) ;
text-common-ref-content ::= string() ;
 text-common-ref-content ::= (text:ref-name::string)? ;
office-script ::= office:script::(office-script-attlist string()? anyElements string()?) ;
text-alphabetical-index-entry-template-attrs ::= text:outline-level::("1" | "2" | "3" | "separator") ;
 text-alphabetical-index-entry-template-attrs ::= text:style-name::styleNameRef ;
presentation-play-attlist ::= draw:shape-id::IDREF (presentation:speed::presentationSpeeds)? ;
table-insertion-cut-off-attlist ::= table:id::string ;
 table-insertion-cut-off-attlist ::= table:position::integer ;
svg-radialGradient ::= svg:radialGradient::(common-svg-gradient-attlist (svg:cx::(coordinate | percent))? (svg:cy::(coordinate | percent))? (svg:r::(coordinate | percent))? (svg:fx::(coordinate | percent))? (svg:fy::(coordinate | percent))? svg-stop*) ;
common-anim-spline-mode-attlist ::= (smil:calcMode::("discrete" | "linear" | "paced" | "spline"))? ;
table-cell-range-source ::= table:cell-range-source::(table-table-cell-range-source-attlist table-linked-source-attlist) ;
draw-connector-attlist ::= (draw:type::("standard" | "lines" | "line" | "curve"))? ;
 draw-connector-attlist ::= (svg:x1::coordinate svg:y1::coordinate)? ;
 draw-connector-attlist ::= (draw:start-shape::IDREF)? ;
 draw-connector-attlist ::= (draw:start-glue-point::nonNegativeInteger)? ;
 draw-connector-attlist ::= (svg:x2::coordinate svg:y2::coordinate)? ;
 draw-connector-attlist ::= (draw:end-shape::IDREF)? ;
 draw-connector-attlist ::= (draw:end-glue-point::nonNegativeInteger)? ;
 draw-connector-attlist ::= (draw:line-skew::(length (length length?)?))? ;
table-highlighted-range-attlist ::= (table:cell-range-address::cellRangeAddress)? ;
 table-highlighted-range-attlist ::= table:direction::("from-another-table" | "to-another-table" | "from-same-table") ;
 table-highlighted-range-attlist ::= (table:contains-error::boolean)? ;
button-type ::= (form:button-type::types)? ;
table-null-date ::= table:null-date::((table:value-type::valueType)? (table:date-value::date)?) ;
svg-definition-src ::= svg:definition-src::common-svg-font-face-xlink-attlist ;
style-master-page-attlist ::= style:name::styleName ;
 style-master-page-attlist ::= (style:display-name::string)? ;
 style-master-page-attlist ::= style:page-layout-name::styleNameRef ;
 style-master-page-attlist ::= (draw:style-name::styleNameRef)? ;
 style-master-page-attlist ::= (style:next-style-name::styleNameRef)? ;
text-user-index ::= text:user-index::(sectionAttr text-user-index-source text-index-body) ;
number-month-attlist ::= (number:textual::boolean)? ;
 number-month-attlist ::= (number:possessive-form::boolean)? ;
 number-month-attlist ::= (number:style::("short" | "long"))? ;
chart-data-point-attlist ::= (chart:repeated::nonNegativeInteger)? ;
 chart-data-point-attlist ::= (chart:style-name::styleNameRef)? ;
text-index-entry-bibliography-attrs ::= (text:style-name::styleNameRef)? ;
 text-index-entry-bibliography-attrs ::= text:bibliography-data-field::("address" | "annote" | "author" | "bibliography-type" | "booktitle" | "chapter" | "custom1" | "custom2" | "custom3" | "custom4" | "custom5" | "edition" | "editor" | "howpublished" | "identifier" | "institution" | "isbn" | "issn" | "journal" | "month" | "note" | "number" | "organizations" | "pages" | "publisher" | "report-type" | "school" | "series" | "title" | "url" | "volume" | "year") ;
dateOrDateTime ::= string() ;
text-table-of-content-children ::= text-index-entry-chapter | text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop | text-index-entry-link-start | text-index-entry-link-end ;
draw-marker ::= draw:marker::(draw-marker-attlist common-draw-viewbox-attlist common-draw-path-data-attlist) ;
common-data-style-attlist ::= style:name::styleName ;
 common-data-style-attlist ::= (number:language::languageCode)? ;
 common-data-style-attlist ::= (number:country::countryCode)? ;
 common-data-style-attlist ::= (number:title::string())? ;
 common-data-style-attlist ::= (style:volatile::boolean)? ;
 common-data-style-attlist ::= (number:transliteration-format::string)? ;
 common-data-style-attlist ::= (number:transliteration-language::countryCode)? ;
 common-data-style-attlist ::= (number:transliteration-country::countryCode)? ;
 common-data-style-attlist ::= (number:transliteration-style::("short" | "medium" | "long"))? ;
table-database-source-table-attlist ::= table:database-name::string ;
 table-database-source-table-attlist ::= table:database-table-name::string ;
office-spreadsheet-content-main ::= table-table* ;
dr3d-scene ::= dr3d:scene::(dr3d-scene-attlist common-draw-position-attlist common-draw-size-attlist common-draw-style-name-attlist common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-text-spreadsheet-shape-attlist common-dr3d-transform-attlist common-draw-caption-id-attlist svg-title? svg-desc? dr3d-light* shapes3d*) ;
table-columns ::= table-table-columns | (table-table-column+) ;
dc-creator ::= dc:creator::string ;
image-data ::= (form:image-data::anyURI)? ;
chart-legend ::= chart:legend::chart-legend-attlist ;
number-scientific-number-attlist ::= (number:min-exponent-digits::integer)? ;
text-section-source-attr ::= (xlink:href::anyURI (xlink:type::"simple")? (xlink:show::"embed")?)? ;
 text-section-source-attr ::= (text:section-name::string)? ;
 text-section-source-attr ::= (text:filter-name::string)? ;
gradient-style ::= "linear" | "axial" | "radial" | "ellipsoid" | "square" | "rectangular" ;
relativeLength ::= string() ;
office-annotation-attlist ::= (office:display::boolean)? ;
common-dr3d-transform-attlist ::= (dr3d:transform::string())? ;
common-field-database-table ::= common-field-database-table-attlist common-field-database-name ;
number-era ::= number:era::(number-era-attlist common-calendar-attlist) ;
dr3d-scene-attlist ::= (dr3d:vrp::vector3D)? (dr3d:vpn::vector3D)? (dr3d:vup::vector3D)? ;
 dr3d-scene-attlist ::= (dr3d:projection::("parallel" | "perspective"))? ;
 dr3d-scene-attlist ::= (dr3d:distance::length)? ;
 dr3d-scene-attlist ::= (dr3d:focal-length::length)? ;
 dr3d-scene-attlist ::= (dr3d:shadow-slant::nonNegativeInteger)? ;
 dr3d-scene-attlist ::= (dr3d:shade-mode::("flat" | "phong" | "gouraud" | "draft"))? ;
 dr3d-scene-attlist ::= (dr3d:ambient-color::color)? ;
 dr3d-scene-attlist ::= (dr3d:lighting-mode::boolean)? ;
draw-rect ::= draw:rect::(draw-rect-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
text-changed-region ::= text:changed-region::(text-changed-region-attr text-changed-region-content) ;
text-alphabetical-index-source ::= text:alphabetical-index-source::(text-alphabetical-index-source-attrs text-index-title-template? text-alphabetical-index-entry-template*) ;
style-chart-properties-content ::= style-properties-content ;
common-draw-z-index-attlist ::= (draw:z-index::nonNegativeInteger)? ;
table-dependencies ::= table:dependencies::(table-dependency+) ;
chart-grid-attlist ::= (chart:class::("major" | "minor"))? ;
 chart-grid-attlist ::= (chart:style-name::styleNameRef)? ;
table-target-range-address ::= table:target-range-address::common-table-range-attlist ;
style-graphic-properties-attlist ::= (draw:stroke::("none" | "dash" | "solid"))? ;
 style-graphic-properties-attlist ::= (draw:stroke-dash::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:stroke-dash-names::styleNameRefs)? ;
 style-graphic-properties-attlist ::= (svg:stroke-width::length)? ;
 style-graphic-properties-attlist ::= (svg:stroke-color::color)? ;
 style-graphic-properties-attlist ::= (draw:marker-start::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:marker-end::styleNameRef)? ;
 style-graphic-properties-attlist ::= (draw:marker-start-width::length)? ;
 style-graphic-properties-attlist ::= (draw:marker-end-width::length)? ;
 style-graphic-properties-attlist ::= (draw:marker-start-center::boolean)? ;
 style-graphic-properties-attlist ::= (draw:marker-end-center::boolean)? ;
 style-graphic-properties-attlist ::= (svg:stroke-opacity::(string() | percent))? ;
 style-graphic-properties-attlist ::= (draw:stroke-linejoin::("miter" | "round" | "bevel" | "middle" | "none" | "inherit"))? ;
 style-graphic-properties-attlist ::= (draw:symbol-color::color)? ;
 style-graphic-properties-attlist ::= (text:animation::("none" | "scroll" | "alternate" | "slide"))? ;
 style-graphic-properties-attlist ::= (text:animation-direction::("left" | "right" | "up" | "down"))? ;
 style-graphic-properties-attlist ::= (text:animation-start-inside::boolean)? ;
 style-graphic-properties-attlist ::= (text:animation-stop-inside::boolean)? ;
 style-graphic-properties-attlist ::= (text:animation-repeat::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (text:animation-delay::duration)? ;
 style-graphic-properties-attlist ::= (text:animation-steps::length)? ;
 style-graphic-properties-attlist ::= (draw:auto-grow-width::boolean)? (draw:auto-grow-height::boolean)? ;
 style-graphic-properties-attlist ::= (draw:fit-to-size::boolean)? ;
 style-graphic-properties-attlist ::= (draw:fit-to-contour::boolean)? ;
 style-graphic-properties-attlist ::= (draw:textarea-vertical-align::("top" | "middle" | "bottom" | "justify"))? ;
 style-graphic-properties-attlist ::= (draw:textarea-horizontal-align::("left" | "center" | "right" | "justify"))? ;
 style-graphic-properties-attlist ::= (fo:wrap-option::("no-wrap" | "wrap"))? ;
 style-graphic-properties-attlist ::= (draw:color-mode::("greyscale" | "mono" | "watermark" | "standard"))? ;
 style-graphic-properties-attlist ::= (draw:color-inversion::boolean)? ;
 style-graphic-properties-attlist ::= (draw:luminance::percent)? ;
 style-graphic-properties-attlist ::= (draw:contrast::percent)? ;
 style-graphic-properties-attlist ::= (draw:gamma::percent)? ;
 style-graphic-properties-attlist ::= (draw:red::percent)? ;
 style-graphic-properties-attlist ::= (draw:green::percent)? ;
 style-graphic-properties-attlist ::= (draw:blue::percent)? ;
 style-graphic-properties-attlist ::= (draw:image-opacity::percent)? ;
 style-graphic-properties-attlist ::= (draw:shadow::("visible" | "hidden"))? ;
 style-graphic-properties-attlist ::= (draw:shadow-offset-x::length)? (draw:shadow-offset-y::length)? ;
 style-graphic-properties-attlist ::= (draw:shadow-color::color)? ;
 style-graphic-properties-attlist ::= (draw:shadow-opacity::percent)? ;
 style-graphic-properties-attlist ::= (draw:start-line-spacing-horizontal::distance)? (draw:start-line-spacing-vertical::distance)? ;
 style-graphic-properties-attlist ::= (draw:end-line-spacing-horizontal::distance)? (draw:end-line-spacing-vertical::distance)? ;
 style-graphic-properties-attlist ::= (draw:line-distance::distance)? ;
 style-graphic-properties-attlist ::= (draw:guide-overhang::length)? ;
 style-graphic-properties-attlist ::= (draw:guide-distance::distance)? ;
 style-graphic-properties-attlist ::= (draw:start-guide::length)? ;
 style-graphic-properties-attlist ::= (draw:end-guide::length)? ;
 style-graphic-properties-attlist ::= (draw:placing::("below" | "above"))? ;
 style-graphic-properties-attlist ::= (draw:parallel::boolean)? ;
 style-graphic-properties-attlist ::= (draw:measure-align::("automatic" | "left-outside" | "inside" | "right-outside"))? (draw:measure-vertical-align::("automatic" | "above" | "below" | "center"))? ;
 style-graphic-properties-attlist ::= (draw:unit::("automatic" | "mm" | "cm" | "m" | "km" | "pt" | "pc" | "inch" | "ft" | "mi"))? ;
 style-graphic-properties-attlist ::= (draw:show-unit::boolean)? ;
 style-graphic-properties-attlist ::= (draw:decimal-places::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (draw:caption-type::("straight-line" | "angled-line" | "angled-connector-line"))? ;
 style-graphic-properties-attlist ::= (draw:caption-angle-type::("fixed" | "free"))? ;
 style-graphic-properties-attlist ::= (draw:caption-angle::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (draw:caption-gap::distance)? ;
 style-graphic-properties-attlist ::= (draw:caption-escape-direction::("horizontal" | "vertical" | "auto"))? ;
 style-graphic-properties-attlist ::= (draw:caption-escape::(length | percent))? ;
 style-graphic-properties-attlist ::= (draw:caption-line-length::length)? ;
 style-graphic-properties-attlist ::= (draw:caption-fit-line-length::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:horizontal-segments::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:vertical-segments::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:edge-rounding::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:edge-rounding-mode::("correct" | "attractive"))? ;
 style-graphic-properties-attlist ::= (dr3d:back-scale::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:depth::length)? ;
 style-graphic-properties-attlist ::= (dr3d:backface-culling::("enabled" | "disabled"))? ;
 style-graphic-properties-attlist ::= (dr3d:end-angle::nonNegativeInteger)? ;
 style-graphic-properties-attlist ::= (dr3d:close-front::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:close-back::boolean)? ;
 style-graphic-properties-attlist ::= (dr3d:lighting-mode::("standard" | "double-sided"))? ;
 style-graphic-properties-attlist ::= (dr3d:normals-kind::("object" | "flat" | "sphere"))? ;
 style-graphic-properties-attlist ::= (dr3d:normals-direction::("normal" | "inverse"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-generation-mode-x::("object" | "parallel" | "sphere"))? (dr3d:texture-generation-mode-y::("object" | "parallel" | "sphere"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-kind::("luminance" | "intensity" | "color"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-filter::("enabled" | "disabled"))? ;
 style-graphic-properties-attlist ::= (dr3d:texture-mode::("replace" | "modulate" | "blend"))? ;
 style-graphic-properties-attlist ::= (dr3d:ambient-color::color)? (dr3d:emissive-color::color)? (dr3d:specular-color::color)? (dr3d:diffuse-color::color)? ;
 style-graphic-properties-attlist ::= (dr3d:shininess::percent)? ;
 style-graphic-properties-attlist ::= (dr3d:shadow::("visible" | "hidden"))? ;
 style-graphic-properties-attlist ::= common-draw-rel-size-attlist (fo:min-width::(length | percent))? ;
 style-graphic-properties-attlist ::= (fo:min-height::(length | percent))? ;
 style-graphic-properties-attlist ::= (fo:max-height::(length | percent))? (fo:max-width::(length | percent))? ;
 style-graphic-properties-attlist ::= common-horizontal-margin-attlist ;
 style-graphic-properties-attlist ::= common-vertical-margin-attlist ;
 style-graphic-properties-attlist ::= common-margin-attlist ;
 style-graphic-properties-attlist ::= (style:print-content::boolean)? ;
 style-graphic-properties-attlist ::= (style:protect::("none" | (("content" | "position" | "size")+)))? ;
 style-graphic-properties-attlist ::= (style:horizontal-pos::("left" | "center" | "right" | "from-left" | "inside" | "outside" | "from-inside"))? (svg:x::coordinate)? ;
 style-graphic-properties-attlist ::= (style:horizontal-rel::("page" | "page-content" | "page-start-margin" | "page-end-margin" | "frame" | "frame-content" | "frame-start-margin" | "frame-end-margin" | "paragraph" | "paragraph-content" | "paragraph-start-margin" | "paragraph-end-margin" | "char"))? ;
 style-graphic-properties-attlist ::= common-vertical-pos-attlist ;
 style-graphic-properties-attlist ::= common-vertical-rel-attlist ;
 style-graphic-properties-attlist ::= common-text-anchor-attlist ;
 style-graphic-properties-attlist ::= common-border-attlist ;
 style-graphic-properties-attlist ::= common-border-line-width-attlist ;
 style-graphic-properties-attlist ::= common-padding-attlist ;
 style-graphic-properties-attlist ::= common-shadow-attlist ;
 style-graphic-properties-attlist ::= common-background-color-attlist ;
 style-graphic-properties-attlist ::= (style:editable::boolean)? ;
 style-graphic-properties-attlist ::= (style:wrap::("none" | "left" | "right" | "parallel" | "dynamic" | "run-through" | "biggest"))? ;
 style-graphic-properties-attlist ::= (style:wrap-dynamic-threshold::nonNegativeLength)? ;
 style-graphic-properties-attlist ::= (style:number-wrapped-paragraphs::("no-limit" | positiveInteger))? ;
 style-graphic-properties-attlist ::= (style:wrap-contour::boolean)? ;
 style-graphic-properties-attlist ::= (style:wrap-contour-mode::("full" | "outside"))? ;
 style-graphic-properties-attlist ::= (style:run-through::("foreground" | "background"))? ;
 style-graphic-properties-attlist ::= (style:flow-with-text::boolean)? ;
 style-graphic-properties-attlist ::= (style:overflow-behavior::("clip" | "auto-create-new-frame"))? ;
 style-graphic-properties-attlist ::= (style:mirror::("none" | "vertical" | horizontal-mirror | ("vertical" horizontal-mirror) | (horizontal-mirror "vertical")))? ;
 style-graphic-properties-attlist ::= (fo:clip::string)? ;
 style-graphic-properties-attlist ::= (draw:wrap-influence-on-position::("iterative" | "once-concurrent" | "once-successive"))? ;
 style-graphic-properties-attlist ::= common-writing-mode-attlist ;
 style-graphic-properties-attlist ::= (draw:frame-display-scrollbar::boolean)? ;
 style-graphic-properties-attlist ::= (draw:frame-display-border::boolean)? ;
 style-graphic-properties-attlist ::= (draw:frame-margin-horizontal::nonNegativePixelLength)? (draw:frame-margin-vertical::nonNegativePixelLength)? ;
 style-graphic-properties-attlist ::= (draw:visible-area-left::nonNegativeLength)? (draw:visible-area-top::nonNegativeLength)? (draw:visible-area-width::positiveLength)? (draw:visible-area-height::positiveLength)? ;
 style-graphic-properties-attlist ::= (draw:ole-draw-aspect::nonNegativeInteger)? ;
presentationSpeeds ::= "slow" | "medium" | "fast" ;
office-font-face-decls ::= (office:font-face-decls::(style-font-face*))? ;
office-document-styles ::= office:document-styles::(office-document-common-attrs office-font-face-decls office-styles office-automatic-styles office-master-styles) ;
table-subtotal-field-attlist ::= table:field-number::nonNegativeInteger ;
 table-subtotal-field-attlist ::= table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string) ;
text-hidden-text-attlist ::= text:condition::formula ;
 text-hidden-text-attlist ::= text:string-value::string ;
 text-hidden-text-attlist ::= (text:is-hidden::boolean)? ;
form-property ::= form:property::(form-property-name form-property-value-and-type-attlist) ;
 form-property ::= form:list-property::(form-property-name form-property-type-and-value-list) ;
table-named-expression-attlist ::= table:name::string table:expression::string (table:base-cell-address::cellAddress)? ;
nonNegativeInteger ::= integer() ;
style-paragraph-properties-content-strict ::= style-paragraph-properties-attlist style-paragraph-properties-elements ;
script-event-listener-attlist ::= script:event-name::string ;
 script-event-listener-attlist ::= script:language::string ;
 script-event-listener-attlist ::= (script:macro-name::string) | (xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")?) ;
text-variable-decl ::= text:variable-decl::(common-field-name-attlist common-value-type-attlist) ;
draw-fill-image ::= draw:fill-image::(draw-fill-image-attlist xlink:href::anyURI (xlink:type::"simple")? (xlink:show::"embed")? (xlink:actuate::"onLoad")?) ;
office-document-content ::= office:document-content::(office-document-common-attrs office-scripts office-font-face-decls office-automatic-styles office-body) ;
anim-animate-transform-attlist ::= svg:type::("translate" | "scale" | "rotate" | "skewX" | "skewY") ;
draw-param-attlist ::= (draw:name::string())? ;
 draw-param-attlist ::= (draw:value::string())? ;
common-begin-end-timing-attlist ::= (smil:begin::string)? ;
 common-begin-end-timing-attlist ::= (smil:end::string)? ;
common-presentation-effect-attlist ::= draw:shape-id::IDREF ;
 common-presentation-effect-attlist ::= (presentation:effect::presentationEffects)? ;
 common-presentation-effect-attlist ::= (presentation:direction::presentationEffectDirections)? ;
 common-presentation-effect-attlist ::= (presentation:speed::presentationSpeeds)? ;
 common-presentation-effect-attlist ::= (presentation:delay::duration)? ;
 common-presentation-effect-attlist ::= (presentation:start-scale::percent)? ;
 common-presentation-effect-attlist ::= (presentation:path-id::string())? ;
style-columns-attlist ::= fo:column-count::positiveInteger ;
 style-columns-attlist ::= (fo:column-gap::length)? ;
text-a-attlist ::= (office:name::string)? ;
 text-a-attlist ::= (office:title::string)? ;
 text-a-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? ;
 text-a-attlist ::= (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? ;
 text-a-attlist ::= (text:style-name::styleNameRef)? (text:visited-style-name::styleNameRef)? ;
config-config-item ::= config:config-item::(config-config-item-attlist string()) ;
table-first-column ::= table:first-column::common-table-template-attlist ;
anim-iterate-attlist ::= common-anim-target-attlist ;
 anim-iterate-attlist ::= (anim:iterate-type::string)? ;
 anim-iterate-attlist ::= (anim:iterate-interval::duration)? ;
style-graphic-fill-properties-attlist ::= (draw:fill::("none" | "solid" | "bitmap" | "gradient" | "hatch"))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-color::color)? ;
 style-graphic-fill-properties-attlist ::= (draw:secondary-fill-color::color)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-gradient-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (draw:gradient-step-count::nonNegativeInteger)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-hatch-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-hatch-solid::boolean)? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (style:repeat::("no-repeat" | "repeat" | "stretch"))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-width::(length | percent))? (draw:fill-image-height::(length | percent))? ;
 style-graphic-fill-properties-attlist ::= (draw:fill-image-ref-point-x::percent)? (draw:fill-image-ref-point-y::percent)? (draw:fill-image-ref-point::("top-left" | "top" | "top-right" | "left" | "center" | "right" | "bottom-left" | "bottom" | "bottom-right"))? ;
 style-graphic-fill-properties-attlist ::= (draw:tile-repeat-offset::string())? ;
 style-graphic-fill-properties-attlist ::= (draw:opacity::percent)? ;
 style-graphic-fill-properties-attlist ::= (draw:opacity-name::styleNameRef)? ;
 style-graphic-fill-properties-attlist ::= (svg:fill-rule::("nonzero" | "evenodd"))? ;
common-draw-rel-size-attlist ::= common-draw-size-attlist (style:rel-width::(percent | "scale" | "scale-min"))? (style:rel-height::(percent | "scale" | "scale-min"))? ;
table-cut-offs ::= table:cut-offs::((table-movement-cut-off+) | (table-insertion-cut-off table-movement-cut-off*)) ;
style-header-footer-properties-content ::= style-properties-content ;
dr3d-sphere-attlist ::= (dr3d:center::vector3D)? ;
 dr3d-sphere-attlist ::= (dr3d:size::vector3D)? ;
draw-fill-image-attlist ::= draw:name::styleName ;
 draw-fill-image-attlist ::= (draw:display-name::string)? ;
 draw-fill-image-attlist ::= (svg:width::length)? (svg:height::length)? ;
common-dur-timing-attlist ::= (smil:dur::string)? ;
chart-mean-value-attlist ::= (chart:style-name::styleNameRef)? ;
style-text-properties-attlist ::= (fo:font-variant::fontVariant)? ;
 style-text-properties-attlist ::= (fo:text-transform::("none" | "lowercase" | "uppercase" | "capitalize"))? ;
 style-text-properties-attlist ::= (fo:color::color)? ;
 style-text-properties-attlist ::= (style:use-window-font-color::boolean)? ;
 style-text-properties-attlist ::= (style:text-outline::boolean)? ;
 style-text-properties-attlist ::= (style:text-line-through-type::lineType)? ;
 style-text-properties-attlist ::= (style:text-line-through-style::lineStyle)? ;
 style-text-properties-attlist ::= (style:text-line-through-width::lineWidth)? ;
 style-text-properties-attlist ::= (style:text-line-through-color::("font-color" | color))? ;
 style-text-properties-attlist ::= (style:text-line-through-text::string)? ;
 style-text-properties-attlist ::= (style:text-line-through-text-style::styleNameRef)? ;
 style-text-properties-attlist ::= (style:text-position::(percent | "super" | "sub" percent?))? ;
 style-text-properties-attlist ::= (style:font-name::string)? (style:font-name-asian::string)? (style:font-name-complex::string)? ;
 style-text-properties-attlist ::= (fo:font-family::string)? (style:font-family-asian::string)? (style:font-family-complex::string)? ;
 style-text-properties-attlist ::= (style:font-family-generic::fontFamilyGeneric)? (style:font-family-generic-asian::fontFamilyGeneric)? (style:font-family-generic-complex::fontFamilyGeneric)? ;
 style-text-properties-attlist ::= (style:font-style-name::string)? (style:font-style-name-asian::string)? (style:font-style-name-complex::string)? ;
 style-text-properties-attlist ::= (style:font-pitch::fontPitch)? (style:font-pitch-asian::fontPitch)? (style:font-pitch-complex::fontPitch)? ;
 style-text-properties-attlist ::= (style:font-charset::textEncoding)? (style:font-charset-asian::textEncoding)? (style:font-charset-complex::textEncoding)? ;
 style-text-properties-attlist ::= (fo:font-size::(positiveLength | percent))? (style:font-size-asian::(positiveLength | percent))? (style:font-size-complex::(positiveLength | percent))? ;
 style-text-properties-attlist ::= (style:font-size-rel::length)? (style:font-size-rel-asian::length)? (style:font-size-rel-complex::length)? ;
 style-text-properties-attlist ::= (style:script-type::("latin" | "asian" | "complex" | "ignore"))? ;
 style-text-properties-attlist ::= (fo:letter-spacing::(length | "normal"))? ;
 style-text-properties-attlist ::= (fo:language::languageCode)? (style:language-asian::languageCode)? (style:language-complex::languageCode)? ;
 style-text-properties-attlist ::= (fo:country::countryCode)? (style:country-asian::countryCode)? (style:country-complex::countryCode)? ;
 style-text-properties-attlist ::= (fo:font-style::fontStyle)? (style:font-style-asian::fontStyle)? (style:font-style-complex::fontStyle)? ;
 style-text-properties-attlist ::= (style:font-relief::("none" | "embossed" | "engraved"))? ;
 style-text-properties-attlist ::= (fo:text-shadow::shadowType)? ;
 style-text-properties-attlist ::= (style:text-underline-type::lineType)? ;
 style-text-properties-attlist ::= (style:text-underline-style::lineStyle)? ;
 style-text-properties-attlist ::= (style:text-underline-width::lineWidth)? ;
 style-text-properties-attlist ::= (style:text-underline-color::("font-color" | color))? ;
 style-text-properties-attlist ::= (fo:font-weight::fontWeight)? (style:font-weight-asian::fontWeight)? (style:font-weight-complex::fontWeight)? ;
 style-text-properties-attlist ::= (style:text-underline-mode::lineMode)? ;
 style-text-properties-attlist ::= (style:text-line-through-mode::lineMode)? ;
 style-text-properties-attlist ::= (style:letter-kerning::boolean)? ;
 style-text-properties-attlist ::= (style:text-blinking::boolean)? ;
 style-text-properties-attlist ::= common-background-color-attlist ;
 style-text-properties-attlist ::= (style:text-combine::("none" | "letters" | "lines"))? ;
 style-text-properties-attlist ::= (style:text-combine-start-char::character)? (style:text-combine-end-char::character)? ;
 style-text-properties-attlist ::= (style:text-emphasize::("none" | ("none" | "accent" | "dot" | "circle" | "disc" "above" | "below")))? ;
 style-text-properties-attlist ::= (style:text-scale::percent)? ;
 style-text-properties-attlist ::= (style:text-rotation-angle::integer)? ;
 style-text-properties-attlist ::= (style:text-rotation-scale::("fixed" | "line-height"))? ;
 style-text-properties-attlist ::= (fo:hyphenate::boolean)? ;
 style-text-properties-attlist ::= (fo:hyphenation-remain-char-count::positiveInteger)? ;
 style-text-properties-attlist ::= (fo:hyphenation-push-char-count::positiveInteger)? ;
 style-text-properties-attlist ::= (text:display::"true") | (text:display::"none") | (text:display::"condition" text:condition::"none") | ε ;
presentation-header-decl-attlist ::= presentation:name::string ;
number-time-style-attlist ::= (number:truncate-on-overflow::boolean)? ;
office-dde-source-attlist ::= (office:name::string)? ;
 office-dde-source-attlist ::= (office:conversion-mode::("into-default-style-data-style" | "into-english-number" | "keep-text"))? ;
text-object-index-source ::= text:object-index-source::(text-object-index-source-attrs text-index-title-template? text-object-index-entry-template?) ;
text-dde-connection-decl-attlist ::= office:name::string ;
text-section-source ::= text:section-source::text-section-source-attr ;
draw-image-map ::= draw:image-map::((draw-area-rectangle | draw-area-circle | draw-area-polygon)*) ;
table-data-pilot-group-member ::= table:data-pilot-group-member::table-data-pilot-group-member-attlist ;
office-document-attrs ::= office:mimetype::string ;
office-meta-data ::= meta:generator::string ;
 office-meta-data ::= dc:title::string ;
 office-meta-data ::= dc:description::string ;
 office-meta-data ::= dc:subject::string ;
 office-meta-data ::= meta:keyword::string ;
 office-meta-data ::= meta:initial-creator::string ;
 office-meta-data ::= dc-creator ;
 office-meta-data ::= meta:printed-by::string ;
 office-meta-data ::= meta:creation-date::dateTime ;
 office-meta-data ::= dc-date ;
 office-meta-data ::= meta:print-date::dateTime ;
 office-meta-data ::= meta:template::(xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? (xlink:title::string)? (meta:date::dateTime)?) ;
 office-meta-data ::= meta:auto-reload::((xlink:type::"simple")? (xlink:show::"replace")? (xlink:actuate::"onLoad")? (xlink:href::anyURI)? (meta:delay::duration)?) ;
 office-meta-data ::= meta:hyperlink-behaviour::((office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))?) ;
 office-meta-data ::= dc:language::language ;
 office-meta-data ::= meta:editing-cycles::nonNegativeInteger ;
 office-meta-data ::= meta:editing-duration::duration ;
 office-meta-data ::= meta:document-statistic::((meta:page-count::nonNegativeInteger)? (meta:table-count::nonNegativeInteger)? (meta:draw-count::nonNegativeInteger)? (meta:image-count::nonNegativeInteger)? (meta:ole-object-count::nonNegativeInteger)? (meta:object-count::nonNegativeInteger)? (meta:paragraph-count::nonNegativeInteger)? (meta:word-count::nonNegativeInteger)? (meta:character-count::nonNegativeInteger)? (frame-count::nonNegativeInteger)? (sentence-count::nonNegativeInteger)? (syllable-count::nonNegativeInteger)? (non-whitespace-character-count::nonNegativeInteger)? (meta:row-count::nonNegativeInteger)? (meta:cell-count::nonNegativeInteger)?) ;
 office-meta-data ::= meta:user-defined::(meta:name::string (meta:value-type::"float" double) | (meta:value-type::"date" dateOrDateTime) | (meta:value-type::"time" duration) | (meta:value-type::"boolean" boolean) | (meta:value-type::"string" string) | string()) ;
draw-enhanced-geometry ::= draw:enhanced-geometry::(draw-enhanced-geometry-attlist draw-equation* draw-handle*) ;
text-bibliography-entry-template ::= text:bibliography-entry-template::(text-bibliography-entry-template-attrs (text-index-entry-span | text-index-entry-tab-stop | text-index-entry-bibliography)*) ;
style-region-right ::= style:region-right::region-content ;
table-data-pilot-field-reference ::= table:data-pilot-field-reference::table-data-pilot-field-reference-attlist ;
text-ref-content ::= (text:reference-format::("page" | "chapter" | "direction" | "text"))? ;
text-chapter-attlist ::= text:display::("name" | "number" | "number-and-name" | "plain-number-and-name" | "plain-number") ;
 text-chapter-attlist ::= text:outline-level::nonNegativeInteger ;
text-page-sequence ::= text:page-sequence::(text-page+) ;
form-checkbox-attlist ::= form-control-attlist common-disabled-attlist label common-printable-attlist common-tab-attlist common-title-attlist common-value-attlist common-data-field-attlist common-form-visual-effect-attlist common-form-relative-image-position-attlist ;
 form-checkbox-attlist ::= (form:current-state::states)? ;
 form-checkbox-attlist ::= (form:is-tristate::boolean)? ;
 form-checkbox-attlist ::= (form:state::states)? ;
draw-layer-set ::= draw:layer-set::(draw-layer*) ;
text-hidden-paragraph-attlist ::= text:condition::formula ;
 text-hidden-paragraph-attlist ::= (text:is-hidden::boolean)? ;
common-draw-points-attlist ::= draw:points::points ;
presentation-sound ::= presentation:sound::(presentation-sound-attlist xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? (xlink:show::("new" | "replace"))?) ;
chart-error-indicator ::= chart:error-indicator::chart-error-indicator-attlist ;
chart-title-attlist ::= (table:cell-range::cellAddress)? ;
 chart-title-attlist ::= common-draw-position-attlist ;
 chart-title-attlist ::= (chart:style-name::styleNameRef)? ;
style-background-image ::= (style:background-image::(style-background-image-attlist common-draw-data-attlist | office-binary-data | ε))? ;
style-ruby-properties-content ::= style-properties-content ;
presentation-decls ::= presentation-decl* ;
dr3d-cube-attlist ::= (dr3d:min-edge::vector3D)? (dr3d:max-edge::vector3D)? ;
form-property-type-and-value-list ::= (office:value-type::"float" (form:list-value::(office:value::double))*) | (office:value-type::"percentage" (form:list-value::(office:value::double))*) | (office:value-type::"currency" (form:list-value::(office:value::double (office:currency::string)?))*) | (office:value-type::"date" (form:list-value::(office:date-value::dateOrDateTime))*) | (office:value-type::"time" (form:list-value::(office:time-value::duration))*) | (office:value-type::"boolean" (form:list-value::(office:boolean-value::boolean))*) | (office:value-type::"string" (form:list-value::(office:string-value::string))*) | (office:value-type::"void") ;
xforms-model ::= xforms:model::anyAttListOrElements ;
table-dde-links ::= table:dde-links::(table-dde-link+) ;
style-drop-cap ::= (style:drop-cap::style-drop-cap-attlist)? ;
horiBackPos ::= "left" | "center" | "right" ;
draw-floating-frame ::= draw:floating-frame::(draw-floating-frame-attlist common-draw-data-attlist) ;
common-writing-mode-attlist ::= (style:writing-mode::("lr-tb" | "rl-tb" | "tb-rl" | "tb-lr" | "lr" | "rl" | "tb" | "page"))? ;
form-text-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist ;
text-illustration-index-source-attrs ::= text-index-scope-attr ;
 text-illustration-index-source-attrs ::= text-relative-tab-stop-position-attr ;
 text-illustration-index-source-attrs ::= (text:use-caption::boolean)? ;
 text-illustration-index-source-attrs ::= (text:caption-sequence-name::string)? ;
 text-illustration-index-source-attrs ::= (text:caption-sequence-format::("text" | "category-and-value" | "caption"))? ;
presentationEffects ::= "none" | "fade" | "move" | "stripes" | "open" | "close" | "dissolve" | "wavyline" | "random" | "lines" | "laser" | "appear" | "hide" | "move-short" | "checkerboard" | "rotate" | "stretch" ;
xforms-bind-attlist ::= (xforms:bind::string)? ;
text-note-ref-content ::= text-note-class ;
draw-opacity ::= draw:opacity::(common-draw-gradient-attlist draw-opacity-attlist) ;
table-linked-source-attlist ::= (xlink:type::"simple")? (xlink:actuate::"onRequest")? xlink:href::anyURI ;
 table-linked-source-attlist ::= (table:filter-name::string)? ;
 table-linked-source-attlist ::= (table:filter-options::string)? ;
 table-linked-source-attlist ::= (table:refresh-delay::duration)? ;
form-column ::= form:column::(form-column-attlist column-controls+) ;
table-data-pilot-groups-attlist ::= table:source-field-name::string ;
 table-data-pilot-groups-attlist ::= (table:date-start::(dateOrDateTime | "auto")) | (table:start::(double | "auto")) ;
 table-data-pilot-groups-attlist ::= (table:date-end::(dateOrDateTime | "auto")) | (table:end::(double | "auto")) ;
 table-data-pilot-groups-attlist ::= table:step::double ;
 table-data-pilot-groups-attlist ::= table:grouped-by::("seconds" | "minutes" | "hours" | "days" | "months" | "quarters" | "years") ;
presentationEffectDirections ::= "none" | "from-left" | "from-top" | "from-right" | "from-bottom" | "from-center" | "from-upper-left" | "from-upper-right" | "from-lower-left" | "from-lower-right" | "to-left" | "to-top" | "to-right" | "to-bottom" | "to-upper-left" | "to-upper-right" | "to-lower-right" | "to-lower-left" | "path" | "spiral-inward-left" | "spiral-inward-right" | "spiral-outward-left" | "spiral-outward-right" | "vertical" | "horizontal" | "to-center" | "clockwise" | "counter-clockwise" ;
text-outline-level-style ::= text:outline-level-style::(text-outline-level-style-attlist style-list-level-properties? style-text-properties?) ;
table-data-pilot-subtotal ::= table:data-pilot-subtotal::table-data-pilot-subtotal-attlist ;
text-note-class ::= text:note-class::("footnote" | "endnote") ;
text-list-style-attr ::= style:name::styleName ;
 text-list-style-attr ::= (style:display-name::string)? ;
 text-list-style-attr ::= (text:consecutive-numbering::boolean)? ;
common-presentation-header-footer-attlist ::= (presentation:use-header-name::string)? ;
 common-presentation-header-footer-attlist ::= (presentation:use-footer-name::string)? ;
 common-presentation-header-footer-attlist ::= (presentation:use-date-time-name::string)? ;
style-table-column-properties-content-strict ::= style-table-column-properties-attlist style-table-column-properties-elements ;
style-ruby-properties-elements ::= ε ;
shadowType ::= "none" | string ;
text-index-source-styles ::= text:index-source-styles::(text:outline-level::positiveInteger text-index-source-style*) ;
text-section-attr ::= sectionAttr ;
 text-section-attr ::= (text:display::("true" | "none")) | (text:display::"condition" text:condition::string) | ε ;
table-rows ::= table-table-rows | ((text-soft-page-break? table-table-row)+) ;
number-day-of-week ::= number:day-of-week::(number-day-of-week-attlist common-calendar-attlist) ;
draw-opacity-attlist ::= (draw:start::percent)? (draw:end::percent)? ;
style-section-properties-content-strict ::= style-section-properties-attlist style-section-properties-elements ;
presentation-classes ::= "title" | "outline" | "subtitle" | "text" | "graphic" | "object" | "chart" | "table" | "orgchart" | "page" | "notes" | "handout" | "header" | "footer" | "date-time" | "page-number" ;
common-anim-named-target-attlist ::= smil:attributeName::string ;
target-location ::= (xlink:href::anyURI)? ;
office-image-content-main ::= draw-frame ;
current-selected ::= (form:current-selected::boolean)? ;
form-item-attlist ::= label ;
style-table-row-properties-content-strict ::= style-table-row-properties-attlist style-table-row-properties-elements ;
text-decls ::= (text:variable-decls::(text-variable-decl*))? (text:sequence-decls::(text-sequence-decl*))? (text:user-field-decls::(text-user-field-decl*))? (text:dde-connection-decls::(text-dde-connection-decl*))? text-alphabetical-index-auto-mark-file? ;
office-binary-data ::= office:binary-data::base64Binary ;
table-movement-cut-off ::= table:movement-cut-off::table-movement-cut-off-attlist ;
form-number-attlist ::= (form:value::double)? ;
 form-number-attlist ::= (form:current-value::double)? ;
 form-number-attlist ::= (form:min-value::double)? ;
 form-number-attlist ::= (form:max-value::double)? ;
draw-glue-points-attlist ::= draw:escape-direction::("auto" | "left" | "right" | "up" | "down" | "horizontal" | "vertical") ;
text-list-style ::= text:list-style::(text-list-style-attr text-list-style-content*) ;
text-illustration-index-entry-template-attrs ::= text:style-name::styleNameRef ;
common-dde-connection-decl-attlist ::= office:dde-application::string ;
 common-dde-connection-decl-attlist ::= office:dde-topic::string ;
 common-dde-connection-decl-attlist ::= office:dde-item::string ;
 common-dde-connection-decl-attlist ::= (office:automatic-update::boolean)? ;
text-time-attlist ::= common-field-fixed-attlist common-field-data-style-name-attlist ;
 text-time-attlist ::= (text:time-value::timeOrDateTime)? ;
 text-time-attlist ::= (text:time-adjust::duration)? ;
common-timing-attlist ::= common-basic-timing-attlist common-restart-timing-attlist common-restart-default-attlist common-fill-timing-attlist common-fill-default-attlist common-time-manip-attlist ;
common-number-attlist ::= (number:min-integer-digits::integer)? ;
 common-number-attlist ::= (number:grouping::boolean)? ;
table-functions ::= table-named-expressions? table-database-ranges? table-data-pilot-tables? table-consolidation? table-dde-links? ;
style-table-column-properties-content ::= style-properties-content ;
presentation-footer-decl-attlist ::= presentation:name::string ;
svg-desc ::= svg:desc::string() ;
form-combobox-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist dropdown common-maxlength-attlist common-printable-attlist common-readonly-attlist size common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist list-source list-source-type ;
 form-combobox-attlist ::= (form:auto-complete::boolean)? ;
common-page-number-attlist ::= (style:page-number::(positiveInteger | "auto"))? ;
text-database-next-attlist ::= common-field-database-table ;
 text-database-next-attlist ::= (text:condition::formula)? ;
office-presentation-content-prelude ::= text-decls table-decls presentation-decls ;
common-vertical-rel-attlist ::= (style:vertical-rel::("page" | "page-content" | "frame" | "frame-content" | "paragraph" | "paragraph-content" | "char" | "line" | "baseline" | "text"))? ;
draw-ellipse ::= draw:ellipse::(common-draw-circle-ellipse-attlist draw-ellipse-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
common-draw-id-attlist ::= (draw:id::ID)? ;
table-data-pilot-member ::= table:data-pilot-member::table-data-pilot-member-attlist ;
number-currency-symbol ::= number:currency-symbol::(number-currency-symbol-attlist string()) ;
form-generic-control-attlist ::= form-control-attlist ;
style-text-properties-elements ::= ε ;
common-field-display-value-formula-none-attlist ::= (text:display::("value" | "formula" | "none"))? ;
common-repeat-timing-attlist ::= (smil:repeatDur::string)? (smil:repeatCount::(nonNegativeInteger | "indefinite"))? ;
office-presentation-content-epilogue ::= presentation-settings table-functions ;
valueType ::= "float" | "time" | "date" | "percentage" | "currency" | "boolean" | "string" ;
form-value-range-attlist ::= form-control-attlist common-disabled-attlist common-printable-attlist common-tab-attlist common-title-attlist common-value-attlist ;
 form-value-range-attlist ::= (form:max-value::string)? ;
 form-value-range-attlist ::= (form:min-value::string)? ;
 form-value-range-attlist ::= (form:step-size::positiveInteger)? ;
 form-value-range-attlist ::= (form:page-step-size::positiveInteger)? ;
 form-value-range-attlist ::= (form:delay-for-repeat::duration)? ;
 form-value-range-attlist ::= (form:orientation::("horizontal" | "vertical"))? ;
number-boolean-style ::= number:boolean-style::(common-data-style-attlist style-text-properties? number-text? (number-boolean number-text?)? style-map*) ;
table-error-macro ::= table:error-macro::((table:execute::boolean)?) ;
config-config-item-set ::= config:config-item-set::(config-config-item-set-attlist config-items) ;
presentation-dim-attlist ::= draw:shape-id::IDREF ;
 presentation-dim-attlist ::= draw:color::color ;
text-bibliography-source ::= text:bibliography-source::(text-index-title-template? text-bibliography-entry-template*) ;
text-sort-key-attlist ::= text:key::("address" | "annote" | "author" | "bibliography-type" | "booktitle" | "chapter" | "custom1" | "custom2" | "custom3" | "custom4" | "custom5" | "edition" | "editor" | "howpublished" | "identifier" | "institution" | "isbn" | "issn" | "journal" | "month" | "note" | "number" | "organizations" | "pages" | "publisher" | "report-type" | "school" | "series" | "title" | "url" | "volume" | "year") (text:sort-ascending::boolean)? ;
style-list-level-properties-attlist ::= common-text-align ;
 style-list-level-properties-attlist ::= (text:space-before::nonNegativeLength)? ;
 style-list-level-properties-attlist ::= (text:min-label-width::nonNegativeLength)? ;
 style-list-level-properties-attlist ::= (text:min-label-distance::nonNegativeLength)? ;
 style-list-level-properties-attlist ::= (style:font-name::string)? ;
 style-list-level-properties-attlist ::= (fo:width::positiveLength)? (fo:height::positiveLength)? ;
 style-list-level-properties-attlist ::= common-vertical-rel-attlist common-vertical-pos-attlist ;
number-year ::= number:year::(number-year-attlist common-calendar-attlist) ;
table-body ::= table:body::common-table-template-attlist ;
text-index-entry-span ::= text:index-entry-span::((text:style-name::styleNameRef)? string()) ;
text-date-attlist ::= common-field-fixed-attlist common-field-data-style-name-attlist ;
 text-date-attlist ::= (text:date-value::dateOrDateTime)? ;
 text-date-attlist ::= (text:date-adjust::duration)? ;
text-user-field-decl ::= text:user-field-decl::(common-field-name-attlist common-field-formula-attlist? common-value-and-type-attlist) ;
table-sort ::= table:sort::(table-sort-attlist table-sort-by+) ;
styleNameRefs ::= string()* ;
dc-date ::= dc:date::dateTime ;
text-database-row-select-attlist ::= common-field-database-table ;
 text-database-row-select-attlist ::= (text:condition::formula)? ;
 text-database-row-select-attlist ::= (text:row-number::nonNegativeInteger)? ;
cellAddress ::= string() ;
fontPitch ::= "fixed" | "variable" ;
chart-axis ::= chart:axis::(chart-axis-attlist chart-title? chart-categories? chart-grid*) ;
table-database-source-sql ::= table:database-source-sql::table-database-source-sql-attlist ;
draw-custom-shape ::= draw:custom-shape::(draw-custom-shape-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text draw-enhanced-geometry?) ;
style-table-row-properties-content ::= style-properties-content ;
form-form ::= form:form::(common-form-control-attlist form-form-attlist form-properties? office-event-listeners? (controls | form-form)* form-connection-resource?) ;
common-table-cell-range-address-attlist ::= table:start-column::integer table:start-row::integer table:start-table::integer table:end-column::integer table:end-row::integer table:end-table::integer ;
list-source ::= (form:list-source::string)? ;
common-draw-gradient-attlist ::= (draw:name::styleName)? ;
 common-draw-gradient-attlist ::= (draw:display-name::string)? ;
 common-draw-gradient-attlist ::= draw:style::gradient-style ;
 common-draw-gradient-attlist ::= (draw:cx::percent)? (draw:cy::percent)? ;
 common-draw-gradient-attlist ::= (draw:angle::integer)? ;
 common-draw-gradient-attlist ::= (draw:border::percent)? ;
draw-polyline ::= draw:polyline::(common-draw-points-attlist common-draw-position-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
text-numbered-paragraph ::= text:numbered-paragraph::(text-numbered-paragraph-attr text-number? text-p | text-h) ;
text-list-level-style-bullet-attr ::= (text:style-name::styleNameRef)? ;
 text-list-level-style-bullet-attr ::= text:bullet-char::character ;
 text-list-level-style-bullet-attr ::= common-num-format-prefix-suffix-attlist ;
 text-list-level-style-bullet-attr ::= (text:bullet-relative-size::percent)? ;
number-quarter ::= number:quarter::(number-quarter-attlist common-calendar-attlist) ;
config-config-item-map-entry ::= config:config-item-map-entry::(config-config-item-map-entry-attlist config-items) ;
anim-transition-filter-attlist ::= smil:type::string ;
 anim-transition-filter-attlist ::= (smil:subtype::string)? ;
 anim-transition-filter-attlist ::= (smil:direction::("forward" | "reverse"))? ;
 anim-transition-filter-attlist ::= (smil:fadeColor::("forward" | "reverse"))? ;
 anim-transition-filter-attlist ::= (smil:mode::("in" | "out"))? ;
text-alphabetical-index-entry-template ::= text:alphabetical-index-entry-template::(text-alphabetical-index-entry-template-attrs (text-index-entry-chapter | text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop)*) ;
common-table-change-attlist ::= table:id::string ;
 common-table-change-attlist ::= (table:acceptance-state::("accepted" | "rejected" | "pending"))? ;
 common-table-change-attlist ::= (table:rejecting-change-id::string)? ;
common-field-formula-attlist ::= (text:formula::formula)? ;
office-meta-content ::= anyElements ;
style-table-cell-properties-elements ::= style-background-image ;
table-data-pilot-field ::= table:data-pilot-field::(table-data-pilot-field-attlist table-data-pilot-level? table-data-pilot-field-reference? table-data-pilot-groups?) ;
draw-glue-point ::= draw:glue-point::draw-glue-point-attlist ;
chart-chart-attlist ::= chart:class::namespacedToken ;
 chart-chart-attlist ::= common-draw-size-attlist ;
 chart-chart-attlist ::= (chart:column-mapping::string)? ;
 chart-chart-attlist ::= (chart:row-mapping::string)? ;
 chart-chart-attlist ::= (chart:style-name::styleNameRef)? ;
text-set-page-variable-attlist ::= (text:active::boolean)? ;
 text-set-page-variable-attlist ::= (text:page-adjust::integer)? ;
draw-custom-shape-attlist ::= (draw:engine::namespacedToken)? ;
 draw-custom-shape-attlist ::= (draw:data::string)? ;
table-highlighted-range-attlist-invalid ::= table:marked-invalid::boolean ;
table-data-pilot-tables ::= table:data-pilot-tables::(table-data-pilot-table*) ;
table-table-row ::= table:table-row::(table-table-row-attlist (table-table-cell | table-covered-table-cell)+) ;
table-operation-attlist ::= table:name::("trace-dependents" | "remove-dependents" | "trace-precedents" | "remove-precedents" | "trace-errors") ;
 table-operation-attlist ::= table:index::nonNegativeInteger ;
draw-text ::= (text-p | text-list)* ;
table-detective ::= table:detective::(table-highlighted-range* table-operation*) ;
text-get-page-variable-attlist ::= common-field-num-format-attlist ;
office-settings ::= (office:settings::(config-config-item-set+))? ;
table-tracked-changes-attlist ::= (table:track-changes::boolean)? ;
text-table-of-content-entry-template-attlist ::= text:outline-level::positiveInteger ;
 text-table-of-content-entry-template-attlist ::= text:style-name::styleNameRef ;
common-num-format-prefix-suffix-attlist ::= (style:num-prefix::string)? (style:num-suffix::string)? ;
common-disabled-attlist ::= (form:disabled::boolean)? ;
style-table-cell-properties-content ::= style-properties-content ;
common-svg-gradient-attlist ::= (svg:gradientUnits::"objectBoundingBox")? (svg:gradientTransform::string)? (svg:spreadMethod::("pad" | "reflect" | "repeat"))? ;
 common-svg-gradient-attlist ::= draw:name::styleName ;
 common-svg-gradient-attlist ::= (draw:display-name::string)? ;
draw-a-attlist ::= xlink:href::anyURI (xlink:type::"simple")? (xlink:actuate::"onRequest")? ;
 draw-a-attlist ::= (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? ;
 draw-a-attlist ::= (office:name::string)? ;
 draw-a-attlist ::= (office:title::string)? ;
 draw-a-attlist ::= (office:server-map::boolean)? ;
style-default-style ::= style:default-style::style-style-content ;
table-named-expressions ::= table:named-expressions::((table-named-range | table-named-expression)*) ;
office-spreadsheet-content-prelude ::= table-tracked-changes? text-decls table-decls ;
number-fraction ::= number:fraction::(number-fraction-attlist common-number-attlist) ;
common-draw-area-attlist ::= (xlink:href::anyURI)? (xlink:type::"simple")? (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? ;
 common-draw-area-attlist ::= (office:name::string)? ;
 common-draw-area-attlist ::= (draw:nohref::"nohref")? ;
common-draw-name-attlist ::= (draw:name::string)? ;
text-bibliography ::= text:bibliography::(sectionAttr text-bibliography-source text-index-body) ;
table-dde-link ::= table:dde-link::(office-dde-source table-table) ;
point3D ::= string() ;
table-table-attlist ::= (table:name::string)? ;
 table-table-attlist ::= (table:style-name::styleNameRef)? ;
 table-table-attlist ::= (table:protected::boolean)? (table:protection-key::string())? ;
 table-table-attlist ::= (table:print::boolean)? ;
 table-table-attlist ::= (table:print-ranges::cellRangeAddressList)? ;
 table-table-attlist ::= (table:is-sub-table::boolean)? ;
--------------------odf::opendoc-1.2-dsig.bgf--------------------
dsig-document-signatures-attlist ::= dsig:version::"1.2" ;
dsig-document-signatures ::= dsig:document-signatures::(dsig-document-signatures-attlist ds-signature+) ;
ds-signature ::= ds:Signature::dsMarkup ;
dsMarkup ::= (α | string() | dsMarkup)* ;
--------------------odf::opendoc-1.2-manifest.bgf--------------------
anyAttListOrElements ::= string()* anyElements ;
nonNegativeInteger ::= integer() ;
key-derivation-attlist ::= manifest:key-derivation-name::("PBKDF2" | anyURI) manifest:salt::base64Binary manifest:iteration-count::nonNegativeInteger (manifest:key-size::nonNegativeInteger)? ;
encryption-data-attlist ::= manifest:checksum-type::("SHA1/1K" | anyURI) manifest:checksum::base64Binary ;
key-derivation ::= manifest:key-derivation::key-derivation-attlist ;
encryption-data ::= manifest:encryption-data::(encryption-data-attlist algorithm start-key-generation? key-derivation) ;
start-key-generation-attlist ::= manifest:start-key-generation-name::("SHA1" | anyURI) (manifest:key-size::nonNegativeInteger)? ;
anyElements ::= (string()? anyAttListOrElements string()?)* ;
file-entry-attlist ::= manifest:full-path::string (manifest:size::nonNegativeInteger)? manifest:media-type::string (manifest:preferred-view-mode::("edit" | "presentation-slide-show" | "read-only" | namespacedToken))? (manifest:version::string)? ;
start-key-generation ::= manifest:start-key-generation::start-key-generation-attlist ;
algorithm-attlist ::= manifest:algorithm-name::("Blowfish CFB" | anyURI) manifest:initialisation-vector::base64Binary ;
file-entry ::= manifest:file-entry::(file-entry-attlist encryption-data?) ;
manifest-attlist ::= manifest:version::"1.2" ;
anyURI ::= string() ;
namespacedToken ::= string() ;
base64Binary ::= string() ;
--------------------odf::opendoc-1.2.bgf--------------------
svg-linearGradient ::= svg:linearGradient::(common-svg-gradient-attlist (svg:x1::(coordinate | percent))? (svg:y1::(coordinate | percent))? (svg:x2::(coordinate | percent))? (svg:y2::(coordinate | percent))? svg-stop*) ;
number-seconds ::= number:seconds::number-seconds-attlist ;
number-currency-style ::= number:currency-style::(common-data-style-attlist common-auto-reorder-attlist style-text-properties? number-text? ((number-and-text currency-symbol-and-text?) | (currency-symbol-and-text number-and-text?))? style-map*) ;
common-editable-attlist ::= (style:editable::boolean)? ;
table-covered-table-cell ::= table:covered-table-cell::(table-table-cell-attlist table-table-cell-content) ;
text-notes-configuration-content ::= text-note-class (text:citation-style-name::styleNameRef)? (text:citation-body-style-name::styleNameRef)? (text:default-style-name::styleNameRef)? (text:master-page-name::styleNameRef)? (text:start-value::nonNegativeInteger)? common-num-format-prefix-suffix-attlist common-num-format-attlist? (text:start-numbering-at::("document" | "chapter" | "page"))? (text:footnotes-position::("text" | "page" | "section" | "document"))? (text:note-continuation-notice-forward::string())? (text:note-continuation-notice-backward::string())? ;
db-auto-increment-attlist ::= (db:additional-column-statement::string)? (db:row-retrieving-statement::string)? ;
text-list-item-content ::= text-number? (text-p | text-h | text-list | text-soft-page-break)* ;
presentation-hide-shape ::= presentation:hide-shape::(common-presentation-effect-attlist presentation-sound?) ;
number-scientific-number ::= number:scientific-number::(number-scientific-number-attlist common-decimal-places-attlist common-number-attlist) ;
table-data-pilot-table-attlist ::= table:name::string (table:application-data::string)? (table:grand-total::("none" | "row" | "column" | "both"))? (table:ignore-empty-rows::boolean)? (table:identify-categories::boolean)? table:target-range-address::cellRangeAddress (table:buttons::cellRangeAddressList)? (table:show-filter-button::boolean)? (table:drill-down-on-double-click::boolean)? ;
style-drawing-page-properties-content-strict ::= style-graphic-fill-properties-attlist style-drawing-page-properties-attlist style-drawing-page-properties-elements ;
anyURI ::= string() ;
style-tab-stop-char-attlist ::= style:char::character ;
number-text-content ::= number:text-content::ε ;
draw-plugin ::= draw:plugin::(draw-plugin-attlist common-draw-data-attlist draw-param*) ;
table-database-source-query-attlist ::= table:database-name::string table:query-name::string ;
text-content ::= text-h | text-p | text-list | text-numbered-paragraph | table-table | text-section | text-soft-page-break | text-table-of-content | text-illustration-index | text-table-index | text-object-index | text-user-index | text-alphabetical-index | text-bibliography | shape | change-marks ;
labelPositions ::= "avoid-overlap" | "center" | "top" | "top-right" | "right" | "bottom-right" | "bottom" | "bottom-left" | "left" | "top-left" | "inside" | "outside" | "near-origin" ;
number-date-style ::= number:date-style::(common-data-style-attlist common-auto-reorder-attlist common-format-source-attlist style-text-properties? number-text? (any-date number-text?)+ style-map*) ;
chart-grid ::= chart:grid::chart-grid-attlist ;
draw-marker-attlist ::= draw:name::styleName (draw:display-name::string)? ;
common-draw-text-style-name-attlist ::= (draw:text-style-name::styleNameRef)? ;
table-shapes ::= table:shapes::(shape+) ;
common-style-header-footer-attlist ::= (style:display::boolean)? ;
draw-line-attlist ::= svg:x1::coordinate svg:y1::coordinate svg:x2::coordinate svg:y2::coordinate ;
table-movement ::= table:movement::(common-table-change-attlist table-source-range-address table-target-range-address office-change-info table-dependencies? table-deletions?) ;
script-event-listener ::= script:event-listener::script-event-listener-attlist ;
table-table-column-attlist ::= (table:number-columns-repeated::positiveInteger)? (table:style-name::styleNameRef)? (table:visibility::table-visibility-value)? (table:default-cell-style-name::styleNameRef)? xml-id? ;
text-meta-field-attlist ::= xml-id common-field-data-style-name-attlist ;
db-data-source-attlist ::= ε ;
style-columns ::= (style:columns::(style-columns-attlist style-column-sep? style-column*))? ;
table-calculation-setting-attlist ::= (table:case-sensitive::boolean)? (table:precision-as-shown::boolean)? (table:search-criteria-must-apply-to-whole-cell::boolean)? (table:automatic-find-labels::boolean)? (table:use-regular-expressions::boolean)? (table:use-wildcards::boolean)? (table:null-year::positiveInteger)? ;
common-repeat ::= (form:repeat::boolean)? ;
text-section-source-dde ::= office-dde-source ;
number-am-pm ::= number:am-pm::ε ;
number-time-style ::= number:time-style::(number-time-style-attlist common-data-style-attlist common-format-source-attlist style-text-properties? number-text? (any-time number-text?)+ style-map*) ;
common-linked-cell ::= (form:linked-cell::(cellAddress | string))? ;
text-dde-connection-decl ::= text:dde-connection-decl::(text-dde-connection-decl-attlist common-dde-connection-decl-attlist) ;
SafeCURIE ::= string() ;
style-table-column-properties ::= style:table-column-properties::style-table-column-properties-content-strict ;
style-list-level-label-alignment ::= (style:list-level-label-alignment::style-list-level-label-alignment-attlist)? ;
db-query-attlist ::= db:command::string (db:escape-processing::boolean)? ;
chart-stock-range-line ::= chart:stock-range-line::common-stock-marker-attlist ;
chart-title ::= chart:title::(chart-title-attlist text-p?) ;
index-content-main ::= text-content | text-index-title ;
common-anim-attlist ::= (presentation:node-type::("default" | "on-click" | "with-previous" | "after-previous" | "timing-root" | "main-sequence" | "interactive-sequence"))? (presentation:preset-id::string)? (presentation:preset-sub-type::string)? (presentation:preset-class::("custom" | "entrance" | "exit" | "emphasis" | "motion-path" | "ole-action" | "media-call"))? (presentation:master-element::IDREF)? (presentation:group-id::string)? (xml-id (anim:id::NCName)?)? ;
config-config-item-attlist ::= config:name::string config:type::("boolean" | "short" | "int" | "long" | "double" | "string" | "datetime" | "base64Binary") ;
draw-frame ::= draw:frame::(common-draw-shape-with-text-and-styles-attlist common-draw-position-attlist common-draw-rel-size-attlist common-draw-caption-id-attlist presentation-shape-attlist draw-frame-attlist (draw-text-box | draw-image | draw-object | draw-object-ole | draw-applet | draw-floating-frame | draw-plugin | table-table)* office-event-listeners? draw-glue-point* draw-image-map? svg-title? svg-desc? (draw-contour-polygon | draw-contour-path)?) ;
db-character-set-attlist ::= (db:encoding::textEncoding)? ;
style-list-level-label-alignment-attlist ::= text:label-followed-by::("listtab" | "space" | "nothing") (text:list-tab-stop-position::length)? (fo:text-indent::length)? (fo:margin-left::length)? ;
dateTime ::= string() ;
common-draw-caption-id-attlist ::= (draw:caption-id::IDREF)? ;
table-title ::= table:title::string() ;
text-user-index-source ::= text:user-index-source::(text-user-index-source-attr text-index-title-template? text-user-index-entry-template* text-index-source-styles*) ;
text-meta-attlist ::= common-in-content-meta-attlist? xml-id? ;
style-page-layout-properties ::= style:page-layout-properties::style-page-layout-properties-content-strict ;
db-index-column-attlist ::= db:name::string (db:is-ascending::boolean)? ;
draw-image ::= draw:image::(draw-image-attlist common-draw-data-attlist | office-binary-data draw-text) ;
table-data-pilot-field-reference-attlist ::= table:field-name::string (table:member-type::"named" table:member-name::string) | (table:member-type::("previous" | "next")) table:type::("none" | "member-difference" | "member-percentage" | "member-percentage-difference" | "running-total" | "row-percentage" | "column-percentage" | "total-percentage" | "index") ;
chart-error-indicator-attlist ::= (chart:style-name::styleNameRef)? chart:dimension::chart-dimension ;
db-column-definition-attlist ::= db:name::string (db:data-type::db-data-types)? (db:type-name::string)? (db:precision::positiveInteger)? (db:scale::positiveInteger)? (db:is-nullable::("no-nulls" | "nullable"))? (db:is-empty-allowed::boolean)? (db:is-autoincrement::boolean)? ;
table-table-source-attlist ::= (table:mode::("copy-all" | "copy-results-only"))? (table:table-name::string)? ;
style-style-attlist ::= style:name::styleName (style:display-name::string)? (style:parent-style-name::styleNameRef)? (style:next-style-name::styleNameRef)? (style:list-level::(positiveInteger | ε))? (style:list-style-name::(styleName | ε))? (style:master-page-name::styleNameRef)? (style:auto-update::boolean)? (style:data-style-name::styleNameRef)? (style:percentage-data-style-name::styleNameRef)? (style:class::string)? (style:default-outline-level::(positiveInteger | ε))? ;
db-column ::= db:column::(db-column-attlist common-db-object-name common-db-object-title common-db-object-description common-db-default-value) ;
paragraph-attrs ::= (text:style-name::styleNameRef)? (text:class-names::styleNameRefs)? (text:cond-style-name::styleNameRef)? (xml-id (text:id::NCName)?)? common-in-content-meta-attlist? ;
table-columns-no-group ::= (table-columns (table-table-header-columns table-columns?)?) | (table-table-header-columns table-columns?) ;
draw-floating-frame-attlist ::= (draw:frame-name::string)? xml-id? ;
style-drawing-page-properties-elements ::= presentation-sound? ;
presentation-decl ::= (presentation:header-decl::(presentation-header-decl-attlist string())) | (presentation:footer-decl::(presentation-footer-decl-attlist string())) | (presentation:date-time-decl::(presentation-date-time-decl-attlist string())) ;
common-draw-size-attlist ::= (svg:width::length)? (svg:height::length)? ;
text-changed-region-content ::= (text:insertion::office-change-info) | (text:deletion::(office-change-info text-content*)) | (text:format-change::office-change-info) ;
table-table-template ::= table:table-template::(table-table-template-attlist table-first-row? table-last-row? table-first-column? table-last-column? table-body table-even-rows? table-odd-rows? table-even-columns? table-odd-columns? table-background?) ;
common-db-default-value ::= common-value-and-type-attlist? ;
db-delimiter ::= db:delimiter::db-delimiter-attlist ;
form-password-attlist ::= form-control-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-linked-cell (form:echo-char::character)? ;
common-style-direction-attlist ::= (style:direction::("ltr" | "ttb"))? ;
draw-regular-polygon-attlist ::= (draw:concave::"false") | (draw:concave::"true" draw-regular-polygon-sharpness-attlist) draw:corners::positiveInteger ;
text-sequence-ref-name ::= (text:ref-name::string)? ;
table-label-ranges ::= table:label-ranges::(table-label-range*) ;
table-even-rows ::= table:even-rows::common-table-template-attlist ;
common-office-annotation-name-attlist ::= office:name::string ;
draw-page-attlist ::= (draw:name::string)? (draw:style-name::styleNameRef)? draw:master-page-name::styleNameRef (presentation:presentation-page-layout-name::styleNameRef)? (xml-id (draw:id::NCName)?)? (draw:nav-order::IDREFS)? ;
table-database-ranges ::= table:database-ranges::(table-database-range*) ;
style-drawing-page-properties ::= style:drawing-page-properties::style-drawing-page-properties-content-strict ;
config-config-item-map-indexed ::= config:config-item-map-indexed::(config-config-item-map-indexed-attlist config-config-item-map-entry+) ;
style-table-cell-properties ::= style:table-cell-properties::style-table-cell-properties-content-strict ;
db-data-source-settings ::= db:data-source-settings::(db-data-source-settings-attlist db-data-source-setting+) ;
style-tab-stops ::= (style:tab-stops::(style-tab-stop*))? ;
office-chart-content-prelude ::= text-decls table-decls ;
style-drawing-page-properties-attlist ::= (presentation:transition-type::("manual" | "automatic" | "semi-automatic"))? (presentation:transition-style::("none" | "fade-from-left" | "fade-from-top" | "fade-from-right" | "fade-from-bottom" | "fade-from-upperleft" | "fade-from-upperright" | "fade-from-lowerleft" | "fade-from-lowerright" | "move-from-left" | "move-from-top" | "move-from-right" | "move-from-bottom" | "move-from-upperleft" | "move-from-upperright" | "move-from-lowerleft" | "move-from-lowerright" | "uncover-to-left" | "uncover-to-top" | "uncover-to-right" | "uncover-to-bottom" | "uncover-to-upperleft" | "uncover-to-upperright" | "uncover-to-lowerleft" | "uncover-to-lowerright" | "fade-to-center" | "fade-from-center" | "vertical-stripes" | "horizontal-stripes" | "clockwise" | "counterclockwise" | "open-vertical" | "open-horizontal" | "close-vertical" | "close-horizontal" | "wavyline-from-left" | "wavyline-from-top" | "wavyline-from-right" | "wavyline-from-bottom" | "spiralin-left" | "spiralin-right" | "spiralout-left" | "spiralout-right" | "roll-from-top" | "roll-from-left" | "roll-from-right" | "roll-from-bottom" | "stretch-from-left" | "stretch-from-top" | "stretch-from-right" | "stretch-from-bottom" | "vertical-lines" | "horizontal-lines" | "dissolve" | "random" | "vertical-checkerboard" | "horizontal-checkerboard" | "interlocking-horizontal-left" | "interlocking-horizontal-right" | "interlocking-vertical-top" | "interlocking-vertical-bottom" | "fly-away" | "open" | "close" | "melt"))? (presentation:transition-speed::presentationSpeeds)? (smil:type::string)? (smil:subtype::string)? (smil:direction::("forward" | "reverse"))? (smil:fadeColor::color)? (presentation:duration::duration)? (presentation:visibility::("visible" | "hidden"))? (draw:background-size::("full" | "border"))? (presentation:background-objects-visible::boolean)? (presentation:background-visible::boolean)? (presentation:display-header::boolean)? (presentation:display-footer::boolean)? (presentation:display-page-number::boolean)? (presentation:display-date-time::boolean)? ;
table-data-pilot-layout-info ::= table:data-pilot-layout-info::table-data-pilot-layout-info-attlist ;
config-config-item-map-indexed-attlist ::= config:name::string ;
common-db-object-title ::= (db:title::string)? ;
anim-animate-motion-attlist ::= (svg:path::pathData)? (svg:origin::string)? (smil:calcMode::("discrete" | "linear" | "paced" | "spline"))? ;
text-template-name-attlist ::= (text:display::("full" | "path" | "name" | "name-and-extension" | "area" | "title"))? ;
draw-caption-attlist ::= (draw:caption-point-x::coordinate draw:caption-point-y::coordinate)? (draw:corner-radius::nonNegativeLength)? ;
style-section-properties-elements ::= style-background-image style-columns text-notes-configuration* ;
column-controls ::= (form:text::(form-text-attlist common-form-control-content)) | (form:textarea::(form-textarea-attlist common-form-control-content text-p*)) | (form:formatted-text::(form-formatted-text-attlist common-form-control-content)) | (form:number::(form-number-attlist common-numeric-control-attlist common-form-control-content common-linked-cell common-spin-button common-repeat common-delay-for-repeat)) | (form:date::(form-date-attlist common-numeric-control-attlist common-form-control-content common-linked-cell common-spin-button common-repeat common-delay-for-repeat)) | (form:time::(form-time-attlist common-numeric-control-attlist common-form-control-content common-linked-cell common-spin-button common-repeat common-delay-for-repeat)) | (form:combobox::(form-combobox-attlist common-form-control-content form-item*)) | (form:listbox::(form-listbox-attlist common-form-control-content form-option*)) | (form:checkbox::(form-checkbox-attlist common-form-control-content)) ;
chart-equation-attlist ::= (chart:automatic-content::boolean)? (chart:display-r-square::boolean)? (chart:display-equation::boolean)? common-draw-position-attlist (chart:style-name::styleNameRef)? ;
text-index-title-template ::= text:index-title-template::((text:style-name::styleNameRef)? string()) ;
dr3d-rotate ::= dr3d:rotate::(common-draw-viewbox-attlist common-draw-path-data-attlist common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-dr3d-transform-attlist) ;
table-content-validations ::= table:content-validations::(table-content-validation+) ;
text-index-name ::= text:index-name::string ;
table-data-pilot-member-attlist ::= table:name::string (table:display::boolean)? (table:show-details::boolean)? ;
db-data-source-setting-attlist ::= (db:data-source-setting-is-list::boolean)? db:data-source-setting-name::string db:data-source-setting-type::db-data-source-setting-types ;
presentation-placeholder ::= presentation:placeholder::(presentation:object::presentation-classes svg:x::(coordinate | percent) svg:y::(coordinate | percent) svg:width::(length | percent) svg:height::(length | percent)) ;
style-map ::= style:map::style-map-attlist ;
number-number-attlist ::= (number:decimal-replacement::string)? (number:display-factor::double)? ;
CURIE ::= string() ;
db-column-definitions ::= db:column-definitions::(db-column-definitions-attlist db-column-definition+) ;
common-draw-transform-attlist ::= (draw:transform::string)? ;
common-shadow-attlist ::= (style:shadow::shadowType)? ;
text-list-header-attr ::= xml-id? ;
presentation-shape-attlist ::= (presentation:class::presentation-classes)? (presentation:placeholder::boolean)? (presentation:user-transformed::boolean)? ;
office-change-info ::= office:change-info::(dc-creator dc-date text-p*) ;
config-config-item-map-entry-attlist ::= (config:name::string)? ;
number-day ::= number:day::(number-day-attlist common-calendar-attlist) ;
styleNameRef ::= string() | ε ;
common-endsync-timing-attlist ::= (smil:endsync::("first" | "last" | "all" | "media" | IDREF))? ;
change-mark-attr ::= text:change-id::IDREF ;
text-table-index-entry-template ::= text:table-index-entry-template::text-illustration-index-entry-content ;
draw-area-circle ::= draw:area-circle::(common-draw-area-attlist svg:cx::coordinate svg:cy::coordinate svg:r::length svg-title? svg-desc? office-event-listeners?) ;
draw-connector ::= draw:connector::(draw-connector-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist common-draw-viewbox-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
style-column-sep ::= style:column-sep::style-column-sep-attlist ;
shapes3d ::= dr3d-scene | dr3d-extrude | dr3d-sphere | dr3d-rotate | dr3d-cube ;
draw-stroke-dash ::= draw:stroke-dash::draw-stroke-dash-attlist ;
list-source-type ::= (form:list-source-type::("table" | "query" | "sql" | "sql-pass-through" | "value-list" | "table-fields"))? ;
text-toc-mark-start-attrs ::= text-id text-outline-level ;
chart-data-point ::= chart:data-point::(chart-data-point-attlist chart-data-label?) ;
number-month ::= number:month::(number-month-attlist common-calendar-attlist) ;
office-scripts ::= (office:scripts::(office-script* office-event-listeners?))? ;
common-vertical-margin-attlist ::= (fo:margin-top::(nonNegativeLength | percent))? (fo:margin-bottom::(nonNegativeLength | percent))? ;
table-data-pilot-table ::= table:data-pilot-table::(table-data-pilot-table-attlist (table-database-source-sql | table-database-source-table | table-database-source-query | table-source-service | table-source-cell-range)? table-data-pilot-field+) ;
style-header-footer-properties-attlist ::= (svg:height::length)? (fo:min-height::length)? common-horizontal-margin-attlist common-vertical-margin-attlist common-margin-attlist common-border-attlist common-border-line-width-attlist common-padding-attlist common-background-color-attlist common-shadow-attlist (style:dynamic-spacing::boolean)? ;
style-column ::= style:column::style-column-attlist ;
style-num-letter-sync-attlist ::= (style:num-letter-sync::boolean)? ;
text-changed-region-attr ::= xml-id (text:id::NCName)? ;
draw-stroke-dash-attlist ::= draw:name::styleName (draw:display-name::string)? (draw:style::("rect" | "round"))? (draw:dots1::integer)? (draw:dots1-length::(length | percent))? (draw:dots2::integer)? (draw:dots2-length::(length | percent))? (draw:distance::(length | percent))? ;
text-bibliography-types ::= "article" | "book" | "booklet" | "conference" | "custom1" | "custom2" | "custom3" | "custom4" | "custom5" | "email" | "inbook" | "incollection" | "inproceedings" | "journal" | "manual" | "mastersthesis" | "misc" | "phdthesis" | "proceedings" | "techreport" | "unpublished" | "www" ;
table-last-column ::= table:last-column::common-table-template-attlist ;
config-config-item-map-named ::= config:config-item-map-named::(config-config-item-map-named-attlist config-config-item-map-entry+) ;
text-index-entry-chapter-attrs ::= (text:display::("name" | "number" | "number-and-name" | "plain-number" | "plain-number-and-name"))? (text:outline-level::positiveInteger)? ;
change-marks ::= (text:change::change-mark-attr) | (text:change-start::change-mark-attr) | (text:change-end::change-mark-attr) ;
common-field-data-style-name-attlist ::= (style:data-style-name::styleNameRef)? ;
config-config-item-map-named-attlist ::= config:name::string ;
draw-line ::= draw:line::(draw-line-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
style-ruby-properties-attlist ::= (style:ruby-position::("above" | "below"))? (style:ruby-align::("left" | "center" | "right" | "distribute-letter" | "distribute-space"))? ;
style-list-level-properties-content-strict ::= style-list-level-properties-attlist style-list-level-properties-elements ;
table-columns-and-groups ::= (table-table-column-group | table-columns-no-group)+ ;
draw-page-thumbnail ::= draw:page-thumbnail::(draw-page-thumbnail-attlist common-draw-position-attlist common-draw-size-attlist presentation-shape-attlist common-draw-shape-with-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc?) ;
office-image-content-prelude ::= ε ;
style-graphic-properties ::= style:graphic-properties::style-graphic-properties-content-strict ;
table-source-service-attlist ::= table:name::string table:source-name::string table:object-name::string (table:user-name::string)? (table:password::string)? ;
office-meta-content-strict ::= office-meta-data* ;
draw-handle ::= draw:handle::draw-handle-attlist ;
chart-plot-area ::= chart:plot-area::(chart-plot-area-attlist dr3d-light* chart-axis* chart-series* chart-stock-gain-marker? chart-stock-loss-marker? chart-stock-range-line? chart-wall? chart-floor?) ;
db-filter-statement ::= db:filter-statement::(db-command db-apply-command) ;
draw-param ::= draw:param::draw-param-attlist ;
number-percentage-style ::= number:percentage-style::(common-data-style-attlist style-text-properties? number-text? number-and-text? style-map*) ;
office-body-content ::= (office:text::(office-text-attlist office-text-content-prelude office-text-content-main office-text-content-epilogue)) | (office:drawing::(office-drawing-attlist office-drawing-content-prelude office-drawing-content-main office-drawing-content-epilogue)) | (office:presentation::(office-presentation-attlist office-presentation-content-prelude office-presentation-content-main office-presentation-content-epilogue)) | (office:spreadsheet::(office-spreadsheet-attlist office-spreadsheet-content-prelude office-spreadsheet-content-main office-spreadsheet-content-epilogue)) | (office:chart::(office-chart-attlist office-chart-content-prelude office-chart-content-main office-chart-content-epilogue)) | (office:image::(office-image-attlist office-image-content-prelude office-image-content-main office-image-content-epilogue)) | office-database ;
draw-contour-polygon ::= draw:contour-polygon::(common-contour-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-points-attlist) ;
chart-mean-value ::= chart:mean-value::chart-mean-value-attlist ;
table-source-cell-range-attlist ::= table:cell-range-address::cellRangeAddress ;
cellRangeAddressList ::= string() ;
style-table-properties-elements ::= style-background-image ;
style-graphic-properties-content-strict ::= style-graphic-properties-attlist style-graphic-fill-properties-attlist style-graphic-properties-elements ;
text-illustration-index ::= text:illustration-index::(common-section-attlist text-illustration-index-source text-index-body) ;
math-math ::= math:math::mathMarkup ;
common-table-template-attlist ::= table:style-name::styleNameRef (table:paragraph-style-name::styleNameRef)? ;
table-content-validation ::= table:content-validation::(table-validation-attlist table-help-message? (table-error-message | (table-error-macro office-event-listeners))?) ;
table-data-pilot-level ::= table:data-pilot-level::(table-data-pilot-level-attlist table-data-pilot-subtotals? table-data-pilot-members? table-data-pilot-display-info? table-data-pilot-sort-info? table-data-pilot-layout-info?) ;
table-dependency ::= table:dependency::(table:id::string) ;
text-conditional-text-attlist ::= text:condition::string text:string-value-if-true::string text:string-value-if-false::string (text:current-value::boolean)? ;
countryCode ::= string() ;
common-source-cell-range ::= (form:source-cell-range::(cellRangeAddress | string))? ;
style-table-column-properties-attlist ::= (style:column-width::positiveLength)? (style:rel-column-width::relativeLength)? (style:use-optimal-column-width::boolean)? common-break-attlist ;
common-draw-circle-ellipse-attlist ::= (draw:kind::("full" | "section" | "cut" | "arc"))? (draw:start-angle::angle)? (draw:end-angle::angle)? ;
text-page-number-attlist ::= common-field-num-format-attlist common-field-fixed-attlist (text:page-adjust::integer)? (text:select-page::("previous" | "current" | "next"))? ;
table-label-range-attlist ::= table:label-cell-range-address::cellRangeAddress table:data-cell-range-address::cellRangeAddress table:orientation::("column" | "row") ;
style-style ::= style:style::(style-style-attlist style-style-content style-map*) ;
draw-enhanced-geometry-attlist ::= (draw:type::custom-shape-type)? (svg:viewBox::(integer integer integer integer))? (draw:mirror-vertical::boolean)? (draw:mirror-horizontal::boolean)? (draw:text-rotate-angle::angle)? (draw:extrusion-allowed::boolean)? (draw:text-path-allowed::boolean)? (draw:concentric-gradient-fill-allowed::boolean)? (draw:extrusion::boolean)? (draw:extrusion-brightness::zeroToHundredPercent)? (draw:extrusion-depth::(length double))? (draw:extrusion-diffusion::percent)? (draw:extrusion-number-of-line-segments::integer)? (draw:extrusion-light-face::boolean)? (draw:extrusion-first-light-harsh::boolean)? (draw:extrusion-second-light-harsh::boolean)? (draw:extrusion-first-light-level::zeroToHundredPercent)? (draw:extrusion-second-light-level::zeroToHundredPercent)? (draw:extrusion-first-light-direction::vector3D)? (draw:extrusion-second-light-direction::vector3D)? (draw:extrusion-metal::boolean)? (dr3d:shade-mode::("flat" | "phong" | "gouraud" | "draft"))? (draw:extrusion-rotation-angle::(angle angle))? (draw:extrusion-rotation-center::vector3D)? (draw:extrusion-shininess::zeroToHundredPercent)? (draw:extrusion-skew::(double angle))? (draw:extrusion-specularity::zeroToHundredPercent)? (dr3d:projection::("parallel" | "perspective"))? (draw:extrusion-viewpoint::point3D)? (draw:extrusion-origin::(extrusionOrigin extrusionOrigin))? (draw:extrusion-color::boolean)? (draw:enhanced-path::string)? (draw:path-stretchpoint-x::double)? (draw:path-stretchpoint-y::double)? (draw:text-areas::string)? (draw:glue-points::string)? (draw:glue-point-type::("none" | "segments" | "rectangle"))? (draw:glue-point-leaving-directions::string)? (draw:text-path::boolean)? (draw:text-path-mode::("normal" | "path" | "shape"))? (draw:text-path-scale::("path" | "shape"))? (draw:text-path-same-letter-heights::boolean)? (draw:modifiers::string)? ;
common-field-name-attlist ::= text:name::variableName ;
text-index-entry-page-number ::= text:index-entry-page-number::((text:style-name::styleNameRef)?) ;
office-presentation-content-main ::= draw-page* ;
text-alphabetical-index-auto-mark-file ::= text:alphabetical-index-auto-mark-file::(xlink:type::"simple" xlink:href::anyIRI) ;
draw-gradient-attlist ::= (draw:start-color::color)? (draw:end-color::color)? (draw:start-intensity::zeroToHundredPercent)? (draw:end-intensity::zeroToHundredPercent)? ;
style-background-image-attlist ::= (style:repeat::("no-repeat" | "repeat" | "stretch"))? (style:position::("left" | "center" | "right" | "top" | "bottom" | (horiBackPos vertBackPos) | (vertBackPos horiBackPos)))? (style:filter-name::string)? (draw:opacity::zeroToHundredPercent)? ;
db-key-attlist ::= (db:name::string)? db:type::("primary" | "unique" | "foreign") (db:referenced-table-name::string)? (db:update-rule::("cascade" | "restrict" | "set-null" | "no-action" | "set-default"))? (db:delete-rule::("cascade" | "restrict" | "set-null" | "no-action" | "set-default"))? ;
style-drop-cap-attlist ::= (style:length::("word" | positiveInteger))? (style:lines::positiveInteger)? (style:distance::length)? (style:style-name::styleNameRef)? ;
table-data-pilot-members ::= table:data-pilot-members::(table-data-pilot-member*) ;
text-tracked-changes ::= (text:tracked-changes::(text-tracked-changes-attr text-changed-region*))? ;
office-chart-attlist ::= ε ;
number-hours-attlist ::= (number:style::("short" | "long"))? ;
cellRangeAddress ::= string() ;
office-meta ::= (office:meta::office-meta-content-strict)? ;
style-table-row-properties-attlist ::= (style:row-height::positiveLength)? (style:min-row-height::nonNegativeLength)? (style:use-optimal-row-height::boolean)? common-background-color-attlist common-break-attlist (fo:keep-together::("auto" | "always"))? ;
db-table-definitions ::= db:table-definitions::(db-table-definitions-attlist db-table-definition*) ;
chart-regression-curve ::= chart:regression-curve::(chart-regression-curve-attlist chart-equation?) ;
db-component ::= db:component::(db-component-attlist common-db-object-name common-db-object-title common-db-object-description (office-document | math-math)?) ;
text-bibliography-configuration ::= text:bibliography-configuration::(text-bibliography-configuration-attlist text-sort-key*) ;
common-stock-marker-attlist ::= (chart:style-name::styleNameRef)? ;
db-component-attlist ::= (xlink:type::"simple" xlink:href::anyIRI (xlink:show::"none")? (xlink:actuate::"onRequest")?)? (db:as-template::boolean)? ;
common-value-and-type-attlist ::= (office:value-type::"float" office:value::double) | (office:value-type::"percentage" office:value::double) | (office:value-type::"currency" office:value::double (office:currency::string)?) | (office:value-type::"date" office:date-value::dateOrDateTime) | (office:value-type::"time" office:time-value::duration) | (office:value-type::"boolean" office:boolean-value::boolean) | (office:value-type::"string" (office:string-value::string)?) ;
draw-caption ::= draw:caption::(draw-caption-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
text-index-body ::= text:index-body::(index-content-main*) ;
common-decimal-places-attlist ::= (number:decimal-places::integer)? ;
office-text-content-main ::= (text-content*) | (text-page-sequence shape*) ;
chart-wall ::= chart:wall::chart-wall-attlist ;
table-filter ::= table:filter::(table-filter-attlist table-filter-condition | table-filter-and | table-filter-or) ;
form-listbox-attlist ::= form-control-attlist common-disabled-attlist dropdown common-printable-attlist size common-tab-attlist common-title-attlist bound-column common-data-field-attlist list-source list-source-type common-linked-cell list-linkage-type common-source-cell-range (form:multiple::boolean)? (form:xforms-list-source::string)? ;
chart-data-label-attlist ::= common-draw-position-attlist (chart:style-name::styleNameRef)? ;
text-alphabetical-index-mark-attrs ::= (text:key1::string)? (text:key2::string)? (text:string-value-phonetic::string)? (text:key1-phonetic::string)? (text:key2-phonetic::string)? (text:main-entry::boolean)? ;
presentation-notes ::= presentation:notes::(common-presentation-header-footer-attlist presentation-notes-attlist office-forms shape*) ;
number-number ::= number:number::(number-number-attlist common-decimal-places-attlist common-number-attlist number-embedded-text*) ;
office-drawing-content-main ::= draw-page* ;
table-decls ::= table-calculation-settings? table-content-validations? table-label-ranges? ;
style-table-cell-properties-content-strict ::= style-table-cell-properties-attlist style-table-cell-properties-elements ;
text-index-scope-attr ::= (text:index-scope::("document" | "chapter"))? ;
presentation-animation-group ::= presentation:animation-group::(presentation-animation-elements*) ;
presentation-notes-attlist ::= (style:page-layout-name::styleNameRef)? (draw:style-name::styleNameRef)? ;
common-border-attlist ::= (fo:border::string)? (fo:border-top::string)? (fo:border-bottom::string)? (fo:border-left::string)? (fo:border-right::string)? ;
table-database-range-attlist ::= (table:name::string)? (table:is-selection::boolean)? (table:on-update-keep-styles::boolean)? (table:on-update-keep-size::boolean)? (table:has-persistent-data::boolean)? (table:orientation::("column" | "row"))? (table:contains-header::boolean)? (table:display-filter-buttons::boolean)? table:target-range-address::cellRangeAddress (table:refresh-delay::boolean)? ;
common-spin-button ::= (form:spin-button::boolean)? ;
db-show-deleted ::= (db:show-deleted::boolean)? ;
text-illustration-index-source ::= text:illustration-index-source::(text-illustration-index-source-attrs text-index-title-template? text-illustration-index-entry-template?) ;
lineWidth ::= "auto" | "normal" | "bold" | "thin" | "medium" | "thick" | positiveInteger | percent | positiveLength ;
clipShape ::= string() ;
target-frame ::= (office:target-frame::targetFrameName)? ;
base64Binary ::= string() ;
table-named-range ::= table:named-range::table-named-range-attlist ;
style-header ::= style:header::(common-style-header-footer-attlist header-footer-content) ;
table-cell-address ::= table:cell-address::common-table-cell-address-attlist ;
office-document-meta ::= office:document-meta::(office-document-common-attrs office-meta) ;
db-key-column-attlist ::= (db:name::string)? (db:related-column-name::string)? ;
db-query-collection-attlist ::= ε ;
common-draw-data-attlist ::= xlink:type::"simple" xlink:href::anyIRI (xlink:show::"embed")? (xlink:actuate::"onLoad")? ;
db-table-definition ::= db:table-definition::(common-db-table-name-attlist db-table-definition-attlist db-column-definitions db-keys? db-indices?) ;
db-forms ::= db:forms::(db-forms-attlist (db-component | db-component-collection)*) ;
text-table-of-content-entry-template ::= text:table-of-content-entry-template::(text-table-of-content-entry-template-attlist text-table-of-content-children*) ;
lineStyle ::= "none" | "solid" | "dotted" | "dash" | "long-dash" | "dot-dash" | "dot-dot-dash" | "wave" ;
number-quarter-attlist ::= (number:style::("short" | "long"))? ;
table-filter-condition-attlist ::= table:field-number::nonNegativeInteger table:value::(string | double) table:operator::string (table:case-sensitive::string)? (table:data-type::("text" | "number"))? ;
any-time ::= number-hours | number-am-pm | number-minutes | number-seconds ;
db-table-include-filter ::= db:table-include-filter::(db-table-include-filter-attlist db-table-filter-pattern+) ;
office-process-content ::= (office:process-content::boolean)? ;
form-date-attlist ::= (form:value::date)? (form:current-value::date)? (form:min-value::date)? (form:max-value::date)? ;
common-form-relative-image-position-attlist ::= ((form:image-position::"center")?) | (form:image-position::("start" | "end" | "top" | "bottom") (form:image-align::("start" | "center" | "end"))?) ;
presentation-play ::= presentation:play::presentation-play-attlist ;
presentation-animations ::= presentation:animations::((presentation-animation-elements | presentation-animation-group)*) ;
style-footnote-sep-attlist ::= (style:width::length)? (style:rel-width::percent)? (style:color::color)? (style:line-style::lineStyle)? (style:adjustment::("left" | "center" | "right"))? (style:distance-before-sep::length)? (style:distance-after-sep::length)? ;
table-first-row ::= table:first-row::common-table-template-attlist ;
style-page-layout-properties-content-strict ::= style-page-layout-properties-attlist style-page-layout-properties-elements ;
table-database-source-table ::= table:database-source-query::table-database-source-query-attlist ;
db-connection-data ::= db:connection-data::(db-connection-data-attlist db-database-description | db-connection-resource db-login?) ;
table-table-cell-range-source-attlist ::= table:name::string table:last-column-spanned::positiveInteger table:last-row-spanned::positiveInteger ;
NCName ::= string() ;
IDREFS ::= string() ;
common-maxlength-attlist ::= (form:max-length::nonNegativeInteger)? ;
common-rotation-angle-attlist ::= (style:rotation-angle::angle)? ;
form-file-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist common-linked-cell ;
text-bookmark ::= text:bookmark::text-bookmark-attlist ;
table-table-column ::= table:table-column::table-table-column-attlist ;
text-sequence-ref-content ::= (text:reference-format::(common-ref-format-values | "category-and-value" | "caption" | "value"))? ;
presentation-show ::= presentation:show::presentation-show-attlist ;
draw-page-thumbnail-attlist ::= (draw:page-number::positiveInteger)? ;
text-bookmark-attlist ::= text:name::string xml-id? ;
text-style-name ::= (form:text-style-name::styleNameRef)? ;
text-index-entry-tab-stop-attrs ::= (style:leader-char::character)? (style:type::"right") | (style:type::"left" style:position::length) ;
table-source-cell-range ::= table:source-cell-range::(table-source-cell-range-attlist table-filter?) ;
table-data-pilot-display-info-attlist ::= table:enabled::boolean table:data-field::string table:member-count::nonNegativeInteger table:display-member-mode::("from-top" | "from-bottom") ;
common-field-database-table-attlist ::= text:table-name::string (text:table-type::("table" | "query" | "command"))? ;
common-margin-attlist ::= (fo:margin::(nonNegativeLength | percent))? ;
custom-shape-type ::= "non-primitive" | string ;
chart-stock-loss-marker ::= chart:stock-loss-marker::common-stock-marker-attlist ;
common-field-display-value-formula-attlist ::= (text:display::("value" | "formula"))? ;
text-id ::= text:id::string ;
common-db-object-description ::= (db:description::string)? ;
office-event-listeners ::= office:event-listeners::((script-event-listener | presentation-event-listener)*) ;
style-page-layout-content ::= style-page-layout-properties? style-header-style? style-footer-style? ;
draw-object-ole-attlist ::= (draw:class-id::string)? xml-id? ;
db-index-attlist ::= db:name::string (db:catalog-name::string)? (db:is-unique::boolean)? (db:is-clustered::boolean)? ;
db-local-socket-name ::= (db:local-socket::string)? ;
anim-animate-color-attlist ::= (anim:color-interpolation::("rgb" | "hsl"))? (anim:color-interpolation-direction::("clockwise" | "counter-clockwise"))? ;
common-numeric-control-attlist ::= form-control-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-convert-empty-attlist common-data-field-attlist ;
office-image-content-epilogue ::= ε ;
text-bookmark-start ::= text:bookmark-start::text-bookmark-start-attlist ;
table-label-range ::= table:label-range::table-label-range-attlist ;
form-radio-attlist ::= form-control-attlist current-selected common-disabled-attlist label common-printable-attlist selected common-tab-attlist common-title-attlist common-value-attlist common-data-field-attlist common-form-visual-effect-attlist common-form-relative-image-position-attlist common-linked-cell ;
style-footer-style ::= style:footer-style::(style-header-footer-properties?) ;
common-background-color-attlist ::= (fo:background-color::("transparent" | color))? ;
common-in-content-meta-attlist ::= xhtml:about::URIorSafeCURIE xhtml:property::CURIEs common-meta-literal-attlist ;
office-text-attlist ::= (text:global::boolean)? (text:use-soft-page-breaks::boolean)? ;
table-table-row-group ::= table:table-row-group::(table-table-row-group-attlist table-rows-and-groups) ;
text-illustration-index-entry-template ::= text:illustration-index-entry-template::text-illustration-index-entry-content ;
presentation-event-listener-attlist ::= script:event-name::string presentation:action::("none" | "previous-page" | "next-page" | "first-page" | "last-page" | "hide" | "stop" | "execute" | "show" | "verb" | "fade-out" | "sound" | "last-visited-page") (presentation:effect::presentationEffects)? (presentation:direction::presentationEffectDirections)? (presentation:speed::presentationSpeeds)? (presentation:start-scale::percent)? (xlink:type::"simple" xlink:href::anyIRI (xlink:show::"embed")? (xlink:actuate::"onRequest")?)? (presentation:verb::nonNegativeInteger)? ;
db-table-exclude-filter-attlist ::= ε ;
nonNegativePixelLength ::= string() ;
office-chart-content-epilogue ::= table-functions ;
draw-text-box-attlist ::= (draw:chain-next-name::string)? (draw:corner-radius::nonNegativeLength)? (fo:min-height::(length | percent))? (fo:min-width::(length | percent))? (fo:max-height::(length | percent))? (fo:max-width::(length | percent))? (xml-id (text:id::NCName)?)? ;
tab-cycles ::= "records" | "current" | "page" ;
table-table-row-group-attlist ::= (table:display::boolean)? ;
common-border-line-width-attlist ::= (style:border-line-width::borderWidths)? (style:border-line-width-top::borderWidths)? (style:border-line-width-bottom::borderWidths)? (style:border-line-width-left::borderWidths)? (style:border-line-width-right::borderWidths)? ;
draw-circle ::= draw:circle::((draw-circle-attlist common-draw-circle-ellipse-pos-attlist) | (common-draw-position-attlist common-draw-size-attlist) common-draw-circle-ellipse-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
presentation-settings ::= (presentation:settings::(presentation-settings-attlist presentation-show*))? ;
config-items ::= (config-config-item | config-config-item-set | config-config-item-map-named | config-config-item-map-indexed)+ ;
db-schema-definition ::= db:schema-definition::(db-schema-definition-attlist db-table-definitions) ;
pathData ::= string() ;
text-outline-level-style-attlist ::= text:level::positiveInteger (text:style-name::styleNameRef)? common-num-format-attlist common-num-format-prefix-suffix-attlist (text:display-levels::positiveInteger)? (text:start-value::positiveInteger)? ;
table-data-pilot-subtotal-attlist ::= table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string) ;
common-anim-values-attlist ::= (smil:values::string)? (anim:formula::string)? common-anim-set-values-attlist (smil:from::string)? (smil:by::string)? ;
table-table-template-attlist ::= table:name::string table:first-row-start-column::rowOrCol table:first-row-end-column::rowOrCol table:last-row-start-column::rowOrCol table:last-row-end-column::rowOrCol ;
db-delimiter-attlist ::= (db:field::string)? (db:string::string)? (db:decimal::string)? (db:thousand::string)? ;
office-text-content-prelude ::= office-forms text-tracked-changes text-decls table-decls ;
dr3d-light ::= dr3d:light::dr3d-light-attlist ;
presentation-settings-attlist ::= (presentation:start-page::string)? (presentation:show::string)? (presentation:full-screen::boolean)? (presentation:endless::boolean)? (presentation:pause::duration)? (presentation:show-logo::boolean)? (presentation:force-manual::boolean)? (presentation:mouse-visible::boolean)? (presentation:mouse-as-pen::boolean)? (presentation:start-with-navigator::boolean)? (presentation:animations::("enabled" | "disabled"))? (presentation:transition-on-click::("enabled" | "disabled"))? (presentation:stay-on-top::boolean)? (presentation:show-end-of-presentation-slide::boolean)? ;
number-day-of-week-attlist ::= (number:style::("short" | "long"))? ;
number-and-text ::= number-number number-text? ;
common-keep-with-next-attlist ::= (fo:keep-with-next::("auto" | "always"))? ;
presentation-show-shape ::= presentation:show-shape::(common-presentation-effect-attlist presentation-sound?) ;
text-object-index ::= text:object-index::(common-section-attlist text-object-index-source text-index-body) ;
office-document-common-attrs ::= office:version::"1.2" (grddl:transformation::(anyIRI*))? ;
common-draw-style-name-attlist ::= ((draw:style-name::styleNameRef)? (draw:class-names::styleNameRefs)?) | ((presentation:style-name::styleNameRef)? (presentation:class-names::styleNameRefs)?) ;
extrusionOrigin ::= string() ;
office-master-styles ::= (office:master-styles::(style-master-page* style-handout-master? draw-layer-set?))? ;
table-table-header-rows ::= table:table-header-rows::((text-soft-page-break? table-table-row)+) ;
scriptCode ::= string() ;
db-indices ::= db:indices::(db-indices-attlist db-index+) ;
text-list-level-style-image-attr ::= common-draw-data-attlist | office-binary-data ;
number-minutes-attlist ::= (number:style::("short" | "long"))? ;
db-login-attlist ::= ((db:user-name::string) | (db:use-system-user::boolean))? (db:is-password-required::boolean)? (db:login-timeout::positiveInteger)? ;
table-data-pilot-layout-info-attlist ::= table:layout-mode::("tabular-layout" | "outline-subtotals-top" | "outline-subtotals-bottom") table:add-empty-lines::boolean ;
table-filter-attlist ::= (table:target-range-address::cellRangeAddress)? (table:condition-source::("self" | "cell-range"))? (table:condition-source-range-address::cellRangeAddress)? (table:display-duplicates::boolean)? ;
common-convert-empty-attlist ::= (form:convert-empty-to-null::boolean)? ;
table-last-row ::= table:last-row::common-table-template-attlist ;
shape-instance ::= draw-rect | draw-line | draw-polyline | draw-polygon | draw-regular-polygon | draw-path | draw-circle | draw-ellipse | draw-g | draw-page-thumbnail | draw-frame | draw-measure | draw-caption | draw-connector | draw-control | dr3d-scene | draw-custom-shape ;
table-change-track-table-cell ::= table:change-track-table-cell::(table-change-track-table-cell-attlist text-p*) ;
fontVariant ::= "normal" | "small-caps" ;
text-bibliography-entry-template-attrs ::= text:bibliography-type::text-bibliography-types text:style-name::styleNameRef ;
svg-font-face-format ::= svg:font-face-format::((svg:string::string)?) ;
style-map-attlist ::= style:condition::string style:apply-style-name::styleNameRef (style:base-cell-address::cellAddress)? ;
table-desc ::= table:desc::string() ;
table-sort-attlist ::= (table:bind-styles-to-content::boolean)? (table:target-range-address::cellRangeAddress)? (table:case-sensitive::boolean)? (table:language::languageCode)? (table:country::countryCode)? (table:script::scriptCode)? (table:rfc-language-tag::language)? (table:algorithm::string)? (table:embedded-number-behavior::("alpha-numeric" | "integer" | "double"))? ;
chart-chart ::= chart:chart::(chart-chart-attlist chart-title? chart-subtitle? chart-footer? chart-legend? chart-plot-area table-table?) ;
office-spreadsheet-attlist ::= (table:structure-protected::boolean)? (table:protection-key::string)? (table:protection-key-digest-algorithm::anyIRI)? ;
style-chart-properties-content-strict ::= style-chart-properties-attlist style-chart-properties-elements ;
style-header-left ::= style:header-left::(common-style-header-footer-attlist header-footer-content) ;
db-column-definitions-attlist ::= ε ;
common-value-type-attlist ::= office:value-type::valueType ;
table-rows-no-group ::= (table-rows (table-table-header-rows table-rows?)?) | (table-table-header-rows table-rows?) ;
table-filter-condition ::= table:filter-condition::(table-filter-condition-attlist table-filter-set-item*) ;
text-soft-page-break ::= text:soft-page-break::ε ;
common-draw-position-attlist ::= (svg:x::coordinate)? (svg:y::coordinate)? ;
common-padding-attlist ::= (fo:padding::nonNegativeLength)? (fo:padding-top::nonNegativeLength)? (fo:padding-bottom::nonNegativeLength)? (fo:padding-left::nonNegativeLength)? (fo:padding-right::nonNegativeLength)? ;
form-form-attlist ::= (xlink:type::"simple" xlink:href::anyIRI (xlink:actuate::"onRequest")?)? (office:target-frame::targetFrameName)? (form:method::("get" | "post" | string))? (form:enctype::string)? (form:allow-deletes::boolean)? (form:allow-inserts::boolean)? (form:allow-updates::boolean)? (form:apply-filter::boolean)? (form:command-type::("table" | "query" | "command"))? (form:command::string)? (form:datasource::(anyIRI | string))? (form:master-fields::string)? (form:detail-fields::string)? (form:escape-processing::boolean)? (form:filter::string)? (form:ignore-result::boolean)? (form:navigation-mode::navigation)? (form:order::string)? (form:tab-cycle::tab-cycles)? ;
table-table-columns ::= table:table-columns::(table-table-column+) ;
text-tracked-changes-attr ::= (text:track-changes::boolean)? ;
style-table-properties-content-strict ::= style-table-properties-attlist style-table-properties-elements ;
table-table-header-columns ::= table:table-header-columns::(table-table-column+) ;
table-filter-or ::= table:filter-or::((table-filter-and | table-filter-condition)+) ;
common-printable-attlist ::= (form:printable::boolean)? ;
heading-attrs ::= text:outline-level::positiveInteger (text:restart-numbering::boolean)? (text:start-value::nonNegativeInteger)? (text:is-list-header::boolean)? ;
table-data-pilot-sort-info-attlist ::= (table:sort-mode::"data" table:data-field::string) | (table:sort-mode::("none" | "manual" | "name")) table:order::("ascending" | "descending") ;
form-textarea-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist common-linked-cell ;
draw-glue-point-attlist ::= draw:id::nonNegativeInteger svg:x::(distance | percent) svg:y::(distance | percent) (draw:align::("top-left" | "top" | "top-right" | "left" | "center" | "right" | "bottom-left" | "bottom-right"))? draw:escape-direction::("auto" | "left" | "right" | "up" | "down" | "horizontal" | "vertical") ;
namespacedToken ::= string() ;
style-footnote-sep ::= (style:footnote-sep::style-footnote-sep-attlist)? ;
style-header-style ::= style:header-style::(style-header-footer-properties?) ;
anim-audio-attlist ::= (xlink:href::anyIRI)? (anim:audio-level::double)? ;
number-day-attlist ::= (number:style::("short" | "long"))? ;
text-page-continuation-attlist ::= text:select-page::("previous" | "next") (text:string-value::string)? ;
text-user-index-entry-template-attrs ::= text:outline-level::positiveInteger text:style-name::styleNameRef ;
text-illustration-index-entry-content ::= text-illustration-index-entry-template-attrs (text-index-entry-chapter | text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop)* ;
positiveInteger ::= integer() ;
number-embedded-text-attlist ::= number:position::integer ;
style-master-page ::= style:master-page::(style-master-page-attlist (style-header style-header-left?)? (style-footer style-footer-left?)? draw-layer-set? office-forms? shape* animation-element? presentation-notes?) ;
style-handout-master-attlist ::= (presentation:presentation-page-layout-name::styleNameRef)? style:page-layout-name::styleNameRef (draw:style-name::styleNameRef)? ;
text-index-title ::= text:index-title::(common-section-attlist index-content-main*) ;
text-linenumbering-separator ::= text:linenumbering-separator::((text:increment::nonNegativeInteger)? string()) ;
text-alphabetical-index-entry-template-attrs ::= text:outline-level::("1" | "2" | "3" | "separator") text:style-name::styleNameRef ;
presentation-play-attlist ::= draw:shape-id::IDREF (presentation:speed::presentationSpeeds)? ;
table-highlighted-range-attlist ::= (table:cell-range-address::cellRangeAddress)? table:direction::("from-another-table" | "to-another-table" | "from-same-table") (table:contains-error::boolean)? ;
table-null-date ::= table:null-date::((table:value-type::"date")? (table:date-value::date)?) ;
style-master-page-attlist ::= style:name::styleName (style:display-name::string)? style:page-layout-name::styleNameRef (draw:style-name::styleNameRef)? (style:next-style-name::styleNameRef)? ;
text-user-index ::= text:user-index::(common-section-attlist text-user-index-source text-index-body) ;
db-application-connection-settings ::= db:application-connection-settings::(db-application-connection-settings-attlist db-table-filter? db-table-type-filter? db-data-source-settings?) ;
draw-marker ::= draw:marker::(draw-marker-attlist common-draw-viewbox-attlist common-draw-path-data-attlist) ;
table-database-source-table-attlist ::= table:database-name::string table:database-table-name::string ;
number-scientific-number-attlist ::= (number:min-exponent-digits::integer)? ;
db-driver-settings ::= db:driver-settings::(db-driver-settings-attlist db-auto-increment? db-delimiter? db-character-set? db-table-settings?) ;
db-application-connection-settings-attlist ::= (db:is-table-name-length-limited::boolean)? (db:enable-sql92-check::boolean)? (db:append-table-alias-name::boolean)? (db:ignore-driver-privileges::boolean)? (db:boolean-comparison-mode::("equal-integer" | "is-boolean" | "equal-boolean" | "equal-use-only-zero"))? (db:use-catalog::boolean)? (db:max-row-count::integer)? (db:suppress-version-columns::boolean)? ;
db-keys-attlist ::= ε ;
gradient-style ::= "linear" | "axial" | "radial" | "ellipsoid" | "square" | "rectangular" ;
number-era ::= number:era::(number-era-attlist common-calendar-attlist) ;
paragraph-content-or-hyperlink ::= paragraph-content | text-a ;
text-changed-region ::= text:changed-region::(text-changed-region-attr text-changed-region-content) ;
text-alphabetical-index-source ::= text:alphabetical-index-source::(text-alphabetical-index-source-attrs text-index-title-template? text-alphabetical-index-entry-template*) ;
common-draw-z-index-attlist ::= (draw:z-index::nonNegativeInteger)? ;
table-dependencies ::= table:dependencies::(table-dependency+) ;
table-target-range-address ::= table:target-range-address::common-table-range-attlist ;
office-document-styles ::= office:document-styles::(office-document-common-attrs office-font-face-decls office-styles office-automatic-styles office-master-styles) ;
text-hidden-text-attlist ::= text:condition::string text:string-value::string (text:is-hidden::boolean)? ;
table-named-expression-attlist ::= table:name::string table:expression::string (table:base-cell-address::cellAddress)? ;
script-event-listener-attlist ::= script:event-name::string script:language::string (script:macro-name::string) | (xlink:type::"simple" xlink:href::anyIRI (xlink:actuate::"onRequest")?) ;
text-variable-decl ::= text:variable-decl::(common-field-name-attlist common-value-type-attlist) ;
office-document-content ::= office:document-content::(office-document-common-attrs office-scripts office-font-face-decls office-automatic-styles office-body) ;
anim-animate-transform-attlist ::= svg:type::("translate" | "scale" | "rotate" | "skewX" | "skewY") ;
common-presentation-effect-attlist ::= draw:shape-id::IDREF (presentation:effect::presentationEffects)? (presentation:direction::presentationEffectDirections)? (presentation:speed::presentationSpeeds)? (presentation:delay::duration)? (presentation:start-scale::percent)? (presentation:path-id::string)? ;
style-columns-attlist ::= fo:column-count::positiveInteger (fo:column-gap::length)? ;
config-config-item ::= config:config-item::(config-config-item-attlist string()) ;
table-first-column ::= table:first-column::common-table-template-attlist ;
anim-iterate-attlist ::= common-anim-target-attlist (anim:iterate-type::string)? (anim:iterate-interval::duration)? ;
db-is-first-row-header-line ::= (db:is-first-row-header-line::boolean)? ;
dr3d-sphere-attlist ::= (dr3d:center::vector3D)? (dr3d:size::vector3D)? ;
draw-fill-image-attlist ::= draw:name::styleName (draw:display-name::string)? (svg:width::length)? (svg:height::length)? ;
chart-mean-value-attlist ::= (chart:style-name::styleNameRef)? ;
presentation-header-decl-attlist ::= presentation:name::string ;
common-background-transparency-attlist ::= (style:background-transparency::zeroToHundredPercent)? ;
office-dde-source-attlist ::= (office:name::string)? (office:conversion-mode::("into-default-style-data-style" | "into-english-number" | "keep-text"))? ;
text-object-index-source ::= text:object-index-source::(text-object-index-source-attrs text-index-title-template? text-object-index-entry-template?) ;
text-dde-connection-decl-attlist ::= office:name::string ;
table-data-pilot-group-member ::= table:data-pilot-group-member::table-data-pilot-group-member-attlist ;
office-meta-data ::= (meta:generator::string) | (dc:title::string) | (dc:description::string) | (dc:subject::string) | (meta:keyword::string) | (meta:initial-creator::string) | dc-creator | (meta:printed-by::string) | (meta:creation-date::dateTime) | dc-date | (meta:print-date::dateTime) | (meta:template::(xlink:type::"simple" xlink:href::anyIRI (xlink:actuate::"onRequest")? (xlink:title::string)? (meta:date::dateTime)?)) | (meta:auto-reload::((xlink:type::"simple" xlink:href::anyIRI (xlink:show::"replace")? (xlink:actuate::"onLoad")?)? (meta:delay::duration)?)) | (meta:hyperlink-behaviour::((office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))?)) | (dc:language::language) | (meta:editing-cycles::nonNegativeInteger) | (meta:editing-duration::duration) | (meta:document-statistic::((meta:page-count::nonNegativeInteger)? (meta:table-count::nonNegativeInteger)? (meta:draw-count::nonNegativeInteger)? (meta:image-count::nonNegativeInteger)? (meta:ole-object-count::nonNegativeInteger)? (meta:object-count::nonNegativeInteger)? (meta:paragraph-count::nonNegativeInteger)? (meta:word-count::nonNegativeInteger)? (meta:character-count::nonNegativeInteger)? (meta:frame-count::nonNegativeInteger)? (meta:sentence-count::nonNegativeInteger)? (meta:syllable-count::nonNegativeInteger)? (meta:non-whitespace-character-count::nonNegativeInteger)? (meta:row-count::nonNegativeInteger)? (meta:cell-count::nonNegativeInteger)?)) | (meta:user-defined::(meta:name::string (meta:value-type::"float" double) | (meta:value-type::"date" dateOrDateTime) | (meta:value-type::"time" duration) | (meta:value-type::"boolean" boolean) | (meta:value-type::"string" string) | string())) ;
text-bibliography-entry-template ::= text:bibliography-entry-template::(text-bibliography-entry-template-attrs (text-index-entry-span | text-index-entry-tab-stop | text-index-entry-bibliography)*) ;
style-region-right ::= style:region-right::region-content ;
text-page-sequence ::= text:page-sequence::(text-page+) ;
common-draw-points-attlist ::= draw:points::points ;
common-ref-format-values ::= "page" | "chapter" | "direction" | "text" ;
db-column-definition ::= db:column-definition::(db-column-definition-attlist common-db-default-value) ;
chart-error-indicator ::= chart:error-indicator::chart-error-indicator-attlist ;
chart-title-attlist ::= (table:cell-range::cellRangeAddressList)? common-draw-position-attlist (chart:style-name::styleNameRef)? ;
db-database-description ::= db:database-description::(db-database-description-attlist db-file-based-database | db-server-database) ;
dr3d-cube-attlist ::= (dr3d:min-edge::vector3D)? (dr3d:max-edge::vector3D)? ;
form-property-type-and-value-list ::= (office:value-type::"float" (form:list-value::(office:value::double))*) | (office:value-type::"percentage" (form:list-value::(office:value::double))*) | (office:value-type::"currency" (form:list-value::(office:value::double (office:currency::string)?))*) | (office:value-type::"date" (form:list-value::(office:date-value::dateOrDateTime))*) | (office:value-type::"time" (form:list-value::(office:time-value::duration))*) | (office:value-type::"boolean" (form:list-value::(office:boolean-value::boolean))*) | (office:value-type::"string" (form:list-value::(office:string-value::string))*) | (office:value-type::"void") ;
table-dde-links ::= table:dde-links::(table-dde-link+) ;
text-illustration-index-source-attrs ::= text-index-scope-attr text-relative-tab-stop-position-attr (text:use-caption::boolean)? (text:caption-sequence-name::string)? (text:caption-sequence-format::("text" | "category-and-value" | "caption"))? ;
form-text-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist common-linked-cell ;
common-writing-mode-attlist ::= (style:writing-mode::("lr-tb" | "rl-tb" | "tb-rl" | "tb-lr" | "lr" | "rl" | "tb" | "page"))? ;
xforms-bind-attlist ::= (xforms:bind::string)? ;
text-note-ref-content ::= (text:reference-format::common-ref-format-values)? text-note-class ;
draw-opacity ::= draw:opacity::(common-draw-gradient-attlist draw-opacity-attlist) ;
style-default-page-layout ::= style:default-page-layout::style-page-layout-content ;
form-column ::= form:column::(form-column-attlist column-controls+) ;
table-data-pilot-groups-attlist ::= table:source-field-name::string (table:date-start::(dateOrDateTime | "auto")) | (table:start::(double | "auto")) (table:date-end::(dateOrDateTime | "auto")) | (table:end::(double | "auto")) table:step::double table:grouped-by::("seconds" | "minutes" | "hours" | "days" | "months" | "quarters" | "years") ;
presentationEffectDirections ::= "none" | "from-left" | "from-top" | "from-right" | "from-bottom" | "from-center" | "from-upper-left" | "from-upper-right" | "from-lower-left" | "from-lower-right" | "to-left" | "to-top" | "to-right" | "to-bottom" | "to-upper-left" | "to-upper-right" | "to-lower-right" | "to-lower-left" | "path" | "spiral-inward-left" | "spiral-inward-right" | "spiral-outward-left" | "spiral-outward-right" | "vertical" | "horizontal" | "to-center" | "clockwise" | "counter-clockwise" ;
table-data-pilot-subtotal ::= table:data-pilot-subtotal::table-data-pilot-subtotal-attlist ;
text-outline-level-style ::= text:outline-level-style::(text-outline-level-style-attlist style-list-level-properties? style-text-properties?) ;
text-list-style-attr ::= style:name::styleName (style:display-name::string)? (text:consecutive-numbering::boolean)? ;
style-table-column-properties-content-strict ::= style-table-column-properties-attlist style-table-column-properties-elements ;
shadowType ::= "none" | string ;
text-index-source-styles ::= text:index-source-styles::(text:outline-level::positiveInteger text-index-source-style*) ;
number-day-of-week ::= number:day-of-week::(number-day-of-week-attlist common-calendar-attlist) ;
target-location ::= (xlink:href::anyIRI)? ;
common-anim-named-target-attlist ::= smil:attributeName::string ;
office-image-content-main ::= draw-frame ;
form-item-attlist ::= label ;
style-table-row-properties-content-strict ::= style-table-row-properties-attlist style-table-row-properties-elements ;
text-decls ::= (text:variable-decls::(text-variable-decl*))? (text:sequence-decls::(text-sequence-decl*))? (text:user-field-decls::(text-user-field-decl*))? (text:dde-connection-decls::(text-dde-connection-decl*))? text-alphabetical-index-auto-mark-file? ;
db-table-presentation ::= db:table-representation::(db-table-presentation-attlist common-db-table-name-attlist common-db-object-title common-db-object-description common-db-table-style-name db-order-statement? db-filter-statement? db-columns?) ;
office-binary-data ::= office:binary-data::base64Binary ;
text-list-style ::= text:list-style::(text-list-style-attr text-list-style-content*) ;
text-time-attlist ::= common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::timeOrDateTime)? (text:time-adjust::duration)? ;
common-timing-attlist ::= common-basic-timing-attlist common-time-manip-attlist ;
table-functions ::= table-named-expressions? table-database-ranges? table-data-pilot-tables? table-consolidation? table-dde-links? ;
chart-equation ::= chart:equation::(chart-equation-attlist text-p?) ;
zeroToHundredPercent ::= string() ;
form-combobox-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist dropdown common-maxlength-attlist common-printable-attlist common-readonly-attlist size common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist list-source list-source-type common-linked-cell common-source-cell-range (form:auto-complete::boolean)? ;
text-database-next-attlist ::= common-field-database-table (text:condition::string)? ;
office-presentation-content-prelude ::= text-decls table-decls presentation-decls ;
common-vertical-rel-attlist ::= (style:vertical-rel::("page" | "page-content" | "frame" | "frame-content" | "paragraph" | "paragraph-content" | "char" | "line" | "baseline" | "text"))? ;
table-filter-set-item ::= table:filter-set-item::(table:value::string) ;
db-data-source-settings-attlist ::= ε ;
table-data-pilot-member ::= table:data-pilot-member::table-data-pilot-member-attlist ;
number-currency-symbol ::= number:currency-symbol::(number-currency-symbol-attlist string()) ;
db-component-collection-attlist ::= ε ;
valueType ::= "float" | "time" | "date" | "percentage" | "currency" | "boolean" | "string" ;
form-value-range-attlist ::= form-control-attlist common-disabled-attlist common-printable-attlist common-tab-attlist common-title-attlist common-value-attlist common-linked-cell common-repeat common-delay-for-repeat (form:max-value::integer)? (form:min-value::integer)? (form:step-size::positiveInteger)? (form:page-step-size::positiveInteger)? (form:orientation::("horizontal" | "vertical"))? ;
table-error-macro ::= table:error-macro::((table:execute::boolean)?) ;
config-config-item-set ::= config:config-item-set::(config-config-item-set-attlist config-items) ;
presentation-dim-attlist ::= draw:shape-id::IDREF draw:color::color ;
number-year ::= number:year::(number-year-attlist common-calendar-attlist) ;
text-index-entry-span ::= text:index-entry-span::((text:style-name::styleNameRef)? string()) ;
table-sort ::= table:sort::(table-sort-attlist table-sort-by+) ;
styleNameRefs ::= string()* ;
dc-date ::= dc:date::dateTime ;
db-table-setting-attlist ::= db-is-first-row-header-line db-show-deleted ;
text-database-row-select-attlist ::= common-field-database-table (text:condition::string)? (text:row-number::nonNegativeInteger)? ;
chart-axis ::= chart:axis::(chart-axis-attlist chart-title? chart-categories? chart-grid*) ;
table-database-source-sql ::= table:database-source-sql::table-database-source-sql-attlist ;
draw-custom-shape ::= draw:custom-shape::(draw-custom-shape-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text draw-enhanced-geometry?) ;
form-form ::= form:form::(common-form-control-attlist form-form-attlist form-properties? office-event-listeners? (controls | form-form)* form-connection-resource?) ;
list-source ::= (form:list-source::string)? ;
common-draw-gradient-attlist ::= (draw:name::styleName)? (draw:display-name::string)? draw:style::gradient-style (draw:cx::percent)? (draw:cy::percent)? (draw:angle::angle)? (draw:border::percent)? ;
draw-polyline ::= draw:polyline::(common-draw-points-attlist common-draw-position-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
text-numbered-paragraph ::= text:numbered-paragraph::(text-numbered-paragraph-attr text-number? text-p | text-h) ;
text-list-level-style-bullet-attr ::= (text:style-name::styleNameRef)? text:bullet-char::character common-num-format-prefix-suffix-attlist (text:bullet-relative-size::percent)? ;
text-alphabetical-index-entry-template ::= text:alphabetical-index-entry-template::(text-alphabetical-index-entry-template-attrs (text-index-entry-chapter | text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop)*) ;
common-table-change-attlist ::= table:id::string (table:acceptance-state::("accepted" | "rejected" | "pending"))? (table:rejecting-change-id::string)? ;
common-field-formula-attlist ::= (text:formula::string)? ;
chart-chart-attlist ::= chart:class::namespacedToken common-draw-size-attlist (chart:column-mapping::string)? (chart:row-mapping::string)? (chart:style-name::styleNameRef)? (xlink:type::"simple" xlink:href::anyIRI)? xml-id? ;
table-data-pilot-field ::= table:data-pilot-field::(table-data-pilot-field-attlist table-data-pilot-level? table-data-pilot-field-reference? table-data-pilot-groups?) ;
style-table-cell-properties-elements ::= style-background-image ;
draw-custom-shape-attlist ::= (draw:engine::namespacedToken)? (draw:data::string)? ;
table-highlighted-range-attlist-invalid ::= table:marked-invalid::boolean ;
draw-text ::= (text-p | text-list)* ;
text-get-page-variable-attlist ::= common-field-num-format-attlist ;
office-settings ::= (office:settings::(config-config-item-set+))? ;
db-forms-attlist ::= ε ;
text-table-of-content-entry-template-attlist ::= text:outline-level::positiveInteger text:style-name::styleNameRef ;
common-num-format-prefix-suffix-attlist ::= (style:num-prefix::string)? (style:num-suffix::string)? ;
common-disabled-attlist ::= (form:disabled::boolean)? ;
db-table-filter-pattern ::= db:table-filter-pattern::(db-table-filter-pattern-attlist string) ;
number-fraction ::= number:fraction::(number-fraction-attlist common-number-attlist) ;
common-draw-area-attlist ::= (xlink:type::"simple" xlink:href::anyIRI (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))?)? (office:name::string)? (draw:nohref::"nohref")? ;
text-bibliography ::= text:bibliography::(common-section-attlist text-bibliography-source text-index-body) ;
table-dde-link ::= table:dde-link::(office-dde-source table-table) ;
style-font-face ::= style:font-face::(style-font-face-attlist svg-font-face-src? svg-definition-src?) ;
style-page-layout-attlist ::= style:name::styleName (style:page-usage::("all" | "left" | "right" | "mirrored"))? ;
db-table-presentations-attlist ::= ε ;
number-fraction-attlist ::= (number:min-numerator-digits::integer)? (number:min-denominator-digits::integer)? (number:denominator-value::integer)? ;
draw-applet-attlist ::= (draw:code::string)? (draw:object::string)? (draw:archive::string)? (draw:may-script::boolean)? xml-id? ;
common-section-attlist ::= (text:style-name::styleNameRef)? text:name::string (text:protected::boolean)? (text:protection-key::string)? (text:protection-key-digest-algorithm::anyIRI)? xml-id? ;
style-header-footer-properties-content-strict ::= style-header-footer-properties-attlist style-header-footer-properties-elements ;
text-number ::= text:number::string ;
common-title-attlist ::= (form:title::string)? ;
draw-object ::= draw:object::(draw-object-attlist common-draw-data-attlist | office-document | math-math) ;
table-sort-by ::= table:sort-by::table-sort-by-attlist ;
presentation-hide-text ::= presentation:hide-text::(common-presentation-effect-attlist presentation-sound?) ;
style-ruby-properties-content-strict ::= style-ruby-properties-attlist style-ruby-properties-elements ;
table-deletion-attlist ::= table:type::("row" | "column" | "table") table:position::integer (table:table::integer)? (table:multi-deletion-spanned::integer)? ;
styleName ::= string() ;
office-drawing-content-prelude ::= text-decls table-decls ;
draw-area-rectangle ::= draw:area-rectangle::(common-draw-area-attlist svg:x::coordinate svg:y::coordinate svg:width::length svg:height::length svg-title? svg-desc? office-event-listeners?) ;
table-table-rows ::= table:table-rows::((text-soft-page-break? table-table-row)+) ;
style-tab-stop ::= style:tab-stop::style-tab-stop-attlist ;
table-table-cell-attlist-extra ::= (table:number-columns-spanned::positiveInteger)? (table:number-rows-spanned::positiveInteger)? (table:number-matrix-columns-spanned::positiveInteger)? (table:number-matrix-rows-spanned::positiveInteger)? ;
common-text-spreadsheet-shape-attlist ::= (table:end-cell-address::cellAddress)? (table:end-x::coordinate)? (table:end-y::coordinate)? (table:table-background::boolean)? common-text-anchor-attlist ;
style-graphic-properties-elements ::= text-list-style? style-background-image style-columns ;
text-p ::= text:p::(paragraph-attrs paragraph-content-or-hyperlink*) ;
style-tab-stop-attlist ::= style:position::length ((style:type::("left" | "center" | "right"))?) | (style:type::"char" style-tab-stop-char-attlist) (style:leader-type::lineType)? (style:leader-style::lineStyle)? (style:leader-width::lineWidth)? (style:leader-color::("font-color" | color))? (style:leader-text::character)? (style:leader-text-style::styleNameRef)? ;
text-h ::= text:h::(heading-attrs paragraph-attrs text-number? paragraph-content-or-hyperlink*) ;
text-bookmark-ref-content ::= (text:reference-format::(common-ref-format-values | "number-no-superior" | "number-all-superior" | "number"))? ;
draw-control-attlist ::= draw:control::IDREF ;
text-outline-style ::= text:outline-style::(text-outline-style-attr text-outline-level-style+) ;
text-placeholder-attlist ::= text:placeholder-type::("text" | "table" | "text-box" | "image" | "object") common-field-description-attlist ;
office-document-settings ::= office:document-settings::(office-document-common-attrs office-settings) ;
style-table-row-properties-elements ::= style-background-image ;
draw-handle-attlist ::= (draw:handle-mirror-vertical::boolean)? (draw:handle-mirror-horizontal::boolean)? (draw:handle-switched::boolean)? draw:handle-position::string (draw:handle-range-x-minimum::string)? (draw:handle-range-x-maximum::string)? (draw:handle-range-y-minimum::string)? (draw:handle-range-y-maximum::string)? (draw:handle-polar::string)? (draw:handle-radius-range-minimum::string)? (draw:handle-radius-range-maximum::string)? ;
presentation-show-attlist ::= presentation:name::string presentation:pages::string ;
text-a ::= text:a::(text-a-attlist office-event-listeners? paragraph-content*) ;
table-subtotal-rules-attlist ::= (table:bind-styles-to-content::boolean)? (table:case-sensitive::boolean)? (table:page-breaks-on-group-change::boolean)? ;
lineMode ::= "continuous" | "skip-white-space" ;
style-list-level-properties-elements ::= style-list-level-label-alignment ;
anyAttListOrElements ::= string()* anyElements ;
nonNegativeLength ::= string() ;
fontWeight ::= "normal" | "bold" | "100" | "200" | "300" | "400" | "500" | "600" | "700" | "800" | "900" ;
common-tab-attlist ::= (form:tab-index::nonNegativeInteger)? (form:tab-stop::boolean)? ;
common-form-control-content ::= form-properties? office-event-listeners? ;
db-key-columns ::= db:key-columns::(db-key-columns-attlist db-key-column+) ;
table-iteration ::= table:iteration::((table:status::("enable" | "disable"))? (table:steps::positiveInteger)? (table:maximum-difference::double)?) ;
text-outline-style-attr ::= style:name::styleName ;
text-index-entry-chapter ::= text:index-entry-chapter::((text:style-name::styleNameRef)? text-index-entry-chapter-attrs) ;
table-data-pilot-subtotals ::= table:data-pilot-subtotals::(table-data-pilot-subtotal*) ;
form-connection-resource ::= form:connection-resource::(xlink:href::anyIRI) ;
draw-text-box ::= draw:text-box::(draw-text-box-attlist text-content*) ;
common-break-attlist ::= (fo:break-before::("auto" | "column" | "page"))? (fo:break-after::("auto" | "column" | "page"))? ;
common-table-range-attlist ::= common-table-cell-address-attlist | common-table-cell-range-address-attlist ;
table-data-pilot-groups ::= table:data-pilot-groups::(table-data-pilot-groups-attlist table-data-pilot-group+) ;
number-hours ::= number:hours::number-hours-attlist ;
draw-layer ::= draw:layer::(draw-layer-attlist svg-title? svg-desc?) ;
common-text-align ::= (fo:text-align::("start" | "end" | "left" | "right" | "center" | "justify"))? ;
draw-image-attlist ::= (draw:filter-name::string)? xml-id? ;
form-fixed-text-attlist ::= form-control-attlist for common-disabled-attlist label common-printable-attlist common-title-attlist (form:multi-line::boolean)? ;
dr3d-extrude ::= dr3d:extrude::(common-draw-path-data-attlist common-draw-viewbox-attlist common-draw-id-attlist common-draw-z-index-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-dr3d-transform-attlist) ;
form-column-attlist ::= common-form-control-attlist label text-style-name ;
db-reports ::= db:reports::(db-reports-attlist (db-component | db-component-collection)*) ;
table-insertion ::= table:insertion::(table-insertion-attlist common-table-change-attlist office-change-info table-dependencies? table-deletions?) ;
chart-categories ::= chart:categories::((table:cell-range-address::cellRangeAddressList)?) ;
db-schema-definition-attlist ::= ε ;
table-table-cell ::= table:table-cell::(table-table-cell-attlist table-table-cell-attlist-extra table-table-cell-content) ;
table-consolidation-attlist ::= table:function::("average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string) table:source-cell-range-addresses::cellRangeAddressList table:target-cell-address::cellAddress (table:use-labels::("none" | "row" | "column" | "both"))? (table:link-to-source-data::boolean)? ;
db-component-collection ::= db:component-collection::(db-component-collection-attlist common-db-object-name common-db-object-title common-db-object-description (db-component | db-component-collection)*) ;
dr3d-light-attlist ::= (dr3d:diffuse-color::color)? dr3d:direction::vector3D (dr3d:enabled::boolean)? (dr3d:specular::boolean)? ;
table-sort-groups-attlist ::= (table:data-type::("text" | "number" | "automatic" | string))? (table:order::("ascending" | "descending"))? ;
presentation-dim ::= presentation:dim::(presentation-dim-attlist presentation-sound?) ;
db-data-source-setting ::= db:data-source-setting::(db-data-source-setting-attlist db-data-source-setting-value+) ;
presentation-date-time-decl-attlist ::= presentation:name::string presentation:source::("fixed" | "current-date") (style:data-style-name::styleNameRef)? ;
mathMarkup ::= (α | string() | mathMarkup)* ;
db-table-type-filter-attlist ::= ε ;
form-button-attlist ::= form-control-attlist button-type common-disabled-attlist label image-data common-printable-attlist common-tab-attlist target-frame target-location common-title-attlist common-value-attlist common-form-relative-image-position-attlist common-repeat common-delay-for-repeat (form:default-button::boolean)? (form:toggle::boolean)? (form:focus-on-click::boolean)? (form:xforms-submission::string)? ;
chart-wall-attlist ::= (svg:width::length)? (chart:style-name::styleNameRef)? ;
db-indices-attlist ::= ε ;
meta-date-string ::= meta:date-string::string ;
table-calculation-settings ::= table:calculation-settings::(table-calculation-setting-attlist table-null-date? table-iteration?) ;
chart-series ::= chart:series::(chart-series-attlist chart-domain* chart-mean-value? chart-regression-curve* chart-error-indicator* chart-data-point* chart-data-label?) ;
db-table-filter ::= db:table-filter::(db-table-filter-attlist db-table-include-filter? db-table-exclude-filter?) ;
form-control-attlist ::= common-form-control-attlist common-control-id-attlist xforms-bind-attlist ;
common-field-display-value-none-attlist ::= (text:display::("value" | "none"))? ;
style-header-footer-properties-elements ::= style-background-image ;
text-index-source-style ::= text:index-source-style::(text:style-name::styleName) ;
common-field-description-attlist ::= (text:description::string)? ;
db-table-filter-attlist ::= ε ;
chart-series-attlist ::= (chart:values-cell-range-address::cellRangeAddressList)? (chart:label-cell-address::cellRangeAddressList)? (chart:class::namespacedToken)? (chart:attached-axis::string)? (chart:style-name::styleNameRef)? xml-id? ;
text-section-attlist ::= common-section-attlist (text:display::("true" | "none")) | (text:display::"condition" text:condition::string) | ε ;
db-data-source-setting-value ::= db:data-source-setting-value::(db-data-source-setting-value-attlist string) ;
db-key-column ::= db:key-column::db-key-column-attlist ;
common-num-format-attlist ::= (style:num-format::("1" | "i" | "I" | string | ε)) | (style:num-format::("a" | "A") style-num-letter-sync-attlist) | ε ;
text-page ::= text:page::text-page-attlist ;
common-data-field-attlist ::= (form:data-field::string)? ;
db-data-source-setting-value-attlist ::= ε ;
variableName ::= string() ;
draw-regular-polygon-sharpness-attlist ::= draw:sharpness::percent ;
table-deletions ::= table:deletions::((table-cell-content-deletion | table-change-deletion)+) ;
text-list-level-style-attr ::= text:level::positiveInteger ;
table-data-pilot-sort-info ::= table:data-pilot-sort-info::table-data-pilot-sort-info-attlist ;
table-tracked-changes ::= table:tracked-changes::(table-tracked-changes-attlist (table-cell-content-change | table-insertion | table-deletion | table-movement)*) ;
table-database-source-sql-attlist ::= table:database-name::string table:sql-statement::string (table:parse-sql-statement::boolean)? ;
style-chart-properties ::= style:chart-properties::style-chart-properties-content-strict ;
text-alphabetical-index ::= text:alphabetical-index::(common-section-attlist text-alphabetical-index-source text-index-body) ;
paragraph-content ::= string() | (text:s::((text:c::nonNegativeInteger)?)) | (text:tab::text-tab-attr) | (text:line-break::ε) | text-soft-page-break | (text:span::((text:style-name::styleNameRef)? (text:class-names::styleNameRefs)? paragraph-content-or-hyperlink*)) | (text:meta::(text-meta-attlist paragraph-content-or-hyperlink*)) | text-bookmark | text-bookmark-start | text-bookmark-end | (text:reference-mark::(text:name::string)) | (text:reference-mark-start::(text:name::string)) | (text:reference-mark-end::(text:name::string)) | (text:note::(text-note-class (text:id::string)? text:note-citation::((text:label::string)? string()) text:note-body::(text-content*))) | (text:ruby::((text:style-name::styleNameRef)? text:ruby-base::(paragraph-content-or-hyperlink*) text:ruby-text::((text:style-name::styleNameRef)? string()))) | office-annotation | office-annotation-end | change-marks | shape | (text:date::(text-date-attlist string())) | (text:time::(text-time-attlist string())) | (text:page-number::(text-page-number-attlist string())) | (text:page-continuation::(text-page-continuation-attlist string())) | (text:sender-firstname::(common-field-fixed-attlist string())) | (text:sender-lastname::(common-field-fixed-attlist string())) | (text:sender-initials::(common-field-fixed-attlist string())) | (text:sender-title::(common-field-fixed-attlist string())) | (text:sender-position::(common-field-fixed-attlist string())) | (text:sender-email::(common-field-fixed-attlist string())) | (text:sender-phone-private::(common-field-fixed-attlist string())) | (text:sender-fax::(common-field-fixed-attlist string())) | (text:sender-company::(common-field-fixed-attlist string())) | (text:sender-phone-work::(common-field-fixed-attlist string())) | (text:sender-street::(common-field-fixed-attlist string())) | (text:sender-city::(common-field-fixed-attlist string())) | (text:sender-postal-code::(common-field-fixed-attlist string())) | (text:sender-country::(common-field-fixed-attlist string())) | (text:sender-state-or-province::(common-field-fixed-attlist string())) | (text:author-name::(common-field-fixed-attlist string())) | (text:author-initials::(common-field-fixed-attlist string())) | (text:chapter::(text-chapter-attlist string())) | (text:file-name::(text-file-name-attlist string())) | (text:template-name::(text-template-name-attlist string())) | (text:sheet-name::string()) | (text:variable-set::(common-field-name-attlist common-field-formula-attlist common-value-and-type-attlist common-field-display-value-none-attlist common-field-data-style-name-attlist string())) | (text:variable-get::(common-field-name-attlist common-field-display-value-formula-attlist common-field-data-style-name-attlist string())) | (text:variable-input::(common-field-name-attlist common-field-description-attlist common-value-type-attlist common-field-display-value-none-attlist common-field-data-style-name-attlist string())) | (text:user-field-get::(common-field-name-attlist common-field-display-value-formula-none-attlist common-field-data-style-name-attlist string())) | (text:user-field-input::(common-field-name-attlist common-field-description-attlist common-field-data-style-name-attlist string())) | (text:sequence::(common-field-name-attlist common-field-formula-attlist common-field-num-format-attlist text-sequence-ref-name string())) | (text:expression::(common-field-formula-attlist common-value-and-type-attlist? common-field-display-value-formula-attlist common-field-data-style-name-attlist string())) | (text:text-input::(common-field-description-attlist string())) | (text:initial-creator::(common-field-fixed-attlist string())) | (text:creation-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::dateOrDateTime)? string())) | (text:creation-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::timeOrDateTime)? string())) | (text:description::(common-field-fixed-attlist string())) | (text:user-defined::(common-field-fixed-attlist text:name::string common-field-data-style-name-attlist (office:value::double)? (office:date-value::dateOrDateTime)? (office:time-value::duration)? (office:boolean-value::boolean)? (office:string-value::string)? string())) | (text:print-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::time)? string())) | (text:print-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::date)? string())) | (text:printed-by::(common-field-fixed-attlist string())) | (text:title::(common-field-fixed-attlist string())) | (text:subject::(common-field-fixed-attlist string())) | (text:keywords::(common-field-fixed-attlist string())) | (text:editing-cycles::(common-field-fixed-attlist string())) | (text:editing-duration::(common-field-fixed-attlist common-field-data-style-name-attlist (text:duration::duration)? string())) | (text:modification-time::(common-field-fixed-attlist common-field-data-style-name-attlist (text:time-value::time)? string())) | (text:modification-date::(common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::date)? string())) | (text:creator::(common-field-fixed-attlist string())) | (text:page-count::(common-field-num-format-attlist string())) | (text:paragraph-count::(common-field-num-format-attlist string())) | (text:word-count::(common-field-num-format-attlist string())) | (text:character-count::(common-field-num-format-attlist string())) | (text:table-count::(common-field-num-format-attlist string())) | (text:image-count::(common-field-num-format-attlist string())) | (text:object-count::(common-field-num-format-attlist string())) | (text:database-display::(text-database-display-attlist string())) | (text:database-next::text-database-next-attlist) | (text:database-row-select::text-database-row-select-attlist) | (text:database-row-number::(common-field-database-table common-field-num-format-attlist (text:value::nonNegativeInteger)? string())) | (text:database-name::(common-field-database-table string())) | (text:page-variable-set::(text-set-page-variable-attlist string())) | (text:page-variable-get::(text-get-page-variable-attlist string())) | (text:placeholder::(text-placeholder-attlist string())) | (text:conditional-text::(text-conditional-text-attlist string())) | (text:hidden-text::(text-hidden-text-attlist string())) | (text:reference-ref::(text-common-ref-content text-bookmark-ref-content)) | (text:bookmark-ref::(text-common-ref-content text-bookmark-ref-content)) | (text:note-ref::(text-common-ref-content text-note-ref-content)) | (text:sequence-ref::(text-common-ref-content text-sequence-ref-content)) | (text:script::((xlink:type::"simple" xlink:href::anyIRI) | string() (script:language::string)?)) | (text:execute-macro::((text:name::string)? office-event-listeners? string())) | (text:hidden-paragraph::(text-hidden-paragraph-attlist string())) | (text:dde-connection::(text:connection-name::string string())) | (text:measure::(text:kind::("value" | "unit" | "gap") string())) | (text:table-formula::(common-field-formula-attlist common-field-display-value-formula-attlist common-field-data-style-name-attlist string())) | (text:meta-field::(text-meta-field-attlist paragraph-content-or-hyperlink*)) | (text:toc-mark-start::text-toc-mark-start-attrs) | (text:toc-mark-end::text-id) | (text:toc-mark::(text:string-value::string text-outline-level)) | (text:user-index-mark-start::(text-id text-outline-level text-index-name)) | (text:user-index-mark-end::text-id) | (text:user-index-mark::(text:string-value::string text-outline-level text-index-name)) | (text:alphabetical-index-mark-start::(text-id text-alphabetical-index-mark-attrs)) | (text:alphabetical-index-mark-end::text-id) | (text:alphabetical-index-mark::(text:string-value::string text-alphabetical-index-mark-attrs)) | (text:bibliography-mark::(text:bibliography-type::text-bibliography-types ((text:identifier::string) | (text:address::string) | (text:annote::string) | (text:author::string) | (text:booktitle::string) | (text:chapter::string) | (text:edition::string) | (text:editor::string) | (text:howpublished::string) | (text:institution::string) | (text:journal::string) | (text:month::string) | (text:note::string) | (text:number::string) | (text:organizations::string) | (text:pages::string) | (text:publisher::string) | (text:school::string) | (text:series::string) | (text:title::string) | (text:report-type::string) | (text:volume::string) | (text:year::string) | (text:url::string) | (text:custom1::string) | (text:custom2::string) | (text:custom3::string) | (text:custom4::string) | (text:custom5::string) | (text:isbn::string) | (text:issn::string))* string())) | (presentation:header::ε) | (presentation:footer::ε) | (presentation:date-time::ε) ;
table-visibility-value ::= "visible" | "collapse" | "filter" ;
db-table-definition-attlist ::= (db:type::string)? ;
common-db-table-style-name ::= (db:style-name::styleNameRef)? (db:default-row-style-name::styleNameRef)? ;
common-vertical-pos-attlist ::= (style:vertical-pos::("top" | "middle" | "bottom" | "from-top" | "below"))? (svg:y::coordinate)? ;
style-chart-properties-attlist ::= (chart:scale-text::boolean)? (chart:three-dimensional::boolean)? (chart:deep::boolean)? (chart:right-angled-axes::boolean)? (chart:symbol-type::"none") | (chart:symbol-type::"automatic") | (chart:symbol-type::"named-symbol" chart:symbol-name::("square" | "diamond" | "arrow-down" | "arrow-up" | "arrow-right" | "arrow-left" | "bow-tie" | "hourglass" | "circle" | "star" | "x" | "plus" | "asterisk" | "horizontal-bar" | "vertical-bar")) | (chart:symbol-type::"image" chart:symbol-image::(xlink:href::anyIRI)) | ε (chart:symbol-width::nonNegativeLength)? (chart:symbol-height::nonNegativeLength)? (chart:sort-by-x-values::boolean)? (chart:vertical::boolean)? (chart:connect-bars::boolean)? (chart:gap-width::integer)? (chart:overlap::integer)? (chart:group-bars-per-axis::boolean)? (chart:japanese-candle-stick::boolean)? (chart:interpolation::("none" | "cubic-spline" | "b-spline"))? (chart:spline-order::positiveInteger)? (chart:spline-resolution::positiveInteger)? (chart:pie-offset::nonNegativeInteger)? (chart:angle-offset::angle)? (chart:hole-size::percent)? (chart:lines::boolean)? (chart:solid-type::("cuboid" | "cylinder" | "cone" | "pyramid"))? (chart:stacked::boolean)? (chart:percentage::boolean)? (chart:treat-empty-cells::("use-zero" | "leave-gap" | "ignore"))? (chart:link-data-style-to-source::boolean)? (chart:logarithmic::boolean)? (chart:maximum::double)? (chart:minimum::double)? (chart:origin::double)? (chart:interval-major::double)? (chart:interval-minor-divisor::positiveInteger)? (chart:tick-marks-major-inner::boolean)? (chart:tick-marks-major-outer::boolean)? (chart:tick-marks-minor-inner::boolean)? (chart:tick-marks-minor-outer::boolean)? (chart:reverse-direction::boolean)? (chart:display-label::boolean)? (chart:text-overlap::boolean)? (text:line-break::boolean)? (chart:label-arrangement::("side-by-side" | "stagger-even" | "stagger-odd"))? common-style-direction-attlist common-rotation-angle-attlist (chart:data-label-number::("none" | "value" | "percentage" | "value-and-percentage"))? (chart:data-label-text::boolean)? (chart:data-label-symbol::boolean)? (chart:label-separator::text-p)? (chart:label-position::labelPositions)? (chart:label-position-negative::labelPositions)? (chart:visible::boolean)? (chart:auto-position::boolean)? (chart:auto-size::boolean)? (chart:mean-value::boolean)? (chart:error-category::("none" | "variance" | "standard-deviation" | "percentage" | "error-margin" | "constant" | "standard-error" | "cell-range"))? (chart:error-percentage::double)? (chart:error-margin::double)? (chart:error-lower-limit::double)? (chart:error-upper-limit::double)? (chart:error-upper-indicator::boolean)? (chart:error-lower-indicator::boolean)? (chart:error-lower-range::cellRangeAddressList)? (chart:error-upper-range::cellRangeAddressList)? (chart:series-source::("columns" | "rows"))? (chart:regression-type::("none" | "linear" | "logarithmic" | "exponential" | "power"))? (chart:axis-position::("start" | "end" | double))? (chart:axis-label-position::("near-axis" | "near-axis-other-side" | "outside-start" | "outside-end"))? (chart:tick-mark-position::("at-labels" | "at-axis" | "at-labels-and-axis"))? (chart:include-hidden-cells::boolean)? ;
style-page-layout-properties-elements ::= style-background-image style-columns style-footnote-sep ;
text-linenumbering-configuration ::= text:linenumbering-configuration::(text-linenumbering-configuration-attlist text-linenumbering-separator?) ;
draw-path ::= draw:path::(common-draw-path-data-attlist common-draw-position-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
number-embedded-text ::= number:embedded-text::(number-embedded-text-attlist string()) ;
table-table-cell-content ::= table-cell-range-source? office-annotation? table-detective? text-content* ;
style-handout-master ::= style:handout-master::(common-presentation-header-footer-attlist style-handout-master-attlist shape*) ;
presentation-show-text ::= presentation:show-text::(common-presentation-effect-attlist presentation-sound?) ;
targetFrameName ::= "_self" | "_blank" | "_parent" | "_top" | string ;
text-user-index-source-attr ::= text-index-scope-attr text-relative-tab-stop-position-attr (text:use-index-marks::boolean)? (text:use-index-source-styles::boolean)? (text:use-graphics::boolean)? (text:use-tables::boolean)? (text:use-floating-frames::boolean)? (text:use-objects::boolean)? (text:copy-outline-levels::boolean)? text:index-name::string ;
form-image-attlist ::= form-control-attlist button-type common-disabled-attlist image-data common-printable-attlist common-tab-attlist target-frame target-location common-title-attlist common-value-attlist ;
table-highlighted-range ::= table:highlighted-range::(table-highlighted-range-attlist | table-highlighted-range-attlist-invalid) ;
anyElements ::= (string()? anyAttListOrElements string()?)* ;
text-linenumbering-configuration-attlist ::= (text:number-lines::boolean)? common-num-format-attlist? (text:style-name::styleNameRef)? (text:increment::nonNegativeInteger)? (text:number-position::("left" | "right" | "inner" | "outer"))? (text:offset::nonNegativeLength)? (text:count-empty-lines::boolean)? (text:count-in-text-boxes::boolean)? (text:restart-on-page::boolean)? ;
table-rows-and-groups ::= (table-table-row-group | table-rows-no-group)+ ;
office-drawing-attlist ::= ε ;
text-object-index-entry-template ::= text:object-index-entry-template::text-illustration-index-entry-content ;
office-image-attlist ::= ε ;
db-file-based-database ::= db:file-based-database::db-file-based-database-attlist ;
vector3D ::= string() ;
common-field-fixed-attlist ::= (text:fixed::boolean)? ;
style-font-face-attlist ::= (svg:font-family::string)? (svg:font-style::fontStyle)? (svg:font-variant::fontVariant)? (svg:font-weight::fontWeight)? (svg:font-stretch::("normal" | "ultra-condensed" | "extra-condensed" | "condensed" | "semi-condensed" | "semi-expanded" | "expanded" | "extra-expanded" | "ultra-expanded"))? (svg:font-size::positiveLength)? (svg:unicode-range::string)? (svg:units-per-em::integer)? (svg:panose-1::string)? (svg:stemv::integer)? (svg:stemh::integer)? (svg:slope::integer)? (svg:cap-height::integer)? (svg:x-height::integer)? (svg:accent-height::integer)? (svg:ascent::integer)? (svg:descent::integer)? (svg:widths::string)? (svg:bbox::string)? (svg:ideographic::integer)? (svg:alphabetic::integer)? (svg:mathematical::integer)? (svg:hanging::integer)? (svg:v-ideographic::integer)? (svg:v-alphabetic::integer)? (svg:v-mathematical::integer)? (svg:v-hanging::integer)? (svg:underline-position::integer)? (svg:underline-thickness::integer)? (svg:strikethrough-position::integer)? (svg:strikethrough-thickness::integer)? (svg:overline-position::integer)? (svg:overline-thickness::integer)? style:name::string (style:font-adornments::string)? (style:font-family-generic::fontFamilyGeneric)? (style:font-pitch::fontPitch)? (style:font-charset::textEncoding)? ;
any-date ::= number-day | number-month | number-year | number-era | number-day-of-week | number-week-of-year | number-quarter | number-hours | number-am-pm | number-minutes | number-seconds ;
office-script-attlist ::= script:language::string ;
table-cell-content-deletion ::= table:cell-content-deletion::((table:id::string)? table-cell-address? table-change-track-table-cell?) ;
number-seconds-attlist ::= (number:style::("short" | "long"))? (number:decimal-places::integer)? ;
table-deletion ::= table:deletion::(table-deletion-attlist common-table-change-attlist office-change-info table-dependencies? table-deletions? table-cut-offs?) ;
style-ruby-properties ::= style:ruby-properties::style-ruby-properties-content-strict ;
common-contour-attlist ::= draw:recreate-on-edit::boolean ;
table-database-source-query ::= table:database-source-table::table-database-source-table-attlist ;
style-column-attlist ::= style:rel-width::relativeLength (fo:start-indent::length)? (fo:end-indent::length)? (fo:space-before::length)? (fo:space-after::length)? ;
common-fill-timing-attlist ::= (smil:fill::("remove" | "freeze" | "hold" | "auto" | "default" | "transition"))? ;
form-image-frame-attlist ::= form-control-attlist common-disabled-attlist image-data common-printable-attlist common-readonly-attlist common-title-attlist common-data-field-attlist ;
rowOrCol ::= "row" | "column" ;
table-source-service ::= table:source-service::table-source-service-attlist ;
office-annotation ::= office:annotation::(office-annotation-attlist draw-caption-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist dc-creator? dc-date? meta-date-string? (text-p | text-list)*) ;
common-anim-target-attlist ::= (smil:targetElement::IDREF)? (anim:sub-item::string)? ;
style-footer-left ::= style:footer-left::(common-style-header-footer-attlist header-footer-content) ;
table-sort-by-attlist ::= table:field-number::nonNegativeInteger (table:data-type::("text" | "number" | "automatic" | string))? (table:order::("ascending" | "descending"))? ;
table-odd-rows ::= table:odd-rows::common-table-template-attlist ;
anyIRI ::= string() ;
db-index-columns ::= db:index-columns::(db-index-column+) ;
common-calendar-attlist ::= (number:calendar::("gregorian" | "gengou" | "ROC" | "hanja_yoil" | "hanja" | "hijri" | "jewish" | "buddhist" | string))? ;
table-cell-content-change ::= table:cell-content-change::(common-table-change-attlist table-cell-address office-change-info table-dependencies? table-deletions? table-previous) ;
table-subtotal-field ::= table:subtotal-field::table-subtotal-field-attlist ;
nonNegativeDecimal ::= integer() ;
chart-legend-attlist ::= (chart:legend-position::("start" | "end" | "top" | "bottom") (chart:legend-align::("start" | "center" | "end"))?) | (chart:legend-position::("top-start" | "bottom-start" | "top-end" | "bottom-end")) | ε common-draw-position-attlist (style:legend-expansion::("wide" | "high" | "balanced")) | (style:legend-expansion::"custom" style:legend-expansion-aspect-ratio::double) | ε (chart:style-name::styleNameRef)? ;
office-chart-content-main ::= chart-chart ;
table-subtotal-rules ::= table:subtotal-rules::(table-subtotal-rules-attlist table-sort-groups? table-subtotal-rule*) ;
draw-measure-attlist ::= svg:x1::coordinate svg:y1::coordinate svg:x2::coordinate svg:y2::coordinate ;
style-chart-properties-elements ::= ε ;
db-index ::= db:index::(db-index-attlist db-index-columns+) ;
draw-object-ole ::= draw:object-ole::(draw-object-ole-attlist common-draw-data-attlist | office-binary-data) ;
number-era-attlist ::= (number:style::("short" | "long"))? ;
chart-plot-area-attlist ::= common-draw-position-attlist common-draw-size-attlist (chart:style-name::styleNameRef)? (table:cell-range-address::cellRangeAddressList)? (chart:data-source-has-labels::("none" | "row" | "column" | "both"))? dr3d-scene-attlist common-dr3d-transform-attlist xml-id? ;
borderWidths ::= positiveLength positiveLength positiveLength ;
form-formatted-text-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist common-linked-cell common-spin-button common-repeat common-delay-for-repeat (form:max-value::string)? (form:min-value::string)? (form:validation::boolean)? ;
db-update-table ::= db:update-table::common-db-table-name-attlist ;
db-query ::= db:query::(db-query-attlist common-db-object-name common-db-object-title common-db-object-description common-db-table-style-name db-order-statement? db-filter-statement? db-columns? db-update-table?) ;
style-section-properties ::= style:section-properties::style-section-properties-content-strict ;
office-dde-source ::= office:dde-source::(office-dde-source-attlist common-dde-connection-decl-attlist) ;
presentation-animation-elements ::= presentation-show-shape | presentation-show-text | presentation-hide-shape | presentation-hide-text | presentation-dim | presentation-play ;
table-scenario ::= table:scenario::table-scenario-attlist ;
common-current-value-attlist ::= (form:current-value::string)? ;
draw-equation-attlist ::= (draw:name::string)? (draw:formula::string)? ;
fontStyle ::= "normal" | "italic" | "oblique" ;
common-draw-circle-ellipse-pos-attlist ::= svg:cx::coordinate svg:cy::coordinate ;
region-content ::= text-p* ;
text-list-item-attr ::= (text:start-value::nonNegativeInteger)? (text:style-override::styleNameRef)? xml-id? ;
office-spreadsheet-content-epilogue ::= table-functions ;
table-table-source ::= table:table-source::(table-table-source-attlist table-linked-source-attlist) ;
text-sequence-decl ::= text:sequence-decl::text-sequence-decl-attlist ;
xml-id ::= xml:id::ID ;
style-presentation-page-layout ::= style:presentation-page-layout::(style:name::styleName (style:display-name::string)? presentation-placeholder*) ;
presentation-sound-attlist ::= (presentation:play-full::boolean)? xml-id? ;
svg-font-face-src ::= svg:font-face-src::((svg-font-face-uri | svg-font-face-name)+) ;
db-table-type ::= db:table-type::(db-table-type-attlist string) ;
text-sequence-decl-attlist ::= common-field-name-attlist text:display-outline-level::nonNegativeInteger (text:separation-character::character)? ;
svg-font-face-name ::= svg:font-face-name::((svg:name::string)?) ;
bound-column ::= (form:bound-column::string)? ;
text-table-of-content ::= text:table-of-content::(common-section-attlist text-table-of-content-source text-index-body) ;
anim-command-attlist ::= anim:command::string ;
text-index-entry-link-end ::= text:index-entry-link-end::((text:style-name::styleNameRef)?) ;
form-item ::= form:item::(form-item-attlist string()) ;
common-meta-literal-attlist ::= (xhtml:datatype::CURIE)? (xhtml:content::string)? ;
draw-hatch ::= draw:hatch::draw-hatch-attlist ;
common-auto-reorder-attlist ::= (number:automatic-order::boolean)? ;
table-consolidation ::= table:consolidation::table-consolidation-attlist ;
draw-circle-attlist ::= svg:r::length ;
chart-footer ::= chart:footer::(chart-title-attlist text-p?) ;
table-subtotal-rule ::= table:subtotal-rule::(table-subtotal-rule-attlist table-subtotal-field*) ;
db-table-definitions-attlist ::= ε ;
chart-regression-curve-attlist ::= (chart:style-name::styleNameRef)? ;
db-order-statement ::= db:order-statement::(db-command db-apply-command) ;
db-table-type-filter ::= db:table-type-filter::(db-table-type-filter-attlist db-table-type*) ;
common-basic-timing-attlist ::= common-begin-end-timing-attlist common-dur-timing-attlist common-repeat-timing-attlist common-restart-timing-attlist common-restart-default-attlist common-fill-timing-attlist common-fill-default-attlist ;
number-minutes ::= number:minutes::number-minutes-attlist ;
db-table-presentation-attlist ::= ε ;
table-subtotal-rule-attlist ::= table:group-by-field-number::nonNegativeInteger ;
text-index-entry-bibliography ::= text:index-entry-bibliography::text-index-entry-bibliography-attrs ;
style-paragraph-properties-elements ::= style-tab-stops style-drop-cap style-background-image ;
text-bookmark-end-attlist ::= text:name::string ;
style-table-cell-properties-attlist ::= (style:vertical-align::("top" | "middle" | "bottom" | "automatic"))? (style:text-align-source::("fix" | "value-type"))? common-style-direction-attlist (style:glyph-orientation-vertical::("auto" | "0" | "0deg" | "0rad" | "0grad"))? common-writing-mode-attlist common-shadow-attlist common-background-color-attlist common-border-attlist (style:diagonal-tl-br::string)? (style:diagonal-tl-br-widths::borderWidths)? (style:diagonal-bl-tr::string)? (style:diagonal-bl-tr-widths::borderWidths)? common-border-line-width-attlist common-padding-attlist (fo:wrap-option::("no-wrap" | "wrap"))? common-rotation-angle-attlist (style:rotation-align::("none" | "bottom" | "top" | "center"))? (style:cell-protect::("none" | "hidden-and-protected" | (("protected" | "formula-hidden")+)))? (style:print-content::boolean)? (style:decimal-places::nonNegativeInteger)? (style:repeat-content::boolean)? (style:shrink-to-fit::boolean)? ;
text-sort-key ::= text:sort-key::text-sort-key-attlist ;
chart-floor-attlist ::= (svg:width::length)? (chart:style-name::styleNameRef)? ;
db-connection-resource ::= db:connection-resource::db-connection-resource-attlist ;
table-database-range ::= table:database-range::(table-database-range-attlist (table-database-source-sql | table-database-source-table | table-database-source-query)? table-filter? table-sort? table-subtotal-rules?) ;
any-number ::= number-number | number-scientific-number | number-fraction ;
text-notes-configuration ::= text:notes-configuration::text-notes-configuration-content ;
text-section ::= text:section::(text-section-attlist text-section-source | text-section-source-dde | ε text-content*) ;
text-relative-tab-stop-position-attr ::= (text:relative-tab-stop-position::boolean)? ;
number-currency-symbol-attlist ::= (number:language::languageCode)? (number:country::countryCode)? (number:script::scriptCode)? (number:rfc-language-tag::language)? ;
text-list-item ::= text:list-item::(text-list-item-attr text-list-item-content) ;
text-list-level-style-number-attr ::= (text:style-name::styleNameRef)? common-num-format-attlist common-num-format-prefix-suffix-attlist (text:display-levels::positiveInteger)? (text:start-value::positiveInteger)? ;
db-connection-resource-attlist ::= xlink:type::"simple" xlink:href::anyIRI (xlink:show::"none")? (xlink:actuate::"onRequest")? ;
positiveLength ::= string() ;
db-data-source-setting-types ::= "boolean" | "short" | "int" | "long" | "double" | "string" ;
currency-symbol-and-text ::= number-currency-symbol number-text? ;
form-property-name ::= form:property-name::string ;
config-config-item-set-attlist ::= config:name::string ;
text-object-index-source-attrs ::= text-index-scope-attr text-relative-tab-stop-position-attr (text:use-spreadsheet-objects::boolean)? (text:use-math-objects::boolean)? (text:use-draw-objects::boolean)? (text:use-chart-objects::boolean)? (text:use-other-objects::boolean)? ;
chart-dimension ::= "x" | "y" | "z" ;
table-change-track-table-cell-attlist ::= (table:cell-address::cellAddress)? (table:matrix-covered::boolean)? (table:formula::string)? (table:number-matrix-columns-spanned::positiveInteger)? (table:number-matrix-rows-spanned::positiveInteger)? common-value-and-type-attlist? ;
style-region-center ::= style:region-center::region-content ;
db-query-collection ::= db:query-collection::(db-query-collection-attlist common-db-object-name common-db-object-title common-db-object-description (db-query | db-query-collection)*) ;
number-number-style ::= number:number-style::(common-data-style-attlist style-text-properties? number-text? (any-number number-text?)? style-map*) ;
form-property-value-and-type-attlist ::= common-value-and-type-attlist | (office:value-type::"void") ;
db-host-and-port ::= db:hostname::string (db:port::positiveInteger)? ;
form-time-attlist ::= (form:value::time)? (form:current-value::time)? (form:min-value::time)? (form:max-value::time)? ;
table-operation ::= table:operation::table-operation-attlist ;
text-index-entry-text ::= text:index-entry-text::((text:style-name::styleNameRef)?) ;
chart-axis-attlist ::= chart:dimension::chart-dimension (chart:name::string)? (chart:style-name::styleNameRef)? ;
text-page-attlist ::= text:master-page-name::styleNameRef ;
draw-g ::= draw:g::(draw-g-attlist common-draw-z-index-attlist common-draw-name-attlist common-draw-id-attlist common-draw-style-name-attlist common-text-spreadsheet-shape-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* shape*) ;
common-draw-path-data-attlist ::= svg:d::pathData ;
table-named-range-attlist ::= table:name::string table:cell-range-address::cellRangeAddress (table:base-cell-address::cellAddress)? (table:range-usable-as::("none" | (("print-range" | "filter" | "repeat-row" | "repeat-column")+)))? ;
draw-a ::= draw:a::(draw-a-attlist shape-instance) ;
table-previous ::= table:previous::((table:id::string)? table-change-track-table-cell) ;
common-draw-shape-with-text-and-styles-attlist ::= common-draw-shape-with-styles-attlist common-draw-text-style-name-attlist ;
number-text-style ::= number:text-style::(common-data-style-attlist style-text-properties? number-text? (number-text-content number-text?)* style-map*) ;
office-body ::= office:body::office-body-content ;
svg-font-face-uri ::= svg:font-face-uri::(common-svg-font-face-xlink-attlist svg-font-face-format*) ;
list-linkage-type ::= (form:list-linkage-type::("selection" | "selection-indices"))? ;
draw-g-attlist ::= (svg:y::coordinate)? ;
text-list-style-content ::= (text:list-level-style-number::(text-list-level-style-attr text-list-level-style-number-attr style-list-level-properties? style-text-properties?)) | (text:list-level-style-bullet::(text-list-level-style-attr text-list-level-style-bullet-attr style-list-level-properties? style-text-properties?)) | (text:list-level-style-image::(text-list-level-style-attr text-list-level-style-image-attr style-list-level-properties?)) ;
table-table-row-attlist ::= (table:number-rows-repeated::positiveInteger)? (table:style-name::styleNameRef)? (table:default-cell-style-name::styleNameRef)? (table:visibility::table-visibility-value)? xml-id? ;
style-page-layout ::= style:page-layout::(style-page-layout-attlist style-page-layout-content) ;
table-insertion-cut-off ::= table:insertion-cut-off::table-insertion-cut-off-attlist ;
style-header-footer-properties ::= style:header-footer-properties::style-header-footer-properties-content-strict ;
common-value-attlist ::= (form:value::string)? ;
db-auto-increment ::= db:auto-increment::db-auto-increment-attlist ;
text-list-header ::= text:list-header::(text-list-header-attr text-list-item-content) ;
style-column-sep-attlist ::= (style:style::("none" | "solid" | "dotted" | "dashed" | "dot-dashed"))? style:width::length (style:height::zeroToHundredPercent)? (style:vertical-align::("top" | "middle" | "bottom"))? (style:color::color)? ;
text-user-index-entry-template ::= text:user-index-entry-template::(text-user-index-entry-template-attrs (text-index-entry-chapter | text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop)*) ;
db-file-based-database-attlist ::= xlink:type::"simple" xlink:href::anyIRI db:media-type::string (db:extension::string)? ;
common-form-control-attlist ::= (form:name::string)? (form:control-implementation::namespacedToken)? ;
common-svg-font-face-xlink-attlist ::= xlink:type::"simple" xlink:href::anyIRI (xlink:actuate::"onRequest")? ;
db-keys ::= db:keys::(db-keys-attlist db-key+) ;
draw-area-polygon ::= draw:area-polygon::(common-draw-area-attlist svg:x::coordinate svg:y::coordinate svg:width::length svg:height::length common-draw-viewbox-attlist common-draw-points-attlist svg-title? svg-desc? office-event-listeners?) ;
chart-stock-gain-marker ::= chart:stock-gain-marker::common-stock-marker-attlist ;
office-forms ::= (office:forms::(office-forms-attlist (form-form | xforms-model)*))? ;
common-restart-timing-attlist ::= (smil:restart::("never" | "always" | "whenNotActive" | "default"))? ;
form-properties ::= form:properties::(form-property+) ;
db-connection-data-attlist ::= ε ;
draw-object-attlist ::= (draw:notify-on-update-of-ranges::(cellRangeAddressList | string))? xml-id? ;
common-readonly-attlist ::= (form:readonly::boolean)? ;
draw-measure ::= draw:measure::(draw-measure-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
draw-control ::= draw:control::(draw-control-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? draw-glue-point*) ;
table-data-pilot-display-info ::= table:data-pilot-display-info::table-data-pilot-display-info-attlist ;
table-source-range-address ::= table:source-range-address::common-table-range-attlist ;
office-forms-attlist ::= (form:automatic-focus::boolean)? (form:apply-design-mode::boolean)? ;
draw-plugin-attlist ::= (draw:mime-type::string)? xml-id? ;
svg-stop ::= svg:stop::(svg:offset::(double | percent) (svg:stop-color::color)? (svg:stop-opacity::double)?) ;
db-driver-settings-attlist ::= db-show-deleted (db:system-driver-settings::string)? (db:base-dn::string)? db-is-first-row-header-line (db:parameter-name-substitution::boolean)? ;
table-named-expression ::= table:named-expression::table-named-expression-attlist ;
table-validation-attlist ::= table:name::string (table:condition::string)? (table:base-cell-address::cellAddress)? (table:allow-empty-cell::boolean)? (table:display-list::("none" | "unsorted" | "sort-ascending"))? ;
table-even-columns ::= table:even-columns::common-table-template-attlist ;
text-tab-attr ::= (text:tab-ref::nonNegativeInteger)? ;
text-table-of-content-source ::= text:table-of-content-source::(text-table-of-content-source-attlist text-index-title-template? text-table-of-content-entry-template* text-index-source-styles*) ;
form-hidden-attlist ::= form-control-attlist common-value-attlist ;
fontFamilyGeneric ::= "roman" | "swiss" | "modern" | "decorative" | "script" | "system" ;
common-spline-anim-value-attlist ::= (smil:keyTimes::string)? (smil:keySplines::string)? ;
table-odd-columns ::= table:odd-columns::common-table-template-attlist ;
common-draw-layer-name-attlist ::= (draw:layer::string)? ;
draw-rect-attlist ::= ((draw:corner-radius::nonNegativeLength)?) | ((svg:rx::nonNegativeLength)? (svg:ry::nonNegativeLength)?) ;
dr3d-sphere ::= dr3d:sphere::(dr3d-sphere-attlist common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-dr3d-transform-attlist) ;
text-table-of-content-source-attlist ::= (text:outline-level::positiveInteger)? (text:use-outline-level::boolean)? (text:use-index-marks::boolean)? (text:use-index-source-styles::boolean)? (text:index-scope::("document" | "chapter"))? (text:relative-tab-stop-position::boolean)? ;
style-text-properties ::= style:text-properties::style-text-properties-content-strict ;
draw-equation ::= draw:equation::draw-equation-attlist ;
text-table-index-source ::= text:table-index-source::(text-illustration-index-source-attrs text-index-title-template? text-table-index-entry-template?) ;
office-automatic-styles ::= (office:automatic-styles::(styles style-page-layout*))? ;
animation-element ::= (anim:animate::(common-anim-target-attlist common-anim-named-target-attlist common-anim-values-attlist common-anim-spline-mode-attlist common-spline-anim-value-attlist common-timing-attlist common-anim-add-accum-attlist)) | (anim:set::(common-anim-target-attlist common-anim-named-target-attlist common-anim-set-values-attlist common-timing-attlist common-anim-add-accum-attlist)) | (anim:animateMotion::(anim-animate-motion-attlist common-anim-target-attlist common-anim-named-target-attlist common-anim-add-accum-attlist common-anim-values-attlist common-timing-attlist common-spline-anim-value-attlist)) | (anim:animateColor::(common-anim-target-attlist common-anim-named-target-attlist common-anim-add-accum-attlist common-anim-values-attlist common-anim-spline-mode-attlist common-spline-anim-value-attlist anim-animate-color-attlist common-timing-attlist)) | (anim:animateTransform::(common-anim-target-attlist common-anim-named-target-attlist common-anim-add-accum-attlist common-anim-values-attlist anim-animate-transform-attlist common-timing-attlist)) | (anim:transitionFilter::(common-anim-target-attlist common-anim-add-accum-attlist common-anim-values-attlist common-anim-spline-mode-attlist anim-transition-filter-attlist common-timing-attlist)) | (anim:par::(common-anim-attlist common-timing-attlist common-endsync-timing-attlist animation-element*)) | (anim:seq::(common-anim-attlist common-endsync-timing-attlist common-timing-attlist animation-element*)) | (anim:iterate::(common-anim-attlist anim-iterate-attlist common-timing-attlist common-endsync-timing-attlist animation-element*)) | (anim:audio::(common-anim-attlist anim-audio-attlist common-basic-timing-attlist)) | (anim:command::(common-anim-attlist anim-command-attlist common-begin-end-timing-attlist common-anim-target-attlist (anim:param::(anim:name::string anim:value::string))*)) ;
draw-polygon ::= draw:polygon::(common-draw-points-attlist common-draw-position-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
svg-title ::= svg:title::string() ;
zeroToOneDecimal ::= integer() ;
common-db-object-name ::= db:name::string ;
style-section-properties-attlist ::= common-background-color-attlist common-horizontal-margin-attlist (style:protect::boolean)? common-editable-attlist (text:dont-balance-text-columns::boolean)? common-writing-mode-attlist ;
table-data-pilot-group ::= table:data-pilot-group::(table-data-pilot-group-attlist table-data-pilot-group-member+) ;
number-boolean ::= number:boolean::ε ;
dr3d-cube ::= dr3d:cube::(dr3d-cube-attlist common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-dr3d-transform-attlist) ;
form-grid-attlist ::= form-control-attlist common-disabled-attlist common-printable-attlist common-tab-attlist common-title-attlist ;
table-scenario-attlist ::= table:scenario-ranges::cellRangeAddressList table:is-active::boolean (table:display-border::boolean)? (table:border-color::color)? (table:copy-back::boolean)? (table:copy-styles::boolean)? (table:copy-formulas::boolean)? (table:comment::string)? (table:protected::boolean)? ;
textEncoding ::= string() ;
db-index-column ::= db:index-column::db-index-column-attlist ;
common-control-id-attlist ::= xml-id (form:id::NCName)? ;
number-week-of-year ::= number:week-of-year::common-calendar-attlist ;
form-option ::= form:option::(form-option-attlist string()) ;
table-data-pilot-level-attlist ::= (table:show-empty::boolean)? ;
presentation-event-listener ::= presentation:event-listener::(presentation-event-listener-attlist presentation-sound?) ;
draw-gradient ::= draw:gradient::(common-draw-gradient-attlist draw-gradient-attlist) ;
text-outline-level ::= (text:outline-level::positiveInteger)? ;
office-text-content-epilogue ::= table-functions ;
table-data-pilot-group-attlist ::= table:name::string ;
signedZeroToHundredPercent ::= string() ;
draw-frame-attlist ::= (draw:copy-of::string)? ;
common-restart-default-attlist ::= (smil:restartDefault::("never" | "always" | "whenNotActive" | "inherit"))? ;
chart-domain ::= chart:domain::((table:cell-range-address::cellRangeAddressList)?) ;
table-data-pilot-group-member-attlist ::= table:name::string ;
db-key-columns-attlist ::= ε ;
form-option-attlist ::= current-selected selected label common-value-attlist ;
db-columns ::= db:columns::(db-columns-attlist db-column+) ;
style-paragraph-properties ::= style:paragraph-properties::style-paragraph-properties-content-strict ;
text-file-name-attlist ::= (text:display::("full" | "path" | "name" | "name-and-extension"))? common-field-fixed-attlist ;
common-fill-default-attlist ::= (smil:fillDefault::("remove" | "freeze" | "hold" | "transition" | "auto" | "inherit"))? ;
db-database-description-attlist ::= ε ;
common-form-visual-effect-attlist ::= (form:visual-effect::("flat" | "3d"))? ;
horizontal-mirror ::= "horizontal" | "horizontal-on-odd" | "horizontal-on-even" ;
header-footer-content ::= (text-tracked-changes text-decls (text-h | text-p | text-list | table-table | text-section | text-table-of-content | text-illustration-index | text-table-index | text-object-index | text-user-index | text-alphabetical-index | text-bibliography | text-index-title | change-marks)*) | (style-region-left? style-region-center? style-region-right?) ;
style-page-layout-properties-attlist ::= (fo:page-width::length)? (fo:page-height::length)? common-num-format-attlist? common-num-format-prefix-suffix-attlist (style:paper-tray-name::("default" | string))? (style:print-orientation::("portrait" | "landscape"))? common-horizontal-margin-attlist common-vertical-margin-attlist common-margin-attlist common-border-attlist common-border-line-width-attlist common-padding-attlist common-shadow-attlist common-background-color-attlist (style:register-truth-ref-style-name::styleNameRef)? (style:print::(("headers" | "grid" | "annotations" | "objects" | "charts" | "drawings" | "formulas" | "zero-values")*))? (style:print-page-order::("ttb" | "ltr"))? (style:first-page-number::(positiveInteger | "continue"))? (style:scale-to::percent)? (style:scale-to-pages::positiveInteger)? (style:table-centering::("horizontal" | "vertical" | "both" | "none"))? (style:footnote-max-height::length)? common-writing-mode-attlist (style:layout-grid-mode::("none" | "line" | "both"))? (style:layout-grid-standard-mode::boolean)? (style:layout-grid-base-height::length)? (style:layout-grid-ruby-height::length)? (style:layout-grid-lines::positiveInteger)? (style:layout-grid-base-width::length)? (style:layout-grid-color::color)? (style:layout-grid-ruby-below::boolean)? (style:layout-grid-print::boolean)? (style:layout-grid-display::boolean)? (style:layout-grid-snap-to::boolean)? ;
table-error-message ::= table:error-message::((table:title::string)? (table:display::boolean)? (table:message-type::("stop" | "warning" | "information"))? text-p*) ;
style-table-row-properties ::= style:table-row-properties::style-table-row-properties-content-strict ;
draw-regular-polygon ::= draw:regular-polygon::(draw-regular-polygon-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
db-columns-attlist ::= ε ;
style-paragraph-properties-attlist ::= (fo:line-height::("normal" | nonNegativeLength | percent))? (style:line-height-at-least::nonNegativeLength)? (style:line-spacing::length)? (style:font-independent-line-spacing::boolean)? common-text-align (fo:text-align-last::("start" | "center" | "justify"))? (style:justify-single-word::boolean)? (fo:keep-together::("auto" | "always"))? (fo:widows::nonNegativeInteger)? (fo:orphans::nonNegativeInteger)? (style:tab-stop-distance::nonNegativeLength)? (fo:hyphenation-keep::("auto" | "page"))? (fo:hyphenation-ladder-count::("no-limit" | positiveInteger))? (style:register-true::boolean)? common-horizontal-margin-attlist (fo:text-indent::(length | percent))? (style:auto-text-indent::boolean)? common-vertical-margin-attlist common-margin-attlist common-break-attlist common-background-color-attlist common-border-attlist common-border-line-width-attlist (style:join-border::boolean)? common-padding-attlist common-shadow-attlist common-keep-with-next-attlist (text:number-lines::boolean)? (text:line-number::nonNegativeInteger)? (style:text-autospace::("none" | "ideograph-alpha"))? (style:punctuation-wrap::("simple" | "hanging"))? (style:line-break::("normal" | "strict"))? (style:vertical-align::("top" | "middle" | "bottom" | "auto" | "baseline"))? common-writing-mode-attlist (style:writing-mode-automatic::boolean)? (style:snap-to-layout-grid::boolean)? common-page-number-attlist common-background-transparency-attlist ;
table-background-attlist ::= table:style-name::styleNameRef ;
office-presentation-attlist ::= ε ;
vertBackPos ::= "top" | "center" | "bottom" ;
draw-layer-attlist ::= draw:name::string (draw:protected::boolean)? (draw:display::("always" | "screen" | "printer" | "none"))? ;
IDREF ::= string() ;
draw-page ::= draw:page::(common-presentation-header-footer-attlist draw-page-attlist svg-title? svg-desc? draw-layer-set? office-forms? shape* (presentation-animations | animation-element)? presentation-notes?) ;
db-server-database ::= db:server-database::db-server-database-attlist ;
style-text-properties-content-strict ::= style-text-properties-attlist style-text-properties-elements ;
text-table-index ::= text:table-index::(common-section-attlist text-table-index-source text-index-body) ;
office-database ::= office:database::(db-data-source db-forms? db-reports? db-queries? db-table-presentations? db-schema-definition?) ;
draw-hatch-attlist ::= draw:name::styleName (draw:display-name::string)? draw:style::("single" | "double" | "triple") (draw:color::color)? (draw:distance::length)? (draw:rotation::angle)? ;
db-server-database-attlist ::= db:type::namespacedToken db-host-and-port | db-local-socket-name (db:database-name::string)? ;
common-draw-shape-with-styles-attlist ::= common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-draw-transform-attlist common-draw-name-attlist common-text-spreadsheet-shape-attlist ;
languageCode ::= string() ;
common-text-anchor-attlist ::= (text:anchor-type::("page" | "frame" | "paragraph" | "char" | "as-char"))? (text:anchor-page-number::positiveInteger)? ;
common-field-num-format-attlist ::= common-num-format-attlist? ;
table-sort-groups ::= table:sort-groups::table-sort-groups-attlist ;
db-reports-attlist ::= ε ;
table-insertion-attlist ::= table:type::("row" | "column" | "table") table:position::integer (table:count::positiveInteger)? (table:table::integer)? ;
table-filter-and ::= table:filter-and::((table-filter-or | table-filter-condition)+) ;
text-bibliography-configuration-attlist ::= (text:prefix::string)? (text:suffix::string)? (text:numbered-entries::boolean)? (text:sort-by-position::boolean)? (fo:language::languageCode)? (fo:country::countryCode)? (fo:script::scriptCode)? (style:rfc-language-tag::language)? (text:sort-algorithm::string)? ;
chart-floor ::= chart:floor::chart-floor-attlist ;
db-login ::= db:login::db-login-attlist ;
table-movement-cut-off-attlist ::= (table:position::integer) | (table:start-position::integer table:end-position::integer) ;
style-table-column-properties-elements ::= ε ;
table-table-cell-attlist ::= (table:number-columns-repeated::positiveInteger)? (table:style-name::styleNameRef)? (table:content-validation-name::string)? (table:formula::string)? common-value-and-type-attlist? (table:protect::boolean)? (table:protected::boolean)? xml-id? common-in-content-meta-attlist? ;
style-list-level-properties ::= style:list-level-properties::style-list-level-properties-content-strict ;
lineType ::= "none" | "single" | "double" ;
table-change-deletion ::= table:change-deletion::((table:id::string)?) ;
timeOrDateTime ::= string() ;
common-delay-for-repeat ::= (form:delay-for-repeat::duration)? ;
draw-ellipse-attlist ::= svg:rx::length svg:ry::length ;
table-table-column-group ::= table:table-column-group::(table-table-column-group-attlist table-columns-and-groups) ;
db-data-types ::= "bit" | "boolean" | "tinyint" | "smallint" | "integer" | "bigint" | "float" | "real" | "double" | "numeric" | "decimal" | "char" | "varchar" | "longvarchar" | "date" | "time" | "timestmp" | "binary" | "varbinary" | "longvarbinary" | "sqlnull" | "other" | "object" | "distinct" | "struct" | "array" | "blob" | "clob" | "ref" ;
text-index-entry-link-start ::= text:index-entry-link-start::((text:style-name::styleNameRef)?) ;
common-format-source-attlist ::= (number:format-source::("fixed" | "language"))? ;
style-style-content ::= (style:family::"text" style-text-properties?) | (style:family::"paragraph" style-paragraph-properties? style-text-properties?) | (style:family::"section" style-section-properties?) | (style:family::"ruby" style-ruby-properties?) | (style:family::"table" style-table-properties?) | (style:family::"table-column" style-table-column-properties?) | (style:family::"table-row" style-table-row-properties?) | (style:family::"table-cell" style-table-cell-properties? style-paragraph-properties? style-text-properties?) | (style:family::("graphic" | "presentation") style-graphic-properties? style-paragraph-properties? style-text-properties?) | (style:family::"drawing-page" style-drawing-page-properties?) | (style:family::"chart" style-chart-properties? style-graphic-properties? style-paragraph-properties? style-text-properties?) ;
text-list ::= text:list::(text-list-attr text-list-header? text-list-item*) ;
common-table-cell-address-attlist ::= table:column::integer table:row::integer table:table::integer ;
common-anim-set-values-attlist ::= (smil:to::string)? ;
table-table-column-group-attlist ::= (table:display::boolean)? ;
style-footer ::= style:footer::(common-style-header-footer-attlist header-footer-content) ;
number-year-attlist ::= (number:style::("short" | "long"))? ;
number-text ::= number:text::string() ;
text-index-entry-tab-stop ::= text:index-entry-tab-stop::((text:style-name::styleNameRef)? text-index-entry-tab-stop-attrs) ;
style-table-properties ::= style:table-properties::style-table-properties-content-strict ;
common-field-database-name ::= ((text:database-name::string)?) | form-connection-resource ;
chart-subtitle ::= chart:subtitle::(chart-title-attlist text-p?) ;
style-region-left ::= style:region-left::region-content ;
draw-contour-path ::= draw:contour-path::(common-contour-attlist common-draw-size-attlist common-draw-viewbox-attlist common-draw-path-data-attlist) ;
style-table-properties-attlist ::= (style:width::positiveLength)? (style:rel-width::percent)? (table:align::("left" | "center" | "right" | "margins"))? common-horizontal-margin-attlist common-vertical-margin-attlist common-margin-attlist common-page-number-attlist common-break-attlist common-background-color-attlist common-shadow-attlist common-keep-with-next-attlist (style:may-break-between-rows::boolean)? (table:border-model::("collapsing" | "separating"))? common-writing-mode-attlist (table:display::boolean)? ;
text-alphabetical-index-source-attrs ::= text-index-scope-attr text-relative-tab-stop-position-attr (text:ignore-case::boolean)? (text:main-entry-style-name::styleNameRef)? (text:alphabetical-separators::boolean)? (text:combine-entries::boolean)? (text:combine-entries-with-dash::boolean)? (text:combine-entries-with-pp::boolean)? (text:use-keys-as-entries::boolean)? (text:capitalize-entries::boolean)? (text:comma-separated::boolean)? (fo:language::languageCode)? (fo:country::countryCode)? (fo:script::scriptCode)? (style:rfc-language-tag::language)? (text:sort-algorithm::string)? ;
text-list-attr ::= (text:style-name::styleNameRef)? (text:continue-numbering::boolean)? (text:continue-list::IDREF)? xml-id? ;
ID ::= string() ;
table-help-message ::= table:help-message::((table:title::string)? (table:display::boolean)? text-p*) ;
db-queries ::= db:queries::(db-queries-attlist (db-query | db-query-collection)*) ;
form-frame-attlist ::= form-control-attlist common-disabled-attlist for label common-printable-attlist common-title-attlist ;
common-time-manip-attlist ::= (smil:accelerate::zeroToOneDecimal)? (smil:decelerate::zeroToOneDecimal)? (smil:autoReverse::boolean)? ;
text-numbered-paragraph-attr ::= text:list-id::NCName (text:level::positiveInteger)? (text:style-name::styleNameRef text:continue-numbering::boolean text:start-value::nonNegativeInteger)? xml-id? ;
table-data-pilot-field-attlist ::= table:source-field-name::string (table:orientation::("row" | "column" | "data" | "hidden")) | (table:orientation::"page" table:selected-page::string) (table:is-data-layout-field::string)? (table:function::("auto" | "average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string))? (table:used-hierarchy::integer)? ;
office-styles ::= (office:styles::(styles style-default-style* style-default-page-layout? text-outline-style? text-notes-configuration* text-bibliography-configuration? text-linenumbering-configuration? draw-gradient* svg-linearGradient* svg-radialGradient* draw-hatch* draw-fill-image* draw-marker* draw-stroke-dash* draw-opacity* style-presentation-page-layout* table-table-template*))? ;
common-draw-viewbox-attlist ::= svg:viewBox::(integer integer integer integer) ;
table-table ::= table:table::(table-table-attlist table-title? table-desc? table-table-source? office-dde-source? table-scenario? office-forms? table-shapes? table-columns-and-groups table-rows-and-groups table-named-expressions?) ;
office-document ::= office:document::(office-document-attrs office-document-common-attrs office-meta office-settings office-scripts office-font-face-decls office-styles office-automatic-styles office-master-styles office-body) ;
db-table-presentations ::= db:table-representations::(db-table-presentations-attlist db-table-presentation*) ;
office-drawing-content-epilogue ::= table-functions ;
common-horizontal-margin-attlist ::= (fo:margin-left::(length | percent))? (fo:margin-right::(length | percent))? ;
common-anim-add-accum-attlist ::= (smil:accumulate::("none" | "sum"))? (smil:additive::("replace" | "sum"))? ;
draw-applet ::= draw:applet::(draw-applet-attlist common-draw-data-attlist? draw-param*) ;
text-database-display-attlist ::= common-field-database-table common-field-data-style-name-attlist text:column-name::string ;
db-table-include-filter-attlist ::= ε ;
text-common-ref-content ::= string() (text:ref-name::string)? ;
db-command ::= db:command::string ;
office-script ::= office:script::(office-script-attlist string()? anyElements string()?) ;
db-table-filter-pattern-attlist ::= ε ;
table-insertion-cut-off-attlist ::= table:id::string table:position::integer ;
svg-radialGradient ::= svg:radialGradient::(common-svg-gradient-attlist (svg:cx::(coordinate | percent))? (svg:cy::(coordinate | percent))? (svg:r::(coordinate | percent))? (svg:fx::(coordinate | percent))? (svg:fy::(coordinate | percent))? svg-stop*) ;
common-anim-spline-mode-attlist ::= (smil:calcMode::("discrete" | "linear" | "paced" | "spline"))? ;
table-cell-range-source ::= table:cell-range-source::(table-table-cell-range-source-attlist table-linked-source-attlist) ;
draw-connector-attlist ::= (draw:type::("standard" | "lines" | "line" | "curve"))? (svg:x1::coordinate svg:y1::coordinate)? (draw:start-shape::IDREF)? (draw:start-glue-point::nonNegativeInteger)? (svg:x2::coordinate svg:y2::coordinate)? (draw:end-shape::IDREF)? (draw:end-glue-point::nonNegativeInteger)? (draw:line-skew::(length (length length?)?))? (svg:d::pathData)? ;
button-type ::= (form:button-type::types)? ;
svg-definition-src ::= svg:definition-src::common-svg-font-face-xlink-attlist ;
number-month-attlist ::= (number:textual::boolean)? (number:possessive-form::boolean)? (number:style::("short" | "long"))? ;
chart-data-point-attlist ::= (chart:repeated::positiveInteger)? (chart:style-name::styleNameRef)? xml-id? ;
text-index-entry-bibliography-attrs ::= (text:style-name::styleNameRef)? text:bibliography-data-field::("address" | "annote" | "author" | "bibliography-type" | "booktitle" | "chapter" | "custom1" | "custom2" | "custom3" | "custom4" | "custom5" | "edition" | "editor" | "howpublished" | "identifier" | "institution" | "isbn" | "issn" | "journal" | "month" | "note" | "number" | "organizations" | "pages" | "publisher" | "report-type" | "school" | "series" | "title" | "url" | "volume" | "year") ;
dateOrDateTime ::= string() ;
text-table-of-content-children ::= text-index-entry-chapter | text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop | text-index-entry-link-start | text-index-entry-link-end ;
common-data-style-attlist ::= style:name::styleName (style:display-name::string)? (number:language::languageCode)? (number:country::countryCode)? (number:script::scriptCode)? (number:rfc-language-tag::language)? (number:title::string)? (style:volatile::boolean)? (number:transliteration-format::string)? (number:transliteration-language::countryCode)? (number:transliteration-country::countryCode)? (number:transliteration-style::("short" | "medium" | "long"))? ;
office-spreadsheet-content-main ::= table-table* ;
dr3d-scene ::= dr3d:scene::(dr3d-scene-attlist common-draw-position-attlist common-draw-size-attlist common-draw-style-name-attlist common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-text-spreadsheet-shape-attlist common-dr3d-transform-attlist common-draw-caption-id-attlist svg-title? svg-desc? dr3d-light* shapes3d* draw-glue-point*) ;
table-columns ::= table-table-columns | (table-table-column+) ;
dc-creator ::= dc:creator::string ;
db-apply-command ::= (db:apply-command::boolean)? ;
image-data ::= (form:image-data::anyIRI)? ;
chart-legend ::= chart:legend::(chart-legend-attlist text-p?) ;
text-section-source-attr ::= (xlink:type::"simple" xlink:href::anyIRI (xlink:show::"embed")?)? (text:section-name::string)? (text:filter-name::string)? ;
relativeLength ::= string() ;
office-annotation-attlist ::= (office:display::boolean)? common-office-annotation-name-attlist? ;
common-dr3d-transform-attlist ::= (dr3d:transform::string)? ;
common-field-database-table ::= common-field-database-table-attlist common-field-database-name ;
dr3d-scene-attlist ::= (dr3d:vrp::vector3D)? (dr3d:vpn::vector3D)? (dr3d:vup::vector3D)? (dr3d:projection::("parallel" | "perspective"))? (dr3d:distance::length)? (dr3d:focal-length::length)? (dr3d:shadow-slant::angle)? (dr3d:shade-mode::("flat" | "phong" | "gouraud" | "draft"))? (dr3d:ambient-color::color)? (dr3d:lighting-mode::boolean)? ;
db-data-source ::= db:data-source::(db-data-source-attlist db-connection-data db-driver-settings? db-application-connection-settings?) ;
draw-rect ::= draw:rect::(draw-rect-attlist common-draw-position-attlist common-draw-size-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
chart-grid-attlist ::= (chart:class::("major" | "minor"))? (chart:style-name::styleNameRef)? ;
style-graphic-properties-attlist ::= (draw:stroke::("none" | "dash" | "solid"))? (draw:stroke-dash::styleNameRef)? (draw:stroke-dash-names::styleNameRefs)? (svg:stroke-width::length)? (svg:stroke-color::color)? (draw:marker-start::styleNameRef)? (draw:marker-end::styleNameRef)? (draw:marker-start-width::length)? (draw:marker-end-width::length)? (draw:marker-start-center::boolean)? (draw:marker-end-center::boolean)? (svg:stroke-opacity::(string() | zeroToHundredPercent))? (draw:stroke-linejoin::("miter" | "round" | "bevel" | "middle" | "none"))? (svg:stroke-linecap::("butt" | "square" | "round"))? (draw:symbol-color::color)? (text:animation::("none" | "scroll" | "alternate" | "slide"))? (text:animation-direction::("left" | "right" | "up" | "down"))? (text:animation-start-inside::boolean)? (text:animation-stop-inside::boolean)? (text:animation-repeat::nonNegativeInteger)? (text:animation-delay::duration)? (text:animation-steps::length)? (draw:auto-grow-width::boolean)? (draw:auto-grow-height::boolean)? (draw:fit-to-size::boolean)? (draw:fit-to-contour::boolean)? (draw:textarea-vertical-align::("top" | "middle" | "bottom" | "justify"))? (draw:textarea-horizontal-align::("left" | "center" | "right" | "justify"))? (fo:wrap-option::("no-wrap" | "wrap"))? (style:shrink-to-fit::boolean)? (draw:color-mode::("greyscale" | "mono" | "watermark" | "standard"))? (draw:color-inversion::boolean)? (draw:luminance::zeroToHundredPercent)? (draw:contrast::percent)? (draw:gamma::percent)? (draw:red::signedZeroToHundredPercent)? (draw:green::signedZeroToHundredPercent)? (draw:blue::signedZeroToHundredPercent)? (draw:image-opacity::zeroToHundredPercent)? (draw:shadow::("visible" | "hidden"))? (draw:shadow-offset-x::length)? (draw:shadow-offset-y::length)? (draw:shadow-color::color)? (draw:shadow-opacity::zeroToHundredPercent)? (draw:start-line-spacing-horizontal::distance)? (draw:start-line-spacing-vertical::distance)? (draw:end-line-spacing-horizontal::distance)? (draw:end-line-spacing-vertical::distance)? (draw:line-distance::distance)? (draw:guide-overhang::length)? (draw:guide-distance::distance)? (draw:start-guide::length)? (draw:end-guide::length)? (draw:placing::("below" | "above"))? (draw:parallel::boolean)? (draw:measure-align::("automatic" | "left-outside" | "inside" | "right-outside"))? (draw:measure-vertical-align::("automatic" | "above" | "below" | "center"))? (draw:unit::("automatic" | "mm" | "cm" | "m" | "km" | "pt" | "pc" | "inch" | "ft" | "mi"))? (draw:show-unit::boolean)? (draw:decimal-places::nonNegativeInteger)? (draw:caption-type::("straight-line" | "angled-line" | "angled-connector-line"))? (draw:caption-angle-type::("fixed" | "free"))? (draw:caption-angle::angle)? (draw:caption-gap::distance)? (draw:caption-escape-direction::("horizontal" | "vertical" | "auto"))? (draw:caption-escape::(length | percent))? (draw:caption-line-length::length)? (draw:caption-fit-line-length::boolean)? (dr3d:horizontal-segments::nonNegativeInteger)? (dr3d:vertical-segments::nonNegativeInteger)? (dr3d:edge-rounding::percent)? (dr3d:edge-rounding-mode::("correct" | "attractive"))? (dr3d:back-scale::percent)? (dr3d:depth::length)? (dr3d:backface-culling::("enabled" | "disabled"))? (dr3d:end-angle::angle)? (dr3d:close-front::boolean)? (dr3d:close-back::boolean)? (dr3d:lighting-mode::("standard" | "double-sided"))? (dr3d:normals-kind::("object" | "flat" | "sphere"))? (dr3d:normals-direction::("normal" | "inverse"))? (dr3d:texture-generation-mode-x::("object" | "parallel" | "sphere"))? (dr3d:texture-generation-mode-y::("object" | "parallel" | "sphere"))? (dr3d:texture-kind::("luminance" | "intensity" | "color"))? (dr3d:texture-filter::("enabled" | "disabled"))? (dr3d:texture-mode::("replace" | "modulate" | "blend"))? (dr3d:ambient-color::color)? (dr3d:emissive-color::color)? (dr3d:specular-color::color)? (dr3d:diffuse-color::color)? (dr3d:shininess::percent)? (dr3d:shadow::("visible" | "hidden"))? common-draw-rel-size-attlist (fo:min-width::(length | percent))? (fo:min-height::(length | percent))? (fo:max-height::(length | percent))? (fo:max-width::(length | percent))? common-horizontal-margin-attlist common-vertical-margin-attlist common-margin-attlist (style:print-content::boolean)? (style:protect::("none" | (("content" | "position" | "size")+)))? (style:horizontal-pos::("left" | "center" | "right" | "from-left" | "inside" | "outside" | "from-inside"))? (svg:x::coordinate)? (style:horizontal-rel::("page" | "page-content" | "page-start-margin" | "page-end-margin" | "frame" | "frame-content" | "frame-start-margin" | "frame-end-margin" | "paragraph" | "paragraph-content" | "paragraph-start-margin" | "paragraph-end-margin" | "char"))? common-vertical-pos-attlist common-vertical-rel-attlist common-text-anchor-attlist common-border-attlist common-border-line-width-attlist common-padding-attlist common-shadow-attlist common-background-color-attlist common-background-transparency-attlist common-editable-attlist (style:wrap::("none" | "left" | "right" | "parallel" | "dynamic" | "run-through" | "biggest"))? (style:wrap-dynamic-threshold::nonNegativeLength)? (style:number-wrapped-paragraphs::("no-limit" | positiveInteger))? (style:wrap-contour::boolean)? (style:wrap-contour-mode::("full" | "outside"))? (style:run-through::("foreground" | "background"))? (style:flow-with-text::boolean)? (style:overflow-behavior::("clip" | "auto-create-new-frame"))? (style:mirror::("none" | "vertical" | horizontal-mirror | ("vertical" horizontal-mirror) | (horizontal-mirror "vertical")))? (fo:clip::("auto" | clipShape))? (draw:wrap-influence-on-position::("iterative" | "once-concurrent" | "once-successive"))? common-writing-mode-attlist (draw:frame-display-scrollbar::boolean)? (draw:frame-display-border::boolean)? (draw:frame-margin-horizontal::nonNegativePixelLength)? (draw:frame-margin-vertical::nonNegativePixelLength)? (draw:visible-area-left::nonNegativeLength)? (draw:visible-area-top::nonNegativeLength)? (draw:visible-area-width::positiveLength)? (draw:visible-area-height::positiveLength)? (draw:draw-aspect::("content" | "thumbnail" | "icon" | "print-view"))? (draw:ole-draw-aspect::nonNegativeInteger)? ;
presentationSpeeds ::= "slow" | "medium" | "fast" ;
office-font-face-decls ::= (office:font-face-decls::(style-font-face*))? ;
table-subtotal-field-attlist ::= table:field-number::nonNegativeInteger table:function::("average" | "count" | "countnums" | "max" | "min" | "product" | "stdev" | "stdevp" | "sum" | "var" | "varp" | string) ;
form-property ::= (form:property::(form-property-name form-property-value-and-type-attlist)) | (form:list-property::(form-property-name form-property-type-and-value-list)) ;
nonNegativeInteger ::= integer() ;
style-paragraph-properties-content-strict ::= style-paragraph-properties-attlist style-paragraph-properties-elements ;
draw-fill-image ::= draw:fill-image::(draw-fill-image-attlist xlink:type::"simple" xlink:href::anyIRI (xlink:show::"embed")? (xlink:actuate::"onLoad")?) ;
CURIEs ::= CURIE+ ;
draw-param-attlist ::= (draw:name::string)? (draw:value::string)? ;
common-begin-end-timing-attlist ::= (smil:begin::string)? (smil:end::string)? ;
text-a-attlist ::= (office:name::string)? (office:title::string)? xlink:type::"simple" xlink:href::anyIRI (xlink:actuate::"onRequest")? (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? (text:style-name::styleNameRef)? (text:visited-style-name::styleNameRef)? ;
db-character-set ::= db:character-set::db-character-set-attlist ;
style-graphic-fill-properties-attlist ::= (draw:fill::("none" | "solid" | "bitmap" | "gradient" | "hatch"))? (draw:fill-color::color)? (draw:secondary-fill-color::color)? (draw:fill-gradient-name::styleNameRef)? (draw:gradient-step-count::nonNegativeInteger)? (draw:fill-hatch-name::styleNameRef)? (draw:fill-hatch-solid::boolean)? (draw:fill-image-name::styleNameRef)? (style:repeat::("no-repeat" | "repeat" | "stretch"))? (draw:fill-image-width::(length | percent))? (draw:fill-image-height::(length | percent))? (draw:fill-image-ref-point-x::percent)? (draw:fill-image-ref-point-y::percent)? (draw:fill-image-ref-point::("top-left" | "top" | "top-right" | "left" | "center" | "right" | "bottom-left" | "bottom" | "bottom-right"))? (draw:tile-repeat-offset::(zeroToHundredPercent "horizontal" | "vertical"))? (draw:opacity::zeroToHundredPercent)? (draw:opacity-name::styleNameRef)? (svg:fill-rule::("nonzero" | "evenodd"))? ;
common-draw-rel-size-attlist ::= common-draw-size-attlist (style:rel-width::(percent | "scale" | "scale-min"))? (style:rel-height::(percent | "scale" | "scale-min"))? ;
table-cut-offs ::= table:cut-offs::((table-movement-cut-off+) | (table-insertion-cut-off table-movement-cut-off*)) ;
common-dur-timing-attlist ::= (smil:dur::string)? ;
style-text-properties-attlist ::= (fo:font-variant::fontVariant)? (fo:text-transform::("none" | "lowercase" | "uppercase" | "capitalize"))? (fo:color::color)? (style:use-window-font-color::boolean)? (style:text-outline::boolean)? (style:text-line-through-type::lineType)? (style:text-line-through-style::lineStyle)? (style:text-line-through-width::lineWidth)? (style:text-line-through-color::("font-color" | color))? (style:text-line-through-text::string)? (style:text-line-through-text-style::styleNameRef)? (style:text-position::(percent | "super" | "sub" percent?))? (style:font-name::string)? (style:font-name-asian::string)? (style:font-name-complex::string)? (fo:font-family::string)? (style:font-family-asian::string)? (style:font-family-complex::string)? (style:font-family-generic::fontFamilyGeneric)? (style:font-family-generic-asian::fontFamilyGeneric)? (style:font-family-generic-complex::fontFamilyGeneric)? (style:font-style-name::string)? (style:font-style-name-asian::string)? (style:font-style-name-complex::string)? (style:font-pitch::fontPitch)? (style:font-pitch-asian::fontPitch)? (style:font-pitch-complex::fontPitch)? (style:font-charset::textEncoding)? (style:font-charset-asian::textEncoding)? (style:font-charset-complex::textEncoding)? (fo:font-size::(positiveLength | percent))? (style:font-size-asian::(positiveLength | percent))? (style:font-size-complex::(positiveLength | percent))? (style:font-size-rel::length)? (style:font-size-rel-asian::length)? (style:font-size-rel-complex::length)? (style:script-type::("latin" | "asian" | "complex" | "ignore"))? (fo:letter-spacing::(length | "normal"))? (fo:language::languageCode)? (style:language-asian::languageCode)? (style:language-complex::languageCode)? (fo:country::countryCode)? (style:country-asian::countryCode)? (style:country-complex::countryCode)? (fo:script::scriptCode)? (style:script-asian::scriptCode)? (style:script-complex::scriptCode)? (style:rfc-language-tag::language)? (style:rfc-language-tag-asian::language)? (style:rfc-language-tag-complex::language)? (fo:font-style::fontStyle)? (style:font-style-asian::fontStyle)? (style:font-style-complex::fontStyle)? (style:font-relief::("none" | "embossed" | "engraved"))? (fo:text-shadow::shadowType)? (style:text-underline-type::lineType)? (style:text-underline-style::lineStyle)? (style:text-underline-width::lineWidth)? (style:text-underline-color::("font-color" | color))? (style:text-overline-type::lineType)? (style:text-overline-style::lineStyle)? (style:text-overline-width::lineWidth)? (style:text-overline-color::("font-color" | color))? (style:text-overline-mode::lineMode)? (fo:font-weight::fontWeight)? (style:font-weight-asian::fontWeight)? (style:font-weight-complex::fontWeight)? (style:text-underline-mode::lineMode)? (style:text-line-through-mode::lineMode)? (style:letter-kerning::boolean)? (style:text-blinking::boolean)? common-background-color-attlist (style:text-combine::("none" | "letters" | "lines"))? (style:text-combine-start-char::character)? (style:text-combine-end-char::character)? (style:text-emphasize::("none" | ("none" | "accent" | "dot" | "circle" | "disc" "above" | "below")))? (style:text-scale::percent)? (style:text-rotation-angle::angle)? (style:text-rotation-scale::("fixed" | "line-height"))? (fo:hyphenate::boolean)? (fo:hyphenation-remain-char-count::positiveInteger)? (fo:hyphenation-push-char-count::positiveInteger)? (text:display::"true") | (text:display::"none") | (text:display::"condition" text:condition::"none") | ε ;
number-time-style-attlist ::= (number:truncate-on-overflow::boolean)? ;
text-section-source ::= text:section-source::text-section-source-attr ;
office-document-attrs ::= office:mimetype::string ;
draw-image-map ::= draw:image-map::((draw-area-rectangle | draw-area-circle | draw-area-polygon)*) ;
draw-enhanced-geometry ::= draw:enhanced-geometry::(draw-enhanced-geometry-attlist draw-equation* draw-handle*) ;
text-chapter-attlist ::= text:display::("name" | "number" | "number-and-name" | "plain-number-and-name" | "plain-number") text:outline-level::nonNegativeInteger ;
table-data-pilot-field-reference ::= table:data-pilot-field-reference::table-data-pilot-field-reference-attlist ;
form-checkbox-attlist ::= form-control-attlist common-disabled-attlist label common-printable-attlist common-tab-attlist common-title-attlist common-value-attlist common-data-field-attlist common-form-visual-effect-attlist common-form-relative-image-position-attlist common-linked-cell (form:current-state::states)? (form:is-tristate::boolean)? (form:state::states)? ;
draw-layer-set ::= draw:layer-set::(draw-layer*) ;
text-hidden-paragraph-attlist ::= text:condition::string (text:is-hidden::boolean)? ;
text-bookmark-start-attlist ::= text:name::string xml-id? common-in-content-meta-attlist? ;
presentation-sound ::= presentation:sound::(presentation-sound-attlist xlink:type::"simple" xlink:href::anyIRI (xlink:actuate::"onRequest")? (xlink:show::("new" | "replace"))?) ;
db-table-exclude-filter ::= db:table-exclude-filter::(db-table-exclude-filter-attlist db-table-filter-pattern+) ;
style-background-image ::= (style:background-image::(style-background-image-attlist common-draw-data-attlist | office-binary-data | ε))? ;
presentation-decls ::= presentation-decl* ;
xforms-model ::= xforms:model::anyAttListOrElements ;
style-drop-cap ::= (style:drop-cap::style-drop-cap-attlist)? ;
db-key ::= db:key::(db-key-attlist db-key-columns+) ;
horiBackPos ::= "left" | "center" | "right" ;
draw-floating-frame ::= draw:floating-frame::(draw-floating-frame-attlist common-draw-data-attlist) ;
table-background ::= table:background::table-background-attlist ;
presentationEffects ::= "none" | "fade" | "move" | "stripes" | "open" | "close" | "dissolve" | "wavyline" | "random" | "lines" | "laser" | "appear" | "hide" | "move-short" | "checkerboard" | "rotate" | "stretch" ;
table-linked-source-attlist ::= xlink:type::"simple" xlink:href::anyIRI (xlink:actuate::"onRequest")? (table:filter-name::string)? (table:filter-options::string)? (table:refresh-delay::duration)? ;
text-note-class ::= text:note-class::("footnote" | "endnote") ;
common-presentation-header-footer-attlist ::= (presentation:use-header-name::string)? (presentation:use-footer-name::string)? (presentation:use-date-time-name::string)? ;
style-ruby-properties-elements ::= ε ;
db-table-type-attlist ::= ε ;
table-rows ::= table-table-rows | ((text-soft-page-break? table-table-row)+) ;
db-column-attlist ::= (db:visible::boolean)? (db:style-name::styleNameRef)? (db:default-cell-style-name::styleNameRef)? ;
draw-opacity-attlist ::= (draw:start::zeroToHundredPercent)? (draw:end::zeroToHundredPercent)? ;
style-section-properties-content-strict ::= style-section-properties-attlist style-section-properties-elements ;
presentation-classes ::= "title" | "outline" | "subtitle" | "text" | "graphic" | "object" | "chart" | "table" | "orgchart" | "page" | "notes" | "handout" | "header" | "footer" | "date-time" | "page-number" ;
db-table-settings ::= db:table-settings::(db-table-setting*) ;
current-selected ::= (form:current-selected::boolean)? ;
office-annotation-end ::= office:annotation-end::office-annotation-end-attlist ;
common-db-table-name-attlist ::= db:name::string (db:catalog-name::string)? (db:schema-name::string)? ;
table-movement-cut-off ::= table:movement-cut-off::table-movement-cut-off-attlist ;
form-number-attlist ::= (form:value::double)? (form:current-value::double)? (form:min-value::double)? (form:max-value::double)? ;
text-bookmark-end ::= text:bookmark-end::text-bookmark-end-attlist ;
text-illustration-index-entry-template-attrs ::= text:style-name::styleNameRef ;
common-dde-connection-decl-attlist ::= office:dde-application::string office:dde-topic::string office:dde-item::string (office:automatic-update::boolean)? ;
URIorSafeCURIE ::= anyURI | SafeCURIE ;
office-annotation-end-attlist ::= common-office-annotation-name-attlist ;
chart-data-label ::= chart:data-label::(chart-data-label-attlist text-p?) ;
common-number-attlist ::= (number:min-integer-digits::integer)? (number:grouping::boolean)? ;
presentation-footer-decl-attlist ::= presentation:name::string ;
svg-desc ::= svg:desc::string() ;
common-page-number-attlist ::= (style:page-number::(positiveInteger | "auto"))? ;
draw-ellipse ::= draw:ellipse::((draw-ellipse-attlist common-draw-circle-ellipse-pos-attlist) | (common-draw-position-attlist common-draw-size-attlist) common-draw-circle-ellipse-attlist common-draw-shape-with-text-and-styles-attlist common-draw-caption-id-attlist svg-title? svg-desc? office-event-listeners? draw-glue-point* draw-text) ;
common-draw-id-attlist ::= (xml-id (draw:id::NCName)?)? ;
form-generic-control-attlist ::= form-control-attlist ;
style-text-properties-elements ::= ε ;
common-field-display-value-formula-none-attlist ::= (text:display::("value" | "formula" | "none"))? ;
common-repeat-timing-attlist ::= (smil:repeatDur::string)? (smil:repeatCount::(nonNegativeDecimal | "indefinite"))? ;
office-presentation-content-epilogue ::= presentation-settings table-functions ;
number-boolean-style ::= number:boolean-style::(common-data-style-attlist style-text-properties? number-text? (number-boolean number-text?)? style-map*) ;
text-bibliography-source ::= text:bibliography-source::(text-index-title-template? text-bibliography-entry-template*) ;
text-sort-key-attlist ::= text:key::("address" | "annote" | "author" | "bibliography-type" | "booktitle" | "chapter" | "custom1" | "custom2" | "custom3" | "custom4" | "custom5" | "edition" | "editor" | "howpublished" | "identifier" | "institution" | "isbn" | "issn" | "journal" | "month" | "note" | "number" | "organizations" | "pages" | "publisher" | "report-type" | "school" | "series" | "title" | "url" | "volume" | "year") (text:sort-ascending::boolean)? ;
db-table-setting ::= db:table-setting::(db-table-setting-attlist db-delimiter? db-character-set?) ;
style-list-level-properties-attlist ::= common-text-align (text:space-before::length)? (text:min-label-width::nonNegativeLength)? (text:min-label-distance::nonNegativeLength)? (style:font-name::string)? (fo:width::positiveLength)? (fo:height::positiveLength)? common-vertical-rel-attlist common-vertical-pos-attlist (text:list-level-position-and-space-mode::("label-width-and-position" | "label-alignment"))? ;
table-body ::= table:body::common-table-template-attlist ;
text-date-attlist ::= common-field-fixed-attlist common-field-data-style-name-attlist (text:date-value::dateOrDateTime)? (text:date-adjust::duration)? ;
text-user-field-decl ::= text:user-field-decl::(common-field-name-attlist common-field-formula-attlist? common-value-and-type-attlist) ;
cellAddress ::= string() ;
fontPitch ::= "fixed" | "variable" ;
common-table-cell-range-address-attlist ::= table:start-column::integer table:start-row::integer table:start-table::integer table:end-column::integer table:end-row::integer table:end-table::integer ;
number-quarter ::= number:quarter::(number-quarter-attlist common-calendar-attlist) ;
config-config-item-map-entry ::= config:config-item-map-entry::(config-config-item-map-entry-attlist config-items) ;
anim-transition-filter-attlist ::= smil:type::string (smil:subtype::string)? (smil:direction::("forward" | "reverse"))? (smil:fadeColor::color)? (smil:mode::("in" | "out"))? ;
draw-glue-point ::= draw:glue-point::draw-glue-point-attlist ;
text-set-page-variable-attlist ::= (text:active::boolean)? (text:page-adjust::integer)? ;
table-data-pilot-tables ::= table:data-pilot-tables::(table-data-pilot-table*) ;
table-table-row ::= table:table-row::(table-table-row-attlist (table-table-cell | table-covered-table-cell)+) ;
table-operation-attlist ::= table:name::("trace-dependents" | "remove-dependents" | "trace-precedents" | "remove-precedents" | "trace-errors") table:index::nonNegativeInteger ;
table-detective ::= table:detective::(table-highlighted-range* table-operation*) ;
table-tracked-changes-attlist ::= (table:track-changes::boolean)? ;
common-svg-gradient-attlist ::= (svg:gradientUnits::"objectBoundingBox")? (svg:gradientTransform::string)? (svg:spreadMethod::("pad" | "reflect" | "repeat"))? draw:name::styleName (draw:display-name::string)? ;
draw-a-attlist ::= xlink:type::"simple" xlink:href::anyIRI (xlink:actuate::"onRequest")? (office:target-frame-name::targetFrameName)? (xlink:show::("new" | "replace"))? (office:name::string)? (office:title::string)? (office:server-map::boolean)? xml-id? ;
db-queries-attlist ::= ε ;
style-default-style ::= style:default-style::style-style-content ;
table-named-expressions ::= table:named-expressions::((table-named-range | table-named-expression)*) ;
office-spreadsheet-content-prelude ::= table-tracked-changes? text-decls table-decls ;
common-draw-name-attlist ::= (draw:name::string)? ;
point3D ::= string() ;
table-table-attlist ::= (table:name::string)? (table:style-name::styleNameRef)? (table:template-name::string)? (table:use-first-row-styles::boolean)? (table:use-last-row-styles::boolean)? (table:use-first-column-styles::boolean)? (table:use-last-column-styles::boolean)? (table:use-banding-rows-styles::boolean)? (table:use-banding-columns-styles::boolean)? (table:protected::boolean)? (table:protection-key::string)? (table:protection-key-digest-algorithm::anyIRI)? (table:print::boolean)? (table:print-ranges::cellRangeAddressList)? xml-id? (table:is-sub-table::boolean)? ;
--------------------pascal::delphi.bgf--------------------
procedure_impl_decl ::= NL procedure_intf_decl nested_decl_block procedure_body_semi ;
pointer_type ::= "^" SPOFF qualified_id SPON ;
of_const ::= "of" "const" ;
colon_id ::= "," NL id ;
selection_stm ::= ("if" expr "then" nested_stm else_stm?) | ("case" expr "of" case_selector* case_else? end_struct) ;
default_spec ::= ("default" SP expr) | "nodefault" ;
set_type ::= "set" of_basetype ;
record_field_constant ::= id colon typed_const ;
of_basetype ::= "of" type_spec ;
boolean_type ::= "boolean" | "bytebool" | "wordbool" | "longbool" ;
try_finally_stm ::= "try" NL statement_list "finally" NL statement_list end_struct ;
implements_spec ::= "implements" {qualified_id ","}* ;
at_address ::= "at" expr ;
case_else ::= "else" statement_list ;
interface_body ::= visibility_default end_struct ;
postfix_opr ::= arguments | array_subscript | ("." id) | "^" ;
exports_section ::= "exports" {exports_entry ","}* ";" NL ;
nested_stm ::= sequence_stm | (NL IN statement? EX) ;
interface_keyword ::= "interface" | "dispinterface" ;
prop_specifier ::= index_spec | accessor_spec | stored_spec | default_spec | implements_spec | dispid_spec ;
defaultarray_spec ::= ";" "default" ;
in_filename ::= "in" filenamelit ;
type_section ::= "type" NL IN type_decl+ EX ;
interface_section ::= interface_kw uses_clause? intfdecl_block ;
heritage_list ::= ("(" {qualified_id ","}* ")") | ("helper" "for" id) ;
assign_stm ::= expr ":=" expr ;
external_directive ::= "external" expr? external_name? ;
impldecl_block ::= impldecl_section* ;
absolute_init ::= "absolute" expr ;
stored_spec ::= "stored" SP expr ;
package_file ::= package_decl requires_clause? contains_clause? end_struct file_end ;
property_decl ::= "property" id prop_indexes? colon_type? prop_specifier* defaultarray_spec? ";" NL ;
finalization_section ::= finalization_kw statement_list ;
record_constant ::= "(" record_field_constant_semi* record_field_constant? ")" ;
var_keyword ::= "var" | "threadvar" ;
semi_set_element ::= "," SP set_element ;
var_section ::= var_keyword NL IN var_decl+ EX ;
call_stm ::= expr | "inherited" ;
array_constant ::= "(" {typed_const ","}* ")" ;
infix_opr ::= ">" | "<" | "<=" | ">=" | "<>" | "=" | "in" | "is" | "as" | "+" | "-" | "or" | "xor" | "*" | "/" | "div" | "mod" | "and" | "shl" | "shr" | "^" ;
var_decl ::= identlist colon_type hint_directive? var_init? ";" NL ;
parm_qual ::= "var" | "const" | "out" ;
semi_directive ::= ";"? directive ;
procedural_type ::= procedure_intf_decl of_object? semi_calling_spec* ;
end_struct ::= "end" ;
record_field_constant_semi ::= record_field_constant ";" NL ;
to_or_downto ::= "to" | "downto" ;
variant_type ::= "variant" | "olevariant" ;
resource_section ::= "resourcestring" constant_decl+ ;
accessor_spec ::= "readonly" | "writeonly" | (accessor_verb qualified_id) ;
sequence_stm ::= "begin" NL statement_list end_struct ;
string_type ::= "string" | "shortstring" | "ansistring" | "widestring" | ("string" "[" expression "]") ;
simple_type ::= ordinal_type | real_type ;
of_object ::= "of" "object" ;
uses_item ::= qualified_id in_filename? ;
array_subscript ::= "[" expression? semi_expression* "]" ;
class_type ::= "packed"? class_keyword heritage_list? NL class_body? ;
type_spec ::= simple_type | string_type | struct_type | pointer_type | procedural_type | variant_type | class_reference_type | class_type | interface_type | qualified_id ;
guid_decl ::= "[" expr "]" ;
qualified_id ::= namespace* name SPON ;
exception_block ::= (exception_handler_list case_else?) | statement_list ;
set_constructor ::= "[" set_element? semi_set_element* "]" ;
jump_stm ::= goto_stm | raise_stm ;
integer_type ::= "shortint" | "smallint" | "longint" | "int64" | "word" | "byte" | "longword" | "integer" | "cardinal" ;
enumerated_type ::= "(" enum_spec+ ")" ;
nested_decl_section ::= const_section | type_section | var_section | label_decl | procedure_impl_decl ;
file_end ::= "." ;
record_variant ::= expr+ colon "(" visibility_default ")" ";"? NL ;
hint_directive ::= "platform" | "deprecated" | "library" ;
delphi_file ::= program_file | package_file | unit_file ;
array_index_list ::= "[" {array_index ","}* "]" ;
type_decl ::= identlist equal "type"? type_spec hint_directive? ";" NL ;
contains_clause ::= "contains" {uses_item ","}* ";" NL ;
procedure_body ::= sequence_stm | "forward" ;
semi_calling_spec ::= ";"? calling_spec ;
program_file_list ::= "(" {id ","}* ")" ;
program_decl ::= ("program" qualified_id program_file_list? ";" NL) | ("library" qualified_id ";" NL) ;
unit_decl ::= "unit" qualified_id hint_directive? ";" NL ;
prefix_opr ::= ("not" SP) | ("inherited" SP) | "@" | sign ;
char_type ::= "char" | "ansichar" | "widechar" ;
param_init ::= equal expr ;
interface_type ::= interface_keyword heritage_list? guid_decl? interface_body? ;
procedure_body_semi ::= procedure_body ";" NL ;
external_name ::= ("name" expr) | ("index" expr) ;
procedure_keyword ::= "function" | "procedure" | "constructor" | "destructor" ;
dispid_spec ::= "dispid" SP expr ;
constant_spec ::= (equal expr) | (colon_type const_init) ;
dotdot_expr ::= ".." expression ;
exports_entry ::= procedure_id formal_parameters? external_name? ;
impldecl_section ::= const_section | type_section | var_section | label_decl | procedure_impl_decl | procedure_external_decl | resource_section | exports_section ;
statement_list ::= IN statement_semi* statement? EX ;
array_index ::= ordinal_type | qualified_id ;
const_init ::= equal typed_const ;
initialization_kw ::= "initialization" | "begin" ;
constant_decl ::= identlist constant_spec hint_directive? ";" NL ;
struct_type ::= set_type | array_type | file_type ;
exception_handler_list ::= exception_handler_semi* exception_handler? ;
array_type ::= ("array" of_const) | ("packed"? "array" array_index_list* of_basetype) ;
exception_handler ::= "on" exception_var? type_spec "do" nested_stm ;
raise_stm ::= "raise" expr? at_address? ;
formal_parameter ::= parm_qual? parameter ;
implementation_section ::= implementation_kw uses_clause? impldecl_block ;
program_file ::= program_decl uses_clause? impldecl_block procedure_body file_end ;
unit_file ::= unit_decl interface_section implementation_section initialization_section? finalization_section? end_struct file_end ;
calling_spec ::= "pascal" | "safecall" | "stdcall" | "cdecl" | "register" | "local" ;
class_reference_type ::= "class" "of" qualified_id ;
prop_index_decl ::= prop_index_name+ colon_type ";"? ;
goto_stm ::= "goto" label_id ;
intfdecl_block ::= intfdecl_section* ;
typed_const ::= array_constant | record_constant | expr ;
procedure_signature ::= "class"? procedure_keyword procedure_id? formal_parameters? colon_type? ;
method_decl ::= (procedure_signature method_deleg) | (procedure_signature ";" dispid_spec ";") | procedure_intf_decl ;
ordinal_type ::= integer_type | char_type | enumerated_type | boolean_type | subrange_type ;
unlabeled_stm ::= sequence_stm | loop_stm | with_stm | try_finally_stm | try_except_stm | selection_stm | jump_stm | assign_stm | call_stm ;
initialization_section ::= initialization_kw NL statement_list ;
label_id ::= anynumber | id ;
uses_clause ::= "uses" NL IN {uses_item ","}* ";" EX NL ;
class_member ::= var_decl | method_decl | property_decl | variant_section ;
statement_semi ::= statement? ";" NL ;
subrange_type ::= expression SPOFF dotdot_expr SPON ;
id_colon ::= id colon ;
real_type ::= "real" | "real48" | "single" | "double" | "extended" | "comp" | "currency" ;
formal_parameters ::= "(" formal_parameter semi_formal_parameter* ")" ;
enum_spec ::= id param_init? ;
exception_var ::= id colon ;
prop_index_name ::= prop_index_modifier? qualified_id ;
exception_handler_semi ::= exception_handler ";" NL ;
with_stm ::= "with" expr+ "do" nested_stm ;
procedure_external_decl ::= procedure_intf_decl external_directive semi_calling_spec? ";"? NL ;
interface_kw ::= "interface" NL ;
labelid_colon ::= label_id colon ;
variant_section ::= "case" id_colon? type_spec "of" record_variant+ ;
var_init ::= absolute_init | const_init ;
intfdecl_section ::= const_section | type_section | var_section | label_decl | procedure_intf_decl | procedure_external_decl | resource_section | exports_section ;
else_stm ::= NL "else" nested_stm ;
procedure_intf_decl ::= procedure_signature semi_directive* ";"? NL ;
case_label ::= expr dotdot_expr? ;
prop_indexes ::= "[" prop_index_decl+ "]" ;
atom_expr ::= charlit | anynumber | ctrlchar | "nil" | ("(" expression ")") | set_constructor | qualified_id ;
class_keyword ::= "class" | "record" | "object" ;
visibility_block ::= visibility NL IN class_member* EX ;
requires_clause ::= "requires" {qualified_id ","}* ";" NL ;
set_element ::= expression dotdot_expr? ;
file_type ::= "file" of_basetype? ;
finalization_kw ::= "finalization" ;
colon_type ::= colon type_spec ;
implementation_kw ::= "implementation" NL ;
accessor_verb ::= "read" | "write" ;
label_decl ::= "label" {label_id ","}* ";" NL ;
visibility_default ::= IN class_member* EX ;
loop_stm ::= ("repeat" statement_list "until" expr) | ("while" expr "do" nested_stm) | ("for" id ":=" expr to_or_downto expr "do" nested_stm) | ("for" id "in" id "do" nested_stm) ;
parameter_type ::= colon_type param_init? ;
method_deleg ::= equal qualified_id ";" NL ;
case_selector ::= {case_label ","}* colon nested_stm ";"? ;
try_except_stm ::= "try" NL statement_list "except" NL exception_block end_struct ;
semi_formal_parameter ::= ";" formal_parameter ;
semi_expression ::= "," SP expression ;
class_body ::= visibility_default visibility_block* end_struct ;
const_section ::= "const" NL IN constant_decl+ EX ;
semi_argm ::= "," SP argm ;
index_spec ::= "index" SP expr ;
procedure_id ::= namespace? id ;
infix_expr ::= SP infix_opr SP term ;
package_decl ::= "package" qualified_id ";" NL ;
prop_index_modifier ::= "const" | "var" ;
nested_decl_block ::= nested_decl_section* ;
--------------------pascal::delphipp.bgf--------------------
pp_boolexpr ::= booleanlit | (boolfunc space? "(" id ")") | ("NOT" space? pp_boolexpr) | id | (pp_boolexpr "pp_boolopr" pp_boolexpr) | (pp_litexpr "pp_compareopr" pp_litexpr) | ("(" pp_boolexpr ")") ;
pp_content ::= pp_stmt_or_water ;
pp_endif ::= ("{$" space? endif_alt bracketbody* "}") | ("(*$" space? endif_alt starbody* "*)") ;
pp_elseifblock ::= pp_elseifexpr pp_content* ;
pp_directivestmt ::= ("{$" space? {pp_directive ","}* bracketbody* "}") | ("(*$" space? {pp_directive ","}* starbody* "*)") ;
pp_minenumsize ::= "Z1" | "Z2" | "Z4" ;
delphipp_file ::= pp_stmt_or_water* ;
pp_stmt_or_water ::= (pp_stmt) | (pp_comment) | (pp_any) ;
pp_switch ::= id space? pp_switchopt ;
pp_ifexpr ::= ("{$" space? if_alt bracketbody* "}") | ("(*$" space? if_alt starbody* "*)") ;
pp_ifblock ::= pp_ifexpr pp_content* ;
pp_directive ::= ("DEFINE" space id) | ("UNDEF" space id) | ("INCLUDE" space? filenamelit) | ("I" space? filenamelit) | ("LINK" space? filenamelit) | ("L" space? filenamelit) | ("RESOURCE" space? filenamelit space? filenamelit?) | ("R" space? filenamelit space? filenamelit?) | ("HPPEMIT" space? charlit) | ("EXTERNALSYM" space id) | "NODEFINE" | "MINENUMSIZE" | "DENYPACKAGEUNIT" | "WEAKPACKAGEUNIT" | ("IMAGEBASE" space? anynumber) | ("C" space id) | ("MINENUMSIZE" space anynumber) | pp_minenumsize | ("ALIGN" space? anynumber) | pp_align | ("M" space? {anynumber ","}*) | ("MAXSTACKSIZE" space anynumber) | ("MINSTACKSIZE" space anynumber) | ("RESOURCERESERVE" space anynumber) | "NOINCLUDE" | "WARN" | "MESSAGE" | "APPTYPE" | ("LIBPREFIX" space? charlit) | ("LIBSUFIX" space? charlit) | ("LIBVERSION" space? charlit) | ("DESCRIPTION" space? charlit) | ("D" space? charlit) | ("EXTENSION" space id) | ("E" space id) | (pp_switch space?) ;
pp_litexpr ::= id | charlit | anynumber ;
pp_any ::= (id codetoken*) | key | token ;
pp_compareopr ::= ">" | "<" | "=" | ">=" | "<=" | "<>" ;
pp_elseifexpr ::= ("{$" space? else_alt space? bracketbody* "}") | ("(*$" space? else_alt space? starbody* "*)") ;
pp_boolopr ::= "AND" | "OR" | "XOR" ;
if_alt ::= ("IF" space? pp_boolexpr) | ("IFDEF" space? id) | ("IFNDEF" space? id) | ("IFOPT" space? pp_switch) ;
pp_stmt ::= pp_ifstmt | (pp_directivestmt) ;
pp_align ::= "A1" | "A2" | "A4" | "A8" ;
pp_ifstmt ::= pp_ifblock pp_elseifblock* pp_endif ;
else_alt ::= ("ELSEIF" space? pp_boolexpr) | ("ELSE" space?) ;
nested_id ::= SPOFF namespace* ident SPON ;
endif_alt ::= "ENDIF" | "IFEND" ;
pp_switchopt ::= "+" | "-" | "ON" | "OFF" ;
pp_comment ::= cmbracketblock | cmstarblock | cmline ;
--------------------pascal::object.bgf--------------------
object_heritage ::= "(" ref_name ")" ;
semi_case_selector ::= ";" NL case_selector ;
realType ::= "real48" | "real" | "single" | "double" | "extended" | "currency" | "comp" ;
dotDot_expression ::= ".." expression ;
not_word ::= "not" | "Not" | "NOT" ;
conditional_statement ::= if_statement | case_statement ;
class_method_list ::= class_visibility_method_list* ;
type_declaration ::= decl_name "=" type_or_restrictedType ;
typeId ::= ref_name | predefinedType ;
unit_definition ::= "unit" decl_name ";" NL interface_section NL implementation_section NL init_section "." ;
program_definition ::= "program" decl_name program_file_list? ";" NL program_block "." ;
package_definition ::= "package" decl_name ";" NL requires_clause? contains_clause? "end" "." ;
stringType ::= "string" | "ansistring" | "widestring" | ("string" "[" expression "]") ;
else_statement ::= "else" statement? ;
semicolon_record_field_constant ::= ";" decl_name ":" typed_constant ;
at_address ::= "at" ref_name ;
assign_expression ::= ":=" expression ;
class_heritage ::= "(" {ref_name ","}* ")" ;
var_assignment ::= absolute_assignment | constant_assignment ;
while_statement ::= "while" expression do statement ;
type_section ::= "type" IN NL type_declaration+ EX NL ;
interface_section ::= "interface" NL NL uses_clause? NL interface_declaration* ;
semi_statement ::= ";" NL statement ;
bool_value ::= "true" | "false" | "True" | "False" ;
raise_statement ::= "raise" ref_name? at_address? ;
compound_statement ::= begin IN NL statement_list EX NL "end" NL ;
enumeratedType ::= "(" {decl_name ","}* ")" ;
typed_constant ::= expression | array_constant | record_constant ;
object_modifier ::= ("." id) | array_subscript | arguments | "^" | as_type ;
subrangeType ::= expression ".." expression ;
fileType ::= "file" "of" typeId ;
pond_number ::= "#" number ;
classType ::= "class" class_heritage? IN NL class_element_list? vis_spec_element_list* EX NL "end"? ;
record_constant ::= "(" typed_constant semicolon_record_field_constant* ")" ;
dot_id ::= "." id ;
comma_case_label ::= "," case_label ;
try_except_statement ::= "try" IN NL statement_list EX NL except ";"? IN NL exception_block EX NL "end" ;
if_statement ::= if expression "then" statement? else_statement? ;
var_section ::= var NL IN var_declaration_semicolon* NL EX ;
array_constant ::= "(" {typed_constant ","}* ")" ;
semi_exception_handler ::= ";" exception_handler ;
in_clause ::= "in" charlit ;
property_list ::= property_word decl_name property_interface? property_specifiers* ;
implementsTypeId ::= "implements" typeId ;
object_field_list ::= ident_list_colonType semi_ident_list_colonType* ;
field_list ::= field_declaration+ variant_section? ;
parm_qual ::= var | "const" | "out" ;
semi_directive ::= ";" directive ;
constructor_heading ::= "constructor" decl_name formal_parameters? ;
destructor_heading ::= "destructor" decl_name formal_parameters? ;
setType ::= "set" "of" ordinalType ;
requires_idList_semicolon ::= "requires" ref_name+ ";" NL ;
ref_name ::= object ;
init_section ::= ("intitialization" IN NL statement_list fin_statement_list? EX NL "end") | compound_statement | "end" ;
to_or_downto ::= "to" | "downto" ;
field_declaration ::= decl_name+ ":" type ";" NL ;
constructor_declaration ::= constructor_heading ";" IN NL block EX NL ";" NL ;
endNameTag ::= SPOFF SP "</" "UID" ">" SPON ;
mul_op_factor ::= mul_op factor ;
structType ::= (arrayType "packed"?) | (setType "packed"?) | (fileType "packed"?) | (recordType "packed"?) ;
procedureType ::= proc_or_func_heading of_object? ;
of_object ::= "of" "object" ;
vis_spec_element_list ::= NL class_visibility class_element_list? ;
uses_item ::= ref_name in_clause? ;
array_subscript ::= "[" {expression ","}* "]" ;
method_heading ::= procedure_heading | function_heading | destructor_heading | constructor_heading ;
class_referenceType ::= "class" "of" typeId ;
set_constructor ::= "[" {set_element ","}* "]" ;
exception_block ::= ε | statement_list | exception_else ;
function_heading ::= function_word decl_name formal_parameters? ":" type_or_string ;
repeating_statement ::= "repeat" statement ";"? "until" expression ;
record_variant ::= expression+ ":" "(" field_list? ")" ;
procedure_heading ::= procedure decl_name formal_parameters? ;
absolute_assignment ::= "absolute" id_or_expression ;
loop_statement ::= repeating_statement | while_statement | for_statement ;
function_declaration ::= function_heading semi_directive? ";" IN NL block EX NL ";" NL ;
index_expession ::= "index" expression ;
contains_clause ::= contains_idList_semicolon* ;
program_file_list ::= "(" {id ","}* ")" ;
struct_statement ::= compound_statement | conditional_statement | loop_statement | with_statement | try_finally_statement | try_except_statement | raise_statement ;
param_init ::= "=" expression ;
array_of ::= array_word set_constructor? "of" ;
semicolon_virtual ::= ";" "virtual" ;
write_id ::= "write" ref_name ;
proc_or_func_heading ::= procedure_heading | function_heading ;
for_statement ::= for ref_name ":=" expression to_or_downto expression do statement ;
procedure_section ::= procedure_declaration | function_declaration | constructor_declaration | destructor_declaration ;
interface_declaration ::= constant_section | type_section | var_section | (exported_heading directive?) ;
statement_list ::= statement semi_statement* ;
op_factor ::= op factor ;
add_op_term ::= add_op term ;
contains_idList_semicolon ::= "contains" ref_name+ ";" NL ;
class_element_list ::= class_element_semi+ ;
read_id ::= "read" ref_name ;
exception_handler_list ::= exception_handler semi_exception_handler* ";"? ;
var_declaration ::= decl_name+ ":" type var_assignment? ;
stored_id_OR_stored_expression ::= "stored" id_or_expression ;
predefinedType ::= "integer" | "real" | "boolean" | "char" | "byte" ;
constant_declaration ::= (decl_name "=" expression ";" NL) | (decl_name ":" typeId "=" typed_constant ";" NL) ;
variantType ::= "variant" | "olevariant" ;
exception_handler ::= "on" exception_var? type do IN NL statement EX ;
formal_parameter ::= parm_qual? parameter ;
virtual_method_heading ::= method_heading semi_directive? semicolon_virtual? ;
implementation_section ::= "implementation" IN NL uses_clause? declaration_section* EX NL ;
library_definition ::= "library" decl_name ";" NL program_block "." ;
label_declaration_section ::= "label" decl_name ;
id_or_expression ::= ref_name | expression ;
labelId_colon ::= labelId ":" ;
property_interface ::= property_parameter_list? ":" type ;
startNameTag ::= SPOFF SP "<" "UID" SP "name" "=" stringlit ">" SPON ;
rel_op_simple_expression ::= rel_op simple_expression ;
default_expression_OR_nodefault ::= ("default" expression) | "nodefault" ;
type_or_restrictedType ::= (type ";" NL) | (restrictedType ";" NL) ;
ordinalType ::= subrangeType | enumeratedType | ordinal_identifier ;
unlabeled_statement ::= simple_statement | struct_statement ;
constant_section ::= "const" IN NL constant_declaration* EX NL ;
semi_virtual_method_heading ::= ";" NL virtual_method_heading ;
constant_assignment ::= "=" expression ;
rel_op ::= ">" | "<" | "<=" | ">=" | "<>" | "=" | "in" | "is" ;
simple_expression ::= term? add_op_term* ;
interface_heritage ::= "(" {ref_name ","}* ")" ;
class_visibility_property_list ::= class_visibility property_list ;
uses_clause ::= "uses" IN NL uses_item+ ";" EX NL ;
class_property_list ::= class_visibility_property_list* ;
add_op ::= "+" | "-" | "or" | "xor" ;
mul_op ::= "*" | "/" | "div" | "mod" | "and" | "shl" | "shr" | "DIV" | "AND" ;
method_list ::= virtual_method_heading semi_virtual_method_heading* ;
id_colon ::= decl_name ":" ;
formal_parameters ::= "(" formal_parameter semi_formal_parameter* ")" ;
class_visibility ::= "public" | "protected" | "Protected" | "private" | "published" ;
class_element_semi ::= NL class_element ";" ;
semi_ident_list_colonType ::= ";" NL ident_list_colonType ;
exception_var ::= decl_name ":" ;
ordinal_identifier ::= "shortint" | "smallint" | "integer" | "byte" | "longint" | "int64" | "word" | "boolean" | "char" | "widechar" | "longchar" | "pchar" ;
with_statement ::= "with" ref_name+ do statement ;
class_visibility_method_list ::= class_visibility method_list ;
class_element ::= virtual_method_heading | ident_list_colonType | property_list | ε ;
restrictedType ::= objectType | classType | interfaceType ;
destructor_declaration ::= destructor_heading ";" IN NL block EX NL ";" NL ;
property_word ::= "property" | "Property" ;
arrayType ::= array_word square_ordinalType? "of" type ;
array_word ::= "array" | "Array" ;
try_finally_statement ::= "try" IN NL statement_list EX NL "finally" IN NL statement_list EX NL "end" ;
labelId ::= "label" number+ ";" NL ;
recordType ::= "record" field_list "end" ;
variant_section ::= "case" id_colon? typeId "of" record_variant_semicolon+ ";"? ;
exception_else ::= exception_handler_list NL EX else_statement? ;
square_ordinalType ::= "[" {ordinalType ","}* "]" ;
type_or_string ::= type | charlit ;
as_type ::= as type ;
case_label ::= expression dotDot_expression? ;
simple_statement ::= (ref_name assign_expression?) | ("inherited" ref_name?) | ("goto" labelId) ;
fin_statement_list ::= "finalization" statement_list ;
case_statement ::= "case" expression "of" case_selector IN NL semi_case_selector* ";"? EX NL else_statement? ";"? NL "end" ;
declaration_section ::= label_declaration_section | constant_section | type_section | var_section | procedure_section ;
requires_clause ::= requires_idList_semicolon* ;
set_element ::= expression dotDot_expression? ;
property_specifiers ::= index_expession | read_id | write_id | stored_id_OR_stored_expression | default_expression_OR_nodefault | implementsTypeId ;
property_parameter_list ::= "[" idList_colonTypeId_semicolon* "]" ;
objectType ::= "object" object_heritage? object_field_list? method_list? "end" ;
pointerType ::= "^" typeId ;
exported_heading ::= (procedure_heading ";" NL) | (function_heading ";" NL) | (constructor_heading ";" NL) | (destructor_heading ";" NL) ;
var_declaration_semicolon ::= var_declaration ";" NL ;
interfaceType ::= "interface" interface_heritage? class_method_list? class_property_list? "end" ;
program_block ::= uses_clause? block ;
function_word ::= "function" | "Function" ;
parameter_type ::= ":" array_of? type param_init? ;
case_selector ::= case_label comma_case_label* ":" statement ;
procedure_declaration ::= procedure_heading ";" IN NL block EX NL ";" NL ;
simpleType ::= ordinalType | realType ;
semi_formal_parameter ::= ";" NL formal_parameter ;
record_variant_semicolon ::= record_variant ";" NL ;
ident_list_colonType ::= decl_name+ ":" type ;
decl_name ::= id dot_id* ;
idList_colonTypeId_semicolon ::= decl_name+ ":" typeId ";" NL ;
--------------------pl1::bruneliere.bgf--------------------
PLIElement ::= level::String name::String sharedType::PLIClassifier group::PLIComposedType initial::PLIElementInitialValue source::PLISourceText array::PLIArray ;
PLIComputationalType ::= alias::PLIAlias ;
PLIAttribute ::= ε ;
PLIClassifier ::= PLISimpleType ;
 PLIClassifier ::= PLINamedType ;
 PLIClassifier ::= PLIComposedType ;
 PLIClassifier ::= name::String (typedElements::PLIElement)+ ;
PLIArray ::= PLIFixedBoundArray ;
 PLIArray ::= PLIFixedLboundArray ;
 PLIArray ::= PLIHBoundArray ;
 PLIArray ::= PLIVariableBoundArray ;
 PLIArray ::= arrayOf::PLIElement ;
PLIElementInitialValue ::= initialValue::String ;
PLINonComputationalType ::= alias::PLIAlias ;
PLIComposedType ::= (elements::PLIElement)+ ;
PLISimpleType ::= PLIComputationalType ;
 PLISimpleType ::= PLINonComputationalType ;
 PLISimpleType ::= alias::PLIAlias ;
PLIHBoundArray ::= uBound::Integer IBoundToAllocate::String referredTo::PLIElement ;
PLINamedType ::= name::String (typedElements::PLIElement)+ ;
PLISourceText ::= source::String fileName::String ;
PLIVariableBoundArray ::= IBoundToAllocate::String hBoundToAllocate::String referredTo::PLIElement ;
PLIAlias ::= type::PLISimpleType (contains::PLIAttribute)+ ;
PLIFixedBoundArray ::= IBound::Integer uBound::Integer referredTo::PLIElement ;
PLIFixedLboundArray ::= IBound::Integer uBoundToAllocate::String referredTo::PLIElement ;
--------------------uml::collab.bgf--------------------
ClassifierRole ::= (associationEndRole::AssociationEndRole)+ receiverMess::Message senderMess::Message (availableFeature::Operation)+ base::Interface ;
AssociationRole ::= connection::AssociationEndRole ;
InteractionPackage ::= providerClause::ProviderClause ownedElt::Interaction ;
CollaborationPackage ::= ownedElt::Collaboration ;
AssociationEndRole ::= associationRole::AssociationRole type::ClassifierRole ;
ProviderClause ::= Package ;
 ProviderClause ::= ownedEltColl::CollaborationPackage (ownedEltInt::InteractionPackage)+ ;
--------------------uml::extended.bgf--------------------
ChangeableKind ::= ε ;
AssociationEnd ::= isNavigable::Boolean isOrdered::Boolean aggregation::AggregationKind multiplicity::Multiplicity changeable::ChangeableKind TargetScope::ScopeKind rfIntegrety::RlIntegretyKind rlIntegrety::RlIntegretyKind ;
GeneralizableElement ::= Classifier ;
RfIntegretyKind ::= ε ;
ScopeKind ::= ε ;
AggregationKind ::= ε ;
StructureFeature ::= Attribute ;
RlIntegretyKind ::= ε ;
ModelElement ::= AssociationEnd ;
 ModelElement ::= Namespace ;
 ModelElement ::= Key ;
 ModelElement ::= Feature ;
 ModelElement ::= name::Name ;
--------------------uml::fragment.bgf--------------------
SimpleState ::= stateMachine::StateMachine internal::Transition ;
FinalState ::= stateMachine::StateMachine internal::Transition ;
CompositeState ::= subvertex::StateVertex ;
StateMachine ::= context::Class top::State ;
StateVertex ::= State ;
 StateVertex ::= PseudoState ;
 StateVertex ::= compositeState::CompositeState ;
PseudoState ::= compositeState::CompositeState ;
--------------------uml::oocm.bgf--------------------
NameSpace ::= Classifier ;
 NameSpace ::= name::String ;
BehavioralFeature ::= Operation ;
 BehavioralFeature ::= isQuery::Boolean ;
StructuralFeature ::= Attribute ;
 StructuralFeature ::= multiplicity::MultiplicityType isChangeable::Boolean targetScope::ScopeKind ;
GeneralizableElement ::= Classifier ;
 GeneralizableElement ::= isRoot::Boolean isLeaf::Boolean isAbstract::Boolean ;
MultiplicityType ::= lower::Integer upper::Integer isOrdered::Boolean isUnique::Boolean ;
ScopeKind ::= (sk_instance_level::ε) | (sk_classifier_level::ε) ;
VisibilityKind ::= (vk_public_vis::ε) | (vk_private_vis::ε) | (vk_protected_vis::ε) ;
ModelElement ::= Feature ;
 ModelElement ::= NameSpace ;
 ModelElement ::= GeneralizableElement ;
 ModelElement ::= name::String ;
--------------------uml::reuse.bgf--------------------
BasicProvider ::= ε ;
ReuserClause ::= CompositeReuser ;
 ReuserClause ::= BasicReuser ;
 ReuserClause ::= CompositeReuser | BasicReuser ;
BasicReuser ::= ε ;
CompositeProvider ::= subcontract::ReuseContract ;
ReuseContract ::= supplier::ProviderClause client::ReuserClause ;
CompositeReuser ::= (subreuser::ReuserClause)+ ;
ProviderClause ::= CompositeProvider ;
 ProviderClause ::= BasicProvider ;
 ProviderClause ::= CompositeProvider | BasicProvider ;
--------------------uml::simple.bgf--------------------
PrimitiveDataType ::= (typeOpposite::Attribute)+ ;
UMLModelElement ::= Attribute ;
 UMLModelElement ::= Package ;
 UMLModelElement ::= PackageElement ;
PackageElement ::= Classifier ;
 PackageElement ::= Association ;
--------------------uml::statecharts.bgf--------------------
CompositeState ::= (subVertexes::StateVertex)+ isConcurrent::Boolean ;
StateMachine ::= (transitions::Transition)+ (top::State)+ ;
StateVertex ::= State ;
 StateVertex ::= sv_container::CompositeState (outgoing::Transition)+ (incoming::Transition)+ ;
BooleanExpression ::= value::String ;
--------------------uml::stereo.bgf--------------------
TagDefinition ::= tagType::String multiplicity::Multiplicity (typedValue::TaggedValue)+ owner::Stereotype ;
GeneralizableElement ::= Stereotype ;
TaggedValue ::= dataValue::String (referenceValue::ModelElement)+ type::TagDefinition ;
ModelElement ::= TagDefinition ;
 ModelElement ::= (referenceTag::TaggedValue)+ (stereotype::Stereotype)+ (constraint::Constraint)+ (taggedValue::TaggedValue)+ ;
--------------------uml::uml-uc.bgf--------------------
UseCaseInstance ::= (classifier::Classifier)+ ;
RelationShip ::= Include ;
 RelationShip ::= Extend ;
UseCase ::= (extensionPoint::String)+ includeAddition::Include includeBase::Include extendExtension::Extend extendBase::Extend (extensionPoints::ExtensionPoint)+ ;
LocationReference ::= value::String ;
ModelElement ::= ExtensionPoint ;
ExtensionPoint ::= location::LocationReference (extend::Extend)+ (useCase::UseCase)+ ;
BooleanExpression ::= value::String ;
--------------------uml::uml2.bgf--------------------
CommunicationPath ::= isDerived::Boolean (ownedEnd::Property)+ (endType::Type)+ memberEnd::Property ;
ExecutionEnvironment ::= (nestedNode::Node)+ ;
RaiseExceptionAction ::= exception::InputPin ;
ReadSelfAction ::= result::OutputPin ;
ConnectableElementTemplateParameter ::= signature::TemplateSignature parameteredElement::ParameterableElement ownedParameteredElement::ParameterableElement default::ParameterableElement ownedDefault::ParameterableElement ;
VariableAction ::= ReadVariableAction ;
 VariableAction ::= WriteVariableAction ;
 VariableAction ::= ClearVariableAction ;
LinkAction ::= ReadLinkAction ;
 LinkAction ::= WriteLinkAction ;
WriteLinkAction ::= CreateLinkAction ;
 WriteLinkAction ::= DestroyLinkAction ;
EventOccurrence ::= Stop ;
 EventOccurrence ::= (startExec::ExecutionOccurrence)+ (finishExec::ExecutionOccurrence)+ (toAfter::GeneralOrdering)+ (toBefore::GeneralOrdering)+ ;
FlowFinalNode ::= ε ;
ExecutionOccurrence ::= start::EventOccurrence finish::EventOccurrence (behavior::Behavior)+ ;
TestIdentityAction ::= first::InputPin second::InputPin result::OutputPin ;
LoopNode ::= isTestedFirst::Boolean (bodyPart::ActivityNode)+ (setupPart::ActivityNode)+ decider::OutputPin (test::ActivityNode)+ (result::OutputPin)+ (loopVariable::OutputPin)+ (bodyOutput::OutputPin)+ (loopVariableInput::InputPin)+ ;
VisibilityKind ::= (package::ε) | (private::ε) | (protected::ε) | (public::ε) ;
ControlNode ::= InitialNode ;
 ControlNode ::= FinalNode ;
 ControlNode ::= DecisionNode ;
 ControlNode ::= MergeNode ;
 ControlNode ::= ForkNode ;
 ControlNode ::= JoinNode ;
FinalState ::= isComposite::Boolean isOrthogonal::Boolean isSimple::Boolean isSubmachineState::Boolean submachine::StateMachine (connection::ConnectionPointReference)+ redefinedState::State (deferrableTrigger::Trigger)+ (region::Region)+ entry::Activity exit::Activity doActivity::Activity stateInvariant::Constraint ;
DataStoreNode ::= ε ;
DeployedArtifact ::= Artifact ;
ReadExtentAction ::= result::OutputPin classifier::Classifier ;
DeploymentTarget ::= Node ;
CollaborationOccurrence ::= type::Collaboration (roleBinding::Dependency)+ ;
ExpansionKind ::= (parallel::ε) | (iterative::ε) | (stream::ε) ;
TimeInterval ::= (min::ValueSpecification)+ (max::ValueSpecification)+ ;
MessageTrigger ::= CallTrigger ;
 MessageTrigger ::= SignalTrigger ;
 MessageTrigger ::= AnyTrigger ;
ActivityNode ::= ControlNode ;
 ActivityNode ::= ExecutableNode ;
 ActivityNode ::= ObjectNode ;
SignalTrigger ::= (signal::Signal)+ ;
StructuralFeatureAction ::= ReadStructuralFeatureAction ;
 StructuralFeatureAction ::= WriteStructuralFeatureAction ;
 StructuralFeatureAction ::= ClearStructuralFeatureAction ;
ReclassifyObjectAction ::= isReplaceAll::Boolean (oldClassifier::Classifier)+ (newClassifier::Classifier)+ object::InputPin ;
TemplateParameterSubstitution ::= formal::TemplateParameter templateBinding::TemplateBinding (actual::ParameterableElement)+ (ownedActual::ParameterableElement)+ ;
OperationTemplateParameter ::= signature::TemplateSignature parameteredElement::ParameterableElement ownedParameteredElement::ParameterableElement default::ParameterableElement ownedDefault::ParameterableElement ;
ChangeTrigger ::= changeExpression::ValueSpecification ;
SendSignalAction ::= target::InputPin signal::Signal ;
StructuredActivityNode ::= ConditionalNode ;
 StructuredActivityNode ::= LoopNode ;
 StructuredActivityNode ::= ExpansionRegion ;
 StructuredActivityNode ::= (variable::Variable)+ (containedNode::ActivityNode)+ (containedEdge::ActivityEdge)+ mustIsolate::Boolean ;
DirectedRelationship ::= Generalization ;
 DirectedRelationship ::= ElementImport ;
 DirectedRelationship ::= PackageImport ;
 DirectedRelationship ::= PackageMerge ;
 DirectedRelationship ::= TemplateBinding ;
 DirectedRelationship ::= ProtocolConformance ;
 DirectedRelationship ::= Dependency ;
 DirectedRelationship ::= InformationFlow ;
 DirectedRelationship ::= Extend ;
 DirectedRelationship ::= Include ;
PrimitiveFunction ::= body::String language::String ;
ProtocolConformance ::= specificMachine::ProtocolStateMachine generalMachine::ProtocolStateMachine ;
GeneralOrdering ::= before::EventOccurrence after::EventOccurrence ;
InstanceValue ::= instance::InstanceSpecification ;
OpaqueExpression ::= Expression ;
 OpaqueExpression ::= body::String language::String result::Parameter behavior::Behavior ;
LiteralUnlimitedNatural ::= value::UnlimitedNatural ;
InteractionOperator ::= (consider::ε) | (par::ε) | (opt::ε) | (loop::ε) | (alt::ε) | (break::ε) | (assert::ε) | (strict::ε) | (seq::ε) | (ignore::ε) | (neg::ε) | (critical::ε) ;
LiteralNull ::= ε ;
ReadLinkObjectEndQualifierAction ::= object::InputPin result::OutputPin qualifier::Property ;
OutputPin ::= ε ;
LiteralSpecification ::= LiteralBoolean ;
 LiteralSpecification ::= LiteralString ;
 LiteralSpecification ::= LiteralNull ;
 LiteralSpecification ::= LiteralInteger ;
 LiteralSpecification ::= LiteralUnlimitedNatural ;
PackageMerge ::= mergingPackage::Package mergedPackage::Package ;
RemoveStructuralFeatureValueAction ::= value::InputPin ;
DurationConstraint ::= ε ;
ExtensionPoint ::= useCase::UseCase ;
LiteralInteger ::= value::Integer ;
CreateLinkObjectAction ::= result::OutputPin ;
LinkEndData ::= LinkEndCreationData ;
 LinkEndData ::= value::InputPin end::Property (qualifier::QualifierValue)+ ;
TimeConstraint ::= ε ;
AddVariableValueAction ::= isReplaceAll::Boolean insertAt::InputPin ;
ParameterDirectionKind ::= (in::ε) | (inout::ε) | (out::ε) | (return::ε) ;
StringExpression ::= (subExpression::StringExpression)+ owningExpression::StringExpression ;
TransitionKind ::= (internal::ε) | (local::ε) | (external::ε) ;
ReadIsClassifiedObjectAction ::= isDirect::Boolean classifier::Classifier result::OutputPin object::InputPin ;
RemoveVariableValueAction ::= value::InputPin ;
PseudostateKind ::= (deepHistory::ε) | (shallowHistory::ε) | (choice::ε) | (join::ε) | (exitPoint::ε) | (terminate::ε) | (fork::ε) | (junction::ε) | (initial::ε) | (entryPoint::ε) ;
NamedElement ::= Namespace ;
 NamedElement ::= TypedElement ;
 NamedElement ::= RedefinableElement ;
 NamedElement ::= CollaborationOccurrence ;
 NamedElement ::= Trigger ;
 NamedElement ::= InteractionFragment ;
 NamedElement ::= Lifeline ;
 NamedElement ::= Message ;
 NamedElement ::= GeneralOrdering ;
 NamedElement ::= MessageEnd ;
 NamedElement ::= Vertex ;
 NamedElement ::= ParameterSet ;
 NamedElement ::= DeployedArtifact ;
 NamedElement ::= DeploymentTarget ;
 NamedElement ::= PackageableElement ;
 NamedElement ::= ConnectableElement ;
 NamedElement ::= Extend ;
 NamedElement ::= Include ;
 NamedElement ::= ActivityPartition ;
IntervalConstraint ::= TimeConstraint ;
 IntervalConstraint ::= DurationConstraint ;
 IntervalConstraint ::= TimeConstraint | DurationConstraint ;
ElementImport ::= visibility::VisibilityKind alias::String importedElement::PackageableElement importingNamespace::Namespace ;
PrimitiveType ::= (ownedAttribute::Property)+ (ownedOperation::Operation)+ ;
ReplyAction ::= replyToCall::CallTrigger (replyValue::InputPin)+ returnInformation::InputPin ;
DurationInterval ::= (min::ValueSpecification)+ (max::ValueSpecification)+ ;
LiteralBoolean ::= value::Boolean ;
CentralBufferNode ::= DataStoreNode ;
AssociationClass ::= (ownedOperation::Operation)+ (superClass::Class)+ (extension::Extension)+ (nestedClassifier::Classifier)+ isActive::Boolean (ownedReception::Reception)+ isDerived::Boolean (ownedEnd::Property)+ (endType::Type)+ memberEnd::Property ;
StateMachine ::= ProtocolStateMachine ;
 StateMachine ::= (region::Region)+ (connectionPoint::Pseudostate)+ extendedStateMachine::StateMachine stateMachine_redefinitionContext::BehavioredClassifier ;
CombinedFragment ::= interactionOperator::InteractionOperator (operand::InteractionOperand)+ (cfragmentGate::Gate)+ ;
BehavioredClassifier ::= UseCase ;
 BehavioredClassifier ::= Class ;
 BehavioredClassifier ::= Collaboration ;
CreateObjectAction ::= classifier::Classifier result::OutputPin ;
ActivityGroup ::= InterruptibleActivityRegion ;
 ActivityGroup ::= ActivityPartition ;
ExecutableNode ::= Action ;
ActivityEdge ::= ControlFlow ;
 ActivityEdge ::= ObjectFlow ;
StartOwnedBehaviorAction ::= object::InputPin ;
InputPin ::= ValuePin ;
TemplateBinding ::= boundElement::TemplateableElement signature::TemplateSignature (parameterSubstitution::TemplateParameterSubstitution)+ ;
ConditionalNode ::= isDeterminate::Boolean isAssured::Boolean (clause::Clause)+ (result::OutputPin)+ ;
EnumerationLiteral ::= enumeration::Enumeration ;
ValuePin ::= value::ValueSpecification ;
ReadLinkObjectEndAction ::= object::InputPin end::Property result::OutputPin ;
LiteralString ::= value::String ;
AcceptCallAction ::= returnInformation::OutputPin ;
ActivityPartition ::= isDimension::Boolean isExternal::Boolean (containedEdge::ActivityEdge)+ (containedNode::ActivityNode)+ (subgroup::ActivityPartition)+ superPartition::ActivityPartition represents::Element ;
FinalNode ::= ActivityFinalNode ;
 FinalNode ::= FlowFinalNode ;
InteractionOperand ::= guard::InteractionConstraint (fragment::InteractionFragment)+ ;
AggregationKind ::= (composite::ε) | (none::ε) | (shared::ε) ;
MessageEnd ::= Gate ;
 MessageEnd ::= EventOccurrence ;
ExpansionRegion ::= mode::ExpansionKind (outputElement::ExpansionNode)+ (inputElement::ExpansionNode)+ ;
StructuredClassifier ::= EncapsulatedClassifier ;
 StructuredClassifier ::= Collaboration ;
WriteVariableAction ::= AddVariableValueAction ;
 WriteVariableAction ::= RemoveVariableValueAction ;
InteractionConstraint ::= minint::ValueSpecification maxint::ValueSpecification ;
ConnectorEnd ::= definingEnd::Property role::ConnectableElement partWithPort::Property ;
JoinNode ::= isCombineDuplicate::Boolean joinSpec::ValueSpecification ;
PackageImport ::= ProfileApplication ;
 PackageImport ::= visibility::VisibilityKind importedPackage::Package importingNamespace::Namespace ;
RedefinableElement ::= Feature ;
 RedefinableElement ::= ActivityEdge ;
 RedefinableElement ::= ActivityNode ;
 RedefinableElement ::= ExtensionPoint ;
 RedefinableElement ::= Transition ;
 RedefinableElement ::= RedefinableTemplateSignature ;
 RedefinableElement ::= Region ;
ClearAssociationAction ::= object::InputPin association::Association ;
CallConcurrencyKind ::= (guarded::ε) | (concurrent::ε) | (sequential::ε) ;
TemplateableElement ::= NamedElement ;
 TemplateableElement ::= Comment ;
 TemplateableElement ::= StringExpression ;
TimeExpression ::= firstTime::Boolean event::NamedElement ;
InteractionOccurrence ::= PartDecomposition ;
 InteractionOccurrence ::= refersTo::Interaction (actualGate::Gate)+ (argument::InputPin)+ ;
InteractionFragment ::= ExecutionOccurrence ;
 InteractionFragment ::= StateInvariant ;
 InteractionFragment ::= InteractionOccurrence ;
 InteractionFragment ::= CombinedFragment ;
 InteractionFragment ::= Continuation ;
 InteractionFragment ::= EventOccurrence ;
 InteractionFragment ::= Interaction ;
 InteractionFragment ::= InteractionOperand ;
ConnectorKind ::= (delegation::ε) | (assembly::ε) ;
ClearVariableAction ::= variable::Variable ;
MultiplicityElement ::= ConnectorEnd ;
 MultiplicityElement ::= Pin ;
ActivityParameterNode ::= parameter::Parameter ;
PackageableElement ::= Type ;
 PackageableElement ::= Constraint ;
 PackageableElement ::= GeneralizationSet ;
 PackageableElement ::= PrimitiveFunction ;
 PackageableElement ::= InstanceSpecification ;
 PackageableElement ::= Dependency ;
 PackageableElement ::= InformationFlow ;
 PackageableElement ::= Package ;
CallTrigger ::= operation::Operation ;
InformationFlow ::= (realization::Relationship)+ (conveyed::Classifier)+ ;
ReadStructuralFeatureAction ::= result::OutputPin ;
InterruptibleActivityRegion ::= (interruptingEdge::ActivityEdge)+ (containedNode::ActivityNode)+ ;
CallAction ::= CallOperationAction ;
 CallAction ::= CallBehaviorAction ;
EncapsulatedClassifier ::= Class ;
TypedElement ::= ValueSpecification ;
 TypedElement ::= ObjectNode ;
DestroyObjectAction ::= isDestroyLinks::Boolean isDestroyOwnedObjects::Boolean target::InputPin ;
StateInvariant ::= invariant::Constraint ;
ProtocolStateMachine ::= (conformance::ProtocolConformance)+ ;
InstanceSpecification ::= EnumerationLiteral ;
 InstanceSpecification ::= (slot::Slot)+ (classifier::Classifier)+ specification::ValueSpecification ;
AnyTrigger ::= ε ;
DestroyLinkAction ::= ε ;
CallBehaviorAction ::= behavior::Behavior ;
InitialNode ::= ε ;
ExpansionNode ::= regionAsOutput::ExpansionRegion regionAsInput::ExpansionRegion ;
BroadcastSignalAction ::= signal::Signal ;
InformationItem ::= (represented::Classifier)+ ;
TemplateSignature ::= RedefinableTemplateSignature ;
 TemplateSignature ::= (parameter::TemplateParameter)+ (ownedParameter::TemplateParameter)+ (nestedSignature::TemplateSignature)+ nestingSignature::TemplateSignature template::TemplateableElement ;
ExtensionEnd ::= default::String isComposite::Boolean isDerived::Boolean class_::Class opposite::Property isDerivedUnion::Boolean owningAssociation::Association (redefinedProperty::Property)+ (subsettedProperty::Property)+ datatype::DataType association::Association aggregation::AggregationKind defaultValue::ValueSpecification (qualifier::Property)+ associationEnd::Property ;
MergeNode ::= ε ;
StructuralFeature ::= Property ;
ConnectionPointReference ::= (entry::Pseudostate)+ (exit::Pseudostate)+ ;
ConnectableElement ::= Parameter ;
 ConnectableElement ::= Variable ;
UseCase ::= (include::Include)+ (extend::Extend)+ (extensionPoint::ExtensionPoint)+ (subject::Classifier)+ ;
PartDecomposition ::= refersTo::Interaction (actualGate::Gate)+ (argument::InputPin)+ ;
ValueSpecification ::= OpaqueExpression ;
 ValueSpecification ::= LiteralSpecification ;
 ValueSpecification ::= InstanceValue ;
 ValueSpecification ::= TimeExpression ;
 ValueSpecification ::= Duration ;
 ValueSpecification ::= Interval ;
WriteStructuralFeatureAction ::= RemoveStructuralFeatureValueAction ;
 WriteStructuralFeatureAction ::= AddStructuralFeatureValueAction ;
 WriteStructuralFeatureAction ::= TimeObservationAction ;
 WriteStructuralFeatureAction ::= DurationObservationAction ;
TemplateParameter ::= OperationTemplateParameter ;
 TemplateParameter ::= ClassifierTemplateParameter ;
 TemplateParameter ::= ConnectableElementTemplateParameter ;
 TemplateParameter ::= signature::TemplateSignature parameteredElement::ParameterableElement ownedParameteredElement::ParameterableElement default::ParameterableElement ownedDefault::ParameterableElement ;
ParameterEffectKind ::= (update::ε) | (read::ε) | (delete::ε) | (create::ε) ;
DurationObservationAction ::= (duration::Duration)+ ;
ProtocolTransition ::= postCondition::Constraint (referred::Operation)+ preCondition::Constraint ;
ObjectFlow ::= isMulticast::Boolean isMultireceive::Boolean transformation::Behavior selection::Behavior ;
LinkEndCreationData ::= isReplaceAll::Boolean insertAt::InputPin ;
ObjectNodeOrderingKind ::= (FIFO::ε) | (unordered::ε) | (ordered::ε) | (LIFO::ε) ;
ActivityFinalNode ::= ε ;
AcceptEventAction ::= AcceptCallAction ;
 AcceptEventAction ::= (trigger::Trigger)+ (result::OutputPin)+ ;
ReadVariableAction ::= result::OutputPin ;
ReadLinkAction ::= result::OutputPin ;
GeneralizationSet ::= isCovering::Boolean isDisjoint::Boolean powertype::Classifier (generalization::Generalization)+ ;
MessageSort ::= (synchSignal::ε) | (synchCall::ε) | (asynchCall::ε) | (asynchSignal::ε) ;
DataType ::= Enumeration ;
 DataType ::= PrimitiveType ;
 DataType ::= (ownedAttribute::Property)+ (ownedOperation::Operation)+ ;
CallOperationAction ::= operation::Operation target::InputPin ;
DeploymentSpecification ::= deploymentLocation::String executionLocation::String ;
DecisionNode ::= decisionInput::Behavior ;
SendObjectAction ::= target::InputPin request::InputPin ;
ApplyFunctionAction ::= function::PrimitiveFunction (argument::InputPin)+ (result::OutputPin)+ ;
ExceptionHandler ::= protectedNode::ExecutableNode handlerBody::ExecutableNode exceptionInput::ObjectNode (exceptionType::Classifier)+ ;
MessageKind ::= (found::ε) | (lost::ε) | (unknown::ε) | (complete::ε) ;
ParameterSet ::= (parameter::Parameter)+ (condition::Constraint)+ ;
ParameterableElement ::= ValueSpecification ;
 ParameterableElement ::= PackageableElement ;
 ParameterableElement ::= ConnectableElement ;
BehavioralFeature ::= Reception ;
 BehavioralFeature ::= Operation ;
TimeObservationAction ::= (now::TimeExpression)+ ;
AddStructuralFeatureValueAction ::= isReplaceAll::Boolean insertAt::InputPin ;
ClassifierTemplateParameter ::= allowSubstitutable::Boolean ;
RedefinableTemplateSignature ::= (redefinitionContext::Classifier)+ isLeaf::Boolean (parameter::TemplateParameter)+ (ownedParameter::TemplateParameter)+ (nestedSignature::TemplateSignature)+ nestingSignature::TemplateSignature template::TemplateableElement ;
CreateLinkAction ::= CreateLinkObjectAction ;
TimeTrigger ::= isRelative::Boolean when::ValueSpecification ;
ControlFlow ::= activity::Activity source::ActivityNode target::ActivityNode (inGroup::ActivityGroup)+ guard::ValueSpecification (redefinedElement::ActivityEdge)+ inStructuredNode::StructuredActivityNode (inPartition::ActivityPartition)+ weight::ValueSpecification interrupts::InterruptibleActivityRegion ;
QualifierValue ::= qualifier::Property value::InputPin ;
ProfileApplication ::= importedProfile::Profile ;
InvocationAction ::= CallAction ;
 InvocationAction ::= SendSignalAction ;
 InvocationAction ::= BroadcastSignalAction ;
 InvocationAction ::= SendObjectAction ;
ForkNode ::= ε ;
ClearStructuralFeatureAction ::= structuralFeature::StructuralFeature object::InputPin ;
ObjectNode ::= ActivityParameterNode ;
 ObjectNode ::= CentralBufferNode ;
 ObjectNode ::= ExpansionNode ;
 ObjectNode ::= Pin ;
--------------------uml::umldi-2.0.bgf--------------------
GraphicPrimitive ::= Polyline ;
 GraphicPrimitive ::= Ellipse ;
SendAction ::= signal::Signal ;
ObjectSetExpression ::= language::String body::String ;
LinkObject ::= association::Association connection::LinkEnd ;
TemplateArgument ::= binding::Binding modelElement::ModelElement ;
AssociationRole ::= base::Association (conformingLink::Link)+ (message::Message)+ multiplicity::Multiplicity ;
ArgListsExpression ::= language::String body::String ;
AggregationKind ::= (ak_none::ε) | (ak_aggregate::ε) | (ak_composite::ε) ;
StateVertex ::= State ;
 StateVertex ::= Pseudostate ;
 StateVertex ::= SynchState ;
 StateVertex ::= StubState ;
CreateAction ::= instantiation::Classifier ;
TextElement ::= text::String ;
GraphElement ::= GraphEdge ;
 GraphElement ::= GraphNode ;
TagDefinition ::= owner::Stereotype tagType::String multiplicity::Multiplicity ;
UseCaseInstance ::= (ownedInstance::Instance)+ (linkEnd::LinkEnd)+ (classifier::Classifier)+ componentInstance::ComponentInstance (slot::AttributeLink)+ (ownedLink::Link)+ ;
SimpleSemanticModelElement ::= typeInfo::String ;
ClassifierInState ::= (inState::State)+ type::Classifier ;
CompositeState ::= SubmachineState ;
 CompositeState ::= (subvertex::StateVertex)+ isConcurrent::Boolean ;
CallConcurrencyKind ::= (cck_sequential::ε) | (cck_guarded::ε) | (cck_concurrent::ε) ;
ScopeKind ::= (sk_instance::ε) | (sk_classifier::ε) ;
MappingExpression ::= language::String body::String ;
VisibilityKind ::= (vk_public::ε) | (vk_protected::ε) | (vk_private::ε) | (vk_package::ε) ;
TimeExpression ::= language::String body::String ;
ObjectFlowState ::= type::Classifier (parameter::Parameter)+ isSynch::Boolean ;
StubState ::= referenceState::String ;
LinkEnd ::= link::Link (qualifiedValue::AttributeLink)+ instance::Instance associationEnd::AssociationEnd ;
SimpleState ::= ActionState ;
 SimpleState ::= ObjectFlowState ;
 SimpleState ::= ActionState | ObjectFlowState ;
ActivityGraph ::= (partition::Partition)+ ;
MultiplicityRange ::= multiplicity::Multiplicity lower::Integer upper::Integer ;
ChangeableKind ::= (ck_changeable::ε) | (ck_frozen::ε) | (ck_addOnly::ε) ;
FinalState ::= (deferrableEvent::Event)+ (internalTransition::Transition)+ exit::Action doActivity::Action entry::Action stateMachine::StateMachine ;
ActionState ::= CallState ;
 ActionState ::= isDynamic::Boolean dynamicArguments::ArgListsExpression dynamicMultiplicity::Multiplicity ;
NodeInstance ::= (resident::ComponentInstance)+ ;
TerminateAction ::= (actualArgument::Argument)+ actionSequence::ActionSequence recurrence::IterationExpression target::ObjectSetExpression isAsynchronous::Boolean script::ActionExpression ;
ClassifierRole ::= (availableContents::ModelElement)+ (base::Classifier)+ (conformingInstance::Instance)+ (availableFeature::Feature)+ multiplicity::Multiplicity ;
ProgrammingLanguageDataType ::= expression::TypeExpression ;
CallAction ::= operation::Operation ;
BezierPoint ::= base::Point control1::Point control2::Point ;
GraphNode ::= Diagram ;
 GraphNode ::= size::Dimension ;
AssociationEndRole ::= base::AssociationEnd (availableQualifier::Attribute)+ collaborationMultiplicity::Multiplicity ;
DiagramLink ::= graphElement::GraphElement diagram::Diagram zoom::Double viewport::Point ;
SemanticModelBridge ::= SimpleSemanticModelElement ;
 SemanticModelBridge ::= Uml1SemanticModelBridge ;
 SemanticModelBridge ::= CoreSemanticModelBridge ;
DiagramElement ::= GraphElement ;
 DiagramElement ::= LeafElement ;
 DiagramElement ::= Reference ;
DataValue ::= (ownedInstance::Instance)+ (linkEnd::LinkEnd)+ (classifier::Classifier)+ componentInstance::ComponentInstance (slot::AttributeLink)+ (ownedLink::Link)+ ;
TaggedValue ::= type::TagDefinition (referenceValue::ModelElement)+ modelElement::ModelElement (dataValue::String)+ ;
BooleanExpression ::= language::String body::String ;
GraphConnector ::= graphElement::GraphElement (graphEdge::GraphEdge)+ position::Point ;
CallEvent ::= operation::Operation ;
InteractionInstanceSet ::= interaction::Interaction context::CollaborationInstanceSet (participatingStimulus::Stimulus)+ ;
AssociationEnd ::= AssociationEndRole ;
 AssociationEnd ::= association::Association (specification::Classifier)+ participant::Classifier (qualifier::Attribute)+ isNavigable::Boolean ordering::OrderingKind aggregation::AggregationKind targetScope::ScopeKind multiplicity::Multiplicity changeability::ChangeableKind ;
StructuralFeature ::= Attribute ;
UseCase ::= (include::Include)+ (extend::Extend)+ (extensionPoint::ExtensionPoint)+ ;
ActionSequence ::= (action::Action)+ ;
IterationExpression ::= language::String body::String ;
ModelElement ::= Message ;
 ModelElement ::= Interaction ;
 ModelElement ::= InteractionInstanceSet ;
 ModelElement ::= CollaborationInstanceSet ;
 ModelElement ::= ExtensionPoint ;
 ModelElement ::= Instance ;
 ModelElement ::= Action ;
 ModelElement ::= AttributeLink ;
 ModelElement ::= Link ;
 ModelElement ::= Argument ;
 ModelElement ::= LinkEnd ;
 ModelElement ::= Stimulus ;
 ModelElement ::= Partition ;
 ModelElement ::= StateMachine ;
 ModelElement ::= Event ;
 ModelElement ::= StateVertex ;
 ModelElement ::= Transition ;
 ModelElement ::= Guard ;
 ModelElement ::= GeneralizableElement ;
 ModelElement ::= Namespace ;
 ModelElement ::= Feature ;
 ModelElement ::= AssociationEnd ;
 ModelElement ::= Constraint ;
 ModelElement ::= Relationship ;
 ModelElement ::= Parameter ;
 ModelElement ::= Comment ;
 ModelElement ::= EnumerationLiteral ;
 ModelElement ::= TagDefinition ;
 ModelElement ::= TaggedValue ;
CallState ::= isDynamic::Boolean dynamicArguments::ArgListsExpression dynamicMultiplicity::Multiplicity ;
SignalEvent ::= signal::Signal ;
ExtensionPoint ::= useCase::UseCase location::String ;
DestroyAction ::= (actualArgument::Argument)+ actionSequence::ActionSequence recurrence::IterationExpression target::ObjectSetExpression isAsynchronous::Boolean script::ActionExpression ;
TemplateParameter ::= template::ModelElement parameter::ModelElement defaultElement::ModelElement ;
Uml1SemanticModelBridge ::= element::Element ;
CoreSemanticModelBridge ::= diagram::Diagram graphElement::GraphElement presentation::String ;
TimeEvent ::= when::TimeExpression ;
ProcedureExpression ::= language::String body::String ;
ChangeEvent ::= changeExpression::BooleanExpression ;
SubmachineState ::= SubactivityState ;
 SubmachineState ::= submachine::StateMachine ;
ParameterDirectionKind ::= (pdk_in::ε) | (pdk_inout::ε) | (pdk_out::ε) | (pdk_return::ε) ;
GeneralizableElement ::= Stereotype ;
 GeneralizableElement ::= Collaboration ;
 GeneralizableElement ::= Classifier ;
 GeneralizableElement ::= Association ;
 GeneralizableElement ::= Package ;
UninterpretedAction ::= (actualArgument::Argument)+ actionSequence::ActionSequence recurrence::IterationExpression target::ObjectSetExpression isAsynchronous::Boolean script::ActionExpression ;
OrderingKind ::= (ok_unordered::ε) | (ok_ordered::ε) ;
CollaborationInstanceSet ::= collaboration::Collaboration (constrainingElement::ModelElement)+ (participatingInstance::Instance)+ (interactionInstanceSet::InteractionInstanceSet)+ (participatingLink::Link)+ ;
PseudostateKind ::= (pk_choice::ε) | (pk_deepHistory::ε) | (pk_fork::ε) | (pk_initial::ε) | (pk_join::ε) | (pk_junction::ε) | (pk_shallowHistory::ε) ;
ReturnAction ::= (actualArgument::Argument)+ actionSequence::ActionSequence recurrence::IterationExpression target::ObjectSetExpression isAsynchronous::Boolean script::ActionExpression ;
DataType ::= Primitive ;
 DataType ::= Enumeration ;
 DataType ::= ProgrammingLanguageDataType ;
 DataType ::= Primitive | Enumeration | ProgrammingLanguageDataType ;
SubactivityState ::= isDynamic::Boolean dynamicArguments::ArgListsExpression dynamicMultiplicity::Multiplicity ;
ElementImport ::= package::Package importedElement::ModelElement visibility::VisibilityKind alias::String isSpecification::Boolean ;
LeafElement ::= TextElement ;
 LeafElement ::= GraphicPrimitive ;
 LeafElement ::= Image ;
BehavioralFeature ::= Reception ;
 BehavioralFeature ::= Operation ;
 BehavioralFeature ::= Method ;
AssociationClass ::= connection::AssociationEnd isActive::Boolean ;
StateMachine ::= ActivityGraph ;
 StateMachine ::= context::ModelElement (submachineState::SubmachineState)+ top::State (transitions::Transition)+ ;
AttributeLink ::= instance::Instance value::Instance linkEnd::LinkEnd attribute::Attribute ;
ComponentInstance ::= (resident::Instance)+ nodeInstance::NodeInstance ;
TypeExpression ::= language::String body::String ;
ActionExpression ::= language::String body::String ;
GraphEdge ::= anchor::GraphConnector waypoints::BezierPoint ;
ElementResidence ::= container::Component resident::ModelElement visibility::VisibilityKind ;
EnumerationLiteral ::= enumeration::Enumeration ;
SynchState ::= bound::Integer ;
SubsystemInstance ::= (ownedInstance::Instance)+ (linkEnd::LinkEnd)+ (classifier::Classifier)+ componentInstance::ComponentInstance (slot::AttributeLink)+ (ownedLink::Link)+ ;
--------------------uml::umldi-ag.bgf--------------------
SendAction ::= signal::Signal ;
CallEvent ::= operation::Operation ;
ObjectSetExpression ::= language::String body::String ;
ArgListsExpression ::= language::String body::String ;
ActionSequence ::= (action::Action)+ ;
AggregationKind ::= (ak_none::ε) | (ak_aggregate::ε) | (ak_composite::ε) ;
StateVertex ::= State ;
 StateVertex ::= Pseudostate ;
 StateVertex ::= SynchState ;
 StateVertex ::= StubState ;
IterationExpression ::= language::String body::String ;
CallState ::= isDynamic::Boolean dynamicArguments::ArgListsExpression dynamicMultiplicity::Multiplicity ;
ModelElement ::= Action ;
 ModelElement ::= Argument ;
 ModelElement ::= GeneralizableElement ;
 ModelElement ::= Namespace ;
 ModelElement ::= Feature ;
 ModelElement ::= Relationship ;
 ModelElement ::= Parameter ;
 ModelElement ::= StateMachine ;
 ModelElement ::= Event ;
 ModelElement ::= StateVertex ;
 ModelElement ::= Transition ;
 ModelElement ::= Guard ;
 ModelElement ::= Partition ;
SignalEvent ::= signal::Signal ;
CreateAction ::= instantiation::Classifier ;
DestroyAction ::= (actualArgument::Argument)+ actionSequence::ActionSequence recurrence::IterationExpression target::ObjectSetExpression isAsynchronous::Boolean script::ActionExpression ;
TimeEvent ::= when::TimeExpression ;
ClassifierInState ::= (inState::State)+ type::Classifier ;
SubmachineState ::= SubactivityState ;
 SubmachineState ::= submachine::StateMachine ;
ChangeEvent ::= changeExpression::BooleanExpression ;
CompositeState ::= SubmachineState ;
 CompositeState ::= (subvertex::StateVertex)+ isConcurrent::Boolean ;
ParameterDirectionKind ::= (pdk_in::ε) | (pdk_inout::ε) | (pdk_out::ε) | (pdk_return::ε) ;
CallConcurrencyKind ::= (cck_sequential::ε) | (cck_guarded::ε) | (cck_concurrent::ε) ;
GeneralizableElement ::= Classifier ;
UninterpretedAction ::= (actualArgument::Argument)+ actionSequence::ActionSequence recurrence::IterationExpression target::ObjectSetExpression isAsynchronous::Boolean script::ActionExpression ;
ScopeKind ::= (sk_instance::ε) | (sk_classifier::ε) ;
OrderingKind ::= (ok_unordered::ε) | (ok_ordered::ε) ;
PseudostateKind ::= (pk_choice::ε) | (pk_deepHistory::ε) | (pk_fork::ε) | (pk_initial::ε) | (pk_join::ε) | (pk_junction::ε) | (pk_shallowHistory::ε) ;
VisibilityKind ::= (vk_public::ε) | (vk_protected::ε) | (vk_private::ε) | (vk_package::ε) ;
ReturnAction ::= (actualArgument::Argument)+ actionSequence::ActionSequence recurrence::IterationExpression target::ObjectSetExpression isAsynchronous::Boolean script::ActionExpression ;
TimeExpression ::= language::String body::String ;
ObjectFlowState ::= type::Classifier (parameter::Parameter)+ isSynch::Boolean ;
StubState ::= referenceState::String ;
SubactivityState ::= isDynamic::Boolean dynamicArguments::ArgListsExpression dynamicMultiplicity::Multiplicity ;
ActivityGraph ::= (partition::Partition)+ ;
SimpleState ::= ActionState ;
 SimpleState ::= ObjectFlowState ;
 SimpleState ::= ActionState | ObjectFlowState ;
ChangeableKind ::= (ck_changeable::ε) | (ck_frozen::ε) | (ck_addOnly::ε) ;
MultiplicityRange ::= multiplicity::Multiplicity lower::Integer upper::Integer ;
ActionState ::= CallState ;
 ActionState ::= isDynamic::Boolean dynamicArguments::ArgListsExpression dynamicMultiplicity::Multiplicity ;
FinalState ::= (deferrableEvent::Event)+ (internalTransition::Transition)+ exit::Action doActivity::Action entry::Action stateMachine::StateMachine ;
BehavioralFeature ::= Operation ;
TerminateAction ::= (actualArgument::Argument)+ actionSequence::ActionSequence recurrence::IterationExpression target::ObjectSetExpression isAsynchronous::Boolean script::ActionExpression ;
StateMachine ::= ActivityGraph ;
 StateMachine ::= context::ModelElement (submachineState::SubmachineState)+ top::State (transitions::Transition)+ ;
CallAction ::= operation::Operation ;
ActionExpression ::= language::String body::String ;
SynchState ::= bound::Integer ;
BooleanExpression ::= language::String body::String ;
--------------------uml::umldi-c.bgf--------------------
SendAction ::= signal::Signal ;
InteractionInstanceSet ::= interaction::Interaction context::CollaborationInstanceSet (participatingStimulus::Stimulus)+ ;
ObjectSetExpression ::= language::String body::String ;
AssociationEnd ::= AssociationEndRole ;
 AssociationEnd ::= association::Association (specification::Classifier)+ participant::Classifier (qualifier::Attribute)+ isNavigable::Boolean ordering::OrderingKind aggregation::AggregationKind targetScope::ScopeKind multiplicity::Multiplicity changeability::ChangeableKind ;
StructuralFeature ::= Attribute ;
LinkObject ::= association::Association connection::LinkEnd ;
AssociationRole ::= base::Association (conformingLink::Link)+ (message::Message)+ multiplicity::Multiplicity ;
ActionSequence ::= (action::Action)+ ;
AggregationKind ::= (ak_none::ε) | (ak_aggregate::ε) | (ak_composite::ε) ;
IterationExpression ::= language::String body::String ;
ModelElement ::= GeneralizableElement ;
 ModelElement ::= Namespace ;
 ModelElement ::= Feature ;
 ModelElement ::= AssociationEnd ;
 ModelElement ::= Relationship ;
 ModelElement ::= Parameter ;
 ModelElement ::= Instance ;
 ModelElement ::= Action ;
 ModelElement ::= AttributeLink ;
 ModelElement ::= Link ;
 ModelElement ::= Argument ;
 ModelElement ::= LinkEnd ;
 ModelElement ::= Stimulus ;
 ModelElement ::= Message ;
 ModelElement ::= Interaction ;
 ModelElement ::= InteractionInstanceSet ;
 ModelElement ::= CollaborationInstanceSet ;
CreateAction ::= instantiation::Classifier ;
DestroyAction ::= (actualArgument::Argument)+ actionSequence::ActionSequence recurrence::IterationExpression target::ObjectSetExpression isAsynchronous::Boolean script::ActionExpression ;
ParameterDirectionKind ::= (pdk_in::ε) | (pdk_inout::ε) | (pdk_out::ε) | (pdk_return::ε) ;
UninterpretedAction ::= (actualArgument::Argument)+ actionSequence::ActionSequence recurrence::IterationExpression target::ObjectSetExpression isAsynchronous::Boolean script::ActionExpression ;
CallConcurrencyKind ::= (cck_sequential::ε) | (cck_guarded::ε) | (cck_concurrent::ε) ;
GeneralizableElement ::= Classifier ;
 GeneralizableElement ::= Association ;
 GeneralizableElement ::= Collaboration ;
CollaborationInstanceSet ::= collaboration::Collaboration (constrainingElement::ModelElement)+ (participatingInstance::Instance)+ (interactionInstanceSet::InteractionInstanceSet)+ (participatingLink::Link)+ ;
ScopeKind ::= (sk_instance::ε) | (sk_classifier::ε) ;
OrderingKind ::= (ok_unordered::ε) | (ok_ordered::ε) ;
ReturnAction ::= (actualArgument::Argument)+ actionSequence::ActionSequence recurrence::IterationExpression target::ObjectSetExpression isAsynchronous::Boolean script::ActionExpression ;
VisibilityKind ::= (vk_public::ε) | (vk_protected::ε) | (vk_private::ε) | (vk_package::ε) ;
LinkEnd ::= link::Link (qualifiedValue::AttributeLink)+ instance::Instance associationEnd::AssociationEnd ;
MultiplicityRange ::= multiplicity::Multiplicity lower::Integer upper::Integer ;
ChangeableKind ::= (ck_changeable::ε) | (ck_frozen::ε) | (ck_addOnly::ε) ;
BehavioralFeature ::= Operation ;
 BehavioralFeature ::= Reception ;
TerminateAction ::= (actualArgument::Argument)+ actionSequence::ActionSequence recurrence::IterationExpression target::ObjectSetExpression isAsynchronous::Boolean script::ActionExpression ;
NodeInstance ::= (resident::ComponentInstance)+ ;
ClassifierRole ::= (availableContents::ModelElement)+ (base::Classifier)+ (conformingInstance::Instance)+ (availableFeature::Feature)+ multiplicity::Multiplicity ;
AttributeLink ::= instance::Instance value::Instance linkEnd::LinkEnd attribute::Attribute ;
CallAction ::= operation::Operation ;
ComponentInstance ::= (resident::Instance)+ nodeInstance::NodeInstance ;
AssociationEndRole ::= base::AssociationEnd (availableQualifier::Attribute)+ collaborationMultiplicity::Multiplicity ;
ActionExpression ::= language::String body::String ;
DataValue ::= (ownedInstance::Instance)+ (linkEnd::LinkEnd)+ (classifier::Classifier)+ componentInstance::ComponentInstance (slot::AttributeLink)+ (ownedLink::Link)+ ;
SubsystemInstance ::= (ownedInstance::Instance)+ (linkEnd::LinkEnd)+ (classifier::Classifier)+ componentInstance::ComponentInstance (slot::AttributeLink)+ (ownedLink::Link)+ ;
BooleanExpression ::= language::String body::String ;
--------------------uml::umldi-mm.bgf--------------------
GeneralizableElement ::= Classifier ;
 GeneralizableElement ::= Package ;
ScopeKind ::= (sk_instance::ε) | (sk_classifier::ε) ;
VisibilityKind ::= (vk_public::ε) | (vk_protected::ε) | (vk_private::ε) | (vk_package::ε) ;
ModelElement ::= GeneralizableElement ;
 ModelElement ::= Namespace ;
 ModelElement ::= Feature ;
 ModelElement ::= Relationship ;
ElementImport ::= package::Package importedElement::ModelElement visibility::VisibilityKind alias::String isSpecification::Boolean ;
--------------------uml::umldi-sm.bgf--------------------
SimpleState ::= (deferrableEvent::Event)+ (internalTransition::Transition)+ exit::Action doActivity::Action entry::Action stateMachine::StateMachine ;
SendAction ::= signal::Signal ;
CallEvent ::= operation::Operation ;
FinalState ::= (deferrableEvent::Event)+ (internalTransition::Transition)+ exit::Action doActivity::Action entry::Action stateMachine::StateMachine ;
ObjectSetExpression ::= language::String body::String ;
BehavioralFeature ::= Reception ;
 BehavioralFeature ::= Operation ;
TerminateAction ::= (actualArgument::Argument)+ actionSequence::ActionSequence recurrence::IterationExpression target::ObjectSetExpression isAsynchronous::Boolean script::ActionExpression ;
ActionSequence ::= (action::Action)+ ;
StateMachine ::= context::ModelElement (submachineState::SubmachineState)+ top::State (transitions::Transition)+ ;
StateVertex ::= State ;
 StateVertex ::= Pseudostate ;
 StateVertex ::= SynchState ;
 StateVertex ::= StubState ;
IterationExpression ::= language::String body::String ;
CallAction ::= operation::Operation ;
ModelElement ::= Action ;
 ModelElement ::= Argument ;
 ModelElement ::= StateMachine ;
 ModelElement ::= Event ;
 ModelElement ::= StateVertex ;
 ModelElement ::= Transition ;
 ModelElement ::= Guard ;
 ModelElement ::= GeneralizableElement ;
 ModelElement ::= Namespace ;
 ModelElement ::= Feature ;
 ModelElement ::= Relationship ;
 ModelElement ::= Parameter ;
SignalEvent ::= signal::Signal ;
CreateAction ::= instantiation::Classifier ;
DestroyAction ::= (actualArgument::Argument)+ actionSequence::ActionSequence recurrence::IterationExpression target::ObjectSetExpression isAsynchronous::Boolean script::ActionExpression ;
ActionExpression ::= language::String body::String ;
TimeEvent ::= when::TimeExpression ;
SubmachineState ::= submachine::StateMachine ;
ChangeEvent ::= changeExpression::BooleanExpression ;
CompositeState ::= SubmachineState ;
 CompositeState ::= (subvertex::StateVertex)+ isConcurrent::Boolean ;
ParameterDirectionKind ::= (pdk_in::ε) | (pdk_inout::ε) | (pdk_out::ε) | (pdk_return::ε) ;
GeneralizableElement ::= Classifier ;
CallConcurrencyKind ::= (cck_sequential::ε) | (cck_guarded::ε) | (cck_concurrent::ε) ;
UninterpretedAction ::= (actualArgument::Argument)+ actionSequence::ActionSequence recurrence::IterationExpression target::ObjectSetExpression isAsynchronous::Boolean script::ActionExpression ;
ScopeKind ::= (sk_instance::ε) | (sk_classifier::ε) ;
PseudostateKind ::= (pk_choice::ε) | (pk_deepHistory::ε) | (pk_fork::ε) | (pk_initial::ε) | (pk_join::ε) | (pk_junction::ε) | (pk_shallowHistory::ε) ;
VisibilityKind ::= (vk_public::ε) | (vk_protected::ε) | (vk_private::ε) | (vk_package::ε) ;
ReturnAction ::= (actualArgument::Argument)+ actionSequence::ActionSequence recurrence::IterationExpression target::ObjectSetExpression isAsynchronous::Boolean script::ActionExpression ;
TimeExpression ::= language::String body::String ;
SynchState ::= bound::Integer ;
StubState ::= referenceState::String ;
BooleanExpression ::= language::String body::String ;
--------------------uml::umldi-uc.bgf--------------------
MultiplicityRange ::= multiplicity::Multiplicity lower::Integer upper::Integer ;
ChangeableKind ::= (ck_changeable::ε) | (ck_frozen::ε) | (ck_addOnly::ε) ;
AssociationEnd ::= association::Association (specification::Classifier)+ participant::Classifier (qualifier::Attribute)+ isNavigable::Boolean ordering::OrderingKind aggregation::AggregationKind targetScope::ScopeKind multiplicity::Multiplicity changeability::ChangeableKind ;
StructuralFeature ::= Attribute ;
UseCase ::= (include::Include)+ (extend::Extend)+ (extensionPoint::ExtensionPoint)+ ;
NodeInstance ::= (resident::ComponentInstance)+ ;
AggregationKind ::= (ak_none::ε) | (ak_aggregate::ε) | (ak_composite::ε) ;
AttributeLink ::= instance::Instance value::Instance linkEnd::LinkEnd attribute::Attribute ;
ModelElement ::= Instance ;
 ModelElement ::= AttributeLink ;
 ModelElement ::= Link ;
 ModelElement ::= LinkEnd ;
 ModelElement ::= ExtensionPoint ;
 ModelElement ::= GeneralizableElement ;
 ModelElement ::= Namespace ;
 ModelElement ::= Feature ;
 ModelElement ::= AssociationEnd ;
 ModelElement ::= Relationship ;
ComponentInstance ::= (resident::Instance)+ nodeInstance::NodeInstance ;
ExtensionPoint ::= useCase::UseCase location::String ;
UseCaseInstance ::= (ownedInstance::Instance)+ (linkEnd::LinkEnd)+ (classifier::Classifier)+ componentInstance::ComponentInstance (slot::AttributeLink)+ (ownedLink::Link)+ ;
GeneralizableElement ::= Classifier ;
 GeneralizableElement ::= Association ;
ScopeKind ::= (sk_instance::ε) | (sk_classifier::ε) ;
OrderingKind ::= (ok_unordered::ε) | (ok_ordered::ε) ;
VisibilityKind ::= (vk_public::ε) | (vk_protected::ε) | (vk_private::ε) | (vk_package::ε) ;
LinkEnd ::= link::Link (qualifiedValue::AttributeLink)+ instance::Instance associationEnd::AssociationEnd ;
BooleanExpression ::= language::String body::String ;
--------------------uml::yuml.bgf--------------------
NoteAssociation ::= note::Note ;
ColorableElement ::= ClassReference ;
 ColorableElement ::= Note ;
ClassDefinition ::= (attributes::Attribute)+ (methods::Method)+ ;
AssociationType ::= (simpleAssociation::ε) | (aggregation::ε) | (composition::ε) ;
LocatedElement ::= Model ;
 LocatedElement ::= Class ;
 LocatedElement ::= ModelElement ;
 LocatedElement ::= ClassDefinition ;
 LocatedElement ::= Cardinality ;
 LocatedElement ::= ClassMember ;
ClassReference ::= class::Class stereotype::String definition::ClassDefinition ;
ModelElement ::= ColorableElement ;
 ModelElement ::= Relationship ;
ClassMember ::= Attribute ;
 ClassMember ::= Method ;
--------------------xml::zhang-cordy.bgf--------------------
more_names ::= spaces "|" spaces name ;
empty_elem_tag ::= "<" name spaces attribute* "/>" ;
more_cps ::= spaces "," spaces cp ;
exid_sys ::= "SYSTEM" spaces literal ;
tag_content ::= stag IN content EX etag ;
cp_body ::= name | choice | seq ;
space_or_newline ::= space | newline ;
choice_item ::= spaces "|" spaces cp ;
not_quote ::= token ;
external_id ::= exid_sys | exid_pub ;
exid_or_pubid ::= external_id | ("PUBLIC" spaces literal) ;
sp_external_id ::= spaces external_id ;
dtd_body ::= misc* doctypedecl? ;
sub2_content ::= element | reference | cdsect | pi | comment | regexp ;
exid_pub ::= "PUBLIC" spaces literal spaces literal ;
sub1_content ::= spaces sub2_content spaces chardata* spaces ;
sub1_pi ::= spaces token ;
sub2_pi ::= token "?>" token ;
pcdata_or_name ::= "(" spaces "#PCDATA" more_names* spaces ")*" ;
not_dquote ::= token ;
more_nmtokens ::= spaces "|" spaces nmtoken ;
children_body ::= choice | seq ;
--------------------xquery::rosendal.bgf--------------------
TextNode ::= (nodes::Expression)+ ;
AttributeNode ::= value::String ;
ElementNode ::= TextNode ;
 ElementNode ::= (nodes::Expression)+ ;
XPath ::= BooleanExp ;
 XPath ::= functionCall::FunctionCall for::For let::Let ;
ReturnXPath ::= XPath ;
 ReturnXPath ::= value::String ;
FunctionCall ::= name::String (parameters::XPath)+ ;
OrderBy ::= flwor::FLWOR ;
BooleanExp ::= where::Where ;
FLWOR ::= for::For let::Let where::Where orderBy::OrderBy return::Return ;
XQueryProgram ::= (expressions::ExecutableExpression)+ ;
FunctionDeclaration ::= name::String (expression::ExecutableExpression)+ ;
ExecutableExpression ::= FLWOR ;
 ExecutableExpression ::= FunctionCall ;
 ExecutableExpression ::= FunctionDeclaration ;
 ExecutableExpression ::= xQueryProgram::XQueryProgram functionDeclaration::FunctionDeclaration ;
--------------------xslt::clark.bgf--------------------
attribute-set.element ::= attribute-set::(extension.atts name::qname.datatype (use-attribute-sets::qnames.datatype)? attribute.element*) ;
top-level-extension ::= any ;
copy-of.element ::= copy-of::(extension.atts select::expression.datatype) ;
char.datatype ::= string() ;
qname-but-not-ncname.datatype ::= string() ;
qnames.datatype ::= string()* ;
text.element ::= text::(extension.atts (disable-output-escaping::("yes" | "no"))? string()) ;
expression.datatype ::= string() ;
transform.element ::= transform::stylesheet.model ;
literal-result-element.atts ::= literal-result-element-no-version.atts (version::version)? ;
include.element ::= include::(extension.atts href::string()) ;
template.model ::= (instruction.category | literal-result-element | string())* ;
import.element ::= import::(extension.atts href::string()) ;
literal-result-element-no-version.atts ::= (avt.datatype | (extension-element-prefixes::prefixes.datatype) | (exclude-result-prefixes::prefixes.datatype) | (use-attribute-sets::qnames.datatype))* ;
fallback.element ::= fallback::(extension.atts template.model) ;
brace-avt.datatype ::= string() ;
key.element ::= key::(extension.atts name::qname.datatype match::pattern.datatype use::expression.datatype) ;
comment.element ::= comment::(extension.atts template.model) ;
sort.element ::= sort::(extension.atts (select::expression.datatype)? (lang::(string() | expr-avt.datatype))? (data-type::("text" | "number" | qname-but-not-ncname.datatype | expr-avt.datatype))? (order::("ascending" | "descending" | expr-avt.datatype))? (case-order::("upper-first" | "lower-first" | expr-avt.datatype))?) ;
namespace-alias.element ::= namespace-alias::(extension.atts stylesheet-prefix::prefix.datatype result-prefix::prefix.datatype) ;
expr-avt.datatype ::= string() ;
if.element ::= if::(extension.atts test::expression.datatype template.model) ;
attribute.element ::= attribute::(extension.atts name::(qname.datatype | expr-avt.datatype) (namespace::(string() | brace-avt.datatype))? template.model) ;
literal-result-element ::= literal-result-element.atts template.model ;
number.datatype ::= integer() ;
apply-templates.element ::= apply-templates::(extension.atts (select::expression.datatype)? (mode::qname.datatype)? (sort.element | with-param.element)*) ;
literal-result-element-as-stylesheet ::= version::version literal-result-element-no-version.atts template.model ;
choose.element ::= choose::(extension.atts when.element+ otherwise.element?) ;
processing-instruction.element ::= processing-instruction::(extension.atts name::(string() | expr-avt.datatype) template.model) ;
strip-space.element ::= strip-space::(extension.atts elements::wildcards.datatype) ;
instruction.category ::= apply-templates.element | apply-imports.element | call-template.element | element.element | attribute.element | text.element | processing-instruction.element | comment.element | copy.element | value-of.element | number.element | for-each.element | if.element | choose.element | variable.element | copy-of.element | message.element | fallback.element ;
apply-imports.element ::= apply-imports::extension.atts ;
stylesheet.element ::= stylesheet::stylesheet.model ;
param.element ::= param::(extension.atts name::qname.datatype (select::expression.datatype) | template.model) ;
wildcards.datatype ::= string()* ;
number.element ::= number::(extension.atts (level::("single" | "multiple" | "any"))? (count::pattern.datatype)? (from::pattern.datatype)? (value::expression.datatype)? (format::avt.datatype)? (lang::(string() | expr-avt.datatype))? (letter-value::("alphabetic" | "traditional" | expr-avt.datatype))? (grouping-separator::(char.datatype | expr-avt.datatype))? (grouping-size::(number.datatype | expr-avt.datatype))?) ;
call-template.element ::= call-template::(extension.atts name::qname.datatype with-param.element*) ;
qname.datatype ::= string() ;
message.element ::= message::(extension.atts (terminate::("yes" | "no"))? template.model) ;
with-param.element ::= with-param::(extension.atts name::qname.datatype (select::expression.datatype) | template.model) ;
avt.datatype ::= string() ;
preserve-space.element ::= preserve-space::(extension.atts elements::wildcards.datatype) ;
for-each.element ::= for-each::(extension.atts select::expression.datatype sort.element* template.model) ;
top-level-elements.model ::= (top-level-element.category | top-level-extension)* ;
prefixes.datatype ::= (string() | "#default")* ;
top-level-element.category ::= include.element | strip-space.element | preserve-space.element | template.element | namespace-alias.element | attribute-set.element | variable.element | param.element | key.element | decimal-format.element | output.element ;
output.element ::= output::(extension.atts (method::("xml" | "html" | "text" | qname-but-not-ncname.datatype))? (version::string())? (encoding::string())? (omit-xml-declaration::("yes" | "no"))? (standalone::("yes" | "no"))? (doctype-public::string())? (doctype-system::string())? (cdata-section-elements::qnames.datatype)? (indent::("yes" | "no"))? (media-type::string())?) ;
variable.element ::= variable::(extension.atts name::qname.datatype (select::expression.datatype) | template.model) ;
element.element ::= element::(extension.atts name::(qname.datatype | expr-avt.datatype) (namespace::(string() | brace-avt.datatype))? (use-attribute-sets::qnames.datatype)? template.model) ;
stylesheet.model ::= extension.atts (id::string())? (extension-element-prefixes::prefixes.datatype)? (exclude-result-prefixes::prefixes.datatype)? version::version import.element* top-level-elements.model ;
when.element ::= when::(extension.atts test::expression.datatype template.model) ;
template.element ::= template::(extension.atts (match::pattern.datatype)? (name::qname.datatype)? (priority::number.datatype)? (mode::qname.datatype)? param.element* template.model) ;
copy.element ::= copy::(extension.atts (use-attribute-sets::qnames.datatype)? template.model) ;
pattern.datatype ::= string() ;
otherwise.element ::= otherwise::(extension.atts template.model) ;
decimal-format.element ::= decimal-format::(extension.atts (name::qname.datatype)? (decimal-separator::char.datatype)? (grouping-separator::char.datatype)? (infinity::string())? (minus-sign::char.datatype)? (NaN::string())? (percent::char.datatype)? (per-mille::char.datatype)? (zero-digit::char.datatype)? (digit::char.datatype)? (pattern-separator::char.datatype)?) ;
value-of.element ::= value-of::(extension.atts select::expression.datatype (disable-output-escaping::("yes" | "no"))?) ;
extension.atts ::= α* ;
prefix.datatype ::= string() | "#default" ;
--------------------xslt::rosendal.bgf--------------------
TextNode ::= value::String ;
AttributeNode ::= name::String parentNode::ElementNode ;
ElementNode ::= RootNode ;
 ElementNode ::= TextNode ;
 ElementNode ::= XSLTNode ;
 ElementNode ::= (nodes::Node)+ ;
ApplyTemplates ::= select::String ;
ValueOf ::= select::String ;
XSLTRootNode ::= document::Document ;
XSLTNode ::= ApplyTemplates ;
 XSLTNode ::= If ;
 XSLTNode ::= Template ;
 XSLTNode ::= ValueOf ;
 XSLTNode ::= When ;
 XSLTNode ::= Choose ;
 XSLTNode ::= Otherwise ;
 XSLTNode ::= Sort ;
RootNode ::= XSLTRootNode ;
 RootNode ::= document::Document ;
--------------------logo::sdf.bgf--------------------
FunctionDef ::= "to" Id Formal* Block ;
BasicCommand ::= ("if" Exp Block) | ("ifelse" Exp Block Block) | ("repeat" Exp Block) | ("forward" Exp) | ("back" Exp) | ("left" Exp) | ("right" Exp) | ("setxy" Exp Exp) | ("setx" Exp) | ("sety" Exp) | "home" | "showturtle" | "hideturtle" | "clean" | "clearscreen" | "pendown" | "penup" | ("pencolor" Color) | ("local" QuotedId) | ("make" QuotedId Exp) ;
--------------------php::cordy.bgf--------------------
VarModifier ::= "public" | "protected" | "private" | "static" | "final" ;
PHPCloseTag ::= ("?>" NL) | ("%>" NL) ;
InequalityOpShiftExpr ::= InequalityOp ShiftExpr ;
StringConstant ::= stringlit | charlit | CommandString | ("<<<" id IN NL EncapsedInlineHTML* id EX) ;
BitOrBitXorExpr ::= "|" BitXorExpr ;
TVariable ::= SimpleVariableName ;
PHPCloseTagDocumentSection ::= PHPCloseTag HTMLSection PHPCloseTagDocumentSection? ;
EncapsedInlineHTML ::= tag_token_or_key ;
InlineHTMLStatement ::= PHPCloseTag InlineHTML PHPOpenTag ;
ForEachPattern ::= ForEachKey? ForEachVar ;
PHPOpenTagPHPSection ::= PHPOpenTag PHPSection ;
CVar ::= ReferenceVariable ;
InlineHTML ::= InlineHTMLtoken* ;
ShiftOp ::= "<<" | ">>" ;
IfConditionalOrExpr ::= "?" Expr ":" Expr ;
bigtag_id ::= "html" | "body" | "head" | "form" | "table" | "tr" | "td" | "script" | "select" | "label" | "div" ;
ExprStatement ::= Expr ";"? NL ;
BitAndEqualityExpr ::= "&" EqualityExpr ;
MultOpNotExpr ::= MultOp NotExpr ;
PlusMinus ::= "+" | "-" ;
InternalFunction ::= ("new" Primary) | ("clone" Primary) | ("isset" "(" {ObjectCVar ","}+ ")") | ("empty" "(" ObjectCVar ")") | ("intval" "(" ObjectCVar ")") | ("eval" "(" Expr ")") | ("exit" exit_value?) | ("include" Expr) | ("include_once" Expr) | ("require" Expr) | ("require_once" Expr) ;
InequalityExpr ::= ShiftExpr InequalityOpShiftExpr* ;
AssignOpAssignmentExpr ::= AssignOp AssignmentExpr ;
ScalarConstant ::= (PlusMinus? NumericConstant) | StringConstant | MagicConstant | BooleanConstant | "null" ;
ConditionalOrConditionalAndExpr ::= "||" ConditionalAndExpr ;
InterfaceExtendsClause ::= "extends" {Name ","}+ ;
BooleanConstant ::= "true" | "false" ;
CatExpr ::= AddExpr CatAddExpr* ;
ReferenceVariable ::= CompoundVariable VariableExtension* ;
LogicalXorExpr ::= LogicalAndExpr LogicalXorLogicalAndExpr* ;
ForStatement ::= ("for" "(" {Expr ","}* ";" {Expr ","}* ";" {Expr ","}* ")" NL Statement) | ("for" "(" {Expr ","}* ";" {Expr ","}* ";" {Expr ","}* ")" ":" NL IN Statement* EX "endfor" ";" NL) ;
BitOrExpr ::= BitXorExpr BitOrBitXorExpr* ;
ObjectCVar ::= ClassNameColonColon? CVar CallParams? ArrowObjectProperty* ;
FunctionDecl ::= "function" "&"? id "(" {Param ","}* ")" NL Block ;
LogicalOrExpr ::= LogicalXorExpr OrLogicalXorExpr* ;
BitAndExpr ::= EqualityExpr BitAndEqualityExpr* ;
HTMLSection ::= InlineHTML ;
TopStatement ::= FunctionDecl | ClassDecl | Statement | InterfaceDecl ;
ElseIfStatement ::= "elseif" "(" Expr ")" NL Statement ;
ArrayValue ::= Expr | ("&" ObjectCVar) ;
InstanceOfUnaryExpr ::= "instanceof" UnaryExpr ;
ForEachKey ::= ForEachVar "=>" ;
ArrayPair ::= NL ArrayKey? ArrayValue ;
ControlStatement ::= ("break" Expr? ";" NL) | ("continue" Expr? ";" NL) | ("return" Expr? ";" NL) ;
IfStatement ::= ("if" "(" Expr ")" NL Statement ElseIfStatement* ElseStatement?) | ("if" "(" Expr ")" ":" NL IN TopStatement* EX AltElseifStatement* AltElseStatement? "endif" ";" NL) ;
ClassType ::= "class" | ("abstract" "class") | ("final" "class") ;
NumericConstant ::= number | Hexa | Octa ;
CallParam ::= "&"? Expr ;
EchoStatement ::= "echo" {Expr ","}+ ";"? NL ;
AddOpMultExpr ::= AddOp MultExpr ;
id_or_key ::= (id "-"? id?) | key ;
CallParams ::= "(" {CallParam ","}* ")" ;
UnaryExpr ::= UnaryOp* IncDecExpr ;
ClassNameColonColon ::= ClassName "::" ;
CatAddExpr ::= "." AddExpr ;
EqualityOp ::= "==" | "!=" | "===" | "!==" ;
VariableOrFunctionCall ::= ObjectCVar ;
InlineHTMLtoken ::= tag_token_or_key ;
tag_token_or_key ::= tag | (";" NL) | token | key ;
OrLogicalXorExpr ::= "or" LogicalXorExpr ;
ShiftOpCatExpr ::= ShiftOp CatExpr ;
NullStatement ::= ";" NL ;
BlockStatement ::= Block ;
AssignmentExpr ::= TernaryExpr AssignOpAssignmentExpr* ;
InequalityOp ::= "<>" | "<" | "<=" | ">" | ">=" ;
ConditionalOrExpr ::= ConditionalAndExpr ConditionalOrConditionalAndExpr* ;
ArrowObjectProperty ::= "->" ObjectProperty CallParams? ;
ForEachVar ::= CVar | ("&" CVar) ;
SwitchStatement ::= ("switch" "(" Expr ")" NL "{" ";"? NL IN Case* EX "}" NL) | ("switch" "(" Expr ")" ":" ";"? NL IN Case* EX "endswitch" ";" NL) ;
IncDecExpr ::= IncDec* Primary IncDec* ;
EqualsStaticScalar ::= "=" StaticScalar ;
PHPOpenTag ::= ("<?php" NL) | ("<?" NL) | ("<%" NL) | ("<?=" NL) ;
ShiftExpr ::= CatExpr ShiftOpCatExpr* ;
CaseSeparator ::= ";" | ":" ;
LogicalXorLogicalAndExpr ::= "xor" LogicalAndExpr ;
ListElem ::= List | ObjectCVar | ε ;
BitXorBitAndExpr ::= "^" BitAndExpr ;
PHPSection ::= TopStatement* ;
CompoundVariable ::= VariableName ;
ArrayKey ::= Expr "=>" ;
UnsetStatement ::= "unset" "(" {ObjectCVar ","}+ ")" ";" NL ;
MultExpr ::= NotExpr MultOpNotExpr* ;
IncDec ::= "++" | "--" ;
InterfaceDecl ::= "interface" id NL InterfaceExtendsClause? "{" NL IN InterfaceMember* EX NL "}" ;
PrintStatement ::= "print" {Expr ","}+ ";"? NL ;
ImplementsClause ::= "implements" {Name ","}+ NL ;
GlobalStaticStatement ::= ("global" {CVar ","}+ ";" NL) | ("static" {StaticVariable ","}+ ";" NL) ;
WhileStatement ::= ("while" "(" Expr ")" NL Statement) | ("while" "(" Expr ")" ":" NL IN TopStatement* EX "endwhile" ";" NL) ;
ObjectProperty ::= VariableName | IdOrKey | (ObjectProperty VariableExtension) | ObjectCVar ;
ConditionalAndBitOrExpr ::= "&&" BitOrExpr ;
MultOp ::= "*" | "/" | "%" ;
InstanceVariable ::= TVariable EqualsStaticScalar? ;
UnaryOp ::= "~" | "-" | "@" | ("(" CastType ")") | ("@" "!") ;
TernaryExpr ::= ConditionalOrExpr IfConditionalOrExpr* ;
AssignOp ::= ".=" | "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | ">>=" | "=&" ;
InstanceExpr ::= UnaryExpr InstanceOfUnaryExpr? ;
ThrowStatement ::= "throw" Expr ";" NL ;
NotExpr ::= "!"* InstanceExpr ;
ExtendsClause ::= "extends" id NL ;
VariableName ::= SimpleVariableName | ("$" VariableName) | ("{" SimpleVariableName "}") | ("{" Expr "}") ;
DeclareStatement ::= "declare" "(" Directive* ")" NL Statement ;
ForEachStatement ::= ("foreach" "(" Expr "as" ForEachPattern ")" NL Statement) | ("foreach" "(" Expr "as" ForEachPattern ")" ":" NL IN Statement* EX "endforeach" ";" NL) ;
BitXorExpr ::= BitAndExpr BitXorBitAndExpr* ;
LogicalAndExpr ::= AssignmentExpr LogicalAndAssignmentExpr* ;
AddOp ::= "+" | "-" ;
CastType ::= "int" | "integer" | "bool" | "boolean" | "real" | "double" | "float" | "string" | "array" | "object" | "unset" ;
xml_colon ::= "xml:" ;
tag_attribute ::= SP xml_colon? id_or_key "=" token ;
VarModifiers ::= VarModifier+ ;
AltElseifStatement ::= "elseif" "(" Expr ")" ":" NL IN TopStatement* EX ;
LogicalAndAssignmentExpr ::= "and" AssignmentExpr ;
EqualityOpInequalityExpr ::= EqualityOp InequalityExpr ;
EqualityExpr ::= InequalityExpr EqualityOpInequalityExpr* ;
AltElseStatement ::= "else" ":" NL IN TopStatement* EX ;
StaticVariable ::= TVariable EqualsStaticScalar? ;
ConditionalAndExpr ::= BitOrExpr ConditionalAndBitOrExpr* ;
ClassDecl ::= ClassType id NL ExtendsClause? ImplementsClause? "{" NL IN ClassMember* EX "}" NL ;
StaticScalar ::= Primary ;
SimpleVariableName ::= id | ("$" SPOFF IdOrKey SPON) ;
AddExpr ::= MultExpr AddOpMultExpr* ;
ElseStatement ::= "else" NL Statement ;
TryStatement ::= "try" NL Block Catch* ;
InterfaceMember ::= VarModifiers? "function" "&"? id "(" {Param ","}* ")" ";" NL ;
ClassMember ::= (VarModifiers? FunctionDecl) | (VarModifiers? "abstract" VarModifiers? "function" "&"? id "(" {Param ","}* ")" ";" NL) | ("var" {InstanceVariable ","}+ ";" NL) | ("const" id "=" StaticScalar ";" NL) | (VarModifiers {InstanceVariable ","}+ ";" NL) ;
exit_value ::= "(" Expr? ")" ;
token_or_key ::= token | key ;
DoStatement ::= "do" NL Statement "while" "(" Expr ")" ";" NL ;
VariableExtension ::= ("[" Expr? "]") | ("{" Expr "}") ;
ClassName ::= id ;
IdOrKey ::= id | key ;
TypeHint ::= id ;
--------------------python::indent-cordy.bgf--------------------
tab_space ::= tab | space ;
nonblank_token ::= compound | token ;
--------------------python::sorochan-cordy.bgf--------------------
not_test ::= "not"* endofline* comparison ;
for_stmt ::= "for" exprlist "in" testlist ":" suite else_clause? ;
del_stmt ::= "del" exprlist ;
and_test ::= not_test andop_and_test? ;
testplist_gexp ::= (test+ endofline? ","?) | (test endofline? gen_for) ;
except_test ::= test as_or_comma_test? ;
as_name ::= "as" id ;
comp_op_comparison ::= endofline* comp_op endofline* comparison ;
return_stmt ::= "return" testlist? ;
if_test ::= endofline* "if" or_test "else" test ;
unary_op ::= "+" | "-" | "~" ;
dotted_as_names ::= dotted_as_name+ ;
decorator_arglist ::= SPOFF "(" SPON IN arglist? endofline* ")" EX ;
argument_value ::= (endofline* gen_for?) | ("=" endofline* test) ;
plist_if ::= "if" old_test plist_iter? ;
shiftop_shift_expr ::= endofline? shift_op endofline? shift_expr ;
or_test ::= and_test orop_or_test? ;
gen_if ::= "if" old_test gen_iter? ;
in_test ::= "in" test ;
is_expr ::= "=" endofline* assign_value ;
comma_opt_star_test ::= "," star_test? comma_opt_star_test? ;
yield_expr ::= "yield" testlist ;
import_name ::= "import" dotted_as_names ;
global_stmt ::= "global" id+ ;
old_lambdef ::= "lambda" varargslist? ":" old_test ;
dotted_as_name ::= dotted_name as_id? ;
andop_and_test ::= endofline* "and" endofline* and_test ;
continue_stmt ::= "continue" ;
star_test ::= (endofline* "*" test) | (endofline* "**" test) ;
import_as_name ::= endofline* id as_name? ;
and_expr ::= shift_expr andop_and_expr? ;
compound_stmt ::= if_stmt | while_stmt | for_stmt | try_stmt | with_stmt | funcdef | classdef | decorated ;
gen_for ::= "for" exprlist "in" or_test gen_iter? ;
xor_expr ::= and_expr xorop_expr? ;
xorop_expr ::= endofline* "^" endofline* xor_expr ;
fpdef_test ::= endofline* fpdef is_test? endofline? ;
except_clause ::= "except" except_test? ;
import_as_names ::= import_as_name+ ","? ;
expr_stmt ::= (testlist is_expr*) | (testlist augassign assign_value) ;
orop_expr ::= endofline* "|" endofline* expr ;
semicolon_small_stmt ::= ";" small_stmt ;
try_stmt ::= "try" ":" suite except_clause_suite* else_clause? finally_clause? ;
as_or_comma_test ::= ("as" test) | ("," test) ;
as_id ::= "as" id ;
file_input ::= stmt_or_newline* ;
andop_and_expr ::= endofline* "&" endofline* and_expr ;
shift_op ::= "<<" | ">>" ;
comma_test ::= endofline? "," test ;
raise_stmt ::= "raise" test_list? ;
yield_stmt ::= yield_expr ;
flow_stmt ::= break_stmt | continue_stmt | return_stmt | raise_stmt | yield_stmt ;
exec_stmt ::= "exec" expr in_test? comma_test? ;
pass_stmt ::= "pass" ;
else_clause ::= "else" ":" suite ;
simple_stmt ::= (small_stmt semicolon_small_stmt* ";"?) | comment ;
arith_op ::= "+" | "-" ;
orop_or_test ::= endofline* "or" endofline* or_test ;
exp_factor ::= "**" factor ;
testplist_safe ::= old_test+ ","? ;
with_var ::= "as" expr ;
fpdef_test_comma ::= fpdef_test "," ;
finally_clause ::= "finally" ":" suite ;
test_list ::= test comma_test? comma_test? ;
if_stmt ::= "if" test ":" suite elif_clause* else_clause? ;
old_test ::= or_test | old_lambdef ;
plist_iter ::= (endofline* plist_for) | (endofline* plist_if) ;
dict_entry ::= endofline* test ":" endofline* test ;
gen_iter ::= (endofline* gen_for) | (endofline* gen_if) ;
op_arith_expr ::= endofline* arith_op endofline* arith_expr ;
import_items ::= "*" | (endofline* SPOFF "(" SPON import_as_names endofline* ")") | (endofline* import_as_names) ;
import_stmt ::= import_name | import_from ;
with_stmt ::= "with" test with_var? ":" suite ;
assert_stmt ::= "assert" test comma_test? ;
assign_value ::= yield_expr | testlist ;
print_stmt ::= "print" ">>"? {test ","}* ","? ;
plist_for ::= "for" endofline* exprlist "in" testplist_safe plist_iter? ;
encoding_decl ::= id ;
while_stmt ::= "while" test ":" suite else_clause? ;
more_stringliteral ::= endofline* stringliteral ;
term_op ::= "*" | "/" | "%" | "//" ;
shift_expr ::= arith_expr shiftop_shift_expr* ;
comp_op ::= "<" | ">" | "==" | ">=" | "<=" | "<>" | "!=" | "in" | ("not" "in") | "is" | ("is" "not") ;
stmt_or_newline ::= stmt | endofline ;
except_clause_suite ::= except_clause ":" suite ;
op_term ::= endofline* term_op endofline* term ;
elif_clause ::= "elif" test ":" suite ;
dot_dotted_name ::= endofline* "." endofline* dotted_name ;
arith_expr ::= term op_arith_expr* ;
break_stmt ::= "break" ;
is_test ::= "=" endofline* test ;
import_from ::= "from" "."* dotted_name? endofline* "import" import_items ;
testlist1 ::= {test ","}* ;
dotted_name ::= id dot_dotted_name? ;
small_stmt ::= expr_stmt | print_stmt | del_stmt | pass_stmt | flow_stmt | import_stmt | global_stmt | exec_stmt | assert_stmt ;
--------------------markup::atom.bgf--------------------
InLineXHTMLContent ::= type::String ;
InLineOtherContent ::= type::String ;
ATOM ::= title::String id::String subtitle::String rights::String icon::String logo::String (links::Link)+ lastUpdate::Date generator::Generator (categories::Category)+ (authors::Author)+ (contibutors::Contributor)+ (entries::Entry)+ ;
OutOfLineContent ::= src::String ;
--------------------markup::cml.bgf--------------------
_Integer ::= ε ;
_FloatMatrix ::= ε ;
Bond_Array ::= (any::Any)+ ;
_List ::= (any::Any)+ ;
_Float ::= ε ;
_Coordinate3 ::= ε ;
_FloatArray ::= ε ;
AngleUnits ::= (degrees::ε) | (radians::ε) ;
_Coordinate2 ::= ε ;
_IntegerArray ::= ε ;
_Link ::= ε ;
_Angle ::= ε ;
StringBuiltin ::= (id::ε) | (elementType::ε) | (atomId::ε) | (residueType::ε) | (residueId::ε) | (atomRef::ε) | (order::ε) | (stereo::ε) | (spaceground::ε) ;
_String ::= ε ;
AtomRefs_Element ::= _StringBuiltin ;
_Torsion ::= ε ;
Atom_Array ::= (any::Any)+ ;
_StringArray ::= delimiter::String ;
Coordinate2Builtin ::= xy2::ε ;
Coordinate3Builtin ::= (xyz3::ε) | (xyzFract::ε) ;
FloatBuiltin ::= (x2::ε) | (y2::ε) | (x3::ε) | (y3::ε) | (z3::ε) | (xFract::ε) | (yFract::ε) | (zFract::ε) | (occupancy::ε) | (isotope::ε) | (formalCharge::ε) | (hydrogenCount::ε) | (nonHydrogenCount::ε) | (atomParity::ε) | (length::ε) | (acell::ε) | (bcell::ε) | (ccell::ε) | (alpha::ε) | (beta::ε) | (gamma::ε) | (z::ε) ;
IntegerBuiltin ::= (isotope::ε) | (formalCharge::ε) | (hydrogenCount::ε) | (nonHydrogenCount::ε) | (atomParity::ε) | (z::ε) ;
--------------------markup::ebxml.bgf--------------------
BusinessActivity ::= BusinessTransactionActivity ;
 BusinessActivity ::= CollaborationActivity ;
BusinessTransaction ::= pattern::String isGuaranteedDeliveryRequired::Boolean preCondition::String postCondition::String beginsWhen::String endsWhen::String requester::RequestingBusinessActivity responder::RespondingBusinessActivity ;
BusinessPartnerRole ::= collaboration::MultyPartyCollaboration transition::Transaction (performers::Performs)+ ;
BusinessTransactionActivity ::= timeToPerform::String isConcurrent::Boolean isLegallyBinding::Boolean use::BusinessTransaction ;
RespondingBusinessActivity ::= transaction::BusinessTransaction documentEnvelope::DocumentEnvelope ;
BusinessDocument ::= specificationLocation::String specificationElement::String conditionExpression::String (envelopes::DocumentEnvelope)+ (attachments::Attachment)+ ;
DocumentEnvelope ::= isPositiveResponse::Boolean requesting::RequestingBusinessActivity responding::RespondingBusinessActivity (attachements::Attachment)+ document::BusinessDocument ;
DocumentSecurity ::= DocumentEnvelope ;
 DocumentSecurity ::= Attachment ;
MultyPartyCollaboration ::= (partners::BusinessPartnerRole)+ ;
BusinessAction ::= RequestingBusinessActivity ;
 BusinessAction ::= RespondingBusinessActivity ;
CompletionState ::= Failure ;
 CompletionState ::= Success ;
 CompletionState ::= guardCondition::String ;
CollaborationActivity ::= use::BinaryCollaboration ;
BinaryCollaboration ::= pattern::String timeToPerform::String preCondition::String postCondition::String beginsWhen::String endsWhen::String (roles::Performs)+ (transitions::Transaction)+ (states::BusinessState)+ ;
RequestingBusinessActivity ::= timeToAcknowledgeAcceptance::String transaction::BusinessTransaction documentEnvelope::DocumentEnvelope ;
BusinessState ::= Start ;
 BusinessState ::= Fork ;
 BusinessState ::= Join ;
 BusinessState ::= CompletionState ;
 BusinessState ::= BusinessActivity ;
AuthorizedRole ::= isInitiator::Boolean (performers::Performs)+ ;
--------------------markup::docbook-touzet.bgf--------------------
Sect1 ::= (paras::Para)+ ;
DocBook ::= (books::Book)+ ;
TitledElement ::= Article ;
 TitledElement ::= Sect1 ;
--------------------markup::docbook-walsh.bgf--------------------
sect1info ::= sect1info::(sect1info.attlist info.class+) ;
personblurb.role.attrib ::= role.attrib ;
constant.role.attrib ::= role.attrib ;
lineannotation.role.attrib ::= role.attrib ;
abbrev.role.attrib ::= role.attrib ;
local.pubsnumber.attrib ::= ε ;
partinfo.role.attrib ::= role.attrib ;
mediaobject.attlist ::= common.attrib mediaobject.role.attrib local.mediaobject.attrib ;
local.glosslist.attrib ::= ε ;
msgexplan.role.attrib ::= role.attrib ;
local.seeseealso.attrib ::= ε ;
local.citebiblioid.attrib ::= ε ;
local.section.class ::= φ ;
screeninfo.attlist ::= common.attrib screeninfo.role.attrib local.screeninfo.attrib ;
local.legalnotice.attrib ::= ε ;
refmeta.attlist ::= common.attrib refmeta.role.attrib local.refmeta.attrib ;
mousebutton.attlist ::= moreinfo.attrib common.attrib mousebutton.role.attrib local.mousebutton.attrib ;
local.refentryinfo.attrib ::= ε ;
medialabel.role.attrib ::= role.attrib ;
local.synopsis.attrib ::= ε ;
othercredit.attlist ::= common.attrib othercredit.role.attrib local.othercredit.attrib ;
local.glossdef.attrib ::= ε ;
equation.content ::= alt? (graphic+) | (mediaobject+) ;
spanspec.attlist ::= namest::string() nameend::string() spanname::string() (colsep::yesorno)? (rowsep::yesorno)? (align::("left" | "right" | "center" | "justify" | "char"))? (char::string())? (charoff::string())? ;
classname.attlist ::= common.attrib classname.role.attrib local.classname.attrib ;
street.attlist ::= common.attrib street.role.attrib local.street.attrib ;
local.bibliography.attrib ::= ε ;
local.constant.attrib ::= ε ;
local.guibutton.attrib ::= ε ;
qandaentry.role.attrib ::= role.attrib ;
refentrytitle.attlist ::= common.attrib refentrytitle.role.attrib local.refentrytitle.attrib ;
local.co.attrib ::= ε ;
local.method.synop.class ::= φ ;
local.blockquote.attrib ::= ε ;
refentryinfo.role.attrib ::= role.attrib ;
local.tocpart.attrib ::= ε ;
userlevel.attrib ::= (userlevel::string())? ;
book.role.attrib ::= role.attrib ;
local.revision.attrib ::= ε ;
keyword.attlist ::= common.attrib keyword.role.attrib local.keyword.attrib ;
local.pagenums.attrib ::= ε ;
footnote.role.attrib ::= role.attrib ;
initializer.attlist ::= common.attrib initializer.role.attrib local.initializer.attrib ;
confdates.attlist ::= common.attrib confdates.role.attrib local.confdates.attrib ;
local.command.attrib ::= ε ;
confgroup.role.attrib ::= role.attrib ;
imageobject.role.attrib ::= role.attrib ;
revision.attlist ::= common.attrib revision.role.attrib local.revision.attrib ;
local.authorblurb.attrib ::= ε ;
local.audioobject.attrib ::= ε ;
application.role.attrib ::= role.attrib ;
sect1.role.attrib ::= role.attrib ;
equation.role.attrib ::= role.attrib ;
local.primsecter.attrib ::= ε ;
xreflabel.attrib ::= (xreflabel::string())? ;
refsect2info.role.attrib ::= role.attrib ;
toc.role.attrib ::= role.attrib ;
sgmltag.role.attrib ::= role.attrib ;
local.confdates.attrib ::= ε ;
appendix.attlist ::= label.attrib status.attrib common.attrib appendix.role.attrib local.appendix.attrib ;
refclass.role.attrib ::= role.attrib ;
copyright.attlist ::= common.attrib copyright.role.attrib local.copyright.attrib ;
interfacename.role.attrib ::= role.attrib ;
acronym.role.attrib ::= role.attrib ;
refdescriptor.role.attrib ::= role.attrib ;
local.refsectioninfo.attrib ::= ε ;
local.coref.attrib ::= ε ;
bibliocomponent.mix ::= abbrev | abstract | address | artpagenums | author | authorgroup | authorinitials | bibliomisc | biblioset | collab | confgroup | contractnum | contractsponsor | copyright | corpauthor | corpname | date | edition | editor | invpartnumber | isbn | issn | issuenum | orgname | biblioid | citebiblioid | bibliosource | bibliorelation | bibliocoverage | othercredit | pagenums | printhistory | productname | productnumber | pubdate | publisher | publishername | pubsnumber | releaseinfo | revhistory | seriesvolnums | subtitle | title | titleabbrev | volumenum | citetitle | personname | person.ident.mix | ndxterm.class | local.bibliocomponent.mix ;
refentry.role.attrib ::= role.attrib ;
local.simplemsgentry.attrib ::= ε ;
local.refclass.attrib ::= ε ;
refentry.attlist ::= status.attrib common.attrib refentry.role.attrib local.refentry.attrib ;
pagenums.attlist ::= common.attrib pagenums.role.attrib local.pagenums.attrib ;
graphics.attrib ::= (entityref::string())? (fileref::string())? (format::notation.class)? (srccredit::string())? (width::string())? (contentwidth::string())? (depth::string())? (contentdepth::string())? (align::("left" | "right" | "center"))? (valign::("top" | "middle" | "bottom"))? (scale::string())? (scalefit::yesorno.attvals)? local.graphics.attrib ;
informalfigure.role.attrib ::= role.attrib ;
action.role.attrib ::= role.attrib ;
local.indexdivcomponent.mix ::= φ ;
areaset.role.attrib ::= role.attrib ;
corpauthor.attlist ::= common.attrib corpauthor.role.attrib local.corpauthor.attrib ;
msginfo.role.attrib ::= role.attrib ;
forms.hook ::= φ ;
msginfo.attlist ::= common.attrib msginfo.role.attrib local.msginfo.attrib ;
tocentry.role.attrib ::= role.attrib ;
seriesvolnums.role.attrib ::= role.attrib ;
local.title.char.mix ::= φ ;
sect2info ::= sect2info::(sect2info.attlist info.class+) ;
linkendreq.attrib ::= linkend::string() ;
abstract.role.attrib ::= role.attrib ;
glossary.role.attrib ::= role.attrib ;
firstterm.role.attrib ::= role.attrib ;
refsect1.role.attrib ::= role.attrib ;
primaryie.attlist ::= linkends.attrib common.attrib primsecterie.role.attrib local.primsecterie.attrib ;
guilabel.role.attrib ::= role.attrib ;
tocchap.attlist ::= label.attrib common.attrib tocchap.role.attrib local.tocchap.attrib ;
local.book.attrib ::= ε ;
seealso.attlist ::= common.attrib seeseealso.role.attrib local.seeseealso.attrib ;
citerefentry.role.attrib ::= role.attrib ;
local.itermset.attrib ::= ε ;
local.orgdiv.attrib ::= ε ;
revhistory.role.attrib ::= role.attrib ;
arch.attrib ::= (arch::string())? ;
foreignphrase.role.attrib ::= role.attrib ;
destructorsynopsis.role.attrib ::= role.attrib ;
area.role.attrib ::= role.attrib ;
local.msgmain.attrib ::= ε ;
classsynopsis.role.attrib ::= role.attrib ;
refsynopsisdiv.role.attrib ::= role.attrib ;
local.index.class ::= φ ;
link.char.class ::= link | olink | ulink | local.link.char.class ;
local.chapter.class ::= φ ;
admon.class ::= caution | important | note | tip | warning | local.admon.class ;
indexinfo.attlist ::= common.attrib indexinfo.role.attrib local.indexinfo.attrib ;
local.cmdsynopsis.attrib ::= ε ;
productnumber.role.attrib ::= role.attrib ;
local.glossdef.mix ::= φ ;
local.setinfo.attrib ::= ε ;
local.refsect3info.attrib ::= ε ;
conformance.attrib ::= (conformance::string())? ;
objectinfo.role.attrib ::= role.attrib ;
editor.attlist ::= common.attrib editor.role.attrib local.editor.attrib ;
inlinemediaobject.role.attrib ::= role.attrib ;
screen.attlist ::= width.attrib linespecific.attrib common.attrib screen.role.attrib local.screen.attrib ;
accel.role.attrib ::= role.attrib ;
caution.attlist ::= common.attrib admon.role.attrib local.admon.attrib ;
citebiblioid.attlist ::= biblio.class.attrib common.attrib citebiblioid.role.attrib local.citebiblioid.attrib ;
figure.role.attrib ::= role.attrib ;
local.pob.attrib ::= ε ;
honorific.role.attrib ::= role.attrib ;
local.funcsynopsisinfo.attrib ::= ε ;
local.citation.attrib ::= ε ;
partintro.role.attrib ::= role.attrib ;
paramdef.attlist ::= common.attrib paramdef.role.attrib local.paramdef.attrib ;
funcsynopsis.attlist ::= label.attrib common.attrib funcsynopsis.role.attrib local.funcsynopsis.attrib ;
local.equation.attrib ::= ε ;
seg.role.attrib ::= role.attrib ;
arg.attlist ::= (choice::("opt" | "req" | "plain"))? (rep::("norepeat" | "repeat"))? common.attrib arg.role.attrib local.arg.attrib ;
local.part.attrib ::= ε ;
idreq.common.attrib ::= idreq.attrib lang.attrib remap.attrib xreflabel.attrib revisionflag.attrib effectivity.attrib local.common.attrib ;
local.methodsynopsis.attrib ::= ε ;
step.role.attrib ::= role.attrib ;
local.publisher.attrib ::= ε ;
sect1.attlist ::= (renderas::("sect2" | "sect3" | "sect4" | "sect5"))? label.attrib status.attrib common.attrib sect1.role.attrib local.sect1.attrib ;
biblioset.role.attrib ::= role.attrib ;
local.screenco.attrib ::= ε ;
command.attlist ::= moreinfo.attrib common.attrib command.role.attrib local.command.attrib ;
reference.attlist ::= label.attrib status.attrib common.attrib reference.role.attrib local.reference.attrib ;
local.variablelist.attrib ::= ε ;
local.honorific.attrib ::= ε ;
imageobjectco.attlist ::= common.attrib imageobjectco.role.attrib local.imageobjectco.attrib ;
simplemsgentry.role.attrib ::= role.attrib ;
year.role.attrib ::= role.attrib ;
local.highlights.mix ::= φ ;
local.keycode.attrib ::= ε ;
firstname.role.attrib ::= role.attrib ;
local.orgname.attrib ::= ε ;
dedication.role.attrib ::= role.attrib ;
interface.attlist ::= moreinfo.attrib common.attrib interface.role.attrib local.interface.attrib ;
local.graphics.attrib ::= ε ;
local.refclass.char.mix ::= φ ;
releaseinfo.attlist ::= common.attrib releaseinfo.role.attrib local.releaseinfo.attrib ;
local.areaset.attrib ::= ε ;
trademark.role.attrib ::= role.attrib ;
guiicon.attlist ::= moreinfo.attrib common.attrib guiicon.role.attrib local.guiicon.attrib ;
footnoteref.attlist ::= linkendreq.attrib label.attrib common.attrib footnoteref.role.attrib local.footnoteref.attrib ;
varname.attlist ::= common.attrib varname.role.attrib local.varname.attrib ;
local.guimenu.attrib ::= ε ;
guibutton.role.attrib ::= role.attrib ;
local.firstname.attrib ::= ε ;
sect3info ::= sect3info::(sect3info.attlist info.class+) ;
refmiscinfo.attlist ::= (class::string())? common.attrib refmiscinfo.role.attrib local.refmiscinfo.attrib ;
bibliomisc.role.attrib ::= role.attrib ;
admon.mix ::= list.class | linespecific.class | synop.class | para.class | informal.class | formal.class | procedure | sidebar | anchor | bridgehead | remark | ndxterm.class | beginpage | local.admon.mix ;
msgsub.role.attrib ::= role.attrib ;
refname.role.attrib ::= role.attrib ;
msgsub.attlist ::= common.attrib msgsub.role.attrib local.msgsub.attrib ;
xref.role.attrib ::= role.attrib ;
local.docinfo.char.mix ::= φ ;
glossary.attlist ::= status.attrib common.attrib glossary.role.attrib local.glossary.attrib ;
msgexplan.attlist ::= common.attrib msgexplan.role.attrib local.msgexplan.attrib ;
local.refsynopsisdiv.attrib ::= ε ;
tabentry.mix ::= list.class | admon.class | linespecific.class | para.class | graphic | mediaobject | local.tabentry.mix ;
local.affiliation.attrib ::= ε ;
informalexample.role.attrib ::= role.attrib ;
local.common.attrib ::= ε ;
local.varname.attrib ::= ε ;
collabname.attlist ::= common.attrib collabname.role.attrib local.collabname.attrib ;
subtitle.attlist ::= common.attrib subtitle.role.attrib local.subtitle.attrib ;
bookinfo.attlist ::= (contents::string())? common.attrib bookinfo.role.attrib local.bookinfo.attrib ;
keycap.role.attrib ::= role.attrib ;
sectioninfo.role.attrib ::= role.attrib ;
local.beginpage.attrib ::= ε ;
collab.role.attrib ::= role.attrib ;
issuenum.role.attrib ::= role.attrib ;
local.anchor.attrib ::= ε ;
subscript.attlist ::= common.attrib ssscript.role.attrib local.ssscript.attrib ;
local.artpagenums.attrib ::= ε ;
local.jobtitle.attrib ::= ε ;
local.refsect2.attrib ::= ε ;
issn.attlist ::= common.attrib issn.role.attrib local.issn.attrib ;
local.section.attrib ::= ε ;
indexinfo.role.attrib ::= role.attrib ;
primary.attlist ::= (sortas::string())? common.attrib primsecter.role.attrib local.primsecter.attrib ;
local.ackno.attrib ::= ε ;
local.link.char.class ::= φ ;
quote.role.attrib ::= role.attrib ;
local.pubdate.attrib ::= ε ;
token.role.attrib ::= role.attrib ;
sect1info.attlist ::= common.attrib sect1info.role.attrib local.sect1info.attrib ;
docinfo.char.mix ::= string() | link.char.class | emphasis | trademark | replaceable | other.char.class | inlinegraphic | inlinemediaobject | ndxterm.class | local.docinfo.char.mix ;
toclevel4.role.attrib ::= role.attrib ;
synopfragmentref.attlist ::= linkendreq.attrib common.attrib synopfragmentref.role.attrib local.synopfragmentref.attrib ;
errorcode.role.attrib ::= role.attrib ;
local.ooclass.attrib ::= ε ;
itermset.role.attrib ::= role.attrib ;
refentryinfo.attlist ::= common.attrib refentryinfo.role.attrib local.refentryinfo.attrib ;
seeseealso.role.attrib ::= role.attrib ;
screenshot.role.attrib ::= role.attrib ;
bridgehead.attlist ::= (renderas::("other" | "sect1" | "sect2" | "sect3" | "sect4" | "sect5"))? common.attrib bridgehead.role.attrib local.bridgehead.attrib ;
local.initializer.attrib ::= ε ;
formal.class ::= equation | example | figure | table | local.formal.class ;
citation.attlist ::= common.attrib citation.role.attrib local.citation.attrib ;
local.qandaset.mix ::= φ ;
caption.attlist ::= common.attrib caption.role.attrib local.caption.attrib ;
linkend.attrib ::= (linkend::string())? ;
inlineequation.attlist ::= common.attrib inlineequation.role.attrib local.inlineequation.attrib ;
local.figure.mix ::= φ ;
confdates.role.attrib ::= role.attrib ;
local.publishername.attrib ::= ε ;
userinput.role.attrib ::= role.attrib ;
structname.attlist ::= common.attrib structname.role.attrib local.structname.attrib ;
para.attlist ::= common.attrib para.role.attrib local.para.attrib ;
userinput.attlist ::= moreinfo.attrib common.attrib userinput.role.attrib local.userinput.attrib ;
linespecific.class ::= literallayout | programlisting | programlistingco | screen | screenco | screenshot | local.linespecific.class ;
exceptionname.role.attrib ::= role.attrib ;
computeroutput.attlist ::= moreinfo.attrib common.attrib computeroutput.role.attrib local.computeroutput.attrib ;
keywordset.role.attrib ::= role.attrib ;
local.sect4.attrib ::= ε ;
function.attlist ::= moreinfo.attrib common.attrib function.role.attrib local.function.attrib ;
bookcomponent.title.content ::= title subtitle? titleabbrev? ;
modifier.attlist ::= common.attrib modifier.role.attrib local.modifier.attrib ;
local.guiicon.attrib ::= ε ;
cptr.char.mix ::= string() | link.char.class | tech.char.class | base.char.class | other.char.class | inlinegraphic | inlinemediaobject | ndxterm.class | beginpage | local.cptr.char.mix ;
local.seealsoie.attrib ::= ε ;
local.contrib.attrib ::= ε ;
local.classsynopsisinfo.attrib ::= ε ;
local.other.char.class ::= φ ;
local.othername.attrib ::= ε ;
local.indexterm.attrib ::= ε ;
local.symbol.attrib ::= ε ;
glossaryinfo.attlist ::= common.attrib glossaryinfo.role.attrib local.glossaryinfo.attrib ;
local.info.class ::= φ ;
local.sect5info.attrib ::= ε ;
refsect1info.attlist ::= common.attrib refsect1info.role.attrib local.refsect1info.attrib ;
colophon.role.attrib ::= role.attrib ;
wordasword.attlist ::= common.attrib wordasword.role.attrib local.wordasword.attrib ;
systemitem.attlist ::= (class::("constant" | "event" | "eventhandler" | "domainname" | "fqdomainname" | "ipaddress" | "netmask" | "etheraddress" | "groupname" | "library" | "macro" | "osname" | "filesystem" | "resource" | "systemname" | "username" | "newsgroup"))? moreinfo.attrib common.attrib systemitem.role.attrib local.systemitem.attrib ;
local.sidebarinfo.attrib ::= ε ;
jobtitle.role.attrib ::= role.attrib ;
local.classsynopsis.attrib ::= ε ;
local.ooexception.attrib ::= ε ;
classsynopsisinfo.attlist ::= linespecific.attrib common.attrib classsynopsisinfo.role.attrib local.classsynopsisinfo.attrib ;
local.list.class ::= φ ;
seealsoie.role.attrib ::= role.attrib ;
refsynopsisdivinfo.attlist ::= common.attrib refsynopsisdivinfo.role.attrib local.refsynopsisdivinfo.attrib ;
refentry.class ::= refentry | local.refentry.class ;
local.collab.attrib ::= ε ;
local.keycombo.attrib ::= ε ;
local.toclevel1.attrib ::= ε ;
listitem.attlist ::= (override::string())? common.attrib listitem.role.attrib local.listitem.attrib ;
local.exceptionname.attrib ::= ε ;
volumenum.role.attrib ::= role.attrib ;
local.sidebar.attrib ::= ε ;
sect4info ::= sect4info::(sect4info.attlist info.class+) ;
other.char.class ::= remark | subscript | superscript | local.other.char.class ;
local.sect2info.attrib ::= ε ;
local.funcprototype.attrib ::= ε ;
alt.role.attrib ::= role.attrib ;
local.otheraddr.attrib ::= ε ;
sect.title.content ::= title subtitle? titleabbrev? ;
local.footnote.mix ::= φ ;
local.para.mix ::= φ ;
refname.attlist ::= common.attrib refname.role.attrib local.refname.attrib ;
warning.attlist ::= common.attrib admon.role.attrib local.admon.attrib ;
local.ssscript.attrib ::= ε ;
contrib.attlist ::= common.attrib contrib.role.attrib local.contrib.attrib ;
literallayout.attlist ::= width.attrib linespecific.attrib (class::("monospaced" | "normal"))? common.attrib literallayout.role.attrib local.literallayout.attrib ;
subjectterm.attlist ::= common.attrib subjectterm.role.attrib local.subjectterm.attrib ;
local.procedure.attrib ::= ε ;
errorname.role.attrib ::= role.attrib ;
state.attlist ::= common.attrib state.role.attrib local.state.attrib ;
local.oointerface.attrib ::= ε ;
lineage.role.attrib ::= role.attrib ;
foreignphrase.attlist ::= common.attrib foreignphrase.role.attrib local.foreignphrase.attrib ;
destructorsynopsis.attlist ::= (language::string())? common.attrib destructorsynopsis.role.attrib local.destructorsynopsis.attrib ;
area.attlist ::= label.attrib linkends.attrib (units::("calspair" | "linecolumn" | "linerange" | "linecolumnpair" | "other"))? (otherunits::string())? coords::string() idreq.common.attrib area.role.attrib local.area.attrib ;
local.phrase.attrib ::= ε ;
tgroup.attlist ::= cols::string() tbl.tgroup.att (colsep::yesorno)? (rowsep::yesorno)? (align::("left" | "right" | "center" | "justify" | "char"))? (char::string())? (charoff::string())? secur ;
publishername.role.attrib ::= role.attrib ;
funcsynopsisinfo.role.attrib ::= role.attrib ;
imagedata.role.attrib ::= role.attrib ;
guisubmenu.role.attrib ::= role.attrib ;
local.modespec.attrib ::= ε ;
indexdiv.role.attrib ::= role.attrib ;
sect2info.role.attrib ::= role.attrib ;
remark.attlist ::= common.attrib remark.role.attrib local.remark.attrib ;
tbl.table.att ::= (tabstyle::string())? (tocentry::yesorno)? (shortentry::yesorno)? (orient::("port" | "land"))? (pgwide::yesorno)? ;
indexdiv.attlist ::= common.attrib indexdiv.role.attrib local.indexdiv.attrib ;
bibliodiv.attlist ::= status.attrib common.attrib bibliodiv.role.attrib local.bibliodiv.attrib ;
article.role.attrib ::= role.attrib ;
option.attlist ::= common.attrib option.role.attrib local.option.attrib ;
toclevel1.attlist ::= common.attrib toclevel1.role.attrib local.toclevel1.attrib ;
objectinfo.attlist ::= common.attrib objectinfo.role.attrib local.objectinfo.attrib ;
gen.char.class ::= abbrev | acronym | citation | citerefentry | citetitle | emphasis | firstterm | foreignphrase | glossterm | footnote | phrase | quote | trademark | wordasword | personname | local.gen.char.class ;
local.acronym.attrib ::= ε ;
initializer.role.attrib ::= role.attrib ;
structname.role.attrib ::= role.attrib ;
para.role.attrib ::= role.attrib ;
book.class ::= book | local.book.class ;
optional.attlist ::= common.attrib optional.role.attrib local.optional.attrib ;
personname.attlist ::= common.attrib personname.role.attrib local.personname.attrib ;
vendor.attrib ::= (vendor::string())? ;
local.keysym.attrib ::= ε ;
textdata.role.attrib ::= role.attrib ;
local.step.attrib ::= ε ;
local.bibliomset.attrib ::= ε ;
word.char.mix ::= string() | acronym | emphasis | trademark | link.char.class | base.char.class | other.char.class | inlinegraphic | inlinemediaobject | ndxterm.class | beginpage | local.word.char.mix ;
qandadiv.attlist ::= common.attrib qandadiv.role.attrib local.qandadiv.attrib ;
local.listitem.attrib ::= ε ;
sect2.role.attrib ::= role.attrib ;
calloutlist.role.attrib ::= role.attrib ;
varlistentry.role.attrib ::= role.attrib ;
glossseealso.attlist ::= (otherterm::string())? common.attrib glossseealso.role.attrib local.glossseealso.attrib ;
sect2.attlist ::= (renderas::("sect1" | "sect3" | "sect4" | "sect5"))? label.attrib status.attrib common.attrib sect2.role.attrib local.sect2.attrib ;
local.funcsynopsis.attrib ::= ε ;
equation.attlist ::= label.attrib common.attrib equation.role.attrib local.equation.attrib ;
local.citetitle.attrib ::= ε ;
local.imageobjectco.attrib ::= ε ;
os.attrib ::= (os::string())? ;
errortype.attlist ::= common.attrib errortype.role.attrib local.errortype.attrib ;
msgorig.attlist ::= common.attrib msgorig.role.attrib local.msgorig.attrib ;
highlights.role.attrib ::= role.attrib ;
mediaobject.mix ::= videoobject | audioobject | imageobject | textobject | local.mediaobject.mix ;
highlights.attlist ::= common.attrib highlights.role.attrib local.highlights.attrib ;
local.methodparam.attrib ::= ε ;
year.attlist ::= common.attrib year.role.attrib local.year.attrib ;
local.replaceable.attrib ::= ε ;
local.inlinegraphic.attrib ::= ε ;
errortext.role.attrib ::= role.attrib ;
conftitle.role.attrib ::= role.attrib ;
common.table.attribs ::= bodyatt secur ;
refnamediv.attlist ::= common.attrib refnamediv.role.attrib local.refnamediv.attrib ;
inlinegraphic.role.attrib ::= role.attrib ;
tocback.role.attrib ::= role.attrib ;
guimenuitem.role.attrib ::= role.attrib ;
revnumber.role.attrib ::= role.attrib ;
holder.role.attrib ::= role.attrib ;
inlinegraphic.attlist ::= graphics.attrib common.attrib inlinegraphic.role.attrib local.inlinegraphic.attrib ;
sect5info ::= sect5info::(sect5info.attlist info.class+) ;
tocback.attlist ::= label.attrib linkend.attrib pagenum.attrib common.attrib tocback.role.attrib local.tocback.attrib ;
local.firstterm.attrib ::= ε ;
pubdate.role.attrib ::= role.attrib ;
guibutton.attlist ::= moreinfo.attrib common.attrib guibutton.role.attrib local.guibutton.attrib ;
glosslist.role.attrib ::= role.attrib ;
local.type.attrib ::= ε ;
mediaobject.role.attrib ::= role.attrib ;
local.structfield.attrib ::= ε ;
local.appendix.class ::= φ ;
keysysm.role.attrib ::= role.attrib ;
synop.class ::= synopsis | cmdsynopsis | funcsynopsis | classsynopsis | fieldsynopsis | method.synop.class | local.synop.class ;
local.admon.attrib ::= ε ;
tbl.table-titles.mdl ::= titles ;
refsect2.role.attrib ::= role.attrib ;
member.role.attrib ::= role.attrib ;
firstterm.attlist ::= linkend.attrib common.attrib firstterm.role.attrib local.firstterm.attrib ;
ooclass.role.attrib ::= role.attrib ;
component.mix ::= list.class | admon.class | linespecific.class | synop.class | para.class | informal.class | formal.class | compound.class | genobj.class | descobj.class | ndxterm.class | beginpage | local.component.mix ;
variablelist.attlist ::= (termlength::string())? common.attrib variablelist.role.attrib local.variablelist.attrib ;
local.refinline.char.mix ::= φ ;
void.role.attrib ::= role.attrib ;
docinfo.char.class ::= author | authorinitials | corpauthor | modespec | othercredit | productname | productnumber | revhistory | local.docinfo.char.class ;
local.bibliographyinfo.attrib ::= ε ;
blockquote.role.attrib ::= role.attrib ;
blockquote.attlist ::= common.attrib blockquote.role.attrib local.blockquote.attrib ;
local.qandadiv.attrib ::= ε ;
issuenum.attlist ::= common.attrib issuenum.role.attrib local.issuenum.attrib ;
collab.attlist ::= common.attrib collab.role.attrib local.collab.attrib ;
classsynopsis.attlist ::= (language::string())? (class::("class" | "interface"))? common.attrib classsynopsis.role.attrib local.classsynopsis.attrib ;
glosssee.attlist ::= (otherterm::string())? common.attrib glosssee.role.attrib local.glosssee.attrib ;
local.msgorig.attrib ::= ε ;
filename.attlist ::= (class::("headerfile" | "partition" | "devicefile" | "libraryfile" | "directory" | "extension" | "symlink"))? (path::string())? moreinfo.attrib common.attrib filename.role.attrib local.filename.attrib ;
classname.role.attrib ::= role.attrib ;
street.role.attrib ::= role.attrib ;
remark.role.attrib ::= role.attrib ;
local.street.attrib ::= ε ;
emphasis.role.attrib ::= role.attrib ;
local.literal.attrib ::= ε ;
appendixinfo.role.attrib ::= role.attrib ;
local.revdescription.mix ::= φ ;
synopfragment.attlist ::= idreq.common.attrib synopfragment.role.attrib local.synopfragment.attrib ;
label.attlist ::= common.attrib label.role.attrib local.label.attrib ;
affiliation.attlist ::= common.attrib affiliation.role.attrib local.affiliation.attrib ;
epigraph.attlist ::= common.attrib epigraph.role.attrib local.epigraph.attrib ;
tertiaryie.attlist ::= linkends.attrib common.attrib primsecterie.role.attrib local.primsecterie.attrib ;
local.textdata.attrib ::= ε ;
itermset.attlist ::= common.attrib itermset.role.attrib local.itermset.attrib ;
olink.role.attrib ::= role.attrib ;
graphic.attlist ::= graphics.attrib common.attrib graphic.role.attrib local.graphic.attrib ;
prompt.role.attrib ::= role.attrib ;
local.answer.attrib ::= ε ;
optional.role.attrib ::= role.attrib ;
revremark.attlist ::= common.attrib revremark.role.attrib local.revremark.attrib ;
personname.role.attrib ::= role.attrib ;
local.partinfo.attrib ::= ε ;
local.othercredit.attrib ::= ε ;
indexentry.attlist ::= common.attrib indexentry.role.attrib local.indexentry.attrib ;
local.inlineequation.attrib ::= ε ;
confgroup.attlist ::= common.attrib confgroup.role.attrib local.confgroup.attrib ;
primsecter.role.attrib ::= role.attrib ;
glossdef.mix ::= list.class | linespecific.class | synop.class | para.class | informal.class | formal.class | remark | ndxterm.class | beginpage | local.glossdef.mix ;
glossseealso.role.attrib ::= role.attrib ;
calloutlist.attlist ::= common.attrib calloutlist.role.attrib local.calloutlist.attrib ;
refsect3info.role.attrib ::= role.attrib ;
refsect3 ::= refsect3::(refsect3.attlist refsect3info? refsect.title.content refcomponent.mix+) ;
step.attlist ::= (performance::("optional" | "required"))? common.attrib step.role.attrib local.step.attrib ;
refsect2 ::= refsect2::(refsect2.attlist refsect2info? refsect.title.content (refcomponent.mix+ refsect3*) | (refsect3+)) ;
refsect1 ::= refsect1::(refsect1.attlist refsect1info? refsect.title.content (refcomponent.mix+ refsect2*) | (refsect2+)) ;
shortcut.role.attrib ::= role.attrib ;
shortaffil.attlist ::= common.attrib shortaffil.role.attrib local.shortaffil.attrib ;
moreinfo.attrib ::= (moreinfo::("refentry" | "none"))? ;
partcontent.mix ::= appendix.class | chapter.class | nav.class | article.class | preface | refentry.class | reference | local.partcontent.mix ;
glossdef.role.attrib ::= role.attrib ;
local.mediaobject.mix ::= φ ;
local.constructorsynopsis.attrib ::= ε ;
msgmain.attlist ::= common.attrib msgmain.role.attrib local.msgmain.attrib ;
anchor.role.attrib ::= role.attrib ;
contractnum.role.attrib ::= role.attrib ;
local.varlistentry.attrib ::= ε ;
local.authorgroup.attrib ::= ε ;
varname.role.attrib ::= role.attrib ;
local.formalpara.attrib ::= ε ;
listitem.role.attrib ::= role.attrib ;
segmentedlist.attlist ::= common.attrib segmentedlist.role.attrib local.segmentedlist.attrib ;
subject.role.attrib ::= role.attrib ;
manvolnum.attlist ::= common.attrib namvolnum.role.attrib local.manvolnum.attrib ;
parameter.attlist ::= (class::("command" | "function" | "option"))? moreinfo.attrib common.attrib parameter.role.attrib local.parameter.attrib ;
glossentry.attlist ::= (sortas::string())? common.attrib glossentry.role.attrib local.glossentry.attrib ;
local.sbr.attrib ::= ε ;
idreq.attrib ::= id::string() ;
bibliomixed.attlist ::= common.attrib bibliomixed.role.attrib local.bibliomixed.attrib ;
articleinfo.attlist ::= common.attrib articleinfo.role.attrib local.articleinfo.attrib ;
tbl.row.mdl ::= (entry | entrytbl)+ ;
local.revnumber.attrib ::= ε ;
local.notation.class ::= φ ;
local.msgtext.attrib ::= ε ;
refsect1.attlist ::= status.attrib common.attrib refsect1.role.attrib local.refsect1.attrib ;
state.role.attrib ::= role.attrib ;
local.simplelist.attrib ::= ε ;
postcode.role.attrib ::= role.attrib ;
bibliomset.role.attrib ::= role.attrib ;
sidebarinfo.role.attrib ::= role.attrib ;
seglistitem.role.attrib ::= role.attrib ;
local.prompt.attrib ::= ε ;
local.admon.class ::= φ ;
sect2info.attlist ::= common.attrib sect2info.role.attrib local.sect2info.attrib ;
quote.attlist ::= common.attrib quote.role.attrib local.quote.attrib ;
toclevel5.role.attrib ::= role.attrib ;
local.ulink.attrib ::= ε ;
local.trademark.attrib ::= ε ;
local.screen.attrib ::= ε ;
toclevel2.attlist ::= common.attrib toclevel2.role.attrib local.toclevel2.attrib ;
affiliation.role.attrib ::= role.attrib ;
epigraph.role.attrib ::= role.attrib ;
local.msgentry.attrib ::= ε ;
local.primsecterie.attrib ::= ε ;
bibliorelation.type.attrib ::= (type::("isversionof" | "hasversion" | "isreplacedby" | "replaces" | "isrequiredby" | "requires" | "ispartof" | "haspart" | "isreferencedby" | "references" | "isformatof" | "hasformat" | "othertype" | local.bibliorelation.types))? (othertype::string())? ;
local.interface.attrib ::= ε ;
local.article.class ::= φ ;
local.link.attrib ::= ε ;
question.role.attrib ::= role.attrib ;
local.confnum.attrib ::= ε ;
security.attrib ::= (security::string())? ;
indexentry.role.attrib ::= role.attrib ;
set.attlist ::= (fpi::string())? status.attrib common.attrib set.role.attrib local.set.attrib ;
modespec.role.attrib ::= role.attrib ;
section.class ::= section | local.section.class ;
local.substeps.attrib ::= ε ;
local.objectdata.attrib ::= ε ;
imageobject.attlist ::= common.attrib imageobject.role.attrib local.imageobject.attrib ;
oointerface.attlist ::= common.attrib oointerface.role.attrib local.oointerface.attrib ;
title.attlist ::= pagenum.attrib common.attrib title.role.attrib local.title.attrib ;
local.toclevel4.attrib ::= ε ;
lot.attlist ::= label.attrib common.attrib lot.role.attrib local.lot.attrib ;
sect3.attlist ::= (renderas::("sect1" | "sect2" | "sect4" | "sect5"))? label.attrib status.attrib common.attrib sect3.role.attrib local.sect3.attrib ;
keycode.role.attrib ::= role.attrib ;
local.fax.attrib ::= ε ;
varlistentry.attlist ::= common.attrib varlistentry.role.attrib local.varlistentry.attrib ;
local.function.attrib ::= ε ;
local.divcomponent.mix ::= φ ;
biblioset.attlist ::= (relation::string())? common.attrib biblioset.role.attrib local.biblioset.attrib ;
printhistory.role.attrib ::= role.attrib ;
refsect2info.attlist ::= common.attrib refsect2info.role.attrib local.refsect2info.attrib ;
structfield.role.attrib ::= role.attrib ;
systemitem.role.attrib ::= role.attrib ;
qandaset.mix ::= list.class | admon.class | linespecific.class | synop.class | para.class | informal.class | formal.class | procedure | genobj.class | ndxterm.class | local.qandaset.mix ;
local.olink.attrib ::= ε ;
answer.role.attrib ::= role.attrib ;
local.partcontent.mix ::= φ ;
inlineobj.char.class ::= inlinegraphic | inlinemediaobject | inlineequation | local.inlineobj.char.class ;
local.descobj.class ::= φ ;
beginpage.role.attrib ::= role.attrib ;
firstname.attlist ::= common.attrib firstname.role.attrib local.firstname.attrib ;
simpara.role.attrib ::= role.attrib ;
mark.attrib ::= (mark::string())? local.mark.attrib ;
effectivity.attrib ::= arch.attrib condition.attrib conformance.attrib os.attrib revision.attrib security.attrib userlevel.attrib vendor.attrib local.effectivity.attrib ;
footnoteref.role.attrib ::= role.attrib ;
local.country.attrib ::= ε ;
local.revhistory.attrib ::= ε ;
segmentedlist.role.attrib ::= role.attrib ;
date.role.attrib ::= role.attrib ;
local.synopfragment.attrib ::= ε ;
authorblurb.attlist ::= common.attrib authorblurb.role.attrib local.authorblurb.attrib ;
smallcptr.char.mix ::= string() | replaceable | inlinegraphic | inlinemediaobject | ndxterm.class | beginpage | local.smallcptr.char.mix ;
local.chapterinfo.attrib ::= ε ;
guimenuitem.attlist ::= moreinfo.attrib common.attrib guimenuitem.role.attrib local.guimenuitem.attrib ;
volumenum.attlist ::= common.attrib volumenum.role.attrib local.volumenum.attrib ;
tocentry.attlist ::= linkend.attrib pagenum.attrib common.attrib tocentry.role.attrib local.tocentry.attrib ;
divcomponent.mix ::= list.class | admon.class | linespecific.class | synop.class | para.class | informal.class | formal.class | compound.class | genobj.class | descobj.class | ndxterm.class | beginpage | forms.hook | local.divcomponent.mix ;
qandaset.attlist ::= (defaultlabel::("qanda" | "number" | "none"))? common.attrib qandaset.role.attrib local.qandaset.attrib ;
local.biblioset.attrib ::= ε ;
local.shortcut.attrib ::= ε ;
local.volumenum.attrib ::= ε ;
biblioentry.role.attrib ::= role.attrib ;
local.shortaffil.attrib ::= ε ;
xref.attlist ::= (endterm::string())? linkendreq.attrib common.attrib xref.role.attrib local.xref.attrib ;
local.sect2.attrib ::= ε ;
tbody.attlist ::= (valign::("top" | "middle" | "bottom"))? secur ;
local.seg.attrib ::= ε ;
formalobject.title.content ::= title titleabbrev? ;
local.qandaentry.attrib ::= ε ;
local.subtitle.attrib ::= ε ;
refsynopsisdiv.attlist ::= common.attrib refsynopsisdiv.role.attrib local.refsynopsisdiv.attrib ;
superscript.attlist ::= common.attrib ssscript.role.attrib local.ssscript.attrib ;
otheraddr.attlist ::= common.attrib otheraddr.role.attrib local.otheraddr.attrib ;
revisionflag.attrib ::= (revisionflag::("changed" | "added" | "deleted" | "off"))? ;
local.para.char.mix ::= φ ;
footnote.mix ::= list.class | linespecific.class | synop.class | para.class | informal.class | local.footnote.mix ;
glossterm.role.attrib ::= role.attrib ;
confsponsor.role.attrib ::= role.attrib ;
sidebar.mix ::= list.class | admon.class | linespecific.class | synop.class | para.class | informal.class | formal.class | procedure | genobj.class | ndxterm.class | beginpage | local.sidebar.mix ;
refsect1info ::= refsect1info::(refsect1info.attlist info.class+) ;
local.postcode.attrib ::= ε ;
simplesect.attlist ::= common.attrib simplesect.role.attrib local.simplesect.attrib ;
tbl.hdft.mdl ::= colspec* row+ ;
co.role.attrib ::= role.attrib ;
term.role.attrib ::= role.attrib ;
example.role.attrib ::= role.attrib ;
local.authorinitials.attrib ::= ε ;
inlinemediaobject.attlist ::= common.attrib inlinemediaobject.role.attrib local.inlinemediaobject.attrib ;
substeps.role.attrib ::= role.attrib ;
book.attlist ::= (fpi::string())? label.attrib status.attrib common.attrib book.role.attrib local.book.attrib ;
section.attlist ::= label.attrib status.attrib common.attrib section.role.attrib local.section.attrib ;
local.systemitem.attrib ::= ε ;
local.example.attrib ::= ε ;
modespec.attlist ::= (application::notation.class)? common.attrib modespec.role.attrib local.modespec.attrib ;
screenco.attlist ::= common.attrib screenco.role.attrib local.screenco.attrib ;
local.label.attrib ::= ε ;
sect3.role.attrib ::= role.attrib ;
legalnotice.attlist ::= common.attrib legalnotice.role.attrib local.legalnotice.attrib ;
methodparam.role.attrib ::= role.attrib ;
funcparams.role.attrib ::= role.attrib ;
local.paramdef.attrib ::= ε ;
contractsponsor.attlist ::= common.attrib contractsponsor.role.attrib local.contractsponsor.attrib ;
areaspec.attlist ::= (units::("calspair" | "linecolumn" | "linerange" | "linecolumnpair" | "other"))? (otherunits::string())? common.attrib areaspec.role.attrib local.areaspec.attrib ;
local.refdescriptor.attrib ::= ε ;
chapter.class ::= chapter | local.chapter.class ;
errortype.role.attrib ::= role.attrib ;
msgorig.role.attrib ::= role.attrib ;
local.indexdiv.attrib ::= ε ;
local.book.class ::= φ ;
local.optional.attrib ::= ε ;
funcdef.attlist ::= common.attrib funcdef.role.attrib local.funcdef.attrib ;
local.screenshot.attrib ::= ε ;
answer.attlist ::= common.attrib answer.role.attrib local.answer.attrib ;
blockinfo.role.attrib ::= role.attrib ;
jobtitle.attlist ::= common.attrib jobtitle.role.attrib local.jobtitle.attrib ;
local.refsect1info.attrib ::= ε ;
local.tocentry.attrib ::= ε ;
corpauthor.role.attrib ::= role.attrib ;
local.textobject.attrib ::= ε ;
local.term.attrib ::= ε ;
guiicon.role.attrib ::= role.attrib ;
subjectset.attlist ::= (scheme::string())? common.attrib subjectset.role.attrib local.subjectset.attrib ;
authorblurb.role.attrib ::= role.attrib ;
literal.role.attrib ::= role.attrib ;
seeie.role.attrib ::= role.attrib ;
setindex.attlist ::= common.attrib indexes.role.attrib local.indexes.attrib ;
local.property.attrib ::= ε ;
literal.attlist ::= moreinfo.attrib common.attrib literal.role.attrib local.literal.attrib ;
seeie.attlist ::= linkend.attrib common.attrib seeie.role.attrib local.seeie.attrib ;
date.attlist ::= common.attrib date.role.attrib local.date.attrib ;
revnumber.attlist ::= common.attrib revnumber.role.attrib local.revnumber.attrib ;
holder.attlist ::= common.attrib holder.role.attrib local.holder.attrib ;
markup.role.attrib ::= role.attrib ;
coref.role.attrib ::= role.attrib ;
seriesvolnums.attlist ::= common.attrib seriesvolnums.role.attrib local.seriesvolnums.attrib ;
videodata.attlist ::= (width::string())? (contentwidth::string())? (depth::string())? (contentdepth::string())? (align::("left" | "right" | "center"))? (valign::("top" | "middle" | "bottom"))? (scale::string())? (scalefit::yesorno.attvals)? objectdata.attrib common.attrib videodata.role.attrib local.videodata.attrib ;
msglevel.attlist ::= common.attrib msglevel.role.attrib local.msglevel.attrib ;
refsect3.role.attrib ::= role.attrib ;
guimenu.role.attrib ::= role.attrib ;
local.chapter.attrib ::= ε ;
refsect2.attlist ::= status.attrib common.attrib refsect2.role.attrib local.refsect2.attrib ;
local.mediaobjectco.attrib ::= ε ;
guilabel.attlist ::= moreinfo.attrib common.attrib guilabel.role.attrib local.guilabel.attrib ;
local.state.attrib ::= ε ;
country.attlist ::= common.attrib country.role.attrib local.country.attrib ;
audioobject.attlist ::= common.attrib audioobject.role.attrib local.audioobject.attrib ;
method.synop.class ::= constructorsynopsis | destructorsynopsis | methodsynopsis | local.method.synop.class ;
synopsis.attlist ::= label.attrib linespecific.attrib common.attrib synopsis.role.attrib local.synopsis.attrib ;
secondaryie.attlist ::= linkends.attrib common.attrib primsecterie.role.attrib local.primsecterie.attrib ;
orderedlist.role.attrib ::= role.attrib ;
postcode.attlist ::= common.attrib postcode.role.attrib local.postcode.attrib ;
informal.class ::= address | blockquote | graphic | graphicco | mediaobject | mediaobjectco | informalequation | informalexample | informalfigure | informaltable | local.informal.class ;
lineage.attlist ::= common.attrib lineage.role.attrib local.lineage.attrib ;
local.refcomponent.mix ::= φ ;
local.abbrev.attrib ::= ε ;
attribution.role.attrib ::= role.attrib ;
sect3info.role.attrib ::= role.attrib ;
attribution.attlist ::= common.attrib attribution.role.attrib local.attribution.attrib ;
chapterinfo.role.attrib ::= role.attrib ;
titleabbrev.role.attrib ::= role.attrib ;
emphasis.attlist ::= common.attrib emphasis.role.attrib local.emphasis.attrib ;
revdescription.role.attrib ::= role.attrib ;
local.tocback.attrib ::= ε ;
refsect2info ::= refsect2info::(refsect2info.attlist info.class+) ;
local.methodname.attrib ::= ε ;
toclevel3.attlist ::= common.attrib toclevel3.role.attrib local.toclevel3.attrib ;
div.title.content ::= title subtitle? titleabbrev? ;
programlistingco.role.attrib ::= role.attrib ;
hardware.role.attrib ::= role.attrib ;
local.set.attrib ::= ε ;
refcomponent.mix ::= list.class | admon.class | linespecific.class | synop.class | para.class | informal.class | formal.class | compound.class | genobj.class | descobj.class | ndxterm.class | beginpage | local.refcomponent.mix ;
bibliography.attlist ::= status.attrib common.attrib bibliography.role.attrib local.bibliography.attrib ;
funcprototype.role.attrib ::= role.attrib ;
local.wordasword.attrib ::= ε ;
common.attrib ::= id.attrib lang.attrib remap.attrib xreflabel.attrib revisionflag.attrib effectivity.attrib local.common.attrib ;
exceptionname.attlist ::= common.attrib exceptionname.role.attrib local.exceptionname.attrib ;
partintro.attlist ::= label.attrib common.attrib partintro.role.attrib local.partintro.attrib ;
local.contractnum.attrib ::= ε ;
graphicco.attlist ::= common.attrib graphicco.role.attrib local.graphicco.attrib ;
lot.role.attrib ::= role.attrib ;
see.attlist ::= common.attrib seeseealso.role.attrib local.seeseealso.attrib ;
local.partintro.attrib ::= ε ;
sect4.attlist ::= (renderas::("sect1" | "sect2" | "sect3" | "sect5"))? label.attrib status.attrib common.attrib sect4.role.attrib local.sect4.attrib ;
local.bibliorelation.types ::= φ ;
simplelist.attlist ::= (columns::string())? (type::("inline" | "vert" | "horiz"))? common.attrib simplelist.role.attrib local.simplelist.attrib ;
local.surname.attrib ::= ε ;
local.simplesect.attrib ::= ε ;
local.quote.attrib ::= ε ;
base.char.class ::= anchor | local.base.char.class ;
glossdiv.role.attrib ::= role.attrib ;
local.audiodata.attrib ::= ε ;
textobject.mix ::= list.class | admon.class | linespecific.class | para.class | blockquote | local.textobject.mix ;
toc.attlist ::= pagenum.attrib common.attrib toc.role.attrib local.toc.attrib ;
local.glossary.attrib ::= ε ;
returnvalue.attlist ::= common.attrib returnvalue.role.attrib local.returnvalue.attrib ;
itemizedlist.attlist ::= (spacing::("normal" | "compact"))? mark.attrib common.attrib itemizedlist.role.attrib local.itemizedlist.attrib ;
local.guimenuitem.attrib ::= ε ;
local.filename.attrib ::= ε ;
local.markup.attrib ::= ε ;
releaseinfo.role.attrib ::= role.attrib ;
tbl.entry.mdl ::= para.char.mix | tabentry.mix ;
informalfigure.attlist ::= (float::yesorno.attvals)? (pgwide::yesorno.attvals)? label.attrib common.attrib informalfigure.role.attrib local.informalfigure.attrib ;
refnamediv.role.attrib ::= role.attrib ;
local.informalexample.attrib ::= ε ;
tbl.tgroup.mdl ::= colspec* spanspec* thead? tfoot? tbody ;
subject.attlist ::= (weight::string())? common.attrib subject.role.attrib local.subject.attrib ;
pubdate.attlist ::= common.attrib pubdate.role.attrib local.pubdate.attrib ;
artpagenums.role.attrib ::= role.attrib ;
width.attrib ::= (width::string())? ;
email.role.attrib ::= role.attrib ;
artpagenums.attlist ::= common.attrib artpagenums.role.attrib local.artpagenums.attrib ;
local.synop.class ::= φ ;
local.colophon.attrib ::= ε ;
local.prefaceinfo.attrib ::= ε ;
symbol.role.attrib ::= role.attrib ;
mousebutton.role.attrib ::= role.attrib ;
local.mousebutton.attrib ::= ε ;
biblioid.attlist ::= biblio.class.attrib common.attrib biblioid.role.attrib local.biblioid.attrib ;
bibliomset.attlist ::= (relation::string())? common.attrib bibliomset.role.attrib local.bibliomset.attrib ;
local.sect3info.attrib ::= ε ;
issn.role.attrib ::= role.attrib ;
example.mix ::= list.class | linespecific.class | synop.class | para.class | informal.class | ndxterm.class | beginpage | local.example.mix ;
otheraddr.role.attrib ::= role.attrib ;
sbr.attlist ::= common.attrib sbr.role.attrib local.sbr.attrib ;
local.figure.attrib ::= ε ;
sect3info.attlist ::= common.attrib sect3info.role.attrib local.sect3info.attrib ;
local.glosssee.attrib ::= ε ;
msgrel.role.attrib ::= role.attrib ;
informaltable.attlist ::= (frame::("top" | "bottom" | "topbot" | "all" | "sides" | "none"))? (colsep::yesorno.attvals)? (rowsep::yesorno.attvals)? common.table.attribs tbl.table.att local.informaltable.attrib ;
refsect3info ::= refsect3info::(refsect3info.attlist info.class+) ;
token.attlist ::= common.attrib token.role.attrib local.token.attrib ;
productnumber.attlist ::= common.attrib productnumber.role.attrib local.productnumber.attrib ;
qandaentry.attlist ::= common.attrib qandaentry.role.attrib local.qandaentry.attrib ;
isbn.attlist ::= common.attrib isbn.role.attrib local.isbn.attrib ;
local.errortext.attrib ::= ε ;
local.arg.attrib ::= ε ;
part.attlist ::= label.attrib status.attrib common.attrib part.role.attrib local.part.attrib ;
refsection.attlist ::= status.attrib common.attrib refsection.role.attrib local.refsection.attrib ;
local.synopfragmentref.attrib ::= ε ;
accel.attlist ::= common.attrib accel.role.attrib local.accel.attrib ;
inlineequation.role.attrib ::= role.attrib ;
local.refsect3.attrib ::= ε ;
revremark.role.attrib ::= role.attrib ;
set.role.attrib ::= role.attrib ;
local.remark.attrib ::= ε ;
local.sgmltag.attrib ::= ε ;
pubsnumber.role.attrib ::= role.attrib ;
local.inlineobj.char.class ::= φ ;
tfoot.attlist ::= (valign::("top" | "middle" | "bottom"))? secur ;
setindexinfo.role.attrib ::= role.attrib ;
tocfront.attlist ::= label.attrib linkend.attrib pagenum.attrib common.attrib tocfront.role.attrib local.tocfront.attrib ;
pubsnumber.attlist ::= common.attrib pubsnumber.role.attrib local.pubsnumber.attrib ;
sidebar.role.attrib ::= role.attrib ;
funcprototype.attlist ::= common.attrib funcprototype.role.attrib local.funcprototype.attrib ;
local.bridgehead.attrib ::= ε ;
arg.role.attrib ::= role.attrib ;
keywordset.attlist ::= common.attrib keywordset.role.attrib local.keywordset.attrib ;
local.objectinfo.attrib ::= ε ;
property.attlist ::= moreinfo.attrib common.attrib property.role.attrib local.property.attrib ;
legalnotice.role.attrib ::= role.attrib ;
local.confsponsor.attrib ::= ε ;
local.article.attrib ::= ε ;
simplelist.role.attrib ::= role.attrib ;
mediaobjectco.role.attrib ::= role.attrib ;
mediaobjectco.attlist ::= common.attrib mediaobjectco.role.attrib local.mediaobjectco.attrib ;
local.appendixinfo.attrib ::= ε ;
keycode.attlist ::= common.attrib keycode.role.attrib local.keycode.attrib ;
refsect3info.attlist ::= common.attrib refsect3info.role.attrib local.refsect3info.attrib ;
copyright.role.attrib ::= role.attrib ;
local.base.char.class ::= φ ;
imageobjectco.role.attrib ::= role.attrib ;
sgmltag.attlist ::= (class::("attribute" | "attvalue" | "element" | "endtag" | "emptytag" | "genentity" | "numcharref" | "paramentity" | "pi" | "xmlpi" | "starttag" | "sgmlcomment"))? common.attrib sgmltag.role.attrib local.sgmltag.attrib ;
local.year.attrib ::= ε ;
funcdef.role.attrib ::= role.attrib ;
xref.char.class ::= footnoteref | xref | local.xref.char.class ;
local.contractsponsor.attrib ::= ε ;
authorinitials.role.attrib ::= role.attrib ;
phrase.role.attrib ::= role.attrib ;
glossdef.attlist ::= (subject::string())? common.attrib glossdef.role.attrib local.glossdef.attrib ;
dedication.attlist ::= status.attrib common.attrib dedication.role.attrib local.dedication.attrib ;
local.sect5.attrib ::= ε ;
local.funcdef.attrib ::= ε ;
alt.attlist ::= common.attrib alt.role.attrib local.alt.attrib ;
personblurb.attlist ::= common.attrib personblurb.role.attrib local.personblurb.attrib ;
compound.class ::= msgset | procedure | sidebar | qandaset | ebnf.block.hook | local.compound.class ;
local.segtitle.attrib ::= ε ;
informalequation.attlist ::= common.attrib informalequation.role.attrib local.informalequation.attrib ;
othername.role.attrib ::= role.attrib ;
refsect3.attlist ::= status.attrib common.attrib refsect3.role.attrib local.refsect3.attrib ;
local.refentry.class ::= φ ;
refmeta.role.attrib ::= role.attrib ;
member.attlist ::= common.attrib member.role.attrib local.member.attrib ;
local.sectioninfo.attrib ::= ε ;
local.toclevel2.attrib ::= ε ;
bibliosource.attlist ::= biblio.class.attrib common.attrib bibliosource.role.attrib local.bibliosource.attrib ;
msgaud.role.attrib ::= role.attrib ;
replaceable.role.attrib ::= role.attrib ;
msgentry.attlist ::= common.attrib msgentry.role.attrib local.msgentry.attrib ;
msgaud.attlist ::= common.attrib msgaud.role.attrib local.msgaud.attrib ;
author.role.attrib ::= role.attrib ;
ackno.role.attrib ::= role.attrib ;
local.member.attrib ::= ε ;
local.interfacename.attrib ::= ε ;
local.refentry.attrib ::= ε ;
varargs.attlist ::= common.attrib varargs.role.attrib local.varargs.attrib ;
indexes.role.attrib ::= role.attrib ;
local.keyword.attrib ::= ε ;
audiodata.attlist ::= objectdata.attrib common.attrib audiodata.role.attrib local.audiodata.attrib ;
database.role.attrib ::= role.attrib ;
tbl.table-main.mdl ::= (tgroup+) | (graphic+) ;
link.role.attrib ::= role.attrib ;
productname.role.attrib ::= role.attrib ;
para.mix ::= list.class | admon.class | linespecific.class | informal.class | formal.class | local.para.mix ;
local.calloutlist.attrib ::= ε ;
referenceinfo.role.attrib ::= role.attrib ;
local.author.attrib ::= ε ;
option.role.attrib ::= role.attrib ;
toclevel4.attlist ::= common.attrib toclevel4.role.attrib local.toclevel4.attrib ;
toclevel1.role.attrib ::= role.attrib ;
local.issuenum.attrib ::= ε ;
label.role.attrib ::= role.attrib ;
methodsynopsis.attlist ::= (language::string())? common.attrib methodsynopsis.role.attrib local.methodsynopsis.attrib ;
primsecterie.role.attrib ::= role.attrib ;
orgname.role.attrib ::= role.attrib ;
role.attrib ::= (role::string())? ;
orgname.attlist ::= common.attrib (class::("corporation" | "nonprofit" | "consortium" | "informal" | "other"))? (otherclass::string())? orgname.role.attrib local.orgname.attrib ;
methodname.role.attrib ::= role.attrib ;
city.role.attrib ::= role.attrib ;
co.attlist ::= label.attrib linkends.attrib idreq.common.attrib co.role.attrib local.co.attrib ;
term.attlist ::= common.attrib term.role.attrib local.term.attrib ;
local.guilabel.attrib ::= ε ;
caption.role.attrib ::= role.attrib ;
local.classname.attrib ::= ε ;
tech.char.class ::= action | application | classname | methodname | interfacename | exceptionname | ooclass | oointerface | ooexception | command | computeroutput | database | email | envar | errorcode | errorname | errortype | errortext | filename | function | guibutton | guiicon | guilabel | guimenu | guimenuitem | guisubmenu | hardware | interface | keycap | keycode | keycombo | keysym | literal | constant | markup | medialabel | menuchoice | mousebutton | option | optional | parameter | prompt | property | replaceable | returnvalue | sgmltag | structfield | structname | symbol | systemitem | token | type | userinput | varname | ebnf.inline.hook | local.tech.char.class ;
local.msgsub.attrib ::= ε ;
local.ndxterm.class ::= φ ;
envar.role.attrib ::= role.attrib ;
setindexinfo.attlist ::= common.attrib setindexinfo.role.attrib local.setindexinfo.attrib ;
local.callout.attrib ::= ε ;
sect4.role.attrib ::= role.attrib ;
thead.attlist ::= (valign::("top" | "middle" | "bottom"))? secur ;
local.productnumber.attrib ::= ε ;
sect5.attlist ::= (renderas::("sect1" | "sect2" | "sect3" | "sect4"))? label.attrib status.attrib common.attrib sect5.role.attrib local.sect5.attrib ;
local.refnamediv.attrib ::= ε ;
local.videoobject.attrib ::= ε ;
local.gen.char.class ::= φ ;
chapter.role.attrib ::= role.attrib ;
methodparam.attlist ::= (choice::("opt" | "req" | "plain"))? (rep::("norepeat" | "repeat"))? common.attrib methodparam.role.attrib local.methodparam.attrib ;
wordasword.role.attrib ::= role.attrib ;
returnvalue.role.attrib ::= role.attrib ;
itemizedlist.role.attrib ::= role.attrib ;
edition.role.attrib ::= role.attrib ;
msgset.attlist ::= common.attrib msgset.role.attrib local.msgset.attrib ;
local.xref.char.class ::= φ ;
tocpart.role.attrib ::= role.attrib ;
local.mark.attrib ::= ε ;
action.attlist ::= moreinfo.attrib common.attrib action.role.attrib local.action.attrib ;
local.date.attrib ::= ε ;
local.errorcode.attrib ::= ε ;
corpname.attlist ::= common.attrib corpname.role.attrib local.corpname.attrib ;
local.epigraph.attrib ::= ε ;
label.attrib ::= (label::string())? ;
local.status.attrib ::= ε ;
tbl.entrytbl.mdl ::= colspec* spanspec* thead? tbody ;
local.refentrytitle.attrib ::= ε ;
callout.attlist ::= arearefs::string() common.attrib callout.role.attrib local.callout.attrib ;
textobject.role.attrib ::= role.attrib ;
local.email.attrib ::= ε ;
refpurpose.role.attrib ::= role.attrib ;
condition.attrib ::= (condition::string())? ;
id.attrib ::= (id::string())? ;
local.emphasis.attrib ::= ε ;
articleinfo.role.attrib ::= role.attrib ;
bibliomixed.role.attrib ::= role.attrib ;
local.copyright.attrib ::= ε ;
informalequation.role.attrib ::= role.attrib ;
segtitle.attlist ::= common.attrib segtitle.role.attrib local.segtitle.attrib ;
local.tocfront.attrib ::= ε ;
yesorno.attvals ::= string() ;
local.reference.attrib ::= ε ;
local.orderedlist.attrib ::= ε ;
biblioentry.attlist ::= common.attrib biblioentry.role.attrib local.biblioentry.attrib ;
bookinfo.role.attrib ::= role.attrib ;
citerefentry.attlist ::= common.attrib citerefentry.role.attrib local.citerefentry.attrib ;
local.address.attrib ::= ε ;
local.informaltable.attrib ::= ε ;
setinfo.attlist ::= (contents::string())? common.attrib setinfo.role.attrib local.setinfo.attrib ;
replaceable.attlist ::= (class::("command" | "function" | "option" | "parameter"))? common.attrib replaceable.role.attrib local.replaceable.attrib ;
othercredit.role.attrib ::= role.attrib ;
sidebarinfo.attlist ::= common.attrib sidebarinfo.role.attrib local.sidebarinfo.attrib ;
keysym.attlist ::= common.attrib keysysm.role.attrib local.keysym.attrib ;
local.computeroutput.attrib ::= ε ;
local.msgset.attrib ::= ε ;
audiodata.role.attrib ::= role.attrib ;
local.invpartnumber.attrib ::= ε ;
videoobject.role.attrib ::= role.attrib ;
refentrytitle.role.attrib ::= role.attrib ;
local.fieldsynopsis.attrib ::= ε ;
refclass.char.mix ::= string() | application | local.refclass.char.mix ;
local.msginfo.attrib ::= ε ;
lang.attrib ::= (lang::string())? ;
local.sidebar.mix ::= φ ;
address.attlist ::= linespecific.attrib common.attrib address.role.attrib local.address.attrib ;
local.keycap.attrib ::= ε ;
phone.role.attrib ::= role.attrib ;
local.isbn.attrib ::= ε ;
programlistingco.attlist ::= common.attrib programlistingco.role.attrib local.programlistingco.attrib ;
local.msgrel.attrib ::= ε ;
keyword.role.attrib ::= role.attrib ;
local.group.attrib ::= ε ;
citation.role.attrib ::= role.attrib ;
olink.attlist ::= (targetdocent::string())? (linkmode::string())? (localinfo::string())? (type::string())? (targetdoc::string())? (targetptr::string())? common.attrib olink.role.attrib local.olink.attrib ;
local.bibliocoverage.attrib ::= ε ;
bibliography.role.attrib ::= role.attrib ;
local.programlisting.attrib ::= ε ;
local.tech.char.class ::= φ ;
tocfront.role.attrib ::= role.attrib ;
confnum.attlist ::= common.attrib confnum.role.attrib local.confnum.attrib ;
local.lineannotation.attrib ::= ε ;
envar.attlist ::= common.attrib envar.role.attrib local.envar.attrib ;
surname.role.attrib ::= role.attrib ;
local.subject.attrib ::= ε ;
paramdef.role.attrib ::= role.attrib ;
funcsynopsis.role.attrib ::= role.attrib ;
modifier.role.attrib ::= role.attrib ;
row.attlist ::= (rowsep::yesorno)? (valign::("top" | "middle" | "bottom"))? secur ;
qandadiv.role.attrib ::= role.attrib ;
local.city.attrib ::= ε ;
authorgroup.attlist ::= common.attrib authorgroup.role.attrib local.authorgroup.attrib ;
procedure.attlist ::= common.attrib procedure.role.attrib local.procedure.attrib ;
local.bibliosource.attrib ::= ε ;
local.productname.attrib ::= ε ;
local.citerefentry.attrib ::= ε ;
appendix.role.attrib ::= role.attrib ;
title.char.mix ::= string() | xref.char.class | gen.char.class | link.char.class | tech.char.class | base.char.class | docinfo.char.class | other.char.class | inlineobj.char.class | ndxterm.class | local.title.char.mix ;
refclass.attlist ::= common.attrib refclass.role.attrib local.refclass.attrib ;
local.para.attrib ::= ε ;
local.footnote.attrib ::= ε ;
menuchoice.attlist ::= moreinfo.attrib common.attrib menuchoice.role.attrib local.menuchoice.attrib ;
edition.attlist ::= common.attrib edition.role.attrib local.edition.attrib ;
type.role.attrib ::= role.attrib ;
local.seeie.attrib ::= ε ;
blockinfo.attlist ::= common.attrib blockinfo.role.attrib local.blockinfo.attrib ;
local.destructorsynopsis.attrib ::= ε ;
areaset.attlist ::= label.attrib (units::("calspair" | "linecolumn" | "linerange" | "linecolumnpair" | "other"))? (otherunits::string())? coords::string() idreq.common.attrib areaset.role.attrib local.areaset.attrib ;
refinline.char.mix ::= string() | xref.char.class | gen.char.class | link.char.class | tech.char.class | base.char.class | docinfo.char.class | other.char.class | ndxterm.class | beginpage | local.refinline.char.mix ;
bibliorelation.attlist ::= biblio.class.attrib bibliorelation.type.attrib common.attrib bibliorelation.role.attrib local.bibliorelation.attrib ;
callout.role.attrib ::= role.attrib ;
local.referenceinfo.attrib ::= ε ;
invpartnumber.role.attrib ::= role.attrib ;
article.class ::= article | local.article.class ;
local.envar.attrib ::= ε ;
local.attribution.attrib ::= ε ;
local.returnvalue.attrib ::= ε ;
glosslist.attlist ::= common.attrib glosslist.role.attrib local.glosslist.attrib ;
msglevel.role.attrib ::= role.attrib ;
constant.attlist ::= (class::"limit")? common.attrib constant.role.attrib local.constant.attrib ;
local.personblurb.attrib ::= ε ;
bibliocoverage.role.attrib ::= role.attrib ;
local.inlinemediaobject.attrib ::= ε ;
local.lineage.attrib ::= ε ;
bibliocoverage.attlist ::= (spatial::("dcmipoint" | "iso3166" | "dcmibox" | "tgn" | "otherspatial"))? (otherspatial::string())? (temporal::("dcmiperiod" | "w3c-dtf" | "othertemporal"))? (othertemporal::string())? common.attrib bibliocoverage.role.attrib local.bibliocoverage.attrib ;
screeninfo.role.attrib ::= role.attrib ;
email.attlist ::= common.attrib email.role.attrib local.email.attrib ;
collabname.role.attrib ::= role.attrib ;
subtitle.role.attrib ::= role.attrib ;
local.segmentedlist.attrib ::= ε ;
local.lot.attrib ::= ε ;
ooclass.attlist ::= common.attrib ooclass.role.attrib local.ooclass.attrib ;
informalexample.attlist ::= width.attrib common.attrib informalexample.role.attrib local.informalexample.attrib ;
revdescription.mix ::= list.class | admon.class | linespecific.class | synop.class | para.class | informal.class | formal.class | procedure | genobj.class | ndxterm.class | local.revdescription.mix ;
biblioid.role.attrib ::= role.attrib ;
msgentry.role.attrib ::= role.attrib ;
setinfo.role.attrib ::= role.attrib ;
keycombo.role.attrib ::= role.attrib ;
local.void.attrib ::= ε ;
keycombo.attlist ::= keyaction.attrib moreinfo.attrib common.attrib keycombo.role.attrib local.keycombo.attrib ;
local.confgroup.attrib ::= ε ;
ebnf.block.hook ::= φ ;
orderedlist.attlist ::= (numeration::("arabic" | "upperalpha" | "loweralpha" | "upperroman" | "lowerroman"))? (inheritnum::("inherit" | "ignore"))? (continuation::("continues" | "restarts"))? (spacing::("normal" | "compact"))? common.attrib orderedlist.role.attrib local.orderedlist.attrib ;
publishername.attlist ::= common.attrib publishername.role.attrib local.publishername.attrib ;
local.mediaobject.attrib ::= ε ;
local.videodata.attrib ::= ε ;
local.informalequation.attrib ::= ε ;
group.role.attrib ::= role.attrib ;
sect4info.role.attrib ::= role.attrib ;
sect5 ::= sect5::(sect5.attlist sect5info? sect.title.content nav.class* (divcomponent.mix+ (refentry.class*) | (simplesect*)) | (refentry.class+) | (simplesect+) nav.class*) ;
preface.attlist ::= status.attrib common.attrib preface.role.attrib local.preface.attrib ;
sect4 ::= sect4::(sect4.attlist sect4info? sect.title.content nav.class* (divcomponent.mix+ (refentry.class*) | (sect5*) | (simplesect*)) | (refentry.class+) | (sect5+) | (simplesect+) nav.class*) ;
programlisting.attlist ::= width.attrib linespecific.attrib common.attrib programlisting.role.attrib local.programlisting.attrib ;
publisher.role.attrib ::= role.attrib ;
sect3 ::= sect3::(sect3.attlist sect3info? sect.title.content nav.class* (divcomponent.mix+ (refentry.class*) | (sect4*) | (simplesect*)) | (refentry.class+) | (sect4+) | (simplesect+) nav.class*) ;
sect4info.attlist ::= common.attrib sect4info.role.attrib local.sect4info.attrib ;
group.attlist ::= (choice::("opt" | "req" | "plain"))? (rep::("norepeat" | "repeat"))? common.attrib group.role.attrib local.group.attrib ;
descobj.class ::= abstract | authorblurb | epigraph | local.descobj.class ;
sect2 ::= sect2::(sect2.attlist sect2info? sect.title.content nav.class* (divcomponent.mix+ (refentry.class*) | (sect3*) | (simplesect*)) | (refentry.class+) | (sect3+) | (simplesect+) nav.class*) ;
local.printhistory.attrib ::= ε ;
sect1 ::= sect1::(sect1.attlist sect1info? sect.title.content nav.class* (divcomponent.mix+ (refentry.class*) | (sect2*) | (simplesect*)) | (refentry.class+) | (sect2+) | (simplesect+) nav.class*) ;
chapterinfo.attlist ::= common.attrib chapterinfo.role.attrib local.chapterinfo.attrib ;
toclevel5.attlist ::= common.attrib toclevel5.role.attrib local.toclevel5.attrib ;
refsection.role.attrib ::= role.attrib ;
linkends.attrib ::= (linkends::string())? ;
ooexception.role.attrib ::= role.attrib ;
namvolnum.role.attrib ::= role.attrib ;
local.imageobject.attrib ::= ε ;
ooexception.attlist ::= common.attrib ooexception.role.attrib local.ooexception.attrib ;
phone.attlist ::= common.attrib phone.role.attrib local.phone.attrib ;
citebiblioid.role.attrib ::= role.attrib ;
example.attlist ::= label.attrib width.attrib common.attrib example.role.attrib local.example.attrib ;
screenshot.attlist ::= common.attrib screenshot.role.attrib local.screenshot.attrib ;
local.refname.char.mix ::= φ ;
local.bibliomisc.attrib ::= ε ;
local.guisubmenu.attrib ::= ε ;
sidebar.attlist ::= common.attrib sidebar.role.attrib local.sidebar.attrib ;
highlights.mix ::= list.class | admon.class | para.class | ndxterm.class | local.highlights.mix ;
function.role.attrib ::= role.attrib ;
local.nav.class ::= φ ;
textdata.attlist ::= (encoding::string())? objectdata.attrib common.attrib textdata.role.attrib local.textdata.attrib ;
local.person.ident.mix ::= φ ;
seg.attlist ::= common.attrib seg.role.attrib local.seg.attrib ;
cmdsynopsis.role.attrib ::= role.attrib ;
chapter.attlist ::= label.attrib status.attrib common.attrib chapter.role.attrib local.chapter.attrib ;
funcparams.attlist ::= common.attrib funcparams.role.attrib local.funcparams.attrib ;
local.listpreamble.mix ::= φ ;
local.database.attrib ::= ε ;
colophon.attlist ::= status.attrib common.attrib colophon.role.attrib local.colophon.attrib ;
interfacename.attlist ::= common.attrib interfacename.role.attrib local.interfacename.attrib ;
msgset.role.attrib ::= role.attrib ;
menuchoice.role.attrib ::= role.attrib ;
pob.attlist ::= common.attrib pob.role.attrib local.pob.attrib ;
local.genobj.class ::= φ ;
refname.char.mix ::= string() | tech.char.class | local.refname.char.mix ;
local.linespecific.class ::= φ ;
para.char.mix ::= string() | xref.char.class | gen.char.class | link.char.class | tech.char.class | base.char.class | docinfo.char.class | other.char.class | inlineobj.char.class | synop.class | ndxterm.class | beginpage | forminlines.hook | local.para.char.mix ;
remap.attrib ::= (remap::string())? ;
local.refmiscinfo.attrib ::= ε ;
interface.role.attrib ::= role.attrib ;
local.appendix.attrib ::= ε ;
refsynopsisdivinfo.role.attrib ::= role.attrib ;
seealsoie.attlist ::= linkends.attrib common.attrib seealsoie.role.attrib local.seealsoie.attrib ;
person.ident.mix ::= honorific | firstname | surname | lineage | othername | affiliation | authorblurb | contrib | local.person.ident.mix ;
local.token.attrib ::= ε ;
local.toclevel5.attrib ::= ε ;
orgdiv.role.attrib ::= role.attrib ;
pagenum.attrib ::= (pagenum::string())? ;
ebnf.inline.hook ::= φ ;
local.informalfigure.attrib ::= ε ;
local.refname.attrib ::= ε ;
local.refsect1.attrib ::= ε ;
listpreamble.mix ::= admon.class | linespecific.class | synop.class | para.class | informal.class | genobj.class | descobj.class | ndxterm.class | beginpage | local.listpreamble.mix ;
lineannotation.attlist ::= common.attrib lineannotation.role.attrib local.lineannotation.attrib ;
local.msglevel.attrib ::= ε ;
fax.role.attrib ::= role.attrib ;
local.foreignphrase.attrib ::= ε ;
subjectterm.role.attrib ::= role.attrib ;
guimenu.attlist ::= moreinfo.attrib common.attrib guimenu.role.attrib local.guimenu.attrib ;
local.refsect2info.attrib ::= ε ;
para.class ::= formalpara | para | simpara | local.para.class ;
synopsis.role.attrib ::= role.attrib ;
bibliosource.role.attrib ::= role.attrib ;
fieldsynopsis.role.attrib ::= role.attrib ;
bibliographyinfo.attlist ::= common.attrib bibliographyinfo.role.attrib local.bibliographyinfo.attrib ;
local.bibliodiv.attrib ::= ε ;
local.edition.attrib ::= ε ;
filename.role.attrib ::= role.attrib ;
local.preface.attrib ::= ε ;
funcsynopsisinfo.attlist ::= linespecific.attrib common.attrib funcsynopsisinfo.role.attrib local.funcsynopsisinfo.attrib ;
sbr.role.attrib ::= role.attrib ;
local.example.mix ::= φ ;
local.indexentry.attrib ::= ε ;
programlisting.role.attrib ::= role.attrib ;
preface.role.attrib ::= role.attrib ;
local.issn.attrib ::= ε ;
local.glossdiv.attrib ::= ε ;
indexdivcomponent.mix ::= itemizedlist | orderedlist | variablelist | simplelist | linespecific.class | synop.class | para.class | informal.class | anchor | remark | link.char.class | beginpage | local.indexdivcomponent.mix ;
titleabbrev.attlist ::= common.attrib titleabbrev.role.attrib local.titleabbrev.attrib ;
local.sect3.attrib ::= ε ;
toclevel2.role.attrib ::= role.attrib ;
simplesect.role.attrib ::= role.attrib ;
appendixinfo.attlist ::= common.attrib appendixinfo.role.attrib local.appendixinfo.attrib ;
article.attlist ::= (class::("journalarticle" | "productsheet" | "whitepaper" | "techreport" | "specification" | "faq"))? (parentbook::string())? status.attrib common.attrib article.role.attrib local.article.attrib ;
part.role.attrib ::= role.attrib ;
errorcode.attlist ::= moreinfo.attrib common.attrib errorcode.role.attrib local.errorcode.attrib ;
ulink.role.attrib ::= role.attrib ;
ulink.attlist ::= url::string() (type::string())? common.attrib ulink.role.attrib local.ulink.attrib ;
legalnotice.mix ::= list.class | admon.class | linespecific.class | para.class | blockquote | ndxterm.class | beginpage | local.legalnotice.mix ;
methodname.attlist ::= common.attrib methodname.role.attrib local.methodname.attrib ;
bridgehead.role.attrib ::= role.attrib ;
section.role.attrib ::= role.attrib ;
figure.attlist ::= (float::yesorno.attvals)? (pgwide::yesorno.attvals)? label.attrib common.attrib figure.role.attrib local.figure.attrib ;
revision.role.attrib ::= role.attrib ;
graphicco.role.attrib ::= role.attrib ;
local.keyaction.attrib ::= ε ;
sect5.role.attrib ::= role.attrib ;
index.attlist ::= common.attrib indexes.role.attrib local.indexes.attrib ;
local.titleabbrev.attrib ::= ε ;
cmdsynopsis.attlist ::= label.attrib (sepchar::string())? (cmdlength::string())? common.attrib cmdsynopsis.role.attrib local.cmdsynopsis.attrib ;
local.collabname.attrib ::= ε ;
refsect1info.role.attrib ::= role.attrib ;
local.highlights.attrib ::= ε ;
acronym.attlist ::= common.attrib acronym.role.attrib local.acronym.attrib ;
local.abstract.attrib ::= ε ;
indexterm.role.attrib ::= role.attrib ;
lotentry.attlist ::= linkend.attrib pagenum.attrib (srccredit::string())? common.attrib lotentry.role.attrib local.lotentry.attrib ;
beginpage.attlist ::= pagenum.attrib common.attrib beginpage.role.attrib local.beginpage.attrib ;
local.programlistingco.attrib ::= ε ;
keyaction.attrib ::= (action::("click" | "double-click" | "press" | "seq" | "simul" | "other"))? (otheraction::string())? local.keyaction.attrib ;
local.refsection.attrib ::= ε ;
msgtext.role.attrib ::= role.attrib ;
prefaceinfo.role.attrib ::= role.attrib ;
local.blockinfo.attrib ::= ε ;
invpartnumber.attlist ::= common.attrib invpartnumber.role.attrib local.invpartnumber.attrib ;
textobject.attlist ::= common.attrib textobject.role.attrib local.textobject.attrib ;
videodata.role.attrib ::= role.attrib ;
local.imagedata.attrib ::= ε ;
abbrev.attlist ::= common.attrib abbrev.role.attrib local.abbrev.attrib ;
local.graphic.attrib ::= ε ;
refsectioninfo.attlist ::= common.attrib refsectioninfo.role.attrib local.refsectioninfo.attrib ;
contrib.role.attrib ::= role.attrib ;
literallayout.role.attrib ::= role.attrib ;
othername.attlist ::= common.attrib othername.role.attrib local.othername.attrib ;
audioobject.role.attrib ::= role.attrib ;
tbl.table.mdl ::= blockinfo? formalobject.title.content ndxterm.class* textobject* (graphic+) | (mediaobject+) | (tgroup+) ;
local.cptr.char.mix ::= φ ;
bibliographyinfo.role.attrib ::= role.attrib ;
local.corpauthor.attrib ::= ε ;
fieldsynopsis.attlist ::= (language::string())? common.attrib fieldsynopsis.role.attrib local.fieldsynopsis.attrib ;
author.attlist ::= common.attrib author.role.attrib local.author.attrib ;
index.class ::= index | setindex | local.index.class ;
local.revremark.attrib ::= ε ;
local.setindexinfo.attrib ::= ε ;
imagedata.attlist ::= (width::string())? (contentwidth::string())? (depth::string())? (contentdepth::string())? (align::("left" | "right" | "center"))? (valign::("top" | "middle" | "bottom"))? (scale::string())? (scalefit::yesorno.attvals)? objectdata.attrib common.attrib imagedata.role.attrib local.imagedata.attrib ;
local.personname.attrib ::= ε ;
msg.attlist ::= common.attrib msg.role.attrib local.msg.attrib ;
local.question.attrib ::= ε ;
synopfragmentref.role.attrib ::= role.attrib ;
database.attlist ::= (class::("name" | "table" | "field" | "key1" | "key2" | "record"))? moreinfo.attrib common.attrib database.role.attrib local.database.attrib ;
local.docinfo.char.class ::= φ ;
revdescription.attlist ::= common.attrib revdescription.role.attrib local.revdescription.attrib ;
local.footnoteref.attrib ::= ε ;
local.area.attrib ::= ε ;
local.refmeta.attrib ::= ε ;
local.subjectterm.attrib ::= ε ;
entry.attlist ::= (colname::string())? (namest::string())? (nameend::string())? (spanname::string())? (morerows::string())? (colsep::yesorno)? (rowsep::yesorno)? (align::("left" | "right" | "center" | "justify" | "char"))? (char::string())? (charoff::string())? (rotate::yesorno)? (valign::("top" | "middle" | "bottom"))? secur ;
local.informal.class ::= φ ;
local.tocchap.attrib ::= ε ;
local.modifier.attrib ::= ε ;
city.attlist ::= common.attrib city.role.attrib local.city.attrib ;
graphic.role.attrib ::= role.attrib ;
local.legalnotice.mix ::= φ ;
local.sect4info.attrib ::= ε ;
tables.role.attrib ::= role.attrib ;
confnum.role.attrib ::= role.attrib ;
citetitle.attlist ::= (pubwork::("article" | "book" | "chapter" | "part" | "refentry" | "section" | "journal" | "series" | "set" | "manuscript"))? common.attrib citetitle.role.attrib local.citetitle.attrib ;
local.areaspec.attrib ::= ε ;
local.refpurpose.attrib ::= ε ;
local.editor.attrib ::= ε ;
local.medialabel.attrib ::= ε ;
tertiary.attlist ::= (sortas::string())? common.attrib primsecter.role.attrib local.primsecter.attrib ;
local.option.attrib ::= ε ;
local.corpname.attrib ::= ε ;
command.role.attrib ::= role.attrib ;
local.sect1info.attrib ::= ε ;
reference.role.attrib ::= role.attrib ;
shortaffil.role.attrib ::= role.attrib ;
local.errortype.attrib ::= ε ;
printhistory.attlist ::= common.attrib printhistory.role.attrib local.printhistory.attrib ;
shortcut.attlist ::= keyaction.attrib moreinfo.attrib common.attrib shortcut.role.attrib local.shortcut.attrib ;
local.seglistitem.attrib ::= ε ;
simplemsgentry.attlist ::= (audience::string())? (level::string())? (origin::string())? common.attrib simplemsgentry.role.attrib local.simplemsgentry.attrib ;
local.lotentry.attrib ::= ε ;
refdescriptor.attlist ::= common.attrib refdescriptor.role.attrib local.refdescriptor.attrib ;
appendix.class ::= appendix | local.appendix.class ;
local.alt.attrib ::= ε ;
pagenums.role.attrib ::= role.attrib ;
indexterm.attlist ::= pagenum.attrib (scope::("all" | "global" | "local"))? (significance::("preferred" | "normal"))? (class::("singular" | "startofrange" | "endofrange"))? (startref::string())? (zone::string())? common.attrib indexterm.role.attrib local.indexterm.attrib ;
classsynopsisinfo.role.attrib ::= role.attrib ;
local.hardware.attrib ::= ε ;
local.glossentry.attrib ::= ε ;
tocpart.attlist ::= common.attrib tocpart.role.attrib local.tocpart.attrib ;
colspec.attlist ::= (colnum::string())? (colname::string())? (colwidth::string())? (colsep::yesorno)? (rowsep::yesorno)? (align::("left" | "right" | "center" | "justify" | "char"))? (char::string())? (charoff::string())? ;
authorinitials.attlist ::= common.attrib authorinitials.role.attrib local.authorinitials.attrib ;
subjectset.role.attrib ::= role.attrib ;
simpara.attlist ::= common.attrib simpara.role.attrib local.simpara.attrib ;
errortext.attlist ::= common.attrib errortext.role.attrib local.errortext.attrib ;
local.releaseinfo.attrib ::= ε ;
ssscript.role.attrib ::= role.attrib ;
msgtext.attlist ::= common.attrib msgtext.role.attrib local.msgtext.attrib ;
prefaceinfo.attlist ::= common.attrib prefaceinfo.role.attrib local.prefaceinfo.attrib ;
orgdiv.attlist ::= common.attrib orgdiv.role.attrib local.orgdiv.attrib ;
local.bookinfo.attrib ::= ε ;
local.textobject.mix ::= φ ;
local.refsynopsisdivinfo.attrib ::= ε ;
local.dedication.attrib ::= ε ;
glossentry.role.attrib ::= role.attrib ;
refpurpose.attlist ::= common.attrib refpurpose.role.attrib local.refpurpose.attrib ;
qandaset.role.attrib ::= role.attrib ;
local.xref.attrib ::= ε ;
markup.attlist ::= common.attrib markup.role.attrib local.markup.attrib ;
segtitle.role.attrib ::= role.attrib ;
local.menuchoice.attrib ::= ε ;
refsectioninfo.role.attrib ::= role.attrib ;
bibliomisc.attlist ::= common.attrib bibliomisc.role.attrib local.bibliomisc.attrib ;
important.attlist ::= common.attrib admon.role.attrib local.admon.attrib ;
abstract.attlist ::= common.attrib abstract.role.attrib local.abstract.attrib ;
partinfo.attlist ::= common.attrib partinfo.role.attrib local.partinfo.attrib ;
tocchap.role.attrib ::= role.attrib ;
objectdata.attrib ::= (entityref::string())? (fileref::string())? (format::notation.class)? (srccredit::string())? local.objectdata.attrib ;
fax.attlist ::= common.attrib fax.role.attrib local.fax.attrib ;
local.qandaset.attrib ::= ε ;
tbl.tgroup.att ::= (tgroupstyle::string())? ;
local.phone.attrib ::= ε ;
nav.class ::= toc | lot | index | glossary | bibliography | local.nav.class ;
country.role.attrib ::= role.attrib ;
local.ndxterm.char.mix ::= φ ;
local.word.char.mix ::= φ ;
keycap.attlist ::= moreinfo.attrib common.attrib keycap.role.attrib local.keycap.attrib ;
sectioninfo.attlist ::= common.attrib sectioninfo.role.attrib local.sectioninfo.attrib ;
constructorsynopsis.role.attrib ::= role.attrib ;
local.msgexplan.attrib ::= ε ;
admon.role.attrib ::= role.attrib ;
glosssee.role.attrib ::= role.attrib ;
entrytbl.attlist ::= cols::string() tbl.tgroup.att (colname::string())? (spanname::string())? (namest::string())? (nameend::string())? (colsep::yesorno)? (rowsep::yesorno)? (align::("left" | "right" | "center" | "justify" | "char"))? (char::string())? (charoff::string())? secur ;
local.userinput.attrib ::= ε ;
ackno.attlist ::= common.attrib ackno.role.attrib local.ackno.attrib ;
varargs.role.attrib ::= role.attrib ;
biblio.class.attrib ::= (class::("uri" | "doi" | "isbn" | "issn" | "libraryofcongress" | "pubnumber" | "other"))? (otherclass::string())? ;
seglistitem.attlist ::= common.attrib seglistitem.role.attrib local.seglistitem.attrib ;
local.structname.attrib ::= ε ;
guisubmenu.attlist ::= moreinfo.attrib common.attrib guisubmenu.role.attrib local.guisubmenu.attrib ;
local.parameter.attrib ::= ε ;
sect5info.attlist ::= common.attrib sect5info.role.attrib local.sect5info.attrib ;
bibliodiv.role.attrib ::= role.attrib ;
publisher.attlist ::= common.attrib publisher.role.attrib local.publisher.attrib ;
synopfragment.role.attrib ::= role.attrib ;
link.attlist ::= (endterm::string())? linkendreq.attrib (type::string())? common.attrib link.role.attrib local.link.attrib ;
productname.attlist ::= (class::("service" | "trade" | "registered" | "copyright"))? common.attrib productname.role.attrib local.productname.attrib ;
local.graphicco.attrib ::= ε ;
local.msgaud.attrib ::= ε ;
ndxterm.char.mix ::= string() | xref.char.class | gen.char.class | link.char.class | tech.char.class | base.char.class | docinfo.char.class | other.char.class | inlinegraphic | inlinemediaobject | local.ndxterm.char.mix ;
note.attlist ::= common.attrib admon.role.attrib local.admon.attrib ;
local.title.attrib ::= ε ;
screen.role.attrib ::= role.attrib ;
bookcomponent.content ::= (divcomponent.mix+ (sect1*) | (refentry.class*) | (simplesect*) | (section.class*)) | (sect1+) | (refentry.class+) | (simplesect+) | (section.class+) ;
local.keywordset.attrib ::= ε ;
hardware.attlist ::= moreinfo.attrib common.attrib hardware.role.attrib local.hardware.attrib ;
substeps.attlist ::= (performance::("optional" | "required"))? common.attrib substeps.role.attrib local.substeps.attrib ;
question.attlist ::= common.attrib question.role.attrib local.question.attrib ;
local.bibliomixed.attrib ::= ε ;
local.articleinfo.attrib ::= ε ;
local.caption.attrib ::= ε ;
surname.attlist ::= common.attrib surname.role.attrib local.surname.attrib ;
title.role.attrib ::= role.attrib ;
property.role.attrib ::= role.attrib ;
local.errorname.attrib ::= ε ;
local.component.mix ::= φ ;
procedure.role.attrib ::= role.attrib ;
local.biblioid.attrib ::= ε ;
table.attlist ::= (frame::("top" | "bottom" | "topbot" | "all" | "sides" | "none"))? (colsep::yesorno)? (rowsep::yesorno)? tbl.table.att bodyatt secur ;
local.revdescription.attrib ::= ε ;
lotentry.role.attrib ::= role.attrib ;
local.toc.attrib ::= ε ;
linespecific.attrib ::= (format::"linespecific")? (linenumbering::("numbered" | "unnumbered"))? ;
local.bibliocomponent.mix ::= φ ;
local.tabentry.mix ::= φ ;
notation.class ::= "BMP" | "CGM-CHAR" | "CGM-BINARY" | "CGM-CLEAR" | "DITROFF" | "DVI" | "EPS" | "EQN" | "FAX" | "GIF" | "GIF87a" | "GIF89a" | "JPG" | "JPEG" | "IGES" | "PCX" | "PIC" | "PNG" | "PS" | "SGML" | "TBL" | "TEX" | "TIFF" | "WMF" | "WPG" | "SVG" | "linespecific" | local.notation.class ;
local.application.attrib ::= ε ;
phrase.attlist ::= common.attrib phrase.role.attrib local.phrase.attrib ;
bibliorelation.role.attrib ::= role.attrib ;
anchor.attlist ::= idreq.attrib pagenum.attrib remap.attrib xreflabel.attrib revisionflag.attrib effectivity.attrib anchor.role.attrib local.anchor.attrib ;
conftitle.attlist ::= common.attrib conftitle.role.attrib local.conftitle.attrib ;
parameter.role.attrib ::= role.attrib ;
toclevel5 ::= toclevel5::(toclevel5.attlist tocentry+) ;
coref.attlist ::= label.attrib linkendreq.attrib common.attrib coref.role.attrib local.coref.attrib ;
toclevel4 ::= toclevel4::(toclevel4.attlist tocentry+ toclevel5*) ;
ndxterm.class ::= indexterm | local.ndxterm.class ;
toclevel3 ::= toclevel3::(toclevel3.attlist tocentry+ toclevel4*) ;
toclevel2 ::= toclevel2::(toclevel2.attlist tocentry+ toclevel3*) ;
toclevel1 ::= toclevel1::(toclevel1.attlist tocentry+ toclevel2*) ;
genobj.class ::= anchor | bridgehead | remark | highlights | local.genobj.class ;
inlineequation.content ::= alt? (graphic+) | (inlinemediaobject+) ;
variablelist.role.attrib ::= role.attrib ;
tip.attlist ::= common.attrib admon.role.attrib local.admon.attrib ;
local.effectivity.attrib ::= ε ;
symbol.attlist ::= (class::"limit")? common.attrib symbol.role.attrib local.symbol.attrib ;
local.conftitle.attrib ::= ε ;
local.glossterm.attrib ::= ε ;
void.attlist ::= common.attrib void.role.attrib local.void.attrib ;
errorname.attlist ::= common.attrib errorname.role.attrib local.errorname.attrib ;
local.smallcptr.char.mix ::= φ ;
revhistory.attlist ::= common.attrib revhistory.role.attrib local.revhistory.attrib ;
local.literallayout.attrib ::= ε ;
medialabel.attlist ::= (class::("cartridge" | "cdrom" | "disk" | "tape"))? common.attrib medialabel.role.attrib local.medialabel.attrib ;
local.biblioentry.attrib ::= ε ;
constructorsynopsis.attlist ::= (language::string())? common.attrib constructorsynopsis.role.attrib local.constructorsynopsis.attrib ;
local.formal.class ::= φ ;
local.indexes.attrib ::= ε ;
forminlines.hook ::= φ ;
local.screeninfo.attrib ::= ε ;
local.compound.class ::= φ ;
local.varargs.attrib ::= ε ;
msg.role.attrib ::= role.attrib ;
sect5info.role.attrib ::= role.attrib ;
local.seriesvolnums.attrib ::= ε ;
figure.mix ::= linespecific.class | synop.class | informal.class | ndxterm.class | beginpage | local.figure.mix ;
sect1info.role.attrib ::= role.attrib ;
local.manvolnum.attrib ::= ε ;
local.para.class ::= φ ;
videoobject.attlist ::= common.attrib videoobject.role.attrib local.videoobject.attrib ;
toclevel3.role.attrib ::= role.attrib ;
refsect.title.content ::= title subtitle? titleabbrev? ;
isbn.role.attrib ::= role.attrib ;
referenceinfo.attlist ::= common.attrib referenceinfo.role.attrib local.referenceinfo.attrib ;
methodsynopsis.role.attrib ::= role.attrib ;
msgrel.attlist ::= common.attrib msgrel.role.attrib local.msgrel.attrib ;
address.role.attrib ::= role.attrib ;
glossterm.attlist ::= linkend.attrib (baseform::string())? common.attrib glossterm.role.attrib local.glossterm.attrib ;
confsponsor.attlist ::= common.attrib confsponsor.role.attrib local.confsponsor.attrib ;
status.attrib ::= (status::string())? local.status.attrib ;
secondary.attlist ::= (sortas::string())? common.attrib primsecter.role.attrib local.primsecter.attrib ;
local.simpara.attrib ::= ε ;
local.toclevel3.attrib ::= ε ;
editor.role.attrib ::= role.attrib ;
local.action.attrib ::= ε ;
local.subjectset.attrib ::= ε ;
revision.attrib ::= (revision::string())? ;
local.msg.attrib ::= ε ;
info.class ::= graphic | mediaobject | legalnotice | modespec | subjectset | keywordset | itermset | bibliocomponent.mix | local.info.class ;
citetitle.role.attrib ::= role.attrib ;
prompt.attlist ::= moreinfo.attrib common.attrib prompt.role.attrib local.prompt.attrib ;
local.admon.mix ::= φ ;
local.accel.attrib ::= ε ;
honorific.attlist ::= common.attrib honorific.role.attrib local.honorific.attrib ;
footnote.attlist ::= label.attrib common.attrib footnote.role.attrib local.footnote.attrib ;
computeroutput.role.attrib ::= role.attrib ;
oointerface.role.attrib ::= role.attrib ;
screenco.role.attrib ::= role.attrib ;
local.funcparams.attrib ::= ε ;
local.glossaryinfo.attrib ::= ε ;
authorgroup.role.attrib ::= role.attrib ;
list.class ::= calloutlist | glosslist | itemizedlist | orderedlist | segmentedlist | simplelist | variablelist | local.list.class ;
local.glossseealso.attrib ::= ε ;
formalpara.role.attrib ::= role.attrib ;
local.bibliorelation.attrib ::= ε ;
application.attlist ::= (class::("hardware" | "software"))? moreinfo.attrib common.attrib application.role.attrib local.application.attrib ;
formalpara.attlist ::= common.attrib formalpara.role.attrib local.formalpara.attrib ;
glossaryinfo.role.attrib ::= role.attrib ;
contractsponsor.role.attrib ::= role.attrib ;
areaspec.role.attrib ::= role.attrib ;
local.indexinfo.attrib ::= ε ;
glossdiv.attlist ::= status.attrib common.attrib glossdiv.role.attrib local.glossdiv.attrib ;
pob.role.attrib ::= role.attrib ;
structfield.attlist ::= common.attrib structfield.role.attrib local.structfield.attrib ;
local.itemizedlist.attrib ::= ε ;
msgmain.role.attrib ::= role.attrib ;
local.sect1.attrib ::= ε ;
type.attlist ::= common.attrib type.role.attrib local.type.attrib ;
local.holder.attrib ::= ε ;
corpname.role.attrib ::= role.attrib ;
contractnum.attlist ::= common.attrib contractnum.role.attrib local.contractnum.attrib ;
trademark.attlist ::= (class::("service" | "trade" | "registered" | "copyright"))? common.attrib trademark.role.attrib local.trademark.attrib ;
refmiscinfo.role.attrib ::= role.attrib ;
--------------------markup::kml.bgf--------------------
RefreshMode ::= value::String ;
ElementNode ::= RootNode ;
 ElementNode ::= TextNode ;
 ElementNode ::= KMLNode ;
LineStyle ::= id::String ;
LabelStyle ::= ε ;
FlyToView ::= value::Boolean ;
OverlayXY ::= x::String y::String xunits::String yunits::String ;
OuterBoundaryIs ::= ε ;
TextNode ::= (nodes::Node)+ ;
RefreshVisibility ::= value::String ;
AltitudeModeValue ::= (clampedToGround::ε) | (relativeToGround::ε) | (absolute::ε) ;
MultiGeometry ::= ε ;
MinRefreshPeriod ::= value::String ;
GroundOverlay ::= ε ;
NetworkLink ::= ε ;
PolyStyle ::= ε ;
ScreenOverlay ::= id::String ;
RootNode ::= KMLRootNode ;
ObjField ::= ε ;
BalloonStyle ::= ε ;
RefreshInterval ::= value::String ;
LatLonBox ::= ε ;
StyleUrl ::= value::String ;
AttributeNode ::= value::String ;
ViewFormat ::= value::String ;
ViewRefreshMode ::= value::String ;
ObjArrayField ::= ε ;
IconStyle ::= ε ;
TextColor ::= value::String ;
NetworkLinkControl ::= ε ;
LinearRing ::= ε ;
SimpleArrayField ::= ε ;
LookAt ::= ε ;
ViewBoundScale ::= value::String ;
KMLRootNode ::= ε ;
ScreenXY ::= x::String y::String xunits::String yunits::String ;
KMLNode ::= Address ;
 KMLNode ::= AltitudeMode ;
 KMLNode ::= BalloonStyle ;
 KMLNode ::= Color ;
 KMLNode ::= ColorMode ;
 KMLNode ::= Cookie ;
 KMLNode ::= Coordinates ;
 KMLNode ::= Coordinate ;
 KMLNode ::= Description ;
 KMLNode ::= Document ;
 KMLNode ::= DrawOrder ;
 KMLNode ::= East ;
 KMLNode ::= Extrude ;
 KMLNode ::= Fill ;
 KMLNode ::= FlyToView ;
 KMLNode ::= Folder ;
 KMLNode ::= GroundOverlay ;
 KMLNode ::= H ;
 KMLNode ::= Heading ;
 KMLNode ::= Href ;
 KMLNode ::= Icon ;
 KMLNode ::= IconStyle ;
 KMLNode ::= InnerBoundaryIs ;
 KMLNode ::= Key ;
 KMLNode ::= LabelStyle ;
 KMLNode ::= Latitude ;
 KMLNode ::= LatLonBox ;
 KMLNode ::= LinearRing ;
 KMLNode ::= LineString ;
 KMLNode ::= LineStyle ;
 KMLNode ::= LinkDescription ;
 KMLNode ::= LinkName ;
 KMLNode ::= Longitude ;
 KMLNode ::= LookAt ;
 KMLNode ::= Message ;
 KMLNode ::= MinRefreshPeriod ;
 KMLNode ::= MultiGeometry ;
 KMLNode ::= Name ;
 KMLNode ::= NetworkLink ;
 KMLNode ::= NetworkLinkControl ;
 KMLNode ::= North ;
 KMLNode ::= ObjArrayField ;
 KMLNode ::= ObjField ;
 KMLNode ::= Open ;
 KMLNode ::= OuterBoundaryIs ;
 KMLNode ::= Outline ;
 KMLNode ::= OverlayXY ;
 KMLNode ::= Pair ;
 KMLNode ::= Parent ;
 KMLNode ::= Placemark ;
 KMLNode ::= Point ;
 KMLNode ::= Polygon ;
 KMLNode ::= PolyStyle ;
 KMLNode ::= Range ;
 KMLNode ::= RefreshInterval ;
 KMLNode ::= RefreshMode ;
 KMLNode ::= RefreshVisibility ;
 KMLNode ::= Rotation ;
 KMLNode ::= Schema ;
 KMLNode ::= Scale ;
 KMLNode ::= ScreenOverlay ;
 KMLNode ::= ScreenXY ;
 KMLNode ::= SimpleArrayField ;
 KMLNode ::= SimpleField ;
 KMLNode ::= Size ;
 KMLNode ::= South ;
 KMLNode ::= Snippet ;
 KMLNode ::= Style ;
 KMLNode ::= StyleMap ;
 KMLNode ::= StyleUrl ;
 KMLNode ::= Tessellate ;
 KMLNode ::= Text ;
 KMLNode ::= TextColor ;
 KMLNode ::= Tilt ;
 KMLNode ::= Type ;
 KMLNode ::= Url ;
 KMLNode ::= ViewBoundScale ;
 KMLNode ::= ViewRefreshMode ;
 KMLNode ::= ViewRefreshTime ;
 KMLNode ::= ViewFormat ;
 KMLNode ::= Visibility ;
 KMLNode ::= W ;
 KMLNode ::= West ;
 KMLNode ::= Width ;
 KMLNode ::= X ;
 KMLNode ::= Y ;
StyleMap ::= ε ;
ColorModeValue ::= (normal::ε) | (random::ε) ;
InnerBoundaryIs ::= ε ;
DrawOrder ::= value::Integer ;
SimpleField ::= ε ;
ColorMode ::= value::ColorModeValue ;
LinkName ::= value::String ;
LineString ::= ε ;
AltitudeMode ::= value::AltitudeModeValue ;
ViewRefreshTime ::= value::Integer ;
LinkDescription ::= value::String ;
--------------------markup::graphml-doux.bgf--------------------
AttrType ::= (double::ε) | (string::ε) | (integer::ε) | (boolean::ε) ;
LocatedElement ::= Root ;
 LocatedElement ::= Element ;
 LocatedElement ::= Port ;
 LocatedElement ::= EndPoint ;
 LocatedElement ::= Data ;
ElemType ::= (edge::ε) | (node::ε) | (graph::ε) ;
HyperEdge ::= (endpoints::EndPoint)+ ;
EdgeType ::= (directed::ε) | (undirected::ε) ;
EndPoint ::= node::Node port::Port ;
--------------------markup::json-rascal-concrete.bgf--------------------
JSONText ::= Object ;
 JSONText ::= Array ;
--------------------markup::json-zaytsev-abstract.bgf--------------------
JSO ::= (jsnumber::(n::integer())) | (jsstring::(s::string())) | (jsboolean::(b::("true" | "false"))) | (jsarray::(xs::(JSO*))) | (jsobject::(kvs::((JSO JSO)*))) | (jsnull::ε) ;
--------------------markup::json-zaytsev-concrete.bgf--------------------
JSONNull ::= "null" ;
JSONKeyValue ::= key::JSONBasicType ":" val::JSONBasicType ;
JSONString ::= DoubleQuotedString ;
JSONObject ::= "{" {JSONKeyValue ","}* "}" ;
JSONData ::= JSONBasicType ;
JSONNumber ::= "-"? Digits ("." Digits)? ;
JSONArray ::= "[" {JSONBasicType ","}* "]" ;
JSONBoolean ::= "false" ;
 JSONBoolean ::= "true" ;
JSONBasicType ::= JSONString ;
 JSONBasicType ::= JSONNull ;
 JSONBasicType ::= JSONBoolean ;
 JSONBasicType ::= JSONNumber ;
 JSONBasicType ::= JSONArray ;
 JSONBasicType ::= JSONObject ;
--------------------markup::mathml-furubayashi.bgf--------------------
mml.ctrigop ::= mml.sin.qname | mml.cos.qname | mml.tan.qname | mml.sec.qname | mml.csc.qname | mml.cot.qname | mml.sinh.qname | mml.cosh.qname | mml.tanh.qname | mml.sech.qname | mml.csch.qname | mml.coth.qname | mml.arcsin.qname | mml.arccos.qname | mml.arctan.qname | mml.arccosh.qname | mml.arccot.qname | mml.arccoth.qname | mml.arccsc.qname | mml.arccsch.qname | mml.arcsec.qname | mml.arcsech.qname | mml.arcsinh.qname | mml.arctanh.qname ;
mml.mrow.qname ::= mrow::(mml.PresExpression mml.Common.attrib) ;
mml.sec.qname ::= sec::(ε mml.operators.common.attrib) ;
mml.floor.qname ::= floor::(ε mml.operators.common.attrib) ;
mml.ccalcop ::= mml.log.qname | mml.int.qname | mml.diff.qname | mml.partialdiff.qname | mml.divergence.qname | mml.grad.qname | mml.curl.qname | mml.laplacian.qname ;
mml.att-depth ::= (depth::mml.length.datatype)? ;
mml.att-groupalign ::= (groupalign::mml.groupalign.datatype)? ;
mml.cot.qname ::= cot::(ε mml.operators.common.attrib) ;
mml.maligngroup.qname ::= maligngroup::(ε mml.Common.attrib mml.att-groupalign) ;
mml.vector.qname ::= vector::(mml.ContentExpression mml.Common.attrib) ;
mml.ln.qname ::= ln::(ε mml.operators.common.attrib) ;
mml.matrix.qname ::= matrix::(mml.ContentExpression mml.Common.attrib) ;
mml.cother ::= mml.condition.qname | mml.declare.qname | mml.sep.qname ;
mml.msubsup.qname ::= msubsup::(mml.PresExpression mml.Common.attrib mml.att-subscriptshift mml.att-superscriptshift) ;
mml.columnspacing.datatype ::= (string() string() | "veryverythinmathspace" | "verythinmathspace" | "thinmathspace" | "mediummathspace" | "thickmathspace" | "verythickmathspace" | "veryverythickmathspace")+ ;
mml.msub.qname ::= msub::(mml.PresExpression mml.Common.attrib mml.att-subscriptshift) ;
mml.att-columnwidth ::= (columnwidth::mml.columnwidth.datatype)? ;
mml.annotation.qname ::= annotation::(mml.Annotation.datatype mml.Common.attrib mml.att-encoding) ;
mml.att-occurrence ::= (occurrence::("prefix" | "infix" | "function-model"))? ;
mml.att-mediummathspace ::= (mediummathspace::mml.length.datatype)? ;
mml.apply.qname ::= apply::(mml.ContentExpression mml.Common.attrib) ;
mml.att-accent ::= (accent::("true" | "false"))? ;
mml.cspecial ::= mml.apply.qname | mml.reln.qname | mml.lambda.qname ;
mml.mtr.qname ::= mtr::(mml.PresExpression mml.Common.attrib mml.att-rowalign mml.att-columnalign mml.att-groupalign) ;
mml.ci.qname ::= ci::((mml.MathMLCharacters | mml.PresInCont)* mml.Common.attrib mml.att-type mml.att-definition mml.att-encoding) ;
mml.att-baseline ::= (baseline::string())? ;
mml.false.qname ::= false::(ε mml.operators.common.attrib) ;
mml.arcsinh.qname ::= arcsinh::(ε mml.operators.common.attrib) ;
mml.att-veryverythinmathspace ::= (veryverythinmathspace::mml.length.datatype)? ;
mml.intersect.qname ::= intersect::(ε mml.operators.common.attrib) ;
mml.att-superscriptshift ::= (superscriptshift::mml.length.datatype)? ;
mml.att-type ::= (type::("e-notation" | "integer" | "rational" | "real" | "float" | "complex-polar" | "complex-cartesian" | "constant"))? ;
mml.number.datatype ::= integer() ;
mml.columnwidth.datatype ::= ("auto" | string() | (string() | "veryverythinmathspace" | "verythinmathspace" | "thinmathspace" | "mediummathspace" | "thickmathspace" | "verythickmathspace" | "veryverythickmathspace") | "fit")+ ;
mml.primes.qname ::= primes::(ε mml.operators.common.attrib) ;
mml.carithop2ary ::= mml.quotient.qname | mml.divide.qname | mml.power.qname | mml.rem.qname ;
mml.lcm.qname ::= lcm::(ε mml.operators.common.attrib) ;
mml.reals.qname ::= reals::(ε mml.operators.common.attrib) ;
mml.logbase.qname ::= logbase::(mml.ContentExpression mml.Common.attrib) ;
mml.alignmentscope.datatype ::= ("true" | "false")+ ;
mml.arctan.qname ::= arctan::(ε mml.operators.common.attrib) ;
mml.att-sizeinfo ::= mml.att-width mml.att-height mml.att-depth ;
mml.att-linebreak ::= (linebreak::("auto" | "newline" | "indentingnewline" | "nobreak" | "goodbreak" | "badbreak"))? ;
mml.att-thinmathspace ::= (thinmathspace::mml.length.datatype)? ;
mml.cquantifier ::= mml.lowlimit.qname | mml.uplimit.qname | mml.bvar.qname | mml.degree.qname | mml.logbase.qname | mml.momentabout.qname | mml.domainofapplication.qname ;
mml.cstatopmoment ::= mml.moment.qname ;
mml.arcsin.qname ::= arcsin::(ε mml.operators.common.attrib) ;
mml.malignmark.qname ::= malignmark::(ε mml.att-edge) ;
mml.diff.qname ::= diff::(ε mml.operators.common.attrib) ;
mml.times.qname ::= times::(ε mml.operators.common.attrib) ;
mml.mtable.qname ::= mtable::(mml.PresExpression mml.Common.attrib mml.att-tableinfo) ;
mml.att-columnspan ::= (columnspan::mml.columnspan.datatype)? ;
mml.att-tableinfo ::= mml.att-align mml.att-rowalign mml.att-columnalign mml.att-columnwidth mml.att-groupalign mml.att-alignmentscope mml.att-rowspacing mml.att-columnspacing mml.att-rowlines mml.att-columnlines mml.att-frame mml.att-framespacing mml.att-equalrows mml.att-equalcolumns mml.att-displaystyle ;
mml.carithoproot ::= mml.root.qname ;
mml.operators.common.attrib ::= mml.Common.attrib mml.att-definition mml.att-encoding ;
mml.integers.qname ::= integers::(ε mml.operators.common.attrib) ;
mml.matrixrow.qname ::= matrixrow::(mml.ContentExpression mml.Common.attrib) ;
mml.notprsubset.qname ::= notprsubset::(ε mml.operators.common.attrib) ;
mml.att-stretchy ::= (stretchy::("true" | "false"))? ;
mml.copnary ::= mml.cfuncopnary | mml.carithopnary | mml.clogicopnary | mml.csetopnary | mml.cstatopnary | mml.clalgopnary ;
mml.eq.qname ::= eq::(ε mml.operators.common.attrib) ;
mml.semantics.qname ::= semantics::(mml.ContentExpression mml.Common.attrib mml.att-definition mml.att-encoding) ;
mml.cconstructor ::= mml.interval.qname | mml.list.qname | mml.matrix.qname | mml.matrixrow.qname | mml.set.qname | mml.vector.qname | mml.piecewise.qname ;
mml.att-fontweight ::= (fontweight::("normal" | "bold"))? ;
mml.setdiff.qname ::= setdiff::(ε mml.operators.common.attrib) ;
mml.or.qname ::= or::(ε mml.operators.common.attrib) ;
mml.subset.qname ::= subset::(ε mml.operators.common.attrib) ;
mml.att-overflow ::= (overflow::("scroll" | "elide" | "truncate" | "scale"))? ;
mml.list.qname ::= list::(mml.ContentExpression mml.Common.attrib mml.att-order) ;
mml.att-mathcolor ::= (mathcolor::mml.color.datatype)? ;
mml.approx.qname ::= approx::(ε mml.operators.common.attrib) ;
mml.plus.qname ::= plus::(ε mml.operators.common.attrib) ;
mml.rem.qname ::= rem::(ε mml.operators.common.attrib) ;
mml.att-scope ::= (scope::("local" | "global"))? ;
mml.Annotation.datatype ::= string() ;
mml.domainofapplication.qname ::= domainofapplication::(mml.ContentExpression mml.Common.attrib) ;
mml.plschema ::= mml.pgenschema | mml.pscrschema | mml.ptabschema ;
mml.geq.qname ::= geq::(ε mml.operators.common.attrib) ;
mml.compose.qname ::= compose::(ε mml.operators.common.attrib) ;
mml.att-nargs ::= (nargs::("nary" | mml.number.datatype))? ;
mml.att-veryverythickmathspace ::= (veryverythickmathspace::mml.length.datatype)? ;
mml.c0ary ::= mml.integers.qname | mml.reals.qname | mml.rationals.qname | mml.naturalnumbers.qname | mml.complexes.qname | mml.primes.qname | mml.exponentiale.qname | mml.imaginaryi.qname | mml.notanumber.qname | mml.true.qname | mml.false.qname | mml.emptyset.qname | mml.eulergamma.qname | mml.infinity.qname ;
mml.lt.qname ::= lt::(ε mml.operators.common.attrib) ;
mml.lambda.qname ::= lambda::(mml.ContentExpression mml.Common.attrib) ;
mml.mean.qname ::= mean::(ε mml.operators.common.attrib) ;
mml.interval.qname ::= interval::(mml.ContentExpression mml.Common.attrib mml.att-closure) ;
mml.mlabeledtr.qname ::= mlabeledtr::(mml.PresExpression mml.Common.attrib mml.att-rowalign mml.att-columnalign mml.att-groupalign) ;
mml.att-display ::= (display::string())? ;
mml.gcd.qname ::= gcd::(ε mml.operators.common.attrib) ;
mml.MathMLCharacters ::= mml.mglyph.qname | string() ;
mml.msup.qname ::= msup::(mml.PresExpression mml.Common.attrib mml.att-superscriptshift) ;
mml.color.datatype ::= string() | string() | "transparent" ;
mml.positiveinteger.datatype ::= integer() ;
mml.pactions ::= mml.maction.qname ;
mml.uplimit.qname ::= uplimit::(mml.ContentExpression mml.Common.attrib) ;
mml.att-symmetric ::= (symmetric::("true" | "false"))? ;
mml.ptabschema ::= mml.mtable.qname | mml.mtr.qname | mml.mlabeledtr.qname | mml.mtd.qname ;
mml.notanumber.qname ::= notanumber::(ε mml.operators.common.attrib) ;
mml.att-subscriptshift ::= (subscriptshift::mml.length.datatype)? ;
mml.columnalign.datatype ::= ("left" | "center" | "right")+ ;
mml.att-fence ::= (fence::("true" | "false"))? ;
mml.carithop1ary ::= mml.abs.qname | mml.conjugate.qname | mml.exp.qname | mml.factorial.qname | mml.arg.qname | mml.real.qname | mml.imaginary.qname | mml.floor.qname | mml.ceiling.qname ;
mml.att-definition ::= (definitionURL::mml.uri.datatype)? ;
mml.att-columnspacing ::= (columnspacing::mml.columnspacing.datatype)? ;
mml.att-alignmentscope ::= (alignmentscope::mml.alignmentscope.datatype)? ;
mml.cseqop ::= mml.sum.qname | mml.product.qname | mml.limit.qname ;
mml.att-base ::= (base::mml.number.datatype)? ;
mml.abs.qname ::= abs::(ε mml.operators.common.attrib) ;
mml.minus.qname ::= minus::(ε mml.operators.common.attrib) ;
mml.att-alt ::= (alt::string())? ;
mml.att-scriptminsize ::= (scriptminsize::mml.length.datatype)? ;
mml.piece.qname ::= piece::(mml.ContentExpression mml.Common.attrib) ;
mml.cop2ary ::= mml.carithop2ary | mml.clogicop2ary | mml.clalgop2ary | mml.csetop2ary ;
mml.cartesianproduct.qname ::= cartesianproduct::(ε mml.operators.common.attrib) ;
mml.factorof.qname ::= factorof::(ε mml.operators.common.attrib) ;
mml.declare.qname ::= declare::(mml.ContentExpression mml.Common.attrib mml.att-type mml.att-scope mml.att-nargs mml.att-occurrence mml.att-definition mml.att-encoding) ;
mml.lines.datatype ::= ("none" | "solid" | "dashed")+ ;
mml.in.qname ::= in::(ε mml.operators.common.attrib) ;
mml.mstyle.qname ::= mstyle::(mml.PresExpression mml.Common.attrib mml.att-fontinfo mml.att-opinfo mml.att-lquote mml.att-rquote mml.att-linethickness mml.att-scriptlevel mml.att-scriptsizemultiplier mml.att-scriptminsize mml.att-background mml.att-veryverythinmathspace mml.att-verythinmathspace mml.att-thinmathspace mml.att-mediummathspace mml.att-thickmathspace mml.att-verythickmathspace mml.att-veryverythickmathspace mml.att-open mml.att-close mml.att-separators mml.att-subscriptshift mml.att-superscriptshift mml.att-accentunder mml.att-tableinfo mml.att-rowspan mml.att-columnspan mml.att-edge mml.att-actiontype) ;
mml.att-form ::= (form::("prefix" | "infix" | "postfix"))? ;
mml.coth.qname ::= coth::(ε mml.operators.common.attrib) ;
mml.eulergamma.qname ::= eulergamma::(ε mml.operators.common.attrib) ;
mml.copmisc ::= mml.carithoproot | mml.carithop1or2ary | mml.ccalcop | mml.cseqop | mml.cstatopmoment | mml.clogicopquant ;
mml.set.qname ::= set::(mml.ContentExpression mml.Common.attrib mml.att-type) ;
mml.tan.qname ::= tan::(ε mml.operators.common.attrib) ;
mml.att-scriptlevel ::= (scriptlevel::mml.number.datatype)? ;
mml.ContInPres ::= mml.ci.qname | mml.csymbol.qname | mml.cn.qname | mml.c0ary | mml.apply.qname | mml.fn.qname | mml.lambda.qname | mml.reln.qname | mml.cconstructor | mml.semantics.qname | mml.declare.qname ;
mml.att-mathbackground ::= (mathbackground::mml.color.datatype)? ;
mml.sin.qname ::= sin::(ε mml.operators.common.attrib) ;
mml.MathExpression ::= (mml.PresInCont | mml.ContInPres)* ;
mml.att-verythinmathspace ::= (verythinmathspace::mml.length.datatype)? ;
mml.att-equalrows ::= (equalrows::("true" | "false"))? ;
mml.grad.qname ::= grad::(ε mml.operators.common.attrib) ;
mml.min.qname ::= min::(ε mml.operators.common.attrib) ;
mml.att-background ::= (background::mml.color.datatype)? ;
mml.munder.qname ::= munder::(mml.PresExpression mml.Common.attrib mml.att-accentunder) ;
mml.att-movablelimits ::= (movablelimits::("true" | "false"))? ;
mml.att-rowspacing ::= (rowspacing::mml.rowspacing.datatype)? ;
mml.Content ::= mml.ctoken | mml.cspecial | mml.cother | mml.csemantics | mml.c0ary | mml.cconstructor | mml.cquantifier | mml.cop1ary | mml.cop2ary | mml.copnary | mml.copmisc | mml.crel2ary | mml.crelnary ;
mml.bvar.qname ::= bvar::(mml.ContentExpression mml.Common.attrib) ;
mml.id.datatype ::= string() ;
mml.att-macros ::= (macros::string())? ;
mml.att-linethickness ::= (linethickness::(mml.length.datatype | "thin" | "medium" | "thick"))? ;
mml.csetrelnary ::= mml.subset.qname | mml.prsubset.qname ;
mml.rationals.qname ::= rationals::(ε mml.operators.common.attrib) ;
mml.exponentiale.qname ::= exponentiale::(ε mml.operators.common.attrib) ;
mml.ContentExpression ::= (mml.Content | mml.PresInCont)* ;
mml.att-close ::= (close::string())? ;
mml.pi.qname ::= pi::(ε mml.operators.common.attrib) ;
mml.att-lspace ::= (lspace::mml.namedspace.datatype)? ;
mml.forall.qname ::= forall::(ε mml.operators.common.attrib) ;
mml.clogicopquant ::= mml.exists.qname | mml.forall.qname ;
mml.arccos.qname ::= arccos::(ε mml.operators.common.attrib) ;
mml.namedspace.datatype ::= string() | "veryverythinmathspace" | "verythinmathspace" | "thinmathspace" | "mediummathspace" | "thickmathspace" | "verythickmathspace" | "veryverythickmathspace" ;
mml.att-columnalign ::= (columnalign::mml.columnalign.datatype)? ;
mml.arccoth.qname ::= arccoth::(ε mml.operators.common.attrib) ;
mml.att-opinfo ::= mml.att-form mml.att-fence mml.att-separator mml.att-lspace mml.att-rspace mml.att-stretchy mml.att-symmetric mml.att-maxsize mml.att-minsize mml.att-largeop mml.att-movablelimits mml.att-accent ;
mml.gt.qname ::= gt::(ε mml.operators.common.attrib) ;
mml.Presentation ::= mml.ptoken | mml.petoken | mml.pscreschema | mml.plschema | mml.peschema | mml.pactions ;
mml.att-columnlines ::= (columnlines::mml.lines.datatype)? ;
mml.product.qname ::= product::(ε mml.operators.common.attrib) ;
mml.int.qname ::= int::(ε mml.operators.common.attrib) ;
mml.att-name ::= (name::string())? ;
mml.clogicopnary ::= mml.and.qname | mml.or.qname | mml.xor.qname ;
mml.att-separator ::= (separator::("true" | "false"))? ;
mml.tanh.qname ::= tanh::(ε mml.operators.common.attrib) ;
mml.ms.qname ::= ms::((mml.MathMLCharacters | mml.malignmark.qname)* mml.Common.attrib mml.att-fontinfo mml.att-lquote mml.att-rquote) ;
mml.nonnegativefloat.datatype ::= string() ;
mml.tendsto.qname ::= tendsto::(ε mml.operators.common.attrib mml.att-type) ;
mml.att-thickmathspace ::= (thickmathspace::mml.length.datatype)? ;
mml.selector.qname ::= selector::(ε mml.operators.common.attrib) ;
mml.laplacian.qname ::= laplacian::(ε mml.operators.common.attrib) ;
mml.att-largeop ::= (largeop::("true" | "false"))? ;
mml.ccalcop1ary ::= mml.ln.qname ;
mml.att-fontinfo ::= mml.att-fontsize mml.att-fontweight mml.att-fontstyle mml.att-fontfamily mml.att-color mml.att-mathvariant mml.att-mathsize mml.att-mathcolor mml.att-mathbackground ;
mml.att-alttext ::= (alttext::string())? ;
mml.and.qname ::= and::(ε mml.operators.common.attrib) ;
mml.determinant.qname ::= determinant::(ε mml.operators.common.attrib) ;
mml.not.qname ::= not::(ε mml.operators.common.attrib) ;
mml.piecewise.qname ::= piecewise::(mml.piece.qname* mml.otherwise.qname? mml.Common.attrib) ;
mml.framespacing.datatype ::= string() | (string() | "veryverythinmathspace" | "verythinmathspace" | "thinmathspace" | "mediummathspace" | "thickmathspace" | "verythickmathspace" | "veryverythickmathspace") string() | (string() | "veryverythinmathspace" | "verythinmathspace" | "thinmathspace" | "mediummathspace" | "thickmathspace" | "verythickmathspace" | "veryverythickmathspace") ;
mml.att-rowalign ::= (rowalign::mml.rowalign.datatype)? ;
mml.cop1ary ::= mml.cfuncop1ary | mml.carithop1ary | mml.clogicop1ary | mml.ccalcop1ary | mml.ctrigop | mml.clalgop1ary | mml.csetop1ary ;
mml.att-width ::= (width::mml.namedspace.datatype)? ;
mml.att-fontstyle ::= (fontstyle::("normal" | "italic"))? ;
mml.att-rowlines ::= (rowlines::mml.lines.datatype)? ;
mml.partialdiff.qname ::= partialdiff::(ε mml.operators.common.attrib) ;
mml.moment.qname ::= moment::(ε mml.operators.common.attrib) ;
mml.csetrel2ary ::= mml.in.qname | mml.notin.qname | mml.notsubset.qname | mml.notprsubset.qname ;
mml.mover.qname ::= mover::(mml.PresExpression mml.Common.attrib mml.att-accent) ;
mml.att-closure ::= (closure::("open" | "closed" | "open-closed" | "closed-open"))? ;
mml.ptoken ::= mml.mi.qname | mml.mn.qname | mml.mo.qname | mml.mtext.qname | mml.ms.qname ;
mml.mpadded.qname ::= mpadded::(mml.PresExpression mml.Common.attrib mml.att-sizeinfo mml.att-lspace) ;
mml.mspace.qname ::= mspace::(ε mml.Common.attrib mml.att-sizeinfo mml.att-linebreak) ;
mml.rowspacing.datatype ::= string()+ ;
mml.csymbol.qname ::= csymbol::((mml.MathMLCharacters | mml.PresInCont)* mml.Common.attrib mml.att-type mml.att-definition mml.att-encoding) ;
mml.arctanh.qname ::= arctanh::(ε mml.operators.common.attrib) ;
mml.pgenschema ::= mml.mrow.qname | mml.mfrac.qname | mml.msqrt.qname | mml.mroot.qname | mml.menclose.qname | mml.mstyle.qname | mml.merror.qname | mml.mpadded.qname | mml.mphantom.qname | mml.mfenced.qname ;
mml.implies.qname ::= implies::(ε mml.operators.common.attrib) ;
mml.att-rspace ::= (rspace::mml.namedspace.datatype)? ;
mml.notsubset.qname ::= notsubset::(ε mml.operators.common.attrib) ;
mml.att-encoding ::= (encoding::string())? ;
mml.cfuncopnary ::= mml.fn.qname | mml.compose.qname ;
mml.att-bevelled ::= (bevelled::("true" | "false"))? ;
mml.idref.datatype ::= string() ;
mml.ident.qname ::= ident::(ε mml.operators.common.attrib) ;
mml.csetopnary ::= mml.union.qname | mml.intersect.qname | mml.cartesianproduct.qname ;
mml.equivalent.qname ::= equivalent::(ε mml.operators.common.attrib) ;
mml.att-open ::= (open::string())? ;
mml.ctoken ::= mml.csymbol.qname | mml.ci.qname | mml.cn.qname ;
mml.att-rowspan ::= (rowspan::("top" | "bottom" | "center" | "baseline" | "axis"))? ;
mml.clogicop2ary ::= mml.implies.qname ;
mml.mode.qname ::= mode::(ε mml.operators.common.attrib) ;
mml.menclose.qname ::= menclose::(mml.PresExpression mml.Common.attrib (notation::("longdiv" | "actuarial" | "radical"))?) ;
mml.root.qname ::= root::(ε mml.operators.common.attrib) ;
mml.mn.qname ::= mn::((mml.MathMLCharacters | mml.malignmark.qname)* mml.Common.attrib mml.att-fontinfo) ;
mml.factorial.qname ::= factorial::(ε mml.operators.common.attrib) ;
mml.max.qname ::= max::(ε mml.operators.common.attrib) ;
mml.csemantics ::= mml.semantics.qname | mml.annotation.qname | mml.annotation-xml.qname ;
mml.clalgopnary ::= mml.selector.qname ;
mml.groupalign.datatype ::= string() ;
mml.length.datatype ::= string() ;
mml.complexes.qname ::= complexes::(ε mml.operators.common.attrib) ;
mml.PresInCont ::= mml.ptoken | mml.petoken | mml.plschema | mml.peschema | mml.pactions ;
mml.exp.qname ::= exp::(ε mml.operators.common.attrib) ;
mml.condition.qname ::= condition::(mml.ContentExpression mml.Common.attrib) ;
mml.att-verythickmathspace ::= (verythickmathspace::mml.length.datatype)? ;
mml.att-framespacing ::= (framespacing::mml.framespacing.datatype)? ;
mml.att-displaystyle ::= (displaystyle::("true" | "false"))? ;
mml.degree.qname ::= degree::(mml.ContentExpression mml.Common.attrib) ;
mml.peschema ::= mml.maligngroup.qname | mml.malignmark.qname ;
mml.fn.qname ::= fn::(mml.ContentExpression mml.operators.common.attrib) ;
mml.att-equalcolumns ::= (equalcolumns::("true" | "false"))? ;
mml.domain.qname ::= domain::(ε mml.operators.common.attrib) ;
mml.cos.qname ::= cos::(ε mml.operators.common.attrib) ;
mml.sdev.qname ::= sdev::(ε mml.operators.common.attrib) ;
mml.log.qname ::= log::(ε mml.operators.common.attrib) ;
mml.annotation-xml.qname ::= annotation-xml::(mml.Annotation-xml.datatype mml.Common.attrib mml.att-encoding) ;
mml.divide.qname ::= divide::(ε mml.operators.common.attrib) ;
mml.none.qname ::= none::ε ;
mml.reln.qname ::= reln::(mml.ContentExpression mml.Common.attrib) ;
mml.emptyset.qname ::= emptyset::(ε mml.operators.common.attrib) ;
mml.codomain.qname ::= codomain::(ε mml.operators.common.attrib) ;
mml.otherwise.qname ::= otherwise::(mml.ContentExpression mml.Common.attrib) ;
mml.att-frame ::= (frame::("none" | "solid" | "dashed"))? ;
mml.att-lquote ::= (lquote::string())? ;
mml.curl.qname ::= curl::(ε mml.operators.common.attrib) ;
mml.inverse.qname ::= inverse::(ε mml.operators.common.attrib) ;
mml.att-scriptsizemultiplier ::= (scriptsizemultiplier::mml.nonnegativefloat.datatype)? ;
mml.quotient.qname ::= quotient::(ε mml.operators.common.attrib) ;
mml.infinity.qname ::= infinity::(ε mml.operators.common.attrib) ;
mml.csetop2ary ::= mml.setdiff.qname ;
mml.att-mathsize ::= (mathsize::("small" | "normal" | "big" | mml.length.datatype))? ;
mml.att-color ::= (color::mml.color.datatype)? ;
mml.arccsc.qname ::= arccsc::(ε mml.operators.common.attrib) ;
mml.munderover.qname ::= munderover::(mml.PresExpression mml.Common.attrib mml.att-accent mml.att-accentunder) ;
mml.mglyph.qname ::= mglyph::(ε mml.att-alt mml.att-fontfamily mml.att-index) ;
mml.real.qname ::= real::(ε mml.operators.common.attrib) ;
mml.mi.qname ::= mi::((mml.MathMLCharacters | mml.malignmark.qname)* mml.Common.attrib mml.att-fontinfo) ;
mml.mmultiscripts.qname ::= mmultiscripts::(mml.PresExpression mml.Common.attrib mml.att-subscriptshift mml.att-superscriptshift) ;
mml.att-altimg ::= (altimg::mml.uri.datatype)? ;
mml.clalgop2ary ::= mml.vectorproduct.qname | mml.scalarproduct.qname | mml.outerproduct.qname ;
mml.mfrac.qname ::= mfrac::(mml.PresExpression mml.Common.attrib mml.att-bevelled mml.att-linethickness) ;
mml.xor.qname ::= xor::(ε mml.operators.common.attrib) ;
mml.mtext.qname ::= mtext::((mml.MathMLCharacters | mml.malignmark.qname)* mml.Common.attrib mml.att-fontinfo) ;
mml.neq.qname ::= neq::(ε mml.operators.common.attrib) ;
mml.csch.qname ::= csch::(ε mml.operators.common.attrib) ;
mml.leq.qname ::= leq::(ε mml.operators.common.attrib) ;
mml.cgenrelnary ::= mml.eq.qname | mml.leq.qname | mml.lt.qname | mml.geq.qname | mml.gt.qname | mml.equivalent.qname | mml.approx.qname ;
mml.outerproduct.qname ::= outerproduct::(ε mml.operators.common.attrib) ;
mml.conjugate.qname ::= conjugate::(ε mml.operators.common.attrib) ;
mml.att-fontfamily ::= (fontfamily::string())? ;
mml.card.qname ::= card::(ε mml.operators.common.attrib) ;
mml.att-order ::= (order::("lexicographic" | "numeric"))? ;
mml.att-actiontype ::= ((actiontype::"toggle" selection::mml.positiveinteger.datatype) | (actiontype::"statusline") | (actiontype::"tooltip") | (actiontype::"highlight" mml.color.datatype*) | (actiontype::"menu" selection::mml.positiveinteger.datatype))? ;
mml.true.qname ::= true::(ε mml.operators.common.attrib) ;
mml.carithop1or2ary ::= mml.minus.qname ;
mml.mroot.qname ::= mroot::(mml.PresExpression mml.Common.attrib) ;
mml.union.qname ::= union::(ε mml.operators.common.attrib) ;
mml.median.qname ::= median::(ε mml.operators.common.attrib) ;
mml.math.qname ::= math::(mml.MathExpression mml.att-topinfo mml.att-browif) ;
mml.Annotation-xml.datatype ::= (string() | (string()* mml.Annotation-xml.datatype))* ;
mml.sum.qname ::= sum::(ε mml.operators.common.attrib) ;
mml.clogicop1ary ::= mml.not.qname ;
mml.crelnary ::= mml.cgenrelnary | mml.csetrelnary ;
mml.cosh.qname ::= cosh::(ε mml.operators.common.attrib) ;
mml.mphantom.qname ::= mphantom::(mml.PresExpression mml.Common.attrib) ;
mml.cstatopnary ::= mml.mean.qname | mml.sdev.qname | mml.variance.qname | mml.median.qname | mml.mode.qname ;
mml.arcsec.qname ::= arcsec::(ε mml.operators.common.attrib) ;
mml.mfenced.qname ::= mfenced::(mml.PresExpression mml.Common.attrib mml.att-open mml.att-close mml.att-separators) ;
mml.merror.qname ::= merror::(mml.PresExpression mml.Common.attrib) ;
mml.Common.attrib ::= (xlink:href::mml.uri.datatype)? (class::string())? (style::string())? (id::mml.id.datatype)? (xref::mml.idref.datatype)? (other::string())? ;
mml.PresExpression ::= (mml.Presentation | mml.ContInPres)* ;
mml.ceiling.qname ::= ceiling::(ε mml.operators.common.attrib) ;
mml.limit.qname ::= limit::(ε mml.operators.common.attrib) ;
mml.sech.qname ::= sech::(ε mml.operators.common.attrib) ;
mml.arccot.qname ::= arccot::(ε mml.operators.common.attrib) ;
mml.rowalign.datatype ::= ("top" | "bottom" | "center" | "baseline" | "axis")+ ;
mml.transpose.qname ::= transpose::(ε mml.operators.common.attrib) ;
mml.divergence.qname ::= divergence::(ε mml.operators.common.attrib) ;
mml.att-browif ::= mml.att-type mml.att-name mml.att-height mml.att-width mml.att-baseline mml.att-overflow mml.att-altimg mml.att-alttext ;
mml.imaginaryi.qname ::= imaginaryi::(ε mml.operators.common.attrib) ;
mml.att-fontsize ::= (fontsize::mml.length.datatype)? ;
mml.att-rquote ::= (rquote::string())? ;
mml.arccsch.qname ::= arccsch::(ε mml.operators.common.attrib) ;
mml.cseqrel2ary ::= mml.tendsto.qname ;
mml.columnspan.datatype ::= mml.positiveinteger.datatype ;
mml.exists.qname ::= exists::(ε mml.operators.common.attrib) ;
mml.att-edge ::= (edge::("left" | "right"))? ;
mml.sep.qname ::= sep::ε ;
mml.mtd.qname ::= mtd::(mml.PresExpression mml.Common.attrib mml.att-rowalign mml.att-columnalign mml.att-groupalign mml.att-rowspan mml.att-columnspan) ;
mml.imaginary.qname ::= imaginary::(ε mml.operators.common.attrib) ;
mml.arg.qname ::= arg::(ε mml.operators.common.attrib) ;
mml.cgenrel2ary ::= mml.neq.qname | mml.factorof.qname ;
mml.arccosh.qname ::= arccosh::(ε mml.operators.common.attrib) ;
mml.cfuncop1ary ::= mml.inverse.qname | mml.ident.qname | mml.domain.qname | mml.codomain.qname | mml.image.qname ;
mml.att-separators ::= (separators::string())? ;
mml.msqrt.qname ::= msqrt::(mml.PresExpression mml.Common.attrib) ;
mml.momentabout.qname ::= momentabout::(mml.ContentExpression mml.Common.attrib) ;
mml.csetop1ary ::= mml.card.qname ;
mml.vectorproduct.qname ::= vectorproduct::(ε mml.operators.common.attrib) ;
mml.att-align ::= (align::mml.align.datatype)? ;
mml.pscrschema ::= mml.msub.qname | mml.msup.qname | mml.msubsup.qname | mml.munder.qname | mml.mover.qname | mml.munderover.qname | mml.mmultiscripts.qname ;
mml.att-height ::= (height::mml.length.datatype)? ;
mml.att-topinfo ::= mml.Common.attrib mml.att-macros mml.att-mode mml.att-display ;
mml.arcsech.qname ::= arcsech::(ε mml.operators.common.attrib) ;
mml.pscreschema ::= mml.mprescripts.qname | mml.none.qname ;
mml.naturalnumbers.qname ::= naturalnumbers::(ε mml.operators.common.attrib) ;
mml.att-mode ::= (mode::string())? ;
mml.power.qname ::= power::(ε mml.operators.common.attrib) ;
mml.att-mathvariant ::= (mathvariant::("normal" | "bold" | "italic" | "bold-italic" | "double-struck" | "bold-fraktur" | "script" | "bold-script" | "fraktur" | "sans-serif" | "bold-sans-serif" | "sans-serif-italic" | "sans-serif-bold-italic" | "monospace"))? ;
mml.scalarproduct.qname ::= scalarproduct::(ε mml.operators.common.attrib) ;
mml.crel2ary ::= mml.cgenrel2ary | mml.csetrel2ary | mml.cseqrel2ary ;
mml.clalgop1ary ::= mml.determinant.qname | mml.transpose.qname ;
mml.notin.qname ::= notin::(ε mml.operators.common.attrib) ;
mml.variance.qname ::= variance::(ε mml.operators.common.attrib) ;
mml.csc.qname ::= csc::(ε mml.operators.common.attrib) ;
mml.mprescripts.qname ::= mprescripts::ε ;
mml.cn.qname ::= cn::((mml.MathMLCharacters | mml.PresInCont | mml.sep.qname)* mml.Common.attrib mml.att-type mml.att-base mml.att-definition mml.att-encoding) ;
mml.att-maxsize ::= (maxsize::(mml.namedspace.datatype | "infinity"))? ;
mml.lowlimit.qname ::= lowlimit::(mml.ContentExpression mml.Common.attrib) ;
mml.prsubset.qname ::= prsubset::(ε mml.operators.common.attrib) ;
mml.mo.qname ::= mo::((mml.MathMLCharacters | mml.malignmark.qname)* mml.Common.attrib mml.att-fontinfo mml.att-opinfo) ;
mml.align.datatype ::= "top" | "bottom" | "center" | "baseline" | "axis" integer()? ;
mml.maction.qname ::= maction::(mml.PresExpression mml.Common.attrib mml.att-actiontype) ;
mml.uri.datatype ::= string() ;
mml.image.qname ::= image::(ε mml.operators.common.attrib) ;
mml.carithopnary ::= mml.plus.qname | mml.times.qname | mml.max.qname | mml.min.qname | mml.gcd.qname | mml.lcm.qname ;
mml.att-minsize ::= (minsize::mml.namedspace.datatype)? ;
mml.att-index ::= (index::mml.number.datatype)? ;
mml.petoken ::= mml.mspace.qname ;
mml.att-accentunder ::= (accentunder::("true" | "false"))? ;
mml.sinh.qname ::= sinh::(ε mml.operators.common.attrib) ;
--------------------markup::pnml-anyElement.bgf--------------------
anyElement ::= (α | string() | anyElement)* ;
--------------------markup::pnml-arbitrarydeclarations.bgf--------------------
SortDeclaration ::= ArbitrarySort ;
ArbitraryOperator ::= arbitraryoperator::(OperatorDeclaration.content (input::Sort)* output::Sort) ;
OperatorDeclaration ::= ArbitraryOperator ;
ArbitrarySort ::= arbitrarysort::SortDeclaration.content ;
--------------------markup::pnml-booleans.bgf--------------------
BooleanConstant ::= booleanconstant::(value::("true" | "false") BuiltInConstant.content) ;
BooleanOperator ::= And | Or | Imply | Not ;
BooleanOperator.content ::= BuiltInOperator.content ;
BuiltInConstant ::= BooleanConstant ;
BuiltInOperator ::= BooleanOperator ;
BuiltInSort ::= Bool ;
--------------------markup::pnml-conventions.bgf--------------------
positiveintegerlabel.content ::= text::integer() annotationstandard.content ;
nonnegativeintegerlabel.content ::= text::integer() annotationstandard.content ;
--------------------markup::pnml-cyclicenumerations.bgf--------------------
CyclicEnumOperator ::= Successor | Predecessor ;
CyclicEnumeration ::= cyclicenumeration::FiniteEnumeration.content ;
CyclicEnumOperator.content ::= BuiltInOperator.content ;
BuiltInOperator ::= CyclicEnumOperator ;
BuiltInSort ::= CyclicEnumeration ;
--------------------markup::pnml-dots.bgf--------------------
DotConstant ::= dotconstant::ε ;
BuiltInConstant ::= DotConstant ;
BuiltInSort ::= Dot ;
--------------------markup::r2ml.bgf--------------------
DerivationRuleSet ::= (rules::Rules/DerivationRule)+ ;
RuleBase ::= vocabularies::Vocabulary/VocBasic/Vocabulary (externalVocabulaires::Vocabulary/VocBuiltin/ExternalVocabulary)+ (rules::RuleSet)+ ruleBaseID::String ;
ProductionRuleSet ::= (rules::Rules/ProductionRule)+ ;
ReactionRuleSet ::= (rules::Rules/ReactionRule)+ ;
CollectionTypes ::= (individual::ε) | (set::ε) | (orderedSet::ε) | (bag::ε) | (sequence::ε) ;
IntegrityRuleSet ::= (rules::Rules/IntegrityRule)+ ;
ExternalVocabularyLanguage ::= (RDFS::ε) | (UML::ε) | (OWL::ε) ;
RuleSet ::= ReactionRuleSet ;
 RuleSet ::= ProductionRuleSet ;
 RuleSet ::= IntegrityRuleSet ;
 RuleSet ::= DerivationRuleSet ;
PredicateCategory ::= (closed::ε) | (open::ε) | (partial::ε) ;
EventType ::= eventTypeID::String ;
PredicateType ::= (ObjectClassificationPredicate::ε) | (AttributionPredicate::ε) | (AssociationPredicate::ε) | (ReferencePropertyPredicate::ε) | (EqualityPredicate::ε) | (InequalityPredicate::ε) | (DatatypePredicate::ε) | (DataClassificationPredicate::ε) ;
--------------------markup::pnml-ext-inhibitor.bgf--------------------
page.labels ::= ε ;
PTArcAnnotation ::= inscription::positiveintegerlabel.content ;
specialarc.value ::= "normal" | "inhibitor" | "read" | "reset" ;
positiveintegerlabel.content ::= text::integer() annotationstandard.content ;
transition.labels ::= ε ;
basicobject.content ::= Name? toolspecific.element* ;
position.element ::= position::coordinate.attributes ;
annotationstandard.content ::= (graphics::annotationgraphics.content)? toolspecific.element* ;
dimension.element ::= dimension::(x::positiveDecimal.content y::positiveDecimal.content) ;
identifier.content ::= id::string() ;
anyElement ::= (α | string() | anyElement)* ;
net.labels ::= ε ;
pnml.element ::= pnml::(pnml.content+) ;
net.element ::= net::(identifier.content nettype.uri Name? net.labels page.content+ toolspecific.element*) ;
simpletext.content ::= (text::string())? ;
pnml.content ::= net.element ;
netobject.content ::= page.content | place.content | transition.content | refplace.content | reftrans.content | arc.content ;
color.type ::= string() ;
pagegraphics.content ::= nodegraphics.content ;
positiveDecimal.content ::= integer() ;
offset.element ::= offset::coordinate.attributes ;
refnode.content ::= identifier.content reference basicobject.content node.content ;
transition.content ::= transition::(identifier.content basicobject.content transition.labels node.content) ;
refplace.content ::= referencePlace::refnode.content ;
font.element ::= font::((family::string())? (style::string())? (weight::string())? (size::string())? (decoration::("underline" | "overline" | "line-through"))? (align::("left" | "center" | "right"))? (rotation::integer())?) ;
arc.content ::= arc::(identifier.content source::string() target::string() Name? arc.labels (graphics::edgegraphics.content)? toolspecific.element*) ;
arc.labels ::= ArcType ;
 arc.labels ::= PTArcAnnotation? ;
 arc.labels ::= ε ;
page.content ::= page::(identifier.content basicobject.content page.labels netobject.content* (graphics::pagegraphics.content)?) ;
toolspecific.element ::= toolspecific::(tool::string() version::string() anyElement*) ;
nodegraphics.content ::= position.element dimension.element? fill.element? line.element? ;
nettype.uri ::= type::"http://www.pnml.org/version-2009/grammar/ptnet" ;
 nettype.uri ::= type::"http://www.pnml.org/version-2009/grammar/pnmlcoremodel" ;
edgegraphics.content ::= position.element* line.element? ;
place.content ::= place::(identifier.content basicobject.content place.labels node.content) ;
fill.element ::= fill::((color::color.type)? (gradient-color::color.type)? (gradient-rotation::("vertical" | "horizontal" | "diagonal"))? (image::string())?) ;
PTMarking ::= initialMarking::nonnegativeintegerlabel.content ;
coordinate.attributes ::= x::integer() y::integer() ;
node.content ::= (graphics::nodegraphics.content)? ;
ArcType ::= arctype::specialarc.value ;
place.labels ::= PTMarking? ;
 place.labels ::= ε ;
annotationgraphics.content ::= offset.element fill.element? line.element? font.element? ;
nonnegativeintegerlabel.content ::= text::integer() annotationstandard.content ;
line.element ::= line::((shape::("line" | "curve"))? (color::color.type)? (width::positiveDecimal.content)? (style::("solid" | "dash" | "dot"))?) ;
reftrans.content ::= referenceTransition::refnode.content ;
simpletextlabel.content ::= simpletext.content annotationstandard.content ;
--------------------markup::pnml-ext-reset.bgf--------------------
page.labels ::= ε ;
PTArcAnnotation ::= inscription::positiveintegerlabel.content ;
specialarc.value ::= "normal" | "inhibitor" | "read" | "reset" ;
positiveintegerlabel.content ::= text::integer() annotationstandard.content ;
transition.labels ::= ε ;
basicobject.content ::= Name? toolspecific.element* ;
position.element ::= position::coordinate.attributes ;
annotationstandard.content ::= (graphics::annotationgraphics.content)? toolspecific.element* ;
dimension.element ::= dimension::(x::positiveDecimal.content y::positiveDecimal.content) ;
identifier.content ::= id::string() ;
anyElement ::= (α | string() | anyElement)* ;
net.labels ::= ε ;
pnml.element ::= pnml::(pnml.content+) ;
net.element ::= net::(identifier.content nettype.uri Name? net.labels page.content+ toolspecific.element*) ;
simpletext.content ::= (text::string())? ;
pnml.content ::= net.element ;
netobject.content ::= page.content | place.content | transition.content | refplace.content | reftrans.content | arc.content ;
color.type ::= string() ;
pagegraphics.content ::= nodegraphics.content ;
positiveDecimal.content ::= integer() ;
offset.element ::= offset::coordinate.attributes ;
refnode.content ::= identifier.content reference basicobject.content node.content ;
transition.content ::= transition::(identifier.content basicobject.content transition.labels node.content) ;
refplace.content ::= referencePlace::refnode.content ;
font.element ::= font::((family::string())? (style::string())? (weight::string())? (size::string())? (decoration::("underline" | "overline" | "line-through"))? (align::("left" | "center" | "right"))? (rotation::integer())?) ;
arc.content ::= arc::(identifier.content source::string() target::string() Name? arc.labels (graphics::edgegraphics.content)? toolspecific.element*) ;
arc.labels ::= ArcType ;
 arc.labels ::= PTArcAnnotation? ;
 arc.labels ::= ε ;
page.content ::= page::(identifier.content basicobject.content page.labels netobject.content* (graphics::pagegraphics.content)?) ;
toolspecific.element ::= toolspecific::(tool::string() version::string() anyElement*) ;
nodegraphics.content ::= position.element dimension.element? fill.element? line.element? ;
nettype.uri ::= type::"http://www.pnml.org/version-2009/grammar/ptnet" ;
 nettype.uri ::= type::"http://www.pnml.org/version-2009/grammar/pnmlcoremodel" ;
edgegraphics.content ::= position.element* line.element? ;
place.content ::= place::(identifier.content basicobject.content place.labels node.content) ;
fill.element ::= fill::((color::color.type)? (gradient-color::color.type)? (gradient-rotation::("vertical" | "horizontal" | "diagonal"))? (image::string())?) ;
PTMarking ::= initialMarking::nonnegativeintegerlabel.content ;
coordinate.attributes ::= x::integer() y::integer() ;
node.content ::= (graphics::nodegraphics.content)? ;
ArcType ::= arctype::specialarc.value ;
place.labels ::= PTMarking? ;
 place.labels ::= ε ;
annotationgraphics.content ::= offset.element fill.element? line.element? font.element? ;
nonnegativeintegerlabel.content ::= text::integer() annotationstandard.content ;
line.element ::= line::((shape::("line" | "curve"))? (color::color.type)? (width::positiveDecimal.content)? (style::("solid" | "dash" | "dot"))?) ;
reftrans.content ::= referenceTransition::refnode.content ;
simpletextlabel.content ::= simpletext.content annotationstandard.content ;
--------------------markup::pnml-ext-resetinhibitor.bgf--------------------
page.labels ::= ε ;
PTArcAnnotation ::= inscription::positiveintegerlabel.content ;
specialarc.value ::= "normal" | "inhibitor" | "read" | "reset" ;
positiveintegerlabel.content ::= text::integer() annotationstandard.content ;
transition.labels ::= ε ;
basicobject.content ::= Name? toolspecific.element* ;
position.element ::= position::coordinate.attributes ;
annotationstandard.content ::= (graphics::annotationgraphics.content)? toolspecific.element* ;
dimension.element ::= dimension::(x::positiveDecimal.content y::positiveDecimal.content) ;
identifier.content ::= id::string() ;
anyElement ::= (α | string() | anyElement)* ;
net.labels ::= ε ;
pnml.element ::= pnml::(pnml.content+) ;
net.element ::= net::(identifier.content nettype.uri Name? net.labels page.content+ toolspecific.element*) ;
simpletext.content ::= (text::string())? ;
pnml.content ::= net.element ;
netobject.content ::= page.content | place.content | transition.content | refplace.content | reftrans.content | arc.content ;
color.type ::= string() ;
pagegraphics.content ::= nodegraphics.content ;
positiveDecimal.content ::= integer() ;
offset.element ::= offset::coordinate.attributes ;
refnode.content ::= identifier.content reference basicobject.content node.content ;
transition.content ::= transition::(identifier.content basicobject.content transition.labels node.content) ;
refplace.content ::= referencePlace::refnode.content ;
font.element ::= font::((family::string())? (style::string())? (weight::string())? (size::string())? (decoration::("underline" | "overline" | "line-through"))? (align::("left" | "center" | "right"))? (rotation::integer())?) ;
arc.content ::= arc::(identifier.content source::string() target::string() Name? arc.labels (graphics::edgegraphics.content)? toolspecific.element*) ;
arc.labels ::= ArcType ;
 arc.labels ::= PTArcAnnotation? ;
 arc.labels ::= ε ;
page.content ::= page::(identifier.content basicobject.content page.labels netobject.content* (graphics::pagegraphics.content)?) ;
toolspecific.element ::= toolspecific::(tool::string() version::string() anyElement*) ;
nodegraphics.content ::= position.element dimension.element? fill.element? line.element? ;
nettype.uri ::= type::"http://www.pnml.org/version-2009/grammar/ptnet" ;
 nettype.uri ::= type::"http://www.pnml.org/version-2009/grammar/pnmlcoremodel" ;
edgegraphics.content ::= position.element* line.element? ;
place.content ::= place::(identifier.content basicobject.content place.labels node.content) ;
fill.element ::= fill::((color::color.type)? (gradient-color::color.type)? (gradient-rotation::("vertical" | "horizontal" | "diagonal"))? (image::string())?) ;
PTMarking ::= initialMarking::nonnegativeintegerlabel.content ;
coordinate.attributes ::= x::integer() y::integer() ;
node.content ::= (graphics::nodegraphics.content)? ;
ArcType ::= arctype::specialarc.value ;
place.labels ::= PTMarking? ;
 place.labels ::= ε ;
annotationgraphics.content ::= offset.element fill.element? line.element? font.element? ;
nonnegativeintegerlabel.content ::= text::integer() annotationstandard.content ;
line.element ::= line::((shape::("line" | "curve"))? (color::color.type)? (width::positiveDecimal.content)? (style::("solid" | "dash" | "dot"))?) ;
reftrans.content ::= referenceTransition::refnode.content ;
simpletextlabel.content ::= simpletext.content annotationstandard.content ;
--------------------markup::pnml-ext-specialarcs.bgf--------------------
ArcType ::= arctype::specialarc.value ;
specialarc.value ::= "normal" | "inhibitor" | "read" | "reset" ;
--------------------markup::pnml-finiteenumerations.bgf--------------------
FiniteEnumeration ::= finiteenumeration::FiniteEnumeration.content ;
OperatorDeclaration ::= FEConstant ;
FEConstant ::= feconstant::OperatorDeclaration.content ;
FiniteEnumeration.content ::= FEConstant* ;
BuiltInSort ::= FiniteEnumeration ;
--------------------markup::pnml-finiteintranges.bgf--------------------
FiniteIntRange ::= finiteintrange::(start::integer() end::integer()) ;
FIRGreaterThan ::= greaterthan::FiniteIntRangeOperator.content ;
FiniteIntRangeOperator.content ::= BuiltInOperator.content ;
FIRLessThan ::= lessthan::FiniteIntRangeOperator.content ;
FIRLessThanOrEqual ::= lessthanorequal::FiniteIntRangeOperator.content ;
BuiltInConstant ::= FiniteIntRangeConstant ;
BuiltInOperator ::= FiniteIntRangeOperator ;
FIRGreaterThanOrEqual ::= greaterthanorequal::FiniteIntRangeOperator.content ;
FiniteIntRangeConstant ::= finiteintrangeconstant::(value::integer() FiniteIntRange BuiltInConstant.content) ;
FiniteIntRangeOperator ::= FIRLessThan | FIRLessThanOrEqual | FIRGreaterThan | FIRGreaterThanOrEqual ;
BuiltInSort ::= FiniteIntRange ;
--------------------markup::pnml-guyard-basic.bgf--------------------
NetElement ::= type::URI document::PNMLDocument (contents::NetContent)+ (tools::ToolSpecific)+ netgraphics::NetGraphics name::Name ;
AlignType ::= (atleft::ε) | (atcenter::ε) | (atright::ε) ;
NetContent ::= NetContentElement ;
 NetContent ::= Arc ;
ShapeType ::= (shtline::ε) | (shtcurve::ε) ;
AnnotationGraphics ::= namedelement::LabeledElement offset::Offset font::Font fill::Fill line::Line ;
PNMLDocument ::= xmlns::URI (nets::NetElement)+ ;
RotationType ::= (rtvertical::ε) | (rthorizontal::ε) | (rtdiagonal::ε) ;
InitialMarking ::= place::Place ;
AnyElement ::= name::String text::String ;
NodeGraphics ::= node::Node position::Position dimension::Dimension fill::Fill line::Line ;
URI ::= value::String ;
StyleType ::= (sttsolid::ε) | (sttdash::ε) | (sttdot::ε) ;
ToolSpecific ::= tool::String version::String (anyelement::AnyElement)+ net::NetElement arc::Arc node::Node ;
DecorationType ::= (dtunderligne::ε) | (dtoverligne::ε) | (dtlinethrough::ε) ;
LabeledElement ::= Name ;
 LabeledElement ::= Inscription ;
 LabeledElement ::= InitialMarking ;
EdgeGraphics ::= arc::Arc (position::Position)+ fill::Fill line::Line ;
NetGraphics ::= net::NetElement ;
IdedElement ::= NetElement ;
 IdedElement ::= Node ;
 IdedElement ::= Arc ;
NetContentElement ::= Place ;
 NetContentElement ::= Transition ;
--------------------markup::pnml-guyard-modular.bgf--------------------
NetElement ::= type::URI document::PNMLDocument (contents::NetContent)+ (tools::ToolSpecific)+ netgraphics::NetGraphics name::Name ;
AlignType ::= (atleft::ε) | (atcenter::ε) | (atright::ε) ;
NetContent ::= NetContentElement ;
 NetContent ::= Arc ;
 NetContent ::= Page ;
 NetContent ::= ReferencePlace ;
 NetContent ::= ReferenceTransition ;
 NetContent ::= Instance ;
ReferencePlace ::= net::NetElement name::Name page::Page module::Module instance::Node ref::NCName importnode::ImportNode ;
ShapeType ::= (shtline::ε) | (shtcurve::ε) ;
PageGraphics ::= page::Page ;
AnnotationGraphics ::= namedelement::LabeledElement offset::Offset font::Font fill::Fill line::Line ;
PNMLDocument ::= xmlns::URI (nets::NetElement)+ (modules::Module)+ ;
RotationType ::= (rtvertical::ε) | (rthorizontal::ε) | (rtdiagonal::ε) ;
InitialMarking ::= place::Place ;
AnyElement ::= name::String text::String ;
NodeGraphics ::= node::Node position::Position dimension::Dimension fill::Fill line::Line ;
URI ::= value::String ;
StyleType ::= (sttsolid::ε) | (sttdash::ε) | (sttdot::ε) ;
ToolSpecific ::= tool::String version::String (anyelement::AnyElement)+ net::NetElement arc::Arc node::Node page::Page ;
DecorationType ::= (dtunderligne::ε) | (dtoverligne::ε) | (dtlinethrough::ε) ;
LabeledElement ::= Name ;
 LabeledElement ::= Inscription ;
 LabeledElement ::= InitialMarking ;
EdgeGraphics ::= arc::Arc (position::Position)+ fill::Fill line::Line ;
NetGraphics ::= net::NetElement ;
ImportNode ::= parameter::NCName ref::Reference instanceplace::Instance instancetransition::Instance ;
IdedElement ::= Module ;
 IdedElement ::= NetElement ;
 IdedElement ::= Node ;
 IdedElement ::= Arc ;
 IdedElement ::= Page ;
 IdedElement ::= Instance ;
ReferenceTransition ::= net::NetElement name::Name page::Page module::Module instance::Node ref::NCName importnode::ImportNode ;
NCName ::= value::String ;
NetContentElement ::= Place ;
 NetContentElement ::= Transition ;
--------------------markup::pnml-guyard-simplified.bgf--------------------
NetElement ::= type::URI document::PNMLDocument (contents::NetContent)+ name::Name ;
NetContent ::= NetContentElement ;
 NetContent ::= Arc ;
URI ::= value::String ;
LocatedElement ::= IdedElement ;
 LocatedElement ::= URI ;
 LocatedElement ::= PNMLDocument ;
 LocatedElement ::= NetContent ;
 LocatedElement ::= LabeledElement ;
 LocatedElement ::= Label ;
LabeledElement ::= Name ;
PNMLDocument ::= xmlns::URI (nets::NetElement)+ ;
IdedElement ::= NetElement ;
 IdedElement ::= NetContentElement ;
 IdedElement ::= Arc ;
NetContentElement ::= Place ;
 NetContentElement ::= Transition ;
--------------------markup::pnml-guyard-structured.bgf--------------------
NetElement ::= type::URI document::PNMLDocument (contents::NetContent)+ (tools::ToolSpecific)+ netgraphics::NetGraphics name::Name ;
AlignType ::= (atleft::ε) | (atcenter::ε) | (atright::ε) ;
NetContent ::= NetContentElement ;
 NetContent ::= Arc ;
 NetContent ::= Page ;
 NetContent ::= ReferencePlace ;
 NetContent ::= ReferenceTransition ;
ReferencePlace ::= net::NetElement name::Name page::Page ref::Node ;
ShapeType ::= (shtline::ε) | (shtcurve::ε) ;
PageGraphics ::= page::Page ;
AnnotationGraphics ::= namedelement::LabeledElement offset::Offset font::Font fill::Fill line::Line ;
PNMLDocument ::= xmlns::URI (nets::NetElement)+ ;
RotationType ::= (rtvertical::ε) | (rthorizontal::ε) | (rtdiagonal::ε) ;
InitialMarking ::= place::Place ;
AnyElement ::= name::String text::String ;
NodeGraphics ::= node::Node position::Position dimension::Dimension fill::Fill line::Line ;
URI ::= value::String ;
StyleType ::= (sttsolid::ε) | (sttdash::ε) | (sttdot::ε) ;
ToolSpecific ::= tool::String version::String (anyelement::AnyElement)+ net::NetElement arc::Arc node::Node page::Page ;
DecorationType ::= (dtunderligne::ε) | (dtoverligne::ε) | (dtlinethrough::ε) ;
LabeledElement ::= Name ;
 LabeledElement ::= Inscription ;
 LabeledElement ::= InitialMarking ;
EdgeGraphics ::= arc::Arc (position::Position)+ fill::Fill line::Line ;
NetGraphics ::= net::NetElement ;
IdedElement ::= NetElement ;
 IdedElement ::= Node ;
 IdedElement ::= Arc ;
 IdedElement ::= Page ;
NetContentElement ::= Place ;
 NetContentElement ::= Transition ;
ReferenceTransition ::= net::NetElement name::Name page::Page ref::Node ;
--------------------markup::pnml-highlevelnet.bgf--------------------
FiniteIntRange ::= finiteintrange::(start::integer() end::integer()) ;
LessThan ::= lt::IntegerOperator ;
basicobject.content ::= Name? toolspecific.element* ;
MultisetOperator.content ::= Operator.content ;
FiniteEnumeration ::= finiteenumeration::FiniteEnumeration.content ;
ListAppend ::= listappend::ListOperator.content ;
annotationstandard.content ::= (graphics::annotationgraphics.content)? toolspecific.element* ;
StringLength ::= stringlength::StringOperator.content ;
GreaterThanOrEqual ::= geq::IntegerOperator ;
StringOperator ::= StringLessThan | StringLessThanOrEqual | StringGreaterThan | StringGreaterThanOrEqual | StringConcatenation | StringAppend | StringLength | Substring ;
StringConstant ::= stringconstant::(StringConstant.content BuiltInConstant.content) ;
dimension.element ::= dimension::(x::positiveDecimal.content y::positiveDecimal.content) ;
BuiltInConstant.content ::= Operator.content ;
BuiltInOperator.content ::= Operator.content ;
anyElement ::= (α | string() | anyElement)* ;
net.labels ::= HLDeclaration* ;
 net.labels ::= ε ;
IntegerOperator.content ::= BuiltInOperator.content ;
DotConstant ::= dotconstant::ε ;
MultisetOperator ::= Add | All | NumberOf | Subtract | ScalarProduct | Empty ;
 MultisetOperator ::= ε ;
EmptyList ::= emptylist::(Sort BuiltInConstant.content) ;
simpletext.content ::= (text::string())? ;
FIRLessThan ::= lessthan::FiniteIntRangeOperator.content ;
FIRLessThanOrEqual ::= lessthanorequal::FiniteIntRangeOperator.content ;
MultisetSort ::= multisetsort::Sort ;
SortDeclaration.content ::= Declaration.content ;
StringGreaterThanOrEqual ::= geqs::StringOperator.content ;
BuiltInConstant ::= EmptyList ;
 BuiltInConstant ::= StringConstant ;
 BuiltInConstant ::= FiniteIntRangeConstant ;
 BuiltInConstant ::= BooleanConstant ;
 BuiltInConstant ::= DotConstant ;
 BuiltInConstant ::= NumberConstant ;
 BuiltInConstant ::= ε ;
BuiltInOperator ::= ListOperator ;
 BuiltInOperator ::= StringOperator ;
 BuiltInOperator ::= PartitionOperator ;
 BuiltInOperator ::= CyclicEnumOperator ;
 BuiltInOperator ::= FiniteIntRangeOperator ;
 BuiltInOperator ::= BooleanOperator ;
 BuiltInOperator ::= Cardinality | CardinalityOf | Contains ;
 BuiltInOperator ::= IntegerOperator ;
 BuiltInOperator ::= ε ;
StringLessThanOrEqual ::= leqs::StringOperator.content ;
color.type ::= string() ;
Declaration.content ::= id::string() name::string() ;
CardinalityOf ::= cardinalityof::BuiltInOperator.content ;
IntegerOperator ::= Addition | Subtraction | Multiplication | Division | Modulo | GreaterThan | GreaterThanOrEqual | LessThan | LessThanOrEqual ;
BuiltInSort ::= List ;
 BuiltInSort ::= String ;
 BuiltInSort ::= CyclicEnumeration ;
 BuiltInSort ::= FiniteEnumeration ;
 BuiltInSort ::= FiniteIntRange ;
 BuiltInSort ::= Bool ;
 BuiltInSort ::= Dot ;
 BuiltInSort ::= Number ;
 BuiltInSort ::= ε ;
transition.content ::= transition::(identifier.content basicobject.content transition.labels node.content) ;
refplace.content ::= referencePlace::refnode.content ;
font.element ::= font::((family::string())? (style::string())? (weight::string())? (size::string())? (decoration::("underline" | "overline" | "line-through"))? (align::("left" | "center" | "right"))? (rotation::integer())?) ;
arc.content ::= arc::(identifier.content source::string() target::string() Name? arc.labels (graphics::edgegraphics.content)? toolspecific.element*) ;
NamedOperator ::= namedoperator::(OperatorDeclaration.content parameter::(VariableDeclaration*) def::Term) ;
SortDeclaration ::= ArbitrarySort ;
 SortDeclaration ::= Partition ;
 SortDeclaration ::= NamedSort ;
toolspecific.element ::= toolspecific::(tool::string() version::string() anyElement*) ;
NamedSort ::= namedsort::(SortDeclaration.content Sort) ;
BooleanOperator.content ::= BuiltInOperator.content ;
HLDeclaration ::= declaration::(simpletextlabel.content (structure::Declarations)?) ;
nettype.uri ::= type::"http://www.pnml.org/version-2009/grammar/highlevelnet" ;
 nettype.uri ::= type::"http://www.pnml.org/version-2009/grammar/symmetricnet" ;
 nettype.uri ::= type::"http://www.pnml.org/version-2009/grammar/pnmlcoremodel" ;
edgegraphics.content ::= position.element* line.element? ;
HLAnnotation ::= hlinscription::(simpletextlabel.content (structure::Term)?) ;
PartitionElement ::= partitionelement::(OperatorDeclaration.content Term+) ;
HLMarking ::= hlinitialMarking::(simpletextlabel.content (structure::Term)?) ;
Operator.content ::= (subterm::Term)* ;
BooleanConstant ::= booleanconstant::(value::("true" | "false") BuiltInConstant.content) ;
BooleanOperator ::= And | Or | Imply | Not ;
FIRGreaterThan ::= greaterthan::FiniteIntRangeOperator.content ;
FiniteIntRangeOperator.content ::= BuiltInOperator.content ;
MakeList ::= makelist::(Sort ListOperator.content) ;
StringGreaterThan ::= gts::StringOperator.content ;
Sort.content ::= ε ;
CyclicEnumOperator.content ::= BuiltInOperator.content ;
PartitionElementOf ::= partitionelementof::(refpartition::string() PartitionOperator.content) ;
place.labels ::= Type? HLMarking? ;
 place.labels ::= ε ;
annotationgraphics.content ::= offset.element fill.element? line.element? font.element? ;
MemberAtIndex ::= memberatindex::(index::integer() ListOperator.content) ;
PartitionLessThan ::= ltp::PartitionOperator.content ;
ListLength ::= listlength::ListOperator.content ;
ScalarProduct ::= scalarproduct::MultisetOperator.content ;
FiniteIntRangeConstant ::= finiteintrangeconstant::(value::integer() FiniteIntRange BuiltInConstant.content) ;
FiniteIntRangeOperator ::= FIRLessThan | FIRLessThanOrEqual | FIRGreaterThan | FIRGreaterThanOrEqual ;
VariableDeclaration ::= variabledecl::(Declaration.content Sort) ;
page.labels ::= HLDeclaration* ;
 page.labels ::= ε ;
CyclicEnumOperator ::= Successor | Predecessor ;
ListConcatenation ::= listconcatenation::ListOperator.content ;
transition.labels ::= Condition? ;
 transition.labels ::= ε ;
position.element ::= position::coordinate.attributes ;
LessThanOrEqual ::= leq::IntegerOperator ;
identifier.content ::= id::string() ;
UserOperator ::= useroperator::(declaration::string() Operator.content) ;
CyclicEnumeration ::= cyclicenumeration::FiniteEnumeration.content ;
NumberConstant ::= numberconstant::(value::integer() BuiltInConstant.content Number) ;
net.element ::= net::(identifier.content nettype.uri Name? net.labels page.content+ toolspecific.element*) ;
pnml.element ::= pnml::(pnml.content+) ;
StringLessThan ::= lts::StringOperator.content ;
StringAppend ::= stringappend::StringOperator.content ;
UserSort ::= usersort::(declaration::string()) ;
pnml.content ::= net.element ;
netobject.content ::= page.content | place.content | transition.content | refplace.content | reftrans.content | arc.content ;
StringConcatenation ::= stringconcatenation::StringOperator.content ;
pagegraphics.content ::= nodegraphics.content ;
FIRGreaterThanOrEqual ::= greaterthanorequal::FiniteIntRangeOperator.content ;
positiveDecimal.content ::= integer() ;
offset.element ::= offset::coordinate.attributes ;
OperatorDeclaration.content ::= Declaration.content ;
refnode.content ::= identifier.content reference basicobject.content node.content ;
NumberOf ::= numberof::MultisetOperator.content ;
arc.labels ::= HLAnnotation? ;
 arc.labels ::= ε ;
GreaterThan ::= gt::IntegerOperator ;
page.content ::= page::(identifier.content basicobject.content page.labels netobject.content* (graphics::pagegraphics.content)?) ;
PartitionOperator.content ::= BuiltInOperator.content ;
nodegraphics.content ::= position.element dimension.element? fill.element? line.element? ;
Term.content ::= ε ;
ArbitraryOperator ::= arbitraryoperator::(OperatorDeclaration.content (input::Sort)* output::Sort) ;
OperatorDeclaration ::= ArbitraryOperator ;
 OperatorDeclaration ::= PartitionElement ;
 OperatorDeclaration ::= FEConstant ;
 OperatorDeclaration ::= NamedOperator ;
place.content ::= place::(identifier.content basicobject.content place.labels node.content) ;
fill.element ::= fill::((color::color.type)? (gradient-color::color.type)? (gradient-rotation::("vertical" | "horizontal" | "diagonal"))? (image::string())?) ;
PartitionGreaterThan ::= gtp::PartitionOperator.content ;
ArbitrarySort ::= arbitrarysort::SortDeclaration.content ;
PartitionOperator ::= PartitionLessThan | PartitionGreaterThan | PartitionElementOf ;
coordinate.attributes ::= x::integer() y::integer() ;
node.content ::= (graphics::nodegraphics.content)? ;
ProductSort ::= productsort::(Sort*) ;
ListOperator.content ::= BuiltInOperator.content ;
FEConstant ::= feconstant::OperatorDeclaration.content ;
FiniteEnumeration.content ::= FEConstant* ;
line.element ::= line::((shape::("line" | "curve"))? (color::color.type)? (width::positiveDecimal.content)? (style::("solid" | "dash" | "dot"))?) ;
ListOperator ::= ListAppend | ListConcatenation | MakeList | ListLength | MemberAtIndex | Sublist ;
simpletextlabel.content ::= simpletext.content annotationstandard.content ;
reftrans.content ::= referenceTransition::refnode.content ;
StringOperator.content ::= BuiltInOperator.content ;
StringConstant.content ::= value::string() ;
--------------------markup::pnml-hlcorestructure.bgf--------------------
page.labels ::= HLDeclaration* ;
arc.labels ::= HLAnnotation? ;
transition.labels ::= Condition? ;
HLDeclaration ::= declaration::(simpletextlabel.content (structure::Declarations)?) ;
place.labels ::= Type? HLMarking? ;
HLAnnotation ::= hlinscription::(simpletextlabel.content (structure::Term)?) ;
HLMarking ::= hlinitialMarking::(simpletextlabel.content (structure::Term)?) ;
net.labels ::= HLDeclaration* ;
--------------------markup::pnml-hlpng.bgf--------------------
basicobject.content ::= Name? toolspecific.element* ;
MultisetOperator.content ::= Operator.content ;
annotationstandard.content ::= (graphics::annotationgraphics.content)? toolspecific.element* ;
dimension.element ::= dimension::(x::positiveDecimal.content y::positiveDecimal.content) ;
BuiltInConstant.content ::= Operator.content ;
BuiltInOperator.content ::= Operator.content ;
anyElement ::= (α | string() | anyElement)* ;
net.labels ::= ε ;
 net.labels ::= HLDeclaration* ;
MultisetOperator ::= Add | All | NumberOf | Subtract | ScalarProduct | Empty ;
 MultisetOperator ::= ε ;
DotConstant ::= dotconstant::ε ;
simpletext.content ::= (text::string())? ;
MultisetSort ::= multisetsort::Sort ;
SortDeclaration.content ::= Declaration.content ;
BuiltInConstant ::= BooleanConstant ;
 BuiltInConstant ::= DotConstant ;
 BuiltInConstant ::= ε ;
BuiltInOperator ::= BooleanOperator ;
 BuiltInOperator ::= Cardinality | CardinalityOf | Contains ;
 BuiltInOperator ::= ε ;
color.type ::= string() ;
CardinalityOf ::= cardinalityof::BuiltInOperator.content ;
Declaration.content ::= id::string() name::string() ;
BuiltInSort ::= Bool ;
 BuiltInSort ::= Dot ;
 BuiltInSort ::= ε ;
transition.content ::= transition::(identifier.content basicobject.content transition.labels node.content) ;
refplace.content ::= referencePlace::refnode.content ;
font.element ::= font::((family::string())? (style::string())? (weight::string())? (size::string())? (decoration::("underline" | "overline" | "line-through"))? (align::("left" | "center" | "right"))? (rotation::integer())?) ;
arc.content ::= arc::(identifier.content source::string() target::string() Name? arc.labels (graphics::edgegraphics.content)? toolspecific.element*) ;
NamedOperator ::= namedoperator::(OperatorDeclaration.content parameter::(VariableDeclaration*) def::Term) ;
SortDeclaration ::= NamedSort ;
toolspecific.element ::= toolspecific::(tool::string() version::string() anyElement*) ;
NamedSort ::= namedsort::(SortDeclaration.content Sort) ;
BooleanOperator.content ::= BuiltInOperator.content ;
HLDeclaration ::= declaration::(simpletextlabel.content (structure::Declarations)?) ;
nettype.uri ::= type::"http://www.pnml.org/version-2009/grammar/pt-hlpng" ;
 nettype.uri ::= type::"http://www.pnml.org/version-2009/grammar/pnmlcoremodel" ;
HLAnnotation ::= hlinscription::(simpletextlabel.content (structure::Term)?) ;
edgegraphics.content ::= position.element* line.element? ;
HLMarking ::= hlinitialMarking::(simpletextlabel.content (structure::Term)?) ;
Operator.content ::= (subterm::Term)* ;
BooleanConstant ::= booleanconstant::(value::("true" | "false") BuiltInConstant.content) ;
BooleanOperator ::= And | Or | Imply | Not ;
Sort.content ::= ε ;
place.labels ::= ε ;
 place.labels ::= Type? HLMarking? ;
annotationgraphics.content ::= offset.element fill.element? line.element? font.element? ;
ScalarProduct ::= scalarproduct::MultisetOperator.content ;
page.labels ::= ε ;
 page.labels ::= HLDeclaration* ;
VariableDeclaration ::= variabledecl::(Declaration.content Sort) ;
transition.labels ::= ε ;
 transition.labels ::= Condition? ;
position.element ::= position::coordinate.attributes ;
identifier.content ::= id::string() ;
UserOperator ::= useroperator::(declaration::string() Operator.content) ;
net.element ::= net::(identifier.content nettype.uri Name? net.labels page.content+ toolspecific.element*) ;
pnml.element ::= pnml::(pnml.content+) ;
UserSort ::= usersort::(declaration::string()) ;
pnml.content ::= net.element ;
netobject.content ::= page.content | place.content | transition.content | refplace.content | reftrans.content | arc.content ;
pagegraphics.content ::= nodegraphics.content ;
positiveDecimal.content ::= integer() ;
OperatorDeclaration.content ::= Declaration.content ;
offset.element ::= offset::coordinate.attributes ;
refnode.content ::= identifier.content reference basicobject.content node.content ;
NumberOf ::= numberof::MultisetOperator.content ;
arc.labels ::= ε ;
 arc.labels ::= HLAnnotation? ;
page.content ::= page::(identifier.content basicobject.content page.labels netobject.content* (graphics::pagegraphics.content)?) ;
nodegraphics.content ::= position.element dimension.element? fill.element? line.element? ;
Term.content ::= ε ;
OperatorDeclaration ::= NamedOperator ;
place.content ::= place::(identifier.content basicobject.content place.labels node.content) ;
fill.element ::= fill::((color::color.type)? (gradient-color::color.type)? (gradient-rotation::("vertical" | "horizontal" | "diagonal"))? (image::string())?) ;
coordinate.attributes ::= x::integer() y::integer() ;
node.content ::= (graphics::nodegraphics.content)? ;
ProductSort ::= productsort::(Sort*) ;
line.element ::= line::((shape::("line" | "curve"))? (color::color.type)? (width::positiveDecimal.content)? (style::("solid" | "dash" | "dot"))?) ;
simpletextlabel.content ::= simpletext.content annotationstandard.content ;
reftrans.content ::= referenceTransition::refnode.content ;
--------------------markup::pnml-integers.bgf--------------------
NumberConstant ::= numberconstant::(value::integer() BuiltInConstant.content Number) ;
IntegerOperator.content ::= BuiltInOperator.content ;
GreaterThan ::= gt::IntegerOperator ;
LessThan ::= lt::IntegerOperator ;
LessThanOrEqual ::= leq::IntegerOperator ;
BuiltInConstant ::= NumberConstant ;
BuiltInOperator ::= IntegerOperator ;
GreaterThanOrEqual ::= geq::IntegerOperator ;
IntegerOperator ::= Addition | Subtraction | Multiplication | Division | Modulo | GreaterThan | GreaterThanOrEqual | LessThan | LessThanOrEqual ;
BuiltInSort ::= Number ;
--------------------markup::pnml-lists.bgf--------------------
ListOperator.content ::= BuiltInOperator.content ;
MakeList ::= makelist::(Sort ListOperator.content) ;
EmptyList ::= emptylist::(Sort BuiltInConstant.content) ;
ListConcatenation ::= listconcatenation::ListOperator.content ;
ListAppend ::= listappend::ListOperator.content ;
BuiltInConstant ::= EmptyList ;
BuiltInOperator ::= ListOperator ;
MemberAtIndex ::= memberatindex::(index::integer() ListOperator.content) ;
ListLength ::= listlength::ListOperator.content ;
ListOperator ::= ListAppend | ListConcatenation | MakeList | ListLength | MemberAtIndex | Sublist ;
BuiltInSort ::= List ;
--------------------markup::pnml-multisets.bgf--------------------
MultisetOperator ::= Add | All | NumberOf | Subtract | ScalarProduct | Empty ;
BuiltInOperator ::= Cardinality | CardinalityOf | Contains ;
CardinalityOf ::= cardinalityof::BuiltInOperator.content ;
ScalarProduct ::= scalarproduct::MultisetOperator.content ;
NumberOf ::= numberof::MultisetOperator.content ;
--------------------markup::rss.bgf--------------------
TextInput ::= title::String description::String name::String link::String channel::Channel ;
RSS ::= version::String channel::Channel ;
DayKind ::= (Monday::ε) | (Tuesday::ε) | (Wednesday::ε) | (Thursday::ε) | (Friday::ε) | (Saturday::ε) | (Sunday::ε) ;
--------------------markup::pnml-partitions.bgf--------------------
PartitionOperator ::= PartitionLessThan | PartitionGreaterThan | PartitionElementOf ;
SortDeclaration ::= Partition ;
PartitionElementOf ::= partitionelementof::(refpartition::string() PartitionOperator.content) ;
PartitionOperator.content ::= BuiltInOperator.content ;
BuiltInOperator ::= PartitionOperator ;
OperatorDeclaration ::= PartitionElement ;
PartitionLessThan ::= ltp::PartitionOperator.content ;
PartitionElement ::= partitionelement::(OperatorDeclaration.content Term+) ;
PartitionGreaterThan ::= gtp::PartitionOperator.content ;
--------------------markup::pnml-pnmlcoremodel.bgf--------------------
page.labels ::= ε ;
basicobject.content ::= Name? toolspecific.element* ;
transition.labels ::= ε ;
position.element ::= position::coordinate.attributes ;
annotationstandard.content ::= (graphics::annotationgraphics.content)? toolspecific.element* ;
dimension.element ::= dimension::(x::positiveDecimal.content y::positiveDecimal.content) ;
identifier.content ::= id::string() ;
anyElement ::= (α | string() | anyElement)* ;
net.labels ::= ε ;
net.element ::= net::(identifier.content nettype.uri Name? net.labels page.content+ toolspecific.element*) ;
pnml.element ::= pnml::(pnml.content+) ;
simpletext.content ::= (text::string())? ;
pnml.content ::= net.element ;
netobject.content ::= page.content | place.content | transition.content | refplace.content | reftrans.content | arc.content ;
color.type ::= string() ;
pagegraphics.content ::= nodegraphics.content ;
positiveDecimal.content ::= integer() ;
offset.element ::= offset::coordinate.attributes ;
transition.content ::= transition::(identifier.content basicobject.content transition.labels node.content) ;
refnode.content ::= identifier.content reference basicobject.content node.content ;
refplace.content ::= referencePlace::refnode.content ;
font.element ::= font::((family::string())? (style::string())? (weight::string())? (size::string())? (decoration::("underline" | "overline" | "line-through"))? (align::("left" | "center" | "right"))? (rotation::integer())?) ;
arc.content ::= arc::(identifier.content source::string() target::string() Name? arc.labels (graphics::edgegraphics.content)? toolspecific.element*) ;
arc.labels ::= ε ;
page.content ::= page::(identifier.content basicobject.content page.labels netobject.content* (graphics::pagegraphics.content)?) ;
toolspecific.element ::= toolspecific::(tool::string() version::string() anyElement*) ;
nodegraphics.content ::= position.element dimension.element? fill.element? line.element? ;
nettype.uri ::= type::"http://www.pnml.org/version-2009/grammar/pnmlcoremodel" ;
edgegraphics.content ::= position.element* line.element? ;
place.content ::= place::(identifier.content basicobject.content place.labels node.content) ;
fill.element ::= fill::((color::color.type)? (gradient-color::color.type)? (gradient-rotation::("vertical" | "horizontal" | "diagonal"))? (image::string())?) ;
coordinate.attributes ::= x::integer() y::integer() ;
node.content ::= (graphics::nodegraphics.content)? ;
place.labels ::= ε ;
annotationgraphics.content ::= offset.element fill.element? line.element? font.element? ;
line.element ::= line::((shape::("line" | "curve"))? (color::color.type)? (width::positiveDecimal.content)? (style::("solid" | "dash" | "dot"))?) ;
simpletextlabel.content ::= simpletext.content annotationstandard.content ;
reftrans.content ::= referenceTransition::refnode.content ;
--------------------markup::pnml-ptnet.bgf--------------------
page.labels ::= ε ;
PTArcAnnotation ::= inscription::positiveintegerlabel.content ;
positiveintegerlabel.content ::= text::integer() annotationstandard.content ;
transition.labels ::= ε ;
basicobject.content ::= Name? toolspecific.element* ;
position.element ::= position::coordinate.attributes ;
annotationstandard.content ::= (graphics::annotationgraphics.content)? toolspecific.element* ;
dimension.element ::= dimension::(x::positiveDecimal.content y::positiveDecimal.content) ;
identifier.content ::= id::string() ;
anyElement ::= (α | string() | anyElement)* ;
net.labels ::= ε ;
pnml.element ::= pnml::(pnml.content+) ;
net.element ::= net::(identifier.content nettype.uri Name? net.labels page.content+ toolspecific.element*) ;
simpletext.content ::= (text::string())? ;
pnml.content ::= net.element ;
netobject.content ::= page.content | place.content | transition.content | refplace.content | reftrans.content | arc.content ;
color.type ::= string() ;
pagegraphics.content ::= nodegraphics.content ;
positiveDecimal.content ::= integer() ;
offset.element ::= offset::coordinate.attributes ;
refnode.content ::= identifier.content reference basicobject.content node.content ;
transition.content ::= transition::(identifier.content basicobject.content transition.labels node.content) ;
refplace.content ::= referencePlace::refnode.content ;
font.element ::= font::((family::string())? (style::string())? (weight::string())? (size::string())? (decoration::("underline" | "overline" | "line-through"))? (align::("left" | "center" | "right"))? (rotation::integer())?) ;
arc.content ::= arc::(identifier.content source::string() target::string() Name? arc.labels (graphics::edgegraphics.content)? toolspecific.element*) ;
arc.labels ::= PTArcAnnotation? ;
 arc.labels ::= ε ;
page.content ::= page::(identifier.content basicobject.content page.labels netobject.content* (graphics::pagegraphics.content)?) ;
toolspecific.element ::= toolspecific::(tool::string() version::string() anyElement*) ;
nodegraphics.content ::= position.element dimension.element? fill.element? line.element? ;
nettype.uri ::= type::"http://www.pnml.org/version-2009/grammar/ptnet" ;
 nettype.uri ::= type::"http://www.pnml.org/version-2009/grammar/pnmlcoremodel" ;
edgegraphics.content ::= position.element* line.element? ;
place.content ::= place::(identifier.content basicobject.content place.labels node.content) ;
fill.element ::= fill::((color::color.type)? (gradient-color::color.type)? (gradient-rotation::("vertical" | "horizontal" | "diagonal"))? (image::string())?) ;
PTMarking ::= initialMarking::nonnegativeintegerlabel.content ;
coordinate.attributes ::= x::integer() y::integer() ;
node.content ::= (graphics::nodegraphics.content)? ;
place.labels ::= PTMarking? ;
 place.labels ::= ε ;
annotationgraphics.content ::= offset.element fill.element? line.element? font.element? ;
nonnegativeintegerlabel.content ::= text::integer() annotationstandard.content ;
line.element ::= line::((shape::("line" | "curve"))? (color::color.type)? (width::positiveDecimal.content)? (style::("solid" | "dash" | "dot"))?) ;
reftrans.content ::= referenceTransition::refnode.content ;
simpletextlabel.content ::= simpletext.content annotationstandard.content ;
--------------------markup::pnml-strings.bgf--------------------
StringAppend ::= stringappend::StringOperator.content ;
StringLessThan ::= lts::StringOperator.content ;
StringGreaterThan ::= gts::StringOperator.content ;
StringLength ::= stringlength::StringOperator.content ;
StringConcatenation ::= stringconcatenation::StringOperator.content ;
StringGreaterThanOrEqual ::= geqs::StringOperator.content ;
BuiltInConstant ::= StringConstant ;
BuiltInOperator ::= StringOperator ;
StringLessThanOrEqual ::= leqs::StringOperator.content ;
StringOperator ::= StringLessThan | StringLessThanOrEqual | StringGreaterThan | StringGreaterThanOrEqual | StringConcatenation | StringAppend | StringLength | Substring ;
StringConstant ::= stringconstant::(StringConstant.content BuiltInConstant.content) ;
BuiltInSort ::= String ;
StringOperator.content ::= BuiltInOperator.content ;
StringConstant.content ::= value::string() ;
--------------------markup::pnml-symmetricnet.bgf--------------------
FiniteIntRange ::= finiteintrange::(start::integer() end::integer()) ;
LessThan ::= lt::IntegerOperator ;
basicobject.content ::= Name? toolspecific.element* ;
MultisetOperator.content ::= Operator.content ;
FiniteEnumeration ::= finiteenumeration::FiniteEnumeration.content ;
annotationstandard.content ::= (graphics::annotationgraphics.content)? toolspecific.element* ;
GreaterThanOrEqual ::= geq::IntegerOperator ;
dimension.element ::= dimension::(x::positiveDecimal.content y::positiveDecimal.content) ;
BuiltInConstant.content ::= Operator.content ;
BuiltInOperator.content ::= Operator.content ;
anyElement ::= (α | string() | anyElement)* ;
net.labels ::= HLDeclaration* ;
 net.labels ::= ε ;
IntegerOperator.content ::= BuiltInOperator.content ;
DotConstant ::= dotconstant::ε ;
MultisetOperator ::= Add | All | NumberOf | Subtract | ScalarProduct | Empty ;
 MultisetOperator ::= ε ;
simpletext.content ::= (text::string())? ;
FIRLessThan ::= lessthan::FiniteIntRangeOperator.content ;
FIRLessThanOrEqual ::= lessthanorequal::FiniteIntRangeOperator.content ;
MultisetSort ::= multisetsort::Sort ;
SortDeclaration.content ::= Declaration.content ;
BuiltInConstant ::= FiniteIntRangeConstant ;
 BuiltInConstant ::= BooleanConstant ;
 BuiltInConstant ::= DotConstant ;
 BuiltInConstant ::= NumberConstant ;
 BuiltInConstant ::= ε ;
BuiltInOperator ::= PartitionOperator ;
 BuiltInOperator ::= CyclicEnumOperator ;
 BuiltInOperator ::= FiniteIntRangeOperator ;
 BuiltInOperator ::= BooleanOperator ;
 BuiltInOperator ::= Cardinality | CardinalityOf | Contains ;
 BuiltInOperator ::= IntegerOperator ;
 BuiltInOperator ::= ε ;
color.type ::= string() ;
CardinalityOf ::= cardinalityof::BuiltInOperator.content ;
Declaration.content ::= id::string() name::string() ;
IntegerOperator ::= Addition | Subtraction | Multiplication | Division | Modulo | GreaterThan | GreaterThanOrEqual | LessThan | LessThanOrEqual ;
BuiltInSort ::= CyclicEnumeration ;
 BuiltInSort ::= FiniteEnumeration ;
 BuiltInSort ::= FiniteIntRange ;
 BuiltInSort ::= Bool ;
 BuiltInSort ::= Dot ;
 BuiltInSort ::= Number ;
 BuiltInSort ::= ε ;
transition.content ::= transition::(identifier.content basicobject.content transition.labels node.content) ;
refplace.content ::= referencePlace::refnode.content ;
font.element ::= font::((family::string())? (style::string())? (weight::string())? (size::string())? (decoration::("underline" | "overline" | "line-through"))? (align::("left" | "center" | "right"))? (rotation::integer())?) ;
arc.content ::= arc::(identifier.content source::string() target::string() Name? arc.labels (graphics::edgegraphics.content)? toolspecific.element*) ;
NamedOperator ::= namedoperator::(OperatorDeclaration.content parameter::(VariableDeclaration*) def::Term) ;
SortDeclaration ::= Partition ;
 SortDeclaration ::= NamedSort ;
toolspecific.element ::= toolspecific::(tool::string() version::string() anyElement*) ;
NamedSort ::= namedsort::(SortDeclaration.content Sort) ;
BooleanOperator.content ::= BuiltInOperator.content ;
HLDeclaration ::= declaration::(simpletextlabel.content (structure::Declarations)?) ;
nettype.uri ::= type::"http://www.pnml.org/version-2009/grammar/symmetricnet" ;
 nettype.uri ::= type::"http://www.pnml.org/version-2009/grammar/pnmlcoremodel" ;
edgegraphics.content ::= position.element* line.element? ;
HLAnnotation ::= hlinscription::(simpletextlabel.content (structure::Term)?) ;
PartitionElement ::= partitionelement::(OperatorDeclaration.content Term+) ;
HLMarking ::= hlinitialMarking::(simpletextlabel.content (structure::Term)?) ;
Operator.content ::= (subterm::Term)* ;
BooleanConstant ::= booleanconstant::(value::("true" | "false") BuiltInConstant.content) ;
BooleanOperator ::= And | Or | Imply | Not ;
FIRGreaterThan ::= greaterthan::FiniteIntRangeOperator.content ;
FiniteIntRangeOperator.content ::= BuiltInOperator.content ;
Sort.content ::= ε ;
PartitionElementOf ::= partitionelementof::(refpartition::string() PartitionOperator.content) ;
CyclicEnumOperator.content ::= BuiltInOperator.content ;
place.labels ::= Type? HLMarking? ;
 place.labels ::= ε ;
annotationgraphics.content ::= offset.element fill.element? line.element? font.element? ;
PartitionLessThan ::= ltp::PartitionOperator.content ;
ScalarProduct ::= scalarproduct::MultisetOperator.content ;
FiniteIntRangeOperator ::= FIRLessThan | FIRLessThanOrEqual | FIRGreaterThan | FIRGreaterThanOrEqual ;
FiniteIntRangeConstant ::= finiteintrangeconstant::(value::integer() FiniteIntRange BuiltInConstant.content) ;
VariableDeclaration ::= variabledecl::(Declaration.content Sort) ;
page.labels ::= HLDeclaration* ;
 page.labels ::= ε ;
CyclicEnumOperator ::= Successor | Predecessor ;
transition.labels ::= Condition? ;
 transition.labels ::= ε ;
position.element ::= position::coordinate.attributes ;
LessThanOrEqual ::= leq::IntegerOperator ;
identifier.content ::= id::string() ;
UserOperator ::= useroperator::(declaration::string() Operator.content) ;
CyclicEnumeration ::= cyclicenumeration::FiniteEnumeration.content ;
NumberConstant ::= numberconstant::(value::integer() BuiltInConstant.content Number) ;
net.element ::= net::(identifier.content nettype.uri Name? net.labels page.content+ toolspecific.element*) ;
pnml.element ::= pnml::(pnml.content+) ;
UserSort ::= usersort::(declaration::string()) ;
pnml.content ::= net.element ;
netobject.content ::= page.content | place.content | transition.content | refplace.content | reftrans.content | arc.content ;
pagegraphics.content ::= nodegraphics.content ;
FIRGreaterThanOrEqual ::= greaterthanorequal::FiniteIntRangeOperator.content ;
positiveDecimal.content ::= integer() ;
offset.element ::= offset::coordinate.attributes ;
OperatorDeclaration.content ::= Declaration.content ;
refnode.content ::= identifier.content reference basicobject.content node.content ;
NumberOf ::= numberof::MultisetOperator.content ;
arc.labels ::= HLAnnotation? ;
 arc.labels ::= ε ;
GreaterThan ::= gt::IntegerOperator ;
page.content ::= page::(identifier.content basicobject.content page.labels netobject.content* (graphics::pagegraphics.content)?) ;
PartitionOperator.content ::= BuiltInOperator.content ;
nodegraphics.content ::= position.element dimension.element? fill.element? line.element? ;
Term.content ::= ε ;
OperatorDeclaration ::= PartitionElement ;
 OperatorDeclaration ::= FEConstant ;
 OperatorDeclaration ::= NamedOperator ;
place.content ::= place::(identifier.content basicobject.content place.labels node.content) ;
fill.element ::= fill::((color::color.type)? (gradient-color::color.type)? (gradient-rotation::("vertical" | "horizontal" | "diagonal"))? (image::string())?) ;
PartitionGreaterThan ::= gtp::PartitionOperator.content ;
PartitionOperator ::= PartitionLessThan | PartitionGreaterThan | PartitionElementOf ;
coordinate.attributes ::= x::integer() y::integer() ;
node.content ::= (graphics::nodegraphics.content)? ;
ProductSort ::= productsort::(Sort*) ;
FEConstant ::= feconstant::OperatorDeclaration.content ;
FiniteEnumeration.content ::= FEConstant* ;
line.element ::= line::((shape::("line" | "curve"))? (color::color.type)? (width::positiveDecimal.content)? (style::("solid" | "dash" | "dot"))?) ;
simpletextlabel.content ::= simpletext.content annotationstandard.content ;
reftrans.content ::= referenceTransition::refnode.content ;
--------------------markup::pnml-terms.bgf--------------------
VariableDeclaration ::= variabledecl::(Declaration.content Sort) ;
NamedOperator ::= namedoperator::(OperatorDeclaration.content parameter::(VariableDeclaration*) def::Term) ;
SortDeclaration ::= NamedSort ;
MultisetOperator.content ::= Operator.content ;
NamedSort ::= namedsort::(SortDeclaration.content Sort) ;
Term.content ::= ε ;
OperatorDeclaration ::= NamedOperator ;
BuiltInConstant.content ::= Operator.content ;
BuiltInOperator.content ::= Operator.content ;
UserOperator ::= useroperator::(declaration::string() Operator.content) ;
Operator.content ::= (subterm::Term)* ;
MultisetOperator ::= ε ;
ProductSort ::= productsort::(Sort*) ;
UserSort ::= usersort::(declaration::string()) ;
Sort.content ::= ε ;
BuiltInConstant ::= ε ;
MultisetSort ::= multisetsort::Sort ;
BuiltInOperator ::= ε ;
SortDeclaration.content ::= Declaration.content ;
Declaration.content ::= id::string() name::string() ;
BuiltInSort ::= ε ;
OperatorDeclaration.content ::= Declaration.content ;
--------------------markup::pnml-touzet.bgf--------------------
TransToPlaceArc ::= source::Transition target::Place ;
PlaceToTransArc ::= source::Place target::Transition ;
PetriNet ::= (places::Place)+ (transitions::Transition)+ (arcs::Arc)+ ;
--------------------markup::svg-furubayashi-basic.bgf--------------------
SVG.clipPath ::= clipPath::(SVG.Description.class* (SVG.Animation.class | SVG.Use.class)* SVG.Shape.class? SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Text.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.Cursor.attrib SVG.External.attrib (transform::SVG.TransformList.datatype)? (clipPathUnits::("userSpaceOnUse" | "objectBoundingBox"))?) ;
SVG.visibility.attrib ::= (visibility::("visible" | "hidden" | "inherit"))? ;
SVG.desc ::= desc::(string() SVG.Core.attrib SVG.Style.attrib) ;
SVG.onbegin.attrib ::= (onbegin::SVG.Script.datatype)? ;
SVG.stroke-miterlimit.attrib ::= (stroke-miterlimit::SVG.StrokeMiterLimitValue.datatype)? ;
SVG.GraphicalEvents.attrib ::= ε ;
 SVG.GraphicalEvents.attrib ::= SVG.onfocusin.attrib SVG.onfocusout.attrib SVG.onactivate.attrib SVG.onclick.attrib SVG.onmousedown.attrib SVG.onmouseup.attrib SVG.onmouseover.attrib SVG.onmousemove.attrib SVG.onmouseout.attrib SVG.onload.attrib SVG.GraphicalEvents.extra.attrib ;
SVG.animateTransform ::= animateTransform::(SVG.Description.class* SVG.Core.attrib SVG.Conditional.attrib SVG.AnimationEvents.attrib SVG.External.attrib SVG.Animation.attrib SVG.AnimationAttribute.attrib SVG.AnimationTiming.attrib SVG.AnimationValue.attrib SVG.AnimationAddtion.attrib (type::("translate" | "scale" | "rotate" | "skewX" | "skewY"))?) ;
SVG.Pattern.extra.class ::= ε ;
SVG.font-face ::= font-face::(SVG.Description.class* SVG.font-face-src? SVG.definition-src? SVG.Core.attrib (font-family::string())? (font-style::string())? (font-variant::string())? (font-weight::string())? (font-stretch::string())? (font-size::string())? (unicode-range::string())? (units-per-em::SVG.Number.datatype)? (panose-1::string())? (stemv::SVG.Number.datatype)? (stemh::SVG.Number.datatype)? (slope::SVG.Number.datatype)? (cap-height::SVG.Number.datatype)? (x-height::SVG.Number.datatype)? (accent-height::SVG.Number.datatype)? (ascent::SVG.Number.datatype)? (descent::SVG.Number.datatype)? (widths::string())? (bbox::string())? (ideographic::SVG.Number.datatype)? (alphabetic::SVG.Number.datatype)? (mathematical::SVG.Number.datatype)? (hanging::SVG.Number.datatype)? (v-ideographic::SVG.Number.datatype)? (v-alphabetic::SVG.Number.datatype)? (v-mathematical::SVG.Number.datatype)? (v-hanging::SVG.Number.datatype)? (underline-position::SVG.Number.datatype)? (underline-thickness::SVG.Number.datatype)? (strikethrough-position::SVG.Number.datatype)? (strikethrough-thickness::SVG.Number.datatype)? (overline-position::SVG.Number.datatype)? (overline-thickness::SVG.Number.datatype)?) ;
SVG.TextContent.extra.class ::= ε ;
SVG.mpath ::= mpath::(SVG.Description.class* SVG.Core.attrib SVG.XLinkRequired.attrib SVG.External.attrib) ;
SVG.XLinkEmbed.attrib ::= (xlink:type::"simple")? xlink:href::SVG.URI.datatype (xlink:role::SVG.URI.datatype)? (xlink:arcrole::SVG.URI.datatype)? (xlink:title::string())? (xlink:show::"embed")? (xlink:actuate::"onLoad")? SVG.XLinkEmbed.extra.attrib ;
SVG.StrokeDashArrayValue.datatype ::= string() ;
SVG.pattern ::= pattern::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.XLink.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? (width::SVG.Length.datatype)? (height::SVG.Length.datatype)? (patternUnits::("userSpaceOnUse" | "objectBoundingBox"))? (patternContentUnits::("userSpaceOnUse" | "objectBoundingBox"))? (patternTransform::SVG.TransformList.datatype)? (viewBox::SVG.ViewBoxSpec.datatype)? (preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype)?) ;
SVG.Gradient.extra.class ::= ε ;
SVG.onfocusin.attrib ::= (onfocusin::SVG.Script.datatype)? ;
SVG.Paint.attrib ::= ε ;
 SVG.Paint.attrib ::= SVG.fill.attrib SVG.fill-rule.attrib SVG.stroke.attrib SVG.stroke-dasharray.attrib SVG.stroke-dashoffset.attrib SVG.stroke-linecap.attrib SVG.stroke-linejoin.attrib SVG.stroke-miterlimit.attrib SVG.stroke-width.attrib SVG.Paint.extra.attrib ;
SVG.onscroll.attrib ::= (onscroll::SVG.Script.datatype)? ;
SVG.Text.attrib ::= ε ;
 SVG.Text.attrib ::= (writing-mode::("lr-tb" | "rl-tb" | "tb-rl" | "lr" | "rl" | "tb" | "inherit"))? SVG.Text.extra.attrib ;
SVG.feComposite ::= feComposite::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib in2::string() (operator::("over" | "in" | "out" | "atop" | "xor" | "arithmetic"))? (k1::SVG.Number.datatype)? (k2::SVG.Number.datatype)? (k3::SVG.Number.datatype)? (k4::SVG.Number.datatype)?) ;
SVG.Script.datatype ::= string() ;
SVG.base.attrib ::= (xml:base::SVG.URI.datatype)? ;
SVG.stroke-dasharray.attrib ::= (stroke-dasharray::SVG.StrokeDashArrayValue.datatype)? ;
SVG.onzoom.attrib ::= (onzoom::SVG.Script.datatype)? ;
SVG.FontSizeValue.datatype ::= string() ;
SVG.missing-glyph ::= missing-glyph::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Style.attrib SVG.Presentation.attrib (d::SVG.PathData.datatype)? (horiz-adv-x::SVG.Number.datatype)? (vert-origin-x::SVG.Number.datatype)? (vert-origin-y::SVG.Number.datatype)? (vert-adv-y::SVG.Number.datatype)?) ;
SVG.PreserveAspectRatioSpec.datatype ::= string() ;
SVG.MaskValue.datatype ::= string() ;
SVG.Structure.extra.class ::= ε ;
SVG.id.attrib ::= (id::SVG.ID.datatype)? ;
SVG.animateMotion ::= animateMotion::(SVG.Description.class* SVG.mpath? SVG.Core.attrib SVG.Conditional.attrib SVG.AnimationEvents.attrib SVG.External.attrib SVG.Animation.attrib SVG.AnimationTiming.attrib SVG.AnimationAddtion.attrib (calcMode::("discrete" | "linear" | "paced" | "spline"))? (values::string())? (keyTimes::string())? (Splines::string())? (from::string())? (to::string())? (by::string())? (path::string())? (keyPoints::string())? (rotate::string())? (origin::string())?) ;
SVG.XLinkReplace.extra.attrib ::= ε ;
SVG.FontSizeAdjustValue.datatype ::= string() ;
SVG.onend.attrib ::= (onend::SVG.Script.datatype)? ;
SVG.XLinkEmbed.extra.attrib ::= ε ;
SVG.Graphics.attrib ::= ε ;
 SVG.Graphics.attrib ::= SVG.display.attrib SVG.image-rendering.attrib SVG.pointer-events.attrib SVG.shape-rendering.attrib SVG.text-rendering.attrib SVG.visibility.attrib SVG.Graphics.extra.attrib ;
SVG.ClipPathValue.datatype ::= string() ;
SVG.FontFamilyValue.datatype ::= string() ;
SVG.Description.class ::= SVG.desc | SVG.title | SVG.metadata | SVG.Description.extra.class ;
SVG.svg ::= svg::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.DocumentEvents.attrib SVG.GraphicalEvents.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? (width::SVG.Length.datatype)? (height::SVG.Length.datatype)? (viewBox::SVG.ViewBoxSpec.datatype)? (preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype)? (zoomAndPan::("disable" | "magnify"))? version::SVG.Number.datatype (baseProfile::SVG.Text.datatype)? (contentScriptType::SVG.ContentType.datatype)? (contentStyleType::SVG.ContentType.datatype)?) ;
SVG.circle ::= circle::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib (cx::SVG.Coordinate.datatype)? (cy::SVG.Coordinate.datatype)? r::SVG.Length.datatype (transform::SVG.TransformList.datatype)?) ;
SVG.font ::= font::(SVG.Description.class* SVG.font-face SVG.missing-glyph (SVG.glyph | SVG.hkern | SVG.vkern)* SVG.Core.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.External.attrib (horiz-origin-x::SVG.Number.datatype)? (horiz-origin-y::SVG.Number.datatype)? horiz-adv-x::SVG.Number.datatype (vert-origin-x::SVG.Number.datatype)? (vert-origin-y::SVG.Number.datatype)? (vert-adv-y::SVG.Number.datatype)?) ;
SVG.Profile.attrib ::= ε ;
 SVG.Profile.attrib ::= (color-profile::string())? SVG.Profile.extra.attrib ;
SVG.onerror.attrib ::= (onerror::SVG.Script.datatype)? ;
SVG.set ::= set::(SVG.Description.class* SVG.Core.attrib SVG.Conditional.attrib SVG.AnimationEvents.attrib SVG.External.attrib SVG.Animation.attrib SVG.AnimationAttribute.attrib SVG.AnimationTiming.attrib (to::string())?) ;
SVG.Filter.attrib ::= (filter::SVG.FilterValue.datatype)? SVG.Filter.extra.attrib ;
 SVG.Filter.attrib ::= ε ;
SVG.script ::= script::(string() SVG.Core.attrib SVG.XLink.attrib SVG.External.attrib type::SVG.ContentType.datatype) ;
SVG.feMergeNode ::= feMergeNode::((SVG.animate | SVG.set)* SVG.Core.attrib (in::string())?) ;
SVG.URI.datatype ::= string() ;
SVG.XLinkReplace.attrib ::= (xlink:type::"simple")? xlink:href::SVG.URI.datatype (xlink:role::SVG.URI.datatype)? (xlink:arcrole::SVG.URI.datatype)? (xlink:title::string())? (xlink:show::("new" | "replace"))? (xlink:actuate::"onRequest")? SVG.XLinkReplace.extra.attrib ;
SVG.ContentType.datatype ::= string() ;
SVG.KerningValue.datatype ::= string() ;
SVG.AnimationValue.extra.attrib ::= ε ;
SVG.Animation.extra.attrib ::= ε ;
SVG.onmousedown.attrib ::= (onmousedown::SVG.Script.datatype)? ;
SVG.DocumentEvents.attrib ::= SVG.onunload.attrib SVG.onabort.attrib SVG.onerror.attrib SVG.onresize.attrib SVG.onscroll.attrib SVG.onzoom.attrib SVG.DocumentEvents.extra.attrib ;
SVG.metadata ::= metadata::(string() SVG.Core.attrib) ;
SVG.NumberOptionalNumber.datatype ::= string() ;
SVG.tspan ::= tspan::((string() | SVG.tspan | SVG.tref | SVG.altGlyph | SVG.animate | SVG.set | SVG.animateColor | SVG.Description.class | SVG.Hyperlink.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib (x::SVG.Coordinates.datatype)? (y::SVG.Coordinates.datatype)? (dx::SVG.Lengths.datatype)? (dy::SVG.Lengths.datatype)? (rotate::SVG.Numbers.datatype)? (textLength::SVG.Length.datatype)? (lengthAdjust::("spacing" | "spacingAndGlyphs"))?) ;
SVG.BaselineShiftValue.datatype ::= string() ;
SVG.Numbers.datatype ::= string() ;
SVG.onabort.attrib ::= (onabort::SVG.Script.datatype)? ;
SVG.polygon ::= polygon::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Marker.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib points::SVG.Points.datatype (transform::SVG.TransformList.datatype)?) ;
SVG.font-face-uri ::= font-face-uri::(SVG.font-face-format* SVG.Core.attrib SVG.XLinkRequired.attrib) ;
SVG.Style.extra.attrib ::= ε ;
SVG.path ::= path::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Marker.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib d::SVG.PathData.datatype (pathLength::SVG.Number.datatype)? (transform::SVG.TransformList.datatype)?) ;
SVG.onmousemove.attrib ::= (onmousemove::SVG.Script.datatype)? ;
SVG.image-rendering.attrib ::= (image-rendering::("auto" | "optimizeSpeed" | "optimizeQuality" | "inherit"))? ;
SVG.style ::= style::(string() SVG.Core.attrib type::SVG.ContentType.datatype (media::SVG.MediaDesc.datatype)? (title::SVG.Text.datatype)?) ;
SVG.pointer-events.attrib ::= (pointer-events::("visiblePainted" | "visibleFill" | "visibleStroke" | "visible" | "painted" | "fill" | "stroke" | "all" | "none" | "inherit"))? ;
SVG.Font.extra.class ::= ε ;
SVG.Text.class ::= SVG.text | SVG.altGlyphDef | SVG.Text.extra.class ;
SVG.Script.extra.class ::= ε ;
SVG.Gradient.attrib ::= ε ;
 SVG.Gradient.attrib ::= (stop-color::SVG.SVGColor.datatype)? (stop-opacity::SVG.OpacityValue.datatype)? SVG.Gradient.extra.attrib ;
SVG.LinkTarget.datatype ::= string() ;
SVG.Boolean.datatype ::= string() ;
SVG.Structure.class ::= SVG.svg | SVG.g | SVG.defs | SVG.symbol | SVG.Use.class | SVG.Structure.extra.class ;
SVG.Presentation.extra.attrib ::= ε ;
SVG.onunload.attrib ::= (onunload::SVG.Script.datatype)? ;
SVG.altGlyph ::= altGlyph::(string() SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.XLink.attrib SVG.External.attrib (x::SVG.Coordinates.datatype)? (y::SVG.Coordinates.datatype)? (dx::SVG.Lengths.datatype)? (dy::SVG.Lengths.datatype)? (glyphRef::string())? (format::string())? (rotate::SVG.Numbers.datatype)?) ;
SVG.stop ::= stop::((SVG.animate | SVG.set | SVG.animateColor)* SVG.Core.attrib SVG.Style.attrib SVG.Color.attrib SVG.Gradient.attrib offset::SVG.NumberOrPercentage.datatype) ;
SVG.onload.attrib ::= (onload::SVG.Script.datatype)? ;
SVG.FeatureList.datatype ::= string() ;
SVG.stroke-linecap.attrib ::= (stroke-linecap::("butt" | "round" | "square" | "inherit"))? ;
SVG.Clip.class ::= SVG.clipPath | SVG.Clip.extra.class ;
SVG.Text.extra.class ::= ε ;
SVG.External.extra.attrib ::= ε ;
SVG.Container.attrib ::= ε ;
SVG.line ::= line::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Marker.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib (x1::SVG.Coordinate.datatype)? (y1::SVG.Coordinate.datatype)? (x2::SVG.Coordinate.datatype)? (y2::SVG.Coordinate.datatype)? (transform::SVG.TransformList.datatype)?) ;
SVG.Description.extra.class ::= ε ;
SVG.textPath ::= textPath::((string() | SVG.tspan | SVG.tref | SVG.altGlyph | SVG.animate | SVG.set | SVG.animateColor | SVG.Description.class | SVG.Hyperlink.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.XLinkRequired.attrib SVG.External.attrib (startOffset::SVG.Length.datatype)? (textLength::SVG.Length.datatype)? (lengthAdjust::("spacing" | "spacingAndGlyphs"))? (method::("align" | "stretch"))? (spacing::("auto" | "exact"))?) ;
SVG.Conditional.extra.attrib ::= ε ;
SVG.onfocusout.attrib ::= (onfocusout::SVG.Script.datatype)? ;
SVG.radialGradient ::= radialGradient::(SVG.Description.class* (SVG.stop | SVG.animate | SVG.set | SVG.animateTransform)* SVG.Core.attrib SVG.Style.attrib SVG.Color.attrib SVG.Gradient.attrib SVG.XLink.attrib SVG.External.attrib (cx::SVG.Coordinate.datatype)? (cy::SVG.Coordinate.datatype)? (r::SVG.Length.datatype)? (fx::SVG.Coordinate.datatype)? (fy::SVG.Coordinate.datatype)? (gradientUnits::("userSpaceOnUse" | "objectBoundingBox"))? (gradientTransform::SVG.TransformList.datatype)? (spreadMethod::("pad" | "reflect" | "repeat"))?) ;
SVG.altGlyphDef ::= altGlyphDef::((SVG.glyphRef+) | (SVG.altGlyphItem+) SVG.Core.attrib) ;
SVG.FilterColor.attrib ::= (color-interpolation-filters::("auto" | "sRGB" | "linearRGB" | "inherit"))? SVG.FilterColor.extra.attrib ;
 SVG.FilterColor.attrib ::= ε ;
SVG.onrepeat.attrib ::= (onrepeat::SVG.Script.datatype)? ;
SVG.hkern ::= hkern::(ε SVG.Core.attrib (u1::string())? (g1::string())? (u2::string())? (g2::string())? k::SVG.Number.datatype) ;
SVG.definition-src ::= definition-src::(ε SVG.Core.attrib SVG.XLinkRequired.attrib) ;
SVG.Presentation.attrib ::= SVG.Container.attrib SVG.Viewport.attrib SVG.Text.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Marker.attrib SVG.Profile.attrib SVG.Gradient.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.FilterColor.attrib SVG.Cursor.attrib (flood-color::SVG.SVGColor.datatype)? (flood-opacity::SVG.OpacityValue.datatype)? (lighting-color::SVG.SVGColor.datatype)? SVG.Presentation.extra.attrib ;
SVG.AnimationAttribute.extra.attrib ::= ε ;
SVG.font-face-format ::= font-face-format::(ε SVG.Core.attrib (string::string())?) ;
SVG.Pattern.class ::= SVG.pattern | SVG.Pattern.extra.class ;
SVG.rect ::= rect::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? width::SVG.Length.datatype height::SVG.Length.datatype (rx::SVG.Length.datatype)? (ry::SVG.Length.datatype)? (transform::SVG.TransformList.datatype)?) ;
SVG.StrokeDashOffsetValue.datatype ::= string() ;
SVG.Viewport.attrib ::= ε ;
 SVG.Viewport.attrib ::= SVG.clip.attrib SVG.overflow.attrib SVG.Viewport.extra.attrib ;
SVG.NumberOrPercentage.datatype ::= string() ;
SVG.Mask.attrib ::= ε ;
 SVG.Mask.attrib ::= (mask::SVG.MaskValue.datatype)? SVG.Mask.extra.attrib ;
SVG.AnimationValue.attrib ::= (calcMode::("discrete" | "linear" | "paced" | "spline"))? (values::string())? (keyTimes::string())? (keySplines::string())? (from::string())? (to::string())? (by::string())? SVG.AnimationValue.extra.attrib ;
SVG.Color.attrib ::= ε ;
 SVG.Color.attrib ::= SVG.color.attrib SVG.color-interpolation.attrib SVG.color-rendering.attrib SVG.Color.extra.attrib ;
SVG.g ::= g::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.External.attrib (transform::SVG.TransformList.datatype)?) ;
SVG.onactivate.attrib ::= (onactivate::SVG.Script.datatype)? ;
SVG.Conditional.attrib ::= (requiredFeatures::SVG.FeatureList.datatype)? (requiredExtensions::SVG.ExtensionList.datatype)? (systemLanguage::SVG.LanguageCodes.datatype)? SVG.Conditional.extra.attrib ;
 SVG.Conditional.attrib ::= ε ;
SVG.ClipValue.datatype ::= string() ;
SVG.Text.datatype ::= string() ;
SVG.DocumentEvents.extra.attrib ::= ε ;
SVG.a ::= a::((string() | SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.XLinkReplace.attrib SVG.External.attrib (transform::SVG.TransformList.datatype)? (target::SVG.LinkTarget.datatype)?) ;
SVG.animate ::= animate::(SVG.Description.class* SVG.Core.attrib SVG.Conditional.attrib SVG.AnimationEvents.attrib SVG.External.attrib SVG.Animation.attrib SVG.AnimationAttribute.attrib SVG.AnimationTiming.attrib SVG.AnimationValue.attrib SVG.AnimationAddtion.attrib) ;
SVG.FilterColor.extra.attrib ::= ε ;
SVG.FilterPrimitive.extra.attrib ::= ε ;
SVG.Style.attrib ::= ε ;
 SVG.Style.attrib ::= (style::SVG.StyleSheet.datatype)? (class::SVG.ClassList.datatype)? SVG.Style.extra.attrib ;
SVG.image ::= image::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Viewport.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Profile.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.XLinkEmbed.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? width::SVG.Length.datatype height::SVG.Length.datatype (preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype)? (transform::SVG.TransformList.datatype)?) ;
SVG.XLink.attrib ::= ε ;
 SVG.XLink.attrib ::= (xlink:type::"simple")? (xlink:href::SVG.URI.datatype)? (xlink:role::SVG.URI.datatype)? (xlink:arcrole::SVG.URI.datatype)? (xlink:title::string())? (xlink:show::"other")? (xlink:actuate::"onLoad")? SVG.XLink.extra.attrib ;
SVG.Core.attrib ::= SVG.id.attrib SVG.base.attrib SVG.lang.attrib SVG.space.attrib SVG.Core.extra.attrib ;
 SVG.Core.attrib ::= ε ;
SVG.LanguageCodes.datatype ::= string() ;
SVG.onmouseover.attrib ::= (onmouseover::SVG.Script.datatype)? ;
SVG.feBlend ::= feBlend::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib in2::string() (mode::("normal" | "multiply" | "screen" | "darken" | "lighten"))?) ;
SVG.MediaDesc.datatype ::= string() ;
XLinkRequired.attrib ::= ε ;
SVG.AnimationEvents.attrib ::= SVG.onbegin.attrib SVG.onend.attrib SVG.onrepeat.attrib SVG.AnimationEvents.extra.attrib ;
 SVG.AnimationEvents.attrib ::= ε ;
SVG.Font.class ::= SVG.font | SVG.font-face | SVG.Font.extra.class ;
SVG.color.attrib ::= (color::SVG.Color.datatype)? ;
SVG.Number.datatype ::= integer() ;
SVG.Integer.datatype ::= integer() ;
SVG.Color.extra.attrib ::= ε ;
SVG.fill-rule.attrib ::= (fill-rule::SVG.ClipFillRule.datatype)? ;
SVG.Color.datatype ::= string() ;
SVG.Opacity.attrib ::= ε ;
 SVG.Opacity.attrib ::= SVG.opacity.attrib SVG.fill-opacity.attrib SVG.stroke-opacity.attrib SVG.Opacity.extra.attrib ;
SVG.stroke.attrib ::= (stroke::SVG.Paint.datatype)? ;
SVG.color-profile ::= color-profile::(SVG.Description.class* SVG.Core.attrib SVG.XLink.attrib (local::string())? name::string() (rendering-intent::("auto" | "perceptual" | "relative-colorimetric" | "saturation" | "absolute-colorimetric"))?) ;
SVG.TextContent.extra.attrib ::= ε ;
XLinkEmbed.attrib ::= ε ;
SVG.feMerge ::= feMerge::(SVG.feMergeNode* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitive.attrib) ;
SVG.Core.extra.attrib ::= ε ;
SVG.Filter.class ::= SVG.filter | SVG.Filter.extra.class ;
SVG.tref ::= tref::((SVG.animate | SVG.set | SVG.animateColor | SVG.Description.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.XLinkRequired.attrib SVG.External.attrib (x::SVG.Coordinates.datatype)? (y::SVG.Coordinates.datatype)? (dx::SVG.Lengths.datatype)? (dy::SVG.Lengths.datatype)? (rotate::SVG.Numbers.datatype)? (textLength::SVG.Length.datatype)? (lengthAdjust::("spacing" | "spacingAndGlyphs"))?) ;
SVG.foreignObject ::= foreignObject::(SVG.foreignObject.content SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? width::SVG.Length.datatype height::SVG.Length.datatype (transform::SVG.TransformList.datatype)?) ;
SVG.FilterPrimitiveWithIn.attrib ::= SVG.FilterPrimitive.attrib (in::string())? SVG.FilterPrimitiveWithIn.extra.attrib ;
SVG.Use.class ::= SVG.use | SVG.Use.extra.class ;
SVG.Clip.extra.class ::= ε ;
SVG.glyph ::= glyph::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Style.attrib SVG.Presentation.attrib (unicode::string())? (glyph-name::string())? (d::SVG.PathData.datatype)? (orientation::string())? (arabic-form::string())? (lang::SVG.LanguageCodes.datatype)? (horiz-adv-x::SVG.Number.datatype)? (vert-origin-x::SVG.Number.datatype)? (vert-origin-y::SVG.Number.datatype)? (vert-adv-y::SVG.Number.datatype)?) ;
SVG.Animation.attrib ::= SVG.XLink.attrib SVG.Animation.extra.attrib ;
SVG.Clip.extra.attrib ::= ε ;
SVG.ViewBoxSpec.datatype ::= string() ;
SVG.View.class ::= SVG.view | SVG.View.extra.class ;
SVG.opacity.attrib ::= (opacity::SVG.OpacityValue.datatype)? ;
SVG.feTile ::= feTile::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib) ;
SVG.Opacity.extra.attrib ::= ε ;
SVG.AnimationTiming.extra.attrib ::= ε ;
SVG.XLinkRequired.extra.attrib ::= ε ;
SVG.stroke-linejoin.attrib ::= (stroke-linejoin::("miter" | "round" | "bevel" | "inherit"))? ;
SVG.Lengths.datatype ::= string() ;
SVG.fill-opacity.attrib ::= (fill-opacity::SVG.OpacityValue.datatype)? ;
SVG.fill.attrib ::= (fill::SVG.Paint.datatype)? ;
SVG.Conditional.extra.class ::= ε ;
SVG.font-face-name ::= font-face-name::(ε SVG.Core.attrib (name::string())?) ;
SVG.onmouseout.attrib ::= (onmouseout::SVG.Script.datatype)? ;
SVG.feFuncR ::= feFuncR::((SVG.animate | SVG.set)* SVG.Core.attrib type::("identity" | "table" | "discrete" | "linear" | "gamma") (tableValues::string())? (slope::SVG.Number.datatype)? (intercept::SVG.Number.datatype)? (amplitude::SVG.Number.datatype)? (exponent::SVG.Number.datatype)? (offset::SVG.Number.datatype)?) ;
SVG.FilterValue.datatype ::= string() ;
SVG.text-rendering.attrib ::= (text-rendering::("auto" | "optimizeSpeed" | "optimizeLegibility" | "geometricPrecision" | "inherit"))? ;
SVG.Mask.extra.attrib ::= ε ;
SVG.use ::= use::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.XLinkEmbed.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? (width::SVG.Length.datatype)? (height::SVG.Length.datatype)? (transform::SVG.TransformList.datatype)?) ;
SVG.View.extra.class ::= ε ;
SVG.StyleSheet.datatype ::= string() ;
SVG.feFuncG ::= feFuncG::((SVG.animate | SVG.set)* SVG.Core.attrib type::("identity" | "table" | "discrete" | "linear" | "gamma") (tableValues::string())? (slope::SVG.Number.datatype)? (intercept::SVG.Number.datatype)? (amplitude::SVG.Number.datatype)? (exponent::SVG.Number.datatype)? (offset::SVG.Number.datatype)?) ;
SVG.feFuncB ::= feFuncB::((SVG.animate | SVG.set)* SVG.Core.attrib type::("identity" | "table" | "discrete" | "linear" | "gamma") (tableValues::string())? (slope::SVG.Number.datatype)? (intercept::SVG.Number.datatype)? (amplitude::SVG.Number.datatype)? (exponent::SVG.Number.datatype)? (offset::SVG.Number.datatype)?) ;
SVG.feFlood ::= feFlood::((SVG.animate | SVG.set | SVG.animateColor)* SVG.Core.attrib SVG.Style.attrib SVG.Color.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib (flood-color::SVG.SVGColor.datatype)? (flood-opacity::SVG.OpacityValue.datatype)?) ;
SVG.AnimationTiming.attrib ::= (begin::string())? (dur::string())? (end::string())? (min::string())? (max::string())? (restart::("always" | "never" | "whenNotActive"))? (repeatCount::string())? (repeatDur::string())? (fill::("remove" | "freeze"))? SVG.AnimationTiming.extra.attrib ;
SVG.feFuncA ::= feFuncA::((SVG.animate | SVG.set)* SVG.Core.attrib type::("identity" | "table" | "discrete" | "linear" | "gamma") (tableValues::string())? (slope::SVG.Number.datatype)? (intercept::SVG.Number.datatype)? (amplitude::SVG.Number.datatype)? (exponent::SVG.Number.datatype)? (offset::SVG.Number.datatype)?) ;
SVG.Coordinate.datatype ::= string() ;
SVG.FilterPrimitive.class ::= SVG.feBlend | SVG.feColorMatrix | SVG.feComponentTransfer | SVG.feComposite | SVG.feFlood | SVG.feGaussianBlur | SVG.feImage | SVG.feMerge | SVG.feOffset | SVG.feTile | SVG.FilterPrimitive.extra.class ;
SVG.Conditional.class ::= SVG.switch | SVG.Conditional.extra.class ;
SVG.Points.datatype ::= string() ;
SVG.Animation.class ::= SVG.animate | SVG.set | SVG.animateMotion | SVG.animateColor | SVG.animateTransform | SVG.Animation.extra.class ;
SVG.stroke-width.attrib ::= (stroke-width::SVG.StrokeWidthValue.datatype)? ;
SVG.Image.extra.class ::= ε ;
SVG.AnimationAttribute.attrib ::= attributeName::string() (attributeType::string())? SVG.AnimationAttribute.extra.attrib ;
SVG.Marker.attrib ::= ε ;
SVG.GlyphOrientationHorizontalValue.datatype ::= string() ;
SVG.Filter.extra.class ::= ε ;
SVG.ID.datatype ::= string() ;
SVG.Profile.class ::= SVG.color-profile | SVG.Profile.extra.class ;
SVG.ClassList.datatype ::= string() ;
SVG.Mask.extra.class ::= ε ;
SVG.Graphics.extra.attrib ::= ε ;
SVG.feOffset ::= feOffset::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib (dx::SVG.Number.datatype)? (dy::SVG.Number.datatype)?) ;
SVG.feColorMatrix ::= feColorMatrix::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib (type::("matrix" | "saturate" | "hueRotate" | "luminanceToAlpha"))? (values::string())?) ;
SVG.SpacingValue.datatype ::= string() ;
SVG.text ::= text::((string() | SVG.Description.class | SVG.Animation.class | SVG.TextContent.class | SVG.Hyperlink.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Text.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib (x::SVG.Coordinates.datatype)? (y::SVG.Coordinates.datatype)? (dx::SVG.Lengths.datatype)? (dy::SVG.Lengths.datatype)? (rotate::SVG.Numbers.datatype)? (textLength::SVG.Length.datatype)? (lengthAdjust::("spacing" | "spacingAndGlyphs"))? (transform::SVG.TransformList.datatype)?) ;
SVG.GraphicalEvents.extra.attrib ::= ε ;
SVG.foreignObject.content ::= SVG.foreignObject.class* ;
SVG.XLinkRequired.attrib ::= (xlink:type::"simple")? xlink:href::SVG.URI.datatype (xlink:role::SVG.URI.datatype)? (xlink:arcrole::SVG.URI.datatype)? (xlink:title::string())? (xlink:show::"other")? (xlink:actuate::"onLoad")? SVG.XLinkRequired.extra.attrib ;
SVG.overflow.attrib ::= (overflow::("visible" | "hidden" | "scroll" | "auto" | "inherit"))? ;
SVG.Profile.extra.class ::= ε ;
SVG.StrokeWidthValue.datatype ::= string() ;
SVG.External.attrib ::= ε ;
 SVG.External.attrib ::= SVG.externalResourcesRequired.attrib SVG.External.extra.attrib ;
SVG.AnimationEvents.extra.attrib ::= ε ;
SVG.symbol ::= symbol::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.External.attrib (viewBox::SVG.ViewBoxSpec.datatype)? (preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype)?) ;
SVG.onmouseup.attrib ::= (onmouseup::SVG.Script.datatype)? ;
SVG.color-rendering.attrib ::= (color-rendering::("auto" | "optimizeSpeed" | "optimizeQuality" | "inherit"))? ;
SVG.Font.attrib ::= ε ;
 SVG.Font.attrib ::= (font-family::SVG.FontFamilyValue.datatype)? (font-size::SVG.FontSizeValue.datatype)? (font-size-adjust::SVG.FontSizeAdjustValue.datatype)? (font-stretch::("normal" | "wider" | "narrower" | "ultra-condensed" | "extra-condensed" | "condensed" | "semi-condensed" | "semi-expanded" | "expanded" | "extra-expanded" | "ultra-expanded" | "inherit"))? (font-style::("normal" | "italic" | "oblique" | "inherit"))? (font-variant::("normal" | "small-caps" | "inherit"))? (font-weight::("normal" | "bold" | "bolder" | "lighter" | "100" | "200" | "300" | "400" | "500" | "600" | "700" | "800" | "900" | "inherit"))? SVG.Font.extra.attrib ;
SVG.clip.attrib ::= (clip::SVG.ClipValue.datatype)? ;
SVG.Paint.datatype ::= string() ;
SVG.AnimationAddtion.attrib ::= (additive::("replace" | "sum"))? (accumulate::("none" | "sum"))? SVG.AnimationAddition.extra.attrib ;
SVG.StrokeMiterLimitValue.datatype ::= string() ;
SVG.defs ::= defs::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.External.attrib (transform::SVG.TransformList.datatype)?) ;
SVG.TextContent.attrib ::= ε ;
 SVG.TextContent.attrib ::= (alignment-baseline::("baseline" | "top" | "before-edge" | "text-top" | "text-before-edge" | "middle" | "bottom" | "after-edge" | "text-bottom" | "text-after-edge" | "ideographic" | "lower" | "hanging" | "mathematical" | "inherit"))? (baseline-shift::SVG.BaselineShiftValue.datatype)? (direction::("ltr" | "rtl" | "inherit"))? (dominant-baseline::("auto" | "autosense-script" | "no-change" | "reset" | "ideographic" | "lower" | "hanging" | "mathematical" | "inherit"))? (glyph-orientation-horizontal::SVG.GlyphOrientationHorizontalValue.datatype)? (glyph-orientation-vertical::SVG.GlyphOrientationVerticalValue.datatype)? (kerning::SVG.KerningValue.datatype)? (letter-spacing::SVG.SpacingValue.datatype)? (text-anchor::("start" | "middle" | "end" | "inherit"))? (text-decoration::SVG.TextDecorationValue.datatype)? (unicode-bidi::("normal" | "embed" | "bidi-override" | "inherit"))? (word-spacing::SVG.SpacingValue.datatype)? SVG.TextContent.extra.attrib ;
SVG.animateColor ::= animateColor::(SVG.Description.class* SVG.Core.attrib SVG.Conditional.attrib SVG.AnimationEvents.attrib SVG.External.attrib SVG.Animation.attrib SVG.AnimationAttribute.attrib SVG.AnimationTiming.attrib SVG.AnimationValue.attrib SVG.AnimationAddtion.attrib) ;
SVG.Cursor.class ::= ε ;
SVG.Use.extra.class ::= ε ;
SVG.externalResourcesRequired.attrib ::= (externalResourcesRequired::SVG.Boolean.datatype)? ;
SVG.Extensibility.class ::= SVG.foreignObject | SVG.Extensibility.extra.class ;
SVG.color-interpolation.attrib ::= (color-interpolation::("auto" | "sRGB" | "linearRGB" | "inherit"))? ;
SVG.TextDecorationValue.datatype ::= string() ;
SVG.Viewport.extra.attrib ::= ε ;
SVG.Animation.extra.class ::= ε ;
SVG.vkern ::= vkern::(ε SVG.Core.attrib (u1::string())? (g1::string())? (u2::string())? (g2::string())? k::SVG.Number.datatype) ;
SVG.OpacityValue.datatype ::= string() ;
SVG.filter ::= filter::(SVG.Description.class* (SVG.animate | SVG.set | SVG.FilterPrimitive.class)* SVG.Core.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.XLink.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? (width::SVG.Length.datatype)? (height::SVG.Length.datatype)? (filterRes::SVG.NumberOptionalNumber.datatype)? (filterUnits::("userSpaceOnUse" | "objectBoundingBox"))? (primitiveUnits::("userSpaceOnUse" | "objectBoundingBox"))?) ;
SVG.display.attrib ::= (display::("inline" | "block" | "list-item" | "run-in" | "compact" | "marker" | "table" | "inline-table" | "table-row-group" | "table-header-group" | "table-footer-group" | "table-row" | "table-column-group" | "table-column" | "table-cell" | "table-caption" | "none" | "inherit"))? ;
SVG.linearGradient ::= linearGradient::(SVG.Description.class* (SVG.stop | SVG.animate | SVG.set | SVG.animateTransform)* SVG.Core.attrib SVG.Style.attrib SVG.Color.attrib SVG.Gradient.attrib SVG.XLink.attrib SVG.External.attrib (x1::SVG.Coordinate.datatype)? (y1::SVG.Coordinate.datatype)? (x2::SVG.Coordinate.datatype)? (y2::SVG.Coordinate.datatype)? (gradientUnits::("userSpaceOnUse" | "objectBoundingBox"))? (gradientTransform::SVG.TransformList.datatype)? (spreadMethod::("pad" | "reflect" | "repeat"))?) ;
SVG.feComponentTransfer ::= feComponentTransfer::(SVG.feFuncR? SVG.feFuncG? SVG.feFuncB? SVG.feFuncA? SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib) ;
SVG.Clip.attrib ::= (clip-path::SVG.ClipPathValue.datatype)? (clip-rule::SVG.ClipFillRule.datatype)? SVG.Clip.extra.attrib ;
 SVG.Clip.attrib ::= ε ;
SVG.Font.extra.attrib ::= ε ;
SVG.Image.class ::= SVG.image | SVG.Image.extra.class ;
SVG.mask ::= mask::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? (width::SVG.Length.datatype)? (height::SVG.Length.datatype)? (maskUnits::("userSpaceOnUse" | "objectBoundingBox"))? (maskContentUnits::("userSpaceOnUse" | "objectBoundingBox"))?) ;
SVG.Filter.extra.attrib ::= ε ;
SVG.foreignObject.class ::= string() ;
SVG.FilterPrimitive.attrib ::= (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? (width::SVG.Length.datatype)? (height::SVG.Length.datatype)? (result::string())? SVG.FilterPrimitive.extra.attrib ;
SVG.XLink.extra.attrib ::= ε ;
SVG.Marker.class ::= ε ;
SVG.TextContent.class ::= SVG.tspan | SVG.tref | SVG.textPath | SVG.altGlyph | SVG.TextContent.extra.class ;
SVG.Extensibility.extra.class ::= ε ;
SVG.feGaussianBlur ::= feGaussianBlur::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib (stdDeviation::SVG.NumberOptionalNumber.datatype)?) ;
SVG.SVGColor.datatype ::= string() ;
SVG.Hyperlink.extra.class ::= ε ;
SVG.stroke-dashoffset.attrib ::= (stroke-dashoffset::SVG.StrokeDashOffsetValue.datatype)? ;
SVG.Gradient.class ::= SVG.linearGradient | SVG.radialGradient | SVG.Gradient.extra.class ;
SVG.Text.extra.attrib ::= ε ;
SVG.ExtensionList.datatype ::= string() ;
SVG.onclick.attrib ::= (onclick::SVG.Script.datatype)? ;
SVG.PathData.datatype ::= string() ;
SVG.ellipse ::= ellipse::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib (cx::SVG.Coordinate.datatype)? (cy::SVG.Coordinate.datatype)? rx::SVG.Length.datatype ry::SVG.Length.datatype (transform::SVG.TransformList.datatype)?) ;
SVG.TransformList.datatype ::= string() ;
SVG.feImage ::= feImage::((SVG.animate | SVG.set | SVG.animateTransform)* SVG.Core.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.FilterPrimitive.attrib SVG.XLinkEmbed.attrib SVG.External.attrib (preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype)?) ;
SVG.glyphRef ::= glyphRef::(ε SVG.Core.attrib SVG.Style.attrib SVG.Font.attrib SVG.XLink.attrib (x::SVG.Coordinates.datatype)? (y::SVG.Coordinates.datatype)? (dx::SVG.Lengths.datatype)? (dy::SVG.Lengths.datatype)? (glyphRef::string())? (format::string())?) ;
SVG.Style.class ::= SVG.style | SVG.Style.extra.class ;
SVG.FilterPrimitive.extra.class ::= ε ;
SVG.title ::= title::(string() SVG.Core.attrib SVG.Style.attrib) ;
SVG.polyline ::= polyline::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Marker.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib points::SVG.Points.datatype (transform::SVG.TransformList.datatype)?) ;
SVG.Hyperlink.class ::= SVG.a | SVG.Hyperlink.extra.class ;
SVG.FilterPrimitiveWithIn.extra.attrib ::= ε ;
SVG.Length.datatype ::= string() ;
SVG.Shape.class ::= SVG.path | SVG.rect | SVG.circle | SVG.line | SVG.ellipse | SVG.polyline | SVG.polygon | SVG.Shape.extra.class ;
SVG.altGlyphItem ::= altGlyphItem::(SVG.glyphRef+ SVG.Core.attrib) ;
SVG.lang.attrib ::= (xml:lang::SVG.LanguageCode.datatype)? ;
SVG.Script.class ::= SVG.script | SVG.Script.extra.class ;
SVG.switch ::= switch::(SVG.Description.class* (SVG.svg | SVG.g | SVG.use | SVG.text | SVG.text | SVG.Animation.class | SVG.Conditional.class | SVG.Image.class | SVG.Shape.class | SVG.Hyperlink.class | SVG.Extensibility.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.External.attrib (transform::SVG.TransformList.datatype)?) ;
SVG.Gradient.extra.attrib ::= ε ;
SVG.space.attrib ::= (xml:space::("default" | "preserve"))? ;
SVG.onresize.attrib ::= (onresize::SVG.Script.datatype)? ;
SVG.ClipFillRule.datatype ::= string() ;
SVG.stroke-opacity.attrib ::= (stroke-opacity::SVG.OpacityValue.datatype)? ;
SVG.Cursor.attrib ::= ε ;
SVG.Profile.extra.attrib ::= ε ;
SVG.Style.extra.class ::= ε ;
SVG.view ::= view::(SVG.Description.class* SVG.Core.attrib SVG.External.attrib (viewBox::SVG.ViewBoxSpec.datatype)? (preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype)? (zoomAndPan::("disable" | "magnify"))? (viewTarget::string())?) ;
SVG.font-face-src ::= font-face-src::((SVG.font-face-uri | SVG.font-face-name)+ SVG.Core.attrib) ;
SVG.GlyphOrientationVerticalValue.datatype ::= string() ;
SVG.Shape.extra.class ::= ε ;
SVG.LanguageCode.datatype ::= string() ;
SVG.shape-rendering.attrib ::= (shape-rendering::("auto" | "optimizeSpeed" | "crispEdges" | "geometricPrecision" | "inherit"))? ;
SVG.Paint.extra.attrib ::= ε ;
SVG.Coordinates.datatype ::= string() ;
SVG.Mask.class ::= SVG.mask | SVG.Mask.extra.class ;
SVG.AnimationAddition.extra.attrib ::= ε ;
--------------------markup::svg-furubayashi-tiny.bgf--------------------
SVG.Animation.attrib ::= SVG.XLink.attrib SVG.Animation.extra.attrib ;
SVG.visibility.attrib ::= (visibility::("visible" | "hidden" | "inherit"))? ;
SVG.ViewBoxSpec.datatype ::= string() ;
SVG.desc ::= desc::(string() SVG.Core.attrib SVG.Style.attrib) ;
SVG.View.class ::= SVG.view | SVG.View.extra.class ;
SVG.stroke-miterlimit.attrib ::= (stroke-miterlimit::SVG.StrokeMiterLimitValue.datatype)? ;
SVG.GraphicalEvents.attrib ::= ε ;
SVG.animateTransform ::= animateTransform::(SVG.Description.class* SVG.Core.attrib SVG.Conditional.attrib SVG.AnimationEvents.attrib SVG.External.attrib SVG.Animation.attrib SVG.AnimationAttribute.attrib SVG.AnimationTiming.attrib SVG.AnimationValue.attrib SVG.AnimationAddtion.attrib (type::("translate" | "scale" | "rotate" | "skewX" | "skewY"))?) ;
SVG.AnimationTiming.extra.attrib ::= ε ;
SVG.font-face ::= font-face::(SVG.Description.class* SVG.font-face-src? SVG.Core.attrib (font-family::string())? (font-style::string())? (font-variant::string())? (font-weight::string())? (font-stretch::string())? (font-size::string())? (unicode-range::string())? (units-per-em::SVG.Number.datatype)? (panose-1::string())? (stemv::SVG.Number.datatype)? (stemh::SVG.Number.datatype)? (slope::SVG.Number.datatype)? (cap-height::SVG.Number.datatype)? (x-height::SVG.Number.datatype)? (accent-height::SVG.Number.datatype)? (ascent::SVG.Number.datatype)? (descent::SVG.Number.datatype)? (widths::string())? (bbox::string())? (ideographic::SVG.Number.datatype)? (alphabetic::SVG.Number.datatype)? (mathematical::SVG.Number.datatype)? (hanging::SVG.Number.datatype)? (underline-position::SVG.Number.datatype)? (underline-thickness::SVG.Number.datatype)? (strikethrough-position::SVG.Number.datatype)? (strikethrough-thickness::SVG.Number.datatype)? (overline-position::SVG.Number.datatype)? (overline-thickness::SVG.Number.datatype)?) ;
SVG.XLinkRequired.extra.attrib ::= ε ;
SVG.Lengths.datatype ::= string() ;
SVG.stroke-linejoin.attrib ::= (stroke-linejoin::("miter" | "round" | "bevel" | "inherit"))? ;
SVG.fill.attrib ::= (fill::SVG.Paint.datatype)? ;
SVG.Conditional.extra.class ::= ε ;
SVG.mpath ::= mpath::(SVG.Description.class* SVG.Core.attrib SVG.XLinkRequired.attrib SVG.External.attrib) ;
SVG.XLinkEmbed.attrib ::= (xlink:type::"simple")? xlink:href::SVG.URI.datatype (xlink:role::SVG.URI.datatype)? (xlink:arcrole::SVG.URI.datatype)? (xlink:title::string())? (xlink:show::"embed")? (xlink:actuate::"onLoad")? SVG.XLinkEmbed.extra.attrib ;
SVG.font-face-name ::= font-face-name::(ε SVG.Core.attrib (name::string())?) ;
SVG.StrokeDashArrayValue.datatype ::= string() ;
SVG.Paint.attrib ::= SVG.fill.attrib SVG.fill-rule.attrib SVG.stroke.attrib SVG.stroke-dasharray.attrib SVG.stroke-dashoffset.attrib SVG.stroke-linecap.attrib SVG.stroke-linejoin.attrib SVG.stroke-miterlimit.attrib SVG.stroke-width.attrib SVG.Paint.extra.attrib ;
 SVG.Paint.attrib ::= ε ;
SVG.Text.attrib ::= ε ;
SVG.base.attrib ::= (xml:base::SVG.URI.datatype)? ;
SVG.Script.datatype ::= string() ;
SVG.use ::= use::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.XLinkEmbed.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? (width::SVG.Length.datatype)? (height::SVG.Length.datatype)? (transform::SVG.TransformList.datatype)?) ;
SVG.stroke-dasharray.attrib ::= (stroke-dasharray::SVG.StrokeDashArrayValue.datatype)? ;
SVG.View.extra.class ::= ε ;
SVG.FontSizeValue.datatype ::= string() ;
SVG.missing-glyph ::= missing-glyph::(SVG.Description.class* SVG.Core.attrib SVG.Style.attrib (d::SVG.PathData.datatype)? (horiz-adv-x::SVG.Number.datatype)?) ;
SVG.StyleSheet.datatype ::= string() ;
SVG.PreserveAspectRatioSpec.datatype ::= string() ;
SVG.Structure.extra.class ::= ε ;
SVG.AnimationTiming.attrib ::= (begin::string())? (dur::string())? (end::string())? (min::string())? (max::string())? (restart::("always" | "never" | "whenNotActive"))? (repeatCount::string())? (repeatDur::string())? (fill::("remove" | "freeze"))? SVG.AnimationTiming.extra.attrib ;
SVG.id.attrib ::= (id::SVG.ID.datatype)? ;
SVG.Coordinate.datatype ::= string() ;
SVG.animateMotion ::= animateMotion::(SVG.Description.class* SVG.mpath? SVG.Core.attrib SVG.Conditional.attrib SVG.AnimationEvents.attrib SVG.External.attrib SVG.Animation.attrib SVG.AnimationTiming.attrib SVG.AnimationAddtion.attrib (calcMode::("discrete" | "linear" | "paced" | "spline"))? (values::string())? (keyTimes::string())? (Splines::string())? (from::string())? (to::string())? (by::string())? (path::string())? (keyPoints::string())? (rotate::string())? (origin::string())?) ;
SVG.XLinkReplace.extra.attrib ::= ε ;
SVG.Conditional.class ::= SVG.switch | SVG.Conditional.extra.class ;
SVG.XLinkEmbed.extra.attrib ::= ε ;
SVG.Points.datatype ::= string() ;
SVG.Animation.class ::= SVG.animate | SVG.set | SVG.animateMotion | SVG.animateColor | SVG.animateTransform | SVG.Animation.extra.class ;
SVG.Graphics.attrib ::= SVG.display.attrib SVG.visibility.attrib SVG.Graphics.extra.attrib ;
 SVG.Graphics.attrib ::= ε ;
SVG.FontFamilyValue.datatype ::= string() ;
SVG.Image.extra.class ::= ε ;
SVG.stroke-width.attrib ::= (stroke-width::SVG.StrokeWidthValue.datatype)? ;
SVG.Description.class ::= SVG.desc | SVG.title | SVG.metadata | SVG.Description.extra.class ;
SVG.circle ::= circle::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib (cx::SVG.Coordinate.datatype)? (cy::SVG.Coordinate.datatype)? r::SVG.Length.datatype (transform::SVG.TransformList.datatype)?) ;
SVG.svg ::= svg::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.DocumentEvents.attrib SVG.GraphicalEvents.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? (width::SVG.Length.datatype)? (height::SVG.Length.datatype)? (viewBox::SVG.ViewBoxSpec.datatype)? (preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype)? (zoomAndPan::("disable" | "magnify"))? version::SVG.Number.datatype (baseProfile::SVG.Text.datatype)?) ;
SVG.Profile.attrib ::= ε ;
SVG.font ::= font::(SVG.Description.class* SVG.font-face SVG.missing-glyph (SVG.glyph | SVG.hkern)* SVG.Core.attrib SVG.Style.attrib SVG.External.attrib (horiz-origin-x::SVG.Number.datatype)? horiz-adv-x::SVG.Number.datatype) ;
SVG.set ::= set::(SVG.Description.class* SVG.Core.attrib SVG.Conditional.attrib SVG.AnimationEvents.attrib SVG.External.attrib SVG.Animation.attrib SVG.AnimationAttribute.attrib SVG.AnimationTiming.attrib (to::string())?) ;
SVG.Filter.attrib ::= ε ;
SVG.AnimationAttribute.attrib ::= attributeName::string() (attributeType::string())? SVG.AnimationAttribute.extra.attrib ;
SVG.script ::= script::(string() SVG.Core.attrib SVG.XLink.attrib SVG.External.attrib type::SVG.ContentType.datatype) ;
SVG.Marker.attrib ::= ε ;
SVG.URI.datatype ::= string() ;
SVG.ID.datatype ::= string() ;
SVG.XLinkReplace.attrib ::= (xlink:type::"simple")? xlink:href::SVG.URI.datatype (xlink:role::SVG.URI.datatype)? (xlink:arcrole::SVG.URI.datatype)? (xlink:title::string())? (xlink:show::("new" | "replace"))? (xlink:actuate::"onRequest")? SVG.XLinkReplace.extra.attrib ;
SVG.Profile.class ::= ε ;
SVG.ContentType.datatype ::= string() ;
SVG.ClassList.datatype ::= string() ;
SVG.Graphics.extra.attrib ::= ε ;
SVG.AnimationValue.extra.attrib ::= ε ;
SVG.Animation.extra.attrib ::= ε ;
SVG.DocumentEvents.attrib ::= ε ;
SVG.metadata ::= metadata::(string() SVG.Core.attrib) ;
SVG.text ::= text::((string() | SVG.Description.class | SVG.Animation.class | SVG.Hyperlink.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib (x::SVG.Coordinates.datatype)? (y::SVG.Coordinates.datatype)? (rotate::SVG.Numbers.datatype)? (transform::SVG.TransformList.datatype)?) ;
SVG.foreignObject.content ::= SVG.foreignObject.class* ;
SVG.Numbers.datatype ::= string() ;
SVG.XLinkRequired.attrib ::= (xlink:type::"simple")? xlink:href::SVG.URI.datatype (xlink:role::SVG.URI.datatype)? (xlink:arcrole::SVG.URI.datatype)? (xlink:title::string())? (xlink:show::"other")? (xlink:actuate::"onLoad")? SVG.XLinkRequired.extra.attrib ;
SVG.polygon ::= polygon::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Marker.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib points::SVG.Points.datatype (transform::SVG.TransformList.datatype)?) ;
SVG.Style.extra.attrib ::= ε ;
SVG.path ::= path::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Marker.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib d::SVG.PathData.datatype (pathLength::SVG.Number.datatype)? (transform::SVG.TransformList.datatype)?) ;
SVG.style ::= style::(string() SVG.Core.attrib type::SVG.ContentType.datatype (media::SVG.MediaDesc.datatype)? (title::SVG.Text.datatype)?) ;
SVG.StrokeWidthValue.datatype ::= string() ;
SVG.Font.extra.class ::= ε ;
SVG.External.attrib ::= ε ;
 SVG.External.attrib ::= SVG.externalResourcesRequired.attrib SVG.External.extra.attrib ;
SVG.Script.extra.class ::= ε ;
SVG.Text.class ::= SVG.text | SVG.Text.extra.class ;
SVG.color-rendering.attrib ::= (color-rendering::("auto" | "optimizeSpeed" | "optimizeQuality" | "inherit"))? ;
SVG.Font.attrib ::= (font-family::SVG.FontFamilyValue.datatype)? (font-size::SVG.FontSizeValue.datatype)? (font-style::("normal" | "italic" | "oblique" | "inherit"))? (font-weight::("normal" | "bold" | "bolder" | "lighter" | "100" | "200" | "300" | "400" | "500" | "600" | "700" | "800" | "900" | "inherit"))? SVG.Font.extra.attrib ;
 SVG.Font.attrib ::= ε ;
SVG.Paint.datatype ::= string() ;
SVG.Gradient.attrib ::= ε ;
SVG.LinkTarget.datatype ::= string() ;
SVG.AnimationAddtion.attrib ::= (additive::("replace" | "sum"))? (accumulate::("none" | "sum"))? SVG.AnimationAddition.extra.attrib ;
SVG.StrokeMiterLimitValue.datatype ::= string() ;
SVG.defs ::= defs::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.External.attrib (transform::SVG.TransformList.datatype)?) ;
SVG.TextContent.attrib ::= (text-anchor::("start" | "middle" | "end" | "inherit"))? SVG.TextContent.extra.attrib ;
 SVG.TextContent.attrib ::= ε ;
SVG.Boolean.datatype ::= string() ;
SVG.Structure.class ::= SVG.g | SVG.defs | SVG.Use.class | SVG.Structure.extra.class ;
SVG.Presentation.extra.attrib ::= ε ;
SVG.animateColor ::= animateColor::(SVG.Description.class* SVG.Core.attrib SVG.Conditional.attrib SVG.AnimationEvents.attrib SVG.External.attrib SVG.Animation.attrib SVG.AnimationAttribute.attrib SVG.AnimationTiming.attrib SVG.AnimationValue.attrib SVG.AnimationAddtion.attrib) ;
SVG.Cursor.class ::= ε ;
SVG.externalResourcesRequired.attrib ::= (externalResourcesRequired::SVG.Boolean.datatype)? ;
SVG.Extensibility.class ::= SVG.foreignObject | SVG.Extensibility.extra.class ;
SVG.Use.extra.class ::= ε ;
SVG.FeatureList.datatype ::= string() ;
SVG.Animation.extra.class ::= ε ;
SVG.stroke-linecap.attrib ::= (stroke-linecap::("butt" | "round" | "square" | "inherit"))? ;
SVG.Clip.class ::= ε ;
SVG.Text.extra.class ::= ε ;
SVG.OpacityValue.datatype ::= string() ;
SVG.External.extra.attrib ::= ε ;
SVG.Container.attrib ::= ε ;
SVG.display.attrib ::= (display::("inline" | "block" | "list-item" | "run-in" | "compact" | "marker" | "table" | "inline-table" | "table-row-group" | "table-header-group" | "table-footer-group" | "table-row" | "table-column-group" | "table-column" | "table-cell" | "table-caption" | "none" | "inherit"))? ;
SVG.line ::= line::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Marker.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib (x1::SVG.Coordinate.datatype)? (y1::SVG.Coordinate.datatype)? (x2::SVG.Coordinate.datatype)? (y2::SVG.Coordinate.datatype)? (transform::SVG.TransformList.datatype)?) ;
SVG.Clip.attrib ::= ε ;
SVG.Description.extra.class ::= ε ;
SVG.Font.extra.attrib ::= ε ;
SVG.Image.class ::= SVG.image | SVG.Image.extra.class ;
SVG.Conditional.extra.attrib ::= ε ;
SVG.FilterColor.attrib ::= ε ;
SVG.Presentation.attrib ::= SVG.Container.attrib SVG.Viewport.attrib SVG.Text.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Marker.attrib SVG.Profile.attrib SVG.Gradient.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.FilterColor.attrib SVG.Cursor.attrib (flood-color::SVG.SVGColor.datatype)? (flood-opacity::SVG.OpacityValue.datatype)? (lighting-color::SVG.SVGColor.datatype)? SVG.Presentation.extra.attrib ;
SVG.hkern ::= hkern::(ε SVG.Core.attrib (u1::string())? (g1::string())? (u2::string())? (g2::string())? k::SVG.Number.datatype) ;
SVG.AnimationAttribute.extra.attrib ::= ε ;
SVG.foreignObject.class ::= string() ;
SVG.Pattern.class ::= ε ;
SVG.XLink.extra.attrib ::= ε ;
SVG.Marker.class ::= ε ;
SVG.rect ::= rect::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? width::SVG.Length.datatype height::SVG.Length.datatype (rx::SVG.Length.datatype)? (ry::SVG.Length.datatype)? (transform::SVG.TransformList.datatype)?) ;
SVG.Extensibility.extra.class ::= ε ;
SVG.SVGColor.datatype ::= string() ;
SVG.Hyperlink.extra.class ::= ε ;
SVG.Viewport.attrib ::= ε ;
SVG.StrokeDashOffsetValue.datatype ::= string() ;
SVG.stroke-dashoffset.attrib ::= (stroke-dashoffset::SVG.StrokeDashOffsetValue.datatype)? ;
SVG.Gradient.class ::= ε ;
SVG.Mask.attrib ::= ε ;
SVG.AnimationValue.attrib ::= (calcMode::("discrete" | "linear" | "paced" | "spline"))? (values::string())? (keyTimes::string())? (keySplines::string())? (from::string())? (to::string())? (by::string())? SVG.AnimationValue.extra.attrib ;
SVG.ExtensionList.datatype ::= string() ;
SVG.Color.attrib ::= SVG.color.attrib SVG.color-rendering.attrib SVG.Color.extra.attrib ;
 SVG.Color.attrib ::= ε ;
SVG.g ::= g::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.External.attrib (transform::SVG.TransformList.datatype)?) ;
SVG.Conditional.attrib ::= (requiredFeatures::SVG.FeatureList.datatype)? (requiredExtensions::SVG.ExtensionList.datatype)? (systemLanguage::SVG.LanguageCodes.datatype)? SVG.Conditional.extra.attrib ;
 SVG.Conditional.attrib ::= ε ;
SVG.Text.datatype ::= string() ;
SVG.PathData.datatype ::= string() ;
SVG.a ::= a::((string() | SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.XLinkReplace.attrib SVG.External.attrib (transform::SVG.TransformList.datatype)? (target::SVG.LinkTarget.datatype)?) ;
SVG.animate ::= animate::(SVG.Description.class* SVG.Core.attrib SVG.Conditional.attrib SVG.AnimationEvents.attrib SVG.External.attrib SVG.Animation.attrib SVG.AnimationAttribute.attrib SVG.AnimationTiming.attrib SVG.AnimationValue.attrib SVG.AnimationAddtion.attrib) ;
SVG.ellipse ::= ellipse::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib (cx::SVG.Coordinate.datatype)? (cy::SVG.Coordinate.datatype)? rx::SVG.Length.datatype ry::SVG.Length.datatype (transform::SVG.TransformList.datatype)?) ;
SVG.TransformList.datatype ::= string() ;
SVG.Style.class ::= SVG.style | SVG.Style.extra.class ;
SVG.image ::= image::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Viewport.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Profile.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.XLinkEmbed.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? width::SVG.Length.datatype height::SVG.Length.datatype (preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype)? (transform::SVG.TransformList.datatype)?) ;
SVG.Style.attrib ::= ε ;
 SVG.Style.attrib ::= (style::SVG.StyleSheet.datatype)? (class::SVG.ClassList.datatype)? SVG.Style.extra.attrib ;
SVG.XLink.attrib ::= ε ;
 SVG.XLink.attrib ::= (xlink:type::"simple")? (xlink:href::SVG.URI.datatype)? (xlink:role::SVG.URI.datatype)? (xlink:arcrole::SVG.URI.datatype)? (xlink:title::string())? (xlink:show::"other")? (xlink:actuate::"onLoad")? SVG.XLink.extra.attrib ;
SVG.Core.attrib ::= SVG.id.attrib SVG.base.attrib SVG.lang.attrib SVG.space.attrib SVG.Core.extra.attrib ;
 SVG.Core.attrib ::= ε ;
SVG.LanguageCodes.datatype ::= string() ;
SVG.title ::= title::(string() SVG.Core.attrib SVG.Style.attrib) ;
SVG.polyline ::= polyline::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Marker.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib points::SVG.Points.datatype (transform::SVG.TransformList.datatype)?) ;
SVG.MediaDesc.datatype ::= string() ;
XLinkRequired.attrib ::= ε ;
SVG.Hyperlink.class ::= SVG.a | SVG.Hyperlink.extra.class ;
SVG.AnimationEvents.attrib ::= ε ;
SVG.Font.class ::= SVG.font | SVG.font-face | SVG.Font.extra.class ;
SVG.Length.datatype ::= string() ;
SVG.Shape.class ::= SVG.path | SVG.rect | SVG.circle | SVG.line | SVG.ellipse | SVG.polyline | SVG.polygon | SVG.Shape.extra.class ;
SVG.lang.attrib ::= (xml:lang::SVG.LanguageCode.datatype)? ;
SVG.Script.class ::= SVG.script | SVG.Script.extra.class ;
SVG.color.attrib ::= (color::SVG.Color.datatype)? ;
SVG.Number.datatype ::= integer() ;
SVG.Integer.datatype ::= integer() ;
SVG.switch ::= switch::(SVG.Description.class* (SVG.svg | SVG.g | SVG.use | SVG.text | SVG.text | SVG.Animation.class | SVG.Conditional.class | SVG.Image.class | SVG.Shape.class | SVG.Hyperlink.class | SVG.Extensibility.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.External.attrib (transform::SVG.TransformList.datatype)?) ;
SVG.Color.extra.attrib ::= ε ;
SVG.fill-rule.attrib ::= (fill-rule::SVG.ClipFillRule.datatype)? ;
SVG.space.attrib ::= (xml:space::("default" | "preserve"))? ;
SVG.Color.datatype ::= string() ;
SVG.ClipFillRule.datatype ::= string() ;
SVG.Cursor.attrib ::= ε ;
SVG.Opacity.attrib ::= ε ;
SVG.stroke.attrib ::= (stroke::SVG.Paint.datatype)? ;
SVG.TextContent.extra.attrib ::= ε ;
SVG.Style.extra.class ::= ε ;
XLinkEmbed.attrib ::= ε ;
SVG.view ::= view::(SVG.Description.class* SVG.Core.attrib SVG.External.attrib (viewBox::SVG.ViewBoxSpec.datatype)? (preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype)? (zoomAndPan::("disable" | "magnify"))? (viewTarget::string())?) ;
SVG.Core.extra.attrib ::= ε ;
SVG.Filter.class ::= ε ;
SVG.foreignObject ::= foreignObject::(SVG.foreignObject.content SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? width::SVG.Length.datatype height::SVG.Length.datatype (transform::SVG.TransformList.datatype)?) ;
SVG.font-face-src ::= font-face-src::(SVG.font-face-name+ SVG.Core.attrib) ;
SVG.Use.class ::= SVG.use | SVG.Use.extra.class ;
SVG.Shape.extra.class ::= ε ;
SVG.LanguageCode.datatype ::= string() ;
SVG.Paint.extra.attrib ::= ε ;
SVG.glyph ::= glyph::(SVG.Description.class* SVG.Core.attrib SVG.Style.attrib (unicode::string())? (glyph-name::string())? (d::SVG.PathData.datatype)? (arabic-form::string())? (lang::SVG.LanguageCodes.datatype)? (horiz-adv-x::SVG.Number.datatype)?) ;
SVG.Coordinates.datatype ::= string() ;
SVG.Mask.class ::= ε ;
SVG.AnimationAddition.extra.attrib ::= ε ;
--------------------markup::svg-furubayashi.bgf--------------------
SVG.clipPath ::= clipPath::(SVG.Description.class* (SVG.Animation.class | SVG.Use.class | SVG.Shape.class | SVG.Text.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Text.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.Cursor.attrib SVG.External.attrib (transform::SVG.TransformList.datatype)? (clipPathUnits::("userSpaceOnUse" | "objectBoundingBox"))?) ;
SVG.visibility.attrib ::= (visibility::("visible" | "hidden" | "inherit"))? ;
SVG.desc ::= desc::(string() SVG.Core.attrib SVG.Style.attrib) ;
SVG.onbegin.attrib ::= (onbegin::SVG.Script.datatype)? ;
SVG.stroke-miterlimit.attrib ::= (stroke-miterlimit::SVG.StrokeMiterLimitValue.datatype)? ;
SVG.GraphicalEvents.attrib ::= ε ;
 SVG.GraphicalEvents.attrib ::= SVG.onfocusin.attrib SVG.onfocusout.attrib SVG.onactivate.attrib SVG.onclick.attrib SVG.onmousedown.attrib SVG.onmouseup.attrib SVG.onmouseover.attrib SVG.onmousemove.attrib SVG.onmouseout.attrib SVG.onload.attrib SVG.GraphicalEvents.extra.attrib ;
SVG.animateTransform ::= animateTransform::(SVG.Description.class* SVG.Core.attrib SVG.Conditional.attrib SVG.AnimationEvents.attrib SVG.External.attrib SVG.Animation.attrib SVG.AnimationAttribute.attrib SVG.AnimationTiming.attrib SVG.AnimationValue.attrib SVG.AnimationAddtion.attrib (type::("translate" | "scale" | "rotate" | "skewX" | "skewY"))?) ;
SVG.Pattern.extra.class ::= ε ;
SVG.font-face ::= font-face::(SVG.Description.class* SVG.font-face-src? SVG.definition-src? SVG.Core.attrib (font-family::string())? (font-style::string())? (font-variant::string())? (font-weight::string())? (font-stretch::string())? (font-size::string())? (unicode-range::string())? (units-per-em::SVG.Number.datatype)? (panose-1::string())? (stemv::SVG.Number.datatype)? (stemh::SVG.Number.datatype)? (slope::SVG.Number.datatype)? (cap-height::SVG.Number.datatype)? (x-height::SVG.Number.datatype)? (accent-height::SVG.Number.datatype)? (ascent::SVG.Number.datatype)? (descent::SVG.Number.datatype)? (widths::string())? (bbox::string())? (ideographic::SVG.Number.datatype)? (alphabetic::SVG.Number.datatype)? (mathematical::SVG.Number.datatype)? (hanging::SVG.Number.datatype)? (v-ideographic::SVG.Number.datatype)? (v-alphabetic::SVG.Number.datatype)? (v-mathematical::SVG.Number.datatype)? (v-hanging::SVG.Number.datatype)? (underline-position::SVG.Number.datatype)? (underline-thickness::SVG.Number.datatype)? (strikethrough-position::SVG.Number.datatype)? (strikethrough-thickness::SVG.Number.datatype)? (overline-position::SVG.Number.datatype)? (overline-thickness::SVG.Number.datatype)?) ;
SVG.TextContent.extra.class ::= ε ;
SVG.mpath ::= mpath::(SVG.Description.class* SVG.Core.attrib SVG.XLinkRequired.attrib SVG.External.attrib) ;
SVG.XLinkEmbed.attrib ::= (xlink:type::"simple")? xlink:href::SVG.URI.datatype (xlink:role::SVG.URI.datatype)? (xlink:arcrole::SVG.URI.datatype)? (xlink:title::string())? (xlink:show::"embed")? (xlink:actuate::"onLoad")? SVG.XLinkEmbed.extra.attrib ;
SVG.StrokeDashArrayValue.datatype ::= string() ;
SVG.pattern ::= pattern::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.XLink.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? (width::SVG.Length.datatype)? (height::SVG.Length.datatype)? (patternUnits::("userSpaceOnUse" | "objectBoundingBox"))? (patternContentUnits::("userSpaceOnUse" | "objectBoundingBox"))? (patternTransform::SVG.TransformList.datatype)? (viewBox::SVG.ViewBoxSpec.datatype)? (preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype)?) ;
SVG.Gradient.extra.class ::= ε ;
SVG.onfocusin.attrib ::= (onfocusin::SVG.Script.datatype)? ;
SVG.Paint.attrib ::= ε ;
 SVG.Paint.attrib ::= SVG.fill.attrib SVG.fill-rule.attrib SVG.stroke.attrib SVG.stroke-dasharray.attrib SVG.stroke-dashoffset.attrib SVG.stroke-linecap.attrib SVG.stroke-linejoin.attrib SVG.stroke-miterlimit.attrib SVG.stroke-width.attrib SVG.Paint.extra.attrib ;
SVG.onscroll.attrib ::= (onscroll::SVG.Script.datatype)? ;
SVG.Text.attrib ::= ε ;
 SVG.Text.attrib ::= (writing-mode::("lr-tb" | "rl-tb" | "tb-rl" | "lr" | "rl" | "tb" | "inherit"))? SVG.Text.extra.attrib ;
SVG.feComposite ::= feComposite::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib in2::string() (operator::("over" | "in" | "out" | "atop" | "xor" | "arithmetic"))? (k1::SVG.Number.datatype)? (k2::SVG.Number.datatype)? (k3::SVG.Number.datatype)? (k4::SVG.Number.datatype)?) ;
SVG.Script.datatype ::= string() ;
SVG.base.attrib ::= (xml:base::SVG.URI.datatype)? ;
SVG.stroke-dasharray.attrib ::= (stroke-dasharray::SVG.StrokeDashArrayValue.datatype)? ;
SVG.feDisplacementMap ::= feDisplacementMap::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib in2::string() (scale::SVG.Number.datatype)? (xChannelSelector::("R" | "G" | "B" | "A"))? (yChannelSelector::("R" | "G" | "B" | "A"))?) ;
SVG.onzoom.attrib ::= (onzoom::SVG.Script.datatype)? ;
SVG.FontSizeValue.datatype ::= string() ;
SVG.missing-glyph ::= missing-glyph::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Style.attrib SVG.Presentation.attrib (d::SVG.PathData.datatype)? (horiz-adv-x::SVG.Number.datatype)? (vert-origin-x::SVG.Number.datatype)? (vert-origin-y::SVG.Number.datatype)? (vert-adv-y::SVG.Number.datatype)?) ;
SVG.PreserveAspectRatioSpec.datatype ::= string() ;
SVG.MaskValue.datatype ::= string() ;
SVG.Structure.extra.class ::= ε ;
SVG.id.attrib ::= (id::SVG.ID.datatype)? ;
SVG.animateMotion ::= animateMotion::(SVG.Description.class* SVG.mpath? SVG.Core.attrib SVG.Conditional.attrib SVG.AnimationEvents.attrib SVG.External.attrib SVG.Animation.attrib SVG.AnimationTiming.attrib SVG.AnimationAddtion.attrib (calcMode::("discrete" | "linear" | "paced" | "spline"))? (values::string())? (keyTimes::string())? (Splines::string())? (from::string())? (to::string())? (by::string())? (path::string())? (keyPoints::string())? (rotate::string())? (origin::string())?) ;
SVG.XLinkReplace.extra.attrib ::= ε ;
SVG.FontSizeAdjustValue.datatype ::= string() ;
SVG.onend.attrib ::= (onend::SVG.Script.datatype)? ;
SVG.XLinkEmbed.extra.attrib ::= ε ;
SVG.Graphics.attrib ::= ε ;
 SVG.Graphics.attrib ::= SVG.display.attrib SVG.image-rendering.attrib SVG.pointer-events.attrib SVG.shape-rendering.attrib SVG.text-rendering.attrib SVG.visibility.attrib SVG.Graphics.extra.attrib ;
SVG.ClipPathValue.datatype ::= string() ;
SVG.FontFamilyValue.datatype ::= string() ;
SVG.Description.class ::= SVG.desc | SVG.title | SVG.metadata | SVG.Description.extra.class ;
SVG.svg ::= svg::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.DocumentEvents.attrib SVG.GraphicalEvents.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? (width::SVG.Length.datatype)? (height::SVG.Length.datatype)? (viewBox::SVG.ViewBoxSpec.datatype)? (preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype)? (zoomAndPan::("disable" | "magnify"))? version::SVG.Number.datatype (baseProfile::SVG.Text.datatype)? (contentScriptType::SVG.ContentType.datatype)? (contentStyleType::SVG.ContentType.datatype)?) ;
SVG.circle ::= circle::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib (cx::SVG.Coordinate.datatype)? (cy::SVG.Coordinate.datatype)? r::SVG.Length.datatype (transform::SVG.TransformList.datatype)?) ;
SVG.font ::= font::(SVG.Description.class* SVG.font-face SVG.missing-glyph (SVG.glyph | SVG.hkern | SVG.vkern)* SVG.Core.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.External.attrib (horiz-origin-x::SVG.Number.datatype)? (horiz-origin-y::SVG.Number.datatype)? horiz-adv-x::SVG.Number.datatype (vert-origin-x::SVG.Number.datatype)? (vert-origin-y::SVG.Number.datatype)? (vert-adv-y::SVG.Number.datatype)?) ;
SVG.Profile.attrib ::= ε ;
 SVG.Profile.attrib ::= (color-profile::string())? SVG.Profile.extra.attrib ;
SVG.onerror.attrib ::= (onerror::SVG.Script.datatype)? ;
SVG.set ::= set::(SVG.Description.class* SVG.Core.attrib SVG.Conditional.attrib SVG.AnimationEvents.attrib SVG.External.attrib SVG.Animation.attrib SVG.AnimationAttribute.attrib SVG.AnimationTiming.attrib (to::string())?) ;
SVG.Filter.attrib ::= ε ;
 SVG.Filter.attrib ::= (filter::SVG.FilterValue.datatype)? SVG.Filter.extra.attrib ;
SVG.script ::= script::(string() SVG.Core.attrib SVG.XLink.attrib SVG.External.attrib type::SVG.ContentType.datatype) ;
SVG.feMergeNode ::= feMergeNode::((SVG.animate | SVG.set)* SVG.Core.attrib (in::string())?) ;
SVG.URI.datatype ::= string() ;
SVG.XLinkReplace.attrib ::= (xlink:type::"simple")? xlink:href::SVG.URI.datatype (xlink:role::SVG.URI.datatype)? (xlink:arcrole::SVG.URI.datatype)? (xlink:title::string())? (xlink:show::("new" | "replace"))? (xlink:actuate::"onRequest")? SVG.XLinkReplace.extra.attrib ;
SVG.ContentType.datatype ::= string() ;
SVG.KerningValue.datatype ::= string() ;
SVG.AnimationValue.extra.attrib ::= ε ;
SVG.Animation.extra.attrib ::= ε ;
SVG.onmousedown.attrib ::= (onmousedown::SVG.Script.datatype)? ;
SVG.DocumentEvents.attrib ::= SVG.onunload.attrib SVG.onabort.attrib SVG.onerror.attrib SVG.onresize.attrib SVG.onscroll.attrib SVG.onzoom.attrib SVG.DocumentEvents.extra.attrib ;
SVG.metadata ::= metadata::(string() SVG.Core.attrib) ;
SVG.NumberOptionalNumber.datatype ::= string() ;
SVG.tspan ::= tspan::((string() | SVG.tspan | SVG.tref | SVG.altGlyph | SVG.animate | SVG.set | SVG.animateColor | SVG.Description.class | SVG.Hyperlink.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib (x::SVG.Coordinates.datatype)? (y::SVG.Coordinates.datatype)? (dx::SVG.Lengths.datatype)? (dy::SVG.Lengths.datatype)? (rotate::SVG.Numbers.datatype)? (textLength::SVG.Length.datatype)? (lengthAdjust::("spacing" | "spacingAndGlyphs"))?) ;
SVG.BaselineShiftValue.datatype ::= string() ;
SVG.Numbers.datatype ::= string() ;
SVG.onabort.attrib ::= (onabort::SVG.Script.datatype)? ;
SVG.polygon ::= polygon::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Marker.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib points::SVG.Points.datatype (transform::SVG.TransformList.datatype)?) ;
SVG.font-face-uri ::= font-face-uri::(SVG.font-face-format* SVG.Core.attrib SVG.XLinkRequired.attrib) ;
SVG.Style.extra.attrib ::= ε ;
SVG.path ::= path::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Marker.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib d::SVG.PathData.datatype (pathLength::SVG.Number.datatype)? (transform::SVG.TransformList.datatype)?) ;
SVG.Cursor.extra.class ::= ε ;
SVG.onmousemove.attrib ::= (onmousemove::SVG.Script.datatype)? ;
SVG.image-rendering.attrib ::= (image-rendering::("auto" | "optimizeSpeed" | "optimizeQuality" | "inherit"))? ;
SVG.style ::= style::(string() SVG.Core.attrib type::SVG.ContentType.datatype (media::SVG.MediaDesc.datatype)? (title::SVG.Text.datatype)?) ;
SVG.pointer-events.attrib ::= (pointer-events::("visiblePainted" | "visibleFill" | "visibleStroke" | "visible" | "painted" | "fill" | "stroke" | "all" | "none" | "inherit"))? ;
SVG.Font.extra.class ::= ε ;
SVG.Text.class ::= SVG.text | SVG.altGlyphDef | SVG.Text.extra.class ;
SVG.Script.extra.class ::= ε ;
SVG.Gradient.attrib ::= ε ;
 SVG.Gradient.attrib ::= (stop-color::SVG.SVGColor.datatype)? (stop-opacity::SVG.OpacityValue.datatype)? SVG.Gradient.extra.attrib ;
SVG.LinkTarget.datatype ::= string() ;
SVG.Boolean.datatype ::= string() ;
SVG.Structure.class ::= SVG.svg | SVG.g | SVG.defs | SVG.symbol | SVG.Use.class | SVG.Structure.extra.class ;
SVG.Presentation.extra.attrib ::= ε ;
SVG.onunload.attrib ::= (onunload::SVG.Script.datatype)? ;
SVG.altGlyph ::= altGlyph::(string() SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.XLink.attrib SVG.External.attrib (x::SVG.Coordinates.datatype)? (y::SVG.Coordinates.datatype)? (dx::SVG.Lengths.datatype)? (dy::SVG.Lengths.datatype)? (glyphRef::string())? (format::string())? (rotate::SVG.Numbers.datatype)?) ;
SVG.stop ::= stop::((SVG.animate | SVG.set | SVG.animateColor)* SVG.Core.attrib SVG.Style.attrib SVG.Color.attrib SVG.Gradient.attrib offset::SVG.NumberOrPercentage.datatype) ;
SVG.feConvolveMatrix ::= feConvolveMatrix::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib order::SVG.NumberOptionalNumber.datatype kernelMatrix::string() (divisor::SVG.Number.datatype)? (bias::SVG.Number.datatype)? (targetX::SVG.Integer.datatype)? (targetY::SVG.Integer.datatype)? (edgeMode::("duplicate" | "wrap" | "none"))? (kernelUnitLength::SVG.NumberOptionalNumber.datatype)? (preserveAlpha::SVG.Boolean.datatype)?) ;
SVG.onload.attrib ::= (onload::SVG.Script.datatype)? ;
SVG.FeatureList.datatype ::= string() ;
SVG.stroke-linecap.attrib ::= (stroke-linecap::("butt" | "round" | "square" | "inherit"))? ;
SVG.Clip.class ::= SVG.clipPath | SVG.Clip.extra.class ;
SVG.Text.extra.class ::= ε ;
SVG.External.extra.attrib ::= ε ;
SVG.Container.attrib ::= ε ;
SVG.line ::= line::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Marker.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib (x1::SVG.Coordinate.datatype)? (y1::SVG.Coordinate.datatype)? (x2::SVG.Coordinate.datatype)? (y2::SVG.Coordinate.datatype)? (transform::SVG.TransformList.datatype)?) ;
SVG.Description.extra.class ::= ε ;
SVG.textPath ::= textPath::((string() | SVG.tspan | SVG.tref | SVG.altGlyph | SVG.animate | SVG.set | SVG.animateColor | SVG.Description.class | SVG.Hyperlink.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.XLinkRequired.attrib SVG.External.attrib (startOffset::SVG.Length.datatype)? (textLength::SVG.Length.datatype)? (lengthAdjust::("spacing" | "spacingAndGlyphs"))? (method::("align" | "stretch"))? (spacing::("auto" | "exact"))?) ;
SVG.Conditional.extra.attrib ::= ε ;
SVG.onfocusout.attrib ::= (onfocusout::SVG.Script.datatype)? ;
SVG.radialGradient ::= radialGradient::(SVG.Description.class* (SVG.stop | SVG.animate | SVG.set | SVG.animateTransform)* SVG.Core.attrib SVG.Style.attrib SVG.Color.attrib SVG.Gradient.attrib SVG.XLink.attrib SVG.External.attrib (cx::SVG.Coordinate.datatype)? (cy::SVG.Coordinate.datatype)? (r::SVG.Length.datatype)? (fx::SVG.Coordinate.datatype)? (fy::SVG.Coordinate.datatype)? (gradientUnits::("userSpaceOnUse" | "objectBoundingBox"))? (gradientTransform::SVG.TransformList.datatype)? (spreadMethod::("pad" | "reflect" | "repeat"))?) ;
SVG.altGlyphDef ::= altGlyphDef::((SVG.glyphRef+) | (SVG.altGlyphItem+) SVG.Core.attrib) ;
SVG.FilterColor.attrib ::= ε ;
 SVG.FilterColor.attrib ::= (color-interpolation-filters::("auto" | "sRGB" | "linearRGB" | "inherit"))? SVG.FilterColor.extra.attrib ;
SVG.Presentation.attrib ::= SVG.Container.attrib SVG.Viewport.attrib SVG.Text.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Marker.attrib SVG.Profile.attrib SVG.Gradient.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.FilterColor.attrib SVG.Cursor.attrib (flood-color::SVG.SVGColor.datatype)? (flood-opacity::SVG.OpacityValue.datatype)? (lighting-color::SVG.SVGColor.datatype)? SVG.Presentation.extra.attrib ;
SVG.onrepeat.attrib ::= (onrepeat::SVG.Script.datatype)? ;
SVG.hkern ::= hkern::(ε SVG.Core.attrib (u1::string())? (g1::string())? (u2::string())? (g2::string())? k::SVG.Number.datatype) ;
SVG.definition-src ::= definition-src::(ε SVG.Core.attrib SVG.XLinkRequired.attrib) ;
SVG.AnimationAttribute.extra.attrib ::= ε ;
SVG.font-face-format ::= font-face-format::(ε SVG.Core.attrib (string::string())?) ;
SVG.Pattern.class ::= SVG.pattern | SVG.Pattern.extra.class ;
SVG.rect ::= rect::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? width::SVG.Length.datatype height::SVG.Length.datatype (rx::SVG.Length.datatype)? (ry::SVG.Length.datatype)? (transform::SVG.TransformList.datatype)?) ;
SVG.StrokeDashOffsetValue.datatype ::= string() ;
SVG.Viewport.attrib ::= ε ;
 SVG.Viewport.attrib ::= SVG.clip.attrib SVG.overflow.attrib SVG.Viewport.extra.attrib ;
SVG.NumberOrPercentage.datatype ::= string() ;
SVG.Mask.attrib ::= ε ;
 SVG.Mask.attrib ::= (mask::SVG.MaskValue.datatype)? SVG.Mask.extra.attrib ;
SVG.AnimationValue.attrib ::= (calcMode::("discrete" | "linear" | "paced" | "spline"))? (values::string())? (keyTimes::string())? (keySplines::string())? (from::string())? (to::string())? (by::string())? SVG.AnimationValue.extra.attrib ;
SVG.Color.attrib ::= ε ;
 SVG.Color.attrib ::= SVG.color.attrib SVG.color-interpolation.attrib SVG.color-rendering.attrib SVG.Color.extra.attrib ;
SVG.g ::= g::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.External.attrib (transform::SVG.TransformList.datatype)?) ;
SVG.onactivate.attrib ::= (onactivate::SVG.Script.datatype)? ;
SVG.Conditional.attrib ::= (requiredFeatures::SVG.FeatureList.datatype)? (requiredExtensions::SVG.ExtensionList.datatype)? (systemLanguage::SVG.LanguageCodes.datatype)? SVG.Conditional.extra.attrib ;
 SVG.Conditional.attrib ::= ε ;
SVG.ClipValue.datatype ::= string() ;
SVG.Text.datatype ::= string() ;
SVG.DocumentEvents.extra.attrib ::= ε ;
SVG.a ::= a::((string() | SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.XLinkReplace.attrib SVG.External.attrib (transform::SVG.TransformList.datatype)? (target::SVG.LinkTarget.datatype)?) ;
SVG.animate ::= animate::(SVG.Description.class* SVG.Core.attrib SVG.Conditional.attrib SVG.AnimationEvents.attrib SVG.External.attrib SVG.Animation.attrib SVG.AnimationAttribute.attrib SVG.AnimationTiming.attrib SVG.AnimationValue.attrib SVG.AnimationAddtion.attrib) ;
SVG.FilterColor.extra.attrib ::= ε ;
SVG.FilterPrimitive.extra.attrib ::= ε ;
SVG.image ::= image::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Viewport.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Profile.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.XLinkEmbed.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? width::SVG.Length.datatype height::SVG.Length.datatype (preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype)? (transform::SVG.TransformList.datatype)?) ;
SVG.Style.attrib ::= ε ;
 SVG.Style.attrib ::= (style::SVG.StyleSheet.datatype)? (class::SVG.ClassList.datatype)? SVG.Style.extra.attrib ;
SVG.XLink.attrib ::= ε ;
 SVG.XLink.attrib ::= (xlink:type::"simple")? (xlink:href::SVG.URI.datatype)? (xlink:role::SVG.URI.datatype)? (xlink:arcrole::SVG.URI.datatype)? (xlink:title::string())? (xlink:show::"other")? (xlink:actuate::"onLoad")? SVG.XLink.extra.attrib ;
SVG.Core.attrib ::= SVG.id.attrib SVG.base.attrib SVG.lang.attrib SVG.space.attrib SVG.Core.extra.attrib ;
 SVG.Core.attrib ::= ε ;
SVG.LanguageCodes.datatype ::= string() ;
SVG.onmouseover.attrib ::= (onmouseover::SVG.Script.datatype)? ;
SVG.feBlend ::= feBlend::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib in2::string() (mode::("normal" | "multiply" | "screen" | "darken" | "lighten"))?) ;
SVG.MediaDesc.datatype ::= string() ;
XLinkRequired.attrib ::= ε ;
SVG.AnimationEvents.attrib ::= SVG.onbegin.attrib SVG.onend.attrib SVG.onrepeat.attrib SVG.AnimationEvents.extra.attrib ;
 SVG.AnimationEvents.attrib ::= ε ;
SVG.marker ::= marker::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.External.attrib (refX::SVG.Coordinate.datatype)? (refY::SVG.Coordinate.datatype)? (markerUnits::("strokeWidth" | "userSpaceOnUse"))? (markerWidth::SVG.Length.datatype)? (markerHeight::SVG.Length.datatype)? (orient::string())? (viewBox::SVG.ViewBoxSpec.datatype)? (preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype)?) ;
SVG.Font.class ::= SVG.font | SVG.font-face | SVG.Font.extra.class ;
SVG.color.attrib ::= (color::SVG.Color.datatype)? ;
SVG.Number.datatype ::= integer() ;
SVG.Integer.datatype ::= integer() ;
SVG.Color.extra.attrib ::= ε ;
SVG.feTurbulence ::= feTurbulence::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitive.attrib (baseFrequency::SVG.NumberOptionalNumber.datatype)? (numOctaves::SVG.Integer.datatype)? (seed::SVG.Number.datatype)? (stitchTiles::("stitch" | "noStitch"))? (type::("fractalNoise" | "turbulence"))?) ;
SVG.fill-rule.attrib ::= (fill-rule::SVG.ClipFillRule.datatype)? ;
SVG.Color.datatype ::= string() ;
SVG.Opacity.attrib ::= ε ;
 SVG.Opacity.attrib ::= SVG.opacity.attrib SVG.fill-opacity.attrib SVG.stroke-opacity.attrib SVG.Opacity.extra.attrib ;
SVG.stroke.attrib ::= (stroke::SVG.Paint.datatype)? ;
SVG.color-profile ::= color-profile::(SVG.Description.class* SVG.Core.attrib SVG.XLink.attrib (local::string())? name::string() (rendering-intent::("auto" | "perceptual" | "relative-colorimetric" | "saturation" | "absolute-colorimetric"))?) ;
SVG.TextContent.extra.attrib ::= ε ;
XLinkEmbed.attrib ::= ε ;
SVG.feMerge ::= feMerge::(SVG.feMergeNode* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitive.attrib) ;
SVG.Core.extra.attrib ::= ε ;
SVG.Filter.class ::= SVG.filter | SVG.Filter.extra.class ;
SVG.tref ::= tref::((SVG.animate | SVG.set | SVG.animateColor | SVG.Description.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.XLinkRequired.attrib SVG.External.attrib (x::SVG.Coordinates.datatype)? (y::SVG.Coordinates.datatype)? (dx::SVG.Lengths.datatype)? (dy::SVG.Lengths.datatype)? (rotate::SVG.Numbers.datatype)? (textLength::SVG.Length.datatype)? (lengthAdjust::("spacing" | "spacingAndGlyphs"))?) ;
SVG.foreignObject ::= foreignObject::(SVG.foreignObject.content SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? width::SVG.Length.datatype height::SVG.Length.datatype (transform::SVG.TransformList.datatype)?) ;
SVG.FilterPrimitiveWithIn.attrib ::= SVG.FilterPrimitive.attrib (in::string())? SVG.FilterPrimitiveWithIn.extra.attrib ;
SVG.Use.class ::= SVG.use | SVG.Use.extra.class ;
SVG.Clip.extra.class ::= ε ;
SVG.glyph ::= glyph::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Style.attrib SVG.Presentation.attrib (unicode::string())? (glyph-name::string())? (d::SVG.PathData.datatype)? (orientation::string())? (arabic-form::string())? (lang::SVG.LanguageCodes.datatype)? (horiz-adv-x::SVG.Number.datatype)? (vert-origin-x::SVG.Number.datatype)? (vert-origin-y::SVG.Number.datatype)? (vert-adv-y::SVG.Number.datatype)?) ;
SVG.Animation.attrib ::= SVG.XLink.attrib SVG.Animation.extra.attrib ;
SVG.Clip.extra.attrib ::= ε ;
SVG.ViewBoxSpec.datatype ::= string() ;
SVG.View.class ::= SVG.view | SVG.View.extra.class ;
SVG.opacity.attrib ::= (opacity::SVG.OpacityValue.datatype)? ;
SVG.feTile ::= feTile::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib) ;
SVG.Opacity.extra.attrib ::= ε ;
SVG.AnimationTiming.extra.attrib ::= ε ;
SVG.XLinkRequired.extra.attrib ::= ε ;
SVG.stroke-linejoin.attrib ::= (stroke-linejoin::("miter" | "round" | "bevel" | "inherit"))? ;
SVG.fePointLight ::= fePointLight::((SVG.animate | SVG.set)* SVG.Core.attrib (x::SVG.Number.datatype)? (y::SVG.Number.datatype)? (z::SVG.Number.datatype)?) ;
SVG.Lengths.datatype ::= string() ;
SVG.fill-opacity.attrib ::= (fill-opacity::SVG.OpacityValue.datatype)? ;
SVG.fill.attrib ::= (fill::SVG.Paint.datatype)? ;
SVG.Conditional.extra.class ::= ε ;
SVG.font-face-name ::= font-face-name::(ε SVG.Core.attrib (name::string())?) ;
SVG.onmouseout.attrib ::= (onmouseout::SVG.Script.datatype)? ;
SVG.feFuncR ::= feFuncR::((SVG.animate | SVG.set)* SVG.Core.attrib type::("identity" | "table" | "discrete" | "linear" | "gamma") (tableValues::string())? (slope::SVG.Number.datatype)? (intercept::SVG.Number.datatype)? (amplitude::SVG.Number.datatype)? (exponent::SVG.Number.datatype)? (offset::SVG.Number.datatype)?) ;
SVG.FilterValue.datatype ::= string() ;
SVG.text-rendering.attrib ::= (text-rendering::("auto" | "optimizeSpeed" | "optimizeLegibility" | "geometricPrecision" | "inherit"))? ;
SVG.Mask.extra.attrib ::= ε ;
SVG.use ::= use::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.XLinkEmbed.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? (width::SVG.Length.datatype)? (height::SVG.Length.datatype)? (transform::SVG.TransformList.datatype)?) ;
SVG.View.extra.class ::= ε ;
SVG.StyleSheet.datatype ::= string() ;
SVG.feFuncG ::= feFuncG::((SVG.animate | SVG.set)* SVG.Core.attrib type::("identity" | "table" | "discrete" | "linear" | "gamma") (tableValues::string())? (slope::SVG.Number.datatype)? (intercept::SVG.Number.datatype)? (amplitude::SVG.Number.datatype)? (exponent::SVG.Number.datatype)? (offset::SVG.Number.datatype)?) ;
SVG.feFuncB ::= feFuncB::((SVG.animate | SVG.set)* SVG.Core.attrib type::("identity" | "table" | "discrete" | "linear" | "gamma") (tableValues::string())? (slope::SVG.Number.datatype)? (intercept::SVG.Number.datatype)? (amplitude::SVG.Number.datatype)? (exponent::SVG.Number.datatype)? (offset::SVG.Number.datatype)?) ;
SVG.feFlood ::= feFlood::((SVG.animate | SVG.set | SVG.animateColor)* SVG.Core.attrib SVG.Style.attrib SVG.Color.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib (flood-color::SVG.SVGColor.datatype)? (flood-opacity::SVG.OpacityValue.datatype)?) ;
SVG.feFuncA ::= feFuncA::((SVG.animate | SVG.set)* SVG.Core.attrib type::("identity" | "table" | "discrete" | "linear" | "gamma") (tableValues::string())? (slope::SVG.Number.datatype)? (intercept::SVG.Number.datatype)? (amplitude::SVG.Number.datatype)? (exponent::SVG.Number.datatype)? (offset::SVG.Number.datatype)?) ;
SVG.AnimationTiming.attrib ::= (begin::string())? (dur::string())? (end::string())? (min::string())? (max::string())? (restart::("always" | "never" | "whenNotActive"))? (repeatCount::string())? (repeatDur::string())? (fill::("remove" | "freeze"))? SVG.AnimationTiming.extra.attrib ;
SVG.Marker.extra.attrib ::= ε ;
SVG.Coordinate.datatype ::= string() ;
SVG.FilterPrimitive.class ::= SVG.feBlend | SVG.feColorMatrix | SVG.feComponentTransfer | SVG.feComposite | SVG.feConvolveMatrix | SVG.feDiffuseLighting | SVG.feDisplacementMap | SVG.feFlood | SVG.feGaussianBlur | SVG.feImage | SVG.feMerge | SVG.feMorphology | SVG.feOffset | SVG.feSpecularLighting | SVG.feTile | SVG.feTurbulence | SVG.FilterPrimitive.extra.class ;
SVG.Conditional.class ::= SVG.switch | SVG.Conditional.extra.class ;
SVG.Points.datatype ::= string() ;
SVG.Animation.class ::= SVG.animate | SVG.set | SVG.animateMotion | SVG.animateColor | SVG.animateTransform | SVG.Animation.extra.class ;
SVG.stroke-width.attrib ::= (stroke-width::SVG.StrokeWidthValue.datatype)? ;
SVG.Image.extra.class ::= ε ;
SVG.AnimationAttribute.attrib ::= attributeName::string() (attributeType::string())? SVG.AnimationAttribute.extra.attrib ;
SVG.Marker.attrib ::= ε ;
 SVG.Marker.attrib ::= (marker-start::SVG.MarkerValue.datatype)? (marker-mid::SVG.MarkerValue.datatype)? (marker-end::SVG.MarkerValue.datatype)? SVG.Marker.extra.attrib ;
SVG.GlyphOrientationHorizontalValue.datatype ::= string() ;
SVG.Filter.extra.class ::= ε ;
SVG.ID.datatype ::= string() ;
SVG.Profile.class ::= SVG.color-profile | SVG.Profile.extra.class ;
SVG.ClassList.datatype ::= string() ;
SVG.feDiffuseLighting ::= feDiffuseLighting::(SVG.feDistantLight | SVG.fePointLight | SVG.feSpotLight (SVG.animate | SVG.set | SVG.animateColor)* SVG.Core.attrib SVG.Style.attrib SVG.Color.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib (lighting-color::SVG.SVGColor.datatype)? (surfaceScale::SVG.Number.datatype)? (diffuseConstant::SVG.Number.datatype)? (kernelUnitLength::SVG.NumberOptionalNumber.datatype)?) ;
SVG.Mask.extra.class ::= ε ;
SVG.Graphics.extra.attrib ::= ε ;
SVG.feOffset ::= feOffset::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib (dx::SVG.Number.datatype)? (dy::SVG.Number.datatype)?) ;
SVG.feColorMatrix ::= feColorMatrix::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib (type::("matrix" | "saturate" | "hueRotate" | "luminanceToAlpha"))? (values::string())?) ;
SVG.SpacingValue.datatype ::= string() ;
SVG.text ::= text::((string() | SVG.Description.class | SVG.Animation.class | SVG.TextContent.class | SVG.Hyperlink.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Text.attrib SVG.TextContent.attrib SVG.Font.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib (x::SVG.Coordinates.datatype)? (y::SVG.Coordinates.datatype)? (dx::SVG.Lengths.datatype)? (dy::SVG.Lengths.datatype)? (rotate::SVG.Numbers.datatype)? (textLength::SVG.Length.datatype)? (lengthAdjust::("spacing" | "spacingAndGlyphs"))? (transform::SVG.TransformList.datatype)?) ;
SVG.GraphicalEvents.extra.attrib ::= ε ;
SVG.foreignObject.content ::= SVG.foreignObject.class* ;
SVG.XLinkRequired.attrib ::= (xlink:type::"simple")? xlink:href::SVG.URI.datatype (xlink:role::SVG.URI.datatype)? (xlink:arcrole::SVG.URI.datatype)? (xlink:title::string())? (xlink:show::"other")? (xlink:actuate::"onLoad")? SVG.XLinkRequired.extra.attrib ;
SVG.overflow.attrib ::= (overflow::("visible" | "hidden" | "scroll" | "auto" | "inherit"))? ;
SVG.Profile.extra.class ::= ε ;
SVG.feSpotLight ::= feSpotLight::((SVG.animate | SVG.set)* SVG.Core.attrib (x::SVG.Number.datatype)? (y::SVG.Number.datatype)? (z::SVG.Number.datatype)? (pointsAtX::SVG.Number.datatype)? (pointsAtY::SVG.Number.datatype)? (pointsAtZ::SVG.Number.datatype)? (specularExponent::SVG.Number.datatype)? (limitingConeAngle::SVG.Number.datatype)?) ;
SVG.StrokeWidthValue.datatype ::= string() ;
SVG.External.attrib ::= ε ;
 SVG.External.attrib ::= SVG.externalResourcesRequired.attrib SVG.External.extra.attrib ;
SVG.AnimationEvents.extra.attrib ::= ε ;
SVG.symbol ::= symbol::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.External.attrib (viewBox::SVG.ViewBoxSpec.datatype)? (preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype)?) ;
SVG.onmouseup.attrib ::= (onmouseup::SVG.Script.datatype)? ;
SVG.color-rendering.attrib ::= (color-rendering::("auto" | "optimizeSpeed" | "optimizeQuality" | "inherit"))? ;
SVG.Font.attrib ::= ε ;
 SVG.Font.attrib ::= (font-family::SVG.FontFamilyValue.datatype)? (font-size::SVG.FontSizeValue.datatype)? (font-size-adjust::SVG.FontSizeAdjustValue.datatype)? (font-stretch::("normal" | "wider" | "narrower" | "ultra-condensed" | "extra-condensed" | "condensed" | "semi-condensed" | "semi-expanded" | "expanded" | "extra-expanded" | "ultra-expanded" | "inherit"))? (font-style::("normal" | "italic" | "oblique" | "inherit"))? (font-variant::("normal" | "small-caps" | "inherit"))? (font-weight::("normal" | "bold" | "bolder" | "lighter" | "100" | "200" | "300" | "400" | "500" | "600" | "700" | "800" | "900" | "inherit"))? SVG.Font.extra.attrib ;
SVG.clip.attrib ::= (clip::SVG.ClipValue.datatype)? ;
SVG.Paint.datatype ::= string() ;
SVG.AnimationAddtion.attrib ::= (additive::("replace" | "sum"))? (accumulate::("none" | "sum"))? SVG.AnimationAddition.extra.attrib ;
SVG.StrokeMiterLimitValue.datatype ::= string() ;
SVG.defs ::= defs::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.External.attrib (transform::SVG.TransformList.datatype)?) ;
SVG.TextContent.attrib ::= ε ;
 SVG.TextContent.attrib ::= (alignment-baseline::("baseline" | "top" | "before-edge" | "text-top" | "text-before-edge" | "middle" | "bottom" | "after-edge" | "text-bottom" | "text-after-edge" | "ideographic" | "lower" | "hanging" | "mathematical" | "inherit"))? (baseline-shift::SVG.BaselineShiftValue.datatype)? (direction::("ltr" | "rtl" | "inherit"))? (dominant-baseline::("auto" | "autosense-script" | "no-change" | "reset" | "ideographic" | "lower" | "hanging" | "mathematical" | "inherit"))? (glyph-orientation-horizontal::SVG.GlyphOrientationHorizontalValue.datatype)? (glyph-orientation-vertical::SVG.GlyphOrientationVerticalValue.datatype)? (kerning::SVG.KerningValue.datatype)? (letter-spacing::SVG.SpacingValue.datatype)? (text-anchor::("start" | "middle" | "end" | "inherit"))? (text-decoration::SVG.TextDecorationValue.datatype)? (unicode-bidi::("normal" | "embed" | "bidi-override" | "inherit"))? (word-spacing::SVG.SpacingValue.datatype)? SVG.TextContent.extra.attrib ;
SVG.Marker.extra.class ::= ε ;
SVG.animateColor ::= animateColor::(SVG.Description.class* SVG.Core.attrib SVG.Conditional.attrib SVG.AnimationEvents.attrib SVG.External.attrib SVG.Animation.attrib SVG.AnimationAttribute.attrib SVG.AnimationTiming.attrib SVG.AnimationValue.attrib SVG.AnimationAddtion.attrib) ;
SVG.Cursor.class ::= SVG.cursor | SVG.Cursor.extra.class ;
SVG.Use.extra.class ::= ε ;
SVG.externalResourcesRequired.attrib ::= (externalResourcesRequired::SVG.Boolean.datatype)? ;
SVG.Extensibility.class ::= SVG.foreignObject | SVG.Extensibility.extra.class ;
SVG.TextDecorationValue.datatype ::= string() ;
SVG.color-interpolation.attrib ::= (color-interpolation::("auto" | "sRGB" | "linearRGB" | "inherit"))? ;
SVG.Viewport.extra.attrib ::= ε ;
SVG.Animation.extra.class ::= ε ;
SVG.vkern ::= vkern::(ε SVG.Core.attrib (u1::string())? (g1::string())? (u2::string())? (g2::string())? k::SVG.Number.datatype) ;
SVG.filter ::= filter::(SVG.Description.class* (SVG.animate | SVG.set | SVG.FilterPrimitive.class)* SVG.Core.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.XLink.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? (width::SVG.Length.datatype)? (height::SVG.Length.datatype)? (filterRes::SVG.NumberOptionalNumber.datatype)? (filterUnits::("userSpaceOnUse" | "objectBoundingBox"))? (primitiveUnits::("userSpaceOnUse" | "objectBoundingBox"))?) ;
SVG.OpacityValue.datatype ::= string() ;
SVG.display.attrib ::= (display::("inline" | "block" | "list-item" | "run-in" | "compact" | "marker" | "table" | "inline-table" | "table-row-group" | "table-header-group" | "table-footer-group" | "table-row" | "table-column-group" | "table-column" | "table-cell" | "table-caption" | "none" | "inherit"))? ;
SVG.linearGradient ::= linearGradient::(SVG.Description.class* (SVG.stop | SVG.animate | SVG.set | SVG.animateTransform)* SVG.Core.attrib SVG.Style.attrib SVG.Color.attrib SVG.Gradient.attrib SVG.XLink.attrib SVG.External.attrib (x1::SVG.Coordinate.datatype)? (y1::SVG.Coordinate.datatype)? (x2::SVG.Coordinate.datatype)? (y2::SVG.Coordinate.datatype)? (gradientUnits::("userSpaceOnUse" | "objectBoundingBox"))? (gradientTransform::SVG.TransformList.datatype)? (spreadMethod::("pad" | "reflect" | "repeat"))?) ;
SVG.feComponentTransfer ::= feComponentTransfer::(SVG.feFuncR? SVG.feFuncG? SVG.feFuncB? SVG.feFuncA? SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib) ;
SVG.feDistantLight ::= feDistantLight::((SVG.animate | SVG.set)* SVG.Core.attrib (azimuth::SVG.Number.datatype)? (elevation::SVG.Number.datatype)?) ;
SVG.Clip.attrib ::= (clip-path::SVG.ClipPathValue.datatype)? (clip-rule::SVG.ClipFillRule.datatype)? SVG.Clip.extra.attrib ;
 SVG.Clip.attrib ::= ε ;
SVG.Font.extra.attrib ::= ε ;
SVG.Image.class ::= SVG.image | SVG.Image.extra.class ;
SVG.mask ::= mask::((SVG.Description.class | SVG.Animation.class | SVG.Structure.class | SVG.Conditional.class | SVG.Image.class | SVG.Style.class | SVG.Shape.class | SVG.Text.class | SVG.Marker.class | SVG.Profile.class | SVG.Gradient.class | SVG.Pattern.class | SVG.Clip.class | SVG.Mask.class | SVG.Filter.class | SVG.Cursor.class | SVG.Hyperlink.class | SVG.View.class | SVG.Script.class | SVG.Font.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? (width::SVG.Length.datatype)? (height::SVG.Length.datatype)? (maskUnits::("userSpaceOnUse" | "objectBoundingBox"))? (maskContentUnits::("userSpaceOnUse" | "objectBoundingBox"))?) ;
SVG.Filter.extra.attrib ::= ε ;
SVG.foreignObject.class ::= string() ;
SVG.FilterPrimitive.attrib ::= (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)? (width::SVG.Length.datatype)? (height::SVG.Length.datatype)? (result::string())? SVG.FilterPrimitive.extra.attrib ;
SVG.XLink.extra.attrib ::= ε ;
SVG.Marker.class ::= SVG.marker | SVG.Marker.extra.class ;
SVG.TextContent.class ::= SVG.tspan | SVG.tref | SVG.textPath | SVG.altGlyph | SVG.TextContent.extra.class ;
SVG.feGaussianBlur ::= feGaussianBlur::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib (stdDeviation::SVG.NumberOptionalNumber.datatype)?) ;
SVG.Extensibility.extra.class ::= ε ;
SVG.SVGColor.datatype ::= string() ;
SVG.Hyperlink.extra.class ::= ε ;
SVG.stroke-dashoffset.attrib ::= (stroke-dashoffset::SVG.StrokeDashOffsetValue.datatype)? ;
SVG.Gradient.class ::= SVG.linearGradient | SVG.radialGradient | SVG.Gradient.extra.class ;
SVG.CursorValue.datatype ::= string() ;
SVG.cursor ::= cursor::(SVG.Description.class* SVG.Core.attrib SVG.Conditional.attrib SVG.XLinkRequired.attrib SVG.External.attrib (x::SVG.Coordinate.datatype)? (y::SVG.Coordinate.datatype)?) ;
SVG.Text.extra.attrib ::= ε ;
SVG.ExtensionList.datatype ::= string() ;
SVG.onclick.attrib ::= (onclick::SVG.Script.datatype)? ;
SVG.PathData.datatype ::= string() ;
SVG.feSpecularLighting ::= feSpecularLighting::(SVG.feDistantLight | SVG.fePointLight | SVG.feSpotLight (SVG.animate | SVG.set | SVG.animateColor)* SVG.Core.attrib SVG.Style.attrib SVG.Color.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib (lighting-color::SVG.SVGColor.datatype)? (surfaceScale::SVG.Number.datatype)? (specularConstant::SVG.Number.datatype)? (specularExponent::SVG.Number.datatype)? (kernelUnitLength::SVG.NumberOptionalNumber.datatype)?) ;
SVG.ellipse ::= ellipse::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib (cx::SVG.Coordinate.datatype)? (cy::SVG.Coordinate.datatype)? rx::SVG.Length.datatype ry::SVG.Length.datatype (transform::SVG.TransformList.datatype)?) ;
SVG.feImage ::= feImage::((SVG.animate | SVG.set | SVG.animateTransform)* SVG.Core.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.FilterPrimitive.attrib SVG.XLinkEmbed.attrib SVG.External.attrib (preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype)?) ;
SVG.TransformList.datatype ::= string() ;
SVG.glyphRef ::= glyphRef::(ε SVG.Core.attrib SVG.Style.attrib SVG.Font.attrib SVG.XLink.attrib (x::SVG.Coordinates.datatype)? (y::SVG.Coordinates.datatype)? (dx::SVG.Lengths.datatype)? (dy::SVG.Lengths.datatype)? (glyphRef::string())? (format::string())?) ;
SVG.Style.class ::= SVG.style | SVG.Style.extra.class ;
SVG.FilterPrimitive.extra.class ::= ε ;
SVG.title ::= title::(string() SVG.Core.attrib SVG.Style.attrib) ;
SVG.polyline ::= polyline::(SVG.Description.class* SVG.Animation.class* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Paint.attrib SVG.Color.attrib SVG.Opacity.attrib SVG.Graphics.attrib SVG.Marker.attrib SVG.Clip.attrib SVG.Mask.attrib SVG.Filter.attrib SVG.GraphicalEvents.attrib SVG.Cursor.attrib SVG.External.attrib points::SVG.Points.datatype (transform::SVG.TransformList.datatype)?) ;
SVG.Hyperlink.class ::= SVG.a | SVG.Hyperlink.extra.class ;
SVG.FilterPrimitiveWithIn.extra.attrib ::= ε ;
SVG.feMorphology ::= feMorphology::((SVG.animate | SVG.set)* SVG.Core.attrib SVG.FilterColor.attrib SVG.FilterPrimitiveWithIn.attrib (operator::("erode" | "dilate"))? (radius::SVG.NumberOptionalNumber.datatype)?) ;
SVG.MarkerValue.datatype ::= string() ;
SVG.Length.datatype ::= string() ;
SVG.Shape.class ::= SVG.path | SVG.rect | SVG.circle | SVG.line | SVG.ellipse | SVG.polyline | SVG.polygon | SVG.Shape.extra.class ;
SVG.altGlyphItem ::= altGlyphItem::(SVG.glyphRef+ SVG.Core.attrib) ;
SVG.lang.attrib ::= (xml:lang::SVG.LanguageCode.datatype)? ;
SVG.Script.class ::= SVG.script | SVG.Script.extra.class ;
SVG.switch ::= switch::(SVG.Description.class* (SVG.svg | SVG.g | SVG.use | SVG.text | SVG.text | SVG.Animation.class | SVG.Conditional.class | SVG.Image.class | SVG.Shape.class | SVG.Hyperlink.class | SVG.Extensibility.class)* SVG.Core.attrib SVG.Conditional.attrib SVG.Style.attrib SVG.Presentation.attrib SVG.GraphicalEvents.attrib SVG.External.attrib (transform::SVG.TransformList.datatype)?) ;
SVG.Gradient.extra.attrib ::= ε ;
SVG.space.attrib ::= (xml:space::("default" | "preserve"))? ;
SVG.onresize.attrib ::= (onresize::SVG.Script.datatype)? ;
SVG.ClipFillRule.datatype ::= string() ;
SVG.stroke-opacity.attrib ::= (stroke-opacity::SVG.OpacityValue.datatype)? ;
SVG.Cursor.attrib ::= ε ;
SVG.Profile.extra.attrib ::= ε ;
SVG.Style.extra.class ::= ε ;
SVG.view ::= view::(SVG.Description.class* SVG.Core.attrib SVG.External.attrib (viewBox::SVG.ViewBoxSpec.datatype)? (preserveAspectRatio::SVG.PreserveAspectRatioSpec.datatype)? (zoomAndPan::("disable" | "magnify"))? (viewTarget::string())?) ;
SVG.font-face-src ::= font-face-src::((SVG.font-face-uri | SVG.font-face-name)+ SVG.Core.attrib) ;
SVG.GlyphOrientationVerticalValue.datatype ::= string() ;
SVG.Shape.extra.class ::= ε ;
SVG.LanguageCode.datatype ::= string() ;
SVG.shape-rendering.attrib ::= (shape-rendering::("auto" | "optimizeSpeed" | "crispEdges" | "geometricPrecision" | "inherit"))? ;
SVG.Paint.extra.attrib ::= ε ;
SVG.Coordinates.datatype ::= string() ;
SVG.Mask.class ::= SVG.mask | SVG.Mask.extra.class ;
SVG.AnimationAddition.extra.attrib ::= ε ;
--------------------markup::svg-palies.bgf--------------------
TextElement ::= Text ;
 TextElement ::= Tspan ;
 TextElement ::= Tref ;
StructuralElement ::= Image ;
 StructuralElement ::= Svg ;
 StructuralElement ::= GroupingElement ;
 StructuralElement ::= Use ;
AbsoluteCoord ::= x::Double y::Double ;
RelativeCoord ::= x::Double y::Double ;
GraphicalElement ::= Shape ;
 GraphicalElement ::= TextElement ;
GroupingElement ::= G ;
 GroupingElement ::= Defs ;
 GroupingElement ::= Symbol ;
FontWeight ::= bold::Boolean ;
ReferencedFile ::= SvgFile ;
FontStyle ::= italic::Boolean ;
SvgFile ::= tag::Svg (elements::Element)+ ;
--------------------markup::uiml.bgf--------------------
ReferenceParameter ::= reference::Reference ;
WhereKind ::= (first::ε) | (last::ε) | (before::ε) | (after::ε) ;
IteratorParameter ::= iterator::Iterator ;
DProperty ::= id::String mapsType::MapsTypeKind mapsTo::String returnType::String (dMethods::DMethod)+ (dParams::DParam)+ ;
EqualToOperation ::= op::Operation ;
RuleTemplate ::= rule::Rule ;
PropertyParameter ::= property::Property ;
InterfaceTemplate ::= interface::Interface ;
ContentTemplate ::= content::Content ;
DComponentTemplate ::= dComponent::DComponent ;
EqualToConstant ::= constant::Constant ;
UIML ::= head::Header (templates::Template)+ (interfaces::Interface)+ (peers::Peer)+ ;
MetaData ::= name::String content::String ;
DClassTemplate ::= dClass::DClass ;
StructureTemplate ::= structure::Structure ;
PartTemplate ::= part::Part ;
StyleTemplate ::= style::Style ;
WhenFalse ::= (properties::Property)+ (calls::Call)+ restructure::Restructure op::Operation equal::Equal event::Event ;
DParam ::= id::String type::String value::String ;
EqualCondition ::= equal::Equal ;
HowKind ::= (append::ε) | (cascade::ε) | (replace::ε) | (union::ε) | (delete::ε) ;
EqualToProperty ::= property::Property ;
OperationParameter ::= op::Operation ;
RemoteSource ::= location::String ;
ExtensibleElement ::= Peer ;
 ExtensibleElement ::= Presentation ;
 ExtensibleElement ::= Logic ;
 ExtensibleElement ::= DComponent ;
 ExtensibleElement ::= DClass ;
 ExtensibleElement ::= DMethod ;
 ExtensibleElement ::= Script ;
 ExtensibleElement ::= Interface ;
 ExtensibleElement ::= Structure ;
 ExtensibleElement ::= Part ;
 ExtensibleElement ::= Style ;
 ExtensibleElement ::= Property ;
 ExtensibleElement ::= Content ;
 ExtensibleElement ::= Behavior ;
 ExtensibleElement ::= Constant ;
 ExtensibleElement ::= Rule ;
 ExtensibleElement ::= Restructure ;
ConstantTemplate ::= constant::Constant ;
PeerTemplate ::= peer::Peer ;
EqualToReference ::= reference::Reference ;
TextIterator ::= value::Integer ;
RestructureTemplate ::= restructure::Restructure ;
OpCondition ::= op::Operation ;
DComponent ::= id::String how::HowKind export::ExportKind mapsTo::String location::String source::Source (dMethods::DMethod)+ ;
LogicTemplate ::= logic::Logic ;
PresentationTemplate ::= presentation::Presentation ;
DClass ::= id::String how::HowKind export::ExportKind mapsTo::String mapsType::String source::Source (dMethods::DMethod)+ (dProperties::DProperty)+ (events::Event)+ (listeners::Listener)+ ;
ConstantIterator ::= constant::Constant ;
PropertyTemplate ::= property::Property ;
EventParameter ::= event::Event ;
BehaviorTemplate ::= behavior::Behavior ;
CallIterator ::= call::Call ;
UsedInTagKind ::= (event::ε) | (listener::ε) | (part::ε) ;
CallParameter ::= call::Call ;
ByDefault ::= (properties::Property)+ (calls::Call)+ restructure::Restructure op::Operation equal::Equal event::Event ;
Action_2 ::= whenTrue::WhenTrue whenFalse::WhenFalse byDefault::ByDefault ;
ExportKind ::= (hidden::ε) | (optional::ε) | (required::ε) ;
WhenTrue ::= (properties::Property)+ (calls::Call)+ restructure::Restructure op::Operation equal::Equal event::Event ;
Action_1 ::= event::Event (properties::Property)+ (calls::Call)+ (restructures::Restructure)+ ;
LocalSource ::= source::ExtensibleElement ;
ScriptTemplate ::= script::Script ;
ConstantParameter ::= constant::Constant ;
MapsTypeKind ::= (attribute::ε) | (getMethod::ε) | (setMethod::ε) | (method::ε) ;
DMethod ::= id::String how::HowKind export::ExportKind mapsTo::String returnType::String source::Source (dParams::DParam)+ script::Script ;
PropertyIterator ::= property::Property ;
EventCondition ::= event::Event ;
--------------------markup::wiki-mediawiki-bnf.bgf--------------------
image-valign-text-bottom ::= "text-bottom" ;
table-first-row ::= (table-column-line newline) | table-column-multiline | table-row ;
bullet-item ::= "*" (list-item | item-body)? ;
nowiki-body ::= characters ;
html-unsafe-symbol ::= unescaped-ampersand | unescaped-less-than | unescaped-greater-than ;
sub-page ::= sub-page-separator page-char+ ;
hex-digit ::= decimal-digit | "A" | "B" | "C" | "D" | "E" | "F" | "a" | "b" | "c" | "d" | "e" | "f" ;
title-character ::= <unicode-character bad-title-characters> ;
url-char ::= LEGAL_URL_ENTITY ;
interwiki-prefix ::= interwiki ":" ;
html-block ::= html-opening-tag whitespace? html-body whitespace? html-closing-tag? ;
harmless-character ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
space-tabs ::= space-tab+ ;
pre-block ::= pre-opening-tag whitespace? pre-body whitespace? pre-closing-tag? ;
list-item ::= indent-item | enumerated-item | bullet-item ;
image-align-right ::= "right" ;
EOL ::= newline | EOF ;
image-valign-middle ::= "middle" ;
inline-text ::= inline-element inline-text? ;
internal-link-start ::= "[[" ;
pmid-number ::= "PMID" spaces digits ;
image-valign-parameter ::= image-valign-baseline | image-valign-sub | image-valign-super | image-valign-top | image-valign-text-top | image-valign-middle | image-valign-bottom | image-valign-text-bottom ;
behaviourswitch-nogallery ::= "__NOGALLERY__" ;
page-char ::= canonical-page-char | space ;
ucase-letter ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ;
nowiki-opening-tag ::= "<nowiki" (whitespace characters?)? ">" ;
inline-element ::= category-link | link | magic-link | image-inline | gallery-block | media-inline | text-with-formatting ;
bad-title-characters ::= "[" | "]" | "{" | "}" | "<" | ">" | "_" | "|" | "#" ;
url-path ::= url-char url-path? ;
article-title ::= page sub-page* ;
 article-title ::= (title-legal-char | "%")* ;
extra-description ::= letter+ ;
image-name ::= page-name "." image-extension ;
external-link ::= (external-link-start url whitespace? link-description? external-link-end) | url ;
image-other-parameter ::= image-param-page | image-param-upright | image-param-border ;
image-align-none ::= "none" ;
unescaped-ampersand ::= "&" ;
nowiki-block ::= nowiki-opening-tag whitespace? nowiki-body whitespace? nowiki-closing-tag? ;
image-mode-parameter ::= image-mode-manual-thumb | image-mode-auto-thumb | image-mode-frame | image-mode-frameless ;
decimal-digit ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
defined-term ::= ";" text definition? ;
sort-key ::= any-text ;
image-valign-super ::= "super" | "sup" ;
behaviourswitch-toc ::= "__TOC__" ;
link-description ::= article-title ;
nowiki-closing-tag ::= "</nowiki" whitespace? ">" ;
non-whitespace-char ::= letter | decimal-digit | symbol ;
whitespace-char ::= space-tab | newline ;
media-inline ::= "[[" "Media:" page-name "." media-extension "]]" ;
unicode-wiki ::= <unicode-character wiki-markup-characters> ;
random-character ::= α ;
behaviourswitch-noeditsection ::= "__NOEDITSECTION__" ;
image-param-border ::= "border" ;
bold-toggle ::= "'''" ;
behaviourswitch-forcetoc ::= "__FORCETOC__" ;
internal-link-end ::= "]]" ;
media-extension ::= "ogg" | "wav" ;
lines-of-text ::= line-of-text lines-of-text? ;
indent-item ::= ":" (list-item | item-body)? ;
noparse-block ::= nowiki-block | html-block | math-block | pre-block | html-comment ;
unescaped-less-than ::= "<" ;
image-valign-baseline ::= "baseline" ;
italic-toggle ::= "''" ;
image-size-parameter ::= digits "px" ;
image-mode-frameless ::= "frameless" ;
table-column-line ::= "|" inline-text ("|" table-column-line)? ;
pre-body ::= characters ;
wiki-page ::= (redirect article?) | (article?) ;
line-of-text ::= inline-text newline ;
image-valign-top ::= "top" ;
html-body ::= characters ;
html-opening-tag ::= "<html" (whitespace characters?)? ">" ;
image-param-page ::= "page=$1" | "page $1" ;
image-align-left ::= "left" ;
title-legal-char ::= space | "%" | "!" | """ | "$" | "&" | "'" | "(" | ")" | "*" | "," | "-" | "." | "/" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | ":" | ";" | "=" | "?" | "@" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "\" | "^" | "_" | "`" | "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "~" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | "" | " " | "¡" | "¢" | "£" | "¤" | "¥" | "¦" | "§" | "¨" | "©" | "ª" | "«" | "¬" | "­" | "®" | "¯" | "°" | "±" | "²" | "³" | "´" | "µ" | "¶" | "·" | "¸" | "¹" | "º" | "»" | "¼" | "½" | "¾" | "¿" | "À" | "Á" | "Â" | "Ã" | "Ä" | "Å" | "Æ" | "Ç" | "È" | "É" | "Ê" | "Ë" | "Ì" | "Í" | "Î" | "Ï" | "Ð" | "Ñ" | "Ò" | "Ó" | "Ô" | "Õ" | "Ö" | "×" | "Ø" | "Ù" | "Ú" | "Û" | "Ü" | "Ý" | "Þ" | "ß" | "à" | "á" | "â" | "ã" | "ä" | "å" | "æ" | "ç" | "è" | "é" | "ê" | "ë" | "ì" | "í" | "î" | "ï" | "ð" | "ñ" | "ò" | "ó" | "ô" | "õ" | "ö" | "÷" | "ø" | "ù" | "ú" | "û" | "ü" | "ý" | "þ" | "ÿ" | "+" ;
pre-opening-tag ::= "<pre" (whitespace characters?)? ">" ;
LF ::= "\n" ;
any-supported-unicode-character ::= α ;
special-block ::= horizontal-rule | heading | list-item | table | space-block ;
canonical-page-first-char ::= ucase-letter | decimal-digit | underscore ;
image-valign-bottom ::= "bottom" ;
lcase-letter ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" ;
image-mode-frame ::= "framed" | "enframed" | "frame" ;
TAB ::= "\t" ;
image-valign-sub ::= "sub" ;
article-link ::= (interwiki-prefix | ":")? namespace-prefix? article-title ;
 article-link ::= ((interwiki-prefix | ":")? namespace-prefix? article-title) | ("/" article-title) | ("../"* article-title?) ;
image-align-parameter ::= image-align-left | image-align-center | image-align-right | image-align-none ;
CR ::= "\r" ;
any-text ::= unicode-character* ;
category-link ::= internal-link-start category-namespace ":" article-title (pipe sort-key)? internal-link-end ;
level-6-heading ::= "======" inline-text "======" space-tabs newline ;
level-5-heading ::= "=====" inline-text "=====" space-tabs newline ;
level-4-heading ::= "====" inline-text "====" space-tabs newline ;
html-closing-tag ::= "</html" whitespace? ">" ;
special-block-and-more ::= special-block EOF | (newline? special-block-and-more) | (newline? paragraph-and-more) ;
level-3-heading ::= "===" inline-text "===" space-tabs newline ;
level-2-heading ::= "==" inline-text "==" space-tabs newline ;
level-1-heading ::= "=" inline-text "=" space-tabs newline ;
table-row ::= "|-" CSS? newline table-column table-row? ;
pre-closing-tag ::= "</pre" whitespace? ">" ;
sub-page-separator ::= "/" ;
wiki-markup-characters ::= "|" | "[" | "]" | "*" | "#" | ":" | ";" | "<" | ">" | "=" | "'" | "{" | "}" ;
gallery-block ::= "<gallery>" newline? gallery-image (newline? gallery-image)* newline? "</gallery>" ;
page-first-char ::= canonical-page-first-char | lcase-letter ;
plain-text ::= unicode-wiki | ("<nowiki>" ("|" | "[" | "]" | "<" | ">" | "{" | "}")* "</nowiki>") | (unicode-wiki space* "*" | "#" | ":" | ";") | (unicode-wiki space? "=" space? unicode-wiki) | (unicode-wiki "'") | ("'" unicode-wiki) ;
image-align-center ::= "center" | "centre" ;
space-tab ::= space | TAB ;
image-extension ::= "jpg" | "jpeg" | "png" | "svg" | "gif" | "bmp" ;
category-namespace ::= "Category" ;
behaviourswitch-notoc ::= "__NOTOC__" ;
image-inline ::= "[[" "Image:" page-name "." image-extension (pipe image-option)* "]]" ;
external-link-end ::= "]" ;
table-parameters ::= CSS | html-table-attributes ;
bold-italic-toggle ::= "'''''" ;
decimal-number ::= decimal-digit+ ;
html-entity ::= ("&" html-entity-name ";") | ("&#" decimal-number ";") | ("&#x" hex-number ";") ;
behaviour-switch ::= behaviourswitch-toc | behaviourswitch-forcetoc | behaviourswitch-notoc | behaviourswitch-noeditsection | behaviourswitch-nogallery ;
namespace-prefix ::= namespace? ":" ;
enumerated-item ::= "#" (list-item | item-body)? ;
html-comment ::= "<!--" characters? "-->" ;
canonical-page-char ::= letter | decimal-digit | underscore ;
hex-number ::= hex-digit+ ;
unicode-character ::= <any-supported-unicode-character Whitespaces> ;
unescaped-greater-than ::= ">" ;
table-cell-parameters ::= CSS | html-cell-attributes ;
table-column ::= table-column-line | table-column-multiline ;
image-mode-auto-thumb ::= "thumbnail" | "thumb" ;
image-param-upright ::= "upright" ("="? digits)? ;
text-with-formatting ::= formatting | inline-html | noparse-block | behaviour-switch | html-entity | html-unsafe-symbol | text | random-character ;
space-block-2 ::= space inline-text? newline ;
redirect-tag ::= "#redirect" ;
image-option ::= image-mode-parameter | image-size-parameter | image-align-parameter | image-valign-parameter | caption | image-other-parameter ;
rfc-number ::= "RFC" spaces digits ;
gallery-image ::= image-name ("|" caption)? ;
item-body ::= defined-term | (whitespace? inline-text) ;
magic-link ::= isbn | rfc-number | pmid-number ;
table-column-multiline ::= "|" (table-cell-parameters "|")? any-text newline table-column-multiline? ;
html-entity-name ::= wgHtmlEntities ;
external-link-start ::= "[" ;
paragraph-and-more ::= paragraph EOF | (newline? special-block-and-more) | (newline paragraph-and-more) ;
internal-link ::= internal-link-start article-link ("#" section-id)? (pipe link-description?)? internal-link-end extra-description? ;
page-name ::= title-character (space? title-character)* ;
image-mode-manual-thumb ::= ("thumbnail=" image-name) | ("thumb=" image-name) ;
space-block ::= space inline-text newline space-block-2* ;
horizontal-rule ::= "----" dashes? inline-text? newline ;
section-id ::= (title-legal-char | "%" | "#")* ;
image-valign-text-top ::= "text-top" ;
isbn-number ::= "97" "8" | "9" (space | "-")? decimal-digit (space | "-")? "9"* decimal-digit | "X" | "x" ;
--------------------markup::wiki-mediawiki-ebnf.bgf--------------------
internal_link ::= start_link full_pagename ("|" label)? end_link label_extension ;
horizontal_rule ::= "----" "-"* ;
start_link ::= "[[" ;
current_date ::= "~~~~~" ;
ASCII_letter ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ;
table_body ::= table_header_cell | table_cell (table_row table_header_cell | table_cell)* ;
table_cell ::= (line_break "|" (style | whitespace)* text) | (table_cell "||" (style | whitespace)* text) ;
continue_definition_list ::= definition_list | continue_definition_list | ":" | "*" | "#" line_break definition_list ;
table_start ::= "{|" (style | whitespace)* line_break ;
place_TOC ::= (whitespace | line_break)* "__TOC__" (whitespace | line_break)* ;
ordered_list ::= "#" text ;
external_link ::= URL | (start_link URL (whitespace label)? end_link label_extension) ;
header_link ::= "/*" text "*/" ;
table_end ::= "|}" ;
table_row ::= line_break "|-" "-"* (style | whitespace)* line_break ;
header_end ::= whitespace? line_break ;
bold_text ::= "'''" text "'''" ;
table_header_cell ::= (line_break "!" (style | whitespace)* text) | (table_cell "!!" | "||" (style | whitespace)* text) ;
ISBN_link ::= digit ("-" | " ")? digit digit digit ("-" | " ")? digit digit digit digit digit ("-" | " " digit | "X" | "x")? ;
bold_italic_text ::= "'''''" text "'''''" ;
continue_unordered_list ::= unordered_list | continue_unordered_list | ":" | "*" | "#" line_break unordered_list ;
table_header ::= "|+" text line_break ;
end_link ::= "]]" ;
italic_text ::= "''" text "''" ;
disable_section_edit ::= (whitespace | line_break)* "__NOEDITSECTION__" (whitespace | line_break)* ;
Unicode_char ::= α ;
force_TOC ::= (whitespace | line_break)* "__FORCETOC__" (whitespace | line_break)* ;
disable_TOC ::= (whitespace | line_break)* "__NOTOC__" (whitespace | line_break)* ;
URL ::= ASCII_letter* "://" URL_char* ;
user_signature_with_date ::= "~~~~" ;
definition_list ::= text? ":" text ;
full_pagename ::= ((namespace ":") | ":")? pagename ;
header6 ::= line_break "======" whitespace? text whitespace? "======" header_end ;
unordered_list ::= "*" text ;
continue_ordered_list ::= ordered_list | continue_ordered_list | ":" | "*" | "#" line_break ordered_list ;
header5 ::= line_break "=====" whitespace? text whitespace? "=====" header_end ;
header4 ::= line_break "====" whitespace? text whitespace? "====" header_end ;
code_line ::= line_break " " text ;
header3 ::= line_break "===" whitespace? text whitespace? "===" header_end ;
URL_char ::= ASCII_letter | digit | "-" | "_" | "." | "~" | "!" | "*" | "'" | "(" | ")" | ";" | ":" | "@" | "&" | "=" | "+" | "$" | "," | "/" | "?" | "%" | "#" | "[" | "]" ;
header2 ::= line_break "==" whitespace? text whitespace? "==" header_end ;
balanced_text ::= text_without_consecutive_equal_braces (include text_without_consecutive_equal_braces)* ;
user_signature ::= "~~~" ;
header1 ::= line_break "=" whitespace? text whitespace? "=" header_end ;
--------------------markup::wiki-simple.bgf--------------------
WikiText ::= [wss] WikiSymbol* ;
WikiLink ::= [barred] "[[" destination::PageName "|" description::(MWWord+) "]]" ;
 WikiLink ::= [simple] "[[" destination::PageName "]]" ;
WikiSymbol ::= [w] MWWord ;
 WikiSymbol ::= [wl] WikiLink ;
--------------------markup::wiki-table.bgf--------------------
LocatedElement ::= Table ;
 LocatedElement ::= Caption ;
 LocatedElement ::= Row ;
 LocatedElement ::= Cell ;
--------------------fl::antlr.bgf--------------------
ifThenElse ::= "if" c::expr "then" e1::expr "else" e2::expr ;
--------------------fl::ecore.bgf--------------------
ApplyExp ::= function::Function (argument::Exp)+ ;
LiteralExp ::= value::integer() ;
MinusExp ::= left::Exp right::Exp ;
BinaryExp ::= PlusExp | MinusExp | EqualExp ;
IfThenElseExp ::= if::Exp then::Exp else::Exp ;
EqualExp ::= left::Exp right::Exp ;
PlusExp ::= left::Exp right::Exp ;
ArgumentExp ::= argument::Argument ;
--------------------fl::emf.bgf--------------------
ProgramType ::= (function::Function)+ ;
IfThenElse ::= ifExpr::Expr thenExpr::Expr elseExpr::Expr ;
--------------------fl::jaxb.bgf--------------------
ObjectFactory ::= ε ;
package-info ::= φ ;
IfThenElse ::= IfExpr::Expr ThenExpr::Expr ElseExpr::Expr ;
--------------------fl::om.bgf--------------------
IfThenElse ::= ifExpr::Expr thenExpr::Expr elseExpr::Expr ;
--------------------fl::python.bgf--------------------
_THEN ::= "then" ;
_IF ::= "if" ;
_ELSE ::= "else" ;
ifThenElse ::= _IF expr _THEN expr _ELSE expr ;
_Literal ::= Literal ;
--------------------fl::rascal-a.bgf--------------------
FLPrg ::= [prg] fs::(FLFun*) ;
FLExpr ::= (binary::(e1::FLExpr op::FLOp e2::FLExpr)) | (apply::(f::string() vargs::(FLExpr*))) | (ifThenElse::(c::FLExpr t::FLExpr e::FLExpr)) | (argument::(a::string())) | (literal::(i::integer())) ;
FLFun ::= [fun] f::string() args::(str*) body::FLExpr ;
FLOp ::= (minus::ε) | (plus::ε) | (equal::ε) ;
--------------------fl::xsd.bgf--------------------
IfThenElse ::= ifExpr::Expr thenExpr::Expr elseExpr::Expr ;
--------------------metasyntax::bnf-sdf.bgf--------------------
NonTerminal ::= "<" string() ">" ;
--------------------metasyntax::txl.bgf--------------------
ruleApplications ::= IN IN commentNL* ruleApplication+ EX EX ruleoptNL? ;
eachArgs ::= SP "each" varidOrLiteral* ;
formatCue ::= "[" formatId "]" ;
functionStatement ::= ("function" ruleid formalArgument* NL IN IN constructDeconstructImportExportOrCondition* EX skippingType? "replace" dollarStar? SP type NL IN pattern constructDeconstructImportExportOrCondition* EX "by" NL IN replacement EX EX "end" "function" NL NL) | ("function" ruleid formalArgument* NL IN IN constructDeconstructImportExportOrCondition* EX skippingType? "match" dollarStar? SP type NL IN pattern constructDeconstructImportExportOrCondition* EX EX "end" "function" NL NL) ;
formatCues ::= IN IN formatCue+ EX EX optNL? ;
ruleoptNL ::= NL ;
tokensStatement ::= "tokens" NL IN tokenPattern* EX "end" "tokens" NL NL ;
ruleApplication ::= (SP "[" ruleid varidOrLiteral* eachArgs? "]" commentNL*) | (SP lengthrule varidOrLiteral* eachArgs? "]" commentNL*) ;
defineStatement ::= "define" typeid NL IN IN literalOrType* NL barLiteralsAndTypes* EX EX "end" "define" NL NL RESET ;
formatId ::= "NL" | ("IN" IN) | ("EX" EX) ;
NEWoptNL ::= NL ;
typeModifier ::= "opt" | "repeat" | "list" | "attr" | "see" | "not" | "push" | "pop" | ":" | "~" | ">" | "<" ;
optNL ::= NL ;
commentConvention ::= (literal SP literal NL) | (literal NL) ;
typeidOrQuotedLiteral ::= typeid | quotedLiteral ;
RESET ::= EX EX EX EX EX EX EX EX EX ;
unquotedLiteral ::= (SP "'") | token ;
dollarStar ::= (SP "$") | (SP "*") ;
varidOrLiteral ::= (SP varid) | (SP literal) ;
literalOrExpression ::= (literal SP) | (expression SP) ;
dotDotDotBar ::= "..." EX NL "|" TAB IN ;
quotedLiteral ::= ("'" unquotedLiteral) | ("'" key) ;
compoundsStatement ::= "compounds" NL IN compound* EX NL "end" "compounds" NL NL ;
includeStatement ::= "include" stringlit NL ;
externalStatement ::= ("external" "rule" ruleid formalArgument* NL NL) | ("external" "function" ruleid formalArgument* NL NL) ;
typeRepeater ::= "+" | "*" | "?" | "," | ",+" ;
redefineStatement ::= "redefine" typeid NL IN IN dotDotDotBar? literalOrType* NL barLiteralsAndTypes* barDotDotDot? EX EX "end" redefineOrDefine NL NL RESET ;
constructDeconstructImportExportOrCondition ::= constructor | deconstructor | condition | importer | exporter | (EX comment NL IN) ;
commentNL ::= SP SP comment NEWoptNL? ;
commentsStatement ::= "comments" NL IN commentConvention* EX "end" "comments" NL NL ;
keysStatement ::= "keys" NL IN keyword* EX NL "end" "keys" NL NL ;
barLiteralsAndTypes ::= EX "|" TAB IN literalOrType* NL ;
tokenPattern ::= (typeid TAB_24 stringlit NL) | (TAB_16 "|" TAB_24 stringlit NL) | (typeid TAB_16 "..."? "|" TAB_24 stringlit NL) | (typeid TAB_16 "+" TAB_24 stringlit NL) | (comment NL) ;
barDotDotDot ::= EX "|" TAB IN "..." NL ;
typeSpec ::= (typeModifier? typeid typeRepeater?) | "!" ;
ruleStatement ::= ("rule" ruleid formalArgument* NL IN IN constructDeconstructImportExportOrCondition* EX skippingType? "replace" dollarStar? SP type NL IN pattern constructDeconstructImportExportOrCondition* EX "by" NL IN replacement EX EX "end" "rule" NL NL) | ("rule" ruleid formalArgument* NL IN IN constructDeconstructImportExportOrCondition* EX skippingType? "match" dollarStar? SP type NL IN pattern EX EX constructDeconstructImportExportOrCondition* "end" "rule" NL NL) ;
literalOrVariable ::= (literal SP) | (varid SP type SP) | (varid SP) ;
formalArgument ::= varid SP type commentNL* ;
literalOrType ::= (type SP) | (literal SP) ;
redefineOrDefine ::= "redefine" | "define" ;
skippingType ::= "skipping" SP type commentNL* ;
--------------------metasyntax::ebnf-bgf.bgf--------------------
selectable-expression ::= selector::string() "::" expression ;
definition-separator-metasymbol ::= "\n" " " ;
end-group-metasymbol ::= ")" ;
start-nonterminal-metasymbol ::= ε ;
end-terminal-metasymbol ::= """ ;
optionality-metasymbol ::= "?" ;
repetition-metasymbol ::= "+" | "*" ;
marked-expression ::= "<" expression ">" ;
start-group-metasymbol ::= "(" ;
group-expression ::= start-group-metasymbol expression end-group-metasymbol ;
optional-expression ::= expression optionality-metasymbol ;
repetition-expression ::= expression repetition-metasymbol ;
right-hand-side ::= (definition-separator-metasymbol definition)+ ;
end-nonterminal-metasymbol ::= ε ;
start-terminal-metasymbol ::= """ ;
terminator-metasymbol ::= "\n" ;
defining-metasymbol ::= ":" ;
--------------------metasyntax::ebnf-iso-1.bgf--------------------
commentless_symbol ::= terminal_character | meta_identifier | integer | terminal_string | special_sequence ;
defining_symbol ::= "=" ;
decimal_digit ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
end_option_symbol ::= "]" | "/)" ;
except_symbol ::= "-" ;
definitions_list ::= single_definition (definition_separator_symbol single_definition)* ;
end_group_symbol ::= ")" ;
gap_separator ::= space_character | horizontal_tabulation_character | new_line | vertical_tabulation_character | form_feed ;
bracketed_textual_comment ::= start_comment_symbol comment_symbol* end_comment_symbol ;
other_character ::= " " | ":" | "+" | "_" | "%" | "@" | "&" | "#" | "$" | "<" | ">" | "\" | "^" | "‘" | "~" ;
form_feed ::= "\f" ;
comment_symbol ::= bracketed_textual_comment | other_character | commentless_symbol ;
start_comment_symbol ::= "(*" ;
terminal_string ::= (first_quote_symbol first_terminal_character+ first_quote_symbol) | (second_quote_symbol second_terminal_character+ second_quote_symbol) ;
empty_sequence ::= ε ;
new_line ::= "\r"* "\n" "\r"* ;
special_sequence_character ::= terminal_character ;
terminator_symbol ::= ";" | "." ;
space_character ::= " " ;
syntactic_factor ::= (integer repetition_symbol)? syntactic_primary ;
horizontal_tabulation_character ::= "\t" ;
single_definition ::= syntactic_term (concatenate_symbol syntactic_term)* ;
first_quote_symbol ::= "’" ;
repeated_sequence ::= start_repeat_symbol definitions_list end_repeat_symbol ;
terminal_character ::= letter | decimal_digit | concatenate_symbol | defining_symbol | definition_separator_symbol | end_comment_symbol | end_group_symbol | end_option_symbol | end_repeat_symbol | except_symbol | first_quote_symbol | repetition_symbol | second_quote_symbol | special_sequence_symbol | start_comment_symbol | start_group_symbol | start_option_symbol | start_repeat_symbol | terminator_symbol | other_character ;
second_quote_symbol ::= """ ;
repetition_symbol ::= "*" ;
meta_identifier ::= letter meta_identifier_character* ;
gap_free_symbol ::= terminal_character | terminal_string ;
concatenate_symbol ::= "," ;
start_repeat_symbol ::= "{" | "(:" ;
definition_separator_symbol ::= "|" | "/" | "!" ;
vertical_tabulation_character ::= "\v" ;
end_comment_symbol ::= "*)" ;
syntax_rule ::= meta_identifier defining_symbol definitions_list terminator_symbol ;
end_repeat_symbol ::= "}" | ":)" ;
start_group_symbol ::= "(" ;
first_terminal_character ::= terminal_character ;
second_terminal_character ::= terminal_character ;
syntactic_exception ::= syntactic-factor ;
special_sequence_symbol ::= "?" ;
meta_identifier_character ::= letter | decimal_digit ;
syntactic_term ::= syntactic_factor (except_symbol syntactic_exception)? ;
special_sequence ::= special_sequence_symbol special_sequence_character* special_sequence_symbol ;
start_option_symbol ::= "[" | "(/" ;
syntactic_primary ::= optional_sequence | repeated_sequence | grouped_sequence | meta_identifier | terminal_string | special_sequence | empty_sequence ;
grouped_sequence ::= start_group_symbol definitions_list end_group_symbol ;
optional_sequence ::= start_option_symbol definitions_list end_option_symbol ;
--------------------metasyntax::ebnf-iso-2.bgf--------------------
definitions_list ::= single_definition ("|" single_definition)* ;
single_definition ::= term ("," term)* ;
comment_symbol ::= comment | terminal_string | special_sequence | character ;
syntax_rule ::= meta_identifier "=" definitions_list ";" ;
special_sequence ::= "?" character* "?" ;
repeated_sequence ::= "{" definitions_list "}" ;
terminal_string ::= ("’" character+ "’") | (""" character+ """) ;
meta_identifier ::= letter (letter | decimal_digit)* ;
grouped_sequence ::= "(" definitions_list ")" ;
optional_sequence ::= "[" definitions_list "]" ;
--------------------metasyntax::ebnf-iso-3.bgf--------------------
COMMENT ::= "(*" COMMENT_SYMBOL* "*)" ;
INTEGER ::= DIGIT+ ;
DEFINITIONS_LIST ::= SINGLE_DEFINITION ("/" SINGLE_DEFINITION)* ;
TERMINAL ::= ("’" CHARACTER+ "’") | (""" CHARACTER+ """) ;
COMMENT_SYMBOL ::= COMMENT | TERMINAL | SPECIAL_SEQUENCE | CHARACTER ;
SYNTAX_RULE ::= META_IDENTIFIER "=" DEFINITIONS_LIST "." ;
FACTOR ::= (INTEGER "*")? PRIMARY ;
EXCEPTION ::= FACTOR ;
EMPTY ::= ε ;
TERM ::= FACTOR ("-" EXCEPTION)? ;
SINGLE_DEFINITION ::= TERM ("," TERM)* ;
SPECIAL_SEQUENCE ::= "?" CHARACTER* "?" ;
REPEATED_SEQUENCE ::= "(:" DEFINITIONS_LIST ":)" ;
META_IDENTIFIER ::= LETTER (LETTER | DIGIT)* ;
SYNTAX ::= SYNTAX_RULE+ ;
GROUPED_SEQUENCE ::= "(" DEFINITIONS_LIST ")" ;
PRIMARY ::= OPTIONAL_SEQUENCE | REPEATED_SEQUENCE | SPECIAL_SEQUENCE | GROUPED_SEQUENCE | META_IDENTIFIER | TERMINAL | EMPTY ;
OPTIONAL_SEQUENCE ::= "(/" DEFINITIONS_LIST "/)" ;
--------------------metasyntax::relaxng.bgf--------------------
open-pattern ::= other pattern ;
except-name-class ::= other (except::open-name-classes)? ;
define-element ::= define::(name::string() combine-att common-atts open-patterns) ;
open-name-class ::= other name-class ;
open-name-classes ::= other name-class+ ;
name-class ::= (name::(common-atts string())) | (anyName::(common-atts except-name-class)) | (nsName::(common-atts except-name-class)) | (choice::(common-atts open-name-classes)) ;
open-patterns ::= other pattern+ ;
common-atts ::= (ns::string())? (datatypeLibrary::string())? α* ;
include-content ::= other (start-element | define-element | (div::(common-atts include-content)))* ;
combine-att ::= (combine::("choice" | "interleave"))? ;
grammar-content ::= other (start-element | define-element | (div::(common-atts grammar-content)) | (include::(href::string() common-atts include-content)))* ;
start-element ::= start::(combine-att common-atts open-pattern) ;
--------------------metasyntax::ebnf-sdf.bgf--------------------
IdCon ::= string() ;
--------------------metasyntax::lll-ldta.bgf--------------------
alts-tail ::= "|" alt ;
--------------------metasyntax::xsd-guyard.bgf--------------------
ApplicationInfo ::= text::String ;
ComplexTypeSimpleContent ::= base::SimpleType ;
AbstractType ::= SimpleType ;
 AbstractType ::= ComplexType ;
XSchemaContentElement ::= Parameters ;
 XSchemaContentElement ::= AbstractType ;
 XSchemaContentElement ::= Group ;
 XSchemaContentElement ::= AttributeGroup ;
XSchema ::= namespace::String (contents::XSchemaContentElement)+ ;
AttributeRef ::= referencedAttribute::Attribute ;
ElementRef ::= referencedElement::Element ;
AbstractContent ::= Container ;
 AbstractContent ::= AtomicContent ;
AnnotedElement ::= NamedElement ;
 AnnotedElement ::= XSchema ;
AbstractAttributeGroupContent ::= AtomicAttributeGroupContent ;
 AbstractAttributeGroupContent ::= AttributeGroup ;
GroupRef ::= referencedGroup::Group ;
ComplexTypeComplexContent ::= base::ComplexType ;
AttributeGroupRef ::= referencedAttributeGroup::AttributeGroup ;
AtomicContent ::= ElementRef ;
 AtomicContent ::= GroupRef ;
 AtomicContent ::= Element ;
SimpleType ::= (extensions::ComplexTypeSimpleContent)+ ;
AtomicAttributeGroupContent ::= AttributeGroupRef ;
 AtomicAttributeGroupContent ::= AttributeRef ;
 AtomicAttributeGroupContent ::= Attribute ;
ComplexType ::= ComplexTypeSimpleContent ;
 ComplexType ::= ComplexTypeComplexContent ;
 ComplexType ::= (extensions::ComplexTypeComplexContent)+ content::AbstractContent (attributes::AbstractAttributeGroupContent)+ ;
AttributeUseType ::= (null::ε) | (optional::ε) | (prohibited::ε) | (required::ε) ;
AttributeGroup ::= (contents::AbstractAttributeGroupContent)+ (references::AttributeGroupRef)+ ;
NamedElement ::= XSchemaContentElement ;
--------------------metasyntax::yacc-sdf.bgf--------------------
Yacc-declarations ::= Yacc-declaration* ;
Yacc-declaration ::= ("%token" | "%left" | "%right" | "%nonassoc" (Terminal | Literal)+ String?) | ("%start" Terminal) ;
Grammar-rules ::= Rule* ;
--------------------metasyntax::s-expressions.bgf--------------------
Base64 ::= "|" Base64Char* "|" ;
HexaDecimal ::= "#" HexDigit* "#" ;
SExp ::= [list] List ;
 SExp ::= [string] String ;
SimpleString ::= [raw] Raw ;
 SimpleString ::= [base64] Base64 ;
 SimpleString ::= [hex] HexaDecimal ;
 SimpleString ::= [token] Token ;
 SimpleString ::= [quoted] QuotedString ;
--------------------metasyntax::yacc-txl.bgf--------------------
yac_id ::= id dot_id* ;
Yacc_Txl_Grammar ::= tokenDefinitions productionDefinitions Cdefinitions ;
barLiteralsAndTypes ::= ("|" SP literalsAndTypes NL) | (SP bar_yac_literals NL) ;
yac_tokdef ::= id | charlit ;
bar_yac_literals ::= "|" SP yac_literal* NL ;
dot_id ::= "." id ;
plusOrStar ::= "+" | "*" ;
unquotedLiteral ::= yac_id | charlit | stringlit | number | key ;
tokenDefinition ::= yac_tokenDefinition | ("define" yac_id NL IN yac_tokenDefinition EX "end" "define" NL NL) ;
Ccode_or_token ::= Ccode | token ;
literalOrType ::= literal | type | prec | Ccode ;
productionDefinition ::= (yac_id ":" NL IN SP SP literalsAndTypes barLiteralsAndTypes* ";"? NL EX) | ("define" yac_id NL IN SP SP literalsAndTypes NL barLiteralsAndTypes* EX "end" "define" NL NL) ;
yac_literal ::= yac_id | charlit ;
endSection ::= "%%" NL NL ;
yac_tokenDefinition ::= yac_keyword yac_tokdef+ NL ;
productionDefinitions ::= productionDefinition* ;
tokenDefinitions ::= tokenDefinition* endSection? ;
quotedLiteral ::= SP "'" unquotedLiteral SP ;
literalsAndTypes ::= literalOrType* ;
yac_idOrQuotedLiteral ::= yac_id | quotedLiteral ;
--------------------metasyntax::xsd-tennison.bgf--------------------
complexTypeModel ::= simpleContent | ((mixed::("true" | "false"))? complexContent | (typeDefParticle? attrDecls)) ;
complexRestriction ::= restriction::(annotated base::string() typeDefParticle? attrDecls) ;
identityConstraint ::= unique | key | keyref ;
minInclusive ::= minInclusive::rangeFacet ;
rangeFacet ::= facet value::(integer() | string() | "UNKNOWN data") ;
simpleRestriction ::= restriction::(annotated simpleRestrictionModel attrDecls) ;
rangeFacets ::= (minExclusive | minInclusive)? (maxExclusive | maxInclusive)? ;
openAttrs ::= string()* ;
importOptionalNamespace ::= import::(import (namespace::string())?) ;
attributeType ::= ε | (type::string()) | localSimpleType ;
schemaTop ::= redefinable | topLevelElement | topLevelAttribute | notation ;
localAttribute ::= attribute::(annotated (use::("optional" | "prohibited" | "required"))? fixedOrDefault (ref::string()) | (name::string() (form::formChoice)? attributeType)) ;
complexExtension ::= extension::(extensionType typeDefParticle? attrDecls) ;
anyContent ::= (string() | (α* anyContent))* ;
simpleExtension ::= extension::(extensionType attrDecls) ;
topLevelAttribute ::= attribute::(annotated name::string() fixedOrDefault attributeType) ;
minExclusive ::= minExclusive::rangeFacet ;
explicitGroup ::= annotated occurs nestedParticle* ;
derivationSet ::= "#all" | reducedDerivationControl ;
whiteSpaceCollapse ::= whiteSpace::(facet value::"collapse") ;
maxLength ::= maxLength::numFacet ;
appinfoContent ::= anyContent ;
digitFacets ::= totalDigits? fractionDigits? ;
complexContent ::= complexContent::(annotated (mixed::("true" | "false"))? complexRestriction | complexExtension) ;
maxInclusive ::= maxInclusive::rangeFacet ;
whiteSpaceReplaceOrCollapse ::= whiteSpace::(facet value::("replace" | "collapse")) ;
commonFacets ::= enumeration* whiteSpaceCollapse? pattern* ;
simpleContent ::= simpleContent::(annotated simpleRestriction | simpleExtension) ;
lengthFacets ::= length | (minLength? maxLength?) ;
documentationContent ::= anyContent ;
localComplexType ::= complexType::complexType ;
whiteSpace ::= whiteSpace::(facet value::("preserve" | "replace" | "collapse")) ;
nestedParticle ::= localElement | groupRef | choice | sequence | any ;
namedAttributeGroup ::= attributeGroup::(annotated name::string() attrDecls) ;
topLevelSimpleType ::= simpleType::(simpleType name::string() (final::simpleDerivationSet)?) ;
topLevelComplexType ::= complexType::(complexType name::string() ((abstract::("true" | "false")) | (block::derivationSet) | (final::derivationSet))*) ;
maxExclusive ::= maxExclusive::rangeFacet ;
simpleDerivationSet ::= "#all" | (("list" | "union" | "restriction")*) ;
simpleExplicitGroup ::= annotated nestedParticle* ;
extensionType ::= annotated base::string() ;
minLength ::= minLength::numFacet ;
attrDecls ::= (localAttribute | attributeGroupRef)* anyAttribute? ;
localSimpleType ::= simpleType::simpleType ;
importRequiredNamespace ::= import::(import namespace::string()) ;
blockSet ::= "#all" | (("extension" | "restriction" | "substitution")*) ;
groupRef ::= group::(annotated occurs ref::string()) ;
numFacet ::= facet value::integer() ;
localElement ::= element::(occurs (ref::string()) | (element name::string() (form::formChoice)?)) ;
typeDefParticle ::= groupRef | all | choice | sequence ;
attributeGroupRef ::= attributeGroup::(annotated ref::string()) ;
anyAttribute ::= anyAttribute::wildcard ;
simpleRestrictionModel ::= (base::"xs:anySimpleType" rangeFacets digitFacets lengthFacets whiteSpace? enumeration* pattern*) | (base::"xs:string" lengthFacets whiteSpace? enumeration* pattern*) | (base::"xs:normalizedString" lengthFacets whiteSpaceReplaceOrCollapse? enumeration* pattern*) | (base::("xs:token" | "xs:language" | "xs:Name" | "xs:NCName" | "xs:ID" | "xs:IDREF" | "xs:IDREFS" | "xs:NMTOKEN" | "xs:NMTOKENS" | "xs:ENTITY" | "xs:ENTITIES" | "xs:hexBinary" | "xs:base64Binary" | "xs:anyURI" | "xs:QName" | "xs:NOTATION") lengthFacets commonFacets) | (base::"xs:boolean" whiteSpaceCollapse? pattern*) | (base::("xs:decimal" | "xs:integer" | "xs:nonPositiveInteger" | "xs:nonNegativeInteger" | "xs:positiveInteger" | "xs:negativeInteger" | "xs:unsignedLong" | "xs:unsignedInt" | "xs:unsignedShort" | "xs:unsignedByte" | "xs:long" | "xs:int" | "xs:short" | "xs:byte") digitFacets rangeFacets commonFacets) | (base::("xs:float" | "xs:double" | "xs:duration" | "xs:dateTime" | "xs:time" | "xs:date" | "xs:gYearMonth" | "xs:gYear" | "xs:gMonthDay" | "xs:gMonth" | "xs:gDay") rangeFacets commonFacets) | ((base::string()) | localSimpleType rangeFacets digitFacets lengthFacets whiteSpace? enumeration* pattern*) ;
topLevelElement ::= element::(element name::string() ((substitutionGroup::string()) | (abstract::("true" | "false")) | (final::derivationSet))*) ;
simpleType ::= annotated simpleDerivation ;
totalDigits ::= totalDigits::(facet value::integer()) ;
complexType ::= annotated complexTypeModel ;
fixedOrDefault ::= ε | (fixed::string()) | (default::string()) ;
simpleDerivation ::= simpleRestriction | list | union ;
fractionDigits ::= fractionDigits::numFacet ;
allModel ::= annotated (element::(((minOccurs::("0" | "1")) | (maxOccurs::("0" | "1")))* (ref::string()) | (element name::string() (form::formChoice)?)))* ;
reducedDerivationControl ::= ("extension" | "restriction")* ;
allNNI ::= integer() | "unbounded" ;
namedGroup ::= group::(annotated name::string() (all::allModel) | (choice::simpleExplicitGroup) | (sequence::simpleExplicitGroup)) ;
formChoice ::= "qualified" | "unqualified" ;
noFixedFacet ::= annotated value::string() ;
--------------------metasyntax::aterms-rascal.bgf--------------------
AFun ::= [Quoted] StrCon ;
 AFun ::= [Unquoted] IdCon ;
ATerm ::= [Appl] AFun "(" {ATerm ","}+ ")" ;
 ATerm ::= [Real] RealCon ;
 ATerm ::= [List] "[" {ATerm ","}* "]" ;
 ATerm ::= [Annotated] ATerm Annotation ;
 ATerm ::= [Placeholder] "<" ATerm ">" ;
 ATerm ::= [Int] IntCon ;
 ATerm ::= [Fun] AFun ;
OptExp ::= [Present] "e" IntCon ;
 OptExp ::= [Absent] ε ;
RealCon ::= [RealCon] IntCon "." NatCon OptExp ;
IntCon ::= [Positive] "+" NatCon ;
 IntCon ::= [Natural] NatCon ;
 IntCon ::= [Negative] "-" NatCon ;
--------------------metasyntax::box-rascal.bgf--------------------
BoxOperator ::= "HOV" options::(SpaceOption*) ;
 BoxOperator ::= "WD" ;
 BoxOperator ::= "A" alignments::AlignmentOptions options::(SpaceOption*) ;
 BoxOperator ::= "HV" options::(SpaceOption*) ;
 BoxOperator ::= "R" ;
 BoxOperator ::= "H" options::(SpaceOption*) ;
 BoxOperator ::= "I" options::(SpaceOption*) ;
 BoxOperator ::= "V" options::(SpaceOption*) ;
SpaceSymbol ::= "vs" ;
 SpaceSymbol ::= "ts" ;
 SpaceSymbol ::= "hs" ;
 SpaceSymbol ::= "is" ;
AlignmentOptions ::= "(" {AlignmentOption ","}* ")" ;
SpaceOption ::= SpaceSymbol "=" NatCon ;
AlignmentOption ::= "r" options::(SpaceOption*) ;
 AlignmentOption ::= "l" options::(SpaceOption*) ;
 AlignmentOption ::= "c" options::(SpaceOption*) ;
GroupOption ::= "gs" "=" NatCon ;
 GroupOption ::= "op" "=" BoxOperator ;
FontOperator ::= "VAR" ;
 FontOperator ::= "MATH" ;
 FontOperator ::= "COMM" ;
 FontOperator ::= "KW" ;
 FontOperator ::= "NUM" ;
 FontOperator ::= "ESC" ;
 FontOperator ::= "STRING" ;
--------------------metasyntax::sdf-rascal.bgf--------------------
ATermAttribute ::= [Default] ε ;
AFun ::= [Quoted] StrCon ;
 AFun ::= [Unquoted] ε ;
ATerm ::= [Real] RealCon ;
 ATerm ::= [Appl] AFun "(" {ATerm ","}+ ")" ;
 ATerm ::= [Annotated] ATerm Annotation ;
 ATerm ::= [Placeholder] "<" ATerm ">" ;
 ATerm ::= [Int] IntCon ;
 ATerm ::= [Fun] AFun ;
 ATerm ::= [List] "[" {ATerm ","}* "]" ;
OptExp ::= [Present] "e" IntCon ;
 OptExp ::= [Absent] ε ;
ImpSection ::= [Imports] "imports" Imports ;
ModuleName ::= [Parameterized] id::ModuleId "[" actuals::Syms "]" ;
 ModuleName ::= [Unparameterized] ε ;
SDF ::= [Definition] "definition" def::Definition ;
RealCon ::= [RealCon] IntCon "." NatCon OptExp ;
IntCon ::= [Negative] "-" NatCon ;
 IntCon ::= [Natural] NatCon ;
 IntCon ::= [Positive] "+" NatCon ;
FunctionName ::= [QuotedFun] StrCon ;
 FunctionName ::= [UnquotedFun] IdCon ;
ArgumentIndicator ::= [Default] "<" {NatCon ","}+ ">" ;
--------------------tescol::00000.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
COLON ::= ":" ;
EQUALS ::= "==" ;
SKIP ::= "skip" ;
LTE ::= "<=" ;
ELSE ::= "else" ;
GTE ::= ">=" ;
LPAR ::= "(" ;
COMMA ::= "," ;
DOUWORD ::= "double" ;
CONJUNCT ::= "/\\" ;
EXPO ::= "**" ;
DIV ::= "/" ;
RPAR ::= ")" ;
ASSIGN ::= COLON "=" ;
SEMI ::= ";" ;
GT ::= ">" ;
DISJUNCT ::= "\\/" ;
SUB ::= "-" ;
NOTEQ ::= "!=" ;
CONTAINS ::= "contains" ;
CONSTID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
QMARK ::= "?" ;
THEN ::= "then" ;
IF ::= "if" ;
WS ::= (" " | "\t" | "\r" | "\n")+ ;
ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
INTWORD ::= "int" ;
MULTI ::= "*" ;
PROC ::= "proc" ;
DOUBLE ::= INT? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ("e" | "E" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+)? ;
WHILE ::= "while" ;
INT ::= ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
DO ::= "do" ;
LT ::= "<" ;
LBRACE ::= "{" ;
VAR ::= "var" ;
CHECKOUT ::= "checkout" ;
TROLLEY ::= "trolley" ;
CONST ::= "const" ;
DONE ::= "done" ;
ADD ::= "+" ;
RBRACE ::= "}" ;
--------------------tescol::00001.bgf--------------------
SKIP ::= "skip" ;
boolExpr ::= andExpr (DISJ andExpr)* ;
COLON ::= ":" ;
COMMENT ::= "/*" α* "*/" ;
LTE ::= "<=" ;
EXP ::= "**" ;
NEQ ::= "!=" ;
ELSE ::= "else" ;
MIXFIX ::= "?" ;
GTE ::= ">=" ;
DIV ::= "/" ;
SEMI ::= ";" ;
OCB ::= "{" ;
GT ::= ">" ;
andExpr ::= compExpr (CONJ compExpr)* ;
EQ ::= "==" ;
CONJ ::= "/\\" ;
compExpr ::= plusexpr (GT | LT | GTE | LTE | EQ | NEQ plusexpr)? ;
CCB ::= "}" ;
COM ::= "," ;
CONTAINS ::= "contains" ;
constDec ::= CONST CID COLON types ASSI expr ;
CID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
CPAR ::= ")" ;
THEN ::= "then" ;
IF ::= "if" ;
WS ::= (" " | "\t" | "\r" | "\n")+ ;
DISJ ::= "\\/" ;
ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
varDec ::= VAR id COLON types ;
PLUS ::= "+" ;
MULTI ::= "*" ;
INTG ::= ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
PROC ::= "proc" ;
OPAR ::= "(" ;
WHILE ::= "while" ;
DOUBLE ::= ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" | "E" INTG)? ;
MINUS ::= "-" ;
TYPEI ::= "int" ;
procDec ::= PROC ID OPAR paramlist CPAR COLON types ASSI statement ;
DO ::= "do" ;
TYPED ::= "double" ;
LT ::= "<" ;
ASSI ::= ":=" ;
VAR ::= "var" ;
CHECKOUT ::= "checkout" ;
TROLLEY ::= "trolley" ;
multExpr ::= expExp (MULTI | DIV expExp)* ;
CONST ::= "const" ;
DONE ::= "done" ;
expExp ::= atom (EXP atom)* ;
--------------------tescol::00010.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
SKIP ::= "skip" ;
COLON ::= ":" ;
arithmeticExpr ::= exprLevel1 (PLUS | MINUS exprLevel1)* ;
booleanExpr ::= conjunctionExpr (OR conjunctionExpr)* ;
CONDITION ::= "?" ;
DIVIDE ::= "/" ;
ELSE ::= "else" ;
EXPONENTIATE ::= "**" ;
procApply ::= VAR_ID LPAR args? RPAR ;
AND ::= "/\\" ;
condExpr ::= testPart e1::arithmeticExpr COLON e2::arithmeticExpr ;
LPAR ::= "(" ;
COMMA ::= "," ;
expExpr ::= unaryExpr (EXPONENTIATE unaryExpr)* ;
varDecl ::= VAR VAR_ID COLON type SEMI ;
GREATER_EQUAL ::= ">=" ;
RPAR ::= ")" ;
EXPONENT ::= "e" | "E" ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
LESS_EQUAL ::= "<=" ;
SEMI ::= ";" ;
mainStat ::= CHECKOUT stat DONE SEMI ;
constDecl ::= CONST CONST_ID COLON type DEFINED_AS arithmeticExpr SEMI ;
booleanOperator ::= EQUAL | NOT_EQUAL | GREATER | GREATER_EQUAL | LESS | LESS_EQUAL ;
conjunctionExpr ::= booleanAtom (AND booleanAtom)* ;
INT_TYPE ::= "int" ;
DOUBLE_TYPE ::= "double" ;
testPart ::= booleanExpr CONDITION ;
MULTIPLY ::= "*" ;
OR ::= "\\/" ;
procDecl ::= PROC VAR_ID LPAR parameter? RPAR COLON type DEFINED_AS stat ;
CONTAINS ::= "contains" ;
IF ::= "if" ;
THEN ::= "then" ;
WS ::= (" " | "\t" | "\r" | "\n" | "\u000C")+ ;
bracketedExpr ::= condExpr | arithmeticExpr ;
GREATER ::= ">" ;
PLUS ::= "+" ;
LESS ::= "<" ;
booleanAtom ::= (arithmeticExpr booleanOperator arithmeticExpr) | (LPAR booleanExpr RPAR) ;
CONST_ID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | DIGIT | "_")* ;
PROC ::= "proc" ;
EQUAL ::= "==" ;
VAR_ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | DIGIT | "_")* ;
DOUBLE ::= DIGIT* "." DIGIT* EXPONENT? ;
WHILE ::= "while" ;
MINUS ::= "-" ;
INT ::= DIGIT+ ;
DIGIT ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
DO ::= "do" ;
NOT_EQUAL ::= "!=" ;
DEFINED_AS ::= ":=" ;
VAR ::= "var" ;
CHECKOUT ::= "checkout" ;
RCURLYPAR ::= "}" ;
TROLLEY ::= "trolley" ;
unaryExpr ::= (MINUS atom) | (PLUS atom) | atom ;
CONST ::= "const" ;
DONE ::= "done" ;
exprLevel1 ::= expExpr (MULTIPLY | DIVIDE expExpr)* ;
LCURLYPAR ::= "{" ;
--------------------tescol::00011.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
SKIP ::= "skip" ;
OPARAN ::= "(" ;
COLON ::= ":" ;
EXP ::= "**" ;
ADDITION ::= "+" ;
ELSE ::= "else" ;
MIXFIX ::= "?" ;
CONJUNCTION ::= "/\\" ;
COMMA ::= "," ;
CBRACE ::= "}" ;
ASSIGN ::= ":=" ;
SEMI ::= ";" ;
DIVISION ::= "/" ;
MULTIPLY ::= "*" ;
OBRACE ::= "{" ;
MOREEQUAL ::= ">=" ;
CONTAINS ::= "contains" ;
CONSTID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
THEN ::= "then" ;
IF ::= "if" ;
WS ::= (" " | "\t" | "\r" | "\n")+ ;
ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
LESSEQUAL ::= "<=" ;
LESS ::= "<" ;
PROC ::= "proc" ;
MORE ::= ">" ;
SUBTRACT ::= "-" ;
EQUAL ::= "==" ;
DOUBLE ::= INT? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" INT)? ;
WHILE ::= "while" ;
INT ::= ("+" | "-")? "0" | ("1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")*) ;
DOUBLETYPE ::= "double" ;
DO ::= "do" ;
CPARAN ::= ")" ;
INTTYPE ::= "int" ;
VAR ::= "var" ;
NONEQUAL ::= "!=" ;
CHECKOUT ::= "checkout" ;
TROLLEY ::= "trolley" ;
CONST ::= "const" ;
DONE ::= "done" ;
DISJUNCTION ::= "\\/" ;
--------------------tescol::00100.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
SKIP ::= "skip" ;
COLON_EQUALS ::= ":=" ;
COLON ::= ":" ;
ADDITION ::= "+" ;
EQUALITY ::= "==" ;
INT_NUMBER ::= ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
ELSE ::= "else" ;
multOperand ::= MULTIPLICATION | DIVISION ;
DOUBLE_NUMBER ::= ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" | "E" INT_NUMBER)? ;
condExpr ::= booleanDisj (QUESTION aritExpr COLON aritExpr)? ;
CONJUNCTION ::= "/\\" ;
COMMA ::= "," ;
aritExpr ::= multExpr (addOperand multExpr)* ;
booleanConj ::= booleanExpression (CONJUNCTION booleanExpression)* ;
groupStatement ::= LBRACE statement+ RBRACE SEMI ;
GREATER_EQUAL ::= ">=" ;
SEMI ::= ";" ;
LESS_EQUAL ::= "<=" ;
DIVISION ::= "/" ;
expOperand ::= EXPONENTIATION ;
realParameters ::= aritExpr (COMMA aritExpr)* ;
addOperand ::= ADDITION | SUBTRACTION ;
QUESTION ::= "?" ;
booleanDisj ::= booleanConj (DISJUNCTION booleanConj)* ;
orderExpr ::= sign (expOperand sign)? ;
booleanExpression ::= aritExpr (relational aritExpr)? ;
CONTAINS ::= "contains" ;
CID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
LPAREN ::= "(" ;
THEN ::= "then" ;
IF ::= "if" ;
EOF ::= ε ;
WS ::= (" " | "\t" | "\r" | "\n" | "\f")+ ;
ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
EXPONENTIATION ::= "**" ;
GREATER ::= ">" ;
LESS ::= "<" ;
RPAREN ::= ")" ;
PROC ::= "proc" ;
SUBTRACTION ::= "-" ;
DOUBLE ::= "double" ;
WHILE ::= "while" ;
ifStat ::= IF expression THEN statements ELSE statements ;
INT ::= "int" ;
procedureApp ::= ID LPAREN realParameters? RPAREN ;
NON_EQUALITY ::= "!=" ;
DO ::= "do" ;
LBRACE ::= "{" ;
VAR ::= "var" ;
CHECKOUT ::= "checkout" ;
MULTIPLICATION ::= "*" ;
TROLLEY ::= "trolley" ;
multExpr ::= orderExpr (multOperand orderExpr)* ;
CONST ::= "const" ;
DONE ::= "done" ;
DISJUNCTION ::= "\\/" ;
RBRACE ::= "}" ;
--------------------tescol::00101.bgf--------------------
SKIP ::= "skip" ;
COLON ::= ":" ;
ADDITION ::= "+" ;
EQUALITY ::= "==" ;
ELSE ::= "else" ;
MIXFIX ::= "?" ;
AND ::= "/\\" ;
OPENPAR ::= "(" ;
OPENCURL ::= "{" ;
COMMA ::= "," ;
L_THAN ::= "<" ;
parameter_list ::= OPENPAR parameter_list_inside? CLOSEPAR ;
COMMENT_BLOCK ::= "/*" α* "*/" ;
DIVISION ::= "/" ;
boolean_expr ::= boolean_OR ;
var_dec ::= VAR id COLON types SEMICOLON ;
CLOSEPAR ::= ")" ;
LE_THAN ::= "<=" ;
proc_call ::= id OPENPAR (a::expr (COMMA b::expr)*)? CLOSEPAR ;
parameter_list_inside ::= parameter_element (COMMA parameter_element)* ;
parameter_element ::= ID COLON types ;
const_dec ::= CONST CONSTID COLON types DEFINEDAS expr SEMICOLON ;
EXPONENTIAL ::= "**" ;
arith_atom ::= ((ADDITION | SUBTRACTION)? number) | id | (OPENPAR expr CLOSEPAR) | proc_call ;
OR ::= "\\/" ;
GE_THAN ::= ">=" ;
while_statement ::= WHILE expr DO statement ;
arith_muldiv ::= a::arith_expo (MULTIPLICATION | DIVISION b::arith_expo)* ;
boolean_predicate ::= a::arith_expr (relationals b::arith_expr)? ;
boolean_AND ::= a::boolean_predicate (AND b::boolean_predicate)* ;
CONTAINS ::= "contains" ;
CONSTID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
INTEGER ::= "int" ;
THEN ::= "then" ;
IF ::= "if" ;
WS ::= (" " | "\t" | "\r" | "\n")+ ;
ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
DEFINEDAS ::= ":=" ;
boolean_OR ::= a::boolean_AND (OR b::boolean_AND)* ;
G_THAN ::= ">" ;
proc_dec ::= PROC id parameter_list COLON types DEFINEDAS statement SEMICOLON ;
PROC ::= "proc" ;
SUBTRACTION ::= "-" ;
DOUBLE_VAL ::= INT_VAL? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" | "E" ("+" | "-")? INT_VAL)? ;
arith_addsub ::= a::arith_muldiv (ADDITION | SUBTRACTION b::arith_muldiv)* ;
INT_VAL ::= ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
DOUBLE ::= "double" ;
WHILE ::= "while" ;
SEMICOLON ::= ";" ;
if_statement ::= IF expr THEN a::statement ELSE b::statement ;
NON_EQUALITY ::= "!=" ;
DO ::= "do" ;
statement_main ::= SKIP | if_statement | while_statement | assignment ;
arith_expr ::= arith_addsub ;
header_declaration ::= const_dec | var_dec | proc_dec ;
VAR ::= "var" ;
CHECKOUT ::= "checkout" ;
MULTIPLICATION ::= "*" ;
TROLLEY ::= "trolley" ;
arith_expo ::= a::arith_atom (EXPONENTIAL b::arith_atom)* ;
CLOSECURL ::= "}" ;
CONST ::= "const" ;
DONE ::= "done" ;
--------------------tescol::00110.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
SKIP ::= "skip" ;
COLON ::= ":" ;
whileStatement ::= WHILE expression DO statement ;
procedureApplication ::= VAR_ID LEFT_PAREN p::procedureParams RIGHT_PAREN ;
Q_MARK ::= "?" ;
EQUALITY ::= "==" ;
TYPE ::= "int" | "double" ;
ELSE ::= "else" ;
procedureParams ::= expression (COMMA expression)* ;
condExpr ::= add (Q_MARK add COLON add)? ;
DEFINE_AS ::= ":=" ;
constantDeclaration ::= CONST CONST_ID COLON TYPE DEFINE_AS add SEMI ;
EXPR ::= "expr" ;
COMMA ::= "," ;
LEFT_PAREN ::= "(" ;
GREATER_THAN_OR_EQUAL ::= ">=" ;
VARDECL ::= "vardecl" ;
DIV ::= "/" ;
LESS_THAN_OR_EQUAL ::= "<=" ;
MULT ::= "*" ;
skipStatement ::= SKIP SEMI ;
TESCO ::= "tesco" ;
SEMI ::= ";" ;
CONSTDECL ::= "constdecl" ;
PARAM ::= "param" ;
PROCAPP ::= "procApp" ;
CONJ ::= "/\\" ;
RIGHT_PAREN ::= ")" ;
procedureDeclaration ::= PROC VAR_ID LEFT_PAREN parameters RIGHT_PAREN COLON TYPE DEFINE_AS statement ;
DISJUNCT ::= "\\/" ;
GREATER_THAN ::= ">" ;
BODY ::= "body" ;
COND ::= "cond" ;
assignmentStatement ::= VAR_ID DEFINE_AS expression SEMI ;
CONTAINS ::= "contains" ;
INTEGER ::= ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
variableDeclaration ::= VAR VAR_ID COLON TYPE SEMI ;
IF ::= "if" ;
THEN ::= "then" ;
WS ::= " " | "\t" | "\f" | "\r\n" | "\r" | "\n" ;
EXPON ::= "**" ;
PLUS ::= "+" ;
CONST_ID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
IFELSE ::= "ifelse" ;
PROC ::= "proc" ;
EQUAL ::= "=" ;
VAR_ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
ifStatement ::= IF expression THEN s1::statement ELSE s2::statement ;
DOUBLE ::= INTEGER? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" | "E" INTEGER)? ;
WHILE ::= "while" ;
LEFT_BRACKET ::= "{" ;
MINUS ::= "-" ;
DO ::= "do" ;
NOT_EQUAL ::= "!=" ;
LESS_THAN ::= "<" ;
VAR ::= "var" ;
CHECKOUT ::= "checkout" ;
RIGHT_BRACKET ::= "}" ;
TROLLEY ::= "trolley" ;
CONST ::= "const" ;
DONE ::= "done" ;
PROCDECL ::= "procdecl" ;
--------------------tescol::00111.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
SKIP ::= "skip" ;
COLON ::= ":" ;
COLON_EQUALS ::= ":=" ;
booleanExpr ::= arithEx (EQUALITY | NON_EQUALITY | LESS | LESS_EQUAL | GREATER | GREATER_EQUAL arithEx)? ;
procedureApplication ::= identifier LPAREN commaSeparatedArithEx RPAREN ;
ADDITION ::= "+" ;
EQUALITY ::= "==" ;
INT_NUMBER ::= ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
ELSE ::= "else" ;
DOUBLE_NUMBER ::= ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" | "E" ("-" | "+")? INT_NUMBER)? ;
CONJUNCTION ::= "/\\" ;
COMMA ::= "," ;
conjBooleanExpr ::= booleanExpr (CONJUNCTION booleanExpr)* ;
NEWLINE ::= "\r"? "\n" ;
commaSeparatedArithEx ::= (arithEx (COMMA arithEx)*)? ;
GREATER_EQUAL ::= ">=" ;
LESS_EQUAL ::= "<=" ;
SEMI ::= ";" ;
DIVISION ::= "/" ;
prodExpr ::= exponentialExpr (MULTIPLICATION | DIVISION exponentialExpr)* ;
parameterList ::= firstID::identifier COLON firstType::type (COMMA followID::identifier COLON followType::type)* ;
QUESTION ::= "?" ;
CONTAINS ::= "contains" ;
arithEx ::= expr | procedureApplication ;
CID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
LPAREN ::= "(" ;
THEN ::= "then" ;
IF ::= "if" ;
WS ::= " " | "\r" | "\t" | "\u000C" ;
ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
EXPONENTIATION ::= "**" ;
conditionalExpr ::= disjBooleanExpr (QUESTION conditionalExpr COLON conditionalExpr)? ;
GREATER ::= ">" ;
exponentialExpr ::= unary (EXPONENTIATION unary)? ;
LESS ::= "<" ;
RPAREN ::= ")" ;
constDeclaration ::= CONST CID COLON type COLON_EQUALS arithEx ;
PROC ::= "proc" ;
SUBTRACTION ::= "-" ;
varDeclaration ::= VAR identifier COLON type ;
DOUBLE ::= "double" ;
WHILE ::= "while" ;
INT ::= "int" ;
NON_EQUALITY ::= "!=" ;
DO ::= "do" ;
LBRACE ::= "{" ;
VAR ::= "var" ;
CHECKOUT ::= "checkout" ;
MULTIPLICATION ::= "*" ;
TROLLEY ::= "trolley" ;
compoundStatement ::= (LBRACE statement (SEMI statement)* RBRACE) | statement ;
procDeclaration ::= PROC identifier LPAREN parameterList? RPAREN COLON type COLON_EQUALS compoundStatement ;
CONST ::= "const" ;
DONE ::= "done" ;
DISJUNCTION ::= "\\/" ;
RBRACE ::= "}" ;
disjBooleanExpr ::= conjBooleanExpr (DISJUNCTION conjBooleanExpr)* ;
--------------------tescol::01000.bgf--------------------
SKIP ::= "skip" ;
COMMENT ::= "/*" α* "*/" ;
LTE ::= "<=" ;
EXP ::= "**" ;
NEQ ::= "!=" ;
ELSE ::= "else" ;
GTE ::= ">=" ;
orExpr ::= andExpr (DISJ andExpr)* ;
INTNUM ::= ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
COMMA ::= "," ;
expExpr ::= atom (EXP atom)* ;
DIV ::= "/" ;
MULT ::= "*" ;
SEMI ::= ";" ;
GT ::= ">" ;
EQ ::= "==" ;
andExpr ::= comparExpr (CONJ comparExpr)* ;
CONJ ::= "/\\" ;
DEF ::= ":=" ;
VARID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
arithExpr ::= multiExpr (ADD | SUB multiExpr)* ;
COL ::= ":" ;
SUB ::= "-" ;
CONTAINS ::= "contains" ;
CONSTID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
THEN ::= "then" ;
IF ::= "if" ;
DISJ ::= "\\/" ;
WS ::= (" " | "\t" | "\r" | "\n")+ ;
PROC ::= "proc" ;
comparExpr ::= arithExpr (comparOps arithExpr)* ;
QUES ::= "?" ;
comparOps ::= EQ | NEQ | LT | GT | LTE | GTE ;
WHILE ::= "while" ;
DOUBLE ::= "double" ;
INT ::= "int" ;
DOUBNUM ::= INTNUM? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" | "E" INTNUM)? ;
multiExpr ::= expExpr (MULT | DIV expExpr)* ;
LBRACK ::= "(" ;
DO ::= "do" ;
LT ::= "<" ;
RCBRACK ::= "}" ;
RBRACK ::= ")" ;
VAR ::= "var" ;
CHECKOUT ::= "checkout" ;
TROLLEY ::= "trolley" ;
CONST ::= "const" ;
LCBRACK ::= "{" ;
DONE ::= "done" ;
ADD ::= "+" ;
--------------------tescol::01001.bgf--------------------
COLON ::= ":" ;
SKIP ::= "skip" ;
EXP ::= "**" ;
exp_exp ::= minus (EXP minus)? ;
NEQ ::= "!=" ;
ELSE ::= "else" ;
GRTEQ ::= ">=" ;
COMMA ::= "," ;
var_id ::= VAR_ID ;
DIV ::= "/" ;
MULT ::= "*" ;
SEMI ::= ";" ;
comp_exp ::= plus_min_exp (rel_operator plus_min_exp)? ;
EQ ::= "==" ;
proc_body ::= DEF statement SEMI ;
arith_exp ::= bool_exp (QUEST arith_exp COLON arith_exp)? ;
var_dec ::= VAR v_id COLON typename SEMI ;
CONJ ::= "/\\" ;
DOUBLE_T ::= INT_T? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" | "E" INT_T)? ;
const_dec ::= CONST CONST_ID COLON typename DEF arith_exp SEMI ;
DEF ::= ":=" ;
INT_T ::= ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
COM ::= "/*" α* "*/" ;
con_exp ::= comp_exp (CONJ comp_exp)* ;
mult_div_exp ::= exp_exp (MULT | DIV exp_exp)* ;
CONTAINS ::= "contains" ;
THEN ::= "then" ;
IF ::= "if" ;
WS ::= (" " | "\t" | "\r" | "\n")+ ;
DISJ ::= "\\/" ;
PLUS ::= "+" ;
LESS ::= "<" ;
proc_dec ::= proc_header proc_params proc_body ;
CLOSE ::= ")" ;
CONST_ID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
PROC ::= "proc" ;
proc_header ::= PROC p_id ;
VAR_ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
DOUBLE ::= "double" ;
WHILE ::= "while" ;
MINUS ::= "-" ;
param_list ::= (param_item (COMMA param_item)*)? ;
INT ::= "int" ;
proc_params ::= OPEN param_list CLOSE COLON typename ;
plus_min_exp ::= mult_div_exp (PLUS | MINUS mult_div_exp)* ;
DO ::= "do" ;
OPEN ::= "(" ;
p_id ::= idname::(VAR_ID | CONST_ID) ;
rel_operator ::= EQ | NEQ | LESS | LESSEQ | GRT | GRTEQ ;
GRT ::= ">" ;
bool_exp ::= con_exp (DISJ con_exp)* ;
VAR ::= "var" ;
CHECKOUT ::= "checkout" ;
LESSEQ ::= "<=" ;
TROLLEY ::= "trolley" ;
param_item ::= var_id COLON typename ;
params_given ::= (arith_exp (COMMA arith_exp)*)? ;
v_id ::= idname::(VAR_ID | CONST_ID) ;
CONST ::= "const" ;
QUEST ::= "?" ;
STST ::= "{" ;
DONE ::= "done" ;
STED ::= "}" ;
--------------------tescol::01010.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
SKIP ::= "skip" ;
COLON ::= ":" ;
RCURL ::= "}" ;
mul_div_expr ::= expexpr (MUL | DIV expexpr)* ;
INUM ::= ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
EXP ::= "**" ;
ADDITION ::= "+" " " | "\t" | "\r" | "\n" | COMMENT ;
ELSE ::= "else" ;
POSITIVE ::= "+" ;
LCURL ::= "{" ;
LSTE ::= "<=" ;
AND ::= "/\\" ;
NEGATIVE ::= "-" ;
COMMA ::= "," ;
RPARA ::= ")" ;
sub_add_expr ::= mul_div_expr (addsub mul_div_expr)* ;
DIV ::= "/" ;
ASSIGN ::= ":=" ;
SEMI ::= ";" ;
LST ::= "<" ;
LPARA ::= "(" ;
NUM ::= INUM? "." INUM? ("e" | "E" (POSITIVE | NEGATIVE)? INUM)? ;
MUL ::= "*" ;
OR ::= "\\/" ;
EQL ::= "==" ;
CONTAINS ::= "contains" ;
CONSTID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
THEN ::= "then" ;
IF ::= "if" ;
EOF ::= ε ;
WS ::= (" " | "\t" | "\r" | "\n")+ ;
GRTE ::= ">=" ;
ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
PROC ::= "proc" ;
SUBTRACTION ::= "-" " " | "\t" | "\r" | "\n" | COMMENT ;
NEQL ::= "!=" ;
DOUBLE ::= "double" ;
WHILE ::= "while" ;
INT ::= "int" ;
DO ::= "do" ;
GRT ::= ">" ;
VAR ::= "var" ;
CHECKOUT ::= "checkout" ;
TROLLEY ::= "trolley" ;
CONST ::= "const" ;
DONE ::= "done" ;
QUEST ::= "?" ;
--------------------tescol::01011.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
SKIP ::= "skip" ;
COLON ::= ":" ;
VARIABLE ::= "var" ;
EQUALITY ::= "==" ;
ELSE ::= "else" ;
COMMA ::= "," ;
PROCEDURE ::= "proc" ;
EXPO ::= "**" ;
ASSIGN ::= ":=" ;
MTHAN ::= ">" ;
SEMI ::= ";" ;
LTHAN ::= "<" ;
CONJ ::= "/\\" ;
MEQUAL ::= ">=" ;
INUMB ::= ("+" | "-")? "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ;
CONSTANT ::= "const" ;
DNUMB ::= ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* "." "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")*)? ;
CONTAINS ::= "contains" ;
THEN ::= "then" ;
IF ::= "if" ;
EOF ::= ε ;
WS ::= (" " | "\t" | "\r" | "\n")+ ;
DISJ ::= "\\/" ;
ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
DIVIS ::= "/" ;
PLUS ::= "+" ;
MULTI ::= "*" ;
WHILE ::= "while" ;
DOUBLE ::= "double" ;
MINUS ::= "-" ;
INT ::= "int" ;
LBRACK ::= "(" ;
DO ::= "do" ;
LEQUAL ::= "<=" ;
LBRACE ::= "{" ;
RBRACK ::= ")" ;
CHECKOUT ::= "checkout" ;
TROLLEY ::= "trolley" ;
DONE ::= "done" ;
NOTEQUAL ::= "!=" ;
RBRACE ::= "}" ;
--------------------tescol::01100.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
COLON ::= ":" ;
ADDITION ::= "+" ;
DEFINE ::= ":=" ;
SKIPTOKEN ::= "skip" ;
EQUALITY ::= "==" ;
RIGHTPARENTHESIS ::= ")" ;
ELSE ::= "else" ;
CONJUNCTION ::= "/\\" ;
QUESTIONMARK ::= "?" ;
PROCEDURE ::= "proc" ;
RIGHTCURLY ::= "}" ;
EXPONENT ::= "**" ;
DIVISION ::= "/" ;
NONEQUALITY ::= "!=" ;
SUBSTRACTION ::= "-" ;
CONTAINS ::= "contains" ;
CONSTID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
THEN ::= "then" ;
IF ::= "if" ;
WS ::= (" " | "\t" | "\r" | "\n")+ ;
ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
condExp ::= disjunct (QUESTIONMARK exp1::condExp COLON exp2::condExp) | ε ;
DIFFERENTOREQUAL ::= "<=" | ">=" ;
TYPEINT ::= "int" ;
booleanSymbols ::= EQUALITY | NONEQUALITY | DIFFERENTOREQUAL | STRICTLYDIFFERENT ;
WHILE ::= "while" ;
DOUBLE ::= INT? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("E" | "e" (ADDITION | SUBSTRACTION)? INT)? ;
SEMICOLON ::= ";" ;
INT ::= ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
LEFTPARENTHESIS ::= "(" ;
TYPEDOUBLE ::= "double" ;
DO ::= "do" ;
VAR ::= "var" ;
CHECKOUT ::= "checkout" ;
LEFTCURLY ::= "{" ;
MULTIPLICATION ::= "*" ;
TROLLEY ::= "trolley" ;
CONST ::= "const" ;
STRICTLYDIFFERENT ::= "<" | ">" ;
DONE ::= "done" ;
DISJUNCTION ::= "\\/" ;
COMA ::= "," ;
--------------------tescol::01101.bgf--------------------
COLON ::= ":" ;
SKIP ::= "skip" ;
COMMENT ::= BEGINCOMMENT α* ENDCOMMENT ;
OPENBRACKET ::= "{" ;
EXP ::= "**" ;
do_statement ::= DO cond_statements ;
EQUALITY ::= "==" ;
TYPE ::= "int" | "double" ;
ELSE ::= "else" ;
CONJUNCTION ::= "/\\" ;
LESSTHEN ::= "<" ;
conIDs ::= CID ;
COMMA ::= "," ;
PROCEDURE ::= "proc" ;
MORETHEN ::= ">" ;
MIX_FIX ::= "?" ;
mix_fix ::= bool_disjunction (MIX_FIX arithmetic_expression COLON atom)? ;
DIV ::= "/" ;
varIDs ::= CID | ID ;
SEMI ::= ";" ;
OPENPARENTHESIS ::= "(" ;
BECOMES ::= ":=" ;
var_dec ::= VAR varIDs COLON TYPE SEMI ;
proc_para ::= varIDs OPENPARENTHESIS (parameter COMMA?)* CLOSEDPARENTHESIS ;
else_statement ::= ELSE cond_statements ;
TROLLY ::= "trolly" ;
NONEQUALITY ::= "!=" ;
const_dec ::= CONSTANT conIDs COLON TYPE BECOMES mix_fix SEMI ;
ENDCOMMENT ::= "*/" ;
MUL ::= "*" ;
CONSTANT ::= "const" ;
proc_becomes ::= BECOMES cond_statements ;
cond_statements ::= (OPENBRACKET statement* CLOSEDBRACKET) | statement ;
SUB ::= "-" ;
CONTAINS ::= "contains" ;
CID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
THEN ::= "then" ;
IF ::= "if" ;
WS ::= (" " | "\t" | "\r" | "\n")+ ;
CLOSEDBRACKET ::= "}" ;
MOREOREQUAL ::= ">=" ;
ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
proc_dec ::= PROCEDURE proc_para COLON TYPE proc_becomes ;
LESSOREQUAL ::= "<=" ;
BEGINCOMMENT ::= "/*" ;
WHILE ::= "while" ;
DOUBLE ::= INT? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" | "E" (ADD | SUB)? INT)? ;
INT ::= ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
then_statement ::= THEN cond_statements ;
bool_disjunction ::= bool_conjunction (DISJUNCTION bool_conjunction)* ;
arithmetic_expression ::= multiplication_division (ADD | SUB multiplication_division)* ;
DO ::= "do" ;
CLOSEDPARENTHESIS ::= ")" ;
procedure_call ::= varIDs OPENPARENTHESIS parameters CLOSEDPARENTHESIS SEMI ;
VAR ::= "var" ;
multiplication_division ::= exponential (MUL | DIV exponential)* ;
bool_atom ::= arithmetic_expression (NONEQUALITY | EQUALITY | MOREOREQUAL | LESSOREQUAL | MORETHEN | LESSTHEN arithmetic_expression)* ;
CHECKOUT ::= "checkout" ;
TROLLEY ::= "trolley" ;
DISJUNCTION ::= "\\/" ;
DONE ::= "done" ;
ADD ::= "+" ;
bool_conjunction ::= bool_atom (CONJUNCTION bool_atom)* ;
--------------------tescol::01110.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
SKIP ::= "skip" ;
COLON ::= ":" ;
COLON_EQUALS ::= ":=" ;
ADDITION ::= "+" ;
EQUALITY ::= "==" ;
checkoutStat ::= CHECKOUT statement DONE SEMI ;
INT_NUMBER ::= ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
ELSE ::= "else" ;
DOUBLE_NUMBER ::= ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" | "E" INT_NUMBER)? ;
CONJUNCTION ::= "/\\" ;
COMMA ::= "," ;
addSubExpr ::= multDivExpr (ADDITION | SUBTRACTION multDivExpr)* ;
skipStat ::= SKIP SEMI ;
GREATER_EQUAL ::= ">=" ;
LESS_EQUAL ::= "<=" ;
SEMI ::= ";" ;
DIVISION ::= "/" ;
QUESTION ::= "?" ;
CONTAINS ::= "contains" ;
constDec ::= CONST name::CID COLON t::type COLON_EQUALS c::mixFix SEMI ;
CID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
LPAREN ::= "(" ;
THEN ::= "then" ;
IF ::= "if" ;
WS ::= (" " | "\t" | "\r" | "\n")+ ;
ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
EXPONENTIATION ::= "**" ;
varDec ::= VAR name::ID COLON t::type SEMI ;
GREATER ::= ">" ;
LESS ::= "<" ;
mixFix ::= (a::conjDisjunExpr QUESTION b::conjDisjunExpr COLON c::conjDisjunExpr) | conjDisjunExpr ;
RPAREN ::= ")" ;
loopStat ::= WHILE a::mixFix DO b::statement ;
PROC ::= "proc" ;
multDivExpr ::= expoExpr (MULTIPLICATION | DIVISION expoExpr)* ;
startStat ::= TROLLEY CID CONTAINS ;
SUBTRACTION ::= "-" ;
procCall ::= (name::ID) | (name::CID) LPAREN (a::mixFix (COMMA b::mixFix)*)? RPAREN ;
conjDisjunExpr ::= relation (CONJUNCTION | DISJUNCTION relation)* ;
DOUBLE ::= "double" ;
WHILE ::= "while" ;
ifStat ::= (IF a::mixFix THEN b::statement ELSE c::statement) | (IF a::mixFix THEN b::statement) ;
INT ::= "int" ;
NON_EQUALITY ::= "!=" ;
procDec ::= PROC name::ID LPAREN (a::ID COLON a_t::type (COMMA b::ID COLON b_t::type)*)? RPAREN COLON r_t::type COLON_EQUALS c::statement ;
DO ::= "do" ;
LBRACE ::= "{" ;
VAR ::= "var" ;
expoExpr ::= unary (EXPONENTIATION unary)* ;
CHECKOUT ::= "checkout" ;
MULTIPLICATION ::= "*" ;
TROLLEY ::= "trolley" ;
CONST ::= "const" ;
DONE ::= "done" ;
DISJUNCTION ::= "\\/" ;
RBRACE ::= "}" ;
--------------------tescol::01111.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
COLON ::= ":" ;
boolExpr ::= subExpr (operations subExpr)? ;
SKIP ::= "skip" ;
ADDITION ::= "+" ;
GREATERTHAN ::= ">" ;
LESSTHAN ::= "<" ;
EQUALITY ::= "==" ;
conditionalStat ::= IF boolExpr THEN stat ELSE stat ;
ELSE ::= "else" ;
UNDER ::= "_" ;
CONJUNCTION ::= "/\\" ;
GREATERTHANOREQUAL ::= ">=" ;
addExpr ::= mulExpr (ADDITION mulExpr)* ;
LPAR ::= "{" ;
COMMA ::= "," ;
conjBool ::= boolExpr (CONJUNCTION boolExpr)* ;
expExpr ::= atom (EXPONENTION atom)* ;
RPAR ::= "}" ;
SEMI ::= ";" ;
DIVISION ::= "/" ;
NONEQUALITY ::= "!=" ;
QUESTION ::= "?" ;
divExpr ::= expExpr (DIVISION expExpr)* ;
disjBool ::= conjBool (DISJUNCTION conjBool)* ;
applyProc ::= VARANDPROCID OPAR subExprList CPAR ;
assignStat ::= VARANDPROCID DEFINEDAS arithmeticExpression ;
INTVALUE ::= ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
arithmeticExpression ::= disjBool (QUESTION arithmeticExpression COLON arithmeticExpression)? ;
DOUBLEVALUE ::= INTVALUE? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" | "E" ("+" | "-")? INTVALUE)? ;
CONTAINS ::= "contains" ;
constDec ::= c::CONSTID COLON number DEFINEDAS arithmeticExpression ;
CONSTID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
CPAR ::= ")" ;
THEN ::= "then" ;
IF ::= "if" ;
WS ::= ("\t" | "|" | "\n" | "\r" | " " | "\f")+ ;
DEFINEDAS ::= ":=" ;
varDec ::= v::VARANDPROCID COLON number ;
INTKEYWORD ::= "int" ;
EXPONENTION ::= "**" ;
mulExpr ::= divExpr (MULTIPLICATION divExpr)* ;
DOUBLEKEYWORD ::= "double" ;
loopStat ::= WHILE boolExpr DO stat ;
progTree ::= TROLLEY CONSTID CONTAINS declarations* CHECKOUT stat DONE SEMI ;
LESSTHANOREQUAL ::= "<=" ;
PROC ::= "proc" ;
subExpr ::= addExpr (SUBTRACTION addExpr)* ;
SUBTRACTION ::= "-" ;
subExprList ::= arithmeticExpression (COMMA arithmeticExpression)* ;
OPAR ::= "(" ;
WHILE ::= "while" ;
procDec ::= p::VARANDPROCID OPAR paramList? CPAR COLON number DEFINEDAS stat ;
DO ::= "do" ;
paramList ::= varDec (COMMA varDec)* ;
VAR ::= "var" ;
MULTIPLICATION ::= "*" ;
CHECKOUT ::= "checkout" ;
TROLLEY ::= "trolley" ;
CONST ::= "const" ;
DISJUNCTION ::= "\\/" ;
DONE ::= "done" ;
VARANDPROCID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
--------------------tescol::10000.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
SKIP ::= "skip" ;
COLON_EQUALS ::= ":=" ;
COLON ::= ":" ;
boolExpr ::= andExpr (DISJUNCTION andExpr)* ;
ADDITION ::= "+" ;
EQUALITY ::= "==" ;
INT_NUMBER ::= ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
ELSE ::= "else" ;
DOUBLE_NUMBER ::= ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" | "E" INT_NUMBER)? ;
condExpr ::= boolExpr (QUESTION condExpr COLON condExpr)? ;
CONJUNCTION ::= "/\\" ;
COMMA ::= "," ;
NEWLINE ::= "\r"? "\n" ;
GREATER_EQUAL ::= ">=" ;
LESS_EQUAL ::= "<=" ;
SEMI ::= ";" ;
DIVISION ::= "/" ;
andExpr ::= compExpr (CONJUNCTION compExpr)* ;
QUESTION ::= "?" ;
compExpr ::= expr (GREATER_EQUAL | LESS_EQUAL | EQUALITY | NON_EQUALITY | GREATER | LESS expr)? ;
multStat ::= LBRACE NEWLINE* stat (SEMI NEWLINE* stat)* NEWLINE* RBRACE SEMI ;
CONTAINS ::= "contains" ;
CID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
LPAREN ::= "(" ;
THEN ::= "then" ;
IF ::= "if" ;
WS ::= (" " | "\t" | "\r" | "\n")+ ;
ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
EXPONENTIATION ::= "**" ;
GREATER ::= ">" ;
LESS ::= "<" ;
RPAREN ::= ")" ;
PROC ::= "proc" ;
SUBTRACTION ::= "-" ;
DOUBLE ::= "double" ;
WHILE ::= "while" ;
INT ::= "int" ;
NON_EQUALITY ::= "!=" ;
DO ::= "do" ;
LBRACE ::= "{" ;
VAR ::= "var" ;
expoExpr ::= atom EXPONENTIATION? ;
CHECKOUT ::= "checkout" ;
MULTIPLICATION ::= "*" ;
TROLLEY ::= "trolley" ;
multExpr ::= expoExpr (MULTIPLICATION | DIVISION expoExpr)* ;
CONST ::= "const" ;
DONE ::= "done" ;
DISJUNCTION ::= "\\/" ;
RBRACE ::= "}" ;
--------------------tescol::10001.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
SKIP ::= "skip" ;
COLON_EQUALS ::= ":=" ;
COLON ::= ":" ;
boolExpr ::= andExpr (DISJUNCTION andExpr)* ;
ADDITION ::= "+" ;
EQUALITY ::= "==" ;
INT_NUMBER ::= ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
ELSE ::= "else" ;
PROCBODY ::= "procbody" ;
DOUBLE_NUMBER ::= INT_NUMBER? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" INT_NUMBER)? ;
condExpr ::= boolExpr (QUESTION condExpr COLON condExpr)? ;
CONJUNCTION ::= "/\\" ;
COMMA ::= "," ;
GREATER_EQUAL ::= ">=" ;
SEMI ::= ";" ;
LESS_EQUAL ::= "<=" ;
CIDENT ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
DIVISION ::= "/" ;
andExpr ::= compExpr (CONJUNCTION compExpr)* ;
QUESTION ::= "?" ;
compExpr ::= expr (GREATER_EQUAL | LESS_EQUAL | EQUALITY | NON_EQUALITY | LESS | GREATER expr)? ;
CONTAINS ::= "contains" ;
LPAREN ::= "(" ;
CALL ::= "call" ;
THEN ::= "then" ;
IF ::= "if" ;
WS ::= (" " | "\t" | "\r" | "\n")+ ;
EXPONENTIATION ::= "**" ;
ID ::= "id" ;
GREATER ::= ">" ;
LESS ::= "<" ;
RPAREN ::= ")" ;
PROC ::= "proc" ;
SUBTRACTION ::= "-" ;
ARGLIST ::= "arglist" ;
DOUBLE ::= "double" ;
WHILE ::= "while" ;
IDENT ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
INT ::= "int" ;
NON_EQUALITY ::= "!=" ;
DO ::= "do" ;
LBRACE ::= "{" ;
VAR ::= "var" ;
CHECKOUT ::= "checkout" ;
MULTIPLICATION ::= "*" ;
TROLLEY ::= "trolley" ;
multExpr ::= atom (MULTIPLICATION | DIVISION | EXPONENTIATION atom)* ;
CONST ::= "const" ;
DONE ::= "done" ;
DISJUNCTION ::= "\\/" ;
RBRACE ::= "}" ;
--------------------tescol::10010.bgf--------------------
COLON ::= ":" ;
SKIP ::= "skip" ;
conditionalExpression ::= booleanExpression (QUESTION conditional COLON conditional)? ;
procedureApplication ::= arithmetic (ID LPAREN expressionList RPAREN)? ;
LESSTHAN ::= "<" ;
DIVIDE ::= "/" ;
ELSE ::= "else" ;
MORETHAN ::= ">" ;
COMMA ::= "," ;
DISJUNC ::= "\\/" ;
SEMI ::= ";" ;
arithmeticOperator ::= ADD | SUBTRACT | DIVIDE | MULTIPLY | EXPON ;
statementList ::= CLPAREN statement SEMI (statement SEMI)* CRPAREN ;
relationalOperator ::= EQUAL | NOTEQUAL | MORETHAN | LESSTHAN | MORETHANEQUAL | LESSTHANEQUAL ;
CMT ::= "/*" α* "*/" ;
parameterList ::= ID COLON type (COMMA ID COLON type)* ;
QUESTION ::= "?" ;
DEF ::= ":=" ;
MULTIPLY ::= "*" ;
CONJUNC ::= "/\\" ;
arithmeticExpression ::= procedureApplication (conditionalExpression QUESTION arithmeticExpression COLON arithmeticExpression)? ;
CLPAREN ::= "{" ;
conjExpression ::= disjExpression (DISJUNC disjExpression)* ;
booleanExpression ::= conjExpression (CONJUNC conjExpression)* ;
CONTAINS ::= "contains" ;
MORETHANEQUAL ::= ">=" ;
LPAREN ::= "(" ;
IF ::= "if" ;
THEN ::= "then" ;
EXPON ::= "**" ;
WS ::= (" " | "\t" | "\r" | "\n")+ ;
ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
CRPAREN ::= "}" ;
LESSTHANEQUAL ::= "<=" ;
INTKEYWORD ::= "int" ;
RPAREN ::= ")" ;
DOUBLEKEYWORD ::= "double" ;
PROC ::= "proc" ;
expressionList ::= arithmeticExpression (COMMA arithmeticExpression)* ;
EQUAL ::= "==" ;
SUBTRACT ::= "-" ;
disjExpression ::= expression (relationalOperator expression)? ;
DOUBLE ::= INT? "." (("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")*) | ("e" | "E" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+) ;
WHILE ::= "while" ;
INT ::= ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
DO ::= "do" ;
VAR ::= "var" ;
CHECKOUT ::= "checkout" ;
TROLLEY ::= "trolley" ;
CONST ::= "const" ;
DONE ::= "done" ;
NOTEQUAL ::= "!=" ;
ADD ::= "+" ;
--------------------tescol::10011.bgf--------------------
COLON ::= ":" ;
SKIP ::= "skip" ;
VARIABLE ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
NEQ ::= "!=" ;
ELSE ::= "else" ;
DISJUN ::= "\\/" ;
COMMA ::= "," ;
LPAR ::= "(" ;
DIV ::= "/" ;
RCPAR ::= "}" ;
MULT ::= "*" ;
RPAR ::= ")" ;
SEMI ::= ";" ;
EQ ::= "==" ;
LCPAR ::= "{" ;
CONSTANT ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
CONTAINS ::= "contains" ;
INTEGER ::= "int" ;
THEN ::= "then" ;
IF ::= "if" ;
EXPON ::= "**" ;
QM ::= "?" ;
PLUS ::= "+" ;
LESS ::= "<" ;
DEFAS ::= ":=" ;
PROC ::= "proc" ;
MORE ::= ">" ;
WHILE ::= "while" ;
DUB ::= INT? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" | "E" INT)? ;
DOUBLE ::= "double" ;
MINUS ::= "-" ;
INT ::= "0" | ("1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")*) ;
DO ::= "do" ;
VAR ::= "var" ;
CHECKOUT ::= "checkout" ;
LESSEQ ::= "<=" ;
multExpr ::= expon (MULT | DIV expon)* ;
TROLLEY ::= "trolley" ;
CONST ::= "const" ;
DONE ::= "done" ;
CONJUN ::= "/\\" ;
MOREEQ ::= ">=" ;
--------------------tescol::10100.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
SKIP ::= "skip" ;
COLON ::= ":" ;
COLON_EQUALS ::= ":=" ;
ADDITION ::= "+" ;
EQUALITY ::= "==" ;
INT_NUMBER ::= ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
ELSE ::= "else" ;
DOUBLE_NUMBER ::= ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" | "E" INT_NUMBER)? ;
CONJUNCTION ::= "/\\" ;
COMMA ::= "," ;
NEWLINE ::= "\r"? "\n" ;
GREATER_EQUAL ::= ">=" ;
LESS_EQUAL ::= "<=" ;
SEMI ::= ";" ;
DIVISION ::= "/" ;
condStatement ::= IF expression THEN statement ELSE statement ;
statementList ::= LBRACE statement (SEMI statement NEWLINE*)* RBRACE ;
multExpression ::= atom (DIVISION | MULTIPLICATION | EXPONENTIATION atom)* ;
QUESTION ::= "?" ;
CONTAINS ::= "contains" ;
relationalExpression ::= addExpression (GREATER_EQUAL | GREATER | LESS_EQUAL | LESS | EQUALITY | NON_EQUALITY addExpression)? ;
CID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
LPAREN ::= "(" ;
THEN ::= "then" ;
IF ::= "if" ;
WS ::= (" " | "\t" | "\r" | "\n")+ ;
ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
EXPONENTIATION ::= "**" ;
orExpression ::= relationalExpression (DISJUNCTION relationalExpression)* ;
GREATER ::= ">" ;
LESS ::= "<" ;
addExpression ::= multExpression (ADDITION | SUBTRACTION multExpression)* ;
RPAREN ::= ")" ;
PROC ::= "proc" ;
SUBTRACTION ::= "-" ;
individual_declaration ::= (CONST CID COLON type COLON_EQUALS expression) | (VAR ID COLON type) | (PROC ID paramlist COLON type COLON_EQUALS statement) ;
DOUBLE ::= "double" ;
WHILE ::= "while" ;
INT ::= "int" ;
andExpression ::= orExpression (CONJUNCTION orExpression)* ;
NON_EQUALITY ::= "!=" ;
DO ::= "do" ;
LBRACE ::= "{" ;
VAR ::= "var" ;
CHECKOUT ::= "checkout" ;
MULTIPLICATION ::= "*" ;
TROLLEY ::= "trolley" ;
CONST ::= "const" ;
DONE ::= "done" ;
DISJUNCTION ::= "\\/" ;
RBRACE ::= "}" ;
--------------------tescol::10101.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
CONSTANTID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
SKIP ::= "skip" ;
COLON ::= ":" ;
boolExpr ::= andExpr (DISJUNCTION andExpr)* ;
VARIABLE ::= "var" ;
FLOAT ::= "double" ;
ADDITION ::= "+" ;
GREATEREQUAL ::= ">=" ;
EQUALITY ::= "==" ;
ELSE ::= "else" ;
MIXFIX ::= "?" ;
condExpr ::= boolExpr (MIXFIX condExpr COLON condExpr)? ;
CONJUNCTION ::= "/\\" ;
COMMA ::= "," ;
PARENOPEN ::= "(" ;
PROCEDURE ::= "proc" ;
DECIMAL ::= "." ;
ASSIGN ::= ":=" ;
PARENCLOSE ::= ")" ;
SEMI ::= ";" ;
DIVISION ::= "/" ;
andExpr ::= compExpr (CONJUNCTION compExpr)* ;
FLOATINGPOINT ::= INTEGER? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ("e" | "E" (ADDITION | SUBTRACTION)* INTEGER)? ;
STATEMENTCLOSE ::= "}" ;
NONEQUALITY ::= "!=" ;
CONSTANT ::= "const" ;
compExpr ::= expr (GREATEREQUAL | LESSEQUAL | GREATER | LESS | EQUALITY | NONEQUALITY expr)* ;
CONTAINS ::= "contains" ;
INTEGER ::= ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
THEN ::= "then" ;
IF ::= "if" ;
WS ::= (" " | "\t" | "\r" | "\n")+ ;
ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "_" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
LESSEQUAL ::= "<=" ;
EXPONENTIATION ::= "**" ;
GREATER ::= ">" ;
LESS ::= "<" ;
STATEMENTOPEN ::= "{" ;
SUBTRACTION ::= "-" ;
WHILE ::= "while" ;
procedureList ::= ID PARENOPEN id1::condExpr (COMMA id2::condExpr)* PARENCLOSE ;
exponExpr ::= unaryneg EXPONENTIATION* ;
INT ::= "int" ;
DO ::= "do" ;
CHECKOUT ::= "checkout" ;
MULTIPLICATION ::= "*" ;
TROLLEY ::= "trolley" ;
multExpr ::= exponExpr (MULTIPLICATION | DIVISION exponExpr)* ;
DONE ::= "done" ;
DISJUNCTION ::= "\\/" ;
--------------------tescol::10110.bgf--------------------
boolExpr ::= andExpr (DISJ andExpr)* ;
COLON ::= ":" ;
SKIP ::= "skip" ;
COMMENT ::= "/*" α* "*/" ;
CURLY_L ::= "{" ;
EQUALITY ::= "==" ;
ELSE ::= "else" ;
DIVIDE ::= "/" ;
condExpr ::= boolExpr (QUESTION condExpr COLON condExpr)? ;
LPAR ::= "(" ;
COMMA ::= "," ;
cond_expr ::= QUESTION boolExpr QUESTION expr COLON expr ;
RPAR ::= ")" ;
EXPONENT ::= "e" | "E" ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
SEMI ::= ";" ;
andExpr ::= compExpr (CONJ compExpr)* ;
CONJ ::= "/\\" ;
QUESTION ::= "?" ;
GREATER_THAN ::= ">" ;
GREATER_THAN_EQ ::= ">=" ;
compExpr ::= expr (comparator expr)? ;
MULTIPLY ::= "*" ;
LESS_THAN_EQ ::= "<=" ;
procedure_expr ::= identifier LPAR expr (COMMA expr)* RPAR ;
CONTAINS ::= "contains" ;
CID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
expr2 ::= multExpr (ADD | SUBTRACT multExpr)* ;
THEN ::= "then" ;
IF ::= "if" ;
EOF ::= ε ;
WS ::= (" " | "\t" | "\r" | "\n" | "\f")+ ;
DISJ ::= "\\/" ;
ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
EXPONENTIATION ::= MULTIPLY "*" ;
powerExpr ::= atom (EXPONENTIATION atom)* ;
PROC ::= "proc" ;
EQUAL ::= "=" ;
SUBTRACT ::= "-" ;
KEY_DOUBLE ::= "double" ;
WHILE ::= "while" ;
DOUBLE ::= (INT "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* EXPONENT?) | ("." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ EXPONENT?) | (INT EXPONENT) | "." ;
INT ::= ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
KEY_INT ::= "int" ;
NON_EQUALITY ::= "!=" ;
DO ::= "do" ;
DEFINED_AS ::= ":=" ;
VAR ::= "var" ;
LESS_THAN ::= "<" ;
CHECKOUT ::= "checkout" ;
multExpr ::= powerExpr (MULTIPLY | DIVIDE powerExpr)* ;
TROLLEY ::= "trolley" ;
CONST ::= "const" ;
DONE ::= "done" ;
ADD ::= "+" ;
CURLY_R ::= "}" ;
--------------------tescol::10111.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
KW_DO ::= "do" ;
KW_WHILE ::= "while" ;
div_subterm ::= molecule (SYM_DIV molecule)* ;
KW_TYPE_INT ::= "int" ;
SYM_OR ::= "\\/" ;
ID_VARPROC ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "_" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
KW_CHECKOUT ::= "checkout" ;
SYM_OPEN_BRACE ::= "{" ;
KW_DONE ::= "done" ;
doubleNum ::= (SYM_ADD | SYM_SUB)? DOUBLE ;
SYM_QM ::= "?" ;
KW_VAR ::= "var" ;
proc_decl ::= KW_PROC id::varproc_id param_decl_list SYM_COLON type SYM_ASS statement ;
KW_TROLLEY ::= "trolley" ;
KW_SKIP ::= "skip" ;
KW_CONST ::= "const" ;
EXPONENT ::= "e" | "E" (SYM_ADD | SYM_SUB)? INT ;
pred_base ::= expr (comparator expr)* ;
KW_ELSE ::= "else" ;
SYM_CLOSE_PAREN ::= ")" ;
SYM_NS_LT ::= "<=" ;
subtraction_subexpr ::= term (SYM_SUB term)* ;
SYM_INEQ ::= "!=" ;
SYM_ADD ::= "+" ;
integerNum ::= (SYM_ADD | SYM_SUB)? INT ;
SYM_COLON ::= ":" ;
proc_call ::= id::varproc_id l::arg_list ;
arg_list ::= SYM_OPEN_PAREN (expr (SYM_COMMA expr)*)? SYM_CLOSE_PAREN ;
SYM_EXP ::= "**" ;
ID_GENERAL ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "_" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
KW_TYPE_DOUBLE ::= "double" ;
param_decl_list ::= SYM_OPEN_PAREN (param_and_type (SYM_COMMA param_and_type)*)? SYM_CLOSE_PAREN ;
SYM_LT ::= "<" ;
SYM_AND ::= "/\\" ;
SYM_COMMA ::= "," ;
varproc_id ::= ID_VARPROC | ID_GENERAL ;
WS ::= (" " | "\t" | "\r" | "\n")+ ;
SYM_DIV ::= "/" ;
SYM_CLOSE_BRACE ::= "}" ;
param_and_type ::= varproc_id SYM_COLON type ;
KW_CONTAINS ::= "contains" ;
DOUBLE ::= INT? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* EXPONENT? ;
KW_THEN ::= "then" ;
KW_IF ::= "if" ;
SYM_NS_GT ::= ">=" ;
INT ::= ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
SYM_OPEN_PAREN ::= "(" ;
pred_term ::= pred_base (SYM_AND pred_base)* ;
SYM_ASS ::= ":=" ;
KW_PROC ::= "proc" ;
SYM_MULT ::= "*" ;
SYM_SUB ::= "-" ;
SYM_SEMI ::= ";" ;
const_decl ::= KW_CONST id::ID_GENERAL SYM_COLON t::type SYM_ASS e::expr ;
SYM_GT ::= ">" ;
SYM_EQ ::= "==" ;
var_decl ::= KW_VAR id::varproc_id SYM_COLON t::type (SYM_ASS expr)? ;
--------------------tescol::11000.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
SKIP ::= "skip" ;
COLON ::= ":" ;
ADDITION ::= "+" ;
VARIABLE ::= "var" ;
GREATERTHAN ::= ">" ;
DEFINE ::= ":=" ;
LESSTHAN ::= "<" ;
EQUALITY ::= "==" ;
ELSE ::= "else" ;
GREATEROREQUAL ::= ">=" ;
AND ::= "/\\" ;
COMMA ::= "," ;
CURLYLEFT ::= "{" ;
PROCEDURE ::= "proc" ;
EXPONENT ::= "e" | "E" "+" | "-" INT ;
CURLYRIGHT ::= "}" ;
SEMI ::= ";" ;
DIVISION ::= "\\" ;
DOU ::= INT? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* EXPONENT? ;
NONEQUALITY ::= "!=" ;
QUESTION ::= "?" ;
CONSTANT ::= "const" ;
OR ::= "\\/" ;
LEFTBRACKET ::= "(" ;
CONTAINS ::= "contains" ;
CID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "_" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
INTEGER ::= "int" ;
THEN ::= "then" ;
IF ::= "if" ;
WS ::= (" " | "\t" | "\r" | "\n")+ ;
ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "_" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
EXPONENTIATION ::= "**" ;
LESSOREQUAL ::= "<=" ;
SUBTRACTION ::= "-" ;
WHILE ::= "while" ;
DOUBLE ::= "double" ;
INT ::= ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
RIGHTBRACKET ::= ")" ;
DO ::= "do" ;
MULTIPLICATION ::= "*" ;
CHECKOUT ::= "checkout" ;
TROLLEY ::= "trolley" ;
DONE ::= "done" ;
--------------------tescol::11001.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
SKIP ::= "skip" ;
COLON ::= ":" ;
EQUALS ::= "=" ;
EXP ::= "**" ;
FLOAT ::= INT? "." UINT? EXPONENT? ;
TINT ::= "int" ;
exp_exp ::= l::atom_exp (EXP r::atom_exp)* ;
EQUALITY ::= EQUALS EQUALS ;
ELSE ::= "else" ;
BANG ::= "!" ;
AND ::= "/\\" ;
COMMA ::= "," ;
EXPONENT ::= "e" | "E" INT ;
atom_exp ::= (e::unary_exp) | (LPAREN exp::expression RPAREN) | (proc::proccall) ;
SEMI ::= ";" ;
GTEQUALS ::= RANGLE EQUALS ;
LANGLE ::= "<" ;
QUESTION ::= "?" ;
TDOUBLE ::= "double" ;
MUL ::= "*" ;
OR ::= "\\/" ;
VARID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
RANGLE ::= ">" ;
INEQUALITY ::= BANG EQUALS ;
CONTAINS ::= "contains" ;
CONSTID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
LPAREN ::= "(" ;
THEN ::= "then" ;
IF ::= "if" ;
WS ::= (" " | "\t" | "\r" | "\n")+ ;
DEFINEDAS ::= COLON EQUALS ;
UINT ::= ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
PLUS ::= "+" ;
addition_exp ::= l::multiply_exp ((o::PLUS) | (o::MINUS) r::multiply_exp)* ;
RPAREN ::= ")" ;
FSLASH ::= "/" ;
PROC ::= "proc" ;
WHILE ::= "while" ;
MINUS ::= "-" ;
INT ::= ("+" | "-")? UINT ;
unary_exp ::= MINUS? (num::number) | (var::id) ;
DO ::= "do" ;
VAR ::= "var" ;
LBRACE ::= "{" ;
LTEQUALS ::= LANGLE EQUALS ;
CHECKOUT ::= "checkout" ;
TROLLEY ::= "trolley" ;
CONST ::= "const" ;
DONE ::= "done" ;
multiply_exp ::= l::exp_exp ((o::MUL) | (o::FSLASH) r::exp_exp)* ;
RBRACE ::= "}" ;
--------------------tescol::11010.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
boolExpr ::= andExpr (DISJUNCTION andExpr)* ;
COLON ::= ":" ;
SKIP ::= "skip" ;
LESSTHAN ::= "<" ;
EQUALITY ::= "==" ;
conditionalStat ::= IF boolExpr THEN stat ELSE stat ;
ELSE ::= "else" ;
DIVIDE ::= "/" ;
condExpr ::= boolExpr (QUESTION condExpr COLON condExpr)? ;
CONJUNCTION ::= "/\\" ;
MORETHAN ::= ">" ;
addExpr ::= mulExpr (PLUS mulExpr)* ;
COMMA ::= "," ;
exprList ::= compExpr (COMMA compExpr)* ;
expExpr ::= atom (EXPONENTIATION atom)* ;
EXPONENT ::= "e" | "E" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
SEMI ::= ";" ;
LEFTBRACE ::= "{" ;
andExpr ::= compExpr (CONJUNCTION compExpr)* ;
QUESTION ::= "?" ;
divExpr ::= expExpr (DIVIDE expExpr)* ;
MULTIPLY ::= "*" ;
applyProc ::= smallId LEFTPAR exprList RIGHTPAR ;
compExpr ::= subExpr (EQUALITY | NOTEQUAL | LESSTHAN | LESSTHANEQUAL | MORETHAN | MORETHANEQUAL subExpr)? ;
assignStat ::= smallId DEFINEDAS condExpr ;
CONTAINS ::= "contains" ;
constDec ::= CONSTID COLON type DEFINEDAS subExpr ;
CONSTID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
MORETHANEQUAL ::= ">=" ;
INTEGER ::= "int" ;
THEN ::= "then" ;
IF ::= "if" ;
WS ::= (" " | "\t" | "\r" | "\n")+ ;
ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
EXPONENTIATION ::= "**" ;
DEFINEDAS ::= ":=" ;
varDec ::= v1::smallId COLON type ;
LESSTHANEQUAL ::= "<=" ;
PLUS ::= "+" ;
LEFTPAR ::= "(" ;
mulExpr ::= divExpr (MULTIPLY divExpr)* ;
loopStat ::= WHILE boolExpr DO stat ;
progTree ::= TROLLEY CONSTID CONTAINS declarations* CHECKOUT stat DONE SEMI ;
RIGHTBRACE ::= "}" ;
PROC ::= "proc" ;
subExpr ::= addExpr (MINUS addExpr)* ;
WHILE ::= "while" ;
DOUBLE ::= ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" | "E" INT)? ;
MINUS ::= "-" ;
INT ::= ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
FLOATDOUBLE ::= "double" ;
procDec ::= p1::smallId LEFTPAR paramList RIGHTPAR COLON type DEFINEDAS stat ;
DO ::= "do" ;
paramList ::= varDec (COMMA varDec)* ;
VAR ::= "var" ;
CHECKOUT ::= "checkout" ;
RIGHTPAR ::= ")" ;
TROLLEY ::= "trolley" ;
CONST ::= "const" ;
DISJUNCTION ::= "\\/" ;
DONE ::= "done" ;
smallId ::= CONSTID | ID ;
NOTEQUAL ::= "!=" ;
--------------------tescol::11011.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
COLON ::= ":" ;
SKIP ::= "skip" ;
dec_types ::= TYPE_INT | TYPE_DOUBLE ;
exp_exp ::= atom (ARITH_EXP atom)* ;
COND_COMP_GREAT ::= "<" ;
ELSE ::= "else" ;
COND_EQUAL ::= "==" ;
TYPE_DOUBLE ::= "double" ;
LPAR ::= "(" ;
COMMA ::= "," ;
exp_and ::= exp_comp (CONJ exp_comp)* ;
dec_proc ::= PROC ID LPAR param_list COLON dec_types DEFAS statement SEMI ;
RCB ::= "}" ;
exp_comp ::= exp_addsub (COND_COMP_GREATE | COND_COMP_GREAT | COND_COMP_LESS | COND_COMP_LESSE | COND_EQUAL | COND_NONEQUAL exp_addsub)? ;
RPAR ::= ")" ;
statement_group ::= LCB statement (SEMI statement)* RCB ;
ARITH_ADD ::= "+" ;
SEMI ::= ";" ;
COND_COMP_LESS ::= ">" ;
LCB ::= "{" ;
ARITH_EXP ::= "**" ;
dec_var ::= VAR ids COLON dec_types SEMI ;
CONJ ::= "/\\" ;
exp_bools ::= exp_and (DISJ exp_and)* ;
dec_const ::= CONST CONST_ID COLON dec_types DEFAS expr SEMI ;
exp_addsub ::= exp_multi (ARITH_ADD | ARITH_SUB exp_multi)* ;
argument_list ::= LPAR (expr (COMMA expr)*)? RPAR ;
CONTAINS ::= "contains" ;
ARITH_DIV ::= "/" ;
QMARK ::= "?" ;
THEN ::= "then" ;
IF ::= "if" ;
WS ::= (" " | "\t" | "\r" | "\n")+ ;
DISJ ::= "\\/" ;
ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
COND_COMP_LESSE ::= ">=" ;
CONST_ID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "_" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ;
DEFAS ::= ":=" ;
exp_multi ::= exp_exp (ARITH_MUL | ARITH_DIV exp_exp)* ;
PROC ::= "proc" ;
ARITH_MUL ::= "*" ;
DOUBLE ::= ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+)? ;
WHILE ::= "while" ;
param_list ::= param_element? (COMMA param_element)* ;
INT ::= ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
ARITH_SUB ::= "-" ;
COND_COMP_GREATE ::= "<=" ;
DO ::= "do" ;
param_element ::= ID COLON dec_types ;
TYPE_INT ::= "int" ;
VAR ::= "var" ;
CHECKOUT ::= "checkout" ;
TROLLEY ::= "trolley" ;
COND_NONEQUAL ::= "!=" ;
CONST ::= "const" ;
DONE ::= "done" ;
--------------------tescol::11100.bgf--------------------
SKIP ::= "skip" ;
COLON ::= ":" ;
COMMENT ::= "/*" α* "*/" ;
ELSE ::= "else" ;
COMMA ::= "," ;
SEMI ::= ";" ;
LEFTBRACE ::= "{" ;
LEFTBRACKET ::= "(" ;
CONTAINS ::= "contains" ;
CONSTID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
QMARK ::= "?" ;
THEN ::= "then" ;
IF ::= "if" ;
WS ::= (" " | "\t" | "\r" | "\n")+ ;
ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
PLUS ::= "+" ;
RIGHTBRACE ::= "}" ;
PROC ::= "proc" ;
DOUBLE ::= INT? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" | "E" INT)? ;
WHILE ::= "while" ;
MINUS ::= "-" ;
INT ::= ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
BOOLOPERATOR ::= "/\\" | "\\/" ;
TRUE ::= "true" ;
ASSIGNMENT ::= ":=" ;
RIGHTBRACKET ::= ")" ;
DOUBLETYPE ::= "double" ;
DO ::= "do" ;
COMPARISON ::= "==" | "!=" | "<=" | ">=" | "<" | ">" ;
INTTYPE ::= "int" ;
VAR ::= "var" ;
CHECKOUT ::= "checkout" ;
TROLLEY ::= "trolley" ;
FALSE ::= "false" ;
CONST ::= "const" ;
DONE ::= "done" ;
MULTIPLIER ::= "**" | "/" | "*" ;
--------------------tescol::11101.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
SKIP ::= "skip" ;
COLON ::= ":" ;
ADDITION ::= "+" ;
ELSE ::= "else" ;
VARPROCID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
DBLE ::= "double" ;
CONJUNCTION ::= "/\\" ;
COMMA ::= "," ;
ROP ::= "==" | "!=" | "<" | "<=" | ">=" | ">" ;
EXPONENT ::= "e" | "E" INTEGER ;
SEMI ::= ";" ;
DIVISION ::= "/" ;
DEFINED ::= ":=" ;
QUESTION ::= "?" ;
CONTAINS ::= "contains" ;
CONSTID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
INTEGER ::= ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
THEN ::= "then" ;
IF ::= "if" ;
WS ::= (" " | "\t" | "\r" | "\n")+ ;
PARENTHESISR ::= ")" ;
EXPONENTIATION ::= "**" ;
PARENTHESISL ::= "(" ;
PROC ::= "proc" ;
SUBTRACTION ::= "-" ;
DOUBLE ::= INTEGER? "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* EXPONENT? ;
WHILE ::= "while" ;
INT ::= "int" ;
DO ::= "do" ;
BRACKETR ::= "}" ;
VAR ::= "var" ;
MULTIPLICATION ::= "*" ;
CHECKOUT ::= "checkout" ;
TROLLEY ::= "trolley" ;
BRACKETL ::= "{" ;
CONST ::= "const" ;
DONE ::= "done" ;
DISJUNCTION ::= "\\/" ;
--------------------tescol::11110.bgf--------------------
SKIP ::= "skip" ;
ADDITION ::= "+" ;
EQUALITY ::= "==" ;
listofStatement ::= "{" singleStatement (SEMI s::singleStatement)+ "}" ;
COMMENTS ::= "/*" α* "*/" ;
GREATER_EQUAL ::= ">=" ;
SEMI ::= ";" ;
LESS_EQUAL ::= "<=" ;
loopStm ::= WHILE LPAREN? e::booleanExpr RPAREN? DO? s::statement ;
parameterList ::= parameterElement ("," parameterElement)* ;
compilationUnit ::= TROLLEY CONSTID CONTAINS de::declarations CHECKOUT s::statement SEMI DONE SEMI ;
QUESTION ::= "?" ;
WS ::= (" " | "\t" | "\n" | "\r")+ ;
GREATER ::= ">" ;
RPAREN ::= ")" ;
PROC ::= "proc" ;
expressionList ::= arithmeticExpr ("," arithmeticExpr)* ;
SUBTRACTION ::= "-" ;
varDeclaration ::= VAR ID COLON t::type SEMI ;
DOUBLE ::= "double" ;
INT ::= "int" ;
NON_EQUALITY ::= "!=" ;
LBRACE ::= "{" ;
CHECKOUT ::= "checkout" ;
assgStm ::= ID COLON_EQUALS a1::arithmeticExpr ;
multExpr ::= unaryExpr (MULTIPLICATION | DIVISION | EXPONENTIATION unaryExpr)* ;
TROLLEY ::= "trolley" ;
unaryExpr ::= ("-" atom) | atom ;
CONST ::= "const" ;
DISJUNCTION ::= "\\/" ;
COLON_EQUALS ::= ":=" ;
COLON ::= ":" ;
arithmeticExpr ::= conditionalExpr | (a::applyProcedure) ;
booleanExpr ::= conjunctionExpression (DISJUNCTION conjunctionExpression)* ;
FLOAT ::= ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* "." ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ("e" | "E" ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+)? ;
ELSE ::= "else" ;
CONJUNCTION ::= "/\\" ;
COMMA ::= "," ;
equalityExpression ::= relationalExpression (EQUALITY | NON_EQUALITY relationalExpression)? ;
DIVISION ::= "/" ;
skipStm ::= SKIP ;
condStm ::= IF LPAREN? a::booleanExpr RPAREN? THEN? b::statement (ELSE c::statement)? ;
CONTAINS ::= "contains" ;
relationalExpression ::= addtExpr (LESS_EQUAL | GREATER_EQUAL | LESS | GREATER addtExpr)? ;
INTEGER ::= ("+" | "-")? "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")* ;
CONSTID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
LPAREN ::= "(" ;
THEN ::= "then" ;
IF ::= "if" ;
ID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
EXPONENTIATION ::= "**" ;
conditionalExpr ::= booleanExpr (QUESTION conditionalExpr COLON conditionalExpr)? ;
LESS ::= "<" ;
constDeclaration ::= CONST CONSTID COLON t::type COLON_EQUALS ar::arithmeticExpr SEMI ;
parameterElement ::= id::ID COLON t::type ;
WHILE ::= "while" ;
conjunctionExpression ::= equalityExpression (CONJUNCTION equalityExpression)* ;
proDeclaration ::= PROC ID LPAREN p1::parameterList RPAREN COLON t::type COLON_EQUALS s1::statement SEMI ;
DO ::= "do" ;
addtExpr ::= multExpr (ADDITION | SUBTRACTION multExpr)* ;
VAR ::= "var" ;
singleStatement ::= skipStm | loopStm | condStm | (a::assgStm) ;
MULTIPLICATION ::= "*" ;
applyProcedure ::= ID LPAREN expressionList RPAREN ;
DONE ::= "done" ;
RBRACE ::= "}" ;
--------------------tescol::11111.bgf--------------------
COMMENT ::= "/*" α* "*/" ;
COLON ::= ":" ;
SKIP ::= "skip" ;
ADDITION ::= "+" ;
INT_NUMBER ::= ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+ ;
ELSE ::= "else" ;
MIXFIX ::= "?" ;
relational_op ::= EQUAL | NONEQUAL | GREATER | GREATER_EQUAL | LESS | LESS_EQUAL ;
single_statement ::= SKIP | assignment | conditional | loop ;
DOUBLE_NUMBER ::= (("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+)? "." (("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+)? ("e" | "E" ("+" | "-")? ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")+)? ;
variable_declaration ::= VAR id COLON type SEMI ;
CONJUNCTION ::= "/\\" ;
COMMA ::= "," ;
NEWLINE ::= "\r"? "\n" ;
GREATER_EQUAL ::= ">=" ;
ASSIGN ::= ":=" ;
SEMI ::= ";" ;
LESS_EQUAL ::= "<=" ;
DIVISION ::= "/" ;
VARID ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
CONTAINS ::= "contains" ;
constant_declaration ::= CONST CONSTID COLON type ASSIGN expression SEMI ;
CONSTID ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ("A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "_")* ;
LPAREN ::= "(" ;
THEN ::= "then" ;
IF ::= "if" ;
WS ::= (" " | "\t" | "\r" | "\n")+ ;
EXPONENTIATION ::= "**" ;
GREATER ::= ">" ;
LESS ::= "<" ;
RPAREN ::= ")" ;
PROC ::= "proc" ;
EQUAL ::= "==" ;
SUBTRACTION ::= "-" ;
WHILE ::= "while" ;
DOUBLE ::= "double" ;
param_list ::= (id COLON type (COMMA id COLON type)*)? ;
INT ::= "int" ;
procedure_declaration ::= PROC id LPAREN param_list RPAREN COLON type ASSIGN statement SEMI ;
DO ::= "do" ;
VAR ::= "var" ;
NONEQUAL ::= "!=" ;
LBRACE ::= "{" ;
CHECKOUT ::= "checkout" ;
MULTIPLICATION ::= "*" ;
TROLLEY ::= "trolley" ;
CONST ::= "const" ;
DONE ::= "done" ;
DISJUNCTION ::= "\\/" ;
RBRACE ::= "}" ;
multiple_statement ::= LBRACE single_statement (SEMI single_statement)* RBRACE ;
--------------------tescol::reference.bgf--------------------
SKIP ::= "skip" ;
COLON ::= ":" ;
LTE ::= "<=" ;
NET ::= "!=" ;
EXP ::= "**" ;
paramElem ::= ID COLON type ;
ELSE ::= "else" ;
GTE ::= ">=" ;
stmtElem ::= SKIP | assign | condSt | loop ;
LPAR ::= "(" ;
COMMA ::= "," ;
TE ::= "?" ;
DIV ::= "/" ;
varDecl ::= VAR (a::ID) | (a::CONSTID) COLON t::type ;
MULT ::= "*" ;
ET ::= "==" ;
RPAR ::= ")" ;
DISJUNC ::= "/\\" ;
SEMI ::= ";" ;
GT ::= ">" ;
constDecl ::= CONST CONSTID COLON t::type DEFAS e::expression ;
procApp ::= ε | (LPAR appList RPAR) ;
condSt ::= IF e::expression THEN statement ELSE statement ;
CONJUNC ::= "\\/" ;
LOWER ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" ;
SUB ::= "-" ;
procDecl ::= PROC (a::ID) | (a::CONSTID) LPAR p::paramList RPAR COLON t::type DEFAS st::statement ;
CONTAINS ::= "contains" ;
appList ::= ε | (e::expression (COMMA f::expression)*) ;
CONSTID ::= UPPER (UPPER | DIGIT | "_")* ;
INTEGER ::= ("+" | "-")? DIGIT+ ;
THEN ::= "then" ;
IF ::= "if" ;
WS ::= (" " | "\t" | "\r" | "\n")+ ;
ID ::= UPPER | LOWER (UPPER | LOWER | DIGIT | "_")* ;
RELOP ::= LT | LTE | GT | GTE ;
DOUB ::= "double" ;
DEFAS ::= ":=" ;
PROC ::= "proc" ;
DOUBLE ::= INTEGER? "." DIGIT* ("e" | "E" INTEGER)? ;
MULTOP ::= MULT | DIV ;
WHILE ::= "while" ;
INT ::= "int" ;
DIGIT ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
EQOP ::= ET | NET ;
paramList ::= ε | (p::paramElem (COMMA q::paramElem)*) ;
DO ::= "do" ;
LT ::= "<" ;
LBRACE ::= "{" ;
VAR ::= "var" ;
CHECKOUT ::= "checkout" ;
stmtList ::= LBRACE s::stmtElem (SEMI t::stmtElem)* RBRACE ;
TROLLEY ::= "trolley" ;
CONST ::= "const" ;
UPPER ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ;
DONE ::= "done" ;
ADD ::= "+" ;
RBRACE ::= "}" ;
--------------------hats::abs.bgf--------------------
SqlTupleCaseBranches ::= l::SqlTupleCaseBranches b::SqlTupleCaseBranch ;
 SqlTupleCaseBranches ::= [b] SqlTupleCaseBranch ;
TypesynDecl ::= (al::AnnotationList)? TYPE lhs::TYPE_IDENTIFIER ASSIGN rhs::Datatypeuse SEMICOLON ;
OoModifier ::= REMOVES CLASS id::TypeName SEMICOLON ;
 OoModifier ::= MODIFIES INTERFACE id::TypeName LBRACE (fragments::InfModifierFragmentList)? RBRACE ;
 OoModifier ::= ADDS ifacedecl::QualifiedInterfaceDecl ;
 OoModifier ::= MODIFIES CLASS id::TypeName (ifadd::ImplementInterfacesAdd)? (ifremove::ImplementInterfacesRemove)? LBRACE (fragments::ModifierFragmentList)? RBRACE ;
 OoModifier ::= ADDS classdecl::QualifiedClassDecl ;
ParamDeclList ::= l::ParamDeclList COMMA i::ParamDecl ;
 ParamDeclList ::= [i] ParamDecl ;
DataExp ::= OrExp ;
SqlTupleScalarFunctionConcat ::= f1::SqlTupleScalarFunctionConcat CONCAT f2::SqlTupleScalarFunctionSum ;
 SqlTupleScalarFunctionConcat ::= SqlTupleScalarFunctionSum ;
MimplExp ::= MeqExp ;
 MimplExp ::= e1::MimplExp IMPLIES e2::MeqExp ;
 MimplExp ::= e1::MimplExp EQUIV e2::MeqExp ;
OriginalCall ::= ORIGINAL LPAREN (params::DataExpList)? RPAREN ;
 OriginalCall ::= delta::DeltaId DOTORIGINAL LPAREN (params::DataExpList)? RPAREN ;
 OriginalCall ::= CORE DOTORIGINAL LPAREN (params::DataExpList)? RPAREN ;
MethodsigList ::= m::Methodsig SEMICOLON ;
 MethodsigList ::= l::MethodsigList m::Methodsig SEMICOLON ;
SqlAttrAssignment ::= e::DataExp EQ f::SqlTupleScalarFunction ;
SqlOrCondition ::= c1::SqlOrCondition op::OR c2::SqlAndCondition ;
 SqlOrCondition ::= SqlAndCondition ;
InfModifierFragmentList ::= l::InfModifierFragmentList f::InfModifierFragment ;
 InfModifierFragmentList ::= [f] InfModifierFragment ;
AndExp ::= e1::AndExp ANDAND e2::EqualityExp ;
 AndExp ::= EqualityExp ;
PureExp ::= FatherExp "/"* Component* "/" ;
 PureExp ::= LocationExp "/"* Component* "/" ;
 PureExp ::= IfExp ;
 PureExp ::= PureExpNoIf ;
ConstructorExp ::= [f] TypeName ;
 ConstructorExp ::= f::TypeName LPAREN (l::DataExpList)? RPAREN ;
WhenCondition ::= TO ac::Appcond ;
 WhenCondition ::= WHEN ac::Appcond ;
MmultExp ::= e1::MmultExp MULT e2::MfactorExp ;
 MmultExp ::= [e] MfactorExp ;
 MmultExp ::= e1::MmultExp DIV e2::MfactorExp ;
 MmultExp ::= e1::MmultExp MOD e2::MfactorExp ;
IntLiteral ::= [i] INTLITERAL ;
INTLITERAL ::= ε ;
AddExp ::= e1::AddExp PLUS e2::MultExp ;
 AddExp ::= [e] MultExp ;
 AddExp ::= e1::AddExp MINUS e2::MultExp ;
DeltaAccessList ::= [t] DeltaAccess ;
 DeltaAccessList ::= l::DeltaAccessList t::DeltaAccess ;
ConstructorArgList ::= l::ConstructorArgList COMMA a::ConstructorArg ;
 ConstructorArgList ::= [a] ConstructorArg ;
AsyncCall ::= callee::PureExpPrefix BANG method::IDENTIFIER LPAREN (params::DataExpList)? RPAREN ;
 AsyncCall ::= callee::THIS BANG method::IDENTIFIER LPAREN (params::DataExpList)? RPAREN ;
SqlOrderingAttributeList ::= l::SqlOrderingAttributeList COMMA a::SqlOrderingAttribute ;
 SqlOrderingAttributeList ::= [a] SqlOrderingAttribute ;
SimpleTypeName ::= [id] TYPE_IDENTIFIER ;
PureExpPrefix ::= LPAREN e::IfExp RPAREN ;
 PureExpPrefix ::= PureExpNoIf ;
DeltaId ::= [delta] TYPE_IDENTIFIER ;
SqlAndCondition ::= c1::SqlAndCondition op::AND c2::SqlCondition ;
 SqlAndCondition ::= SqlCondition ;
SqlTupleScalarFunctionProduct ::= f1::SqlTupleScalarFunctionProduct MULT f2::SqlTupleScalarFunctionQuotient ;
 SqlTupleScalarFunctionProduct ::= SqlTupleScalarFunctionQuotient ;
 SqlTupleScalarFunctionProduct ::= f1::SqlTupleScalarFunctionProduct MULT LPAREN f2::SqlTupleScalarFunctionSum RPAREN ;
SqlAttrsDef ::= MULT ;
 SqlAttrsDef ::= [l] SqlAttrDefList ;
DataConstructor ::= co::TYPE_IDENTIFIER (p::DataConstructorParams)? ;
ExpFunctionDef ::= [ef] DataExp ;
CaseBranchList ::= l::CaseBranchList b::CaseBranch ;
 CaseBranchList ::= [b] CaseBranch ;
DatatypeDecl ::= (al::AnnotationList)? DATA id::TYPE_IDENTIFIER (p::DatatypeparamListDecl)? SEMICOLON ;
 DatatypeDecl ::= (al::AnnotationList)? DATA id::TYPE_IDENTIFIER (p::DatatypeparamListDecl)? ASSIGN l::DataConstructorList SEMICOLON ;
TYPE_IDENTIFIER ::= TYPE_IDENTIFIER_OLD ;
SqlTupleScalarFunctionQuotient ::= f1::SqlTupleScalarFunctionQuotient DIV LPAREN f2::SqlTupleScalarFunctionSum RPAREN ;
 SqlTupleScalarFunctionQuotient ::= f1::SqlTupleScalarFunctionQuotient DIV f2::AtomicSqlTupleScalarFunction ;
 SqlTupleScalarFunctionQuotient ::= AtomicSqlTupleScalarFunction ;
CompilationUnit ::= (m::ModuleDeclList)? (d::DeltaDeclList)? (pl::ProductLine)? (p::ProductList)? fm::Featuremodeldecl ;
SqlAttrDef ::= fun::SqlAggregateFunction AS e::DataExp ;
 SqlAttrDef ::= [f] Factor ;
FunctionDecl ::= (al::AnnotationList)? DEF t::Datatypeuse fn::IDENTIFIER p::DatatypeparamListDecl LPAREN (l::ParamDeclList)? RPAREN ASSIGN ef::ExpFunctionDef SEMICOLON ;
 FunctionDecl ::= (al::AnnotationList)? DEF t::Datatypeuse fn::IDENTIFIER LPAREN (l::ParamDeclList)? RPAREN ASSIGN ef::ExpFunctionDef SEMICOLON ;
 FunctionDecl ::= (al::AnnotationList)? DEF t::Datatypeuse fn::IDENTIFIER LPAREN (l::ParamDeclList)? RPAREN ASSIGN BUILTIN SEMICOLON ;
 FunctionDecl ::= (al::AnnotationList)? DEF t::Datatypeuse fn::IDENTIFIER p::DatatypeparamListDecl LPAREN (l::ParamDeclList)? RPAREN ASSIGN BUILTIN SEMICOLON ;
HasCondition ::= HASFIELD f::FieldDecl ;
 HasCondition ::= HASMETHOD ms::Methodsig ;
 HasCondition ::= HASINTERFACE n::TypeName ;
ModuleModifierList ::= l::ModuleModifierList m::ModuleModifier ;
 ModuleModifierList ::= [m] ModuleModifier ;
IncompleteExp ::= callee::PureExpPrefix b::BANG (method::IDENTIFIER)? ;
 IncompleteExp ::= callee::PureExpPrefix d::DOT (method::IDENTIFIER)? ;
 IncompleteExp ::= NEW (c::Cog)? ;
AfterCondition ::= AFTER l::DeltaList ;
AttrAssignment ::= n::IDENTIFIER ASSIGN i::INTLITERAL ;
 AttrAssignment ::= n::IDENTIFIER ASSIGN c::TYPE_IDENTIFIER ;
SqlAtomicRelationRef ::= [r] StringLiteral ;
 SqlAtomicRelationRef ::= [r] VarOrFieldRef ;
ImplementInterfaces ::= IMPLEMENTS i::IfnameList ;
IfThenElseStmt ::= IF LPAREN e1::DataExp RPAREN s1::Stmt ELSE s2::Stmt ;
 IfThenElseStmt ::= IF LPAREN e1::DataExp RPAREN s1::Stmt ;
SyncCall ::= callee::PureExpPrefix DOT method::IDENTIFIER LPAREN (params::DataExpList)? RPAREN ;
 SyncCall ::= callee::THIS DOT method::IDENTIFIER LPAREN (params::DataExpList)? RPAREN ;
AttributeConstraintList ::= acl::AttributeConstraintList t::TYPE_IDENTIFIER id::IDENTIFIER IN LBRACKET b1::BoundaryInt UNTIL b2::BoundaryInt RBRACKET SEMICOLON ;
 AttributeConstraintList ::= acl::AttributeConstraintList t::TYPE_IDENTIFIER id::IDENTIFIER SEMICOLON "/"* Constraints* "/" ;
 AttributeConstraintList ::= acl::AttributeConstraintList EXCLUDE COLON f::Featvar SEMICOLON ;
 AttributeConstraintList ::= acl::AttributeConstraintList t::TYPE_IDENTIFIER id::IDENTIFIER IN LBRACE il::IntList RBRACE SEMICOLON ;
 AttributeConstraintList ::= acl::AttributeConstraintList t::TYPE_IDENTIFIER LBRACKET b1::BoundaryInt UNTIL b2::BoundaryInt RBRACKET id::IDENTIFIER SEMICOLON ;
 AttributeConstraintList ::= acl::AttributeConstraintList e::Mexp SEMICOLON ;
 AttributeConstraintList ::= "/"* Attributes* "/" ;
 AttributeConstraintList ::= acl::AttributeConstraintList REQUIRE COLON f::Featvar SEMICOLON ;
 AttributeConstraintList ::= acl::AttributeConstraintList IFIN COLON e::Mexp SEMICOLON ;
 AttributeConstraintList ::= acl::AttributeConstraintList IFOUT COLON e::Mexp SEMICOLON ;
ParamDecl ::= (an::AnnotationList)? t::TypeExp i::IDENTIFIER ;
AnyNameList ::= [n] AnyName ;
 AnyNameList ::= l::AnyNameList COMMA n::AnyName ;
ExtendsInterfaces ::= EXTENDS i::IfnameList ;
CaseExp ::= CASE caseterm::DataExp LBRACE (branches::CaseBranchList)? RBRACE ;
MultExp ::= e1::MultExp MULT e2::Factor ;
 MultExp ::= e1::MultExp MOD e2::Factor ;
 MultExp ::= [f] Factor ;
 MultExp ::= e1::MultExp DIV e2::Factor ;
SqlAttrAssignmentList ::= [a] SqlAttrAssignment ;
 SqlAttrAssignmentList ::= l::SqlAttrAssignmentList COMMA a::SqlAttrAssignment ;
SqlAggregateFunction ::= COUNT LPAREN MULT RPAREN ;
 SqlAggregateFunction ::= [f] SqlTupleScalarFunction ;
 SqlAggregateFunction ::= i::IDENTIFIER LPAREN f::SqlTupleScalarFunction RPAREN ;
IDENTIFIER ::= ε ;
StmtList ::= l::StmtList i::Stmt ;
 StmtList ::= [i] Stmt ;
ModifierFragmentList ::= [f] ModifierFragment ;
 ModifierFragmentList ::= l::ModifierFragmentList f::ModifierFragment ;
MeqExp ::= MrelExp ;
 MeqExp ::= e1::MeqExp NOTEQ e2::MrelExp ;
 MeqExp ::= e1::MeqExp EQEQ e2::MrelExp ;
ImplementInterfacesAdd ::= ADDS i::IfnameList ;
FieldDecl ::= (an::AnnotationList)? PORT t::TypeExp i::IDENTIFIER ;
 FieldDecl ::= (an::AnnotationList)? t::TypeExp i::IDENTIFIER ;
 FieldDecl ::= (an::AnnotationList)? PORT t::TypeExp i::IDENTIFIER ASSIGN e::DataExp ;
 FieldDecl ::= (an::AnnotationList)? t::TypeExp i::IDENTIFIER ASSIGN e::DataExp ;
EqualityExp ::= e1::EqualityExp EQEQ e2::RelationalExp ;
 EqualityExp ::= RelationalExp ;
 EqualityExp ::= e1::EqualityExp NOTEQ e2::RelationalExp ;
VarOrFieldRef ::= callee::THIS b::BANG (method::IDENTIFIER)? ;
 VarOrFieldRef ::= [n] IDENTIFIER ;
 VarOrFieldRef ::= callee::THIS d::DOT ;
 VarOrFieldRef ::= THIS DOT id::IDENTIFIER ;
MfactorExp ::= MINUS e::MfactorExp ;
 MfactorExp ::= MlitExp ;
 MfactorExp ::= NEGATION e::MfactorExp ;
 MfactorExp ::= LPAREN e::Mexp RPAREN ;
ImplementInterfacesRemove ::= REMOVES i::IfnameList ;
IfExp ::= IF e::DataExp THEN c::DataExp ELSE a::DataExp ;
FeatureDecl ::= [f] TYPE_IDENTIFIER ;
 FeatureDecl ::= f::TYPE_IDENTIFIER LBRACE (g::Group)? acl::AttributeConstraintList RBRACE ;
ParamDecls ::= LPAREN (f::ParamDeclList)? RPAREN ;
SqlOrderingAttributes ::= ε ;
 SqlOrderingAttributes ::= ORDER BY l::SqlOrderingAttributeList ;
CorefeatureList ::= ε ;
 CorefeatureList ::= COREFEATURES l::FeatureList SEMICOLON ;
FeatureList ::= [f] Feature ;
 FeatureList ::= l::FeatureList COMMA f::Feature ;
MlitExp ::= [i] INTLITERAL ;
 MlitExp ::= [id] IDENTIFIER ;
 MlitExp ::= f::TYPE_IDENTIFIER DOT a::IDENTIFIER ;
 MlitExp ::= [id] TYPE_IDENTIFIER ;
ExportList ::= [t] Export ;
 ExportList ::= l::ExportList t::Export ;
DatatypeparamListDecl ::= LT l::DatatypeparamList GT ;
SqlExp ::= INSERT INTO r::SqlRelationRef LPAREN a::SqlAttrRefList RPAREN VALUES LPAREN v::SqlTupleConstantList RPAREN ;
 SqlExp ::= UPDATE r::SqlRelationRef SET a::SqlAttrAssignmentList c::OptSqlCondition ;
 SqlExp ::= SELECT a::SqlAttrsDef FROM r::SqlRelationRef c::OptSqlCondition g::SqlGroupingAttributes o::SqlOrderingAttributes ;
 SqlExp ::= SELECT DISTINCT a::SqlAttrsDef FROM r::SqlRelationRef c::OptSqlCondition g::SqlGroupingAttributes o::SqlOrderingAttributes ;
DataConstructorList ::= [i] DataConstructor ;
 DataConstructorList ::= l::DataConstructorList BAR i::DataConstructor ;
AnnotationList ::= l::AnnotationList a::Annotation ;
 AnnotationList ::= [a] Annotation ;
BlockWithoutAnnotations ::= LBRACE (s::StmtList)? RBRACE ;
DeclList ::= l::DeclList t::Decl ;
 DeclList ::= [t] Decl ;
ABSGoal ::= [cu] CompilationUnit ;
SqlAttrDefList ::= [a] SqlAttrDef ;
 SqlAttrDefList ::= l::SqlAttrDefList COMMA a::SqlAttrDef ;
ModuleModifier ::= [m] OoModifier ;
 ModuleModifier ::= [m] FunctionalModifier ;
QualifiedTypeName ::= qn::TypeName DOT n::TYPE_IDENTIFIER ;
ModuleNameDecl ::= MODULE n::ModuleName SEMICOLON ;
SqlTupleConstant ::= [i] IntLiteral ;
 SqlTupleConstant ::= [s] SqlStringLiteral ;
 SqlTupleConstant ::= TRUE ;
 SqlTupleConstant ::= MINUS i::IntLiteral ;
 SqlTupleConstant ::= FALSE ;
 SqlTupleConstant ::= [r] VarOrFieldRef ;
SimpleName ::= [id] IDENTIFIER ;
NewExp ::= NEW (c::Cog)? i::TypeName LPAREN (l::DataExpList)? RPAREN ;
AttrAssignmentList ::= [a] AttrAssignment ;
 AttrAssignmentList ::= l::AttrAssignmentList COMMA a::AttrAssignment ;
WhileStmt ::= WHILE LPAREN e1::DataExp RPAREN s1::Stmt ;
AnyName ::= TypeName ;
 AnyName ::= Name ;
DataConstructorParams ::= LPAREN (l::ConstructorArgList)? RPAREN ;
AttrAssignments ::= LBRACE l::AttrAssignmentList RBRACE ;
SqlComparisonRelation ::= LT ;
 SqlComparisonRelation ::= LTEQ ;
 SqlComparisonRelation ::= GTEQ ;
 SqlComparisonRelation ::= NOTEQ ;
 SqlComparisonRelation ::= EQ ;
 SqlComparisonRelation ::= GT ;
AdaptationList ::= l::AdaptationList ad::Adaptation ;
 AdaptationList ::= [ad] Adaptation ;
FromCondition ::= FROM ac::Appcond ;
SqlRelationRef ::= r1::SqlRelationRef JOIN r2::SqlAtomicRelationRef ;
 SqlRelationRef ::= r1::SqlRelationRef RIGHT JOIN r2::SqlAtomicRelationRef ;
 SqlRelationRef ::= SqlAtomicRelationRef ;
 SqlRelationRef ::= r1::SqlRelationRef LEFT JOIN r2::SqlAtomicRelationRef ;
QualifiedInterfaceDecl ::= (al::AnnotationList)? INTERFACE id::TypeName (i::ExtendsInterfaces)? LBRACE (l::MethodsigList)? RBRACE ;
ModifierFragment ::= REMOVES f::FieldDecl SEMICOLON ;
 ModifierFragment ::= MODIFIES m::Method ;
 ModifierFragment ::= ADDS f::FieldDecl SEMICOLON ;
 ModifierFragment ::= REMOVES ms::Methodsig SEMICOLON ;
 ModifierFragment ::= ADDS m::Method ;
InterfaceDecl ::= (al::AnnotationList)? INTERFACE id::TYPE_IDENTIFIER (i::ExtendsInterfaces)? LBRACE (l::MethodsigList)? RBRACE ;
ProductLine ::= PRODUCTLINE id::TYPE_IDENTIFIER SEMICOLON o::OptfeatureList c::CorefeatureList d::DeltaclauseList ;
TypeExp ::= [n] TypeName ;
 TypeExp ::= n::TypeName LT p::DatatypeuseList GT ;
FieldDeclList ::= i::FieldDecl SEMICOLON ;
 FieldDeclList ::= l::FieldDeclList i::FieldDecl SEMICOLON ;
DeltaDecl ::= DELTA id::TYPE_IDENTIFIER (params::DeltaParamDecls)? SEMICOLON (uses::DeltaAccessList)? (modifiers::ModuleModifierList)? ;
DeltaParamDeclList ::= [i] DeltaParamDecl ;
 DeltaParamDeclList ::= l::DeltaParamDeclList COMMA i::DeltaParamDecl ;
ModuleDecl ::= n::ModuleNameDecl (el::ExportList)? (il::ImportList)? (dl::DeclList)? (b::MainBlock)? ;
RelationalExp ::= e1::RelationalExp LTEQ e2::AddExp ;
 RelationalExp ::= AddExp ;
 RelationalExp ::= e1::RelationalExp LT e2::AddExp ;
 RelationalExp ::= e1::RelationalExp GT e2::AddExp ;
 RelationalExp ::= e1::RelationalExp GTEQ e2::AddExp ;
ConstructorPattern ::= co::TypeName (p::PatternParams)? ;
DeltaList ::= l::DeltaList COMMA id::Delta ;
 DeltaList ::= [id] Delta ;
SqlAttrRef ::= DataExp ;
FactorAppcond ::= LPAREN ac::Appcond RPAREN ;
 FactorAppcond ::= [f] Feature ;
 FactorAppcond ::= NEGATION ac::FactorAppcond ;
MandExp ::= MimplExp ;
 MandExp ::= e1::MandExp ANDAND e2::MimplExp ;
MrelExp ::= e1::MrelExp GTEQ e2::MaddExp ;
 MrelExp ::= e1::MrelExp GT e2::MaddExp ;
 MrelExp ::= e1::MrelExp LT e2::MaddExp ;
 MrelExp ::= MaddExp ;
 MrelExp ::= e1::MrelExp LTEQ e2::MaddExp ;
VarDecl ::= t::TypeExp i::IDENTIFIER ASSIGN e::Exp ;
 VarDecl ::= t::TypeExp i::IDENTIFIER ;
SqlStringLiteral ::= [s] SQLSTRINGLITERAL ;
SqlTupleCaseBranch ::= WHEN c::SqlOrCondition THEN f::SqlTupleScalarFunction ;
ListLiteralExp ::= LBRACKET (l::DataExpList)? RBRACKET ;
AtomicSqlTupleScalarFunction ::= [a] StringLiteral ;
 AtomicSqlTupleScalarFunction ::= SqlTupleConstant ;
 AtomicSqlTupleScalarFunction ::= SqlTupleCaseFunction ;
MaddExp ::= e1::MaddExp MINUS e2::MmultExp ;
 MaddExp ::= [e] MmultExp ;
 MaddExp ::= e1::MaddExp PLUS e2::MmultExp ;
DatatypeparamList ::= l::DatatypeparamList COMMA p::Datatypeparam ;
 DatatypeparamList ::= [p] Datatypeparam ;
BoundaryInt ::= [i] INTLITERAL ;
 BoundaryInt ::= MULT ;
 BoundaryInt ::= MINUS i::INTLITERAL ;
DeltaclauseList ::= ε ;
 DeltaclauseList ::= l::DeltaclauseList dc::DeltaClause SEMICOLON ;
StmtWithoutAnnotations ::= REBIND field::IDENTIFIER ASSIGN e::Exp ;
 StmtWithoutAnnotations ::= r::VarOrFieldRef ASSIGN e::Exp ;
 StmtWithoutAnnotations ::= SKIP ;
 StmtWithoutAnnotations ::= REBIND obj::Exp COLON field::IDENTIFIER ASSIGN e::Exp ;
 StmtWithoutAnnotations ::= [e] EffExp ;
 StmtWithoutAnnotations ::= [vd] VarDecl ;
 StmtWithoutAnnotations ::= DURATION LPAREN min::DataExp COMMA max::DataExp RPAREN ;
 StmtWithoutAnnotations ::= SUBLOC sub::PureExp IN father::PureExp ;
 StmtWithoutAnnotations ::= ASSERT e::DataExp ;
 StmtWithoutAnnotations ::= AWAIT Guard ;
 StmtWithoutAnnotations ::= SUSPEND ;
 StmtWithoutAnnotations ::= RETURN e::Exp ;
 StmtWithoutAnnotations ::= MOVECOGTO DataExp ;
PureExpNoIf ::= ConstructorExp ;
 PureExpNoIf ::= NULL ;
 PureExpNoIf ::= FnappExp ;
 PureExpNoIf ::= CaseExp ;
 PureExpNoIf ::= VarOrFieldRef ;
 PureExpNoIf ::= THIS ;
 PureExpNoIf ::= FnappListExp ;
 PureExpNoIf ::= LetExp ;
DatatypeuseList ::= [i] Datatypeuse ;
 DatatypeuseList ::= l::DatatypeuseList COMMA i::Datatypeuse ;
OptfeatureList ::= OPTFEATURES l::FeatureList SEMICOLON ;
 OptfeatureList ::= ε ;
OrAppcond ::= ac1::OrAppcond OROR ac2::AndAppcond ;
 OrAppcond ::= AndAppcond ;
MethodList ::= l::MethodList i::Method ;
 MethodList ::= [i] Method ;
SqlTupleScalarFunction ::= SqlTupleScalarFunctionConcat ;
StringLiteral ::= [s] STRINGLITERAL ;
InitBlock ::= Block ;
NewlocExp ::= NEW LOC ;
SqlTupleConstantList ::= [c] SqlTupleConstant ;
 SqlTupleConstantList ::= l::SqlTupleConstantList COMMA c::SqlTupleConstant ;
ModuleName ::= TypeName ;
MainBlock ::= (al::AnnotationList)? LBRACE (s::StmtList)? RBRACE ;
DeltaParamDecls ::= LPAREN (f::DeltaParamDeclList)? RPAREN ;
CompoundStmt ::= IfThenElseStmt ;
 CompoundStmt ::= BlockWithoutAnnotations ;
 CompoundStmt ::= WhileStmt ;
DeltaparamList ::= l::DeltaparamList COMMA p::Deltaparam ;
 DeltaparamList ::= [p] Deltaparam ;
DataExpList ::= l::DataExpList COMMA i::DataExp ;
 DataExpList ::= [i] DataExp ;
PatternList ::= l::PatternList COMMA i::Pattern ;
 PatternList ::= [i] Pattern ;
SqlTupleScalarFunctionSum ::= f1::SqlTupleScalarFunctionSum MINUS f2::SqlTupleScalarFunctionProduct ;
 SqlTupleScalarFunctionSum ::= f1::SqlTupleScalarFunctionSum PLUS f2::SqlTupleScalarFunctionProduct ;
 SqlTupleScalarFunctionSum ::= f1::SqlTupleScalarFunctionSum MINUS LPAREN f2::SqlTupleScalarFunctionSum RPAREN ;
 SqlTupleScalarFunctionSum ::= SqlTupleScalarFunctionProduct ;
LAYOUT ::= Comment ;
 LAYOUT ::= ε ;
InfModifierFragment ::= REMOVES ms::Methodsig SEMICOLON ;
 InfModifierFragment ::= ADDS ms::Methodsig SEMICOLON ;
QualifiedName ::= qn::TypeName DOT n::IDENTIFIER ;
DeltaClause ::= DELTA d::Deltaspec (a::AfterCondition)? (f::FromCondition)? (w::WhenCondition)? ;
QualifiedClassDecl ::= (annotations::AnnotationList)? CLASS id::TypeName (params::ParamDecls)? (i::ImplementInterfaces)? LBRACE (fields::FieldDeclList)? (initBlock::InitBlock)? (methods::MethodList)? RBRACE ;
FnappListExp ::= f::Name l::ListLiteralExp ;
FnappExp ::= f::Name LPAREN (l::DataExpList)? RPAREN ;
ClassDecl ::= (annotations::AnnotationList)? CLASS id::TYPE_IDENTIFIER (params::ParamDecls)? (i::ImplementInterfaces)? LBRACE (fields::FieldDeclList)? (initBlock::InitBlock)? (methods::MethodList)? RBRACE ;
LetExp ::= LET LPAREN var::ParamDecl RPAREN ASSIGN val::DataExp IN exp::DataExp ;
OptSqlCondition ::= WHERE c::SqlOrCondition ;
 OptSqlCondition ::= ε ;
DeltaDeclList ::= [t] DeltaDecl ;
 DeltaDeclList ::= l::DeltaDeclList t::DeltaDecl ;
DeltaParamDecl ::= [p] ParamDecl ;
 DeltaParamDecl ::= id::TYPE_IDENTIFIER c::HasCondition ;
DeltaAccess ::= USES m::ModuleName SEMICOLON ;
ConstructorArg ::= [u] Datatypeuse ;
 ConstructorArg ::= u::Datatypeuse id::IDENTIFIER ;
SqlOrderingAttribute ::= e::DataExp DESC ;
 SqlOrderingAttribute ::= [e] DataExp ;
 SqlOrderingAttribute ::= e::DataExp ASC ;
OrExp ::= AndExp ;
 OrExp ::= e1::OrExp OROR e2::AndExp ;
FunctionalModifier ::= ADDS typesyndecl::TypesynDecl ;
 FunctionalModifier ::= MODIFIES typesyndecl::TypesynDecl ;
 FunctionalModifier ::= ADDS datatypedecl::DatatypeDecl ;
 FunctionalModifier ::= ADDS functiondecl::FunctionDecl ;
 FunctionalModifier ::= MODIFIES datatypedecl::DatatypeDecl ;
EffExp ::= AsyncCall ;
 EffExp ::= NewlocExp "/"* Component* "/" ;
 EffExp ::= NewExp ;
 EffExp ::= IncompleteExp ;
 EffExp ::= SyncCall ;
 EffExp ::= SQL LPAREN e::SqlExp RPAREN ;
 EffExp ::= OriginalCall ;
 EffExp ::= p::PureExpPrefix DOT GET ;
PatternParams ::= LPAREN (l::PatternList)? RPAREN ;
ModuleDeclList ::= l::ModuleDeclList t::ModuleDecl ;
 ModuleDeclList ::= [t] ModuleDecl ;
CaseBranch ::= lhs::Pattern RARROW rhs::DataExp SEMICOLON ;
SqlAttrRefList ::= l::SqlAttrRefList COMMA a::SqlAttrRef ;
 SqlAttrRefList ::= [a] SqlAttrRef ;
SqlCondition ::= NOT c::SqlCondition ;
 SqlCondition ::= f1::SqlTupleScalarFunction r::SqlComparisonRelation f2::SqlTupleScalarFunction ;
 SqlCondition ::= a::StringLiteral IS NULL ;
 SqlCondition ::= LPAREN c::SqlOrCondition RPAREN ;
IntList ::= MINUS i::INTLITERAL ;
 IntList ::= il::IntList COMMA MINUS i::INTLITERAL ;
 IntList ::= il::IntList COMMA i::INTLITERAL ;
 IntList ::= [i] INTLITERAL ;
ProductList ::= [p] Product ;
 ProductList ::= l::ProductList p::Product ;
AndAppcond ::= ac1::AndAppcond ANDAND ac2::FactorAppcond ;
 AndAppcond ::= FactorAppcond ;
SqlGroupingAttributes ::= ε ;
 SqlGroupingAttributes ::= GROUP BY a::SqlAttrRefList ;
LocationExp ::= LOC LPAREN param::PureExp RPAREN ;
IfnameList ::= l::IfnameList COMMA i::Ifname ;
 IfnameList ::= [i] Ifname ;
FnodeList ::= ε ;
 FnodeList ::= l::FnodeList COMMA f::Fnode ;
 FnodeList ::= [f] Fnode ;
TypeName ::= QualifiedTypeName ;
 TypeName ::= SimpleTypeName ;
ImportList ::= [t] Import ;
 ImportList ::= l::ImportList t::Import ;
SqlTupleCaseFunction ::= CASE b::SqlTupleCaseBranches ELSE f::SqlTupleScalarFunction END ;
FatherExp ::= FATHER LPAREN param::PureExp RPAREN ;
--------------------metamodels::ACG.bgf--------------------
CollectionExp ::= SequenceExp ;
CompoundStat ::= ForEachStat ;
 CompoundStat ::= OnceStat ;
 CompoundStat ::= VariableStat ;
 CompoundStat ::= OperationStat ;
 CompoundStat ::= ConditionalStat ;
 CompoundStat ::= LetStat ;
 CompoundStat ::= AnalyzeStat ;
PushDStat ::= operand::Expression ;
ForEachStat ::= iterator::VariableDecl collection::Expression ;
StatementBlock ::= Node ;
 StatementBlock ::= CompoundStat ;
ASMNode ::= name::Expression ;
SequenceExp ::= (elements::Expression)+ ;
OperatorCallExp ::= (arguments::Expression)+ ;
OperationStat ::= context::Expression name::Expression ;
LoadStat ::= operand::Expression ;
GotoStat ::= label::LabelStat ;
SetStat ::= operand::Expression ;
BooleanExp ::= value::Boolean ;
StoreStat ::= operand::Expression ;
NewStat ::= ε ;
SimpleNode ::= element::String mode::String guard::Expression ;
EndIterateStat ::= ε ;
CallStat ::= operand::Expression ;
IfStat ::= label::LabelStat ;
IteratorExp ::= iterator::VariableDecl body::Expression ;
LetStat ::= variable::VariableDecl value::Expression ;
CodeNode ::= element::String mode::String guard::Expression ;
PushStat ::= operand::Expression ;
StringExp ::= value::String ;
EmitWithLabelRefStat ::= IfStat ;
 EmitWithLabelRefStat ::= GotoStat ;
DupX1Stat ::= ε ;
PropertyCallExp ::= NavigationExp ;
 PropertyCallExp ::= IteratorExp ;
 PropertyCallExp ::= OperationCallExp ;
GetStat ::= operand::Expression ;
LocatedElement ::= ACG ;
 LocatedElement ::= ACGElement ;
 LocatedElement ::= StatementBlock ;
 LocatedElement ::= Statement ;
 LocatedElement ::= VariableDecl ;
 LocatedElement ::= Expression ;
SwapStat ::= ε ;
EmitStat ::= LabelStat ;
 EmitStat ::= NewStat ;
 EmitStat ::= DupStat ;
 EmitStat ::= DupX1Stat ;
 EmitStat ::= PopStat ;
 EmitStat ::= SwapStat ;
 EmitStat ::= IterateStat ;
 EmitStat ::= EndIterateStat ;
 EmitStat ::= GetAsmStat ;
 EmitStat ::= FindMEStat ;
 EmitStat ::= PushTStat ;
 EmitStat ::= PushFStat ;
 EmitStat ::= EmitWithOperandStat ;
 EmitStat ::= EmitWithLabelRefStat ;
IsAExp ::= source::Expression type::String ;
VariableDecl ::= Parameter ;
 VariableDecl ::= name::String ;
FindMEStat ::= ε ;
PopStat ::= ε ;
ACG ::= metamodel::String startsWith::String (elements::ACGElement)+ ;
EmitWithOperandStat ::= PushStat ;
 EmitWithOperandStat ::= PushIStat ;
 EmitWithOperandStat ::= PushDStat ;
 EmitWithOperandStat ::= LoadStat ;
 EmitWithOperandStat ::= StoreStat ;
 EmitWithOperandStat ::= CallStat ;
 EmitWithOperandStat ::= PCallStat ;
 EmitWithOperandStat ::= SuperCallStat ;
 EmitWithOperandStat ::= GetStat ;
 EmitWithOperandStat ::= SetStat ;
LetExp ::= variable::VariableDecl value::Expression in::Expression ;
VariableExp ::= variable::VariableDecl ;
ParamStat ::= name::Expression type::Expression ;
IfExp ::= condition::Expression thenExp::Expression elseExp::Expression ;
AnalyzeStat ::= target::Expression mode::String ;
IntegerExp ::= value::Integer ;
ConditionalStat ::= condition::Expression (elseStatements::Statement)+ ;
GetAsmStat ::= ε ;
OperationCallExp ::= OperatorCallExp ;
 OperationCallExp ::= (arguments::Expression)+ ;
ACGElement ::= Function ;
 ACGElement ::= Attribute ;
 ACGElement ::= Node ;
OnceStat ::= ε ;
DupStat ::= ε ;
SelfExp ::= ε ;
VariableStat ::= definition::Expression name::Expression ;
LiteralExp ::= OclUndefinedExp ;
 LiteralExp ::= CollectionExp ;
 LiteralExp ::= BooleanExp ;
 LiteralExp ::= IntegerExp ;
 LiteralExp ::= StringExp ;
PushTStat ::= ε ;
IterateStat ::= ε ;
FieldStat ::= name::Expression type::Expression ;
SuperCallStat ::= operand::Expression ;
NavigationExp ::= source::Expression name::String ;
LabelStat ::= name::String id::Expression ;
ReportStat ::= severity::Severity message::Expression ;
LastExp ::= ε ;
OclUndefinedExp ::= ε ;
PushIStat ::= operand::Expression ;
PCallStat ::= operand::Expression ;
PushFStat ::= ε ;
--------------------metamodels::ACME.bgf--------------------
ACMEEntry ::= System ;
 ACMEEntry ::= ComponentType ;
ComponentType ::= extend::String ;
ACMEFile ::= (entries::ACMEEntry)+ ;
ComponentInstance ::= instanceOf::String ;
--------------------metamodels::ADELFE.bgf--------------------
NCS ::= Incomprehension ;
 NCS ::= Ambiguity ;
 NCS ::= Incompetence ;
 NCS ::= Unproductiveness ;
 NCS ::= Concurrency ;
 NCS ::= Conflict ;
 NCS ::= Uselessness ;
 NCS ::= cooperationRules::CooperationRules ;
CooperationRules ::= (detects::NCS)+ ;
CooperativeAgent ::= elementA::Element elementP::Element (representation::Representation)+ (skill::Skill)+ (aptitude::Aptitude)+ (characteristic::Characteristic)+ (communication::Communication)+ (observes::CooperationRules)+ ;
AIP ::= ε ;
--------------------metamodels::ASM.bgf--------------------
DoForallRule ::= id::VariableDecl inSet::Universe condition::Term (doRule::Rule)+ ;
XAsmFile ::= XAsmSpec ;
 XAsmFile ::= Body ;
XAsmSpec ::= (Asm::Asm)+ ;
SkipRule ::= inSequence::Boolean ;
ExtendRule ::= (extensions::Extension)+ (rules::Rule)+ ;
ElseIf ::= condition::Term (thenRule::Rule)+ elseRule::Rule elseIfRule::ElseIf ;
AsmType ::= (function::ε) | (subasm::ε) ;
StringConstant ::= value::String ;
ChooseRule ::= chooseId::VariableDecl inSet::Universe guard::Term (ifChoosenRules::Rule)+ ifNotChoosenRule::Rule ;
UndefConstant ::= ε ;
OperatorTerm ::= opName::String leftExp::Term rightExp::Term ;
ReturnRule ::= term::Term ;
BooleanConstant ::= value::Boolean ;
AsmInvocation ::= asmName::String (arguments::Term)+ ;
LocatedElement ::= XAsmFile ;
 LocatedElement ::= Asm ;
 LocatedElement ::= Signature ;
 LocatedElement ::= MetaInformation ;
 LocatedElement ::= AccessUpdateFunction ;
 LocatedElement ::= Declaration ;
 LocatedElement ::= Parameter ;
 LocatedElement ::= Initialization ;
 LocatedElement ::= Term ;
 LocatedElement ::= Rule ;
 LocatedElement ::= ElseIf ;
 LocatedElement ::= ElementDecl ;
 LocatedElement ::= Extension ;
AccessUpdateType ::= (access::ε) | (update::ε) ;
MetaInformation ::= (usedAsIn::Signature)+ usedAs::AsmType (accessUpdateFunctions::AccessUpdateFunction)+ ;
VariableDecl ::= Argument ;
ElementDecl ::= VariableDecl ;
 ElementDecl ::= Function ;
UpdateRule ::= function::FunctionOrVariableTerm updateTerm::Term ;
AccessUpdateFunction ::= type::AccessUpdateType (functions::Function)+ ;
FunctionOrVariableTerm ::= declaration::ElementDecl (terms::Term)+ ;
ConditionalRule ::= condition::Term (thenRule::Rule)+ elseRule::Rule elseIfRule::ElseIf ;
IntegerConstant ::= value::Integer ;
--------------------metamodels::ATL.bgf--------------------
CollectionExp ::= BagExp ;
 CollectionExp ::= OrderedSetExp ;
 CollectionExp ::= SequenceExp ;
 CollectionExp ::= SetExp ;
RealExp ::= realSymbol::Double ;
SequenceExp ::= (elements::OclExpression)+ ;
OperatorCallExp ::= (arguments::OclExpression)+ operationName::String ;
SetExp ::= (elements::OclExpression)+ ;
NavigationOrAttributeCallExp ::= name::String ;
IntegerType ::= ε ;
LibraryRef ::= unit::Unit name::String ;
BooleanExp ::= booleanSymbol::Boolean ;
InPatternElement ::= SimpleInPatternElement ;
NumericExp ::= RealExp ;
 NumericExp ::= IntegerExp ;
EnumLiteralExp ::= name::String ;
PatternElement ::= InPatternElement ;
 PatternElement ::= OutPatternElement ;
LocatedElement ::= Unit ;
 LocatedElement ::= ModuleElement ;
 LocatedElement ::= InPattern ;
 LocatedElement ::= OutPattern ;
 LocatedElement ::= Binding ;
 LocatedElement ::= LibraryRef ;
 LocatedElement ::= ActionBlock ;
 LocatedElement ::= Statement ;
 LocatedElement ::= OclExpression ;
 LocatedElement ::= MapElement ;
 LocatedElement ::= VariableDeclaration ;
 LocatedElement ::= TupleTypeAttribute ;
 LocatedElement ::= OclFeatureDefinition ;
 LocatedElement ::= OclContextDefinition ;
 LocatedElement ::= OclFeature ;
 LocatedElement ::= OclModel ;
IterateExp ::= result::VariableDeclaration ;
BooleanType ::= ε ;
VariableExp ::= referredVariable::VariableDeclaration ;
OclFeature ::= Attribute ;
 OclFeature ::= Operation ;
BindingStat ::= source::OclExpression propertyName::String isAssignment::Boolean value::OclExpression ;
ActionBlock ::= rule::Rule (statements::Statement)+ ;
CollectionOperationCallExp ::= (arguments::OclExpression)+ operationName::String ;
PrimitiveExp ::= StringExp ;
 PrimitiveExp ::= BooleanExp ;
 PrimitiveExp ::= NumericExp ;
TupleExp ::= (tuplePart::TuplePart)+ ;
OclType ::= CollectionType ;
 OclType ::= Primitive ;
 OclType ::= OclAnyType ;
 OclType ::= TupleType ;
 OclType ::= OclModelElement ;
 OclType ::= MapType ;
 OclType ::= name::String definitions::OclContextDefinition oclExpression::OclExpression operation::Operation mapType2::MapType attribute::Attribute mapType::MapType collectionTypes::CollectionType tupleTypeAttribute::TupleTypeAttribute variableDeclaration::VariableDeclaration ;
OclFeatureDefinition ::= feature::OclFeature context_::OclContextDefinition ;
ModuleElement ::= Helper ;
 ModuleElement ::= Rule ;
OclContextDefinition ::= definition::OclFeatureDefinition context_::OclType ;
NumericType ::= IntegerType ;
 NumericType ::= RealType ;
OclUndefinedExp ::= type::OclType ifExp3::IfExp appliedProperty::PropertyCallExp collection::CollectionExp letExp::LetExp loopExp::LoopExp parentOperation::OperationCallExp initializedVariable::VariableDeclaration ifExp2::IfExp owningOperation::Operation ifExp1::IfExp owningAttribute::Attribute ;
SimpleInPatternElement ::= mapsTo::OutPatternElement inPattern::InPattern (models::OclModel)+ ;
SuperExp ::= type::OclType ifExp3::IfExp appliedProperty::PropertyCallExp collection::CollectionExp letExp::LetExp loopExp::LoopExp parentOperation::OperationCallExp initializedVariable::VariableDeclaration ifExp2::IfExp owningOperation::Operation ifExp1::IfExp owningAttribute::Attribute ;
BagType ::= elementType::OclType ;
MapExp ::= (elements::MapElement)+ ;
VariableDeclaration ::= PatternElement ;
 VariableDeclaration ::= RuleVariableDeclaration ;
 VariableDeclaration ::= TuplePart ;
 VariableDeclaration ::= Iterator ;
 VariableDeclaration ::= Parameter ;
 VariableDeclaration ::= id::String varName::String type::OclType initExpression::OclExpression letExp::LetExp baseExp::IterateExp (variableExp::VariableExp)+ ;
TuplePart ::= tuple::TupleExp ;
SequenceType ::= elementType::OclType ;
TupleTypeAttribute ::= type::OclType tupleType::TupleType name::String ;
LoopExp ::= IterateExp ;
 LoopExp ::= IteratorExp ;
CalledRule ::= (parameters::Parameter)+ isEntrypoint::Boolean isEndpoint::Boolean ;
IfStat ::= condition::OclExpression (thenStatements::Statement)+ (elseStatements::Statement)+ ;
OclExpression ::= VariableExp ;
 OclExpression ::= SuperExp ;
 OclExpression ::= PrimitiveExp ;
 OclExpression ::= CollectionExp ;
 OclExpression ::= TupleExp ;
 OclExpression ::= MapExp ;
 OclExpression ::= EnumLiteralExp ;
 OclExpression ::= OclUndefinedExp ;
 OclExpression ::= PropertyCallExp ;
 OclExpression ::= LetExp ;
 OclExpression ::= IfExp ;
 OclExpression ::= OclType ;
IteratorExp ::= name::String ;
OrderedSetType ::= elementType::OclType ;
OclAnyType ::= name::String definitions::OclContextDefinition oclExpression::OclExpression operation::Operation mapType2::MapType attribute::Attribute mapType::MapType collectionTypes::CollectionType tupleTypeAttribute::TupleTypeAttribute variableDeclaration::VariableDeclaration ;
ExpressionStat ::= expression::OclExpression ;
StringExp ::= stringSymbol::String ;
OclModelElement ::= model::OclModel ;
PropertyCallExp ::= NavigationOrAttributeCallExp ;
 PropertyCallExp ::= OperationCallExp ;
 PropertyCallExp ::= LoopExp ;
LetExp ::= variable::VariableDeclaration in_::OclExpression ;
RuleVariableDeclaration ::= rule::Rule ;
IfExp ::= thenExpression::OclExpression condition::OclExpression elseExpression::OclExpression ;
MapElement ::= map::MapExp key::OclExpression value::OclExpression ;
MatchedRule ::= LazyMatchedRule ;
 MatchedRule ::= inPattern::InPattern (children::MatchedRule)+ superRule::MatchedRule isAbstract::Boolean isRefining::Boolean isNoDefault::Boolean ;
IntegerExp ::= integerSymbol::Integer ;
ForStat ::= iterator::Iterator collection::OclExpression (statements::Statement)+ ;
SetType ::= elementType::OclType ;
OutPatternElement ::= SimpleOutPatternElement ;
 OutPatternElement ::= ForEachOutPatternElement ;
RealType ::= ε ;
CollectionType ::= BagType ;
 CollectionType ::= OrderedSetType ;
 CollectionType ::= SequenceType ;
 CollectionType ::= SetType ;
 CollectionType ::= elementType::OclType ;
OperationCallExp ::= OperatorCallExp ;
 OperationCallExp ::= CollectionOperationCallExp ;
 OperationCallExp ::= (arguments::OclExpression)+ operationName::String ;
MapType ::= valueType::OclType keyType::OclType ;
BagExp ::= (elements::OclExpression)+ ;
OclModel ::= name::String metamodel::OclModel (elements::OclModelElement)+ (model::OclModel)+ ;
ForEachOutPatternElement ::= collection::OclExpression iterator::Iterator ;
LazyMatchedRule ::= isUnique::Boolean ;
StringType ::= ε ;
InPattern ::= (elements::InPatternElement)+ rule::MatchedRule filter::OclExpression ;
OrderedSetExp ::= (elements::OclExpression)+ ;
SimpleOutPatternElement ::= (reverseBindings::OclExpression)+ ;
TupleType ::= (attributes::TupleTypeAttribute)+ ;
OutPattern ::= rule::Rule (elements::OutPatternElement)+ ;
--------------------metamodels::AWKPrograms.bgf--------------------
AWKProgram ::= name::String input::File output::File script::Script ;
FinalRule ::= r_script::Script pattern::Pattern action::Action ;
InitialRule ::= r_script::Script pattern::Pattern action::Action ;
--------------------metamodels::Agate.bgf--------------------
ReferenceLogicalComponent ::= (composedOf::ReferenceLogicalComponent)+ ;
FunctionalRelation ::= necessaryObjectOF::OperationalFunction dependentObjectOF::OperationalFunction necessaryObjectOO::OrganizationObject dependentObjectOO::OrganizationObject necessaryObjectP::Package dependentObjectP::Package ;
GenericActor ::= Actor ;
TelecomOperator ::= contractType::String (interfaces::Interface)+ ;
OrganizationObject ::= GenericCenter ;
 OrganizationObject ::= InformationSystem ;
 OrganizationObject ::= GenericRole ;
 OrganizationObject ::= GenericActor ;
OperationalRequirement ::= criticality::Integer priority::String state::String (isCoveredBy::ArchitectureObject)+ (characterizes::ArchitectureObject)+ ;
GenericThreat ::= Threat ;
GenericCenter ::= Center ;
ReferenceTechnicalComponent ::= (composedOf::ReferenceTechnicalComponent)+ ;
AGATEObject ::= Objective ;
 AGATEObject ::= OperationalContext ;
 AGATEObject ::= Project ;
 AGATEObject ::= GenericStandard ;
 AGATEObject ::= GenericThreat ;
 AGATEObject ::= TrafficClass ;
 AGATEObject ::= InterfaceCharacteristic ;
 AGATEObject ::= ProjectContextElement ;
 AGATEObject ::= DataClass ;
 AGATEObject ::= Event ;
 AGATEObject ::= Risk ;
 AGATEObject ::= Stake ;
 AGATEObject ::= Requirement ;
 AGATEObject ::= Means ;
 AGATEObject ::= DomainRelation ;
 AGATEObject ::= ArchitectureObject ;
OperationalFunction ::= (composedOf::OperationalFunction)+ (isCoveredByP::Package)+ (isCoveredByS::Service)+ ;
ReusableObject ::= GenericSite ;
 ReusableObject ::= Package ;
 ReusableObject ::= Service ;
 ReusableObject ::= TechnicalComponent ;
 ReusableObject ::= LogicalComponent ;
 ReusableObject ::= OperationalFunction ;
 ReusableObject ::= OrganizationObject ;
ProjectContextElement ::= type::String ;
CountermeasureRequirement ::= type::String residualVulnerability::String ;
GenericSite ::= Site ;
ConfidentialityLevel ::= type::String ;
OperationalContext ::= notice::String description::String sensitivity::Integer name::String comment::String isValidIn::OperationalContext isAssociatedWith::Stake ;
MADIOSObject ::= Process ;
 MADIOSObject ::= Procedure ;
 MADIOSObject ::= Operation ;
 MADIOSObject ::= Activity ;
InformationSystem ::= nature::String version::String membershipCountry::String currentLocation::String startServiceDate::String stopServiceDate::String isGeneric::Boolean functionalDomain::String type::String (composedOf::InformationSystem)+ (associatedProjects::Project)+ (defines::Objective)+ (fulfills::Role)+ (fixes::OperationalContext)+ (usedBy::Actor)+ (interfaces::Interface)+ ;
TrafficClass ::= (traffic::Traffic)+ ;
InformationFlow ::= priority::Integer frequency::String media::String continuity::String myContainer::String time::String availabilityRatio::String integrity::Integer interoperabilityLevel::Integer mediumFlow::String maximumFlow::String duration::String unitMediumFlow::String averageEvent::String maximumFlowOverOneDuration::String transports::Information receiverP::Package transmitterP::Package receiverOO::OrganizationObject transmitterOO::OrganizationObject receiverOF::OperationalFunction transmitterOF::OperationalFunction ;
ServiceReferenceFrame ::= (composedOfRS::ReferenceService)+ (composedOfRLC::ReferenceLogicalComponent)+ ;
CommunicationObject ::= Interface ;
 CommunicationObject ::= Interconnection ;
 CommunicationObject ::= InformationFlow ;
 CommunicationObject ::= Traffic ;
 CommunicationObject ::= Information ;
LogicalComponent ::= type::String statut::String (composedOf::LogicalComponent)+ isASpecializationOf::ReferenceLogicalComponent (interfaces::Interface)+ isCoveredBy::TechnicalComponent ;
InterfaceCharacteristic ::= ConfidentialityLevel ;
 InterfaceCharacteristic ::= Protocol ;
 InterfaceCharacteristic ::= Flow ;
 InterfaceCharacteristic ::= Other ;
GenericStandard ::= Standard ;
PerformanceRequirement ::= criticality::Integer priority::String state::String (isCoveredBy::ArchitectureObject)+ (characterizes::ArchitectureObject)+ ;
ArchitectureObject ::= ReusableObject ;
 ArchitectureObject ::= CommunicationObject ;
DataClass ::= notice::String description::String sensitivity::Integer name::String comment::String isValidIn::OperationalContext isAssociatedWith::Stake ;
GenericRole ::= Role ;
ReferenceService ::= (composedOf::ReferenceObject)+ ;
ReferenceObject ::= ReferenceTechnicalComponent ;
 ReferenceObject ::= TechnicalComponentReferenceFrame ;
 ReferenceObject ::= ReferenceLogicalComponent ;
 ReferenceObject ::= ReferenceService ;
TechnicalRequirement ::= criticality::Integer priority::String state::String (isCoveredBy::ArchitectureObject)+ (characterizes::ArchitectureObject)+ ;
HierarchicalRelation ::= ε ;
InteroperabilityRequirement ::= criticality::Integer priority::String state::String (isCoveredBy::ArchitectureObject)+ (characterizes::ArchitectureObject)+ ;
SecurityRequirement ::= criticality::Integer priority::String state::String (isCoveredBy::ArchitectureObject)+ (characterizes::ArchitectureObject)+ ;
TechnicalComponentReferenceFrame ::= (composedOf::ReferenceTechnicalComponent)+ ;
TechnicalComponent ::= type::String cots::Boolean editor::Boolean constructor::Boolean version::String technology::String definedExtension::String statut::String (composedOf::TechnicalComponent)+ isASpecializationOf::ReferenceTechnicalComponent (interfaces::Interface)+ ;
DomainRelation ::= HierarchicalRelation ;
 DomainRelation ::= FunctionalRelation ;
 DomainRelation ::= Dependence ;
--------------------metamodels::AntScripts.bgf--------------------
TaskElement ::= Task ;
 TaskElement ::= TaskParameter ;
TaskParameter ::= (attributes::Attribute)+ (elements::TaskElement)+ ;
CommentableElement ::= TaskElement ;
NamedElement ::= Attribute ;
 NamedElement ::= Project ;
 NamedElement ::= Target ;
 NamedElement ::= TaskElement ;
--------------------metamodels::AnyLogic.bgf--------------------
EmbeddedObject ::= presentation::EmbeddedObjectPresentation activeObjectClass::ActiveObjectClassRef genericParametersSubstitute::String (parameters::Parameter)+ ;
SimulationExperiment ::= activeObjectClass::ActiveObjectClass clientAreaTopLeft::Point presentationTopGroupPersistent::Boolean iconTopGroupPersistent::Boolean frame::Frame commandLineArguments::String maximumMemory::Integer randomSeed::Boolean seedValue::Integer vmArgs::String absoluteAccuracy::Double relativeAccuracy::Double timeAccuracy::Double fixedTimeStep::Double (shapes::Shape)+ (controls::Control)+ (parameters::Parameter)+ enableAdaptiveFrameManagement::Boolean enableAntiAliasing::Boolean enablePanning::Boolean enableZoom::Boolean executionMode::String cpuRatio::String title::String framesPerSecond::String realTimeScale::String (uiProperties::Parameter)+ useCalendar::Boolean stopOption::String initialDate::String initialTime::String finalDate::String finalTime::String modelTimeUnit::String ;
EmbeddedObjectPresentation ::= asObject::Boolean embeddedIcon::Boolean rotation::Double ;
ActiveObjectClass ::= clientAreaTopLeft::Point presentationTopGroupPersistent::Boolean iconTopGroupPersistent::Boolean generic::Boolean genericParameters::String agent::Boolean environmentDefinesInitialLocation::Boolean (connectors::Connector)+ (embeddedObjects::EmbeddedObject)+ (shapes::Shape)+ ;
VisualModelElement ::= Connector ;
 VisualModelElement ::= EmbeddedObject ;
 VisualModelElement ::= Shape ;
 VisualModelElement ::= Control ;
 VisualModelElement ::= position::Point label::Point publicFlag::Boolean presentationFlag::Boolean showLabel::Boolean ;
ModelElement ::= VisualModelElement ;
 ModelElement ::= Model ;
 ModelElement ::= ActiveObjectClass ;
 ModelElement ::= Experiment ;
 ModelElement ::= id::Integer name::String excludeFromBuild::Boolean ;
ActiveObjectClassRef ::= packageName::String className::String ;
--------------------metamodels::Architectural_Description.bgf--------------------
MainView ::= (isProjectedOnto::ArchitectureView)+ (consistsOf::ModelElement)+ ;
ArchitectureDescription ::= (selects::ArchitectureView)+ (organizedBy::ArchitectureView)+ ;
ArchitectureViewPoint ::= defines::MainView (views::ArchitectureView)+ ;
ArchitectureView ::= (selectedBy::ArchitectureDescription)+ (constituents::ModelElement)+ (conformsTo::ArchitectureViewPoint)+ ;
ModelElement ::= ε ;
--------------------metamodels::AsmL.bgf--------------------
RangeSequence ::= minval::Term maxval::Term ;
EnumerateSet ::= (vals::Term)+ ;
SequenceType ::= of::Type ;
SkipRule ::= ownerBody::Body ;
StringConstant ::= val::String ;
NewInstance ::= name::String (parameters::Term)+ ;
ForallRule ::= (expressions::InWhereHolds)+ doRule::Body ;
NamedType ::= name::String ;
VarDeclaration ::= isConstant::Boolean isDeclaration::Boolean isLocal::Boolean name::String type::Type ;
MethodInvocation ::= called::MethodCallTerm ;
SequenceTerm ::= EnumerateSequence ;
 SequenceTerm ::= RangeSequence ;
UpdateFieldRule ::= path::VarTerm ;
StepUntilFixPoint ::= name::String ;
AsmLFile ::= (elements::AsmLElement)+ main::Main ;
ReturnRule ::= term::Term ;
NullConstant ::= ε ;
AsmLElement ::= Namespace ;
 AsmLElement ::= Structure ;
 AsmLElement ::= Class ;
 AsmLElement ::= Enumeration ;
 AsmLElement ::= Function ;
 AsmLElement ::= Type ;
 AsmLElement ::= VarDeclaration ;
LocatedElement ::= Body ;
 LocatedElement ::= InWhereHolds ;
 LocatedElement ::= AsmLFile ;
 LocatedElement ::= AsmLElement ;
 LocatedElement ::= VarOrCase ;
 LocatedElement ::= VarOrMethod ;
 LocatedElement ::= Enumerator ;
 LocatedElement ::= Parameter ;
 LocatedElement ::= Initially ;
 LocatedElement ::= Rule ;
 LocatedElement ::= Term ;
TupletType ::= types::Type ;
EnumerateSequence ::= (vals::Term)+ ;
StepWhile ::= expression::Term ;
StepExpression ::= StepWhile ;
 StepExpression ::= StepUntil ;
PredicateTerm ::= ForAllTerm ;
 PredicateTerm ::= ExistsTerm ;
 PredicateTerm ::= AnyIn ;
 PredicateTerm ::= (expressions::InWhereHolds)+ ;
IntegerConstant ::= val::Integer ;
TulpletTerm ::= terms::Term ;
StepForEach ::= (expressions::InWhereHolds)+ ;
AddRule ::= val::Term set::VarTerm ;
SetType ::= of::Type ;
VarOrCase ::= Case ;
UpdateVarRule ::= updateVar::Term ;
MapType ::= ofType::Type toType::Type ;
ElseIf ::= condition::Term thenRule::Body elseRule::Body elseIfRule::ElseIf ;
AlgorithmSet ::= (expressions::InWhereHolds)+ ;
ChooseRule ::= (expressions::InWhereHolds)+ ifChoosenRules::Body ifNotChoosenRule::Body ;
VarTerm ::= name::String ;
StepUntil ::= expression::Term ;
InWhereHolds ::= var::Term in::Term where::Term holds::Term ;
AnyIn ::= (expressions::InWhereHolds)+ ;
UpdateMapRule ::= updateMap::VarTerm (parameters::Term)+ ;
SetTerm ::= EnumerateSet ;
 SetTerm ::= RangeSet ;
 SetTerm ::= AlgorithmSet ;
BooleanConstant ::= val::Boolean ;
MethodCallTerm ::= NewInstance ;
 MethodCallTerm ::= name::String (parameters::Term)+ ;
VarOrMethod ::= Method ;
 VarOrMethod ::= ownerClass::Class ;
ExistsTerm ::= isUnique::Boolean ;
MapTerm ::= ofTerm::Term toTerm::Term separator::String ;
RangeSet ::= minval::Term maxval::Term ;
UpdateRule ::= UpdateVarRule ;
 UpdateRule ::= UpdateFieldRule ;
 UpdateRule ::= UpdateMapRule ;
ForAllTerm ::= (expressions::InWhereHolds)+ ;
ConditionalRule ::= ElseIf ;
 ConditionalRule ::= condition::Term thenRule::Body elseRule::Body elseIfRule::ElseIf ;
RemoveRule ::= val::Term set::VarTerm ;
--------------------metamodels::Automaton.bgf--------------------
FiniteAutomaton ::= (alphabet::String)+ (transitionSet::Transition)+ initialState::State (finalStateSet::State)+ (StateSet::State)+ ;
--------------------metamodels::BMM.bgf--------------------
BusinessProcess ::= (businessProcessRealizesCourseOfAction::CourseOfAction)+ (businessProcessManagerAsset::Asset)+ (businessProcessDeliversOfeering::Offering)+ ;
PotentialReward ::= (potentialImpactProvidesImpetusForDirective::Directive)+ ;
BusinessRule ::= (businessRuleGuidesBusinessProcess::BusinessProcess)+ ;
FixedAsset ::= Offering ;
 FixedAsset ::= (fixedAssetProvidesResource::Resource)+ ;
InfluencerCategory ::= (influencerCategoryCategorizesInfluencer::Influencer)+ ;
CourseOfAction ::= Tactic ;
 CourseOfAction ::= (enablingCourseofActionEnablesEnabledCourseOfAction::CourseOfAction)+ (broaderCourseofActionIncludesMoreSpecificCourseOfAction::CourseOfAction)+ courseOfActionChanneIsEffortsTowardsDesiredResult::DesiredResult (courseOfActionDeployAsset::Asset)+ (courseOfActionDefiensOffering::Offering)+ ;
DesiredResult ::= Goal ;
 DesiredResult ::= Objective ;
 DesiredResult ::= (broaderDesiredResultIncludesMoreSpecificDesiredResult::DesiredResult)+ ;
OrganizationUnit ::= (organizationUnitDefinesEnd::End)+ (organizationUnitEstablishesMeans::Means)+ (organizationUnitIsResponsibleForAsset::Asset)+ (organizationUnitIsResponsibleForLiability::Liability)+ (organizationUnitRecognizesInfluencer::Influencer)+ (organizationUnitActAsInfluencingOrganization::InfluencingOrganization)+ (organizationUnitMakesAssessment::Assessment)+ (organizationUnitIsResponsibleForBusinessProcess::BusinessProcess)+ ;
MotivationElement ::= Assessment ;
 MotivationElement ::= End ;
 MotivationElement ::= Influencer ;
 MotivationElement ::= InfluencingOrganization ;
 MotivationElement ::= Means ;
 MotivationElement ::= PotentialImpact ;
 MotivationElement ::= AssessmentCategory ;
 MotivationElement ::= InfluencerCategory ;
 MotivationElement ::= OrganizationCategory ;
 MotivationElement ::= OrganizationUnit ;
 MotivationElement ::= BusinessProcess ;
 MotivationElement ::= Asset ;
 MotivationElement ::= Liability ;
 MotivationElement ::= name::String description::String ;
InfluencingOrganization ::= (influencingOrganizationIsSourceOfInfluencer::Influencer)+ ;
PotentialImpact ::= PotentialReward ;
 PotentialImpact ::= Risk ;
 PotentialImpact ::= (potentialImpactProvidesImpetusForDirective::Directive)+ ;
BusinessPolicy ::= (businessPolicyIsBasisForBusinessRule::BusinessRule)+ (broaderBusinessPolicyIncludesMoreSpecificBusinessPolicy::BusinessPolicy)+ (businessPolicyGovernsBusinessProcess::BusinessProcess)+ ;
OrganizationCategory ::= (organizationCategoryCategorizesInfluencingOrganization::InfluencingOrganization)+ ;
AssessmentCategory ::= (assessmentCategoryCategoriesAssessment::Assessment)+ ;
--------------------metamodels::BPEL.bgf--------------------
IBinding ::= Binding ;
WSDLElement ::= WSDLExtensibleElement ;
 WSDLElement ::= MessageReference ;
 WSDLElement ::= PortType ;
 WSDLElement ::= Operation ;
 WSDLElement ::= Message ;
 WSDLElement ::= Part ;
 WSDLElement ::= ExtensibilityElement ;
 WSDLElement ::= WSDLImport ;
ExtensibilityElement ::= Property ;
 ExtensibilityElement ::= PropertyAlias ;
 ExtensibilityElement ::= messagepropertiesQuery ;
 ExtensibilityElement ::= PartnerLinkType ;
 ExtensibilityElement ::= Role ;
 ExtensibilityElement ::= Expression ;
 ExtensibilityElement ::= UnknownExtensibilityElement ;
 ExtensibilityElement ::= XSDSchemaExtensibilityElement ;
 ExtensibilityElement ::= required::EBoolean elementType::QName ;
XSDDisallowedSubstitutions ::= (extension::ε) | (substitution::ε) | (all::ε) | (restriction::ε) ;
XSDNumericFacet ::= value::EBoolean ;
PartnerLinks ::= (children::PartnerLink)+ ;
XSDComplexFinal ::= (all::ε) | (restriction::ε) | (extension::ε) ;
FaultHandler ::= (catch::Catch)+ catchAll::CatchAll ;
XSDWhiteSpace ::= (replace::ε) | (collapse::ε) | (preserve::ε) ;
EObject ::= ε ;
XSDIdentityConstraintCategory ::= (keyref::ε) | (unique::ε) | (key::ε) ;
FromPart ::= part::EString to::To ;
IPart ::= Part ;
OnEvent ::= activity::Activity variable::Variable partnerLink::PartnerLink correlations::Correlations operation::Operation portType::PortType messageType::Message (fromPart::FromPart)+ correlationSets::CorrelationSets ;
PartnerActivity ::= Invoke ;
 PartnerActivity ::= Receive ;
 PartnerActivity ::= Reply ;
 PartnerActivity ::= partnerLink::PartnerLink correlations::Correlations portType::PortType operation::Operation ;
XSDRedefinableComponent ::= XSDAttributeGroupDefinition ;
 XSDRedefinableComponent ::= XSDModelGroupDefinition ;
 XSDRedefinableComponent ::= XSDTypeDefinition ;
XSDComplexTypeDefinition ::= derivationMethod::XSDDerivationMethod (final::XSDComplexFinal)+ abstract::EBoolean contentTypeCategory::XSDContentTypeCategory (prohibitedSubstitutions::XSDProhibitedSubstitutions)+ (lexicalFinal::XSDComplexFinal)+ (block::XSDProhibitedSubstitutions)+ mixed::EBoolean contentAnnotation::XSDAnnotation baseTypeDefinition::XSDTypeDefinition content::XSDComplexTypeContent contentType::XSDComplexTypeContent (attributeUses::XSDAttributeUse)+ (attributeContents::XSDAttributeGroupContent)+ attributeWildcard::XSDWildcard attributeWildcardContent::XSDWildcard rootTypeDefinition::XSDTypeDefinition syntheticParticle::XSDParticle syntheticWildcard::XSDWildcard ;
CorrelationSets ::= (children::CorrelationSet)+ ;
CorrelationPattern ::= (outin::ε) | (in::ε) | (out::ε) ;
XSDNamedComponent ::= XSDFeature ;
 XSDNamedComponent ::= XSDIdentityConstraintDefinition ;
 XSDNamedComponent ::= XSDNotationDeclaration ;
 XSDNamedComponent ::= XSDRedefinableComponent ;
IBindingOperation ::= BindingOperation ;
XSDMinLengthFacet ::= value::EInt ;
XSDSimpleTypeDefinition ::= variety::XSDVariety (final::XSDSimpleFinal)+ (lexicalFinal::XSDSimpleFinal)+ (validFacets::EString)+ (contents::XSDSimpleTypeDefinition)+ (facetContents::XSDConstrainingFacet)+ (facets::XSDConstrainingFacet)+ (memberTypeDefinitions::XSDSimpleTypeDefinition)+ (fundamentalFacets::XSDFundamentalFacet)+ baseTypeDefinition::XSDSimpleTypeDefinition primitiveTypeDefinition::XSDSimpleTypeDefinition itemTypeDefinition::XSDSimpleTypeDefinition rootTypeDefinition::XSDSimpleTypeDefinition minFacet::XSDMinFacet maxFacet::XSDMaxFacet maxInclusiveFacet::XSDMaxInclusiveFacet minInclusiveFacet::XSDMinInclusiveFacet minExclusiveFacet::XSDMinExclusiveFacet maxExclusiveFacet::XSDMaxExclusiveFacet lengthFacet::XSDLengthFacet whiteSpaceFacet::XSDWhiteSpaceFacet (enumerationFacets::XSDEnumerationFacet)+ (patternFacets::XSDPatternFacet)+ cardinalityFacet::XSDCardinalityFacet numericFacet::XSDNumericFacet maxLengthFacet::XSDMaxLengthFacet minLengthFacet::XSDMinLengthFacet totalDigitsFacet::XSDTotalDigitsFacet fractionDigitsFacet::XSDFractionDigitsFacet orderedFacet::XSDOrderedFacet boundedFacet::XSDBoundedFacet effectiveMaxFacet::XSDMaxFacet effectiveWhiteSpaceFacet::XSDWhiteSpaceFacet effectiveMaxLengthFacet::XSDMaxLengthFacet effectiveFractionDigitsFacet::XSDFractionDigitsFacet effectivePatternFacet::XSDPatternFacet effectiveEnumerationFacet::XSDEnumerationFacet effectiveTotalDigitsFacet::XSDTotalDigitsFacet effectiveMinLengthFacet::XSDMinLengthFacet effectiveLengthFacet::XSDLengthFacet effectiveMinFacet::XSDMinFacet (syntheticFacets::XSDFacet)+ ;
BindingOutput ::= name::EString eOutput::Output ;
TerminationHandler ::= activity::Activity ;
XSDSchemaDirective ::= XSDImport ;
 XSDSchemaDirective ::= XSDSchemaCompositor ;
IPortType ::= PortType ;
XSDConstrainingFacet ::= XSDFixedFacet ;
 XSDConstrainingFacet ::= XSDRepeatableFacet ;
PartnerLink ::= name::EString myRole::Role partnerRole::Role PartnerLinkType::PartnerLinkType initializePartnerRole::EBooleanObject ;
BooleanExpression ::= body::EJavaObject expressionLanguage::EString opaque::EBooleanObject ;
XSDProcessContents ::= (skip::ε) | (lax::ε) | (strict::ε) ;
XSDInclude ::= annotation::XSDAnnotation ;
XSDAttributeGroupDefinition ::= attributeGroupDefinitionReference::EBoolean annotation::XSDAnnotation (contents::XSDAttributeGroupContent)+ (attributeUses::XSDAttributeUse)+ attributeWildcardContent::XSDWildcard attributeWildcard::XSDWildcard resolvedAttributeGroupDefinition::XSDAttributeGroupDefinition syntheticWildcard::XSDWildcard ;
ServiceRef ::= referenceScheme::EString value::EJavaObject ;
BindingFault ::= name::EString eFault::Fault ;
IExtensibilityElement ::= ExtensibilityElement ;
XSDAnnotation ::= (applicationInformation::XSDDOMElement)+ (userInformation::XSDDOMElement)+ (attributes::DOMAttr)+ ;
XSDTerm ::= XSDModelGroup ;
 XSDTerm ::= XSDWildcard ;
XSDAttributeUseCategory ::= (prohibited::ε) | (optional::ε) | (required::ε) ;
ITypes ::= Types ;
XSDNotationDeclaration ::= systemIdentifier::EString publicIdentifier::EString annotation::XSDAnnotation ;
XSDImport ::= namespace::EString annotation::XSDAnnotation ;
EndpointReferenceRole ::= (partnerRole::ε) | (myRole::ε) ;
XSDSchema ::= document::XSDDOMDocument schemaLocation::EString targetNamespace::EString attributeFormDefault::XSDForm elementFormDefault::XSDForm (finalDefault::XSDProhibitedSubstitutions)+ (blockDefault::XSDDisallowedSubstitutions)+ version::EString (contents::XSDSchemaContent)+ (elementDeclarations::XSDElementDeclaration)+ (attributeDeclarations::XSDAttributeDeclaration)+ (attributeGroupDefinitions::XSDAttributeGroupDefinition)+ (typeDefinitions::XSDTypeDefinition)+ (modelGroupDefinitions::XSDModelGroupDefinition)+ (identityConstraintDefinitions::XSDIdentityConstraintDefinition)+ (notationDeclarations::XSDNotationDeclaration)+ (annotations::XSDAnnotation)+ (allDiagnostics::XSDDiagnostic)+ (referencingDirectives::XSDSchemaDirective)+ rootVersion::XSDSchema originalVersion::XSDSchema (incorporatedVersions::XSDSchema)+ schemaForSchema::XSDSchema ;
XSDFractionDigitsFacet ::= value::EInt ;
XSDWildcard ::= namespaceConstraintCategory::XSDNamespaceConstraintCategory (namespaceConstraint::EString)+ processContents::XSDProcessContents (lexicalNamespaceConstraint::EString)+ annotation::XSDAnnotation (annotations::XSDAnnotation)+ ;
CorrelationSet ::= name::EString (properties::Property)+ ;
XSDSchemaExtensibilityElement ::= schema::XSDSchema ;
XSDComplexTypeContent ::= XSDParticle ;
 XSDComplexTypeContent ::= XSDSimpleTypeDefinition ;
XSDMaxExclusiveFacet ::= value::Value inclusive::EBoolean exclusive::EBoolean ;
XSDAttributeUse ::= required::EBoolean value::Value constraint::XSDConstraint use::XSDAttributeUseCategory lexicalValue::EString attributeDeclaration::XSDAttributeDeclaration content::XSDAttributeDeclaration ;
XSDOrderedFacet ::= value::XSDOrdered ;
OnAlarm ::= activity::Activity for::Expression until::Expression repeatEvery::Expression ;
XSDCardinalityFacet ::= value::XSDCardinality ;
XSDFacet ::= XSDConstrainingFacet ;
 XSDFacet ::= XSDFundamentalFacet ;
XSDAttributeGroupContent ::= XSDAttributeUse ;
BPELExtensibleElement ::= Process ;
 BPELExtensibleElement ::= PartnerLink ;
 BPELExtensibleElement ::= FaultHandler ;
 BPELExtensibleElement ::= Activity ;
 BPELExtensibleElement ::= CorrelationSet ;
 BPELExtensibleElement ::= Link ;
 BPELExtensibleElement ::= Catch ;
 BPELExtensibleElement ::= Case ;
 BPELExtensibleElement ::= OnAlarm ;
 BPELExtensibleElement ::= Copy ;
 BPELExtensibleElement ::= Extension ;
 BPELExtensibleElement ::= CompensationHandler ;
 BPELExtensibleElement ::= To ;
 BPELExtensibleElement ::= OnMessage ;
 BPELExtensibleElement ::= Correlation ;
 BPELExtensibleElement ::= EventHandler ;
 BPELExtensibleElement ::= Source ;
 BPELExtensibleElement ::= Target ;
 BPELExtensibleElement ::= PartnerLinks ;
 BPELExtensibleElement ::= Variables ;
 BPELExtensibleElement ::= CorrelationSets ;
 BPELExtensibleElement ::= Links ;
 BPELExtensibleElement ::= CatchAll ;
 BPELExtensibleElement ::= Correlations ;
 BPELExtensibleElement ::= Variable ;
 BPELExtensibleElement ::= Otherwise ;
 BPELExtensibleElement ::= OnEvent ;
 BPELExtensibleElement ::= Targets ;
 BPELExtensibleElement ::= Sources ;
 BPELExtensibleElement ::= Extensions ;
 BPELExtensibleElement ::= TerminationHandler ;
 BPELExtensibleElement ::= Then ;
 BPELExtensibleElement ::= ElseIf ;
 BPELExtensibleElement ::= Else ;
 BPELExtensibleElement ::= From ;
 BPELExtensibleElement ::= documentation::Documentation ;
XSDCompositor ::= (all::ε) | (choice::ε) | (sequence::ε) ;
XSDAttributeDeclaration ::= attributeDeclarationReference::EBoolean annotation::XSDAnnotation anonymousTypeDefinition::XSDSimpleTypeDefinition typeDefinition::XSDSimpleTypeDefinition resolvedAttributeDeclaration::XSDAttributeDeclaration ;
IBindingFault ::= BindingFault ;
XSDOrdered ::= (total::ε) | (partial::ε) ;
BindingOperation ::= name::EString eOperation::Operation eBindingInput::BindingInput eBindingOutput::BindingOutput (eBindingFaults::BindingFault)+ ;
CompletionCondition ::= branches::Branches ;
IMessage ::= Message ;
WSDLExtensibleElement ::= BPELExtensibleElement ;
 WSDLExtensibleElement ::= Binding ;
 WSDLExtensibleElement ::= BindingOperation ;
 WSDLExtensibleElement ::= Service ;
 WSDLExtensibleElement ::= Port ;
 WSDLExtensibleElement ::= Definition ;
 WSDLExtensibleElement ::= BindingInput ;
 WSDLExtensibleElement ::= BindingOutput ;
 WSDLExtensibleElement ::= BindingFault ;
 WSDLExtensibleElement ::= Types ;
UnknownExtensibilityAttribute ::= (children::UnknownExtensibilityElement)+ ;
IDefinition ::= Definition ;
XSDMaxFacet ::= XSDMaxExclusiveFacet ;
 XSDMaxFacet ::= XSDMaxInclusiveFacet ;
PortType ::= qName::QName undefined::EBoolean proxy::EBoolean resourceURI::EString (eOperations::Operation)+ ;
XSDSimpleFinal ::= (list::ε) | (restriction::ε) | (all::ε) | (union::ε) ;
BPELImport ::= namespace::EString location::EString importType::EString ;
XSDEnumerationFacet ::= (value::Value)+ ;
XSDRedefine ::= (annotations::XSDAnnotation)+ (contents::XSDRedefineContent)+ ;
XSDMaxLengthFacet ::= value::EInt ;
XSDMinInclusiveFacet ::= value::Value inclusive::EBoolean exclusive::EBoolean ;
XSDWhiteSpaceFacet ::= value::XSDWhiteSpace ;
OpaqueActivity ::= name::EString suppressJoinFailure::EBooleanObject targets::Targets sources::Sources ;
EventHandler ::= (alarm::OnAlarm)+ (events::OnEvent)+ ;
CompensationHandler ::= activity::Activity ;
XSDSchemaContent ::= XSDRedefineContent ;
 XSDSchemaContent ::= XSDSchemaDirective ;
 XSDSchemaContent ::= XSDAttributeDeclaration ;
 XSDSchemaContent ::= XSDNotationDeclaration ;
messagepropertiesQuery ::= queryLanguage::EString value::EString ;
IPort ::= Port ;
XSDElementDeclaration ::= nillable::EBoolean (disallowedSubstitutions::XSDDisallowedSubstitutions)+ (substitutionGroupExclusions::XSDSubstitutionGroupExclusions)+ abstract::EBoolean (lexicalFinal::XSDProhibitedSubstitutions)+ (block::XSDDisallowedSubstitutions)+ elementDeclarationReference::EBoolean circular::EBoolean annotation::XSDAnnotation anonymousTypeDefinition::XSDTypeDefinition typeDefinition::XSDTypeDefinition (identityConstraintDefinitions::XSDIdentityConstraintDefinition)+ resolvedElementDeclaration::XSDElementDeclaration substitutionGroupAffiliation::XSDElementDeclaration (substitutionGroup::XSDElementDeclaration)+ ;
XSDConstraint ::= (fixed::ε) | (default::ε) ;
BindingInput ::= name::EString eInput::Input ;
RepeatUntil ::= activity::Activity condition::Condition ;
XSDBoundedFacet ::= value::EBoolean ;
XSDVariety ::= (union::ε) | (list::ε) | (atomic::ε) ;
XSDModelGroup ::= compositor::XSDCompositor annotation::XSDAnnotation (contents::XSDParticle)+ (particles::XSDParticle)+ ;
PropertyAlias ::= messageType::EJavaObject part::EString propertyName::EJavaObject ID::EString wsdlPart::Part query::messagepropertiesQuery type::EJavaObject XSDElement::EJavaObject ;
XSDRepeatableFacet ::= XSDEnumerationFacet ;
 XSDRepeatableFacet ::= XSDPatternFacet ;
ElseIf ::= condition::Condition activity::Activity ;
XSDTotalDigitsFacet ::= value::EInt ;
XSDComponent ::= XSDComplexTypeContent ;
 XSDComponent ::= XSDFacet ;
 XSDComponent ::= XSDNamedComponent ;
 XSDComponent ::= XSDScope ;
 XSDComponent ::= XSDXPathDefinition ;
 XSDComponent ::= XSDAnnotation ;
 XSDComponent ::= XSDAttributeUse ;
 XSDComponent ::= XSDTerm ;
BPELQuery ::= value::EString queryLanguage::EString ;
XSDPatternFacet ::= (value::EString)+ ;
XSDParticle ::= minOccurs::EInt maxOccurs::EInt content::XSDParticleContent term::XSDTerm ;
XSDConcreteComponent ::= XSDAttributeGroupContent ;
 XSDConcreteComponent ::= XSDComponent ;
 XSDConcreteComponent ::= XSDDiagnostic ;
 XSDConcreteComponent ::= XSDParticleContent ;
 XSDConcreteComponent ::= XSDSchemaContent ;
IImport ::= WSDLImport ;
ExtensionActivity ::= name::EString suppressJoinFailure::EBooleanObject targets::Targets sources::Sources ;
XSDMinFacet ::= XSDMinExclusiveFacet ;
 XSDMinFacet ::= XSDMinInclusiveFacet ;
XSDNamespaceConstraintCategory ::= (set::ε) | (not::ε) | (any::ε) ;
XSDDiagnosticSeverity ::= (fatal::ε) | (warning::ε) | (error::ε) | (information::ε) ;
XSDSchemaCompositor ::= XSDInclude ;
 XSDSchemaCompositor ::= XSDRedefine ;
ForEach ::= parallel::EBooleanObject counterName::Variable completionCondition::CompletionCondition iterator::Iterator activity::Activity ;
XSDDerivationMethod ::= (extension::ε) | (restriction::ε) ;
XSDFundamentalFacet ::= XSDBoundedFacet ;
 XSDFundamentalFacet ::= XSDCardinalityFacet ;
 XSDFundamentalFacet ::= XSDNumericFacet ;
 XSDFundamentalFacet ::= XSDOrderedFacet ;
XSDIdentityConstraintDefinition ::= identityConstraintCategory::XSDIdentityConstraintCategory annotation::XSDAnnotation referencedKey::XSDIdentityConstraintDefinition selector::XSDXPathDefinition (fields::XSDXPathDefinition)+ ;
XSDTypeDefinition ::= XSDComplexTypeDefinition ;
 XSDTypeDefinition ::= XSDSimpleTypeDefinition ;
XSDDiagnostic ::= severity::XSDDiagnosticSeverity message::EString locationURI::EString line::EInt column::EInt node::DOMNode annotationURI::EString key::EString (substitutions::EString)+ (components::XSDConcreteComponent)+ primaryComponent::XSDConcreteComponent ;
ToPart ::= part::EString from::From ;
IBindingInput ::= BindingInput ;
IService ::= Service ;
XSDFixedFacet ::= XSDFractionDigitsFacet ;
 XSDFixedFacet ::= XSDLengthFacet ;
 XSDFixedFacet ::= XSDMaxFacet ;
 XSDFixedFacet ::= XSDMaxLengthFacet ;
 XSDFixedFacet ::= XSDMinFacet ;
 XSDFixedFacet ::= XSDMinLengthFacet ;
 XSDFixedFacet ::= XSDTotalDigitsFacet ;
 XSDFixedFacet ::= XSDWhiteSpaceFacet ;
XSDScope ::= XSDSchema ;
 XSDScope ::= XSDComplexTypeDefinition ;
XSDParticleContent ::= XSDTerm ;
WSDLImport ::= namespaceURI::EString locationURI::EString eDefinition::Definition eSchema::XSDSchema ;
XSDCardinality ::= (countablyInfinite::ε) | (finite::ε) ;
MessageReference ::= Input ;
 MessageReference ::= Output ;
 MessageReference ::= Fault ;
IOperation ::= Operation ;
XSDSubstitutionGroupExclusions ::= (restriction::ε) | (extension::ε) ;
UnknownExtensibilityElement ::= UnknownExtensibilityAttribute ;
 UnknownExtensibilityElement ::= (children::UnknownExtensibilityElement)+ ;
IBindingOutput ::= BindingOutput ;
PartnerLinkType ::= name::EString ID::EString (role::Role)+ ;
XSDXPathVariety ::= (field::ε) | (selector::ε) ;
XSDModelGroupDefinition ::= modelGroupDefinitionReference::EBoolean annotation::XSDAnnotation modelGroup::XSDModelGroup resolvedModelGroupDefinition::XSDModelGroupDefinition ;
XSDProhibitedSubstitutions ::= (extension::ε) | (restriction::ε) | (all::ε) ;
XSDFeature ::= XSDAttributeDeclaration ;
 XSDFeature ::= XSDElementDeclaration ;
XSDForm ::= (unqualified::ε) | (qualified::ε) ;
OnMessage ::= variable::Variable activity::Activity portType::PortType partnerLink::PartnerLink correlations::Correlations operation::Operation (fromPart::FromPart)+ ;
XSDContentTypeCategory ::= (elementOnly::ε) | (mixed::ε) | (simple::ε) | (empty::ε) ;
XSDLengthFacet ::= value::EInt ;
XSDXPathDefinition ::= variety::XSDXPathVariety value::EString annotation::XSDAnnotation ;
CatchAll ::= activity::Activity ;
XSDMaxInclusiveFacet ::= value::Value inclusive::EBoolean exclusive::EBoolean ;
XSDRedefineContent ::= XSDAnnotation ;
 XSDRedefineContent ::= XSDRedefinableComponent ;
 XSDRedefineContent ::= XSDTypeDefinition ;
XSDMinExclusiveFacet ::= value::Value inclusive::EBoolean exclusive::EBoolean ;
--------------------metamodels::BPMN.bgf--------------------
SubProcess ::= (eventHandlers::Activity)+ isTransaction::Boolean ;
SequenceEdge ::= graph::Graph isDefault::Boolean source::Vertex target::Vertex ;
TextAnnotation ::= (associations::Association)+ artifactsContainer::ArtifactsContainer ;
DirectionType ::= (Both::ε) | (From::ε) | (To::ε) | (None::ε) ;
DataObject ::= (associations::Association)+ artifactsContainer::ArtifactsContainer ;
ActivityType ::= (SubProcess::ε) | (EventEndMultiple::ε) | (EventEndMessage::ε) | (EventIntermediateMessage::ε) | (EventStartMultiple::ε) | (EventIntermediateMultiple::ε) | (GatewayParallel::ε) | (EventStartTimer::ε) | (EventStartEmpty::ε) | (EventIntermediateCancel::ε) | (EventEndError::ε) | (EventStartRule::ε) | (EventEndTerminate::ε) | (EventStartLink::ε) | (EventIntermediateLink::ε) | (EventEndCancel::ε) | (EventEndLink::ε) | (EventIntermediateEmpty::ε) | (EventIntermediateCompensation::ε) | (Task::ε) | (GatewayDataBasedExclusive::ε) | (GatewayComplex::ε) | (EventEndEmpty::ε) | (EventIntermediateError::ε) | (EventIntermediateTimer::ε) | (EventEndCompensation::ε) | (EventStartMessage::ε) | (GatewayDataBasedInclusive::ε) | (GatewayEventBasedExclusive::ε) | (EventIntermediateRule::ε) ;
IdentifiableNode ::= Vertex ;
 IdentifiableNode ::= Graph ;
 IdentifiableNode ::= (associations::Association)+ ;
NamedBpmnObject ::= ArtifactsContainer ;
 NamedBpmnObject ::= Activity ;
 NamedBpmnObject ::= Artifact ;
 NamedBpmnObject ::= Lane ;
 NamedBpmnObject ::= MessagingEdge ;
 NamedBpmnObject ::= Pool ;
 NamedBpmnObject ::= SequenceEdge ;
 NamedBpmnObject ::= documentation::String name::String ncname::String ;
BpmnDiagram ::= (pools::Pool)+ (messages::MessagingEdge)+ author::String title::String ;
MessagingEdge ::= bpmnDiagram::BpmnDiagram source::Activity target::Activity ;
ArtifactsContainer ::= BpmnDiagram ;
 ArtifactsContainer ::= Graph ;
 ArtifactsContainer ::= (artifacts::Artifact)+ ;
--------------------metamodels::Bossa.bgf--------------------
ForwardMoveStmt ::= isHead::Boolean isTail::Boolean moveExpr::MoveExpr ;
NonProcType ::= system::Boolean struct::Boolean id::Boolean nonProcType::String ;
BossaProgramm ::= scheduler::Scheduler ;
Timer_ProcessVarDecl ::= id::String processDef::ProcessDef schedulerDef::SchedulerDef ;
HandlerDef ::= id::String scheduler::Scheduler (onHandlerDef::OnHandlerDef)+ ;
Integer_Expression ::= theValue::Integer ;
ClassNameStorage ::= id::String className::ClassName storage::Storage ;
AssignStmt ::= locExpr::LocExpr assignUnop::AssignUnop assignBinop::AssignBinop expr::Expression ;
OrderDef ::= keyCritDecl::KeyCritDecls critDecls::CritDecls abstractSchedulerDecl::AbstractSchedulerDecl ;
TraceEvent ::= (eventName::EventName)+ ;
Etoile_Expression ::= expr::Expression ;
False_Expression ::= ε ;
NormalScheduler ::= schedulerDecl::SchedulerDecl ;
Lifo_QueueType ::= ε ;
In_Expression ::= in::Boolean expr::Expression classState::ClassState ;
CompoKeyCritDecls ::= critDecl::CritDecl ;
TypeExpr ::= id::String bossaTypeExpr::BossaTypeExpr ;
FunctionDef ::= (composantOfInterFunc::ComposantOfInterFunc)+ scheduler::Scheduler ;
Process_Storage ::= ε ;
SchedulerDef ::= (processVarDecl::ProcessVarDecl)+ ;
AssignUnop ::= doublePlus::Boolean doubleMoins::Boolean ;
True_Expression ::= ε ;
SchedulerDecl ::= processDef::ProcessDef ;
FnName_Expression ::= (expr::Expression)+ ;
StateVisibility ::= public::Boolean private::Boolean ;
BossaTypeExpr ::= bossaTypeExpr::String ;
ParameterType ::= (typeExpr::TypeExpr)+ ;
AbstractSchedulerDecl ::= SchedulerDecl ;
 AbstractSchedulerDecl ::= VSchdulerDecl ;
StateRef ::= stateRef::String ;
NormalMoveStmt ::= stateRef::StateRef ;
ExpId_Expression ::= id::String expr::Expression ;
Parenthese_Expression ::= expr::Expression ;
AdmissionDef ::= (valDef::ValDef)+ admCrit::AdmCrit attachDetach::AttachDetach abstractSchedulerDecl::AbstractSchedulerDecl ;
System_ValDecl ::= nonProcType::NonProcType ;
Normal_ProcessVarDecl ::= typeExpr::TypeExpr ;
AssignBinop ::= affect::Boolean plusEqual::Boolean moinsEqual::Boolean starEqual::Boolean slashEqual::Boolean percentageEqual::Boolean andEqual::Boolean orEqual::Boolean doubleLtEqual::Boolean doubleGtEqual::Boolean ;
IDTarget_MoveExpr ::= id::String ;
MoveStmt ::= NormalMoveStmt ;
 MoveStmt ::= ForwardMoveStmt ;
AttachDetach ::= procParam1::ProcParam procParam2::ProcParam seqStmt1::SeqStmt seqStmt2::SeqStmt ;
TraceTest ::= expr::Expression ;
ComposantOfInterFunc ::= id::String typeOrVoid::TypeOrVoid (paramVarDecl::ParamVarDecl)+ seqStmt::SeqStmt ;
StateDef ::= (classNameStorage::ClassNameStorage)+ abstractSchedulerDecl::AbstractSchedulerDecl ;
ErrorStmt ::= errorType::String ;
KeyCritDecls ::= (compoKeyCritDecls::CompoKeyCritDecls)+ ;
Binop_Expression ::= id_Expression::Id_Expression compo_Binop_Expression::Compo_Binop_Expression ;
QueueType ::= Normal_QueueType ;
 QueueType ::= Fifo_QueueType ;
 QueueType ::= Lifo_QueueType ;
ValDecl ::= Normal_ValDecl ;
 ValDecl ::= System_ValDecl ;
 ValDecl ::= Timer_ValDecl ;
 ValDecl ::= id::String abstractSchedulerDecl::AbstractSchedulerDecl ;
TypeDef ::= enumRang::EnumRange ;
Select_MoveExpr ::= ε ;
BreakStmt ::= ε ;
State_Expression ::= theValue::String ;
SchedulerOf_Expression ::= expr::Expression ;
ParamVarDecl ::= id::String typeExpr::TypeExpr ;
ValDef ::= id::String typeExpr::TypeExpr expr::Expression ;
CritDecl ::= CritDeclWhithId ;
 CritDecl ::= CritDeclWhithoutId ;
ConstDef ::= id::String expr::Expression bossaTypeExpr::BossaTypeExpr ;
CritDeclWhithoutId ::= expr::Expression ;
Unop_Expression ::= unop::Unop expr::Expression ;
SwitchStmt ::= locExpr::LocExpr (composantOfSwitchStmt::ComposantOfSwitchStmt)+ ;
Id_Expression ::= id::String ;
Select_Expression ::= ε ;
OnHandlerDef ::= (eventName::EventName)+ seqStmt::SeqStmt ;
DeferStmt ::= deferStmt::String ;
TraceExpr ::= (id::String)+ ;
Fifo_QueueType ::= ε ;
ReturnStmt ::= expr::Expression ;
ProcParam ::= id::String process::Boolean scheduler::Boolean ;
Scheduler_Storage ::= stateVisibility::StateVisibility ;
ProcessDef ::= (processVarDecl::ProcessVarDecl)+ ;
LocExpr ::= stateName::String (id::String)+ ;
Timer_ValDecl ::= id::String abstractSchedulerDecl::AbstractSchedulerDecl ;
CritDecls ::= (critDecl::CritDecl)+ ;
PrimStmt ::= (expr::Expression)+ ;
ForEachDecreasingForStmt ::= id::String seqStmt::SeqStmt ;
InterfaceDef ::= (composantOfInterFunc::ComposantOfInterFunc)+ scheduler::Scheduler ;
ID_MoveExpr ::= id::String ;
FunDecl ::= parameterTypes::ParameterType nonProcType::NonProcType abstractSchedulerDecl::AbstractSchedulerDecl ;
RangeDef ::= expr::Expression ;
ComposantOfSwitchStmt ::= (classState::ClassState)+ seqStmt::SeqStmt ;
ForeachForStmt ::= id::String isIn::Boolean (classState::ClassState)+ seqStmt::SeqStmt ;
SeqStmt ::= (valDef::ValDef)+ (stmt::Statment)+ ;
EventName ::= eventNameLeft::String eventNameRight::String ;
IfStmt ::= expr::Expression seqStmt::SeqStmt ;
EnumDef ::= (theIds::String)+ ;
BagId ::= theValue::String ;
SRCOnSched_Expression ::= ε ;
ProcessVarDecl ::= Timer_ProcessVarDecl ;
 ProcessVarDecl ::= System_ProcessVarDecl ;
 ProcessVarDecl ::= Normal_ProcessVarDecl ;
 ProcessVarDecl ::= id::String processDef::ProcessDef schedulerDef::SchedulerDef ;
TraceDef ::= traceEvent::TraceEvent traceExpr::TraceExpr traceTest::TraceTest abstractSchedulerDecl::AbstractSchedulerDecl ;
EnumRange ::= enumDef::EnumDef rangeDef::RangeDef ;
ClassState ::= state::Boolean className::ClassName ;
Normal_QueueType ::= ε ;
Normal_ValDecl ::= nonProcType::NonProcType ;
System_ProcessVarDecl ::= system::Boolean typeExpr::TypeExpr ;
ForStmt ::= ForeachForStmt ;
 ForStmt ::= ForEachIncreasingForStmt ;
 ForStmt ::= ForEachDecreasingForStmt ;
TypeOrVoid ::= isVoid::Boolean typeExpr::TypeExpr ;
VSchdulerDecl ::= schedulerDef::SchedulerDef ;
VirtualScheduler ::= vschedulerDecl::VSchdulerDecl ;
IDSource_MoveExpr ::= id::String ;
SatateName_MoveExpr ::= ε ;
Compo_Binop_Expression ::= binop::Binop id_Expression::Id_Expression ;
Queue_Storage ::= stateVisibility::StateVisibility queueType::QueueType ;
Empty_Expression ::= classState::ClassState ;
ForEachIncreasingForStmt ::= id::String seqStmt::SeqStmt ;
MoveExpr ::= Select_MoveExpr ;
 MoveExpr ::= SatateName_MoveExpr ;
 MoveExpr ::= ID_MoveExpr ;
 MoveExpr ::= IDSource_MoveExpr ;
 MoveExpr ::= IDTarget_MoveExpr ;
AdmCrit ::= (paramVarDecl::ParamVarDecl)+ expr::Expression ;
ClassName ::= className::String ;
CritDeclWhithId ::= id::String ;
--------------------metamodels::BusinessEntityModel.bgf--------------------
OrganisationalUnit ::= characterisedby::BusinessEntityPropertySet typ::Class (task::Task)+ (fille::BusinessEntity)+ ;
ArtifactRole ::= characterisedby::BusinessEntityPropertySet typ::Class (task::Task)+ (fille::BusinessEntity)+ ;
BusinessRole ::= ArtifactRole ;
 BusinessRole ::= PerformerRole ;
 BusinessRole ::= OrganisationalUnit ;
PerformerRole ::= perform::Task ;
DataType ::= BusinessEntityPropertySet ;
BusinessEntity ::= (placehold::BusinessRole)+ ;
--------------------metamodels::BusinessProcessModel.bgf--------------------
BusinessProcess ::= ε ;
InvokerTask ::= (invokes::Task)+ ;
SendCommunication ::= ε ;
MutliTask ::= (containsTask::Task)+ (containsFlow::Flow)+ realizes::BusinessProcess ;
CoumpoundTask ::= MutliTask ;
 CoumpoundTask ::= (containsTask::Task)+ (containsFlow::Flow)+ realizes::BusinessProcess ;
TerminatorTask ::= (terminates::Task)+ ;
ControlFlow ::= ε ;
InputSet ::= (containsInput::Input)+ ;
DataFlow ::= ε ;
DataSet ::= OutputSet ;
 DataSet ::= InputSet ;
SimpleTask ::= InvokerTask ;
 SimpleTask ::= TerminatorTask ;
 SimpleTask ::= ApplicationTask ;
 SimpleTask ::= InvokerTask | TerminatorTask | ApplicationTask ;
ApplicationTask ::= Decision ;
 ApplicationTask ::= Clock ;
 ApplicationTask ::= SendCommunication ;
 ApplicationTask ::= ReceiveCommunication ;
 ApplicationTask ::= BusinessProcess ;
 ApplicationTask ::= Decision | Clock | SendCommunication | ReceiveCommunication | BusinessProcess ;
ReceiveCommunication ::= ε ;
ControlPoint ::= (sink::ControlFlow)+ ;
ModelElement ::= Flow ;
 ModelElement ::= ControlPoint ;
DataElement ::= Input ;
 DataElement ::= Output ;
OutputSet ::= (containsOutput::Output)+ ;
--------------------metamodels::CADM.bgf--------------------
InfoExchRequirement ::= (isCitedIn::Document)+ (isSpecifiedInInfos::InformationAsset)+ ;
SoftwareItem ::= (uses::EquipmentType)+ isSourceFor::Organization ;
ActivityModel ::= (isAssociatedWith::InformationAsset)+ ;
MissionArea ::= (supports::Task)+ ;
EquipmentType ::= (establishedAs::MaterielItem)+ (conformsTo::Standard)+ (performsTo::Capability)+ ;
ConceptualDataModel ::= (isAssociatedWith::InformationAsset)+ ;
MaterielItem ::= EquipmentType ;
 MaterielItem ::= SoftwareItem ;
 MaterielItem ::= (establishedAs::MaterielItem)+ (conformsTo::Standard)+ (performsTo::Capability)+ ;
InformationAsset ::= ConceptualDataModel ;
 InformationAsset ::= ActivityModel ;
 InformationAsset ::= (isAssociatedWith::InformationAsset)+ ;
ExchangeNeedLineReq ::= (mayBeSatifiedBy::Architecture)+ (isSpecifiedUsing::InformationAsset)+ (specifiesNeedFor::MaterielItem)+ (cites::MissionArea)+ ;
FunctionalArea ::= (isPartOf::FunctionalArea)+ (supports::System)+ (cites::MissionArea)+ ;
--------------------metamodels::CDE.bgf--------------------
ICdeServer ::= (implements::ICdeComponent)+ ;
ICdeMemberExe ::= executionPerformance::String resourceNeeded::String executionDetails::String ;
IUmlClass ::= IUmlComponent ;
ICdeComponentSpec ::= (members::IUmlMember)+ ;
ICdeMember ::= ε ;
IUmlMember ::= ICdeMember ;
IUmlType ::= ICdeComponentSpec ;
 IUmlType ::= IUmlClass ;
 IUmlType ::= (members::IUmlMember)+ ;
ICdeComponent ::= ε ;
IUmlComponent ::= ICdeServer ;
 IUmlComponent ::= ICdeComponent ;
 IUmlComponent ::= ICdeServer | ICdeComponent ;
--------------------metamodels::CFG.bgf--------------------
ConditionalNode ::= trueConditionNode::Node falseConditionNode::Node ;
AbstractNode ::= Node ;
 AbstractNode ::= ConditionalNode ;
--------------------metamodels::COBOL.bgf--------------------
COBOLComposedType ::= (elements::COBOLElement)+ ;
COBOLSimpleType ::= usageValue::COBOLUsageValue pictureString::String usage::Boolean ;
COBOLRedefiningElement ::= redefines::COBOLElement ;
COBOLSourceText ::= source::String fileName::String ;
COBOL66Element ::= name::String end::COBOLElement start::COBOLElement ;
COBOL88Element ::= name::String (has::COBOL88ElementValue)+ ;
COBOLElement ::= COBOLRedefiningElement ;
 COBOLElement ::= level::String refined::Boolean name::String sharedType::COBOLClassifier group::COBOLComposedType (initial::COBOLElementInitialValue)+ (contains::COBOL88Element)+ source::COBOLSourceText array::COBOLFixedLengthArray ;
COBOL88ElementValue ::= lowerLimit::String upperLimit::String range::Boolean ;
COBOLElementInitialValue ::= initVal::String valueKind::COBOLInitialValueKind ;
COBOLVariableLengthArray ::= minUpper::Integer dependingOn::COBOLElement ;
COBOLClassifier ::= COBOLSimpleType ;
 COBOLClassifier ::= COBOLComposedType ;
 COBOLClassifier ::= typeded::Boolean name::String (typedElements::COBOLElement)+ ;
COBOLInitialValueKind ::= (civk_string_value::ε) | (civk_low_value::ε) | (civk_high_value::ε) | (civk_zero_value::ε) | (civk_quotes::ε) | (civk_null::ε) | (civk_all_literal::ε) ;
COBOLUsageValue ::= (cuv_binary::ε) | (cuv_dbcs::ε) | (cuv_double::ε) | (cuv_display::ε) | (cuv_float::ε) | (cuv_index::ε) | (cuv_objectReference::ε) | (cuv_packedDecimal::ε) | (cuv_pointer::ε) | (cuv_procedurePointer::ε) ;
COBOLFixedLengthArray ::= COBOLVariableLengthArray ;
 COBOLFixedLengthArray ::= maxUpper::Integer ;
--------------------metamodels::CORBAComponent.bgf--------------------
FinderDef ::= fi_home::HomeDef ;
ConsumesDef ::= cd_home::ComponentDef ;
OperationDef ::= FactoryDef ;
 OperationDef ::= FinderDef ;
 OperationDef ::= FactoryDef | FinderDef ;
InterfaceDef ::= ComponentDef ;
 InterfaceDef ::= HomeDef ;
 InterfaceDef ::= ComponentDef | HomeDef ;
FactoryDef ::= fa_home::HomeDef ;
EventDef ::= EmitsDef ;
 EventDef ::= PublishesDef ;
 EventDef ::= ConsumesDef ;
 EventDef ::= type::ValueDef ;
UsesDef ::= multiple::Boolean uses::InterfaceDef ud_home::ComponentDef ;
PrimaryKeyDef ::= pkd_home::HomeDef type::ValueDef ;
PublishesDef ::= pud_home::ComponentDef ;
ComponentDef ::= isBasic::Boolean (facets::ProvidesDef)+ (receptacles::UsesDef)+ (supports::InterfaceDef)+ (emits::EmitsDef)+ (publishes::PublishesDef)+ (consumes::ConsumesDef)+ ;
HomeDef ::= manages::ComponentDef (factories::FactoryDef)+ (finders::FinderDef)+ key::PrimaryKeyDef ;
EmitsDef ::= ed_home::ComponentDef ;
ValueDef ::= ε ;
ProvidesDef ::= provides::InterfaceDef prd_home::ComponentDef ;
--------------------metamodels::CPL.bgf--------------------
NoAnswer ::= contents::Node ;
NodeContainer ::= SubAction ;
 NodeContainer ::= Outgoing ;
 NodeContainer ::= Incoming ;
 NodeContainer ::= NotPresent ;
 NodeContainer ::= Otherwise ;
 NodeContainer ::= SwitchedAddress ;
 NodeContainer ::= SwitchedString ;
 NodeContainer ::= SwitchedLanguage ;
 NodeContainer ::= SwitchedTime ;
 NodeContainer ::= SwitchedPriority ;
 NodeContainer ::= Busy ;
 NodeContainer ::= NoAnswer ;
 NodeContainer ::= Redirection ;
 NodeContainer ::= Failure ;
 NodeContainer ::= Default ;
 NodeContainer ::= Location ;
CPL ::= (subActions::SubAction)+ outgoing::Outgoing incoming::Incoming ;
SubCall ::= ref::String ;
LanguageSwitch ::= (languages::SwitchedLanguage)+ ;
SwitchedLanguage ::= matches::String ;
PrioritySwitch ::= (priorities::SwitchedPriority)+ ;
AddressSwitch ::= field::String subField::String (addresses::SwitchedAddress)+ ;
NotPresent ::= contents::Node ;
SwitchedPriority ::= less::String greater::String equal::String ;
SubAction ::= id::String ;
StringSwitch ::= field::String (strings::SwitchedString)+ ;
SignallingAction ::= Proxy ;
 SignallingAction ::= Redirect ;
 SignallingAction ::= Reject ;
SwitchedString ::= is::String contains::String ;
TimeSwitch ::= tzid::String tzurl::String (times::SwitchedTime)+ ;
SwitchedAddress ::= is::String contains::String subDomainOf::String ;
SwitchedTime ::= dtstart::String dtend::String duration::String freq::String until::String count::String interval::String bySecond::String byMinute::String byHour::String byDay::String byMonthDay::String byYearDay::String byWeekNo::String byMonth::String wkst::String bySetPos::String ;
--------------------metamodels::CPR.bgf--------------------
EvaluationCriteria ::= criteria_objective::Objective ;
TimeSpec ::= timeSpec_action::Action ;
--------------------metamodels::CSM.bgf--------------------
CSM ::= (step::Step)+ (generalResource::GeneralResource)+ (scenarion::Scenarion)+ ;
ExternalService ::= (step::Step)+ ;
ResourceRelease ::= generalResource::GeneralResource ;
ResourceAcquire ::= generalResource::GeneralResource ;
GeneralResource ::= ActiveResource ;
 GeneralResource ::= PassiveResource ;
 GeneralResource ::= (resourceAcquire::ResourceAcquire)+ (resourceRelease::ResourceRelease)+ ;
PassiveResource ::= Component ;
ActiveResource ::= ProcessingResource ;
 ActiveResource ::= ExternalService ;
 ActiveResource ::= (step::Step)+ ;
PathConnection ::= Join ;
 PathConnection ::= Fork ;
 PathConnection ::= Merge ;
 PathConnection ::= Branch ;
 PathConnection ::= Seqence ;
 PathConnection ::= message::Message (post::Step)+ (pre::Step)+ ;
ProcessingResource ::= (step::Step)+ ;
--------------------metamodels::CWMCore.bgf--------------------
NameSpace ::= Classifier ;
 NameSpace ::= Package ;
 NameSpace ::= (ownedElements::ModelElement)+ ;
StructuralFeature ::= Attribute ;
 StructuralFeature ::= type::Classifier ;
VisibilityKind ::= (vk_public_vis::ε) | (vk_private_vis::ε) | (vk_protected_vis::ε) ;
ModelElement ::= Dependency ;
 ModelElement ::= Constraint ;
 ModelElement ::= Feature ;
 ModelElement ::= NameSpace ;
 ModelElement ::= name::String visibility::VisibilityKind (contraints::Constraint)+ (clientDependencies::Dependency)+ (supplierDependencies::Dependency)+ namespace::NameSpace (importers::Package)+ ;
BooleanExpression ::= expresssion::String ;
--------------------metamodels::CWMRelationalData.bgf--------------------
ColumnSet ::= NamedColumnSet ;
 ColumnSet ::= QueryColumnSet ;
 ColumnSet ::= (features::Column)+ ;
SQLSimpleType ::= characterMaximumLength::Integer characterOctetLength::Integer numericPrecision::Integer numericPrecisionRadix::Integer numericScale::Integer dateTimePrecision::Integer (sqlDistinctTypes::SQLDistinctType)+ ;
CheckConstraint ::= (constraintElements::Column)+ (constrainedElements::Table)+ ;
SQLDistinctType ::= length::Integer precision::Integer scale::Integer sqlSimpleType::SQLSimpleType ;
QueryColumnSet ::= query::QueryExpression ;
NamedColumnSet ::= Table ;
 NamedColumnSet ::= View ;
 NamedColumnSet ::= optionScopeColumn::Column (triggers::Trigger)+ ;
SQLDataType ::= SQLDistinctType ;
 SQLDataType ::= SQLSimpleType ;
 SQLDataType ::= typeNumber::Integer (structuralFeatures::Column)+ ;
QueryExpression ::= expresssion::String ;
--------------------metamodels::Class.bgf--------------------
DataType ::= ε ;
NamedElt ::= Classifier ;
 NamedElt ::= Attribute ;
--------------------metamodels::ChocoModel.bgf--------------------
IntExp ::= op::OpConstraint left::Expression right::Expression ;
SymbolicTerm ::= term::Expression ;
OpConstraint ::= (eq::ε) | (and2::ε) | (or2::ε) | (gt::ε) | (ge::ε) | (lt::ε) | (le::ε) | (plus::ε) ;
PostConstraint ::= op::OpConstraint constraint::ConstraintDef ;
LocatedElement ::= Package ;
 LocatedElement ::= Import ;
 LocatedElement ::= ChocoProblem ;
 LocatedElement ::= Element ;
 LocatedElement ::= Domain ;
ChocoProblem ::= name::String (elements::Element)+ ;
IntVar ::= domain::Domain ;
ConstraintDef ::= op::OpConstraint left::Expression right::Expression ;
IntConstant ::= val::Integer ;
IntValue ::= val::Integer ;
--------------------metamodels::ClassicModels.bgf--------------------
OrderDetail ::= order::Order product::Product quantityOrdered::Integer priceEach::Double ;
ClassicModels ::= (offices::Office)+ (productLines::ProductLine)+ (customers::Customer)+ ;
ProductLine ::= productLineOwner::ClassicModels (products::Product)+ name::String textDescription::String htmlDescription::String ;
AddressInfo ::= Office ;
 AddressInfo ::= Customer ;
--------------------metamodels::Cocus.owl.bgf--------------------
AssociatedChair ::= memberOfConference::Conference ;
Email_Template ::= define::Event ;
PaperFullVersion ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
SubjectArea ::= ε ;
ProgramCommittee ::= hasProgramCommitteeMember::ProgramCommitteeMember ;
ConferenceMember ::= Reviewer ;
 ConferenceMember ::= ConferenceChair ;
 ConferenceMember ::= AssociatedChair ;
 ConferenceMember ::= Author ;
 ConferenceMember ::= ProgramCommitteeMember ;
 ConferenceMember ::= Chairman ;
 ConferenceMember ::= memberOfConference::Conference ;
Head_Role ::= assigned_by::Administrator ;
ProgramCommitteeMember ::= ProgramCommitteeChair ;
 ProgramCommitteeMember ::= memberOfProgramCommittee::ProgramCommittee maxPapers::Integer addedBy::Administrator ;
Reviewer_Role ::= assigned_by::Administrator ;
PaperAbstract ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Committe_Role ::= assigned_by::Administrator ;
Co-author ::= co-writePaper::Paper ;
Author_Role ::= assigned_by::Administrator ;
Paper_Typologies ::= define::Event ;
Review_Form_Setup ::= ε ;
ConferenceChair ::= memberOfConference::Conference ;
Rejection_Email ::= ε ;
Admin_Role ::= assigned_by::Administrator ;
Event_Creation ::= (has_result::Thing)+ sent_by::Person ;
Approval_Email ::= confirm::Event ;
Meta-Review ::= writtenBy::Reviewer ;
Full_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Group_Email ::= ε ;
Event_Setup ::= Paper_Typologies ;
 Event_Setup ::= Review_Form ;
 Event_Setup ::= Submission_Template ;
 Event_Setup ::= Event_Tracks ;
 Event_Setup ::= Research_Topic ;
 Event_Setup ::= Email_Template ;
 Event_Setup ::= define::Event ;
Corresponding_Author ::= submitPaper::Paper writePaper::Paper ;
Help_Request ::= Misc ;
 Help_Request ::= Feature_Request ;
 Help_Request ::= Assistance ;
 Help_Request ::= Misc | Feature_Request | Assistance ;
ExternalReviewer ::= assignedByReviewer::Reviewer ;
URL ::= Event_URL ;
Event_Tracks ::= define::Event ;
Submission_Template ::= define::Event ;
AuthorNotReviewer ::= submitPaper::Paper writePaper::Paper ;
Meta-Reviewer ::= assignedByAdministrator::Administrator adjustBid::Bid readPaper::Paper hasBeenAssigned::Paper writeReview::Review assignExternalReviewer::ExternalReviewer ;
ProgramCommitteeChair ::= endReview::Review ;
Research_Topic ::= define::Event ;
Review_Form ::= Preview ;
 Review_Form ::= Review_Form_Setup ;
 Review_Form ::= Preview | Review_Form_Setup ;
Event_URL ::= concerned::Event ;
Short_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Event_Approval ::= (has_result::Thing)+ sent_by::Person ;
Notification_Email ::= ε ;
Invited_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Feature_Request ::= ε ;
--------------------metamodels::DSL.bgf--------------------
SimpleType ::= ε ;
EnumerationLiteral ::= value::PrimitiveTypes/Integer ;
LoadedElement ::= DomainModel ;
 LoadedElement ::= Classifier ;
ValueProperty ::= owner::Classifier type::Type ;
DomainModel ::= (classifiers::Classifier)+ (types::Type)+ ;
NamedElement ::= Namespace ;
 NamedElement ::= Role ;
 NamedElement ::= ValueProperty ;
 NamedElement ::= EnumerationLiteral ;
--------------------metamodels::CompanyStructure.bgf--------------------
CorporateHQ ::= (manages::Store)+ corporateHQBackOffice::CorporateHQBackOffice ;
CashRegister ::= ε ;
StoreBackOffice ::= ε ;
CorporateHQBackOffice ::= ε ;
--------------------metamodels::ComponentUML.bgf--------------------
AssociationEnd ::= type::Entity association::Association ;
--------------------metamodels::Conference.owl.bgf--------------------
Conference_volume ::= has_parts::Conference_part has_workshops::Workshop has_tracks::Track has_tutorials::Tutorial has_a_commtitee::Committee has_a_steering_committee::Steering_committee has_an_organizing_committee::Organizing_committee has_important_dates::Important_dates has_contributions::Conference_contribution has_a_location::String has_a_program_committee::Program_committee ;
Email_Template ::= define::Event ;
Conference_proceedings ::= has_an_ISBN::String has_a_publisher::Publisher has_a_volume::Integer ;
ProgramCommittee ::= hasProgramCommitteeMember::ProgramCommitteeMember ;
ConferenceMember ::= Reviewer ;
 ConferenceMember ::= ConferenceChair ;
 ConferenceMember ::= AssociatedChair ;
 ConferenceMember ::= Author ;
 ConferenceMember ::= ProgramCommitteeMember ;
 ConferenceMember ::= Chairman ;
 ConferenceMember ::= memberOfConference::Conference ;
Head_Role ::= assigned_by::Administrator ;
Submitted_contribution ::= Reviewed_contribution ;
 Submitted_contribution ::= has_a_review_expertise::Review_expertise ;
Regular_contribution ::= Extended_abstract ;
 Regular_contribution ::= Paper ;
ProgramCommitteeMember ::= ProgramCommitteeChair ;
 ProgramCommitteeMember ::= memberOfProgramCommittee::ProgramCommittee maxPapers::Integer addedBy::Administrator ;
Reviewer_Role ::= assigned_by::Administrator ;
Track-workshop_chair ::= was_a_track-workshop_chair_of::Conference_part ;
Paid_applicant ::= Late_paid_applicant ;
 Paid_applicant ::= Early_paid_applicant ;
 Paid_applicant ::= Late_paid_applicant | Early_paid_applicant ;
Committe_Role ::= assigned_by::Administrator ;
Co-author ::= co-writePaper::Paper ;
Conference_announcement ::= has_authors::Person has_a_date_of_issue::date ;
Review_Form_Setup ::= ε ;
ConferenceChair ::= memberOfConference::Conference ;
Late_paid_applicant ::= ε ;
EEnum ::= (high::ε) | (medium::ε) | (low::ε) | (very high::ε) | (male::ε) | (female::ε) ;
Camera_ready_contribution ::= ε ;
Program_committee ::= was_a_program_committee_of::Conference_volume ;
Contribution_1th-author ::= ε ;
Registeered_applicant ::= Paid_applicant ;
Full_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Written_contribution ::= Submitted_contribution ;
 Written_contribution ::= Regular_contribution ;
 Written_contribution ::= Submitted_contribution | Regular_contribution ;
Conference_contributor ::= Regular_author ;
 Conference_contributor ::= Invited_speaker ;
 Conference_contributor ::= Active_conference_participant ;
 Conference_contributor ::= Regular_author | Invited_speaker ;
Event_Setup ::= Paper_Typologies ;
 Event_Setup ::= Review_Form ;
 Event_Setup ::= Submission_Template ;
 Event_Setup ::= Event_Tracks ;
 Event_Setup ::= Research_Topic ;
 Event_Setup ::= Email_Template ;
 Event_Setup ::= define::Event ;
Corresponding_Author ::= submitPaper::Paper writePaper::Paper ;
Conference_fees ::= ε ;
Steering_committee ::= was_a_steering_committee_of::Conference_volume ;
URL ::= Event_URL ;
AuthorNotReviewer ::= submitPaper::Paper writePaper::Paper ;
Meta-Reviewer ::= assignedByAdministrator::Administrator adjustBid::Bid readPaper::Paper hasBeenAssigned::Paper writeReview::Review assignExternalReviewer::ExternalReviewer invites_co-reviewers::Reviewer invited_by::Reviewer (has_a_review_reference_or_expertise::Thing)+ ;
ProgramCommitteeChair ::= endReview::Review ;
Early_paid_applicant ::= ε ;
Review_Form ::= Preview ;
 Review_Form ::= Review_Form_Setup ;
 Review_Form ::= Preview | Review_Form_Setup ;
Call_for_participation ::= has_authors::Person has_a_date_of_issue::date ;
Active_conference_participant ::= gives_presentations::Presentation ;
Short_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Notification_Email ::= ε ;
Passive_conference_participant ::= ε ;
Extended_abstract ::= Abstract ;
Co-chair ::= was_a_committe_co-chair_of::Committee ;
Conference_applicant ::= Registeered_applicant ;
AssociatedChair ::= memberOfConference::Conference ;
Organizing_committee ::= was_an_organizing_committee_of::Conference_volume ;
Conference_document ::= Conference_contribution ;
 Conference_document ::= Information_for_participants ;
 Conference_document ::= Call_for_paper ;
 Conference_document ::= Conference_announcement ;
 Conference_document ::= Call_for_participation ;
 Conference_document ::= Conference_www ;
 Conference_document ::= Review ;
 Conference_document ::= has_authors::Person has_a_date_of_issue::date ;
Contribution_co-author ::= ε ;
PaperFullVersion ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Committee_member ::= Co-chair ;
 Committee_member ::= Chair ;
 Committee_member ::= was_a_member_of::Committee ;
SubjectArea ::= ε ;
Reviewed_contribution ::= Accepted_contribution ;
 Reviewed_contribution ::= Rejected_contribution ;
 Reviewed_contribution ::= has_a_review::Review ;
Conference_contribution ::= Poster ;
 Conference_contribution ::= Written_contribution ;
 Conference_contribution ::= Presentation ;
 Conference_contribution ::= is_submitted_at::Conference_volume ;
Conference_participant ::= Passive_conference_participant ;
 Conference_participant ::= Active_conference_participant ;
Regular_author ::= Contribution_1th-author ;
 Regular_author ::= Contribution_co-author ;
 Regular_author ::= Contribution_1th-author | Contribution_co-author ;
PaperAbstract ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Author_Role ::= assigned_by::Administrator ;
Paper_Typologies ::= define::Event ;
Information_for_participants ::= has_authors::Person has_a_date_of_issue::date ;
Rejection_Email ::= ε ;
Admin_Role ::= assigned_by::Administrator ;
Event_Creation ::= (has_result::Thing)+ sent_by::Person ;
Approval_Email ::= confirm::Event ;
Meta-Review ::= writtenBy::Reviewer reviews::Reviewed_contribution ;
Group_Email ::= ε ;
Invited_speaker ::= ε ;
Conference_part ::= Track ;
 Conference_part ::= Tutorial ;
 Conference_part ::= Workshop ;
 Conference_part ::= has_a_track-workshop-tutorial_topic::Topic is_part_of_conference_volumes::Conference_volume has_a_track-workshop-tutorial_chair::Track-workshop_chair ;
Call_for_paper ::= has_authors::Person has_a_date_of_issue::date ;
Conference_www ::= has_a_URL::String ;
Rejected_contribution ::= has_a_review::Review ;
Help_Request ::= Misc ;
 Help_Request ::= Feature_Request ;
 Help_Request ::= Assistance ;
 Help_Request ::= Misc | Feature_Request | Assistance ;
Invited_talk ::= is_given_by::Active_conference_participant ;
ExternalReviewer ::= assignedByReviewer::Reviewer ;
Submission_Template ::= define::Event ;
Event_Tracks ::= define::Event ;
Research_Topic ::= define::Event ;
Review_expertise ::= has_a_submitted_contribution::Submitted_contribution has_an_expertise::EEnum ;
Event_URL ::= concerned::Event ;
Event_Approval ::= (has_result::Thing)+ sent_by::Person ;
Important_dates ::= is_an_abstract_submission_date::date is_a_full_paper_submission_date::date is_an_ending_date::date is_a_date_of_acceptance_announcement::date is_a_date_of_camera_ready_paper_submission::date is_a_starting_date::date belong_to_a_conference_volume::Conference_volume ;
Accepted_contribution ::= Camera_ready_contribution ;
Invited_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Feature_Request ::= ε ;
Review_preference ::= (has_a_topic_or_a_submission_contribution::Thing)+ has_a_degree::Integer ;
--------------------metamodels::Contact.bgf--------------------
Num_fixe ::= numero::String contact_fixe::Contact ;
Num_portable ::= numero::String contact_portable::Contact ;
--------------------metamodels::ControllerUML.bgf--------------------
StateMachineAction ::= ε ;
ViewState ::= (substates::State)+ theContainer::State (outGoing::StateTransition)+ (incoming::StateTransition)+ ;
StateTransition ::= source::State target::State trigger::Event effect::StateMachineAction ;
StateMachine ::= (states::State)+ ;
SubControllerState ::= controller::Controller ;
ControllerAttribute ::= controller::Controller ;
--------------------metamodels::Cristal.bgf--------------------
ActCompositeMember ::= (activityDefinitions::ActivityDefinition)+ ;
ElementaryActDef ::= actCompositeMember::ActCompositeMember ;
PartCompositeMember ::= partDefinitions::PartDefinition ;
CompositeParDef ::= (partCompositeMember::PartCompositeMember)+ ;
CompositeActDef ::= (actCompositeMembers::ActCompositeMember)+ ;
PartDefinition ::= CompositeParDef ;
 PartDefinition ::= ElementaryPartDef ;
 PartDefinition ::= (partCompositeMembers::PartCompositeMember)+ ;
ElementaryPartDef ::= (partCompositeMembers::PartCompositeMember)+ ;
ActivityDefinition ::= ElementaryActDef ;
 ActivityDefinition ::= CompositeActDef ;
 ActivityDefinition ::= actCompositeMember::ActCompositeMember ;
--------------------metamodels::DSLModel.bgf--------------------
ModelElementLink ::= (links::ReferenceLink)+ ;
BooleanValue ::= value::PrimitiveTypes/Boolean ;
ReferenceLink ::= owner::ModelElement modelElement::ModelElementLink roles::Role ;
IntegerValue ::= value::PrimitiveTypes/Integer ;
NamedElement ::= EmbeddingLink ;
 NamedElement ::= Property ;
 NamedElement ::= Role ;
ModelElement ::= ModelElementLink ;
 ModelElement ::= parentLink::EmbeddingLink (properties::Property)+ (embeddinglinks::EmbeddingLink)+ (referencelinks::ReferenceLink)+ ;
EmbeddingLink ::= owner::ModelElement (elements::ModelElement)+ ;
StringValue ::= value::PrimitiveTypes/String ;
DoubleValue ::= value::PrimitiveTypes/Double ;
--------------------metamodels::DSLtools.bgf--------------------
SimpleType ::= ε ;
EnumerationLiteral ::= value::PrimitiveTypes/Integer ;
LoadedElement ::= DomainModel ;
 LoadedElement ::= Classifier ;
ValueProperty ::= owner::Classifier type::Type ;
DomainModel ::= (classifiers::Classifier)+ (types::Type)+ ;
NamedElement ::= Namespace ;
 NamedElement ::= Role ;
 NamedElement ::= ValueProperty ;
 NamedElement ::= EnumerationLiteral ;
--------------------metamodels::DTD.bgf--------------------
ElementContent ::= Mixed ;
 ElementContent ::= Children ;
AttributeList ::= (containsAttributes::AttributeDescription)+ ;
OtherAttributeTypeEnum ::= (cdata::ε) | (id::ε) | (idref::ε) | (entityType::ε) | (entities::ε) | (nmtoken::ε) | (nmtakens::ε) ;
OtherAttributeType ::= type::OtherAttributeTypeEnum ;
AttributeType ::= Enumeration ;
TypeDescription ::= Notation ;
 TypeDescription ::= Entity ;
 TypeDescription ::= Element ;
 TypeDescription ::= AttributeList ;
 TypeDescription ::= AttributeDescription ;
NoDefaultValue ::= isRequired::Boolean ;
RestrictedElement ::= content::ElementContent ;
DefaultValue ::= value::String isFixed::Boolean ;
AttributeDescription ::= NoDefaultValue ;
 AttributeDescription ::= DefaultValue ;
AnyElement ::= ε ;
--------------------metamodels::DXF.bgf--------------------
DXF ::= (meshes::Mesh)+ ;
--------------------metamodels::DeploymentReport.bgf--------------------
PublicKeyTokenType ::= value::String ;
SimpleName ::= value::String ;
CultureNeutral ::= value::String ;
FourPartVersionType ::= value::String ;
NamespaceIdentity ::= ImportNamespaceIdentity ;
 NamespaceIdentity ::= name::Path version::FourPartVersionType publicKey::PublicKeyType publicKeyToken::PublicKeyTokenType culture::CultureNeutral platform::Platform ;
DeploymentReport ::= (import::DeploymentImport)+ applications::Applications binding::Binding logicalServers::LogicalServers errors::ErrorCollection ;
SequenceReport ::= report::ReportObject setting::Setting (system::ReportSystem)+ (resource::ReportResource)+ (endpoint::ReportEndpoint)+ ;
ImportNamespaceIdentity ::= import::DeploymentImport ;
ReportObject ::= LogicalServer ;
 ReportObject ::= Application ;
 ReportObject ::= ReportSystem ;
 ReportObject ::= ReportResource ;
 ReportObject ::= ReportEndpoint ;
 ReportObject ::= (sequence::SequenceReport)+ name::String definition::String extends::String instanceId::Guid hostedOn::String ;
PublicKeyType ::= value::String ;
DocumentConstraintError ::= (failedInput::FailedInput)+ constraintMember::String constraintDefinition::String targetInstancePath::String ownerInstancePath::String constraintErrorCode::String constraintErrorMessage::String ;
ProcessorArchitectures ::= (x86::ε) | (ia64::ε) | (amd64::ε) | (wow64::ε) | (msil::ε) | (shx::ε) | (arm::ε) | (data::ε) ;
BoundLogicalServer ::= (setting::Setting)+ (application::Application)+ name::String definition::String extends::String ;
FailedInput ::= (contents::String)+ ;
DocumentError ::= DocumentResolutionError ;
 DocumentError ::= DocumentConstraintError ;
 DocumentError ::= (description::Description)+ Code::Integer Level::Integer File::String ;
SettingInstanceValue ::= (contents::String)+ null::Boolean ;
LogicalServer ::= (sequence::SequenceReport)+ name::String definition::String extends::String instanceId::Guid hostedOn::String ;
OuterSystem ::= (system::OuterSystem)+ (application::Application)+ name::String ;
DeploymentImport ::= alias::SimpleName identity::ImportNamespaceIdentity ;
ReportEndpoint ::= (sequence::SequenceReport)+ name::String definition::String extends::String instanceId::Guid hostedOn::String ;
SettingAttributes ::= name::String definition::String state::SettingState fixed::Boolean list::Boolean null::Boolean secure::Boolean failedToSerialize::Boolean ;
SettingFacet ::= value::SettingInstanceValue settingAttributes::SettingAttributes ;
LogicalServers ::= (zone::Zone)+ (logicalServer::LogicalServer)+ ;
ErrorCollection ::= (documentError::DocumentError)+ (documentResolutionError::DocumentResolutionError)+ (documentConstraintError::DocumentConstraintError)+ ;
ReportSystem ::= (sequence::SequenceReport)+ name::String definition::String extends::String instanceId::Guid hostedOn::String ;
ReportResource ::= (sequence::SequenceReport)+ name::String definition::String extends::String instanceId::Guid hostedOn::String ;
SettingState ::= (Set::ε) | (NotSet::ε) | (Error::ε) ;
DocumentResolutionError ::= Statement::String ;
SettingValue ::= (contents::String)+ Null::Boolean Secure::Boolean ;
--------------------metamodels::DiagramInterchange.bgf--------------------
GraphicPrimitive ::= Polyline ;
 GraphicPrimitive ::= Ellipse ;
TextElement ::= text::String ;
UML1SemanticModelBridge ::= element::CoreElement ;
GraphConnector ::= position::Point gc_graphElement::GraphElement (graphEdges::GraphEdge)+ ;
LeafElement ::= TextElement ;
 LeafElement ::= Image ;
 LeafElement ::= GraphicPrimitive ;
GraphElement ::= GraphEdge ;
 GraphElement ::= GraphNode ;
CoreElement ::= ε ;
CoreSemanticModelBridge ::= element::ElementsElement ;
DiagramLink ::= zoom::Double viewPort::Point dl_graphElement::GraphElement dl_diagram::Diagram ;
SemanticModelBridge ::= SimpleSemanticModelElement ;
 SemanticModelBridge ::= UML1SemanticModelBridge ;
 SemanticModelBridge ::= CoreSemanticModelBridge ;
SimpleSemanticModelElement ::= typeInfo::String ;
GraphEdge ::= waypoints::Point anchors::GraphConnector ;
DiagramElement ::= Reference ;
 DiagramElement ::= GraphElement ;
 DiagramElement ::= LeafElement ;
ElementsElement ::= ε ;
BezierPoint ::= controls::Point ;
GraphNode ::= Diagram ;
 GraphNode ::= size::Dimension ;
--------------------metamodels::DoDAF-OV5.bgf--------------------
InformationAssetDocument ::= name::String description::String view::String ;
AMIERole ::= Control ;
 AMIERole ::= Input ;
 AMIERole ::= Output ;
 AMIERole ::= Mechanism ;
 AMIERole ::= (defines::AMPA)+ ;
AMPA ::= (isOrdinateOf::AMPA)+ (isSubordinateOf::AMPA)+ (defines::AMIERole)+ ;
MechanismFacility ::= source::String destination::String resourceType::String ;
IE ::= (isAssociatedWith::AMIERole)+ (isOrdinateOf::IE)+ (isSubordinateOf::IE)+ ;
DOSCR ::= mayBeAn::Occupation (appliesTo::PersonType)+ (mayBeCitedFor::OperationalRole)+ ;
AMSpecification ::= (isSpecifiedUsing::AMSpecificationElement)+ ;
PATask ::= isCitedBy::InformationAsset ;
MechanismReference ::= source::String destination::String resourceType::String ;
PA ::= (isTheProducerFor::PAExchangeRequirement)+ (isTheConsumerFor::PAExchangeRequirement)+ (isParentFor::PA)+ (isChildFor::PA)+ (has::PACapability)+ (isIncludedIn::AMPA)+ (correspondsTo::PATask)+ ;
PersonType ::= (mayBeCitedFor::OperationalRole)+ (can::Skill)+ ;
PAExchangeRequirement ::= (isTheSubjectOf::AMSpecificationElement)+ ;
ArchitectureDocument ::= name::String description::String view::String ;
OrganizationType ::= (isTheTypeOf::Organization)+ (isCitedAs::MechanismReference)+ ;
AM ::= type::String (specifies::AMSpecification)+ (includes::AMPA)+ (paTask::PATask)+ ;
DoDAFModel ::= (document::Document)+ (am::AM)+ (task::Task)+ (iaDocument::InformationAssetDocument)+ (amSpecification::AMSpecification)+ (doscr::DOSCR)+ (organizationType::OrganizationType)+ ;
PACapability ::= name::String description::String view::String ;
OperationalRole ::= (isCitedAs::MechanismReference)+ ;
MechanismSystem ::= source::String destination::String resourceType::String ;
AMSpecificationElement ::= subject::PAExchangeRequirement ;
InformationAsset ::= AM ;
--------------------metamodels::DoDAF-SV4.bgf--------------------
InformationAssetDocument ::= name::String description::String view::String ;
OrganizationTypeOperationalRole ::= name::String description::String view::String ;
OperationalRolePA ::= name::String description::String view::String ;
DataStore ::= (isParentFor::PA)+ (isChildFor::PA)+ (isIncludedIn::AMPA)+ (isAssignedTo::SystemPA)+ (represents::ArchitectureBusinessSubFunction)+ (correspondsTo::PATask)+ (has::PACapability)+ (isPerformedBy::OperationalRolePA)+ ;
AMSpecification ::= (isUsedIn::FunctionalSpecification)+ ;
PA ::= DataStore ;
 PA ::= SystemFunction ;
 PA ::= (isParentFor::PA)+ (isChildFor::PA)+ (isIncludedIn::AMPA)+ (isAssignedTo::SystemPA)+ (represents::ArchitectureBusinessSubFunction)+ (correspondsTo::PATask)+ (has::PACapability)+ (isPerformedBy::OperationalRolePA)+ ;
ArchitectureDocument ::= name::String description::String view::String ;
AM ::= type::String (isCitedBy::PATask)+ (specifies::AMSpecification)+ (includes::AMPA)+ (isUsedToDescribe::SystemFunctionalityDescription)+ (defines::LineOfBusiness)+ ;
LineOfBusiness ::= (appliesToTask::Task)+ (appliesToBS::BusinessSubfunction)+ ;
DoDAFModel ::= (document::Document)+ (sfd::SystemFunctionalityDescription)+ (amSpecification::AMSpecification)+ (sd::SystemDocument)+ (task::Task)+ (iaDocument::InformationAssetDocument)+ (position::Position)+ (occupation::Occupation)+ (ad::ArchitectureDocument)+ (system::System)+ (am::AM)+ (spas::SystemPAStandard)+ (its::InformationTechnologyStandard)+ (orpa::OperationalRolePA)+ (ptcn::PersonTypeCapabilityNorm)+ ;
AMIERoleGraphic ::= name::String description::String view::String ;
PACapability ::= name::String description::String view::String ;
ArchitectureBusinessSubFunction ::= name::String description::String view::String ;
PersonTypeCapabilityNorm ::= name::String description::String view::String ;
FunctionalSpecification ::= mayBeA::SystemDocument ;
SystemFunctionalityDescription ::= type::String (cites::InformationAssetDocument)+ (describes::SystemDocument)+ (records::ArchitectureDocument)+ (isTheReferenceFor::IE)+ (isThePrimaryReferenceFor::PA)+ ;
AMIERole ::= Input ;
 AMIERole ::= Output ;
 AMIERole ::= (defines::AMPA)+ (isRepresentedBy::AMIERoleGraphic)+ ;
SystemPAStandard ::= (isUsedToDefine::InformationTechnologyStandard)+ ;
AMPA ::= (isOrdinateOf::AMPA)+ (isSubordinateOf::AMPA)+ (defines::AMIERole)+ (isRepresentedBy::AMPAGraphic)+ ;
IE ::= (isAssociatedWith::AMIERole)+ (isOrdinateOf::IE)+ (isSubordinateOf::IE)+ ;
BusinessSubfunction ::= (appliesTo::ArchitectureBusinessSubFunction)+ ;
PATask ::= levelIdentifier::String references::String cost::String (correspondsTo::PATask)+ (supports::TaskMissionArea)+ ;
OrganizationOperationalRole ::= name::String description::String view::String ;
HumanBehaviourTask ::= levelIdentifier::String references::String cost::String (correspondsTo::PATask)+ (supports::TaskMissionArea)+ ;
InformationTechnologyStandard ::= (isUsedToDefine::SystemPAStandard)+ ;
TaskMissionArea ::= (hasContributionFrom::OperationalCapabilityTask)+ ;
PersonType ::= (mayBeCitedFor::OperationalRole)+ (performsTo::PersonTypeCapabilityNorm)+ (can::Skill)+ ;
OperationalCapabilityTask ::= levelIdentifier::String references::String cost::String (correspondsTo::PATask)+ (supports::TaskMissionArea)+ ;
AMPAGraphic ::= name::String description::String view::String ;
SystemDocument ::= name::String description::String view::String ;
OperationalRole ::= (performs::OperationalRolePA)+ (isPerformedByOTOR::OrganizationTypeOperationalRole)+ (isPerformedByOOR::OrganizationOperationalRole)+ ;
SystemFunction ::= (isParentFor::PA)+ (isChildFor::PA)+ (isIncludedIn::AMPA)+ (isAssignedTo::SystemPA)+ (represents::ArchitectureBusinessSubFunction)+ (correspondsTo::PATask)+ (has::PACapability)+ (isPerformedBy::OperationalRolePA)+ ;
InformationAsset ::= AM ;
 InformationAsset ::= (isCitedIn::InformationAssetDocument)+ (describes::DataStore)+ ;
SystemPA ::= (isDefinedUsing::SystemPAStandard)+ ;
--------------------metamodels::DoDAF-SV5.bgf--------------------
AMPA ::= (isOrdinateOf::AMPA)+ (isSubordinateOf::AMPA)+ ;
SoftwareApplicationProcedurePA ::= name::String description::String view::String ;
ArchitectureTask ::= name::String description::String view::String ;
PATask ::= levelIdentifier::String references::String cost::String (correspondsTo::PATask)+ (isSupportedBy::ArchitectureTask)+ (isTheSourceOfNeedFor::InformationExchangeRequirement)+ (isTheDestinationOfNeedFor::InformationExchangeRequirement)+ (isCitedFor::SystemFunctionTraceabilityElement)+ ;
InformationExchangeRequirement ::= (specifies::RequiredInformationTechnologyCapability)+ ;
NodeLinkCapability ::= (isPerformedBy::SystemCapability)+ (isOrdinateFor::Capability)+ (isSubordinateOf::Capability)+ (isPerformedByNC::NetworkCapability)+ (isPerformedByNLC::NodeLinkCapability)+ (isPerformedBySC::SystemCapability)+ (isCitedInCD::CapabilityDocument)+ (isUsedInMICN::MaterielItemCapabilityNorm)+ (isUsedInOTCN::OrganizationTypeCapabilityNorm)+ (isAttainedFor::RequiredInformationTechnologyCapability)+ ;
CapabilityDocument ::= (isCitedIn::Capability)+ ;
RequiredInformationTechnologyCapability ::= (isPerformedBy::SystemCapability)+ (isOrdinateFor::Capability)+ (isSubordinateOf::Capability)+ (isPerformedByNC::NetworkCapability)+ (isPerformedByNLC::NodeLinkCapability)+ (isPerformedBySC::SystemCapability)+ (isCitedInCD::CapabilityDocument)+ (isUsedInMICN::MaterielItemCapabilityNorm)+ (isUsedInOTCN::OrganizationTypeCapabilityNorm)+ (isAttainedFor::RequiredInformationTechnologyCapability)+ ;
PA ::= SystemFunction ;
 PA ::= (isParentFor::PA)+ (isChildFor::PA)+ (correspondsTo::PATask)+ (isIncludedIn::AMPA)+ (isAssignedTo::SystemPA)+ (isSupportedBy::SoftwareApplicationProcedurePA)+ (isTheConsumerFor::PAExchangeRequirement)+ (isTheProducerFor::PAExchangeRequirement)+ ;
SystemFunctionTraceabilityElement ::= systemFunction::SystemFunction operationalActivity::Task systemProcessActivity::SystemPA system::System capability::Capability supportStatusCode::SupportStatusCode ;
PAExchangeRequirement ::= (isCitedIn::InformationExchangeRequirement)+ ;
OperationalCapabilityTask ::= isAccomplishedA::SystemOperationalCapabilityTask ;
SupportStatusCode ::= (red::ε) | (yellow::ε) | (green::ε) ;
ArchitectureDocument ::= name::String description::String view::String ;
SystemFunctionTraceabilityMatrix ::= (isDefinedBy::SystemFunctionTraceabilityElement)+ ;
AM ::= type::String (isCitedBy::PATask)+ (includes::AMPA)+ ;
InformationTechnologyRequirement ::= InformationExchangeRequirement ;
 InformationTechnologyRequirement ::= PAExchangeRequirement ;
 InformationTechnologyRequirement ::= (specifies::RequiredInformationTechnologyCapability)+ ;
DoDAFModel ::= (document::Document)+ (sftm::SystemFunctionTraceabilityMatrix)+ (sd::SystemDocument)+ (am::AM)+ (system::System)+ (task::Task)+ (capability::Capability)+ (capabilityDocument::CapabilityDocument)+ (systemCapability::SystemCapability)+ ;
MaterielItemCapabilityNorm ::= (isPerformedBy::SystemCapability)+ (isOrdinateFor::Capability)+ (isSubordinateOf::Capability)+ (isPerformedByNC::NetworkCapability)+ (isPerformedByNLC::NodeLinkCapability)+ (isPerformedBySC::SystemCapability)+ (isCitedInCD::CapabilityDocument)+ (isUsedInMICN::MaterielItemCapabilityNorm)+ (isUsedInOTCN::OrganizationTypeCapabilityNorm)+ (isAttainedFor::RequiredInformationTechnologyCapability)+ ;
SystemDocument ::= name::String description::String view::String ;
SystemCapability ::= (isCitedIn::Capability)+ ;
SystemFunction ::= (isCitedFor::SystemFunctionTraceabilityElement)+ ;
NetworkCapability ::= (isPerformedBy::SystemCapability)+ (isOrdinateFor::Capability)+ (isSubordinateOf::Capability)+ (isPerformedByNC::NetworkCapability)+ (isPerformedByNLC::NodeLinkCapability)+ (isPerformedBySC::SystemCapability)+ (isCitedInCD::CapabilityDocument)+ (isUsedInMICN::MaterielItemCapabilityNorm)+ (isUsedInOTCN::OrganizationTypeCapabilityNorm)+ (isAttainedFor::RequiredInformationTechnologyCapability)+ ;
InformationAsset ::= AM ;
OrganizationTypeCapabilityNorm ::= (isPerformedBy::SystemCapability)+ (isOrdinateFor::Capability)+ (isSubordinateOf::Capability)+ (isPerformedByNC::NetworkCapability)+ (isPerformedByNLC::NodeLinkCapability)+ (isPerformedBySC::SystemCapability)+ (isCitedInCD::CapabilityDocument)+ (isUsedInMICN::MaterielItemCapabilityNorm)+ (isUsedInOTCN::OrganizationTypeCapabilityNorm)+ (isAttainedFor::RequiredInformationTechnologyCapability)+ ;
SystemPA ::= (mayBeCitedFor::SystemFunctionTraceabilityElement)+ (provides::SystemCapability)+ (enables::SystemOperationalCapabilityTask)+ ;
SystemOperationalCapabilityTask ::= levelIdentifier::String references::String cost::String (correspondsTo::PATask)+ (isSupportedBy::ArchitectureTask)+ (isTheSourceOfNeedFor::InformationExchangeRequirement)+ (isTheDestinationOfNeedFor::InformationExchangeRequirement)+ (isCitedFor::SystemFunctionTraceabilityElement)+ ;
--------------------metamodels::DoDAF.bgf--------------------
ATO ::= timePeriod::String (cr::CollectionRequirement)+ mea::MunitionsEffectsAssesment (tn::TargetNomination)+ rr::RestrikeRecommendation ;
F2C2 ::= jfc::JFC ;
WSV ::= missionID::String weaponfSystemID::String videoType::String ;
JFSOCC ::= jfc::JFC ;
TargetMaterialsAnalysis ::= targetID::String target::Target ;
TargetNomination ::= (ato::ATO)+ (mea::MunitionsEffectsAssesment)+ rr::RestrikeRecommendation target::Target ;
ServiceRegistry ::= ε ;
JFMCC ::= jfc::JFC ;
SystemProductFlow ::= (transports::Product)+ originatesFrom::SystemFunction ;
ComponentCommand ::= DJFLCC ;
 ComponentCommand ::= JFACC ;
 ComponentCommand ::= JFMCC ;
 ComponentCommand ::= JFSOCC ;
 ComponentCommand ::= jfc::JFC ;
SubordinateAirCommand ::= MAW ;
 SubordinateAirCommand ::= WOC ;
 SubordinateAirCommand ::= jfacc::JFACC ;
DJFLCC ::= jfc::JFC ;
WOC ::= jfacc::JFACC ;
AOCCID ::= name::String content::String ;
CombatReport ::= friendlyUnitsInvolved::String combatLocation::String resultsAssessment::String duration::String ;
ServiceMediator ::= ServiceRegistry ;
 ServiceMediator ::= ServiceLocator ;
 ServiceMediator ::= ServiceBroker ;
 ServiceMediator ::= ServiceRegistry | ServiceLocator | ServiceBroker ;
MISREP ::= missionID::String missionObjectives::String missionAssesments::String ;
SystemsNode ::= (groups::SystemAtNode)+ ;
ServiceProvider ::= ServiceMediator ;
CollectionRequirement ::= sourceID::String collectionTargetID::String toBeDoneByTime::String specialNeeds::String (rd::ResultData)+ (ato::ATO)+ (isContainedIn::Target)+ ;
JFACC ::= subordinateAirCommand::SubordinateAirCommand (aoccid::AOCCID)+ (aoccpsc::AOCCombatPlanStrategyCells)+ ;
SystemRole ::= ServiceProvider ;
 SystemRole ::= (decomposes::SystemRole)+ (performs::SystemFunction)+ terminatesAt::SystemRoleInterface ;
QualityRequirement ::= ε ;
ConstraintOrRequirement ::= Constraint ;
 ConstraintOrRequirement ::= QualityRequirement ;
DataReference ::= defineBy::Data ;
OperationalActivity ::= (decomposes::OperationalRole)+ (supports::SystemFunction)+ ;
HigherEchelon ::= dia::DIA jfc::JFC ;
RestrikeRecommendation ::= ato::ATO tn::TargetNomination ;
COI ::= (comprises::Performer)+ defines::Vocabulary ;
DIA ::= nmjic::NMJIC higherEchelon::HigherEchelon ;
MIDB ::= (target::Target)+ ;
SystemAtNodeInterface ::= originatesFrom::SystemAtNode ;
SystemRoleInterface ::= ServiceDependency ;
 SystemRoleInterface ::= originatesFrom::SystemRole ;
BDAReport ::= targetID::String reportSourceID::String assesmentSumart::String validityDuration::String (rd::ResultData)+ mea::MunitionsEffectsAssesment ;
ServiceBroker ::= ε ;
AOCCombatPlanStrategyCells ::= name::String content::String ;
OperationalRole ::= (decomposes::OperationalRole)+ (accomplishes::OperationalActivity)+ ;
MunitionsEffectsAssesment ::= bdaReport::BDAReport ato::ATO tn::TargetNomination ;
ResultData ::= CombatReport ;
 ResultData ::= WSV ;
 ResultData ::= MISREP ;
 ResultData ::= Imagery ;
 ResultData ::= sourceID::String timeStamp::String (cr::CollectionRequirement)+ (bdaReport::BDAReport)+ ;
JFC ::= higherEchelon::HigherEchelon f2c2::F2C2 componentComand::ComponentCommand ;
SystemFunction ::= Service ;
 SystemFunction ::= (decomposes::SystemFunction)+ (consumes::Product)+ (produces::Product)+ terminatesAt::SystemProductFlow (mesuredBy::ConstraintOrRequirement)+ ;
NMJIC ::= dia::DIA ;
SystemAtNode ::= references::System terminatesAt::SystemAtNodeInterface ;
MAW ::= jfacc::JFACC ;
ServiceLocator ::= ε ;
ServiceDependency ::= originatesFrom::SystemRole ;
--------------------metamodels::DotNET_SystemReflection.bgf--------------------
MemberTypes ::= (Constructor::ε) | (Event::ε) | (Field::ε) | (Method::ε) | (Property::ε) | (TypeInfo::ε) | (Custom::ε) | (NestedType::ε) | (All::ε) ;
ManifestResource ::= content::String assembly::Assembly ;
MethodAttributes ::= (Abstract::ε) | (Assembly::ε) | (ChekedAccessOnOverride::ε) | (FamADNAssem::ε) | (Family::ε) | (FamORAssem::ε) | (Final::ε) | (HasSecurity::ε) | (HideBySig::ε) | (MemberAccessMask::ε) | (NewSlot::ε) | (PInvokeImpl::ε) | (Private::ε) | (PrivateScope::ε) | (Public::ε) | (RequiredSecObject::ε) | (ReservedMask::ε) | (ReuseSlot::ε) | (RTSpecialName::ε) | (SpecialName::ε) | (Static::ε) | (UnmanagedExport::ε) | (Virtual::ε) | (VtableLayoutMask::ε) ;
ParameterInfo ::= defaultValue::String position::Integer (attributes::ParameterAttributes)+ parameterType::Type member::MethodBase ;
MethodBase ::= MethodInfo ;
 MethodBase ::= ConstructorInfo ;
TypeAttributes ::= (Abstract::ε) | (AnsiClass::ε) | (AutoClass::ε) | (AutoLayout::ε) | (BeforFieldInit::ε) | (Class::ε) | (ClassSemanticsMask::ε) | (ExplicitLayout::ε) | (HasSecutity::ε) | (Import::ε) | (Interface::ε) | (LayoutMask::ε) | (NestedAssembly::ε) | (NestedFamADNAssem::ε) | (NestedFamily::ε) | (NestedFamORAssem::ε) | (NestedPrivate::ε) | (NestedPublic::ε) | (NotPublic::ε) | (Public::ε) | (ReservedMask::ε) | (RTSpecialName::ε) | (Sealed::ε) | (SequentialLayout::ε) | (Serializable::ε) | (SpecialName::ε) | (StringFormatMask::ε) | (UnicodeClass::ε) | (VisibilityMask::ε) ;
FieldAttributes ::= (FieldAccessMask::ε) | (PrivateScope::ε) | (Private::ε) | (Assembly::ε) | (Family::ε) | (FamANDAssem::ε) | (FamORAssem::ε) | (Public::ε) | (Shared::ε) | (InitOnly::ε) | (Literal::ε) | (NotSerialized::ε) | (SpecialName::ε) | (PinvokeImpl::ε) | (ReservedMask::ε) | (RTSpecialName::ε) | (HasFieldMarshal::ε) | (HasDefault::ε) | (HasFieldRVA::ε) | (Static::ε) ;
EventAttributes ::= (None::ε) | (ReservedMask::ε) | (RTSpecialName::ε) | (SpecialName::ε) ;
MethodInfo ::= returnType::Type ;
PropertyAttributes ::= (NotSupported::ε) | (Optional::ε) | (Read::ε) | (Required::ε) | (Write::ε) ;
GenericParameterAttributes ::= (HasElementType::ε) | (Abstract::ε) | (AnsiClass::ε) | (AutoClass::ε) | (AutoLayout::ε) | (ByRef::ε) | (Class::ε) | (COMObject::ε) | (Contextful::ε) | (Enum::ε) | (ExplicitLayout::ε) | (Import::ε) | (Interface::ε) | (LayoutSequential::ε) | (MarshalByRef::ε) | (NestedAssembly::ε) | (NestedFamADNAssem::ε) | (NestedFamily::ε) | (NestedFamORAssem::ε) | (NestedPrivate::ε) | (NestedPublic::ε) | (NotPublic::ε) | (Pointer::ε) | (Primitive::ε) | (Public::ε) | (Sealed::ε) | (Serializable::ε) | (SpecialName::ε) | (UnicodeClass::ε) | (ValueType::ε) ;
ConstructorInfo ::= (attributes::MethodAttributes)+ (parameters::ParameterInfo)+ ;
EventInfo ::= isMulticast::Boolean attributes::EventAttributes eventHandlerType::Type ;
FieldInfo ::= fieldType::Type (attributes::FieldAttributes)+ ;
MemberInfo ::= PropertyInfo ;
 MemberInfo ::= FieldInfo ;
 MemberInfo ::= EventInfo ;
 MemberInfo ::= MethodBase ;
 MemberInfo ::= Type ;
PropertyInfo ::= propertyType::Type (attributes::PropertyAttributes)+ ;
NamedElement ::= Assembly ;
 NamedElement ::= Module ;
 NamedElement ::= MemberInfo ;
 NamedElement ::= ParameterInfo ;
ParameterAttributes ::= (HasDefault::ε) | (HasDefaultMArshal::ε) | (In::ε) | (Lcid::ε) | (None::ε) | (Optional::ε) | (Out::ε) | (Reserved3::ε) | (Reserved4::ε) | (ReservedMask::ε) | (RetVal::ε) ;
--------------------metamodels::EAI.bgf--------------------
EAIResource ::= EAIQueue ;
FCMSource ::= EAISource ;
EAISource ::= (resources::EAIResource)+ ;
EAIQueue ::= maxLength::Integer name::String ;
FCMSink ::= EAISink ;
EAISink ::= (resources::EAIResource)+ ;
--------------------metamodels::EG.bgf--------------------
ExecutionGraph ::= (node::Node)+ nodeNested::Node ;
--------------------metamodels::EQN.bgf--------------------
PassiveCenter ::= node::Node queuingNetwork::QueuingNetwork ;
ActiveCenter ::= node::Node queuingNetwork::QueuingNetwork ;
RoutingChain ::= (queuingNetwork::QueuingNetwork)+ ;
ExecutionGraph ::= nodeNested::Node (node::Node)+ ;
QueuingNetwork ::= (center::Center)+ workLoad::RoutingChain ;
--------------------metamodels::EXPRESS.bgf--------------------
Express_metamodel::Instances::NumberValue ::= ε ;
Express_metamodel::Core::ARRAYType ::= Express_metamodel::Core::ARRAYType::lo-index::Core/Express_metamodel%3A%3ACore%3A%3AArrayBound Express_metamodel::Core::ARRAYType::hi-index::Core/Express_metamodel%3A%3ACore%3A%3AArrayBound isOptional::MOF/Boolean ;
Express_metamodel::Instances::SingleEntityValue ::= Express_metamodel::Instances::SingleEntityValue::equivalent::Instances/Express_metamodel%3A%3AInstances%3A%3APartialEntityValue Express_metamodel::Instances::SingleEntityValue::of-type::Core/Express_metamodel%3A%3ACore%3A%3ASingleEntityType (Express_metamodel::Instances::SingleEntityValue::properties::Instances/Express_metamodel%3A%3AInstances%3A%3AAttributeValue)+ ;
Express_metamodel::Core::InterfacedElement ::= Express_metamodel::Core::InterfacedElement::interfacing-schema::Core/Express_metamodel%3A%3ACore%3A%3ASchema Express_metamodel::Core::InterfacedElement::refers-to::Core/Express_metamodel%3A%3ACore%3A%3ASchemaElement isUSE::MOF/Boolean interfacedId::Core/Express_metamodel%3A%3ACore%3A%3AScopedId ;
Express_metamodel::Expressions::PartialEntityConstructor ::= Express_metamodel::Expressions::PartialEntityConstructor::result-value::Instances/Express_metamodel%3A%3AInstances%3A%3APartialEntityValue Express_metamodel::Expressions::PartialEntityConstructor::attribute-group::Core/Express_metamodel%3A%3ACore%3A%3ASingleEntityType (Express_metamodel::Expressions::PartialEntityConstructor::bindings::Expressions/Express_metamodel%3A%3AExpressions%3A%3AAttributeBinding)+ id::Core/Identifier ;
Express_metamodel::Statements::RepeatStatement ::= Express_metamodel::Statements::RepeatStatement::while-expression::Core/Express_metamodel%3A%3ACore%3A%3AExpression Express_metamodel::Statements::RepeatStatement::body::Algorithms/Express_metamodel%3A%3AAlgorithms%3A%3AStatement Express_metamodel::Statements::RepeatStatement::control-variable::Statements/Express_metamodel%3A%3AStatements%3A%3AControlVariable Express_metamodel::Statements::RepeatStatement::until-expression::Core/Express_metamodel%3A%3ACore%3A%3AExpression ;
Express_metamodel::Algorithms::Procedure ::= ε ;
Express_metamodel::Expressions::GroupRef ::= Express_metamodel::Expressions::GroupRef::refers-to::Core/Express_metamodel%3A%3ACore%3A%3ASingleEntityType id::Core/Identifier ;
Express_metamodel::Algorithms::ActualSETType ::= ε ;
Express_metamodel::Instances::TypeName ::= Express_metamodel::Instances::TypeName::refers-to::Core/Express_metamodel%3A%3ACore%3A%3ANamedType represents::Core/Express_metamodel%3A%3ACore%3A%3AScopedId ;
Express_metamodel::Rules::TOTAL_OVERConstraint ::= ε ;
Express_metamodel::Core::EnumerationType ::= (Express_metamodel::Core::EnumerationType::values::Instances/Express_metamodel%3A%3AInstances%3A%3AEnumerationItem)+ (Express_metamodel::Core::EnumerationType::declared-items::Instances/Express_metamodel%3A%3AInstances%3A%3AEnumerationItem)+ (Express_metamodel::Core::EnumerationType::extension::Core/Express_metamodel%3A%3ACore%3A%3AEnumerationType)+ Express_metamodel::Core::EnumerationType::base::Core/Express_metamodel%3A%3ACore%3A%3AEnumerationType isExtensible::MOF/Boolean ;
Express_metamodel::Core::Relationship ::= Express_metamodel::Core::Relationship::domain::Core/Express_metamodel%3A%3ACore%3A%3ADomainRole Express_metamodel::Core::Relationship::roles::Core/Express_metamodel%3A%3ACore%3A%3ARole Express_metamodel::Core::Relationship::based-on::Core/Express_metamodel%3A%3ACore%3A%3AInvertibleAttribute Express_metamodel::Core::Relationship::range::Core/Express_metamodel%3A%3ACore%3A%3ARangeRole ;
Express_metamodel::Algorithms::ActualDataType ::= ε ;
Express_metamodel::Core::PartialEntityType ::= (Express_metamodel::Core::PartialEntityType::components::Core/Express_metamodel%3A%3ACore%3A%3ASingleEntityType)+ ;
Express_metamodel::Expressions::MemberBinding ::= Express_metamodel::Expressions::MemberBinding::repetition::Expressions/Express_metamodel%3A%3AExpressions%3A%3ARepeatCount (Express_metamodel::Expressions::MemberBinding::to-slot::Instances/Express_metamodel%3A%3AInstances%3A%3AListMember)+ Express_metamodel::Expressions::MemberBinding::member-value::Core/Express_metamodel%3A%3ACore%3A%3AExpression position::MOF/Integer ;
Express_metamodel::Instances::EntityInstance ::= Express_metamodel::Instances::EntityInstance::state::Instances/Express_metamodel%3A%3AInstances%3A%3AEntityValue (Express_metamodel::Instances::EntityInstance::instance-of::Core/Express_metamodel%3A%3ACore%3A%3AEntityType)+ (Express_metamodel::Instances::EntityInstance::appears-in-population::Instances/Express_metamodel%3A%3AInstances%3A%3APopulation)+ id::Instances/EntityName ;
Express_metamodel::Statements::ControlVariable ::= Express_metamodel::Statements::ControlVariable::bound-value::Core/Express_metamodel%3A%3ACore%3A%3AExpression Express_metamodel::Statements::ControlVariable::initial-value::Core/Express_metamodel%3A%3ACore%3A%3AExpression Express_metamodel::Statements::ControlVariable::namespace::Statements/Express_metamodel%3A%3AStatements%3A%3ARepeatStatement Express_metamodel::Statements::ControlVariable::increment::Core/Express_metamodel%3A%3ACore%3A%3AExpression ;
Express_metamodel::Core::GeneralARRAYType ::= Express_metamodel::Core::GeneralARRAYType::hi-index::Core/Express_metamodel%3A%3ACore%3A%3AArrayBound Express_metamodel::Core::GeneralARRAYType::lo-index::Core/Express_metamodel%3A%3ACore%3A%3AArrayBound isOptional::MOF/Boolean ;
Express_metamodel::Expressions::UnaryOperation ::= Express_metamodel::Expressions::UnaryOperation::unary-operand::Core/Express_metamodel%3A%3ACore%3A%3AExpression operator::Expressions/UnaryOperator ;
Express_metamodel::Core::SingleEntityType ::= (Express_metamodel::Core::SingleEntityType::declares_ExplicitAttribute::Core/Express_metamodel%3A%3ACore%3A%3AExplicitAttribute)+ (Express_metamodel::Core::SingleEntityType::declares_Attribute::Core/Express_metamodel%3A%3ACore%3A%3AAttribute)+ Express_metamodel::Core::SingleEntityType::declared-in::Core/Express_metamodel%3A%3ACore%3A%3AEntityType Express_metamodel::Core::SingleEntityType::equivalent::Core/Express_metamodel%3A%3ACore%3A%3APartialEntityType id::Core/Express_metamodel%3A%3ACore%3A%3AScopedId ;
Express_metamodel::Instances::BagMember ::= Express_metamodel::Instances::BagMember::member-value::Core/Express_metamodel%3A%3ACore%3A%3AInstance count::MOF/Integer ;
Express_metamodel::Instances::PartialEntityValue ::= Express_metamodel::Instances::PartialEntityValue::of-type::Core/Express_metamodel%3A%3ACore%3A%3APartialEntityType (Express_metamodel::Instances::PartialEntityValue::components::Instances/Express_metamodel%3A%3AInstances%3A%3ASingleEntityValue)+ ;
Express_metamodel::Statements::MemberCell ::= Express_metamodel::Statements::MemberCell::index-value::Core/Express_metamodel%3A%3ACore%3A%3AExpression Express_metamodel::Statements::MemberCell::base-aggregate::Statements/Express_metamodel%3A%3AStatements%3A%3AVARExpression ;
Express_metamodel::Statements::EscapeStatement ::= Express_metamodel::Statements::EscapeStatement::in-block::Algorithms/Express_metamodel%3A%3AAlgorithms%3A%3AStatement ;
Express_metamodel::Algorithms::Function ::= Express_metamodel::Algorithms::Function::result::Algorithms/Express_metamodel%3A%3AAlgorithms%3A%3AFunctionResult ;
Express_metamodel::Instances::EnumerationItem ::= (Express_metamodel::Instances::EnumerationItem::of-type::Core/Express_metamodel%3A%3ACore%3A%3AEnumerationType)+ Express_metamodel::Instances::EnumerationItem::declared-in::Core/Express_metamodel%3A%3ACore%3A%3AEnumerationType position::MOF/Integer ;
Express_metamodel::Expressions::UsedInRef ::= Express_metamodel::Expressions::UsedInRef::inverse-of::Core/Express_metamodel%3A%3ACore%3A%3AAttribute ;
Express_metamodel::Statements::CaseStatement ::= (Express_metamodel::Statements::CaseStatement::cases::Statements/Express_metamodel%3A%3AStatements%3A%3ACaseAction)+ Express_metamodel::Statements::CaseStatement::selection-expression::Core/Express_metamodel%3A%3ACore%3A%3AExpression ;
Express_metamodel::Statements::AttributeCell ::= Express_metamodel::Statements::AttributeCell::refers-to::Core/Express_metamodel%3A%3ACore%3A%3AExplicitAttribute Express_metamodel::Statements::AttributeCell::base-entity::Statements/Express_metamodel%3A%3AStatements%3A%3AVARExpression id::Core/Identifier ;
Express_metamodel::Expressions::Coercion ::= Express_metamodel::Expressions::Coercion::operand::Core/Express_metamodel%3A%3ACore%3A%3AExpression Express_metamodel::Expressions::Coercion::target-type::Core/Express_metamodel%3A%3ACore%3A%3AVariableType ;
Express_metamodel::Algorithms::ActualLISTType ::= ε ;
Express_metamodel::Expressions::QueryVariable ::= Express_metamodel::Expressions::QueryVariable::namespace::Expressions/Express_metamodel%3A%3AExpressions%3A%3AQueryExpression ;
Express_metamodel::Expressions::AttributeRef ::= Express_metamodel::Expressions::AttributeRef::refers-to::Core/Express_metamodel%3A%3ACore%3A%3AAttribute id::Core/Identifier ;
Express_metamodel::Expressions::FunctionCall ::= (Express_metamodel::Expressions::FunctionCall::actual-parameters::Expressions/Express_metamodel%3A%3AExpressions%3A%3AActualParameter)+ Express_metamodel::Expressions::FunctionCall::invokes-function::Algorithms/Express_metamodel%3A%3AAlgorithms%3A%3AFunction Express_metamodel::Expressions::FunctionCall::/returns-result::Algorithms/Express_metamodel%3A%3AAlgorithms%3A%3AFunctionResult ;
Express_metamodel::Algorithms::VARParameter ::= ε ;
Express_metamodel::java::lang::void ::= ε ;
Express_metamodel::Core::NumericType ::= ε ;
Express_metamodel::Core::DerivedAttribute ::= Express_metamodel::Core::DerivedAttribute::derivation::Core/Express_metamodel%3A%3ACore%3A%3AExpression ;
Express_metamodel::Instances::BooleanValue ::= ε ;
Express_metamodel::Instances::GenericAggregate ::= ε ;
Express_metamodel::Expressions::AttributeBinding ::= Express_metamodel::Expressions::AttributeBinding::attribute-value::Core/Express_metamodel%3A%3ACore%3A%3AExpression Express_metamodel::Expressions::AttributeBinding::to-value::Instances/Express_metamodel%3A%3AInstances%3A%3AAttributeValue Express_metamodel::Expressions::AttributeBinding::attribute::Core/Express_metamodel%3A%3ACore%3A%3AExplicitAttribute position::MOF/Integer ;
Express_metamodel::Algorithms::LocalVariable ::= Express_metamodel::Algorithms::LocalVariable::initial-value::Core/Express_metamodel%3A%3ACore%3A%3AExpression ;
Express_metamodel::Instances::Constant ::= Express_metamodel::Instances::Constant::value-expression::Core/Express_metamodel%3A%3ACore%3A%3AExpression Express_metamodel::Instances::Constant::actual-value::Core/Express_metamodel%3A%3ACore%3A%3AInstance Express_metamodel::Instances::Constant::data-type::Core/Express_metamodel%3A%3ACore%3A%3AInstantiableType ;
Express_metamodel::Core::RealType ::= precision::MOF/Integer ;
Express_metamodel::Core::GeneralLISTType ::= ε ;
Express_metamodel::Instances::LISTValue ::= (Express_metamodel::Instances::LISTValue::of-type::Core/Express_metamodel%3A%3ACore%3A%3ALISTType)+ (Express_metamodel::Instances::LISTValue::member-slot::Instances/Express_metamodel%3A%3AInstances%3A%3AListMember)+ ;
Express_metamodel::Instances::ArrayMember ::= Express_metamodel::Instances::ArrayMember::member-value::Core/Express_metamodel%3A%3ACore%3A%3AInstance index::MOF/Integer ;
Express_metamodel::Statements::GroupCell ::= Express_metamodel::Statements::GroupCell::base-entity::Statements/Express_metamodel%3A%3AStatements%3A%3AVARExpression Express_metamodel::Statements::GroupCell::refers-to::Core/Express_metamodel%3A%3ACore%3A%3ASingleEntityType id::Core/Identifier ;
Express_metamodel::Instances::EntityValue ::= (Express_metamodel::Instances::EntityValue::corresponds to::Core/Express_metamodel%3A%3ACore%3A%3AEntityType)+ (Express_metamodel::Instances::EntityValue::describes::Instances/Express_metamodel%3A%3AInstances%3A%3AEntityInstance)+ ;
Express_metamodel::Instances::ListMember ::= Express_metamodel::Instances::ListMember::member-value::Core/Express_metamodel%3A%3ACore%3A%3AInstance position::MOF/Integer ;
Express_metamodel::Expressions::SELFRef ::= ε ;
Express_metamodel::Core::StringType ::= Express_metamodel::Core::StringType::string-length-constraint::Core/Express_metamodel%3A%3ACore%3A%3ALengthConstraint ;
Express_metamodel::Algorithms::ActualBAGType ::= ε ;
Express_metamodel::Statements::StatementBlock ::= (Express_metamodel::Statements::StatementBlock::body-statements_Statement::Algorithms/Express_metamodel%3A%3AAlgorithms%3A%3AStatement)+ delimited::MOF/Boolean ;
Express_metamodel::Algorithms::Statement ::= Express_metamodel::Algorithms::Statement::in-block::Statements/Express_metamodel%3A%3AStatements%3A%3AStatementBlock (Express_metamodel::Algorithms::Statement::body-statements_SkipStatement::Statements/Express_metamodel%3A%3AStatements%3A%3ASkipStatement)+ (Express_metamodel::Algorithms::Statement::body-statements_EscapeStatement::Statements/Express_metamodel%3A%3AStatements%3A%3AEscapeStatement)+ Express_metamodel::Algorithms::Statement::controlled-by::Statements/Express_metamodel%3A%3AStatements%3A%3ARepeatStatement Express_metamodel::Algorithms::Statement::implements::Algorithms/Express_metamodel%3A%3AAlgorithms%3A%3AAlgorithm text::Core/ExpressText ;
Express_metamodel::Expressions::ActualParameter ::= Express_metamodel::Expressions::ActualParameter::in-ProcedureCall::Statements/Express_metamodel%3A%3AStatements%3A%3AProcedureCall Express_metamodel::Expressions::ActualParameter::in-FunctionCall::Expressions/Express_metamodel%3A%3AExpressions%3A%3AFunctionCall Express_metamodel::Expressions::ActualParameter::formal-parameter::Algorithms/Express_metamodel%3A%3AAlgorithms%3A%3AParameter Express_metamodel::Expressions::ActualParameter::actual-referent::Statements/Express_metamodel%3A%3AStatements%3A%3AVARExpression Express_metamodel::Expressions::ActualParameter::actual-value::Core/Express_metamodel%3A%3ACore%3A%3AExpression position::MOF/Integer ;
Express_metamodel::Core::ExplicitAttribute ::= Express_metamodel::Core::ExplicitAttribute::of-entity::Core/Express_metamodel%3A%3ACore%3A%3ASingleEntityType isOptional::MOF/Boolean ;
Express_metamodel::Core::DomainRule ::= Express_metamodel::Core::DomainRule::domain::Core/Express_metamodel%3A%3ACore%3A%3ANamedType position::MOF/Integer ;
Express_metamodel::Statements::AliasVariable ::= Express_metamodel::Statements::AliasVariable::namespace::Statements/Express_metamodel%3A%3AStatements%3A%3AAliasStatement Express_metamodel::Statements::AliasVariable::referent::Statements/Express_metamodel%3A%3AStatements%3A%3AVARExpression ;
Express_metamodel::Rules::ANDConstraint ::= ε ;
Express_metamodel::Expressions::ParameterRef ::= Express_metamodel::Expressions::ParameterRef::refers-to::Algorithms/Express_metamodel%3A%3AAlgorithms%3A%3AParameter id::Core/Identifier ;
Express_metamodel::Core::BinaryType ::= Express_metamodel::Core::BinaryType::binary-length-constraint::Core/Express_metamodel%3A%3ACore%3A%3ALengthConstraint ;
Express_metamodel::Core::LISTType ::= ε ;
Express_metamodel::Instances::RealValue ::= ε ;
Express_metamodel::Expressions::Literal ::= Express_metamodel::Expressions::Literal::refers-to::Instances/Express_metamodel%3A%3AInstances%3A%3ASimpleValue ;
Express_metamodel::Core::SETType ::= ε ;
Express_metamodel::Statements::Assignment ::= Express_metamodel::Statements::Assignment::assigned-value::Core/Express_metamodel%3A%3ACore%3A%3AExpression Express_metamodel::Statements::Assignment::variable::Statements/Express_metamodel%3A%3AStatements%3A%3AVARExpression ;
Express_metamodel::Core::LogicType ::= ε ;
Express_metamodel::Rules::GlobalRule ::= Express_metamodel::Rules::GlobalRule::supporting-body::Algorithms/Express_metamodel%3A%3AAlgorithms%3A%3AStatement (Express_metamodel::Rules::GlobalRule::constrained-extents::Rules/Express_metamodel%3A%3ARules%3A%3AExtent)+ (Express_metamodel::Rules::GlobalRule::contains-rules::Rules/Express_metamodel%3A%3ARules%3A%3ANamedRule)+ ;
Express_metamodel::Core::ScopedId ::= localName::Core/Identifier definingScope::Core/Express_metamodel%3A%3ACore%3A%3AScope ;
Express_metamodel::Instances::AttributeValue ::= Express_metamodel::Instances::AttributeValue::actual-value::Core/Express_metamodel%3A%3ACore%3A%3AInstance Express_metamodel::Instances::AttributeValue::attribute::Core/Express_metamodel%3A%3ACore%3A%3AExplicitAttribute ;
Express_metamodel::Core::GenericType ::= Express_metamodel::Core::GenericType::constraint::Algorithms/Express_metamodel%3A%3AAlgorithms%3A%3AActualTypeConstraint isEntity::MOF/Boolean ;
Express_metamodel::Algorithms::InVariable ::= Express_metamodel::Algorithms::InVariable::source::Algorithms/Express_metamodel%3A%3AAlgorithms%3A%3AInParameter ;
Express_metamodel::Statements::ProcedureCall ::= Express_metamodel::Statements::ProcedureCall::invokes::Algorithms/Express_metamodel%3A%3AAlgorithms%3A%3AProcedure (Express_metamodel::Statements::ProcedureCall::actual-parameters::Expressions/Express_metamodel%3A%3AExpressions%3A%3AActualParameter)+ ;
Express_metamodel::Rules::ONEOFConstraint ::= ε ;
Express_metamodel::Statements::VariableCell ::= Express_metamodel::Statements::VariableCell::refers-to::Algorithms/Express_metamodel%3A%3AAlgorithms%3A%3AVariable id::Core/Identifier ;
Express_metamodel::Rules::SubtypeConstraint ::= (Express_metamodel::Rules::SubtypeConstraint::constrained-subtypes::Rules/Express_metamodel%3A%3ARules%3A%3AExtent)+ Express_metamodel::Rules::SubtypeConstraint::equivalent-rule::Core/Express_metamodel%3A%3ACore%3A%3AExpression Express_metamodel::Rules::SubtypeConstraint::collection::Rules/Express_metamodel%3A%3ARules%3A%3ASupertypeRule ;
Express_metamodel::Core::SizeConstraint ::= Express_metamodel::Core::SizeConstraint::asserts::Core/Express_metamodel%3A%3ACore%3A%3AExpression bound::MOF/Integer ;
Express_metamodel::Instances::LogicalValue ::= ε ;
Express_metamodel::Core::EntityType ::= (Express_metamodel::Core::EntityType::plays-role::Core/Express_metamodel%3A%3ACore%3A%3ARole)+ (Express_metamodel::Core::EntityType::redeclarations::Core/Express_metamodel%3A%3ACore%3A%3ARedeclaration)+ (Express_metamodel::Core::EntityType::attributes::Core/Express_metamodel%3A%3ACore%3A%3AAttribute)+ (Express_metamodel::Core::EntityType::plays-range-role::Core/Express_metamodel%3A%3ACore%3A%3ARangeRole)+ Express_metamodel::Core::EntityType::declares::Core/Express_metamodel%3A%3ACore%3A%3ASingleEntityType (Express_metamodel::Core::EntityType::extension::Rules/Express_metamodel%3A%3ARules%3A%3AExtent)+ (Express_metamodel::Core::EntityType::invertible_attributes::Core/Express_metamodel%3A%3ACore%3A%3AInvertibleAttribute)+ (Express_metamodel::Core::EntityType::plays-domain-role::Core/Express_metamodel%3A%3ACore%3A%3ADomainRole)+ (Express_metamodel::Core::EntityType::instances::Instances/Express_metamodel%3A%3AInstances%3A%3AEntityInstance)+ (Express_metamodel::Core::EntityType::unique-rules::Core/Express_metamodel%3A%3ACore%3A%3AUniqueRule)+ (Express_metamodel::Core::EntityType::used-in::Core/Express_metamodel%3A%3ACore%3A%3AInvertibleAttribute)+ (Express_metamodel::Core::EntityType::subtype-of::Core/Express_metamodel%3A%3ACore%3A%3AEntityType)+ isAbstract::MOF/Boolean ;
Express_metamodel::Core::SpecializedType ::= Express_metamodel::Core::SpecializedType::underlying-type::Core/Express_metamodel%3A%3ACore%3A%3AConcreteType ;
Express_metamodel::Algorithms::ActualStructure ::= ε ;
Express_metamodel::Rules::Extent ::= (Express_metamodel::Rules::Extent::constraints::Rules/Express_metamodel%3A%3ARules%3A%3ASubtypeConstraint)+ (Express_metamodel::Rules::Extent::content::Instances/Express_metamodel%3A%3AInstances%3A%3AEntityInstance)+ Express_metamodel::Rules::Extent::within-population::Instances/Express_metamodel%3A%3AInstances%3A%3APopulation (Express_metamodel::Rules::Extent::constraint-rules::Rules/Express_metamodel%3A%3ARules%3A%3AGlobalRule)+ Express_metamodel::Rules::Extent::for-type::Core/Express_metamodel%3A%3ACore%3A%3AEntityType id::Core/Express_metamodel%3A%3ACore%3A%3AScopedId ;
Express_metamodel::Algorithms::InParameter ::= Express_metamodel::Algorithms::InParameter::variable::Algorithms/Express_metamodel%3A%3AAlgorithms%3A%3AInVariable ;
Express_metamodel::Algorithms::ActualGenericType ::= Express_metamodel::Algorithms::ActualGenericType::refers-to::Algorithms/Express_metamodel%3A%3AAlgorithms%3A%3AActualDataType isEntity::MOF/Boolean label::Core/Identifier ;
Express_metamodel::Algorithms::ActualStructureConstraint ::= Express_metamodel::Algorithms::ActualStructureConstraint::matching-structure::Core/Express_metamodel%3A%3ACore%3A%3AAGGREGATEType Express_metamodel::Algorithms::ActualStructureConstraint::required-structure::Algorithms/Express_metamodel%3A%3AAlgorithms%3A%3AActualStructure label::Core/Identifier ;
Express_metamodel::Core::GeneralSETType ::= ε ;
Express_metamodel::Core::AGGREGATEType ::= Express_metamodel::Core::AGGREGATEType::upper-bound::Core/Express_metamodel%3A%3ACore%3A%3ASizeConstraint Express_metamodel::Core::AGGREGATEType::member-type::Core/Express_metamodel%3A%3ACore%3A%3AParameterType Express_metamodel::Core::AGGREGATEType::constraint::Algorithms/Express_metamodel%3A%3AAlgorithms%3A%3AActualStructureConstraint Express_metamodel::Core::AGGREGATEType::lower-bound::Core/Express_metamodel%3A%3ACore%3A%3ASizeConstraint ;
Express_metamodel::Expressions::ExtentRef ::= Express_metamodel::Expressions::ExtentRef::refers-to::Core/Express_metamodel%3A%3ACore%3A%3ANamedType id::Core/Identifier ;
Express_metamodel::Instances::ARRAYValue ::= (Express_metamodel::Instances::ARRAYValue::of-type::Core/Express_metamodel%3A%3ACore%3A%3AARRAYType)+ (Express_metamodel::Instances::ARRAYValue::member-slot::Instances/Express_metamodel%3A%3AInstances%3A%3AArrayMember)+ ;
Express_metamodel::Algorithms::ActualTypeConstraint ::= Express_metamodel::Algorithms::ActualTypeConstraint::matching-type::Core/Express_metamodel%3A%3ACore%3A%3AGenericType Express_metamodel::Algorithms::ActualTypeConstraint::required-type::Algorithms/Express_metamodel%3A%3AAlgorithms%3A%3AActualDataType label::Core/Identifier ;
Express_metamodel::Instances::IntegerValue ::= ε ;
Express_metamodel::Expressions::QueryExpression ::= Express_metamodel::Expressions::QueryExpression::select-condition::Core/Express_metamodel%3A%3ACore%3A%3AExpression Express_metamodel::Expressions::QueryExpression::query-variable::Expressions/Express_metamodel%3A%3AExpressions%3A%3AQueryVariable Express_metamodel::Expressions::QueryExpression::aggregate-operand::Core/Express_metamodel%3A%3ACore%3A%3AExpression ;
Express_metamodel::Core::ArrayBound ::= Express_metamodel::Core::ArrayBound::bound-expression::Core/Express_metamodel%3A%3ACore%3A%3AExpression bound::MOF/Integer ;
Express_metamodel::Statements::SkipStatement ::= Express_metamodel::Statements::SkipStatement::in-block::Algorithms/Express_metamodel%3A%3AAlgorithms%3A%3AStatement ;
Express_metamodel::Core::Schema ::= (Express_metamodel::Core::Schema::documentation::Core/Express_metamodel%3A%3ACore%3A%3ARemark)+ (Express_metamodel::Core::Schema::interfaces::Core/Express_metamodel%3A%3ACore%3A%3AInterfacedElement)+ (Express_metamodel::Core::Schema::schema-elements::Core/Express_metamodel%3A%3ACore%3A%3ASchemaElement)+ (Express_metamodel::Core::Schema::interfaced-elements::Core/Express_metamodel%3A%3ACore%3A%3ASchemaElement)+ name::Core/Identifier version::Core/Identifier ;
Express_metamodel::Rules::NamedRule ::= Express_metamodel::Rules::NamedRule::namespace::Rules/Express_metamodel%3A%3ARules%3A%3AGlobalRule Express_metamodel::Rules::NamedRule::asserts-expression::Core/Express_metamodel%3A%3ACore%3A%3AExpression position::MOF/Integer ;
Express_metamodel::Instances::BAGValue ::= (Express_metamodel::Instances::BAGValue::member-slot::Instances/Express_metamodel%3A%3AInstances%3A%3ABagMember)+ (Express_metamodel::Instances::BAGValue::of-type::Core/Express_metamodel%3A%3ACore%3A%3ABAGType)+ ;
Express_metamodel::Instances::Indeterminate ::= ε ;
Express_metamodel::Expressions::VariableRef ::= Express_metamodel::Expressions::VariableRef::refers-to::Algorithms/Express_metamodel%3A%3AAlgorithms%3A%3ANamedVariable id::Core/Identifier ;
Express_metamodel::Statements::NullStatement ::= ε ;
Express_metamodel::Rules::SupertypeRule ::= Express_metamodel::Rules::SupertypeRule::named-supertype::Core/Express_metamodel%3A%3ACore%3A%3AEntityType (Express_metamodel::Rules::SupertypeRule::constraints::Rules/Express_metamodel%3A%3ARules%3A%3ASubtypeConstraint)+ assertsAbstract::MOF/Boolean ;
Express_metamodel::Algorithms::FunctionResult ::= Express_metamodel::Algorithms::FunctionResult::namespace::Algorithms/Express_metamodel%3A%3AAlgorithms%3A%3AFunction ;
Express_metamodel::Core::Expression ::= Express_metamodel::Core::Expression::evaluation::Core/Express_metamodel%3A%3ACore%3A%3AInstance Express_metamodel::Core::Expression::interpretation-context::Core/Express_metamodel%3A%3ACore%3A%3AScope Express_metamodel::Core::Expression::data-type::Core/Express_metamodel%3A%3ACore%3A%3ADataType text::Core/ExpressText ;
Express_metamodel::Instances::BinaryValue ::= ε ;
Express_metamodel::Instances::SingleLeafInstance ::= Express_metamodel::Instances::SingleLeafInstance::characterizing-type::Core/Express_metamodel%3A%3ACore%3A%3AEntityType ;
Express_metamodel::Expressions::BinaryOperation ::= Express_metamodel::Expressions::BinaryOperation::left-operand::Core/Express_metamodel%3A%3ACore%3A%3AExpression Express_metamodel::Expressions::BinaryOperation::right-operand::Core/Express_metamodel%3A%3ACore%3A%3AExpression operator::Expressions/BinaryOperator ;
Express_metamodel::Statements::CaseAction ::= (Express_metamodel::Statements::CaseAction::label-value::Core/Express_metamodel%3A%3ACore%3A%3AExpression)+ Express_metamodel::Statements::CaseAction::action::Algorithms/Express_metamodel%3A%3AAlgorithms%3A%3AStatement isDefault::MOF/Boolean ;
Express_metamodel::Expressions::IndeterminateRef ::= Express_metamodel::Expressions::IndeterminateRef::refers-to::Instances/Express_metamodel%3A%3AInstances%3A%3AIndeterminate ;
Express_metamodel::Statements::IfStatement ::= Express_metamodel::Statements::IfStatement::if-condition::Core/Express_metamodel%3A%3ACore%3A%3AExpression Express_metamodel::Statements::IfStatement::else-actions::Algorithms/Express_metamodel%3A%3AAlgorithms%3A%3AStatement Express_metamodel::Statements::IfStatement::then-actions::Algorithms/Express_metamodel%3A%3AAlgorithms%3A%3AStatement ;
Express_metamodel::Expressions::AggregateIndex ::= Express_metamodel::Expressions::AggregateIndex::index-value::Core/Express_metamodel%3A%3ACore%3A%3AExpression ;
Express_metamodel::Instances::SETValue ::= (Express_metamodel::Instances::SETValue::member-value::Core/Express_metamodel%3A%3ACore%3A%3AInstance)+ (Express_metamodel::Instances::SETValue::of-type::Core/Express_metamodel%3A%3ACore%3A%3ASETType)+ ;
Express_metamodel::Statements::AliasStatement ::= Express_metamodel::Statements::AliasStatement::binds-to-reference::Statements/Express_metamodel%3A%3AStatements%3A%3AVARExpression Express_metamodel::Statements::AliasStatement::body::Algorithms/Express_metamodel%3A%3AAlgorithms%3A%3AStatement Express_metamodel::Statements::AliasStatement::alias-variable::Statements/Express_metamodel%3A%3AStatements%3A%3AAliasVariable ;
Express_metamodel::Instances::StringValue ::= ε ;
Express_metamodel::Core::Remark ::= (Express_metamodel::Core::Remark::describes-schema::Core/Express_metamodel%3A%3ACore%3A%3ASchema)+ Express_metamodel::Core::Remark::appears-in::Core/Express_metamodel%3A%3ACore%3A%3AScope (Express_metamodel::Core::Remark::describes-element::Core/Express_metamodel%3A%3ACore%3A%3ANamedElement)+ isTagged::MOF/Boolean isTail::MOF/Boolean text::Core/ExpressText ;
Express_metamodel::Core::Redeclaration ::= Express_metamodel::Core::Redeclaration::derivation::Core/Express_metamodel%3A%3ACore%3A%3AExpression Express_metamodel::Core::Redeclaration::restricted-type::Core/Express_metamodel%3A%3ACore%3A%3AAttributeType Express_metamodel::Core::Redeclaration::refines::Core/Express_metamodel%3A%3ACore%3A%3ARedeclaration Express_metamodel::Core::Redeclaration::upper-bound::Core/Express_metamodel%3A%3ACore%3A%3ASizeConstraint Express_metamodel::Core::Redeclaration::lower-bound::Core/Express_metamodel%3A%3ACore%3A%3ASizeConstraint Express_metamodel::Core::Redeclaration::scope::Core/Express_metamodel%3A%3ACore%3A%3AEntityType Express_metamodel::Core::Redeclaration::original-attribute::Core/Express_metamodel%3A%3ACore%3A%3AAttribute Express_metamodel::Core::Redeclaration::refined-role::Core/Express_metamodel%3A%3ACore%3A%3ARole position::MOF/Integer isMandatory::MOF/Boolean alias::Core/Express_metamodel%3A%3ACore%3A%3AScopedId ;
Express_metamodel::Instances::SpecializedValue ::= Express_metamodel::Instances::SpecializedValue::of-type::Core/Express_metamodel%3A%3ACore%3A%3ASpecializedType Express_metamodel::Instances::SpecializedValue::fundamental-value::Instances/Express_metamodel%3A%3AInstances%3A%3AConcreteValue ;
Express_metamodel::Core::BAGType ::= ε ;
Express_metamodel::Algorithms::ActualARRAYType ::= Express_metamodel::Algorithms::ActualARRAYType::hi-index::Core/Express_metamodel%3A%3ACore%3A%3AArrayBound Express_metamodel::Algorithms::ActualARRAYType::lo-index::Core/Express_metamodel%3A%3ACore%3A%3AArrayBound isOptional::MOF/Boolean ;
Express_metamodel::Expressions::BinaryIndex ::= Express_metamodel::Expressions::BinaryIndex::first-bit::Core/Express_metamodel%3A%3ACore%3A%3AExpression Express_metamodel::Expressions::BinaryIndex::last-bit::Core/Express_metamodel%3A%3ACore%3A%3AExpression ;
Express_metamodel::Instances::RoleName ::= Express_metamodel::Instances::RoleName::refers-to::Core/Express_metamodel%3A%3ACore%3A%3AAttribute represents::Core/Express_metamodel%3A%3ACore%3A%3AScopedId ;
Express_metamodel::java::lang::int ::= ε ;
Express_metamodel::Expressions::ConstantRef ::= Express_metamodel::Expressions::ConstantRef::refers-to::Instances/Express_metamodel%3A%3AInstances%3A%3AConstant id::Core/Identifier ;
Express_metamodel::Core::UniqueRule ::= Express_metamodel::Core::UniqueRule::domain::Core/Express_metamodel%3A%3ACore%3A%3AEntityType (Express_metamodel::Core::UniqueRule::key-component::Core/Express_metamodel%3A%3ACore%3A%3AAttribute)+ position::MOF/Integer ;
Express_metamodel::Core::InvertibleAttribute ::= (Express_metamodel::Core::InvertibleAttribute::inverse::Core/Express_metamodel%3A%3ACore%3A%3AInverseAttribute)+ (Express_metamodel::Core::InvertibleAttribute::range-type::Core/Express_metamodel%3A%3ACore%3A%3AEntityType)+ Express_metamodel::Core::InvertibleAttribute::creates-relationship::Core/Express_metamodel%3A%3ACore%3A%3ARelationship (Express_metamodel::Core::InvertibleAttribute::referencing-type::Core/Express_metamodel%3A%3ACore%3A%3AEntityType)+ Express_metamodel::Core::InvertibleAttribute::models-role::Core/Express_metamodel%3A%3ACore%3A%3ARangeRole ;
Express_metamodel::Core::RangeRole ::= Express_metamodel::Core::RangeRole::domain-view::Core/Express_metamodel%3A%3ACore%3A%3AInvertibleAttribute Express_metamodel::Core::RangeRole::in-relationship::Core/Express_metamodel%3A%3ACore%3A%3ARelationship Express_metamodel::Core::RangeRole::range::Core/Express_metamodel%3A%3ACore%3A%3AEntityType id::Core/Express_metamodel%3A%3ACore%3A%3AScopedId ;
Express_metamodel::Expressions::StringIndex ::= Express_metamodel::Expressions::StringIndex::first-code::Core/Express_metamodel%3A%3ACore%3A%3AExpression Express_metamodel::Expressions::StringIndex::last-code::Core/Express_metamodel%3A%3ACore%3A%3AExpression ;
Express_metamodel::Expressions::EnumItemRef ::= Express_metamodel::Expressions::EnumItemRef::refers-to::Instances/Express_metamodel%3A%3AInstances%3A%3AEnumerationItem id::Core/Identifier ;
Express_metamodel::Core::LengthConstraint ::= maxLength::MOF/Integer isFixed::MOF/Boolean ;
Express_metamodel::Instances::Population ::= (Express_metamodel::Instances::Population::composition_EntityInstance::Instances/Express_metamodel%3A%3AInstances%3A%3AEntityInstance)+ (Express_metamodel::Instances::Population::composition_Instance::Core/Express_metamodel%3A%3ACore%3A%3AInstance)+ (Express_metamodel::Instances::Population::governing-schema::Core/Express_metamodel%3A%3ACore%3A%3ASchema)+ ;
Express_metamodel::Algorithms::ActualAGGREGATEType ::= Express_metamodel::Algorithms::ActualAGGREGATEType::upper-bound::Core/Express_metamodel%3A%3ACore%3A%3ASizeConstraint Express_metamodel::Algorithms::ActualAGGREGATEType::refers-to::Algorithms/Express_metamodel%3A%3AAlgorithms%3A%3AActualStructure Express_metamodel::Algorithms::ActualAGGREGATEType::member-type::Core/Express_metamodel%3A%3ACore%3A%3AVariableType Express_metamodel::Algorithms::ActualAGGREGATEType::lower-bound::Core/Express_metamodel%3A%3ACore%3A%3ASizeConstraint label::Core/Identifier ;
Express_metamodel::Statements::VARCell ::= Express_metamodel::Statements::VARCell::refers-to::Algorithms/Express_metamodel%3A%3AAlgorithms%3A%3AVARVariable id::Core/Identifier ;
Express_metamodel::Core::DomainRole ::= Express_metamodel::Core::DomainRole::range-view::Core/Express_metamodel%3A%3ACore%3A%3AInverseAttribute Express_metamodel::Core::DomainRole::domain::Core/Express_metamodel%3A%3ACore%3A%3AEntityType Express_metamodel::Core::DomainRole::in-relationship::Core/Express_metamodel%3A%3ACore%3A%3ARelationship id::Core/Express_metamodel%3A%3ACore%3A%3AScopedId ;
Express_metamodel::Core::GeneralBAGType ::= ε ;
Express_metamodel::Expressions::RepeatCount ::= Express_metamodel::Expressions::RepeatCount::derivation::Core/Express_metamodel%3A%3ACore%3A%3AExpression ;
Express_metamodel::Core::SelectType ::= (Express_metamodel::Core::SelectType::allowed-types::Core/Express_metamodel%3A%3ACore%3A%3ANamedType)+ (Express_metamodel::Core::SelectType::extension::Core/Express_metamodel%3A%3ACore%3A%3ASelectType)+ Express_metamodel::Core::SelectType::base::Core/Express_metamodel%3A%3ACore%3A%3ASelectType (Express_metamodel::Core::SelectType::select-list::Core/Express_metamodel%3A%3ACore%3A%3ANamedType)+ isExtensible::MOF/Boolean isEntity::MOF/Boolean ;
Express_metamodel::Expressions::AggregateInitializer ::= Express_metamodel::Expressions::AggregateInitializer::result-value::Instances/Express_metamodel%3A%3AInstances%3A%3AGenericAggregate (Express_metamodel::Expressions::AggregateInitializer::bindings::Expressions/Express_metamodel%3A%3AExpressions%3A%3AMemberBinding)+ ;
Express_metamodel::Statements::ReturnStatement ::= Express_metamodel::Statements::ReturnStatement::return-value::Core/Express_metamodel%3A%3ACore%3A%3AExpression ;
Express_metamodel::Instances::MultiLeafInstance ::= ε ;
Express_metamodel::Core::InverseAttribute ::= Express_metamodel::Core::InverseAttribute::models-role::Core/Express_metamodel%3A%3ACore%3A%3ADomainRole Express_metamodel::Core::InverseAttribute::explicit::Core/Express_metamodel%3A%3ACore%3A%3AInvertibleAttribute isUnique::MOF/Boolean ;
--------------------metamodels::EXPRESSb.bgf--------------------
CaseStatement ::= (cases::statements/CaseAction)+ selectionExpression::core/Expression ;
ReturnStatement ::= returnValue::core/Expression ;
PartialEntityType ::= (components::core/SingleEntityType)+ ;
StatementBlock ::= (bodyStatements_Statement::algorithms/Statement)+ delimited::mof/Boolean ;
AttributeCell ::= refersTo::core/ExplicitAttribute baseEntity::statements/VARExpression id::core/Identifier ;
BinaryType ::= binaryLengthConstraint::core/LengthConstraint ;
DomainRole ::= rangeView::core/InverseAttribute domain::core/EntityType id::core/ScopedId ;
GeneralBAGType ::= ε ;
AGGREGATEType ::= upperBound::core/SizeConstraint memberType::core/ParameterType constraint::algorithms/ActualStructureConstraint lowerBound::core/SizeConstraint ;
ListMember ::= memberValue::core/Instance position::mof/Integer ;
LISTType ::= ε ;
IndeterminateRef ::= refersTo::instances/Indeterminate ;
AttributeRef ::= refersTo::core/Attribute id::core/Identifier ;
SelectType ::= (allowedTypes::core/NamedType)+ (extension::core/SelectType)+ base::core/SelectType (selectList::core/NamedType)+ isExtensible::mof/Boolean isEntity::mof/Boolean ;
FunctionCall ::= (actualParameters::expressions/ActualParameter)+ invokesFunction::algorithms/Function returnsResult::algorithms/FunctionResult ;
RepeatStatement ::= whileExpression::core/Expression body::algorithms/Statement controlVariable::statements/ControlVariable untilExpression::core/Expression ;
ANDConstraint ::= ε ;
LISTValue ::= (memberSlot::instances/ListMember)+ ;
IntegerValue ::= ε ;
AggregateIndex ::= indexValue::core/Expression ;
InverseAttribute ::= modelsRole::core/DomainRole explicit::core/InvertibleAttribute isUnique::mof/Boolean ;
ScopedId ::= localName::core/Identifier definingScope::core/Scope ;
MemberBinding ::= repetition::expressions/RepeatCount (toSlot::instances/ListMember)+ memberValue::core/Expression position::mof/Integer ;
BAGValue ::= (memberSlot::instances/BagMember)+ ;
ExtentRef ::= refersTo::core/NamedType id::core/Identifier ;
AttributeBinding ::= attributeValue::core/Expression toValue::instances/AttributeValue attribute::core/ExplicitAttribute position::mof/Integer ;
LocalVariable ::= initialValue::core/Expression ;
ActualStructure ::= ε ;
InParameter ::= variable::algorithms/InVariable ;
VARParameter ::= ε ;
InVariable ::= source::algorithms/InParameter ;
GroupCell ::= baseEntity::statements/VARExpression refersTo::core/SingleEntityType id::core/Identifier ;
QueryExpression ::= selectCondition::core/Expression queryVariable::expressions/QueryVariable aggregateOperand::core/Expression ;
GlobalRule ::= supportingBody::algorithms/Statement (constrainedExtents::rules/Extent)+ (containsRules::rules/NamedRule)+ ;
SizeConstraint ::= bound::mof/Integer ;
EntityType ::= (playsRole::core/Role)+ (redeclarations::core/Redeclaration)+ (attributes::core/Attribute)+ (playsRangeRole::core/RangeRole)+ declares::core/SingleEntityType (extension::rules/Extent)+ (invertibleAttributes::core/InvertibleAttribute)+ (playsDomainRole::core/DomainRole)+ (uniqueRules::core/UniqueRule)+ (usedIn::core/InvertibleAttribute)+ (subtypeOf::core/EntityType)+ isAbstract::mof/Boolean ;
EnumerationItem ::= declaredIn::core/EnumerationType position::mof/Integer ;
ONEOFConstraint ::= ε ;
ControlVariable ::= boundValue::core/Expression initialValue::core/Expression increment::core/Expression ;
VariableRef ::= refersTo::algorithms/NamedVariable id::core/Identifier ;
SubtypeConstraint ::= (constrainedSubtypes::rules/Extent)+ equivalentRule::core/Expression collection::rules/SupertypeRule ;
AttributeValue ::= actualValue::core/Instance attribute::core/ExplicitAttribute ;
ActualBAGType ::= ε ;
GeneralSETType ::= ε ;
RealValue ::= ε ;
ActualDataType ::= ε ;
UsedInRef ::= inverseOf::core/Attribute ;
BinaryValue ::= ε ;
SETValue ::= (memberValue::core/Instance)+ ;
EscapeStatement ::= ε ;
MultiLeafInstance ::= ε ;
AliasVariable ::= referent::statements/VARExpression ;
TOTAL_OVERConstraint ::= ε ;
GeneralARRAYType ::= hiIndex::core/ArrayBound loIndex::core/ArrayBound isOptional::mof/Boolean ;
ParameterRef ::= refersTo::algorithms/Parameter id::core/Identifier ;
BooleanValue ::= ε ;
SpecializedValue ::= fundamentalValue::instances/ConcreteValue ;
GenericAggregate ::= ε ;
NumericType ::= ε ;
SingleEntityValue ::= equivalent::instances/PartialEntityValue ofType::core/SingleEntityType (properties::instances/AttributeValue)+ ;
BinaryOperation ::= leftOperand::core/Expression rightOperand::core/Expression operator::expressions/BinaryOperator ;
ArrayBound ::= boundExpression::core/Expression bound::mof/Integer ;
SingleEntityType ::= (declaresExplicitAttribute::core/ExplicitAttribute)+ (declaresAttribute::core/Attribute)+ declaredIn::core/EntityType equivalent::core/PartialEntityType id::core/ScopedId ;
QueryVariable ::= ε ;
AggregateInitializer ::= resultValue::instances/GenericAggregate (bindings::expressions/MemberBinding)+ ;
BAGType ::= ε ;
RoleName ::= refersTo::core/Attribute represents::core/ScopedId ;
StringValue ::= ε ;
GeneralLISTType ::= ε ;
MemberCell ::= indexValue::core/Expression baseAggregate::statements/VARExpression ;
EntityInstance ::= state::instances/EntityValue (instanceOf::core/EntityType)+ id::instances/EntityName ;
ARRAYValue ::= (memberSlot::instances/ArrayMember)+ ;
PartialEntityConstructor ::= resultValue::instances/PartialEntityValue attributeGroup::core/SingleEntityType (bindings::expressions/AttributeBinding)+ id::core/Identifier ;
FunctionResult ::= ε ;
NamedRule ::= assertsExpression::core/Expression position::mof/Integer ;
GroupRef ::= refersTo::core/SingleEntityType id::core/Identifier ;
InvertibleAttribute ::= (inverse::core/InverseAttribute)+ (rangeType::core/EntityType)+ createsRelationship::core/Relationship (referencingType::core/EntityType)+ modelsRole::core/RangeRole ;
ArrayMember ::= memberValue::core/Instance index::mof/Integer ;
RangeRole ::= domainView::core/InvertibleAttribute range::core/EntityType id::core/ScopedId ;
IfStatement ::= ifCondition::core/Expression elseActions::algorithms/Statement thenActions::algorithms/Statement ;
BinaryIndex ::= firstBit::core/Expression lastBit::core/Expression ;
ProcedureCall ::= invokes::algorithms/Procedure (actualParameters::expressions/ActualParameter)+ ;
SupertypeRule ::= namedSupertype::core/EntityType (constraints::rules/SubtypeConstraint)+ assertsAbstract::mof/Boolean ;
ConstantRef ::= refersTo::instances/Constant id::core/Identifier ;
EntityValue ::= (correspondsTo::core/EntityType)+ (describes::instances/EntityInstance)+ ;
ActualSETType ::= ε ;
PartialEntityValue ::= (components::instances/SingleEntityValue)+ ;
ExplicitAttribute ::= isOptional::mof/Boolean ;
SELFRef ::= ε ;
ActualLISTType ::= ε ;
CaseAction ::= (labelValue::core/Expression)+ action::algorithms/Statement isDefault::mof/Boolean ;
ActualARRAYType ::= hiIndex::core/ArrayBound loIndex::core/ArrayBound isOptional::mof/Boolean ;
ActualGenericType ::= refersTo::algorithms/ActualDataType isEntity::mof/Boolean label::core/Identifier ;
BagMember ::= memberValue::core/Instance count::mof/Integer ;
ActualStructureConstraint ::= matchingStructure::core/AGGREGATEType requiredStructure::algorithms/ActualStructure label::core/Identifier ;
StringIndex ::= firstCode::core/Expression lastCode::core/Expression ;
DerivedAttribute ::= derivation::core/Expression ;
AliasStatement ::= bindsToReference::statements/VARExpression body::algorithms/Statement aliasVariable::statements/AliasVariable ;
EnumItemRef ::= refersTo::instances/EnumerationItem id::core/Identifier ;
VariableCell ::= refersTo::algorithms/Variable id::core/Identifier ;
SETType ::= ε ;
SingleLeafInstance ::= characterizingType::core/EntityType ;
ActualParameter ::= inProcedureCall::statements/ProcedureCall inFunctionCall::expressions/FunctionCall formalParameter::algorithms/Parameter actualReferent::statements/VARExpression actualValue::core/Expression position::mof/Integer ;
LogicType ::= ε ;
RealType ::= precision::mof/Integer ;
UnaryOperation ::= unaryOperand::core/Expression operator::expressions/UnaryOperator ;
RepeatCount ::= derivation::core/Expression ;
ARRAYType ::= loIndex::core/ArrayBound hiIndex::core/ArrayBound isOptional::mof/Boolean ;
GenericType ::= constraint::algorithms/ActualTypeConstraint isEntity::mof/Boolean ;
InterfacedElement ::= interfacingSchema::core/Schema refersTo::core/SchemaElement isUSE::mof/Boolean interfacedId::core/ScopedId ;
SkipStatement ::= ε ;
UniqueRule ::= domain::core/EntityType (keyComponent::core/Attribute)+ position::mof/Integer ;
ActualAGGREGATEType ::= upperBound::core/SizeConstraint refersTo::algorithms/ActualStructure memberType::core/VariableType lowerBound::core/SizeConstraint label::core/Identifier ;
StringType ::= stringLengthConstraint::core/LengthConstraint ;
VARCell ::= refersTo::algorithms/VARVariable id::core/Identifier ;
NumberValue ::= ε ;
LogicalValue ::= ε ;
NullStatement ::= ε ;
TypeName ::= refersTo::core/NamedType represents::core/ScopedId ;
ActualTypeConstraint ::= matchingType::core/GenericType requiredType::algorithms/ActualDataType label::core/Identifier ;
LengthConstraint ::= maxLength::mof/Integer isFixed::mof/Boolean ;
SpecializedType ::= underlyingType::core/ConcreteType ;
EnumerationType ::= (values::instances/EnumerationItem)+ (declaredItems::instances/EnumerationItem)+ (extension::core/EnumerationType)+ base::core/EnumerationType isExtensible::mof/Boolean ;
DomainRule ::= position::mof/Integer ;
--------------------metamodels::EclipseLaunchConfigurations.bgf--------------------
ListAttribute ::= (entries::ListEntry)+ ;
StringAttribute ::= MapEntry ;
 StringAttribute ::= value::String ;
MapEntry ::= mapAttribute::MapAttribute ;
ListEntry ::= listAttribute::ListAttribute value::String ;
BooleanAttribute ::= value::Boolean ;
LaunchConfiguration ::= type::String (attributes::Attribute)+ ;
MapAttribute ::= (entries::MapEntry)+ ;
--------------------metamodels::EclipsePlugIn.bgf--------------------
PlugIn ::= id::String displayableName::String version::String supplier::String (configures::Extension)+ (extensionPoints::ExtensionPoint)+ (requires::PlugIn)+ (uses::Librairy)+ ;
ExtensionPoint ::= name::String id::String application::Application (descriptions::Description)+ plugIn::PlugIn ;
--------------------metamodels::FeatureDiagrams.bgf--------------------
ORGroup ::= preliminary::Boolean name::String (no_src::Node)+ (co_dst::Child)+ ;
XORGroup ::= preliminary::Boolean name::String (nx_src::Node)+ (cx_dst::Child)+ ;
--------------------metamodels::GAIA.bgf--------------------
AgentType ::= (provides::Service)+ collaborates::AgentType agentType::AgentType (plays::Role)+ ;
LivenessRule ::= ε ;
SafetyRule ::= ε ;
AssociationConnector ::= (actsOn::Resource)+ role::Role (permission::Permission)+ ;
OrganizationalRule ::= SafetyRule ;
 OrganizationalRule ::= LivenessRule ;
 OrganizationalRule ::= SafetyRule | LivenessRule ;
LivenessProperty ::= ε ;
SafetyProperty ::= ε ;
OrganizationalStructure ::= (organization::Organization)+ ;
--------------------metamodels::FiniteStateMachine.bgf--------------------
StateMachine ::= rootFolder::RootFolder (state::State)+ (transition::Transition)+ ;
MgaObject ::= Transition ;
 MgaObject ::= State ;
 MgaObject ::= StateMachine ;
 MgaObject ::= name::String position::String ;
AssociationStateState ::= transition::Transition (dstTransition::State)+ (srcTransition::State)+ ;
RootFolder ::= name::String (rootFolders::RootFolder)+ (stateMachine::StateMachine)+ ;
--------------------metamodels::FlatSignalFlow.bgf--------------------
RootContainer ::= name::String position::String rootFolder::RootFolder (actor::Actor)+ (inputSignal::InputSignal)+ (outputSignal::OutputSignal)+ (queue::Queue)+ ;
OutputSignal ::= name::String position::String rootContainer::RootContainer associationQueueTransmitter::AssociationQueueTransmitter ;
InputSignal ::= name::String position::String rootContainer::RootContainer associationReceiverQueue::AssociationReceiverQueue ;
AssociationQueueTransmitter ::= (dstqueue::Queue)+ (srctransmitter::Transmitter)+ outputSignal::OutputSignal ;
AssociationReceiverQueue ::= (srcqueue::Queue)+ (dstreceiver::Receiver)+ inputSignal::InputSignal ;
RootFolder ::= (rootContainer::RootContainer)+ ;
--------------------metamodels::GUI.bgf--------------------
ComboBox ::= (listRows::Row)+ ;
GUI ::= (guiTabs::Tab)+ ;
TextArea ::= text::String nbRows::Integer ;
LocatedElement ::= Named ;
 LocatedElement ::= Column ;
--------------------metamodels::GWPNV2.bgf--------------------
PTArc ::= dst::Transition src::Place ;
TPArc ::= src::Transition dst::Place ;
--------------------metamodels::GWPNV3.bgf--------------------
PTArc ::= dst::Transition src::Place ;
TPArc ::= src::Transition dst::Place ;
--------------------metamodels::GWPNV4.bgf--------------------
PTArc ::= dst::α src::α ;
TPArc ::= src::α dst::α ;
--------------------metamodels::GWPNV5.bgf--------------------
PTArc ::= dst::α src::α ;
TPArc ::= src::α dst::α ;
--------------------metamodels::GenericEditor.bgf--------------------
GroupElement ::= indent::Indent (element::Element)+ ;
AbstractElement ::= Block ;
 AbstractElement ::= GroupElement ;
LocatedElement ::= Editor ;
 LocatedElement ::= AbstractElement ;
 LocatedElement ::= Element ;
 LocatedElement ::= Format ;
 LocatedElement ::= Color ;
 LocatedElement ::= Font ;
 LocatedElement ::= Indent ;
--------------------metamodels::GenericOutline.bgf--------------------
LocatedElement ::= Outline ;
 LocatedElement ::= Node ;
 LocatedElement ::= Label ;
 LocatedElement ::= LabelSuite ;
 LocatedElement ::= Map ;
LabelSuite ::= label::String methodCall::String ;
--------------------metamodels::GeoTrans.bgf--------------------
GeoTransfos ::= name::String (transfos::GeoTransfo)+ ;
GeoTransfo ::= name::String freeze::Boolean (subGeoTransfos::GeoTransfo)+ superGeoTransfo::GeoTransfo (params::Param)+ ;
--------------------metamodels::Grafcet.bgf--------------------
TransitionToStep ::= from::Transition to::Step ;
StepToTransition ::= from::Step to::Transition ;
LocatedElement ::= NamedElement ;
NamedElement ::= Grafcet ;
 NamedElement ::= Element ;
 NamedElement ::= Connection ;
--------------------metamodels::HAL.bgf--------------------
MetaType ::= MetaArtType ;
 MetaType ::= MetaArtNoticeType ;
FormatWebEnum ::= (XML::ε) | (HTML::ε) | (HTM::ε) ;
TheseType ::= These ;
ReferenceBiblioType ::= ArtRevueType ;
 ReferenceBiblioType ::= WorkshopType ;
 ReferenceBiblioType ::= ArtOuvrageType ;
 ReferenceBiblioType ::= OuvrageType ;
 ReferenceBiblioType ::= TheseType ;
 ReferenceBiblioType ::= BrevetType ;
 ReferenceBiblioType ::= AutreType ;
ArtOuvrage ::= urldoi::String titouv::String edcom::String annee::String edsci::String serie::String ;
DepotsType ::= (depots::AbstractDepot)+ ;
FormatEnum ::= (PDF::ε) | (TEX::ε) | (DOC::ε) | (RTF::ε) | (TXT::ε) | (PS::ε) | (ANNEX::ε) ;
MetaArtType ::= domain::String abstract::String referenceBiblio::ReferenceBiblioType ;
OuvrageType ::= Ouvrage ;
ArtJournal ::= urldoi::String journal::String volume::String page::String annee::String ;
ArtOuvrageType ::= ArtOuvrage ;
HAL ::= connexion::Connexion (contents::Entry)+ ;
AbstractDepot ::= Depot ;
 AbstractDepot ::= DepotWeb ;
ArticleRecent ::= fichiers::DepotsType ;
MetaArtNoticeType ::= domain::String abstract::String referenceBiblio::ReferenceBiblioType ;
ArtRevue ::= urldoi::String journal::String volume::String page::String annee::String ;
WebLink ::= identifiant::String server::Server ;
AutreType ::= Autre ;
AbstractDepotType ::= DepotsType ;
 AbstractDepotType ::= WebLink ;
AffiliationType ::= (institution::String)+ (prive::String)+ (ecole::String)+ (universite::String)+ ;
BrevetType ::= Brevet ;
ArtRevueType ::= ArtRevue ;
 ArtRevueType ::= ArtJournal ;
TamponType ::= id::String ;
MetaLab ::= id::String ;
ArticleRetro ::= dateRedaction::String fichiers::AbstractDepot ;
AutLabType ::= (auteurs::Auteur)+ (laboratoires::Laboratoire)+ ;
AbstractMetaLab ::= MetaLab ;
DateVisibleEnum ::= (15J::ε) | (1M::ε) | (3M::ε) | (1A::ε) | (2A::ε) | (JAMAIS::ε) ;
WorkshopType ::= Workshop ;
 WorkshopType ::= Communication ;
 WorkshopType ::= Conference ;
DepotWeb ::= format::FormatWebEnum ;
--------------------metamodels::HPROF.bgf--------------------
StackTraceElement ::= method::Method fileName::String line::Integer trace::Trace ;
LocatedElement ::= Profile ;
 LocatedElement ::= Method ;
 LocatedElement ::= ThreadAction ;
 LocatedElement ::= Trace ;
 LocatedElement ::= StackTraceElement ;
 LocatedElement ::= Times ;
 LocatedElement ::= Time ;
 LocatedElement ::= Date ;
ThreadStart ::= obj::Integer name::String group::String ;
ThreadEnd ::= id::Integer ;
ThreadAction ::= ThreadStart ;
 ThreadAction ::= ThreadEnd ;
--------------------metamodels::HierarchicalSignalFlow.bgf--------------------
LocalPort ::= compound::Compound ;
InputPort ::= base::Base ;
Asso_Port_Signal ::= (src::Port)+ (dst::Port)+ signal::Signal ;
OutputPort ::= base::Base ;
--------------------metamodels::HierarchicalStateMachine.bgf--------------------
OrState ::= rootFolder::RootFolder (state::State)+ init::Init (dataVar::DataVar)+ (stateDataRelation::StateDataRelation)+ (transition::Transition)+ (compoundState::CompoundState)+ ;
DataVar ::= (stateBase::StateBase)+ orState::OrState associationDataStateBase::AssociationDataStateBase ;
StateDateRelation ::= value::String color::String ;
PrimitiveState ::= Init ;
 PrimitiveState ::= State ;
 PrimitiveState ::= StateDataRelation ;
 PrimitiveState ::= Init | State | StateDataRelation ;
AndState ::= (compoundState::CompoundState)+ ;
AssociationDataStateBase ::= stateDataRelation::StateDataRelation (dataVar::DataVar)+ (stateBase::StateBase)+ ;
StateDataRelation ::= value::String color::String orState::OrState associationDataStateBase1::AssociationDataStateBase ;
CompoundState ::= OrState ;
 CompoundState ::= AndState ;
 CompoundState ::= andState::AndState orState::OrState ;
MgaObject ::= StateBase ;
 MgaObject ::= DataVar ;
 MgaObject ::= Transition ;
 MgaObject ::= StateDateRelation ;
 MgaObject ::= name::String position::String ;
StateBase ::= CompoundState ;
 StateBase ::= PrimitiveState ;
 StateBase ::= defaultTransition::String marked::Boolean (associationStateStatedst::AssociationStateState)+ (associationStateStatesrc::AssociationStateState)+ (data::DataVar)+ associationDataStateBase::AssociationDataStateBase ;
AssociationStateState ::= transition::Transition (dstTransition::StateBase)+ (srcTransition::StateBase)+ ;
RootFolder ::= name::String (rootFolders::RootFolder)+ (orState::OrState)+ ;
--------------------metamodels::HybridAutomata.bgf--------------------
FiniteTransition ::= trigger::String guard::String action::String ;
FiniteState ::= name::String position::String isInit::Boolean ;
--------------------metamodels::IEEE1471ConceptualModel.bgf--------------------
ArchitecturalDescription ::= (identifiesS::Stakeholder)+ (identifiesC::Concern)+ (selects::Viewpoint)+ (organizedBy::View)+ (aggregates::Model)+ ;
LibraryViewpoint ::= name::String content::String ;
IEEE1471Model ::= system::System environment::Environment (missions::Mission)+ architecture::Architecture (stakeholders::Stakeholder)+ (concerns::Concern)+ (viewpoints::Viewpoint)+ (libraryViewpoints::LibraryViewpoint)+ architecturalDescription::ArchitecturalDescription rationale::Rationale ;
--------------------metamodels::IRL.bgf--------------------
UpdateAction ::= objValue::IRLExpressions/Expression ;
RuleCondition ::= conditionExpression::IRLExpressions/Expression ruleDefinitionCondition::IRLRules/RuleDefinition ;
VariableDeclaration ::= varName::String (variableExp::IRLExpressions/VariableExpression)+ ;
OperationCallExpression ::= (arguments::IRLExpressions/Expression)+ operationName::String signature::String ;
LoopExpression ::= body::IRLExpressions/Expression (iterators::IRLExpressions/Iterator)+ ;
NavigationOrAttributeCallExpression ::= name::String ;
OperatorCallExpression ::= ε ;
RealType ::= ε ;
IntegerType ::= ε ;
ImportDefinition ::= importDefinitionOwners::RuleSet dotStar::Boolean ;
IntegerExpression ::= integerSymbol::Integer ;
RealExpression ::= realSymbol::Double ;
ClassInstancesDeclaration ::= extendedIdentifier::ExtendedIdentifier ;
VariableExpression ::= referredVariable::IRLDeclarations/VariableDeclaration name::String ;
CreateAction ::= (insertArguments::IRLExpressions/Expression)+ ;
RuleAction ::= actionOwner::IRLRules/RuleDefinition ;
ClassType ::= ε ;
ModifyAction ::= objValue::IRLExpressions/Expression (modifiedArguments::IRLExpressions/Expression)+ ;
RuleDefinition ::= binding::IRLRules/Binding condition::IRLRules/RuleCondition (actions::IRLRules/RuleAction)+ ;
IteratorExp ::= name::String ;
InvokeAction ::= invocation::IRLExpressions/Expression ;
StringType ::= ε ;
SimpleRuleVariable ::= ε ;
StringExpression ::= stringSymbol::String ;
PropertyDefinition ::= propertyDefinitionOwner::RuleSet (ruleSetDeclarations::IRLDeclarations/RuleSetDeclaration)+ semicoloneOpt::Boolean ;
RuleSet ::= (importDefinitions::ImportDefinition)+ propertyDefinitions::IRLDeclarations/PropertyDefinition (rulesetElementDefinitions::IRLRules/RulesetElementDefinition)+ ;
PropertyDeclaration ::= ε ;
NamedElement ::= ExtendedIdentifier ;
 NamedElement ::= RuleSet ;
 NamedElement ::= Type ;
 NamedElement ::= RulesetElementDefinition ;
BooleanType ::= ε ;
ExtendedIdentifier ::= parentIdentifier::ExtendedIdentifier extendedIdentifierOwner::Extended ;
DeleteAction ::= objValue::IRLExpressions/Expression ;
CollectionOperationRuleVariable ::= operationName::String collectWhere::IRLExpressions/Expression ;
BooleanExpression ::= booleanSymbol::Boolean ;
--------------------metamodels::IEEE1471ViewpointM2.bgf--------------------
AnalysisMethod ::= analysis::Language ;
ModelOrganization ::= (techniques::Technique)+ guidance::Language ;
ModellingRule ::= ε ;
ArchitecturalConstruct ::= Rule ;
 ArchitecturalConstruct ::= Language ;
 ArchitecturalConstruct ::= Mapping ;
 ArchitecturalConstruct ::= Pattern ;
 ArchitecturalConstruct ::= Rule | Language | Mapping | Pattern ;
ViewpointDependency ::= supplier::Viewpoint client::Viewpoint ;
ViewpointImport ::= ε ;
--------------------metamodels::IMSTransactionMessage.bgf--------------------
TDLangElement ::= ε ;
OIMAPrefixFormats ::= (opp_one::ε) | (opp_two::ε) ;
StateData ::= ε ;
ApplicationData ::= (languageElements::TDLangElement)+ (fieldComponents::Field)+ ;
SecurityData ::= ε ;
IMSTransactionMessage ::= OIMAPrefixFormat::OIMAPrefixFormats standardFieldsFlag::Boolean OIMAPrefixComponent::OIMAPrefix standardFieldComponent::StandardFields messageComponent::ApplicationData ;
VariableLengthField ::= ε ;
ControlData ::= ε ;
StandardFields ::= length::TwoByteField reservedField::TwoByteField transactionCode::VariableLengthField ;
TwoByteField ::= ε ;
UserData ::= ε ;
OIMAPrefix ::= controlDataComponent::ControlData stateDataComponent::StateData securityDataComponent::SecurityData userDataComponent::UserData ;
--------------------metamodels::M.bgf--------------------
WhereExpression ::= type::Types/DerivedType (queryExpressions::Expressions/QueryExpression)+ ;
InExpression ::= value::Expressions/ValueExpression collection::Expressions/CollectionExpression ;
MElementReference ::= alias::String referencedElement::MElement ;
ExportDirective ::= module::Module (exportedElements::ModuleMember)+ ;
NumericalValue ::= IntegerValue ;
 NumericalValue ::= DecimalValue ;
InitializationExpression ::= type::Types/DerivedType (values::Value)+ ;
DerivedType ::= (supertypes::Types/TypeReference)+ (fields::Types/Field)+ initializationExpression::Expressions/InitializationExpression whereExpression::Expressions/WhereExpression expression::Expressions/Expression ;
CollectionExpression ::= inExpression::Expressions/InExpression collectionValue::Expressions/ValueExpression ;
IdentityExpression ::= identity::Types/Field ;
DerivedTypeReference ::= type::Types/DerivedType ;
IntegerValue ::= value::Integer ;
TypeReference ::= subtype::Types/DerivedType field::Types/Field lowerBound::Integer upperBound::Integer ;
MElement ::= Module ;
 MElement ::= ModuleMember ;
StandardValueExpression ::= context::Expressions/ValueExpression value::String ;
EqualExpression ::= leftValue::Expressions/ValueExpression rightValue::Expressions/ValueExpression ;
IntrinsicTypeReference ::= typeIdentifier::String ;
ImportDirective ::= module::Module (importedElements::MElementReference)+ ;
BooleanValue ::= value::Boolean ;
DefaultValueExpression ::= ε ;
ModuleMember ::= DerivedType ;
 ModuleMember ::= Language ;
 ModuleMember ::= Entity ;
ComputedValue ::= (qualifiers::String)+ identifier::String ;
IdentifiedElement ::= MElement ;
 IdentifiedElement ::= Field ;
 IdentifiedElement ::= Collection ;
 IdentifiedElement ::= ComputedValue ;
DecimalValue ::= value::Double ;
StringValue ::= value::String ;
--------------------metamodels::Jess.bgf--------------------
FactDefinition ::= factName::ValidIdentifier documentation::Str (fact::Expression)+ ;
ModuleDefinition ::= moduleName::ValidIdentifier documentation::Str ;
ExitExp ::= ε ;
DeclareVar ::= (var::JessVariable)+ node::Expression max::Expression ;
VarDefinition ::= jessVar::JessVariable eq::ValidIdentifier expression::Expression ;
GlobalDefinition ::= (varDef::VarDefinition)+ ;
IfExpression ::= ifthen::ConditionAction (elifthen::ElifConditionAction)+ (else::Expression)+ ;
ForExp ::= initializer::Expression condition::Expression increment::Expression (expressions::Expression)+ ;
ElifConditionAction ::= condAct::ConditionAction ;
FunctionDefinition ::= funcName::ValidIdentifier (parameters::JessVariable)+ (expressions::Expression)+ ;
DefinitionExp ::= GlobalDefinition ;
 DefinitionExp ::= FunctionDefinition ;
 DefinitionExp ::= AdviceDefinition ;
 DefinitionExp ::= UnDefAdvice ;
 DefinitionExp ::= FactDefinition ;
 DefinitionExp ::= RuleDefinition ;
 DefinitionExp ::= ModuleDefinition ;
 DefinitionExp ::= QueryDefinition ;
 DefinitionExp ::= TemplateDefinition ;
LocatedElement ::= Root ;
 LocatedElement ::= Expression ;
 LocatedElement ::= SlotOp ;
 LocatedElement ::= VarDefinition ;
 LocatedElement ::= DeclareRule ;
 LocatedElement ::= DeclareVar ;
 LocatedElement ::= DeclareBloc ;
 LocatedElement ::= ASlotDef ;
 LocatedElement ::= SlotOptions ;
 LocatedElement ::= ConditionAction ;
 LocatedElement ::= ElifConditionAction ;
ASlotDef ::= SlotDef ;
 ASlotDef ::= MultiSlotDef ;
 ASlotDef ::= slotName::SlotName (optionals::SlotOptions)+ ;
DeclareRule ::= salience::Expression nodeIndexHash::Expression autoFocus::ValidIdentifier noLoop::ValidIdentifier ;
ValidIdentifier ::= val::String ;
UnDefAdvice ::= op::Expression ;
FuncCall ::= funcName::ValidIdentifier (funcParam::Expression)+ ;
SlotOptions ::= type::ValidIdentifier def::Expression defaultDyn::Expression (allowedValues::Expression)+ ;
SlotOp ::= slotIdent::SlotName operator::ValidIdentifier exp::Expression ;
EngineExp ::= ε ;
QueryDefinition ::= queryName::ValidIdentifier documentation::Str declare::DeclareVar (expressions::Expression)+ ;
JessVariable ::= val::String ;
ForeachExp ::= var::JessVariable list::Expression (expressions::Expression)+ ;
UseFuncExp ::= WhileExp ;
 UseFuncExp ::= ForExp ;
 UseFuncExp ::= ForeachExp ;
 UseFuncExp ::= FuncCall ;
 UseFuncExp ::= EngineExp ;
 UseFuncExp ::= ExitExp ;
 UseFuncExp ::= IfExpression ;
TemplateExpression ::= templateName::ValidIdentifier firstSlot::SlotOp (slotOp::SlotOp)+ ;
ConditionAction ::= condition::Expression (actions::Expression)+ ;
RuleDefinition ::= ruleName::ValidIdentifier documentation::Str declare::DeclareRule (conditions::Expression)+ (functionCall::UseFuncExp)+ ;
MultiSlotDef ::= slotName::SlotName (optionals::SlotOptions)+ ;
TemplateDefinition ::= templateName::ValidIdentifier (inherits::ValidIdentifier)+ documentation::Str declareBloc::DeclareBloc (slotDef::ASlotDef)+ ;
WhileExp ::= hasDo::Boolean boolExp::Expression (actions::Expression)+ ;
AdviceDefinition ::= direction::Advice op::Ident (advice::Expression)+ ;
SlotName ::= val::String ;
DeclareBloc ::= slotSpecific::ValidIdentifier backchainReaction::ValidIdentifier fromClass::ValidIdentifier includeVariable::ValidIdentifier order::ValidIdentifier ;
SlotDef ::= slotName::SlotName (optionals::SlotOptions)+ ;
--------------------metamodels::KDM.bgf--------------------
ControlElement ::= type::code/Datatype (entryFlow::action/EntryFlow)+ (codeElement::code/AbstractCodeElement)+ ;
TypeUnit ::= ε ;
ExceptionFlow ::= to::action/ActionElement from::action/ActionElement ;
ClassUnit ::= isAbstract::core/Boolean (codeElement::code/CodeItem)+ ;
TrueFlow ::= ε ;
MarshalledResource ::= ε ;
DatatypeOf ::= to::code/Datatype from::data/ComplexContentType ;
ExtensionTo ::= to::data/ComplexContentType from::data/ComplexContentType ;
EnumeratedType ::= (value::code/Value)+ ;
WritesColumnSet ::= to::data/ColumnSet from::action/ActionElement ;
DataResource ::= ε ;
RangeType ::= lower::core/Integer upper::core/Integer ;
PointerType ::= ε ;
UIModel ::= (UIElement::ui/AbstractUIElement)+ ;
TemplateType ::= ε ;
LinksTo ::= to::build/AbstractBuildElement from::build/SymbolicLink ;
ContentReference ::= ε ;
ConceptualModel ::= (conceptualElement::conceptual/AbstractConceptualElement)+ ;
DataEvent ::= kind::core/String ;
ResourceDescription ::= ε ;
UIRelationship ::= to::core/KDMEntity from::ui/AbstractUIElement ;
SymbolicLink ::= ε ;
UIAction ::= kind::core/String (UIElement::ui/UIEvent)+ ;
IndexElement ::= (implementation::code/ItemUnit)+ ;
PlatformElement ::= ε ;
RuntimeResource ::= ε ;
CodeRelationship ::= to::core/KDMEntity from::code/CodeItem ;
ParameterTo ::= to::code/CodeItem from::code/AbstractCodeElement ;
UIFlow ::= to::ui/AbstractUIElement from::ui/AbstractUIElement ;
UILayout ::= to::ui/UIResource from::ui/UIResource ;
OctetstringType ::= ε ;
ExtendedDataElement ::= ε ;
DataContainer ::= (dataElement::data/DataResource)+ ;
DerivedType ::= itemUnit::code/ItemUnit ;
SoftwareSystem ::= ε ;
NamingResource ::= ε ;
SuppliedBy ::= to::build/Supplier from::build/AbstractBuildElement ;
HasType ::= to::code/Datatype from::code/CodeItem ;
ScaledType ::= ε ;
EventRelationship ::= to::core/KDMEntity from::event/AbstractEventElement ;
DataElement ::= type::code/Datatype ext::core/String size::core/Integer (codeElement::code/Datatype)+ ;
ReadsUI ::= to::ui/UIResource from::action/ActionElement ;
BindsTo ::= to::platform/ResourceType from::platform/ResourceType ;
FalseFlow ::= ε ;
CharType ::= ε ;
EventModel ::= (eventElement::event/AbstractEventElement)+ ;
StreamResource ::= ε ;
BuildDescription ::= (source::source/SourceRef)+ text::core/String ;
BuildElement ::= ε ;
InitialState ::= ε ;
DisplaysImage ::= to::source/Image from::action/ActionElement ;
ExternalActor ::= ε ;
FileResource ::= ε ;
UIElement ::= ε ;
RelationalSchema ::= (codeElement::code/CodeItem)+ ;
PlatformEvent ::= kind::core/String ;
RelationalTable ::= ε ;
BitType ::= ε ;
TimeType ::= ε ;
CompilationUnit ::= ε ;
UIField ::= ε ;
ActionElement ::= kind::core/String (codeElement::code/AbstractCodeElement)+ (actionRelation::action/AbstractActionRelationship)+ ;
ConceptualElement ::= ε ;
ConsumesEvent ::= to::event/Event from::event/Transition ;
UIResource ::= (UIElement::ui/AbstractUIElement)+ ;
WritesResource ::= to::platform/ResourceType from::action/ActionElement ;
BuildProduct ::= ε ;
RuleUnit ::= ε ;
VariantTo ::= to::code/PreprocessorDirective from::code/PreprocessorDirective ;
CatchUnit ::= ε ;
TryUnit ::= ε ;
OnExit ::= ε ;
ParameterKind ::= (byReference::ε) | (unknown::ε) | (exception::ε) | (return::ε) | (byValue::ε) | (catchall::ε) | (byName::ε) | (throws::ε) | (variadic::ε) ;
ManagesResource ::= to::platform/ResourceType from::action/ActionElement ;
SequenceType ::= size::core/Integer ;
GeneratedFrom ::= to::code/PreprocessorDirective from::code/AbstractCodeElement ;
ArchitectureView ::= ε ;
AllContent ::= ε ;
DeployedComponent ::= (groupedCode::code/Module)+ ;
SynonymType ::= ε ;
CompliesTo ::= to::code/CodeItem from::action/ActionElement ;
OnEntry ::= ε ;
ContentRestriction ::= kind::core/String value::core/String ;
UniqueKey ::= ε ;
ConceptualRole ::= conceptualElement::conceptual/AbstractConceptualElement ;
ActionRelationship ::= to::core/KDMEntity from::action/ActionElement ;
ParameterUnit ::= kind::code/ParameterKind pos::core/Integer ;
ReadsResource ::= to::platform/ResourceType from::action/ActionElement ;
PlatformAction ::= kind::core/String (platformElement::platform/PlatformEvent)+ ;
SharedUnit ::= ε ;
EventResource ::= (eventElement::event/AbstractEventElement)+ ;
ProducesEvent ::= to::event/Event from::action/ActionElement ;
IncludeDirective ::= ε ;
DependsOn ::= to::source/AbstractInventoryElement from::source/AbstractInventoryElement ;
BuildRelationship ::= to::core/KDMEntity from::build/AbstractBuildElement ;
InventoryContainer ::= (inventoryElement::source/AbstractInventoryElement)+ ;
RestrictionOf ::= to::data/ComplexContentType from::data/ComplexContentType ;
ComplexContentType ::= (contentElement::data/AbstractContentElement)+ ;
ManagesUI ::= to::ui/UIResource from::action/ActionElement ;
PrimitiveType ::= ε ;
DataAction ::= kind::core/String (implementation::action/ActionElement)+ (dataElement::data/DataEvent)+ ;
PreprocessorDirective ::= (codeElement::code/AbstractCodeElement)+ ;
EntryFlow ::= to::action/ActionElement from::code/ControlElement ;
HasContent ::= to::data/AbstractDataElement from::action/ActionElement ;
ProducesDataEvent ::= to::data/DataEvent from::action/ActionElement ;
SetType ::= size::core/Integer ;
ChoiceType ::= ε ;
BitstringType ::= ε ;
StructureModel ::= (structureElement::structure/AbstractStructureElement)+ ;
FloatType ::= ε ;
InventoryRelationship ::= to::core/KDMEntity from::source/AbstractInventoryElement ;
BlockUnit ::= ε ;
ValueList ::= (valueElement::code/ValueElement)+ ;
UIDisplay ::= ε ;
RecordFile ::= ε ;
RelationalView ::= ε ;
CallableKind ::= (external::ε) | (regular::ε) | (stored::ε) | (operator::ε) | (unknown::ε) ;
ExitFlow ::= to::action/ActionElement from::action/ActionElement ;
ConditionalDirective ::= ε ;
OctetType ::= ε ;
ResourceType ::= (platformElement::platform/AbstractPlatformElement)+ ;
ExportKind ::= (private::ε) | (unknown::ε) | (public::ε) | (protected::ε) | (final::ε) ;
FinallyUnit ::= ε ;
SupportedBy ::= to::build/Tool from::build/BuildStep ;
DataManager ::= ε ;
DataModel ::= (dataElement::data/AbstractDataElement)+ ;
AggregatedRelationship ::= from::core/KDMEntity to::core/KDMEntity (relation::core/KDMRelationship)+ density::core/Integer ;
BuildResource ::= (implementation::core/KDMEntity)+ (groupedBuild::build/AbstractBuildElement)+ (buildElement::build/AbstractBuildElement)+ ;
CallableUnit ::= kind::code/CallableKind ;
BuildModel ::= (buildElement::build/AbstractBuildElement)+ ;
LockResource ::= ε ;
ChoiceContent ::= ε ;
XMLSchema ::= (contentElement::data/AbstractContentElement)+ ;
IntegerType ::= ε ;
ConceptualRelationship ::= to::core/KDMEntity from::conceptual/AbstractConceptualElement ;
InventoryItem ::= version::core/String path::core/String ;
TagDefinition ::= tag::core/String type::core/String ;
InstanceOf ::= to::code/TemplateUnit from::code/AbstractCodeElement ;
PlatformRelationship ::= to::core/KDMEntity from::platform/AbstractPlatformElement ;
TaggedRef ::= reference::core/ModelElement ;
UIEvent ::= kind::core/String ;
ConceptualFlow ::= to::conceptual/ConceptualContainer from::conceptual/ConceptualContainer ;
ExtensionFamily ::= (stereotype::kdm/Stereotype)+ name::core/String ;
ContentElement ::= ε ;
CommentUnit ::= text::core/String ;
BooleanType ::= ε ;
MacroKind ::= (external::ε) | (unknown::ε) | (option::ε) | (undefined::ε) | (regular::ε) ;
NamespaceUnit ::= (groupedCode::code/CodeItem)+ ;
MemberUnit ::= export::code/ExportKind ;
KeyRelation ::= to::data/UniqueKey from::data/ReferenceKey ;
SourceRef ::= (region::source/SourceRegion)+ language::core/String snippet::core/String ;
ManagesData ::= to::data/AbstractDataElement from::action/ActionElement ;
SourceFile ::= language::core/String encoding::core/String ;
ItemUnit ::= ε ;
PlatformModel ::= (platformElement::platform/AbstractPlatformElement)+ ;
IndexUnit ::= ε ;
ScenarioUnit ::= ε ;
ExceptionUnit ::= ε ;
EventAction ::= kind::core/String (eventElement::event/Event)+ ;
MacroUnit ::= kind::code/MacroKind ;
BuildComponent ::= ε ;
InventoryModel ::= (inventoryElement::source/AbstractInventoryElement)+ ;
RecordType ::= ε ;
ConceptualContainer ::= (conceptualElement::conceptual/AbstractConceptualElement)+ ;
ImplementationOf ::= to::code/CodeItem from::code/CodeItem ;
UsesType ::= to::code/Datatype from::action/ActionElement ;
TaggedValue ::= value::core/String ;
ContentAttribute ::= ε ;
BagType ::= size::core/Integer ;
TypedBy ::= to::data/ComplexContentType from::data/ContentItem ;
CompositeType ::= (itemUnit::code/ItemUnit)+ ;
NextState ::= to::event/State from::event/Transition ;
TemplateUnit ::= (codeElement::code/CodeItem)+ ;
BinaryFile ::= ε ;
InterfaceUnit ::= (codeElement::code/CodeItem)+ ;
DeployedSoftwareSystem ::= (groupedComponent::platform/DeployedComponent)+ ;
SeqContent ::= ε ;
BuildStep ::= ε ;
HasState ::= to::event/AbstractEventElement from::action/ActionElement ;
MethodKind ::= (operator::ε) | (destructor::ε) | (method::ε) | (abstract::ε) | (virtual::ε) | (unknown::ε) | (constructor::ε) ;
ReferenceKey ::= ε ;
StorableKind ::= (global::ε) | (external::ε) | (static::ε) | (unknown::ε) | (register::ε) | (local::ε) ;
GuardedFlow ::= ε ;
FactUnit ::= ε ;
TermUnit ::= ε ;
ReadsColumnSet ::= to::data/ColumnSet from::action/ActionElement ;
CodeElement ::= ε ;
TemplateParameter ::= ε ;
StructureRelationship ::= to::core/KDMEntity from::structure/AbstractStructureElement ;
OrdinalType ::= ε ;
StructureElement ::= ε ;
WritesUI ::= to::ui/UIResource from::action/ActionElement ;
DateType ::= ε ;
ExecutionResource ::= ε ;
MethodUnit ::= kind::code/MethodKind export::code/ExportKind ;
EventElement ::= ε ;
DataRelationship ::= to::core/KDMEntity from::data/AbstractDataElement ;
StorableUnit ::= kind::code/StorableKind ;
SimpleContentType ::= (type::data/ComplexContentType)+ kind::core/String ;
DefinedBy ::= to::code/CodeItem from::action/ActionElement ;
InventoryElement ::= ε ;
MixedContent ::= ε ;
LanguageUnit ::= ε ;
CodeModel ::= (codeElement::code/AbstractCodeElement)+ ;
GroupContent ::= ε ;
HasValue ::= to::code/CodeItem from::code/CodeItem ;
VisibleIn ::= to::code/CodeItem from::code/CodeItem ;
BehaviorUnit ::= ε ;
DeployedResource ::= (platformElement::platform/ResourceType)+ ;
ReadsState ::= to::event/State from::action/ActionElement ;
CodeAssembly ::= ε ;
ArrayType ::= size::core/Integer indexUnit::code/IndexUnit ;
MessagingResource ::= ε ;
DescribedBy ::= to::build/BuildDescription from::build/BuildStep ;
SourceRegion ::= file::source/SourceFile startLine::core/Integer startPosition::core/Integer endLine::core/Integer endPosition::core/Integer language::core/String path::core/String ;
VoidType ::= ε ;
ContentItem ::= type::data/ComplexContentType (contentElement::data/AbstractContentElement)+ ;
ColumnSet ::= (itemUnit::code/ItemUnit)+ ;
StringType ::= ε ;
DecimalType ::= ε ;
ControlFlow ::= to::action/ActionElement from::action/ActionElement ;
DataSegment ::= ε ;
ExecutableFile ::= ε ;
ReferenceTo ::= to::data/ContentItem from::data/ContentItem ;
MacroDirective ::= ε ;
--------------------metamodels::KDMSimplified.bgf--------------------
KDMExtensionFamily ::= name::String (stereotype::Stereotype)+ ;
TagDefinition ::= tag::String type::String ;
KDMFramework ::= KDMModel ;
KDMEntity ::= KDMContainer ;
 KDMEntity ::= KDMGroup ;
TaggedValue ::= value::String tag::TagDefinition ;
ModelElement ::= KDMEntity ;
 ModelElement ::= KDMRelationship ;
--------------------metamodels::KM3.bgf--------------------
EnumLiteral ::= name::String package::Package ;
LocatedElement ::= ModelElement ;
 LocatedElement ::= Metamodel ;
StructuralFeature ::= Attribute ;
 StructuralFeature ::= Reference ;
 StructuralFeature ::= lower::Integer upper::Integer isOrdered::Boolean isUnique::Boolean owner::Class type::Classifier ;
DataType ::= ε ;
ModelElement ::= Classifier ;
 ModelElement ::= EnumLiteral ;
 ModelElement ::= StructuralFeature ;
 ModelElement ::= Package ;
--------------------metamodels::Klaper.bgf--------------------
ActualParam ::= value::String serviceCall::ServiceCall ;
InternalActivity ::= name::String repetition::String internalExecTime::String internalFailProb::String completionModel::String (serviceCall::ServiceCall)+ (predecessor::Step)+ (successor::Step)+ behavior::Behavior nestedBehavior::Behavior ;
WorkLoad ::= workLoadType::String arrivalProcess::String population::String initialResource::String behavior::Behavior ;
ServiceCall ::= resourceType::String serviceName::String isSynch::Boolean (actualParam::ActualParam)+ step::Step calledService::Service ;
--------------------metamodels::LQN.bgf--------------------
TaskType ::= (a_reference::ε) | (non_reference::ε) ;
SchedulingType ::= (FCFS::ε) | (preemptive_Priority::ε) | (head_of_line::ε) | (random::ε) ;
ActivityCall ::= fromActivity::Activity ;
CallPhase ::= mean_Calls::Integer refers_To::Phase (call::Call)+ ;
LQN ::= name::String comment::String author::String created_On::Date modified_On::Date (task::Task)+ (processor::Processor)+ ;
CallType ::= (synchronous::ε) | (asynchronous::ε) | (forwording::ε) ;
PhaseType ::= (stochastic::ε) | (deterministic::ε) ;
LinkType ::= (and_Fork::ε) | (and_join::ε) | (basic::ε) | (or_Fork::ε) | (or_join::ε) ;
EntryCall ::= from_Entry::Entry ;
--------------------metamodels::LaTeX.bgf--------------------
DocumentBody ::= (sections::Section)+ (bibliography::Bibliography)+ document::Document ;
EMail ::= value::String ;
ValuedElement ::= Type ;
 ValuedElement ::= Title ;
 ValuedElement ::= Name ;
 ValuedElement ::= Date ;
 ValuedElement ::= Adress ;
 ValuedElement ::= Phone ;
 ValuedElement ::= Fax ;
 ValuedElement ::= EMail ;
 ValuedElement ::= Abstract ;
 ValuedElement ::= Keywords ;
 ValuedElement ::= Path ;
 ValuedElement ::= Label ;
 ValuedElement ::= Item ;
 ValuedElement ::= Description ;
 ValuedElement ::= Value ;
 ValuedElement ::= Cite ;
SectionBody ::= (corps::Corps)+ section::Section ;
--------------------metamodels::MAS.bgf--------------------
LivenessRule ::= ε ;
NCS ::= cooperationRules::CooperationRules ;
SafetyRule ::= ε ;
CooperationRules ::= ncs::NCS ;
FIPA-Platform Task ::= fipa_Platform_AgentF::FIPA-Platform Agent task::Task ;
AIP ::= name::String performative::Performative ;
LivenessProperty ::= ε ;
SafetyProperty ::= ε ;
FIPA-Platform Agent ::= agentF::Agent (fipa_Platform_Task::FIPA-Platform Task)+ ;
Organizational Structure ::= SafetyRule ;
 Organizational Structure ::= LivenessRule ;
 Organizational Structure ::= (organization::Organization)+ ;
Non Functionnal Requirement ::= ε ;
--------------------metamodels::Marte.bgf--------------------
TilerSpecification ::= origin::MARTE_DataTypes/IntegerVector paving::MARTE_DataTypes/IntegerMatrix fitting::MARTE_DataTypes/IntegerVector ;
ClockRefine ::= base_Dependency::Dependency (constraint::MARTE_Foundations/Time/ClockConstraint)+ ;
SchedulableResource ::= (schedParams::GRM_BasicTypes/SchedParameters)+ ;
HwMedia ::= bandWidth::BasicNFP_Types/NFP_DataTxRate base_Association::Association (arbiters::MARTE_DesignModel/HRM/HwLogical/HwCommunication/HwArbiter)+ ;
SynchronizationKind ::= (synchronous::ε) | (asynchronous::ε) | (delayedSynchronous::ε) | (rendezVous::ε) | (other::ε) ;
HwComputingResource ::= op_Frequencies::MARTE_DataTypes/NFP_FrequencyInterval ;
RtService ::= concPolicy::MARTE_DesignModel/RTEMoCC/ConcurrencyKind exeKind::MARTE_DesignModel/RTEMoCC/ExecutionKind isAtomic::MARTE_PrimitivesTypes/Boolean synchKind::MARTE_DesignModel/RTEMoCC/SynchronizationKind base_BehavioralFeature::BehavioralFeature ;
DeviceBroker ::= accessPolicy::MARTE_DesignModel/SRM/SW_Brokering/AccessPolicyKind isBuffered::MARTE_PrimitivesTypes/Boolean (devices::TypedElement)+ (closeServices::BehavioralFeature)+ (controlServices::BehavioralFeature)+ (openServices::BehavioralFeature)+ (readServices::BehavioralFeature)+ (writeServices::BehavioralFeature)+ ;
GaCommHost ::= (capacity::BasicNFP_Types/NFP_DataTxRate)+ (packetT::BasicNFP_Types/NFP_Duration)+ (blockT::BasicNFP_Types/NFP_Duration)+ transmMode::MARTE_DataTypes/TransmModeKind (utilization::BasicNFP_Types/NFP_Real)+ (throughput::BasicNFP_Types/NFP_Frequency)+ ;
TUK ::= ε ;
VisibilityKind ::= (public::ε) | (private::ε) | (protected::ε) | (package::ε) ;
TimedElement ::= (on::MARTE_Foundations/Time/Clock)+ ;
SchedParameters ::= edf::GRM_BasicTypes/EDFParameters fp::GRM_BasicTypes/FixedPriorityParameters pooling::GRM_BasicTypes/PoolingParameters server::GRM_BasicTypes/PeriodicServerParameters ;
GaResourcesPlatform ::= (resources::MARTE_Foundations/GRM/Resource)+ base_Classifier::Classifier ;
IrregularPattern ::= phase::BasicNFP_Types/NFP_Duration (interarrivals::BasicNFP_Types/NFP_Duration)+ ;
SchedPolicyKind ::= (EarliestDeadlineFirst::ε) | (FIFO::ε) | (FixedPriority::ε) | (LeastLaxityFirst::ε) | (RoundRobin::ε) | (TimeTableDriven::ε) | (Undef::ε) | (Other::ε) ;
TransmModeKind ::= (simplex::ε) | (halfDuplex::ε) | (fullDuplex::ε) ;
MutualExclusionResourceKind ::= (BooleanSemaphore::ε) | (CountSemaphore::ε) | (Mutex::ε) | (Undef::ε) | (Other::ε) ;
DeployedArtifact ::= Artifact ;
DurationObservation ::= event::NamedElement firstEvent::MARTE_PrimitivesTypes/Boolean ;
ExpressionContext ::= base_NamedElement::NamedElement ;
ActivityNode ::= ExecutableNode ;
 ActivityNode ::= ObjectNode ;
WritePolicy ::= (WriteBack::ε) | (WriteThrough::ε) | (Other::ε) | (Undef::ε) ;
CommunicationMedia ::= elementSize::MARTE_PrimitivesTypes/Integer base_Connector::Connector ;
HwBranchPredictor ::= ε ;
SecondaryScheduler ::= ε ;
AllocationNature ::= (spatialDistribution::ε) | (timeScheduling::ε) ;
PpUnit ::= concPolicy::MARTE_DesignModel/RTEMoCC/CallConcurrencyKind memorySize::BasicNFP_Types/NFP_DataSize base_BehavioredClassifier::BehavioredClassifier ;
HwEndPoint ::= base_Port::Port (connectedTo::MARTE_DesignModel/HRM/HwLogical/HwCommunication/HwMedia)+ ;
StatisticalQualifierKind ::= (max::ε) | (min::ε) | (mean::ε) | (range::ε) | (percent::ε) | (distrib::ε) | (determ::ε) | (other::ε) ;
TimedEvent ::= repetition::MARTE_PrimitivesTypes/Integer base_TimeEvent::TimeEvent every::ValueSpecification ;
StructuredActivityNode ::= (variable::Variable)+ (edge::ActivityEdge)+ mustIsolate::MARTE_PrimitivesTypes/Boolean (node::ActivityNode)+ ;
NFP_Percentage ::= unit::MARTE_PrimitivesTypes/String ;
HwStorageManager ::= (managedMemories::MARTE_DesignModel/HRM/HwLogical/HwMemory/HwMemory)+ ;
IntervalType ::= intervalAttrib::Property base_DataType::DataType ;
ProtocolConformance ::= generalMachine::ProtocolStateMachine specificMachine::ProtocolStateMachine ;
GaLatencyObs ::= (latency::BasicNFP_Types/NFP_Duration)+ (miss::BasicNFP_Types/NFP_Real)+ (utility::MARTE_DataTypes/UtilityType)+ (maxJitter::BasicNFP_Types/NFP_Duration)+ ;
CacheType ::= (Data::ε) | (Instruction::ε) | (Unified::ε) | (Other::ε) | (Undef::ε) ;
DefaultLink ::= ε ;
OpaqueExpression ::= (body::MARTE_PrimitivesTypes/String)+ (language::MARTE_PrimitivesTypes/String)+ result::Parameter behavior::Behavior ;
QueuePolicyKind ::= (FIFO::ε) | (LIFO::ε) | (Priority::ε) | (Undef::ε) | (Other::ε) ;
HWCache ::= level::BasicNFP_Types/NFP_Natural type::MARTE_DesignModel/HRM/HwLogical/HwMemory/CacheType structure::MARTE_DesignModel/HRM/HwLogical/HwMemory/CacheStructure repl_Policy::MARTE_DesignModel/HRM/HwLogical/HwMemory/Repl_Policy writePolicy::MARTE_DesignModel/HRM/HwLogical/HwMemory/WritePolicy ;
NFP_DataSize ::= unit::MeasurementUnits/DataSizeUnitKind precision::MARTE_PrimitivesTypes/Real ;
PackageMerge ::= mergedPackage::Package receivingPackage::Package ;
TimeEvent ::= isRelative::MARTE_PrimitivesTypes/Boolean when::ValueSpecification ;
StringExpression ::= (subExpression::StringExpression)+ owningExpression::StringExpression ;
TimeNatureKind ::= (discrete::ε) | (dense::ε) ;
PseudostateKind ::= (initial::ε) | (deepHistory::ε) | (shallowHistory::ε) | (join::ε) | (fork::ε) | (junction::ε) | (choice::ε) | (entryPoint::ε) | (exitPoint::ε) | (terminate::ε) ;
ConcurrencyKind ::= (reader::ε) | (writer::ε) | (parallel::ε) ;
HwPowerSupply ::= suppliedPower::BasicNFP_Types/NFP_Power capacity::BasicNFP_Types/NFP_Energy ;
NamedElement ::= Namespace ;
 NamedElement ::= TypedElement ;
 NamedElement ::= RedefinableElement ;
 NamedElement ::= DeploymentTarget ;
 NamedElement ::= CollaborationUse ;
 NamedElement ::= Message ;
 NamedElement ::= Lifeline ;
 NamedElement ::= Trigger ;
 NamedElement ::= Vertex ;
 NamedElement ::= ParameterSet ;
 NamedElement ::= DeployedArtifact ;
 NamedElement ::= MessageEnd ;
 NamedElement ::= InteractionFragment ;
 NamedElement ::= GeneralOrdering ;
 NamedElement ::= PackageableElement ;
 NamedElement ::= ActivityPartition ;
 NamedElement ::= Include ;
 NamedElement ::= Extend ;
FlowBFeature ::= kind::MARTE_Foundations/GCM/BFeatureKind base_BehavioralFeature::BehavioralFeature ;
GaAcqStep ::= acqRes::MARTE_Foundations/GRM/Resource resUnits::BasicNFP_Types/NFP_Integer ;
SaSharedResource ::= capacity::BasicNFP_Types/NFP_Integer isPreemp::BasicNFP_Types/NFP_Boolean isConsum::BasicNFP_Types/NFP_Boolean (acquisT::BasicNFP_Types/NFP_Duration)+ (releaseT::BasicNFP_Types/NFP_Duration)+ ;
ElementImport ::= visibility::VisibilityKind alias::MARTE_PrimitivesTypes/String importedElement::PackageableElement importingNamespace::Namespace ;
HwSupport ::= ε ;
HwDrive ::= sectorSize::BasicNFP_Types/NFP_DataSize buffer::MARTE_DesignModel/HRM/HwLogical/HwMemory/HwRAM ;
HwBridge ::= (sides::MARTE_DesignModel/HRM/HwLogical/HwCommunication/HwMedia)+ ;
HwResourceService ::= ε ;
NFP ::= base_Property::Property ;
NfpConstraint ::= kind::MARTE_Foundations/NFPs/ConstraintKind base_Constraint::Constraint ;
DirectionKind ::= (in::ε) | (out::ε) | (inout::ε) ;
BehavioredClassifier ::= UseCase ;
 BehavioredClassifier ::= Collaboration ;
 BehavioredClassifier ::= Class ;
PaRunTInstance ::= poolSize::BasicNFP_Types/NFP_Integer unbddPool::MARTE_PrimitivesTypes/Boolean instance::MARTE_Foundations/GRM/Resource host::MARTE_Foundations/GRM/SchedulableResource utilization::BasicNFP_Types/NFP_Real throughput::BasicNFP_Types/NFP_Frequency base_NamedElement::NamedElement ;
NFP_Length ::= unit::MeasurementUnits/LengthUnitKind precision::MARTE_PrimitivesTypes/Real ;
ExecutableNode ::= Action ;
InputPin ::= isControl::MARTE_PrimitivesTypes/Boolean ;
SaExecStep ::= base_BehavioralFeature::BehavioralFeature deadline::BasicNFP_Types/NFP_Duration spareCap::BasicNFP_Types/NFP_Duration schSlack::BasicNFP_Types/NFP_Real preemptT::BasicNFP_Types/NFP_Duration readyT::BasicNFP_Types/NFP_Duration delayT::BasicNFP_Types/NFP_Duration ;
TimedProcessing ::= base_Action::Action base_Behavior::Behavior base_Message::Message duration::ValueSpecification start::Event stop::Event ;
StorageResource ::= elementSize::MARTE_PrimitivesTypes/Integer ;
TimeInterpretationKind ::= (duration::ε) | (instant::ε) ;
HwTimingResource ::= ε ;
TimeStandardKind ::= (TAI::ε) | (UT0::ε) | (UT1::ε) | (UTC::ε) | (Local::ε) | (TT::ε) | (TBD::ε) | (TCG::ε) | (TCB::ε) | (Sidereal::ε) | (GPS::ε) ;
NFP_Power ::= unit::MeasurementUnits/PowerUnitKind precision::MARTE_PrimitivesTypes/Real ;
NFP_Integer ::= value::MARTE_PrimitivesTypes/Integer ;
ArrivalPattern ::= periodic::BasicNFP_Types/PeriodicPattern aperiodic::BasicNFP_Types/AperiodicPattern burst::BasicNFP_Types/BurstPattern irregular::BasicNFP_Types/IrregularPattern closed::BasicNFP_Types/ClosedPattern sporadic::BasicNFP_Types/SporadicPattern ;
AggregationKind ::= (none::ε) | (shared::ε) | (composite::ε) ;
MessageEnd ::= Gate ;
InterruptResource ::= kind::MARTE_DesignModel/SRM/SW_Concurrency/InterruptKind isMaskable::MARTE_PrimitivesTypes/Boolean (vectorElements::TypedElement)+ (maskElements::TypedElement)+ (routineConnectServices::BehavioralFeature)+ (routineDisconnectServices::BehavioralFeature)+ ;
InteractionConstraint ::= minint::ValueSpecification maxint::ValueSpecification ;
ConnectorEnd ::= definingEnd::Property partWithPort::Property role::ConnectableElement ;
NotificationResourceKind ::= (Event::ε) | (Barrier::ε) | (Undef::ε) | (Other::ε) ;
PackageImport ::= visibility::VisibilityKind importedPackage::Package importingNamespace::Namespace ;
SwSynchronizationResource ::= ε ;
CallConcurrencyKind ::= (sequential::ε) | (guarded::ε) | (concurrent::ε) ;
TemplateableElement ::= StringExpression ;
TimeExpression ::= expr::ValueSpecification (observation::Observation)+ ;
GaEventTrace ::= content::MARTE_PrimitivesTypes/String format::MARTE_PrimitivesTypes/String location::MARTE_PrimitivesTypes/String base_NamedElement::NamedElement ;
SaCommHost ::= isSched::BasicNFP_Types/NFP_Boolean schSlack::BasicNFP_Types/NFP_Real ;
ConnectorKind ::= (assembly::ε) | (delegation::ε) ;
TimedDurationObservation ::= obsKind::TimeLibrary/EventKind base_DurationObservation::DurationObservation ;
SharedDataComResource ::= (readServices::BehavioralFeature)+ (writeServices::BehavioralFeature)+ ;
HwCoolingSupply ::= coolingPower::BasicNFP_Types/NFP_Power ;
InterruptibleActivityRegion ::= (node::ActivityNode)+ (interruptingEdge::ActivityEdge)+ ;
SaSchedObs ::= (suspentions::BasicNFP_Types/NFP_Integer)+ (blockT::BasicNFP_Types/NFP_Duration)+ (overlaps::BasicNFP_Types/NFP_Integer)+ ;
HwTimer ::= nbCounter::BasicNFP_Types/NFP_Natural counterWidth::BasicNFP_Types/NFP_DataSize inputClock::MARTE_DesignModel/HRM/HwLogical/HwTiming/HwClock ;
NFP_Frequency ::= unit::MeasurementUnits/FrequencyUnitKind precision::MARTE_PrimitivesTypes/Real ;
EncapsulatedClassifier ::= Class ;
TypedElement ::= ConnectableElement ;
 TypedElement ::= ValueSpecification ;
 TypedElement ::= ObjectNode ;
ProtocolStateMachine ::= (conformance::ProtocolConformance)+ ;
CommunicationEndPoint ::= packetSize::MARTE_PrimitivesTypes/Integer ;
RteConnector ::= bandwidth::BasicNFP_Types/NFP_DataTxRate packetT::BasicNFP_Types/NFP_Duration blockT::BasicNFP_Types/NFP_Duration transmMode::MARTE_DataTypes/TransmModeKind base_Connector::Connector ;
GRService ::= owner::MARTE_Foundations/GRM/Resource base_ExecutionSpecification::ExecutionSpecification base_BehavioralFeature::BehavioralFeature base_Behavior::Behavior base_Collaboration::Collaboration base_CollaborationUse::CollaborationUse ;
HwDMA ::= nbChannels::BasicNFP_Types/NFP_Natural transferWidth::BasicNFP_Types/NFP_DataSize (drivenBy::MARTE_DesignModel/HRM/HwLogical/HwComputing/HwProcessor)+ ;
NFP_NaturalInterval ::= bound::BasicNFP_Types/NFP_Natural ;
DataTxRateUnitKind ::= (b_per_s::ε) | (Kb_per_s::ε) | (Mb_per_s::ε) ;
TimeUnitKind ::= (s::ε) | (tick::ε) | (ms::ε) | (us::ε) | (min::ε) | (hrs::ε) | (dys::ε) ;
DataSizeUnitKind ::= (bits::ε) | (Bytes::ε) | (KB::ε) | (MB::ε) | (GB::ε) ;
FlowProperty ::= direction::MARTE_Foundations/GCM/DirectionKind base_Property::Property ;
GaWorkloadGenerator ::= pop::BasicNFP_Types/NFP_Integer base_Behavior::Behavior ;
ComputingResource ::= ε ;
NotificationKind ::= (Memorized::ε) | (Bounded::ε) | (Memoryless::ε) | (Undef::ε) | (Other::ε) ;
TemplateSignature ::= (parameter::TemplateParameter)+ (ownedParameter::TemplateParameter)+ template::TemplateableElement ;
PowerUnitKind ::= (W::ε) | (mW::ε) | (KW::ε) ;
NFP_FrequencyInterval ::= bound::BasicNFP_Types/NFP_Frequency ;
StructuralFeature ::= Property ;
ConnectableElement ::= Parameter ;
 ConnectableElement ::= Variable ;
BasicNFP_Types_DirectionKind ::= (incr::ε) | (decr::ε) ;
RtAction ::= isAtomic::MARTE_PrimitivesTypes/Boolean synchKind::MARTE_DesignModel/RTEMoCC/SynchronizationKind msgSize::BasicNFP_Types/NFP_DataSize base_BehavioralFeature::BehavioralFeature base_InvocationAction::InvocationAction ;
UseCase ::= (include::Include)+ (extend::Extend)+ (extensionPoint::ExtensionPoint)+ (subject::Classifier)+ ;
PartDecomposition ::= refersTo::Interaction (actualGate::Gate)+ (argument::Action)+ ;
SporadicPattern ::= minInterarrival::BasicNFP_Types/NFP_Duration maxInterarrival::BasicNFP_Types/NFP_Duration jitter::BasicNFP_Types/NFP_Duration ;
ValueSpecification ::= Expression ;
 ValueSpecification ::= OpaqueExpression ;
 ValueSpecification ::= TimeExpression ;
 ValueSpecification ::= Duration ;
 ValueSpecification ::= Interval ;
ConstraintKind ::= (required::ε) | (offered::ε) | (constraint::ε) ;
NFP_Energy ::= unit::MeasurementUnits/EnergyUnitKind precision::MARTE_PrimitivesTypes/Real ;
ParameterEffectKind ::= (create::ε) | (read::ε) | (update::ε) | (delete::ε) ;
EventKind ::= (start::ε) | (finish::ε) | (send::ε) | (receive::ε) | (consume::ε) ;
PaCommStep ::= ε ;
HwMMU ::= virtualAddrSpace::BasicNFP_Types/NFP_DataSize physicalAddrSpace::BasicNFP_Types/NFP_DataSize memoryProtection::BasicNFP_Types/NFP_Natural nbEntries::BasicNFP_Types/NFP_Boolean (ownedTLBs::MARTE_DesignModel/HRM/HwLogical/HwMemory/HWCache)+ ;
SwMutualExclusionResource ::= mechanism::MARTE_DesignModel/SRM/SW_Interaction/MutualExclusionResourceKind concurrentAccessProtocol::MARTE_DesignModel/SRM/SW_Interaction/ConcurrentAccessProtocolKind (accessTokenElements::TypedElement)+ (releaseServices::BehavioralFeature)+ (acquireServices::BehavioralFeature)+ ;
CollaborationUse ::= type::Collaboration (roleBinding::Dependency)+ ;
FixedPriorityParameters ::= priority::MARTE_PrimitivesTypes/Integer ;
SignalSpecification ::= kind::MARTE_Foundations/GCM/BFeatureKind base_Interface::Interface ;
ParameterableElement ::= ConnectableElement ;
 ParameterableElement ::= PackageableElement ;
CollectionType ::= collectionAttrib::Property base_DataType::DataType ;
GaCommStep ::= ε ;
OptimallityCriterionKind ::= (meetHardDeadlines::ε) | (minimizeMissedDeadlines::ε) | (minimizedMeanTardiness::ε) | (undef::ε) | (other::ε) ;
HwMemory ::= memorySize::BasicNFP_Types/NFP_DataSize adressSize::BasicNFP_Types/NFP_DataSize (timings::MARTE_DesignModel/HRM/HwLogical/HwMemory/Timing)+ ;
MessagePort ::= base_Port::Port isAtomic::MARTE_PrimitivesTypes/Boolean isConjugated::MARTE_PrimitivesTypes/Boolean direction::MARTE_Foundations/GCM/DirectionKind ;
RtUnit ::= isDynamic::MARTE_PrimitivesTypes/Boolean isMain::MARTE_PrimitivesTypes/Boolean poolSize::MARTE_PrimitivesTypes/Integer poolPolicy::MARTE_DesignModel/RTEMoCC/PoolMgtPolicyKind poolWaitingTime::BasicNFP_Types/NFP_Duration operationalMode::Behavior main::Operation memorySize::BasicNFP_Types/NFP_DataSize base_BehavioredClassifier::BehavioredClassifier ;
AreaUnitKind ::= (mm2::ε) | (um2::ε) ;
ShapeSpecification ::= (size::MARTE_PrimitivesTypes/UnlimitedNatural)+ ;
TupleType ::= (tupleAttrib::Property)+ base_DataType::DataType ;
TimedInstantObservation ::= obsKind::TimeLibrary/EventKind base_TimeObservation::TimeObservation ;
TimeObservation ::= event::NamedElement firstEvent::MARTE_PrimitivesTypes/Boolean ;
GaCommChannel ::= packetSize::BasicNFP_Types/NFP_DataSize (utlization::BasicNFP_Types/NFP_Real)+ ;
LogicalTimeUnit ::= tick::ε ;
NFP_DataTxRate ::= unit::MeasurementUnits/DataTxRateUnitKind precision::MARTE_PrimitivesTypes/Real ;
MemoryOrganization ::= nbRows::BasicNFP_Types/NFP_Natural nbColumns::BasicNFP_Types/NFP_Natural nbBanks::BasicNFP_Types/NFP_Natural wordSize::BasicNFP_Types/NFP_DataSize ;
NFP_Area ::= unit::MeasurementUnits/AreaUnitKind precision::MARTE_PrimitivesTypes/Real ;
TimedValueType ::= unit::TimeLibrary/TUK value::MARTE_PrimitivesTypes/Real expr::TimeLibrary/ClockedValueSpecification onClock::MARTE_PrimitivesTypes/String ;
GaExecHost ::= commTxOch::BasicNFP_Types/NFP_Duration commRcvOvh::BasicNFP_Types/NFP_Duration cntxtSwt::BasicNFP_Types/NFP_Duration clockOvh::BasicNFP_Types/NFP_Duration schedPriRange::MARTE_DataTypes/IntegerInterval memSize::BasicNFP_Types/NFP_DataSize (utilization::BasicNFP_Types/NFP_Real)+ (throughput::BasicNFP_Types/NFP_Frequency)+ ;
SwSchedulableResource ::= isStaticSchedulingFeature::MARTE_PrimitivesTypes/Boolean isPreemptable::MARTE_PrimitivesTypes/Boolean schedulers::NamedElement (deadlineElements::TypedElement)+ (deadlineTypeElements::TypedElement)+ (timeScliceElements::TypedElement)+ (delayServices::BehavioralFeature)+ (joinServices::BehavioralFeature)+ (yieldServices::BehavioralFeature)+ ;
NfpType ::= valueAttrib::Property unitAttrib::Property exprAttrib::Property ;
FlowPort ::= isAtomic::MARTE_PrimitivesTypes/Boolean isConjugated::MARTE_PrimitivesTypes/Boolean direction::MARTE_Foundations/GCM/DirectionKind base_Port::Port ;
NFP_CommonType ::= expr::MARTE_DataTypes/VSL_Expression source::BasicNFP_Types/SourceKind statQ::BasicNFP_Types/StatisticalQualifierKind dir::BasicNFP_Types/BasicNFP_Types_DirectionKind ;
PaLogicalResource ::= utilization::BasicNFP_Types/NFP_Real throughput::BasicNFP_Types/NFP_Frequency poolSize::BasicNFP_Types/NFP_Integer ;
GaStep ::= isAtomic::BasicNFP_Types/NFP_Boolean blockT::BasicNFP_Types/NFP_Duration rep::BasicNFP_Types/NFP_Real prob::BasicNFP_Types/NFP_Real priority::BasicNFP_Types/NFP_Integer concurRes::MARTE_Foundations/GRM/SchedulableResource host::MARTE_AnalysisModel/GQAM/GaExecHost (serDemand::MARTE_AnalysisModel/GQAM/GaRequestedService)+ (servCount::BasicNFP_Types/NFP_Real)+ ;
SaAnalysisContext ::= isSched::BasicNFP_Types/NFP_Boolean optCriterion::MARTE_AnalysisModel/SAM/OptimallityCriterionKind ;
IdealClock ::= ε ;
GaAnalysisContext ::= (context::BasicNFP_Types/NFP_String)+ (workload::MARTE_AnalysisModel/GQAM/GaWorkloadBehavior)+ (platform::MARTE_AnalysisModel/GQAM/GaResourcesPlatform)+ ;
DeploymentTarget ::= InstanceSpecification ;
TimeLibrary_TimeUnitKind ::= (s::ε) | (ms::ε) | (us::ε) | (ns::ε) | (min::ε) | (hrs::ε) | (dys::ε) ;
ConditionType ::= (Temperature::ε) | (Humidity::ε) | (Altitude::ε) | (Vibration::ε) | (Shock::ε) | (Other::ε) | (Undef::ε) ;
RtBehavior ::= queueSchedPolicy::GRM_BasicTypes/SchedPolicyKind queueSize::MARTE_PrimitivesTypes/Integer msgMaxSize::BasicNFP_Types/NFP_DataSize base_Behavior::Behavior ;
TimeInterval ::= min::ValueSpecification max::ValueSpecification ;
EDFParameters ::= deadline::BasicNFP_Types/NFP_Duration ;
HwBus ::= adressWidth::BasicNFP_Types/NFP_DataSize wordWidth::BasicNFP_Types/NFP_DataSize isSynchronous::MARTE_PrimitivesTypes/Boolean isSerial::MARTE_PrimitivesTypes/Boolean ;
TemplateParameterSubstitution ::= formal::TemplateParameter (actual::ParameterableElement)+ (ownedActual::ParameterableElement)+ templateBinding::TemplateBinding ;
SendFlowAction ::= base_InvocationAction::InvocationAction ;
PaRequestedStep ::= ε ;
MemoryPartition ::= (concurrentResources::TypedElement)+ (memorySpaces::TypedElement)+ (fork::BehavioralFeature)+ (exit::BehavioralFeature)+ base_Namespace::Namespace ;
HwISA ::= family::BasicNFP_Types/NFP_String inst_Width::BasicNFP_Types/NFP_DataSize type::MARTE_DesignModel/HRM/HwLogical/HwComputing/ISA_Type ;
PoolMgtPolicyKind ::= (infiniteWait::ε) | (timedWait::ε) | (dynamic::ε) | (exception::ε) | (other::ε) ;
DirectedRelationship ::= ElementImport ;
 DirectedRelationship ::= PackageImport ;
 DirectedRelationship ::= TemplateBinding ;
 DirectedRelationship ::= Generalization ;
 DirectedRelationship ::= PackageMerge ;
 DirectedRelationship ::= ProfileApplication ;
 DirectedRelationship ::= ProtocolConformance ;
 DirectedRelationship ::= Dependency ;
 DirectedRelationship ::= Include ;
 DirectedRelationship ::= Extend ;
GeneralOrdering ::= before::OccurrenceSpecification after::OccurrenceSpecification ;
TimedDomain ::= base_Package::Package ;
HwArbiter ::= (controlledMedias::MARTE_DesignModel/HRM/HwLogical/HwCommunication/HwMedia)+ ;
NFP_String ::= value::MARTE_PrimitivesTypes/String ;
OutputPin ::= isControl::MARTE_PrimitivesTypes/Boolean ;
AllocationKind ::= (structural::ε) | (behavioral::ε) | (hybrid::ε) ;
SwResource ::= (identifierElements::TypedElement)+ (stateElements::TypedElement)+ memorySizeFootprint::TypedElement (createServices::BehavioralFeature)+ (deleteServices::BehavioralFeature)+ (initializeServices::BehavioralFeature)+ ;
ExtensionPoint ::= useCase::UseCase ;
DurationConstraint ::= firstEvent::MARTE_PrimitivesTypes/Boolean ;
PoolingParameters ::= period::BasicNFP_Types/NFP_Duration (overhead::BasicNFP_Types/NFP_Duration)+ ;
ExecutionKind ::= (deferred::ε) | (remoteImmediate::ε) | (localImmediate::ε) ;
GaRelStep ::= relRes::MARTE_Foundations/GRM/Resource resUnits::BasicNFP_Types/NFP_Integer ;
ParameterDirectionKind ::= (in::ε) | (inout::ε) | (out::ε) | (return::ε) ;
TimeConstraint ::= firstEvent::MARTE_PrimitivesTypes/Boolean ;
GaScenario ::= cause::MARTE_AnalysisModel/GQAM/GaWorkloadEvent (hostDemand::BasicNFP_Types/NFP_Duration)+ (hostDemandOps::BasicNFP_Types/NFP_Real)+ (interOccT::BasicNFP_Types/NFP_Duration)+ (throughput::BasicNFP_Types/NFP_Frequency)+ respT::BasicNFP_Types/NFP_Duration (utilization::BasicNFP_Types/NFP_Real)+ (utilizationHost::BasicNFP_Types/NFP_Real)+ root::MARTE_AnalysisModel/GQAM/GaStep (timing::MARTE_AnalysisModel/GQAM/GaTimingObs)+ behavior::MARTE_AnalysisModel/GQAM/GaScenario ;
TransitionKind ::= (internal::ε) | (local::ε) | (external::ε) ;
UtilityType ::= ε ;
SaEnd2EndFlow ::= isSched::BasicNFP_Types/NFP_Boolean schSlack::BasicNFP_Types/NFP_Real (end2EndT::BasicNFP_Types/NFP_Duration)+ (end2EndD::BasicNFP_Types/NFP_Duration)+ (timing::MARTE_AnalysisModel/GQAM/GaTimingObs)+ base_NamedElement::NamedElement ;
DeviceResource ::= ε ;
IntervalConstraint ::= TimeConstraint ;
 IntervalConstraint ::= DurationConstraint ;
 IntervalConstraint ::= TimeConstraint | DurationConstraint ;
ConcurrencyResource ::= ε ;
ChoiceType ::= (choiceAttrib::Property)+ defaultAttrib::Property base_DataType::DataType ;
ProtectProtocolKind ::= (FIFO::ε) | (NoPreemption::ε) | (PriorityCeiling::ε) | (PriorityInheritance::ε) | (StackBased::ε) | (Undef::ε) | (Other::ε) ;
DurationInterval ::= min::ValueSpecification max::ValueSpecification ;
TimingResource ::= ε ;
StateMachine ::= ProtocolStateMachine ;
 StateMachine ::= (region::Region)+ (submachineState::State)+ (connectionPoint::Pseudostate)+ (extendedStateMachine::StateMachine)+ ;
TimedObservation ::= ε ;
FrequencyUnitKind ::= (Hz::ε) | (KHz::ε) | (MHz::ε) | (GHz::ε) | (rpm::ε) ;
OccurrenceSpecification ::= (toBefore::GeneralOrdering)+ event::Event (toAfter::GeneralOrdering)+ ;
PeriodicServerKind ::= (Sporadic::ε) | (Deferrable::ε) | (Undef::ε) | (Other::ε) ;
ActivityGroup ::= InterruptibleActivityRegion ;
 ActivityGroup ::= ActivityPartition ;
HwComponent ::= kind::MARTE_DesignModel/HRM/HwPhysical/HwLayout/ComponentKind dimenssions::BasicNFP_Types/NFP_Length area::BasicNFP_Types/NFP_Area position::MARTE_DataTypes/NFP_NaturalInterval grid::BasicNFP_Types/NFP_Natural nbPins::BasicNFP_Types/NFP_Natural weight::BasicNFP_Types/NFP_Real price::BasicNFP_Types/NFP_String (r_Conditions::MARTE_DesignModel/HRM/HwPhysical/HwLayout/Env_Condition)+ (poweredServices::MARTE_DesignModel/HRM/HwLogical/HwGeneral/HwResourceService)+ staticConsumption::BasicNFP_Types/NFP_Power staticDissipation::BasicNFP_Types/NFP_Power ;
SwAccessService ::= isModifier::MARTE_PrimitivesTypes/Boolean accessedElement::Property ;
TemplateBinding ::= signature::TemplateSignature (parameterSubstitution::TemplateParameterSubstitution)+ boundElement::TemplateableElement ;
ApplicationAllocationEnd ::= (allocatedTo::MARTE_Foundations/Alloc/ExecutionPlatformAllocationEnd)+ ;
AccessPolicyKind ::= (Read::ε) | (Write::ε) | (ReadWrite::ε) | (Undef::ε) | (Other::ε) ;
NFP_BoundedDuration ::= values::MARTE_PrimitivesTypes/Real unit::MeasurementUnits/TimeUnitKind clock::MARTE_PrimitivesTypes/String precision::MARTE_PrimitivesTypes/Real ;
ROM_Type ::= (MaskedROM::ε) | (EPROM::ε) | (OTP_EPROM::ε) | (EEPROM::ε) | (Flash::ε) | (Other::ε) | (Undef::ε) ;
GaWorkloadEvent ::= pattern::BasicNFP_Types/ArrivalPattern generator::MARTE_AnalysisModel/GQAM/GaWorkloadGenerator trace::MARTE_AnalysisModel/GQAM/GaEventTrace effect::MARTE_AnalysisModel/GQAM/GaScenario timedEvent::TimeEvent base_NamedElement::NamedElement ;
TimedValueSpecification ::= interpretation::TimeTypesLibrary/TimeInterpretationKind base_ValueSpecification::ValueSpecification ;
EnumerationLiteral ::= enumeration::Enumeration ;
SaCommStep ::= deadline::BasicNFP_Types/NFP_Duration spareCap::BasicNFP_Types/NFP_Duration schSlack::BasicNFP_Types/NFP_Real base_BehavioralFeature::BehavioralFeature ;
CompnentState ::= (Operating::ε) | (Storage::ε) | (Other::ε) | (Undef::ε) ;
NFP_DateTime ::= value::MARTE_PrimitivesTypes/DateTime ;
GaRequestedService ::= base_Operation::Operation ;
IntegerMatrix ::= (matrixElem::MARTE_DataTypes/IntegerVector)+ ;
LaxityKind ::= (hard::ε) | (soft::ε) | (other::ε) ;
PaStep ::= noSynch::BasicNFP_Types/NFP_Boolean (extOpDemand::MARTE_PrimitivesTypes/String)+ (extOpCount::BasicNFP_Types/NFP_Real)+ (behavDemand::MARTE_AnalysisModel/GQAM/GaScenario)+ (behavCount::BasicNFP_Types/NFP_Real)+ ;
GaTimingObs ::= laxity::MARTE_AnalysisModel/GQAM/LaxityKind startObs::TimeObservation stopObs::TimeObservation ;
ActivityPartition ::= isDimension::MARTE_PrimitivesTypes/Boolean isExternal::MARTE_PrimitivesTypes/Boolean (node::ActivityNode)+ (subpartition::ActivityPartition)+ superPartition::ActivityPartition represents::Element (edge::ActivityEdge)+ ;
NFP_Duration ::= unit::MeasurementUnits/TimeUnitKind clock::MARTE_PrimitivesTypes/String precision::MARTE_PrimitivesTypes/Real ;
HwASIC ::= ε ;
InteractionOperand ::= guard::InteractionConstraint (fragment::InteractionFragment)+ ;
InterruptKind ::= (HardwareInterruption::ε) | (ProcessorDetectedException::ε) | (ProgrammedException::ε) | (Undef::ε) | (Other::ε) ;
VariableDirectionKind ::= (in::ε) | (out::ε) | (inout::ε) ;
StructuredClassifier ::= EncapsulatedClassifier ;
 StructuredClassifier ::= Collaboration ;
BurstPattern ::= minInterarrival::BasicNFP_Types/NFP_Duration maxInterarrival::BasicNFP_Types/NFP_Duration minEventInterval::BasicNFP_Types/NFP_Duration maxEventInterval::BasicNFP_Types/NFP_Duration burstSize::BasicNFP_Types/NFP_Integer ;
SourceKind ::= (est::ε) | (meas::ε) | (calc::ε) | (req::ε) ;
HwRAM ::= organization::MARTE_DesignModel/HRM/HwLogical/HwMemory/MemoryOrganization isSynchronous::BasicNFP_Types/NFP_Boolean isStatic::BasicNFP_Types/NFP_Boolean isNonVolatile::BasicNFP_Types/NFP_Boolean repl_Policy::MARTE_DesignModel/HRM/HwLogical/HwMemory/Repl_Policy writePolicy::MARTE_DesignModel/HRM/HwLogical/HwMemory/WritePolicy ;
SynchronizationResource ::= ε ;
PaResPassStep ::= resource::MARTE_Foundations/GRM/Resource resUnits::BasicNFP_Types/NFP_Integer ;
RedefinableElement ::= Feature ;
 RedefinableElement ::= ExtensionPoint ;
 RedefinableElement ::= ActivityNode ;
 RedefinableElement ::= ActivityEdge ;
 RedefinableElement ::= Region ;
 RedefinableElement ::= Transition ;
ClockConstraint ::= ε ;
PLD_Organization ::= nbRows::BasicNFP_Types/NFP_Integer nbColumns::BasicNFP_Types/NFP_Natural class::MARTE_DesignModel/HRM/HwLogical/HwComputing/PLD_Class ;
PeriodicServerParameters ::= kind::GRM_BasicTypes/PeriodicServerKind backgroundPriority::MARTE_PrimitivesTypes/Integer initialBudget::BasicNFP_Types/NFP_Duration replenishPeriod::BasicNFP_Types/NFP_Duration maxPendingReplenish::MARTE_PrimitivesTypes/Integer ;
SaExecHost ::= isSched::BasicNFP_Types/NFP_Boolean schSlack::BasicNFP_Types/NFP_Real schedUtiliz::BasicNFP_Types/NFP_Real ISRswitchT::BasicNFP_Types/NFP_Duration ISRprioRange::MARTE_DataTypes/IntegerInterval schedPolicy::GRM_BasicTypes/SchedPolicyKind isPreempible::BasicNFP_Types/NFP_Boolean ;
MARTE_DataTypes_Interval ::= ε ;
HwDevice ::= ε ;
ClosedPattern ::= population::BasicNFP_Types/NFP_Integer extDelay::BasicNFP_Types/NFP_Duration ;
InteractionFragment ::= ExecutionSpecification ;
 InteractionFragment ::= InteractionUse ;
 InteractionFragment ::= OccurrenceSpecification ;
 InteractionFragment ::= Interaction ;
 InteractionFragment ::= InteractionOperand ;
NFP_Natural ::= value::MARTE_PrimitivesTypes/UnlimitedNatural ;
ProcessingResource ::= speedFactor::MARTE_PrimitivesTypes/Real scheduler::MARTE_Foundations/GRM/Scheduler ;
NFP_Boolean ::= value::MARTE_PrimitivesTypes/Boolean ;
LengthUnitKind ::= (m::ε) | (cm::ε) | (mm::ε) ;
EntryPoint ::= isReentrant::MARTE_PrimitivesTypes/Boolean routine::BehavioralFeature base_BehavioralFeature::BehavioralFeature base_Dependency::Dependency ;
MultiplicityElement ::= ConnectorEnd ;
 MultiplicityElement ::= Parameter ;
 MultiplicityElement ::= Pin ;
 MultiplicityElement ::= Variable ;
HwResource ::= description::BasicNFP_Types/NFP_String (p_HW_Services::MARTE_DesignModel/HRM/HwLogical/HwGeneral/HwResourceService)+ (r_HW_Services::MARTE_DesignModel/HRM/HwLogical/HwGeneral/HwResourceService)+ (ownedHW::MARTE_DesignModel/HRM/HwLogical/HwGeneral/HwResource)+ (endPoints::MARTE_DesignModel/HRM/HwLogical/HwCommunication/HwEndPoint)+ ;
PackageableElement ::= Constraint ;
 PackageableElement ::= Type ;
 PackageableElement ::= GeneralizationSet ;
 PackageableElement ::= Observation ;
 PackageableElement ::= Event ;
 PackageableElement ::= Dependency ;
 PackageableElement ::= ValueSpecification ;
MemoryBroker ::= accessPolicy::MARTE_DesignModel/SRM/SW_Brokering/AccessPolicyKind (memories::TypedElement)+ (memoryBlockAdressSelements::TypedElement)+ (memoryBlockSizeElements::TypedElement)+ (lockServices::BehavioralFeature)+ (unlockServices::BehavioralFeature)+ (mapServices::BehavioralFeature)+ (unMapServices::BehavioralFeature)+ ;
PeriodicPattern ::= period::BasicNFP_Types/NFP_Duration jitter::BasicNFP_Types/NFP_Duration phase::BasicNFP_Types/NFP_Duration ;
FlowSpecification ::= direction::MARTE_Foundations/GCM/DirectionKind base_Interface::Interface ;
TimedConstraint ::= interpretation::TimeTypesLibrary/TimeInterpretationKind ;
TimerResource ::= duration::BasicNFP_Types/NFP_Duration isPeriodic::MARTE_PrimitivesTypes/Boolean ;
AllocateActivityGroup ::= isUnique::MARTE_PrimitivesTypes/Boolean base_ActivityPartition::ActivityPartition ;
SwTimerResource ::= durationElements::TypedElement ;
InstanceSpecification ::= EnumerationLiteral ;
 InstanceSpecification ::= (classifier::Classifier)+ (slot::Slot)+ specification::ValueSpecification ;
InterRepetition ::= repetitionShapeDependence::MARTE_DataTypes/IntegerVector isModulo::MARTE_PrimitivesTypes/Boolean ;
HwI_O ::= ε ;
MessageResourceKind ::= (MessageQueue::ε) | (Pipe::ε) | (Blackboard::ε) | (Undef::ε) | (Other::ε) ;
MessageComResource ::= isFixedMessageSize::MARTE_PrimitivesTypes/Boolean meachnism::MARTE_DesignModel/SRM/SW_Interaction/MessageResourceKind (messageSizeElements::TypedElement)+ (messageQueueCapacityElements::TypedElement)+ messageQueuePolicy::MARTE_DesignModel/SRM/SW_Interaction/QueuePolicyKind (sendServices::BehavioralFeature)+ (receiveServices::BehavioralFeature)+ ;
ClockType ::= nature::TimeTypesLibrary/TimeNatureKind unitType::Enumeration isLogical::MARTE_PrimitivesTypes/Boolean resolAttrib::Property maxValAttrib::Property offsetAttrib::Property getTime::Operation setTime::Operation indexToValue::Operation base_Class::Class ;
ISA_Type ::= (RISC::ε) | (CISC::ε) | (VLIW::ε) | (SIMD::ε) | (Other::ε) | (Undef::ε) ;
BoundedSubtype ::= baseType::DataType minValue::MARTE_PrimitivesTypes/String maxValue::MARTE_PrimitivesTypes/String isMinOpen::MARTE_PrimitivesTypes/Boolean isMaxOpen::MARTE_PrimitivesTypes/Boolean base_DataType::DataType ;
ConnectionPointReference ::= (entry::Pseudostate)+ (exit::Pseudostate)+ state::State ;
NotificationResource ::= occurence::MARTE_DesignModel/SRM/SW_Interaction/NotificationKind mechanism::MARTE_DesignModel/SRM/SW_Interaction/NotificationResourceKind (occurenceCountElements::TypedElement)+ (maskElements::TypedElement)+ (flushServices::BehavioralFeature)+ (signalServices::BehavioralFeature)+ (waitServices::BehavioralFeature)+ (clearServices::BehavioralFeature)+ ;
HwPLD ::= technology::MARTE_DesignModel/HRM/HwLogical/HwComputing/PLD_Technology organization::MARTE_DesignModel/HRM/HwLogical/HwComputing/PLD_Organization nbLUTs::BasicNFP_Types/NFP_Natural ndLUT_Inputs::BasicNFP_Types/NFP_Natural nbFlipFlops::BasicNFP_Types/NFP_Natural (blocksRAM::MARTE_DesignModel/HRM/HwLogical/HwMemory/HwRAM)+ ;
InteractionUse ::= PartDecomposition ;
 InteractionUse ::= refersTo::Interaction (actualGate::Gate)+ (argument::Action)+ ;
CacheStructure ::= nsSets::BasicNFP_Types/NFP_Natural blockSize::BasicNFP_Types/NFP_Natural associativity::BasicNFP_Types/NFP_Natural ;
TemplateParameter ::= signature::TemplateSignature parameteredElement::ParameterableElement ownedParameteredElement::ParameterableElement default::ParameterableElement ownedDefault::ParameterableElement ;
InterfaceRealization ::= contract::Interface implementingClassifier::BehavioredClassifier ;
ObjectNodeOrderingKind ::= (unordered::ε) | (ordered::ε) | (LIFO::ε) | (FIFO::ε) ;
MutualExclusionResource ::= protectKind::GRM_BasicTypes/ProtectProtocolKind ceiling::MARTE_PrimitivesTypes/Integer otherProtectProtocol::MARTE_PrimitivesTypes/String ;
GeneralizationSet ::= isCovering::MARTE_PrimitivesTypes/Boolean isDisjoint::MARTE_PrimitivesTypes/Boolean powertype::Classifier (generalization::Generalization)+ ;
MessageSort ::= (synchCall::ε) | (asynchCall::ε) | (asynchSignal::ε) | (createMessage::ε) | (deleteMessage::ε) | (reply::ε) ;
DataType ::= Enumeration ;
 DataType ::= (ownedAttribute::Property)+ (ownedOperation::Operation)+ ;
HwProcessor ::= architecture::BasicNFP_Types/NFP_DataSize mips::BasicNFP_Types/NFP_Natural ipc::BasicNFP_Types/NFP_Real nbCores::BasicNFP_Types/NFP_Natural nbPipelines::BasicNFP_Types/NFP_Natural nbStages::BasicNFP_Types/NFP_Natural nbALUs::BasicNFP_Types/NFP_Natural nbFBUs::BasicNFP_Types/NFP_Natural (ownedISAs::MARTE_DesignModel/HRM/HwLogical/HwComputing/HwISA)+ (predictors::MARTE_DesignModel/HRM/HwLogical/HwComputing/HwBranchPredictor)+ (caches::MARTE_DesignModel/HRM/HwLogical/HwMemory/HWCache)+ (ownedMMUs::MARTE_DesignModel/HRM/HwLogical/HwStorageManager/HwMMU)+ ;
PLD_Class ::= (SymetricalArray::ε) | (RowBased::ε) | (SeaOfGates::ε) | (HierarchicalPLD::ε) | (Other::ε) | (Undef::ε) ;
HwROM ::= type::MARTE_DesignModel/HRM/HwLogical/HwMemory/ROM_Type organization::MARTE_DesignModel/HRM/HwLogical/HwMemory/MemoryOrganization ;
HwClock ::= frequency::BasicNFP_Types/NFP_Frequency ;
DeploymentSpecification ::= deploymentLocation::MARTE_PrimitivesTypes/String executionLocation::MARTE_PrimitivesTypes/String deployment::Deployment ;
ClockResource ::= ε ;
ExceptionHandler ::= handlerBody::ExecutableNode exceptionInput::ObjectNode (exceptionType::Classifier)+ protectedNode::ExecutableNode ;
MessageKind ::= (complete::ε) | (lost::ε) | (found::ε) | (unknown::ε) ;
ParameterSet ::= (parameter::Parameter)+ (condition::Constraint)+ ;
BehavioralFeature ::= Reception ;
 BehavioralFeature ::= Operation ;
HwCommunicationResource ::= ε ;
AperiodicPattern ::= distribution::BasicNFP_Types/NFP_CommonType ;
ResourceUsage ::= (execTime::BasicNFP_Types/NFP_Duration)+ (msgSize::BasicNFP_Types/NFP_DataSize)+ (allocatedMemory::BasicNFP_Types/NFP_DataSize)+ (usedMemory::BasicNFP_Types/NFP_DataSize)+ (powerPeak::BasicNFP_Types/NFP_Power)+ (energy::BasicNFP_Types/NFP_Energy)+ base_NamedElement::NamedElement (usedResources::MARTE_Foundations/GRM/Resource)+ (subUsage::MARTE_Foundations/GRM/ResourceUsage)+ ;
ComponentKind ::= (Card::ε) | (Channel::ε) | (Chip::ε) | (Port::ε) | (Unit::ε) | (Other::ε) | (Undef::ε) ;
ExecutionPlatformAllocationEnd ::= (allocatedFrom::MARTE_Foundations/Alloc/ApplicationAllocationEnd)+ ;
Env_Condition ::= type::MARTE_DesignModel/HRM/HwPhysical/HwLayout/ConditionType status::MARTE_DesignModel/HRM/HwPhysical/HwLayout/CompnentState description::BasicNFP_Types/NFP_String range::MARTE_DataTypes/Realnterval ;
BFeatureKind ::= (in::ε) | (out::ε) | (inout::ε) | (required::ε) | (provided::ε) | (reqpro::ε) ;
ProfileApplication ::= appliedProfile::Profile isStrict::MARTE_PrimitivesTypes/Boolean applyingPackage::Package ;
ConcurrentAccessProtocolKind ::= (PIP::ε) | (PCP::ε) | (NoPreemption::ε) | (Undef::ε) | (Other::ε) ;
NFP_Real ::= value::MARTE_PrimitivesTypes/Real ;
IntegerInterval ::= bound::MARTE_PrimitivesTypes/Integer ;
GaWorkloadBehavior ::= (behavior::MARTE_AnalysisModel/GQAM/GaScenario)+ (demand::MARTE_AnalysisModel/GQAM/GaWorkloadEvent)+ base_NamedElement::NamedElement ;
PLD_Technology ::= (SRAM::ε) | (Antifuse::ε) | (Flash::ε) | (Other::ε) | (Undef::ε) ;
Repl_Policy ::= (LRU::ε) | (NFU::ε) | (FIFO::ε) | (Random::ε) | (Other::ε) | (Undef::ε) ;
ObjectNode ::= Pin ;
IntegerVector ::= (vectorElem::MARTE_PrimitivesTypes/Integer)+ ;
EnergyUnitKind ::= (J::ε) | (KJ::ε) | (Wh::ε) | (KWh::ε) | (mWh::ε) ;
--------------------metamodels::METAH.bgf--------------------
METAHEntry ::= Package ;
 METAHEntry ::= PackageImplementation ;
 METAHEntry ::= ProcessDeclaration ;
 METAHEntry ::= ProcessImplementation ;
 METAHEntry ::= Connection ;
 METAHEntry ::= MacroDeclaration ;
 METAHEntry ::= MacroImplementation ;
METAHFile ::= (entries::METAHEntry)+ ;
MacroImplementation ::= macroImpName::String declaration::String (process::Process)+ (connections::Connection)+ ;
MacroDeclaration ::= name::String (ports::Port)+ ;
ProcessAttribute ::= attName::String attValue::Integer attValueType::String ;
ProcessDeclaration ::= procDecName::String (ports::Port)+ ;
PackageImplementation ::= implementationName::String implements::String (attributes::Attribute)+ ;
ProcessImplementation ::= procImpName::String declaration::String (processAttributes::ProcessAttribute)+ ;
--------------------metamodels::MICRO.owl.bgf--------------------
Email_Template ::= define::Event ;
Proceedings_Publisher ::= (publisherOf::Thing)+ technicallyOrganises::Thing ;
start_date_of_camera-ready_submission ::= ε ;
Conference_proceedings ::= has_an_ISBN::String has_a_publisher::Publisher has_a_volume::String ;
Invited_Speaker ::= ε ;
Science_Worker ::= hasMail::String worksForCompany::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item ;
TraditionalLecture ::= hasAcronym::String ;
Welcome_address ::= ε ;
RadioCommunicationsTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Transport_vehicle ::= Car ;
 Transport_vehicle ::= Taxi ;
 Transport_vehicle ::= Shuttle_bus ;
 Transport_vehicle ::= Van ;
 Transport_vehicle ::= Car | Taxi | Shuttle_bus | Van ;
AccommodationPlace ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
Refusing_manuscript ::= ε ;
SignalProcessingTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
TwoLevelConference ::= isOrganizedBy::OrganizingCommittee annualOrder::Integer takesPlace::Location hasConferenceMember::ConferenceMember paperAssignmentFinalizedBy::Administrator reviewCriteriaEnteredBy::Administrator paperAssignmentToolsRunBy::Administrator virtualMeetingEnabledBy::Administrator hardcopyMailingManifestsPrintedBy::Administrator detailsEnteredBy::Administrator reviewerBiddingStartedBy::Administrator date::date reviewsPerPaper::Integer logoURL::anyURI acceptsHardcopySubmissions::Boolean siteURL::anyURI is_in_phase::phase_of_conference has_program::program hasMember::Person hasName::String endDate::dateTime paperDueOn::dateTime registrationDueOn::dateTime manuscriptDueOn::dateTime startDate::dateTime hasCountry::Country ;
Regular_contribution ::= Extended_abstract ;
pc_meeting ::= conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator starts_on::String ends_on::String has_startdate::dateTime has_enddate::dateTime (eventOnList::Thing)+ partOfEvent::Event hasEvent::Event (organisedBy::Thing)+ heldIn::Location ;
SessionChair ::= hasMail::String worksForCompany::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item ;
SteeringCommittee ::= organizes::Conference ;
Working_event ::= hasTopic::Topic hasAdministrativeEvent::Administrative_event ;
summary_of_reviews ::= is_created_in::activity ;
Co-author ::= co-writePaper::Paper ;
Short_paper ::= writtenBy::Author dealsWith::Topic remark::String abstract::String contactEmail::String hasKeyword::String hasTitle::String ;
Late_paid_applicant ::= ε ;
Nonauthor_registration_fee ::= ε ;
GovernmentOrganization ::= isProviderOf::Sponsorship ;
Tutorial_Abstract ::= part_of_article::article (is_the_1th_part_of::Thing)+ ;
Main_office ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
CallForManuscripts ::= forEvent::AcademicEvent (isInitiatedBy::Person)+ hasSubmissionInstructions::String hasSubmissionDeadline::dateTime ;
MealMenu ::= isMenuOf::MealEvent ;
Workshop_Session ::= ε ;
Paper_Author ::= hasMail::String worksForCompany::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item ;
Registeered_applicant ::= Paid_applicant ;
Late-Registered_Participant ::= ε ;
Conference_Proceedings ::= ε ;
group_email ::= goes_through::activity is_sent_to::human is_created_in::activity structure_created_by::human has_author::human gives_classification::classification article_written_by::Author has_reviewer::Reviewer has_abstract::Abstract ;
Full_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
OutsideReferee ::= hasMail::String worksForCompany::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item ;
Assigned_Paper ::= Evaluated_Paper ;
 Assigned_Paper ::= hasReviewer::Possible_Reviewer ;
Shuttle_bus ::= ε ;
upper_tier_reviewing_process ::= is_performed_by::human ;
OperatingTopicsystems ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Social_program ::= Dinner_banquet ;
GeneralCoChair ::= organizes::Conference ;
Conference_state ::= ε ;
ComputerNetworksEnterpriseTopic ::= ε ;
PaperSubmissionChair ::= organizes::Conference ;
Chair_PC ::= hasMail::String worksForCompany::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item ;
Early_paid_applicant ::= ε ;
Active_conference_participant ::= gives_presentations::Presentation ;
Short_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
SatelliteAndSpaceCommunicationsTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
WorkShop ::= is_held_before::Time is_held_in::Thing is_held_after::Time is_dated_on::dateTime hasTopic::Topic expectedAttendance::Integer isPartOf::Conference (has_result::Thing)+ sent_by::Person ;
Receiving_manuscript ::= ε ;
Senior_Reviewer_URL ::= ε ;
Plenary_lecture ::= hasAcronym::String ;
date_of_notification ::= ε ;
Departure_tax ::= ε ;
Conference_applicant ::= Registeered_applicant ;
Time_zone ::= ε ;
Organizing_committee ::= was_an_organizing_committee_of::Conference_volume ;
Hotel_presenter ::= ε ;
Registration_of_participants_event ::= follows::Administrative_event parallel_with::Administrative_event ;
MobileComputingTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Session_chair ::= ε ;
Committee_member ::= Co-chair ;
 Committee_member ::= Chair ;
 Committee_member ::= was_a_member_of::Committee ;
Deadline_hotel_reservation ::= done_till::date ;
ConferenceSession ::= ε ;
SubjectArea ::= ε ;
Camera_Ready_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
NGO ::= isProviderOf::Sponsorship ;
Dinner_banquet ::= ε ;
CommunicationTheoryTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
AcademicEvent ::= TalkEvent ;
 AcademicEvent ::= OrganizationalMeeting ;
 AcademicEvent ::= PaperPresentation ;
 AcademicEvent ::= hasCall::Call ;
date_of_conference ::= start_date_of_conference ;
 date_of_conference ::= end_date_of_conference ;
 date_of_conference ::= start_date_of_conference | end_date_of_conference ;
Mailing_list ::= recieved_by::User used_by::Person submited__by::User (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document ;
CallForPapers ::= forEvent::AcademicEvent (isInitiatedBy::Person)+ hasSubmissionInstructions::String hasSubmissionDeadline::dateTime ;
CommunicationsTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
SecurityTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
DiningPlace ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
Regular_author ::= Contribution_1th-author ;
 Regular_author ::= Contribution_co-author ;
 Regular_author ::= Contribution_1th-author | Contribution_co-author ;
PaperAbstract ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
Rejection_Email ::= ε ;
Admin_Role ::= assigned_by::Administrator ;
Poster_Session ::= ε ;
ComputerArchitectureTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
WorkshopTutorialChair ::= organizes::Conference ;
OrganizingCommittee ::= ProgramCoChair ;
 OrganizingCommittee ::= PublicationsChair ;
 OrganizingCommittee ::= WorkshopTutorialChair ;
 OrganizingCommittee ::= RegistrationChair ;
 OrganizingCommittee ::= StudentAdvocate ;
 OrganizingCommittee ::= FinanceChair ;
 OrganizingCommittee ::= PaperSubmissionChair ;
 OrganizingCommittee ::= PublicityWebChair ;
 OrganizingCommittee ::= SteeringCommittee ;
 OrganizingCommittee ::= GeneralCoChair ;
 OrganizingCommittee ::= organizes::Conference ;
OrganizationalMeeting ::= hasCall::Call ;
Session_Chair ::= ε ;
PersonalReviewHistory ::= isReviewHistoryOf::Reviewer ;
Group_Email ::= ε ;
Regular_Program_Committee_member ::= ε ;
conference_setup ::= sets_member::human is_made_by::human includes_topic::Topic sets_date::date sets_URL::URL ;
Member_PC ::= expertOn::Topic reviewes::Contribution ;
end_date_of_conference ::= ε ;
Double_hotel_room ::= ε ;
AccpetIfRoomRating ::= ε ;
Web_Site ::= recieved_by::User used_by::Person submited__by::User (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document ;
Help_Request ::= Misc ;
 Help_Request ::= Feature_Request ;
 Help_Request ::= Assistance ;
 Help_Request ::= Misc | Feature_Request | Assistance ;
Sponsor_city ::= ε ;
RejectedPaper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
ParallelAndDistributedComputingTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
One_day_presenter ::= ε ;
Research_Topic ::= define::Event ;
 Research_Topic ::= topicCoveredBy::Thing ;
SC_Member ::= ε ;
Accepted_contribution ::= Camera_ready_contribution ;
OC_Member ::= OC_Chair ;
Reviewing_event ::= follows::Administrative_event parallel_with::Administrative_event ;
MultimediaTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
CryptographyTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
ReviewQuestion ::= TextualReviewQuestion ;
 ReviewQuestion ::= NumericalReviewQuestion ;
 ReviewQuestion ::= TextualReviewQuestion | NumericalReviewQuestion ;
Conference_volume ::= has_parts::Conference_part has_workshops::Workshop has_tracks::Track has_tutorials::Tutorial has_a_commtitee::Committee has_a_steering_committee::Steering_committee has_an_organizing_committee::Organizing_committee has_important_dates::Important_dates has_contributions::Conference_contribution has_a_location::String has_a_program_committee::Program_committee ;
camera-ready_submission_date ::= start_date_of_camera-ready_submission ;
 camera-ready_submission_date ::= end_date_of_camera-ready_submission ;
 camera-ready_submission_date ::= start_date_of_camera-ready_submission | end_date_of_camera-ready_submission ;
start_date_of_full_paper_submission ::= ε ;
Conference_days ::= One_conference_day ;
ProgramCommittee ::= hasProgramCommitteeMember::ProgramCommitteeMember ;
Registation_deadline ::= done_till::date ;
Head_Role ::= assigned_by::Administrator ;
ProgramCommitteeMember ::= ProgramCommitteeChair ;
 ProgramCommitteeMember ::= memberOfProgramCommittee::ProgramCommittee maxPapers::Integer addedBy::Administrator ;
Invited_Talk_Abstract ::= part_of_article::article (is_the_1th_part_of::Thing)+ ;
Final_manuscript ::= ε ;
Paid_applicant ::= Late_paid_applicant ;
 Paid_applicant ::= Early_paid_applicant ;
 Paid_applicant ::= Late_paid_applicant | Early_paid_applicant ;
end_date_of_abstract_submission ::= ε ;
RegistrationChair ::= organizes::Conference ;
Worker_non_speaker ::= ε ;
Invitation_letter ::= recieved_by::User used_by::Person submited__by::User (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document ;
Book_proceeding ::= ε ;
Conference_announcement ::= has_authors::Person has_a_date_of_issue::date ;
Demo_Chair ::= ε ;
Conference_Trip ::= ε ;
WithdrawnPaper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
Program_Committee_Chair ::= is_author_of::article performs_activity::activity is_employed_in::institute has_topic_of_interest::Topic supervises::activity e-mail::String last_name::String first_name::String ;
Social_event ::= Trip ;
 Social_event ::= Banquet ;
 Social_event ::= Reception ;
 Social_event ::= Trip | Banquet | Reception ;
Program_committee ::= was_a_program_committee_of::Conference_volume ;
Contribution_1th-author ::= ε ;
paper_assignment ::= Manual_Paper_Assignment ;
 paper_assignment ::= Automatic_Paper_Assignment ;
 paper_assignment ::= assign_paper::Program_Committee_member is_performed_by::human ;
Conference_hall ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
QualitatvieLecture ::= hasAcronym::String ;
PC_Chair ::= ε ;
NumericalReviewQuestion ::= ε ;
Payment_document ::= Cheque ;
 Payment_document ::= Bank_transfer ;
 Payment_document ::= Cheque | Bank_transfer ;
Automatic_Paper_Assignment ::= (automatically_assign_paper::Program_Committee_member)+ ;
Undecided_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
ComputerNetworksSecurityTopic ::= ε ;
URL ::= Event_URL ;
 URL ::= Senior_Reviewer_URL ;
 URL ::= Chair_URL ;
 URL ::= Contact_Person_URL ;
 URL ::= Regular_Reviewer_URL ;
 URL ::= Event_URL | Senior_Reviewer_URL | Chair_URL | Contact_Person_URL | Regular_Reviewer_URL ;
Steering_committee ::= was_a_steering_committee_of::Conference_volume ;
AuthorNotReviewer ::= submitPaper::Paper writePaper::Paper writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing ;
review_form ::= is_created_in::activity ;
Review_Form ::= Preview ;
 Review_Form ::= Review_Form_Setup ;
 Review_Form ::= Preview | Review_Form_Setup ;
Deadline_for_notification_of_acceptance ::= done_till::date ;
notification_email ::= acceptance_notification_email ;
 notification_email ::= rejection_notification_email ;
 notification_email ::= acceptance_notification_email | rejection_notification_email ;
Notification_Email ::= ε ;
PersonalPublicationHistory ::= ε ;
Social_Event ::= Conference_Trip ;
 Social_Event ::= Conference_Banquet ;
 Social_Event ::= Conference_Trip | Conference_Banquet ;
Senior_Program_Committee_member ::= supervises::activity ;
ActivitySubmissionForm ::= TutorialProposal ;
 ActivitySubmissionForm ::= WorksopProposal ;
 ActivitySubmissionForm ::= Paper ;
 ActivitySubmissionForm ::= isSubmittedBy::Author hasAuthor::Author submissionDeadline::dateTime ;
AssociatedChair ::= memberOfConference::Conference ;
rejection_notification_email ::= ε ;
Reviewed_contribution ::= Accepted_contribution ;
 Reviewed_contribution ::= Rejected_contribution ;
 Reviewed_contribution ::= has_a_review::Review ;
ReviewRating ::= WeekRejectRating ;
 ReviewRating ::= AcceptRating ;
 ReviewRating ::= AccpetIfRoomRating ;
 ReviewRating ::= RejectRating ;
 ReviewRating ::= WeekRejectRating | AcceptRating | AccpetIfRoomRating | RejectRating ;
WirelessCommunicationsTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
TextualReviewQuestion ::= ε ;
PowerPoint_presentation ::= is_given_by::Active_conference_participant ;
TalkEvent ::= ClosingTalk ;
 TalkEvent ::= WelcomeTalk ;
 TalkEvent ::= ClosingTalk | WelcomeTalk ;
FinanceChair ::= organizes::Conference ;
CADTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Trip_city ::= ε ;
Contact_Person_URL ::= ε ;
Event_Creation ::= is_held_before::Time is_held_in::Thing is_held_after::Time is_dated_on::dateTime hasTopic::Topic expectedAttendance::Integer isPartOf::Conference (has_result::Thing)+ sent_by::Person ;
Registration_fee ::= Author_attendee_book_registration_fee ;
 Registration_fee ::= Nonmember_registration_fee ;
 Registration_fee ::= Nonauthor_registration_fee ;
 Registration_fee ::= Memeber_registration_fee ;
 Registration_fee ::= Student_registration_fee ;
 Registration_fee ::= Author_attendee_cd_registration_fee ;
 Registration_fee ::= Author_attendee_book_registration_fee | Nonmember_registration_fee | Nonauthor_registration_fee | Memeber_registration_fee | Student_registration_fee | Author_attendee_cd_registration_fee ;
PublicationsChair ::= organizes::Conference ;
Speaker_lecture ::= ε ;
Technic_activity ::= ε ;
Conference_part ::= Track ;
 Conference_part ::= Tutorial ;
 Conference_part ::= has_a_track-workshop-tutorial_topic::Topic is_part_of_conference_volumes::Conference_volume has_a_track-workshop-tutorial_chair::Track-workshop_chair ;
ComputerNetworksSensorTopic ::= ε ;
IASTED_non_member ::= ε ;
Possible_Reviewer ::= PC_Member ;
 Possible_Reviewer ::= reviewerOfPaper::Paper ;
One_conference_day ::= ε ;
Overhead_projector ::= ε ;
SlideSet ::= recieved_by::User used_by::Person submited__by::User (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document ;
MeetingRoomPlace ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
Submissions_deadline ::= done_till::date ;
Neutral_Review ::= writtenBy::Reviewer reviews::Reviewed_contribution gives_classification::classification is_created_in::activity review_written_by::Reviewer reviewOfPaper::Paper reviewWrittenBy::Possible_Reviewer ;
ExternalReviewer ::= assignedByReviewer::Reviewer ;
WelcomeTalk ::= ε ;
SocialEvent ::= Excursion ;
 SocialEvent ::= Reception ;
 SocialEvent ::= Excursion | Reception ;
Sponsor_state ::= ε ;
ContactInformation ::= hasCity::String hasStreet::String hasPostalCode::String hasPhone::String ;
Submitted_Paper ::= Assigned_Paper ;
Initial_manuscipt ::= ε ;
Author_cd_proceedings_included ::= submitPaper::Paper writePaper::Paper writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing ;
FreeTimeBreak ::= ε ;
Audiovisual_equipment ::= Video_cassette_player ;
 Audiovisual_equipment ::= LCD_projector ;
 Audiovisual_equipment ::= Computer ;
 Audiovisual_equipment ::= Overhead_projector ;
 Audiovisual_equipment ::= Video_cassette_player | LCD_projector | Computer | Overhead_projector ;
Session_room ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
Scientific_Event ::= Individual_Presentation ;
 Scientific_Event ::= Workshop ;
 Scientific_Event ::= Conference ;
 Scientific_Event ::= Track ;
 Scientific_Event ::= Session ;
Record_of_attendance ::= recieved_by::User used_by::Person submited__by::User (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document ;
Individual_Presentation ::= Invited_Talk ;
 Individual_Presentation ::= Contributed_Talk ;
 Individual_Presentation ::= (presentationOfPaper::Document)+ ;
PerformanceTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Reviewing_results_event ::= follows::Administrative_event parallel_with::Administrative_event ;
BreakEvent ::= CoffeeBreak ;
 BreakEvent ::= FreeTimeBreak ;
 BreakEvent ::= MealBreak ;
 BreakEvent ::= CoffeeBreak | FreeTimeBreak | MealBreak ;
Evaluated_Paper ::= Accepted_Paper ;
 Evaluated_Paper ::= Rejected_Paper ;
 Evaluated_Paper ::= hasReview::Review ;
AcademiaOrganization ::= isProviderOf::Sponsorship ;
ConferenceMember ::= ConferenceChair ;
 ConferenceMember ::= AssociatedChair ;
 ConferenceMember ::= ProgramCommitteeMember ;
 ConferenceMember ::= Chairman ;
 ConferenceMember ::= memberOfConference::Conference ;
MedicineTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Accepted_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
 Accepted_Paper ::= hasReview::Review ;
Submitted_contribution ::= Reviewed_contribution ;
 Submitted_contribution ::= has_a_review_expertise::Review_expertise ;
Agency_Staff_Member ::= hasMail::String worksForCompany::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item ;
Conference_hotel ::= ε ;
Track-workshop_chair ::= was_a_track-workshop_chair_of::Conference_part ;
Coffee_break ::= ε ;
RatedPapers ::= hasRating::ReviewRating ;
Regular_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
ConferenceChair ::= memberOfConference::Conference ;
 ConferenceChair ::= hasMail::String worksForCompany::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item ;
EEnum ::= (Compilers::ε) | (Microarchitecture::ε) | (Systems::ε) | (ForwardLookingIdea::ε) | (male::ε) | (female::ε) | (high::ε) | (medium::ε) | (low::ε) | (very high::ε) ;
Author_attendee_book_registration_fee ::= ε ;
AcceptRating ::= ε ;
Camera_Ready_event ::= follows::Administrative_event parallel_with::Administrative_event ;
IASTED_member ::= ε ;
ClosingTalk ::= ε ;
MealBreak ::= ε ;
Technical_commitee ::= ε ;
reviewing_proces ::= lower_tier_reviewing_process ;
 reviewing_proces ::= upper_tier_reviewing_process ;
 reviewing_proces ::= lower_tier_reviewing_process | upper_tier_reviewing_process ;
Manual_Paper_Assignment ::= (manually_assign_paper::Program_Committee_member)+ ;
WorksopProposal ::= isSubmittedBy::Author hasAuthor::Author submissionDeadline::dateTime ;
Conference_Hiker ::= ε ;
Workshop_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
Industrial_Session ::= ε ;
Conference_fees ::= ε ;
ConferenceDinner ::= hasMenu::MealMenu ;
Meta-Reviewer ::= assignedByAdministrator::Administrator adjustBid::Bid readPaper::Paper hasBeenAssigned::Paper writeReview::Review assignExternalReviewer::ExternalReviewer invites_co-reviewers::Reviewer invited_by::Reviewer (has_a_review_reference_or_expertise::Thing)+ writes_review::Review hasReviewHistory::PersonalReviewHistory executes::DoubleBlindReview ;
Activity_before_conference ::= Renting ;
 Activity_before_conference ::= Research ;
 Activity_before_conference ::= Refusing_manuscript ;
 Activity_before_conference ::= Accepting_manuscript ;
 Activity_before_conference ::= Receiving_manuscript ;
 Activity_before_conference ::= Renting | Research | Refusing_manuscript | Accepting_manuscript | Receiving_manuscript ;
ProgramCommitteeChair ::= endReview::Review ;
Call_for_participation ::= has_authors::Person has_a_date_of_issue::date ;
Conference_airport ::= ε ;
Passive_conference_participant ::= ε ;
Presenter_city ::= ε ;
TPCMember ::= hasMail::String worksForCompany::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item ;
Early-Registered_Participant ::= ε ;
phase_of_conference ::= ε ;
Video_cassette_player ::= ε ;
ConferenceEvent ::= NonAcademicEvent ;
 ConferenceEvent ::= AcademicEvent ;
 ConferenceEvent ::= hasAttendee::Person hasLocation::Place hasProgramme::Programme hasEndDateTime::dateTime hasStartDateTime::dateTime ;
Conference_document ::= Conference_contribution ;
 Conference_document ::= Information_for_participants ;
 Conference_document ::= Call_for_paper ;
 Conference_document ::= Conference_announcement ;
 Conference_document ::= Call_for_participation ;
 Conference_document ::= Conference_www ;
 Conference_document ::= has_authors::Person has_a_date_of_issue::date ;
Single_hotel_room ::= ε ;
Contribution_co-author ::= ε ;
Introduction_of_speaker ::= ε ;
Multi-author_Volume ::= Proceedings ;
Nonmember_registration_fee ::= ε ;
ComputerNetworksMeasurementsTopic ::= ε ;
Coctail_reception ::= ε ;
ProgramCoChair ::= organizes::Conference ;
Chair_URL ::= ε ;
Regular_Session ::= ε ;
Conference_activity ::= Social_program ;
 Conference_activity ::= Technic_activity ;
 Conference_activity ::= Registration ;
 Conference_activity ::= Introduction ;
 Conference_activity ::= Welcome_address ;
 Conference_activity ::= Coffee_break ;
 Conference_activity ::= Coctail_reception ;
 Conference_activity ::= Presentation ;
 Conference_activity ::= Lecture ;
 Conference_activity ::= Social_program | Technic_activity | Registration | Introduction | Welcome_address | Coffee_break | Coctail_reception ;
start_date_of_conference ::= ε ;
Conference_participant ::= Passive_conference_participant ;
 Conference_participant ::= Active_conference_participant ;
ComputerNetworksTopic ::= ComputerNetworksEnterpriseTopic ;
 ComputerNetworksTopic ::= ComputerNetworksSwitchingTopic ;
 ComputerNetworksTopic ::= ComputerNetworksSensorTopic ;
 ComputerNetworksTopic ::= ComputerNetworksSecurityTopic ;
 ComputerNetworksTopic ::= ComputerNetworksOpticalTopic ;
 ComputerNetworksTopic ::= ComputerNetworksMeasurementsTopic ;
 ComputerNetworksTopic ::= ComputerNetworksManagementTopic ;
 ComputerNetworksTopic ::= ComputerNetworksAapplicationsTopic ;
 ComputerNetworksTopic ::= ComputerNetworksEnterpriseTopic | ComputerNetworksSwitchingTopic | ComputerNetworksSensorTopic | ComputerNetworksSecurityTopic | ComputerNetworksOpticalTopic | ComputerNetworksMeasurementsTopic | ComputerNetworksManagementTopic | ComputerNetworksAapplicationsTopic ;
Full_day_tour ::= ε ;
LCD_projector ::= ε ;
Author_Role ::= assigned_by::Administrator ;
Presenter_house ::= ε ;
Conference_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
bidding_of_reviewer ::= is_performed_by::human ;
Cd_proceening ::= ε ;
StudentAdvocate ::= organizes::Conference ;
Hotel_room ::= Single_hotel_room ;
 Hotel_room ::= Double_hotel_room ;
 Hotel_room ::= Single_hotel_room | Double_hotel_room ;
PaperPresentation ::= relatedToPaper::AcceptedPaper ;
Presenter_university ::= ε ;
Student_registration_fee ::= ε ;
Tutorial_Chair ::= ε ;
abstract_submission_date ::= end_date_of_abstract_submission ;
 abstract_submission_date ::= start_date_of_abstract_submission ;
 abstract_submission_date ::= end_date_of_abstract_submission | start_date_of_abstract_submission ;
Trip_day ::= ε ;
Negative_Review ::= writtenBy::Reviewer reviews::Reviewed_contribution gives_classification::classification is_created_in::activity review_written_by::Reviewer reviewOfPaper::Paper reviewWrittenBy::Possible_Reviewer ;
abstract_of_paper ::= goes_through::activity is_sent_to::human is_created_in::activity structure_created_by::human has_author::human gives_classification::classification article_written_by::Author has_reviewer::Reviewer has_abstract::Abstract ;
Approval_Email ::= confirm::Event ;
Hotel_registration_form ::= ε ;
AntennasTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
MicroelectronicsTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
lower_tier_reviewing_process ::= ε ;
ComputerNetworksOpticalTopic ::= ε ;
Contributed_Talk ::= (presentationOfPaper::Document)+ ;
Contact_Person ::= is_author_of::article performs_activity::activity is_employed_in::institute has_topic_of_interest::Topic supervises::activity e-mail::String last_name::String first_name::String ;
TutorialProposal ::= isSubmittedBy::Author hasAuthor::Author submissionDeadline::dateTime ;
Conference_Participant ::= Demo_Chair ;
 Conference_Participant ::= OC_Member ;
 Conference_Participant ::= Early-Registered_Participant ;
 Conference_Participant ::= Late-Registered_Participant ;
 Conference_Participant ::= Tutorial_Chair ;
 Conference_Participant ::= PC_Chair ;
 Conference_Participant ::= Workshop_Chair ;
 Conference_Participant ::= Presenter ;
 Conference_Participant ::= Session_Chair ;
 Conference_Participant ::= Demo_Chair | OC_Member | Early-Registered_Participant | Late-Registered_Participant ;
Conference_city ::= ε ;
Accepting_manuscript ::= ε ;
Rejected_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
 Rejected_Paper ::= hasReview::Review ;
Event_Approval ::= is_held_before::Time is_held_in::Thing is_held_after::Time is_dated_on::dateTime hasTopic::Topic expectedAttendance::Integer isPartOf::Conference (has_result::Thing)+ sent_by::Person ;
Invited_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
PC_Member ::= SC_Member ;
 PC_Member ::= Session_Chair ;
 PC_Member ::= Tutorial_Chair ;
 PC_Member ::= PC_Chair ;
 PC_Member ::= Workshop_Chair ;
Plenary_lecture_speaker ::= submitPaper::Paper writePaper::Paper writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing ;
Academic_Institution ::= Research_Institute ;
 Academic_Institution ::= University ;
 Academic_Institution ::= scientificallyOrganises::Academic_Institution ;
Author_book_proceedings_included ::= submitPaper::Paper writePaper::Paper writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing ;
Value_added_tax ::= ε ;
Video_presentation ::= is_given_by::Active_conference_participant ;
submission_process ::= is_performed_by::human ;
Camera_ready_manuscript_deadline ::= done_till::date ;
OC_Chair ::= ε ;
MealEvent ::= ConferenceDinner ;
 MealEvent ::= hasMenu::MealMenu ;
PublicityWebChair ::= organizes::Conference ;
Credit_card ::= ε ;
end_date_of_camera-ready_submission ::= ε ;
start_date_of_abstract_submission ::= ε ;
CoffeeBreak ::= ε ;
Conference_Session ::= Industrial_Session ;
Research_Institute ::= scientificallyOrganises::Academic_Institution ;
Reviewer_Role ::= assigned_by::Administrator ;
Activity_after_conference ::= Departure ;
 Activity_after_conference ::= Full_day_tour ;
 Activity_after_conference ::= Departure | Full_day_tour ;
Bank_transfer ::= ε ;
Non_speaker ::= Worker_non_speaker ;
 Non_speaker ::= Student_non_speaker ;
 Non_speaker ::= Worker_non_speaker | Student_non_speaker ;
Committe_Role ::= assigned_by::Administrator ;
Registration_form ::= ε ;
Student_non_speaker ::= ε ;
Administrative_event ::= Reviewing_results_event ;
 Administrative_event ::= Reviewing_event ;
 Administrative_event ::= Registration_of_participants_event ;
 Administrative_event ::= Submission_event ;
 Administrative_event ::= Camera_Ready_event ;
 Administrative_event ::= follows::Administrative_event parallel_with::Administrative_event ;
Review_Form_Setup ::= ε ;
Brief_introduction_for_Session_chair ::= recieved_by::User used_by::Person submited__by::User (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document ;
Camera_ready_contribution ::= ε ;
Positive_Review ::= writtenBy::Reviewer reviews::Reviewed_contribution gives_classification::classification is_created_in::activity review_written_by::Reviewer reviewOfPaper::Paper reviewWrittenBy::Possible_Reviewer ;
PublishedPaper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
full_paper_submission_date ::= start_date_of_full_paper_submission ;
 full_paper_submission_date ::= end_date_of_full_paper_submission ;
 full_paper_submission_date ::= start_date_of_full_paper_submission | end_date_of_full_paper_submission ;
DoubleBlindReview ::= isExecutedBy::Reviewer ;
ReviewForm ::= ε ;
Hotel_fee ::= ε ;
Sponsor_company_house ::= ε ;
Student_lecturer ::= ε ;
Written_contribution ::= Submitted_contribution ;
 Written_contribution ::= Regular_contribution ;
 Written_contribution ::= Submitted_contribution | Regular_contribution ;
Conference_contributor ::= Regular_author ;
 Conference_contributor ::= Invited_speaker ;
 Conference_contributor ::= Active_conference_participant ;
 Conference_contributor ::= Regular_author | Invited_speaker ;
Event_Setup ::= Paper_Typologies ;
 Event_Setup ::= Review_Form ;
 Event_Setup ::= Submission_Template ;
 Event_Setup ::= Event_Tracks ;
 Event_Setup ::= Research_Topic ;
 Event_Setup ::= Email_Template ;
 Event_Setup ::= define::Event ;
CommitteeMember ::= isMemberOf::Conference ;
Conference_building ::= ε ;
Corresponding_Author ::= submitPaper::Paper writePaper::Paper writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing ;
PendingPaper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
PowerlineTransmissionTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
IndustryOrganization ::= isProviderOf::Sponsorship ;
TestOnlyTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
WeekRejectRating ::= ε ;
Extended_abstract ::= Abstract ;
 Extended_abstract ::= ε ;
Industrial_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
Co-chair ::= was_a_committe_co-chair_of::Committee ;
Conference_Banquet ::= ε ;
Tutorial_speaker ::= submitPaper::Paper writePaper::Paper writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing ;
Organising_Agency ::= (publisherOf::Thing)+ technicallyOrganises::Thing ;
PaperFullVersion ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
RejectRating ::= ε ;
Demo_Session ::= ε ;
SingleLevelConference ::= isOrganizedBy::OrganizingCommittee annualOrder::Integer takesPlace::Location hasConferenceMember::ConferenceMember paperAssignmentFinalizedBy::Administrator reviewCriteriaEnteredBy::Administrator paperAssignmentToolsRunBy::Administrator virtualMeetingEnabledBy::Administrator hardcopyMailingManifestsPrintedBy::Administrator detailsEnteredBy::Administrator reviewerBiddingStartedBy::Administrator date::date reviewsPerPaper::Integer logoURL::anyURI acceptsHardcopySubmissions::Boolean siteURL::anyURI is_in_phase::phase_of_conference has_program::program hasMember::Person hasName::String endDate::dateTime paperDueOn::dateTime registrationDueOn::dateTime manuscriptDueOn::dateTime startDate::dateTime hasCountry::Country ;
Program_Committee_member ::= Senior_Program_Committee_member ;
 Program_Committee_member ::= Regular_Program_Committee_member ;
 Program_Committee_member ::= Senior_Program_Committee_member | Regular_Program_Committee_member ;
Worker_lecturer ::= ε ;
ConferenceVenuePlace ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
end_date_of_full_paper_submission ::= ε ;
Conference_contribution ::= Poster ;
 Conference_contribution ::= Written_contribution ;
 Conference_contribution ::= Presentation ;
 Conference_contribution ::= is_submitted_at::Conference_volume ;
Invited_Talk ::= (presentationOfPaper::Document)+ ;
Demo_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
CallForReviews ::= forEvent::AcademicEvent (isInitiatedBy::Person)+ hasSubmissionInstructions::String hasSubmissionDeadline::dateTime ;
acceptance_notification_email ::= ε ;
Author_attendee_cd_registration_fee ::= ε ;
ComputerNetworksManagementTopic ::= ε ;
Paper_Typologies ::= define::Event ;
Information_for_participants ::= has_authors::Person has_a_date_of_issue::date ;
Programme_Brochure ::= recieved_by::User used_by::Person submited__by::User (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document ;
NonAcademicEvent ::= MealEvent ;
 NonAcademicEvent ::= BreakEvent ;
 NonAcademicEvent ::= SocialEvent ;
 NonAcademicEvent ::= MealEvent | BreakEvent | SocialEvent ;
Fee_for_extra_trip ::= ε ;
ComputerNetworksSwitchingTopic ::= ε ;
Conference_restaurant ::= ε ;
Meta-Review ::= writtenBy::Reviewer reviews::Reviewed_contribution gives_classification::classification is_created_in::activity review_written_by::Reviewer reviewOfPaper::Paper reviewWrittenBy::Possible_Reviewer ;
Invited_speaker ::= ε ;
Presenter_state ::= ε ;
Poster_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
Regular_Reviewer_URL ::= ε ;
managing_of_conference_process ::= is_followed_by::activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human ;
Call_for_paper ::= has_authors::Person has_a_date_of_issue::date ;
PersonalHistory ::= PersonalPublicationHistory ;
 PersonalHistory ::= PersonalReviewHistory ;
 PersonalHistory ::= PersonalPublicationHistory | PersonalReviewHistory ;
Conference_www ::= has_a_URL::String ;
Rejected_contribution ::= has_a_review::Review ;
Invited_talk ::= is_given_by::Active_conference_participant ;
Workshop_Chair ::= ε ;
Event_Tracks ::= define::Event ;
Submission_Template ::= define::Event ;
Author_information_form ::= ε ;
ComputerNetworksAapplicationsTopic ::= ε ;
Review_expertise ::= has_a_submitted_contribution::Submitted_contribution has_an_expertise::EEnum ;
Event_URL ::= concerned::Event ;
Important_dates ::= is_an_abstract_submission_date::date is_a_full_paper_submission_date::date is_an_ending_date::date is_a_date_of_acceptance_announcement::date is_a_date_of_camera_ready_paper_submission::date is_a_starting_date::date belong_to_a_conference_volume::Conference_volume ;
Submission_event ::= follows::Administrative_event parallel_with::Administrative_event ;
ActivePaper ::= RatedPapers ;
 ActivePaper ::= hasRating::ReviewRating ;
Feature_Request ::= ε ;
AcceptedPaper ::= relatedToEvent::PaperPresentation ;
TravelGrant ::= providedBy::Organization hasCostCurrency::String hasCostAmount::Integer ;
Review_preference ::= (has_a_topic_or_a_submission_contribution::Thing)+ has_a_degree::Integer ;
Memeber_registration_fee ::= ε ;
--------------------metamodels::MSOfficeExcel_SpreadsheetMLBasicDef.bgf--------------------
TableElement ::= ColOrRowElement ;
 TableElement ::= Cell ;
CustomDocumentPropertiesCollection ::= cdp_workbook::Workbook (customDocumentProperties::CustomDocumentProperty)+ ;
DocumentPropertiesCollection ::= dp_workbook::Workbook title::String subject::String keywords::String description::String category::String author::String lastAuthor::String manager::String company::String hyperlinkBase::String revision::Integer presentationFormat::String guid::String appName::String version::VersionType totalTime::Integer lastPrinted::DateTimeType created::DateTimeType lastSaved::DateTimeType pages::Integer words::Integer characters::Integer charactersWithSpaces::Integer bytes::Integer lines::Integer paragraphs::Integer ;
DateTimeTypeValue ::= value::DateTimeType ;
SmartTagType ::= smartTagType_ste::SmartTagsCollection namespaceuri::String name::String url::String ;
ValueType ::= StringValue ;
 ValueType ::= NumberValue ;
 ValueType ::= DateTimeTypeValue ;
 ValueType ::= BooleanValue ;
 ValueType ::= ErrorValue ;
StyledElement ::= Table ;
 StyledElement ::= TableElement ;
ErrorValue ::= vt_data::Data ;
BooleanValue ::= value::Boolean ;
NumberValue ::= value::Double ;
ColOrRowElement ::= Column ;
 ColOrRowElement ::= Row ;
DateTimeType ::= year::Integer month::Integer day::Integer hour::Integer minute::Integer second::Integer ;
VersionType ::= n::Integer nn::Integer ;
CustomDocumentProperty ::= customDocumentProperty_cdpe::CustomDocumentPropertiesCollection name::String value::ValueType ;
SmartTagsCollection ::= st_workbook::Workbook st_cell::Cell (smartTagTypes::SmartTagType)+ ;
StringValue ::= value::String ;
--------------------metamodels::MSOfficeExcel_SpreadsheetMLPrintingSetup.bgf--------------------
WorksheetOptionsElt ::= wo_worksheet::Worksheet fitToPage::Boolean doNotDisplayColHeaders::Boolean doNotDisplayRowHeaders::Boolean gridlineColor::String name::String excelWorksheetType::ExcelWorksheetTypeType intlMacro::Boolean unsynced::Boolean selected::Boolean codeName::String displayPageBreak::Boolean transitionExpressionEvaluation::Boolean transitionFormulaEntry::Boolean zoom::Integer pageBreakZoom::Integer showPageBreakZoom::Boolean defaultRowHeight::Integer defaultColumnWidth::Integer standardWidth::Integer visible::VisibleType leftColumnVisible::Integer displayRightToLeft::Boolean gridlineColorIndex::Integer displayFormulas::Boolean doNotDisplayGridlines::Boolean doNotDisplayHeadings::Boolean doNotDisplayOutline::Boolean applyAutomaticOutlineStyles::Boolean noSummaryRowsBelowDetail::Boolean noSummaryColumnsRightDetail::Boolean doNotDisplayZeros::Boolean activeRow::Integer activeColumn::Integer filterOn::Boolean rangeSelection::String topRowVisible::Integer topRowBottomPane::Integer leftColumnRightPane::Integer activePane::Integer splitHorizontal::Integer splitVertical::Integer freezePanes::Boolean frozenNoSplit::Boolean tabColorIndex::Integer protectContentst::Boolean protectObjects::Boolean protectScenarios::Boolean enableSelection::EnableSelectionType allowFormatCells::Boolean allowSizeCols::Boolean allowSizeRows::Boolean allowInsertCols::Boolean allowInsertRows::Boolean allowInsertHyperlinks::Boolean allowDeleteCols::Boolean allowDeleteRows::Boolean allowSort::Boolean allowFilter::Boolean allowUsePivotTables::Boolean wo_pageSetup::PageSetup wo_print::Print ;
CalculationWorkbookType ::= (cwt_automaticCalculation::ε) | (cwt_manualCalculation::ε) | (cwt_semiAutomaticCalculation::ε) ;
CustomDocumentPropertiesCollection ::= cdp_workbook::Workbook (customDocumentProperties::CustomDocumentProperty)+ ;
DateTimeTypeValue ::= value::DateTimeType ;
CommentsLayoutType ::= (clt_InPlace::ε) | (clt_PrintNone::ε) | (clt_SheetEnd::ε) ;
DateTimeType ::= year::Integer month::Integer day::Integer hour::Integer minute::Integer second::Integer ;
DisplayDrawingObjectsType ::= (ddot_displayShapes::ε) | (ddot_placeHolders::ε) | (ddot_hideAll::ε) ;
VersionType ::= n::Integer nn::Integer ;
ExcelWorkbook ::= ew_workbook::Workbook selectedSheets::Integer windowHidden::Boolean hideHorizontalScrollBar::Boolean hideVerticalScrollBar::Boolean hideWorkbookTabs::Boolean windowHeight::Double windowWidth::Double windowTopX::Double windowTopY::Double activeSheet::Integer activeChart::String firstVisibleSheet::Integer hidePivotTableFieldList::Boolean protectStructure::Boolean protectWindows::Boolean displayInkNotes::Boolean embedSaveSmartTags::Boolean futureVer::String tabRatio::Integer windowIconic::Boolean displayDrawingObjects::DisplayDrawingObjectsType createBackup::Boolean calculation::CalculationWorkbookType doNotCalculateBeforeSave::Boolean date1904::Boolean refModeR1C1::Boolean iteration::Boolean maxIterations::Integer maxChange::Double precisionAsDisplayed::Boolean doNotSaveLinkValues::Boolean noAutoRecover::Boolean acceptLabelsInFormulas::Boolean uncalced::Boolean ;
PageSetup ::= ps_worksheetOptions::WorksheetOptionsElt ps_layout::Layout ps_header::Header ps_footer::Footer ps_pageMargins::PageMarginsInfo ;
TableElement ::= ColOrRowElement ;
 TableElement ::= Cell ;
VisibleType ::= (vt_SheetVisible::ε) | (vt_SheetHidden::ε) | (vt_SheetVeryHidden::ε) ;
DocumentPropertiesCollection ::= dp_workbook::Workbook title::String subject::String keywords::String description::String category::String author::String lastAuthor::String manager::String company::String hyperlinkBase::String revision::Integer presentationFormat::String guid::String appName::String version::VersionType totalTime::Integer lastPrinted::DateTimeType created::DateTimeType lastSaved::DateTimeType pages::Integer words::Integer characters::Integer charactersWithSpaces::Integer bytes::Integer lines::Integer paragraphs::Integer ;
ExcelWorksheetTypeType ::= (ewt_Worksheet::ε) | (ewt_Chart::ε) | (ewt_Macro::ε) | (ewt_Dialog::ε) ;
SmartTagType ::= smartTagType_ste::SmartTagsCollection namespaceuri::String name::String url::String ;
ValueType ::= StringValue ;
 ValueType ::= NumberValue ;
 ValueType ::= DateTimeTypeValue ;
 ValueType ::= BooleanValue ;
 ValueType ::= ErrorValue ;
OrientationType ::= (ot_Landscape::ε) | (ot_Portrait::ε) ;
StyledElement ::= Table ;
 StyledElement ::= TableElement ;
ErrorValue ::= vt_data::Data ;
BooleanValue ::= value::Boolean ;
NumberValue ::= value::Double ;
ColOrRowElement ::= Column ;
 ColOrRowElement ::= Row ;
PageMarginsInfo ::= pm_pageSetup::PageSetup left::Double right::Double top::Double bottom::Double ;
EnableSelectionType ::= (est_UnlockedCells::ε) | (est_NoSelection::ε) ;
HeaderOrFooterElt ::= Header ;
 HeaderOrFooterElt ::= Footer ;
CustomDocumentProperty ::= customDocumentProperty_cdpe::CustomDocumentPropertiesCollection name::String value::ValueType ;
SmartTagsCollection ::= st_workbook::Workbook st_cell::Cell (smartTagTypes::SmartTagType)+ ;
StringValue ::= value::String ;
--------------------metamodels::MSOfficeExcel_SpreadsheetMLSimplified.bgf--------------------
TableElement ::= ColOrRowElement ;
 TableElement ::= Cell ;
DateTimeTypeValue ::= value::DateTimeType ;
ValueType ::= StringValue ;
 ValueType ::= NumberValue ;
 ValueType ::= DateTimeTypeValue ;
 ValueType ::= BooleanValue ;
 ValueType ::= ErrorValue ;
ErrorValue ::= vt_data::Data ;
BooleanValue ::= value::Boolean ;
NumberValue ::= value::Double ;
ColOrRowElement ::= Column ;
 ColOrRowElement ::= Row ;
DateTimeType ::= year::Integer month::Integer day::Integer hour::Integer minute::Integer second::Integer ;
StringValue ::= value::String ;
--------------------metamodels::MSOfficeExcel_SpreadsheetMLStyles.bgf--------------------
CommentsLayoutType ::= (clt_InPlace::ε) | (clt_PrintNone::ε) | (clt_SheetEnd::ε) ;
DisplayDrawingObjectsType ::= (ddot_displayShapes::ε) | (ddot_placeHolders::ε) | (ddot_hideAll::ε) ;
ExcelNumberFormatType ::= (enft_General::ε) | (enft_General_Number::ε) | (enft_General_Date::ε) | (enft_Long_Date::ε) | (enft_Medium_Date::ε) | (enft_Short_Date::ε) | (enft_Long_Time::ε) | (enft_Medium_Time::ε) | (enft_Short_Time::ε) | (enft_Currency::ε) | (enft_Euro_Currency::ε) | (enft_Fixed::ε) | (enft_Standard::ε) | (enft_Percent::ε) | (enft_Scientific::ε) | (enft_Yes_No::ε) | (enft_True_False::ε) | (enft_On_Off::ε) ;
ExcelWorkbook ::= ew_workbook::Workbook selectedSheets::Integer windowHidden::Boolean hideHorizontalScrollBar::Boolean hideVerticalScrollBar::Boolean hideWorkbookTabs::Boolean windowHeight::Double windowWidth::Double windowTopX::Double windowTopY::Double activeSheet::Integer activeChart::String firstVisibleSheet::Integer hidePivotTableFieldList::Boolean protectStructure::Boolean protectWindows::Boolean displayInkNotes::Boolean embedSaveSmartTags::Boolean futureVer::String tabRatio::Integer windowIconic::Boolean displayDrawingObjects::DisplayDrawingObjectsType createBackup::Boolean calculation::CalculationWorkbookType doNotCalculateBeforeSave::Boolean date1904::Boolean refModeR1C1::Boolean iteration::Boolean maxIterations::Integer maxChange::Double precisionAsDisplayed::Boolean doNotSaveLinkValues::Boolean noAutoRecover::Boolean acceptLabelsInFormulas::Boolean uncalced::Boolean ;
VerticalAlignementType ::= (vat_Top::ε) | (vat_Bottom::ε) | (vat_Justify::ε) | (vat_Distributed::ε) | (vat_Center::ε) | (vat_Automatic::ε) | (vat_JustifyDistributed::ε) ;
TableElement ::= ColOrRowElement ;
 TableElement ::= Cell ;
VisibleType ::= (vt_SheetVisible::ε) | (vt_SheetHidden::ε) | (vt_SheetVeryHidden::ε) ;
StyleType ::= st_styles::StylesCollection st_styledElement::StyledElement id::String name::String parent::StyleType st_parent::StyleType alignment::AlignmentType borders::BordersType font::FontType interior::InteriorType numberFormat::NumberFormatType protection::ProtectionType ;
ValueType ::= StringValue ;
 ValueType ::= NumberValue ;
 ValueType ::= DateTimeTypeValue ;
 ValueType ::= BooleanValue ;
 ValueType ::= ErrorValue ;
InteriorType ::= it_styleType::StyleType color::String pattern::PatternType patternColor::String ;
VerticalAlignType ::= (vat_None::ε) | (vat_Subscript::ε) | (vat_Superscript::ε) ;
ErrorValue ::= vt_data::Data ;
BorderType ::= bt_bordersType::BordersType position::PositionType color::String lineStyle::LineStyleType weight::Double ;
NamedRange ::= nr_namesType::NamesType name::String refersTo::String hidden::Boolean ;
PageMarginsInfo ::= pm_pageSetup::PageSetup left::Double right::Double top::Double bottom::Double ;
PositionType ::= (pt_Left::ε) | (pt_Top::ε) | (pt_Right::ε) | (pt_Bottom::ε) | (pt_DiagonalLeft::ε) | (pt_DiagonalRight::ε) ;
SmartTagsCollection ::= st_workbook::Workbook st_cell::Cell (smartTagTypes::SmartTagType)+ ;
AlignmentType ::= at_styleType::StyleType horizontal::HorizontalAlignementType readingOrder::ReadingOrderType indent::Double rotate::Double shrinkToFit::Boolean vertical::VerticalAlignementType verticalText::Boolean wrapText::Boolean ;
WorksheetOptionsElt ::= wo_worksheet::Worksheet fitToPage::Boolean doNotDisplayColHeaders::Boolean doNotDisplayRowHeaders::Boolean gridlineColor::String name::String excelWorksheetType::ExcelWorksheetTypeType intlMacro::Boolean unsynced::Boolean selected::Boolean codeName::String displayPageBreak::Boolean transitionExpressionEvaluation::Boolean transitionFormulaEntry::Boolean zoom::Integer pageBreakZoom::Integer showPageBreakZoom::Boolean defaultRowHeight::Integer defaultColumnWidth::Integer standardWidth::Integer visible::VisibleType leftColumnVisible::Integer displayRightToLeft::Boolean gridlineColorIndex::Integer displayFormulas::Boolean doNotDisplayGridlines::Boolean doNotDisplayHeadings::Boolean doNotDisplayOutline::Boolean applyAutomaticOutlineStyles::Boolean noSummaryRowsBelowDetail::Boolean noSummaryColumnsRightDetail::Boolean doNotDisplayZeros::Boolean activeRow::Integer activeColumn::Integer filterOn::Boolean rangeSelection::String topRowVisible::Integer topRowBottomPane::Integer leftColumnRightPane::Integer activePane::Integer splitHorizontal::Integer splitVertical::Integer freezePanes::Boolean frozenNoSplit::Boolean tabColorIndex::Integer protectContentst::Boolean protectObjects::Boolean protectScenarios::Boolean enableSelection::EnableSelectionType allowFormatCells::Boolean allowSizeCols::Boolean allowSizeRows::Boolean allowInsertCols::Boolean allowInsertRows::Boolean allowInsertHyperlinks::Boolean allowDeleteCols::Boolean allowDeleteRows::Boolean allowSort::Boolean allowFilter::Boolean allowUsePivotTables::Boolean wo_pageSetup::PageSetup wo_print::Print ;
CalculationWorkbookType ::= (cwt_automaticCalculation::ε) | (cwt_manualCalculation::ε) | (cwt_semiAutomaticCalculation::ε) ;
CustomDocumentPropertiesCollection ::= cdp_workbook::Workbook (customDocumentProperties::CustomDocumentProperty)+ ;
ReadingOrderType ::= (rot_RightToLeft::ε) | (rot_LeftToRight::ε) | (rot_Context::ε) ;
HorizontalAlignementType ::= (hat_CenterAcrossSelection::ε) | (hat_Fill::ε) | (hat_Left::ε) | (hat_Right::ε) | (hat_Justify::ε) | (hat_Distributed::ε) | (hat_Center::ε) | (hat_Automatic::ε) | (hat_JustifyDistributed::ε) ;
DateTimeTypeValue ::= value::DateTimeType ;
NumberFormatType ::= nft_styleType::StyleType format::ExcelNumberFormatType ;
LineStyleType ::= (lst_None::ε) | (lst_Continuous::ε) | (lst_Dash::ε) | (lst_Dot::ε) | (lst_DashDot::ε) | (lst_DashDotDot::ε) | (lst_SlantDashDot::ε) | (lst_Double::ε) ;
DateTimeType ::= year::Integer month::Integer day::Integer hour::Integer minute::Integer second::Integer ;
ProtectionType ::= pt_styleType::StyleType protected::Boolean ;
VersionType ::= n::Integer nn::Integer ;
PageSetup ::= ps_worksheetOptions::WorksheetOptionsElt ps_layout::Layout ps_header::Header ps_footer::Footer ps_pageMargins::PageMarginsInfo ;
DocumentPropertiesCollection ::= dp_workbook::Workbook title::String subject::String keywords::String description::String category::String author::String lastAuthor::String manager::String company::String hyperlinkBase::String revision::Integer presentationFormat::String guid::String appName::String version::VersionType totalTime::Integer lastPrinted::DateTimeType created::DateTimeType lastSaved::DateTimeType pages::Integer words::Integer characters::Integer charactersWithSpaces::Integer bytes::Integer lines::Integer paragraphs::Integer ;
SmartTagType ::= smartTagType_ste::SmartTagsCollection namespaceuri::String name::String url::String ;
ExcelWorksheetTypeType ::= (ewt_Worksheet::ε) | (ewt_Chart::ε) | (ewt_Macro::ε) | (ewt_Dialog::ε) ;
PatternType ::= (pt_None::ε) | (pt_Solid::ε) | (pt_Gray75::ε) | (pt_Gray50::ε) | (pt_Gray25::ε) | (pt_Gray125::ε) | (pt_Gray0625::ε) | (pt_HorzStripe::ε) | (pt_VertStripe::ε) | (pt_ReverseDiagStripe::ε) | (pt_DiagStripe::ε) | (pt_DiagCross::ε) | (pt_ThickDiagCross::ε) | (pt_ThinHorzStripe::ε) | (pt_ThinVertStripe::ε) | (pt_ThinReverseDiagStripe::ε) | (pt_ThinDiagStripe::ε) | (pt_ThinHorzCross::ε) | (pt_ThinDiagCross::ε) ;
OrientationType ::= (ot_Landscape::ε) | (ot_Portrait::ε) ;
FontType ::= ft_styleType::StyleType bold::Boolean color::String fontName::String italic::Boolean outline::Boolean shadow::Boolean size::Double strikeThrough::Boolean underline::UnderlineType verticalAlign::VerticalAlignType ;
StyledElement ::= Table ;
 StyledElement ::= TableElement ;
BooleanValue ::= value::Boolean ;
NumberValue ::= value::Double ;
UnderlineType ::= (ut_None::ε) | (ut_Single::ε) | (ut_Double::ε) | (ut_SingleAccounting::ε) | (ut_DoubleAccounting::ε) ;
ColOrRowElement ::= Column ;
 ColOrRowElement ::= Row ;
EnableSelectionType ::= (est_UnlockedCells::ε) | (est_NoSelection::ε) ;
NamesType ::= nt_workbook::Workbook (namedRanges::NamedRange)+ ;
HeaderOrFooterElt ::= Header ;
 HeaderOrFooterElt ::= Footer ;
BordersType ::= bt_styleType::StyleType border::BorderType ;
CustomDocumentProperty ::= customDocumentProperty_cdpe::CustomDocumentPropertiesCollection name::String value::ValueType ;
StylesCollection ::= s_workbook::Workbook (style::StyleType)+ ;
StringValue ::= value::String ;
--------------------metamodels::MSOfficeExcel_SpreadsheetMLWorkbookProp.bgf--------------------
CalculationWorkbookType ::= (cwt_automaticCalculation::ε) | (cwt_manualCalculation::ε) | (cwt_semiAutomaticCalculation::ε) ;
CustomDocumentPropertiesCollection ::= cdp_workbook::Workbook (customDocumentProperties::CustomDocumentProperty)+ ;
DateTimeTypeValue ::= value::DateTimeType ;
DateTimeType ::= year::Integer month::Integer day::Integer hour::Integer minute::Integer second::Integer ;
DisplayDrawingObjectsType ::= (ddot_displayShapes::ε) | (ddot_placeHolders::ε) | (ddot_hideAll::ε) ;
VersionType ::= n::Integer nn::Integer ;
ExcelWorkbook ::= ew_workbook::Workbook selectedSheets::Integer windowHidden::Boolean hideHorizontalScrollBar::Boolean hideVerticalScrollBar::Boolean hideWorkbookTabs::Boolean windowHeight::Double windowWidth::Double windowTopX::Double windowTopY::Double activeSheet::Integer activeChart::String firstVisibleSheet::Integer hidePivotTableFieldList::Boolean protectStructure::Boolean protectWindows::Boolean displayInkNotes::Boolean embedSaveSmartTags::Boolean futureVer::String tabRatio::Integer windowIconic::Boolean displayDrawingObjects::DisplayDrawingObjectsType createBackup::Boolean calculation::CalculationWorkbookType doNotCalculateBeforeSave::Boolean date1904::Boolean refModeR1C1::Boolean iteration::Boolean maxIterations::Integer maxChange::Double precisionAsDisplayed::Boolean doNotSaveLinkValues::Boolean noAutoRecover::Boolean acceptLabelsInFormulas::Boolean uncalced::Boolean ;
TableElement ::= ColOrRowElement ;
 TableElement ::= Cell ;
DocumentPropertiesCollection ::= dp_workbook::Workbook title::String subject::String keywords::String description::String category::String author::String lastAuthor::String manager::String company::String hyperlinkBase::String revision::Integer presentationFormat::String guid::String appName::String version::VersionType totalTime::Integer lastPrinted::DateTimeType created::DateTimeType lastSaved::DateTimeType pages::Integer words::Integer characters::Integer charactersWithSpaces::Integer bytes::Integer lines::Integer paragraphs::Integer ;
SmartTagType ::= smartTagType_ste::SmartTagsCollection namespaceuri::String name::String url::String ;
ValueType ::= StringValue ;
 ValueType ::= NumberValue ;
 ValueType ::= DateTimeTypeValue ;
 ValueType ::= BooleanValue ;
 ValueType ::= ErrorValue ;
StyledElement ::= Table ;
 StyledElement ::= TableElement ;
ErrorValue ::= vt_data::Data ;
BooleanValue ::= value::Boolean ;
NumberValue ::= value::Double ;
ColOrRowElement ::= Column ;
 ColOrRowElement ::= Row ;
CustomDocumentProperty ::= customDocumentProperty_cdpe::CustomDocumentPropertiesCollection name::String value::ValueType ;
SmartTagsCollection ::= st_workbook::Workbook st_cell::Cell (smartTagTypes::SmartTagType)+ ;
StringValue ::= value::String ;
--------------------metamodels::MSOfficeExcel_SpreadsheetMLWorksheetOpt.bgf--------------------
WorksheetOptionsElt ::= wo_worksheet::Worksheet fitToPage::Boolean doNotDisplayColHeaders::Boolean doNotDisplayRowHeaders::Boolean gridlineColor::String name::String excelWorksheetType::ExcelWorksheetTypeType intlMacro::Boolean unsynced::Boolean selected::Boolean codeName::String displayPageBreak::Boolean transitionExpressionEvaluation::Boolean transitionFormulaEntry::Boolean zoom::Integer pageBreakZoom::Integer showPageBreakZoom::Boolean defaultRowHeight::Integer defaultColumnWidth::Integer standardWidth::Integer visible::VisibleType leftColumnVisible::Integer displayRightToLeft::Boolean gridlineColorIndex::Integer displayFormulas::Boolean doNotDisplayGridlines::Boolean doNotDisplayHeadings::Boolean doNotDisplayOutline::Boolean applyAutomaticOutlineStyles::Boolean noSummaryRowsBelowDetail::Boolean noSummaryColumnsRightDetail::Boolean doNotDisplayZeros::Boolean activeRow::Integer activeColumn::Integer filterOn::Boolean rangeSelection::String topRowVisible::Integer topRowBottomPane::Integer leftColumnRightPane::Integer activePane::Integer splitHorizontal::Integer splitVertical::Integer freezePanes::Boolean frozenNoSplit::Boolean tabColorIndex::Integer protectContentst::Boolean protectObjects::Boolean protectScenarios::Boolean enableSelection::EnableSelectionType allowFormatCells::Boolean allowSizeCols::Boolean allowSizeRows::Boolean allowInsertCols::Boolean allowInsertRows::Boolean allowInsertHyperlinks::Boolean allowDeleteCols::Boolean allowDeleteRows::Boolean allowSort::Boolean allowFilter::Boolean allowUsePivotTables::Boolean ;
CalculationWorkbookType ::= (cwt_automaticCalculation::ε) | (cwt_manualCalculation::ε) | (cwt_semiAutomaticCalculation::ε) ;
CustomDocumentPropertiesCollection ::= cdp_workbook::Workbook (customDocumentProperties::CustomDocumentProperty)+ ;
DateTimeTypeValue ::= value::DateTimeType ;
DateTimeType ::= year::Integer month::Integer day::Integer hour::Integer minute::Integer second::Integer ;
DisplayDrawingObjectsType ::= (ddot_displayShapes::ε) | (ddot_placeHolders::ε) | (ddot_hideAll::ε) ;
VersionType ::= n::Integer nn::Integer ;
ExcelWorkbook ::= ew_workbook::Workbook selectedSheets::Integer windowHidden::Boolean hideHorizontalScrollBar::Boolean hideVerticalScrollBar::Boolean hideWorkbookTabs::Boolean windowHeight::Double windowWidth::Double windowTopX::Double windowTopY::Double activeSheet::Integer activeChart::String firstVisibleSheet::Integer hidePivotTableFieldList::Boolean protectStructure::Boolean protectWindows::Boolean displayInkNotes::Boolean embedSaveSmartTags::Boolean futureVer::String tabRatio::Integer windowIconic::Boolean displayDrawingObjects::DisplayDrawingObjectsType createBackup::Boolean calculation::CalculationWorkbookType doNotCalculateBeforeSave::Boolean date1904::Boolean refModeR1C1::Boolean iteration::Boolean maxIterations::Integer maxChange::Double precisionAsDisplayed::Boolean doNotSaveLinkValues::Boolean noAutoRecover::Boolean acceptLabelsInFormulas::Boolean uncalced::Boolean ;
TableElement ::= ColOrRowElement ;
 TableElement ::= Cell ;
VisibleType ::= (vt_SheetVisible::ε) | (vt_SheetHidden::ε) | (vt_SheetVeryHidden::ε) ;
DocumentPropertiesCollection ::= dp_workbook::Workbook title::String subject::String keywords::String description::String category::String author::String lastAuthor::String manager::String company::String hyperlinkBase::String revision::Integer presentationFormat::String guid::String appName::String version::VersionType totalTime::Integer lastPrinted::DateTimeType created::DateTimeType lastSaved::DateTimeType pages::Integer words::Integer characters::Integer charactersWithSpaces::Integer bytes::Integer lines::Integer paragraphs::Integer ;
ExcelWorksheetTypeType ::= (ewt_Worksheet::ε) | (ewt_Chart::ε) | (ewt_Macro::ε) | (ewt_Dialog::ε) ;
SmartTagType ::= smartTagType_ste::SmartTagsCollection namespaceuri::String name::String url::String ;
ValueType ::= StringValue ;
 ValueType ::= NumberValue ;
 ValueType ::= DateTimeTypeValue ;
 ValueType ::= BooleanValue ;
 ValueType ::= ErrorValue ;
StyledElement ::= Table ;
 StyledElement ::= TableElement ;
ErrorValue ::= vt_data::Data ;
BooleanValue ::= value::Boolean ;
NumberValue ::= value::Double ;
ColOrRowElement ::= Column ;
 ColOrRowElement ::= Row ;
EnableSelectionType ::= (est_UnlockedCells::ε) | (est_NoSelection::ε) ;
CustomDocumentProperty ::= customDocumentProperty_cdpe::CustomDocumentPropertiesCollection name::String value::ValueType ;
SmartTagsCollection ::= st_workbook::Workbook st_cell::Cell (smartTagTypes::SmartTagType)+ ;
StringValue ::= value::String ;
--------------------metamodels::MSOfficeWord_WordprocessingMLBasicDef.bgf--------------------
RunContentElt ::= BreakElt ;
 RunContentElt ::= NoBreakHyphen ;
 RunContentElt ::= SoftHyphen ;
 RunContentElt ::= AnnotationRef ;
 RunContentElt ::= FootnoteRef ;
 RunContentElt ::= EndnoteRef ;
 RunContentElt ::= Separator ;
 RunContentElt ::= ContinuationSeparator ;
 RunContentElt ::= PgNum ;
 RunContentElt ::= Cr ;
 RunContentElt ::= Text ;
 RunContentElt ::= DelText ;
 RunContentElt ::= InstrText ;
 RunContentElt ::= DelInstrText ;
 RunContentElt ::= Footnote ;
 RunContentElt ::= Endnote ;
 RunContentElt ::= Picture ;
 RunContentElt ::= Symbol ;
 RunContentElt ::= Tab ;
 RunContentElt ::= FldChar ;
NoteValue ::= (ftn_normal::ε) | (ftn_separator::ε) | (ftn_continuation_separator::ε) | (ftn_continuation_notice::ε) ;
NoteElt ::= Footnote ;
 NoteElt ::= Endnote ;
BreakType ::= (bt_page::ε) | (bt_column::ε) | (bt_text_wrapping::ε) ;
TabElt ::= Tab ;
 TabElt ::= ε ;
PictureType ::= Picture ;
 PictureType ::= ε ;
ListsElt ::= le_wordDocument::WordDocument ;
DelText ::= rce_rElt::RunElt val::String ;
BlockLevelChunkElt ::= ParaElt ;
 BlockLevelChunkElt ::= RunLevelElt ;
FldChar ::= rce_rElt::RunElt fldData::StringType fldCharType::FldCharTypeProperty fldLock::OnOffType ;
FootnoteRef ::= rce_rElt::RunElt ;
NoBreakHyphen ::= rce_rElt::RunElt ;
PgNum ::= rce_rElt::RunElt ;
HLinkElt ::= pce_pElt::ParaElt ;
FontsListElt ::= fle_wordDocument::WordDocument ;
ParaPrElt ::= ppe_pElt::ParaElt ;
ValueType ::= StringValue ;
 ValueType ::= FloatValue ;
 ValueType ::= DateTimeTypeValue ;
 ValueType ::= BooleanValue ;
CfChunk ::= ble_bodyElt::BodyElt ble_note::NoteElt ;
SectPrElt ::= spe_bodyElt::BodyElt ;
EndnoteRef ::= rce_rElt::RunElt ;
StringProperty ::= val::String ;
WordDocument ::= wd_smartTags::SmartTagsCollection wd_docProperties::DocumentPropertiesCollection wd_customDocProperties::CustomDocumentPropertiesCollection ignoreSubtree::StringProperty ignoreElements::StringProperty fonts::FontsListElt lists::ListsElt styles::StylesElt docPr::DocPrElt body::BodyElt ;
SmartTagsCollection ::= st_wordDocument::WordDocument (smartTagTypes::SmartTagType)+ ;
RunPrElt ::= rpe_rElt::RunElt ;
CustomDocumentPropertiesCollection ::= cdp_wordDocument::WordDocument (customDocumentProperties::CustomDocumentProperty)+ ;
SoftHyphen ::= rce_rElt::RunElt ;
DateTimeTypeValue ::= value::DateTimeType ;
FldCharElt ::= FldChar ;
 FldCharElt ::= fldData::StringType fldCharType::FldCharTypeProperty fldLock::OnOffType ;
InstrText ::= rce_rElt::RunElt val::String ;
BlockLevelElt ::= BlockLevelChunkElt ;
 BlockLevelElt ::= CfChunk ;
SubDocElt ::= pce_pElt::ParaElt ;
FloatValue ::= value::Double ;
DateTimeType ::= year::Integer month::Integer day::Integer hour::Integer minute::Integer second::Integer ;
RunLevelElt ::= ε ;
ParaContentElt ::= RunElt ;
 ParaContentElt ::= SimpleFieldElt ;
 ParaContentElt ::= HLinkElt ;
 ParaContentElt ::= SubDocElt ;
DocPrElt ::= dpe_wordDocument::WordDocument ;
VersionType ::= n::Integer nn::Integer ;
ContinuationSeparator ::= rce_rElt::RunElt ;
DelInstrText ::= rce_rElt::RunElt val::String ;
BreakElt ::= type::BreakType ;
ParaElt ::= pPr::ParaPrElt (pContentElts::ParaContentElt)+ ;
DocumentPropertiesCollection ::= dp_wordDocument::WordDocument title::String subject::String keywords::String description::String category::String author::String lastAuthor::String manager::String company::String hyperlinkBase::String revision::Integer presentationFormat::String guid::String appName::String version::VersionType totalTime::Integer lastPrinted::DateTimeType created::DateTimeType lastSaved::DateTimeType pages::Integer words::Integer characters::Integer charactersWithSpaces::Integer bytes::Integer lines::Integer paragraphs::Integer ;
StylesElt ::= se_wordDocument::WordDocument ;
SmartTagType ::= smartTagType_ste::SmartTagsCollection namespaceuri::String name::String url::String ;
StringType ::= StringProperty ;
 StringType ::= Text ;
 StringType ::= DelText ;
 StringType ::= InstrText ;
 StringType ::= DelInstrText ;
 StringType ::= val::String ;
BodyElt ::= be_wordDocument::WordDocument (blockLevelElts::BlockLevelElt)+ sectPr::SectPrElt ;
OnOffType ::= (oot_on::ε) | (oot_off::ε) ;
BooleanValue ::= value::Boolean ;
SymElt ::= Symbol ;
 SymElt ::= font::StringType char::StringType ;
SimpleFieldElt ::= pce_pElt::ParaElt ;
AnnotationRef ::= rce_rElt::RunElt ;
FldCharTypeProperty ::= (fctp_begin::ε) | (fctp_separate::ε) | (fctp_end::ε) ;
RunElt ::= rPr::RunPrElt (rContentElts::RunContentElt)+ ;
CustomDocumentProperty ::= customDocumentProperty_cdpe::CustomDocumentPropertiesCollection name::String value::ValueType ;
StringValue ::= value::String ;
--------------------metamodels::MSOfficeWord_WordprocessingMLSimplified.bgf--------------------
RunContentElt ::= BreakElt ;
 RunContentElt ::= NoBreakHyphen ;
 RunContentElt ::= SoftHyphen ;
 RunContentElt ::= AnnotationRef ;
 RunContentElt ::= FootnoteRef ;
 RunContentElt ::= EndnoteRef ;
 RunContentElt ::= Separator ;
 RunContentElt ::= ContinuationSeparator ;
 RunContentElt ::= PgNum ;
 RunContentElt ::= Cr ;
 RunContentElt ::= Picture ;
 RunContentElt ::= Tab ;
 RunContentElt ::= Text ;
 RunContentElt ::= DelText ;
 RunContentElt ::= InstrText ;
 RunContentElt ::= DelInstrText ;
 RunContentElt ::= Footnote ;
 RunContentElt ::= Endnote ;
 RunContentElt ::= Symbol ;
 RunContentElt ::= FldChar ;
NoteValue ::= (ftn_normal::ε) | (ftn_separator::ε) | (ftn_continuation_separator::ε) | (ftn_continuation_notice::ε) ;
SoftHyphen ::= rce_rElt::RunElt ;
NoteElt ::= Footnote ;
 NoteElt ::= Endnote ;
FldCharElt ::= FldChar ;
 FldCharElt ::= fldData::StringType fldCharType::FldCharTypeProperty fldLock::OnOffType ;
InstrText ::= rce_rElt::RunElt val::String ;
BreakType ::= (bt_page::ε) | (bt_column::ε) | (bt_text_wrapping::ε) ;
DelText ::= rce_rElt::RunElt val::String ;
BlockLevelChunkElt ::= ParaElt ;
BlockLevelElt ::= BlockLevelChunkElt ;
FldChar ::= rce_rElt::RunElt fldData::StringType fldCharType::FldCharTypeProperty fldLock::OnOffType ;
ParaContentElt ::= RunElt ;
FootnoteRef ::= rce_rElt::RunElt ;
NoBreakHyphen ::= rce_rElt::RunElt ;
PgNum ::= rce_rElt::RunElt ;
ContinuationSeparator ::= rce_rElt::RunElt ;
DelInstrText ::= rce_rElt::RunElt val::String ;
BreakElt ::= type::BreakType ;
ParaElt ::= (pContentElts::ParaContentElt)+ ;
BodyElt ::= be_wordDocument::WordDocument (blockLevelElts::BlockLevelElt)+ ;
StringType ::= StringProperty ;
 StringType ::= Text ;
 StringType ::= DelText ;
 StringType ::= InstrText ;
 StringType ::= DelInstrText ;
 StringType ::= val::String ;
OnOffType ::= (oot_on::ε) | (oot_off::ε) ;
SymElt ::= Symbol ;
 SymElt ::= font::StringType char::StringType ;
EndnoteRef ::= rce_rElt::RunElt ;
StringProperty ::= val::String ;
WordDocument ::= ignoreSubtree::StringProperty ignoreElements::StringProperty body::BodyElt ;
AnnotationRef ::= rce_rElt::RunElt ;
FldCharTypeProperty ::= (fctp_begin::ε) | (fctp_separate::ε) | (fctp_end::ε) ;
RunElt ::= (rContentElts::RunContentElt)+ ;
--------------------metamodels::MSOfficeWord_WordprocessingMLStyles.bgf--------------------
NoteValue ::= (ftn_normal::ε) | (ftn_separator::ε) | (ftn_continuation_separator::ε) | (ftn_continuation_notice::ε) ;
TableCellPrElt ::= tcpe_tableCellElt::TableCellElt tcpe_styleElt::StyleElt ;
TableGridElt ::= tge_tblElt::TableElt ;
TabElt ::= Tab ;
 TabElt ::= ε ;
ListsElt ::= le_wordDocument::WordDocument ;
FootnoteRef ::= rce_rElt::RunElt ;
NoBreakHyphen ::= rce_rElt::RunElt ;
PgNum ::= rce_rElt::RunElt ;
UnderlineValues ::= (uv_single::ε) | (uv_words::ε) | (uv_double::ε) | (uv_thick::ε) | (uv_dotted::ε) | (uv_dotted_heavy::ε) | (uv_dash::ε) | (uv_dashed_heavy::ε) | (uv_dash_long::ε) | (uv_dash_long_heavy::ε) | (uv_dot_dash::ε) | (uv_dash_dot_heavy::ε) | (uv_dot_dot_dash::ε) | (uv_dash_dot_dot_heavy::ε) | (uv_wave::ε) | (uv_wavy_heavy::ε) | (uv_wavy_double::ε) | (uv_none::ε) ;
HLinkElt ::= pce_pElt::ParaElt ;
WordDocument ::= wd_smartTags::SmartTagsCollection wd_docProperties::DocumentPropertiesCollection wd_customDocProperties::CustomDocumentPropertiesCollection ignoreSubtree::StringProperty ignoreElements::StringProperty fonts::FontsListElt lists::ListsElt styles::StylesElt docPr::DocPrElt body::BodyElt ;
TableRowPrElt ::= tpe_rowElt::RowElt trpe_styleElt::StyleElt ;
TableCellElt ::= tce_rowContentElt::RowContentElt tcPr::TableCellPrElt (tce_content::BlockLevelElt)+ ;
StyleElt ::= se_stylesElt::StylesElt type::StyleKindValue styleId::StringType default::OnOffType name::StringProperty aliases::StringProperty sti::Double basedOn::StringProperty next::StringProperty link::StringProperty autoRedefine::OnOffType hidden::OnOffType semiHidden::OnOffType locked::OnOffType personal::OnOffType personalCompose::OnOffType personalReply::OnOffType rsid::StringType se_pPr::ParaPrElt se_rPr::RunPrElt se_tblPr::TablePrElt se_trPr::TableRowPrElt se_tcPr::TableCellPrElt ;
DateTimeTypeValue ::= value::DateTimeType ;
FldCharElt ::= FldChar ;
 FldCharElt ::= fldData::StringType fldCharType::FldCharTypeProperty fldLock::OnOffType ;
VerticalAlignRunType ::= (vart_baseline::ε) | (vart_superscript::ε) | (vart_subscript::ε) ;
ContinuationSeparator ::= rce_rElt::RunElt ;
RowContentElt ::= rce_rowElt::RowElt (tc::TableCellElt)+ rce_runLevelElts::RunLevelElt ;
BreakElt ::= type::BreakType ;
StylesElt ::= se_wordDocument::WordDocument versionOfBuiltInStylenames::Double (styles::StyleElt)+ ;
OnOffType ::= (oot_on::ε) | (oot_off::ε) ;
BooleanValue ::= value::Boolean ;
SimpleFieldElt ::= pce_pElt::ParaElt ;
AnnotationRef ::= rce_rElt::RunElt ;
TableContentElt ::= tce_tblElt::TableElt (tr::RowElt)+ tce_runLevelElts::RunLevelElt ;
RunElt ::= rPr::RunPrElt (rContentElts::RunContentElt)+ ;
CustomDocumentProperty ::= customDocumentProperty_cdpe::CustomDocumentPropertiesCollection name::String value::ValueType ;
StringValue ::= value::String ;
JustificationValue ::= (jv_left::ε) | (jv_center::ε) | (jv_right::ε) | (jv_both::ε) ;
LangElt ::= le_runPrElt::RunPrElt val::String bidi::String ;
RunContentElt ::= BreakElt ;
 RunContentElt ::= NoBreakHyphen ;
 RunContentElt ::= SoftHyphen ;
 RunContentElt ::= AnnotationRef ;
 RunContentElt ::= FootnoteRef ;
 RunContentElt ::= EndnoteRef ;
 RunContentElt ::= Separator ;
 RunContentElt ::= ContinuationSeparator ;
 RunContentElt ::= PgNum ;
 RunContentElt ::= Cr ;
 RunContentElt ::= Text ;
 RunContentElt ::= DelText ;
 RunContentElt ::= InstrText ;
 RunContentElt ::= DelInstrText ;
 RunContentElt ::= Footnote ;
 RunContentElt ::= Endnote ;
 RunContentElt ::= Picture ;
 RunContentElt ::= Symbol ;
 RunContentElt ::= Tab ;
 RunContentElt ::= FldChar ;
FontElt ::= fe_fontsListElt::FontsListElt name::StringType altName::StringProperty ;
TablePrElt ::= tpe_tblElt::TableElt tpe_styleElt::StyleElt ;
NoteElt ::= Footnote ;
 NoteElt ::= Endnote ;
BreakType ::= (bt_page::ε) | (bt_column::ε) | (bt_text_wrapping::ε) ;
PictureType ::= Picture ;
 PictureType ::= ε ;
DelText ::= rce_rElt::RunElt val::String ;
BlockLevelChunkElt ::= ParaElt ;
 BlockLevelChunkElt ::= TableElt ;
 BlockLevelChunkElt ::= RunLevelElt ;
FldChar ::= rce_rElt::RunElt fldData::StringType fldCharType::FldCharTypeProperty fldLock::OnOffType ;
HighlightColorValues ::= (hcv_black::ε) | (hcv_blue::ε) | (hcv_cyan::ε) | (hcv_green::ε) | (hcv_magenta::ε) | (hcv_red::ε) | (hcv_yellow::ε) | (hcv_white::ε) | (hcv_dark_blue::ε) | (hcv_dark_cyan::ε) | (hcv_dark_green::ε) | (hcv_dark_magenta::ε) | (hcv_dark_red::ε) | (hcv_dark_yellow::ε) | (hcv_dark_gray::ε) | (hcv_light_gray::ε) | (hcv_none::ε) ;
StyleKindValue ::= (skv_paragraph::ε) | (skv_character::ε) | (skv_table::ε) | (skv_list::ε) ;
FontsListElt ::= fle_wordDocument::WordDocument defaultFonts::FontsElt (fonts::FontElt)+ ;
ParaPrElt ::= ppe_pElt::ParaElt ppe_styleElt::StyleElt pStyle::StringProperty keepNext::OnOffType keepLines::OnOffType pageBreakBefore::OnOffType supressLineNumbers::OnOffType suppressAutoHyphens::OnOffType contextualSpacing::OnOffType bidi::OnOffType justification::JustificationValue ;
ValueType ::= StringValue ;
 ValueType ::= FloatValue ;
 ValueType ::= DateTimeTypeValue ;
 ValueType ::= BooleanValue ;
CfChunk ::= ble_bodyElt::BodyElt ble_note::NoteElt ble_tableCellElt::TableCellElt ;
FontsElt ::= fse_fontsListElt::FontsListElt fse_runPrElt::RunPrElt hint::HintType ascii::StringType h_ansi::StringType fareast::StringType cs::StringType ;
SectPrElt ::= spe_bodyElt::BodyElt ;
EndnoteRef ::= rce_rElt::RunElt ;
StringProperty ::= val::String ;
UnderlineProperty ::= val::UnderlineValues color::String ;
RunPrElt ::= rpe_rElt::RunElt rpe_styleElt::StyleElt rStyle::StringProperty rFonts::FontsElt bold::OnOffType bold_cs::OnOffType italic::OnOffType italic_cs::OnOffType capitals::OnOffType smallCapitals::OnOffType strike::OnOffType doubleStrike::OnOffType outline::OnOffType shadow::OnOffType emboss::OnOffType imprint::OnOffType noProof::OnOffType vanish::OnOffType specVanish::OnOffType rtl::OnOffType cs::OnOffType underline::UnderlineProperty color::String highlight::HighlightColorValues verticalAlign::VerticalAlignRunType language::LangElt ;
SmartTagsCollection ::= st_wordDocument::WordDocument (smartTagTypes::SmartTagType)+ ;
TableElt ::= tblPr::TablePrElt tblGrid::TableGridElt (tblContent::TableContentElt)+ ;
CustomDocumentPropertiesCollection ::= cdp_wordDocument::WordDocument (customDocumentProperties::CustomDocumentProperty)+ ;
SoftHyphen ::= rce_rElt::RunElt ;
InstrText ::= rce_rElt::RunElt val::String ;
BlockLevelElt ::= BlockLevelChunkElt ;
 BlockLevelElt ::= CfChunk ;
SubDocElt ::= pce_pElt::ParaElt ;
FloatValue ::= value::Double ;
DateTimeType ::= year::Integer month::Integer day::Integer hour::Integer minute::Integer second::Integer ;
RunLevelElt ::= rle_tblContentElt::TableContentElt rle_rowContentElt::RowContentElt ;
ParaContentElt ::= RunElt ;
 ParaContentElt ::= SimpleFieldElt ;
 ParaContentElt ::= HLinkElt ;
 ParaContentElt ::= SubDocElt ;
RowElt ::= re_tblContentElt::TableContentElt tblPrEx::TablePrExElt trPr::TableRowPrElt (rowContent::RowContentElt)+ ;
DocPrElt ::= dpe_wordDocument::WordDocument ;
VersionType ::= n::Integer nn::Integer ;
DelInstrText ::= rce_rElt::RunElt val::String ;
ParaElt ::= pPr::ParaPrElt (pContentElts::ParaContentElt)+ ;
DocumentPropertiesCollection ::= dp_wordDocument::WordDocument title::String subject::String keywords::String description::String category::String author::String lastAuthor::String manager::String company::String hyperlinkBase::String revision::Integer presentationFormat::String guid::String appName::String version::VersionType totalTime::Integer lastPrinted::DateTimeType created::DateTimeType lastSaved::DateTimeType pages::Integer words::Integer characters::Integer charactersWithSpaces::Integer bytes::Integer lines::Integer paragraphs::Integer ;
SmartTagType ::= smartTagType_ste::SmartTagsCollection namespaceuri::String name::String url::String ;
StringType ::= StringProperty ;
 StringType ::= Text ;
 StringType ::= DelText ;
 StringType ::= InstrText ;
 StringType ::= DelInstrText ;
 StringType ::= val::String ;
BodyElt ::= be_wordDocument::WordDocument (blockLevelElts::BlockLevelElt)+ sectPr::SectPrElt ;
TablePrExElt ::= tpee_rowElt::RowElt ;
SymElt ::= Symbol ;
 SymElt ::= font::StringType char::StringType ;
FldCharTypeProperty ::= (fctp_begin::ε) | (fctp_separate::ε) | (fctp_end::ε) ;
HintType ::= (ht_default::ε) | (ht_fareast::ε) | (ht_cs::ε) ;
--------------------metamodels::MSOfficeWord_WordprocessingMLTableElts.bgf--------------------
RunContentElt ::= BreakElt ;
 RunContentElt ::= NoBreakHyphen ;
 RunContentElt ::= SoftHyphen ;
 RunContentElt ::= AnnotationRef ;
 RunContentElt ::= FootnoteRef ;
 RunContentElt ::= EndnoteRef ;
 RunContentElt ::= Separator ;
 RunContentElt ::= ContinuationSeparator ;
 RunContentElt ::= PgNum ;
 RunContentElt ::= Cr ;
 RunContentElt ::= Text ;
 RunContentElt ::= DelText ;
 RunContentElt ::= InstrText ;
 RunContentElt ::= DelInstrText ;
 RunContentElt ::= Footnote ;
 RunContentElt ::= Endnote ;
 RunContentElt ::= Picture ;
 RunContentElt ::= Symbol ;
 RunContentElt ::= Tab ;
 RunContentElt ::= FldChar ;
NoteValue ::= (ftn_normal::ε) | (ftn_separator::ε) | (ftn_continuation_separator::ε) | (ftn_continuation_notice::ε) ;
TablePrElt ::= tpe_tblElt::TableElt ;
TableCellPrElt ::= tcpe_tableCellElt::TableCellElt ;
NoteElt ::= Footnote ;
 NoteElt ::= Endnote ;
TableGridElt ::= tge_tblElt::TableElt ;
BreakType ::= (bt_page::ε) | (bt_column::ε) | (bt_text_wrapping::ε) ;
TabElt ::= Tab ;
 TabElt ::= ε ;
PictureType ::= Picture ;
 PictureType ::= ε ;
ListsElt ::= le_wordDocument::WordDocument ;
DelText ::= rce_rElt::RunElt val::String ;
BlockLevelChunkElt ::= ParaElt ;
 BlockLevelChunkElt ::= TableElt ;
 BlockLevelChunkElt ::= RunLevelElt ;
FldChar ::= rce_rElt::RunElt fldData::StringType fldCharType::FldCharTypeProperty fldLock::OnOffType ;
FootnoteRef ::= rce_rElt::RunElt ;
NoBreakHyphen ::= rce_rElt::RunElt ;
PgNum ::= rce_rElt::RunElt ;
HLinkElt ::= pce_pElt::ParaElt ;
FontsListElt ::= fle_wordDocument::WordDocument ;
ParaPrElt ::= ppe_pElt::ParaElt ;
ValueType ::= StringValue ;
 ValueType ::= FloatValue ;
 ValueType ::= DateTimeTypeValue ;
 ValueType ::= BooleanValue ;
CfChunk ::= ble_bodyElt::BodyElt ble_note::NoteElt ble_tableCellElt::TableCellElt ;
SectPrElt ::= spe_bodyElt::BodyElt ;
EndnoteRef ::= rce_rElt::RunElt ;
StringProperty ::= val::String ;
WordDocument ::= wd_smartTags::SmartTagsCollection wd_docProperties::DocumentPropertiesCollection wd_customDocProperties::CustomDocumentPropertiesCollection ignoreSubtree::StringProperty ignoreElements::StringProperty fonts::FontsListElt lists::ListsElt styles::StylesElt docPr::DocPrElt body::BodyElt ;
SmartTagsCollection ::= st_wordDocument::WordDocument (smartTagTypes::SmartTagType)+ ;
RunPrElt ::= rpe_rElt::RunElt ;
TableRowPrElt ::= tpe_rowElt::RowElt ;
TableElt ::= tblPr::TablePrElt tblGrid::TableGridElt (tblContent::TableContentElt)+ ;
TableCellElt ::= tce_rowContentElt::RowContentElt tcPr::TableCellPrElt (tce_content::BlockLevelElt)+ ;
CustomDocumentPropertiesCollection ::= cdp_wordDocument::WordDocument (customDocumentProperties::CustomDocumentProperty)+ ;
SoftHyphen ::= rce_rElt::RunElt ;
DateTimeTypeValue ::= value::DateTimeType ;
FldCharElt ::= FldChar ;
 FldCharElt ::= fldData::StringType fldCharType::FldCharTypeProperty fldLock::OnOffType ;
InstrText ::= rce_rElt::RunElt val::String ;
BlockLevelElt ::= BlockLevelChunkElt ;
 BlockLevelElt ::= CfChunk ;
SubDocElt ::= pce_pElt::ParaElt ;
FloatValue ::= value::Double ;
DateTimeType ::= year::Integer month::Integer day::Integer hour::Integer minute::Integer second::Integer ;
RunLevelElt ::= rle_tblContentElt::TableContentElt rle_rowContentElt::RowContentElt ;
ParaContentElt ::= RunElt ;
 ParaContentElt ::= SimpleFieldElt ;
 ParaContentElt ::= HLinkElt ;
 ParaContentElt ::= SubDocElt ;
RowElt ::= re_tblContentElt::TableContentElt tblPrEx::TablePrExElt trPr::TableRowPrElt (rowContent::RowContentElt)+ ;
DocPrElt ::= dpe_wordDocument::WordDocument ;
VersionType ::= n::Integer nn::Integer ;
RowContentElt ::= rce_rowElt::RowElt (tc::TableCellElt)+ rce_runLevelElts::RunLevelElt ;
ContinuationSeparator ::= rce_rElt::RunElt ;
DelInstrText ::= rce_rElt::RunElt val::String ;
BreakElt ::= type::BreakType ;
ParaElt ::= pPr::ParaPrElt (pContentElts::ParaContentElt)+ ;
DocumentPropertiesCollection ::= dp_wordDocument::WordDocument title::String subject::String keywords::String description::String category::String author::String lastAuthor::String manager::String company::String hyperlinkBase::String revision::Integer presentationFormat::String guid::String appName::String version::VersionType totalTime::Integer lastPrinted::DateTimeType created::DateTimeType lastSaved::DateTimeType pages::Integer words::Integer characters::Integer charactersWithSpaces::Integer bytes::Integer lines::Integer paragraphs::Integer ;
StylesElt ::= se_wordDocument::WordDocument ;
SmartTagType ::= smartTagType_ste::SmartTagsCollection namespaceuri::String name::String url::String ;
StringType ::= StringProperty ;
 StringType ::= Text ;
 StringType ::= DelText ;
 StringType ::= InstrText ;
 StringType ::= DelInstrText ;
 StringType ::= val::String ;
BodyElt ::= be_wordDocument::WordDocument (blockLevelElts::BlockLevelElt)+ sectPr::SectPrElt ;
TablePrExElt ::= tpee_rowElt::RowElt ;
OnOffType ::= (oot_on::ε) | (oot_off::ε) ;
BooleanValue ::= value::Boolean ;
SymElt ::= Symbol ;
 SymElt ::= font::StringType char::StringType ;
SimpleFieldElt ::= pce_pElt::ParaElt ;
AnnotationRef ::= rce_rElt::RunElt ;
FldCharTypeProperty ::= (fctp_begin::ε) | (fctp_separate::ε) | (fctp_end::ε) ;
TableContentElt ::= tce_tblElt::TableElt (tr::RowElt)+ tce_runLevelElts::RunLevelElt ;
RunElt ::= rPr::RunPrElt (rContentElts::RunContentElt)+ ;
CustomDocumentProperty ::= customDocumentProperty_cdpe::CustomDocumentPropertiesCollection name::String value::ValueType ;
StringValue ::= value::String ;
--------------------metamodels::MSProject.bgf--------------------
NamedElement ::= Task ;
MSProject ::= (tasks::Task)+ ;
--------------------metamodels::MSProject2.bgf--------------------
MSPTask ::= finishDate::Date startDate::Date project::MSPProject superTask::MSPTask (subTask::MSPTask)+ (assignment::MSPAssignment)+ (inLink::MSPLink)+ (outLink::MSPLink)+ ;
MSPProject ::= (resource::MSPResource)+ (link::MSPLink)+ (task::MSPTask)+ ;
MSPMachine ::= cost::Double project::MSPProject (assignment::MSPAssignment)+ ;
MSPResource ::= MSPHumanResource ;
 MSPResource ::= MSPMachine ;
 MSPResource ::= cost::Double project::MSPProject (assignment::MSPAssignment)+ ;
MSPAssignment ::= task::MSPTask resource::MSPResource ;
MSPLink ::= project::MSPProject succ::MSPTask pred::MSPTask ;
MSPHumanResource ::= email::String ;
--------------------metamodels::MTRANS.bgf--------------------
MetaModel ::= ε ;
MetaClass ::= ε ;
--------------------metamodels::MSVisio_DatadiagramMLBasicDef.bgf--------------------
SolutionXML ::= sx_visioDocument::VisioDocument ;
PageElt ::= ShapesCollection ;
 PageElt ::= ConnectsCollection ;
IXElt ::= XYElt ;
StringElt ::= value::String ;
PolylineTo ::= pt_geom::Geom ;
EventList ::= el_visioDocument::VisioDocument ;
EmailRoutingData ::= erd_visioDocument::VisioDocument data::String size::Integer ;
IdentifiedElt ::= MasterShortCut ;
 IdentifiedElt ::= Master ;
 IdentifiedElt ::= Page ;
WindowsInfo ::= ws_visioDocument::VisioDocument ;
SplineStart ::= ss_geom::Geom ;
PrintSetup ::= ps_visioDocument::VisioDocument ;
PageSheet ::= DocumentSheet ;
 PageSheet ::= ss_shapes::ShapesCollection lineStyle::Integer fillStyle::Integer textStyle::Integer (shapeElts::ShapeElt)+ ;
MastersCollection ::= ms_visioDocument::VisioDocument (masters::Master)+ (masterShortCuts::MasterShortCut)+ ;
LineTo ::= lt_geom::Geom ;
XYAElt ::= ArcTo ;
 XYAElt ::= SplineKnot ;
 XYAElt ::= PolylineTo ;
 XYAElt ::= XYABElt ;
XYElt ::= LineTo ;
 XYElt ::= MoveTo ;
 XYElt ::= XYAElt ;
ShapeElt ::= Text ;
 ShapeElt ::= Geom ;
XYABCDEElt ::= NURBSTo ;
XYABElt ::= InfiniteLine ;
 XYABElt ::= XYABCDElt ;
XYABCDElt ::= Ellipse ;
 XYABCDElt ::= EllipticalArcTo ;
 XYABCDElt ::= SplineStart ;
 XYABCDElt ::= XYABCDEElt ;
HeaderFooter ::= ef_visioDocument::VisioDocument ;
ConnectsCollection ::= (connections::Connect)+ ;
DocumentSheet ::= ds_visioDocument::VisioDocument ;
StyleSheetsCollection ::= sss_visioDocument::VisioDocument (stylesSheets::StyleSheet)+ ;
PagesCollection ::= ps_visioDocument::VisioDocument (pages::Page)+ ;
CustomPropertiesCollection ::= cps_docProp::DocumentPropertiesCollection (cps_customProps::CustomProperty)+ ;
VisioDocument ::= start::Integer key::String metric::Boolean buildnum::Integer version::String docLangId::Integer docProps::DocumentPropertiesCollection docSettings::DocumentSettingsElt docColors::ColorsTable docPrintSetup::PrintSetup docFonts::FontsTable docFaceNames::FaceNamesTable docStyleSheets::StyleSheetsCollection docDocumentSheet::DocumentSheet docMasters::MastersCollection docPages::PagesCollection docWindows::WindowsInfo docEventList::EventList docHeaderFooter::HeaderFooter docVBProjectData::VBProjectData docEmailRoutingData::EmailRoutingData (docSolutionXML::SolutionXML)+ ;
TextElt ::= StringElt ;
EllipticalArcTo ::= eat_geom::Geom ;
ColorsTable ::= cs_visioDocument::VisioDocument ;
CellType ::= unit::String formula::String err::String value::String ;
SplineKnot ::= sk_geom::Geom ;
NURBSTo ::= nt_geom::Geom ;
VBProjectData ::= vpd_visioDocument::VisioDocument data::String ;
DateTimeType ::= year::Integer month::Integer day::Integer hour::Integer minute::Integer second::Integer ;
NamedElt ::= DocumentSheet ;
 NamedElt ::= MasterShortCut ;
 NamedElt ::= Page ;
ShapesCollection ::= (shapes::Shape)+ ;
DocumentSettingsElt ::= dss_visioDocument::VisioDocument ;
StyleSheet ::= ss_stylesSheets::StyleSheetsCollection ;
ArcTo ::= ac_geom::Geom ;
DocumentPropertiesCollection ::= dps_visioDocument::VisioDocument title::String subject::String creator::String manager::String company::String category::String keywords::String description::String hyperlinkBase_href::String alternateNames::String template::String buildNumberCreated::String buildNumberEdited::String customProps::CustomPropertiesCollection timeCreated::DateTimeType timeSaved::DateTimeType timeEdited::DateTimeType timePrinted::DateTimeType ;
MoveTo ::= mt_geom::Geom ;
MasterElt ::= Icon ;
 MasterElt ::= ShapesCollection ;
 MasterElt ::= ConnectsCollection ;
FontsTable ::= fs_visioDocument::VisioDocument ;
MasterShortCut ::= m_masterShortCuts::MastersCollection iconSize::Integer patternFlags::Integer prompt::String shortcutURL::String shortcutHelp::String alignName::Integer (icons::Icon)+ ;
InfiniteLine ::= il_geom::Geom ;
CustomProperty ::= cp_customProps::CustomPropertiesCollection name::String dataType::String ;
FaceNamesTable ::= fns_visioDocument::VisioDocument ;
DelElt ::= XYElt ;
--------------------metamodels::MSVisio_DatadiagramMLSimplified.bgf--------------------
PageElt ::= ShapesCollection ;
 PageElt ::= ConnectsCollection ;
IXElt ::= XYElt ;
StringElt ::= value::String ;
CellType ::= unit::String formula::String err::String value::String ;
PolylineTo ::= pt_geom::Geom ;
SplineKnot ::= sk_geom::Geom ;
NURBSTo ::= nt_geom::Geom ;
NamedElt ::= MasterShortCut ;
 NamedElt ::= Page ;
IdentifiedElt ::= MasterShortCut ;
 IdentifiedElt ::= Master ;
 IdentifiedElt ::= Page ;
SplineStart ::= ss_geom::Geom ;
ShapesCollection ::= (shapes::Shape)+ ;
PageSheet ::= ss_shapes::ShapesCollection lineStyle::Integer fillStyle::Integer textStyle::Integer (shapeElts::ShapeElt)+ ;
MastersCollection ::= ms_visioDocument::VisioDocument (masters::Master)+ (masterShortCuts::MasterShortCut)+ ;
LineTo ::= lt_geom::Geom ;
ArcTo ::= ac_geom::Geom ;
XYAElt ::= ArcTo ;
 XYAElt ::= SplineKnot ;
 XYAElt ::= PolylineTo ;
 XYAElt ::= XYABElt ;
ShapeElt ::= Text ;
 ShapeElt ::= Geom ;
XYElt ::= LineTo ;
 XYElt ::= MoveTo ;
 XYElt ::= XYAElt ;
MoveTo ::= mt_geom::Geom ;
MasterElt ::= Icon ;
 MasterElt ::= ShapesCollection ;
 MasterElt ::= ConnectsCollection ;
XYABCDEElt ::= NURBSTo ;
XYABElt ::= InfiniteLine ;
 XYABElt ::= XYABCDElt ;
XYABCDElt ::= Ellipse ;
 XYABCDElt ::= EllipticalArcTo ;
 XYABCDElt ::= SplineStart ;
 XYABCDElt ::= XYABCDEElt ;
MasterShortCut ::= m_masterShortCuts::MastersCollection iconSize::Integer patternFlags::Integer prompt::String shortcutURL::String shortcutHelp::String alignName::Integer (icons::Icon)+ ;
InfiniteLine ::= il_geom::Geom ;
ConnectsCollection ::= (connections::Connect)+ ;
PagesCollection ::= ps_visioDocument::VisioDocument (pages::Page)+ ;
DelElt ::= XYElt ;
VisioDocument ::= docMasters::MastersCollection docPages::PagesCollection ;
TextElt ::= StringElt ;
EllipticalArcTo ::= eat_geom::Geom ;
--------------------metamodels::MSVisio_DatadiagramMLTextFormat.bgf--------------------
IXrequiredElt ::= ColorEntry ;
 IXrequiredElt ::= Cp ;
 IXrequiredElt ::= Pp ;
 IXrequiredElt ::= Tp ;
 IXrequiredElt ::= Fld ;
SolutionXML ::= sx_visioDocument::VisioDocument ;
PageElt ::= ShapesCollection ;
 PageElt ::= ConnectsCollection ;
IXElt ::= Tab ;
 IXElt ::= XYElt ;
StringElt ::= value::String ;
PolylineTo ::= pt_geom::Geom ;
EventList ::= el_visioDocument::VisioDocument ;
EmailRoutingData ::= erd_visioDocument::VisioDocument data::String size::Integer ;
IdentifiedElt ::= FontEntry ;
 IdentifiedElt ::= FaceName ;
 IdentifiedElt ::= MasterShortCut ;
 IdentifiedElt ::= Master ;
 IdentifiedElt ::= Page ;
WindowsInfo ::= ws_visioDocument::VisioDocument ;
SplineStart ::= ss_geom::Geom ;
PrintSetup ::= ps_visioDocument::VisioDocument ;
PageSheet ::= DocumentSheet ;
 PageSheet ::= ss_shapes::ShapesCollection lineStyle::Integer fillStyle::Integer textStyle::Integer (shapeElts::ShapeElt)+ ;
MastersCollection ::= ms_visioDocument::VisioDocument (masters::Master)+ (masterShortCuts::MasterShortCut)+ ;
LineTo ::= lt_geom::Geom ;
ColorEntry ::= ce_colors::ColorsTable rgb::String ;
XYAElt ::= ArcTo ;
 XYAElt ::= SplineKnot ;
 XYAElt ::= PolylineTo ;
 XYAElt ::= XYABElt ;
ShapeElt ::= Text ;
 ShapeElt ::= Geom ;
 ShapeElt ::= Char ;
 ShapeElt ::= Para ;
 ShapeElt ::= TabsCollection ;
 ShapeElt ::= Field ;
XYElt ::= LineTo ;
 XYElt ::= MoveTo ;
 XYElt ::= XYAElt ;
XYABCDEElt ::= NURBSTo ;
XYABElt ::= InfiniteLine ;
 XYABElt ::= XYABCDElt ;
XYABCDElt ::= Ellipse ;
 XYABCDElt ::= EllipticalArcTo ;
 XYABCDElt ::= SplineStart ;
 XYABCDElt ::= XYABCDEElt ;
HeaderFooter ::= ef_visioDocument::VisioDocument ;
FaceName ::= fn_faceNames::FaceNamesTable name::String unicodeRanges::String charSet::String panos::String flags::Integer ;
ConnectsCollection ::= (connections::Connect)+ ;
DocumentSheet ::= ds_visioDocument::VisioDocument ;
StyleSheetsCollection ::= sss_visioDocument::VisioDocument (stylesSheets::StyleSheet)+ ;
PagesCollection ::= ps_visioDocument::VisioDocument (pages::Page)+ ;
CustomPropertiesCollection ::= cps_docProp::DocumentPropertiesCollection (cps_customProps::CustomProperty)+ ;
VisioDocument ::= start::Integer key::String metric::Boolean buildnum::Integer version::String docLangId::Integer docProps::DocumentPropertiesCollection docSettings::DocumentSettingsElt docColors::ColorsTable docPrintSetup::PrintSetup docFonts::FontsTable docFaceNames::FaceNamesTable docStyleSheets::StyleSheetsCollection docDocumentSheet::DocumentSheet docMasters::MastersCollection docPages::PagesCollection docWindows::WindowsInfo docEventList::EventList docHeaderFooter::HeaderFooter docVBProjectData::VBProjectData docEmailRoutingData::EmailRoutingData (docSolutionXML::SolutionXML)+ ;
TextElt ::= StringElt ;
 TextElt ::= Cp ;
 TextElt ::= Pp ;
 TextElt ::= Tp ;
 TextElt ::= Fld ;
EllipticalArcTo ::= eat_geom::Geom ;
ColorsTable ::= cs_visioDocument::VisioDocument (colorEntries::ColorEntry)+ ;
TabsCollection ::= (tabs::Tab)+ ;
CellType ::= unit::String formula::String err::String value::String ;
SplineKnot ::= sk_geom::Geom ;
NURBSTo ::= nt_geom::Geom ;
VBProjectData ::= vpd_visioDocument::VisioDocument data::String ;
DateTimeType ::= year::Integer month::Integer day::Integer hour::Integer minute::Integer second::Integer ;
NamedElt ::= DocumentSheet ;
 NamedElt ::= MasterShortCut ;
 NamedElt ::= Page ;
ShapesCollection ::= (shapes::Shape)+ ;
DocumentSettingsElt ::= dss_visioDocument::VisioDocument ;
StyleSheet ::= ss_stylesSheets::StyleSheetsCollection ;
ArcTo ::= ac_geom::Geom ;
MoveTo ::= mt_geom::Geom ;
DocumentPropertiesCollection ::= dps_visioDocument::VisioDocument title::String subject::String creator::String manager::String company::String category::String keywords::String description::String hyperlinkBase_href::String alternateNames::String template::String buildNumberCreated::String buildNumberEdited::String customProps::CustomPropertiesCollection timeCreated::DateTimeType timeSaved::DateTimeType timeEdited::DateTimeType timePrinted::DateTimeType ;
MasterElt ::= Icon ;
 MasterElt ::= ShapesCollection ;
 MasterElt ::= ConnectsCollection ;
FontsTable ::= fs_visioDocument::VisioDocument (fontEntries::FontEntry)+ ;
MasterShortCut ::= m_masterShortCuts::MastersCollection iconSize::Integer patternFlags::Integer prompt::String shortcutURL::String shortcutHelp::String alignName::Integer (icons::Icon)+ ;
InfiniteLine ::= il_geom::Geom ;
CustomProperty ::= cp_customProps::CustomPropertiesCollection name::String dataType::String ;
FaceNamesTable ::= fns_visioDocument::VisioDocument (faceNameEntries::FaceName)+ ;
FontEntry ::= fe_fonts::FontsTable name::String charSet::String pitchAndFamily::String attributes::Integer weight::Integer unicode::Boolean ;
DelElt ::= XYElt ;
--------------------metamodels::MSVisio_DatadiagramMLXForm.bgf--------------------
IXrequiredElt ::= ColorEntry ;
 IXrequiredElt ::= Cp ;
 IXrequiredElt ::= Pp ;
 IXrequiredElt ::= Tp ;
 IXrequiredElt ::= Fld ;
SolutionXML ::= sx_visioDocument::VisioDocument ;
PageElt ::= ShapesCollection ;
 PageElt ::= ConnectsCollection ;
IXElt ::= Tab ;
 IXElt ::= XYElt ;
XForm ::= pinX::CellType pinY::CellType width::CellType height::CellType locPinX::CellType locPinY::CellType angle::CellType flipX::CellType flipY::CellType resizeMode::CellType ;
StringElt ::= value::String ;
PolylineTo ::= pt_geom::Geom ;
EventList ::= el_visioDocument::VisioDocument ;
EmailRoutingData ::= erd_visioDocument::VisioDocument data::String size::Integer ;
IdentifiedElt ::= FontEntry ;
 IdentifiedElt ::= FaceName ;
 IdentifiedElt ::= MasterShortCut ;
 IdentifiedElt ::= Master ;
 IdentifiedElt ::= Page ;
WindowsInfo ::= ws_visioDocument::VisioDocument ;
SplineStart ::= ss_geom::Geom ;
PageSheet ::= DocumentSheet ;
 PageSheet ::= ss_shapes::ShapesCollection lineStyle::Integer fillStyle::Integer textStyle::Integer (shapeElts::ShapeElt)+ ;
PrintSetup ::= ps_visioDocument::VisioDocument ;
MastersCollection ::= ms_visioDocument::VisioDocument (masters::Master)+ (masterShortCuts::MasterShortCut)+ ;
ColorEntry ::= ce_colors::ColorsTable rgb::String ;
LineTo ::= lt_geom::Geom ;
XYAElt ::= ArcTo ;
 XYAElt ::= SplineKnot ;
 XYAElt ::= PolylineTo ;
 XYAElt ::= XYABElt ;
ShapeElt ::= Text ;
 ShapeElt ::= Geom ;
 ShapeElt ::= Char ;
 ShapeElt ::= Para ;
 ShapeElt ::= TabsCollection ;
 ShapeElt ::= Field ;
 ShapeElt ::= XForm ;
XYElt ::= LineTo ;
 XYElt ::= MoveTo ;
 XYElt ::= XYAElt ;
XYABCDEElt ::= NURBSTo ;
XYABElt ::= InfiniteLine ;
 XYABElt ::= XYABCDElt ;
XYABCDElt ::= Ellipse ;
 XYABCDElt ::= EllipticalArcTo ;
 XYABCDElt ::= SplineStart ;
 XYABCDElt ::= XYABCDEElt ;
HeaderFooter ::= ef_visioDocument::VisioDocument ;
FaceName ::= fn_faceNames::FaceNamesTable name::String unicodeRanges::String charSet::String panos::String flags::Integer ;
ConnectsCollection ::= (connections::Connect)+ ;
DocumentSheet ::= ds_visioDocument::VisioDocument ;
StyleSheetsCollection ::= sss_visioDocument::VisioDocument (stylesSheets::StyleSheet)+ ;
PagesCollection ::= ps_visioDocument::VisioDocument (pages::Page)+ ;
CustomPropertiesCollection ::= cps_docProp::DocumentPropertiesCollection (cps_customProps::CustomProperty)+ ;
VisioDocument ::= start::Integer key::String metric::Boolean buildnum::Integer version::String docLangId::Integer docProps::DocumentPropertiesCollection docSettings::DocumentSettingsElt docColors::ColorsTable docPrintSetup::PrintSetup docFonts::FontsTable docFaceNames::FaceNamesTable docStyleSheets::StyleSheetsCollection docDocumentSheet::DocumentSheet docMasters::MastersCollection docPages::PagesCollection docWindows::WindowsInfo docEventList::EventList docHeaderFooter::HeaderFooter docVBProjectData::VBProjectData docEmailRoutingData::EmailRoutingData (docSolutionXML::SolutionXML)+ ;
TextElt ::= StringElt ;
 TextElt ::= Cp ;
 TextElt ::= Pp ;
 TextElt ::= Tp ;
 TextElt ::= Fld ;
EllipticalArcTo ::= eat_geom::Geom ;
ColorsTable ::= cs_visioDocument::VisioDocument (colorEntries::ColorEntry)+ ;
TabsCollection ::= (tabs::Tab)+ ;
CellType ::= unit::String formula::String err::String value::String ;
SplineKnot ::= sk_geom::Geom ;
NURBSTo ::= nt_geom::Geom ;
VBProjectData ::= vpd_visioDocument::VisioDocument data::String ;
DateTimeType ::= year::Integer month::Integer day::Integer hour::Integer minute::Integer second::Integer ;
NamedElt ::= DocumentSheet ;
 NamedElt ::= MasterShortCut ;
 NamedElt ::= Page ;
ShapesCollection ::= (shapes::Shape)+ ;
DocumentSettingsElt ::= dss_visioDocument::VisioDocument topPage::Page defaultTextStyle::StyleSheet defaultLineStyle::StyleSheet defaultFillStyle::StyleSheet defaultGuideStyle::StyleSheet glueSettings::Integer snapSettings::Integer snapExtensions::Integer ds_snapAngles::SnapAnglesCollection dynamicGridEnabled::Boolean protectStyles::Boolean protectShapes::Boolean protectMasters::Boolean protectBkgnds::Boolean customMenusFile::String customToolbarsFile::String attachedToolbars::String ;
StyleSheet ::= ss_stylesSheets::StyleSheetsCollection ;
ArcTo ::= ac_geom::Geom ;
MoveTo ::= mt_geom::Geom ;
DocumentPropertiesCollection ::= dps_visioDocument::VisioDocument title::String subject::String creator::String manager::String company::String category::String keywords::String description::String hyperlinkBase_href::String alternateNames::String template::String buildNumberCreated::String buildNumberEdited::String customProps::CustomPropertiesCollection timeCreated::DateTimeType timeSaved::DateTimeType timeEdited::DateTimeType timePrinted::DateTimeType ;
MasterElt ::= Icon ;
 MasterElt ::= ShapesCollection ;
 MasterElt ::= ConnectsCollection ;
FontsTable ::= fs_visioDocument::VisioDocument (fontEntries::FontEntry)+ ;
SnapAngle ::= sa_snapAngles::SnapAnglesCollection angleValue::Double ;
MasterShortCut ::= m_masterShortCuts::MastersCollection iconSize::Integer patternFlags::Integer prompt::String shortcutURL::String shortcutHelp::String alignName::Integer (icons::Icon)+ ;
InfiniteLine ::= il_geom::Geom ;
SnapAnglesCollection ::= sa_docSettings::DocumentSettingsElt (snapAngles::SnapAngle)+ ;
CustomProperty ::= cp_customProps::CustomPropertiesCollection name::String dataType::String ;
FaceNamesTable ::= fns_visioDocument::VisioDocument (faceNameEntries::FaceName)+ ;
FontEntry ::= fe_fonts::FontsTable name::String charSet::String pitchAndFamily::String attributes::Integer weight::Integer unicode::Boolean ;
DelElt ::= XYElt ;
 DelElt ::= XForm ;
--------------------metamodels::Mantis.bgf--------------------
PrivateElt ::= Issue ;
 PrivateElt ::= Note ;
TimeStampedElt ::= Attachment ;
 TimeStampedElt ::= Note ;
MantisRoot ::= (issues::Issue)+ ;
ValueWithId ::= Person ;
 ValueWithId ::= value::String ;
IdentifiedElt ::= ValueWithId ;
 IdentifiedElt ::= Relationship ;
 IdentifiedElt ::= Issue ;
RelationshipType ::= (rt_related to::ε) | (rt_parent of::ε) | (rt_child of::ε) | (rt_duplicate of::ε) | (rt_has duplicate::ε) ;
--------------------metamodels::Matlab.bgf--------------------
StateFlow ::= stateFlow::String (machines::Machine)+ simulink::Simulink ;
BlockDefaults ::= Block ;
 BlockDefaults ::= blockDefaults::String model::Model ;
INteger ::= value::String ;
DirectLine ::= destPort1::InputPort ;
DirectBranch ::= id::String destPort::InputPort ;
InputPort ::= owningDirectLine::DirectLine owningDirectBranch::DirectBranch ;
NestedBranch ::= (branchs::Branch)+ ;
BOolean ::= value::TrueFalse ;
LineDefaults ::= Line ;
 LineDefaults ::= lineDefaults::String model::Model ;
TrueFalse ::= (True::ε) | (False::ε) ;
BranchedLine ::= (branchs::Branch)+ ;
OutputPort ::= owningLine::Line ;
TransitionTerminal ::= _id::String ;
AnnotationDefaults ::= Annotation ;
 AnnotationDefaults ::= annotationDefaults::String model::Model ;
--------------------metamodels::Maude.bgf--------------------
MatchingCond ::= rhs::Term ;
SModule ::= (els::ModElement)+ (params::Parameter)+ ;
MaudeSpec ::= (els::MaudeTopEl)+ (printableEls::MaudeTopEl)+ ;
RecTerm ::= op::String (args::Term)+ ;
SubsortRel ::= (subsorts::Sort)+ (supersorts::Sort)+ ;
TheoryIdModExp ::= theory::Theory ;
LabelMapping ::= from::String to::String ;
ModElement ::= ModImportation ;
 ModElement ::= SubsortRel ;
 ModElement ::= Operation ;
 ModElement ::= Statement ;
 ModElement ::= Sort ;
ModExpression ::= InstModExp ;
 ModExpression ::= RenModExp ;
 ModExpression ::= CompModExp ;
 ModExpression ::= ModuleIdModExp ;
 ModExpression ::= TheoryIdModExp ;
 ModExpression ::= Parameter ;
MaudeTopEl ::= Theory ;
 MaudeTopEl ::= Module ;
 MaudeTopEl ::= View ;
EquationalCond ::= MembershipCond ;
 EquationalCond ::= BooleanCond ;
 EquationalCond ::= MatchingCond ;
 EquationalCond ::= EqualCond ;
MembershipCond ::= rhs::Sort ;
STheory ::= (els::ModElement)+ ;
EqualCond ::= rhs::Term ;
RenModExp ::= modExp::ModExpression (renamings::RenMapping)+ ;
RenMapping ::= SortMapping ;
 RenMapping ::= OpTypedMapping ;
 RenMapping ::= OpMapping ;
 RenMapping ::= LabelMapping ;
ImportationMode ::= (protecting::ε) | (including::ε) | (extending::ε) ;
FModule ::= (els::ModElement)+ (params::Parameter)+ ;
SortMapping ::= from::Sort to::String ;
RewriteCond ::= rhs::Term ;
ModImportation ::= imports::ModExpression mode::ImportationMode ;
OpMapping ::= from::Operation to::String ;
FTheory ::= (els::ModElement)+ ;
BooleanCond ::= ε ;
CompModExp ::= modExps::ModExpression ;
ViewMapping ::= RenMapping ;
 ViewMapping ::= TermMapping ;
OpTypedMapping ::= from::Operation to::String (atts::String)+ ;
TermMapping ::= from::Term to::Term ;
ModuleIdModExp ::= module::Module ;
InstModExp ::= modExp::ModExpression (views::View)+ ;
--------------------metamodels::MavenMaven.bgf--------------------
DocumentationTask ::= Javadoc ;
InExcludes ::= Includes ;
 InExcludes ::= Excludes ;
 InExcludes ::= IncludesFile ;
 InExcludes ::= ExcludesFile ;
AntProperty ::= AntPropertyName ;
 AntProperty ::= AntPropertyFile ;
 AntProperty ::= AntPropertyEnv ;
AntTaskDef ::= name::String classname::String ;
CompileTask ::= Javac ;
PathElement ::= path::String location::String ;
FiltersFile ::= file::String ;
PreGoal ::= centralGoal::Goal ;
PrePostGoal ::= PreGoal ;
 PrePostGoal ::= PostGoal ;
AbstractGoal ::= PrePostGoal ;
 AbstractGoal ::= Goal ;
MiscellaneousTask ::= Echo ;
 MiscellaneousTask ::= Tstamp ;
PostGoal ::= centralGoal::Goal ;
ContentsGoal ::= AntProperty ;
 ContentsGoal ::= JellyCommand ;
 ContentsGoal ::= AttainGoal ;
 ContentsGoal ::= Task ;
 ContentsGoal ::= AntTaskDef ;
JellyCommand ::= JellySet ;
 JellyCommand ::= JellyForEach ;
PreDefinedTask ::= ExecutionTask ;
 PreDefinedTask ::= MiscellaneousTask ;
 PreDefinedTask ::= CompileTask ;
 PreDefinedTask ::= DocumentationTask ;
 PreDefinedTask ::= ArchiveTask ;
 PreDefinedTask ::= FileTask ;
FilterSet ::= starttoken::String endtoken::String (filter::Filter)+ (filtersfile::FiltersFile)+ ;
AntPropertyName ::= AntPropertyValue ;
 AntPropertyName ::= AntPropertyLocation ;
FileSet ::= dir::String (patternset::PatternSet)+ (include::Includes)+ (exclude::Excludes)+ ;
NewTask ::= taskName::AntTaskDef (attributes::Attribut)+ ;
ExecutionTask ::= Exec ;
 ExecutionTask ::= Java ;
ClassPath ::= refid::String (pathElement::PathElement)+ (fileset::FileSet)+ ;
FileList ::= dir::String files::String ;
AttainGoal ::= attainGoal::Goal ;
AntPropertyFile ::= file::String ;
ExcludesFile ::= name::String ifCondition::String unless::String ;
AntPropertyValue ::= value::String ;
PatternSet ::= (inexcludes::InExcludes)+ ;
AntPropertyEnv ::= environment::String ;
AntPropertyLocation ::= location::String ;
JellyForEach ::= items::String var::String indexVar::String contents::ContentsGoal ;
ArchiveTask ::= Jar ;
IncludesFile ::= name::String ifCondition::String unless::String ;
FormatTstamp ::= property::String pattern::String offset::String unit::String locale::String ;
JellySet ::= var::String value::String ;
FileTask ::= Mkdir ;
 FileTask ::= Copy ;
 FileTask ::= Delete ;
--------------------metamodels::MavenProject.bgf--------------------
MailingList ::= name::String subscribe::String unsubscribe::String post::String archive::String otherArchives::String ;
--------------------metamodels::Measure.bgf--------------------
DoubleMeasure ::= value::Double ;
ModelKind ::= (KM3::ε) | (UML2::ε) ;
RootMeasureSet ::= modelType::ModelKind (categories::Category)+ (measureSets::MeasureSet)+ ;
PercentageMeasure ::= value::Double ;
MeasureSet ::= elementName::String elementType::ElementKind (measures::Measure)+ root::RootMeasureSet (subsets::MeasureSet)+ parent::MeasureSet ;
IntegerMeasure ::= value::Integer ;
ElementKind ::= (metamodel::ε) | (model::ε) | (package::ε) | (interface::ε) | (class::ε) ;
--------------------metamodels::Metrics.bgf--------------------
BooleanMetricValue ::= value::Boolean ;
IntegerMetricValue ::= value::Integer ;
MetricValue ::= StringMetricValue ;
 MetricValue ::= BooleanMetricValue ;
 MetricValue ::= IntegerMetricValue ;
 MetricValue ::= DoubleMetricValue ;
DoubleMetricValue ::= value::Double ;
StringMetricValue ::= value::String ;
--------------------metamodels::MoMM.bgf--------------------
ModelElement ::= Attribute ;
 ModelElement ::= Relationship ;
 ModelElement ::= level::Integer name::String potency::String hasClass::ModelElement (classElement::ModelElement)+ elementTarget::Relationship elementSource::Relationship (attributes::Attribute)+ attType::Attribute ;
--------------------metamodels::MiningMart_SimplifiedMetamodel.bgf--------------------
ColumnSet ::= name::String (attributes::Attribute)+ ;
StructuralFeature ::= Attribute ;
DomainDataType ::= attribute::Attribute ;
RoleRestriction ::= class::Class has::DataType ;
FeatureAttribute ::= class::Class has::DataType ;
DataType ::= Integer ;
 DataType ::= String ;
 DataType ::= DomainDataType ;
 DataType ::= attribute::Attribute ;
ModelElement ::= Classifier ;
 ModelElement ::= StructuralFeature ;
 ModelElement ::= Classifier | StructuralFeature ;
--------------------metamodels::MiningMart_ViewCaseRepresentation.bgf--------------------
MSL-Tool ::= source::DataObject target::DataObject ;
SQLQuery ::= transformationGroup::TransformationGroup ;
StructuralFeature ::= Attribute ;
TransformationGroup ::= (transformation::Transformation)+ ;
FeatureSelection ::= loopable::Boolean numberOfInputParameters::Integer numberOfOutputParameters::Integer manual::Boolean tool::String (input::Parameter)+ (output::Parameter)+ realizes::ExecutionElement ;
DataMinStep ::= loopable::Boolean numberOfInputParameters::Integer numberOfOutputParameters::Integer manual::Boolean tool::String (input::Parameter)+ (output::Parameter)+ realizes::ExecutionElement ;
ModelElement ::= Case ;
 ModelElement ::= Step ;
 ModelElement ::= Operator ;
 ModelElement ::= Classifier ;
 ModelElement ::= StructuralFeature ;
 ModelElement ::= Case | Step | Operator | Classifier | StructuralFeature ;
RowSelection ::= Segmentation ;
 RowSelection ::= Sampling ;
 RowSelection ::= Segmentation | Sampling ;
TimeOperator ::= loopable::Boolean numberOfInputParameters::Integer numberOfOutputParameters::Integer manual::Boolean tool::String (input::Parameter)+ (output::Parameter)+ realizes::ExecutionElement ;
StoredProcedure ::= nameOf::String signature::String ;
LoopStep ::= name::String description::String belongsToCase::Case embedsOperator::Operator (predecessors::Step)+ (successors::Step)+ ;
DataObject ::= source::ExecutionElement target::ExecutionElement ;
FeatureConstruction ::= Scaling ;
 FeatureConstruction ::= Discretization ;
 FeatureConstruction ::= scalingFactor::Integer ;
MultiRelFeatureConstr ::= Agregation ;
MultiStep ::= iterationCondition::String ;
DataType ::= attribute::Attribute ;
ExecutionElement ::= MSL-Tool ;
 ExecutionElement ::= TransformationGroup ;
 ExecutionElement ::= Transformation ;
 ExecutionElement ::= source::DataObject target::DataObject ;
ParameterType ::= (Value::ε) | (Concept::ε) | (RelationShip::ε) | (FeatureAttribute::ε) ;
--------------------metamodels::MoDAF-AV.bgf--------------------
ArchitecturalDescription ::= approvialAuthority::String architect::String assumptionAndConstraints::String creatingOrganisation::String dateCompleted::String purpose::String recommendations::String summaryOfFindings::String tollsUsed::String (viewpoints::View)+ (products::ArchitecturalProduct)+ taxonomy::Taxonomy ;
ProjectThreadType ::= taxonomy::Taxonomy ;
NodeConnectionType ::= taxonomy::Taxonomy ;
PostType ::= taxonomy::Taxonomy ;
OperationalMission ::= name::String content::String ;
OrganisationProjectRelationship ::= taxonomy::Taxonomy ;
SystemConnectionSpecification ::= taxonomy::Taxonomy ;
MeasurableProperty ::= maxValue::LiteralSpecification minValue::LiteralSpecification ;
RoleInOrganisation ::= taxonomy::Taxonomy ;
LiteralSpecification ::= value::String ;
OrganisationType ::= taxonomy::Taxonomy ;
ProjectType ::= taxonomy::Taxonomy ;
DataElement ::= taxonomy::Taxonomy ;
ArchitecturalProduct ::= description::String (architecturalElements::Elements)+ definingView::View (addresses::Concern)+ ;
InformationElement ::= taxonomy::Taxonomy ;
InformationExchange ::= identifier::String requirementText::String ;
LocationType ::= taxonomy::Taxonomy ;
MetaData ::= ArchitectureMetaData ;
 MetaData ::= dublinCoreElement::String modMetaDataElement::String name::String body::String ;
EnduringTask ::= taxonomy::Taxonomy ;
OperationalConstraint ::= nodeUsageContext::Property ;
ArchitecturalReference ::= referred::ArchitecturalDescription referrer::ArchitecturalDescription ;
StakeholderHasConcern ::= client::Stakeholder supplier::Concern owner::MoDAFModel ;
CapabilityRequirement ::= taxonomy::Taxonomy ;
ClassifiedElement ::= Environment ;
 ClassifiedElement ::= Standard ;
 ClassifiedElement ::= MeasurableProperty ;
 ClassifiedElement ::= CapabilityRequirement ;
 ClassifiedElement ::= Effect ;
 ClassifiedElement ::= EnduringTask ;
 ClassifiedElement ::= OperationalConstraint ;
 ClassifiedElement ::= PostType ;
 ClassifiedElement ::= OrganisationType ;
 ClassifiedElement ::= RoleInOrganisation ;
 ClassifiedElement ::= LocationType ;
 ClassifiedElement ::= OperationalActivity ;
 ClassifiedElement ::= Node ;
 ClassifiedElement ::= InformationExchange ;
 ClassifiedElement ::= Competence ;
 ClassifiedElement ::= InformationElement ;
 ClassifiedElement ::= NodeConnectionType ;
 ClassifiedElement ::= System ;
 ClassifiedElement ::= DataElement ;
 ClassifiedElement ::= SystemFunction ;
 ClassifiedElement ::= SystemConnectionSpecification ;
 ClassifiedElement ::= ProjectType ;
 ClassifiedElement ::= Service ;
 ClassifiedElement ::= Unit ;
 ClassifiedElement ::= Dimension ;
 ClassifiedElement ::= OrganisationProjectRelationship ;
 ClassifiedElement ::= ProjectThreadType ;
SystemFunction ::= systemUsageContext::Property ;
TimeExpression ::= value::String ;
ArchitectureMetaData ::= annotatedArchitecture::ArchitecturalDescription ;
MoDAFModel ::= enterprise::Enterprise environment::Environment (operationalMissions::OperationalMission)+ (architectures::Architecture)+ (architecturalDescription::ArchitecturalDescription)+ (architecturalReferences::ArchitecturalReference)+ (architecturalFrameworks::ArchitecturalFramework)+ (architectureMetadatas::ArchitectureMetaData)+ (metaDatas::MetaData)+ (stakeholders::Stakeholder)+ (stakeholderHasConcerns::StakeholderHasConcern)+ ;
OperationalActivity ::= taxonomy::Taxonomy ;
ArchitecturalFramework ::= (ownedMember::View)+ ;
--------------------metamodels::MiningMart_ViewDataRepresentation.bgf--------------------
UserInput ::= (containsValues::Value)+ ;
ColumnSetStatistics ::= allNumber::Integer ordinalNumber::Integer nominalNumber::Integer timeNumber::Integer forColumnSet::ColumnSet ;
KeyAttribute ::= TimeGroup ;
 KeyAttribute ::= Spatial ;
 KeyAttribute ::= TimeGroup | Spatial ;
PrimaryKey ::= isUsedForIndex::Boolean (hasColumn::Column)+ isAssociatedToColumnSet::ColumnSet ;
ColumnSet ::= Snapshot ;
 ColumnSet ::= Table ;
 ColumnSet ::= View ;
 ColumnSet ::= number::Integer file::String dbConnectString::String user::String (hasColumn::Column)+ (hasKey::Key)+ correspondsToConcept::Concept correspondsToRelationShip::RelationShip ;
BaseAttribute ::= isPartMultiColumnFeature::MultiColumnFeature domainDataType::DomainDataType ;
ForeignKey ::= isConnectionTo::Table correspondsToRelationShip::RelationShip ;
ColumnStatistics ::= unique::Integer missing::Integer min::Integer max::Integer average::Integer standarDeviation::Integer distributionValue::String distributionCount::Integer distributionMin::Integer distributionMax::Integer forColumn::Column ;
StructuralFeature ::= Attribute ;
DomainDataType ::= Ordinal ;
 DomainDataType ::= Nominal ;
 DomainDataType ::= baseAttributeD::BaseAttribute ;
RelationShip ::= name::String subRelationShipRestriction::String defined::String isA::RelationShip (correspondsToForeignKey::ForeignKey)+ correspondsToColumnSet::ColumnSet FromConcept::Concept ToConcept::Concept ;
MultiColumnFeature ::= (consitsOfBaseAttributes::BaseAttribute)+ ;
RoleRestriction ::= name::String restrictionForRelationShip::RelationShip restrictionForConcept::Concept restrictionToConcept::Concept min::Integer max::Integer belongsToConcept::Concept ;
FeatureAttribute ::= BaseAttribute ;
 FeatureAttribute ::= MultiColumnFeature ;
 FeatureAttribute ::= name::String relevanceForMining::Boolean attributeType::DataType belongsToConcept::Concept (correspondsToColumns::Column)+ ;
DataType ::= DomainDataType ;
 DataType ::= attribute::Attribute ;
ModelElement ::= Classifier ;
 ModelElement ::= StructuralFeature ;
 ModelElement ::= ColumnSetStatistics ;
 ModelElement ::= Key ;
 ModelElement ::= RelationShip ;
 ModelElement ::= Classifier | StructuralFeature | ColumnSetStatistics | Key ;
TimeGroup ::= ε ;
--------------------metamodels::PASSI.bgf--------------------
FIPA-platform Task ::= fipa_platform_Agent::Solution Domain/FIPA-Platform Agent task::Agency Domain/Task ;
AIP ::= Name::String performative::Agency Domain/Performative ;
Non functionnal Requirement ::= ε ;
FIPA-Platform Agent ::= (fipa_platform_Task::Solution Domain/FIPA-platform Task)+ agent::Agency Domain/Agent ;
--------------------metamodels::MonitorProgram.bgf--------------------
IntegerExp ::= symbol::Integer ;
LiteralExp ::= BooleanExp ;
 LiteralExp ::= IntegerExp ;
VariableDeclaration ::= Parameter ;
 VariableDeclaration ::= type::Type initialValue::Expression structure::Structure ;
ExpressionStat ::= expression::Expression ;
ProcedureCallExp ::= (arguments::Expression)+ ;
OperatorCallExp ::= right::Expression ;
ConditionalStat ::= condition::Expression (thenStats::Statement)+ (elseStats::Statement)+ ;
PropertyCallExp ::= OperatorCallExp ;
 PropertyCallExp ::= AttributeCallExp ;
 PropertyCallExp ::= ProcedureCallExp ;
LocatedElement ::= NamedElement ;
 LocatedElement ::= Expression ;
 LocatedElement ::= Statement ;
WhileStat ::= condition::Expression (doStats::Statement)+ ;
BooleanExp ::= symbol::Boolean ;
AttributeCallExp ::= source::Expression name::String ;
NamedElement ::= Structure ;
 NamedElement ::= VariableDeclaration ;
 NamedElement ::= Type ;
AssignmentStat ::= target::VariableExp value::Expression ;
VariableExp ::= declaration::VariableDeclaration ;
ProcContainerElement ::= Program ;
 ProcContainerElement ::= Monitor ;
--------------------metamodels::MySQL.bgf--------------------
DataBase ::= (tables::Table)+ ;
EnumColumn ::= enumSet::EnumSet ;
EnumItem ::= enumSet::EnumSet ;
IntegerColumn ::= isAutoIncrement::Boolean ;
NamedElement ::= DataBase ;
 NamedElement ::= Table ;
 NamedElement ::= Column ;
 NamedElement ::= EnumItem ;
EnumSet ::= (enumItems::EnumItem)+ ;
--------------------metamodels::News.bgf--------------------
DayKind ::= (Monday::ε) | (Tuesday::ε) | (Wednesday::ε) | (Thursday::ε) | (Friday::ε) | (Saturday::ε) | (Sunday::ε) ;
--------------------metamodels::ODP-CV.bgf--------------------
StreamInterfaceSignature ::= (strisig_to_fsig::FlowSignature)+ ;
InterfaceSignature ::= SignalInterfaceSignature ;
 InterfaceSignature ::= OperationInterfaceSignature ;
 InterfaceSignature ::= StreamInterfaceSignature ;
StreamInterface ::= owner_i::ComputationalObject i_to_bd::Binding specifier_i::ComputationalInterfaceTemplate (i_to_ina::Interaction)+ ;
TerminationSignature ::= tersig_to_intsig::InterrogationSignature ;
InternalAction ::= (constrainer_ec::EnvironmentContract)+ (changedState::State)+ specifier_a::ActionTemplate a_to_bh::Behaviour ;
OperationInterface ::= owner_i::ComputationalObject i_to_bd::Binding specifier_i::ComputationalInterfaceTemplate (i_to_ina::Interaction)+ ;
SignalInterface ::= owner_i::ComputationalObject i_to_bd::Binding specifier_i::ComputationalInterfaceTemplate (i_to_ina::Interaction)+ ;
AnnouncementSignature ::= ansig_to_optisig::OperationInterfaceSignature ;
InterrogationSignature ::= intsig_to_optisig::OperationInterfaceSignature (intsig_to_tersig::TerminationSignature)+ ;
ComputationalObject ::= BindingObject ;
 ComputationalObject ::= (co_to_i::Interface)+ co_to_bh::Behaviour specifier_co::ComputationalObjectTemplate co_to_st::State ;
ActionTemplate ::= (at_to_a::Action)+ at_to_isig::InteractionSignature ;
SignalSignature ::= ssig_to_sgisig::SignalInterfaceSignature ;
ComputationalTemplate ::= ComputationalObjectTemplate ;
 ComputationalTemplate ::= ComputationalInterfaceTemplate ;
ComputationalObjectTemplate ::= (cot_to_co::ComputationalObject)+ (part_provide::ComputationalInterfaceTemplate)+ (part_request::ComputationalInterfaceTemplate)+ ;
FlowSignature ::= fsig_to_strisig::StreamInterfaceSignature ;
SignalInterfaceSignature ::= (sgisig_to_ssig::SignalSignature)+ ;
InteractionSignature ::= AnnouncementSignature ;
 InteractionSignature ::= InterrogationSignature ;
 InteractionSignature ::= TerminationSignature ;
 InteractionSignature ::= SignalSignature ;
 InteractionSignature ::= FlowSignature ;
OperationInterfaceSignature ::= (optisig_to_ansig::AnnouncementSignature)+ (optisig_to_intsig::InterrogationSignature)+ ;
EnvironmentContract ::= (ec_to_a::Action)+ specifier_ec::ComputationalTemplate ;
BindingObject ::= (co_to_i::Interface)+ co_to_bh::Behaviour specifier_co::ComputationalObjectTemplate co_to_st::State ;
ComputationalInterfaceTemplate ::= (cit_to_i::Interface)+ (aggregate_provide::ComputationalObjectTemplate)+ (aggregate_request::ComputationalObjectTemplate)+ cit_to_intsig::InterfaceSignature ;
--------------------metamodels::ODP-EV.bgf--------------------
EO_A_R ::= (eoarSubject::EnterpriseObject)+ (eoarSubjectRole::Role)+ (eoarGovernor::AssigmentPolicy)+ ;
InterfaceRole ::= roleBehaviour::Behaviour roleSpecifier::Community (rolefillers::EnterpriseObject)+ (roleConstrainer::Policy)+ (roleEOAR::EO_A_R)+ ;
AssigmentPolicy ::= (apEOAR::EO_A_R)+ ;
PolicyValue ::= pvValue::PolicyEnvelope ;
FieldOfApplication ::= faEnterpriseSpecifications::EnterpriseSpecification ;
AccountableAction ::= Prescription ;
 AccountableAction ::= Commitment ;
 AccountableAction ::= Declaration ;
 AccountableAction ::= Evaluation ;
 AccountableAction ::= Delegation ;
ODPSystem ::= odpBehaviour::Scope (odpObjectives::Objective)+ odpSpecifier::EnterpriseSpecification ;
CommunityObject ::= cobjRefinement::Community ;
PolicyEnvelope ::= pePolicySetter::Behaviour peBehaviour::Behaviour (peValues::PolicyValue)+ peCurrentValue::PolicyValue ;
EnterpriseSpecification ::= (esDescribedSystems::ODPSystem)+ esContext::FieldOfApplication ;
EO_P_D ::= eopdAgent::EnterpriseObject eopdPrincipal::Party eopdAction::Delegation ;
EnterpriseObject ::= ODPSystem ;
 EnterpriseObject ::= Party ;
 EnterpriseObject ::= CommunityObject ;
 EnterpriseObject ::= (eoConfigurations::Community)+ (eoRoles::Role)+ (eoArtefactActions::Action)+ (eoResourceActions::Action)+ (eoActorActions::Action)+ (eoPolicy::Policy)+ (eoEOAR::EO_A_R)+ eoEOPD::EO_P_D ;
--------------------metamodels::ODP-IV.bgf--------------------
StaticSchema ::= locationTime::Double (SS_IO::InformationObject)+ ;
InformationObject ::= (describer::StaticSchema)+ (IO_IOT::InformationObjectTemplate)+ (IO_IOTy::InformationObjectType)+ (IO_A::Action)+ IO_S::State ;
InformationObjectType ::= (IOTy_IO::InformationObject)+ (IOTy_constrainer::InvariantSchema)+ ;
InformationObjectTemplate ::= (IOT_IO::InformationObject)+ (IOT_constrainer::InvariantSchema)+ ;
StateChange ::= startState::State endState::State (specifier::DynamicSchema)+ (cause::Action)+ (SC_constrainer::InvariantSchema)+ ;
InvariantSchema ::= (constrainer_AT::ActionTemplate)+ (constrainer_ATy::ActionType)+ (constrainer_SC::StateChange)+ (constrainer_S::State)+ (constrainer_IOT::InformationObjectTemplate)+ (constrainer_IOTy::InformationObjectType)+ ;
ActionTemplate ::= (AT_A::Action)+ (AT_constrainer::InvariantSchema)+ ;
ActionType ::= (ATy_A::Action)+ (ATy_constrainer::InvariantSchema)+ ;
DynamicSchema ::= (dsStateChange::StateChange)+ ;
--------------------metamodels::ODP-NV.bgf--------------------
NamingAuthority ::= (coDomain::Domain)+ ;
EngineeringInterfaceReferenceManagementPolicy ::= (eirmpManagementDomain::EngineeringInterfaceReferenceManagementDomain)+ ;
ProtocolObject ::= type::String poChannel::Channel poBinder::Binder (poInterceptor::Interceptor)+ (poBoundProtocolObject::ProtocolObject)+ ;
AddressingAuthority ::= (coDomain::Domain)+ ;
ClientServerChannel ::= chStub::Stub chBinder::Binder chPObject::ProtocolObject (chInterceptor::Interceptor)+ chEndPoint::BEO ;
ClusterManager ::= (clusters::Cluster)+ (clustermanagerBeos::BEO)+ capsuleManager::CapsuleManager ;
AddressingDomain ::= parentDomain::Domain (subDomain::Domain)+ domControllingObject::ControllingObject (domMember::ControlledObject)+ ;
ControllingObject ::= SecurityAuthority ;
 ControllingObject ::= ManagementAuthority ;
 ControllingObject ::= AddressingAuthority ;
 ControllingObject ::= NamingAuthority ;
 ControllingObject ::= (coDomain::Domain)+ ;
EngineeringObject ::= Nucleus ;
 EngineeringObject ::= CapsuleManager ;
 EngineeringObject ::= ClusterManager ;
 EngineeringObject ::= BEO ;
 EngineeringObject ::= Stub ;
 EngineeringObject ::= Binder ;
 EngineeringObject ::= ProtocolObject ;
 EngineeringObject ::= Interceptor ;
 EngineeringObject ::= ControllingObject ;
 EngineeringObject ::= ControlledObject ;
 EngineeringObject ::= nodeManager::Nucleus ;
ControlledObject ::= (cdoDomain::Domain)+ ;
EngineeringInterfaceReferenceManagementDomain ::= (eirmdReference::EngineeringInterfaceReference)+ eirmdManagementPolicy::EngineeringInterfaceReferenceManagementPolicy ;
NamingDomain ::= EngineeringInterfaceReferenceManagementDomain ;
BEO ::= beoNodeManager::Nucleus (locallyBoundObjects::BEO)+ (localbinds::BEO)+ beoManager::ClusterManager (beoChannel::Channel)+ (beoStub::Stub)+ ;
ManagementDomain ::= parentDomain::Domain (subDomain::Domain)+ domControllingObject::ControllingObject (domMember::ControlledObject)+ ;
EngineeringInterfaceReference ::= eirManagementDomain::EngineeringInterfaceReferenceManagementDomain ;
SecurityDomain ::= parentDomain::Domain (subDomain::Domain)+ domControllingObject::ControllingObject (domMember::ControlledObject)+ ;
SecurityAuthority ::= (coDomain::Domain)+ ;
ManagementAuthority ::= (coDomain::Domain)+ ;
CapsuleManager ::= (cmClusterManagers::ClusterManager)+ ;
--------------------metamodels::ODP-TV.bgf--------------------
TechnologyObject ::= (implStandard::ImplementableStandard)+ (toImplementation::Implementation)+ ;
ImplementableStandard ::= (techObject::TechnologyObject)+ ;
IXIT ::= (ixitImplementation::Implementation)+ ;
--------------------metamodels::OWL.bgf--------------------
AllValuesFromRestriction ::= OWLAllValuesFromDataRange::OWLDataRange OWLAllValuesFromClass::OWLClass ;
CardinalityRestriction ::= OWLCardinality::TypedLiteral ;
RDFStatement ::= OWLStatement ;
 RDFStatement ::= reificationKind::ReificationKind (graph::RDFGraph)+ RDFpredicate::RDFProperty RDFobject::RDFSResource RDFsubject::RDFSResource (nameForReification::URIReference)+ (document::Document)+ ;
TransitiveProperty ::= OWLInverseOf::OWLObjectProperty (inverseProperty::OWLObjectProperty)+ ;
RDFSClass ::= RDFSDataType ;
 RDFSClass ::= OWLClass ;
 RDFSClass ::= OWLDataRange ;
 RDFSClass ::= (subClassOf::RDFSClass)+ (superClass::RDFSClass)+ (typedResource::RDFSResource)+ (propertyForDomain::RDFProperty)+ (propertyForRange::RDFProperty)+ ;
OWLObjectProperty ::= InverseFunctionalProperty ;
 OWLObjectProperty ::= SymmetricProperty ;
 OWLObjectProperty ::= TransitiveProperty ;
 OWLObjectProperty ::= OWLInverseOf::OWLObjectProperty (inverseProperty::OWLObjectProperty)+ ;
EnumeratedClass ::= (OWLOneOf::Individual)+ ;
XMLLiteral ::= datatypeURI::URIReference (cardinalityRestriction::CardinalityRestriction)+ (minCardinalityRestriction::MinCardinalityRestriction)+ (maxCardinalityRestriction::MaxCardinalityRestriction)+ ;
LocalName ::= name::String document::Document (uriRef::URIReference)+ ;
HasValueRestriction ::= OWLHasLiteralValue::RDFSLiteral OWLHasIndividualValue::Individual ;
OWLClass ::= IntersectionClass ;
 OWLClass ::= UnionClass ;
 OWLClass ::= ComplementClass ;
 OWLClass ::= EnumeratedClass ;
 OWLClass ::= OWLRestriction ;
 OWLClass ::= OWLAllDifferent ;
 OWLClass ::= isDeprecated::Boolean (OWLequivalentClass::OWLClass)+ (equivalentClass::OWLClass)+ (OWLdisjointWith::OWLClass)+ (disjointClass::OWLClass)+ (intersectionClass::IntersectionClass)+ (unionClass::UnionClass)+ (complementClass::ComplementClass)+ (allValuesFromRestrictionClass::AllValuesFromRestriction)+ (someValuesFromRestrictionClass::SomeValuesFromRestriction)+ ;
MinCardinalityRestriction ::= OWLMinCardinality::TypedLiteral ;
RDFSLiteral ::= PlainLiteral ;
 RDFSLiteral ::= TypedLiteral ;
 RDFSLiteral ::= lexicalForm::String (restrictionClass::HasValueRestriction)+ (dataRange::OWLDataRange)+ ;
OWLDataRange ::= datatype::RDFSDataType (OWLOneOf::RDFSLiteral)+ someValuesFromRestrictionClass::SomeValuesFromRestriction allValuesFromRestrictionClass::AllValuesFromRestriction ;
NamespaceDefinition ::= namespacePrefix::String document::Document namespace::Namespace ;
RDFSResource ::= Document ;
 RDFSResource ::= RDFGraph ;
 RDFSResource ::= List ;
 RDFSResource ::= Container ;
 RDFSResource ::= RDFProperty ;
 RDFSResource ::= RDFStatement ;
 RDFSResource ::= URIReferenceNode ;
 RDFSResource ::= BlankNode ;
 RDFSResource ::= RDFSClass ;
 RDFSResource ::= RDFSLiteral ;
 RDFSResource ::= OWLOntology ;
 RDFSResource ::= OWLUniverse ;
 RDFSResource ::= Individual ;
 RDFSResource ::= (uriRef::URIReference)+ (subjectStatement::RDFStatement)+ (objectStatement::RDFStatement)+ (label::PlainLiteral)+ (type::RDFSClass)+ (comment::PlainLiteral)+ (seeAlso::RDFSResource)+ (referringResource::RDFSResource)+ (isDefinedBy::RDFSResource)+ (definedResource::RDFSResource)+ (member::RDFSResource)+ (container::RDFSResource)+ (list::List)+ ;
OWLStatement ::= (ontology::OWLOntology)+ (owlGraph::OWLGraph)+ ;
InverseFunctionalProperty ::= OWLInverseOf::OWLObjectProperty (inverseProperty::OWLObjectProperty)+ ;
OWLAnnotationProperty ::= (predicateStatement::RDFStatement)+ (subPropertyOf::RDFProperty)+ (superProperty::RDFProperty)+ (domain::RDFSClass)+ (range::RDFSClass)+ (propertyRestriction::OWLRestriction)+ (ontology::OWLOntology)+ ;
PlainLiteral ::= language::String labeledResource::RDFSResource commentedResource::RDFSResource ;
RDFSDataType ::= (dataRange::OWLDataRange)+ ;
URIReference ::= UniformResourceIdentifier ;
 URIReference ::= uri::UniformResourceIdentifier resource::RDFSResource (literal::TypedLiteral)+ namedGraph::RDFGraph (reifiedStatement::RDFStatement)+ fragmentIdentifier::LocalName namespace::Namespace ;
ReificationKind ::= (none::ε) | (reifiedOnly::ε) | (reified::ε) ;
OWLDatatypeProperty ::= isDeprecated::Boolean (OWLEquivalentProperty::Property)+ (equivalentProperty::Property)+ ;
OWLAllDifferent ::= OWLDistinctMembers::Individual ;
RDFGraph ::= OWLGraph ;
 RDFGraph ::= graphName::URIReference (statement::RDFStatement)+ ;
FunctionalProperty ::= isDeprecated::Boolean (OWLEquivalentProperty::Property)+ (equivalentProperty::Property)+ ;
BlankNode ::= nodeId::String ;
OWLOntology ::= (owlUniverse::OWLUniverse)+ (OWLPriorVersion::OWLOntology)+ (newerOntology::OWLOntology)+ (OWLIncompatibleWith::OWLOntology)+ (incompatibleOntology::OWLOntology)+ (OWLImports::OWLOntology)+ (importingOntology::OWLOntology)+ (owlGraph::OWLGraph)+ (owlStatement::OWLStatement)+ (versionInfo::RDFSLiteral)+ ;
ComplementClass ::= (OWLComplementOf::OWLClass)+ ;
IntersectionClass ::= (OWLIntersectionOf::OWLClass)+ ;
SymmetricProperty ::= OWLInverseOf::OWLObjectProperty (inverseProperty::OWLObjectProperty)+ ;
SomeValuesFromRestriction ::= OWLSomeValuesFromClass::OWLClass OWLSomeValuesFromDataRange::OWLDataRange ;
ContainerMembershipProperty ::= ε ;
UniformResourceIdentifier ::= name::String (uriRef::URIReference)+ ;
OWLGraph ::= (ontology::OWLOntology)+ (owlStatement::OWLStatement)+ ;
UnionClass ::= (OWLUnionOf::OWLClass)+ ;
OWLUniverse ::= OWLClass ;
 OWLUniverse ::= OWLAnnotationProperty ;
 OWLUniverse ::= OWLOntologyProperty ;
 OWLUniverse ::= Property ;
 OWLUniverse ::= Individual ;
 OWLUniverse ::= OWLDataRange ;
 OWLUniverse ::= (ontology::OWLOntology)+ ;
RDFProperty ::= OWLAnnotationProperty ;
 RDFProperty ::= OWLOntologyProperty ;
 RDFProperty ::= Property ;
 RDFProperty ::= (predicateStatement::RDFStatement)+ (subPropertyOf::RDFProperty)+ (superProperty::RDFProperty)+ (domain::RDFSClass)+ (range::RDFSClass)+ (propertyRestriction::OWLRestriction)+ ;
OWLOntologyProperty ::= (predicateStatement::RDFStatement)+ (subPropertyOf::RDFProperty)+ (superProperty::RDFProperty)+ (domain::RDFSClass)+ (range::RDFSClass)+ (propertyRestriction::OWLRestriction)+ (ontology::OWLOntology)+ ;
OWLRestriction ::= HasValueRestriction ;
 OWLRestriction ::= AllValuesFromRestriction ;
 OWLRestriction ::= SomeValuesFromRestriction ;
 OWLRestriction ::= CardinalityRestriction ;
 OWLRestriction ::= MaxCardinalityRestriction ;
 OWLRestriction ::= MinCardinalityRestriction ;
 OWLRestriction ::= OWLOnProperty::RDFProperty ;
TypedLiteral ::= XMLLiteral ;
 TypedLiteral ::= datatypeURI::URIReference (cardinalityRestriction::CardinalityRestriction)+ (minCardinalityRestriction::MinCardinalityRestriction)+ (maxCardinalityRestriction::MaxCardinalityRestriction)+ ;
MaxCardinalityRestriction ::= OWLMaxCardinality::TypedLiteral ;
URIReferenceNode ::= (uriRef::URIReference)+ (subjectStatement::RDFStatement)+ (objectStatement::RDFStatement)+ (label::PlainLiteral)+ (type::RDFSClass)+ (comment::PlainLiteral)+ (seeAlso::RDFSResource)+ (referringResource::RDFSResource)+ (isDefinedBy::RDFSResource)+ (definedResource::RDFSResource)+ (member::RDFSResource)+ (container::RDFSResource)+ (list::List)+ ;
--------------------metamodels::OpenConf.owl.bgf--------------------
Must_Accept ::= ε ;
Email_Template ::= define::Event ;
Proceedings_Publisher ::= (publisherOf::Thing)+ technicallyOrganises::Thing ;
start_date_of_camera-ready_submission ::= ε ;
Conference_proceedings ::= has_an_ISBN::String has_a_publisher::Publisher has_a_volume::String ;
Invited_Speaker ::= ε ;
Science_Worker ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person hasConflictOfInterest::Document email::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasMail::String worksForCompany::String hasAffiliation::String hasFirstName::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String ;
TraditionalLecture ::= hasAcronym::String ;
Welcome_address ::= ε ;
RadioCommunicationsTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Transport_vehicle ::= Car ;
 Transport_vehicle ::= Taxi ;
 Transport_vehicle ::= Shuttle_bus ;
 Transport_vehicle ::= Van ;
 Transport_vehicle ::= Car | Taxi | Shuttle_bus | Van ;
AccommodationPlace ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
Domain_Topic ::= Conference_Program ;
 Domain_Topic ::= Paper_Review ;
 Domain_Topic ::= Committees ;
 Domain_Topic ::= Paper_File ;
 Domain_Topic ::= People ;
 Domain_Topic ::= Paper ;
 Domain_Topic ::= Conference_Program | Paper_Review | Committees | Paper_File | People ;
Refusing_manuscript ::= ε ;
SignalProcessingTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
TwoLevelConference ::= is_in_phase::phase_of_conference has_program::program hasMember::Person hasName::String endDate::dateTime paperDueOn::dateTime registrationDueOn::dateTime manuscriptDueOn::dateTime startDate::dateTime hasCountry::Country isOrganizedBy::OrganizingCommittee annualOrder::Integer takesPlace::Location hasAcronym::String hasConferenceMember::ConferenceMember paperAssignmentFinalizedBy::Administrator reviewCriteriaEnteredBy::Administrator paperAssignmentToolsRunBy::Administrator virtualMeetingEnabledBy::Administrator hardcopyMailingManifestsPrintedBy::Administrator detailsEnteredBy::Administrator reviewerBiddingStartedBy::Administrator date::date reviewsPerPaper::Integer logoURL::anyURI acceptsHardcopySubmissions::Boolean siteURL::anyURI ;
Regular_contribution ::= Extended_abstract ;
Result_of_Advocate ::= ε ;
pc_meeting ::= conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator starts_on::String ends_on::String has_startdate::dateTime has_enddate::dateTime (eventOnList::Thing)+ partOfEvent::Event hasEvent::Event (organisedBy::Thing)+ heldIn::Location ;
SessionChair ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person hasConflictOfInterest::Document email::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasMail::String worksForCompany::String hasAffiliation::String hasFirstName::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String ;
SteeringCommittee ::= organizes::Conference ;
Working_event ::= Tutorial ;
 Working_event ::= hasTopic::Topic hasAdministrativeEvent::Administrative_event ;
summary_of_reviews ::= is_created_in::Activity ;
Co-author ::= co-writePaper::Paper ;
Valuable_Confirmation_of_Present_Knowledge ::= ε ;
Review_Values ::= Reviewer_Famliliarity ;
 Review_Values ::= Reccommendation ;
 Review_Values ::= Overall_Value ;
 Review_Values ::= Paper_Categorization ;
 Review_Values ::= Reviewer_Famliliarity | Reccommendation | Overall_Value | Paper_Categorization ;
Short_paper ::= writtenBy::Author dealsWith::Topic remark::String abstract::String contactEmail::String hasKeyword::String hasTitle::String ;
Late_paid_applicant ::= ε ;
Nonauthor_registration_fee ::= ε ;
Advocated_Paper ::= to_advocate_by::Advocate ;
GovernmentOrganization ::= isProviderOf::Sponsorship ;
Tutorial_Abstract ::= (is_the_1th_part_of::Thing)+ part_of_article::article ;
Main_office ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
CallForManuscripts ::= forEvent::AcademicEvent (isInitiatedBy::Person)+ hasSubmissionInstructions::String hasSubmissionDeadline::dateTime ;
MealMenu ::= isMenuOf::MealEvent ;
IndexOfAuthors ::= isProducedBy::Chair ;
Workshop_Session ::= hasAssignedPaper::AcceptedPaper room::String isAssociatedTo::Slot hasChair::Chair ;
Paper_Author ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person hasConflictOfInterest::Document email::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasMail::String worksForCompany::String hasAffiliation::String hasFirstName::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String ;
Registeered_applicant ::= Paid_applicant ;
Late-Registered_Participant ::= ε ;
Conference_Proceedings ::= (includes::Thing)+ ;
group_email ::= goes_through::Activity is_sent_to::human is_created_in::Activity structure_created_by::human has_author::human gives_classification::classification article_written_by::Author has_reviewer::Reviewer has_abstract::Abstract ;
Full_Paper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::Boolean Keywords::String hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
OutsideReferee ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person hasConflictOfInterest::Document email::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasMail::String worksForCompany::String hasAffiliation::String hasFirstName::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String ;
Assigned_Paper ::= Evaluated_Paper ;
 Assigned_Paper ::= hasReviewer::Possible_Reviewer ;
Shuttle_bus ::= ε ;
upper_tier_reviewing_process ::= is_performed_by::human ;
OperatingTopicsystems ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Social_program ::= Dinner_banquet ;
GeneralCoChair ::= organizes::Conference ;
Conference_state ::= ε ;
ComputerNetworksEnterpriseTopic ::= ε ;
PaperSubmissionChair ::= organizes::Conference ;
Chair_PC ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person hasConflictOfInterest::Document email::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasMail::String worksForCompany::String hasAffiliation::String hasFirstName::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String ;
Early_paid_applicant ::= ε ;
Active_conference_participant ::= gives_presentations::Presentation ;
Short_Paper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::Boolean Keywords::String hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
SatelliteAndSpaceCommunicationsTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
WorkShop ::= (has_result::Thing)+ sent_by::Person is_followed_by::Activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human is_held_before::Time is_held_in::Thing is_held_after::Time is_dated_on::dateTime hasTopic::Topic expectedAttendance::Integer isPartOf::Conference ;
Receiving_manuscript ::= ε ;
Senior_Reviewer_URL ::= ε ;
Plenary_lecture ::= hasAcronym::String ;
date_of_notification ::= ε ;
Departure_tax ::= ε ;
Conference_applicant ::= Registeered_applicant ;
Time_zone ::= ε ;
Organizing_committee ::= was_an_organizing_committee_of::Conference_volume ;
Hotel_presenter ::= ε ;
MobileComputingTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Registration_of_participants_event ::= follows::Administrative_event parallel_with::Administrative_event ;
Session_chair ::= ε ;
Committee_member ::= Co-chair ;
 Committee_member ::= was_a_member_of::Committee ;
Marginal_Tend_to_Accept ::= ε ;
Deadline_hotel_reservation ::= done_till::date ;
ConferenceSession ::= ε ;
SubjectArea ::= ε ;
Camera_Ready_Paper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::Boolean Keywords::String hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
NGO ::= isProviderOf::Sponsorship ;
Dinner_banquet ::= ε ;
CommunicationTheoryTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
AcademicEvent ::= TalkEvent ;
 AcademicEvent ::= OrganizationalMeeting ;
 AcademicEvent ::= PaperPresentation ;
 AcademicEvent ::= hasCall::Call ;
date_of_conference ::= start_date_of_conference ;
 date_of_conference ::= end_date_of_conference ;
 date_of_conference ::= start_date_of_conference | end_date_of_conference ;
Mailing_list ::= recieved_by::User used_by::Person submited__by::User (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document ;
CallForPapers ::= forEvent::AcademicEvent (isInitiatedBy::Person)+ hasSubmissionInstructions::String hasSubmissionDeadline::dateTime ;
CommunicationsTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
SecurityTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
PaperAbstract ::= isAbstractOf::Paper abstractIsSubmittedBy::ContactAuthor ;
DiningPlace ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
Regular_author ::= Contribution_1th-author ;
 Regular_author ::= Contribution_co-author ;
 Regular_author ::= Contribution_1th-author | Contribution_co-author ;
Paper_Review ::= is_Candidate_for_Award::Long_bool appropriate_length::Long_bool has_Categorization::Paper_Categorization has_Overall::Overall_Value has_Reccommendation::Reccommendation Review_made_by::Reviewer Comments_for_Author::String Comments_for_Program_Committee::String ;
PostScript ::= ε ;
HTML ::= ε ;
ContactAuthor ::= submitsAbstract::PaperAbstract ;
ConferenceProgram ::= isProgramOf::Conference consistsOf::Slot ;
Rejection_Email ::= ε ;
Admin_Role ::= assigned_by::Administrator ;
Poster_Session ::= hasAssignedPaper::AcceptedPaper room::String isAssociatedTo::Slot hasChair::Chair ;
ComputerArchitectureTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
WorkshopTutorialChair ::= organizes::Conference ;
OrganizingCommittee ::= ProgramCoChair ;
 OrganizingCommittee ::= PublicationsChair ;
 OrganizingCommittee ::= WorkshopTutorialChair ;
 OrganizingCommittee ::= RegistrationChair ;
 OrganizingCommittee ::= StudentAdvocate ;
 OrganizingCommittee ::= FinanceChair ;
 OrganizingCommittee ::= PaperSubmissionChair ;
 OrganizingCommittee ::= PublicityWebChair ;
 OrganizingCommittee ::= SteeringCommittee ;
 OrganizingCommittee ::= GeneralCoChair ;
 OrganizingCommittee ::= organizes::Conference ;
OrganizationalMeeting ::= hasCall::Call ;
Session_Chair ::= ε ;
PersonalReviewHistory ::= isReviewHistoryOf::Reviewer ;
Group_Email ::= ε ;
Regular_Program_Committee_member ::= ε ;
conference_setup ::= sets_member::human is_made_by::human includes_topic::Topic sets_date::date sets_URL::URL ;
Member_PC ::= expertOn::Topic reviewes::Contribution ;
end_date_of_conference ::= ε ;
Double_hotel_room ::= ε ;
AccpetIfRoomRating ::= ε ;
Web_Site ::= recieved_by::User used_by::Person submited__by::User (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document ;
Help_Request ::= Misc ;
 Help_Request ::= Feature_Request ;
 Help_Request ::= Assistance ;
 Help_Request ::= Misc | Feature_Request | Assistance ;
Sponsor_city ::= ε ;
RejectedPaper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::Boolean Keywords::String hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
ParallelAndDistributedComputingTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
One_day_presenter ::= ε ;
Research_Topic ::= define::Event ;
 Research_Topic ::= topicCoveredBy::Thing ;
SC_Member ::= ε ;
Accepted_contribution ::= Camera_ready_contribution ;
Clarity_to_Present_Understanding ::= ε ;
OC_Member ::= OC_Chair ;
Reviewing_event ::= follows::Administrative_event parallel_with::Administrative_event ;
MultimediaTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
CryptographyTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
ReviewQuestion ::= TextualReviewQuestion ;
 ReviewQuestion ::= NumericalReviewQuestion ;
 ReviewQuestion ::= TextualReviewQuestion | NumericalReviewQuestion ;
camera-ready_submission_date ::= start_date_of_camera-ready_submission ;
 camera-ready_submission_date ::= end_date_of_camera-ready_submission ;
 camera-ready_submission_date ::= start_date_of_camera-ready_submission | end_date_of_camera-ready_submission ;
Conference_volume ::= has_parts::Conference_part has_workshops::Workshop has_tracks::Track has_tutorials::Tutorial has_a_commtitee::Committee has_a_steering_committee::Steering_committee has_an_organizing_committee::Organizing_committee has_important_dates::Important_dates has_contributions::Conference_contribution has_a_location::String has_a_program_committee::Program_committee ;
start_date_of_full_paper_submission ::= ε ;
Clear_Accept ::= ε ;
Conference_days ::= One_conference_day ;
ProgramCommittee ::= hasProgramCommitteeMember::ProgramCommitteeMember hasMember::ProgramCommitteeMember ;
Highly_Theoretical ::= ε ;
Registation_deadline ::= done_till::date ;
Head_Role ::= assigned_by::Administrator ;
ProgramCommitteeMember ::= ProgramCommitteeChair ;
 ProgramCommitteeMember ::= Chair ;
 ProgramCommitteeMember ::= memberOfProgramCommittee::ProgramCommittee maxPapers::Integer addedBy::Administrator isMemberOf::ProgramCommittee hasPassword::String ;
Tends_Towards_Theoretical ::= ε ;
PaperQuestion ::= ε ;
Invited_Talk_Abstract ::= (is_the_1th_part_of::Thing)+ part_of_article::article ;
Final_manuscript ::= ε ;
Paid_applicant ::= Late_paid_applicant ;
 Paid_applicant ::= Early_paid_applicant ;
 Paid_applicant ::= Late_paid_applicant | Early_paid_applicant ;
end_date_of_abstract_submission ::= ε ;
RegistrationChair ::= organizes::Conference ;
Worker_non_speaker ::= ε ;
Invitation_letter ::= recieved_by::User used_by::Person submited__by::User (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document ;
Book_proceeding ::= ε ;
Conference_announcement ::= has_authors::Person has_a_date_of_issue::date ;
Demo_Chair ::= ε ;
Conference_Trip ::= ε ;
WithdrawnPaper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::Boolean Keywords::String hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Program_Committee_Chair ::= is_author_of::article performs_activity::Activity is_employed_in::institute has_topic_of_interest::Topic supervises::Activity e-mail::String last_name::String first_name::String ;
Social_event ::= Trip ;
 Social_event ::= Banquet ;
 Social_event ::= Reception ;
 Social_event ::= Trip | Banquet | Reception ;
PCMembersList ::= isProducedBy::Chair ;
Program_committee ::= was_a_program_committee_of::Conference_volume ;
Contribution_1th-author ::= ε ;
paper_assignment ::= Manual_Paper_Assignment ;
 paper_assignment ::= Automatic_Paper_Assignment ;
 paper_assignment ::= assign_paper::Program_Committee_member is_performed_by::human ;
Value_Partition ::= Topics ;
 Value_Partition ::= Format ;
 Value_Partition ::= Long_bool ;
 Value_Partition ::= Review_Values ;
 Value_Partition ::= Result_of_Advocate ;
 Value_Partition ::= Topics | Format | Long_bool | Review_Values | Result_of_Advocate ;
OutputDocument ::= CD-ROM ;
 OutputDocument ::= IndexOfAuthors ;
 OutputDocument ::= ExternalReviewersList ;
 OutputDocument ::= Program ;
 OutputDocument ::= PCMembersList ;
 OutputDocument ::= ListOfAbstracts ;
 OutputDocument ::= BookletOfAbstracts ;
 OutputDocument ::= Proceedings ;
 OutputDocument ::= isProducedBy::Chair ;
Conference_hall ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
QualitatvieLecture ::= hasAcronym::String ;
PC_Chair ::= ε ;
Review_Committee ::= ε ;
NumericalReviewQuestion ::= ε ;
Payment_document ::= Cheque ;
 Payment_document ::= Bank_transfer ;
 Payment_document ::= Cheque | Bank_transfer ;
Automatic_Paper_Assignment ::= (automatically_assign_paper::Program_Committee_member)+ ;
Undecided_Paper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::Boolean Keywords::String hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
ComputerNetworksSecurityTopic ::= ε ;
URL ::= Event_URL ;
 URL ::= Senior_Reviewer_URL ;
 URL ::= Chair_URL ;
 URL ::= Contact_Person_URL ;
 URL ::= Regular_Reviewer_URL ;
 URL ::= Event_URL | Senior_Reviewer_URL | Chair_URL | Contact_Person_URL | Regular_Reviewer_URL ;
Steering_committee ::= was_a_steering_committee_of::Conference_volume ;
AuthorNotReviewer ::= submitPaper::Paper writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing submitsPaper::Paper writePaper::Paper writes_Paper::Paper ;
review_form ::= is_created_in::Activity ;
Review_Form ::= Preview ;
 Review_Form ::= Review_Form_Setup ;
 Review_Form ::= Preview | Review_Form_Setup ;
Deadline_for_notification_of_acceptance ::= done_till::date ;
notification_email ::= acceptance_notification_email ;
 notification_email ::= rejection_notification_email ;
 notification_email ::= acceptance_notification_email | rejection_notification_email ;
Notification_Email ::= ε ;
PersonalPublicationHistory ::= ε ;
Social_Event ::= Conference_Trip ;
 Social_Event ::= Conference_Banquet ;
 Social_Event ::= Conference_Trip | Conference_Banquet ;
Senior_Program_Committee_member ::= supervises::Activity ;
Reviewed_Paper ::= Planed_Paper ;
Program_Committee ::= ε ;
Computer_Science ::= ε ;
ActivitySubmissionForm ::= TutorialProposal ;
 ActivitySubmissionForm ::= WorksopProposal ;
 ActivitySubmissionForm ::= isSubmittedBy::Author hasAuthor::Author submissionDeadline::dateTime ;
AssociatedChair ::= memberOfConference::Conference ;
rejection_notification_email ::= ε ;
Reviewed_contribution ::= Accepted_contribution ;
 Reviewed_contribution ::= Rejected_contribution ;
 Reviewed_contribution ::= has_a_review::Review ;
ReviewRating ::= WeekRejectRating ;
 ReviewRating ::= AcceptRating ;
 ReviewRating ::= AccpetIfRoomRating ;
 ReviewRating ::= RejectRating ;
 ReviewRating ::= WeekRejectRating | AcceptRating | AccpetIfRoomRating | RejectRating ;
WirelessCommunicationsTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
ConferenceAttendant ::= mustPay::Fee hasAdress::String paid::Boolean hasPhone::String ;
TextualReviewQuestion ::= ε ;
PowerPoint_presentation ::= is_given_by::Active_conference_participant ;
TalkEvent ::= ClosingTalk ;
 TalkEvent ::= WelcomeTalk ;
 TalkEvent ::= ClosingTalk | WelcomeTalk ;
FinanceChair ::= organizes::Conference ;
Program_chair ::= made_program::Conference_Program ;
CADTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Trip_city ::= ε ;
Contact_Person_URL ::= ε ;
Event_Creation ::= (has_result::Thing)+ sent_by::Person is_followed_by::Activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human is_held_before::Time is_held_in::Thing is_held_after::Time is_dated_on::dateTime hasTopic::Topic expectedAttendance::Integer isPartOf::Conference ;
Registration_fee ::= Author_attendee_book_registration_fee ;
 Registration_fee ::= Nonmember_registration_fee ;
 Registration_fee ::= Nonauthor_registration_fee ;
 Registration_fee ::= Memeber_registration_fee ;
 Registration_fee ::= Student_registration_fee ;
 Registration_fee ::= Author_attendee_cd_registration_fee ;
 Registration_fee ::= Author_attendee_book_registration_fee | Nonmember_registration_fee | Nonauthor_registration_fee | Memeber_registration_fee | Student_registration_fee | Author_attendee_cd_registration_fee ;
PublicationsChair ::= organizes::Conference ;
Speaker_lecture ::= hasAssignedPaper::AcceptedPaper room::String isAssociatedTo::Slot hasChair::Chair ;
Technic_activity ::= ε ;
Conference_part ::= Track ;
 Conference_part ::= has_a_track-workshop-tutorial_topic::Topic is_part_of_conference_volumes::Conference_volume has_a_track-workshop-tutorial_chair::Track-workshop_chair ;
ComputerNetworksSensorTopic ::= ε ;
IASTED_non_member ::= ε ;
Possible_Reviewer ::= PC_Member ;
 Possible_Reviewer ::= reviewerOfPaper::Paper ;
One_conference_day ::= ε ;
Overhead_projector ::= ε ;
SlideSet ::= recieved_by::User used_by::Person submited__by::User (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document ;
MeetingRoomPlace ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
Submissions_deadline ::= done_till::date ;
Neutral_Review ::= writtenBy::Reviewer reviews::Reviewed_contribution gives_classification::classification is_created_in::Activity review_written_by::Reviewer reviewOfPaper::Paper reviewWrittenBy::Possible_Reviewer containsEvaluation::Evaluation rates::Paper isWritenBy::Reviewer ;
ExternalReviewer ::= assignedByReviewer::Reviewer cooperatesReviewer::Reviewer ;
WelcomeTalk ::= ε ;
SocialEvent ::= Excursion ;
 SocialEvent ::= Reception ;
 SocialEvent ::= Excursion | Reception ;
Sponsor_state ::= ε ;
ContactInformation ::= hasCity::String hasStreet::String hasPostalCode::String hasPhone::String ;
Submitted_Paper ::= Assigned_Paper ;
 Submitted_Paper ::= Reviewed_Paper ;
 Submitted_Paper ::= Advocated_Paper ;
 Submitted_Paper ::= is_stored_in::Paper_File has_been_sent_by::Contact_Author Paper_Id::Integer Comments_To_Chair::String ;
Initial_manuscipt ::= ε ;
Author_cd_proceedings_included ::= submitPaper::Paper writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing submitsPaper::Paper writePaper::Paper writes_Paper::Paper ;
FreeTimeBreak ::= ε ;
Audiovisual_equipment ::= Video_cassette_player ;
 Audiovisual_equipment ::= LCD_projector ;
 Audiovisual_equipment ::= Computer ;
 Audiovisual_equipment ::= Overhead_projector ;
 Audiovisual_equipment ::= Video_cassette_player | LCD_projector | Computer | Overhead_projector ;
Session_room ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
Scientific_Event ::= Individual_Presentation ;
 Scientific_Event ::= Conference ;
 Scientific_Event ::= Track ;
 Scientific_Event ::= Workshop ;
Portable_Reject ::= ε ;
Record_of_attendance ::= recieved_by::User used_by::Person submited__by::User (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document ;
Individual_Presentation ::= Invited_Talk ;
 Individual_Presentation ::= Contributed_Talk ;
 Individual_Presentation ::= (presentationOfPaper::Document)+ ;
Tends_Towards_Practical ::= ε ;
PerformanceTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Reviewing_results_event ::= follows::Administrative_event parallel_with::Administrative_event ;
BreakEvent ::= CoffeeBreak ;
 BreakEvent ::= FreeTimeBreak ;
 BreakEvent ::= MealBreak ;
 BreakEvent ::= CoffeeBreak | FreeTimeBreak | MealBreak ;
Evaluated_Paper ::= Accepted_Paper ;
 Evaluated_Paper ::= Rejected_Paper ;
 Evaluated_Paper ::= hasReview::Review ;
AcademiaOrganization ::= isProviderOf::Sponsorship ;
ConferenceMember ::= ConferenceChair ;
 ConferenceMember ::= AssociatedChair ;
 ConferenceMember ::= Chairman ;
 ConferenceMember ::= ProgramCommitteeMember ;
 ConferenceMember ::= memberOfConference::Conference ;
MedicineTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
New_Perspective_Issue_Problem_Solving ::= ε ;
Classic_Papers ::= ε ;
Accepted_Paper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::Boolean Keywords::String hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
 Accepted_Paper ::= hasReview::Review ;
Submitted_contribution ::= Reviewed_contribution ;
 Submitted_contribution ::= has_a_review_expertise::Review_expertise ;
Agency_Staff_Member ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person hasConflictOfInterest::Document email::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasMail::String worksForCompany::String hasAffiliation::String hasFirstName::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String ;
Conference_hotel ::= ε ;
Track-workshop_chair ::= was_a_track-workshop_chair_of::Conference_part ;
Coffee_break ::= ε ;
RatedPapers ::= hasRating::ReviewRating ;
Regular_Paper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::Boolean Keywords::String hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
ConferenceChair ::= memberOfConference::Conference ;
 ConferenceChair ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person hasConflictOfInterest::Document email::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasMail::String worksForCompany::String hasAffiliation::String hasFirstName::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String ;
EEnum ::= (Yes::ε) | (No::ε) | (Accept::ε) | (Reject::ε) | (Unsure::ε) | (male::ε) | (female::ε) | (high::ε) | (medium::ε) | (low::ε) | (very high::ε) | (Compilers::ε) | (Microarchitecture::ε) | (Systems::ε) | (ForwardLookingIdea::ε) ;
Author_attendee_book_registration_fee ::= ε ;
AcceptRating ::= ε ;
Camera_Ready_event ::= follows::Administrative_event parallel_with::Administrative_event ;
IASTED_member ::= ε ;
ClosingTalk ::= ε ;
ListOfAbstracts ::= isProducedBy::Chair ;
MealBreak ::= ε ;
Technical_commitee ::= ε ;
reviewing_proces ::= lower_tier_reviewing_process ;
 reviewing_proces ::= upper_tier_reviewing_process ;
 reviewing_proces ::= lower_tier_reviewing_process | upper_tier_reviewing_process ;
Manual_Paper_Assignment ::= (manually_assign_paper::Program_Committee_member)+ ;
WorksopProposal ::= isSubmittedBy::Author hasAuthor::Author submissionDeadline::dateTime ;
Conference_Hiker ::= ε ;
Workshop_Paper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::Boolean Keywords::String hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Industrial_Session ::= ε ;
Conference_fees ::= ε ;
ConferenceDinner ::= hasMenu::MealMenu ;
New_Information ::= ε ;
Meta-Reviewer ::= assignedByAdministrator::Administrator adjustBid::Bid readPaper::Paper hasBeenAssigned::Paper assignExternalReviewer::ExternalReviewer invites_co-reviewers::Reviewer invited_by::Reviewer (has_a_review_reference_or_expertise::Thing)+ hasReviewHistory::PersonalReviewHistory executes::DoubleBlindReview cooperates::ExternalReviewer IsAssignedTo::Paper hasConflictedPaper::Paper hasPreferredPaper::Paper hasPreferredTopic::ResearchTopic writeReview::Review has_made_review::Paper_Review UserName::String Comments_to_Chair::String Other_Areas::String ;
Activity_before_conference ::= Renting ;
 Activity_before_conference ::= Research ;
 Activity_before_conference ::= Refusing_manuscript ;
 Activity_before_conference ::= Accepting_manuscript ;
 Activity_before_conference ::= Receiving_manuscript ;
 Activity_before_conference ::= Renting | Research | Refusing_manuscript | Accepting_manuscript | Receiving_manuscript ;
ProgramCommitteeChair ::= endReview::Review ;
Contact_Author ::= has_sent::Submitted_Paper Alternate_Email::String ;
Call_for_participation ::= has_authors::Person has_a_date_of_issue::date ;
Conference_airport ::= ε ;
Passive_conference_participant ::= ε ;
Presenter_city ::= ε ;
TPCMember ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person hasConflictOfInterest::Document email::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasMail::String worksForCompany::String hasAffiliation::String hasFirstName::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String ;
Early-Registered_Participant ::= ε ;
phase_of_conference ::= ε ;
Overall_Value ::= Valuable_Confirmation_of_Present_Knowledge ;
 Overall_Value ::= Other ;
 Overall_Value ::= Not_Much ;
 Overall_Value ::= New_Information ;
 Overall_Value ::= New_Perspective_Issue_Problem_Solving ;
 Overall_Value ::= Clarity_to_Present_Understanding ;
 Overall_Value ::= Valuable_Confirmation_of_Present_Knowledge | Other | Not_Much | New_Information | New_Perspective_Issue_Problem_Solving | Clarity_to_Present_Understanding ;
Video_cassette_player ::= ε ;
ConferenceEvent ::= NonAcademicEvent ;
 ConferenceEvent ::= AcademicEvent ;
 ConferenceEvent ::= hasAttendee::Person hasLocation::Place hasProgramme::Programme hasEndDateTime::dateTime hasStartDateTime::dateTime ;
Conference_document ::= Conference_contribution ;
 Conference_document ::= Information_for_participants ;
 Conference_document ::= Call_for_paper ;
 Conference_document ::= Conference_announcement ;
 Conference_document ::= Call_for_participation ;
 Conference_document ::= Conference_www ;
 Conference_document ::= has_authors::Person has_a_date_of_issue::date ;
Single_hotel_room ::= ε ;
Contribution_co-author ::= ε ;
Introduction_of_speaker ::= ε ;
Multi-author_Volume ::= Proceedings ;
 Multi-author_Volume ::= recieved_by::User used_by::Person submited__by::User (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document ;
Nonmember_registration_fee ::= ε ;
ComputerNetworksMeasurementsTopic ::= ε ;
Coctail_reception ::= ε ;
ProgramCoChair ::= organizes::Conference ;
Chair_URL ::= ε ;
Regular_Session ::= hasAssignedPaper::AcceptedPaper room::String isAssociatedTo::Slot hasChair::Chair ;
Conference_activity ::= Social_program ;
 Conference_activity ::= Technic_activity ;
 Conference_activity ::= Registration ;
 Conference_activity ::= Introduction ;
 Conference_activity ::= Welcome_address ;
 Conference_activity ::= Coffee_break ;
 Conference_activity ::= Coctail_reception ;
 Conference_activity ::= Presentation ;
 Conference_activity ::= Lecture ;
 Conference_activity ::= Social_program | Technic_activity | Registration | Introduction | Welcome_address | Coffee_break | Coctail_reception ;
start_date_of_conference ::= ε ;
Conference_participant ::= Passive_conference_participant ;
 Conference_participant ::= Active_conference_participant ;
ComputerNetworksTopic ::= ComputerNetworksEnterpriseTopic ;
 ComputerNetworksTopic ::= ComputerNetworksSwitchingTopic ;
 ComputerNetworksTopic ::= ComputerNetworksSensorTopic ;
 ComputerNetworksTopic ::= ComputerNetworksSecurityTopic ;
 ComputerNetworksTopic ::= ComputerNetworksOpticalTopic ;
 ComputerNetworksTopic ::= ComputerNetworksMeasurementsTopic ;
 ComputerNetworksTopic ::= ComputerNetworksManagementTopic ;
 ComputerNetworksTopic ::= ComputerNetworksAapplicationsTopic ;
 ComputerNetworksTopic ::= ComputerNetworksEnterpriseTopic | ComputerNetworksSwitchingTopic | ComputerNetworksSensorTopic | ComputerNetworksSecurityTopic | ComputerNetworksOpticalTopic | ComputerNetworksMeasurementsTopic | ComputerNetworksManagementTopic | ComputerNetworksAapplicationsTopic ;
Long_bool ::= ε ;
Full_day_tour ::= ε ;
LCD_projector ::= ε ;
Author_Role ::= assigned_by::Administrator ;
PaymentMode ::= ε ;
Presenter_house ::= ε ;
Conference_Paper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::Boolean Keywords::String hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
bidding_of_reviewer ::= is_performed_by::human ;
BookletOfAbstracts ::= isProducedBy::Chair ;
Cd_proceening ::= ε ;
StudentAdvocate ::= organizes::Conference ;
Hotel_room ::= Single_hotel_room ;
 Hotel_room ::= Double_hotel_room ;
 Hotel_room ::= Single_hotel_room | Double_hotel_room ;
PaperPresentation ::= relatedToPaper::AcceptedPaper ;
Presenter_university ::= ε ;
Student_registration_fee ::= ε ;
Tutorial_Chair ::= ε ;
abstract_submission_date ::= end_date_of_abstract_submission ;
 abstract_submission_date ::= start_date_of_abstract_submission ;
 abstract_submission_date ::= end_date_of_abstract_submission | start_date_of_abstract_submission ;
Trip_day ::= ε ;
Negative_Review ::= writtenBy::Reviewer reviews::Reviewed_contribution gives_classification::classification is_created_in::Activity review_written_by::Reviewer reviewOfPaper::Paper reviewWrittenBy::Possible_Reviewer containsEvaluation::Evaluation rates::Paper isWritenBy::Reviewer ;
ExternalReviewersList ::= isProducedBy::Chair ;
abstract_of_paper ::= goes_through::Activity is_sent_to::human is_created_in::Activity structure_created_by::human has_author::human gives_classification::classification article_written_by::Author has_reviewer::Reviewer has_abstract::Abstract ;
Approval_Email ::= confirm::Event ;
Hotel_registration_form ::= ε ;
AntennasTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
MicroelectronicsTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
lower_tier_reviewing_process ::= ε ;
ComputerNetworksOpticalTopic ::= ε ;
Contributed_Talk ::= (presentationOfPaper::Document)+ ;
Contact_Person ::= is_author_of::article performs_activity::Activity is_employed_in::institute has_topic_of_interest::Topic supervises::Activity e-mail::String last_name::String first_name::String ;
TutorialProposal ::= isSubmittedBy::Author hasAuthor::Author submissionDeadline::dateTime ;
Conference_Participant ::= Demo_Chair ;
 Conference_Participant ::= OC_Member ;
 Conference_Participant ::= Early-Registered_Participant ;
 Conference_Participant ::= Late-Registered_Participant ;
 Conference_Participant ::= Tutorial_Chair ;
 Conference_Participant ::= PC_Chair ;
 Conference_Participant ::= Workshop_Chair ;
 Conference_Participant ::= Presenter ;
 Conference_Participant ::= Session_Chair ;
 Conference_Participant ::= Demo_Chair | OC_Member | Early-Registered_Participant | Late-Registered_Participant ;
Paper_File ::= is_Type::Format ;
RFC ::= ε ;
Conference_city ::= ε ;
Reviewer_Famliliarity ::= High ;
 Reviewer_Famliliarity ::= Low ;
 Reviewer_Famliliarity ::= Moderate ;
 Reviewer_Famliliarity ::= High | Low | Moderate ;
Accepting_manuscript ::= ε ;
Rejected_Paper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::Boolean Keywords::String hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
 Rejected_Paper ::= hasReview::Review ;
Event_Approval ::= (has_result::Thing)+ sent_by::Person is_followed_by::Activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human is_held_before::Time is_held_in::Thing is_held_after::Time is_dated_on::dateTime hasTopic::Topic expectedAttendance::Integer isPartOf::Conference ;
Invited_Paper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::Boolean Keywords::String hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
PC_Member ::= SC_Member ;
 PC_Member ::= Session_Chair ;
 PC_Member ::= Tutorial_Chair ;
 PC_Member ::= PC_Chair ;
 PC_Member ::= Workshop_Chair ;
Highly_Practical ::= ε ;
Plenary_lecture_speaker ::= submitPaper::Paper writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing submitsPaper::Paper writePaper::Paper writes_Paper::Paper ;
Academic_Institution ::= Research_Institute ;
 Academic_Institution ::= University ;
 Academic_Institution ::= scientificallyOrganises::Academic_Institution ;
PaperStatus ::= isStatusOf::Paper ;
Author_book_proceedings_included ::= submitPaper::Paper writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing submitsPaper::Paper writePaper::Paper writes_Paper::Paper ;
Value_added_tax ::= ε ;
Video_presentation ::= is_given_by::Active_conference_participant ;
Paper_Categorization ::= Tends_Towards_Theoretical ;
 Paper_Categorization ::= Tends_Towards_Practical ;
 Paper_Categorization ::= Balanced_Theory_and_Practice ;
 Paper_Categorization ::= Highly_Theoretical ;
 Paper_Categorization ::= Highly_Practical ;
 Paper_Categorization ::= Tends_Towards_Theoretical | Tends_Towards_Practical | Balanced_Theory_and_Practice | Highly_Theoretical | Highly_Practical ;
submission_process ::= is_performed_by::human ;
Camera_ready_manuscript_deadline ::= done_till::date ;
OC_Chair ::= ε ;
MealEvent ::= ConferenceDinner ;
 MealEvent ::= hasMenu::MealMenu ;
PublicityWebChair ::= organizes::Conference ;
Credit_card ::= ε ;
end_date_of_camera-ready_submission ::= ε ;
start_date_of_abstract_submission ::= ε ;
Conference_Session ::= Industrial_Session ;
CoffeeBreak ::= ε ;
Research_Institute ::= scientificallyOrganises::Academic_Institution ;
Reviewer_Role ::= assigned_by::Administrator ;
Activity_after_conference ::= Departure ;
 Activity_after_conference ::= Full_day_tour ;
 Activity_after_conference ::= Departure | Full_day_tour ;
Bank_transfer ::= ε ;
Non_speaker ::= Worker_non_speaker ;
 Non_speaker ::= Student_non_speaker ;
 Non_speaker ::= Worker_non_speaker | Student_non_speaker ;
Committe_Role ::= assigned_by::Administrator ;
Registration_form ::= ε ;
Student_non_speaker ::= ε ;
Review_Form_Setup ::= ε ;
Administrative_event ::= Reviewing_results_event ;
 Administrative_event ::= Reviewing_event ;
 Administrative_event ::= Registration_of_participants_event ;
 Administrative_event ::= Submission_event ;
 Administrative_event ::= Camera_Ready_event ;
 Administrative_event ::= follows::Administrative_event parallel_with::Administrative_event ;
Brief_introduction_for_Session_chair ::= recieved_by::User used_by::Person submited__by::User (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document ;
Camera_ready_contribution ::= ε ;
Adobe_PDF ::= ε ;
Conference_Program ::= Program_made_by::Program_chair planned_papers::Planed_Paper ;
Positive_Review ::= writtenBy::Reviewer reviews::Reviewed_contribution gives_classification::classification is_created_in::Activity review_written_by::Reviewer reviewOfPaper::Paper reviewWrittenBy::Possible_Reviewer containsEvaluation::Evaluation rates::Paper isWritenBy::Reviewer ;
PublishedPaper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::Boolean Keywords::String hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
full_paper_submission_date ::= start_date_of_full_paper_submission ;
 full_paper_submission_date ::= end_date_of_full_paper_submission ;
 full_paper_submission_date ::= start_date_of_full_paper_submission | end_date_of_full_paper_submission ;
DoubleBlindReview ::= isExecutedBy::Reviewer ;
ReviewForm ::= ε ;
Hotel_fee ::= ε ;
Sponsor_company_house ::= ε ;
Student_lecturer ::= ε ;
Written_contribution ::= Submitted_contribution ;
 Written_contribution ::= Regular_contribution ;
 Written_contribution ::= Submitted_contribution | Regular_contribution ;
Conference_contributor ::= Regular_author ;
 Conference_contributor ::= Invited_speaker ;
 Conference_contributor ::= Active_conference_participant ;
 Conference_contributor ::= Regular_author | Invited_speaker ;
Event_Setup ::= Paper_Typologies ;
 Event_Setup ::= Review_Form ;
 Event_Setup ::= Submission_Template ;
 Event_Setup ::= Event_Tracks ;
 Event_Setup ::= Research_Topic ;
 Event_Setup ::= Email_Template ;
 Event_Setup ::= define::Event ;
CommitteeMember ::= isMemberOf::Conference ;
Conference_building ::= ε ;
Corresponding_Author ::= submitPaper::Paper writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing submitsPaper::Paper writePaper::Paper writes_Paper::Paper ;
PendingPaper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::Boolean Keywords::String hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
PowerlineTransmissionTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Marginal_Tend_to_Reject ::= ε ;
IndustryOrganization ::= isProviderOf::Sponsorship ;
TestOnlyTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
WeekRejectRating ::= ε ;
Corel_Word_Perfect ::= ε ;
Extended_abstract ::= ε ;
Industrial_Paper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::Boolean Keywords::String hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
RTF ::= ε ;
CD-ROM ::= isProducedBy::Chair ;
Co-chair ::= was_a_committe_co-chair_of::Committee ;
Conference_Banquet ::= ε ;
Tutorial_speaker ::= submitPaper::Paper writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing submitsPaper::Paper writePaper::Paper writes_Paper::Paper ;
Organising_Agency ::= (publisherOf::Thing)+ technicallyOrganises::Thing ;
PaperFullVersion ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::Boolean Keywords::String hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
RejectRating ::= ε ;
Demo_Session ::= hasAssignedPaper::AcceptedPaper room::String isAssociatedTo::Slot hasChair::Chair ;
Not_Much ::= ε ;
SingleLevelConference ::= is_in_phase::phase_of_conference has_program::program hasMember::Person hasName::String endDate::dateTime paperDueOn::dateTime registrationDueOn::dateTime manuscriptDueOn::dateTime startDate::dateTime hasCountry::Country isOrganizedBy::OrganizingCommittee annualOrder::Integer takesPlace::Location hasAcronym::String hasConferenceMember::ConferenceMember paperAssignmentFinalizedBy::Administrator reviewCriteriaEnteredBy::Administrator paperAssignmentToolsRunBy::Administrator virtualMeetingEnabledBy::Administrator hardcopyMailingManifestsPrintedBy::Administrator detailsEnteredBy::Administrator reviewerBiddingStartedBy::Administrator date::date reviewsPerPaper::Integer logoURL::anyURI acceptsHardcopySubmissions::Boolean siteURL::anyURI ;
Program_Committee_member ::= Senior_Program_Committee_member ;
 Program_Committee_member ::= Regular_Program_Committee_member ;
 Program_Committee_member ::= Senior_Program_Committee_member | Regular_Program_Committee_member ;
Worker_lecturer ::= ε ;
ResearchTopic ::= ε ;
ConferenceVenuePlace ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
end_date_of_full_paper_submission ::= ε ;
Conference_contribution ::= Poster ;
 Conference_contribution ::= Written_contribution ;
 Conference_contribution ::= Presentation ;
 Conference_contribution ::= is_submitted_at::Conference_volume ;
Invited_Talk ::= (presentationOfPaper::Document)+ ;
Demo_Paper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::Boolean Keywords::String hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
CallForReviews ::= forEvent::AcademicEvent (isInitiatedBy::Person)+ hasSubmissionInstructions::String hasSubmissionDeadline::dateTime ;
acceptance_notification_email ::= ε ;
Author_attendee_cd_registration_fee ::= ε ;
ComputerNetworksManagementTopic ::= ε ;
Paper_Typologies ::= define::Event ;
Information_for_participants ::= has_authors::Person has_a_date_of_issue::date ;
Programme_Brochure ::= recieved_by::User used_by::Person submited__by::User (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document ;
Balanced_Theory_and_Practice ::= ε ;
NonAcademicEvent ::= MealEvent ;
 NonAcademicEvent ::= BreakEvent ;
 NonAcademicEvent ::= SocialEvent ;
 NonAcademicEvent ::= MealEvent | BreakEvent | SocialEvent ;
MS_Word ::= ε ;
Fee_for_extra_trip ::= ε ;
ComputerNetworksSwitchingTopic ::= ε ;
Conference_restaurant ::= ε ;
Meta-Review ::= writtenBy::Reviewer reviews::Reviewed_contribution gives_classification::classification is_created_in::Activity review_written_by::Reviewer reviewOfPaper::Paper reviewWrittenBy::Possible_Reviewer containsEvaluation::Evaluation rates::Paper isWritenBy::Reviewer ;
Invited_speaker ::= ε ;
Presenter_state ::= ε ;
Poster_Paper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::Boolean Keywords::String hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Regular_Reviewer_URL ::= ε ;
managing_of_conference_process ::= (has_result::Thing)+ sent_by::Person is_followed_by::Activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human is_held_before::Time is_held_in::Thing is_held_after::Time is_dated_on::dateTime hasTopic::Topic expectedAttendance::Integer isPartOf::Conference ;
Planed_Paper ::= is_planned_in::Conference_Program ;
Call_for_paper ::= has_authors::Person has_a_date_of_issue::date ;
PersonalHistory ::= PersonalPublicationHistory ;
 PersonalHistory ::= PersonalReviewHistory ;
 PersonalHistory ::= PersonalPublicationHistory | PersonalReviewHistory ;
Conference_www ::= has_a_URL::String ;
Clear_Reject ::= ε ;
Rejected_contribution ::= has_a_review::Review ;
Invited_talk ::= is_given_by::Active_conference_participant ;
Workshop_Chair ::= ε ;
Event_Tracks ::= define::Event ;
Submission_Template ::= define::Event ;
Author_information_form ::= ε ;
ComputerNetworksAapplicationsTopic ::= ε ;
Review_expertise ::= has_a_submitted_contribution::Submitted_contribution has_an_expertise::EEnum ;
Event_URL ::= concerned::Event ;
Important_dates ::= is_an_abstract_submission_date::date is_a_full_paper_submission_date::date is_an_ending_date::date is_a_date_of_acceptance_announcement::date is_a_date_of_camera_ready_paper_submission::date is_a_starting_date::date belong_to_a_conference_volume::Conference_volume ;
Submission_event ::= follows::Administrative_event parallel_with::Administrative_event ;
ActivePaper ::= RatedPapers ;
 ActivePaper ::= hasRating::ReviewRating ;
Feature_Request ::= ε ;
AcceptedPaper ::= relatedToEvent::PaperPresentation isAssignedToSession::Session ;
TravelGrant ::= providedBy::Organization hasCostCurrency::String hasCostAmount::Integer ;
Review_preference ::= (has_a_topic_or_a_submission_contribution::Thing)+ has_a_degree::Integer ;
Memeber_registration_fee ::= ε ;
--------------------metamodels::OpenQVT.bgf--------------------
RulePart ::= Action ;
 RulePart ::= Query ;
RTransService ::= visibility::String signature::String rule::Rule ;
RootRule ::= ruleSet::RuleSet ;
OCLService ::= visibility::String signature::String rule::Rule ;
RTransAction ::= qARule::QARule ;
QARule ::= query::Query action::Action ;
JavaFilter ::= qARule::QARule ;
JavaAction ::= qARule::QARule ;
JavaQuery ::= qARule::QARule ;
RuleSet ::= rootRule::RootRule ;
RuleSetCall ::= ruleSet::RuleSet ;
JavaService ::= visibility::String signature::String rule::Rule ;
RTransQuery ::= qARule::QARule ;
OCLFilter ::= qARule::QARule ;
--------------------metamodels::PCS.owl.bgf--------------------
Must_Accept ::= ε ;
Email_Template ::= define::Event ;
Proceedings_Publisher ::= (publisherOf::Thing)+ technicallyOrganises::Thing ;
start_date_of_camera-ready_submission ::= ε ;
Conference_proceedings ::= has_an_ISBN::String has_a_publisher::Publisher has_a_volume::String ;
Invited_Speaker ::= ε ;
External_Reviewer ::= loggin_in::System submit::Document get::Email E-mail::String hasMail::String worksForCompany::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasAffiliation::String hasFirstName::String hasLastName::String hasEmail::String hasName::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String ;
Science_Worker ::= loggin_in::System submit::Document get::Email E-mail::String hasMail::String worksForCompany::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasAffiliation::String hasFirstName::String hasLastName::String hasEmail::String hasName::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String ;
Electronic_proceeding ::= CD ;
 Electronic_proceeding ::= Web_site ;
 Electronic_proceeding ::= CD | Web_site ;
Program_Comitee_Chair ::= finishes::Conference headOf::Program_Comitee switches::PhaseOfConferencePreparation starts::Conference accepts::Paper assignsToReview::Paper assignsPaper::Reviewer rejects::Paper ;
TraditionalLecture ::= hasAcronym::String ;
Welcome_address ::= ε ;
RadioCommunicationsTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Transport_vehicle ::= Car ;
 Transport_vehicle ::= Taxi ;
 Transport_vehicle ::= Shuttle_bus ;
 Transport_vehicle ::= Van ;
 Transport_vehicle ::= Car | Taxi | Shuttle_bus | Van ;
AccommodationPlace ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
Domain_Topic ::= Conference_Program ;
 Domain_Topic ::= Paper_Review ;
 Domain_Topic ::= Committees ;
 Domain_Topic ::= People ;
 Domain_Topic ::= Paper_File ;
 Domain_Topic ::= Conference_Program | Paper_Review | Committees | People ;
Refusing_manuscript ::= ε ;
SignalProcessingTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
TwoLevelConference ::= is_in_phase::phase_of_conference has_program::program hasMember::Person hasName::String endDate::dateTime paperDueOn::dateTime registrationDueOn::dateTime manuscriptDueOn::dateTime startDate::dateTime hasCountry::Country isOrganizedBy::OrganizingCommittee annualOrder::Integer takesPlace::Location hasAcronym::String finishedBy::Program_Comitee_Chair focusesOn::Topic startedBy::Program_Comitee_Chair takesPlace::Location has_conference_member::ConferenceMember WebSite::anyURI Topic_of_conference::String Date::date hasConferenceMember::ConferenceMember paperAssignmentFinalizedBy::Administrator reviewCriteriaEnteredBy::Administrator paperAssignmentToolsRunBy::Administrator virtualMeetingEnabledBy::Administrator hardcopyMailingManifestsPrintedBy::Administrator detailsEnteredBy::Administrator reviewerBiddingStartedBy::Administrator date::date reviewsPerPaper::Integer logoURL::anyURI acceptsHardcopySubmissions::Boolean siteURL::anyURI ;
Regular_contribution ::= Extended_abstract ;
Result_of_Advocate ::= ε ;
pc_meeting ::= starts_on::String ends_on::String has_startdate::dateTime has_enddate::dateTime (eventOnList::Thing)+ partOfEvent::Event hasEvent::Event (organisedBy::Thing)+ heldIn::Location conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator ;
SessionChair ::= loggin_in::System submit::Document get::Email E-mail::String hasMail::String worksForCompany::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasAffiliation::String hasFirstName::String hasLastName::String hasEmail::String hasName::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String ;
SteeringCommittee ::= organizes::Conference ;
Working_event ::= Tutorial ;
 Working_event ::= hasTopic::Topic hasAdministrativeEvent::Administrative_event ;
summary_of_reviews ::= is_created_in::Activity ;
Valuable_Confirmation_of_Present_Knowledge ::= ε ;
Review_Values ::= Reviewer_Famliliarity ;
 Review_Values ::= Reccommendation ;
 Review_Values ::= Overall_Value ;
 Review_Values ::= Paper_Categorization ;
 Review_Values ::= Reviewer_Famliliarity | Reccommendation | Overall_Value | Paper_Categorization ;
Short_paper ::= writtenBy::Author dealsWith::Topic remark::String abstract::String contactEmail::String hasKeyword::String hasTitle::String changedBy::Author hasContributionStatus::EEnum ;
Late_paid_applicant ::= ε ;
Nonauthor_registration_fee ::= ε ;
Advocated_Paper ::= to_advocate_by::Advocate ;
GovernmentOrganization ::= isProviderOf::Sponsorship ;
Tutorial_Abstract ::= (is_the_1th_part_of::Thing)+ part_of_article::article ;
Primary_Reviewer ::= assign_review::Review ;
Main_office ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
CallForManuscripts ::= forEvent::AcademicEvent (isInitiatedBy::Person)+ hasSubmissionInstructions::String hasSubmissionDeadline::dateTime ;
MealMenu ::= isMenuOf::MealEvent ;
IndexOfAuthors ::= isProducedBy::Chair ;
Workshop_Session ::= hasAssignedPaper::AcceptedPaper room::String isAssociatedTo::Slot hasChair::Chair ;
Paper_Author ::= loggin_in::System submit::Document get::Email E-mail::String hasMail::String worksForCompany::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasAffiliation::String hasFirstName::String hasLastName::String hasEmail::String hasName::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String ;
Registeered_applicant ::= Paid_applicant ;
Late-Registered_Participant ::= ε ;
Conference_Proceedings ::= (includes::Thing)+ ;
group_email ::= article_written_by::Author has_reviewer::Reviewer has_abstract::Abstract goes_through::Activity is_sent_to::human is_created_in::Activity structure_created_by::human has_author::human gives_classification::classification ;
Full_Paper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
OutsideReferee ::= loggin_in::System submit::Document get::Email E-mail::String hasMail::String worksForCompany::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasAffiliation::String hasFirstName::String hasLastName::String hasEmail::String hasName::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String ;
Assigned_Paper ::= Evaluated_Paper ;
 Assigned_Paper ::= hasReviewer::Possible_Reviewer ;
Shuttle_bus ::= ε ;
upper_tier_reviewing_process ::= is_performed_by::human ;
OperatingTopicsystems ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Review_Phase ::= hasPhaseStatus::EEnum ;
Social_program ::= Dinner_banquet ;
GeneralCoChair ::= organizes::Conference ;
PC_Meeting ::= ε ;
E-mail_PC_Meeting ::= ε ;
Conference_state ::= ε ;
ComputerNetworksEnterpriseTopic ::= ε ;
PaperSubmissionChair ::= organizes::Conference ;
Chair_PC ::= loggin_in::System submit::Document get::Email E-mail::String hasMail::String worksForCompany::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasAffiliation::String hasFirstName::String hasLastName::String hasEmail::String hasName::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String ;
Early_paid_applicant ::= ε ;
Active_conference_participant ::= gives_presentations::Presentation ;
Short_Paper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
SatelliteAndSpaceCommunicationsTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Conflict_Of_Interest ::= Confirmed_Conflict ;
 Conflict_Of_Interest ::= Pending_Proposed_Conflict ;
 Conflict_Of_Interest ::= Hidden_Conflict ;
 Conflict_Of_Interest ::= Deleted_Conflict ;
 Conflict_Of_Interest ::= Proposed_Conflict ;
 Conflict_Of_Interest ::= Self_Conflict ;
 Conflict_Of_Interest ::= Confirmed_Conflict | Pending_Proposed_Conflict | Hidden_Conflict | Deleted_Conflict | Proposed_Conflict | Self_Conflict ;
Receiving_manuscript ::= ε ;
Senior_Reviewer_URL ::= ε ;
Pending_Proposed_Conflict ::= refusedBy::Reviewer confirmedBy::Reviewer ;
Plenary_lecture ::= hasAcronym::String ;
date_of_notification ::= ε ;
Departure_tax ::= ε ;
Conference_applicant ::= Registeered_applicant ;
Time_zone ::= ε ;
Organizing_committee ::= was_an_organizing_committee_of::Conference_volume ;
Hotel_presenter ::= ε ;
MobileComputingTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Registration_of_participants_event ::= follows::Administrative_event parallel_with::Administrative_event ;
Session_chair ::= ε ;
Committee_member ::= Co-chair ;
 Committee_member ::= chair ;
 Committee_member ::= was_a_member_of::Committee ;
Marginal_Tend_to_Accept ::= ε ;
Deadline_hotel_reservation ::= done_till::date ;
ConferenceSession ::= ε ;
SubjectArea ::= ε ;
Camera_Ready_Paper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
NGO ::= isProviderOf::Sponsorship ;
Dinner_banquet ::= ε ;
CommunicationTheoryTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
AcademicEvent ::= TalkEvent ;
 AcademicEvent ::= OrganizationalMeeting ;
 AcademicEvent ::= PaperPresentation ;
 AcademicEvent ::= hasCall::Call ;
date_of_conference ::= start_date_of_conference ;
 date_of_conference ::= end_date_of_conference ;
 date_of_conference ::= start_date_of_conference | end_date_of_conference ;
Mailing_list ::= writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document (relatesTo::Thing)+ submited_by::Person Document_ID::String recieved_by::User used_by::Person submited__by::User ;
CallForPapers ::= forEvent::AcademicEvent (isInitiatedBy::Person)+ hasSubmissionInstructions::String hasSubmissionDeadline::dateTime ;
CommunicationsTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
SecurityTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
PaperAbstract ::= isAbstractOf::Paper abstractIsSubmittedBy::ContactAuthor ;
DiningPlace ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
Regular_author ::= Contribution_1th-author ;
 Regular_author ::= Contribution_co-author ;
 Regular_author ::= Contribution_1th-author | Contribution_co-author ;
Paper_Review ::= is_Candidate_for_Award::Long_bool appropriate_length::Long_bool has_Categorization::Paper_Categorization has_Overall::Overall_Value has_Reccommendation::Reccommendation Review_made_by::Reviewer Comments_for_Author::String Comments_for_Program_Committee::String ;
PostScript ::= ε ;
HTML ::= ε ;
ContactAuthor ::= submitsAbstract::PaperAbstract ;
ConferenceProgram ::= isProgramOf::Conference consistsOf::Slot ;
Rejection_Email ::= sended_by::Administrator Receiver_of_email::String Message_of_email::String Subject_of_email::String ;
Admin_Role ::= assigned_by::Administrator ;
Poster_Session ::= hasAssignedPaper::AcceptedPaper room::String isAssociatedTo::Slot hasChair::Chair ;
ComputerArchitectureTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
WorkshopTutorialChair ::= organizes::Conference ;
OrganizingCommittee ::= ProgramCoChair ;
 OrganizingCommittee ::= PublicationsChair ;
 OrganizingCommittee ::= WorkshopTutorialChair ;
 OrganizingCommittee ::= RegistrationChair ;
 OrganizingCommittee ::= StudentAdvocate ;
 OrganizingCommittee ::= FinanceChair ;
 OrganizingCommittee ::= PaperSubmissionChair ;
 OrganizingCommittee ::= PublicityWebChair ;
 OrganizingCommittee ::= SteeringCommittee ;
 OrganizingCommittee ::= GeneralCoChair ;
 OrganizingCommittee ::= organizes::Conference ;
OrganizationalMeeting ::= hasCall::Call ;
Session_Chair ::= ε ;
PersonalReviewHistory ::= isReviewHistoryOf::Reviewer ;
Group_Email ::= sended_by::Administrator Receiver_of_email::String Message_of_email::String Subject_of_email::String ;
Regular_Program_Committee_member ::= ε ;
conference_setup ::= sets_member::human is_made_by::human includes_topic::Topic sets_date::date sets_URL::URL ;
Member_PC ::= expertOn::Topic reviewes::Contribution ;
end_date_of_conference ::= ε ;
Double_hotel_room ::= ε ;
AccpetIfRoomRating ::= ε ;
Web_Site ::= writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document (relatesTo::Thing)+ submited_by::Person Document_ID::String recieved_by::User used_by::Person submited__by::User ;
Help_Request ::= Misc ;
 Help_Request ::= Feature_Request ;
 Help_Request ::= Assistance ;
 Help_Request ::= Misc | Feature_Request | Assistance ;
Sponsor_city ::= ε ;
RejectedPaper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
ParallelAndDistributedComputingTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
One_day_presenter ::= ε ;
Research_Topic ::= define::Event ;
 Research_Topic ::= topicCoveredBy::Thing ;
Assignment_Phase ::= hasPhaseStatus::EEnum ;
SC_Member ::= ε ;
Accepted_contribution ::= Camera_ready_contribution ;
Clarity_to_Present_Understanding ::= ε ;
OC_Member ::= OC_Chair ;
Reviewing_event ::= follows::Administrative_event parallel_with::Administrative_event ;
MultimediaTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
CryptographyTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
ReviewQuestion ::= TextualReviewQuestion ;
 ReviewQuestion ::= NumericalReviewQuestion ;
 ReviewQuestion ::= TextualReviewQuestion | NumericalReviewQuestion ;
camera-ready_submission_date ::= start_date_of_camera-ready_submission ;
 camera-ready_submission_date ::= end_date_of_camera-ready_submission ;
 camera-ready_submission_date ::= start_date_of_camera-ready_submission | end_date_of_camera-ready_submission ;
Conference_volume ::= has_parts::Conference_part has_workshops::Workshop has_tracks::Track has_tutorials::Tutorial has_a_commtitee::Committee has_a_steering_committee::Steering_committee has_an_organizing_committee::Organizing_committee has_important_dates::Important_dates has_contributions::Conference_contribution has_a_location::String has_a_program_committee::Program_committee ;
start_date_of_full_paper_submission ::= ε ;
Clear_Accept ::= ε ;
Conference_days ::= One_conference_day ;
ProgramCommittee ::= hasProgramCommitteeMember::ProgramCommitteeMember hasMember::ProgramCommitteeMember ;
Deleted_Conflict ::= ε ;
Highly_Theoretical ::= ε ;
Registation_deadline ::= done_till::date ;
Bidding_Phase ::= Bidding_And_Paper_Submission_Phase ;
 Bidding_Phase ::= Bidding_Without_Paper_Submission_Phase ;
 Bidding_Phase ::= Bidding_And_Paper_Submission_Phase | Bidding_Without_Paper_Submission_Phase ;
Head_Role ::= assigned_by::Administrator ;
ProgramCommitteeMember ::= Chair ;
 ProgramCommitteeMember ::= ProgramCommitteeChair ;
 ProgramCommitteeMember ::= memberOfProgramCommittee::ProgramCommittee maxPapers::Integer addedBy::Administrator isMemberOf::ProgramCommittee hasPassword::String ;
Web_site ::= ε ;
Tends_Towards_Theoretical ::= ε ;
PaperQuestion ::= ε ;
Invited_Talk_Abstract ::= (is_the_1th_part_of::Thing)+ part_of_article::article ;
Final_manuscript ::= writtenBy::Author dealsWith::Topic remark::String abstract::String contactEmail::String hasKeyword::String hasTitle::String ;
Paid_applicant ::= Late_paid_applicant ;
 Paid_applicant ::= Early_paid_applicant ;
 Paid_applicant ::= Late_paid_applicant | Early_paid_applicant ;
end_date_of_abstract_submission ::= ε ;
RegistrationChair ::= organizes::Conference ;
Worker_non_speaker ::= ε ;
Invitation_letter ::= writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document (relatesTo::Thing)+ submited_by::Person Document_ID::String recieved_by::User used_by::Person submited__by::User ;
Book_proceeding ::= ε ;
Conference_announcement ::= has_authors::Person has_a_date_of_issue::date ;
Demo_Chair ::= ε ;
Conference_Trip ::= ε ;
WithdrawnPaper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
Program_Committee_Chair ::= is_author_of::article performs_activity::Activity is_employed_in::institute has_topic_of_interest::Topic supervises::Activity e-mail::String last_name::String first_name::String ;
Social_event ::= Trip ;
 Social_event ::= Banquet ;
 Social_event ::= Reception ;
 Social_event ::= Trip | Banquet | Reception ;
Self_Conflict ::= ε ;
PCMembersList ::= isProducedBy::Chair ;
Program_committee ::= was_a_program_committee_of::Conference_volume ;
Contribution_1th-author ::= ε ;
paper_assignment ::= Manual_Paper_Assignment ;
 paper_assignment ::= Automatic_Paper_Assignment ;
 paper_assignment ::= assign_paper::Program_Committee_member is_performed_by::human ;
Value_Partition ::= Topics ;
 Value_Partition ::= Format ;
 Value_Partition ::= Long_bool ;
 Value_Partition ::= Review_Values ;
 Value_Partition ::= Result_of_Advocate ;
 Value_Partition ::= Topics | Format | Long_bool | Review_Values | Result_of_Advocate ;
OutputDocument ::= CD-ROM ;
 OutputDocument ::= IndexOfAuthors ;
 OutputDocument ::= ExternalReviewersList ;
 OutputDocument ::= Program ;
 OutputDocument ::= PCMembersList ;
 OutputDocument ::= ListOfAbstracts ;
 OutputDocument ::= BookletOfAbstracts ;
 OutputDocument ::= Proceedings ;
 OutputDocument ::= isProducedBy::Chair ;
Conference_hall ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
QualitatvieLecture ::= hasAcronym::String ;
PC_Chair ::= ε ;
Review_Committee ::= ε ;
NumericalReviewQuestion ::= ε ;
Payment_document ::= Cheque ;
 Payment_document ::= Bank_transfer ;
 Payment_document ::= Cheque | Bank_transfer ;
Automatic_Paper_Assignment ::= (automatically_assign_paper::Program_Committee_member)+ ;
Undecided_Paper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
ComputerNetworksSecurityTopic ::= ε ;
URL ::= Event_URL ;
 URL ::= Senior_Reviewer_URL ;
 URL ::= Chair_URL ;
 URL ::= Contact_Person_URL ;
 URL ::= Regular_Reviewer_URL ;
 URL ::= Event_URL | Senior_Reviewer_URL | Chair_URL | Contact_Person_URL | Regular_Reviewer_URL ;
Steering_committee ::= was_a_steering_committee_of::Conference_volume ;
AuthorNotReviewer ::= submitsPaper::Paper writePaper::Paper writes_Paper::Paper changes::Contribution write_paper::Paper submitPaper::Paper writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing ;
review_form ::= is_created_in::Activity ;
Review_Form ::= Preview ;
 Review_Form ::= Review_Form_Setup ;
 Review_Form ::= Preview | Review_Form_Setup ;
Deadline_for_notification_of_acceptance ::= done_till::date ;
notification_email ::= acceptance_notification_email ;
 notification_email ::= rejection_notification_email ;
 notification_email ::= acceptance_notification_email | rejection_notification_email ;
Notification_Email ::= sended_by::Administrator Receiver_of_email::String Message_of_email::String Subject_of_email::String ;
PersonalPublicationHistory ::= ε ;
Social_Event ::= Conference_Trip ;
 Social_Event ::= Conference_Banquet ;
 Social_Event ::= Conference_Trip | Conference_Banquet ;
Senior_Program_Committee_member ::= supervises::Activity ;
Reviewed_Paper ::= Planed_Paper ;
Computer_Science ::= ε ;
ActivitySubmissionForm ::= TutorialProposal ;
 ActivitySubmissionForm ::= WorksopProposal ;
 ActivitySubmissionForm ::= isSubmittedBy::Author hasAuthor::Author submissionDeadline::dateTime ;
AssociatedChair ::= memberOfConference::Conference member_of_conference::Conference ;
rejection_notification_email ::= ε ;
Reviewed_contribution ::= Accepted_contribution ;
 Reviewed_contribution ::= Rejected_contribution ;
 Reviewed_contribution ::= has_a_review::Review ;
ReviewRating ::= WeekRejectRating ;
 ReviewRating ::= AcceptRating ;
 ReviewRating ::= AccpetIfRoomRating ;
 ReviewRating ::= RejectRating ;
 ReviewRating ::= WeekRejectRating | AcceptRating | AccpetIfRoomRating | RejectRating ;
WirelessCommunicationsTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
ConferenceAttendant ::= mustPay::Fee hasAdress::String paid::Boolean hasPhone::String ;
TextualReviewQuestion ::= ε ;
PowerPoint_presentation ::= is_given_by::Active_conference_participant ;
TalkEvent ::= ClosingTalk ;
 TalkEvent ::= WelcomeTalk ;
 TalkEvent ::= ClosingTalk | WelcomeTalk ;
FinanceChair ::= organizes::Conference ;
Program_chair ::= made_program::Conference_Program ;
CADTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Blocked_Phase ::= hasPhaseStatus::EEnum ;
Trip_city ::= ε ;
Contact_Person_URL ::= ε ;
Event_Creation ::= hasTopic::Topic expectedAttendance::Integer isPartOf::Conference is_followed_by::Activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human is_held_before::Time is_held_in::Thing is_held_after::Time is_dated_on::dateTime has_result::article sent_by::Person ;
Registration_fee ::= Author_attendee_book_registration_fee ;
 Registration_fee ::= Nonmember_registration_fee ;
 Registration_fee ::= Nonauthor_registration_fee ;
 Registration_fee ::= Memeber_registration_fee ;
 Registration_fee ::= Student_registration_fee ;
 Registration_fee ::= Author_attendee_cd_registration_fee ;
 Registration_fee ::= Author_attendee_book_registration_fee | Nonmember_registration_fee | Nonauthor_registration_fee | Memeber_registration_fee | Student_registration_fee | Author_attendee_cd_registration_fee ;
PublicationsChair ::= organizes::Conference ;
Speaker_lecture ::= hasAssignedPaper::AcceptedPaper room::String isAssociatedTo::Slot hasChair::Chair ;
Technic_activity ::= ε ;
Conference_part ::= Track ;
 Conference_part ::= has_a_track-workshop-tutorial_topic::Topic is_part_of_conference_volumes::Conference_volume has_a_track-workshop-tutorial_chair::Track-workshop_chair ;
ComputerNetworksSensorTopic ::= ε ;
Accepted_paper ::= read_paper_by::Thing rateed_paper_by::Thing Score::EEnum ;
IASTED_non_member ::= ε ;
Possible_Reviewer ::= PC_Member ;
 Possible_Reviewer ::= reviewerOfPaper::Paper ;
One_conference_day ::= ε ;
Program_Comitee ::= discusses::Paper ;
Overhead_projector ::= ε ;
SlideSet ::= writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document (relatesTo::Thing)+ submited_by::Person Document_ID::String recieved_by::User used_by::Person submited__by::User ;
MeetingRoomPlace ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
Submissions_deadline ::= done_till::date ;
Neutral_Review ::= gives_classification::classification is_created_in::Activity review_written_by::Reviewer reviewOfPaper::Paper reviewWrittenBy::Possible_Reviewer containsEvaluation::Evaluation rates::Paper isWritenBy::Reviewer assigned_review_by::Primary_Reviewer written_review_by::Reviewer writtenBy::Reviewer reviews::Reviewed_contribution ;
ExternalReviewer ::= assignedByReviewer::Reviewer cooperatesReviewer::Reviewer ;
WelcomeTalk ::= ε ;
SocialEvent ::= Excursion ;
 SocialEvent ::= Reception ;
 SocialEvent ::= Excursion | Reception ;
Sponsor_state ::= ε ;
ContactInformation ::= hasCity::String hasStreet::String hasPostalCode::String hasPhone::String ;
Submitted_Paper ::= Assigned_Paper ;
 Submitted_Paper ::= Reviewed_Paper ;
 Submitted_Paper ::= Advocated_Paper ;
 Submitted_Paper ::= is_stored_in::Paper_File has_been_sent_by::Contact_Author Paper_Id::String Comments_To_Chair::String ;
Initial_manuscipt ::= writtenBy::Author dealsWith::Topic remark::String abstract::String contactEmail::String hasKeyword::String hasTitle::String ;
Author_cd_proceedings_included ::= submitsPaper::Paper writePaper::Paper writes_Paper::Paper changes::Contribution write_paper::Paper submitPaper::Paper writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing ;
FreeTimeBreak ::= ε ;
Audiovisual_equipment ::= Video_cassette_player ;
 Audiovisual_equipment ::= LCD_projector ;
 Audiovisual_equipment ::= Computer ;
 Audiovisual_equipment ::= Overhead_projector ;
 Audiovisual_equipment ::= Video_cassette_player | LCD_projector | Computer | Overhead_projector ;
Session_room ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
Scientific_Event ::= Individual_Presentation ;
 Scientific_Event ::= Track ;
 Scientific_Event ::= Workshop ;
Portable_Reject ::= ε ;
Record_of_attendance ::= writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document (relatesTo::Thing)+ submited_by::Person Document_ID::String recieved_by::User used_by::Person submited__by::User ;
Individual_Presentation ::= Invited_Talk ;
 Individual_Presentation ::= Contributed_Talk ;
 Individual_Presentation ::= (presentationOfPaper::Document)+ ;
Tends_Towards_Practical ::= ε ;
PerformanceTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Reviewing_results_event ::= follows::Administrative_event parallel_with::Administrative_event ;
BreakEvent ::= CoffeeBreak ;
 BreakEvent ::= FreeTimeBreak ;
 BreakEvent ::= MealBreak ;
 BreakEvent ::= CoffeeBreak | FreeTimeBreak | MealBreak ;
Setup_Phase ::= hasPhaseStatus::EEnum ;
Evaluated_Paper ::= Accepted_Paper ;
 Evaluated_Paper ::= Rejected_Paper ;
 Evaluated_Paper ::= hasReview::Review ;
AcademiaOrganization ::= isProviderOf::Sponsorship ;
ConferenceMember ::= Reviewer ;
 ConferenceMember ::= ConferenceChair ;
 ConferenceMember ::= AssociatedChair ;
 ConferenceMember ::= Author ;
 ConferenceMember ::= CommitteeMember ;
 ConferenceMember ::= Chairman ;
 ConferenceMember ::= ProgramCommitteeMember ;
 ConferenceMember ::= memberOfConference::Conference member_of_conference::Conference ;
MedicineTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
New_Perspective_Issue_Problem_Solving ::= ε ;
Classic_Papers ::= ε ;
Accepted_Paper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
 Accepted_Paper ::= hasReview::Review ;
Submitted_contribution ::= Reviewed_contribution ;
 Submitted_contribution ::= has_a_review_expertise::Review_expertise ;
Agency_Staff_Member ::= loggin_in::System submit::Document get::Email E-mail::String hasMail::String worksForCompany::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasAffiliation::String hasFirstName::String hasLastName::String hasEmail::String hasName::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String ;
Confirmed_Conflict ::= ε ;
Conference_hotel ::= ε ;
Track-workshop_chair ::= was_a_track-workshop_chair_of::Conference_part ;
Program_Comitee_Meeting ::= E-mail_PC_Meeting ;
 Program_Comitee_Meeting ::= PC_Meeting ;
 Program_Comitee_Meeting ::= E-mail_PC_Meeting | PC_Meeting ;
Coffee_break ::= ε ;
RatedPapers ::= hasRating::ReviewRating ;
Regular_Paper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
ConferenceChair ::= memberOfConference::Conference member_of_conference::Conference ;
Closed_Phase ::= hasPhaseStatus::EEnum ;
EEnum ::= (Yes::ε) | (No::ε) | (Accept::ε) | (Reject::ε) | (Unsure::ε) | (submitted::ε) | (missing::ε) | (notStarted::ε) | (active::ε) | (finished::ε) | (accepted::ε) | (rejected::ε) | (regular::ε) | (invited::ε) | (lowBid::ε) | (-::ε) | (CONFLICT::ε) | (wantNot::ε) | (highBid::ε) | (Compilers::ε) | (Microarchitecture::ε) | (Systems::ε) | (ForwardLookingIdea::ε) | (1::ε) | (2::ε) | (3::ε) | (4::ε) | (5::ε) | (6::ε) | (7::ε) | (male::ε) | (female::ε) | (high::ε) | (medium::ε) | (low::ε) | (very high::ε) ;
Author_attendee_book_registration_fee ::= ε ;
AcceptRating ::= ε ;
Camera_Ready_event ::= follows::Administrative_event parallel_with::Administrative_event ;
IASTED_member ::= ε ;
ClosingTalk ::= ε ;
Abstract_And_Paper_Submission_Phase ::= hasPhaseStatus::EEnum ;
ListOfAbstracts ::= isProducedBy::Chair ;
MealBreak ::= ε ;
Technical_commitee ::= ε ;
reviewing_proces ::= lower_tier_reviewing_process ;
 reviewing_proces ::= upper_tier_reviewing_process ;
 reviewing_proces ::= lower_tier_reviewing_process | upper_tier_reviewing_process ;
Manual_Paper_Assignment ::= (manually_assign_paper::Program_Committee_member)+ ;
WorksopProposal ::= isSubmittedBy::Author hasAuthor::Author submissionDeadline::dateTime ;
Conference_Hiker ::= ε ;
Workshop_Paper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
Industrial_Session ::= ε ;
Conference_fees ::= ε ;
ConferenceDinner ::= hasMenu::MealMenu ;
New_Information ::= ε ;
Meta-Reviewer ::= invites_co-reviewers::Reviewer invited_by::Reviewer (has_a_review_reference_or_expertise::Thing)+ writes_review::Review hasReviewHistory::PersonalReviewHistory executes::DoubleBlindReview cooperates::ExternalReviewer IsAssignedTo::Paper hasConflictedPaper::Paper hasPreferredPaper::Paper hasPreferredTopic::ResearchTopic writeReview::Review has_made_review::Paper_Review UserName::String Comments_to_Chair::String Other_Areas::String refuses::Pending_Proposed_Conflict reviews::Paper bidsFor::Paper confirmes::Pending_Proposed_Conflict assignedPaperBy::Program_Comitee_Chair assignedByAdministrator::Administrator adjustBid::Bid readPaper::Paper hasBeenAssigned::Paper assignExternalReviewer::ExternalReviewer ;
Activity_before_conference ::= Renting ;
 Activity_before_conference ::= Research ;
 Activity_before_conference ::= Refusing_manuscript ;
 Activity_before_conference ::= Accepting_manuscript ;
 Activity_before_conference ::= Receiving_manuscript ;
 Activity_before_conference ::= Renting | Research | Refusing_manuscript | Accepting_manuscript | Receiving_manuscript ;
ProgramCommitteeChair ::= endReview::Review ;
Contact_Author ::= has_sent::Submitted_Paper Alternate_Email::String ;
Call_for_participation ::= has_authors::Person has_a_date_of_issue::date ;
Invitation_Of_Reviewers_Phase ::= hasPhaseStatus::EEnum ;
Conference_airport ::= ε ;
Passive_conference_participant ::= ε ;
Hidden_Conflict ::= ε ;
MainAuthor ::= submitsPaper::Paper writePaper::Paper writes_Paper::Paper changes::Contribution write_paper::Paper submitPaper::Paper writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing ;
Presenter_city ::= ε ;
TPCMember ::= loggin_in::System submit::Document get::Email E-mail::String hasMail::String worksForCompany::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasAffiliation::String hasFirstName::String hasLastName::String hasEmail::String hasName::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String ;
Early-Registered_Participant ::= ε ;
phase_of_conference ::= ε ;
Overall_Value ::= Valuable_Confirmation_of_Present_Knowledge ;
 Overall_Value ::= Other ;
 Overall_Value ::= Not_Much ;
 Overall_Value ::= New_Information ;
 Overall_Value ::= New_Perspective_Issue_Problem_Solving ;
 Overall_Value ::= Clarity_to_Present_Understanding ;
 Overall_Value ::= Valuable_Confirmation_of_Present_Knowledge | Other | Not_Much | New_Information | New_Perspective_Issue_Problem_Solving | Clarity_to_Present_Understanding ;
Video_cassette_player ::= ε ;
ConferenceEvent ::= NonAcademicEvent ;
 ConferenceEvent ::= AcademicEvent ;
 ConferenceEvent ::= hasAttendee::Person hasLocation::Place hasProgramme::Programme hasEndDateTime::dateTime hasStartDateTime::dateTime ;
Conference_document ::= Conference_contribution ;
 Conference_document ::= Information_for_participants ;
 Conference_document ::= Call_for_paper ;
 Conference_document ::= Conference_announcement ;
 Conference_document ::= Call_for_participation ;
 Conference_document ::= Conference_www ;
 Conference_document ::= Review ;
 Conference_document ::= has_authors::Person has_a_date_of_issue::date ;
Single_hotel_room ::= ε ;
Contribution_co-author ::= ε ;
Introduction_of_speaker ::= ε ;
Multi-author_Volume ::= Proceedings ;
 Multi-author_Volume ::= writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document (relatesTo::Thing)+ submited_by::Person Document_ID::String recieved_by::User used_by::Person submited__by::User ;
Nonmember_registration_fee ::= ε ;
ComputerNetworksMeasurementsTopic ::= ε ;
Coctail_reception ::= ε ;
ProgramCoChair ::= organizes::Conference ;
Chair_URL ::= ε ;
Regular_Session ::= hasAssignedPaper::AcceptedPaper room::String isAssociatedTo::Slot hasChair::Chair ;
Conference_activity ::= Social_program ;
 Conference_activity ::= Technic_activity ;
 Conference_activity ::= Registration ;
 Conference_activity ::= Introduction ;
 Conference_activity ::= Welcome_address ;
 Conference_activity ::= Coffee_break ;
 Conference_activity ::= Coctail_reception ;
 Conference_activity ::= Presentation ;
 Conference_activity ::= Lecture ;
 Conference_activity ::= Social_program | Technic_activity | Registration | Introduction | Welcome_address | Coffee_break | Coctail_reception ;
Secondary_Reviewer ::= isMemberOf::Conference reject_paper::Paper accept::Paper ;
start_date_of_conference ::= ε ;
Conference_participant ::= Passive_conference_participant ;
 Conference_participant ::= Active_conference_participant ;
ComputerNetworksTopic ::= ComputerNetworksEnterpriseTopic ;
 ComputerNetworksTopic ::= ComputerNetworksSwitchingTopic ;
 ComputerNetworksTopic ::= ComputerNetworksSensorTopic ;
 ComputerNetworksTopic ::= ComputerNetworksSecurityTopic ;
 ComputerNetworksTopic ::= ComputerNetworksOpticalTopic ;
 ComputerNetworksTopic ::= ComputerNetworksMeasurementsTopic ;
 ComputerNetworksTopic ::= ComputerNetworksManagementTopic ;
 ComputerNetworksTopic ::= ComputerNetworksAapplicationsTopic ;
 ComputerNetworksTopic ::= ComputerNetworksEnterpriseTopic | ComputerNetworksSwitchingTopic | ComputerNetworksSensorTopic | ComputerNetworksSecurityTopic | ComputerNetworksOpticalTopic | ComputerNetworksMeasurementsTopic | ComputerNetworksManagementTopic | ComputerNetworksAapplicationsTopic ;
Long_bool ::= ε ;
Rejected_paper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
Full_day_tour ::= ε ;
LCD_projector ::= ε ;
Author_Role ::= assigned_by::Administrator ;
PaymentMode ::= ε ;
Presenter_house ::= ε ;
Conference_Paper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
bidding_of_reviewer ::= is_performed_by::human ;
BookletOfAbstracts ::= isProducedBy::Chair ;
Cd_proceening ::= ε ;
StudentAdvocate ::= organizes::Conference ;
Hotel_room ::= Single_hotel_room ;
 Hotel_room ::= Double_hotel_room ;
 Hotel_room ::= Single_hotel_room | Double_hotel_room ;
PaperPresentation ::= relatedToPaper::AcceptedPaper ;
Presenter_university ::= ε ;
Student_registration_fee ::= ε ;
Tutorial_Chair ::= ε ;
abstract_submission_date ::= end_date_of_abstract_submission ;
 abstract_submission_date ::= start_date_of_abstract_submission ;
 abstract_submission_date ::= end_date_of_abstract_submission | start_date_of_abstract_submission ;
Trip_day ::= ε ;
Negative_Review ::= gives_classification::classification is_created_in::Activity review_written_by::Reviewer reviewOfPaper::Paper reviewWrittenBy::Possible_Reviewer containsEvaluation::Evaluation rates::Paper isWritenBy::Reviewer assigned_review_by::Primary_Reviewer written_review_by::Reviewer writtenBy::Reviewer reviews::Reviewed_contribution ;
ExternalReviewersList ::= isProducedBy::Chair ;
abstract_of_paper ::= article_written_by::Author has_reviewer::Reviewer has_abstract::Abstract goes_through::Activity is_sent_to::human is_created_in::Activity structure_created_by::human has_author::human gives_classification::classification ;
Approval_Email ::= confirm::Event ;
Hotel_registration_form ::= ε ;
AntennasTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Source_Archive ::= hasContributionFileStatus::EEnum ;
MicroelectronicsTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
lower_tier_reviewing_process ::= ε ;
ComputerNetworksOpticalTopic ::= ε ;
Contributed_Talk ::= (presentationOfPaper::Document)+ ;
Contact_Person ::= is_author_of::article performs_activity::Activity is_employed_in::institute has_topic_of_interest::Topic supervises::Activity e-mail::String last_name::String first_name::String ;
TutorialProposal ::= isSubmittedBy::Author hasAuthor::Author submissionDeadline::dateTime ;
Conference_Participant ::= Demo_Chair ;
 Conference_Participant ::= OC_Member ;
 Conference_Participant ::= Early-Registered_Participant ;
 Conference_Participant ::= Late-Registered_Participant ;
 Conference_Participant ::= Tutorial_Chair ;
 Conference_Participant ::= PC_Chair ;
 Conference_Participant ::= Workshop_Chair ;
 Conference_Participant ::= Presenter ;
 Conference_Participant ::= Session_Chair ;
 Conference_Participant ::= Demo_Chair | OC_Member | Early-Registered_Participant | Late-Registered_Participant ;
Paper_File ::= is_Type::Format ;
RFC ::= ε ;
Conference_city ::= ε ;
Proposed_Conflict ::= conflictProposedBy::Thing ;
Reviewer_Famliliarity ::= High ;
 Reviewer_Famliliarity ::= Low ;
 Reviewer_Famliliarity ::= Moderate ;
 Reviewer_Famliliarity ::= High | Low | Moderate ;
Accepting_manuscript ::= ε ;
Rejected_Paper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
 Rejected_Paper ::= hasReview::Review ;
Event_Approval ::= hasTopic::Topic expectedAttendance::Integer isPartOf::Conference is_followed_by::Activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human is_held_before::Time is_held_in::Thing is_held_after::Time is_dated_on::dateTime has_result::article sent_by::Person ;
Invited_Paper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
PC_Member ::= SC_Member ;
 PC_Member ::= Session_Chair ;
 PC_Member ::= Tutorial_Chair ;
 PC_Member ::= PC_Chair ;
 PC_Member ::= Workshop_Chair ;
Highly_Practical ::= ε ;
Plenary_lecture_speaker ::= submitsPaper::Paper writePaper::Paper writes_Paper::Paper changes::Contribution write_paper::Paper submitPaper::Paper writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing ;
Academic_Institution ::= Research_Institute ;
 Academic_Institution ::= University ;
 Academic_Institution ::= scientificallyOrganises::Academic_Institution ;
PaperStatus ::= isStatusOf::Paper ;
Author_book_proceedings_included ::= submitsPaper::Paper writePaper::Paper writes_Paper::Paper changes::Contribution write_paper::Paper submitPaper::Paper writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing ;
Value_added_tax ::= ε ;
Video_presentation ::= is_given_by::Active_conference_participant ;
Paper_Categorization ::= Tends_Towards_Theoretical ;
 Paper_Categorization ::= Tends_Towards_Practical ;
 Paper_Categorization ::= Balanced_Theory_and_Practice ;
 Paper_Categorization ::= Highly_Theoretical ;
 Paper_Categorization ::= Highly_Practical ;
 Paper_Categorization ::= Tends_Towards_Theoretical | Tends_Towards_Practical | Balanced_Theory_and_Practice | Highly_Theoretical | Highly_Practical ;
submission_process ::= is_performed_by::human ;
Camera_ready_manuscript_deadline ::= done_till::date ;
OC_Chair ::= ε ;
MealEvent ::= ConferenceDinner ;
 MealEvent ::= hasMenu::MealMenu ;
PublicityWebChair ::= organizes::Conference ;
Credit_card ::= ε ;
end_date_of_camera-ready_submission ::= ε ;
start_date_of_abstract_submission ::= ε ;
Conference_Session ::= Industrial_Session ;
CoffeeBreak ::= ε ;
Research_Institute ::= scientificallyOrganises::Academic_Institution ;
Reviewer_Role ::= assigned_by::Administrator ;
Activity_after_conference ::= Departure ;
 Activity_after_conference ::= Full_day_tour ;
 Activity_after_conference ::= Departure | Full_day_tour ;
Bank_transfer ::= ε ;
Non_speaker ::= Worker_non_speaker ;
 Non_speaker ::= Student_non_speaker ;
 Non_speaker ::= Worker_non_speaker | Student_non_speaker ;
Committe_Role ::= assigned_by::Administrator ;
Registration_form ::= ε ;
PhaseOfConferencePreparation ::= Setup_Phase ;
 PhaseOfConferencePreparation ::= Camera_Ready_Copy_Phase ;
 PhaseOfConferencePreparation ::= Assignment_Phase ;
 PhaseOfConferencePreparation ::= Blocked_Phase ;
 PhaseOfConferencePreparation ::= Abstract_And_Paper_Submission_Phase ;
 PhaseOfConferencePreparation ::= Invitation_Of_Reviewers_Phase ;
 PhaseOfConferencePreparation ::= Review_Phase ;
 PhaseOfConferencePreparation ::= Closed_Phase ;
 PhaseOfConferencePreparation ::= Bidding_Phase ;
 PhaseOfConferencePreparation ::= hasPhaseStatus::EEnum ;
Student_non_speaker ::= ε ;
Review_Form_Setup ::= ε ;
Administrative_event ::= Reviewing_results_event ;
 Administrative_event ::= Reviewing_event ;
 Administrative_event ::= Registration_of_participants_event ;
 Administrative_event ::= Submission_event ;
 Administrative_event ::= Camera_Ready_event ;
 Administrative_event ::= follows::Administrative_event parallel_with::Administrative_event ;
Brief_introduction_for_Session_chair ::= writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document (relatesTo::Thing)+ submited_by::Person Document_ID::String recieved_by::User used_by::Person submited__by::User ;
Camera_ready_contribution ::= ε ;
Adobe_PDF ::= ε ;
CD ::= ε ;
Conference_Program ::= Program_made_by::Program_chair planned_papers::Planed_Paper ;
Positive_Review ::= gives_classification::classification is_created_in::Activity review_written_by::Reviewer reviewOfPaper::Paper reviewWrittenBy::Possible_Reviewer containsEvaluation::Evaluation rates::Paper isWritenBy::Reviewer assigned_review_by::Primary_Reviewer written_review_by::Reviewer writtenBy::Reviewer reviews::Reviewed_contribution ;
PublishedPaper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
full_paper_submission_date ::= start_date_of_full_paper_submission ;
 full_paper_submission_date ::= end_date_of_full_paper_submission ;
 full_paper_submission_date ::= start_date_of_full_paper_submission | end_date_of_full_paper_submission ;
DoubleBlindReview ::= isExecutedBy::Reviewer ;
ReviewForm ::= ε ;
Hotel_fee ::= ε ;
Sponsor_company_house ::= ε ;
Student_lecturer ::= ε ;
Written_contribution ::= Submitted_contribution ;
 Written_contribution ::= Regular_contribution ;
 Written_contribution ::= Submitted_contribution | Regular_contribution ;
Conference_contributor ::= Regular_author ;
 Conference_contributor ::= Invited_speaker ;
 Conference_contributor ::= Active_conference_participant ;
 Conference_contributor ::= Regular_author | Invited_speaker ;
Event_Setup ::= Paper_Typologies ;
 Event_Setup ::= Review_Form ;
 Event_Setup ::= Submission_Template ;
 Event_Setup ::= Event_Tracks ;
 Event_Setup ::= Research_Topic ;
 Event_Setup ::= Email_Template ;
 Event_Setup ::= define::Event ;
CommitteeMember ::= Secondary_Reviewer ;
 CommitteeMember ::= Primary_Reviewer ;
 CommitteeMember ::= isMemberOf::Conference reject_paper::Paper accept::Paper ;
Conference_building ::= ε ;
Corresponding_Author ::= submitsPaper::Paper writePaper::Paper writes_Paper::Paper changes::Contribution write_paper::Paper submitPaper::Paper writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing ;
PendingPaper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
PowerlineTransmissionTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Marginal_Tend_to_Reject ::= ε ;
IndustryOrganization ::= isProviderOf::Sponsorship ;
TestOnlyTopic ::= isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
WeekRejectRating ::= ε ;
Contribution_File ::= Source_Archive ;
 Contribution_File ::= Poster ;
 Contribution_File ::= Camera_Ready_Copy ;
 Contribution_File ::= Slides ;
 Contribution_File ::= Paper_File ;
 Contribution_File ::= hasContributionFileStatus::EEnum ;
Conflict_Rules ::= ε ;
Corel_Word_Perfect ::= ε ;
Extended_abstract ::= ε ;
Industrial_Paper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
RTF ::= ε ;
CD-ROM ::= isProducedBy::Chair ;
Co-chair ::= was_a_committe_co-chair_of::Committee ;
Conference_Banquet ::= ε ;
Tutorial_speaker ::= submitsPaper::Paper writePaper::Paper writes_Paper::Paper changes::Contribution write_paper::Paper submitPaper::Paper writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing ;
Organising_Agency ::= (publisherOf::Thing)+ technicallyOrganises::Thing ;
PaperFullVersion ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
RejectRating ::= ε ;
Demo_Session ::= hasAssignedPaper::AcceptedPaper room::String isAssociatedTo::Slot hasChair::Chair ;
Not_Much ::= ε ;
SingleLevelConference ::= is_in_phase::phase_of_conference has_program::program hasMember::Person hasName::String endDate::dateTime paperDueOn::dateTime registrationDueOn::dateTime manuscriptDueOn::dateTime startDate::dateTime hasCountry::Country isOrganizedBy::OrganizingCommittee annualOrder::Integer takesPlace::Location hasAcronym::String finishedBy::Program_Comitee_Chair focusesOn::Topic startedBy::Program_Comitee_Chair takesPlace::Location has_conference_member::ConferenceMember WebSite::anyURI Topic_of_conference::String Date::date hasConferenceMember::ConferenceMember paperAssignmentFinalizedBy::Administrator reviewCriteriaEnteredBy::Administrator paperAssignmentToolsRunBy::Administrator virtualMeetingEnabledBy::Administrator hardcopyMailingManifestsPrintedBy::Administrator detailsEnteredBy::Administrator reviewerBiddingStartedBy::Administrator date::date reviewsPerPaper::Integer logoURL::anyURI acceptsHardcopySubmissions::Boolean siteURL::anyURI ;
Program_Committee_member ::= Senior_Program_Committee_member ;
 Program_Committee_member ::= Regular_Program_Committee_member ;
 Program_Committee_member ::= Senior_Program_Committee_member | Regular_Program_Committee_member ;
Worker_lecturer ::= ε ;
ResearchTopic ::= ε ;
ConferenceVenuePlace ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
end_date_of_full_paper_submission ::= ε ;
Conference_contribution ::= Poster ;
 Conference_contribution ::= Written_contribution ;
 Conference_contribution ::= Presentation ;
 Conference_contribution ::= is_submitted_at::Conference_volume ;
Invited_Talk ::= (presentationOfPaper::Document)+ ;
Demo_Paper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
CallForReviews ::= forEvent::AcademicEvent (isInitiatedBy::Person)+ hasSubmissionInstructions::String hasSubmissionDeadline::dateTime ;
acceptance_notification_email ::= ε ;
Author_attendee_cd_registration_fee ::= ε ;
ComputerNetworksManagementTopic ::= ε ;
Paper_Typologies ::= define::Event ;
Information_for_participants ::= has_authors::Person has_a_date_of_issue::date ;
Bidding_And_Paper_Submission_Phase ::= ε ;
Camera_Ready_Copy_Phase ::= hasPhaseStatus::EEnum ;
Programme_Brochure ::= writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document (relatesTo::Thing)+ submited_by::Person Document_ID::String recieved_by::User used_by::Person submited__by::User ;
Balanced_Theory_and_Practice ::= ε ;
NonAcademicEvent ::= MealEvent ;
 NonAcademicEvent ::= BreakEvent ;
 NonAcademicEvent ::= SocialEvent ;
 NonAcademicEvent ::= MealEvent | BreakEvent | SocialEvent ;
MS_Word ::= ε ;
Fee_for_extra_trip ::= ε ;
ComputerNetworksSwitchingTopic ::= ε ;
Conference_restaurant ::= ε ;
Meta-Review ::= gives_classification::classification is_created_in::Activity review_written_by::Reviewer reviewOfPaper::Paper reviewWrittenBy::Possible_Reviewer containsEvaluation::Evaluation rates::Paper isWritenBy::Reviewer assigned_review_by::Primary_Reviewer written_review_by::Reviewer writtenBy::Reviewer reviews::Reviewed_contribution ;
Invited_speaker ::= ε ;
Presenter_state ::= ε ;
Poster_Paper ::= full_paper_size::Integer isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
Regular_Reviewer_URL ::= ε ;
managing_of_conference_process ::= hasTopic::Topic expectedAttendance::Integer isPartOf::Conference is_followed_by::Activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human is_held_before::Time is_held_in::Thing is_held_after::Time is_dated_on::dateTime has_result::article sent_by::Person ;
Bidding_Without_Paper_Submission_Phase ::= ε ;
Planed_Paper ::= is_planned_in::Conference_Program ;
Call_for_paper ::= has_authors::Person has_a_date_of_issue::date ;
PersonalHistory ::= PersonalPublicationHistory ;
 PersonalHistory ::= PersonalReviewHistory ;
 PersonalHistory ::= PersonalPublicationHistory | PersonalReviewHistory ;
Conference_www ::= has_a_URL::String ;
Clear_Reject ::= ε ;
Rejected_contribution ::= has_a_review::Review ;
Invited_talk ::= is_given_by::Active_conference_participant ;
Workshop_Chair ::= ε ;
Event_Tracks ::= define::Event ;
Submission_Template ::= define::Event ;
Co-Author ::= co-writePaper::Paper ;
Camera_Ready_Copy ::= hasContributionFileStatus::EEnum ;
Author_information_form ::= ε ;
ComputerNetworksAapplicationsTopic ::= ε ;
Review_expertise ::= has_a_submitted_contribution::Submitted_contribution has_an_expertise::EEnum ;
Event_URL ::= concerned::Event ;
Important_dates ::= is_an_abstract_submission_date::date is_a_full_paper_submission_date::date is_an_ending_date::date is_a_date_of_acceptance_announcement::date is_a_date_of_camera_ready_paper_submission::date is_a_starting_date::date belong_to_a_conference_volume::Conference_volume ;
Submission_event ::= follows::Administrative_event parallel_with::Administrative_event ;
ActivePaper ::= RatedPapers ;
 ActivePaper ::= hasRating::ReviewRating ;
Feature_Request ::= ε ;
AcceptedPaper ::= relatedToEvent::PaperPresentation isAssignedToSession::Session ;
TravelGrant ::= providedBy::Organization hasCostCurrency::String hasCostAmount::Integer ;
Review_preference ::= (has_a_topic_or_a_submission_contribution::Thing)+ has_a_degree::Integer ;
Memeber_registration_fee ::= ε ;
--------------------metamodels::PDG.bgf--------------------
ExpressionNode ::= name::String expression::Expression (dataDependenceNodes::ExpressionNode)+ (controlDependenceNodes::ExpressionNode)+ ;
EnterNode ::= name::String (controlDependenceNodes::ExpressionNode)+ ;
MProgramDependenceGraph ::= node::EnterNode ;
--------------------metamodels::PIF.bgf--------------------
ActivityStatus ::= ε ;
--------------------metamodels::PRR.bgf--------------------
RealExp ::= realSymbol::Double ;
IntegerExp ::= integerSymbol::Integer ;
RuleCondition ::= ruleConditionOwner::Rule conditionExp::PRRExpressions/OclExpression ;
VariableDeclaration ::= type::PRRTypes/OclType varName::String (variableExp::PRRExpressions/VariableExp)+ ;
OperatorCallExp ::= ε ;
NavigationOrAttributeCallExp ::= name::String ;
LoopExp ::= body::PRRExpressions/OclExpression (iterators::PRRExpressions/Iterator)+ ;
IntegerType ::= ε ;
RealType ::= ε ;
OperationCallExp ::= (arguments::PRRExpressions/OclExpression)+ operationName::String signature::String ;
RuleVariable ::= ruleVariableOwner::Binding filter::PRRExpressions/OclExpression ;
CollectionOperationCallExp ::= ε ;
BooleanExp ::= booleanSymbol::Boolean ;
OclType ::= (variableDeclaration::PRRExpressions/VariableDeclaration)+ (oclExpression::PRRExpressions/OclExpression)+ appliedAllInstance::PRRExpressions/AllInstanceExp (typeExp::PRRExpressions/TypeExp)+ ;
CreateAction ::= (insertArguments::PRRExpressions/OclExpression)+ ;
RuleAction ::= DeleteAction ;
 RuleAction ::= AssignAction ;
 RuleAction ::= InvokeAction ;
 RuleAction ::= CreateAction ;
 RuleAction ::= actionOwner::Rule ;
IteratorExp ::= name::String ;
InvokeAction ::= invocation::PRRExpressions/OclExpression ;
StringExp ::= stringSymbol::String ;
StringType ::= ε ;
AllInstanceExp ::= sourceType::PRRTypes/OclType ;
RuleSet ::= (rules::Rule)+ ;
AssignAction ::= objValue::PRRExpressions/OclExpression aValue::PRRExpressions/OclExpression ;
TypeExp ::= referredType::PRRTypes/OclType ;
NamedElement ::= Rule ;
 NamedElement ::= OclType ;
BooleanType ::= ε ;
VariableExp ::= referredVariable::PRRExpressions/VariableDeclaration ;
DeleteAction ::= objValue::PRRExpressions/OclExpression ;
--------------------metamodels::Parameters.bgf--------------------
ParametersList ::= (parameters::Parameter)+ ;
--------------------metamodels::PathExp.bgf--------------------
PathExp ::= (states::State)+ (transitions::Transition)+ ;
--------------------metamodels::Perceptory.bgf--------------------
MetaData ::= source::Source characteristic::Characteristic operations::Operation theClass::Class ;
VisualInfo ::= details::MetaData rule::BusnissRule operations::Operation theClass::Class relationSchip::RelationSchip constraint::Constraint ;
ConstrainedRelationSchip ::= ε ;
AssociationEnd ::= ε ;
BusnissRule ::= characteristic::Characteristic ;
EnumeratedDomain ::= (value::Value)+ ;
RelationSchip ::= Association ;
 RelationSchip ::= Generalisation ;
 RelationSchip ::= Dependency ;
 RelationSchip ::= (affectCharacteristic::Characteristic)+ constraint::Constraint (steriotype::Steriotype)+ (packages::Package)+ associatePackages::Package ;
PerceptorySteriotype ::= Geometry ;
 PerceptorySteriotype ::= Temporality ;
 PerceptorySteriotype ::= VisualInfo ;
 PerceptorySteriotype ::= (descriptiveAttribute::DescriptiveAttribute)+ (operations::Operation)+ (relationSchip::RelationSchip)+ (theClass::Class)+ (thePackage::Package)+ ;
RangeDomain ::= (descriptiveAttribute::DescriptiveAttribute)+ ;
DescriptiveAttribute ::= tempsDef::Temporality specialDef::Geometry steriotype::Steriotype domain::Domain ;
--------------------metamodels::PetriNet_extended.bgf--------------------
LocatedElement ::= NamedElement ;
TransitionToPlace ::= from::Transition to::Place ;
PlaceToTransition ::= from::Place to::Transition ;
PetriNet ::= (elements::Element)+ (arcs::Arc)+ (execs::Execution)+ ;
NamedElement ::= PetriNet ;
 NamedElement ::= Element ;
 NamedElement ::= Arc ;
--------------------metamodels::PluginEclipse.bgf--------------------
AttResolution ::= value::Resolution ;
LocatedElement ::= Eclipse ;
 LocatedElement ::= Bundle ;
 LocatedElement ::= RequireBundleAttribute ;
 LocatedElement ::= Version ;
 LocatedElement ::= RequiredBundle ;
 LocatedElement ::= ImportedPackage ;
 LocatedElement ::= ExportedPackage ;
 LocatedElement ::= Package ;
 LocatedElement ::= Xfriends ;
RequireBundleAttribute ::= AttResolution ;
 RequireBundleAttribute ::= AttVisibility ;
 RequireBundleAttribute ::= Range ;
ExportedPackage ::= Xinternal ;
 ExportedPackage ::= package::Package version::Version xFriends::Xfriends ;
AttVisibility ::= value::Visibility ;
ImportedPackage ::= resolution::Resolution package::Package range::Range ;
RequiredBundle ::= (requireBundleAttribute::RequireBundleAttribute)+ bundle::Bundle ;
--------------------metamodels::ProMarte.bgf--------------------
ProcessResource ::= (components::Component)+ ;
InstantUnitKinds ::= (TAI::ε) | (UT0::ε) | (UT1::ε) | (UTC::ε) | (TT::ε) | (TDB::ε) | (TCG::ε) | (TCB::ε) | (Sideral::ε) | (Local::ε) ;
ECU ::= (contain::ECUGate)+ ;
DiscreteTimeBase ::= Clock ;
 DiscreteTimeBase ::= refEvent::Event ;
NFPRateType ::= value::String unit::RateUnitKinds ;
NFPType ::= NFPInstantType ;
 NFPType ::= NFPurationType ;
 NFPType ::= NFPRateType ;
 NFPType ::= NFPProbabilityType ;
 NFPType ::= NFPSizeType ;
 NFPType ::= valueSpecificationLanguage::String source::SourceKinds (constrainedSpec::NFPValueSpecification)+ ;
SimultaneousEventOccurrence ::= at::Instant occurence::TimedEventOccurence ;
HardwareDeployment ::= owner::Hardware (contain::HardwareEntityInstance)+ ;
DiscreteTimeInterval ::= MetricTimeInterval ;
DurationUnitKinds ::= (ns::ε) | (us::ε) | (ms::ε) | (s::ε) | (min::ε) | (hrs::ε) | (dys::ε) | (wks::ε) | (mos::ε) | (yrs::ε) ;
SourceKinds ::= (est::ε) | (meas::ε) | (req::ε) | (implicit::ε) | (calc::ε) ;
ECUGate ::= owner::ECU kindOf::Channel ;
DesignConcern ::= (relevantQuantity::Quantity)+ annotedModel::AnnotatedModel ;
ProcessingResource ::= (links::Link)+ (components::Component)+ ;
TimeBase ::= SingleTimeBase ;
 TimeBase ::= DiscreteTimeBase ;
 TimeBase ::= MultipleTimeBase ;
EventOccurence ::= TimedEventOccurence ;
NFPConstant ::= NFPListConstant ;
 NFPConstant ::= NFPStringConstant ;
 NFPConstant ::= NFPIntegerConstant ;
 NFPConstant ::= NFPRealConstant ;
 NFPConstant ::= NFPBooleanConstant ;
 NFPConstant ::= ownerList::NFPListConstant ;
SingleInstant ::= coPoint::CoincidencePoint ;
NFPProbabilityType ::= value::String unit::ProbabilityUnitKinds ;
MultipleTimeValue ::= (values::SingleTimeValue)+ ;
TimeInterval ::= SingleTimeInterval ;
 TimeInterval ::= DiscreteTimeInterval ;
NFPExpression ::= (body::String)+ (operand::NFPValueSpecification)+ ;
InstanceSpecification ::= ResourceInstanceSpecification ;
 InstanceSpecification ::= ResourceServiceInstanceSpecification ;
SingleInterval ::= first::SingleInstant last::SingleInstant (members::SingleInstant)+ ;
NFPIntegerConstant ::= body::Integer ;
NFPValueSpecification ::= NFPConstant ;
 NFPValueSpecification ::= NFPVariable ;
 NFPValueSpecification ::= NFPExpression ;
 NFPValueSpecification ::= (constrainedBy::NFPType)+ expression::NFPExpression ;
BasicNFP ::= statisticalQualifier::StatisticalQualifierKinds directon::DirectionKinds typedBy::NFPType (valuedBy::NFPValueSpecification)+ (dimensionOf::ComplexNFP)+ ;
SingleTimeBase ::= currentValue::SingleTimeValue maximumValue::SingleTimeValue currentInstant::SingleInstant ;
TimedEvent ::= (timestamp::MetricTimeValue)+ ;
QuantitativeNFP ::= (sampleSet::Realization)+ (measure::Measure)+ ;
HardwareEntityInstance ::= ECUInstance ;
 HardwareEntityInstance ::= ChannelInstance ;
 HardwareEntityInstance ::= owner::HardwareDeployment ;
DirectionKinds ::= (increasing::ε) | (decreasing::ε) | (undefined::ε) ;
BasicResource ::= ε ;
NFPurationType ::= value::String unit::DurationUnitKinds ;
SingleTimeInterval ::= start::SingleTimeValue end::SingleTimeValue ;
BasicQuantity ::= ε ;
CoincidencePoint ::= (coincidenceInstants::SingleInstant)+ ;
NFPCategory ::= (setOf::NFP)+ (ownes::NFPCategory)+ owner::NFPCategory ;
NFPVariable ::= varName::String ;
NFPBooleanConstant ::= body::Boolean ;
TimedEventOccurence ::= at::Instant timestamp::TimeValue ;
MetricTimeValue ::= ε ;
ModelElement ::= AnnotatedModelElement ;
 ModelElement ::= owner::Model ;
TimedAction ::= Delay ;
 TimedAction ::= (duration::TimeInterval)+ (start::TimeValue)+ (end::TimeValue)+ ;
ECUInstance ::= (composedOf::ECUGateInstance)+ ;
AnnotatedModelElement ::= Classifier ;
 AnnotatedModelElement ::= InstanceSpecification ;
 AnnotatedModelElement ::= (annotation::NFP)+ ;
DerivedQuantity ::= ε ;
ModelingConcern ::= AnalysisConcern ;
 ModelingConcern ::= DesignConcern ;
 ModelingConcern ::= (relevantQuantity::Quantity)+ annotedModel::AnnotatedModel ;
ProbabilityUnitKinds ::= (us::ε) | (s::ε) ;
MetricTimeInterval ::= ε ;
TimeOut ::= ε ;
StructuredResource ::= ProcessingResource ;
 StructuredResource ::= ProcessResource ;
 StructuredResource ::= LogicalResource ;
 StructuredResource ::= ServerResource ;
 StructuredResource ::= basicResource::BasicResource ;
SingleTimeValue ::= (denotedInstant::Instant)+ ref::TimeBase ;
RateUnitKinds ::= (kbs::ε) | (MIPS::ε) ;
SizeUnitKinds ::= (bits::ε) | (bytes::ε) | (Mb::ε) | (MB::ε) ;
NFPRealConstant ::= bodyBeforeComa::Integer bodyAfterComa::Integer ;
NFPListConstant ::= (listElements::NFPConstant)+ ;
ChannelInstance ::= gateInstances::ECUGateInstance ;
NFP ::= QualitativeNFP ;
 NFP ::= QuantitativeNFP ;
 NFP ::= ComplexNFP ;
 NFP ::= measurementQuantity::Quantity (storedBy::NFPLibrary)+ groupedBy::NFPCategory ;
LogicalResource ::= basicResource::BasicResource ;
ECUGateInstance ::= channel::ChannelInstance ;
ClockInterrupt ::= ε ;
MultipleInterval ::= (first::CoincidencePoint)+ (last::CoincidencePoint)+ ;
AnalysisContext ::= (global::ComplexNFP)+ workload::Workload behavior::Behavior (usedResources::Resource)+ ;
HardwareLibrary ::= owner::Hardware ;
NFPSizeType ::= value::String unit::SizeUnitKinds ;
ServerResource ::= (services::Service)+ ;
AnnotatedModel ::= (conformsTo::ModelingConcern)+ (import::NFPLibrary)+ ;
StatisticalQualifierKinds ::= (max::ε) | (min::ε) | (range::ε) | (mean::ε) | (variance::ε) | (standardDeviation::ε) | (percentil::ε) | (frequency::ε) | (moment::ε) | (distribution::ε) | (instantaneous::ε) ;
BasicComponent ::= (process::ProcessResource)+ (interfaces::Interface)+ ;
TimingMechanism ::= Timer ;
 TimingMechanism ::= Clock ;
 TimingMechanism ::= stability::String drift::String skew::String origin::TimedEvent resolution::MetricTimeInterval refClock::Clock state::String ;
MultipleTimeBase ::= (bases::SingleTimeBase)+ ;
QualitativeNFP ::= (parameter::NFP)+ ;
NFPStringConstant ::= body::String ;
StructuredComponent ::= (process::ProcessResource)+ (interfaces::Interface)+ ;
HardwareEntity ::= ECU ;
 HardwareEntity ::= owner::Hardware ;
DiscreteTimeValue ::= MetricTimeValue ;
ComplexNFP ::= (parent::ComplexNFP)+ (child::ComplexNFP)+ (ownes::BasicNFP)+ ;
DiscreteInstant ::= next::DiscreteInstant previous::DiscreteInstant refOcc::EventOccurence ;
AnalysisConcern ::= (relevantQuantity::Quantity)+ annotedModel::AnnotatedModel ;
TimeValue ::= SingleTimeValue ;
 TimeValue ::= MultipleTimeValue ;
 TimeValue ::= DiscreteTimeValue ;
NFPLibrary ::= (refersTo::NFPLibrary)+ (usedNFP::NFP)+ ;
NFPInstantType ::= value::String unit::InstantUnitKinds ;
--------------------metamodels::Program.bgf--------------------
IntegerExp ::= symbol::Integer ;
LiteralExp ::= BooleanExp ;
 LiteralExp ::= IntegerExp ;
VariableDeclaration ::= Parameter ;
 VariableDeclaration ::= type::Type initialValue::Expression structure::Structure ;
ExpressionStat ::= expression::Expression ;
ProcedureCallExp ::= (arguments::Expression)+ ;
OperatorCallExp ::= right::Expression ;
ConditionalStat ::= condition::Expression (thenStats::Statement)+ (elseStats::Statement)+ ;
PropertyCallExp ::= OperatorCallExp ;
 PropertyCallExp ::= AttributeCallExp ;
 PropertyCallExp ::= ProcedureCallExp ;
LocatedElement ::= NamedElement ;
 LocatedElement ::= Expression ;
 LocatedElement ::= Statement ;
WhileStat ::= condition::Expression (doStats::Statement)+ ;
BooleanExp ::= symbol::Boolean ;
AttributeCallExp ::= source::Expression name::String ;
NamedElement ::= Structure ;
 NamedElement ::= VariableDeclaration ;
 NamedElement ::= Type ;
AssignmentStat ::= target::VariableExp value::Expression ;
VariableExp ::= declaration::VariableDeclaration ;
ProcContainerElement ::= Program ;
 ProcContainerElement ::= Monitor ;
--------------------metamodels::Promenade.bgf--------------------
BasPrecedence ::= Strong ;
 BasPrecedence ::= Start ;
 BasPrecedence ::= End ;
 BasPrecedence ::= FeedBack ;
 BasPrecedence ::= (deprecs::DerPrecedence)+ (parbind::ParBinding)+ ;
MetaTaskOccurence ::= (dprecs::DerPrecedence)+ (taskCl::MetaTask)+ ;
ParameterUML ::= ParameterPrec ;
 ParameterUML ::= task::MetaTask (doc::MetaDocument)+ ;
DerPrecedence ::= Weak ;
 DerPrecedence ::= Grouping ;
 DerPrecedence ::= (precs::Precedence)+ (auxTasks::MetaTaskOccurence)+ ;
MetaTask ::= (params::ParameterUML)+ (occurs::MetaTaskOccurence)+ ;
ParameterPrec ::= (parbindsTar::ParBinding)+ (parbindsSour::ParBinding)+ (dstParams::ParameterPrec)+ (orParams::ParameterPrec)+ ;
DependancyUML ::= (suppier::ModelElement)+ (client::ModelElement)+ ;
FeedBack ::= ε ;
ParBinding ::= inclusion::Boolean (precs::Precedence)+ targetPar::ParameterPrec sourcePar::ParameterPrec ;
ModelElement ::= MetaTaskOccurence ;
 ModelElement ::= MetaTask ;
 ModelElement ::= dependencyUMLsupp::DependancyUML dependencyUMLcli::DependancyUML ;
DynPrecedence ::= Strong ;
 DynPrecedence ::= Start ;
 DynPrecedence ::= End ;
 DynPrecedence ::= FeedBack ;
 DynPrecedence ::= Weak ;
 DynPrecedence ::= Grouping ;
 DynPrecedence ::= (deprecs::DerPrecedence)+ (parbind::ParBinding)+ ;
MetaDocument ::= (params::ParameterUML)+ ;
--------------------metamodels::PtolemyII.bgf--------------------
CompositeActor ::= directors::Director ;
ComponentPort ::= po_container::Entity (links::Relation)+ ;
CompositeEntity ::= WorkSpace ;
 CompositeEntity ::= CompositeActor ;
 CompositeEntity ::= (containees::ComponentEntity)+ (relations::ComponentRelation)+ ;
AtomicActor ::= ce_container::CompositeEntity ;
ComponentRelation ::= re_container::CompositeEntity ;
EDataType ::= value::String ;
NamedObject ::= Attribute ;
 NamedObject ::= Entity ;
 NamedObject ::= Port ;
 NamedObject ::= Relation ;
 NamedObject ::= Director ;
 NamedObject ::= name::String ;
WorkSpace ::= (containees::ComponentEntity)+ (relations::ComponentRelation)+ ;
ComponentEntity ::= AtomicActor ;
 ComponentEntity ::= CompositeEntity ;
 ComponentEntity ::= ce_container::CompositeEntity ;
--------------------metamodels::QVT.bgf--------------------
StringLiteralExp ::= stringSymbol::String ;
TypedModel ::= transformation::Transformation (usedPackage::Package)+ (dependsOn::TypedModel)+ ;
TupleLiteralPart ::= TupleLiteralExp::TupleLiteralExp attribute::Property ;
ImportKind ::= (extension::ε) | (access::ε) ;
NullLiteralExp ::= ε ;
CollectionKind ::= (OrderedSet::ε) | (Set::ε) | (Bag::ε) | (Sequence::ε) ;
CollectionItem ::= item::OclExpression ;
CollectorExp ::= target::Variable ;
MappingBody ::= (initSection::OclExpression)+ (endSection::OclExpression)+ ;
BlockExp ::= (body::OclExpression)+ ;
EnumLiteralExp ::= referredEnumLiteral::EnumerationLiteral ;
ImperativeIterateExp ::= target::Variable ;
RelationImplementation ::= relation::Relation impl::Operation inDirectionOf::TypedModel ;
UnpackExp ::= (variable::Variable)+ ;
RealizedVariable ::= initExpression::OclExpression LetExp::LetExp computeOwner::ComputeExp bindParameter::Parameter ;
UnlinkExp ::= target::OclExpression item::OclExpression ;
ContextualProperty ::= context::Class overridden::Property ;
DictLiteralExp ::= (part::DictLiteralPart)+ ;
ObjectTemplateExp ::= (part::PropertyTemplateItem)+ referredClass::Class ;
IterateExp ::= result::Variable ;
TypeExp ::= referredType::Type ;
EnforcementMode ::= (Deletion::ε) | (Creation::ε) ;
CoreDomain ::= isCheckable::Boolean isEnforceable::Boolean rule::Rule typedModel::TypedModel guardPattern::GuardPattern bottomPattern::BottomPattern ;
ModelType ::= (metamodel::Package)+ (additionalCondition::OclExpression)+ conformanceKind::String ;
VarParameter ::= MappingParameter ;
 VarParameter ::= ModelParameter ;
 VarParameter ::= ctxOwner::ImperativeOperation resOwner::ImperativeOperation kind::DirectionKind ;
VariableExp ::= referredVariable::Variable ;
MultiplicityElement ::= Operation ;
 MultiplicityElement ::= Parameter ;
 MultiplicityElement ::= Property ;
ExpressionInOcl ::= bodyExpression::OclExpression context::Variable resultVariable::Variable parameterVariable::Variable ;
OperationalTransformation ::= (intermediateClass::Class)+ refined::Transformation (intermediateProperty::Property)+ (modelParameter::ModelParameter)+ entry::EntryOperation (relation::Relation)+ ;
MappingOperation ::= (disjunct::MappingOperation)+ refinedRelation::Relation (merged::MappingOperation)+ (inherited::MappingOperation)+ (when::OclExpression)+ ;
LogExp ::= text::String level::Integer condition::OclExpression element::Element ;
AssertExp ::= severity::SeverityKind log::LogExp assertion::OclExpression ;
ContinueExp ::= ε ;
UnlimitedNaturalExp ::= symbol::UnlimitedNatural ;
AnonymousTupleType ::= (elementType::Type)+ ;
TupleExp ::= (element::OclExpression)+ ;
AltExp ::= condition::OclExpression body::OclExpression ;
TypedElement ::= OclExpression ;
 TypedElement ::= Variable ;
 TypedElement ::= CollectionLiteralPart ;
 TypedElement ::= TupleLiteralPart ;
 TypedElement ::= Operation ;
 TypedElement ::= Parameter ;
 TypedElement ::= Property ;
CorePattern ::= BottomPattern ;
 CorePattern ::= GuardPattern ;
 CorePattern ::= BottomPattern | GuardPattern ;
ModuleImport ::= (binding::ModelType)+ module::Module importedModule::Module kind::ImportKind ;
MappingCallExp ::= isStrict::Boolean ;
SeverityKind ::= (error::ε) | (fatal::ε) | (warning::ε) ;
CollectionLiteralExp ::= kind::CollectionKind (part::CollectionLiteralPart)+ ;
RealLiteralExp ::= realSymbol::Real ;
ResolveInExp ::= inMapping::MappingOperation ;
WhileExp ::= condition::OclExpression body::OclExpression ;
GuardPattern ::= area::Area ;
FeaturePropertyCall ::= PropertyCallExp ;
 FeaturePropertyCall ::= OperationCallExp ;
AnonymousTupleLiteralExp ::= (part::AnonymousTupleLiteralPart)+ ;
AnonymousTupleLiteralPart ::= (value::OclExpression)+ ;
BottomPattern ::= area::Area (assignment::Assignment)+ (realizedVariable::RealizedVariable)+ (enforcementOperation::EnforcementOperation)+ ;
ImperativeExpression ::= AssignExp ;
 ImperativeExpression ::= BlockExp ;
 ImperativeExpression ::= VariableInitExp ;
 ImperativeExpression ::= WhileExp ;
 ImperativeExpression ::= ComputeExp ;
 ImperativeExpression ::= AltExp ;
 ImperativeExpression ::= UnlinkExp ;
 ImperativeExpression ::= ReturnExp ;
 ImperativeExpression ::= BreakExp ;
 ImperativeExpression ::= TryExp ;
 ImperativeExpression ::= RaiseExp ;
 ImperativeExpression ::= ContinueExp ;
 ImperativeExpression ::= TupleExp ;
 ImperativeExpression ::= InstantiationExp ;
 ImperativeExpression ::= LogExp ;
 ImperativeExpression ::= AssertExp ;
 ImperativeExpression ::= UnpackExp ;
 ImperativeExpression ::= SwitchExp ;
 ImperativeExpression ::= ImperativeLoopExp ;
BagType ::= elementType::Type ;
PropertyTemplateItem ::= objContainer::ObjectTemplateExp value::OclExpression referredProperty::Property ;
CallExp ::= ResolveExp ;
 CallExp ::= FeaturePropertyCall ;
 CallExp ::= SwitchExp ;
 CallExp ::= LoopExp ;
ObjectExp ::= referredObject::Variable body::ConstructorBody ;
BreakExp ::= ε ;
SequenceType ::= elementType::Type ;
NumericLiteralExp ::= UnlimitedNaturalExp ;
 NumericLiteralExp ::= IntegerLiteralExp ;
 NumericLiteralExp ::= RealLiteralExp ;
ImperativeOperation ::= Helper ;
 ImperativeOperation ::= Constructor ;
 ImperativeOperation ::= EntryOperation ;
 ImperativeOperation ::= MappingOperation ;
 ImperativeOperation ::= context::VarParameter (result::VarParameter)+ overridden::ImperativeOperation body::OperationBody isBlackbox::Boolean ;
OpaqueExpression ::= ExpressionInOcl ;
LoopExp ::= IteratorExp ;
 LoopExp ::= IterateExp ;
 LoopExp ::= ImperativeLoopExp ;
TupleLiteralExp ::= (part::TupleLiteralPart)+ ;
EntryOperation ::= context::VarParameter (result::VarParameter)+ overridden::ImperativeOperation body::OperationBody isBlackbox::Boolean ;
ForExp ::= condition::OclExpression ;
ImperativeCallExp ::= MappingCallExp ;
 ImperativeCallExp ::= isVirtual::Boolean ;
InvalidType ::= package::Package ;
ResolveExp ::= ResolveInExp ;
 ResolveExp ::= condition::OclExpression one::Boolean isInverse::Boolean isDeferred::Boolean ;
RaiseExp ::= exception::Type ;
VariableInitExp ::= referredVariable::Variable withResult::Boolean ;
OclExpression ::= ImperativeExpression ;
 OclExpression ::= CallExp ;
 OclExpression ::= IfExp ;
 OclExpression ::= LetExp ;
 OclExpression ::= VariableExp ;
 OclExpression ::= TypeExp ;
 OclExpression ::= LiteralExp ;
 OclExpression ::= LoopExp ;
RelationalTransformation ::= (ownedKey::Key)+ ;
InstantiationExp ::= ObjectExp ;
 InstantiationExp ::= instantiatedClass::Class extent::Variable (argument::OclExpression)+ ;
OrderedSetType ::= elementType::Type ;
IteratorExp ::= body::OclExpression (iterator::Variable)+ ;
ImperativeLoopExp ::= ImperativeIterateExp ;
 ImperativeLoopExp ::= ForExp ;
 ImperativeLoopExp ::= CollectorExp ;
ReturnExp ::= value::OclExpression ;
IntegerLiteralExp ::= integerSymbol::Integer ;
PropertyCallExp ::= referredProperty::Property ;
SwitchExp ::= (alternativePart::AltExp)+ elsePart::OclExpression ;
EnforcementOperation ::= enforcementMode::EnforcementMode bottomPattern::BottomPattern operationCallExp::OperationCallExp ;
AnyType ::= (ownedAttribute::Property)+ (ownedOperation::Operation)+ (superClass::Class)+ isAbstract::Boolean package::Package ;
InvalidLiteralExp ::= ε ;
CollectionTemplateExp ::= (part::OclExpression)+ kind::CollectionKind referredCollectionType::CollectionType match::OclExpression ;
CollectionLiteralPart ::= CollectionItem ;
 CollectionLiteralPart ::= CollectionRange ;
DataType ::= Enumeration ;
 DataType ::= PrimitiveType ;
 DataType ::= CollectionType ;
 DataType ::= TupleType ;
NamedElement ::= Package ;
 NamedElement ::= Type ;
 NamedElement ::= EnumerationLiteral ;
 NamedElement ::= TypedElement ;
 NamedElement ::= Domain ;
 NamedElement ::= TypedModel ;
 NamedElement ::= Rule ;
TemplateExp ::= ObjectTemplateExp ;
 TemplateExp ::= CollectionTemplateExp ;
LetExp ::= (in::OclExpression)+ variable::Variable ;
PrimitiveType ::= ε ;
IfExp ::= condition::OclExpression thenExpression::OclExpression elseExpression::OclExpression ;
ModelParameter ::= ctxOwner::ImperativeOperation resOwner::ImperativeOperation kind::DirectionKind ;
CollectionRange ::= first::OclExpression last::OclExpression ;
SetType ::= elementType::Type ;
ConstructorBody ::= operation::ImperativeOperation (content::OclExpression)+ ;
MappingParameter ::= refinedDomain::RelationDomain extent::ModelParameter ;
CollectionType ::= DictionaryType ;
 CollectionType ::= ListType ;
 CollectionType ::= BagType ;
 CollectionType ::= OrderedSetType ;
 CollectionType ::= SequenceType ;
 CollectionType ::= SetType ;
OperationCallExp ::= ImperativeCallExp ;
 OperationCallExp ::= (argument::OclExpression)+ referredOperation::Operation ;
ListType ::= elementType::Type ;
BooleanLiteralExp ::= booleanSymbol::Boolean ;
URIExtent ::= ModelType ;
 URIExtent ::= ε ;
PrimitiveLiteralExp ::= BooleanLiteralExp ;
 PrimitiveLiteralExp ::= StringLiteralExp ;
 PrimitiveLiteralExp ::= NumericLiteralExp ;
DirectionKind ::= (in::ε) | (inout::ε) | (out::ε) ;
FunctionParameter ::= operation::Operation initExpression::OclExpression LetExp::LetExp computeOwner::ComputeExp bindParameter::Parameter ;
DictionaryType ::= keyType::Type ;
VoidType ::= package::Package ;
LiteralExp ::= TemplateExp ;
 LiteralExp ::= DictLiteralExp ;
 LiteralExp ::= AnonymousTupleLiteralExp ;
 LiteralExp ::= PrimitiveLiteralExp ;
 LiteralExp ::= CollectionLiteralExp ;
 LiteralExp ::= TupleLiteralExp ;
 LiteralExp ::= NullLiteralExp ;
 LiteralExp ::= InvalidLiteralExp ;
 LiteralExp ::= EnumLiteralExp ;
AssignExp ::= (value::OclExpression)+ left::OclExpression defaultValue::OclExpression isReset::Boolean ;
DomainPattern ::= templateExpression::TemplateExp ;
DictLiteralPart ::= key::OclExpression value::OclExpression ;
OperationBody ::= MappingBody ;
 OperationBody ::= ConstructorBody ;
 OperationBody ::= operation::ImperativeOperation (content::OclExpression)+ ;
TemplateParameterType ::= specification::String ;
EnumerationLiteral ::= enumeration::Enumeration ;
ComputeExp ::= returnedElement::Variable body::OclExpression ;
TupleType ::= (ownedAttribute::Property)+ (ownedOperation::Operation)+ (superClass::Class)+ isAbstract::Boolean ;
TryExp ::= tryBody::OclExpression (exception::Type)+ exceptBody::OclExpression ;
RelationDomain ::= pattern::DomainPattern rootVariable::Variable ;
--------------------metamodels::QVT_SimpleRDBMS.bgf--------------------
ForeignKey ::= (column::Column)+ owner::Table refersTo::Key ;
RModelElement ::= Schema ;
 RModelElement ::= Table ;
 RModelElement ::= Column ;
 RModelElement ::= Key ;
 RModelElement ::= ForeignKey ;
--------------------metamodels::QoS.bgf--------------------
ProfileTransition ::= (operations::Operation)+ from::SimpleProfile to::SimpleProfile compoundProfile::CompoundProfile ;
CompoundProfile ::= (profileTransition::ProfileTransition)+ (simpleProfile::SimpleProfile)+ ;
QoSStatement ::= SingleQoSStatement ;
 QoSStatement ::= CoumpoundQoSStatement ;
 QoSStatement ::= (contraints::QoSContraints)+ relation::CoumpoundQoSStatement (parameter::Parameter)+ ;
QoSContraints ::= invariant::BooleanExpression parallel_and_composition::MappingExpression parallel_or_composition::MappingExpression sequential_composition::MappingExpression values::MappingExpression (statisticalAttribute::StatisticalAttributekindKind)+ parameter::Parameter domain::Domain ;
QoSContraint ::= qualification::QualificationKind ;
SimpleProfile ::= compoundProfile::CompoundProfile use::QoSStatement provides::QoSStatement ;
QoSProfile ::= CompoundProfile ;
 QoSProfile ::= SimpleProfile ;
DirectionKind ::= value::String ;
StringSet ::= (string::String)+ ;
QoSCharacteristic ::= QoSContraints ;
 QoSCharacteristic ::= QualificationKind ;
 QoSCharacteristic ::= invariant::BooleanExpression parallel_and_composition::MappingExpression parallel_or_composition::MappingExpression sequential_composition::MappingExpression values::MappingExpression (statisticalAttribute::StatisticalAttributekindKind)+ parameter::Parameter domain::Domain ;
StatisticalAttributekindKind ::= ε ;
QoSComponent ::= (profile::QoSProfile)+ operations::Operation ;
MappingExpression ::= value::String ;
DataType ::= Domain ;
QualificationKind ::= value::String ;
CoumpoundQoSStatement ::= statement::QoSStatement ;
SingleQoSStatement ::= contraint::QoSContraint ;
BooleanExpression ::= value::String ;
--------------------metamodels::QoS_Characteristic.bgf--------------------
StatisticalAttributekindKind ::= ε ;
MappingExpression ::= value::String ;
DataType ::= Domain ;
 DataType ::= Domain ;
DirectionKind ::= value::String ;
StringSet ::= (string::String)+ ;
BooleanExpression ::= value::String ;
QoSCharacteristic ::= invariant::BooleanExpression parallel_and_composition::MappingExpression parallel_or_composition::MappingExpression sequential_composition::MappingExpression values::MappingExpression (statisticalAttribute::StatisticalAttributekindKind)+ parameter::Parameter domain::Domain ;
--------------------metamodels::RDFS.bgf--------------------
URIReference ::= UniformResourceIdentifier ;
 URIReference ::= uri::UniformResourceIdentifier resource::Resource literal::TypedLiteral namedGraph::Graph (reifiedStatement::Statement)+ ;
RDFXMLLiteral ::= datatypeURI::URIReference ;
ContainerMembershipProperty ::= ε ;
UniformResourceIdentifier ::= name::String (uriRef::URIReference)+ ;
BlankNode ::= nodeId::String ;
TypedLiteral ::= RDFXMLLiteral ;
 TypedLiteral ::= datatypeURI::URIReference ;
PlainLiteral ::= language::String labeledResource::Resource ;
URIReferenceNode ::= graph::Graph (uriRef::URIReference)+ (subjectStatement::Statement)+ (objectStatement::Statement)+ (label::PlainLiteral)+ (type::Class)+ (seeAlso::Resource)+ (referringResource::Resource)+ (member::Resource)+ (container::Resource)+ (list::List)+ ;
--------------------metamodels::QoS_Profile.bgf--------------------
ProfileTransition ::= (operations::Operation)+ from::SimpleProfile to::SimpleProfile compoundProfile::CompoundProfile ;
CompoundProfile ::= (profileTransition::ProfileTransition)+ (simpleProfile::SimpleProfile)+ ;
QoSStatement ::= ε ;
QoSComponent ::= operations::Operation (profile::QoSProfile)+ ;
SimpleProfile ::= compoundProfile::CompoundProfile uses::QoSStatement provides::QoSStatement ;
QoSProfile ::= CompoundProfile ;
 QoSProfile ::= SimpleProfile ;
--------------------metamodels::QoS_Statement.bgf--------------------
QoSStatement ::= SingleQoSStatement ;
 QoSStatement ::= CoumpoundQoSStatement ;
 QoSStatement ::= relation::CoumpoundQoSStatement (parameter::Parameter)+ ;
QoSContraint ::= qualification::QualificationKind ;
QualificationKind ::= value::String ;
CoumpoundQoSStatement ::= statement::QoSStatement ;
SingleQoSStatement ::= contraint::QoSContraint ;
QoSCharacteristic ::= QualificationKind ;
--------------------metamodels::RelationalDBContent.bgf--------------------
DataBase ::= SGBDname::String (tables::Table)+ ;
TupleElement ::= tuple::Tuple value::String ;
NamedElement ::= DataBase ;
 NamedElement ::= Table ;
--------------------metamodels::RelationalDBSchema.bgf--------------------
DataBase ::= SGBDname::String (tables::Table)+ ;
NamedElement ::= DataBase ;
 NamedElement ::= Table ;
 NamedElement ::= Column ;
--------------------metamodels::Reqtify.bgf--------------------
TextElement ::= Section ;
 TextElement ::= AbstractRequirement ;
MacroRequirement ::= (contains::AbstractRequirement)+ ;
ElementWithIL ::= Document ;
 ElementWithIL ::= TextElement ;
TypedElement ::= ElementWithIL ;
 TypedElement ::= CoverLink ;
 TypedElement ::= Attribute ;
CoverLink ::= linkWith::AbstractRequirement ;
AbstractRequirement ::= Requirement ;
 AbstractRequirement ::= MacroRequirement ;
--------------------metamodels::RequisitePro.bgf--------------------
ContainerElt ::= Project ;
 ContainerElt ::= Package ;
NamedElt ::= ContainerElt ;
 NamedElt ::= Requirement ;
DescribedElt ::= Document ;
 DescribedElt ::= ContainerElt ;
TypedElt ::= Attribute ;
--------------------metamodels::SBVRvoc.bgf--------------------
EndOperator ::= (given::ε) | (thanone::ε) | (one::ε) | (isobligatorythat::ε) | (ispermittedthat::ε) | (isprohibitedthat::ε) | (isnecessarythat::ε) | (ispossiblethat::ε) | (isimpossiblethat::ε) | (isnotthecasethat::ε) | (least::ε) | (leastone::ε) | (most::ε) | (mostone::ε) | (leastnandatmostm::ε) | (andonlyif::ε) | (ornot::ε) | (not::ε) | (of::ε) ;
NSURICaption ::= namespaceURI::NameSpaceURI ;
CTypCaption ::= (conceptType::PrimaryRepresentation)+ ;
NameConcept ::= the::Qualif (name::NameWord)+ ;
ConceptDefinition ::= exp::Concept (conjexp::ConjConcept)+ ;
TermRepresentation ::= (term::StringWord)+ ;
StringConcept ::= (stringWord::QuotedStringWord)+ ;
FactTypeFormRepresentation ::= primaryRep1::NotFactTypeRepresentation (verbExp::Verb)+ primaryRep2::NotFactTypeRepresentation ;
DescCaption ::= description::Note ;
NoteCaption ::= note::Note ;
SeeCaption ::= see::PrimaryRepresentation ;
ModalForm ::= modal::ModalVerb isNeg::Boolean ;
SubSBVRProp ::= join::Join modalVerb::ModalVerb (verbs::Verb)+ concept2::Concept ;
LocatedElement ::= Root ;
 LocatedElement ::= VocabularyEntry ;
 LocatedElement ::= Caption ;
 LocatedElement ::= PrimaryRepresentation ;
 LocatedElement ::= ConceptDefinition ;
 LocatedElement ::= ConceptSource ;
 LocatedElement ::= Note ;
 LocatedElement ::= Sentence ;
 LocatedElement ::= NameSpaceURI ;
 LocatedElement ::= Word ;
 LocatedElement ::= SBVRExpression ;
 LocatedElement ::= SBVRPropWithKW ;
 LocatedElement ::= ModalForm ;
 LocatedElement ::= SimpleSBVRProp ;
 LocatedElement ::= SubSBVRProp ;
 LocatedElement ::= LinkSBVRConcept ;
 LocatedElement ::= ConjConcept ;
 LocatedElement ::= Concept ;
 LocatedElement ::= NounConcept ;
 LocatedElement ::= Qualification ;
 LocatedElement ::= GeneralConcept ;
 LocatedElement ::= Qualifier ;
 LocatedElement ::= ModalBegin ;
SynFCaption ::= (synonymousForm::SBVRExpression)+ ;
ModalBeginC ::= endOperator::EndOperator ;
QuotedStringWord ::= val::String ;
SimpleSBVRProp ::= modal::ModalBegin concept1::Concept modalVerb::ModalForm (verbs::Verb)+ concept2::Concept ;
SBVRPropWithKW ::= conjonction::ConjonctionnalKeyWord endConj::EndOperator proposition::SimpleSBVRProp ;
ConjonctionnalKeyWord ::= (and::ε) | (or::ε) | (if::ε) | (whether::ε) ;
SynCaption ::= (synonym::PrimaryRepresentation)+ ;
ModalBegin ::= ModalBeginC ;
 ModalBegin ::= endOperator::EndOperator ;
NounGConcept ::= (noun::StringWord)+ ;
StringWord ::= val::String ;
NameRepresentation ::= hasThe::Boolean (name::NameWord)+ ;
NameWord ::= val::String ;
SFCaption ::= subjectField::PrimaryRepresentation ;
ExCaption ::= (example::SBVRExpression)+ ;
GenCCaption ::= generalConcept::PrimaryRepresentation ;
NameSpaceURI ::= (URI::Word)+ ;
PrimaryRepresentation ::= NotFactTypeRepresentation ;
 PrimaryRepresentation ::= FactTypeFormRepresentation ;
NounConcept ::= qualif::Qualifier (noun::StringWord)+ ;
NameGConcept ::= name::NameConcept ;
ModalVerb ::= (must::ε) | (may::ε) | (never::ε) | (always::ε) ;
VocabularyEntry ::= primaryRep::PrimaryRepresentation (caption::Caption)+ ;
ObjectConcept ::= operatoredConcept::NounConcept qualify::Qualification ;
DBCaption ::= dictionaryBasis::ConceptSource ;
NotFactTypeRepresentation ::= TermRepresentation ;
 NotFactTypeRepresentation ::= NameRepresentation ;
RefSCaption ::= referenceScheme::PrimaryRepresentation ;
LinkSBVRConcept ::= link::Link concept::Concept ;
SBVRExpression ::= hasPoint::Boolean firstProposition::SimpleSBVRProp (nextProposition::SBVRPropWithKW)+ ;
ConceptSource ::= (source::Word)+ ;
SrcCaption ::= source::ConceptSource ;
DefCaption ::= definition::ConceptDefinition ;
GeneralConcept ::= NameGConcept ;
 GeneralConcept ::= NounGConcept ;
ConjConcept ::= conjonction::ConjonctionnalKeyWord concept::Concept ;
--------------------metamodels::SCADE.bgf--------------------
MtcEntity ::= Element ;
 MtcEntity ::= File ;
 MtcEntity ::= HistoryEntry ;
 MtcEntity ::= Criterion ;
 MtcEntity ::= Instance ;
 MtcEntity ::= Result ;
 MtcEntity ::= Record ;
 MtcEntity ::= Model ;
 MtcEntity ::= Operator ;
StorageUnit ::= saoFileName::String annFileName::String persistAs::String loaded::Boolean saoModified::Boolean annModified::Boolean fileRef::FileRef modelS::Model (element::StorageElement)+ ;
AnnAttCharValue ::= value::Char ;
AnnPropertyReal ::= value::Double ;
NamedType ::= kind::Object (refinement::NamedType)+ (refined::NamedType)+ to::Operator from::Operator implementation::Implementation definition::Type keyM::Model key::TypeBlock ;
RSize ::= ε ;
ListString ::= value::String ;
ConstValue ::= value::String kind::Object ;
ParamArray ::= (notes::ListString)+ paramBlock::ParamBlock operator::Operator (value::Expression)+ ;
AnnPropertyString ::= value::String ;
AnnAttBoolValue ::= value::Boolean ;
OperatorReference ::= ε ;
LocalVariable ::= optional::Boolean const::Boolean probe::Boolean pure::Boolean initValue::String operatorI::Operator operatorO::Operator operatorH::Operator nodeL::Node nodeI::Node ;
ConstVar ::= Constant ;
 ConstVar ::= Variable ;
 ConstVar ::= kind::Object type::Type (client::EqBlock)+ ;
StateBase ::= DefineIn::String ;
StOutput ::= name::String type::String clock::Boolean const::Boolean optional::Boolean ;
AnnCategory ::= name::String key::AnnotSchema (anootability::Annotability)+ ;
GlobalVariable ::= key::VarBlock ;
HistoryEntry ::= file::File ;
RPoint ::= ε ;
AnnPropertyInt ::= value::Integer ;
AnnPropertyEnum ::= value::Object ;
FileRef ::= pathname::String persistAs::String DefinedIn::String ;
AnnNote ::= name::String modified::Boolean annNoteType::AnnNoteType annotable::Annotable (annAttValue::AnnAttValue)+ ;
TypeBlock ::= type::NamedType key::Model ;
ExprContact ::= boolAct::ExprId (initValue::Expression)+ calledOpr::ExprCall ;
StInput ::= name::String type::String clock::Boolean const::Boolean optional::Boolean ;
StateObj ::= GraphicalObject ;
VarBlock ::= variable::GlobalVariable keyVB::Model key::Model ;
AnnPropertyBool ::= value::Boolean ;
AnnAttGroup ::= name::String key::AnnNoteType ;
ExprNull ::= label::Label exprContactE::ExprContact exprCallE::ExprCall dependance::ConstVar (subExprId::ExprId)+ paramArray::ParamArray constant::Constant equationE::Equation assertionE::Assertion ;
AnnProperty ::= AnnPropertyInt ;
 AnnProperty ::= AnnPropertyBool ;
 AnnProperty ::= AnnPropertyChar ;
 AnnProperty ::= AnnPropertyReal ;
 AnnProperty ::= AnnPropertyString ;
 AnnProperty ::= AnnPropertyEnum ;
 AnnProperty ::= name::String type::Integer key::AnnAttDefinition ;
MtcApplication ::= (coverageFileCov::CoverageFile)+ (criterionFileCri::CriterionFile)+ modelM::Model ;
AnnAttRealValue ::= value::Double ;
AnnAttValue ::= AnnAttIntValue ;
 AnnAttValue ::= AnnAttBoolValue ;
 AnnAttValue ::= AnnAttCharValue ;
 AnnAttValue ::= AnnAttRealValue ;
 AnnAttValue ::= AnnAttStringValue ;
AnnAttEnumValue ::= value::String ;
AnnNoteType ::= name::String annAttDefinition::AnnAttDefinition annAttGroup::AnnAttGroup key::AnnotSchema ;
AnnPropertyChar ::= value::Char ;
StInputOutput ::= StInitInput ;
 StInputOutput ::= StInput ;
 StInputOutput ::= StOutput ;
AnnotSchema ::= pathname::String annNoteType::AnnNoteType annCategory::AnnCategory ;
CoverageFile ::= record::Record modelCov::Model application::MtcApplication recordCov::Record ;
AnnAttDateValue ::= value::String ;
EqBlock ::= (equation::Equation)+ assertion::Assertion key::Node (calledOperator::Operator)+ (referencedId::ConstVar)+ ;
StorageElement ::= Block ;
 StorageElement ::= Operator ;
AnnAttStringValue ::= AnnAttFileValue ;
 AnnAttStringValue ::= AnnAttDateValue ;
 AnnAttStringValue ::= AnnAttOidValue ;
 AnnAttStringValue ::= AnnAttEnumValue ;
 AnnAttStringValue ::= value::String ;
ParamBlock ::= key::Node (columnsSize::ListInteger)+ (array::ParamArray)+ ;
ListInteger ::= value::Integer ;
CriterionFile ::= application::MtcApplication modelCri::Model (criterionC::Criterion)+ ;
StInitInput ::= name::String type::String clock::Boolean const::Boolean optional::Boolean ;
AssociationClass ::= resultA::Result (recordA::Record)+ (instanceA::Instance)+ ;
StateMachine ::= initialStPtr::InitialStPtr (state::State)+ (transition::Transition)+ ;
AnnAttFileValue ::= value::String ;
CompositeElement ::= typeC::Type key::Composite ;
ExprCall ::= numOcc::Integer predefOpr::Integer (parameter::Expression)+ exprContactEC::ExprContact operator::Operator ;
AnnAttDefinition ::= name::String type::Integer annAttGroup::AnnAttGroup key::AnnNoteType annProperty::AnnProperty ;
GraphicalObject ::= StInputOutput ;
 GraphicalObject ::= Transition ;
 GraphicalObject ::= State ;
 GraphicalObject ::= InitialStPtr ;
TypeReference ::= ε ;
ExprId ::= exprContactEI::ExprContact reference::ConstVar ;
VariableReference ::= ε ;
NodeBlock ::= ParamBlock ;
 NodeBlock ::= EqBlock ;
 NodeBlock ::= node::Node ;
ConstBlock ::= modelC::Model keyC::Model key::Model constant::Constant ;
InitialStPtr ::= cx::Double cy::Double state::State ;
AnnAttOidValue ::= value::String ;
ModelBlock ::= ConstBlock ;
 ModelBlock ::= VarBlock ;
 ModelBlock ::= TypeBlock ;
AnnAttIntValue ::= value::Integer ;
--------------------metamodels::SDM.bgf--------------------
SimpleName ::= value::String ;
CDObjectConstraint ::= constraintDefinition::ConstraintDefinition ;
OBEndpointDefinition ::= objectDefinition::ObjectDefinition ;
SettingsAttributes ::= list::Boolean access::SettingMemberAccess secure::SettingMemberSecure deploymentTime::Boolean required::Boolean canBeNull::Boolean elementsCanBeNull::Boolean defaultRead::String defaultWrite::String ;
RDDelegation ::= relationshipDefinition::RelationshipDefinition ;
ConstraintMember ::= OBConstraint ;
 ConstraintMember ::= RDConstraint ;
 ConstraintMember ::= OCConstraint ;
 ConstraintMember ::= RCConstraint ;
 ConstraintMember ::= CGConstraint ;
 ConstraintMember ::= CDConstraint ;
 ConstraintMember ::= (input::Input)+ raiseError::Boolean evaluate::ConstraintEvaluation ;
DescriptionEntry ::= Entry ;
 DescriptionEntry ::= name::String resourceId::String manager::QualifiedName substitute::Substitute ;
CDRelationshipConstraint ::= constraintDefinition::ConstraintDefinition ;
OBCommunicationDefinition ::= objectDefinition::ObjectDefinition ;
SettingPath ::= value::String ;
ImportNamespaceIdentity ::= import::Import ;
SDMManager ::= sdm::SystemDefinitionModel ;
PublicKeyType ::= value::String ;
CommunicationMember ::= OBConnection ;
 CommunicationMember ::= RDConnection ;
 CommunicationMember ::= clientMember::Path serverMember::Path ;
SettingMemberAccess ::= (ReadWrite::ε) | (ReadOnly::ε) | (WriteOnly::ε) ;
RCConstraint ::= relationshipConstraint::RelationshipConstraint ;
MembSettingValue ::= member::Member ;
MaxOccurs ::= value::String ;
SettingMember ::= DefSettingDeclaration ;
 SettingMember ::= (facet::Facet)+ settingAttributes::SettingsAttributes ;
SDMContainmentDefinition ::= sdm::SystemDefinitionModel ;
ResourceMember ::= OBResource ;
EndpointDefinition ::= SDMEndpointDefinition ;
 EndpointDefinition ::= OBEndpointDefinition ;
 EndpointDefinition ::= SDMEndpointDefinition | OBEndpointDefinition ;
OBRelationshipConstraint ::= objectDefinition::ObjectDefinition ;
OBHosting ::= objectDefinition::ObjectDefinition ;
CGConstraint ::= constraintGroup::ConstraintGroup ;
SettingValueList ::= MembSettingValueList ;
 SettingValueList ::= DefSettingValueList ;
 SettingValueList ::= (value::Value)+ settingValueAttributes::SettingValueAttributes ;
OBContainment ::= objectDefinition::ObjectDefinition ;
ReferenceDefinition ::= SDMReferenceDefinition ;
 ReferenceDefinition ::= OBReferenceDefinition ;
 ReferenceDefinition ::= dependentDefinition::QualifiedName sourceDefinition::QualifiedName ;
PublicKeyTokenType ::= value::String ;
ValueTransfer ::= Output ;
 ValueTransfer ::= Input ;
 ValueTransfer ::= name::SimpleName path::SettingPath cast::Boolean convert::Boolean ;
OBSubsystem ::= objectDefinition::ObjectDefinition ;
RolesList ::= (Host::ε) | (Guest::ε) | (Parent::ε) | (Member::ε) | (Source::ε) | (Dependent::ε) | (Proxy::ε) | (Delegate::ε) | (Client::ε) | (Server::ε) ;
OBDelegation ::= objectDefinition::ObjectDefinition ;
CultureNeutral ::= value::String ;
MinOccurs ::= value::String ;
ObjectMember ::= SystemMember ;
 ObjectMember ::= EndpointMember ;
 ObjectMember ::= ResourceMember ;
 ObjectMember ::= minOccurs::MinOccurs maxOccurs::MaxOccurs reference::Boolean proxy::Boolean ;
SettingValueAttributes ::= path::SettingPath null::Boolean fixed::Boolean unset::Boolean definition::QualifiedName convert::Boolean secure::Boolean reference::Boolean ;
SDMDelegationDefinition ::= sdm::SystemDefinitionModel ;
RelationshipConstraint ::= OBRelationshipConstraint ;
 RelationshipConstraint ::= OCRelationshipConstraint ;
 RelationshipConstraint ::= RCRelationshipConstraint ;
 RelationshipConstraint ::= CGRelationshipConstraint ;
 RelationshipConstraint ::= CDRelationshipConstraint ;
 RelationshipConstraint ::= (constraint::RCConstraint)+ (relationshipConstraint::RCRelationshipConstraint)+ (objectConstraint::RCObjectConstraint)+ (constraintGroup::RCConstraintGroup)+ relationshipDefinition::QualifiedName targetRole::RolesList targetObjectDefinition::QualifiedName minOccurs::MinOccurs maxOccurs::MaxOccurs delegationAware::Boolean ;
OBSystemDefinition ::= objectDefinition::ObjectDefinition ;
HostingMember ::= OBHosting ;
 HostingMember ::= RDHosting ;
 HostingMember ::= guestMember::Path hostMember::Path ;
OCConstraint ::= objectConstraint::ObjectConstraint ;
DefSettingDeclaration ::= definition_DSD::Definition ;
OBConstraintGroup ::= objectDefinition::ObjectDefinition ;
RDObjectConstraint ::= relationshipDefinition::RelationshipDefinition ;
RCObjectConstraint ::= relationshipConstraint_RC::RelationshipConstraint ;
ContainmentMember ::= OBContainment ;
 ContainmentMember ::= RDContainment ;
 ContainmentMember ::= childMember::Path ;
SDMConstraintDefinition ::= sdm::SystemDefinitionModel ;
RelationshipDefinition ::= CommunicationDefinition ;
 RelationshipDefinition ::= HostingDefinition ;
 RelationshipDefinition ::= ContainmentDefinition ;
 RelationshipDefinition ::= DelegationDefinition ;
 RelationshipDefinition ::= ReferenceDefinition ;
 RelationshipDefinition ::= (objectConstraint::RDObjectConstraint)+ (constraint::RDConstraint)+ (constraintGroup::RDConstraintGroup)+ (flow::RDFlow)+ (connection::RDConnection)+ (hosting::RDHosting)+ (delegation::RDDelegation)+ (reference::RDReference)+ (containment::RDContainment)+ extends::QualifiedName abstract::Boolean ;
SystemMember ::= OBSubsystem ;
SystemDefinitionModel ::= information::Information (import::Import)+ designData::DesignData settingDefinitions::SettingDefinitions (communicationDefinition::SDMCommunicationDefinition)+ (containmentDefinition::SDMContainmentDefinition)+ (delegationDefinition::SDMDelegationDefinition)+ (referenceDefinition::SDMReferenceDefinition)+ (endpointDefinition::SDMEndpointDefinition)+ (resourceDefinition::SDMResourceDefinition)+ (systemDefinition::SDMSystemDefinition)+ (constraintDefinition::SDMConstraintDefinition)+ (manager::SDMManager)+ nameSpace::NameSpace namespaceIdentity::NamespaceIdentity (documentLanguage::Culture)+ (compilationHash::CompilationHashType)+ ;
RCRelationshipConstraint ::= relationshipConstraint_RC::RelationshipConstraint ;
DefSettingValueList ::= definition::Definition ;
SDMReferenceDefinition ::= sdm::SystemDefinitionModel ;
FlowDefinition ::= description::Description designData::DesignData (settingDeclaration::DefSettingDeclaration)+ (settingValue::DefSettingValue)+ (settingValueList::DefSettingValueList)+ name::SimpleName manager::QualifiedName className::String ;
SDMResourceDefinition ::= sdm::SystemDefinitionModel ;
DelegationDefinition ::= SDMDelegationDefinition ;
 DelegationDefinition ::= OBDelegationDefinition ;
 DelegationDefinition ::= proxyDefinition::QualifiedName delegateDefinition::QualifiedName ;
StructuralConstraint ::= ObjectConstraint ;
 StructuralConstraint ::= RelationshipConstraint ;
 StructuralConstraint ::= ConstraintGroup ;
 StructuralConstraint ::= description::Description designData::DesignData name::SimpleName evaluate::ConstraintEvaluation raiseError::Boolean returnEarly::Boolean ;
CGRelationshipConstraint ::= constraintGroup_CG::ConstraintGroup ;
RDReference ::= relationshipDefinition::RelationshipDefinition ;
OBReference ::= objectDefinition::ObjectDefinition ;
OBResourceDefinition ::= objectDefinition::ObjectDefinition ;
RCConstraintGroup ::= relationshipConstraint_RC::RelationshipConstraint ;
SettingDefinitions ::= nameSpace::NameSpace manager::QualifiedName clrNameSpace::String ;
ConstraintDefinition ::= SDMConstraintDefinition ;
 ConstraintDefinition ::= (relationshipConstraint::CDRelationshipConstraint)+ (constraintGroup::CDConstraintGroup)+ (objectConstraint::CDObjectConstraint)+ (constraint::CDConstraint)+ targetDefinition::QualifiedName returnEarly::Boolean ;
RDConnection ::= relationshipDefinition::RelationshipDefinition ;
EndpointMember ::= OBEndpoint ;
RDConstraint ::= relationshipDefinition::RelationshipDefinition ;
ProcessorArchitectures ::= (x86::ε) | (ia64::ε) | (amd64::ε) | (wow64::ε) | (msil::ε) | (shx::ε) | (arm::ε) | (data::ε) ;
OCConstraintGroup ::= objectConstraint_OC::ObjectConstraint ;
ManagerDeclaration ::= SDMManager ;
 ManagerDeclaration ::= description::Description name::SimpleName assemblyName::String version::FourPartVersionType publicKeyToken::PublicKeyTokenType culture::CultureNeutral platform::Platform sourcePath::Path ;
MembSettingValueList ::= member::Member ;
CompilationHashType ::= value::String ;
OBReferenceDefinition ::= objectDefinition::ObjectDefinition ;
OCRelationshipConstraint ::= objectConstraint_OC::ObjectConstraint ;
CommunicationDefinition ::= SDMCommunicationDefinition ;
 CommunicationDefinition ::= OBCommunicationDefinition ;
 CommunicationDefinition ::= clientDefinition::QualifiedName serverDefinition::QualifiedName ;
RDHosting ::= relationshipDefinition::RelationshipDefinition ;
DesignData ::= (nameSpace::NameSpace)+ ;
QualifiedName ::= value::String ;
ReferenceMember ::= OBReference ;
 ReferenceMember ::= RDReference ;
 ReferenceMember ::= dependentMember::Path sourceMember::Path ;
SettingValue ::= MembSettingValue ;
 SettingValue ::= DefSettingValue ;
 SettingValue ::= (contents::String)+ settingValueAttributes::SettingValueAttributes ;
ResourceDefinition ::= SDMResourceDefinition ;
 ResourceDefinition ::= OBResourceDefinition ;
 ResourceDefinition ::= SDMResourceDefinition | OBResourceDefinition ;
OBFlow ::= objectDefinition::ObjectDefinition ;
RDContainment ::= relationshipDefinition::RelationshipDefinition ;
CDConstraint ::= constraintDefinition::ConstraintDefinition ;
SDMSystemDefinition ::= sdm::SystemDefinitionModel ;
ObjectConstraint ::= RDObjectConstraint ;
 ObjectConstraint ::= RCObjectConstraint ;
 ObjectConstraint ::= CGObjectConstraint ;
 ObjectConstraint ::= CDObjectConstraint ;
 ObjectConstraint ::= (constraint::OCConstraint)+ (relationshipConstraint::OCRelationshipConstraint)+ (constraintGroup::OCConstraintGroup)+ primaryRole::RolesList primaryObjectDefinition::QualifiedName (secondaryRole::RolesList)+ (secondaryObjectDefinition::QualifiedName)+ (minOccurs::MinOccurs)+ (maxOccurs::MaxOccurs)+ ;
NameSpace ::= designData::DesignData ;
OBHostingDefinition ::= objectDefinition::ObjectDefinition ;
ConstraintEvaluation ::= (Design::ε) | (Never::ε) ;
FourPartVersionType ::= value::String ;
NamespaceIdentity ::= ImportNamespaceIdentity ;
 NamespaceIdentity ::= name::Path version::FourPartVersionType publicKey::PublicKeyType publicKeyToken::PublicKeyTokenType culture::CultureNeutral platform::Platform ;
RelationshipMember ::= HostingMember ;
 RelationshipMember ::= CommunicationMember ;
 RelationshipMember ::= ContainmentMember ;
 RelationshipMember ::= DelegationMember ;
 RelationshipMember ::= ReferenceMember ;
 RelationshipMember ::= HostingMember | CommunicationMember | ContainmentMember | DelegationMember | ReferenceMember ;
OBContainmentDefinition ::= objectDefinition::ObjectDefinition ;
ObjectDefinition ::= SystemDefinition ;
 ObjectDefinition ::= EndpointDefinition ;
 ObjectDefinition ::= ResourceDefinition ;
 ObjectDefinition ::= (flow::OBFlow)+ (relationshipConstraint::OBRelationshipConstraint)+ (constraint::OBConstraint)+ (constraintGroup::OBConstraintGroup)+ (endpointDefinition::OBEndpointDefinition)+ (systemDefinition::OBSystemDefinition)+ (resourceDefinition::OBResourceDefinition)+ (communicationDefinition::OBCommunicationDefinition)+ (containmentDefinition::OBContainmentDefinition)+ (delegationDefinition::OBDelegationDefinition)+ (referenceDefinition::OBReferenceDefinition)+ (hostingDefinition::OBHostingDefinition)+ (endpoint::OBEndpoint)+ (subsystem::OBSubsystem)+ (resource::OBResource)+ (hosting::OBHosting)+ (containment::OBContainment)+ (connection::OBConnection)+ (delegation::OBDelegation)+ (obreference::OBReference)+ layer::String extends::QualifiedName abstract::Boolean ;
OBConnection ::= objectDefinition::ObjectDefinition ;
RDConstraintGroup ::= relationshipDefinition::RelationshipDefinition ;
OBConstraint ::= objectDefinition::ObjectDefinition ;
OBDelegationDefinition ::= objectDefinition::ObjectDefinition ;
HostingDefinition ::= OBHostingDefinition ;
 HostingDefinition ::= guestDefinition::QualifiedName hostDefinition::QualifiedName simulationRoot::Boolean ;
SDMCommunicationDefinition ::= sdm::SystemDefinitionModel ;
FlowMember ::= OBFlow ;
 FlowMember ::= RDFlow ;
 FlowMember ::= (input::Input)+ (output::Output)+ ;
OBEndpoint ::= objectDefinition::ObjectDefinition ;
DefSettingValue ::= definition::Definition ;
ContainmentDefinition ::= SDMContainmentDefinition ;
 ContainmentDefinition ::= OBContainmentDefinition ;
 ContainmentDefinition ::= parentDefinition::QualifiedName memberDefinition::QualifiedName ;
SDMEndpointDefinition ::= sdm::SystemDefinitionModel ;
PathList ::= Substitute ;
 PathList ::= (settingPath::SettingPath)+ ;
ConstraintGroup ::= OBConstraintGroup ;
 ConstraintGroup ::= RDConstraintGroup ;
 ConstraintGroup ::= OCConstraintGroup ;
 ConstraintGroup ::= RCConstraintGroup ;
 ConstraintGroup ::= CDConstraintGroup ;
 ConstraintGroup ::= (constraint::CGConstraint)+ (relationshipConstraint::CGRelationshipConstraint)+ (objectConstraint::CGObjectConstraint)+ ;
SystemDefinition ::= SDMSystemDefinition ;
 SystemDefinition ::= OBSystemDefinition ;
 SystemDefinition ::= simulationRoot::Boolean ;
DelegationMember ::= OBDelegation ;
 DelegationMember ::= RDDelegation ;
 DelegationMember ::= proxyMember::Path delegateMember::Path ;
SettingMemberSecure ::= (Always::ε) | (PerInstance::ε) | (Never::ε) ;
CDConstraintGroup ::= constraintDefinition::ConstraintDefinition ;
OBResource ::= objectDefinition::ObjectDefinition ;
CGObjectConstraint ::= constraintGroup_CG::ConstraintGroup ;
RDFlow ::= relationshipDefinition::RelationshipDefinition ;
--------------------metamodels::SEE_Design.bgf--------------------
PlusOperator ::= operand1::Expression operand2::Expression ;
UnaryPlusOp ::= operand::Expression ;
BinaryOperator ::= PlusOperator ;
 BinaryOperator ::= MinusOperator ;
 BinaryOperator ::= operand1::Expression operand2::Expression ;
MinusOperator ::= operand1::Expression operand2::Expression ;
VariableExpression ::= name::String ;
UnaryOperator ::= UnaryPlusOp ;
 UnaryOperator ::= UnaryMinusOp ;
 UnaryOperator ::= operand::Expression ;
UnaryMinusOp ::= operand::Expression ;
NumberExpression ::= value::Integer ;
LogFile ::= file::String instance::LogFile logger::Logger ;
--------------------metamodels::SPEM.bgf--------------------
ProcessComponent ::= (processDefinitionElements::ProcessDefinitionElement)+ ;
RoleKind ::= (artifactKinds::ArtifactKind)+ ;
ProcessDefinitionElement ::= Guidance ;
 ProcessDefinitionElement ::= ArtifactKind ;
 ProcessDefinitionElement ::= WorkItem ;
 ProcessDefinitionElement ::= RoleKind ;
 ProcessDefinitionElement ::= Condition ;
 ProcessDefinitionElement ::= ProcessComponent ;
 ProcessDefinitionElement ::= (guidances::Guidance)+ (processComponents::ProcessComponent)+ ;
ArtifactUsageName ::= isInput::Boolean isOutput::Boolean hasWorkPerArtifact::Boolean artifactKind::ArtifactKind workDefinition::WorkDefinition ;
ArtifactKind ::= (artifactUsageNames::ArtifactUsageName)+ responsible::RoleKind ;
WorkDefinition ::= ActivityKind ;
 WorkDefinition ::= Iteration ;
 WorkDefinition ::= Phase ;
 WorkDefinition ::= Lifecycle ;
 WorkDefinition ::= (artifactUsageNames::ArtifactUsageName)+ goal::Goal precondition::Precondition ;
WorkItem ::= WorkDefinition ;
ActivityKind ::= (performer::RoleKind)+ (assistant::RoleKind)+ ;
--------------------metamodels::SPL.bgf--------------------
ControlMethod ::= (deploy::ε) | (undeploy::ε) | (uninvite::ε) | (unregister::ε) | (unsubscribe::ε) ;
FunctionCall ::= function::FunctionDeclaration (parameters::Expression)+ ;
StringConstant ::= value::String ;
HeadedMessageField ::= headerId::String ;
BlockExp ::= exp::Expression ;
SelectCase ::= (values::Constant)+ ;
FunctionCallStat ::= functionCall::FunctionCall ;
LocatedElement ::= Program ;
 LocatedElement ::= Service ;
 LocatedElement ::= Session ;
 LocatedElement ::= MethodName ;
 LocatedElement ::= Branch ;
 LocatedElement ::= TypeExpression ;
 LocatedElement ::= Declaration ;
 LocatedElement ::= StructureProperty ;
 LocatedElement ::= FunctionCall ;
 LocatedElement ::= Statement ;
 LocatedElement ::= SelectMember ;
 LocatedElement ::= Expression ;
 LocatedElement ::= MessageField ;
 LocatedElement ::= Constant ;
 LocatedElement ::= Response ;
SIPHeader ::= (CALL_ID::ε) | (CONTACT::ε) | (CSEQ::ε) | (EVENT::ε) | (FROM::ε) | (MAX_FORWARDS::ε) | (SUBSCRIPTION_STATE::ε) | (TO::ε) | (VIA::ε) ;
GlobalErrorResponse ::= errorKind::GlobalErrorKind ;
SIPMethodName ::= name::SIPMethod ;
IntegerConstant ::= value::Integer ;
FunctionDeclaration ::= RemoteFunctionDeclaration ;
 FunctionDeclaration ::= LocalFunctionDeclaration ;
SIPHeaderPlace ::= header::SIPHeader ;
RequestURIExp ::= ε ;
WithExp ::= exp::Expression (msgFields::MessageField)+ ;
SelectMember ::= SelectDefault ;
 SelectMember ::= SelectCase ;
PropertyCallPlace ::= propName::String source::VariablePlace ;
MessageField ::= ReasonMessageField ;
 MessageField ::= HeadedMessageField ;
BreakStat ::= ε ;
WhenStat ::= idExp::Variable (whenHeaders::WhenHeader)+ (statements::Statement)+ (elseStatements::Statement)+ ;
DeclarationStat ::= declaration::Declaration ;
FunctionLocation ::= (remote::ε) | (local::ε) ;
BooleanConstant ::= value::Boolean ;
VariablePlace ::= PropertyCallPlace ;
 VariablePlace ::= Variable ;
ErrorResponse ::= ClientErrorResponse ;
 ErrorResponse ::= GlobalErrorResponse ;
 ErrorResponse ::= RedirectionErrorResponse ;
 ErrorResponse ::= ServerErrorResponse ;
 ErrorResponse ::= ClientErrorResponse | GlobalErrorResponse | RedirectionErrorResponse | ServerErrorResponse ;
StructureProperty ::= name::String type::TypeExpression ;
FunctionCallExp ::= functionCall::FunctionCall ;
ServerErrorResponse ::= errorKind::ServerErrorKind ;
SuccessResponse ::= successKind::SuccessKind ;
ReturnStat ::= returnedValue::Expression branch::NamedBranch ;
DefinedType ::= typeName::String ;
CompoundStat ::= (statements::Statement)+ ;
ClientErrorResponse ::= errorKind::ClientErrorKind ;
VariableDeclaration ::= Argument ;
 VariableDeclaration ::= WhenHeader ;
 VariableDeclaration ::= type::TypeExpression initExp::Expression ;
RedirectionErrorResponse ::= errorKind::RedirectionErrorKind ;
RemoteFunctionDeclaration ::= functionLocation::FunctionLocation ;
SIPMethod ::= (ACK::ε) | (BYE::ε) | (CANCEL::ε) | (INVITE::ε) | (NOTIFY::ε) | (OPTIONS::ε) | (REACK::ε) | (REGISTER::ε) | (REINVITE::ε) | (REREGISTER::ε) | (RESUBSCRIBE::ε) | (SUBSCRIBE::ε) ;
SequenceType ::= modifier::Modifier type::PrimitiveType size::Integer ;
ContinueStat ::= ε ;
GlobalErrorKind ::= (BUSY_EVERYWHERE::ε) | (DECLINE::ε) | (DOES_NOT_EXIST_ANYWHERE::ε) | (NOT_ACCEPTABLE::ε) ;
OperatorExp ::= opName::String leftExp::Expression rightExp::Expression ;
ConstantExp ::= value::Constant ;
ForwardExp ::= isParallel::Boolean exp::Expression ;
ReasonMessageField ::= exp::Expression ;
LocalFunctionDeclaration ::= (statements::Statement)+ ;
SetStat ::= target::Place setValue::Expression ;
IfStat ::= condition::Expression (thenStatements::Statement)+ (elseStatements::Statement)+ ;
PushStat ::= target::Place pushedValue::Expression ;
PopExp ::= source::Place ;
SimpleType ::= type::PrimitiveType ;
MethodName ::= SIPMethodName ;
 MethodName ::= ControlMethodName ;
ControlMethodName ::= name::ControlMethod ;
StructureDeclaration ::= (properties::Argument)+ ;
ResponseConstant ::= response::Response ;
SequenceConstant ::= (values::Constant)+ ;
DefaultBranch ::= (statements::Statement)+ ;
PrimitiveType ::= (void::ε) | (bool::ε) | (int::ε) | (request::ε) | (response::ε) | (string::ε) | (time::ε) | (uri::ε) ;
ForeachStat ::= iteratorName::String sequenceExp::Expression (statements::Statement)+ ;
BODYExp ::= ε ;
NamedBranch ::= (name::String)+ ;
ServerErrorKind ::= (BAD_GATEWAY::ε) | (MESSAGE_TOO_LARGE::ε) | (NOT_IMPLEMENTED::ε) | (SERVER_INTERNAL_ERROR::ε) | (SERVER_TIMEOUT::ε) | (SERVICE_UNAVAILABLE::ε) | (VERSION_NOT_SUPPORTED::ε) ;
ReasonExp ::= ε ;
SuccessKind ::= (OK::ε) | (ACCEPTED::ε) ;
TypeExpression ::= SimpleType ;
 TypeExpression ::= SequenceType ;
 TypeExpression ::= DefinedType ;
ClientErrorKind ::= (ADDRESS_INCOMPLETE::ε) | (AMBIGUOUS::ε) | (BAD_EXTENSION::ε) | (BAD_REQUEST::ε) | (BUSY_HERE::ε) | (CALL_OR_TRANSACTION_DOES_NOT_EXIST::ε) | (EXTENSION_REQUIRED::ε) | (FORBIDDEN::ε) | (GONE::ε) | (INTERVAL_TOO_BRIEF::ε) | (LOOP_DETECTED::ε) | (METHOD_NOT_ALLOWED::ε) | (NOT_ACCEPTABLE_HERE::ε) | (NOT_ACCEPTABLE::ε) | (NOT_FOUND::ε) | (PAYMENT_REQUIRED::ε) | (PROXY_AUTHENTICATION_REQUIRED::ε) | (REQUESTURI_TOO_LONG::ε) | (REQUEST_ENTITY_TOO_LARGE::ε) | (REQUEST_PENDING::ε) | (REQUEST_TERMINATED::ε) | (REQUEST_TIMEOUT::ε) | (TEMPORARILY_UNAVAILABLE::ε) | (TOO_MANY_HOPS::ε) | (UNAUTHORIZED::ε) | (UNDECIPHERABLE::ε) | (UNSUPPORTED_MEDIA_TYPE::ε) | (UNSUPPORTED_URI_SCHEME::ε) ;
RedirectionErrorKind ::= (ALTERNATIVE_SERVICE::ε) | (MOVED_PERMANENTLY::ε) | (MOVED_TEMPORARILY::ε) | (MULTIPLE_CHOICES::ε) | (USE_PROXY::ε) ;
URIConstant ::= uri::String ;
SelectStat ::= matchedExp::Expression (selectCases::SelectCase)+ selectDefault::SelectDefault ;
WhenHeader ::= headerId::String value::Constant ;
SelectDefault ::= (statements::Statement)+ ;
--------------------metamodels::SQLDDL.bgf--------------------
TableElement ::= Column ;
 TableElement ::= Key ;
PrimaryKey ::= isUnique::Boolean name::String (columns::Column)+ ;
SimpleKey ::= isUnique::Boolean name::String (columns::Column)+ ;
ForeignKey ::= referencedTable::Table (referencedColumns::Column)+ ;
NullVal ::= ε ;
LocatedElement ::= NamedElement ;
 LocatedElement ::= TableElement ;
 LocatedElement ::= Value ;
IntegerVal ::= value::Integer ;
NamedElement ::= Database ;
 NamedElement ::= Table ;
 NamedElement ::= Type ;
 NamedElement ::= Parameter ;
StringVal ::= value::String ;
--------------------metamodels::SWRC.bgf--------------------
DevelopmentProject ::= name::String carriedOutBy::Organization financedBy::Organization head::AcademicStaff (isAbout::ResearchTopic)+ (member::Person)+ (projectInfo::ProjectReport)+ ;
ResearchProject ::= name::String carriedOutBy::Organization financedBy::Organization head::AcademicStaff (isAbout::ResearchTopic)+ (member::Person)+ (projectInfo::ProjectReport)+ ;
FacultyMember ::= FullProfessor ;
 FacultyMember ::= AssistantProfessor ;
 FacultyMember ::= AssociateProfessor ;
 FacultyMember ::= FullProfessor | AssistantProfessor | AssociateProfessor ;
InProceedings ::= editor::Person (author::Person)+ month::String number::Integer pages::String address::String volume::Integer series::String booktitle::String organization::Organization publisher::Organization ;
AcademicStaff ::= Lecturer ;
 AcademicStaff ::= FacultyMember ;
 AcademicStaff ::= (cooperateWith::AcademicStaff)+ editor::Publication headOf::Project headOfGroup::ResearchGroup memberOfPC::Event organizerOrChairOf::Event (publication::Publication)+ (supervises::PhDStudent)+ worksAtProject::ResearchTopic ;
PhDThesis ::= (author::Person)+ school::University month::String address::String type::String ;
SoftwareComponent ::= hasPrice::Integer ;
ResearchTopic ::= dealWithIn::Project (isWorkedOnBy::AcademicStaff)+ ;
SoftwareProject ::= product::Product ;
AdministrativeStaff ::= affiliation::Organization ;
AssociateProfessor ::= ε ;
AssistantProfessor ::= ε ;
TechnicalReport ::= series::String organization::Organization ;
PhDStudent ::= (publication::Publication)+ worksAtProject::Project supervisor::AcademicStaff ;
MasterThesis ::= (author::Person)+ school::University month::String address::String type::String ;
InBook ::= (author::Person)+ publisher::Organization editor::Person month::String number::Integer pages::String volume::Integer series::String chapter::String type::String address::String ;
ProjectReport ::= describesProject::Project ;
ResearchGroup ::= head::AcademicStaff (member::Employee)+ ;
TechnicalStaff ::= affiliation::Organization ;
InCollection ::= editor::Person (author::Person)+ publisher::Organization month::String number::Integer pages::String address::String edition::String volume::Integer series::String chapter::String type::String booktitle::String ;
ProjectMeeting ::= title::String (participant::Person)+ ;
FullProfessor ::= ε ;
--------------------metamodels::SQLDML.bgf--------------------
ListExp ::= (elements::Expression)+ ;
StringValueExp ::= aValue::String ;
BinaryExp ::= OrExp ;
 BinaryExp ::= AndExp ;
 BinaryExp ::= OperationExp ;
OrExp ::= opName::String leftExp::Expression rightExp::Expression ;
InExp ::= columnName::String (elements::Predicate)+ ;
OperationExp ::= optName::String ;
WhereClause ::= expression::Expression ;
QueryStmtCol ::= (columns::Expression)+ ;
QueryStmt ::= QueryStmtCol ;
 QueryStmt ::= QueryStmtAllCol ;
SQLRoot ::= (statements::Statement)+ ;
QueryPredicate ::= query::QueryStmt ;
QueryStmtAllCol ::= (tables::Table)+ condition::WhereClause ;
ValueExp ::= StringValueExp ;
 ValueExp ::= IntegerValueExp ;
IntegerValueExp ::= aValue::Integer ;
NotExp ::= opName::String valueExp::Expression unused::Expression ;
ViewStatement ::= name::String (columns::ColumnExp)+ query::QueryStmt ;
LocatedElement ::= SQLRoot ;
 LocatedElement ::= Statement ;
 LocatedElement ::= NamedElement ;
 LocatedElement ::= WhereClause ;
 LocatedElement ::= Expression ;
ColumnExp ::= alias::String type::DataType ;
AndExp ::= opName::String leftExp::Expression rightExp::Expression ;
LikeExp ::= columnName::String expression::StringValueExp ;
FunctionExp ::= (arguments::Expression)+ name::String ;
DataType ::= name::String ;
NamedElement ::= Table ;
 NamedElement ::= DataType ;
 NamedElement ::= ColumnExp ;
InsertStmt ::= tableName::String (values::Expression)+ ;
--------------------metamodels::Scilab.bgf--------------------
See_Also_Item ::= see_Also::See_Also (link::Link)+ ;
Param_Indent ::= param::Param param_Description::Param_Description (param_Item::Param_Item)+ ;
SP ::= biblio::Biblio ;
Param_Name ::= (verb::String)+ param_Item::Param_Item ;
Calling_Sequence ::= (calling_Sequence_Item::Calling_Sequence_Item)+ ;
Used_Functions ::= Param_Description ;
 Used_Functions ::= Description ;
 Used_Functions ::= Itemize ;
 Used_Functions ::= Item ;
 Used_Functions ::= Section ;
 Used_Functions ::= (verbatim::String)+ (table::Table)+ ;
Short_Description ::= name::String (verb::String)+ ;
Description_Item ::= label::String description_Indent::Description_Indent ;
Calling_Sequence_Item ::= (calling_Sequence_Item::String)+ calling_Sequence::Calling_Sequence ;
See_Also ::= (see_Also_Item::See_Also_Item)+ ;
Description_Indent ::= description::Description (description_Item::Description_Item)+ ;
PSPPP ::= P ;
 PSPPP ::= SP ;
 PSPPP ::= PP ;
 PSPPP ::= (verb::String)+ (em::String)+ (bd::String)+ (tt::String)+ (a::A)+ (link::Link)+ (img::Img)+ ;
Authors_Item ::= (Verb::String)+ (em::String)+ (bd::String)+ (tt::String)+ (verbatim::String)+ label::String (a::A)+ (link::Link)+ authors::Authors (itemize::Itemize)+ ;
Table_New_Row ::= (table_New_Column::Table_New_Column)+ table::Table ;
Param_Description ::= (param_Indent::Param_Indent)+ param_Item::Param_Item ;
InOut ::= (in::ε) | (out::ε) ;
Table_New_Column ::= (Verb::String)+ (em::String)+ (bd::String)+ (tt::String)+ table_New_Row::Table_New_Row ;
Param_Item ::= label::String param_Indent::Param_Indent param_Name::Param_Name param_Description::Param_Description ;
PreDef ::= (Preserve::ε) | (Default::ε) ;
AIMG ::= A ;
 AIMG ::= Img ;
 AIMG ::= (verb::String)+ ;
PP ::= biblio::Biblio ;
--------------------metamodels::SecureUML.bgf--------------------
CompositeAction ::= (subordinatedAction::Action)+ ;
AuthorizationConstraint ::= (permission::Permission)+ ;
AtomicAction ::= (permission::Permission)+ resource::Resource (actionHyerarchy::CompositeAction)+ ;
--------------------metamodels::Sharengo.bgf--------------------
BusinessObject ::= (operations::BusinessObjectOperation)+ ;
BusinessRule ::= expr::String ;
Service2BusinessObjectFlow ::= source::String target::String ;
BusinessObjectOperation ::= (rules::BusinessRule)+ ;
ModelElement ::= Classifier ;
 ModelElement ::= Operation ;
 ModelElement ::= BusinessRule ;
 ModelElement ::= Flow ;
ServiceOperation ::= (BOFlows::Service2BusinessObjectFlow)+ (rules::BusinessRule)+ ;
--------------------metamodels::SeminarSchedulingSystem.bgf--------------------
SeminarSchedulingSystem ::= (presenter::Presenter)+ (seminar::Seminar)+ ;
--------------------metamodels::SignalFlow.bgf--------------------
AssociationPortBase_PortBase ::= (srcPortBase::PortBase)+ (dstPortBase::PortBase)+ signal::Signal ;
LocalPort ::= compoundComponent::CompoundComponent ;
BaseComponent ::= CompoundComponent ;
 BaseComponent ::= PrimitiveComponent ;
 BaseComponent ::= name::String position::String (signal::Signal)+ (outputPort::OutputPort)+ (inputPort::InputPort)+ compoundComponent::CompoundComponent ;
InputPort ::= baseComponent::BaseComponent ;
PrimitiveComponent ::= name::String position::String (signal::Signal)+ (outputPort::OutputPort)+ (inputPort::InputPort)+ compoundComponent::CompoundComponent ;
PortBase ::= InputPort ;
 PortBase ::= LocalPort ;
 PortBase ::= OutputPort ;
 PortBase ::= name::String position::String associationPortBase_PortBasesrc::AssociationPortBase_PortBase associationPortBase_PortBasedst::AssociationPortBase_PortBase ;
OutputPort ::= baseComponent::BaseComponent ;
CompoundComponent ::= rootFolder::RootFolder (baseComponent::BaseComponent)+ (localPort::LocalPort)+ ;
RootFolder ::= (compoundComponent::CompoundComponent)+ ;
--------------------metamodels::SysML.bgf--------------------
InformationItem ::= (represented::Classifier)+ ;
AllocateActivityPartition ::= ε ;
DeriveReqt ::= ε ;
ActivityPartition ::= AllocateActivityPartition ;
InformationFlow ::= ItemFlow ;
 InformationFlow ::= (conveyed::Classifier)+ (source::NamedElement)+ (target::NamedElement)+ ;
ParameterSet ::= Probability ;
 ParameterSet ::= ε ;
DistributedProperty ::= BasicInterval ;
 DistributedProperty ::= Normal ;
 DistributedProperty ::= BasicInterval | Normal ;
FlowSpecification ::= (ownedFlowProperty::FlowProperty)+ ;
BasicInterval ::= Interval ;
 BasicInterval ::= Uniform ;
 BasicInterval ::= min::Integer max::Integer ;
ValueSpecification ::= ε ;
ConstraintProperty ::= ε ;
FlowDirection ::= (in::ε) | (out::ε) | (inout::ε) ;
ConstraintBlock ::= isEncapsulated::Boolean ;
FlowPort ::= isAtomic::Boolean direction::FlowDirection isConjugated::Boolean ;
InstanceSpecification ::= ε ;
ConnectorEnd ::= NestedConnectorEnd ;
ActivityEdge ::= Probability ;
 ActivityEdge ::= Rate ;
 ActivityEdge ::= ε ;
ValueType ::= Unit ;
 ValueType ::= Dimension ;
 ValueType ::= unit::Unit dimension::Dimension ;
ControlOperation ::= ε ;
RequirementRelated ::= (verifies::Requirement)+ (tracedFrom::Requirement)+ (satisfies::Requirement)+ (refines::Requirement)+ ;
NestedConnectorEnd ::= propertyPath::Property ;
DataType ::= ValueType ;
FlowProperty ::= direction::FlowDirection ;
NamedElement ::= Dependency ;
 NamedElement ::= Package ;
 NamedElement ::= Allocated ;
 NamedElement ::= RequirementRelated ;
TestCase ::= ε ;
BlockProperty ::= ConstraintProperty ;
 BlockProperty ::= DistributedProperty ;
 BlockProperty ::= ConstraintProperty | DistributedProperty ;
NoBuffer ::= ε ;
ObjectNode ::= NoBuffer ;
 ObjectNode ::= Overwrite ;
 ObjectNode ::= NoBuffer | Overwrite ;
ItemFlow ::= itemProperty::BlockProperty ;
--------------------metamodels::SimpleSBVR.bgf--------------------
ExactlyNQuantification ::= cardinality::NonNegativeInteger ;
FactTypeRole ::= nounConcept::NounConcept ;
IsPropertyOfFactType ::= role1::FactTypeRole role2::FactTypeRole ;
NonNegativeInteger ::= value::Integer ;
ObjectType ::= specializes::ObjectType (generalizes::ObjectType)+ ;
AssociativeFactType ::= role1::FactTypeRole role2::FactTypeRole ;
AtMostNQuantification ::= maxCardinality::NonNegativeInteger ;
AtLeastNQuantification ::= minCardinality::NonNegativeInteger ;
LogicalFormulation ::= AtomicFormulation ;
 LogicalFormulation ::= NecessityFormulation ;
 LogicalFormulation ::= Quantification ;
 LogicalFormulation ::= AtomicFormulation | NecessityFormulation | Quantification ;
NonEmptyString ::= value::String ;
RoleBinding ::= occursIn::AtomicFormulation isOf::FactType bindsTo::BindableTarget ;
AtomicFormulation ::= BinaryAtomicFormulation ;
 AtomicFormulation ::= isBasedOn::FactType ;
CategorizationFactType ::= role1::FactTypeRole role2::FactTypeRole ;
IndividualConcept ::= instanceOf::ObjectType ;
BinaryAtomicFormulation ::= roleBinding1::RoleBinding roleBinding2::RoleBinding ;
NounConcept ::= ObjectType ;
 NounConcept ::= IndividualConcept ;
 NounConcept ::= DataType ;
 NounConcept ::= ObjectType | IndividualConcept | DataType ;
BindableTarget ::= Variable ;
BinaryFactType ::= IsPropertyOfFactType ;
 BinaryFactType ::= AssociativeFactType ;
 BinaryFactType ::= CategorizationFactType ;
 BinaryFactType ::= ObjectificationFactType ;
 BinaryFactType ::= role1::FactTypeRole role2::FactTypeRole ;
UniversalQuantification ::= introducedVariable::Variable scopesOver::LogicalFormulation ;
FactType ::= BinaryFactType ;
NecessityFormulation ::= ε ;
ObjectificationFactType ::= role1::FactTypeRole role2::FactTypeRole ;
DataType ::= NonEmptyString ;
 DataType ::= NonNegativeInteger ;
 DataType ::= NonEmptyString | NonNegativeInteger ;
--------------------metamodels::SimulinkStateFlow.bgf--------------------
BranchPoint ::= ε ;
TriggerEnum ::= (alpha::ε) | (beta::ε) ;
TriggerPort ::= triggerType::TriggerEnum ;
BlockRef ::= ε ;
EnableEnum ::= (alpha::ε) | (beta::ε) ;
EnablePort ::= statesWhenEnabling::EnableEnum ;
OutPut ::= number::Integer ;
--------------------metamodels::SoftwareQualityControl.bgf--------------------
BugTracking ::= (bugs::Bug)+ ;
DateType ::= day::Integer month::Integer year::Integer ;
ControlType ::= BugTracking ;
ControlsSequence ::= (controls::Control)+ ;
BugStatusType ::= (bst_open::ε) | (bst_closed::ε) | (bst_skipped::ε) ;
--------------------metamodels::SyncCharts.bgf--------------------
SimpleState ::= isFinal::Boolean ;
CompositeState ::= canTerminate::Boolean isSuspendable::Boolean (stg::Stg)+ ;
TransitionKind ::= ε ;
PseudoTransitionKind ::= ε ;
PseudoStateKind ::= ε ;
ReferenceState ::= CompositeState ;
 ReferenceState ::= subSyncChart::SyncChart containers::Stg ;
PseudoTransition ::= kind::PseudoTransitionKind ;
PseudoState ::= kind::PseudoStateKind ;
SyncChart ::= context::ModelElement (referenceState::ReferenceState)+ ;
ModelElement ::= Arc ;
 ModelElement ::= Vertex ;
--------------------metamodels::TextualPathExp.bgf--------------------
AlternativeTrans ::= (altPaths::Path)+ ;
TextualPathExp ::= path::Path ;
PrimitiveTrans ::= name::String ;
--------------------metamodels::TroposActorConcept.bgf--------------------
HardGoal ::= wanter::Actor (plan::Plan)+ (dependencyWG::Dependency)+ (dependencyG::Dependency)+ ;
SoftGoal ::= wanter::Actor (plan::Plan)+ (dependencyWG::Dependency)+ (dependencyG::Dependency)+ ;
--------------------metamodels::TroposGoalAndPlanConcepts.bgf--------------------
MeansEnd ::= meansR::Resource means::Goal end::Goal PointOfView::Actor meansP::Plan ;
OrDecLink ::= booleanDecompositionB::BooleanDecomposition target::Goal targetP::Plan ;
AndDecLink ::= booleanDecompositionB::BooleanDecomposition target::Goal targetP::Plan ;
BooleanDecLink ::= AndDecLink ;
 BooleanDecLink ::= OrDecLink ;
 BooleanDecLink ::= booleanDecompositionB::BooleanDecomposition target::Goal targetP::Plan ;
BooleanDecomposition ::= type::String root::Goal rootP::Plan (booleanDecLinkD::BooleanDecLink)+ ;
--------------------metamodels::UEML.bgf--------------------
UEMLObject ::= UEMLModel ;
 UEMLObject ::= Port ;
 UEMLObject ::= Flow ;
 UEMLObject ::= Activity ;
 UEMLObject ::= Object ;
 UEMLObject ::= has::Geometry model::UEMLModel ;
AssociationConnector ::= (origin::Anchor)+ (target::Anchor)+ classAssociation::Flow ;
ResourceFlow ::= (resourceCarries::Resource)+ ;
InputPort ::= activity::Activity ;
ConstraintFlow ::= (carries::InformationObject)+ ;
ControlFlow ::= TriggerFlow ;
 ControlFlow ::= ConstraintFlow ;
 ControlFlow ::= (carries::InformationObject)+ ;
HumanResource ::= carries::ResourceFlow (plays::ResourceRole)+ ;
InformationObject ::= controlFlow::ControlFlow ;
UEMLModel ::= (contains::UEMLObject)+ ;
TriggerFlow ::= (carries::InformationObject)+ ;
MaterialResource ::= carries::ResourceFlow (plays::ResourceRole)+ ;
ResourceRole ::= (resourcePlays::Resource)+ roleQualifier::RoleType in::Activity ;
IOFlow ::= (carries::Object)+ ;
ConnectionOperator ::= target::AssociationConnector origin::AssociationConnector ;
OutputPort ::= activity::Activity ;
RoleType ::= ε ;
--------------------metamodels::UDDI_meta-model_fragment.bgf--------------------
IdentifierBag ::= ε ;
BusinessTemplate ::= ε ;
TModel ::= (overviewDocuments::OverviewDocument)+ identifierBag::IdentifierBag ;
BusinessService ::= ε ;
OverviewDocument ::= ε ;
BusinessEntity ::= (businessContacts::BusinessContact)+ (businessServices::BusinessService)+ identifierBag::IdentifierBag ;
BusinessContact ::= ε ;
--------------------metamodels::UEMLExtended.bgf--------------------
ResourceFlow ::= (resourceCarries::Resource)+ ;
HumanResource ::= obliger::Commitment claimer::Commitment has_parties::Contract ;
UEMLModel ::= (contains::UEMLObject)+ ;
MaterialResource ::= ε ;
IOFlow ::= (carries::Object)+ ;
RoleType ::= ε ;
UEMLObject ::= UEMLModel ;
 UEMLObject ::= Port ;
 UEMLObject ::= Flow ;
 UEMLObject ::= Object ;
 UEMLObject ::= Activity ;
 UEMLObject ::= has::Geometry model::UEMLModel ;
FlowObject ::= Event ;
 FlowObject ::= Activity ;
 FlowObject ::= ConnectionOperator ;
 FlowObject ::= target::AssociationConnector origin::AssociationConnector ;
AssociationConnector ::= (origin::FlowObject)+ (target::FlowObject)+ classAssociation::Flow ;
ControlFlow ::= TriggerFlow ;
 ControlFlow ::= ConstraintFlow ;
 ControlFlow ::= (carries::InformationObject)+ ;
ConstraintFlow ::= (carries::InformationObject)+ ;
InputPort ::= activity::Activity ;
InformationObject ::= controlFlow::ControlFlow ;
ActivityType ::= (activityT::Activity)+ ;
ResourceType ::= (resource::Resource)+ ;
PassiveObject ::= MaterialResource ;
 PassiveObject ::= Commitment ;
 PassiveObject ::= Contract ;
 PassiveObject ::= MaterialResource | Commitment | Contract ;
TriggerFlow ::= (carries::InformationObject)+ ;
ResourceRole ::= (resourcePlays::Resource)+ roleQualifier::RoleType in::Activity ;
ConnectionOperator ::= target::AssociationConnector origin::AssociationConnector ;
OutputPort ::= activity::Activity ;
--------------------metamodels::UEMLExtensionCapturingAgents.bgf--------------------
UEMLObject ::= UEMLModel ;
 UEMLObject ::= Port ;
 UEMLObject ::= Flow ;
 UEMLObject ::= Activity ;
 UEMLObject ::= Object ;
 UEMLObject ::= has::Geometry model::UEMLModel ;
AssociationConnector ::= (origin::Anchor)+ (target::Anchor)+ classAssociation::Flow ;
ResourceFlow ::= (resourceCarries::Resource)+ ;
InputPort ::= activity::Activity ;
ConstraintFlow ::= (carries::InformationObject)+ ;
ControlFlow ::= TriggerFlow ;
 ControlFlow ::= ConstraintFlow ;
 ControlFlow ::= (carries::InformationObject)+ ;
HumanResource ::= ε ;
InformationObject ::= controlFlow::ControlFlow ;
UEMLModel ::= (contains::UEMLObject)+ ;
PassiveObject ::= MaterialResource ;
 PassiveObject ::= Commitment ;
 PassiveObject ::= Contract ;
 PassiveObject ::= MaterialResource | Commitment | Contract ;
TriggerFlow ::= (carries::InformationObject)+ ;
MaterialResource ::= ε ;
ResourceRole ::= (resourcePlays::Resource)+ roleQualifier::RoleType in::Activity ;
IOFlow ::= (carries::Object)+ ;
ConnectionOperator ::= target::AssociationConnector origin::AssociationConnector ;
OutputPort ::= activity::Activity ;
RoleType ::= ε ;
--------------------metamodels::UEMLExtensionCapturingSocialEffects.bgf--------------------
UEMLObject ::= UEMLModel ;
 UEMLObject ::= Port ;
 UEMLObject ::= Flow ;
 UEMLObject ::= Activity ;
 UEMLObject ::= Object ;
 UEMLObject ::= has::Geometry model::UEMLModel ;
AssociationConnector ::= (origin::Anchor)+ (target::Anchor)+ classAssociation::Flow ;
ResourceFlow ::= (resourceCarries::Resource)+ ;
InputPort ::= target::AssociationConnector origin::AssociationConnector ;
ConstraintFlow ::= (carries::InformationObject)+ ;
ControlFlow ::= TriggerFlow ;
 ControlFlow ::= ConstraintFlow ;
 ControlFlow ::= (carries::InformationObject)+ ;
HumanResource ::= carries::ResourceFlow (plays::ResourceRole)+ ;
InformationObject ::= controlFlow::ControlFlow ;
UEMLModel ::= (contains::UEMLObject)+ ;
TriggerFlow ::= (carries::InformationObject)+ ;
MaterialResource ::= carries::ResourceFlow (plays::ResourceRole)+ ;
ResourceRole ::= (resourcePlays::Resource)+ roleQualifier::RoleType in::Activity ;
IOFlow ::= (carries::Object)+ ;
ConnectionOperator ::= target::AssociationConnector origin::AssociationConnector ;
OutputPort ::= activity::Activity ;
RoleType ::= ε ;
--------------------metamodels::UEMLExtensionDynamicAspects.bgf--------------------
UEMLObject ::= UEMLModel ;
 UEMLObject ::= Port ;
 UEMLObject ::= Flow ;
 UEMLObject ::= Object ;
 UEMLObject ::= Activity ;
 UEMLObject ::= has::Geometry model::UEMLModel ;
FlowObject ::= Event ;
 FlowObject ::= Activity ;
 FlowObject ::= ConnectionOperator ;
 FlowObject ::= target::AssociationConnector origin::AssociationConnector ;
AssociationConnector ::= (origin::FlowObject)+ (target::FlowObject)+ classAssociation::Flow ;
ResourceFlow ::= (resourceCarries::Resource)+ ;
InputPort ::= activity::Activity ;
ConstraintFlow ::= (carries::InformationObject)+ ;
ControlFlow ::= TriggerFlow ;
 ControlFlow ::= ConstraintFlow ;
 ControlFlow ::= (carries::InformationObject)+ ;
HumanResource ::= carries::ResourceFlow (plays::ResourceRole)+ ;
InformationObject ::= controlFlow::ControlFlow ;
UEMLModel ::= (contains::UEMLObject)+ ;
TriggerFlow ::= (carries::InformationObject)+ ;
MaterialResource ::= carries::ResourceFlow (plays::ResourceRole)+ ;
ResourceRole ::= (resourcePlays::Resource)+ roleQualifier::RoleType in::Activity ;
IOFlow ::= (carries::Object)+ ;
ConnectionOperator ::= target::AssociationConnector origin::AssociationConnector ;
OutputPort ::= activity::Activity ;
RoleType ::= ε ;
--------------------metamodels::UEMLExtensionModelingAspects.bgf--------------------
ResourceFlow ::= (resourceCarries::Resource)+ ;
HumanResource ::= carries::ResourceFlow (plays::ResourceRole)+ resourceType::ResourceType ;
UEMLModel ::= (contains::UEMLObject)+ ;
MaterialResource ::= carries::ResourceFlow (plays::ResourceRole)+ resourceType::ResourceType ;
IOFlow ::= (carries::Object)+ ;
RoleType ::= ε ;
UEMLObject ::= UEMLModel ;
 UEMLObject ::= Port ;
 UEMLObject ::= Flow ;
 UEMLObject ::= Activity ;
 UEMLObject ::= Object ;
 UEMLObject ::= has::Geometry model::UEMLModel ;
AssociationConnector ::= (origin::Anchor)+ (target::Anchor)+ classAssociation::Flow ;
ControlFlow ::= TriggerFlow ;
 ControlFlow ::= ConstraintFlow ;
 ControlFlow ::= (carries::InformationObject)+ ;
ConstraintFlow ::= (carries::InformationObject)+ ;
InputPort ::= activity::Activity ;
InformationObject ::= controlFlow::ControlFlow ;
ActivityType ::= (activityT::Activity)+ ;
ResourceType ::= (resource::Resource)+ ;
TriggerFlow ::= (carries::InformationObject)+ ;
ResourceRole ::= (resourcePlays::Resource)+ roleQualifier::RoleType in::Activity ;
ConnectionOperator ::= target::AssociationConnector origin::AssociationConnector ;
OutputPort ::= activity::Activity ;
--------------------metamodels::USECASE1.bgf--------------------
PostCondition ::= (context::Context)+ ;
PreCondition ::= (context::Context)+ ;
UseCase ::= context::Context (service::Service)+ (user::User)+ (actor::Actor)+ ;
--------------------metamodels::USECASE2.bgf--------------------
ScenarioDescription ::= useCase::UseCase ;
UseCase ::= Manage ;
 UseCase ::= (scenario::ScenarioDescription)+ (condition::Condition)+ (interacter::Role)+ (specified_by::FunctionnelRequirement)+ (scoped_by::NonFunctionnelRequirement)+ (meet_by::Goal)+ ;
FunctionnelRequirement ::= (specifies::UseCase)+ ;
SystemRole ::= (interacted_with::UseCase)+ ;
HumanRole ::= (interacted_with::UseCase)+ ;
NonFunctionnelRequirement ::= (scopes::UseCase)+ ;
EventRole ::= (interacted_with::UseCase)+ ;
--------------------metamodels::WSDL.bgf--------------------
BindingFault ::= operation::BindingOperation binding::Fault ;
StartWithExtensions ::= Binding ;
 StartWithExtensions ::= BindingFault ;
 StartWithExtensions ::= BindingOperation ;
 StartWithExtensions ::= Binding | BindingFault | BindingOperation ;
PortType ::= name::String (operations::Operation)+ (bindings::Binding)+ ;
BindingOperation ::= name::String bind::Binding binding::Operation input::StartWithExtensions output::StartWithExtensions (faults::BindingFault)+ ;
--------------------metamodels::UnixFS.bgf--------------------
FileSystemRoot ::= (contents::File)+ ;
TextFile ::= owner::String group::String ;
NamedElement ::= File ;
--------------------metamodels::UsiXML-task.bgf--------------------
BinaryType ::= (Enabling::ε) | (Disabling::ε) | (SuspendResume::ε) | (OrderIndependence::ε) | (IndependentConcurrency::ε) | (ConcurencyWithInformationPassing::ε) | (UnderterministicChoice::ε) | (EnablingWithInformationPassing::ε) ;
UnaryType ::= (Optional::ε) | (Iteration::ε) | (finitIteration::ε) ;
FiniteInteration ::= interation::Integer ;
BinaryOperator ::= type::BinaryType leftTask::Task rightTask::Task ;
UnaryOperator ::= FiniteInteration ;
 UnaryOperator ::= UnaryType::UnaryType decoratedTask::Task ;
--------------------metamodels::WSLink.bgf--------------------
LocatedElement ::= Network ;
 LocatedElement ::= Services ;
RSS ::= name::String URL::String descriptions::String ;
WebService ::= (linkedServices::Services)+ ;
--------------------metamodels::WTIP_SimpleClass.bgf--------------------
PrimitiveDataType ::= name::String ;
--------------------metamodels::WTIP_SimpleRDBMS.bgf--------------------
FKey ::= references::Table (cols::Column)+ ;
--------------------metamodels::WebApplications_AbstractModel.bgf--------------------
BusinessLogic ::= ε ;
DesignElement ::= ε ;
LogicInterface ::= ε ;
ClientPage ::= hyperlink::HyperLink ;
DesignTemplate ::= ε ;
ClientPageModule ::= consistsOf::Client/ClientPage ;
HyperLink ::= (server::Server/ServerPage)+ ;
ServerPage ::= useBusinessLogic::Server/BusinessLogic useDesignTemplate::Server/DesignTemplate (generates::Client/ClientPage)+ (link::HyperLink)+ ;
--------------------metamodels::WfMC.bgf--------------------
WorkflowProcessActivity ::= processDefinition::WorkflowProcessDefinition (applicationDeclarations::WorkflowApplicationDeclaration)+ (revelantDatas::WorkflowRelevantData)+ (participantSpecifications::WorkflowParticipantSpecification)+ to_transitionInformation::TransitionInformation from_transitionInformation::TransitionInformation ;
WorkflowParticipantSpecification ::= processDefinition::WorkflowProcessDefinition (revelantDatas::WorkflowRelevantData)+ (processActivities::WorkflowProcessActivity)+ ;
WorkflowApplicationDeclaration ::= processDefinition::WorkflowProcessDefinition (processActivities::WorkflowProcessActivity)+ (revelantDatas::WorkflowRelevantData)+ ;
TransitionInformation ::= processDefinition::WorkflowProcessDefinition (revelantDatas::WorkflowRelevantData)+ to_processActivity::WorkflowProcessActivity from_processActivity::WorkflowProcessActivity ;
WorkflowRelevantData ::= processDefinition::WorkflowProcessDefinition (applicationDeclarations::WorkflowApplicationDeclaration)+ (processActivities::WorkflowProcessActivity)+ (participantSpecifications::WorkflowParticipantSpecification)+ (transitionInformations::TransitionInformation)+ ;
WorkflowProcessDefinition ::= (participantSpecificatons::WorkflowParticipantSpecification)+ (revelantDatas::WorkflowRelevantData)+ (applicationDeclarations::WorkflowApplicationDeclaration)+ (processActivities::WorkflowProcessActivity)+ (transitionInformations::TransitionInformation)+ ;
--------------------metamodels::WebApplications_ConceptualModel.bgf--------------------
ServerDecision ::= evaluatesResultOf::Server/Processor ;
LogicElement ::= (uses::Server/UseCase)+ generatedBy::Server/LogicElement next::Server/LogicElement ;
BeginUseCase ::= useCase::Server/UseCase ;
ServerPageModule ::= (contains::Server/ServerPage)+ link::Server/Link containsModule::Server/DesignModule ;
DesignElement ::= represents::Server/DesignModule ;
LogicInterface ::= represents::Server/LogicModule generatedBy::Server/Renderer ;
LogicModule ::= (useCase::Server/UseCase)+ (logicElement::Server/LogicElement)+ ;
DesignModule ::= ε ;
ClientPage ::= hyperlink::HyperLink ;
UserDecision ::= (allows::Server/Alternative)+ ;
UseCase ::= (logicElem::Server/LogicElement)+ ;
ClientPageModule ::= consistsOf::Client/ClientPage representsSMP::Server/ServerPageModule ;
HyperLink ::= (server::Server/ServerPage)+ ;
ServerPage ::= (link::HyperLink)+ (generates::Client/ClientPage)+ (module::Server/ServerPageModule)+ ;
--------------------metamodels::WorkDefinitions.bgf--------------------
ProcessPerformer ::= Role ;
 ProcessPerformer ::= (features::WorkDefinition)+ ;
WorkProduct ::= responsible::Role ;
WorkDefinition ::= Lifecycle ;
 WorkDefinition ::= Phase ;
 WorkDefinition ::= Iteration ;
 WorkDefinition ::= Activity ;
 WorkDefinition ::= (parentWorks::WorkDefinition)+ (subWorks::WorkDefinition)+ owner::ProcessPerformer ;
--------------------metamodels::XAML-Perspective.bgf--------------------
Square3D ::= transform::String material::String name::Name namespace::NameSpace ;
WinFXElement ::= Name ;
GraphicalContainer ::= Grid ;
Element3D ::= UI3Delement ;
 Element3D ::= XyzAxis3D ;
 Element3D ::= UI3Delement ;
PageResource ::= (dictionaries::ResourceDictionary)+ ;
Box3D ::= transform::String material::String name::Name namespace::NameSpace ;
XyzAxis3D ::= length::Double ;
NameSpace ::= namespace::String identifier::String ;
Workshop3D ::= (elements3D::Element3D)+ ;
UI3Delement ::= Box3D ;
 UI3Delement ::= Square3D ;
 UI3Delement ::= transform::String material::String name::Name ;
ResourceDictionary ::= source::String ;
Object3D ::= Workshop3D ;
PerspectiveElement ::= Workshop3D ;
 PerspectiveElement ::= XyzAxis3D ;
 PerspectiveElement ::= Box3D ;
 PerspectiveElement ::= Square3D ;
--------------------metamodels::XAML-ResourceDictionary.bgf--------------------
TranslateTransform3D ::= OffsetX::Double OffsetY::Double OffsetZ::Double ;
WinFXElement ::= Key ;
NameSpace ::= namespace::String identifier::String ;
DiffuseMaterial ::= Brush::String ;
MaterialGroup ::= (materials::Material)+ ;
ResourceDictionary ::= (resourcegroups::ResourceGroup)+ (xmlns::NameSpace)+ ;
RotateTransformat3DRotation ::= axisAngleRotation3D::AxisAngleRotation3D ;
ScaleTransform3D ::= ScaleX::Double ScaleY::Double ScaleZ::Double ;
RotateTransform3D ::= CenterX::Double CenterY::Double rotation::RotateTransformat3DRotation ;
Transform3DGroup ::= (transformations::Transformation)+ ;
AxisAngleRotation3D ::= angle::Integer axis::String ;
ResourceGroup ::= Transform3DGroup ;
 ResourceGroup ::= MaterialGroup ;
 ResourceGroup ::= key::Key ;
--------------------metamodels::XMorphLanguage_abstractSyntax.bgf--------------------
NotTerm ::= (term::Term)+ ;
InstanceRef ::= obj::MOF::Object ;
SimpleTerm ::= TrackingUse ;
 SimpleTerm ::= PatternUse ;
 SimpleTerm ::= MofTerm ;
 SimpleTerm ::= Condition ;
CoumpoundExpr ::= CollectionExpr ;
 CoumpoundExpr ::= FunctionExpr ;
 CoumpoundExpr ::= FeatureExpr ;
ExtentVar ::= src::Term ;
MofInstance ::= isExactly::Boolean typeName::Expression instance::Expression ;
PatternDefn ::= scope::PatternScope (parameter::PatternVar)+ body::Term ;
MOF::Property ::= part::Key ;
PatternUse ::= tRuleST::TRule (arg::Expression)+ ;
CompoundTerm ::= AndTerm ;
 CompoundTerm ::= OrTerm ;
 CompoundTerm ::= NotTerm ;
 CompoundTerm ::= IfTerm ;
PatternVar ::= query::Query patternDefn::PatternDefn ;
TRuleVar ::= (superseder::TRuleVar)+ (superseded::TRuleVar)+ (extended::TRuleVar)+ (extender::TRuleVar)+ ;
StringConstant ::= representation::String ;
MOF::Class ::= (tracking::TrackingUse)+ ;
IntConstant ::= representation::String ;
CollectionExpr ::= unique::Boolean ordered::Boolean ;
MofTerm ::= MofInstance ;
 MofTerm ::= MofOrder ;
TRule ::= (superseded::TRule)+ (superseder::TRule)+ transformation::Transformation (extended::TRule)+ (extender::TRule)+ term::Term (tgt::SimpleTerm)+ ;
TrackingUse ::= featureNames::String tracking::MOF::Class ;
OrTerm ::= (term::Term)+ ;
FunctionExpr ::= function::String ;
VarScope ::= PatternScope ;
 VarScope ::= PatternDefn ;
 VarScope ::= TRule ;
BooleanConstant ::= representation::String ;
FeatureExpr ::= collect::String featureName::String ;
MofOrder ::= lesser::Expression instance::Expression greater::Expression ;
IfTerm ::= (term::Term)+ ;
SimpleExpr ::= StringConstant ;
 SimpleExpr ::= IntConstant ;
 SimpleExpr ::= BooleanConstant ;
 SimpleExpr ::= EnumConstant ;
EnumConstant ::= representation::String ;
AbstractVar ::= TRuleVar ;
 AbstractVar ::= PatternVar ;
 AbstractVar ::= ExtentVar ;
PatternScope ::= Transformation ;
 PatternScope ::= Query ;
MOF::Object ::= obj::InstanceRef ;
AndTerm ::= (term::Term)+ ;
VarUse ::= var::AbstractVar ;
--------------------metamodels::XPDL-1.14.bgf--------------------
TaskReceive ::= instantiate::Boolean implementation::ImplementationKind ;
StartEvent ::= triggerKind::TriggerKind implementation::ImplementationKind trigger::Trigger ;
ResultCompensation ::= activity::Activity ;
ReferencedApplication ::= externalReference::ExternalReference ;
ModeKind ::= (Automatic::ε) | (Manual::ε) ;
MessageFlow ::= targetActivity::Activity sourceActivity::Activity targetPool::Pool sourcePool::Pool object::Object ;
TriggerRule ::= ruleName::String ;
ActivitySet ::= adHoc::Boolean adHocOrdering::AdHocOrderingKind adHocCompletionCondition::String defaultStartActivity::Activity (activities::Activity)+ (transitions::Transition)+ object::Object ;
GatewayTypeKind ::= (Xor::ε) | (Or::ε) | (Complex::ε) | (And::ε) ;
TriggerResultMessage ::= ε ;
TriggerResultLink ::= processRef::Process ;
SubFlow ::= execution::ExecutionKind instanceDataField::String packageRef::Package startActivitySet::ActivitySet startActivity::Activity ;
ResultMultiple ::= ε ;
ExecutionKind ::= (Asynchr::ε) | (Synchr::ε) ;
TaskApplication ::= packageRef::Package ;
DataObject ::= state::String requiredForStart::Boolean producedAtCompletion::Boolean (dataFields::DataField)+ ;
TaskReference ::= taskRef::Task ;
OrientationKind ::= (Horizontal::ε) | (Vertical::ε) ;
TriggerIntermediateMultiple ::= ε ;
AdHocOrderingKind ::= (Sequential::ε) | (Parallel::ε) ;
ExternalReference ::= xref::String location::String namespace::String ;
EndEvent ::= triggerKind::TriggerKind implementation::ImplementationKind trigger::Trigger ;
ProcessTypeKind ::= (None::ε) | (Private::ε) | (Abstract::ε) | (Collaboration::ε) ;
BlockActivity ::= activitySet::ActivitySet startActivity::Activity ;
ExternalPackage ::= href::String ;
AccessLevelKind ::= (Public::ε) | (Private::ε) ;
AssociationDirectionKind ::= (None::ε) | (To::ε) | (From::ε) | (Both::ε) ;
DataField ::= isArray::Boolean correlation::Boolean dataType::TypeDeclaration ;
TaskUser ::= implementation::ImplementationKind ;
TaskScript ::= script::Script ;
TaskService ::= implementation::ImplementationKind ;
TriggerTimer ::= timeDate::String timeCycle::String ;
TaskSend ::= implementation::ImplementationKind ;
TriggerKind ::= (None::ε) | (Message::ε) | (Timer::ε) | (Rule::ε) | (Link::ε) | (Error::ε) | (Cancel::ε) | (Compensation::ε) | (Terminate::ε) | (Multiple::ε) ;
ResultError ::= errorCode::String ;
TaskManual ::= ε ;
ParametrizedApplication ::= ε ;
TriggerMultiple ::= ε ;
ImplementationKind ::= (WebService::ε) | (Other::ε) | (Unspecified::ε) ;
StatusKind ::= (None::ε) | (Ready::ε) | (Active::ε) | (Cancelled::ε) | (Aborting::ε) | (Aborted::ε) | (Completing::ε) | (Completed::ε) ;
IntermediateEvent ::= target::Activity ;
TypeDeclaration ::= id::String name::String ;
--------------------metamodels::XUL-Interactorl.bgf--------------------
TabPanel ::= id::String orient::Orients ;
TextBox ::= multiline::Boolean value::String ;
MenuList ::= (menuitems::MenuItem)+ ;
ListBox ::= rows::Integer (listitems::ListItem)+ ;
GroupBox ::= (xulInteractors::Interactor)+ ;
onClick ::= (functionCallParameters::Parameter)+ functionCalledName::String name::String ;
HeaderJScript ::= ref::String ;
HeaderCss ::= ref::String type::String ;
TabBox ::= (tabPanels::Interactor)+ ;
UIModel ::= windows::Windows (functions::Function)+ ;
RadioGroup ::= (radiobuttons::Radio)+ ;
CheckBox ::= checked::Boolean ;
MenuItem ::= label::String ;
ListItem ::= label::String value::String ;
--------------------metamodels::bmmOmg.bgf--------------------
BusinessProcess ::= (deliveredOffering::Offering)+ (realizedCourseOfAction::CourseOfAction)+ (managedAsset::Asset)+ (governingBusinessPolicy::BusinessPolicy)+ guidingBusinessRule::BusinessRule (responsibleOrganizationUnit::OrganizationUnit)+ ;
PotentialReward ::= (identifyingAssessment::Assessment)+ (motivatedDirective::Directive)+ ;
BusinessRule ::= (effectingTactic::Tactic)+ (guidedBusinessProcess::BusinessProcess)+ (baseBusinessPolicy::BusinessPolicy)+ ;
FixedAsset ::= Offering ;
 FixedAsset ::= (usingOffering::Offering)+ (providedResource::Resource)+ ;
InfluencerCategory ::= (categorizedInfluencer::Influencer)+ ;
CourseOfAction ::= Tactic ;
 CourseOfAction ::= Strategy ;
 CourseOfAction ::= (enabledCourseOfAction::CourseOfAction)+ (enablingCourseOfAction::CourseOfAction)+ (moreSpecficCourseOfAction::CourseOfAction)+ (broaderCourseOfAction::CourseOfAction)+ (supportedDesiredResult::DesiredResult)+ (definedOffering::Offering)+ (dischargedLiability::Liability)+ realizingBusinessProcess::BusinessProcess (governingDirective::Directive)+ (baseDirective::Directive)+ (deployedAsset::Asset)+ ;
DesiredResult ::= Goal ;
 DesiredResult ::= Objective ;
 DesiredResult ::= (moreSpecificDesiredResult::DesiredResult)+ (broaderDesiredResult::DesiredResult)+ (supportingDirective::Directive)+ (supportingCourseOfAction::CourseOfAction)+ ;
OrganizationUnit ::= (definedEnd::End)+ (managedBusinessProces::BusinessProcess)+ (managedLiability::Liability)+ (managedAsset::Asset)+ (determiningStrategy::Strategy)+ (recognizedInfluencer::Influencer)+ (internalInfluencingOrganization::InfluencingOrganization)+ (madeAssessment::Assessment)+ (establishedMeans::Means)+ ;
MotivationElement ::= Assessment ;
 MotivationElement ::= Means ;
 MotivationElement ::= OrganizationUnit ;
 MotivationElement ::= End ;
 MotivationElement ::= BusinessProcess ;
 MotivationElement ::= Asset ;
 MotivationElement ::= Liability ;
 MotivationElement ::= Influencer ;
 MotivationElement ::= InfluencerCategory ;
 MotivationElement ::= InfluencingOrganization ;
 MotivationElement ::= OrganizationCategory ;
 MotivationElement ::= PotentialImpact ;
 MotivationElement ::= AssessmentCategory ;
InfluencingOrganization ::= (categorizingOrganizationCategory::OrganizationCategory)+ influencingOrganizationUnit::OrganizationUnit (providedInfluencer::Influencer)+ ;
PotentialImpact ::= PotentialReward ;
 PotentialImpact ::= Risk ;
 PotentialImpact ::= (identifyingAssessment::Assessment)+ (motivatedDirective::Directive)+ ;
BusinessPolicy ::= (moreSpecificBusinessPolicy::BusinessPolicy)+ (broaderBusinessPolicy::BusinessPolicy)+ (derivedBusinessRule::BusinessRule)+ (governedBusinessProcess::BusinessProcess)+ ;
OrganizationCategory ::= (categorizedInfluencingOrganization::InfluencingOrganization)+ ;
AssessmentCategory ::= (categorizedAssessment::Assessment)+ ;
--------------------metamodels::cmt.owl.bgf--------------------
AssociatedChair ::= memberOfConference::Conference ;
PaperAbstract ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
PaperFullVersion ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
AuthorNotReviewer ::= submitPaper::Paper writePaper::Paper ;
Meta-Reviewer ::= assignedByAdministrator::Administrator adjustBid::Bid readPaper::Paper hasBeenAssigned::Paper writeReview::Review assignExternalReviewer::ExternalReviewer ;
Co-author ::= co-writePaper::Paper ;
ProgramCommitteeChair ::= endReview::Review ;
SubjectArea ::= ε ;
ConferenceChair ::= memberOfConference::Conference ;
ProgramCommittee ::= hasProgramCommitteeMember::ProgramCommitteeMember ;
ConferenceMember ::= Reviewer ;
 ConferenceMember ::= ConferenceChair ;
 ConferenceMember ::= AssociatedChair ;
 ConferenceMember ::= Author ;
 ConferenceMember ::= ProgramCommitteeMember ;
 ConferenceMember ::= Chairman ;
 ConferenceMember ::= memberOfConference::Conference ;
ProgramCommitteeMember ::= ProgramCommitteeChair ;
 ProgramCommitteeMember ::= memberOfProgramCommittee::ProgramCommittee maxPapers::Integer addedBy::Administrator ;
Meta-Review ::= writtenBy::Reviewer ;
ExternalReviewer ::= assignedByReviewer::Reviewer ;
--------------------metamodels::confOf.owl.bgf--------------------
Email_Template ::= define::Event ;
Reviewing_results_event ::= follows::Administrative_event parallel_with::Administrative_event ;
start_date_of_camera-ready_submission ::= ε ;
Conference_proceedings ::= has_an_ISBN::String has_a_publisher::Publisher has_a_volume::Integer ;
Science_Worker ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person send::Activity added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String hasConflictOfInterest::Document email::String ;
ConferenceMember ::= Reviewer ;
 ConferenceMember ::= ConferenceChair ;
 ConferenceMember ::= AssociatedChair ;
 ConferenceMember ::= Author ;
 ConferenceMember ::= ProgramCommitteeMember ;
 ConferenceMember ::= Chairman ;
 ConferenceMember ::= memberOfConference::Conference ;
Accepted_Paper ::= full_paper_size::Integer has_author::human ;
Submitted_contribution ::= Reviewed_contribution ;
 Submitted_contribution ::= has_a_review_expertise::Review_expertise ;
Regular_contribution ::= Extended_abstract ;
Track-workshop_chair ::= was_a_track-workshop_chair_of::Conference_part ;
Working_event ::= Tutorial ;
 Working_event ::= hasTopic::Topic hasAdministrativeEvent::Administrative_event ;
summary_of_reviews ::= is_created_in::activity ;
Co-author ::= co-writePaper::Paper ;
Short_paper ::= writtenBy::Author dealsWith::Topic remark::String abstract::String contactEmail::String hasKeyword::String hasTitle::String ;
ConferenceChair ::= memberOfConference::Conference ;
Late_paid_applicant ::= ε ;
EEnum ::= (high::ε) | (medium::ε) | (low::ε) | (very high::ε) | (male::ε) | (female::ε) ;
Camera_Ready_event ::= follows::Administrative_event parallel_with::Administrative_event ;
Registeered_applicant ::= Paid_applicant ;
group_email ::= goes_through::activity is_sent_to::human is_created_in::activity structure_created_by::human has_author::human gives_classification::classification ;
Full_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
upper_tier_reviewing_process ::= is_performed_by::human ;
reviewing_proces ::= lower_tier_reviewing_process ;
 reviewing_proces ::= upper_tier_reviewing_process ;
 reviewing_proces ::= lower_tier_reviewing_process | upper_tier_reviewing_process ;
Manual_Paper_Assignment ::= (manually_assign_paper::Program_Committee_member)+ ;
Conference_fees ::= ε ;
Chair_PC ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person send::Activity added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String hasConflictOfInterest::Document email::String ;
Meta-Reviewer ::= invites_co-reviewers::Reviewer invited_by::Reviewer (has_a_review_reference_or_expertise::Thing)+ assignedByAdministrator::Administrator adjustBid::Bid readPaper::Paper hasBeenAssigned::Paper writeReview::Review assignExternalReviewer::ExternalReviewer ;
ProgramCommitteeChair ::= endReview::Review ;
Early_paid_applicant ::= ε ;
Call_for_participation ::= has_authors::Person has_a_date_of_issue::date ;
Active_conference_participant ::= gives_presentations::Presentation ;
Short_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Passive_conference_participant ::= ε ;
Senior_Reviewer_URL ::= ε ;
date_of_notification ::= ε ;
phase_of_conference ::= ε ;
Conference_applicant ::= Registeered_applicant ;
Organizing_committee ::= was_an_organizing_committee_of::Conference_volume ;
Conference_document ::= Conference_contribution ;
 Conference_document ::= Information_for_participants ;
 Conference_document ::= Call_for_paper ;
 Conference_document ::= Conference_announcement ;
 Conference_document ::= Call_for_participation ;
 Conference_document ::= Conference_www ;
 Conference_document ::= Review ;
 Conference_document ::= has_authors::Person has_a_date_of_issue::date ;
Registration_of_participants_event ::= follows::Administrative_event parallel_with::Administrative_event ;
Contribution_co-author ::= ε ;
Committee_member ::= Co-chair ;
 Committee_member ::= Chair ;
 Committee_member ::= was_a_member_of::Committee ;
SubjectArea ::= ε ;
Chair_URL ::= ε ;
date_of_conference ::= start_date_of_conference ;
 date_of_conference ::= end_date_of_conference ;
 date_of_conference ::= start_date_of_conference | end_date_of_conference ;
start_date_of_conference ::= ε ;
Conference_participant ::= Passive_conference_participant ;
 Conference_participant ::= Active_conference_participant ;
Regular_author ::= Contribution_1th-author ;
 Regular_author ::= Contribution_co-author ;
 Regular_author ::= Contribution_1th-author | Contribution_co-author ;
PaperAbstract ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Author_Role ::= assigned_by::Administrator ;
bidding_of_reviewer ::= is_performed_by::human ;
Rejection_Email ::= ε ;
Admin_Role ::= assigned_by::Administrator ;
abstract_submission_date ::= end_date_of_abstract_submission ;
 abstract_submission_date ::= start_date_of_abstract_submission ;
 abstract_submission_date ::= end_date_of_abstract_submission | start_date_of_abstract_submission ;
abstract_of_paper ::= goes_through::activity is_sent_to::human is_created_in::activity structure_created_by::human has_author::human gives_classification::classification ;
Approval_Email ::= confirm::Event ;
Group_Email ::= ε ;
lower_tier_reviewing_process ::= ε ;
Regular_Program_Committee_member ::= ε ;
conference_setup ::= sets_member::human is_made_by::human includes_topic::topic sets_date::date sets_URL::URL ;
Member_PC ::= expertOn::Topic reviewes::Contribution ;
end_date_of_conference ::= ε ;
Contact_Person ::= is_author_of::article performs_activity::activity is_employed_in::institute has_topic_of_interest::topic supervises::activity e-mail::String last_name::String first_name::String ;
Help_Request ::= Misc ;
 Help_Request ::= Feature_Request ;
 Help_Request ::= Assistance ;
 Help_Request ::= Misc | Feature_Request | Assistance ;
Rejected_Paper ::= full_paper_size::Integer has_author::human ;
Research_Topic ::= define::Event ;
Event_Approval ::= (has_result::Thing)+ sent_by::Person ;
Accepted_contribution ::= Camera_ready_contribution ;
Invited_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Reviewing_event ::= follows::Administrative_event parallel_with::Administrative_event ;
Conference_volume ::= has_parts::Conference_part has_workshops::Workshop has_tracks::Track has_tutorials::Tutorial has_a_commtitee::Committee has_a_steering_committee::Steering_committee has_an_organizing_committee::Organizing_committee has_important_dates::Important_dates has_contributions::Conference_contribution has_a_location::String has_a_program_committee::Program_committee ;
camera-ready_submission_date ::= start_date_of_camera-ready_submission ;
 camera-ready_submission_date ::= end_date_of_camera-ready_submission ;
 camera-ready_submission_date ::= start_date_of_camera-ready_submission | end_date_of_camera-ready_submission ;
submission_process ::= is_performed_by::human ;
start_date_of_full_paper_submission ::= ε ;
ProgramCommittee ::= hasProgramCommitteeMember::ProgramCommitteeMember ;
start_date_of_abstract_submission ::= ε ;
end_date_of_camera-ready_submission ::= ε ;
Head_Role ::= assigned_by::Administrator ;
ProgramCommitteeMember ::= ProgramCommitteeChair ;
 ProgramCommitteeMember ::= memberOfProgramCommittee::ProgramCommittee maxPapers::Integer addedBy::Administrator ;
Reviewer_Role ::= assigned_by::Administrator ;
Paid_applicant ::= Late_paid_applicant ;
 Paid_applicant ::= Early_paid_applicant ;
 Paid_applicant ::= Late_paid_applicant | Early_paid_applicant ;
end_date_of_abstract_submission ::= ε ;
Committe_Role ::= assigned_by::Administrator ;
Conference_announcement ::= has_authors::Person has_a_date_of_issue::date ;
Administrative_event ::= Reviewing_results_event ;
 Administrative_event ::= Reviewing_event ;
 Administrative_event ::= Registration_of_participants_event ;
 Administrative_event ::= Submission_event ;
 Administrative_event ::= Camera_Ready_event ;
 Administrative_event ::= follows::Administrative_event parallel_with::Administrative_event ;
Review_Form_Setup ::= ε ;
Program_Committee_Chair ::= is_author_of::article performs_activity::activity is_employed_in::institute has_topic_of_interest::topic supervises::activity e-mail::String last_name::String first_name::String ;
Social_event ::= Trip ;
 Social_event ::= Banquet ;
 Social_event ::= Reception ;
 Social_event ::= Trip | Banquet | Reception ;
Camera_ready_contribution ::= ε ;
Program_committee ::= was_a_program_committee_of::Conference_volume ;
Contribution_1th-author ::= ε ;
paper_assignment ::= Manual_Paper_Assignment ;
 paper_assignment ::= Automatic_Paper_Assignment ;
 paper_assignment ::= assign_paper::Program_Committee_member is_performed_by::human ;
full_paper_submission_date ::= start_date_of_full_paper_submission ;
 full_paper_submission_date ::= end_date_of_full_paper_submission ;
 full_paper_submission_date ::= start_date_of_full_paper_submission | end_date_of_full_paper_submission ;
Written_contribution ::= Submitted_contribution ;
 Written_contribution ::= Regular_contribution ;
 Written_contribution ::= Submitted_contribution | Regular_contribution ;
Conference_contributor ::= Regular_author ;
 Conference_contributor ::= Invited_speaker ;
 Conference_contributor ::= Active_conference_participant ;
 Conference_contributor ::= Regular_author | Invited_speaker ;
Event_Setup ::= Paper_Typologies ;
 Event_Setup ::= Review_Form ;
 Event_Setup ::= Submission_Template ;
 Event_Setup ::= Event_Tracks ;
 Event_Setup ::= Research_Topic ;
 Event_Setup ::= Email_Template ;
 Event_Setup ::= define::Event ;
Corresponding_Author ::= writes::Contribution submitPaper::Paper writePaper::Paper ;
Automatic_Paper_Assignment ::= (automatically_assign_paper::Program_Committee_member)+ ;
Undecided_Paper ::= full_paper_size::Integer has_author::human ;
URL ::= Event_URL ;
 URL ::= Senior_Reviewer_URL ;
 URL ::= Chair_URL ;
 URL ::= Contact_Person_URL ;
 URL ::= Regular_Reviewer_URL ;
 URL ::= Event_URL | Senior_Reviewer_URL | Chair_URL | Contact_Person_URL | Regular_Reviewer_URL ;
Steering_committee ::= was_a_steering_committee_of::Conference_volume ;
AuthorNotReviewer ::= writes::Contribution submitPaper::Paper writePaper::Paper ;
review_form ::= is_created_in::activity ;
Review_Form ::= Preview ;
 Review_Form ::= Review_Form_Setup ;
 Review_Form ::= Preview | Review_Form_Setup ;
Notification_Email ::= ε ;
notification_email ::= acceptance_notification_email ;
 notification_email ::= rejection_notification_email ;
 notification_email ::= acceptance_notification_email | rejection_notification_email ;
Extended_abstract ::= Abstract ;
Senior_Program_Committee_member ::= supervises::activity ;
Co-chair ::= was_a_committe_co-chair_of::Committee ;
AssociatedChair ::= memberOfConference::Conference ;
rejection_notification_email ::= ε ;
PaperFullVersion ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Reviewed_contribution ::= Accepted_contribution ;
 Reviewed_contribution ::= Rejected_contribution ;
 Reviewed_contribution ::= has_a_review::Review ;
Program_Committee_member ::= Senior_Program_Committee_member ;
 Program_Committee_member ::= Regular_Program_Committee_member ;
 Program_Committee_member ::= Senior_Program_Committee_member | Regular_Program_Committee_member ;
end_date_of_full_paper_submission ::= ε ;
Conference_contribution ::= Poster ;
 Conference_contribution ::= Written_contribution ;
 Conference_contribution ::= Presentation ;
 Conference_contribution ::= is_submitted_at::Conference_volume ;
acceptance_notification_email ::= ε ;
Paper_Typologies ::= define::Event ;
Information_for_participants ::= has_authors::Person has_a_date_of_issue::date ;
Contact_Person_URL ::= ε ;
Event_Creation ::= (has_result::Thing)+ sent_by::Person ;
Meta-Review ::= writtenBy::Reviewer reviews::Reviewed_contribution ;
Invited_speaker ::= ε ;
Regular_Reviewer_URL ::= ε ;
managing_of_conference_process ::= is_followed_by::activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human ;
Conference_part ::= Track ;
 Conference_part ::= Workshop ;
 Conference_part ::= Tutorial ;
 Conference_part ::= has_a_track-workshop-tutorial_topic::Topic is_part_of_conference_volumes::Conference_volume has_a_track-workshop-tutorial_chair::Track-workshop_chair ;
Call_for_paper ::= has_authors::Person has_a_date_of_issue::date ;
Conference_www ::= has_a_URL::String ;
Rejected_contribution ::= has_a_review::Review ;
Invited_talk ::= is_given_by::Active_conference_participant ;
ExternalReviewer ::= assignedByReviewer::Reviewer ;
Event_Tracks ::= define::Event ;
Submission_Template ::= define::Event ;
Review_expertise ::= has_a_submitted_contribution::Submitted_contribution has_an_expertise::EEnum ;
Event_URL ::= concerned::Event ;
Important_dates ::= is_an_abstract_submission_date::date is_a_full_paper_submission_date::date is_an_ending_date::date is_a_date_of_acceptance_announcement::date is_a_date_of_camera_ready_paper_submission::date is_a_starting_date::date belong_to_a_conference_volume::Conference_volume ;
Submission_event ::= follows::Administrative_event parallel_with::Administrative_event ;
Feature_Request ::= ε ;
Review_preference ::= (has_a_topic_or_a_submission_contribution::Thing)+ has_a_degree::Integer ;
--------------------metamodels::confious.owl.bgf--------------------
camera-ready_submission_date ::= start_date_of_camera-ready_submission ;
 camera-ready_submission_date ::= end_date_of_camera-ready_submission ;
 camera-ready_submission_date ::= start_date_of_camera-ready_submission | end_date_of_camera-ready_submission ;
Conference_volume ::= has_parts::Conference_part has_workshops::Workshop has_tracks::Track has_tutorials::Tutorial has_a_commtitee::Committee has_a_steering_committee::Steering_committee has_an_organizing_committee::Organizing_committee has_important_dates::Important_dates has_contributions::Conference_contribution has_a_location::String has_a_program_committee::Program_committee ;
Email_Template ::= define::Event ;
submission_process ::= is_performed_by::human ;
start_date_of_camera-ready_submission ::= ε ;
Conference_proceedings ::= has_an_ISBN::String has_a_publisher::Publisher has_a_volume::Integer ;
start_date_of_full_paper_submission ::= ε ;
ProgramCommittee ::= hasProgramCommitteeMember::ProgramCommitteeMember ;
ConferenceMember ::= Reviewer ;
 ConferenceMember ::= ConferenceChair ;
 ConferenceMember ::= AssociatedChair ;
 ConferenceMember ::= Author ;
 ConferenceMember ::= ProgramCommitteeMember ;
 ConferenceMember ::= Chairman ;
 ConferenceMember ::= memberOfConference::Conference ;
start_date_of_abstract_submission ::= ε ;
end_date_of_camera-ready_submission ::= ε ;
Head_Role ::= assigned_by::Administrator ;
Accepted_Paper ::= full_paper_size::Integer has_author::human hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Submitted_contribution ::= Reviewed_contribution ;
 Submitted_contribution ::= has_a_review_expertise::Review_expertise ;
Regular_contribution ::= Extended_abstract ;
ProgramCommitteeMember ::= ProgramCommitteeChair ;
 ProgramCommitteeMember ::= memberOfProgramCommittee::ProgramCommittee maxPapers::Integer addedBy::Administrator ;
Reviewer_Role ::= assigned_by::Administrator ;
Track-workshop_chair ::= was_a_track-workshop_chair_of::Conference_part ;
Paid_applicant ::= Late_paid_applicant ;
 Paid_applicant ::= Early_paid_applicant ;
 Paid_applicant ::= Late_paid_applicant | Early_paid_applicant ;
end_date_of_abstract_submission ::= ε ;
Committe_Role ::= assigned_by::Administrator ;
summary_of_reviews ::= is_created_in::activity ;
Co-author ::= co-writePaper::Paper ;
Conference_announcement ::= has_authors::Person has_a_date_of_issue::date ;
Review_Form_Setup ::= ε ;
ConferenceChair ::= memberOfConference::Conference ;
Program_Committee_Chair ::= is_author_of::article performs_activity::activity is_employed_in::institute has_topic_of_interest::topic supervises::activity e-mail::String last_name::String first_name::String ;
Late_paid_applicant ::= ε ;
EEnum ::= (high::ε) | (medium::ε) | (low::ε) | (very high::ε) | (male::ε) | (female::ε) ;
Camera_ready_contribution ::= ε ;
Program_committee ::= was_a_program_committee_of::Conference_volume ;
Contribution_1th-author ::= ε ;
paper_assignment ::= Manual_Paper_Assignment ;
 paper_assignment ::= Automatic_Paper_Assignment ;
 paper_assignment ::= assign_paper::Program_Committee_member is_performed_by::human ;
full_paper_submission_date ::= start_date_of_full_paper_submission ;
 full_paper_submission_date ::= end_date_of_full_paper_submission ;
 full_paper_submission_date ::= start_date_of_full_paper_submission | end_date_of_full_paper_submission ;
Registeered_applicant ::= Paid_applicant ;
group_email ::= goes_through::activity is_sent_to::human is_created_in::activity structure_created_by::human has_author::human gives_classification::classification ;
Full_Paper ::= full_paper_size::Integer has_author::human hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
upper_tier_reviewing_process ::= is_performed_by::human ;
reviewing_proces ::= lower_tier_reviewing_process ;
 reviewing_proces ::= upper_tier_reviewing_process ;
 reviewing_proces ::= lower_tier_reviewing_process | upper_tier_reviewing_process ;
Manual_Paper_Assignment ::= (manually_assign_paper::Program_Committee_member)+ ;
Written_contribution ::= Submitted_contribution ;
 Written_contribution ::= Regular_contribution ;
 Written_contribution ::= Submitted_contribution | Regular_contribution ;
Conference_contributor ::= Regular_author ;
 Conference_contributor ::= Invited_speaker ;
 Conference_contributor ::= Active_conference_participant ;
 Conference_contributor ::= Regular_author | Invited_speaker ;
Event_Setup ::= Paper_Typologies ;
 Event_Setup ::= Review_Form ;
 Event_Setup ::= Submission_Template ;
 Event_Setup ::= Event_Tracks ;
 Event_Setup ::= Research_Topic ;
 Event_Setup ::= Email_Template ;
 Event_Setup ::= define::Event ;
Corresponding_Author ::= submitPaper::Paper writePaper::Paper ;
Automatic_Paper_Assignment ::= (automatically_assign_paper::Program_Committee_member)+ ;
Undecided_Paper ::= full_paper_size::Integer has_author::human hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Conference_fees ::= ε ;
URL ::= Event_URL ;
 URL ::= Senior_Reviewer_URL ;
 URL ::= Chair_URL ;
 URL ::= Contact_Person_URL ;
 URL ::= Regular_Reviewer_URL ;
 URL ::= Event_URL | Senior_Reviewer_URL | Chair_URL | Contact_Person_URL | Regular_Reviewer_URL ;
Steering_committee ::= was_a_steering_committee_of::Conference_volume ;
AuthorNotReviewer ::= submitPaper::Paper writePaper::Paper ;
Meta-Reviewer ::= invites_co-reviewers::Reviewer invited_by::Reviewer (has_a_review_reference_or_expertise::Thing)+ assignedByAdministrator::Administrator adjustBid::Bid readPaper::Paper hasBeenAssigned::Paper writeReview::Review assignExternalReviewer::ExternalReviewer ;
ProgramCommitteeChair ::= endReview::Review ;
review_form ::= is_created_in::activity ;
Early_paid_applicant ::= ε ;
Review_Form ::= Preview ;
 Review_Form ::= Review_Form_Setup ;
 Review_Form ::= Preview | Review_Form_Setup ;
Call_for_participation ::= has_authors::Person has_a_date_of_issue::date ;
Active_conference_participant ::= gives_presentations::Presentation ;
Short_Paper ::= full_paper_size::Integer has_author::human hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
notification_email ::= acceptance_notification_email ;
 notification_email ::= rejection_notification_email ;
 notification_email ::= acceptance_notification_email | rejection_notification_email ;
Notification_Email ::= ε ;
Passive_conference_participant ::= ε ;
Extended_abstract ::= Abstract ;
Senior_Program_Committee_member ::= supervises::activity ;
Senior_Reviewer_URL ::= ε ;
Co-chair ::= was_a_committe_co-chair_of::Committee ;
date_of_notification ::= ε ;
phase_of_conference ::= ε ;
Conference_applicant ::= Registeered_applicant ;
AssociatedChair ::= memberOfConference::Conference ;
rejection_notification_email ::= ε ;
Organizing_committee ::= was_an_organizing_committee_of::Conference_volume ;
Conference_document ::= Conference_contribution ;
 Conference_document ::= Information_for_participants ;
 Conference_document ::= Call_for_paper ;
 Conference_document ::= Conference_announcement ;
 Conference_document ::= Call_for_participation ;
 Conference_document ::= Conference_www ;
 Conference_document ::= has_authors::Person has_a_date_of_issue::date ;
Contribution_co-author ::= ε ;
PaperFullVersion ::= full_paper_size::Integer has_author::human hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Committee_member ::= Co-chair ;
 Committee_member ::= Chair ;
 Committee_member ::= was_a_member_of::Committee ;
SubjectArea ::= ε ;
Reviewed_contribution ::= Accepted_contribution ;
 Reviewed_contribution ::= Rejected_contribution ;
 Reviewed_contribution ::= has_a_review::Review ;
Program_Committee_member ::= Senior_Program_Committee_member ;
 Program_Committee_member ::= Regular_Program_Committee_member ;
 Program_Committee_member ::= Senior_Program_Committee_member | Regular_Program_Committee_member ;
Chair_URL ::= ε ;
end_date_of_full_paper_submission ::= ε ;
date_of_conference ::= start_date_of_conference ;
 date_of_conference ::= end_date_of_conference ;
 date_of_conference ::= start_date_of_conference | end_date_of_conference ;
Conference_contribution ::= Poster ;
 Conference_contribution ::= Written_contribution ;
 Conference_contribution ::= Presentation ;
 Conference_contribution ::= is_submitted_at::Conference_volume ;
acceptance_notification_email ::= ε ;
start_date_of_conference ::= ε ;
Conference_participant ::= Passive_conference_participant ;
 Conference_participant ::= Active_conference_participant ;
Regular_author ::= Contribution_1th-author ;
 Regular_author ::= Contribution_co-author ;
 Regular_author ::= Contribution_1th-author | Contribution_co-author ;
PaperAbstract ::= full_paper_size::Integer has_author::human hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Author_Role ::= assigned_by::Administrator ;
Paper_Typologies ::= define::Event ;
bidding_of_reviewer ::= is_performed_by::human ;
Information_for_participants ::= has_authors::Person has_a_date_of_issue::date ;
Rejection_Email ::= ε ;
Admin_Role ::= assigned_by::Administrator ;
Contact_Person_URL ::= ε ;
abstract_submission_date ::= end_date_of_abstract_submission ;
 abstract_submission_date ::= start_date_of_abstract_submission ;
 abstract_submission_date ::= end_date_of_abstract_submission | start_date_of_abstract_submission ;
Event_Creation ::= (has_result::Thing)+ sent_by::Person ;
abstract_of_paper ::= goes_through::activity is_sent_to::human is_created_in::activity structure_created_by::human has_author::human gives_classification::classification ;
Approval_Email ::= confirm::Event ;
Meta-Review ::= reviews::Reviewed_contribution gives_classification::classification is_created_in::activity writtenBy::Reviewer ;
Group_Email ::= ε ;
lower_tier_reviewing_process ::= ε ;
Invited_speaker ::= ε ;
Regular_Program_Committee_member ::= ε ;
conference_setup ::= sets_member::human is_made_by::human includes_topic::topic sets_date::date sets_URL::URL ;
Regular_Reviewer_URL ::= ε ;
end_date_of_conference ::= ε ;
managing_of_conference_process ::= is_followed_by::activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human ;
Conference_part ::= Track ;
 Conference_part ::= Tutorial ;
 Conference_part ::= Workshop ;
 Conference_part ::= has_a_track-workshop-tutorial_topic::Topic is_part_of_conference_volumes::Conference_volume has_a_track-workshop-tutorial_chair::Track-workshop_chair ;
Call_for_paper ::= has_authors::Person has_a_date_of_issue::date ;
Contact_Person ::= is_author_of::article performs_activity::activity is_employed_in::institute has_topic_of_interest::topic supervises::activity e-mail::String last_name::String first_name::String ;
Conference_www ::= has_a_URL::String ;
Rejected_contribution ::= has_a_review::Review ;
Help_Request ::= Misc ;
 Help_Request ::= Feature_Request ;
 Help_Request ::= Assistance ;
 Help_Request ::= Misc | Feature_Request | Assistance ;
Invited_talk ::= is_given_by::Active_conference_participant ;
ExternalReviewer ::= assignedByReviewer::Reviewer ;
Event_Tracks ::= define::Event ;
Submission_Template ::= define::Event ;
Rejected_Paper ::= full_paper_size::Integer has_author::human hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Research_Topic ::= define::Event ;
Review_expertise ::= has_a_submitted_contribution::Submitted_contribution has_an_expertise::EEnum ;
Event_URL ::= concerned::Event ;
Event_Approval ::= (has_result::Thing)+ sent_by::Person ;
Important_dates ::= is_an_abstract_submission_date::date is_a_full_paper_submission_date::date is_an_ending_date::date is_a_date_of_acceptance_announcement::date is_a_date_of_camera_ready_paper_submission::date is_a_starting_date::date belong_to_a_conference_volume::Conference_volume ;
Accepted_contribution ::= Camera_ready_contribution ;
Invited_Paper ::= full_paper_size::Integer has_author::human hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Feature_Request ::= ε ;
Review_preference ::= (has_a_topic_or_a_submission_contribution::Thing)+ has_a_degree::Integer ;
--------------------metamodels::crs_dr.owl.bgf--------------------
Email_Template ::= define::Event ;
Reviewing_results_event ::= follows::Administrative_event parallel_with::Administrative_event ;
start_date_of_camera-ready_submission ::= ε ;
Conference_proceedings ::= has_an_ISBN::String has_a_publisher::Publisher has_a_volume::Integer ;
Science_Worker ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person send::Activity added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String hasConflictOfInterest::Document email::String ;
ConferenceMember ::= Reviewer ;
 ConferenceMember ::= ConferenceChair ;
 ConferenceMember ::= AssociatedChair ;
 ConferenceMember ::= Author ;
 ConferenceMember ::= ProgramCommitteeMember ;
 ConferenceMember ::= Chairman ;
 ConferenceMember ::= memberOfConference::Conference ;
Accepted_Paper ::= full_paper_size::Integer has_author::human ;
Submitted_contribution ::= Reviewed_contribution ;
 Submitted_contribution ::= has_a_review_expertise::Review_expertise ;
Regular_contribution ::= Extended_abstract ;
 Regular_contribution ::= Paper ;
pc_meeting ::= has_startdate::dateTime has_enddate::dateTime ;
Track-workshop_chair ::= was_a_track-workshop_chair_of::Conference_part ;
Working_event ::= Workshop ;
 Working_event ::= Tutorial ;
 Working_event ::= hasTopic::Topic hasAdministrativeEvent::Administrative_event ;
summary_of_reviews ::= is_created_in::activity ;
Co-author ::= co-writePaper::Paper ;
Short_paper ::= writtenBy::Author dealsWith::Topic remark::String abstract::String contactEmail::String hasKeyword::String hasTitle::String ;
ConferenceChair ::= memberOfConference::Conference ;
Late_paid_applicant ::= ε ;
EEnum ::= (high::ε) | (medium::ε) | (low::ε) | (very high::ε) | (male::ε) | (female::ε) ;
Camera_Ready_event ::= follows::Administrative_event parallel_with::Administrative_event ;
Registeered_applicant ::= Paid_applicant ;
group_email ::= article_written_by::author has_reviewer::reviewer has_abstract::abstract goes_through::activity is_sent_to::human is_created_in::activity structure_created_by::human has_author::human gives_classification::classification ;
Full_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
upper_tier_reviewing_process ::= is_performed_by::human ;
reviewing_proces ::= lower_tier_reviewing_process ;
 reviewing_proces ::= upper_tier_reviewing_process ;
 reviewing_proces ::= lower_tier_reviewing_process | upper_tier_reviewing_process ;
Manual_Paper_Assignment ::= (manually_assign_paper::Program_Committee_member)+ ;
Conference_fees ::= ε ;
Chair_PC ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person send::Activity added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String hasConflictOfInterest::Document email::String ;
Meta-Reviewer ::= invites_co-reviewers::Reviewer invited_by::Reviewer (has_a_review_reference_or_expertise::Thing)+ assignedByAdministrator::Administrator adjustBid::Bid readPaper::Paper hasBeenAssigned::Paper writeReview::Review assignExternalReviewer::ExternalReviewer ;
ProgramCommitteeChair ::= endReview::Review ;
Early_paid_applicant ::= ε ;
Call_for_participation ::= has_authors::Person has_a_date_of_issue::date ;
Active_conference_participant ::= gives_presentations::Presentation ;
Short_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Passive_conference_participant ::= ε ;
Senior_Reviewer_URL ::= ε ;
date_of_notification ::= ε ;
phase_of_conference ::= ε ;
Conference_applicant ::= Registeered_applicant ;
Organizing_committee ::= was_an_organizing_committee_of::Conference_volume ;
Conference_document ::= Conference_contribution ;
 Conference_document ::= Information_for_participants ;
 Conference_document ::= Call_for_paper ;
 Conference_document ::= Conference_announcement ;
 Conference_document ::= Call_for_participation ;
 Conference_document ::= Conference_www ;
 Conference_document ::= Review ;
 Conference_document ::= has_authors::Person has_a_date_of_issue::date ;
Registration_of_participants_event ::= follows::Administrative_event parallel_with::Administrative_event ;
Contribution_co-author ::= ε ;
Committee_member ::= Co-chair ;
 Committee_member ::= Chair ;
 Committee_member ::= was_a_member_of::Committee ;
SubjectArea ::= ε ;
Chair_URL ::= ε ;
date_of_conference ::= start_date_of_conference ;
 date_of_conference ::= end_date_of_conference ;
 date_of_conference ::= start_date_of_conference | end_date_of_conference ;
start_date_of_conference ::= ε ;
Conference_participant ::= Passive_conference_participant ;
 Conference_participant ::= Active_conference_participant ;
Regular_author ::= Contribution_1th-author ;
 Regular_author ::= Contribution_co-author ;
 Regular_author ::= Contribution_1th-author | Contribution_co-author ;
PaperAbstract ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Author_Role ::= assigned_by::Administrator ;
bidding_of_reviewer ::= is_performed_by::human ;
Rejection_Email ::= ε ;
Admin_Role ::= assigned_by::Administrator ;
abstract_submission_date ::= end_date_of_abstract_submission ;
 abstract_submission_date ::= start_date_of_abstract_submission ;
 abstract_submission_date ::= end_date_of_abstract_submission | start_date_of_abstract_submission ;
abstract_of_paper ::= article_written_by::author has_reviewer::reviewer has_abstract::abstract goes_through::activity is_sent_to::human is_created_in::activity structure_created_by::human has_author::human gives_classification::classification ;
Approval_Email ::= confirm::Event ;
Group_Email ::= ε ;
lower_tier_reviewing_process ::= ε ;
Regular_Program_Committee_member ::= ε ;
conference_setup ::= sets_member::human is_made_by::human includes_topic::topic sets_date::date sets_URL::URL ;
Member_PC ::= expertOn::Topic reviewes::Contribution ;
end_date_of_conference ::= ε ;
Contact_Person ::= is_author_of::article performs_activity::activity is_employed_in::institute has_topic_of_interest::topic supervises::activity e-mail::String last_name::String first_name::String ;
Help_Request ::= Misc ;
 Help_Request ::= Feature_Request ;
 Help_Request ::= Assistance ;
 Help_Request ::= Misc | Feature_Request | Assistance ;
Rejected_Paper ::= full_paper_size::Integer has_author::human ;
Research_Topic ::= define::Event ;
Event_Approval ::= (has_result::Thing)+ sent_by::Person ;
Accepted_contribution ::= Camera_ready_contribution ;
Invited_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Reviewing_event ::= follows::Administrative_event parallel_with::Administrative_event ;
Conference_volume ::= has_parts::Conference_part has_workshops::Workshop has_tracks::Track has_tutorials::Tutorial has_a_commtitee::Committee has_a_steering_committee::Steering_committee has_an_organizing_committee::Organizing_committee has_important_dates::Important_dates has_contributions::Conference_contribution has_a_location::String has_a_program_committee::Program_committee ;
camera-ready_submission_date ::= start_date_of_camera-ready_submission ;
 camera-ready_submission_date ::= end_date_of_camera-ready_submission ;
 camera-ready_submission_date ::= start_date_of_camera-ready_submission | end_date_of_camera-ready_submission ;
submission_process ::= is_performed_by::human ;
start_date_of_full_paper_submission ::= ε ;
ProgramCommittee ::= hasProgramCommitteeMember::ProgramCommitteeMember ;
start_date_of_abstract_submission ::= ε ;
end_date_of_camera-ready_submission ::= ε ;
Head_Role ::= assigned_by::Administrator ;
ProgramCommitteeMember ::= ProgramCommitteeChair ;
 ProgramCommitteeMember ::= memberOfProgramCommittee::ProgramCommittee maxPapers::Integer addedBy::Administrator ;
Reviewer_Role ::= assigned_by::Administrator ;
Paid_applicant ::= Late_paid_applicant ;
 Paid_applicant ::= Early_paid_applicant ;
 Paid_applicant ::= Late_paid_applicant | Early_paid_applicant ;
end_date_of_abstract_submission ::= ε ;
Committe_Role ::= assigned_by::Administrator ;
Conference_announcement ::= has_authors::Person has_a_date_of_issue::date ;
Administrative_event ::= Reviewing_results_event ;
 Administrative_event ::= Reviewing_event ;
 Administrative_event ::= Registration_of_participants_event ;
 Administrative_event ::= Submission_event ;
 Administrative_event ::= Camera_Ready_event ;
 Administrative_event ::= follows::Administrative_event parallel_with::Administrative_event ;
Review_Form_Setup ::= ε ;
Program_Committee_Chair ::= is_author_of::article performs_activity::activity is_employed_in::institute has_topic_of_interest::topic supervises::activity e-mail::String last_name::String first_name::String ;
Social_event ::= Trip ;
 Social_event ::= Banquet ;
 Social_event ::= Reception ;
 Social_event ::= Trip | Banquet | Reception ;
Camera_ready_contribution ::= ε ;
Program_committee ::= was_a_program_committee_of::Conference_volume ;
Contribution_1th-author ::= ε ;
paper_assignment ::= Manual_Paper_Assignment ;
 paper_assignment ::= Automatic_Paper_Assignment ;
 paper_assignment ::= assign_paper::Program_Committee_member is_performed_by::human ;
full_paper_submission_date ::= start_date_of_full_paper_submission ;
 full_paper_submission_date ::= end_date_of_full_paper_submission ;
 full_paper_submission_date ::= start_date_of_full_paper_submission | end_date_of_full_paper_submission ;
Written_contribution ::= Submitted_contribution ;
 Written_contribution ::= Regular_contribution ;
 Written_contribution ::= Submitted_contribution | Regular_contribution ;
Conference_contributor ::= Regular_author ;
 Conference_contributor ::= Invited_speaker ;
 Conference_contributor ::= Active_conference_participant ;
 Conference_contributor ::= Regular_author | Invited_speaker ;
Event_Setup ::= Paper_Typologies ;
 Event_Setup ::= Review_Form ;
 Event_Setup ::= Submission_Template ;
 Event_Setup ::= Event_Tracks ;
 Event_Setup ::= Research_Topic ;
 Event_Setup ::= Email_Template ;
 Event_Setup ::= define::Event ;
Corresponding_Author ::= writes::Contribution submitPaper::Paper writePaper::Paper ;
Automatic_Paper_Assignment ::= (automatically_assign_paper::Program_Committee_member)+ ;
Undecided_Paper ::= full_paper_size::Integer has_author::human ;
Steering_committee ::= was_a_steering_committee_of::Conference_volume ;
URL ::= Event_URL ;
 URL ::= Senior_Reviewer_URL ;
 URL ::= Chair_URL ;
 URL ::= Contact_Person_URL ;
 URL ::= Regular_Reviewer_URL ;
 URL ::= Event_URL | Senior_Reviewer_URL | Chair_URL | Contact_Person_URL | Regular_Reviewer_URL ;
AuthorNotReviewer ::= writes::Contribution submitPaper::Paper writePaper::Paper ;
review_form ::= is_created_in::activity ;
Review_Form ::= Preview ;
 Review_Form ::= Review_Form_Setup ;
 Review_Form ::= Preview | Review_Form_Setup ;
Notification_Email ::= ε ;
notification_email ::= acceptance_notification_email ;
 notification_email ::= rejection_notification_email ;
 notification_email ::= acceptance_notification_email | rejection_notification_email ;
Extended_abstract ::= Abstract ;
Senior_Program_Committee_member ::= supervises::activity ;
Co-chair ::= was_a_committe_co-chair_of::Committee ;
AssociatedChair ::= memberOfConference::Conference ;
rejection_notification_email ::= ε ;
PaperFullVersion ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Reviewed_contribution ::= Accepted_contribution ;
 Reviewed_contribution ::= Rejected_contribution ;
 Reviewed_contribution ::= has_a_review::Review ;
Program_Committee_member ::= Senior_Program_Committee_member ;
 Program_Committee_member ::= Regular_Program_Committee_member ;
 Program_Committee_member ::= Senior_Program_Committee_member | Regular_Program_Committee_member ;
end_date_of_full_paper_submission ::= ε ;
Conference_contribution ::= Poster ;
 Conference_contribution ::= Written_contribution ;
 Conference_contribution ::= Presentation ;
 Conference_contribution ::= is_submitted_at::Conference_volume ;
acceptance_notification_email ::= ε ;
Paper_Typologies ::= define::Event ;
Information_for_participants ::= has_authors::Person has_a_date_of_issue::date ;
Contact_Person_URL ::= ε ;
Event_Creation ::= (has_result::Thing)+ sent_by::Person ;
Meta-Review ::= reviews::Reviewed_contribution writtenBy::Reviewer ;
Invited_speaker ::= ε ;
Regular_Reviewer_URL ::= ε ;
managing_of_conference_process ::= is_followed_by::activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human ;
Conference_part ::= Track ;
 Conference_part ::= Tutorial ;
 Conference_part ::= has_a_track-workshop-tutorial_topic::Topic is_part_of_conference_volumes::Conference_volume has_a_track-workshop-tutorial_chair::Track-workshop_chair ;
Call_for_paper ::= has_authors::Person has_a_date_of_issue::date ;
Conference_www ::= has_a_URL::String ;
Rejected_contribution ::= has_a_review::Review ;
Invited_talk ::= is_given_by::Active_conference_participant ;
ExternalReviewer ::= assignedByReviewer::Reviewer ;
Submission_Template ::= define::Event ;
Event_Tracks ::= define::Event ;
Review_expertise ::= has_a_submitted_contribution::Submitted_contribution has_an_expertise::EEnum ;
Event_URL ::= concerned::Event ;
Important_dates ::= is_an_abstract_submission_date::date is_a_full_paper_submission_date::date is_an_ending_date::date is_a_date_of_acceptance_announcement::date is_a_date_of_camera_ready_paper_submission::date is_a_starting_date::date belong_to_a_conference_volume::Conference_volume ;
Submission_event ::= follows::Administrative_event parallel_with::Administrative_event ;
Feature_Request ::= ε ;
Review_preference ::= (has_a_topic_or_a_submission_contribution::Thing)+ has_a_degree::Integer ;
--------------------metamodels::deployment.bgf--------------------
ExecutionEnvironment ::= (nestedNode::Node)+ name::String ;
CommunicationLink ::= source::Node target::Node name::String ;
--------------------metamodels::edas.owl.bgf--------------------
PerformanceTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Email_Template ::= define::Event ;
Reviewing_results_event ::= follows::Administrative_event parallel_with::Administrative_event ;
start_date_of_camera-ready_submission ::= ε ;
Conference_proceedings ::= has_an_ISBN::String has_a_publisher::Publisher has_a_volume::String ;
BreakEvent ::= CoffeeBreak ;
 BreakEvent ::= FreeTimeBreak ;
 BreakEvent ::= MealBreak ;
 BreakEvent ::= CoffeeBreak | FreeTimeBreak | MealBreak ;
Science_Worker ::= hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person send::Activity added_by::Person attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String ;
AcademiaOrganization ::= isProviderOf::Sponsorship ;
RadioCommunicationsTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
ConferenceMember ::= Reviewer ;
 ConferenceMember ::= ConferenceChair ;
 ConferenceMember ::= AssociatedChair ;
 ConferenceMember ::= ProgramCommitteeMember ;
 ConferenceMember ::= Chairman ;
 ConferenceMember ::= memberOfConference::Conference ;
AccommodationPlace ::= isLocationOf::ConferenceEvent ;
MedicineTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
TwoLevelConference ::= is_in_phase::phase_of_conference has_program::program hasMember::Person hasName::String endDate::dateTime paperDueOn::dateTime registrationDueOn::dateTime manuscriptDueOn::dateTime startDate::dateTime hasCountry::Country hasConferenceMember::ConferenceMember paperAssignmentFinalizedBy::Administrator reviewCriteriaEnteredBy::Administrator paperAssignmentToolsRunBy::Administrator virtualMeetingEnabledBy::Administrator hardcopyMailingManifestsPrintedBy::Administrator detailsEnteredBy::Administrator reviewerBiddingStartedBy::Administrator date::date reviewsPerPaper::Integer logoURL::anyURI acceptsHardcopySubmissions::Boolean siteURL::anyURI ;
SignalProcessingTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Accepted_Paper ::= isWrittenBy::Author (isReviewedBy::Person)+ full_paper_size::Integer has_author::human hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Submitted_contribution ::= Reviewed_contribution ;
 Submitted_contribution ::= has_a_review_expertise::Review_expertise ;
Regular_contribution ::= Extended_abstract ;
SessionChair ::= hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person send::Activity added_by::Person attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String ;
pc_meeting ::= conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator starts_on::String ends_on::String has_startdate::dateTime has_enddate::dateTime ;
Track-workshop_chair ::= was_a_track-workshop_chair_of::Conference_part ;
Working_event ::= Workshop ;
 Working_event ::= Tutorial ;
 Working_event ::= hasTopic::Topic hasAdministrativeEvent::Administrative_event ;
summary_of_reviews ::= is_created_in::activity ;
Co-author ::= co-writePaper::Paper ;
RatedPapers ::= hasRating::ReviewRating ;
Short_paper ::= writtenBy::Author dealsWith::Topic remark::String abstract::String contactEmail::String hasKeyword::String hasTitle::String ;
ConferenceChair ::= memberOfConference::Conference ;
 ConferenceChair ::= hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person send::Activity added_by::Person attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String ;
Late_paid_applicant ::= ε ;
EEnum ::= (male::ε) | (female::ε) | (high::ε) | (medium::ε) | (low::ε) | (very high::ε) ;
AcceptRating ::= ε ;
GovernmentOrganization ::= isProviderOf::Sponsorship ;
Camera_Ready_event ::= follows::Administrative_event parallel_with::Administrative_event ;
CallForManuscripts ::= forEvent::AcademicEvent (isInitiatedBy::Person)+ hasSubmissionInstructions::String hasSubmissionDeadline::dateTime ;
MealMenu ::= isMenuOf::MealEvent ;
ClosingTalk ::= ε ;
Registeered_applicant ::= Paid_applicant ;
MealBreak ::= ε ;
group_email ::= goes_through::activity is_sent_to::human is_created_in::activity structure_created_by::human has_author::human gives_classification::classification article_written_by::Author has_reviewer::Reviewer has_abstract::abstract ;
Full_Paper ::= isWrittenBy::Author (isReviewedBy::Person)+ full_paper_size::Integer has_author::human hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
upper_tier_reviewing_process ::= is_performed_by::human ;
reviewing_proces ::= lower_tier_reviewing_process ;
 reviewing_proces ::= upper_tier_reviewing_process ;
 reviewing_proces ::= lower_tier_reviewing_process | upper_tier_reviewing_process ;
Manual_Paper_Assignment ::= (manually_assign_paper::Program_Committee_member)+ ;
OperatingTopicsystems ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Conference_fees ::= ε ;
ConferenceDinner ::= hasMenu::MealMenu ;
ComputerNetworksEnterpriseTopic ::= ε ;
Chair_PC ::= hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person send::Activity added_by::Person attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String ;
Meta-Reviewer ::= invites_co-reviewers::Reviewer invited_by::Reviewer (has_a_review_reference_or_expertise::Thing)+ writes_review::Review hasReviewHistory::PersonalReviewHistory assignedByAdministrator::Administrator adjustBid::Bid readPaper::Paper hasBeenAssigned::Paper writeReview::Review assignExternalReviewer::ExternalReviewer ;
ProgramCommitteeChair ::= endReview::Review ;
Early_paid_applicant ::= ε ;
Call_for_participation ::= has_authors::Person has_a_date_of_issue::date ;
Active_conference_participant ::= gives_presentations::Presentation ;
Short_Paper ::= isWrittenBy::Author (isReviewedBy::Person)+ full_paper_size::Integer has_author::human hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
SatelliteAndSpaceCommunicationsTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Passive_conference_participant ::= ε ;
Senior_Reviewer_URL ::= ε ;
date_of_notification ::= ε ;
TPCMember ::= hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person send::Activity added_by::Person attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String ;
phase_of_conference ::= ε ;
Conference_applicant ::= Registeered_applicant ;
ConferenceEvent ::= NonAcademicEvent ;
 ConferenceEvent ::= AcademicEvent ;
 ConferenceEvent ::= hasAttendee::Person hasLocation::Place hasProgramme::Programme hasEndDateTime::dateTime hasStartDateTime::dateTime ;
Organizing_committee ::= was_an_organizing_committee_of::Conference_volume ;
Conference_document ::= Conference_contribution ;
 Conference_document ::= Information_for_participants ;
 Conference_document ::= Call_for_paper ;
 Conference_document ::= Conference_announcement ;
 Conference_document ::= Call_for_participation ;
 Conference_document ::= Conference_www ;
 Conference_document ::= has_authors::Person has_a_date_of_issue::date ;
MobileComputingTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Registration_of_participants_event ::= follows::Administrative_event parallel_with::Administrative_event ;
Contribution_co-author ::= ε ;
Committee_member ::= Co-chair ;
 Committee_member ::= Chair ;
 Committee_member ::= was_a_member_of::Committee ;
ConferenceSession ::= ε ;
SubjectArea ::= ε ;
ComputerNetworksMeasurementsTopic ::= ε ;
NGO ::= isProviderOf::Sponsorship ;
Chair_URL ::= ε ;
CommunicationTheoryTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
AcademicEvent ::= TalkEvent ;
 AcademicEvent ::= OrganizationalMeeting ;
 AcademicEvent ::= PaperPresentation ;
 AcademicEvent ::= hasCall::Call ;
date_of_conference ::= start_date_of_conference ;
 date_of_conference ::= end_date_of_conference ;
 date_of_conference ::= start_date_of_conference | end_date_of_conference ;
CallForPapers ::= forEvent::AcademicEvent (isInitiatedBy::Person)+ hasSubmissionInstructions::String hasSubmissionDeadline::dateTime ;
CommunicationsTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
start_date_of_conference ::= ε ;
Conference_participant ::= Passive_conference_participant ;
 Conference_participant ::= Active_conference_participant ;
SecurityTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
ComputerNetworksTopic ::= ComputerNetworksEnterpriseTopic ;
 ComputerNetworksTopic ::= ComputerNetworksSwitchingTopic ;
 ComputerNetworksTopic ::= ComputerNetworksSensorTopic ;
 ComputerNetworksTopic ::= ComputerNetworksSecurityTopic ;
 ComputerNetworksTopic ::= ComputerNetworksOpticalTopic ;
 ComputerNetworksTopic ::= ComputerNetworksMeasurementsTopic ;
 ComputerNetworksTopic ::= ComputerNetworksManagementTopic ;
 ComputerNetworksTopic ::= ComputerNetworksAapplicationsTopic ;
 ComputerNetworksTopic ::= ComputerNetworksEnterpriseTopic | ComputerNetworksSwitchingTopic | ComputerNetworksSensorTopic | ComputerNetworksSecurityTopic | ComputerNetworksOpticalTopic | ComputerNetworksMeasurementsTopic | ComputerNetworksManagementTopic | ComputerNetworksAapplicationsTopic ;
DiningPlace ::= isLocationOf::ConferenceEvent ;
Regular_author ::= Contribution_1th-author ;
 Regular_author ::= Contribution_co-author ;
 Regular_author ::= Contribution_1th-author | Contribution_co-author ;
PaperAbstract ::= isWrittenBy::Author (isReviewedBy::Person)+ full_paper_size::Integer has_author::human hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Author_Role ::= assigned_by::Administrator ;
bidding_of_reviewer ::= is_performed_by::human ;
PaperPresentation ::= relatedToPaper::AcceptedPaper ;
Rejection_Email ::= ε ;
Admin_Role ::= assigned_by::Administrator ;
abstract_submission_date ::= end_date_of_abstract_submission ;
 abstract_submission_date ::= start_date_of_abstract_submission ;
 abstract_submission_date ::= end_date_of_abstract_submission | start_date_of_abstract_submission ;
ComputerArchitectureTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
abstract_of_paper ::= goes_through::activity is_sent_to::human is_created_in::activity structure_created_by::human has_author::human gives_classification::classification article_written_by::Author has_reviewer::Reviewer has_abstract::abstract ;
Approval_Email ::= confirm::Event ;
AntennasTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
OrganizationalMeeting ::= hasCall::Call ;
PersonalReviewHistory ::= isReviewHistoryOf::Reviewer ;
MicroelectronicsTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Group_Email ::= ε ;
lower_tier_reviewing_process ::= ε ;
Regular_Program_Committee_member ::= ε ;
conference_setup ::= sets_member::human is_made_by::human includes_topic::topic sets_date::date sets_URL::URL ;
Member_PC ::= expertOn::Topic reviewes::Contribution ;
ComputerNetworksOpticalTopic ::= ε ;
end_date_of_conference ::= ε ;
Contact_Person ::= is_author_of::article performs_activity::activity is_employed_in::institute has_topic_of_interest::topic supervises::activity e-mail::String last_name::String first_name::String ;
AccpetIfRoomRating ::= ε ;
Help_Request ::= Misc ;
 Help_Request ::= Feature_Request ;
 Help_Request ::= Assistance ;
 Help_Request ::= Misc | Feature_Request | Assistance ;
RejectedPaper ::= isWrittenBy::Author (isReviewedBy::Person)+ full_paper_size::Integer has_author::human hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
ParallelAndDistributedComputingTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Rejected_Paper ::= isWrittenBy::Author (isReviewedBy::Person)+ full_paper_size::Integer has_author::human hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Research_Topic ::= define::Event ;
Event_Approval ::= (has_result::Thing)+ sent_by::Person ;
Accepted_contribution ::= Camera_ready_contribution ;
Invited_Paper ::= isWrittenBy::Author (isReviewedBy::Person)+ full_paper_size::Integer has_author::human hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Reviewing_event ::= follows::Administrative_event parallel_with::Administrative_event ;
MultimediaTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
CryptographyTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
ReviewQuestion ::= TextualReviewQuestion ;
 ReviewQuestion ::= NumericalReviewQuestion ;
 ReviewQuestion ::= TextualReviewQuestion | NumericalReviewQuestion ;
Conference_volume ::= has_parts::Conference_part has_workshops::Workshop has_tracks::Track has_tutorials::Tutorial has_a_commtitee::Committee has_a_steering_committee::Steering_committee has_an_organizing_committee::Organizing_committee has_important_dates::Important_dates has_contributions::Conference_contribution has_a_location::String has_a_program_committee::Program_committee ;
camera-ready_submission_date ::= start_date_of_camera-ready_submission ;
 camera-ready_submission_date ::= end_date_of_camera-ready_submission ;
 camera-ready_submission_date ::= start_date_of_camera-ready_submission | end_date_of_camera-ready_submission ;
submission_process ::= is_performed_by::human ;
start_date_of_full_paper_submission ::= ε ;
ProgramCommittee ::= hasProgramCommitteeMember::ProgramCommitteeMember ;
MealEvent ::= ConferenceDinner ;
 MealEvent ::= hasMenu::MealMenu ;
start_date_of_abstract_submission ::= ε ;
end_date_of_camera-ready_submission ::= ε ;
Head_Role ::= assigned_by::Administrator ;
CoffeeBreak ::= ε ;
ProgramCommitteeMember ::= ProgramCommitteeChair ;
 ProgramCommitteeMember ::= memberOfProgramCommittee::ProgramCommittee maxPapers::Integer addedBy::Administrator ;
Reviewer_Role ::= assigned_by::Administrator ;
Paid_applicant ::= Late_paid_applicant ;
 Paid_applicant ::= Early_paid_applicant ;
 Paid_applicant ::= Late_paid_applicant | Early_paid_applicant ;
end_date_of_abstract_submission ::= ε ;
Committe_Role ::= assigned_by::Administrator ;
Conference_announcement ::= has_authors::Person has_a_date_of_issue::date ;
Administrative_event ::= Reviewing_results_event ;
 Administrative_event ::= Reviewing_event ;
 Administrative_event ::= Registration_of_participants_event ;
 Administrative_event ::= Submission_event ;
 Administrative_event ::= Camera_Ready_event ;
 Administrative_event ::= follows::Administrative_event parallel_with::Administrative_event ;
Review_Form_Setup ::= ε ;
WithdrawnPaper ::= isWrittenBy::Author (isReviewedBy::Person)+ full_paper_size::Integer has_author::human hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Program_Committee_Chair ::= is_author_of::article performs_activity::activity is_employed_in::institute has_topic_of_interest::topic supervises::activity e-mail::String last_name::String first_name::String ;
Social_event ::= Trip ;
 Social_event ::= Banquet ;
 Social_event ::= Reception ;
 Social_event ::= Trip | Banquet | Reception ;
Camera_ready_contribution ::= ε ;
Program_committee ::= was_a_program_committee_of::Conference_volume ;
Contribution_1th-author ::= ε ;
paper_assignment ::= Manual_Paper_Assignment ;
 paper_assignment ::= Automatic_Paper_Assignment ;
 paper_assignment ::= assign_paper::Program_Committee_member is_performed_by::human ;
PublishedPaper ::= isWrittenBy::Author (isReviewedBy::Person)+ full_paper_size::Integer has_author::human hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
full_paper_submission_date ::= start_date_of_full_paper_submission ;
 full_paper_submission_date ::= end_date_of_full_paper_submission ;
 full_paper_submission_date ::= start_date_of_full_paper_submission | end_date_of_full_paper_submission ;
ReviewForm ::= ε ;
Written_contribution ::= Submitted_contribution ;
 Written_contribution ::= Regular_contribution ;
 Written_contribution ::= Submitted_contribution | Regular_contribution ;
Conference_contributor ::= Regular_author ;
 Conference_contributor ::= Invited_speaker ;
 Conference_contributor ::= Active_conference_participant ;
 Conference_contributor ::= Regular_author | Invited_speaker ;
Event_Setup ::= Paper_Typologies ;
 Event_Setup ::= Review_Form ;
 Event_Setup ::= Submission_Template ;
 Event_Setup ::= Event_Tracks ;
 Event_Setup ::= Research_Topic ;
 Event_Setup ::= Email_Template ;
 Event_Setup ::= define::Event ;
Corresponding_Author ::= submitPaper::Paper writePaper::Paper writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper ;
NumericalReviewQuestion ::= ε ;
PendingPaper ::= isWrittenBy::Author (isReviewedBy::Person)+ full_paper_size::Integer has_author::human hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Automatic_Paper_Assignment ::= (automatically_assign_paper::Program_Committee_member)+ ;
PowerlineTransmissionTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
IndustryOrganization ::= isProviderOf::Sponsorship ;
TestOnlyTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
WeekRejectRating ::= ε ;
Undecided_Paper ::= isWrittenBy::Author (isReviewedBy::Person)+ full_paper_size::Integer has_author::human hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
ComputerNetworksSecurityTopic ::= ε ;
URL ::= Event_URL ;
 URL ::= Senior_Reviewer_URL ;
 URL ::= Chair_URL ;
 URL ::= Contact_Person_URL ;
 URL ::= Regular_Reviewer_URL ;
 URL ::= Event_URL | Senior_Reviewer_URL | Chair_URL | Contact_Person_URL | Regular_Reviewer_URL ;
Steering_committee ::= was_a_steering_committee_of::Conference_volume ;
AuthorNotReviewer ::= submitPaper::Paper writePaper::Paper writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper ;
review_form ::= is_created_in::activity ;
Review_Form ::= Preview ;
 Review_Form ::= Review_Form_Setup ;
 Review_Form ::= Preview | Review_Form_Setup ;
PersonalPublicationHistory ::= ε ;
Notification_Email ::= ε ;
notification_email ::= acceptance_notification_email ;
 notification_email ::= rejection_notification_email ;
 notification_email ::= acceptance_notification_email | rejection_notification_email ;
Extended_abstract ::= Abstract ;
Senior_Program_Committee_member ::= supervises::activity ;
Co-chair ::= was_a_committe_co-chair_of::Committee ;
AssociatedChair ::= memberOfConference::Conference ;
rejection_notification_email ::= ε ;
PaperFullVersion ::= isWrittenBy::Author (isReviewedBy::Person)+ full_paper_size::Integer has_author::human hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
RejectRating ::= ε ;
SingleLevelConference ::= is_in_phase::phase_of_conference has_program::program hasMember::Person hasName::String endDate::dateTime paperDueOn::dateTime registrationDueOn::dateTime manuscriptDueOn::dateTime startDate::dateTime hasCountry::Country hasConferenceMember::ConferenceMember paperAssignmentFinalizedBy::Administrator reviewCriteriaEnteredBy::Administrator paperAssignmentToolsRunBy::Administrator virtualMeetingEnabledBy::Administrator hardcopyMailingManifestsPrintedBy::Administrator detailsEnteredBy::Administrator reviewerBiddingStartedBy::Administrator date::date reviewsPerPaper::Integer logoURL::anyURI acceptsHardcopySubmissions::Boolean siteURL::anyURI ;
Reviewed_contribution ::= Accepted_contribution ;
 Reviewed_contribution ::= Rejected_contribution ;
 Reviewed_contribution ::= has_a_review::Review ;
Program_Committee_member ::= Senior_Program_Committee_member ;
 Program_Committee_member ::= Regular_Program_Committee_member ;
 Program_Committee_member ::= Senior_Program_Committee_member | Regular_Program_Committee_member ;
ReviewRating ::= WeekRejectRating ;
 ReviewRating ::= AcceptRating ;
 ReviewRating ::= AccpetIfRoomRating ;
 ReviewRating ::= RejectRating ;
 ReviewRating ::= WeekRejectRating | AcceptRating | AccpetIfRoomRating | RejectRating ;
ConferenceVenuePlace ::= isLocationOf::ConferenceEvent ;
WirelessCommunicationsTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
end_date_of_full_paper_submission ::= ε ;
Conference_contribution ::= Poster ;
 Conference_contribution ::= Written_contribution ;
 Conference_contribution ::= Presentation ;
 Conference_contribution ::= is_submitted_at::Conference_volume ;
TextualReviewQuestion ::= ε ;
CallForReviews ::= forEvent::AcademicEvent (isInitiatedBy::Person)+ hasSubmissionInstructions::String hasSubmissionDeadline::dateTime ;
acceptance_notification_email ::= ε ;
TalkEvent ::= ClosingTalk ;
 TalkEvent ::= WelcomeTalk ;
 TalkEvent ::= ClosingTalk | WelcomeTalk ;
ComputerNetworksManagementTopic ::= ε ;
Paper_Typologies ::= define::Event ;
CADTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Information_for_participants ::= has_authors::Person has_a_date_of_issue::date ;
NonAcademicEvent ::= MealEvent ;
 NonAcademicEvent ::= BreakEvent ;
 NonAcademicEvent ::= SocialEvent ;
 NonAcademicEvent ::= MealEvent | BreakEvent | SocialEvent ;
Contact_Person_URL ::= ε ;
Event_Creation ::= (has_result::Thing)+ sent_by::Person ;
ComputerNetworksSwitchingTopic ::= ε ;
Meta-Review ::= writtenBy::Reviewer reviews::Reviewed_contribution gives_classification::classification is_created_in::activity review_written_by::Reviewer ;
Invited_speaker ::= ε ;
Regular_Reviewer_URL ::= ε ;
managing_of_conference_process ::= is_followed_by::activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human ;
Conference_part ::= Track ;
 Conference_part ::= Tutorial ;
 Conference_part ::= has_a_track-workshop-tutorial_topic::Topic is_part_of_conference_volumes::Conference_volume has_a_track-workshop-tutorial_chair::Track-workshop_chair ;
ComputerNetworksSensorTopic ::= ε ;
Call_for_paper ::= has_authors::Person has_a_date_of_issue::date ;
PersonalHistory ::= PersonalPublicationHistory ;
 PersonalHistory ::= PersonalReviewHistory ;
 PersonalHistory ::= PersonalPublicationHistory | PersonalReviewHistory ;
Conference_www ::= has_a_URL::String ;
MeetingRoomPlace ::= isLocationOf::ConferenceEvent ;
SlideSet ::= (relatesTo::Thing)+ recieved_by::User used_by::Person submited__by::User ;
Rejected_contribution ::= has_a_review::Review ;
Invited_talk ::= is_given_by::Active_conference_participant ;
ExternalReviewer ::= assignedByReviewer::Reviewer ;
WelcomeTalk ::= ε ;
SocialEvent ::= Excursion ;
 SocialEvent ::= Reception ;
 SocialEvent ::= Excursion | Reception ;
Event_Tracks ::= define::Event ;
Submission_Template ::= define::Event ;
ContactInformation ::= hasCity::String hasStreet::String hasPostalCode::String hasPhone::String ;
ComputerNetworksAapplicationsTopic ::= ε ;
Review_expertise ::= has_a_submitted_contribution::Submitted_contribution has_an_expertise::EEnum ;
Event_URL ::= concerned::Event ;
Important_dates ::= is_an_abstract_submission_date::date is_a_full_paper_submission_date::date is_an_ending_date::date is_a_date_of_acceptance_announcement::date is_a_date_of_camera_ready_paper_submission::date is_a_starting_date::date belong_to_a_conference_volume::Conference_volume ;
Submission_event ::= follows::Administrative_event parallel_with::Administrative_event ;
FreeTimeBreak ::= ε ;
ActivePaper ::= RatedPapers ;
 ActivePaper ::= hasRating::ReviewRating ;
Feature_Request ::= ε ;
AcceptedPaper ::= relatedToEvent::PaperPresentation ;
TravelGrant ::= providedBy::Organization hasCostCurrency::String hasCostAmount::Integer ;
Review_preference ::= (has_a_topic_or_a_submission_contribution::Thing)+ has_a_degree::Integer ;
--------------------metamodels::ekaw.owl.bgf--------------------
Email_Template ::= define::Event ;
Proceedings_Publisher ::= (publisherOf::Thing)+ technicallyOrganises::Thing ;
start_date_of_camera-ready_submission ::= ε ;
Conference_proceedings ::= has_an_ISBN::String has_a_publisher::Publisher has_a_volume::String ;
Invited_Speaker ::= ε ;
Science_Worker ::= attendeeAt::ConferenceEvent isMemberOf::conference hasFirstName::String hasBiography::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person send::Activity added_by::Person ;
RadioCommunicationsTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
AccommodationPlace ::= isLocationOf::ConferenceEvent ;
SignalProcessingTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
TwoLevelConference ::= is_in_phase::phase_of_conference hasMember::Person hasName::String endDate::dateTime paperDueOn::dateTime registrationDueOn::dateTime manuscriptDueOn::dateTime startDate::dateTime hasCountry::Country hasConferenceMember::ConferenceMember paperAssignmentFinalizedBy::Administrator reviewCriteriaEnteredBy::Administrator paperAssignmentToolsRunBy::Administrator virtualMeetingEnabledBy::Administrator hardcopyMailingManifestsPrintedBy::Administrator detailsEnteredBy::Administrator reviewerBiddingStartedBy::Administrator date::date reviewsPerPaper::Integer logoURL::anyURI acceptsHardcopySubmissions::Boolean siteURL::anyURI has_program::program ;
Regular_contribution ::= Extended_abstract ;
pc_meeting ::= (eventOnList::Thing)+ partOfEvent::Event hasEvent::Event (organisedBy::Thing)+ heldIn::Location conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator starts_on::String ends_on::String has_startdate::dateTime has_enddate::dateTime ;
SessionChair ::= attendeeAt::ConferenceEvent isMemberOf::conference hasFirstName::String hasBiography::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person send::Activity added_by::Person ;
Working_event ::= Workshop ;
 Working_event ::= Tutorial ;
 Working_event ::= hasTopic::Topic hasAdministrativeEvent::Administrative_event ;
summary_of_reviews ::= is_created_in::activity ;
Co-author ::= co-writePaper::Paper ;
Short_paper ::= writtenBy::Author dealsWith::Topic remark::String abstract::String contactEmail::String hasKeyword::String hasTitle::String ;
Late_paid_applicant ::= ε ;
GovernmentOrganization ::= isProviderOf::Sponsorship ;
Tutorial_Abstract ::= part_of_article::article (is_the_1th_part_of::Thing)+ ;
CallForManuscripts ::= forEvent::AcademicEvent (isInitiatedBy::Person)+ hasSubmissionInstructions::String hasSubmissionDeadline::dateTime ;
MealMenu ::= isMenuOf::MealEvent ;
Workshop_Session ::= ε ;
Paper_Author ::= attendeeAt::ConferenceEvent isMemberOf::conference hasFirstName::String hasBiography::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person send::Activity added_by::Person ;
Registeered_applicant ::= Paid_applicant ;
Late-Registered_Participant ::= ε ;
Conference_Proceedings ::= ε ;
group_email ::= article_written_by::Author has_reviewer::Reviewer has_abstract::Abstract goes_through::activity is_sent_to::human is_created_in::activity structure_created_by::human has_author::human gives_classification::classification ;
Full_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Assigned_Paper ::= Evaluated_Paper ;
 Assigned_Paper ::= hasReviewer::Possible_Reviewer ;
upper_tier_reviewing_process ::= is_performed_by::human ;
OperatingTopicsystems ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
ComputerNetworksEnterpriseTopic ::= ε ;
Chair_PC ::= attendeeAt::ConferenceEvent isMemberOf::conference hasFirstName::String hasBiography::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person send::Activity added_by::Person ;
Early_paid_applicant ::= ε ;
Active_conference_participant ::= gives_presentations::Presentation ;
Short_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
SatelliteAndSpaceCommunicationsTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Senior_Reviewer_URL ::= ε ;
date_of_notification ::= ε ;
Conference_applicant ::= Registeered_applicant ;
Organizing_committee ::= was_an_organizing_committee_of::Conference_volume ;
Registration_of_participants_event ::= follows::Administrative_event parallel_with::Administrative_event ;
MobileComputingTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Committee_member ::= Co-chair ;
 Committee_member ::= Chair ;
 Committee_member ::= was_a_member_of::Committee ;
ConferenceSession ::= ε ;
SubjectArea ::= ε ;
Camera_Ready_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
NGO ::= isProviderOf::Sponsorship ;
CommunicationTheoryTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
AcademicEvent ::= TalkEvent ;
 AcademicEvent ::= OrganizationalMeeting ;
 AcademicEvent ::= PaperPresentation ;
 AcademicEvent ::= hasCall::Call ;
date_of_conference ::= start_date_of_conference ;
 date_of_conference ::= end_date_of_conference ;
 date_of_conference ::= start_date_of_conference | end_date_of_conference ;
CallForPapers ::= forEvent::AcademicEvent (isInitiatedBy::Person)+ hasSubmissionInstructions::String hasSubmissionDeadline::dateTime ;
CommunicationsTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
SecurityTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
DiningPlace ::= isLocationOf::ConferenceEvent ;
Regular_author ::= Contribution_1th-author ;
 Regular_author ::= Contribution_co-author ;
 Regular_author ::= Contribution_1th-author | Contribution_co-author ;
PaperAbstract ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Rejection_Email ::= ε ;
Admin_Role ::= assigned_by::Administrator ;
Poster_Session ::= ε ;
ComputerArchitectureTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
OrganizationalMeeting ::= hasCall::Call ;
Session_Chair ::= ε ;
PersonalReviewHistory ::= isReviewHistoryOf::Reviewer ;
Group_Email ::= ε ;
Regular_Program_Committee_member ::= ε ;
conference_setup ::= sets_member::human is_made_by::human includes_topic::Topic sets_date::date sets_URL::URL ;
Member_PC ::= expertOn::Topic reviewes::Contribution ;
end_date_of_conference ::= ε ;
AccpetIfRoomRating ::= ε ;
Web_Site ::= (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document recieved_by::User used_by::Person submited__by::User ;
Help_Request ::= Misc ;
 Help_Request ::= Feature_Request ;
 Help_Request ::= Assistance ;
 Help_Request ::= Misc | Feature_Request | Assistance ;
RejectedPaper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
ParallelAndDistributedComputingTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Research_Topic ::= define::Event ;
 Research_Topic ::= topicCoveredBy::Thing ;
SC_Member ::= ε ;
Accepted_contribution ::= Camera_ready_contribution ;
OC_Member ::= OC_Chair ;
Reviewing_event ::= follows::Administrative_event parallel_with::Administrative_event ;
MultimediaTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
CryptographyTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
ReviewQuestion ::= TextualReviewQuestion ;
 ReviewQuestion ::= NumericalReviewQuestion ;
 ReviewQuestion ::= TextualReviewQuestion | NumericalReviewQuestion ;
Conference_volume ::= has_parts::Conference_part has_workshops::Workshop has_tracks::Track has_tutorials::Tutorial has_a_commtitee::Committee has_a_steering_committee::Steering_committee has_an_organizing_committee::Organizing_committee has_important_dates::Important_dates has_contributions::Conference_contribution has_a_location::String has_a_program_committee::Program_committee ;
camera-ready_submission_date ::= start_date_of_camera-ready_submission ;
 camera-ready_submission_date ::= end_date_of_camera-ready_submission ;
 camera-ready_submission_date ::= start_date_of_camera-ready_submission | end_date_of_camera-ready_submission ;
start_date_of_full_paper_submission ::= ε ;
ProgramCommittee ::= hasProgramCommitteeMember::ProgramCommitteeMember ;
Head_Role ::= assigned_by::Administrator ;
ProgramCommitteeMember ::= ProgramCommitteeChair ;
 ProgramCommitteeMember ::= memberOfProgramCommittee::ProgramCommittee maxPapers::Integer addedBy::Administrator ;
Invited_Talk_Abstract ::= part_of_article::article (is_the_1th_part_of::Thing)+ ;
Paid_applicant ::= Late_paid_applicant ;
 Paid_applicant ::= Early_paid_applicant ;
 Paid_applicant ::= Late_paid_applicant | Early_paid_applicant ;
end_date_of_abstract_submission ::= ε ;
Conference_announcement ::= has_authors::Person has_a_date_of_issue::date ;
Demo_Chair ::= ε ;
Conference_Trip ::= ε ;
WithdrawnPaper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Program_Committee_Chair ::= is_author_of::article performs_activity::activity is_employed_in::institute has_topic_of_interest::Topic supervises::activity e-mail::String last_name::String first_name::String ;
Social_event ::= Trip ;
 Social_event ::= Banquet ;
 Social_event ::= Reception ;
 Social_event ::= Trip | Banquet | Reception ;
Program_committee ::= was_a_program_committee_of::Conference_volume ;
Contribution_1th-author ::= ε ;
paper_assignment ::= Manual_Paper_Assignment ;
 paper_assignment ::= Automatic_Paper_Assignment ;
 paper_assignment ::= assign_paper::Program_Committee_member is_performed_by::human ;
PC_Chair ::= ε ;
NumericalReviewQuestion ::= ε ;
Automatic_Paper_Assignment ::= (automatically_assign_paper::Program_Committee_member)+ ;
Undecided_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
ComputerNetworksSecurityTopic ::= ε ;
URL ::= Event_URL ;
 URL ::= Senior_Reviewer_URL ;
 URL ::= Chair_URL ;
 URL ::= Contact_Person_URL ;
 URL ::= Regular_Reviewer_URL ;
 URL ::= Event_URL | Senior_Reviewer_URL | Chair_URL | Contact_Person_URL | Regular_Reviewer_URL ;
Steering_committee ::= was_a_steering_committee_of::Conference_volume ;
AuthorNotReviewer ::= writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper submitPaper::Paper writePaper::Paper writes::Contribution ;
review_form ::= is_created_in::activity ;
Review_Form ::= Preview ;
 Review_Form ::= Review_Form_Setup ;
 Review_Form ::= Preview | Review_Form_Setup ;
notification_email ::= acceptance_notification_email ;
 notification_email ::= rejection_notification_email ;
 notification_email ::= acceptance_notification_email | rejection_notification_email ;
Notification_Email ::= ε ;
PersonalPublicationHistory ::= ε ;
Social_Event ::= Conference_Trip ;
 Social_Event ::= Conference_Banquet ;
 Social_Event ::= Conference_Trip | Conference_Banquet ;
Senior_Program_Committee_member ::= supervises::activity ;
AssociatedChair ::= memberOfConference::conference ;
rejection_notification_email ::= ε ;
Reviewed_contribution ::= Accepted_contribution ;
 Reviewed_contribution ::= Rejected_contribution ;
 Reviewed_contribution ::= has_a_review::Review ;
ReviewRating ::= WeekRejectRating ;
 ReviewRating ::= AcceptRating ;
 ReviewRating ::= AccpetIfRoomRating ;
 ReviewRating ::= RejectRating ;
 ReviewRating ::= WeekRejectRating | AcceptRating | AccpetIfRoomRating | RejectRating ;
WirelessCommunicationsTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
TextualReviewQuestion ::= ε ;
TalkEvent ::= ClosingTalk ;
 TalkEvent ::= WelcomeTalk ;
 TalkEvent ::= ClosingTalk | WelcomeTalk ;
CADTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Contact_Person_URL ::= ε ;
Event_Creation ::= has_result::article sent_by::Person ;
Conference_part ::= Track ;
 Conference_part ::= has_a_track-workshop-tutorial_topic::Topic is_part_of_conference_volumes::Conference_volume has_a_track-workshop-tutorial_chair::Track-workshop_chair ;
ComputerNetworksSensorTopic ::= ε ;
Possible_Reviewer ::= PC_Member ;
 Possible_Reviewer ::= reviewerOfPaper::Paper ;
SlideSet ::= (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document recieved_by::User used_by::Person submited__by::User ;
MeetingRoomPlace ::= isLocationOf::ConferenceEvent ;
Neutral_Review ::= reviewOfPaper::Paper reviewWrittenBy::Possible_Reviewer writtenBy::Reviewer reviews::Reviewed_contribution gives_classification::classification is_created_in::activity review_written_by::Reviewer ;
ExternalReviewer ::= assignedByReviewer::Reviewer ;
WelcomeTalk ::= ε ;
SocialEvent ::= Excursion ;
 SocialEvent ::= Reception ;
 SocialEvent ::= Excursion | Reception ;
ContactInformation ::= hasCity::String hasStreet::String hasPostalCode::String hasPhone::String ;
Submitted_Paper ::= Assigned_Paper ;
FreeTimeBreak ::= ε ;
Scientific_Event ::= Session ;
 Scientific_Event ::= Individual_Presentation ;
 Scientific_Event ::= Track ;
 Scientific_Event ::= Session | Individual_Presentation ;
Individual_Presentation ::= Invited_Talk ;
 Individual_Presentation ::= Contributed_Talk ;
 Individual_Presentation ::= (presentationOfPaper::Document)+ ;
PerformanceTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Reviewing_results_event ::= follows::Administrative_event parallel_with::Administrative_event ;
BreakEvent ::= CoffeeBreak ;
 BreakEvent ::= FreeTimeBreak ;
 BreakEvent ::= MealBreak ;
 BreakEvent ::= CoffeeBreak | FreeTimeBreak | MealBreak ;
Evaluated_Paper ::= Accepted_Paper ;
 Evaluated_Paper ::= Rejected_Paper ;
 Evaluated_Paper ::= hasReview::Review ;
AcademiaOrganization ::= isProviderOf::Sponsorship ;
ConferenceMember ::= ConferenceChair ;
 ConferenceMember ::= AssociatedChair ;
 ConferenceMember ::= ProgramCommitteeMember ;
 ConferenceMember ::= Chairman ;
 ConferenceMember ::= memberOfConference::conference ;
MedicineTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Accepted_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
 Accepted_Paper ::= hasReview::Review ;
Submitted_contribution ::= Reviewed_contribution ;
 Submitted_contribution ::= has_a_review_expertise::Review_expertise ;
Agency_Staff_Member ::= attendeeAt::ConferenceEvent isMemberOf::conference hasFirstName::String hasBiography::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person send::Activity added_by::Person ;
Track-workshop_chair ::= was_a_track-workshop_chair_of::Conference_part ;
RatedPapers ::= hasRating::ReviewRating ;
Regular_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
ConferenceChair ::= memberOfConference::conference ;
 ConferenceChair ::= attendeeAt::ConferenceEvent isMemberOf::conference hasFirstName::String hasBiography::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person send::Activity added_by::Person ;
EEnum ::= (male::ε) | (female::ε) | (high::ε) | (medium::ε) | (low::ε) | (very high::ε) ;
AcceptRating ::= ε ;
Camera_Ready_event ::= follows::Administrative_event parallel_with::Administrative_event ;
ClosingTalk ::= ε ;
MealBreak ::= ε ;
reviewing_proces ::= lower_tier_reviewing_process ;
 reviewing_proces ::= upper_tier_reviewing_process ;
 reviewing_proces ::= lower_tier_reviewing_process | upper_tier_reviewing_process ;
Manual_Paper_Assignment ::= (manually_assign_paper::Program_Committee_member)+ ;
Workshop_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Industrial_Session ::= ε ;
Conference_fees ::= ε ;
ConferenceDinner ::= hasMenu::MealMenu ;
Meta-Reviewer ::= assignedByAdministrator::Administrator adjustBid::Bid readPaper::Paper hasBeenAssigned::Paper writeReview::Review assignExternalReviewer::ExternalReviewer invites_co-reviewers::Reviewer invited_by::Reviewer (has_a_review_reference_or_expertise::Thing)+ writes_review::Review hasReviewHistory::PersonalReviewHistory ;
ProgramCommitteeChair ::= endReview::Review ;
Call_for_participation ::= has_authors::Person has_a_date_of_issue::date ;
Passive_conference_participant ::= ε ;
TPCMember ::= attendeeAt::ConferenceEvent isMemberOf::conference hasFirstName::String hasBiography::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person send::Activity added_by::Person ;
Early-Registered_Participant ::= ε ;
phase_of_conference ::= ε ;
ConferenceEvent ::= NonAcademicEvent ;
 ConferenceEvent ::= AcademicEvent ;
 ConferenceEvent ::= hasAttendee::Person hasLocation::Place hasProgramme::Programme hasEndDateTime::dateTime hasStartDateTime::dateTime ;
Conference_document ::= Conference_contribution ;
 Conference_document ::= Information_for_participants ;
 Conference_document ::= Call_for_paper ;
 Conference_document ::= Conference_announcement ;
 Conference_document ::= Call_for_participation ;
 Conference_document ::= Conference_www ;
 Conference_document ::= has_authors::Person has_a_date_of_issue::date ;
Contribution_co-author ::= ε ;
Multi-author_Volume ::= Proceedings ;
ComputerNetworksMeasurementsTopic ::= ε ;
Chair_URL ::= ε ;
Regular_Session ::= ε ;
start_date_of_conference ::= ε ;
Conference_participant ::= Passive_conference_participant ;
 Conference_participant ::= Active_conference_participant ;
ComputerNetworksTopic ::= ComputerNetworksEnterpriseTopic ;
 ComputerNetworksTopic ::= ComputerNetworksSwitchingTopic ;
 ComputerNetworksTopic ::= ComputerNetworksSensorTopic ;
 ComputerNetworksTopic ::= ComputerNetworksSecurityTopic ;
 ComputerNetworksTopic ::= ComputerNetworksOpticalTopic ;
 ComputerNetworksTopic ::= ComputerNetworksMeasurementsTopic ;
 ComputerNetworksTopic ::= ComputerNetworksManagementTopic ;
 ComputerNetworksTopic ::= ComputerNetworksAapplicationsTopic ;
 ComputerNetworksTopic ::= ComputerNetworksEnterpriseTopic | ComputerNetworksSwitchingTopic | ComputerNetworksSensorTopic | ComputerNetworksSecurityTopic | ComputerNetworksOpticalTopic | ComputerNetworksMeasurementsTopic | ComputerNetworksManagementTopic | ComputerNetworksAapplicationsTopic ;
Author_Role ::= assigned_by::Administrator ;
Conference_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
bidding_of_reviewer ::= is_performed_by::human ;
PaperPresentation ::= relatedToPaper::AcceptedPaper ;
Tutorial_Chair ::= ε ;
abstract_submission_date ::= end_date_of_abstract_submission ;
 abstract_submission_date ::= start_date_of_abstract_submission ;
 abstract_submission_date ::= end_date_of_abstract_submission | start_date_of_abstract_submission ;
Negative_Review ::= reviewOfPaper::Paper reviewWrittenBy::Possible_Reviewer writtenBy::Reviewer reviews::Reviewed_contribution gives_classification::classification is_created_in::activity review_written_by::Reviewer ;
abstract_of_paper ::= article_written_by::Author has_reviewer::Reviewer has_abstract::Abstract goes_through::activity is_sent_to::human is_created_in::activity structure_created_by::human has_author::human gives_classification::classification ;
Approval_Email ::= confirm::Event ;
AntennasTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
MicroelectronicsTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
lower_tier_reviewing_process ::= ε ;
ComputerNetworksOpticalTopic ::= ε ;
Contributed_Talk ::= (presentationOfPaper::Document)+ ;
Contact_Person ::= is_author_of::article performs_activity::activity is_employed_in::institute has_topic_of_interest::Topic supervises::activity e-mail::String last_name::String first_name::String ;
Conference_Participant ::= Demo_Chair ;
 Conference_Participant ::= OC_Member ;
 Conference_Participant ::= Early-Registered_Participant ;
 Conference_Participant ::= Late-Registered_Participant ;
 Conference_Participant ::= Tutorial_Chair ;
 Conference_Participant ::= PC_Chair ;
 Conference_Participant ::= Workshop_Chair ;
 Conference_Participant ::= Session_Chair ;
 Conference_Participant ::= Presenter ;
 Conference_Participant ::= Demo_Chair | OC_Member | Early-Registered_Participant | Late-Registered_Participant ;
Rejected_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
 Rejected_Paper ::= hasReview::Review ;
Event_Approval ::= has_result::article sent_by::Person ;
Invited_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
PC_Member ::= SC_Member ;
 PC_Member ::= Session_Chair ;
 PC_Member ::= Tutorial_Chair ;
 PC_Member ::= PC_Chair ;
 PC_Member ::= Workshop_Chair ;
Academic_Institution ::= Research_Institute ;
 Academic_Institution ::= University ;
 Academic_Institution ::= scientificallyOrganises::Academic_Institution ;
submission_process ::= is_performed_by::human ;
OC_Chair ::= ε ;
MealEvent ::= ConferenceDinner ;
 MealEvent ::= hasMenu::MealMenu ;
end_date_of_camera-ready_submission ::= ε ;
start_date_of_abstract_submission ::= ε ;
CoffeeBreak ::= ε ;
Conference_Session ::= Industrial_Session ;
Research_Institute ::= scientificallyOrganises::Academic_Institution ;
Reviewer_Role ::= assigned_by::Administrator ;
Committe_Role ::= assigned_by::Administrator ;
Administrative_event ::= Reviewing_results_event ;
 Administrative_event ::= Reviewing_event ;
 Administrative_event ::= Registration_of_participants_event ;
 Administrative_event ::= Submission_event ;
 Administrative_event ::= Camera_Ready_event ;
 Administrative_event ::= follows::Administrative_event parallel_with::Administrative_event ;
Review_Form_Setup ::= ε ;
Camera_ready_contribution ::= ε ;
Positive_Review ::= reviewOfPaper::Paper reviewWrittenBy::Possible_Reviewer writtenBy::Reviewer reviews::Reviewed_contribution gives_classification::classification is_created_in::activity review_written_by::Reviewer ;
PublishedPaper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
full_paper_submission_date ::= start_date_of_full_paper_submission ;
 full_paper_submission_date ::= end_date_of_full_paper_submission ;
 full_paper_submission_date ::= start_date_of_full_paper_submission | end_date_of_full_paper_submission ;
ReviewForm ::= ε ;
Written_contribution ::= Submitted_contribution ;
 Written_contribution ::= Regular_contribution ;
 Written_contribution ::= Submitted_contribution | Regular_contribution ;
Conference_contributor ::= Regular_author ;
 Conference_contributor ::= Invited_speaker ;
 Conference_contributor ::= Active_conference_participant ;
 Conference_contributor ::= Regular_author | Invited_speaker ;
Event_Setup ::= Paper_Typologies ;
 Event_Setup ::= Review_Form ;
 Event_Setup ::= Submission_Template ;
 Event_Setup ::= Event_Tracks ;
 Event_Setup ::= Research_Topic ;
 Event_Setup ::= Email_Template ;
 Event_Setup ::= define::Event ;
Corresponding_Author ::= writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper submitPaper::Paper writePaper::Paper writes::Contribution ;
PendingPaper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
PowerlineTransmissionTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
IndustryOrganization ::= isProviderOf::Sponsorship ;
TestOnlyTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
WeekRejectRating ::= ε ;
Extended_abstract ::= ε ;
Industrial_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Co-chair ::= was_a_committe_co-chair_of::Committee ;
Conference_Banquet ::= ε ;
Organising_Agency ::= (publisherOf::Thing)+ technicallyOrganises::Thing ;
PaperFullVersion ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
RejectRating ::= ε ;
Demo_Session ::= ε ;
SingleLevelConference ::= is_in_phase::phase_of_conference hasMember::Person hasName::String endDate::dateTime paperDueOn::dateTime registrationDueOn::dateTime manuscriptDueOn::dateTime startDate::dateTime hasCountry::Country hasConferenceMember::ConferenceMember paperAssignmentFinalizedBy::Administrator reviewCriteriaEnteredBy::Administrator paperAssignmentToolsRunBy::Administrator virtualMeetingEnabledBy::Administrator hardcopyMailingManifestsPrintedBy::Administrator detailsEnteredBy::Administrator reviewerBiddingStartedBy::Administrator date::date reviewsPerPaper::Integer logoURL::anyURI acceptsHardcopySubmissions::Boolean siteURL::anyURI has_program::program ;
Program_Committee_member ::= Senior_Program_Committee_member ;
 Program_Committee_member ::= Regular_Program_Committee_member ;
 Program_Committee_member ::= Senior_Program_Committee_member | Regular_Program_Committee_member ;
ConferenceVenuePlace ::= isLocationOf::ConferenceEvent ;
end_date_of_full_paper_submission ::= ε ;
Conference_contribution ::= Poster ;
 Conference_contribution ::= Written_contribution ;
 Conference_contribution ::= Presentation ;
 Conference_contribution ::= is_submitted_at::Conference_volume ;
Invited_Talk ::= (presentationOfPaper::Document)+ ;
Demo_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
CallForReviews ::= forEvent::AcademicEvent (isInitiatedBy::Person)+ hasSubmissionInstructions::String hasSubmissionDeadline::dateTime ;
acceptance_notification_email ::= ε ;
ComputerNetworksManagementTopic ::= ε ;
Paper_Typologies ::= define::Event ;
Information_for_participants ::= has_authors::Person has_a_date_of_issue::date ;
Programme_Brochure ::= (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document recieved_by::User used_by::Person submited__by::User ;
NonAcademicEvent ::= MealEvent ;
 NonAcademicEvent ::= BreakEvent ;
 NonAcademicEvent ::= SocialEvent ;
 NonAcademicEvent ::= MealEvent | BreakEvent | SocialEvent ;
ComputerNetworksSwitchingTopic ::= ε ;
Meta-Review ::= reviewOfPaper::Paper reviewWrittenBy::Possible_Reviewer writtenBy::Reviewer reviews::Reviewed_contribution gives_classification::classification is_created_in::activity review_written_by::Reviewer ;
Invited_speaker ::= ε ;
Poster_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer ;
Regular_Reviewer_URL ::= ε ;
managing_of_conference_process ::= is_followed_by::activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human ;
Call_for_paper ::= has_authors::Person has_a_date_of_issue::date ;
PersonalHistory ::= PersonalPublicationHistory ;
 PersonalHistory ::= PersonalReviewHistory ;
 PersonalHistory ::= PersonalPublicationHistory | PersonalReviewHistory ;
Conference_www ::= has_a_URL::String ;
Rejected_contribution ::= has_a_review::Review ;
Invited_talk ::= is_given_by::Active_conference_participant ;
Workshop_Chair ::= ε ;
Event_Tracks ::= define::Event ;
Submission_Template ::= define::Event ;
ComputerNetworksAapplicationsTopic ::= ε ;
Review_expertise ::= has_a_submitted_contribution::Submitted_contribution has_an_expertise::EEnum ;
Event_URL ::= concerned::Event ;
Important_dates ::= is_an_abstract_submission_date::date is_a_full_paper_submission_date::date is_an_ending_date::date is_a_date_of_acceptance_announcement::date is_a_date_of_camera_ready_paper_submission::date is_a_starting_date::date belong_to_a_conference_volume::Conference_volume ;
Submission_event ::= follows::Administrative_event parallel_with::Administrative_event ;
ActivePaper ::= RatedPapers ;
 ActivePaper ::= hasRating::ReviewRating ;
Feature_Request ::= ε ;
AcceptedPaper ::= relatedToEvent::PaperPresentation ;
TravelGrant ::= providedBy::Organization hasCostCurrency::String hasCostAmount::Integer ;
Review_preference ::= (has_a_topic_or_a_submission_contribution::Thing)+ has_a_degree::Integer ;
--------------------metamodels::iasted.owl.bgf--------------------
Email_Template ::= define::Event ;
Proceedings_Publisher ::= (publisherOf::Thing)+ technicallyOrganises::Thing ;
start_date_of_camera-ready_submission ::= ε ;
Conference_proceedings ::= has_an_ISBN::String has_a_publisher::Publisher has_a_volume::String ;
Invited_Speaker ::= ε ;
Science_Worker ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasConflictOfInterest::Document email::String ;
Welcome_address ::= ε ;
RadioCommunicationsTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Transport_vehicle ::= Car ;
 Transport_vehicle ::= Taxi ;
 Transport_vehicle ::= Shuttle_bus ;
 Transport_vehicle ::= Van ;
 Transport_vehicle ::= Car | Taxi | Shuttle_bus | Van ;
AccommodationPlace ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
Refusing_manuscript ::= ε ;
SignalProcessingTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
TwoLevelConference ::= is_in_phase::phase_of_conference has_program::program hasMember::Person hasName::String endDate::dateTime paperDueOn::dateTime registrationDueOn::dateTime manuscriptDueOn::dateTime startDate::dateTime hasCountry::Country hasConferenceMember::ConferenceMember paperAssignmentFinalizedBy::Administrator reviewCriteriaEnteredBy::Administrator paperAssignmentToolsRunBy::Administrator virtualMeetingEnabledBy::Administrator hardcopyMailingManifestsPrintedBy::Administrator detailsEnteredBy::Administrator reviewerBiddingStartedBy::Administrator date::date reviewsPerPaper::Integer logoURL::anyURI acceptsHardcopySubmissions::Boolean siteURL::anyURI ;
Regular_contribution ::= Extended_abstract ;
pc_meeting ::= conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator starts_on::String ends_on::String has_startdate::dateTime has_enddate::dateTime (eventOnList::Thing)+ partOfEvent::Event hasEvent::Event (organisedBy::Thing)+ heldIn::Location ;
SessionChair ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasConflictOfInterest::Document email::String ;
Working_event ::= hasTopic::Topic hasAdministrativeEvent::Administrative_event ;
summary_of_reviews ::= is_created_in::Activity ;
Co-author ::= co-writePaper::Paper ;
Short_paper ::= writtenBy::Author dealsWith::Topic remark::String abstract::String contactEmail::String hasKeyword::String hasTitle::String ;
Late_paid_applicant ::= ε ;
Nonauthor_registration_fee ::= ε ;
GovernmentOrganization ::= isProviderOf::Sponsorship ;
Tutorial_Abstract ::= part_of_article::article (is_the_1th_part_of::Thing)+ ;
Main_office ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
CallForManuscripts ::= forEvent::AcademicEvent (isInitiatedBy::Person)+ hasSubmissionInstructions::String hasSubmissionDeadline::dateTime ;
MealMenu ::= isMenuOf::MealEvent ;
Workshop_Session ::= ε ;
Paper_Author ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasConflictOfInterest::Document email::String ;
Registeered_applicant ::= Paid_applicant ;
Late-Registered_Participant ::= ε ;
Conference_Proceedings ::= ε ;
group_email ::= goes_through::Activity is_sent_to::human is_created_in::Activity structure_created_by::human has_author::human gives_classification::classification article_written_by::Author has_reviewer::Reviewer has_abstract::Abstract ;
Full_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
Assigned_Paper ::= Evaluated_Paper ;
 Assigned_Paper ::= hasReviewer::Possible_Reviewer ;
Shuttle_bus ::= ε ;
upper_tier_reviewing_process ::= is_performed_by::human ;
OperatingTopicsystems ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Social_program ::= Dinner_banquet ;
Conference_state ::= ε ;
ComputerNetworksEnterpriseTopic ::= ε ;
Chair_PC ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasConflictOfInterest::Document email::String ;
Early_paid_applicant ::= ε ;
Active_conference_participant ::= gives_presentations::Presentation ;
Short_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
SatelliteAndSpaceCommunicationsTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Receiving_manuscript ::= ε ;
Senior_Reviewer_URL ::= ε ;
Plenary_lecture ::= ε ;
date_of_notification ::= ε ;
Departure_tax ::= ε ;
Conference_applicant ::= Registeered_applicant ;
Time_zone ::= ε ;
Organizing_committee ::= was_an_organizing_committee_of::Conference_volume ;
Hotel_presenter ::= ε ;
Registration_of_participants_event ::= follows::Administrative_event parallel_with::Administrative_event ;
MobileComputingTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Session_chair ::= ε ;
Committee_member ::= Co-chair ;
 Committee_member ::= Chair ;
 Committee_member ::= was_a_member_of::Committee ;
Deadline_hotel_reservation ::= done_till::date ;
ConferenceSession ::= ε ;
SubjectArea ::= ε ;
Camera_Ready_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
NGO ::= isProviderOf::Sponsorship ;
Dinner_banquet ::= ε ;
CommunicationTheoryTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
AcademicEvent ::= TalkEvent ;
 AcademicEvent ::= OrganizationalMeeting ;
 AcademicEvent ::= PaperPresentation ;
 AcademicEvent ::= Workshop ;
 AcademicEvent ::= hasCall::Call ;
date_of_conference ::= start_date_of_conference ;
 date_of_conference ::= end_date_of_conference ;
 date_of_conference ::= start_date_of_conference | end_date_of_conference ;
Mailing_list ::= recieved_by::User used_by::Person submited__by::User (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document ;
CallForPapers ::= forEvent::AcademicEvent (isInitiatedBy::Person)+ hasSubmissionInstructions::String hasSubmissionDeadline::dateTime ;
CommunicationsTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
SecurityTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
DiningPlace ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
Regular_author ::= Contribution_1th-author ;
 Regular_author ::= Contribution_co-author ;
 Regular_author ::= Contribution_1th-author | Contribution_co-author ;
PaperAbstract ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
Rejection_Email ::= ε ;
Admin_Role ::= assigned_by::Administrator ;
Poster_Session ::= ε ;
ComputerArchitectureTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
OrganizationalMeeting ::= hasCall::Call ;
Session_Chair ::= ε ;
PersonalReviewHistory ::= isReviewHistoryOf::Reviewer ;
Group_Email ::= ε ;
Regular_Program_Committee_member ::= ε ;
conference_setup ::= sets_member::human is_made_by::human includes_topic::Topic sets_date::date sets_URL::URL ;
Member_PC ::= expertOn::Topic reviewes::Contribution ;
end_date_of_conference ::= ε ;
Double_hotel_room ::= ε ;
AccpetIfRoomRating ::= ε ;
Web_Site ::= recieved_by::User used_by::Person submited__by::User (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document ;
Help_Request ::= Misc ;
 Help_Request ::= Feature_Request ;
 Help_Request ::= Assistance ;
 Help_Request ::= Misc | Feature_Request | Assistance ;
Sponsor_city ::= ε ;
RejectedPaper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
ParallelAndDistributedComputingTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
One_day_presenter ::= ε ;
Research_Topic ::= define::Event ;
 Research_Topic ::= topicCoveredBy::Thing ;
SC_Member ::= ε ;
Accepted_contribution ::= Camera_ready_contribution ;
OC_Member ::= OC_Chair ;
Reviewing_event ::= follows::Administrative_event parallel_with::Administrative_event ;
MultimediaTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
CryptographyTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
ReviewQuestion ::= TextualReviewQuestion ;
 ReviewQuestion ::= NumericalReviewQuestion ;
 ReviewQuestion ::= TextualReviewQuestion | NumericalReviewQuestion ;
Conference_volume ::= has_parts::Conference_part has_workshops::Workshop has_tracks::Track has_tutorials::Tutorial has_a_commtitee::Committee has_a_steering_committee::Steering_committee has_an_organizing_committee::Organizing_committee has_important_dates::Important_dates has_contributions::Conference_contribution has_a_location::String has_a_program_committee::Program_committee ;
camera-ready_submission_date ::= start_date_of_camera-ready_submission ;
 camera-ready_submission_date ::= end_date_of_camera-ready_submission ;
 camera-ready_submission_date ::= start_date_of_camera-ready_submission | end_date_of_camera-ready_submission ;
start_date_of_full_paper_submission ::= ε ;
Conference_days ::= One_conference_day ;
ProgramCommittee ::= hasProgramCommitteeMember::ProgramCommitteeMember ;
Registation_deadline ::= done_till::date ;
Head_Role ::= assigned_by::Administrator ;
ProgramCommitteeMember ::= ProgramCommitteeChair ;
 ProgramCommitteeMember ::= memberOfProgramCommittee::ProgramCommittee maxPapers::Integer addedBy::Administrator ;
Invited_Talk_Abstract ::= part_of_article::article (is_the_1th_part_of::Thing)+ ;
Final_manuscript ::= ε ;
Paid_applicant ::= Late_paid_applicant ;
 Paid_applicant ::= Early_paid_applicant ;
 Paid_applicant ::= Late_paid_applicant | Early_paid_applicant ;
end_date_of_abstract_submission ::= ε ;
Worker_non_speaker ::= ε ;
Invitation_letter ::= recieved_by::User used_by::Person submited__by::User (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document ;
Book_proceeding ::= ε ;
Conference_announcement ::= has_authors::Person has_a_date_of_issue::date ;
Demo_Chair ::= ε ;
Conference_Trip ::= ε ;
WithdrawnPaper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
Program_Committee_Chair ::= is_author_of::article performs_activity::Activity is_employed_in::institute has_topic_of_interest::Topic supervises::Activity e-mail::String last_name::String first_name::String ;
Social_event ::= Trip ;
 Social_event ::= Banquet ;
 Social_event ::= Reception ;
 Social_event ::= Trip | Banquet | Reception ;
Program_committee ::= was_a_program_committee_of::Conference_volume ;
Contribution_1th-author ::= ε ;
paper_assignment ::= Manual_Paper_Assignment ;
 paper_assignment ::= Automatic_Paper_Assignment ;
 paper_assignment ::= assign_paper::Program_Committee_member is_performed_by::human ;
Conference_hall ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
PC_Chair ::= ε ;
NumericalReviewQuestion ::= ε ;
Payment_document ::= Cheque ;
 Payment_document ::= Bank_transfer ;
 Payment_document ::= Cheque | Bank_transfer ;
Automatic_Paper_Assignment ::= (automatically_assign_paper::Program_Committee_member)+ ;
Undecided_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
ComputerNetworksSecurityTopic ::= ε ;
URL ::= Event_URL ;
 URL ::= Senior_Reviewer_URL ;
 URL ::= Chair_URL ;
 URL ::= Contact_Person_URL ;
 URL ::= Regular_Reviewer_URL ;
 URL ::= Event_URL | Senior_Reviewer_URL | Chair_URL | Contact_Person_URL | Regular_Reviewer_URL ;
Steering_committee ::= was_a_steering_committee_of::Conference_volume ;
AuthorNotReviewer ::= submitPaper::Paper writePaper::Paper writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper ;
review_form ::= is_created_in::Activity ;
Review_Form ::= Preview ;
 Review_Form ::= Review_Form_Setup ;
 Review_Form ::= Preview | Review_Form_Setup ;
Deadline_for_notification_of_acceptance ::= done_till::date ;
notification_email ::= acceptance_notification_email ;
 notification_email ::= rejection_notification_email ;
 notification_email ::= acceptance_notification_email | rejection_notification_email ;
Notification_Email ::= ε ;
PersonalPublicationHistory ::= ε ;
Social_Event ::= Conference_Trip ;
 Social_Event ::= Conference_Banquet ;
 Social_Event ::= Conference_Trip | Conference_Banquet ;
Senior_Program_Committee_member ::= supervises::Activity ;
AssociatedChair ::= memberOfConference::Conference ;
rejection_notification_email ::= ε ;
Reviewed_contribution ::= Accepted_contribution ;
 Reviewed_contribution ::= Rejected_contribution ;
 Reviewed_contribution ::= has_a_review::Review ;
ReviewRating ::= WeekRejectRating ;
 ReviewRating ::= AcceptRating ;
 ReviewRating ::= AccpetIfRoomRating ;
 ReviewRating ::= RejectRating ;
 ReviewRating ::= WeekRejectRating | AcceptRating | AccpetIfRoomRating | RejectRating ;
WirelessCommunicationsTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
TextualReviewQuestion ::= ε ;
PowerPoint_presentation ::= is_given_by::Active_conference_participant ;
TalkEvent ::= ClosingTalk ;
 TalkEvent ::= WelcomeTalk ;
 TalkEvent ::= ClosingTalk | WelcomeTalk ;
CADTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Trip_city ::= ε ;
Contact_Person_URL ::= ε ;
Event_Creation ::= (has_result::Thing)+ sent_by::Person is_followed_by::Activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human is_held_before::Time (is_held_in::Trip_day)+ is_held_after::Time is_dated_on::dateTime ;
Registration_fee ::= Author_attendee_book_registration_fee ;
 Registration_fee ::= Nonmember_registration_fee ;
 Registration_fee ::= Nonauthor_registration_fee ;
 Registration_fee ::= Memeber_registration_fee ;
 Registration_fee ::= Student_registration_fee ;
 Registration_fee ::= Author_attendee_cd_registration_fee ;
 Registration_fee ::= Author_attendee_book_registration_fee | Nonmember_registration_fee | Nonauthor_registration_fee | Memeber_registration_fee | Student_registration_fee | Author_attendee_cd_registration_fee ;
Speaker_lecture ::= ε ;
Technic_activity ::= ε ;
Conference_part ::= Tutorial ;
 Conference_part ::= Track ;
 Conference_part ::= has_a_track-workshop-tutorial_topic::Topic is_part_of_conference_volumes::Conference_volume has_a_track-workshop-tutorial_chair::Track-workshop_chair ;
ComputerNetworksSensorTopic ::= ε ;
IASTED_non_member ::= ε ;
Possible_Reviewer ::= PC_Member ;
 Possible_Reviewer ::= reviewerOfPaper::Paper ;
One_conference_day ::= ε ;
Overhead_projector ::= ε ;
SlideSet ::= recieved_by::User used_by::Person submited__by::User (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document ;
MeetingRoomPlace ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
Submissions_deadline ::= done_till::date ;
Neutral_Review ::= writtenBy::Reviewer reviews::Reviewed_contribution gives_classification::classification is_created_in::Activity review_written_by::Reviewer reviewOfPaper::Paper reviewWrittenBy::Possible_Reviewer ;
ExternalReviewer ::= assignedByReviewer::Reviewer ;
WelcomeTalk ::= ε ;
SocialEvent ::= Excursion ;
 SocialEvent ::= Reception ;
 SocialEvent ::= Excursion | Reception ;
Sponsor_state ::= ε ;
ContactInformation ::= hasCity::String hasStreet::String hasPostalCode::String hasPhone::String ;
Submitted_Paper ::= Assigned_Paper ;
Initial_manuscipt ::= ε ;
Author_cd_proceedings_included ::= submitPaper::Paper writePaper::Paper writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper ;
FreeTimeBreak ::= ε ;
Audiovisual_equipment ::= Video_cassette_player ;
 Audiovisual_equipment ::= LCD_projector ;
 Audiovisual_equipment ::= Computer ;
 Audiovisual_equipment ::= Overhead_projector ;
 Audiovisual_equipment ::= Video_cassette_player | LCD_projector | Computer | Overhead_projector ;
Session_room ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
Scientific_Event ::= Individual_Presentation ;
 Scientific_Event ::= Track ;
 Scientific_Event ::= Session ;
Record_of_attendance ::= recieved_by::User used_by::Person submited__by::User (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document ;
Individual_Presentation ::= Invited_Talk ;
 Individual_Presentation ::= Contributed_Talk ;
 Individual_Presentation ::= (presentationOfPaper::Document)+ ;
PerformanceTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Reviewing_results_event ::= follows::Administrative_event parallel_with::Administrative_event ;
BreakEvent ::= CoffeeBreak ;
 BreakEvent ::= FreeTimeBreak ;
 BreakEvent ::= MealBreak ;
 BreakEvent ::= CoffeeBreak | FreeTimeBreak | MealBreak ;
Evaluated_Paper ::= Accepted_Paper ;
 Evaluated_Paper ::= Rejected_Paper ;
 Evaluated_Paper ::= hasReview::Review ;
AcademiaOrganization ::= isProviderOf::Sponsorship ;
ConferenceMember ::= Reviewer ;
 ConferenceMember ::= ConferenceChair ;
 ConferenceMember ::= AssociatedChair ;
 ConferenceMember ::= ProgramCommitteeMember ;
 ConferenceMember ::= Chairman ;
 ConferenceMember ::= memberOfConference::Conference ;
MedicineTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
Accepted_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
 Accepted_Paper ::= hasReview::Review ;
Submitted_contribution ::= Reviewed_contribution ;
 Submitted_contribution ::= has_a_review_expertise::Review_expertise ;
Agency_Staff_Member ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasConflictOfInterest::Document email::String ;
Conference_hotel ::= ε ;
Track-workshop_chair ::= was_a_track-workshop_chair_of::Conference_part ;
Coffee_break ::= ε ;
RatedPapers ::= hasRating::ReviewRating ;
Regular_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
ConferenceChair ::= memberOfConference::Conference ;
 ConferenceChair ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasConflictOfInterest::Document email::String ;
EEnum ::= (male::ε) | (female::ε) | (high::ε) | (medium::ε) | (low::ε) | (very high::ε) ;
Author_attendee_book_registration_fee ::= ε ;
AcceptRating ::= ε ;
Camera_Ready_event ::= follows::Administrative_event parallel_with::Administrative_event ;
IASTED_member ::= ε ;
ClosingTalk ::= ε ;
MealBreak ::= ε ;
Technical_commitee ::= ε ;
reviewing_proces ::= lower_tier_reviewing_process ;
 reviewing_proces ::= upper_tier_reviewing_process ;
 reviewing_proces ::= lower_tier_reviewing_process | upper_tier_reviewing_process ;
Manual_Paper_Assignment ::= (manually_assign_paper::Program_Committee_member)+ ;
Conference_Hiker ::= ε ;
Workshop_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
Industrial_Session ::= ε ;
Conference_fees ::= ε ;
ConferenceDinner ::= hasMenu::MealMenu ;
Meta-Reviewer ::= invites_co-reviewers::Reviewer invited_by::Reviewer (has_a_review_reference_or_expertise::Thing)+ writes_review::Review hasReviewHistory::PersonalReviewHistory assignedByAdministrator::Administrator adjustBid::Bid readPaper::Paper hasBeenAssigned::Paper writeReview::Review assignExternalReviewer::ExternalReviewer ;
Activity_before_conference ::= Renting ;
 Activity_before_conference ::= Research ;
 Activity_before_conference ::= Refusing_manuscript ;
 Activity_before_conference ::= Accepting_manuscript ;
 Activity_before_conference ::= Receiving_manuscript ;
 Activity_before_conference ::= Renting | Research | Refusing_manuscript | Accepting_manuscript | Receiving_manuscript ;
ProgramCommitteeChair ::= endReview::Review ;
Call_for_participation ::= has_authors::Person has_a_date_of_issue::date ;
Conference_airport ::= ε ;
Passive_conference_participant ::= ε ;
Presenter_city ::= ε ;
TPCMember ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasConflictOfInterest::Document email::String ;
Early-Registered_Participant ::= ε ;
phase_of_conference ::= ε ;
Video_cassette_player ::= ε ;
ConferenceEvent ::= NonAcademicEvent ;
 ConferenceEvent ::= AcademicEvent ;
 ConferenceEvent ::= hasAttendee::Person hasLocation::Place hasProgramme::Programme hasEndDateTime::dateTime hasStartDateTime::dateTime ;
Conference_document ::= Conference_contribution ;
 Conference_document ::= Information_for_participants ;
 Conference_document ::= Call_for_paper ;
 Conference_document ::= Conference_announcement ;
 Conference_document ::= Call_for_participation ;
 Conference_document ::= Conference_www ;
 Conference_document ::= has_authors::Person has_a_date_of_issue::date ;
Single_hotel_room ::= ε ;
Contribution_co-author ::= ε ;
Introduction_of_speaker ::= ε ;
Multi-author_Volume ::= Proceedings ;
Nonmember_registration_fee ::= ε ;
ComputerNetworksMeasurementsTopic ::= ε ;
Coctail_reception ::= ε ;
Chair_URL ::= ε ;
Regular_Session ::= ε ;
Conference_activity ::= Social_program ;
 Conference_activity ::= Technic_activity ;
 Conference_activity ::= Registration ;
 Conference_activity ::= Introduction ;
 Conference_activity ::= Welcome_address ;
 Conference_activity ::= Lecture ;
 Conference_activity ::= Coffee_break ;
 Conference_activity ::= Coctail_reception ;
 Conference_activity ::= Presentation ;
 Conference_activity ::= Social_program | Technic_activity | Registration | Introduction | Welcome_address | Lecture | Coffee_break | Coctail_reception ;
start_date_of_conference ::= ε ;
Conference_participant ::= Passive_conference_participant ;
 Conference_participant ::= Active_conference_participant ;
ComputerNetworksTopic ::= ComputerNetworksEnterpriseTopic ;
 ComputerNetworksTopic ::= ComputerNetworksSwitchingTopic ;
 ComputerNetworksTopic ::= ComputerNetworksSensorTopic ;
 ComputerNetworksTopic ::= ComputerNetworksSecurityTopic ;
 ComputerNetworksTopic ::= ComputerNetworksOpticalTopic ;
 ComputerNetworksTopic ::= ComputerNetworksMeasurementsTopic ;
 ComputerNetworksTopic ::= ComputerNetworksManagementTopic ;
 ComputerNetworksTopic ::= ComputerNetworksAapplicationsTopic ;
 ComputerNetworksTopic ::= ComputerNetworksEnterpriseTopic | ComputerNetworksSwitchingTopic | ComputerNetworksSensorTopic | ComputerNetworksSecurityTopic | ComputerNetworksOpticalTopic | ComputerNetworksMeasurementsTopic | ComputerNetworksManagementTopic | ComputerNetworksAapplicationsTopic ;
Full_day_tour ::= ε ;
LCD_projector ::= ε ;
Author_Role ::= assigned_by::Administrator ;
Presenter_house ::= ε ;
Conference_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
bidding_of_reviewer ::= is_performed_by::human ;
Cd_proceening ::= ε ;
Hotel_room ::= Single_hotel_room ;
 Hotel_room ::= Double_hotel_room ;
 Hotel_room ::= Single_hotel_room | Double_hotel_room ;
PaperPresentation ::= relatedToPaper::AcceptedPaper ;
Presenter_university ::= ε ;
Student_registration_fee ::= ε ;
Tutorial_Chair ::= ε ;
abstract_submission_date ::= end_date_of_abstract_submission ;
 abstract_submission_date ::= start_date_of_abstract_submission ;
 abstract_submission_date ::= end_date_of_abstract_submission | start_date_of_abstract_submission ;
Trip_day ::= ε ;
Negative_Review ::= writtenBy::Reviewer reviews::Reviewed_contribution gives_classification::classification is_created_in::Activity review_written_by::Reviewer reviewOfPaper::Paper reviewWrittenBy::Possible_Reviewer ;
abstract_of_paper ::= goes_through::Activity is_sent_to::human is_created_in::Activity structure_created_by::human has_author::human gives_classification::classification article_written_by::Author has_reviewer::Reviewer has_abstract::Abstract ;
Approval_Email ::= confirm::Event ;
Hotel_registration_form ::= ε ;
AntennasTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
MicroelectronicsTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
lower_tier_reviewing_process ::= ε ;
ComputerNetworksOpticalTopic ::= ε ;
Contributed_Talk ::= (presentationOfPaper::Document)+ ;
Contact_Person ::= is_author_of::article performs_activity::Activity is_employed_in::institute has_topic_of_interest::Topic supervises::Activity e-mail::String last_name::String first_name::String ;
Conference_Participant ::= Demo_Chair ;
 Conference_Participant ::= OC_Member ;
 Conference_Participant ::= Early-Registered_Participant ;
 Conference_Participant ::= Late-Registered_Participant ;
 Conference_Participant ::= Tutorial_Chair ;
 Conference_Participant ::= PC_Chair ;
 Conference_Participant ::= Workshop_Chair ;
 Conference_Participant ::= Presenter ;
 Conference_Participant ::= Session_Chair ;
 Conference_Participant ::= Demo_Chair | OC_Member | Early-Registered_Participant | Late-Registered_Participant ;
Conference_city ::= ε ;
Accepting_manuscript ::= ε ;
Rejected_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
 Rejected_Paper ::= hasReview::Review ;
Event_Approval ::= (has_result::Thing)+ sent_by::Person is_followed_by::Activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human is_held_before::Time (is_held_in::Trip_day)+ is_held_after::Time is_dated_on::dateTime ;
Invited_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
PC_Member ::= SC_Member ;
 PC_Member ::= Session_Chair ;
 PC_Member ::= Tutorial_Chair ;
 PC_Member ::= PC_Chair ;
 PC_Member ::= Workshop_Chair ;
Plenary_lecture_speaker ::= submitPaper::Paper writePaper::Paper writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper ;
Academic_Institution ::= Research_Institute ;
 Academic_Institution ::= University ;
 Academic_Institution ::= scientificallyOrganises::Academic_Institution ;
Author_book_proceedings_included ::= submitPaper::Paper writePaper::Paper writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper ;
Value_added_tax ::= ε ;
Video_presentation ::= is_given_by::Active_conference_participant ;
submission_process ::= is_performed_by::human ;
Camera_ready_manuscript_deadline ::= done_till::date ;
OC_Chair ::= ε ;
MealEvent ::= ConferenceDinner ;
 MealEvent ::= hasMenu::MealMenu ;
Credit_card ::= ε ;
end_date_of_camera-ready_submission ::= ε ;
start_date_of_abstract_submission ::= ε ;
CoffeeBreak ::= ε ;
Conference_Session ::= Industrial_Session ;
Research_Institute ::= scientificallyOrganises::Academic_Institution ;
Reviewer_Role ::= assigned_by::Administrator ;
Activity_after_conference ::= Departure ;
 Activity_after_conference ::= Full_day_tour ;
 Activity_after_conference ::= Departure | Full_day_tour ;
Bank_transfer ::= ε ;
Non_speaker ::= Worker_non_speaker ;
 Non_speaker ::= Student_non_speaker ;
 Non_speaker ::= Worker_non_speaker | Student_non_speaker ;
Committe_Role ::= assigned_by::Administrator ;
Registration_form ::= ε ;
Student_non_speaker ::= ε ;
Administrative_event ::= Reviewing_results_event ;
 Administrative_event ::= Reviewing_event ;
 Administrative_event ::= Registration_of_participants_event ;
 Administrative_event ::= Submission_event ;
 Administrative_event ::= Camera_Ready_event ;
 Administrative_event ::= follows::Administrative_event parallel_with::Administrative_event ;
Review_Form_Setup ::= ε ;
Brief_introduction_for_Session_chair ::= recieved_by::User used_by::Person submited__by::User (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document ;
Camera_ready_contribution ::= ε ;
Positive_Review ::= writtenBy::Reviewer reviews::Reviewed_contribution gives_classification::classification is_created_in::Activity review_written_by::Reviewer reviewOfPaper::Paper reviewWrittenBy::Possible_Reviewer ;
PublishedPaper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
full_paper_submission_date ::= start_date_of_full_paper_submission ;
 full_paper_submission_date ::= end_date_of_full_paper_submission ;
 full_paper_submission_date ::= start_date_of_full_paper_submission | end_date_of_full_paper_submission ;
ReviewForm ::= ε ;
Hotel_fee ::= ε ;
Sponsor_company_house ::= ε ;
Student_lecturer ::= ε ;
Written_contribution ::= Submitted_contribution ;
 Written_contribution ::= Regular_contribution ;
 Written_contribution ::= Submitted_contribution | Regular_contribution ;
Conference_contributor ::= Regular_author ;
 Conference_contributor ::= Invited_speaker ;
 Conference_contributor ::= Active_conference_participant ;
 Conference_contributor ::= Regular_author | Invited_speaker ;
Event_Setup ::= Paper_Typologies ;
 Event_Setup ::= Review_Form ;
 Event_Setup ::= Submission_Template ;
 Event_Setup ::= Event_Tracks ;
 Event_Setup ::= Research_Topic ;
 Event_Setup ::= Email_Template ;
 Event_Setup ::= define::Event ;
Conference_building ::= ε ;
Corresponding_Author ::= submitPaper::Paper writePaper::Paper writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper ;
PendingPaper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
PowerlineTransmissionTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
IndustryOrganization ::= isProviderOf::Sponsorship ;
TestOnlyTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event ;
WeekRejectRating ::= ε ;
Extended_abstract ::= Abstract ;
 Extended_abstract ::= ε ;
Industrial_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
Co-chair ::= was_a_committe_co-chair_of::Committee ;
Conference_Banquet ::= ε ;
Tutorial_speaker ::= submitPaper::Paper writePaper::Paper writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper ;
Organising_Agency ::= (publisherOf::Thing)+ technicallyOrganises::Thing ;
PaperFullVersion ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
RejectRating ::= ε ;
Demo_Session ::= ε ;
SingleLevelConference ::= is_in_phase::phase_of_conference has_program::program hasMember::Person hasName::String endDate::dateTime paperDueOn::dateTime registrationDueOn::dateTime manuscriptDueOn::dateTime startDate::dateTime hasCountry::Country hasConferenceMember::ConferenceMember paperAssignmentFinalizedBy::Administrator reviewCriteriaEnteredBy::Administrator paperAssignmentToolsRunBy::Administrator virtualMeetingEnabledBy::Administrator hardcopyMailingManifestsPrintedBy::Administrator detailsEnteredBy::Administrator reviewerBiddingStartedBy::Administrator date::date reviewsPerPaper::Integer logoURL::anyURI acceptsHardcopySubmissions::Boolean siteURL::anyURI ;
Program_Committee_member ::= Senior_Program_Committee_member ;
 Program_Committee_member ::= Regular_Program_Committee_member ;
 Program_Committee_member ::= Senior_Program_Committee_member | Regular_Program_Committee_member ;
Worker_lecturer ::= ε ;
ConferenceVenuePlace ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
end_date_of_full_paper_submission ::= ε ;
Conference_contribution ::= Poster ;
 Conference_contribution ::= Written_contribution ;
 Conference_contribution ::= Presentation ;
 Conference_contribution ::= is_submitted_at::Conference_volume ;
Invited_Talk ::= (presentationOfPaper::Document)+ ;
Demo_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
CallForReviews ::= forEvent::AcademicEvent (isInitiatedBy::Person)+ hasSubmissionInstructions::String hasSubmissionDeadline::dateTime ;
acceptance_notification_email ::= ε ;
Author_attendee_cd_registration_fee ::= ε ;
ComputerNetworksManagementTopic ::= ε ;
Paper_Typologies ::= define::Event ;
Information_for_participants ::= has_authors::Person has_a_date_of_issue::date ;
Programme_Brochure ::= recieved_by::User used_by::Person submited__by::User (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document ;
NonAcademicEvent ::= MealEvent ;
 NonAcademicEvent ::= BreakEvent ;
 NonAcademicEvent ::= SocialEvent ;
 NonAcademicEvent ::= MealEvent | BreakEvent | SocialEvent ;
Fee_for_extra_trip ::= ε ;
ComputerNetworksSwitchingTopic ::= ε ;
Conference_restaurant ::= ε ;
Meta-Review ::= writtenBy::Reviewer reviews::Reviewed_contribution gives_classification::classification is_created_in::Activity review_written_by::Reviewer reviewOfPaper::Paper reviewWrittenBy::Possible_Reviewer ;
Invited_speaker ::= ε ;
Presenter_state ::= ε ;
Poster_Paper ::= hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String hasAuthor::Author acceptedBy::Administrator rejectedBy::Administrator readByMeta-Reviewer::Meta-Reviewer full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer ;
Regular_Reviewer_URL ::= ε ;
managing_of_conference_process ::= (has_result::Thing)+ sent_by::Person is_followed_by::Activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human is_held_before::Time (is_held_in::Trip_day)+ is_held_after::Time is_dated_on::dateTime ;
Call_for_paper ::= has_authors::Person has_a_date_of_issue::date ;
PersonalHistory ::= PersonalPublicationHistory ;
 PersonalHistory ::= PersonalReviewHistory ;
 PersonalHistory ::= PersonalPublicationHistory | PersonalReviewHistory ;
Conference_www ::= has_a_URL::String ;
Rejected_contribution ::= has_a_review::Review ;
Invited_talk ::= is_given_by::Active_conference_participant ;
Workshop_Chair ::= ε ;
Event_Tracks ::= define::Event ;
Submission_Template ::= define::Event ;
Author_information_form ::= ε ;
ComputerNetworksAapplicationsTopic ::= ε ;
Review_expertise ::= has_a_submitted_contribution::Submitted_contribution has_an_expertise::EEnum ;
Event_URL ::= concerned::Event ;
Important_dates ::= is_an_abstract_submission_date::date is_a_full_paper_submission_date::date is_an_ending_date::date is_a_date_of_acceptance_announcement::date is_a_date_of_camera_ready_paper_submission::date is_a_starting_date::date belong_to_a_conference_volume::Conference_volume ;
Submission_event ::= follows::Administrative_event parallel_with::Administrative_event ;
ActivePaper ::= RatedPapers ;
 ActivePaper ::= hasRating::ReviewRating ;
Feature_Request ::= ε ;
AcceptedPaper ::= relatedToEvent::PaperPresentation ;
TravelGrant ::= providedBy::Organization hasCostCurrency::String hasCostAmount::Integer ;
Review_preference ::= (has_a_topic_or_a_submission_contribution::Thing)+ has_a_degree::Integer ;
Memeber_registration_fee ::= ε ;
--------------------metamodels::ifc2x3.bgf--------------------
IfcFlowStorageDevice ::= ε ;
IfcSoundProperties ::= IsAttenuating::α SoundScale::α SoundValues::α ;
IfcStructuralLoadSingleForce ::= ForceX::α ForceY::α ForceZ::α MomentX::α MomentY::α MomentZ::α ;
IfcRamp ::= ShapeType::α ;
IfcArithmeticOperatorEnum ::= (SUBTRACT::ε) | (MULTIPLY::ε) | (DIVIDE::ε) | (ADD::ε) ;
IfcHeatExchangerTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (SHELLANDTUBE::ε) | (PLATE::ε) ;
IfcBuildingStorey ::= Elevation::α ;
IfcElectricalBaseProperties ::= ElectricCurrentType::α InputVoltage::α InputFrequency::α FullLoadCurrent::α MinimumCircuitCurrent::α MaximumPowerInput::α RatedPowerInput::α InputPhase::α ;
IfcOrganizationRelationship ::= Name::α Description::α RelatingOrganization::α (RelatedOrganizations::α)+ ;
IfcPlate ::= ε ;
IfcAsymmetricIShapeProfileDef ::= TopFlangeWidth::α TopFlangeThickness::α TopFlangeFilletRadius::α CentreOfGravityInY::α ;
IfcTShapeProfileDef ::= Depth::α FlangeWidth::α WebThickness::α FlangeThickness::α FilletRadius::α FlangeEdgeRadius::α WebEdgeRadius::α WebSlope::α FlangeSlope::α CentreOfGravityInY::α ;
IfcFuelProperties ::= CombustionTemperature::α CarbonContent::α LowerHeatingValue::α HigherHeatingValue::α ;
IfcQuantityVolume ::= VolumeValue::α ;
IfcRelSchedulesCostItems ::= ε ;
IfcDraughtingPreDefinedColour ::= ε ;
IfcValveTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (STOPCOCK::ε) | (STEAMTRAP::ε) | (SAFETYCUTOFF::ε) | (REGULATING::ε) | (PRESSURERELIEF::ε) | (PRESSUREREDUCING::ε) | (MIXING::ε) | (ISOLATING::ε) | (GASTAP::ε) | (GASCOCK::ε) | (FLUSHING::ε) | (FAUCET::ε) | (DOUBLEREGULATING::ε) | (DOUBLECHECK::ε) | (DRAWOFFCOCK::ε) | (DIVERTING::ε) | (COMMISSIONING::ε) | (CHECK::ε) | (CHANGEOVER::ε) | (ANTIVACUUM::ε) | (AIRRELEASE::ε) ;
IfcShellBasedSurfaceModel ::= (SbsmBoundary::α)+ ;
IfcConstructionResource ::= ResourceIdentifier::α ResourceGroup::α ResourceConsumption::α BaseQuantity::α ;
IfcActorRole ::= Role::α UserDefinedRole::α Description::α ;
IfcRoundedRectangleProfileDef ::= RoundingRadius::α ;
IfcDistributionChamberElementType ::= PredefinedType::α ;
IfcWorkControlTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (PLANNED::ε) | (BASELINE::ε) | (ACTUAL::ε) ;
IfcDerivedUnitElement ::= Unit::α Exponent::α ;
IfcQuantityTime ::= TimeValue::α ;
IfcChamferEdgeFeature ::= Width::α Height::α ;
IfcDefinedSymbol ::= Definition::α Target::α ;
IfcCsgSolid ::= TreeRootExpression::α ;
IfcLine ::= Pnt::α Dir::α ;
IfcTextPath ::= (DOWN::ε) | (UP::ε) | (RIGHT::ε) | (LEFT::ε) ;
IfcUnitAssignment ::= (Units::α)+ ;
IfcMetricValueSelect ::= IfcDateTimeSelectvalue::α IfcTextvalue::α IfcCostValuevalue::α IfcTimeSeriesvalue::α IfcTablevalue::α IfcMeasureWithUnitvalue::α ;
IfcStructuralPlanarAction ::= ProjectedOrTrue::α ;
IfcRelConnectsStructuralMember ::= RelatingStructuralMember::α RelatedStructuralConnection::α AppliedCondition::α AdditionalConditions::α ConditionCoordinateSystem::α SupportedLength::α ;
IfcEdgeFeature ::= FeatureLength::α ;
IfcSectionProperties ::= StartProfile::α EndProfile::α SectionType::α ;
IfcFlowController ::= ε ;
IfcDiscreteAccessoryType ::= ε ;
IfcDamperType ::= PredefinedType::α ;
IfcRelAssociatesApproval ::= RelatingApproval::α ;
IfcAsset ::= OriginalValue::α CurrentValue::α TotalReplacementCost::α Owner::α User::α ResponsiblePerson::α IncorporationDate::α DepreciatedValue::α AssetID::α ;
IfcPumpTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (VERTICALTURBINE::ε) | (VERTICALINLINE::ε) | (SPLITCASE::ε) | (ENDSUCTION::ε) | (CIRCULATOR::ε) ;
IfcAddressTypeEnum ::= (USERDEFINED::ε) | (DISTRIBUTIONPOINT::ε) | (HOME::ε) | (SITE::ε) | (OFFICE::ε) ;
IfcTopologicalRepresentationItem ::= ε ;
IfcStructuralLoad ::= Name::α ;
IfcRelOverridesProperties ::= (OverridingProperties::α)+ ;
IfcRectangleProfileDef ::= XDim::α YDim::α ;
IfcRailingType ::= PredefinedType::α ;
IfcVibrationIsolatorType ::= PredefinedType::α ;
IfcSizeSelect ::= IfcPositiveRatioMeasurevalue::α IfcNormalisedRatioMeasurevalue::α IfcPositiveLengthMeasurevalue::α IfcDescriptiveMeasurevalue::α IfcLengthMeasurevalue::α IfcRatioMeasurevalue::α ;
IfcAnalysisTheoryTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (FULL_NONLINEAR_THEORY::ε) | (THIRD_ORDER_THEORY::ε) | (SECOND_ORDER_THEORY::ε) | (FIRST_ORDER_THEORY::ε) ;
IfcBSplineCurve ::= Degree::α CurveForm::α ClosedCurve::α SelfIntersect::α ControlPointsList::α ;
IfcTimeSeriesSchedule ::= (ApplicableDates::α)+ TimeSeries::α TimeSeriesScheduleType::α ;
IfcCartesianTransformationOperator3D ::= Axis3::α ;
IfcSweptAreaSolid ::= SweptArea::α Position::α ;
IfcSurfaceStyleRefraction ::= RefractionIndex::α DispersionFactor::α ;
IfcTrimmingSelect ::= IfcParameterValuevalue::α IfcCartesianPointvalue::α ;
IfcMove ::= MoveFrom::α MoveTo::α (PunchList::α)+ ;
IfcQuantityLength ::= LengthValue::α ;
IfcControl ::= Controls::α ;
IfcLibraryReference ::= ReferenceIntoLibrary::α ;
IfcBoundedSurface ::= ε ;
IfcPreDefinedDimensionSymbol ::= ε ;
IfcFlowTerminal ::= ε ;
IfcFlowMeterType ::= PredefinedType::α ;
IfcOpticalMaterialProperties ::= VisibleTransmittance::α SolarTransmittance::α ThermalIrTransmittance::α ThermalIrEmissivityBack::α ThermalIrEmissivityFront::α VisibleReflectanceBack::α VisibleReflectanceFront::α SolarReflectanceFront::α SolarReflectanceBack::α ;
IfcEvaporativeCoolerType ::= PredefinedType::α ;
IfcPerformanceHistory ::= LifeCyclePhase::α ;
IfcVector ::= Orientation::α Magnitude::α ;
IfcResourceConsumptionEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (NOTOCCUPIED::ε) | (PARTIALLYOCCUPIED::ε) | (OCCUPIED::ε) | (NOTCONSUMED::ε) | (PARTIALLYCONSUMED::ε) | (CONSUMED::ε) ;
IfcRelConnectsWithRealizingElements ::= (RealizingElements::α)+ ConnectionType::α ;
IfcPropertySet ::= (HasProperties::α)+ ;
IfcChillerTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (HEATRECOVERY::ε) | (WATERCOOLED::ε) | (AIRCOOLED::ε) ;
IfcBSplineCurveForm ::= (UNSPECIFIED::ε) | (HYPERBOLIC_ARC::ε) | (PARABOLIC_ARC::ε) | (ELLIPTIC_ARC::ε) | (CIRCULAR_ARC::ε) | (POLYLINE_FORM::ε) ;
IfcAlarmTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (WHISTLE::ε) | (SIREN::ε) | (MANUALPULLBOX::ε) | (LIGHT::ε) | (BREAKGLASSBUTTON::ε) | (BELL::ε) ;
IfcVertexPoint ::= VertexGeometry::α ;
IfcStructuralPointAction ::= ε ;
IfcExternallyDefinedSymbol ::= ε ;
IfcSurfaceCurveSweptAreaSolid ::= StartParam::α EndParam::α Directrix::α ReferenceSurface::α ;
IfcCartesianTransformationOperator2D ::= ε ;
IfcLightSourcePositional ::= Radius::α ConstantAttenuation::α DistanceAttenuation::α QuadricAttenuation::α Position::α ;
IfcSlabTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (BASESLAB::ε) | (LANDING::ε) | (ROOF::ε) | (FLOOR::ε) ;
IfcContextDependentUnit ::= Name::α ;
IfcBuilding ::= ElevationOfRefHeight::α ElevationOfTerrain::α BuildingAddress::α ;
IfcStructuralLoadStatic ::= ε ;
IfcRelConnectsPorts ::= RelatingPort::α RelatedPort::α RealizingElement::α ;
IfcBeam ::= ε ;
IfcFlowTreatmentDeviceType ::= ε ;
IfcDoor ::= OverallHeight::α OverallWidth::α ;
IfcDuctSilencerType ::= PredefinedType::α ;
IfcZone ::= ε ;
IfcDimensionCurve ::= ε ;
IfcCableCarrierSegmentTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (CONDUITSEGMENT::ε) | (CABLETRUNKINGSEGMENT::ε) | (CABLETRAYSEGMENT::ε) | (CABLELADDERSEGMENT::ε) ;
IfcStructuralReaction ::= Causes::α ;
IfcFeatureElement ::= ε ;
IfcElectricGeneratorTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) ;
IfcDoorStyleOperationEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (ROLLINGUP::ε) | (REVOLVING::ε) | (DOUBLE_DOOR_FOLDING::ε) | (FOLDING_TO_RIGHT::ε) | (FOLDING_TO_LEFT::ε) | (DOUBLE_DOOR_SLIDING::ε) | (SLIDING_TO_RIGHT::ε) | (SLIDING_TO_LEFT::ε) | (DOUBLE_DOOR_DOUBLE_SWING::ε) | (DOUBLE_SWING_RIGHT::ε) | (DOUBLE_SWING_LEFT::ε) | (DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT::ε) | (DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT::ε) | (DOUBLE_DOOR_SINGLE_SWING::ε) | (SINGLE_SWING_RIGHT::ε) | (SINGLE_SWING_LEFT::ε) ;
IfcFillAreaStyleTileSymbolWithStyle ::= Symbol::α ;
IfcProjectionElement ::= ε ;
IfcCsgPrimitive3D ::= Position::α ;
IfcProductDefinitionShape ::= HasShapeAspects::α ;
IfcPostalAddress ::= InternalLocation::α (AddressLines::α)+ PostalBox::α Town::α Region::α PostalCode::α Country::α ;
IfcTopologyRepresentation ::= ε ;
IfcStructuralConnection ::= ConnectsStructuralMembers::α AppliedCondition::α ;
IfcFlowSegment ::= ε ;
IfcRoleEnum ::= (USERDEFINED::ε) | (RESELLER::ε) | (FIELDCONSTRUCTIONMANAGER::ε) | (CONSTRUCTIONMANAGER::ε) | (CONSULTANT::ε) | (OWNER::ε) | (ENGINEER::ε) | (COMISSIONINGENGINEER::ε) | (CIVILENGINEER::ε) | (FACILITIESMANAGER::ε) | (PROJECTMANAGER::ε) | (ELECTRICALENGINEER::ε) | (MECHANICALENGINEER::ε) | (BUILDINGOPERATOR::ε) | (BUILDINGOWNER::ε) | (CLIENT::ε) | (COSTENGINEER::ε) | (STRUCTURALENGINEER::ε) | (ARCHITECT::ε) | (SUBCONTRACTOR::ε) | (CONTRACTOR::ε) | (MANUFACTURER::ε) | (SUPPLIER::ε) ;
IfcPipeSegmentTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (SPOOL::ε) | (GUTTER::ε) | (RIGIDSEGMENT::ε) | (FLEXIBLESEGMENT::ε) ;
IfcSlabType ::= PredefinedType::α ;
IfcPhysicalSimpleQuantity ::= Unit::α ;
IfcFlowMovingDevice ::= ε ;
IfcDoorLiningProperties ::= LiningDepth::α LiningThickness::α ThresholdDepth::α ThresholdThickness::α TransomThickness::α TransomOffset::α LiningOffset::α ThresholdOffset::α CasingThickness::α CasingDepth::α ShapeAspectStyle::α ;
IfcCableSegmentType ::= PredefinedType::α ;
IfcRampTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (SPIRAL_RAMP::ε) | (HALF_TURN_RAMP::ε) | (TWO_QUARTER_TURN_RAMP::ε) | (QUARTER_TURN_RAMP::ε) | (TWO_STRAIGHT_RUN_RAMP::ε) | (STRAIGHT_RUN_RAMP::ε) ;
IfcRelFlowControlElements ::= (RelatedControlElements::α)+ RelatingFlowElement::α ;
IfcInternalOrExternalEnum ::= (NOTDEFINED::ε) | (EXTERNAL::ε) | (INTERNAL::ε) ;
IfcRelAssignsToControl ::= RelatingControl::α ;
IfcShapeModel ::= OfShapeAspect::α ;
IfcRelAssociatesClassification ::= RelatingClassification::α ;
IfcPlateTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (SHEET::ε) | (CURTAIN_PANEL::ε) ;
IfcProjectedOrTrueLengthEnum ::= (TRUE_LENGTH::ε) | (PROJECTED_LENGTH::ε) ;
IfcElectricGeneratorType ::= PredefinedType::α ;
IfcCostSchedule ::= Status::α ID::α PredefinedType::α SubmittedBy::α PreparedBy::α SubmittedOn::α (TargetUsers::α)+ UpdateDate::α ;
IfcSpecularHighlightSelect ::= IfcSpecularRoughnessvalue::α IfcSpecularExponentvalue::α ;
IfcVibrationIsolatorTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (SPRING::ε) | (COMPRESSION::ε) ;
IfcColourOrFactor ::= IfcNormalisedRatioMeasurevalue::α IfcColourRgbvalue::α ;
IfcStyleModel ::= ε ;
IfcPropertyTableValue ::= (DefiningValues::α)+ (DefinedValues::α)+ DefiningUnit::α DefinedUnit::α Expression::α ;
IfcActuatorTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (THERMOSTATICACTUATOR::ε) | (PNEUMATICACTUATOR::ε) | (HYDRAULICACTUATOR::ε) | (HANDOPERATEDACTUATOR::ε) | (ELECTRICACTUATOR::ε) ;
IfcPresentationLayerWithStyle ::= LayerOn::α LayerFrozen::α LayerBlocked::α (LayerStyles::α)+ ;
IfcIShapeProfileDef ::= OverallWidth::α OverallDepth::α WebThickness::α FlangeThickness::α FilletRadius::α ;
IfcFilterTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (WATERFILTER::ε) | (STRAINER::ε) | (OILFILTER::ε) | (ODORFILTER::ε) | (AIRPARTICLEFILTER::ε) ;
IfcFlowSegmentType ::= ε ;
IfcGroup ::= IsGroupedBy::α ;
IfcDirection ::= DirectionRatios::α ;
IfcCooledBeamTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (PASSIVE::ε) | (ACTIVE::ε) ;
IfcServiceLifeFactorTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (G_MAINTENANCELEVEL::ε) | (F_INUSECONDITIONS::ε) | (E_OUTDOORENVIRONMENT::ε) | (D_INDOORENVIRONMENT::ε) | (C_WORKEXECUTIONLEVEL::ε) | (B_DESIGNLEVEL::ε) | (A_QUALITYOFCOMPONENTS::ε) ;
IfcPolygonalBoundedHalfSpace ::= Position::α PolygonalBoundary::α ;
IfcRectangleHollowProfileDef ::= WallThickness::α InnerFilletRadius::α OuterFilletRadius::α ;
IfcCoilType ::= PredefinedType::α ;
IfcMappedItem ::= MappingSource::α MappingTarget::α ;
IfcAirToAirHeatRecoveryTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (THERMOSIPHONCOILTYPEHEATEXCHANGERS::ε) | (THERMOSIPHONSEALEDTUBEHEATEXCHANGERS::ε) | (TWINTOWERENTHALPYRECOVERYLOOPS::ε) | (HEATPIPE::ε) | (RUNAROUNDCOILLOOP::ε) | (ROTARYWHEEL::ε) | (FIXEDPLATEPARALLELFLOWEXCHANGER::ε) | (FIXEDPLATECROSSFLOWEXCHANGER::ε) | (FIXEDPLATECOUNTERFLOWEXCHANGER::ε) ;
IfcPlateType ::= PredefinedType::α ;
IfcQuantityWeight ::= WeightValue::α ;
IfcProduct ::= ReferencedBy::α ObjectPlacement::α Representation::α ReferencedInStructures::α ContainedInStructure::α ;
IfcProxy ::= ProxyType::α Tag::α ;
IfcFanType ::= PredefinedType::α ;
IfcDuctSegmentType ::= PredefinedType::α ;
IfcMaterialLayer ::= LayerThickness::α IsVentilated::α ToMaterialLayerSet::α Material::α ;
IfcMeasureWithUnit ::= ValueComponent::α UnitComponent::α ;
IfcCircleHollowProfileDef ::= WallThickness::α ;
IfcSIUnit ::= Prefix::α Name::α ;
IfcTextStyleTextModel ::= TextAlign::α TextDecoration::α TextTransform::α TextIndent::α LetterSpacing::α WordSpacing::α LineHeight::α ;
IfcStructuralLoadLinearForce ::= LinearForceX::α LinearForceY::α LinearForceZ::α LinearMomentX::α LinearMomentY::α LinearMomentZ::α ;
IfcColourRgb ::= Red::α Green::α Blue::α ;
IfcLampTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (TUNGSTENFILAMENT::ε) | (METALHALIDE::ε) | (HIGHPRESSURESODIUM::ε) | (HIGHPRESSUREMERCURY::ε) | (FLUORESCENT::ε) | (COMPACTFLUORESCENT::ε) ;
IfcLaborResource ::= SkillSet::α ;
IfcDimensionExtentUsage ::= (TARGET::ε) | (ORIGIN::ε) ;
IfcGeometricRepresentationSubContext ::= TargetScale::α TargetView::α UserDefinedTargetView::α ParentContext::α ;
IfcPlane ::= ε ;
IfcRelDefinesByType ::= RelatingType::α ;
IfcCircle ::= Radius::α ;
IfcSurfaceTextureEnum ::= (NOTDEFINED::ε) | (TRANSPARENCYMAP::ε) | (TEXTURE::ε) | (SPECULAR::ε) | (SHININESS::ε) | (SELFILLUMINATION::ε) | (REFLECTION::ε) | (OPACITY::ε) | (BUMP::ε) ;
IfcTrapeziumProfileDef ::= BottomXDim::α TopXDim::α YDim::α TopXOffset::α ;
IfcDuctSilencerTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (ROUND::ε) | (RECTANGULAR::ε) | (FLATOVAL::ε) ;
IfcRelAssociatesProfileProperties ::= ProfileOrientation::α RelatingProfileProperties::α ProfileSectionLocation::α ;
IfcDistributionElement ::= ε ;
IfcManifoldSolidBrep ::= Outer::α ;
IfcPropertyBoundedValue ::= UpperBoundValue::α LowerBoundValue::α Unit::α ;
IfcSite ::= RefLatitude::α RefLongitude::α RefElevation::α LandTitleNumber::α SiteAddress::α ;
IfcConstructionMaterialResource ::= (Suppliers::α)+ UsageRatio::α ;
IfcGrid ::= (UAxes::α)+ (VAxes::α)+ (WAxes::α)+ ;
IfcFlowControllerType ::= ε ;
IfcAirToAirHeatRecoveryType ::= PredefinedType::α ;
IfcZShapeProfileDef ::= Depth::α FlangeWidth::α WebThickness::α FlangeThickness::α FilletRadius::α EdgeRadius::α ;
IfcRepresentationMap ::= MapUsage::α MappingOrigin::α MappedRepresentation::α ;
IfcApproval ::= Description::α ApprovalStatus::α ApprovalLevel::α ApprovalQualifier::α Name::α Identifier::α Actors::α IsRelatedWith::α Relates::α ApprovalDateTime::α ;
IfcDistributionFlowElement ::= HasControlElements::α ;
IfcMaterialProperties ::= Material::α ;
IfcProtectiveDeviceType ::= PredefinedType::α ;
IfcOccupantTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (TENANT::ε) | (OWNER::ε) | (LETTINGAGENT::ε) | (LESSOR::ε) | (LESSEE::ε) | (ASSIGNOR::ε) | (ASSIGNEE::ε) ;
IfcBoilerType ::= PredefinedType::α ;
IfcConstraintRelationship ::= Name::α Description::α RelatingConstraint::α (RelatedConstraints::α)+ ;
IfcOrganization ::= Id::α Name::α Description::α IsRelatedBy::α Relates::α Engages::α (Roles::α)+ (Addresses::α)+ ;
IfcSpaceHeaterTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (UNITHEATER::ε) | (FINNEDTUBEUNIT::ε) | (BASEBOARDHEATER::ε) | (CONVECTOR::ε) | (TUBULARRADIATOR::ε) | (PANELRADIATOR::ε) | (SECTIONALRADIATOR::ε) ;
IfcColumnType ::= PredefinedType::α ;
IfcMechanicalConcreteMaterialProperties ::= CompressiveStrength::α MaxAggregateSize::α AdmixturesDescription::α Workability::α ProtectivePoreRatio::α WaterImpermeability::α ;
IfcDateAndTime ::= DateComponent::α TimeComponent::α ;
IfcFooting ::= PredefinedType::α ;
IfcCartesianPoint ::= Coordinates::α ;
IfcCompositeCurve ::= (Segments::α)+ SelfIntersect::α ;
IfcChangeActionEnum ::= (MODIFIEDDELETED::ε) | (MODIFIEDADDED::ε) | (DELETED::ε) | (ADDED::ε) | (MODIFIED::ε) | (NOCHANGE::ε) ;
IfcCraneRailFShapeProfileDef ::= OverallHeight::α HeadWidth::α Radius::α HeadDepth2::α HeadDepth3::α WebThickness::α BaseDepth1::α BaseDepth2::α CentreOfGravityInY::α ;
IfcTimeSeries ::= Name::α Description::α TimeSeriesDataType::α DataOrigin::α UserDefinedDataOrigin::α DocumentedBy::α StartTime::α EndTime::α Unit::α ;
IfcFlowTerminalType ::= ε ;
IfcReinforcingBar ::= NominalDiameter::α CrossSectionArea::α BarLength::α BarRole::α BarSurface::α ;
IfcTubeBundleTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (FINNED::ε) ;
IfcSurface ::= ε ;
IfcSectionReinforcementProperties ::= LongitudinalStartPosition::α LongitudinalEndPosition::α TransversePosition::α ReinforcementRole::α SectionDefinition::α (CrossSectionReinforcementDefinitions::α)+ ;
IfcRelAssignsToProduct ::= RelatingProduct::α ;
IfcStructuralLoadSingleForceWarping ::= WarpingMoment::α ;
IfcComplexProperty ::= (HasProperties::α)+ UsageName::α ;
IfcElementarySurface ::= Position::α ;
IfcPropertyListValue ::= (ListValues::α)+ Unit::α ;
IfcConic ::= Position::α ;
IfcRelConnectsElements ::= ConnectionGeometry::α RelatingElement::α RelatedElement::α ;
IfcThermalLoadTypeEnum ::= (NOTDEFINED::ε) | (RADIANT::ε) | (LATENT::ε) | (SENSIBLE::ε) ;
IfcRoundedEdgeFeature ::= Radius::α ;
IfcReinforcingElement ::= SteelGrade::α ;
IfcRibPlateDirectionEnum ::= (DIRECTION_Y::ε) | (DIRECTION_X::ε) ;
IfcTransformerTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (VOLTAGE::ε) | (FREQUENCY::ε) | (CURRENT::ε) ;
IfcStairFlightTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (FREEFORM::ε) | (CURVED::ε) | (SPIRAL::ε) | (WINDER::ε) | (STRAIGHT::ε) ;
IfcOutletTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (POWEROUTLET::ε) | (COMMUNICATIONSOUTLET::ε) | (AUDIOVISUALOUTLET::ε) ;
IfcFireSuppressionTerminalType ::= PredefinedType::α ;
IfcSurfaceStyle ::= Styles::α Side::α ;
IfcOpeningElement ::= HasFillings::α ;
IfcRelAggregates ::= ε ;
IfcCurveStyleFontAndScaling ::= Name::α CurveFontScaling::α CurveFont::α ;
IfcEdgeLoop ::= (EdgeList::α)+ ;
IfcAirTerminalBoxTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (VARIABLEFLOWPRESSUREINDEPENDANT::ε) | (VARIABLEFLOWPRESSUREDEPENDANT::ε) | (CONSTANTFLOW::ε) ;
IfcRepresentationItem ::= StyledByItem::α ;
IfcBuildingElementProxyType ::= PredefinedType::α ;
IfcRailingTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (BALUSTRADE::ε) | (GUARDRAIL::ε) | (HANDRAIL::ε) ;
IfcBoundingBox ::= XDim::α YDim::α ZDim::α Corner::α ;
IfcCompositeProfileDef ::= Profiles::α Label::α ;
IfcCableCarrierFittingTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (TEE::ε) | (REDUCER::ε) | (CROSS::ε) | (BEND::ε) ;
IfcPipeSegmentType ::= PredefinedType::α ;
IfcLibraryInformation ::= Name::α Version::α Publisher::α VersionDate::α (LibraryReference::α)+ ;
IfcConnectionGeometry ::= ε ;
IfcFlowMovingDeviceType ::= ε ;
IfcExternallyDefinedSurfaceStyle ::= ε ;
IfcActor ::= IsActingUpon::α TheActor::α ;
IfcEvaporativeCoolerTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (INDIRECTDIRECTCOMBINATION::ε) | (INDIRECTEVAPORATIVECOOLINGTOWERORCOILCOOLER::ε) | (INDIRECTEVAPORATIVEWETCOIL::ε) | (INDIRECTEVAPORATIVEPACKAGEAIRCOOLER::ε) | (DIRECTEVAPORATIVEAIRWASHER::ε) | (DIRECTEVAPORATIVEPACKAGEDROTARYAIRCOOLER::ε) | (DIRECTEVAPORATIVESLINGERSPACKAGEDAIRCOOLER::ε) | (DIRECTEVAPORATIVERIGIDMEDIAAIRCOOLER::ε) | (DIRECTEVAPORATIVERANDOMMEDIAAIRCOOLER::ε) ;
IfcTextureCoordinate ::= AnnotatedSurface::α ;
IfcFlowFitting ::= ε ;
IfcPlanarExtent ::= SizeInX::α SizeInY::α ;
IfcGeometricRepresentationContext ::= CoordinateSpaceDimension::α Precision::α HasSubContexts::α WorldCoordinateSystem::α TrueNorth::α ;
IfcPipeFittingTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (TRANSITION::ε) | (OBSTRUCTION::ε) | (JUNCTION::ε) | (EXIT::ε) | (ENTRY::ε) | (CONNECTOR::ε) | (BEND::ε) ;
IfcTerminatorSymbol ::= AnnotatedCurve::α ;
IfcTelecomAddress ::= (TelephoneNumbers::α)+ (FacsimileNumbers::α)+ PagerNumber::α (ElectronicMailAddresses::α)+ WWWHomePageURL::α ;
IfcSurfaceStyleRendering ::= Transparency::α ReflectanceMethod::α DiffuseColour::α TransmissionColour::α DiffuseTransmissionColour::α ReflectionColour::α SpecularColour::α SpecularHighlight::α ;
IfcStructuredDimensionCallout ::= ε ;
IfcWorkPlan ::= ε ;
IfcObjectPlacement ::= PlacesObject::α ReferencedByPlacements::α ;
IfcPlacement ::= Location::α ;
IfcAirTerminalTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (LINEARDIFFUSER::ε) | (LINEARGRILLE::ε) | (IRIS::ε) | (EYEBALL::ε) | (DIFFUSER::ε) | (REGISTER::ε) | (GRILLE::ε) ;
IfcProperty ::= Name::α Description::α PropertyForDependance::α PropertyDependsOn::α PartOfComplex::α ;
IfcConversionBasedUnit ::= ConversionFactor::α Name::α ;
IfcActuatorType ::= PredefinedType::α ;
IfcConnectionPointEccentricity ::= EccentricityInX::α EccentricityInY::α EccentricityInZ::α ;
IfcLightEmissionSourceEnum ::= (NOTDEFINED::ε) | (TUNGSTENFILAMENT::ε) | (METALHALIDE::ε) | (MAINVOLTAGEHALOGEN::ε) | (LOWVOLTAGEHALOGEN::ε) | (LOWPRESSURESODIUM::ε) | (LIGHTEMITTINGDIODE::ε) | (HIGHPRESSURESODIUM::ε) | (HIGHPRESSUREMERCURY::ε) | (FLUORESCENT::ε) | (COMPACTFLUORESCENT::ε) ;
IfcInventoryTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (FURNITUREINVENTORY::ε) | (SPACEINVENTORY::ε) | (ASSETINVENTORY::ε) ;
IfcRelAssociatesMaterial ::= RelatingMaterial::α ;
IfcWorkSchedule ::= ε ;
IfcProcedure ::= ProcedureID::α ProcedureType::α UserDefinedProcedureType::α ;
IfcRightCircularCylinder ::= Height::α Radius::α ;
IfcPileConstructionEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (PREFAB_STEEL::ε) | (PRECAST_CONCRETE::ε) | (COMPOSITE::ε) | (CAST_IN_PLACE::ε) ;
IfcApplication ::= Version::α ApplicationFullName::α ApplicationIdentifier::α ApplicationDeveloper::α ;
IfcBezierCurve ::= ε ;
IfcFurnitureStandard ::= ε ;
IfcPumpType ::= PredefinedType::α ;
IfcFeatureElementAddition ::= ProjectsElements::α ;
IfcMechanicalFastener ::= NominalDiameter::α NominalLength::α ;
IfcPolyline ::= Points::α ;
IfcRelDefines ::= (RelatedObjects::α)+ ;
IfcSolidModel ::= ε ;
IfcRelAssociatesDocument ::= RelatingDocument::α ;
IfcOccupant ::= PredefinedType::α ;
IfcDraughtingPreDefinedCurveFont ::= ε ;
IfcBooleanClippingResult ::= ε ;
IfcGlobalOrLocalEnum ::= (LOCAL_COORDS::ε) | (GLOBAL_COORDS::ε) ;
IfcConnectionCurveGeometry ::= CurveOnRelatingElement::α CurveOnRelatedElement::α ;
IfcRationalBezierCurve ::= WeightsData::α ;
IfcElectricalCircuit ::= ε ;
IfcDerivedUnit ::= UnitType::α UserDefinedType::α (Elements::α)+ ;
IfcStructuralConnectionCondition ::= Name::α ;
IfcAirTerminalType ::= PredefinedType::α ;
IfcCurrencyEnum ::= (NOK::ε) | (ZWD::ε) | (ZAR::ε) | (XEU::ε) | (VND::ε) | (VEB::ε) | (USD::ε) | (TWD::ε) | (TTD::ε) | (TRL::ε) | (THB::ε) | (SKP::ε) | (SGD::ε) | (SEK::ε) | (SCR::ε) | (SAR::ε) | (RUR::ε) | (QAR::ε) | (PTN::ε) | (PLN::ε) | (PKR::ε) | (PHP::ε) | (PGK::ε) | (OMR::ε) | (NZD::ε) | (NLG::ε) | (MYR::ε) | (MXN::ε) | (MUR::ε) | (MTL::ε) | (LUF::ε) | (LKR::ε) | (KYD::ε) | (KWD::ε) | (KRW::ε) | (KES::ε) | (JPY::ε) | (JOD::ε) | (JMD::ε) | (ITL::ε) | (IRP::ε) | (INR::ε) | (ILS::ε) | (IDR::ε) | (ICK::ε) | (HUF::ε) | (HKD::ε) | (GRX::ε) | (GMD::ε) | (GIP::ε) | (GBP::ε) | (FRF::ε) | (FKP::ε) | (FJD::ε) | (FIM::ε) | (FAK::ε) | (EUR::ε) | (EST::ε) | (EGL::ε) | (DKK::ε) | (DEM::ε) | (DDP::ε) | (CZK::ε) | (CYS::ε) | (CNY::ε) | (CLP::ε) | (CHF::ε) | (CBD::ε) | (CAD::ε) | (BZD::ε) | (BWP::ε) | (BSD::ε) | (BRL::ε) | (BND::ε) | (BMD::ε) | (BHD::ε) | (BGL::ε) | (BEG::ε) | (BBD::ε) | (AUD::ε) | (ATS::ε) | (AES::ε) | (AED::ε) ;
IfcPropertyEnumeratedValue ::= (EnumerationValues::α)+ EnumerationReference::α ;
IfcAnnotation ::= ε ;
IfcDraughtingCalloutRelationship ::= Name::α Description::α RelatingDraughtingCallout::α RelatedDraughtingCallout::α ;
IfcSweptSurface ::= SweptCurve::α Position::α ;
IfcElectricMotorType ::= PredefinedType::α ;
IfcTrimmedCurve ::= SenseAgreement::α MasterRepresentation::α Trim1::α Trim2::α BasisCurve::α ;
IfcFillAreaStyleTiles ::= TilingPattern::α (Tiles::α)+ TilingScale::α ;
IfcLoop ::= ε ;
IfcRampFlight ::= ε ;
IfcTextureCoordinateGenerator ::= (Parameter::α)+ Mode::α ;
IfcPointOnSurface ::= PointParameterU::α PointParameterV::α BasisSurface::α ;
IfcPermit ::= PermitID::α ;
IfcMechanicalFastenerType ::= ε ;
IfcTypeObject ::= ObjectTypeOf::α (HasPropertySets::α)+ ApplicableOccurrence::α ;
IfcPreDefinedItem ::= Name::α ;
IfcMaterialLayerSet ::= (MaterialLayers::α)+ LayerSetName::α ;
IfcFillAreaStyleHatching ::= StartOfNextHatchLine::α HatchLineAppearance::α PointOfReferenceHatchLine::α PatternStart::α HatchLineAngle::α ;
IfcDoorStyle ::= OperationType::α ConstructionType::α ParameterTakesPrecedence::α Sizeable::α ;
IfcRelCoversSpaces ::= RelatedSpace::α (RelatedCoverings::α)+ ;
IfcSanitaryTerminalTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (WCSEAT::ε) | (WASHHANDBASIN::ε) | (URINAL::ε) | (TOILETPAN::ε) | (SANITARYFOUNTAIN::ε) | (SINK::ε) | (SHOWER::ε) | (CISTERN::ε) | (BIDET::ε) | (BATH::ε) ;
IfcTransportElement ::= OperationType::α CapacityByWeight::α CapacityByNumber::α ;
IfcDimensionalExponents ::= LengthExponent::α MassExponent::α TimeExponent::α ElectricCurrentExponent::α ThermodynamicTemperatureExponent::α AmountOfSubstanceExponent::α LuminousIntensityExponent::α ;
IfcBenchmarkEnum ::= (NOTEQUALTO::ε) | (EQUALTO::ε) | (LESSTHANOREQUALTO::ε) | (LESSTHAN::ε) | (GREATERTHANOREQUALTO::ε) | (GREATERTHAN::ε) ;
IfcDirectionSenseEnum ::= (NEGATIVE::ε) | (POSITIVE::ε) ;
IfcAppliedValueSelect ::= IfcMonetaryMeasurevalue::α IfcRatioMeasurevalue::α IfcMeasureWithUnitvalue::α ;
IfcCrewResource ::= ε ;
IfcEnergyConversionDeviceType ::= ε ;
IfcStairFlight ::= NumberOfRiser::α NumberOfTreads::α RiserHeight::α TreadLength::α ;
IfcDamperTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (FUMEHOODEXHAUST::ε) | (BALANCINGDAMPER::ε) | (GRAVITYRELIEFDAMPER::ε) | (GRAVITYDAMPER::ε) | (BLASTDAMPER::ε) | (RELIEFDAMPER::ε) | (BACKDRAFTDAMPER::ε) | (FIRESMOKEDAMPER::ε) | (SMOKEDAMPER::ε) | (FIREDAMPER::ε) | (CONTROLDAMPER::ε) ;
IfcPropertyDefinition ::= ε ;
IfcTendon ::= PredefinedType::α NominalDiameter::α CrossSectionArea::α TensionForce::α PreStress::α FrictionCoefficient::α AnchorageSlip::α MinCurvatureRadius::α ;
IfcStructuralCurveConnection ::= ε ;
IfcPoint ::= ε ;
IfcStructuralLoadPlanarForce ::= PlanarForceX::α PlanarForceY::α PlanarForceZ::α ;
IfcPermeableCoveringProperties ::= OperationType::α PanelPosition::α FrameDepth::α FrameThickness::α ShapeAspectStyle::α ;
IfcOffsetCurve3D ::= Distance::α SelfIntersect::α BasisCurve::α RefDirection::α ;
IfcMotorConnectionType ::= PredefinedType::α ;
IfcExternallyDefinedTextFont ::= ε ;
IfcWorkControl ::= Identifier::α Purpose::α Duration::α TotalFloat::α WorkControlType::α UserDefinedControlType::α CreationDate::α (Creators::α)+ StartTime::α FinishTime::α ;
IfcConstructionProductResource ::= ε ;
IfcAnnotationFillArea ::= OuterBoundary::α (InnerBoundaries::α)+ ;
IfcReferencesValueDocument ::= Name::α Description::α ReferencedDocument::α (ReferencingValues::α)+ ;
IfcLightDistributionData ::= MainPlaneAngle::α (SecondaryPlaneAngle::α)+ (LuminousIntensity::α)+ ;
IfcFastener ::= ε ;
IfcSubedge ::= ParentEdge::α ;
IfcWindow ::= OverallHeight::α OverallWidth::α ;
IfcActionRequest ::= RequestID::α ;
IfcCurtainWallTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) ;
IfcTextStyleWithBoxCharacteristics ::= BoxHeight::α BoxWidth::α BoxSlantAngle::α BoxRotateAngle::α CharacterSpacing::α ;
IfcRelInteractionRequirements ::= DailyInteraction::α ImportanceRating::α LocationOfInteraction::α RelatedSpaceProgram::α RelatingSpaceProgram::α ;
IfcAddress ::= Purpose::α Description::α UserDefinedPurpose::α OfPerson::α OfOrganization::α ;
IfcValue ::= IfcAbsorbedDoseMeasurevalue::α IfcAccelerationMeasurevalue::α IfcAmountOfSubstanceMeasurevalue::α IfcAngularVelocityMeasurevalue::α IfcAreaMeasurevalue::α IfcBooleanvalue::α IfcContextDependentMeasurevalue::α IfcCountMeasurevalue::α IfcCurvatureMeasurevalue::α IfcDescriptiveMeasurevalue::α IfcDoseEquivalentMeasurevalue::α IfcDynamicViscosityMeasurevalue::α IfcElectricCapacitanceMeasurevalue::α IfcElectricChargeMeasurevalue::α IfcElectricConductanceMeasurevalue::α IfcElectricCurrentMeasurevalue::α IfcElectricResistanceMeasurevalue::α IfcElectricVoltageMeasurevalue::α IfcEnergyMeasurevalue::α IfcForceMeasurevalue::α IfcFrequencyMeasurevalue::α IfcHeatFluxDensityMeasurevalue::α IfcHeatingValueMeasurevalue::α IfcIdentifiervalue::α IfcIlluminanceMeasurevalue::α IfcInductanceMeasurevalue::α IfcIntegervalue::α IfcIntegerCountRateMeasurevalue::α IfcIonConcentrationMeasurevalue::α IfcIsothermalMoistureCapacityMeasurevalue::α IfcKinematicViscosityMeasurevalue::α IfcLabelvalue::α IfcPositiveLengthMeasurevalue::α IfcLengthMeasurevalue::α IfcLinearForceMeasurevalue::α IfcLinearMomentMeasurevalue::α IfcLinearStiffnessMeasurevalue::α IfcLinearVelocityMeasurevalue::α IfcLogicalvalue::α IfcLuminousFluxMeasurevalue::α IfcLuminousIntensityDistributionMeasurevalue::α IfcLuminousIntensityMeasurevalue::α IfcMagneticFluxDensityMeasurevalue::α IfcMagneticFluxMeasurevalue::α IfcMassDensityMeasurevalue::α IfcMassFlowRateMeasurevalue::α IfcMassMeasurevalue::α IfcMassPerLengthMeasurevalue::α IfcModulusOfElasticityMeasurevalue::α IfcModulusOfLinearSubgradeReactionMeasurevalue::α IfcModulusOfRotationalSubgradeReactionMeasurevalue::α IfcModulusOfSubgradeReactionMeasurevalue::α IfcMoistureDiffusivityMeasurevalue::α IfcMolecularWeightMeasurevalue::α IfcMomentOfInertiaMeasurevalue::α IfcMonetaryMeasurevalue::α IfcNormalisedRatioMeasurevalue::α IfcNumericMeasurevalue::α IfcPHMeasurevalue::α IfcParameterValuevalue::α IfcPlanarForceMeasurevalue::α IfcPositivePlaneAngleMeasurevalue::α IfcPlaneAngleMeasurevalue::α IfcPositiveRatioMeasurevalue::α IfcPowerMeasurevalue::α IfcPressureMeasurevalue::α IfcRadioActivityMeasurevalue::α IfcRatioMeasurevalue::α IfcRealvalue::α IfcRotationalFrequencyMeasurevalue::α IfcRotationalMassMeasurevalue::α IfcRotationalStiffnessMeasurevalue::α IfcSectionModulusMeasurevalue::α IfcSectionalAreaIntegralMeasurevalue::α IfcShearModulusMeasurevalue::α IfcSolidAngleMeasurevalue::α IfcSoundPowerMeasurevalue::α IfcSoundPressureMeasurevalue::α IfcSpecificHeatCapacityMeasurevalue::α IfcTemperatureGradientMeasurevalue::α IfcTextvalue::α IfcThermalAdmittanceMeasurevalue::α IfcThermalConductivityMeasurevalue::α IfcThermalExpansionCoefficientMeasurevalue::α IfcThermalResistanceMeasurevalue::α IfcThermalTransmittanceMeasurevalue::α IfcThermodynamicTemperatureMeasurevalue::α IfcTimeMeasurevalue::α IfcTimeStampvalue::α IfcTorqueMeasurevalue::α IfcVaporPermeabilityMeasurevalue::α IfcVolumeMeasurevalue::α IfcVolumetricFlowRateMeasurevalue::α IfcWarpingConstantMeasurevalue::α IfcWarpingMomentMeasurevalue::α ;
IfcGasTerminalTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (GASBURNER::ε) | (GASBOOSTER::ε) | (GASAPPLIANCE::ε) ;
IfcDocumentReference ::= ReferenceToDocument::α ;
IfcSequenceEnum ::= (NOTDEFINED::ε) | (FINISH_FINISH::ε) | (FINISH_START::ε) | (START_FINISH::ε) | (START_START::ε) ;
IfcElectricTimeControlTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (RELAY::ε) | (TIMEDELAY::ε) | (TIMECLOCK::ε) ;
IfcOffsetCurve2D ::= Distance::α SelfIntersect::α BasisCurve::α ;
IfcGeometricSet ::= (Elements::α)+ ;
IfcLightIntensityDistribution ::= (DistributionData::α)+ LightDistributionCurve::α ;
IfcAnnotationOccurrence ::= ε ;
IfcDocumentInformationRelationship ::= RelatingDocument::α (RelatedDocuments::α)+ RelationshipType::α ;
IfcFace ::= (Bounds::α)+ ;
IfcIrregularTimeSeriesValue ::= (ListValues::α)+ TimeStamp::α ;
IfcHumidifierTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (ASSISTEDSTEAM::ε) | (ASSISTEDBUTANE::ε) | (ASSISTEDPROPANE::ε) | (ASSISTEDNATURALGAS::ε) | (ASSISTEDELECTRIC::ε) | (ADIABATICCOMPRESSEDAIRNOZZLE::ε) | (ADIABATICRIGIDMEDIA::ε) | (ADIABATICULTRASONIC::ε) | (ADIABATICATOMIZING::ε) | (ADIABATICWETTEDELEMENT::ε) | (ADIABATICPAN::ε) | (ADIABATICAIRWASHER::ε) | (STEAMINJECTION::ε) ;
IfcPresentationStyleAssignment ::= (Styles::α)+ ;
IfcHalfSpaceSolid ::= BaseSurface::α AgreementFlag::α ;
IfcConnectionPointGeometry ::= PointOnRelatingElement::α PointOnRelatedElement::α ;
IfcAnnotationSymbolOccurrence ::= ε ;
IfcTimeSeriesScheduleTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (DAILY::ε) | (WEEKLY::ε) | (MONTHLY::ε) | (ANNUAL::ε) ;
IfcDerivedUnitEnum ::= (USERDEFINED::ε) | (WARPINGMOMENTUNIT::ε) | (WARPINGCONSTANTUNIT::ε) | (THERMALEXPANSIONCOEFFICIENTUNIT::ε) | (TEMPERATUREGRADIENTUNIT::ε) | (SOUNDPRESSUREUNIT::ε) | (SOUNDPOWERUNIT::ε) | (SECTIONMODULUSUNIT::ε) | (SECTIONAREAINTEGRALUNIT::ε) | (ROTATIONALMASSUNIT::ε) | (PHUNIT::ε) | (MODULUSOFROTATIONALSUBGRADEREACTIONUNIT::ε) | (MODULUSOFLINEARSUBGRADEREACTIONUNIT::ε) | (MASSPERLENGTHUNIT::ε) | (LUMINOUSINTENSITYDISTRIBUTIONUNIT::ε) | (IONCONCENTRATIONUNIT::ε) | (HEATINGVALUEUNIT::ε) | (CURVATUREUNIT::ε) | (ACCELERATIONUNIT::ε) | (MODULUSOFSUBGRADEREACTIONUNIT::ε) | (ROTATIONALSTIFFNESSUNIT::ε) | (LINEARSTIFFNESSUNIT::ε) | (SHEARMODULUSUNIT::ε) | (MODULUSOFELASTICITYUNIT::ε) | (PLANARFORCEUNIT::ε) | (LINEARFORCEUNIT::ε) | (LINEARMOMENTUNIT::ε) | (MOMENTOFINERTIAUNIT::ε) | (TORQUEUNIT::ε) | (ROTATIONALFREQUENCYUNIT::ε) | (VOLUMETRICFLOWRATEUNIT::ε) | (VAPORPERMEABILITYUNIT::ε) | (THERMALTRANSMITTANCEUNIT::ε) | (THERMALRESISTANCEUNIT::ε) | (THERMALCONDUCTANCEUNIT::ε) | (THERMALADMITTANCEUNIT::ε) | (SPECIFICHEATCAPACITYUNIT::ε) | (MOLECULARWEIGHTUNIT::ε) | (MOISTUREDIFFUSIVITYUNIT::ε) | (MASSFLOWRATEUNIT::ε) | (MASSDENSITYUNIT::ε) | (LINEARVELOCITYUNIT::ε) | (KINEMATICVISCOSITYUNIT::ε) | (ISOTHERMALMOISTURECAPACITYUNIT::ε) | (INTEGERCOUNTRATEUNIT::ε) | (HEATFLUXDENSITYUNIT::ε) | (DYNAMICVISCOSITYUNIT::ε) | (COMPOUNDPLANEANGLEUNIT::ε) | (ANGULARVELOCITYUNIT::ε) ;
IfcEvaporatorTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (SHELLANDCOIL::ε) | (FLOODEDSHELLANDTUBE::ε) | (DIRECTEXPANSIONBRAZEDPLATE::ε) | (DIRECTEXPANSIONTUBEINTUBE::ε) | (DIRECTEXPANSIONSHELLANDTUBE::ε) ;
IfcWindowLiningProperties ::= LiningDepth::α LiningThickness::α TransomThickness::α MullionThickness::α FirstTransomOffset::α SecondTransomOffset::α FirstMullionOffset::α SecondMullionOffset::α ShapeAspectStyle::α ;
IfcRegularTimeSeries ::= (Values::α)+ TimeStep::α ;
IfcExtendedMaterialProperties ::= Description::α Name::α (ExtendedProperties::α)+ ;
IfcWindowPanelPositionEnum ::= (NOTDEFINED::ε) | (TOP::ε) | (BOTTOM::ε) | (RIGHT::ε) | (MIDDLE::ε) | (LEFT::ε) ;
IfcPreDefinedColour ::= ε ;
IfcFilterType ::= PredefinedType::α ;
IfcEllipse ::= SemiAxis1::α SemiAxis2::α ;
IfcBoundedCurve ::= ε ;
IfcRoofTypeEnum ::= (NOTDEFINED::ε) | (FREEFORM::ε) | (DOME_ROOF::ε) | (PAVILION_ROOF::ε) | (BUTTERFLY_ROOF::ε) | (RAINBOW_ROOF::ε) | (BARREL_ROOF::ε) | (MANSARD_ROOF::ε) | (GAMBREL_ROOF::ε) | (HIPPED_GABLE_ROOF::ε) | (HIP_ROOF::ε) | (GABLE_ROOF::ε) | (SHED_ROOF::ε) | (FLAT_ROOF::ε) ;
IfcSphere ::= Radius::α ;
IfcRelAssociatesLibrary ::= RelatingLibrary::α ;
IfcHygroscopicMaterialProperties ::= UpperVaporResistanceFactor::α LowerVaporResistanceFactor::α IsothermalMoistureCapacity::α VaporPermeability::α MoistureDiffusivity::α ;
IfcGeometricCurveSet ::= ε ;
IfcPlanarBox ::= Placement::α ;
IfcLightSource ::= Name::α AmbientIntensity::α Intensity::α LightColour::α ;
IfcStructuralAnalysisModel ::= OrientationOf2DPlane::α (LoadedBy::α)+ (HasResults::α)+ PredefinedType::α ;
IfcStructuralLoadSingleDisplacement ::= DisplacementX::α DisplacementY::α DisplacementZ::α RotationalDisplacementRX::α RotationalDisplacementRY::α RotationalDisplacementRZ::α ;
IfcShapeRepresentation ::= ε ;
IfcCurveBoundedPlane ::= BasisSurface::α OuterBoundary::α (InnerBoundaries::α)+ ;
IfcStructuralSurfaceMember ::= PredefinedType::α Thickness::α ;
IfcRelAssignsToProjectOrder ::= ε ;
IfcQuantityCount ::= CountValue::α ;
IfcRelSpaceBoundary ::= PhysicalOrVirtualBoundary::α InternalOrExternalBoundary::α RelatingSpace::α RelatedBuildingElement::α ConnectionGeometry::α ;
IfcDoorPanelOperationEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (ROLLINGUP::ε) | (REVOLVING::ε) | (FOLDING::ε) | (SLIDING::ε) | (DOUBLE_ACTING::ε) | (SWINGING::ε) ;
IfcLampType ::= PredefinedType::α ;
IfcProjectOrderTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (WORKORDER::ε) | (PURCHASEORDER::ε) | (MOVEORDER::ε) | (MAINTENANCEWORKORDER::ε) | (CHANGEORDER::ε) ;
IfcAnnotationFillAreaOccurrence ::= FillStyleTarget::α GlobalOrLocal::α ;
IfcArbitraryClosedProfileDef ::= OuterCurve::α ;
IfcScheduleTimeControl ::= ScheduleDuration::α ActualDuration::α RemainingTime::α FreeFloat::α TotalFloat::α IsCritical::α StartFloat::α FinishFloat::α Completion::α ScheduleTimeControlAssigned::α ActualStart::α EarlyStart::α LateStart::α ScheduleStart::α ActualFinish::α EarlyFinish::α LateFinish::α ScheduleFinish::α StatusTime::α ;
IfcBoundaryNodeConditionWarping ::= WarpingStiffness::α ;
IfcBeamTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (T_BEAM::ε) | (LINTEL::ε) | (JOIST::ε) | (BEAM::ε) ;
IfcDoorStyleConstructionEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (PLASTIC::ε) | (ALUMINIUM_PLASTIC::ε) | (ALUMINIUM_WOOD::ε) | (WOOD::ε) | (STEEL::ε) | (HIGH_GRADE_STEEL::ε) | (ALUMINIUM::ε) ;
IfcSimpleProperty ::= ε ;
IfcMaterial ::= HasRepresentation::α ClassifiedAs::α Name::α ;
IfcPhysicalOrVirtualEnum ::= (NOTDEFINED::ε) | (VIRTUAL::ε) | (PHYSICAL::ε) ;
IfcWasteTerminalTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (WASTETRAP::ε) | (WASTEDISPOSALUNIT::ε) | (ROOFDRAIN::ε) | (PETROLINTERCEPTOR::ε) | (OILINTERCEPTOR::ε) | (GREASEINTERCEPTOR::ε) | (GULLYTRAP::ε) | (GULLYSUMP::ε) | (FLOORWASTE::ε) | (FLOORTRAP::ε) ;
IfcJunctionBoxType ::= PredefinedType::α ;
IfcRibPlateProfileProperties ::= Thickness::α RibHeight::α RibWidth::α RibSpacing::α Direction::α ;
IfcOneDirectionRepeatFactor ::= RepeatFactor::α ;
IfcBoundaryNodeCondition ::= LinearStiffnessX::α LinearStiffnessY::α LinearStiffnessZ::α RotationalStiffnessX::α RotationalStiffnessY::α RotationalStiffnessZ::α ;
IfcRelConnectsStructuralActivity ::= RelatingElement::α RelatedStructuralActivity::α ;
IfcCompressorType ::= PredefinedType::α ;
IfcWaterProperties ::= IsPotable::α Hardness::α AlkalinityConcentration::α AcidityConcentration::α ImpuritiesContent::α PHLevel::α DissolvedSolidsContent::α ;
IfcPreDefinedSymbol ::= ε ;
IfcRampFlightTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (SPIRAL::ε) | (STRAIGHT::ε) ;
IfcBuildingElement ::= ε ;
IfcEnvironmentalImpactCategoryEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (TRANSPORTATION::ε) | (MANUFACTURE::ε) | (INSTALLATION::ε) | (EXTRACTION::ε) | (DISPOSAL::ε) | (COMBINEDVALUE::ε) ;
IfcElectricHeaterTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (ELECTRICMATHEATER::ε) | (ELECTRICCABLEHEATER::ε) | (ELECTRICPOINTHEATER::ε) ;
IfcSwitchingDeviceTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (TOGGLESWITCH::ε) | (SWITCHDISCONNECTOR::ε) | (STARTER::ε) | (EMERGENCYSTOP::ε) | (CONTACTOR::ε) ;
IfcDraughtingPreDefinedTextFont ::= ε ;
IfcStructuralItem ::= ε ;
IfcFlowInstrumentType ::= PredefinedType::α ;
IfcRelContainedInSpatialStructure ::= (RelatedElements::α)+ RelatingStructure::α ;
IfcEllipseProfileDef ::= SemiAxis1::α SemiAxis2::α ;
IfcDiscreteAccessory ::= ε ;
IfcPreDefinedCurveFont ::= ε ;
IfcCalendarDate ::= DayComponent::α MonthComponent::α YearComponent::α ;
IfcCoolingTowerTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (MECHANICALFORCEDDRAFT::ε) | (MECHANICALINDUCEDDRAFT::ε) | (NATURALDRAFT::ε) ;
IfcRelAssigns ::= (RelatedObjects::α)+ RelatedObjectsType::α ;
IfcColourSpecification ::= Name::α ;
IfcLightSourceAmbient ::= ε ;
IfcStyledItem ::= Item::α (Styles::α)+ Name::α ;
IfcUnitaryEquipmentTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (ROOFTOPUNIT::ε) | (SPLITSYSTEM::ε) | (AIRCONDITIONINGUNIT::ε) | (AIRHANDLER::ε) ;
IfcSIUnitName ::= (WEBER::ε) | (WATT::ε) | (VOLT::ε) | (TESLA::ε) | (STERADIAN::ε) | (SQUARE_METRE::ε) | (SIEVERT::ε) | (SIEMENS::ε) | (SECOND::ε) | (RADIAN::ε) | (PASCAL::ε) | (OHM::ε) | (NEWTON::ε) | (MOLE::ε) | (METRE::ε) | (LUX::ε) | (LUMEN::ε) | (KELVIN::ε) | (JOULE::ε) | (HERTZ::ε) | (HENRY::ε) | (GRAY::ε) | (GRAM::ε) | (FARAD::ε) | (DEGREE_CELSIUS::ε) | (CUBIC_METRE::ε) | (COULOMB::ε) | (CANDELA::ε) | (BECQUEREL::ε) | (AMPERE::ε) ;
IfcStructuralLoadTemperature ::= DeltaT_Constant::α DeltaT_Y::α DeltaT_Z::α ;
IfcBoundaryCondition ::= Name::α ;
IfcWasteTerminalType ::= PredefinedType::α ;
IfcDistributionControlElement ::= AssignedToFlowElement::α ControlElementId::α ;
IfcClassificationNotationFacet ::= NotationValue::α ;
IfcTendonTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (COATED::ε) | (BAR::ε) | (WIRE::ε) | (STRAND::ε) ;
IfcStructuralCurveTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (COMPRESSION_MEMBER::ε) | (TENSION_MEMBER::ε) | (CABLE::ε) | (PIN_JOINED_MEMBER::ε) | (RIGID_JOINED_MEMBER::ε) ;
IfcProductsOfCombustionProperties ::= SpecificHeatCapacity::α N20Content::α COContent::α CO2Content::α ;
IfcCartesianTransformationOperator3DnonUniform ::= Scale2::α Scale3::α ;
IfcDuctSegmentTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (FLEXIBLESEGMENT::ε) | (RIGIDSEGMENT::ε) ;
IfcTwoDirectionRepeatFactor ::= SecondRepeatFactor::α ;
IfcRampFlightType ::= PredefinedType::α ;
IfcSpace ::= InteriorOrExteriorSpace::α ElevationWithFlooring::α HasCoverings::α BoundedBy::α ;
IfcOpenShell ::= ε ;
IfcPresentationLayerAssignment ::= Name::α Description::α Identifier::α (AssignedItems::α)+ ;
IfcPhysicalComplexQuantity ::= Discrimination::α Quality::α Usage::α (HasQuantities::α)+ ;
IfcRelConnects ::= ε ;
IfcExternallyDefinedHatchStyle ::= ε ;
IfcElectricFlowStorageDeviceTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (UPS::ε) | (INDUCTORBANK::ε) | (HARMONICFILTER::ε) | (CAPACITORBANK::ε) | (BATTERY::ε) ;
IfcRectangularTrimmedSurface ::= U1::α V1::α U2::α V2::α Usense::α Vsense::α BasisSurface::α ;
IfcServiceLifeFactor ::= UpperValue::α MostUsedValue::α LowerValue::α PredefinedType::α ;
IfcElectricHeaterType ::= PredefinedType::α ;
IfcSanitaryTerminalType ::= PredefinedType::α ;
IfcVirtualElement ::= ε ;
IfcCurveStyleFont ::= (PatternList::α)+ Name::α ;
IfcVertexLoop ::= LoopVertex::α ;
IfcUShapeProfileDef ::= Depth::α FlangeWidth::α WebThickness::α FlangeThickness::α FilletRadius::α EdgeRadius::α FlangeSlope::α CentreOfGravityInX::α ;
IfcRelServicesBuildings ::= RelatingSystem::α (RelatedBuildings::α)+ ;
IfcWindowStyleOperationEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (TRIPLE_PANEL_HORIZONTAL::ε) | (TRIPLE_PANEL_RIGHT::ε) | (TRIPLE_PANEL_LEFT::ε) | (TRIPLE_PANEL_TOP::ε) | (TRIPLE_PANEL_BOTTOM::ε) | (TRIPLE_PANEL_VERTICAL::ε) | (DOUBLE_PANEL_HORIZONTAL::ε) | (DOUBLE_PANEL_VERTICAL::ε) | (SINGLE_PANEL::ε) ;
IfcLightSourceSpot ::= ConcentrationExponent::α SpreadAngle::α BeamWidthAngle::α Orientation::α ;
IfcProjectOrderRecord ::= (Records::α)+ PredefinedType::α ;
IfcFaceBasedSurfaceModel ::= (FbsmFaces::α)+ ;
IfcStructuralPointConnection ::= ε ;
IfcRelaxation ::= RelaxationValue::α InitialStress::α ;
IfcUnitaryEquipmentType ::= PredefinedType::α ;
IfcCurve ::= ε ;
IfcLogicalOperatorEnum ::= (LOGICALOR::ε) | (LOGICALAND::ε) ;
IfcConstructionEquipmentResource ::= ε ;
IfcMaterialLayerSetUsage ::= LayerSetDirection::α DirectionSense::α OffsetFromReferenceLine::α ForLayerSet::α ;
IfcConnectionTypeEnum ::= (NOTDEFINED::ε) | (ATEND::ε) | (ATSTART::ε) | (ATPATH::ε) ;
IfcBoilerTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (STEAM::ε) | (WATER::ε) ;
IfcPropertyDependencyRelationship ::= Name::α Description::α Expression::α DependingProperty::α DependantProperty::α ;
IfcColumn ::= ε ;
IfcPerson ::= Id::α FamilyName::α GivenName::α (MiddleNames::α)+ (PrefixTitles::α)+ (SuffixTitles::α)+ EngagedIn::α (Roles::α)+ (Addresses::α)+ ;
IfcFillAreaStyle ::= (FillStyles::α)+ ;
IfcSectionTypeEnum ::= (TAPERED::ε) | (UNIFORM::ε) ;
IfcElectricFlowStorageDeviceType ::= PredefinedType::α ;
IfcStructuralProfileProperties ::= TorsionalConstantX::α MomentOfInertiaYZ::α MomentOfInertiaY::α MomentOfInertiaZ::α WarpingConstant::α ShearCentreZ::α ShearCentreY::α ShearDeformationAreaZ::α ShearDeformationAreaY::α MaximumSectionModulusY::α MinimumSectionModulusY::α MaximumSectionModulusZ::α MinimumSectionModulusZ::α TorsionalSectionModulus::α CentreOfGravityInX::α CentreOfGravityInY::α ;
IfcDraughtingCallout ::= IsRelatedFromCallout::α IsRelatedToCallout::α (Contents::α)+ ;
IfcCurveStyleFontPattern ::= VisibleSegmentLength::α InvisibleSegmentLength::α ;
IfcCableCarrierFittingType ::= PredefinedType::α ;
IfcCooledBeamType ::= PredefinedType::α ;
IfcReinforcingMesh ::= MeshLength::α MeshWidth::α LongitudinalBarNominalDiameter::α TransverseBarNominalDiameter::α LongitudinalBarCrossSectionArea::α TransverseBarCrossSectionArea::α LongitudinalBarSpacing::α TransverseBarSpacing::α ;
IfcDocumentElectronicFormat ::= FileExtension::α MimeContentType::α MimeSubtype::α ;
IfcFastenerType ::= ε ;
IfcLightSourceGoniometric ::= ColourTemperature::α LuminousFlux::α LightEmissionSource::α Position::α ColourAppearance::α LightDistributionDataSource::α ;
IfcIrregularTimeSeries ::= (Values::α)+ ;
IfcCraneRailAShapeProfileDef ::= OverallHeight::α BaseWidth2::α Radius::α HeadWidth::α HeadDepth2::α HeadDepth3::α WebThickness::α BaseWidth4::α BaseDepth1::α BaseDepth2::α BaseDepth3::α CentreOfGravityInY::α ;
IfcCovering ::= CoversSpaces::α Covers::α PredefinedType::α ;
IfcWall ::= ε ;
IfcElementType ::= ElementType::α ;
IfcTypeProduct ::= (RepresentationMaps::α)+ Tag::α ;
IfcElectricalElement ::= ε ;
IfcElectricMotorTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (SYNCHRONOUS::ε) | (RELUCTANCESYNCHRONOUS::ε) | (POLYPHASE::ε) | (INDUCTION::ε) | (DC::ε) ;
IfcJunctionBoxTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) ;
IfcStructuralSurfaceMemberVarying ::= VaryingThicknessLocation::α SubsequentThickness::α ;
IfcGasTerminalType ::= PredefinedType::α ;
IfcElectricDistributionPoint ::= DistributionPointFunction::α UserDefinedFunction::α ;
IfcSurfaceStyleWithTextures ::= (Textures::α)+ ;
IfcTextureMap ::= (TextureMaps::α)+ ;
IfcObject ::= IsDefinedBy::α ObjectType::α ;
IfcRevolvedAreaSolid ::= Axis::α Angle::α ;
IfcEdge ::= EdgeStart::α EdgeEnd::α ;
IfcStructuralLinearAction ::= ProjectedOrTrue::α ;
IfcQuantityArea ::= AreaValue::α ;
IfcSensorTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (TEMPERATURESENSOR::ε) | (SOUNDSENSOR::ε) | (SMOKESENSOR::ε) | (PRESSURESENSOR::ε) | (MOVEMENTSENSOR::ε) | (MOISTURESENSOR::ε) | (LIGHTSENSOR::ε) | (HUMIDITYSENSOR::ε) | (HEATSENSOR::ε) | (GASSENSOR::ε) | (FLOWSENSOR::ε) | (FIRESENSOR::ε) | (CO2SENSOR::ε) ;
IfcProjectOrder ::= ID::α PredefinedType::α Status::α ;
IfcPixelTexture ::= Width::α Height::α ColourComponents::α (Pixel::α)+ ;
IfcExternalReference ::= Location::α ItemReference::α Name::α ;
IfcEvaporatorType ::= PredefinedType::α ;
IfcCableSegmentTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (CONDUCTORSEGMENT::ε) | (CABLESEGMENT::ε) ;
IfcProfileProperties ::= ProfileDefinition::α ProfileName::α ;
IfcElementCompositionEnum ::= (PARTIAL::ε) | (ELEMENT::ε) | (COMPLEX::ε) ;
IfcThermalLoadSourceEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (INFILTRATION::ε) | (RELATIVEHUMIDITY::ε) | (DRYBULBTEMPERATURE::ε) | (AIREXCHANGERATE::ε) | (EXHAUSTAIR::ε) | (RECIRCULATEDAIR::ε) | (VENTILATIONOUTSIDEAIR::ε) | (VENTILATIONINDOORAIR::ε) | (EQUIPMENT::ε) | (LIGHTING::ε) | (PEOPLE::ε) ;
IfcRelAssignsToGroup ::= RelatingGroup::α ;
IfcReinforcementDefinitionProperties ::= (ReinforcementSectionDefinitions::α)+ DefinitionType::α ;
IfcParameterizedProfileDef ::= Position::α ;
IfcLoadGroupTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (LOAD_COMBINATION::ε) | (LOAD_COMBINATION_GROUP::ε) | (LOAD_CASE::ε) | (LOAD_GROUP::ε) ;
IfcFireSuppressionTerminalTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (SPRINKLERDEFLECTOR::ε) | (SPRINKLER::ε) | (HOSEREEL::ε) | (FIREHYDRANT::ε) | (BREECHINGINLET::ε) ;
IfcDistributionElementType ::= ε ;
IfcBuildingElementProxy ::= CompositionType::α ;
IfcUnitEnum ::= (USERDEFINED::ε) | (VOLUMEUNIT::ε) | (TIMEUNIT::ε) | (THERMODYNAMICTEMPERATUREUNIT::ε) | (SOLIDANGLEUNIT::ε) | (RADIOACTIVITYUNIT::ε) | (PRESSUREUNIT::ε) | (POWERUNIT::ε) | (PLANEANGLEUNIT::ε) | (MASSUNIT::ε) | (MAGNETICFLUXUNIT::ε) | (MAGNETICFLUXDENSITYUNIT::ε) | (LUMINOUSINTENSITYUNIT::ε) | (LUMINOUSFLUXUNIT::ε) | (LENGTHUNIT::ε) | (INDUCTANCEUNIT::ε) | (ILLUMINANCEUNIT::ε) | (FREQUENCYUNIT::ε) | (FORCEUNIT::ε) | (ENERGYUNIT::ε) | (ELECTRICVOLTAGEUNIT::ε) | (ELECTRICRESISTANCEUNIT::ε) | (ELECTRICCURRENTUNIT::ε) | (ELECTRICCONDUCTANCEUNIT::ε) | (ELECTRICCHARGEUNIT::ε) | (ELECTRICCAPACITANCEUNIT::ε) | (DOSEEQUIVALENTUNIT::ε) | (AREAUNIT::ε) | (AMOUNTOFSUBSTANCEUNIT::ε) | (ABSORBEDDOSEUNIT::ε) ;
IfcThermalMaterialProperties ::= SpecificHeatCapacity::α BoilingPoint::α FreezingPoint::α ThermalConductivity::α ;
IfcAxis2Placement3D ::= Axis::α RefDirection::α ;
IfcCondenserTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (EVAPORATIVECOOLED::ε) | (AIRCOOLED::ε) | (WATERCOOLEDBRAZEDPLATE::ε) | (WATERCOOLEDTUBEINTUBE::ε) | (WATERCOOLEDSHELLCOIL::ε) | (WATERCOOLEDSHELLTUBE::ε) ;
IfcSpatialStructureElement ::= LongName::α CompositionType::α ReferencesElements::α ServicedBySystems::α ContainsElements::α ;
IfcSoundScaleEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (NR::ε) | (NC::ε) | (DBC::ε) | (DBB::ε) | (DBA::ε) ;
IfcClassificationItem ::= IsClassifiedItemIn::α IsClassifyingItemIn::α Notation::α ItemOf::α Title::α ;
IfcCostValue ::= CostType::α Condition::α ;
IfcClosedShell ::= ε ;
IfcSensorType ::= PredefinedType::α ;
IfcStackTerminalTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (RAINWATERHOPPER::ε) | (COWL::ε) | (BIRDCAGE::ε) ;
IfcTextureVertex ::= Coordinates::α ;
IfcSpaceHeaterType ::= PredefinedType::α ;
IfcConstraintAggregationRelationship ::= Name::α Description::α LogicalAggregator::α RelatingConstraint::α (RelatedConstraints::α)+ ;
IfcApprovalPropertyRelationship ::= (ApprovedProperties::α)+ Approval::α ;
IfcPolyLoop ::= Polygon::α ;
IfcRelCoversBldgElements ::= RelatingBuildingElement::α (RelatedCoverings::α)+ ;
IfcProject ::= LongName::α Phase::α (RepresentationContexts::α)+ UnitsInContext::α ;
IfcDerivedProfileDef ::= ParentProfile::α Operator::α Label::α ;
IfcCircleProfileDef ::= Radius::α ;
IfcPersonAndOrganization ::= ThePerson::α TheOrganization::α (Roles::α)+ ;
IfcTextStyleForDefinedFont ::= Colour::α BackgroundColour::α ;
IfcAxis2Placement2D ::= RefDirection::α ;
IfcTask ::= TaskId::α Status::α WorkMethod::α IsMilestone::α Priority::α ;
IfcStructuralCurveMemberVarying ::= ε ;
IfcRailing ::= PredefinedType::α ;
IfcStructuralSurfaceConnection ::= ε ;
IfcRelAssociates ::= (RelatedObjects::α)+ ;
IfcPhysicalQuantity ::= Name::α Description::α PartOfComplex::α ;
IfcCurveStyle ::= CurveFont::α CurveWidth::α CurveColour::α ;
IfcBlock ::= XLength::α YLength::α ZLength::α ;
IfcOrientedEdge ::= EdgeElement::α Orientation::α ;
IfcCostItem ::= ε ;
IfcRelAssociatesConstraint ::= RelatingConstraint::α Intent::α ;
IfcSpatialStructureElementType ::= ε ;
IfcSurfaceStyleShading ::= SurfaceColour::α ;
IfcWallStandardCase ::= ε ;
IfcTextStyleFontModel ::= (FontFamily::α)+ FontStyle::α FontVariant::α FontWeight::α FontSize::α ;
IfcControllerType ::= PredefinedType::α ;
IfcElementAssembly ::= AssemblyPlace::α PredefinedType::α ;
IfcSpaceTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) ;
IfcReinforcementBarProperties ::= TotalCrossSectionArea::α SteelGrade::α BarSurface::α EffectiveDepth::α NominalBarDiameter::α BarCount::α ;
IfcConnectionSurfaceGeometry ::= SurfaceOnRelatingElement::α SurfaceOnRelatedElement::α ;
IfcExtrudedAreaSolid ::= ExtrudedDirection::α Depth::α ;
IfcFailureConnectionCondition ::= TensionFailureX::α TensionFailureY::α TensionFailureZ::α CompressionFailureX::α CompressionFailureY::α CompressionFailureZ::α ;
IfcRectangularPyramid ::= XLength::α YLength::α Height::α ;
IfcClassificationItemRelationship ::= RelatingItem::α (RelatedItems::α)+ ;
IfcElement ::= FillsVoids::α ConnectedTo::α HasCoverings::α HasProjections::α HasStructuralMember::α HasPorts::α HasOpenings::α IsConnectionRealization::α ProvidesBoundaries::α ConnectedFrom::α Tag::α ;
IfcPermeableCoveringOperationEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (SCREEN::ε) | (LOUVER::ε) | (GRILL::ε) ;
IfcStructuralSteelProfileProperties ::= ShearAreaZ::α ShearAreaY::α PlasticShapeFactorY::α PlasticShapeFactorZ::α ;
IfcTransportElementType ::= PredefinedType::α ;
IfcFlowMeterTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (WATERMETER::ε) | (OILMETER::ε) | (GASMETER::ε) | (FLOWMETER::ε) | (ENERGYMETER::ε) | (ELECTRICMETER::ε) ;
IfcPropertyConstraintRelationship ::= Name::α Description::α RelatingConstraint::α (RelatedProperties::α)+ ;
IfcTimeSeriesDataTypeEnum ::= (NOTDEFINED::ε) | (PIECEWISECONTINUOUS::ε) | (PIECEWISECONSTANT::ε) | (PIECEWISEBINARY::ε) | (DISCRETEBINARY::ε) | (DISCRETE::ε) | (CONTINUOUS::ε) ;
IfcSIPrefix ::= (ATTO::ε) | (FEMTO::ε) | (PICO::ε) | (NANO::ε) | (MICRO::ε) | (MILLI::ε) | (CENTI::ε) | (DECI::ε) | (DECA::ε) | (HECTO::ε) | (KILO::ε) | (MEGA::ε) | (GIGA::ε) | (TERA::ε) | (PETA::ε) | (EXA::ε) ;
IfcRadiusDimension ::= ε ;
IfcPreDefinedTerminatorSymbol ::= ε ;
IfcTransitionCode ::= (CONTSAMEGRADIENTSAMECURVATURE::ε) | (CONTSAMEGRADIENT::ε) | (CONTINUOUS::ε) | (DISCONTINUOUS::ε) ;
IfcFeatureElementSubtraction ::= VoidsElements::α ;
IfcConditionCriterionSelect ::= IfcLabelvalue::α IfcMeasureWithUnitvalue::α ;
IfcProjectOrderRecordTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (WORK::ε) | (PURCHASE::ε) | (MOVE::ε) | (MAINTENANCE::ε) | (CHANGE::ε) ;
IfcBooleanOperator ::= (DIFFERENCE::ε) | (INTERSECTION::ε) | (UNION::ε) ;
IfcCoordinatedUniversalTimeOffset ::= HourOffset::α MinuteOffset::α Sense::α ;
IfcElectricApplianceType ::= PredefinedType::α ;
IfcConstraint ::= Name::α Description::α ConstraintGrade::α ConstraintSource::α UserDefinedGrade::α ClassifiedAs::α RelatesConstraints::α IsRelatedWith::α PropertiesForConstraint::α Aggregates::α IsAggregatedIn::α CreatingActor::α CreationTime::α ;
IfcElectricDistributionPointFunctionEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (SWITCHBOARD::ε) | (MOTORCONTROLCENTRE::ε) | (MIMICPANEL::ε) | (INDICATORPANEL::ε) | (GASDETECTORPANEL::ε) | (DISTRIBUTIONBOARD::ε) | (CONTROLPANEL::ε) | (CONSUMERUNIT::ε) | (ALARMPANEL::ε) ;
IfcBooleanResult ::= FirstOperand::α SecondOperand::α Operator::α ;
IfcAssemblyPlaceEnum ::= (NOTDEFINED::ε) | (FACTORY::ε) | (SITE::ε) ;
IfcSpaceType ::= PredefinedType::α ;
IfcFlowTreatmentDevice ::= ε ;
IfcSystemFurnitureElementType ::= ε ;
IfcDimensionCurveDirectedCallout ::= ε ;
IfcColumnTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (COLUMN::ε) ;
IfcInventory ::= Jurisdiction::α (ResponsiblePersons::α)+ LastUpdateDate::α CurrentValue::α OriginalValue::α InventoryType::α ;
IfcRepresentation ::= RepresentationIdentifier::α RepresentationType::α RepresentationMap::α OfProductRepresentation::α ContextOfItems::α (Items::α)+ ;
IfcDiameterDimension ::= ε ;
IfcDuctFittingTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (TRANSITION::ε) | (OBSTRUCTION::ε) | (JUNCTION::ε) | (EXIT::ε) | (ENTRY::ε) | (CONNECTOR::ε) | (BEND::ε) ;
IfcCurtainWallType ::= PredefinedType::α ;
IfcConditionCriterion ::= Criterion::α CriterionDateTime::α ;
IfcWallTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (PLUMBINGWALL::ε) | (ELEMENTEDWALL::ε) | (SHEAR::ε) | (POLYGONAL::ε) | (STANDARD::ε) ;
IfcMaterialClassificationRelationship ::= (MaterialClassifications::α)+ ClassifiedMaterial::α ;
IfcProcedureTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (STARTUP::ε) | (SHUTDOWN::ε) | (DIAGNOSTIC::ε) | (CALIBRATION::ε) | (ADVICE_WARNING::ε) | (ADVICE_NOTE::ε) | (ADVICE_CAUTION::ε) ;
IfcDimensionCalloutRelationship ::= ε ;
IfcSurfaceOfRevolution ::= AxisPosition::α ;
IfcServiceLifeTypeEnum ::= (REFERENCESERVICELIFE::ε) | (PESSIMISTICREFERENCESERVICELIFE::ε) | (OPTIMISTICREFERENCESERVICELIFE::ε) | (EXPECTEDSERVICELIFE::ε) | (ACTUALSERVICELIFE::ε) ;
IfcImageTexture ::= UrlReference::α ;
IfcFurnitureType ::= AssemblyPlace::α ;
IfcWindowPanelProperties ::= OperationType::α PanelPosition::α FrameDepth::α FrameThickness::α ShapeAspectStyle::α ;
IfcRelFillsElement ::= RelatingOpeningElement::α RelatedBuildingElement::α ;
IfcHatchLineDistanceSelect ::= IfcPositiveLengthMeasurevalue::α IfcOneDirectionRepeatFactorvalue::α ;
IfcStructuralPlanarActionVarying ::= VaryingAppliedLoadLocation::α SubsequentAppliedLoads::α ;
IfcBuildingElementComponent ::= ε ;
IfcGridPlacement ::= PlacementLocation::α PlacementRefDirection::α ;
IfcTrimmingPreference ::= (UNSPECIFIED::ε) | (PARAMETER::ε) | (CARTESIAN::ε) ;
IfcPile ::= PredefinedType::α ConstructionType::α ;
IfcBuildingElementPart ::= ε ;
IfcObjective ::= ObjectiveQualifier::α UserDefinedQualifier::α BenchmarkValues::α ResultValues::α ;
IfcMechanicalSteelMaterialProperties ::= YieldStress::α UltimateStress::α UltimateStrain::α HardeningModule::α ProportionalStress::α PlasticStrain::α (Relaxations::α)+ ;
IfcCartesianTransformationOperator ::= Axis1::α Axis2::α LocalOrigin::α Scale::α ;
IfcStateEnum ::= (READONLYLOCKED::ε) | (READWRITELOCKED::ε) | (LOCKED::ε) | (READONLY::ε) | (READWRITE::ε) ;
IfcEdgeCurve ::= EdgeGeometry::α SameSense::α ;
IfcWallType ::= PredefinedType::α ;
IfcRelAssignsToActor ::= RelatingActor::α ActingRole::α ;
IfcReflectanceMethodEnum ::= (NOTDEFINED::ε) | (STRAUSS::ε) | (PLASTIC::ε) | (PHONG::ε) | (MIRROR::ε) | (METAL::ε) | (MATT::ε) | (GLASS::ε) | (FLAT::ε) | (BLINN::ε) ;
IfcSoundValue ::= SoundLevelSingleValue::α SoundLevelTimeSeries::α Frequency::α ;
IfcBuildingElementProxyTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) ;
IfcChillerType ::= PredefinedType::α ;
IfcAlarmType ::= PredefinedType::α ;
IfcAnalysisModelTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (LOADING_3D::ε) | (OUT_PLANE_LOADING_2D::ε) | (IN_PLANE_LOADING_2D::ε) ;
IfcProfileDef ::= ProfileType::α ProfileName::α ;
IfcMember ::= ε ;
IfcSurfaceSide ::= (BOTH::ε) | (NEGATIVE::ε) | (POSITIVE::ε) ;
IfcRepresentationContext ::= ContextIdentifier::α ContextType::α RepresentationsInContext::α ;
IfcWindowStyle ::= ConstructionType::α OperationType::α ParameterTakesPrecedence::α Sizeable::α ;
IfcFaceBound ::= Bound::α Orientation::α ;
IfcGeometricRepresentationItem ::= ε ;
IfcSubContractResource ::= SubContractor::α JobDescription::α ;
IfcDataOriginEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (SIMULATED::ε) | (PREDICTED::ε) | (MEASURED::ε) ;
IfcLShapeProfileDef ::= Depth::α Width::α Thickness::α FilletRadius::α EdgeRadius::α LegSlope::α CentreOfGravityInX::α CentreOfGravityInY::α ;
IfcRelDecomposes ::= RelatingObject::α (RelatedObjects::α)+ ;
IfcCondition ::= ε ;
IfcTransportElementTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (MOVINGWALKWAY::ε) | (ESCALATOR::ε) | (ELEVATOR::ε) ;
IfcDocumentStatusEnum ::= (NOTDEFINED::ε) | (REVISION::ε) | (FINAL::ε) | (FINALDRAFT::ε) | (DRAFT::ε) ;
IfcResource ::= ResourceOf::α ;
IfcStructuralLinearActionVarying ::= VaryingAppliedLoadLocation::α (SubsequentAppliedLoads::α)+ ;
IfcCoilTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (GASHEATINGCOIL::ε) | (ELECTRICHEATINGCOIL::ε) | (WATERHEATINGCOIL::ε) | (STEAMHEATINGCOIL::ε) | (WATERCOOLINGCOIL::ε) | (DXCOOLINGCOIL::ε) ;
IfcGridAxis ::= AxisTag::α SameSense::α PartOfW::α PartOfV::α PartOfU::α HasIntersections::α AxisCurve::α ;
IfcPresentationStyleSelect ::= IfcNullStylevalue::α IfcSurfaceStylevalue::α IfcTextStylevalue::α IfcFillAreaStylevalue::α IfcSymbolStylevalue::α IfcCurveStylevalue::α ;
IfcGeometricProjectionEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (ELEVATION_VIEW::ε) | (SECTION_VIEW::ε) | (REFLECTED_PLAN_VIEW::ε) | (PLAN_VIEW::ε) | (MODEL_VIEW::ε) | (SKETCH_VIEW::ε) | (GRAPH_VIEW::ε) ;
IfcVertexBasedTextureMap ::= TextureVertices::α TexturePoints::α ;
IfcFaceSurface ::= FaceSurface::α SameSense::α ;
IfcCondenserType ::= PredefinedType::α ;
IfcFanTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (PROPELLORAXIAL::ε) | (VANEAXIAL::ε) | (TUBEAXIAL::ε) | (CENTRIFUGALAIRFOIL::ε) | (CENTRIFUGALBACKWARDINCLINEDCURVED::ε) | (CENTRIFUGALRADIAL::ε) | (CENTRIFUGALFORWARDCURVED::ε) ;
IfcSlippageConnectionCondition ::= SlippageX::α SlippageY::α SlippageZ::α ;
IfcRelNests ::= ε ;
IfcTubeBundleType ::= PredefinedType::α ;
IfcCostScheduleTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (SCHEDULEOFRATES::ε) | (UNPRICEDBILLOFQUANTITIES::ε) | (PRICEDBILLOFQUANTITIES::ε) | (TENDER::ε) | (ESTIMATE::ε) | (COSTPLAN::ε) | (BUDGET::ε) ;
IfcStructuralLoadSingleDisplacementDistortion ::= Distortion::α ;
IfcSectionedSpine ::= SpineCurve::α CrossSections::α CrossSectionPositions::α ;
IfcConstraintEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (ADVISORY::ε) | (SOFT::ε) | (HARD::ε) ;
IfcRelConnectsStructuralElement ::= RelatingElement::α RelatedStructuralMember::α ;
IfcConstraintClassificationRelationship ::= ClassifiedConstraint::α (RelatedClassifications::α)+ ;
IfcAppliedValue ::= Name::α Description::α AppliedValue::α ValuesReferenced::α ValueOfComponents::α IsComponentIn::α UnitBasis::α ApplicableDate::α FixedUntilDate::α ;
IfcSwitchingDeviceType ::= PredefinedType::α ;
IfcObjectDefinition ::= HasAssignments::α IsDecomposedBy::α Decomposes::α ;
IfcPropertySourceEnum ::= (NOTKNOWN::ε) | (USERDEFINED::ε) | (MEASURED::ε) | (COMMISSIONING::ε) | (ASBUILT::ε) | (SIMULATED::ε) | (DESIGNMINIMUM::ε) | (DESIGNMAXIMUM::ε) | (DESIGN::ε) ;
IfcElementAssemblyTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (TRUSS::ε) | (SLAB_FIELD::ε) | (RIGID_FRAME::ε) | (REINFORCEMENT_UNIT::ε) | (GIRDER::ε) | (BRACED_FRAME::ε) | (BEAM_GRID::ε) | (ARCH::ε) | (ACCESSORY_ASSEMBLY::ε) ;
IfcMonetaryUnit ::= Currency::α ;
IfcFlowStorageDeviceType ::= ε ;
IfcCurtainWall ::= ε ;
IfcRelSequence ::= TimeLag::α SequenceType::α RelatingProcess::α RelatedProcess::α ;
IfcLightFixtureType ::= PredefinedType::α ;
IfcAnnotationTextOccurrence ::= ε ;
IfcCoolingTowerType ::= PredefinedType::α ;
IfcCurrencyRelationship ::= RelatingMonetaryUnit::α RelatedMonetaryUnit::α RateDateTime::α RateSource::α ExchangeRate::α ;
IfcTextLiteralWithExtent ::= Extent::α BoxAlignment::α ;
IfcAnnotationCurveOccurrence ::= AnnotatedBySymbols::α ;
IfcRelConnectsWithEccentricity ::= ConnectionConstraint::α ;
IfcDerivedMeasureValue ::= IfcIonConcentrationMeasurevalue::α IfcPHMeasurevalue::α IfcHeatingValueMeasurevalue::α IfcSoundPressureMeasurevalue::α IfcSoundPowerMeasurevalue::α IfcWarpingMomentMeasurevalue::α IfcWarpingConstantMeasurevalue::α IfcThermalExpansionCoefficientMeasurevalue::α IfcTemperatureGradientMeasurevalue::α IfcSectionModulusMeasurevalue::α IfcSectionalAreaIntegralMeasurevalue::α IfcRotationalMassMeasurevalue::α IfcModulusOfRotationalSubgradeReactionMeasurevalue::α IfcModulusOfLinearSubgradeReactionMeasurevalue::α IfcMassPerLengthMeasurevalue::α IfcCurvatureMeasurevalue::α IfcLuminousIntensityDistributionMeasurevalue::α IfcLinearMomentMeasurevalue::α IfcShearModulusMeasurevalue::α IfcRotationalStiffnessMeasurevalue::α IfcPlanarForceMeasurevalue::α IfcMomentOfInertiaMeasurevalue::α IfcModulusOfElasticityMeasurevalue::α IfcModulusOfSubgradeReactionMeasurevalue::α IfcLinearStiffnessMeasurevalue::α IfcLinearForceMeasurevalue::α IfcAccelerationMeasurevalue::α IfcTorqueMeasurevalue::α IfcRotationalFrequencyMeasurevalue::α IfcRadioActivityMeasurevalue::α IfcAbsorbedDoseMeasurevalue::α IfcElectricCapacitanceMeasurevalue::α IfcDoseEquivalentMeasurevalue::α IfcElectricChargeMeasurevalue::α IfcElectricConductanceMeasurevalue::α IfcElectricResistanceMeasurevalue::α IfcIlluminanceMeasurevalue::α IfcInductanceMeasurevalue::α IfcForceMeasurevalue::α IfcLuminousFluxMeasurevalue::α IfcMagneticFluxMeasurevalue::α IfcMagneticFluxDensityMeasurevalue::α IfcMonetaryMeasurevalue::α IfcSpecificHeatCapacityMeasurevalue::α IfcIsothermalMoistureCapacityMeasurevalue::α IfcMoistureDiffusivityMeasurevalue::α IfcVaporPermeabilityMeasurevalue::α IfcMolecularWeightMeasurevalue::α IfcThermalConductivityMeasurevalue::α IfcAngularVelocityMeasurevalue::α IfcDynamicViscosityMeasurevalue::α IfcElectricVoltageMeasurevalue::α IfcEnergyMeasurevalue::α IfcFrequencyMeasurevalue::α IfcHeatFluxDensityMeasurevalue::α IfcIntegerCountRateMeasurevalue::α IfcKinematicViscosityMeasurevalue::α IfcLinearVelocityMeasurevalue::α IfcMassDensityMeasurevalue::α IfcMassFlowRateMeasurevalue::α IfcPowerMeasurevalue::α IfcPressureMeasurevalue::α IfcThermalAdmittanceMeasurevalue::α IfcThermalResistanceMeasurevalue::α IfcThermalTransmittanceMeasurevalue::α IfcTimeStampvalue::α IfcVolumetricFlowRateMeasurevalue::α ;
IfcProcess ::= OperatesOn::α IsSuccessorFrom::α IsPredecessorTo::α ;
IfcRoot ::= GlobalId::α Name::α Description::α OwnerHistory::α HasAssociations::α ;
IfcOrientationSelect ::= IfcPlaneAngleMeasurevalue::α IfcDirectionvalue::α ;
IfcFluidFlowProperties ::= PropertySource::α UserDefinedPropertySource::α TemperatureSingleValue::α WetBulbTemperatureSingleValue::α FlowConditionSingleValue::α VelocitySingleValue::α PressureSingleValue::α FlowrateSingleValue::α FlowConditionTimeSeries::α VelocityTimeSeries::α FlowrateTimeSeries::α Fluid::α PressureTimeSeries::α WetBulbTemperatureTimeSeries::α TemperatureTimeSeries::α ;
IfcValveType ::= PredefinedType::α ;
IfcDistributionControlElementType ::= ε ;
IfcEnergyProperties ::= EnergySequence::α UserDefinedEnergySequence::α ;
IfcReinforcingBarRoleEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (RING::ε) | (EDGE::ε) | (PUNCHING::ε) | (STUD::ε) | (LIGATURE::ε) | (SHEAR::ε) | (MAIN::ε) ;
IfcProtectiveDeviceTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (VARISTOR::ε) | (RESIDUALCURRENTSWITCH::ε) | (RESIDUALCURRENTCIRCUITBREAKER::ε) | (EARTHFAILUREDEVICE::ε) | (CIRCUITBREAKER::ε) | (FUSEDISCONNECTOR::ε) ;
IfcLightSourceDirectional ::= Orientation::α ;
IfcStructuralMember ::= ReferencesElement::α ConnectedBy::α ;
IfcDoorPanelPositionEnum ::= (NOTDEFINED::ε) | (RIGHT::ε) | (MIDDLE::ε) | (LEFT::ε) ;
IfcRoof ::= ShapeType::α ;
IfcAheadOrBehind ::= (BEHIND::ε) | (AHEAD::ε) ;
IfcObjectiveEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (TRIGGERCONDITION::ε) | (SPECIFICATION::ε) | (REQUIREMENT::ε) | (HEALTHANDSAFETY::ε) | (DESIGNINTENT::ε) | (CODECOMPLIANCE::ε) ;
IfcShapeAspect ::= Name::α Description::α ProductDefinitional::α (ShapeRepresentations::α)+ PartOfProductDefinitionShape::α ;
IfcLocalTime ::= HourComponent::α MinuteComponent::α SecondComponent::α DaylightSavingOffset::α Zone::α ;
IfcSweptDiskSolid ::= Radius::α InnerRadius::α StartParam::α EndParam::α Directrix::α ;
IfcRelProjectsElement ::= RelatingElement::α RelatedFeatureElement::α ;
IfcMechanicalMaterialProperties ::= DynamicViscosity::α YoungModulus::α ShearModulus::α PoissonRatio::α ThermalExpansionCoefficient::α ;
IfcBoundaryEdgeCondition ::= LinearStiffnessByLengthX::α LinearStiffnessByLengthY::α LinearStiffnessByLengthZ::α RotationalStiffnessByLengthX::α RotationalStiffnessByLengthY::α RotationalStiffnessByLengthZ::α ;
IfcServiceLife ::= ServiceLifeType::α ServiceLifeDuration::α ;
IfcTable ::= (Rows::α)+ Name::α ;
IfcElectricTimeControlType ::= PredefinedType::α ;
IfcCompressorTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (TWINSCREW::ε) | (SINGLESCREW::ε) | (ROTARYVANE::ε) | (ROLLINGPISTON::ε) | (WELDEDSHELLHERMETIC::ε) | (SEMIHERMETIC::ε) | (HERMETIC::ε) | (OPENTYPE::ε) | (BOOSTER::ε) | (SINGLESTAGE::ε) | (TROCHOIDAL::ε) | (SCROLL::ε) | (ROTARY::ε) | (RECIPROCATING::ε) | (DYNAMIC::ε) ;
IfcFlowFittingType ::= ε ;
IfcApprovalActorRelationship ::= Actor::α Approval::α Role::α ;
IfcStairTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (TWO_CURVED_RUN_STAIR::ε) | (CURVED_RUN_STAIR::ε) | (DOUBLE_RETURN_STAIR::ε) | (SPIRAL_STAIR::ε) | (THREE_QUARTER_TURN_STAIR::ε) | (THREE_QUARTER_WINDING_STAIR::ε) | (TWO_QUARTER_TURN_STAIR::ε) | (TWO_QUARTER_WINDING_STAIR::ε) | (HALF_TURN_STAIR::ε) | (HALF_WINDING_STAIR::ε) | (QUARTER_TURN_STAIR::ε) | (QUARTER_WINDING_STAIR::ε) | (TWO_STRAIGHT_RUN_STAIR::ε) | (STRAIGHT_RUN_STAIR::ε) ;
IfcGeneralMaterialProperties ::= MolecularWeight::α Porosity::α MassDensity::α ;
IfcGeneralProfileProperties ::= PhysicalWeight::α Perimeter::α MinimumPlateThickness::α MaximumPlateThickness::α CrossSectionArea::α ;
IfcMeasureValue ::= IfcNormalisedRatioMeasurevalue::α IfcLuminousIntensityMeasurevalue::α IfcAmountOfSubstanceMeasurevalue::α IfcAreaMeasurevalue::α IfcContextDependentMeasurevalue::α IfcCountMeasurevalue::α IfcDescriptiveMeasurevalue::α IfcElectricCurrentMeasurevalue::α IfcLengthMeasurevalue::α IfcPositiveLengthMeasurevalue::α IfcMassMeasurevalue::α IfcNumericMeasurevalue::α IfcParameterValuevalue::α IfcPlaneAngleMeasurevalue::α IfcPositivePlaneAngleMeasurevalue::α IfcRatioMeasurevalue::α IfcPositiveRatioMeasurevalue::α IfcSolidAngleMeasurevalue::α IfcThermodynamicTemperatureMeasurevalue::α IfcTimeMeasurevalue::α IfcVolumeMeasurevalue::α ;
IfcFlowInstrumentTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (VOLTMETER_RMS::ε) | (VOLTMETER_PEAK::ε) | (PHASEANGLEMETER::ε) | (POWERFACTORMETER::ε) | (FREQUENCYMETER::ε) | (AMMETER::ε) | (THERMOMETER::ε) | (PRESSUREGAUGE::ε) ;
IfcSystem ::= ServicesBuildings::α ;
IfcPileTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (SUPPORT::ε) | (FRICTION::ε) | (COHESION::ε) ;
IfcDuctFittingType ::= PredefinedType::α ;
IfcPresentationStyle ::= Name::α ;
IfcArbitraryProfileDefWithVoids ::= (InnerCurves::α)+ ;
IfcWindowStyleConstructionEnum ::= (NOTDEFINED::ε) | (OTHER_CONSTRUCTION::ε) | (PLASTIC::ε) | (ALUMINIUM_WOOD::ε) | (WOOD::ε) | (STEEL::ε) | (HIGH_GRADE_STEEL::ε) | (ALUMINIUM::ε) ;
IfcPropertyEnumeration ::= (EnumerationValues::α)+ Unit::α Name::α ;
IfcCoveringType ::= PredefinedType::α ;
IfcAngularDimension ::= ε ;
IfcFootingTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (STRIP_FOOTING::ε) | (PILE_CAP::ε) | (PAD_FOOTING::ε) | (FOOTING_BEAM::ε) ;
IfcPreDefinedTextFont ::= ε ;
IfcDistributionChamberElement ::= ε ;
IfcCartesianTransformationOperator2DnonUniform ::= Scale2::α ;
IfcTimeSeriesValue ::= (ListValues::α)+ ;
IfcDocumentConfidentialityEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (PERSONAL::ε) | (CONFIDENTIAL::ε) | (RESTRICTED::ε) | (PUBLIC::ε) ;
IfcPointOnCurve ::= BasisCurve::α PointParameter::α ;
IfcReinforcingBarSurfaceEnum ::= (TEXTURED::ε) | (PLAIN::ε) ;
IfcSpaceProgram ::= SpaceProgramIdentifier::α MaxRequiredArea::α MinRequiredArea::α StandardRequiredArea::α HasInteractionReqsFrom::α HasInteractionReqsTo::α RequestedLocation::α ;
IfcRelAssignsToProcess ::= RelatingProcess::α QuantityInProcess::α ;
IfcPropertyReferenceValue ::= PropertyReference::α UsageName::α ;
IfcProfileTypeEnum ::= (AREA::ε) | (CURVE::ε) ;
IfcOrderAction ::= ActionID::α ;
IfcDistributionFlowElementType ::= ε ;
IfcControllerTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (TWOPOSITION::ε) | (TIMEDTWOPOSITION::ε) | (PROPORTIONALINTEGRALDERIVATIVE::ε) | (PROPORTIONALINTEGRAL::ε) | (PROPORTIONAL::ε) | (FLOATING::ε) ;
IfcRelAssociatesAppliedValue ::= RelatingAppliedValue::α ;
IfcMemberTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (STUD::ε) | (STRUT::ε) | (STRINGER::ε) | (RAFTER::ε) | (PURLIN::ε) | (POST::ε) | (PLATE::ε) | (MULLION::ε) | (MEMBER::ε) | (COLLAR::ε) | (CHORD::ε) | (BRACE::ε) ;
IfcAxis1Placement ::= Axis::α ;
IfcRelAssignsToResource ::= RelatingResource::α ;
IfcRightCircularCone ::= Height::α BottomRadius::α ;
IfcConnectionPortGeometry ::= LocationAtRelatingElement::α LocationAtRelatedElement::α ProfileOfPort::α ;
IfcProductRepresentation ::= Name::α Description::α ShapeOfProduct::α (Representations::α)+ ;
IfcLightFixtureTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (DIRECTIONSOURCE::ε) | (POINTSOURCE::ε) ;
IfcVirtualGridIntersection ::= IntersectingAxes::α OffsetDistances::α ;
IfcEquipmentElement ::= ε ;
IfcStructuralActivity ::= AssignedToStructuralItem::α AppliedLoad::α GlobalOrLocal::α ;
IfcArbitraryOpenProfileDef ::= Curve::α ;
IfcEnergySequenceEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (AUXILIARY::ε) | (TERTIARY::ε) | (SECONDARY::ε) | (PRIMARY::ε) ;
IfcBoxedHalfSpace ::= Enclosure::α ;
IfcBeamType ::= PredefinedType::α ;
IfcFacetedBrepWithVoids ::= (Voids::α)+ ;
IfcClassificationNotation ::= (NotationFacets::α)+ ;
IfcFlowDirectionEnum ::= (NOTDEFINED::ε) | (SOURCEANDSINK::ε) | (SINK::ε) | (SOURCE::ε) ;
IfcCableCarrierSegmentType ::= PredefinedType::α ;
IfcDocumentInformation ::= DocumentId::α Name::α Description::α Purpose::α IntendedUse::α Scope::α Revision::α Confidentiality::α Status::α IsPointedTo::α IsPointer::α (DocumentReferences::α)+ DocumentOwner::α (Editors::α)+ CreationTime::α LastRevisionTime::α ElectronicFormat::α ValidFrom::α ValidUntil::α ;
IfcPort ::= ContainedIn::α ConnectedFrom::α ConnectedTo::α ;
IfcStyledRepresentation ::= ε ;
IfcFaceOuterBound ::= ε ;
IfcStructuralSurfaceTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (SHELL::ε) | (MEMBRANE_ELEMENT::ε) | (BENDING_ELEMENT::ε) ;
IfcElectricApplianceTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (WATERCOOLER::ε) | (WATERHEATER::ε) | (WASHINGMACHINE::ε) | (VENDINGMACHINE::ε) | (TV::ε) | (TUMBLEDRYER::ε) | (TELEPHONE::ε) | (SCANNER::ε) | (RADIANTHEATER::ε) | (REFRIGERATOR::ε) | (PRINTER::ε) | (PHOTOCOPIER::ε) | (MICROWAVE::ε) | (INDIRECTWATERHEATER::ε) | (HANDDRYER::ε) | (FRIDGE_FREEZER::ε) | (FREEZER::ε) | (FREESTANDINGFAN::ε) | (FACSIMILE::ε) | (ELECTRICHEATER::ε) | (ELECTRICCOOKER::ε) | (DISHWASHER::ε) | (DIRECTWATERHEATER::ε) | (COMPUTER::ε) ;
IfcConnectedFaceSet ::= (CfsFaces::α)+ ;
Ifc2DCompositeCurve ::= ε ;
IfcClassificationReference ::= ReferencedSource::α ;
IfcTextStyle ::= TextCharacterAppearance::α TextStyle::α TextFontStyle::α ;
IfcLightDistributionCurveEnum ::= (NOTDEFINED::ε) | (TYPE_C::ε) | (TYPE_B::ε) | (TYPE_A::ε) ;
IfcBuildingElementType ::= ε ;
IfcWindowPanelOperationEnum ::= (NOTDEFINED::ε) | (OTHEROPERATION::ε) | (FIXEDCASEMENT::ε) | (REMOVABLECASEMENT::ε) | (SLIDINGVERTICAL::ε) | (SLIDINGHORIZONTAL::ε) | (PIVOTVERTICAL::ε) | (PIVOTHORIZONTAL::ε) | (BOTTOMHUNG::ε) | (TOPHUNG::ε) | (TILTANDTURNLEFTHAND::ε) | (TILTANDTURNRIGHTHAND::ε) | (SIDEHUNGLEFTHAND::ε) | (SIDEHUNGRIGHTHAND::ε) ;
IfcPropertySetDefinition ::= PropertyDefinitionOf::α DefinesType::α ;
IfcMemberType ::= PredefinedType::α ;
IfcStructuralAction ::= CausedBy::α DestabilizingLoad::α ;
IfcStackTerminalType ::= PredefinedType::α ;
IfcAnnotationSurface ::= Item::α TextureCoordinates::α ;
IfcStructuralPointReaction ::= ε ;
IfcDimensionCurveTerminator ::= Role::α ;
IfcSymbolStyle ::= StyleOfSymbol::α ;
IfcEnvironmentalImpactValue ::= ImpactType::α Category::α UserDefinedCategory::α ;
IfcHeatExchangerType ::= PredefinedType::α ;
IfcActionSourceTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (BRAKES::ε) | (RAIN::ε) | (WAVE::ε) | (CURRENT::ε) | (ICE::ε) | (BUOYANCY::ε) | (LACK_OF_FIT::ε) | (CREEP::ε) | (SHRINKAGE::ε) | (SYSTEM_IMPERFECTION::ε) | (PROPPING::ε) | (ERECTION::ε) | (TRANSPORT::ε) | (IMPACT::ε) | (IMPULSE::ε) | (FIRE::ε) | (EARTHQUAKE_E::ε) | (TEMPERATURE_T::ε) | (SETTLEMENT_U::ε) | (PRESTRESSING_P::ε) | (WIND_W::ε) | (SNOW_S::ε) | (LIVE_LOAD_Q::ε) | (COMPLETION_G1::ε) | (DEAD_LOAD_G::ε) ;
IfcPropertySingleValue ::= NominalValue::α Unit::α ;
IfcTransformerType ::= PredefinedType::α ;
IfcStairFlightType ::= PredefinedType::α ;
IfcOutletType ::= PredefinedType::α ;
IfcClassification ::= Source::α Edition::α Name::α Contains::α EditionDate::α ;
IfcTankTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (PRESSUREVESSEL::ε) | (EXPANSION::ε) | (SECTIONAL::ε) | (PREFORMED::ε) ;
IfcCenterLineProfileDef ::= Thickness::α ;
IfcMaterialList ::= (Materials::α)+ ;
IfcAnnotationSurfaceOccurrence ::= ε ;
IfcOwnerHistory ::= State::α ChangeAction::α LastModifiedDate::α CreationDate::α OwningUser::α OwningApplication::α LastModifyingUser::α LastModifyingApplication::α ;
IfcElementComponent ::= ε ;
IfcEquipmentStandard ::= ε ;
IfcCompositeCurveSegment ::= Transition::α SameSense::α UsingCurves::α ParentCurve::α ;
IfcAirTerminalBoxType ::= PredefinedType::α ;
IfcNullStyle ::= NULL::ε ;
IfcTendonAnchor ::= ε ;
IfcProjectionCurve ::= ε ;
IfcDimensionPair ::= ε ;
IfcTimeSeriesReferenceRelationship ::= ReferencedTimeSeries::α (TimeSeriesReferences::α)+ ;
IfcSimpleValue ::= IfcLogicalvalue::α IfcLabelvalue::α IfcTextvalue::α IfcIdentifiervalue::α IfcBooleanvalue::α IfcRealvalue::α IfcIntegervalue::α ;
IfcRelConnectsPathElements ::= (RelatingPriorities::α)+ (RelatedPriorities::α)+ RelatedConnectionType::α RelatingConnectionType::α ;
IfcNamedUnit ::= Dimensions::α UnitType::α ;
IfcStructuralLoadGroup ::= PredefinedType::α ActionType::α ActionSource::α Coefficient::α Purpose::α SourceOfResultGroup::α LoadGroupFor::α ;
IfcPreDefinedPointMarkerSymbol ::= ε ;
IfcAppliedValueRelationship ::= ArithmeticOperator::α Name::α Description::α ComponentOfTotal::α (Components::α)+ ;
IfcSpaceThermalLoadProperties ::= ApplicableValueRatio::α ThermalLoadSource::α PropertySource::α SourceDescription::α MaximumValue::α MinimumValue::α UserDefinedThermalLoadSource::α UserDefinedPropertySource::α ThermalLoadType::α ThermalLoadTimeSeriesValues::α ;
IfcRelVoidsElement ::= RelatingBuildingElement::α RelatedOpeningElement::α ;
IfcRelDefinesByProperties ::= RelatingPropertyDefinition::α ;
IfcMaterialDefinitionRepresentation ::= RepresentedMaterial::α ;
IfcCoveringTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (WRAPPING::ε) | (SLEEVING::ε) | (MEMBRANE::ε) | (INSULATION::ε) | (ROOFING::ε) | (CLADDING::ε) | (FLOORING::ε) | (CEILING::ε) ;
IfcTankType ::= PredefinedType::α ;
IfcLayerSetDirectionEnum ::= (AXIS3::ε) | (AXIS2::ε) | (AXIS1::ε) ;
IfcFurnishingElement ::= ε ;
IfcStructuralCurveMember ::= PredefinedType::α ;
IfcPipeFittingType ::= PredefinedType::α ;
IfcStair ::= ShapeType::α ;
IfcDoorPanelProperties ::= PanelDepth::α PanelOperation::α PanelWidth::α PanelPosition::α ShapeAspectStyle::α ;
IfcElementComponentType ::= ε ;
IfcObjectTypeEnum ::= (NOTDEFINED::ε) | (PROJECT::ε) | (GROUP::ε) | (ACTOR::ε) | (RESOURCE::ε) | (CONTROL::ε) | (PROCESS::ε) | (PRODUCT::ε) ;
IfcSlab ::= PredefinedType::α ;
IfcLocalPlacement ::= PlacementRelTo::α RelativePlacement::α ;
IfcCShapeProfileDef ::= Depth::α Width::α WallThickness::α Girth::α InternalFilletRadius::α CentreOfGravityInX::α ;
IfcStructuralResultGroup ::= TheoryType::α IsLinear::α ResultGroupFor::α ResultForLoadGroup::α ;
IfcRelationship ::= ε ;
IfcHumidifierType ::= PredefinedType::α ;
IfcRelAssignsTasks ::= TimeForTask::α ;
IfcTextLiteral ::= Literal::α Path::α Placement::α ;
IfcLinearDimension ::= ε ;
IfcEnergyConversionDevice ::= ε ;
IfcBlobTexture ::= RasterFormat::α RasterCode::α ;
IfcElectricCurrentEnum ::= (NOTDEFINED::ε) | (DIRECT::ε) | (ALTERNATING::ε) ;
IfcActionTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (EXTRAORDINARY_A::ε) | (VARIABLE_Q::ε) | (PERMANENT_G::ε) ;
IfcSurfaceStyleLighting ::= DiffuseTransmissionColour::α DiffuseReflectionColour::α TransmissionColour::α ReflectanceColour::α ;
IfcSurfaceOfLinearExtrusion ::= ExtrudedDirection::α Depth::α ;
IfcMetric ::= Benchmark::α ValueSource::α DataValue::α ;
IfcSurfaceTexture ::= RepeatS::α RepeatT::α TextureType::α TextureTransform::α ;
IfcTableRow ::= (RowCells::α)+ OfTable::α IsHeading::α ;
IfcBoundaryFaceCondition ::= LinearStiffnessByAreaX::α LinearStiffnessByAreaY::α LinearStiffnessByAreaZ::α ;
IfcRelOccupiesSpaces ::= ε ;
IfcPath ::= (EdgeList::α)+ ;
IfcFacetedBrep ::= ε ;
IfcDistributionPort ::= FlowDirection::α ;
IfcVertex ::= ε ;
IfcMotorConnectionTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (DIRECTDRIVE::ε) | (COUPLING::ε) | (BELTDRIVE::ε) ;
IfcRelConnectsPortToElement ::= RelatingPort::α RelatedElement::α ;
IfcDistributionChamberElementTypeEnum ::= (NOTDEFINED::ε) | (USERDEFINED::ε) | (VALVECHAMBER::ε) | (TRENCH::ε) | (SUMP::ε) | (METERCHAMBER::ε) | (MANHOLE::ε) | (INSPECTIONPIT::ε) | (INSPECTIONCHAMBER::ε) | (FORMEDDUCT::ε) ;
IfcFurnishingElementType ::= ε ;
IfcElementQuantity ::= (Quantities::α)+ MethodOfMeasurement::α ;
IfcApprovalRelationship ::= Description::α Name::α RelatedApproval::α RelatingApproval::α ;
IfcRelReferencedInSpatialStructure ::= (RelatedElements::α)+ RelatingStructure::α ;
--------------------metamodels::mlhim2.bgf--------------------
DvCount ::= count::α ;
DvNumeric ::= DvByte ;
 DvNumeric ::= DvDecimal ;
 DvNumeric ::= DvInt ;
 DvNumeric ::= DvInteger ;
 DvNumeric ::= DvLong ;
 DvNumeric ::= DvNegativeInteger ;
 DvNumeric ::= DvNonNegativeInteger ;
 DvNumeric ::= DvNonPositiveInteger ;
 DvNumeric ::= DvPositiveInteger ;
 DvNumeric ::= DvShort ;
 DvNumeric ::= DvUnsignedByte ;
 DvNumeric ::= DvUnsignedInt ;
 DvNumeric ::= DvUnsignedLong ;
 DvNumeric ::= DvUnsignedShort ;
DvIdentifier ::= issuer::α assigner::α name::α ;
DvQuantified ::= DvCount ;
 DvQuantified ::= DvQuantity ;
 DvQuantified ::= DvRatio ;
DvMediaMultipart ::= dv::α ;
DvRatio ::= DvProportion ;
 DvRatio ::= DvRate ;
ExceptionalValue ::= NI ;
DvMediaModel ::= dv::α ;
DvCodedString ::= codeString::α terminologyName::α terminologyAbbrev::α ;
DvUnsignedShort ::= dv::α ;
DvTemporal ::= DvDate ;
 DvTemporal ::= DvDateTime ;
 DvTemporal ::= DvDuration ;
 DvTemporal ::= DvTime ;
MetaDataSet ::= name::string() (entries::MetaDataEntry)+ ;
DvPositiveInteger ::= dv::α ;
FeederAuditDetails ::= systemId::DvIdentifier versionId::DvNormalizedString provider::PartyIdentified location::Location time::DvTemporal (subject::PartyProxy)+ ;
PINF ::= ε ;
ItemTree ::= (items::Item)+ ;
ItemList ::= (items::Item)+ ;
DER ::= ε ;
DvUnsignedByte ::= dv::α ;
DvMediaApp ::= dv::α ;
DvDateTime ::= dv::α ;
DvProportion ::= proportionType::α ;
DvShort ::= dv::α ;
DvToken ::= dv::α ;
DvDuration ::= dv::α ;
MSK ::= ε ;
CCD ::= definition::Locatable (metaData::MetaDataSet)+ ontology::Ontology ;
DvUnsignedLong ::= dv::α ;
DvString ::= DvCodedString ;
 DvString ::= DvIdentifier ;
 DvString ::= uuid::α language::α dv::string() ;
DvOrdinal ::= dv::α symbol::string() ;
DvQuantity ::= units::α ;
DvInt ::= dv::integer() ;
DvParagraph ::= (items::DvString)+ ;
ItemTable ::= (rows::Cluster)+ ;
ItemSingle ::= item::Item ;
DvOrdered ::= DvOrdinal ;
 DvOrdered ::= DvQuantified ;
DvURI ::= dv::α ;
DvByte ::= dv::α ;
DvAny ::= DvBoolean ;
 DvAny ::= DvChar ;
 DvAny ::= DvEncapsulated ;
 DvAny ::= DvInterval ;
 DvAny ::= DvNumeric ;
 DvAny ::= DvOrdered ;
 DvAny ::= DvParagraph ;
 DvAny ::= DvURI ;
 DvAny ::= PartyProxy ;
 DvAny ::= ReferenceRange ;
EventContext ::= healthcareFacility::Organization startTime::DvTemporal endTime::DvTemporal participation::Participation location::Location setting::DvCodedString ;
UNK ::= ASKR ;
 UNK ::= ASKU ;
 UNK ::= NASK ;
 UNK ::= QS ;
 UNK ::= TRC ;
 UNK ::= ASKR | ASKU | NASK | QS | TRC ;
ReferenceRange ::= definition::DvString dataRange::DvInterval ;
DvMedia ::= DvMediaApp ;
 DvMedia ::= DvMediaAudio ;
 DvMedia ::= DvMediaImage ;
 DvMedia ::= DvMediaModel ;
 DvMedia ::= DvMediaMsg ;
 DvMedia ::= DvMediaMultipart ;
 DvMedia ::= DvMediaText ;
 DvMedia ::= DvMediaVideo ;
INV ::= DER ;
 INV ::= OTH ;
 INV ::= UNC ;
 INV ::= DER | OTH | UNC ;
DvMediaMsg ::= dv::α ;
DvLong ::= dv::α ;
NASK ::= ε ;
UNC ::= ε ;
DvNonPositiveInteger ::= dv::α ;
DvMediaVideo ::= dv::α ;
DataStructure ::= History ;
 DataStructure ::= ItemStructure ;
PartyProxy ::= PartyIdentified ;
 PartyProxy ::= PartySelf ;
OntologyEntry ::= (contents::string())+ ;
MetaDataEntry ::= title::string() contents::string() ;
CareEntry ::= Action ;
 CareEntry ::= Evaluation ;
 CareEntry ::= Instruction ;
 CareEntry ::= Observation ;
DvDecimal ::= dv::α ;
NI ::= INV ;
 NI ::= MSK ;
 NI ::= NA ;
 NI ::= UNK ;
 NI ::= INV | MSK | NA | UNK ;
DvNormalizedString ::= uuid::α language::α dv::α ;
DvNegativeInteger ::= dv::α ;
IntervalEvent ::= width::DvDuration mathFunction::DvCodedString sampleCount::DvCount ;
ObjectRef ::= EntityRef ;
 ObjectRef ::= uuid::α namespace::α objType::α ;
NINF ::= ε ;
NA ::= ε ;
PartySelf ::= externalRef::EntityRef ;
DvRate ::= rateType::α ;
FeederAudit ::= originatingSystemAudit::FeederAuditDetails (originatingSystemItemIds::DvIdentifier)+ feederSystemAudit::FeederAuditDetails (feederSystemIds::DvIdentifier)+ originalContent::DvEncapsulated ;
DvInteger ::= dv::α ;
DvLanguage ::= dv::α ;
DvMediaImage ::= dv::α ;
DvUnsignedInt ::= dv::α ;
DvChar ::= DvLanguage ;
 DvChar ::= DvNormalizedString ;
 DvChar ::= DvString ;
 DvChar ::= DvToken ;
DvMediaAudio ::= dv::α ;
QS ::= ε ;
DvTime ::= dv::α ;
DvMediaText ::= dv::string() ;
DvParsable ::= dv::α formalism::α ;
ASKU ::= NAV ;
 ASKU ::= NAV ;
ASKR ::= ε ;
DvInterval ::= lower::DvOrdered upper::DvOrdered lowerIncluded::α upperIncluded::α lowerUnbounded::α upperUnbounded::α ;
DvBoolean ::= dv::α ;
EntityRef ::= uuid::α namespace::α objType::α ;
DvNonNegativeInteger ::= dv::α ;
ContentItem ::= Entry ;
 ContentItem ::= Section ;
PointEvent ::= time::DvTemporal data::DvAny state::ItemStructure ;
TRC ::= ε ;
PartyRelated ::= relationship::Relationship ;
DvEncapsulated ::= DvMedia ;
 DvEncapsulated ::= DvParsable ;
OTH ::= NINF ;
 OTH ::= PINF ;
 OTH ::= NINF | PINF ;
NAV ::= ε ;
AdminEntry ::= data::ItemStructure ;
PartyIdentified ::= PartyRelated ;
 PartyIdentified ::= name::DvString (identifiers::DvIdentifier)+ ;
NonHuman ::= details::ItemStructure ;
ItemStructure ::= ItemList ;
 ItemStructure ::= ItemSingle ;
 ItemStructure ::= ItemTable ;
 ItemStructure ::= ItemTree ;
DvDate ::= dv::α ;
--------------------metamodels::paperdyne.owl.bgf--------------------
Must_Accept ::= ε ;
Email_Template ::= define::Event ;
Proceedings_Publisher ::= (publisherOf::Thing)+ technicallyOrganises::Thing ;
start_date_of_camera-ready_submission ::= ε ;
Invited_Speaker ::= ε ;
Science_Worker ::= hasMail::String worksForCompany::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasAffiliation::String hasFirstName::String hasLastName::String hasEmail::String hasName::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person ;
Program_Comitee_Chair ::= finishes::Conference headOf::Program_Comitee switches::PhaseOfConferencePreparation starts::Conference accepts::Paper assignsToReview::Paper assignsPaper::Reviewer rejects::Paper ;
TraditionalLecture ::= hasAcronym::String ;
Welcome_address ::= ε ;
RadioCommunicationsTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event isIncluded::Activity ;
Transport_vehicle ::= Car ;
 Transport_vehicle ::= Taxi ;
 Transport_vehicle ::= Shuttle_bus ;
 Transport_vehicle ::= Van ;
 Transport_vehicle ::= Car | Taxi | Shuttle_bus | Van ;
AccommodationPlace ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
Domain_Topic ::= Conference_Program ;
 Domain_Topic ::= Paper_Review ;
 Domain_Topic ::= Committees ;
 Domain_Topic ::= People ;
 Domain_Topic ::= Paper_File ;
 Domain_Topic ::= Conference_Program | Paper_Review | Committees | People ;
Refusing_manuscript ::= ε ;
SignalProcessingTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event isIncluded::Activity ;
TwoLevelConference ::= is_in_phase::phase_of_conference has_program::program hasMember::Person hasName::String endDate::dateTime paperDueOn::dateTime registrationDueOn::dateTime manuscriptDueOn::dateTime startDate::dateTime hasCountry::Country isOrganizedBy::OrganizingCommittee annualOrder::Integer takesPlace::Location hasAcronym::String finishedBy::Program_Comitee_Chair focusesOn::Topic startedBy::Program_Comitee_Chair takesPlace::Location hasConferenceMember::ConferenceMember paperAssignmentFinalizedBy::Administrator reviewCriteriaEnteredBy::Administrator paperAssignmentToolsRunBy::Administrator virtualMeetingEnabledBy::Administrator hardcopyMailingManifestsPrintedBy::Administrator detailsEnteredBy::Administrator reviewerBiddingStartedBy::Administrator date::date reviewsPerPaper::Integer logoURL::anyURI acceptsHardcopySubmissions::Boolean siteURL::anyURI ;
Regular_contribution ::= Extended_abstract ;
Result_of_Advocate ::= ε ;
pc_meeting ::= conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator starts_on::String ends_on::String has_startdate::dateTime has_enddate::dateTime (eventOnList::Thing)+ partOfEvent::Event hasEvent::Event (organisedBy::Thing)+ heldIn::Location ;
SessionChair ::= hasMail::String worksForCompany::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasAffiliation::String hasFirstName::String hasLastName::String hasEmail::String hasName::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person ;
SteeringCommittee ::= organizes::Conference ;
Working_event ::= hasTopic::Topic hasAdministrativeEvent::Administrative_event ;
summary_of_reviews ::= is_created_in::Activity ;
Valuable_Confirmation_of_Present_Knowledge ::= ε ;
Review_Values ::= Reviewer_Famliliarity ;
 Review_Values ::= Reccommendation ;
 Review_Values ::= Overall_Value ;
 Review_Values ::= Paper_Categorization ;
 Review_Values ::= Reviewer_Famliliarity | Reccommendation | Overall_Value | Paper_Categorization ;
Short_paper ::= changedBy::Author hasContributionStatus::EEnum writtenBy::Author dealsWith::Topic remark::String abstract::String contactEmail::String hasKeyword::String hasTitle::String ;
Late_paid_applicant ::= ε ;
Nonauthor_registration_fee ::= ε ;
Advocated_Paper ::= to_advocate_by::Advocate ;
GovernmentOrganization ::= isProviderOf::Sponsorship ;
Tutorial_Abstract ::= (is_the_1th_part_of::Thing)+ part_of_article::Article ;
Main_office ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
CallForManuscripts ::= forEvent::AcademicEvent (isInitiatedBy::Person)+ hasSubmissionInstructions::String hasSubmissionDeadline::dateTime ;
MealMenu ::= isMenuOf::MealEvent ;
IndexOfAuthors ::= isProducedBy::Chair ;
Workshop_Session ::= hasAssignedPaper::AcceptedPaper room::String isAssociatedTo::Slot hasChair::Chair ;
Paper_Author ::= hasMail::String worksForCompany::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasAffiliation::String hasFirstName::String hasLastName::String hasEmail::String hasName::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person ;
Registeered_applicant ::= Paid_applicant ;
Late-Registered_Participant ::= ε ;
Conference_Proceedings ::= has_an_ISBN::String has_a_publisher::Publisher has_a_volume::String ;
group_email ::= article_written_by::Author has_reviewer::Reviewer has_abstract::Abstract goes_through::Activity is_sent_to::human is_created_in::Activity structure_created_by::human has_author::human gives_classification::classification ;
Full_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum hasCo-Author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
OutsideReferee ::= hasMail::String worksForCompany::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasAffiliation::String hasFirstName::String hasLastName::String hasEmail::String hasName::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person ;
Assigned_Paper ::= Evaluated_Paper ;
 Assigned_Paper ::= hasReviewer::Possible_Reviewer ;
Shuttle_bus ::= ε ;
upper_tier_reviewing_process ::= is_performed_by::human ;
OperatingTopicsystems ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event isIncluded::Activity ;
Review_Phase ::= hasPhaseStatus::EEnum ;
Social_program ::= Dinner_banquet ;
GeneralCoChair ::= organizes::Conference ;
PC_Meeting ::= ε ;
E-mail_PC_Meeting ::= ε ;
Conference_state ::= ε ;
ComputerNetworksEnterpriseTopic ::= ε ;
PaperSubmissionChair ::= organizes::Conference ;
Chair_PC ::= hasMail::String worksForCompany::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasAffiliation::String hasFirstName::String hasLastName::String hasEmail::String hasName::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person ;
Early_paid_applicant ::= ε ;
Active_conference_participant ::= gives_presentations::Presentation ;
Short_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum hasCo-Author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
SatelliteAndSpaceCommunicationsTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event isIncluded::Activity ;
Conflict_Of_Interest ::= Confirmed_Conflict ;
 Conflict_Of_Interest ::= Pending_Proposed_Conflict ;
 Conflict_Of_Interest ::= Hidden_Conflict ;
 Conflict_Of_Interest ::= Deleted_Conflict ;
 Conflict_Of_Interest ::= Proposed_Conflict ;
 Conflict_Of_Interest ::= Self_Conflict ;
 Conflict_Of_Interest ::= Confirmed_Conflict | Pending_Proposed_Conflict | Hidden_Conflict | Deleted_Conflict | Proposed_Conflict | Self_Conflict ;
Receiving_manuscript ::= ε ;
Senior_Reviewer_URL ::= ε ;
Pending_Proposed_Conflict ::= refusedBy::Reviewer confirmedBy::Reviewer ;
Plenary_lecture ::= hasAcronym::String ;
date_of_notification ::= ε ;
Departure_tax ::= ε ;
Conference_applicant ::= Registeered_applicant ;
Time_zone ::= ε ;
Organizing_committee ::= was_an_organizing_committee_of::Conference_volume ;
Hotel_presenter ::= ε ;
MobileComputingTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event isIncluded::Activity ;
Registration_of_participants_event ::= follows::Administrative_event parallel_with::Administrative_event ;
Session_chair ::= ε ;
Committee_member ::= Co-chair ;
 Committee_member ::= was_a_member_of::Committee ;
Marginal_Tend_to_Accept ::= ε ;
Deadline_hotel_reservation ::= done_till::date ;
ConferenceSession ::= ε ;
SubjectArea ::= ε ;
Camera_Ready_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum hasCo-Author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
NGO ::= isProviderOf::Sponsorship ;
Dinner_banquet ::= ε ;
CommunicationTheoryTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event isIncluded::Activity ;
AcademicEvent ::= TalkEvent ;
 AcademicEvent ::= OrganizationalMeeting ;
 AcademicEvent ::= PaperPresentation ;
 AcademicEvent ::= hasCall::Call ;
date_of_conference ::= start_date_of_conference ;
 date_of_conference ::= end_date_of_conference ;
 date_of_conference ::= start_date_of_conference | end_date_of_conference ;
Mailing_list ::= (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document recieved_by::User used_by::Person submited__by::User ;
CallForPapers ::= forEvent::AcademicEvent (isInitiatedBy::Person)+ hasSubmissionInstructions::String hasSubmissionDeadline::dateTime ;
CommunicationsTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event isIncluded::Activity ;
SecurityTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event isIncluded::Activity ;
PaperAbstract ::= isAbstractOf::Paper abstractIsSubmittedBy::ContactAuthor ;
DiningPlace ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
Regular_author ::= Contribution_1th-Author ;
 Regular_author ::= Contribution_co-Author ;
 Regular_author ::= Contribution_1th-Author | Contribution_co-Author ;
Paper_Review ::= is_Candidate_for_Award::Long_bool appropriate_length::Long_bool has_Categorization::Paper_Categorization has_Overall::Overall_Value has_Reccommendation::Reccommendation Review_made_by::Reviewer Comments_for_Author::String Comments_for_Program_Committee::String ;
PostScript ::= ε ;
HTML ::= ε ;
ContactAuthor ::= submitsAbstract::PaperAbstract ;
ConferenceProgram ::= isProgramOf::Conference consistsOf::Slot ;
Rejection_Email ::= ε ;
Admin_Role ::= assigned_by::Administrator ;
Poster_Session ::= hasAssignedPaper::AcceptedPaper room::String isAssociatedTo::Slot hasChair::Chair ;
ComputerArchitectureTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event isIncluded::Activity ;
WorkshopTutorialChair ::= organizes::Conference ;
OrganizingCommittee ::= ProgramCoChair ;
 OrganizingCommittee ::= PublicationsChair ;
 OrganizingCommittee ::= WorkshopTutorialChair ;
 OrganizingCommittee ::= RegistrationChair ;
 OrganizingCommittee ::= StudentAdvocate ;
 OrganizingCommittee ::= FinanceChair ;
 OrganizingCommittee ::= PaperSubmissionChair ;
 OrganizingCommittee ::= PublicityWebChair ;
 OrganizingCommittee ::= SteeringCommittee ;
 OrganizingCommittee ::= GeneralCoChair ;
 OrganizingCommittee ::= organizes::Conference ;
OrganizationalMeeting ::= hasCall::Call ;
Session_Chair ::= ε ;
PersonalReviewHistory ::= isReviewHistoryOf::Reviewer ;
Group_Email ::= ε ;
Regular_Program_Committee_member ::= ε ;
conference_setup ::= sets_member::human is_made_by::human includes_topic::Topic sets_date::date sets_URL::URL ;
Member_PC ::= expertOn::Topic reviewes::Contribution ;
end_date_of_conference ::= ε ;
Double_hotel_room ::= ε ;
AccpetIfRoomRating ::= ε ;
Web_Site ::= (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document recieved_by::User used_by::Person submited__by::User ;
Help_Request ::= Misc ;
 Help_Request ::= Feature_Request ;
 Help_Request ::= Assistance ;
 Help_Request ::= Misc | Feature_Request | Assistance ;
Sponsor_city ::= ε ;
RejectedPaper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum hasCo-Author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
ParallelAndDistributedComputingTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event isIncluded::Activity ;
One_day_presenter ::= ε ;
Research_Topic ::= define::Event ;
 Research_Topic ::= topicCoveredBy::Thing ;
Assignment_Phase ::= hasPhaseStatus::EEnum ;
SC_Member ::= ε ;
Accepted_contribution ::= Camera_ready_contribution ;
Clarity_to_Present_Understanding ::= ε ;
OC_Member ::= OC_Chair ;
Reviewing_event ::= follows::Administrative_event parallel_with::Administrative_event ;
MultimediaTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event isIncluded::Activity ;
CryptographyTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event isIncluded::Activity ;
Contribution_1th-Author ::= ε ;
ReviewQuestion ::= TextualReviewQuestion ;
 ReviewQuestion ::= NumericalReviewQuestion ;
 ReviewQuestion ::= TextualReviewQuestion | NumericalReviewQuestion ;
camera-ready_submission_date ::= start_date_of_camera-ready_submission ;
 camera-ready_submission_date ::= end_date_of_camera-ready_submission ;
 camera-ready_submission_date ::= start_date_of_camera-ready_submission | end_date_of_camera-ready_submission ;
Conference_volume ::= has_parts::Conference_part has_workshops::Workshop has_tracks::Track has_tutorials::Tutorial has_a_commtitee::Committee has_a_steering_committee::Steering_committee has_an_organizing_committee::Organizing_committee has_important_dates::Important_dates has_contributions::Conference_contribution has_a_location::String has_a_program_committee::Program_committee ;
start_date_of_full_paper_submission ::= ε ;
Clear_Accept ::= ε ;
Conference_days ::= One_conference_day ;
ProgramCommittee ::= hasProgramCommitteeMember::ProgramCommitteeMember hasMember::ProgramCommitteeMember ;
Deleted_Conflict ::= ε ;
Highly_Theoretical ::= ε ;
Registation_deadline ::= done_till::date ;
Bidding_Phase ::= Bidding_And_Paper_Submission_Phase ;
 Bidding_Phase ::= Bidding_Without_Paper_Submission_Phase ;
 Bidding_Phase ::= Bidding_And_Paper_Submission_Phase | Bidding_Without_Paper_Submission_Phase ;
Head_Role ::= assigned_by::Administrator ;
ProgramCommitteeMember ::= ProgramCommitteeChair ;
 ProgramCommitteeMember ::= Chair ;
 ProgramCommitteeMember ::= memberOfProgramCommittee::ProgramCommittee maxPapers::Integer addedBy::Administrator isMemberOf::ProgramCommittee hasPassword::String ;
Tends_Towards_Theoretical ::= ε ;
PaperQuestion ::= ε ;
Invited_Talk_Abstract ::= (is_the_1th_part_of::Thing)+ part_of_article::Article ;
Final_manuscript ::= ε ;
Paid_applicant ::= Late_paid_applicant ;
 Paid_applicant ::= Early_paid_applicant ;
 Paid_applicant ::= Late_paid_applicant | Early_paid_applicant ;
end_date_of_abstract_submission ::= ε ;
RegistrationChair ::= organizes::Conference ;
Worker_non_speaker ::= ε ;
Invitation_letter ::= (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document recieved_by::User used_by::Person submited__by::User ;
Book_proceeding ::= ε ;
Conference_announcement ::= has_authors::Person has_a_date_of_issue::date ;
Demo_Chair ::= ε ;
Conference_Trip ::= ε ;
WithdrawnPaper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum hasCo-Author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
Program_Committee_Chair ::= is_author_of::Article performs_activity::Activity is_employed_in::institute has_topic_of_interest::Topic supervises::Activity e-mail::String last_name::String first_name::String ;
Social_event ::= Trip ;
 Social_event ::= Banquet ;
 Social_event ::= Reception ;
 Social_event ::= Trip | Banquet | Reception ;
Self_Conflict ::= ε ;
PCMembersList ::= isProducedBy::Chair ;
Program_committee ::= was_a_program_committee_of::Conference_volume ;
paper_assignment ::= Manual_Paper_Assignment ;
 paper_assignment ::= Automatic_Paper_Assignment ;
 paper_assignment ::= assign_paper::Program_Committee_member is_performed_by::human ;
Value_Partition ::= Topics ;
 Value_Partition ::= Format ;
 Value_Partition ::= Long_bool ;
 Value_Partition ::= Review_Values ;
 Value_Partition ::= Result_of_Advocate ;
 Value_Partition ::= Topics | Format | Long_bool | Review_Values | Result_of_Advocate ;
OutputDocument ::= CD-ROM ;
 OutputDocument ::= IndexOfAuthors ;
 OutputDocument ::= ExternalReviewersList ;
 OutputDocument ::= Program ;
 OutputDocument ::= PCMembersList ;
 OutputDocument ::= ListOfAbstracts ;
 OutputDocument ::= BookletOfAbstracts ;
 OutputDocument ::= Proceedings ;
 OutputDocument ::= isProducedBy::Chair ;
Conference_hall ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
QualitatvieLecture ::= hasAcronym::String ;
PC_Chair ::= ε ;
Review_Committee ::= ε ;
NumericalReviewQuestion ::= ε ;
Payment_document ::= Cheque ;
 Payment_document ::= Bank_transfer ;
 Payment_document ::= Cheque | Bank_transfer ;
Automatic_Paper_Assignment ::= (automatically_assign_paper::Program_Committee_member)+ ;
Undecided_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum hasCo-Author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
ComputerNetworksSecurityTopic ::= ε ;
URL ::= Event_URL ;
 URL ::= Senior_Reviewer_URL ;
 URL ::= Chair_URL ;
 URL ::= Contact_Person_URL ;
 URL ::= Regular_Reviewer_URL ;
 URL ::= Event_URL | Senior_Reviewer_URL | Chair_URL | Contact_Person_URL | Regular_Reviewer_URL ;
Steering_committee ::= was_a_steering_committee_of::Conference_volume ;
AuthorNotReviewer ::= submitPaper::Paper writes::Contribution writes_article::Article assigns_article_to_conference::Article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing submitsPaper::Paper writePaper::Paper writes_Paper::Paper changes::Contribution ;
review_form ::= is_created_in::Activity ;
Review_Form ::= Preview ;
 Review_Form ::= Review_Form_Setup ;
 Review_Form ::= Preview | Review_Form_Setup ;
Deadline_for_notification_of_acceptance ::= done_till::date ;
notification_email ::= acceptance_notification_email ;
 notification_email ::= rejection_notification_email ;
 notification_email ::= acceptance_notification_email | rejection_notification_email ;
Notification_Email ::= ε ;
PersonalPublicationHistory ::= ε ;
Social_Event ::= Conference_Trip ;
 Social_Event ::= Conference_Banquet ;
 Social_Event ::= Conference_Trip | Conference_Banquet ;
Senior_Program_Committee_member ::= supervises::Activity ;
Reviewed_Paper ::= Planed_Paper ;
Program_Committee ::= ε ;
Computer_Science ::= ε ;
ActivitySubmissionForm ::= TutorialProposal ;
 ActivitySubmissionForm ::= WorksopProposal ;
 ActivitySubmissionForm ::= isSubmittedBy::Author hasAuthor::Author submissionDeadline::dateTime ;
AssociatedChair ::= memberOfConference::Conference ;
rejection_notification_email ::= ε ;
Reviewed_contribution ::= Accepted_contribution ;
 Reviewed_contribution ::= Rejected_contribution ;
 Reviewed_contribution ::= has_a_review::Review ;
ReviewRating ::= WeekRejectRating ;
 ReviewRating ::= AcceptRating ;
 ReviewRating ::= AccpetIfRoomRating ;
 ReviewRating ::= RejectRating ;
 ReviewRating ::= WeekRejectRating | AcceptRating | AccpetIfRoomRating | RejectRating ;
WirelessCommunicationsTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event isIncluded::Activity ;
ConferenceAttendant ::= mustPay::Fee hasAdress::String paid::Boolean hasPhone::String ;
TextualReviewQuestion ::= ε ;
PowerPoint_presentation ::= is_given_by::Active_conference_participant ;
TalkEvent ::= ClosingTalk ;
 TalkEvent ::= WelcomeTalk ;
 TalkEvent ::= ClosingTalk | WelcomeTalk ;
FinanceChair ::= organizes::Conference ;
Program_chair ::= made_program::Conference_Program ;
CADTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event isIncluded::Activity ;
Blocked_Phase ::= hasPhaseStatus::EEnum ;
Trip_city ::= ε ;
Contact_Person_URL ::= ε ;
Event_Creation ::= hasTopic::Topic expectedAttendance::Integer isPartOf::Conference is_held_before::Time is_held_in::Thing is_held_after::Time is_dated_on::dateTime has_result::Article sent_by::Person is_followed_by::Activity is_monitored_by::human has_intensity::intensity has_result::Article is_performed_by::human is_supervised_by::human ;
Registration_fee ::= Author_attendee_book_registration_fee ;
 Registration_fee ::= Nonmember_registration_fee ;
 Registration_fee ::= Nonauthor_registration_fee ;
 Registration_fee ::= Memeber_registration_fee ;
 Registration_fee ::= Student_registration_fee ;
 Registration_fee ::= Author_attendee_cd_registration_fee ;
 Registration_fee ::= Author_attendee_book_registration_fee | Nonmember_registration_fee | Nonauthor_registration_fee | Memeber_registration_fee | Student_registration_fee | Author_attendee_cd_registration_fee ;
PublicationsChair ::= organizes::Conference ;
Speaker_lecture ::= hasAssignedPaper::AcceptedPaper room::String isAssociatedTo::Slot hasChair::Chair ;
Technic_activity ::= ε ;
Conference_part ::= Track ;
 Conference_part ::= Workshop ;
 Conference_part ::= Tutorial ;
 Conference_part ::= has_a_track-workshop-tutorial_topic::Topic is_part_of_conference_volumes::Conference_volume has_a_track-workshop-tutorial_chair::Track-workshop_chair ;
ComputerNetworksSensorTopic ::= ε ;
IASTED_non_member ::= ε ;
Possible_Reviewer ::= PC_Member ;
 Possible_Reviewer ::= reviewerOfPaper::Paper ;
One_conference_day ::= ε ;
Program_Comitee ::= discusses::Paper ;
Overhead_projector ::= ε ;
SlideSet ::= (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document recieved_by::User used_by::Person submited__by::User ;
MeetingRoomPlace ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
Submissions_deadline ::= done_till::date ;
Neutral_Review ::= reviewOfPaper::Paper reviewWrittenBy::Possible_Reviewer containsEvaluation::Evaluation rates::Paper isWritenBy::Reviewer writtenBy::Reviewer reviews::Reviewed_contribution gives_classification::classification is_created_in::Activity review_written_by::Reviewer ;
ExternalReviewer ::= cooperatesReviewer::Reviewer assignedByReviewer::Reviewer ;
WelcomeTalk ::= ε ;
SocialEvent ::= Excursion ;
 SocialEvent ::= Reception ;
 SocialEvent ::= Excursion | Reception ;
Sponsor_state ::= ε ;
ContactInformation ::= hasCity::String hasStreet::String hasPostalCode::String hasPhone::String ;
Submitted_Paper ::= Assigned_Paper ;
 Submitted_Paper ::= Reviewed_Paper ;
 Submitted_Paper ::= Advocated_Paper ;
 Submitted_Paper ::= is_stored_in::Paper_File has_been_sent_by::Contact_Author Paper_Id::String Comments_To_Chair::String ;
Initial_manuscipt ::= ε ;
Author_cd_proceedings_included ::= submitPaper::Paper writes::Contribution writes_article::Article assigns_article_to_conference::Article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing submitsPaper::Paper writePaper::Paper writes_Paper::Paper changes::Contribution ;
FreeTimeBreak ::= ε ;
Audiovisual_equipment ::= Video_cassette_player ;
 Audiovisual_equipment ::= LCD_projector ;
 Audiovisual_equipment ::= Computer ;
 Audiovisual_equipment ::= Overhead_projector ;
 Audiovisual_equipment ::= Video_cassette_player | LCD_projector | Computer | Overhead_projector ;
Session_room ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
Scientific_Event ::= Individual_Presentation ;
 Scientific_Event ::= Conference ;
 Scientific_Event ::= Session ;
 Scientific_Event ::= Track ;
Portable_Reject ::= ε ;
Record_of_attendance ::= (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document recieved_by::User used_by::Person submited__by::User ;
Individual_Presentation ::= Invited_Talk ;
 Individual_Presentation ::= Contributed_Talk ;
 Individual_Presentation ::= (presentationOfPaper::Document)+ ;
Tends_Towards_Practical ::= ε ;
PerformanceTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event isIncluded::Activity ;
Reviewing_results_event ::= follows::Administrative_event parallel_with::Administrative_event ;
BreakEvent ::= CoffeeBreak ;
 BreakEvent ::= FreeTimeBreak ;
 BreakEvent ::= MealBreak ;
 BreakEvent ::= CoffeeBreak | FreeTimeBreak | MealBreak ;
Setup_Phase ::= hasPhaseStatus::EEnum ;
Evaluated_Paper ::= Accepted_Paper ;
 Evaluated_Paper ::= Rejected_Paper ;
 Evaluated_Paper ::= hasReview::Review ;
AcademiaOrganization ::= isProviderOf::Sponsorship ;
ConferenceMember ::= Reviewer ;
 ConferenceMember ::= ConferenceChair ;
 ConferenceMember ::= AssociatedChair ;
 ConferenceMember ::= ProgramCommitteeMember ;
 ConferenceMember ::= Chairman ;
 ConferenceMember ::= memberOfConference::Conference ;
MedicineTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event isIncluded::Activity ;
New_Perspective_Issue_Problem_Solving ::= ε ;
Classic_Papers ::= ε ;
Accepted_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum hasCo-Author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer hasReview::Review ;
Submitted_contribution ::= Reviewed_contribution ;
 Submitted_contribution ::= has_a_review_expertise::Review_expertise ;
Agency_Staff_Member ::= hasMail::String worksForCompany::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasAffiliation::String hasFirstName::String hasLastName::String hasEmail::String hasName::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person ;
Confirmed_Conflict ::= ε ;
Conference_hotel ::= ε ;
Track-workshop_chair ::= was_a_track-workshop_chair_of::Conference_part ;
Program_Comitee_Meeting ::= E-mail_PC_Meeting ;
 Program_Comitee_Meeting ::= PC_Meeting ;
 Program_Comitee_Meeting ::= E-mail_PC_Meeting | PC_Meeting ;
Coffee_break ::= ε ;
RatedPapers ::= hasRating::ReviewRating ;
Regular_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum hasCo-Author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
ConferenceChair ::= memberOfConference::Conference ;
 ConferenceChair ::= hasMail::String worksForCompany::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasAffiliation::String hasFirstName::String hasLastName::String hasEmail::String hasName::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person ;
Closed_Phase ::= hasPhaseStatus::EEnum ;
EEnum ::= (male::ε) | (female::ε) | (high::ε) | (medium::ε) | (low::ε) | (very high::ε) | (submitted::ε) | (missing::ε) | (notStarted::ε) | (active::ε) | (finished::ε) | (accepted::ε) | (rejected::ε) | (regular::ε) | (invited::ε) | (lowBid::ε) | (-::ε) | (CONFLICT::ε) | (wantNot::ε) | (highBid::ε) | (Yes::ε) | (No::ε) | (Compilers::ε) | (Microarchitecture::ε) | (Systems::ε) | (ForwardLookingIdea::ε) | (Accept::ε) | (Reject::ε) | (Unsure::ε) ;
Author_attendee_book_registration_fee ::= ε ;
AcceptRating ::= ε ;
Camera_Ready_event ::= follows::Administrative_event parallel_with::Administrative_event ;
IASTED_member ::= ε ;
ClosingTalk ::= ε ;
Abstract_And_Paper_Submission_Phase ::= hasPhaseStatus::EEnum ;
Contribution_co-Author ::= ε ;
ListOfAbstracts ::= isProducedBy::Chair ;
MealBreak ::= ε ;
Technical_commitee ::= ε ;
reviewing_proces ::= lower_tier_reviewing_process ;
 reviewing_proces ::= upper_tier_reviewing_process ;
 reviewing_proces ::= lower_tier_reviewing_process | upper_tier_reviewing_process ;
Manual_Paper_Assignment ::= (manually_assign_paper::Program_Committee_member)+ ;
WorksopProposal ::= isSubmittedBy::Author hasAuthor::Author submissionDeadline::dateTime ;
Conference_Hiker ::= ε ;
Workshop_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum hasCo-Author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
Industrial_Session ::= ε ;
Conference_fees ::= ε ;
ConferenceDinner ::= hasMenu::MealMenu ;
New_Information ::= ε ;
Meta-Reviewer ::= invites_co-reviewers::Reviewer invited_by::Reviewer (has_a_review_reference_or_expertise::Thing)+ writes_review::Review hasReviewHistory::PersonalReviewHistory executes::DoubleBlindReview cooperates::ExternalReviewer IsAssignedTo::Paper hasConflictedPaper::Paper hasPreferredPaper::Paper hasPreferredTopic::ResearchTopic writeReview::Review has_made_review::Paper_Review UserName::String Comments_to_Chair::String Other_Areas::String refuses::Pending_Proposed_Conflict reviews::Paper bidsFor::Paper confirmes::Pending_Proposed_Conflict assignedPaperBy::Program_Comitee_Chair assignedByAdministrator::Administrator adjustBid::Bid readPaper::Paper hasBeenAssigned::Paper assignExternalReviewer::ExternalReviewer ;
Activity_before_conference ::= Renting ;
 Activity_before_conference ::= Research ;
 Activity_before_conference ::= Refusing_manuscript ;
 Activity_before_conference ::= Accepting_manuscript ;
 Activity_before_conference ::= Receiving_manuscript ;
 Activity_before_conference ::= Renting | Research | Refusing_manuscript | Accepting_manuscript | Receiving_manuscript ;
ProgramCommitteeChair ::= endReview::Review ;
Contact_Author ::= has_sent::Submitted_Paper Alternate_Email::String ;
Call_for_participation ::= has_authors::Person has_a_date_of_issue::date ;
Invitation_Of_Reviewers_Phase ::= hasPhaseStatus::EEnum ;
Conference_airport ::= ε ;
Passive_conference_participant ::= ε ;
Hidden_Conflict ::= ε ;
MainAuthor ::= submitPaper::Paper writes::Contribution writes_article::Article assigns_article_to_conference::Article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing submitsPaper::Paper writePaper::Paper writes_Paper::Paper changes::Contribution ;
Presenter_city ::= ε ;
TPCMember ::= hasMail::String worksForCompany::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ pay::Money sign::Item is_present::Time (give::Thing)+ need::Item hasAffiliation::String hasFirstName::String hasLastName::String hasEmail::String hasName::String hasConflictOfInterest::Document email::String (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person ;
Early-Registered_Participant ::= ε ;
phase_of_conference ::= ε ;
Overall_Value ::= Valuable_Confirmation_of_Present_Knowledge ;
 Overall_Value ::= Other ;
 Overall_Value ::= Not_Much ;
 Overall_Value ::= New_Information ;
 Overall_Value ::= New_Perspective_Issue_Problem_Solving ;
 Overall_Value ::= Clarity_to_Present_Understanding ;
 Overall_Value ::= Valuable_Confirmation_of_Present_Knowledge | Other | Not_Much | New_Information | New_Perspective_Issue_Problem_Solving | Clarity_to_Present_Understanding ;
Video_cassette_player ::= ε ;
ConferenceEvent ::= NonAcademicEvent ;
 ConferenceEvent ::= AcademicEvent ;
 ConferenceEvent ::= hasAttendee::Person hasLocation::Place hasProgramme::Programme hasEndDateTime::dateTime hasStartDateTime::dateTime ;
Conference_document ::= Conference_contribution ;
 Conference_document ::= Information_for_participants ;
 Conference_document ::= Call_for_paper ;
 Conference_document ::= Conference_announcement ;
 Conference_document ::= Call_for_participation ;
 Conference_document ::= Conference_www ;
 Conference_document ::= has_authors::Person has_a_date_of_issue::date ;
Single_hotel_room ::= ε ;
Introduction_of_speaker ::= ε ;
Multi-author_Volume ::= Proceedings ;
 Multi-author_Volume ::= (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document recieved_by::User used_by::Person submited__by::User ;
Nonmember_registration_fee ::= ε ;
ComputerNetworksMeasurementsTopic ::= ε ;
Coctail_reception ::= ε ;
ProgramCoChair ::= organizes::Conference ;
Chair_URL ::= ε ;
Regular_Session ::= hasAssignedPaper::AcceptedPaper room::String isAssociatedTo::Slot hasChair::Chair ;
Conference_activity ::= Social_program ;
 Conference_activity ::= Technic_activity ;
 Conference_activity ::= Registration ;
 Conference_activity ::= Introduction ;
 Conference_activity ::= Welcome_address ;
 Conference_activity ::= Coffee_break ;
 Conference_activity ::= Coctail_reception ;
 Conference_activity ::= Presentation ;
 Conference_activity ::= Lecture ;
 Conference_activity ::= Social_program | Technic_activity | Registration | Introduction | Welcome_address | Coffee_break | Coctail_reception ;
start_date_of_conference ::= ε ;
Conference_participant ::= Passive_conference_participant ;
 Conference_participant ::= Active_conference_participant ;
ComputerNetworksTopic ::= ComputerNetworksEnterpriseTopic ;
 ComputerNetworksTopic ::= ComputerNetworksSwitchingTopic ;
 ComputerNetworksTopic ::= ComputerNetworksSensorTopic ;
 ComputerNetworksTopic ::= ComputerNetworksSecurityTopic ;
 ComputerNetworksTopic ::= ComputerNetworksOpticalTopic ;
 ComputerNetworksTopic ::= ComputerNetworksMeasurementsTopic ;
 ComputerNetworksTopic ::= ComputerNetworksManagementTopic ;
 ComputerNetworksTopic ::= ComputerNetworksAapplicationsTopic ;
 ComputerNetworksTopic ::= ComputerNetworksEnterpriseTopic | ComputerNetworksSwitchingTopic | ComputerNetworksSensorTopic | ComputerNetworksSecurityTopic | ComputerNetworksOpticalTopic | ComputerNetworksMeasurementsTopic | ComputerNetworksManagementTopic | ComputerNetworksAapplicationsTopic ;
Long_bool ::= ε ;
Full_day_tour ::= ε ;
LCD_projector ::= ε ;
Author_Role ::= assigned_by::Administrator ;
PaymentMode ::= ε ;
Presenter_house ::= ε ;
Conference_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum hasCo-Author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
bidding_of_reviewer ::= is_performed_by::human ;
BookletOfAbstracts ::= isProducedBy::Chair ;
Cd_proceening ::= ε ;
StudentAdvocate ::= organizes::Conference ;
Hotel_room ::= Single_hotel_room ;
 Hotel_room ::= Double_hotel_room ;
 Hotel_room ::= Single_hotel_room | Double_hotel_room ;
PaperPresentation ::= relatedToPaper::AcceptedPaper ;
Presenter_university ::= ε ;
Student_registration_fee ::= ε ;
Tutorial_Chair ::= ε ;
abstract_submission_date ::= end_date_of_abstract_submission ;
 abstract_submission_date ::= start_date_of_abstract_submission ;
 abstract_submission_date ::= end_date_of_abstract_submission | start_date_of_abstract_submission ;
Trip_day ::= ε ;
Negative_Review ::= reviewOfPaper::Paper reviewWrittenBy::Possible_Reviewer containsEvaluation::Evaluation rates::Paper isWritenBy::Reviewer writtenBy::Reviewer reviews::Reviewed_contribution gives_classification::classification is_created_in::Activity review_written_by::Reviewer ;
ExternalReviewersList ::= isProducedBy::Chair ;
abstract_of_paper ::= article_written_by::Author has_reviewer::Reviewer has_abstract::Abstract goes_through::Activity is_sent_to::human is_created_in::Activity structure_created_by::human has_author::human gives_classification::classification ;
Approval_Email ::= confirm::Event ;
Hotel_registration_form ::= ε ;
AntennasTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event isIncluded::Activity ;
Source_Archive ::= hasContributionFileStatus::EEnum ;
MicroelectronicsTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event isIncluded::Activity ;
lower_tier_reviewing_process ::= ε ;
ComputerNetworksOpticalTopic ::= ε ;
Contributed_Talk ::= (presentationOfPaper::Document)+ ;
Contact_Person ::= is_author_of::Article performs_activity::Activity is_employed_in::institute has_topic_of_interest::Topic supervises::Activity e-mail::String last_name::String first_name::String ;
TutorialProposal ::= isSubmittedBy::Author hasAuthor::Author submissionDeadline::dateTime ;
Conference_Participant ::= Demo_Chair ;
 Conference_Participant ::= OC_Member ;
 Conference_Participant ::= Early-Registered_Participant ;
 Conference_Participant ::= Late-Registered_Participant ;
 Conference_Participant ::= Tutorial_Chair ;
 Conference_Participant ::= PC_Chair ;
 Conference_Participant ::= Workshop_Chair ;
 Conference_Participant ::= Presenter ;
 Conference_Participant ::= Session_Chair ;
 Conference_Participant ::= Demo_Chair | OC_Member | Early-Registered_Participant | Late-Registered_Participant ;
Paper_File ::= is_Type::Format ;
RFC ::= ε ;
Conference_city ::= ε ;
Proposed_Conflict ::= conflictProposedBy::Thing ;
Reviewer_Famliliarity ::= High ;
 Reviewer_Famliliarity ::= Low ;
 Reviewer_Famliliarity ::= Moderate ;
 Reviewer_Famliliarity ::= High | Low | Moderate ;
Accepting_manuscript ::= ε ;
Rejected_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum hasCo-Author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer hasReview::Review ;
Event_Approval ::= hasTopic::Topic expectedAttendance::Integer isPartOf::Conference is_held_before::Time is_held_in::Thing is_held_after::Time is_dated_on::dateTime has_result::Article sent_by::Person is_followed_by::Activity is_monitored_by::human has_intensity::intensity has_result::Article is_performed_by::human is_supervised_by::human ;
Invited_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum hasCo-Author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
PC_Member ::= SC_Member ;
 PC_Member ::= Session_Chair ;
 PC_Member ::= Tutorial_Chair ;
 PC_Member ::= PC_Chair ;
 PC_Member ::= Workshop_Chair ;
Highly_Practical ::= ε ;
Plenary_lecture_speaker ::= submitPaper::Paper writes::Contribution writes_article::Article assigns_article_to_conference::Article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing submitsPaper::Paper writePaper::Paper writes_Paper::Paper changes::Contribution ;
Academic_Institution ::= Research_Institute ;
 Academic_Institution ::= University ;
 Academic_Institution ::= scientificallyOrganises::Academic_Institution ;
PaperStatus ::= isStatusOf::Paper ;
Author_book_proceedings_included ::= submitPaper::Paper writes::Contribution writes_article::Article assigns_article_to_conference::Article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing submitsPaper::Paper writePaper::Paper writes_Paper::Paper changes::Contribution ;
Value_added_tax ::= ε ;
Video_presentation ::= is_given_by::Active_conference_participant ;
Paper_Categorization ::= Tends_Towards_Theoretical ;
 Paper_Categorization ::= Tends_Towards_Practical ;
 Paper_Categorization ::= Balanced_Theory_and_Practice ;
 Paper_Categorization ::= Highly_Theoretical ;
 Paper_Categorization ::= Highly_Practical ;
 Paper_Categorization ::= Tends_Towards_Theoretical | Tends_Towards_Practical | Balanced_Theory_and_Practice | Highly_Theoretical | Highly_Practical ;
submission_process ::= is_performed_by::human ;
Camera_ready_manuscript_deadline ::= done_till::date ;
OC_Chair ::= ε ;
MealEvent ::= ConferenceDinner ;
 MealEvent ::= hasMenu::MealMenu ;
PublicityWebChair ::= organizes::Conference ;
Credit_card ::= ε ;
end_date_of_camera-ready_submission ::= ε ;
start_date_of_abstract_submission ::= ε ;
CoffeeBreak ::= ε ;
Conference_Session ::= Industrial_Session ;
Research_Institute ::= scientificallyOrganises::Academic_Institution ;
Reviewer_Role ::= assigned_by::Administrator ;
Activity_after_conference ::= Departure ;
 Activity_after_conference ::= Full_day_tour ;
 Activity_after_conference ::= Departure | Full_day_tour ;
Bank_transfer ::= ε ;
Non_speaker ::= Worker_non_speaker ;
 Non_speaker ::= Student_non_speaker ;
 Non_speaker ::= Worker_non_speaker | Student_non_speaker ;
Committe_Role ::= assigned_by::Administrator ;
Registration_form ::= ε ;
PhaseOfConferencePreparation ::= Setup_Phase ;
 PhaseOfConferencePreparation ::= Camera_Ready_Copy_Phase ;
 PhaseOfConferencePreparation ::= Assignment_Phase ;
 PhaseOfConferencePreparation ::= Blocked_Phase ;
 PhaseOfConferencePreparation ::= Abstract_And_Paper_Submission_Phase ;
 PhaseOfConferencePreparation ::= Invitation_Of_Reviewers_Phase ;
 PhaseOfConferencePreparation ::= Review_Phase ;
 PhaseOfConferencePreparation ::= Closed_Phase ;
 PhaseOfConferencePreparation ::= Bidding_Phase ;
 PhaseOfConferencePreparation ::= hasPhaseStatus::EEnum ;
Student_non_speaker ::= ε ;
Review_Form_Setup ::= ε ;
Administrative_event ::= Reviewing_results_event ;
 Administrative_event ::= Reviewing_event ;
 Administrative_event ::= Registration_of_participants_event ;
 Administrative_event ::= Submission_event ;
 Administrative_event ::= Camera_Ready_event ;
 Administrative_event ::= follows::Administrative_event parallel_with::Administrative_event ;
Brief_introduction_for_Session_chair ::= (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document recieved_by::User used_by::Person submited__by::User ;
Camera_ready_contribution ::= ε ;
Adobe_PDF ::= ε ;
Conference_Program ::= Program_made_by::Program_chair planned_papers::Planed_Paper ;
Positive_Review ::= reviewOfPaper::Paper reviewWrittenBy::Possible_Reviewer containsEvaluation::Evaluation rates::Paper isWritenBy::Reviewer writtenBy::Reviewer reviews::Reviewed_contribution gives_classification::classification is_created_in::Activity review_written_by::Reviewer ;
PublishedPaper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum hasCo-Author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
full_paper_submission_date ::= start_date_of_full_paper_submission ;
 full_paper_submission_date ::= end_date_of_full_paper_submission ;
 full_paper_submission_date ::= start_date_of_full_paper_submission | end_date_of_full_paper_submission ;
DoubleBlindReview ::= isExecutedBy::Reviewer ;
ReviewForm ::= ε ;
Hotel_fee ::= ε ;
Sponsor_company_house ::= ε ;
Student_lecturer ::= ε ;
Written_contribution ::= Submitted_contribution ;
 Written_contribution ::= Regular_contribution ;
 Written_contribution ::= Submitted_contribution | Regular_contribution ;
Conference_contributor ::= Regular_author ;
 Conference_contributor ::= Invited_speaker ;
 Conference_contributor ::= Active_conference_participant ;
 Conference_contributor ::= Regular_author | Invited_speaker ;
Event_Setup ::= Paper_Typologies ;
 Event_Setup ::= Review_Form ;
 Event_Setup ::= Submission_Template ;
 Event_Setup ::= Event_Tracks ;
 Event_Setup ::= Research_Topic ;
 Event_Setup ::= Email_Template ;
 Event_Setup ::= define::Event ;
CommitteeMember ::= isMemberOf::Conference ;
Conference_building ::= ε ;
Corresponding_Author ::= submitPaper::Paper writes::Contribution writes_article::Article assigns_article_to_conference::Article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing submitsPaper::Paper writePaper::Paper writes_Paper::Paper changes::Contribution ;
PendingPaper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum hasCo-Author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
PowerlineTransmissionTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event isIncluded::Activity ;
Marginal_Tend_to_Reject ::= ε ;
IndustryOrganization ::= isProviderOf::Sponsorship ;
TestOnlyTopic ::= belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part isTopicOf::Working_event isIncluded::Activity ;
WeekRejectRating ::= ε ;
Contribution_File ::= Source_Archive ;
 Contribution_File ::= Poster ;
 Contribution_File ::= Camera_Ready_Copy ;
 Contribution_File ::= Slides ;
 Contribution_File ::= Paper_File ;
 Contribution_File ::= hasContributionFileStatus::EEnum ;
Conflict_Rules ::= ε ;
Corel_Word_Perfect ::= ε ;
Extended_abstract ::= ε ;
Industrial_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum hasCo-Author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
RTF ::= ε ;
CD-ROM ::= isProducedBy::Chair ;
Co-chair ::= was_a_committe_co-chair_of::Committee ;
Conference_Banquet ::= ε ;
Tutorial_speaker ::= submitPaper::Paper writes::Contribution writes_article::Article assigns_article_to_conference::Article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing submitsPaper::Paper writePaper::Paper writes_Paper::Paper changes::Contribution ;
Organising_Agency ::= (publisherOf::Thing)+ technicallyOrganises::Thing ;
PaperFullVersion ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum hasCo-Author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
RejectRating ::= ε ;
Demo_Session ::= hasAssignedPaper::AcceptedPaper room::String isAssociatedTo::Slot hasChair::Chair ;
Not_Much ::= ε ;
SingleLevelConference ::= is_in_phase::phase_of_conference has_program::program hasMember::Person hasName::String endDate::dateTime paperDueOn::dateTime registrationDueOn::dateTime manuscriptDueOn::dateTime startDate::dateTime hasCountry::Country isOrganizedBy::OrganizingCommittee annualOrder::Integer takesPlace::Location hasAcronym::String finishedBy::Program_Comitee_Chair focusesOn::Topic startedBy::Program_Comitee_Chair takesPlace::Location hasConferenceMember::ConferenceMember paperAssignmentFinalizedBy::Administrator reviewCriteriaEnteredBy::Administrator paperAssignmentToolsRunBy::Administrator virtualMeetingEnabledBy::Administrator hardcopyMailingManifestsPrintedBy::Administrator detailsEnteredBy::Administrator reviewerBiddingStartedBy::Administrator date::date reviewsPerPaper::Integer logoURL::anyURI acceptsHardcopySubmissions::Boolean siteURL::anyURI ;
Program_Committee_member ::= Senior_Program_Committee_member ;
 Program_Committee_member ::= Regular_Program_Committee_member ;
 Program_Committee_member ::= Senior_Program_Committee_member | Regular_Program_Committee_member ;
Worker_lecturer ::= ε ;
ResearchTopic ::= ε ;
ConferenceVenuePlace ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
end_date_of_full_paper_submission ::= ε ;
Conference_contribution ::= Poster ;
 Conference_contribution ::= Written_contribution ;
 Conference_contribution ::= Presentation ;
 Conference_contribution ::= is_submitted_at::Conference_volume ;
Invited_Talk ::= (presentationOfPaper::Document)+ ;
Demo_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum hasCo-Author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
CallForReviews ::= forEvent::AcademicEvent (isInitiatedBy::Person)+ hasSubmissionInstructions::String hasSubmissionDeadline::dateTime ;
acceptance_notification_email ::= ε ;
Author_attendee_cd_registration_fee ::= ε ;
ComputerNetworksManagementTopic ::= ε ;
Paper_Typologies ::= define::Event ;
Information_for_participants ::= has_authors::Person has_a_date_of_issue::date ;
Bidding_And_Paper_Submission_Phase ::= ε ;
Camera_Ready_Copy_Phase ::= hasPhaseStatus::EEnum ;
Programme_Brochure ::= (relatesTo::Thing)+ writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document recieved_by::User used_by::Person submited__by::User ;
Balanced_Theory_and_Practice ::= ε ;
NonAcademicEvent ::= MealEvent ;
 NonAcademicEvent ::= BreakEvent ;
 NonAcademicEvent ::= SocialEvent ;
 NonAcademicEvent ::= MealEvent | BreakEvent | SocialEvent ;
MS_Word ::= ε ;
Fee_for_extra_trip ::= ε ;
ComputerNetworksSwitchingTopic ::= ε ;
Conference_restaurant ::= ε ;
Meta-Review ::= reviewOfPaper::Paper reviewWrittenBy::Possible_Reviewer containsEvaluation::Evaluation rates::Paper isWritenBy::Reviewer writtenBy::Reviewer reviews::Reviewed_contribution gives_classification::classification is_created_in::Activity review_written_by::Reviewer ;
Invited_speaker ::= ε ;
Presenter_state ::= ε ;
Poster_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum hasCo-Author::Co-Author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
Regular_Reviewer_URL ::= ε ;
managing_of_conference_process ::= hasTopic::Topic expectedAttendance::Integer isPartOf::Conference is_held_before::Time is_held_in::Thing is_held_after::Time is_dated_on::dateTime has_result::Article sent_by::Person is_followed_by::Activity is_monitored_by::human has_intensity::intensity has_result::Article is_performed_by::human is_supervised_by::human ;
Bidding_Without_Paper_Submission_Phase ::= ε ;
Planed_Paper ::= is_planned_in::Conference_Program ;
Call_for_paper ::= has_authors::Person has_a_date_of_issue::date ;
PersonalHistory ::= PersonalPublicationHistory ;
 PersonalHistory ::= PersonalReviewHistory ;
 PersonalHistory ::= PersonalPublicationHistory | PersonalReviewHistory ;
Conference_www ::= has_a_URL::String ;
Clear_Reject ::= ε ;
Rejected_contribution ::= has_a_review::Review ;
Invited_talk ::= is_given_by::Active_conference_participant ;
Workshop_Chair ::= ε ;
Event_Tracks ::= define::Event ;
Submission_Template ::= define::Event ;
Co-Author ::= co-writePaper::Paper ;
Camera_Ready_Copy ::= hasContributionFileStatus::EEnum ;
Author_information_form ::= ε ;
ComputerNetworksAapplicationsTopic ::= ε ;
Review_expertise ::= has_a_submitted_contribution::Submitted_contribution has_an_expertise::EEnum ;
Event_URL ::= concerned::Event ;
Important_dates ::= is_an_abstract_submission_date::date is_a_full_paper_submission_date::date is_an_ending_date::date is_a_date_of_acceptance_announcement::date is_a_date_of_camera_ready_paper_submission::date is_a_starting_date::date belong_to_a_conference_volume::Conference_volume ;
Submission_event ::= follows::Administrative_event parallel_with::Administrative_event ;
ActivePaper ::= RatedPapers ;
 ActivePaper ::= hasRating::ReviewRating ;
Feature_Request ::= ε ;
AcceptedPaper ::= relatedToEvent::PaperPresentation isAssignedToSession::Session ;
TravelGrant ::= providedBy::Organization hasCostCurrency::String hasCostAmount::Integer ;
Review_preference ::= (has_a_topic_or_a_submission_contribution::Thing)+ has_a_degree::Integer ;
Memeber_registration_fee ::= ε ;
--------------------metamodels::sbvrEclipse.bgf--------------------
ReferenceSchemeSimplyUsesFactTypeRole ::= referenceScheme::ReferenceScheme factTypeRole::FactTypeRole ;
FactModel ::= (name::Name)+ ;
RepresentationFormality ::= ε ;
VocabularyNamespaceIsDerivedFromVocabulary ::= vocabularyNamespace::VocabularyNamespace vocabulary::Vocabulary ;
PropositionNominalizationConsidersLogicalFormulation ::= propositionNominalization::PropositionNominalization logicalFormulation::LogicalFormulation ;
SpeechCommunityDeterminesRulebook ::= speechCommunity::SpeechCommunity rulebook::Rulebook ;
SpeechCommunityUsesLanguage ::= speechCommunity::SpeechCommunity language::Language ;
ProjectingFormulationBindsToBindableTarget ::= projectingFormulation::ProjectingFormulation bindableTarget::BindableTarget ;
ConceptHasInstance ::= concept::Concept instance::Thing ;
PossibilityFormulation ::= ε ;
FactType ::= Characteristic ;
 FactType ::= AssociativeFactType ;
 FactType ::= AssortmentFactType ;
 FactType ::= BinaryFactType ;
 FactType ::= SpecializationFactType ;
 FactType ::= IsroleofFactType ;
 FactType ::= (factTypeForm::FactTypeForm)+ (role::FactTypeRole)+ ;
RestrictedPermissionStatement ::= ε ;
SpeechCommunityOwnsOwnedDefinition ::= speechCommunity::SpeechCommunity ownedDefinition::OwnedDefinition ;
CommunicationContent ::= meaning::Meaning expression::Expression ;
OptionalityStatement ::= ε ;
AtomicFormulationIsBasedOnFactType ::= atomicFormulation::AtomicFormulation factType::FactType ;
StatementOfAdviceOfPossibility ::= ContingencyStatement ;
 StatementOfAdviceOfPossibility ::= NonnecessityStatement ;
 StatementOfAdviceOfPossibility ::= PossibilityStatement ;
 StatementOfAdviceOfPossibility ::= ContingencyStatement | NonnecessityStatement | PossibilityStatement ;
BodyOfSharedMeaningsUnitesSemanticCommunity ::= bodyOfSharedMeanings::BodyOfSharedMeanings semanticCommunity::SemanticCommunity ;
LogicalOperationHasLogicalOperand ::= logicalOperation::LogicalOperation logicalOperand::LogicalFormulation ;
ConceptualSchema ::= (name::Name)+ ;
ModalFormulationEmbedsLogicalFormulation ::= modalFormulation::ModalFormulation logicalFormulation::LogicalFormulation ;
StructuralRuleStatement ::= ImpossibilityStatement ;
 StructuralRuleStatement ::= NecessityStatement ;
 StructuralRuleStatement ::= RestrictedPossibilityStatement ;
 StructuralRuleStatement ::= ImpossibilityStatement | NecessityStatement | RestrictedPossibilityStatement ;
AtmostnQuantificationHasMaximumCardinality ::= atmostnQuantification::AtmostnQuantification maximumCardinality::NonnegativeInteger ;
RoleBindingOccursInAtomicFormulation ::= roleBinding::RoleBinding atomicFormulation::AtomicFormulation ;
AtleastnQuantification ::= ExistentialQuantification ;
 AtleastnQuantification ::= minimumCardinality::NonnegativeInteger ;
ConceptOfThingExistingDependently ::= (attributiveNamespace::AttributiveNamespace)+ (definition::Definition)+ (moreGeneralConcept::Concept)+ (category::Concept)+ (essentialCharacteristic::Characteristic)+ (instance::Thing)+ (referenceScheme::ReferenceScheme)+ (impliedCharacteristic::Characteristic)+ (necessaryCharacteristic::Characteristic)+ (designation::Designation)+ extension::Set ;
LogicalFormulation ::= ProjectingFormulation ;
 LogicalFormulation ::= Quantification ;
 LogicalFormulation ::= AtomicFormulation ;
 LogicalFormulation ::= LogicalOperation ;
 LogicalFormulation ::= InstantiationFormulation ;
 LogicalFormulation ::= ModalFormulation ;
 LogicalFormulation ::= Objectification ;
 LogicalFormulation ::= PropositionNominalization ;
 LogicalFormulation ::= ClosedLogicalFormulation ;
 LogicalFormulation ::= ProjectingFormulation | Quantification | AtomicFormulation | LogicalOperation | InstantiationFormulation | ModalFormulation | Objectification | PropositionNominalization ;
ObjectificationConsidersLogicalFormulation ::= objectification::Objectification logicalFormulation::LogicalFormulation ;
VocabularyIsDesignedForSpeechCommunity ::= vocabulary::Vocabulary speechCommunity::SpeechCommunity ;
QuantificationIntroducesVariable ::= quantification::Quantification variable::Variable ;
IntensionalDefinition ::= DefiniteDescription ;
RepresentationIsInSubjectField ::= representation::Representation subjectField::SubjectField ;
FactTypeForm ::= NounForm ;
 FactTypeForm ::= SententialForm ;
 FactTypeForm ::= (placeholder::Placeholder)+ ;
StatementExpressesProposition ::= statement::Statement proposition::Proposition ;
FactTypeFormDemonstratesDesignation ::= factTypeForm::FactTypeForm designation::Designation ;
ProhibitionStatement ::= ε ;
RepresentationRepresentsMeaning ::= representation::Representation meaning::Meaning ;
NonobligationStatement ::= ε ;
AdviceOfContingency ::= ε ;
ConceptHasSharedUnderstandingBySemanticCommunity ::= concept::Concept semanticCommunity::SemanticCommunity ;
ExistentialQuantification ::= minimumCardinality::NonnegativeInteger ;
OwnedDefinition ::= ε ;
BinaryLogicalOperationHasLogicalOperand2 ::= binaryLogicalOperation::BinaryLogicalOperation logicalOperand2::LogicalFormulation ;
BinaryLogicalOperationHasLogicalOperand1 ::= binaryLogicalOperation::BinaryLogicalOperation logicalOperand1::LogicalFormulation ;
SemanticFormulation ::= LogicalFormulation ;
 SemanticFormulation ::= Projection ;
 SemanticFormulation ::= ClosedSemanticFormulation ;
 SemanticFormulation ::= LogicalFormulation | Projection | ClosedSemanticFormulation ;
BusinessRuleIsDerivedFromBusinessPolicy ::= businessRule::BusinessRule businessPolicy::BusinessPolicy ;
RuleStatement ::= StructuralRuleStatement ;
 RuleStatement ::= OperativeBusinessRuleStatement ;
 RuleStatement ::= StructuralRuleStatement | OperativeBusinessRuleStatement ;
StateOfAffairsInvolvesThingInRole ::= stateOfAffairs::StateOfAffairs thing::Thing role::Role ;
QuestionNominalization ::= projection::Projection ;
VariableMapsToFactTypeRole ::= variable::Variable factTypeRole::FactTypeRole ;
BindableTarget ::= Expression ;
 BindableTarget ::= Variable ;
 BindableTarget ::= IndividualConcept ;
 BindableTarget ::= Expression | Variable ;
SententialForm ::= (placeholder::Placeholder)+ ;
ConceptOfThingAsOccurrent ::= (attributiveNamespace::AttributiveNamespace)+ (definition::Definition)+ (moreGeneralConcept::Concept)+ (category::Concept)+ (essentialCharacteristic::Characteristic)+ (instance::Thing)+ (referenceScheme::ReferenceScheme)+ (impliedCharacteristic::Characteristic)+ (necessaryCharacteristic::Characteristic)+ (designation::Designation)+ extension::Set ;
ConceptType ::= CharacteristicType ;
BusinessPolicyIsBasisForAdvice ::= businessPolicy::BusinessPolicy advice::Advice ;
BinaryLogicalOperation ::= Conjunction ;
 BinaryLogicalOperation ::= Disjunction ;
 BinaryLogicalOperation ::= Equivalence ;
 BinaryLogicalOperation ::= ExclusiveDisjunction ;
 BinaryLogicalOperation ::= Implication ;
 BinaryLogicalOperation ::= NandFormulation ;
 BinaryLogicalOperation ::= NorFormulation ;
 BinaryLogicalOperation ::= WhetherornotFormulation ;
 BinaryLogicalOperation ::= (logicalOperand2::LogicalFormulation)+ (logicalOperand1::LogicalFormulation)+ ;
ClosedProjectionFormalizesDefinition ::= closedProjection::ClosedProjection definition::Definition ;
ThingInContext ::= ε ;
CommunityHasUri ::= community::Community uri::Uri ;
ClosedSemanticFormulationFormulatesMeaning ::= closedSemanticFormulation::ClosedSemanticFormulation meaning::Meaning ;
StructuralRule ::= StructuralBusinessRule ;
 StructuralRule ::= ε ;
NoteCommentsOnMeaning ::= note::Note meaning::Meaning ;
DescriptionPortraysMeaning ::= description::Description meaning::Meaning ;
VariableHasProjectionPosition ::= variable::Variable projectionPosition::PositiveInteger ;
DesignationIsInNamespace ::= designation::Designation namespace::Namespace ;
CharacteristicType ::= ε ;
ImplicationHasConsequent ::= implication::Implication consequent::LogicalFormulation ;
FactTypeNominalization ::= projection::Projection ;
NamespaceHasUri ::= namespace::Namespace uri::Uri ;
KindOfGuidanceStatement ::= ε ;
SpeechCommunityRegulatesItsUsageOfSignifier ::= speechCommunity::SpeechCommunity signifier::Expression ;
UniversalQuantification ::= scopeFormulation::LogicalFormulation ;
AnswerNominalization ::= projection::Projection ;
ClosedProjectionDefinesFactType ::= closedProjection::ClosedProjection factType::FactType ;
FundamentalConcept ::= (categorizationScheme::CategorizationScheme)+ (categorizationType::CategorizationType)+ ;
StateOfAffairs ::= Actuality ;
FactTypeFormIncorporatesFactSymbol ::= factTypeForm::FactTypeForm factSymbol::FactSymbol ;
PartitiveFactType ::= ε ;
LogicalOperation ::= BinaryLogicalOperation ;
 LogicalOperation ::= LogicalNegation ;
 LogicalOperation ::= logicalOperand::LogicalFormulation ;
IsroleofFactType ::= (factTypeForm::FactTypeForm)+ (role::FactTypeRole)+ ;
ExtensionalDefinition ::= ε ;
VocabularyIsUsedToExpressBodyOfSharedMeanings ::= vocabulary::Vocabulary bodyOfSharedMeanings::BodyOfSharedMeanings ;
FactTypeRole ::= (roleBinding::RoleBinding)+ ;
NecessityStatement ::= ε ;
SetHasCardinality ::= set::Set cardinality::NonnegativeInteger ;
AtmostnQuantification ::= AtmostoneQuantification ;
 AtmostnQuantification ::= maximumCardinality::NonnegativeInteger ;
ObligationStatement ::= ε ;
ProjectingFormulation ::= AggregationFormulation ;
 ProjectingFormulation ::= AnswerNominalization ;
 ProjectingFormulation ::= FactTypeNominalization ;
 ProjectingFormulation ::= NounConceptNominalization ;
 ProjectingFormulation ::= QuestionNominalization ;
 ProjectingFormulation ::= projection::Projection ;
IndividualConcept ::= ε ;
ConceptOfThingAsPrimitive ::= (attributiveNamespace::AttributiveNamespace)+ (definition::Definition)+ (moreGeneralConcept::Concept)+ (category::Concept)+ (essentialCharacteristic::Characteristic)+ (instance::Thing)+ (referenceScheme::ReferenceScheme)+ (impliedCharacteristic::Characteristic)+ (necessaryCharacteristic::Characteristic)+ (designation::Designation)+ extension::Set ;
ConceptHasDesignation ::= concept::Concept designation::Designation ;
ClosedLogicalFormulationFormalizesStatement ::= closedLogicalFormulation::ClosedLogicalFormulation statement::Statement ;
TerminologicalDictionary ::= (uri::Uri)+ ;
InformalRepresentation ::= meaning::Meaning expression::Expression ;
TerminologicalDictionaryPresentsVocabulary ::= terminologicalDictionary::TerminologicalDictionary vocabulary::Vocabulary ;
QuantificationScopesOverLogicalFormulation ::= quantification::Quantification logicalFormulation::LogicalFormulation ;
NumericRangeQuantificationHasMaximumCardinality ::= numericRangeQuantification::NumericRangeQuantification maximumCardinality::NonnegativeInteger ;
InstantiationFormulationConsidersConcept ::= instantiationFormulation::InstantiationFormulation concept::Concept ;
SpeechCommunityOwnsVocabulary ::= speechCommunity::SpeechCommunity vocabulary::Vocabulary ;
ExpressionRepresentsMeaning ::= expression::Expression meaning::Meaning ;
AggregationFormulation ::= projection::Projection ;
ReferenceSchemeUsesCharacteristic ::= referenceScheme::ReferenceScheme characteristic::Characteristic ;
ExactlyoneQuantification ::= cardinality::NonnegativeInteger ;
RepresentationIsInDesignationContext ::= representation::Representation designationContext::Concept ;
ExplicitnessOfRepresentation ::= ε ;
SubjectField ::= (name::Name)+ ;
MeaningCorrespondsToThing ::= meaning::Meaning thing::Thing ;
DefiniteDescription ::= ε ;
ThingIsInSet ::= thing::Thing set::Set ;
FactSymbol ::= implicitlyIsUnderstood::Boolean signifier::Expression ;
CommunicationContentIsComposedOfRepresentation ::= communicationContent::CommunicationContent representation::Representation ;
AuxiliaryVariable ::= restrictingFormulation::LogicalFormulation projectionPosition::PositiveInteger rangedoverConcept::Concept isUnitary::Boolean ;
FactTypeTemplating ::= ε ;
ConceptIsClosedInConceptualSchema ::= concept::Concept conceptualSchema::ConceptualSchema ;
RoleRangesOverObjectType ::= role::Role objectType::ObjectType ;
ObjectType ::= ConceptType ;
 ObjectType ::= FundamentalConcept ;
 ObjectType ::= LogicalFormulationKind ;
 ObjectType ::= SituationalRole ;
 ObjectType ::= (categorizationScheme::CategorizationScheme)+ (categorizationType::CategorizationType)+ ;
ConceptHasNecessaryCharacteristic ::= concept::Concept necessaryCharacteristic::Characteristic ;
AdviceStatement ::= StatementOfAdviceOfPossibility ;
 AdviceStatement ::= StatementOfAdviceOfPermission ;
 AdviceStatement ::= StatementOfAdviceOfPossibility | StatementOfAdviceOfPermission ;
BodyOfSharedMeanings ::= (elementaryFactType::FactType)+ ;
TerminologicalDictionaryHasUri ::= terminologicalDictionary::TerminologicalDictionary uri::Uri ;
BusinessPolicy ::= isDirectlyEnforceable::Boolean ;
SemanticCommunityHasSpeechCommunity ::= semanticCommunity::SemanticCommunity speechCommunity::SpeechCommunity ;
ElementOfGuidanceObligatesStateOfAffairs ::= elementOfGuidance::ElementOfGuidance stateOfAffairs::StateOfAffairs ;
ConceptHasExtension ::= concept::Concept extension::Set ;
ElementOfGuidanceIsIncludedInBodyOfSharedGuidance ::= elementOfGuidance::ElementOfGuidance bodyOfSharedGuidance::BodyOfSharedGuidance ;
IsfacetofFactType ::= ε ;
ClosedLogicalFormulationMeansProposition ::= closedLogicalFormulation::ClosedLogicalFormulation proposition::Proposition ;
AdviceOfPossibility ::= AdviceOfContingency ;
DescriptiveExample ::= meaning::Meaning expression::Expression ;
PossibilityStatement ::= ε ;
IspropertyofFactType ::= ε ;
PropositionNominalizationBindsToBindableTarget ::= propositionNominalization::PropositionNominalization bindableTarget::BindableTarget ;
NameReferencesThing ::= name::Name thing::Thing ;
Concept1SpecializesConcept2 ::= concept1::Concept concept2::Concept ;
ElementOfGuidanceAuthorizesStateOfAffairs ::= elementOfGuidance::ElementOfGuidance stateOfAffairs::StateOfAffairs ;
BodyOfSharedMeaningsIncludesBodyOfSharedGuidance ::= bodyOfSharedMeanings::BodyOfSharedMeanings bodyOfSharedGuidance::BodyOfSharedGuidance ;
WhetherornotFormulationHasInconsequent ::= whetherornotFormulation::WhetherornotFormulation inconsequent::LogicalFormulation ;
Thing1IsThing2 ::= thing1::Thing thing2::Thing ;
RoleBinding ::= (name::Name)+ ;
DefinitionServesAsDesignation ::= definition::Definition designation::Designation ;
RoleBindingBindsToBindableTarget ::= roleBinding::RoleBinding bindableTarget::BindableTarget ;
ConceptOfThingAsContinuant ::= (attributiveNamespace::AttributiveNamespace)+ (definition::Definition)+ (moreGeneralConcept::Concept)+ (category::Concept)+ (essentialCharacteristic::Characteristic)+ (instance::Thing)+ (referenceScheme::ReferenceScheme)+ (impliedCharacteristic::Characteristic)+ (necessaryCharacteristic::Characteristic)+ (designation::Designation)+ extension::Set ;
SpeechCommunity ::= (uri::Uri)+ (subcommunity::Community)+ ;
BinaryFactType ::= PartitiveFactType ;
ConceptOfThingAsComposite ::= (attributiveNamespace::AttributiveNamespace)+ (definition::Definition)+ (moreGeneralConcept::Concept)+ (category::Concept)+ (essentialCharacteristic::Characteristic)+ (instance::Thing)+ (referenceScheme::ReferenceScheme)+ (impliedCharacteristic::Characteristic)+ (necessaryCharacteristic::Characteristic)+ (designation::Designation)+ extension::Set ;
LogicalFormulationKind ::= (categorizationScheme::CategorizationScheme)+ (categorizationType::CategorizationType)+ ;
VariableRangesOverConcept ::= variable::Variable concept::Concept ;
LogicalFormulationRestrictsVariable ::= logicalFormulation::LogicalFormulation variable::Variable ;
NonverbalDesignation ::= Icon ;
WhetherornotFormulation ::= (inconsequent::LogicalFormulation)+ (consequent::LogicalFormulation)+ ;
BusinessRule ::= StructuralBusinessRule ;
 BusinessRule ::= OperativeBusinessRule ;
 BusinessRule ::= isPracticable::Boolean ;
ObligationFormulation ::= ε ;
NonnegativeInteger ::= PositiveInteger ;
ClosedProjection ::= constrainingFormulation::LogicalFormulation (projectionVariable::Variable)+ (auxiliaryVariable::AuxiliaryVariable)+ ;
VocabularyNamespaceIsSpecificToSubjectField ::= vocabularyNamespace::VocabularyNamespace subjectField::SubjectField ;
ReferenceSchemeIsForConcept ::= referenceScheme::ReferenceScheme concept::Concept ;
DesignationHasSignifier ::= designation::Designation signifier::Expression ;
FactTypeHasFactInFactModel ::= factType::FactType fact::Fact factModel::FactModel ;
ProjectionHasAuxiliaryVariable ::= projection::Projection auxiliaryVariable::AuxiliaryVariable ;
VocabularyNamespace ::= (uri::Uri)+ ;
NandFormulation ::= (logicalOperand2::LogicalFormulation)+ (logicalOperand1::LogicalFormulation)+ ;
WhetherornotFormulationHasConsequent ::= whetherornotFormulation::WhetherornotFormulation consequent::LogicalFormulation ;
AttributiveNamespace ::= (uri::Uri)+ ;
NumericRangeQuantification ::= maximumCardinality::NonnegativeInteger minimumCardinality::NonnegativeInteger ;
AtmostoneQuantification ::= maximumCardinality::NonnegativeInteger ;
BusinessVocabulary ::= ε ;
RepresentationHasExpression ::= representation::Representation expression::Expression ;
LevelOfEnforcement ::= (name::Name)+ ;
PositiveInteger ::= ε ;
AdoptedDefinition ::= ε ;
RulebookIncludesRepresentation ::= rulebook::Rulebook representation::Representation ;
ConceptIsIncludedInBodyOfSharedConcepts ::= concept::Concept bodyOfSharedConcepts::BodyOfSharedConcepts ;
FactTypeRoleDesignation ::= implicitlyIsUnderstood::Boolean signifier::Expression ;
IntensionalDefinitionUsesDelimitingCharacteristic ::= intensionalDefinition::IntensionalDefinition delimitingCharacteristic::Characteristic ;
GuidanceStatement ::= AdviceStatement ;
 GuidanceStatement ::= BusinessPolicyStatement ;
 GuidanceStatement ::= RuleStatement ;
 GuidanceStatement ::= AdviceStatement | BusinessPolicyStatement | RuleStatement ;
PreferredDesignation ::= implicitlyIsUnderstood::Boolean signifier::Expression ;
ResIsSensoryManifestationOfSignifier ::= res::Res signifier::Expression ;
FactTypeRoleHasRoleBinding ::= factTypeRole::FactTypeRole roleBinding::RoleBinding ;
NounConcept ::= Quantity ;
 NounConcept ::= Role ;
 NounConcept ::= ContextualizedConcept ;
 NounConcept ::= IndividualConcept ;
 NounConcept ::= Quantity | Role | ContextualizedConcept ;
InstantiationFormulationBindsToBindableTarget ::= instantiationFormulation::InstantiationFormulation bindableTarget::BindableTarget ;
BodyOfSharedMeaningsIncludesBodyOfSharedConcepts ::= bodyOfSharedMeanings::BodyOfSharedMeanings bodyOfSharedConcepts::BodyOfSharedConcepts ;
ContextOfThing ::= ε ;
AtleastnQuantificationHasMinimumCardinality ::= atleastnQuantification::AtleastnQuantification minimumCardinality::NonnegativeInteger ;
NonnecessityStatement ::= ε ;
NecessityFormulation ::= ε ;
FactModelIsBasedOnConceptualSchema ::= factModel::FactModel conceptualSchema::ConceptualSchema ;
VocabularyNamespaceIsForLanguage ::= vocabularyNamespace::VocabularyNamespace language::Language ;
SpeechCommunityAdoptsAdoptedDefinitionCitingReference ::= speechCommunity::SpeechCommunity adoptedDefinition::AdoptedDefinition reference::Reference ;
AdviceOfOptionality ::= ε ;
LogicalFormulationConstrainsProjection ::= logicalFormulation::LogicalFormulation projection::Projection ;
FormalRepresentation ::= meaning::Meaning expression::Expression ;
SpeechCommunityUsesVocabulary ::= speechCommunity::SpeechCommunity vocabulary::Vocabulary ;
ContextualizationFactType ::= IsfacetofFactType ;
PlaceholderUsesDesignation ::= placeholder::Placeholder designation::Designation ;
FactTypeIsElementaryInBodyOfSharedMeanings ::= factType::FactType bodyOfSharedMeanings::BodyOfSharedMeanings ;
ReferenceScheme ::= (simplyUsedRole::FactTypeRole)+ (identifyingCharacteristic::Characteristic)+ (extensionallyUsedRole::FactTypeRole)+ ;
NumericRangeQuantificationHasMinimumCardinality ::= numericRangeQuantification::NumericRangeQuantification minimumCardinality::NonnegativeInteger ;
ModalFormulation ::= NecessityFormulation ;
 ModalFormulation ::= ObligationFormulation ;
 ModalFormulation ::= PermissibilityFormulation ;
 ModalFormulation ::= PossibilityFormulation ;
 ModalFormulation ::= NecessityFormulation | ObligationFormulation | PermissibilityFormulation | PossibilityFormulation ;
PlaceholderIsInFactTypeForm ::= placeholder::Placeholder factTypeForm::FactTypeForm ;
CategorizationSchemeContainsCategory ::= categorizationScheme::CategorizationScheme category::Concept ;
ClosedSemanticFormulation ::= ClosedLogicalFormulation ;
 ClosedSemanticFormulation ::= ε ;
ContextualizedConcept ::= Facet ;
SemanticCommunity ::= (speechCommunity::SpeechCommunity)+ ;
ConceptOfThingAsUnitary ::= (attributiveNamespace::AttributiveNamespace)+ (definition::Definition)+ (moreGeneralConcept::Concept)+ (category::Concept)+ (essentialCharacteristic::Characteristic)+ (instance::Thing)+ (referenceScheme::ReferenceScheme)+ (impliedCharacteristic::Characteristic)+ (necessaryCharacteristic::Characteristic)+ (designation::Designation)+ extension::Set ;
SituationalRole ::= (categorizationScheme::CategorizationScheme)+ (categorizationType::CategorizationType)+ ;
FactTypeHasFactTypeForm ::= factType::FactType factTypeForm::FactTypeForm ;
TermDenotesThing ::= term::Term thing::Thing ;
ProjectingFormulationHasProjection ::= projectingFormulation::ProjectingFormulation projection::Projection ;
OperativeBusinessRule ::= (levelOfEnforcement::LevelOfEnforcement)+ ;
SpecializationFactType ::= CategorizationFactType ;
 SpecializationFactType ::= ContextualizationFactType ;
 SpecializationFactType ::= CategorizationFactType | ContextualizationFactType ;
VocabularyNamespaceIsSpecificToDesignationContext ::= vocabularyNamespace::VocabularyNamespace designationContext::Concept ;
FactTypeInternallyIsClosedInConceptualSchema ::= factType::FactType conceptualSchema::ConceptualSchema ;
ExclusiveDisjunction ::= (logicalOperand2::LogicalFormulation)+ (logicalOperand1::LogicalFormulation)+ ;
FactTypeFormIsInNamespace ::= factTypeForm::FactTypeForm namespace::Namespace ;
RealworldNumericalCorrespondence ::= ε ;
Quantity1IsLessThanQuantity2 ::= quantity1::Quantity quantity2::Quantity ;
StructuralBusinessRule ::= ε ;
ConceptIncorporatesCharacteristic ::= concept::Concept characteristic::Characteristic ;
NounConceptNominalization ::= projection::Projection ;
BodyOfSharedGuidance ::= (name::Name)+ ;
DescriptiveExampleIllustratesMeaning ::= descriptiveExample::DescriptiveExample meaning::Meaning ;
FactModelIncludesFact ::= factModel::FactModel fact::Fact ;
TerminologicalDictionaryExpressesBodyOfSharedMeanings ::= terminologicalDictionary::TerminologicalDictionary bodyOfSharedMeanings::BodyOfSharedMeanings ;
FactTypeRoleIsInFactType ::= factTypeRole::FactTypeRole factType::FactType ;
LogicalNegation ::= logicalOperand::LogicalFormulation ;
ImplicationHasAntecedent ::= implication::Implication antecedent::LogicalFormulation ;
ReferencePointsToInformationSource ::= reference::Reference informationSource::CommunicationContent ;
PropositionNominalization ::= ε ;
ExactlynQuantification ::= ExactlyoneQuantification ;
 ExactlynQuantification ::= cardinality::NonnegativeInteger ;
ClosedLogicalFormulation ::= ε ;
BusinessPolicyStatement ::= ε ;
CategorizationTypeIsForGeneralConcept ::= categorizationType::CategorizationType generalConcept::ObjectType ;
CommunityHasSubcommunity ::= community::Community subcommunity::Community ;
BagProjection ::= constrainingFormulation::LogicalFormulation (projectionVariable::Variable)+ (auxiliaryVariable::AuxiliaryVariable)+ ;
ProjectionIsOnVariable ::= projection::Projection variable::Variable ;
ExactlynQuantificationHasCardinality ::= exactlynQuantification::ExactlynQuantification cardinality::NonnegativeInteger ;
ConceptHasImpliedCharacteristic ::= concept::Concept impliedCharacteristic::Characteristic ;
CategorizationSchemeIsForGeneralConcept ::= categorizationScheme::CategorizationScheme generalConcept::ObjectType ;
ConceptualSchemaIncludesFact ::= conceptualSchema::ConceptualSchema fact::Fact ;
ReferenceSchemeExtensionallyUsesFactTypeRole ::= referenceScheme::ReferenceScheme factTypeRole::FactTypeRole ;
CategorizationScheme ::= Segmentation ;
 CategorizationScheme ::= ExplicitnessOfRepresentation ;
 CategorizationScheme ::= FactTypeTemplating ;
 CategorizationScheme ::= KindOfGuidanceStatement ;
 CategorizationScheme ::= RealworldNumericalCorrespondence ;
 CategorizationScheme ::= Segmentation | ExplicitnessOfRepresentation | FactTypeTemplating | KindOfGuidanceStatement | RealworldNumericalCorrespondence ;
ElementOfGuidance ::= Advice ;
 ElementOfGuidance ::= ElementOfGovernance ;
 ElementOfGuidance ::= BusinessRule ;
 ElementOfGuidance ::= isPracticable::Boolean ;
StatementOfAdviceOfPermission ::= NonobligationStatement ;
 StatementOfAdviceOfPermission ::= OptionalityStatement ;
 StatementOfAdviceOfPermission ::= PermissionStatement ;
 StatementOfAdviceOfPermission ::= NonobligationStatement | OptionalityStatement | PermissionStatement ;
BodyOfSharedMeanings1ContainsBodyOfSharedMeanings2 ::= bodyOfSharedMeanings1::BodyOfSharedMeanings bodyOfSharedMeanings2::BodyOfSharedMeanings ;
Quantity1EqualsQuantity2 ::= quantity1::Quantity quantity2::Quantity ;
ImpossibilityStatement ::= ε ;
PermissionStatement ::= ε ;
AdviceOfPermission ::= AdviceOfOptionality ;
ConceptOfThingAsDeveloped ::= (attributiveNamespace::AttributiveNamespace)+ (definition::Definition)+ (moreGeneralConcept::Concept)+ (category::Concept)+ (essentialCharacteristic::Characteristic)+ (instance::Thing)+ (referenceScheme::ReferenceScheme)+ (impliedCharacteristic::Characteristic)+ (necessaryCharacteristic::Characteristic)+ (designation::Designation)+ extension::Set ;
ObjectificationBindsToBindableTarget ::= objectification::Objectification bindableTarget::BindableTarget ;
ProhibitedDesignation ::= implicitlyIsUnderstood::Boolean signifier::Expression ;
PropositionIsBasedOnFactType ::= proposition::Proposition factType::FactType ;
AssortmentFactType ::= (factTypeForm::FactTypeForm)+ (role::FactTypeRole)+ ;
SetProjection ::= constrainingFormulation::LogicalFormulation (projectionVariable::Variable)+ (auxiliaryVariable::AuxiliaryVariable)+ ;
AttributiveNamespaceIsForSubjectConcept ::= attributiveNamespace::AttributiveNamespace subjectConcept::Concept ;
CategorizationFactType ::= ε ;
AtomicFormulation ::= (roleBinding::RoleBinding)+ ;
ReferenceSupportsMeaning ::= reference::Reference meaning::Meaning ;
OperativeBusinessRuleHasLevelOfEnforcement ::= operativeBusinessRule::OperativeBusinessRule levelOfEnforcement::LevelOfEnforcement ;
ElementOfGuidanceProhibitsStateOfAffairs ::= elementOfGuidance::ElementOfGuidance stateOfAffairs::StateOfAffairs ;
BodyOfSharedConcepts ::= (name::Name)+ ;
VariableIsFreesWithinSemanticFormulation ::= variable::Variable semanticFormulation::SemanticFormulation ;
ConceptHasDefinition ::= concept::Concept definition::Definition ;
CategorizationType ::= (attributiveNamespace::AttributiveNamespace)+ (definition::Definition)+ (moreGeneralConcept::Concept)+ (category::Concept)+ (essentialCharacteristic::Characteristic)+ (instance::Thing)+ (referenceScheme::ReferenceScheme)+ (impliedCharacteristic::Characteristic)+ (necessaryCharacteristic::Characteristic)+ (designation::Designation)+ extension::Set ;
PermissibilityFormulation ::= ε ;
Namespace1IncorporatesNamespace2 ::= namespace1::Namespace namespace2::Namespace ;
RepresentationUsesVocabulary ::= representation::Representation vocabulary::Vocabulary ;
NounForm ::= (placeholder::Placeholder)+ ;
VocabularyIsExpressedInLanguage ::= vocabulary::Vocabulary language::Language ;
OperativeBusinessRuleStatement ::= ObligationStatement ;
 OperativeBusinessRuleStatement ::= ProhibitionStatement ;
 OperativeBusinessRuleStatement ::= RestrictedPermissionStatement ;
 OperativeBusinessRuleStatement ::= ObligationStatement | ProhibitionStatement | RestrictedPermissionStatement ;
ClosedProjectionMeansQuestion ::= closedProjection::ClosedProjection question::Question ;
RestrictedPossibilityStatement ::= ε ;
AssociativeFactType ::= IspropertyofFactType ;
ElementOfGovernance ::= BusinessPolicy ;
 ElementOfGovernance ::= OperativeBusinessRule ;
 ElementOfGovernance ::= isDirectlyEnforceable::Boolean ;
AttributiveNamespaceIsWithinVocabularyNamespace ::= attributiveNamespace::AttributiveNamespace vocabularyNamespace::VocabularyNamespace ;
ClosedProjectionDefinesNounConcept ::= closedProjection::ClosedProjection nounConcept::NounConcept ;
DerivableConcept ::= (attributiveNamespace::AttributiveNamespace)+ (definition::Definition)+ (moreGeneralConcept::Concept)+ (category::Concept)+ (essentialCharacteristic::Characteristic)+ (instance::Thing)+ (referenceScheme::ReferenceScheme)+ (impliedCharacteristic::Characteristic)+ (necessaryCharacteristic::Characteristic)+ (designation::Designation)+ extension::Set ;
Vocabulary1IncorporatesVocabulary2 ::= vocabulary1::Vocabulary vocabulary2::Vocabulary ;
InstantiationFormulation ::= ε ;
ConceptOfThingExistingIndependently ::= (attributiveNamespace::AttributiveNamespace)+ (definition::Definition)+ (moreGeneralConcept::Concept)+ (category::Concept)+ (essentialCharacteristic::Characteristic)+ (instance::Thing)+ (referenceScheme::ReferenceScheme)+ (impliedCharacteristic::Characteristic)+ (necessaryCharacteristic::Characteristic)+ (designation::Designation)+ extension::Set ;
NorFormulation ::= (logicalOperand2::LogicalFormulation)+ (logicalOperand1::LogicalFormulation)+ ;
ConceptualSchemaIncludesConcept ::= conceptualSchema::ConceptualSchema concept::Concept ;
PlaceholderIsAtStartingCharacterPosition ::= placeholder::Placeholder startingCharacterPosition::PositiveInteger ;
Concept1IsCoextensiveWithConcept2 ::= concept1::Concept concept2::Concept ;
ContingencyStatement ::= ε ;
--------------------metamodels::sbvrOMG.bgf--------------------
WhetherornotFormulation ::= (inconsequent::LogicalFormulation)+ (consequent::LogicalFormulation)+ ;
FactModel ::= (name::Name)+ ;
BusinessRule ::= StructuralBusinessRule ;
 BusinessRule ::= OperativeBusinessRule ;
 BusinessRule ::= isPracticable::Boolean ;
ObligationFormulation ::= ε ;
NonnegativeInteger ::= PositiveInteger ;
ClosedProjection ::= constrainingFormulation::LogicalFormulation (projectionVariable::Variable)+ (auxiliaryVariable::AuxiliaryVariable)+ ;
FactTypeHasFactInFactModel ::= factType::FactType fact::Fact factModel::FactModel ;
VocabularyNamespace ::= (uri::Uri)+ ;
RepresentationFormality ::= ε ;
NandFormulation ::= (logicalOperand2::LogicalFormulation)+ (logicalOperand1::LogicalFormulation)+ ;
AttributiveNamespace ::= (uri::Uri)+ ;
NumericRangeQuantification ::= maximumCardinality::NonnegativeInteger minimumCardinality::NonnegativeInteger ;
AtmostoneQuantification ::= maximumCardinality::NonnegativeInteger ;
PossibilityFormulation ::= ε ;
BusinessVocabulary ::= ε ;
FactType ::= Characteristic ;
 FactType ::= AssociativeFactType ;
 FactType ::= AssortmentFactType ;
 FactType ::= BinaryFactType ;
 FactType ::= SpecializationFactType ;
 FactType ::= IsroleofFactType ;
 FactType ::= (factTypeForm::FactTypeForm)+ (role::FactTypeRole)+ ;
RestrictedPermissionStatement ::= ε ;
LevelOfEnforcement ::= (name::Name)+ ;
PositiveInteger ::= ε ;
CommunicationContent ::= meaning::Meaning expression::Expression ;
AdoptedDefinition ::= ε ;
OptionalityStatement ::= ε ;
StatementOfAdviceOfPossibility ::= ContingencyStatement ;
 StatementOfAdviceOfPossibility ::= NonnecessityStatement ;
 StatementOfAdviceOfPossibility ::= PossibilityStatement ;
 StatementOfAdviceOfPossibility ::= ContingencyStatement | NonnecessityStatement | PossibilityStatement ;
FactTypeRoleDesignation ::= implicitlyIsUnderstood::Boolean signifier::Expression ;
ConceptualSchema ::= (name::Name)+ ;
GuidanceStatement ::= AdviceStatement ;
 GuidanceStatement ::= BusinessPolicyStatement ;
 GuidanceStatement ::= RuleStatement ;
 GuidanceStatement ::= AdviceStatement | BusinessPolicyStatement | RuleStatement ;
PreferredDesignation ::= implicitlyIsUnderstood::Boolean signifier::Expression ;
StructuralRuleStatement ::= ImpossibilityStatement ;
 StructuralRuleStatement ::= NecessityStatement ;
 StructuralRuleStatement ::= RestrictedPossibilityStatement ;
 StructuralRuleStatement ::= ImpossibilityStatement | NecessityStatement | RestrictedPossibilityStatement ;
AtleastnQuantification ::= ExistentialQuantification ;
 AtleastnQuantification ::= minimumCardinality::NonnegativeInteger ;
ConceptOfThingExistingDependently ::= (attributiveNamespace::AttributiveNamespace)+ (definition::Definition)+ (moreGeneralConcept::Concept)+ (category::Concept)+ (essentialCharacteristic::Characteristic)+ (instance::Thing)+ (referenceScheme::ReferenceScheme)+ (impliedCharacteristic::Characteristic)+ (necessaryCharacteristic::Characteristic)+ (designation::Designation)+ extension::Set ;
LogicalFormulation ::= ProjectingFormulation ;
 LogicalFormulation ::= Quantification ;
 LogicalFormulation ::= AtomicFormulation ;
 LogicalFormulation ::= LogicalOperation ;
 LogicalFormulation ::= InstantiationFormulation ;
 LogicalFormulation ::= ModalFormulation ;
 LogicalFormulation ::= Objectification ;
 LogicalFormulation ::= PropositionNominalization ;
 LogicalFormulation ::= ClosedLogicalFormulation ;
 LogicalFormulation ::= ProjectingFormulation | Quantification | AtomicFormulation | LogicalOperation | InstantiationFormulation | ModalFormulation | Objectification | PropositionNominalization ;
NounConcept ::= Quantity ;
 NounConcept ::= Role ;
 NounConcept ::= ContextualizedConcept ;
 NounConcept ::= IndividualConcept ;
 NounConcept ::= Quantity | Role | ContextualizedConcept ;
IntensionalDefinition ::= DefiniteDescription ;
FactTypeForm ::= NounForm ;
 FactTypeForm ::= SententialForm ;
 FactTypeForm ::= (placeholder::Placeholder)+ ;
ContextOfThing ::= ε ;
NonnecessityStatement ::= ε ;
ProhibitionStatement ::= ε ;
NecessityFormulation ::= ε ;
NonobligationStatement ::= ε ;
AdviceOfContingency ::= ε ;
SpeechCommunityAdoptsAdoptedDefinitionCitingReference ::= speechCommunity::SpeechCommunity adoptedDefinition::AdoptedDefinition reference::Reference ;
AdviceOfOptionality ::= ε ;
FormalRepresentation ::= meaning::Meaning expression::Expression ;
ExistentialQuantification ::= minimumCardinality::NonnegativeInteger ;
ContextualizationFactType ::= IsfacetofFactType ;
OwnedDefinition ::= ε ;
SemanticFormulation ::= LogicalFormulation ;
 SemanticFormulation ::= Projection ;
 SemanticFormulation ::= ClosedSemanticFormulation ;
 SemanticFormulation ::= LogicalFormulation | Projection | ClosedSemanticFormulation ;
RuleStatement ::= StructuralRuleStatement ;
 RuleStatement ::= OperativeBusinessRuleStatement ;
 RuleStatement ::= StructuralRuleStatement | OperativeBusinessRuleStatement ;
StateOfAffairsInvolvesThingInRole ::= stateOfAffairs::StateOfAffairs thing::Thing role::Role ;
ReferenceScheme ::= (simplyUsedRole::FactTypeRole)+ (identifyingCharacteristic::Characteristic)+ (extensionallyUsedRole::FactTypeRole)+ ;
QuestionNominalization ::= projection::Projection ;
ModalFormulation ::= NecessityFormulation ;
 ModalFormulation ::= ObligationFormulation ;
 ModalFormulation ::= PermissibilityFormulation ;
 ModalFormulation ::= PossibilityFormulation ;
 ModalFormulation ::= NecessityFormulation | ObligationFormulation | PermissibilityFormulation | PossibilityFormulation ;
ClosedSemanticFormulation ::= ClosedLogicalFormulation ;
 ClosedSemanticFormulation ::= ε ;
BindableTarget ::= Expression ;
 BindableTarget ::= Variable ;
 BindableTarget ::= IndividualConcept ;
 BindableTarget ::= Expression | Variable ;
ContextualizedConcept ::= Facet ;
SententialForm ::= (placeholder::Placeholder)+ ;
ConceptOfThingAsOccurrent ::= (attributiveNamespace::AttributiveNamespace)+ (definition::Definition)+ (moreGeneralConcept::Concept)+ (category::Concept)+ (essentialCharacteristic::Characteristic)+ (instance::Thing)+ (referenceScheme::ReferenceScheme)+ (impliedCharacteristic::Characteristic)+ (necessaryCharacteristic::Characteristic)+ (designation::Designation)+ extension::Set ;
SemanticCommunity ::= (speechCommunity::SpeechCommunity)+ ;
ConceptOfThingAsUnitary ::= (attributiveNamespace::AttributiveNamespace)+ (definition::Definition)+ (moreGeneralConcept::Concept)+ (category::Concept)+ (essentialCharacteristic::Characteristic)+ (instance::Thing)+ (referenceScheme::ReferenceScheme)+ (impliedCharacteristic::Characteristic)+ (necessaryCharacteristic::Characteristic)+ (designation::Designation)+ extension::Set ;
ConceptType ::= CharacteristicType ;
SituationalRole ::= (categorizationScheme::CategorizationScheme)+ (categorizationType::CategorizationType)+ ;
BinaryLogicalOperation ::= Conjunction ;
 BinaryLogicalOperation ::= Disjunction ;
 BinaryLogicalOperation ::= Equivalence ;
 BinaryLogicalOperation ::= ExclusiveDisjunction ;
 BinaryLogicalOperation ::= Implication ;
 BinaryLogicalOperation ::= NandFormulation ;
 BinaryLogicalOperation ::= NorFormulation ;
 BinaryLogicalOperation ::= WhetherornotFormulation ;
 BinaryLogicalOperation ::= (logicalOperand2::LogicalFormulation)+ (logicalOperand1::LogicalFormulation)+ ;
ThingInContext ::= ε ;
StructuralRule ::= StructuralBusinessRule ;
 StructuralRule ::= ε ;
CharacteristicType ::= ε ;
OperativeBusinessRule ::= (levelOfEnforcement::LevelOfEnforcement)+ ;
SpecializationFactType ::= CategorizationFactType ;
 SpecializationFactType ::= ContextualizationFactType ;
 SpecializationFactType ::= CategorizationFactType | ContextualizationFactType ;
FactTypeNominalization ::= projection::Projection ;
KindOfGuidanceStatement ::= ε ;
UniversalQuantification ::= scopeFormulation::LogicalFormulation ;
AnswerNominalization ::= projection::Projection ;
ExclusiveDisjunction ::= (logicalOperand2::LogicalFormulation)+ (logicalOperand1::LogicalFormulation)+ ;
FundamentalConcept ::= (categorizationScheme::CategorizationScheme)+ (categorizationType::CategorizationType)+ ;
StateOfAffairs ::= Actuality ;
PartitiveFactType ::= ε ;
RealworldNumericalCorrespondence ::= ε ;
LogicalOperation ::= BinaryLogicalOperation ;
 LogicalOperation ::= LogicalNegation ;
 LogicalOperation ::= logicalOperand::LogicalFormulation ;
IsroleofFactType ::= (factTypeForm::FactTypeForm)+ (role::FactTypeRole)+ ;
ExtensionalDefinition ::= ε ;
FactTypeRole ::= (roleBinding::RoleBinding)+ ;
NecessityStatement ::= ε ;
StructuralBusinessRule ::= ε ;
NounConceptNominalization ::= projection::Projection ;
BodyOfSharedGuidance ::= (name::Name)+ ;
AtmostnQuantification ::= AtmostoneQuantification ;
 AtmostnQuantification ::= maximumCardinality::NonnegativeInteger ;
ObligationStatement ::= ε ;
ProjectingFormulation ::= AggregationFormulation ;
 ProjectingFormulation ::= AnswerNominalization ;
 ProjectingFormulation ::= FactTypeNominalization ;
 ProjectingFormulation ::= NounConceptNominalization ;
 ProjectingFormulation ::= QuestionNominalization ;
 ProjectingFormulation ::= projection::Projection ;
IndividualConcept ::= ε ;
LogicalNegation ::= logicalOperand::LogicalFormulation ;
ConceptOfThingAsPrimitive ::= (attributiveNamespace::AttributiveNamespace)+ (definition::Definition)+ (moreGeneralConcept::Concept)+ (category::Concept)+ (essentialCharacteristic::Characteristic)+ (instance::Thing)+ (referenceScheme::ReferenceScheme)+ (impliedCharacteristic::Characteristic)+ (necessaryCharacteristic::Characteristic)+ (designation::Designation)+ extension::Set ;
TerminologicalDictionary ::= (uri::Uri)+ ;
InformalRepresentation ::= meaning::Meaning expression::Expression ;
PropositionNominalization ::= ε ;
ExactlynQuantification ::= ExactlyoneQuantification ;
 ExactlynQuantification ::= cardinality::NonnegativeInteger ;
ClosedLogicalFormulation ::= ε ;
BusinessPolicyStatement ::= ε ;
AggregationFormulation ::= projection::Projection ;
BagProjection ::= constrainingFormulation::LogicalFormulation (projectionVariable::Variable)+ (auxiliaryVariable::AuxiliaryVariable)+ ;
ExactlyoneQuantification ::= cardinality::NonnegativeInteger ;
ExplicitnessOfRepresentation ::= ε ;
SubjectField ::= (name::Name)+ ;
CategorizationScheme ::= Segmentation ;
 CategorizationScheme ::= ExplicitnessOfRepresentation ;
 CategorizationScheme ::= FactTypeTemplating ;
 CategorizationScheme ::= KindOfGuidanceStatement ;
 CategorizationScheme ::= RealworldNumericalCorrespondence ;
 CategorizationScheme ::= Segmentation | ExplicitnessOfRepresentation | FactTypeTemplating | KindOfGuidanceStatement | RealworldNumericalCorrespondence ;
DefiniteDescription ::= ε ;
ElementOfGuidance ::= Advice ;
 ElementOfGuidance ::= ElementOfGovernance ;
 ElementOfGuidance ::= BusinessRule ;
 ElementOfGuidance ::= isPracticable::Boolean ;
StatementOfAdviceOfPermission ::= NonobligationStatement ;
 StatementOfAdviceOfPermission ::= OptionalityStatement ;
 StatementOfAdviceOfPermission ::= PermissionStatement ;
 StatementOfAdviceOfPermission ::= NonobligationStatement | OptionalityStatement | PermissionStatement ;
FactSymbol ::= implicitlyIsUnderstood::Boolean signifier::Expression ;
AuxiliaryVariable ::= restrictingFormulation::LogicalFormulation projectionPosition::PositiveInteger rangedoverConcept::Concept isUnitary::Boolean ;
ImpossibilityStatement ::= ε ;
PermissionStatement ::= ε ;
AdviceOfPermission ::= AdviceOfOptionality ;
FactTypeTemplating ::= ε ;
ConceptOfThingAsDeveloped ::= (attributiveNamespace::AttributiveNamespace)+ (definition::Definition)+ (moreGeneralConcept::Concept)+ (category::Concept)+ (essentialCharacteristic::Characteristic)+ (instance::Thing)+ (referenceScheme::ReferenceScheme)+ (impliedCharacteristic::Characteristic)+ (necessaryCharacteristic::Characteristic)+ (designation::Designation)+ extension::Set ;
ProhibitedDesignation ::= implicitlyIsUnderstood::Boolean signifier::Expression ;
ObjectType ::= ConceptType ;
 ObjectType ::= FundamentalConcept ;
 ObjectType ::= LogicalFormulationKind ;
 ObjectType ::= SituationalRole ;
 ObjectType ::= (categorizationScheme::CategorizationScheme)+ (categorizationType::CategorizationType)+ ;
AdviceStatement ::= StatementOfAdviceOfPossibility ;
 AdviceStatement ::= StatementOfAdviceOfPermission ;
 AdviceStatement ::= StatementOfAdviceOfPossibility | StatementOfAdviceOfPermission ;
AssortmentFactType ::= (factTypeForm::FactTypeForm)+ (role::FactTypeRole)+ ;
BodyOfSharedMeanings ::= (elementaryFactType::FactType)+ ;
BusinessPolicy ::= isDirectlyEnforceable::Boolean ;
SetProjection ::= constrainingFormulation::LogicalFormulation (projectionVariable::Variable)+ (auxiliaryVariable::AuxiliaryVariable)+ ;
CategorizationFactType ::= ε ;
AtomicFormulation ::= (roleBinding::RoleBinding)+ ;
IsfacetofFactType ::= ε ;
BodyOfSharedConcepts ::= (name::Name)+ ;
AdviceOfPossibility ::= AdviceOfContingency ;
CategorizationType ::= (attributiveNamespace::AttributiveNamespace)+ (definition::Definition)+ (moreGeneralConcept::Concept)+ (category::Concept)+ (essentialCharacteristic::Characteristic)+ (instance::Thing)+ (referenceScheme::ReferenceScheme)+ (impliedCharacteristic::Characteristic)+ (necessaryCharacteristic::Characteristic)+ (designation::Designation)+ extension::Set ;
PermissibilityFormulation ::= ε ;
NounForm ::= (placeholder::Placeholder)+ ;
DescriptiveExample ::= meaning::Meaning expression::Expression ;
PossibilityStatement ::= ε ;
OperativeBusinessRuleStatement ::= ObligationStatement ;
 OperativeBusinessRuleStatement ::= ProhibitionStatement ;
 OperativeBusinessRuleStatement ::= RestrictedPermissionStatement ;
 OperativeBusinessRuleStatement ::= ObligationStatement | ProhibitionStatement | RestrictedPermissionStatement ;
IspropertyofFactType ::= ε ;
RestrictedPossibilityStatement ::= ε ;
AssociativeFactType ::= IspropertyofFactType ;
ElementOfGovernance ::= BusinessPolicy ;
 ElementOfGovernance ::= OperativeBusinessRule ;
 ElementOfGovernance ::= isDirectlyEnforceable::Boolean ;
DerivableConcept ::= (attributiveNamespace::AttributiveNamespace)+ (definition::Definition)+ (moreGeneralConcept::Concept)+ (category::Concept)+ (essentialCharacteristic::Characteristic)+ (instance::Thing)+ (referenceScheme::ReferenceScheme)+ (impliedCharacteristic::Characteristic)+ (necessaryCharacteristic::Characteristic)+ (designation::Designation)+ extension::Set ;
RoleBinding ::= (name::Name)+ ;
InstantiationFormulation ::= ε ;
ConceptOfThingExistingIndependently ::= (attributiveNamespace::AttributiveNamespace)+ (definition::Definition)+ (moreGeneralConcept::Concept)+ (category::Concept)+ (essentialCharacteristic::Characteristic)+ (instance::Thing)+ (referenceScheme::ReferenceScheme)+ (impliedCharacteristic::Characteristic)+ (necessaryCharacteristic::Characteristic)+ (designation::Designation)+ extension::Set ;
ConceptOfThingAsContinuant ::= (attributiveNamespace::AttributiveNamespace)+ (definition::Definition)+ (moreGeneralConcept::Concept)+ (category::Concept)+ (essentialCharacteristic::Characteristic)+ (instance::Thing)+ (referenceScheme::ReferenceScheme)+ (impliedCharacteristic::Characteristic)+ (necessaryCharacteristic::Characteristic)+ (designation::Designation)+ extension::Set ;
NorFormulation ::= (logicalOperand2::LogicalFormulation)+ (logicalOperand1::LogicalFormulation)+ ;
SpeechCommunity ::= (uri::Uri)+ (subcommunity::Community)+ ;
BinaryFactType ::= PartitiveFactType ;
ConceptOfThingAsComposite ::= (attributiveNamespace::AttributiveNamespace)+ (definition::Definition)+ (moreGeneralConcept::Concept)+ (category::Concept)+ (essentialCharacteristic::Characteristic)+ (instance::Thing)+ (referenceScheme::ReferenceScheme)+ (impliedCharacteristic::Characteristic)+ (necessaryCharacteristic::Characteristic)+ (designation::Designation)+ extension::Set ;
LogicalFormulationKind ::= (categorizationScheme::CategorizationScheme)+ (categorizationType::CategorizationType)+ ;
NonverbalDesignation ::= Icon ;
ContingencyStatement ::= ε ;
--------------------metamodels::sigkdd.owl.bgf--------------------
Must_Accept ::= ε ;
Email_Template ::= define::Event ;
Proceedings_Publisher ::= (publisherOf::Thing)+ technicallyOrganises::Thing ;
start_date_of_camera-ready_submission ::= ε ;
Conference_proceedings ::= has_an_ISBN::String has_a_publisher::Publisher has_a_volume::String ;
Invited_Speaker ::= ε ;
 Invited_Speaker ::= presentation::Document ;
Registration_SIGKDD_Member ::= designed_by::ACM_SIGKDD Date::dateTime payed_by::Person Price::Integer Currency::String ;
External_Reviewer ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person pay::Registration_fee can_stay_in::Place Nation::String Name::String hasEmail::String hasName::String hasAffiliation::String hasFirstName::String hasLastName::String hasMail::String worksForCompany::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ sign::Item is_present::Time (give::Thing)+ need::Item loggin_in::System submit::Document get::Email E-mail::String hasConflictOfInterest::Document email::String ;
Science_Worker ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person pay::Registration_fee can_stay_in::Place Nation::String Name::String hasEmail::String hasName::String hasAffiliation::String hasFirstName::String hasLastName::String hasMail::String worksForCompany::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ sign::Item is_present::Time (give::Thing)+ need::Item loggin_in::System submit::Document get::Email E-mail::String hasConflictOfInterest::Document email::String ;
Electronic_proceeding ::= CD ;
 Electronic_proceeding ::= Web_site ;
 Electronic_proceeding ::= CD | Web_site ;
Program_Comitee_Chair ::= finishes::Conference headOf::Program_Comitee switches::PhaseOfConferencePreparation starts::Conference accepts::Paper assignsToReview::Paper assignsPaper::Reviewer rejects::Paper ;
TraditionalLecture ::= hasAcronym::String ;
Welcome_address ::= ε ;
RadioCommunicationsTopic ::= isTopicOf::Working_event isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part ;
Transport_vehicle ::= Car ;
 Transport_vehicle ::= Taxi ;
 Transport_vehicle ::= Shuttle_bus ;
 Transport_vehicle ::= Van ;
 Transport_vehicle ::= Car | Taxi | Shuttle_bus | Van ;
AccommodationPlace ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
Domain_Topic ::= Conference_Program ;
 Domain_Topic ::= Paper_Review ;
 Domain_Topic ::= Committees ;
 Domain_Topic ::= People ;
 Domain_Topic ::= Paper ;
 Domain_Topic ::= Paper_File ;
 Domain_Topic ::= Conference_Program | Paper_Review | Committees | People ;
Refusing_manuscript ::= ε ;
SignalProcessingTopic ::= isTopicOf::Working_event isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part ;
TwoLevelConference ::= has_program::program hasMember::Person hasName::String endDate::dateTime paperDueOn::dateTime registrationDueOn::dateTime manuscriptDueOn::dateTime startDate::dateTime hasCountry::Country isOrganizedBy::OrganizingCommittee annualOrder::Integer takesPlace::Location hasAcronym::String finishedBy::Program_Comitee_Chair focusesOn::Topic startedBy::Program_Comitee_Chair takesPlace::Location has_conference_member::ConferenceMember WebSite::anyURI Topic_of_conference::String Date::date holded_by::ACM_SIGKDD Name_of_conference::String Start_of_conference::dateTime City_of_conference::String End_of_conference::dateTime hasConferenceMember::ConferenceMember paperAssignmentFinalizedBy::Administrator reviewCriteriaEnteredBy::Administrator paperAssignmentToolsRunBy::Administrator virtualMeetingEnabledBy::Administrator hardcopyMailingManifestsPrintedBy::Administrator detailsEnteredBy::Administrator reviewerBiddingStartedBy::Administrator date::date reviewsPerPaper::Integer logoURL::anyURI acceptsHardcopySubmissions::Boolean siteURL::anyURI ;
Regular_contribution ::= Extended_abstract ;
Result_of_Advocate ::= ε ;
pc_meeting ::= starts_on::String ends_on::String has_startdate::dateTime has_enddate::dateTime (eventOnList::Thing)+ partOfEvent::Event hasEvent::Event (organisedBy::Thing)+ heldIn::Location conists_of::Event_Tracks confirmed_by::Approval_Email defined_by::Event_Setup approved_by::Administrator ;
SessionChair ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person pay::Registration_fee can_stay_in::Place Nation::String Name::String hasEmail::String hasName::String hasAffiliation::String hasFirstName::String hasLastName::String hasMail::String worksForCompany::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ sign::Item is_present::Time (give::Thing)+ need::Item loggin_in::System submit::Document get::Email E-mail::String hasConflictOfInterest::Document email::String ;
SteeringCommittee ::= organizes::Conference ;
Working_event ::= hasTopic::Topic hasAdministrativeEvent::Administrative_event ;
summary_of_reviews ::= is_created_in::Activity ;
Co-author ::= co-writePaper::Paper ;
Valuable_Confirmation_of_Present_Knowledge ::= ε ;
Review_Values ::= Reviewer_Famliliarity ;
 Review_Values ::= Reccommendation ;
 Review_Values ::= Overall_Value ;
 Review_Values ::= Paper_Categorization ;
 Review_Values ::= Reviewer_Famliliarity | Reccommendation | Overall_Value | Paper_Categorization ;
Short_paper ::= writtenBy::Author dealsWith::Topic remark::String abstract::String contactEmail::String hasKeyword::String hasTitle::String changedBy::Author hasContributionStatus::EEnum ;
Late_paid_applicant ::= ε ;
Nonauthor_registration_fee ::= designed_by::ACM_SIGKDD Date::dateTime payed_by::Person Price::Integer Currency::String ;
Advocated_Paper ::= to_advocate_by::Advocate ;
GovernmentOrganization ::= isProviderOf::Sponsorship ;
Tutorial_Abstract ::= (is_the_1th_part_of::Thing)+ part_of_article::article ;
Primary_Reviewer ::= assign_review::Review ;
Main_office ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
CallForManuscripts ::= forEvent::AcademicEvent (isInitiatedBy::Person)+ hasSubmissionInstructions::String hasSubmissionDeadline::dateTime ;
MealMenu ::= isMenuOf::MealEvent ;
IndexOfAuthors ::= isProducedBy::Chair ;
Workshop_Session ::= hasAssignedPaper::AcceptedPaper room::String isAssociatedTo::Slot hasChair::Chair ;
Paper_Author ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person pay::Registration_fee can_stay_in::Place Nation::String Name::String hasEmail::String hasName::String hasAffiliation::String hasFirstName::String hasLastName::String hasMail::String worksForCompany::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ sign::Item is_present::Time (give::Thing)+ need::Item loggin_in::System submit::Document get::Email E-mail::String hasConflictOfInterest::Document email::String ;
Registeered_applicant ::= Paid_applicant ;
Late-Registered_Participant ::= ε ;
group_email ::= goes_through::Activity is_sent_to::human is_created_in::Activity structure_created_by::human has_author::human gives_classification::classification article_written_by::Author has_reviewer::Reviewer has_abstract::Abstract ;
Full_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Title::String Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
OutsideReferee ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person pay::Registration_fee can_stay_in::Place Nation::String Name::String hasEmail::String hasName::String hasAffiliation::String hasFirstName::String hasLastName::String hasMail::String worksForCompany::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ sign::Item is_present::Time (give::Thing)+ need::Item loggin_in::System submit::Document get::Email E-mail::String hasConflictOfInterest::Document email::String ;
Assigned_Paper ::= Evaluated_Paper ;
 Assigned_Paper ::= hasReviewer::Possible_Reviewer ;
Shuttle_bus ::= ε ;
upper_tier_reviewing_process ::= is_performed_by::human ;
OperatingTopicsystems ::= isTopicOf::Working_event isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part ;
Review_Phase ::= hasPhaseStatus::EEnum ;
Social_program ::= Dinner_banquet ;
GeneralCoChair ::= organizes::Conference ;
PC_Meeting ::= ε ;
E-mail_PC_Meeting ::= ε ;
Conference_state ::= ε ;
ComputerNetworksEnterpriseTopic ::= ε ;
PaperSubmissionChair ::= organizes::Conference ;
Chair_PC ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person pay::Registration_fee can_stay_in::Place Nation::String Name::String hasEmail::String hasName::String hasAffiliation::String hasFirstName::String hasLastName::String hasMail::String worksForCompany::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ sign::Item is_present::Time (give::Thing)+ need::Item loggin_in::System submit::Document get::Email E-mail::String hasConflictOfInterest::Document email::String ;
Early_paid_applicant ::= ε ;
Active_conference_participant ::= gives_presentations::Presentation ;
Short_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Title::String Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
SatelliteAndSpaceCommunicationsTopic ::= isTopicOf::Working_event isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part ;
Conflict_Of_Interest ::= Confirmed_Conflict ;
 Conflict_Of_Interest ::= Pending_Proposed_Conflict ;
 Conflict_Of_Interest ::= Hidden_Conflict ;
 Conflict_Of_Interest ::= Deleted_Conflict ;
 Conflict_Of_Interest ::= Proposed_Conflict ;
 Conflict_Of_Interest ::= Self_Conflict ;
 Conflict_Of_Interest ::= Confirmed_Conflict | Pending_Proposed_Conflict | Hidden_Conflict | Deleted_Conflict | Proposed_Conflict | Self_Conflict ;
Receiving_manuscript ::= ε ;
Senior_Reviewer_URL ::= ε ;
Pending_Proposed_Conflict ::= refusedBy::Reviewer confirmedBy::Reviewer ;
Plenary_lecture ::= hasAcronym::String ;
date_of_notification ::= ε ;
Departure_tax ::= ε ;
Conference_applicant ::= Registeered_applicant ;
Time_zone ::= ε ;
Organizing_committee ::= was_an_organizing_committee_of::Conference_volume ;
Hotel_presenter ::= ε ;
Registration_of_participants_event ::= follows::Administrative_event parallel_with::Administrative_event ;
MobileComputingTopic ::= isTopicOf::Working_event isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part ;
Session_chair ::= ε ;
Committee_member ::= Co-chair ;
 Committee_member ::= Chair ;
 Committee_member ::= was_a_member_of::Committee ;
Marginal_Tend_to_Accept ::= ε ;
Deadline_hotel_reservation ::= designed_by::ACM_SIGKDD Date::dateTime done_till::date ;
ConferenceSession ::= ε ;
SubjectArea ::= ε ;
Camera_Ready_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Title::String Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
NGO ::= isProviderOf::Sponsorship ;
Dinner_banquet ::= ε ;
CommunicationTheoryTopic ::= isTopicOf::Working_event isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part ;
AcademicEvent ::= TalkEvent ;
 AcademicEvent ::= OrganizationalMeeting ;
 AcademicEvent ::= PaperPresentation ;
 AcademicEvent ::= hasCall::Call ;
date_of_conference ::= start_date_of_conference ;
 date_of_conference ::= end_date_of_conference ;
 date_of_conference ::= start_date_of_conference | end_date_of_conference ;
Mailing_list ::= writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document (relatesTo::Thing)+ submited_by::Person Document_ID::String presentationed_by::Speaker submit_until::Deadline recieved_by::User used_by::Person submited__by::User ;
CallForPapers ::= forEvent::AcademicEvent (isInitiatedBy::Person)+ hasSubmissionInstructions::String hasSubmissionDeadline::dateTime ;
CommunicationsTopic ::= isTopicOf::Working_event isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part ;
SecurityTopic ::= isTopicOf::Working_event isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part ;
PaperAbstract ::= isAbstractOf::Paper abstractIsSubmittedBy::ContactAuthor ;
DiningPlace ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
Regular_author ::= Contribution_1th-author ;
 Regular_author ::= Contribution_co-author ;
 Regular_author ::= Contribution_1th-author | Contribution_co-author ;
Paper_Review ::= is_Candidate_for_Award::Long_bool appropriate_length::Long_bool has_Categorization::Paper_Categorization has_Overall::Overall_Value has_Reccommendation::Reccommendation Review_made_by::Reviewer Comments_for_Author::String Comments_for_Program_Committee::String ;
PostScript ::= ε ;
HTML ::= ε ;
ContactAuthor ::= submitsAbstract::PaperAbstract ;
ConferenceProgram ::= isProgramOf::Conference consistsOf::Slot ;
Rejection_Email ::= sended_by::Administrator Receiver_of_email::String Message_of_email::String Subject_of_email::String ;
Admin_Role ::= assigned_by::Administrator ;
Poster_Session ::= hasAssignedPaper::AcceptedPaper room::String isAssociatedTo::Slot hasChair::Chair ;
ComputerArchitectureTopic ::= isTopicOf::Working_event isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part ;
WorkshopTutorialChair ::= organizes::Conference ;
Organizing_Committee ::= has_members::Committee_member was_a_committee_of::Conference_volume has_a_committee_co-chair::Co-chair has_a_committee_chair::Chair ;
Gold_Supporter ::= searched_by::ACM_SIGKDD Name_of_sponsor::String ;
OrganizingCommittee ::= ProgramCoChair ;
 OrganizingCommittee ::= PublicationsChair ;
 OrganizingCommittee ::= WorkshopTutorialChair ;
 OrganizingCommittee ::= RegistrationChair ;
 OrganizingCommittee ::= StudentAdvocate ;
 OrganizingCommittee ::= FinanceChair ;
 OrganizingCommittee ::= PaperSubmissionChair ;
 OrganizingCommittee ::= PublicityWebChair ;
 OrganizingCommittee ::= SteeringCommittee ;
 OrganizingCommittee ::= GeneralCoChair ;
 OrganizingCommittee ::= organizes::Conference ;
OrganizationalMeeting ::= hasCall::Call ;
Session_Chair ::= ε ;
PersonalReviewHistory ::= isReviewHistoryOf::Reviewer ;
Group_Email ::= sended_by::Administrator Receiver_of_email::String Message_of_email::String Subject_of_email::String ;
Regular_Program_Committee_member ::= ε ;
conference_setup ::= sets_member::human is_made_by::human includes_topic::Topic sets_date::date sets_URL::URL ;
Member_PC ::= expertOn::Topic reviewes::Contribution ;
end_date_of_conference ::= ε ;
Double_hotel_room ::= ε ;
AccpetIfRoomRating ::= ε ;
Web_Site ::= writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document (relatesTo::Thing)+ submited_by::Person Document_ID::String presentationed_by::Speaker submit_until::Deadline recieved_by::User used_by::Person submited__by::User ;
Help_Request ::= Misc ;
 Help_Request ::= Feature_Request ;
 Help_Request ::= Assistance ;
 Help_Request ::= Misc | Feature_Request | Assistance ;
Sponsor_city ::= ε ;
RejectedPaper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Title::String Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
ParallelAndDistributedComputingTopic ::= isTopicOf::Working_event isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part ;
One_day_presenter ::= ε ;
Research_Topic ::= define::Event ;
 Research_Topic ::= topicCoveredBy::Thing ;
Assignment_Phase ::= hasPhaseStatus::EEnum ;
SC_Member ::= ε ;
Sponzor_fee ::= ε ;
Accepted_contribution ::= Camera_ready_contribution ;
Clarity_to_Present_Understanding ::= ε ;
OC_Member ::= OC_Chair ;
Reviewing_event ::= follows::Administrative_event parallel_with::Administrative_event ;
MultimediaTopic ::= isTopicOf::Working_event isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part ;
CryptographyTopic ::= isTopicOf::Working_event isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part ;
ReviewQuestion ::= TextualReviewQuestion ;
 ReviewQuestion ::= NumericalReviewQuestion ;
 ReviewQuestion ::= TextualReviewQuestion | NumericalReviewQuestion ;
camera-ready_submission_date ::= start_date_of_camera-ready_submission ;
 camera-ready_submission_date ::= end_date_of_camera-ready_submission ;
 camera-ready_submission_date ::= start_date_of_camera-ready_submission | end_date_of_camera-ready_submission ;
Conference_volume ::= has_parts::Conference_part has_workshops::Workshop has_tracks::Track has_tutorials::Tutorial has_a_commtitee::Committee has_a_steering_committee::Steering_committee has_an_organizing_committee::Organizing_committee has_important_dates::Important_dates has_contributions::Conference_contribution has_a_location::String has_a_program_committee::Program_committee ;
start_date_of_full_paper_submission ::= ε ;
Clear_Accept ::= ε ;
Conference_days ::= One_conference_day ;
ProgramCommittee ::= hasMember::ProgramCommitteeMember hasProgramCommitteeMember::ProgramCommitteeMember ;
Deleted_Conflict ::= ε ;
Highly_Theoretical ::= ε ;
Registation_deadline ::= designed_by::ACM_SIGKDD Date::dateTime done_till::date ;
Bidding_Phase ::= Bidding_And_Paper_Submission_Phase ;
 Bidding_Phase ::= Bidding_Without_Paper_Submission_Phase ;
 Bidding_Phase ::= Bidding_And_Paper_Submission_Phase | Bidding_Without_Paper_Submission_Phase ;
Head_Role ::= assigned_by::Administrator ;
ProgramCommitteeMember ::= ProgramCommitteeChair ;
 ProgramCommitteeMember ::= Chair ;
 ProgramCommitteeMember ::= memberOfProgramCommittee::ProgramCommittee maxPapers::Integer addedBy::Administrator isMemberOf::ProgramCommittee hasPassword::String ;
Web_site ::= ε ;
Tends_Towards_Theoretical ::= ε ;
PaperQuestion ::= ε ;
Invited_Talk_Abstract ::= (is_the_1th_part_of::Thing)+ part_of_article::article ;
Final_manuscript ::= ε ;
Paid_applicant ::= Late_paid_applicant ;
 Paid_applicant ::= Early_paid_applicant ;
 Paid_applicant ::= Late_paid_applicant | Early_paid_applicant ;
end_date_of_abstract_submission ::= ε ;
RegistrationChair ::= organizes::Conference ;
Worker_non_speaker ::= ε ;
Invitation_letter ::= writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document (relatesTo::Thing)+ submited_by::Person Document_ID::String presentationed_by::Speaker submit_until::Deadline recieved_by::User used_by::Person submited__by::User ;
Book_proceeding ::= ε ;
Conference_announcement ::= has_authors::Person has_a_date_of_issue::date ;
Demo_Chair ::= ε ;
Conference_Trip ::= ε ;
WithdrawnPaper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Title::String Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
Program_Committee_Chair ::= is_author_of::article performs_activity::Activity is_employed_in::institute has_topic_of_interest::Topic supervises::Activity e-mail::String last_name::String first_name::String ;
Social_event ::= Trip ;
 Social_event ::= Banquet ;
 Social_event ::= Reception ;
 Social_event ::= Trip | Banquet | Reception ;
Self_Conflict ::= ε ;
PCMembersList ::= isProducedBy::Chair ;
Program_committee ::= was_a_program_committee_of::Conference_volume ;
Contribution_1th-author ::= ε ;
paper_assignment ::= Manual_Paper_Assignment ;
 paper_assignment ::= Automatic_Paper_Assignment ;
 paper_assignment ::= assign_paper::Program_Committee_member is_performed_by::human ;
Value_Partition ::= Topics ;
 Value_Partition ::= Format ;
 Value_Partition ::= Long_bool ;
 Value_Partition ::= Review_Values ;
 Value_Partition ::= Result_of_Advocate ;
 Value_Partition ::= Topics | Format | Long_bool | Review_Values | Result_of_Advocate ;
OutputDocument ::= CD-ROM ;
 OutputDocument ::= IndexOfAuthors ;
 OutputDocument ::= ExternalReviewersList ;
 OutputDocument ::= Program ;
 OutputDocument ::= PCMembersList ;
 OutputDocument ::= ListOfAbstracts ;
 OutputDocument ::= BookletOfAbstracts ;
 OutputDocument ::= Proceedings ;
 OutputDocument ::= isProducedBy::Chair ;
Conference_hall ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
QualitatvieLecture ::= hasAcronym::String ;
PC_Chair ::= ε ;
Review_Committee ::= ε ;
NumericalReviewQuestion ::= ε ;
Payment_document ::= Cheque ;
 Payment_document ::= Bank_transfer ;
 Payment_document ::= Cheque | Bank_transfer ;
Automatic_Paper_Assignment ::= (automatically_assign_paper::Program_Committee_member)+ ;
Undecided_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Title::String Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
ComputerNetworksSecurityTopic ::= ε ;
URL ::= Event_URL ;
 URL ::= Senior_Reviewer_URL ;
 URL ::= Chair_URL ;
 URL ::= Contact_Person_URL ;
 URL ::= Regular_Reviewer_URL ;
 URL ::= Event_URL | Senior_Reviewer_URL | Chair_URL | Contact_Person_URL | Regular_Reviewer_URL ;
Steering_committee ::= was_a_steering_committee_of::Conference_volume ;
AuthorNotReviewer ::= writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing submitsPaper::Paper writePaper::Paper writes_Paper::Paper changes::Contribution write_paper::Paper obtain::Award submit::Paper notification_until::Deadline_Author_notification submitPaper::Paper ;
review_form ::= is_created_in::Activity ;
Review_Form ::= Preview ;
 Review_Form ::= Review_Form_Setup ;
 Review_Form ::= Preview | Review_Form_Setup ;
Deadline_for_notification_of_acceptance ::= designed_by::ACM_SIGKDD Date::dateTime done_till::date ;
notification_email ::= acceptance_notification_email ;
 notification_email ::= rejection_notification_email ;
 notification_email ::= acceptance_notification_email | rejection_notification_email ;
Notification_Email ::= sended_by::Administrator Receiver_of_email::String Message_of_email::String Subject_of_email::String ;
PersonalPublicationHistory ::= ε ;
Social_Event ::= Conference_Trip ;
 Social_Event ::= Conference_Banquet ;
 Social_Event ::= Conference_Trip | Conference_Banquet ;
Senior_Program_Committee_member ::= supervises::Activity ;
Reviewed_Paper ::= Planed_Paper ;
Best_Paper_Awards_Committee ::= has_members::Committee_member was_a_committee_of::Conference_volume has_a_committee_co-chair::Co-chair has_a_committee_chair::Chair ;
Registration_SIGMOD_Member ::= designed_by::ACM_SIGKDD Date::dateTime payed_by::Person Price::Integer Currency::String ;
Deadline_Abstract_Submission ::= designed_by::ACM_SIGKDD Date::dateTime done_till::date ;
Program_Committee ::= ε ;
 Program_Committee ::= has_members::Committee_member was_a_committee_of::Conference_volume has_a_committee_co-chair::Co-chair has_a_committee_chair::Chair ;
Computer_Science ::= ε ;
ActivitySubmissionForm ::= TutorialProposal ;
 ActivitySubmissionForm ::= WorksopProposal ;
 ActivitySubmissionForm ::= isSubmittedBy::Author hasAuthor::Author submissionDeadline::dateTime ;
AssociatedChair ::= memberOfConference::Conference member_of_conference::Conference ;
rejection_notification_email ::= ε ;
Author_of_paper ::= writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing submitsPaper::Paper writePaper::Paper writes_Paper::Paper changes::Contribution write_paper::Paper obtain::Award submit::Paper notification_until::Deadline_Author_notification submitPaper::Paper ;
Reviewed_contribution ::= Accepted_contribution ;
 Reviewed_contribution ::= Rejected_contribution ;
 Reviewed_contribution ::= has_a_review::Review ;
ReviewRating ::= WeekRejectRating ;
 ReviewRating ::= AcceptRating ;
 ReviewRating ::= AccpetIfRoomRating ;
 ReviewRating ::= RejectRating ;
 ReviewRating ::= WeekRejectRating | AcceptRating | AccpetIfRoomRating | RejectRating ;
WirelessCommunicationsTopic ::= isTopicOf::Working_event isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part ;
ConferenceAttendant ::= mustPay::Fee hasAdress::String paid::Boolean hasPhone::String ;
TextualReviewQuestion ::= ε ;
PowerPoint_presentation ::= is_given_by::Active_conference_participant ;
TalkEvent ::= ClosingTalk ;
 TalkEvent ::= WelcomeTalk ;
 TalkEvent ::= ClosingTalk | WelcomeTalk ;
FinanceChair ::= organizes::Conference ;
Program_chair ::= made_program::Conference_Program ;
CADTopic ::= isTopicOf::Working_event isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part ;
Blocked_Phase ::= hasPhaseStatus::EEnum ;
Trip_city ::= ε ;
Contact_Person_URL ::= ε ;
Event_Creation ::= is_held_before::Time is_held_in::Thing is_held_after::Time is_dated_on::dateTime is_followed_by::Activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human hasTopic::Topic expectedAttendance::Integer isPartOf::Conference (has_result::Thing)+ sent_by::Person ;
Registration_fee ::= Author_attendee_book_registration_fee ;
 Registration_fee ::= Nonmember_registration_fee ;
 Registration_fee ::= Nonauthor_registration_fee ;
 Registration_fee ::= Memeber_registration_fee ;
 Registration_fee ::= Student_registration_fee ;
 Registration_fee ::= Author_attendee_cd_registration_fee ;
 Registration_fee ::= Registration_SIGMOD_Member ;
 Registration_fee ::= Registration_Non-Member ;
 Registration_fee ::= Registration_SIGKDD_Member ;
 Registration_fee ::= Registration_Student ;
 Registration_fee ::= designed_by::ACM_SIGKDD Date::dateTime payed_by::Person Price::Integer Currency::String ;
PublicationsChair ::= organizes::Conference ;
Speaker_lecture ::= hasAssignedPaper::AcceptedPaper room::String isAssociatedTo::Slot hasChair::Chair ;
Technic_activity ::= ε ;
Conference_part ::= Track ;
 Conference_part ::= has_a_track-workshop-tutorial_topic::Topic is_part_of_conference_volumes::Conference_volume has_a_track-workshop-tutorial_chair::Track-workshop_chair ;
ComputerNetworksSensorTopic ::= ε ;
Accepted_paper ::= read_paper_by::Thing rateed_paper_by::Thing Score::EEnum ;
IASTED_non_member ::= ε ;
Possible_Reviewer ::= PC_Member ;
 Possible_Reviewer ::= reviewerOfPaper::Paper ;
One_conference_day ::= ε ;
Program_Comitee ::= discusses::Paper ;
Overhead_projector ::= ε ;
SlideSet ::= writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document (relatesTo::Thing)+ submited_by::Person Document_ID::String presentationed_by::Speaker submit_until::Deadline recieved_by::User used_by::Person submited__by::User ;
MeetingRoomPlace ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
ExternalReviewer ::= assignedByReviewer::Reviewer cooperatesReviewer::Reviewer ;
Submissions_deadline ::= designed_by::ACM_SIGKDD Date::dateTime done_till::date ;
Neutral_Review ::= assigned_review_by::Primary_Reviewer written_review_by::Reviewer writtenBy::Reviewer reviews::Reviewed_contribution gives_classification::classification is_created_in::Activity reviewOfPaper::Paper reviewWrittenBy::Possible_Reviewer review_written_by::Reviewer containsEvaluation::Evaluation rates::Paper isWritenBy::Reviewer ;
WelcomeTalk ::= ε ;
SocialEvent ::= Excursion ;
 SocialEvent ::= Reception ;
 SocialEvent ::= Excursion | Reception ;
Sponsor_state ::= ε ;
ContactInformation ::= hasCity::String hasStreet::String hasPostalCode::String hasPhone::String ;
Program_Chair ::= ε ;
Submitted_Paper ::= Assigned_Paper ;
 Submitted_Paper ::= Reviewed_Paper ;
 Submitted_Paper ::= Advocated_Paper ;
 Submitted_Paper ::= is_stored_in::Paper_File has_been_sent_by::Contact_Author Paper_Id::Integer Comments_To_Chair::String ;
Initial_manuscipt ::= ε ;
Deadline_Paper_Submission ::= designed_by::ACM_SIGKDD Date::dateTime done_till::date ;
Author_cd_proceedings_included ::= writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing submitsPaper::Paper writePaper::Paper writes_Paper::Paper changes::Contribution write_paper::Paper obtain::Award submit::Paper notification_until::Deadline_Author_notification submitPaper::Paper ;
FreeTimeBreak ::= ε ;
Audiovisual_equipment ::= Video_cassette_player ;
 Audiovisual_equipment ::= LCD_projector ;
 Audiovisual_equipment ::= Computer ;
 Audiovisual_equipment ::= Overhead_projector ;
 Audiovisual_equipment ::= Video_cassette_player | LCD_projector | Computer | Overhead_projector ;
Session_room ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
Scientific_Event ::= Individual_Presentation ;
 Scientific_Event ::= Conference ;
 Scientific_Event ::= Track ;
 Scientific_Event ::= Workshop ;
Portable_Reject ::= ε ;
Record_of_attendance ::= writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document (relatesTo::Thing)+ submited_by::Person Document_ID::String presentationed_by::Speaker submit_until::Deadline recieved_by::User used_by::Person submited__by::User ;
Registration_Non-Member ::= designed_by::ACM_SIGKDD Date::dateTime payed_by::Person Price::Integer Currency::String ;
Individual_Presentation ::= Invited_Talk ;
 Individual_Presentation ::= Contributed_Talk ;
 Individual_Presentation ::= Tutorial ;
 Individual_Presentation ::= (presentationOfPaper::Document)+ ;
Tends_Towards_Practical ::= ε ;
PerformanceTopic ::= isTopicOf::Working_event isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part ;
Reviewing_results_event ::= follows::Administrative_event parallel_with::Administrative_event ;
BreakEvent ::= CoffeeBreak ;
 BreakEvent ::= FreeTimeBreak ;
 BreakEvent ::= MealBreak ;
 BreakEvent ::= CoffeeBreak | FreeTimeBreak | MealBreak ;
Setup_Phase ::= hasPhaseStatus::EEnum ;
Evaluated_Paper ::= Accepted_Paper ;
 Evaluated_Paper ::= Rejected_Paper ;
 Evaluated_Paper ::= hasReview::Review ;
AcademiaOrganization ::= isProviderOf::Sponsorship ;
ConferenceMember ::= Reviewer ;
 ConferenceMember ::= ConferenceChair ;
 ConferenceMember ::= AssociatedChair ;
 ConferenceMember ::= Author ;
 ConferenceMember ::= CommitteeMember ;
 ConferenceMember ::= ProgramCommitteeMember ;
 ConferenceMember ::= Chairman ;
 ConferenceMember ::= memberOfConference::Conference member_of_conference::Conference ;
MedicineTopic ::= isTopicOf::Working_event isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part ;
New_Perspective_Issue_Problem_Solving ::= ε ;
Classic_Papers ::= ε ;
Accepted_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Title::String Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
 Accepted_Paper ::= hasReview::Review ;
Submitted_contribution ::= Reviewed_contribution ;
 Submitted_contribution ::= has_a_review_expertise::Review_expertise ;
Agency_Staff_Member ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person pay::Registration_fee can_stay_in::Place Nation::String Name::String hasEmail::String hasName::String hasAffiliation::String hasFirstName::String hasLastName::String hasMail::String worksForCompany::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ sign::Item is_present::Time (give::Thing)+ need::Item loggin_in::System submit::Document get::Email E-mail::String hasConflictOfInterest::Document email::String ;
Confirmed_Conflict ::= ε ;
Conference_hotel ::= ε ;
Track-workshop_chair ::= was_a_track-workshop_chair_of::Conference_part ;
Program_Comitee_Meeting ::= E-mail_PC_Meeting ;
 Program_Comitee_Meeting ::= PC_Meeting ;
 Program_Comitee_Meeting ::= E-mail_PC_Meeting | PC_Meeting ;
Coffee_break ::= ε ;
RatedPapers ::= hasRating::ReviewRating ;
Regular_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Title::String Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
ConferenceChair ::= memberOfConference::Conference member_of_conference::Conference ;
 ConferenceChair ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person pay::Registration_fee can_stay_in::Place Nation::String Name::String hasEmail::String hasName::String hasAffiliation::String hasFirstName::String hasLastName::String hasMail::String worksForCompany::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ sign::Item is_present::Time (give::Thing)+ need::Item loggin_in::System submit::Document get::Email E-mail::String hasConflictOfInterest::Document email::String ;
Closed_Phase ::= hasPhaseStatus::EEnum ;
EEnum ::= (male::ε) | (female::ε) | (high::ε) | (medium::ε) | (low::ε) | (very high::ε) | (1::ε) | (2::ε) | (3::ε) | (4::ε) | (5::ε) | (6::ε) | (7::ε) | (submitted::ε) | (missing::ε) | (notStarted::ε) | (active::ε) | (finished::ε) | (accepted::ε) | (rejected::ε) | (regular::ε) | (invited::ε) | (lowBid::ε) | (-::ε) | (CONFLICT::ε) | (wantNot::ε) | (highBid::ε) | (Yes::ε) | (No::ε) | (Accept::ε) | (Reject::ε) | (Unsure::ε) | (ForwardLookingIdea::ε) | (Compilers::ε) | (Microarchitecture::ε) | (Systems::ε) ;
Author_attendee_book_registration_fee ::= designed_by::ACM_SIGKDD Date::dateTime payed_by::Person Price::Integer Currency::String ;
AcceptRating ::= ε ;
Camera_Ready_event ::= follows::Administrative_event parallel_with::Administrative_event ;
IASTED_member ::= ε ;
ClosingTalk ::= ε ;
Abstract_And_Paper_Submission_Phase ::= hasPhaseStatus::EEnum ;
ListOfAbstracts ::= isProducedBy::Chair ;
MealBreak ::= ε ;
Technical_commitee ::= ε ;
reviewing_proces ::= lower_tier_reviewing_process ;
 reviewing_proces ::= upper_tier_reviewing_process ;
 reviewing_proces ::= lower_tier_reviewing_process | upper_tier_reviewing_process ;
Manual_Paper_Assignment ::= (manually_assign_paper::Program_Committee_member)+ ;
WorksopProposal ::= isSubmittedBy::Author hasAuthor::Author submissionDeadline::dateTime ;
Conference_Hiker ::= ε ;
Workshop_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Title::String Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
Industrial_Session ::= ε ;
Conference_fees ::= ε ;
ConferenceDinner ::= hasMenu::MealMenu ;
New_Information ::= ε ;
Meta-Reviewer ::= invites_co-reviewers::Reviewer invited_by::Reviewer (has_a_review_reference_or_expertise::Thing)+ writes_review::Review hasReviewHistory::PersonalReviewHistory executes::DoubleBlindReview cooperates::ExternalReviewer IsAssignedTo::Paper hasConflictedPaper::Paper hasPreferredPaper::Paper hasPreferredTopic::ResearchTopic writeReview::Review has_made_review::Paper_Review UserName::String Comments_to_Chair::String Other_Areas::String refuses::Pending_Proposed_Conflict reviews::Paper bidsFor::Paper confirmes::Pending_Proposed_Conflict assignedPaperBy::Program_Comitee_Chair assignedByAdministrator::Administrator adjustBid::Bid readPaper::Paper hasBeenAssigned::Paper assignExternalReviewer::ExternalReviewer ;
Activity_before_conference ::= Renting ;
 Activity_before_conference ::= Research ;
 Activity_before_conference ::= Refusing_manuscript ;
 Activity_before_conference ::= Accepting_manuscript ;
 Activity_before_conference ::= Receiving_manuscript ;
 Activity_before_conference ::= Renting | Research | Refusing_manuscript | Accepting_manuscript | Receiving_manuscript ;
ProgramCommitteeChair ::= endReview::Review ;
Best_Student_Paper_Award ::= (awarded_by::Organizator)+ ;
Contact_Author ::= has_sent::Submitted_Paper Alternate_Email::String ;
Call_for_participation ::= has_authors::Person has_a_date_of_issue::date ;
Invitation_Of_Reviewers_Phase ::= hasPhaseStatus::EEnum ;
Conference_airport ::= ε ;
Passive_conference_participant ::= ε ;
Hidden_Conflict ::= ε ;
MainAuthor ::= writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing submitsPaper::Paper writePaper::Paper writes_Paper::Paper changes::Contribution write_paper::Paper obtain::Award submit::Paper notification_until::Deadline_Author_notification submitPaper::Paper ;
Presenter_city ::= ε ;
TPCMember ::= (inverse_of_add::Thing)+ (execute::Thing)+ get::Inforamtion use::Document register::Account (modify::Thing)+ take_part_in::Event (remove::Thing)+ add::Person added_by::Person pay::Registration_fee can_stay_in::Place Nation::String Name::String hasEmail::String hasName::String hasAffiliation::String hasFirstName::String hasLastName::String hasMail::String worksForCompany::String attendeeAt::ConferenceEvent isMemberOf::Conference hasFirstName::String hasBiography::String hasLastName::String employedBy::Organization hasHomePage::String hasSurname::String hasFax::String hasFirstName::String hasPhone::String hasEmail::String contributes::Conference_document has_an_email::String has_the_first_name::String has_gender::EEnum has_the_last_name::String authorOf::Document prepare::Item (occupy::Presenter_city)+ (is_present_in::Thing)+ write::Item obtain::Item send::Item (speak_in::Thing)+ sign::Item is_present::Time (give::Thing)+ need::Item loggin_in::System submit::Document get::Email E-mail::String hasConflictOfInterest::Document email::String ;
Early-Registered_Participant ::= ε ;
phase_of_conference ::= ε ;
Overall_Value ::= Valuable_Confirmation_of_Present_Knowledge ;
 Overall_Value ::= Other ;
 Overall_Value ::= Not_Much ;
 Overall_Value ::= New_Information ;
 Overall_Value ::= New_Perspective_Issue_Problem_Solving ;
 Overall_Value ::= Clarity_to_Present_Understanding ;
 Overall_Value ::= Valuable_Confirmation_of_Present_Knowledge | Other | Not_Much | New_Information | New_Perspective_Issue_Problem_Solving | Clarity_to_Present_Understanding ;
Video_cassette_player ::= ε ;
ConferenceEvent ::= NonAcademicEvent ;
 ConferenceEvent ::= AcademicEvent ;
 ConferenceEvent ::= hasAttendee::Person hasLocation::Place hasProgramme::Programme hasEndDateTime::dateTime hasStartDateTime::dateTime ;
Conference_document ::= Conference_contribution ;
 Conference_document ::= Information_for_participants ;
 Conference_document ::= Call_for_paper ;
 Conference_document ::= Conference_announcement ;
 Conference_document ::= Call_for_participation ;
 Conference_document ::= Conference_www ;
 Conference_document ::= has_authors::Person has_a_date_of_issue::date ;
Single_hotel_room ::= ε ;
Contribution_co-author ::= ε ;
Introduction_of_speaker ::= ε ;
Multi-author_Volume ::= Proceedings ;
 Multi-author_Volume ::= writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document (relatesTo::Thing)+ submited_by::Person Document_ID::String presentationed_by::Speaker submit_until::Deadline recieved_by::User used_by::Person submited__by::User ;
Deadline_Author_notification ::= designed_by::ACM_SIGKDD Date::dateTime done_till::date ;
Nonmember_registration_fee ::= designed_by::ACM_SIGKDD Date::dateTime payed_by::Person Price::Integer Currency::String ;
ComputerNetworksMeasurementsTopic ::= ε ;
Coctail_reception ::= ε ;
Registration_Student ::= designed_by::ACM_SIGKDD Date::dateTime payed_by::Person Price::Integer Currency::String ;
ProgramCoChair ::= organizes::Conference ;
Chair_URL ::= ε ;
Regular_Session ::= hasAssignedPaper::AcceptedPaper room::String isAssociatedTo::Slot hasChair::Chair ;
Conference_activity ::= Social_program ;
 Conference_activity ::= Technic_activity ;
 Conference_activity ::= Registration ;
 Conference_activity ::= Introduction ;
 Conference_activity ::= Welcome_address ;
 Conference_activity ::= Coffee_break ;
 Conference_activity ::= Coctail_reception ;
 Conference_activity ::= Presentation ;
 Conference_activity ::= Lecture ;
 Conference_activity ::= Social_program | Technic_activity | Registration | Introduction | Welcome_address | Coffee_break | Coctail_reception ;
Secondary_Reviewer ::= isMemberOf::Conference reject_paper::Paper accept::Paper ;
start_date_of_conference ::= ε ;
Conference_participant ::= Passive_conference_participant ;
 Conference_participant ::= Active_conference_participant ;
ComputerNetworksTopic ::= ComputerNetworksEnterpriseTopic ;
 ComputerNetworksTopic ::= ComputerNetworksSwitchingTopic ;
 ComputerNetworksTopic ::= ComputerNetworksSensorTopic ;
 ComputerNetworksTopic ::= ComputerNetworksSecurityTopic ;
 ComputerNetworksTopic ::= ComputerNetworksOpticalTopic ;
 ComputerNetworksTopic ::= ComputerNetworksMeasurementsTopic ;
 ComputerNetworksTopic ::= ComputerNetworksManagementTopic ;
 ComputerNetworksTopic ::= ComputerNetworksAapplicationsTopic ;
 ComputerNetworksTopic ::= ComputerNetworksEnterpriseTopic | ComputerNetworksSwitchingTopic | ComputerNetworksSensorTopic | ComputerNetworksSecurityTopic | ComputerNetworksOpticalTopic | ComputerNetworksMeasurementsTopic | ComputerNetworksManagementTopic | ComputerNetworksAapplicationsTopic ;
Long_bool ::= ε ;
Rejected_paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Title::String Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
Full_day_tour ::= ε ;
LCD_projector ::= ε ;
Author_Role ::= assigned_by::Administrator ;
PaymentMode ::= ε ;
Presenter_house ::= ε ;
Conference_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Title::String Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
bidding_of_reviewer ::= is_performed_by::human ;
BookletOfAbstracts ::= isProducedBy::Chair ;
Cd_proceening ::= ε ;
StudentAdvocate ::= organizes::Conference ;
Hotel_room ::= Single_hotel_room ;
 Hotel_room ::= Double_hotel_room ;
 Hotel_room ::= Single_hotel_room | Double_hotel_room ;
PaperPresentation ::= relatedToPaper::AcceptedPaper ;
Presenter_university ::= ε ;
Student_registration_fee ::= designed_by::ACM_SIGKDD Date::dateTime payed_by::Person Price::Integer Currency::String ;
Tutorial_Chair ::= ε ;
abstract_submission_date ::= end_date_of_abstract_submission ;
 abstract_submission_date ::= start_date_of_abstract_submission ;
 abstract_submission_date ::= end_date_of_abstract_submission | start_date_of_abstract_submission ;
Trip_day ::= ε ;
Negative_Review ::= assigned_review_by::Primary_Reviewer written_review_by::Reviewer writtenBy::Reviewer reviews::Reviewed_contribution gives_classification::classification is_created_in::Activity reviewOfPaper::Paper reviewWrittenBy::Possible_Reviewer review_written_by::Reviewer containsEvaluation::Evaluation rates::Paper isWritenBy::Reviewer ;
ExternalReviewersList ::= isProducedBy::Chair ;
abstract_of_paper ::= goes_through::Activity is_sent_to::human is_created_in::Activity structure_created_by::human has_author::human gives_classification::classification article_written_by::Author has_reviewer::Reviewer has_abstract::Abstract ;
Approval_Email ::= confirm::Event ;
Hotel_registration_form ::= ε ;
AntennasTopic ::= isTopicOf::Working_event isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part ;
Source_Archive ::= hasContributionFileStatus::EEnum ;
MicroelectronicsTopic ::= isTopicOf::Working_event isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part ;
lower_tier_reviewing_process ::= ε ;
ComputerNetworksOpticalTopic ::= ε ;
Contributed_Talk ::= (presentationOfPaper::Document)+ ;
Contact_Person ::= is_author_of::article performs_activity::Activity is_employed_in::institute has_topic_of_interest::Topic supervises::Activity e-mail::String last_name::String first_name::String ;
TutorialProposal ::= isSubmittedBy::Author hasAuthor::Author submissionDeadline::dateTime ;
Conference_Participant ::= Demo_Chair ;
 Conference_Participant ::= OC_Member ;
 Conference_Participant ::= Early-Registered_Participant ;
 Conference_Participant ::= Late-Registered_Participant ;
 Conference_Participant ::= Tutorial_Chair ;
 Conference_Participant ::= PC_Chair ;
 Conference_Participant ::= Workshop_Chair ;
 Conference_Participant ::= Presenter ;
 Conference_Participant ::= Session_Chair ;
 Conference_Participant ::= Demo_Chair | OC_Member | Early-Registered_Participant | Late-Registered_Participant ;
Paper_File ::= is_Type::Format ;
RFC ::= ε ;
Conference_city ::= ε ;
Proposed_Conflict ::= conflictProposedBy::Thing ;
Reviewer_Famliliarity ::= High ;
 Reviewer_Famliliarity ::= Low ;
 Reviewer_Famliliarity ::= Moderate ;
 Reviewer_Famliliarity ::= High | Low | Moderate ;
Accepting_manuscript ::= ε ;
Rejected_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Title::String Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
 Rejected_Paper ::= hasReview::Review ;
Best_Applications_Paper_Award ::= (awarded_by::Organizator)+ ;
Event_Approval ::= is_held_before::Time is_held_in::Thing is_held_after::Time is_dated_on::dateTime is_followed_by::Activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human hasTopic::Topic expectedAttendance::Integer isPartOf::Conference (has_result::Thing)+ sent_by::Person ;
Invited_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Title::String Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
PC_Member ::= SC_Member ;
 PC_Member ::= Session_Chair ;
 PC_Member ::= Tutorial_Chair ;
 PC_Member ::= PC_Chair ;
 PC_Member ::= Workshop_Chair ;
Highly_Practical ::= ε ;
Plenary_lecture_speaker ::= writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing submitsPaper::Paper writePaper::Paper writes_Paper::Paper changes::Contribution write_paper::Paper obtain::Award submit::Paper notification_until::Deadline_Author_notification submitPaper::Paper ;
Best_Research_Paper_Award ::= (awarded_by::Organizator)+ ;
Academic_Institution ::= Research_Institute ;
 Academic_Institution ::= University ;
 Academic_Institution ::= scientificallyOrganises::Academic_Institution ;
PaperStatus ::= isStatusOf::Paper ;
Author_book_proceedings_included ::= writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing submitsPaper::Paper writePaper::Paper writes_Paper::Paper changes::Contribution write_paper::Paper obtain::Award submit::Paper notification_until::Deadline_Author_notification submitPaper::Paper ;
Value_added_tax ::= ε ;
Video_presentation ::= is_given_by::Active_conference_participant ;
Paper_Categorization ::= Tends_Towards_Theoretical ;
 Paper_Categorization ::= Tends_Towards_Practical ;
 Paper_Categorization ::= Balanced_Theory_and_Practice ;
 Paper_Categorization ::= Highly_Theoretical ;
 Paper_Categorization ::= Highly_Practical ;
 Paper_Categorization ::= Tends_Towards_Theoretical | Tends_Towards_Practical | Balanced_Theory_and_Practice | Highly_Theoretical | Highly_Practical ;
submission_process ::= is_performed_by::human ;
Camera_ready_manuscript_deadline ::= designed_by::ACM_SIGKDD Date::dateTime done_till::date ;
OC_Chair ::= ε ;
MealEvent ::= ConferenceDinner ;
 MealEvent ::= hasMenu::MealMenu ;
PublicityWebChair ::= organizes::Conference ;
Credit_card ::= ε ;
end_date_of_camera-ready_submission ::= ε ;
start_date_of_abstract_submission ::= ε ;
CoffeeBreak ::= ε ;
Conference_Session ::= Industrial_Session ;
Research_Institute ::= scientificallyOrganises::Academic_Institution ;
Reviewer_Role ::= assigned_by::Administrator ;
Activity_after_conference ::= Departure ;
 Activity_after_conference ::= Full_day_tour ;
 Activity_after_conference ::= Departure | Full_day_tour ;
General_Chair ::= ε ;
Bank_transfer ::= ε ;
Non_speaker ::= Worker_non_speaker ;
 Non_speaker ::= Student_non_speaker ;
 Non_speaker ::= Worker_non_speaker | Student_non_speaker ;
Committe_Role ::= assigned_by::Administrator ;
Registration_form ::= ε ;
Platinum_Supporter ::= searched_by::ACM_SIGKDD Name_of_sponsor::String ;
PhaseOfConferencePreparation ::= Setup_Phase ;
 PhaseOfConferencePreparation ::= Camera_Ready_Copy_Phase ;
 PhaseOfConferencePreparation ::= Assignment_Phase ;
 PhaseOfConferencePreparation ::= Blocked_Phase ;
 PhaseOfConferencePreparation ::= Abstract_And_Paper_Submission_Phase ;
 PhaseOfConferencePreparation ::= Invitation_Of_Reviewers_Phase ;
 PhaseOfConferencePreparation ::= Review_Phase ;
 PhaseOfConferencePreparation ::= Closed_Phase ;
 PhaseOfConferencePreparation ::= Bidding_Phase ;
 PhaseOfConferencePreparation ::= hasPhaseStatus::EEnum ;
Student_non_speaker ::= ε ;
Review_Form_Setup ::= ε ;
Administrative_event ::= Reviewing_results_event ;
 Administrative_event ::= Reviewing_event ;
 Administrative_event ::= Registration_of_participants_event ;
 Administrative_event ::= Submission_event ;
 Administrative_event ::= Camera_Ready_event ;
 Administrative_event ::= follows::Administrative_event parallel_with::Administrative_event ;
Brief_introduction_for_Session_chair ::= writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document (relatesTo::Thing)+ submited_by::Person Document_ID::String presentationed_by::Speaker submit_until::Deadline recieved_by::User used_by::Person submited__by::User ;
Camera_ready_contribution ::= ε ;
Adobe_PDF ::= ε ;
CD ::= ε ;
Conference_Program ::= Program_made_by::Program_chair planned_papers::Planed_Paper ;
Positive_Review ::= assigned_review_by::Primary_Reviewer written_review_by::Reviewer writtenBy::Reviewer reviews::Reviewed_contribution gives_classification::classification is_created_in::Activity reviewOfPaper::Paper reviewWrittenBy::Possible_Reviewer review_written_by::Reviewer containsEvaluation::Evaluation rates::Paper isWritenBy::Reviewer ;
PublishedPaper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Title::String Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
full_paper_submission_date ::= start_date_of_full_paper_submission ;
 full_paper_submission_date ::= end_date_of_full_paper_submission ;
 full_paper_submission_date ::= start_date_of_full_paper_submission | end_date_of_full_paper_submission ;
DoubleBlindReview ::= isExecutedBy::Reviewer ;
ReviewForm ::= ε ;
Organizing_Committee_member ::= ε ;
Hotel_fee ::= ε ;
Sponsor_company_house ::= ε ;
Student_lecturer ::= ε ;
Written_contribution ::= Submitted_contribution ;
 Written_contribution ::= Regular_contribution ;
 Written_contribution ::= Submitted_contribution | Regular_contribution ;
Conference_contributor ::= Regular_author ;
 Conference_contributor ::= Invited_speaker ;
 Conference_contributor ::= Active_conference_participant ;
 Conference_contributor ::= Regular_author | Invited_speaker ;
Event_Setup ::= Paper_Typologies ;
 Event_Setup ::= Review_Form ;
 Event_Setup ::= Submission_Template ;
 Event_Setup ::= Event_Tracks ;
 Event_Setup ::= Research_Topic ;
 Event_Setup ::= Email_Template ;
 Event_Setup ::= define::Event ;
Bronze_Supporter ::= searched_by::ACM_SIGKDD Name_of_sponsor::String ;
CommitteeMember ::= Secondary_Reviewer ;
 CommitteeMember ::= Primary_Reviewer ;
 CommitteeMember ::= isMemberOf::Conference reject_paper::Paper accept::Paper ;
Conference_building ::= ε ;
Corresponding_Author ::= writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing submitsPaper::Paper writePaper::Paper writes_Paper::Paper changes::Contribution write_paper::Paper obtain::Award submit::Paper notification_until::Deadline_Author_notification submitPaper::Paper ;
PendingPaper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Title::String Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
PowerlineTransmissionTopic ::= isTopicOf::Working_event isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part ;
Marginal_Tend_to_Reject ::= ε ;
IndustryOrganization ::= isProviderOf::Sponsorship ;
TestOnlyTopic ::= isTopicOf::Working_event isIncluded::Activity belongs_to_a_review_reference::Review_preference is_a_topis_of_conference_parts::Conference_part ;
WeekRejectRating ::= ε ;
Contribution_File ::= Source_Archive ;
 Contribution_File ::= Poster ;
 Contribution_File ::= Camera_Ready_Copy ;
 Contribution_File ::= Slides ;
 Contribution_File ::= Programme ;
 Contribution_File ::= Paper_File ;
 Contribution_File ::= hasContributionFileStatus::EEnum ;
Conflict_Rules ::= ε ;
Corel_Word_Perfect ::= ε ;
Extended_abstract ::= Abstract ;
 Extended_abstract ::= ε ;
Industrial_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Title::String Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
RTF ::= ε ;
CD-ROM ::= isProducedBy::Chair ;
Co-chair ::= was_a_committe_co-chair_of::Committee ;
Conference_Banquet ::= ε ;
Tutorial_speaker ::= writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing submitsPaper::Paper writePaper::Paper writes_Paper::Paper changes::Contribution write_paper::Paper obtain::Award submit::Paper notification_until::Deadline_Author_notification submitPaper::Paper ;
Organising_Agency ::= (publisherOf::Thing)+ technicallyOrganises::Thing ;
PaperFullVersion ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Title::String Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
RejectRating ::= ε ;
Demo_Session ::= hasAssignedPaper::AcceptedPaper room::String isAssociatedTo::Slot hasChair::Chair ;
Not_Much ::= ε ;
SingleLevelConference ::= has_program::program hasMember::Person hasName::String endDate::dateTime paperDueOn::dateTime registrationDueOn::dateTime manuscriptDueOn::dateTime startDate::dateTime hasCountry::Country isOrganizedBy::OrganizingCommittee annualOrder::Integer takesPlace::Location hasAcronym::String finishedBy::Program_Comitee_Chair focusesOn::Topic startedBy::Program_Comitee_Chair takesPlace::Location has_conference_member::ConferenceMember WebSite::anyURI Topic_of_conference::String Date::date holded_by::ACM_SIGKDD Name_of_conference::String Start_of_conference::dateTime City_of_conference::String End_of_conference::dateTime hasConferenceMember::ConferenceMember paperAssignmentFinalizedBy::Administrator reviewCriteriaEnteredBy::Administrator paperAssignmentToolsRunBy::Administrator virtualMeetingEnabledBy::Administrator hardcopyMailingManifestsPrintedBy::Administrator detailsEnteredBy::Administrator reviewerBiddingStartedBy::Administrator date::date reviewsPerPaper::Integer logoURL::anyURI acceptsHardcopySubmissions::Boolean siteURL::anyURI ;
Program_Committee_member ::= Senior_Program_Committee_member ;
 Program_Committee_member ::= Regular_Program_Committee_member ;
 Program_Committee_member ::= Senior_Program_Committee_member | Regular_Program_Committee_member ;
Worker_lecturer ::= ε ;
Author_of_paper_student ::= writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing submitsPaper::Paper writePaper::Paper writes_Paper::Paper changes::Contribution write_paper::Paper obtain::Award submit::Paper notification_until::Deadline_Author_notification submitPaper::Paper ;
ResearchTopic ::= ε ;
ConferenceVenuePlace ::= isLocationOf::ConferenceEvent is_equipped_by::Item ;
end_date_of_full_paper_submission ::= ε ;
Conference_contribution ::= Poster ;
 Conference_contribution ::= Written_contribution ;
 Conference_contribution ::= Presentation ;
 Conference_contribution ::= is_submitted_at::Conference_volume ;
Invited_Talk ::= (presentationOfPaper::Document)+ ;
Demo_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Title::String Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
CallForReviews ::= forEvent::AcademicEvent (isInitiatedBy::Person)+ hasSubmissionInstructions::String hasSubmissionDeadline::dateTime ;
acceptance_notification_email ::= ε ;
Author_attendee_cd_registration_fee ::= designed_by::ACM_SIGKDD Date::dateTime payed_by::Person Price::Integer Currency::String ;
ComputerNetworksManagementTopic ::= ε ;
Best_Student_Paper_Supporter ::= searched_by::ACM_SIGKDD Name_of_sponsor::String ;
Paper_Typologies ::= define::Event ;
Information_for_participants ::= has_authors::Person has_a_date_of_issue::date ;
Bidding_And_Paper_Submission_Phase ::= ε ;
Camera_Ready_Copy_Phase ::= hasPhaseStatus::EEnum ;
Programme_Brochure ::= writtenBy::Person hasUpdatedVersion::Document updatedVersionOf::Document (relatesTo::Thing)+ submited_by::Person Document_ID::String presentationed_by::Speaker submit_until::Deadline recieved_by::User used_by::Person submited__by::User ;
Balanced_Theory_and_Practice ::= ε ;
NonAcademicEvent ::= MealEvent ;
 NonAcademicEvent ::= BreakEvent ;
 NonAcademicEvent ::= SocialEvent ;
 NonAcademicEvent ::= MealEvent | BreakEvent | SocialEvent ;
MS_Word ::= ε ;
Fee_for_extra_trip ::= ε ;
ComputerNetworksSwitchingTopic ::= ε ;
Conference_restaurant ::= ε ;
Meta-Review ::= assigned_review_by::Primary_Reviewer written_review_by::Reviewer writtenBy::Reviewer reviews::Reviewed_contribution gives_classification::classification is_created_in::Activity reviewOfPaper::Paper reviewWrittenBy::Possible_Reviewer review_written_by::Reviewer containsEvaluation::Evaluation rates::Paper isWritenBy::Reviewer ;
Invited_speaker ::= ε ;
Presenter_state ::= ε ;
Poster_Paper ::= full_paper_size::Integer has_author::human isWrittenBy::Author (isReviewedBy::Person)+ hasReview::Review hasReviewer::Possible_Reviewer paperIsSubmittedBy::Author isRejectedBy::Chair isAcceptedBy::Chair paperIsAssignedTo::Reviewer hasSecondaryTopic::ResearchTopic hasMainTopic::ResearchTopic hasAuthor::Author hasStatus::PaperStatus hasTitle::String hasID::String hasAbstract::PaperAbstract isRatedBy::Review is_written_by::Author Abstract::String Title::String Students::String Keywords::String rejectedBy::Program_Comitee_Chair acceptedBy::Program_Comitee_Chair reviewedBy::Reviewer discussedBy::Program_Comitee isPaperTypeOf::EEnum assignedToReviewBy::Program_Comitee_Chair hasBid::EEnum Title::String Summary::String rejected_paper_by::CommitteeMember accepted_by::CommitteeMember written_paper_by::Author hasCo-author::Co-author hasBid::Bid hasDecision::Decision assignedTo::Reviewer hasSubjectArea::SubjectArea readByReviewer::Reviewer paperID::unsignedLong title::String readByMeta-Reviewer::Meta-Reviewer ;
Regular_Reviewer_URL ::= ε ;
managing_of_conference_process ::= is_held_before::Time is_held_in::Thing is_held_after::Time is_dated_on::dateTime is_followed_by::Activity is_monitored_by::human has_intensity::intensity has_result::article is_performed_by::human is_supervised_by::human hasTopic::Topic expectedAttendance::Integer isPartOf::Conference (has_result::Thing)+ sent_by::Person ;
Bidding_Without_Paper_Submission_Phase ::= ε ;
Planed_Paper ::= is_planned_in::Conference_Program ;
Call_for_paper ::= has_authors::Person has_a_date_of_issue::date ;
PersonalHistory ::= PersonalPublicationHistory ;
 PersonalHistory ::= PersonalReviewHistory ;
 PersonalHistory ::= PersonalPublicationHistory | PersonalReviewHistory ;
Conference_www ::= has_a_URL::String ;
Clear_Reject ::= ε ;
Rejected_contribution ::= has_a_review::Review ;
Invited_talk ::= is_given_by::Active_conference_participant ;
ACM_SIGKDD ::= hold::Conference search::Sponzor design::Deadline ;
Workshop_Chair ::= ε ;
Event_Tracks ::= define::Event ;
Submission_Template ::= define::Event ;
Co-Author ::= writes::Contribution writes_article::article assigns_article_to_conference::article hasRelatedPaper::Paper (conflictsWith::Thing)+ isAuthorOf::ActivitySubmissionForm conducts::Thing submitsPaper::Paper writePaper::Paper writes_Paper::Paper changes::Contribution write_paper::Paper obtain::Award submit::Paper notification_until::Deadline_Author_notification submitPaper::Paper ;
Camera_Ready_Copy ::= hasContributionFileStatus::EEnum ;
Author_information_form ::= ε ;
ComputerNetworksAapplicationsTopic ::= ε ;
Silver_Supporter ::= searched_by::ACM_SIGKDD Name_of_sponsor::String ;
Review_expertise ::= has_a_submitted_contribution::Submitted_contribution has_an_expertise::EEnum ;
Event_URL ::= concerned::Event ;
Important_dates ::= is_an_abstract_submission_date::date is_a_full_paper_submission_date::date is_an_ending_date::date is_a_date_of_acceptance_announcement::date is_a_date_of_camera_ready_paper_submission::date is_a_starting_date::date belong_to_a_conference_volume::Conference_volume ;
Submission_event ::= follows::Administrative_event parallel_with::Administrative_event ;
ActivePaper ::= RatedPapers ;
 ActivePaper ::= hasRating::ReviewRating ;
Feature_Request ::= ε ;
AcceptedPaper ::= relatedToEvent::PaperPresentation isAssignedToSession::Session ;
TravelGrant ::= providedBy::Organization hasCostCurrency::String hasCostAmount::Integer ;
Review_preference ::= (has_a_topic_or_a_submission_contribution::Thing)+ has_a_degree::Integer ;
Memeber_registration_fee ::= designed_by::ACM_SIGKDD Date::dateTime payed_by::Person Price::Integer Currency::String ;
--------------------metamodels::useCase.bgf--------------------
UseCaseContainer ::= (ownedElement::NamedElement)+ ;
UseCase ::= (include::Include)+ (extend::Extend)+ ;
NamedElement ::= Actor ;
 NamedElement ::= UseCase ;
 NamedElement ::= Association ;
BehavioredClassifier ::= ε ;
--------------------metamodels::MiningMart.bgf--------------------
MSL-Tool ::= ε ;
SQLQuery ::= (select::DataRepresentation/Column)+ (from::DataRepresentation/ColumnSet)+ (where::String)+ ;
StructuralFeature ::= ε ;
ColumnStatistics ::= unique::Integer missing::Integer min::Integer max::Integer average::Integer standarDeviation::Integer distributionValue::String distributionCount::Integer distributionMin::Integer distributionMax::Integer forColumn::DataRepresentation/Column ;
RelationShip ::= subRelationShipRestriction::String defined::String isA::DataRepresentation/RelationShip (correspondsToForeignKey::DataRepresentation/ForeignKey)+ correspondsToColumnSet::DataRepresentation/ColumnSet FromConcept::DataRepresentation/Concept ToConcept::DataRepresentation/Concept ;
ModelElement ::= ε ;
RowSelection ::= ε ;
TimeOperator ::= ε ;
LoopStep ::= (iterationSet::DataRepresentation/FeatureAttribute)+ (outputSet::DataRepresentation/FeatureAttribute)+ ;
BaseAttribute ::= isPartMultiColumnFeature::DataRepresentation/MultiColumnFeature domainDataType::DataRepresentation/DomainDataType ;
DataObject ::= source::CaseRepresentation/ExecutionElement target::CaseRepresentation/ExecutionElement linkPackageCaseRepresentation::LinkPackage ;
MultiColumnFeature ::= (consitsOfBaseAttributes::DataRepresentation/BaseAttribute)+ ;
FeatureAttribute ::= name::String relevanceForMining::Boolean attributeType::SimplfiedMiningMart/DataType belongsToConcept::DataRepresentation/Concept (correspondsToColumns::DataRepresentation/Column)+ ;
MultiRelFeatureConstr ::= ε ;
ExecutionElement ::= source::CaseRepresentation/DataObject target::CaseRepresentation/DataObject ;
DataType ::= attribute::SimplfiedMiningMart/Attribute ;
ParameterType ::= (Value::ε) | (Concept::ε) | (RelationShip::ε) | (FeatureAttribute::ε) ;
UserInput ::= (containsValues::DataRepresentation/Value)+ ;
KeyAttribute ::= ε ;
PrimaryKey ::= ε ;
TransformationGroup ::= (transformation::CaseRepresentation/Transformation)+ ;
FeatureSelection ::= ε ;
RoleRestriction ::= name::String restrictionForRelationShip::DataRepresentation/RelationShip restrictionForConcept::DataRepresentation/Concept restrictionToConcept::DataRepresentation/Concept min::Integer max::Integer belongsToConcept::DataRepresentation/Concept ;
DataMinStep ::= ε ;
TimeGroup ::= ε ;
StoredProcedure ::= nameOf::String signature::String ;
ColumnSetStatistics ::= allNumber::Integer ordinalNumber::Integer nominalNumber::Integer timeNumber::Integer forColumnSet::DataRepresentation/ColumnSet ;
ColumnSet ::= number::Integer file::String dbConnectString::String user::String (hasColumn::DataRepresentation/Column)+ (hasKey::DataRepresentation/Key)+ correspondsToConcept::DataRepresentation/Concept correspondsToRelationShip::DataRepresentation/RelationShip linkPackage::LinkPackage ;
LinkPackage ::= type::InOut dataObject::CaseRepresentation/DataObject value::DataRepresentation/Value column::DataRepresentation/Column columnSet::DataRepresentation/ColumnSet ;
ForeignKey ::= isConnectionTo::DataRepresentation/Table correspondsToRelationShip::DataRepresentation/RelationShip ;
InOut ::= (Input::ε) | (OutPut::ε) ;
DomainDataType ::= baseAttributeD::DataRepresentation/BaseAttribute ;
FeatureConstruction ::= scalingFactor::Integer ;
MultiStep ::= iterationCondition::String ;
--------------------ocl::expressions.bgf--------------------
RejectExp ::= ε ;
VariableDeclaration ::= var::String varType::Type (oclExpression::OclExpression)+ (queryExp::QueryExp)+ (varInit::VariableInitialisation)+ ;
ForAllExp ::= ε ;
IterateExp ::= varInit::VariableInitialisation ;
CollectExp ::= ε ;
VariableInitialisation ::= initExpression::OclExpression varDec::VariableDeclaration iterateExp::IterateExp ;
SelectExp ::= ε ;
ExistsExp ::= ε ;
VariableExp ::= var::String ;
SelfExp ::= (queryArg::QueryExp)+ (querySrc::QueryExp)+ resultType::Type (varDec::VariableDeclaration)+ (varInit::VariableInitialisation)+ ;
ResultExp ::= (queryArg::QueryExp)+ (querySrc::QueryExp)+ resultType::Type (varDec::VariableDeclaration)+ (varInit::VariableInitialisation)+ ;
OclExpression ::= SelfExp ;
 OclExpression ::= ResultExp ;
 OclExpression ::= VariableExp ;
 OclExpression ::= OperationExp ;
 OclExpression ::= QueryExp ;
--------------------ocl::operations.bgf--------------------
OclOperation ::= arguments::OclExpression ;
NaviguationExp ::= assEnd::AssocationEnd qualifierValues::OclExpression ;
AssocationEnd ::= (navExp::NaviguationExp)+ ;
StringConstExp ::= value::String ;
ConstExp ::= IntegerConstExp ;
 ConstExp ::= StringConstExp ;
 ConstExp ::= RealConstExp ;
 ConstExp ::= IntegerConstExp | StringConstExp | RealConstExp ;
RealConstExp ::= value::Double ;
IntegerConstExp ::= value::Integer ;
ClassifierOperation ::= op::Operation arguments::OclExpression ;
OperationExp ::= PropertyOperation ;
 OperationExp ::= OclOperation ;
 OperationExp ::= ConstExp ;
PropertyOperation ::= AttributeExp ;
 PropertyOperation ::= NaviguationExp ;
 PropertyOperation ::= ClassifierOperation ;
 PropertyOperation ::= isMarkedPre::Boolean source::OclExpression ;
AttributeExp ::= attr::Attribute ;
--------------------ocl::types.bgf--------------------
InstanceType ::= classifier::Classifier ;
EnumLiteral ::= enumType::EnumType ;
OclAnyType ::= (supertype::Type)+ (subtype::Type)+ (collectionType::CollectionType)+ ;
SetType ::= elementType::Type ;
OclTypeType ::= (supertype::Type)+ (subtype::Type)+ (collectionType::CollectionType)+ ;
SequenceType ::= elementType::Type ;
StringType ::= ε ;
EnumType ::= (enumLiteral::EnumLiteral)+ ;
RealType ::= ε ;
IntegerType ::= ε ;
CollectionType ::= SetType ;
 CollectionType ::= SequenceType ;
 CollectionType ::= BagType ;
BasicType ::= IntegerType ;
 BasicType ::= RealType ;
 BasicType ::= StringType ;
 BasicType ::= BooleanType ;
BagType ::= elementType::Type ;
BooleanType ::= ε ;
--------------------ocl::uml.bgf--------------------
PortCondition ::= ε ;
PreCondition ::= ε ;
--------------------ocl::values.bgf--------------------
SetValue ::= (elements::Value)+ ;
EnumLiteral ::= enumValue::EnumValue ;
BagValue ::= (elements::Value)+ ;
BooleanValue ::= val::Boolean ;
RealValue ::= val::Double ;
IntegerValue ::= val::Integer ;
BasicValue ::= IntegerValue ;
 BasicValue ::= RealValue ;
 BasicValue ::= StringValue ;
 BasicValue ::= BooleanValue ;
ObjectValue ::= object::Object ;
UndefinedValue ::= type::Type (bagValue::BagValue)+ (sequenceValue::SequenceValue)+ (setValue::SetValue)+ ;
SequenceValue ::= (elements::Value)+ ;
EnumValue ::= enumLiteral::EnumLiteral ;
StringValue ::= val::String ;
--------------------slps::bgf-4.1-adt.bgf--------------------
BGFExpression ::= (epsilon::ε) | (empty::ε) | (val::(v::BGFValue)) | (anything::ε) | (terminal::(t::string())) | (nonterminal::(t::string())) | (selectable::(selector::string() expr::BGFExpression)) | (sequence::(exprs::(BGFExpression*))) | (choice::(exprs::(BGFExpression*))) | (marked::(expr::BGFExpression)) | (optional::(expr::BGFExpression)) | (plus::(expr::BGFExpression)) | (star::(expr::BGFExpression)) | (starsepplus::(expr::BGFExpression sep::BGFExpression)) | (starsepstar::(expr::BGFExpression sep::BGFExpression)) ;
BGFValue ::= (string::ε) | (integer::ε) ;
--------------------slps::bgf-4.2-adt.bgf--------------------
BGFProduction ::= production::(label::string() lhs::string() rhs::BGFExpression) ;
BGFExpression ::= (epsilon::ε) | (empty::ε) | (val::(v::BGFValue)) | (anything::ε) | (terminal::(t::string())) | (nonterminal::(t::string())) | (selectable::(selector::string() expr::BGFExpression)) | (sequence::(exprs::(BGFExpression*))) | (choice::(exprs::(BGFExpression*))) | (marked::(expr::BGFExpression)) | (optional::(expr::BGFExpression)) | (plus::(expr::BGFExpression)) | (star::(expr::BGFExpression)) | (starsepplus::(expr::BGFExpression sep::BGFExpression)) | (starsepstar::(expr::BGFExpression sep::BGFExpression)) ;
BGFGrammar ::= grammar::(roots::(string()*) prods::(BGFProduction*)) ;
BGFValue ::= (string::ε) | (integer::ε) ;
--------------------slps::bgf-4.3-adt.bgf--------------------
BGFProduction ::= production::(label::string() lhs::string() rhs::BGFExpression) ;
BGFExpression ::= (epsilon::ε) | (empty::ε) | (val::(v::BGFValue)) | (anything::ε) | (terminal::(t::string())) | (nonterminal::(t::string())) | (selectable::(selector::string() expr::BGFExpression)) | (sequence::(exprs::BGFExprList)) | (choice::(exprs::BGFExprList)) | (marked::(expr::BGFExpression)) | (optional::(expr::BGFExpression)) | (plus::(expr::BGFExpression)) | (star::(expr::BGFExpression)) | (seplistplus::(expr::BGFExpression sep::BGFExpression)) | (sepliststar::(expr::BGFExpression sep::BGFExpression)) ;
BGFProdList ::= BGFProduction* ;
BGFGrammar ::= grammar::(roots::(string()*) prods::BGFProdList) ;
BGFExprList ::= BGFExpression* ;
BGFValue ::= (string::ε) | (integer::ε) ;
--------------------slps::bgf-5.0-adt.bgf--------------------
BGFProduction ::= production::(label::string() lhs::string() rhs::BGFExpression) ;
BGFExpression ::= (epsilon::ε) | (empty::ε) | (val::(v::BGFValue)) | (anything::ε) | (terminal::(t::string())) | (nonterminal::(t::string())) | (selectable::(selector::string() expr::BGFExpression)) | (sequence::(exprs::BGFExprList)) | (choice::(exprs::BGFExprList)) | (all::(exprs::BGFExprList)) | (marked::(expr::BGFExpression)) | (optional::(expr::BGFExpression)) | (not::(expr::BGFExpression)) | (plus::(expr::BGFExpression)) | (star::(expr::BGFExpression)) | (seplistplus::(expr::BGFExpression sep::BGFExpression)) | (sepliststar::(expr::BGFExpression sep::BGFExpression)) ;
BGFGrammar ::= grammar::(roots::(string()*) prods::BGFProdList) ;
BGFProdList ::= BGFProduction* ;
BGFExprList ::= BGFExpression* ;
BGFValue ::= (string::ε) | (integer::ε) ;
--------------------slps::bgf-5.1-adt.bgf--------------------
BGFProduction ::= production::(label::string() lhs::string() rhs::BGFExpression) ;
BGFExpression ::= (epsilon::ε) | (empty::ε) | (val::(v::BGFValue)) | (anything::ε) | (terminal::(t::string())) | (nonterminal::(t::string())) | (selectable::(selector::string() expr::BGFExpression)) | (sequence::(exprs::BGFExprList)) | (choice::(exprs::BGFExprList)) | (allof::(exprs::BGFExprList)) | (marked::(expr::BGFExpression)) | (optional::(expr::BGFExpression)) | (not::(expr::BGFExpression)) | (plus::(expr::BGFExpression)) | (star::(expr::BGFExpression)) | (seplistplus::(expr::BGFExpression sep::BGFExpression)) | (sepliststar::(expr::BGFExpression sep::BGFExpression)) ;
BGFGrammar ::= grammar::(roots::(string()*) prods::BGFProdList) ;
BGFProdList ::= BGFProduction* ;
BGFExprList ::= BGFExpression* ;
BGFValue ::= (string::ε) | (integer::ε) ;
--------------------slps::bgf-5.3-adt.bgf--------------------
BGFProduction ::= production::(label::string() lhs::string() rhs::BGFExpression) ;
BGFProdSet ::= BGFProduction* ;
BGFExpression ::= (epsilon::ε) | (empty::ε) | (val::(v::BGFValue)) | (anything::ε) | (terminal::(t::string())) | (nonterminal::(t::string())) | (selectable::(selector::string() expr::BGFExpression)) | (sequence::(exprs::BGFExprList)) | (choice::(exprs::BGFExprList)) | (allof::(exprs::BGFExprList)) | (marked::(expr::BGFExpression)) | (optional::(expr::BGFExpression)) | (not::(expr::BGFExpression)) | (plus::(expr::BGFExpression)) | (star::(expr::BGFExpression)) | (seplistplus::(expr::BGFExpression sep::BGFExpression)) | (sepliststar::(expr::BGFExpression sep::BGFExpression)) ;
BGFGrammar ::= grammar::(roots::(string()*) prods::BGFProdList) ;
BGFProdList ::= BGFProduction* ;
BGFExprList ::= BGFExpression* ;
BGFValue ::= (string::ε) | (integer::ε) ;
--------------------slps::bgf-v4.2-adt.bgf--------------------
BGFProduction ::= production::(label::string() lhs::string() rhs::BGFExpression) ;
BGFExpression ::= (epsilon::ε) | (empty::ε) | (val::(v::BGFValue)) | (anything::ε) | (terminal::(t::string())) | (nonterminal::(t::string())) | (selectable::(selector::string() expr::BGFExpression)) | (sequence::(exprs::(BGFExpression*))) | (choice::(exprs::(BGFExpression*))) | (marked::(expr::BGFExpression)) | (optional::(expr::BGFExpression)) | (plus::(expr::BGFExpression)) | (star::(expr::BGFExpression)) | (starsepplus::(expr::BGFExpression sep::BGFExpression)) | (starsepstar::(expr::BGFExpression sep::BGFExpression)) ;
BGFGrammar ::= grammar::(roots::(string()*) prods::(BGFProduction*)) ;
BGFValue ::= (string::ε) | (integer::ε) ;
--------------------slps::bgf-v5.0-adt.bgf--------------------
BGFProduction ::= production::(label::string() lhs::string() rhs::BGFExpression) ;
BGFExpression ::= (epsilon::ε) | (empty::ε) | (val::(v::BGFValue)) | (anything::ε) | (terminal::(t::string())) | (nonterminal::(t::string())) | (selectable::(selector::string() expr::BGFExpression)) | (sequence::(exprs::BGFExprList)) | (choice::(exprs::BGFExprList)) | (all::(exprs::BGFExprList)) | (marked::(expr::BGFExpression)) | (optional::(expr::BGFExpression)) | (not::(expr::BGFExpression)) | (plus::(expr::BGFExpression)) | (star::(expr::BGFExpression)) | (seplistplus::(expr::BGFExpression sep::BGFExpression)) | (sepliststar::(expr::BGFExpression sep::BGFExpression)) ;
BGFGrammar ::= grammar::(roots::(string()*) prods::BGFProdList) ;
BGFProdList ::= BGFProduction* ;
BGFExprList ::= BGFExpression* ;
BGFValue ::= (string::ε) | (integer::ε) ;
--------------------slps::bgf-v5.1-adt.bgf--------------------
BGFProduction ::= production::(label::string() lhs::string() rhs::BGFExpression) ;
BGFExpression ::= (epsilon::ε) | (empty::ε) | (val::(v::BGFValue)) | (anything::ε) | (terminal::(t::string())) | (nonterminal::(t::string())) | (selectable::(selector::string() expr::BGFExpression)) | (sequence::(exprs::BGFExprList)) | (choice::(exprs::BGFExprList)) | (allof::(exprs::BGFExprList)) | (marked::(expr::BGFExpression)) | (optional::(expr::BGFExpression)) | (not::(expr::BGFExpression)) | (plus::(expr::BGFExpression)) | (star::(expr::BGFExpression)) | (seplistplus::(expr::BGFExpression sep::BGFExpression)) | (sepliststar::(expr::BGFExpression sep::BGFExpression)) ;
BGFGrammar ::= grammar::(roots::(string()*) prods::BGFProdList) ;
BGFProdList ::= BGFProduction* ;
BGFExprList ::= BGFExpression* ;
BGFValue ::= (string::ε) | (integer::ε) ;
--------------------slps::cbgf-adt.bgf--------------------
CBGFSequence ::= CBGFCommand* ;
CBGFCommand ::= (abridge_detour::(p::BGFProduction)) | (abstractize_concretize::(p::BGFProduction)) | (addH_removeH::(p::BGFProduction)) | (addV_removeV::(p::BGFProduction)) | (anonymize_deanonymize::(p::BGFProduction)) | (appear_disapper::(p::BGFProduction)) | (chain_unchain::(p::BGFProduction)) | (clone_equate::(x::string() y::string() w::XBGFScope)) | (concatT_splitT::(y::string() xs::(string()*) w::XBGFScope)) | (concretize_abstractize::(p::BGFProduction)) | (deanonymize_anonymize::(p::BGFProduction)) | (define_undefine::(ps::(BGFProduction*))) | (designate_unlabel::(p::BGFProduction)) | (detour_abridge::(p::BGFProduction)) | (deyaccify_yaccify::(ps::(BGFProduction*))) | (disappear_appear::(p::BGFProduction)) | (downgrade_upgrade::(p1::BGFProduction p2::BGFProduction)) | (eliminate_introduce::(ps::(BGFProduction*))) | (equate_clone::(x::string() y::string() w::XBGFScope)) | (extract_inline::(p::BGFProduction w::XBGFScope)) | (factor_factor::(e1::BGFExpression e2::BGFExpression w::XBGFScope)) | (fold_unfold::(x::string() w::XBGFScope)) | (horizontal_vertical::(w::XBGFScope)) | (inject_project::(p::BGFProduction)) | (inline_extract::(p::BGFProduction w::XBGFScope)) | (introduce_eliminate::(ps::(BGFProduction*))) | (iterate_assoc::(p::BGFProduction)) | (assoc_iterate::(p::BGFProduction)) | (massage_massage::(e1::BGFExpression e2::BGFExpression w::XBGFScope)) | (narrow_widen::(e1::BGFExpression e2::BGFExpression w::XBGFScope)) | (permute_permute::(p1::BGFProduction p2::BGFProduction)) | (project_inject::(p::BGFProduction)) | (redefine_redefine::(ps1::(BGFProduction*) ps2::(BGFProduction*))) | (removeH_addH::(p::BGFProduction)) | (removeV_addV::(p::BGFProduction)) | (renameL_renameL::(x::string() y::string())) | (renameN_renameN::(x::string() y::string())) | (renameS_renameS::(x::string() y::string() w::XBGFScope)) | (renameT_renameT::(x::string() y::string())) | (replace_replace::(e1::BGFExpression e2::BGFExpression w::XBGFScope)) | (reroot_reroot::(xs1::(string()*) xs2::(string()*))) | (splitN_unite::(x::string() ps::(BGFProduction*) w::XBGFScope)) | (splitT_concatT::(x::string() ys::(string()*) w::XBGFScope)) | (unchain_chain::(p::BGFProduction)) | (undefine_define::(ps::(BGFProduction*))) | (unfold_fold::(x::string() w::XBGFScope)) | (unite_splitN::(x::string() ps::(BGFProduction*) w::XBGFScope)) | (unlabel_designate::(p::BGFProduction)) | (upgrade_downgrade::(p1::BGFProduction p2::BGFProduction)) | (vertical_horizontal::(w::XBGFScope)) | (widen_narrow::(e1::BGFExpression e2::BGFExpression w::XBGFScope)) | (yaccify_deyaccify::(ps::(BGFProduction*))) ;
--------------------slps::cbgf-xsd.bgf--------------------
disappear-appear ::= production ;
horizontal-vertical ::= nonterminal::nonterminal ;
unchain-chain ::= production ;
chain-unchain ::= production ;
decreasing-transformation ::= remove | disappear | narrow | downgrade | split ;
anonymize-deanonymize ::= production ;
deanonymize-anonymize ::= production ;
splitT ::= terminal::terminal into::((terminal::terminal)+) (in::scope)? ;
yaccify-deyaccify ::= production+ ;
deyaccify-yaccify ::= production+ ;
folding-unfolding-transformation ::= unfold-fold | fold-unfold | inline-extract | extract-inline | abridge-detour | detour-abridge | unchain-chain | chain-unchain ;
 folding-unfolding-transformation ::= unfold | fold | inline | extract | abridge | detour | unchain | chain ;
equate-clone ::= align::(production+) with::nonterminal in::(scope+) ;
decorative-transformation ::= designate-unlabel | unlabel-designate | deanonymize-anonymize | anonymize-deanonymize ;
 decorative-transformation ::= designate | unlabel | deanonymize | anonymize ;
abstract-revising-transformation ::= define-undefine | undefine-define | inject-project | project-inject | replace-replace ;
 abstract-revising-transformation ::= define | undefine | redefine | inject | project | replace ;
detour-abridge ::= production ;
eliminate-introduce ::= production+ ;
introduce-eliminate ::= production+ ;
add-remove ::= (vertical::production) | (horizontal::production) ;
abstractize-concretize ::= production ;
split-unite ::= add::(production+) to::(production+) in::(scope+) ;
unite-split ::= add::(production+) to::(production+) in::(scope+) ;
rename-rename ::= (label::(from::label to::label)) | (nonterminal::(from::nonterminal to::nonterminal)) | (selector::((in::label)? from::selector to::selector)) | (terminal::(from::terminal to::terminal)) ;
increasing-decreasing-transformation ::= add-remove | remove-add | appear-disappear | disappear-appear | widen-narrow | narrow-widen | upgrade-downgrade | downgrade-upgrade | unite-split | split-unite ;
widen-narrow ::= expression expression (in::scope)? ;
appear-disappear ::= production ;
define-undefine ::= production+ ;
fold-unfold ::= nonterminal::nonterminal (in::scope)? ;
extract-inline ::= production (in::scope)? ;
permute-permute ::= production production ;
inject-project ::= production ;
abridge-detour ::= production ;
replace-replace ::= expression expression (in::scope)? tag::string() ;
vertical-horizontal ::= nonterminal::nonterminal ;
concretize-abstractize ::= production ;
concrete-revising-transformation ::= abstractize-concretize | concretize-abstractize | permute-permute ;
 concrete-revising-transformation ::= abstractize | concretize | permute ;
clone-equate ::= align::(production+) with::nonterminal in::(scope+) ;
remove-add ::= (vertical::production) | (horizontal::production) ;
increasing-transformation ::= add | appear | widen | upgrade | unite ;
refactoring-transformation ::= massage-massage | factor-factor | deyaccify-yaccify | yaccify-deyaccify | eliminate-introduce | introduce-eliminate | vertical-horizontal | horizontal-vertical | assoc-iterate | iterate-assoc | equate-clone | clone-equate ;
 refactoring-transformation ::= massage | distribute | factor | deyaccify | yaccify | eliminate | introduce | import | vertical | horizontal | equate | rassoc | lassoc | iterate | splitT ;
undefine-define ::= production+ ;
unfold-fold ::= nonterminal::nonterminal (in::scope)? ;
reroot-reroot ::= from::roots to::roots ;
factor-factor ::= expression expression (in::scope)? ;
inline-extract ::= production (in::scope)? ;
narrow-widen ::= expression expression (in::scope)? ;
massage-massage ::= expression expression (in::scope)? ;
project-inject ::= production ;
downgrade-upgrade ::= production production ;
upgrade-downgrade ::= production production ;
unlabel-designate ::= production ;
designate-unlabel ::= production ;
iterate-assoc ::= production production ;
assoc-iterate ::= production production ;
--------------------slps::ldf-Readable.bgf--------------------
subsection-role ::= (synopsis::ε) | (description::ε) | (syntax::ε) | (constraints::ε) | (relationship::ε) | (semantics::ε) | (default::ε) | (rationale::ε) | (example::ε) | (update::ε) | (subtopic::ε) | (section::ε) ;
section-role ::= (abstract::ε) | (conformance::ε) | (compatibility::ε) | (design-goals::ε) | (document-structure::ε) | (foreword::ε) | (references::ε) | (notation::ε) | (scope::ε) | (what-is-new::ε) | (index::ε) | (full-grammar::ε) | (list-of-tables::ε) | (list-of-authors::ε) | (list-of-contents::ε) | (list-of-references::ε) | (top-section::ε) | (lexical-section::ε) ;
named-link ::= title::string() version-or-edition? (uri::anyURI)? ;
section-structure ::= (content::(content-content+)) | (placeholder::α) | (subsection+) ;
part-metadata ::= (id::ID)? part-role (title::string())? (author::person)* ;
version-or-edition ::= (version::string()) | (edition::string()) ;
subsection-metadata ::= (id::ID)? subsection-role type? (title::string())? (author::person)* ;
section-metadata ::= (id::ID)? section-role type? (title::string())? (author::person)* ;
content-content ::= (para::mixed) | (list::list) | production ;
document-metadata ::= body? (number::string())? (author::person)* topic::string() status version-or-edition (previous::named-link)* date::timestamp ;
part-role ::= (front-matter::ε) | (core-part::ε) | (back-matter::ε) | (annex::ε) ;
--------------------slps::ldf-v1.0-xsd.bgf--------------------
sectionType ::= title::string() content::contentType ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? ;
mixedType ::= (α | string())* ;
sampleType ::= ε ;
contentType ::= ((text::mixedType) | (grammar::(α language::string() (version::string())?)) | (sample::sampleType) | (runnable::runnableType))* (section::sectionType)* ;
--------------------slps::ldf-v10.0-xsd.bgf--------------------
SimpleText ::= SimpleTextElement+ ;
front-simple-section ::= (foreword::SimpleSection) | (designGoals::SimpleSection) | (scope::SimpleSection) | (conformance::SimpleSection) | (compliance::SimpleSection) | (compatibility::SimpleSection) | (notation::SimpleSection) | (normativeReferences::SimpleSection) | (documentStructure::SimpleSection) | (whatsnew::SimpleSection) | (clause::SimpleSection) | (field::SimpleSection) ;
SimpleTextElement ::= (empty::ε) | (text::mixedType) | (table::SimpleTable) | (list::SimpleList) | (formula::string()) | (sample::string()) | production ;
SimpleTable ::= (header::TableRow)* (row::TableRow)+ ;
TableRow ::= (cell::SimpleText)+ ;
StructuredSectionElement ::= (placeholder::generated) | normative | informative | production | (relationship::ListOfInternalLinks) | (subtopic::StructuredSection) ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
titlePage ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
ListOfInternalLinks ::= (link::(text::string() (linktext::string())? reference::string()))+ ;
mixedType ::= (α | string())* ;
StructuredSection ::= title::string() (author::string())* StructuredSectionElement+ (id::string())? ;
SimpleSection ::= (title::string())? (author::string())* content::SimpleText (id::string())? ;
front-list ::= (definitions::ListOfTerms) | (abbreviations::ListOfTerms) | (languageOverview::ListOfTerms) ;
ListOfTerms ::= (title::string())? (author::string())* (term::(name::string() definition::SimpleText))+ (id::string())? ;
LexicalSection ::= (lineContinuations::SimpleSection) | (whitespace::SimpleSection) | (tokens::SimpleSection) | (preprocessor::SimpleSection) | (literals::SimpleSection) | (lexical::SimpleSection) ;
SimpleList ::= (item::mixedType)+ ;
--------------------slps::ldf-v11.0-xsd.bgf--------------------
SimpleText ::= SimpleTextElement+ ;
front-simple-section ::= (foreword::SimpleSection) | (designGoals::SimpleSection) | (scope::SimpleSection) | (conformance::SimpleSection) | (compliance::SimpleSection) | (compatibility::SimpleSection) | (notation::SimpleSection) | (normativeReferences::SimpleSection) | (documentStructure::SimpleSection) | (whatsnew::SimpleSection) | (clause::SimpleSection) | (field::SimpleSection) ;
SimpleTextElement ::= (empty::ε) | (text::mixedType) | (figure::SimpleFigure) | (table::SimpleTable) | (list::SimpleList) | (formula::string()) | (sample::string()) | production ;
SimpleTable ::= (header::TableRow)* (row::TableRow)+ ;
TableRow ::= (cell::SimpleText)+ ;
StructuredSectionElement ::= (placeholder::generated) | normative | informative | production | (relationship::ListOfInternalLinks) | (subtopic::StructuredSection) ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
titlePage ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
ListOfInternalLinks ::= (link::(text::string() (linktext::string())? reference::string()))+ ;
SimpleFigure ::= caption::string() type::string() file::string() (id::string())? ;
mixedType ::= (α | string())* ;
StructuredSection ::= title::string() (author::string())* StructuredSectionElement+ (id::string())? ;
SimpleSection ::= (title::string())? (author::string())* content::SimpleText (id::string())? ;
front-list ::= (definitions::ListOfTerms) | (abbreviations::ListOfTerms) | (languageOverview::ListOfTerms) ;
ListOfTerms ::= (title::string())? (author::string())* (term::(name::string() definition::SimpleText))+ (id::string())? ;
LexicalSection ::= (lineContinuations::SimpleSection) | (whitespace::SimpleSection) | (tokens::SimpleSection) | (preprocessor::SimpleSection) | (literals::SimpleSection) | (lexical::SimpleSection) ;
SimpleList ::= (item::mixedType)+ ;
--------------------slps::ldf-v11.1-xsd.bgf--------------------
simpleText ::= simpleTextElement+ ;
simpleTextElement ::= (empty::ε) | (text::mixedType) | (figure::simpleFigure) | (table::simpleTable) | (list::simpleList) | (formula::string()) | (sample::string()) | production ;
frontSection ::= (foreword::simpleSection) | (designGoals::simpleSection) | (scope::simpleSection) | (conformance::simpleSection) | (compliance::simpleSection) | (compatibility::simpleSection) | (notation::simpleSection) | (normativeReferences::simpleSection) | (documentStructure::simpleSection) | (whatsnew::simpleSection) | (clause::simpleSection) | (field::simpleSection) ;
simpleTable ::= (header::tableRow)* (row::tableRow)+ ;
tableRow ::= (cell::simpleText)+ ;
structuredSectionElement ::= (placeholder::generated) | normative | informative | production | (relationship::listOfInternalLinks) | (subtopic::structuredSection) ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
frontList ::= (definitions::listOfTerms) | (abbreviations::listOfTerms) | (languageOverview::listOfTerms) ;
listOfInternalLinks ::= (link::(text::string() (linkText::string())? reference::string()))+ ;
titlePage ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
simpleFigure ::= caption::string() type::string() file::string() (id::string())? ;
mixedType ::= (α | string())* ;
structuredSection ::= title::string() (author::string())* structuredSectionElement+ (id::string())? ;
simpleSection ::= (title::string())? (author::string())* content::simpleText (id::string())? ;
listOfTerms ::= (title::string())? (author::string())* (term::(name::string() definition::simpleText))+ (id::string())? ;
lexicalSection ::= (lineContinuations::simpleSection) | (whitespace::simpleSection) | (tokens::simpleSection) | (preprocessor::simpleSection) | (literals::simpleSection) | (lexical::simpleSection) ;
simpleList ::= (item::mixedType)+ ;
--------------------slps::ldf-v11.2-xsd.bgf--------------------
simpleText ::= simpleTextElement+ ;
simpleTextElement ::= (empty::ε) | (text::mixedType) | (figure::simpleFigure) | (table::simpleTable) | (list::simpleList) | (formula::string()) | (sample::string()) | production ;
simpleTable ::= (header::tableRow)* (row::tableRow)+ ;
tableRow ::= (cell::simpleText)+ ;
frontSection ::= (foreword::simpleSection) | (designGoals::simpleSection) | (scope::simpleSection) | (conformance::simpleSection) | (compliance::simpleSection) | (compatibility::simpleSection) | (notation::simpleSection) | (normativeReferences::simpleSection) | (documentStructure::simpleSection) | (whatsnew::simpleSection) | (clause::simpleSection) | (field::simpleSection) ;
structuredSectionElement ::= (placeholder::generated) | normative | informative | production | (relationship::listOfInternalLinks) | (subtopic::structuredSection) ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
frontList ::= (definitions::listOfTerms) | (abbreviations::listOfTerms) | (languageOverview::listOfTerms) ;
listOfInternalLinks ::= (link::(text::string() (linkText::string())? reference::string()))+ ;
titlePage ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
simpleFigure ::= caption::string() type::string() file::string() (id::string())? ;
mixedType ::= (α | string())* ;
structuredSection ::= title::string() (author::string())* structuredSectionElement+ (id::string())? ;
simpleSection ::= (title::string())? (author::string())* content::simpleText (id::string())? ;
listOfTerms ::= (title::string())? (author::string())* (term::(name::string() definition::simpleText))+ (id::string())? ;
lexicalSection ::= (lineContinuations::simpleSection) | (whitespace::simpleSection) | (tokens::simpleSection) | (preprocessor::simpleSection) | (literals::simpleSection) | (lexical::simpleSection) ;
simpleList ::= (item::mixedType)+ ;
--------------------slps::ldf-v12.0-xsd.bgf--------------------
simpleText ::= simpleTextElement+ ;
simpleTextElement ::= (empty::ε) | (text::mixedType) | (figure::simpleFigure) | (table::simpleTable) | (list::simpleList) | (formula::string()) | (sample::string()) | production ;
tableRow ::= (cell::simpleText)+ ;
simpleTable ::= (header::tableRow)* (row::tableRow)+ ;
frontSection ::= (foreword::simpleSection) | (designGoals::simpleSection) | (scope::simpleSection) | (conformance::simpleSection) | (compliance::simpleSection) | (compatibility::simpleSection) | (notation::simpleSection) | (normativeReferences::simpleSection) | (documentStructure::simpleSection) | (whatsnew::simpleSection) ;
structuredSectionElement ::= (placeholder::generated) | normative | informative | production | (relationship::listOfInternalLinks) | (subtopic::structuredSection) | (clause::simpleSection) | (field::simpleSection) ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
listOfInternalLinks ::= (link::(text::string() (linkText::string())? reference::string()))+ ;
frontList ::= (definitions::listOfTerms) | (abbreviations::listOfTerms) | (languageOverview::listOfTerms) ;
titlePage ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
simpleFigure ::= caption::string() type::string() file::string() (id::string())? ;
mixedType ::= (α | string())* ;
structuredSection ::= title::string() (author::string())* structuredSectionElement+ (id::string())? ;
simpleSection ::= (title::string())? (author::string())* content::simpleText (id::string())? ;
listOfTerms ::= (title::string())? (author::string())* (term::(name::string() definition::simpleText))+ (id::string())? ;
lexicalSection ::= (lineContinuations::simpleSection) | (whitespace::simpleSection) | (tokens::simpleSection) | (preprocessor::simpleSection) | (literals::simpleSection) | (lexical::simpleSection) ;
simpleList ::= (item::mixedType)+ ;
--------------------slps::ldf-v13.0-xsd.bgf--------------------
simpleText ::= simpleTextElement+ ;
simpleTextElement ::= (empty::ε) | (text::mixedType) | (figure::simpleFigure) | (table::simpleTable) | (list::simpleList) | (formula::string()) | (sample::string()) | production ;
tableRow ::= (cell::simpleText)+ ;
simpleTable ::= (header::tableRow)* (row::tableRow)+ ;
frontSection ::= (foreword::simpleSection) | (designGoals::simpleSection) | (scope::simpleSection) | (conformance::simpleSection) | (compliance::simpleSection) | (compatibility::simpleSection) | (notation::simpleSection) | (normativeReferences::simpleSection) | (documentStructure::simpleSection) | (whatsnew::simpleSection) ;
structuredSectionElement ::= (placeholder::generated) | normative | informative | production | (references::listOfInternalLinks) | (section::simpleSection) | (subtopic::structuredSection) | (value::(key::string() data::string())) ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
listOfInternalLinks ::= (link::(text::string() (linkText::string())? reference::string()))+ ;
frontList ::= (definitions::listOfTerms) | (abbreviations::listOfTerms) | (languageOverview::listOfTerms) ;
titlePage ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
simpleFigure ::= caption::string() type::string() file::string() (id::string())? ;
mixedType ::= (α | string())* ;
structuredSection ::= title::string() (author::string())* structuredSectionElement+ (id::string())? ;
simpleSection ::= (title::string())? (author::string())* content::simpleText (id::string())? ;
listOfTerms ::= (title::string())? (author::string())* (term::(name::string() definition::simpleText))+ (id::string())? ;
lexicalSection ::= (lineContinuations::simpleSection) | (whitespace::simpleSection) | (tokens::simpleSection) | (preprocessor::simpleSection) | (literals::simpleSection) | (lexical::simpleSection) ;
simpleList ::= (item::mixedType)+ ;
--------------------slps::ldf-v13.1-xsd.bgf--------------------
simpleText ::= simpleTextElement+ ;
simpleTextElement ::= (empty::ε) | (text::mixedType) | (figure::simpleFigure) | (table::simpleTable) | (list::simpleList) | (formula::string()) | (sample::string()) | production ;
tableRow ::= (cell::simpleText)+ ;
simpleTable ::= (header::tableRow)* (row::tableRow)+ ;
frontSection ::= (foreword::simpleSection) | (designGoals::simpleSection) | (scope::simpleSection) | (conformance::simpleSection) | (compliance::simpleSection) | (compatibility::simpleSection) | (notation::simpleSection) | (normativeReferences::simpleSection) | (documentStructure::simpleSection) | (whatsnew::simpleSection) ;
structuredSectionElement ::= (placeholder::generated) | normative | informative | production | (references::listOfInternalLinks) | (section::simpleSection) | (subtopic::structuredSection) | (value::(key::string() data::string())) ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
listOfInternalLinks ::= (link::(text::string() (linkText::string())? reference::string()))+ ;
frontList ::= (definitions::listOfTerms) | (abbreviations::listOfTerms) | (languageOverview::listOfTerms) ;
titlePage ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
simpleFigure ::= caption::string() type::string() file::string() (id::string())? ;
mixedType ::= (α | string())* ;
structuredSection ::= title::string() (author::string())* structuredSectionElement+ (id::string())? ;
simpleSection ::= (title::string())? (author::string())* content::simpleText (id::string())? ;
listOfTerms ::= (title::string())? (author::string())* (term::(name::string() definition::simpleText))+ (id::string())? ;
lexicalSection ::= (lineContinuations::simpleSection) | (whitespace::simpleSection) | (tokens::simpleSection) | (preprocessor::simpleSection) | (literals::simpleSection) | (lexical::simpleSection) ;
simpleList ::= (item::mixedType)+ ;
--------------------slps::ldf-v14.0-xsd.bgf--------------------
simpleText ::= simpleTextElement+ ;
simpleTextElement ::= (empty::ε) | (text::mixedType) | (figure::simpleFigure) | (table::simpleTable) | (list::simpleList) | (formula::string()) | (sample::string()) | production ;
tableRow ::= (cell::simpleText)+ ;
simpleTable ::= (header::tableRow)* (row::tableRow)+ ;
frontSection ::= (foreword::simpleSection) | (designGoals::simpleSection) | (scope::simpleSection) | (conformance::simpleSection) | (compliance::simpleSection) | (compatibility::simpleSection) | (notation::simpleSection) | (normativeReferences::simpleSection) | (documentStructure::simpleSection) | (whatsnew::simpleSection) ;
structuredSectionElement ::= (placeholder::generated) | normative | informative | production | (references::simpleList) | (section::simpleSection) | (subtopic::structuredSection) | (value::(key::string() data::string())) ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
frontList ::= (definitions::listOfTerms) | (abbreviations::listOfTerms) | (languageOverview::listOfTerms) ;
titlePage ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
simpleFigure ::= caption::string() type::string() file::string() (id::string())? ;
mixedType ::= (α | string())* ;
structuredSection ::= title::string() (author::string())* structuredSectionElement+ (id::string())? ;
simpleSection ::= (title::string())? (author::string())* content::simpleText (id::string())? ;
listOfTerms ::= (title::string())? (author::string())* (term::(name::string() definition::simpleText))+ (id::string())? ;
lexicalSection ::= (lineContinuations::simpleSection) | (whitespace::simpleSection) | (tokens::simpleSection) | (preprocessor::simpleSection) | (literals::simpleSection) | (lexical::simpleSection) ;
simpleList ::= (item::mixedType)+ ;
--------------------slps::ldf-v15.0-xsd.bgf--------------------
simpleText ::= simpleTextElement+ ;
simpleTextElement ::= (empty::ε) | (text::mixedType) | (figure::simpleFigure) | (table::simpleTable) | (list::simpleList) | (formula::(((math::anyMath) | (mfenced::anyMath) | (mtext::anyMath) | (msub::anyMath) | (msup::anyMath) | (mrow::anyMath) | (mi::anyMath) | (mo::anyMath) | (varepsilon::α))+)) | (sample::string()) | production ;
tableRow ::= (cell::simpleText)+ ;
simpleTable ::= (header::tableRow)* (row::tableRow)+ ;
frontSection ::= (foreword::simpleSection) | (designGoals::simpleSection) | (scope::simpleSection) | (conformance::simpleSection) | (compliance::simpleSection) | (compatibility::simpleSection) | (notation::simpleSection) | (normativeReferences::simpleSection) | (documentStructure::simpleSection) | (whatsnew::simpleSection) ;
structuredSectionElement ::= (placeholder::generated) | normative | informative | production | (references::simpleList) | (section::simpleSection) | (subtopic::structuredSection) | (value::(key::string() data::string())) ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
frontList ::= (definitions::listOfTerms) | (abbreviations::listOfTerms) | (languageOverview::listOfTerms) ;
titlePage ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
simpleFigure ::= caption::string() type::string() file::string() (id::string())? ;
mixedType ::= (α | string())* ;
anyMath ::= (α | string())* ;
structuredSection ::= title::string() (author::string())* structuredSectionElement+ (id::string())? ;
simpleSection ::= (title::string())? (author::string())* content::simpleText (id::string())? ;
listOfTerms ::= (title::string())? (author::string())* (term::(name::string() definition::simpleText))+ (id::string())? ;
lexicalSection ::= (lineContinuations::simpleSection) | (whitespace::simpleSection) | (tokens::simpleSection) | (preprocessor::simpleSection) | (literals::simpleSection) | (lexical::simpleSection) ;
simpleList ::= (item::mixedType)+ ;
--------------------slps::ldf-v15.1-xsd.bgf--------------------
simpleText ::= simpleTextElement+ ;
simpleTextElement ::= (empty::ε) | (text::mixedType) | (figure::simpleFigure) | (table::simpleTable) | (list::simpleList) | (formula::(((math::anyMath) | (mfenced::anyMath) | (mtext::anyMath) | (msub::anyMath) | (msup::anyMath) | (mrow::anyMath) | (mi::anyMath) | (mo::anyMath) | (varepsilon::α))+)) | (sample::((α | string())* src::string())) | production ;
tableRow ::= (cell::simpleText)+ ;
simpleTable ::= (header::tableRow)* (row::tableRow)+ ;
frontSection ::= (foreword::simpleSection) | (designGoals::simpleSection) | (scope::simpleSection) | (conformance::simpleSection) | (compliance::simpleSection) | (compatibility::simpleSection) | (notation::simpleSection) | (normativeReferences::simpleSection) | (documentStructure::simpleSection) | (whatsnew::simpleSection) ;
structuredSectionElement ::= (placeholder::generated) | normative | informative | production | (references::simpleList) | (section::simpleSection) | (subtopic::structuredSection) | (value::(key::string() data::string())) ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
frontList ::= (definitions::listOfTerms) | (abbreviations::listOfTerms) | (languageOverview::listOfTerms) ;
titlePage ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
simpleFigure ::= caption::string() type::string() file::string() (id::string())? ;
mixedType ::= (α | string())* ;
anyMath ::= (α | string())* ;
structuredSection ::= title::string() (author::string())* structuredSectionElement+ (id::string())? ;
simpleSection ::= (title::string())? (author::string())* content::simpleText (id::string())? ;
listOfTerms ::= (title::string())? (author::string())* (term::(name::string() definition::simpleText))+ (id::string())? ;
lexicalSection ::= (lineContinuations::simpleSection) | (whitespace::simpleSection) | (tokens::simpleSection) | (preprocessor::simpleSection) | (literals::simpleSection) | (lexical::simpleSection) ;
simpleList ::= (item::mixedType)+ ;
--------------------slps::ldf-v16.0-xsd.bgf--------------------
simpleText ::= simpleTextElement+ ;
simpleTextElement ::= (empty::ε) | (text::mixedType) | (figure::simpleFigure) | (table::simpleTable) | (list::simpleList) | (formula::(((math::anyMath) | (mfenced::anyMath) | (mtext::anyMath) | (msub::anyMath) | (msup::anyMath) | (mrow::anyMath) | (mi::anyMath) | (mo::anyMath) | (varepsilon::α))+)) | (sample::((α | string())* src::string())) | production ;
tableRow ::= (cell::simpleText)+ ;
simpleTable ::= (header::tableRow)* (row::tableRow)+ ;
structuredSectionElement ::= (placeholder::generated) | normative | informative | production | (references::simpleList) | (section::simpleSection) | (subtopic::structuredSection) | (value::(key::string() data::string())) ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
frontList ::= (definitions::listOfTerms) | (abbreviations::listOfTerms) | (languageOverview::listOfTerms) ;
titlePage ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
simpleFigure ::= caption::string() type::string() file::string() (id::string())? ;
mixedType ::= (α | string())* ;
anyMath ::= (α | string())* ;
structuredSection ::= title::string() (author::string())* structuredSectionElement+ (id::string())? ;
simpleSection ::= (title::string())? (author::string())* content::simpleText (id::string())? ;
listOfTerms ::= (title::string())? (author::string())* (term::(name::string() definition::simpleText))+ (id::string())? ;
lexicalSection ::= (lineContinuations::simpleSection) | (whitespace::simpleSection) | (tokens::simpleSection) | (preprocessor::simpleSection) | (literals::simpleSection) | (lexical::simpleSection) ;
simpleList ::= (item::mixedType)+ ;
topSection ::= (foreword::simpleSection) | (designGoals::simpleSection) | (scope::simpleSection) | (conformance::simpleSection) | (compliance::simpleSection) | (compatibility::simpleSection) | (notation::simpleSection) | (normativeReferences::simpleSection) | (documentStructure::simpleSection) | (whatsnew::simpleSection) | (placeholder::generated) ;
--------------------slps::ldf-v17.0-xsd.bgf--------------------
simpleText ::= simpleTextElement+ ;
figureType ::= (PDF::ε) | (PostScript::ε) | (SVG::ε) | (PNG::ε) | (GIF::ε) | (JPEG::ε) ;
simpleTextElement ::= (empty::ε) | (text::mixedType) | (figure::simpleFigure) | (table::simpleTable) | (list::simpleList) | (formula::(((math::anyMath) | (mfenced::anyMath) | (mtext::anyMath) | (msub::anyMath) | (msup::anyMath) | (mrow::anyMath) | (mi::anyMath) | (mo::anyMath) | (varepsilon::α))+)) | (sample::((α | string())* src::string())) | production ;
simpleTable ::= (header::tableRow)* (row::tableRow)+ ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
simpleFigure ::= (shortcaption::string())? caption::string() (source::(type::figureType (localfile::string()) | (url::string())))+ (id::string())? ;
mixedType ::= (α | string())* ;
anyMath ::= (α | string())* ;
structuredSection ::= title::string() (author::string())* structuredSectionElement+ (id::string())? ;
simpleSection ::= (title::string())? (author::string())* content::simpleText (id::string())? ;
listOfTerms ::= (title::string())? (author::string())* (term::(name::string() definition::simpleText))+ (id::string())? ;
simpleList ::= (item::mixedType)+ ;
topSection ::= (foreword::simpleSection) | (designGoals::simpleSection) | (scope::simpleSection) | (conformance::simpleSection) | (compliance::simpleSection) | (compatibility::simpleSection) | (notation::simpleSection) | (normativeReferences::simpleSection) | (documentStructure::simpleSection) | (whatsnew::simpleSection) | (placeholder::generated) ;
tableRow ::= (cell::simpleText)+ ;
structuredSectionElement ::= (placeholder::generated) | normative | informative | production | (references::simpleList) | (section::simpleSection) | (subtopic::structuredSection) | (value::(key::string() data::string())) ;
frontList ::= (definitions::listOfTerms) | (abbreviations::listOfTerms) | (languageOverview::listOfTerms) ;
titlePage ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
lexicalSection ::= (lineContinuations::simpleSection) | (whitespace::simpleSection) | (tokens::simpleSection) | (preprocessor::simpleSection) | (literals::simpleSection) | (lexical::simpleSection) ;
--------------------slps::ldf-v18.0-xsd.bgf--------------------
simpleText ::= simpleTextElement+ ;
figureType ::= (PDF::ε) | (PostScript::ε) | (SVG::ε) | (PNG::ε) | (GIF::ε) | (JPEG::ε) ;
simpleTextElement ::= (empty::ε) | (text::mixedType) | (figure::simpleFigure) | (table::simpleTable) | (list::simpleList) | (formula::(((math::anyMath) | (mfenced::anyMath) | (mtext::anyMath) | (msub::anyMath) | (msup::anyMath) | (mrow::anyMath) | (mi::anyMath) | (mo::anyMath) | (varepsilon::α))+)) | (sample::((α | string())* src::string())) | production ;
simpleTable ::= (header::tableRow)* (row::tableRow)+ ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
simpleFigure ::= (shortcaption::string())? caption::string() (source::(type::figureType (localfile::string()) | (url::string())))+ (id::string())? ;
mixedType ::= (α | string())* ;
anyMath ::= (α | string())* ;
structuredSection ::= title::string() (author::string())* structuredSectionElement+ (id::string())? ;
simpleSection ::= (title::string())? (author::string())* content::simpleText (id::string())? ;
listOfTerms ::= (title::string())? (author::string())* (term::(name::string() definition::simpleText))+ (id::string())? ;
simpleList ::= (item::mixedType)+ ;
topSection ::= (foreword::simpleSection) | (designGoals::simpleSection) | (scope::simpleSection) | (conformance::simpleSection) | (compliance::simpleSection) | (compatibility::simpleSection) | (notation::simpleSection) | (normativeReferences::simpleSection) | (documentStructure::simpleSection) | (whatsnew::simpleSection) | (placeholder::generated) ;
tableRow ::= (cell::simpleText)+ ;
structuredSectionElement ::= (placeholder::generated) | normative | informative | production | (references::simpleList) | (section::simpleSection) | (subtopic::structuredSection) | (value::(key::string() data::string())) ;
frontList ::= (definitions::listOfTerms) | (abbreviations::listOfTerms) | (languageOverview::listOfTerms) ;
titlePage ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
lexicalSection ::= (lineContinuations::simpleSection) | (whitespace::simpleSection) | (tokens::simpleSection) | (preprocessor::simpleSection) | (literals::simpleSection) | (lexical::simpleSection) ;
--------------------slps::ldf-v18.1-xsd.bgf--------------------
simpleText ::= simpleTextElement+ ;
figureType ::= (PDF::ε) | (PostScript::ε) | (SVG::ε) | (PNG::ε) | (GIF::ε) | (JPEG::ε) ;
simpleTextElement ::= (empty::ε) | (text::mixedType) | (figure::simpleFigure) | (table::simpleTable) | (list::simpleList) | (formula::(((math::anyMath) | (mfenced::anyMath) | (mtext::anyMath) | (msub::anyMath) | (msup::anyMath) | (mrow::anyMath) | (mi::anyMath) | (mo::anyMath) | (varepsilon::α))+)) | (sample::((α | string())* src::string())) | production ;
simpleTable ::= (header::tableRow)* (row::tableRow)+ ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
simpleFigure ::= (shortcaption::string())? caption::string() (source::(type::figureType (localfile::string()) | (url::string())))+ (id::string())? ;
mixedType ::= (α | string())* ;
anyMath ::= (α | string())* ;
structuredSection ::= title::string() (author::string())* structuredSectionElement+ (id::string())? ;
simpleSection ::= (title::string())? (author::string())* content::simpleText (id::string())? ;
listOfTerms ::= (title::string())? (author::string())* (term::(name::string() definition::simpleText))+ (id::string())? ;
simpleList ::= (item::mixedType)+ ;
topSection ::= (foreword::simpleSection) | (designGoals::simpleSection) | (scope::simpleSection) | (conformance::simpleSection) | (compliance::simpleSection) | (compatibility::simpleSection) | (notation::simpleSection) | (normativeReferences::simpleSection) | (documentStructure::simpleSection) | (whatsnew::simpleSection) | (placeholder::generated) ;
tableRow ::= (cell::simpleText)+ ;
structuredSectionElement ::= (placeholder::generated) | normative | informative | production | (references::simpleList) | (section::simpleSection) | (subtopic::structuredSection) | (value::(key::string() data::string())) ;
frontList ::= (definitions::listOfTerms) | (abbreviations::listOfTerms) | (languageOverview::listOfTerms) ;
titlePage ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
lexicalSection ::= (lineContinuations::simpleSection) | (whitespace::simpleSection) | (tokens::simpleSection) | (preprocessor::simpleSection) | (literals::simpleSection) | (lexical::simpleSection) ;
--------------------slps::ldf-v19.0-xsd.bgf--------------------
textual-content ::= text-element+ ;
composite-section ::= section+ ;
figure-metainfo ::= (short-caption::string())? caption::string() (id::string())? ;
text-element ::= (empty::ε) | (code::string()) | (text::mixed-type) | (figure::figure) | (table::table) | (list::list) | (formula::(((math::anyMath) | (mfenced::anyMath) | (mtext::anyMath) | (msub::anyMath) | (msup::anyMath) | (mrow::anyMath) | (mi::anyMath) | (mo::anyMath) | (varepsilon::α))+)) | (sample::((α | string())* source::string())) | production ;
lexical-section ::= lexical-section-metainfo::lexical-section-metainfo lexical-section-content::textual-content ;
table-row ::= (table-cell::textual-content)+ ;
normative-role ::= (synopsis::ε) | (description::ε) | (syntax::ε) | (constraints::ε) | (relationship::ε) | (semantics::ε) | (default::ε) ;
simple-section-role ::= (abstract::ε) | (conformance::ε) | (compatibility::ε) | (design-goals::ε) | (document-structure::ε) | (foreword::ε) | (normative-references::ε) | (notation::ε) | (scope::ε) | (what-is-new::ε) ;
structured-section-element ::= (subtopic::structured-section) | (references::list) | (placeholder::placeholder) | (value::(key::string() data::string())) | (element-role simple-section::simple-section) ;
structured-section-metainfo ::= title::string() (author::string())* (id::string())? ;
list-section ::= list-section-metainfo::list-section-metainfo list-section-content::((term::term)+) ;
simple-section-metainfo ::= simple-section-role::simple-section-role (title::string())? (author::string())* (id::string())? ;
anyMath ::= (α | string())* ;
part-role ::= (front-matter::ε) | (core-part::ε) | (back-matter::ε) | (annex::ε) ;
list-section-role ::= (abbreviations::ε) | (definitions::ε) | (language-overview::ε) | (normative-references::ε) ;
part-metainfo ::= part-role::part-role (title::string())? (author::string())* (id::string())? ;
mixed-type ::= (α | string())* ;
list-section-metainfo ::= list-section-role::list-section-role (title::string())? (author::string())* (id::string())? ;
simple-section ::= simple-section-metainfo::simple-section-metainfo simple-section-content::textual-content ;
structured-section ::= structured-section-metainfo::structured-section-metainfo structured-section-content::(structured-section-element+) ;
informative-role ::= (example::ε) | (rationale::ε) | (update::ε) ;
element-role ::= (normative::normative-role) | (informative::informative-role) | (specific-section::simple-section) ;
lexical-section-role ::= (lexical-issue::ε) | (line-continuations::ε) | (literals::ε) | (preprocessor::ε) | (tokens::ε) | (whitespace::ε) ;
document-metainfo ::= (body::body number::string()) | ((author::string())+) topic::string() status::status (version::string()) | (edition::string()) (previous::previous)* date::string() ;
figure-source ::= type::figure-type (local-file::string()) | (uri::string()) ;
lexical-section-metainfo ::= lexical-section-role::lexical-section-role (title::string())? (author::string())* (id::string())? ;
figure-type ::= (PDF::ε) | (PostScript::ε) | (SVG::ε) | (PNG::ε) | (GIF::ε) | (JPEG::ε) ;
--------------------slps::ldf-v2.0-xsd.bgf--------------------
sectionType ::= title::string() content::contentType ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? ;
mixedType ::= (α | string())* ;
sampleType ::= ε ;
contentType ::= ((text::mixedType) | (grammar::(α language::string() (version::string())?)) | (sample::sampleType) | (runnable::runnableType))* (section::sectionType)* ;
--------------------slps::ldf-v2.1-xsd.bgf--------------------
sectionType ::= title::string() content::contentType ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
mixedType ::= (α | string())* ;
sampleType ::= ε ;
contentType ::= ((text::mixedType) | (grammar::(α language::string() (version::string())?)) | (sample::sampleType) | (runnable::runnableType))* (section::sectionType)* ;
--------------------slps::ldf-v20.0-xsd.bgf--------------------
textual-content ::= text-element+ ;
composite-section ::= section+ ;
text-element ::= (empty::ε) | (code::string()) | (text::mixed-type) | figure | table | (list::list) | (formula::(((math::anyMath) | (mfenced::anyMath) | (mtext::anyMath) | (msub::anyMath) | (msup::anyMath) | (mrow::anyMath) | (mi::anyMath) | (mo::anyMath) | (varepsilon::α))+)) | (sample::((α | string())* source::string())) | production ;
lexical-section ::= role::lexical-section-role metainfo content::textual-content ;
table-row ::= (table-cell::textual-content)+ ;
normative-role ::= (synopsis::ε) | (description::ε) | (syntax::ε) | (constraints::ε) | (relationship::ε) | (semantics::ε) | (default::ε) ;
simple-section-role ::= (abstract::ε) | (conformance::ε) | (compatibility::ε) | (design-goals::ε) | (document-structure::ε) | (foreword::ε) | (normative-references::ε) | (notation::ε) | (scope::ε) | (what-is-new::ε) ;
structured-section-element ::= (subtopic::structured-section) | (references::list) | placeholder | (value::(key::string() data::string())) | ((normative-role | informative-role)? simple-section) ;
list-section ::= role::list-section-role metainfo content::(term+) ;
anyMath ::= (α | string())* ;
part-role ::= (front-matter::ε) | (core-part::ε) | (back-matter::ε) | (annex::ε) ;
list-section-role ::= (abbreviations::ε) | (definitions::ε) | (language-overview::ε) | (normative-references::ε) ;
mixed-type ::= (α | string())* ;
simple-section ::= role::simple-section-role metainfo content::textual-content ;
structured-section ::= metainfo content::(structured-section-element+) ;
informative-role ::= (example::ε) | (rationale::ε) | (update::ε) ;
lexical-section-role ::= (lexical-issue::ε) | (line-continuations::ε) | (literals::ε) | (preprocessor::ε) | (tokens::ε) | (whitespace::ε) ;
figure-source ::= type::figure-type (local-file::string()) | (uri::string()) ;
title-page ::= (body number::string())? metainfo status (version::string()) | (edition::string()) previous* date::string() ;
figure-type ::= (PDF::ε) | (PostScript::ε) | (SVG::ε) | (PNG::ε) | (GIF::ε) | (JPEG::ε) ;
--------------------slps::ldf-v20.1-xsd.bgf--------------------
textual-content ::= text-element+ ;
composite-section ::= section+ ;
text-element ::= (empty::ε) | (code::string()) | (text::mixed-type) | figure | table | (list::list) | (formula::(((math::anyMath) | (mfenced::anyMath) | (mtext::anyMath) | (msub::anyMath) | (msup::anyMath) | (mrow::anyMath) | (mi::anyMath) | (mo::anyMath) | (varepsilon::α))+)) | (sample::((α | string())* source::string())) | production ;
lexical-section ::= role::lexical-section-role metainfo content::textual-content ;
table-row ::= (table-cell::textual-content)+ ;
normative-role ::= (synopsis::ε) | (description::ε) | (syntax::ε) | (constraints::ε) | (relationship::ε) | (semantics::ε) | (default::ε) ;
simple-section-role ::= (abstract::ε) | (conformance::ε) | (compatibility::ε) | (design-goals::ε) | (document-structure::ε) | (foreword::ε) | (normative-references::ε) | (notation::ε) | (scope::ε) | (what-is-new::ε) ;
structured-section-element ::= (subtopic::structured-section) | (references::list) | placeholder | (value::(key::string() data::string())) | ((normative-role | informative-role)? simple-section) ;
list-section ::= role::list-section-role metainfo content::(term+) ;
anyMath ::= (α | string())* ;
part-role ::= (front-matter::ε) | (core-part::ε) | (back-matter::ε) | (annex::ε) ;
list-section-role ::= (abbreviations::ε) | (definitions::ε) | (language-overview::ε) | (normative-references::ε) ;
mixed-type ::= (α | string())* ;
simple-section ::= role::simple-section-role metainfo content::textual-content ;
structured-section ::= metainfo content::(structured-section-element+) ;
informative-role ::= (example::ε) | (rationale::ε) | (update::ε) ;
lexical-section-role ::= (lexical-issue::ε) | (line-continuations::ε) | (literals::ε) | (preprocessor::ε) | (tokens::ε) | (whitespace::ε) ;
figure-source ::= type::figure-type (local-file::string()) | (uri::string()) ;
title-page ::= (body number::string())? metainfo status (version::string()) | (edition::string()) previous* date::string() ;
figure-type ::= (PDF::ε) | (PostScript::ε) | (SVG::ε) | (PNG::ε) | (GIF::ε) | (JPEG::ε) ;
--------------------slps::ldf-v21.0-xsd.bgf--------------------
textual-content ::= text-element+ ;
composite-section ::= section+ ;
text-element ::= (empty::ε) | code | (text::mixed-type) | figure | table | (list::list) | (formula::(((math::anyMath) | (mfenced::anyMath) | (mtext::anyMath) | (msub::anyMath) | (msup::anyMath) | (mrow::anyMath) | (mi::anyMath) | (mo::anyMath) | (varepsilon::α))+)) | (sample::((α | string())* source::string())) | production ;
lexical-section ::= role::lexical-section-role metainfo content::textual-content ;
table-row ::= (table-cell::textual-content)+ ;
normative-role ::= (synopsis::ε) | (description::ε) | (syntax::ε) | (constraints::ε) | (relationship::ε) | (semantics::ε) | (default::ε) ;
simple-section-role ::= (abstract::ε) | (conformance::ε) | (compatibility::ε) | (design-goals::ε) | (document-structure::ε) | (foreword::ε) | (normative-references::ε) | (notation::ε) | (scope::ε) | (what-is-new::ε) ;
structured-section-element ::= (subtopic::structured-section) | (references::list) | placeholder | (value::(key::string() data::string())) | ((normative-role | informative-role)? simple-section) ;
list-section ::= role::list-section-role metainfo content::(term+) ;
anyMath ::= (α | string())* ;
part-role ::= (front-matter::ε) | (core-part::ε) | (back-matter::ε) | (annex::ε) ;
list-section-role ::= (abbreviations::ε) | (definitions::ε) | (language-overview::ε) | (normative-references::ε) ;
mixed-type ::= (α | string())* ;
simple-section ::= role::simple-section-role metainfo content::textual-content ;
structured-section ::= metainfo content::(structured-section-element+) ;
informative-role ::= (example::ε) | (rationale::ε) | (update::ε) ;
lexical-section-role ::= (lexical-issue::ε) | (line-continuations::ε) | (literals::ε) | (preprocessor::ε) | (tokens::ε) | (whitespace::ε) ;
figure-source ::= type::figure-type (local-file::string()) | (uri::string()) ;
title-page ::= (body number::string())? metainfo status (version::string()) | (edition::string()) previous* date::string() ;
figure-type ::= (PDF::ε) | (PostScript::ε) | (SVG::ε) | (PNG::ε) | (GIF::ε) | (JPEG::ε) ;
--------------------slps::ldf-v21.1-xsd.bgf--------------------
textual-content ::= text-element+ ;
composite-section ::= section+ ;
text-element ::= (empty::ε) | code | (text::mixed-type) | figure | table | (list::list) | (formula::(((math::anyMath) | (mfenced::anyMath) | (mtext::anyMath) | (msub::anyMath) | (msup::anyMath) | (mrow::anyMath) | (mi::anyMath) | (mo::anyMath) | (varepsilon::α))+)) | (sample::((α | string())* source::string())) ;
lexical-section ::= role::lexical-section-role metainfo content::textual-content ;
table-row ::= (table-cell::textual-content)+ ;
normative-role ::= (synopsis::ε) | (description::ε) | (syntax::ε) | (constraints::ε) | (relationship::ε) | (semantics::ε) | (default::ε) ;
simple-section-role ::= (abstract::ε) | (conformance::ε) | (compatibility::ε) | (design-goals::ε) | (document-structure::ε) | (foreword::ε) | (normative-references::ε) | (notation::ε) | (scope::ε) | (what-is-new::ε) ;
structured-section-element ::= (subtopic::structured-section) | (references::list) | placeholder | (value::(key::string() data::string())) | ((normative-role | informative-role)? simple-section) ;
list-section ::= role::list-section-role metainfo content::(term+) ;
anyMath ::= (α | string())* ;
part-role ::= (front-matter::ε) | (core-part::ε) | (back-matter::ε) | (annex::ε) ;
list-section-role ::= (abbreviations::ε) | (definitions::ε) | (language-overview::ε) | (normative-references::ε) ;
mixed-type ::= (α | string())* ;
simple-section ::= role::simple-section-role metainfo content::textual-content ;
structured-section ::= metainfo content::(structured-section-element+) ;
informative-role ::= (example::ε) | (rationale::ε) | (update::ε) ;
lexical-section-role ::= (lexical-issue::ε) | (line-continuations::ε) | (literals::ε) | (preprocessor::ε) | (tokens::ε) | (whitespace::ε) ;
figure-source ::= type::figure-type (local-file::string()) | (uri::string()) ;
title-page ::= (body number::string())? metainfo status (version::string()) | (edition::string()) previous* date::string() ;
figure-type ::= (PDF::ε) | (PostScript::ε) | (SVG::ε) | (PNG::ε) | (GIF::ε) | (JPEG::ε) ;
--------------------slps::ldf-v22.0-xsd.bgf--------------------
textual-content ::= text-element+ ;
composite-section ::= section+ ;
text-element ::= (empty::ε) | code | (text::mixed-type) | figure | table | (list::list-type) | (formula::(((math::anyMath) | (mfenced::anyMath) | (mtext::anyMath) | (msub::anyMath) | (msup::anyMath) | (mrow::anyMath) | (mi::anyMath) | (mo::anyMath) | (varepsilon::α))+)) | (sample::((α | string())* source::string())) ;
lexical-section ::= role::lexical-section-role metainfo content::textual-content ;
table-row ::= (table-cell::textual-content)+ ;
normative-role ::= (synopsis::ε) | (description::ε) | (syntax::ε) | (constraints::ε) | (relationship::ε) | (semantics::ε) | (default::ε) ;
structured-section-element ::= (subtopic::structured-section) | (references::list-type) | placeholder | (value::(key::string() data::string())) | ((normative-role | informative-role)? simple-section) ;
list-section ::= role::list-section-role metainfo content::(term+) ;
anyMath ::= (α | string())* ;
part-type ::= metadata::((id::string())? role::((front-matter::ε) | (core-part::ε) | (back-matter::ε) | (annex::ε)) (title::string())? (author::person)*) (section::section-type)+ ;
list-section-role ::= (abbreviations::ε) | (definitions::ε) | (language-overview::ε) | (normative-references::ε) ;
mixed-type ::= (α | string())* ;
simple-section ::= metainfo content::textual-content ;
list-type ::= (item::mixed-type)+ ;
structured-section ::= metainfo content::(structured-section-element+) ;
informative-role ::= (example::ε) | (rationale::ε) | (update::ε) ;
lexical-section-role ::= (lexical-issue::ε) | (line-continuations::ε) | (literals::ε) | (preprocessor::ε) | (tokens::ε) | (whitespace::ε) ;
content-content ::= (para::mixed-type) | (list::list-type) | production ;
figure-source ::= type::figure-type (local-file::string()) | (uri::string()) ;
figure-type ::= (PDF::ε) | (PostScript::ε) | (SVG::ε) | (PNG::ε) | (GIF::ε) | (JPEG::ε) ;
title-ve-uri ::= title::string() ((version::string()) | (edition::string()))? (uri::string())? ;
subsection-type ::= metadata::((id::string())? role::((synopsis::ε) | (description::ε) | (syntax::ε) | (constraints::ε) | (relationship::ε) | (semantics::ε) | (default::ε) | (rationale::ε) | (example::ε) | (update::ε) | (subtopic::ε) | (section::ε)) (type::((normative::ε) | (informative::ε)))? (title::string())? (author::person)*) (content::(content-content+)) | (placeholder::α) | ((subsection::subsection-type)+) ;
section-type ::= metadata::((id::string())? role::((abstract::ε) | (conformance::ε) | (compatibility::ε) | (design-goals::ε) | (document-structure::ε) | (foreword::ε) | (references::ε) | (notation::ε) | (scope::ε) | (what-is-new::ε) | (index::ε) | (full-grammar::ε) | (list-of-tables::ε) | (list-of-authors::ε) | (list-of-contents::ε) | (list-of-references::ε) | (top-section::ε) | (lexical-section::ε) | (description::ε) | (syntax::ε) | (example::ε) | (subsection::ε)) (type::((normative::ε) | (informative::ε)))? (title::string())? (author::person)*) (content::(content-content+)) | (placeholder::α) | ((subsection::subsection-type)+) ;
--------------------slps::ldf-v23.0-xsd.bgf--------------------
textual-content ::= text-element+ ;
composite-section ::= any-section+ ;
text-element ::= (empty::ε) | code | (text::mixed-type) | figure | table | (list::list-type) | (formula::(((math::anyMath) | (mfenced::anyMath) | (mtext::anyMath) | (msub::anyMath) | (msup::anyMath) | (mrow::anyMath) | (mi::anyMath) | (mo::anyMath) | (varepsilon::α))+)) | (sample::((α | string())* source::string())) ;
lexical-section ::= role::lexical-section-role metainfo content::textual-content ;
table-row ::= (table-cell::textual-content)+ ;
normative-role ::= (synopsis::ε) | (description::ε) | (syntax::ε) | (constraints::ε) | (relationship::ε) | (semantics::ε) | (default::ε) ;
structured-section-element ::= (subtopic::structured-section) | (references::list-type) | placeholder | (value::(key::string() data::string())) | ((normative-role | informative-role)? simple-section) ;
list-section ::= role::list-section-role metainfo content::(term+) ;
anyMath ::= (α | string())* ;
part-type ::= metadata::((id::string())? role::((front-matter::ε) | (core-part::ε) | (back-matter::ε) | (annex::ε)) (title::string())? (author::person)*) (section::section-type)+ ;
named-link ::= title::string() ((version::string()) | (edition::string()))? (uri::string())? ;
list-section-role ::= (abbreviations::ε) | (definitions::ε) | (language-overview::ε) | (normative-references::ε) ;
mixed-type ::= (α | string())* ;
simple-section ::= metainfo content::textual-content ;
list-type ::= (item::mixed-type)+ ;
structured-section ::= metainfo content::(structured-section-element+) ;
informative-role ::= (example::ε) | (rationale::ε) | (update::ε) ;
lexical-section-role ::= (lexical-issue::ε) | (line-continuations::ε) | (literals::ε) | (preprocessor::ε) | (tokens::ε) | (whitespace::ε) ;
content-content ::= (para::mixed-type) | (list::list-type) | production ;
figure-source ::= type::figure-type (local-file::string()) | (uri::string()) ;
any-section ::= placeholder | simple-section | lexical-section | structured-section | composite-section | list-section ;
figure-type ::= (PDF::ε) | (PostScript::ε) | (SVG::ε) | (PNG::ε) | (GIF::ε) | (JPEG::ε) ;
subsection-type ::= metadata::((id::string())? role::((synopsis::ε) | (description::ε) | (syntax::ε) | (constraints::ε) | (relationship::ε) | (semantics::ε) | (default::ε) | (rationale::ε) | (example::ε) | (update::ε) | (subtopic::ε) | (section::ε)) (type::((normative::ε) | (informative::ε)))? (title::string())? (author::person)*) (content::(content-content+)) | (placeholder::α) | ((subsection::subsection-type)+) ;
section-type ::= metadata::((id::string())? role::((abstract::ε) | (conformance::ε) | (compatibility::ε) | (design-goals::ε) | (document-structure::ε) | (foreword::ε) | (references::ε) | (notation::ε) | (scope::ε) | (what-is-new::ε) | (index::ε) | (full-grammar::ε) | (list-of-tables::ε) | (list-of-authors::ε) | (list-of-contents::ε) | (list-of-references::ε) | (top-section::ε) | (lexical-section::ε)) (type::((normative::ε) | (informative::ε)))? (title::string())? (author::person)*) (content::(content-content+)) | (placeholder::α) | ((subsection::subsection-type)+) ;
--------------------slps::ldf-v3.0-xsd.bgf--------------------
SimpleText ::= ((p::string()) | (list::SimpleList))+ ;
top-section ::= (scope::SimpleSection) | (conformance::SimpleSection) | (compliance::SimpleSection) | (compatibility::SimpleSection) | (notation::SimpleSection) | (clause::SimpleSection) | (field::SimpleSection) | (core::SimpleSection) ;
frontMatter ::= foreword::SimpleText designGoals::SimpleList top-section+ normativeReferences::SimpleList (definitions::ListOfTerms)? (abbreviations::ListOfTerms)? documentStructure::TopSection whatsnew::SimpleList ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
ListOfInternalLinks ::= (link::(text::string() reference::string()))+ ;
mixedType ::= (α | string())* ;
SimpleSection ::= (id::string())? (title::string())? ((author::string())+)? content::SimpleText ;
ListOfTerms ::= (term::(name::string() definition::SimpleText))+ ;
LexicalSection ::= id::string() type::lexical title::string() ((author::string())+)? ((placeholder::generated) | normative | informative | production | (relationship::ListOfInternalLinks) | (subtopic::TopSection))+ ;
TopSection ::= id::string() title::string() ((author::string())+)? ((placeholder::generated) | normative | informative | production | (relationship::ListOfInternalLinks) | (subtopic::TopSection))+ ;
SimpleList ::= (item::string())+ ;
--------------------slps::ldf-v4.0-xsd.bgf--------------------
SimpleText ::= ((p::string()) | (list::SimpleList))+ ;
top-section ::= (scope::SimpleSection) | (conformance::SimpleSection) | (compliance::SimpleSection) | (compatibility::SimpleSection) | (notation::SimpleSection) | (clause::SimpleSection) | (field::SimpleSection) ;
frontMatter ::= foreword::SimpleText designGoals::SimpleList top-section+ normativeReferences::SimpleList (definitions::ListOfTerms)? (abbreviations::ListOfTerms)? documentStructure::SimpleSection whatsnew::SimpleList ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
ListOfInternalLinks ::= (link::(text::string() reference::string()))+ ;
mixedType ::= (α | string())* ;
StructuredSection ::= id::string() title::string() ((author::string())+)? ((placeholder::generated) | normative | informative | lexical | production | (relationship::ListOfInternalLinks) | (subtopic::StructuredSection))+ ;
SimpleSection ::= (id::string())? (title::string())? ((author::string())+)? content::SimpleText ;
ListOfTerms ::= (term::(name::string() definition::SimpleText))+ ;
SimpleList ::= (item::string())+ ;
--------------------slps::ldf-v5.0-xsd.bgf--------------------
SimpleText ::= ((p::string()) | (list::SimpleList))+ ;
frontLists ::= (((definitions::ListOfTerms) | (abbreviations::ListOfTerms) | (languageOverview::ListOfTerms))+)? ;
frontMatter ::= ((foreword::SimpleSection) | (designGoals::SimpleSection) | (scope::SimpleSection) | (conformance::SimpleSection) | (compliance::SimpleSection) | (compatibility::SimpleSection) | (notation::SimpleSection) | (normativeReferences::SimpleSection) | (documentStructure::SimpleSection) | (whatsnew::SimpleSection) | (clause::SimpleSection) | (field::SimpleSection))+ ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
ListOfInternalLinks ::= (link::(text::string() reference::string()))+ ;
mixedType ::= (α | string())* ;
StructuredSection ::= id::string() title::string() ((author::string())+)? ((placeholder::generated) | normative | informative | lexicals | production | (relationship::ListOfInternalLinks) | (subtopic::StructuredSection))+ ;
SimpleSection ::= (id::string())? (title::string())? ((author::string())+)? content::SimpleText ;
ListOfTerms ::= (id::string())? (title::string())? ((author::string())+)? (term::(name::string() definition::SimpleText))+ ;
SimpleList ::= (item::string())+ ;
--------------------slps::ldf-v6.0-xsd.bgf--------------------
SimpleText ::= ((p::string()) | (list::SimpleList))+ ;
frontLists ::= (((definitions::ListOfTerms) | (abbreviations::ListOfTerms) | (languageOverview::ListOfTerms))+)? ;
lexicalGroup ::= (lineContinuations::SimpleSection) | (whitespace::SimpleSection) | (tokens::SimpleSection) | (preprocessor::SimpleSection) | (literals::SimpleSection) | (lexical::SimpleSection) ;
frontMatter ::= ((foreword::SimpleSection) | (designGoals::SimpleSection) | (scope::SimpleSection) | (conformance::SimpleSection) | (compliance::SimpleSection) | (compatibility::SimpleSection) | (notation::SimpleSection) | (normativeReferences::SimpleSection) | (documentStructure::SimpleSection) | (whatsnew::SimpleSection) | (clause::SimpleSection) | (field::SimpleSection))+ ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
titlePage ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
ListOfInternalLinks ::= (link::(text::string() (linktext::string())? reference::string()))+ ;
mixedType ::= (α | string())* ;
StructuredSection ::= (id::string())? title::string() ((author::string())+)? ((placeholder::generated) | normative | informative | production | (relationship::ListOfInternalLinks) | (subtopic::StructuredSection))+ ;
SimpleSection ::= (id::string())? (title::string())? ((author::string())+)? content::SimpleText ;
ListOfTerms ::= (id::string())? (title::string())? ((author::string())+)? (term::(name::string() definition::SimpleText))+ ;
SimpleList ::= (item::string())+ ;
--------------------slps::ldf-v7.0-xsd.bgf--------------------
SimpleText ::= insideSimpleText+ ;
frontLists ::= (((definitions::ListOfTerms) | (abbreviations::ListOfTerms) | (languageOverview::ListOfTerms))+)? ;
lexicalGroup ::= (lineContinuations::SimpleSection) | (whitespace::SimpleSection) | (tokens::SimpleSection) | (preprocessor::SimpleSection) | (literals::SimpleSection) | (lexical::SimpleSection) ;
insideSimpleText ::= (p::string()) | (list::SimpleList) | (formula::string()) ;
frontMatter ::= ((foreword::SimpleSection) | (designGoals::SimpleSection) | (scope::SimpleSection) | (conformance::SimpleSection) | (compliance::SimpleSection) | (compatibility::SimpleSection) | (notation::SimpleSection) | (normativeReferences::SimpleSection) | (documentStructure::SimpleSection) | (whatsnew::SimpleSection) | (clause::SimpleSection) | (field::SimpleSection))+ ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
titlePage ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
ListOfInternalLinks ::= (link::(text::string() (linktext::string())? reference::string()))+ ;
mixedType ::= (α | string())* ;
StructuredSection ::= (id::string())? title::string() ((author::string())+)? ((placeholder::generated) | normative | informative | production | (relationship::ListOfInternalLinks) | (subtopic::StructuredSection))+ ;
SimpleSection ::= (id::string())? (title::string())? ((author::string())+)? content::SimpleText ;
ListOfTerms ::= (id::string())? (title::string())? ((author::string())+)? (term::(name::string() definition::SimpleText))+ ;
SimpleList ::= (item::string())+ ;
--------------------slps::ldf-v7.1-xsd.bgf--------------------
SimpleText ::= insideSimpleText+ ;
frontLists ::= (((definitions::ListOfTerms) | (abbreviations::ListOfTerms) | (languageOverview::ListOfTerms))+)? ;
lexicalGroup ::= (lineContinuations::SimpleSection) | (whitespace::SimpleSection) | (tokens::SimpleSection) | (preprocessor::SimpleSection) | (literals::SimpleSection) | (lexical::SimpleSection) ;
insideSimpleText ::= (p::string()) | (list::SimpleList) | (formula::string()) | production ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
titlePage ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
ListOfInternalLinks ::= (link::(text::string() (linktext::string())? reference::string()))+ ;
mixedType ::= (α | string())* ;
front-simple-sections ::= (foreword::SimpleSection) | (designGoals::SimpleSection) | (scope::SimpleSection) | (conformance::SimpleSection) | (compliance::SimpleSection) | (compatibility::SimpleSection) | (notation::SimpleSection) | (normativeReferences::SimpleSection) | (documentStructure::SimpleSection) | (whatsnew::SimpleSection) | (clause::SimpleSection) | (field::SimpleSection) ;
StructuredSection ::= (id::string())? title::string() ((author::string())+)? ((placeholder::generated) | normative | informative | production | (relationship::ListOfInternalLinks) | (subtopic::StructuredSection))+ ;
SimpleSection ::= (id::string())? (title::string())? ((author::string())+)? content::SimpleText ;
ListOfTerms ::= (id::string())? (title::string())? ((author::string())+)? (term::(name::string() definition::SimpleText))+ ;
SimpleList ::= (item::string())+ ;
--------------------slps::ldf-v8.0-xsd.bgf--------------------
SimpleText ::= insideSimpleText+ ;
front-simple-section ::= (foreword::SimpleSection) | (designGoals::SimpleSection) | (scope::SimpleSection) | (conformance::SimpleSection) | (compliance::SimpleSection) | (compatibility::SimpleSection) | (notation::SimpleSection) | (normativeReferences::SimpleSection) | (documentStructure::SimpleSection) | (whatsnew::SimpleSection) | (clause::SimpleSection) | (field::SimpleSection) ;
insideSimpleText ::= (p::string()) | (list::SimpleList) | (formula::string()) | production ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
titlePage ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
ListOfInternalLinks ::= (link::(text::string() (linktext::string())? reference::string()))+ ;
mixedType ::= (α | string())* ;
StructuredSection ::= (id::string())? title::string() ((author::string())+)? ((placeholder::generated) | normative | informative | production | (relationship::ListOfInternalLinks) | (subtopic::StructuredSection))+ ;
SimpleSection ::= (id::string())? (title::string())? ((author::string())+)? content::SimpleText ;
front-list ::= (definitions::ListOfTerms) | (abbreviations::ListOfTerms) | (languageOverview::ListOfTerms) ;
ListOfTerms ::= (id::string())? (title::string())? ((author::string())+)? (term::(name::string() definition::SimpleText))+ ;
SimpleList ::= (item::string())+ ;
--------------------slps::ldf-v8.1-xsd.bgf--------------------
SimpleText ::= insideSimpleText+ ;
front-simple-section ::= (foreword::SimpleSection) | (designGoals::SimpleSection) | (scope::SimpleSection) | (conformance::SimpleSection) | (compliance::SimpleSection) | (compatibility::SimpleSection) | (notation::SimpleSection) | (normativeReferences::SimpleSection) | (documentStructure::SimpleSection) | (whatsnew::SimpleSection) | (clause::SimpleSection) | (field::SimpleSection) ;
insideSimpleText ::= (p::string()) | (list::SimpleList) | (formula::string()) | (sample::string()) | production ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
titlePage ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
ListOfInternalLinks ::= (link::(text::string() (linktext::string())? reference::string()))+ ;
mixedType ::= (α | string())* ;
StructuredSection ::= (id::string())? title::string() ((author::string())+)? ((placeholder::generated) | normative | informative | production | (relationship::ListOfInternalLinks) | (subtopic::StructuredSection))+ ;
SimpleSection ::= (id::string())? (title::string())? ((author::string())+)? content::SimpleText ;
front-list ::= (definitions::ListOfTerms) | (abbreviations::ListOfTerms) | (languageOverview::ListOfTerms) ;
ListOfTerms ::= (id::string())? (title::string())? ((author::string())+)? (term::(name::string() definition::SimpleText))+ ;
SimpleList ::= (item::string())+ ;
--------------------slps::ldf-v9.0-xsd.bgf--------------------
SimpleText ::= insideSimpleText+ ;
front-simple-section ::= (foreword::SimpleSection) | (designGoals::SimpleSection) | (scope::SimpleSection) | (conformance::SimpleSection) | (compliance::SimpleSection) | (compatibility::SimpleSection) | (notation::SimpleSection) | (normativeReferences::SimpleSection) | (documentStructure::SimpleSection) | (whatsnew::SimpleSection) | (clause::SimpleSection) | (field::SimpleSection) ;
SimpleTable ::= (header::TableRow)* (row::TableRow)+ ;
TableRow ::= (cell::SimpleText)+ ;
insideSimpleText ::= (empty::α) | (text::mixedType) | (table::SimpleTable) | (list::SimpleList) | (formula::string()) | (sample::string()) | production ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
titlePage ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
ListOfInternalLinks ::= (link::(text::string() (linktext::string())? reference::string()))+ ;
mixedType ::= (α | string())* ;
StructuredSection ::= (id::string())? title::string() ((author::string())+)? ((placeholder::generated) | normative | informative | production | (relationship::ListOfInternalLinks) | (subtopic::StructuredSection))+ ;
SimpleSection ::= (id::string())? (title::string())? ((author::string())+)? content::SimpleText ;
front-list ::= (definitions::ListOfTerms) | (abbreviations::ListOfTerms) | (languageOverview::ListOfTerms) ;
ListOfTerms ::= (id::string())? (title::string())? ((author::string())+)? (term::(name::string() definition::SimpleText))+ ;
SimpleList ::= (item::string())+ ;
--------------------slps::ldf-v9.1-xsd.bgf--------------------
SimpleText ::= insideSimpleText+ ;
front-simple-section ::= (foreword::SimpleSection) | (designGoals::SimpleSection) | (scope::SimpleSection) | (conformance::SimpleSection) | (compliance::SimpleSection) | (compatibility::SimpleSection) | (notation::SimpleSection) | (normativeReferences::SimpleSection) | (documentStructure::SimpleSection) | (whatsnew::SimpleSection) | (clause::SimpleSection) | (field::SimpleSection) ;
SimpleTable ::= (header::TableRow)* (row::TableRow)+ ;
TableRow ::= (cell::SimpleText)+ ;
insideSimpleText ::= (empty::α) | (text::mixedType) | (table::SimpleTable) | (list::SimpleList) | (formula::string()) | (sample::string()) | production ;
runnableType ::= context::string() main::string() (argument::string())* yields::string() language::string() (version::string())? (id::string())? ;
titlePage ::= (body::body number::integer()) | ((author::string())+) topic::string() (version::string()) | (edition::string()) status::status date::string() ;
ListOfInternalLinks ::= (link::(text::string() (linktext::string())? reference::string()))+ ;
mixedType ::= (α | string())* ;
StructuredSection ::= (id::string())? title::string() ((author::string())+)? ((placeholder::generated) | normative | informative | production | (relationship::ListOfInternalLinks) | (subtopic::StructuredSection))+ ;
SimpleSection ::= (id::string())? (title::string())? ((author::string())+)? content::SimpleText ;
front-list ::= (definitions::ListOfTerms) | (abbreviations::ListOfTerms) | (languageOverview::ListOfTerms) ;
ListOfTerms ::= (id::string())? (title::string())? ((author::string())+)? (term::(name::string() definition::SimpleText))+ ;
SimpleList ::= (item::mixedType)+ ;
--------------------slps::slps-cbgf-adt.bgf--------------------
CBGFSequence ::= CBGFCommand* ;
CBGFCommand ::= (abridge_detour::(p::BGFProduction)) | (abstractize_concretize::(p::BGFProduction)) | (addH_removeH::(p::BGFProduction)) | (addV_removeV::(p::BGFProduction)) | (anonymize_deanonymize::(p::BGFProduction)) | (appear_disapper::(p::BGFProduction)) | (chain_unchain::(p::BGFProduction)) | (clone_equate::(x::string() y::string() w::XBGFScope)) | (concatT_splitT::(y::string() xs::(string()*) w::XBGFScope)) | (concretize_abstractize::(p::BGFProduction)) | (deanonymize_anonymize::(p::BGFProduction)) | (define_undefine::(ps::(BGFProduction*))) | (designate_unlabel::(p::BGFProduction)) | (detour_abridge::(p::BGFProduction)) | (deyaccify_yaccify::(ps::(BGFProduction*))) | (disappear_appear::(p::BGFProduction)) | (downgrade_upgrade::(p1::BGFProduction p2::BGFProduction)) | (eliminate_introduce::(ps::(BGFProduction*))) | (equate_clone::(x::string() y::string() w::XBGFScope)) | (extract_inline::(p::BGFProduction w::XBGFScope)) | (factor_factor::(e1::BGFExpression e2::BGFExpression w::XBGFScope)) | (fold_unfold::(x::string() w::XBGFScope)) | (horizontal_vertical::(w::XBGFScope)) | (inject_project::(p::BGFProduction)) | (inline_extract::(p::BGFProduction w::XBGFScope)) | (introduce_eliminate::(ps::(BGFProduction*))) | (iterate_assoc::(p::BGFProduction)) | (assoc_iterate::(p::BGFProduction)) | (massage_massage::(e1::BGFExpression e2::BGFExpression w::XBGFScope)) | (narrow_widen::(e1::BGFExpression e2::BGFExpression w::XBGFScope)) | (permute_permute::(p1::BGFProduction p2::BGFProduction)) | (project_inject::(p::BGFProduction)) | (redefine_redefine::(ps1::(BGFProduction*) ps2::(BGFProduction*))) | (removeH_addH::(p::BGFProduction)) | (removeV_addV::(p::BGFProduction)) | (renameL_renameL::(x::string() y::string())) | (renameN_renameN::(x::string() y::string())) | (renameS_renameS::(x::string() y::string() w::XBGFScope)) | (renameT_renameT::(x::string() y::string())) | (replace_replace::(e1::BGFExpression e2::BGFExpression w::XBGFScope)) | (reroot_reroot::(xs1::(string()*) xs2::(string()*))) | (splitN_unite::(x::string() ps::(BGFProduction*) w::XBGFScope)) | (splitT_concatT::(x::string() ys::(string()*) w::XBGFScope)) | (unchain_chain::(p::BGFProduction)) | (undefine_define::(ps::(BGFProduction*))) | (unfold_fold::(x::string() w::XBGFScope)) | (unite_splitN::(x::string() ps::(BGFProduction*) w::XBGFScope)) | (unlabel_designate::(p::BGFProduction)) | (upgrade_downgrade::(p1::BGFProduction p2::BGFProduction)) | (vertical_horizontal::(w::XBGFScope)) | (widen_narrow::(e1::BGFExpression e2::BGFExpression w::XBGFScope)) | (yaccify_deyaccify::(ps::(BGFProduction*))) ;
--------------------slps::slps-cbgf-xsd.bgf--------------------
disappear-appear ::= production ;
horizontal-vertical ::= nonterminal::nonterminal ;
unchain-chain ::= production ;
chain-unchain ::= production ;
decreasing-transformation ::= remove | disappear | narrow | downgrade | split ;
anonymize-deanonymize ::= production ;
deanonymize-anonymize ::= production ;
splitT ::= terminal::terminal into::((terminal::terminal)+) (in::scope)? ;
yaccify-deyaccify ::= production+ ;
deyaccify-yaccify ::= production+ ;
folding-unfolding-transformation ::= unfold-fold | fold-unfold | inline-extract | extract-inline | abridge-detour | detour-abridge | unchain-chain | chain-unchain ;
 folding-unfolding-transformation ::= unfold | fold | inline | extract | abridge | detour | unchain | chain ;
equate-clone ::= align::(production+) with::nonterminal in::(scope+) ;
decorative-transformation ::= designate-unlabel | unlabel-designate | deanonymize-anonymize | anonymize-deanonymize ;
 decorative-transformation ::= designate | unlabel | deanonymize | anonymize ;
abstract-revising-transformation ::= define-undefine | undefine-define | inject-project | project-inject | replace-replace ;
 abstract-revising-transformation ::= define | undefine | redefine | inject | project | replace ;
detour-abridge ::= production ;
eliminate-introduce ::= production+ ;
introduce-eliminate ::= production+ ;
add-remove ::= (vertical::production) | (horizontal::production) ;
abstractize-concretize ::= production ;
split-unite ::= add::(production+) to::(production+) in::(scope+) ;
unite-split ::= add::(production+) to::(production+) in::(scope+) ;
rename-rename ::= (label::(from::label to::label)) | (nonterminal::(from::nonterminal to::nonterminal)) | (selector::((in::label)? from::selector to::selector)) | (terminal::(from::terminal to::terminal)) ;
increasing-decreasing-transformation ::= add-remove | remove-add | appear-disappear | disappear-appear | widen-narrow | narrow-widen | upgrade-downgrade | downgrade-upgrade | unite-split | split-unite ;
widen-narrow ::= expression expression (in::scope)? ;
appear-disappear ::= production ;
define-undefine ::= production+ ;
fold-unfold ::= nonterminal::nonterminal (in::scope)? ;
extract-inline ::= production (in::scope)? ;
permute-permute ::= production production ;
inject-project ::= production ;
abridge-detour ::= production ;
replace-replace ::= expression expression (in::scope)? tag::string() ;
vertical-horizontal ::= nonterminal::nonterminal ;
concretize-abstractize ::= production ;
concrete-revising-transformation ::= abstractize-concretize | concretize-abstractize | permute-permute ;
 concrete-revising-transformation ::= abstractize | concretize | permute ;
clone-equate ::= align::(production+) with::nonterminal in::(scope+) ;
remove-add ::= (vertical::production) | (horizontal::production) ;
increasing-transformation ::= add | appear | widen | upgrade | unite ;
refactoring-transformation ::= massage-massage | factor-factor | deyaccify-yaccify | yaccify-deyaccify | eliminate-introduce | introduce-eliminate | vertical-horizontal | horizontal-vertical | assoc-iterate | iterate-assoc | equate-clone | clone-equate ;
 refactoring-transformation ::= massage | distribute | factor | deyaccify | yaccify | eliminate | introduce | import | vertical | horizontal | equate | rassoc | lassoc | iterate | splitT ;
undefine-define ::= production+ ;
unfold-fold ::= nonterminal::nonterminal (in::scope)? ;
reroot-reroot ::= from::roots to::roots ;
factor-factor ::= expression expression (in::scope)? ;
inline-extract ::= production (in::scope)? ;
narrow-widen ::= expression expression (in::scope)? ;
massage-massage ::= expression expression (in::scope)? ;
project-inject ::= production ;
downgrade-upgrade ::= production production ;
upgrade-downgrade ::= production production ;
unlabel-designate ::= production ;
designate-unlabel ::= production ;
iterate-assoc ::= production production ;
assoc-iterate ::= production production ;
--------------------slps::slps-lcf.bgf--------------------
automated-transformation ::= method::string() result::string() ;
source-grammar ::= extraction::xstring (parsing::xstring)? (evaluation::xstring)? ;
source-tree ::= extraction::xstring (evaluation::xstring)? ;
--------------------slps::slps-xbgf-adt.bgf--------------------
XBGFScope ::= (globally::ε) | (nowhere::ε) | (inlabel::(l::string())) | (notinlabel::(l::string())) | (innt::(x::string())) | (notinnt::(x::string())) | (comboscope::(w1::XBGFScope w2::XBGFScope)) ;
XBGFSequence ::= XBGFCommand* ;
XBGFCommand ::= (abridge::(p::BGFProduction)) | (abstractize::(p::BGFProduction)) | (addH::(p::BGFProduction)) | (addV::(p::BGFProduction)) | (addC::(p::BGFProduction)) | (anonymize::(p::BGFProduction)) | (appear::(p::BGFProduction)) | (bypass::ε) | (chain::(p::BGFProduction)) | (clone::(x::string() y::string() w::XBGFScope)) | (concatT::(xs::(string()*) y::string() w::XBGFScope)) | (concretize::(p::BGFProduction)) | (deanonymize::(p::BGFProduction)) | (define::(ps::(BGFProduction*))) | (designate::(p::BGFProduction)) | (detour::(p::BGFProduction)) | (deyaccify::(x::string())) | (disappear::(p::BGFProduction)) | (distribute::(w::XBGFScope)) | (downgrade::(p1::BGFProduction p2::BGFProduction)) | (eliminate::(x::string())) | (equate::(x::string() y::string())) | (extract::(p::BGFProduction w::XBGFScope)) | (factor::(e1::BGFExpression e2::BGFExpression w::XBGFScope)) | (fold::(x::string() w::XBGFScope)) | (horizontal::(w::XBGFScope)) | (importG::(ps::(BGFProduction*))) | (inject::(p::BGFProduction)) | (inline::(x::string())) | (introduce::(ps::(BGFProduction*))) | (iterate::(p::BGFProduction)) | (lassoc::(p::BGFProduction)) | (massage::(e1::BGFExpression e2::BGFExpression w::XBGFScope)) | (narrow::(e1::BGFExpression e2::BGFExpression w::XBGFScope)) | (permute::(p::BGFProduction)) | (project::(p::BGFProduction)) | (rassoc::(p::BGFProduction)) | (redefine::(ps::(BGFProduction*))) | (removeH::(p::BGFProduction)) | (removeV::(p::BGFProduction)) | (renameL::(x::string() y::string())) | (renameN::(x::string() y::string())) | (renameS::(x::string() y::string() w::XBGFScope)) | (renameT::(x::string() y::string())) | (replace::(e1::BGFExpression e2::BGFExpression w::XBGFScope)) | (reroot::(xs::(string()*))) | (splitN::(x::string() ps::(BGFProduction*) w::XBGFScope)) | (splitT::(x::string() ys::(string()*) w::XBGFScope)) | (unchain::(p::BGFProduction)) | (undefine::(xs::(string()*))) | (unfold::(x::string() w::XBGFScope)) | (unite::(x::string() y::string())) | (unlabel::(x::string())) | (upgrade::(p1::BGFProduction p2::BGFProduction)) | (vertical::(w::XBGFScope)) | (widen::(e1::BGFExpression e2::BGFExpression w::XBGFScope)) | (yaccify::(ps::(BGFProduction*))) | (atomic::(steps::(XBGFCommand*))) | (strip::(a::string())) ;
--------------------slps::slps-xbgf-xsd.bgf--------------------
decreasing-transformation ::= remove | disappear | narrow | downgrade | split ;
splitT ::= terminal::terminal into::((terminal::terminal)+) (in::scope)? ;
folding-unfolding-transformation ::= unfold | fold | inline | extract | abridge | detour | unchain | chain ;
concrete-revising-transformation ::= abstractize | concretize | permute ;
increasing-transformation ::= add | appear | widen | upgrade | unite ;
decorative-transformation ::= designate | unlabel | deanonymize | anonymize ;
abstract-revising-transformation ::= define | undefine | redefine | inject | project | replace ;
refactoring-transformation ::= massage | distribute | factor | deyaccify | yaccify | eliminate | introduce | import | vertical | horizontal | equate | rassoc | lassoc | iterate | splitT ;
--------------------slps::slps-xedd.bgf--------------------
confixMetasymbols ::= (group::ε) | (seplist-plus::ε) | (seplist-star::ε) ;
--------------------slps::slps-xldf.bgf--------------------
evolutionSequence ::= documentTransformation* ;
decreasing-transformation ::= remove | disappear | narrow | downgrade | split ;
transformGrammar ::= target::string() transformation+ (context::string())* ;
sectionRole ::= (frontMatter::ε) | (backMatter::ε) | (synopsis::ε) | (description::ε) | (syntax::ε) | (constraints::ε) | (relationship::ε) | (semantics::ε) | (default::ε) | (rationale::ε) | (example::ε) | (update::ε) | (section::ε) ;
splitT ::= terminal::terminal into::((terminal::terminal)+) (in::scope)? ;
folding-unfolding-transformation ::= unfold | fold | inline | extract | abridge | detour | unchain | chain ;
concrete-revising-transformation ::= abstractize | concretize | permute ;
increasing-transformation ::= add | appear | widen | upgrade | unite ;
decorative-transformation ::= designate | unlabel | deanonymize | anonymize ;
abstract-revising-transformation ::= define | undefine | redefine | inject | project | replace ;
refactoring-transformation ::= massage | distribute | factor | deyaccify | yaccify | eliminate | introduce | import | vertical | horizontal | equate | rassoc | lassoc | iterate | splitT ;
importSample ::= target::string() file::string() (prettyprinter::string())? ;
transformDocument ::= file::string() ;
extractSubsection ::= from::string() content::simpleText title::string() id::string() (to::string())? (role::sectionRole)? ;
changeRole ::= scope::string() from::sectionRole to::sectionRole ;
addSubsection ::= topSection | (normative | informative to::string()) ;
addFigure ::= figure::simpleFigure to::string() ;
addSection ::= frontList | lexicalSection | (placeholder::generated) | (core::structuredSection) | (annex::structuredSection) ;
documentTransformation ::= addFigure | addSection | addSubsection | append | changeRole | combine | drop | extractSubsection | hyperlinkify | insert | importGrammar | importSample | place | retitle | removeSection | transformDocument | transformGrammar ;
importGrammar ::= target::string() file::string() ;
removeSection ::= id::string() (from::string())? ;
--------------------slps::slps-xoutcome.bgf--------------------
XBGFOutcome ::= (ok::ε) | (problem::(msg::string())) | (problemXBGF::(msg::string() xbgf::XBGFCommand)) | (problemProd::(msg::string() p::BGFProduction)) | (problemProd2::(msg::string() p1::BGFProduction p2::BGFProduction)) | (problemPinProds::(msg::string() p::BGFProduction ps::(BGFProduction*))) | (problemProds::(msg::string() ps::(BGFProduction*))) | (problemProds2::(msg::string() ps1::(BGFProduction*) ps2::(BGFProduction*))) | (problemExpr::(msg::string() e::BGFExpression)) | (problemExpr2::(msg::string() e1::BGFExpression e2::BGFExpression)) | (problemStr::(msg::string() x::string())) | (problemStr2::(msg::string() x::string() y::string())) | (problemStrs::(msg::string() xs::(string()*))) | (problemScope::(msg::string() w::XBGFScope)) ;
XBGFResult ::= r::XBGFOutcome g::BGFGrammar ;
--------------------slps::xbgf-adt.bgf--------------------
XBGFScope ::= (globally::ε) | (nowhere::ε) | (inlabel::(l::string())) | (notinlabel::(l::string())) | (innt::(x::string())) | (notinnt::(x::string())) | (comboscope::(w1::XBGFScope w2::XBGFScope)) ;
XBGFSequence ::= XBGFCommand* ;
XBGFCommand ::= (abridge::(p::BGFProduction)) | (abstractize::(p::BGFProduction)) | (addH::(p::BGFProduction)) | (addV::(p::BGFProduction)) | (addC::(p::BGFProduction)) | (anonymize::(p::BGFProduction)) | (appear::(p::BGFProduction)) | (bypass::ε) | (chain::(p::BGFProduction)) | (clone::(x::string() y::string() w::XBGFScope)) | (concatT::(xs::(string()*) y::string() w::XBGFScope)) | (concretize::(p::BGFProduction)) | (deanonymize::(p::BGFProduction)) | (define::(ps::(BGFProduction*))) | (designate::(p::BGFProduction)) | (detour::(p::BGFProduction)) | (deyaccify::(x::string())) | (disappear::(p::BGFProduction)) | (distribute::(w::XBGFScope)) | (downgrade::(p1::BGFProduction p2::BGFProduction)) | (eliminate::(x::string())) | (equate::(x::string() y::string())) | (extract::(p::BGFProduction w::XBGFScope)) | (factor::(e1::BGFExpression e2::BGFExpression w::XBGFScope)) | (fold::(x::string() w::XBGFScope)) | (horizontal::(w::XBGFScope)) | (importG::(ps::(BGFProduction*))) | (inject::(p::BGFProduction)) | (inline::(x::string())) | (introduce::(ps::(BGFProduction*))) | (iterate::(p::BGFProduction)) | (lassoc::(p::BGFProduction)) | (massage::(e1::BGFExpression e2::BGFExpression w::XBGFScope)) | (narrow::(e1::BGFExpression e2::BGFExpression w::XBGFScope)) | (permute::(p::BGFProduction)) | (project::(p::BGFProduction)) | (rassoc::(p::BGFProduction)) | (redefine::(ps::(BGFProduction*))) | (removeH::(p::BGFProduction)) | (removeV::(p::BGFProduction)) | (renameL::(x::string() y::string())) | (renameN::(x::string() y::string())) | (renameS::(x::string() y::string() w::XBGFScope)) | (renameT::(x::string() y::string())) | (replace::(e1::BGFExpression e2::BGFExpression w::XBGFScope)) | (reroot::(xs::(string()*))) | (splitN::(x::string() ps::(BGFProduction*) w::XBGFScope)) | (splitT::(x::string() ys::(string()*) w::XBGFScope)) | (unchain::(p::BGFProduction)) | (undefine::(xs::(string()*))) | (unfold::(x::string() w::XBGFScope)) | (unite::(x::string() y::string())) | (unlabel::(x::string())) | (upgrade::(p1::BGFProduction p2::BGFProduction)) | (vertical::(w::XBGFScope)) | (widen::(e1::BGFExpression e2::BGFExpression w::XBGFScope)) | (yaccify::(ps::(BGFProduction*))) | (atomic::(steps::(XBGFCommand*))) | (strip::(a::string())) ;
--------------------slps::xbgf-xsd.bgf--------------------
decreasing-transformation ::= remove | disappear | narrow | downgrade | split ;
splitT ::= terminal::terminal into::((terminal::terminal)+) (in::scope)? ;
folding-unfolding-transformation ::= unfold | fold | inline | extract | abridge | detour | unchain | chain ;
concrete-revising-transformation ::= abstractize | concretize | permute ;
increasing-transformation ::= add | appear | widen | upgrade | unite ;
decorative-transformation ::= designate | unlabel | deanonymize | anonymize ;
abstract-revising-transformation ::= define | undefine | redefine | inject | project | replace ;
refactoring-transformation ::= massage | distribute | factor | deyaccify | yaccify | eliminate | introduce | import | vertical | horizontal | equate | rassoc | lassoc | iterate | splitT ;
--------------------slps::bgf-v4.1-adt.bgf--------------------
BGFProduction ::= production::(label::string() lhs::string() rhs::BGFExpression) ;
BGFExpression ::= (epsilon::ε) | (empty::ε) | (val::(v::BGFValue)) | (anything::ε) | (terminal::(t::string())) | (nonterminal::(t::string())) | (selectable::(selector::string() expr::BGFExpression)) | (sequence::(exprs::(BGFExpression*))) | (choice::(exprs::(BGFExpression*))) | (marked::(expr::BGFExpression)) | (optional::(expr::BGFExpression)) | (plus::(expr::BGFExpression)) | (star::(expr::BGFExpression)) | (starsepplus::(expr::BGFExpression sep::BGFExpression)) | (starsepstar::(expr::BGFExpression sep::BGFExpression)) ;
BGFValue ::= (string::ε) | (integer::ε) ;
--------------------slps::bgf-v4.3-adt.bgf--------------------
BGFProduction ::= production::(label::string() lhs::string() rhs::BGFExpression) ;
BGFExpression ::= (epsilon::ε) | (empty::ε) | (val::(v::BGFValue)) | (anything::ε) | (terminal::(t::string())) | (nonterminal::(t::string())) | (selectable::(selector::string() expr::BGFExpression)) | (sequence::(exprs::BGFExprList)) | (choice::(exprs::BGFExprList)) | (marked::(expr::BGFExpression)) | (optional::(expr::BGFExpression)) | (plus::(expr::BGFExpression)) | (star::(expr::BGFExpression)) | (seplistplus::(expr::BGFExpression sep::BGFExpression)) | (sepliststar::(expr::BGFExpression sep::BGFExpression)) ;
BGFGrammar ::= grammar::(roots::(string()*) prods::BGFProdList) ;
BGFProdList ::= BGFProduction* ;
BGFExprList ::= BGFExpression* ;
BGFValue ::= (string::ε) | (integer::ε) ;
--------------------slps::bgf-v5.3-adt.bgf--------------------
BGFProduction ::= production::(label::string() lhs::string() rhs::BGFExpression) ;
BGFProdSet ::= BGFProduction* ;
BGFExpression ::= (epsilon::ε) | (empty::ε) | (val::(v::BGFValue)) | (anything::ε) | (terminal::(t::string())) | (nonterminal::(t::string())) | (selectable::(selector::string() expr::BGFExpression)) | (sequence::(exprs::BGFExprList)) | (choice::(exprs::BGFExprList)) | (allof::(exprs::BGFExprList)) | (marked::(expr::BGFExpression)) | (optional::(expr::BGFExpression)) | (not::(expr::BGFExpression)) | (plus::(expr::BGFExpression)) | (star::(expr::BGFExpression)) | (seplistplus::(expr::BGFExpression sep::BGFExpression)) | (sepliststar::(expr::BGFExpression sep::BGFExpression)) ;
BGFGrammar ::= grammar::(roots::(string()*) prods::BGFProdList) ;
BGFProdList ::= BGFProduction* ;
BGFExprList ::= BGFExpression* ;
BGFValue ::= (string::ε) | (integer::ε) ;
--------------------slps::bgf-v5.4-adt.bgf--------------------
BGFExprSet ::= BGFExpression* ;
BGFProduction ::= production::(label::string() lhs::string() rhs::BGFExpression) ;
BGFProdSet ::= BGFProduction* ;
BGFExpression ::= (epsilon::ε) | (empty::ε) | (val::(v::BGFValue)) | (anything::ε) | (terminal::(t::string())) | (nonterminal::(t::string())) | (selectable::(selector::string() expr::BGFExpression)) | (sequence::(exprs::BGFExprList)) | (choice::(exprs::BGFExprList)) | (allof::(exprs::BGFExprList)) | (marked::(expr::BGFExpression)) | (optional::(expr::BGFExpression)) | (not::(expr::BGFExpression)) | (plus::(expr::BGFExpression)) | (star::(expr::BGFExpression)) | (seplistplus::(expr::BGFExpression sep::BGFExpression)) | (sepliststar::(expr::BGFExpression sep::BGFExpression)) ;
BGFGrammar ::= grammar::(roots::(string()*) prods::BGFProdList) ;
BGFProdList ::= BGFProduction* ;
BGFExprList ::= BGFExpression* ;
SGrammar ::= roots::(string()*) prods::((string() BGFProdSet)*) ;
BGFValue ::= (string::ε) | (integer::ε) ;
--------------------slps::xbgf-xoutcome.bgf--------------------
XBGFOutcome ::= (ok::ε) | (problem::(msg::string())) | (problemXBGF::(msg::string() xbgf::XBGFCommand)) | (problemProd::(msg::string() p::BGFProduction)) | (problemProd2::(msg::string() p1::BGFProduction p2::BGFProduction)) | (problemPinProds::(msg::string() p::BGFProduction ps::(BGFProduction*))) | (problemProds::(msg::string() ps::(BGFProduction*))) | (problemProds2::(msg::string() ps1::(BGFProduction*) ps2::(BGFProduction*))) | (problemExpr::(msg::string() e::BGFExpression)) | (problemExpr2::(msg::string() e1::BGFExpression e2::BGFExpression)) | (problemStr::(msg::string() x::string())) | (problemStr2::(msg::string() x::string() y::string())) | (problemStrs::(msg::string() xs::(string()*))) | (problemScope::(msg::string() w::XBGFScope)) ;
XBGFResult ::= r::XBGFOutcome g::BGFGrammar ;
--------------------develop::ant.bgf--------------------
DocumentationTask ::= Javadoc ;
InExcludes ::= Includes ;
 InExcludes ::= Excludes ;
 InExcludes ::= IncludesFile ;
 InExcludes ::= ExcludesFile ;
ExecutionTask ::= Exec ;
 ExecutionTask ::= Java ;
ClassPath ::= refid::String (pathElement::PathElement)+ (fileset::FileSet)+ ;
PropertyValue ::= value::String ;
FileList ::= dir::String files::String ;
CompileTask ::= Javac ;
PropertyEnv ::= environment::String ;
FiltersFile ::= file::String ;
PathElement ::= path::String location::String ;
ExcludesFile ::= name::String ifCondition::String unless::String ;
MiscellaneousTask ::= Echo ;
 MiscellaneousTask ::= Tstamp ;
PatternSet ::= (inexcludes::InExcludes)+ ;
PropertyFile ::= file::String ;
PreDefinedTask ::= ExecutionTask ;
 PreDefinedTask ::= MiscellaneousTask ;
 PreDefinedTask ::= CompileTask ;
 PreDefinedTask ::= DocumentationTask ;
 PreDefinedTask ::= ArchiveTask ;
 PreDefinedTask ::= FileTask ;
FilterSet ::= starttoken::String endtoken::String (filter::Filter)+ (filtersfile::FiltersFile)+ ;
PropertyLocation ::= location::String ;
ArchiveTask ::= Jar ;
IncludesFile ::= name::String ifCondition::String unless::String ;
FormatTstamp ::= property::String pattern::String offset::String unit::String locale::String ;
FileSet ::= dir::String (patternset::PatternSet)+ (include::Includes)+ (exclude::Excludes)+ ;
NewTask ::= taskName::TaskDef (attributes::Attribut)+ ;
FileTask ::= Mkdir ;
 FileTask ::= Copy ;
 FileTask ::= Delete ;
TaskDef ::= name::String classname::String ;
PropertyName ::= PropertyValue ;
 PropertyName ::= PropertyLocation ;
--------------------develop::java-project.bgf--------------------
JavaElement ::= Type ;
 JavaElement ::= Field ;
 JavaElement ::= Method ;
MEMBER_KIND ::= (class::ε) | (enum::ε) | (interface::ε) | (Annotation::ε) ;
CompilationUnit ::= (importDeclaration::ImportDeclaration)+ (ownedType::Type)+ declaration::PackageDeclaration ;
JavaProject ::= (ownedPackageFragment::PackageFragment)+ ;
PackageFragment ::= (ownedCompilationUnit::CompilationUnit)+ ;
ImportDeclaration ::= name::String ;
PackageDeclaration ::= name::String ;
NamedElement ::= JavaProject ;
 NamedElement ::= PackageFragment ;
 NamedElement ::= CompilationUnit ;
 NamedElement ::= ImportDeclaration ;
 NamedElement ::= JavaElement ;
 NamedElement ::= PackageDeclaration ;
--------------------develop::make.bgf--------------------
ShellLine ::= command::String display::Boolean ruleShellLine::Rule ;
FileDep ::= name::String ;
RuleDep ::= ruledep::Rule ;
--------------------develop::bugzilla.bgf--------------------
PriorityType ::= (pt_null::ε) | (pt_P1::ε) | (pt_P2::ε) | (pt_P3::ε) | (pt_P4::ε) | (pt_P5::ε) ;
LongDesc ::= isPrivate::Boolean who::String bug_when::String thetext::String ;
StringElt ::= Keywords ;
 StringElt ::= Dependson ;
 StringElt ::= Blocks ;
 StringElt ::= Cc ;
StatusType ::= (st_null::ε) | (st_UNCONFIRMED::ε) | (st_NEW::ε) | (st_ASSIGNED::ε) | (st_REOPENED::ε) | (st_RESOLVED::ε) | (st_VERIFIED::ε) | (st_CLOSED::ε) ;
OperatingSystemType ::= (ost_null::ε) | (ost_all::ε) | (ost_Windows 3.1::ε) | (ost_Windows 95::ε) | (ost_Windows 98::ε) | (ost_Windows ME::ε) | (ost_Windows 2000::ε) | (ost_Windows NT::ε) | (ost_Windows XP::ε) | (ost_Windows Vista::ε) | (ost_Windows Server 2003::ε) | (ost_MacSystem 7::ε) | (ost_MacSystem 7.5::ε) | (ost_MacSystem 7.6.1::ε) | (ost_MacSystem 8.0::ε) | (ost_MacSystem 8.5::ε) | (ost_MacSystem 8.6::ε) | (ost_MacSystem 9.x::ε) | (ost_Mac OS X 10.0::ε) | (ost_Mac OS X 10.1::ε) | (ost_Mac OS X 10.2::ε) | (ost_Mac OS X 10.3::ε) | (ost_Linux::ε) | (ost_BDS/OS::ε) | (ost_FreeBSD::ε) | (ost_NetBSD::ε) | (ost_OpenBSD::ε) | (ost_AIX::ε) | (ost_BeOS::ε) | (ost_HP-UX::ε) | (ost_IRIX::ε) | (ost_Neutrino::ε) | (ost_OpenVMS::ε) | (ost_OS/2::ε) | (ost_OSF/1::ε) | (ost_Solaris::ε) | (ost_SunOS::ε) | (ost_other::ε) ;
SeverityType ::= (st_null::ε) | (st_blocker::ε) | (st_critical::ε) | (st_major::ε) | (st_normal::ε) | (st_minor::ε) | (st_trivial::ε) | (st_enhancement::ε) ;
ResolutionType ::= (rt_null::ε) | (rt_FIXED::ε) | (rt_INVALID::ε) | (rt_WONTFIX::ε) | (rt_LATER::ε) | (rt_REMIND::ε) | (rt_DUPLICATE::ε) | (rt_WORKSFORME::ε) | (rt_MOVED::ε) ;
ErrorType ::= (et_null::ε) | (et_NotFound::ε) | (et_NotPermitted::ε) | (et_InvalidBugId::ε) ;
BugzillaRoot ::= version::String urlbase::String maintainer::String exporter::String (bugs::Bug)+ ;
ReportedPlatformType ::= (rpt_null::ε) | (rpt_all::ε) | (rpt_DEC::ε) | (rpt_HP::ε) | (rpt_Macintosh::ε) | (rpt_PC::ε) | (rpt_SGI::ε) | (rpt_Sun::ε) | (rpt_other::ε) ;
--------------------pico::rascal.bgf--------------------
IdType ::= [idtype] id::Id ":" t::Type ;
--------------------pico::sdf.bgf--------------------
STATEMENT ::= (PICO-ID ":=" EXP) | ("if" EXP "then" (STATEMENT (";" STATEMENT)*)? "else" (STATEMENT (";" STATEMENT)*)? "fi") | ("while" EXP "do" (STATEMENT (";" STATEMENT)*)? "od") ;
EXP ::= PICO-ID | NatCon | StrCon | (EXP "+" EXP) | (EXP "-" EXP) | (EXP "||" EXP) | ("(" EXP ")") ;
ID-TYPE ::= PICO-ID ":" TYPE ;
TYPE ::= "natural" | "string" | "nil-type" ;
DECLS ::= "declare" (ID-TYPE ("," ID-TYPE)*)? ";" ;
PROGRAM ::= "begin" DECLS (STATEMENT (";" STATEMENT)*)? "end" ;
