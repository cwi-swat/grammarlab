--------------------ada::cordy-hyaric.bgf--------------------
generic_actual_part ::= "(" {generic_association ","}+ ")" ;
use_type_clause ::= "use" "type" {used_subtype_mark ","}+ semi ;
formal_package_actual_part ::= ("(" others_arrow? "<>" ")") | (generic_actual_part?) | ("(" {formal_package_association ","}+ comma_others_arrow_null? ")") ;
unconstrained_array_definition ::= "array" "(" {index_subtype_definition ","}+ ")" "of" component_definition ;
actual_parameter_part ::= "(" {parameter_association ","}+ ")" ;
nonlimited_with_clause ::= "private"? "with" {with_name ","}+ semi ;
named_array_aggregate ::= "(" {array_component_association ","}+ ")" ;
pragma_arguments ::= "(" {pragma_argument_association ","}+ ")" ;
positional_array_aggregate ::= "(" {index_expression ","}+ comma_others* ")" ;
indexed_component_component ::= "(" {index_expression ","}+ ")" ;
defining_identifier_list ::= {defining_identifier ","}+ ;
record_component_association_list ::= ({record_component_association ","}+) | ("null" "record") ;
index_constraint ::= "(" {discrete_range ","}+ ")" ;
indexed_slice_type_conv_or_function_call_component ::= "(" {index_or_parameter_value ","}+ ")" ;
limited_with_clause ::= "limited" "private"? "with" {with_name ","}+ semi ;
constrained_array_definition ::= "array" "(" {discrete_subtype_definition ","}+ ")" "of" component_definition ;
abort_statement ::= "abort" {abort_name ","}+ semi ;
use_package_clause ::= "use" {used_name ","}+ semi ;
enumeration_type_definition ::= "(" {enumeration_literal_specification ","}+ ")" ;
--------------------c::lankamp.bgf--------------------
PrototypeParameters ::= "void" ;
 PrototypeParameters ::= {PrototypeParameter ","}+ MoreParameters? ;
Declaration ::= [DeclarationWithoutInitDecls] specs::(Specifier+) ";" ;
 Declaration ::= [DeclarationWithInitDecls] specs::(Specifier+) initDeclarators::({InitDeclarator ","}+) ";" ;
Parameters ::= {Parameter ","}+ MoreParameters? ;
 Parameters ::= "void" ;
GlobalDeclaration ::= [GlobalDeclarationWithoutInitDecls] specs::(Specifier+) ";" ;
 GlobalDeclaration ::= [GlobalDeclarationWithInitDecls] specs::(Specifier*) initDeclarators::({InitDeclarator ","}+) ";" ;
StructDeclaration ::= [StructDeclWithoutDecl] specs::(Specifier+) ";" ;
 StructDeclaration ::= [StructDeclWithDecl] specs::(Specifier+) {StructDeclarator ","}+ ";" ;
TypeSpecifier ::= [StructDecl] "struct" Identifier "{" StructDeclaration* "}" ;
 TypeSpecifier ::= [Union] "union" Identifier ;
 TypeSpecifier ::= [Int] "int" ;
 TypeSpecifier ::= [Void] "void" ;
 TypeSpecifier ::= [StructAnonDecl] "struct" "{" StructDeclaration* "}" ;
 TypeSpecifier ::= [Short] "short" ;
 TypeSpecifier ::= [Identifier] Identifier ;
 TypeSpecifier ::= [EnumDecl] "enum" Identifier "{" {Enumerator ","}+ "}" ;
 TypeSpecifier ::= "signed" ;
 TypeSpecifier ::= [UnionDecl] "union" Identifier "{" StructDeclaration* "}" ;
 TypeSpecifier ::= [UnionAnonDecl] "union" "{" StructDeclaration* "}" ;
 TypeSpecifier ::= [Enum] "enum" Identifier ;
 TypeSpecifier ::= [Struct] "struct" Identifier ;
 TypeSpecifier ::= "unsigned" ;
 TypeSpecifier ::= [Long] "long" ;
 TypeSpecifier ::= [Double] "double" ;
 TypeSpecifier ::= [Float] "float" ;
 TypeSpecifier ::= [EnumAnonDecl] "enum" "{" {Enumerator ","}+ "}" ;
 TypeSpecifier ::= [Char] "char" ;
Initializer ::= "{" {Initializer ","}+ ","? "}" ;
 Initializer ::= NonCommaExpression ;
--------------------cs::csharp-zaytsev.bgf--------------------
attribute-list ::= {attribute ","}+ ;
enum-body ::= ("{" "}") | ("{" {enum-member-declaration ","}+ ","? "}") ;
array-initializer ::= ("{" "}") | ("{" {variable-initializer ","}+ ","? "}") ;
local-variable-declaration ::= type {variable-declarator ","}+ ;
qualified-identifier ::= {lex-csharp/identifier "."}+ ;
event-declaration ::= (attributes event-modifier* "event" type {variable-declarator ","}+ ";") | (attributes event-modifier* "event" type qualified-identifier "{" event-accessor-declarations "}") ;
field-declaration ::= attributes field-modifier* type {variable-declarator ","}+ ";" ;
statement-expression-list ::= {statement-expression ","}+ ;
fixed-parameters ::= {fixed-parameter ","}+ ;
local-constant-declaration ::= "const" type {constant-declarator ","}+ ;
expression-list ::= {expression ","}+ ;
constant-declaration ::= attributes constant-modifier* "const" type {constant-declarator ","}+ ";" ;
qualified-identifier-list ::= {qualified-identifier ","}+ ;
--------------------eiffel::iso-25436-2006.bgf--------------------
Rename_list ::= {Rename_pair ","}+ ;
Entity_declaration_list ::= {Entity_declaration_group ";"}+ ;
Key_list ::= {Manifest_string ","}+ ;
Converter_list ::= {Converter ","}+ ;
Formal_generic_list ::= {Formal_generic ","}+ ;
Agent_actual_list ::= {Agent_actual ","}+ ;
Identifier_list ::= {Identifier ","}+ ;
Parent_list ::= {Parent ";"}+ ;
Choices ::= {Choice ","}+ ;
Actual_list ::= {Expression ","}+ ;
Note_values ::= {Note_item ","}+ ;
External_file_list ::= {External_file ","}+ ;
String_content ::= {Simple_string Line_wrapping_part}+ ;
Creation_procedure_list ::= {Creation_procedure ","}+ ;
New_export_list ::= {New_export_item ";"}+ ;
Then_part_list ::= {Then_part "elseif"}+ ;
Feature_list ::= {Feature_name ","}+ ;
New_feature_list ::= {New_feature ","}+ ;
Class_list ::= {Class_name ","}+ ;
Type_list ::= {Type ","}+ ;
Constraint_list ::= {Single_constraint ","}+ ;
--------------------java::java-5-landman.bgf--------------------
ConstantDec ::= [constantDec] Type {VarDec ","}+ ";" ;
Throws ::= [throwsDec] "throws" {ExceptionType ","}+ ;
Interfaces ::= [implementsDec] "implements" {InterfaceType ","}+ ;
FieldDec ::= [fieldDec] Type {VarDec ","}+ ";" ;
TypeArgs ::= [typeArgs] "<" {ActualTypeArg ","}+ ">" ;
LocalVarDec ::= [localVarDec] Type {VarDec ","}+ ;
TypeBound ::= [typeBound] "extends" {ClassOrInterfaceType "&"}+ ;
ExtendsInterfaces ::= [extendsInterfaces] "extends" {InterfaceType ","}+ ;
PackageName ::= [packageName] {Id "."}+ ;
TypeParams ::= [typeParams] "<" {TypeParam ","}+ ">" ;
--------------------php::cordy.bgf--------------------
InterfaceExtendsClause ::= "extends" {Name ","}+ ;
ImplementsClause ::= "implements" {Name ","}+ NL ;
GlobalStaticStatement ::= ("global" {CVar ","}+ ";" NL) | ("static" {StaticVariable ","}+ ";" NL) ;
EchoStatement ::= "echo" {Expr ","}+ ";"? NL ;
UnsetStatement ::= "unset" "(" {ObjectCVar ","}+ ")" ";" NL ;
InternalFunction ::= ("new" Primary) | ("clone" Primary) | ("isset" "(" {ObjectCVar ","}+ ")") | ("empty" "(" ObjectCVar ")") | ("intval" "(" ObjectCVar ")") | ("eval" "(" Expr ")") | ("exit" exit_value?) | ("include" Expr) | ("include_once" Expr) | ("require" Expr) | ("require_once" Expr) ;
PrintStatement ::= "print" {Expr ","}+ ";"? NL ;
ClassMember ::= (VarModifiers? FunctionDecl) | (VarModifiers? "abstract" VarModifiers? "function" "&"? id "(" {Param ","}* ")" ";" NL) | ("var" {InstanceVariable ","}+ ";" NL) | ("const" id "=" StaticScalar ";" NL) | (VarModifiers {InstanceVariable ","}+ ";" NL) ;
--------------------markup::cnf.bgf--------------------
Dimacs ::= prologue::Prologue lines::({Line "\n"}+) "\n" ;
--------------------markup::csv-rascal-concrete.bgf--------------------
Record ::= [record] {Field ","}+ ;
--------------------fl::rascal-c.bgf--------------------
Program ::= [prg] functions::({Function "\n"}+) ;
--------------------metasyntax::lll-kort.bgf--------------------
disjunction ::= {conjunction "|"}+ ;
--------------------metasyntax::aterms-rascal.bgf--------------------
Annotation ::= [Default] "{" {ATerm ","}+ "}" ;
ATerm ::= [Appl] AFun "(" {ATerm ","}+ ")" ;
 ATerm ::= [Real] RealCon ;
 ATerm ::= [List] "[" {ATerm ","}* "]" ;
 ATerm ::= [Annotated] ATerm Annotation ;
 ATerm ::= [Placeholder] "<" ATerm ">" ;
 ATerm ::= [Int] IntCon ;
 ATerm ::= [Fun] AFun ;
--------------------metasyntax::sdf-rascal.bgf--------------------
Annotation ::= [Default] "{" {ATerm ","}+ "}" ;
ATerm ::= [Real] RealCon ;
 ATerm ::= [Appl] AFun "(" {ATerm ","}+ ")" ;
 ATerm ::= [Annotated] ATerm Annotation ;
 ATerm ::= [Placeholder] "<" ATerm ">" ;
 ATerm ::= [Int] IntCon ;
 ATerm ::= [Fun] AFun ;
 ATerm ::= [List] "[" {ATerm ","}* "]" ;
Sym ::= [Empty] "(" ")" ;
 Sym ::= [Lit] StrCon ;
 Sym ::= [Opt] Sym "?" ;
 Sym ::= [Seq] "(" Sym Sym+ ")" ;
 Sym ::= [Bracket] "(" Sym ")" ;
 Sym ::= [CILit] SingleQuotedStrCon ;
 Sym ::= [Varsym] "<" Sym "-VAR" ">" ;
 Sym ::= [Sort] Sort ;
 Sym ::= [Lex] "<" Sym "-LEX" ">" ;
 Sym ::= [Layout] "LAYOUT" ;
 Sym ::= [CF] "<" Sym "-CF" ">" ;
 Sym ::= [ParameterizedSort] Sort "[[" {Sym ","}+ "]]" ;
 Sym ::= [IterStar] Sym "*" ;
 Sym ::= [IterStarSep] "{" Sym Sym "}" "*" ;
 Sym ::= [Iter] Sym "+" ;
 Sym ::= [Class] Class ;
 Sym ::= [IterSep] "{" Sym Sym "}" "+" ;
 Sym ::= [Alt] Sym "|" Sym ;
 Sym ::= [Label] Label ":" Sym ;
Priority ::= [Chain] {Group ">"}+ ;
 Priority ::= [Assoc] Group Assoc Group ;
ArgumentIndicator ::= [Default] "<" {NatCon ","}+ ">" ;
