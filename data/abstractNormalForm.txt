--------------------ada::kellogg.bgf--------------------
component_items ::= (pragma | comp_decl)+ ;
prot_op_bodies_opt ::= (entry_body | subprog_decl_or_body | pragma)* ;
private_opt ::= PRIVATE? ;
accept_alternative ::= accept_stmt stmts_opt ;
label_name ::= IDENTIFIER ;
c_name_list ::= compound_name (COMMA compound_name)* ;
pragma_args_opt ::= (LPAREN pragma_arg (COMMA pragma_arg)* RPAREN)? ;
delay_alternative ::= delay_stmt stmts_opt ;
discriminant_specifications ::= discriminant_specification (SEMI discriminant_specification)* ;
parameter_specification ::= def_ids_colon mode_opt subtype_mark init_opt ;
defining_identifier_list ::= IDENTIFIER (COMMA IDENTIFIER)* ;
selector_name ::= IDENTIFIER ;
entry_barrier ::= WHEN condition ;
aliased_constant_opt ::= ALIASED? CONSTANT? ;
body_is ::= BODY def_id IS ;
spec_decl_part ::= (IS generic_inst | pkg_spec_part) | renames SEMI ;
statements ::= (pragma | statement)+ ;
empty_discrim_opt ::= ε ;
separate_or_abstract ::= SEPARATE | ABSTRACT ;
association_head ::= selector_name (PIPE selector_name)* RIGHT_SHAFT ;
comp_decl ::= def_ids_colon component_subtype_def init_opt SEMI ;
reverse_opt ::= REVERSE? ;
pragma_arg ::= (IDENTIFIER RIGHT_SHAFT)? expression ;
enum_id_s ::= enumeration_literal_specification (COMMA enumeration_literal_specification)* ;
or_select_opt ::= (OR guard_opt select_alternative)* ;
declarative_part ::= (pragma | declarative_item)* ;
enumeration_aggregate ::= parenth_values ;
discriminant_direct_name ::= IDENTIFIER ;
elsifs_opt ::= (ELSIF cond_clause)* ;
pkg_body_part ::= declarative_part block_body_opt ;
identifier_colon_opt ::= (IDENTIFIER COLON)? ;
except_choice_s ::= exception_choice (PIPE exception_choice)* ;
iteration_scheme_opt ::= ((WHILE condition) | (FOR IDENTIFIER IN reverse_opt discrete_subtype_definition))? ;
basic_declarative_items ::= (basic_decl_item | pragma)+ ;
formal_part_opt ::= (LPAREN parameter_specification (SEMI parameter_specification)* RPAREN)? ;
operator_call_tail ::= LPAREN value_s RPAREN ;
private_task_items_opt ::= (PRIVATE pragma* entrydecls_repspecs_opt)? ;
extension_opt ::= (WITH (NuLL RECORD) | value_s)? ;
in_access_opt ::= (IN | ACCESS)? ;
formal_package_actual_part_opt ::= (LPAREN BOX | defining_identifier_list RPAREN)? ;
basic_declarative_items_opt ::= (basic_decl_item | pragma)* ;
generic_inst ::= NEW compound_name (LPAREN value_s RPAREN)? ;
else_opt ::= (ELSE statements)? ;
range_or_mark ::= range | subtype_mark ;
protected_opt ::= PROTECTED? ;
choice ::= OTHERS | discrete_with_range | expression ;
compound_name ::= IDENTIFIER (DOT IDENTIFIER)* ;
attribute_id ::= RANGE | DIGITS | DELTA | ACCESS | IDENTIFIER ;
access_type_definition ::= ACCESS (protected_opt (PROCEDURE formal_part_opt) | (FUNCTION func_formal_part_opt RETURN subtype_mark)) | (constant_all_opt subtype_ind) ;
discrim_part_text ::= LPAREN BOX | discriminant_specifications RPAREN ;
index_or_discrete_range_s ::= index_or_discrete_range (COMMA index_or_discrete_range)* ;
subtype_ind ::= subtype_mark constraint_opt ;
range_constraint_opt ::= range_constraint? ;
array_type_definition ::= ARRAY LPAREN index_or_discrete_range_s RPAREN OF component_subtype_def ;
exception_choice ::= compound_name | OTHERS ;
block ::= declare_opt block_body ;
known_discrim_part ::= LPAREN discriminant_specifications RPAREN ;
generic_subp_inst ::= IS generic_inst SEMI ;
prot_member_decl_s ::= (prot_op_decl | comp_decl)* ;
discrete_with_range ::= mark_with_constraint | range ;
call_or_assignment ::= name (ASSIGN expression) | ε SEMI ;
abortable_part ::= stmts_opt ;
discrim_part_opt ::= discrim_part_text? ;
mark_with_constraint ::= subtype_mark range_constraint ;
protected_definition ::= IS prot_op_decl_s (PRIVATE prot_member_decl_s)? end_id_opt ;
loop_stmt ::= iteration_scheme_opt LOOP statements END LOOP ;
parenth_values ::= LPAREN value (COMMA value)* RPAREN ;
compilation_unit ::= context_items_opt library_item | subunit pragma* ;
component_subtype_def ::= aliased_opt subtype_ind ;
entry_call_stmt ::= name SEMI ;
enumeration_literal_specification ::= IDENTIFIER | CHARACTER_LITERAL ;
constant_all_opt ::= (CONSTANT | ALL)? ;
task_items_opt ::= pragma* entrydecls_repspecs_opt ;
entry_call_alternative ::= entry_call_stmt stmts_opt ;
align_opt ::= (AT MOD expression SEMI)? ;
abstract_tagged_limited_opt ::= ((ABSTRACT TAGGED) | TAGGED)? LIMITED? ;
entrydecls_repspecs_opt ::= (entry_declaration (pragma | rep_spec)*)* ;
discrete_range ::= range | subtype_ind ;
end_id_opt ::= END id_opt ;
subtype_mark ::= compound_name (TIC attribute_id)? ;
body_part ::= declarative_part block_body end_id_opt ;
statement ::= def_label_opt null_stmt | exit_stmt | return_stmt | goto_stmt | delay_stmt | abort_stmt | raise_stmt | requeue_stmt | accept_stmt | select_stmt | if_stmt | case_stmt | (loop_stmt SEMI) | (block END SEMI) | (statement_identifier (loop_stmt id_opt SEMI) | (block end_id_opt SEMI)) | call_or_assignment ;
ranged_expr ::= expression ((DOT_DOT simple_expression) | (RANGE range))? ;
term ::= factor ((STAR factor) | (DIV factor) | (MOD factor) | (REM factor))* ;
prot_op_decl_s ::= prot_op_decl* ;
aliased_opt ::= ALIASED? ;
alternative_s ::= case_statement_alternative+ ;
declare_opt ::= (DECLARE declarative_part)? ;
def_ids_colon ::= defining_identifier_list COLON ;
access_opt ::= ACCESS? ;
function_tail ::= func_formal_part_opt RETURN subtype_mark ;
choice_s ::= choice (PIPE choice)* ;
entry_body_formal_part ::= entry_index_spec_opt formal_part_opt ;
until_opt ::= UNTIL? ;
func_param ::= def_ids_colon in_access_opt subtype_mark init_opt ;
constraint_opt ::= (range_constraint | digits_constraint | delta_constraint | index_constraint | discriminant_constraint)? ;
generic_formal_part_opt ::= (use_clause | pragma | generic_formal_parameter)* ;
selective_accept ::= guard_opt select_alternative or_select_opt else_opt ;
simple_expression ::= signed_term ((PLUS signed_term) | (MINUS signed_term) | (CONCAT signed_term))* ;
pkg_spec_part ::= basic_declarative_items_opt (PRIVATE basic_declarative_items_opt)? end_id_opt ;
discrete_subtype_definition ::= range | subtype_ind ;
range ::= range_dots | range_attrib_ref ;
func_formal_part_opt ::= (LPAREN func_param (SEMI func_param)* RPAREN)? ;
pragma ::= PRAGMA IDENTIFIER pragma_args_opt SEMI ;
subprogram_default_opt ::= (IS BOX | name)? ;
variant_s ::= variant+ ;
local_enum_name ::= IDENTIFIER ;
def_label_opt ::= (LT_LT IDENTIFIER GT_GT)? ;
index_or_discrete_range ::= simple_expression ((DOT_DOT simple_expression) | (RANGE BOX | range))? ;
value_s ::= value (COMMA value)* ;
discriminant_specification ::= def_ids_colon access_opt subtype_mark init_opt ;
context_items_opt ::= pragma* (with_clause (use_clause | pragma)*)* ;
separate ::= SEPARATE ;
discriminant_association ::= selector_names_opt expression ;
except_handler_part_opt ::= (EXCEPTION exception_handler+)? ;
ranged_expr_s ::= ranged_expr (PIPE ranged_expr)* ;
range_constraint ::= RANGE range ;
handled_stmt_s ::= statements except_handler_part_opt ;
stmts_opt ::= (pragma | statement)* ;
condition ::= expression ;
guard_opt ::= (WHEN condition RIGHT_SHAFT pragma*)? ;
triggering_alternative ::= delay_stmt | entry_call_stmt stmts_opt ;
mode_opt ::= ((IN OUT?) | OUT | ACCESS)? ;
library_item ::= private_opt lib_pkg_spec_or_body | subprog_decl_or_rename_or_inst_or_body | generic_decl ;
abstract_opt ::= ABSTRACT? ;
discrim_part ::= discrim_part_text ;
empty_component_items ::= ε ;
range_dots ::= simple_expression DOT_DOT simple_expression ;
block_body_opt ::= (BEGIN handled_stmt_s)? ;
comp_loc_s ::= (pragma | (subtype_mark AT expression RANGE range SEMI))* ;
init_opt ::= (ASSIGN expression)? ;
--------------------ada::kempe.bgf--------------------
context_clause ::= context_item* ;
first_bit ::= static_simple_expression ;
numeric_literal ::= decimal_literal | based_literal ;
generic_formal_parameter_declaration ::= formal_object_declaration | formal_type_declaration | formal_subprogram_declaration | formal_package_declaration ;
defining_designator ::= defining_program_unit_name | defining_operator_symbol ;
enumeration_literal_specification ::= defining_identifier | defining_character_literal ;
library_unit_body ::= subprogram_body | package_body ;
entry_call_alternative ::= entry_call_statement sequence_of_statements? ;
statement_identifier ::= direct_name ;
type_definition ::= enumeration_type_definition | integer_type_definition | real_type_definition | array_type_definition | record_type_definition | access_type_definition | derived_type_definition ;
discrete_range ::= discrete_subtype_indication | range ;
integer_type_definition ::= signed_integer_type_definition | modular_type_definition ;
accept_alternative ::= accept_statement sequence_of_statements? ;
type_declaration ::= full_type_declaration | incomplete_type_declaration | private_type_declaration | private_extension_declaration ;
subtype_mark ::= subtype_name ;
delay_alternative ::= delay_statement sequence_of_statements? ;
formal_access_type_definition ::= access_type_definition ;
select_statement ::= selective_accept | timed_entry_call | conditional_entry_call | asynchronous_select ;
term ::= factor (multiplying_operator factor)* ;
selector_name ::= identifier | character_literal | operator_symbol ;
select_alternative ::= accept_alternative | delay_alternative | terminate_alternative ;
basic_declaration ::= type_declaration | subtype_declaration | object_declaration | number_declaration | subprogram_declaration | abstract_subprogram_declaration | package_declaration | renaming_declaration | exception_declaration | generic_declaration | generic_instantiation ;
declarative_item ::= basic_declarative_item | body ;
last_bit ::= static_simple_expression ;
explicit_actual_parameter ::= expression | variable_name ;
ancestor_part ::= expression | subtype_mark ;
constraint ::= scalar_constraint | composite_constraint ;
compound_statement ::= if_statement | case_statement | loop_statement | block_statement | accept_statement | select_statement ;
array_aggregate ::= positional_array_aggregate | named_array_aggregate ;
basic_declarative_item ::= basic_declaration | representation_clause | use_clause ;
real_type_definition ::= floating_point_definition | fixed_point_definition ;
default_expression ::= expression ;
defining_character_literal ::= character_literal ;
protected_operation_declaration ::= subprogram_declaration | entry_declaration | representation_clause ;
base ::= numeral ;
choice_parameter_specification ::= defining_identifier ;
sequence_of_statements ::= statement statement* ;
fixed_point_definition ::= ordinary_fixed_point_definition | decimal_fixed_point_definition ;
explicit_generic_actual_parameter ::= expression | variable_name | subprogram_name | entry_name | subtype_mark | package_instance_name ;
letter_or_digit ::= identifier_letter | digit ;
default_name ::= name ;
declarative_part ::= declarative_item* ;
enumeration_aggregate ::= array_aggregate ;
entry_index ::= expression ;
simple_expression ::= unary_adding_operator? term (binary_adding_operator term)* ;
library_unit_declaration ::= subprogram_declaration | package_declaration | generic_declaration | generic_instantiation ;
compilation ::= compilation_unit* ;
formal_array_type_definition ::= array_type_definition ;
subtype_indication ::= subtype_mark constraint? ;
aggregate ::= record_aggregate | extension_aggregate | array_aggregate ;
renaming_declaration ::= object_renaming_declaration | exception_renaming_declaration | package_renaming_declaration | subprogram_renaming_declaration | generic_renaming_declaration ;
delay_statement ::= delay_until_statement | delay_relative_statement ;
proper_body ::= subprogram_body | package_body | task_body | protected_body ;
body_stub ::= subprogram_body_stub | package_body_stub | task_body_stub | protected_body_stub ;
position ::= static_expression ;
identifier ::= identifier_letter (underline? letter_or_digit)* ;
character ::= graphic_character | format_effector | other_control_function ;
formal_type_definition ::= formal_private_type_definition | formal_derived_type_definition | formal_discrete_type_definition | formal_signed_integer_type_definition | formal_modular_type_definition | formal_floating_point_definition | formal_ordinary_fixed_point_definition | formal_decimal_fixed_point_definition | formal_array_type_definition | formal_access_type_definition ;
use_clause ::= use_package_clause | use_type_clause ;
protected_element_declaration ::= protected_operation_declaration | component_declaration ;
context_item ::= with_clause | use_clause ;
simple_statement ::= null_statement | assignment_statement | exit_statement | goto_statement | procedure_call_statement | return_statement | entry_call_statement | requeue_statement | delay_statement | abort_statement | raise_statement | code_statement ;
body ::= proper_body | body_stub ;
representation_clause ::= attribute_definition_clause | enumeration_representation_clause | record_representation_clause | at_clause ;
direct_name ::= identifier | operator_symbol ;
numeral ::= digit (underline? digit)* ;
access_type_definition ::= access_to_object_definition | access_to_subprogram_definition ;
protected_operation_item ::= subprogram_declaration | subprogram_body | entry_body | representation_clause ;
condition ::= boolean_expression ;
triggering_statement ::= entry_call_statement | delay_statement ;
triggering_alternative ::= triggering_statement sequence_of_statements? ;
composite_constraint ::= index_constraint | discriminant_constraint ;
component_item ::= component_declaration | representation_clause ;
parameter_profile ::= formal_part? ;
operator_symbol ::= string_literal ;
generic_declaration ::= generic_subprogram_declaration | generic_package_declaration ;
prefix ::= name | implicit_dereference ;
array_type_definition ::= unconstrained_array_definition | constrained_array_definition ;
based_numeral ::= extended_digit (underline? extended_digit)* ;
graphic_character ::= identifier_letter | digit | space_character | special_character ;
parent_unit_name ::= name ;
discriminant_part ::= unknown_discriminant_part | known_discriminant_part ;
implicit_dereference ::= name ;
scalar_constraint ::= range_constraint | digits_constraint | delta_constraint ;
defining_identifier ::= identifier ;
library_unit_renaming_declaration ::= package_renaming_declaration | generic_renaming_declaration | subprogram_renaming_declaration ;
task_item ::= entry_declaration | representation_clause ;
defining_operator_symbol ::= operator_symbol ;
name ::= direct_name | explicit_dereference | indexed_component | slice | selected_component | attribute_reference | type_conversion | function_call | character_literal ;
abortable_part ::= sequence_of_statements ;
--------------------ada::laemmel-verhoef.bgf--------------------
context_clause ::= context_item* ;
first_bit ::= static_simple_expression ;
generic_formal_parameter_declaration ::= formal_object_declaration | formal_type_declaration | formal_subprogram_declaration | formal_package_declaration ;
defining_designator ::= defining_program_unit_name | defining_operator_symbol ;
enumeration_literal_specification ::= defining_identifier | defining_character_literal ;
library_unit_body ::= subprogram_body | package_body ;
entry_call_alternative ::= entry_call_statement sequence_of_statements? ;
statement_identifier ::= direct_name ;
type_definition ::= enumeration_type_definition | integer_type_definition | real_type_definition | array_type_definition | record_type_definition | access_type_definition | derived_type_definition ;
discrete_range ::= discrete_subtype_indication | range_definition ;
integer_type_definition ::= signed_integer_type_definition | modular_type_definition ;
accept_alternative ::= accept_statement sequence_of_statements? ;
type_declaration ::= full_type_declaration | incomplete_type_declaration | private_type_declaration | private_extension_declaration ;
subtype_mark ::= subtype_name ;
delay_alternative ::= delay_statement sequence_of_statements? ;
formal_access_type_definition ::= access_type_definition ;
select_statement ::= selective_accept | timed_entry_call | conditional_entry_call | asynchronous_select ;
term ::= factor (multiplying_operator factor)* ;
selector_name ::= identifier | character_literal | operator_symbol ;
select_alternative ::= accept_alternative | delay_alternative | terminate_alternative ;
basic_declaration ::= type_declaration | subtype_declaration | object_declaration | number_declaration | subprogram_declaration | abstract_subprogram_declaration | package_declaration | renaming_declaration | exception_declaration | generic_declaration | generic_instantiation ;
declarative_item ::= basic_declarative_item | body ;
last_bit ::= static_simple_expression ;
explicit_actual_parameter ::= expression | variable_name ;
ancestor_part ::= expression | subtype_mark ;
constraint ::= scalar_constraint | composite_constraint ;
compound_statement ::= if_statement | case_statement | loop_statement | block_statement | accept_statement | select_statement ;
array_aggregate ::= positional_array_aggregate | named_array_aggregate ;
basic_declarative_item ::= basic_declaration | representation_clause | use_clause ;
real_type_definition ::= floating_point_definition | fixed_point_definition ;
default_expression ::= expression ;
defining_character_literal ::= character_literal ;
protected_operation_declaration ::= subprogram_declaration | entry_declaration | representation_clause ;
choice_parameter_specification ::= defining_identifier ;
sequence_of_statements ::= statement statement* ;
fixed_point_definition ::= ordinary_fixed_point_definition | decimal_fixed_point_definition ;
explicit_generic_actual_parameter ::= expression | variable_name | subprogram_name | entry_name | subtype_mark | package_instance_name ;
default_name ::= name ;
declarative_part ::= declarative_item* ;
enumeration_aggregate ::= array_aggregate ;
entry_index ::= expression ;
simple_expression ::= unary_adding_operator? term (binary_adding_operator term)* ;
library_unit_declaration ::= subprogram_declaration | package_declaration | generic_declaration | generic_instantiation ;
compilation ::= compilation_unit* ;
formal_array_type_definition ::= array_type_definition ;
subtype_indication ::= subtype_mark constraint? ;
aggregate ::= record_aggregate | extension_aggregate | array_aggregate ;
renaming_declaration ::= object_renaming_declaration | exception_renaming_declaration | package_renaming_declaration | subprogram_renaming_declaration | generic_renaming_declaration ;
delay_statement ::= delay_until_statement | delay_relative_statement ;
proper_body ::= subprogram_body | package_body | task_body | protected_body ;
body_stub ::= subprogram_body_stub | package_body_stub | task_body_stub | protected_body_stub ;
position ::= static_expression ;
formal_type_definition ::= formal_private_type_definition | formal_derived_type_definition | formal_discrete_type_definition | formal_signed_integer_type_definition | formal_modular_type_definition | formal_floating_point_definition | formal_ordinary_fixed_point_definition | formal_decimal_fixed_point_definition | formal_array_type_definition | formal_access_type_definition ;
use_clause ::= use_package_clause | use_type_clause ;
protected_element_declaration ::= protected_operation_declaration | component_declaration ;
context_item ::= with_clause | use_clause ;
simple_statement ::= null_statement | assignment_statement | exit_statement | goto_statement | procedure_call_statement | return_statement | entry_call_statement | requeue_statement | delay_statement | abort_statement | raise_statement | code_statement ;
body ::= proper_body | body_stub ;
representation_clause ::= attribute_definition_clause | enumeration_representation_clause | record_representation_clause | at_clause ;
direct_name ::= identifier | operator_symbol ;
access_type_definition ::= access_to_object_definition | access_to_subprogram_definition ;
protected_operation_item ::= subprogram_declaration | subprogram_body | entry_body | representation_clause ;
condition ::= boolean_expression ;
triggering_statement ::= entry_call_statement | delay_statement ;
triggering_alternative ::= triggering_statement sequence_of_statements? ;
composite_constraint ::= index_constraint | discriminant_constraint ;
component_item ::= component_declaration | representation_clause ;
parameter_profile ::= formal_part? ;
operator_symbol ::= string_literal ;
generic_declaration ::= generic_subprogram_declaration | generic_package_declaration ;
array_type_definition ::= unconstrained_array_definition | constrained_array_definition ;
prefix ::= name | implicit_dereference ;
parent_unit_name ::= name ;
discriminant_part ::= unknown_discriminant_part | known_discriminant_part ;
implicit_dereference ::= name ;
scalar_constraint ::= range_constraint | digits_constraint | delta_constraint ;
defining_identifier ::= identifier ;
task_item ::= entry_declaration | representation_clause ;
library_unit_renaming_declaration ::= package_renaming_declaration | generic_renaming_declaration | subprogram_renaming_declaration ;
defining_operator_symbol ::= operator_symbol ;
name ::= direct_name | explicit_dereference | indexed_component | slice | selected_component | attribute_reference | type_conversion | function_call | character_literal ;
abortable_part ::= sequence_of_statements ;
--------------------ada::lncs-2219.bgf--------------------
context_clause ::= context_item* ;
first_bit ::= static_simple_expression ;
numeric_literal ::= decimal_literal | based_literal ;
generic_formal_parameter_declaration ::= formal_object_declaration | formal_type_declaration | formal_subprogram_declaration | formal_package_declaration ;
defining_designator ::= defining_program_unit_name | defining_operator_symbol ;
enumeration_literal_specification ::= defining_identifier | defining_character_literal ;
library_unit_body ::= subprogram_body | package_body ;
entry_call_alternative ::= entry_call_statement sequence_of_statements? ;
statement_identifier ::= direct_name ;
type_definition ::= enumeration_type_definition | real_type_definition | record_type_definition | derived_type_definition | integer_type_definition | array_type_definition | access_type_definition ;
discrete_range ::= discrete_subtype_indication | range ;
integer_type_definition ::= signed_integer_type_definition | modular_type_definition ;
accept_alternative ::= accept_statement sequence_of_statements? ;
type_declaration ::= full_type_declaration | incomplete_type_declaration | private_type_declaration | private_extension_declaration ;
subtype_mark ::= subtype_name ;
delay_alternative ::= delay_statement sequence_of_statements? ;
formal_access_type_definition ::= access_type_definition ;
select_statement ::= selective_accept | timed_entry_call | conditional_entry_call | asynchronous_select ;
term ::= factor (multiplying_operator factor)* ;
selector_name ::= identifier | character_literal | operator_symbol ;
select_alternative ::= accept_alternative | delay_alternative | terminate_alternative ;
basic_declaration ::= type_declaration | object_declaration | subprogram_declaration | package_declaration | exception_declaration | generic_instantiation | subtype_declaration | number_declaration | abstract_subprogram_declaration | renaming_declaration | generic_declaration ;
declarative_item ::= basic_declarative_item | body ;
last_bit ::= static_simple_expression ;
explicit_actual_parameter ::= expression | variable_name ;
ancestor_part ::= expression | subtype_mark ;
constraint ::= scalar_constraint | composite_constraint ;
compound_statement ::= if_statement | loop_statement | accept_statement | case_statement | block_statement | select_statement ;
array_aggregate ::= positional_array_aggregate | named_array_aggregate ;
basic_declarative_item ::= basic_declaration | aspect_clause | use_clause ;
real_type_definition ::= floating_point_definition | fixed_point_definition ;
default_expression ::= expression ;
defining_character_literal ::= character_literal ;
protected_operation_declaration ::= subprogram_declaration | entry_declaration | aspect_clause ;
base ::= numeral ;
choice_parameter_specification ::= defining_identifier ;
sequence_of_statements ::= statement statement* ;
fixed_point_definition ::= ordinary_fixed_point_definition | decimal_fixed_point_definition ;
explicit_generic_actual_parameter ::= expression | variable_name | subprogram_name | entry_name | subtype_mark | package_instance_name ;
letter_or_digit ::= identifier_letter | digit ;
default_name ::= name ;
declarative_part ::= declarative_item* ;
enumeration_aggregate ::= array_aggregate ;
entry_index ::= expression ;
simple_expression ::= unary_adding_operator? term (binary_adding_operator term)* ;
library_unit_declaration ::= subprogram_declaration | package_declaration | generic_declaration | generic_instantiation ;
compilation ::= compilation_unit* ;
formal_array_type_definition ::= array_type_definition ;
subtype_indication ::= subtype_mark constraint? ;
aggregate ::= record_aggregate | extension_aggregate | array_aggregate ;
discrete_subtype_definition ::= discrete_subtype_indication | range ;
aspect_clause ::= attribute_definition_clause | enumeration_representation_clause | record_representation_clause | at_clause ;
renaming_declaration ::= object_renaming_declaration | exception_renaming_declaration | package_renaming_declaration | subprogram_renaming_declaration | generic_renaming_declaration ;
delay_statement ::= delay_until_statement | delay_relative_statement ;
proper_body ::= subprogram_body | package_body | task_body | protected_body ;
body_stub ::= subprogram_body_stub | package_body_stub | task_body_stub | protected_body_stub ;
position ::= static_expression ;
identifier ::= identifier_letter (underline? letter_or_digit)* ;
character ::= graphic_character | format_effector | other_control_function ;
formal_type_definition ::= formal_private_type_definition | formal_derived_type_definition | formal_discrete_type_definition | formal_signed_integer_type_definition | formal_modular_type_definition | formal_floating_point_definition | formal_ordinary_fixed_point_definition | formal_decimal_fixed_point_definition | formal_array_type_definition | formal_access_type_definition ;
use_clause ::= use_package_clause | use_type_clause ;
protected_element_declaration ::= protected_operation_declaration | component_declaration ;
context_item ::= with_clause | use_clause ;
simple_statement ::= null_statement | assignment_statement | goto_statement | return_statement | requeue_statement | abort_statement | code_statement | exit_statement | procedure_call_statement | entry_call_statement | delay_statement | raise_statement ;
body ::= proper_body | body_stub ;
direct_name ::= identifier | operator_symbol ;
numeral ::= digit (underline? digit)* ;
access_type_definition ::= access_to_object_definition | access_to_subprogram_definition ;
protected_operation_item ::= subprogram_declaration | subprogram_body | entry_body | aspect_clause ;
condition ::= boolean_expression ;
triggering_statement ::= entry_call_statement | delay_statement ;
triggering_alternative ::= triggering_statement sequence_of_statements? ;
composite_constraint ::= index_constraint | discriminant_constraint ;
component_item ::= component_declaration | aspect_clause ;
parameter_profile ::= formal_part? ;
operator_symbol ::= string_literal ;
generic_declaration ::= generic_subprogram_declaration | generic_package_declaration ;
prefix ::= name | implicit_dereference ;
array_type_definition ::= unconstrained_array_definition | constrained_array_definition ;
based_numeral ::= extended_digit (underline? extended_digit)* ;
graphic_character ::= identifier_letter | digit | space_character | special_character ;
parent_unit_name ::= name ;
discriminant_part ::= unknown_discriminant_part | known_discriminant_part ;
implicit_dereference ::= name ;
scalar_constraint ::= range_constraint | digits_constraint | delta_constraint ;
defining_identifier ::= identifier ;
library_unit_renaming_declaration ::= package_renaming_declaration | generic_renaming_declaration | subprogram_renaming_declaration ;
task_item ::= entry_declaration | aspect_clause ;
defining_operator_symbol ::= operator_symbol ;
name ::= direct_name | indexed_component | selected_component | type_conversion | character_literal | explicit_dereference | slice | attribute_reference | function_call ;
abortable_part ::= sequence_of_statements ;
--------------------ada::lncs-4348.bgf--------------------
context_clause ::= context_item* ;
first_bit ::= static_simple_expression ;
restriction_identifier ::= identifier ;
generic_formal_parameter_declaration ::= formal_object_declaration | formal_type_declaration | formal_subprogram_declaration | formal_package_declaration ;
defining_designator ::= defining_program_unit_name | defining_operator_symbol ;
library_unit_body ::= subprogram_body | package_body ;
label_name ::= name ;
parent_subtype_indication ::= subtype_indication ;
accept_alternative ::= accept_statement sequence_of_statements? ;
type_declaration ::= full_type_declaration | incomplete_type_declaration | private_type_declaration | private_extension_declaration ;
delay_alternative ::= delay_statement sequence_of_statements? ;
generic_formal_parameter_selector_name ::= selector_name ;
formal_access_type_definition ::= access_type_definition ;
select_statement ::= selective_accept | timed_entry_call | conditional_entry_call | asynchronous_select ;
block_statement_identifier ::= statement_identifier ;
selector_name ::= identifier | character_literal | operator_symbol ;
select_alternative ::= accept_alternative | delay_alternative | terminate_alternative ;
basic_declaration ::= type_declaration | object_declaration | subprogram_declaration | null_procedure_declaration | renaming_declaration | generic_declaration | subtype_declaration | number_declaration | abstract_subprogram_declaration | package_declaration | exception_declaration | generic_instantiation ;
pragma_argument_identifier ::= identifier ;
declarative_item ::= basic_declarative_item | body ;
restriction_parameter_argument ::= name | expression ;
non_quotation_mark_graphic_character ::= graphic_character ;
package_name ::= name ;
label_statement_identifier ::= statement_identifier ;
last_bit ::= static_simple_expression ;
explicit_actual_parameter ::= expression | variable_name ;
library_unit_name ::= name ;
generic_procedure_name ::= name ;
ancestor_part ::= expression | subtype_mark ;
constraint ::= scalar_constraint | composite_constraint ;
compound_statement ::= if_statement | loop_statement | extended_return_statement | accept_statement | case_statement | block_statement | select_statement ;
protected_identifier ::= identifier ;
function_prefix ::= prefix ;
basic_declarative_item ::= basic_declaration | aspect_clause | use_clause ;
real_type_definition ::= floating_point_definition | fixed_point_definition ;
delay_expression ::= expression ;
entry_direct_name ::= direct_name ;
defining_character_literal ::= character_literal ;
protected_operation_declaration ::= subprogram_declaration | entry_declaration | aspect_clause ;
base ::= numeral ;
fixed_point_definition ::= ordinary_fixed_point_definition | decimal_fixed_point_definition ;
default_name ::= name ;
declarative_part ::= declarative_item* ;
enumeration_aggregate ::= array_aggregate ;
entry_index ::= expression ;
discriminant_direct_name ::= direct_name ;
compilation ::= compilation_unit* ;
aggregate ::= record_aggregate | extension_aggregate | array_aggregate ;
package_instance_name ::= name ;
interface_subtype_mark ::= subtype_mark ;
renaming_declaration ::= object_renaming_declaration | exception_renaming_declaration | package_renaming_declaration | subprogram_renaming_declaration | generic_renaming_declaration ;
static_simple_expression ::= simple_expression ;
first_subtype_local_name ::= local_name ;
delay_statement ::= delay_until_statement | delay_relative_statement ;
return_subtype_indication ::= subtype_indication | access_definition ;
identifier ::= identifier_start (identifier_start | identifier_extend)* ;
subprogram_name ::= name ;
protected_element_declaration ::= protected_operation_declaration | component_declaration ;
task_identifier ::= identifier ;
context_item ::= with_clause | use_clause ;
body ::= proper_body | body_stub ;
protected_operation_item ::= subprogram_declaration | subprogram_body | entry_body | aspect_clause ;
block_identifier ::= identifier ;
triggering_statement ::= procedure_or_entry_call | delay_statement ;
entry_identifier ::= identifier ;
composite_constraint ::= index_constraint | discriminant_constraint ;
operator_symbol ::= string_literal ;
restriction_parameter_identifier ::= identifier ;
function_name ::= name ;
prefix ::= name | implicit_dereference ;
array_type_definition ::= unconstrained_array_definition | constrained_array_definition ;
based_numeral ::= extended_digit (underline? extended_digit)* ;
discriminant_part ::= unknown_discriminant_part | known_discriminant_part ;
defining_identifier ::= identifier ;
implicit_dereference ::= name ;
task_item ::= entry_declaration | aspect_clause ;
object_name ::= name ;
name ::= direct_name | indexed_component | selected_component | type_conversion | character_literal | explicit_dereference | slice | attribute_reference | function_call ;
abortable_part ::= sequence_of_statements ;
string_expression ::= expression ;
formal_parameter_selector_name ::= selector_name ;
procedure_prefix ::= prefix ;
numeric_literal ::= decimal_literal | based_literal ;
procedure_or_entry_call ::= procedure_call_statement | entry_call_statement ;
exception_name ::= name ;
enumeration_literal_specification ::= defining_identifier | defining_character_literal ;
entry_call_alternative ::= procedure_or_entry_call sequence_of_statements? ;
statement_identifier ::= direct_name ;
type_definition ::= enumeration_type_definition | real_type_definition | record_type_definition | derived_type_definition | integer_type_definition | array_type_definition | access_type_definition | interface_type_definition ;
procedure_name ::= name ;
discrete_range ::= discrete_subtype_indication | range ;
integer_type_definition ::= signed_integer_type_definition | modular_type_definition ;
subtype_mark ::= subtype_name ;
identifier_extend ::= mark_non_spacing | mark_spacing_combining | number_decimal | punctuation_connector | other_format ;
variable_name ::= name ;
term ::= factor (multiplying_operator factor)* ;
component_local_name ::= local_name ;
callable_entity_name ::= name ;
array_aggregate ::= positional_array_aggregate | named_array_aggregate ;
default_expression ::= expression ;
formal_subprogram_declaration ::= formal_concrete_subprogram_declaration | formal_abstract_subprogram_declaration ;
choice_parameter_specification ::= defining_identifier ;
sequence_of_statements ::= statement statement* ;
generic_package_name ::= name ;
identifier_start ::= letter_uppercase | letter_lowercase | letter_titlecase | letter_modifier | letter_other | number_letter ;
explicit_generic_actual_parameter ::= expression | variable_name | subprogram_name | entry_name | subtype_mark | package_instance_name ;
subprogram_specification ::= procedure_specification | function_specification ;
discrete_subtype_indication ::= subtype_indication ;
loop_name ::= name ;
simple_expression ::= unary_adding_operator? term (binary_adding_operator term)* ;
library_unit_declaration ::= subprogram_declaration | package_declaration | generic_declaration | generic_instantiation ;
formal_array_type_definition ::= array_type_definition ;
subtype_indication ::= null_exclusion? subtype_mark constraint? ;
discrete_subtype_definition ::= discrete_subtype_indication | range ;
entry_name ::= name ;
aspect_clause ::= attribute_definition_clause | enumeration_representation_clause | record_representation_clause | at_clause ;
loop_statement_identifier ::= statement_identifier ;
proper_body ::= subprogram_body | package_body | task_body | protected_body ;
subtype_name ::= name ;
ancestor_subtype_indication ::= subtype_indication ;
body_stub ::= subprogram_body_stub | package_body_stub | task_body_stub | protected_body_stub ;
generic_function_name ::= name ;
position ::= static_expression ;
component_selector_name ::= selector_name ;
formal_type_definition ::= formal_private_type_definition | formal_derived_type_definition | formal_discrete_type_definition | formal_signed_integer_type_definition | formal_modular_type_definition | formal_floating_point_definition | formal_ordinary_fixed_point_definition | formal_decimal_fixed_point_definition | formal_array_type_definition | formal_access_type_definition | formal_interface_type_definition ;
use_clause ::= use_package_clause | use_type_clause ;
loop_identifier ::= identifier ;
simple_statement ::= null_statement | assignment_statement | goto_statement | simple_return_statement | requeue_statement | abort_statement | code_statement | exit_statement | procedure_call_statement | entry_call_statement | delay_statement | raise_statement ;
formal_interface_type_definition ::= interface_type_definition ;
direct_name ::= identifier | operator_symbol ;
numeral ::= digit (underline? digit)* ;
condition ::= boolean_expression ;
triggering_alternative ::= triggering_statement sequence_of_statements? ;
component_item ::= component_declaration | aspect_clause ;
parameter_profile ::= formal_part? ;
generic_declaration ::= generic_subprogram_declaration | generic_package_declaration ;
parent_unit_name ::= name ;
scalar_constraint ::= range_constraint | digits_constraint | delta_constraint ;
boolean_expression ::= expression ;
library_unit_renaming_declaration ::= package_renaming_declaration | generic_renaming_declaration | subprogram_renaming_declaration ;
discriminant_selector_name ::= selector_name ;
defining_operator_symbol ::= operator_symbol ;
static_expression ::= expression ;
with_clause ::= limited_with_clause | nonlimited_with_clause ;
task_name ::= name ;
--------------------ada::cordy-hyaric.bgf--------------------
context_clause ::= context_item* ;
subprogram_declaration ::= overriding_indicator? subprogram_specification blocksemi ;
first_bit ::= simple_expression ;
generic_formal_parameter_declaration ::= formal_object_declaration | formal_type_declaration | formal_subprogram_declaration | formal_package_declaration ;
defining_designator ::= defining_program_unit_name | defining_operator_symbol ;
library_unit_body ::= subprogram_body | package_body ;
accept_alternative ::= accept_statement sequence_of_statements? ;
type_declaration ::= full_type_declaration | incomplete_type_declaration | private_type_declaration | private_extension_declaration ;
identifier_arrow ::= identifier arrow ;
delay_alternative ::= delay_statement sequence_of_statements? ;
parameter_specification_default ::= colon_equals default_expression ;
formal_access_type_definition ::= access_type_definition ;
parameter_specification ::= defining_identifier_list colon parameter_type_specification ;
select_statement ::= selective_accept | timed_entry_call | conditional_entry_call | asynchronous_select ;
subtype_access_or_array_type_definition ::= subtype_indication | access_definition | array_type_definition ;
parameter_association ::= parameter_association_selector_name explicit_actual_parameter ;
selector_name ::= identifier | character_literal | operator_symbol ;
select_alternative ::= accept_alternative | delay_alternative | terminate_alternative ;
basic_declaration ::= type_declaration | subtype_declaration | object_declaration | number_declaration | subprogram_declaration | abstract_subprogram_declaration | null_procedure_declaration | package_declaration | renaming_declaration | exception_declaration | generic_declaration | generic_instantiation | pragma ;
declarative_item ::= basic_declarative_item | body ;
restriction_parameter_argument ::= expression ;
last_bit ::= simple_expression ;
explicit_actual_parameter ::= expression ;
library_unit_name ::= name ;
ancestor_part ::= expression | subtype_mark ;
exception_handler_specification ::= choice_parameter_specification colon ;
constraint ::= scalar_constraint | composite_constraint ;
arrow_restriction_parameter_argument ::= arrow restriction_parameter_argument ;
compound_statement ::= if_statement | case_statement | loop_statement | block_statement | extended_return_statement | accept_statement | select_statement ;
basic_declarative_item ::= basic_declaration | aspect_clause | use_clause ;
array_component_association ::= discrete_choice_list arrow expression_or_null ;
real_type_definition ::= floating_point_definition | fixed_point_definition ;
and_or_xor_relation ::= and_or_xor relation ;
defining_character_literal ::= character_literal ;
protected_operation_declaration ::= subprogram_declaration | entry_declaration | aspect_clause | pragma ;
used_name ::= name ;
fixed_point_definition ::= ordinary_fixed_point_definition | decimal_fixed_point_definition ;
restriction ::= identifier arrow_restriction_parameter_argument? ;
formal_object_declaration_default ::= colon_equals default_expression ;
default_name ::= name ;
declarative_part ::= declarative_item* ;
enumeration_aggregate ::= array_aggregate ;
entry_index ::= expression ;
compilation ::= compilation_unit* ;
aggregate ::= record_aggregate | extension_aggregate | array_aggregate ;
procedure_call_statement ::= prefix actual_parameter_part? semi ;
renaming_declaration ::= object_renaming_declaration | exception_renaming_declaration | package_renaming_declaration | subprogram_renaming_declaration | generic_renaming_declaration ;
used_subtype_mark ::= subtype_mark ;
delay_statement ::= delay_until_statement | delay_relative_statement ;
handled_sequence_of_statements ::= sequence_of_statements handled_sequence_of_statements_exception? ;
return_subtype_indication ::= subtype_indication | access_definition ;
identifier ::= id | wide_identifier ;
protected_element_declaration ::= protected_operation_declaration | component_declaration ;
defining_program_unit_name ::= defining_program_unit_name_parent? defining_identifier ;
function_call_component ::= actual_parameter_part ;
context_item ::= with_clause | use_clause ;
body ::= proper_body | body_stub ;
code_statement ::= qualified_expression semi ;
protected_operation_item ::= subprogram_declaration | subprogram_body | entry_body | aspect_clause ;
triggering_statement ::= procedure_or_entry_call | delay_statement ;
generic_package_declaration ::= generic_formal_part package_specification blocksemi ;
character_literal ::= charlit ;
expression ::= relation and_or_xor_relation* ;
parameter_association_selector_name ::= selector_name arrow ;
composite_constraint ::= index_constraint | discriminant_constraint ;
operator_symbol ::= string_literal ;
prefix ::= name ;
slice ::= prefix slice_component ;
array_type_definition ::= unconstrained_array_definition | constrained_array_definition ;
discriminant_part ::= unknown_discriminant_part | known_discriminant_part ;
implicit_dereference ::= name ;
defining_identifier ::= identifier ;
or_selector_name ::= orbar selector_name ;
task_item ::= entry_declaration | aspect_clause | pragma ;
index_or_parameter_value ::= expression | discrete_range | parameter_association ;
abortable_part ::= sequence_of_statements ;
binary_adding_operator_term ::= binary_adding_operator term ;
program ::= compilation ;
relational_operator_simple_expression ::= relational_operator simple_expression ;
string_literal ::= stringlit ;
assignment_statement ::= name colon_equals expression semi ;
object_declaration_expression ::= colon_equals expression ;
numeric_literal ::= decimal_literal | based_literal ;
procedure_or_entry_call ::= procedure_call_statement | entry_call_statement ;
enumeration_literal_specification ::= defining_identifier | defining_character_literal ;
entry_call_alternative ::= procedure_or_entry_call sequence_of_statements? ;
statement_identifier ::= direct_name ;
discriminant_specification_list ::= discriminant_specification semi_discriminant_specification* ;
type_definition ::= enumeration_type_definition | integer_type_definition | real_type_definition | array_type_definition | record_type_definition | access_type_definition | derived_type_definition | interface_type_definition ;
discrete_range ::= subtype_indication | range ;
integer_type_definition ::= signed_integer_type_definition | modular_type_definition ;
subtype_mark ::= name ;
statement ::= label* unlabeled_statement ;
or_exception_choice ::= orbar exception_choice ;
package_body_identifier ::= parent_name_dot? identifier ;
term ::= factor multiplying_operator_factor* ;
attribute_reference ::= prefix attribute_reference_component ;
generic_subprogram_declaration ::= generic_formal_part subprogram_specification blocksemi ;
function_call ::= prefix function_call_component ;
with_name ::= name ;
explicit_dereference ::= name explicit_dereference_component ;
array_aggregate ::= positional_array_aggregate | named_array_aggregate ;
selected_component ::= prefix selected_component_component ;
discriminant_selector_name_arrow ::= selector_name or_selector_name* arrow ;
default_expression ::= expression ;
blockeol ::= NL ;
entry_body_formal_part ::= entry_body_formal_part_specification? parameter_profile ;
formal_subprogram_declaration ::= formal_concrete_subprogram_declaration | formal_abstract_subprogram_declaration ;
choice_parameter_specification ::= defining_identifier ;
sequence_of_statements ::= statement+ ;
explicit_generic_actual_parameter ::= expression | name | subtype_mark ;
or_discrete_choice ::= orbar discrete_choice ;
unlabeled_statement ::= simple_statement | compound_statement ;
multiplying_operator_factor ::= multiplying_operator factor ;
name_component ::= explicit_dereference_component | indexed_slice_type_conv_or_function_call_component | selected_component_component | attribute_reference_component ;
subprogram_specification ::= procedure_specification | function_specification ;
generic_association_selector_name ::= selector_name arrow ;
simple_expression ::= unary_adding_operator? term binary_adding_operator_term* ;
library_unit_declaration ::= subprogram_declaration | package_declaration | generic_declaration | generic_instantiation | pragma ;
formal_array_type_definition ::= array_type_definition ;
subtype_indication ::= null_exclusion? subtype_mark constraint? ;
package_specification_identifier ::= parent_name_dot? identifier ;
discrete_subtype_definition ::= subtype_indication | range ;
entry_call_statement ::= name actual_parameter_part? semi ;
abort_name ::= name ;
component_declaration_default ::= colon_equals default_expression ;
component_declaration ::= defining_identifier_list colon component_definition component_declaration_default? semi ;
aspect_clause ::= attribute_definition_clause | enumeration_representation_clause | record_representation_clause | at_clause ;
discrete_choice_list ::= discrete_choice or_discrete_choice* ;
loop_statement_identifier ::= statement_identifier colon ;
proper_body ::= subprogram_body | package_body | task_body | protected_body ;
indexed_component ::= prefix indexed_component_component ;
body_stub ::= subprogram_body_stub | package_body_stub | task_body_stub | protected_body_stub ;
position ::= expression ;
formal_type_definition ::= formal_private_type_definition | formal_derived_type_definition | formal_discrete_type_definition | formal_signed_integer_type_definition | formal_modular_type_definition | formal_floating_point_definition | formal_ordinary_fixed_point_definition | formal_decimal_fixed_point_definition | formal_array_type_definition | formal_access_type_definition | formal_interface_type_definition ;
use_clause ::= use_package_clause | use_type_clause ;
discriminant_specification_default ::= colon_equals default_expression ;
index_expression ::= expression ;
discriminant_association ::= discriminant_selector_name_arrow? expression ;
formal_interface_type_definition ::= interface_type_definition ;
simple_statement ::= null_statement | procedure_call_statement | assignment_statement | exit_statement | goto_statement | simple_return_statement | entry_call_statement | requeue_statement | delay_statement | abort_statement | raise_statement | code_statement | pragma ;
pragma_argument_association ::= identifier_arrow? expression ;
direct_name ::= identifier | operator_symbol ;
condition ::= expression ;
generic_association ::= generic_association_selector_name? explicit_generic_actual_parameter ;
triggering_alternative ::= triggering_statement sequence_of_statements? ;
component_item ::= component_declaration | aspect_clause | pragma ;
parameter_profile ::= formal_part? ;
generic_declaration ::= generic_subprogram_declaration | generic_package_declaration ;
extended_return_statement_expression ::= colon_equals expression ;
parent_unit_name ::= name ;
scalar_constraint ::= range_constraint | digits_constraint | delta_constraint ;
library_unit_renaming_declaration ::= package_renaming_declaration | generic_renaming_declaration | subprogram_renaming_declaration | pragma ;
defining_operator_symbol ::= operator_symbol ;
block_statement_identifier_colon ::= statement_identifier colon ;
with_clause ::= limited_with_clause | nonlimited_with_clause ;
eol ::= NL ;
package_declaration ::= package_specification unitsemi ;
generic_formal_parameter_declaration_or_use_clause ::= generic_formal_parameter_declaration | use_clause | pragma ;
--------------------c::iso-9899-1999.bgf--------------------
statement ::= labeled-statement | compound-statement | expression-statement | selection-statement | iteration-statement | jump-statement ;
type-name ::= specifier-qualifier-list abstract-declarator? ;
typedef-name ::= identifier ;
function-definition ::= declaration-specifiers declarator declaration-list? compound-statement ;
external-declaration ::= function-definition | declaration ;
block-item ::= declaration | statement ;
constant-expression ::= conditional-expression ;
declarator ::= pointer? direct-declarator ;
--------------------c::iso-9899-tc2.bgf--------------------
statement ::= labeled-statement | compound-statement | expression-statement | selection-statement | iteration-statement | jump-statement ;
type-name ::= specifier-qualifier-list abstract-declarator? ;
typedef-name ::= identifier ;
function-definition ::= declaration-specifiers declarator declaration-list? compound-statement ;
external-declaration ::= function-definition | declaration ;
block-item ::= declaration | statement ;
constant-expression ::= conditional-expression ;
declarator ::= pointer? direct-declarator ;
--------------------c::iso-9899-tc3.bgf--------------------
statement ::= labeled-statement | compound-statement | expression-statement | selection-statement | iteration-statement | jump-statement ;
type-name ::= specifier-qualifier-list abstract-declarator? ;
typedef-name ::= identifier ;
function-definition ::= declaration-specifiers declarator declaration-list? compound-statement ;
external-declaration ::= function-definition | declaration ;
block-item ::= declaration | statement ;
constant-expression ::= conditional-expression ;
declarator ::= pointer? direct-declarator ;
--------------------c::antoniol.bgf--------------------
long_comment ::= comment+ ;
any_other_line ::= not_newline* ;
program ::= line* ;
ifdef_token ::= ifdef_line | elsedef_line | elsifdef_line | endifdef_line ;
--------------------c::malton-dahn.bgf--------------------
tagged_attribute_number ::= number ;
asm_template ::= string ;
file_id ::= id | key ;
C_compilation_unit ::= declaration_or_function_definition* ;
null_statement ::= semi ;
assignment_operation ::= assignment_operator assignment_expression ;
argument_declarator ::= declarator | abstract_declarator ;
declarator_extension ::= function_declarator_extension | array_declarator_extension ;
type_name ::= type_specifiers abstract_declarator? ;
asm_statement ::= asm_spec semi ;
simple_type_or_qualifier ::= simple_type_name | type_qualifier ;
unannotated_reference_base ::= reference_id | nonreferential_primary ;
declaration_or_function_definition ::= declaration | function_definition ;
postfix_expression ::= reference | nonreference ;
hexfloat ::= extension_specifier hex ;
filepath ::= file_id slash_fileid* ;
comment_NL ::= comment NL ;
nonreference ::= nonreferential_primary postfix_extension* ;
gnu_long_int ::= gnu_long_int_string | gnu_long_int_charlit ;
KR_parameter_decls ::= NL IN declaration+ EX ;
argument_expression ::= assignment_expression | type_name ;
function_definition ::= NL decl_specifiers declarator KR_parameter_decls? compound_statement NL ;
ptr_qualifier ::= restrict_qualifier | cv_qualifier ;
slash_fileid ::= slash file_id ;
designator ::= array_designator | struct_or_union_designator ;
constant_expression ::= conditional_expression ;
 constant_expression ::= restrict_qualifier ;
tagged_attribute_id ::= id ;
string ::= stringlit+ ;
reference_id ::= id ;
reference_expression ::= unannotated_reference_base postfix_extension* ;
reference ::= reference_id | reference_expression ;
expression_statement ::= expression semi ;
attributes_or_asm ::= attribute_spec | asm_spec ;
label_id ::= id ;
compound_literal_array_type ::= type_specifiers compound_literal_array_declarator ;
program ::= C_compilation_unit ;
enumerator ::= reference_id enumerator_value? ;
tagged_reference_id ::= reference_id ;
null_declaration ::= semi ;
type_id ::= reference_id ;
--------------------c::bruneliere.bgf--------------------
CLong ::= ε ;
Integer ::= integer() ;
Derived ::= ε ;
CLongLong ::= ε ;
CShort ::= ε ;
CFloat ::= ε ;
CField ::= ε ;
CVoid ::= ε ;
CStructuralFeature ::= CField ;
CSignedChar ::= ε ;
CDouble ::= ε ;
UnsignedLong ::= ε ;
String ::= string() ;
CLongDouble ::= ε ;
CBitField ::= ε ;
CUnsignedChar ::= ε ;
UnsignedLongLong ::= ε ;
CWChar ::= ε ;
UnsignedShort ::= ε ;
CEnumeration ::= ε ;
--------------------c::cordy-malton-dahn.bgf--------------------
equality_expression ::= relational_expression equality_relational_expression* ;
assign_assignment_expression ::= assignment_operator assignment_expression ;
ps_argument ::= constant_expression | register_spec ;
type_specifier ::= simple_type_name | enum_specifier | struct_or_union_specifier | typeof_expression | complex_specifier ;
simple_statement_opt_semi ::= simple_statement semi? ;
shift_expression ::= additive_expression shift_additive_expression* ;
AND_equality_expression ::= bit_AND_operator equality_expression ;
string_unit ::= stringlit | pseudo_string | register_spec | preprocessor ;
OR_logical_AND_expression ::= logical_OR_operator logical_AND_expression ;
conditional_expression ::= logical_OR_expression conditional_operation? ;
type_name ::= type_specifiers abstract_declarator* ;
complex_specifier ::= complex simple_type_or_qualifier* ;
macro_type_argument ::= argument_expression ;
element_name ::= id ;
additive_expression ::= multiplicative_expression add_subtract_multiplicative_expression* ;
asm_register ::= string | pseudo_string ;
unary_expression_assign ::= unary_expression assignment_operator ;
simple_type_or_qualifier ::= simple_type_name | type_qualifier ;
expression_list ::= expression+ ;
type_qualifier ::= bit_qualifier | cv_qualifier | inline_qualifier | restrict_qualifier | init_qualifier | exit_qualifier | user_qualifier | force_qualifier | asmlinkage_qualifier | zexport_qualifier | attribute_spec ;
inclusive_OR_expression ::= exclusive_OR_expression OR_exclusive_OR_expression* ;
gnu_statement ::= error_statement | else_statement ;
gnu_long_int ::= gnu_long_int_string | gnu_long_int_charlit ;
attribute_extension ::= attribute_name attribute_arguments? ;
upper_macro_name ::= upperlowerid ;
expression_or_type_name ::= type_name | expression ;
AND_inclusive_OR_expression ::= preprocessor* logical_AND_operator inclusive_OR_expression ;
decl_qualifier ::= sc_specifier | type_qualifier | extension_specifier | weak_specifier | declspec_specifier ;
preprocessor ::= TAB_1 preprocessor_line NL ;
attribute_name ::= id | cv_qualifier ;
asm_instruction ::= asm_unit+ NL ;
unlabeled_statement ::= c_unlabeled_statement | gnu_statement ;
asm_unit ::= token_or_key ;
ps_name ::= id ;
label_id ::= id ;
KR_simple_declaration ::= decl_specifiers? KR_simple_type_name decl_specifiers? declarator+ semi ;
enumerator ::= preprocessor* reference_id enumerator_value? ;
null_declaration ::= semi ;
type_id ::= reference_id ;
init_declarator ::= declarator attributes_or_asm* initialization? ;
logical_OR_expression ::= logical_AND_expression OR_logical_AND_expression* ;
asm_template ::= string_unit_NL+ ;
declaration_or_statement ::= declaration | statement | preprocessor | function_definition | macro_declaration_or_statement | unknown_declaration_or_statement ;
null_statement ::= ε ;
OR_exclusive_OR_expression ::= bit_OR_operator exclusive_OR_expression ;
pseudo_string ::= ps_name ps_arguments? ;
declarator_extension ::= function_declarator_extension | array_declarator_extension ;
declarator ::= attribute_spec* ptr_operator* base_declarator SPON declarator_extension* attribute_spec* ;
relational_expression ::= shift_expression relational_shift_expression* ;
multipy_divide_cast_expression ::= multiplicative_operator cast_expression ;
shift_additive_expression ::= shift_operator additive_expression ;
nosemiNL ::= NL ;
equality_relational_expression ::= equality_operator relational_expression ;
string_unit_NL ::= string_unit NL ;
asm_statement ::= asm_spec ;
else_sub_statement ::= if_statement | sub_statement ;
decl_specifiers ::= decl_qualifier_or_type_specifier+ ;
unary_expression ::= pre_increment_operator* sub_unary_expression SPON ;
macro_arguments ::= macro_argument* ;
postfix_expression ::= primary SPOFF postfix_extension* SPON ;
simple_statement ::= jump_statement | null_statement | expression_statement ;
hexfloat ::= extension_specifier hex ;
multiplicative_expression ::= cast_expression multipy_divide_cast_expression* ;
AND_expression ::= equality_expression AND_equality_expression* ;
macro_name ::= id ;
exclusive_OR_AND_expression ::= bit_XOR_operator AND_expression ;
KR_parameter_decls ::= NL IN KR_simple_declaration+ EX ;
function_definition ::= NL function_header preprocessor_function_header* KR_parameter_decls? compound_statement NL ;
cast_expression ::= cast_operator* unary_expression ;
expression ::= assignment_expression ;
logical_AND_expression ::= inclusive_OR_expression AND_inclusive_OR_expression* ;
add_subtract_multiplicative_expression ::= additive_operator multiplicative_expression ;
exclusive_OR_expression ::= AND_expression exclusive_OR_AND_expression* ;
constant_expression ::= conditional_expression ;
reference_id ::= id | foreachid | whileeachid ;
relational_shift_expression ::= relational_operator shift_expression ;
macro_specifier ::= macro_call ;
token_or_key ::= token | key ;
expression_statement ::= pre_increment_operator* assignment_expression assign_assignment_expression* comma_expression_statement? ;
attributes_or_asm ::= attribute_spec | asm_spec ;
compound_statement_body ::= declaration_or_statement* ;
program ::= compilation_unit ;
structured_statement ::= if_statement | for_statement | while_statement | switch_statement | do_statement | compound_statement | asm_statement ;
compilation_unit ::= function_definition_or_declaration* ;
--------------------c::cordy-malton.bgf--------------------
file_id ::= id | key ;
C_compilation_unit ::= declaration_or_function_definition* ;
type_specifier ::= simple_type_name | enum_specifier | struct_or_union_specifier ;
null_statement ::= semi ;
assignment_operation ::= assignment_operator assignment_expression ;
argument_declarator ::= declarator | abstract_declarator ;
conditional_expression ::= binary_expression conditional_operation? ;
declarator ::= ptr_operator* base_declarator SPON declarator_extension* ;
declarator_extension ::= function_declarator_extension | array_declarator_extension ;
type_name ::= type_specifiers abstract_declarator? ;
decl_specifiers ::= decl_qualifier* type_specifier? decl_qualifier* ;
unannotated_reference_base ::= reference_id | nonreferential_primary ;
declaration_or_function_definition ::= declaration | function_definition ;
postfix_expression ::= reference | nonreference ;
filepath ::= file_id slash_fileid* ;
nonreference ::= nonreferential_primary postfix_extension* ;
KR_parameter_decls ::= NL IN declaration+ EX ;
function_definition ::= NL decl_specifiers declarator KR_parameter_decls? compound_statement NL ;
slash_fileid ::= slash file_id ;
expression ::= assignment_expression+ ;
decl_qualifier ::= sc_specifier | cv_qualifier | type_qualifier ;
constant_expression ::= conditional_expression ;
string ::= stringlit+ ;
reference_id ::= id ;
reference_expression ::= unannotated_reference_base postfix_extension* ;
reference ::= reference_id | reference_expression ;
unlabeled_statement ::= expression_statement | if_statement | for_statement | while_statement | switch_statement | do_statement | null_statement | jump_statement | compound_statement ;
assignment_expression ::= conditional_expression assignment_operation? ;
expression_statement ::= expression semi ;
label_id ::= id ;
program ::= C_compilation_unit ;
enumerator ::= reference_id enumerator_value? ;
tagged_reference_id ::= reference_id ;
init_declarator ::= declarator initialization? ;
type_id ::= reference_id ;
--------------------c::lankamp.bgf--------------------
ExternalDeclaration ::= FunctionPrototype ;
 ExternalDeclaration ::= FunctionDefinition ;
 ExternalDeclaration ::= GlobalDeclaration ;
Parameter ::= Specifier* Declarator ;
PrototypeParameter ::= Specifier* AbstractDeclarator ;
AnonymousIdentifier ::= ε ;
TranslationUnit ::= ExternalDeclaration+ ;
TypeName ::= Specifier+ AbstractDeclarator ;
--------------------cpp::iso-n2723.bgf--------------------
template-name ::= identifier ;
type-name ::= class-name | enum-name | typedef-name ;
namespace-name ::= original-namespace-name | namespace-alias ;
type-specifier-seq ::= type-specifier type-specifier-seq? ;
initializer-clause ::= assignment-expression | braced-init-list ;
block-declaration ::= simple-declaration | asm-definition | namespace-alias-definition | using-declaration | using-directive | static_assert-declaration | alias-declaration ;
declaration ::= block-declaration | function-definition | template-declaration | explicit-instantiation | explicit-specialization | linkage-specification | namespace-definition ;
original-namespace-name ::= identifier ;
for-init-statement ::= expression-statement | simple-declaration ;
expression-list ::= initializer-list ;
template-argument ::= constant-expression | type-id | id-expression ;
statement ::= labeled-statement | expression-statement | compound-statement | selection-statement | iteration-statement | jump-statement | declaration-statement | try-block ;
decl-specifier-seq ::= decl-specifier-seq? decl-specifier ;
type-specifier ::= simple-type-specifier | class-specifier | enum-specifier | elaborated-type-specifier | typename-specifier | cv-qualifier ;
lambda-parameter ::= decl-specifier-seq declarator ;
cv-qualifier-seq ::= cv-qualifier cv-qualifier-seq? ;
new-type-id ::= type-specifier-seq new-declarator? ;
constant-expression ::= conditional-expression ;
translation-unit ::= declaration-seq? ;
lambda-expression ::= lambda-introducer lambda-parameter-declaration? compound-statement ;
namespace-alias ::= identifier ;
handler-seq ::= handler handler-seq? ;
declaration-statement ::= block-declaration ;
named-namespace-definition ::= original-namespace-definition | extension-namespace-definition ;
enum-name ::= identifier ;
conversion-type-id ::= type-specifier-seq conversion-declarator? ;
template-parameter ::= type-parameter | parameter-declaration ;
namespace-body ::= declaration-seq? ;
init-declarator ::= declarator initializer? ;
type-id ::= type-specifier-seq abstract-declarator? ;
typedef-name ::= identifier ;
id-expression ::= unqualified-id | qualified-id ;
conversion-declarator ::= ptr-operator conversion-declarator? ;
namespace-definition ::= named-namespace-definition | unnamed-namespace-definition ;
enumerator ::= identifier ;
class-name ::= identifier | simple-template-id ;
--------------------cpp::bruneliere.bgf--------------------
CDerivableType ::= ε ;
Integer ::= integer() ;
CBehavorialFeature ::= CFunction ;
CStructureContents ::= CPPOperator ;
 CStructureContents ::= CPPOperation ;
CPPReference ::= ε ;
CField ::= ε ;
CStructured ::= CPPClass ;
String ::= string() ;
CPPConst ::= ε ;
--------------------cpp::elges-cordy.bgf--------------------
character_constant ::= charlit ;
const_volatile_qualifier_list ::= const_volatile_qualifier+ ;
type_specifier ::= simple_type_name | class_specifier | enum_specifier | elaborated_type_specifier | const_volatile_qualifier ;
function_declarator ::= pointer_operator* declared_item declarator_extension+ ;
non_gt_binary_expression ::= cast_expression non_gt_binary_operation* ;
handler_list ::= handler handler_list? ;
class_name ::= id template_arguments? ;
conditional_expression ::= binary_expression conditional_operation? ;
declarator ::= pointer_operator* declared_item declarator_extension* ;
type_name ::= type_specifiers abstract_declarator? ;
literal ::= number_constant | character_constant | string_constant ;
statement ::= label* unlabeled_statement ;
namespace_name ::= id ;
statement_list ::= statement+ ;
declarator_list ::= init_declarator+ ;
declaration_statement ::= declaration ;
decl_specifiers ::= decl_specifier+ ;
binary_operation ::= binary_operator cast_expression ;
NL_stringlit ::= NL stringlit ;
expression_list ::= assignment_expression+ ;
template_parameter ::= type_parameter | parameter_declaration ;
parameter_declaration ::= decl_specifiers parameter_declarator equal_expression? ;
template_argument ::= type_name | non_gt_binary_expression ;
exception_declarator ::= declarator | abstract_declarator ;
initializer_list ::= initializer_element+ ;
type_specifiers ::= type_specifier+ ;
function_definition ::= NL decl_specifiers? function_declarator ctor_initializer? exception_specification? function_body ;
member ::= access_specifier_colon? member_declaration ;
template_class_name ::= id template_arguments ;
binary_expression ::= cast_expression binary_operation* ;
constant_expression ::= conditional_expression ;
string_constant ::= stringlit IN NL_stringlit* EX ;
file_identifier ::= id | key ;
name ::= id | template_class_name | qualified_name | operator_function_name | conversion_function_name ;
unlabeled_statement ::= null_statement | expression_statement | compound_statement | selection_statement | iteration_statement | jump_statement | declaration_statement | try_block ;
non_gt_binary_operation ::= non_gt_binary_operator cast_expression ;
filename ::= file_identifier dot_slash_identifier* ;
conversion_type_name ::= type_specifiers pointer_operator? ;
member_declarator_list ::= member_declarator+ ;
mem_initializer_list ::= mem_initializer+ ;
enumerator ::= id equal_constant_expression? ;
class_or_namespace_name ::= class_name | namespace_name ;
program ::= declaration_list ;
declaration_list ::= declaration* ;
init_declarator ::= declarator initializer? ;
--------------------cpp::iso-14882-1998.bgf--------------------
type-name ::= class-name | enum-name | typedef-name ;
template-name ::= identifier ;
namespace-name ::= original-namespace-name | namespace-alias ;
type-specifier-seq ::= type-specifier type-specifier-seq? ;
block-declaration ::= simple-declaration | asm-definition | namespace-alias-definition | using-declaration | using-directive ;
declaration ::= block-declaration | function-definition | template-declaration | explicit-instantiation | explicit-specialization | linkage-specification | namespace-definition ;
original-namespace-name ::= identifier ;
function-body ::= compound-statement ;
for-init-statement ::= expression-statement | simple-declaration ;
template-argument ::= assignment-expression | type-id | id-expression ;
statement ::= labeled-statement | expression-statement | compound-statement | selection-statement | iteration-statement | jump-statement | declaration-statement | try-block ;
decl-specifier-seq ::= decl-specifier-seq? decl-specifier ;
type-specifier ::= simple-type-specifier | class-specifier | enum-specifier | elaborated-type-specifier | cv-qualifier ;
cv-qualifier-seq ::= cv-qualifier cv-qualifier-seq? ;
new-type-id ::= type-specifier-seq new-declarator? ;
constant-expression ::= conditional-expression ;
translation-unit ::= declaration-seq? ;
namespace-alias ::= identifier ;
handler-seq ::= handler handler-seq? ;
declaration-statement ::= block-declaration ;
named-namespace-definition ::= original-namespace-definition | extension-namespace-definition ;
enum-name ::= identifier ;
conversion-type-id ::= type-specifier-seq conversion-declarator? ;
template-parameter ::= type-parameter | parameter-declaration ;
namespace-body ::= declaration-seq? ;
class-or-namespace-name ::= class-name | namespace-name ;
init-declarator ::= declarator initializer? ;
type-id ::= type-specifier-seq abstract-declarator? ;
typedef-name ::= identifier ;
id-expression ::= unqualified-id | qualified-id ;
conversion-declarator ::= ptr-operator conversion-declarator? ;
namespace-definition ::= named-namespace-definition | unnamed-namespace-definition ;
enumerator ::= identifier ;
class-name ::= identifier | template-id ;
--------------------cs::csharp-ecma-334-2.bgf--------------------
struct-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | static-constructor-declaration | type-declaration ;
iteration-statement ::= while-statement | do-statement | for-statement | foreach-statement ;
type-name ::= namespace-or-type-name ;
namespace-name ::= namespace-or-type-name ;
class-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | destructor-declaration | static-constructor-declaration | type-declaration ;
reference-type ::= class-type | interface-type | array-type | delegate-type ;
operator-declarator ::= unary-operator-declarator | binary-operator-declarator | conversion-operator-declarator ;
variable-reference ::= expression ;
type ::= value-type | reference-type ;
namespace-member-declaration ::= namespace-declaration | type-declaration ;
attribute-argument-expression ::= expression ;
statement-expression ::= invocation-expression | object-creation-expression | assignment | post-increment-expression | post-decrement-expression | pre-increment-expression | pre-decrement-expression ;
local-variable-initializer ::= expression | array-initializer ;
for-iterator ::= statement-expression-list ;
struct-type ::= type-name | simple-type ;
primary-no-array-creation-expression ::= literal | simple-name | parenthesized-expression | member-access | invocation-expression | element-access | this-access | base-access | post-increment-expression | post-decrement-expression | object-creation-expression | delegate-creation-expression | typeof-expression | checked-expression | unchecked-expression ;
statement ::= labeled-statement | declaration-statement | embedded-statement ;
non-array-type ::= type ;
array-type ::= non-array-type rank-specifiers ;
selection-statement ::= if-statement | switch-statement ;
embedded-statement ::= block | empty-statement | expression-statement | selection-statement | iteration-statement | jump-statement | try-statement | checked-statement | unchecked-statement | lock-statement | using-statement ;
constructor-declaration ::= attributes? constructor-modifiers? constructor-declarator constructor-body ;
type-declaration ::= class-declaration | struct-declaration | interface-declaration | enum-declaration | delegate-declaration ;
constant-expression ::= expression ;
for-initializer ::= local-variable-declaration | statement-expression-list ;
boolean-expression ::= expression ;
attribute-name ::= type-name ;
attribute ::= attribute-name attribute-arguments? ;
interface-member-declaration ::= interface-method-declaration | interface-property-declaration | interface-event-declaration | interface-indexer-declaration ;
expression ::= conditional-expression | assignment ;
attributes ::= attribute-sections ;
for-condition ::= boolean-expression ;
positional-argument ::= attribute-argument-expression ;
value-type ::= struct-type | enum-type ;
operator-declaration ::= attributes? operator-modifiers operator-declarator operator-body ;
variable-initializer ::= expression | array-initializer ;
fixed-parameter ::= attributes? parameter-modifier? type identifier ;
jump-statement ::= break-statement | continue-statement | goto-statement | return-statement | throw-statement ;
method-declaration ::= method-header method-body ;
interface-type ::= type-name ;
resource-acquisition ::= local-variable-declaration | expression ;
compilation-unit ::= using-directives? global-attributes? namespace-member-declarations? ;
assignment ::= unary-expression assignment-operator expression ;
switch-section ::= switch-labels statement-list ;
local-variable-declaration ::= type local-variable-declarators ;
using-directive ::= using-alias-directive | using-namespace-directive ;
enum-type ::= type-name ;
simple-name ::= identifier ;
primary-expression ::= array-creation-expression | primary-no-array-creation-expression ;
delegate-type ::= type-name ;
global-attributes ::= global-attribute-sections ;
--------------------cs::csharp-ecma-334-3.bgf--------------------
struct-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | static-constructor-declaration | type-declaration ;
iteration-statement ::= while-statement | do-statement | for-statement | foreach-statement ;
type-name ::= namespace-or-type-name ;
namespace-name ::= namespace-or-type-name ;
class-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | finalizer-declaration | static-constructor-declaration | type-declaration ;
reference-type ::= class-type | interface-type | array-type | delegate-type ;
operator-declarator ::= unary-operator-declarator | binary-operator-declarator | conversion-operator-declarator ;
variable-reference ::= expression ;
type ::= value-type | reference-type | type-parameter ;
namespace-member-declaration ::= namespace-declaration | type-declaration ;
attribute-argument-expression ::= expression ;
statement-expression ::= invocation-expression | object-creation-expression | assignment | post-increment-expression | post-decrement-expression | pre-increment-expression | pre-decrement-expression ;
local-variable-initializer ::= expression | array-initializer ;
for-iterator ::= statement-expression-list ;
struct-type ::= type-name | simple-type | nullable-type ;
primary-no-array-creation-expression ::= literal | simple-name | parenthesized-expression | member-access | invocation-expression | element-access | this-access | base-access | post-increment-expression | post-decrement-expression | object-creation-expression | delegate-creation-expression | typeof-expression | checked-expression | unchecked-expression | default-value-expression | anonymous-method-expression ;
type-argument ::= type ;
statement ::= labeled-statement | declaration-statement | embedded-statement ;
non-array-type ::= value-type | class-type | interface-type | delegate-type | type-parameter ;
array-type ::= non-array-type rank-specifiers ;
selection-statement ::= if-statement | switch-statement ;
embedded-statement ::= block | empty-statement | expression-statement | selection-statement | iteration-statement | jump-statement | try-statement | checked-statement | unchecked-statement | lock-statement | using-statement | yield-statement ;
constructor-declaration ::= attributes? constructor-modifiers? constructor-declarator constructor-body ;
type-declaration ::= class-declaration | struct-declaration | interface-declaration | enum-declaration | delegate-declaration ;
attribute-target ::= identifier | keyword ;
constant-expression ::= expression ;
for-initializer ::= local-variable-declaration | statement-expression-list ;
anonymous-method-parameter ::= parameter-modifier? type identifier ;
boolean-expression ::= expression ;
attribute-name ::= type-name ;
attribute ::= attribute-name attribute-arguments? ;
interface-member-declaration ::= interface-method-declaration | interface-property-declaration | interface-event-declaration | interface-indexer-declaration ;
expression ::= conditional-expression | assignment ;
attributes ::= attribute-sections ;
for-condition ::= boolean-expression ;
type-parameter ::= identifier ;
positional-argument ::= attribute-argument-expression ;
value-type ::= struct-type | enum-type ;
operator-declaration ::= attributes? operator-modifiers operator-declarator operator-body ;
variable-initializer ::= expression | array-initializer ;
fixed-parameter ::= attributes? parameter-modifier? type identifier ;
jump-statement ::= break-statement | continue-statement | goto-statement | return-statement | throw-statement ;
method-declaration ::= method-header method-body ;
resource-acquisition ::= local-variable-declaration | expression ;
interface-type ::= type-name ;
compilation-unit ::= extern-alias-directives? using-directives? global-attributes? namespace-member-declarations? ;
assignment ::= unary-expression assignment-operator expression ;
global-attribute-target ::= identifier | keyword ;
switch-section ::= switch-labels statement-list ;
local-variable-declaration ::= type local-variable-declarators ;
using-directive ::= using-alias-directive | using-namespace-directive ;
enum-type ::= type-name ;
simple-name ::= identifier type-argument-list? ;
primary-expression ::= array-creation-expression | primary-no-array-creation-expression ;
non-nullable-value-type ::= enum-type | type-name | simple-type ;
delegate-type ::= type-name ;
global-attributes ::= global-attribute-sections ;
--------------------cs::csharp-ecma-334-4.bgf--------------------
struct-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | static-constructor-declaration | type-declaration ;
iteration-statement ::= while-statement | do-statement | for-statement | foreach-statement ;
type-name ::= namespace-or-type-name ;
namespace-name ::= namespace-or-type-name ;
class-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | finalizer-declaration | static-constructor-declaration | type-declaration ;
reference-type ::= class-type | interface-type | array-type | delegate-type ;
operator-declarator ::= unary-operator-declarator | binary-operator-declarator | conversion-operator-declarator ;
variable-reference ::= expression ;
type ::= value-type | reference-type | type-parameter ;
namespace-member-declaration ::= namespace-declaration | type-declaration ;
attribute-argument-expression ::= expression ;
statement-expression ::= invocation-expression | object-creation-expression | assignment | post-increment-expression | post-decrement-expression | pre-increment-expression | pre-decrement-expression ;
local-variable-initializer ::= expression | array-initializer ;
for-iterator ::= statement-expression-list ;
struct-type ::= type-name | simple-type | nullable-type ;
primary-no-array-creation-expression ::= literal | simple-name | parenthesized-expression | member-access | invocation-expression | element-access | this-access | base-access | post-increment-expression | post-decrement-expression | object-creation-expression | delegate-creation-expression | typeof-expression | checked-expression | unchecked-expression | default-value-expression | anonymous-method-expression ;
type-argument ::= type ;
statement ::= labeled-statement | declaration-statement | embedded-statement ;
selection-statement ::= if-statement | switch-statement ;
non-array-type ::= value-type | class-type | interface-type | delegate-type | type-parameter ;
array-type ::= non-array-type rank-specifiers ;
embedded-statement ::= block | empty-statement | expression-statement | selection-statement | iteration-statement | jump-statement | try-statement | checked-statement | unchecked-statement | lock-statement | using-statement | yield-statement ;
constructor-declaration ::= attributes? constructor-modifiers? constructor-declarator constructor-body ;
type-declaration ::= class-declaration | struct-declaration | interface-declaration | enum-declaration | delegate-declaration ;
attribute-target ::= identifier | keyword ;
constant-expression ::= expression ;
for-initializer ::= local-variable-declaration | statement-expression-list ;
boolean-expression ::= expression ;
anonymous-method-parameter ::= parameter-modifier? type identifier ;
attribute ::= attribute-name attribute-arguments? ;
attribute-name ::= type-name ;
interface-member-declaration ::= interface-method-declaration | interface-property-declaration | interface-event-declaration | interface-indexer-declaration ;
expression ::= conditional-expression | assignment ;
attributes ::= attribute-sections ;
for-condition ::= boolean-expression ;
positional-argument ::= attribute-argument-expression ;
value-type ::= struct-type | enum-type ;
type-parameter ::= identifier ;
operator-declaration ::= attributes? operator-modifiers operator-declarator operator-body ;
variable-initializer ::= expression | array-initializer ;
fixed-parameter ::= attributes? parameter-modifier? type identifier ;
jump-statement ::= break-statement | continue-statement | goto-statement | return-statement | throw-statement ;
method-declaration ::= method-header method-body ;
resource-acquisition ::= local-variable-declaration | expression ;
interface-type ::= type-name ;
compilation-unit ::= extern-alias-directives? using-directives? global-attributes? namespace-member-declarations? ;
assignment ::= unary-expression assignment-operator expression ;
switch-section ::= switch-labels statement-list ;
global-attribute-target ::= identifier | keyword ;
local-variable-declaration ::= type local-variable-declarators ;
simple-name ::= identifier type-argument-list? ;
enum-type ::= type-name ;
using-directive ::= using-alias-directive | using-namespace-directive ;
primary-expression ::= array-creation-expression | primary-no-array-creation-expression ;
non-nullable-value-type ::= enum-type | type-name | simple-type ;
delegate-type ::= type-name ;
global-attributes ::= global-attribute-sections ;
--------------------cs::csharp-iso-23270-2003.bgf--------------------
struct-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | static-constructor-declaration | type-declaration ;
iteration-statement ::= while-statement | do-statement | for-statement | foreach-statement ;
type-name ::= namespace-or-type-name ;
namespace-name ::= namespace-or-type-name ;
class-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | destructor-declaration | static-constructor-declaration | type-declaration ;
reference-type ::= class-type | interface-type | array-type | delegate-type ;
operator-declarator ::= unary-operator-declarator | binary-operator-declarator | conversion-operator-declarator ;
variable-reference ::= expression ;
type ::= value-type | reference-type ;
namespace-member-declaration ::= namespace-declaration | type-declaration ;
attribute-argument-expression ::= expression ;
statement-expression ::= invocation-expression | object-creation-expression | assignment | post-increment-expression | post-decrement-expression | pre-increment-expression | pre-decrement-expression ;
local-variable-initializer ::= expression | array-initializer ;
for-iterator ::= statement-expression-list ;
struct-type ::= type-name | simple-type ;
primary-no-array-creation-expression ::= literal | simple-name | parenthesized-expression | member-access | invocation-expression | element-access | this-access | base-access | post-increment-expression | post-decrement-expression | object-creation-expression | delegate-creation-expression | typeof-expression | checked-expression | unchecked-expression ;
statement ::= labeled-statement | declaration-statement | embedded-statement ;
non-array-type ::= type ;
array-type ::= non-array-type rank-specifiers ;
selection-statement ::= if-statement | switch-statement ;
embedded-statement ::= block | empty-statement | expression-statement | selection-statement | iteration-statement | jump-statement | try-statement | checked-statement | unchecked-statement | lock-statement | using-statement ;
constructor-declaration ::= attributes? constructor-modifiers? constructor-declarator constructor-body ;
type-declaration ::= class-declaration | struct-declaration | interface-declaration | enum-declaration | delegate-declaration ;
constant-expression ::= expression ;
for-initializer ::= local-variable-declaration | statement-expression-list ;
boolean-expression ::= expression ;
attribute-name ::= type-name ;
attribute ::= attribute-name attribute-arguments? ;
interface-member-declaration ::= interface-method-declaration | interface-property-declaration | interface-event-declaration | interface-indexer-declaration ;
expression ::= conditional-expression | assignment ;
attributes ::= attribute-sections ;
for-condition ::= boolean-expression ;
positional-argument ::= attribute-argument-expression ;
value-type ::= struct-type | enum-type ;
variable-initializer ::= expression | array-initializer ;
operator-declaration ::= attributes? operator-modifiers operator-declarator operator-body ;
fixed-parameter ::= attributes? parameter-modifier? type identifier ;
jump-statement ::= break-statement | continue-statement | goto-statement | return-statement | throw-statement ;
method-declaration ::= method-header method-body ;
resource-acquisition ::= local-variable-declaration | expression ;
interface-type ::= type-name ;
compilation-unit ::= using-directives? global-attributes? namespace-member-declarations? ;
assignment ::= unary-expression assignment-operator expression ;
switch-section ::= switch-labels statement-list ;
local-variable-declaration ::= type local-variable-declarators ;
using-directive ::= using-alias-directive | using-namespace-directive ;
enum-type ::= type-name ;
simple-name ::= identifier ;
primary-expression ::= array-creation-expression | primary-no-array-creation-expression ;
delegate-type ::= type-name ;
global-attributes ::= global-attribute-sections ;
--------------------cs::csharp-iso-23270-2006.bgf--------------------
struct-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | static-constructor-declaration | type-declaration ;
iteration-statement ::= while-statement | do-statement | for-statement | foreach-statement ;
type-name ::= namespace-or-type-name ;
namespace-name ::= namespace-or-type-name ;
class-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | finalizer-declaration | static-constructor-declaration | type-declaration ;
reference-type ::= class-type | interface-type | array-type | delegate-type ;
operator-declarator ::= unary-operator-declarator | binary-operator-declarator | conversion-operator-declarator ;
variable-reference ::= expression ;
type ::= value-type | reference-type | type-parameter ;
namespace-member-declaration ::= namespace-declaration | type-declaration ;
attribute-argument-expression ::= expression ;
statement-expression ::= invocation-expression | object-creation-expression | assignment | post-increment-expression | post-decrement-expression | pre-increment-expression | pre-decrement-expression ;
local-variable-initializer ::= expression | array-initializer ;
for-iterator ::= statement-expression-list ;
struct-type ::= type-name | simple-type | nullable-type ;
primary-no-array-creation-expression ::= literal | simple-name | parenthesized-expression | member-access | invocation-expression | element-access | this-access | base-access | post-increment-expression | post-decrement-expression | object-creation-expression | delegate-creation-expression | typeof-expression | checked-expression | unchecked-expression | default-value-expression | anonymous-method-expression ;
type-argument ::= type ;
statement ::= labeled-statement | declaration-statement | embedded-statement ;
non-array-type ::= value-type | class-type | interface-type | delegate-type | type-parameter ;
array-type ::= non-array-type rank-specifiers ;
selection-statement ::= if-statement | switch-statement ;
embedded-statement ::= block | empty-statement | expression-statement | selection-statement | iteration-statement | jump-statement | try-statement | checked-statement | unchecked-statement | lock-statement | using-statement | yield-statement ;
constructor-declaration ::= attributes? constructor-modifiers? constructor-declarator constructor-body ;
type-declaration ::= class-declaration | struct-declaration | interface-declaration | enum-declaration | delegate-declaration ;
attribute-target ::= identifier | keyword ;
constant-expression ::= expression ;
for-initializer ::= local-variable-declaration | statement-expression-list ;
anonymous-method-parameter ::= parameter-modifier? type identifier ;
boolean-expression ::= expression ;
attribute-name ::= type-name ;
attribute ::= attribute-name attribute-arguments? ;
interface-member-declaration ::= interface-method-declaration | interface-property-declaration | interface-event-declaration | interface-indexer-declaration ;
expression ::= conditional-expression | assignment ;
attributes ::= attribute-sections ;
for-condition ::= boolean-expression ;
type-parameter ::= identifier ;
positional-argument ::= attribute-argument-expression ;
value-type ::= struct-type | enum-type ;
operator-declaration ::= attributes? operator-modifiers operator-declarator operator-body ;
variable-initializer ::= expression | array-initializer ;
fixed-parameter ::= attributes? parameter-modifier? type identifier ;
jump-statement ::= break-statement | continue-statement | goto-statement | return-statement | throw-statement ;
method-declaration ::= method-header method-body ;
resource-acquisition ::= local-variable-declaration | expression ;
interface-type ::= type-name ;
compilation-unit ::= extern-alias-directives? using-directives? global-attributes? namespace-member-declarations? ;
assignment ::= unary-expression assignment-operator expression ;
global-attribute-target ::= identifier | keyword ;
switch-section ::= switch-labels statement-list ;
local-variable-declaration ::= type local-variable-declarators ;
using-directive ::= using-alias-directive | using-namespace-directive ;
enum-type ::= type-name ;
simple-name ::= identifier type-argument-list? ;
primary-expression ::= array-creation-expression | primary-no-array-creation-expression ;
non-nullable-value-type ::= enum-type | type-name | simple-type ;
delegate-type ::= type-name ;
global-attributes ::= global-attribute-sections ;
--------------------cs::csharp-msft-ls-1.0.bgf--------------------
struct-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | static-constructor-declaration | type-declaration ;
iteration-statement ::= while-statement | do-statement | for-statement | foreach-statement ;
type-name ::= namespace-or-type-name ;
namespace-name ::= namespace-or-type-name ;
reference-type ::= class-type | interface-type | array-type | delegate-type ;
class-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | destructor-declaration | static-constructor-declaration | type-declaration ;
operator-declarator ::= unary-operator-declarator | binary-operator-declarator | conversion-operator-declarator ;
type ::= value-type | reference-type ;
variable-reference ::= expression ;
namespace-member-declaration ::= namespace-declaration | type-declaration ;
attribute-argument-expression ::= expression ;
statement-expression ::= invocation-expression | object-creation-expression | assignment | post-increment-expression | post-decrement-expression | pre-increment-expression | pre-decrement-expression ;
local-variable-initializer ::= expression | array-initializer ;
for-iterator ::= statement-expression-list ;
struct-type ::= type-name | simple-type ;
primary-no-array-creation-expression ::= literal | simple-name | parenthesized-expression | member-access | invocation-expression | element-access | this-access | base-access | post-increment-expression | post-decrement-expression | object-creation-expression | delegate-creation-expression | typeof-expression | checked-expression | unchecked-expression ;
statement ::= labeled-statement | declaration-statement | embedded-statement ;
selection-statement ::= if-statement | switch-statement ;
array-type ::= non-array-type rank-specifiers ;
non-array-type ::= type ;
embedded-statement ::= block | empty-statement | expression-statement | selection-statement | iteration-statement | jump-statement | try-statement | checked-statement | unchecked-statement | lock-statement | using-statement ;
constructor-declaration ::= attributes? constructor-modifiers? constructor-declarator constructor-body ;
type-declaration ::= class-declaration | struct-declaration | interface-declaration | enum-declaration | delegate-declaration ;
constant-expression ::= expression ;
for-initializer ::= local-variable-declaration | statement-expression-list ;
boolean-expression ::= expression ;
attribute-name ::= type-name ;
attribute ::= attribute-name attribute-arguments? ;
interface-member-declaration ::= interface-method-declaration | interface-property-declaration | interface-event-declaration | interface-indexer-declaration ;
expression ::= conditional-expression | assignment ;
for-condition ::= boolean-expression ;
attributes ::= attribute-sections ;
positional-argument ::= attribute-argument-expression ;
value-type ::= struct-type | enum-type ;
operator-declaration ::= attributes? operator-modifiers operator-declarator operator-body ;
variable-initializer ::= expression | array-initializer ;
jump-statement ::= break-statement | continue-statement | goto-statement | return-statement | throw-statement ;
fixed-parameter ::= attributes? parameter-modifier? type identifier ;
resource-acquisition ::= local-variable-declaration | expression ;
method-declaration ::= method-header method-body ;
interface-type ::= type-name ;
compilation-unit ::= using-directives? global-attributes? namespace-member-declarations? ;
assignment ::= unary-expression assignment-operator expression ;
switch-section ::= switch-labels statement-list ;
local-variable-declaration ::= type local-variable-declarators ;
enum-type ::= type-name ;
simple-name ::= identifier ;
using-directive ::= using-alias-directive | using-namespace-directive ;
primary-expression ::= primary-no-array-creation-expression | array-creation-expression ;
delegate-type ::= type-name ;
global-attributes ::= global-attribute-sections ;
--------------------cs::csharp-msft-ls-1.2.bgf--------------------
struct-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | static-constructor-declaration | type-declaration ;
iteration-statement ::= while-statement | do-statement | for-statement | foreach-statement ;
type-name ::= namespace-or-type-name ;
namespace-name ::= namespace-or-type-name ;
reference-type ::= class-type | interface-type | array-type | delegate-type ;
class-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | destructor-declaration | static-constructor-declaration | type-declaration ;
operator-declarator ::= unary-operator-declarator | binary-operator-declarator | conversion-operator-declarator ;
type ::= value-type | reference-type ;
variable-reference ::= expression ;
namespace-member-declaration ::= namespace-declaration | type-declaration ;
attribute-argument-expression ::= expression ;
statement-expression ::= invocation-expression | object-creation-expression | assignment | post-increment-expression | post-decrement-expression | pre-increment-expression | pre-decrement-expression ;
local-variable-initializer ::= expression | array-initializer ;
for-iterator ::= statement-expression-list ;
struct-type ::= type-name | simple-type ;
primary-no-array-creation-expression ::= literal | simple-name | parenthesized-expression | member-access | invocation-expression | element-access | this-access | base-access | post-increment-expression | post-decrement-expression | object-creation-expression | delegate-creation-expression | typeof-expression | checked-expression | unchecked-expression ;
statement ::= labeled-statement | declaration-statement | embedded-statement ;
selection-statement ::= if-statement | switch-statement ;
array-type ::= non-array-type rank-specifiers ;
non-array-type ::= type ;
embedded-statement ::= block | empty-statement | expression-statement | selection-statement | iteration-statement | jump-statement | try-statement | checked-statement | unchecked-statement | lock-statement | using-statement ;
constructor-declaration ::= attributes? constructor-modifiers? constructor-declarator constructor-body ;
type-declaration ::= class-declaration | struct-declaration | interface-declaration | enum-declaration | delegate-declaration ;
constant-expression ::= expression ;
for-initializer ::= local-variable-declaration | statement-expression-list ;
boolean-expression ::= expression ;
attribute-name ::= type-name ;
attribute ::= attribute-name attribute-arguments? ;
interface-member-declaration ::= interface-method-declaration | interface-property-declaration | interface-event-declaration | interface-indexer-declaration ;
expression ::= conditional-expression | assignment ;
for-condition ::= boolean-expression ;
attributes ::= attribute-sections ;
positional-argument ::= attribute-argument-expression ;
value-type ::= struct-type | enum-type ;
operator-declaration ::= attributes? operator-modifiers operator-declarator operator-body ;
variable-initializer ::= expression | array-initializer ;
jump-statement ::= break-statement | continue-statement | goto-statement | return-statement | throw-statement ;
fixed-parameter ::= attributes? parameter-modifier? type identifier ;
resource-acquisition ::= local-variable-declaration | expression ;
method-declaration ::= method-header method-body ;
interface-type ::= type-name ;
compilation-unit ::= using-directives? global-attributes? namespace-member-declarations? ;
assignment ::= unary-expression assignment-operator expression ;
switch-section ::= switch-labels statement-list ;
local-variable-declaration ::= type local-variable-declarators ;
enum-type ::= type-name ;
simple-name ::= identifier ;
using-directive ::= using-alias-directive | using-namespace-directive ;
primary-expression ::= primary-no-array-creation-expression | array-creation-expression ;
delegate-type ::= type-name ;
global-attributes ::= global-attribute-sections ;
--------------------cs::csharp-msft-ls-3.0.bgf--------------------
struct-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | static-constructor-declaration | type-declaration ;
iteration-statement ::= while-statement | do-statement | for-statement | foreach-statement ;
type-name ::= namespace-or-type-name ;
query-expression ::= from-clause query-body ;
namespace-name ::= namespace-or-type-name ;
class-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | destructor-declaration | static-constructor-declaration | type-declaration ;
implicit-anonymous-function-parameter ::= identifier ;
reference-type ::= class-type | interface-type | array-type | delegate-type ;
operator-declarator ::= unary-operator-declarator | binary-operator-declarator | conversion-operator-declarator ;
variable-reference ::= expression ;
type ::= value-type | reference-type | type-parameter ;
namespace-member-declaration ::= namespace-declaration | type-declaration ;
attribute-argument-expression ::= expression ;
statement-expression ::= invocation-expression | object-creation-expression | assignment | post-increment-expression | post-decrement-expression | pre-increment-expression | pre-decrement-expression ;
query-body-clause ::= from-clause | let-clause | where-clause | join-clause | join-into-clause | orderby-clause ;
local-variable-initializer ::= expression | array-initializer ;
for-iterator ::= statement-expression-list ;
struct-type ::= type-name | simple-type | nullable-type ;
primary-no-array-creation-expression ::= literal | simple-name | parenthesized-expression | member-access | invocation-expression | element-access | this-access | base-access | post-increment-expression | post-decrement-expression | object-creation-expression | delegate-creation-expression | anonymous-object-creation-expression | typeof-expression | checked-expression | unchecked-expression | default-value-expression | anonymous-method-expression ;
type-argument ::= type ;
statement ::= labeled-statement | declaration-statement | embedded-statement ;
selection-statement ::= if-statement | switch-statement ;
array-type ::= non-array-type rank-specifiers ;
non-array-type ::= type ;
embedded-statement ::= block | empty-statement | expression-statement | selection-statement | iteration-statement | jump-statement | try-statement | checked-statement | unchecked-statement | lock-statement | using-statement | yield-statement ;
constructor-declaration ::= attributes? constructor-modifiers? constructor-declarator constructor-body ;
type-declaration ::= class-declaration | struct-declaration | interface-declaration | enum-declaration | delegate-declaration ;
anonymous-function-signature ::= explicit-anonymous-function-signature | implicit-anonymous-function-signature ;
constant-expression ::= expression ;
for-initializer ::= local-variable-declaration | statement-expression-list ;
boolean-expression ::= expression ;
attribute ::= attribute-name attribute-arguments? ;
attribute-name ::= type-name ;
interface-member-declaration ::= interface-method-declaration | interface-property-declaration | interface-event-declaration | interface-indexer-declaration ;
non-assignment-expression ::= conditional-expression | lambda-expression | query-expression ;
expression ::= non-assignment-expression | assignment ;
attributes ::= attribute-sections ;
anonymous-function-body ::= expression | block ;
for-condition ::= boolean-expression ;
select-or-group-clause ::= select-clause | group-clause ;
positional-argument ::= attribute-argument-expression ;
value-type ::= struct-type | enum-type ;
type-parameter ::= identifier ;
ordering ::= expression ordering-direction? ;
operator-declaration ::= attributes? operator-modifiers operator-declarator operator-body ;
variable-initializer ::= expression | array-initializer ;
fixed-parameter ::= attributes? parameter-modifier? type identifier ;
jump-statement ::= break-statement | continue-statement | goto-statement | return-statement | throw-statement ;
object-or-collection-initializer ::= object-initializer | collection-initializer ;
method-declaration ::= method-header method-body ;
resource-acquisition ::= local-variable-declaration | expression ;
interface-type ::= type-name ;
assignment ::= unary-expression assignment-operator expression ;
explicit-anonymous-function-parameter ::= anonymous-function-parameter-modifier? type identifier ;
switch-section ::= switch-labels statement-list ;
local-variable-declaration ::= local-variable-type local-variable-declarators ;
query-body ::= query-body-clauses? select-or-group-clause query-continuation? ;
initializer-value ::= expression | object-or-collection-initializer ;
simple-name ::= identifier type-argument-list? ;
enum-type ::= type-name ;
using-directive ::= using-alias-directive | using-namespace-directive ;
primary-expression ::= primary-no-array-creation-expression | array-creation-expression ;
non-nullable-value-type ::= type ;
delegate-type ::= type-name ;
global-attributes ::= global-attribute-sections ;
--------------------cs::csharp-msft-ls-4.0.bgf--------------------
iteration-statement ::= while-statement | do-statement | for-statement | foreach-statement ;
reference-type ::= class-type | interface-type | array-type | delegate-type ;
operator-declarator ::= unary-operator-declarator | binary-operator-declarator | conversion-operator-declarator ;
namespace-member-declaration ::= namespace-declaration | type-declaration ;
attribute-argument-expression ::= expression ;
query-body-clause ::= from-clause | let-clause | where-clause | join-clause | join-into-clause | orderby-clause ;
for-iterator ::= statement-expression-list ;
type-argument ::= type ;
statement ::= labeled-statement | declaration-statement | embedded-statement ;
selection-statement ::= if-statement | switch-statement ;
embedded-statement ::= block | empty-statement | expression-statement | selection-statement | iteration-statement | jump-statement | try-statement | checked-statement | unchecked-statement | lock-statement | using-statement | yield-statement ;
type-declaration ::= class-declaration | struct-declaration | interface-declaration | enum-declaration | delegate-declaration ;
anonymous-function-signature ::= explicit-anonymous-function-signature | implicit-anonymous-function-signature ;
constant-expression ::= expression ;
for-initializer ::= local-variable-declaration | statement-expression-list ;
boolean-expression ::= expression ;
interface-member-declaration ::= interface-method-declaration | interface-property-declaration | interface-event-declaration | interface-indexer-declaration ;
attributes ::= attribute-sections ;
positional-argument ::= argument-name? attribute-argument-expression ;
select-or-group-clause ::= select-clause | group-clause ;
type-parameter ::= identifier ;
ordering ::= expression ordering-direction? ;
operator-declaration ::= attributes? operator-modifiers operator-declarator operator-body ;
object-or-collection-initializer ::= object-initializer | collection-initializer ;
resource-acquisition ::= local-variable-declaration | expression ;
interface-type ::= type-name ;
assignment ::= unary-expression assignment-operator expression ;
explicit-anonymous-function-parameter ::= anonymous-function-parameter-modifier? type identifier ;
switch-section ::= switch-labels statement-list ;
local-variable-declaration ::= local-variable-type local-variable-declarators ;
simple-name ::= identifier type-argument-list? ;
initializer-value ::= expression | object-or-collection-initializer ;
using-directive ::= using-alias-directive | using-namespace-directive ;
primary-expression ::= primary-no-array-creation-expression | array-creation-expression ;
global-attributes ::= global-attribute-sections ;
struct-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | static-constructor-declaration | type-declaration ;
type-name ::= namespace-or-type-name ;
query-expression ::= from-clause query-body ;
argument ::= argument-name? argument-value ;
namespace-name ::= namespace-or-type-name ;
implicit-anonymous-function-parameter ::= identifier ;
class-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | destructor-declaration | static-constructor-declaration | type-declaration ;
variable-reference ::= expression ;
type ::= value-type | reference-type | type-parameter ;
statement-expression ::= invocation-expression | object-creation-expression | assignment | post-increment-expression | post-decrement-expression | pre-increment-expression | pre-decrement-expression ;
local-variable-initializer ::= expression | array-initializer ;
struct-type ::= type-name | simple-type | nullable-type ;
primary-no-array-creation-expression ::= literal | simple-name | parenthesized-expression | member-access | invocation-expression | element-access | this-access | base-access | post-increment-expression | post-decrement-expression | object-creation-expression | delegate-creation-expression | anonymous-object-creation-expression | typeof-expression | checked-expression | unchecked-expression | default-value-expression | anonymous-method-expression ;
array-type ::= non-array-type rank-specifiers ;
non-array-type ::= type ;
constructor-declaration ::= attributes? constructor-modifiers? constructor-declarator constructor-body ;
attribute ::= attribute-name attribute-arguments? ;
attribute-name ::= type-name ;
non-assignment-expression ::= conditional-expression | lambda-expression | query-expression ;
expression ::= non-assignment-expression | assignment ;
anonymous-function-body ::= expression | block ;
for-condition ::= boolean-expression ;
value-type ::= struct-type | enum-type ;
variable-initializer ::= expression | array-initializer ;
fixed-parameter ::= attributes? parameter-modifier? type identifier default-argument? ;
jump-statement ::= break-statement | continue-statement | goto-statement | return-statement | throw-statement ;
method-declaration ::= method-header method-body ;
query-body ::= query-body-clauses? select-or-group-clause query-continuation? ;
enum-type ::= type-name ;
non-nullable-value-type ::= type ;
delegate-type ::= type-name ;
--------------------cs::csharp-zaytsev.bgf--------------------
struct-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | static-constructor-declaration | type-declaration ;
iteration-statement ::= while-statement | do-statement | for-statement | foreach-statement ;
for-initializer ::= local-variable-declaration | statement-expression-list ;
argument ::= ref-or-out? expression ;
attribute-name ::= qualified-identifier ;
attribute ::= attribute-name attribute-arguments? ;
class-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | destructor-declaration | static-constructor-declaration | type-declaration ;
interface-member-declaration ::= interface-method-declaration | interface-property-declaration | interface-event-declaration | interface-indexer-declaration ;
operator-declarator ::= unary-operator-declarator | binary-operator-declarator | conversion-operator-declarator ;
type ::= non-array-type rank-specifier* ;
namespace-member-declaration ::= namespace-declaration | type-declaration ;
attributes ::= attribute-section* ;
variable-initializer ::= expression | array-initializer ;
operator-declaration ::= attributes operator-modifier+ operator-declarator maybe-empty-block ;
fixed-parameter ::= attributes parameter-modifier? type lex-csharp/identifier ;
jump-statement ::= break-statement | continue-statement | goto-statement | return-statement | throw-statement ;
statement ::= labeled-statement | declaration-statement | embedded-statement ;
non-array-type ::= qualified-identifier | built-in-type ;
array-type ::= non-array-type rank-specifier+ ;
resource-acquisition ::= local-variable-declaration | expression ;
method-declaration ::= method-header maybe-empty-block ;
selection-statement ::= if-statement | switch-statement ;
compilation-unit ::= using-directive* global-attributes namespace-member-declaration* ;
switch-section ::= switch-label+ statement+ ;
constructor-declaration ::= attributes constructor-modifier* constructor-declarator maybe-empty-block ;
type-declaration ::= class-declaration | struct-declaration | interface-declaration | enum-declaration | delegate-declaration ;
global-attributes ::= global-attribute-section* ;
--------------------cs::csharp-antoniol.bgf--------------------
long_comment ::= comment+ ;
any_other_line ::= not_newline* ;
program ::= line* ;
ifdef_token ::= ifdef_line | elsedef_line | elsifdef_line | endifdef_line ;
--------------------cs::csharp-bruneliere.bgf--------------------
Integer ::= integer() ;
String ::= string() ;
--------------------cs::csharp-cordy.bgf--------------------
struct_member_declaration ::= constant_declaration | field_declaration | method_declaration | property_declaration | event_declaration | indexer_declaration | operator_declaration | constructor_declaration | static_constructor_declaration | type_declaration ;
interface_type_list ::= interface_type+ ;
class_member_declaration ::= constant_declaration | field_declaration | method_declaration | property_declaration | event_declaration | indexer_declaration | operator_declaration | constructor_declaration | finalizer_declaration | static_constructor_declaration | type_declaration ;
selection_statement ::= if_statement | switch_statement ;
simple_name ::= id type_argument_list? ;
constructor_modifiers ::= constructor_modifier+ ;
field_modifiers ::= field_modifier+ ;
class_member_declarations ::= class_member_declaration+ ;
interface_modifiers ::= interface_modifier* ;
class_modifiers ::= class_modifier+ ;
type_declaration ::= class_declaration | struct_declaration | interface_declaration | enum_declaration | delegate_declaration ;
primary_expression ::= array_creation_expression | primary_no_array_creation_expression | object_initializer_expression ;
input_parameter ::= type? id ;
non_nullable_value_type ::= enum_type | type_name | simple_type ;
unmanaged_type ::= value_type | reference_type | type_parameter ;
global_attributes ::= global_attribute_sections ;
local_variable_declarators ::= local_variable_declarator+ ;
attribute_sections ::= attribute_section+ ;
src_expr ::= expression ;
type_name ::= namespace_or_type_name ;
namespace_name ::= namespace_or_type_name ;
query_expression ::= from_clause IN query_body EX ;
statement ::= labeled_statement | declaration_statement | embedded_statement ;
statement_list ::= statement+ ;
for_initializer ::= local_variable_declaration | statement_expression_list ;
switch_labels ::= switch_label+ ;
key_expr_ascending_descending ::= key_expr ascending_descending? ;
statement_expression ::= primary_no_array_creation_expression | object_creation_expression | assignment | pre_increment_expression | pre_decrement_expression ;
rank_specifiers ::= rank_specifier* ;
expression_list ::= expression+ ;
type_parameter ::= id ;
struct_type ::= type_name | simple_type | nullable_type ;
attribute_list ::= attribute+ ;
catch_clauses ::= specific_catch_clauses? general_catch_clause? ;
array_type ::= non_array_type rank_specifiers ;
member_initializer_list ::= member_initializer+ ;
operator_declaration ::= attributes? operator_modifiers? operator_declarator operator_body ;
anonymous_method_parameter ::= parameter_modifier? type id ;
resource_acquisition ::= local_variable_declaration | expression ;
class_and_interface_type_ist ::= class_or_interface_type+ ;
namespace_member_declarations ::= namespace_member_declaration+ ;
switch_section ::= switch_labels NL IN statement_list EX ;
switch_sections ::= switch_section+ ;
attributes ::= attribute_sections ;
class_or_interface_type ::= class_type | interface_type ;
key_expr ::= expression ;
struct_member_declarations ::= struct_member_declaration+ ;
variable_declarator ::= id equals_variable_initializer? ;
using_directive ::= using_alias_directive | using_namespace_directive ;
enum_member_declaration ::= attributes? id equals_constant_expression? ;
pred_expr ::= expression ;
attribute_name ::= type_name ;
assignment ::= unary_expression assignment_operator expression ;
attributes_type_parameter ::= attributes? type_parameter ;
variable_reference ::= expression ;
value_type ::= struct_type | enum_type ;
constant_declarators ::= constant_declarator+ ;
formal_parameter_list ::= fixed_parameters comma_parameter_array? ;
delegate_modifiers ::= delegate_modifier+ ;
anonymous_method_parameter_list ::= anonymous_method_parameter+ ;
enum_modifiers ::= enum_modifier+ ;
variable_initializer_list ::= variable_initializer+ ;
indexer_modifiers ::= indexer_modifier+ ;
sel_expr ::= expression ;
query_body ::= query_body_clause* final_query_clause query_continuation? ;
interface_member_declarations ::= interface_member_declaration+ ;
enum_type ::= type_name ;
attribute_argument_expression ::= expression ;
item_name ::= type? simple_name ;
unbound_type_name ::= id colon_colon_id? generic_dimension_specifier? dot_id_generic_dimension_specifier* ;
constructor_declaration ::= attributes? constructor_modifiers? constructor_declarator NL constructor_body NL ;
delegate_type ::= type_name ;
global_attribute_target ::= id | key ;
literal ::= boolean_literal | integer_literal | real_literal | character_literal | string_literal | null_literal ;
reference_type ::= class_type | interface_type | array_type | delegate_type ;
integer_literal ::= decimal_integer_literal | hexadecimal_integer_literal ;
operator_declarator ::= unary_operator_declarator | binary_operator_declarator | conversion_operator_declarator ;
qualified_identifier ::= id dot_id* ;
for_condition ::= boolean_expression ;
for_iterator ::= statement_expression_list ;
type_argument ::= type ;
operator_modifiers ::= operator_modifier+ ;
constant_modifiers ::= constant_modifier+ ;
variable_initializer ::= expression | array_initializer ;
variable_declarators ::= variable_declarator+ ;
using_directives ::= using_directive+ NL ;
method_modifiers ::= method_modifier+ ;
jump_statement ::= break_statement | continue_statement | goto_statement | return_statement | throw_statement ;
attribute ::= attribute_name attribute_arguments? ;
method_declaration ::= method_header NL method_body NL ;
interface_member_declaration ::= interface_method_declaration | interface_property_declaration | interface_event_declaration | interface_indexer_declaration ;
character_literal ::= charlit ;
type_parameter_constraint ::= primary_constraint | secondary_constraint | constructor_constraint ;
expression ::= conditional_expression | assignment | query_expression | lambda_expression ;
event_modifiers ::= event_modifier+ ;
fixed_pointer_declarators ::= fixed_pointer_declarator+ ;
fixed_parameters ::= fixed_parameter+ ;
statement_expression_list ::= statement_expression+ ;
attribute_target ::= id | key ;
specific_catch_clauses ::= specific_catch_clause+ ;
constant_expression ::= expression ;
struct_modifiers ::= struct_modifier+ ;
property_modifiers ::= property_modifier+ ;
extern_alias_directives ::= extern_alias_directive+ NL ;
non_array_type ::= value_type | class_type | interface_type | delegate_type | type_parameter ;
member_name ::= interface_type_dot? id ;
type_parameters ::= attributes_type_parameter+ ;
boolean_expression ::= expression ;
global_attribute_sections ::= global_attribute_section+ ;
iteration_statement ::= while_statement | do_statement | for_statement | foreach_statement ;
local_variable_declaration ::= type local_variable_declarators ;
secondary_constraint ::= interface_type | type_parameter ;
positional_argument ::= attribute_argument_expression ;
program ::= compilation_unit ;
string_literal ::= stringlit ;
type_parameter_constraints_clauses ::= type_parameter_constraints_clause+ ;
attribute_argument ::= positional_argument | named_argument ;
enum_member_declarations ::= enum_member_declaration+ ;
interface_type ::= type_name ;
local_variable_declarator ::= id equals_local_variable_initializer? ;
compilation_unit ::= extern_alias_directives? using_directives? global_attributes? namespace_member_declarations? ;
--------------------cs::csharp-ecma-334-1.bgf--------------------
struct-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | static-constructor-declaration | type-declaration ;
iteration-statement ::= while-statement | do-statement | for-statement | foreach-statement ;
type-name ::= namespace-or-type-name ;
namespace-name ::= namespace-or-type-name ;
class-member-declaration ::= constant-declaration | field-declaration | method-declaration | property-declaration | event-declaration | indexer-declaration | operator-declaration | constructor-declaration | destructor-declaration | static-constructor-declaration | type-declaration ;
reference-type ::= class-type | interface-type | array-type | delegate-type ;
operator-declarator ::= unary-operator-declarator | binary-operator-declarator | conversion-operator-declarator ;
variable-reference ::= expression ;
type ::= value-type | reference-type ;
namespace-member-declaration ::= namespace-declaration | type-declaration ;
attribute-argument-expression ::= expression ;
statement-expression ::= invocation-expression | object-creation-expression | assignment | post-increment-expression | post-decrement-expression | pre-increment-expression | pre-decrement-expression ;
local-variable-initializer ::= expression | array-initializer ;
for-iterator ::= statement-expression-list ;
struct-type ::= type-name | simple-type ;
primary-no-array-creation-expression ::= literal | simple-name | parenthesized-expression | member-access | invocation-expression | element-access | this-access | base-access | post-increment-expression | post-decrement-expression | object-creation-expression | delegate-creation-expression | typeof-expression | checked-expression | unchecked-expression ;
statement ::= labeled-statement | declaration-statement | embedded-statement ;
selection-statement ::= if-statement | switch-statement ;
array-type ::= non-array-type rank-specifiers ;
non-array-type ::= type ;
embedded-statement ::= block | empty-statement | expression-statement | selection-statement | iteration-statement | jump-statement | try-statement | checked-statement | unchecked-statement | lock-statement | using-statement ;
constructor-declaration ::= attributes? constructor-modifiers? constructor-declarator constructor-body ;
type-declaration ::= class-declaration | struct-declaration | interface-declaration | enum-declaration | delegate-declaration ;
constant-expression ::= expression ;
for-initializer ::= local-variable-declaration | statement-expression-list ;
boolean-expression ::= expression ;
attribute-name ::= type-name ;
attribute ::= attribute-name attribute-arguments? ;
interface-member-declaration ::= interface-method-declaration | interface-property-declaration | interface-event-declaration | interface-indexer-declaration ;
expression ::= conditional-expression | assignment ;
attributes ::= attribute-sections ;
for-condition ::= boolean-expression ;
positional-argument ::= attribute-argument-expression ;
value-type ::= struct-type | enum-type ;
operator-declaration ::= attributes? operator-modifiers operator-declarator operator-body ;
variable-initializer ::= expression | array-initializer ;
fixed-parameter ::= attributes? parameter-modifier? type identifier ;
jump-statement ::= break-statement | continue-statement | goto-statement | return-statement | throw-statement ;
method-declaration ::= method-header method-body ;
interface-type ::= type-name ;
resource-acquisition ::= local-variable-declaration | expression ;
compilation-unit ::= using-directives? global-attributes? namespace-member-declarations? ;
assignment ::= unary-expression assignment-operator expression ;
switch-section ::= switch-labels statement-list ;
local-variable-declaration ::= type local-variable-declarators ;
using-directive ::= using-alias-directive | using-namespace-directive ;
enum-type ::= type-name ;
simple-name ::= identifier ;
primary-expression ::= array-creation-expression | primary-no-array-creation-expression ;
delegate-type ::= type-name ;
global-attributes ::= global-attribute-sections ;
--------------------dart::spec-0.01.bgf--------------------
selector ::= assignableSelector | arguments ;
scriptDefinition ::= scriptTag? libraryName? libraryImport* include* resource* topLevelDefinition* ;
type ::= qualified typeArguments? ;
postfixOperator ::= incrementOperator ;
HEX_DIGIT_SEQUENCE ::= HEX_DIGIT HEX_DIGIT? HEX_DIGIT? HEX_DIGIT? HEX_DIGIT? HEX_DIGIT? HEX_DIGIT? ;
namedArgument ::= label expression ;
prefixOperator ::= additiveOperator | negateOperator ;
normalFormalParameter ::= functionSignature | fieldFormalParameter | simpleFormalParameter ;
unaryOperator ::= negateOperator ;
functionExpression ::= (returnType? identifier)? formalParameterList functionExpressionBody ;
statement ::= label* nonLabelledStatement ;
literal ::= nullLiteral | booleanLiteral | numericLiteral | stringLiteral | mapLiteral | listLiteral ;
libraryDefinition ::= scriptTag? libraryName libraryImport* include* resource* topLevelDefinition* ;
prefixExpression ::= prefixOperator unaryExpression ;
functionPrefix ::= returnType? identifier ;
IDENTIFIER_PART ::= IDENTIFIER_START | DIGIT ;
IDENTIFIER ::= IDENTIFIER_START IDENTIFIER_PART* ;
identifier ::= IDENTIFIER_NO_DOLLAR | IDENTIFIER | BUILT_IN_IDENTIFIER ;
simpleFormalParameter ::= declaredIdentifier | identifier ;
compilationUnit ::= topLevelDefinition* EOF ;
binaryOperator ::= multiplicativeOperator | additiveOperator | shiftOperator | relationalOperator | equalityOperator | bitwiseOperator ;
statements ::= statement* ;
IDENTIFIER_PART_NO_DOLLAR ::= IDENTIFIER_START_NO_DOLLAR | DIGIT ;
IDENTIFIER_NO_DOLLAR ::= IDENTIFIER_START_NO_DOLLAR IDENTIFIER_PART_NO_DOLLAR* ;
declaredIdentifier ::= finalVarOrType identifier ;
numericLiteral ::= NUMBER | HEX_NUMBER ;
functionSignature ::= returnType? identifier formalParameterList ;
--------------------dart::google.bgf--------------------
libraryBody ::= libraryImport? librarySource? ;
type ::= qualified typeArguments? ;
postfixOperator ::= incrementOperator ;
tryStatement ::= TRY block (catchPart+ finallyPart?) | finallyPart ;
NUMBER_OPT_ILLEGAL_END ::= ε ;
statement ::= label* nonLabelledStatement ;
literal ::= NULL | TRUE | FALSE | HEX_NUMBER | NUMBER | STRING ;
IDENTIFIER ::= IDENTIFIER_START IDENTIFIER_PART* ;
identifier ::= IDENTIFIER_NO_DOLLAR | IDENTIFIER | ABSTRACT | ASSERT | CLASS | EXTENDS | FACTORY | GET | IMPLEMENTS | IMPORT | INTERFACE | IS | LIBRARY | NATIVE | NEGATE | OPERATOR | SET | SOURCE | STATIC | TYPEDEF ;
simpleFormalParameter ::= declaredIdentifier | identifier ;
compilationUnit ::= HASHBANG? directive* topLevelDefinition* EOF ;
statements ::= statement* ;
constantConstructorDeclaration ::= CONST qualified formalParameterList ;
IDENTIFIER_NO_DOLLAR ::= IDENTIFIER_START_NO_DOLLAR IDENTIFIER_PART_NO_DOLLAR* ;
libraryUnit ::= libraryDefinition EOF ;
selector ::= assignableSelector | arguments ;
superclass ::= EXTENDS type ;
constantExpression ::= expression ;
interfaces ::= IMPLEMENTS typeList ;
factorySpecification ::= FACTORY type ;
prefixOperator ::= additiveOperator | negateOperator ;
finallyPart ::= FINALLY block ;
namedArgument ::= label expression ;
superinterfaces ::= EXTENDS typeList ;
normalFormalParameter ::= functionDeclaration | fieldFormalParameter | simpleFormalParameter ;
functionExpression ::= (returnType? identifier)? formalParameterList functionExpressionBody ;
typeParameter ::= identifier (EXTENDS type)? ;
functionPrefix ::= returnType? identifier ;
returnType ::= VOID | type ;
IDENTIFIER_PART ::= IDENTIFIER_START | DIGIT ;
getOrSet ::= GET | SET ;
IDENTIFIER_PART_NO_DOLLAR ::= IDENTIFIER_START_NO_DOLLAR | DIGIT ;
compoundLiteral ::= listLiteral | mapLiteral ;
functionDeclaration ::= returnType? identifier formalParameterList ;
primary ::= primaryNoFE | primaryFE ;
primaryFE ::= functionExpression | primaryNoFE ;
--------------------dart::spec-0.05.bgf--------------------
selector ::= assignableSelector | arguments ;
scriptDefinition ::= scriptTag? libraryName? import* include* resource* topLevelDefinition* ;
type ::= qualified typeArguments? ;
postfixOperator ::= incrementOperator ;
HEX_DIGIT_SEQUENCE ::= HEX_DIGIT HEX_DIGIT? HEX_DIGIT? HEX_DIGIT? HEX_DIGIT? HEX_DIGIT? HEX_DIGIT? ;
namedArgument ::= label expression ;
operatorSignature ::= returnType? operator operator formalParameterList ;
normalFormalParameter ::= functionSignature | fieldFormalParameter | simpleFormalParameter ;
unaryOperator ::= negateOperator ;
functionExpression ::= (returnType? identifier)? formalParameterList functionExpressionBody ;
statement ::= label* nonLabelledStatement ;
literal ::= nullLiteral | booleanLiteral | numericLiteral | stringLiteral | mapLiteral | listLiteral ;
libraryDefinition ::= scriptTag? libraryName import* include* resource* topLevelDefinition* ;
functionPrefix ::= returnType? identifier ;
IDENTIFIER_PART ::= IDENTIFIER_START | DIGIT ;
identifier ::= IDENTIFIER_NO_DOLLAR | IDENTIFIER | BUILT_IN_IDENTIFIER ;
IDENTIFIER ::= IDENTIFIER_START IDENTIFIER_PART* ;
simpleFormalParameter ::= declaredIdentifier | identifier ;
compilationUnit ::= topLevelDefinition* EOF ;
binaryOperator ::= multiplicativeOperator | additiveOperator | shiftOperator | relationalOperator | equalityOperator | bitwiseOperator ;
statements ::= statement* ;
IDENTIFIER_PART_NO_DOLLAR ::= IDENTIFIER_START_NO_DOLLAR | DIGIT ;
IDENTIFIER_NO_DOLLAR ::= IDENTIFIER_START_NO_DOLLAR IDENTIFIER_PART_NO_DOLLAR* ;
declaredIdentifier ::= finalVarOrType identifier ;
numericLiteral ::= NUMBER | HEX_NUMBER ;
functionSignature ::= returnType? identifier formalParameterList ;
--------------------eiffel::bezault.bgf--------------------
New_export_item ::= Clients Feature_set ;
Call ::= Qualified_call | Precursor ;
Entity_declaration_group ::= Identifier_list Type_mark ;
Attribute ::= Identifier ;
Tag ::= Identifier ;
Bit_length ::= Integer_constant | Attribute ;
Feature_clause ::= Clients? Header_comment? Feature_declaration_list ;
Binary_expression ::= Expression Infix_operator Expression ;
Null_instruction ::= ε ;
Operator_expression ::= Parenthesized | Unary_expression | Binary_expression ;
Language_name ::= Manifest_string ;
Unlabeled_assertion_clause ::= Boolean_expression | Comment ;
Boolean_expression ::= Expression ;
Creation_clause ::= Clients? Header_comment? Procedure_list ;
Actual ::= Expression | Address ;
Instruction ::= Creation | Call | Assignment | Assignment_attempt | Conditional | Multi_branch | Loop | Debug | Check | Retry | Null_instruction ;
Actual_generics ::= Type_list? ;
Assertion_clause ::= Tag_mark? Unlabeled_assertion_clause ;
Formal_generics ::= Formal_generic_list? ;
Declaration_body ::= Formal_arguments? Type_mark? Constant_or_routine? ;
Message ::= Manifest_string ;
Formal_generic ::= Formal_generic_name Constraint? ;
Integer_constant ::= Sign? Integer ;
Index_value ::= Identifier | Manifest_constant ;
Formal_generic_name ::= Identifier ;
Choice_constant ::= Integer_constant | Character_constant | Attribute ;
Internal ::= Routine_mark Compound ;
Routine_body ::= Effective | Deferred ;
Index_clause ::= Index? Index_terms ;
Equality ::= Expression Comparison Expression ;
Unqualified_call ::= Identifier Actuals? ;
Type ::= Class_type | Class_type_expanded | Class_type_separate | Anchored | Bit_type ;
Procedure_name ::= Identifier ;
Manifest_constant ::= Boolean_constant | Character_constant | Integer_constant | Real_constant | Manifest_string | Bit_constant | Wide_character_constant | Wide_manifest_string | Hexadecimal_constant ;
Feature_name ::= Identifier | Prefix | Infix ;
Debug_key ::= Manifest_string ;
Infix_operator ::= Binary | Free_operator ;
Class_name ::= Identifier ;
Prefix_operator ::= Unary | Free_operator ;
Feature_declaration ::= New_feature_list Declaration_body ;
Parent ::= Class_type Feature_adaptation? ;
Unary_expression ::= Prefix_operator Expression ;
Feature_value ::= Manifest_constant | Unique | Routine ;
Effective ::= Internal | External ;
Real_constant ::= Sign? Real ;
Qualified_call ::= Call_qualifier? Call_chain ;
Choice ::= Choice_constant | Interval ;
Class_type ::= Class_name Actual_generics? ;
--------------------eiffel::cordy.bgf--------------------
Entity_declaration_list ::= IN NL Entity_declaration_group_Separator* EX ;
New_export_item ::= Clients Feature_set ;
Restricted_type ::= Restricted_class_type | Formal_generic_name ;
Call ::= Parenthesized_qualifier? Call_chain ;
Attribute ::= Identifier ;
Tag ::= Identifier ;
Prefix_name ::= Manifest_string ;
Feature_clause ::= Header_comment? Feature_declaration_list ;
Free_operator ::= free_operator ;
Binary_expression ::= Unary_expression Infix_operator_Unary_expression* ;
Operator_expression ::= Parenthesized | Binary_expression ;
Parent_list ::= Parent_Separator* ;
Language_name ::= Manifest_string ;
Formal_entity_declaration_list ::= Formal_entity_declaration_group_Separator* ;
Instruction ::= Creation | Call | Assignment | Assignment_attempt | Conditional | Multi_branch | Loop | Debug | Check | Retry | Null ;
Assertion_clause ::= Tag_mark? Unlabeled_assertion_clause ;
Then_part_list ::= Then_part elseif_Then_part* ;
Message ::= Manifest_string ;
Declaration_body ::= Formal_arguments? Type_mark? is_Constant? ;
Creators ::= creation_Creation_clause+ ;
Restricted_class_type ::= Class_name Restricted_actual_generics? ;
Assertion ::= NL IN Assertion_clause_Separator* EX ;
Index_clause_Separator ::= Index_clause Separator ;
Constant_attribute ::= Entity ;
Comparison_Operator_expression ::= Comparison Operator_expression ;
Internal ::= Routine_mark Compound ;
Routine_body ::= Effective | Deferred ;
Features ::= feature_Feature_clause+ ;
Type ::= Class_type | Class_type_expanded | Formal_generic_name | Anchored | Bit_type ;
Identifier_list ::= Identifier+ ;
Feature_name ::= Identifier | Prefix | Infix ;
Bit_sequence ::= bit_sequence ;
Infix_operator ::= Binary | Free_operator ;
Debug_key ::= Manifest_string ;
Header_comment ::= Comment ;
Compound ::= IN NL Instruction_Separator* EX ;
Parent ::= Restricted_class_type Feature_adaptation? ;
Identifier ::= id ;
Unary_expression ::= Prefix_operator* Primitive_expression ;
Feature_value ::= Manifest_constant | Unique ;
When_part_list ::= when_When_part+ ;
Constant ::= Manifest_constant | Constant_attribute ;
Choice ::= Constant | Interval ;
Class_type ::= Class_name Actual_generics? ;
Call_chain ::= Unqualified_call dot_Unqualified_call* ;
Writable ::= Attribute | Local ;
Comment ::= comment ;
Real ::= real_number ;
Entity_declaration_group ::= Identifier_list Type_mark ;
Infix_name ::= Manifest_string ;
Expression ::= Equality ;
Bit_constant ::= Bit_sequence ;
Infix_operator_Unary_expression ::= Infix_operator Unary_expression ;
Instruction_Separator ::= Instruction Separator ;
Assertion_clause_Separator ::= Assertion_clause Separator ;
Unlabeled_assertion_clause ::= Boolean_expression | Comment ;
Creation_clause ::= Clients? Header_comment? Feature_list NL ;
Boolean_expression ::= Expression ;
Actual ::= Expression | Address ;
Formal_generic ::= Formal_generic_name Constraint? ;
New_feature_list ::= New_feature+ ;
Integer_constant ::= Sign? Integer ;
Formal_generic_name ::= Identifier ;
Integer ::= integer ;
Index_clause ::= Index? Index_terms ;
Character_constant ::= character_constant ;
Unqualified_call ::= Entity Actuals? ;
Equality ::= Operator_expression Comparison_Operator_expression* ;
Routine_feature_declaration ::= NL New_feature_list Routine_declaration_body ;
Manifest_constant ::= Boolean_constant | Character_constant | Integer_constant | Real_constant | Manifest_string | Bit_constant ;
Class_name ::= Identifier ;
Prefix_operator ::= Unary | Free_operator ;
Feature_declaration ::= New_feature_list Declaration_body ;
Primitive_expression ::= Call | Manifest_constant | Manifest_array | Old | Strip | Parenthesized ;
Parent_Separator ::= Parent Separator ;
Formal ::= Identifier ;
Feature_declaration_list ::= IN NL Feature_declaration_Separator* EX ;
Index_list ::= NL IN Index_clause_Separator* EX ;
New_export_list ::= New_export_item_Separator* ;
Effective ::= Internal | External ;
Real_constant ::= Sign? Real ;
New_export_item_Separator ::= New_export_item Separator ;
Entity_declaration_group_Separator ::= Entity_declaration_group Separator ;
program ::= Class_declaration* ;
Entity ::= Writable | Read_only ;
Routine_declaration_body ::= Formal_arguments? Type_mark? is_Routine? ;
Manifest_string ::= string ;
--------------------eiffel::iso-25436-2006.bgf--------------------
New_export_item ::= Clients Header_comment? Feature_set ;
Call ::= Object_call | Non_object_call ;
Special_expression ::= Manifest_constant | Manifest_tuple | Agent | Object_test | Once_string | Address ;
Call_agent_body ::= Agent_qualified | Agent_unqualified ;
Tag ::= Identifier ;
Binary_expression ::= Expression Binary Expression ;
Operator_expression ::= Unary_expression | Binary_expression ;
Instruction ::= Creation_instruction | Call | Assignment | Assigner_call | Conditional | Multi_branch | Loop | Debug | Precursor | Check | Retry ;
Assertion_clause ::= Tag_mark? Unlabeled_assertion_clause ;
String_content ::= {Simple_string Line_wrapping_part}+ ;
Feature_body ::= Deferred | Effective_routine | Attribute ;
Basic_expression ::= Read_only | Local | Call | Precursor | Equality | Parenthesized | Old | Operator_expression | Bracket_expression | Creation_expression ;
Creators ::= Creation_clause+ ;
Declaration_body ::= Formal_arguments? Query_mark? Feature_value? ;
Message ::= Manifest_string ;
Agent ::= Call_agent | Inline_agent ;
Constraining_types ::= Single_constraint | Multiple_constraint ;
Constant_attribute ::= Feature_name ;
Tuple_parameters ::= Type_list | Entity_declaration_list ;
Internal ::= Routine_mark Compound ;
Features ::= Feature_clause+ ;
Type ::= Class_or_tuple_type | Formal_generic_name | Anchored ;
Extended_feature_name ::= Feature_name Alias? ;
Registered_language ::= C_external | CPP_external | DLL_external ;
Feature_name ::= Identifier ;
External_file ::= External_user_file | External_system_file ;
Header_comment ::= Comment ;
Parent ::= Class_type Feature_adaptation? ;
Agent_unqualified ::= Feature_name Agent_actuals? ;
Unary_expression ::= Unary Expression ;
Feature_value ::= Explicit_value? Obsolete? Header_comment? Attribute_or_routine? ;
When_part_list ::= When_part+ ;
Operator ::= Unary | Binary ;
Constant ::= Manifest_constant | Constant_attribute ;
Choice ::= Constant | Manifest_type | Constant_interval | Type_interval ;
Class_type ::= Attachment_mark? Class_name Actual_generics? ;
Entity_declaration_group ::= Identifier_list Type_mark ;
Alias_name ::= Operator | Bracket ;
Variable_attribute ::= Feature_name ;
Expression ::= Basic_expression | Special_expression ;
Digit_sequence ::= Digit+ ;
Target ::= Local | Read_only | Call | Parenthesized_target ;
Unlabeled_assertion_clause ::= Boolean_expression | Comment ;
Boolean_expression ::= Basic_expression | Boolean_constant | Object_test ;
External_language ::= Unregistered_language | Registered_language ;
Agent_target ::= Entity | Parenthesized | Manifest_type ;
Inheritance ::= Inherit_clause+ ;
Bracket_target ::= Target | Once_string | Manifest_constant | Manifest_tuple ;
Agent_actual ::= Expression | Placeholder ;
Integer_constant ::= Sign? Integer ;
Note_item ::= Identifier | Manifest_constant ;
Integer ::= Integer_base? Digit_sequence ;
Creation_call ::= Variable Explicit_creation_call? ;
Unregistered_language ::= Manifest_string ;
Variable ::= Variable_attribute | Local ;
Verbatim_string ::= Verbatim_string_opener Line_sequence Verbatim_string_closer ;
Equality ::= Expression Comparison Expression ;
Unqualified_call ::= Feature_name Actuals? ;
Precursor ::= Precursor Parent_qualification? Actuals? ;
DLL_index ::= Integer ;
Single_constraint ::= Type Renaming? ;
Manifest_constant ::= Manifest_type? Manifest_value ;
Creation_procedure ::= Feature_name ;
Class_name ::= Identifier ;
Feature_declaration ::= New_feature_list Declaration_body ;
Formal ::= Identifier ;
External_type ::= Simple_string ;
Effective_routine ::= Internal | External ;
Class_or_tuple_type ::= Class_type | Tuple_type ;
Real_constant ::= Sign? Real ;
Note_entry ::= Note_name Note_values ;
DLL_identifier ::= Simple_string ;
Query_mark ::= Type_mark Assigner_mark? ;
Entity ::= Variable | Read_only ;
Manifest_string ::= Basic_manifest_string | Verbatim_string ;
Manifest_value ::= Boolean_constant | Character_constant | Integer_constant | Real_constant | Manifest_string | Manifest_type ;
Converter ::= Conversion_procedure | Conversion_query ;
--------------------fortran::derricks.bgf--------------------
EntryName ::= Ident ;
BlockDataBody ::= BlockDataBodyConstruct+ ;
SpecificationExpr ::= Expr ;
ScalarNumericExpr ::= Expr ;
InterfaceBlock ::= InterfaceStmt InterfaceBlockPart+ EndInterfaceStmt ;
ScalarLogicalExpr ::= Expr ;
ModuleSubprogram ::= FunctionSubprogram | SubroutineSubprogram ;
CommonBlockName ::= Ident ;
DoConstruct ::= BlockDoConstruct | LabelDoStmt ;
GotoStmt ::= LblDef GoToKw LblRef EOS ;
Subscript ::= Expr ;
EquivalenceObject ::= ArrayName | Variable ;
MainProgram ::= ProgramStmt? MainRange ;
NamedConstantUse ::= Ident ;
Int-Real-Dp-Expression ::= Expr ;
EndName ::= Ident ;
Level5Expr ::= (Level5Expr EquivOp)? EquivOperand ;
CaseBodyConstruct ::= CaseStmt | ExecutionPartConstruct ;
Level4Expr ::= (Level3Expr RelOp)? Level3Expr ;
ArrayName ::= Ident ;
Level3Expr ::= (Level3Expr ConcatOp)? Level2Expr ;
BlockDataName ::= Ident ;
GenericName ::= Ident ;
Level1Expr ::= DefinedUnaryOp? Primary ;
NamelistGroupName ::= Ident ;
BlockDataBodyConstruct ::= SpecificationPartConstruct ;
ProcedureName ::= Ident ;
InputItem ::= Name | DataRef | InputImpliedDo ;
NamedConstant ::= Ident ;
FunctionSubprogram ::= LblDef FunctionPrefix FunctionName FunctionRange ;
DummyArgName ::= Ident ;
MultOperand ::= Level1Expr (PowerOp MultOperand)? ;
ScalarIntExpr ::= Expr ;
CExpr ::= (CExpr ConcatOp)? CPrimary ;
ComponentArraySpec ::= ExplicitShapeSpecList | DeferredShapeSpecList ;
OutputItem ::= Expr | OutputImpliedDo ;
EquivOperand ::= (EquivOperand OrOp)? OrOperand ;
WhereConstruct ::= WhereConstructStmt AssignmentStmt* (ElsewhereStmt AssignmentStmt*)? EndWhereStmt ;
AcValue ::= Expr | AcImpliedDo ;
ImpliedDoVariable ::= Ident ;
SubroutineName ::= Ident ;
SpecificationStmt ::= AccessStmt | AllocatableStmt | CommonStmt | DataStmt | DimensionStmt | EquivalenceStmt | ExternalStmt | IntrinsicStmt | SaveStmt | IntentStmt | NamelistStmt | OptionalStmt | PointerStmt | TargetStmt ;
DefinedBinaryOp ::= Dop ;
VariableName ::= Ident ;
DefinedUnaryOp ::= Dop ;
OrOperand ::= (OrOperand AndOp)? AndOperand ;
SectionSubscript ::= Expr | SubscriptTriplet ;
IfConstructName ::= Ident ;
IntentPar ::= DummyArgName ;
Body ::= BodyConstruct+ ;
AccessId ::= GenericName | GenericSpec ;
ActionStmt ::= AllocateStmt | CycleStmt | DeallocateStmt | ExitStmt | NullifyStmt | PointerAssignmentStmt | WhereStmt | ArithmeticIfStmt | AssignmentStmt | AssignStmt | BackspaceStmt | CallStmt | CloseStmt | ContinueStmt | EndfileStmt | GotoStmt | ComputedGotoStmt | AssignedGotoStmt | IfStmt | InquireStmt | OpenStmt | PauseStmt | PrintStmt | ReadStmt | ReturnStmt | RewindStmt | StopStmt | WriteStmt ;
PointerObject ::= Name | PointerField ;
ExecutableProgram ::= StartCommentBlock? ProgramUnit+ ;
KindParam ::= Icon | NamedConstantUse ;
SubroutineNameUse ::= Ident ;
ModuleName ::= Ident ;
BodyConstruct ::= SpecificationPartConstruct | ExecutableConstruct ;
Target ::= Expr ;
SelectCaseBody ::= CaseBodyConstruct+ ;
DerivedTypeDef ::= DerivedTypeStmt DerivedTypeBody+ EndTypeStmt ;
DefinedOperator ::= Dop | PowerOp | MultOp | AddOp | ConcatOp | RelOp | NotOp | AndOp | OrOp | EquivOp ;
SFDummyArgName ::= Ident ;
Name ::= Ident ;
ScalarVariable ::= VariableName | ArrayElement ;
FunctionName ::= Ident ;
MaskExpr ::= Expr ;
CommonBlockObject ::= VariableName | ArrayDeclarator ;
LblRef ::= Icon ;
LowerBound ::= SpecificationExpr ;
DeclarationConstruct ::= TypeDeclarationStmt | SpecificationStmt | DerivedTypeDef | InterfaceBlock ;
UpperBound ::= SpecificationExpr ;
IfConstruct ::= IfThenStmt ExecutionPartConstruct* (ElseIfStmt ExecutionPartConstruct*)* (ElseStmt ExecutionPartConstruct*)? EndIfStmt ;
IntrinsicProcedureName ::= Ident ;
DerivedTypeBody ::= PrivateSequenceStmt | ComponentDefStmt ;
ExternalName ::= Ident ;
NamelistGroupObject ::= VariableName ;
Expr ::= (Expr DefinedBinaryOp)? Level5Expr ;
ModuleSubprogramPartConstruct ::= ContainsStmt | ModuleSubprogram ;
ArraySpec ::= AssumedShapeSpecList | DeferredShapeSpecList | ExplicitShapeSpecList | AssumedSizeSpec ;
UseName ::= Ident ;
AndOperand ::= NotOp? Level4Expr ;
DataStmtObject ::= Variable | DataImpliedDo ;
ProgramName ::= Ident ;
LblDef ::= Label? ;
ExecutableConstruct ::= ActionStmt | DoConstruct | IfConstruct | CaseConstruct | WhereConstruct | EndDoStmt ;
ExecutionPartConstruct ::= ExecutableConstruct | FormatStmt | DataStmt | EntryStmt ;
ObjectName ::= Ident ;
FunctionPar ::= DummyArgName ;
DataIDoObject ::= ArrayElement | DataImpliedDo | StructureComponent ;
ComponentName ::= Ident ;
AddOperand ::= (AddOperand MultOp)? MultOperand ;
ProgramUnit ::= MainProgram | FunctionSubprogram | SubroutineSubprogram | Module | BlockDataSubprogram ;
InterfaceBlockPart ::= InterfaceBody | ModuleProcedureStmt ;
COperand ::= Scon | Name | DataRef | FunctionReference ;
BozLiteralConstant ::= BinaryConstant | OctalConstant | HexConstant ;
TypeName ::= Ident ;
InternalSubprogram ::= FunctionSubprogram | SubroutineSubprogram ;
OptionalPar ::= DummyArgName ;
SpecificationPartConstruct ::= ImplicitStmt | ParameterStmt | FormatStmt | EntryStmt | DeclarationConstruct | UseStmt ;
Allocation ::= AllocateObject AllocatedShape? ;
--------------------fortran::waite-cordy.bgf--------------------
AccessIdList ::= AccessId+ ;
EntryName ::= Ident ;
DeferredShapeSpecList ::= DeferredShapeSpec+ ;
DoLblDef ::= TAB_2 Icon TAB_9 ;
PowerUpMultOperand ::= PowerOp MultOperand ;
InterfaceBlock ::= InterfaceStmt InterfaceBlockBody EndInterfaceStmt ;
ModuleSubprogram ::= FunctionSubprogram | SubroutineSubprogram ;
CommonBlockName ::= Ident ;
GotoStmt ::= LblDef GoToKw LblRef EOS ;
Subscript ::= Expr ;
SFDummyArgNameList ::= SFDummyArgName+ ;
EquivOpEquivOperand ::= EquivOp EquivOperand ;
EOS ::= CommentOrNewline CommentOrNewline* ;
SavedEntityList ::= SavedEntity+ ;
EndName ::= Ident ;
Level5Expr ::= EquivOperand EquivOpEquivOperand* ;
CaseBodyConstruct ::= CaseStmt | ExecutionPartConstruct ;
Level3Expr ::= Level2Expr ConcatOpLevel2Expr* ;
GenericName ::= Ident ;
BlockDataName ::= Ident ;
PointerStmtObjectList ::= PointerStmtObject+ ;
NamelistGroupName ::= Ident ;
ProcedureName ::= Ident ;
BlockDataBodyConstruct ::= SpecificationPartConstruct ;
NamedConstant ::= Ident ;
InputItem ::= NameDataRef | InputImpliedDo ;
CExpr ::= CPrimary CPrimaryConcatOp* ;
Label ::= Icon ;
ExternalNameList ::= ExternalName+ ;
EquivOperand ::= OrOperand OrUpOrOperand* ;
Ident ::= id ;
ImpliedDoVariable ::= Ident ;
DataStmtObjectList ::= DataStmtObject+ ;
DefinedBinaryOp ::= Dop ;
AddOpAddOperand ::= AddOp AddOperand ;
StmtFunctionStmt ::= LblDef Name StmtFunctionRange ;
DataIDoObjectList ::= DataIDoObject+ ;
ExplicitShapeSpecList ::= ExplicitShapeSpec+ ;
Body ::= BodyConstruct+ ;
AccessId ::= GenericName | GenericSpec ;
AllocationList ::= Allocation+ ;
DerivedTypeBodyConstruct ::= PrivateSequenceStmt | ComponentDefStmt ;
PointerObject ::= Name | PointerField ;
AllocateObjectList ::= AllocateObject+ ;
ExecutableProgram ::= ProgramUnit+ ;
SubroutineNameUse ::= Ident ;
CommentOrNewline ::= comment | newline ;
Target ::= Expr ;
DerivedTypeDef ::= DerivedTypeStmt DerivedTypeBody EndTypeStmt ;
DefinedOperator ::= Dop | PowerOp | MultOp | AddOp | RelOp | ConcatOp | NotOp | AndOp | OrOp | EquivOp ;
Name ::= Ident ;
IconOrScon ::= Icon | Scon ;
EquivalenceObjectList ::= EquivalenceObject+ ;
ScalarVariable ::= VariableName | ArrayElement ;
NamedConstantDefList ::= NamedConstantDef+ ;
FunctionName ::= Ident ;
RelOpLevel3Expr ::= RelOp Level3Expr ;
ProcedureNameList ::= ProcedureName+ ;
FunctionInterfaceRange ::= FunctionParList EOS SubprogramInterfaceBody? EndFunctionStmt ;
Variable ::= VariableName SubscriptListRef? SubstringRange? ;
UseName ::= Ident ;
OutputItemList ::= Expr | OutputItemList1 ;
DataStmtObject ::= Variable | DataImpliedDo ;
AcValueList ::= Expr | AcValueList1 ;
EntityDeclList ::= EntityDecl+ ;
ObjectName ::= Ident ;
OnlyList ::= Only+ ;
InterfaceBodyPartConstruct ::= InterfaceBody | ModuleProcedureStmt ;
FunctionPar ::= DummyArgName ;
DoLblRef ::= Icon ;
ComponentAttrSpecList ::= ComponentAttrSpec+ ;
SectionSubscriptList ::= SectionSubscript+ ;
program ::= IN_6 CommentOrNewline* ExecutableProgram CommentOrNewline* EX_6 ;
IntentParList ::= IntentPar+ ;
SFVarName ::= Ident ;
ElseConstruct ::= ElseStmt ConditionalBody ;
PointerObjectList ::= PointerObject+ ;
CaseValueRangeList ::= CaseValueRange+ ;
CPrimaryConcatOp ::= CPrimary ConcatOp ;
EquivalenceSetList ::= EquivalenceSet+ ;
DoLabelStmt ::= ActionStmt ;
DoConstruct ::= LabelDoStmt ;
 DoConstruct ::= BlockDoConstruct ;
EquivalenceObject ::= Variable ;
MainProgram ::= ProgramStmt? MainRange ;
NamedConstantUse ::= Ident ;
MultOpMultOperand ::= MultOp MultOperand ;
ComponentDeclList ::= ComponentDecl+ ;
Level4Expr ::= Level3Expr RelOpLevel3Expr* ;
ArrayName ::= Ident ;
Level2Expr ::= Sign? AddOperand AddOpAddOperand* ;
PositionSpecList ::= UnitIdentifierComma? PositionSpec+ ;
NameDataRef ::= Name ComplexDataRefTail* ;
FunctionSubprogram ::= LblDef FunctionPrefix FunctionName FunctionRange ;
LblRefList ::= LblRef+ ;
DummyArgName ::= Ident ;
MultOperand ::= Level1Expr PowerUpMultOperand? ;
ConcatOpLevel2Expr ::= ConcatOp Level2Expr ;
ComponentArraySpec ::= ExplicitShapeSpecList | DeferredShapeSpecList ;
ExprList ::= Expr+ ;
SubroutineName ::= Ident ;
SubroutineInterfaceRange ::= SubroutineParList EOS SubprogramInterfaceBody? EndSubroutineStmt ;
VariableName ::= Ident ;
DefinedUnaryOp ::= Dop ;
OrOperand ::= AndOperand AndOpAndOperand* ;
IntentPar ::= DummyArgName ;
OptionalParList ::= OptionalPar+ ;
KindParam ::= Icon | NamedConstantUse ;
ModuleName ::= Ident ;
ArrayAllocationList ::= ArrayAllocation+ ;
BodyConstruct ::= SpecificationPartConstruct | ExecutableConstruct ;
SFDummyArgName ::= Ident ;
SavedEntity ::= VariableName | SavedCommonBlock ;
SubscriptList ::= Subscript+ ;
ConditionalBody ::= ExecutionPartConstruct* ;
IntrinsicList ::= IntrinsicProcedureName+ ;
MaskExpr ::= Expr ;
ElseIfConstruct ::= ElseIfStmt ConditionalBody ;
CommonBlockObject ::= VariableName | ArrayDeclarator ;
ImplicitSpecList ::= ImplicitSpec+ ;
DataStmtValueList ::= DataStmtValue+ ;
LblRef ::= Label ;
LowerBound ::= Expr ;
RenameList ::= Rename+ ;
UpperBound ::= Expr ;
InputItemList ::= InputItem+ ;
IfConstruct ::= IfThenStmt ConditionalBody ElseIfConstruct* ElseConstruct? EndIfStmt ;
IntrinsicProcedureName ::= Ident ;
ExternalName ::= Ident ;
NamelistGroupObject ::= VariableName ;
ModuleSubprogramPartConstruct ::= ContainsStmt | ModuleSubprogram ;
AndOperand ::= NotOp? Level4Expr ;
ProgramName ::= Ident ;
TargetObjectList ::= TargetObject+ ;
AndOpAndOperand ::= AndOp AndOperand ;
ComponentName ::= Ident ;
AddOperand ::= MultOperand MultOpMultOperand* ;
OrUpOrOperand ::= OrOp OrOperand ;
ArrayDeclaratorList ::= ArrayDeclarator+ ;
BozLiteralConstant ::= Bcon | Ocon | Zcon ;
COperand ::= Scon | NameDataRef | FunctionReference ;
TypeName ::= Ident ;
OptionalPar ::= DummyArgName ;
InternalSubprogram ::= FunctionSubprogram | SubroutineSubprogram ;
--------------------java::java-1-jls-impl.bgf--------------------
SimpleName ::= Identifier ;
ConstantExpression ::= Expression ;
MethodDeclaration ::= MethodHeader MethodBody ;
Expression ::= AssignmentExpression ;
ClassOrInterfaceType ::= Name ;
ImportDeclaration ::= SingleTypeImportDeclaration ;
 ImportDeclaration ::= TypeImportOnDemandDeclaration ;
InterfaceType ::= ClassOrInterfaceType ;
ClassType ::= ClassOrInterfaceType ;
LeftHandSide ::= Name ;
 LeftHandSide ::= FieldAccess ;
 LeftHandSide ::= ArrayAccess ;
Assignment ::= LeftHandSide AssignmentOperator AssignmentExpression ;
Name ::= SimpleName ;
 Name ::= QualifiedName ;
StatementNoShortIf ::= StatementWithoutTrailingSubstatement ;
 StatementNoShortIf ::= LabeledStatementNoShortIf ;
 StatementNoShortIf ::= IfThenElseStatementNoShortIf ;
 StatementNoShortIf ::= WhileStatementNoShortIf ;
 StatementNoShortIf ::= ForStatementNoShortIf ;
InterfaceMemberDeclaration ::= ConstantDeclaration ;
 InterfaceMemberDeclaration ::= AbstractMethodDeclaration ;
VariableInitializer ::= Expression ;
 VariableInitializer ::= ArrayInitializer ;
AssignmentExpression ::= ConditionalExpression ;
 AssignmentExpression ::= Assignment ;
Primary ::= PrimaryNoNewArray ;
 Primary ::= ArrayCreationExpression ;
Type ::= PrimitiveType ;
 Type ::= ReferenceType ;
FormalParameter ::= Type VariableDeclaratorId ;
ForInit ::= StatementExpressionList ;
 ForInit ::= LocalVariableDeclaration ;
ConstantDeclaration ::= FieldDeclaration ;
LocalVariableDeclaration ::= Type VariableDeclarators ;
ForUpdate ::= StatementExpressionList ;
Literal ::= IntegerLiteral ;
 Literal ::= FloatingPointLiteral ;
 Literal ::= BooleanLiteral ;
 Literal ::= CharacterLiteral ;
 Literal ::= StringLiteral ;
 Literal ::= NullLiteral ;
Statement ::= StatementWithoutTrailingSubstatement ;
 Statement ::= LabeledStatement ;
 Statement ::= IfThenStatement ;
 Statement ::= IfThenElseStatement ;
 Statement ::= WhileStatement ;
 Statement ::= ForStatement ;
PostfixExpression ::= Primary ;
 PostfixExpression ::= Name ;
 PostfixExpression ::= PostIncrementExpression ;
 PostfixExpression ::= PostDecrementExpression ;
SwitchBlockStatementGroup ::= SwitchLabels BlockStatements ;
ClassMemberDeclaration ::= FieldDeclaration ;
 ClassMemberDeclaration ::= MethodDeclaration ;
CompilationUnit ::= PackageDeclaration? ImportDeclarations? TypeDeclarations? ;
StatementExpression ::= Assignment ;
 StatementExpression ::= PreIncrementExpression ;
 StatementExpression ::= PreDecrementExpression ;
 StatementExpression ::= PostIncrementExpression ;
 StatementExpression ::= PostDecrementExpression ;
 StatementExpression ::= MethodInvocation ;
 StatementExpression ::= ClassInstanceCreationExpression ;
NumericType ::= IntegralType ;
 NumericType ::= FloatingPointType ;
ReferenceType ::= ClassOrInterfaceType ;
 ReferenceType ::= ArrayType ;
StatementWithoutTrailingSubstatement ::= Block ;
 StatementWithoutTrailingSubstatement ::= EmptyStatement ;
 StatementWithoutTrailingSubstatement ::= ExpressionStatement ;
 StatementWithoutTrailingSubstatement ::= SwitchStatement ;
 StatementWithoutTrailingSubstatement ::= DoStatement ;
 StatementWithoutTrailingSubstatement ::= BreakStatement ;
 StatementWithoutTrailingSubstatement ::= ContinueStatement ;
 StatementWithoutTrailingSubstatement ::= ReturnStatement ;
 StatementWithoutTrailingSubstatement ::= SynchronizedStatement ;
 StatementWithoutTrailingSubstatement ::= ThrowStatement ;
 StatementWithoutTrailingSubstatement ::= TryStatement ;
BlockStatement ::= LocalVariableDeclarationStatement ;
 BlockStatement ::= Statement ;
ClassBodyDeclaration ::= ClassMemberDeclaration ;
 ClassBodyDeclaration ::= StaticInitializer ;
 ClassBodyDeclaration ::= ConstructorDeclaration ;
ConstructorDeclaration ::= Modifiers? ConstructorDeclarator Throws? ConstructorBody ;
--------------------java::java-1-jls-read.bgf--------------------
ConstantExpression ::= Expression ;
MethodDeclaration ::= MethodHeader MethodBody ;
Expression ::= AssignmentExpression ;
ClassOrInterfaceType ::= ClassType ;
 ClassOrInterfaceType ::= InterfaceType ;
ImportDeclaration ::= SingleTypeImportDeclaration ;
 ImportDeclaration ::= TypeImportOnDemandDeclaration ;
InterfaceType ::= TypeName ;
ClassType ::= TypeName ;
MethodHeader ::= MethodModifiers? ResultType MethodDeclarator Throws? ;
LeftHandSide ::= ExpressionName ;
 LeftHandSide ::= FieldAccess ;
 LeftHandSide ::= ArrayAccess ;
Assignment ::= LeftHandSide AssignmentOperator AssignmentExpression ;
StatementNoShortIf ::= StatementWithoutTrailingSubstatement ;
 StatementNoShortIf ::= LabeledStatementNoShortIf ;
 StatementNoShortIf ::= IfThenElseStatementNoShortIf ;
 StatementNoShortIf ::= WhileStatementNoShortIf ;
 StatementNoShortIf ::= ForStatementNoShortIf ;
InterfaceMemberDeclaration ::= ConstantDeclaration ;
 InterfaceMemberDeclaration ::= AbstractMethodDeclaration ;
VariableInitializer ::= Expression ;
 VariableInitializer ::= ArrayInitializer ;
AssignmentExpression ::= ConditionalExpression ;
 AssignmentExpression ::= Assignment ;
Primary ::= PrimaryNoNewArray ;
 Primary ::= ArrayCreationExpression ;
Type ::= PrimitiveType ;
 Type ::= ReferenceType ;
FormalParameter ::= Type VariableDeclaratorId ;
ForInit ::= StatementExpressionList ;
 ForInit ::= LocalVariableDeclaration ;
ConstantDeclaration ::= ConstantModifiers? Type VariableDeclarator ;
LocalVariableDeclaration ::= Type VariableDeclarators ;
ForUpdate ::= StatementExpressionList ;
Literal ::= IntegerLiteral ;
 Literal ::= FloatingPointLiteral ;
 Literal ::= BooleanLiteral ;
 Literal ::= CharacterLiteral ;
 Literal ::= StringLiteral ;
 Literal ::= NullLiteral ;
Statement ::= StatementWithoutTrailingSubstatement ;
 Statement ::= LabeledStatement ;
 Statement ::= IfThenStatement ;
 Statement ::= IfThenElseStatement ;
 Statement ::= WhileStatement ;
 Statement ::= ForStatement ;
PostfixExpression ::= Primary ;
 PostfixExpression ::= ExpressionName ;
 PostfixExpression ::= PostIncrementExpression ;
 PostfixExpression ::= PostDecrementExpression ;
SwitchBlockStatementGroup ::= SwitchLabels BlockStatements ;
ClassMemberDeclaration ::= FieldDeclaration ;
 ClassMemberDeclaration ::= MethodDeclaration ;
CompilationUnit ::= PackageDeclaration? ImportDeclarations? TypeDeclarations? ;
StatementExpression ::= Assignment ;
 StatementExpression ::= PreIncrementExpression ;
 StatementExpression ::= PreDecrementExpression ;
 StatementExpression ::= PostIncrementExpression ;
 StatementExpression ::= PostDecrementExpression ;
 StatementExpression ::= MethodInvocation ;
 StatementExpression ::= ClassInstanceCreationExpression ;
NumericType ::= IntegralType ;
 NumericType ::= FloatingPointType ;
ReferenceType ::= ClassOrInterfaceType ;
 ReferenceType ::= ArrayType ;
StatementWithoutTrailingSubstatement ::= Block ;
 StatementWithoutTrailingSubstatement ::= EmptyStatement ;
 StatementWithoutTrailingSubstatement ::= ExpressionStatement ;
 StatementWithoutTrailingSubstatement ::= SwitchStatement ;
 StatementWithoutTrailingSubstatement ::= DoStatement ;
 StatementWithoutTrailingSubstatement ::= BreakStatement ;
 StatementWithoutTrailingSubstatement ::= ContinueStatement ;
 StatementWithoutTrailingSubstatement ::= ReturnStatement ;
 StatementWithoutTrailingSubstatement ::= SynchronizedStatement ;
 StatementWithoutTrailingSubstatement ::= ThrowStatement ;
 StatementWithoutTrailingSubstatement ::= TryStatement ;
BlockStatement ::= LocalVariableDeclarationStatement ;
 BlockStatement ::= Statement ;
ClassBodyDeclaration ::= ClassMemberDeclaration ;
 ClassBodyDeclaration ::= StaticInitializer ;
 ClassBodyDeclaration ::= ConstructorDeclaration ;
ConstructorDeclaration ::= ConstructorModifiers? ConstructorDeclarator Throws? ConstructorBody ;
--------------------java::java-2-jls-impl.bgf--------------------
ClassOrInterfaceDeclaration ::= ModifiersOpt ClassDeclaration | InterfaceDeclaration ;
ConstantExpression ::= Expression ;
Expression2 ::= Expression3 Expression2Rest? ;
Expression1 ::= Expression2 Expression1Rest? ;
Expression ::= Expression1 (AssignmentOperator Expression1)? ;
ModifiersOpt ::= Modifier* ;
InnerCreator ::= Identifier ClassCreatorRest ;
ConstantDeclarator ::= Identifier ConstantDeclaratorRest ;
ForUpdate ::= StatementExpression MoreStatementExpressions ;
BlockStatements ::= BlockStatement* ;
Literal ::= IntegerLiteral ;
 Literal ::= FloatingPointLiteral ;
 Literal ::= CharacterLiteral ;
 Literal ::= StringLiteral ;
 Literal ::= BooleanLiteral ;
 Literal ::= NullLiteral ;
VariableDeclarator ::= Identifier VariableDeclaratorRest ;
Creator ::= QualifiedIdentifier ArrayCreatorRest | ClassCreatorRest ;
MethodOrFieldRest ::= VariableDeclaratorRest ;
 MethodOrFieldRest ::= MethodDeclaratorRest ;
SwitchBlockStatementGroups ::= SwitchBlockStatementGroup* ;
SwitchBlockStatementGroup ::= SwitchLabel BlockStatements ;
Catches ::= CatchClause CatchClause* ;
ClassCreatorRest ::= Arguments ClassBody? ;
VariableDeclaratorId ::= Identifier BracketsOpt ;
InterfaceMethodOrFieldDecl ::= Type Identifier InterfaceMethodOrFieldRest ;
StatementExpression ::= Expression ;
VariableInitializer ::= ArrayInitializer ;
 VariableInitializer ::= Expression ;
MethodBody ::= Block ;
MethodOrFieldDecl ::= Type Identifier MethodOrFieldRest ;
--------------------java::jdt.bgf--------------------
Annotation ::= MarkerAnnotation ;
 Annotation ::= NormalAnnotation ;
 Annotation ::= SingleMemberAnnotation ;
Statement ::= AssertStatement ;
 Statement ::= Block ;
 Statement ::= BreakStatement ;
 Statement ::= ConstructorInvocation ;
 Statement ::= ContinueStatement ;
 Statement ::= DoStatement ;
 Statement ::= EmptyStatement ;
 Statement ::= EnhancedForStatement ;
 Statement ::= ExpressionStatement ;
 Statement ::= ForStatement ;
 Statement ::= IfStatement ;
 Statement ::= LabeledStatement ;
 Statement ::= ReturnStatement ;
 Statement ::= SuperConstructorInvocation ;
 Statement ::= SwitchCase ;
 Statement ::= SwitchStatement ;
 Statement ::= SynchronizedStatement ;
 Statement ::= ThrowStatement ;
 Statement ::= TryStatement ;
 Statement ::= TypeDeclarationStatement ;
 Statement ::= VariableDeclarationStatement ;
 Statement ::= WhileStatement ;
Comment ::= BlockComment ;
 Comment ::= Javadoc ;
 Comment ::= LineComment ;
AbstractTypeDeclaration ::= AnnotationTypeDeclaration ;
 AbstractTypeDeclaration ::= EnumDeclaration ;
 AbstractTypeDeclaration ::= TypeDeclaration ;
VariableDeclaration ::= SingleVariableDeclaration ;
 VariableDeclaration ::= VariableDeclarationFragment ;
Integer ::= integer() ;
Name ::= QualifiedName ;
 Name ::= SimpleName ;
Type ::= ArrayType ;
 Type ::= ParameterizedType ;
 Type ::= PrimitiveType ;
 Type ::= QualifiedType ;
 Type ::= SimpleType ;
 Type ::= WildcardType ;
Expression ::= ArrayAccess ;
 Expression ::= ArrayCreation ;
 Expression ::= ArrayInitializer ;
 Expression ::= Assignment ;
 Expression ::= BooleanLiteral ;
 Expression ::= CastExpression ;
 Expression ::= CharacterLiteral ;
 Expression ::= ClassInstanceCreation ;
 Expression ::= ConditionalExpression ;
 Expression ::= FieldAccess ;
 Expression ::= InfixExpression ;
 Expression ::= InstanceofExpression ;
 Expression ::= MethodInvocation ;
 Expression ::= Name ;
 Expression ::= NullLiteral ;
 Expression ::= NumberLiteral ;
 Expression ::= ParenthesizedExpression ;
 Expression ::= PostfixExpression ;
 Expression ::= PrefixExpression ;
 Expression ::= StringLiteral ;
 Expression ::= SuperFieldAccess ;
 Expression ::= SuperMethodInvocation ;
 Expression ::= ThisExpression ;
 Expression ::= TypeLiteral ;
 Expression ::= VariableDeclarationExpression ;
 Expression ::= Annotation ;
BodyDeclaration ::= AbstractTypeDeclaration ;
 BodyDeclaration ::= AnnotationTypeMemberDeclaration ;
 BodyDeclaration ::= EnumConstantDeclaration ;
 BodyDeclaration ::= FieldDeclaration ;
 BodyDeclaration ::= Initializer ;
 BodyDeclaration ::= MethodDeclaration ;
ASTNode ::= AnonymousClassDeclaration ;
 ASTNode ::= BodyDeclaration ;
 ASTNode ::= CatchClause ;
 ASTNode ::= Comment ;
 ASTNode ::= CompilationUnit ;
 ASTNode ::= Expression ;
 ASTNode ::= ImportDeclaration ;
 ASTNode ::= MemberRef ;
 ASTNode ::= MemberValuePair ;
 ASTNode ::= MethodRef ;
 ASTNode ::= MethodRefParameter ;
 ASTNode ::= PackageDeclaration ;
 ASTNode ::= Statement ;
 ASTNode ::= TagElement ;
 ASTNode ::= TextElement ;
 ASTNode ::= Type ;
 ASTNode ::= TypeParameter ;
 ASTNode ::= VariableDeclaration ;
 ASTNode ::= Modifier ;
EmptyStatement ::= ε ;
String ::= string() ;
ExtendedModifier ::= Modifier ;
 ExtendedModifier ::= Annotation ;
--------------------java::java-2-jls-read.bgf--------------------
ConstantExpression ::= Expression ;
Type ::= PrimitiveType ;
 Type ::= ReferenceType ;
MethodDeclaration ::= MethodHeader MethodBody ;
ForInit ::= StatementExpressionList ;
 ForInit ::= LocalVariableDeclaration ;
Expression ::= AssignmentExpression ;
ClassOrInterfaceType ::= ClassType ;
 ClassOrInterfaceType ::= InterfaceType ;
ConstantDeclaration ::= ConstantModifiers? Type VariableDeclarators ;
ImportDeclaration ::= SingleTypeImportDeclaration ;
 ImportDeclaration ::= TypeImportOnDemandDeclaration ;
InterfaceType ::= TypeName ;
ClassType ::= TypeName ;
ForUpdate ::= StatementExpressionList ;
Literal ::= IntegerLiteral ;
 Literal ::= FloatingPointLiteral ;
 Literal ::= BooleanLiteral ;
 Literal ::= CharacterLiteral ;
 Literal ::= StringLiteral ;
 Literal ::= NullLiteral ;
Statement ::= StatementWithoutTrailingSubstatement ;
 Statement ::= LabeledStatement ;
 Statement ::= IfThenStatement ;
 Statement ::= IfThenElseStatement ;
 Statement ::= WhileStatement ;
 Statement ::= ForStatement ;
MethodHeader ::= MethodModifiers? ResultType MethodDeclarator Throws? ;
LeftHandSide ::= ExpressionName ;
 LeftHandSide ::= FieldAccess ;
 LeftHandSide ::= ArrayAccess ;
InstanceInitializer ::= Block ;
PostfixExpression ::= Primary ;
 PostfixExpression ::= ExpressionName ;
 PostfixExpression ::= PostIncrementExpression ;
 PostfixExpression ::= PostDecrementExpression ;
Assignment ::= LeftHandSide AssignmentOperator AssignmentExpression ;
SwitchBlockStatementGroup ::= SwitchLabels BlockStatements ;
StatementNoShortIf ::= StatementWithoutTrailingSubstatement ;
 StatementNoShortIf ::= LabeledStatementNoShortIf ;
 StatementNoShortIf ::= IfThenElseStatementNoShortIf ;
 StatementNoShortIf ::= WhileStatementNoShortIf ;
 StatementNoShortIf ::= ForStatementNoShortIf ;
NumericType ::= IntegralType ;
 NumericType ::= FloatingPointType ;
StatementExpression ::= Assignment ;
 StatementExpression ::= PreIncrementExpression ;
 StatementExpression ::= PreDecrementExpression ;
 StatementExpression ::= PostIncrementExpression ;
 StatementExpression ::= PostDecrementExpression ;
 StatementExpression ::= MethodInvocation ;
 StatementExpression ::= ClassInstanceCreationExpression ;
CompilationUnit ::= PackageDeclaration? ImportDeclarations? TypeDeclarations? ;
VariableInitializer ::= Expression ;
 VariableInitializer ::= ArrayInitializer ;
ReferenceType ::= ClassOrInterfaceType ;
 ReferenceType ::= ArrayType ;
AssignmentExpression ::= ConditionalExpression ;
 AssignmentExpression ::= Assignment ;
StatementWithoutTrailingSubstatement ::= Block ;
 StatementWithoutTrailingSubstatement ::= EmptyStatement ;
 StatementWithoutTrailingSubstatement ::= ExpressionStatement ;
 StatementWithoutTrailingSubstatement ::= SwitchStatement ;
 StatementWithoutTrailingSubstatement ::= DoStatement ;
 StatementWithoutTrailingSubstatement ::= BreakStatement ;
 StatementWithoutTrailingSubstatement ::= ContinueStatement ;
 StatementWithoutTrailingSubstatement ::= ReturnStatement ;
 StatementWithoutTrailingSubstatement ::= SynchronizedStatement ;
 StatementWithoutTrailingSubstatement ::= ThrowStatement ;
 StatementWithoutTrailingSubstatement ::= TryStatement ;
Primary ::= PrimaryNoNewArray ;
 Primary ::= ArrayCreationExpression ;
BlockStatement ::= LocalVariableDeclarationStatement ;
 BlockStatement ::= ClassDeclaration ;
 BlockStatement ::= Statement ;
ClassBodyDeclaration ::= ClassMemberDeclaration ;
 ClassBodyDeclaration ::= InstanceInitializer ;
 ClassBodyDeclaration ::= StaticInitializer ;
 ClassBodyDeclaration ::= ConstructorDeclaration ;
ConstructorDeclaration ::= ConstructorModifiers? ConstructorDeclarator Throws? ConstructorBody ;
--------------------java::java-5-habelitz.bgf--------------------
annotationDefaultValue ::= DEFAULT annotationElementValue ;
bound ::= EXTENDS type (AND type)* ;
interfaceBody ::= LCURLY interfaceScopeDeclarations* RCURLY ;
typeList ::= type (COMMA type)* ;
genericTypeParameter ::= IDENT bound? ;
enumClassScopeDeclarations ::= SEMI classScopeDeclarations* ;
parenthesizedExpression ::= LPAREN expression RPAREN ;
localVariableDeclaration ::= localModifierList type classFieldDeclaratorList ;
qualifiedIdentList ::= qualifiedIdentifier (COMMA qualifiedIdentifier)* ;
annotationBody ::= LCURLY annotationScopeDeclarations* RCURLY ;
classFieldDeclaratorList ::= classFieldDeclarator (COMMA classFieldDeclarator)* ;
typeDecls ::= typeDeclaration | SEMI ;
annotationList ::= annotation* ;
arrayDeclarator ::= LBRACK RBRACK ;
interfaceTypeDeclaration ::= INTERFACE IDENT genericTypeParameterList? interfaceExtendsClause? interfaceBody ;
inclusiveOrExpression ::= exclusiveOrExpression (OR exclusiveOrExpression)* ;
compilationUnit ::= annotationList packageDeclaration? importDeclaration* typeDecls* ;
localModifier ::= FINAL | annotation ;
typeDeclaration ::= modifierList classTypeDeclaration | interfaceTypeDeclaration | enumTypeDeclaration | annotationTypeDeclaration ;
annotationInit ::= LPAREN annotationInitializers RPAREN ;
javaSource ::= compilationUnit ;
annotationElementValueExpression ::= conditionalExpression ;
newExpression ::= NEW (primitiveType newArrayConstruction) | (genericTypeArgumentListSimplified? qualifiedTypeIdentSimplified newArrayConstruction | (arguments classBody?)) ;
modifier ::= PUBLIC | PROTECTED | PRIVATE | STATIC | ABSTRACT | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | localModifier ;
expressionList ::= expression (COMMA expression)* ;
arguments ::= LPAREN expressionList? RPAREN ;
typeIdent ::= IDENT genericTypeArgumentList? ;
packageDeclaration ::= PACKAGE qualifiedIdentifier SEMI ;
finallyClause ::= FINALLY block ;
forCondition ::= expression? ;
interfaceFieldDeclarator ::= variableDeclaratorId ASSIGN variableInitializer ;
switchCaseLabel ::= CASE expression COLON blockStatement* ;
classExtendsClause ::= EXTENDS type ;
IDENT ::= JAVA_ID_START JAVA_ID_PART* ;
andExpression ::= equalityExpression (AND equalityExpression)* ;
enumConstants ::= enumConstant (COMMA enumConstant)* ;
typeIdentSimplified ::= IDENT genericTypeArgumentListSimplified? ;
genericTypeArgumentList ::= LESS_THAN genericTypeArgument (COMMA genericTypeArgument)* genericTypeListClosing ;
arrayInitializer ::= LCURLY (variableInitializer (COMMA variableInitializer)* COMMA?)? RCURLY ;
classTypeDeclaration ::= CLASS IDENT genericTypeParameterList? classExtendsClause? implementsClause? classBody ;
variableDeclaratorId ::= IDENT arrayDeclaratorList? ;
variableInitializer ::= arrayInitializer | expression ;
logicalAndExpression ::= inclusiveOrExpression (LOGICAL_AND inclusiveOrExpression)* ;
enumConstant ::= annotationList IDENT arguments? classBody? ;
assignmentExpression ::= conditionalExpression (ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | STAR_ASSIGN | DIV_ASSIGN | AND_ASSIGN | OR_ASSIGN | XOR_ASSIGN | MOD_ASSIGN | SHIFT_LEFT_ASSIGN | SHIFT_RIGHT_ASSIGN | BIT_SHIFT_RIGHT_ASSIGN assignmentExpression)? ;
genericTypeArgumentListSimplified ::= LESS_THAN genericTypeArgumentSimplified (COMMA genericTypeArgumentSimplified)* genericTypeListClosing ;
enumBody ::= LCURLY enumScopeDeclarations RCURLY ;
primitiveType ::= BOOLEAN | CHAR | BYTE | SHORT | INT | LONG | FLOAT | DOUBLE ;
forUpdater ::= expressionList? ;
implementsClause ::= IMPLEMENTS typeList ;
conditionalExpression ::= logicalOrExpression (QUESTION assignmentExpression COLON conditionalExpression)? ;
classBody ::= LCURLY classScopeDeclarations* RCURLY ;
type ::= simpleType | objectType ;
shiftExpression ::= additiveExpression (BIT_SHIFT_RIGHT | SHIFT_RIGHT | SHIFT_LEFT additiveExpression)* ;
formalParameterList ::= LPAREN (formalParameterStandardDecl (COMMA formalParameterStandardDecl)* (COMMA formalParameterVarArgDecl)?) | formalParameterVarArgDecl | ε RPAREN ;
genericTypeParameterList ::= LESS_THAN genericTypeParameter (COMMA genericTypeParameter)* genericTypeListClosing ;
classFieldDeclarator ::= variableDeclaratorId (ASSIGN variableInitializer)? ;
annotationInitializer ::= IDENT ASSIGN annotationElementValue ;
equalityExpression ::= instanceOfExpression (EQUAL | NOT_EQUAL instanceOfExpression)* ;
annotationTypeDeclaration ::= AT INTERFACE IDENT annotationBody ;
interfaceExtendsClause ::= EXTENDS typeList ;
literal ::= HEX_LITERAL | OCTAL_LITERAL | DECIMAL_LITERAL | FLOATING_POINT_LITERAL | CHARACTER_LITERAL | STRING_LITERAL | TRUE | FALSE | NULL ;
annotation ::= AT qualifiedIdentifier annotationInit? ;
enumScopeDeclarations ::= enumConstants COMMA? enumClassScopeDeclarations? ;
catches ::= catchClause+ ;
arrayDeclaratorList ::= arrayDeclarator+ ;
annotationElementValue ::= annotationElementValueExpression | annotation | annotationElementValueArrayInitializer ;
switchCaseLabels ::= switchCaseLabel* ;
innerNewExpression ::= NEW genericTypeArgumentListSimplified? IDENT arguments classBody? ;
formalParameterStandardDecl ::= localModifierList type variableDeclaratorId ;
localModifierList ::= localModifier* ;
enumTypeDeclaration ::= ENUM IDENT implementsClause? enumBody ;
relationalExpression ::= shiftExpression (LESS_OR_EQUAL | GREATER_OR_EQUAL | LESS_THAN | GREATER_THAN shiftExpression)* ;
throwsClause ::= THROWS qualifiedIdentList ;
qualifiedTypeIdent ::= typeIdent (DOT typeIdent)* ;
objectType ::= qualifiedTypeIdent arrayDeclaratorList? ;
exclusiveOrExpression ::= andExpression (XOR andExpression)* ;
switchBlockLabels ::= switchCaseLabels switchDefaultLabel? switchCaseLabels ;
expression ::= assignmentExpression ;
importDeclaration ::= IMPORT STATIC? qualifiedIdentifier DOTSTAR? SEMI ;
modifierList ::= modifier* ;
formalParameterVarArgDecl ::= localModifierList type ELLIPSIS variableDeclaratorId ;
qualifiedTypeIdentSimplified ::= typeIdentSimplified (DOT typeIdentSimplified)* ;
interfaceFieldDeclaratorList ::= interfaceFieldDeclarator (COMMA interfaceFieldDeclarator)* ;
multiplicativeExpression ::= unaryExpression (STAR | DIV | MOD unaryExpression)* ;
annotationElementValueArrayInitializer ::= LCURLY (annotationElementValue (COMMA annotationElementValue)*)? COMMA? RCURLY ;
block ::= LCURLY blockStatement* RCURLY ;
simpleType ::= primitiveType arrayDeclaratorList? ;
catchClause ::= CATCH LPAREN formalParameterStandardDecl RPAREN block ;
switchDefaultLabel ::= DEFAULT COLON blockStatement* ;
genericWildcardBoundType ::= EXTENDS | SUPER type ;
genericTypeArgumentSimplified ::= type | QUESTION ;
additiveExpression ::= multiplicativeExpression (PLUS | MINUS multiplicativeExpression)* ;
instanceOfExpression ::= relationalExpression (INSTANCEOF type)? ;
logicalOrExpression ::= logicalAndExpression (LOGICAL_OR logicalAndExpression)* ;
--------------------java::java-5-jls-impl.bgf--------------------
ClassOrInterfaceDeclaration ::= Modifier* ClassDeclaration | InterfaceDeclaration ;
ConstantExpression ::= Expression ;
Expression2 ::= Expression3 Expression2Rest? ;
Expression1 ::= Expression2 Expression1Rest? ;
Expression ::= Expression1 (AssignmentOperator Expression1)? ;
ElementValue ::= ConditionalExpression ;
 ElementValue ::= Annotation ;
 ElementValue ::= ElementValueArrayInitializer ;
BlockStatements ::= BlockStatement* ;
VariableDeclarator ::= Identifier VariableDeclaratorRest ;
ClassCreatorRest ::= Arguments ClassBody? ;
InterfaceMethodOrFieldDecl ::= Type Identifier InterfaceMethodOrFieldRest ;
AnnotationTypeElementDeclaration ::= Modifier* AnnotationTypeElementRest ;
VariableInitializer ::= ArrayInitializer ;
 VariableInitializer ::= Expression ;
EnumConstant ::= Annotations Identifier Arguments? ClassBody? ;
InterfaceDeclaration ::= NormalInterfaceDeclaration ;
 InterfaceDeclaration ::= AnnotationTypeDeclaration ;
MethodOrFieldDecl ::= Type Identifier MethodOrFieldRest ;
ConditionalExpression ::= Expression2 Expression1Rest ;
ForInit ::= StatementExpression Expressions ;
InnerCreator ::= Identifier ClassCreatorRest ;
ConstantDeclarator ::= Identifier ConstantDeclaratorRest ;
ExplicitGenericInvocation ::= NonWildcardTypeArguments ExplicitGenericInvocationSuffix ;
ForUpdate ::= StatementExpression Expressions ;
EnumConstantName ::= Identifier ;
Literal ::= IntegerLiteral ;
 Literal ::= FloatingPointLiteral ;
 Literal ::= CharacterLiteral ;
 Literal ::= StringLiteral ;
 Literal ::= BooleanLiteral ;
 Literal ::= NullLiteral ;
Creator ::= NonWildcardTypeArguments? CreatedName ArrayCreatorRest | ClassCreatorRest ;
MethodOrFieldRest ::= VariableDeclaratorRest ;
 MethodOrFieldRest ::= MethodDeclaratorRest ;
SwitchBlockStatementGroups ::= SwitchBlockStatementGroup* ;
Catches ::= CatchClause CatchClause* ;
SwitchBlockStatementGroup ::= SwitchLabel BlockStatements ;
GenericMethodOrConstructorDecl ::= TypeParameters GenericMethodOrConstructorRest ;
StatementExpression ::= Expression ;
AnnotationConstantRest ::= VariableDeclarators ;
Annotations ::= Annotation Annotations? ;
MethodBody ::= Block ;
ClassDeclaration ::= NormalClassDeclaration ;
 ClassDeclaration ::= EnumDeclaration ;
--------------------java::java-5-jls-read.bgf--------------------
ConstantExpression ::= Expression ;
MethodDeclaration ::= MethodHeader MethodBody ;
Expression ::= AssignmentExpression ;
ClassOrInterfaceType ::= ClassType ;
 ClassOrInterfaceType ::= InterfaceType ;
TypeVariable ::= Identifier ;
ImportDeclaration ::= SingleTypeImportDeclaration ;
 ImportDeclaration ::= TypeImportOnDemandDeclaration ;
 ImportDeclaration ::= SingleStaticImportDeclaration ;
 ImportDeclaration ::= StaticImportOnDemandDeclaration ;
ElementValue ::= ConditionalExpression ;
 ElementValue ::= Annotation ;
 ElementValue ::= ElementValueArrayInitializer ;
InterfaceType ::= TypeDeclSpecifier TypeArguments? ;
ClassType ::= TypeDeclSpecifier TypeArguments? ;
TypeParameter ::= TypeVariable TypeBound? ;
MethodHeader ::= MethodModifiers? TypeParameters? ResultType MethodDeclarator Throws? ;
LeftHandSide ::= ExpressionName ;
 LeftHandSide ::= FieldAccess ;
 LeftHandSide ::= ArrayAccess ;
InstanceInitializer ::= Block ;
Assignment ::= LeftHandSide AssignmentOperator AssignmentExpression ;
StatementNoShortIf ::= StatementWithoutTrailingSubstatement ;
 StatementNoShortIf ::= LabeledStatementNoShortIf ;
 StatementNoShortIf ::= IfThenElseStatementNoShortIf ;
 StatementNoShortIf ::= WhileStatementNoShortIf ;
 StatementNoShortIf ::= ForStatementNoShortIf ;
VariableInitializer ::= Expression ;
 VariableInitializer ::= ArrayInitializer ;
AssignmentExpression ::= ConditionalExpression ;
 AssignmentExpression ::= Assignment ;
ActualTypeArgument ::= ReferenceType ;
 ActualTypeArgument ::= Wildcard ;
EnumConstant ::= Annotations Identifier Arguments? ClassBody? ;
Primary ::= PrimaryNoNewArray ;
 Primary ::= ArrayCreationExpression ;
InterfaceDeclaration ::= NormalInterfaceDeclaration ;
 InterfaceDeclaration ::= AnnotationTypeDeclaration ;
Type ::= PrimitiveType ;
 Type ::= ReferenceType ;
FormalParameter ::= VariableModifiers? Type VariableDeclaratorId ;
ForInit ::= StatementExpressionList ;
 ForInit ::= LocalVariableDeclaration ;
LocalVariableDeclaration ::= VariableModifiers? Type VariableDeclarators ;
ForUpdate ::= StatementExpressionList ;
EnumConstantName ::= Identifier ;
Annotation ::= NormalAnnotation ;
 Annotation ::= MarkerAnnotation ;
 Annotation ::= SingleElementAnnotation ;
Literal ::= IntegerLiteral ;
 Literal ::= FloatingPointLiteral ;
 Literal ::= BooleanLiteral ;
 Literal ::= CharacterLiteral ;
 Literal ::= StringLiteral ;
 Literal ::= NullLiteral ;
Statement ::= StatementWithoutTrailingSubstatement ;
 Statement ::= LabeledStatement ;
 Statement ::= IfThenStatement ;
 Statement ::= IfThenElseStatement ;
 Statement ::= WhileStatement ;
 Statement ::= ForStatement ;
PostfixExpression ::= Primary ;
 PostfixExpression ::= ExpressionName ;
 PostfixExpression ::= PostIncrementExpression ;
 PostfixExpression ::= PostDecrementExpression ;
SwitchBlockStatementGroup ::= SwitchLabels BlockStatements ;
ExceptionType ::= ClassType ;
 ExceptionType ::= TypeVariable ;
NumericType ::= IntegralType ;
 NumericType ::= FloatingPointType ;
StatementExpression ::= Assignment ;
 StatementExpression ::= PreIncrementExpression ;
 StatementExpression ::= PreDecrementExpression ;
 StatementExpression ::= PostIncrementExpression ;
 StatementExpression ::= PostDecrementExpression ;
 StatementExpression ::= MethodInvocation ;
 StatementExpression ::= ClassInstanceCreationExpression ;
CompilationUnit ::= PackageDeclaration? ImportDeclarations? TypeDeclarations? ;
ForStatement ::= BasicForStatement ;
 ForStatement ::= EnhancedForStatement ;
ReferenceType ::= ClassOrInterfaceType ;
 ReferenceType ::= TypeVariable ;
 ReferenceType ::= ArrayType ;
StatementWithoutTrailingSubstatement ::= Block ;
 StatementWithoutTrailingSubstatement ::= EmptyStatement ;
 StatementWithoutTrailingSubstatement ::= ExpressionStatement ;
 StatementWithoutTrailingSubstatement ::= AssertStatement ;
 StatementWithoutTrailingSubstatement ::= SwitchStatement ;
 StatementWithoutTrailingSubstatement ::= DoStatement ;
 StatementWithoutTrailingSubstatement ::= BreakStatement ;
 StatementWithoutTrailingSubstatement ::= ContinueStatement ;
 StatementWithoutTrailingSubstatement ::= ReturnStatement ;
 StatementWithoutTrailingSubstatement ::= SynchronizedStatement ;
 StatementWithoutTrailingSubstatement ::= ThrowStatement ;
 StatementWithoutTrailingSubstatement ::= TryStatement ;
ClassDeclaration ::= NormalClassDeclaration ;
 ClassDeclaration ::= EnumDeclaration ;
BlockStatement ::= LocalVariableDeclarationStatement ;
 BlockStatement ::= ClassDeclaration ;
 BlockStatement ::= Statement ;
ClassBodyDeclaration ::= ClassMemberDeclaration ;
 ClassBodyDeclaration ::= InstanceInitializer ;
 ClassBodyDeclaration ::= StaticInitializer ;
 ClassBodyDeclaration ::= ConstructorDeclaration ;
ConstructorDeclaration ::= ConstructorModifiers? ConstructorDeclarator Throws? ConstructorBody ;
--------------------java::java-5-parr.bgf--------------------
modifiers ::= modifier* ;
formalParameter ::= variableModifiers type variableDeclaratorId ;
shiftExpression ::= additiveExpression (shiftOp additiveExpression)* ;
forInit ::= localVariableDeclaration | expressionList ;
innerCreator ::= nonWildcardTypeArguments? Identifier classCreatorRest ;
constantDeclarator ::= Identifier constantDeclaratorRest ;
localVariableDeclaration ::= variableModifiers type variableDeclarators ;
explicitGenericInvocation ::= nonWildcardTypeArguments Identifier arguments ;
forUpdate ::= expressionList ;
enumConstantName ::= Identifier ;
formalParameterDecls ::= variableModifiers type formalParameterDeclsRest ;
annotationMethodOrConstantRest ::= annotationMethodRest | annotationConstantRest ;
switchBlockStatementGroups ::= switchBlockStatementGroup* ;
genericMethodOrConstructorDecl ::= typeParameters genericMethodOrConstructorRest ;
catches ::= catchClause catchClause* ;
switchBlockStatementGroup ::= switchLabel+ blockStatement* ;
statementExpression ::= expression ;
annotationConstantRest ::= variableDeclarators ;
annotations ::= annotation+ ;
methodBody ::= block ;
classDeclaration ::= normalClassDeclaration | enumDeclaration ;
blockStatement ::= localVariableDeclarationStatement | classOrInterfaceDeclaration | statement ;
variableModifiers ::= variableModifier* ;
relationalExpression ::= shiftExpression (relationalOp shiftExpression)* ;
classOrInterfaceModifiers ::= classOrInterfaceModifier* ;
constantExpression ::= expression ;
classOrInterfaceDeclaration ::= classOrInterfaceModifiers classDeclaration | interfaceDeclaration ;
methodDeclaration ::= Identifier methodDeclaratorRest ;
expression ::= conditionalExpression (assignmentOperator expression)? ;
elementValue ::= conditionalExpression | annotation | elementValueArrayInitializer ;
createdName ::= classOrInterfaceType | primitiveType ;
integerLiteral ::= HexLiteral | OctalLiteral | DecimalLiteral ;
Identifier ::= Letter (Letter | JavaIDDigit)* ;
classCreatorRest ::= arguments classBody? ;
annotationTypeElementDeclaration ::= modifiers annotationTypeElementRest ;
interfaceMethodOrFieldDecl ::= type Identifier interfaceMethodOrFieldRest ;
variableInitializer ::= arrayInitializer | expression ;
enumConstant ::= annotations? Identifier arguments? classBody? ;
interfaceDeclaration ::= normalInterfaceDeclaration | annotationTypeDeclaration ;
memberDeclaration ::= type methodDeclaration | fieldDeclaration ;
--------------------java::java-5-stahl.bgf--------------------
typeArgumentsEnd ::= GT | SR | BSR ;
conditionalExpression ::= logicalOrExpression (QUESTION assignmentExpression COLON conditionalExpression)? ;
casesGroup ::= aCase+ caseSList ;
modifiers ::= (modifier | annotation)* ;
varInitializer ::= (ASSIGN initializer)? ;
type ::= classOrInterfaceType | builtInType ;
shiftExpression ::= additiveExpression (SL | SR | BSR additiveExpression)* ;
forInit ::= (declaration | expressionList)? ;
classBlock ::= LCURLY (classField | SEMI)* RCURLY ;
equalityExpression ::= relationalExpression (NOT_EQUAL | EQUAL relationalExpression)* ;
annotation ::= AT identifier annotationInit ;
identifier ::= IDENT (DOT IDENT)* ;
inclusiveOrExpression ::= exclusiveOrExpression (BOR exclusiveOrExpression)* ;
compilationUnit ::= packageDefinition | ε importDefinition* typeDefinition* ;
constant ::= NUM_INT | CHAR_LITERAL | STRING_LITERAL | NUM_FLOAT | NUM_LONG | NUM_DOUBLE ;
variableDefinitions ::= variableDeclarator (COMMA variableDeclarator)* ;
annotations ::= annotation* ;
initializer ::= expression | arrayInitializer ;
enumConst ::= annotations IDENT enumConstInit classBlock? ;
caseSList ::= statement* ;
annotationBlock ::= LCURLY (annotationField | SEMI)* RCURLY ;
identifierStar ::= IDENT (DOT IDENT)* (DOT STAR)? ;
annotationMemberInit ::= IDENT ASSIGN annotationMemberValue ;
exclusiveOrExpression ::= andExpression (BXOR andExpression)* ;
expression ::= assignmentExpression ;
classOrInterfaceType ::= IDENT typeArguments (DOT IDENT typeArguments)* ;
expressionList ::= expression (COMMA expression)* ;
typeSpec ::= classTypeSpec | builtInTypeSpec ;
ctorHead ::= IDENT LPAREN parameterDeclarationList RPAREN throwsClause? ;
interfaceBlock ::= LCURLY (interfaceField | SEMI)* RCURLY ;
andExpression ::= equalityExpression (BAND equalityExpression)* ;
parameterDeclarationList ::= (parameterDeclaration (COMMA parameterDeclaration)*)? ;
multiplicativeExpression ::= unaryExpression (STAR | DIV | MOD unaryExpression)* ;
enumBlock ::= LCURLY (enumConst (COMMA enumConst)*)? COMMA? (SEMI (classField | SEMI)*)? RCURLY ;
forCond ::= expression? ;
annotationMemberValue ::= annotation | conditionalExpression | annotationMemberArrayInitializer ;
logicalAndExpression ::= inclusiveOrExpression (LAND inclusiveOrExpression)* ;
assignmentExpression ::= conditionalExpression (ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | STAR_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | SR_ASSIGN | BSR_ASSIGN | SL_ASSIGN | BAND_ASSIGN | BXOR_ASSIGN | BOR_ASSIGN assignmentExpression)? ;
logicalOrExpression ::= logicalAndExpression (LOR logicalAndExpression)* ;
additiveExpression ::= multiplicativeExpression (PLUS | MINUS multiplicativeExpression)* ;
forIter ::= expressionList? ;
referenceTypeSpec ::= classTypeSpec | arrayTypeSpec ;
--------------------java::java-5-studman.bgf--------------------
conditionalExpression ::= logicalOrExpression (QUESTION assignmentExpression COLON conditionalExpression)? ;
casesGroup ::= aCase+ caseSList ;
modifiers ::= (modifier | annotation)* ;
typeArguments ::= LT typeArgument (COMMA typeArgument)* typeArgumentsOrParametersEnd? ;
varInitializer ::= (ASSIGN initializer)? ;
type ::= classOrInterfaceType | builtInType ;
shiftExpression ::= additiveExpression (SL | SR | BSR additiveExpression)* ;
annotationMemberValueInitializer ::= conditionalExpression | annotation | annotationMemberArrayInitializer ;
forInit ::= (declaration | expressionList)? ;
classBlock ::= LCURLY (classField | SEMI)* RCURLY ;
typeArgumentSpec ::= classTypeSpec | builtInTypeArraySpec ;
equalityExpression ::= relationalExpression (NOT_EQUAL | EQUAL relationalExpression)* ;
traditionalForClause ::= forInit SEMI forCond SEMI forIter ;
identifier ::= IDENT (DOT IDENT)* ;
inclusiveOrExpression ::= exclusiveOrExpression (BOR exclusiveOrExpression)* ;
annotationArguments ::= annotationMemberValueInitializer | anntotationMemberValuePairs ;
compilationUnit ::= packageDefinition | ε importDefinition* typeDefinition* ;
constant ::= NUM_INT | CHAR_LITERAL | STRING_LITERAL | NUM_FLOAT | NUM_LONG | NUM_DOUBLE ;
variableDefinitions ::= variableDeclarator (COMMA variableDeclarator)* ;
annotations ::= annotation* ;
initializer ::= expression | arrayInitializer ;
caseSList ::= statement* ;
anntotationMemberValuePairs ::= annotationMemberValuePair (COMMA annotationMemberValuePair)* ;
annotationBlock ::= LCURLY (annotationField | SEMI)* RCURLY ;
identifierStar ::= IDENT (DOT IDENT)* (DOT STAR)? ;
exclusiveOrExpression ::= andExpression (BXOR andExpression)* ;
expression ::= assignmentExpression ;
classOrInterfaceType ::= IDENT typeArguments? (DOT IDENT typeArguments?)* ;
typeArgument ::= typeArgumentSpec | wildcardType ;
expressionList ::= expression (COMMA expression)* ;
typeSpec ::= classTypeSpec | builtInTypeSpec ;
ctorHead ::= IDENT LPAREN parameterDeclarationList RPAREN throwsClause? ;
interfaceBlock ::= LCURLY (interfaceField | SEMI)* RCURLY ;
typeArgumentsOrParametersEnd ::= GT | SR | BSR ;
parameterDeclarationList ::= ((parameterDeclaration (COMMA parameterDeclaration)* (COMMA variableLengthParameterDeclaration)?) | variableLengthParameterDeclaration)? ;
andExpression ::= equalityExpression (BAND equalityExpression)* ;
multiplicativeExpression ::= unaryExpression (STAR | DIV | MOD unaryExpression)* ;
enumBlock ::= LCURLY (enumConstant (COMMA enumConstant)* COMMA?)? (SEMI (classField | SEMI)*)? RCURLY ;
forCond ::= expression? ;
typeDefinitionInternal ::= classDefinition | interfaceDefinition | enumDefinition | annotationDefinition ;
enumConstantBlock ::= LCURLY (enumConstantField | SEMI)* RCURLY ;
logicalAndExpression ::= inclusiveOrExpression (LAND inclusiveOrExpression)* ;
assignmentExpression ::= conditionalExpression (ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | STAR_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | SR_ASSIGN | BSR_ASSIGN | SL_ASSIGN | BAND_ASSIGN | BXOR_ASSIGN | BOR_ASSIGN assignmentExpression)? ;
logicalOrExpression ::= logicalAndExpression (LOR logicalAndExpression)* ;
additiveExpression ::= multiplicativeExpression (PLUS | MINUS multiplicativeExpression)* ;
typeParameters ::= LT typeParameter (COMMA typeParameter)* typeArgumentsOrParametersEnd? ;
annotationMemberArrayValueInitializer ::= conditionalExpression | annotation ;
forIter ::= expressionList? ;
--------------------java::java-1-cordy-guo.bgf--------------------
component ::= dot_id | method_argument | subscript ;
argument ::= expression ;
numeric_literal ::= number ;
equality_expression ::= relational_expression equality_op_relational_expression* ;
conditional_or_expression ::= conditional_and_expression or_conditional_and_expression* ;
type_specifier ::= type_name | array_type_specifier ;
declaration_or_statement ::= local_variable_declaration | class_declaration | statement ;
instance_initializer ::= NL block NL NL ;
mult_op_unary_expression ::= mult_op unary_expression ;
equality_op_relational_expression ::= equality_op relational_expression ;
method_or_constructor_declaration ::= method_declaration | constructor_declaration ;
label_name ::= reference ;
shift_expression ::= additive_expression shift_additive_expression* ;
constructor_declaration ::= NL modifier* constructor_declarator throws? constructor_body NL NL ;
field_declaration ::= variable_declaration ;
interface_declaration ::= interface_header interface_body ;
class_declaration ::= class_header class_body ;
class_name ::= declared_name ;
conditional_expression ::= conditional_or_expression conditional_choice? ;
formal_parameter_name ::= variable_name ;
relational_expression ::= shift_expression relational_op_shift_expression* ;
type_name ::= primitive_type | qualified_name ;
declared_name ::= reference ;
literal ::= numeric_literal | character_literal | string_literal | boolean_literal | null_literal ;
statement ::= label_statement | empty_statement | expression_statement | if_statement | switch_statement | while_statement | do_statement | for_statement | break_statement | continue_statement | return_statement | throw_statement | synchronized_statement | try_statement | block ;
shift_additive_expression ::= shift_op additive_expression ;
variable_name ::= declared_name dimension* ;
package_or_type_name ::= qualified_name ;
additive_expression ::= multiplicative_expression add_op_multiplicative_expression* ;
method_name ::= declared_name ;
interface_body ::= class_or_interface_body ;
class_or_interface_name ::= qualified_name ;
imported_name ::= package_or_type_name dot_star? ;
package_name ::= qualified_name ;
postfix_expression ::= primary post_inc_dec* ;
switch_alternative ::= switch_label IN NL declaration_or_statement* EX ;
multiplicative_expression ::= unary_expression mult_op_unary_expression* ;
add_op_multiplicative_expression ::= add_op multiplicative_expression ;
inclusive_or_expression ::= exclusive_or_expression or_exclusive_or_expression* ;
array_type_specifier ::= type_name dimension+ ;
variable_initializer ::= expression | array_initializer ;
variable_declarators ::= variable_declarator+ ;
method_declaration ::= NL modifier* type_specifier method_declarator throws? method_body ;
character_literal ::= charlit ;
conditional_and_expression ::= inclusive_or_expression and_inclusive_or_expression* ;
expression ::= assignment_expression ;
member_declaration ::= method_or_constructor_declaration | type_declaration ;
variable_declarator ::= variable_name equals_variable_initializer? ;
exclusive_or_expression ::= and_expression or_and_expression* ;
constant_expression ::= expression ;
interface_name ::= declared_name ;
qualified_name ::= reference ;
reference ::= id component* ;
local_variable_declaration ::= variable_declaration ;
class_body ::= class_or_interface_body ;
constructor_body ::= block NL ;
class_body_declaration ::= empty_declaration | member_declaration | instance_initializer | static_initializer | field_declaration ;
program ::= package_declaration ;
string_literal ::= stringlit ;
package_declaration ::= package_header? import_declaration* type_declaration* ;
and_expression ::= equality_expression and_equality_expression* ;
--------------------java::java-1-jouault.bgf--------------------
ClassFeature ::= ClassMember ;
 ClassFeature ::= JavaClass ;
 ClassFeature ::= FeatureParameter ;
JavaElement ::= ClassFeature ;
 JavaElement ::= Package ;
ClassMember ::= Field ;
 ClassMember ::= Method ;
String ::= string() ;
--------------------java::java-1-touzet.bgf--------------------
NamedElement ::= ClassDeclaration ;
 NamedElement ::= MethodDefinition ;
String ::= string() ;
--------------------java::java-3-bruneliere.bgf--------------------
Int ::= ε ;
Modifier ::= Class ;
 Modifier ::= Interface ;
 Modifier ::= Method ;
 Modifier ::= Field ;
String ::= string() ;
PrimitiveType ::= Int ;
Value ::= ε ;
--------------------java::java-4-sdf.bgf--------------------
SimpleName ::= Identifier ;
FormalParameter ::= Modifier* Type VariableDeclaratorId ;
Type ::= PrimitiveType ;
 Type ::= ReferenceType ;
ForInit ::= StatementExpressionList ;
 ForInit ::= LocalVariableDeclaration ;
MethodDeclaration ::= MethodHeader MethodBody ;
ClassOrInterfaceType ::= Name ;
ConstantDeclaration ::= FieldDeclaration ;
Top-sort ::= CompilationUnits ;
ImportDeclaration ::= SingleTypeImportDeclaration ;
 ImportDeclaration ::= TypeImportOnDemandDeclaration ;
LongLiteral ::= DecimalLongLiteral ;
 LongLiteral ::= HexLongLiteral ;
 LongLiteral ::= OctalLongLiteral ;
InterfaceType ::= ClassOrInterfaceType ;
ForUpdate ::= StatementExpressionList ;
ClassType ::= ClassOrInterfaceType ;
IntegerLiteral ::= DecimalIntegerLiteral ;
 IntegerLiteral ::= HexIntegerLiteral ;
 IntegerLiteral ::= OctalIntegerLiteral ;
Statement ::= StatementWithoutTrailingSubstatement ;
 Statement ::= LabeledStatement ;
 Statement ::= IfThenStatement ;
 Statement ::= IfThenElseStatement ;
 Statement ::= WhileStatement ;
 Statement ::= ForStatement ;
 Statement ::= ClassDeclaration ;
 Statement ::= AssertStatement ;
Literal ::= IntegerLiteral ;
 Literal ::= LongLiteral ;
 Literal ::= FloatingPointLiteral ;
 Literal ::= DoubleLiteral ;
 Literal ::= BooleanLiteral ;
 Literal ::= CharacterLiteral ;
 Literal ::= StringLiteral ;
 Literal ::= NullLiteral ;
MethodHeader ::= Modifier* MethodRes MethodDeclarator Throws? ;
LeftHandSide ::= FieldAccess ;
 LeftHandSide ::= ArrayAccess ;
Assignment ::= LeftHandSide AssignmentOperator Expression ;
CompilationUnits ::= CompilationUnit* ;
StatementNoShortIf ::= StatementWithoutTrailingSubstatement ;
 StatementNoShortIf ::= LabeledStatementNoShortIf ;
 StatementNoShortIf ::= IfThenElseStatementNoShortIf ;
 StatementNoShortIf ::= WhileStatementNoShortIf ;
 StatementNoShortIf ::= ForStatementNoShortIf ;
SwitchBlockStatementGroup ::= SwitchLabel+ BlockStatement+ ;
ClassMemberDeclaration ::= FieldDeclaration ;
 ClassMemberDeclaration ::= MethodDeclaration ;
 ClassMemberDeclaration ::= Block ;
InterfaceMemberDeclaration ::= ConstantDeclaration ;
 InterfaceMemberDeclaration ::= AbstractMethodDeclaration ;
 InterfaceMemberDeclaration ::= InterfaceDeclaration ;
 InterfaceMemberDeclaration ::= ClassDeclaration ;
NumericType ::= IntegralType ;
 NumericType ::= FloatingPointType ;
CompilationUnit ::= PackageDeclaration? ImportDeclaration* TypeDeclaration+ ;
VariableInitializer ::= Expression ;
 VariableInitializer ::= ArrayInitializer ;
ReferenceType ::= ClassOrInterfaceType ;
 ReferenceType ::= ArrayType ;
StatementWithoutTrailingSubstatement ::= Block ;
 StatementWithoutTrailingSubstatement ::= EmptyStatement ;
 StatementWithoutTrailingSubstatement ::= ExpressionStatement ;
 StatementWithoutTrailingSubstatement ::= SwitchStatement ;
 StatementWithoutTrailingSubstatement ::= DoStatement ;
 StatementWithoutTrailingSubstatement ::= BreakStatement ;
 StatementWithoutTrailingSubstatement ::= ContinueStatement ;
 StatementWithoutTrailingSubstatement ::= ReturnStatement ;
 StatementWithoutTrailingSubstatement ::= SynchronizedStatement ;
 StatementWithoutTrailingSubstatement ::= ThrowStatement ;
 StatementWithoutTrailingSubstatement ::= TryStatement ;
Primary ::= PrimaryNoNewArray ;
 Primary ::= ArrayCreationExpression ;
ConstructorDeclaration ::= Modifier* ConstructorDeclarator Throws? ConstructorBody ;
--------------------java::java-5-cordy-guo-dean.bgf--------------------
numeric_literal ::= number ;
equality_expression ::= relational_expression equality_op_relational_expression* ;
conditional_or_expression ::= conditional_and_expression or_conditional_and_expression* ;
declaration ::= local_variable_declaration | class_declaration ;
type_specifier ::= type_name | array_type_specifier ;
equality_op_relational_expression ::= equality_op relational_expression ;
nested_annotation ::= annotation ;
method_or_constructor_declaration ::= method_declaration | constructor_declaration ;
label_name ::= reference ;
shift_expression ::= additive_expression shift_additive_expression* ;
for_in_init ::= modifier* type_specifier variable_name ;
interface_declaration ::= interface_header interface_body ;
class_name ::= declared_name ;
conditional_expression ::= conditional_or_expression conditional_choice? ;
type_name ::= primitive_type | qualified_name ;
declared_name ::= id generic_parameter? ;
variable_name ::= declared_name dimension* ;
package_or_type_name ::= qualified_name ;
additive_expression ::= multiplicative_expression add_op_multiplicative_expression* ;
interface_body ::= class_or_interface_body ;
imported_name ::= package_or_type_name dot_star? ;
type_parameter ::= declared_name type_bound_clause? ;
package_name ::= qualified_name ;
expression_or_nested_annotation ::= expression | nested_annotation ;
inclusive_or_expression ::= exclusive_or_expression or_exclusive_or_expression* ;
conditional_and_expression ::= inclusive_or_expression and_inclusive_or_expression* ;
variable_declarator ::= variable_name equals_variable_initializer? ;
interface_name ::= declared_name ;
qualified_name ::= reference ;
constructor_body ::= block NL ;
class_body_declaration ::= empty_declaration | member_declaration | instance_initializer | static_initializer | field_declaration ;
enum_element ::= NL id method_argument? ;
argument ::= expression | type_specifier ;
enum_declaration ::= enum_header enum_body ;
type_bound ::= type_specifier and_type_spec* ;
declaration_or_statement ::= declaration | statement ;
instance_initializer ::= NL block NL NL ;
mult_op_unary_expression ::= mult_op unary_expression ;
field_declaration ::= variable_declaration ;
constructor_declaration ::= NL modifier* generic_parameter? constructor_declarator throws? constructor_body NL NL ;
class_declaration ::= class_header class_body ;
formal_parameter_name ::= variable_name ;
relational_expression ::= shift_expression relational_op_shift_expression* ;
literal ::= numeric_literal | character_literal | string_literal | boolean_literal | null_literal ;
shift_additive_expression ::= shift_op additive_expression ;
method_name ::= declared_name ;
class_or_interface_name ::= id class_or_interface_component* ;
switch_alternative ::= switch_label IN NL declaration_or_statement* EX ;
postfix_expression ::= primary post_inc_dec* ;
type_argument ::= type_specifier | wildcard_type ;
add_op_multiplicative_expression ::= add_op multiplicative_expression ;
multiplicative_expression ::= unary_expression mult_op_unary_expression* ;
array_type_specifier ::= type_name dimension+ ;
variable_initializer ::= expression | array_initializer ;
variable_declarators ::= variable_declarator+ ;
method_declaration ::= NL modifier* generic_parameter? type_specifier method_declarator throws? method_body ;
character_literal ::= charlit ;
expression ::= assignment_expression ;
exclusive_or_expression ::= and_expression or_and_expression* ;
constant_expression ::= expression ;
local_variable_declaration ::= variable_declaration ;
class_body ::= class_or_interface_body ;
program ::= package_declaration ;
string_literal ::= stringlit ;
package_declaration ::= package_header? import_declaration* type_declaration* ;
and_expression ::= equality_expression and_equality_expression* ;
--------------------java::java-5-giquel.bgf--------------------
Statement ::= AssertStatement ;
 Statement ::= Block ;
 Statement ::= BreakStatement ;
 Statement ::= ContinueStatement ;
 Statement ::= ConstructorInvocation ;
 Statement ::= DoStatement ;
 Statement ::= EmptyStatement ;
 Statement ::= EnhancedForStatement ;
 Statement ::= ExpressionStatement ;
 Statement ::= ForStatement ;
 Statement ::= IfStatement ;
 Statement ::= ReturnStatement ;
 Statement ::= ThrowStatement ;
 Statement ::= SuperConstructorInvocation ;
 Statement ::= SwitchCase ;
 Statement ::= SwitchStatement ;
 Statement ::= SynchronizedStatement ;
 Statement ::= TryStatement ;
 Statement ::= TypeDeclarationStatement ;
 Statement ::= WhileStatement ;
 Statement ::= LabeledStatement ;
 Statement ::= VariableDeclarationStatement ;
Comment ::= BlockComment ;
 Comment ::= Javadoc ;
 Comment ::= LineComment ;
Integer ::= integer() ;
AbstractTypeDeclaration ::= AnnotationTypeDeclaration ;
 AbstractTypeDeclaration ::= EnumDeclaration ;
 AbstractTypeDeclaration ::= TypeDeclaration ;
Expression ::= Annotation ;
 Expression ::= ArrayAccess ;
 Expression ::= ArrayCreation ;
 Expression ::= ArrayInitializer ;
 Expression ::= ArrayLengthAccess ;
 Expression ::= Assignment ;
 Expression ::= CastExpression ;
 Expression ::= ClassInstanceCreation ;
 Expression ::= ConditionalExpression ;
 Expression ::= FieldAccess ;
 Expression ::= InfixExpression ;
 Expression ::= InstanceofExpression ;
 Expression ::= MethodInvocation ;
 Expression ::= NamedElementRef ;
 Expression ::= ParenthesizedExpression ;
 Expression ::= PostfixExpression ;
 Expression ::= PrefixExpression ;
 Expression ::= SuperFieldAccess ;
 Expression ::= SuperMethodInvocation ;
 Expression ::= ThisExpression ;
 Expression ::= TypeLiteral ;
 Expression ::= VariableDeclarationExpression ;
BodyDeclaration ::= Initializer ;
 BodyDeclaration ::= EnumConstantDeclaration ;
 BodyDeclaration ::= FieldDeclaration ;
 BodyDeclaration ::= AbstractTypeDeclaration ;
 BodyDeclaration ::= AnnotationTypeMemberDeclaration ;
 BodyDeclaration ::= MethodDeclaration ;
ValuedNamedElement ::= MultipleValuedNamedElement ;
 ValuedNamedElement ::= SingleVariableDeclaration ;
MultipleValuedNamedElement ::= FieldDeclaration ;
ASTNode ::= AnnotationMemberValuePair ;
 ASTNode ::= AnonymousClassDeclaration ;
 ASTNode ::= BodyDeclaration ;
 ASTNode ::= CatchClause ;
 ASTNode ::= Comment ;
 ASTNode ::= Expression ;
 ASTNode ::= ImportDeclaration ;
 ASTNode ::= MemberRef ;
 ASTNode ::= MethodRef ;
 ASTNode ::= MethodRefParameter ;
 ASTNode ::= Statement ;
 ASTNode ::= TagElement ;
 ASTNode ::= TextElement ;
 ASTNode ::= PackageDeclaration ;
 ASTNode ::= ParameterizedType ;
 ASTNode ::= PrimitiveType ;
 ASTNode ::= SingleVariableDeclaration ;
 ASTNode ::= TypeParameter ;
 ASTNode ::= UnresolvedItem ;
 ASTNode ::= WildCardType ;
NamedElement ::= OrphanType ;
 NamedElement ::= ValuedNamedElement ;
 NamedElement ::= AbstractTypeDeclaration ;
 NamedElement ::= AnnotationTypeMemberDeclaration ;
 NamedElement ::= MethodDeclaration ;
 NamedElement ::= UnresolvedItem ;
 NamedElement ::= EnumConstantDeclaration ;
 NamedElement ::= LabeledStatement ;
 NamedElement ::= PackageDeclaration ;
 NamedElement ::= TypeParameter ;
EmptyStatement ::= ε ;
String ::= string() ;
--------------------java::java-5-landman.bgf--------------------
Literal ::= CharLiteral ;
 Literal ::= BoolLiteral ;
 Literal ::= ClassLiteral ;
 Literal ::= FloatLiteral ;
 Literal ::= StringLiteral ;
 Literal ::= NullLiteral ;
 Literal ::= IntLiteral ;
StringLiteral ::= ε ;
RefType ::= ClassOrInterfaceType ;
 RefType ::= ArrayType ;
Type ::= RefType ;
 Type ::= PrimType ;
CharLiteral ::= ε ;
ExceptionType ::= ClassType ;
TypeVarId ::= Id ;
ClassBodyDec ::= ClassMemberDec ;
 ClassBodyDec ::= StaticInit ;
 ClassBodyDec ::= ConstrDec ;
 ClassBodyDec ::= InstanceInit ;
VarInit ::= Expr ;
 VarInit ::= ArrayInit ;
NumType ::= FloatType ;
 NumType ::= IntType ;
--------------------modula::sdf.bgf--------------------
Type ::= TypeLiteral | QualId ;
Stmt ::= AssignStmt | Block | CallStmt | CaseStmt | ExitStmt | EvalStmt | ForStmt | IfStmt | LockStmt | LoopStmt | RaiseStmt | RepeatStmt | ReturnStmt | TryFinStmt | TryXptStmt | TCaseStmt | WhileStmt | WithStmt ;
Import ::= AsImport | FromImport ;
Ancestor ::= TypeName | ObjectType | QualId ;
--------------------modula::src-052.bgf--------------------
Literal ::= Number | CharLiteral | TextLiteral ;
E4 ::= E5 (Addop E5)* ;
E3 ::= E4 (Relop E4)* ;
PrintingChar ::= Letter | Digit | UtherChar ;
ConstExpr ::= Expr ;
Stmt ::= AssignStmt | Block | CallStmt | CaseStmt | ExitStmt | EvalStmt | ForStmt | IfStmt | LockStmt | LoopStmt | RaiseStmt | RepeatStmt | ReturnStmt | TryFinStmt | TryXptStmt | TCaseStmt | WhileStmt | WithStmt ;
E7 ::= E8 Selector* ;
E5 ::= E6 (Mulop E6)* ;
--------------------modula::dagenais-cordy.bgf--------------------
Labels ::= ConstExpr DotDotConstExpr? ;
AnyCons ::= SetCons | RecordCons | ArrayCons ;
RecordElt ::= Expr EqualExpr? ;
Field ::= IdList ColonType? EqualConstExpr? ;
Fields ::= FieldList? ;
ConstExpr ::= Expr ;
ImportItem ::= id AsId? ;
MulOpE6 ::= MulOp E6 ;
Expr ::= E1 OrE1* ;
E7 ::= E8 Selector* ;
AddOpE5 ::= AddOp E5 ;
Methods ::= MethodList? ;
E6 ::= SignOp* E7 ;
E5 ::= E6 MulOpE6* ;
E4 ::= E5 AddOpE5* ;
Formal ::= Mode? IdList ColonType? EqualConstExpr? ;
E3 ::= E4 RelOpE4* ;
E1 ::= E2 AndE2* ;
SetElt ::= Expr DotDotExpr? ;
Stmts ::= IN NL OptStmts? EX ;
QualId ::= id DotId? ;
RelOpE4 ::= RelOp E4 ;
Stmt ::= IfStmt | ForStmt | ReturnStmt | WhileStmt | AssignStmt | CallStmt | Block | CaseStmt | ExitStmt | EvalStmt | LockStmt | LoopStmt | RaiseStmt | RepeatStmt | TypecaseStmt | TryStmt | WithStmt ;
Overrides ::= OverrideList? ;
ObjectOrTypeName ::= TypeName | ObjectType ;
program ::= Interface | Module | GInterface | GModule | IInterface | IModule ;
Method ::= id Signature EqualConstExpr? ;
--------------------assembly::delphi.bgf--------------------
procedure_body ::= asm_stmtblock ;
asm_expr ::= asm_term asm_infix_expr* ;
asmlabel_colon ::= asmlabel colon ;
asm_infix_expr ::= asm_infixop asm_term ;
asm_stm ::= asmlabel_colon? asm_unlabeledstm_semi? ;
unlabeled_stm ::= asm_stmtblock ;
asmhex ::= number SPOFF id SPON ;
asm_term ::= asm_prefixop* asm_primary asm_postfixop* ;
--------------------basic::vb6-cordy.bgf--------------------
while_or_until_clause ::= while_clause | until_clause ;
declaration ::= variable_declaration | implements_declaration | subprogram_declaration | constant_declaration | class_declaration | declare_subprogram_declaration | defletter_declaration | enum_declaration | type_declaration ;
for_next_statement ::= full_for_next_statement | short_for_next_statement ;
variable_description ::= array_description | single_var_description ;
variable_declaration ::= variable_declaration_keyword variable_description+ ;
sub_scope ::= declaration_or_statement* ;
expn ::= primary operator_primary* ;
class_begin_item ::= assignment_statement | class_begin_block | eol ;
statement ::= label_statement | assignment_statement | app_activate_statement | attribute_statement | beep_statement | call_statement | chdir_statement | chdrive_statement | close_statement | date_statement | deletesetting_statement | do_statement | end_statement | erase_statement | error_statement | event_statement | exit_statement | filecopy_statement | for_each_statement | for_next_statement | get_statement | gosub_statement | return_statement | goto_statement | if_statement | input_statement | kill_statement | line_input_statement | load_statement | lock_statement | lset_statement | mid_statement | mkdir_statement | name_statement | on_error_statement | open_statement | option_statement | preprocessor_if_statement | print_statement | property_statement | put_statement | randomize_statement | reset_statement | resume_statement | rmdir_statement | rset_statement | savepicture_statement | savesetting_statement | select_case_statement | set_statement | stop_statement | time_statement | unload_statement | unlock_statement | while_statement | with_statement | width_statement | write_statement ;
if_statement ::= full_if_statement | short_if_statement ;
single_var_description ::= id initial_value? as_type? ;
tab_vbcomment ::= TAB vbcomment ;
for_each_statement ::= full_for_each_statement | short_for_each_statement ;
operator_primary ::= op primary ;
defletter_declaration ::= def_keyword letterrange+ ;
subscript_expn ::= expn to_expn? ;
program ::= class_file_header? declaration_or_statement* ;
event_argument ::= byref_or_byval? id parens? as_type? ;
constant_description ::= id as_type? initial_value ;
case_expn ::= expn to_expn? ;
--------------------basic::vb-glineur.bgf--------------------
obeo/psm/vb/projects/VB_1/statements/VB_Statement ::= obeo/psm/vb/projects/VB_1/statements/VB_Call ;
 obeo/psm/vb/projects/VB_1/statements/VB_Statement ::= obeo/psm/vb/projects/VB_1/statements/VB_RawBody ;
Integer ::= integer() ;
obeo/psm/vb/projects/VB_1/statements/VB_CallEmptyArgument ::= ε ;
obeo/psm/vb/projects/VB_1/expressions/VB_Value ::= obeo/psm/vb/projects/VB_1/expressions/VB_NegativeValue ;
 obeo/psm/vb/projects/VB_1/expressions/VB_Value ::= obeo/psm/vb/projects/VB_1/expressions/VB_VariableSystem ;
 obeo/psm/vb/projects/VB_1/expressions/VB_Value ::= obeo/psm/vb/projects/VB_1/expressions/VB_Literal ;
obeo/psm/vb/projects/VB_1/expressions/VB_Literal ::= obeo/psm/vb/projects/VB_1/expressions/VB_Literal_Literal ;
 obeo/psm/vb/projects/VB_1/expressions/VB_Literal ::= obeo/psm/vb/projects/VB_1/expressions/VB_Literal_Number ;
 obeo/psm/vb/projects/VB_1/expressions/VB_Literal ::= obeo/psm/vb/projects/VB_1/expressions/VB_Literal_Value ;
obeo/psm/vb/projects/VB_1/core/VB_Data ::= obeo/psm/vb/projects/VB_1/features/VB_Parameter ;
 obeo/psm/vb/projects/VB_1/core/VB_Data ::= obeo/psm/vb/projects/VB_1/features/VB_Feature ;
 obeo/psm/vb/projects/VB_1/core/VB_Data ::= obeo/psm/vb/projects/VB_1/graphicals/VB_GraphicalProperty ;
 obeo/psm/vb/projects/VB_1/core/VB_Data ::= obeo/psm/vb/projects/VB_1/graphicals/VB_GraphicalElement ;
obeo/psm/vb/projects/VB_1/graphicals/VB_GraphicalField ::= obeo/psm/vb/projects/VB_1/graphicals/VB_GraphicalPropertySet ;
 obeo/psm/vb/projects/VB_1/graphicals/VB_GraphicalField ::= obeo/psm/vb/projects/VB_1/graphicals/VB_GraphicalProperty ;
String ::= string() ;
obeo/psm/vb/resources/VB_LangElement ::= obeo/psm/vb/projects/VB_1/core/VB_Content ;
 obeo/psm/vb/resources/VB_LangElement ::= obeo/psm/vb/projects/VB_1/core/VB_GlobalVariable ;
 obeo/psm/vb/resources/VB_LangElement ::= obeo/psm/vb/projects/VB_1/core/VB_ContentElement ;
 obeo/psm/vb/resources/VB_LangElement ::= obeo/psm/vb/projects/VB_1/core/VB_Type ;
 obeo/psm/vb/resources/VB_LangElement ::= obeo/psm/vb/projects/VB_1/core/VB_Data ;
 obeo/psm/vb/resources/VB_LangElement ::= obeo/psm/vb/projects/VB_1/features/VB_Modifier ;
 obeo/psm/vb/resources/VB_LangElement ::= obeo/psm/vb/projects/VB_1/graphicals/VB_GraphicalField ;
 obeo/psm/vb/resources/VB_LangElement ::= obeo/psm/vb/projects/VB_1/statements/VB_CallArgument ;
 obeo/psm/vb/resources/VB_LangElement ::= obeo/psm/vb/projects/VB_1/statements/VB_Case ;
 obeo/psm/vb/resources/VB_LangElement ::= obeo/psm/vb/projects/VB_1/expressions/VB_Expression ;
 obeo/psm/vb/resources/VB_LangElement ::= obeo/psm/vb/projects/VB_1/references/VB_FullTypeRef ;
 obeo/psm/vb/resources/VB_LangElement ::= obeo/psm/vb/projects/VB_1/references/VB_TypeRef ;
 obeo/psm/vb/resources/VB_LangElement ::= obeo/psm/vb/projects/VB_1/references/VB_DataRef ;
 obeo/psm/vb/resources/VB_LangElement ::= obeo/psm/vb/projects/VB_1/references/VB_LabelRef ;
obeo/psm/vb/projects/VB_1/expressions/VB_Literal_Number ::= ε ;
obeo/psm/vb/projects/VB_1/expressions/VB_Expression ::= obeo/psm/vb/projects/VB_1/expressions/VB_AssignmentExpression ;
 obeo/psm/vb/projects/VB_1/expressions/VB_Expression ::= obeo/psm/vb/projects/VB_1/expressions/VB_TypeOfExpression ;
 obeo/psm/vb/projects/VB_1/expressions/VB_Expression ::= obeo/psm/vb/projects/VB_1/expressions/VB_OperatorExpression ;
 obeo/psm/vb/projects/VB_1/expressions/VB_Expression ::= obeo/psm/vb/projects/VB_1/expressions/VB_NewExpression ;
 obeo/psm/vb/projects/VB_1/expressions/VB_Expression ::= obeo/psm/vb/projects/VB_1/expressions/VB_NotExpression ;
 obeo/psm/vb/projects/VB_1/expressions/VB_Expression ::= obeo/psm/vb/projects/VB_1/expressions/VB_NegativeExpression ;
 obeo/psm/vb/projects/VB_1/expressions/VB_Expression ::= obeo/psm/vb/projects/VB_1/expressions/VB_ParenthesisExpression ;
 obeo/psm/vb/projects/VB_1/expressions/VB_Expression ::= obeo/psm/vb/projects/VB_1/expressions/VB_TabValuesExpression ;
 obeo/psm/vb/projects/VB_1/expressions/VB_Expression ::= obeo/psm/vb/projects/VB_1/expressions/VB_ByValExpression ;
 obeo/psm/vb/projects/VB_1/expressions/VB_Expression ::= obeo/psm/vb/projects/VB_1/expressions/VB_Value ;
 obeo/psm/vb/projects/VB_1/expressions/VB_Expression ::= obeo/psm/vb/projects/VB_1/references/VB_FullDataRef ;
obeo/psm/vb/projects/VB_1/core/VB_ContentElement ::= obeo/psm/vb/projects/VB_1/core/VB_FileAttribute ;
 obeo/psm/vb/projects/VB_1/core/VB_ContentElement ::= obeo/psm/vb/projects/VB_1/core/VB_Option ;
 obeo/psm/vb/projects/VB_1/core/VB_ContentElement ::= obeo/psm/vb/projects/VB_1/core/VB_Imports ;
 obeo/psm/vb/projects/VB_1/core/VB_ContentElement ::= obeo/psm/vb/projects/VB_1/core/VB_Implements ;
 obeo/psm/vb/projects/VB_1/core/VB_ContentElement ::= obeo/psm/vb/projects/VB_1/core/VB_Assembly ;
 obeo/psm/vb/projects/VB_1/core/VB_ContentElement ::= obeo/psm/vb/projects/VB_1/core/VB_Module ;
 obeo/psm/vb/projects/VB_1/core/VB_ContentElement ::= obeo/psm/vb/projects/VB_1/core/VB_SimpleType ;
 obeo/psm/vb/projects/VB_1/core/VB_ContentElement ::= obeo/psm/vb/projects/VB_1/core/VB_Enum ;
 obeo/psm/vb/projects/VB_1/core/VB_ContentElement ::= obeo/psm/vb/projects/VB_1/preprocessing/VB_PreprocIf ;
 obeo/psm/vb/projects/VB_1/core/VB_ContentElement ::= obeo/psm/vb/projects/VB_1/core/VB_Class ;
 obeo/psm/vb/projects/VB_1/core/VB_ContentElement ::= obeo/psm/vb/projects/VB_1/graphicals/VB_GraphicalElement ;
 obeo/psm/vb/projects/VB_1/core/VB_ContentElement ::= obeo/psm/vb/projects/VB_1/features/VB_Feature ;
obeo/psm/vb/projects/VB_1/features/VB_Feature ::= obeo/psm/vb/projects/VB_1/features/VB_Region ;
 obeo/psm/vb/projects/VB_1/features/VB_Feature ::= obeo/psm/vb/projects/VB_1/features/VB_Sub ;
 obeo/psm/vb/projects/VB_1/features/VB_Feature ::= obeo/psm/vb/projects/VB_1/features/VB_Function ;
 obeo/psm/vb/projects/VB_1/features/VB_Feature ::= obeo/psm/vb/projects/VB_1/features/VB_DeclareFunction ;
 obeo/psm/vb/projects/VB_1/features/VB_Feature ::= obeo/psm/vb/projects/VB_1/features/VB_DeclareSub ;
 obeo/psm/vb/projects/VB_1/features/VB_Feature ::= obeo/psm/vb/projects/VB_1/features/VB_Property ;
 obeo/psm/vb/projects/VB_1/features/VB_Feature ::= obeo/psm/vb/projects/VB_1/features/VB_Attribute ;
obeo/psm/vb/projects/VB_1/statements/VB_CallArgument ::= obeo/psm/vb/projects/VB_1/statements/VB_CallEmptyArgument ;
 obeo/psm/vb/projects/VB_1/statements/VB_CallArgument ::= obeo/psm/vb/projects/VB_1/statements/VB_CallExpressionArgument ;
obeo/psm/vb/projects/VB_1/expressions/VB_Literal_Value ::= ε ;
obeo/psm/vb/projects/VB_1/expressions/VB_Literal_Literal ::= ε ;
obeo/psm/vb/projects/VB_1/core/VB_Type ::= obeo/psm/vb/projects/VB_1/core/VB_Class ;
obeo/psm/vb/projects/VB_1/features/VB_Modifier ::= obeo/psm/vb/projects/VB_1/features/VB_Set ;
 obeo/psm/vb/projects/VB_1/features/VB_Modifier ::= obeo/psm/vb/projects/VB_1/features/VB_Get ;
 obeo/psm/vb/projects/VB_1/features/VB_Modifier ::= obeo/psm/vb/projects/VB_1/statements/VB_Statement ;
obeo/psm/vb/resources/LocatedElement ::= obeo/psm/vb/resources/VB_LangElement ;
--------------------bibtex::bibtex-1.1.bgf--------------------
Integer ::= integer() ;
BookTitledEntry ::= InCollection ;
DatedEntry ::= Booklet ;
 DatedEntry ::= Proceedings ;
InProceedings ::= ε ;
AuthoredEntry ::= Article ;
 AuthoredEntry ::= TechReport ;
 AuthoredEntry ::= Unpublished ;
 AuthoredEntry ::= Book ;
 AuthoredEntry ::= ThesisEntry ;
ThesisEntry ::= PhDThesis ;
 ThesisEntry ::= MasterThesis ;
TitledEntry ::= Manual ;
 TitledEntry ::= Unpublished ;
 TitledEntry ::= Proceedings ;
BibTeXEntry ::= AuthoredEntry ;
 BibTeXEntry ::= DatedEntry ;
 BibTeXEntry ::= TitledEntry ;
 BibTeXEntry ::= BookTitledEntry ;
 BibTeXEntry ::= Misc ;
String ::= string() ;
--------------------bibtex::bibtex-1.2.bgf--------------------
BookTitledEntry ::= InCollection ;
DatedEntry ::= Booklet ;
 DatedEntry ::= Proceedings ;
AuthoredEntry ::= Article ;
 AuthoredEntry ::= Book ;
 AuthoredEntry ::= TechReport ;
 AuthoredEntry ::= ThesisEntry ;
 AuthoredEntry ::= InProceedings ;
 AuthoredEntry ::= Unpublished ;
ThesisEntry ::= PhdThesis ;
 ThesisEntry ::= MastersThesis ;
TitledEntry ::= Manual ;
 TitledEntry ::= Booklet ;
 TitledEntry ::= Proceedings ;
Entry ::= AuthoredEntry ;
 Entry ::= BookTitledEntry ;
 Entry ::= InstitutionEntry ;
 Entry ::= EditoredEntry ;
 Entry ::= DatedEntry ;
 Entry ::= JournalEntry ;
 Entry ::= TitledEntry ;
 Entry ::= NotedEntry ;
 Entry ::= PublisheredEntry ;
 Entry ::= SchoolEntry ;
 Entry ::= Misc ;
String ::= string() ;
--------------------bibtex::bibtex-1.bgf--------------------
Integer ::= integer() ;
Field ::= Authors ;
 Field ::= AuthorUrls ;
 Field ::= Title ;
 Field ::= Journal ;
 Field ::= BookTitle ;
 Field ::= Institution ;
 Field ::= Organization ;
 Field ::= Type ;
 Field ::= Day ;
 Field ::= Number ;
 Field ::= Chapter ;
 Field ::= Volume ;
 Field ::= Series ;
 Field ::= Pages ;
 Field ::= Publisher ;
 Field ::= Howpublished ;
 Field ::= School ;
 Field ::= Editor ;
 Field ::= Edition ;
 Field ::= Address ;
 Field ::= Year ;
 Field ::= Month ;
 Field ::= Note ;
 Field ::= Text ;
 Field ::= AbstractField ;
 Field ::= Isbn ;
 Field ::= Issn ;
 Field ::= Url ;
 Field ::= Doi ;
LocatedElement ::= Entry ;
Entry ::= Article ;
 Entry ::= Book ;
 Entry ::= Inbook ;
 Entry ::= Booklet ;
 Entry ::= Inproceedings ;
 Entry ::= Proceedings ;
 Entry ::= Incollection ;
 Entry ::= Techreport ;
 Entry ::= PhdThesis ;
 Entry ::= MastersThesis ;
 Entry ::= Manual ;
 Entry ::= Misc ;
String ::= string() ;
--------------------bibtex::bql.bgf--------------------
LocatedElement ::= Entry ;
String ::= string() ;
--------------------dot::doux.bgf--------------------
Integer ::= integer() ;
GraphElement ::= DirectedArc ;
 GraphElement ::= Constraint ;
 GraphElement ::= Node ;
 GraphElement ::= SubGraph ;
LocatedElement ::= NamedElement ;
NamedElement ::= Graph ;
 NamedElement ::= GraphElement ;
 NamedElement ::= Node ;
String ::= string() ;
--------------------dot::palies.bgf--------------------
ComplexNodeShape ::= PolygonNodeShape ;
 ComplexNodeShape ::= MNodeShape ;
 ComplexNodeShape ::= RecordNodeShape ;
PointNodeShape ::= ε ;
NodeShape ::= SimpleNodeShape ;
 NodeShape ::= PointNodeShape ;
 NodeShape ::= ComplexNodeShape ;
RecordNodeShape ::= ε ;
GraphElement ::= Graph ;
 GraphElement ::= Layer ;
 GraphElement ::= Nodelike ;
 GraphElement ::= Arc ;
 GraphElement ::= Shape ;
Integer ::= integer() ;
SimpleNodeShape ::= ε ;
Nodelike ::= SubGraph ;
 Nodelike ::= Node ;
Label ::= SimpleLabel ;
 Label ::= ComplexLabel ;
Arc ::= DirectedArc ;
 Arc ::= UndirectedArc ;
Compartment ::= VerticalCompartment ;
 Compartment ::= HorizontalCompartment ;
 Compartment ::= SimpleCompartment ;
Shape ::= NodeShape ;
 Shape ::= ArrowShape ;
String ::= string() ;
--------------------dot::rascal-abstract.bgf--------------------
NodeId ::= Id PortId ;
PortId ::= Id CompassPt ;
Id ::= string() ;
Stms ::= Stm* ;
Attrs ::= Attr* ;
--------------------dot::rascal-concrete.bgf--------------------
AttrList ::= AttrList0* ;
AttrStatement ::= AttrTag AttrList ;
StatementList ::= StatementOptional* ;
NodeStatement ::= Nod AttrList ;
Edg ::= EdgeOp Nod ;
Nod ::= Subgraph ;
 Nod ::= NodeId ;
EdgeStatement ::= Nod EdgeRhs AttrList ;
EdgeRhs ::= Edg+ ;
--------------------html::allilaire.bgf--------------------
ListElement ::= OL ;
 ListElement ::= UL ;
 ListElement ::= LI ;
TABLEElement ::= TABLE ;
 TABLEElement ::= TR ;
 TABLEElement ::= TD ;
Integer ::= integer() ;
NOFRAME ::= ε ;
HEADElement ::= LINK ;
 HEADElement ::= TITLE ;
BODYElement ::= H1 ;
 BODYElement ::= H2 ;
 BODYElement ::= H3 ;
 BODYElement ::= H4 ;
 BODYElement ::= EM ;
 BODYElement ::= STRONG ;
 BODYElement ::= B ;
 BODYElement ::= I ;
 BODYElement ::= TT ;
 BODYElement ::= PRE ;
 BODYElement ::= BIG ;
 BODYElement ::= SMALL ;
 BODYElement ::= SUB ;
 BODYElement ::= SUP ;
 BODYElement ::= STRIKE ;
 BODYElement ::= FONT ;
 BODYElement ::= IMG ;
 BODYElement ::= BR ;
 BODYElement ::= MAP ;
 BODYElement ::= AREA ;
 BODYElement ::= STYLE ;
 BODYElement ::= EMBED ;
 BODYElement ::= NOEMBED ;
 BODYElement ::= SPAN ;
 BODYElement ::= A ;
 BODYElement ::= DIV ;
 BODYElement ::= P ;
 BODYElement ::= TABLEElement ;
DL ::= ε ;
String ::= string() ;
DD ::= ε ;
DT ::= ε ;
--------------------html::clark-basic.bgf--------------------
ContentType.datatype ::= string() ;
kbd.attlist ::= Common.attrib ;
code.attlist ::= Common.attrib ;
dfn.attlist ::= Common.attrib ;
MediaDesc.datatype ::= string() ;
html.attlist ::= XHTML.version.attrib I18n.attrib ;
I18n.attrib ::= lang.attrib ;
em.attlist ::= Common.attrib ;
var.attlist ::= Common.attrib ;
caption.attlist ::= Common.attrib ;
Inline.model ::= (string() | Inline.class)* ;
body.attlist ::= Common.attrib ;
FPI.datatype ::= string() ;
LinkTypes.datatype ::= NMTOKENS.datatype ;
ContentTypes.datatype ::= string() ;
head.attlist ::= I18n.attrib profile.attlist ;
ol.attlist ::= Common.attrib ;
Form.class ::= form ;
Heading.content ::= Inline.model ;
LanguageCode.datatype ::= string() ;
Heading.class ::= h1 | h2 | h3 | h4 | h5 | h6 ;
Charsets.datatype ::= string() ;
title.attlist ::= I18n.attrib ;
Character.datatype ::= string() ;
Block.model ::= Block.mix+ ;
strong.attlist ::= Common.attrib ;
cite.attlist ::= Common.attrib ;
ul.attlist ::= Common.attrib ;
Charset.datatype ::= string() ;
Text.datatype ::= string() ;
Pixels.datatype ::= string() ;
div.attlist ::= Common.attrib ;
br.attlist ::= Core.attrib ;
dt.attlist ::= Common.attrib ;
Block.mix ::= Block.class ;
span.attlist ::= Common.attrib ;
IDREF.datatype ::= string() ;
dl.attlist ::= Common.attrib ;
Formctrl.class ::= input | label | select | textarea ;
NMTOKENS.datatype ::= string() ;
Core.attrib ::= id.attrib class.attrib title.attrib ;
NMTOKEN.datatype ::= string() ;
IDREFS.datatype ::= string() ;
ID.datatype ::= string() ;
Datetime.datatype ::= string() ;
Heading.attrib ::= Common.attrib ;
acronym.attlist ::= Common.attrib ;
MultiLength.datatype ::= string() ;
dd.attlist ::= Common.attrib ;
tr.attlist ::= Common.attrib CellHAlign.attrib CellVAlign.attrib ;
li.attlist ::= Common.attrib ;
Common.attrib ::= Core.attrib I18n.attrib ;
Length.datatype ::= string() ;
URIs.datatype ::= string() ;
Flow.model ::= (string() | Inline.class | Block.class)* ;
Number.datatype ::= string() ;
List.class ::= ul | ol | dl ;
Script.datatype ::= string() ;
URI.datatype ::= string() ;
address.attlist ::= Common.attrib ;
th.attlist ::= Cell.attrib ;
samp.attlist ::= Common.attrib ;
abbr.attlist ::= Common.attrib ;
p.attlist ::= Common.attrib ;
td.attlist ::= Cell.attrib ;
--------------------html::clark.bgf--------------------
dfn.attlist ::= Common.attrib ;
html.attlist ::= XHTML.version.attrib I18n.attrib ;
em.attlist ::= Common.attrib ;
fieldset.attlist ::= Common.attrib ;
var.attlist ::= Common.attrib ;
noframes.attlist ::= Common.attrib ;
LinkTypes.datatype ::= NMTOKENS.datatype ;
ContentTypes.datatype ::= string() ;
basefont.attlist ::= id.attrib Font.attrib ;
Form.class ::= fieldset ;
 Form.class ::= form ;
Heading.content ::= Inline.model ;
Heading.class ::= h1 | h2 | h3 | h4 | h5 | h6 ;
Block.model ::= Block.mix+ ;
strong.attlist ::= Common.attrib ;
tbody.attlist ::= Common.attrib CellHAlign.attrib CellVAlign.attrib ;
Charset.datatype ::= string() ;
Text.datatype ::= string() ;
Pixels.datatype ::= string() ;
div.attlist ::= align.attrib ;
 div.attlist ::= Common.attrib ;
dt.attlist ::= Common.attrib ;
del.attlist ::= Edit.attrib ;
small.attlist ::= Common.attrib ;
NMTOKEN.datatype ::= string() ;
ID.datatype ::= string() ;
Datetime.datatype ::= string() ;
Heading.attrib ::= align.attrib ;
 Heading.attrib ::= Common.attrib ;
tt.attlist ::= Common.attrib ;
big.attlist ::= Common.attrib ;
dd.attlist ::= Common.attrib ;
Length.datatype ::= string() ;
URIs.datatype ::= string() ;
Number.datatype ::= string() ;
u.attlist ::= Common.attrib ;
URI.datatype ::= string() ;
address.attlist ::= Common.attrib ;
th.attlist ::= Cell.attrib ;
s.attlist ::= Common.attrib ;
samp.attlist ::= Common.attrib ;
td.attlist ::= Cell.attrib ;
p.attlist ::= align.attrib ;
 p.attlist ::= Common.attrib ;
ins.attlist ::= Edit.attrib ;
ContentType.datatype ::= string() ;
kbd.attlist ::= Common.attrib ;
code.attlist ::= Common.attrib ;
link.attrib ::= target.attrib ;
bdo.attlist ::= Core.attrib lang.attrib dir.attrib ;
MediaDesc.datatype ::= string() ;
i.attlist ::= Common.attrib ;
caption.attlist ::= align.attrib ;
 caption.attlist ::= Common.attrib ;
Script.class ::= noscript | script ;
Inline.model ::= (string() | Inline.class)* ;
Edit.class ::= del | ins ;
FPI.datatype ::= string() ;
b.attlist ::= Common.attrib ;
tfoot.attlist ::= Common.attrib CellHAlign.attrib CellVAlign.attrib ;
head.attlist ::= I18n.attrib profile.attlist ;
Color.datatype ::= string() ;
LanguageCode.datatype ::= string() ;
map.attlist ::= CommonIdRequired.attrib ;
 map.attlist ::= name.attlist ;
Charsets.datatype ::= string() ;
title.attlist ::= I18n.attrib ;
Character.datatype ::= string() ;
cite.attlist ::= Common.attrib ;
center.attlist ::= Common.attrib ;
thead.attlist ::= Common.attrib CellHAlign.attrib CellVAlign.attrib ;
font.attlist ::= Core.attrib I18n.attrib Font.attrib ;
sup.attlist ::= Common.attrib ;
noscript.attlist ::= Common.attrib ;
span.attlist ::= Common.attrib ;
IDREF.datatype ::= string() ;
NMTOKENS.datatype ::= string() ;
IDREFS.datatype ::= string() ;
acronym.attlist ::= Common.attrib ;
MultiLength.datatype ::= string() ;
sub.attlist ::= Common.attrib ;
Flow.model ::= (string() | Inline.class | Block.class)* ;
Script.datatype ::= string() ;
strike.attlist ::= Common.attrib ;
abbr.attlist ::= Common.attrib ;
--------------------html::cordy.bgf--------------------
attribute_value ::= stringlit | number | id | url | fileref ;
attribute_id ::= id | x_id ;
text ::= text_unit+ NL ;
attribute ::= SP attribute_id equals_attribute_value? ;
tag_elements ::= element* ;
element ::= singleton_tag | tag | text | comment_tag | tag_beg | tag_end ;
attributes ::= SPOFF attribute* SPON ;
program ::= element* ;
--------------------html::guyard.bgf--------------------
LinkTypes ::= ε ;
TrElement ::= Th ;
 TrElement ::= Td ;
I18n ::= Map ;
NMTOKEN ::= LanguageCode ;
Inline ::= inline ;
PreContent ::= Specialpre ;
Lists ::= Ul ;
 Lists ::= Ol ;
 Lists ::= Dl ;
MediaDesc ::= ε ;
DlElement ::= Dt ;
 DlElement ::= Dd ;
ContentType ::= ε ;
String ::= string() ;
Br ::= ε ;
Block ::= Misc ;
 Block ::= block ;
EMPTY ::= Base ;
 EMPTY ::= Meta ;
 EMPTY ::= Link ;
 EMPTY ::= Hr ;
 EMPTY ::= Br ;
 EMPTY ::= Param ;
 EMPTY ::= Img ;
 EMPTY ::= Area ;
 EMPTY ::= Input ;
 EMPTY ::= Col ;
Charset ::= ε ;
Hr ::= ε ;
Specialpre ::= Span ;
Number ::= ε ;
Miscinline ::= Ins ;
 Miscinline ::= Del ;
CoreAttrs ::= Attrs ;
 CoreAttrs ::= Bdo ;
ScriptExpression ::= ε ;
Fontstyle ::= Tt ;
 Fontstyle ::= I ;
 Fontstyle ::= B ;
 Fontstyle ::= Big ;
 Fontstyle ::= Small ;
Heading ::= H1 ;
 Heading ::= H2 ;
 Heading ::= H3 ;
 Heading ::= H4 ;
 Heading ::= H5 ;
 Heading ::= H6 ;
MultiLength ::= ε ;
Integer ::= integer() ;
ObjectElement ::= Param ;
PCDATA ::= Title ;
 PCDATA ::= Style ;
 PCDATA ::= Script ;
 PCDATA ::= Textarea ;
HeadElement ::= TitleHeadElement ;
 HeadElement ::= BaseHeadElement ;
Datetime ::= ε ;
Blocktext ::= Address ;
 Blocktext ::= Pre ;
 Blocktext ::= Blockquote ;
inline ::= Special ;
 inline ::= Fontstyle ;
 inline ::= Phrase ;
 inline ::= Inlineforms ;
Phrase ::= Em ;
 Phrase ::= Strong ;
 Phrase ::= Dfn ;
 Phrase ::= Code ;
 Phrase ::= Samp ;
 Phrase ::= Kbd ;
 Phrase ::= Var ;
 Phrase ::= Cite ;
 Phrase ::= Abbr ;
 Phrase ::= Acronym ;
 Phrase ::= Q ;
 Phrase ::= Sub ;
 Phrase ::= Sup ;
Special ::= Specialpre ;
Inlineforms ::= Label ;
 Inlineforms ::= Select ;
FieldsetElement ::= Legend ;
Flow ::= Inline ;
StyleSheet ::= ε ;
block ::= Heading ;
 block ::= Lists ;
 block ::= Blocktext ;
 block ::= Fieldset ;
Pixels ::= ε ;
Text ::= ε ;
HeadMisc ::= Meta ;
 HeadMisc ::= Style ;
URI ::= ε ;
Misc ::= Miscinline ;
 Misc ::= Noscript ;
Character ::= ε ;
ValuedElement ::= CDATA ;
 ValuedElement ::= PCDATA ;
 ValuedElement ::= NMTOKEN ;
 ValuedElement ::= IDREF ;
 ValuedElement ::= ID ;
ButtonContent ::= Special ;
 ButtonContent ::= Heading ;
 ButtonContent ::= Lists ;
 ButtonContent ::= Blocktext ;
Length ::= ε ;
LanguageCode ::= ε ;
Attrs ::= Body ;
 Attrs ::= Li ;
 Attrs ::= DlElement ;
 Attrs ::= Caption ;
 Attrs ::= Noscript ;
 Attrs ::= Div ;
 Attrs ::= P ;
 Attrs ::= H1 ;
 Attrs ::= H2 ;
 Attrs ::= H3 ;
 Attrs ::= H4 ;
 Attrs ::= H5 ;
 Attrs ::= H6 ;
 Attrs ::= Ul ;
 Attrs ::= Ol ;
 Attrs ::= Dl ;
 Attrs ::= Address ;
 Attrs ::= Pre ;
 Attrs ::= Blockquote ;
 Attrs ::= Ins ;
 Attrs ::= Del ;
 Attrs ::= A ;
 Attrs ::= Span ;
 Attrs ::= Em ;
 Attrs ::= Strong ;
 Attrs ::= Dfn ;
 Attrs ::= Code ;
 Attrs ::= Samp ;
 Attrs ::= Kbd ;
 Attrs ::= Var ;
 Attrs ::= Cite ;
 Attrs ::= Abbr ;
 Attrs ::= Acronym ;
 Attrs ::= Q ;
 Attrs ::= Sub ;
 Attrs ::= Sup ;
 Attrs ::= Tt ;
 Attrs ::= I ;
 Attrs ::= B ;
 Attrs ::= Big ;
 Attrs ::= Small ;
 Attrs ::= Object ;
 Attrs ::= Form ;
 Attrs ::= Label ;
 Attrs ::= Select ;
 Attrs ::= Fieldset ;
 Attrs ::= Legend ;
 Attrs ::= Button ;
 Attrs ::= Table ;
 Attrs ::= Thead ;
 Attrs ::= Tfoot ;
 Attrs ::= Tbody ;
 Attrs ::= Colgroup ;
 Attrs ::= Tr ;
 Attrs ::= Optgroup ;
SelectElement ::= Optgroup ;
 SelectElement ::= Option ;
--------------------html::clark-strict.bgf--------------------
dfn.attlist ::= Common.attrib ;
html.attlist ::= XHTML.version.attrib I18n.attrib ;
em.attlist ::= Common.attrib ;
fieldset.attlist ::= Common.attrib ;
var.attlist ::= Common.attrib ;
LinkTypes.datatype ::= NMTOKENS.datatype ;
ContentTypes.datatype ::= string() ;
Form.class ::= fieldset ;
 Form.class ::= form ;
Heading.content ::= Inline.model ;
Heading.class ::= h1 | h2 | h3 | h4 | h5 | h6 ;
Block.model ::= Block.mix+ ;
strong.attlist ::= Common.attrib ;
ul.attlist ::= Common.attrib ;
tbody.attlist ::= Common.attrib CellHAlign.attrib CellVAlign.attrib ;
Charset.datatype ::= string() ;
Text.datatype ::= string() ;
Pixels.datatype ::= string() ;
div.attlist ::= Common.attrib ;
dt.attlist ::= Common.attrib ;
del.attlist ::= Edit.attrib ;
Block.mix ::= Block.class ;
hr.attlist ::= Common.attrib ;
dl.attlist ::= Common.attrib ;
small.attlist ::= Common.attrib ;
NMTOKEN.datatype ::= string() ;
ID.datatype ::= string() ;
Datetime.datatype ::= string() ;
Heading.attrib ::= Common.attrib ;
tt.attlist ::= Common.attrib ;
big.attlist ::= Common.attrib ;
dd.attlist ::= Common.attrib ;
tr.attlist ::= Common.attrib CellHAlign.attrib CellVAlign.attrib ;
li.attlist ::= Common.attrib ;
Length.datatype ::= string() ;
URIs.datatype ::= string() ;
Number.datatype ::= string() ;
List.class ::= ul | ol | dl ;
URI.datatype ::= string() ;
address.attlist ::= Common.attrib ;
th.attlist ::= Cell.attrib ;
samp.attlist ::= Common.attrib ;
p.attlist ::= Common.attrib ;
td.attlist ::= Cell.attrib ;
ins.attlist ::= Edit.attrib ;
ContentType.datatype ::= string() ;
kbd.attlist ::= Common.attrib ;
code.attlist ::= Common.attrib ;
link.attrib ::= target.attrib ;
bdo.attlist ::= Core.attrib lang.attrib dir.attrib ;
MediaDesc.datatype ::= string() ;
i.attlist ::= Common.attrib ;
caption.attlist ::= Common.attrib ;
Script.class ::= noscript | script ;
Inline.model ::= (string() | Inline.class)* ;
Edit.class ::= del | ins ;
FPI.datatype ::= string() ;
b.attlist ::= Common.attrib ;
tfoot.attlist ::= Common.attrib CellHAlign.attrib CellVAlign.attrib ;
head.attlist ::= I18n.attrib profile.attlist ;
ol.attlist ::= Common.attrib ;
LanguageCode.datatype ::= string() ;
map.attlist ::= CommonIdRequired.attrib ;
 map.attlist ::= name.attlist ;
Charsets.datatype ::= string() ;
title.attlist ::= I18n.attrib ;
Character.datatype ::= string() ;
cite.attlist ::= Common.attrib ;
thead.attlist ::= Common.attrib CellHAlign.attrib CellVAlign.attrib ;
br.attlist ::= Core.attrib ;
sup.attlist ::= Common.attrib ;
noscript.attlist ::= Common.attrib ;
span.attlist ::= Common.attrib ;
IDREF.datatype ::= string() ;
NMTOKENS.datatype ::= string() ;
IDREFS.datatype ::= string() ;
acronym.attlist ::= Common.attrib ;
MultiLength.datatype ::= string() ;
sub.attlist ::= Common.attrib ;
Flow.model ::= (string() | Inline.class | Block.class)* ;
Script.datatype ::= string() ;
abbr.attlist ::= Common.attrib ;
--------------------javascript::synytskyy-cordy.bgf--------------------
js_property_name ::= id | js_string_literal | number ;
js_expression_statement ::= js_expn ;
js_shift_op_additive_expn ::= js_shift_op js_additive_expn ;
js_additive_op_multiplicative_expn ::= js_additive_op js_multiplicative_expn ;
js_unary_expn ::= js_unary_op* js_postfix_expn ;
js_string_literal ::= stringlit | charlit ;
js_postfix_expn ::= js_lefthand_side_expn js_postfix_op? ;
assign_js_conditional_expn ::= js_assignment_op js_conditional_expn ;
js_variable_description ::= id js_variable_initialization? ;
js_assignment_expn ::= js_conditional_expn assign_js_conditional_expn* ;
js_multiplicative_op_unary_expn ::= js_multiplicative_op js_unary_expn ;
js_case_clause ::= js_case_clause_value NL IN js_subscope EX ;
js_expn ::= js_assignment_expn+ ;
js_logical_or_expn ::= js_logical_and_expn js_logical_or_logical_and_expn* ;
js_array_element ::= js_assignment_expn? ;
js_equality_expn ::= js_relational_expn js_equality_op_relational_expn* ;
js_bitwise_and_expn ::= js_equality_expn js_bitwise_and_equality_expn* ;
js_regular_expn_literal ::= js_regexp ;
js_equality_op_relational_expn ::= js_equality_op js_relational_expn ;
js_bitwise_xor_expn ::= js_bitwise_and_expn js_bitwise_xor_bitwise_and_expn* ;
js_property_set_parameter ::= id ;
js_constant_description ::= id js_variable_initialization ;
js_selector ::= js_arguments | js_subscripts | js_field_selector ;
js_relational_expn ::= js_shift_expn js_relational_op_shift_expn* ;
js_formal_parameter ::= id ;
js_additive_expn ::= js_multiplicative_expn js_additive_op_multiplicative_expn* ;
js_program ::= js_declaration_or_statement* ;
js_relational_op_shift_expn ::= js_relational_op js_shift_expn ;
js_subscope ::= js_declaration_or_statement* ;
js_bitwise_or_expn ::= js_bitwise_xor_expn js_bitwise_or_bitwise_xor_expn* ;
js_numeric_literal ::= number | js_hex_number ;
js_logical_and_expn ::= js_bitwise_or_expn js_logical_and_bitwise_or_expn* ;
js_multiplicative_expn ::= js_unary_expn js_multiplicative_op_unary_expn* ;
js_shift_expn ::= js_additive_expn js_shift_op_additive_expn* ;
program ::= js_program ;
js_conditional_expn ::= js_logical_or_expn js_conditional_clause? ;
js_member_expn ::= js_primary_expn js_selector* ;
--------------------occam::mu-mitchell.bgf--------------------
template-name ::= identifier ;
type-name ::= class-name enum-name typedef-name ;
new-declarator ::= ptr-operator new-declarator? direct-new-declarator ;
type-specifier-seq ::= type-specifier type-specifier-seq? ;
namespace-name ::= original-namespace-name namespace-alias ;
abstract-declarator ::= ptr-operator abstract-declarator? direct-abstract-declarator ;
declaration ::= block-declaration function-definition template-declaration explicit-instantiation explicit-specialization linkage-specification namespace-definition ;
block-declaration ::= simple-declaration asm-definition namespace-alias-definition using-declaration using-directive ;
original-namespace-name ::= identifier ;
function-body ::= compound-statement ;
for-init-statement ::= expression-statement simple-declaration ;
declarator ::= direct-declarator ptr-operator declarator ;
template-argument ::= assignment-expression type-id id-expression ;
statement ::= labeled-statement expression-statement compound-statement selection-statement iteration-statement jump-statement declaration-statement try-block ;
decl-specifier-seq ::= decl-specifier-seq? decl-specifier ;
type-specifier ::= simple-type-specifier class-specifier enum-specifier elaborated-type-specifier cv-qualifier ;
function-definition ::= decl-specifier-seq? declarator ctor-initializer? function-body decl-specifier-seq? declarator function-try-block ;
cv-qualifier-seq ::= cv-qualifier cv-qualifier-seq? ;
constant-expression ::= conditional-expression ;
new-type-id ::= type-specifier-seq new-declarator? ;
translation-unit ::= declaration-seq? ;
namespace-alias ::= identifier ;
handler-seq ::= handler handler-seq? ;
declaration-statement ::= block-declaration ;
named-namespace-definition ::= original-namespace-definition extension-namespace-definition ;
assignment-expression ::= conditional-expression logical-or-expression assignment-operator assignment-expression throw-expression ;
conversion-type-id ::= type-specifier-seq conversion-declarator? ;
enum-name ::= identifier ;
template-parameter ::= type-parameter parameter-declaration ;
class-head ::= class-key identifier? base-clause? class-key nested-name-specifier identifier base-clause? class-key nested-name-specifier? template-id base-clause? ;
namespace-body ::= declaration-seq? ;
class-or-namespace-name ::= class-name namespace-name ;
type-id ::= type-specifier-seq abstract-declarator? ;
init-declarator ::= declarator initializer? ;
typedef-name ::= identifier ;
declaration-seq ::= declaration declaration-seq declaration ;
id-expression ::= unqualified-id qualified-id ;
conversion-declarator ::= ptr-operator conversion-declarator? ;
namespace-definition ::= named-namespace-definition unnamed-namespace-definition ;
enumerator ::= identifier ;
statement-seq ::= statement statement-seq statement ;
class-name ::= identifier template-id ;
--------------------occam::mu-srour.bgf--------------------
Process ::= StopProcess ;
 Process ::= SkipProcess ;
 Process ::= Action ;
 Process ::= Construction ;
 Process ::= Instance ;
 Process ::= Specification ;
Integer ::= integer() ;
StopProcess ::= ε ;
Declaration ::= TypeDeclaration ;
 Declaration ::= IntDeclaration ;
 Declaration ::= ValDeclaration ;
Expression ::= ExpressionOperand ;
 Expression ::= MonadicExpression ;
 Expression ::= DyadicExpression ;
 Expression ::= SimpleExpression ;
Parallel ::= NormalParallel ;
 Parallel ::= ReplicatorParallel ;
 Parallel ::= NormalAlternation ;
 Parallel ::= ReplicatorAlternation ;
Conditional ::= NormalConditional ;
 Conditional ::= ReplicatorConditional ;
Action ::= Assignment ;
 Action ::= Input ;
 Action ::= Output ;
Guard ::= InputGuard ;
 Guard ::= BooleanGuard ;
Specification ::= Declaration ;
 Specification ::= Definition ;
Sequence ::= NormalSequence ;
 Sequence ::= ReplicatorSequence ;
String ::= string() ;
SkipProcess ::= ε ;
--------------------occam::srour.bgf--------------------
Integer ::= integer() ;
String ::= string() ;
--------------------odf::opendoc-1.0-strict.bgf--------------------
table-rows-and-groups ::= (table-table-row-group | table-rows-no-group)+ ;
office-drawing-attlist ::= ε ;
text-toc-mark-start-attrs ::= text-id text-outline-level ;
office-image-attlist ::= ε ;
style-list-level-properties-content ::= style-list-level-properties-content-strict ;
 style-list-level-properties-content ::= style-properties-content ;
style-page-layout-properties-content-strict ::= style-page-layout-properties-attlist style-page-layout-properties-elements ;
distance ::= length ;
vector3D ::= string() ;
any-date ::= number-day | number-month | number-year | number-era | number-day-of-week | number-week-of-year | number-quarter | number-hours | number-am-pm | number-minutes | number-seconds ;
text-list-item-content ::= text-number? (text-p | text-h | text-list)* ;
dateOrDateTime ::= string() ;
text-table-of-content-children ::= text-index-entry-chapter | text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop | text-index-entry-link-start | text-index-entry-link-end ;
style-header-footer-properties-content-strict ::= style-header-footer-properties-attlist style-header-footer-properties-elements ;
length ::= string() ;
style-drawing-page-properties-content-strict ::= style-graphic-fill-properties-attlist style-drawing-page-properties-attlist style-drawing-page-properties-elements ;
form-image-frame-attlist ::= form-control-attlist common-disabled-attlist image-data common-printable-attlist common-readonly-attlist common-title-attlist common-data-field-attlist ;
points ::= string() ;
styles ::= style-style* text-list-style* number-number-style* number-currency-style* number-percentage-style* number-date-style* number-time-style* number-boolean-style* number-text-style* ;
anyURI ::= string() ;
style-ruby-properties-content-strict ::= style-ruby-properties-attlist style-ruby-properties-elements ;
office-spreadsheet-content-main ::= table-table* ;
styleName ::= string() ;
style-list-level-properties-content-strict ::= style-list-level-properties-attlist style-list-level-properties-elements ;
style-table-properties-content ::= style-table-properties-content-strict ;
 style-table-properties-content ::= style-properties-content ;
office-drawing-content-prelude ::= text-decls table-decls ;
table-columns-and-groups ::= (table-table-column-group | table-columns-no-group)+ ;
text-content ::= text-h | text-p | text-list | text-numbered-paragraph | table-table | draw-a | text-section | text-table-of-content | text-illustration-index | text-table-index | text-object-index | text-user-index | text-alphabetical-index | text-bibliography | shape | change-marks ;
form-file-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist ;
office-image-content-prelude ::= ε ;
office-meta-content-strict ::= office-meta-data* ;
relativeLength ::= string() ;
double ::= string() ;
common-field-database-table ::= common-field-database-table-attlist common-field-database-name ;
office-chart-content-main ::= chart-chart ;
time ::= string() ;
style-chart-properties-content ::= style-properties-content ;
style-chart-properties-elements ::= ε ;
form-hidden-attlist ::= form-control-attlist common-value-attlist ;
style-table-row-properties-elements ::= style-background-image ;
nonNegativeInteger ::= integer() ;
style-paragraph-properties-content-strict ::= style-paragraph-properties-attlist style-paragraph-properties-elements ;
text-section-source-dde ::= office-dde-source ;
borderWidths ::= positiveLength positiveLength positiveLength ;
cellRangeAddressList ::= string() ;
style-table-properties-elements ::= style-background-image ;
style-graphic-properties-content-strict ::= style-graphic-properties-attlist style-graphic-fill-properties-attlist style-graphic-properties-elements ;
style-list-level-properties-elements ::= ε ;
presentation-animation-elements ::= presentation-show-shape | presentation-show-text | presentation-hide-shape | presentation-hide-text | presentation-dim | presentation-play ;
date ::= string() ;
anyAttListOrElements ::= string()* anyElements ;
office-image-content-epilogue ::= ε ;
common-numeric-control-attlist ::= form-control-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-convert-empty-attlist common-data-field-attlist ;
style-header-footer-properties-content ::= style-header-footer-properties-content-strict ;
 style-header-footer-properties-content ::= style-properties-content ;
nonNegativeLength ::= string() ;
index-content-main ::= text-content | text-index-title ;
form-radio-attlist ::= form-control-attlist current-selected common-disabled-attlist label common-printable-attlist selected common-tab-attlist common-title-attlist common-value-attlist common-data-field-attlist common-form-visual-effect-attlist common-form-relative-image-position-attlist ;
countryCode ::= string() ;
common-form-control-content ::= form-properties? office-event-listeners? ;
form-grid-attlist ::= form-control-attlist common-disabled-attlist common-printable-attlist common-tab-attlist common-title-attlist ;
shape ::= draw-rect | draw-line | draw-polyline | draw-polygon | draw-regular-polygon | draw-path | draw-circle | draw-ellipse | draw-g | draw-page-thumbnail | draw-frame | draw-measure | draw-caption | draw-connector | draw-control | dr3d-scene | draw-custom-shape ;
textEncoding ::= string() ;
region-content ::= text-p* ;
office-spreadsheet-content-epilogue ::= table-functions ;
dateTime ::= string() ;
office-text-content-epilogue ::= table-functions ;
presentation-decls ::= presentation-decl* ;
style-ruby-properties-content ::= style-ruby-properties-content-strict ;
 style-ruby-properties-content ::= style-properties-content ;
duration ::= string() ;
form-option-attlist ::= current-selected selected label common-value-attlist ;
office-presentation-content-main ::= draw-page* ;
common-table-range-attlist ::= common-table-cell-address-attlist | common-table-cell-range-address-attlist ;
nonNegativePixelLength ::= string() ;
office-chart-content-epilogue ::= table-functions ;
form-text-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist ;
text-note-ref-content ::= text-note-class ;
style-graphic-properties-content ::= style-graphic-properties-content-strict ;
 style-graphic-properties-content ::= style-properties-content ;
office-chart-attlist ::= ε ;
style-drawing-page-properties-elements ::= presentation-sound? ;
office-presentation-attlist ::= ε ;
style-properties-content ::= anyAttListOrElements ;
style-table-column-properties-content-strict ::= style-table-column-properties-attlist style-table-column-properties-elements ;
style-ruby-properties-elements ::= ε ;
cellRangeAddress ::= string() ;
coordinate ::= length ;
IDREF ::= string() ;
config-items ::= (config-config-item | config-config-item-set | config-config-item-map-named | config-config-item-map-indexed)+ ;
style-section-properties-content-strict ::= style-section-properties-attlist style-section-properties-elements ;
style-text-properties-content-strict ::= style-text-properties-attlist style-text-properties-elements ;
form-column-attlist ::= common-form-control-attlist label text-style-name ;
office-image-content-main ::= draw-frame ;
pathData ::= string() ;
form-item-attlist ::= label ;
office-text-content-prelude ::= office-forms text-tracked-changes text-decls table-decls ;
style-table-row-properties-content-strict ::= style-table-row-properties-attlist style-table-row-properties-elements ;
common-draw-shape-with-styles-attlist ::= common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-draw-transform-attlist common-draw-name-attlist common-text-spreadsheet-shape-attlist ;
number-and-text ::= number-number number-text? ;
formula ::= string() ;
languageCode ::= string() ;
common-field-num-format-attlist ::= common-num-format-attlist? ;
color ::= string() ;
style-section-properties-content ::= style-section-properties-content-strict ;
 style-section-properties-content ::= style-properties-content ;
style-text-properties-content ::= style-text-properties-content-strict ;
 style-text-properties-content ::= style-properties-content ;
common-timing-attlist ::= common-basic-timing-attlist common-restart-timing-attlist common-restart-default-attlist common-fill-timing-attlist common-fill-default-attlist common-time-manip-attlist ;
common-basic-timing-attlist ::= common-begin-end-timing-attlist common-dur-timing-attlist common-repeat-timing-attlist ;
table-functions ::= table-named-expressions? table-database-ranges? table-data-pilot-tables? table-consolidation? table-dde-links? ;
style-table-column-properties-content ::= style-table-column-properties-content-strict ;
 style-table-column-properties-content ::= style-properties-content ;
office-chart-content-prelude ::= text-decls table-decls ;
language ::= string() ;
text-list-level-style-image-attr ::= common-draw-data-attlist | office-binary-data ;
office-presentation-content-prelude ::= text-decls table-decls presentation-decls ;
style-paragraph-properties-elements ::= style-tab-stops ;
 style-paragraph-properties-elements ::= style-drop-cap ;
 style-paragraph-properties-elements ::= style-background-image ;
style-table-column-properties-elements ::= ε ;
mathMarkup ::= (α | string() | mathMarkup)* ;
form-generic-control-attlist ::= form-control-attlist ;
style-text-properties-elements ::= ε ;
office-drawing-content-main ::= draw-page* ;
office-presentation-content-epilogue ::= presentation-settings table-functions ;
timeOrDateTime ::= string() ;
any-number ::= number-number | number-scientific-number | number-fraction ;
table-decls ::= table-calculation-settings? table-content-validations? table-label-ranges? ;
style-table-cell-properties-content-strict ::= style-table-cell-properties-attlist style-table-cell-properties-elements ;
form-control-attlist ::= common-form-control-attlist common-control-id-attlist xforms-bind-attlist ;
percent ::= string() ;
style-header-footer-properties-elements ::= style-background-image ;
style-page-layout-properties-content ::= style-page-layout-properties-content-strict ;
 style-page-layout-properties-content ::= style-properties-content ;
positiveLength ::= string() ;
integer ::= integer() ;
styleNameRefs ::= string()* ;
currency-symbol-and-text ::= number-currency-symbol number-text? ;
style-paragraph-properties-content ::= style-paragraph-properties-content-strict ;
 style-paragraph-properties-content ::= style-properties-content ;
cellAddress ::= string() ;
base64Binary ::= string() ;
style-table-row-properties-content ::= style-table-row-properties-content-strict ;
 style-table-row-properties-content ::= style-properties-content ;
style-chart-properties-content-strict ::= style-chart-properties-attlist style-chart-properties-elements ;
character ::= string() ;
variableName ::= string() ;
office-meta-content ::= office-meta-content-strict ;
 office-meta-content ::= anyElements ;
style-table-cell-properties-elements ::= style-background-image ;
style-table-properties-content-strict ::= style-table-properties-attlist style-table-properties-elements ;
ID ::= string() ;
common-draw-shape-with-text-and-styles-attlist ::= common-draw-shape-with-styles-attlist common-draw-text-style-name-attlist ;
draw-text ::= (text-p | text-list)* ;
form-frame-attlist ::= form-control-attlist common-disabled-attlist for label common-printable-attlist common-title-attlist ;
form-textarea-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist ;
text-get-page-variable-attlist ::= common-field-num-format-attlist ;
style-drawing-page-properties-content ::= style-drawing-page-properties-content-strict ;
 style-drawing-page-properties-content ::= style-properties-content ;
string ::= string() ;
namespacedToken ::= string() ;
style-page-layout-properties-elements ::= style-background-image ;
 style-page-layout-properties-elements ::= style-columns ;
 style-page-layout-properties-elements ::= style-footnote-sep ;
style-table-cell-properties-content ::= style-table-cell-properties-content-strict ;
 style-table-cell-properties-content ::= style-properties-content ;
any-time ::= number-hours | number-am-pm | number-minutes | number-seconds ;
table-table-cell-content ::= table-cell-range-source? office-annotation? table-detective? text-content* ;
office-drawing-content-epilogue ::= table-functions ;
office-spreadsheet-content-prelude ::= table-tracked-changes? text-decls table-decls ;
text-illustration-index-entry-content ::= text-illustration-index-entry-template-attrs (text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop)* ;
positiveInteger ::= integer() ;
form-image-attlist ::= form-control-attlist button-type common-disabled-attlist image-data common-printable-attlist common-tab-attlist target-frame target-location common-title-attlist common-value-attlist ;
anyElements ::= (string()? anyAttListOrElements string()?)* ;
shapes3d ::= dr3d-scene | dr3d-extrude | dr3d-sphere | dr3d-rotate | dr3d-cube ;
point3D ::= string() ;
--------------------odf::opendoc-1.0.bgf--------------------
table-rows-and-groups ::= (table-table-row-group | table-rows-no-group)+ ;
office-drawing-attlist ::= ε ;
text-toc-mark-start-attrs ::= text-id text-outline-level ;
office-image-attlist ::= ε ;
style-list-level-properties-content ::= style-properties-content ;
style-page-layout-properties-content-strict ::= style-page-layout-properties-attlist style-page-layout-properties-elements ;
distance ::= length ;
vector3D ::= string() ;
any-date ::= number-day | number-month | number-year | number-era | number-day-of-week | number-week-of-year | number-quarter | number-hours | number-am-pm | number-minutes | number-seconds ;
text-list-item-content ::= text-number? (text-p | text-h | text-list)* ;
dateOrDateTime ::= string() ;
text-table-of-content-children ::= text-index-entry-chapter | text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop | text-index-entry-link-start | text-index-entry-link-end ;
style-header-footer-properties-content-strict ::= style-header-footer-properties-attlist style-header-footer-properties-elements ;
length ::= string() ;
style-drawing-page-properties-content-strict ::= style-graphic-fill-properties-attlist style-drawing-page-properties-attlist style-drawing-page-properties-elements ;
form-image-frame-attlist ::= form-control-attlist common-disabled-attlist image-data common-printable-attlist common-readonly-attlist common-title-attlist common-data-field-attlist ;
points ::= string() ;
styles ::= style-style* text-list-style* number-number-style* number-currency-style* number-percentage-style* number-date-style* number-time-style* number-boolean-style* number-text-style* ;
anyURI ::= string() ;
style-ruby-properties-content-strict ::= style-ruby-properties-attlist style-ruby-properties-elements ;
office-spreadsheet-content-main ::= table-table* ;
styleName ::= string() ;
style-list-level-properties-content-strict ::= style-list-level-properties-attlist style-list-level-properties-elements ;
style-table-properties-content ::= style-properties-content ;
office-drawing-content-prelude ::= text-decls table-decls ;
table-columns-and-groups ::= (table-table-column-group | table-columns-no-group)+ ;
text-content ::= text-h | text-p | text-list | text-numbered-paragraph | table-table | draw-a | text-section | text-table-of-content | text-illustration-index | text-table-index | text-object-index | text-user-index | text-alphabetical-index | text-bibliography | shape | change-marks ;
form-file-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist ;
office-image-content-prelude ::= ε ;
office-meta-content-strict ::= office-meta-data* ;
relativeLength ::= string() ;
double ::= string() ;
common-field-database-table ::= common-field-database-table-attlist common-field-database-name ;
office-chart-content-main ::= chart-chart ;
time ::= string() ;
style-chart-properties-content ::= style-properties-content ;
style-chart-properties-elements ::= ε ;
form-hidden-attlist ::= form-control-attlist common-value-attlist ;
style-table-row-properties-elements ::= style-background-image ;
nonNegativeInteger ::= integer() ;
style-paragraph-properties-content-strict ::= style-paragraph-properties-attlist style-paragraph-properties-elements ;
text-section-source-dde ::= office-dde-source ;
borderWidths ::= positiveLength positiveLength positiveLength ;
cellRangeAddressList ::= string() ;
style-table-properties-elements ::= style-background-image ;
style-graphic-properties-content-strict ::= style-graphic-properties-attlist style-graphic-fill-properties-attlist style-graphic-properties-elements ;
style-list-level-properties-elements ::= ε ;
presentation-animation-elements ::= presentation-show-shape | presentation-show-text | presentation-hide-shape | presentation-hide-text | presentation-dim | presentation-play ;
date ::= string() ;
anyAttListOrElements ::= string()* anyElements ;
style-header-footer-properties-content ::= style-properties-content ;
common-numeric-control-attlist ::= form-control-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-convert-empty-attlist common-data-field-attlist ;
office-image-content-epilogue ::= ε ;
nonNegativeLength ::= string() ;
index-content-main ::= text-content | text-index-title ;
form-radio-attlist ::= form-control-attlist current-selected common-disabled-attlist label common-printable-attlist selected common-tab-attlist common-title-attlist common-value-attlist common-data-field-attlist common-form-visual-effect-attlist common-form-relative-image-position-attlist ;
countryCode ::= string() ;
common-form-control-content ::= form-properties? office-event-listeners? ;
form-grid-attlist ::= form-control-attlist common-disabled-attlist common-printable-attlist common-tab-attlist common-title-attlist ;
shape ::= draw-rect | draw-line | draw-polyline | draw-polygon | draw-regular-polygon | draw-path | draw-circle | draw-ellipse | draw-g | draw-page-thumbnail | draw-frame | draw-measure | draw-caption | draw-connector | draw-control | dr3d-scene | draw-custom-shape ;
textEncoding ::= string() ;
region-content ::= text-p* ;
office-spreadsheet-content-epilogue ::= table-functions ;
dateTime ::= string() ;
office-text-content-epilogue ::= table-functions ;
presentation-decls ::= presentation-decl* ;
style-ruby-properties-content ::= style-properties-content ;
duration ::= string() ;
form-option-attlist ::= current-selected selected label common-value-attlist ;
office-presentation-content-main ::= draw-page* ;
common-table-range-attlist ::= common-table-cell-address-attlist | common-table-cell-range-address-attlist ;
nonNegativePixelLength ::= string() ;
office-chart-content-epilogue ::= table-functions ;
form-text-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist ;
text-note-ref-content ::= text-note-class ;
style-graphic-properties-content ::= style-properties-content ;
office-chart-attlist ::= ε ;
style-drawing-page-properties-elements ::= presentation-sound? ;
office-presentation-attlist ::= ε ;
style-table-column-properties-content-strict ::= style-table-column-properties-attlist style-table-column-properties-elements ;
style-properties-content ::= anyAttListOrElements ;
style-ruby-properties-elements ::= ε ;
cellRangeAddress ::= string() ;
coordinate ::= length ;
IDREF ::= string() ;
config-items ::= (config-config-item | config-config-item-set | config-config-item-map-named | config-config-item-map-indexed)+ ;
style-section-properties-content-strict ::= style-section-properties-attlist style-section-properties-elements ;
style-text-properties-content-strict ::= style-text-properties-attlist style-text-properties-elements ;
form-column-attlist ::= common-form-control-attlist label text-style-name ;
office-image-content-main ::= draw-frame ;
pathData ::= string() ;
form-item-attlist ::= label ;
office-text-content-prelude ::= office-forms text-tracked-changes text-decls table-decls ;
style-table-row-properties-content-strict ::= style-table-row-properties-attlist style-table-row-properties-elements ;
common-draw-shape-with-styles-attlist ::= common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-draw-transform-attlist common-draw-name-attlist common-text-spreadsheet-shape-attlist ;
number-and-text ::= number-number number-text? ;
formula ::= string() ;
languageCode ::= string() ;
common-field-num-format-attlist ::= common-num-format-attlist? ;
color ::= string() ;
style-section-properties-content ::= style-properties-content ;
style-text-properties-content ::= style-properties-content ;
common-timing-attlist ::= common-basic-timing-attlist common-restart-timing-attlist common-restart-default-attlist common-fill-timing-attlist common-fill-default-attlist common-time-manip-attlist ;
common-basic-timing-attlist ::= common-begin-end-timing-attlist common-dur-timing-attlist common-repeat-timing-attlist ;
table-functions ::= table-named-expressions? table-database-ranges? table-data-pilot-tables? table-consolidation? table-dde-links? ;
style-table-column-properties-content ::= style-properties-content ;
office-chart-content-prelude ::= text-decls table-decls ;
language ::= string() ;
text-list-level-style-image-attr ::= common-draw-data-attlist | office-binary-data ;
office-presentation-content-prelude ::= text-decls table-decls presentation-decls ;
style-paragraph-properties-elements ::= style-tab-stops ;
 style-paragraph-properties-elements ::= style-drop-cap ;
 style-paragraph-properties-elements ::= style-background-image ;
style-table-column-properties-elements ::= ε ;
mathMarkup ::= (α | string() | mathMarkup)* ;
form-generic-control-attlist ::= form-control-attlist ;
style-text-properties-elements ::= ε ;
office-drawing-content-main ::= draw-page* ;
office-presentation-content-epilogue ::= presentation-settings table-functions ;
timeOrDateTime ::= string() ;
any-number ::= number-number | number-scientific-number | number-fraction ;
table-decls ::= table-calculation-settings? table-content-validations? table-label-ranges? ;
style-table-cell-properties-content-strict ::= style-table-cell-properties-attlist style-table-cell-properties-elements ;
form-control-attlist ::= common-form-control-attlist common-control-id-attlist xforms-bind-attlist ;
percent ::= string() ;
style-header-footer-properties-elements ::= style-background-image ;
style-page-layout-properties-content ::= style-properties-content ;
positiveLength ::= string() ;
integer ::= integer() ;
styleNameRefs ::= string()* ;
currency-symbol-and-text ::= number-currency-symbol number-text? ;
style-paragraph-properties-content ::= style-properties-content ;
cellAddress ::= string() ;
base64Binary ::= string() ;
style-table-row-properties-content ::= style-properties-content ;
style-chart-properties-content-strict ::= style-chart-properties-attlist style-chart-properties-elements ;
character ::= string() ;
variableName ::= string() ;
office-meta-content ::= anyElements ;
style-table-cell-properties-elements ::= style-background-image ;
style-table-properties-content-strict ::= style-table-properties-attlist style-table-properties-elements ;
ID ::= string() ;
common-draw-shape-with-text-and-styles-attlist ::= common-draw-shape-with-styles-attlist common-draw-text-style-name-attlist ;
draw-text ::= (text-p | text-list)* ;
form-frame-attlist ::= form-control-attlist common-disabled-attlist for label common-printable-attlist common-title-attlist ;
form-textarea-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist ;
text-get-page-variable-attlist ::= common-field-num-format-attlist ;
style-drawing-page-properties-content ::= style-properties-content ;
string ::= string() ;
namespacedToken ::= string() ;
style-page-layout-properties-elements ::= style-background-image ;
 style-page-layout-properties-elements ::= style-columns ;
 style-page-layout-properties-elements ::= style-footnote-sep ;
style-table-cell-properties-content ::= style-properties-content ;
any-time ::= number-hours | number-am-pm | number-minutes | number-seconds ;
table-table-cell-content ::= table-cell-range-source? office-annotation? table-detective? text-content* ;
office-drawing-content-epilogue ::= table-functions ;
office-spreadsheet-content-prelude ::= table-tracked-changes? text-decls table-decls ;
text-illustration-index-entry-content ::= text-illustration-index-entry-template-attrs (text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop)* ;
positiveInteger ::= integer() ;
form-image-attlist ::= form-control-attlist button-type common-disabled-attlist image-data common-printable-attlist common-tab-attlist target-frame target-location common-title-attlist common-value-attlist ;
anyElements ::= (string()? anyAttListOrElements string()?)* ;
shapes3d ::= dr3d-scene | dr3d-extrude | dr3d-sphere | dr3d-rotate | dr3d-cube ;
point3D ::= string() ;
--------------------odf::opendoc-1.1-strict.bgf--------------------
table-rows-and-groups ::= (table-table-row-group | table-rows-no-group)+ ;
office-drawing-attlist ::= ε ;
text-toc-mark-start-attrs ::= text-id text-outline-level ;
office-image-attlist ::= ε ;
style-list-level-properties-content ::= style-list-level-properties-content-strict ;
 style-list-level-properties-content ::= style-properties-content ;
style-page-layout-properties-content-strict ::= style-page-layout-properties-attlist style-page-layout-properties-elements ;
distance ::= length ;
vector3D ::= string() ;
any-date ::= number-day | number-month | number-year | number-era | number-day-of-week | number-week-of-year | number-quarter | number-hours | number-am-pm | number-minutes | number-seconds ;
text-list-item-content ::= text-number? (text-p | text-h | text-list | text-soft-page-break)* ;
dateOrDateTime ::= string() ;
text-table-of-content-children ::= text-index-entry-chapter | text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop | text-index-entry-link-start | text-index-entry-link-end ;
style-header-footer-properties-content-strict ::= style-header-footer-properties-attlist style-header-footer-properties-elements ;
length ::= string() ;
style-drawing-page-properties-content-strict ::= style-graphic-fill-properties-attlist style-drawing-page-properties-attlist style-drawing-page-properties-elements ;
form-image-frame-attlist ::= form-control-attlist common-disabled-attlist image-data common-printable-attlist common-readonly-attlist common-title-attlist common-data-field-attlist ;
points ::= string() ;
styles ::= style-style* text-list-style* number-number-style* number-currency-style* number-percentage-style* number-date-style* number-time-style* number-boolean-style* number-text-style* ;
anyURI ::= string() ;
style-ruby-properties-content-strict ::= style-ruby-properties-attlist style-ruby-properties-elements ;
office-spreadsheet-content-main ::= table-table* ;
styleName ::= string() ;
IDREFS ::= string() ;
style-list-level-properties-content-strict ::= style-list-level-properties-attlist style-list-level-properties-elements ;
style-table-properties-content ::= style-table-properties-content-strict ;
 style-table-properties-content ::= style-properties-content ;
office-drawing-content-prelude ::= text-decls table-decls ;
table-columns-and-groups ::= (table-table-column-group | table-columns-no-group)+ ;
text-content ::= text-h | text-p | text-list | text-numbered-paragraph | table-table | draw-a | text-section | text-soft-page-break | text-table-of-content | text-illustration-index | text-table-index | text-object-index | text-user-index | text-alphabetical-index | text-bibliography | shape | change-marks ;
form-file-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist ;
office-image-content-prelude ::= ε ;
office-meta-content-strict ::= office-meta-data* ;
relativeLength ::= string() ;
double ::= string() ;
common-field-database-table ::= common-field-database-table-attlist common-field-database-name ;
office-chart-content-main ::= chart-chart ;
time ::= string() ;
style-chart-properties-content ::= style-chart-properties-content-strict ;
 style-chart-properties-content ::= style-properties-content ;
style-chart-properties-elements ::= ε ;
form-hidden-attlist ::= form-control-attlist common-value-attlist ;
style-table-row-properties-elements ::= style-background-image ;
nonNegativeInteger ::= integer() ;
style-paragraph-properties-content-strict ::= style-paragraph-properties-attlist style-paragraph-properties-elements ;
text-section-source-dde ::= office-dde-source ;
borderWidths ::= positiveLength positiveLength positiveLength ;
cellRangeAddressList ::= string() ;
style-table-properties-elements ::= style-background-image ;
style-graphic-properties-content-strict ::= style-graphic-properties-attlist style-graphic-fill-properties-attlist style-graphic-properties-elements ;
style-list-level-properties-elements ::= ε ;
presentation-animation-elements ::= presentation-show-shape | presentation-show-text | presentation-hide-shape | presentation-hide-text | presentation-dim | presentation-play ;
date ::= string() ;
anyAttListOrElements ::= string()* anyElements ;
office-image-content-epilogue ::= ε ;
common-numeric-control-attlist ::= form-control-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-convert-empty-attlist common-data-field-attlist ;
style-header-footer-properties-content ::= style-header-footer-properties-content-strict ;
 style-header-footer-properties-content ::= style-properties-content ;
nonNegativeLength ::= string() ;
index-content-main ::= text-content | text-index-title ;
form-radio-attlist ::= form-control-attlist current-selected common-disabled-attlist label common-printable-attlist selected common-tab-attlist common-title-attlist common-value-attlist common-data-field-attlist common-form-visual-effect-attlist common-form-relative-image-position-attlist ;
countryCode ::= string() ;
common-form-control-content ::= form-properties? office-event-listeners? ;
form-grid-attlist ::= form-control-attlist common-disabled-attlist common-printable-attlist common-tab-attlist common-title-attlist ;
shape ::= draw-rect | draw-line | draw-polyline | draw-polygon | draw-regular-polygon | draw-path | draw-circle | draw-ellipse | draw-g | draw-page-thumbnail | draw-frame | draw-measure | draw-caption | draw-connector | draw-control | dr3d-scene | draw-custom-shape ;
textEncoding ::= string() ;
region-content ::= text-p* ;
office-spreadsheet-content-epilogue ::= table-functions ;
dateTime ::= string() ;
office-text-content-epilogue ::= table-functions ;
presentation-decls ::= presentation-decl* ;
style-ruby-properties-content ::= style-ruby-properties-content-strict ;
 style-ruby-properties-content ::= style-properties-content ;
duration ::= string() ;
form-option-attlist ::= current-selected selected label common-value-attlist ;
office-presentation-content-main ::= draw-page* ;
common-table-range-attlist ::= common-table-cell-address-attlist | common-table-cell-range-address-attlist ;
nonNegativePixelLength ::= string() ;
office-chart-content-epilogue ::= table-functions ;
form-text-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist ;
text-note-ref-content ::= text-note-class ;
style-graphic-properties-content ::= style-graphic-properties-content-strict ;
 style-graphic-properties-content ::= style-properties-content ;
office-chart-attlist ::= ε ;
style-drawing-page-properties-elements ::= presentation-sound? ;
office-presentation-attlist ::= ε ;
style-properties-content ::= anyAttListOrElements ;
style-table-column-properties-content-strict ::= style-table-column-properties-attlist style-table-column-properties-elements ;
style-ruby-properties-elements ::= ε ;
cellRangeAddress ::= string() ;
coordinate ::= length ;
IDREF ::= string() ;
config-items ::= (config-config-item | config-config-item-set | config-config-item-map-named | config-config-item-map-indexed)+ ;
style-section-properties-content-strict ::= style-section-properties-attlist style-section-properties-elements ;
style-text-properties-content-strict ::= style-text-properties-attlist style-text-properties-elements ;
form-column-attlist ::= common-form-control-attlist label text-style-name ;
office-image-content-main ::= draw-frame ;
pathData ::= string() ;
form-item-attlist ::= label ;
office-text-content-prelude ::= office-forms text-tracked-changes text-decls table-decls ;
style-table-row-properties-content-strict ::= style-table-row-properties-attlist style-table-row-properties-elements ;
common-draw-shape-with-styles-attlist ::= common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-draw-transform-attlist common-draw-name-attlist common-text-spreadsheet-shape-attlist ;
number-and-text ::= number-number number-text? ;
formula ::= string() ;
languageCode ::= string() ;
common-field-num-format-attlist ::= common-num-format-attlist? ;
color ::= string() ;
style-section-properties-content ::= style-section-properties-content-strict ;
 style-section-properties-content ::= style-properties-content ;
style-text-properties-content ::= style-text-properties-content-strict ;
 style-text-properties-content ::= style-properties-content ;
common-timing-attlist ::= common-basic-timing-attlist common-restart-timing-attlist common-restart-default-attlist common-fill-timing-attlist common-fill-default-attlist common-time-manip-attlist ;
common-basic-timing-attlist ::= common-begin-end-timing-attlist common-dur-timing-attlist common-repeat-timing-attlist ;
table-functions ::= table-named-expressions? table-database-ranges? table-data-pilot-tables? table-consolidation? table-dde-links? ;
style-table-column-properties-content ::= style-table-column-properties-content-strict ;
 style-table-column-properties-content ::= style-properties-content ;
office-chart-content-prelude ::= text-decls table-decls ;
language ::= string() ;
text-list-level-style-image-attr ::= common-draw-data-attlist | office-binary-data ;
office-presentation-content-prelude ::= text-decls table-decls presentation-decls ;
style-paragraph-properties-elements ::= style-tab-stops ;
 style-paragraph-properties-elements ::= style-drop-cap ;
 style-paragraph-properties-elements ::= style-background-image ;
style-table-column-properties-elements ::= ε ;
mathMarkup ::= (α | string() | mathMarkup)* ;
form-generic-control-attlist ::= form-control-attlist ;
style-text-properties-elements ::= ε ;
office-drawing-content-main ::= draw-page* ;
office-presentation-content-epilogue ::= presentation-settings table-functions ;
timeOrDateTime ::= string() ;
any-number ::= number-number | number-scientific-number | number-fraction ;
table-decls ::= table-calculation-settings? table-content-validations? table-label-ranges? ;
style-table-cell-properties-content-strict ::= style-table-cell-properties-attlist style-table-cell-properties-elements ;
form-control-attlist ::= common-form-control-attlist common-control-id-attlist xforms-bind-attlist ;
percent ::= string() ;
style-header-footer-properties-elements ::= style-background-image ;
style-page-layout-properties-content ::= style-page-layout-properties-content-strict ;
 style-page-layout-properties-content ::= style-properties-content ;
positiveLength ::= string() ;
integer ::= integer() ;
styleNameRefs ::= string()* ;
currency-symbol-and-text ::= number-currency-symbol number-text? ;
style-paragraph-properties-content ::= style-paragraph-properties-content-strict ;
 style-paragraph-properties-content ::= style-properties-content ;
cellAddress ::= string() ;
base64Binary ::= string() ;
style-table-row-properties-content ::= style-table-row-properties-content-strict ;
 style-table-row-properties-content ::= style-properties-content ;
style-chart-properties-content-strict ::= style-chart-properties-attlist style-chart-properties-elements ;
character ::= string() ;
variableName ::= string() ;
office-meta-content ::= office-meta-content-strict ;
 office-meta-content ::= anyElements ;
style-table-cell-properties-elements ::= style-background-image ;
style-table-properties-content-strict ::= style-table-properties-attlist style-table-properties-elements ;
ID ::= string() ;
common-draw-shape-with-text-and-styles-attlist ::= common-draw-shape-with-styles-attlist common-draw-text-style-name-attlist ;
draw-text ::= (text-p | text-list)* ;
form-frame-attlist ::= form-control-attlist common-disabled-attlist for label common-printable-attlist common-title-attlist ;
form-textarea-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist ;
text-get-page-variable-attlist ::= common-field-num-format-attlist ;
style-drawing-page-properties-content ::= style-drawing-page-properties-content-strict ;
 style-drawing-page-properties-content ::= style-properties-content ;
string ::= string() ;
namespacedToken ::= string() ;
style-page-layout-properties-elements ::= style-background-image ;
 style-page-layout-properties-elements ::= style-columns ;
 style-page-layout-properties-elements ::= style-footnote-sep ;
style-table-cell-properties-content ::= style-table-cell-properties-content-strict ;
 style-table-cell-properties-content ::= style-properties-content ;
any-time ::= number-hours | number-am-pm | number-minutes | number-seconds ;
table-table-cell-content ::= table-cell-range-source? office-annotation? table-detective? text-content* ;
office-drawing-content-epilogue ::= table-functions ;
office-spreadsheet-content-prelude ::= table-tracked-changes? text-decls table-decls ;
text-illustration-index-entry-content ::= text-illustration-index-entry-template-attrs (text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop)* ;
positiveInteger ::= integer() ;
form-image-attlist ::= form-control-attlist button-type common-disabled-attlist image-data common-printable-attlist common-tab-attlist target-frame target-location common-title-attlist common-value-attlist ;
anyElements ::= (string()? anyAttListOrElements string()?)* ;
shapes3d ::= dr3d-scene | dr3d-extrude | dr3d-sphere | dr3d-rotate | dr3d-cube ;
point3D ::= string() ;
--------------------odf::opendoc-1.1.bgf--------------------
table-rows-and-groups ::= (table-table-row-group | table-rows-no-group)+ ;
office-drawing-attlist ::= ε ;
text-toc-mark-start-attrs ::= text-id text-outline-level ;
office-image-attlist ::= ε ;
style-list-level-properties-content ::= style-properties-content ;
style-page-layout-properties-content-strict ::= style-page-layout-properties-attlist style-page-layout-properties-elements ;
distance ::= length ;
vector3D ::= string() ;
any-date ::= number-day | number-month | number-year | number-era | number-day-of-week | number-week-of-year | number-quarter | number-hours | number-am-pm | number-minutes | number-seconds ;
text-list-item-content ::= text-number? (text-p | text-h | text-list | text-soft-page-break)* ;
dateOrDateTime ::= string() ;
text-table-of-content-children ::= text-index-entry-chapter | text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop | text-index-entry-link-start | text-index-entry-link-end ;
style-header-footer-properties-content-strict ::= style-header-footer-properties-attlist style-header-footer-properties-elements ;
length ::= string() ;
style-drawing-page-properties-content-strict ::= style-graphic-fill-properties-attlist style-drawing-page-properties-attlist style-drawing-page-properties-elements ;
form-image-frame-attlist ::= form-control-attlist common-disabled-attlist image-data common-printable-attlist common-readonly-attlist common-title-attlist common-data-field-attlist ;
points ::= string() ;
styles ::= style-style* text-list-style* number-number-style* number-currency-style* number-percentage-style* number-date-style* number-time-style* number-boolean-style* number-text-style* ;
anyURI ::= string() ;
style-ruby-properties-content-strict ::= style-ruby-properties-attlist style-ruby-properties-elements ;
office-spreadsheet-content-main ::= table-table* ;
styleName ::= string() ;
IDREFS ::= string() ;
style-list-level-properties-content-strict ::= style-list-level-properties-attlist style-list-level-properties-elements ;
style-table-properties-content ::= style-properties-content ;
office-drawing-content-prelude ::= text-decls table-decls ;
table-columns-and-groups ::= (table-table-column-group | table-columns-no-group)+ ;
text-content ::= text-h | text-p | text-list | text-numbered-paragraph | table-table | draw-a | text-section | text-soft-page-break | text-table-of-content | text-illustration-index | text-table-index | text-object-index | text-user-index | text-alphabetical-index | text-bibliography | shape | change-marks ;
form-file-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist ;
office-image-content-prelude ::= ε ;
office-meta-content-strict ::= office-meta-data* ;
relativeLength ::= string() ;
double ::= string() ;
common-field-database-table ::= common-field-database-table-attlist common-field-database-name ;
office-chart-content-main ::= chart-chart ;
time ::= string() ;
style-chart-properties-content ::= style-properties-content ;
style-chart-properties-elements ::= ε ;
form-hidden-attlist ::= form-control-attlist common-value-attlist ;
style-table-row-properties-elements ::= style-background-image ;
nonNegativeInteger ::= integer() ;
style-paragraph-properties-content-strict ::= style-paragraph-properties-attlist style-paragraph-properties-elements ;
text-section-source-dde ::= office-dde-source ;
borderWidths ::= positiveLength positiveLength positiveLength ;
cellRangeAddressList ::= string() ;
style-table-properties-elements ::= style-background-image ;
style-graphic-properties-content-strict ::= style-graphic-properties-attlist style-graphic-fill-properties-attlist style-graphic-properties-elements ;
style-list-level-properties-elements ::= ε ;
presentation-animation-elements ::= presentation-show-shape | presentation-show-text | presentation-hide-shape | presentation-hide-text | presentation-dim | presentation-play ;
date ::= string() ;
anyAttListOrElements ::= string()* anyElements ;
style-header-footer-properties-content ::= style-properties-content ;
common-numeric-control-attlist ::= form-control-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-convert-empty-attlist common-data-field-attlist ;
office-image-content-epilogue ::= ε ;
nonNegativeLength ::= string() ;
index-content-main ::= text-content | text-index-title ;
form-radio-attlist ::= form-control-attlist current-selected common-disabled-attlist label common-printable-attlist selected common-tab-attlist common-title-attlist common-value-attlist common-data-field-attlist common-form-visual-effect-attlist common-form-relative-image-position-attlist ;
countryCode ::= string() ;
common-form-control-content ::= form-properties? office-event-listeners? ;
form-grid-attlist ::= form-control-attlist common-disabled-attlist common-printable-attlist common-tab-attlist common-title-attlist ;
shape ::= draw-rect | draw-line | draw-polyline | draw-polygon | draw-regular-polygon | draw-path | draw-circle | draw-ellipse | draw-g | draw-page-thumbnail | draw-frame | draw-measure | draw-caption | draw-connector | draw-control | dr3d-scene | draw-custom-shape ;
textEncoding ::= string() ;
region-content ::= text-p* ;
office-spreadsheet-content-epilogue ::= table-functions ;
dateTime ::= string() ;
office-text-content-epilogue ::= table-functions ;
presentation-decls ::= presentation-decl* ;
style-ruby-properties-content ::= style-properties-content ;
duration ::= string() ;
form-option-attlist ::= current-selected selected label common-value-attlist ;
office-presentation-content-main ::= draw-page* ;
common-table-range-attlist ::= common-table-cell-address-attlist | common-table-cell-range-address-attlist ;
nonNegativePixelLength ::= string() ;
office-chart-content-epilogue ::= table-functions ;
form-text-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist ;
text-note-ref-content ::= text-note-class ;
style-graphic-properties-content ::= style-properties-content ;
office-chart-attlist ::= ε ;
style-drawing-page-properties-elements ::= presentation-sound? ;
office-presentation-attlist ::= ε ;
style-table-column-properties-content-strict ::= style-table-column-properties-attlist style-table-column-properties-elements ;
style-properties-content ::= anyAttListOrElements ;
style-ruby-properties-elements ::= ε ;
cellRangeAddress ::= string() ;
coordinate ::= length ;
IDREF ::= string() ;
config-items ::= (config-config-item | config-config-item-set | config-config-item-map-named | config-config-item-map-indexed)+ ;
style-section-properties-content-strict ::= style-section-properties-attlist style-section-properties-elements ;
style-text-properties-content-strict ::= style-text-properties-attlist style-text-properties-elements ;
form-column-attlist ::= common-form-control-attlist label text-style-name ;
office-image-content-main ::= draw-frame ;
pathData ::= string() ;
form-item-attlist ::= label ;
office-text-content-prelude ::= office-forms text-tracked-changes text-decls table-decls ;
style-table-row-properties-content-strict ::= style-table-row-properties-attlist style-table-row-properties-elements ;
common-draw-shape-with-styles-attlist ::= common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-draw-transform-attlist common-draw-name-attlist common-text-spreadsheet-shape-attlist ;
number-and-text ::= number-number number-text? ;
formula ::= string() ;
languageCode ::= string() ;
common-field-num-format-attlist ::= common-num-format-attlist? ;
color ::= string() ;
style-section-properties-content ::= style-properties-content ;
style-text-properties-content ::= style-properties-content ;
common-timing-attlist ::= common-basic-timing-attlist common-restart-timing-attlist common-restart-default-attlist common-fill-timing-attlist common-fill-default-attlist common-time-manip-attlist ;
common-basic-timing-attlist ::= common-begin-end-timing-attlist common-dur-timing-attlist common-repeat-timing-attlist ;
table-functions ::= table-named-expressions? table-database-ranges? table-data-pilot-tables? table-consolidation? table-dde-links? ;
style-table-column-properties-content ::= style-properties-content ;
office-chart-content-prelude ::= text-decls table-decls ;
language ::= string() ;
text-list-level-style-image-attr ::= common-draw-data-attlist | office-binary-data ;
office-presentation-content-prelude ::= text-decls table-decls presentation-decls ;
style-paragraph-properties-elements ::= style-tab-stops ;
 style-paragraph-properties-elements ::= style-drop-cap ;
 style-paragraph-properties-elements ::= style-background-image ;
style-table-column-properties-elements ::= ε ;
mathMarkup ::= (α | string() | mathMarkup)* ;
form-generic-control-attlist ::= form-control-attlist ;
style-text-properties-elements ::= ε ;
office-drawing-content-main ::= draw-page* ;
office-presentation-content-epilogue ::= presentation-settings table-functions ;
timeOrDateTime ::= string() ;
any-number ::= number-number | number-scientific-number | number-fraction ;
table-decls ::= table-calculation-settings? table-content-validations? table-label-ranges? ;
style-table-cell-properties-content-strict ::= style-table-cell-properties-attlist style-table-cell-properties-elements ;
form-control-attlist ::= common-form-control-attlist common-control-id-attlist xforms-bind-attlist ;
percent ::= string() ;
style-header-footer-properties-elements ::= style-background-image ;
style-page-layout-properties-content ::= style-properties-content ;
positiveLength ::= string() ;
integer ::= integer() ;
styleNameRefs ::= string()* ;
currency-symbol-and-text ::= number-currency-symbol number-text? ;
style-paragraph-properties-content ::= style-properties-content ;
cellAddress ::= string() ;
base64Binary ::= string() ;
style-table-row-properties-content ::= style-properties-content ;
style-chart-properties-content-strict ::= style-chart-properties-attlist style-chart-properties-elements ;
character ::= string() ;
variableName ::= string() ;
office-meta-content ::= anyElements ;
style-table-cell-properties-elements ::= style-background-image ;
style-table-properties-content-strict ::= style-table-properties-attlist style-table-properties-elements ;
ID ::= string() ;
common-draw-shape-with-text-and-styles-attlist ::= common-draw-shape-with-styles-attlist common-draw-text-style-name-attlist ;
draw-text ::= (text-p | text-list)* ;
form-frame-attlist ::= form-control-attlist common-disabled-attlist for label common-printable-attlist common-title-attlist ;
form-textarea-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist ;
text-get-page-variable-attlist ::= common-field-num-format-attlist ;
style-drawing-page-properties-content ::= style-properties-content ;
string ::= string() ;
namespacedToken ::= string() ;
style-page-layout-properties-elements ::= style-background-image ;
 style-page-layout-properties-elements ::= style-columns ;
 style-page-layout-properties-elements ::= style-footnote-sep ;
style-table-cell-properties-content ::= style-properties-content ;
any-time ::= number-hours | number-am-pm | number-minutes | number-seconds ;
table-table-cell-content ::= table-cell-range-source? office-annotation? table-detective? text-content* ;
office-drawing-content-epilogue ::= table-functions ;
office-spreadsheet-content-prelude ::= table-tracked-changes? text-decls table-decls ;
text-illustration-index-entry-content ::= text-illustration-index-entry-template-attrs (text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop)* ;
positiveInteger ::= integer() ;
form-image-attlist ::= form-control-attlist button-type common-disabled-attlist image-data common-printable-attlist common-tab-attlist target-frame target-location common-title-attlist common-value-attlist ;
anyElements ::= (string()? anyAttListOrElements string()?)* ;
shapes3d ::= dr3d-scene | dr3d-extrude | dr3d-sphere | dr3d-rotate | dr3d-cube ;
point3D ::= string() ;
--------------------odf::opendoc-1.2-dsig.bgf--------------------
dsMarkup ::= (α | string() | dsMarkup)* ;
--------------------odf::opendoc-1.2-manifest.bgf--------------------
anyAttListOrElements ::= string()* anyElements ;
nonNegativeInteger ::= integer() ;
anyElements ::= (string()? anyAttListOrElements string()?)* ;
string ::= string() ;
anyURI ::= string() ;
namespacedToken ::= string() ;
base64Binary ::= string() ;
--------------------odf::opendoc-1.2.bgf--------------------
table-rows-and-groups ::= (table-table-row-group | table-rows-no-group)+ ;
office-drawing-attlist ::= ε ;
db-table-include-filter-attlist ::= ε ;
db-table-presentations-attlist ::= ε ;
text-toc-mark-start-attrs ::= text-id text-outline-level ;
office-image-attlist ::= ε ;
db-table-filter-pattern-attlist ::= ε ;
style-page-layout-properties-content-strict ::= style-page-layout-properties-attlist style-page-layout-properties-elements ;
distance ::= length ;
vector3D ::= string() ;
any-date ::= number-day | number-month | number-year | number-era | number-day-of-week | number-week-of-year | number-quarter | number-hours | number-am-pm | number-minutes | number-seconds ;
text-list-item-content ::= text-number? (text-p | text-h | text-list | text-soft-page-break)* ;
dateOrDateTime ::= string() ;
text-table-of-content-children ::= text-index-entry-chapter | text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop | text-index-entry-link-start | text-index-entry-link-end ;
style-header-footer-properties-content-strict ::= style-header-footer-properties-attlist style-header-footer-properties-elements ;
length ::= string() ;
form-image-frame-attlist ::= form-control-attlist common-disabled-attlist image-data common-printable-attlist common-readonly-attlist common-title-attlist common-data-field-attlist ;
style-drawing-page-properties-content-strict ::= style-graphic-fill-properties-attlist style-drawing-page-properties-attlist style-drawing-page-properties-elements ;
points ::= string() ;
styles ::= style-style* text-list-style* number-number-style* number-currency-style* number-percentage-style* number-date-style* number-time-style* number-boolean-style* number-text-style* ;
NCName ::= string() ;
anyURI ::= string() ;
style-ruby-properties-content-strict ::= style-ruby-properties-attlist style-ruby-properties-elements ;
office-spreadsheet-content-main ::= table-table* ;
styleName ::= string() ;
db-connection-data-attlist ::= ε ;
IDREFS ::= string() ;
style-list-level-properties-content-strict ::= style-list-level-properties-attlist style-list-level-properties-elements ;
office-drawing-content-prelude ::= text-decls table-decls ;
table-columns-and-groups ::= (table-table-column-group | table-columns-no-group)+ ;
text-content ::= text-h | text-p | text-list | text-numbered-paragraph | table-table | text-section | text-soft-page-break | text-table-of-content | text-illustration-index | text-table-index | text-object-index | text-user-index | text-alphabetical-index | text-bibliography | shape | change-marks ;
form-file-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist common-linked-cell ;
office-image-content-prelude ::= ε ;
db-keys-attlist ::= ε ;
anyIRI ::= string() ;
office-meta-content-strict ::= office-meta-data* ;
angle ::= string() ;
relativeLength ::= string() ;
double ::= string() ;
common-field-database-table ::= common-field-database-table-attlist common-field-database-name ;
style-graphic-properties-elements ::= text-list-style? style-background-image style-columns ;
nonNegativeDecimal ::= integer() ;
paragraph-content-or-hyperlink ::= paragraph-content | text-a ;
time ::= string() ;
office-chart-content-main ::= chart-chart ;
style-chart-properties-elements ::= ε ;
form-hidden-attlist ::= form-control-attlist common-value-attlist ;
text-meta-field-attlist ::= xml-id common-field-data-style-name-attlist ;
style-table-row-properties-elements ::= style-background-image ;
db-data-source-attlist ::= ε ;
nonNegativeInteger ::= integer() ;
style-paragraph-properties-content-strict ::= style-paragraph-properties-attlist style-paragraph-properties-elements ;
text-section-source-dde ::= office-dde-source ;
borderWidths ::= positiveLength positiveLength positiveLength ;
style-page-layout-content ::= style-page-layout-properties? style-header-style? style-footer-style? ;
CURIEs ::= CURIE+ ;
cellRangeAddressList ::= string() ;
style-table-properties-elements ::= style-background-image ;
style-graphic-properties-content-strict ::= style-graphic-properties-attlist style-graphic-fill-properties-attlist style-graphic-properties-elements ;
style-list-level-properties-elements ::= style-list-level-label-alignment ;
presentation-animation-elements ::= presentation-show-shape | presentation-show-text | presentation-hide-shape | presentation-hide-text | presentation-dim | presentation-play ;
SafeCURIE ::= string() ;
date ::= string() ;
zeroToOneDecimal ::= integer() ;
anyAttListOrElements ::= string()* anyElements ;
common-numeric-control-attlist ::= form-control-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-convert-empty-attlist common-data-field-attlist ;
office-image-content-epilogue ::= ε ;
nonNegativeLength ::= string() ;
index-content-main ::= text-content | text-index-title ;
form-radio-attlist ::= form-control-attlist current-selected common-disabled-attlist label common-printable-attlist selected common-tab-attlist common-title-attlist common-value-attlist common-data-field-attlist common-form-visual-effect-attlist common-form-relative-image-position-attlist common-linked-cell ;
countryCode ::= string() ;
common-form-control-content ::= form-properties? office-event-listeners? ;
form-grid-attlist ::= form-control-attlist common-disabled-attlist common-printable-attlist common-tab-attlist common-title-attlist ;
shape ::= shape-instance | draw-a ;
textEncoding ::= string() ;
region-content ::= text-p* ;
office-spreadsheet-content-epilogue ::= table-functions ;
dateTime ::= string() ;
office-text-content-epilogue ::= table-functions ;
text-meta-attlist ::= common-in-content-meta-attlist? xml-id? ;
signedZeroToHundredPercent ::= string() ;
presentation-decls ::= presentation-decl* ;
duration ::= string() ;
db-key-columns-attlist ::= ε ;
form-option-attlist ::= current-selected selected label common-value-attlist ;
office-presentation-content-main ::= draw-page* ;
common-table-range-attlist ::= common-table-cell-address-attlist | common-table-cell-range-address-attlist ;
db-table-exclude-filter-attlist ::= ε ;
db-database-description-attlist ::= ε ;
nonNegativePixelLength ::= string() ;
office-chart-content-epilogue ::= table-functions ;
form-text-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist common-linked-cell ;
db-columns-attlist ::= ε ;
office-chart-attlist ::= ε ;
style-drawing-page-properties-elements ::= presentation-sound? ;
office-presentation-attlist ::= ε ;
style-table-column-properties-content-strict ::= style-table-column-properties-attlist style-table-column-properties-elements ;
style-ruby-properties-elements ::= ε ;
db-table-type-attlist ::= ε ;
cellRangeAddress ::= string() ;
coordinate ::= length ;
IDREF ::= string() ;
common-db-default-value ::= common-value-and-type-attlist? ;
config-items ::= (config-config-item | config-config-item-set | config-config-item-map-named | config-config-item-map-indexed)+ ;
style-section-properties-content-strict ::= style-section-properties-attlist style-section-properties-elements ;
style-text-properties-content-strict ::= style-text-properties-attlist style-text-properties-elements ;
form-column-attlist ::= common-form-control-attlist label text-style-name ;
office-image-content-main ::= draw-frame ;
pathData ::= string() ;
form-item-attlist ::= label ;
office-text-content-prelude ::= office-forms text-tracked-changes text-decls table-decls ;
style-table-row-properties-content-strict ::= style-table-row-properties-attlist style-table-row-properties-elements ;
common-draw-shape-with-styles-attlist ::= common-draw-z-index-attlist common-draw-id-attlist common-draw-layer-name-attlist common-draw-style-name-attlist common-draw-transform-attlist common-draw-name-attlist common-text-spreadsheet-shape-attlist ;
number-and-text ::= number-number number-text? ;
languageCode ::= string() ;
common-field-num-format-attlist ::= common-num-format-attlist? ;
db-table-definitions-attlist ::= ε ;
color ::= string() ;
db-reports-attlist ::= ε ;
db-schema-definition-attlist ::= ε ;
URIorSafeCURIE ::= anyURI | SafeCURIE ;
office-annotation-end-attlist ::= common-office-annotation-name-attlist ;
extrusionOrigin ::= string() ;
common-timing-attlist ::= common-basic-timing-attlist common-time-manip-attlist ;
common-basic-timing-attlist ::= common-begin-end-timing-attlist common-dur-timing-attlist common-repeat-timing-attlist common-restart-timing-attlist common-restart-default-attlist common-fill-timing-attlist common-fill-default-attlist ;
table-functions ::= table-named-expressions? table-database-ranges? table-data-pilot-tables? table-consolidation? table-dde-links? ;
zeroToHundredPercent ::= string() ;
db-table-presentation-attlist ::= ε ;
office-chart-content-prelude ::= text-decls table-decls ;
scriptCode ::= string() ;
language ::= string() ;
text-list-level-style-image-attr ::= common-draw-data-attlist | office-binary-data ;
office-presentation-content-prelude ::= text-decls table-decls presentation-decls ;
style-paragraph-properties-elements ::= style-tab-stops style-drop-cap style-background-image ;
style-table-column-properties-elements ::= ε ;
db-data-source-settings-attlist ::= ε ;
mathMarkup ::= (α | string() | mathMarkup)* ;
form-generic-control-attlist ::= form-control-attlist ;
db-table-type-filter-attlist ::= ε ;
db-component-collection-attlist ::= ε ;
style-section-properties-elements ::= style-background-image style-columns text-notes-configuration* ;
style-text-properties-elements ::= ε ;
office-drawing-content-main ::= draw-page* ;
office-presentation-content-epilogue ::= presentation-settings table-functions ;
timeOrDateTime ::= string() ;
any-number ::= number-number | number-scientific-number | number-fraction ;
db-indices-attlist ::= ε ;
table-decls ::= table-calculation-settings? table-content-validations? table-label-ranges? ;
style-table-cell-properties-content-strict ::= style-table-cell-properties-attlist style-table-cell-properties-elements ;
form-control-attlist ::= common-form-control-attlist common-control-id-attlist xforms-bind-attlist ;
percent ::= string() ;
style-header-footer-properties-elements ::= style-background-image ;
shape-instance ::= draw-rect | draw-line | draw-polyline | draw-polygon | draw-regular-polygon | draw-path | draw-circle | draw-ellipse | draw-g | draw-page-thumbnail | draw-frame | draw-measure | draw-caption | draw-connector | draw-control | dr3d-scene | draw-custom-shape ;
positiveLength ::= string() ;
integer ::= integer() ;
styleNameRefs ::= string()* ;
CURIE ::= string() ;
currency-symbol-and-text ::= number-currency-symbol number-text? ;
db-table-filter-attlist ::= ε ;
db-table-setting-attlist ::= db-is-first-row-header-line db-show-deleted ;
cellAddress ::= string() ;
clipShape ::= string() ;
base64Binary ::= string() ;
style-chart-properties-content-strict ::= style-chart-properties-attlist style-chart-properties-elements ;
db-column-definitions-attlist ::= ε ;
character ::= string() ;
db-data-source-setting-value-attlist ::= ε ;
variableName ::= string() ;
db-query-collection-attlist ::= ε ;
text-list-header-attr ::= xml-id? ;
style-table-cell-properties-elements ::= style-background-image ;
style-table-properties-content-strict ::= style-table-properties-attlist style-table-properties-elements ;
ID ::= string() ;
common-draw-shape-with-text-and-styles-attlist ::= common-draw-shape-with-styles-attlist common-draw-text-style-name-attlist ;
draw-text ::= (text-p | text-list)* ;
form-frame-attlist ::= form-control-attlist common-disabled-attlist for label common-printable-attlist common-title-attlist ;
form-textarea-attlist ::= form-control-attlist common-current-value-attlist common-disabled-attlist common-maxlength-attlist common-printable-attlist common-readonly-attlist common-tab-attlist common-title-attlist common-value-attlist common-convert-empty-attlist common-data-field-attlist common-linked-cell ;
text-get-page-variable-attlist ::= common-field-num-format-attlist ;
db-forms-attlist ::= ε ;
string ::= string() ;
namespacedToken ::= string() ;
style-page-layout-properties-elements ::= style-background-image style-columns style-footnote-sep ;
any-time ::= number-hours | number-am-pm | number-minutes | number-seconds ;
table-table-cell-content ::= table-cell-range-source? office-annotation? table-detective? text-content* ;
office-drawing-content-epilogue ::= table-functions ;
db-queries-attlist ::= ε ;
office-spreadsheet-content-prelude ::= table-tracked-changes? text-decls table-decls ;
text-illustration-index-entry-content ::= text-illustration-index-entry-template-attrs (text-index-entry-chapter | text-index-entry-page-number | text-index-entry-text | text-index-entry-span | text-index-entry-tab-stop)* ;
positiveInteger ::= integer() ;
form-image-attlist ::= form-control-attlist button-type common-disabled-attlist image-data common-printable-attlist common-tab-attlist target-frame target-location common-title-attlist common-value-attlist ;
anyElements ::= (string()? anyAttListOrElements string()?)* ;
shapes3d ::= dr3d-scene | dr3d-extrude | dr3d-sphere | dr3d-rotate | dr3d-cube ;
point3D ::= string() ;
--------------------pascal::bruneliere.bgf--------------------
String ::= string() ;
--------------------pascal::delphi.bgf--------------------
procedure_impl_decl ::= NL procedure_intf_decl nested_decl_block procedure_body_semi ;
procedural_type ::= procedure_intf_decl of_object? semi_calling_spec* ;
subrange_type ::= expression SPOFF dotdot_expr SPON ;
id_colon ::= id colon ;
enum_spec ::= id param_init? ;
exception_var ::= id colon ;
record_field_constant ::= id colon typed_const ;
anynumber ::= hexnumber | number ;
expr ::= SP SPOFF expression SPON ;
prop_index_name ::= prop_index_modifier? qualified_id ;
exports_entry ::= procedure_id formal_parameters? external_name? ;
impldecl_section ::= const_section | type_section | var_section | label_decl | procedure_impl_decl | procedure_external_decl | resource_section | exports_section ;
filenamelit ::= charlit | stringlit | qualified_id ;
statement ::= labelid_colon? unlabeled_stm ;
labelid_colon ::= label_id colon ;
statement_list ::= IN statement_semi* statement? EX ;
term ::= prefix_opr* atom_expr postfix_opr* ;
array_index ::= ordinal_type | qualified_id ;
const_init ::= equal typed_const ;
interface_body ::= visibility_default end_struct ;
var_init ::= absolute_init | const_init ;
simple_type ::= ordinal_type | real_type ;
intfdecl_section ::= const_section | type_section | var_section | label_decl | procedure_intf_decl | procedure_external_decl | resource_section | exports_section ;
uses_item ::= qualified_id in_filename? ;
case_label ::= expr dotdot_expr? ;
struct_type ::= set_type | array_type | file_type ;
exception_handler_list ::= exception_handler_semi* exception_handler? ;
prop_specifier ::= index_spec | accessor_spec | stored_spec | default_spec | implements_spec | dispid_spec ;
visibility_block ::= visibility NL IN class_member* EX ;
type_spec ::= simple_type | string_type | struct_type | pointer_type | procedural_type | variant_type | class_reference_type | class_type | interface_type | qualified_id ;
set_element ::= expression dotdot_expr? ;
interface_section ::= interface_kw uses_clause? intfdecl_block ;
qualified_id ::= namespace* name SPON ;
jump_stm ::= goto_stm | raise_stm ;
colon_type ::= colon type_spec ;
formal_parameter ::= parm_qual? parameter ;
expression ::= term infix_expr* ;
nested_decl_section ::= const_section | type_section | var_section | label_decl | procedure_impl_decl ;
impldecl_block ::= impldecl_section* ;
implementation_section ::= implementation_kw uses_clause? impldecl_block ;
argm ::= expression argmfmt? argmfmt? ;
unit_file ::= unit_decl interface_section implementation_section initialization_section? finalization_section? end_struct file_end ;
program_file ::= program_decl uses_clause? impldecl_block procedure_body file_end ;
package_file ::= package_decl requires_clause? contains_clause? end_struct file_end ;
delphi_file ::= program_file | package_file | unit_file ;
visibility_default ::= IN class_member* EX ;
finalization_section ::= finalization_kw statement_list ;
parameter_type ::= colon_type param_init? ;
intfdecl_block ::= intfdecl_section* ;
typed_const ::= array_constant | record_constant | expr ;
identlist ::= id colon_id* ;
var_section ::= var_keyword NL IN var_decl+ EX ;
name ::= builtinid | id ;
class_body ::= visibility_default visibility_block* end_struct ;
ordinal_type ::= integer_type | char_type | enumerated_type | boolean_type | subrange_type ;
unlabeled_stm ::= sequence_stm | loop_stm | with_stm | try_finally_stm | try_except_stm | selection_stm | jump_stm | assign_stm | call_stm ;
procedure_id ::= namespace? id ;
initialization_section ::= initialization_kw NL statement_list ;
label_id ::= anynumber | id ;
infix_expr ::= SP infix_opr SP term ;
param_init ::= equal expr ;
class_member ::= var_decl | method_decl | property_decl | variant_section ;
interface_type ::= interface_keyword heritage_list? guid_decl? interface_body? ;
nested_decl_block ::= nested_decl_section* ;
--------------------pascal::delphipp.bgf--------------------
pp_litexpr ::= id | charlit | anynumber ;
pp_content ::= pp_stmt_or_water ;
bracketbody ::= pp_any ;
pp_elseifblock ::= pp_elseifexpr pp_content* ;
anynumber ::= number | hexnumber ;
delphipp_file ::= pp_stmt_or_water* ;
pp_ifstmt ::= pp_ifblock pp_elseifblock* pp_endif ;
starbody ::= pp_any ;
pp_switch ::= id space? pp_switchopt ;
nested_id ::= SPOFF namespace* ident SPON ;
pp_ifblock ::= pp_ifexpr pp_content* ;
cmlinebody ::= pp_any ;
pp_comment ::= cmbracketblock | cmstarblock | cmline ;
filenamelit ::= charlit | stringlit | nested_id ;
--------------------pascal::object.bgf--------------------
method_list ::= virtual_method_heading semi_virtual_method_heading* ;
proc_or_func_heading ::= procedure_heading | function_heading ;
type ::= typeId | simpleType | structType | pointerType | stringType | procedureType | variantType | class_referenceType ;
procedure_section ::= procedure_declaration | function_declaration | constructor_declaration | destructor_declaration ;
ref_name ::= object ;
conditional_statement ::= if_statement | case_statement ;
class_visibility_method_list ::= class_visibility method_list ;
class_method_list ::= class_visibility_method_list* ;
typeId ::= ref_name | predefinedType ;
restrictedType ::= objectType | classType | interfaceType ;
mul_op_factor ::= mul_op factor ;
statement_list ::= statement semi_statement* ;
op_factor ::= op factor ;
procedureType ::= proc_or_func_heading of_object? ;
term ::= factor mul_op_factor* ;
add_op_term ::= add_op term ;
exception_else ::= exception_handler_list NL EX else_statement? ;
type_or_string ::= type | charlit ;
class_element_list ::= class_element_semi+ ;
as_type ::= as type ;
vis_spec_element_list ::= NL class_visibility class_element_list? ;
uses_item ::= ref_name in_clause? ;
case_label ::= expression dotDot_expression? ;
var_assignment ::= absolute_assignment | constant_assignment ;
method_heading ::= procedure_heading | function_heading | destructor_heading | constructor_heading ;
declaration_section ::= label_declaration_section | constant_section | type_section | var_section | procedure_section ;
requires_clause ::= requires_idList_semicolon* ;
set_element ::= expression dotDot_expression? ;
property_specifiers ::= index_expession | read_id | write_id | stored_id_OR_stored_expression | default_expression_OR_nodefault | implementsTypeId ;
formal_parameter ::= parm_qual? parameter ;
typed_constant ::= expression | array_constant | record_constant ;
virtual_method_heading ::= method_heading semi_directive? semicolon_virtual? ;
procedure_heading ::= procedure decl_name formal_parameters? ;
loop_statement ::= repeating_statement | while_statement | for_statement ;
program_block ::= uses_clause? block ;
id_or_expression ::= ref_name | expression ;
contains_clause ::= contains_idList_semicolon* ;
rel_op_simple_expression ::= rel_op simple_expression ;
var_section ::= var NL IN var_declaration_semicolon* NL EX ;
block ::= declaration_section* compound_statement ;
simpleType ::= ordinalType | realType ;
ordinalType ::= subrangeType | enumeratedType | ordinal_identifier ;
unlabeled_statement ::= simple_statement | struct_statement ;
property_list ::= property_word decl_name property_interface? property_specifiers* ;
simple_expression ::= term? add_op_term* ;
struct_statement ::= compound_statement | conditional_statement | loop_statement | with_statement | try_finally_statement | try_except_statement | raise_statement ;
program ::= program_definition | package_definition | library_definition | unit_definition ;
object_field_list ::= ident_list_colonType semi_ident_list_colonType* ;
field_list ::= field_declaration+ variant_section? ;
class_visibility_property_list ::= class_visibility property_list ;
class_property_list ::= class_visibility_property_list* ;
decl_name ::= id dot_id* ;
--------------------pl1::bruneliere.bgf--------------------
PLIAttribute ::= ε ;
Integer ::= integer() ;
String ::= string() ;
--------------------uml::collab.bgf--------------------
Integer ::= integer() ;
String ::= string() ;
--------------------uml::extended.bgf--------------------
Multiplicity ::= ε ;
Integer ::= integer() ;
ChangeableKind ::= ε ;
Namespace ::= GeneralizableElement ;
Name ::= ε ;
GeneralizableElement ::= Classifier ;
RfIntegretyKind ::= ε ;
Expression ::= ε ;
ScopeKind ::= ε ;
AggregationKind ::= ε ;
StructureFeature ::= Attribute ;
RlIntegretyKind ::= ε ;
String ::= string() ;
Classifier ::= Class ;
--------------------uml::fragment.bgf--------------------
Integer ::= integer() ;
Generalization ::= ε ;
Event ::= ε ;
String ::= string() ;
--------------------uml::oocm.bgf--------------------
Integer ::= integer() ;
String ::= string() ;
--------------------uml::reuse.bgf--------------------
BasicProvider ::= ε ;
Integer ::= integer() ;
BasicReuser ::= ε ;
String ::= string() ;
--------------------uml::simple.bgf--------------------
UMLModelElement ::= Attribute ;
 UMLModelElement ::= Package ;
 UMLModelElement ::= PackageElement ;
PackageElement ::= Classifier ;
 PackageElement ::= Association ;
String ::= string() ;
Classifier ::= Class ;
 Classifier ::= PrimitiveDataType ;
--------------------uml::statecharts.bgf--------------------
Integer ::= integer() ;
String ::= string() ;
--------------------uml::stereo.bgf--------------------
Integer ::= integer() ;
GeneralizableElement ::= Stereotype ;
String ::= string() ;
--------------------uml::uml-uc.bgf--------------------
Integer ::= integer() ;
RelationShip ::= Include ;
 RelationShip ::= Extend ;
ModelElement ::= ExtensionPoint ;
String ::= string() ;
--------------------uml::uml2.bgf--------------------
Namespace ::= Package ;
 Namespace ::= Classifier ;
 Namespace ::= BehavioralFeature ;
 Namespace ::= InteractionOperand ;
 Namespace ::= Region ;
 Namespace ::= State ;
MergeNode ::= ε ;
StructuralFeature ::= Property ;
ConnectableElement ::= Parameter ;
 ConnectableElement ::= Variable ;
FinalNode ::= ActivityFinalNode ;
 FinalNode ::= FlowFinalNode ;
LiteralNull ::= ε ;
Pin ::= OutputPin ;
 Pin ::= InputPin ;
MessageEnd ::= Gate ;
 MessageEnd ::= EventOccurrence ;
OutputPin ::= ε ;
LiteralSpecification ::= LiteralBoolean ;
 LiteralSpecification ::= LiteralString ;
 LiteralSpecification ::= LiteralNull ;
 LiteralSpecification ::= LiteralInteger ;
 LiteralSpecification ::= LiteralUnlimitedNatural ;
VariableAction ::= ReadVariableAction ;
 VariableAction ::= WriteVariableAction ;
 VariableAction ::= ClearVariableAction ;
Behavior ::= Activity ;
 Behavior ::= StateMachine ;
 Behavior ::= Interaction ;
StructuredClassifier ::= EncapsulatedClassifier ;
 StructuredClassifier ::= Collaboration ;
ValueSpecification ::= OpaqueExpression ;
 ValueSpecification ::= LiteralSpecification ;
 ValueSpecification ::= InstanceValue ;
 ValueSpecification ::= TimeExpression ;
 ValueSpecification ::= Duration ;
 ValueSpecification ::= Interval ;
DurationConstraint ::= ε ;
WriteVariableAction ::= AddVariableValueAction ;
 WriteVariableAction ::= RemoveVariableValueAction ;
String ::= string() ;
LinkAction ::= ReadLinkAction ;
 LinkAction ::= WriteLinkAction ;
WriteStructuralFeatureAction ::= RemoveStructuralFeatureValueAction ;
 WriteStructuralFeatureAction ::= AddStructuralFeatureValueAction ;
 WriteStructuralFeatureAction ::= TimeObservationAction ;
 WriteStructuralFeatureAction ::= DurationObservationAction ;
WriteLinkAction ::= CreateLinkAction ;
 WriteLinkAction ::= DestroyLinkAction ;
RedefinableElement ::= Feature ;
 RedefinableElement ::= ActivityEdge ;
 RedefinableElement ::= ActivityNode ;
 RedefinableElement ::= ExtensionPoint ;
 RedefinableElement ::= Transition ;
 RedefinableElement ::= RedefinableTemplateSignature ;
 RedefinableElement ::= Region ;
TimeConstraint ::= ε ;
FlowFinalNode ::= ε ;
ActivityFinalNode ::= ε ;
TemplateableElement ::= NamedElement ;
 TemplateableElement ::= Comment ;
 TemplateableElement ::= StringExpression ;
NamedElement ::= Namespace ;
 NamedElement ::= TypedElement ;
 NamedElement ::= RedefinableElement ;
 NamedElement ::= CollaborationOccurrence ;
 NamedElement ::= Trigger ;
 NamedElement ::= InteractionFragment ;
 NamedElement ::= Lifeline ;
 NamedElement ::= Message ;
 NamedElement ::= GeneralOrdering ;
 NamedElement ::= MessageEnd ;
 NamedElement ::= Vertex ;
 NamedElement ::= ParameterSet ;
 NamedElement ::= DeployedArtifact ;
 NamedElement ::= DeploymentTarget ;
 NamedElement ::= PackageableElement ;
 NamedElement ::= ConnectableElement ;
 NamedElement ::= Extend ;
 NamedElement ::= Include ;
 NamedElement ::= ActivityPartition ;
InteractionFragment ::= ExecutionOccurrence ;
 InteractionFragment ::= StateInvariant ;
 InteractionFragment ::= InteractionOccurrence ;
 InteractionFragment ::= CombinedFragment ;
 InteractionFragment ::= Continuation ;
 InteractionFragment ::= EventOccurrence ;
 InteractionFragment ::= Interaction ;
 InteractionFragment ::= InteractionOperand ;
ControlNode ::= InitialNode ;
 ControlNode ::= FinalNode ;
 ControlNode ::= DecisionNode ;
 ControlNode ::= MergeNode ;
 ControlNode ::= ForkNode ;
 ControlNode ::= JoinNode ;
Integer ::= integer() ;
MultiplicityElement ::= ConnectorEnd ;
 MultiplicityElement ::= Pin ;
PackageableElement ::= Type ;
 PackageableElement ::= Constraint ;
 PackageableElement ::= GeneralizationSet ;
 PackageableElement ::= PrimitiveFunction ;
 PackageableElement ::= InstanceSpecification ;
 PackageableElement ::= Dependency ;
 PackageableElement ::= InformationFlow ;
 PackageableElement ::= Package ;
Element ::= MultiplicityElement ;
 Element ::= Relationship ;
 Element ::= Slot ;
 Element ::= ActivityGroup ;
 Element ::= Clause ;
 Element ::= TemplateSignature ;
 Element ::= TemplateParameter ;
 Element ::= TemplateableElement ;
 Element ::= ParameterableElement ;
 Element ::= TemplateParameterSubstitution ;
 Element ::= ExceptionHandler ;
 Element ::= LinkEndData ;
 Element ::= QualifierValue ;
DataStoreNode ::= ε ;
ParameterableElement ::= ValueSpecification ;
 ParameterableElement ::= PackageableElement ;
 ParameterableElement ::= ConnectableElement ;
BehavioralFeature ::= Reception ;
 BehavioralFeature ::= Operation ;
DeployedArtifact ::= Artifact ;
Trigger ::= MessageTrigger ;
 Trigger ::= ChangeTrigger ;
 Trigger ::= TimeTrigger ;
Relationship ::= DirectedRelationship ;
 Relationship ::= Association ;
CentralBufferNode ::= DataStoreNode ;
DeploymentTarget ::= Node ;
Feature ::= Connector ;
 Feature ::= StructuralFeature ;
 Feature ::= BehavioralFeature ;
CallAction ::= CallOperationAction ;
 CallAction ::= CallBehaviorAction ;
EncapsulatedClassifier ::= Class ;
TypedElement ::= ValueSpecification ;
 TypedElement ::= ObjectNode ;
BehavioredClassifier ::= UseCase ;
 BehavioredClassifier ::= Class ;
 BehavioredClassifier ::= Collaboration ;
MessageTrigger ::= CallTrigger ;
 MessageTrigger ::= SignalTrigger ;
 MessageTrigger ::= AnyTrigger ;
ActivityNode ::= ControlNode ;
 ActivityNode ::= ExecutableNode ;
 ActivityNode ::= ObjectNode ;
ActivityGroup ::= InterruptibleActivityRegion ;
 ActivityGroup ::= ActivityPartition ;
StructuralFeatureAction ::= ReadStructuralFeatureAction ;
 StructuralFeatureAction ::= WriteStructuralFeatureAction ;
 StructuralFeatureAction ::= ClearStructuralFeatureAction ;
CreateLinkAction ::= CreateLinkObjectAction ;
AnyTrigger ::= ε ;
ExecutableNode ::= Action ;
ActivityEdge ::= ControlFlow ;
 ActivityEdge ::= ObjectFlow ;
InputPin ::= ValuePin ;
DestroyLinkAction ::= ε ;
InvocationAction ::= CallAction ;
 InvocationAction ::= SendSignalAction ;
 InvocationAction ::= BroadcastSignalAction ;
 InvocationAction ::= SendObjectAction ;
InitialNode ::= ε ;
Vertex ::= Pseudostate ;
 Vertex ::= ConnectionPointReference ;
ForkNode ::= ε ;
ObjectNode ::= ActivityParameterNode ;
 ObjectNode ::= CentralBufferNode ;
 ObjectNode ::= ExpansionNode ;
 ObjectNode ::= Pin ;
Classifier ::= DataType ;
 Classifier ::= BehavioredClassifier ;
 Classifier ::= InformationItem ;
 Classifier ::= StructuredClassifier ;
 Classifier ::= Interface ;
 Classifier ::= Actor ;
 Classifier ::= Signal ;
 Classifier ::= ParameterableClassifier ;
 Classifier ::= TemplateableClassifier ;
 Classifier ::= Association ;
 Classifier ::= Artifact ;
DirectedRelationship ::= Generalization ;
 DirectedRelationship ::= ElementImport ;
 DirectedRelationship ::= PackageImport ;
 DirectedRelationship ::= PackageMerge ;
 DirectedRelationship ::= TemplateBinding ;
 DirectedRelationship ::= ProtocolConformance ;
 DirectedRelationship ::= Dependency ;
 DirectedRelationship ::= InformationFlow ;
 DirectedRelationship ::= Extend ;
 DirectedRelationship ::= Include ;
--------------------uml::umldi-2.0.bgf--------------------
GraphicPrimitive ::= Polyline ;
 GraphicPrimitive ::= Ellipse ;
LeafElement ::= TextElement ;
 LeafElement ::= GraphicPrimitive ;
 LeafElement ::= Image ;
Integer ::= integer() ;
Element ::= ModelElement ;
 Element ::= PresentationElement ;
Namespace ::= Collaboration ;
 Namespace ::= Classifier ;
 Namespace ::= Package ;
Event ::= TimeEvent ;
 Event ::= CallEvent ;
 Event ::= SignalEvent ;
 Event ::= ChangeEvent ;
BehavioralFeature ::= Reception ;
 BehavioralFeature ::= Operation ;
 BehavioralFeature ::= Method ;
StructuralFeature ::= Attribute ;
Relationship ::= Extend ;
 Relationship ::= Include ;
 Relationship ::= Generalization ;
 Relationship ::= Dependency ;
 Relationship ::= Flow ;
 Relationship ::= Association ;
Feature ::= StructuralFeature ;
 Feature ::= BehavioralFeature ;
Action ::= CreateAction ;
 Action ::= DestroyAction ;
 Action ::= UninterpretedAction ;
 Action ::= CallAction ;
 Action ::= SendAction ;
 Action ::= ActionSequence ;
 Action ::= ReturnAction ;
 Action ::= TerminateAction ;
StateVertex ::= State ;
 StateVertex ::= Pseudostate ;
 StateVertex ::= SynchState ;
 StateVertex ::= StubState ;
Instance ::= UseCaseInstance ;
 Instance ::= Object ;
 Instance ::= DataValue ;
 Instance ::= ComponentInstance ;
 Instance ::= NodeInstance ;
 Instance ::= SubsystemInstance ;
ModelElement ::= Message ;
 ModelElement ::= Interaction ;
 ModelElement ::= InteractionInstanceSet ;
 ModelElement ::= CollaborationInstanceSet ;
 ModelElement ::= ExtensionPoint ;
 ModelElement ::= Instance ;
 ModelElement ::= Action ;
 ModelElement ::= AttributeLink ;
 ModelElement ::= Link ;
 ModelElement ::= Argument ;
 ModelElement ::= LinkEnd ;
 ModelElement ::= Stimulus ;
 ModelElement ::= Partition ;
 ModelElement ::= StateMachine ;
 ModelElement ::= Event ;
 ModelElement ::= StateVertex ;
 ModelElement ::= Transition ;
 ModelElement ::= Guard ;
 ModelElement ::= GeneralizableElement ;
 ModelElement ::= Namespace ;
 ModelElement ::= Feature ;
 ModelElement ::= AssociationEnd ;
 ModelElement ::= Constraint ;
 ModelElement ::= Relationship ;
 ModelElement ::= Parameter ;
 ModelElement ::= Comment ;
 ModelElement ::= EnumerationLiteral ;
 ModelElement ::= TagDefinition ;
 ModelElement ::= TaggedValue ;
State ::= CompositeState ;
 State ::= SimpleState ;
 State ::= FinalState ;
String ::= string() ;
Exception ::= ε ;
GraphElement ::= GraphEdge ;
 GraphElement ::= GraphNode ;
SemanticModelBridge ::= SimpleSemanticModelElement ;
 SemanticModelBridge ::= Uml1SemanticModelBridge ;
 SemanticModelBridge ::= CoreSemanticModelBridge ;
GeneralizableElement ::= Stereotype ;
 GeneralizableElement ::= Collaboration ;
 GeneralizableElement ::= Classifier ;
 GeneralizableElement ::= Association ;
 GeneralizableElement ::= Package ;
DiagramElement ::= GraphElement ;
 DiagramElement ::= LeafElement ;
 DiagramElement ::= Reference ;
Signal ::= Exception ;
Primitive ::= ε ;
Classifier ::= ClassifierRole ;
 Classifier ::= UseCase ;
 Classifier ::= Actor ;
 Classifier ::= Signal ;
 Classifier ::= ClassifierInState ;
 Classifier ::= Class ;
 Classifier ::= DataType ;
 Classifier ::= Interface ;
 Classifier ::= Component ;
 Classifier ::= Node ;
 Classifier ::= Artifact ;
 Classifier ::= Subsystem ;
--------------------uml::umldi-ag.bgf--------------------
Exception ::= ε ;
Integer ::= integer() ;
Element ::= ModelElement ;
Namespace ::= Classifier ;
Event ::= TimeEvent ;
 Event ::= CallEvent ;
 Event ::= SignalEvent ;
 Event ::= ChangeEvent ;
BehavioralFeature ::= Operation ;
GeneralizableElement ::= Classifier ;
Relationship ::= Generalization ;
Feature ::= BehavioralFeature ;
Action ::= CreateAction ;
 Action ::= DestroyAction ;
 Action ::= UninterpretedAction ;
 Action ::= CallAction ;
 Action ::= SendAction ;
 Action ::= ActionSequence ;
 Action ::= ReturnAction ;
 Action ::= TerminateAction ;
StateVertex ::= State ;
 StateVertex ::= Pseudostate ;
 StateVertex ::= SynchState ;
 StateVertex ::= StubState ;
ModelElement ::= Action ;
 ModelElement ::= Argument ;
 ModelElement ::= GeneralizableElement ;
 ModelElement ::= Namespace ;
 ModelElement ::= Feature ;
 ModelElement ::= Relationship ;
 ModelElement ::= Parameter ;
 ModelElement ::= StateMachine ;
 ModelElement ::= Event ;
 ModelElement ::= StateVertex ;
 ModelElement ::= Transition ;
 ModelElement ::= Guard ;
 ModelElement ::= Partition ;
String ::= string() ;
State ::= CompositeState ;
 State ::= SimpleState ;
 State ::= FinalState ;
Classifier ::= Signal ;
 Classifier ::= ClassifierInState ;
--------------------uml::umldi-c.bgf--------------------
Exception ::= ε ;
Integer ::= integer() ;
Element ::= ModelElement ;
Namespace ::= Classifier ;
 Namespace ::= Collaboration ;
BehavioralFeature ::= Operation ;
 BehavioralFeature ::= Reception ;
StructuralFeature ::= Attribute ;
GeneralizableElement ::= Classifier ;
 GeneralizableElement ::= Association ;
 GeneralizableElement ::= Collaboration ;
Signal ::= Exception ;
Relationship ::= Generalization ;
 Relationship ::= Association ;
Action ::= CreateAction ;
 Action ::= DestroyAction ;
 Action ::= UninterpretedAction ;
 Action ::= CallAction ;
 Action ::= SendAction ;
 Action ::= ActionSequence ;
 Action ::= ReturnAction ;
 Action ::= TerminateAction ;
Feature ::= StructuralFeature ;
 Feature ::= BehavioralFeature ;
Instance ::= Object ;
 Instance ::= DataValue ;
 Instance ::= ComponentInstance ;
 Instance ::= NodeInstance ;
 Instance ::= SubsystemInstance ;
ModelElement ::= GeneralizableElement ;
 ModelElement ::= Namespace ;
 ModelElement ::= Feature ;
 ModelElement ::= AssociationEnd ;
 ModelElement ::= Relationship ;
 ModelElement ::= Parameter ;
 ModelElement ::= Instance ;
 ModelElement ::= Action ;
 ModelElement ::= AttributeLink ;
 ModelElement ::= Link ;
 ModelElement ::= Argument ;
 ModelElement ::= LinkEnd ;
 ModelElement ::= Stimulus ;
 ModelElement ::= Message ;
 ModelElement ::= Interaction ;
 ModelElement ::= InteractionInstanceSet ;
 ModelElement ::= CollaborationInstanceSet ;
Classifier ::= Signal ;
 Classifier ::= ClassifierRole ;
String ::= string() ;
--------------------uml::umldi-mm.bgf--------------------
Integer ::= integer() ;
Element ::= ModelElement ;
Namespace ::= Classifier ;
 Namespace ::= Package ;
GeneralizableElement ::= Classifier ;
 GeneralizableElement ::= Package ;
Relationship ::= Generalization ;
ModelElement ::= GeneralizableElement ;
 ModelElement ::= Namespace ;
 ModelElement ::= Feature ;
 ModelElement ::= Relationship ;
String ::= string() ;
Classifier ::= Subsystem ;
--------------------uml::umldi-sm.bgf--------------------
Exception ::= ε ;
Integer ::= integer() ;
Element ::= ModelElement ;
Namespace ::= Classifier ;
Event ::= TimeEvent ;
 Event ::= CallEvent ;
 Event ::= SignalEvent ;
 Event ::= ChangeEvent ;
BehavioralFeature ::= Reception ;
 BehavioralFeature ::= Operation ;
GeneralizableElement ::= Classifier ;
Relationship ::= Generalization ;
Feature ::= BehavioralFeature ;
Action ::= CreateAction ;
 Action ::= DestroyAction ;
 Action ::= UninterpretedAction ;
 Action ::= CallAction ;
 Action ::= SendAction ;
 Action ::= ActionSequence ;
 Action ::= ReturnAction ;
 Action ::= TerminateAction ;
StateVertex ::= State ;
 StateVertex ::= Pseudostate ;
 StateVertex ::= SynchState ;
 StateVertex ::= StubState ;
ModelElement ::= Action ;
 ModelElement ::= Argument ;
 ModelElement ::= StateMachine ;
 ModelElement ::= Event ;
 ModelElement ::= StateVertex ;
 ModelElement ::= Transition ;
 ModelElement ::= Guard ;
 ModelElement ::= GeneralizableElement ;
 ModelElement ::= Namespace ;
 ModelElement ::= Feature ;
 ModelElement ::= Relationship ;
 ModelElement ::= Parameter ;
Classifier ::= Signal ;
String ::= string() ;
State ::= CompositeState ;
 State ::= SimpleState ;
 State ::= FinalState ;
--------------------uml::umldi-uc.bgf--------------------
Integer ::= integer() ;
Element ::= ModelElement ;
Namespace ::= Classifier ;
StructuralFeature ::= Attribute ;
GeneralizableElement ::= Classifier ;
 GeneralizableElement ::= Association ;
Relationship ::= Extend ;
 Relationship ::= Include ;
 Relationship ::= Generalization ;
 Relationship ::= Association ;
Feature ::= StructuralFeature ;
Instance ::= ComponentInstance ;
 Instance ::= NodeInstance ;
 Instance ::= UseCaseInstance ;
ModelElement ::= Instance ;
 ModelElement ::= AttributeLink ;
 ModelElement ::= Link ;
 ModelElement ::= LinkEnd ;
 ModelElement ::= ExtensionPoint ;
 ModelElement ::= GeneralizableElement ;
 ModelElement ::= Namespace ;
 ModelElement ::= Feature ;
 ModelElement ::= AssociationEnd ;
 ModelElement ::= Relationship ;
String ::= string() ;
Classifier ::= UseCase ;
 Classifier ::= Actor ;
--------------------uml::yuml.bgf--------------------
ColorableElement ::= ClassReference ;
 ColorableElement ::= Note ;
Integer ::= integer() ;
LocatedElement ::= Model ;
 LocatedElement ::= Class ;
 LocatedElement ::= ModelElement ;
 LocatedElement ::= ClassDefinition ;
 LocatedElement ::= Cardinality ;
 LocatedElement ::= ClassMember ;
Relationship ::= Association ;
 Relationship ::= Inheritance ;
 Relationship ::= NoteAssociation ;
ModelElement ::= ColorableElement ;
 ModelElement ::= Relationship ;
ClassMember ::= Attribute ;
 ClassMember ::= Method ;
String ::= string() ;
--------------------xml::rosendal.bgf--------------------
Integer ::= integer() ;
Node ::= Attribute ;
 Node ::= Text ;
 Node ::= Element ;
String ::= string() ;
--------------------xml::zhang-cordy.bgf--------------------
children ::= children_body repetition? ;
atttype ::= stringtype | tokenizedtype | enumeratedtype ;
mixed ::= pcdata_or_name | pcdata ;
nmtoken ::= name | dname ;
enumeratedtype ::= notationtype | enumeration ;
content ::= spaces chardata* spaces sub1_content* spaces ;
prolog ::= dtd_body ;
tag_content ::= stag IN content EX etag ;
cp_body ::= name | choice | seq ;
markupdecl ::= elementdecl | attlistdecl | entitydecl | notationdecl | pi | comment ;
space_or_newline ::= space | newline ;
pedef ::= entityvalue | external_id ;
not_quote ::= token ;
attvalue ::= stringlit | charlit | longstringlit | longcharlit ;
external_id ::= exid_sys | exid_pub ;
literal ::= charlit | stringlit ;
entityvalue ::= charlit | stringlit | longstringlit | longcharlit ;
cdata ::= token | comment ;
spaces ::= space_or_newline* ;
entitydecl ::= gedecl | pedecl ;
cp ::= cp_body repetition? ;
sp_external_id ::= spaces external_id ;
dtd_body ::= misc* doctypedecl? ;
sub2_content ::= element | reference | cdsect | pi | comment | regexp ;
misc ::= comment | pi | space | newline ;
sub1_content ::= spaces sub2_content spaces chardata* spaces ;
pitarget ::= name ;
sub1_pi ::= spaces token ;
not_dquote ::= token ;
attdef ::= spaces name spaces atttype spaces defaultdecl ;
program ::= prolog element ;
children_body ::= choice | seq ;
chardata ::= token ;
--------------------xquery::rosendal.bgf--------------------
Integer ::= integer() ;
String ::= string() ;
--------------------xslt::clark.bgf--------------------
instruction.category ::= apply-templates.element | apply-imports.element | call-template.element | element.element | attribute.element | text.element | processing-instruction.element | comment.element | copy.element | value-of.element | number.element | for-each.element | if.element | choose.element | variable.element | copy-of.element | message.element | fallback.element ;
top-level-extension ::= any ;
char.datatype ::= string() ;
qname-but-not-ncname.datatype ::= string() ;
qnames.datatype ::= string()* ;
expression.datatype ::= string() ;
wildcards.datatype ::= string()* ;
qname.datatype ::= string() ;
template.model ::= (instruction.category | literal-result-element | string())* ;
avt.datatype ::= string() ;
top-level-elements.model ::= (top-level-element.category | top-level-extension)* ;
top-level-element.category ::= include.element | strip-space.element | preserve-space.element | template.element | namespace-alias.element | attribute-set.element | variable.element | param.element | key.element | decimal-format.element | output.element ;
brace-avt.datatype ::= string() ;
any ::= (α | string() | any)* ;
expr-avt.datatype ::= string() ;
literal-result-element ::= literal-result-element.atts template.model ;
number.datatype ::= integer() ;
pattern.datatype ::= string() ;
extension.atts ::= α* ;
--------------------xslt::rosendal.bgf--------------------
Integer ::= integer() ;
XSLTNode ::= ApplyTemplates ;
 XSLTNode ::= If ;
 XSLTNode ::= Template ;
 XSLTNode ::= ValueOf ;
 XSLTNode ::= When ;
 XSLTNode ::= Choose ;
 XSLTNode ::= Otherwise ;
 XSLTNode ::= Sort ;
Otherwise ::= ε ;
Node ::= ElementNode ;
 Node ::= AttributeNode ;
String ::= string() ;
--------------------logo::sdf.bgf--------------------
Call ::= Id Exp* ;
Command ::= BasicCommand | FunctionDef | Call ;
Commands ::= Command* ;
Program ::= Commands ;
--------------------php::cordy.bgf--------------------
BitAndExpr ::= EqualityExpr BitAndEqualityExpr* ;
ConditionalOrExpr ::= ConditionalAndExpr ConditionalOrConditionalAndExpr* ;
TopStatement ::= FunctionDecl | ClassDecl | Statement | InterfaceDecl ;
HTMLSection ::= InlineHTML ;
IncDecExpr ::= IncDec* Primary IncDec* ;
ShiftExpr ::= CatExpr ShiftOpCatExpr* ;
InequalityOpShiftExpr ::= InequalityOp ShiftExpr ;
VarModifiers ::= VarModifier+ ;
ArrayPair ::= NL ArrayKey? ArrayValue ;
NumericConstant ::= number | Hexa | Octa ;
TVariable ::= SimpleVariableName ;
PHPCloseTagDocumentSection ::= PHPCloseTag HTMLSection PHPCloseTagDocumentSection? ;
Directive ::= id ;
EqualityExpr ::= InequalityExpr EqualityOpInequalityExpr* ;
EqualityOpInequalityExpr ::= EqualityOp InequalityExpr ;
EncapsedInlineHTML ::= tag_token_or_key ;
PHPSection ::= TopStatement* ;
popid ::= id ;
InlineHTMLStatement ::= PHPCloseTag InlineHTML PHPOpenTag ;
Name ::= id ;
StaticVariable ::= TVariable EqualsStaticScalar? ;
CompoundVariable ::= VariableName ;
AddOpMultExpr ::= AddOp MultExpr ;
ConditionalAndExpr ::= BitOrExpr ConditionalAndBitOrExpr* ;
ForEachPattern ::= ForEachKey? ForEachVar ;
MultExpr ::= NotExpr MultOpNotExpr* ;
PHPOpenTagPHPSection ::= PHPOpenTag PHPSection ;
CVar ::= ReferenceVariable ;
UnaryExpr ::= UnaryOp* IncDecExpr ;
InlineHTML ::= InlineHTMLtoken* ;
StaticScalar ::= Primary ;
MultOpNotExpr ::= MultOp NotExpr ;
AddExpr ::= MultExpr AddOpMultExpr* ;
VariableOrFunctionCall ::= ObjectCVar ;
InlineHTMLtoken ::= tag_token_or_key ;
Expr ::= LogicalOrExpr ;
InequalityExpr ::= ShiftExpr InequalityOpShiftExpr* ;
AssignOpAssignmentExpr ::= AssignOp AssignmentExpr ;
InstanceVariable ::= TVariable EqualsStaticScalar? ;
TernaryExpr ::= ConditionalOrExpr IfConditionalOrExpr* ;
Statement ::= ExprStatement | BlockStatement | IfStatement | WhileStatement | DoStatement | ForStatement | SwitchStatement | ControlStatement | GlobalStaticStatement | UnsetStatement | EchoStatement | PrintStatement | InlineHTMLStatement | ForEachStatement | NullStatement | DeclareStatement | TryStatement | ThrowStatement ;
CatExpr ::= AddExpr CatAddExpr* ;
InstanceExpr ::= UnaryExpr InstanceOfUnaryExpr? ;
token_or_key ::= token | key ;
ShiftOpCatExpr ::= ShiftOp CatExpr ;
ReferenceVariable ::= CompoundVariable VariableExtension* ;
LogicalXorExpr ::= LogicalAndExpr LogicalXorLogicalAndExpr* ;
BitOrExpr ::= BitXorExpr BitOrBitXorExpr* ;
program ::= Document ;
ClassName ::= id ;
ObjectCVar ::= ClassNameColonColon? CVar CallParams? ArrowObjectProperty* ;
BitXorExpr ::= BitAndExpr BitXorBitAndExpr* ;
LogicalAndExpr ::= AssignmentExpr LogicalAndAssignmentExpr* ;
AssignmentExpr ::= TernaryExpr AssignOpAssignmentExpr* ;
BlockStatement ::= Block ;
IdOrKey ::= id | key ;
LogicalOrExpr ::= LogicalXorExpr OrLogicalXorExpr* ;
TypeHint ::= id ;
--------------------python::indent-cordy.bgf--------------------
compoundtoken ::= linetoken | newline | comment ;
tab_space ::= tab | space ;
compoundtokensquare ::= linetoken | newline | comment ;
endofline ::= tab_space* comment? newline ;
linetoken ::= tab_space | nonblank_token ;
line ::= tab_space* linetoken* indent? endofline+ dedent* ;
program ::= line* ;
nonblank_token ::= compound | token ;
compoundtokenround ::= linetoken | newline | comment ;
--------------------python::sorochan-cordy.bgf--------------------
integer ::= integernumber | hexinteger | octinteger ;
argument ::= endofline* test argument_value? endofline* ;
and_test ::= not_test andop_and_test? ;
yield_stmt ::= yield_expr ;
flow_stmt ::= break_stmt | continue_stmt | return_stmt | raise_stmt | yield_stmt ;
except_test ::= test as_or_comma_test? ;
comp_op_comparison ::= endofline* comp_op endofline* comparison ;
expr ::= xor_expr orop_expr? ;
integerliteral ::= integer long? imag? ;
dotted_as_names ::= dotted_as_name+ ;
shiftop_shift_expr ::= endofline? shift_op endofline? shift_expr ;
or_test ::= and_test orop_or_test? ;
term ::= factor op_term* ;
test_list ::= test comma_test? comma_test? ;
old_test ::= or_test | old_lambdef ;
op_arith_expr ::= endofline* arith_op endofline* arith_expr ;
endofline ::= comment? newline ;
dotted_as_name ::= dotted_name as_id? ;
import_stmt ::= import_name | import_from ;
assign_value ::= yield_expr | testlist ;
import_as_name ::= endofline* id as_name? ;
and_expr ::= shift_expr andop_and_expr? ;
compound_stmt ::= if_stmt | while_stmt | for_stmt | try_stmt | with_stmt | funcdef | classdef | decorated ;
xor_expr ::= and_expr xorop_expr? ;
decorators ::= decorator+ ;
encoding_decl ::= id ;
fpdef_test ::= endofline* fpdef is_test? endofline? ;
more_stringliteral ::= endofline* stringliteral ;
shift_expr ::= arith_expr shiftop_shift_expr* ;
string ::= stringlit | charlit | longstringlit | longcharlit ;
factor ::= unary_op* power ;
stmt_or_newline ::= stmt | endofline ;
op_term ::= endofline* term_op endofline* term ;
comparison ::= expr comp_op_comparison? ;
arith_expr ::= term op_arith_expr* ;
file_input ::= stmt_or_newline* ;
power ::= atom trailer* exp_factor? ;
program ::= file_input ;
dotted_name ::= id dot_dotted_name? ;
small_stmt ::= expr_stmt | print_stmt | del_stmt | pass_stmt | flow_stmt | import_stmt | global_stmt | exec_stmt | assert_stmt ;
--------------------markup::atom.bgf--------------------
Integer ::= integer() ;
String ::= string() ;
--------------------markup::cml.bgf--------------------
_Integer ::= ε ;
_FloatMatrix ::= ε ;
AtomRefs_Element ::= _StringBuiltin ;
Integer ::= integer() ;
_Torsion ::= ε ;
_Float ::= ε ;
_Coordinate3 ::= ε ;
_FloatArray ::= ε ;
Any ::= _String ;
 Any ::= _Link ;
 Any ::= _Float ;
 Any ::= _Integer ;
 Any ::= _StringArray ;
 Any ::= _FloatArray ;
 Any ::= _IntegerArray ;
 Any ::= _FloatMatrix ;
 Any ::= _Coordinate2 ;
 Any ::= _Coordinate3 ;
 Any ::= _Angle ;
 Any ::= _Torsion ;
 Any ::= _List ;
 Any ::= Molecule ;
 Any ::= Formula ;
 Any ::= Atom ;
 Any ::= Atom_Array ;
 Any ::= Bond ;
 Any ::= Bond_Array ;
 Any ::= Electron ;
 Any ::= Reaction ;
 Any ::= Crystal ;
 Any ::= Sequence ;
 Any ::= Feature ;
_Coordinate2 ::= ε ;
_IntegerArray ::= ε ;
_Link ::= ε ;
_Angle ::= ε ;
String ::= string() ;
_String ::= ε ;
--------------------markup::ebxml.bgf--------------------
BusinessActivity ::= BusinessTransactionActivity ;
 BusinessActivity ::= CollaborationActivity ;
DocumentSecurity ::= DocumentEnvelope ;
 DocumentSecurity ::= Attachment ;
BusinessAction ::= RequestingBusinessActivity ;
 BusinessAction ::= RespondingBusinessActivity ;
String ::= string() ;
BusinessState ::= Start ;
 BusinessState ::= Fork ;
 BusinessState ::= Join ;
 BusinessState ::= CompletionState ;
 BusinessState ::= BusinessActivity ;
--------------------markup::docbook-touzet.bgf--------------------
String ::= string() ;
TitledElement ::= Article ;
 TitledElement ::= Sect1 ;
--------------------markup::docbook-walsh.bgf--------------------
personblurb.role.attrib ::= role.attrib ;
constant.role.attrib ::= role.attrib ;
lineannotation.role.attrib ::= role.attrib ;
abbrev.role.attrib ::= role.attrib ;
local.pubsnumber.attrib ::= ε ;
partinfo.role.attrib ::= role.attrib ;
mediaobject.attlist ::= common.attrib mediaobject.role.attrib local.mediaobject.attrib ;
local.glosslist.attrib ::= ε ;
msgexplan.role.attrib ::= role.attrib ;
local.seeseealso.attrib ::= ε ;
local.citebiblioid.attrib ::= ε ;
local.section.class ::= φ ;
screeninfo.attlist ::= common.attrib screeninfo.role.attrib local.screeninfo.attrib ;
local.legalnotice.attrib ::= ε ;
refmeta.attlist ::= common.attrib refmeta.role.attrib local.refmeta.attrib ;
mousebutton.attlist ::= moreinfo.attrib common.attrib mousebutton.role.attrib local.mousebutton.attrib ;
local.refentryinfo.attrib ::= ε ;
medialabel.role.attrib ::= role.attrib ;
local.synopsis.attrib ::= ε ;
othercredit.attlist ::= common.attrib othercredit.role.attrib local.othercredit.attrib ;
local.glossdef.attrib ::= ε ;
equation.content ::= alt? (graphic+) | (mediaobject+) ;
street.attlist ::= common.attrib street.role.attrib local.street.attrib ;
classname.attlist ::= common.attrib classname.role.attrib local.classname.attrib ;
local.bibliography.attrib ::= ε ;
local.constant.attrib ::= ε ;
local.guibutton.attrib ::= ε ;
qandaentry.role.attrib ::= role.attrib ;
refentrytitle.attlist ::= common.attrib refentrytitle.role.attrib local.refentrytitle.attrib ;
local.co.attrib ::= ε ;
local.method.synop.class ::= φ ;
local.blockquote.attrib ::= ε ;
refentryinfo.role.attrib ::= role.attrib ;
local.tocpart.attrib ::= ε ;
book.role.attrib ::= role.attrib ;
local.revision.attrib ::= ε ;
keyword.attlist ::= common.attrib keyword.role.attrib local.keyword.attrib ;
local.pagenums.attrib ::= ε ;
footnote.role.attrib ::= role.attrib ;
initializer.attlist ::= common.attrib initializer.role.attrib local.initializer.attrib ;
confdates.attlist ::= common.attrib confdates.role.attrib local.confdates.attrib ;
local.command.attrib ::= ε ;
confgroup.role.attrib ::= role.attrib ;
imageobject.role.attrib ::= role.attrib ;
revision.attlist ::= common.attrib revision.role.attrib local.revision.attrib ;
local.authorblurb.attrib ::= ε ;
local.audioobject.attrib ::= ε ;
application.role.attrib ::= role.attrib ;
sect1.role.attrib ::= role.attrib ;
equation.role.attrib ::= role.attrib ;
local.primsecter.attrib ::= ε ;
refsect2info.role.attrib ::= role.attrib ;
toc.role.attrib ::= role.attrib ;
sgmltag.role.attrib ::= role.attrib ;
local.confdates.attrib ::= ε ;
appendix.attlist ::= label.attrib status.attrib common.attrib appendix.role.attrib local.appendix.attrib ;
refclass.role.attrib ::= role.attrib ;
copyright.attlist ::= common.attrib copyright.role.attrib local.copyright.attrib ;
interfacename.role.attrib ::= role.attrib ;
acronym.role.attrib ::= role.attrib ;
refdescriptor.role.attrib ::= role.attrib ;
local.refsectioninfo.attrib ::= ε ;
local.coref.attrib ::= ε ;
bibliocomponent.mix ::= abbrev | abstract | address | artpagenums | author | authorgroup | authorinitials | bibliomisc | biblioset | collab | confgroup | contractnum | contractsponsor | copyright | corpauthor | corpname | date | edition | editor | invpartnumber | isbn | issn | issuenum | orgname | biblioid | citebiblioid | bibliosource | bibliorelation | bibliocoverage | othercredit | pagenums | printhistory | productname | productnumber | pubdate | publisher | publishername | pubsnumber | releaseinfo | revhistory | seriesvolnums | subtitle | title | titleabbrev | volumenum | citetitle | personname | person.ident.mix | ndxterm.class | local.bibliocomponent.mix ;
refentry.role.attrib ::= role.attrib ;
local.simplemsgentry.attrib ::= ε ;
local.refclass.attrib ::= ε ;
refentry.attlist ::= status.attrib common.attrib refentry.role.attrib local.refentry.attrib ;
pagenums.attlist ::= common.attrib pagenums.role.attrib local.pagenums.attrib ;
informalfigure.role.attrib ::= role.attrib ;
action.role.attrib ::= role.attrib ;
local.indexdivcomponent.mix ::= φ ;
areaset.role.attrib ::= role.attrib ;
corpauthor.attlist ::= common.attrib corpauthor.role.attrib local.corpauthor.attrib ;
msginfo.role.attrib ::= role.attrib ;
forms.hook ::= φ ;
msginfo.attlist ::= common.attrib msginfo.role.attrib local.msginfo.attrib ;
tocentry.role.attrib ::= role.attrib ;
seriesvolnums.role.attrib ::= role.attrib ;
local.title.char.mix ::= φ ;
abstract.role.attrib ::= role.attrib ;
glossary.role.attrib ::= role.attrib ;
firstterm.role.attrib ::= role.attrib ;
refsect1.role.attrib ::= role.attrib ;
primaryie.attlist ::= linkends.attrib common.attrib primsecterie.role.attrib local.primsecterie.attrib ;
guilabel.role.attrib ::= role.attrib ;
tocchap.attlist ::= label.attrib common.attrib tocchap.role.attrib local.tocchap.attrib ;
local.book.attrib ::= ε ;
seealso.attlist ::= common.attrib seeseealso.role.attrib local.seeseealso.attrib ;
citerefentry.role.attrib ::= role.attrib ;
local.itermset.attrib ::= ε ;
local.orgdiv.attrib ::= ε ;
revhistory.role.attrib ::= role.attrib ;
foreignphrase.role.attrib ::= role.attrib ;
destructorsynopsis.role.attrib ::= role.attrib ;
area.role.attrib ::= role.attrib ;
local.msgmain.attrib ::= ε ;
classsynopsis.role.attrib ::= role.attrib ;
refsynopsisdiv.role.attrib ::= role.attrib ;
local.index.class ::= φ ;
link.char.class ::= link | olink | ulink | local.link.char.class ;
local.chapter.class ::= φ ;
admon.class ::= caution | important | note | tip | warning | local.admon.class ;
indexinfo.attlist ::= common.attrib indexinfo.role.attrib local.indexinfo.attrib ;
local.cmdsynopsis.attrib ::= ε ;
productnumber.role.attrib ::= role.attrib ;
local.glossdef.mix ::= φ ;
local.setinfo.attrib ::= ε ;
local.refsect3info.attrib ::= ε ;
objectinfo.role.attrib ::= role.attrib ;
editor.attlist ::= common.attrib editor.role.attrib local.editor.attrib ;
inlinemediaobject.role.attrib ::= role.attrib ;
screen.attlist ::= width.attrib linespecific.attrib common.attrib screen.role.attrib local.screen.attrib ;
accel.role.attrib ::= role.attrib ;
caution.attlist ::= common.attrib admon.role.attrib local.admon.attrib ;
citebiblioid.attlist ::= biblio.class.attrib common.attrib citebiblioid.role.attrib local.citebiblioid.attrib ;
figure.role.attrib ::= role.attrib ;
local.pob.attrib ::= ε ;
honorific.role.attrib ::= role.attrib ;
local.funcsynopsisinfo.attrib ::= ε ;
local.citation.attrib ::= ε ;
partintro.role.attrib ::= role.attrib ;
paramdef.attlist ::= common.attrib paramdef.role.attrib local.paramdef.attrib ;
funcsynopsis.attlist ::= label.attrib common.attrib funcsynopsis.role.attrib local.funcsynopsis.attrib ;
local.equation.attrib ::= ε ;
seg.role.attrib ::= role.attrib ;
local.part.attrib ::= ε ;
idreq.common.attrib ::= idreq.attrib lang.attrib remap.attrib xreflabel.attrib revisionflag.attrib effectivity.attrib local.common.attrib ;
local.methodsynopsis.attrib ::= ε ;
step.role.attrib ::= role.attrib ;
local.publisher.attrib ::= ε ;
biblioset.role.attrib ::= role.attrib ;
local.screenco.attrib ::= ε ;
command.attlist ::= moreinfo.attrib common.attrib command.role.attrib local.command.attrib ;
reference.attlist ::= label.attrib status.attrib common.attrib reference.role.attrib local.reference.attrib ;
local.variablelist.attrib ::= ε ;
local.honorific.attrib ::= ε ;
imageobjectco.attlist ::= common.attrib imageobjectco.role.attrib local.imageobjectco.attrib ;
simplemsgentry.role.attrib ::= role.attrib ;
year.role.attrib ::= role.attrib ;
local.highlights.mix ::= φ ;
local.keycode.attrib ::= ε ;
firstname.role.attrib ::= role.attrib ;
local.orgname.attrib ::= ε ;
dedication.role.attrib ::= role.attrib ;
interface.attlist ::= moreinfo.attrib common.attrib interface.role.attrib local.interface.attrib ;
local.graphics.attrib ::= ε ;
local.refclass.char.mix ::= φ ;
releaseinfo.attlist ::= common.attrib releaseinfo.role.attrib local.releaseinfo.attrib ;
local.areaset.attrib ::= ε ;
trademark.role.attrib ::= role.attrib ;
guiicon.attlist ::= moreinfo.attrib common.attrib guiicon.role.attrib local.guiicon.attrib ;
footnoteref.attlist ::= linkendreq.attrib label.attrib common.attrib footnoteref.role.attrib local.footnoteref.attrib ;
varname.attlist ::= common.attrib varname.role.attrib local.varname.attrib ;
local.guimenu.attrib ::= ε ;
guibutton.role.attrib ::= role.attrib ;
local.firstname.attrib ::= ε ;
bibliomisc.role.attrib ::= role.attrib ;
admon.mix ::= list.class | linespecific.class | synop.class | para.class | informal.class | formal.class | procedure | sidebar | anchor | bridgehead | remark | ndxterm.class | beginpage | local.admon.mix ;
msgsub.role.attrib ::= role.attrib ;
refname.role.attrib ::= role.attrib ;
msgsub.attlist ::= common.attrib msgsub.role.attrib local.msgsub.attrib ;
xref.role.attrib ::= role.attrib ;
local.docinfo.char.mix ::= φ ;
glossary.attlist ::= status.attrib common.attrib glossary.role.attrib local.glossary.attrib ;
msgexplan.attlist ::= common.attrib msgexplan.role.attrib local.msgexplan.attrib ;
local.refsynopsisdiv.attrib ::= ε ;
tabentry.mix ::= list.class | admon.class | linespecific.class | para.class | graphic | mediaobject | local.tabentry.mix ;
local.affiliation.attrib ::= ε ;
informalexample.role.attrib ::= role.attrib ;
local.common.attrib ::= ε ;
local.varname.attrib ::= ε ;
collabname.attlist ::= common.attrib collabname.role.attrib local.collabname.attrib ;
subtitle.attlist ::= common.attrib subtitle.role.attrib local.subtitle.attrib ;
keycap.role.attrib ::= role.attrib ;
sectioninfo.role.attrib ::= role.attrib ;
local.beginpage.attrib ::= ε ;
collab.role.attrib ::= role.attrib ;
issuenum.role.attrib ::= role.attrib ;
local.anchor.attrib ::= ε ;
subscript.attlist ::= common.attrib ssscript.role.attrib local.ssscript.attrib ;
local.artpagenums.attrib ::= ε ;
local.jobtitle.attrib ::= ε ;
local.refsect2.attrib ::= ε ;
issn.attlist ::= common.attrib issn.role.attrib local.issn.attrib ;
local.section.attrib ::= ε ;
indexinfo.role.attrib ::= role.attrib ;
local.ackno.attrib ::= ε ;
local.link.char.class ::= φ ;
quote.role.attrib ::= role.attrib ;
local.pubdate.attrib ::= ε ;
token.role.attrib ::= role.attrib ;
sect1info.attlist ::= common.attrib sect1info.role.attrib local.sect1info.attrib ;
toclevel4.role.attrib ::= role.attrib ;
synopfragmentref.attlist ::= linkendreq.attrib common.attrib synopfragmentref.role.attrib local.synopfragmentref.attrib ;
errorcode.role.attrib ::= role.attrib ;
local.ooclass.attrib ::= ε ;
itermset.role.attrib ::= role.attrib ;
refentryinfo.attlist ::= common.attrib refentryinfo.role.attrib local.refentryinfo.attrib ;
seeseealso.role.attrib ::= role.attrib ;
screenshot.role.attrib ::= role.attrib ;
local.initializer.attrib ::= ε ;
formal.class ::= equation | example | figure | table | local.formal.class ;
citation.attlist ::= common.attrib citation.role.attrib local.citation.attrib ;
local.qandaset.mix ::= φ ;
caption.attlist ::= common.attrib caption.role.attrib local.caption.attrib ;
inlineequation.attlist ::= common.attrib inlineequation.role.attrib local.inlineequation.attrib ;
local.figure.mix ::= φ ;
confdates.role.attrib ::= role.attrib ;
local.publishername.attrib ::= ε ;
userinput.role.attrib ::= role.attrib ;
structname.attlist ::= common.attrib structname.role.attrib local.structname.attrib ;
para.attlist ::= common.attrib para.role.attrib local.para.attrib ;
userinput.attlist ::= moreinfo.attrib common.attrib userinput.role.attrib local.userinput.attrib ;
linespecific.class ::= literallayout | programlisting | programlistingco | screen | screenco | screenshot | local.linespecific.class ;
exceptionname.role.attrib ::= role.attrib ;
computeroutput.attlist ::= moreinfo.attrib common.attrib computeroutput.role.attrib local.computeroutput.attrib ;
keywordset.role.attrib ::= role.attrib ;
local.sect4.attrib ::= ε ;
function.attlist ::= moreinfo.attrib common.attrib function.role.attrib local.function.attrib ;
bookcomponent.title.content ::= title subtitle? titleabbrev? ;
modifier.attlist ::= common.attrib modifier.role.attrib local.modifier.attrib ;
local.guiicon.attrib ::= ε ;
local.seealsoie.attrib ::= ε ;
local.contrib.attrib ::= ε ;
local.classsynopsisinfo.attrib ::= ε ;
local.other.char.class ::= φ ;
local.othername.attrib ::= ε ;
local.indexterm.attrib ::= ε ;
local.symbol.attrib ::= ε ;
glossaryinfo.attlist ::= common.attrib glossaryinfo.role.attrib local.glossaryinfo.attrib ;
local.info.class ::= φ ;
local.sect5info.attrib ::= ε ;
refsect1info.attlist ::= common.attrib refsect1info.role.attrib local.refsect1info.attrib ;
colophon.role.attrib ::= role.attrib ;
wordasword.attlist ::= common.attrib wordasword.role.attrib local.wordasword.attrib ;
local.sidebarinfo.attrib ::= ε ;
jobtitle.role.attrib ::= role.attrib ;
local.classsynopsis.attrib ::= ε ;
local.ooexception.attrib ::= ε ;
classsynopsisinfo.attlist ::= linespecific.attrib common.attrib classsynopsisinfo.role.attrib local.classsynopsisinfo.attrib ;
local.list.class ::= φ ;
seealsoie.role.attrib ::= role.attrib ;
refsynopsisdivinfo.attlist ::= common.attrib refsynopsisdivinfo.role.attrib local.refsynopsisdivinfo.attrib ;
refentry.class ::= refentry | local.refentry.class ;
local.collab.attrib ::= ε ;
local.keycombo.attrib ::= ε ;
local.toclevel1.attrib ::= ε ;
local.exceptionname.attrib ::= ε ;
volumenum.role.attrib ::= role.attrib ;
local.sidebar.attrib ::= ε ;
other.char.class ::= remark | subscript | superscript | local.other.char.class ;
local.sect2info.attrib ::= ε ;
local.funcprototype.attrib ::= ε ;
alt.role.attrib ::= role.attrib ;
local.otheraddr.attrib ::= ε ;
sect.title.content ::= title subtitle? titleabbrev? ;
local.footnote.mix ::= φ ;
local.para.mix ::= φ ;
refname.attlist ::= common.attrib refname.role.attrib local.refname.attrib ;
warning.attlist ::= common.attrib admon.role.attrib local.admon.attrib ;
local.ssscript.attrib ::= ε ;
contrib.attlist ::= common.attrib contrib.role.attrib local.contrib.attrib ;
subjectterm.attlist ::= common.attrib subjectterm.role.attrib local.subjectterm.attrib ;
local.procedure.attrib ::= ε ;
errorname.role.attrib ::= role.attrib ;
state.attlist ::= common.attrib state.role.attrib local.state.attrib ;
local.oointerface.attrib ::= ε ;
lineage.role.attrib ::= role.attrib ;
foreignphrase.attlist ::= common.attrib foreignphrase.role.attrib local.foreignphrase.attrib ;
local.phrase.attrib ::= ε ;
publishername.role.attrib ::= role.attrib ;
funcsynopsisinfo.role.attrib ::= role.attrib ;
imagedata.role.attrib ::= role.attrib ;
guisubmenu.role.attrib ::= role.attrib ;
local.modespec.attrib ::= ε ;
indexdiv.role.attrib ::= role.attrib ;
sect2info.role.attrib ::= role.attrib ;
remark.attlist ::= common.attrib remark.role.attrib local.remark.attrib ;
indexdiv.attlist ::= common.attrib indexdiv.role.attrib local.indexdiv.attrib ;
bibliodiv.attlist ::= status.attrib common.attrib bibliodiv.role.attrib local.bibliodiv.attrib ;
yesorno ::= string() ;
article.role.attrib ::= role.attrib ;
option.attlist ::= common.attrib option.role.attrib local.option.attrib ;
toclevel1.attlist ::= common.attrib toclevel1.role.attrib local.toclevel1.attrib ;
objectinfo.attlist ::= common.attrib objectinfo.role.attrib local.objectinfo.attrib ;
gen.char.class ::= abbrev | acronym | citation | citerefentry | citetitle | emphasis | firstterm | foreignphrase | glossterm | footnote | phrase | quote | trademark | wordasword | personname | local.gen.char.class ;
local.acronym.attrib ::= ε ;
initializer.role.attrib ::= role.attrib ;
structname.role.attrib ::= role.attrib ;
para.role.attrib ::= role.attrib ;
book.class ::= book | local.book.class ;
optional.attlist ::= common.attrib optional.role.attrib local.optional.attrib ;
personname.attlist ::= common.attrib personname.role.attrib local.personname.attrib ;
local.keysym.attrib ::= ε ;
textdata.role.attrib ::= role.attrib ;
local.bibliomset.attrib ::= ε ;
local.step.attrib ::= ε ;
qandadiv.attlist ::= common.attrib qandadiv.role.attrib local.qandadiv.attrib ;
local.listitem.attrib ::= ε ;
sect2.role.attrib ::= role.attrib ;
calloutlist.role.attrib ::= role.attrib ;
varlistentry.role.attrib ::= role.attrib ;
local.funcsynopsis.attrib ::= ε ;
equation.attlist ::= label.attrib common.attrib equation.role.attrib local.equation.attrib ;
local.citetitle.attrib ::= ε ;
local.imageobjectco.attrib ::= ε ;
msgorig.attlist ::= common.attrib msgorig.role.attrib local.msgorig.attrib ;
highlights.role.attrib ::= role.attrib ;
errortype.attlist ::= common.attrib errortype.role.attrib local.errortype.attrib ;
mediaobject.mix ::= videoobject | audioobject | imageobject | textobject | local.mediaobject.mix ;
highlights.attlist ::= common.attrib highlights.role.attrib local.highlights.attrib ;
local.methodparam.attrib ::= ε ;
year.attlist ::= common.attrib year.role.attrib local.year.attrib ;
local.replaceable.attrib ::= ε ;
local.inlinegraphic.attrib ::= ε ;
errortext.role.attrib ::= role.attrib ;
conftitle.role.attrib ::= role.attrib ;
common.table.attribs ::= bodyatt secur ;
refnamediv.attlist ::= common.attrib refnamediv.role.attrib local.refnamediv.attrib ;
inlinegraphic.role.attrib ::= role.attrib ;
tocback.role.attrib ::= role.attrib ;
guimenuitem.role.attrib ::= role.attrib ;
revnumber.role.attrib ::= role.attrib ;
holder.role.attrib ::= role.attrib ;
inlinegraphic.attlist ::= graphics.attrib common.attrib inlinegraphic.role.attrib local.inlinegraphic.attrib ;
tocback.attlist ::= label.attrib linkend.attrib pagenum.attrib common.attrib tocback.role.attrib local.tocback.attrib ;
local.firstterm.attrib ::= ε ;
pubdate.role.attrib ::= role.attrib ;
guibutton.attlist ::= moreinfo.attrib common.attrib guibutton.role.attrib local.guibutton.attrib ;
glosslist.role.attrib ::= role.attrib ;
local.type.attrib ::= ε ;
mediaobject.role.attrib ::= role.attrib ;
local.structfield.attrib ::= ε ;
local.appendix.class ::= φ ;
keysysm.role.attrib ::= role.attrib ;
synop.class ::= synopsis | cmdsynopsis | funcsynopsis | classsynopsis | fieldsynopsis | method.synop.class | local.synop.class ;
local.admon.attrib ::= ε ;
tbl.table-titles.mdl ::= titles ;
refsect2.role.attrib ::= role.attrib ;
member.role.attrib ::= role.attrib ;
firstterm.attlist ::= linkend.attrib common.attrib firstterm.role.attrib local.firstterm.attrib ;
ooclass.role.attrib ::= role.attrib ;
component.mix ::= list.class | admon.class | linespecific.class | synop.class | para.class | informal.class | formal.class | compound.class | genobj.class | descobj.class | ndxterm.class | beginpage | local.component.mix ;
local.refinline.char.mix ::= φ ;
void.role.attrib ::= role.attrib ;
docinfo.char.class ::= author | authorinitials | corpauthor | modespec | othercredit | productname | productnumber | revhistory | local.docinfo.char.class ;
local.bibliographyinfo.attrib ::= ε ;
blockquote.role.attrib ::= role.attrib ;
blockquote.attlist ::= common.attrib blockquote.role.attrib local.blockquote.attrib ;
local.qandadiv.attrib ::= ε ;
issuenum.attlist ::= common.attrib issuenum.role.attrib local.issuenum.attrib ;
collab.attlist ::= common.attrib collab.role.attrib local.collab.attrib ;
local.msgorig.attrib ::= ε ;
street.role.attrib ::= role.attrib ;
classname.role.attrib ::= role.attrib ;
remark.role.attrib ::= role.attrib ;
local.street.attrib ::= ε ;
emphasis.role.attrib ::= role.attrib ;
local.literal.attrib ::= ε ;
appendixinfo.role.attrib ::= role.attrib ;
local.revdescription.mix ::= φ ;
synopfragment.attlist ::= idreq.common.attrib synopfragment.role.attrib local.synopfragment.attrib ;
label.attlist ::= common.attrib label.role.attrib local.label.attrib ;
affiliation.attlist ::= common.attrib affiliation.role.attrib local.affiliation.attrib ;
epigraph.attlist ::= common.attrib epigraph.role.attrib local.epigraph.attrib ;
bodyatt ::= label.attrib ;
tertiaryie.attlist ::= linkends.attrib common.attrib primsecterie.role.attrib local.primsecterie.attrib ;
local.textdata.attrib ::= ε ;
itermset.attlist ::= common.attrib itermset.role.attrib local.itermset.attrib ;
olink.role.attrib ::= role.attrib ;
graphic.attlist ::= graphics.attrib common.attrib graphic.role.attrib local.graphic.attrib ;
prompt.role.attrib ::= role.attrib ;
local.answer.attrib ::= ε ;
optional.role.attrib ::= role.attrib ;
revremark.attlist ::= common.attrib revremark.role.attrib local.revremark.attrib ;
personname.role.attrib ::= role.attrib ;
local.partinfo.attrib ::= ε ;
local.othercredit.attrib ::= ε ;
indexentry.attlist ::= common.attrib indexentry.role.attrib local.indexentry.attrib ;
local.inlineequation.attrib ::= ε ;
confgroup.attlist ::= common.attrib confgroup.role.attrib local.confgroup.attrib ;
primsecter.role.attrib ::= role.attrib ;
glossdef.mix ::= list.class | linespecific.class | synop.class | para.class | informal.class | formal.class | remark | ndxterm.class | beginpage | local.glossdef.mix ;
glossseealso.role.attrib ::= role.attrib ;
calloutlist.attlist ::= common.attrib calloutlist.role.attrib local.calloutlist.attrib ;
refsect3info.role.attrib ::= role.attrib ;
shortcut.role.attrib ::= role.attrib ;
shortaffil.attlist ::= common.attrib shortaffil.role.attrib local.shortaffil.attrib ;
partcontent.mix ::= appendix.class | chapter.class | nav.class | article.class | preface | refentry.class | reference | local.partcontent.mix ;
glossdef.role.attrib ::= role.attrib ;
local.mediaobject.mix ::= φ ;
local.constructorsynopsis.attrib ::= ε ;
msgmain.attlist ::= common.attrib msgmain.role.attrib local.msgmain.attrib ;
anchor.role.attrib ::= role.attrib ;
contractnum.role.attrib ::= role.attrib ;
local.varlistentry.attrib ::= ε ;
local.authorgroup.attrib ::= ε ;
varname.role.attrib ::= role.attrib ;
local.formalpara.attrib ::= ε ;
listitem.role.attrib ::= role.attrib ;
segmentedlist.attlist ::= common.attrib segmentedlist.role.attrib local.segmentedlist.attrib ;
subject.role.attrib ::= role.attrib ;
manvolnum.attlist ::= common.attrib namvolnum.role.attrib local.manvolnum.attrib ;
local.sbr.attrib ::= ε ;
bibliomixed.attlist ::= common.attrib bibliomixed.role.attrib local.bibliomixed.attrib ;
articleinfo.attlist ::= common.attrib articleinfo.role.attrib local.articleinfo.attrib ;
tbl.row.mdl ::= (entry | entrytbl)+ ;
local.revnumber.attrib ::= ε ;
local.notation.class ::= φ ;
local.msgtext.attrib ::= ε ;
refsect1.attlist ::= status.attrib common.attrib refsect1.role.attrib local.refsect1.attrib ;
state.role.attrib ::= role.attrib ;
local.simplelist.attrib ::= ε ;
postcode.role.attrib ::= role.attrib ;
bibliomset.role.attrib ::= role.attrib ;
sidebarinfo.role.attrib ::= role.attrib ;
seglistitem.role.attrib ::= role.attrib ;
local.prompt.attrib ::= ε ;
local.admon.class ::= φ ;
sect2info.attlist ::= common.attrib sect2info.role.attrib local.sect2info.attrib ;
quote.attlist ::= common.attrib quote.role.attrib local.quote.attrib ;
toclevel5.role.attrib ::= role.attrib ;
local.ulink.attrib ::= ε ;
local.trademark.attrib ::= ε ;
local.screen.attrib ::= ε ;
toclevel2.attlist ::= common.attrib toclevel2.role.attrib local.toclevel2.attrib ;
affiliation.role.attrib ::= role.attrib ;
epigraph.role.attrib ::= role.attrib ;
local.msgentry.attrib ::= ε ;
local.primsecterie.attrib ::= ε ;
local.interface.attrib ::= ε ;
local.article.class ::= φ ;
local.link.attrib ::= ε ;
question.role.attrib ::= role.attrib ;
local.confnum.attrib ::= ε ;
indexentry.role.attrib ::= role.attrib ;
modespec.role.attrib ::= role.attrib ;
section.class ::= section | local.section.class ;
local.substeps.attrib ::= ε ;
local.objectdata.attrib ::= ε ;
imageobject.attlist ::= common.attrib imageobject.role.attrib local.imageobject.attrib ;
oointerface.attlist ::= common.attrib oointerface.role.attrib local.oointerface.attrib ;
title.attlist ::= pagenum.attrib common.attrib title.role.attrib local.title.attrib ;
local.toclevel4.attrib ::= ε ;
lot.attlist ::= label.attrib common.attrib lot.role.attrib local.lot.attrib ;
keycode.role.attrib ::= role.attrib ;
local.fax.attrib ::= ε ;
varlistentry.attlist ::= common.attrib varlistentry.role.attrib local.varlistentry.attrib ;
local.function.attrib ::= ε ;
local.divcomponent.mix ::= φ ;
refsect2info.attlist ::= common.attrib refsect2info.role.attrib local.refsect2info.attrib ;
printhistory.role.attrib ::= role.attrib ;
structfield.role.attrib ::= role.attrib ;
systemitem.role.attrib ::= role.attrib ;
qandaset.mix ::= list.class | admon.class | linespecific.class | synop.class | para.class | informal.class | formal.class | procedure | genobj.class | ndxterm.class | local.qandaset.mix ;
local.olink.attrib ::= ε ;
answer.role.attrib ::= role.attrib ;
local.partcontent.mix ::= φ ;
inlineobj.char.class ::= inlinegraphic | inlinemediaobject | inlineequation | local.inlineobj.char.class ;
local.descobj.class ::= φ ;
beginpage.role.attrib ::= role.attrib ;
firstname.attlist ::= common.attrib firstname.role.attrib local.firstname.attrib ;
simpara.role.attrib ::= role.attrib ;
effectivity.attrib ::= arch.attrib condition.attrib conformance.attrib os.attrib revision.attrib security.attrib userlevel.attrib vendor.attrib local.effectivity.attrib ;
footnoteref.role.attrib ::= role.attrib ;
local.country.attrib ::= ε ;
local.revhistory.attrib ::= ε ;
segmentedlist.role.attrib ::= role.attrib ;
date.role.attrib ::= role.attrib ;
local.synopfragment.attrib ::= ε ;
authorblurb.attlist ::= common.attrib authorblurb.role.attrib local.authorblurb.attrib ;
local.chapterinfo.attrib ::= ε ;
guimenuitem.attlist ::= moreinfo.attrib common.attrib guimenuitem.role.attrib local.guimenuitem.attrib ;
volumenum.attlist ::= common.attrib volumenum.role.attrib local.volumenum.attrib ;
tocentry.attlist ::= linkend.attrib pagenum.attrib common.attrib tocentry.role.attrib local.tocentry.attrib ;
divcomponent.mix ::= list.class | admon.class | linespecific.class | synop.class | para.class | informal.class | formal.class | compound.class | genobj.class | descobj.class | ndxterm.class | beginpage | forms.hook | local.divcomponent.mix ;
local.biblioset.attrib ::= ε ;
local.shortcut.attrib ::= ε ;
local.volumenum.attrib ::= ε ;
biblioentry.role.attrib ::= role.attrib ;
local.shortaffil.attrib ::= ε ;
local.sect2.attrib ::= ε ;
local.seg.attrib ::= ε ;
formalobject.title.content ::= title titleabbrev? ;
local.qandaentry.attrib ::= ε ;
local.subtitle.attrib ::= ε ;
refsynopsisdiv.attlist ::= common.attrib refsynopsisdiv.role.attrib local.refsynopsisdiv.attrib ;
superscript.attlist ::= common.attrib ssscript.role.attrib local.ssscript.attrib ;
otheraddr.attlist ::= common.attrib otheraddr.role.attrib local.otheraddr.attrib ;
local.para.char.mix ::= φ ;
footnote.mix ::= list.class | linespecific.class | synop.class | para.class | informal.class | local.footnote.mix ;
glossterm.role.attrib ::= role.attrib ;
confsponsor.role.attrib ::= role.attrib ;
sidebar.mix ::= list.class | admon.class | linespecific.class | synop.class | para.class | informal.class | formal.class | procedure | genobj.class | ndxterm.class | beginpage | local.sidebar.mix ;
local.postcode.attrib ::= ε ;
simplesect.attlist ::= common.attrib simplesect.role.attrib local.simplesect.attrib ;
tbl.hdft.mdl ::= colspec* row+ ;
co.role.attrib ::= role.attrib ;
term.role.attrib ::= role.attrib ;
example.role.attrib ::= role.attrib ;
local.authorinitials.attrib ::= ε ;
inlinemediaobject.attlist ::= common.attrib inlinemediaobject.role.attrib local.inlinemediaobject.attrib ;
substeps.role.attrib ::= role.attrib ;
section.attlist ::= label.attrib status.attrib common.attrib section.role.attrib local.section.attrib ;
local.systemitem.attrib ::= ε ;
local.example.attrib ::= ε ;
screenco.attlist ::= common.attrib screenco.role.attrib local.screenco.attrib ;
local.label.attrib ::= ε ;
sect3.role.attrib ::= role.attrib ;
legalnotice.attlist ::= common.attrib legalnotice.role.attrib local.legalnotice.attrib ;
methodparam.role.attrib ::= role.attrib ;
funcparams.role.attrib ::= role.attrib ;
local.paramdef.attrib ::= ε ;
contractsponsor.attlist ::= common.attrib contractsponsor.role.attrib local.contractsponsor.attrib ;
local.refdescriptor.attrib ::= ε ;
chapter.class ::= chapter | local.chapter.class ;
errortype.role.attrib ::= role.attrib ;
msgorig.role.attrib ::= role.attrib ;
local.indexdiv.attrib ::= ε ;
local.book.class ::= φ ;
local.optional.attrib ::= ε ;
funcdef.attlist ::= common.attrib funcdef.role.attrib local.funcdef.attrib ;
local.screenshot.attrib ::= ε ;
answer.attlist ::= common.attrib answer.role.attrib local.answer.attrib ;
blockinfo.role.attrib ::= role.attrib ;
jobtitle.attlist ::= common.attrib jobtitle.role.attrib local.jobtitle.attrib ;
local.refsect1info.attrib ::= ε ;
local.tocentry.attrib ::= ε ;
corpauthor.role.attrib ::= role.attrib ;
local.textobject.attrib ::= ε ;
local.term.attrib ::= ε ;
guiicon.role.attrib ::= role.attrib ;
authorblurb.role.attrib ::= role.attrib ;
literal.role.attrib ::= role.attrib ;
seeie.role.attrib ::= role.attrib ;
setindex.attlist ::= common.attrib indexes.role.attrib local.indexes.attrib ;
local.property.attrib ::= ε ;
literal.attlist ::= moreinfo.attrib common.attrib literal.role.attrib local.literal.attrib ;
seeie.attlist ::= linkend.attrib common.attrib seeie.role.attrib local.seeie.attrib ;
date.attlist ::= common.attrib date.role.attrib local.date.attrib ;
revnumber.attlist ::= common.attrib revnumber.role.attrib local.revnumber.attrib ;
holder.attlist ::= common.attrib holder.role.attrib local.holder.attrib ;
markup.role.attrib ::= role.attrib ;
coref.role.attrib ::= role.attrib ;
seriesvolnums.attlist ::= common.attrib seriesvolnums.role.attrib local.seriesvolnums.attrib ;
msglevel.attlist ::= common.attrib msglevel.role.attrib local.msglevel.attrib ;
refsect3.role.attrib ::= role.attrib ;
guimenu.role.attrib ::= role.attrib ;
local.chapter.attrib ::= ε ;
refsect2.attlist ::= status.attrib common.attrib refsect2.role.attrib local.refsect2.attrib ;
local.mediaobjectco.attrib ::= ε ;
guilabel.attlist ::= moreinfo.attrib common.attrib guilabel.role.attrib local.guilabel.attrib ;
local.state.attrib ::= ε ;
country.attlist ::= common.attrib country.role.attrib local.country.attrib ;
audioobject.attlist ::= common.attrib audioobject.role.attrib local.audioobject.attrib ;
method.synop.class ::= constructorsynopsis | destructorsynopsis | methodsynopsis | local.method.synop.class ;
synopsis.attlist ::= label.attrib linespecific.attrib common.attrib synopsis.role.attrib local.synopsis.attrib ;
secondaryie.attlist ::= linkends.attrib common.attrib primsecterie.role.attrib local.primsecterie.attrib ;
orderedlist.role.attrib ::= role.attrib ;
postcode.attlist ::= common.attrib postcode.role.attrib local.postcode.attrib ;
informal.class ::= address | blockquote | graphic | graphicco | mediaobject | mediaobjectco | informalequation | informalexample | informalfigure | informaltable | local.informal.class ;
lineage.attlist ::= common.attrib lineage.role.attrib local.lineage.attrib ;
local.refcomponent.mix ::= φ ;
local.abbrev.attrib ::= ε ;
attribution.role.attrib ::= role.attrib ;
sect3info.role.attrib ::= role.attrib ;
attribution.attlist ::= common.attrib attribution.role.attrib local.attribution.attrib ;
chapterinfo.role.attrib ::= role.attrib ;
titleabbrev.role.attrib ::= role.attrib ;
emphasis.attlist ::= common.attrib emphasis.role.attrib local.emphasis.attrib ;
revdescription.role.attrib ::= role.attrib ;
local.tocback.attrib ::= ε ;
local.methodname.attrib ::= ε ;
toclevel3.attlist ::= common.attrib toclevel3.role.attrib local.toclevel3.attrib ;
div.title.content ::= title subtitle? titleabbrev? ;
programlistingco.role.attrib ::= role.attrib ;
hardware.role.attrib ::= role.attrib ;
local.set.attrib ::= ε ;
refcomponent.mix ::= list.class | admon.class | linespecific.class | synop.class | para.class | informal.class | formal.class | compound.class | genobj.class | descobj.class | ndxterm.class | beginpage | local.refcomponent.mix ;
bibliography.attlist ::= status.attrib common.attrib bibliography.role.attrib local.bibliography.attrib ;
funcprototype.role.attrib ::= role.attrib ;
local.wordasword.attrib ::= ε ;
common.attrib ::= id.attrib lang.attrib remap.attrib xreflabel.attrib revisionflag.attrib effectivity.attrib local.common.attrib ;
exceptionname.attlist ::= common.attrib exceptionname.role.attrib local.exceptionname.attrib ;
partintro.attlist ::= label.attrib common.attrib partintro.role.attrib local.partintro.attrib ;
local.contractnum.attrib ::= ε ;
graphicco.attlist ::= common.attrib graphicco.role.attrib local.graphicco.attrib ;
lot.role.attrib ::= role.attrib ;
see.attlist ::= common.attrib seeseealso.role.attrib local.seeseealso.attrib ;
local.partintro.attrib ::= ε ;
local.bibliorelation.types ::= φ ;
local.simplesect.attrib ::= ε ;
local.surname.attrib ::= ε ;
local.quote.attrib ::= ε ;
base.char.class ::= anchor | local.base.char.class ;
local.audiodata.attrib ::= ε ;
glossdiv.role.attrib ::= role.attrib ;
textobject.mix ::= list.class | admon.class | linespecific.class | para.class | blockquote | local.textobject.mix ;
toc.attlist ::= pagenum.attrib common.attrib toc.role.attrib local.toc.attrib ;
local.glossary.attrib ::= ε ;
returnvalue.attlist ::= common.attrib returnvalue.role.attrib local.returnvalue.attrib ;
local.filename.attrib ::= ε ;
local.guimenuitem.attrib ::= ε ;
local.markup.attrib ::= ε ;
releaseinfo.role.attrib ::= role.attrib ;
tbl.entry.mdl ::= para.char.mix | tabentry.mix ;
refnamediv.role.attrib ::= role.attrib ;
local.informalexample.attrib ::= ε ;
tbl.tgroup.mdl ::= colspec* spanspec* thead? tfoot? tbody ;
pubdate.attlist ::= common.attrib pubdate.role.attrib local.pubdate.attrib ;
artpagenums.role.attrib ::= role.attrib ;
email.role.attrib ::= role.attrib ;
artpagenums.attlist ::= common.attrib artpagenums.role.attrib local.artpagenums.attrib ;
local.synop.class ::= φ ;
local.colophon.attrib ::= ε ;
local.prefaceinfo.attrib ::= ε ;
symbol.role.attrib ::= role.attrib ;
mousebutton.role.attrib ::= role.attrib ;
local.mousebutton.attrib ::= ε ;
biblioid.attlist ::= biblio.class.attrib common.attrib biblioid.role.attrib local.biblioid.attrib ;
local.sect3info.attrib ::= ε ;
issn.role.attrib ::= role.attrib ;
example.mix ::= list.class | linespecific.class | synop.class | para.class | informal.class | ndxterm.class | beginpage | local.example.mix ;
otheraddr.role.attrib ::= role.attrib ;
sbr.attlist ::= common.attrib sbr.role.attrib local.sbr.attrib ;
local.figure.attrib ::= ε ;
sect3info.attlist ::= common.attrib sect3info.role.attrib local.sect3info.attrib ;
local.glosssee.attrib ::= ε ;
msgrel.role.attrib ::= role.attrib ;
token.attlist ::= common.attrib token.role.attrib local.token.attrib ;
productnumber.attlist ::= common.attrib productnumber.role.attrib local.productnumber.attrib ;
qandaentry.attlist ::= common.attrib qandaentry.role.attrib local.qandaentry.attrib ;
isbn.attlist ::= common.attrib isbn.role.attrib local.isbn.attrib ;
local.errortext.attrib ::= ε ;
local.arg.attrib ::= ε ;
part.attlist ::= label.attrib status.attrib common.attrib part.role.attrib local.part.attrib ;
refsection.attlist ::= status.attrib common.attrib refsection.role.attrib local.refsection.attrib ;
local.synopfragmentref.attrib ::= ε ;
accel.attlist ::= common.attrib accel.role.attrib local.accel.attrib ;
inlineequation.role.attrib ::= role.attrib ;
local.refsect3.attrib ::= ε ;
revremark.role.attrib ::= role.attrib ;
set.role.attrib ::= role.attrib ;
local.remark.attrib ::= ε ;
local.sgmltag.attrib ::= ε ;
pubsnumber.role.attrib ::= role.attrib ;
local.inlineobj.char.class ::= φ ;
setindexinfo.role.attrib ::= role.attrib ;
tocfront.attlist ::= label.attrib linkend.attrib pagenum.attrib common.attrib tocfront.role.attrib local.tocfront.attrib ;
pubsnumber.attlist ::= common.attrib pubsnumber.role.attrib local.pubsnumber.attrib ;
sidebar.role.attrib ::= role.attrib ;
funcprototype.attlist ::= common.attrib funcprototype.role.attrib local.funcprototype.attrib ;
local.bridgehead.attrib ::= ε ;
arg.role.attrib ::= role.attrib ;
keywordset.attlist ::= common.attrib keywordset.role.attrib local.keywordset.attrib ;
local.objectinfo.attrib ::= ε ;
property.attlist ::= moreinfo.attrib common.attrib property.role.attrib local.property.attrib ;
legalnotice.role.attrib ::= role.attrib ;
local.confsponsor.attrib ::= ε ;
local.article.attrib ::= ε ;
simplelist.role.attrib ::= role.attrib ;
mediaobjectco.role.attrib ::= role.attrib ;
mediaobjectco.attlist ::= common.attrib mediaobjectco.role.attrib local.mediaobjectco.attrib ;
local.appendixinfo.attrib ::= ε ;
keycode.attlist ::= common.attrib keycode.role.attrib local.keycode.attrib ;
refsect3info.attlist ::= common.attrib refsect3info.role.attrib local.refsect3info.attrib ;
copyright.role.attrib ::= role.attrib ;
local.base.char.class ::= φ ;
imageobjectco.role.attrib ::= role.attrib ;
local.year.attrib ::= ε ;
funcdef.role.attrib ::= role.attrib ;
xref.char.class ::= footnoteref | xref | local.xref.char.class ;
local.contractsponsor.attrib ::= ε ;
authorinitials.role.attrib ::= role.attrib ;
phrase.role.attrib ::= role.attrib ;
dedication.attlist ::= status.attrib common.attrib dedication.role.attrib local.dedication.attrib ;
local.sect5.attrib ::= ε ;
local.funcdef.attrib ::= ε ;
alt.attlist ::= common.attrib alt.role.attrib local.alt.attrib ;
personblurb.attlist ::= common.attrib personblurb.role.attrib local.personblurb.attrib ;
compound.class ::= msgset | procedure | sidebar | qandaset | ebnf.block.hook | local.compound.class ;
local.segtitle.attrib ::= ε ;
informalequation.attlist ::= common.attrib informalequation.role.attrib local.informalequation.attrib ;
othername.role.attrib ::= role.attrib ;
refsect3.attlist ::= status.attrib common.attrib refsect3.role.attrib local.refsect3.attrib ;
refmeta.role.attrib ::= role.attrib ;
local.refentry.class ::= φ ;
member.attlist ::= common.attrib member.role.attrib local.member.attrib ;
local.sectioninfo.attrib ::= ε ;
local.toclevel2.attrib ::= ε ;
bibliosource.attlist ::= biblio.class.attrib common.attrib bibliosource.role.attrib local.bibliosource.attrib ;
msgaud.role.attrib ::= role.attrib ;
replaceable.role.attrib ::= role.attrib ;
msgentry.attlist ::= common.attrib msgentry.role.attrib local.msgentry.attrib ;
msgaud.attlist ::= common.attrib msgaud.role.attrib local.msgaud.attrib ;
author.role.attrib ::= role.attrib ;
ackno.role.attrib ::= role.attrib ;
local.member.attrib ::= ε ;
local.interfacename.attrib ::= ε ;
local.refentry.attrib ::= ε ;
varargs.attlist ::= common.attrib varargs.role.attrib local.varargs.attrib ;
indexes.role.attrib ::= role.attrib ;
local.keyword.attrib ::= ε ;
audiodata.attlist ::= objectdata.attrib common.attrib audiodata.role.attrib local.audiodata.attrib ;
database.role.attrib ::= role.attrib ;
link.role.attrib ::= role.attrib ;
productname.role.attrib ::= role.attrib ;
para.mix ::= list.class | admon.class | linespecific.class | informal.class | formal.class | local.para.mix ;
local.calloutlist.attrib ::= ε ;
referenceinfo.role.attrib ::= role.attrib ;
local.author.attrib ::= ε ;
option.role.attrib ::= role.attrib ;
toclevel4.attlist ::= common.attrib toclevel4.role.attrib local.toclevel4.attrib ;
toclevel1.role.attrib ::= role.attrib ;
local.issuenum.attrib ::= ε ;
label.role.attrib ::= role.attrib ;
primsecterie.role.attrib ::= role.attrib ;
orgname.role.attrib ::= role.attrib ;
methodname.role.attrib ::= role.attrib ;
city.role.attrib ::= role.attrib ;
co.attlist ::= label.attrib linkends.attrib idreq.common.attrib co.role.attrib local.co.attrib ;
term.attlist ::= common.attrib term.role.attrib local.term.attrib ;
local.guilabel.attrib ::= ε ;
caption.role.attrib ::= role.attrib ;
local.classname.attrib ::= ε ;
tech.char.class ::= action | application | classname | methodname | interfacename | exceptionname | ooclass | oointerface | ooexception | command | computeroutput | database | email | envar | errorcode | errorname | errortype | errortext | filename | function | guibutton | guiicon | guilabel | guimenu | guimenuitem | guisubmenu | hardware | interface | keycap | keycode | keycombo | keysym | literal | constant | markup | medialabel | menuchoice | mousebutton | option | optional | parameter | prompt | property | replaceable | returnvalue | sgmltag | structfield | structname | symbol | systemitem | token | type | userinput | varname | ebnf.inline.hook | local.tech.char.class ;
local.msgsub.attrib ::= ε ;
local.ndxterm.class ::= φ ;
envar.role.attrib ::= role.attrib ;
setindexinfo.attlist ::= common.attrib setindexinfo.role.attrib local.setindexinfo.attrib ;
local.callout.attrib ::= ε ;
sect4.role.attrib ::= role.attrib ;
local.productnumber.attrib ::= ε ;
local.refnamediv.attrib ::= ε ;
local.videoobject.attrib ::= ε ;
local.gen.char.class ::= φ ;
chapter.role.attrib ::= role.attrib ;
wordasword.role.attrib ::= role.attrib ;
returnvalue.role.attrib ::= role.attrib ;
itemizedlist.role.attrib ::= role.attrib ;
edition.role.attrib ::= role.attrib ;
msgset.attlist ::= common.attrib msgset.role.attrib local.msgset.attrib ;
local.xref.char.class ::= φ ;
tocpart.role.attrib ::= role.attrib ;
local.mark.attrib ::= ε ;
action.attlist ::= moreinfo.attrib common.attrib action.role.attrib local.action.attrib ;
local.date.attrib ::= ε ;
corpname.attlist ::= common.attrib corpname.role.attrib local.corpname.attrib ;
local.errorcode.attrib ::= ε ;
local.epigraph.attrib ::= ε ;
local.status.attrib ::= ε ;
tbl.entrytbl.mdl ::= colspec* spanspec* thead? tbody ;
local.refentrytitle.attrib ::= ε ;
textobject.role.attrib ::= role.attrib ;
local.email.attrib ::= ε ;
refpurpose.role.attrib ::= role.attrib ;
local.emphasis.attrib ::= ε ;
articleinfo.role.attrib ::= role.attrib ;
bibliomixed.role.attrib ::= role.attrib ;
local.copyright.attrib ::= ε ;
informalequation.role.attrib ::= role.attrib ;
segtitle.attlist ::= common.attrib segtitle.role.attrib local.segtitle.attrib ;
local.tocfront.attrib ::= ε ;
yesorno.attvals ::= string() ;
local.reference.attrib ::= ε ;
local.orderedlist.attrib ::= ε ;
biblioentry.attlist ::= common.attrib biblioentry.role.attrib local.biblioentry.attrib ;
bookinfo.role.attrib ::= role.attrib ;
citerefentry.attlist ::= common.attrib citerefentry.role.attrib local.citerefentry.attrib ;
local.address.attrib ::= ε ;
local.informaltable.attrib ::= ε ;
othercredit.role.attrib ::= role.attrib ;
sidebarinfo.attlist ::= common.attrib sidebarinfo.role.attrib local.sidebarinfo.attrib ;
keysym.attlist ::= common.attrib keysysm.role.attrib local.keysym.attrib ;
local.computeroutput.attrib ::= ε ;
local.msgset.attrib ::= ε ;
audiodata.role.attrib ::= role.attrib ;
local.invpartnumber.attrib ::= ε ;
videoobject.role.attrib ::= role.attrib ;
refentrytitle.role.attrib ::= role.attrib ;
local.fieldsynopsis.attrib ::= ε ;
local.msginfo.attrib ::= ε ;
local.sidebar.mix ::= φ ;
address.attlist ::= linespecific.attrib common.attrib address.role.attrib local.address.attrib ;
local.keycap.attrib ::= ε ;
phone.role.attrib ::= role.attrib ;
local.isbn.attrib ::= ε ;
programlistingco.attlist ::= common.attrib programlistingco.role.attrib local.programlistingco.attrib ;
local.msgrel.attrib ::= ε ;
keyword.role.attrib ::= role.attrib ;
local.group.attrib ::= ε ;
citation.role.attrib ::= role.attrib ;
local.bibliocoverage.attrib ::= ε ;
bibliography.role.attrib ::= role.attrib ;
local.programlisting.attrib ::= ε ;
local.tech.char.class ::= φ ;
tocfront.role.attrib ::= role.attrib ;
confnum.attlist ::= common.attrib confnum.role.attrib local.confnum.attrib ;
local.lineannotation.attrib ::= ε ;
envar.attlist ::= common.attrib envar.role.attrib local.envar.attrib ;
surname.role.attrib ::= role.attrib ;
local.subject.attrib ::= ε ;
secur ::= common.attrib tables.role.attrib ;
paramdef.role.attrib ::= role.attrib ;
funcsynopsis.role.attrib ::= role.attrib ;
modifier.role.attrib ::= role.attrib ;
qandadiv.role.attrib ::= role.attrib ;
local.city.attrib ::= ε ;
authorgroup.attlist ::= common.attrib authorgroup.role.attrib local.authorgroup.attrib ;
procedure.attlist ::= common.attrib procedure.role.attrib local.procedure.attrib ;
local.bibliosource.attrib ::= ε ;
local.productname.attrib ::= ε ;
local.citerefentry.attrib ::= ε ;
appendix.role.attrib ::= role.attrib ;
refclass.attlist ::= common.attrib refclass.role.attrib local.refclass.attrib ;
local.footnote.attrib ::= ε ;
local.para.attrib ::= ε ;
menuchoice.attlist ::= moreinfo.attrib common.attrib menuchoice.role.attrib local.menuchoice.attrib ;
edition.attlist ::= common.attrib edition.role.attrib local.edition.attrib ;
type.role.attrib ::= role.attrib ;
local.seeie.attrib ::= ε ;
blockinfo.attlist ::= common.attrib blockinfo.role.attrib local.blockinfo.attrib ;
local.destructorsynopsis.attrib ::= ε ;
bibliorelation.attlist ::= biblio.class.attrib bibliorelation.type.attrib common.attrib bibliorelation.role.attrib local.bibliorelation.attrib ;
callout.role.attrib ::= role.attrib ;
local.referenceinfo.attrib ::= ε ;
invpartnumber.role.attrib ::= role.attrib ;
article.class ::= article | local.article.class ;
local.envar.attrib ::= ε ;
local.attribution.attrib ::= ε ;
local.returnvalue.attrib ::= ε ;
glosslist.attlist ::= common.attrib glosslist.role.attrib local.glosslist.attrib ;
msglevel.role.attrib ::= role.attrib ;
local.personblurb.attrib ::= ε ;
bibliocoverage.role.attrib ::= role.attrib ;
local.inlinemediaobject.attrib ::= ε ;
local.lineage.attrib ::= ε ;
screeninfo.role.attrib ::= role.attrib ;
email.attlist ::= common.attrib email.role.attrib local.email.attrib ;
collabname.role.attrib ::= role.attrib ;
subtitle.role.attrib ::= role.attrib ;
local.segmentedlist.attrib ::= ε ;
local.lot.attrib ::= ε ;
ooclass.attlist ::= common.attrib ooclass.role.attrib local.ooclass.attrib ;
informalexample.attlist ::= width.attrib common.attrib informalexample.role.attrib local.informalexample.attrib ;
revdescription.mix ::= list.class | admon.class | linespecific.class | synop.class | para.class | informal.class | formal.class | procedure | genobj.class | ndxterm.class | local.revdescription.mix ;
biblioid.role.attrib ::= role.attrib ;
msgentry.role.attrib ::= role.attrib ;
setinfo.role.attrib ::= role.attrib ;
keycombo.role.attrib ::= role.attrib ;
local.void.attrib ::= ε ;
keycombo.attlist ::= keyaction.attrib moreinfo.attrib common.attrib keycombo.role.attrib local.keycombo.attrib ;
local.confgroup.attrib ::= ε ;
ebnf.block.hook ::= φ ;
publishername.attlist ::= common.attrib publishername.role.attrib local.publishername.attrib ;
local.mediaobject.attrib ::= ε ;
local.videodata.attrib ::= ε ;
local.informalequation.attrib ::= ε ;
group.role.attrib ::= role.attrib ;
sect4info.role.attrib ::= role.attrib ;
programlisting.attlist ::= width.attrib linespecific.attrib common.attrib programlisting.role.attrib local.programlisting.attrib ;
preface.attlist ::= status.attrib common.attrib preface.role.attrib local.preface.attrib ;
sect4info.attlist ::= common.attrib sect4info.role.attrib local.sect4info.attrib ;
publisher.role.attrib ::= role.attrib ;
descobj.class ::= abstract | authorblurb | epigraph | local.descobj.class ;
local.printhistory.attrib ::= ε ;
chapterinfo.attlist ::= common.attrib chapterinfo.role.attrib local.chapterinfo.attrib ;
toclevel5.attlist ::= common.attrib toclevel5.role.attrib local.toclevel5.attrib ;
refsection.role.attrib ::= role.attrib ;
ooexception.role.attrib ::= role.attrib ;
namvolnum.role.attrib ::= role.attrib ;
local.imageobject.attrib ::= ε ;
ooexception.attlist ::= common.attrib ooexception.role.attrib local.ooexception.attrib ;
phone.attlist ::= common.attrib phone.role.attrib local.phone.attrib ;
citebiblioid.role.attrib ::= role.attrib ;
example.attlist ::= label.attrib width.attrib common.attrib example.role.attrib local.example.attrib ;
screenshot.attlist ::= common.attrib screenshot.role.attrib local.screenshot.attrib ;
local.refname.char.mix ::= φ ;
local.bibliomisc.attrib ::= ε ;
local.guisubmenu.attrib ::= ε ;
sidebar.attlist ::= common.attrib sidebar.role.attrib local.sidebar.attrib ;
highlights.mix ::= list.class | admon.class | para.class | ndxterm.class | local.highlights.mix ;
function.role.attrib ::= role.attrib ;
local.nav.class ::= φ ;
local.person.ident.mix ::= φ ;
seg.attlist ::= common.attrib seg.role.attrib local.seg.attrib ;
cmdsynopsis.role.attrib ::= role.attrib ;
chapter.attlist ::= label.attrib status.attrib common.attrib chapter.role.attrib local.chapter.attrib ;
funcparams.attlist ::= common.attrib funcparams.role.attrib local.funcparams.attrib ;
local.listpreamble.mix ::= φ ;
local.database.attrib ::= ε ;
colophon.attlist ::= status.attrib common.attrib colophon.role.attrib local.colophon.attrib ;
interfacename.attlist ::= common.attrib interfacename.role.attrib local.interfacename.attrib ;
msgset.role.attrib ::= role.attrib ;
menuchoice.role.attrib ::= role.attrib ;
pob.attlist ::= common.attrib pob.role.attrib local.pob.attrib ;
local.genobj.class ::= φ ;
local.linespecific.class ::= φ ;
local.refmiscinfo.attrib ::= ε ;
interface.role.attrib ::= role.attrib ;
local.appendix.attrib ::= ε ;
refsynopsisdivinfo.role.attrib ::= role.attrib ;
seealsoie.attlist ::= linkends.attrib common.attrib seealsoie.role.attrib local.seealsoie.attrib ;
person.ident.mix ::= honorific | firstname | surname | lineage | othername | affiliation | authorblurb | contrib | local.person.ident.mix ;
local.token.attrib ::= ε ;
local.toclevel5.attrib ::= ε ;
orgdiv.role.attrib ::= role.attrib ;
ebnf.inline.hook ::= φ ;
local.informalfigure.attrib ::= ε ;
local.refname.attrib ::= ε ;
local.refsect1.attrib ::= ε ;
listpreamble.mix ::= admon.class | linespecific.class | synop.class | para.class | informal.class | genobj.class | descobj.class | ndxterm.class | beginpage | local.listpreamble.mix ;
lineannotation.attlist ::= common.attrib lineannotation.role.attrib local.lineannotation.attrib ;
local.msglevel.attrib ::= ε ;
fax.role.attrib ::= role.attrib ;
local.foreignphrase.attrib ::= ε ;
subjectterm.role.attrib ::= role.attrib ;
guimenu.attlist ::= moreinfo.attrib common.attrib guimenu.role.attrib local.guimenu.attrib ;
local.refsect2info.attrib ::= ε ;
para.class ::= formalpara | para | simpara | local.para.class ;
synopsis.role.attrib ::= role.attrib ;
bibliosource.role.attrib ::= role.attrib ;
fieldsynopsis.role.attrib ::= role.attrib ;
local.bibliodiv.attrib ::= ε ;
bibliographyinfo.attlist ::= common.attrib bibliographyinfo.role.attrib local.bibliographyinfo.attrib ;
local.edition.attrib ::= ε ;
filename.role.attrib ::= role.attrib ;
local.preface.attrib ::= ε ;
funcsynopsisinfo.attlist ::= linespecific.attrib common.attrib funcsynopsisinfo.role.attrib local.funcsynopsisinfo.attrib ;
sbr.role.attrib ::= role.attrib ;
local.example.mix ::= φ ;
local.indexentry.attrib ::= ε ;
programlisting.role.attrib ::= role.attrib ;
preface.role.attrib ::= role.attrib ;
local.issn.attrib ::= ε ;
local.glossdiv.attrib ::= ε ;
indexdivcomponent.mix ::= itemizedlist | orderedlist | variablelist | simplelist | linespecific.class | synop.class | para.class | informal.class | anchor | remark | link.char.class | beginpage | local.indexdivcomponent.mix ;
local.sect3.attrib ::= ε ;
titleabbrev.attlist ::= common.attrib titleabbrev.role.attrib local.titleabbrev.attrib ;
toclevel2.role.attrib ::= role.attrib ;
simplesect.role.attrib ::= role.attrib ;
appendixinfo.attlist ::= common.attrib appendixinfo.role.attrib local.appendixinfo.attrib ;
part.role.attrib ::= role.attrib ;
errorcode.attlist ::= moreinfo.attrib common.attrib errorcode.role.attrib local.errorcode.attrib ;
ulink.role.attrib ::= role.attrib ;
legalnotice.mix ::= list.class | admon.class | linespecific.class | para.class | blockquote | ndxterm.class | beginpage | local.legalnotice.mix ;
methodname.attlist ::= common.attrib methodname.role.attrib local.methodname.attrib ;
bridgehead.role.attrib ::= role.attrib ;
section.role.attrib ::= role.attrib ;
revision.role.attrib ::= role.attrib ;
graphicco.role.attrib ::= role.attrib ;
local.keyaction.attrib ::= ε ;
sect5.role.attrib ::= role.attrib ;
index.attlist ::= common.attrib indexes.role.attrib local.indexes.attrib ;
local.titleabbrev.attrib ::= ε ;
local.collabname.attrib ::= ε ;
refsect1info.role.attrib ::= role.attrib ;
local.highlights.attrib ::= ε ;
acronym.attlist ::= common.attrib acronym.role.attrib local.acronym.attrib ;
local.abstract.attrib ::= ε ;
indexterm.role.attrib ::= role.attrib ;
beginpage.attlist ::= pagenum.attrib common.attrib beginpage.role.attrib local.beginpage.attrib ;
local.programlistingco.attrib ::= ε ;
local.refsection.attrib ::= ε ;
msgtext.role.attrib ::= role.attrib ;
prefaceinfo.role.attrib ::= role.attrib ;
local.blockinfo.attrib ::= ε ;
invpartnumber.attlist ::= common.attrib invpartnumber.role.attrib local.invpartnumber.attrib ;
textobject.attlist ::= common.attrib textobject.role.attrib local.textobject.attrib ;
videodata.role.attrib ::= role.attrib ;
local.imagedata.attrib ::= ε ;
abbrev.attlist ::= common.attrib abbrev.role.attrib local.abbrev.attrib ;
local.graphic.attrib ::= ε ;
refsectioninfo.attlist ::= common.attrib refsectioninfo.role.attrib local.refsectioninfo.attrib ;
contrib.role.attrib ::= role.attrib ;
literallayout.role.attrib ::= role.attrib ;
othername.attlist ::= common.attrib othername.role.attrib local.othername.attrib ;
audioobject.role.attrib ::= role.attrib ;
tbl.table.mdl ::= blockinfo? formalobject.title.content ndxterm.class* textobject* (graphic+) | (mediaobject+) | (tgroup+) ;
local.cptr.char.mix ::= φ ;
bibliographyinfo.role.attrib ::= role.attrib ;
local.corpauthor.attrib ::= ε ;
author.attlist ::= common.attrib author.role.attrib local.author.attrib ;
index.class ::= index | setindex | local.index.class ;
local.revremark.attrib ::= ε ;
local.setindexinfo.attrib ::= ε ;
local.personname.attrib ::= ε ;
msg.attlist ::= common.attrib msg.role.attrib local.msg.attrib ;
local.question.attrib ::= ε ;
synopfragmentref.role.attrib ::= role.attrib ;
local.docinfo.char.class ::= φ ;
revdescription.attlist ::= common.attrib revdescription.role.attrib local.revdescription.attrib ;
local.footnoteref.attrib ::= ε ;
local.area.attrib ::= ε ;
local.refmeta.attrib ::= ε ;
local.subjectterm.attrib ::= ε ;
local.informal.class ::= φ ;
local.tocchap.attrib ::= ε ;
local.modifier.attrib ::= ε ;
city.attlist ::= common.attrib city.role.attrib local.city.attrib ;
graphic.role.attrib ::= role.attrib ;
local.legalnotice.mix ::= φ ;
local.sect4info.attrib ::= ε ;
tables.role.attrib ::= role.attrib ;
confnum.role.attrib ::= role.attrib ;
local.areaspec.attrib ::= ε ;
local.refpurpose.attrib ::= ε ;
local.editor.attrib ::= ε ;
local.medialabel.attrib ::= ε ;
local.option.attrib ::= ε ;
local.corpname.attrib ::= ε ;
command.role.attrib ::= role.attrib ;
local.sect1info.attrib ::= ε ;
reference.role.attrib ::= role.attrib ;
shortaffil.role.attrib ::= role.attrib ;
titles ::= title? ;
local.errortype.attrib ::= ε ;
printhistory.attlist ::= common.attrib printhistory.role.attrib local.printhistory.attrib ;
shortcut.attlist ::= keyaction.attrib moreinfo.attrib common.attrib shortcut.role.attrib local.shortcut.attrib ;
local.seglistitem.attrib ::= ε ;
local.lotentry.attrib ::= ε ;
refdescriptor.attlist ::= common.attrib refdescriptor.role.attrib local.refdescriptor.attrib ;
appendix.class ::= appendix | local.appendix.class ;
local.alt.attrib ::= ε ;
pagenums.role.attrib ::= role.attrib ;
classsynopsisinfo.role.attrib ::= role.attrib ;
local.hardware.attrib ::= ε ;
local.glossentry.attrib ::= ε ;
tocpart.attlist ::= common.attrib tocpart.role.attrib local.tocpart.attrib ;
authorinitials.attlist ::= common.attrib authorinitials.role.attrib local.authorinitials.attrib ;
subjectset.role.attrib ::= role.attrib ;
simpara.attlist ::= common.attrib simpara.role.attrib local.simpara.attrib ;
errortext.attlist ::= common.attrib errortext.role.attrib local.errortext.attrib ;
local.releaseinfo.attrib ::= ε ;
ssscript.role.attrib ::= role.attrib ;
msgtext.attlist ::= common.attrib msgtext.role.attrib local.msgtext.attrib ;
prefaceinfo.attlist ::= common.attrib prefaceinfo.role.attrib local.prefaceinfo.attrib ;
orgdiv.attlist ::= common.attrib orgdiv.role.attrib local.orgdiv.attrib ;
local.bookinfo.attrib ::= ε ;
local.textobject.mix ::= φ ;
local.refsynopsisdivinfo.attrib ::= ε ;
local.dedication.attrib ::= ε ;
glossentry.role.attrib ::= role.attrib ;
refpurpose.attlist ::= common.attrib refpurpose.role.attrib local.refpurpose.attrib ;
qandaset.role.attrib ::= role.attrib ;
local.xref.attrib ::= ε ;
markup.attlist ::= common.attrib markup.role.attrib local.markup.attrib ;
segtitle.role.attrib ::= role.attrib ;
local.menuchoice.attrib ::= ε ;
refsectioninfo.role.attrib ::= role.attrib ;
bibliomisc.attlist ::= common.attrib bibliomisc.role.attrib local.bibliomisc.attrib ;
abstract.attlist ::= common.attrib abstract.role.attrib local.abstract.attrib ;
important.attlist ::= common.attrib admon.role.attrib local.admon.attrib ;
partinfo.attlist ::= common.attrib partinfo.role.attrib local.partinfo.attrib ;
tocchap.role.attrib ::= role.attrib ;
fax.attlist ::= common.attrib fax.role.attrib local.fax.attrib ;
local.qandaset.attrib ::= ε ;
local.phone.attrib ::= ε ;
nav.class ::= toc | lot | index | glossary | bibliography | local.nav.class ;
country.role.attrib ::= role.attrib ;
local.ndxterm.char.mix ::= φ ;
local.word.char.mix ::= φ ;
keycap.attlist ::= moreinfo.attrib common.attrib keycap.role.attrib local.keycap.attrib ;
sectioninfo.attlist ::= common.attrib sectioninfo.role.attrib local.sectioninfo.attrib ;
constructorsynopsis.role.attrib ::= role.attrib ;
local.msgexplan.attrib ::= ε ;
admon.role.attrib ::= role.attrib ;
glosssee.role.attrib ::= role.attrib ;
local.userinput.attrib ::= ε ;
ackno.attlist ::= common.attrib ackno.role.attrib local.ackno.attrib ;
varargs.role.attrib ::= role.attrib ;
seglistitem.attlist ::= common.attrib seglistitem.role.attrib local.seglistitem.attrib ;
local.structname.attrib ::= ε ;
guisubmenu.attlist ::= moreinfo.attrib common.attrib guisubmenu.role.attrib local.guisubmenu.attrib ;
local.parameter.attrib ::= ε ;
sect5info.attlist ::= common.attrib sect5info.role.attrib local.sect5info.attrib ;
bibliodiv.role.attrib ::= role.attrib ;
publisher.attlist ::= common.attrib publisher.role.attrib local.publisher.attrib ;
synopfragment.role.attrib ::= role.attrib ;
local.graphicco.attrib ::= ε ;
local.msgaud.attrib ::= ε ;
note.attlist ::= common.attrib admon.role.attrib local.admon.attrib ;
local.title.attrib ::= ε ;
screen.role.attrib ::= role.attrib ;
local.keywordset.attrib ::= ε ;
hardware.attlist ::= moreinfo.attrib common.attrib hardware.role.attrib local.hardware.attrib ;
question.attlist ::= common.attrib question.role.attrib local.question.attrib ;
local.articleinfo.attrib ::= ε ;
local.bibliomixed.attrib ::= ε ;
local.caption.attrib ::= ε ;
surname.attlist ::= common.attrib surname.role.attrib local.surname.attrib ;
title.role.attrib ::= role.attrib ;
property.role.attrib ::= role.attrib ;
local.errorname.attrib ::= ε ;
local.component.mix ::= φ ;
procedure.role.attrib ::= role.attrib ;
local.biblioid.attrib ::= ε ;
local.revdescription.attrib ::= ε ;
lotentry.role.attrib ::= role.attrib ;
local.toc.attrib ::= ε ;
local.bibliocomponent.mix ::= φ ;
local.tabentry.mix ::= φ ;
local.application.attrib ::= ε ;
phrase.attlist ::= common.attrib phrase.role.attrib local.phrase.attrib ;
bibliorelation.role.attrib ::= role.attrib ;
anchor.attlist ::= idreq.attrib pagenum.attrib remap.attrib xreflabel.attrib revisionflag.attrib effectivity.attrib anchor.role.attrib local.anchor.attrib ;
conftitle.attlist ::= common.attrib conftitle.role.attrib local.conftitle.attrib ;
parameter.role.attrib ::= role.attrib ;
coref.attlist ::= label.attrib linkendreq.attrib common.attrib coref.role.attrib local.coref.attrib ;
ndxterm.class ::= indexterm | local.ndxterm.class ;
genobj.class ::= anchor | bridgehead | remark | highlights | local.genobj.class ;
inlineequation.content ::= alt? (graphic+) | (inlinemediaobject+) ;
variablelist.role.attrib ::= role.attrib ;
tip.attlist ::= common.attrib admon.role.attrib local.admon.attrib ;
local.effectivity.attrib ::= ε ;
local.conftitle.attrib ::= ε ;
local.glossterm.attrib ::= ε ;
void.attlist ::= common.attrib void.role.attrib local.void.attrib ;
errorname.attlist ::= common.attrib errorname.role.attrib local.errorname.attrib ;
local.smallcptr.char.mix ::= φ ;
revhistory.attlist ::= common.attrib revhistory.role.attrib local.revhistory.attrib ;
local.literallayout.attrib ::= ε ;
local.biblioentry.attrib ::= ε ;
local.formal.class ::= φ ;
local.indexes.attrib ::= ε ;
forminlines.hook ::= φ ;
local.screeninfo.attrib ::= ε ;
local.compound.class ::= φ ;
local.varargs.attrib ::= ε ;
msg.role.attrib ::= role.attrib ;
sect5info.role.attrib ::= role.attrib ;
figure.mix ::= linespecific.class | synop.class | informal.class | ndxterm.class | beginpage | local.figure.mix ;
local.seriesvolnums.attrib ::= ε ;
sect1info.role.attrib ::= role.attrib ;
local.manvolnum.attrib ::= ε ;
local.para.class ::= φ ;
videoobject.attlist ::= common.attrib videoobject.role.attrib local.videoobject.attrib ;
refsect.title.content ::= title subtitle? titleabbrev? ;
toclevel3.role.attrib ::= role.attrib ;
isbn.role.attrib ::= role.attrib ;
referenceinfo.attlist ::= common.attrib referenceinfo.role.attrib local.referenceinfo.attrib ;
methodsynopsis.role.attrib ::= role.attrib ;
msgrel.attlist ::= common.attrib msgrel.role.attrib local.msgrel.attrib ;
address.role.attrib ::= role.attrib ;
confsponsor.attlist ::= common.attrib confsponsor.role.attrib local.confsponsor.attrib ;
local.simpara.attrib ::= ε ;
local.toclevel3.attrib ::= ε ;
editor.role.attrib ::= role.attrib ;
local.action.attrib ::= ε ;
local.subjectset.attrib ::= ε ;
local.msg.attrib ::= ε ;
info.class ::= graphic | mediaobject | legalnotice | modespec | subjectset | keywordset | itermset | bibliocomponent.mix | local.info.class ;
citetitle.role.attrib ::= role.attrib ;
prompt.attlist ::= moreinfo.attrib common.attrib prompt.role.attrib local.prompt.attrib ;
local.admon.mix ::= φ ;
local.accel.attrib ::= ε ;
honorific.attlist ::= common.attrib honorific.role.attrib local.honorific.attrib ;
footnote.attlist ::= label.attrib common.attrib footnote.role.attrib local.footnote.attrib ;
computeroutput.role.attrib ::= role.attrib ;
oointerface.role.attrib ::= role.attrib ;
screenco.role.attrib ::= role.attrib ;
local.funcparams.attrib ::= ε ;
local.glossaryinfo.attrib ::= ε ;
authorgroup.role.attrib ::= role.attrib ;
list.class ::= calloutlist | glosslist | itemizedlist | orderedlist | segmentedlist | simplelist | variablelist | local.list.class ;
local.glossseealso.attrib ::= ε ;
formalpara.role.attrib ::= role.attrib ;
local.bibliorelation.attrib ::= ε ;
formalpara.attlist ::= common.attrib formalpara.role.attrib local.formalpara.attrib ;
glossaryinfo.role.attrib ::= role.attrib ;
contractsponsor.role.attrib ::= role.attrib ;
areaspec.role.attrib ::= role.attrib ;
local.indexinfo.attrib ::= ε ;
glossdiv.attlist ::= status.attrib common.attrib glossdiv.role.attrib local.glossdiv.attrib ;
pob.role.attrib ::= role.attrib ;
structfield.attlist ::= common.attrib structfield.role.attrib local.structfield.attrib ;
local.itemizedlist.attrib ::= ε ;
msgmain.role.attrib ::= role.attrib ;
local.sect1.attrib ::= ε ;
type.attlist ::= common.attrib type.role.attrib local.type.attrib ;
local.holder.attrib ::= ε ;
corpname.role.attrib ::= role.attrib ;
contractnum.attlist ::= common.attrib contractnum.role.attrib local.contractnum.attrib ;
refmiscinfo.role.attrib ::= role.attrib ;
--------------------markup::kml.bgf--------------------
ElementNode ::= RootNode ;
 ElementNode ::= TextNode ;
 ElementNode ::= KMLNode ;
Snippet ::= ε ;
LabelStyle ::= ε ;
Document ::= ε ;
Pair ::= ε ;
Placemark ::= ε ;
String ::= string() ;
Point ::= ε ;
OuterBoundaryIs ::= ε ;
MultiGeometry ::= ε ;
GroundOverlay ::= ε ;
NetworkLink ::= ε ;
Message ::= ε ;
PolyStyle ::= ε ;
RootNode ::= KMLRootNode ;
ObjField ::= ε ;
BalloonStyle ::= ε ;
Node ::= ElementNode ;
 Node ::= AttributeNode ;
LatLonBox ::= ε ;
Integer ::= integer() ;
Coordinates ::= ε ;
Polygon ::= ε ;
Icon ::= ε ;
ObjArrayField ::= ε ;
IconStyle ::= ε ;
Coordinate ::= ε ;
NetworkLinkControl ::= ε ;
LinearRing ::= ε ;
SimpleArrayField ::= ε ;
LookAt ::= ε ;
Url ::= ε ;
KMLRootNode ::= ε ;
Folder ::= ε ;
Text ::= ε ;
KMLNode ::= Address ;
 KMLNode ::= AltitudeMode ;
 KMLNode ::= BalloonStyle ;
 KMLNode ::= Color ;
 KMLNode ::= ColorMode ;
 KMLNode ::= Cookie ;
 KMLNode ::= Coordinates ;
 KMLNode ::= Coordinate ;
 KMLNode ::= Description ;
 KMLNode ::= Document ;
 KMLNode ::= DrawOrder ;
 KMLNode ::= East ;
 KMLNode ::= Extrude ;
 KMLNode ::= Fill ;
 KMLNode ::= FlyToView ;
 KMLNode ::= Folder ;
 KMLNode ::= GroundOverlay ;
 KMLNode ::= H ;
 KMLNode ::= Heading ;
 KMLNode ::= Href ;
 KMLNode ::= Icon ;
 KMLNode ::= IconStyle ;
 KMLNode ::= InnerBoundaryIs ;
 KMLNode ::= Key ;
 KMLNode ::= LabelStyle ;
 KMLNode ::= Latitude ;
 KMLNode ::= LatLonBox ;
 KMLNode ::= LinearRing ;
 KMLNode ::= LineString ;
 KMLNode ::= LineStyle ;
 KMLNode ::= LinkDescription ;
 KMLNode ::= LinkName ;
 KMLNode ::= Longitude ;
 KMLNode ::= LookAt ;
 KMLNode ::= Message ;
 KMLNode ::= MinRefreshPeriod ;
 KMLNode ::= MultiGeometry ;
 KMLNode ::= Name ;
 KMLNode ::= NetworkLink ;
 KMLNode ::= NetworkLinkControl ;
 KMLNode ::= North ;
 KMLNode ::= ObjArrayField ;
 KMLNode ::= ObjField ;
 KMLNode ::= Open ;
 KMLNode ::= OuterBoundaryIs ;
 KMLNode ::= Outline ;
 KMLNode ::= OverlayXY ;
 KMLNode ::= Pair ;
 KMLNode ::= Parent ;
 KMLNode ::= Placemark ;
 KMLNode ::= Point ;
 KMLNode ::= Polygon ;
 KMLNode ::= PolyStyle ;
 KMLNode ::= Range ;
 KMLNode ::= RefreshInterval ;
 KMLNode ::= RefreshMode ;
 KMLNode ::= RefreshVisibility ;
 KMLNode ::= Rotation ;
 KMLNode ::= Schema ;
 KMLNode ::= Scale ;
 KMLNode ::= ScreenOverlay ;
 KMLNode ::= ScreenXY ;
 KMLNode ::= SimpleArrayField ;
 KMLNode ::= SimpleField ;
 KMLNode ::= Size ;
 KMLNode ::= South ;
 KMLNode ::= Snippet ;
 KMLNode ::= Style ;
 KMLNode ::= StyleMap ;
 KMLNode ::= StyleUrl ;
 KMLNode ::= Tessellate ;
 KMLNode ::= Text ;
 KMLNode ::= TextColor ;
 KMLNode ::= Tilt ;
 KMLNode ::= Type ;
 KMLNode ::= Url ;
 KMLNode ::= ViewBoundScale ;
 KMLNode ::= ViewRefreshMode ;
 KMLNode ::= ViewRefreshTime ;
 KMLNode ::= ViewFormat ;
 KMLNode ::= Visibility ;
 KMLNode ::= W ;
 KMLNode ::= West ;
 KMLNode ::= Width ;
 KMLNode ::= X ;
 KMLNode ::= Y ;
StyleMap ::= ε ;
InnerBoundaryIs ::= ε ;
SimpleField ::= ε ;
LineString ::= ε ;
Schema ::= ε ;
--------------------markup::graphml-doux.bgf--------------------
Integer ::= integer() ;
LocatedElement ::= Root ;
 LocatedElement ::= Element ;
 LocatedElement ::= Port ;
 LocatedElement ::= EndPoint ;
 LocatedElement ::= Data ;
String ::= string() ;
--------------------markup::json-rascal-concrete.bgf--------------------
JSONText ::= Object ;
 JSONText ::= Array ;
--------------------markup::json-zaytsev-concrete.bgf--------------------
JSONString ::= DoubleQuotedString ;
JSONData ::= JSONBasicType ;
JSONBasicType ::= JSONString ;
 JSONBasicType ::= JSONNull ;
 JSONBasicType ::= JSONBoolean ;
 JSONBasicType ::= JSONNumber ;
 JSONBasicType ::= JSONArray ;
 JSONBasicType ::= JSONObject ;
--------------------markup::mathml-furubayashi.bgf--------------------
mml.plschema ::= mml.pgenschema | mml.pscrschema | mml.ptabschema ;
mml.ctrigop ::= mml.sin.qname | mml.cos.qname | mml.tan.qname | mml.sec.qname | mml.csc.qname | mml.cot.qname | mml.sinh.qname | mml.cosh.qname | mml.tanh.qname | mml.sech.qname | mml.csch.qname | mml.coth.qname | mml.arcsin.qname | mml.arccos.qname | mml.arctan.qname | mml.arccosh.qname | mml.arccot.qname | mml.arccoth.qname | mml.arccsc.qname | mml.arccsch.qname | mml.arcsec.qname | mml.arcsech.qname | mml.arcsinh.qname | mml.arctanh.qname ;
mml.carithop1or2ary ::= mml.minus.qname ;
mml.c0ary ::= mml.integers.qname | mml.reals.qname | mml.rationals.qname | mml.naturalnumbers.qname | mml.complexes.qname | mml.primes.qname | mml.exponentiale.qname | mml.imaginaryi.qname | mml.notanumber.qname | mml.true.qname | mml.false.qname | mml.emptyset.qname | mml.eulergamma.qname | mml.infinity.qname ;
mml.cop1ary ::= mml.cfuncop1ary | mml.carithop1ary | mml.clogicop1ary | mml.ccalcop1ary | mml.ctrigop | mml.clalgop1ary | mml.csetop1ary ;
mml.ccalcop ::= mml.log.qname | mml.int.qname | mml.diff.qname | mml.partialdiff.qname | mml.divergence.qname | mml.grad.qname | mml.curl.qname | mml.laplacian.qname ;
mml.Annotation-xml.datatype ::= (string() | (string()* mml.Annotation-xml.datatype))* ;
mml.clogicop1ary ::= mml.not.qname ;
mml.crelnary ::= mml.cgenrelnary | mml.csetrelnary ;
mml.cstatopnary ::= mml.mean.qname | mml.sdev.qname | mml.variance.qname | mml.median.qname | mml.mode.qname ;
mml.pactions ::= mml.maction.qname ;
mml.positiveinteger.datatype ::= integer() ;
mml.cother ::= mml.condition.qname | mml.declare.qname | mml.sep.qname ;
mml.csetrel2ary ::= mml.in.qname | mml.notin.qname | mml.notsubset.qname | mml.notprsubset.qname ;
mml.ptoken ::= mml.mi.qname | mml.mn.qname | mml.mo.qname | mml.mtext.qname | mml.ms.qname ;
mml.PresExpression ::= (mml.Presentation | mml.ContInPres)* ;
mml.ptabschema ::= mml.mtable.qname | mml.mtr.qname | mml.mlabeledtr.qname | mml.mtd.qname ;
mml.rowspacing.datatype ::= string()+ ;
mml.pgenschema ::= mml.mrow.qname | mml.mfrac.qname | mml.msqrt.qname | mml.mroot.qname | mml.menclose.qname | mml.mstyle.qname | mml.merror.qname | mml.mpadded.qname | mml.mphantom.qname | mml.mfenced.qname ;
mml.att-browif ::= mml.att-type mml.att-name mml.att-height mml.att-width mml.att-baseline mml.att-overflow mml.att-altimg mml.att-alttext ;
mml.carithop1ary ::= mml.abs.qname | mml.conjugate.qname | mml.exp.qname | mml.factorial.qname | mml.arg.qname | mml.real.qname | mml.imaginary.qname | mml.floor.qname | mml.ceiling.qname ;
mml.cfuncopnary ::= mml.fn.qname | mml.compose.qname ;
mml.cseqop ::= mml.sum.qname | mml.product.qname | mml.limit.qname ;
mml.idref.datatype ::= string() ;
mml.csetopnary ::= mml.union.qname | mml.intersect.qname | mml.cartesianproduct.qname ;
mml.cop2ary ::= mml.carithop2ary | mml.clogicop2ary | mml.clalgop2ary | mml.csetop2ary ;
mml.cspecial ::= mml.apply.qname | mml.reln.qname | mml.lambda.qname ;
mml.ctoken ::= mml.csymbol.qname | mml.ci.qname | mml.cn.qname ;
mml.clogicop2ary ::= mml.implies.qname ;
mml.cseqrel2ary ::= mml.tendsto.qname ;
mml.columnspan.datatype ::= mml.positiveinteger.datatype ;
mml.copmisc ::= mml.carithoproot | mml.carithop1or2ary | mml.ccalcop | mml.cseqop | mml.cstatopmoment | mml.clogicopquant ;
mml.csemantics ::= mml.semantics.qname | mml.annotation.qname | mml.annotation-xml.qname ;
mml.clalgopnary ::= mml.selector.qname ;
mml.groupalign.datatype ::= string() ;
mml.length.datatype ::= string() ;
mml.PresInCont ::= mml.ptoken | mml.petoken | mml.plschema | mml.peschema | mml.pactions ;
mml.ContInPres ::= mml.ci.qname | mml.csymbol.qname | mml.cn.qname | mml.c0ary | mml.apply.qname | mml.fn.qname | mml.lambda.qname | mml.reln.qname | mml.cconstructor | mml.semantics.qname | mml.declare.qname ;
mml.number.datatype ::= integer() ;
mml.MathExpression ::= (mml.PresInCont | mml.ContInPres)* ;
mml.carithop2ary ::= mml.quotient.qname | mml.divide.qname | mml.power.qname | mml.rem.qname ;
mml.cgenrel2ary ::= mml.neq.qname | mml.factorof.qname ;
mml.att-sizeinfo ::= mml.att-width mml.att-height mml.att-depth ;
mml.cfuncop1ary ::= mml.inverse.qname | mml.ident.qname | mml.domain.qname | mml.codomain.qname | mml.image.qname ;
mml.csetop1ary ::= mml.card.qname ;
mml.peschema ::= mml.maligngroup.qname | mml.malignmark.qname ;
mml.cquantifier ::= mml.lowlimit.qname | mml.uplimit.qname | mml.bvar.qname | mml.degree.qname | mml.logbase.qname | mml.momentabout.qname | mml.domainofapplication.qname ;
mml.Content ::= mml.ctoken | mml.cspecial | mml.cother | mml.csemantics | mml.c0ary | mml.cconstructor | mml.cquantifier | mml.cop1ary | mml.cop2ary | mml.copnary | mml.copmisc | mml.crel2ary | mml.crelnary ;
mml.cstatopmoment ::= mml.moment.qname ;
mml.pscrschema ::= mml.msub.qname | mml.msup.qname | mml.msubsup.qname | mml.munder.qname | mml.mover.qname | mml.munderover.qname | mml.mmultiscripts.qname ;
mml.id.datatype ::= string() ;
mml.att-topinfo ::= mml.Common.attrib mml.att-macros mml.att-mode mml.att-display ;
mml.pscreschema ::= mml.mprescripts.qname | mml.none.qname ;
mml.csetrelnary ::= mml.subset.qname | mml.prsubset.qname ;
mml.ContentExpression ::= (mml.Content | mml.PresInCont)* ;
mml.att-tableinfo ::= mml.att-align mml.att-rowalign mml.att-columnalign mml.att-columnwidth mml.att-groupalign mml.att-alignmentscope mml.att-rowspacing mml.att-columnspacing mml.att-rowlines mml.att-columnlines mml.att-frame mml.att-framespacing mml.att-equalrows mml.att-equalcolumns mml.att-displaystyle ;
mml.crel2ary ::= mml.cgenrel2ary | mml.csetrel2ary | mml.cseqrel2ary ;
mml.carithoproot ::= mml.root.qname ;
mml.operators.common.attrib ::= mml.Common.attrib mml.att-definition mml.att-encoding ;
mml.clalgop1ary ::= mml.determinant.qname | mml.transpose.qname ;
mml.clogicopquant ::= mml.exists.qname | mml.forall.qname ;
mml.att-opinfo ::= mml.att-form mml.att-fence mml.att-separator mml.att-lspace mml.att-rspace mml.att-stretchy mml.att-symmetric mml.att-maxsize mml.att-minsize mml.att-largeop mml.att-movablelimits mml.att-accent ;
mml.copnary ::= mml.cfuncopnary | mml.carithopnary | mml.clogicopnary | mml.csetopnary | mml.cstatopnary | mml.clalgopnary ;
mml.Presentation ::= mml.ptoken | mml.petoken | mml.pscreschema | mml.plschema | mml.peschema | mml.pactions ;
mml.cconstructor ::= mml.interval.qname | mml.list.qname | mml.matrix.qname | mml.matrixrow.qname | mml.set.qname | mml.vector.qname | mml.piecewise.qname ;
mml.clogicopnary ::= mml.and.qname | mml.or.qname | mml.xor.qname ;
mml.csetop2ary ::= mml.setdiff.qname ;
mml.nonnegativefloat.datatype ::= string() ;
mml.ccalcop1ary ::= mml.ln.qname ;
mml.att-fontinfo ::= mml.att-fontsize mml.att-fontweight mml.att-fontstyle mml.att-fontfamily mml.att-color mml.att-mathvariant mml.att-mathsize mml.att-mathcolor mml.att-mathbackground ;
mml.uri.datatype ::= string() ;
mml.clalgop2ary ::= mml.vectorproduct.qname | mml.scalarproduct.qname | mml.outerproduct.qname ;
mml.carithopnary ::= mml.plus.qname | mml.times.qname | mml.max.qname | mml.min.qname | mml.gcd.qname | mml.lcm.qname ;
mml.cgenrelnary ::= mml.eq.qname | mml.leq.qname | mml.lt.qname | mml.geq.qname | mml.gt.qname | mml.equivalent.qname | mml.approx.qname ;
mml.petoken ::= mml.mspace.qname ;
mml.Annotation.datatype ::= string() ;
--------------------markup::pnml-anyElement.bgf--------------------
anyElement ::= (α | string() | anyElement)* ;
--------------------markup::pnml-arbitrarydeclarations.bgf--------------------
SortDeclaration ::= ArbitrarySort ;
Declaration ::= Unparsed ;
OperatorDeclaration ::= ArbitraryOperator ;
--------------------markup::pnml-booleans.bgf--------------------
BooleanOperator ::= And | Or | Imply | Not ;
BooleanOperator.content ::= BuiltInOperator.content ;
BuiltInConstant ::= BooleanConstant ;
BuiltInOperator ::= BooleanOperator ;
Operator ::= Equality | Inequality ;
BuiltInSort ::= Bool ;
--------------------markup::pnml-cyclicenumerations.bgf--------------------
CyclicEnumOperator ::= Successor | Predecessor ;
CyclicEnumOperator.content ::= BuiltInOperator.content ;
BuiltInOperator ::= CyclicEnumOperator ;
BuiltInSort ::= CyclicEnumeration ;
--------------------markup::pnml-dots.bgf--------------------
BuiltInConstant ::= DotConstant ;
BuiltInSort ::= Dot ;
--------------------markup::r2ml.bgf--------------------
Integer ::= integer() ;
RuleSet ::= ReactionRuleSet ;
 RuleSet ::= ProductionRuleSet ;
 RuleSet ::= IntegrityRuleSet ;
 RuleSet ::= DerivationRuleSet ;
String ::= string() ;
--------------------markup::pnml-ext-inhibitor.bgf--------------------
page.labels ::= ε ;
nodegraphics.content ::= position.element dimension.element? fill.element? line.element? ;
transition.labels ::= ε ;
basicobject.content ::= Name? toolspecific.element* ;
pnml.content ::= net.element ;
netobject.content ::= page.content | place.content | transition.content | refplace.content | reftrans.content | arc.content ;
color.type ::= string() ;
annotationgraphics.content ::= offset.element fill.element? line.element? font.element? ;
pagegraphics.content ::= nodegraphics.content ;
positiveDecimal.content ::= integer() ;
edgegraphics.content ::= position.element* line.element? ;
anyElement ::= (α | string() | anyElement)* ;
simpletextlabel.content ::= simpletext.content annotationstandard.content ;
refnode.content ::= identifier.content reference basicobject.content node.content ;
net.labels ::= ε ;
--------------------markup::pnml-ext-reset.bgf--------------------
page.labels ::= ε ;
nodegraphics.content ::= position.element dimension.element? fill.element? line.element? ;
transition.labels ::= ε ;
basicobject.content ::= Name? toolspecific.element* ;
pnml.content ::= net.element ;
netobject.content ::= page.content | place.content | transition.content | refplace.content | reftrans.content | arc.content ;
color.type ::= string() ;
annotationgraphics.content ::= offset.element fill.element? line.element? font.element? ;
pagegraphics.content ::= nodegraphics.content ;
positiveDecimal.content ::= integer() ;
edgegraphics.content ::= position.element* line.element? ;
anyElement ::= (α | string() | anyElement)* ;
simpletextlabel.content ::= simpletext.content annotationstandard.content ;
refnode.content ::= identifier.content reference basicobject.content node.content ;
net.labels ::= ε ;
--------------------markup::pnml-ext-resetinhibitor.bgf--------------------
page.labels ::= ε ;
nodegraphics.content ::= position.element dimension.element? fill.element? line.element? ;
transition.labels ::= ε ;
basicobject.content ::= Name? toolspecific.element* ;
pnml.content ::= net.element ;
netobject.content ::= page.content | place.content | transition.content | refplace.content | reftrans.content | arc.content ;
color.type ::= string() ;
annotationgraphics.content ::= offset.element fill.element? line.element? font.element? ;
pagegraphics.content ::= nodegraphics.content ;
positiveDecimal.content ::= integer() ;
edgegraphics.content ::= position.element* line.element? ;
anyElement ::= (α | string() | anyElement)* ;
simpletextlabel.content ::= simpletext.content annotationstandard.content ;
refnode.content ::= identifier.content reference basicobject.content node.content ;
net.labels ::= ε ;
--------------------markup::pnml-finiteenumerations.bgf--------------------
OperatorDeclaration ::= FEConstant ;
FiniteEnumeration.content ::= FEConstant* ;
BuiltInSort ::= FiniteEnumeration ;
--------------------markup::pnml-finiteintranges.bgf--------------------
FiniteIntRangeOperator.content ::= BuiltInOperator.content ;
BuiltInConstant ::= FiniteIntRangeConstant ;
BuiltInOperator ::= FiniteIntRangeOperator ;
FiniteIntRangeOperator ::= FIRLessThan | FIRLessThanOrEqual | FIRGreaterThan | FIRGreaterThanOrEqual ;
BuiltInSort ::= FiniteIntRange ;
--------------------markup::pnml-guyard-basic.bgf--------------------
Integer ::= integer() ;
NetContent ::= NetContentElement ;
 NetContent ::= Arc ;
Graphics ::= NetGraphics ;
 Graphics ::= NodeGraphics ;
 Graphics ::= EdgeGraphics ;
 Graphics ::= AnnotationGraphics ;
LabeledElement ::= Name ;
 LabeledElement ::= Inscription ;
 LabeledElement ::= InitialMarking ;
Coordinate ::= Position ;
 Coordinate ::= Offset ;
Color ::= ε ;
IdedElement ::= NetElement ;
 IdedElement ::= Node ;
 IdedElement ::= Arc ;
String ::= string() ;
NetContentElement ::= Place ;
 NetContentElement ::= Transition ;
--------------------markup::pnml-guyard-modular.bgf--------------------
Integer ::= integer() ;
NetContent ::= NetContentElement ;
 NetContent ::= Arc ;
 NetContent ::= Page ;
 NetContent ::= ReferencePlace ;
 NetContent ::= ReferenceTransition ;
 NetContent ::= Instance ;
Graphics ::= NetGraphics ;
 Graphics ::= NodeGraphics ;
 Graphics ::= EdgeGraphics ;
 Graphics ::= AnnotationGraphics ;
 Graphics ::= PageGraphics ;
Reference ::= ReferencePlace ;
 Reference ::= ReferenceTransition ;
LabeledElement ::= Name ;
 LabeledElement ::= Inscription ;
 LabeledElement ::= InitialMarking ;
Coordinate ::= Position ;
 Coordinate ::= Offset ;
Color ::= ε ;
IdedElement ::= Module ;
 IdedElement ::= NetElement ;
 IdedElement ::= Node ;
 IdedElement ::= Arc ;
 IdedElement ::= Page ;
 IdedElement ::= Instance ;
String ::= string() ;
NetContentElement ::= Place ;
 NetContentElement ::= Transition ;
--------------------markup::pnml-guyard-simplified.bgf--------------------
Integer ::= integer() ;
NetContent ::= NetContentElement ;
 NetContent ::= Arc ;
LocatedElement ::= IdedElement ;
 LocatedElement ::= URI ;
 LocatedElement ::= PNMLDocument ;
 LocatedElement ::= NetContent ;
 LocatedElement ::= LabeledElement ;
 LocatedElement ::= Label ;
LabeledElement ::= Name ;
Place ::= ε ;
Transition ::= ε ;
IdedElement ::= NetElement ;
 IdedElement ::= NetContentElement ;
 IdedElement ::= Arc ;
String ::= string() ;
NetContentElement ::= Place ;
 NetContentElement ::= Transition ;
--------------------markup::pnml-guyard-structured.bgf--------------------
Integer ::= integer() ;
NetContent ::= NetContentElement ;
 NetContent ::= Arc ;
 NetContent ::= Page ;
 NetContent ::= ReferencePlace ;
 NetContent ::= ReferenceTransition ;
Graphics ::= NetGraphics ;
 Graphics ::= NodeGraphics ;
 Graphics ::= EdgeGraphics ;
 Graphics ::= AnnotationGraphics ;
 Graphics ::= PageGraphics ;
Reference ::= ReferencePlace ;
 Reference ::= ReferenceTransition ;
LabeledElement ::= Name ;
 LabeledElement ::= Inscription ;
 LabeledElement ::= InitialMarking ;
Coordinate ::= Position ;
 Coordinate ::= Offset ;
Color ::= ε ;
IdedElement ::= NetElement ;
 IdedElement ::= Node ;
 IdedElement ::= Arc ;
 IdedElement ::= Page ;
String ::= string() ;
NetContentElement ::= Place ;
 NetContentElement ::= Transition ;
--------------------markup::pnml-highlevelnet.bgf--------------------
Sort ::= BuiltInSort | MultisetSort | ProductSort | UserSort ;
CyclicEnumOperator ::= Successor | Predecessor ;
basicobject.content ::= Name? toolspecific.element* ;
MultisetOperator.content ::= Operator.content ;
StringOperator ::= StringLessThan | StringLessThanOrEqual | StringGreaterThan | StringGreaterThanOrEqual | StringConcatenation | StringAppend | StringLength | Substring ;
BuiltInConstant.content ::= Operator.content ;
BuiltInOperator.content ::= Operator.content ;
anyElement ::= (α | string() | anyElement)* ;
IntegerOperator.content ::= BuiltInOperator.content ;
Number ::= Natural | Positive | Integer ;
pnml.content ::= net.element ;
netobject.content ::= page.content | place.content | transition.content | refplace.content | reftrans.content | arc.content ;
SortDeclaration.content ::= Declaration.content ;
color.type ::= string() ;
pagegraphics.content ::= nodegraphics.content ;
positiveDecimal.content ::= integer() ;
IntegerOperator ::= Addition | Subtraction | Multiplication | Division | Modulo | GreaterThan | GreaterThanOrEqual | LessThan | LessThanOrEqual ;
OperatorDeclaration.content ::= Declaration.content ;
refnode.content ::= identifier.content reference basicobject.content node.content ;
SortDeclaration ::= ArbitrarySort ;
 SortDeclaration ::= Partition ;
 SortDeclaration ::= NamedSort ;
PartitionOperator.content ::= BuiltInOperator.content ;
nodegraphics.content ::= position.element dimension.element? fill.element? line.element? ;
Term.content ::= ε ;
BooleanOperator.content ::= BuiltInOperator.content ;
OperatorDeclaration ::= ArbitraryOperator ;
 OperatorDeclaration ::= PartitionElement ;
 OperatorDeclaration ::= FEConstant ;
 OperatorDeclaration ::= NamedOperator ;
edgegraphics.content ::= position.element* line.element? ;
PartitionOperator ::= PartitionLessThan | PartitionGreaterThan | PartitionElementOf ;
ListOperator.content ::= BuiltInOperator.content ;
Term ::= Variable | Operator ;
FiniteIntRangeOperator.content ::= BuiltInOperator.content ;
BooleanOperator ::= And | Or | Imply | Not ;
CyclicEnumOperator.content ::= BuiltInOperator.content ;
Sort.content ::= ε ;
annotationgraphics.content ::= offset.element fill.element? line.element? font.element? ;
FiniteEnumeration.content ::= FEConstant* ;
ListOperator ::= ListAppend | ListConcatenation | MakeList | ListLength | MemberAtIndex | Sublist ;
FiniteIntRangeOperator ::= FIRLessThan | FIRLessThanOrEqual | FIRGreaterThan | FIRGreaterThanOrEqual ;
simpletextlabel.content ::= simpletext.content annotationstandard.content ;
StringOperator.content ::= BuiltInOperator.content ;
--------------------markup::pnml-hlcorestructure.bgf--------------------
page.labels ::= HLDeclaration* ;
arc.labels ::= HLAnnotation? ;
transition.labels ::= Condition? ;
place.labels ::= Type? HLMarking? ;
net.labels ::= HLDeclaration* ;
--------------------markup::pnml-hlpng.bgf--------------------
Sort ::= BuiltInSort | MultisetSort | ProductSort | UserSort ;
SortDeclaration ::= NamedSort ;
Declaration ::= SortDeclaration | VariableDeclaration | OperatorDeclaration ;
nodegraphics.content ::= position.element dimension.element? fill.element? line.element? ;
basicobject.content ::= Name? toolspecific.element* ;
MultisetOperator.content ::= Operator.content ;
Term.content ::= ε ;
BooleanOperator.content ::= BuiltInOperator.content ;
OperatorDeclaration ::= NamedOperator ;
edgegraphics.content ::= position.element* line.element? ;
BuiltInConstant.content ::= Operator.content ;
BuiltInOperator.content ::= Operator.content ;
anyElement ::= (α | string() | anyElement)* ;
Term ::= Variable | Operator ;
BooleanOperator ::= And | Or | Imply | Not ;
Sort.content ::= ε ;
pnml.content ::= net.element ;
SortDeclaration.content ::= Declaration.content ;
netobject.content ::= page.content | place.content | transition.content | refplace.content | reftrans.content | arc.content ;
color.type ::= string() ;
annotationgraphics.content ::= offset.element fill.element? line.element? font.element? ;
pagegraphics.content ::= nodegraphics.content ;
positiveDecimal.content ::= integer() ;
OperatorDeclaration.content ::= Declaration.content ;
simpletextlabel.content ::= simpletext.content annotationstandard.content ;
refnode.content ::= identifier.content reference basicobject.content node.content ;
--------------------markup::pnml-integers.bgf--------------------
IntegerOperator.content ::= BuiltInOperator.content ;
Number ::= Natural | Positive | Integer ;
BuiltInConstant ::= NumberConstant ;
BuiltInOperator ::= IntegerOperator ;
IntegerOperator ::= Addition | Subtraction | Multiplication | Division | Modulo | GreaterThan | GreaterThanOrEqual | LessThan | LessThanOrEqual ;
BuiltInSort ::= Number ;
--------------------markup::pnml-lists.bgf--------------------
ListOperator.content ::= BuiltInOperator.content ;
BuiltInConstant ::= EmptyList ;
BuiltInOperator ::= ListOperator ;
ListOperator ::= ListAppend | ListConcatenation | MakeList | ListLength | MemberAtIndex | Sublist ;
BuiltInSort ::= List ;
--------------------markup::pnml-multisets.bgf--------------------
MultisetOperator ::= Add | All | NumberOf | Subtract | ScalarProduct | Empty ;
BuiltInOperator ::= Cardinality | CardinalityOf | Contains ;
--------------------markup::rss.bgf--------------------
Integer ::= integer() ;
String ::= string() ;
--------------------markup::pnml-partitions.bgf--------------------
PartitionOperator ::= PartitionLessThan | PartitionGreaterThan | PartitionElementOf ;
SortDeclaration ::= Partition ;
PartitionOperator.content ::= BuiltInOperator.content ;
BuiltInOperator ::= PartitionOperator ;
OperatorDeclaration ::= PartitionElement ;
--------------------markup::pnml-pnmlcoremodel.bgf--------------------
page.labels ::= ε ;
arc.labels ::= ε ;
nodegraphics.content ::= position.element dimension.element? fill.element? line.element? ;
transition.labels ::= ε ;
basicobject.content ::= Name? toolspecific.element* ;
pnml.content ::= net.element ;
netobject.content ::= page.content | place.content | transition.content | refplace.content | reftrans.content | arc.content ;
place.labels ::= ε ;
color.type ::= string() ;
annotationgraphics.content ::= offset.element fill.element? line.element? font.element? ;
pagegraphics.content ::= nodegraphics.content ;
positiveDecimal.content ::= integer() ;
edgegraphics.content ::= position.element* line.element? ;
anyElement ::= (α | string() | anyElement)* ;
simpletextlabel.content ::= simpletext.content annotationstandard.content ;
refnode.content ::= identifier.content reference basicobject.content node.content ;
net.labels ::= ε ;
--------------------markup::pnml-ptnet.bgf--------------------
page.labels ::= ε ;
nodegraphics.content ::= position.element dimension.element? fill.element? line.element? ;
transition.labels ::= ε ;
basicobject.content ::= Name? toolspecific.element* ;
pnml.content ::= net.element ;
netobject.content ::= page.content | place.content | transition.content | refplace.content | reftrans.content | arc.content ;
color.type ::= string() ;
annotationgraphics.content ::= offset.element fill.element? line.element? font.element? ;
pagegraphics.content ::= nodegraphics.content ;
positiveDecimal.content ::= integer() ;
edgegraphics.content ::= position.element* line.element? ;
anyElement ::= (α | string() | anyElement)* ;
simpletextlabel.content ::= simpletext.content annotationstandard.content ;
refnode.content ::= identifier.content reference basicobject.content node.content ;
net.labels ::= ε ;
--------------------markup::pnml-strings.bgf--------------------
BuiltInConstant ::= StringConstant ;
BuiltInOperator ::= StringOperator ;
StringOperator ::= StringLessThan | StringLessThanOrEqual | StringGreaterThan | StringGreaterThanOrEqual | StringConcatenation | StringAppend | StringLength | Substring ;
BuiltInSort ::= String ;
StringOperator.content ::= BuiltInOperator.content ;
--------------------markup::pnml-symmetricnet.bgf--------------------
Sort ::= BuiltInSort | MultisetSort | ProductSort | UserSort ;
CyclicEnumOperator ::= Successor | Predecessor ;
basicobject.content ::= Name? toolspecific.element* ;
MultisetOperator.content ::= Operator.content ;
BuiltInConstant.content ::= Operator.content ;
BuiltInOperator.content ::= Operator.content ;
anyElement ::= (α | string() | anyElement)* ;
IntegerOperator.content ::= BuiltInOperator.content ;
Number ::= Natural | Positive | Integer ;
pnml.content ::= net.element ;
netobject.content ::= page.content | place.content | transition.content | refplace.content | reftrans.content | arc.content ;
SortDeclaration.content ::= Declaration.content ;
color.type ::= string() ;
pagegraphics.content ::= nodegraphics.content ;
positiveDecimal.content ::= integer() ;
IntegerOperator ::= Addition | Subtraction | Multiplication | Division | Modulo | GreaterThan | GreaterThanOrEqual | LessThan | LessThanOrEqual ;
OperatorDeclaration.content ::= Declaration.content ;
refnode.content ::= identifier.content reference basicobject.content node.content ;
SortDeclaration ::= Partition ;
 SortDeclaration ::= NamedSort ;
Declaration ::= SortDeclaration | VariableDeclaration | OperatorDeclaration ;
PartitionOperator.content ::= BuiltInOperator.content ;
nodegraphics.content ::= position.element dimension.element? fill.element? line.element? ;
Term.content ::= ε ;
BooleanOperator.content ::= BuiltInOperator.content ;
OperatorDeclaration ::= PartitionElement ;
 OperatorDeclaration ::= FEConstant ;
 OperatorDeclaration ::= NamedOperator ;
edgegraphics.content ::= position.element* line.element? ;
PartitionOperator ::= PartitionLessThan | PartitionGreaterThan | PartitionElementOf ;
Term ::= Variable | Operator ;
FiniteIntRangeOperator.content ::= BuiltInOperator.content ;
BooleanOperator ::= And | Or | Imply | Not ;
CyclicEnumOperator.content ::= BuiltInOperator.content ;
Sort.content ::= ε ;
annotationgraphics.content ::= offset.element fill.element? line.element? font.element? ;
FiniteEnumeration.content ::= FEConstant* ;
FiniteIntRangeOperator ::= FIRLessThan | FIRLessThanOrEqual | FIRGreaterThan | FIRGreaterThanOrEqual ;
simpletextlabel.content ::= simpletext.content annotationstandard.content ;
--------------------markup::pnml-terms.bgf--------------------
Sort ::= BuiltInSort | MultisetSort | ProductSort | UserSort ;
MultisetOperator ::= ε ;
Term ::= Variable | Operator ;
SortDeclaration ::= NamedSort ;
Declaration ::= SortDeclaration | VariableDeclaration | OperatorDeclaration ;
Sort.content ::= ε ;
MultisetOperator.content ::= Operator.content ;
BuiltInConstant ::= ε ;
BuiltInOperator ::= ε ;
Term.content ::= ε ;
SortDeclaration.content ::= Declaration.content ;
OperatorDeclaration ::= NamedOperator ;
Operator ::= BuiltInOperator | BuiltInConstant | MultisetOperator | Tuple | UserOperator ;
BuiltInConstant.content ::= Operator.content ;
BuiltInOperator.content ::= Operator.content ;
BuiltInSort ::= ε ;
OperatorDeclaration.content ::= Declaration.content ;
--------------------markup::pnml-touzet.bgf--------------------
Integer ::= integer() ;
Element ::= PetriNet ;
 Element ::= Place ;
 Element ::= Transition ;
Arc ::= PlaceToTransArc ;
 Arc ::= TransToPlaceArc ;
String ::= string() ;
--------------------markup::svg-furubayashi-basic.bgf--------------------
SVG.Animation.attrib ::= SVG.XLink.attrib SVG.Animation.extra.attrib ;
SVG.Clip.extra.attrib ::= ε ;
SVG.ViewBoxSpec.datatype ::= string() ;
SVG.View.class ::= SVG.view | SVG.View.extra.class ;
SVG.Opacity.extra.attrib ::= ε ;
SVG.Pattern.extra.class ::= ε ;
SVG.AnimationTiming.extra.attrib ::= ε ;
SVG.XLinkRequired.extra.attrib ::= ε ;
SVG.Lengths.datatype ::= string() ;
SVG.TextContent.extra.class ::= ε ;
SVG.Conditional.extra.class ::= ε ;
SVG.Gradient.extra.class ::= ε ;
SVG.StrokeDashArrayValue.datatype ::= string() ;
SVG.FilterValue.datatype ::= string() ;
SVG.Mask.extra.attrib ::= ε ;
SVG.Script.datatype ::= string() ;
SVG.View.extra.class ::= ε ;
SVG.FontSizeValue.datatype ::= string() ;
SVG.PreserveAspectRatioSpec.datatype ::= string() ;
SVG.StyleSheet.datatype ::= string() ;
SVG.MaskValue.datatype ::= string() ;
SVG.Structure.extra.class ::= ε ;
SVG.Coordinate.datatype ::= string() ;
SVG.FilterPrimitive.class ::= SVG.feBlend | SVG.feColorMatrix | SVG.feComponentTransfer | SVG.feComposite | SVG.feFlood | SVG.feGaussianBlur | SVG.feImage | SVG.feMerge | SVG.feOffset | SVG.feTile | SVG.FilterPrimitive.extra.class ;
SVG.XLinkReplace.extra.attrib ::= ε ;
SVG.FontSizeAdjustValue.datatype ::= string() ;
SVG.Conditional.class ::= SVG.switch | SVG.Conditional.extra.class ;
SVG.XLinkEmbed.extra.attrib ::= ε ;
SVG.Points.datatype ::= string() ;
SVG.Animation.class ::= SVG.animate | SVG.set | SVG.animateMotion | SVG.animateColor | SVG.animateTransform | SVG.Animation.extra.class ;
SVG.ClipPathValue.datatype ::= string() ;
SVG.FontFamilyValue.datatype ::= string() ;
SVG.Image.extra.class ::= ε ;
SVG.Description.class ::= SVG.desc | SVG.title | SVG.metadata | SVG.Description.extra.class ;
SVG.Marker.attrib ::= ε ;
SVG.GlyphOrientationHorizontalValue.datatype ::= string() ;
SVG.URI.datatype ::= string() ;
SVG.Filter.extra.class ::= ε ;
SVG.ID.datatype ::= string() ;
SVG.Profile.class ::= SVG.color-profile | SVG.Profile.extra.class ;
SVG.ContentType.datatype ::= string() ;
SVG.ClassList.datatype ::= string() ;
SVG.KerningValue.datatype ::= string() ;
SVG.Mask.extra.class ::= ε ;
SVG.Graphics.extra.attrib ::= ε ;
SVG.AnimationValue.extra.attrib ::= ε ;
SVG.Animation.extra.attrib ::= ε ;
SVG.SpacingValue.datatype ::= string() ;
SVG.DocumentEvents.attrib ::= SVG.onunload.attrib SVG.onabort.attrib SVG.onerror.attrib SVG.onresize.attrib SVG.onscroll.attrib SVG.onzoom.attrib SVG.DocumentEvents.extra.attrib ;
SVG.NumberOptionalNumber.datatype ::= string() ;
SVG.BaselineShiftValue.datatype ::= string() ;
SVG.GraphicalEvents.extra.attrib ::= ε ;
SVG.foreignObject.content ::= SVG.foreignObject.class* ;
SVG.Numbers.datatype ::= string() ;
SVG.Style.extra.attrib ::= ε ;
SVG.Profile.extra.class ::= ε ;
SVG.StrokeWidthValue.datatype ::= string() ;
SVG.Font.extra.class ::= ε ;
SVG.AnimationEvents.extra.attrib ::= ε ;
SVG.Script.extra.class ::= ε ;
SVG.Text.class ::= SVG.text | SVG.altGlyphDef | SVG.Text.extra.class ;
SVG.Paint.datatype ::= string() ;
SVG.LinkTarget.datatype ::= string() ;
SVG.StrokeMiterLimitValue.datatype ::= string() ;
SVG.Boolean.datatype ::= string() ;
SVG.Structure.class ::= SVG.svg | SVG.g | SVG.defs | SVG.symbol | SVG.Use.class | SVG.Structure.extra.class ;
SVG.Presentation.extra.attrib ::= ε ;
SVG.Cursor.class ::= ε ;
SVG.Use.extra.class ::= ε ;
SVG.Extensibility.class ::= SVG.foreignObject | SVG.Extensibility.extra.class ;
SVG.TextDecorationValue.datatype ::= string() ;
SVG.FeatureList.datatype ::= string() ;
SVG.Viewport.extra.attrib ::= ε ;
SVG.Animation.extra.class ::= ε ;
SVG.Clip.class ::= SVG.clipPath | SVG.Clip.extra.class ;
SVG.Text.extra.class ::= ε ;
SVG.OpacityValue.datatype ::= string() ;
SVG.External.extra.attrib ::= ε ;
SVG.Container.attrib ::= ε ;
SVG.Description.extra.class ::= ε ;
SVG.Font.extra.attrib ::= ε ;
SVG.Image.class ::= SVG.image | SVG.Image.extra.class ;
SVG.Conditional.extra.attrib ::= ε ;
SVG.Filter.extra.attrib ::= ε ;
SVG.AnimationAttribute.extra.attrib ::= ε ;
SVG.foreignObject.class ::= string() ;
SVG.Pattern.class ::= SVG.pattern | SVG.Pattern.extra.class ;
SVG.XLink.extra.attrib ::= ε ;
SVG.Marker.class ::= ε ;
SVG.TextContent.class ::= SVG.tspan | SVG.tref | SVG.textPath | SVG.altGlyph | SVG.TextContent.extra.class ;
SVG.Extensibility.extra.class ::= ε ;
SVG.SVGColor.datatype ::= string() ;
SVG.StrokeDashOffsetValue.datatype ::= string() ;
SVG.Hyperlink.extra.class ::= ε ;
SVG.Gradient.class ::= SVG.linearGradient | SVG.radialGradient | SVG.Gradient.extra.class ;
SVG.NumberOrPercentage.datatype ::= string() ;
SVG.Text.extra.attrib ::= ε ;
SVG.ExtensionList.datatype ::= string() ;
SVG.ClipValue.datatype ::= string() ;
SVG.Text.datatype ::= string() ;
SVG.PathData.datatype ::= string() ;
SVG.DocumentEvents.extra.attrib ::= ε ;
SVG.FilterColor.extra.attrib ::= ε ;
SVG.TransformList.datatype ::= string() ;
SVG.Style.class ::= SVG.style | SVG.Style.extra.class ;
SVG.FilterPrimitive.extra.attrib ::= ε ;
SVG.FilterPrimitive.extra.class ::= ε ;
SVG.LanguageCodes.datatype ::= string() ;
SVG.MediaDesc.datatype ::= string() ;
XLinkRequired.attrib ::= ε ;
SVG.Hyperlink.class ::= SVG.a | SVG.Hyperlink.extra.class ;
SVG.FilterPrimitiveWithIn.extra.attrib ::= ε ;
SVG.Font.class ::= SVG.font | SVG.font-face | SVG.Font.extra.class ;
SVG.Length.datatype ::= string() ;
SVG.Shape.class ::= SVG.path | SVG.rect | SVG.circle | SVG.line | SVG.ellipse | SVG.polyline | SVG.polygon | SVG.Shape.extra.class ;
SVG.Number.datatype ::= integer() ;
SVG.Script.class ::= SVG.script | SVG.Script.extra.class ;
SVG.Integer.datatype ::= integer() ;
SVG.Color.extra.attrib ::= ε ;
SVG.Gradient.extra.attrib ::= ε ;
SVG.ClipFillRule.datatype ::= string() ;
SVG.Color.datatype ::= string() ;
SVG.Cursor.attrib ::= ε ;
SVG.Profile.extra.attrib ::= ε ;
SVG.TextContent.extra.attrib ::= ε ;
SVG.Style.extra.class ::= ε ;
XLinkEmbed.attrib ::= ε ;
SVG.Core.extra.attrib ::= ε ;
SVG.Filter.class ::= SVG.filter | SVG.Filter.extra.class ;
SVG.Use.class ::= SVG.use | SVG.Use.extra.class ;
SVG.Clip.extra.class ::= ε ;
SVG.GlyphOrientationVerticalValue.datatype ::= string() ;
SVG.LanguageCode.datatype ::= string() ;
SVG.Shape.extra.class ::= ε ;
SVG.Paint.extra.attrib ::= ε ;
SVG.Coordinates.datatype ::= string() ;
SVG.Mask.class ::= SVG.mask | SVG.Mask.extra.class ;
SVG.AnimationAddition.extra.attrib ::= ε ;
--------------------markup::svg-furubayashi-tiny.bgf--------------------
SVG.Gradient.attrib ::= ε ;
SVG.Paint.datatype ::= string() ;
SVG.Animation.attrib ::= SVG.XLink.attrib SVG.Animation.extra.attrib ;
SVG.LinkTarget.datatype ::= string() ;
SVG.ViewBoxSpec.datatype ::= string() ;
SVG.View.class ::= SVG.view | SVG.View.extra.class ;
SVG.StrokeMiterLimitValue.datatype ::= string() ;
SVG.GraphicalEvents.attrib ::= ε ;
SVG.Boolean.datatype ::= string() ;
SVG.Structure.class ::= SVG.g | SVG.defs | SVG.Use.class | SVG.Structure.extra.class ;
SVG.Presentation.extra.attrib ::= ε ;
SVG.AnimationTiming.extra.attrib ::= ε ;
SVG.XLinkRequired.extra.attrib ::= ε ;
SVG.Lengths.datatype ::= string() ;
SVG.Cursor.class ::= ε ;
SVG.Extensibility.class ::= SVG.foreignObject | SVG.Extensibility.extra.class ;
SVG.Use.extra.class ::= ε ;
SVG.FeatureList.datatype ::= string() ;
SVG.Conditional.extra.class ::= ε ;
SVG.StrokeDashArrayValue.datatype ::= string() ;
SVG.Animation.extra.class ::= ε ;
SVG.Clip.class ::= ε ;
SVG.Text.extra.class ::= ε ;
SVG.OpacityValue.datatype ::= string() ;
SVG.External.extra.attrib ::= ε ;
SVG.Text.attrib ::= ε ;
SVG.Container.attrib ::= ε ;
SVG.Clip.attrib ::= ε ;
SVG.Description.extra.class ::= ε ;
SVG.Font.extra.attrib ::= ε ;
SVG.Script.datatype ::= string() ;
SVG.View.extra.class ::= ε ;
SVG.Image.class ::= SVG.image | SVG.Image.extra.class ;
SVG.FontSizeValue.datatype ::= string() ;
SVG.StyleSheet.datatype ::= string() ;
SVG.PreserveAspectRatioSpec.datatype ::= string() ;
SVG.Conditional.extra.attrib ::= ε ;
SVG.FilterColor.attrib ::= ε ;
SVG.Structure.extra.class ::= ε ;
SVG.AnimationAttribute.extra.attrib ::= ε ;
SVG.foreignObject.class ::= string() ;
SVG.Pattern.class ::= ε ;
SVG.Coordinate.datatype ::= string() ;
SVG.XLink.extra.attrib ::= ε ;
SVG.Marker.class ::= ε ;
SVG.Extensibility.extra.class ::= ε ;
SVG.XLinkReplace.extra.attrib ::= ε ;
SVG.SVGColor.datatype ::= string() ;
SVG.Hyperlink.extra.class ::= ε ;
SVG.Viewport.attrib ::= ε ;
SVG.StrokeDashOffsetValue.datatype ::= string() ;
SVG.Conditional.class ::= SVG.switch | SVG.Conditional.extra.class ;
SVG.XLinkEmbed.extra.attrib ::= ε ;
SVG.Points.datatype ::= string() ;
SVG.Gradient.class ::= ε ;
SVG.Animation.class ::= SVG.animate | SVG.set | SVG.animateMotion | SVG.animateColor | SVG.animateTransform | SVG.Animation.extra.class ;
SVG.Mask.attrib ::= ε ;
SVG.ExtensionList.datatype ::= string() ;
SVG.FontFamilyValue.datatype ::= string() ;
SVG.Image.extra.class ::= ε ;
SVG.Description.class ::= SVG.desc | SVG.title | SVG.metadata | SVG.Description.extra.class ;
SVG.Text.datatype ::= string() ;
SVG.Profile.attrib ::= ε ;
SVG.PathData.datatype ::= string() ;
SVG.Filter.attrib ::= ε ;
SVG.Marker.attrib ::= ε ;
SVG.TransformList.datatype ::= string() ;
SVG.Style.class ::= SVG.style | SVG.Style.extra.class ;
SVG.URI.datatype ::= string() ;
SVG.LanguageCodes.datatype ::= string() ;
SVG.ID.datatype ::= string() ;
SVG.Profile.class ::= ε ;
SVG.ContentType.datatype ::= string() ;
SVG.MediaDesc.datatype ::= string() ;
XLinkRequired.attrib ::= ε ;
SVG.ClassList.datatype ::= string() ;
SVG.Hyperlink.class ::= SVG.a | SVG.Hyperlink.extra.class ;
SVG.AnimationEvents.attrib ::= ε ;
SVG.Font.class ::= SVG.font | SVG.font-face | SVG.Font.extra.class ;
SVG.Length.datatype ::= string() ;
SVG.Shape.class ::= SVG.path | SVG.rect | SVG.circle | SVG.line | SVG.ellipse | SVG.polyline | SVG.polygon | SVG.Shape.extra.class ;
SVG.Graphics.extra.attrib ::= ε ;
SVG.Script.class ::= SVG.script | SVG.Script.extra.class ;
SVG.Number.datatype ::= integer() ;
SVG.AnimationValue.extra.attrib ::= ε ;
SVG.Integer.datatype ::= integer() ;
SVG.Color.extra.attrib ::= ε ;
SVG.Animation.extra.attrib ::= ε ;
SVG.DocumentEvents.attrib ::= ε ;
SVG.ClipFillRule.datatype ::= string() ;
SVG.Color.datatype ::= string() ;
SVG.Cursor.attrib ::= ε ;
SVG.Opacity.attrib ::= ε ;
SVG.foreignObject.content ::= SVG.foreignObject.class* ;
SVG.TextContent.extra.attrib ::= ε ;
SVG.Style.extra.class ::= ε ;
SVG.Numbers.datatype ::= string() ;
XLinkEmbed.attrib ::= ε ;
SVG.Style.extra.attrib ::= ε ;
SVG.Core.extra.attrib ::= ε ;
SVG.Filter.class ::= ε ;
SVG.Use.class ::= SVG.use | SVG.Use.extra.class ;
SVG.StrokeWidthValue.datatype ::= string() ;
SVG.Font.extra.class ::= ε ;
SVG.Shape.extra.class ::= ε ;
SVG.LanguageCode.datatype ::= string() ;
SVG.Paint.extra.attrib ::= ε ;
SVG.Script.extra.class ::= ε ;
SVG.Coordinates.datatype ::= string() ;
SVG.Text.class ::= SVG.text | SVG.Text.extra.class ;
SVG.Mask.class ::= ε ;
SVG.AnimationAddition.extra.attrib ::= ε ;
--------------------markup::svg-furubayashi.bgf--------------------
SVG.Animation.attrib ::= SVG.XLink.attrib SVG.Animation.extra.attrib ;
SVG.Clip.extra.attrib ::= ε ;
SVG.ViewBoxSpec.datatype ::= string() ;
SVG.View.class ::= SVG.view | SVG.View.extra.class ;
SVG.Opacity.extra.attrib ::= ε ;
SVG.Pattern.extra.class ::= ε ;
SVG.AnimationTiming.extra.attrib ::= ε ;
SVG.XLinkRequired.extra.attrib ::= ε ;
SVG.Lengths.datatype ::= string() ;
SVG.TextContent.extra.class ::= ε ;
SVG.Conditional.extra.class ::= ε ;
SVG.Gradient.extra.class ::= ε ;
SVG.StrokeDashArrayValue.datatype ::= string() ;
SVG.FilterValue.datatype ::= string() ;
SVG.Mask.extra.attrib ::= ε ;
SVG.Script.datatype ::= string() ;
SVG.View.extra.class ::= ε ;
SVG.FontSizeValue.datatype ::= string() ;
SVG.PreserveAspectRatioSpec.datatype ::= string() ;
SVG.StyleSheet.datatype ::= string() ;
SVG.MaskValue.datatype ::= string() ;
SVG.Structure.extra.class ::= ε ;
SVG.Marker.extra.attrib ::= ε ;
SVG.Coordinate.datatype ::= string() ;
SVG.FilterPrimitive.class ::= SVG.feBlend | SVG.feColorMatrix | SVG.feComponentTransfer | SVG.feComposite | SVG.feConvolveMatrix | SVG.feDiffuseLighting | SVG.feDisplacementMap | SVG.feFlood | SVG.feGaussianBlur | SVG.feImage | SVG.feMerge | SVG.feMorphology | SVG.feOffset | SVG.feSpecularLighting | SVG.feTile | SVG.feTurbulence | SVG.FilterPrimitive.extra.class ;
SVG.XLinkReplace.extra.attrib ::= ε ;
SVG.FontSizeAdjustValue.datatype ::= string() ;
SVG.Conditional.class ::= SVG.switch | SVG.Conditional.extra.class ;
SVG.XLinkEmbed.extra.attrib ::= ε ;
SVG.Points.datatype ::= string() ;
SVG.Animation.class ::= SVG.animate | SVG.set | SVG.animateMotion | SVG.animateColor | SVG.animateTransform | SVG.Animation.extra.class ;
SVG.ClipPathValue.datatype ::= string() ;
SVG.FontFamilyValue.datatype ::= string() ;
SVG.Image.extra.class ::= ε ;
SVG.Description.class ::= SVG.desc | SVG.title | SVG.metadata | SVG.Description.extra.class ;
SVG.GlyphOrientationHorizontalValue.datatype ::= string() ;
SVG.URI.datatype ::= string() ;
SVG.Filter.extra.class ::= ε ;
SVG.ID.datatype ::= string() ;
SVG.Profile.class ::= SVG.color-profile | SVG.Profile.extra.class ;
SVG.ContentType.datatype ::= string() ;
SVG.ClassList.datatype ::= string() ;
SVG.KerningValue.datatype ::= string() ;
SVG.Mask.extra.class ::= ε ;
SVG.Graphics.extra.attrib ::= ε ;
SVG.AnimationValue.extra.attrib ::= ε ;
SVG.Animation.extra.attrib ::= ε ;
SVG.SpacingValue.datatype ::= string() ;
SVG.DocumentEvents.attrib ::= SVG.onunload.attrib SVG.onabort.attrib SVG.onerror.attrib SVG.onresize.attrib SVG.onscroll.attrib SVG.onzoom.attrib SVG.DocumentEvents.extra.attrib ;
SVG.NumberOptionalNumber.datatype ::= string() ;
SVG.BaselineShiftValue.datatype ::= string() ;
SVG.GraphicalEvents.extra.attrib ::= ε ;
SVG.foreignObject.content ::= SVG.foreignObject.class* ;
SVG.Numbers.datatype ::= string() ;
SVG.Style.extra.attrib ::= ε ;
SVG.Cursor.extra.class ::= ε ;
SVG.Profile.extra.class ::= ε ;
SVG.StrokeWidthValue.datatype ::= string() ;
SVG.Font.extra.class ::= ε ;
SVG.AnimationEvents.extra.attrib ::= ε ;
SVG.Script.extra.class ::= ε ;
SVG.Text.class ::= SVG.text | SVG.altGlyphDef | SVG.Text.extra.class ;
SVG.Paint.datatype ::= string() ;
SVG.LinkTarget.datatype ::= string() ;
SVG.StrokeMiterLimitValue.datatype ::= string() ;
SVG.Boolean.datatype ::= string() ;
SVG.Structure.class ::= SVG.svg | SVG.g | SVG.defs | SVG.symbol | SVG.Use.class | SVG.Structure.extra.class ;
SVG.Presentation.extra.attrib ::= ε ;
SVG.Marker.extra.class ::= ε ;
SVG.Cursor.class ::= SVG.cursor | SVG.Cursor.extra.class ;
SVG.Use.extra.class ::= ε ;
SVG.Extensibility.class ::= SVG.foreignObject | SVG.Extensibility.extra.class ;
SVG.TextDecorationValue.datatype ::= string() ;
SVG.FeatureList.datatype ::= string() ;
SVG.Viewport.extra.attrib ::= ε ;
SVG.Animation.extra.class ::= ε ;
SVG.Clip.class ::= SVG.clipPath | SVG.Clip.extra.class ;
SVG.Text.extra.class ::= ε ;
SVG.OpacityValue.datatype ::= string() ;
SVG.External.extra.attrib ::= ε ;
SVG.Container.attrib ::= ε ;
SVG.Description.extra.class ::= ε ;
SVG.Font.extra.attrib ::= ε ;
SVG.Image.class ::= SVG.image | SVG.Image.extra.class ;
SVG.Conditional.extra.attrib ::= ε ;
SVG.Filter.extra.attrib ::= ε ;
SVG.AnimationAttribute.extra.attrib ::= ε ;
SVG.foreignObject.class ::= string() ;
SVG.Pattern.class ::= SVG.pattern | SVG.Pattern.extra.class ;
SVG.XLink.extra.attrib ::= ε ;
SVG.Marker.class ::= SVG.marker | SVG.Marker.extra.class ;
SVG.TextContent.class ::= SVG.tspan | SVG.tref | SVG.textPath | SVG.altGlyph | SVG.TextContent.extra.class ;
SVG.Extensibility.extra.class ::= ε ;
SVG.SVGColor.datatype ::= string() ;
SVG.StrokeDashOffsetValue.datatype ::= string() ;
SVG.Hyperlink.extra.class ::= ε ;
SVG.Gradient.class ::= SVG.linearGradient | SVG.radialGradient | SVG.Gradient.extra.class ;
SVG.NumberOrPercentage.datatype ::= string() ;
SVG.CursorValue.datatype ::= string() ;
SVG.Text.extra.attrib ::= ε ;
SVG.ExtensionList.datatype ::= string() ;
SVG.ClipValue.datatype ::= string() ;
SVG.Text.datatype ::= string() ;
SVG.PathData.datatype ::= string() ;
SVG.DocumentEvents.extra.attrib ::= ε ;
SVG.FilterColor.extra.attrib ::= ε ;
SVG.TransformList.datatype ::= string() ;
SVG.Style.class ::= SVG.style | SVG.Style.extra.class ;
SVG.FilterPrimitive.extra.attrib ::= ε ;
SVG.FilterPrimitive.extra.class ::= ε ;
SVG.LanguageCodes.datatype ::= string() ;
SVG.MediaDesc.datatype ::= string() ;
XLinkRequired.attrib ::= ε ;
SVG.Hyperlink.class ::= SVG.a | SVG.Hyperlink.extra.class ;
SVG.FilterPrimitiveWithIn.extra.attrib ::= ε ;
SVG.MarkerValue.datatype ::= string() ;
SVG.Font.class ::= SVG.font | SVG.font-face | SVG.Font.extra.class ;
SVG.Length.datatype ::= string() ;
SVG.Shape.class ::= SVG.path | SVG.rect | SVG.circle | SVG.line | SVG.ellipse | SVG.polyline | SVG.polygon | SVG.Shape.extra.class ;
SVG.Number.datatype ::= integer() ;
SVG.Script.class ::= SVG.script | SVG.Script.extra.class ;
SVG.Integer.datatype ::= integer() ;
SVG.Color.extra.attrib ::= ε ;
SVG.Gradient.extra.attrib ::= ε ;
SVG.ClipFillRule.datatype ::= string() ;
SVG.Color.datatype ::= string() ;
SVG.Cursor.attrib ::= ε ;
SVG.Profile.extra.attrib ::= ε ;
SVG.TextContent.extra.attrib ::= ε ;
SVG.Style.extra.class ::= ε ;
XLinkEmbed.attrib ::= ε ;
SVG.Core.extra.attrib ::= ε ;
SVG.Filter.class ::= SVG.filter | SVG.Filter.extra.class ;
SVG.Use.class ::= SVG.use | SVG.Use.extra.class ;
SVG.Clip.extra.class ::= ε ;
SVG.GlyphOrientationVerticalValue.datatype ::= string() ;
SVG.LanguageCode.datatype ::= string() ;
SVG.Shape.extra.class ::= ε ;
SVG.Paint.extra.attrib ::= ε ;
SVG.Coordinates.datatype ::= string() ;
SVG.Mask.class ::= SVG.mask | SVG.Mask.extra.class ;
SVG.AnimationAddition.extra.attrib ::= ε ;
--------------------markup::svg-palies.bgf--------------------
TextElement ::= Text ;
 TextElement ::= Tspan ;
 TextElement ::= Tref ;
StructuralElement ::= Image ;
 StructuralElement ::= Svg ;
 StructuralElement ::= GroupingElement ;
 StructuralElement ::= Use ;
Integer ::= integer() ;
Ellipse ::= ε ;
Transform ::= Scale ;
 Transform ::= Translate ;
 Transform ::= Rotate ;
Attribute ::= Transform ;
 Attribute ::= Visibility ;
 Attribute ::= FontWeight ;
 Attribute ::= FontStyle ;
Element ::= StructuralElement ;
 Element ::= GraphicalElement ;
Coordinates ::= RelativeCoord ;
 Coordinates ::= AbsoluteCoord ;
GraphicalElement ::= Shape ;
 GraphicalElement ::= TextElement ;
GroupingElement ::= G ;
 GroupingElement ::= Defs ;
 GroupingElement ::= Symbol ;
ReferencedFile ::= SvgFile ;
String ::= string() ;
Shape ::= Rect ;
 Shape ::= Circle ;
 Shape ::= Ellipse ;
 Shape ::= Line ;
 Shape ::= Polyline ;
 Shape ::= Polygon ;
 Shape ::= Path ;
 Shape ::= Point ;
 Shape ::= Marker ;
Point ::= ε ;
Circle ::= ε ;
--------------------markup::uiml.bgf--------------------
Integer ::= integer() ;
Iterator ::= ConstantIterator ;
 Iterator ::= PropertyIterator ;
 Iterator ::= CallIterator ;
 Iterator ::= TextIterator ;
Condition ::= EventCondition ;
 Condition ::= EqualCondition ;
 Condition ::= OpCondition ;
Source ::= LocalSource ;
 Source ::= RemoteSource ;
Template ::= BehaviorTemplate ;
 Template ::= DClassTemplate ;
 Template ::= DComponentTemplate ;
 Template ::= ConstantTemplate ;
 Template ::= ContentTemplate ;
 Template ::= InterfaceTemplate ;
 Template ::= LogicTemplate ;
 Template ::= PartTemplate ;
 Template ::= PeerTemplate ;
 Template ::= PresentationTemplate ;
 Template ::= PropertyTemplate ;
 Template ::= RestructureTemplate ;
 Template ::= RuleTemplate ;
 Template ::= ScriptTemplate ;
 Template ::= StructureTemplate ;
 Template ::= StyleTemplate ;
Parameter ::= PropertyParameter ;
 Parameter ::= ReferenceParameter ;
 Parameter ::= CallParameter ;
 Parameter ::= OperationParameter ;
 Parameter ::= EventParameter ;
 Parameter ::= ConstantParameter ;
 Parameter ::= IteratorParameter ;
Equal ::= EqualToConstant ;
 Equal ::= EqualToProperty ;
 Equal ::= EqualToReference ;
 Equal ::= EqualToOperation ;
String ::= string() ;
ExtensibleElement ::= Peer ;
 ExtensibleElement ::= Presentation ;
 ExtensibleElement ::= Logic ;
 ExtensibleElement ::= DComponent ;
 ExtensibleElement ::= DClass ;
 ExtensibleElement ::= DMethod ;
 ExtensibleElement ::= Script ;
 ExtensibleElement ::= Interface ;
 ExtensibleElement ::= Structure ;
 ExtensibleElement ::= Part ;
 ExtensibleElement ::= Style ;
 ExtensibleElement ::= Property ;
 ExtensibleElement ::= Content ;
 ExtensibleElement ::= Behavior ;
 ExtensibleElement ::= Constant ;
 ExtensibleElement ::= Rule ;
 ExtensibleElement ::= Restructure ;
--------------------markup::wiki-mediawiki-bnf.bgf--------------------
nowiki-body ::= characters ;
html-unsafe-symbol ::= unescaped-ampersand | unescaped-less-than | unescaped-greater-than ;
sub-page ::= sub-page-separator page-char+ ;
link ::= internal-link | external-link ;
any-supported-unicode-character ::= α ;
special-block ::= horizontal-rule | heading | list-item | table | space-block ;
canonical-page-first-char ::= ucase-letter | decimal-digit | underscore ;
Whitespaces ::= newline | TAB | space ;
article ::= special-block-and-more | paragraph-and-more ;
line ::= plain-text+ (spaces plain-text+)* ;
title-character ::= <unicode-character bad-title-characters> ;
url-char ::= LEGAL_URL_ENTITY ;
image-align-parameter ::= image-align-left | image-align-center | image-align-right | image-align-none ;
url ::= protocol url-path ;
any-text ::= unicode-character* ;
html-block ::= html-opening-tag whitespace? html-body whitespace? html-closing-tag? ;
characters ::= character+ ;
digits ::= decimal-digit+ ;
caption ::= inline-text ;
space-tabs ::= space-tab+ ;
formatting ::= bold-italic-toggle | bold-toggle | italic-toggle ;
pre-block ::= pre-opening-tag whitespace? pre-body whitespace? pre-closing-tag? ;
list-item ::= indent-item | enumerated-item | bullet-item ;
EOL ::= newline | EOF ;
inline-text ::= inline-element inline-text? ;
special-block-and-more ::= special-block EOF | (newline? special-block-and-more) | (newline? paragraph-and-more) ;
image-valign-parameter ::= image-valign-baseline | image-valign-sub | image-valign-super | image-valign-top | image-valign-text-top | image-valign-middle | image-valign-bottom | image-valign-text-bottom ;
redirect ::= redirect-tag characters internal-link-start article-link internal-link-end | pipe | EOL ;
namespace ::= string() ;
page-char ::= canonical-page-char | space ;
page-first-char ::= canonical-page-first-char | lcase-letter ;
space-tab ::= space | TAB ;
table-parameters ::= CSS | html-table-attributes ;
inline-element ::= category-link | link | magic-link | image-inline | gallery-block | media-inline | text-with-formatting ;
decimal-number ::= decimal-digit+ ;
behaviour-switch ::= behaviourswitch-toc | behaviourswitch-forcetoc | behaviourswitch-notoc | behaviourswitch-noeditsection | behaviourswitch-nogallery ;
url-path ::= url-char url-path? ;
extra-description ::= letter+ ;
canonical-page-char ::= letter | decimal-digit | underscore ;
hex-number ::= hex-digit+ ;
image-other-parameter ::= image-param-page | image-param-upright | image-param-border ;
unicode-character ::= <any-supported-unicode-character Whitespaces> ;
table-cell-parameters ::= CSS | html-cell-attributes ;
table-column ::= table-column-line | table-column-multiline ;
nowiki-block ::= nowiki-opening-tag whitespace? nowiki-body whitespace? nowiki-closing-tag? ;
image-mode-parameter ::= image-mode-manual-thumb | image-mode-auto-thumb | image-mode-frame | image-mode-frameless ;
sort-key ::= any-text ;
spaces ::= space+ ;
text-with-formatting ::= formatting | inline-html | noparse-block | behaviour-switch | html-entity | html-unsafe-symbol | text | random-character ;
space-block-2 ::= space inline-text? newline ;
link-description ::= article-title ;
character ::= whitespace-char | non-whitespace-char | html-entity ;
image-option ::= image-mode-parameter | image-size-parameter | image-align-parameter | image-valign-parameter | caption | image-other-parameter ;
letter ::= ucase-letter | lcase-letter ;
non-whitespace-char ::= letter | decimal-digit | symbol ;
whitespace-char ::= space-tab | newline ;
unicode-wiki ::= <unicode-character wiki-markup-characters> ;
random-character ::= α ;
magic-link ::= isbn | rfc-number | pmid-number ;
lines-of-text ::= line-of-text lines-of-text? ;
html-entity-name ::= wgHtmlEntities ;
noparse-block ::= nowiki-block | html-block | math-block | pre-block | html-comment ;
page ::= page-first-char page-char* ;
pre-body ::= characters ;
line-of-text ::= inline-text newline ;
paragraph-and-more ::= paragraph EOF | (newline? special-block-and-more) | (newline paragraph-and-more) ;
page-name ::= title-character (space? title-character)* ;
space-block ::= space inline-text newline space-block-2* ;
html-body ::= characters ;
heading ::= level-6-heading | level-5-heading | level-4-heading | level-3-heading | level-2-heading | level-1-heading ;
--------------------markup::wiki-mediawiki-ebnf.bgf--------------------
table ::= table_start table_header? table_row? table_body table_end ;
header ::= header1 | header2 | header3 | header4 | header5 | header6 ;
text ::= Unicode_char* ;
name ::= balanced_text ;
namespace ::= Unicode_char Unicode_char* ;
pagename ::= Unicode_char Unicode_char* ;
header_end ::= whitespace? line_break ;
Unicode_char ::= α ;
title ::= balanced_text ;
include ::= template | tplarg ;
balanced_text ::= text_without_consecutive_equal_braces (include text_without_consecutive_equal_braces)* ;
table_body ::= table_header_cell | table_cell (table_row table_header_cell | table_cell)* ;
value ::= balanced_text ;
--------------------markup::wiki-table.bgf--------------------
Integer ::= integer() ;
LocatedElement ::= Table ;
 LocatedElement ::= Caption ;
 LocatedElement ::= Row ;
 LocatedElement ::= Cell ;
String ::= string() ;
--------------------fl::dcg.bgf--------------------
program ::= function+ ;
--------------------fl::ecore.bgf--------------------
Exp ::= LiteralExp | ArgumentExp | IfThenElseExp | ApplyExp | BinaryExp ;
BinaryExp ::= PlusExp | MinusExp | EqualExp ;
--------------------fl::emf.bgf--------------------
Expr ::= Apply | Argument | Binary | IfThenElse | Literal ;
--------------------fl::jaxb.bgf--------------------
ObjectFactory ::= ε ;
package-info ::= φ ;
Expr ::= Apply | Argument | Binary | IfThenElse | Literal ;
--------------------fl::om.bgf--------------------
Visitor ::= φ ;
Expr ::= Apply | Argument | Binary | IfThenElse | Literal ;
--------------------fl::python.bgf--------------------
apply ::= name atom+ ;
name ::= string() ;
expr ::= binary | apply | ifThenElse ;
program ::= function+ StringEnd ;
ifThenElse ::= _IF expr _THEN expr _ELSE expr ;
binary ::= atom (operators atom)* ;
_Literal ::= Literal ;
--------------------fl::rascal.bgf--------------------
Program ::= Function+ ε ;
--------------------fl::sdf.bgf--------------------
Program ::= Function+ ;
--------------------fl::txl.bgf--------------------
program ::= fun+ ;
--------------------fl::xsd.bgf--------------------
Expr ::= Literal | Argument | Binary | IfThenElse | Apply ;
Fragment ::= Expr ;
--------------------metasyntax::bnf-sdf.bgf--------------------
Terminal ::= string() ;
Rules ::= Rule* ;
--------------------metasyntax::txl.bgf--------------------
ruleApplications ::= IN IN commentNL* ruleApplication+ EX EX ruleoptNL? ;
typeidOrQuotedLiteral ::= typeid | quotedLiteral ;
RESET ::= EX EX EX EX EX EX EX EX EX ;
commentNL ::= SP SP comment NEWoptNL? ;
formalArgument ::= varid SP type commentNL* ;
compound ::= literal SP ;
expression ::= varid ruleApplications? ;
formatCues ::= IN IN formatCue+ EX EX optNL? ;
ruleoptNL ::= NL ;
program ::= statement* ;
varid ::= id ;
replacement ::= literalOrExpression* NL ;
NEWoptNL ::= NL ;
optNL ::= NL ;
pattern ::= literalOrVariable* NL ;
--------------------metasyntax::ebnf-bgf.bgf--------------------
start-nonterminal-metasymbol ::= ε ;
terminal ::= start-terminal-metasymbol string() end-terminal-metasymbol ;
nonterminal ::= start-nonterminal-metasymbol string() end-nonterminal-metasymbol ;
production ::= label? string() defining-metasymbol right-hand-side terminator-metasymbol ;
expression ::= empty | epsilon | any | value | selectable-expression | marked-expression | repetition-expression | optional-expression | terminal | nonterminal | group-expression ;
grammar ::= production+ ;
group-expression ::= start-group-metasymbol expression end-group-metasymbol ;
optional-expression ::= expression optionality-metasymbol ;
repetition-expression ::= expression repetition-metasymbol ;
right-hand-side ::= (definition-separator-metasymbol definition)+ ;
end-nonterminal-metasymbol ::= ε ;
--------------------metasyntax::ebnf-iso-1.bgf--------------------
commentless_symbol ::= terminal_character | meta_identifier | integer | terminal_string | special_sequence ;
integer ::= decimal_digit+ ;
definitions_list ::= single_definition (definition_separator_symbol single_definition)* ;
gap_separator ::= space_character | horizontal_tabulation_character | new_line | vertical_tabulation_character | form_feed ;
bracketed_textual_comment ::= start_comment_symbol comment_symbol* end_comment_symbol ;
syntax_rule ::= meta_identifier defining_symbol definitions_list terminator_symbol ;
comment_symbol ::= bracketed_textual_comment | other_character | commentless_symbol ;
first_terminal_character ::= terminal_character ;
empty_sequence ::= ε ;
special_sequence_character ::= terminal_character ;
second_terminal_character ::= terminal_character ;
syntactic_exception ::= syntactic-factor ;
syntactic_factor ::= (integer repetition_symbol)? syntactic_primary ;
meta_identifier_character ::= letter | decimal_digit ;
syntactic_term ::= syntactic_factor (except_symbol syntactic_exception)? ;
single_definition ::= syntactic_term (concatenate_symbol syntactic_term)* ;
special_sequence ::= special_sequence_symbol special_sequence_character* special_sequence_symbol ;
repeated_sequence ::= start_repeat_symbol definitions_list end_repeat_symbol ;
terminal_character ::= letter | decimal_digit | concatenate_symbol | defining_symbol | definition_separator_symbol | end_comment_symbol | end_group_symbol | end_option_symbol | end_repeat_symbol | except_symbol | first_quote_symbol | repetition_symbol | second_quote_symbol | special_sequence_symbol | start_comment_symbol | start_group_symbol | start_option_symbol | start_repeat_symbol | terminator_symbol | other_character ;
syntactic_primary ::= optional_sequence | repeated_sequence | grouped_sequence | meta_identifier | terminal_string | special_sequence | empty_sequence ;
meta_identifier ::= letter meta_identifier_character* ;
grouped_sequence ::= start_group_symbol definitions_list end_group_symbol ;
gap_free_symbol ::= terminal_character | terminal_string ;
optional_sequence ::= start_option_symbol definitions_list end_option_symbol ;
--------------------metasyntax::ebnf-iso-2.bgf--------------------
exception ::= factor ;
integer ::= decimal_digit+ ;
empty ::= ε ;
comment_symbol ::= comment | terminal_string | special_sequence | character ;
meta_identifier ::= letter (letter | decimal_digit)* ;
syntax ::= syntax_rule+ ;
primary ::= optional_sequence | repeated_sequence | special_sequence | grouped_sequence | meta_identifier | terminal_string | empty ;
--------------------metasyntax::ebnf-iso-3.bgf--------------------
EXCEPTION ::= FACTOR ;
INTEGER ::= DIGIT+ ;
EMPTY ::= ε ;
COMMENT_SYMBOL ::= COMMENT | TERMINAL | SPECIAL_SEQUENCE | CHARACTER ;
META_IDENTIFIER ::= LETTER (LETTER | DIGIT)* ;
SYNTAX ::= SYNTAX_RULE+ ;
PRIMARY ::= OPTIONAL_SEQUENCE | REPEATED_SEQUENCE | SPECIAL_SEQUENCE | GROUPED_SEQUENCE | META_IDENTIFIER | TERMINAL | EMPTY ;
--------------------metasyntax::relaxng.bgf--------------------
open-pattern ::= other pattern ;
any ::= (α | string() | any)* ;
open-name-class ::= other name-class ;
open-name-classes ::= other name-class+ ;
open-patterns ::= other pattern+ ;
other ::= ((α | string() | any)*)* ;
--------------------metasyntax::ebnf-sdf.bgf--------------------
IdCon ::= string() ;
Grammar ::= Rule* ;
--------------------metasyntax::lll-kort.bgf--------------------
term ::= basis repetition? ;
conjunction ::= term+ ;
specification ::= rule+ ;
--------------------metasyntax::lll-ldta.bgf--------------------
basis ::= literal | sort ;
term ::= basis repetition? ;
alts ::= alt alts-tail* ;
alt ::= term* ;
grammar ::= rule+ ;
--------------------metasyntax::xsd-guyard.bgf--------------------
AtomicContent ::= ElementRef ;
 AtomicContent ::= GroupRef ;
 AtomicContent ::= Element ;
Integer ::= integer() ;
AbstractType ::= SimpleType ;
 AbstractType ::= ComplexType ;
XSchemaContentElement ::= Parameters ;
 XSchemaContentElement ::= AbstractType ;
 XSchemaContentElement ::= Group ;
 XSchemaContentElement ::= AttributeGroup ;
AtomicAttributeGroupContent ::= AttributeGroupRef ;
 AtomicAttributeGroupContent ::= AttributeRef ;
 AtomicAttributeGroupContent ::= Attribute ;
Parameters ::= Element ;
 Parameters ::= Attribute ;
AbstractContent ::= Container ;
 AbstractContent ::= AtomicContent ;
AnnotedElement ::= NamedElement ;
 AnnotedElement ::= XSchema ;
Occurable ::= AbstractContent ;
 Occurable ::= AbstractAttributeGroupContent ;
AbstractAttributeGroupContent ::= AtomicAttributeGroupContent ;
 AbstractAttributeGroupContent ::= AttributeGroup ;
NamedElement ::= XSchemaContentElement ;
Container ::= All ;
 Container ::= Choice ;
 Container ::= Sequence ;
 Container ::= Group ;
String ::= string() ;
--------------------metasyntax::yacc-sdf.bgf--------------------
Yacc-declarations ::= Yacc-declaration* ;
Grammar-rules ::= Rule* ;
--------------------metasyntax::yacc-txl.bgf--------------------
literal ::= quotedLiteral | unquotedLiteral ;
yac_id ::= id dot_id* ;
unquotedLiteral ::= yac_id | charlit | stringlit | number | key ;
Cdefinitions ::= endSection token* ;
Ccode_or_token ::= Ccode | token ;
literalOrType ::= literal | type | prec | Ccode ;
yac_literal ::= yac_id | charlit ;
Yacc_Txl_Grammar ::= tokenDefinitions productionDefinitions Cdefinitions ;
yac_tokdef ::= id | charlit ;
yac_tokenDefinition ::= yac_keyword yac_tokdef+ NL ;
productionDefinitions ::= productionDefinition* ;
tokenDefinitions ::= tokenDefinition* endSection? ;
literalsAndTypes ::= literalOrType* ;
yac_idOrQuotedLiteral ::= yac_id | quotedLiteral ;
program ::= Yacc_Txl_Grammar ;
prec ::= yac_keyword yac_id ;
--------------------metasyntax::xsd-tennison.bgf--------------------
documentationContent ::= anyContent ;
nestedParticle ::= localElement | groupRef | choice | sequence | any ;
identityConstraint ::= unique | key | keyref ;
rangeFacets ::= (minExclusive | minInclusive)? (maxExclusive | maxInclusive)? ;
simpleExplicitGroup ::= annotated nestedParticle* ;
attrDecls ::= (localAttribute | attributeGroupRef)* anyAttribute? ;
openAttrs ::= string()* ;
schemaTop ::= redefinable | topLevelElement | topLevelAttribute | notation ;
typeDefParticle ::= groupRef | all | choice | sequence ;
redefinable ::= topLevelSimpleType | topLevelComplexType | namedGroup | namedAttributeGroup ;
anyContent ::= (string() | (α* anyContent))* ;
simpleType ::= annotated simpleDerivation ;
explicitGroup ::= annotated occurs nestedParticle* ;
appinfoContent ::= anyContent ;
complexType ::= annotated complexTypeModel ;
simpleDerivation ::= simpleRestriction | list | union ;
digitFacets ::= totalDigits? fractionDigits? ;
commonFacets ::= enumeration* whiteSpaceCollapse? pattern* ;
--------------------metasyntax::box-rascal.bgf--------------------
Main ::= Boxx WhitespaceAndComment* ;
--------------------metasyntax::sdf-rascal.bgf--------------------
Aliases ::= Alias* ;
Sections ::= Section* ;
Imports ::= Import* ;
Syms ::= Sym* ;
Prods ::= Prod* ;
--------------------tescol::00000.bgf--------------------
constantid ::= CONSTID ;
addsubexp ::= multidivexp (ADD | SUB multidivexp)* ;
paralist ::= (parameter COMMA)* parameter ;
operatorsymbol ::= ADD | SUB | DIV | MULTI | EXPO ;
syntaxsymbol ::= SEMI | COLON | COMMA | LPAR | RPAR | ASSIGN | QMARK | LBRACE | RBRACE ;
type ::= INTWORD | DOUWORD ;
declaration ::= constdec | vardec | procdec ;
token ::= keyword | WS | identifier | symbol | COMMENT | literal | constantid ;
symbol ::= syntaxsymbol | operatorsymbol | comparisonsymbol ;
compoperator ::= CONJUNCT | DISJUNCT ;
arithexp ::= connexp (QMARK connexp COLON connexp)? ;
literal ::= INT | DOUBLE ;
compexp ::= addsubexp (comparisonsymbol addsubexp)* ;
expoexp ::= negateexp (EXPO negateexp)? ;
identifier ::= ID ;
keyword ::= DONE | TROLLEY | CONTAINS | CHECKOUT | SKIP | CONST | PROC | VAR | IF | THEN | ELSE | WHILE | DO | INTWORD | DOUWORD ;
multidivexp ::= expoexp (MULTI | DIV expoexp)* ;
comparisonsymbol ::= EQUALS | NOTEQ | LT | LTE | GT | GTE ;
--------------------tescol::00001.bgf--------------------
comment ::= COMMENT ;
boolExpr ::= andExpr (DISJ andExpr)* ;
constDec ::= CONST CID COLON types ASSI expr ;
id ::= ID | CID ;
varDec ::= VAR id COLON types ;
types ::= TYPEI | TYPED ;
declarations ::= constDec | varDec | procDec ;
expr ::= boolExpr (MIXFIX expr COLON expr)? ;
arglist ::= OPAR (expr (COM expr)*)? CPAR ;
statement ::= assignment | conditional | loops | grstatement | SKIP ;
loops ::= WHILE boolExpr DO statement ;
plusexpr ::= multExpr (PLUS | MINUS multExpr)* ;
assignment ::= id ASSI expr ;
andExpr ::= compExpr (CONJ compExpr)* ;
procDec ::= PROC ID OPAR paramlist CPAR COLON types ASSI statement ;
paramlist ::= (ID COLON types)? (COM ID COLON types)* ;
conditional ::= IF boolExpr THEN statement ELSE statement ;
multExpr ::= expExp (MULTI | DIV expExp)* ;
compExpr ::= plusexpr (GT | LT | GTE | LTE | EQ | NEQ plusexpr)? ;
grstatement ::= OCB statement (SEMI statement)* CCB ;
statements ::= CHECKOUT statement SEMI ;
program ::= TROLLEY CID CONTAINS (declarations SEMI)* statements DONE SEMI ;
expExp ::= atom (EXP atom)* ;
--------------------tescol::00010.bgf--------------------
arithmeticExpr ::= exprLevel1 (PLUS | MINUS exprLevel1)* ;
skip ::= SKIP SEMI ;
args ::= arithmeticExpr (COMMA arithmeticExpr)* ;
booleanExpr ::= conjunctionExpr (OR conjunctionExpr)* ;
bracketedExpr ::= condExpr | arithmeticExpr ;
type ::= INT_TYPE | DOUBLE_TYPE ;
prog ::= header decl mainStat ;
procApply ::= VAR_ID LPAR args? RPAR ;
expExpr ::= unaryExpr (EXPONENTIATE unaryExpr)* ;
varDecl ::= VAR VAR_ID COLON type SEMI ;
INT ::= DIGIT+ ;
assign ::= VAR_ID DEFINED_AS arithmeticExpr SEMI ;
mainStat ::= CHECKOUT stat DONE SEMI ;
constDecl ::= CONST CONST_ID COLON type DEFINED_AS arithmeticExpr SEMI ;
header ::= TROLLEY CONST_ID CONTAINS ;
booleanOperator ::= EQUAL | NOT_EQUAL | GREATER | GREATER_EQUAL | LESS | LESS_EQUAL ;
conjunctionExpr ::= booleanAtom (AND booleanAtom)* ;
decl ::= (constDecl | varDecl | procDecl)* ;
testPart ::= booleanExpr CONDITION ;
exprLevel1 ::= expExpr (MULTIPLY | DIVIDE expExpr)* ;
procDecl ::= PROC VAR_ID LPAR parameter? RPAR COLON type DEFINED_AS stat ;
--------------------tescol::00011.bgf--------------------
literal ::= INT | DOUBLE ;
whilestatement ::= WHILE expression DO statement ;
arithmeticoperator ::= ADDITION | SUBTRACT | DIVISION | MULTIPLY | EXP ;
param ::= ID COLON type ;
booleanoperator ::= EQUAL | NONEQUAL | LESS | LESSEQUAL | MORE | MOREEQUAL | CONJUNCTION | DISJUNCTION ;
paramlist ::= param (COMMA param)* ;
type ::= INTTYPE | DOUBLETYPE ;
identifier ::= ID | CONSTID ;
declarations ::= (constdeclaration | vardeclaration | procdeclaration)* ;
constdeclaration ::= CONST CONSTID COLON type ASSIGN expression SEMI ;
operator ::= arithmeticoperator | booleanoperator ;
procdeclaration ::= PROC ID OPARAN paramlist? CPARAN COLON type ASSIGN statement SEMI ;
program ::= TROLLEY CONSTID CONTAINS declarations CHECKOUT statement? SEMI? DONE SEMI ;
functionparamlist ::= expression (COMMA expression)* ;
vardeclaration ::= VAR identifier COLON type SEMI ;
assignmentstatement ::= identifier ASSIGN expression ;
--------------------tescol::00100.bgf--------------------
skip ::= SKIP SEMI ;
EOF ::= ε ;
variable ::= VAR ID COLON type SEMI ;
type ::= INT | DOUBLE ;
multOperand ::= MULTIPLICATION | DIVISION ;
declarations ::= (constant | variable | procedure)* ;
expression ::= condExpr ;
condExpr ::= booleanDisj (QUESTION aritExpr COLON aritExpr)? ;
procedure ::= PROC ID LPAREN parameters RPAREN COLON type COLON_EQUALS statements ;
ifStat ::= IF expression THEN statements ELSE statements ;
aritExpr ::= multExpr (addOperand multExpr)* ;
groupStatement ::= LBRACE statement+ RBRACE SEMI ;
booleanConj ::= booleanExpression (CONJUNCTION booleanExpression)* ;
statement ::= skip | assignment | ifStat | loop ;
procedureApp ::= ID LPAREN realParameters? RPAREN ;
assignment ::= ID COLON_EQUALS expression SEMI ;
expOperand ::= EXPONENTIATION ;
parameters ::= parameter (COMMA parameter)* ;
parameter ::= (ID COLON type)* ;
realParameters ::= aritExpr (COMMA aritExpr)* ;
addOperand ::= ADDITION | SUBTRACTION ;
relational ::= EQUALITY | NON_EQUALITY | LESS | LESS_EQUAL | GREATER_EQUAL | GREATER ;
multExpr ::= orderExpr (multOperand orderExpr)* ;
statements ::= statement | groupStatement ;
loop ::= WHILE expression DO statements ;
booleanDisj ::= booleanConj (DISJUNCTION booleanConj)* ;
constant ::= CONST CID COLON type COLON_EQUALS expression SEMI ;
program ::= TROLLEY CID CONTAINS declarations CHECKOUT statements DONE SEMI EOF ;
orderExpr ::= sign (expOperand sign)? ;
booleanExpression ::= aritExpr (relational aritExpr)? ;
--------------------tescol::00101.bgf--------------------
id ::= ID | CONSTID ;
types ::= INTEGER | DOUBLE ;
proc_dec ::= PROC id parameter_list COLON types DEFINEDAS statement SEMICOLON ;
stat ::= header CHECKOUT body done ;
parameter_list ::= OPENPAR parameter_list_inside? CLOSEPAR ;
assignment ::= id DEFINEDAS expr ;
header ::= TROLLEY CONSTID CONTAINS header_declaration* ;
relationals ::= EQUALITY | NON_EQUALITY | L_THAN | LE_THAN | G_THAN | GE_THAN ;
boolean_expr ::= boolean_OR ;
var_dec ::= VAR id COLON types SEMICOLON ;
number ::= INT_VAL | DOUBLE_VAL ;
logical ::= AND | OR ;
statement_main ::= SKIP | if_statement | while_statement | assignment ;
arith_expr ::= arith_addsub ;
header_declaration ::= const_dec | var_dec | proc_dec ;
parameter_list_inside ::= parameter_element (COMMA parameter_element)* ;
parameter_element ::= ID COLON types ;
const_dec ::= CONST CONSTID COLON types DEFINEDAS expr SEMICOLON ;
program ::= stat ;
done ::= DONE SEMICOLON ;
body ::= statement SEMICOLON ;
while_statement ::= WHILE expr DO statement ;
--------------------tescol::00110.bgf--------------------
whileStatement ::= WHILE expression DO statement ;
variableDeclaration ::= VAR VAR_ID COLON TYPE SEMI ;
declarations ::= constantDeclaration | variableDeclaration | procedureDeclaration ;
procedureParams ::= expression (COMMA expression)* ;
expression ::= conjunction (DISJUNCT conjunction)* ;
condExpr ::= add (Q_MARK add COLON add)? ;
constantDeclaration ::= CONST CONST_ID COLON TYPE DEFINE_AS add SEMI ;
conjunction ::= relational (CONJ relational)* ;
skipStatement ::= SKIP SEMI ;
mult ::= unary (MULT | DIV | EXPON unary)* ;
unary ::= (PLUS | MINUS)* term ;
parameters ::= parameter (COMMA parameter)* ;
parameter ::= VAR_ID COLON TYPE ;
relational ::= condExpr (EQUALITY | NOT_EQUAL | LESS_THAN | LESS_THAN_OR_EQUAL | GREATER_THAN | GREATER_THAN_OR_EQUAL condExpr)* ;
procedureDeclaration ::= PROC VAR_ID LEFT_PAREN parameters RIGHT_PAREN COLON TYPE DEFINE_AS statement ;
program ::= TROLLEY CONST_ID CONTAINS declarations* CHECKOUT statement* SEMI DONE SEMI ;
assignmentStatement ::= VAR_ID DEFINE_AS expression SEMI ;
add ::= mult (PLUS | MINUS mult)* ;
--------------------tescol::00111.bgf--------------------
arithEx ::= expr | procedureApplication ;
booleanExpr ::= arithEx (EQUALITY | NON_EQUALITY | LESS | LESS_EQUAL | GREATER | GREATER_EQUAL arithEx)? ;
procedureApplication ::= identifier LPAREN commaSeparatedArithEx RPAREN ;
conditionalExpr ::= disjBooleanExpr (QUESTION conditionalExpr COLON conditionalExpr)? ;
exponentialExpr ::= unary (EXPONENTIATION unary)? ;
type ::= INT | DOUBLE ;
declaration ::= constDeclaration | varDeclaration | procDeclaration SEMI ;
prog ::= TROLLEY CID CONTAINS declaration* CHECKOUT compoundStatement SEMI DONE SEMI ;
constDeclaration ::= CONST CID COLON type COLON_EQUALS arithEx ;
conjBooleanExpr ::= booleanExpr (CONJUNCTION booleanExpr)* ;
expr ::= prodExpr (ADDITION | SUBTRACTION prodExpr)* ;
consequent ::= compoundStatement ;
commaSeparatedArithEx ::= (arithEx (COMMA arithEx)*)? ;
varDeclaration ::= VAR identifier COLON type ;
statement ::= SKIP | assignment | conditional | loop ;
unary ::= (ADDITION | SUBTRACTION)? atom ;
alternative ::= compoundStatement ;
assignment ::= identifier COLON_EQUALS conditionalExpr ;
prodExpr ::= exponentialExpr (MULTIPLICATION | DIVISION exponentialExpr)* ;
identifier ::= ID | CID ;
conditional ::= IF conditionalExpr THEN consequent ELSE alternative ;
loop ::= WHILE booleanExpr DO compoundStatement ;
procDeclaration ::= PROC identifier LPAREN parameterList? RPAREN COLON type COLON_EQUALS compoundStatement ;
disjBooleanExpr ::= conjBooleanExpr (DISJUNCTION conjBooleanExpr)* ;
--------------------tescol::01000.bgf--------------------
constdec ::= CONST CONSTID COL type DEF arith SEMI ;
id ::= CONSTID | VARID ;
vardec ::= VAR id COL type SEMI ;
type ::= INT | DOUBLE ;
declarations ::= (constdec | vardec | procdec)+ ;
orExpr ::= andExpr (DISJ andExpr)* ;
comparExpr ::= arithExpr (comparOps arithExpr)* ;
expExpr ::= atom (EXP atom)* ;
comparOps ::= EQ | NEQ | LT | GT | LTE | GTE ;
assign ::= id DEF arith ;
multiExpr ::= expExpr (MULT | DIV expExpr)* ;
nums ::= VARID | CONSTID | INTNUM | DOUBNUM ;
condstatement ::= IF orExpr THEN statement ELSE statement ;
andExpr ::= comparExpr (CONJ comparExpr)* ;
arith ::= orExpr (QUES arith COL arith)? ;
procdec ::= PROC id LBRACK param RBRACK COL type DEF statement SEMI ;
procapp ::= id LBRACK arith (COMMA arith)* RBRACK ;
loop ::= WHILE orExpr DO statement ;
statements ::= assign | condstatement | loop ;
program ::= TROLLEY CONSTID CONTAINS declarations CHECKOUT statement SEMI DONE SEMI ;
arithExpr ::= multiExpr (ADD | SUB multiExpr)* ;
--------------------tescol::01001.bgf--------------------
grouped ::= STST (statement SEMI)+ STED ;
variable ::= VAR_ID ;
exp_exp ::= minus (EXP minus)? ;
type ::= INT_T | DOUBLE_T ;
declaration ::= const_dec | var_dec | proc_dec ;
proc_dec ::= proc_header proc_params proc_body ;
proc_header ::= PROC p_id ;
procedure ::= VAR_ID OPEN params_given CLOSE ;
var_id ::= VAR_ID ;
param_list ::= (param_item (COMMA param_item)*)? ;
statement ::= grouped | SKIP | assignment | conditional | loop ;
proc_params ::= OPEN param_list CLOSE COLON typename ;
comp_exp ::= plus_min_exp (rel_operator plus_min_exp)? ;
assignment ::= variable DEF arith_exp ;
plus_min_exp ::= mult_div_exp (PLUS | MINUS mult_div_exp)* ;
proc_body ::= DEF statement SEMI ;
rel_operator ::= EQ | NEQ | LESS | LESSEQ | GRT | GRTEQ ;
var_dec ::= VAR v_id COLON typename SEMI ;
arith_exp ::= bool_exp (QUEST arith_exp COLON arith_exp)? ;
bool_exp ::= con_exp (DISJ con_exp)* ;
conditional ::= IF bool_exp THEN statement ELSE statement ;
const_dec ::= CONST CONST_ID COLON typename DEF arith_exp SEMI ;
typename ::= INT | DOUBLE ;
param_item ::= var_id COLON typename ;
params_given ::= (arith_exp (COMMA arith_exp)*)? ;
constant ::= CONST_ID ;
loop ::= WHILE bool_exp DO statement ;
program ::= TROLLEY CONST_ID CONTAINS declaration* CHECKOUT statement SEMI DONE SEMI ;
mult_div_exp ::= exp_exp (MULT | DIV exp_exp)* ;
con_exp ::= comp_exp (CONJ comp_exp)* ;
--------------------tescol::01010.bgf--------------------
logicop ::= AND | OR ;
addsub ::= ADDITION | POSITIVE | SUBTRACTION | NEGATIVE ;
constdec ::= CONST CONSTID COLON type ASSIGN expr SEMI ;
mul_div_expr ::= expexpr (MUL | DIV expexpr)* ;
paramdecs ::= (paramdec (COMMA paramdec)* COMMA?)? ;
sign ::= POSITIVE | NEGATIVE ;
whiledo ::= WHILE cond DO statement ;
vardec ::= VAR id COLON type SEMI ;
argslist ::= LPARA (expr (COMMA expr)* COMMA?)? RPARA ;
type ::= INT | DOUBLE ;
declaration ::= procdec | constdec | vardec ;
positive ::= POSITIVE | ADDITION ;
andcond ::= pred (AND pred)* ;
expr ::= cond (QUEST expr COLON expr)? ;
negative ::= NEGATIVE | SUBTRACTION ;
comments ::= COMMENT* ;
ifthenelse ::= IF cond thenclause elseclause ;
sub_add_expr ::= mul_div_expr (addsub mul_div_expr)* ;
arithop ::= POSITIVE | NEGATIVE | ADDITION | SUBTRACTION | MUL | DIV | EXP ;
procdec ::= PROC procdescribe COLON type ASSIGN statement SEMI ;
elseclause ::= ELSE statement ;
cond ::= andcond (OR andcond)* ;
vartype ::= CONST | VAR | PROC ;
pred ::= sub_add_expr (comparator sub_add_expr)? ;
procdescribe ::= id LPARA paramdecs RPARA ;
bracketexpr ::= LPARA expr RPARA ;
EOF ::= ε ;
id ::= ID | CONSTID ;
comparator ::= EQL | NEQL | GRT | GRTE | LST | LSTE ;
paramdec ::= id COLON type ;
expexpr ::= atom (EXP expexpr)? ;
assignment ::= id ASSIGN expr ;
thenclause ::= THEN statement ;
number ::= INUM | NUM ;
program ::= TROLLEY CONSTID CONTAINS declaration* CHECKOUT statement SEMI DONE SEMI EOF ;
--------------------tescol::01011.bgf--------------------
unary ::= (PLUS | negation)* term ;
assignment ::= ID ASSIGN expression SEMI ;
EOF ::= ε ;
disj ::= conj (DISJ relation)* ;
relation ::= addition (EQUALITY | LTHAN | MTHAN | NOTEQUAL | LEQUAL | MEQUAL addition)* ;
addition ::= mult (PLUS | MINUS mult)* ;
parameter ::= ID COLON INT | DOUBLE ;
conj ::= relation (CONJ relation)* ;
conditional ::= IF expression THEN statement+ (ELSE statement+)? ;
loop ::= WHILE expression DO statement+ ;
program ::= TROLLEY ID CONTAINS (constant | variable | proceduredecl)+ CHECKOUT statement+ DONE SEMI EOF ;
mult ::= unary (MULTI | DIVIS | EXPO unary)* ;
--------------------tescol::01100.bgf--------------------
skip ::= SKIPTOKEN SEMICOLON ;
constdec ::= CONST constidentifier COLON type DEFINE expression SEMICOLON ;
addition ::= substract ((ADDITION substract)+) | ε ;
vardec ::= VAR identifier COLON type SEMICOLON ;
type ::= TYPEINT | TYPEDOUBLE ;
declaration ::= dec+ ;
divide ::= exponent ((DIVISION exponent)+) | ε ;
expression ::= condExp ;
multipli ::= divide ((MULTIPLICATION divide)+) | ε ;
stat ::= skip | assign | cond | loop ;
booleanSymbols ::= EQUALITY | NONEQUALITY | DIFFERENTOREQUAL | STRICTLYDIFFERENT ;
procedure ::= identifier LEFTPARENTHESIS ε | (expression (COMA expression)*) RIGHTPARENTHESIS ;
conjunct ::= comparison ((CONJUNCTION comparison)+) | ε ;
assign ::= identifier DEFINE expression SEMICOLON ;
exponent ::= atom (EXPONENT atom) | ε ;
constidentifier ::= CONSTID ;
identifier ::= ID | constidentifier ;
disjunct ::= conjunct ((DISJUNCTION conjunct)+) | ε ;
loop ::= WHILE expression DO statements ;
dec ::= constdec | vardec | procdec ;
substract ::= multipli ((SUBSTRACTION multipli)+) | ε ;
--------------------tescol::01101.bgf--------------------
COMMENT ::= BEGINCOMMENT α* ENDCOMMENT ;
skip ::= SKIP SEMI ;
decleration ::= (const_dec | var_dec | proc_dec)* ;
do_statement ::= DO cond_statements ;
proc_dec ::= PROCEDURE proc_para COLON TYPE proc_becomes ;
conIDs ::= CID ;
mix_fix ::= bool_disjunction (MIX_FIX arithmetic_expression COLON atom)? ;
varIDs ::= CID | ID ;
statement ::= conditional | loop | assignment | skip | procedure_call ;
assignment ::= varIDs BECOMES mix_fix SEMI ;
then_statement ::= THEN cond_statements ;
bool_disjunction ::= bool_conjunction (DISJUNCTION bool_conjunction)* ;
arithmetic_expression ::= multiplication_division (ADD | SUB multiplication_division)* ;
parameters ::= mix_fix (COMMA mix_fix)* ;
procedure_call ::= varIDs OPENPARENTHESIS parameters CLOSEDPARENTHESIS SEMI ;
var_dec ::= VAR varIDs COLON TYPE SEMI ;
else_statement ::= ELSE cond_statements ;
proc_para ::= varIDs OPENPARENTHESIS (parameter COMMA?)* CLOSEDPARENTHESIS ;
parameter ::= varIDs COLON TYPE ;
conditional ::= IF OPENPARENTHESIS bool_disjunction CLOSEDPARENTHESIS then_statement else_statement ;
bool_atom ::= arithmetic_expression (NONEQUALITY | EQUALITY | MOREOREQUAL | LESSOREQUAL | MORETHEN | LESSTHEN arithmetic_expression)* ;
multiplication_division ::= exponential (MUL | DIV exponential)* ;
const_dec ::= CONSTANT conIDs COLON TYPE BECOMES mix_fix SEMI ;
checkout ::= CHECKOUT OPENBRACKET statement* CLOSEDBRACKET SEMI DONE SEMI ;
exponential ::= negation (EXP negation)* ;
trolley ::= TROLLEY varIDs CONTAINS decleration ;
loop ::= WHILE bool_disjunction do_statement ;
program ::= trolley checkout ;
proc_becomes ::= BECOMES cond_statements ;
bool_conjunction ::= bool_atom (CONJUNCTION bool_atom)* ;
--------------------tescol::01110.bgf--------------------
assignment ::= CID | ID COLON_EQUALS mixFix SEMI ;
relation ::= addSubExpr (EQUALITY | NON_EQUALITY | LESS | LESS_EQUAL | GREATER_EQUAL | GREATER addSubExpr)* ;
type ::= (INT | DOUBLE)? ;
checkoutStat ::= CHECKOUT statement DONE SEMI ;
declaration ::= constDec | varDec | procDec ;
prog ::= TROLLEY CID CONTAINS declaration* checkoutStat ;
expoExpr ::= unary (EXPONENTIATION unary)* ;
multDivExpr ::= expoExpr (MULTIPLICATION | DIVISION expoExpr)* ;
startStat ::= TROLLEY CID CONTAINS ;
addSubExpr ::= multDivExpr (ADDITION | SUBTRACTION multDivExpr)* ;
skipStat ::= SKIP SEMI ;
conjDisjunExpr ::= relation (CONJUNCTION | DISJUNCTION relation)* ;
--------------------tescol::01111.bgf--------------------
comment ::= COMMENT ;
boolExpr ::= subExpr (operations subExpr)? ;
conditionalStat ::= IF boolExpr THEN stat ELSE stat ;
mulExpr ::= divExpr (MULTIPLICATION divExpr)* ;
loopStat ::= WHILE boolExpr DO stat ;
progTree ::= TROLLEY CONSTID CONTAINS declarations* CHECKOUT stat DONE SEMI ;
addExpr ::= mulExpr (ADDITION mulExpr)* ;
subExpr ::= addExpr (SUBTRACTION addExpr)* ;
subExprList ::= arithmeticExpression (COMMA arithmeticExpression)* ;
conjBool ::= boolExpr (CONJUNCTION boolExpr)* ;
expExpr ::= atom (EXPONENTION atom)* ;
operations ::= EQUALITY | NONEQUALITY | LESSTHAN | LESSTHANOREQUAL | GREATERTHAN | GREATERTHANOREQUAL ;
paramList ::= varDec (COMMA varDec)* ;
number ::= INTKEYWORD | DOUBLEKEYWORD ;
divExpr ::= expExpr (DIVISION expExpr)* ;
disjBool ::= conjBool (DISJUNCTION conjBool)* ;
applyProc ::= VARANDPROCID OPAR subExprList CPAR ;
program ::= progTree+ ;
assignStat ::= VARANDPROCID DEFINEDAS arithmeticExpression ;
arithmeticExpression ::= disjBool (QUESTION arithmeticExpression COLON arithmeticExpression)? ;
--------------------tescol::10000.bgf--------------------
boolExpr ::= andExpr (DISJUNCTION andExpr)* ;
andExpr ::= compExpr (CONJUNCTION compExpr)* ;
prog ::= TROLLEY CID CONTAINS NEWLINE* decl* CHECKOUT NEWLINE* stat DONE SEMI ;
expoExpr ::= atom EXPONENTIATION? ;
condExpr ::= boolExpr (QUESTION condExpr COLON condExpr)? ;
multExpr ::= expoExpr (MULTIPLICATION | DIVISION expoExpr)* ;
expr ::= multExpr (ADDITION | SUBTRACTION multExpr)* ;
whileloop ::= WHILE LPAREN boolExpr RPAREN DO stat ;
compExpr ::= expr (GREATER_EQUAL | LESS_EQUAL | EQUALITY | NON_EQUALITY | GREATER | LESS expr)? ;
multStat ::= LBRACE NEWLINE* stat (SEMI NEWLINE* stat)* NEWLINE* RBRACE SEMI ;
stat ::= condExpr | SKIP | assign | multStat | ifthenelse | whileloop ;
ifthenelse ::= IF LPAREN boolExpr RPAREN THEN stat (SEMI ELSE stat)? ;
--------------------tescol::10001.bgf--------------------
boolExpr ::= andExpr (DISJUNCTION andExpr)* ;
assignment ::= id COLON_EQUALS condExpr SEMI ;
andExpr ::= compExpr (CONJUNCTION compExpr)* ;
type ::= INT | DOUBLE ;
prog ::= stat+ ;
condExpr ::= boolExpr (QUESTION condExpr COLON condExpr)? ;
checkout ::= CHECKOUT stat SEMI? DONE SEMI ;
trolley ::= TROLLEY cid CONTAINS def* ;
multExpr ::= atom (MULTIPLICATION | DIVISION | EXPONENTIATION atom)* ;
expr ::= multExpr (ADDITION | SUBTRACTION multExpr)* ;
compExpr ::= expr (GREATER_EQUAL | LESS_EQUAL | EQUALITY | NON_EQUALITY | LESS | GREATER expr)? ;
vartypedef ::= id COLON INT | DOUBLE ;
--------------------tescol::10010.bgf--------------------
conditionalExpression ::= booleanExpression (QUESTION conditional COLON conditional)? ;
procedureApplication ::= arithmetic (ID LPAREN expressionList RPAREN)? ;
type ::= INTKEYWORD | DOUBLEKEYWORD ;
declaration ::= constdecl | vardecl | procdecl SEMI ;
expression ::= number (arithmeticOperator number)* ;
expressionList ::= arithmeticExpression (COMMA arithmeticExpression)* ;
disjExpression ::= expression (relationalOperator expression)? ;
vardecl ::= VAR ID COLON type ;
statement ::= SKIP | assignment | conditional | loop | statementList ;
arithmeticOperator ::= ADD | SUBTRACT | DIVIDE | MULTIPLY | EXPON ;
statementList ::= CLPAREN statement SEMI (statement SEMI)* CRPAREN ;
assignment ::= ID DEF arithmeticExpression ;
constdecl ::= CONST ID COLON type DEF arithmeticExpression ;
relationalOperator ::= EQUAL | NOTEQUAL | MORETHAN | LESSTHAN | MORETHANEQUAL | LESSTHANEQUAL ;
arithmetic ::= number (arithmeticOperator number)* ;
parameterList ::= ID COLON type (COMMA ID COLON type)* ;
conditional ::= IF booleanExpression THEN statement ELSE statement ;
operator ::= DEF | QUESTION | CONJUNC | DISJUNC | arithmeticOperator | relationalOperator ;
loop ::= WHILE booleanExpression DO statement ;
program ::= TROLLEY ID CONTAINS declaration+ CHECKOUT statement SEMI DONE SEMI ;
arithmeticExpression ::= procedureApplication (conditionalExpression QUESTION arithmeticExpression COLON arithmeticExpression)? ;
conjExpression ::= disjExpression (DISJUNC disjExpression)* ;
booleanExpression ::= conjExpression (CONJUNC conjExpression)* ;
procdecl ::= PROC ID LPAREN parameterList RPAREN COLON type DEF statement ;
--------------------tescol::10011.bgf--------------------
sign ::= (MINUS | PLUS)? atom ;
expon ::= sign (EXPON sign)* ;
vardec ::= VAR parameter SEMI ;
type ::= INTEGER | DOUBLE ;
declaration ::= consdec | vardec | procdec ;
cexpr ::= bexpr (QM cexpr COLON cexpr)? ;
bexpr ::= con (DISJUN con)* ;
aexpr ::= cexpr ;
aexprlist ::= aexpr (COMMA aexpr)* ;
rop ::= EQ | NEQ | LESS | MORE | LESSEQ | MOREEQ ;
consdec ::= CONST CONSTANT COLON type DEFAS aexpr SEMI ;
statement ::= SKIP | assignment | conditional | loop ;
assignment ::= VARIABLE DEFAS aexpr ;
procdec ::= PROC VARIABLE LPAR paramlist RPAR COLON type DEFAS statementlist SEMI ;
paramlist ::= parameter (COMMA parameter)* ;
procapp ::= VARIABLE LPAR aexprlist RPAR ;
parameter ::= VARIABLE COLON type ;
number ::= INT | DUB ;
ropexpr ::= expr (rop expr)? ;
conditional ::= IF bexpr THEN statementlist ELSE statementlist ;
multExpr ::= expon (MULT | DIV expon)* ;
loop ::= WHILE bexpr DO statementlist ;
program ::= TROLLEY CONSTANT CONTAINS declaration* CHECKOUT statementlist SEMI DONE SEMI ;
con ::= ropexpr (CONJUN ropexpr)* ;
--------------------tescol::10100.bgf--------------------
andExpression ::= orExpression (CONJUNCTION orExpression)* ;
relationalExpression ::= addExpression (GREATER_EQUAL | GREATER | LESS_EQUAL | LESS | EQUALITY | NON_EQUALITY addExpression)? ;
statement ::= statementList | condStatement | expression | assignment | loop | SKIP ;
condStatement ::= IF expression THEN statement ELSE statement ;
assignment ::= ID COLON_EQUALS expression ;
statementList ::= LBRACE statement (SEMI statement NEWLINE*)* RBRACE ;
orExpression ::= relationalExpression (DISJUNCTION relationalExpression)* ;
paramlist ::= LPAREN (ID COLON type (COMMA ID COLON type)*)? RPAREN ;
type ::= INT | DOUBLE ;
prog ::= NEWLINE* TROLLEY NEWLINE* CID NEWLINE* CONTAINS NEWLINE* declarations NEWLINE* statement NEWLINE* SEMI NEWLINE* DONE NEWLINE* SEMI ;
addExpression ::= multExpression (ADDITION | SUBTRACTION multExpression)* ;
declarations ::= (individual_declaration NEWLINE*)* CHECKOUT ;
expression ::= andExpression (QUESTION andExpression COLON andExpression)? ;
multExpression ::= atom (DIVISION | MULTIPLICATION | EXPONENTIATION atom)* ;
loop ::= WHILE expression DO statement ;
--------------------tescol::10101.bgf--------------------
boolExpr ::= andExpr (DISJUNCTION andExpr)* ;
constantdec ::= CONSTANT CONSTANTID COLON type ASSIGN condExpr SEMI ;
andExpr ::= compExpr (CONJUNCTION compExpr)* ;
type ::= INT | FLOAT ;
declaration ::= variabledec | constantdec | proceduredec ;
condExpr ::= boolExpr (MIXFIX condExpr COLON condExpr)? ;
variabledec ::= VARIABLE ID COLON type SEMI ;
multExpr ::= exponExpr (MULTIPLICATION | DIVISION exponExpr)* ;
expr ::= multExpr (ADDITION | SUBTRACTION multExpr)* ;
compExpr ::= expr (GREATEREQUAL | LESSEQUAL | GREATER | LESS | EQUALITY | NONEQUALITY expr)* ;
program ::= TROLLEY CONSTANTID CONTAINS declaration* CHECKOUT mainstatement SEMI DONE SEMI ;
unaryneg ::= SUBTRACTION* atom ;
exponExpr ::= unaryneg EXPONENTIATION* ;
--------------------tescol::10110.bgf--------------------
boolExpr ::= andExpr (DISJ andExpr)* ;
comment ::= COMMENT ;
expr2 ::= multExpr (ADD | SUBTRACT multExpr)* ;
whitespace ::= WS ;
EOF ::= ε ;
powerExpr ::= atom (EXPONENTIATION atom)* ;
condExpr ::= boolExpr (QUESTION condExpr COLON condExpr)? ;
comparator ::= EQUALITY | NON_EQUALITY | LESS_THAN | GREATER_THAN | LESS_THAN_EQ | GREATER_THAN_EQ ;
expr ::= negation? expr2 ;
cond_expr ::= QUESTION boolExpr QUESTION expr COLON expr ;
assignment ::= identifier DEFINED_AS expr ;
andExpr ::= compExpr (CONJ compExpr)* ;
cidentifier ::= CID ;
identifier ::= ID | CID ;
conditional ::= IF condExpr THEN statement ELSE statement ;
multExpr ::= powerExpr (MULTIPLY | DIVIDE powerExpr)* ;
loop ::= WHILE boolExpr DO statement ;
compExpr ::= expr (comparator expr)? ;
operator ::= ADD | SUBTRACT | MULTIPLY | DIVIDE | EXPONENTIATION | EQUAL ;
program ::= TROLLEY cidentifier CONTAINS dec* CHECKOUT CURLY_L (statement (SEMI statement)*)? CURLY_R SEMI DONE SEMI EOF ;
dec ::= constant | var | proc ;
procedure_expr ::= identifier LPAR expr (COMMA expr)* RPAR ;
--------------------tescol::10111.bgf--------------------
div_subterm ::= molecule (SYM_DIV molecule)* ;
varproc_id ::= ID_VARPROC | ID_GENERAL ;
type ::= KW_TYPE_INT | KW_TYPE_DOUBLE ;
prog ::= KW_TROLLEY ID_GENERAL KW_CONTAINS decl* KW_CHECKOUT statement KW_DONE SYM_SEMI ;
mixfix ::= predicate (SYM_QM mixfix SYM_COLON mixfix)? ;
predicate ::= pred_term (SYM_OR pred_term)* ;
comparator ::= SYM_EQ | SYM_INEQ | SYM_GT | SYM_NS_GT | SYM_LT | SYM_NS_LT ;
doubleNum ::= (SYM_ADD | SYM_SUB)? DOUBLE ;
parenthesised ::= SYM_OPEN_PAREN mixfix SYM_CLOSE_PAREN ;
expr ::= subtraction_subexpr (SYM_ADD subtraction_subexpr)* ;
param_and_type ::= varproc_id SYM_COLON type ;
immediate ::= integerNum | doubleNum ;
pred_base ::= expr (comparator expr)* ;
term ::= div_subterm (SYM_MULT div_subterm)* ;
pred_term ::= pred_base (SYM_AND pred_base)* ;
subtraction_subexpr ::= term (SYM_SUB term)* ;
integerNum ::= (SYM_ADD | SYM_SUB)? INT ;
arg_list ::= SYM_OPEN_PAREN (expr (SYM_COMMA expr)*)? SYM_CLOSE_PAREN ;
molecule ::= atom (SYM_EXP molecule)? ;
param_decl_list ::= SYM_OPEN_PAREN (param_and_type (SYM_COMMA param_and_type)*)? SYM_CLOSE_PAREN ;
--------------------tescol::11000.bgf--------------------
skip ::= SKIP ;
whilestatement ::= WHILE expression DO statements ;
addition ::= multiply (ADDITION multiply)* ;
variable ::= VARIABLE ID | CID COLON INTEGER | DOUBLE SEMI ;
relationships ::= EQUALITY | NONEQUALITY | GREATERTHAN | LESSTHAN | GREATEROREQUAL | LESSOREQUAL ;
divide ::= negation (DIVISION negation)? ;
declarations ::= constant | variable | procedure ;
expression ::= runproc ;
conjunction ::= booleanop (AND booleanop)* ;
subtraction ::= addition (SUBTRACTION addition)* ;
procedure ::= PROCEDURE ID | CID LEFTBRACKET parameters RIGHTBRACKET COLON numbervalues DEFINE statements ;
ifstatement ::= IF LEFTBRACKET expression RIGHTBRACKET THEN statements ELSE statements ;
expo ::= atom (EXPONENTIATION atom)? ;
statement ::= ifstatement | whilestatement | skip | assignment SEMI ;
assignment ::= ID | CID DEFINE expression ;
numbervalues ::= INTEGER | DOUBLE ;
parameters ::= (parameter (COMMA parameter)*)? ;
booleanop ::= subtraction (relationships subtraction)? ;
parameter ::= ID | CONSTANT COLON numbervalues ;
checkout ::= CHECKOUT statements ;
negation ::= (ADDITION | SUBTRACTION)? expo ;
trolley ::= TROLLEY CID CONTAINS declarations* ;
multiply ::= divide (MULTIPLICATION divide)* ;
statements ::= statement | (CURLYLEFT statement statement* CURLYRIGHT) SEMI ;
constant ::= CONSTANT CID COLON INTEGER | DOUBLE DEFINE expression SEMI ;
program ::= trolley checkout done ;
conditexpr ::= disjunction (QUESTION disjunction COLON disjunction)* ;
disjunction ::= conjunction (OR conjunction)* ;
done ::= DONE SEMI ;
--------------------tescol::11001.bgf--------------------
INEQUALITY ::= BANG EQUALS ;
contains ::= CONTAINS (procdeclaration | constdeclaration | vardeclaration SEMI)* ;
GTEQUALS ::= RANGLE EQUALS ;
DEFINEDAS ::= COLON EQUALS ;
type ::= TINT | TDOUBLE ;
EQUALITY ::= EQUALS EQUALS ;
LTEQUALS ::= LANGLE EQUALS ;
checkout ::= CHECKOUT statement SEMI ;
program ::= TROLLEY CONSTID contains checkout done ;
varid ::= CONSTID | VARID ;
done ::= DONE SEMI ;
--------------------tescol::11010.bgf--------------------
boolExpr ::= andExpr (DISJUNCTION andExpr)* ;
constDec ::= CONSTID COLON type DEFINEDAS subExpr ;
type ::= INTEGER | FLOATDOUBLE ;
conditionalStat ::= IF boolExpr THEN stat ELSE stat ;
mulExpr ::= divExpr (MULTIPLY divExpr)* ;
loopStat ::= WHILE boolExpr DO stat ;
progTree ::= TROLLEY CONSTID CONTAINS declarations* CHECKOUT stat DONE SEMI ;
condExpr ::= boolExpr (QUESTION condExpr COLON condExpr)? ;
addExpr ::= mulExpr (PLUS mulExpr)* ;
subExpr ::= addExpr (MINUS addExpr)* ;
exprList ::= compExpr (COMMA compExpr)* ;
expExpr ::= atom (EXPONENTIATION atom)* ;
andExpr ::= compExpr (CONJUNCTION compExpr)* ;
paramList ::= varDec (COMMA varDec)* ;
divExpr ::= expExpr (DIVIDE expExpr)* ;
applyProc ::= smallId LEFTPAR exprList RIGHTPAR ;
compExpr ::= subExpr (EQUALITY | NOTEQUAL | LESSTHAN | LESSTHANEQUAL | MORETHAN | MORETHANEQUAL subExpr)? ;
program ::= progTree+ ;
assignStat ::= smallId DEFINEDAS condExpr ;
smallId ::= CONSTID | ID ;
--------------------tescol::11011.bgf--------------------
dec_types ::= TYPE_INT | TYPE_DOUBLE ;
exp_exp ::= atom (ARITH_EXP atom)* ;
declarations ::= CONTAINS (dec_const | dec_var | dec_proc)* ;
ids ::= ID | CONST_ID ;
exp_multi ::= exp_exp (ARITH_MUL | ARITH_DIV exp_exp)* ;
exp_and ::= exp_comp (CONJ exp_comp)* ;
expr ::= exp_bools (QMARK expr COLON expr)? ;
dec_proc ::= PROC ID LPAR param_list COLON dec_types DEFAS statement SEMI ;
exp_comp ::= exp_addsub (COND_COMP_GREATE | COND_COMP_GREAT | COND_COMP_LESS | COND_COMP_LESSE | COND_EQUAL | COND_NONEQUAL exp_addsub)? ;
param_list ::= param_element? (COMMA param_element)* ;
assign ::= ids DEFAS expr ;
statement_group ::= LCB statement (SEMI statement)* RCB ;
statement ::= assign | SKIP | conditional | loop | statement_group ;
param_element ::= ID COLON dec_types ;
dec_var ::= VAR ids COLON dec_types SEMI ;
exp_bools ::= exp_and (DISJ exp_and)* ;
conditional ::= IF exp_bools THEN statement ELSE statement ;
dec_const ::= CONST CONST_ID COLON dec_types DEFAS expr SEMI ;
loop ::= WHILE exp_bools DO statement ;
statements ::= CHECKOUT statement SEMI ;
program ::= TROLLEY CONST_ID declarations statements DONE SEMI ;
exp_addsub ::= exp_multi (ARITH_ADD | ARITH_SUB exp_multi)* ;
argument_list ::= LPAR (expr (COMMA expr)*)? RPAR ;
--------------------tescol::11100.bgf--------------------
type ::= INTTYPE | DOUBLETYPE ;
parameters ::= parameter (COMMA parameter)* ;
parameter ::= ID COLON type ;
arguments ::= expression (COMMA expression)* ;
program ::= TROLLEY CONSTID CONTAINS (definition SEMI?)* CHECKOUT statement SEMI? DONE SEMI ;
addop ::= PLUS | MINUS ;
value ::= INT | DOUBLE ;
procedurecall ::= ID LEFTBRACKET arguments? RIGHTBRACKET ;
--------------------tescol::11101.bgf--------------------
constantidentifier ::= CONSTID ;
procedureapplication ::= varprocidentifier PARENTHESISL arguments PARENTHESISR ;
type ::= INT | DBLE ;
declaration ::= constdeclaration | vardeclaration | procdeclaration ;
prog ::= TROLLEY constantidentifier CONTAINS declaration* CHECKOUT statement DONE SEMI ;
number ::= INTEGER | DOUBLE ;
parameter ::= varprocidentifier COLON type ;
parameterlist ::= PARENTHESISL (parameter (COMMA parameter)*)? PARENTHESISR ;
constdeclaration ::= CONST constantidentifier COLON type DEFINED expression SEMI ;
varprocidentifier ::= VARPROCID ;
conditional ::= IF booleanexpression THEN statement ELSE statement ;
loop ::= WHILE booleanexpression DO statement ;
procdeclaration ::= PROC varprocidentifier parameterlist COLON type DEFINED statement SEMI ;
vardeclaration ::= VAR varprocidentifier COLON type SEMI ;
groupedstatement ::= BRACKETL statement+ BRACKETR SEMI ;
--------------------tescol::11110.bgf--------------------
relationalExpression ::= addtExpr (LESS_EQUAL | GREATER_EQUAL | LESS | GREATER addtExpr)? ;
conjunctionExpression ::= equalityExpression (CONJUNCTION equalityExpression)* ;
booleanExpr ::= conjunctionExpression (DISJUNCTION conjunctionExpression)* ;
skipStm ::= SKIP ;
conditionalExpr ::= booleanExpr (QUESTION conditionalExpr COLON conditionalExpr)? ;
type ::= INT | DOUBLE ;
prog ::= stat+ ;
declarations ::= (constDeclaration | varDeclaration | proDeclaration)+ ;
addtExpr ::= multExpr (ADDITION | SUBTRACTION multExpr)* ;
multExpr ::= unaryExpr (MULTIPLICATION | DIVISION | EXPONENTIATION unaryExpr)* ;
applyProcedure ::= ID LPAREN expressionList RPAREN ;
stat ::= compilationUnit ;
equalityExpression ::= relationalExpression (EQUALITY | NON_EQUALITY relationalExpression)? ;
--------------------tescol::11111.bgf--------------------
constant_declaration ::= CONST CONSTID COLON type ASSIGN expression SEMI ;
expon ::= unary (EXPONENTIATION unary)* ;
id ::= CONSTID | VARID ;
type ::= INT | DOUBLE ;
declaration ::= constant_declaration | variable_declaration | procedure_declaration ;
relational_op ::= EQUAL | NONEQUAL | GREATER | GREATER_EQUAL | LESS | LESS_EQUAL ;
single_statement ::= SKIP | assignment | conditional | loop ;
expression ::= disjunction (MIXFIX expression COLON expression)? ;
variable_declaration ::= VAR id COLON type SEMI ;
conjunction ::= relational (CONJUNCTION relational)* ;
proc ::= id LPAREN (term (COMMA term)*)? RPAREN ;
mult ::= expon (MULTIPLICATION | DIVISION expon)* ;
param_list ::= (id COLON type (COMMA id COLON type)*)? ;
statement ::= single_statement | multiple_statement ;
unary ::= negation* term ;
procedure_declaration ::= PROC id LPAREN param_list RPAREN COLON type ASSIGN statement SEMI ;
assignment ::= id ASSIGN expression ;
relational ::= add (relational_op add)* ;
conditional ::= IF expression THEN statement ELSE statement ;
negation ::= SUBTRACTION ;
loop ::= WHILE expression DO statement ;
program ::= TROLLEY CONSTID CONTAINS declaration* CHECKOUT statement SEMI DONE SEMI ;
disjunction ::= conjunction (DISJUNCTION conjunction)* ;
add ::= mult (ADDITION | SUBTRACTION mult)* ;
multiple_statement ::= LBRACE single_statement (SEMI single_statement)* RBRACE ;
--------------------tescol::reference.bgf--------------------
statement ::= stmtElem | stmtList ;
unary ::= SUB* term ;
EQOP ::= ET | NET ;
paramElem ::= ID COLON type ;
RELOP ::= LT | LTE | GT | GTE ;
type ::= INT | DOUB ;
declaration ::= constDecl | varDecl | procDecl ;
number ::= INTEGER | DOUBLE ;
stmtElem ::= SKIP | assign | condSt | loop ;
program ::= TROLLEY CONSTID CONTAINS (declaration SEMI)* CHECKOUT statement SEMI DONE SEMI ;
MULTOP ::= MULT | DIV ;
--------------------hats::abs.bgf--------------------
SqlTupleScalarFunction ::= SqlTupleScalarFunctionConcat ;
TYPE_IDENTIFIER ::= TYPE_IDENTIFIER_OLD ;
InitBlock ::= Block ;
NewlocExp ::= NEW LOC ;
Name ::= SimpleName ;
 Name ::= QualifiedName ;
Decl ::= DatatypeDecl ;
 Decl ::= FunctionDecl ;
 Decl ::= TypesynDecl ;
 Decl ::= ClassDecl ;
 Decl ::= InterfaceDecl ;
IDENTIFIER ::= ε ;
ModuleName ::= TypeName ;
AnyName ::= TypeName ;
 AnyName ::= Name ;
TypeName ::= QualifiedTypeName ;
 TypeName ::= SimpleTypeName ;
SqlAttrRef ::= DataExp ;
SqlComparisonRelation ::= LT ;
 SqlComparisonRelation ::= LTEQ ;
 SqlComparisonRelation ::= GTEQ ;
 SqlComparisonRelation ::= NOTEQ ;
 SqlComparisonRelation ::= EQ ;
 SqlComparisonRelation ::= GT ;
DataExp ::= OrExp ;
PureExpNoIf ::= ConstructorExp ;
 PureExpNoIf ::= NULL ;
 PureExpNoIf ::= FnappExp ;
 PureExpNoIf ::= CaseExp ;
 PureExpNoIf ::= VarOrFieldRef ;
 PureExpNoIf ::= THIS ;
 PureExpNoIf ::= FnappListExp ;
 PureExpNoIf ::= LetExp ;
CompoundStmt ::= IfThenElseStmt ;
 CompoundStmt ::= BlockWithoutAnnotations ;
 CompoundStmt ::= WhileStmt ;
Appcond ::= OrAppcond ;
INTLITERAL ::= ε ;
--------------------metamodels::ACG.bgf--------------------
CollectionExp ::= SequenceExp ;
CompoundStat ::= ForEachStat ;
 CompoundStat ::= OnceStat ;
 CompoundStat ::= VariableStat ;
 CompoundStat ::= OperationStat ;
 CompoundStat ::= ConditionalStat ;
 CompoundStat ::= LetStat ;
 CompoundStat ::= AnalyzeStat ;
Integer ::= integer() ;
StatementBlock ::= Node ;
 StatementBlock ::= CompoundStat ;
GetAsmStat ::= ε ;
Expression ::= VariableExp ;
 Expression ::= SelfExp ;
 Expression ::= LastExp ;
 Expression ::= IfExp ;
 Expression ::= IsAExp ;
 Expression ::= LetExp ;
 Expression ::= PropertyCallExp ;
 Expression ::= LiteralExp ;
ACGElement ::= Function ;
 ACGElement ::= Attribute ;
 ACGElement ::= Node ;
OnceStat ::= ε ;
NewStat ::= ε ;
EndIterateStat ::= ε ;
DupStat ::= ε ;
String ::= string() ;
SelfExp ::= ε ;
Statement ::= ReportStat ;
 Statement ::= FieldStat ;
 Statement ::= ParamStat ;
 Statement ::= EmitStat ;
 Statement ::= CompoundStat ;
LiteralExp ::= OclUndefinedExp ;
 LiteralExp ::= CollectionExp ;
 LiteralExp ::= BooleanExp ;
 LiteralExp ::= IntegerExp ;
 LiteralExp ::= StringExp ;
PushTStat ::= ε ;
IterateStat ::= ε ;
EmitWithLabelRefStat ::= IfStat ;
 EmitWithLabelRefStat ::= GotoStat ;
DupX1Stat ::= ε ;
PropertyCallExp ::= NavigationExp ;
 PropertyCallExp ::= IteratorExp ;
 PropertyCallExp ::= OperationCallExp ;
LocatedElement ::= ACG ;
 LocatedElement ::= ACGElement ;
 LocatedElement ::= StatementBlock ;
 LocatedElement ::= Statement ;
 LocatedElement ::= VariableDecl ;
 LocatedElement ::= Expression ;
LastExp ::= ε ;
EmitStat ::= LabelStat ;
 EmitStat ::= NewStat ;
 EmitStat ::= DupStat ;
 EmitStat ::= DupX1Stat ;
 EmitStat ::= PopStat ;
 EmitStat ::= SwapStat ;
 EmitStat ::= IterateStat ;
 EmitStat ::= EndIterateStat ;
 EmitStat ::= GetAsmStat ;
 EmitStat ::= FindMEStat ;
 EmitStat ::= PushTStat ;
 EmitStat ::= PushFStat ;
 EmitStat ::= EmitWithOperandStat ;
 EmitStat ::= EmitWithLabelRefStat ;
SwapStat ::= ε ;
OclUndefinedExp ::= ε ;
PopStat ::= ε ;
FindMEStat ::= ε ;
EmitWithOperandStat ::= PushStat ;
 EmitWithOperandStat ::= PushIStat ;
 EmitWithOperandStat ::= PushDStat ;
 EmitWithOperandStat ::= LoadStat ;
 EmitWithOperandStat ::= StoreStat ;
 EmitWithOperandStat ::= CallStat ;
 EmitWithOperandStat ::= PCallStat ;
 EmitWithOperandStat ::= SuperCallStat ;
 EmitWithOperandStat ::= GetStat ;
 EmitWithOperandStat ::= SetStat ;
Node ::= ASMNode ;
 Node ::= CodeNode ;
 Node ::= SimpleNode ;
PushFStat ::= ε ;
--------------------metamodels::ACME.bgf--------------------
Integer ::= integer() ;
Component ::= ComponentInstance ;
 Component ::= ComponentType ;
Element ::= Type ;
 Element ::= Component ;
 Element ::= Port ;
 Element ::= Connector ;
 Element ::= Role ;
 Element ::= System ;
Link ::= Attachment ;
 Link ::= Binding ;
ACMEEntry ::= System ;
 ACMEEntry ::= ComponentType ;
String ::= string() ;
--------------------metamodels::ADELFE.bgf--------------------
AIP ::= ε ;
--------------------metamodels::ASM.bgf--------------------
XAsmFile ::= XAsmSpec ;
 XAsmFile ::= Body ;
Integer ::= integer() ;
Rule ::= SkipRule ;
 Rule ::= AsmInvocation ;
 Rule ::= UpdateRule ;
 Rule ::= ChooseRule ;
 Rule ::= DoForallRule ;
 Rule ::= ConditionalRule ;
 Rule ::= ExtendRule ;
 Rule ::= ReturnRule ;
Term ::= Constant ;
 Term ::= FunctionOrVariableTerm ;
 Term ::= OperatorTerm ;
Declaration ::= Universe ;
 Declaration ::= Function ;
LocatedElement ::= XAsmFile ;
 LocatedElement ::= Asm ;
 LocatedElement ::= Signature ;
 LocatedElement ::= MetaInformation ;
 LocatedElement ::= AccessUpdateFunction ;
 LocatedElement ::= Declaration ;
 LocatedElement ::= Parameter ;
 LocatedElement ::= Initialization ;
 LocatedElement ::= Term ;
 LocatedElement ::= Rule ;
 LocatedElement ::= ElseIf ;
 LocatedElement ::= ElementDecl ;
 LocatedElement ::= Extension ;
VariableDecl ::= Argument ;
ElementDecl ::= VariableDecl ;
 ElementDecl ::= Function ;
Constant ::= BooleanConstant ;
 Constant ::= IntegerConstant ;
 Constant ::= StringConstant ;
 Constant ::= UndefConstant ;
String ::= string() ;
UndefConstant ::= ε ;
--------------------metamodels::ATL.bgf--------------------
CollectionExp ::= BagExp ;
 CollectionExp ::= OrderedSetExp ;
 CollectionExp ::= SequenceExp ;
 CollectionExp ::= SetExp ;
Integer ::= integer() ;
OclFeature ::= Attribute ;
 OclFeature ::= Operation ;
Rule ::= MatchedRule ;
 Rule ::= CalledRule ;
OutPatternElement ::= SimpleOutPatternElement ;
 OutPatternElement ::= ForEachOutPatternElement ;
LoopExp ::= IterateExp ;
 LoopExp ::= IteratorExp ;
RealType ::= ε ;
IntegerType ::= ε ;
PrimitiveExp ::= StringExp ;
 PrimitiveExp ::= BooleanExp ;
 PrimitiveExp ::= NumericExp ;
String ::= string() ;
InPatternElement ::= SimpleInPatternElement ;
NumericExp ::= RealExp ;
 NumericExp ::= IntegerExp ;
OclExpression ::= VariableExp ;
 OclExpression ::= SuperExp ;
 OclExpression ::= PrimitiveExp ;
 OclExpression ::= CollectionExp ;
 OclExpression ::= TupleExp ;
 OclExpression ::= MapExp ;
 OclExpression ::= EnumLiteralExp ;
 OclExpression ::= OclUndefinedExp ;
 OclExpression ::= PropertyCallExp ;
 OclExpression ::= LetExp ;
 OclExpression ::= IfExp ;
 OclExpression ::= OclType ;
ModuleElement ::= Helper ;
 ModuleElement ::= Rule ;
Statement ::= ExpressionStat ;
 Statement ::= BindingStat ;
 Statement ::= IfStat ;
 Statement ::= ForStat ;
PatternElement ::= InPatternElement ;
 PatternElement ::= OutPatternElement ;
StringType ::= ε ;
PropertyCallExp ::= NavigationOrAttributeCallExp ;
 PropertyCallExp ::= OperationCallExp ;
 PropertyCallExp ::= LoopExp ;
LocatedElement ::= Unit ;
 LocatedElement ::= ModuleElement ;
 LocatedElement ::= InPattern ;
 LocatedElement ::= OutPattern ;
 LocatedElement ::= Binding ;
 LocatedElement ::= LibraryRef ;
 LocatedElement ::= ActionBlock ;
 LocatedElement ::= Statement ;
 LocatedElement ::= OclExpression ;
 LocatedElement ::= MapElement ;
 LocatedElement ::= VariableDeclaration ;
 LocatedElement ::= TupleTypeAttribute ;
 LocatedElement ::= OclFeatureDefinition ;
 LocatedElement ::= OclContextDefinition ;
 LocatedElement ::= OclFeature ;
 LocatedElement ::= OclModel ;
NumericType ::= IntegerType ;
 NumericType ::= RealType ;
Primitive ::= StringType ;
 Primitive ::= BooleanType ;
 Primitive ::= NumericType ;
BooleanType ::= ε ;
--------------------metamodels::AWKPrograms.bgf--------------------
Integer ::= integer() ;
String ::= string() ;
--------------------metamodels::Agate.bgf--------------------
Object ::= AGATEObject ;
 Object ::= ReferenceObject ;
 Object ::= MADIOSObject ;
Integer ::= integer() ;
GenericActor ::= Actor ;
GenericSite ::= Site ;
MADIOSObject ::= Process ;
 MADIOSObject ::= Procedure ;
 MADIOSObject ::= Operation ;
 MADIOSObject ::= Activity ;
CommunicationObject ::= Interface ;
 CommunicationObject ::= Interconnection ;
 CommunicationObject ::= InformationFlow ;
 CommunicationObject ::= Traffic ;
 CommunicationObject ::= Information ;
Actor ::= TelecomOperator ;
InterfaceCharacteristic ::= ConfidentialityLevel ;
 InterfaceCharacteristic ::= Protocol ;
 InterfaceCharacteristic ::= Flow ;
 InterfaceCharacteristic ::= Other ;
GenericStandard ::= Standard ;
OrganizationObject ::= GenericCenter ;
 OrganizationObject ::= InformationSystem ;
 OrganizationObject ::= GenericRole ;
 OrganizationObject ::= GenericActor ;
ArchitectureObject ::= ReusableObject ;
 ArchitectureObject ::= CommunicationObject ;
String ::= string() ;
GenericThreat ::= Threat ;
GenericRole ::= Role ;
GenericCenter ::= Center ;
AGATEObject ::= Objective ;
 AGATEObject ::= OperationalContext ;
 AGATEObject ::= Project ;
 AGATEObject ::= GenericStandard ;
 AGATEObject ::= GenericThreat ;
 AGATEObject ::= TrafficClass ;
 AGATEObject ::= InterfaceCharacteristic ;
 AGATEObject ::= ProjectContextElement ;
 AGATEObject ::= DataClass ;
 AGATEObject ::= Event ;
 AGATEObject ::= Risk ;
 AGATEObject ::= Stake ;
 AGATEObject ::= Requirement ;
 AGATEObject ::= Means ;
 AGATEObject ::= DomainRelation ;
 AGATEObject ::= ArchitectureObject ;
ReferenceObject ::= ReferenceTechnicalComponent ;
 ReferenceObject ::= TechnicalComponentReferenceFrame ;
 ReferenceObject ::= ReferenceLogicalComponent ;
 ReferenceObject ::= ReferenceService ;
ReusableObject ::= GenericSite ;
 ReusableObject ::= Package ;
 ReusableObject ::= Service ;
 ReusableObject ::= TechnicalComponent ;
 ReusableObject ::= LogicalComponent ;
 ReusableObject ::= OperationalFunction ;
 ReusableObject ::= OrganizationObject ;
HierarchicalRelation ::= ε ;
Requirement ::= CountermeasureRequirement ;
 Requirement ::= TechnicalRequirement ;
 Requirement ::= PerformanceRequirement ;
 Requirement ::= InteroperabilityRequirement ;
 Requirement ::= OperationalRequirement ;
 Requirement ::= SecurityRequirement ;
Entity ::= Object ;
DomainRelation ::= HierarchicalRelation ;
 DomainRelation ::= FunctionalRelation ;
 DomainRelation ::= Dependence ;
--------------------metamodels::Amble.bgf--------------------
Integer ::= integer() ;
Element ::= Program ;
 Element ::= Process ;
 Element ::= State ;
 Element ::= Guard ;
 Element ::= Action ;
 Element ::= Network ;
 Element ::= Channel ;
 Element ::= Message ;
 Element ::= Variable ;
Transition ::= Trans ;
 Transition ::= Strans ;
 Transition ::= Transall ;
String ::= string() ;
--------------------metamodels::AntScripts.bgf--------------------
TaskElement ::= Task ;
 TaskElement ::= TaskParameter ;
CommentableElement ::= TaskElement ;
NamedElement ::= Attribute ;
 NamedElement ::= Project ;
 NamedElement ::= Target ;
 NamedElement ::= TaskElement ;
String ::= string() ;
--------------------metamodels::AnyLogic.bgf--------------------
Integer ::= integer() ;
Experiment ::= SimulationExperiment ;
String ::= string() ;
--------------------metamodels::Architectural_Description.bgf--------------------
Integer ::= integer() ;
ModelElement ::= ε ;
String ::= string() ;
--------------------metamodels::AsmL.bgf--------------------
Integer ::= integer() ;
SetTerm ::= EnumerateSet ;
 SetTerm ::= RangeSet ;
 SetTerm ::= AlgorithmSet ;
SequenceTerm ::= EnumerateSequence ;
 SequenceTerm ::= RangeSequence ;
Term ::= VarTerm ;
 Term ::= Operator ;
 Term ::= MapTerm ;
 Term ::= TulpletTerm ;
 Term ::= MethodCallTerm ;
 Term ::= PredicateTerm ;
 Term ::= SetTerm ;
 Term ::= SequenceTerm ;
 Term ::= Constant ;
Step ::= StepUntilFixPoint ;
 Step ::= StepExpression ;
 Step ::= StepForEach ;
Rule ::= SkipRule ;
 Rule ::= Step ;
 Rule ::= MethodInvocation ;
 Rule ::= UpdateRule ;
 Rule ::= ChooseRule ;
 Rule ::= ForallRule ;
 Rule ::= ConditionalRule ;
 Rule ::= ReturnRule ;
 Rule ::= AddRule ;
 Rule ::= RemoveRule ;
NullConstant ::= ε ;
AsmLElement ::= Namespace ;
 AsmLElement ::= Structure ;
 AsmLElement ::= Class ;
 AsmLElement ::= Enumeration ;
 AsmLElement ::= Function ;
 AsmLElement ::= Type ;
 AsmLElement ::= VarDeclaration ;
Type ::= NamedType ;
 Type ::= MapType ;
 Type ::= TupletType ;
 Type ::= SetType ;
 Type ::= SequenceType ;
VarOrCase ::= Case ;
LocatedElement ::= Body ;
 LocatedElement ::= InWhereHolds ;
 LocatedElement ::= AsmLFile ;
 LocatedElement ::= AsmLElement ;
 LocatedElement ::= VarOrCase ;
 LocatedElement ::= VarOrMethod ;
 LocatedElement ::= Enumerator ;
 LocatedElement ::= Parameter ;
 LocatedElement ::= Initially ;
 LocatedElement ::= Rule ;
 LocatedElement ::= Term ;
Function ::= Main ;
 Function ::= Method ;
UpdateRule ::= UpdateVarRule ;
 UpdateRule ::= UpdateFieldRule ;
 UpdateRule ::= UpdateMapRule ;
Constant ::= BooleanConstant ;
 Constant ::= IntegerConstant ;
 Constant ::= StringConstant ;
 Constant ::= NullConstant ;
StepExpression ::= StepWhile ;
 StepExpression ::= StepUntil ;
String ::= string() ;
--------------------metamodels::Automaton.bgf--------------------
Integer ::= integer() ;
String ::= string() ;
--------------------metamodels::BMM.bgf--------------------
Integer ::= integer() ;
Resource ::= ε ;
Influencer ::= Regulation ;
Regulation ::= ε ;
Vision ::= ε ;
String ::= string() ;
--------------------metamodels::BPEL.bgf--------------------
IMessage ::= Message ;
WSDLExtensibleElement ::= BPELExtensibleElement ;
 WSDLExtensibleElement ::= Binding ;
 WSDLExtensibleElement ::= BindingOperation ;
 WSDLExtensibleElement ::= Service ;
 WSDLExtensibleElement ::= Port ;
 WSDLExtensibleElement ::= Definition ;
 WSDLExtensibleElement ::= BindingInput ;
 WSDLExtensibleElement ::= BindingOutput ;
 WSDLExtensibleElement ::= BindingFault ;
 WSDLExtensibleElement ::= Types ;
IDefinition ::= Definition ;
IExtensibilityElement ::= ExtensibilityElement ;
IBinding ::= Binding ;
XSDMaxFacet ::= XSDMaxExclusiveFacet ;
 XSDMaxFacet ::= XSDMaxInclusiveFacet ;
XSDFundamentalFacet ::= XSDBoundedFacet ;
 XSDFundamentalFacet ::= XSDCardinalityFacet ;
 XSDFundamentalFacet ::= XSDNumericFacet ;
 XSDFundamentalFacet ::= XSDOrderedFacet ;
WSDLElement ::= WSDLExtensibleElement ;
 WSDLElement ::= MessageReference ;
 WSDLElement ::= PortType ;
 WSDLElement ::= Operation ;
 WSDLElement ::= Message ;
 WSDLElement ::= Part ;
 WSDLElement ::= ExtensibilityElement ;
 WSDLElement ::= WSDLImport ;
XSDTypeDefinition ::= XSDComplexTypeDefinition ;
 XSDTypeDefinition ::= XSDSimpleTypeDefinition ;
XSDTerm ::= XSDModelGroup ;
 XSDTerm ::= XSDWildcard ;
ITypes ::= Types ;
XSDSchemaContent ::= XSDRedefineContent ;
 XSDSchemaContent ::= XSDSchemaDirective ;
 XSDSchemaContent ::= XSDAttributeDeclaration ;
 XSDSchemaContent ::= XSDNotationDeclaration ;
IBindingInput ::= BindingInput ;
IService ::= Service ;
XSDFixedFacet ::= XSDFractionDigitsFacet ;
 XSDFixedFacet ::= XSDLengthFacet ;
 XSDFixedFacet ::= XSDMaxFacet ;
 XSDFixedFacet ::= XSDMaxLengthFacet ;
 XSDFixedFacet ::= XSDMinFacet ;
 XSDFixedFacet ::= XSDMinLengthFacet ;
 XSDFixedFacet ::= XSDTotalDigitsFacet ;
 XSDFixedFacet ::= XSDWhiteSpaceFacet ;
XSDScope ::= XSDSchema ;
 XSDScope ::= XSDComplexTypeDefinition ;
IPort ::= Port ;
XSDParticleContent ::= XSDTerm ;
MessageReference ::= Input ;
 MessageReference ::= Output ;
 MessageReference ::= Fault ;
EObject ::= ε ;
IOperation ::= Operation ;
IBindingOutput ::= BindingOutput ;
IPart ::= Part ;
XSDRepeatableFacet ::= XSDEnumerationFacet ;
 XSDRepeatableFacet ::= XSDPatternFacet ;
XSDComplexTypeContent ::= XSDParticle ;
 XSDComplexTypeContent ::= XSDSimpleTypeDefinition ;
XSDRedefinableComponent ::= XSDAttributeGroupDefinition ;
 XSDRedefinableComponent ::= XSDModelGroupDefinition ;
 XSDRedefinableComponent ::= XSDTypeDefinition ;
XSDComponent ::= XSDComplexTypeContent ;
 XSDComponent ::= XSDFacet ;
 XSDComponent ::= XSDNamedComponent ;
 XSDComponent ::= XSDScope ;
 XSDComponent ::= XSDXPathDefinition ;
 XSDComponent ::= XSDAnnotation ;
 XSDComponent ::= XSDAttributeUse ;
 XSDComponent ::= XSDTerm ;
XSDConcreteComponent ::= XSDAttributeGroupContent ;
 XSDConcreteComponent ::= XSDComponent ;
 XSDConcreteComponent ::= XSDDiagnostic ;
 XSDConcreteComponent ::= XSDParticleContent ;
 XSDConcreteComponent ::= XSDSchemaContent ;
IImport ::= WSDLImport ;
XSDMinFacet ::= XSDMinExclusiveFacet ;
 XSDMinFacet ::= XSDMinInclusiveFacet ;
XSDFacet ::= XSDConstrainingFacet ;
 XSDFacet ::= XSDFundamentalFacet ;
XSDNamedComponent ::= XSDFeature ;
 XSDNamedComponent ::= XSDIdentityConstraintDefinition ;
 XSDNamedComponent ::= XSDNotationDeclaration ;
 XSDNamedComponent ::= XSDRedefinableComponent ;
XSDFeature ::= XSDAttributeDeclaration ;
 XSDFeature ::= XSDElementDeclaration ;
XSDAttributeGroupContent ::= XSDAttributeUse ;
IBindingOperation ::= BindingOperation ;
XSDSchemaCompositor ::= XSDInclude ;
 XSDSchemaCompositor ::= XSDRedefine ;
IBindingFault ::= BindingFault ;
XSDSchemaDirective ::= XSDImport ;
 XSDSchemaDirective ::= XSDSchemaCompositor ;
IPortType ::= PortType ;
XSDConstrainingFacet ::= XSDFixedFacet ;
 XSDConstrainingFacet ::= XSDRepeatableFacet ;
XSDRedefineContent ::= XSDAnnotation ;
 XSDRedefineContent ::= XSDRedefinableComponent ;
 XSDRedefineContent ::= XSDTypeDefinition ;
--------------------metamodels::BPMN.bgf--------------------
Integer ::= integer() ;
String ::= string() ;
--------------------metamodels::Book.bgf--------------------
Integer ::= integer() ;
String ::= string() ;
--------------------metamodels::Bossa.bgf--------------------
Integer ::= integer() ;
Storage ::= Process_Storage ;
 Storage ::= Scheduler_Storage ;
 Storage ::= Queue_Storage ;
Select_Expression ::= ε ;
Scheduler ::= NormalScheduler ;
 Scheduler ::= VirtualScheduler ;
MoveStmt ::= NormalMoveStmt ;
 MoveStmt ::= ForwardMoveStmt ;
Fifo_QueueType ::= ε ;
Expression ::= Integer_Expression ;
 Expression ::= Id_Expression ;
 Expression ::= State_Expression ;
 Expression ::= True_Expression ;
 Expression ::= False_Expression ;
 Expression ::= Unop_Expression ;
 Expression ::= Etoile_Expression ;
 Expression ::= ExpId_Expression ;
 Expression ::= Select_Expression ;
 Expression ::= FnName_Expression ;
 Expression ::= Empty_Expression ;
 Expression ::= SRCOnSched_Expression ;
 Expression ::= SchedulerOf_Expression ;
 Expression ::= In_Expression ;
 Expression ::= Parenthese_Expression ;
 Expression ::= Binop_Expression ;
False_Expression ::= ε ;
Normal_QueueType ::= ε ;
Lifo_QueueType ::= ε ;
Statment ::= IfStmt ;
 Statment ::= ForStmt ;
 Statment ::= ReturnStmt ;
 Statment ::= SwitchStmt ;
 Statment ::= AssignStmt ;
 Statment ::= MoveStmt ;
 Statment ::= DeferStmt ;
 Statment ::= PrimStmt ;
 Statment ::= ErrorStmt ;
 Statment ::= BreakStmt ;
String ::= string() ;
ForStmt ::= ForeachForStmt ;
 ForStmt ::= ForEachIncreasingForStmt ;
 ForStmt ::= ForEachDecreasingForStmt ;
SatateName_MoveExpr ::= ε ;
QueueType ::= Normal_QueueType ;
 QueueType ::= Fifo_QueueType ;
 QueueType ::= Lifo_QueueType ;
Process_Storage ::= ε ;
Select_MoveExpr ::= ε ;
True_Expression ::= ε ;
BreakStmt ::= ε ;
MoveExpr ::= Select_MoveExpr ;
 MoveExpr ::= SatateName_MoveExpr ;
 MoveExpr ::= ID_MoveExpr ;
 MoveExpr ::= IDSource_MoveExpr ;
 MoveExpr ::= IDTarget_MoveExpr ;
CritDecl ::= CritDeclWhithId ;
 CritDecl ::= CritDeclWhithoutId ;
SRCOnSched_Expression ::= ε ;
AbstractSchedulerDecl ::= SchedulerDecl ;
 AbstractSchedulerDecl ::= VSchdulerDecl ;
--------------------metamodels::BusinessEntityModel.bgf--------------------
Integer ::= integer() ;
Class ::= BusinessEntity ;
BusinessRole ::= ArtifactRole ;
 BusinessRole ::= PerformerRole ;
 BusinessRole ::= OrganisationalUnit ;
Action ::= BusinessRole ;
DataType ::= BusinessEntityPropertySet ;
String ::= string() ;
--------------------metamodels::BusinessProcessModel.bgf--------------------
BusinessProcess ::= ε ;
Exception ::= ε ;
Integer ::= integer() ;
SendCommunication ::= ε ;
Clock ::= ε ;
Decision ::= ε ;
ControlFlow ::= ε ;
Namespace ::= Task ;
 Namespace ::= DataSet ;
Parameter ::= DataElement ;
DataFlow ::= ε ;
DataSet ::= OutputSet ;
 DataSet ::= InputSet ;
Task ::= SimpleTask ;
 Task ::= CoumpoundTask ;
ReceiveCommunication ::= ε ;
ModelElement ::= Flow ;
 ModelElement ::= ControlPoint ;
DataElement ::= Input ;
 DataElement ::= Output ;
String ::= string() ;
Output ::= Exception ;
--------------------metamodels::CADM.bgf--------------------
String ::= string() ;
--------------------metamodels::CDE.bgf--------------------
Integer ::= integer() ;
IUmlClass ::= IUmlComponent ;
ICdeMember ::= ε ;
IUmlMember ::= ICdeMember ;
ICdeComponent ::= ε ;
String ::= string() ;
--------------------metamodels::CFG.bgf--------------------
Integer ::= integer() ;
AbstractNode ::= Node ;
 AbstractNode ::= ConditionalNode ;
String ::= string() ;
--------------------metamodels::COBOL.bgf--------------------
Integer ::= integer() ;
String ::= string() ;
--------------------metamodels::CORBAComponent.bgf--------------------
Integer ::= integer() ;
ValueDef ::= ε ;
String ::= string() ;
--------------------metamodels::CPL.bgf--------------------
NodeContainer ::= SubAction ;
 NodeContainer ::= Outgoing ;
 NodeContainer ::= Incoming ;
 NodeContainer ::= NotPresent ;
 NodeContainer ::= Otherwise ;
 NodeContainer ::= SwitchedAddress ;
 NodeContainer ::= SwitchedString ;
 NodeContainer ::= SwitchedLanguage ;
 NodeContainer ::= SwitchedTime ;
 NodeContainer ::= SwitchedPriority ;
 NodeContainer ::= Busy ;
 NodeContainer ::= NoAnswer ;
 NodeContainer ::= Redirection ;
 NodeContainer ::= Failure ;
 NodeContainer ::= Default ;
 NodeContainer ::= Location ;
Integer ::= integer() ;
Element ::= CPL ;
 Element ::= NodeContainer ;
 Element ::= Node ;
Action ::= SignallingAction ;
SignallingAction ::= Proxy ;
 SignallingAction ::= Redirect ;
 SignallingAction ::= Reject ;
Switch ::= AddressSwitch ;
 Switch ::= StringSwitch ;
 Switch ::= LanguageSwitch ;
 Switch ::= TimeSwitch ;
 Switch ::= PrioritySwitch ;
Node ::= Switch ;
 Node ::= SubCall ;
 Node ::= Action ;
 Node ::= Location ;
String ::= string() ;
--------------------metamodels::CPR.bgf--------------------
Integer ::= integer() ;
String ::= string() ;
--------------------metamodels::CSM.bgf--------------------
Integer ::= integer() ;
Component ::= ε ;
Message ::= ε ;
PassiveResource ::= Component ;
String ::= string() ;
--------------------metamodels::CWMCore.bgf--------------------
Integer ::= integer() ;
String ::= string() ;
--------------------metamodels::CWMRelationalData.bgf--------------------
Integer ::= integer() ;
String ::= string() ;
--------------------metamodels::Class.bgf--------------------
Integer ::= integer() ;
DataType ::= ε ;
NamedElt ::= Classifier ;
 NamedElt ::= Attribute ;
Classifier ::= DataType ;
 Classifier ::= Class ;
String ::= string() ;
--------------------metamodels::ChocoModel.bgf--------------------
Integer ::= integer() ;
Element ::= Expression ;
 Element ::= PostConstraint ;
LocatedElement ::= Package ;
 LocatedElement ::= Import ;
 LocatedElement ::= ChocoProblem ;
 LocatedElement ::= Element ;
 LocatedElement ::= Domain ;
Expression ::= ConstraintDef ;
 Expression ::= IntVar ;
 Expression ::= IntConstant ;
 Expression ::= SymbolicTerm ;
 Expression ::= IntValue ;
 Expression ::= IntExp ;
 Expression ::= Constraint ;
String ::= string() ;
--------------------metamodels::ClassicModels.bgf--------------------
Integer ::= integer() ;
AddressInfo ::= Office ;
 AddressInfo ::= Customer ;
String ::= string() ;
--------------------metamodels::Cocus.owl.bgf--------------------
Integer ::= integer() ;
Description ::= ε ;
Group_Email ::= ε ;
Preference ::= ε ;
SubjectArea ::= ε ;
Assistance ::= ε ;
Acceptance ::= ε ;
String ::= string() ;
Detail ::= ε ;
Request ::= Help_Request ;
URL ::= Event_URL ;
Misc ::= ε ;
Rejection ::= ε ;
Review_Form_Setup ::= ε ;
Preview ::= ε ;
Notification_Email ::= ε ;
Feature_Request ::= ε ;
Rejection_Email ::= ε ;
Inforamtion ::= ε ;
--------------------metamodels::DSL.bgf--------------------
Integer ::= integer() ;
SimpleType ::= ε ;
Namespace ::= LoadedElement ;
 Namespace ::= Type ;
Type ::= SimpleType ;
 Type ::= Enumeration ;
LoadedElement ::= DomainModel ;
 LoadedElement ::= Classifier ;
NamedElement ::= Namespace ;
 NamedElement ::= Role ;
 NamedElement ::= ValueProperty ;
 NamedElement ::= EnumerationLiteral ;
String ::= string() ;
Classifier ::= Class ;
 Classifier ::= Relationship ;
--------------------metamodels::CompanyStructure.bgf--------------------
Integer ::= integer() ;
Employee ::= ε ;
CashRegister ::= ε ;
StoreBackOffice ::= ε ;
String ::= string() ;
CorporateHQBackOffice ::= ε ;
--------------------metamodels::ComponentUML.bgf--------------------
Integer ::= integer() ;
String ::= string() ;
--------------------metamodels::Conference.owl.bgf--------------------
Conference_applicant ::= Registeered_applicant ;
Contribution_co-author ::= ε ;
Preference ::= ε ;
SubjectArea ::= ε ;
Acceptance ::= ε ;
Regular_contribution ::= Extended_abstract ;
 Regular_contribution ::= Paper ;
String ::= string() ;
Detail ::= ε ;
Conference_participant ::= Passive_conference_participant ;
 Conference_participant ::= Active_conference_participant ;
Request ::= Help_Request ;
Rejection ::= ε ;
Review_Form_Setup ::= ε ;
Preview ::= ε ;
Late_paid_applicant ::= ε ;
Camera_ready_contribution ::= ε ;
Rejection_Email ::= ε ;
Inforamtion ::= ε ;
Contribution_1th-author ::= ε ;
Integer ::= integer() ;
Registeered_applicant ::= Paid_applicant ;
Description ::= ε ;
Group_Email ::= ε ;
Invited_speaker ::= ε ;
Assistance ::= ε ;
Organization ::= ε ;
Conference_fees ::= ε ;
Organizer ::= ε ;
URL ::= Event_URL ;
Misc ::= ε ;
Early_paid_applicant ::= ε ;
Passive_conference_participant ::= ε ;
Extended_abstract ::= Abstract ;
Accepted_contribution ::= Camera_ready_contribution ;
Notification_Email ::= ε ;
Feature_Request ::= ε ;
--------------------metamodels::Contact.bgf--------------------
Integer ::= integer() ;
String ::= string() ;
--------------------metamodels::ControllerUML.bgf--------------------
Integer ::= integer() ;
StateMachineAction ::= ε ;
Event ::= ε ;
String ::= string() ;
--------------------metamodels::Cristal.bgf--------------------
Integer ::= integer() ;
String ::= string() ;
--------------------metamodels::DSLModel.bgf--------------------
Integer ::= integer() ;
Element ::= ModelElement ;
 Element ::= ReferenceLink ;
NamedElement ::= EmbeddingLink ;
 NamedElement ::= Property ;
 NamedElement ::= Role ;
String ::= string() ;
Value ::= IntegerValue ;
 Value ::= DoubleValue ;
 Value ::= BooleanValue ;
 Value ::= StringValue ;
--------------------metamodels::DSLtools.bgf--------------------
Integer ::= integer() ;
SimpleType ::= ε ;
Namespace ::= LoadedElement ;
 Namespace ::= Type ;
Type ::= SimpleType ;
 Type ::= Enumeration ;
LoadedElement ::= DomainModel ;
 LoadedElement ::= Classifier ;
NamedElement ::= Namespace ;
 NamedElement ::= Role ;
 NamedElement ::= ValueProperty ;
 NamedElement ::= EnumerationLiteral ;
String ::= string() ;
Classifier ::= Class ;
 Classifier ::= Relationship ;
--------------------metamodels::DTD.bgf--------------------
Children ::= Sequence ;
 Children ::= Leaf ;
 Children ::= Choice ;
ElementContent ::= Mixed ;
 ElementContent ::= Children ;
Element ::= AnyElement ;
 Element ::= RestrictedElement ;
AttributeType ::= Enumeration ;
TypeDescription ::= Notation ;
 TypeDescription ::= Entity ;
 TypeDescription ::= Element ;
 TypeDescription ::= AttributeList ;
 TypeDescription ::= AttributeDescription ;
String ::= string() ;
AttributeDescription ::= NoDefaultValue ;
 AttributeDescription ::= DefaultValue ;
AnyElement ::= ε ;
--------------------metamodels::DTMP.bgf--------------------
Integer ::= integer() ;
String ::= string() ;
--------------------metamodels::DXF.bgf--------------------
Integer ::= integer() ;
String ::= string() ;
--------------------metamodels::DeploymentReport.bgf--------------------
Integer ::= integer() ;
String ::= string() ;
--------------------metamodels::DiagramInterchange.bgf--------------------
GraphicPrimitive ::= Polyline ;
 GraphicPrimitive ::= Ellipse ;
Integer ::= integer() ;
LeafElement ::= TextElement ;
 LeafElement ::= Image ;
 LeafElement ::= GraphicPrimitive ;
GraphElement ::= GraphEdge ;
 GraphElement ::= GraphNode ;
CoreElement ::= ε ;
SemanticModelBridge ::= SimpleSemanticModelElement ;
 SemanticModelBridge ::= UML1SemanticModelBridge ;
 SemanticModelBridge ::= CoreSemanticModelBridge ;
DiagramElement ::= Reference ;
 DiagramElement ::= GraphElement ;
 DiagramElement ::= LeafElement ;
ElementsElement ::= ε ;
String ::= string() ;
--------------------metamodels::DoDAF-OV5.bgf--------------------
Element ::= DoDAFModel ;
 Element ::= Document ;
 Element ::= AMSpecificationElement ;
 Element ::= PAExchangeRequirement ;
 Element ::= ArchitectureDocument ;
 Element ::= IE ;
 Element ::= AMIERole ;
 Element ::= InformationAssetDocument ;
 Element ::= AMPA ;
 Element ::= PACapability ;
 Element ::= PA ;
 Element ::= InformationAsset ;
 Element ::= Task ;
 Element ::= Organization ;
 Element ::= OrganizationType ;
 Element ::= OperationalRole ;
 Element ::= Occupation ;
 Element ::= PersonType ;
 Element ::= Skill ;
 Element ::= DOSCR ;
InformationAsset ::= AM ;
String ::= string() ;
--------------------metamodels::DoDAF-SV4.bgf--------------------
Element ::= DoDAFModel ;
 Element ::= Document ;
 Element ::= SystemDocument ;
 Element ::= ArchitectureDocument ;
 Element ::= System ;
 Element ::= SystemPA ;
 Element ::= IE ;
 Element ::= AMIERole ;
 Element ::= AMIERoleGraphic ;
 Element ::= InformationAssetDocument ;
 Element ::= AMPA ;
 Element ::= AMPAGraphic ;
 Element ::= PA ;
 Element ::= PACapability ;
 Element ::= InformationAsset ;
 Element ::= SystemPAStandard ;
 Element ::= InformationTechnologyStandard ;
 Element ::= LineOfBusiness ;
 Element ::= Task ;
 Element ::= BusinessSubfunction ;
 Element ::= ArchitectureBusinessSubFunction ;
 Element ::= OperationalRolePA ;
 Element ::= OperationalRole ;
 Element ::= OrganizationTypeOperationalRole ;
 Element ::= OrganizationOperationalRole ;
 Element ::= Occupation ;
 Element ::= PersonType ;
 Element ::= PersonTypeCapabilityNorm ;
 Element ::= Skill ;
 Element ::= Position ;
String ::= string() ;
--------------------metamodels::DoDAF-SV5.bgf--------------------
Element ::= DoDAFModel ;
 Element ::= Document ;
 Element ::= SystemFunctionTraceabilityElement ;
 Element ::= SystemDocument ;
 Element ::= ArchitectureDocument ;
 Element ::= PA ;
 Element ::= SystemPA ;
 Element ::= SoftwareApplicationProcedurePA ;
 Element ::= InformationAsset ;
 Element ::= AMPA ;
 Element ::= System ;
 Element ::= Task ;
 Element ::= ArchitectureTask ;
 Element ::= Capability ;
 Element ::= CapabilityDocument ;
 Element ::= SystemCapability ;
 Element ::= InformationTechnologyRequirement ;
InformationAsset ::= AM ;
String ::= string() ;
--------------------metamodels::DoDAF.bgf--------------------
Integer ::= integer() ;
ServiceBroker ::= ε ;
Constraint ::= ε ;
Element ::= System ;
 Element ::= SystemRole ;
 Element ::= SystemFunction ;
 Element ::= SystemRoleInterface ;
 Element ::= SystemAtNode ;
 Element ::= SystemAtNodeInterface ;
 Element ::= SystemsNode ;
 Element ::= COI ;
 Element ::= Vocabulary ;
 Element ::= DataReference ;
 Element ::= Performer ;
 Element ::= OperationalRole ;
 Element ::= OperationalActivity ;
 Element ::= Product ;
 Element ::= SystemProductFlow ;
 Element ::= ConstraintOrRequirement ;
 Element ::= DIA ;
 Element ::= NMJIC ;
 Element ::= HigherEchelon ;
 Element ::= JFC ;
 Element ::= F2C2 ;
 Element ::= ComponentCommand ;
 Element ::= SubordinateAirCommand ;
 Element ::= AOCCID ;
 Element ::= AOCCombatPlanStrategyCells ;
Data ::= ε ;
Material ::= ε ;
ServiceProvider ::= ServiceMediator ;
QualityRequirement ::= ε ;
ConstraintOrRequirement ::= Constraint ;
 ConstraintOrRequirement ::= QualityRequirement ;
ServiceRegistry ::= ε ;
String ::= string() ;
ServiceLocator ::= ε ;
--------------------metamodels::DotNET_SystemReflection.bgf--------------------
Integer ::= integer() ;
MemberInfo ::= PropertyInfo ;
 MemberInfo ::= FieldInfo ;
 MemberInfo ::= EventInfo ;
 MemberInfo ::= MethodBase ;
 MemberInfo ::= Type ;
NamedElement ::= Assembly ;
 NamedElement ::= Module ;
 NamedElement ::= MemberInfo ;
 NamedElement ::= ParameterInfo ;
MethodBase ::= MethodInfo ;
 MethodBase ::= ConstructorInfo ;
String ::= string() ;
--------------------metamodels::EAI.bgf--------------------
Integer ::= integer() ;
EAIResource ::= EAIQueue ;
FCMSource ::= EAISource ;
FCMSink ::= EAISink ;
String ::= string() ;
--------------------metamodels::EG.bgf--------------------
Integer ::= integer() ;
Split ::= ε ;
Join ::= ε ;
Release ::= ε ;
Acquire ::= ε ;
Loop ::= ε ;
Fork ::= ε ;
Branch ::= ε ;
String ::= string() ;
--------------------metamodels::EQN.bgf--------------------
Integer ::= integer() ;
Allocate ::= ε ;
Source ::= ε ;
Split ::= ε ;
Join ::= ε ;
Release ::= ε ;
Sink ::= ε ;
Fork ::= ε ;
String ::= string() ;
--------------------metamodels::EXPRESS.bgf--------------------
Express_metamodel::Instances::NumberValue ::= ε ;
Express_metamodel::Algorithms::ActualLISTType ::= ε ;
Express_metamodel::Algorithms::VARParameter ::= ε ;
Express_metamodel::Algorithms::Procedure ::= ε ;
Express_metamodel::java::lang::void ::= ε ;
Express_metamodel::Rules::ONEOFConstraint ::= ε ;
Express_metamodel::Instances::StringValue ::= ε ;
Express_metamodel::Algorithms::ActualSETType ::= ε ;
Express_metamodel::Core::NumericType ::= ε ;
Express_metamodel::Instances::BooleanValue ::= ε ;
Express_metamodel::Instances::GenericAggregate ::= ε ;
Express_metamodel::Instances::LogicalValue ::= ε ;
String ::= string() ;
Express_metamodel::Core::BAGType ::= ε ;
Express_metamodel::Rules::TOTAL_OVERConstraint ::= ε ;
Express_metamodel::Core::GeneralLISTType ::= ε ;
Express_metamodel::Algorithms::ActualStructure ::= ε ;
Express_metamodel::Algorithms::ActualDataType ::= ε ;
Express_metamodel::java::lang::int ::= ε ;
Express_metamodel::Core::GeneralSETType ::= ε ;
Express_metamodel::Expressions::SELFRef ::= ε ;
Integer ::= integer() ;
Express_metamodel::Instances::IntegerValue ::= ε ;
Express_metamodel::Algorithms::ActualBAGType ::= ε ;
Express_metamodel::Instances::Indeterminate ::= ε ;
Express_metamodel::Rules::ANDConstraint ::= ε ;
Express_metamodel::Statements::NullStatement ::= ε ;
Express_metamodel::Core::GeneralBAGType ::= ε ;
Express_metamodel::Core::LISTType ::= ε ;
Express_metamodel::Instances::RealValue ::= ε ;
Express_metamodel::Core::SETType ::= ε ;
Express_metamodel::Instances::BinaryValue ::= ε ;
Express_metamodel::Core::LogicType ::= ε ;
Express_metamodel::Instances::MultiLeafInstance ::= ε ;
--------------------metamodels::EXPRESSb.bgf--------------------
GeneralBAGType ::= ε ;
LISTType ::= ε ;
FunctionResult ::= ε ;
ANDConstraint ::= ε ;
IntegerValue ::= ε ;
Procedure ::= ε ;
String ::= string() ;
ActualSETType ::= ε ;
SELFRef ::= ε ;
ActualLISTType ::= ε ;
ActualStructure ::= ε ;
VARParameter ::= ε ;
Integer ::= integer() ;
SETType ::= ε ;
Indeterminate ::= ε ;
ONEOFConstraint ::= ε ;
LogicType ::= ε ;
GeneralSETType ::= ε ;
ActualBAGType ::= ε ;
RealValue ::= ε ;
ActualDataType ::= ε ;
BinaryValue ::= ε ;
SkipStatement ::= ε ;
EscapeStatement ::= ε ;
MultiLeafInstance ::= ε ;
TOTAL_OVERConstraint ::= ε ;
BooleanValue ::= ε ;
NumberValue ::= ε ;
GenericAggregate ::= ε ;
LogicalValue ::= ε ;
NullStatement ::= ε ;
NumericType ::= ε ;
QueryVariable ::= ε ;
BAGType ::= ε ;
StringValue ::= ε ;
GeneralLISTType ::= ε ;
--------------------metamodels::EclipseLaunchConfigurations.bgf--------------------
Attribute ::= StringAttribute ;
 Attribute ::= BooleanAttribute ;
 Attribute ::= MapAttribute ;
 Attribute ::= ListAttribute ;
String ::= string() ;
--------------------metamodels::EclipsePlugIn.bgf--------------------
Integer ::= integer() ;
String ::= string() ;
--------------------metamodels::Family.bgf--------------------
Integer ::= integer() ;
String ::= string() ;
--------------------metamodels::FeatureDiagrams.bgf--------------------
Integer ::= integer() ;
String ::= string() ;
--------------------metamodels::GAIA.bgf--------------------
Activity ::= ε ;
LivenessRule ::= ε ;
SafetyRule ::= ε ;
LivenessProperty ::= ε ;
SafetyProperty ::= ε ;
String ::= string() ;
--------------------metamodels::FiniteStateMachine.bgf--------------------
Integer ::= integer() ;
String ::= string() ;
--------------------metamodels::FlatSignalFlow.bgf--------------------
Integer ::= integer() ;
String ::= string() ;
--------------------metamodels::GUI.bgf--------------------
Integer ::= integer() ;
LocatedElement ::= Named ;
 LocatedElement ::= Column ;
Named ::= GUI ;
 Named ::= Tab ;
 Named ::= Composant ;
Composant ::= Group ;
 Composant ::= Label ;
 Composant ::= TextArea ;
 Composant ::= Table ;
 Composant ::= ComboBox ;
 Composant ::= Row ;
 Composant ::= Item ;
 Composant ::= Button ;
String ::= string() ;
--------------------metamodels::GWPNV3.bgf--------------------
Arc ::= PTArc ;
 Arc ::= TPArc ;
--------------------metamodels::GWPNV4.bgf--------------------
Integer ::= integer() ;
Arc ::= PTArc ;
 Arc ::= TPArc ;
--------------------metamodels::GWPNV5.bgf--------------------
Integer ::= integer() ;
Arc ::= PTArc ;
 Arc ::= TPArc ;
--------------------metamodels::Gantt.bgf--------------------
Integer ::= integer() ;
Vacation ::= ε ;
Description ::= ε ;
Previous ::= ε ;
String ::= string() ;
--------------------metamodels::GenericEditor.bgf--------------------
Integer ::= integer() ;
AbstractElement ::= Block ;
 AbstractElement ::= GroupElement ;
LocatedElement ::= Editor ;
 LocatedElement ::= AbstractElement ;
 LocatedElement ::= Element ;
 LocatedElement ::= Format ;
 LocatedElement ::= Color ;
 LocatedElement ::= Font ;
 LocatedElement ::= Indent ;
String ::= string() ;
--------------------metamodels::GenericOutline.bgf--------------------
Integer ::= integer() ;
LocatedElement ::= Outline ;
 LocatedElement ::= Node ;
 LocatedElement ::= Label ;
 LocatedElement ::= LabelSuite ;
 LocatedElement ::= Map ;
String ::= string() ;
--------------------metamodels::GeoTrans.bgf--------------------
Integer ::= integer() ;
String ::= string() ;
--------------------metamodels::Grafcet.bgf--------------------
Connection ::= StepToTransition ;
 Connection ::= TransitionToStep ;
Element ::= Step ;
 Element ::= Transition ;
LocatedElement ::= NamedElement ;
NamedElement ::= Grafcet ;
 NamedElement ::= Element ;
 NamedElement ::= Connection ;
String ::= string() ;
--------------------metamodels::HAL.bgf--------------------
MetaType ::= MetaArtType ;
 MetaType ::= MetaArtNoticeType ;
Integer ::= integer() ;
AutreType ::= Autre ;
TheseType ::= These ;
AbstractDepotType ::= DepotsType ;
 AbstractDepotType ::= WebLink ;
ReferenceBiblioType ::= ArtRevueType ;
 ReferenceBiblioType ::= WorkshopType ;
 ReferenceBiblioType ::= ArtOuvrageType ;
 ReferenceBiblioType ::= OuvrageType ;
 ReferenceBiblioType ::= TheseType ;
 ReferenceBiblioType ::= BrevetType ;
 ReferenceBiblioType ::= AutreType ;
BrevetType ::= Brevet ;
ArtRevueType ::= ArtRevue ;
 ArtRevueType ::= ArtJournal ;
OuvrageType ::= Ouvrage ;
AbstractMetaLab ::= MetaLab ;
Article ::= ArticleRecent ;
 Article ::= ArticleRetro ;
ArtOuvrageType ::= ArtOuvrage ;
Server ::= ε ;
AbstractDepot ::= Depot ;
 AbstractDepot ::= DepotWeb ;
Entry ::= Article ;
 Entry ::= Notice ;
WorkshopType ::= Workshop ;
 WorkshopType ::= Communication ;
 WorkshopType ::= Conference ;
String ::= string() ;
--------------------metamodels::HPROF.bgf--------------------
Integer ::= integer() ;
LocatedElement ::= Profile ;
 LocatedElement ::= Method ;
 LocatedElement ::= ThreadAction ;
 LocatedElement ::= Trace ;
 LocatedElement ::= StackTraceElement ;
 LocatedElement ::= Times ;
 LocatedElement ::= Time ;
 LocatedElement ::= Date ;
String ::= string() ;
ThreadAction ::= ThreadStart ;
 ThreadAction ::= ThreadEnd ;
--------------------metamodels::HierarchicalSignalFlow.bgf--------------------
Integer ::= integer() ;
String ::= string() ;
--------------------metamodels::HierarchicalStateMachine.bgf--------------------
Integer ::= integer() ;
String ::= string() ;
--------------------metamodels::HybridAutomata.bgf--------------------
Integer ::= integer() ;
String ::= string() ;
--------------------metamodels::IEEE1471ConceptualModel.bgf--------------------
Element ::= IEEE1471Model ;
 Element ::= System ;
 Element ::= Mission ;
 Element ::= Environment ;
 Element ::= Architecture ;
 Element ::= Rationale ;
 Element ::= ArchitecturalDescription ;
 Element ::= View ;
 Element ::= Model ;
 Element ::= Stakeholder ;
 Element ::= Concern ;
 Element ::= Viewpoint ;
 Element ::= LibraryViewpoint ;
String ::= string() ;
--------------------metamodels::IRL.bgf--------------------
Integer ::= integer() ;
StringType ::= ε ;
SimpleRuleVariable ::= ε ;
OperatorCallExpression ::= ε ;
Extended ::= Definition ;
 Extended ::= ClassInstancesDeclaration ;
RealType ::= ε ;
IntegerType ::= ε ;
PropertyDeclaration ::= ε ;
Definition ::= ImportDefinition ;
 Definition ::= PropertyDefinition ;
NamedElement ::= ExtendedIdentifier ;
 NamedElement ::= RuleSet ;
 NamedElement ::= Type ;
 NamedElement ::= RulesetElementDefinition ;
ClassType ::= ε ;
BooleanType ::= ε ;
String ::= string() ;
--------------------metamodels::IEEE1471ViewpointM2.bgf--------------------
ModellingRule ::= ε ;
Language ::= ε ;
Pattern ::= ε ;
ViewpointImport ::= ε ;
Concern ::= ε ;
--------------------metamodels::IMSTransactionMessage.bgf--------------------
TDLangElement ::= ε ;
Integer ::= integer() ;
StateData ::= ε ;
SecurityData ::= ε ;
VariableLengthField ::= ε ;
ControlData ::= ε ;
TwoByteField ::= ε ;
UserData ::= ε ;
String ::= string() ;
--------------------metamodels::M.bgf--------------------
MElement ::= Module ;
 MElement ::= ModuleMember ;
Integer ::= integer() ;
NumericalValue ::= IntegerValue ;
 NumericalValue ::= DecimalValue ;
DefaultValueExpression ::= ε ;
ModuleMember ::= DerivedType ;
 ModuleMember ::= Language ;
 ModuleMember ::= Entity ;
String ::= string() ;
Value ::= NumericalValue ;
 Value ::= StringValue ;
 Value ::= BooleanValue ;
IdentifiedElement ::= MElement ;
 IdentifiedElement ::= Field ;
 IdentifiedElement ::= Collection ;
 IdentifiedElement ::= ComputedValue ;
--------------------metamodels::Jess.bgf--------------------
ExitExp ::= ε ;
Integer ::= integer() ;
EngineExp ::= ε ;
DefinitionExp ::= GlobalDefinition ;
 DefinitionExp ::= FunctionDefinition ;
 DefinitionExp ::= AdviceDefinition ;
 DefinitionExp ::= UnDefAdvice ;
 DefinitionExp ::= FactDefinition ;
 DefinitionExp ::= RuleDefinition ;
 DefinitionExp ::= ModuleDefinition ;
 DefinitionExp ::= QueryDefinition ;
 DefinitionExp ::= TemplateDefinition ;
LocatedElement ::= Root ;
 LocatedElement ::= Expression ;
 LocatedElement ::= SlotOp ;
 LocatedElement ::= VarDefinition ;
 LocatedElement ::= DeclareRule ;
 LocatedElement ::= DeclareVar ;
 LocatedElement ::= DeclareBloc ;
 LocatedElement ::= ASlotDef ;
 LocatedElement ::= SlotOptions ;
 LocatedElement ::= ConditionAction ;
 LocatedElement ::= ElifConditionAction ;
Expression ::= Integ ;
 Expression ::= Floa ;
 Expression ::= Str ;
 Expression ::= Ident ;
 Expression ::= TemplateExpression ;
 Expression ::= DefinitionExp ;
 Expression ::= UseFuncExp ;
UseFuncExp ::= WhileExp ;
 UseFuncExp ::= ForExp ;
 UseFuncExp ::= ForeachExp ;
 UseFuncExp ::= FuncCall ;
 UseFuncExp ::= EngineExp ;
 UseFuncExp ::= ExitExp ;
 UseFuncExp ::= IfExpression ;
String ::= string() ;
Ident ::= ValidIdentifier ;
 Ident ::= SlotName ;
 Ident ::= JessVariable ;
--------------------metamodels::KDM.bgf--------------------
TypeUnit ::= ε ;
TrueFlow ::= ε ;
MarshalledResource ::= ε ;
LockResource ::= ε ;
Project ::= ε ;
Catalog ::= ε ;
ChoiceContent ::= ε ;
IntegerType ::= ε ;
DataResource ::= ε ;
PointerType ::= ε ;
Transition ::= ε ;
TemplateType ::= ε ;
ContentReference ::= ε ;
State ::= ε ;
ResourceDescription ::= ε ;
SymbolicLink ::= ε ;
Supplier ::= ε ;
PlatformElement ::= ε ;
RuntimeResource ::= ε ;
ContentElement ::= ε ;
BooleanType ::= ε ;
Component ::= ε ;
OctetstringType ::= ε ;
ExtendedDataElement ::= ε ;
ItemUnit ::= ε ;
SoftwareSystem ::= ε ;
NamingResource ::= ε ;
Configuration ::= ε ;
IndexUnit ::= ε ;
Report ::= ε ;
ScenarioUnit ::= ε ;
ScaledType ::= ε ;
ExceptionUnit ::= ε ;
Value ::= ε ;
FalseFlow ::= ε ;
CharType ::= ε ;
Subsystem ::= ε ;
Process ::= ε ;
BuildComponent ::= ε ;
StreamResource ::= ε ;
BuildElement ::= ε ;
Flow ::= ε ;
InitialState ::= ε ;
RecordType ::= ε ;
ExternalActor ::= ε ;
FileResource ::= ε ;
UIElement ::= ε ;
RelationalTable ::= ε ;
CompilationUnit ::= ε ;
TimeType ::= ε ;
BitType ::= ε ;
UIField ::= ε ;
ConceptualElement ::= ε ;
ContentAttribute ::= ε ;
BuildProduct ::= ε ;
RuleUnit ::= ε ;
CatchUnit ::= ε ;
TryUnit ::= ε ;
BinaryFile ::= ε ;
OnExit ::= ε ;
Image ::= ε ;
SeqContent ::= ε ;
BuildStep ::= ε ;
ArchitectureView ::= ε ;
AllContent ::= ε ;
Tool ::= ε ;
SynonymType ::= ε ;
ReferenceKey ::= ε ;
OnEntry ::= ε ;
Index ::= ε ;
GuardedFlow ::= ε ;
Layer ::= ε ;
String ::= string() ;
FactUnit ::= ε ;
TermUnit ::= ε ;
CodeElement ::= ε ;
TemplateParameter ::= ε ;
UniqueKey ::= ε ;
OrdinalType ::= ε ;
Thread ::= ε ;
StructureElement ::= ε ;
SharedUnit ::= ε ;
DateType ::= ε ;
IncludeDirective ::= ε ;
ExecutionResource ::= ε ;
Package ::= ε ;
EventElement ::= ε ;
PrimitiveType ::= ε ;
InventoryElement ::= ε ;
MixedContent ::= ε ;
Integer ::= integer() ;
LanguageUnit ::= ε ;
ChoiceType ::= ε ;
Library ::= ε ;
GroupContent ::= ε ;
BitstringType ::= ε ;
BehaviorUnit ::= ε ;
FloatType ::= ε ;
CodeAssembly ::= ε ;
MessagingResource ::= ε ;
BlockUnit ::= ε ;
UIDisplay ::= ε ;
VoidType ::= ε ;
RecordFile ::= ε ;
Screen ::= ε ;
RelationalView ::= ε ;
StringType ::= ε ;
DecimalType ::= ε ;
DataSegment ::= ε ;
ConditionalDirective ::= ε ;
OctetType ::= ε ;
FinallyUnit ::= ε ;
ExecutableFile ::= ε ;
DataManager ::= ε ;
MacroDirective ::= ε ;
--------------------metamodels::KDMSimplified.bgf--------------------
Integer ::= integer() ;
Element ::= ModelElement ;
 Element ::= Annotation ;
 Element ::= Attribute ;
 Element ::= KDMExtensionFamily ;
 Element ::= Stereotype ;
 Element ::= TagDefinition ;
 Element ::= TaggedValue ;
 Element ::= KDMFramework ;
KDMFramework ::= KDMModel ;
KDMEntity ::= KDMContainer ;
 KDMEntity ::= KDMGroup ;
ModelElement ::= KDMEntity ;
 ModelElement ::= KDMRelationship ;
String ::= string() ;
--------------------metamodels::KM3.bgf--------------------
Integer ::= integer() ;
LocatedElement ::= ModelElement ;
 LocatedElement ::= Metamodel ;
DataType ::= ε ;
ModelElement ::= Classifier ;
 ModelElement ::= EnumLiteral ;
 ModelElement ::= StructuralFeature ;
 ModelElement ::= Package ;
String ::= string() ;
--------------------metamodels::Klaper.bgf--------------------
Integer ::= integer() ;
Join ::= ε ;
Fork ::= ε ;
String ::= string() ;
--------------------metamodels::LQN.bgf--------------------
Integer ::= integer() ;
String ::= string() ;
--------------------metamodels::LaTeX.bgf--------------------
Integer ::= integer() ;
Corps ::= Figure ;
 Corps ::= Items ;
 Corps ::= Enumerate ;
 Corps ::= Section ;
 Corps ::= Value ;
 Corps ::= Cite ;
ValuedElement ::= Type ;
 ValuedElement ::= Title ;
 ValuedElement ::= Name ;
 ValuedElement ::= Date ;
 ValuedElement ::= Adress ;
 ValuedElement ::= Phone ;
 ValuedElement ::= Fax ;
 ValuedElement ::= EMail ;
 ValuedElement ::= Abstract ;
 ValuedElement ::= Keywords ;
 ValuedElement ::= Path ;
 ValuedElement ::= Label ;
 ValuedElement ::= Item ;
 ValuedElement ::= Description ;
 ValuedElement ::= Value ;
 ValuedElement ::= Cite ;
String ::= string() ;
--------------------metamodels::MAS.bgf--------------------
LivenessRule ::= ε ;
SafetyRule ::= ε ;
LivenessProperty ::= ε ;
SafetyProperty ::= ε ;
Requirement ::= ε ;
Non Functionnal Requirement ::= ε ;
String ::= string() ;
Scenario ::= ε ;
--------------------metamodels::Marte.bgf--------------------
Namespace ::= Package ;
 Namespace ::= Classifier ;
 Namespace ::= BehavioralFeature ;
 Namespace ::= Region ;
 Namespace ::= Transition ;
 Namespace ::= State ;
 Namespace ::= InteractionOperand ;
DefaultLink ::= ε ;
HwASIC ::= ε ;
Event ::= TimeEvent ;
StructuralFeature ::= Property ;
Array ::= ε ;
ConnectableElement ::= Parameter ;
 ConnectableElement ::= Variable ;
MessageEnd ::= Gate ;
StructuredClassifier ::= EncapsulatedClassifier ;
 StructuredClassifier ::= Collaboration ;
Behavior ::= StateMachine ;
 Behavior ::= Activity ;
 Behavior ::= Interaction ;
ValueSpecification ::= Expression ;
 ValueSpecification ::= OpaqueExpression ;
 ValueSpecification ::= TimeExpression ;
 ValueSpecification ::= Duration ;
 ValueSpecification ::= Interval ;
String ::= string() ;
SynchronizationResource ::= ε ;
RedefinableElement ::= Feature ;
 RedefinableElement ::= ExtensionPoint ;
 RedefinableElement ::= ActivityNode ;
 RedefinableElement ::= ActivityEdge ;
 RedefinableElement ::= Region ;
 RedefinableElement ::= Transition ;
ClockConstraint ::= ε ;
SwSynchronizationResource ::= ε ;
TUK ::= ε ;
PaCommStep ::= ε ;
TemplateableElement ::= StringExpression ;
Release ::= ε ;
UtilityType ::= ε ;
MARTE_DataTypes_Interval ::= ε ;
HwDevice ::= ε ;
DeviceResource ::= ε ;
NamedElement ::= Namespace ;
 NamedElement ::= TypedElement ;
 NamedElement ::= RedefinableElement ;
 NamedElement ::= DeploymentTarget ;
 NamedElement ::= CollaborationUse ;
 NamedElement ::= Message ;
 NamedElement ::= Lifeline ;
 NamedElement ::= Trigger ;
 NamedElement ::= Vertex ;
 NamedElement ::= ParameterSet ;
 NamedElement ::= DeployedArtifact ;
 NamedElement ::= MessageEnd ;
 NamedElement ::= InteractionFragment ;
 NamedElement ::= GeneralOrdering ;
 NamedElement ::= PackageableElement ;
 NamedElement ::= ActivityPartition ;
 NamedElement ::= Include ;
 NamedElement ::= Extend ;
InteractionFragment ::= ExecutionSpecification ;
 InteractionFragment ::= InteractionUse ;
 InteractionFragment ::= OccurrenceSpecification ;
 InteractionFragment ::= Interaction ;
 InteractionFragment ::= InteractionOperand ;
ConcurrencyResource ::= ε ;
HwSupport ::= ε ;
Integer ::= integer() ;
MultiplicityElement ::= ConnectorEnd ;
 MultiplicityElement ::= Parameter ;
 MultiplicityElement ::= Pin ;
 MultiplicityElement ::= Variable ;
PackageableElement ::= Constraint ;
 PackageableElement ::= Type ;
 PackageableElement ::= GeneralizationSet ;
 PackageableElement ::= Observation ;
 PackageableElement ::= Event ;
 PackageableElement ::= Dependency ;
 PackageableElement ::= ValueSpecification ;
Element ::= Comment ;
 Element ::= NamedElement ;
 Element ::= TemplateableElement ;
 Element ::= Relationship ;
 Element ::= TemplateSignature ;
 Element ::= TemplateParameter ;
 Element ::= ParameterableElement ;
 Element ::= TemplateParameterSubstitution ;
 Element ::= MultiplicityElement ;
 Element ::= Image ;
 Element ::= ActivityGroup ;
 Element ::= Slot ;
 Element ::= ExceptionHandler ;
ClockResource ::= ε ;
BehavioralFeature ::= Reception ;
 BehavioralFeature ::= Operation ;
ParameterableElement ::= ConnectableElement ;
 ParameterableElement ::= PackageableElement ;
IdealClock ::= ε ;
DeployedArtifact ::= Artifact ;
Relationship ::= DirectedRelationship ;
 Relationship ::= Association ;
HwResourceService ::= ε ;
TimingResource ::= ε ;
Action ::= InvocationAction ;
 Action ::= StructuredActivityNode ;
DeploymentTarget ::= InstanceSpecification ;
Feature ::= Connector ;
 Feature ::= StructuralFeature ;
 Feature ::= BehavioralFeature ;
HwCommunicationResource ::= ε ;
TimedObservation ::= ε ;
EncapsulatedClassifier ::= Class ;
BehavioredClassifier ::= UseCase ;
 BehavioredClassifier ::= Collaboration ;
 BehavioredClassifier ::= Class ;
TypedElement ::= ConnectableElement ;
 TypedElement ::= ValueSpecification ;
 TypedElement ::= ObjectNode ;
GaCommStep ::= ε ;
ActivityNode ::= ExecutableNode ;
 ActivityNode ::= ObjectNode ;
ActivityGroup ::= InterruptibleActivityRegion ;
 ActivityGroup ::= ActivityPartition ;
ExecutableNode ::= Action ;
Observation ::= TimeObservation ;
 Observation ::= DurationObservation ;
HwBranchPredictor ::= ε ;
HwI_O ::= ε ;
PaRequestedStep ::= ε ;
HwTimingResource ::= ε ;
SecondaryScheduler ::= ε ;
Vertex ::= Pseudostate ;
 Vertex ::= ConnectionPointReference ;
ComputingResource ::= ε ;
ObjectNode ::= Pin ;
Classifier ::= BehavioredClassifier ;
 Classifier ::= DataType ;
 Classifier ::= Signal ;
 Classifier ::= Interface ;
 Classifier ::= StructuredClassifier ;
 Classifier ::= Association ;
 Classifier ::= Artifact ;
DirectedRelationship ::= ElementImport ;
 DirectedRelationship ::= PackageImport ;
 DirectedRelationship ::= TemplateBinding ;
 DirectedRelationship ::= Generalization ;
 DirectedRelationship ::= PackageMerge ;
 DirectedRelationship ::= ProfileApplication ;
 DirectedRelationship ::= ProtocolConformance ;
 DirectedRelationship ::= Dependency ;
 DirectedRelationship ::= Include ;
 DirectedRelationship ::= Extend ;
--------------------metamodels::METAH.bgf--------------------
METAHEntry ::= Package ;
 METAHEntry ::= PackageImplementation ;
 METAHEntry ::= ProcessDeclaration ;
 METAHEntry ::= ProcessImplementation ;
 METAHEntry ::= Connection ;
 METAHEntry ::= MacroDeclaration ;
 METAHEntry ::= MacroImplementation ;
Integer ::= integer() ;
String ::= string() ;
--------------------metamodels::MICRO.owl.bgf--------------------
start_date_of_camera-ready_submission ::= ε ;
Invited_Speaker ::= ε ;
Preference ::= ε ;
Welcome_address ::= ε ;
Refusing_manuscript ::= ε ;
Regular_contribution ::= Extended_abstract ;
Conference_hotel ::= ε ;
Coffee_break ::= ε ;
Rejection ::= ε ;
Renting ::= ε ;
Late_paid_applicant ::= ε ;
Nonauthor_registration_fee ::= ε ;
classification ::= ε ;
Author_attendee_book_registration_fee ::= ε ;
AcceptRating ::= ε ;
IASTED_member ::= ε ;
ClosingTalk ::= ε ;
Workshop_Session ::= ε ;
Registeered_applicant ::= Paid_applicant ;
Late-Registered_Participant ::= ε ;
Description ::= ε ;
MealBreak ::= ε ;
Conference_Proceedings ::= ε ;
Shuttle_bus ::= ε ;
Technical_commitee ::= ε ;
Conference_Hiker ::= ε ;
Departure ::= ε ;
Listener ::= ε ;
Social_program ::= Dinner_banquet ;
Industrial_Session ::= ε ;
Conference_fees ::= ε ;
Conference_state ::= ε ;
ComputerNetworksEnterpriseTopic ::= ε ;
Early_paid_applicant ::= ε ;
Passive_conference_participant ::= ε ;
Conference_airport ::= ε ;
Receiving_manuscript ::= ε ;
Senior_Reviewer_URL ::= ε ;
Excursion ::= ε ;
Presenter_city ::= ε ;
date_of_notification ::= ε ;
Departure_tax ::= ε ;
Early-Registered_Participant ::= ε ;
phase_of_conference ::= ε ;
Conference_applicant ::= Registeered_applicant ;
Time_zone ::= ε ;
Video_cassette_player ::= ε ;
Single_hotel_room ::= ε ;
Hotel_presenter ::= ε ;
Contribution_co-author ::= ε ;
Introduction_of_speaker ::= ε ;
Session_chair ::= ε ;
Multi-author_Volume ::= Proceedings ;
ConferenceSession ::= ε ;
SubjectArea ::= ε ;
Nonmember_registration_fee ::= ε ;
ComputerNetworksMeasurementsTopic ::= ε ;
Coctail_reception ::= ε ;
Dinner_banquet ::= ε ;
Chair_URL ::= ε ;
Car ::= ε ;
Regular_Session ::= ε ;
start_date_of_conference ::= ε ;
Conference_participant ::= Passive_conference_participant ;
 Conference_participant ::= Active_conference_participant ;
Reception ::= ε ;
Full_day_tour ::= ε ;
LCD_projector ::= ε ;
Presenter_house ::= ε ;
Cd_proceening ::= ε ;
Preview ::= ε ;
Workshop ::= ε ;
Rejection_Email ::= ε ;
Presenter_university ::= ε ;
Student_registration_fee ::= ε ;
Poster_Session ::= ε ;
Tutorial_Chair ::= ε ;
Inforamtion ::= ε ;
Trip_day ::= ε ;
Hotel_registration_form ::= ε ;
Session_Chair ::= ε ;
Group_Email ::= ε ;
lower_tier_reviewing_process ::= ε ;
Regular_Program_Committee_member ::= ε ;
ComputerNetworksOpticalTopic ::= ε ;
end_date_of_conference ::= ε ;
Double_hotel_room ::= ε ;
AccpetIfRoomRating ::= ε ;
Sponsor_city ::= ε ;
Conference_city ::= ε ;
One_day_presenter ::= ε ;
Accepting_manuscript ::= ε ;
SC_Member ::= ε ;
Presenter ::= Invited_Speaker ;
Accepted_contribution ::= Camera_ready_contribution ;
PC_Member ::= SC_Member ;
 PC_Member ::= Session_Chair ;
 PC_Member ::= Tutorial_Chair ;
 PC_Member ::= PC_Chair ;
 PC_Member ::= Workshop_Chair ;
OC_Member ::= OC_Chair ;
Modelling ::= ε ;
Value_added_tax ::= ε ;
start_date_of_full_paper_submission ::= ε ;
Conference_days ::= One_conference_day ;
OC_Chair ::= ε ;
Acceptance ::= ε ;
Credit_card ::= ε ;
Country ::= ε ;
start_date_of_abstract_submission ::= ε ;
end_date_of_camera-ready_submission ::= ε ;
CoffeeBreak ::= ε ;
Conference_Session ::= Industrial_Session ;
Detail ::= ε ;
Final_manuscript ::= ε ;
Request ::= Help_Request ;
Bank_transfer ::= ε ;
end_date_of_abstract_submission ::= ε ;
Worker_non_speaker ::= ε ;
Book_proceeding ::= ε ;
Registration_form ::= ε ;
Student_non_speaker ::= ε ;
Demo_Chair ::= ε ;
Review_Form_Setup ::= ε ;
Conference_Trip ::= ε ;
Camera_ready_contribution ::= ε ;
Contribution_1th-author ::= ε ;
Proceedings ::= Conference_Proceedings ;
ReviewForm ::= ε ;
Hotel_fee ::= ε ;
Sponsor_company_house ::= ε ;
PC_Chair ::= ε ;
Student_lecturer ::= ε ;
Assistance ::= ε ;
Conference_building ::= ε ;
NumericalReviewQuestion ::= ε ;
WeekRejectRating ::= ε ;
ComputerNetworksSecurityTopic ::= ε ;
PersonalPublicationHistory ::= ε ;
Notification_Email ::= ε ;
Trip ::= ε ;
Banquet ::= ε ;
Cheque ::= ε ;
Conference_Banquet ::= ε ;
Taxi ::= ε ;
rejection_notification_email ::= ε ;
RejectRating ::= ε ;
Computer ::= ε ;
Introduction ::= Introduction_of_speaker ;
Demo_Session ::= ε ;
Worker_lecturer ::= ε ;
end_date_of_full_paper_submission ::= ε ;
intensity ::= ε ;
String ::= string() ;
Currency ::= ε ;
TextualReviewQuestion ::= ε ;
Card ::= Credit_card ;
acceptance_notification_email ::= ε ;
Author_attendee_cd_registration_fee ::= ε ;
ComputerNetworksManagementTopic ::= ε ;
Trip_city ::= ε ;
Contact_Person_URL ::= ε ;
Fee_for_extra_trip ::= ε ;
ComputerNetworksSwitchingTopic ::= ε ;
Conference_restaurant ::= ε ;
Integer ::= integer() ;
Speaker_lecture ::= ε ;
Technic_activity ::= ε ;
Invited_speaker ::= ε ;
Presenter_state ::= ε ;
Regular_Reviewer_URL ::= ε ;
ComputerNetworksSensorTopic ::= ε ;
institute ::= ε ;
IASTED_non_member ::= ε ;
One_conference_day ::= ε ;
Overhead_projector ::= ε ;
Organizer ::= CommitteeMember ;
 Organizer ::= Reviewer ;
WelcomeTalk ::= ε ;
Workshop_Chair ::= ε ;
Sponsor_state ::= ε ;
Misc ::= ε ;
Author_information_form ::= ε ;
ComputerNetworksAapplicationsTopic ::= ε ;
Submitted_Paper ::= Assigned_Paper ;
Initial_manuscipt ::= ε ;
FreeTimeBreak ::= ε ;
Feature_Request ::= ε ;
Scientific_Event ::= Individual_Presentation ;
 Scientific_Event ::= Workshop ;
 Scientific_Event ::= Conference ;
 Scientific_Event ::= Track ;
 Scientific_Event ::= Session ;
Van ::= ε ;
Simulating ::= ε ;
Memeber_registration_fee ::= ε ;
--------------------metamodels::MSOfficeExcel_SpreadsheetMLBasicDef.bgf--------------------
Integer ::= integer() ;
TableElement ::= ColOrRowElement ;
 TableElement ::= Cell ;
ValueType ::= StringValue ;
 ValueType ::= NumberValue ;
 ValueType ::= DateTimeTypeValue ;
 ValueType ::= BooleanValue ;
 ValueType ::= ErrorValue ;
StyledElement ::= Table ;
 StyledElement ::= TableElement ;
ColOrRowElement ::= Column ;
 ColOrRowElement ::= Row ;
String ::= string() ;
--------------------metamodels::MSOfficeExcel_SpreadsheetMLPrintingSetup.bgf--------------------
Integer ::= integer() ;
TableElement ::= ColOrRowElement ;
 TableElement ::= Cell ;
ValueType ::= StringValue ;
 ValueType ::= NumberValue ;
 ValueType ::= DateTimeTypeValue ;
 ValueType ::= BooleanValue ;
 ValueType ::= ErrorValue ;
StyledElement ::= Table ;
 StyledElement ::= TableElement ;
ColOrRowElement ::= Column ;
 ColOrRowElement ::= Row ;
HeaderOrFooterElt ::= Header ;
 HeaderOrFooterElt ::= Footer ;
String ::= string() ;
--------------------metamodels::MSOfficeExcel_SpreadsheetMLSimplified.bgf--------------------
TableElement ::= ColOrRowElement ;
 TableElement ::= Cell ;
Integer ::= integer() ;
ValueType ::= StringValue ;
 ValueType ::= NumberValue ;
 ValueType ::= DateTimeTypeValue ;
 ValueType ::= BooleanValue ;
 ValueType ::= ErrorValue ;
ColOrRowElement ::= Column ;
 ColOrRowElement ::= Row ;
String ::= string() ;
--------------------metamodels::MSOfficeExcel_SpreadsheetMLStyles.bgf--------------------
Integer ::= integer() ;
TableElement ::= ColOrRowElement ;
 TableElement ::= Cell ;
ValueType ::= StringValue ;
 ValueType ::= NumberValue ;
 ValueType ::= DateTimeTypeValue ;
 ValueType ::= BooleanValue ;
 ValueType ::= ErrorValue ;
StyledElement ::= Table ;
 StyledElement ::= TableElement ;
ColOrRowElement ::= Column ;
 ColOrRowElement ::= Row ;
HeaderOrFooterElt ::= Header ;
 HeaderOrFooterElt ::= Footer ;
String ::= string() ;
--------------------metamodels::MSOfficeExcel_SpreadsheetMLWorkbookProp.bgf--------------------
TableElement ::= ColOrRowElement ;
 TableElement ::= Cell ;
Integer ::= integer() ;
ValueType ::= StringValue ;
 ValueType ::= NumberValue ;
 ValueType ::= DateTimeTypeValue ;
 ValueType ::= BooleanValue ;
 ValueType ::= ErrorValue ;
StyledElement ::= Table ;
 StyledElement ::= TableElement ;
ColOrRowElement ::= Column ;
 ColOrRowElement ::= Row ;
String ::= string() ;
--------------------metamodels::MSOfficeExcel_SpreadsheetMLWorksheetOpt.bgf--------------------
Integer ::= integer() ;
TableElement ::= ColOrRowElement ;
 TableElement ::= Cell ;
ValueType ::= StringValue ;
 ValueType ::= NumberValue ;
 ValueType ::= DateTimeTypeValue ;
 ValueType ::= BooleanValue ;
 ValueType ::= ErrorValue ;
StyledElement ::= Table ;
 StyledElement ::= TableElement ;
ColOrRowElement ::= Column ;
 ColOrRowElement ::= Row ;
String ::= string() ;
--------------------metamodels::MSOfficeWord_WordprocessingMLBasicDef.bgf--------------------
RunContentElt ::= BreakElt ;
 RunContentElt ::= NoBreakHyphen ;
 RunContentElt ::= SoftHyphen ;
 RunContentElt ::= AnnotationRef ;
 RunContentElt ::= FootnoteRef ;
 RunContentElt ::= EndnoteRef ;
 RunContentElt ::= Separator ;
 RunContentElt ::= ContinuationSeparator ;
 RunContentElt ::= PgNum ;
 RunContentElt ::= Cr ;
 RunContentElt ::= Text ;
 RunContentElt ::= DelText ;
 RunContentElt ::= InstrText ;
 RunContentElt ::= DelInstrText ;
 RunContentElt ::= Footnote ;
 RunContentElt ::= Endnote ;
 RunContentElt ::= Picture ;
 RunContentElt ::= Symbol ;
 RunContentElt ::= Tab ;
 RunContentElt ::= FldChar ;
Integer ::= integer() ;
NoteElt ::= Footnote ;
 NoteElt ::= Endnote ;
ValueType ::= StringValue ;
 ValueType ::= FloatValue ;
 ValueType ::= DateTimeTypeValue ;
 ValueType ::= BooleanValue ;
BlockLevelChunkElt ::= ParaElt ;
 BlockLevelChunkElt ::= RunLevelElt ;
BlockLevelElt ::= BlockLevelChunkElt ;
 BlockLevelElt ::= CfChunk ;
RunLevelElt ::= ε ;
ParaContentElt ::= RunElt ;
 ParaContentElt ::= SimpleFieldElt ;
 ParaContentElt ::= HLinkElt ;
 ParaContentElt ::= SubDocElt ;
String ::= string() ;
--------------------metamodels::MSOfficeWord_WordprocessingMLSimplified.bgf--------------------
RunContentElt ::= BreakElt ;
 RunContentElt ::= NoBreakHyphen ;
 RunContentElt ::= SoftHyphen ;
 RunContentElt ::= AnnotationRef ;
 RunContentElt ::= FootnoteRef ;
 RunContentElt ::= EndnoteRef ;
 RunContentElt ::= Separator ;
 RunContentElt ::= ContinuationSeparator ;
 RunContentElt ::= PgNum ;
 RunContentElt ::= Cr ;
 RunContentElt ::= Picture ;
 RunContentElt ::= Tab ;
 RunContentElt ::= Text ;
 RunContentElt ::= DelText ;
 RunContentElt ::= InstrText ;
 RunContentElt ::= DelInstrText ;
 RunContentElt ::= Footnote ;
 RunContentElt ::= Endnote ;
 RunContentElt ::= Symbol ;
 RunContentElt ::= FldChar ;
Integer ::= integer() ;
NoteElt ::= Footnote ;
 NoteElt ::= Endnote ;
BlockLevelChunkElt ::= ParaElt ;
BlockLevelElt ::= BlockLevelChunkElt ;
ParaContentElt ::= RunElt ;
String ::= string() ;
--------------------metamodels::MSOfficeWord_WordprocessingMLStyles.bgf--------------------
RunContentElt ::= BreakElt ;
 RunContentElt ::= NoBreakHyphen ;
 RunContentElt ::= SoftHyphen ;
 RunContentElt ::= AnnotationRef ;
 RunContentElt ::= FootnoteRef ;
 RunContentElt ::= EndnoteRef ;
 RunContentElt ::= Separator ;
 RunContentElt ::= ContinuationSeparator ;
 RunContentElt ::= PgNum ;
 RunContentElt ::= Cr ;
 RunContentElt ::= Text ;
 RunContentElt ::= DelText ;
 RunContentElt ::= InstrText ;
 RunContentElt ::= DelInstrText ;
 RunContentElt ::= Footnote ;
 RunContentElt ::= Endnote ;
 RunContentElt ::= Picture ;
 RunContentElt ::= Symbol ;
 RunContentElt ::= Tab ;
 RunContentElt ::= FldChar ;
Integer ::= integer() ;
NoteElt ::= Footnote ;
 NoteElt ::= Endnote ;
ValueType ::= StringValue ;
 ValueType ::= FloatValue ;
 ValueType ::= DateTimeTypeValue ;
 ValueType ::= BooleanValue ;
BlockLevelChunkElt ::= ParaElt ;
 BlockLevelChunkElt ::= TableElt ;
 BlockLevelChunkElt ::= RunLevelElt ;
BlockLevelElt ::= BlockLevelChunkElt ;
 BlockLevelElt ::= CfChunk ;
ParaContentElt ::= RunElt ;
 ParaContentElt ::= SimpleFieldElt ;
 ParaContentElt ::= HLinkElt ;
 ParaContentElt ::= SubDocElt ;
String ::= string() ;
--------------------metamodels::MSOfficeWord_WordprocessingMLTableElts.bgf--------------------
RunContentElt ::= BreakElt ;
 RunContentElt ::= NoBreakHyphen ;
 RunContentElt ::= SoftHyphen ;
 RunContentElt ::= AnnotationRef ;
 RunContentElt ::= FootnoteRef ;
 RunContentElt ::= EndnoteRef ;
 RunContentElt ::= Separator ;
 RunContentElt ::= ContinuationSeparator ;
 RunContentElt ::= PgNum ;
 RunContentElt ::= Cr ;
 RunContentElt ::= Text ;
 RunContentElt ::= DelText ;
 RunContentElt ::= InstrText ;
 RunContentElt ::= DelInstrText ;
 RunContentElt ::= Footnote ;
 RunContentElt ::= Endnote ;
 RunContentElt ::= Picture ;
 RunContentElt ::= Symbol ;
 RunContentElt ::= Tab ;
 RunContentElt ::= FldChar ;
Integer ::= integer() ;
NoteElt ::= Footnote ;
 NoteElt ::= Endnote ;
ValueType ::= StringValue ;
 ValueType ::= FloatValue ;
 ValueType ::= DateTimeTypeValue ;
 ValueType ::= BooleanValue ;
BlockLevelChunkElt ::= ParaElt ;
 BlockLevelChunkElt ::= TableElt ;
 BlockLevelChunkElt ::= RunLevelElt ;
BlockLevelElt ::= BlockLevelChunkElt ;
 BlockLevelElt ::= CfChunk ;
ParaContentElt ::= RunElt ;
 ParaContentElt ::= SimpleFieldElt ;
 ParaContentElt ::= HLinkElt ;
 ParaContentElt ::= SubDocElt ;
String ::= string() ;
--------------------metamodels::MSProject.bgf--------------------
NamedElement ::= Task ;
String ::= string() ;
--------------------metamodels::MSProject2.bgf--------------------
Integer ::= integer() ;
String ::= string() ;
--------------------metamodels::MTRANS.bgf--------------------
MetaModel ::= ε ;
MetaClass ::= ε ;
String ::= string() ;
--------------------metamodels::MSVisio_DatadiagramMLBasicDef.bgf--------------------
Integer ::= integer() ;
PageElt ::= ShapesCollection ;
 PageElt ::= ConnectsCollection ;
IXElt ::= XYElt ;
XYAElt ::= ArcTo ;
 XYAElt ::= SplineKnot ;
 XYAElt ::= PolylineTo ;
 XYAElt ::= XYABElt ;
XYElt ::= LineTo ;
 XYElt ::= MoveTo ;
 XYElt ::= XYAElt ;
ShapeElt ::= Text ;
 ShapeElt ::= Geom ;
MasterElt ::= Icon ;
 MasterElt ::= ShapesCollection ;
 MasterElt ::= ConnectsCollection ;
XYABCDEElt ::= NURBSTo ;
XYABElt ::= InfiniteLine ;
 XYABElt ::= XYABCDElt ;
XYABCDElt ::= Ellipse ;
 XYABCDElt ::= EllipticalArcTo ;
 XYABCDElt ::= SplineStart ;
 XYABCDElt ::= XYABCDEElt ;
NamedElt ::= DocumentSheet ;
 NamedElt ::= MasterShortCut ;
 NamedElt ::= Page ;
DelElt ::= XYElt ;
IdentifiedElt ::= MasterShortCut ;
 IdentifiedElt ::= Master ;
 IdentifiedElt ::= Page ;
String ::= string() ;
TextElt ::= StringElt ;
--------------------metamodels::MSVisio_DatadiagramMLSimplified.bgf--------------------
Integer ::= integer() ;
PageElt ::= ShapesCollection ;
 PageElt ::= ConnectsCollection ;
IXElt ::= XYElt ;
XYAElt ::= ArcTo ;
 XYAElt ::= SplineKnot ;
 XYAElt ::= PolylineTo ;
 XYAElt ::= XYABElt ;
XYElt ::= LineTo ;
 XYElt ::= MoveTo ;
 XYElt ::= XYAElt ;
ShapeElt ::= Text ;
 ShapeElt ::= Geom ;
MasterElt ::= Icon ;
 MasterElt ::= ShapesCollection ;
 MasterElt ::= ConnectsCollection ;
XYABCDEElt ::= NURBSTo ;
XYABElt ::= InfiniteLine ;
 XYABElt ::= XYABCDElt ;
XYABCDElt ::= Ellipse ;
 XYABCDElt ::= EllipticalArcTo ;
 XYABCDElt ::= SplineStart ;
 XYABCDElt ::= XYABCDEElt ;
NamedElt ::= MasterShortCut ;
 NamedElt ::= Page ;
DelElt ::= XYElt ;
IdentifiedElt ::= MasterShortCut ;
 IdentifiedElt ::= Master ;
 IdentifiedElt ::= Page ;
String ::= string() ;
TextElt ::= StringElt ;
--------------------metamodels::MSVisio_DatadiagramMLTextFormat.bgf--------------------
IXrequiredElt ::= ColorEntry ;
 IXrequiredElt ::= Cp ;
 IXrequiredElt ::= Pp ;
 IXrequiredElt ::= Tp ;
 IXrequiredElt ::= Fld ;
Integer ::= integer() ;
PageElt ::= ShapesCollection ;
 PageElt ::= ConnectsCollection ;
IXElt ::= Tab ;
 IXElt ::= XYElt ;
XYAElt ::= ArcTo ;
 XYAElt ::= SplineKnot ;
 XYAElt ::= PolylineTo ;
 XYAElt ::= XYABElt ;
XYElt ::= LineTo ;
 XYElt ::= MoveTo ;
 XYElt ::= XYAElt ;
ShapeElt ::= Text ;
 ShapeElt ::= Geom ;
 ShapeElt ::= Char ;
 ShapeElt ::= Para ;
 ShapeElt ::= TabsCollection ;
 ShapeElt ::= Field ;
MasterElt ::= Icon ;
 MasterElt ::= ShapesCollection ;
 MasterElt ::= ConnectsCollection ;
XYABCDEElt ::= NURBSTo ;
XYABElt ::= InfiniteLine ;
 XYABElt ::= XYABCDElt ;
XYABCDElt ::= Ellipse ;
 XYABCDElt ::= EllipticalArcTo ;
 XYABCDElt ::= SplineStart ;
 XYABCDElt ::= XYABCDEElt ;
NamedElt ::= DocumentSheet ;
 NamedElt ::= MasterShortCut ;
 NamedElt ::= Page ;
DelElt ::= XYElt ;
IdentifiedElt ::= FontEntry ;
 IdentifiedElt ::= FaceName ;
 IdentifiedElt ::= MasterShortCut ;
 IdentifiedElt ::= Master ;
 IdentifiedElt ::= Page ;
String ::= string() ;
TextElt ::= StringElt ;
 TextElt ::= Cp ;
 TextElt ::= Pp ;
 TextElt ::= Tp ;
 TextElt ::= Fld ;
--------------------metamodels::MSVisio_DatadiagramMLXForm.bgf--------------------
IXrequiredElt ::= ColorEntry ;
 IXrequiredElt ::= Cp ;
 IXrequiredElt ::= Pp ;
 IXrequiredElt ::= Tp ;
 IXrequiredElt ::= Fld ;
Integer ::= integer() ;
PageElt ::= ShapesCollection ;
 PageElt ::= ConnectsCollection ;
IXElt ::= Tab ;
 IXElt ::= XYElt ;
XYAElt ::= ArcTo ;
 XYAElt ::= SplineKnot ;
 XYAElt ::= PolylineTo ;
 XYAElt ::= XYABElt ;
XYElt ::= LineTo ;
 XYElt ::= MoveTo ;
 XYElt ::= XYAElt ;
ShapeElt ::= Text ;
 ShapeElt ::= Geom ;
 ShapeElt ::= Char ;
 ShapeElt ::= Para ;
 ShapeElt ::= TabsCollection ;
 ShapeElt ::= Field ;
 ShapeElt ::= XForm ;
MasterElt ::= Icon ;
 MasterElt ::= ShapesCollection ;
 MasterElt ::= ConnectsCollection ;
XYABCDEElt ::= NURBSTo ;
XYABElt ::= InfiniteLine ;
 XYABElt ::= XYABCDElt ;
XYABCDElt ::= Ellipse ;
 XYABCDElt ::= EllipticalArcTo ;
 XYABCDElt ::= SplineStart ;
 XYABCDElt ::= XYABCDEElt ;
NamedElt ::= DocumentSheet ;
 NamedElt ::= MasterShortCut ;
 NamedElt ::= Page ;
DelElt ::= XYElt ;
 DelElt ::= XForm ;
IdentifiedElt ::= FontEntry ;
 IdentifiedElt ::= FaceName ;
 IdentifiedElt ::= MasterShortCut ;
 IdentifiedElt ::= Master ;
 IdentifiedElt ::= Page ;
String ::= string() ;
TextElt ::= StringElt ;
 TextElt ::= Cp ;
 TextElt ::= Pp ;
 TextElt ::= Tp ;
 TextElt ::= Fld ;
--------------------metamodels::Mantis.bgf--------------------
Integer ::= integer() ;
PrivateElt ::= Issue ;
 PrivateElt ::= Note ;
TimeStampedElt ::= Attachment ;
 TimeStampedElt ::= Note ;
IdentifiedElt ::= ValueWithId ;
 IdentifiedElt ::= Relationship ;
 IdentifiedElt ::= Issue ;
String ::= string() ;
--------------------metamodels::Matlab.bgf--------------------
Integer ::= integer() ;
String ::= string() ;
--------------------metamodels::Maude.bgf--------------------
Statement ::= Membership ;
 Statement ::= Equation ;
 Statement ::= Rule ;
Term ::= Constant ;
 Term ::= RecTerm ;
 Term ::= Variable ;
Module ::= FModule ;
 Module ::= SModule ;
Condition ::= EquationalCond ;
 Condition ::= RewriteCond ;
BooleanCond ::= ε ;
Type ::= Kind ;
 Type ::= Sort ;
ModElement ::= ModImportation ;
 ModElement ::= SubsortRel ;
 ModElement ::= Operation ;
 ModElement ::= Statement ;
 ModElement ::= Sort ;
ModExpression ::= InstModExp ;
 ModExpression ::= RenModExp ;
 ModExpression ::= CompModExp ;
 ModExpression ::= ModuleIdModExp ;
 ModExpression ::= TheoryIdModExp ;
 ModExpression ::= Parameter ;
MaudeTopEl ::= Theory ;
 MaudeTopEl ::= Module ;
 MaudeTopEl ::= View ;
ViewMapping ::= RenMapping ;
 ViewMapping ::= TermMapping ;
EquationalCond ::= MembershipCond ;
 EquationalCond ::= BooleanCond ;
 EquationalCond ::= MatchingCond ;
 EquationalCond ::= EqualCond ;
Theory ::= FTheory ;
 Theory ::= STheory ;
RenMapping ::= SortMapping ;
 RenMapping ::= OpTypedMapping ;
 RenMapping ::= OpMapping ;
 RenMapping ::= LabelMapping ;
String ::= string() ;
--------------------metamodels::MavenMaven.bgf--------------------
DocumentationTask ::= Javadoc ;
InExcludes ::= Includes ;
 InExcludes ::= Excludes ;
 InExcludes ::= IncludesFile ;
 InExcludes ::= ExcludesFile ;
ExecutionTask ::= Exec ;
 ExecutionTask ::= Java ;
AntProperty ::= AntPropertyName ;
 AntProperty ::= AntPropertyFile ;
 AntProperty ::= AntPropertyEnv ;
CompileTask ::= Javac ;
PrePostGoal ::= PreGoal ;
 PrePostGoal ::= PostGoal ;
AbstractGoal ::= PrePostGoal ;
 AbstractGoal ::= Goal ;
MiscellaneousTask ::= Echo ;
 MiscellaneousTask ::= Tstamp ;
String ::= string() ;
Pattern ::= Basic ;
 Pattern ::= Set ;
Basic ::= Mapper ;
 Basic ::= InExcludes ;
 Basic ::= FileList ;
 Basic ::= Filter ;
 Basic ::= FiltersFile ;
 Basic ::= PathElement ;
ContentsGoal ::= AntProperty ;
 ContentsGoal ::= JellyCommand ;
 ContentsGoal ::= AttainGoal ;
 ContentsGoal ::= Task ;
 ContentsGoal ::= AntTaskDef ;
JellyCommand ::= JellySet ;
 JellyCommand ::= JellyForEach ;
PreDefinedTask ::= ExecutionTask ;
 PreDefinedTask ::= MiscellaneousTask ;
 PreDefinedTask ::= CompileTask ;
 PreDefinedTask ::= DocumentationTask ;
 PreDefinedTask ::= ArchiveTask ;
 PreDefinedTask ::= FileTask ;
ArchiveTask ::= Jar ;
AntPropertyName ::= AntPropertyValue ;
 AntPropertyName ::= AntPropertyLocation ;
Task ::= NewTask ;
 Task ::= PreDefinedTask ;
Set ::= PatternSet ;
 Set ::= FileSet ;
 Set ::= FilterSet ;
 Set ::= Path ;
 Set ::= ClassPath ;
FileTask ::= Mkdir ;
 FileTask ::= Copy ;
 FileTask ::= Delete ;
--------------------metamodels::MavenProject.bgf--------------------
Person ::= Developer ;
 Person ::= Contributor ;
String ::= string() ;
--------------------metamodels::Measure.bgf--------------------
Integer ::= integer() ;
Measure ::= IntegerMeasure ;
 Measure ::= DoubleMeasure ;
 Measure ::= PercentageMeasure ;
String ::= string() ;
--------------------metamodels::Metrics.bgf--------------------
Integer ::= integer() ;
MetricValue ::= StringMetricValue ;
 MetricValue ::= BooleanMetricValue ;
 MetricValue ::= IntegerMetricValue ;
 MetricValue ::= DoubleMetricValue ;
String ::= string() ;
--------------------metamodels::MoMM.bgf--------------------
Integer ::= integer() ;
Relationship ::= Generalization ;
 Relationship ::= Association ;
String ::= string() ;
--------------------metamodels::MiningMart_SimplifiedMetamodel.bgf--------------------
StructuralFeature ::= Attribute ;
--------------------metamodels::MiningMart_ViewCaseRepresentation.bgf--------------------
Integer ::= integer() ;
StructuralFeature ::= Attribute ;
Sampling ::= ε ;
Agregation ::= ε ;
MultiRelFeatureConstr ::= Agregation ;
Operator ::= FeatureConstruction ;
 Operator ::= DataMinStep ;
 Operator ::= TimeOperator ;
 Operator ::= FeatureSelection ;
 Operator ::= MultiRelFeatureConstr ;
 Operator ::= RowSelection ;
Segmentation ::= ε ;
String ::= string() ;
--------------------metamodels::MoDAF-AV.bgf--------------------
Element ::= MoDAFModel ;
 Element ::= Enterprise ;
 Element ::= OperationalMission ;
 Element ::= Architecture ;
 Element ::= ArchitecturalDescription ;
 Element ::= ArchitecturalReference ;
 Element ::= ArchitecturalProduct ;
 Element ::= Elements ;
 Element ::= ArchitecturalFramework ;
 Element ::= View ;
 Element ::= Concern ;
 Element ::= Stakeholder ;
 Element ::= Taxonomy ;
 Element ::= ClassifiedElement ;
ClassifiedElement ::= Environment ;
 ClassifiedElement ::= Standard ;
 ClassifiedElement ::= MeasurableProperty ;
 ClassifiedElement ::= CapabilityRequirement ;
 ClassifiedElement ::= Effect ;
 ClassifiedElement ::= EnduringTask ;
 ClassifiedElement ::= OperationalConstraint ;
 ClassifiedElement ::= PostType ;
 ClassifiedElement ::= OrganisationType ;
 ClassifiedElement ::= RoleInOrganisation ;
 ClassifiedElement ::= LocationType ;
 ClassifiedElement ::= OperationalActivity ;
 ClassifiedElement ::= Node ;
 ClassifiedElement ::= InformationExchange ;
 ClassifiedElement ::= Competence ;
 ClassifiedElement ::= InformationElement ;
 ClassifiedElement ::= NodeConnectionType ;
 ClassifiedElement ::= System ;
 ClassifiedElement ::= DataElement ;
 ClassifiedElement ::= SystemFunction ;
 ClassifiedElement ::= SystemConnectionSpecification ;
 ClassifiedElement ::= ProjectType ;
 ClassifiedElement ::= Service ;
 ClassifiedElement ::= Unit ;
 ClassifiedElement ::= Dimension ;
 ClassifiedElement ::= OrganisationProjectRelationship ;
 ClassifiedElement ::= ProjectThreadType ;
String ::= string() ;
--------------------metamodels::MiningMart_ViewDataRepresentation.bgf--------------------
Integer ::= integer() ;
Time ::= ε ;
Scalar ::= Time ;
 Scalar ::= Binary ;
Categorial ::= ε ;
StructuralFeature ::= Attribute ;
Constant ::= ε ;
Spatial ::= ε ;
TimeGroup ::= ε ;
Binary ::= ε ;
Ordinal ::= Scalar ;
String ::= string() ;
--------------------metamodels::PASSI.bgf--------------------
Ontology ::= ε ;
Concept ::= ε ;
Predicate ::= ε ;
Action ::= ε ;
Service ::= ε ;
Requirement ::= ε ;
String ::= string() ;
Non functionnal Requirement ::= ε ;
Scenario ::= ε ;
--------------------metamodels::MonitorProgram.bgf--------------------
Statement ::= AssignmentStat ;
 Statement ::= ConditionalStat ;
 Statement ::= WhileStat ;
 Statement ::= ExpressionStat ;
Integer ::= integer() ;
LiteralExp ::= BooleanExp ;
 LiteralExp ::= IntegerExp ;
PropertyCallExp ::= OperatorCallExp ;
 PropertyCallExp ::= AttributeCallExp ;
 PropertyCallExp ::= ProcedureCallExp ;
LocatedElement ::= NamedElement ;
 LocatedElement ::= Expression ;
 LocatedElement ::= Statement ;
Expression ::= VariableExp ;
 Expression ::= PropertyCallExp ;
 Expression ::= LiteralExp ;
Structure ::= ProcContainerElement ;
 Structure ::= Procedure ;
NamedElement ::= Structure ;
 NamedElement ::= VariableDeclaration ;
 NamedElement ::= Type ;
String ::= string() ;
ProcContainerElement ::= Program ;
 ProcContainerElement ::= Monitor ;
--------------------metamodels::MySQL.bgf--------------------
Integer ::= integer() ;
NamedElement ::= DataBase ;
 NamedElement ::= Table ;
 NamedElement ::= Column ;
 NamedElement ::= EnumItem ;
String ::= string() ;
--------------------metamodels::News.bgf--------------------
Integer ::= integer() ;
Element ::= Newspaper ;
 Element ::= News ;
String ::= string() ;
--------------------metamodels::ODP-CV.bgf--------------------
InterfaceSignature ::= SignalInterfaceSignature ;
 InterfaceSignature ::= OperationInterfaceSignature ;
 InterfaceSignature ::= StreamInterfaceSignature ;
ComputationalTemplate ::= ComputationalObjectTemplate ;
 ComputationalTemplate ::= ComputationalInterfaceTemplate ;
Interface ::= SignalInterface ;
 Interface ::= OperationInterface ;
 Interface ::= StreamInterface ;
Operation ::= Announcement ;
 Operation ::= Interrogation ;
InteractionSignature ::= AnnouncementSignature ;
 InteractionSignature ::= InterrogationSignature ;
 InteractionSignature ::= TerminationSignature ;
 InteractionSignature ::= SignalSignature ;
 InteractionSignature ::= FlowSignature ;
Interaction ::= Flow ;
 Interaction ::= Signal ;
 Interaction ::= Operation ;
 Interaction ::= Invocation ;
 Interaction ::= Termination ;
--------------------metamodels::ODP-EV.bgf--------------------
AccountableAction ::= Prescription ;
 AccountableAction ::= Commitment ;
 AccountableAction ::= Declaration ;
 AccountableAction ::= Evaluation ;
 AccountableAction ::= Delegation ;
Rule ::= Obligation ;
 Rule ::= Authorisation ;
 Rule ::= Permission ;
 Rule ::= Prohibition ;
--------------------metamodels::ODP-NV.bgf--------------------
NamingDomain ::= EngineeringInterfaceReferenceManagementDomain ;
String ::= string() ;
--------------------metamodels::OWL.bgf--------------------
Seq ::= ε ;
Integer ::= integer() ;
ContainerMembershipProperty ::= ε ;
Alt ::= ε ;
Bag ::= ε ;
Property ::= FunctionalProperty ;
 Property ::= OWLDatatypeProperty ;
 Property ::= OWLObjectProperty ;
String ::= string() ;
--------------------metamodels::OpenConf.owl.bgf--------------------
Tends_Towards_Practical ::= ε ;
Must_Accept ::= ε ;
start_date_of_camera-ready_submission ::= ε ;
Invited_Speaker ::= ε ;
Preference ::= ε ;
Welcome_address ::= ε ;
New_Perspective_Issue_Problem_Solving ::= ε ;
Classic_Papers ::= ε ;
Refusing_manuscript ::= ε ;
Regular_contribution ::= Extended_abstract ;
Result_of_Advocate ::= ε ;
Conference_hotel ::= ε ;
Other ::= ε ;
Coffee_break ::= ε ;
Valuable_Confirmation_of_Present_Knowledge ::= ε ;
Rejection ::= ε ;
Renting ::= ε ;
Late_paid_applicant ::= ε ;
Nonauthor_registration_fee ::= ε ;
classification ::= ε ;
Author_attendee_book_registration_fee ::= ε ;
AcceptRating ::= ε ;
IASTED_member ::= ε ;
ClosingTalk ::= ε ;
Speaker ::= ε ;
Registeered_applicant ::= Paid_applicant ;
Late-Registered_Participant ::= ε ;
Description ::= ε ;
MealBreak ::= ε ;
Shuttle_bus ::= ε ;
Technical_commitee ::= ε ;
Conference_Hiker ::= ε ;
Departure ::= ε ;
Listener ::= ε ;
Social_program ::= Dinner_banquet ;
Industrial_Session ::= ε ;
Conference_fees ::= ε ;
Conference_state ::= ε ;
ComputerNetworksEnterpriseTopic ::= ε ;
New_Information ::= ε ;
Early_paid_applicant ::= ε ;
Passive_conference_participant ::= ε ;
Conference_airport ::= ε ;
Receiving_manuscript ::= ε ;
Senior_Reviewer_URL ::= ε ;
High ::= ε ;
Excursion ::= ε ;
Presenter_city ::= ε ;
date_of_notification ::= ε ;
Departure_tax ::= ε ;
Early-Registered_Participant ::= ε ;
phase_of_conference ::= ε ;
Conference_applicant ::= Registeered_applicant ;
Time_zone ::= ε ;
Video_cassette_player ::= ε ;
Single_hotel_room ::= ε ;
Hotel_presenter ::= ε ;
Contribution_co-author ::= ε ;
Introduction_of_speaker ::= ε ;
Session_chair ::= ε ;
Marginal_Tend_to_Accept ::= ε ;
ConferenceSession ::= ε ;
Programming ::= ε ;
SubjectArea ::= ε ;
Nonmember_registration_fee ::= ε ;
ComputerNetworksMeasurementsTopic ::= ε ;
Coctail_reception ::= ε ;
Dinner_banquet ::= ε ;
Chair_URL ::= ε ;
Car ::= ε ;
start_date_of_conference ::= ε ;
Conference_participant ::= Passive_conference_participant ;
 Conference_participant ::= Active_conference_participant ;
Reception ::= ε ;
Long_bool ::= ε ;
PostScript ::= ε ;
HTML ::= ε ;
Full_day_tour ::= ε ;
LCD_projector ::= ε ;
PaymentMode ::= ε ;
Presenter_house ::= ε ;
Cd_proceening ::= ε ;
Preview ::= ε ;
Workshop ::= ε ;
Rejection_Email ::= ε ;
Presenter_university ::= ε ;
Student_registration_fee ::= ε ;
Tutorial_Chair ::= ε ;
Inforamtion ::= ε ;
Trip_day ::= ε ;
Hotel_registration_form ::= ε ;
Session_Chair ::= ε ;
Group_Email ::= ε ;
lower_tier_reviewing_process ::= ε ;
Regular_Program_Committee_member ::= ε ;
ComputerNetworksOpticalTopic ::= ε ;
end_date_of_conference ::= ε ;
Double_hotel_room ::= ε ;
AccpetIfRoomRating ::= ε ;
Sponsor_city ::= ε ;
RFC ::= ε ;
Conference_city ::= ε ;
One_day_presenter ::= ε ;
Accepting_manuscript ::= ε ;
SC_Member ::= ε ;
Accepted_contribution ::= Camera_ready_contribution ;
Presenter ::= Invited_Speaker ;
Clarity_to_Present_Understanding ::= ε ;
PC_Member ::= SC_Member ;
 PC_Member ::= Session_Chair ;
 PC_Member ::= Tutorial_Chair ;
 PC_Member ::= PC_Chair ;
 PC_Member ::= Workshop_Chair ;
Highly_Practical ::= ε ;
OC_Member ::= OC_Chair ;
Modelling ::= ε ;
Value_added_tax ::= ε ;
start_date_of_full_paper_submission ::= ε ;
Clear_Accept ::= ε ;
Conference_days ::= One_conference_day ;
OC_Chair ::= ε ;
Highly_Theoretical ::= ε ;
Acceptance ::= ε ;
Credit_card ::= ε ;
Country ::= ε ;
start_date_of_abstract_submission ::= ε ;
end_date_of_camera-ready_submission ::= ε ;
CoffeeBreak ::= ε ;
Conference_Session ::= Industrial_Session ;
Tends_Towards_Theoretical ::= ε ;
PaperQuestion ::= ε ;
Detail ::= ε ;
Final_manuscript ::= ε ;
Request ::= Help_Request ;
Bank_transfer ::= ε ;
end_date_of_abstract_submission ::= ε ;
Humour ::= ε ;
Worker_non_speaker ::= ε ;
Book_proceeding ::= ε ;
Registration_form ::= ε ;
Student_non_speaker ::= ε ;
Demo_Chair ::= ε ;
Review_Form_Setup ::= ε ;
Conference_Trip ::= ε ;
Camera_ready_contribution ::= ε ;
Adobe_PDF ::= ε ;
Contribution_1th-author ::= ε ;
ReviewForm ::= ε ;
Hotel_fee ::= ε ;
Sponsor_company_house ::= ε ;
PC_Chair ::= ε ;
Student_lecturer ::= ε ;
Assistance ::= ε ;
Conference_building ::= ε ;
Review_Committee ::= ε ;
NumericalReviewQuestion ::= ε ;
Marginal_Tend_to_Reject ::= ε ;
WeekRejectRating ::= ε ;
ComputerNetworksSecurityTopic ::= ε ;
Text ::= ε ;
Corel_Word_Perfect ::= ε ;
Extended_abstract ::= ε ;
PersonalPublicationHistory ::= ε ;
Notification_Email ::= ε ;
Trip ::= ε ;
Reviewed_Paper ::= Planed_Paper ;
RTF ::= ε ;
Program_Committee ::= ε ;
Banquet ::= ε ;
Cheque ::= ε ;
Computer_Science ::= ε ;
Conference_Banquet ::= ε ;
Taxi ::= ε ;
rejection_notification_email ::= ε ;
RejectRating ::= ε ;
Computer ::= ε ;
Introduction ::= Introduction_of_speaker ;
Not_Much ::= ε ;
Worker_lecturer ::= ε ;
Low ::= ε ;
ResearchTopic ::= ε ;
end_date_of_full_paper_submission ::= ε ;
intensity ::= ε ;
String ::= string() ;
Currency ::= ε ;
TextualReviewQuestion ::= ε ;
acceptance_notification_email ::= ε ;
Card ::= Credit_card ;
Author_attendee_cd_registration_fee ::= ε ;
ComputerNetworksManagementTopic ::= ε ;
Balanced_Theory_and_Practice ::= ε ;
Trip_city ::= ε ;
Contact_Person_URL ::= ε ;
Moderate ::= ε ;
MS_Word ::= ε ;
Fee_for_extra_trip ::= ε ;
ComputerNetworksSwitchingTopic ::= ε ;
Conference_restaurant ::= ε ;
Integer ::= integer() ;
Technic_activity ::= ε ;
Invited_speaker ::= ε ;
Presenter_state ::= ε ;
Regular_Reviewer_URL ::= ε ;
ComputerNetworksSensorTopic ::= ε ;
institute ::= ε ;
Networking ::= ε ;
IASTED_non_member ::= ε ;
One_conference_day ::= ε ;
Clear_Reject ::= ε ;
Overhead_projector ::= ε ;
Organizer ::= CommitteeMember ;
WelcomeTalk ::= ε ;
Workshop_Chair ::= ε ;
Sponsor_state ::= ε ;
Misc ::= ε ;
Author_information_form ::= ε ;
ComputerNetworksAapplicationsTopic ::= ε ;
Initial_manuscipt ::= ε ;
FreeTimeBreak ::= ε ;
Feature_Request ::= ε ;
Scientific_Event ::= Individual_Presentation ;
 Scientific_Event ::= Conference ;
 Scientific_Event ::= Track ;
 Scientific_Event ::= Workshop ;
Portable_Reject ::= ε ;
Van ::= ε ;
Simulating ::= ε ;
Memeber_registration_fee ::= ε ;
--------------------metamodels::OpenQVT.bgf--------------------
RulePart ::= Action ;
 RulePart ::= Query ;
String ::= string() ;
--------------------metamodels::PCS.owl.bgf--------------------
Tends_Towards_Practical ::= ε ;
Must_Accept ::= ε ;
start_date_of_camera-ready_submission ::= ε ;
Invited_Speaker ::= ε ;
Preference ::= ε ;
Welcome_address ::= ε ;
New_Perspective_Issue_Problem_Solving ::= ε ;
Classic_Papers ::= ε ;
Refusing_manuscript ::= ε ;
Regular_contribution ::= Extended_abstract ;
Confirmed_Conflict ::= ε ;
Result_of_Advocate ::= ε ;
Conference_hotel ::= ε ;
Other ::= ε ;
Coffee_break ::= ε ;
Valuable_Confirmation_of_Present_Knowledge ::= ε ;
Rejection ::= ε ;
Renting ::= ε ;
Late_paid_applicant ::= ε ;
Nonauthor_registration_fee ::= ε ;
classification ::= ε ;
Author_attendee_book_registration_fee ::= ε ;
AcceptRating ::= ε ;
IASTED_member ::= ε ;
ClosingTalk ::= ε ;
Registeered_applicant ::= Paid_applicant ;
Late-Registered_Participant ::= ε ;
MealBreak ::= ε ;
Description ::= ε ;
Shuttle_bus ::= ε ;
Technical_commitee ::= ε ;
Conference_Hiker ::= ε ;
Departure ::= ε ;
Listener ::= ε ;
Social_program ::= Dinner_banquet ;
Industrial_Session ::= ε ;
Conference_fees ::= ε ;
PC_Meeting ::= ε ;
E-mail_PC_Meeting ::= ε ;
Conference_state ::= ε ;
ComputerNetworksEnterpriseTopic ::= ε ;
New_Information ::= ε ;
Early_paid_applicant ::= ε ;
Conference_airport ::= ε ;
Passive_conference_participant ::= ε ;
Hidden_Conflict ::= ε ;
Receiving_manuscript ::= ε ;
Senior_Reviewer_URL ::= ε ;
High ::= ε ;
Excursion ::= ε ;
Presenter_city ::= ε ;
date_of_notification ::= ε ;
Departure_tax ::= ε ;
Early-Registered_Participant ::= ε ;
phase_of_conference ::= ε ;
Conference_applicant ::= Registeered_applicant ;
Time_zone ::= ε ;
Video_cassette_player ::= ε ;
Single_hotel_room ::= ε ;
Hotel_presenter ::= ε ;
Contribution_co-author ::= ε ;
Introduction_of_speaker ::= ε ;
Session_chair ::= ε ;
Marginal_Tend_to_Accept ::= ε ;
ConferenceSession ::= ε ;
Programming ::= ε ;
SubjectArea ::= ε ;
Nonmember_registration_fee ::= ε ;
ComputerNetworksMeasurementsTopic ::= ε ;
Coctail_reception ::= ε ;
Committees ::= Review_Committee ;
 Committees ::= Program_committee ;
Dinner_banquet ::= ε ;
Chair_URL ::= ε ;
Car ::= ε ;
start_date_of_conference ::= ε ;
Conference_participant ::= Passive_conference_participant ;
 Conference_participant ::= Active_conference_participant ;
Reception ::= ε ;
Long_bool ::= ε ;
PostScript ::= ε ;
HTML ::= ε ;
Full_day_tour ::= ε ;
LCD_projector ::= ε ;
PaymentMode ::= ε ;
Presenter_house ::= ε ;
Cd_proceening ::= ε ;
Preview ::= ε ;
Workshop ::= ε ;
Presenter_university ::= ε ;
Student_registration_fee ::= ε ;
Tutorial_Chair ::= ε ;
Inforamtion ::= ε ;
Trip_day ::= ε ;
Hotel_registration_form ::= ε ;
Session_Chair ::= ε ;
lower_tier_reviewing_process ::= ε ;
Regular_Program_Committee_member ::= ε ;
ComputerNetworksOpticalTopic ::= ε ;
end_date_of_conference ::= ε ;
Double_hotel_room ::= ε ;
AccpetIfRoomRating ::= ε ;
Sponsor_city ::= ε ;
RFC ::= ε ;
Conference_city ::= ε ;
One_day_presenter ::= ε ;
Accepting_manuscript ::= ε ;
SC_Member ::= ε ;
Presenter ::= Invited_Speaker ;
Accepted_contribution ::= Camera_ready_contribution ;
Clarity_to_Present_Understanding ::= ε ;
PC_Member ::= SC_Member ;
 PC_Member ::= Session_Chair ;
 PC_Member ::= Tutorial_Chair ;
 PC_Member ::= PC_Chair ;
 PC_Member ::= Workshop_Chair ;
Highly_Practical ::= ε ;
OC_Member ::= OC_Chair ;
Modelling ::= ε ;
Value_added_tax ::= ε ;
start_date_of_full_paper_submission ::= ε ;
Clear_Accept ::= ε ;
Conference_days ::= One_conference_day ;
OC_Chair ::= ε ;
Deleted_Conflict ::= ε ;
Highly_Theoretical ::= ε ;
Acceptance ::= ε ;
Credit_card ::= ε ;
Country ::= ε ;
start_date_of_abstract_submission ::= ε ;
end_date_of_camera-ready_submission ::= ε ;
CoffeeBreak ::= ε ;
Conference_Session ::= Industrial_Session ;
Web_site ::= ε ;
Tends_Towards_Theoretical ::= ε ;
PaperQuestion ::= ε ;
Detail ::= ε ;
Request ::= Help_Request ;
Bank_transfer ::= ε ;
end_date_of_abstract_submission ::= ε ;
Humour ::= ε ;
Worker_non_speaker ::= ε ;
Book_proceeding ::= ε ;
Registration_form ::= ε ;
Student_non_speaker ::= ε ;
Demo_Chair ::= ε ;
Review_Form_Setup ::= ε ;
Conference_Trip ::= ε ;
Camera_ready_contribution ::= ε ;
Self_Conflict ::= ε ;
Adobe_PDF ::= ε ;
Contribution_1th-author ::= ε ;
CD ::= ε ;
ReviewForm ::= ε ;
Hotel_fee ::= ε ;
Sponsor_company_house ::= ε ;
PC_Chair ::= ε ;
Student_lecturer ::= ε ;
Assistance ::= ε ;
Conference_building ::= ε ;
Review_Committee ::= ε ;
NumericalReviewQuestion ::= ε ;
Report ::= ε ;
Marginal_Tend_to_Reject ::= ε ;
WeekRejectRating ::= ε ;
System ::= ε ;
ComputerNetworksSecurityTopic ::= ε ;
Text ::= ε ;
Conflict_Rules ::= ε ;
Corel_Word_Perfect ::= ε ;
Discussion ::= ε ;
Extended_abstract ::= ε ;
PersonalPublicationHistory ::= ε ;
Trip ::= ε ;
Reviewed_Paper ::= Planed_Paper ;
RTF ::= ε ;
Banquet ::= ε ;
Cheque ::= ε ;
Computer_Science ::= ε ;
Conference_Banquet ::= ε ;
Taxi ::= ε ;
rejection_notification_email ::= ε ;
RejectRating ::= ε ;
Computer ::= ε ;
Introduction ::= Introduction_of_speaker ;
Not_Much ::= ε ;
Worker_lecturer ::= ε ;
Low ::= ε ;
ResearchTopic ::= ε ;
end_date_of_full_paper_submission ::= ε ;
intensity ::= ε ;
String ::= string() ;
Currency ::= ε ;
TextualReviewQuestion ::= ε ;
acceptance_notification_email ::= ε ;
Card ::= Credit_card ;
Author_attendee_cd_registration_fee ::= ε ;
ComputerNetworksManagementTopic ::= ε ;
Bidding_And_Paper_Submission_Phase ::= ε ;
Balanced_Theory_and_Practice ::= ε ;
Trip_city ::= ε ;
Contact_Person_URL ::= ε ;
Moderate ::= ε ;
MS_Word ::= ε ;
Fee_for_extra_trip ::= ε ;
ComputerNetworksSwitchingTopic ::= ε ;
Conference_restaurant ::= ε ;
Integer ::= integer() ;
Technic_activity ::= ε ;
Invited_speaker ::= ε ;
Presenter_state ::= ε ;
Regular_Reviewer_URL ::= ε ;
Bidding_Without_Paper_Submission_Phase ::= ε ;
ComputerNetworksSensorTopic ::= ε ;
institute ::= ε ;
Networking ::= ε ;
IASTED_non_member ::= ε ;
One_conference_day ::= ε ;
Clear_Reject ::= ε ;
Overhead_projector ::= ε ;
WelcomeTalk ::= ε ;
Workshop_Chair ::= ε ;
Sponsor_state ::= ε ;
Misc ::= ε ;
Author_information_form ::= ε ;
ComputerNetworksAapplicationsTopic ::= ε ;
FreeTimeBreak ::= ε ;
Feature_Request ::= ε ;
Scientific_Event ::= Individual_Presentation ;
 Scientific_Event ::= Track ;
 Scientific_Event ::= Workshop ;
Portable_Reject ::= ε ;
Van ::= ε ;
Simulating ::= ε ;
Memeber_registration_fee ::= ε ;
--------------------metamodels::PDG.bgf--------------------
Integer ::= integer() ;
String ::= string() ;
--------------------metamodels::PIF.bgf--------------------
Before ::= ε ;
Object ::= Agent ;
Activity ::= Decision ;
Uses ::= ε ;
Decision ::= ε ;
Modifies ::= ε ;
Creates ::= ε ;
Agent ::= ε ;
Succesor ::= ε ;
Timepoint ::= ε ;
Performs ::= ε ;
ActivityStatus ::= ε ;
--------------------metamodels::PRR.bgf--------------------
Integer ::= integer() ;
StringType ::= ε ;
OperatorCallExp ::= ε ;
IntegerType ::= ε ;
RealType ::= ε ;
CollectionOperationCallExp ::= ε ;
NamedElement ::= Rule ;
 NamedElement ::= OclType ;
BooleanType ::= ε ;
String ::= string() ;
--------------------metamodels::Parameters.bgf--------------------
String ::= string() ;
--------------------metamodels::PathExp.bgf--------------------
Element ::= PathExp ;
 Element ::= Transition ;
String ::= string() ;
--------------------metamodels::Perceptory.bgf--------------------
Integer ::= integer() ;
ConstrainedRelationSchip ::= ε ;
AssociationEnd ::= ε ;
Composition ::= ε ;
Aggregation ::= ε ;
String ::= string() ;
--------------------metamodels::Person.bgf--------------------
Integer ::= integer() ;
String ::= string() ;
--------------------metamodels::PetriNet_extended.bgf--------------------
Integer ::= integer() ;
Element ::= Place ;
 Element ::= Transition ;
LocatedElement ::= NamedElement ;
NamedElement ::= PetriNet ;
 NamedElement ::= Element ;
 NamedElement ::= Arc ;
Arc ::= PlaceToTransition ;
 Arc ::= TransitionToPlace ;
String ::= string() ;
--------------------metamodels::PluginEclipse.bgf--------------------
Integer ::= integer() ;
LocatedElement ::= Eclipse ;
 LocatedElement ::= Bundle ;
 LocatedElement ::= RequireBundleAttribute ;
 LocatedElement ::= Version ;
 LocatedElement ::= RequiredBundle ;
 LocatedElement ::= ImportedPackage ;
 LocatedElement ::= ExportedPackage ;
 LocatedElement ::= Package ;
 LocatedElement ::= Xfriends ;
RequireBundleAttribute ::= AttResolution ;
 RequireBundleAttribute ::= AttVisibility ;
 RequireBundleAttribute ::= Range ;
String ::= string() ;
--------------------metamodels::ProMarte.bgf--------------------
Integer ::= integer() ;
TimeBase ::= SingleTimeBase ;
 TimeBase ::= DiscreteTimeBase ;
 TimeBase ::= MultipleTimeBase ;
EventOccurence ::= TimedEventOccurence ;
BasicResource ::= ε ;
Link ::= ε ;
BasicQuantity ::= ε ;
ClockInterrupt ::= ε ;
MetricTimeValue ::= ε ;
TimeInterval ::= SingleTimeInterval ;
 TimeInterval ::= DiscreteTimeInterval ;
String ::= string() ;
InstanceSpecification ::= ResourceInstanceSpecification ;
 InstanceSpecification ::= ResourceServiceInstanceSpecification ;
Quantity ::= ε ;
DiscreteTimeInterval ::= MetricTimeInterval ;
DiscreteTimeValue ::= MetricTimeValue ;
DerivedQuantity ::= ε ;
Interval ::= SingleInterval ;
 Interval ::= MultipleInterval ;
TimeValue ::= SingleTimeValue ;
 TimeValue ::= MultipleTimeValue ;
 TimeValue ::= DiscreteTimeValue ;
MetricTimeInterval ::= ε ;
Classifier ::= ResourceClassifier ;
 Classifier ::= ResourceServiceClassifier ;
TimeOut ::= ε ;
Instant ::= SingleInstant ;
 Instant ::= DiscreteInstant ;
 Instant ::= CoincidencePoint ;
--------------------metamodels::Problem.bgf--------------------
String ::= string() ;
--------------------metamodels::Program.bgf--------------------
Statement ::= AssignmentStat ;
 Statement ::= ConditionalStat ;
 Statement ::= WhileStat ;
 Statement ::= ExpressionStat ;
Integer ::= integer() ;
LiteralExp ::= BooleanExp ;
 LiteralExp ::= IntegerExp ;
PropertyCallExp ::= OperatorCallExp ;
 PropertyCallExp ::= AttributeCallExp ;
 PropertyCallExp ::= ProcedureCallExp ;
LocatedElement ::= NamedElement ;
 LocatedElement ::= Expression ;
 LocatedElement ::= Statement ;
Expression ::= VariableExp ;
 Expression ::= PropertyCallExp ;
 Expression ::= LiteralExp ;
Structure ::= ProcContainerElement ;
 Structure ::= Procedure ;
NamedElement ::= Structure ;
 NamedElement ::= VariableDeclaration ;
 NamedElement ::= Type ;
String ::= string() ;
ProcContainerElement ::= Program ;
 ProcContainerElement ::= Monitor ;
--------------------metamodels::Promenade.bgf--------------------
Integer ::= integer() ;
End ::= ε ;
Strong ::= ε ;
FeedBack ::= ε ;
Start ::= ε ;
String ::= string() ;
--------------------metamodels::PtolemyII.bgf--------------------
Integer ::= integer() ;
String ::= string() ;
--------------------metamodels::Publication.bgf--------------------
Integer ::= integer() ;
String ::= string() ;
--------------------metamodels::QVT.bgf--------------------
CallExp ::= ResolveExp ;
 CallExp ::= FeaturePropertyCall ;
 CallExp ::= SwitchExp ;
 CallExp ::= LoopExp ;
Integer ::= integer() ;
BreakExp ::= ε ;
MultiplicityElement ::= Operation ;
 MultiplicityElement ::= Parameter ;
 MultiplicityElement ::= Property ;
Element ::= PropertyTemplateItem ;
 Element ::= DictLiteralPart ;
 Element ::= AnonymousTupleLiteralPart ;
 Element ::= Tag ;
 Element ::= NamedElement ;
 Element ::= Comment ;
 Element ::= ModuleImport ;
 Element ::= OperationBody ;
 Element ::= Pattern ;
 Element ::= Predicate ;
 Element ::= RelationImplementation ;
 Element ::= Key ;
NumericLiteralExp ::= UnlimitedNaturalExp ;
 NumericLiteralExp ::= IntegerLiteralExp ;
 NumericLiteralExp ::= RealLiteralExp ;
Type ::= TemplateParameterType ;
 Type ::= Class ;
 Type ::= DataType ;
 Type ::= InvalidType ;
 Type ::= VoidType ;
 Type ::= AnyType ;
OpaqueExpression ::= ExpressionInOcl ;
LoopExp ::= IteratorExp ;
 LoopExp ::= IterateExp ;
 LoopExp ::= ImperativeLoopExp ;
CollectionType ::= DictionaryType ;
 CollectionType ::= ListType ;
 CollectionType ::= BagType ;
 CollectionType ::= OrderedSetType ;
 CollectionType ::= SequenceType ;
 CollectionType ::= SetType ;
ContinueExp ::= ε ;
NullLiteralExp ::= ε ;
PrimitiveLiteralExp ::= BooleanLiteralExp ;
 PrimitiveLiteralExp ::= StringLiteralExp ;
 PrimitiveLiteralExp ::= NumericLiteralExp ;
TypedElement ::= OclExpression ;
 TypedElement ::= Variable ;
 TypedElement ::= CollectionLiteralPart ;
 TypedElement ::= TupleLiteralPart ;
 TypedElement ::= Operation ;
 TypedElement ::= Parameter ;
 TypedElement ::= Property ;
String ::= string() ;
OclExpression ::= ImperativeExpression ;
 OclExpression ::= CallExp ;
 OclExpression ::= IfExp ;
 OclExpression ::= LetExp ;
 OclExpression ::= VariableExp ;
 OclExpression ::= TypeExp ;
 OclExpression ::= LiteralExp ;
 OclExpression ::= LoopExp ;
LiteralExp ::= TemplateExp ;
 LiteralExp ::= DictLiteralExp ;
 LiteralExp ::= AnonymousTupleLiteralExp ;
 LiteralExp ::= PrimitiveLiteralExp ;
 LiteralExp ::= CollectionLiteralExp ;
 LiteralExp ::= TupleLiteralExp ;
 LiteralExp ::= NullLiteralExp ;
 LiteralExp ::= InvalidLiteralExp ;
 LiteralExp ::= EnumLiteralExp ;
Area ::= Mapping ;
 Area ::= CoreDomain ;
ImperativeLoopExp ::= ImperativeIterateExp ;
 ImperativeLoopExp ::= ForExp ;
 ImperativeLoopExp ::= CollectorExp ;
Extent ::= URIExtent ;
FeaturePropertyCall ::= PropertyCallExp ;
 FeaturePropertyCall ::= OperationCallExp ;
InvalidLiteralExp ::= ε ;
CollectionLiteralPart ::= CollectionItem ;
 CollectionLiteralPart ::= CollectionRange ;
DataType ::= Enumeration ;
 DataType ::= PrimitiveType ;
 DataType ::= CollectionType ;
 DataType ::= TupleType ;
ImperativeExpression ::= AssignExp ;
 ImperativeExpression ::= BlockExp ;
 ImperativeExpression ::= VariableInitExp ;
 ImperativeExpression ::= WhileExp ;
 ImperativeExpression ::= ComputeExp ;
 ImperativeExpression ::= AltExp ;
 ImperativeExpression ::= UnlinkExp ;
 ImperativeExpression ::= ReturnExp ;
 ImperativeExpression ::= BreakExp ;
 ImperativeExpression ::= TryExp ;
 ImperativeExpression ::= RaiseExp ;
 ImperativeExpression ::= ContinueExp ;
 ImperativeExpression ::= TupleExp ;
 ImperativeExpression ::= InstantiationExp ;
 ImperativeExpression ::= LogExp ;
 ImperativeExpression ::= AssertExp ;
 ImperativeExpression ::= UnpackExp ;
 ImperativeExpression ::= SwitchExp ;
 ImperativeExpression ::= ImperativeLoopExp ;
NamedElement ::= Package ;
 NamedElement ::= Type ;
 NamedElement ::= EnumerationLiteral ;
 NamedElement ::= TypedElement ;
 NamedElement ::= Domain ;
 NamedElement ::= TypedModel ;
 NamedElement ::= Rule ;
TemplateExp ::= ObjectTemplateExp ;
 TemplateExp ::= CollectionTemplateExp ;
PrimitiveType ::= ε ;
--------------------metamodels::QVT_SimpleRDBMS.bgf--------------------
RModelElement ::= Schema ;
 RModelElement ::= Table ;
 RModelElement ::= Column ;
 RModelElement ::= Key ;
 RModelElement ::= ForeignKey ;
String ::= string() ;
--------------------metamodels::QoS.bgf--------------------
Integer ::= integer() ;
Parameter ::= ε ;
StatisticalAttributekindKind ::= ε ;
Operation ::= ε ;
DataType ::= Domain ;
QoSProfile ::= CompoundProfile ;
 QoSProfile ::= SimpleProfile ;
String ::= string() ;
--------------------metamodels::QoS_Characteristic.bgf--------------------
Integer ::= integer() ;
Parameter ::= ε ;
StatisticalAttributekindKind ::= ε ;
String ::= string() ;
--------------------metamodels::RDFS.bgf--------------------
Seq ::= ε ;
Integer ::= integer() ;
ContainerMembershipProperty ::= ε ;
Alt ::= ε ;
Bag ::= ε ;
String ::= string() ;
--------------------metamodels::QoS_Profile.bgf--------------------
Integer ::= integer() ;
QoSStatement ::= ε ;
Operation ::= ε ;
QoSProfile ::= CompoundProfile ;
 QoSProfile ::= SimpleProfile ;
String ::= string() ;
--------------------metamodels::QoS_Statement.bgf--------------------
Integer ::= integer() ;
Parameter ::= ε ;
String ::= string() ;
QoSCharacteristic ::= QualificationKind ;
--------------------metamodels::Relational.bgf--------------------
Integer ::= integer() ;
Named ::= Table ;
 Named ::= Column ;
 Named ::= Type ;
String ::= string() ;
--------------------metamodels::RelationalDBContent.bgf--------------------
Integer ::= integer() ;
NamedElement ::= DataBase ;
 NamedElement ::= Table ;
String ::= string() ;
--------------------metamodels::RelationalDBSchema.bgf--------------------
Integer ::= integer() ;
NamedElement ::= DataBase ;
 NamedElement ::= Table ;
 NamedElement ::= Column ;
String ::= string() ;
--------------------metamodels::Repository.bgf--------------------
Integer ::= integer() ;
String ::= string() ;
--------------------metamodels::Reqtify.bgf--------------------
TextElement ::= Section ;
 TextElement ::= AbstractRequirement ;
ElementWithIL ::= Document ;
 ElementWithIL ::= TextElement ;
TypedElement ::= ElementWithIL ;
 TypedElement ::= CoverLink ;
 TypedElement ::= Attribute ;
String ::= string() ;
AbstractRequirement ::= Requirement ;
 AbstractRequirement ::= MacroRequirement ;
--------------------metamodels::RequisitePro.bgf--------------------
ContainerElt ::= Project ;
 ContainerElt ::= Package ;
NamedElt ::= ContainerElt ;
 NamedElt ::= Requirement ;
DescribedElt ::= Document ;
 DescribedElt ::= ContainerElt ;
TypedElt ::= Attribute ;
String ::= string() ;
--------------------metamodels::SBVRvoc.bgf--------------------
PrimaryRepresentation ::= NotFactTypeRepresentation ;
 PrimaryRepresentation ::= FactTypeFormRepresentation ;
Integer ::= integer() ;
Word ::= StringWord ;
 Word ::= QuotedStringWord ;
 Word ::= NameWord ;
LocatedElement ::= Root ;
 LocatedElement ::= VocabularyEntry ;
 LocatedElement ::= Caption ;
 LocatedElement ::= PrimaryRepresentation ;
 LocatedElement ::= ConceptDefinition ;
 LocatedElement ::= ConceptSource ;
 LocatedElement ::= Note ;
 LocatedElement ::= Sentence ;
 LocatedElement ::= NameSpaceURI ;
 LocatedElement ::= Word ;
 LocatedElement ::= SBVRExpression ;
 LocatedElement ::= SBVRPropWithKW ;
 LocatedElement ::= ModalForm ;
 LocatedElement ::= SimpleSBVRProp ;
 LocatedElement ::= SubSBVRProp ;
 LocatedElement ::= LinkSBVRConcept ;
 LocatedElement ::= ConjConcept ;
 LocatedElement ::= Concept ;
 LocatedElement ::= NounConcept ;
 LocatedElement ::= Qualification ;
 LocatedElement ::= GeneralConcept ;
 LocatedElement ::= Qualifier ;
 LocatedElement ::= ModalBegin ;
Concept ::= NameConcept ;
 Concept ::= ObjectConcept ;
 Concept ::= StringConcept ;
NotFactTypeRepresentation ::= TermRepresentation ;
 NotFactTypeRepresentation ::= NameRepresentation ;
Caption ::= DefCaption ;
 Caption ::= DescCaption ;
 Caption ::= SrcCaption ;
 Caption ::= DBCaption ;
 Caption ::= GenCCaption ;
 Caption ::= CTypCaption ;
 Caption ::= Necessity ;
 Caption ::= Possibility ;
 Caption ::= RefSCaption ;
 Caption ::= NoteCaption ;
 Caption ::= ExCaption ;
 Caption ::= SynCaption ;
 Caption ::= SynFCaption ;
 Caption ::= SeeCaption ;
 Caption ::= SFCaption ;
 Caption ::= NSURICaption ;
String ::= string() ;
GeneralConcept ::= NameGConcept ;
 GeneralConcept ::= NounGConcept ;
--------------------metamodels::SCADE.bgf--------------------
MtcEntity ::= Element ;
 MtcEntity ::= File ;
 MtcEntity ::= HistoryEntry ;
 MtcEntity ::= Criterion ;
 MtcEntity ::= Instance ;
 MtcEntity ::= Result ;
 MtcEntity ::= Record ;
 MtcEntity ::= Model ;
 MtcEntity ::= Operator ;
Object ::= Implementation ;
 Object ::= Descriptor ;
 Object ::= StorageUnit ;
 Object ::= Expression ;
 Object ::= Label ;
 Object ::= CompositeElement ;
 Object ::= Annotable ;
 Object ::= Edge ;
 Object ::= StateMachine ;
 Object ::= Model ;
Integer ::= integer() ;
RPoint ::= ε ;
File ::= CoverageFile ;
 File ::= CriterionFile ;
Element ::= FileRef ;
 Element ::= Folder ;
Type ::= Table ;
 Type ::= NamedType ;
 Type ::= Enumeration ;
 Type ::= Composite ;
Expression ::= ExprNull ;
 Expression ::= ConstValue ;
 Expression ::= ExprContact ;
 Expression ::= ExprCall ;
 Expression ::= ExprId ;
RSize ::= ε ;
GraphicalObject ::= StInputOutput ;
 GraphicalObject ::= Transition ;
 GraphicalObject ::= State ;
 GraphicalObject ::= InitialStPtr ;
String ::= string() ;
AnnAttValue ::= AnnAttIntValue ;
 AnnAttValue ::= AnnAttBoolValue ;
 AnnAttValue ::= AnnAttCharValue ;
 AnnAttValue ::= AnnAttRealValue ;
 AnnAttValue ::= AnnAttStringValue ;
Base ::= StateBase ;
TypeReference ::= ε ;
VariableReference ::= ε ;
Block ::= NodeBlock ;
 Block ::= ModelBlock ;
Reference ::= TypeReference ;
 Reference ::= OperatorReference ;
 Reference ::= VariableReference ;
StInputOutput ::= StInitInput ;
 StInputOutput ::= StInput ;
 StInputOutput ::= StOutput ;
Error ::= ε ;
OperatorReference ::= ε ;
Composite ::= Structure ;
 Composite ::= Tuple ;
StateObj ::= GraphicalObject ;
ModelBlock ::= ConstBlock ;
 ModelBlock ::= VarBlock ;
 ModelBlock ::= TypeBlock ;
Entity ::= StateObj ;
StorageElement ::= Block ;
 StorageElement ::= Operator ;
Annotable ::= StorageElement ;
 Annotable ::= ParamArray ;
 Annotable ::= ConstVar ;
 Annotable ::= Type ;
 Annotable ::= Equation ;
 Annotable ::= Assertion ;
 Annotable ::= Project ;
--------------------metamodels::SDM.bgf--------------------
EndpointMember ::= OBEndpoint ;
Integer ::= integer() ;
SystemMember ::= OBSubsystem ;
ResourceMember ::= OBResource ;
String ::= string() ;
--------------------metamodels::SEE_Design.bgf--------------------
Integer ::= integer() ;
String ::= string() ;
--------------------metamodels::SPEM.bgf--------------------
WorkItem ::= WorkDefinition ;
--------------------metamodels::SPL.bgf--------------------
Integer ::= integer() ;
BODYExp ::= ε ;
ContinueStat ::= ε ;
Declaration ::= VariableDeclaration ;
 Declaration ::= FunctionDeclaration ;
 Declaration ::= StructureDeclaration ;
ReasonExp ::= ε ;
Expression ::= ConstantExp ;
 Expression ::= OperatorExp ;
 Expression ::= ForwardExp ;
 Expression ::= WithExp ;
 Expression ::= BlockExp ;
 Expression ::= ReasonExp ;
 Expression ::= BODYExp ;
 Expression ::= RequestURIExp ;
 Expression ::= PopExp ;
 Expression ::= FunctionCallExp ;
 Expression ::= Place ;
SelectMember ::= SelectDefault ;
 SelectMember ::= SelectCase ;
Session ::= Registration ;
 Session ::= Dialog ;
 Session ::= Event ;
 Session ::= Method ;
MessageField ::= ReasonMessageField ;
 MessageField ::= HeadedMessageField ;
BreakStat ::= ε ;
TypeExpression ::= SimpleType ;
 TypeExpression ::= SequenceType ;
 TypeExpression ::= DefinedType ;
String ::= string() ;
Statement ::= CompoundStat ;
 Statement ::= SetStat ;
 Statement ::= DeclarationStat ;
 Statement ::= ReturnStat ;
 Statement ::= IfStat ;
 Statement ::= WhenStat ;
 Statement ::= ForeachStat ;
 Statement ::= SelectStat ;
 Statement ::= FunctionCallStat ;
 Statement ::= ContinueStat ;
 Statement ::= BreakStat ;
 Statement ::= PushStat ;
MethodName ::= SIPMethodName ;
 MethodName ::= ControlMethodName ;
VariablePlace ::= PropertyCallPlace ;
 VariablePlace ::= Variable ;
LocatedElement ::= Program ;
 LocatedElement ::= Service ;
 LocatedElement ::= Session ;
 LocatedElement ::= MethodName ;
 LocatedElement ::= Branch ;
 LocatedElement ::= TypeExpression ;
 LocatedElement ::= Declaration ;
 LocatedElement ::= StructureProperty ;
 LocatedElement ::= FunctionCall ;
 LocatedElement ::= Statement ;
 LocatedElement ::= SelectMember ;
 LocatedElement ::= Expression ;
 LocatedElement ::= MessageField ;
 LocatedElement ::= Constant ;
 LocatedElement ::= Response ;
Place ::= SIPHeaderPlace ;
 Place ::= VariablePlace ;
Constant ::= BooleanConstant ;
 Constant ::= IntegerConstant ;
 Constant ::= StringConstant ;
 Constant ::= URIConstant ;
 Constant ::= SequenceConstant ;
 Constant ::= ResponseConstant ;
FunctionDeclaration ::= RemoteFunctionDeclaration ;
 FunctionDeclaration ::= LocalFunctionDeclaration ;
Response ::= SuccessResponse ;
 Response ::= ErrorResponse ;
RequestURIExp ::= ε ;
--------------------metamodels::SQLDDL.bgf--------------------
Key ::= SimpleKey ;
 Key ::= PrimaryKey ;
 Key ::= ForeignKey ;
TableElement ::= Column ;
 TableElement ::= Key ;
Integer ::= integer() ;
NullVal ::= ε ;
LocatedElement ::= NamedElement ;
 LocatedElement ::= TableElement ;
 LocatedElement ::= Value ;
NamedElement ::= Database ;
 NamedElement ::= Table ;
 NamedElement ::= Type ;
 NamedElement ::= Parameter ;
Value ::= IntegerVal ;
 Value ::= NullVal ;
 Value ::= StringVal ;
String ::= string() ;
--------------------metamodels::SWRC.bgf--------------------
Integer ::= integer() ;
Thesis ::= MasterThesis ;
 Thesis ::= PhDThesis ;
Publication ::= Article ;
 Publication ::= Book ;
 Publication ::= InBook ;
 Publication ::= Booklet ;
 Publication ::= InCollection ;
 Publication ::= InProceedings ;
 Publication ::= Proceedings ;
 Publication ::= Manual ;
 Publication ::= Misc ;
 Publication ::= Unpublished ;
 Publication ::= Thesis ;
 Publication ::= Report ;
Graduate ::= PhDStudent ;
Project ::= ResearchProject ;
 Project ::= DevelopmentProject ;
 Project ::= SoftwareProject ;
Report ::= ProjectReport ;
 Report ::= TechnicalReport ;
String ::= string() ;
AssociateProfessor ::= ε ;
AssistantProfessor ::= ε ;
FullProfessor ::= ε ;
--------------------metamodels::SQLDML.bgf--------------------
Statement ::= ViewStatement ;
 Statement ::= InsertStmt ;
 Statement ::= QueryStmt ;
Integer ::= integer() ;
ValueExp ::= StringValueExp ;
 ValueExp ::= IntegerValueExp ;
BinaryExp ::= OrExp ;
 BinaryExp ::= AndExp ;
 BinaryExp ::= OperationExp ;
LocatedElement ::= SQLRoot ;
 LocatedElement ::= Statement ;
 LocatedElement ::= NamedElement ;
 LocatedElement ::= WhereClause ;
 LocatedElement ::= Expression ;
Expression ::= BinaryExp ;
 Expression ::= NotExp ;
 Expression ::= LikeExp ;
 Expression ::= InExp ;
 Expression ::= Predicate ;
 Expression ::= QueryPredicate ;
Predicate ::= ValueExp ;
 Predicate ::= ListExp ;
 Predicate ::= FunctionExp ;
 Predicate ::= ColumnExp ;
NamedElement ::= Table ;
 NamedElement ::= DataType ;
 NamedElement ::= ColumnExp ;
String ::= string() ;
QueryStmt ::= QueryStmtCol ;
 QueryStmt ::= QueryStmtAllCol ;
--------------------metamodels::Scilab.bgf--------------------
Integer ::= integer() ;
String ::= string() ;
--------------------metamodels::SecureUML.bgf--------------------
Integer ::= integer() ;
String ::= string() ;
--------------------metamodels::Sharengo.bgf--------------------
Flow ::= Service2BusinessObjectFlow ;
ModelElement ::= Classifier ;
 ModelElement ::= Operation ;
 ModelElement ::= BusinessRule ;
 ModelElement ::= Flow ;
String ::= string() ;
Classifier ::= Service ;
 Classifier ::= BusinessObject ;
--------------------metamodels::SeminarSchedulingSystem.bgf--------------------
Integer ::= integer() ;
String ::= string() ;
--------------------metamodels::SignalFlow.bgf--------------------
Integer ::= integer() ;
String ::= string() ;
--------------------metamodels::SimpleAirlineDomain.bgf--------------------
Integer ::= integer() ;
String ::= string() ;
--------------------metamodels::SysML.bgf--------------------
Integer ::= integer() ;
AllocateActivityPartition ::= ε ;
DeriveReqt ::= ε ;
Allocate ::= ε ;
ActivityPartition ::= AllocateActivityPartition ;
Verify ::= ε ;
Interface ::= FlowSpecification ;
Copy ::= ε ;
ValueSpecification ::= ε ;
ConstraintProperty ::= ε ;
String ::= string() ;
InstanceSpecification ::= ε ;
ConnectorEnd ::= NestedConnectorEnd ;
Overwrite ::= ε ;
Dependency ::= Conform ;
ControlOperation ::= ε ;
Parameter ::= Optional ;
 Parameter ::= Rate ;
Realization ::= Satisfy ;
Abstraction ::= Allocate ;
Package ::= View ;
DataType ::= ValueType ;
Satisfy ::= ε ;
NamedElement ::= Dependency ;
 NamedElement ::= Package ;
 NamedElement ::= Allocated ;
 NamedElement ::= RequirementRelated ;
Entity ::= NamedElement ;
 Entity ::= Comment ;
 Entity ::= Property ;
 Entity ::= DataType ;
 Entity ::= ConnectorEnd ;
 Entity ::= Interface ;
 Entity ::= Classifier ;
 Entity ::= InformationFlow ;
 Entity ::= Parameter ;
 Entity ::= ActivityEdge ;
 Entity ::= ParameterSet ;
 Entity ::= InstanceSpecification ;
 Entity ::= ValueSpecification ;
 Entity ::= Behavior ;
 Entity ::= Operation ;
 Entity ::= ObjectNode ;
 Entity ::= Abstraction ;
 Entity ::= ActivityPartition ;
 Entity ::= Trace ;
 Entity ::= Realization ;
TestCase ::= ε ;
NoBuffer ::= ε ;
Optional ::= ε ;
--------------------metamodels::SimpleSBVR.bgf--------------------
Integer ::= integer() ;
BindableTarget ::= Variable ;
FactType ::= BinaryFactType ;
NecessityFormulation ::= ε ;
String ::= string() ;
--------------------metamodels::SimulinkStateFlow.bgf--------------------
Integer ::= integer() ;
BranchPoint ::= ε ;
BlockRef ::= ε ;
String ::= string() ;
--------------------metamodels::SoftwareQualityControl.bgf--------------------
Integer ::= integer() ;
ControlType ::= BugTracking ;
String ::= string() ;
--------------------metamodels::SyncCharts.bgf--------------------
Integer ::= integer() ;
TransitionKind ::= ε ;
PseudoTransitionKind ::= ε ;
PseudoStateKind ::= ε ;
Vertex ::= PseudoState ;
 Vertex ::= State ;
ModelElement ::= Arc ;
 ModelElement ::= Vertex ;
Arc ::= Transition ;
 Arc ::= PseudoTransition ;
String ::= string() ;
--------------------metamodels::Table.bgf--------------------
String ::= string() ;
--------------------metamodels::TextualPathExp.bgf--------------------
Transition ::= AlternativeTrans ;
 Transition ::= PrimitiveTrans ;
String ::= string() ;
--------------------metamodels::Trace.bgf--------------------
Integer ::= integer() ;
String ::= string() ;
--------------------metamodels::TroposGoalAndPlanConcepts.bgf--------------------
String ::= string() ;
--------------------metamodels::UEML.bgf--------------------
RoleType ::= ε ;
--------------------metamodels::TroposIntegratingActorConcept.bgf--------------------
Role ::= ε ;
--------------------metamodels::UDDI_meta-model_fragment.bgf--------------------
IdentifierBag ::= ε ;
BusinessTemplate ::= ε ;
BusinessService ::= ε ;
OverviewDocument ::= ε ;
BusinessContact ::= ε ;
--------------------metamodels::UEMLExtended.bgf--------------------
MaterialResource ::= ε ;
RoleType ::= ε ;
--------------------metamodels::UEMLExtensionCapturingAgents.bgf--------------------
HumanResource ::= ε ;
Organisation ::= ε ;
Software ::= ε ;
MaterialResource ::= ε ;
Contract ::= ε ;
RoleType ::= ε ;
--------------------metamodels::UEMLExtensionCapturingSocialEffects.bgf--------------------
RoleType ::= ε ;
--------------------metamodels::UEMLExtensionDynamicAspects.bgf--------------------
RoleType ::= ε ;
--------------------metamodels::UEMLExtensionModelingAspects.bgf--------------------
RoleType ::= ε ;
--------------------metamodels::USECASE1.bgf--------------------
Integer ::= integer() ;
String ::= string() ;
Scenario ::= ε ;
--------------------metamodels::USECASE2.bgf--------------------
Resource ::= ε ;
Integer ::= integer() ;
String ::= string() ;
--------------------metamodels::WSDL.bgf--------------------
String ::= string() ;
--------------------metamodels::UnifiedOntologyLanguage.bgf--------------------
Literal ::= ε ;
Integer ::= integer() ;
Package ::= Ontology ;
String ::= string() ;
--------------------metamodels::UnixFS.bgf--------------------
File ::= Directory ;
 File ::= TextFile ;
NamedElement ::= File ;
String ::= string() ;
--------------------metamodels::UsiXML-task.bgf--------------------
Integer ::= integer() ;
Operator ::= BinaryOperator ;
 Operator ::= UnaryOperator ;
String ::= string() ;
--------------------metamodels::WSLink.bgf--------------------
Services ::= WebService ;
 Services ::= RSS ;
Integer ::= integer() ;
LocatedElement ::= Network ;
 LocatedElement ::= Services ;
String ::= string() ;
--------------------metamodels::WTIP_SimpleClass.bgf--------------------
String ::= string() ;
--------------------metamodels::WTIP_SimpleRDBMS.bgf--------------------
String ::= string() ;
--------------------metamodels::WebApplications_AbstractModel.bgf--------------------
BusinessLogic ::= ε ;
DesignElement ::= ε ;
Integer ::= integer() ;
LogicInterface ::= ε ;
DesignTemplate ::= ε ;
String ::= string() ;
--------------------metamodels::WfMC.bgf--------------------
String ::= string() ;
--------------------metamodels::WebApplications_ConceptualModel.bgf--------------------
Integer ::= integer() ;
Alternative ::= ε ;
DesignModule ::= ε ;
String ::= string() ;
--------------------metamodels::WorkDefinitions.bgf--------------------
Step ::= ε ;
--------------------metamodels::XAML-Perspective.bgf--------------------
Integer ::= integer() ;
WinFXElement ::= Name ;
GraphicalContainer ::= Grid ;
String ::= string() ;
Object3D ::= Workshop3D ;
PerspectiveElement ::= Workshop3D ;
 PerspectiveElement ::= XyzAxis3D ;
 PerspectiveElement ::= Box3D ;
 PerspectiveElement ::= Square3D ;
--------------------metamodels::XAML-ResourceDictionary.bgf--------------------
Integer ::= integer() ;
WinFXElement ::= Key ;
Transformation ::= TranslateTransform3D ;
 Transformation ::= ScaleTransform3D ;
 Transformation ::= RotateTransform3D ;
Material ::= DiffuseMaterial ;
String ::= string() ;
--------------------metamodels::XMorphLanguage_abstractSyntax.bgf--------------------
SimpleTerm ::= TrackingUse ;
 SimpleTerm ::= PatternUse ;
 SimpleTerm ::= MofTerm ;
 SimpleTerm ::= Condition ;
CoumpoundExpr ::= CollectionExpr ;
 CoumpoundExpr ::= FunctionExpr ;
 CoumpoundExpr ::= FeatureExpr ;
VarScope ::= PatternScope ;
 VarScope ::= PatternDefn ;
 VarScope ::= TRule ;
Term ::= CompoundTerm ;
 Term ::= SimpleTerm ;
Expression ::= VarUse ;
 Expression ::= CoumpoundExpr ;
 Expression ::= InstanceRef ;
 Expression ::= MOF::Object ;
 Expression ::= SimpleExpr ;
SimpleExpr ::= StringConstant ;
 SimpleExpr ::= IntConstant ;
 SimpleExpr ::= BooleanConstant ;
 SimpleExpr ::= EnumConstant ;
CompoundTerm ::= AndTerm ;
 CompoundTerm ::= OrTerm ;
 CompoundTerm ::= NotTerm ;
 CompoundTerm ::= IfTerm ;
AbstractVar ::= TRuleVar ;
 AbstractVar ::= PatternVar ;
 AbstractVar ::= ExtentVar ;
PatternScope ::= Transformation ;
 PatternScope ::= Query ;
String ::= string() ;
MofTerm ::= MofInstance ;
 MofTerm ::= MofOrder ;
--------------------metamodels::XPDL-1.14.bgf--------------------
Integer ::= integer() ;
ResultMultiple ::= ε ;
Element ::= Package ;
 Element ::= MessageFlow ;
 Element ::= Association ;
 Element ::= Pool ;
 Element ::= Lane ;
 Element ::= Participant ;
 Element ::= Artifact ;
 Element ::= TypeDeclaration ;
 Element ::= Application ;
 Element ::= Activity ;
 Element ::= Process ;
 Element ::= Transition ;
 Element ::= ActivitySet ;
 Element ::= Object ;
 Element ::= ExternalPackage ;
 Element ::= Category ;
 Element ::= DataField ;
TaskManual ::= ε ;
Event ::= StartEvent ;
 Event ::= IntermediateEvent ;
 Event ::= EndEvent ;
ParametrizedApplication ::= ε ;
TriggerMultiple ::= ε ;
Trigger ::= ResultCompensation ;
 Trigger ::= ResultError ;
 Trigger ::= ResultMultiple ;
 Trigger ::= TriggerResultLink ;
 Trigger ::= TriggerResultMessage ;
 Trigger ::= TriggerIntermediateMultiple ;
 Trigger ::= TriggerMultiple ;
 Trigger ::= TriggerRule ;
 Trigger ::= TriggerTimer ;
Task ::= TaskService ;
 Task ::= TaskReceive ;
 Task ::= TaskManual ;
 Task ::= TaskReference ;
 Task ::= TaskScript ;
 Task ::= TaskSend ;
 Task ::= TaskUser ;
 Task ::= TaskApplication ;
TriggerResultMessage ::= ε ;
TriggerIntermediateMultiple ::= ε ;
String ::= string() ;
--------------------metamodels::XUL-Interactorl.bgf--------------------
Integer ::= integer() ;
String ::= string() ;
--------------------metamodels::bmmOmg.bgf--------------------
MotivationElement ::= Assessment ;
 MotivationElement ::= Means ;
 MotivationElement ::= OrganizationUnit ;
 MotivationElement ::= End ;
 MotivationElement ::= BusinessProcess ;
 MotivationElement ::= Asset ;
 MotivationElement ::= Liability ;
 MotivationElement ::= Influencer ;
 MotivationElement ::= InfluencerCategory ;
 MotivationElement ::= InfluencingOrganization ;
 MotivationElement ::= OrganizationCategory ;
 MotivationElement ::= PotentialImpact ;
 MotivationElement ::= AssessmentCategory ;
String ::= string() ;
--------------------metamodels::cmt.owl.bgf--------------------
Integer ::= integer() ;
Thing ::= Conference ;
User ::= Administrator ;
 User ::= Reviewer ;
 User ::= Author ;
Preference ::= ε ;
Rejection ::= ε ;
SubjectArea ::= ε ;
Acceptance ::= ε ;
String ::= string() ;
--------------------metamodels::confOf.owl.bgf--------------------
Conference_applicant ::= Registeered_applicant ;
rejection_notification_email ::= ε ;
Contribution_co-author ::= ε ;
start_date_of_camera-ready_submission ::= ε ;
start_date_of_full_paper_submission ::= ε ;
Preference ::= ε ;
SubjectArea ::= ε ;
Acceptance ::= ε ;
Country ::= ε ;
start_date_of_abstract_submission ::= ε ;
Chair_URL ::= ε ;
end_date_of_camera-ready_submission ::= ε ;
end_date_of_full_paper_submission ::= ε ;
intensity ::= ε ;
Regular_contribution ::= Extended_abstract ;
String ::= string() ;
Detail ::= ε ;
acceptance_notification_email ::= ε ;
start_date_of_conference ::= ε ;
Conference_participant ::= Passive_conference_participant ;
 Conference_participant ::= Active_conference_participant ;
Reception ::= ε ;
topic ::= ε ;
Request ::= Help_Request ;
University ::= ε ;
end_date_of_abstract_submission ::= ε ;
Rejection ::= ε ;
Review_Form_Setup ::= ε ;
Preview ::= ε ;
Late_paid_applicant ::= ε ;
classification ::= ε ;
Camera_ready_contribution ::= ε ;
Rejection_Email ::= ε ;
Contact_Person_URL ::= ε ;
Inforamtion ::= ε ;
Contribution_1th-author ::= ε ;
Integer ::= integer() ;
Registeered_applicant ::= Paid_applicant ;
Company ::= ε ;
Description ::= ε ;
Group_Email ::= ε ;
lower_tier_reviewing_process ::= ε ;
Invited_speaker ::= ε ;
Regular_Program_Committee_member ::= ε ;
Regular_Reviewer_URL ::= ε ;
Assistance ::= ε ;
end_date_of_conference ::= ε ;
institute ::= ε ;
Conference_fees ::= ε ;
Organizer ::= ε ;
Misc ::= ε ;
City ::= ε ;
Early_paid_applicant ::= ε ;
Passive_conference_participant ::= ε ;
Extended_abstract ::= Abstract ;
Accepted_contribution ::= Camera_ready_contribution ;
Notification_Email ::= ε ;
Feature_Request ::= ε ;
Trip ::= ε ;
Senior_Reviewer_URL ::= ε ;
Banquet ::= ε ;
date_of_notification ::= ε ;
phase_of_conference ::= ε ;
--------------------metamodels::confious.owl.bgf--------------------
Conference_applicant ::= Registeered_applicant ;
rejection_notification_email ::= ε ;
Contribution_co-author ::= ε ;
start_date_of_camera-ready_submission ::= ε ;
start_date_of_full_paper_submission ::= ε ;
Preference ::= ε ;
SubjectArea ::= ε ;
Acceptance ::= ε ;
start_date_of_abstract_submission ::= ε ;
Chair_URL ::= ε ;
end_date_of_camera-ready_submission ::= ε ;
end_date_of_full_paper_submission ::= ε ;
Regular_contribution ::= Extended_abstract ;
intensity ::= ε ;
String ::= string() ;
Detail ::= ε ;
acceptance_notification_email ::= ε ;
start_date_of_conference ::= ε ;
Conference_participant ::= Passive_conference_participant ;
 Conference_participant ::= Active_conference_participant ;
topic ::= ε ;
Request ::= Help_Request ;
end_date_of_abstract_submission ::= ε ;
Rejection ::= ε ;
Review_Form_Setup ::= ε ;
Preview ::= ε ;
Late_paid_applicant ::= ε ;
classification ::= ε ;
Camera_ready_contribution ::= ε ;
Rejection_Email ::= ε ;
Contact_Person_URL ::= ε ;
Inforamtion ::= ε ;
Contribution_1th-author ::= ε ;
Integer ::= integer() ;
Registeered_applicant ::= Paid_applicant ;
Description ::= ε ;
Group_Email ::= ε ;
lower_tier_reviewing_process ::= ε ;
Invited_speaker ::= ε ;
Regular_Program_Committee_member ::= ε ;
Regular_Reviewer_URL ::= ε ;
Assistance ::= ε ;
end_date_of_conference ::= ε ;
institute ::= ε ;
Organization ::= ε ;
Conference_fees ::= ε ;
Organizer ::= ε ;
Misc ::= ε ;
Early_paid_applicant ::= ε ;
Passive_conference_participant ::= ε ;
Extended_abstract ::= Abstract ;
Accepted_contribution ::= Camera_ready_contribution ;
Notification_Email ::= ε ;
Feature_Request ::= ε ;
Senior_Reviewer_URL ::= ε ;
date_of_notification ::= ε ;
phase_of_conference ::= ε ;
--------------------metamodels::crs_dr.owl.bgf--------------------
Conference_applicant ::= Registeered_applicant ;
rejection_notification_email ::= ε ;
Contribution_co-author ::= ε ;
start_date_of_camera-ready_submission ::= ε ;
start_date_of_full_paper_submission ::= ε ;
Preference ::= ε ;
SubjectArea ::= ε ;
Acceptance ::= ε ;
Country ::= ε ;
start_date_of_abstract_submission ::= ε ;
Chair_URL ::= ε ;
end_date_of_camera-ready_submission ::= ε ;
end_date_of_full_paper_submission ::= ε ;
intensity ::= ε ;
Regular_contribution ::= Extended_abstract ;
 Regular_contribution ::= Paper ;
String ::= string() ;
Detail ::= ε ;
acceptance_notification_email ::= ε ;
start_date_of_conference ::= ε ;
Conference_participant ::= Passive_conference_participant ;
 Conference_participant ::= Active_conference_participant ;
Reception ::= ε ;
topic ::= ε ;
Request ::= Help_Request ;
University ::= ε ;
end_date_of_abstract_submission ::= ε ;
Rejection ::= ε ;
Review_Form_Setup ::= ε ;
Preview ::= ε ;
Late_paid_applicant ::= ε ;
classification ::= ε ;
Camera_ready_contribution ::= ε ;
Rejection_Email ::= ε ;
Contact_Person_URL ::= ε ;
Inforamtion ::= ε ;
Contribution_1th-author ::= ε ;
Integer ::= integer() ;
Registeered_applicant ::= Paid_applicant ;
Company ::= ε ;
Description ::= ε ;
Group_Email ::= ε ;
lower_tier_reviewing_process ::= ε ;
Invited_speaker ::= ε ;
Regular_Program_Committee_member ::= ε ;
Regular_Reviewer_URL ::= ε ;
Assistance ::= ε ;
end_date_of_conference ::= ε ;
institute ::= ε ;
Conference_fees ::= ε ;
Organizer ::= ε ;
Misc ::= ε ;
City ::= ε ;
Early_paid_applicant ::= ε ;
Passive_conference_participant ::= ε ;
Extended_abstract ::= Abstract ;
Accepted_contribution ::= Camera_ready_contribution ;
Notification_Email ::= ε ;
Feature_Request ::= ε ;
Trip ::= ε ;
Senior_Reviewer_URL ::= ε ;
Banquet ::= ε ;
date_of_notification ::= ε ;
phase_of_conference ::= ε ;
--------------------metamodels::deployment.bgf--------------------
Node ::= Device ;
 Node ::= ExecutionEnvironment ;
String ::= string() ;
--------------------metamodels::edas.owl.bgf--------------------
start_date_of_camera-ready_submission ::= ε ;
start_date_of_full_paper_submission ::= ε ;
Preference ::= ε ;
Acceptance ::= ε ;
Country ::= ε ;
start_date_of_abstract_submission ::= ε ;
end_date_of_camera-ready_submission ::= ε ;
CoffeeBreak ::= ε ;
Regular_contribution ::= Extended_abstract ;
Detail ::= ε ;
Request ::= Help_Request ;
end_date_of_abstract_submission ::= ε ;
Rejection ::= ε ;
Review_Form_Setup ::= ε ;
Late_paid_applicant ::= ε ;
Camera_ready_contribution ::= ε ;
classification ::= ε ;
AcceptRating ::= ε ;
Contribution_1th-author ::= ε ;
ClosingTalk ::= ε ;
Registeered_applicant ::= Paid_applicant ;
MealBreak ::= ε ;
Description ::= ε ;
ReviewForm ::= ε ;
Assistance ::= ε ;
NumericalReviewQuestion ::= ε ;
WeekRejectRating ::= ε ;
Conference_fees ::= ε ;
ComputerNetworksSecurityTopic ::= ε ;
ComputerNetworksEnterpriseTopic ::= ε ;
Early_paid_applicant ::= ε ;
PersonalPublicationHistory ::= ε ;
Extended_abstract ::= Abstract ;
Passive_conference_participant ::= ε ;
Notification_Email ::= ε ;
Trip ::= ε ;
Senior_Reviewer_URL ::= ε ;
Excursion ::= ε ;
Banquet ::= ε ;
date_of_notification ::= ε ;
phase_of_conference ::= ε ;
Conference_applicant ::= Registeered_applicant ;
rejection_notification_email ::= ε ;
Contribution_co-author ::= ε ;
RejectRating ::= ε ;
ConferenceSession ::= ε ;
SubjectArea ::= ε ;
ComputerNetworksMeasurementsTopic ::= ε ;
Chair_URL ::= ε ;
end_date_of_full_paper_submission ::= ε ;
intensity ::= ε ;
String ::= string() ;
TextualReviewQuestion ::= ε ;
acceptance_notification_email ::= ε ;
start_date_of_conference ::= ε ;
Conference_participant ::= Passive_conference_participant ;
 Conference_participant ::= Active_conference_participant ;
topic ::= ε ;
Reception ::= ε ;
ComputerNetworksManagementTopic ::= ε ;
Preview ::= ε ;
Rejection_Email ::= ε ;
Contact_Person_URL ::= ε ;
Inforamtion ::= ε ;
ComputerNetworksSwitchingTopic ::= ε ;
Integer ::= integer() ;
Group_Email ::= ε ;
lower_tier_reviewing_process ::= ε ;
Invited_speaker ::= ε ;
Regular_Program_Committee_member ::= ε ;
Regular_Reviewer_URL ::= ε ;
ComputerNetworksOpticalTopic ::= ε ;
end_date_of_conference ::= ε ;
ComputerNetworksSensorTopic ::= ε ;
institute ::= ε ;
AccpetIfRoomRating ::= ε ;
Organizer ::= ε ;
WelcomeTalk ::= ε ;
Misc ::= ε ;
ComputerNetworksAapplicationsTopic ::= ε ;
City ::= ε ;
Accepted_contribution ::= Camera_ready_contribution ;
FreeTimeBreak ::= ε ;
Feature_Request ::= ε ;
--------------------metamodels::ekaw.owl.bgf--------------------
start_date_of_camera-ready_submission ::= ε ;
Invited_Speaker ::= ε ;
start_date_of_full_paper_submission ::= ε ;
Preference ::= ε ;
OC_Chair ::= ε ;
Acceptance ::= ε ;
Country ::= ε ;
start_date_of_abstract_submission ::= ε ;
end_date_of_camera-ready_submission ::= ε ;
Conference_Session ::= Industrial_Session ;
CoffeeBreak ::= ε ;
Regular_contribution ::= Extended_abstract ;
Detail ::= ε ;
Request ::= Help_Request ;
end_date_of_abstract_submission ::= ε ;
Demo_Chair ::= ε ;
Rejection ::= ε ;
Review_Form_Setup ::= ε ;
Conference_Trip ::= ε ;
Late_paid_applicant ::= ε ;
Camera_ready_contribution ::= ε ;
classification ::= ε ;
AcceptRating ::= ε ;
Contribution_1th-author ::= ε ;
ClosingTalk ::= ε ;
Proceedings ::= Conference_Proceedings ;
Workshop_Session ::= ε ;
Registeered_applicant ::= Paid_applicant ;
Late-Registered_Participant ::= ε ;
Conference_Proceedings ::= ε ;
MealBreak ::= ε ;
Description ::= ε ;
ReviewForm ::= ε ;
PC_Chair ::= ε ;
Assistance ::= ε ;
NumericalReviewQuestion ::= ε ;
Industrial_Session ::= ε ;
WeekRejectRating ::= ε ;
Conference_fees ::= ε ;
ComputerNetworksSecurityTopic ::= ε ;
ComputerNetworksEnterpriseTopic ::= ε ;
Early_paid_applicant ::= ε ;
PersonalPublicationHistory ::= ε ;
Extended_abstract ::= ε ;
Passive_conference_participant ::= ε ;
Notification_Email ::= ε ;
Trip ::= ε ;
Senior_Reviewer_URL ::= ε ;
Excursion ::= ε ;
Banquet ::= ε ;
date_of_notification ::= ε ;
Early-Registered_Participant ::= ε ;
phase_of_conference ::= ε ;
Conference_Banquet ::= ε ;
Conference_applicant ::= Registeered_applicant ;
rejection_notification_email ::= ε ;
Contribution_co-author ::= ε ;
RejectRating ::= ε ;
Multi-author_Volume ::= Proceedings ;
Demo_Session ::= ε ;
ConferenceSession ::= ε ;
SubjectArea ::= ε ;
ComputerNetworksMeasurementsTopic ::= ε ;
Chair_URL ::= ε ;
end_date_of_full_paper_submission ::= ε ;
Regular_Session ::= ε ;
intensity ::= ε ;
String ::= string() ;
TextualReviewQuestion ::= ε ;
acceptance_notification_email ::= ε ;
start_date_of_conference ::= ε ;
Conference_participant ::= Passive_conference_participant ;
 Conference_participant ::= Active_conference_participant ;
Reception ::= ε ;
ComputerNetworksManagementTopic ::= ε ;
Preview ::= ε ;
Rejection_Email ::= ε ;
Tutorial_Chair ::= ε ;
Poster_Session ::= ε ;
Contact_Person_URL ::= ε ;
Inforamtion ::= ε ;
ComputerNetworksSwitchingTopic ::= ε ;
Integer ::= integer() ;
Session_Chair ::= ε ;
Group_Email ::= ε ;
lower_tier_reviewing_process ::= ε ;
Invited_speaker ::= ε ;
Regular_Program_Committee_member ::= ε ;
Regular_Reviewer_URL ::= ε ;
ComputerNetworksOpticalTopic ::= ε ;
end_date_of_conference ::= ε ;
ComputerNetworksSensorTopic ::= ε ;
institute ::= ε ;
AccpetIfRoomRating ::= ε ;
Organizer ::= ε ;
WelcomeTalk ::= ε ;
Workshop_Chair ::= ε ;
Misc ::= ε ;
ComputerNetworksAapplicationsTopic ::= ε ;
City ::= ε ;
SC_Member ::= ε ;
Presenter ::= Invited_Speaker ;
Submitted_Paper ::= Assigned_Paper ;
Accepted_contribution ::= Camera_ready_contribution ;
PC_Member ::= SC_Member ;
 PC_Member ::= Session_Chair ;
 PC_Member ::= Tutorial_Chair ;
 PC_Member ::= PC_Chair ;
 PC_Member ::= Workshop_Chair ;
FreeTimeBreak ::= ε ;
Feature_Request ::= ε ;
OC_Member ::= OC_Chair ;
--------------------metamodels::iasted.owl.bgf--------------------
start_date_of_camera-ready_submission ::= ε ;
Invited_Speaker ::= ε ;
Preference ::= ε ;
Welcome_address ::= ε ;
Refusing_manuscript ::= ε ;
Regular_contribution ::= Extended_abstract ;
Conference_hotel ::= ε ;
Coffee_break ::= ε ;
Rejection ::= ε ;
Renting ::= ε ;
Late_paid_applicant ::= ε ;
Nonauthor_registration_fee ::= ε ;
classification ::= ε ;
Author_attendee_book_registration_fee ::= ε ;
AcceptRating ::= ε ;
IASTED_member ::= ε ;
ClosingTalk ::= ε ;
Workshop_Session ::= ε ;
Registeered_applicant ::= Paid_applicant ;
Late-Registered_Participant ::= ε ;
Description ::= ε ;
MealBreak ::= ε ;
Conference_Proceedings ::= ε ;
Shuttle_bus ::= ε ;
Technical_commitee ::= ε ;
Conference_Hiker ::= ε ;
Departure ::= ε ;
Listener ::= ε ;
Social_program ::= Dinner_banquet ;
Industrial_Session ::= ε ;
Conference_fees ::= ε ;
Conference_state ::= ε ;
ComputerNetworksEnterpriseTopic ::= ε ;
Early_paid_applicant ::= ε ;
Passive_conference_participant ::= ε ;
Conference_airport ::= ε ;
Receiving_manuscript ::= ε ;
Senior_Reviewer_URL ::= ε ;
Plenary_lecture ::= ε ;
Excursion ::= ε ;
Presenter_city ::= ε ;
date_of_notification ::= ε ;
Departure_tax ::= ε ;
Early-Registered_Participant ::= ε ;
phase_of_conference ::= ε ;
Conference_applicant ::= Registeered_applicant ;
Time_zone ::= ε ;
Video_cassette_player ::= ε ;
Single_hotel_room ::= ε ;
Hotel_presenter ::= ε ;
Contribution_co-author ::= ε ;
Introduction_of_speaker ::= ε ;
Session_chair ::= ε ;
Multi-author_Volume ::= Proceedings ;
ConferenceSession ::= ε ;
SubjectArea ::= ε ;
Nonmember_registration_fee ::= ε ;
ComputerNetworksMeasurementsTopic ::= ε ;
Coctail_reception ::= ε ;
Dinner_banquet ::= ε ;
Chair_URL ::= ε ;
Car ::= ε ;
Regular_Session ::= ε ;
start_date_of_conference ::= ε ;
Conference_participant ::= Passive_conference_participant ;
 Conference_participant ::= Active_conference_participant ;
Reception ::= ε ;
Full_day_tour ::= ε ;
LCD_projector ::= ε ;
Presenter_house ::= ε ;
Cd_proceening ::= ε ;
Preview ::= ε ;
Rejection_Email ::= ε ;
Presenter_university ::= ε ;
Student_registration_fee ::= ε ;
Poster_Session ::= ε ;
Tutorial_Chair ::= ε ;
Inforamtion ::= ε ;
Trip_day ::= ε ;
Hotel_registration_form ::= ε ;
Session_Chair ::= ε ;
Group_Email ::= ε ;
lower_tier_reviewing_process ::= ε ;
Regular_Program_Committee_member ::= ε ;
ComputerNetworksOpticalTopic ::= ε ;
end_date_of_conference ::= ε ;
Double_hotel_room ::= ε ;
AccpetIfRoomRating ::= ε ;
Sponsor_city ::= ε ;
Conference_city ::= ε ;
One_day_presenter ::= ε ;
Accepting_manuscript ::= ε ;
SC_Member ::= ε ;
Presenter ::= Invited_Speaker ;
Accepted_contribution ::= Camera_ready_contribution ;
PC_Member ::= SC_Member ;
 PC_Member ::= Session_Chair ;
 PC_Member ::= Tutorial_Chair ;
 PC_Member ::= PC_Chair ;
 PC_Member ::= Workshop_Chair ;
OC_Member ::= OC_Chair ;
Modelling ::= ε ;
Value_added_tax ::= ε ;
start_date_of_full_paper_submission ::= ε ;
Conference_days ::= One_conference_day ;
OC_Chair ::= ε ;
Acceptance ::= ε ;
Credit_card ::= ε ;
Country ::= ε ;
start_date_of_abstract_submission ::= ε ;
end_date_of_camera-ready_submission ::= ε ;
CoffeeBreak ::= ε ;
Conference_Session ::= Industrial_Session ;
Detail ::= ε ;
Final_manuscript ::= ε ;
Request ::= Help_Request ;
Bank_transfer ::= ε ;
end_date_of_abstract_submission ::= ε ;
Worker_non_speaker ::= ε ;
Book_proceeding ::= ε ;
Registration_form ::= ε ;
Student_non_speaker ::= ε ;
Demo_Chair ::= ε ;
Review_Form_Setup ::= ε ;
Conference_Trip ::= ε ;
Camera_ready_contribution ::= ε ;
Contribution_1th-author ::= ε ;
Proceedings ::= Conference_Proceedings ;
Lecture ::= Plenary_lecture ;
 Lecture ::= Session ;
ReviewForm ::= ε ;
Hotel_fee ::= ε ;
Sponsor_company_house ::= ε ;
PC_Chair ::= ε ;
Student_lecturer ::= ε ;
Assistance ::= ε ;
Conference_building ::= ε ;
NumericalReviewQuestion ::= ε ;
WeekRejectRating ::= ε ;
ComputerNetworksSecurityTopic ::= ε ;
PersonalPublicationHistory ::= ε ;
Notification_Email ::= ε ;
Trip ::= ε ;
Banquet ::= ε ;
Cheque ::= ε ;
Conference_Banquet ::= ε ;
Taxi ::= ε ;
rejection_notification_email ::= ε ;
RejectRating ::= ε ;
Computer ::= ε ;
Introduction ::= Introduction_of_speaker ;
Demo_Session ::= ε ;
Worker_lecturer ::= ε ;
end_date_of_full_paper_submission ::= ε ;
intensity ::= ε ;
String ::= string() ;
Currency ::= ε ;
TextualReviewQuestion ::= ε ;
Card ::= Credit_card ;
acceptance_notification_email ::= ε ;
Author_attendee_cd_registration_fee ::= ε ;
ComputerNetworksManagementTopic ::= ε ;
Trip_city ::= ε ;
Contact_Person_URL ::= ε ;
Fee_for_extra_trip ::= ε ;
ComputerNetworksSwitchingTopic ::= ε ;
Conference_restaurant ::= ε ;
Integer ::= integer() ;
Speaker_lecture ::= ε ;
Technic_activity ::= ε ;
Invited_speaker ::= ε ;
Presenter_state ::= ε ;
Regular_Reviewer_URL ::= ε ;
ComputerNetworksSensorTopic ::= ε ;
institute ::= ε ;
IASTED_non_member ::= ε ;
One_conference_day ::= ε ;
Overhead_projector ::= ε ;
Organizer ::= ε ;
WelcomeTalk ::= ε ;
Workshop_Chair ::= ε ;
Sponsor_state ::= ε ;
Misc ::= ε ;
Author_information_form ::= ε ;
ComputerNetworksAapplicationsTopic ::= ε ;
Submitted_Paper ::= Assigned_Paper ;
Initial_manuscipt ::= ε ;
FreeTimeBreak ::= ε ;
Feature_Request ::= ε ;
Scientific_Event ::= Individual_Presentation ;
 Scientific_Event ::= Track ;
 Scientific_Event ::= Session ;
Van ::= ε ;
Simulating ::= ε ;
Memeber_registration_fee ::= ε ;
--------------------metamodels::ifc2x3.bgf--------------------
IfcFlowStorageDevice ::= ε ;
IfcGeometricRepresentationItem ::= ε ;
IfcDraughtingPreDefinedTextFont ::= ε ;
IfcStructuralItem ::= ε ;
IfcCondition ::= ε ;
IfcDiscreteAccessory ::= ε ;
IfcPreDefinedCurveFont ::= ε ;
IfcPlate ::= ε ;
IfcLightSourceAmbient ::= ε ;
IfcRelSchedulesCostItems ::= ε ;
IfcDraughtingPreDefinedColour ::= ε ;
IfcRelNests ::= ε ;
IfcRelAggregates ::= ε ;
IfcOpenShell ::= ε ;
IfcExternallyDefinedHatchStyle ::= ε ;
IfcRelConnects ::= ε ;
IfcVirtualElement ::= ε ;
IfcFlowStorageDeviceType ::= ε ;
IfcConnectionGeometry ::= ε ;
IfcCurtainWall ::= ε ;
IfcAnnotationTextOccurrence ::= ε ;
IfcFlowMovingDeviceType ::= ε ;
IfcFlowController ::= ε ;
IfcExternallyDefinedSurfaceStyle ::= ε ;
IfcDiscreteAccessoryType ::= ε ;
IfcStructuralPointConnection ::= ε ;
IfcFlowFitting ::= ε ;
IfcCurve ::= ε ;
IfcTopologicalRepresentationItem ::= ε ;
IfcConstructionEquipmentResource ::= ε ;
IfcDistributionControlElementType ::= ε ;
IfcStructuredDimensionCallout ::= ε ;
IfcWorkPlan ::= ε ;
IfcColumn ::= ε ;
IfcBoundedSurface ::= ε ;
IfcFastenerType ::= ε ;
IfcPreDefinedDimensionSymbol ::= ε ;
IfcWall ::= ε ;
IfcFlowTerminal ::= ε ;
IfcWorkSchedule ::= ε ;
IfcElectricalElement ::= ε ;
IfcBezierCurve ::= ε ;
IfcFurnitureStandard ::= ε ;
IfcFlowFittingType ::= ε ;
IfcSolidModel ::= ε ;
IfcStructuralPointAction ::= ε ;
IfcExternallyDefinedSymbol ::= ε ;
IfcDraughtingPreDefinedCurveFont ::= ε ;
IfcCartesianTransformationOperator2D ::= ε ;
IfcBooleanClippingResult ::= ε ;
IfcElectricalCircuit ::= ε ;
IfcStructuralLoadStatic ::= ε ;
IfcBeam ::= ε ;
IfcAnnotation ::= ε ;
IfcFlowTreatmentDeviceType ::= ε ;
IfcZone ::= ε ;
IfcDimensionCurve ::= ε ;
IfcFeatureElement ::= ε ;
IfcDistributionElementType ::= ε ;
IfcLoop ::= ε ;
IfcAngularDimension ::= ε ;
IfcRampFlight ::= ε ;
IfcPreDefinedTextFont ::= ε ;
IfcDistributionChamberElement ::= ε ;
IfcProjectionElement ::= ε ;
IfcTopologyRepresentation ::= ε ;
IfcMechanicalFastenerType ::= ε ;
IfcFlowSegment ::= ε ;
IfcClosedShell ::= ε ;
IfcDistributionFlowElementType ::= ε ;
IfcFlowMovingDevice ::= ε ;
IfcCrewResource ::= ε ;
IfcEquipmentElement ::= ε ;
IfcEnergyConversionDeviceType ::= ε ;
IfcPropertyDefinition ::= ε ;
IfcStructuralCurveConnection ::= ε ;
IfcStructuralCurveMemberVarying ::= ε ;
IfcPoint ::= ε ;
IfcStructuralSurfaceConnection ::= ε ;
IfcExternallyDefinedTextFont ::= ε ;
IfcStyledRepresentation ::= ε ;
IfcFaceOuterBound ::= ε ;
IfcConstructionProductResource ::= ε ;
IfcCostItem ::= ε ;
IfcSpatialStructureElementType ::= ε ;
Ifc2DCompositeCurve ::= ε ;
IfcStyleModel ::= ε ;
IfcWallStandardCase ::= ε ;
IfcBuildingElementType ::= ε ;
IfcFlowSegmentType ::= ε ;
IfcFastener ::= ε ;
IfcStructuralPointReaction ::= ε ;
IfcRadiusDimension ::= ε ;
IfcPreDefinedTerminatorSymbol ::= ε ;
IfcAnnotationSurfaceOccurrence ::= ε ;
IfcElementComponent ::= ε ;
IfcAnnotationOccurrence ::= ε ;
IfcEquipmentStandard ::= ε ;
IfcTendonAnchor ::= ε ;
IfcAnnotationSymbolOccurrence ::= ε ;
IfcProjectionCurve ::= ε ;
IfcFlowTreatmentDevice ::= ε ;
IfcDimensionPair ::= ε ;
IfcSystemFurnitureElementType ::= ε ;
IfcDimensionCurveDirectedCallout ::= ε ;
IfcPreDefinedColour ::= ε ;
IfcBoundedCurve ::= ε ;
IfcPlane ::= ε ;
IfcPreDefinedPointMarkerSymbol ::= ε ;
IfcDiameterDimension ::= ε ;
IfcDistributionElement ::= ε ;
IfcGeometricCurveSet ::= ε ;
IfcFlowControllerType ::= ε ;
IfcShapeRepresentation ::= ε ;
IfcDimensionCalloutRelationship ::= ε ;
IfcFurnishingElement ::= ε ;
IfcElementComponentType ::= ε ;
IfcRelAssignsToProjectOrder ::= ε ;
IfcRelationship ::= ε ;
IfcLinearDimension ::= ε ;
IfcBuildingElementComponent ::= ε ;
IfcEnergyConversionDevice ::= ε ;
IfcBuildingElementPart ::= ε ;
IfcSimpleProperty ::= ε ;
IfcRelOccupiesSpaces ::= ε ;
IfcFacetedBrep ::= ε ;
IfcFlowTerminalType ::= ε ;
IfcVertex ::= ε ;
IfcSurface ::= ε ;
IfcPreDefinedSymbol ::= ε ;
IfcBuildingElement ::= ε ;
IfcFurnishingElementType ::= ε ;
IfcMember ::= ε ;
--------------------metamodels::mlhim2.bgf--------------------
DvOrdered ::= DvOrdinal ;
 DvOrdered ::= DvQuantified ;
DvNumeric ::= DvByte ;
 DvNumeric ::= DvDecimal ;
 DvNumeric ::= DvInt ;
 DvNumeric ::= DvInteger ;
 DvNumeric ::= DvLong ;
 DvNumeric ::= DvNegativeInteger ;
 DvNumeric ::= DvNonNegativeInteger ;
 DvNumeric ::= DvNonPositiveInteger ;
 DvNumeric ::= DvPositiveInteger ;
 DvNumeric ::= DvShort ;
 DvNumeric ::= DvUnsignedByte ;
 DvNumeric ::= DvUnsignedInt ;
 DvNumeric ::= DvUnsignedLong ;
 DvNumeric ::= DvUnsignedShort ;
Event ::= IntervalEvent ;
 Event ::= PointEvent ;
DvQuantified ::= DvCount ;
 DvQuantified ::= DvQuantity ;
 DvQuantified ::= DvRatio ;
DvAny ::= DvBoolean ;
 DvAny ::= DvChar ;
 DvAny ::= DvEncapsulated ;
 DvAny ::= DvInterval ;
 DvAny ::= DvNumeric ;
 DvAny ::= DvOrdered ;
 DvAny ::= DvParagraph ;
 DvAny ::= DvURI ;
 DvAny ::= PartyProxy ;
 DvAny ::= ReferenceRange ;
DvRatio ::= DvProportion ;
 DvRatio ::= DvRate ;
ASKR ::= ε ;
ExceptionalValue ::= NI ;
DvTemporal ::= DvDate ;
 DvTemporal ::= DvDateTime ;
 DvTemporal ::= DvDuration ;
 DvTemporal ::= DvTime ;
NINF ::= ε ;
NA ::= ε ;
Item ::= Cluster ;
 Item ::= Element ;
 Item ::= Slot ;
Entry ::= AdminEntry ;
 Entry ::= CareEntry ;
DvMedia ::= DvMediaApp ;
 DvMedia ::= DvMediaAudio ;
 DvMedia ::= DvMediaImage ;
 DvMedia ::= DvMediaModel ;
 DvMedia ::= DvMediaMsg ;
 DvMedia ::= DvMediaMultipart ;
 DvMedia ::= DvMediaText ;
 DvMedia ::= DvMediaVideo ;
PINF ::= ε ;
DER ::= ε ;
Locatable ::= Activity ;
 Locatable ::= Attestation ;
 Locatable ::= Composition ;
 Locatable ::= ContentItem ;
 Locatable ::= DataStructure ;
 Locatable ::= Event ;
 Locatable ::= EventContext ;
 Locatable ::= Folder ;
 Locatable ::= Item ;
 Locatable ::= Location ;
 Locatable ::= Party ;
 Locatable ::= Relationship ;
 Locatable ::= Role ;
ContentItem ::= Entry ;
 ContentItem ::= Section ;
NASK ::= ε ;
UNC ::= ε ;
DataStructure ::= History ;
 DataStructure ::= ItemStructure ;
PartyProxy ::= PartyIdentified ;
 PartyProxy ::= PartySelf ;
DvChar ::= DvLanguage ;
 DvChar ::= DvNormalizedString ;
 DvChar ::= DvString ;
 DvChar ::= DvToken ;
Party ::= Device ;
 Party ::= Group ;
 Party ::= NonHuman ;
 Party ::= Organization ;
 Party ::= Person ;
TRC ::= ε ;
MSK ::= ε ;
DvEncapsulated ::= DvMedia ;
 DvEncapsulated ::= DvParsable ;
NAV ::= ε ;
QS ::= ε ;
CareEntry ::= Action ;
 CareEntry ::= Evaluation ;
 CareEntry ::= Instruction ;
 CareEntry ::= Observation ;
ItemStructure ::= ItemList ;
 ItemStructure ::= ItemSingle ;
 ItemStructure ::= ItemTable ;
 ItemStructure ::= ItemTree ;
--------------------metamodels::paperdyne.owl.bgf--------------------
Tends_Towards_Practical ::= ε ;
Must_Accept ::= ε ;
start_date_of_camera-ready_submission ::= ε ;
Invited_Speaker ::= ε ;
Preference ::= ε ;
Welcome_address ::= ε ;
New_Perspective_Issue_Problem_Solving ::= ε ;
Classic_Papers ::= ε ;
Refusing_manuscript ::= ε ;
Regular_contribution ::= Extended_abstract ;
Confirmed_Conflict ::= ε ;
Result_of_Advocate ::= ε ;
Conference_hotel ::= ε ;
Other ::= ε ;
Coffee_break ::= ε ;
Valuable_Confirmation_of_Present_Knowledge ::= ε ;
Rejection ::= ε ;
Renting ::= ε ;
Late_paid_applicant ::= ε ;
Nonauthor_registration_fee ::= ε ;
classification ::= ε ;
Author_attendee_book_registration_fee ::= ε ;
AcceptRating ::= ε ;
IASTED_member ::= ε ;
ClosingTalk ::= ε ;
Registeered_applicant ::= Paid_applicant ;
Late-Registered_Participant ::= ε ;
Contribution_co-Author ::= ε ;
Description ::= ε ;
MealBreak ::= ε ;
Shuttle_bus ::= ε ;
Technical_commitee ::= ε ;
Conference_Hiker ::= ε ;
Departure ::= ε ;
Listener ::= ε ;
Social_program ::= Dinner_banquet ;
Industrial_Session ::= ε ;
Conference_fees ::= ε ;
PC_Meeting ::= ε ;
E-mail_PC_Meeting ::= ε ;
Conference_state ::= ε ;
ComputerNetworksEnterpriseTopic ::= ε ;
New_Information ::= ε ;
Early_paid_applicant ::= ε ;
Passive_conference_participant ::= ε ;
Conference_airport ::= ε ;
Hidden_Conflict ::= ε ;
Receiving_manuscript ::= ε ;
Senior_Reviewer_URL ::= ε ;
High ::= ε ;
date_of_notification ::= ε ;
Excursion ::= ε ;
Presenter_city ::= ε ;
Departure_tax ::= ε ;
Early-Registered_Participant ::= ε ;
phase_of_conference ::= ε ;
Conference_applicant ::= Registeered_applicant ;
Time_zone ::= ε ;
Video_cassette_player ::= ε ;
Single_hotel_room ::= ε ;
Hotel_presenter ::= ε ;
Introduction_of_speaker ::= ε ;
Session_chair ::= ε ;
Marginal_Tend_to_Accept ::= ε ;
ConferenceSession ::= ε ;
Programming ::= ε ;
SubjectArea ::= ε ;
Nonmember_registration_fee ::= ε ;
ComputerNetworksMeasurementsTopic ::= ε ;
Coctail_reception ::= ε ;
Dinner_banquet ::= ε ;
Chair_URL ::= ε ;
Car ::= ε ;
start_date_of_conference ::= ε ;
Conference_participant ::= Passive_conference_participant ;
 Conference_participant ::= Active_conference_participant ;
Reception ::= ε ;
Long_bool ::= ε ;
PostScript ::= ε ;
HTML ::= ε ;
Full_day_tour ::= ε ;
LCD_projector ::= ε ;
PaymentMode ::= ε ;
Presenter_house ::= ε ;
Cd_proceening ::= ε ;
Preview ::= ε ;
Rejection_Email ::= ε ;
Presenter_university ::= ε ;
Student_registration_fee ::= ε ;
Tutorial_Chair ::= ε ;
Inforamtion ::= ε ;
Trip_day ::= ε ;
Hotel_registration_form ::= ε ;
Session_Chair ::= ε ;
Group_Email ::= ε ;
lower_tier_reviewing_process ::= ε ;
Regular_Program_Committee_member ::= ε ;
ComputerNetworksOpticalTopic ::= ε ;
end_date_of_conference ::= ε ;
Double_hotel_room ::= ε ;
AccpetIfRoomRating ::= ε ;
Sponsor_city ::= ε ;
RFC ::= ε ;
Conference_city ::= ε ;
One_day_presenter ::= ε ;
Accepting_manuscript ::= ε ;
SC_Member ::= ε ;
Presenter ::= Invited_Speaker ;
Accepted_contribution ::= Camera_ready_contribution ;
Clarity_to_Present_Understanding ::= ε ;
PC_Member ::= SC_Member ;
 PC_Member ::= Session_Chair ;
 PC_Member ::= Tutorial_Chair ;
 PC_Member ::= PC_Chair ;
 PC_Member ::= Workshop_Chair ;
Highly_Practical ::= ε ;
OC_Member ::= OC_Chair ;
Contribution_1th-Author ::= ε ;
Modelling ::= ε ;
Value_added_tax ::= ε ;
start_date_of_full_paper_submission ::= ε ;
Clear_Accept ::= ε ;
Conference_days ::= One_conference_day ;
OC_Chair ::= ε ;
Deleted_Conflict ::= ε ;
Highly_Theoretical ::= ε ;
Acceptance ::= ε ;
Credit_card ::= ε ;
Country ::= ε ;
start_date_of_abstract_submission ::= ε ;
end_date_of_camera-ready_submission ::= ε ;
CoffeeBreak ::= ε ;
Conference_Session ::= Industrial_Session ;
Tends_Towards_Theoretical ::= ε ;
PaperQuestion ::= ε ;
Detail ::= ε ;
Final_manuscript ::= ε ;
Request ::= Help_Request ;
Bank_transfer ::= ε ;
end_date_of_abstract_submission ::= ε ;
Humour ::= ε ;
Worker_non_speaker ::= ε ;
Book_proceeding ::= ε ;
Registration_form ::= ε ;
Student_non_speaker ::= ε ;
Demo_Chair ::= ε ;
Review_Form_Setup ::= ε ;
Conference_Trip ::= ε ;
Camera_ready_contribution ::= ε ;
Self_Conflict ::= ε ;
Adobe_PDF ::= ε ;
ReviewForm ::= ε ;
Hotel_fee ::= ε ;
Sponsor_company_house ::= ε ;
PC_Chair ::= ε ;
Student_lecturer ::= ε ;
Assistance ::= ε ;
Conference_building ::= ε ;
Review_Committee ::= ε ;
NumericalReviewQuestion ::= ε ;
Marginal_Tend_to_Reject ::= ε ;
WeekRejectRating ::= ε ;
ComputerNetworksSecurityTopic ::= ε ;
Text ::= ε ;
Conflict_Rules ::= ε ;
Corel_Word_Perfect ::= ε ;
Discussion ::= ε ;
Extended_abstract ::= ε ;
PersonalPublicationHistory ::= ε ;
Notification_Email ::= ε ;
Trip ::= ε ;
Reviewed_Paper ::= Planed_Paper ;
RTF ::= ε ;
Program_Committee ::= ε ;
Banquet ::= ε ;
Cheque ::= ε ;
Computer_Science ::= ε ;
Conference_Banquet ::= ε ;
Taxi ::= ε ;
rejection_notification_email ::= ε ;
RejectRating ::= ε ;
Computer ::= ε ;
Introduction ::= Introduction_of_speaker ;
Not_Much ::= ε ;
Worker_lecturer ::= ε ;
Low ::= ε ;
ResearchTopic ::= ε ;
end_date_of_full_paper_submission ::= ε ;
intensity ::= ε ;
String ::= string() ;
Currency ::= ε ;
TextualReviewQuestion ::= ε ;
acceptance_notification_email ::= ε ;
Card ::= Credit_card ;
Author_attendee_cd_registration_fee ::= ε ;
ComputerNetworksManagementTopic ::= ε ;
Bidding_And_Paper_Submission_Phase ::= ε ;
Balanced_Theory_and_Practice ::= ε ;
Trip_city ::= ε ;
Contact_Person_URL ::= ε ;
Moderate ::= ε ;
MS_Word ::= ε ;
Fee_for_extra_trip ::= ε ;
ComputerNetworksSwitchingTopic ::= ε ;
Conference_restaurant ::= ε ;
Integer ::= integer() ;
Technic_activity ::= ε ;
Invited_speaker ::= ε ;
Presenter_state ::= ε ;
Regular_Reviewer_URL ::= ε ;
Bidding_Without_Paper_Submission_Phase ::= ε ;
ComputerNetworksSensorTopic ::= ε ;
institute ::= ε ;
Networking ::= ε ;
IASTED_non_member ::= ε ;
One_conference_day ::= ε ;
Clear_Reject ::= ε ;
Overhead_projector ::= ε ;
Organizer ::= CommitteeMember ;
WelcomeTalk ::= ε ;
Workshop_Chair ::= ε ;
Sponsor_state ::= ε ;
Misc ::= ε ;
Author_information_form ::= ε ;
ComputerNetworksAapplicationsTopic ::= ε ;
Initial_manuscipt ::= ε ;
FreeTimeBreak ::= ε ;
Feature_Request ::= ε ;
Scientific_Event ::= Individual_Presentation ;
 Scientific_Event ::= Conference ;
 Scientific_Event ::= Session ;
 Scientific_Event ::= Track ;
Portable_Reject ::= ε ;
Van ::= ε ;
Simulating ::= ε ;
Memeber_registration_fee ::= ε ;
--------------------metamodels::sbvrEclipse.bgf--------------------
AdviceOfOptionality ::= ε ;
RealworldNumericalCorrespondence ::= ε ;
AdviceOfPermission ::= AdviceOfOptionality ;
FactTypeTemplating ::= ε ;
ExtensionalDefinition ::= ε ;
ObligationFormulation ::= ε ;
NonnegativeInteger ::= PositiveInteger ;
NecessityStatement ::= ε ;
StructuralBusinessRule ::= ε ;
ContextualizationFactType ::= IsfacetofFactType ;
OwnedDefinition ::= ε ;
Expression ::= Text ;
RepresentationFormality ::= ε ;
String ::= string() ;
ObligationStatement ::= ε ;
IndividualConcept ::= ε ;
CategorizationFactType ::= ε ;
Quantity ::= Number ;
IsfacetofFactType ::= ε ;
Number ::= Integer ;
PossibilityFormulation ::= ε ;
ContextualizedConcept ::= Facet ;
BusinessVocabulary ::= ε ;
RestrictedPermissionStatement ::= ε ;
PositiveInteger ::= ε ;
AdviceOfPossibility ::= AdviceOfContingency ;
AdoptedDefinition ::= ε ;
ConceptType ::= CharacteristicType ;
PermissibilityFormulation ::= ε ;
OptionalityStatement ::= ε ;
Objectification ::= ε ;
PropositionNominalization ::= ε ;
ClosedLogicalFormulation ::= ε ;
BusinessPolicyStatement ::= ε ;
ThingInContext ::= ε ;
PossibilityStatement ::= ε ;
IspropertyofFactType ::= ε ;
Rule ::= StructuralRule ;
 Rule ::= BusinessRule ;
Icon ::= ε ;
RestrictedPossibilityStatement ::= ε ;
Facet ::= ε ;
AssociativeFactType ::= IspropertyofFactType ;
Role ::= FactTypeRole ;
 Role ::= SituationalRole ;
CharacteristicType ::= ε ;
ExplicitnessOfRepresentation ::= ε ;
Statement ::= GuidanceStatement ;
InstantiationFormulation ::= ε ;
KindOfGuidanceStatement ::= ε ;
DefiniteDescription ::= ε ;
IntensionalDefinition ::= DefiniteDescription ;
ContextOfThing ::= ε ;
NonnecessityStatement ::= ε ;
BinaryFactType ::= PartitiveFactType ;
ProhibitionStatement ::= ε ;
Vocabulary ::= BusinessVocabulary ;
NecessityFormulation ::= ε ;
NonobligationStatement ::= ε ;
StateOfAffairs ::= Actuality ;
PermissionStatement ::= ε ;
PartitiveFactType ::= ε ;
ImpossibilityStatement ::= ε ;
NonverbalDesignation ::= Icon ;
ContingencyStatement ::= ε ;
AdviceOfContingency ::= ε ;
Actuality ::= Representation ;
--------------------metamodels::sbvrOMG.bgf--------------------
AdviceOfOptionality ::= ε ;
RealworldNumericalCorrespondence ::= ε ;
AdviceOfPermission ::= AdviceOfOptionality ;
FactTypeTemplating ::= ε ;
ExtensionalDefinition ::= ε ;
ObligationFormulation ::= ε ;
NonnegativeInteger ::= PositiveInteger ;
NecessityStatement ::= ε ;
StructuralBusinessRule ::= ε ;
ContextualizationFactType ::= IsfacetofFactType ;
OwnedDefinition ::= ε ;
Expression ::= Text ;
RepresentationFormality ::= ε ;
String ::= string() ;
ObligationStatement ::= ε ;
IndividualConcept ::= ε ;
CategorizationFactType ::= ε ;
Quantity ::= Number ;
IsfacetofFactType ::= ε ;
Number ::= Integer ;
PossibilityFormulation ::= ε ;
ContextualizedConcept ::= Facet ;
BusinessVocabulary ::= ε ;
RestrictedPermissionStatement ::= ε ;
PositiveInteger ::= ε ;
AdviceOfPossibility ::= AdviceOfContingency ;
AdoptedDefinition ::= ε ;
ConceptType ::= CharacteristicType ;
PermissibilityFormulation ::= ε ;
OptionalityStatement ::= ε ;
Objectification ::= ε ;
PropositionNominalization ::= ε ;
ClosedLogicalFormulation ::= ε ;
BusinessPolicyStatement ::= ε ;
ThingInContext ::= ε ;
PossibilityStatement ::= ε ;
IspropertyofFactType ::= ε ;
Rule ::= StructuralRule ;
 Rule ::= BusinessRule ;
Icon ::= ε ;
RestrictedPossibilityStatement ::= ε ;
Facet ::= ε ;
AssociativeFactType ::= IspropertyofFactType ;
Role ::= FactTypeRole ;
 Role ::= SituationalRole ;
CharacteristicType ::= ε ;
ExplicitnessOfRepresentation ::= ε ;
Statement ::= GuidanceStatement ;
InstantiationFormulation ::= ε ;
KindOfGuidanceStatement ::= ε ;
DefiniteDescription ::= ε ;
IntensionalDefinition ::= DefiniteDescription ;
ContextOfThing ::= ε ;
NonnecessityStatement ::= ε ;
BinaryFactType ::= PartitiveFactType ;
ProhibitionStatement ::= ε ;
Vocabulary ::= BusinessVocabulary ;
NecessityFormulation ::= ε ;
NonobligationStatement ::= ε ;
StateOfAffairs ::= Actuality ;
PermissionStatement ::= ε ;
PartitiveFactType ::= ε ;
ImpossibilityStatement ::= ε ;
NonverbalDesignation ::= Icon ;
ContingencyStatement ::= ε ;
AdviceOfContingency ::= ε ;
Actuality ::= Representation ;
--------------------metamodels::sigkdd.owl.bgf--------------------
Tends_Towards_Practical ::= ε ;
Must_Accept ::= ε ;
start_date_of_camera-ready_submission ::= ε ;
Preference ::= ε ;
Welcome_address ::= ε ;
New_Perspective_Issue_Problem_Solving ::= ε ;
Classic_Papers ::= ε ;
Refusing_manuscript ::= ε ;
Regular_contribution ::= Extended_abstract ;
Confirmed_Conflict ::= ε ;
Result_of_Advocate ::= ε ;
Conference_hotel ::= ε ;
Other ::= ε ;
Coffee_break ::= ε ;
Valuable_Confirmation_of_Present_Knowledge ::= ε ;
Rejection ::= ε ;
Renting ::= ε ;
Late_paid_applicant ::= ε ;
classification ::= ε ;
AcceptRating ::= ε ;
IASTED_member ::= ε ;
ClosingTalk ::= ε ;
Registeered_applicant ::= Paid_applicant ;
Late-Registered_Participant ::= ε ;
MealBreak ::= ε ;
Description ::= ε ;
Shuttle_bus ::= ε ;
Technical_commitee ::= ε ;
Conference_Hiker ::= ε ;
Departure ::= ε ;
Social_program ::= Dinner_banquet ;
Industrial_Session ::= ε ;
Conference_fees ::= ε ;
PC_Meeting ::= ε ;
E-mail_PC_Meeting ::= ε ;
Conference_state ::= ε ;
ComputerNetworksEnterpriseTopic ::= ε ;
New_Information ::= ε ;
Early_paid_applicant ::= ε ;
Conference_airport ::= ε ;
Passive_conference_participant ::= ε ;
Hidden_Conflict ::= ε ;
Receiving_manuscript ::= ε ;
Senior_Reviewer_URL ::= ε ;
High ::= ε ;
Excursion ::= ε ;
Presenter_city ::= ε ;
date_of_notification ::= ε ;
Departure_tax ::= ε ;
Early-Registered_Participant ::= ε ;
phase_of_conference ::= ε ;
Conference_applicant ::= Registeered_applicant ;
Video_cassette_player ::= ε ;
Time_zone ::= ε ;
Single_hotel_room ::= ε ;
Hotel_presenter ::= ε ;
Contribution_co-author ::= ε ;
Introduction_of_speaker ::= ε ;
Session_chair ::= ε ;
Marginal_Tend_to_Accept ::= ε ;
ConferenceSession ::= ε ;
Programming ::= ε ;
SubjectArea ::= ε ;
ComputerNetworksMeasurementsTopic ::= ε ;
Coctail_reception ::= ε ;
Dinner_banquet ::= ε ;
Chair_URL ::= ε ;
Car ::= ε ;
start_date_of_conference ::= ε ;
Conference_participant ::= Passive_conference_participant ;
 Conference_participant ::= Active_conference_participant ;
Reception ::= ε ;
Long_bool ::= ε ;
PostScript ::= ε ;
HTML ::= ε ;
Full_day_tour ::= ε ;
LCD_projector ::= ε ;
PaymentMode ::= ε ;
Presenter_house ::= ε ;
Cd_proceening ::= ε ;
Preview ::= ε ;
Workshop ::= ε ;
Presenter_university ::= ε ;
Tutorial_Chair ::= ε ;
Inforamtion ::= ε ;
Trip_day ::= ε ;
Hotel_registration_form ::= ε ;
Session_Chair ::= ε ;
lower_tier_reviewing_process ::= ε ;
Regular_Program_Committee_member ::= ε ;
ComputerNetworksOpticalTopic ::= ε ;
end_date_of_conference ::= ε ;
Webmaster ::= ε ;
Double_hotel_room ::= ε ;
AccpetIfRoomRating ::= ε ;
Sponsor_city ::= ε ;
RFC ::= ε ;
Conference_city ::= ε ;
One_day_presenter ::= ε ;
Accepting_manuscript ::= ε ;
SC_Member ::= ε ;
Sponzor_fee ::= ε ;
Presenter ::= Invited_Speaker ;
Accepted_contribution ::= Camera_ready_contribution ;
Clarity_to_Present_Understanding ::= ε ;
PC_Member ::= SC_Member ;
 PC_Member ::= Session_Chair ;
 PC_Member ::= Tutorial_Chair ;
 PC_Member ::= PC_Chair ;
 PC_Member ::= Workshop_Chair ;
Highly_Practical ::= ε ;
OC_Member ::= OC_Chair ;
Modelling ::= ε ;
Value_added_tax ::= ε ;
start_date_of_full_paper_submission ::= ε ;
Clear_Accept ::= ε ;
Conference_days ::= One_conference_day ;
OC_Chair ::= ε ;
Deleted_Conflict ::= ε ;
Highly_Theoretical ::= ε ;
Acceptance ::= ε ;
Credit_card ::= ε ;
Country ::= ε ;
start_date_of_abstract_submission ::= ε ;
end_date_of_camera-ready_submission ::= ε ;
CoffeeBreak ::= ε ;
Conference_Session ::= Industrial_Session ;
Web_site ::= ε ;
Tends_Towards_Theoretical ::= ε ;
PaperQuestion ::= ε ;
Detail ::= ε ;
Final_manuscript ::= ε ;
Request ::= Help_Request ;
General_Chair ::= ε ;
Bank_transfer ::= ε ;
end_date_of_abstract_submission ::= ε ;
Humour ::= ε ;
Worker_non_speaker ::= ε ;
Book_proceeding ::= ε ;
Registration_form ::= ε ;
Student_non_speaker ::= ε ;
Demo_Chair ::= ε ;
Review_Form_Setup ::= ε ;
Conference_Trip ::= ε ;
Camera_ready_contribution ::= ε ;
Self_Conflict ::= ε ;
Adobe_PDF ::= ε ;
Contribution_1th-author ::= ε ;
CD ::= ε ;
ReviewForm ::= ε ;
Organizing_Committee_member ::= ε ;
Hotel_fee ::= ε ;
Sponsor_company_house ::= ε ;
PC_Chair ::= ε ;
Student_lecturer ::= ε ;
Assistance ::= ε ;
Conference_building ::= ε ;
Review_Committee ::= ε ;
NumericalReviewQuestion ::= ε ;
Report ::= ε ;
Marginal_Tend_to_Reject ::= ε ;
WeekRejectRating ::= ε ;
System ::= ε ;
ComputerNetworksSecurityTopic ::= ε ;
Text ::= ε ;
Conflict_Rules ::= ε ;
Corel_Word_Perfect ::= ε ;
Discussion ::= ε ;
PersonalPublicationHistory ::= ε ;
Trip ::= ε ;
Reviewed_Paper ::= Planed_Paper ;
RTF ::= ε ;
Banquet ::= ε ;
Cheque ::= ε ;
Computer_Science ::= ε ;
Conference_Banquet ::= ε ;
Taxi ::= ε ;
rejection_notification_email ::= ε ;
RejectRating ::= ε ;
Computer ::= ε ;
Introduction ::= Introduction_of_speaker ;
Not_Much ::= ε ;
Worker_lecturer ::= ε ;
Low ::= ε ;
ResearchTopic ::= ε ;
end_date_of_full_paper_submission ::= ε ;
intensity ::= ε ;
String ::= string() ;
Currency ::= ε ;
TextualReviewQuestion ::= ε ;
acceptance_notification_email ::= ε ;
Card ::= Credit_card ;
ComputerNetworksManagementTopic ::= ε ;
Bidding_And_Paper_Submission_Phase ::= ε ;
Balanced_Theory_and_Practice ::= ε ;
Trip_city ::= ε ;
Contact_Person_URL ::= ε ;
Moderate ::= ε ;
MS_Word ::= ε ;
Fee_for_extra_trip ::= ε ;
ComputerNetworksSwitchingTopic ::= ε ;
Conference_restaurant ::= ε ;
Integer ::= integer() ;
Technic_activity ::= ε ;
Invited_speaker ::= ε ;
Presenter_state ::= ε ;
Regular_Reviewer_URL ::= ε ;
Bidding_Without_Paper_Submission_Phase ::= ε ;
ComputerNetworksSensorTopic ::= ε ;
institute ::= ε ;
Networking ::= ε ;
IASTED_non_member ::= ε ;
One_conference_day ::= ε ;
Clear_Reject ::= ε ;
Overhead_projector ::= ε ;
WelcomeTalk ::= ε ;
Workshop_Chair ::= ε ;
Sponsor_state ::= ε ;
Misc ::= ε ;
Author_information_form ::= ε ;
ComputerNetworksAapplicationsTopic ::= ε ;
Program_Chair ::= ε ;
Initial_manuscipt ::= ε ;
FreeTimeBreak ::= ε ;
Feature_Request ::= ε ;
Scientific_Event ::= Individual_Presentation ;
 Scientific_Event ::= Conference ;
 Scientific_Event ::= Track ;
 Scientific_Event ::= Workshop ;
Portable_Reject ::= ε ;
Van ::= ε ;
Simulating ::= ε ;
--------------------metamodels::useCase.bgf--------------------
NamedElement ::= Actor ;
 NamedElement ::= UseCase ;
 NamedElement ::= Association ;
BehavioredClassifier ::= ε ;
String ::= string() ;
--------------------metamodels::MiningMart.bgf--------------------
MSL-Tool ::= ε ;
Integer ::= integer() ;
KeyAttribute ::= ε ;
PrimaryKey ::= ε ;
Nominal ::= ε ;
Categorial ::= ε ;
StructuralFeature ::= ε ;
Discretization ::= ε ;
FeatureSelection ::= ε ;
DataMinStep ::= ε ;
ModelElement ::= ε ;
RowSelection ::= ε ;
TimeGroup ::= ε ;
TimeOperator ::= ε ;
Ordinal ::= ε ;
String ::= string() ;
Table ::= ε ;
Time ::= ε ;
Scalar ::= ε ;
Sampling ::= ε ;
Scaling ::= ε ;
Agregation ::= ε ;
MultiRelFeatureConstr ::= ε ;
View ::= ε ;
Constant ::= ε ;
Spatial ::= ε ;
Snapshot ::= ε ;
Segmentation ::= ε ;
Classifier ::= ε ;
Binary ::= ε ;
--------------------ocl::expressions.bgf--------------------
Integer ::= integer() ;
RejectExp ::= ε ;
ForAllExp ::= ε ;
CollectExp ::= ε ;
String ::= string() ;
SelectExp ::= ε ;
ExistsExp ::= ε ;
OclExpression ::= SelfExp ;
 OclExpression ::= ResultExp ;
 OclExpression ::= VariableExp ;
 OclExpression ::= OperationExp ;
 OclExpression ::= QueryExp ;
--------------------ocl::operations.bgf--------------------
Integer ::= integer() ;
OperationExp ::= PropertyOperation ;
 OperationExp ::= OclOperation ;
 OperationExp ::= ConstExp ;
String ::= string() ;
--------------------ocl::types.bgf--------------------
Integer ::= integer() ;
StringType ::= ε ;
Type ::= BasicType ;
 Type ::= InstanceType ;
 Type ::= EnumType ;
 Type ::= OclAnyType ;
 Type ::= OclTypeType ;
 Type ::= CollectionType ;
RealType ::= ε ;
IntegerType ::= ε ;
CollectionType ::= SetType ;
 CollectionType ::= SequenceType ;
 CollectionType ::= BagType ;
BasicType ::= IntegerType ;
 BasicType ::= RealType ;
 BasicType ::= StringType ;
 BasicType ::= BooleanType ;
BooleanType ::= ε ;
String ::= string() ;
--------------------ocl::uml.bgf--------------------
Integer ::= integer() ;
PortCondition ::= ε ;
PreCondition ::= ε ;
Guard ::= ε ;
String ::= string() ;
Invariant ::= ε ;
--------------------ocl::values.bgf--------------------
Integer ::= integer() ;
BasicValue ::= IntegerValue ;
 BasicValue ::= RealValue ;
 BasicValue ::= StringValue ;
 BasicValue ::= BooleanValue ;
String ::= string() ;
Value ::= BasicValue ;
 Value ::= ObjectValue ;
 Value ::= EnumValue ;
 Value ::= UndefinedValue ;
 Value ::= CollectionValue ;
--------------------slps::bgf-1.0-xsd.bgf--------------------
selector ::= string() ;
terminal ::= string() ;
nonterminal ::= string() ;
label ::= string() ;
--------------------slps::bgf-2.0-xsd.bgf--------------------
selector ::= string() ;
terminal ::= string() ;
nonterminal ::= string() ;
label ::= string() ;
--------------------slps::bgf-2.1-xsd.bgf--------------------
selector ::= string() ;
terminal ::= string() ;
nonterminal ::= string() ;
label ::= string() ;
--------------------slps::btf.bgf--------------------
selector ::= string() ;
terminal ::= string() ;
nonterminal ::= string() ;
label ::= string() ;
root ::= grammar tree ;
--------------------slps::bgf-3.0-xsd.bgf--------------------
selector ::= string() ;
terminal ::= string() ;
nonterminal ::= string() ;
label ::= string() ;
--------------------slps::bgf-3.1-xsd.bgf--------------------
selector ::= string() ;
terminal ::= string() ;
nonterminal ::= string() ;
label ::= string() ;
--------------------slps::bgf-4.0-xsd.bgf--------------------
selector ::= string() ;
terminal ::= string() ;
nonterminal ::= string() ;
label ::= string() ;
--------------------slps::bgf-4.3-adt.bgf--------------------
BGFProdList ::= BGFProduction* ;
BGFExprList ::= BGFExpression* ;
--------------------slps::bgf-5.0-adt.bgf--------------------
BGFProdList ::= BGFProduction* ;
BGFExprList ::= BGFExpression* ;
--------------------slps::bgf-5.1-adt.bgf--------------------
BGFProdList ::= BGFProduction* ;
BGFExprList ::= BGFExpression* ;
--------------------slps::bgf-5.2-xsd.bgf--------------------
selector ::= string() ;
terminal ::= string() ;
nonterminal ::= string() ;
label ::= string() ;
--------------------slps::bgf-5.3-adt.bgf--------------------
BGFProdSet ::= BGFProduction* ;
BGFProdList ::= BGFProduction* ;
BGFExprList ::= BGFExpression* ;
--------------------slps::bgf-v1.0-xsd.bgf--------------------
selector ::= string() ;
terminal ::= string() ;
nonterminal ::= string() ;
label ::= string() ;
--------------------slps::bgf-v2.0-xsd.bgf--------------------
selector ::= string() ;
terminal ::= string() ;
nonterminal ::= string() ;
label ::= string() ;
--------------------slps::bgf-v2.1-xsd.bgf--------------------
selector ::= string() ;
terminal ::= string() ;
nonterminal ::= string() ;
label ::= string() ;
--------------------slps::bgf-v3.0-xsd.bgf--------------------
selector ::= string() ;
terminal ::= string() ;
nonterminal ::= string() ;
label ::= string() ;
--------------------slps::bgf-v3.1-xsd.bgf--------------------
selector ::= string() ;
terminal ::= string() ;
nonterminal ::= string() ;
label ::= string() ;
--------------------slps::bgf-v4.0-xsd.bgf--------------------
selector ::= string() ;
terminal ::= string() ;
nonterminal ::= string() ;
label ::= string() ;
--------------------slps::bgf-v5.0-adt.bgf--------------------
BGFProdList ::= BGFProduction* ;
BGFExprList ::= BGFExpression* ;
--------------------slps::bgf-v5.1-adt.bgf--------------------
BGFProdList ::= BGFProduction* ;
BGFExprList ::= BGFExpression* ;
--------------------slps::bgf-v5.2-xsd.bgf--------------------
selector ::= string() ;
terminal ::= string() ;
nonterminal ::= string() ;
label ::= string() ;
--------------------slps::cbgf-adt.bgf--------------------
CBGFSequence ::= CBGFCommand* ;
--------------------slps::cbgf-xsd.bgf--------------------
disappear-appear ::= production ;
unchain-chain ::= production ;
chain-unchain ::= production ;
decreasing-transformation ::= remove | disappear | narrow | downgrade | split ;
anonymize-deanonymize ::= production ;
deanonymize-anonymize ::= production ;
iterate ::= production ;
deyaccify-yaccify ::= production+ ;
yaccify-deyaccify ::= production+ ;
permute ::= production ;
vertical ::= scope ;
detour-abridge ::= production ;
downgrade ::= production production ;
dump ::= ε ;
anonymize ::= production ;
concretize ::= production ;
introduce-eliminate ::= production+ ;
eliminate-introduce ::= production+ ;
abstractize ::= production ;
abstractize-concretize ::= production ;
increasing-decreasing-transformation ::= add-remove | remove-add | appear-disappear | disappear-appear | widen-narrow | narrow-widen | upgrade-downgrade | downgrade-upgrade | unite-split | split-unite ;
atomic ::= transformation+ ;
appear-disappear ::= production ;
abridge ::= production ;
lassoc ::= production ;
bypass ::= ε ;
define-undefine ::= production+ ;
import ::= production+ ;
disappear ::= production ;
rassoc ::= production ;
distribute ::= scope ;
permute-permute ::= production production ;
introduce ::= production+ ;
inject-project ::= production ;
upgrade ::= production production ;
abridge-detour ::= production ;
concretize-abstractize ::= production ;
detour ::= production ;
inline ::= nonterminal ;
increasing-transformation ::= add | appear | widen | upgrade | unite ;
appear ::= production ;
designate ::= production ;
undefine-define ::= production+ ;
yaccify ::= production+ ;
deanonymize ::= production ;
unchain ::= production ;
project-inject ::= production ;
downgrade-upgrade ::= production production ;
upgrade-downgrade ::= production production ;
unlabel-designate ::= production ;
designate-unlabel ::= production ;
iterate-assoc ::= production production ;
assoc-iterate ::= production production ;
chain ::= production ;
sequence ::= (transformation | atomic)* ;
--------------------slps::ldf-Readable.bgf--------------------
selector ::= string() ;
terminal ::= string() ;
mixed ::= (α | string())* ;
document ::= document-metadata part+ ;
nonterminal ::= string() ;
subsection ::= subsection-metadata section-structure ;
section ::= section-metadata section-structure ;
label ::= string() ;
part ::= part-metadata section+ ;
--------------------slps::ldf-v1.0-xsd.bgf--------------------
reference ::= string() ;
mixedType ::= (α | string())* ;
sampleType ::= ε ;
tail ::= mixedType ;
--------------------slps::ldf-v10.0-xsd.bgf--------------------
SimpleText ::= SimpleTextElement+ ;
runnable ::= runnableType ;
reference ::= string() ;
sample ::= sampleType ;
keyword ::= string() ;
mixedType ::= (α | string())* ;
tail ::= mixedType ;
--------------------slps::ldf-v11.0-xsd.bgf--------------------
SimpleText ::= SimpleTextElement+ ;
runnable ::= runnableType ;
reference ::= string() ;
sample ::= sampleType ;
keyword ::= string() ;
mixedType ::= (α | string())* ;
tail ::= mixedType ;
--------------------slps::ldf-v11.1-xsd.bgf--------------------
simpleText ::= simpleTextElement+ ;
runnable ::= runnableType ;
reference ::= string() ;
sample ::= sampleType ;
keyword ::= string() ;
mixedType ::= (α | string())* ;
tail ::= mixedType ;
--------------------slps::ldf-v11.2-xsd.bgf--------------------
simpleText ::= simpleTextElement+ ;
runnable ::= runnableType ;
reference ::= string() ;
sample ::= sampleType ;
keyword ::= string() ;
mixedType ::= (α | string())* ;
tail ::= mixedType ;
--------------------slps::ldf-v12.0-xsd.bgf--------------------
simpleText ::= simpleTextElement+ ;
runnable ::= runnableType ;
reference ::= string() ;
sample ::= sampleType ;
keyword ::= string() ;
mixedType ::= (α | string())* ;
tail ::= mixedType ;
--------------------slps::ldf-v13.0-xsd.bgf--------------------
simpleText ::= simpleTextElement+ ;
runnable ::= runnableType ;
reference ::= string() ;
sample ::= sampleType ;
keyword ::= string() ;
mixedType ::= (α | string())* ;
tail ::= mixedType ;
--------------------slps::ldf-v13.1-xsd.bgf--------------------
simpleText ::= simpleTextElement+ ;
runnable ::= runnableType ;
reference ::= string() ;
sample ::= sampleType ;
keyword ::= string() ;
mixedType ::= (α | string())* ;
tail ::= mixedType ;
--------------------slps::ldf-v14.0-xsd.bgf--------------------
simpleText ::= simpleTextElement+ ;
code ::= string() ;
runnable ::= runnableType ;
reference ::= string() ;
sample ::= sampleType ;
keyword ::= string() ;
mixedType ::= (α | string())* ;
tail ::= mixedType ;
--------------------slps::ldf-v15.0-xsd.bgf--------------------
simpleText ::= simpleTextElement+ ;
runnable ::= runnableType ;
mi ::= anyMath ;
mtext ::= anyMath ;
mixedType ::= (α | string())* ;
anyMath ::= (α | string())* ;
msub ::= anyMath ;
tail ::= mixedType ;
code ::= string() ;
mrow ::= anyMath ;
reference ::= string() ;
sample ::= sampleType ;
keyword ::= string() ;
math ::= anyMath ;
formula ::= α+ ;
varepsilon ::= ε ;
mo ::= anyMath ;
msup ::= anyMath ;
mfenced ::= anyMath ;
--------------------slps::ldf-v15.1-xsd.bgf--------------------
simpleText ::= simpleTextElement+ ;
runnable ::= runnableType ;
mi ::= anyMath ;
mtext ::= anyMath ;
mixedType ::= (α | string())* ;
anyMath ::= (α | string())* ;
msub ::= anyMath ;
tail ::= mixedType ;
code ::= string() ;
mrow ::= anyMath ;
reference ::= string() ;
sample ::= sampleType ;
keyword ::= string() ;
math ::= anyMath ;
formula ::= α+ ;
varepsilon ::= ε ;
mo ::= anyMath ;
msup ::= anyMath ;
mfenced ::= anyMath ;
--------------------slps::ldf-v16.0-xsd.bgf--------------------
simpleText ::= simpleTextElement+ ;
runnable ::= runnableType ;
mi ::= anyMath ;
mtext ::= anyMath ;
mixedType ::= (α | string())* ;
anyMath ::= (α | string())* ;
msub ::= anyMath ;
tail ::= mixedType ;
code ::= string() ;
mrow ::= anyMath ;
reference ::= string() ;
sample ::= sampleType ;
keyword ::= string() ;
math ::= anyMath ;
formula ::= α+ ;
varepsilon ::= ε ;
mo ::= anyMath ;
msup ::= anyMath ;
mfenced ::= anyMath ;
--------------------slps::ldf-v17.0-xsd.bgf--------------------
simpleText ::= simpleTextElement+ ;
runnable ::= runnableType ;
mi ::= anyMath ;
mtext ::= anyMath ;
mixedType ::= (α | string())* ;
anyMath ::= (α | string())* ;
msub ::= anyMath ;
tail ::= mixedType ;
code ::= string() ;
mrow ::= anyMath ;
reference ::= string() ;
sample ::= sampleType ;
keyword ::= string() ;
math ::= anyMath ;
formula ::= α+ ;
varepsilon ::= ε ;
mo ::= anyMath ;
msup ::= anyMath ;
mfenced ::= anyMath ;
--------------------slps::ldf-v18.0-xsd.bgf--------------------
simpleText ::= simpleTextElement+ ;
mrow ::= anyMath ;
code ::= string() ;
mi ::= anyMath ;
mtext ::= anyMath ;
keyword ::= string() ;
math ::= anyMath ;
formula ::= α+ ;
mixedType ::= (α | string())* ;
anyMath ::= (α | string())* ;
varepsilon ::= ε ;
msub ::= anyMath ;
mo ::= anyMath ;
msup ::= anyMath ;
mfenced ::= anyMath ;
--------------------slps::ldf-v18.1-xsd.bgf--------------------
simpleText ::= simpleTextElement+ ;
mrow ::= anyMath ;
code ::= string() ;
mi ::= anyMath ;
mtext ::= anyMath ;
keyword ::= string() ;
math ::= anyMath ;
formula ::= α+ ;
mixedType ::= (α | string())* ;
anyMath ::= (α | string())* ;
varepsilon ::= ε ;
msub ::= anyMath ;
mo ::= anyMath ;
msup ::= anyMath ;
mfenced ::= anyMath ;
--------------------slps::ldf-v19.0-xsd.bgf--------------------
textual-content ::= text-element+ ;
composite-section ::= section+ ;
mrow ::= anyMath ;
code ::= string() ;
mi ::= anyMath ;
mixed-type ::= (α | string())* ;
mtext ::= anyMath ;
keyword ::= string() ;
math ::= anyMath ;
formula ::= α+ ;
anyMath ::= (α | string())* ;
varepsilon ::= ε ;
msub ::= anyMath ;
mo ::= anyMath ;
msup ::= anyMath ;
mfenced ::= anyMath ;
--------------------slps::ldf-v2.0-xsd.bgf--------------------
runnable ::= runnableType ;
reference ::= string() ;
sample ::= sampleType ;
mixedType ::= (α | string())* ;
sampleType ::= ε ;
tail ::= mixedType ;
--------------------slps::ldf-v2.1-xsd.bgf--------------------
runnable ::= runnableType ;
reference ::= string() ;
sample ::= sampleType ;
mixedType ::= (α | string())* ;
sampleType ::= ε ;
tail ::= mixedType ;
--------------------slps::ldf-v20.0-xsd.bgf--------------------
textual-content ::= text-element+ ;
composite-section ::= section+ ;
mrow ::= anyMath ;
code ::= string() ;
mi ::= anyMath ;
mixed-type ::= (α | string())* ;
mtext ::= anyMath ;
keyword ::= string() ;
math ::= anyMath ;
formula ::= α+ ;
section ::= placeholder | simple-section | lexical-section | structured-section | composite-section | list-section ;
anyMath ::= (α | string())* ;
varepsilon ::= ε ;
msub ::= anyMath ;
mo ::= anyMath ;
msup ::= anyMath ;
mfenced ::= anyMath ;
--------------------slps::ldf-v20.1-xsd.bgf--------------------
textual-content ::= text-element+ ;
composite-section ::= section+ ;
mrow ::= anyMath ;
code ::= string() ;
mi ::= anyMath ;
mixed-type ::= (α | string())* ;
mtext ::= anyMath ;
keyword ::= string() ;
math ::= anyMath ;
formula ::= α+ ;
section ::= placeholder | simple-section | lexical-section | structured-section | composite-section | list-section ;
anyMath ::= (α | string())* ;
varepsilon ::= ε ;
msub ::= anyMath ;
mo ::= anyMath ;
msup ::= anyMath ;
mfenced ::= anyMath ;
--------------------slps::ldf-v21.0-xsd.bgf--------------------
textual-content ::= text-element+ ;
composite-section ::= section+ ;
mrow ::= anyMath ;
code ::= string() ;
mi ::= anyMath ;
mixed-type ::= (α | string())* ;
mtext ::= anyMath ;
keyword ::= string() ;
math ::= anyMath ;
formula ::= α+ ;
section ::= placeholder | simple-section | lexical-section | structured-section | composite-section | list-section ;
anyMath ::= (α | string())* ;
varepsilon ::= ε ;
msub ::= anyMath ;
mo ::= anyMath ;
msup ::= anyMath ;
mfenced ::= anyMath ;
--------------------slps::ldf-v21.1-xsd.bgf--------------------
textual-content ::= text-element+ ;
composite-section ::= section+ ;
mrow ::= anyMath ;
code ::= string() ;
mi ::= anyMath ;
mixed-type ::= (α | string())* ;
mtext ::= anyMath ;
keyword ::= string() ;
math ::= anyMath ;
formula ::= α+ ;
section ::= placeholder | simple-section | lexical-section | structured-section | composite-section | list-section ;
anyMath ::= (α | string())* ;
varepsilon ::= ε ;
msub ::= anyMath ;
mo ::= anyMath ;
msup ::= anyMath ;
mfenced ::= anyMath ;
--------------------slps::ldf-v22.0-xsd.bgf--------------------
textual-content ::= text-element+ ;
composite-section ::= section+ ;
mrow ::= anyMath ;
code ::= string() ;
mi ::= anyMath ;
mixed-type ::= (α | string())* ;
mtext ::= anyMath ;
keyword ::= string() ;
math ::= anyMath ;
formula ::= α+ ;
section ::= placeholder | simple-section | lexical-section | structured-section | composite-section | list-section ;
anyMath ::= (α | string())* ;
varepsilon ::= ε ;
msub ::= anyMath ;
mo ::= anyMath ;
msup ::= anyMath ;
mfenced ::= anyMath ;
--------------------slps::ldf-v23.0-xsd.bgf--------------------
textual-content ::= text-element+ ;
composite-section ::= any-section+ ;
mrow ::= anyMath ;
code ::= string() ;
mi ::= anyMath ;
mixed-type ::= (α | string())* ;
mtext ::= anyMath ;
keyword ::= string() ;
math ::= anyMath ;
formula ::= α+ ;
anyMath ::= (α | string())* ;
any-section ::= placeholder | simple-section | lexical-section | structured-section | composite-section | list-section ;
varepsilon ::= ε ;
msub ::= anyMath ;
mo ::= anyMath ;
msup ::= anyMath ;
mfenced ::= anyMath ;
--------------------slps::ldf-v3.0-xsd.bgf--------------------
runnable ::= runnableType ;
reference ::= string() ;
sample ::= sampleType ;
mixedType ::= (α | string())* ;
tail ::= mixedType ;
--------------------slps::ldf-v4.0-xsd.bgf--------------------
runnable ::= runnableType ;
reference ::= string() ;
sample ::= sampleType ;
mixedType ::= (α | string())* ;
tail ::= mixedType ;
--------------------slps::ldf-v5.0-xsd.bgf--------------------
runnable ::= runnableType ;
reference ::= string() ;
sample ::= sampleType ;
mixedType ::= (α | string())* ;
lexical ::= lexicals+ ;
tail ::= mixedType ;
--------------------slps::ldf-v6.0-xsd.bgf--------------------
runnable ::= runnableType ;
reference ::= string() ;
sample ::= sampleType ;
mixedType ::= (α | string())* ;
lexical ::= lexicalGroup+ ;
tail ::= mixedType ;
--------------------slps::ldf-v7.0-xsd.bgf--------------------
SimpleText ::= insideSimpleText+ ;
runnable ::= runnableType ;
reference ::= string() ;
sample ::= sampleType ;
mixedType ::= (α | string())* ;
lexical ::= lexicalGroup+ ;
tail ::= mixedType ;
--------------------slps::slps-btf.bgf--------------------
selector ::= string() ;
terminal ::= string() ;
nonterminal ::= string() ;
label ::= string() ;
root ::= grammar tree ;
--------------------slps::ldf-v7.1-xsd.bgf--------------------
SimpleText ::= insideSimpleText+ ;
runnable ::= runnableType ;
reference ::= string() ;
sample ::= sampleType ;
mixedType ::= (α | string())* ;
lexical ::= lexicalGroup+ ;
tail ::= mixedType ;
--------------------slps::ldf-v8.0-xsd.bgf--------------------
SimpleText ::= insideSimpleText+ ;
runnable ::= runnableType ;
reference ::= string() ;
sample ::= sampleType ;
mixedType ::= (α | string())* ;
tail ::= mixedType ;
--------------------slps::ldf-v8.1-xsd.bgf--------------------
SimpleText ::= insideSimpleText+ ;
runnable ::= runnableType ;
reference ::= string() ;
sample ::= sampleType ;
mixedType ::= (α | string())* ;
tail ::= mixedType ;
--------------------slps::ldf-v9.0-xsd.bgf--------------------
SimpleText ::= insideSimpleText+ ;
runnable ::= runnableType ;
reference ::= string() ;
sample ::= sampleType ;
keyword ::= string() ;
mixedType ::= (α | string())* ;
tail ::= mixedType ;
--------------------slps::ldf-v9.1-xsd.bgf--------------------
SimpleText ::= insideSimpleText+ ;
runnable ::= runnableType ;
reference ::= string() ;
sample ::= sampleType ;
keyword ::= string() ;
mixedType ::= (α | string())* ;
tail ::= mixedType ;
--------------------slps::slps-cbgf-adt.bgf--------------------
CBGFSequence ::= CBGFCommand* ;
--------------------slps::slps-cbgf-xsd.bgf--------------------
disappear-appear ::= production ;
unchain-chain ::= production ;
chain-unchain ::= production ;
decreasing-transformation ::= remove | disappear | narrow | downgrade | split ;
anonymize-deanonymize ::= production ;
deanonymize-anonymize ::= production ;
iterate ::= production ;
deyaccify-yaccify ::= production+ ;
yaccify-deyaccify ::= production+ ;
permute ::= production ;
vertical ::= scope ;
detour-abridge ::= production ;
downgrade ::= production production ;
dump ::= ε ;
anonymize ::= production ;
concretize ::= production ;
introduce-eliminate ::= production+ ;
eliminate-introduce ::= production+ ;
abstractize ::= production ;
abstractize-concretize ::= production ;
increasing-decreasing-transformation ::= add-remove | remove-add | appear-disappear | disappear-appear | widen-narrow | narrow-widen | upgrade-downgrade | downgrade-upgrade | unite-split | split-unite ;
atomic ::= transformation+ ;
appear-disappear ::= production ;
abridge ::= production ;
lassoc ::= production ;
bypass ::= ε ;
define-undefine ::= production+ ;
import ::= production+ ;
disappear ::= production ;
rassoc ::= production ;
distribute ::= scope ;
permute-permute ::= production production ;
introduce ::= production+ ;
inject-project ::= production ;
upgrade ::= production production ;
abridge-detour ::= production ;
concretize-abstractize ::= production ;
detour ::= production ;
inline ::= nonterminal ;
increasing-transformation ::= add | appear | widen | upgrade | unite ;
appear ::= production ;
designate ::= production ;
undefine-define ::= production+ ;
yaccify ::= production+ ;
deanonymize ::= production ;
unchain ::= production ;
project-inject ::= production ;
downgrade-upgrade ::= production production ;
upgrade-downgrade ::= production production ;
unlabel-designate ::= production ;
designate-unlabel ::= production ;
iterate-assoc ::= production production ;
assoc-iterate ::= production production ;
chain ::= production ;
sequence ::= (transformation | atomic)* ;
--------------------slps::slps-exbgf.bgf--------------------
sequence ::= (atomic | shielded | shieldedD | shieldedU | tempunfold | atomicI | atomicC | atomicH | atomicV | yaccifyH | deyaccifyH | deyaccifyC | regroupLR | regroupRL | massage1S2P | massageS12P | massageC2S | massage12C | massageO2C | massageC2O | massage-double | massageOP2S | promoteP2S | promoteY2S | double-inline | inlineYO | inlineYF | unite-many | eliminate-many | distributeV | distributeH | inlineY | inlineYH | inlineV | inlineU | chainV | chainX | introduceH | defineH | reyaccify | reextract | reextractY | extract-twice | redefine | redefineH | metachangeT2N | renameN | addV | addH | addX | removeV | removeH | extractV | extractC | narrowS21 | narrowP21 | narrowO21 | widen12O | widen12S | widen12P | widenP2S | unfoldV | unfold | unfoldY | foldY | factor-out | pull-out)* ;
--------------------slps::slps-lcf.bgf--------------------
scenario ::= shortcut* tools source+ target+ testset* ;
--------------------slps::slps-xbgf-adt.bgf--------------------
XBGFSequence ::= XBGFCommand* ;
--------------------slps::slps-xbgf-xsd.bgf--------------------
terminal ::= string() ;
decreasing-transformation ::= remove | disappear | narrow | downgrade | split ;
iterate ::= production ;
folding-unfolding-transformation ::= unfold | fold | inline | extract | abridge | detour | unchain | chain ;
vertical ::= scope ;
permute ::= production ;
abstract-revising-transformation ::= define | undefine | redefine | inject | project | replace ;
decorative-transformation ::= designate | unlabel | deanonymize | anonymize ;
downgrade ::= production production ;
dump ::= ε ;
anonymize ::= production ;
concretize ::= production ;
label ::= string() ;
abstractize ::= production ;
atomic ::= transformation+ ;
abridge ::= production ;
lassoc ::= production ;
bypass ::= ε ;
import ::= production+ ;
disappear ::= production ;
rassoc ::= production ;
distribute ::= scope ;
introduce ::= production+ ;
selector ::= string() ;
upgrade ::= production production ;
concrete-revising-transformation ::= abstractize | concretize | permute ;
inline ::= nonterminal ;
detour ::= production ;
increasing-transformation ::= add | appear | widen | upgrade | unite ;
refactoring-transformation ::= massage | distribute | factor | deyaccify | yaccify | eliminate | introduce | import | vertical | horizontal | equate | rassoc | lassoc | iterate | splitT ;
appear ::= production ;
designate ::= production ;
yaccify ::= production+ ;
deanonymize ::= production ;
nonterminal ::= string() ;
transformation ::= folding-unfolding-transformation | refactoring-transformation | increasing-transformation | decreasing-transformation | concrete-revising-transformation | abstract-revising-transformation | decorative-transformation | rename | reroot | strip | dump | bypass ;
unchain ::= production ;
chain ::= production ;
sequence ::= (transformation | atomic)* ;
--------------------slps::slps-xedd.bgf--------------------
step ::= rename | introduce | eliminate ;
evolution ::= step* ;
--------------------slps::slps-xldf.bgf--------------------
decreasing-transformation ::= remove | disappear | narrow | downgrade | split ;
iterate ::= production ;
folding-unfolding-transformation ::= unfold | fold | inline | extract | abridge | detour | unchain | chain ;
vertical ::= scope ;
permute ::= production ;
abstract-revising-transformation ::= define | undefine | redefine | inject | project | replace ;
decorative-transformation ::= designate | unlabel | deanonymize | anonymize ;
downgrade ::= production production ;
dump ::= ε ;
concretize ::= production ;
anonymize ::= production ;
abstractize ::= production ;
abridge ::= production ;
lassoc ::= production ;
bypass ::= ε ;
import ::= production+ ;
disappear ::= production ;
rassoc ::= production ;
distribute ::= scope ;
introduce ::= production+ ;
upgrade ::= production production ;
evolutionSequence ::= documentTransformation* ;
concrete-revising-transformation ::= abstractize | concretize | permute ;
inline ::= nonterminal ;
detour ::= production ;
increasing-transformation ::= add | appear | widen | upgrade | unite ;
refactoring-transformation ::= massage | distribute | factor | deyaccify | yaccify | eliminate | introduce | import | vertical | horizontal | equate | rassoc | lassoc | iterate | splitT ;
appear ::= production ;
designate ::= production ;
yaccify ::= production+ ;
deanonymize ::= production ;
transformation ::= folding-unfolding-transformation | refactoring-transformation | increasing-transformation | decreasing-transformation | concrete-revising-transformation | abstract-revising-transformation | decorative-transformation | rename | reroot | strip | dump | bypass ;
unchain ::= production ;
documentTransformation ::= addFigure | addSection | addSubsection | append | changeRole | combine | drop | extractSubsection | hyperlinkify | insert | importGrammar | importSample | place | retitle | removeSection | transformDocument | transformGrammar ;
chain ::= production ;
--------------------slps::xbgf-adt.bgf--------------------
XBGFSequence ::= XBGFCommand* ;
--------------------slps::xbgf-xsd.bgf--------------------
terminal ::= string() ;
decreasing-transformation ::= remove | disappear | narrow | downgrade | split ;
iterate ::= production ;
folding-unfolding-transformation ::= unfold | fold | inline | extract | abridge | detour | unchain | chain ;
vertical ::= scope ;
permute ::= production ;
abstract-revising-transformation ::= define | undefine | redefine | inject | project | replace ;
decorative-transformation ::= designate | unlabel | deanonymize | anonymize ;
downgrade ::= production production ;
dump ::= ε ;
anonymize ::= production ;
concretize ::= production ;
label ::= string() ;
abstractize ::= production ;
atomic ::= transformation+ ;
abridge ::= production ;
lassoc ::= production ;
bypass ::= ε ;
import ::= production+ ;
disappear ::= production ;
rassoc ::= production ;
distribute ::= scope ;
introduce ::= production+ ;
selector ::= string() ;
upgrade ::= production production ;
concrete-revising-transformation ::= abstractize | concretize | permute ;
inline ::= nonterminal ;
detour ::= production ;
increasing-transformation ::= add | appear | widen | upgrade | unite ;
refactoring-transformation ::= massage | distribute | factor | deyaccify | yaccify | eliminate | introduce | import | vertical | horizontal | equate | rassoc | lassoc | iterate | splitT ;
appear ::= production ;
designate ::= production ;
yaccify ::= production+ ;
deanonymize ::= production ;
nonterminal ::= string() ;
transformation ::= folding-unfolding-transformation | refactoring-transformation | increasing-transformation | decreasing-transformation | concrete-revising-transformation | abstract-revising-transformation | decorative-transformation | rename | reroot | strip | dump | bypass ;
unchain ::= production ;
chain ::= production ;
sequence ::= (transformation | atomic)* ;
--------------------slps::bgf-v4.3-adt.bgf--------------------
BGFProdList ::= BGFProduction* ;
BGFExprList ::= BGFExpression* ;
--------------------slps::bgf-v5.3-adt.bgf--------------------
BGFProdSet ::= BGFProduction* ;
BGFProdList ::= BGFProduction* ;
BGFExprList ::= BGFExpression* ;
--------------------slps::bgf-v5.4-adt.bgf--------------------
BGFExprSet ::= BGFExpression* ;
BGFProdSet ::= BGFProduction* ;
BGFProdList ::= BGFProduction* ;
BGFExprList ::= BGFExpression* ;
--------------------develop::ant.bgf--------------------
DocumentationTask ::= Javadoc ;
InExcludes ::= Includes ;
 InExcludes ::= Excludes ;
 InExcludes ::= IncludesFile ;
 InExcludes ::= ExcludesFile ;
Basic ::= Mapper ;
 Basic ::= InExcludes ;
 Basic ::= FileList ;
 Basic ::= Filter ;
 Basic ::= FiltersFile ;
 Basic ::= PathElement ;
ExecutionTask ::= Exec ;
 ExecutionTask ::= Java ;
PreDefinedTask ::= ExecutionTask ;
 PreDefinedTask ::= MiscellaneousTask ;
 PreDefinedTask ::= CompileTask ;
 PreDefinedTask ::= DocumentationTask ;
 PreDefinedTask ::= ArchiveTask ;
 PreDefinedTask ::= FileTask ;
CompileTask ::= Javac ;
ArchiveTask ::= Jar ;
Task ::= NewTask ;
 Task ::= PreDefinedTask ;
Property ::= PropertyName ;
 Property ::= PropertyFile ;
 Property ::= PropertyEnv ;
MiscellaneousTask ::= Echo ;
 MiscellaneousTask ::= Tstamp ;
Set ::= PatternSet ;
 Set ::= FileSet ;
 Set ::= FilterSet ;
 Set ::= Path ;
 Set ::= ClassPath ;
String ::= string() ;
FileTask ::= Mkdir ;
 FileTask ::= Copy ;
 FileTask ::= Delete ;
Pattern ::= Basic ;
 Pattern ::= Set ;
PropertyName ::= PropertyValue ;
 PropertyName ::= PropertyLocation ;
--------------------develop::java-project.bgf--------------------
JavaElement ::= Type ;
 JavaElement ::= Field ;
 JavaElement ::= Method ;
Field ::= ε ;
NamedElement ::= JavaProject ;
 NamedElement ::= PackageFragment ;
 NamedElement ::= CompilationUnit ;
 NamedElement ::= ImportDeclaration ;
 NamedElement ::= JavaElement ;
 NamedElement ::= PackageDeclaration ;
String ::= string() ;
--------------------develop::make.bgf--------------------
Element ::= Rule ;
 Element ::= Macro ;
Dependency ::= RuleDep ;
 Dependency ::= FileDep ;
String ::= string() ;
--------------------develop::bugzilla.bgf--------------------
Integer ::= integer() ;
StringElt ::= Keywords ;
 StringElt ::= Dependson ;
 StringElt ::= Blocks ;
 StringElt ::= Cc ;
String ::= string() ;
